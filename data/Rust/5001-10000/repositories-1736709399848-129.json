{
  "metadata": {
    "timestamp": 1736709399848,
    "page": 129,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjEzMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "crablang/crab",
      "stars": 5139,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 0.466796875,
          "content": "# EditorConfig helps developers define and maintain consistent\n# coding styles between different editors and IDEs\n# editorconfig.org\n\nroot = true\n\n[*]\nend_of_line = lf\ncharset = utf-8\ntrim_trailing_whitespace = true\ninsert_final_newline = true\nindent_style = space\nindent_size = 4\n\n[*.rs]\nmax_line_length = 100\n\n[*.md]\n# double whitespace at end of line\n# denotes a line break in Markdown\ntrim_trailing_whitespace = false\n\n[*.yml]\nindent_size = 2\n\n[Makefile]\nindent_style = tab\n"
        },
        {
          "name": ".git-blame-ignore-revs",
          "type": "blob",
          "size": 0.666015625,
          "content": "# Use `git config blame.ignorerevsfile .git-blame-ignore-revs` to make `git blame` ignore the following commits.\n\n# format the world\na06baa56b95674fc626b3c3fd680d6a65357fe60\n# format libcore\n95e00bfed801e264e9c4ac817004153ca0f19eb6\n# reformat with new rustfmt\n971c549ca334b7b7406e61e958efcca9c4152822\n# refactor infcx building\n283abbf0e7d20176f76006825b5c52e9a4234e4c\n# format libstd/sys\nc34fbfaad38cf5829ef5cfe780dc9d58480adeaa\n# move tests\ncf2dff2b1e3fa55fa5415d524200070d0d7aacfe\n# Run rustfmt on bootstrap\nb39a1d6f1a30ba29f25d7141038b9a5bf0126e36\n# reorder fluent message files\nf97fddab91fbf290ea5b691fe355d6f915220b6e\n# format let-else\ncc907f80b95c6ec530c5ee1b05b044a468f07eca\n"
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.4111328125,
          "content": "[attr]rust text eol=lf whitespace=tab-in-indent,trailing-space,tabwidth=4\n\n* text=auto eol=lf\n*.cpp rust\n*.h rust\n*.rs rust diff=rust\n*.fixed linguist-language=Rust\n*.mir linguist-language=Rust\nsrc/etc/installer/gfx/* binary\nsrc/vendor/** -text\nCargo.lock linguist-generated=false\n\n# Older git versions try to fix line endings on images and fonts, this prevents it.\n*.png binary\n*.ico binary\n*.woff binary\n*.woff2 binary\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 1.2998046875,
          "content": "# This file should only ignore things that are generated during a `x.py` build,\n# generated by common IDEs, and optional files controlled by the user that\n# affect the build (such as config.toml).\n# In particular, things like `mir_dump` should not be listed here; they are only\n# created during manual debugging and many people like to clean up instead of\n# having git ignore such leftovers. You can use `.git/info/exclude` to\n# configure your local ignore list.\n\n## File system\n.DS_Store\ndesktop.ini\n\n## Editor\n*.swp\n*.swo\nSession.vim\n.cproject\n.idea\n*.iml\n.vscode\n.project\n.favorites.json\n.settings/\n.vs/\n\n## Tool\n.valgrindrc\n.cargo\n# Included because it is part of the test case\n!/tests/run-make/thumb-none-qemu/example/.cargo\n\n## Configuration\n/config.toml\n/Makefile\nconfig.mk\nconfig.stamp\nno_llvm_build\n\n## Build\n/dl/\n/doc/\n/inst/\n/llvm/\n/mingw-build/\nbuild/\n!/compiler/rustc_mir_build/src/build/\n/build-rust-analyzer/\n/dist/\n/unicode-downloads\n/target\n/src/bootstrap/target\n/src/tools/x/target\n# Created by default with `src/ci/docker/run.sh`\n/obj/\n\n## Temporary files\n*~\n\\#*\n\\#*\\#\n.#*\n\n## Tags\ntags\ntags.*\nTAGS\nTAGS.*\n\n## Python\n__pycache__/\n*.py[cod]\n*$py.class\n\n## Node\nnode_modules\npackage-lock.json\npackage.json\n\n## Rustdoc GUI tests\ntests/rustdoc-gui/src/**.lock\n\n# Before adding new lines, see the comment at the top.\n"
        },
        {
          "name": ".gitmodules",
          "type": "blob",
          "size": 0.1376953125,
          "content": "[submodule \"src/llvm-project\"]\n\tpath = src/llvm-project\n\turl = https://github.com/rust-lang/llvm-project.git\n\tbranch = rustc/16.0-2023-06-05\n"
        },
        {
          "name": ".mailmap",
          "type": "blob",
          "size": 29.3935546875,
          "content": "#\n# This list is used by git-shortlog to aggregate contributions.  It is\n# necessary when either the author's full name is not always written\n# the same way, and/or the same author contributes from different\n# email addresses.\n#\n\nAaron Todd <github@opprobrio.us>\nAbhishek Chanda <abhishek.becs@gmail.com> Abhishek Chanda <abhishek@cloudscaling.com>\nAbhijeet Bhagat <abhijeet.bhagat@gmx.com>\nAbroskin Alexander <arkweid@evilmartians.com>\nAdolfo Ochagavía <aochagavia92@gmail.com>\nAdrian Heine né Lang <mail@adrianheine.de>\nAdrien Tétar <adri-from-59@hotmail.fr>\nAhmed Charles <ahmedcharles@gmail.com> <acharles@outlook.com>\nAlan Egerton <eggyal@gmail.com>\nAlan Stoate <alan.stoate@gmail.com>\nAlbert Larsan <albert.larsan@gmail.com> <74931857+albertlarsan68@users.noreply.github.com>\nAlessandro Decina <alessandro.d@gmail.com>\nAlex Burka <durka42+github@gmail.com> Alex Burka <aburka@seas.upenn.edu>\nAlex Hansen <ahansen2@trinity.edu>\nAlex Lyon <arcterus@mail.com> <Arcterus@mail.com>\nAlex Newman <posix4e@gmail.com> Alex HotShot Newman <posix4e@gmail.com>\nAlex Rønne Petersen <alex@lycus.org>\nAlex Vlasov <alex.m.vlasov@gmail.com>\nAlex von Gluck IV <kallisti5@unixzen.com>\nAlexander Light <allight@cs.brown.edu> Alexander Light <scialexlight@gmail.com>\nAlexander Ronald Altman <alexanderaltman@me.com>\nAlexandre Martin <martin.alex32@hotmail.fr>\nAlexis Beingessner <a.beingessner@gmail.com>\nAlfie John <alfie@alfie.wtf> Alfie John <alfiej@fastmail.fm>\nAlona Enraght-Moony <code@alona.page> <nixon.emoony@gmail.com>\nAlona Enraght-Moony <code@alona.page> <nixon@caminus.local>\nAmos Onn <amosonn@gmail.com>\nAna-Maria Mihalache <mihalacheana.maria@yahoo.com>\nAnatoly Ikorsky <aikorsky@gmail.com>\nAndre Bogus <bogusandre@gmail.com>\nAndrea Ciliberti <meziu210@icloud.com>\nAndreas Gal <gal@mozilla.com> <andreas.gal@gmail.com>\nAndreas Jonson <andjo403@users.noreply.github.com>\nAndrew Gauger <andygauge@gmail.com>\nAndrew Kuchev <0coming.soon@gmail.com> Andrew <0coming.soon@gmail.com>\nAndrew Lamb <andrew@nerdnetworks.org>\nAndrew Poelstra <asp11@sfu.ca> <apoelstra@wpsoftware.net>\nAnhad Singh <andypythonappdeveloper@gmail.com>\nAntoine Plaskowski <antoine.plaskowski@epitech.eu>\nAnton Löfgren <anton.lofgren@gmail.com> <alofgren@op5.com>\nAraam Borhanian <avborhanian@gmail.com>\nAraam Borhanian <avborhanian@gmail.com> <dobbybabee@gmail.com>\nAreski Belaid <areski@gmail.com> areski <areski@gmail.com>\nAriel Ben-Yehuda <arielb1@mail.tau.ac.il> Ariel Ben-Yehuda <ariel.byd@gmail.com>\nAriel Ben-Yehuda <arielb1@mail.tau.ac.il> arielb1 <arielb1@mail.tau.ac.il>\nArtem Chernyak <artemchernyak@gmail.com>\nArthur Cohen <arthur.cohen@epita.fr>\nArthur Silva <arthurprs@gmail.com>\nArthur Woimbée <arthur.woimbee@gmail.com>\nArtyom Pavlov <newpavlov@gmail.com>\nAustin Seipp <mad.one@gmail.com> <as@hacks.yi.org>\nAyaz Hafiz <ayaz.hafiz.1@gmail.com>\nAydin Kim <ladinjin@hanmail.net> aydin.kim <aydin.kim@samsung.com>\nAyush Mishra <ayushmishra2005@gmail.com>\nasrar <aszenz@gmail.com>\nBaoshanPang <pangbw@gmail.com>\nBarosl Lee <vcs@barosl.com> Barosl LEE <github@barosl.com>\nBastian Kersting <bastian@cmbt.de>\nBastien Orivel <eijebong@bananium.fr>\nBen Alpert <ben@benalpert.com> <spicyjalapeno@gmail.com>\nBen Lewis <benlewisj@gmail.com>\nBen Sago <ogham@users.noreply.github.com>\nBen Sago <ogham@users.noreply.github.com> <ogham@bsago.me>\nBen Striegel <ben.striegel@gmail.com>\nBenjamin Jackman <ben@jackman.biz>\nBenoît Cortier <benoit.cortier@fried-world.eu>\nBheesham Persaud <bheesham123@hotmail.com> Bheesham Persaud <bheesham.persaud@live.ca>\nBjörn Steinbrink <bsteinbr@gmail.com> <B.Steinbrink@gmx.de>\nblake2-ppc <ulrik.sverdrup@gmail.com> <blake2-ppc>\nboolean_coercion <booleancoercion@gmail.com>\nBoris Egorov <jightuse@gmail.com> <egorov@linux.com>\nbors <bors@rust-lang.org> bors[bot] <26634292+bors[bot]@users.noreply.github.com>\nbors <bors@rust-lang.org> bors[bot] <bors[bot]@users.noreply.github.com>\nBraden Nelson <moonheart08@users.noreply.github.com>\nBrandon Sanderson <singingboyo@gmail.com> Brandon Sanderson <singingboyo@hotmail.com>\nBrett Cannon <brett@python.org> Brett Cannon <brettcannon@users.noreply.github.com>\nBrian Anderson <banderson@mozilla.com> <andersrb@gmail.com>\nBrian Anderson <banderson@mozilla.com> <banderson@mozilla.org>\nBrian Bowman <seeker14491@gmail.com>\nBrian Cain <brian.cain@gmail.com>\nBrian Dawn <brian.t.dawn@gmail.com>\nBrian Leibig <brian@brianleibig.com> Brian Leibig <brian.leibig@gmail.com>\nCaleb Cartwright <caleb.cartwright@outlook.com>\nCaleb Jones <code@calebjones.net>\nNoah Lev <camelidcamel@gmail.com>\nNoah Lev <camelidcamel@gmail.com> <37223377+camelid@users.noreply.github.com>\ncameron1024 <cameron.studdstreet@gmail.com>\nCamille Gillot <gillot.camille@gmail.com>\nCarl-Anton Ingmarsson <mail@carlanton.se> <ca.ingmarsson@gmail.com>\nCarlo Teubner <carlo.teubner@gmail.com>\nCarol (Nichols || Goulding) <carol.nichols@gmail.com> <193874+carols10cents@users.noreply.github.com>\nCarol (Nichols || Goulding) <carol.nichols@gmail.com> <carol.nichols@gmail.com>\nCarol (Nichols || Goulding) <carol.nichols@gmail.com> <cnichols@thinkthroughmath.com>\nCarol Willing <carolcode@willingconsulting.com>\nChandler Deng <chandde@microsoft.com>\nCharles Lew <crlf0710@gmail.com> CrLF0710 <crlf0710@gmail.com>\nChris C Cerami <chrisccerami@users.noreply.github.com> Chris C Cerami <chrisccerami@gmail.com>\nChris Denton <chris@chrisdenton.dev> Chris Denton <ChrisDenton@users.noreply.github.com>\nChris Gregory <czipperz@gmail.com>\nChris Pardy <chrispardy36@gmail.com>\nChris Pressey <cpressey@gmail.com>\nChris Thorn <chris@thorn.co> Chris Thorn <thorn@thoughtbot.com>\nChris Vittal <christopher.vittal@gmail.com> Christopher Vittal <christopher.vittal@gmail.com>\nChristiaan Dirkx <christiaan@dirkx.email> <christiaan@dirkx.com>\nChristiaan Dirkx <christiaan@dirkx.email> CDirkx <christiaan@dirkx.com>\nChristiaan Dirkx <christiaan@dirkx.email> CDirkx <christiaan@dirkx.email>\nChristian Poveda <git@pvdrz.com> <christianpoveda@protonmail.com>\nChristian Poveda <git@pvdrz.com> <cn.poveda.ruiz@gmail.com>\nChristian Poveda <git@pvdrz.com> <z1mvader@protonmail.com>\nChristian Poveda <git@pvdrz.com> <cpovedar@fnal.gov>\nChristian Poveda <git@pvdrz.com> <git@christianpoveda.xyz>\nChristian Poveda <git@pvdrz.com> <31802960+christianpoveda@users.noreply.github.com>\nChristian Poveda <git@pvdrz.com> <christianpoveda@uhura.edef.eu>\nChristian Vallentin <vallentinsource@gmail.com>\nChristoffer Buchholz <chris@chrisbuchholz.me>\nChristopher Durham <cad97@cad97.com>\nClark Gaebel <cg.wowus.cg@gmail.com> <cgaebel@mozilla.com>\nClement Miao <clementmiao@gmail.com>\nClément Renault <renault.cle@gmail.com>\nCliff Dyer <jcd@sdf.org>\nClinton Ryan <clint.ryan3@gmail.com>\nCorey Richardson <corey@octayn.net> Elaine \"See More\" Nemo <corey@octayn.net>\nCrazycolorz5 <Crazycolorz5@gmail.com>\ncsmoe <35686186+csmoe@users.noreply.github.com>\nCyryl Płotnicki <cyplo@cyplo.net>\nDamien Schoof <damien.schoof@gmail.com>\nDan Robertson <danlrobertson89@gmail.com>\nDaniel Campoverde <alx741@riseup.net>\nDaniel J Rollins <drollins@financialforce.com>\nDaniel Mueller <deso@posteo.net>\nDaniel Ramos <dan@daramos.com>\nDaniele D'Orazio <d.dorazio96@gmail.com>\nDante Broggi <34220985+Dante-Broggi@users.noreply.github.com>\nDavid Carlier <devnexen@gmail.com>\nDavid Klein <david.klein@baesystemsdetica.com>\nDavid Manescu <david.manescu@gmail.com> <dman2626@uni.sydney.edu.au>\nDavid Ross <daboross@daboross.net>\nDavid Wood <david@davidtw.co> <david.wood@huawei.com>\nDeadbeef <ent3rm4n@gmail.com>\nDeadbeef <ent3rm4n@gmail.com> <fee1-dead-beef@protonmail.com>\ndependabot[bot] <dependabot[bot]@users.noreply.github.com> <27856297+dependabot-preview[bot]@users.noreply.github.com>\ndependabot[bot] <dependabot[bot]@users.noreply.github.com> <49699333+dependabot[bot]@users.noreply.github.com>\ndependabot[bot] <dependabot[bot]@users.noreply.github.com> <dependabot-preview[bot]@users.noreply.github.com>\ndependabot[bot] <dependabot[bot]@users.noreply.github.com> <support@dependabot.com>\nDerek Chiang <derekchiang93@gmail.com> Derek Chiang (Enchi Jiang) <derekchiang93@gmail.com>\nDeveloperC <DeveloperC@protonmail.com>\nDevin Ragotzy <devin.ragotzy@gmail.com>\nDharma Saputra Wijaya <dswijj@gmail.com>\nDiggory Hardy <diggory.hardy@gmail.com> Diggory Hardy <github@dhardy.name>\nDileep Bapat <dileepbapat@gmail.com>\nDonough Liu <ldm2993593805@163.com> <donoughliu@gmail.com>\nDonough Liu <ldm2993593805@163.com> DingMing Liu <liudingming@bupt.edu.cn>\nDustin Bensing <dustin.bensing@googlemail.com>\nDutchGhost <kasper199914@gmail.com>\nDylan Braithwaite <dylanbraithwaite1@gmail.com> <mail@dylanb.me>\nDylan DPC <dylan.dpc@gmail.com>\nDylan MacKenzie <ecstaticmorse@gmail.com>\nDzmitry Malyshau <kvarkus@gmail.com>\nE. Dunham <edunham@mozilla.com> edunham <edunham@mozilla.com>\nEd Barnard <eabarnard@gmail.com>\nEduard-Mihai Burtescu <edy.burt@gmail.com>\nEduardo Bautista <me@eduardobautista.com> <=>\nEduardo Bautista <me@eduardobautista.com> <mail@eduardobautista.com>\nEduardo Broto <ebroto@tutanota.com>\nEdward Shen <code@eddie.sh> <xes@meta.com>\nElliott Slaughter <elliottslaughter@gmail.com> <eslaughter@mozilla.com>\nElly Fong-Jones <elly@leptoquark.net>\nEric Holk <eric.holk@gmail.com> <eholk@cs.indiana.edu>\nEric Holk <eric.holk@gmail.com> <eholk@mozilla.com>\nEric Holmes <eric@ejholmes.net>\nEric Reed <ecreed@cs.washington.edu> <ereed@mozilla.com>\nErick Tryzelaar <erick.tryzelaar@gmail.com> <etryzelaar@iqt.org>\nErik Desjardins <erikdesjardins@users.noreply.github.com>\nErik Jensen <erikjensen@rkjnsn.net>\nErin Power <xampprocky@gmail.com>\nErin Power <xampprocky@gmail.com> <theaaronepower@gmail.com>\nErin Power <xampprocky@gmail.com> <Aaronepower@users.noreply.github.com>\nEsteban Küber <esteban@kuber.com.ar>\nEsteban Küber <esteban@kuber.com.ar> <esteban@commure.com>\nEsteban Küber <esteban@kuber.com.ar> <estebank@users.noreply.github.com>\nEsteban Küber <esteban@kuber.com.ar> <github@kuber.com.ar>\nEthan Dagner <napen123@gmail.com>\nEvgeny Sologubov\nF001 <changchun.fan@qq.com>\nFabian Kössel <fkjogu@users.noreply.github.com>\nFalco Hirschenberger <falco.hirschenberger@gmail.com> <hirschen@itwm.fhg.de>\nFelix S. Klock II <pnkfelix@pnkfx.org> Felix S Klock II <pnkfelix@pnkfx.org>\nFélix Saparelli <felix@passcod.name>\nFlaper Fesp <flaper87@gmail.com>\nFlorian Berger <fbergr@gmail.com>\nFlorian Wilkens <mrfloya_github@outlook.com> Florian Wilkens <floya@live.de>\nFrançois Mockers <mockersf@gmail.com>\nFrank Steffahn <fdsteffahn@gmail.com> <frank.steffahn@stu.uni-kiel.de>\nFridtjof Stoldt <xFrednet@gmail.com>\nfukatani <nannyakannya@gmail.com>\nFuqiao Xue <xfq.free@gmail.com>\nGareth Daniel Smith <garethdanielsmith@gmail.com> gareth <gareth@gareth-N56VM.(none)>\nGareth Daniel Smith <garethdanielsmith@gmail.com> Gareth Smith <garethdanielsmith@gmail.com>\nGauri Kholkar <f2013002@goa.bits-pilani.ac.in>\nGeorges Dubus <georges.dubus@gmail.com> <georges.dubus@compiletoi.net>\nGiles Cope <gilescope@gmail.com>\nGlen De Cauwsemaecker <decauwsemaecker.glen@gmail.com>\nGraham Fawcett <graham.fawcett@gmail.com> Graham Fawcett <fawcett@uwindsor.ca>\nGraydon Hoare <graydon@pobox.com> Graydon Hoare <graydon@mozilla.com>\nGreg V <greg@unrelenting.technology>\nGregor Peach <gregorpeach@gmail.com>\nGrzegorz Bartoszek <grzegorz.bartoszek@thaumatec.com>\nGuanqun Lu <guanqun.lu@gmail.com>\nGuillaume Gomez <guillaume1.gomez@gmail.com>\nGuillaume Gomez <guillaume1.gomez@gmail.com> ggomez <ggomez@ggo.ifr.lan>\nGuillaume Gomez <guillaume1.gomez@gmail.com> Guillaume Gomez <ggomez@ggo.ifr.lan>\nGuillaume Gomez <guillaume1.gomez@gmail.com> Guillaume Gomez <guillaume.gomez@huawei.com>\nhamidreza kalbasi <hamidrezakalbasi@protonmail.com>\nHanna Kruppe <hanna.kruppe@gmail.com> <robin.kruppe@gmail.com>\nHeather <heather@cynede.net> <Cynede@Gentoo.org>\nHeather <heather@cynede.net> <Heather@cynede.net>\nHerman J. Radtke III <herman@hermanradtke.com> Herman J. Radtke III <hermanradtke@gmail.com>\nHirochika Matsumoto <git@hkmatsumoto.com> <matsujika@gmail.com>\nHrvoje Nikšić <hniksic@gmail.com>\nHsiang-Cheng Yang <rick68@users.noreply.github.com>\nIan Jackson <ijackson@chiark.greenend.org.uk> <ian.jackson@citrix.com>\nIan Jackson <ijackson@chiark.greenend.org.uk> <ijackson+github@slimy.greenend.org.uk>\nIan Jackson <ijackson@chiark.greenend.org.uk> <iwj@xenproject.org>\nIbraheem Ahmed <ibraheem@ibraheem.ca> <ibrah1440@gmail.com>\nIlyong Cho <ilyoan@gmail.com>\ninquisitivecrystal <22333129+inquisitivecrystal@users.noreply.github.com>\nIrina Popa <irinagpopa@gmail.com>\nIvan Ivaschenko <defuz.net@gmail.com>\nivan tkachenko <me@ratijas.tk>\nJ. J. Weber <jjweber@gmail.com>\nJack Huey <jack.huey@umassmed.edu>\nJacob <jacob.macritchie@gmail.com>\nJacob Greenfield <xales@naveria.com>\nJacob Pratt <jacob@jhpratt.dev> <the.z.cuber@gmail.com>\nJake Vossen <jake@vossen.dev>\nJakob Degen <jakob.e.degen@gmail.com> <jakob@degen.com>\nJakob Lautrup Nysom <jako3047@gmail.com>\nJakub Adam Wieczorek <jakub.adam.wieczorek@gmail.com>\nJakub Adam Wieczorek <jakub.adam.wieczorek@gmail.com> <jakub.bukaj@yahoo.com>\nJakub Adam Wieczorek <jakub.adam.wieczorek@gmail.com> <jakub@jakub.cc>\nJakub Adam Wieczorek <jakub.adam.wieczorek@gmail.com> <jakubw@jakubw.net>\nJames [Undefined] <tpzker@thepuzzlemaker.info>\nJames Deng <cnjamesdeng@gmail.com> <cnJamesDeng@gmail.com>\nJames Hinshelwood <jameshinshelwood1@gmail.com> <james.hinshelwood@bigpayme.com>\nJames Miller <bladeon@gmail.com> <james@aatch.net>\nJames Perry <james.austin.perry@gmail.com>\nJames Sanderson <zofrex@gmail.com>\nJaro Fietz <jaro.fietz@gmx.de>\nJason Fager <jfager@gmail.com>\nJason Liquorish <jason@liquori.sh> <Bassetts@users.noreply.github.com>\nJason Orendorff <jorendorff@mozilla.com> <jason.orendorff@gmail.com>\nJason Orendorff <jorendorff@mozilla.com> <jason@mozmac-2.local>\nJason Toffaletti <toffaletti@gmail.com> Jason Toffaletti <jason@topsy.com>\nJauhien Piatlicki <jauhien@gentoo.org> Jauhien Piatlicki <jpiatlicki@zertisa.com>\nJay True <glacjay@gmail.com>\nJeremy Letang <letang.jeremy@gmail.com>\nJeremy Sorensen <jeremy.a.sorensen@gmail.com>\nJeremy Stucki <dev@jeremystucki.ch> <stucki.jeremy@gmail.com>\nJeremy Stucki <dev@jeremystucki.ch> <jeremy@myelin.ch>\nJeremy Stucki <dev@jeremystucki.ch>\nJerry Hardee <hardeejj9@gmail.com>\nJesús Rubio <jesusprubio@gmail.com>\nJethro Beekman <github@jbeekman.nl>\nJian Zeng <knight42@mail.ustc.edu.cn>\nJihyun Yu <j.yu@navercorp.com> <yjh0502@gmail.com>\nJihyun Yu <j.yu@navercorp.com> jihyun <jihyun@nablecomm.com>\nJihyun Yu <j.yu@navercorp.com> Jihyun Yu <jihyun@nclab.kaist.ac.kr>\nJoão Oliveira <hello@jxs.pt> joaoxsouls <joaoxsouls@gmail.com>\njoboet <jonasboettiger@icloud.com>\nJohann Hofmann <git@johann-hofmann.com> Johann <git@johann-hofmann.com>\nJohn Clements <clements@racket-lang.org> <clements@brinckerhoff.org>\nJohn Hodge <acessdev@gmail.com> John Hodge <tpg@mutabah.net>\nJohn Hörnvall <trolledwoods@gmail.com>\nJohn Kåre Alsaker <john.kare.alsaker@gmail.com>\nJohn Talling <inrustwetrust@users.noreply.github.com>\nJohn Van Enk <vanenkj@gmail.com>\nJonas Tepe <jonasprogrammer@gmail.com>\nJonathan Bailey <jbailey@mozilla.com> <jbailey@jbailey-20809.local>\nJonathan Chan Kwan Yin <sofe2038@gmail.com>\nJonathan L <Xmasreturns@users.noreply.github.com>\nJonathan S <gereeter@gmail.com> Jonathan S <gereeter+code@gmail.com>\nJonathan Sieber <mail@strfry.org>\nJonathan Turner <probata@hotmail.com>\nJorge Aparicio <japaric@linux.com> <japaricious@gmail.com>\nJosef Reinhard Brandl <mail@josefbrandl.de>\nJoseph Dunne <jd@lambda.tech>\nJoseph Martin <pythoner6@gmail.com>\nJoseph Richey <joerichey@google.com>\nJoseph T. Lyons <JosephTLyons@gmail.com>\nJoseph T. Lyons <JosephTLyons@gmail.com> <josephtlyons@gmail.com>\nJoseph T. Lyons <JosephTLyons@gmail.com> <JosephTLyons@users.noreply.github.com>\nJosh Cotton <jcotton42@outlook.com>\nJosh Driver <keeperofdakeys@gmail.com>\nJosh Holmer <jholmer.in@gmail.com>\nJulian Knodt <julianknodt@gmail.com>\njumbatm <jumbatm@gmail.com> <30644300+jumbatm@users.noreply.github.com>\nJunyoung Cho <june0.cho@samsung.com>\nJynn Nelson <github@jyn.dev> <jyn514@gmail.com>\nJynn Nelson <github@jyn.dev> <joshua@yottadb.com>\nJynn Nelson <github@jyn.dev> <jyn.nelson@redjack.com>\nJynn Nelson <github@jyn.dev> <jnelson@cloudflare.com>\nJynn Nelson <github@jyn.dev>\nJyun-Yan You <jyyou.tw@gmail.com> <jyyou@cs.nctu.edu.tw>\nKalita Alexey <kalita.alexey@outlook.com>\nKampfkarren <boynedmaster@gmail.com>\nKang Seonghoon <kang.seonghoon@mearie.org> <public+git@mearie.org>\nKarim Snj <karim.snj@gmail.com>\nKatze <binary@benary.org>\nKeegan McAllister <mcallister.keegan@gmail.com> <kmcallister@mozilla.com>\nKerem Kat <keremkat@gmail.com>\nKevin Butler <haqkrs@gmail.com>\nKevin Jiang <kwj2104@columbia.edu>\nKornel Lesiński <kornel@geekhood.net>\nKrishna Sai Veera Reddy <veerareddy@email.arizona.edu>\nKyeongwoon Lee <kyeongwoon.lee@samsung.com>\nKyle J Strand <batmanaod@gmail.com> <BatmanAoD@users.noreply.github.com>\nKyle J Strand <batmanaod@gmail.com> <kyle.j.strand@gmail.com>\nKyle J Strand <batmanaod@gmail.com> <kyle.strand@pieinsurance.com>\nKyle J Strand <batmanaod@gmail.com> <kyle.strand@rms.com>\nLaurențiu Nicola <lnicola@dend.ro>\nlcnr <rust@lcnr.de> <bastian_kauschke@hotmail.de>\nLee Jeffery <leejeffery@gmail.com> Lee Jeffery <lee@leejeffery.co.uk>\nLee Wondong <wdlee91@gmail.com>\nlengyijun <sjtu5140809011@gmail.com>\nLennart Kudling <github@kudling.de>\nLéo Lanteri Thauvin <leseulartichaut@gmail.com>\nLéo Lanteri Thauvin <leseulartichaut@gmail.com> <38361244+LeSeulArtichaut@users.noreply.github.com>\nLéo Testard <leo.testard@gmail.com>\nLeón Orell Valerian Liehr <me@fmease.dev> <liehr.exchange@gmx.net>\nLeonardo Yvens <leoyvens@gmail.com>\nLiigo Zhuang <liigo@qq.com>\nLily Ballard <lily@ballards.net> <kevin@sb.org>\nLindsey Kuper <lindsey@composition.al> <lindsey@rockstargirl.org>\nLindsey Kuper <lindsey@composition.al> <lkuper@mozilla.com>\nLiu Dingming <liudingming@bytedance.com>\nLoo Maclin <loo.maclin@protonmail.com>\nLoïc BRANSTETT <lolo.branstett@numericable.fr>\nLucy <luxx4x@protonmail.com>\nLukas H. <lukaramu@users.noreply.github.com>\nLukas Lueg <lukas.lueg@gmail.com>\nLuke Metz <luke.metz@students.olin.edu>\nLuqman Aden <me@luqman.ca> <laden@csclub.uwaterloo.ca>\nLuqman Aden <me@luqman.ca> <laden@mozilla.com>\nLzu Tao <taolzu@gmail.com>\nMaik Klein <maikklein@googlemail.com>\nMalo Jaffré <jaffre.malo@gmail.com>\nManish Goregaokar <manishsmail@gmail.com>\nMara Bos <m-ou.se@m-ou.se>\nMarcell Pardavi <marcell.pardavi@gmail.com>\nMarcus Klaas de Vries <mail@marcusklaas.nl>\nMargaret Meyerhofer <mmeyerho@andrew.cmu.edu> <mmeyerho@andrew>\nMark Mansi <markm@cs.wisc.edu>\nMark Rousskov <mark.simulacrum@gmail.com>\nMark Sinclair <mark.edward.x@gmail.com>\nMark Sinclair <mark.edward.x@gmail.com> =Mark Sinclair <=125axel125@gmail.com>\nMarkus Legner <markus@legner.ch>\nMarkus Westerlind <marwes91@gmail.com> Markus <marwes91@gmail.com>\nMartin Carton <cartonmartin+git@gmail.com>\nMartin Habovštiak <martin.habovstiak@gmail.com>\nMartin Hafskjold Thoresen <martinhath@gmail.com>\nMatej Lach <matej.lach@gmail.com> Matej Ľach <matej.lach@gmail.com>\nMateusz Mikuła <mati865@gmail.com>\nMateusz Mikuła <mati865@gmail.com> <mati865@users.noreply.github.com>\nMateusz Mikuła <mati865@gmail.com> <matti@marinelayer.io>\nMatt Brubeck <mbrubeck@limpet.net> <mbrubeck@cs.hmc.edu>\nMatthew Auld <matthew.auld@intel.com>\nMatthew Jasper <mjjasper1@gmail.com>\nMatthew Kraai <kraai@ftbfs.org>\nMatthew Kraai <kraai@ftbfs.org> <matt.kraai@abbott.com>\nMatthew Kraai <kraai@ftbfs.org> <mkraai@its.jnj.com>\nMatthew McPherrin <matthew@mcpherrin.ca> <matt@mcpherrin.ca>\nMatthew Tran <0e4ef622@gmail.com>\nMatthijs Hofstra <thiezz@gmail.com>\nMax Sharnoff <github@max.sharnoff.org>\nMax Wase <max.vvase@gmail.com>\nMazdak Farrokhzad <twingoow@gmail.com>\nMeade Kincke <thedarkula2049@gmail.com>\nMelody Horn <melody@boringcactus.com> <mathphreak@gmail.com>\nMendes <pedro.mendes.26@gmail.com>\nmental <m3nta1@yahoo.com>\nmibac138 <5672750+mibac138@users.noreply.github.com>\nMichael Williams <m.t.williams@live.com>\nMichael Woerister <michaelwoerister@posteo> <michaelwoerister@gmail>\nMichael Woerister <michaelwoerister@posteo> <michaelwoerister@users.noreply.github.com>\nMichael Woerister <michaelwoerister@posteo> <michaelwoerister@posteo.net>\nMichael Zhang <hmperson1@gmail.com>\nMichał Krasnoborski <mkrdln@gmail.com>\nMichiel De Muynck <michieldemuynck@gmail.com>\nMickaël Raybaud-Roig <raybaudroigm@gmail.com> m-r-r <raybaudroigm@gmail.com>\nMikhail Babenko <misha-babenko@yandex.ru>\nMilan Landaverde <milanlandaverde@gmail.com>\nmjptree <michael.prantl@hotmail.de>\nMs2ger <ms2ger@gmail.com> <Ms2ger@gmail.com>\nmsizanoen1 <qtmlabs@protonmail.com>\nMukilan Thiagarajan <mukilanthiagarajan@gmail.com>\nNadrieril Feneanar <Nadrieril@users.noreply.github.com>\nNAKASHIMA, Makoto <makoto.nksm+github@gmail.com> <makoto.nksm@gmail.com>\nNAKASHIMA, Makoto <makoto.nksm+github@gmail.com> <makoto.nksm+github@gmail.com>\nNathan Ringo <remexre@gmail.com>\nNathan West <Lucretiel@gmail.com> <lucretiel@gmail.com>\nNathan Whitaker <nathan.whitaker01@gmail.com>\nNathan Wilson <wilnathan@gmail.com>\nNathaniel Hamovitz <18648574+nhamovitz@users.noreply.github.com>\nNathaniel Herman <nherman@post.harvard.edu> Nathaniel Herman <nherman@college.harvard.edu>\nNeil Pankey <npankey@gmail.com> <neil@wire.im>\nNgo Iok Ui (Wu Yu Wei) <wusyong9104@gmail.com>\nNicholas Baron <nicholas.baron.ten@gmail.com>\nNicholas Bishop <nbishop@nbishop.net> <nicholasbishop@gmail.com>\nNicholas Bishop <nbishop@nbishop.net> <nicholasbishop@google.com>\nNicholas Nethercote <n.nethercote@gmail.com> <nnethercote@apple.com>\nNicholas Nethercote <n.nethercote@gmail.com> <nnethercote@mozilla.com>\nNick Platt <platt.nicholas@gmail.com>\nNiclas Schwarzlose <15schnic@gmail.com>\nNicolas Abram <abramlujan@gmail.com>\nNicole Mazzuca <npmazzuca@gmail.com>\nNilstrieb <48135649+Nilstrieb@users.noreply.github.com> nils <48135649+Nilstrieb@users.noreply.github.com>\nNif Ward <nif.ward@gmail.com>\nNika Layzell <nika@thelayzells.com> <michael@thelayzells.com>\nNODA Kai <nodakai@gmail.com>\noliver <16816606+o752d@users.noreply.github.com>\nOliver Middleton <olliemail27@gmail.com> <ollie27@users.noreply.github.com>\nOliver Scherer <oli-obk@users.noreply.github.com> <git-spam-no-reply9815368754983@oli-obk.de>\nOliver Scherer <oli-obk@users.noreply.github.com> <git-spam9815368754983@oli-obk.de>\nOliver Scherer <oli-obk@users.noreply.github.com> <github333195615777966@oli-obk.de>\nOliver Scherer <oli-obk@users.noreply.github.com> <rust19446194516@oli-obk.de>\nOliver Scherer <oli-obk@users.noreply.github.com> <git-no-reply-9879165716479413131@oli-obk.de>\nOliver Scherer <oli-obk@users.noreply.github.com> <git1984941651981@oli-obk.de>\nOliver Scherer <oli-obk@users.noreply.github.com> <github35764891676564198441@oli-obk.de>\nOliver Scherer <oli-obk@users.noreply.github.com> <github6541940@oli-obk.de>\nOliver Scherer <oli-obk@users.noreply.github.com> <public.oliver.schneider@kit.edu>\nOliver Scherer <oli-obk@users.noreply.github.com> <oliver.schneider@kit.edu>\nOliver Scherer <oli-obk@users.noreply.github.com> <obk8176014uqher834@olio-obk.de>\nOliver Scherer <oli-obk@users.noreply.github.com>\nÖmer Sinan Ağacan <omeragacan@gmail.com>\nOphir LOJKINE <pere.jobs@gmail.com>\nOžbolt Menegatti <ozbolt.menegatti@gmail.com> gareins <ozbolt.menegatti@gmail.com>\nPankaj Chaudhary <pankajchaudhary172@gmail.com>\nPaul Faria <paul_faria@ultimatesoftware.com> Paul Faria <Nashenas88@gmail.com>\nPeer Aramillo Irizar <peer.aramillo.irizar@gmail.com> parir <peer.aramillo.irizar@gmail.com>\nPeter Elmers <peter.elmers@yahoo.com> <peter.elmers@rice.edu>\nPeter Liniker <peter.liniker+github@gmail.com>\nPhil Dawes <phil@phildawes.net> Phil Dawes <pdawes@drw.com>\nPhil Hansch <dev@phansch.net>\nPhilipp Brüschweiler <blei42@gmail.com> <blei42@gmail.com>\nPhilipp Brüschweiler <blei42@gmail.com> <bruphili@student.ethz.ch>\nPhilipp Krones <hello@philkrones.com>\nPhilipp Krones <hello@philkrones.com> <9744647+flip1995@users.noreply.github.com>\nPhilipp Krones <hello@philkrones.com> <philipp.krones@embecosm.com>\nPhilipp Krones <hello@philkrones.com> <uwdkn@student.kit.edu>\nPhilipp Matthias Schäfer <philipp.matthias.schaefer@posteo.de>\nphosphorus <steepout@qq.com>\nPierre Krieger <pierre.krieger1708@gmail.com>\npierwill <pierwill@users.noreply.github.com> <19642016+pierwill@users.noreply.github.com>\nPradyumna Rahul <prkinformed@gmail.com>\nPrzemysław Wesołek <jest@go.art.pl> Przemek Wesołek <jest@go.art.pl>\nr00ster <r00ster91@protonmail.com>\nRafael Ávila de Espíndola <respindola@mozilla.com> Rafael Avila de Espindola <espindola@dream.(none)>\nrail <12975677+rail-rain@users.noreply.github.com>\nRalph Giles <giles@thaumas.net> Ralph Giles <giles@mozilla.com>\nRamkumar Ramachandra <r@artagnon.com> <artagnon@gmail.com>\nRaphaël Huchet <rap2hpoutre@users.noreply.github.com>\nrChaser53 <tayoshizawa29@gmail.com>\nRémy Rakic <remy.rakic@gmail.com>\nRémy Rakic <remy.rakic@gmail.com> <remy.rakic+github@gmail.com>\nRenato Riccieri Santos Zannon <renato@rrsz.com.br>\nRichard Diamond <wichard@vitalitystudios.com> <wichard@hahbee.co>\nRicky Hosfelt <ricky@hosfelt.io>\nRitiek Malhotra <ritiekmalhotra123@gmail.com>\nRob Arnold <robarnold@cs.cmu.edu>\nRob Arnold <robarnold@cs.cmu.edu> Rob Arnold <robarnold@68-26-94-7.pools.spcsdns.net>\nRobert Foss <dev@robertfoss.se> robertfoss <dev@robertfoss.se>\nRobert Gawdzik <rgawdzik@hotmail.com> Robert Gawdzik ☢ <rgawdzik@hotmail.com>\nRobert Habermeier <rphmeier@gmail.com>\nRobert Millar <robert.millar@cantab.net>\nRoc Yu <rocyu@protonmail.com>\nRohit Joshi <rohitjoshi@users.noreply.github.com> Rohit Joshi <rohit.joshi@capitalone.com>\nRoxane Fruytier <roxane.fruytier@hotmail.com>\nRui <xiongmao86dev@sina.com>\nRussell Johnston <rpjohnst@gmail.com>\nRustin-Liu <rustin.liu@gmail.com>\nRusty Blitzerr <rusty.blitzerr@gmail.com>\nRustyYato <krishna.sd.2012@gmail.com>\nRuud van Asseldonk <dev@veniogames.com> Ruud van Asseldonk <ruuda@google.com>\nRyan Leung <rleungx@gmail.com>\nRyan Scheel <ryan.havvy@gmail.com>\nRyan Sullivant <rsulli55@gmail.com>\nRyan Wiedemann <Ryan1729@gmail.com>\nS Pradeep Kumar <gohanpra@gmail.com>\nSam Radhakrishnan <sk09idm@gmail.com>\nScott McMurray <scottmcm@users.noreply.github.com>\nScott Olson <scott@solson.me> Scott Olson <scott@scott-olson.org>\nSean Gillespie <sean.william.g@gmail.com> swgillespie <sean.william.g@gmail.com>\nSeiichi Uchida <seuchida@gmail.com>\nSeonghyun Kim <sh8281.kim@samsung.com>\nShohei Wada <pc@wada314.jp>\nShotaro Yamada <sinkuu@sinkuu.xyz>\nShotaro Yamada <sinkuu@sinkuu.xyz> <sinkuu@users.noreply.github.com>\nShyam Sundar B <shyambaskaran@outlook.com>\nSimon Barber-Dueck <sbarberdueck@gmail.com> Simon BD <simon@server>\nSimon Sapin <simon@exyr.org> <simon.sapin@exyr.org>\nSimonas Kazlauskas <git@kazlauskas.me> Simonas Kazlauskas <github@kazlauskas.me>\nSiva Prasad <sivaauturic@gmail.com>\nSmittyvb <me@smitop.com>\nSrinivas Reddy Thatiparthy <thatiparthysreenivas@gmail.com>\nStanislav Tkach <stanislav.tkach@gmail.com>\nstartling <tdixon51793@gmail.com>\nStepan Koltsov <stepan.koltsov@gmail.com> Stepan Koltsov <nga@yandex-team.ru>\nSteve Klabnik <steve@steveklabnik.com>\nSteven Fackler <sfackler@gmail.com> <sfackler@palantir.com>\nSteven Malis <smmalis37@gmail.com>\nSteven Stewart-Gallus <sstewartgallus00@langara.bc.ca> <sstewartgallus00@mylangara.bc.ca>\nStuart Pernsteiner <stuart@pernsteiner.org> Stuart Pernsteiner <spernsteiner@mozilla.com>\nSuyash458 <suyash.behera458@gmail.com>\nSébastien Marie <semarie@online.fr>\nTakashi Idobe <idobetakashi@gmail.com>\nTakayuki Maeda <takoyaki0316@gmail.com>\nTamir Duberstein <tamird@gmail.com> Tamir Duberstein <tamird@squareup.com>\nTatsuyuki Ishi <ishitatsuyuki@gmail.com>\nTero Hänninen <lgvz@users.noreply.github.com> Tero Hänninen <tejohann@kapsi.fi>\nThe8472 <git@infinite-source.de>\nTheo Belaire <theo.belaire@gmail.com> Theo Belaire <tyr.god.of.war.42@gmail.com>\nTheodore Luo Wang <wangtheo662@gmail.com>\nThiago Pontes <email@thiago.me> thiagopnts <thiagopnts@gmail.com>\nThomas Bracht Laumann Jespersen <laumann.thomas@gmail.com>\nTibo Delor <delor.thibault@gmail.com>\nTicki <Ticki@users.noreply.github.com> Ticki <@>\nTim Brooks <brooks@cern.ch> Tim Brooks <tim.brooks@staples.com>\nTim Chevalier <chevalier@alum.wellesley.edu> <catamorphism@gmail.com>\nTim Diekmann <t.diekmann.3dv@gmail.com>\nTim Hutt <tdhutt@gmail.com>\nTim JIANG <p90eri@gmail.com>\nTim Joseph Dumol <tim@timdumol.com>\nTimothy Maloney <tmaloney@pdx.edu>\nTomas Koutsky <tomas@stepnivlk.net>\nTorsten Weber <TorstenWeber12@gmail.com>\nTorsten Weber <TorstenWeber12@gmail.com> <torstenweber12@gmail.com>\nTrevor Spiteri <tspiteri@ieee.org> <trevor.spiteri@um.edu.mt>\nTshepang Mbambo <tshepang@gmail.com>\nTy Overby <ty@pre-alpha.com>\nTyler Mandry <tmandry@gmail.com> <tmandry@google.com>\nTyler Ruckinger <t.ruckinger@gmail.com>\nUlrik Sverdrup <bluss@users.noreply.github.com> bluss <bluss@users.noreply.github.com>\nUlrik Sverdrup <bluss@users.noreply.github.com> bluss <bluss>\nUlrik Sverdrup <bluss@users.noreply.github.com> Ulrik Sverdrup <root@localhost>\nVadim Petrochenkov <vadim.petrochenkov@gmail.com>\nVadim Petrochenkov <vadim.petrochenkov@gmail.com> petrochenkov <vadim.petrochenkov@gmail.com>\nVal Markovic <val@markovic.io>\nValerii Lashmanov <vflashm@gmail.com>\nVitali Haravy <HumaneProgrammer@gmail.com> Vitali Haravy <humaneprogrammer@gmail.com>\nVitaly Shukela <vi0oss@gmail.com>\nWaffle Maybe <waffle.lapkin@gmail.com>\nWesley Wiser <wwiser@gmail.com> <wesleywiser@microsoft.com>\nwhitequark <whitequark@whitequark.org>\nWilliam Ting <io@williamting.com> <william.h.ting@gmail.com>\nWim Looman <wim@nemo157.com>\nWithout Boats <woboats@gmail.com>\nWithout Boats <woboats@gmail.com> <boats@mozilla.com>\nXinye Tao <xy.tao@outlook.com>\nXuefeng Wu <benewu@gmail.com> Xuefeng Wu <xfwu@thoughtworks.com>\nXuefeng Wu <benewu@gmail.com> XuefengWu <benewu@gmail.com>\nYork Xiang <bombless@126.com>\nYoungsoo Son <ysson83@gmail.com> <ysoo.son@samsung.com>\nYoungsuk Kim <joseph942010@gmail.com>\nYuki Okushi <jtitor@2k36.org>\nYuki Okushi <jtitor@2k36.org> <huyuumi.dev@gmail.com>\nYuki Okushi <jtitor@2k36.org> <yuki.okushi@huawei.com>\nYuning Zhang <codeworm96@outlook.com>\nZach Pomerantz <zmp@umich.edu>\nZack Corr <zack@z0w0.me> <zackcorr95@gmail.com>\nZack Slayton <zack.slayton@gmail.com>\nZbigniew Siciarz <zbigniew@siciarz.net> Zbigniew Siciarz <antyqjon@gmail.com>\n"
        },
        {
          "name": ".reuse",
          "type": "tree",
          "content": null
        },
        {
          "name": "CODE_OF_CONDUCT.md",
          "type": "blob",
          "size": 0.1279296875,
          "content": "# The Rust Code of Conduct\n\nThe Code of Conduct for this repository [can be found online](https://www.rust-lang.org/conduct.html).\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 2.2919921875,
          "content": "# Contributing to Rust\n\nThank you for your interest in contributing to Rust! There are many ways to contribute\nand we appreciate all of them.\n\nThe best way to get started is by asking for help in the [#new\nmembers](https://rust-lang.zulipchat.com/#narrow/stream/122652-new-members)\nZulip stream. We have lots of docs below of how to get started on your own, but\nthe Zulip stream is the best place to *ask* for help.\n\nDocumentation for contributing to the compiler or tooling is located in the [Guide to Rustc\nDevelopment][rustc-dev-guide], commonly known as the [rustc-dev-guide]. Documentation for the\nstandard library in the [Standard library developers Guide][std-dev-guide], commonly known as the [std-dev-guide].\n\n## About the [rustc-dev-guide]\n\nThe [rustc-dev-guide] is meant to help document how rustc –the Rust compiler– works,\nas well as to help new contributors get involved in rustc development. It is recommend\nto read and understand the [rustc-dev-guide] before making a contribution. This guide\ntalks about the different bots in the Rust ecosystem, the Rust development tools,\nbootstrapping, the compiler architecture, source code representation, and more.\n\n## [Getting help](https://rustc-dev-guide.rust-lang.org/getting-started.html#asking-questions)\n\nThere are many ways you can get help when you're stuck. Rust has many platforms for this:\n[internals], [rust-zulip], and [rust-discord]. It is recommended to ask for help on\nthe [rust-zulip], but any of these platforms are a great way to seek help and even\nfind a mentor! You can learn more about asking questions and getting help in the\n[Asking Questions](https://rustc-dev-guide.rust-lang.org/getting-started.html#asking-questions) chapter of the [rustc-dev-guide].\n\n## Bug reports\n\nDid a compiler error message tell you to come here? If you want to create an ICE report,\nrefer to [this section][contributing-bug-reports] and [open an issue][issue template].\n\n[rustc-dev-guide]: https://rustc-dev-guide.rust-lang.org/\n[std-dev-guide]: https://std-dev-guide.rust-lang.org/\n[contributing-bug-reports]: https://rustc-dev-guide.rust-lang.org/contributing.html#bug-reports\n[issue template]: https://github.com/rust-lang/rust/issues/new/choose\n[internals]: https://internals.rust-lang.org\n[rust-discord]: http://discord.gg/rust-lang\n[rust-zulip]: https://rust-lang.zulipchat.com\n"
        },
        {
          "name": "COPYRIGHT",
          "type": "blob",
          "size": 20.6142578125,
          "content": "Short version for non-lawyers:\n\nThe Rust Project is dual-licensed under Apache 2.0 and MIT\nterms.\n\n\nLonger version:\n\nCopyrights in the Rust project are retained by their contributors. No\ncopyright assignment is required to contribute to the Rust project.\n\nSome files include explicit copyright notices and/or license notices.\nFor full authorship information, see the version control history or\nhttps://thanks.rust-lang.org\n\nExcept as otherwise noted (below and/or in individual files), Rust is\nlicensed under the Apache License, Version 2.0 <LICENSE-APACHE> or\n<http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n<LICENSE-MIT> or <http://opensource.org/licenses/MIT>, at your option.\n\n\nThe Rust Project includes packages written by third parties.\nThe following third party packages are included, and carry\ntheir own copyright notices and license terms:\n\n* LLVM, located in src/llvm-project, is licensed under the following\n  terms.\n\n    ==============================================================================\n    The LLVM Project is under the Apache License v2.0 with LLVM Exceptions:\n    ==============================================================================\n\n                                    Apache License\n                              Version 2.0, January 2004\n                            http://www.apache.org/licenses/\n\n        TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n        1. Definitions.\n\n          \"License\" shall mean the terms and conditions for use, reproduction,\n          and distribution as defined by Sections 1 through 9 of this document.\n\n          \"Licensor\" shall mean the copyright owner or entity authorized by\n          the copyright owner that is granting the License.\n\n          \"Legal Entity\" shall mean the union of the acting entity and all\n          other entities that control, are controlled by, or are under common\n          control with that entity. For the purposes of this definition,\n          \"control\" means (i) the power, direct or indirect, to cause the\n          direction or management of such entity, whether by contract or\n          otherwise, or (ii) ownership of fifty percent (50%) or more of the\n          outstanding shares, or (iii) beneficial ownership of such entity.\n\n          \"You\" (or \"Your\") shall mean an individual or Legal Entity\n          exercising permissions granted by this License.\n\n          \"Source\" form shall mean the preferred form for making modifications,\n          including but not limited to software source code, documentation\n          source, and configuration files.\n\n          \"Object\" form shall mean any form resulting from mechanical\n          transformation or translation of a Source form, including but\n          not limited to compiled object code, generated documentation,\n          and conversions to other media types.\n\n          \"Work\" shall mean the work of authorship, whether in Source or\n          Object form, made available under the License, as indicated by a\n          copyright notice that is included in or attached to the work\n          (an example is provided in the Appendix below).\n\n          \"Derivative Works\" shall mean any work, whether in Source or Object\n          form, that is based on (or derived from) the Work and for which the\n          editorial revisions, annotations, elaborations, or other modifications\n          represent, as a whole, an original work of authorship. For the purposes\n          of this License, Derivative Works shall not include works that remain\n          separable from, or merely link (or bind by name) to the interfaces of,\n          the Work and Derivative Works thereof.\n\n          \"Contribution\" shall mean any work of authorship, including\n          the original version of the Work and any modifications or additions\n          to that Work or Derivative Works thereof, that is intentionally\n          submitted to Licensor for inclusion in the Work by the copyright owner\n          or by an individual or Legal Entity authorized to submit on behalf of\n          the copyright owner. For the purposes of this definition, \"submitted\"\n          means any form of electronic, verbal, or written communication sent\n          to the Licensor or its representatives, including but not limited to\n          communication on electronic mailing lists, source code control systems,\n          and issue tracking systems that are managed by, or on behalf of, the\n          Licensor for the purpose of discussing and improving the Work, but\n          excluding communication that is conspicuously marked or otherwise\n          designated in writing by the copyright owner as \"Not a Contribution.\"\n\n          \"Contributor\" shall mean Licensor and any individual or Legal Entity\n          on behalf of whom a Contribution has been received by Licensor and\n          subsequently incorporated within the Work.\n\n        2. Grant of Copyright License. Subject to the terms and conditions of\n          this License, each Contributor hereby grants to You a perpetual,\n          worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n          copyright license to reproduce, prepare Derivative Works of,\n          publicly display, publicly perform, sublicense, and distribute the\n          Work and such Derivative Works in Source or Object form.\n\n        3. Grant of Patent License. Subject to the terms and conditions of\n          this License, each Contributor hereby grants to You a perpetual,\n          worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n          (except as stated in this section) patent license to make, have made,\n          use, offer to sell, sell, import, and otherwise transfer the Work,\n          where such license applies only to those patent claims licensable\n          by such Contributor that are necessarily infringed by their\n          Contribution(s) alone or by combination of their Contribution(s)\n          with the Work to which such Contribution(s) was submitted. If You\n          institute patent litigation against any entity (including a\n          cross-claim or counterclaim in a lawsuit) alleging that the Work\n          or a Contribution incorporated within the Work constitutes direct\n          or contributory patent infringement, then any patent licenses\n          granted to You under this License for that Work shall terminate\n          as of the date such litigation is filed.\n\n        4. Redistribution. You may reproduce and distribute copies of the\n          Work or Derivative Works thereof in any medium, with or without\n          modifications, and in Source or Object form, provided that You\n          meet the following conditions:\n\n          (a) You must give any other recipients of the Work or\n              Derivative Works a copy of this License; and\n\n          (b) You must cause any modified files to carry prominent notices\n              stating that You changed the files; and\n\n          (c) You must retain, in the Source form of any Derivative Works\n              that You distribute, all copyright, patent, trademark, and\n              attribution notices from the Source form of the Work,\n              excluding those notices that do not pertain to any part of\n              the Derivative Works; and\n\n          (d) If the Work includes a \"NOTICE\" text file as part of its\n              distribution, then any Derivative Works that You distribute must\n              include a readable copy of the attribution notices contained\n              within such NOTICE file, excluding those notices that do not\n              pertain to any part of the Derivative Works, in at least one\n              of the following places: within a NOTICE text file distributed\n              as part of the Derivative Works; within the Source form or\n              documentation, if provided along with the Derivative Works; or,\n              within a display generated by the Derivative Works, if and\n              wherever such third-party notices normally appear. The contents\n              of the NOTICE file are for informational purposes only and\n              do not modify the License. You may add Your own attribution\n              notices within Derivative Works that You distribute, alongside\n              or as an addendum to the NOTICE text from the Work, provided\n              that such additional attribution notices cannot be construed\n              as modifying the License.\n\n          You may add Your own copyright statement to Your modifications and\n          may provide additional or different license terms and conditions\n          for use, reproduction, or distribution of Your modifications, or\n          for any such Derivative Works as a whole, provided Your use,\n          reproduction, and distribution of the Work otherwise complies with\n          the conditions stated in this License.\n\n        5. Submission of Contributions. Unless You explicitly state otherwise,\n          any Contribution intentionally submitted for inclusion in the Work\n          by You to the Licensor shall be under the terms and conditions of\n          this License, without any additional terms or conditions.\n          Notwithstanding the above, nothing herein shall supersede or modify\n          the terms of any separate license agreement you may have executed\n          with Licensor regarding such Contributions.\n\n        6. Trademarks. This License does not grant permission to use the trade\n          names, trademarks, service marks, or product names of the Licensor,\n          except as required for reasonable and customary use in describing the\n          origin of the Work and reproducing the content of the NOTICE file.\n\n        7. Disclaimer of Warranty. Unless required by applicable law or\n          agreed to in writing, Licensor provides the Work (and each\n          Contributor provides its Contributions) on an \"AS IS\" BASIS,\n          WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n          implied, including, without limitation, any warranties or conditions\n          of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n          PARTICULAR PURPOSE. You are solely responsible for determining the\n          appropriateness of using or redistributing the Work and assume any\n          risks associated with Your exercise of permissions under this License.\n\n        8. Limitation of Liability. In no event and under no legal theory,\n          whether in tort (including negligence), contract, or otherwise,\n          unless required by applicable law (such as deliberate and grossly\n          negligent acts) or agreed to in writing, shall any Contributor be\n          liable to You for damages, including any direct, indirect, special,\n          incidental, or consequential damages of any character arising as a\n          result of this License or out of the use or inability to use the\n          Work (including but not limited to damages for loss of goodwill,\n          work stoppage, computer failure or malfunction, or any and all\n          other commercial damages or losses), even if such Contributor\n          has been advised of the possibility of such damages.\n\n        9. Accepting Warranty or Additional Liability. While redistributing\n          the Work or Derivative Works thereof, You may choose to offer,\n          and charge a fee for, acceptance of support, warranty, indemnity,\n          or other liability obligations and/or rights consistent with this\n          License. However, in accepting such obligations, You may act only\n          on Your own behalf and on Your sole responsibility, not on behalf\n          of any other Contributor, and only if You agree to indemnify,\n          defend, and hold each Contributor harmless for any liability\n          incurred by, or claims asserted against, such Contributor by reason\n          of your accepting any such warranty or additional liability.\n\n        END OF TERMS AND CONDITIONS\n\n        APPENDIX: How to apply the Apache License to your work.\n\n          To apply the Apache License to your work, attach the following\n          boilerplate notice, with the fields enclosed by brackets \"[]\"\n          replaced with your own identifying information. (Don't include\n          the brackets!)  The text should be enclosed in the appropriate\n          comment syntax for the file format. We also recommend that a\n          file or class name and description of purpose be included on the\n          same \"printed page\" as the copyright notice for easier\n          identification within third-party archives.\n\n        Copyright [yyyy] [name of copyright owner]\n\n        Licensed under the Apache License, Version 2.0 (the \"License\");\n        you may not use this file except in compliance with the License.\n        You may obtain a copy of the License at\n\n          http://www.apache.org/licenses/LICENSE-2.0\n\n        Unless required by applicable law or agreed to in writing, software\n        distributed under the License is distributed on an \"AS IS\" BASIS,\n        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n        See the License for the specific language governing permissions and\n        limitations under the License.\n\n\n    ---- LLVM Exceptions to the Apache 2.0 License ----\n\n    As an exception, if, as a result of your compiling your source code, portions\n    of this Software are embedded into an Object form of such source code, you\n    may redistribute such embedded portions in such Object form without complying\n    with the conditions of Sections 4(a), 4(b) and 4(d) of the License.\n\n    In addition, if you combine or link compiled forms of this Software with\n    software that is licensed under the GPLv2 (\"Combined Software\") and if a\n    court of competent jurisdiction determines that the patent provision (Section\n    3), the indemnity provision (Section 9) or other Section of the License\n    conflicts with the conditions of the GPLv2, you may retroactively and\n    prospectively choose to deem waived or otherwise exclude such Section(s) of\n    the License, but only in their entirety and only with respect to the Combined\n    Software.\n\n    ==============================================================================\n    Software from third parties included in the LLVM Project:\n    ==============================================================================\n    The LLVM Project contains third party software which is under different license\n    terms. All such code will be identified clearly using at least one of two\n    mechanisms:\n    1) It will be in a separate directory tree with its own `LICENSE.txt` or\n      `LICENSE` file at the top containing the specific license and restrictions\n      which apply to that software, or\n    2) It will contain specific license and restriction terms at the top of every\n      file.\n\n    ==============================================================================\n    Legacy LLVM License (https://llvm.org/docs/DeveloperPolicy.html#legacy):\n    ==============================================================================\n    University of Illinois/NCSA\n    Open Source License\n\n    Copyright (c) 2003-2019 University of Illinois at Urbana-Champaign.\n    All rights reserved.\n\n    Developed by:\n\n        LLVM Team\n\n        University of Illinois at Urbana-Champaign\n\n        http://llvm.org\n\n    Permission is hereby granted, free of charge, to any person obtaining a copy of\n    this software and associated documentation files (the \"Software\"), to deal with\n    the Software without restriction, including without limitation the rights to\n    use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\n    of the Software, and to permit persons to whom the Software is furnished to do\n    so, subject to the following conditions:\n\n        * Redistributions of source code must retain the above copyright notice,\n          this list of conditions and the following disclaimers.\n\n        * Redistributions in binary form must reproduce the above copyright notice,\n          this list of conditions and the following disclaimers in the\n          documentation and/or other materials provided with the distribution.\n\n        * Neither the names of the LLVM Team, University of Illinois at\n          Urbana-Champaign, nor the names of its contributors may be used to\n          endorse or promote products derived from this Software without specific\n          prior written permission.\n\n    THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\n    FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE\n    CONTRIBUTORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n    OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS WITH THE\n    SOFTWARE.\n\n* Portions of the FFI code for interacting with the native ABI\n  is derived from the Clay programming language, which carries\n  the following license.\n\n    Copyright (C) 2008-2010 Tachyon Technologies.\n    All rights reserved.\n\n    Redistribution and use in source and binary forms, with\n    or without modification, are permitted provided that the\n    following conditions are met:\n\n    1. Redistributions of source code must retain the above\n       copyright notice, this list of conditions and the\n       following disclaimer.\n\n    2. Redistributions in binary form must reproduce the\n       above copyright notice, this list of conditions and\n       the following disclaimer in the documentation and/or\n       other materials provided with the distribution.\n\n    THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESS OR\n    IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A\n    PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE\n    DEVELOPERS AND CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n    INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n    CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\n    PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n    USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\n    CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n    CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING\n    NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE\n    USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY\n    OF SUCH DAMAGE.\n\n* Portions of internationalization code use code or data from Unicode, which\n  carry the following license:\n\n      UNICODE, INC. LICENSE AGREEMENT - DATA FILES AND SOFTWARE\n\n    See Terms of Use <https://www.unicode.org/copyright.html>\n    for definitions of Unicode Inc.’s Data Files and Software.\n\n    NOTICE TO USER: Carefully read the following legal agreement.\n    BY DOWNLOADING, INSTALLING, COPYING OR OTHERWISE USING UNICODE INC.'S\n    DATA FILES (\"DATA FILES\"), AND/OR SOFTWARE (\"SOFTWARE\"),\n    YOU UNEQUIVOCALLY ACCEPT, AND AGREE TO BE BOUND BY, ALL OF THE\n    TERMS AND CONDITIONS OF THIS AGREEMENT.\n    IF YOU DO NOT AGREE, DO NOT DOWNLOAD, INSTALL, COPY, DISTRIBUTE OR USE\n    THE DATA FILES OR SOFTWARE.\n\n    COPYRIGHT AND PERMISSION NOTICE\n\n    Copyright © 1991-2022 Unicode, Inc. All rights reserved.\n    Distributed under the Terms of Use in https://www.unicode.org/copyright.html.\n\n    Permission is hereby granted, free of charge, to any person obtaining\n    a copy of the Unicode data files and any associated documentation\n    (the \"Data Files\") or Unicode software and any associated documentation\n    (the \"Software\") to deal in the Data Files or Software\n    without restriction, including without limitation the rights to use,\n    copy, modify, merge, publish, distribute, and/or sell copies of\n    the Data Files or Software, and to permit persons to whom the Data Files\n    or Software are furnished to do so, provided that either\n    (a) this copyright and permission notice appear with all copies\n    of the Data Files or Software, or\n    (b) this copyright and permission notice appear in associated\n    Documentation.\n\n    THE DATA FILES AND SOFTWARE ARE PROVIDED \"AS IS\", WITHOUT WARRANTY OF\n    ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE\n    WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n    NONINFRINGEMENT OF THIRD PARTY RIGHTS.\n    IN NO EVENT SHALL THE COPYRIGHT HOLDER OR HOLDERS INCLUDED IN THIS\n    NOTICE BE LIABLE FOR ANY CLAIM, OR ANY SPECIAL INDIRECT OR CONSEQUENTIAL\n    DAMAGES, OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE,\n    DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER\n    TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\n    PERFORMANCE OF THE DATA FILES OR SOFTWARE.\n\n    Except as contained in this notice, the name of a copyright holder\n    shall not be used in advertising or otherwise to promote the sale,\n    use or other dealings in these Data Files or Software without prior\n    written authorization of the copyright holder.\n"
        },
        {
          "name": "Cargo.lock",
          "type": "blob",
          "size": 131.828125,
          "content": "# This file is automatically @generated by Cargo.\n# It is not intended for manual editing.\nversion = 3\n\n[[package]]\nname = \"addr2line\"\nversion = \"0.20.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f4fa78e18c64fce05e902adecd7a5eed15a5e0a3439f7b0e169f0252214865e3\"\ndependencies = [\n \"compiler_builtins\",\n \"gimli 0.27.3\",\n \"rustc-std-workspace-alloc\",\n \"rustc-std-workspace-core\",\n]\n\n[[package]]\nname = \"adler\"\nversion = \"1.0.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f26201604c87b1e01bd3d98f8d5d9a8fcbb815e8cedb41ffccbeb4bf593a35fe\"\ndependencies = [\n \"compiler_builtins\",\n \"rustc-std-workspace-core\",\n]\n\n[[package]]\nname = \"ahash\"\nversion = \"0.7.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"fcb51a0695d8f838b1ee009b3fbf66bda078cd64590202a864a8f3e8c4315c47\"\ndependencies = [\n \"getrandom\",\n \"once_cell\",\n \"version_check\",\n]\n\n[[package]]\nname = \"ahash\"\nversion = \"0.8.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"2c99f64d1e06488f620f932677e24bc6e2897582980441ae90a671415bd7ec2f\"\ndependencies = [\n \"cfg-if\",\n \"once_cell\",\n \"version_check\",\n]\n\n[[package]]\nname = \"aho-corasick\"\nversion = \"0.7.20\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"cc936419f96fa211c1b9166887b38e5e40b19958e5b895be7c1f93adec7071ac\"\ndependencies = [\n \"memchr\",\n]\n\n[[package]]\nname = \"aho-corasick\"\nversion = \"1.0.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"43f6cb1bf222025340178f382c426f13757b2960e89779dfcb319c32542a5a41\"\ndependencies = [\n \"memchr\",\n]\n\n[[package]]\nname = \"alloc\"\nversion = \"0.0.0\"\ndependencies = [\n \"compiler_builtins\",\n \"core\",\n \"rand\",\n \"rand_xorshift\",\n]\n\n[[package]]\nname = \"allocator-api2\"\nversion = \"0.2.15\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"56fc6cf8dc8c4158eed8649f9b8b0ea1518eb62b544fe9490d66fa0b349eafe9\"\n\n[[package]]\nname = \"ammonia\"\nversion = \"3.3.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"64e6d1c7838db705c9b756557ee27c384ce695a1c51a6fe528784cb1c6840170\"\ndependencies = [\n \"html5ever\",\n \"maplit\",\n \"once_cell\",\n \"tendril\",\n \"url\",\n]\n\n[[package]]\nname = \"android-tzdata\"\nversion = \"0.1.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e999941b234f3131b00bc13c22d06e8c5ff726d1b6318ac7eb276997bbb4fef0\"\n\n[[package]]\nname = \"android_system_properties\"\nversion = \"0.1.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"819e7219dbd41043ac279b19830f2efc897156490d7fd6ea916720117ee66311\"\ndependencies = [\n \"libc\",\n]\n\n[[package]]\nname = \"annotate-snippets\"\nversion = \"0.9.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"c3b9d411ecbaf79885c6df4d75fff75858d5995ff25385657a28af47e82f9c36\"\ndependencies = [\n \"unicode-width\",\n \"yansi-term\",\n]\n\n[[package]]\nname = \"anstream\"\nversion = \"0.3.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"0ca84f3628370c59db74ee214b3263d58f9aadd9b4fe7e711fd87dc452b7f163\"\ndependencies = [\n \"anstyle\",\n \"anstyle-parse\",\n \"anstyle-query\",\n \"anstyle-wincon\",\n \"colorchoice\",\n \"is-terminal\",\n \"utf8parse\",\n]\n\n[[package]]\nname = \"anstyle\"\nversion = \"1.0.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3a30da5c5f2d5e72842e00bcb57657162cdabef0931f40e2deb9b4140440cecd\"\n\n[[package]]\nname = \"anstyle-parse\"\nversion = \"0.2.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"938874ff5980b03a87c5524b3ae5b59cf99b1d6bc836848df7bc5ada9643c333\"\ndependencies = [\n \"utf8parse\",\n]\n\n[[package]]\nname = \"anstyle-query\"\nversion = \"1.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"5ca11d4be1bab0c8bc8734a9aa7bf4ee8316d462a08c6ac5052f888fef5b494b\"\ndependencies = [\n \"windows-sys 0.48.0\",\n]\n\n[[package]]\nname = \"anstyle-wincon\"\nversion = \"1.0.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"180abfa45703aebe0093f79badacc01b8fd4ea2e35118747e5811127f926e188\"\ndependencies = [\n \"anstyle\",\n \"windows-sys 0.48.0\",\n]\n\n[[package]]\nname = \"anyhow\"\nversion = \"1.0.71\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"9c7d0618f0e0b7e8ff11427422b64564d5fb0be1940354bfe2e0529b18a9d9b8\"\ndependencies = [\n \"backtrace\",\n]\n\n[[package]]\nname = \"ar_archive_writer\"\nversion = \"0.1.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"74cfb39880a59e122232cb5fb06b20b4382d58c12fa9747d16f846d38a7b094c\"\ndependencies = [\n \"object\",\n]\n\n[[package]]\nname = \"array_tool\"\nversion = \"1.0.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8f8cb5d814eb646a863c4f24978cff2880c4be96ad8cde2c0f0678732902e271\"\n\n[[package]]\nname = \"arrayvec\"\nversion = \"0.7.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"96d30a06541fbafbc7f82ed10c06164cfbd2c401138f6addd8404629c4b16711\"\n\n[[package]]\nname = \"askama\"\nversion = \"0.12.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"47cbc3cf73fa8d9833727bbee4835ba5c421a0d65b72daf9a7b5d0e0f9cfb57e\"\ndependencies = [\n \"askama_derive\",\n \"askama_escape\",\n]\n\n[[package]]\nname = \"askama_derive\"\nversion = \"0.12.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"c22fbe0413545c098358e56966ff22cdd039e10215ae213cfbd65032b119fc94\"\ndependencies = [\n \"basic-toml\",\n \"mime\",\n \"mime_guess\",\n \"nom\",\n \"proc-macro2\",\n \"quote\",\n \"serde\",\n \"syn 2.0.27\",\n]\n\n[[package]]\nname = \"askama_escape\"\nversion = \"0.10.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"619743e34b5ba4e9703bba34deac3427c72507c7159f5fd030aea8cac0cfe341\"\n\n[[package]]\nname = \"atty\"\nversion = \"0.2.14\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d9b39be18770d11421cdb1b9947a45dd3f37e93092cbf377614828a319d5fee8\"\ndependencies = [\n \"hermit-abi 0.1.19\",\n \"libc\",\n \"winapi\",\n]\n\n[[package]]\nname = \"autocfg\"\nversion = \"1.1.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d468802bab17cbc0cc575e9b053f41e72aa36bfa6b7f55e3529ffa43161b97fa\"\n\n[[package]]\nname = \"backtrace\"\nversion = \"0.3.68\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"4319208da049c43661739c5fade2ba182f09d1dc2299b32298d3a31692b17e12\"\ndependencies = [\n \"addr2line\",\n \"cc\",\n \"cfg-if\",\n \"libc\",\n \"miniz_oxide\",\n \"object\",\n \"rustc-demangle\",\n]\n\n[[package]]\nname = \"base64\"\nversion = \"0.21.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"604178f6c5c21f02dc555784810edfb88d34ac2c73b2eae109655649ee73ce3d\"\n\n[[package]]\nname = \"basic-toml\"\nversion = \"0.1.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"5c0de75129aa8d0cceaf750b89013f0e08804d6ec61416da787b35ad0d7cddf1\"\ndependencies = [\n \"serde\",\n]\n\n[[package]]\nname = \"bincode\"\nversion = \"1.3.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b1f45e9417d87227c7a56d22e471c6206462cba514c7590c09aff4cf6d1ddcad\"\ndependencies = [\n \"serde\",\n]\n\n[[package]]\nname = \"bitflags\"\nversion = \"1.3.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"bef38d45163c2f1dde094a7dfd33ccf595c92905c8f8f4fdc18d06fb1037718a\"\n\n[[package]]\nname = \"bitflags\"\nversion = \"2.3.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"630be753d4e58660abd17930c71b647fe46c27ea6b63cc59e1e3851406972e42\"\n\n[[package]]\nname = \"block-buffer\"\nversion = \"0.10.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3078c7629b62d3f0439517fa394996acacc5cbc91c5a20d8c658e77abd503a71\"\ndependencies = [\n \"generic-array\",\n]\n\n[[package]]\nname = \"bstr\"\nversion = \"1.5.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a246e68bb43f6cd9db24bea052a53e40405417c5fb372e3d1a8a7f770a564ef5\"\ndependencies = [\n \"memchr\",\n \"once_cell\",\n \"regex-automata 0.1.10\",\n \"serde\",\n]\n\n[[package]]\nname = \"build-manifest\"\nversion = \"0.1.0\"\ndependencies = [\n \"anyhow\",\n \"flate2\",\n \"hex\",\n \"rayon\",\n \"serde\",\n \"serde_json\",\n \"sha2\",\n \"tar\",\n \"toml 0.5.11\",\n \"xz2\",\n]\n\n[[package]]\nname = \"build_helper\"\nversion = \"0.1.0\"\ndependencies = [\n \"serde\",\n \"serde_derive\",\n]\n\n[[package]]\nname = \"bump-stage0\"\nversion = \"0.1.0\"\ndependencies = [\n \"anyhow\",\n \"curl\",\n \"indexmap 2.0.0\",\n \"serde\",\n \"serde_json\",\n \"toml 0.5.11\",\n]\n\n[[package]]\nname = \"bumpalo\"\nversion = \"3.13.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a3e2c3daef883ecc1b5d58c15adae93470a91d425f3532ba1695849656af3fc1\"\n\n[[package]]\nname = \"bytecount\"\nversion = \"0.6.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"2c676a478f63e9fa2dd5368a42f28bba0d6c560b775f38583c8bbaa7fcd67c9c\"\ndependencies = [\n \"packed_simd_2\",\n]\n\n[[package]]\nname = \"byteorder\"\nversion = \"1.4.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"14c189c53d098945499cdfa7ecc63567cf3886b3332b312a5b4585d8d3a6a610\"\n\n[[package]]\nname = \"bytes\"\nversion = \"1.4.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"89b2fd2a0dcf38d7971e2194b6b6eebab45ae01067456a7fd93d5547a61b70be\"\n\n[[package]]\nname = \"camino\"\nversion = \"1.1.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"c530edf18f37068ac2d977409ed5cd50d53d73bc653c7647b48eb78976ac9ae2\"\ndependencies = [\n \"serde\",\n]\n\n[[package]]\nname = \"cargo-miri\"\nversion = \"0.1.0\"\ndependencies = [\n \"cargo_metadata\",\n \"directories\",\n \"rustc-build-sysroot\",\n \"rustc_tools_util\",\n \"rustc_version\",\n \"serde\",\n \"serde_json\",\n]\n\n[[package]]\nname = \"cargo-platform\"\nversion = \"0.1.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"cbdb825da8a5df079a43676dbe042702f1707b1109f713a01420fbb4cc71fa27\"\ndependencies = [\n \"serde\",\n]\n\n[[package]]\nname = \"cargo_metadata\"\nversion = \"0.15.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"eee4243f1f26fc7a42710e7439c149e2b10b05472f88090acce52632f231a73a\"\ndependencies = [\n \"camino\",\n \"cargo-platform\",\n \"semver\",\n \"serde\",\n \"serde_json\",\n \"thiserror\",\n]\n\n[[package]]\nname = \"cargotest2\"\nversion = \"0.1.0\"\n\n[[package]]\nname = \"cc\"\nversion = \"1.0.79\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"50d30906286121d95be3d479533b458f87493b30a4b5f79a607db8f5d11aa91f\"\n\n[[package]]\nname = \"cfg-if\"\nversion = \"1.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"baf1de4339761588bc0619e3cbc0120ee582ebb74b53b4efbf79117bd2da40fd\"\ndependencies = [\n \"compiler_builtins\",\n \"rustc-std-workspace-core\",\n]\n\n[[package]]\nname = \"chrono\"\nversion = \"0.4.26\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ec837a71355b28f6556dbd569b37b3f363091c0bd4b2e735674521b4c5fd9bc5\"\ndependencies = [\n \"android-tzdata\",\n \"iana-time-zone\",\n \"num-traits\",\n \"serde\",\n \"winapi\",\n]\n\n[[package]]\nname = \"clap\"\nversion = \"4.3.10\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"384e169cc618c613d5e3ca6404dda77a8685a63e08660dcc64abaf7da7cb0c7a\"\ndependencies = [\n \"clap_builder\",\n \"clap_derive\",\n \"once_cell\",\n]\n\n[[package]]\nname = \"clap_builder\"\nversion = \"4.3.10\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ef137bbe35aab78bdb468ccfba75a5f4d8321ae011d34063770780545176af2d\"\ndependencies = [\n \"anstream\",\n \"anstyle\",\n \"clap_lex\",\n \"once_cell\",\n \"strsim\",\n \"terminal_size\",\n]\n\n[[package]]\nname = \"clap_complete\"\nversion = \"4.3.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"7f6b5c519bab3ea61843a7923d074b04245624bb84a64a8c150f5deb014e388b\"\ndependencies = [\n \"clap\",\n]\n\n[[package]]\nname = \"clap_derive\"\nversion = \"4.3.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b8cd2b2a819ad6eec39e8f1d6b53001af1e5469f8c177579cdaeb313115b825f\"\ndependencies = [\n \"heck\",\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.27\",\n]\n\n[[package]]\nname = \"clap_lex\"\nversion = \"0.5.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"2da6da31387c7e4ef160ffab6d5e7f00c42626fe39aea70a7b0f1773f7dd6c1b\"\n\n[[package]]\nname = \"clippy\"\nversion = \"0.1.73\"\ndependencies = [\n \"clippy_lints\",\n \"clippy_utils\",\n \"derive-new\",\n \"filetime\",\n \"futures\",\n \"if_chain\",\n \"itertools\",\n \"parking_lot 0.12.1\",\n \"quote\",\n \"regex\",\n \"rustc_tools_util\",\n \"serde\",\n \"syn 2.0.27\",\n \"tempfile\",\n \"termize\",\n \"tester\",\n \"tokio\",\n \"toml 0.7.5\",\n \"ui_test\",\n \"walkdir\",\n]\n\n[[package]]\nname = \"clippy_dev\"\nversion = \"0.0.1\"\ndependencies = [\n \"aho-corasick 0.7.20\",\n \"clap\",\n \"indoc\",\n \"itertools\",\n \"opener\",\n \"shell-escape\",\n \"walkdir\",\n]\n\n[[package]]\nname = \"clippy_lints\"\nversion = \"0.1.73\"\ndependencies = [\n \"arrayvec\",\n \"cargo_metadata\",\n \"clippy_utils\",\n \"declare_clippy_lint\",\n \"if_chain\",\n \"itertools\",\n \"pulldown-cmark\",\n \"quine-mc_cluskey\",\n \"regex\",\n \"regex-syntax 0.7.2\",\n \"rustc-semver\",\n \"semver\",\n \"serde\",\n \"serde_json\",\n \"tempfile\",\n \"toml 0.7.5\",\n \"unicode-normalization\",\n \"unicode-script\",\n \"url\",\n]\n\n[[package]]\nname = \"clippy_utils\"\nversion = \"0.1.73\"\ndependencies = [\n \"arrayvec\",\n \"if_chain\",\n \"itertools\",\n \"rustc-semver\",\n]\n\n[[package]]\nname = \"collect-license-metadata\"\nversion = \"0.1.0\"\ndependencies = [\n \"anyhow\",\n \"serde\",\n \"serde_json\",\n \"spdx-rs\",\n]\n\n[[package]]\nname = \"color-eyre\"\nversion = \"0.6.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"5a667583cca8c4f8436db8de46ea8233c42a7d9ae424a82d338f2e4675229204\"\ndependencies = [\n \"backtrace\",\n \"color-spantrace\",\n \"eyre\",\n \"indenter\",\n \"once_cell\",\n \"owo-colors\",\n \"tracing-error\",\n]\n\n[[package]]\nname = \"color-spantrace\"\nversion = \"0.2.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1ba75b3d9449ecdccb27ecbc479fdc0b87fa2dd43d2f8298f9bf0e59aacc8dce\"\ndependencies = [\n \"once_cell\",\n \"owo-colors\",\n \"tracing-core\",\n \"tracing-error\",\n]\n\n[[package]]\nname = \"colorchoice\"\nversion = \"1.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"acbf1af155f9b9ef647e42cdc158db4b64a1b61f743629225fde6f3e0be2a7c7\"\n\n[[package]]\nname = \"colored\"\nversion = \"2.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b3616f750b84d8f0de8a58bda93e08e2a81ad3f523089b05f1dffecab48c6cbd\"\ndependencies = [\n \"atty\",\n \"lazy_static\",\n \"winapi\",\n]\n\n[[package]]\nname = \"compiler_builtins\"\nversion = \"0.1.98\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"dfbefa16407456e5cad1ad066c84dfcb980afe4437103a0007d1c2f136130210\"\ndependencies = [\n \"cc\",\n \"rustc-std-workspace-core\",\n]\n\n[[package]]\nname = \"compiletest\"\nversion = \"0.0.0\"\ndependencies = [\n \"anyhow\",\n \"build_helper\",\n \"colored\",\n \"diff\",\n \"getopts\",\n \"glob\",\n \"lazycell\",\n \"libc\",\n \"miow\",\n \"miropt-test-tools\",\n \"once_cell\",\n \"regex\",\n \"rustfix\",\n \"serde\",\n \"serde_json\",\n \"tracing\",\n \"tracing-subscriber\",\n \"unified-diff\",\n \"walkdir\",\n \"windows\",\n]\n\n[[package]]\nname = \"convert_case\"\nversion = \"0.4.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"6245d59a3e82a7fc217c5828a6692dbc6dfb63a0c8c90495621f7b9d79704a0e\"\n\n[[package]]\nname = \"core\"\nversion = \"0.0.0\"\ndependencies = [\n \"rand\",\n \"rand_xorshift\",\n]\n\n[[package]]\nname = \"core-foundation\"\nversion = \"0.9.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"194a7a9e6de53fa55116934067c844d9d749312f75c6f6d0980e8c252f8c2146\"\ndependencies = [\n \"core-foundation-sys\",\n \"libc\",\n]\n\n[[package]]\nname = \"core-foundation-sys\"\nversion = \"0.8.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e496a50fda8aacccc86d7529e2c1e0892dbd0f898a6b5645b5561b89c3210efa\"\n\n[[package]]\nname = \"coverage_test_macros\"\nversion = \"0.0.0\"\n\n[[package]]\nname = \"cpufeatures\"\nversion = \"0.2.8\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"03e69e28e9f7f77debdedbaafa2866e1de9ba56df55a8bd7cfc724c25a09987c\"\ndependencies = [\n \"libc\",\n]\n\n[[package]]\nname = \"crc32fast\"\nversion = \"1.3.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b540bd8bc810d3885c6ea91e2018302f68baba2129ab3e88f32389ee9370880d\"\ndependencies = [\n \"cfg-if\",\n]\n\n[[package]]\nname = \"crossbeam-channel\"\nversion = \"0.5.8\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a33c2bf77f2df06183c3aa30d1e96c0695a313d4f9c453cc3762a6db39f99200\"\ndependencies = [\n \"cfg-if\",\n \"crossbeam-utils\",\n]\n\n[[package]]\nname = \"crossbeam-deque\"\nversion = \"0.8.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ce6fd6f855243022dcecf8702fef0c297d4338e226845fe067f6341ad9fa0cef\"\ndependencies = [\n \"cfg-if\",\n \"crossbeam-epoch\",\n \"crossbeam-utils\",\n]\n\n[[package]]\nname = \"crossbeam-epoch\"\nversion = \"0.9.15\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ae211234986c545741a7dc064309f67ee1e5ad243d0e48335adc0484d960bcc7\"\ndependencies = [\n \"autocfg\",\n \"cfg-if\",\n \"crossbeam-utils\",\n \"memoffset\",\n \"scopeguard\",\n]\n\n[[package]]\nname = \"crossbeam-utils\"\nversion = \"0.8.16\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"5a22b2d63d4d1dc0b7f1b6b2747dd0088008a9be28b6ddf0b1e7d335e3037294\"\ndependencies = [\n \"cfg-if\",\n]\n\n[[package]]\nname = \"crypto-common\"\nversion = \"0.1.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1bfb12502f3fc46cca1bb51ac28df9d618d813cdc3d2f25b9fe775a34af26bb3\"\ndependencies = [\n \"generic-array\",\n \"typenum\",\n]\n\n[[package]]\nname = \"cstr\"\nversion = \"0.2.8\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"c11a39d776a3b35896711da8a04dc1835169dcd36f710878187637314e47941b\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n]\n\n[[package]]\nname = \"ctrlc\"\nversion = \"3.4.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"2a011bbe2c35ce9c1f143b7af6f94f29a167beb4cd1d29e6740ce836f723120e\"\ndependencies = [\n \"nix\",\n \"windows-sys 0.48.0\",\n]\n\n[[package]]\nname = \"curl\"\nversion = \"0.4.44\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"509bd11746c7ac09ebd19f0b17782eae80aadee26237658a6b4808afb5c11a22\"\ndependencies = [\n \"curl-sys\",\n \"libc\",\n \"openssl-probe\",\n \"openssl-sys\",\n \"schannel\",\n \"socket2\",\n \"winapi\",\n]\n\n[[package]]\nname = \"curl-sys\"\nversion = \"0.4.63+curl-8.1.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"aeb0fef7046022a1e2ad67a004978f0e3cacb9e3123dc62ce768f92197b771dc\"\ndependencies = [\n \"cc\",\n \"libc\",\n \"libz-sys\",\n \"openssl-sys\",\n \"pkg-config\",\n \"vcpkg\",\n \"winapi\",\n]\n\n[[package]]\nname = \"datafrog\"\nversion = \"2.0.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a0afaad2b26fa326569eb264b1363e8ae3357618c43982b3f285f0774ce76b69\"\n\n[[package]]\nname = \"declare_clippy_lint\"\nversion = \"0.1.73\"\ndependencies = [\n \"itertools\",\n \"quote\",\n \"syn 2.0.27\",\n]\n\n[[package]]\nname = \"derive-new\"\nversion = \"0.5.9\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3418329ca0ad70234b9735dc4ceed10af4df60eff9c8e7b06cb5e520d92c3535\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn 1.0.109\",\n]\n\n[[package]]\nname = \"derive_more\"\nversion = \"0.99.17\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"4fb810d30a7c1953f91334de7244731fc3f3c10d7fe163338a35b9f640960321\"\ndependencies = [\n \"convert_case\",\n \"proc-macro2\",\n \"quote\",\n \"rustc_version\",\n \"syn 1.0.109\",\n]\n\n[[package]]\nname = \"diff\"\nversion = \"0.1.13\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"56254986775e3233ffa9c4d7d3faaf6d36a2c09d30b20687e9f88bc8bafc16c8\"\n\n[[package]]\nname = \"digest\"\nversion = \"0.10.7\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"9ed9a281f7bc9b7576e61468ba615a66a5c8cfdff42420a70aa82701a3b1e292\"\ndependencies = [\n \"block-buffer\",\n \"crypto-common\",\n]\n\n[[package]]\nname = \"directories\"\nversion = \"4.0.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f51c5d4ddabd36886dd3e1438cb358cdcb0d7c499cb99cb4ac2e38e18b5cb210\"\ndependencies = [\n \"dirs-sys\",\n]\n\n[[package]]\nname = \"dirs\"\nversion = \"4.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ca3aa72a6f96ea37bbc5aa912f6788242832f75369bdfdadcb0e38423f100059\"\ndependencies = [\n \"dirs-sys\",\n]\n\n[[package]]\nname = \"dirs-next\"\nversion = \"2.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b98cf8ebf19c3d1b223e151f99a4f9f0690dca41414773390fc824184ac833e1\"\ndependencies = [\n \"cfg-if\",\n \"dirs-sys-next\",\n]\n\n[[package]]\nname = \"dirs-sys\"\nversion = \"0.3.7\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1b1d1d91c932ef41c0f2663aa8b0ca0342d444d842c06914aa0a7e352d0bada6\"\ndependencies = [\n \"libc\",\n \"redox_users\",\n \"winapi\",\n]\n\n[[package]]\nname = \"dirs-sys-next\"\nversion = \"0.1.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"4ebda144c4fe02d1f7ea1a7d9641b6fc6b580adcfa024ae48797ecdeb6825b4d\"\ndependencies = [\n \"libc\",\n \"redox_users\",\n \"winapi\",\n]\n\n[[package]]\nname = \"displaydoc\"\nversion = \"0.2.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"487585f4d0c6655fe74905e2504d8ad6908e4db67f744eb140876906c2f3175d\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.27\",\n]\n\n[[package]]\nname = \"dissimilar\"\nversion = \"1.0.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"210ec60ae7d710bed8683e333e9d2855a8a56a3e9892b38bad3bb0d4d29b0d5e\"\n\n[[package]]\nname = \"dlmalloc\"\nversion = \"0.2.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"203540e710bfadb90e5e29930baf5d10270cec1f43ab34f46f78b147b2de715a\"\ndependencies = [\n \"compiler_builtins\",\n \"libc\",\n \"rustc-std-workspace-core\",\n]\n\n[[package]]\nname = \"either\"\nversion = \"1.8.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"7fcaabb2fef8c910e7f4c7ce9f67a1283a1715879a7c230ca9d6d1ae31f16d91\"\n\n[[package]]\nname = \"elasticlunr-rs\"\nversion = \"3.0.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"41e83863a500656dfa214fee6682de9c5b9f03de6860fec531235ed2ae9f6571\"\ndependencies = [\n \"regex\",\n \"serde\",\n \"serde_derive\",\n \"serde_json\",\n]\n\n[[package]]\nname = \"elsa\"\nversion = \"1.7.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"848fe615fbb0a74d9ae68dcaa510106d32e37d9416207bbea4bd008bd89c47ed\"\ndependencies = [\n \"stable_deref_trait\",\n]\n\n[[package]]\nname = \"ena\"\nversion = \"0.14.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"c533630cf40e9caa44bd91aadc88a75d75a4c3a12b4cfde353cbed41daa1e1f1\"\ndependencies = [\n \"log\",\n]\n\n[[package]]\nname = \"encoding_rs\"\nversion = \"0.8.32\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"071a31f4ee85403370b58aca746f01041ede6f0da2730960ad001edc2b71b394\"\ndependencies = [\n \"cfg-if\",\n]\n\n[[package]]\nname = \"env_logger\"\nversion = \"0.7.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"44533bbbb3bb3c1fa17d9f2e4e38bbbaf8396ba82193c4cb1b6445d711445d36\"\ndependencies = [\n \"atty\",\n \"humantime 1.3.0\",\n \"log\",\n \"regex\",\n \"termcolor\",\n]\n\n[[package]]\nname = \"env_logger\"\nversion = \"0.9.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a12e6657c4c97ebab115a42dcee77225f7f482cdd841cf7088c657a42e9e00e7\"\ndependencies = [\n \"atty\",\n \"humantime 2.1.0\",\n \"log\",\n \"regex\",\n \"termcolor\",\n]\n\n[[package]]\nname = \"env_logger\"\nversion = \"0.10.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"85cdab6a89accf66733ad5a1693a4dcced6aeff64602b634530dd73c1f3ee9f0\"\ndependencies = [\n \"humantime 2.1.0\",\n \"is-terminal\",\n \"log\",\n \"regex\",\n \"termcolor\",\n]\n\n[[package]]\nname = \"equivalent\"\nversion = \"1.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"88bffebc5d80432c9b140ee17875ff173a8ab62faad5b257da912bd2f6c1c0a1\"\n\n[[package]]\nname = \"errno\"\nversion = \"0.3.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"4bcfec3a70f97c962c307b2d2c56e358cf1d00b558d74262b5f929ee8cc7e73a\"\ndependencies = [\n \"errno-dragonfly\",\n \"libc\",\n \"windows-sys 0.48.0\",\n]\n\n[[package]]\nname = \"errno-dragonfly\"\nversion = \"0.1.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"aa68f1b12764fab894d2755d2518754e71b4fd80ecfb822714a1206c2aab39bf\"\ndependencies = [\n \"cc\",\n \"libc\",\n]\n\n[[package]]\nname = \"error_index_generator\"\nversion = \"0.0.0\"\ndependencies = [\n \"mdbook\",\n \"rustc_error_codes\",\n]\n\n[[package]]\nname = \"expand-yaml-anchors\"\nversion = \"0.1.0\"\ndependencies = [\n \"yaml-merge-keys\",\n \"yaml-rust\",\n]\n\n[[package]]\nname = \"expect-test\"\nversion = \"1.4.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"30d9eafeadd538e68fb28016364c9732d78e420b9ff8853fa5e4058861e9f8d3\"\ndependencies = [\n \"dissimilar\",\n \"once_cell\",\n]\n\n[[package]]\nname = \"eyre\"\nversion = \"0.6.8\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"4c2b6b5a29c02cdc822728b7d7b8ae1bab3e3b05d44522770ddd49722eeac7eb\"\ndependencies = [\n \"indenter\",\n \"once_cell\",\n]\n\n[[package]]\nname = \"fallible-iterator\"\nversion = \"0.2.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"4443176a9f2c162692bd3d352d745ef9413eec5782a80d8fd6f8a1ac692a07f7\"\n\n[[package]]\nname = \"fastrand\"\nversion = \"1.9.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e51093e27b0797c359783294ca4f0a911c270184cb10f85783b118614a1501be\"\ndependencies = [\n \"instant\",\n]\n\n[[package]]\nname = \"field-offset\"\nversion = \"0.3.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"38e2275cc4e4fc009b0669731a1e5ab7ebf11f469eaede2bab9309a5b4d6057f\"\ndependencies = [\n \"memoffset\",\n \"rustc_version\",\n]\n\n[[package]]\nname = \"filetime\"\nversion = \"0.2.21\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"5cbc844cecaee9d4443931972e1289c8ff485cb4cc2767cb03ca139ed6885153\"\ndependencies = [\n \"cfg-if\",\n \"libc\",\n \"redox_syscall 0.2.16\",\n \"windows-sys 0.48.0\",\n]\n\n[[package]]\nname = \"flate2\"\nversion = \"1.0.26\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3b9429470923de8e8cbd4d2dc513535400b4b3fef0319fb5c4e1f520a7bef743\"\ndependencies = [\n \"crc32fast\",\n \"miniz_oxide\",\n]\n\n[[package]]\nname = \"fluent-bundle\"\nversion = \"0.15.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e242c601dec9711505f6d5bbff5bedd4b61b2469f2e8bb8e57ee7c9747a87ffd\"\ndependencies = [\n \"fluent-langneg\",\n \"fluent-syntax\",\n \"intl-memoizer\",\n \"intl_pluralrules\",\n \"rustc-hash\",\n \"self_cell\",\n \"smallvec\",\n \"unic-langid\",\n]\n\n[[package]]\nname = \"fluent-langneg\"\nversion = \"0.13.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"2c4ad0989667548f06ccd0e306ed56b61bd4d35458d54df5ec7587c0e8ed5e94\"\ndependencies = [\n \"unic-langid\",\n]\n\n[[package]]\nname = \"fluent-syntax\"\nversion = \"0.11.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"c0abed97648395c902868fee9026de96483933faa54ea3b40d652f7dfe61ca78\"\ndependencies = [\n \"thiserror\",\n]\n\n[[package]]\nname = \"fnv\"\nversion = \"1.0.7\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3f9eec918d3f24069decb9af1554cad7c880e2da24a9afd88aca000531ab82c1\"\n\n[[package]]\nname = \"foreign-types\"\nversion = \"0.3.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f6f339eb8adc052cd2ca78910fda869aefa38d22d5cb648e6485e4d3fc06f3b1\"\ndependencies = [\n \"foreign-types-shared\",\n]\n\n[[package]]\nname = \"foreign-types-shared\"\nversion = \"0.1.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"00b0228411908ca8685dba7fc2cdd70ec9990a6e753e89b6ac91a84c40fbaf4b\"\n\n[[package]]\nname = \"form_urlencoded\"\nversion = \"1.2.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a62bc1cf6f830c2ec14a513a9fb124d0a213a629668a4186f329db21fe045652\"\ndependencies = [\n \"percent-encoding\",\n]\n\n[[package]]\nname = \"fortanix-sgx-abi\"\nversion = \"0.5.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"57cafc2274c10fab234f176b25903ce17e690fca7597090d50880e047a0389c5\"\ndependencies = [\n \"compiler_builtins\",\n \"rustc-std-workspace-core\",\n]\n\n[[package]]\nname = \"fs-err\"\nversion = \"2.9.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"0845fa252299212f0389d64ba26f34fa32cfe41588355f21ed507c59a0f64541\"\n\n[[package]]\nname = \"fs_extra\"\nversion = \"1.3.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"42703706b716c37f96a77aea830392ad231f44c9e9a67872fa5548707e11b11c\"\n\n[[package]]\nname = \"futf\"\nversion = \"0.1.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"df420e2e84819663797d1ec6544b13c5be84629e7bb00dc960d6917db2987843\"\ndependencies = [\n \"mac\",\n \"new_debug_unreachable\",\n]\n\n[[package]]\nname = \"futures\"\nversion = \"0.3.28\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"23342abe12aba583913b2e62f22225ff9c950774065e4bfb61a19cd9770fec40\"\ndependencies = [\n \"futures-channel\",\n \"futures-core\",\n \"futures-executor\",\n \"futures-io\",\n \"futures-sink\",\n \"futures-task\",\n \"futures-util\",\n]\n\n[[package]]\nname = \"futures-channel\"\nversion = \"0.3.28\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"955518d47e09b25bbebc7a18df10b81f0c766eaf4c4f1cccef2fca5f2a4fb5f2\"\ndependencies = [\n \"futures-core\",\n \"futures-sink\",\n]\n\n[[package]]\nname = \"futures-core\"\nversion = \"0.3.28\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"4bca583b7e26f571124fe5b7561d49cb2868d79116cfa0eefce955557c6fee8c\"\n\n[[package]]\nname = \"futures-executor\"\nversion = \"0.3.28\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ccecee823288125bd88b4d7f565c9e58e41858e47ab72e8ea2d64e93624386e0\"\ndependencies = [\n \"futures-core\",\n \"futures-task\",\n \"futures-util\",\n]\n\n[[package]]\nname = \"futures-io\"\nversion = \"0.3.28\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"4fff74096e71ed47f8e023204cfd0aa1289cd54ae5430a9523be060cdb849964\"\n\n[[package]]\nname = \"futures-macro\"\nversion = \"0.3.28\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"89ca545a94061b6365f2c7355b4b32bd20df3ff95f02da9329b34ccc3bd6ee72\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.27\",\n]\n\n[[package]]\nname = \"futures-sink\"\nversion = \"0.3.28\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f43be4fe21a13b9781a69afa4985b0f6ee0e1afab2c6f454a8cf30e2b2237b6e\"\n\n[[package]]\nname = \"futures-task\"\nversion = \"0.3.28\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"76d3d132be6c0e6aa1534069c705a74a5997a356c0dc2f86a47765e5617c5b65\"\n\n[[package]]\nname = \"futures-util\"\nversion = \"0.3.28\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"26b01e40b772d54cf6c6d721c1d1abd0647a0106a12ecaa1c186273392a69533\"\ndependencies = [\n \"futures-channel\",\n \"futures-core\",\n \"futures-io\",\n \"futures-macro\",\n \"futures-sink\",\n \"futures-task\",\n \"memchr\",\n \"pin-project-lite\",\n \"pin-utils\",\n \"slab\",\n]\n\n[[package]]\nname = \"generate-copyright\"\nversion = \"0.1.0\"\ndependencies = [\n \"anyhow\",\n \"serde\",\n \"serde_json\",\n]\n\n[[package]]\nname = \"generate-windows-sys\"\nversion = \"0.1.0\"\ndependencies = [\n \"windows-bindgen\",\n]\n\n[[package]]\nname = \"generic-array\"\nversion = \"0.14.7\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"85649ca51fd72272d7821adaf274ad91c288277713d9c18820d8499a7ff69e9a\"\ndependencies = [\n \"typenum\",\n \"version_check\",\n]\n\n[[package]]\nname = \"getopts\"\nversion = \"0.2.21\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"14dbbfd5c71d70241ecf9e6f13737f7b5ce823821063188d7e46c41d371eebd5\"\ndependencies = [\n \"rustc-std-workspace-core\",\n \"rustc-std-workspace-std\",\n \"unicode-width\",\n]\n\n[[package]]\nname = \"getrandom\"\nversion = \"0.2.10\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"be4136b2a15dd319360be1c07d9933517ccf0be8f16bf62a3bee4f0d618df427\"\ndependencies = [\n \"cfg-if\",\n \"libc\",\n \"wasi\",\n]\n\n[[package]]\nname = \"gimli\"\nversion = \"0.26.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"22030e2c5a68ec659fde1e949a745124b48e6fa8b045b7ed5bd1fe4ccc5c4e5d\"\ndependencies = [\n \"fallible-iterator\",\n \"indexmap 1.9.3\",\n \"stable_deref_trait\",\n]\n\n[[package]]\nname = \"gimli\"\nversion = \"0.27.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b6c80984affa11d98d1b88b66ac8853f143217b399d3c74116778ff8fdb4ed2e\"\ndependencies = [\n \"compiler_builtins\",\n \"rustc-std-workspace-alloc\",\n \"rustc-std-workspace-core\",\n]\n\n[[package]]\nname = \"glob\"\nversion = \"0.3.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d2fabcfbdc87f4758337ca535fb41a6d701b65693ce38287d856d1674551ec9b\"\n\n[[package]]\nname = \"globset\"\nversion = \"0.4.10\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"029d74589adefde59de1a0c4f4732695c32805624aec7b68d91503d4dba79afc\"\ndependencies = [\n \"aho-corasick 0.7.20\",\n \"bstr\",\n \"fnv\",\n \"log\",\n \"regex\",\n]\n\n[[package]]\nname = \"gsgdt\"\nversion = \"0.1.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a0d876ce7262df96262a2a19531da6ff9a86048224d49580a585fc5c04617825\"\ndependencies = [\n \"serde\",\n]\n\n[[package]]\nname = \"h2\"\nversion = \"0.3.19\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d357c7ae988e7d2182f7d7871d0b963962420b0678b0997ce7de72001aeab782\"\ndependencies = [\n \"bytes\",\n \"fnv\",\n \"futures-core\",\n \"futures-sink\",\n \"futures-util\",\n \"http\",\n \"indexmap 1.9.3\",\n \"slab\",\n \"tokio\",\n \"tokio-util\",\n \"tracing\",\n]\n\n[[package]]\nname = \"handlebars\"\nversion = \"4.3.7\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"83c3372087601b532857d332f5957cbae686da52bb7810bf038c3e3c3cc2fa0d\"\ndependencies = [\n \"log\",\n \"pest\",\n \"pest_derive\",\n \"serde\",\n \"serde_json\",\n \"thiserror\",\n]\n\n[[package]]\nname = \"hashbrown\"\nversion = \"0.12.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8a9ee70c43aaf417c914396645a0fa852624801b24ebb7ae78fe8272889ac888\"\ndependencies = [\n \"ahash 0.7.6\",\n]\n\n[[package]]\nname = \"hashbrown\"\nversion = \"0.13.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"43a3c133739dddd0d2990f9a4bdf8eb4b21ef50e4851ca85ab661199821d510e\"\ndependencies = [\n \"ahash 0.8.3\",\n]\n\n[[package]]\nname = \"hashbrown\"\nversion = \"0.14.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"2c6201b9ff9fd90a5a3bac2e56a830d0caa509576f0e503818ee82c181b3437a\"\ndependencies = [\n \"allocator-api2\",\n \"compiler_builtins\",\n \"rustc-std-workspace-alloc\",\n \"rustc-std-workspace-core\",\n]\n\n[[package]]\nname = \"heck\"\nversion = \"0.4.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"95505c38b4572b2d910cecb0281560f54b440a19336cbbcb27bf6ce6adc6f5a8\"\n\n[[package]]\nname = \"hermit-abi\"\nversion = \"0.1.19\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"62b467343b94ba476dcb2500d242dadbb39557df889310ac77c5d99100aaac33\"\ndependencies = [\n \"libc\",\n]\n\n[[package]]\nname = \"hermit-abi\"\nversion = \"0.3.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"443144c8cdadd93ebf52ddb4056d257f5b52c04d3c804e657d19eb73fc33668b\"\ndependencies = [\n \"compiler_builtins\",\n \"rustc-std-workspace-alloc\",\n \"rustc-std-workspace-core\",\n]\n\n[[package]]\nname = \"hex\"\nversion = \"0.4.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"7f24254aa9a54b5c858eaee2f5bccdb46aaf0e486a595ed5fd8f86ba55232a70\"\n\n[[package]]\nname = \"html-checker\"\nversion = \"0.1.0\"\ndependencies = [\n \"rayon\",\n \"walkdir\",\n]\n\n[[package]]\nname = \"html5ever\"\nversion = \"0.26.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"bea68cab48b8459f17cf1c944c67ddc572d272d9f2b274140f223ecb1da4a3b7\"\ndependencies = [\n \"log\",\n \"mac\",\n \"markup5ever\",\n \"proc-macro2\",\n \"quote\",\n \"syn 1.0.109\",\n]\n\n[[package]]\nname = \"http\"\nversion = \"0.2.9\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"bd6effc99afb63425aff9b05836f029929e345a6148a14b7ecd5ab67af944482\"\ndependencies = [\n \"bytes\",\n \"fnv\",\n \"itoa\",\n]\n\n[[package]]\nname = \"http-body\"\nversion = \"0.4.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d5f38f16d184e36f2408a55281cd658ecbd3ca05cce6d6510a176eca393e26d1\"\ndependencies = [\n \"bytes\",\n \"http\",\n \"pin-project-lite\",\n]\n\n[[package]]\nname = \"httparse\"\nversion = \"1.8.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d897f394bad6a705d5f4104762e116a75639e470d80901eed05a860a95cb1904\"\n\n[[package]]\nname = \"httpdate\"\nversion = \"1.0.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"c4a1e36c821dbe04574f602848a19f742f4fb3c98d40449f11bcad18d6b17421\"\n\n[[package]]\nname = \"humansize\"\nversion = \"2.1.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"6cb51c9a029ddc91b07a787f1d86b53ccfa49b0e86688c946ebe8d3555685dd7\"\ndependencies = [\n \"libm 0.2.7\",\n]\n\n[[package]]\nname = \"humantime\"\nversion = \"1.3.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"df004cfca50ef23c36850aaaa59ad52cc70d0e90243c3c7737a4dd32dc7a3c4f\"\ndependencies = [\n \"quick-error\",\n]\n\n[[package]]\nname = \"humantime\"\nversion = \"2.1.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"9a3a5bfb195931eeb336b2a7b4d761daec841b97f947d34394601737a7bba5e4\"\n\n[[package]]\nname = \"hyper\"\nversion = \"0.14.22\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"abfba89e19b959ca163c7752ba59d737c1ceea53a5d31a149c805446fc958064\"\ndependencies = [\n \"bytes\",\n \"futures-channel\",\n \"futures-core\",\n \"futures-util\",\n \"h2\",\n \"http\",\n \"http-body\",\n \"httparse\",\n \"httpdate\",\n \"itoa\",\n \"pin-project-lite\",\n \"socket2\",\n \"tokio\",\n \"tower-service\",\n \"tracing\",\n \"want\",\n]\n\n[[package]]\nname = \"hyper-tls\"\nversion = \"0.5.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d6183ddfa99b85da61a140bea0efc93fdf56ceaa041b37d553518030827f9905\"\ndependencies = [\n \"bytes\",\n \"hyper\",\n \"native-tls\",\n \"tokio\",\n \"tokio-native-tls\",\n]\n\n[[package]]\nname = \"iana-time-zone\"\nversion = \"0.1.57\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"2fad5b825842d2b38bd206f3e81d6957625fd7f0a361e345c30e01a0ae2dd613\"\ndependencies = [\n \"android_system_properties\",\n \"core-foundation-sys\",\n \"iana-time-zone-haiku\",\n \"js-sys\",\n \"wasm-bindgen\",\n \"windows\",\n]\n\n[[package]]\nname = \"iana-time-zone-haiku\"\nversion = \"0.1.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f31827a206f56af32e590ba56d5d2d085f558508192593743f16b2306495269f\"\ndependencies = [\n \"cc\",\n]\n\n[[package]]\nname = \"icu_list\"\nversion = \"1.2.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"fd7ba7442d9235b689d4fdce17c452ea229934980fd81ba50cc28275752c9f90\"\ndependencies = [\n \"displaydoc\",\n \"icu_provider\",\n \"regex-automata 0.2.0\",\n \"writeable\",\n]\n\n[[package]]\nname = \"icu_locid\"\nversion = \"1.2.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3003f85dccfc0e238ff567693248c59153a46f4e6125ba4020b973cef4d1d335\"\ndependencies = [\n \"displaydoc\",\n \"litemap\",\n \"tinystr\",\n \"writeable\",\n \"zerovec\",\n]\n\n[[package]]\nname = \"icu_provider\"\nversion = \"1.2.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8dc312a7b6148f7dfe098047ae2494d12d4034f48ade58d4f353000db376e305\"\ndependencies = [\n \"displaydoc\",\n \"icu_locid\",\n \"icu_provider_macros\",\n \"stable_deref_trait\",\n \"writeable\",\n \"yoke\",\n \"zerofrom\",\n \"zerovec\",\n]\n\n[[package]]\nname = \"icu_provider_adapters\"\nversion = \"1.2.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f4ae1e2bd0c41728b77e7c46e9afdec5e2127d1eedacc684724667d50c126bd3\"\ndependencies = [\n \"icu_locid\",\n \"icu_provider\",\n \"tinystr\",\n \"yoke\",\n \"zerovec\",\n]\n\n[[package]]\nname = \"icu_provider_macros\"\nversion = \"1.2.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"dd8b728b9421e93eff1d9f8681101b78fa745e0748c95c655c83f337044a7e10\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn 1.0.109\",\n]\n\n[[package]]\nname = \"idna\"\nversion = \"0.4.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"7d20d6b07bfbc108882d88ed8e37d39636dcc260e15e30c45e6ba089610b917c\"\ndependencies = [\n \"unicode-bidi\",\n \"unicode-normalization\",\n]\n\n[[package]]\nname = \"if_chain\"\nversion = \"1.0.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"cb56e1aa765b4b4f3aadfab769793b7087bb03a4ea4920644a6d238e2df5b9ed\"\n\n[[package]]\nname = \"ignore\"\nversion = \"0.4.20\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"dbe7873dab538a9a44ad79ede1faf5f30d49f9a5c883ddbab48bce81b64b7492\"\ndependencies = [\n \"globset\",\n \"lazy_static\",\n \"log\",\n \"memchr\",\n \"regex\",\n \"same-file\",\n \"thread_local\",\n \"walkdir\",\n \"winapi-util\",\n]\n\n[[package]]\nname = \"indenter\"\nversion = \"0.3.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ce23b50ad8242c51a442f3ff322d56b02f08852c77e4c0b4d3fd684abc89c683\"\n\n[[package]]\nname = \"indexmap\"\nversion = \"1.9.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"bd070e393353796e801d209ad339e89596eb4c8d430d18ede6a1cced8fafbd99\"\ndependencies = [\n \"autocfg\",\n \"hashbrown 0.12.3\",\n]\n\n[[package]]\nname = \"indexmap\"\nversion = \"2.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d5477fe2230a79769d8dc68e0eabf5437907c0457a5614a9e8dddb67f65eb65d\"\ndependencies = [\n \"equivalent\",\n \"hashbrown 0.14.0\",\n \"rustc-rayon\",\n \"serde\",\n]\n\n[[package]]\nname = \"indoc\"\nversion = \"1.0.9\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"bfa799dd5ed20a7e349f3b4639aa80d74549c81716d9ec4f994c9b5815598306\"\n\n[[package]]\nname = \"installer\"\nversion = \"0.0.0\"\ndependencies = [\n \"anyhow\",\n \"clap\",\n \"flate2\",\n \"num_cpus\",\n \"rayon\",\n \"tar\",\n \"walkdir\",\n \"xz2\",\n]\n\n[[package]]\nname = \"instant\"\nversion = \"0.1.12\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"7a5bbe824c507c5da5956355e86a746d82e0e1464f65d862cc5e71da70e94b2c\"\ndependencies = [\n \"cfg-if\",\n]\n\n[[package]]\nname = \"intl-memoizer\"\nversion = \"0.5.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"c310433e4a310918d6ed9243542a6b83ec1183df95dff8f23f87bb88a264a66f\"\ndependencies = [\n \"type-map\",\n \"unic-langid\",\n]\n\n[[package]]\nname = \"intl_pluralrules\"\nversion = \"7.0.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"078ea7b7c29a2b4df841a7f6ac8775ff6074020c6776d48491ce2268e068f972\"\ndependencies = [\n \"unic-langid\",\n]\n\n[[package]]\nname = \"io-lifetimes\"\nversion = \"1.0.11\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"eae7b9aee968036d54dce06cebaefd919e4472e753296daccd6d344e3e2df0c2\"\ndependencies = [\n \"hermit-abi 0.3.2\",\n \"libc\",\n \"windows-sys 0.48.0\",\n]\n\n[[package]]\nname = \"ipnet\"\nversion = \"2.7.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"12b6ee2129af8d4fb011108c73d99a1b83a85977f23b82460c0ae2e25bb4b57f\"\n\n[[package]]\nname = \"is-terminal\"\nversion = \"0.4.8\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"24fddda5af7e54bf7da53067d6e802dbcc381d0a8eef629df528e3ebf68755cb\"\ndependencies = [\n \"hermit-abi 0.3.2\",\n \"rustix 0.38.2\",\n \"windows-sys 0.48.0\",\n]\n\n[[package]]\nname = \"itertools\"\nversion = \"0.10.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b0fd2260e829bddf4cb6ea802289de2f86d6a7a690192fbe91b3f46e0f2c8473\"\ndependencies = [\n \"either\",\n]\n\n[[package]]\nname = \"itoa\"\nversion = \"1.0.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"453ad9f582a441959e5f0d088b02ce04cfe8d51a8eaf077f12ac6d3e94164ca6\"\n\n[[package]]\nname = \"jemalloc-sys\"\nversion = \"0.5.3+5.3.0-patched\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f9bd5d616ea7ed58b571b2e209a65759664d7fb021a0819d7a790afc67e47ca1\"\ndependencies = [\n \"cc\",\n \"libc\",\n]\n\n[[package]]\nname = \"jobserver\"\nversion = \"0.1.26\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"936cfd212a0155903bcbc060e316fb6cc7cbf2e1907329391ebadc1fe0ce77c2\"\ndependencies = [\n \"libc\",\n]\n\n[[package]]\nname = \"js-sys\"\nversion = \"0.3.64\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"c5f195fe497f702db0f318b07fdd68edb16955aed830df8363d837542f8f935a\"\ndependencies = [\n \"wasm-bindgen\",\n]\n\n[[package]]\nname = \"jsondocck\"\nversion = \"0.1.0\"\ndependencies = [\n \"fs-err\",\n \"getopts\",\n \"jsonpath_lib\",\n \"once_cell\",\n \"regex\",\n \"serde_json\",\n \"shlex\",\n]\n\n[[package]]\nname = \"jsondoclint\"\nversion = \"0.1.0\"\ndependencies = [\n \"anyhow\",\n \"clap\",\n \"fs-err\",\n \"rustc-hash\",\n \"rustdoc-json-types\",\n \"serde\",\n \"serde_json\",\n]\n\n[[package]]\nname = \"jsonpath_lib\"\nversion = \"0.2.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"61352ec23883402b7d30b3313c16cbabefb8907361c4eb669d990cbb87ceee5a\"\ndependencies = [\n \"array_tool\",\n \"env_logger 0.7.1\",\n \"log\",\n \"serde\",\n \"serde_json\",\n]\n\n[[package]]\nname = \"lazy_static\"\nversion = \"1.4.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e2abad23fbc42b3700f2f279844dc832adb2b2eb069b2df918f455c4e18cc646\"\n\n[[package]]\nname = \"lazycell\"\nversion = \"1.3.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"830d08ce1d1d941e6b30645f1a0eb5643013d835ce3779a5fc208261dbe10f55\"\n\n[[package]]\nname = \"libc\"\nversion = \"0.2.147\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b4668fb0ea861c1df094127ac5f1da3409a82116a4ba74fca2e58ef927159bb3\"\ndependencies = [\n \"rustc-std-workspace-core\",\n]\n\n[[package]]\nname = \"libffi\"\nversion = \"3.2.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ce826c243048e3d5cec441799724de52e2d42f820468431fc3fceee2341871e2\"\ndependencies = [\n \"libc\",\n \"libffi-sys\",\n]\n\n[[package]]\nname = \"libffi-sys\"\nversion = \"2.3.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f36115160c57e8529781b4183c2bb51fdc1f6d6d1ed345591d84be7703befb3c\"\ndependencies = [\n \"cc\",\n]\n\n[[package]]\nname = \"libloading\"\nversion = \"0.7.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b67380fd3b2fbe7527a606e18729d21c6f3951633d0500574c4dc22d2d638b9f\"\ndependencies = [\n \"cfg-if\",\n \"winapi\",\n]\n\n[[package]]\nname = \"libm\"\nversion = \"0.1.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"7fc7aa29613bd6a620df431842069224d8bc9011086b1db4c0e0cd47fa03ec9a\"\n\n[[package]]\nname = \"libm\"\nversion = \"0.2.7\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f7012b1bbb0719e1097c47611d3898568c546d597c2e74d66f6087edd5233ff4\"\n\n[[package]]\nname = \"libz-sys\"\nversion = \"1.1.9\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"56ee889ecc9568871456d42f603d6a0ce59ff328d291063a45cbdf0036baf6db\"\ndependencies = [\n \"cc\",\n \"libc\",\n \"pkg-config\",\n \"vcpkg\",\n]\n\n[[package]]\nname = \"linkchecker\"\nversion = \"0.1.0\"\ndependencies = [\n \"once_cell\",\n \"regex\",\n]\n\n[[package]]\nname = \"linked-hash-map\"\nversion = \"0.5.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"0717cef1bc8b636c6e1c1bbdefc09e6322da8a9321966e8928ef80d20f7f770f\"\n\n[[package]]\nname = \"lint-docs\"\nversion = \"0.1.0\"\ndependencies = [\n \"serde_json\",\n \"tempfile\",\n \"walkdir\",\n]\n\n[[package]]\nname = \"linux-raw-sys\"\nversion = \"0.3.8\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ef53942eb7bf7ff43a617b3e2c1c4a5ecf5944a7c1bc12d7ee39bbb15e5c1519\"\n\n[[package]]\nname = \"linux-raw-sys\"\nversion = \"0.4.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"09fc20d2ca12cb9f044c93e3bd6d32d523e6e2ec3db4f7b2939cd99026ecd3f0\"\n\n[[package]]\nname = \"litemap\"\nversion = \"0.7.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3a04a5b2b6f54acba899926491d0a6c59d98012938ca2ab5befb281c034e8f94\"\n\n[[package]]\nname = \"lld-wrapper\"\nversion = \"0.1.0\"\n\n[[package]]\nname = \"lock_api\"\nversion = \"0.4.10\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"c1cc9717a20b1bb222f333e6a92fd32f7d8a18ddc5a3191a11af45dcbf4dcd16\"\ndependencies = [\n \"autocfg\",\n \"scopeguard\",\n]\n\n[[package]]\nname = \"log\"\nversion = \"0.4.19\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b06a4cde4c0f271a446782e3eff8de789548ce57dbc8eca9292c27f4a42004b4\"\n\n[[package]]\nname = \"lzma-sys\"\nversion = \"0.1.20\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"5fda04ab3764e6cde78b9974eec4f779acaba7c4e84b36eca3cf77c581b85d27\"\ndependencies = [\n \"cc\",\n \"libc\",\n \"pkg-config\",\n]\n\n[[package]]\nname = \"mac\"\nversion = \"0.1.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"c41e0c4fef86961ac6d6f8a82609f55f31b05e4fce149ac5710e439df7619ba4\"\n\n[[package]]\nname = \"maplit\"\nversion = \"1.0.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3e2e65a1a2e43cfcb47a895c4c8b10d1f4a61097f9f254f183aee60cad9c651d\"\n\n[[package]]\nname = \"markup5ever\"\nversion = \"0.11.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"7a2629bb1404f3d34c2e921f21fd34ba00b206124c81f65c50b43b6aaefeb016\"\ndependencies = [\n \"log\",\n \"phf\",\n \"phf_codegen\",\n \"string_cache\",\n \"string_cache_codegen\",\n \"tendril\",\n]\n\n[[package]]\nname = \"matchers\"\nversion = \"0.1.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8263075bb86c5a1b1427b5ae862e8889656f126e9f77c484496e8b47cf5c5558\"\ndependencies = [\n \"regex-automata 0.1.10\",\n]\n\n[[package]]\nname = \"md-5\"\nversion = \"0.10.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"6365506850d44bff6e2fbcb5176cf63650e48bd45ef2fe2665ae1570e0f4b9ca\"\ndependencies = [\n \"digest\",\n]\n\n[[package]]\nname = \"mdbook\"\nversion = \"0.4.31\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"7b67ee4a744f36e6280792016c17e69921b51df357181d1eb17d620fcc3609f3\"\ndependencies = [\n \"ammonia\",\n \"anyhow\",\n \"chrono\",\n \"clap\",\n \"clap_complete\",\n \"elasticlunr-rs\",\n \"env_logger 0.10.0\",\n \"handlebars\",\n \"log\",\n \"memchr\",\n \"once_cell\",\n \"opener\",\n \"pulldown-cmark\",\n \"regex\",\n \"serde\",\n \"serde_json\",\n \"shlex\",\n \"tempfile\",\n \"toml 0.5.11\",\n \"topological-sort\",\n]\n\n[[package]]\nname = \"measureme\"\nversion = \"10.1.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1930d162935fecd56fc4e0f6729eb3483bac1264542eb4ea31570b86a434b6bc\"\ndependencies = [\n \"log\",\n \"memmap2\",\n \"parking_lot 0.11.2\",\n \"perf-event-open-sys\",\n \"rustc-hash\",\n \"smallvec\",\n]\n\n[[package]]\nname = \"memchr\"\nversion = \"2.5.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"2dffe52ecf27772e601905b7522cb4ef790d2cc203488bbd0e2fe85fcb74566d\"\ndependencies = [\n \"compiler_builtins\",\n \"rustc-std-workspace-core\",\n]\n\n[[package]]\nname = \"memmap2\"\nversion = \"0.2.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"723e3ebdcdc5c023db1df315364573789f8857c11b631a2fdfad7c00f5c046b4\"\ndependencies = [\n \"libc\",\n]\n\n[[package]]\nname = \"memoffset\"\nversion = \"0.9.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"5a634b1c61a95585bd15607c6ab0c4e5b226e695ff2800ba0cdccddf208c406c\"\ndependencies = [\n \"autocfg\",\n]\n\n[[package]]\nname = \"mime\"\nversion = \"0.3.17\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"6877bb514081ee2a7ff5ef9de3281f14a4dd4bceac4c09388074a6b5df8a139a\"\n\n[[package]]\nname = \"mime_guess\"\nversion = \"2.0.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"4192263c238a5f0d0c6bfd21f336a313a4ce1c450542449ca191bb657b4642ef\"\ndependencies = [\n \"mime\",\n \"unicase\",\n]\n\n[[package]]\nname = \"minifier\"\nversion = \"0.2.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8eb022374af2f446981254e6bf9efb6e2c9e1a53176d395fca02792fd4435729\"\n\n[[package]]\nname = \"minimal-lexical\"\nversion = \"0.2.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"68354c5c6bd36d73ff3feceb05efa59b6acb7626617f4962be322a825e61f79a\"\n\n[[package]]\nname = \"miniz_oxide\"\nversion = \"0.7.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e7810e0be55b428ada41041c41f32c9f1a42817901b4ccf45fa3d4b6561e74c7\"\ndependencies = [\n \"adler\",\n \"compiler_builtins\",\n \"rustc-std-workspace-alloc\",\n \"rustc-std-workspace-core\",\n]\n\n[[package]]\nname = \"mio\"\nversion = \"0.8.8\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"927a765cd3fc26206e66b296465fa9d3e5ab003e651c1b3c060e7956d96b19d2\"\ndependencies = [\n \"libc\",\n \"wasi\",\n \"windows-sys 0.48.0\",\n]\n\n[[package]]\nname = \"miow\"\nversion = \"0.5.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"52ffbca2f655e33c08be35d87278e5b18b89550a37dbd598c20db92f6a471123\"\ndependencies = [\n \"windows-sys 0.42.0\",\n]\n\n[[package]]\nname = \"miri\"\nversion = \"0.1.0\"\ndependencies = [\n \"colored\",\n \"ctrlc\",\n \"env_logger 0.9.3\",\n \"getrandom\",\n \"lazy_static\",\n \"libc\",\n \"libffi\",\n \"libloading\",\n \"log\",\n \"measureme\",\n \"rand\",\n \"regex\",\n \"rustc_version\",\n \"smallvec\",\n \"ui_test\",\n]\n\n[[package]]\nname = \"miropt-test-tools\"\nversion = \"0.1.0\"\ndependencies = [\n \"regex\",\n]\n\n[[package]]\nname = \"native-tls\"\nversion = \"0.2.11\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"07226173c32f2926027b63cce4bcd8076c3552846cbe7925f3aaffeac0a3b92e\"\ndependencies = [\n \"lazy_static\",\n \"libc\",\n \"log\",\n \"openssl\",\n \"openssl-probe\",\n \"openssl-sys\",\n \"schannel\",\n \"security-framework\",\n \"security-framework-sys\",\n \"tempfile\",\n]\n\n[[package]]\nname = \"new_debug_unreachable\"\nversion = \"1.0.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e4a24736216ec316047a1fc4252e27dabb04218aa4a3f37c6e7ddbf1f9782b54\"\n\n[[package]]\nname = \"nix\"\nversion = \"0.26.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"bfdda3d196821d6af13126e40375cdf7da646a96114af134d5f417a9a1dc8e1a\"\ndependencies = [\n \"bitflags 1.3.2\",\n \"cfg-if\",\n \"libc\",\n \"static_assertions\",\n]\n\n[[package]]\nname = \"nom\"\nversion = \"7.1.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d273983c5a657a70a3e8f2a01329822f3b8c8172b73826411a55751e404a0a4a\"\ndependencies = [\n \"memchr\",\n \"minimal-lexical\",\n]\n\n[[package]]\nname = \"ntapi\"\nversion = \"0.4.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e8a3895c6391c39d7fe7ebc444a87eb2991b2a0bc718fdabd071eec617fc68e4\"\ndependencies = [\n \"winapi\",\n]\n\n[[package]]\nname = \"nu-ansi-term\"\nversion = \"0.46.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"77a8165726e8236064dbb45459242600304b42a5ea24ee2948e18e023bf7ba84\"\ndependencies = [\n \"overload\",\n \"winapi\",\n]\n\n[[package]]\nname = \"num-traits\"\nversion = \"0.2.15\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"578ede34cf02f8924ab9447f50c28075b4d3e5b269972345e7e0372b38c6cdcd\"\ndependencies = [\n \"autocfg\",\n]\n\n[[package]]\nname = \"num_cpus\"\nversion = \"1.16.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"4161fcb6d602d4d2081af7c3a45852d875a03dd337a6bfdd6e06407b61342a43\"\ndependencies = [\n \"hermit-abi 0.3.2\",\n \"libc\",\n]\n\n[[package]]\nname = \"object\"\nversion = \"0.31.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8bda667d9f2b5051b8833f59f3bf748b28ef54f850f4fcb389a252aa383866d1\"\ndependencies = [\n \"compiler_builtins\",\n \"crc32fast\",\n \"flate2\",\n \"hashbrown 0.13.2\",\n \"indexmap 1.9.3\",\n \"memchr\",\n \"rustc-std-workspace-alloc\",\n \"rustc-std-workspace-core\",\n \"ruzstd\",\n]\n\n[[package]]\nname = \"odht\"\nversion = \"0.3.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"5a518809ac14b25b569624d0268eba1e88498f71615893dca57982bed7621abb\"\ndependencies = [\n \"cfg-if\",\n]\n\n[[package]]\nname = \"once_cell\"\nversion = \"1.18.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"dd8b5dd2ae5ed71462c540258bedcb51965123ad7e7ccf4b9a8cafaa4a63576d\"\n\n[[package]]\nname = \"opener\"\nversion = \"0.5.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"293c15678e37254c15bd2f092314abb4e51d7fdde05c2021279c12631b54f005\"\ndependencies = [\n \"bstr\",\n \"winapi\",\n]\n\n[[package]]\nname = \"openssl\"\nversion = \"0.10.55\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"345df152bc43501c5eb9e4654ff05f794effb78d4efe3d53abc158baddc0703d\"\ndependencies = [\n \"bitflags 1.3.2\",\n \"cfg-if\",\n \"foreign-types\",\n \"libc\",\n \"once_cell\",\n \"openssl-macros\",\n \"openssl-sys\",\n]\n\n[[package]]\nname = \"openssl-macros\"\nversion = \"0.1.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a948666b637a0f465e8564c73e89d4dde00d72d4d473cc972f390fc3dcee7d9c\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.27\",\n]\n\n[[package]]\nname = \"openssl-probe\"\nversion = \"0.1.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ff011a302c396a5197692431fc1948019154afc178baf7d8e37367442a4601cf\"\n\n[[package]]\nname = \"openssl-sys\"\nversion = \"0.9.90\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"374533b0e45f3a7ced10fcaeccca020e66656bc03dac384f852e4e5a7a8104a6\"\ndependencies = [\n \"cc\",\n \"libc\",\n \"pkg-config\",\n \"vcpkg\",\n]\n\n[[package]]\nname = \"opt-dist\"\nversion = \"0.1.0\"\ndependencies = [\n \"anyhow\",\n \"build_helper\",\n \"camino\",\n \"env_logger 0.10.0\",\n \"fs_extra\",\n \"glob\",\n \"humansize\",\n \"humantime 2.1.0\",\n \"log\",\n \"reqwest\",\n \"serde\",\n \"serde_json\",\n \"sysinfo\",\n \"tar\",\n \"xz\",\n \"zip\",\n]\n\n[[package]]\nname = \"overload\"\nversion = \"0.1.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b15813163c1d831bf4a13c3610c05c0d03b39feb07f7e09fa234dac9b15aaf39\"\n\n[[package]]\nname = \"owo-colors\"\nversion = \"3.5.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"c1b04fb49957986fdce4d6ee7a65027d55d4b6d2265e5848bbb507b58ccfdb6f\"\n\n[[package]]\nname = \"packed_simd_2\"\nversion = \"0.3.8\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a1914cd452d8fccd6f9db48147b29fd4ae05bea9dc5d9ad578509f72415de282\"\ndependencies = [\n \"cfg-if\",\n \"libm 0.1.4\",\n]\n\n[[package]]\nname = \"panic_abort\"\nversion = \"0.0.0\"\ndependencies = [\n \"alloc\",\n \"cfg-if\",\n \"compiler_builtins\",\n \"core\",\n \"libc\",\n]\n\n[[package]]\nname = \"panic_unwind\"\nversion = \"0.0.0\"\ndependencies = [\n \"alloc\",\n \"cfg-if\",\n \"compiler_builtins\",\n \"core\",\n \"libc\",\n \"unwind\",\n]\n\n[[package]]\nname = \"parking_lot\"\nversion = \"0.11.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"7d17b78036a60663b797adeaee46f5c9dfebb86948d1255007a1d6be0271ff99\"\ndependencies = [\n \"instant\",\n \"lock_api\",\n \"parking_lot_core 0.8.6\",\n]\n\n[[package]]\nname = \"parking_lot\"\nversion = \"0.12.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3742b2c103b9f06bc9fff0a37ff4912935851bee6d36f3c02bcc755bcfec228f\"\ndependencies = [\n \"lock_api\",\n \"parking_lot_core 0.9.8\",\n]\n\n[[package]]\nname = \"parking_lot_core\"\nversion = \"0.8.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"60a2cfe6f0ad2bfc16aefa463b497d5c7a5ecd44a23efa72aa342d90177356dc\"\ndependencies = [\n \"cfg-if\",\n \"instant\",\n \"libc\",\n \"redox_syscall 0.2.16\",\n \"smallvec\",\n \"winapi\",\n]\n\n[[package]]\nname = \"parking_lot_core\"\nversion = \"0.9.8\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"93f00c865fe7cabf650081affecd3871070f26767e7b2070a3ffae14c654b447\"\ndependencies = [\n \"cfg-if\",\n \"libc\",\n \"redox_syscall 0.3.5\",\n \"smallvec\",\n \"windows-targets\",\n]\n\n[[package]]\nname = \"pathdiff\"\nversion = \"0.2.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8835116a5c179084a830efb3adc117ab007512b535bc1a21c991d3b32a6b44dd\"\n\n[[package]]\nname = \"percent-encoding\"\nversion = \"2.3.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"9b2a4787296e9989611394c33f193f676704af1686e70b8f8033ab5ba9a35a94\"\n\n[[package]]\nname = \"perf-event-open-sys\"\nversion = \"3.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b29be2ba35c12c6939f6bc73187f728bba82c3c062ecdc5fa90ea739282a1f58\"\ndependencies = [\n \"libc\",\n]\n\n[[package]]\nname = \"pest\"\nversion = \"2.7.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f73935e4d55e2abf7f130186537b19e7a4abc886a0252380b59248af473a3fc9\"\ndependencies = [\n \"thiserror\",\n \"ucd-trie\",\n]\n\n[[package]]\nname = \"pest_derive\"\nversion = \"2.7.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"aef623c9bbfa0eedf5a0efba11a5ee83209c326653ca31ff019bec3a95bfff2b\"\ndependencies = [\n \"pest\",\n \"pest_generator\",\n]\n\n[[package]]\nname = \"pest_generator\"\nversion = \"2.7.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b3e8cba4ec22bada7fc55ffe51e2deb6a0e0db2d0b7ab0b103acc80d2510c190\"\ndependencies = [\n \"pest\",\n \"pest_meta\",\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.27\",\n]\n\n[[package]]\nname = \"pest_meta\"\nversion = \"2.7.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a01f71cb40bd8bb94232df14b946909e14660e33fc05db3e50ae2a82d7ea0ca0\"\ndependencies = [\n \"once_cell\",\n \"pest\",\n \"sha2\",\n]\n\n[[package]]\nname = \"phf\"\nversion = \"0.10.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"fabbf1ead8a5bcbc20f5f8b939ee3f5b0f6f281b6ad3468b84656b658b455259\"\ndependencies = [\n \"phf_shared\",\n]\n\n[[package]]\nname = \"phf_codegen\"\nversion = \"0.10.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"4fb1c3a8bc4dd4e5cfce29b44ffc14bedd2ee294559a294e2a4d4c9e9a6a13cd\"\ndependencies = [\n \"phf_generator\",\n \"phf_shared\",\n]\n\n[[package]]\nname = \"phf_generator\"\nversion = \"0.10.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"5d5285893bb5eb82e6aaf5d59ee909a06a16737a8970984dd7746ba9283498d6\"\ndependencies = [\n \"phf_shared\",\n \"rand\",\n]\n\n[[package]]\nname = \"phf_shared\"\nversion = \"0.10.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b6796ad771acdc0123d2a88dc428b5e38ef24456743ddb1744ed628f9815c096\"\ndependencies = [\n \"siphasher\",\n]\n\n[[package]]\nname = \"pin-project-lite\"\nversion = \"0.2.10\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"4c40d25201921e5ff0c862a505c6557ea88568a4e3ace775ab55e93f2f4f9d57\"\n\n[[package]]\nname = \"pin-utils\"\nversion = \"0.1.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8b870d8c151b6f2fb93e84a13146138f05d02ed11c7e7c54f8826aaaf7c9f184\"\n\n[[package]]\nname = \"pkg-config\"\nversion = \"0.3.27\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"26072860ba924cbfa98ea39c8c19b4dd6a4a25423dbdf219c1eca91aa0cf6964\"\n\n[[package]]\nname = \"polonius-engine\"\nversion = \"0.13.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"c4e8e505342045d397d0b6674dcb82d6faf5cf40484d30eeb88fc82ef14e903f\"\ndependencies = [\n \"datafrog\",\n \"log\",\n \"rustc-hash\",\n]\n\n[[package]]\nname = \"ppv-lite86\"\nversion = \"0.2.17\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"5b40af805b3121feab8a3c29f04d8ad262fa8e0561883e7653e024ae4479e6de\"\n\n[[package]]\nname = \"precomputed-hash\"\nversion = \"0.1.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"925383efa346730478fb4838dbe9137d2a47675ad789c546d150a6e1dd4ab31c\"\n\n[[package]]\nname = \"proc-macro-hack\"\nversion = \"0.5.20+deprecated\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"dc375e1527247fe1a97d8b7156678dfe7c1af2fc075c9a4db3690ecd2a148068\"\n\n[[package]]\nname = \"proc-macro2\"\nversion = \"1.0.63\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"7b368fba921b0dce7e60f5e04ec15e565b3303972b42bcfde1d0713b881959eb\"\ndependencies = [\n \"unicode-ident\",\n]\n\n[[package]]\nname = \"proc_macro\"\nversion = \"0.0.0\"\ndependencies = [\n \"core\",\n \"std\",\n]\n\n[[package]]\nname = \"profiler_builtins\"\nversion = \"0.0.0\"\ndependencies = [\n \"cc\",\n \"compiler_builtins\",\n \"core\",\n]\n\n[[package]]\nname = \"psm\"\nversion = \"0.1.21\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"5787f7cda34e3033a72192c018bc5883100330f362ef279a8cbccfce8bb4e874\"\ndependencies = [\n \"cc\",\n]\n\n[[package]]\nname = \"pulldown-cmark\"\nversion = \"0.9.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"77a1a2f1f0a7ecff9c31abbe177637be0e97a0aef46cf8738ece09327985d998\"\ndependencies = [\n \"bitflags 1.3.2\",\n \"memchr\",\n \"unicase\",\n]\n\n[[package]]\nname = \"punycode\"\nversion = \"0.4.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e9e1dcb320d6839f6edb64f7a4a59d39b30480d4d1765b56873f7c858538a5fe\"\n\n[[package]]\nname = \"quick-error\"\nversion = \"1.2.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a1d01941d82fa2ab50be1e79e6714289dd7cde78eba4c074bc5a4374f650dfe0\"\n\n[[package]]\nname = \"quine-mc_cluskey\"\nversion = \"0.2.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"07589615d719a60c8dd8a4622e7946465dfef20d1a428f969e3443e7386d5f45\"\n\n[[package]]\nname = \"quote\"\nversion = \"1.0.29\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"573015e8ab27661678357f27dc26460738fd2b6c86e46f386fde94cb5d913105\"\ndependencies = [\n \"proc-macro2\",\n]\n\n[[package]]\nname = \"rand\"\nversion = \"0.8.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"34af8d1a0e25924bc5b7c43c079c942339d8f0a8b57c39049bef581b46327404\"\ndependencies = [\n \"libc\",\n \"rand_chacha\",\n \"rand_core\",\n]\n\n[[package]]\nname = \"rand_chacha\"\nversion = \"0.3.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e6c10a63a0fa32252be49d21e7709d4d4baf8d231c2dbce1eaa8141b9b127d88\"\ndependencies = [\n \"ppv-lite86\",\n \"rand_core\",\n]\n\n[[package]]\nname = \"rand_core\"\nversion = \"0.6.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ec0be4795e2f6a28069bec0b5ff3e2ac9bafc99e6a9a7dc3547996c5c816922c\"\ndependencies = [\n \"getrandom\",\n]\n\n[[package]]\nname = \"rand_xorshift\"\nversion = \"0.3.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d25bf25ec5ae4a3f1b92f929810509a2f53d7dca2f50b794ff57e3face536c8f\"\ndependencies = [\n \"rand_core\",\n]\n\n[[package]]\nname = \"rand_xoshiro\"\nversion = \"0.6.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"6f97cdb2a36ed4183de61b2f824cc45c9f1037f28afe0a322e9fff4c108b5aaa\"\ndependencies = [\n \"rand_core\",\n]\n\n[[package]]\nname = \"rayon\"\nversion = \"1.7.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1d2df5196e37bcc87abebc0053e20787d73847bb33134a69841207dd0a47f03b\"\ndependencies = [\n \"either\",\n \"rayon-core\",\n]\n\n[[package]]\nname = \"rayon-core\"\nversion = \"1.11.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"4b8f95bd6966f5c87776639160a66bd8ab9895d9d4ab01ddba9fc60661aebe8d\"\ndependencies = [\n \"crossbeam-channel\",\n \"crossbeam-deque\",\n \"crossbeam-utils\",\n \"num_cpus\",\n]\n\n[[package]]\nname = \"redox_syscall\"\nversion = \"0.2.16\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"fb5a58c1855b4b6819d59012155603f0b22ad30cad752600aadfcb695265519a\"\ndependencies = [\n \"bitflags 1.3.2\",\n]\n\n[[package]]\nname = \"redox_syscall\"\nversion = \"0.3.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"567664f262709473930a4bf9e51bf2ebf3348f2e748ccc50dea20646858f8f29\"\ndependencies = [\n \"bitflags 1.3.2\",\n]\n\n[[package]]\nname = \"redox_users\"\nversion = \"0.4.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b033d837a7cf162d7993aded9304e30a83213c648b6e389db233191f891e5c2b\"\ndependencies = [\n \"getrandom\",\n \"redox_syscall 0.2.16\",\n \"thiserror\",\n]\n\n[[package]]\nname = \"regex\"\nversion = \"1.8.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d0ab3ca65655bb1e41f2a8c8cd662eb4fb035e67c3f78da1d61dffe89d07300f\"\ndependencies = [\n \"aho-corasick 1.0.2\",\n \"memchr\",\n \"regex-syntax 0.7.2\",\n]\n\n[[package]]\nname = \"regex-automata\"\nversion = \"0.1.10\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"6c230d73fb8d8c1b9c0b3135c5142a8acee3a0558fb8db5cf1cb65f8d7862132\"\ndependencies = [\n \"regex-syntax 0.6.29\",\n]\n\n[[package]]\nname = \"regex-automata\"\nversion = \"0.2.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e9368763f5a9b804326f3af749e16f9abf378d227bcdee7634b13d8f17793782\"\ndependencies = [\n \"memchr\",\n]\n\n[[package]]\nname = \"regex-syntax\"\nversion = \"0.6.29\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f162c6dd7b008981e4d40210aca20b4bd0f9b60ca9271061b07f78537722f2e1\"\n\n[[package]]\nname = \"regex-syntax\"\nversion = \"0.7.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"436b050e76ed2903236f032a59761c1eb99e1b0aead2c257922771dab1fc8c78\"\n\n[[package]]\nname = \"remote-test-client\"\nversion = \"0.1.0\"\n\n[[package]]\nname = \"remote-test-server\"\nversion = \"0.1.0\"\n\n[[package]]\nname = \"replace-version-placeholder\"\nversion = \"0.1.0\"\ndependencies = [\n \"tidy\",\n \"walkdir\",\n]\n\n[[package]]\nname = \"reqwest\"\nversion = \"0.11.18\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"cde824a14b7c14f85caff81225f411faacc04a2013f41670f41443742b1c1c55\"\ndependencies = [\n \"base64\",\n \"bytes\",\n \"encoding_rs\",\n \"futures-core\",\n \"futures-util\",\n \"h2\",\n \"http\",\n \"http-body\",\n \"hyper\",\n \"hyper-tls\",\n \"ipnet\",\n \"js-sys\",\n \"log\",\n \"mime\",\n \"native-tls\",\n \"once_cell\",\n \"percent-encoding\",\n \"pin-project-lite\",\n \"serde\",\n \"serde_json\",\n \"serde_urlencoded\",\n \"tokio\",\n \"tokio-native-tls\",\n \"tower-service\",\n \"url\",\n \"wasm-bindgen\",\n \"wasm-bindgen-futures\",\n \"web-sys\",\n \"winreg\",\n]\n\n[[package]]\nname = \"rls\"\nversion = \"2.0.0\"\ndependencies = [\n \"serde_json\",\n]\n\n[[package]]\nname = \"rust-demangler\"\nversion = \"0.0.1\"\ndependencies = [\n \"regex\",\n \"rustc-demangle\",\n]\n\n[[package]]\nname = \"rustbook\"\nversion = \"0.1.0\"\ndependencies = [\n \"clap\",\n \"env_logger 0.10.0\",\n \"mdbook\",\n]\n\n[[package]]\nname = \"rustc-build-sysroot\"\nversion = \"0.4.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8ed2a90dfa5232ed5ff21d53d4df655f315ab316ea06fc508f1c74bcedb1ce6c\"\ndependencies = [\n \"anyhow\",\n \"rustc_version\",\n \"tempfile\",\n]\n\n[[package]]\nname = \"rustc-demangle\"\nversion = \"0.1.23\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d626bb9dae77e28219937af045c257c28bfd3f69333c512553507f5f9798cb76\"\ndependencies = [\n \"compiler_builtins\",\n \"rustc-std-workspace-core\",\n]\n\n[[package]]\nname = \"rustc-hash\"\nversion = \"1.1.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"08d43f7aa6b08d49f382cde6a7982047c3426db949b1424bc4b7ec9ae12c6ce2\"\n\n[[package]]\nname = \"rustc-main\"\nversion = \"0.0.0\"\ndependencies = [\n \"jemalloc-sys\",\n \"rustc_codegen_ssa\",\n \"rustc_driver\",\n \"rustc_driver_impl\",\n \"rustc_smir\",\n]\n\n[[package]]\nname = \"rustc-rayon\"\nversion = \"0.5.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"eb81aadc8837ca6ecebe0fe1353f15df83b3b3cc2cf7a8afd571bc22aa121710\"\ndependencies = [\n \"either\",\n \"rustc-rayon-core\",\n]\n\n[[package]]\nname = \"rustc-rayon-core\"\nversion = \"0.5.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"67668daaf00e359c126f6dcb40d652d89b458a008c8afa727a42a2d20fca0b7f\"\ndependencies = [\n \"crossbeam-channel\",\n \"crossbeam-deque\",\n \"crossbeam-utils\",\n \"num_cpus\",\n]\n\n[[package]]\nname = \"rustc-semver\"\nversion = \"1.1.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"5be1bdc7edf596692617627bbfeaba522131b18e06ca4df2b6b689e3c5d5ce84\"\n\n[[package]]\nname = \"rustc-std-workspace-alloc\"\nversion = \"1.99.0\"\ndependencies = [\n \"alloc\",\n]\n\n[[package]]\nname = \"rustc-std-workspace-core\"\nversion = \"1.99.0\"\ndependencies = [\n \"core\",\n]\n\n[[package]]\nname = \"rustc-std-workspace-std\"\nversion = \"1.99.0\"\ndependencies = [\n \"std\",\n]\n\n[[package]]\nname = \"rustc_abi\"\nversion = \"0.0.0\"\ndependencies = [\n \"bitflags 1.3.2\",\n \"rand\",\n \"rand_xoshiro\",\n \"rustc_data_structures\",\n \"rustc_index\",\n \"rustc_macros\",\n \"rustc_serialize\",\n \"tracing\",\n]\n\n[[package]]\nname = \"rustc_apfloat\"\nversion = \"0.2.0+llvm-462a31f5a5ab\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"465187772033a5ee566f69fe008df03628fce549a0899aae76f0a0c2e34696be\"\ndependencies = [\n \"bitflags 1.3.2\",\n \"smallvec\",\n]\n\n[[package]]\nname = \"rustc_arena\"\nversion = \"0.0.0\"\ndependencies = [\n \"smallvec\",\n]\n\n[[package]]\nname = \"rustc_ast\"\nversion = \"0.0.0\"\ndependencies = [\n \"bitflags 1.3.2\",\n \"memchr\",\n \"rustc_data_structures\",\n \"rustc_index\",\n \"rustc_lexer\",\n \"rustc_macros\",\n \"rustc_serialize\",\n \"rustc_span\",\n \"smallvec\",\n \"thin-vec\",\n \"tracing\",\n]\n\n[[package]]\nname = \"rustc_ast_lowering\"\nversion = \"0.0.0\"\ndependencies = [\n \"rustc_ast\",\n \"rustc_ast_pretty\",\n \"rustc_data_structures\",\n \"rustc_errors\",\n \"rustc_fluent_macro\",\n \"rustc_hir\",\n \"rustc_index\",\n \"rustc_macros\",\n \"rustc_middle\",\n \"rustc_session\",\n \"rustc_span\",\n \"rustc_target\",\n \"smallvec\",\n \"thin-vec\",\n \"tracing\",\n]\n\n[[package]]\nname = \"rustc_ast_passes\"\nversion = \"0.0.0\"\ndependencies = [\n \"itertools\",\n \"rustc_ast\",\n \"rustc_ast_pretty\",\n \"rustc_attr\",\n \"rustc_data_structures\",\n \"rustc_errors\",\n \"rustc_feature\",\n \"rustc_fluent_macro\",\n \"rustc_macros\",\n \"rustc_parse\",\n \"rustc_session\",\n \"rustc_span\",\n \"rustc_target\",\n \"thin-vec\",\n \"tracing\",\n]\n\n[[package]]\nname = \"rustc_ast_pretty\"\nversion = \"0.0.0\"\ndependencies = [\n \"rustc_ast\",\n \"rustc_span\",\n \"thin-vec\",\n]\n\n[[package]]\nname = \"rustc_attr\"\nversion = \"0.0.0\"\ndependencies = [\n \"rustc_ast\",\n \"rustc_ast_pretty\",\n \"rustc_data_structures\",\n \"rustc_errors\",\n \"rustc_feature\",\n \"rustc_fluent_macro\",\n \"rustc_lexer\",\n \"rustc_macros\",\n \"rustc_serialize\",\n \"rustc_session\",\n \"rustc_span\",\n]\n\n[[package]]\nname = \"rustc_baked_icu_data\"\nversion = \"0.0.0\"\ndependencies = [\n \"icu_list\",\n \"icu_locid\",\n \"icu_provider\",\n \"icu_provider_adapters\",\n \"zerovec\",\n]\n\n[[package]]\nname = \"rustc_borrowck\"\nversion = \"0.0.0\"\ndependencies = [\n \"either\",\n \"itertools\",\n \"polonius-engine\",\n \"rustc_data_structures\",\n \"rustc_errors\",\n \"rustc_fluent_macro\",\n \"rustc_graphviz\",\n \"rustc_hir\",\n \"rustc_index\",\n \"rustc_infer\",\n \"rustc_lexer\",\n \"rustc_macros\",\n \"rustc_middle\",\n \"rustc_mir_dataflow\",\n \"rustc_serialize\",\n \"rustc_session\",\n \"rustc_span\",\n \"rustc_target\",\n \"rustc_trait_selection\",\n \"rustc_traits\",\n \"smallvec\",\n \"tracing\",\n]\n\n[[package]]\nname = \"rustc_builtin_macros\"\nversion = \"0.0.0\"\ndependencies = [\n \"rustc_ast\",\n \"rustc_ast_pretty\",\n \"rustc_attr\",\n \"rustc_data_structures\",\n \"rustc_errors\",\n \"rustc_expand\",\n \"rustc_feature\",\n \"rustc_fluent_macro\",\n \"rustc_index\",\n \"rustc_lexer\",\n \"rustc_lint_defs\",\n \"rustc_macros\",\n \"rustc_parse\",\n \"rustc_parse_format\",\n \"rustc_session\",\n \"rustc_span\",\n \"rustc_target\",\n \"smallvec\",\n \"thin-vec\",\n \"tracing\",\n]\n\n[[package]]\nname = \"rustc_codegen_llvm\"\nversion = \"0.0.0\"\ndependencies = [\n \"bitflags 1.3.2\",\n \"cstr\",\n \"libc\",\n \"measureme\",\n \"object\",\n \"rustc-demangle\",\n \"rustc_ast\",\n \"rustc_attr\",\n \"rustc_codegen_ssa\",\n \"rustc_data_structures\",\n \"rustc_errors\",\n \"rustc_fluent_macro\",\n \"rustc_fs_util\",\n \"rustc_hir\",\n \"rustc_index\",\n \"rustc_llvm\",\n \"rustc_macros\",\n \"rustc_metadata\",\n \"rustc_middle\",\n \"rustc_query_system\",\n \"rustc_session\",\n \"rustc_span\",\n \"rustc_symbol_mangling\",\n \"rustc_target\",\n \"serde\",\n \"serde_json\",\n \"smallvec\",\n \"tracing\",\n]\n\n[[package]]\nname = \"rustc_codegen_ssa\"\nversion = \"0.0.0\"\ndependencies = [\n \"ar_archive_writer\",\n \"bitflags 1.3.2\",\n \"cc\",\n \"itertools\",\n \"jobserver\",\n \"libc\",\n \"object\",\n \"pathdiff\",\n \"regex\",\n \"rustc_arena\",\n \"rustc_ast\",\n \"rustc_attr\",\n \"rustc_data_structures\",\n \"rustc_errors\",\n \"rustc_fluent_macro\",\n \"rustc_fs_util\",\n \"rustc_hir\",\n \"rustc_incremental\",\n \"rustc_index\",\n \"rustc_macros\",\n \"rustc_metadata\",\n \"rustc_middle\",\n \"rustc_query_system\",\n \"rustc_serialize\",\n \"rustc_session\",\n \"rustc_span\",\n \"rustc_symbol_mangling\",\n \"rustc_target\",\n \"rustc_type_ir\",\n \"serde_json\",\n \"smallvec\",\n \"tempfile\",\n \"thorin-dwp\",\n \"tracing\",\n \"windows\",\n]\n\n[[package]]\nname = \"rustc_const_eval\"\nversion = \"0.0.0\"\ndependencies = [\n \"either\",\n \"rustc_apfloat\",\n \"rustc_ast\",\n \"rustc_attr\",\n \"rustc_data_structures\",\n \"rustc_errors\",\n \"rustc_fluent_macro\",\n \"rustc_hir\",\n \"rustc_index\",\n \"rustc_infer\",\n \"rustc_macros\",\n \"rustc_middle\",\n \"rustc_mir_dataflow\",\n \"rustc_session\",\n \"rustc_span\",\n \"rustc_target\",\n \"rustc_trait_selection\",\n \"rustc_type_ir\",\n \"tracing\",\n]\n\n[[package]]\nname = \"rustc_data_structures\"\nversion = \"0.0.0\"\ndependencies = [\n \"arrayvec\",\n \"bitflags 1.3.2\",\n \"cfg-if\",\n \"elsa\",\n \"ena\",\n \"indexmap 2.0.0\",\n \"itertools\",\n \"jobserver\",\n \"libc\",\n \"measureme\",\n \"memmap2\",\n \"parking_lot 0.11.2\",\n \"rustc-hash\",\n \"rustc-rayon\",\n \"rustc-rayon-core\",\n \"rustc_arena\",\n \"rustc_graphviz\",\n \"rustc_index\",\n \"rustc_macros\",\n \"rustc_serialize\",\n \"smallvec\",\n \"stacker\",\n \"tempfile\",\n \"thin-vec\",\n \"tracing\",\n \"windows\",\n]\n\n[[package]]\nname = \"rustc_driver\"\nversion = \"0.0.0\"\ndependencies = [\n \"rustc_driver_impl\",\n]\n\n[[package]]\nname = \"rustc_driver_impl\"\nversion = \"0.0.0\"\ndependencies = [\n \"libc\",\n \"rustc_ast\",\n \"rustc_ast_lowering\",\n \"rustc_ast_passes\",\n \"rustc_ast_pretty\",\n \"rustc_attr\",\n \"rustc_borrowck\",\n \"rustc_builtin_macros\",\n \"rustc_codegen_ssa\",\n \"rustc_const_eval\",\n \"rustc_data_structures\",\n \"rustc_error_codes\",\n \"rustc_error_messages\",\n \"rustc_errors\",\n \"rustc_expand\",\n \"rustc_feature\",\n \"rustc_fluent_macro\",\n \"rustc_hir\",\n \"rustc_hir_analysis\",\n \"rustc_hir_pretty\",\n \"rustc_hir_typeck\",\n \"rustc_incremental\",\n \"rustc_infer\",\n \"rustc_interface\",\n \"rustc_lint\",\n \"rustc_log\",\n \"rustc_macros\",\n \"rustc_metadata\",\n \"rustc_middle\",\n \"rustc_mir_build\",\n \"rustc_mir_dataflow\",\n \"rustc_mir_transform\",\n \"rustc_monomorphize\",\n \"rustc_parse\",\n \"rustc_passes\",\n \"rustc_plugin_impl\",\n \"rustc_privacy\",\n \"rustc_query_system\",\n \"rustc_resolve\",\n \"rustc_session\",\n \"rustc_span\",\n \"rustc_symbol_mangling\",\n \"rustc_target\",\n \"rustc_trait_selection\",\n \"rustc_ty_utils\",\n \"serde_json\",\n \"time\",\n \"tracing\",\n \"windows\",\n]\n\n[[package]]\nname = \"rustc_error_codes\"\nversion = \"0.0.0\"\n\n[[package]]\nname = \"rustc_error_messages\"\nversion = \"0.0.0\"\ndependencies = [\n \"fluent-bundle\",\n \"fluent-syntax\",\n \"icu_list\",\n \"icu_locid\",\n \"icu_provider_adapters\",\n \"intl-memoizer\",\n \"rustc_baked_icu_data\",\n \"rustc_data_structures\",\n \"rustc_fluent_macro\",\n \"rustc_macros\",\n \"rustc_serialize\",\n \"rustc_span\",\n \"tracing\",\n \"unic-langid\",\n]\n\n[[package]]\nname = \"rustc_errors\"\nversion = \"0.0.0\"\ndependencies = [\n \"annotate-snippets\",\n \"rustc_ast\",\n \"rustc_ast_pretty\",\n \"rustc_data_structures\",\n \"rustc_error_messages\",\n \"rustc_fluent_macro\",\n \"rustc_hir\",\n \"rustc_lint_defs\",\n \"rustc_macros\",\n \"rustc_serialize\",\n \"rustc_span\",\n \"rustc_target\",\n \"rustc_type_ir\",\n \"serde\",\n \"serde_json\",\n \"termcolor\",\n \"termize\",\n \"tracing\",\n \"unicode-width\",\n \"windows\",\n]\n\n[[package]]\nname = \"rustc_expand\"\nversion = \"0.0.0\"\ndependencies = [\n \"crossbeam-channel\",\n \"rustc_ast\",\n \"rustc_ast_passes\",\n \"rustc_ast_pretty\",\n \"rustc_attr\",\n \"rustc_data_structures\",\n \"rustc_errors\",\n \"rustc_feature\",\n \"rustc_fluent_macro\",\n \"rustc_lexer\",\n \"rustc_lint_defs\",\n \"rustc_macros\",\n \"rustc_parse\",\n \"rustc_serialize\",\n \"rustc_session\",\n \"rustc_span\",\n \"smallvec\",\n \"thin-vec\",\n \"tracing\",\n]\n\n[[package]]\nname = \"rustc_feature\"\nversion = \"0.0.0\"\ndependencies = [\n \"rustc_data_structures\",\n \"rustc_span\",\n]\n\n[[package]]\nname = \"rustc_fluent_macro\"\nversion = \"0.1.0\"\ndependencies = [\n \"annotate-snippets\",\n \"fluent-bundle\",\n \"fluent-syntax\",\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.27\",\n \"unic-langid\",\n]\n\n[[package]]\nname = \"rustc_fs_util\"\nversion = \"0.0.0\"\n\n[[package]]\nname = \"rustc_graphviz\"\nversion = \"0.0.0\"\n\n[[package]]\nname = \"rustc_hir\"\nversion = \"0.0.0\"\ndependencies = [\n \"odht\",\n \"rustc_arena\",\n \"rustc_ast\",\n \"rustc_data_structures\",\n \"rustc_error_messages\",\n \"rustc_index\",\n \"rustc_macros\",\n \"rustc_serialize\",\n \"rustc_span\",\n \"rustc_target\",\n \"smallvec\",\n \"tracing\",\n]\n\n[[package]]\nname = \"rustc_hir_analysis\"\nversion = \"0.0.0\"\ndependencies = [\n \"rustc_arena\",\n \"rustc_ast\",\n \"rustc_attr\",\n \"rustc_data_structures\",\n \"rustc_errors\",\n \"rustc_feature\",\n \"rustc_fluent_macro\",\n \"rustc_hir\",\n \"rustc_index\",\n \"rustc_infer\",\n \"rustc_lint_defs\",\n \"rustc_macros\",\n \"rustc_middle\",\n \"rustc_session\",\n \"rustc_span\",\n \"rustc_target\",\n \"rustc_trait_selection\",\n \"rustc_type_ir\",\n \"smallvec\",\n \"tracing\",\n]\n\n[[package]]\nname = \"rustc_hir_pretty\"\nversion = \"0.0.0\"\ndependencies = [\n \"rustc_ast\",\n \"rustc_ast_pretty\",\n \"rustc_hir\",\n \"rustc_span\",\n \"rustc_target\",\n]\n\n[[package]]\nname = \"rustc_hir_typeck\"\nversion = \"0.1.0\"\ndependencies = [\n \"rustc_ast\",\n \"rustc_attr\",\n \"rustc_data_structures\",\n \"rustc_errors\",\n \"rustc_fluent_macro\",\n \"rustc_graphviz\",\n \"rustc_hir\",\n \"rustc_hir_analysis\",\n \"rustc_hir_pretty\",\n \"rustc_index\",\n \"rustc_infer\",\n \"rustc_lint\",\n \"rustc_macros\",\n \"rustc_middle\",\n \"rustc_serialize\",\n \"rustc_session\",\n \"rustc_span\",\n \"rustc_target\",\n \"rustc_trait_selection\",\n \"rustc_type_ir\",\n \"smallvec\",\n \"tracing\",\n]\n\n[[package]]\nname = \"rustc_incremental\"\nversion = \"0.0.0\"\ndependencies = [\n \"rand\",\n \"rustc_ast\",\n \"rustc_data_structures\",\n \"rustc_errors\",\n \"rustc_fluent_macro\",\n \"rustc_fs_util\",\n \"rustc_graphviz\",\n \"rustc_hir\",\n \"rustc_macros\",\n \"rustc_middle\",\n \"rustc_serialize\",\n \"rustc_session\",\n \"rustc_span\",\n \"thin-vec\",\n \"tracing\",\n]\n\n[[package]]\nname = \"rustc_index\"\nversion = \"0.0.0\"\ndependencies = [\n \"arrayvec\",\n \"rustc_macros\",\n \"rustc_serialize\",\n \"smallvec\",\n]\n\n[[package]]\nname = \"rustc_infer\"\nversion = \"0.0.0\"\ndependencies = [\n \"rustc_data_structures\",\n \"rustc_errors\",\n \"rustc_fluent_macro\",\n \"rustc_hir\",\n \"rustc_index\",\n \"rustc_macros\",\n \"rustc_middle\",\n \"rustc_serialize\",\n \"rustc_span\",\n \"rustc_target\",\n \"smallvec\",\n \"tracing\",\n]\n\n[[package]]\nname = \"rustc_interface\"\nversion = \"0.0.0\"\ndependencies = [\n \"libloading\",\n \"rustc-rayon\",\n \"rustc-rayon-core\",\n \"rustc_ast\",\n \"rustc_ast_lowering\",\n \"rustc_ast_passes\",\n \"rustc_attr\",\n \"rustc_borrowck\",\n \"rustc_builtin_macros\",\n \"rustc_codegen_llvm\",\n \"rustc_codegen_ssa\",\n \"rustc_const_eval\",\n \"rustc_data_structures\",\n \"rustc_errors\",\n \"rustc_expand\",\n \"rustc_fluent_macro\",\n \"rustc_fs_util\",\n \"rustc_hir\",\n \"rustc_hir_analysis\",\n \"rustc_hir_typeck\",\n \"rustc_incremental\",\n \"rustc_index\",\n \"rustc_lint\",\n \"rustc_macros\",\n \"rustc_metadata\",\n \"rustc_middle\",\n \"rustc_mir_build\",\n \"rustc_mir_transform\",\n \"rustc_monomorphize\",\n \"rustc_parse\",\n \"rustc_passes\",\n \"rustc_plugin_impl\",\n \"rustc_privacy\",\n \"rustc_query_impl\",\n \"rustc_query_system\",\n \"rustc_resolve\",\n \"rustc_session\",\n \"rustc_span\",\n \"rustc_symbol_mangling\",\n \"rustc_target\",\n \"rustc_trait_selection\",\n \"rustc_traits\",\n \"rustc_ty_utils\",\n \"tracing\",\n]\n\n[[package]]\nname = \"rustc_lexer\"\nversion = \"0.1.0\"\ndependencies = [\n \"expect-test\",\n \"unic-emoji-char\",\n \"unicode-xid\",\n]\n\n[[package]]\nname = \"rustc_lint\"\nversion = \"0.0.0\"\ndependencies = [\n \"rustc_ast\",\n \"rustc_ast_pretty\",\n \"rustc_attr\",\n \"rustc_data_structures\",\n \"rustc_errors\",\n \"rustc_feature\",\n \"rustc_fluent_macro\",\n \"rustc_hir\",\n \"rustc_index\",\n \"rustc_infer\",\n \"rustc_macros\",\n \"rustc_middle\",\n \"rustc_parse_format\",\n \"rustc_session\",\n \"rustc_span\",\n \"rustc_target\",\n \"rustc_trait_selection\",\n \"rustc_type_ir\",\n \"tracing\",\n \"unicode-security\",\n]\n\n[[package]]\nname = \"rustc_lint_defs\"\nversion = \"0.0.0\"\ndependencies = [\n \"rustc_ast\",\n \"rustc_data_structures\",\n \"rustc_error_messages\",\n \"rustc_hir\",\n \"rustc_macros\",\n \"rustc_serialize\",\n \"rustc_span\",\n \"rustc_target\",\n \"serde\",\n]\n\n[[package]]\nname = \"rustc_llvm\"\nversion = \"0.0.0\"\ndependencies = [\n \"cc\",\n \"libc\",\n]\n\n[[package]]\nname = \"rustc_log\"\nversion = \"0.0.0\"\ndependencies = [\n \"rustc_span\",\n \"tracing\",\n \"tracing-core\",\n \"tracing-subscriber\",\n \"tracing-tree\",\n]\n\n[[package]]\nname = \"rustc_macros\"\nversion = \"0.1.0\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.27\",\n \"synstructure 0.13.0\",\n]\n\n[[package]]\nname = \"rustc_metadata\"\nversion = \"0.0.0\"\ndependencies = [\n \"bitflags 1.3.2\",\n \"libloading\",\n \"odht\",\n \"rustc_ast\",\n \"rustc_attr\",\n \"rustc_data_structures\",\n \"rustc_errors\",\n \"rustc_expand\",\n \"rustc_feature\",\n \"rustc_fluent_macro\",\n \"rustc_fs_util\",\n \"rustc_hir\",\n \"rustc_hir_pretty\",\n \"rustc_index\",\n \"rustc_macros\",\n \"rustc_middle\",\n \"rustc_serialize\",\n \"rustc_session\",\n \"rustc_span\",\n \"rustc_target\",\n \"rustc_type_ir\",\n \"snap\",\n \"tempfile\",\n \"tracing\",\n]\n\n[[package]]\nname = \"rustc_middle\"\nversion = \"0.0.0\"\ndependencies = [\n \"bitflags 1.3.2\",\n \"derive_more\",\n \"either\",\n \"field-offset\",\n \"gsgdt\",\n \"measureme\",\n \"polonius-engine\",\n \"rustc-rayon\",\n \"rustc-rayon-core\",\n \"rustc_apfloat\",\n \"rustc_arena\",\n \"rustc_ast\",\n \"rustc_attr\",\n \"rustc_data_structures\",\n \"rustc_error_messages\",\n \"rustc_errors\",\n \"rustc_feature\",\n \"rustc_fluent_macro\",\n \"rustc_graphviz\",\n \"rustc_hir\",\n \"rustc_index\",\n \"rustc_macros\",\n \"rustc_query_system\",\n \"rustc_serialize\",\n \"rustc_session\",\n \"rustc_span\",\n \"rustc_target\",\n \"rustc_type_ir\",\n \"smallvec\",\n \"thin-vec\",\n \"tracing\",\n]\n\n[[package]]\nname = \"rustc_mir_build\"\nversion = \"0.0.0\"\ndependencies = [\n \"either\",\n \"rustc_apfloat\",\n \"rustc_arena\",\n \"rustc_ast\",\n \"rustc_data_structures\",\n \"rustc_errors\",\n \"rustc_fluent_macro\",\n \"rustc_hir\",\n \"rustc_index\",\n \"rustc_infer\",\n \"rustc_macros\",\n \"rustc_middle\",\n \"rustc_serialize\",\n \"rustc_session\",\n \"rustc_span\",\n \"rustc_target\",\n \"rustc_trait_selection\",\n \"smallvec\",\n \"tracing\",\n]\n\n[[package]]\nname = \"rustc_mir_dataflow\"\nversion = \"0.0.0\"\ndependencies = [\n \"polonius-engine\",\n \"regex\",\n \"rustc_ast\",\n \"rustc_data_structures\",\n \"rustc_errors\",\n \"rustc_fluent_macro\",\n \"rustc_graphviz\",\n \"rustc_hir\",\n \"rustc_index\",\n \"rustc_macros\",\n \"rustc_middle\",\n \"rustc_serialize\",\n \"rustc_span\",\n \"rustc_target\",\n \"smallvec\",\n \"tracing\",\n]\n\n[[package]]\nname = \"rustc_mir_transform\"\nversion = \"0.0.0\"\ndependencies = [\n \"coverage_test_macros\",\n \"either\",\n \"itertools\",\n \"rustc_ast\",\n \"rustc_attr\",\n \"rustc_const_eval\",\n \"rustc_data_structures\",\n \"rustc_errors\",\n \"rustc_fluent_macro\",\n \"rustc_hir\",\n \"rustc_index\",\n \"rustc_macros\",\n \"rustc_middle\",\n \"rustc_mir_dataflow\",\n \"rustc_serialize\",\n \"rustc_session\",\n \"rustc_span\",\n \"rustc_target\",\n \"rustc_trait_selection\",\n \"smallvec\",\n \"tracing\",\n]\n\n[[package]]\nname = \"rustc_monomorphize\"\nversion = \"0.0.0\"\ndependencies = [\n \"rustc_data_structures\",\n \"rustc_errors\",\n \"rustc_fluent_macro\",\n \"rustc_hir\",\n \"rustc_index\",\n \"rustc_macros\",\n \"rustc_middle\",\n \"rustc_session\",\n \"rustc_span\",\n \"rustc_target\",\n \"serde\",\n \"serde_json\",\n \"tracing\",\n]\n\n[[package]]\nname = \"rustc_parse\"\nversion = \"0.0.0\"\ndependencies = [\n \"bitflags 1.3.2\",\n \"rustc_ast\",\n \"rustc_ast_pretty\",\n \"rustc_data_structures\",\n \"rustc_errors\",\n \"rustc_feature\",\n \"rustc_fluent_macro\",\n \"rustc_lexer\",\n \"rustc_macros\",\n \"rustc_session\",\n \"rustc_span\",\n \"thin-vec\",\n \"tracing\",\n \"unicode-normalization\",\n \"unicode-width\",\n]\n\n[[package]]\nname = \"rustc_parse_format\"\nversion = \"0.0.0\"\ndependencies = [\n \"rustc_data_structures\",\n \"rustc_lexer\",\n]\n\n[[package]]\nname = \"rustc_passes\"\nversion = \"0.0.0\"\ndependencies = [\n \"itertools\",\n \"rustc_ast\",\n \"rustc_ast_pretty\",\n \"rustc_attr\",\n \"rustc_data_structures\",\n \"rustc_errors\",\n \"rustc_expand\",\n \"rustc_feature\",\n \"rustc_fluent_macro\",\n \"rustc_hir\",\n \"rustc_index\",\n \"rustc_lexer\",\n \"rustc_macros\",\n \"rustc_middle\",\n \"rustc_serialize\",\n \"rustc_session\",\n \"rustc_span\",\n \"rustc_target\",\n \"rustc_trait_selection\",\n \"tracing\",\n]\n\n[[package]]\nname = \"rustc_plugin_impl\"\nversion = \"0.0.0\"\ndependencies = [\n \"libloading\",\n \"rustc_ast\",\n \"rustc_errors\",\n \"rustc_fluent_macro\",\n \"rustc_lint\",\n \"rustc_macros\",\n \"rustc_metadata\",\n \"rustc_session\",\n \"rustc_span\",\n]\n\n[[package]]\nname = \"rustc_privacy\"\nversion = \"0.0.0\"\ndependencies = [\n \"rustc_ast\",\n \"rustc_attr\",\n \"rustc_data_structures\",\n \"rustc_errors\",\n \"rustc_fluent_macro\",\n \"rustc_hir\",\n \"rustc_hir_analysis\",\n \"rustc_macros\",\n \"rustc_middle\",\n \"rustc_session\",\n \"rustc_span\",\n \"tracing\",\n]\n\n[[package]]\nname = \"rustc_query_impl\"\nversion = \"0.0.0\"\ndependencies = [\n \"field-offset\",\n \"measureme\",\n \"memoffset\",\n \"rustc-rayon-core\",\n \"rustc_ast\",\n \"rustc_data_structures\",\n \"rustc_errors\",\n \"rustc_hir\",\n \"rustc_index\",\n \"rustc_macros\",\n \"rustc_middle\",\n \"rustc_query_system\",\n \"rustc_serialize\",\n \"rustc_session\",\n \"rustc_span\",\n \"thin-vec\",\n \"tracing\",\n]\n\n[[package]]\nname = \"rustc_query_system\"\nversion = \"0.0.0\"\ndependencies = [\n \"parking_lot 0.11.2\",\n \"rustc-rayon-core\",\n \"rustc_ast\",\n \"rustc_data_structures\",\n \"rustc_errors\",\n \"rustc_feature\",\n \"rustc_fluent_macro\",\n \"rustc_hir\",\n \"rustc_index\",\n \"rustc_macros\",\n \"rustc_serialize\",\n \"rustc_session\",\n \"rustc_span\",\n \"rustc_target\",\n \"rustc_type_ir\",\n \"smallvec\",\n \"thin-vec\",\n \"tracing\",\n]\n\n[[package]]\nname = \"rustc_resolve\"\nversion = \"0.0.0\"\ndependencies = [\n \"bitflags 1.3.2\",\n \"pulldown-cmark\",\n \"rustc_arena\",\n \"rustc_ast\",\n \"rustc_ast_pretty\",\n \"rustc_attr\",\n \"rustc_data_structures\",\n \"rustc_errors\",\n \"rustc_expand\",\n \"rustc_feature\",\n \"rustc_fluent_macro\",\n \"rustc_hir\",\n \"rustc_index\",\n \"rustc_macros\",\n \"rustc_metadata\",\n \"rustc_middle\",\n \"rustc_query_system\",\n \"rustc_session\",\n \"rustc_span\",\n \"smallvec\",\n \"thin-vec\",\n \"tracing\",\n]\n\n[[package]]\nname = \"rustc_serialize\"\nversion = \"0.0.0\"\ndependencies = [\n \"indexmap 2.0.0\",\n \"rustc_macros\",\n \"smallvec\",\n \"tempfile\",\n \"thin-vec\",\n]\n\n[[package]]\nname = \"rustc_session\"\nversion = \"0.0.0\"\ndependencies = [\n \"bitflags 1.3.2\",\n \"getopts\",\n \"libc\",\n \"rustc_ast\",\n \"rustc_data_structures\",\n \"rustc_errors\",\n \"rustc_feature\",\n \"rustc_fluent_macro\",\n \"rustc_fs_util\",\n \"rustc_hir\",\n \"rustc_lint_defs\",\n \"rustc_macros\",\n \"rustc_serialize\",\n \"rustc_span\",\n \"rustc_target\",\n \"smallvec\",\n \"termize\",\n \"tracing\",\n \"windows\",\n]\n\n[[package]]\nname = \"rustc_smir\"\nversion = \"0.0.0\"\ndependencies = [\n \"rustc_hir\",\n \"rustc_middle\",\n \"rustc_span\",\n \"rustc_target\",\n \"scoped-tls\",\n \"tracing\",\n]\n\n[[package]]\nname = \"rustc_span\"\nversion = \"0.0.0\"\ndependencies = [\n \"cfg-if\",\n \"indexmap 2.0.0\",\n \"md-5\",\n \"rustc_arena\",\n \"rustc_data_structures\",\n \"rustc_index\",\n \"rustc_macros\",\n \"rustc_serialize\",\n \"scoped-tls\",\n \"sha1\",\n \"sha2\",\n \"tracing\",\n \"unicode-width\",\n]\n\n[[package]]\nname = \"rustc_symbol_mangling\"\nversion = \"0.0.0\"\ndependencies = [\n \"bitflags 1.3.2\",\n \"punycode\",\n \"rustc-demangle\",\n \"rustc_data_structures\",\n \"rustc_errors\",\n \"rustc_fluent_macro\",\n \"rustc_hir\",\n \"rustc_macros\",\n \"rustc_middle\",\n \"rustc_session\",\n \"rustc_span\",\n \"rustc_target\",\n \"tracing\",\n \"twox-hash\",\n]\n\n[[package]]\nname = \"rustc_target\"\nversion = \"0.0.0\"\ndependencies = [\n \"bitflags 1.3.2\",\n \"object\",\n \"rustc_abi\",\n \"rustc_data_structures\",\n \"rustc_feature\",\n \"rustc_fs_util\",\n \"rustc_macros\",\n \"rustc_serialize\",\n \"rustc_span\",\n \"serde_json\",\n \"tracing\",\n]\n\n[[package]]\nname = \"rustc_tools_util\"\nversion = \"0.3.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8ba09476327c4b70ccefb6180f046ef588c26a24cf5d269a9feba316eb4f029f\"\n\n[[package]]\nname = \"rustc_trait_selection\"\nversion = \"0.0.0\"\ndependencies = [\n \"rustc_ast\",\n \"rustc_attr\",\n \"rustc_data_structures\",\n \"rustc_errors\",\n \"rustc_fluent_macro\",\n \"rustc_hir\",\n \"rustc_index\",\n \"rustc_infer\",\n \"rustc_macros\",\n \"rustc_middle\",\n \"rustc_parse_format\",\n \"rustc_query_system\",\n \"rustc_serialize\",\n \"rustc_session\",\n \"rustc_span\",\n \"rustc_target\",\n \"rustc_transmute\",\n \"smallvec\",\n \"tracing\",\n]\n\n[[package]]\nname = \"rustc_traits\"\nversion = \"0.0.0\"\ndependencies = [\n \"rustc_ast\",\n \"rustc_data_structures\",\n \"rustc_hir\",\n \"rustc_infer\",\n \"rustc_middle\",\n \"rustc_span\",\n \"rustc_target\",\n \"rustc_trait_selection\",\n \"smallvec\",\n \"tracing\",\n]\n\n[[package]]\nname = \"rustc_transmute\"\nversion = \"0.1.0\"\ndependencies = [\n \"itertools\",\n \"rustc_data_structures\",\n \"rustc_hir\",\n \"rustc_infer\",\n \"rustc_macros\",\n \"rustc_middle\",\n \"rustc_span\",\n \"rustc_target\",\n \"tracing\",\n]\n\n[[package]]\nname = \"rustc_ty_utils\"\nversion = \"0.0.0\"\ndependencies = [\n \"itertools\",\n \"rustc_data_structures\",\n \"rustc_errors\",\n \"rustc_fluent_macro\",\n \"rustc_hir\",\n \"rustc_index\",\n \"rustc_infer\",\n \"rustc_macros\",\n \"rustc_middle\",\n \"rustc_session\",\n \"rustc_span\",\n \"rustc_target\",\n \"rustc_trait_selection\",\n \"rustc_type_ir\",\n \"tracing\",\n]\n\n[[package]]\nname = \"rustc_type_ir\"\nversion = \"0.0.0\"\ndependencies = [\n \"bitflags 1.3.2\",\n \"rustc_data_structures\",\n \"rustc_index\",\n \"rustc_macros\",\n \"rustc_serialize\",\n \"smallvec\",\n]\n\n[[package]]\nname = \"rustc_version\"\nversion = \"0.4.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"bfa0f585226d2e68097d4f95d113b15b83a82e819ab25717ec0590d9584ef366\"\ndependencies = [\n \"semver\",\n]\n\n[[package]]\nname = \"rustdoc\"\nversion = \"0.0.0\"\ndependencies = [\n \"arrayvec\",\n \"askama\",\n \"expect-test\",\n \"itertools\",\n \"minifier\",\n \"once_cell\",\n \"regex\",\n \"rustdoc-json-types\",\n \"serde\",\n \"serde_json\",\n \"smallvec\",\n \"tempfile\",\n \"threadpool\",\n \"tracing\",\n \"tracing-subscriber\",\n \"tracing-tree\",\n]\n\n[[package]]\nname = \"rustdoc-gui-test\"\nversion = \"0.1.0\"\ndependencies = [\n \"build_helper\",\n \"compiletest\",\n \"getopts\",\n \"walkdir\",\n]\n\n[[package]]\nname = \"rustdoc-json-types\"\nversion = \"0.1.0\"\ndependencies = [\n \"bincode\",\n \"rustc-hash\",\n \"serde\",\n \"serde_json\",\n]\n\n[[package]]\nname = \"rustdoc-themes\"\nversion = \"0.1.0\"\n\n[[package]]\nname = \"rustdoc-tool\"\nversion = \"0.0.0\"\ndependencies = [\n \"rustdoc\",\n]\n\n[[package]]\nname = \"rustfix\"\nversion = \"0.6.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ecd2853d9e26988467753bd9912c3a126f642d05d229a4b53f5752ee36c56481\"\ndependencies = [\n \"anyhow\",\n \"log\",\n \"serde\",\n \"serde_json\",\n]\n\n[[package]]\nname = \"rustfmt-config_proc_macro\"\nversion = \"0.3.0\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"serde\",\n \"syn 2.0.27\",\n]\n\n[[package]]\nname = \"rustfmt-nightly\"\nversion = \"1.6.0\"\ndependencies = [\n \"annotate-snippets\",\n \"anyhow\",\n \"bytecount\",\n \"cargo_metadata\",\n \"clap\",\n \"diff\",\n \"dirs\",\n \"env_logger 0.10.0\",\n \"getopts\",\n \"ignore\",\n \"itertools\",\n \"lazy_static\",\n \"log\",\n \"regex\",\n \"rustfmt-config_proc_macro\",\n \"serde\",\n \"serde_json\",\n \"term\",\n \"thiserror\",\n \"toml 0.7.5\",\n \"unicode-segmentation\",\n \"unicode-width\",\n \"unicode_categories\",\n]\n\n[[package]]\nname = \"rustix\"\nversion = \"0.37.22\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8818fa822adcc98b18fedbb3632a6a33213c070556b5aa7c4c8cc21cff565c4c\"\ndependencies = [\n \"bitflags 1.3.2\",\n \"errno\",\n \"io-lifetimes\",\n \"libc\",\n \"linux-raw-sys 0.3.8\",\n \"windows-sys 0.48.0\",\n]\n\n[[package]]\nname = \"rustix\"\nversion = \"0.38.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"aabcb0461ebd01d6b79945797c27f8529082226cb630a9865a71870ff63532a4\"\ndependencies = [\n \"bitflags 2.3.3\",\n \"errno\",\n \"libc\",\n \"linux-raw-sys 0.4.3\",\n \"windows-sys 0.48.0\",\n]\n\n[[package]]\nname = \"rustversion\"\nversion = \"1.0.12\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"4f3208ce4d8448b3f3e7d168a73f5e0c43a61e32930de3bceeccedb388b6bf06\"\n\n[[package]]\nname = \"ruzstd\"\nversion = \"0.3.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"9a15e661f0f9dac21f3494fe5d23a6338c0ac116a2d22c2b63010acd89467ffe\"\ndependencies = [\n \"byteorder\",\n \"thiserror\",\n \"twox-hash\",\n]\n\n[[package]]\nname = \"ryu\"\nversion = \"1.0.13\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f91339c0467de62360649f8d3e185ca8de4224ff281f66000de5eb2a77a79041\"\n\n[[package]]\nname = \"same-file\"\nversion = \"1.0.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"93fc1dc3aaa9bfed95e02e6eadabb4baf7e3078b0bd1b4d7b6b0b68378900502\"\ndependencies = [\n \"winapi-util\",\n]\n\n[[package]]\nname = \"schannel\"\nversion = \"0.1.21\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"713cfb06c7059f3588fb8044c0fad1d09e3c01d225e25b9220dbfdcf16dbb1b3\"\ndependencies = [\n \"windows-sys 0.42.0\",\n]\n\n[[package]]\nname = \"scoped-tls\"\nversion = \"1.0.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e1cf6437eb19a8f4a6cc0f7dca544973b0b78843adbfeb3683d1a94a0024a294\"\n\n[[package]]\nname = \"scopeguard\"\nversion = \"1.1.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d29ab0c6d3fc0ee92fe66e2d99f700eab17a8d57d1c1d3b748380fb20baa78cd\"\n\n[[package]]\nname = \"security-framework\"\nversion = \"2.9.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1fc758eb7bffce5b308734e9b0c1468893cae9ff70ebf13e7090be8dcbcc83a8\"\ndependencies = [\n \"bitflags 1.3.2\",\n \"core-foundation\",\n \"core-foundation-sys\",\n \"libc\",\n \"security-framework-sys\",\n]\n\n[[package]]\nname = \"security-framework-sys\"\nversion = \"2.9.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f51d0c0d83bec45f16480d0ce0058397a69e48fcdc52d1dc8855fb68acbd31a7\"\ndependencies = [\n \"core-foundation-sys\",\n \"libc\",\n]\n\n[[package]]\nname = \"self_cell\"\nversion = \"0.10.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1ef965a420fe14fdac7dd018862966a4c14094f900e1650bbc71ddd7d580c8af\"\n\n[[package]]\nname = \"semver\"\nversion = \"1.0.17\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"bebd363326d05ec3e2f532ab7660680f3b02130d780c299bca73469d521bc0ed\"\ndependencies = [\n \"serde\",\n]\n\n[[package]]\nname = \"serde\"\nversion = \"1.0.164\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"9e8c8cf938e98f769bc164923b06dce91cea1751522f46f8466461af04c9027d\"\ndependencies = [\n \"serde_derive\",\n]\n\n[[package]]\nname = \"serde_derive\"\nversion = \"1.0.164\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d9735b638ccc51c28bf6914d90a2e9725b377144fc612c49a611fddd1b631d68\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.27\",\n]\n\n[[package]]\nname = \"serde_json\"\nversion = \"1.0.99\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"46266871c240a00b8f503b877622fe33430b3c7d963bdc0f2adc511e54a1eae3\"\ndependencies = [\n \"indexmap 2.0.0\",\n \"itoa\",\n \"ryu\",\n \"serde\",\n]\n\n[[package]]\nname = \"serde_spanned\"\nversion = \"0.6.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"96426c9936fd7a0124915f9185ea1d20aa9445cc9821142f0a73bc9207a2e186\"\ndependencies = [\n \"serde\",\n]\n\n[[package]]\nname = \"serde_urlencoded\"\nversion = \"0.7.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d3491c14715ca2294c4d6a88f15e84739788c1d030eed8c110436aafdaa2f3fd\"\ndependencies = [\n \"form_urlencoded\",\n \"itoa\",\n \"ryu\",\n \"serde\",\n]\n\n[[package]]\nname = \"sha1\"\nversion = \"0.10.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f04293dc80c3993519f2d7f6f511707ee7094fe0c6d3406feb330cdb3540eba3\"\ndependencies = [\n \"cfg-if\",\n \"cpufeatures\",\n \"digest\",\n]\n\n[[package]]\nname = \"sha2\"\nversion = \"0.10.7\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"479fb9d862239e610720565ca91403019f2f00410f1864c5aa7479b950a76ed8\"\ndependencies = [\n \"cfg-if\",\n \"cpufeatures\",\n \"digest\",\n]\n\n[[package]]\nname = \"sharded-slab\"\nversion = \"0.1.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"900fba806f70c630b0a382d0d825e17a0f19fcd059a2ade1ff237bcddf446b31\"\ndependencies = [\n \"lazy_static\",\n]\n\n[[package]]\nname = \"shell-escape\"\nversion = \"0.1.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"45bb67a18fa91266cc7807181f62f9178a6873bfad7dc788c42e6430db40184f\"\n\n[[package]]\nname = \"shlex\"\nversion = \"1.1.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"43b2853a4d09f215c24cc5489c992ce46052d359b5109343cbafbf26bc62f8a3\"\n\n[[package]]\nname = \"siphasher\"\nversion = \"0.3.10\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"7bd3e3206899af3f8b12af284fafc038cc1dc2b41d1b89dd17297221c5d225de\"\n\n[[package]]\nname = \"slab\"\nversion = \"0.4.8\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"6528351c9bc8ab22353f9d776db39a20288e8d6c37ef8cfe3317cf875eecfc2d\"\ndependencies = [\n \"autocfg\",\n]\n\n[[package]]\nname = \"smallvec\"\nversion = \"1.11.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"62bb4feee49fdd9f707ef802e22365a35de4b7b299de4763d44bfea899442ff9\"\n\n[[package]]\nname = \"snap\"\nversion = \"1.1.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"5e9f0ab6ef7eb7353d9119c170a436d1bf248eea575ac42d19d12f4e34130831\"\n\n[[package]]\nname = \"socket2\"\nversion = \"0.4.9\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"64a4a911eed85daf18834cfaa86a79b7d266ff93ff5ba14005426219480ed662\"\ndependencies = [\n \"libc\",\n \"winapi\",\n]\n\n[[package]]\nname = \"spdx-expression\"\nversion = \"0.5.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"53d7ac03c67c572d85049d6db815e20a4a19b41b3d5cca732ac582342021ad77\"\ndependencies = [\n \"nom\",\n \"serde\",\n \"thiserror\",\n \"tracing\",\n]\n\n[[package]]\nname = \"spdx-rs\"\nversion = \"0.5.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"74f1f9cfa402cd27dd022fd1943f0f969b10dda75d5e50e3a78ccee9c0188e2a\"\ndependencies = [\n \"chrono\",\n \"log\",\n \"nom\",\n \"serde\",\n \"spdx-expression\",\n \"strum\",\n \"strum_macros\",\n \"thiserror\",\n \"uuid\",\n]\n\n[[package]]\nname = \"stable_deref_trait\"\nversion = \"1.2.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a8f112729512f8e442d81f95a8a7ddf2b7c6b8a1a6f509a95864142b30cab2d3\"\n\n[[package]]\nname = \"stacker\"\nversion = \"0.1.15\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"c886bd4480155fd3ef527d45e9ac8dd7118a898a46530b7b94c3e21866259fce\"\ndependencies = [\n \"cc\",\n \"cfg-if\",\n \"libc\",\n \"psm\",\n \"winapi\",\n]\n\n[[package]]\nname = \"static_assertions\"\nversion = \"1.1.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a2eb9349b6444b326872e140eb1cf5e7c522154d69e7a0ffb0fb81c06b37543f\"\n\n[[package]]\nname = \"std\"\nversion = \"0.0.0\"\ndependencies = [\n \"addr2line\",\n \"alloc\",\n \"cfg-if\",\n \"compiler_builtins\",\n \"core\",\n \"dlmalloc\",\n \"fortanix-sgx-abi\",\n \"hashbrown 0.14.0\",\n \"hermit-abi 0.3.2\",\n \"libc\",\n \"miniz_oxide\",\n \"object\",\n \"panic_abort\",\n \"panic_unwind\",\n \"profiler_builtins\",\n \"rand\",\n \"rand_xorshift\",\n \"rustc-demangle\",\n \"std_detect\",\n \"unwind\",\n \"wasi\",\n]\n\n[[package]]\nname = \"std_detect\"\nversion = \"0.1.5\"\ndependencies = [\n \"cfg-if\",\n \"compiler_builtins\",\n \"libc\",\n \"rustc-std-workspace-alloc\",\n \"rustc-std-workspace-core\",\n]\n\n[[package]]\nname = \"string_cache\"\nversion = \"0.8.7\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f91138e76242f575eb1d3b38b4f1362f10d3a43f47d182a5b359af488a02293b\"\ndependencies = [\n \"new_debug_unreachable\",\n \"once_cell\",\n \"parking_lot 0.12.1\",\n \"phf_shared\",\n \"precomputed-hash\",\n \"serde\",\n]\n\n[[package]]\nname = \"string_cache_codegen\"\nversion = \"0.5.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"6bb30289b722be4ff74a408c3cc27edeaad656e06cb1fe8fa9231fa59c728988\"\ndependencies = [\n \"phf_generator\",\n \"phf_shared\",\n \"proc-macro2\",\n \"quote\",\n]\n\n[[package]]\nname = \"strsim\"\nversion = \"0.10.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"73473c0e59e6d5812c5dfe2a064a6444949f089e20eec9a2e5506596494e4623\"\n\n[[package]]\nname = \"strum\"\nversion = \"0.24.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"063e6045c0e62079840579a7e47a355ae92f60eb74daaf156fb1e84ba164e63f\"\n\n[[package]]\nname = \"strum_macros\"\nversion = \"0.24.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1e385be0d24f186b4ce2f9982191e7101bb737312ad61c1f2f984f34bcf85d59\"\ndependencies = [\n \"heck\",\n \"proc-macro2\",\n \"quote\",\n \"rustversion\",\n \"syn 1.0.109\",\n]\n\n[[package]]\nname = \"suggest-tests\"\nversion = \"0.1.0\"\ndependencies = [\n \"build_helper\",\n \"glob\",\n \"once_cell\",\n]\n\n[[package]]\nname = \"syn\"\nversion = \"1.0.109\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"72b64191b275b66ffe2469e8af2c1cfe3bafa67b529ead792a6d0160888b4237\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"unicode-ident\",\n]\n\n[[package]]\nname = \"syn\"\nversion = \"2.0.27\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b60f673f44a8255b9c8c657daf66a596d435f2da81a555b06dc644d080ba45e0\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"unicode-ident\",\n]\n\n[[package]]\nname = \"synstructure\"\nversion = \"0.12.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f36bdaa60a83aca3921b5259d5400cbf5e90fc51931376a9bd4a0eb79aa7210f\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn 1.0.109\",\n \"unicode-xid\",\n]\n\n[[package]]\nname = \"synstructure\"\nversion = \"0.13.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"285ba80e733fac80aa4270fbcdf83772a79b80aa35c97075320abfee4a915b06\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.27\",\n \"unicode-xid\",\n]\n\n[[package]]\nname = \"sysinfo\"\nversion = \"0.29.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"9557d0845b86eea8182f7b10dff120214fb6cd9fd937b6f4917714e546a38695\"\ndependencies = [\n \"cfg-if\",\n \"core-foundation-sys\",\n \"libc\",\n \"ntapi\",\n \"once_cell\",\n \"winapi\",\n]\n\n[[package]]\nname = \"sysroot\"\nversion = \"0.0.0\"\ndependencies = [\n \"proc_macro\",\n \"std\",\n \"test\",\n]\n\n[[package]]\nname = \"tar\"\nversion = \"0.4.38\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"4b55807c0344e1e6c04d7c965f5289c39a8d94ae23ed5c0b57aabac549f871c6\"\ndependencies = [\n \"filetime\",\n \"libc\",\n \"xattr\",\n]\n\n[[package]]\nname = \"tempfile\"\nversion = \"3.6.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"31c0432476357e58790aaa47a8efb0c5138f137343f3b5f23bd36a27e3b0a6d6\"\ndependencies = [\n \"autocfg\",\n \"cfg-if\",\n \"fastrand\",\n \"redox_syscall 0.3.5\",\n \"rustix 0.37.22\",\n \"windows-sys 0.48.0\",\n]\n\n[[package]]\nname = \"tendril\"\nversion = \"0.4.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d24a120c5fc464a3458240ee02c299ebcb9d67b5249c8848b09d639dca8d7bb0\"\ndependencies = [\n \"futf\",\n \"mac\",\n \"utf-8\",\n]\n\n[[package]]\nname = \"term\"\nversion = \"0.7.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"c59df8ac95d96ff9bede18eb7300b0fda5e5d8d90960e76f8e14ae765eedbf1f\"\ndependencies = [\n \"dirs-next\",\n \"rustversion\",\n \"winapi\",\n]\n\n[[package]]\nname = \"termcolor\"\nversion = \"1.2.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"be55cf8942feac5c765c2c993422806843c9a9a45d4d5c407ad6dd2ea95eb9b6\"\ndependencies = [\n \"winapi-util\",\n]\n\n[[package]]\nname = \"terminal_size\"\nversion = \"0.2.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8e6bf6f19e9f8ed8d4048dc22981458ebcf406d67e94cd422e5ecd73d63b3237\"\ndependencies = [\n \"rustix 0.37.22\",\n \"windows-sys 0.48.0\",\n]\n\n[[package]]\nname = \"termize\"\nversion = \"0.1.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1706be6b564323ce7092f5f7e6b118a14c8ef7ed0e69c8c5329c914a9f101295\"\ndependencies = [\n \"libc\",\n \"winapi\",\n]\n\n[[package]]\nname = \"test\"\nversion = \"0.0.0\"\ndependencies = [\n \"core\",\n \"getopts\",\n \"panic_abort\",\n \"panic_unwind\",\n \"std\",\n]\n\n[[package]]\nname = \"tester\"\nversion = \"0.9.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"89e8bf7e0eb2dd7b4228cc1b6821fc5114cd6841ae59f652a85488c016091e5f\"\ndependencies = [\n \"cfg-if\",\n \"getopts\",\n \"libc\",\n \"num_cpus\",\n \"term\",\n]\n\n[[package]]\nname = \"thin-vec\"\nversion = \"0.2.12\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"aac81b6fd6beb5884b0cf3321b8117e6e5d47ecb6fc89f414cfdcca8b2fe2dd8\"\n\n[[package]]\nname = \"thiserror\"\nversion = \"1.0.40\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"978c9a314bd8dc99be594bc3c175faaa9794be04a5a5e153caba6915336cebac\"\ndependencies = [\n \"thiserror-impl\",\n]\n\n[[package]]\nname = \"thiserror-impl\"\nversion = \"1.0.40\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f9456a42c5b0d803c8cd86e73dd7cc9edd429499f37a3550d286d5e86720569f\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.27\",\n]\n\n[[package]]\nname = \"thorin-dwp\"\nversion = \"0.6.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"98c040e1340b889d4180c64e1d787efa9c32cb1617757e101480b61238b0d927\"\ndependencies = [\n \"gimli 0.26.2\",\n \"hashbrown 0.12.3\",\n \"object\",\n \"tracing\",\n]\n\n[[package]]\nname = \"thread_local\"\nversion = \"1.1.7\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3fdd6f064ccff2d6567adcb3873ca630700f00b5ad3f060c25b5dcfd9a4ce152\"\ndependencies = [\n \"cfg-if\",\n \"once_cell\",\n]\n\n[[package]]\nname = \"threadpool\"\nversion = \"1.8.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d050e60b33d41c19108b32cea32164033a9013fe3b46cbd4457559bfbf77afaa\"\ndependencies = [\n \"num_cpus\",\n]\n\n[[package]]\nname = \"tidy\"\nversion = \"0.1.0\"\ndependencies = [\n \"cargo-platform\",\n \"cargo_metadata\",\n \"ignore\",\n \"lazy_static\",\n \"miropt-test-tools\",\n \"regex\",\n \"semver\",\n \"termcolor\",\n \"walkdir\",\n]\n\n[[package]]\nname = \"tier-check\"\nversion = \"0.1.0\"\n\n[[package]]\nname = \"time\"\nversion = \"0.3.22\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ea9e1b3cf1243ae005d9e74085d4d542f3125458f3a81af210d901dcd7411efd\"\ndependencies = [\n \"itoa\",\n \"serde\",\n \"time-core\",\n \"time-macros\",\n]\n\n[[package]]\nname = \"time-core\"\nversion = \"0.1.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"7300fbefb4dadc1af235a9cef3737cea692a9d97e1b9cbcd4ebdae6f8868e6fb\"\n\n[[package]]\nname = \"time-macros\"\nversion = \"0.2.9\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"372950940a5f07bf38dbe211d7283c9e6d7327df53794992d293e534c733d09b\"\ndependencies = [\n \"time-core\",\n]\n\n[[package]]\nname = \"tinystr\"\nversion = \"0.7.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"7ac3f5b6856e931e15e07b478e98c8045239829a65f9156d4fa7e7788197a5ef\"\ndependencies = [\n \"displaydoc\",\n \"zerovec\",\n]\n\n[[package]]\nname = \"tinyvec\"\nversion = \"1.6.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"87cc5ceb3875bb20c2890005a4e226a4651264a5c75edb2421b52861a0a0cb50\"\ndependencies = [\n \"tinyvec_macros\",\n]\n\n[[package]]\nname = \"tinyvec_macros\"\nversion = \"0.1.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1f3ccbac311fea05f86f61904b462b55fb3df8837a366dfc601a0161d0532f20\"\n\n[[package]]\nname = \"tokio\"\nversion = \"1.29.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"532826ff75199d5833b9d2c5fe410f29235e25704ee5f0ef599fb51c21f4a4da\"\ndependencies = [\n \"autocfg\",\n \"backtrace\",\n \"bytes\",\n \"libc\",\n \"mio\",\n \"num_cpus\",\n \"pin-project-lite\",\n \"socket2\",\n \"windows-sys 0.48.0\",\n]\n\n[[package]]\nname = \"tokio-native-tls\"\nversion = \"0.3.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"bbae76ab933c85776efabc971569dd6119c580d8f5d448769dec1764bf796ef2\"\ndependencies = [\n \"native-tls\",\n \"tokio\",\n]\n\n[[package]]\nname = \"tokio-util\"\nversion = \"0.7.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f988a1a1adc2fb21f9c12aa96441da33a1728193ae0b95d2be22dbd17fcb4e5c\"\ndependencies = [\n \"bytes\",\n \"futures-core\",\n \"futures-sink\",\n \"pin-project-lite\",\n \"tokio\",\n \"tracing\",\n]\n\n[[package]]\nname = \"toml\"\nversion = \"0.5.11\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f4f7f0dd8d50a853a531c426359045b1998f04219d88799810762cd4ad314234\"\ndependencies = [\n \"serde\",\n]\n\n[[package]]\nname = \"toml\"\nversion = \"0.7.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1ebafdf5ad1220cb59e7d17cf4d2c72015297b75b19a10472f99b89225089240\"\ndependencies = [\n \"serde\",\n \"serde_spanned\",\n \"toml_datetime\",\n \"toml_edit\",\n]\n\n[[package]]\nname = \"toml_datetime\"\nversion = \"0.6.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"7cda73e2f1397b1262d6dfdcef8aafae14d1de7748d66822d3bfeeb6d03e5e4b\"\ndependencies = [\n \"serde\",\n]\n\n[[package]]\nname = \"toml_edit\"\nversion = \"0.19.11\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"266f016b7f039eec8a1a80dfe6156b633d208b9fccca5e4db1d6775b0c4e34a7\"\ndependencies = [\n \"indexmap 2.0.0\",\n \"serde\",\n \"serde_spanned\",\n \"toml_datetime\",\n \"winnow\",\n]\n\n[[package]]\nname = \"topological-sort\"\nversion = \"0.2.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ea68304e134ecd095ac6c3574494fc62b909f416c4fca77e440530221e549d3d\"\n\n[[package]]\nname = \"tower-service\"\nversion = \"0.3.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b6bc1c9ce2b5135ac7f93c72918fc37feb872bdc6a5533a8b85eb4b86bfdae52\"\n\n[[package]]\nname = \"tracing\"\nversion = \"0.1.37\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8ce8c33a8d48bd45d624a6e523445fd21ec13d3653cd51f681abf67418f54eb8\"\ndependencies = [\n \"cfg-if\",\n \"pin-project-lite\",\n \"tracing-attributes\",\n \"tracing-core\",\n]\n\n[[package]]\nname = \"tracing-attributes\"\nversion = \"0.1.26\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"5f4f31f56159e98206da9efd823404b79b6ef3143b4a7ab76e67b1751b25a4ab\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.27\",\n]\n\n[[package]]\nname = \"tracing-core\"\nversion = \"0.1.30\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"24eb03ba0eab1fd845050058ce5e616558e8f8d8fca633e6b163fe25c797213a\"\ndependencies = [\n \"once_cell\",\n \"valuable\",\n]\n\n[[package]]\nname = \"tracing-error\"\nversion = \"0.2.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d686ec1c0f384b1277f097b2f279a2ecc11afe8c133c1aabf036a27cb4cd206e\"\ndependencies = [\n \"tracing\",\n \"tracing-subscriber\",\n]\n\n[[package]]\nname = \"tracing-log\"\nversion = \"0.1.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"78ddad33d2d10b1ed7eb9d1f518a5674713876e97e5bb9b7345a7984fbb4f922\"\ndependencies = [\n \"lazy_static\",\n \"log\",\n \"tracing-core\",\n]\n\n[[package]]\nname = \"tracing-subscriber\"\nversion = \"0.3.17\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"30a651bc37f915e81f087d86e62a18eec5f79550c7faff886f7090b4ea757c77\"\ndependencies = [\n \"matchers\",\n \"nu-ansi-term\",\n \"once_cell\",\n \"parking_lot 0.12.1\",\n \"regex\",\n \"sharded-slab\",\n \"smallvec\",\n \"thread_local\",\n \"tracing\",\n \"tracing-core\",\n]\n\n[[package]]\nname = \"tracing-tree\"\nversion = \"0.2.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"4f9742d8df709837409dbb22aa25dd7769c260406f20ff48a2320b80a4a6aed0\"\ndependencies = [\n \"atty\",\n \"nu-ansi-term\",\n \"tracing-core\",\n \"tracing-log\",\n \"tracing-subscriber\",\n]\n\n[[package]]\nname = \"try-lock\"\nversion = \"0.2.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3528ecfd12c466c6f163363caf2d02a71161dd5e1cc6ae7b34207ea2d42d81ed\"\n\n[[package]]\nname = \"twox-hash\"\nversion = \"1.6.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"97fee6b57c6a41524a810daee9286c02d7752c4253064d0b05472833a438f675\"\ndependencies = [\n \"cfg-if\",\n \"rand\",\n \"static_assertions\",\n]\n\n[[package]]\nname = \"type-map\"\nversion = \"0.4.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b6d3364c5e96cb2ad1603037ab253ddd34d7fb72a58bdddf4b7350760fc69a46\"\ndependencies = [\n \"rustc-hash\",\n]\n\n[[package]]\nname = \"typenum\"\nversion = \"1.16.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"497961ef93d974e23eb6f433eb5fe1b7930b659f06d12dec6fc44a8f554c0bba\"\n\n[[package]]\nname = \"ucd-parse\"\nversion = \"0.1.10\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"fc2d0556a998f4c55500ce1730901ba32bafbe820068cbdc091421525d61253b\"\ndependencies = [\n \"once_cell\",\n \"regex\",\n]\n\n[[package]]\nname = \"ucd-trie\"\nversion = \"0.1.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"9e79c4d996edb816c91e4308506774452e55e95c3c9de07b6729e17e15a5ef81\"\n\n[[package]]\nname = \"ui_test\"\nversion = \"0.11.7\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"c21899b59f53717dfad29e4f46e5b21a200a1b6888ab86532a07cfc8b48dd78c\"\ndependencies = [\n \"bstr\",\n \"cargo-platform\",\n \"cargo_metadata\",\n \"color-eyre\",\n \"colored\",\n \"crossbeam-channel\",\n \"diff\",\n \"lazy_static\",\n \"regex\",\n \"rustc_version\",\n \"rustfix\",\n \"serde\",\n \"serde_json\",\n \"tempfile\",\n]\n\n[[package]]\nname = \"unic-char-property\"\nversion = \"0.9.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a8c57a407d9b6fa02b4795eb81c5b6652060a15a7903ea981f3d723e6c0be221\"\ndependencies = [\n \"unic-char-range\",\n]\n\n[[package]]\nname = \"unic-char-range\"\nversion = \"0.9.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"0398022d5f700414f6b899e10b8348231abf9173fa93144cbc1a43b9793c1fbc\"\n\n[[package]]\nname = \"unic-common\"\nversion = \"0.9.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"80d7ff825a6a654ee85a63e80f92f054f904f21e7d12da4e22f9834a4aaa35bc\"\n\n[[package]]\nname = \"unic-emoji-char\"\nversion = \"0.9.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"0b07221e68897210270a38bde4babb655869637af0f69407f96053a34f76494d\"\ndependencies = [\n \"unic-char-property\",\n \"unic-char-range\",\n \"unic-ucd-version\",\n]\n\n[[package]]\nname = \"unic-langid\"\nversion = \"0.9.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"398f9ad7239db44fd0f80fe068d12ff22d78354080332a5077dc6f52f14dcf2f\"\ndependencies = [\n \"unic-langid-impl\",\n \"unic-langid-macros\",\n]\n\n[[package]]\nname = \"unic-langid-impl\"\nversion = \"0.9.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e35bfd2f2b8796545b55d7d3fd3e89a0613f68a0d1c8bc28cb7ff96b411a35ff\"\ndependencies = [\n \"tinystr\",\n]\n\n[[package]]\nname = \"unic-langid-macros\"\nversion = \"0.9.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"055e618bf694161ffff0466d95cef3e1a5edc59f6ba1888e97801f2b4ebdc4fe\"\ndependencies = [\n \"proc-macro-hack\",\n \"tinystr\",\n \"unic-langid-impl\",\n \"unic-langid-macros-impl\",\n]\n\n[[package]]\nname = \"unic-langid-macros-impl\"\nversion = \"0.9.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1f5cdec05b907f4e2f6843f4354f4ce6a5bebe1a56df320a49134944477ce4d8\"\ndependencies = [\n \"proc-macro-hack\",\n \"quote\",\n \"syn 1.0.109\",\n \"unic-langid-impl\",\n]\n\n[[package]]\nname = \"unic-ucd-version\"\nversion = \"0.9.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"96bd2f2237fe450fcd0a1d2f5f4e91711124f7857ba2e964247776ebeeb7b0c4\"\ndependencies = [\n \"unic-common\",\n]\n\n[[package]]\nname = \"unicase\"\nversion = \"2.6.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"50f37be617794602aabbeee0be4f259dc1778fabe05e2d67ee8f79326d5cb4f6\"\ndependencies = [\n \"version_check\",\n]\n\n[[package]]\nname = \"unicode-bdd\"\nversion = \"0.1.0\"\ndependencies = [\n \"ucd-parse\",\n]\n\n[[package]]\nname = \"unicode-bidi\"\nversion = \"0.3.13\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"92888ba5573ff080736b3648696b70cafad7d250551175acbaa4e0385b3e1460\"\n\n[[package]]\nname = \"unicode-ident\"\nversion = \"1.0.9\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b15811caf2415fb889178633e7724bad2509101cde276048e013b9def5e51fa0\"\n\n[[package]]\nname = \"unicode-normalization\"\nversion = \"0.1.22\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"5c5713f0fc4b5db668a2ac63cdb7bb4469d8c9fed047b1d0292cc7b0ce2ba921\"\ndependencies = [\n \"tinyvec\",\n]\n\n[[package]]\nname = \"unicode-script\"\nversion = \"0.5.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"7d817255e1bed6dfd4ca47258685d14d2bdcfbc64fdc9e3819bd5848057b8ecc\"\n\n[[package]]\nname = \"unicode-security\"\nversion = \"0.1.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"9ef5756b3097992b934b06608c69f48448a0fbe804bb1e72b982f6d7983e9e63\"\ndependencies = [\n \"unicode-normalization\",\n \"unicode-script\",\n]\n\n[[package]]\nname = \"unicode-segmentation\"\nversion = \"1.10.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1dd624098567895118886609431a7c3b8f516e41d30e0643f03d94592a147e36\"\n\n[[package]]\nname = \"unicode-width\"\nversion = \"0.1.10\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"c0edd1e5b14653f783770bce4a4dabb4a5108a5370a5f5d8cfe8710c361f6c8b\"\ndependencies = [\n \"compiler_builtins\",\n \"rustc-std-workspace-core\",\n \"rustc-std-workspace-std\",\n]\n\n[[package]]\nname = \"unicode-xid\"\nversion = \"0.2.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f962df74c8c05a667b5ee8bcf162993134c104e96440b663c8daa176dc772d8c\"\n\n[[package]]\nname = \"unicode_categories\"\nversion = \"0.1.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"39ec24b3121d976906ece63c9daad25b85969647682eee313cb5779fdd69e14e\"\n\n[[package]]\nname = \"unified-diff\"\nversion = \"0.2.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"496a3d395ed0c30f411ceace4a91f7d93b148fb5a9b383d5d4cff7850f048d5f\"\ndependencies = [\n \"diff\",\n]\n\n[[package]]\nname = \"unstable-book-gen\"\nversion = \"0.1.0\"\ndependencies = [\n \"num-traits\",\n \"tidy\",\n]\n\n[[package]]\nname = \"unwind\"\nversion = \"0.0.0\"\ndependencies = [\n \"cc\",\n \"cfg-if\",\n \"compiler_builtins\",\n \"core\",\n \"libc\",\n]\n\n[[package]]\nname = \"url\"\nversion = \"2.4.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"50bff7831e19200a85b17131d085c25d7811bc4e186efdaf54bbd132994a88cb\"\ndependencies = [\n \"form_urlencoded\",\n \"idna\",\n \"percent-encoding\",\n]\n\n[[package]]\nname = \"utf-8\"\nversion = \"0.7.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"09cc8ee72d2a9becf2f2febe0205bbed8fc6615b7cb429ad062dc7b7ddd036a9\"\n\n[[package]]\nname = \"utf8parse\"\nversion = \"0.2.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"711b9620af191e0cdc7468a8d14e709c3dcdb115b36f838e601583af800a370a\"\n\n[[package]]\nname = \"uuid\"\nversion = \"1.4.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d023da39d1fde5a8a3fe1f3e01ca9632ada0a63e9797de55a879d6e2236277be\"\ndependencies = [\n \"getrandom\",\n]\n\n[[package]]\nname = \"valuable\"\nversion = \"0.1.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"830b7e5d4d90034032940e4ace0d9a9a057e7a45cd94e6c007832e39edb82f6d\"\n\n[[package]]\nname = \"vcpkg\"\nversion = \"0.2.15\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"accd4ea62f7bb7a82fe23066fb0957d48ef677f6eeb8215f372f52e48bb32426\"\n\n[[package]]\nname = \"version_check\"\nversion = \"0.9.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"49874b5167b65d7193b8aba1567f5c7d93d001cafc34600cee003eda787e483f\"\n\n[[package]]\nname = \"walkdir\"\nversion = \"2.3.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"36df944cda56c7d8d8b7496af378e6b16de9284591917d307c9b4d313c44e698\"\ndependencies = [\n \"same-file\",\n \"winapi-util\",\n]\n\n[[package]]\nname = \"want\"\nversion = \"0.3.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"bfa7760aed19e106de2c7c0b581b509f2f25d3dacaf737cb82ac61bc6d760b0e\"\ndependencies = [\n \"try-lock\",\n]\n\n[[package]]\nname = \"wasi\"\nversion = \"0.11.0+wasi-snapshot-preview1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"9c8d87e72b64a3b4db28d11ce29237c246188f4f51057d65a7eab63b7987e423\"\ndependencies = [\n \"compiler_builtins\",\n \"rustc-std-workspace-alloc\",\n \"rustc-std-workspace-core\",\n]\n\n[[package]]\nname = \"wasm-bindgen\"\nversion = \"0.2.87\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"7706a72ab36d8cb1f80ffbf0e071533974a60d0a308d01a5d0375bf60499a342\"\ndependencies = [\n \"cfg-if\",\n \"wasm-bindgen-macro\",\n]\n\n[[package]]\nname = \"wasm-bindgen-backend\"\nversion = \"0.2.87\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"5ef2b6d3c510e9625e5fe6f509ab07d66a760f0885d858736483c32ed7809abd\"\ndependencies = [\n \"bumpalo\",\n \"log\",\n \"once_cell\",\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.27\",\n \"wasm-bindgen-shared\",\n]\n\n[[package]]\nname = \"wasm-bindgen-futures\"\nversion = \"0.4.34\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f219e0d211ba40266969f6dbdd90636da12f75bee4fc9d6c23d1260dadb51454\"\ndependencies = [\n \"cfg-if\",\n \"js-sys\",\n \"wasm-bindgen\",\n \"web-sys\",\n]\n\n[[package]]\nname = \"wasm-bindgen-macro\"\nversion = \"0.2.87\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"dee495e55982a3bd48105a7b947fd2a9b4a8ae3010041b9e0faab3f9cd028f1d\"\ndependencies = [\n \"quote\",\n \"wasm-bindgen-macro-support\",\n]\n\n[[package]]\nname = \"wasm-bindgen-macro-support\"\nversion = \"0.2.87\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"54681b18a46765f095758388f2d0cf16eb8d4169b639ab575a8f5693af210c7b\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.27\",\n \"wasm-bindgen-backend\",\n \"wasm-bindgen-shared\",\n]\n\n[[package]]\nname = \"wasm-bindgen-shared\"\nversion = \"0.2.87\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ca6ad05a4870b2bf5fe995117d3728437bd27d7cd5f06f13c17443ef369775a1\"\n\n[[package]]\nname = \"web-sys\"\nversion = \"0.3.61\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e33b99f4b23ba3eec1a53ac264e35a755f00e966e0065077d6027c0f575b0b97\"\ndependencies = [\n \"js-sys\",\n \"wasm-bindgen\",\n]\n\n[[package]]\nname = \"winapi\"\nversion = \"0.3.9\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"5c839a674fcd7a98952e593242ea400abe93992746761e38641405d28b00f419\"\ndependencies = [\n \"winapi-i686-pc-windows-gnu\",\n \"winapi-x86_64-pc-windows-gnu\",\n]\n\n[[package]]\nname = \"winapi-i686-pc-windows-gnu\"\nversion = \"0.4.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ac3b87c63620426dd9b991e5ce0329eff545bccbbb34f3be09ff6fb6ab51b7b6\"\n\n[[package]]\nname = \"winapi-util\"\nversion = \"0.1.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"70ec6ce85bb158151cae5e5c87f95a8e97d2c0c4b001223f33a334e3ce5de178\"\ndependencies = [\n \"winapi\",\n]\n\n[[package]]\nname = \"winapi-x86_64-pc-windows-gnu\"\nversion = \"0.4.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"712e227841d057c1ee1cd2fb22fa7e5a5461ae8e48fa2ca79ec42cfc1931183f\"\n\n[[package]]\nname = \"windows\"\nversion = \"0.48.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e686886bc078bc1b0b600cac0147aadb815089b6e4da64016cbd754b6342700f\"\ndependencies = [\n \"windows-targets\",\n]\n\n[[package]]\nname = \"windows-bindgen\"\nversion = \"0.49.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b6935fb09b84ee57929ae92518b475f5dfdfbeb87c5334756acc28ee8e202b60\"\ndependencies = [\n \"windows-metadata\",\n \"windows-tokens\",\n]\n\n[[package]]\nname = \"windows-metadata\"\nversion = \"0.49.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"2f5bca94a32bf1e6a376522b6601275a3b611ee885ec0f1b6a05f17e8cfd3385\"\n\n[[package]]\nname = \"windows-sys\"\nversion = \"0.42.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"5a3e1820f08b8513f676f7ab6c1f99ff312fb97b553d30ff4dd86f9f15728aa7\"\ndependencies = [\n \"windows_aarch64_gnullvm 0.42.2\",\n \"windows_aarch64_msvc 0.42.2\",\n \"windows_i686_gnu 0.42.2\",\n \"windows_i686_msvc 0.42.2\",\n \"windows_x86_64_gnu 0.42.2\",\n \"windows_x86_64_gnullvm 0.42.2\",\n \"windows_x86_64_msvc 0.42.2\",\n]\n\n[[package]]\nname = \"windows-sys\"\nversion = \"0.48.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"677d2418bec65e3338edb076e806bc1ec15693c5d0104683f2efe857f61056a9\"\ndependencies = [\n \"windows-targets\",\n]\n\n[[package]]\nname = \"windows-targets\"\nversion = \"0.48.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"05d4b17490f70499f20b9e791dcf6a299785ce8af4d709018206dc5b4953e95f\"\ndependencies = [\n \"windows_aarch64_gnullvm 0.48.0\",\n \"windows_aarch64_msvc 0.48.0\",\n \"windows_i686_gnu 0.48.0\",\n \"windows_i686_msvc 0.48.0\",\n \"windows_x86_64_gnu 0.48.0\",\n \"windows_x86_64_gnullvm 0.48.0\",\n \"windows_x86_64_msvc 0.48.0\",\n]\n\n[[package]]\nname = \"windows-tokens\"\nversion = \"0.48.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b34c9a3b28cb41db7385546f7f9a8179348dffc89923dde66857b1ba5312f6b4\"\n\n[[package]]\nname = \"windows_aarch64_gnullvm\"\nversion = \"0.42.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"597a5118570b68bc08d8d59125332c54f1ba9d9adeedeef5b99b02ba2b0698f8\"\n\n[[package]]\nname = \"windows_aarch64_gnullvm\"\nversion = \"0.48.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"91ae572e1b79dba883e0d315474df7305d12f569b400fcf90581b06062f7e1bc\"\n\n[[package]]\nname = \"windows_aarch64_msvc\"\nversion = \"0.42.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e08e8864a60f06ef0d0ff4ba04124db8b0fb3be5776a5cd47641e942e58c4d43\"\n\n[[package]]\nname = \"windows_aarch64_msvc\"\nversion = \"0.48.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b2ef27e0d7bdfcfc7b868b317c1d32c641a6fe4629c171b8928c7b08d98d7cf3\"\n\n[[package]]\nname = \"windows_i686_gnu\"\nversion = \"0.42.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"c61d927d8da41da96a81f029489353e68739737d3beca43145c8afec9a31a84f\"\n\n[[package]]\nname = \"windows_i686_gnu\"\nversion = \"0.48.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"622a1962a7db830d6fd0a69683c80a18fda201879f0f447f065a3b7467daa241\"\n\n[[package]]\nname = \"windows_i686_msvc\"\nversion = \"0.42.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"44d840b6ec649f480a41c8d80f9c65108b92d89345dd94027bfe06ac444d1060\"\n\n[[package]]\nname = \"windows_i686_msvc\"\nversion = \"0.48.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"4542c6e364ce21bf45d69fdd2a8e455fa38d316158cfd43b3ac1c5b1b19f8e00\"\n\n[[package]]\nname = \"windows_x86_64_gnu\"\nversion = \"0.42.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8de912b8b8feb55c064867cf047dda097f92d51efad5b491dfb98f6bbb70cb36\"\n\n[[package]]\nname = \"windows_x86_64_gnu\"\nversion = \"0.48.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ca2b8a661f7628cbd23440e50b05d705db3686f894fc9580820623656af974b1\"\n\n[[package]]\nname = \"windows_x86_64_gnullvm\"\nversion = \"0.42.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"26d41b46a36d453748aedef1486d5c7a85db22e56aff34643984ea85514e94a3\"\n\n[[package]]\nname = \"windows_x86_64_gnullvm\"\nversion = \"0.48.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"7896dbc1f41e08872e9d5e8f8baa8fdd2677f29468c4e156210174edc7f7b953\"\n\n[[package]]\nname = \"windows_x86_64_msvc\"\nversion = \"0.42.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"9aec5da331524158c6d1a4ac0ab1541149c0b9505fde06423b02f5ef0106b9f0\"\n\n[[package]]\nname = \"windows_x86_64_msvc\"\nversion = \"0.48.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1a515f5799fe4961cb532f983ce2b23082366b898e52ffbce459c86f67c8378a\"\n\n[[package]]\nname = \"winnow\"\nversion = \"0.4.7\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ca0ace3845f0d96209f0375e6d367e3eb87eb65d27d445bdc9f1843a26f39448\"\ndependencies = [\n \"memchr\",\n]\n\n[[package]]\nname = \"winreg\"\nversion = \"0.10.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"80d0f4e272c85def139476380b12f9ac60926689dd2e01d4923222f40580869d\"\ndependencies = [\n \"winapi\",\n]\n\n[[package]]\nname = \"writeable\"\nversion = \"0.5.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"60e49e42bdb1d5dc76f4cd78102f8f0714d32edfa3efb82286eb0f0b1fc0da0f\"\n\n[[package]]\nname = \"xattr\"\nversion = \"0.2.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"6d1526bbe5aaeb5eb06885f4d987bcdfa5e23187055de9b83fe00156a821fabc\"\ndependencies = [\n \"libc\",\n]\n\n[[package]]\nname = \"xz\"\nversion = \"0.1.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3c887690ff2a2e233e8e49633461521f98ec57fbff9d59a884c9a4f04ec1da34\"\ndependencies = [\n \"xz2\",\n]\n\n[[package]]\nname = \"xz2\"\nversion = \"0.1.7\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"388c44dc09d76f1536602ead6d325eb532f5c122f17782bd57fb47baeeb767e2\"\ndependencies = [\n \"lzma-sys\",\n]\n\n[[package]]\nname = \"yaml-merge-keys\"\nversion = \"0.4.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"fd236a7dc9bb598f349fe4a8754f49181fee50284daa15cd1ba652d722280004\"\ndependencies = [\n \"lazy_static\",\n \"thiserror\",\n \"yaml-rust\",\n]\n\n[[package]]\nname = \"yaml-rust\"\nversion = \"0.4.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"56c1936c4cc7a1c9ab21a1ebb602eb942ba868cbd44a99cb7cdc5892335e1c85\"\ndependencies = [\n \"linked-hash-map\",\n]\n\n[[package]]\nname = \"yansi-term\"\nversion = \"0.1.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"fe5c30ade05e61656247b2e334a031dfd0cc466fadef865bdcdea8d537951bf1\"\ndependencies = [\n \"winapi\",\n]\n\n[[package]]\nname = \"yoke\"\nversion = \"0.7.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1848075a23a28f9773498ee9a0f2cf58fcbad4f8c0ccf84a210ab33c6ae495de\"\ndependencies = [\n \"serde\",\n \"stable_deref_trait\",\n \"yoke-derive\",\n \"zerofrom\",\n]\n\n[[package]]\nname = \"yoke-derive\"\nversion = \"0.7.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"af46c169923ed7516eef0aa32b56d2651b229f57458ebe46b49ddd6efef5b7a2\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn 1.0.109\",\n \"synstructure 0.12.6\",\n]\n\n[[package]]\nname = \"zerofrom\"\nversion = \"0.1.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"df54d76c3251de27615dfcce21e636c172dafb2549cd7fd93e21c66f6ca6bea2\"\ndependencies = [\n \"zerofrom-derive\",\n]\n\n[[package]]\nname = \"zerofrom-derive\"\nversion = \"0.1.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b4eae7c1f7d4b8eafce526bc0771449ddc2f250881ae31c50d22c032b5a1c499\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn 1.0.109\",\n \"synstructure 0.12.6\",\n]\n\n[[package]]\nname = \"zerovec\"\nversion = \"0.9.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"198f54134cd865f437820aa3b43d0ad518af4e68ee161b444cdd15d8e567c8ea\"\ndependencies = [\n \"yoke\",\n \"zerofrom\",\n \"zerovec-derive\",\n]\n\n[[package]]\nname = \"zerovec-derive\"\nversion = \"0.9.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"486558732d5dde10d0f8cb2936507c1bb21bc539d924c949baf5f36a58e51bac\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn 1.0.109\",\n \"synstructure 0.12.6\",\n]\n\n[[package]]\nname = \"zip\"\nversion = \"0.6.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"760394e246e4c28189f19d488c058bf16f564016aefac5d32bb1f3b51d5e9261\"\ndependencies = [\n \"byteorder\",\n \"crc32fast\",\n \"crossbeam-utils\",\n \"flate2\",\n]\n"
        },
        {
          "name": "Cargo.toml",
          "type": "blob",
          "size": 4.14453125,
          "content": "[workspace]\nresolver = \"1\"\nmembers = [\n  \"compiler/rustc\",\n  \"library/std\",\n  \"library/sysroot\",\n  \"src/rustdoc-json-types\",\n  \"src/tools/build_helper\",\n  \"src/tools/cargotest\",\n  \"src/tools/clippy\",\n  \"src/tools/clippy/clippy_dev\",\n  \"src/tools/compiletest\",\n  \"src/tools/error_index_generator\",\n  \"src/tools/linkchecker\",\n  \"src/tools/lint-docs\",\n  \"src/tools/miropt-test-tools\",\n  \"src/tools/rustbook\",\n  \"src/tools/unstable-book-gen\",\n  \"src/tools/tidy\",\n  \"src/tools/tier-check\",\n  \"src/tools/build-manifest\",\n  \"src/tools/remote-test-client\",\n  \"src/tools/remote-test-server\",\n  \"src/tools/rust-installer\",\n  \"src/tools/rust-demangler\",\n  \"src/tools/rustdoc\",\n  \"src/tools/rls\",\n  \"src/tools/rustfmt\",\n  \"src/tools/miri\",\n  \"src/tools/miri/cargo-miri\",\n  \"src/tools/rustdoc-themes\",\n  \"src/tools/unicode-table-generator\",\n  \"src/tools/expand-yaml-anchors\",\n  \"src/tools/jsondocck\",\n  \"src/tools/jsondoclint\",\n  \"src/tools/html-checker\",\n  \"src/tools/bump-stage0\",\n  \"src/tools/replace-version-placeholder\",\n  \"src/tools/lld-wrapper\",\n  \"src/tools/collect-license-metadata\",\n  \"src/tools/generate-copyright\",\n  \"src/tools/suggest-tests\",\n  \"src/tools/generate-windows-sys\",\n  \"src/tools/rustdoc-gui-test\",\n  \"src/tools/opt-dist\",\n]\n\nexclude = [\n  \"build\",\n  \"compiler/rustc_codegen_cranelift\",\n  \"compiler/rustc_codegen_gcc\",\n  \"src/bootstrap\",\n  \"tests/rustdoc-gui\",\n  # HACK(eddyb) This hardcodes the fact that our CI uses `/checkout/obj`.\n  \"obj\",\n  # The `x` binary is a thin wrapper that calls `x.py`, which initializes\n  # submodules, before which workspace members cannot be invoked because\n  # not all `Cargo.toml` files are available, so we exclude the `x` binary,\n  # so it can be invoked before the current checkout is set up.\n  \"src/tools/x\",\n  # stdarch has its own Cargo workspace\n  \"library/stdarch\",\n]\n\n[profile.release.package.compiler_builtins]\n# The compiler-builtins crate cannot reference libcore, and it's own CI will\n# verify that this is the case. This requires, however, that the crate is built\n# without overflow checks and debug assertions. Forcefully disable debug\n# assertions and overflow checks here which should ensure that even if these\n# assertions are enabled for libstd we won't enable them for compiler_builtins\n# which should ensure we still link everything correctly.\ndebug-assertions = false\noverflow-checks = false\n\n# For compiler-builtins we always use a high number of codegen units.\n# The goal here is to place every single intrinsic into its own object\n# file to avoid symbol clashes with the system libgcc if possible. Note\n# that this number doesn't actually produce this many object files, we\n# just don't create more than this number of object files.\n#\n# It's a bit of a bummer that we have to pass this here, unfortunately.\n# Ideally this would be specified through an env var to Cargo so Cargo\n# knows how many CGUs are for this specific crate, but for now\n# per-crate configuration isn't specifiable in the environment.\ncodegen-units = 10000\n\n[profile.release.package.rustc-rayon-core]\n# The rustc fork of Rayon has deadlock detection code which intermittently\n# causes overflows in the CI (see https://github.com/rust-lang/rust/issues/90227)\n# so we turn overflow checks off for now.\n# FIXME: This workaround should be removed once #90227 is fixed.\noverflow-checks = false\n\n# These dependencies of the standard library implement symbolication for\n# backtraces on most platforms. Their debuginfo causes both linking to be slower\n# (more data to chew through) and binaries to be larger without really all that\n# much benefit. This section turns them all to down to have no debuginfo which\n# helps to improve link times a little bit.\n[profile.release.package]\naddr2line.debug = 0\nadler.debug = 0\ngimli.debug = 0\nminiz_oxide.debug = 0\nobject.debug = 0\n\n[patch.crates-io]\n# See comments in `library/rustc-std-workspace-core/README.md` for what's going on\n# here\nrustc-std-workspace-core = { path = 'library/rustc-std-workspace-core' }\nrustc-std-workspace-alloc = { path = 'library/rustc-std-workspace-alloc' }\nrustc-std-workspace-std = { path = 'library/rustc-std-workspace-std' }\n\n[patch.\"https://github.com/rust-lang/rust-clippy\"]\nclippy_lints = { path = \"src/tools/clippy/clippy_lints\" }\n"
        },
        {
          "name": "LICENSE-APACHE",
          "type": "blob",
          "size": 9.4951171875,
          "content": "                              Apache License\n                        Version 2.0, January 2004\n                     http://www.apache.org/licenses/\n\nTERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n1. Definitions.\n\n   \"License\" shall mean the terms and conditions for use, reproduction,\n   and distribution as defined by Sections 1 through 9 of this document.\n\n   \"Licensor\" shall mean the copyright owner or entity authorized by\n   the copyright owner that is granting the License.\n\n   \"Legal Entity\" shall mean the union of the acting entity and all\n   other entities that control, are controlled by, or are under common\n   control with that entity. For the purposes of this definition,\n   \"control\" means (i) the power, direct or indirect, to cause the\n   direction or management of such entity, whether by contract or\n   otherwise, or (ii) ownership of fifty percent (50%) or more of the\n   outstanding shares, or (iii) beneficial ownership of such entity.\n\n   \"You\" (or \"Your\") shall mean an individual or Legal Entity\n   exercising permissions granted by this License.\n\n   \"Source\" form shall mean the preferred form for making modifications,\n   including but not limited to software source code, documentation\n   source, and configuration files.\n\n   \"Object\" form shall mean any form resulting from mechanical\n   transformation or translation of a Source form, including but\n   not limited to compiled object code, generated documentation,\n   and conversions to other media types.\n\n   \"Work\" shall mean the work of authorship, whether in Source or\n   Object form, made available under the License, as indicated by a\n   copyright notice that is included in or attached to the work\n   (an example is provided in the Appendix below).\n\n   \"Derivative Works\" shall mean any work, whether in Source or Object\n   form, that is based on (or derived from) the Work and for which the\n   editorial revisions, annotations, elaborations, or other modifications\n   represent, as a whole, an original work of authorship. For the purposes\n   of this License, Derivative Works shall not include works that remain\n   separable from, or merely link (or bind by name) to the interfaces of,\n   the Work and Derivative Works thereof.\n\n   \"Contribution\" shall mean any work of authorship, including\n   the original version of the Work and any modifications or additions\n   to that Work or Derivative Works thereof, that is intentionally\n   submitted to Licensor for inclusion in the Work by the copyright owner\n   or by an individual or Legal Entity authorized to submit on behalf of\n   the copyright owner. For the purposes of this definition, \"submitted\"\n   means any form of electronic, verbal, or written communication sent\n   to the Licensor or its representatives, including but not limited to\n   communication on electronic mailing lists, source code control systems,\n   and issue tracking systems that are managed by, or on behalf of, the\n   Licensor for the purpose of discussing and improving the Work, but\n   excluding communication that is conspicuously marked or otherwise\n   designated in writing by the copyright owner as \"Not a Contribution.\"\n\n   \"Contributor\" shall mean Licensor and any individual or Legal Entity\n   on behalf of whom a Contribution has been received by Licensor and\n   subsequently incorporated within the Work.\n\n2. Grant of Copyright License. Subject to the terms and conditions of\n   this License, each Contributor hereby grants to You a perpetual,\n   worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n   copyright license to reproduce, prepare Derivative Works of,\n   publicly display, publicly perform, sublicense, and distribute the\n   Work and such Derivative Works in Source or Object form.\n\n3. Grant of Patent License. Subject to the terms and conditions of\n   this License, each Contributor hereby grants to You a perpetual,\n   worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n   (except as stated in this section) patent license to make, have made,\n   use, offer to sell, sell, import, and otherwise transfer the Work,\n   where such license applies only to those patent claims licensable\n   by such Contributor that are necessarily infringed by their\n   Contribution(s) alone or by combination of their Contribution(s)\n   with the Work to which such Contribution(s) was submitted. If You\n   institute patent litigation against any entity (including a\n   cross-claim or counterclaim in a lawsuit) alleging that the Work\n   or a Contribution incorporated within the Work constitutes direct\n   or contributory patent infringement, then any patent licenses\n   granted to You under this License for that Work shall terminate\n   as of the date such litigation is filed.\n\n4. Redistribution. You may reproduce and distribute copies of the\n   Work or Derivative Works thereof in any medium, with or without\n   modifications, and in Source or Object form, provided that You\n   meet the following conditions:\n\n   (a) You must give any other recipients of the Work or\n       Derivative Works a copy of this License; and\n\n   (b) You must cause any modified files to carry prominent notices\n       stating that You changed the files; and\n\n   (c) You must retain, in the Source form of any Derivative Works\n       that You distribute, all copyright, patent, trademark, and\n       attribution notices from the Source form of the Work,\n       excluding those notices that do not pertain to any part of\n       the Derivative Works; and\n\n   (d) If the Work includes a \"NOTICE\" text file as part of its\n       distribution, then any Derivative Works that You distribute must\n       include a readable copy of the attribution notices contained\n       within such NOTICE file, excluding those notices that do not\n       pertain to any part of the Derivative Works, in at least one\n       of the following places: within a NOTICE text file distributed\n       as part of the Derivative Works; within the Source form or\n       documentation, if provided along with the Derivative Works; or,\n       within a display generated by the Derivative Works, if and\n       wherever such third-party notices normally appear. The contents\n       of the NOTICE file are for informational purposes only and\n       do not modify the License. You may add Your own attribution\n       notices within Derivative Works that You distribute, alongside\n       or as an addendum to the NOTICE text from the Work, provided\n       that such additional attribution notices cannot be construed\n       as modifying the License.\n\n   You may add Your own copyright statement to Your modifications and\n   may provide additional or different license terms and conditions\n   for use, reproduction, or distribution of Your modifications, or\n   for any such Derivative Works as a whole, provided Your use,\n   reproduction, and distribution of the Work otherwise complies with\n   the conditions stated in this License.\n\n5. Submission of Contributions. Unless You explicitly state otherwise,\n   any Contribution intentionally submitted for inclusion in the Work\n   by You to the Licensor shall be under the terms and conditions of\n   this License, without any additional terms or conditions.\n   Notwithstanding the above, nothing herein shall supersede or modify\n   the terms of any separate license agreement you may have executed\n   with Licensor regarding such Contributions.\n\n6. Trademarks. This License does not grant permission to use the trade\n   names, trademarks, service marks, or product names of the Licensor,\n   except as required for reasonable and customary use in describing the\n   origin of the Work and reproducing the content of the NOTICE file.\n\n7. Disclaimer of Warranty. Unless required by applicable law or\n   agreed to in writing, Licensor provides the Work (and each\n   Contributor provides its Contributions) on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n   implied, including, without limitation, any warranties or conditions\n   of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n   PARTICULAR PURPOSE. You are solely responsible for determining the\n   appropriateness of using or redistributing the Work and assume any\n   risks associated with Your exercise of permissions under this License.\n\n8. Limitation of Liability. In no event and under no legal theory,\n   whether in tort (including negligence), contract, or otherwise,\n   unless required by applicable law (such as deliberate and grossly\n   negligent acts) or agreed to in writing, shall any Contributor be\n   liable to You for damages, including any direct, indirect, special,\n   incidental, or consequential damages of any character arising as a\n   result of this License or out of the use or inability to use the\n   Work (including but not limited to damages for loss of goodwill,\n   work stoppage, computer failure or malfunction, or any and all\n   other commercial damages or losses), even if such Contributor\n   has been advised of the possibility of such damages.\n\n9. Accepting Warranty or Additional Liability. While redistributing\n   the Work or Derivative Works thereof, You may choose to offer,\n   and charge a fee for, acceptance of support, warranty, indemnity,\n   or other liability obligations and/or rights consistent with this\n   License. However, in accepting such obligations, You may act only\n   on Your own behalf and on Your sole responsibility, not on behalf\n   of any other Contributor, and only if You agree to indemnify,\n   defend, and hold each Contributor harmless for any liability\n   incurred by, or claims asserted against, such Contributor by reason\n   of your accepting any such warranty or additional liability.\n\nEND OF TERMS AND CONDITIONS\n"
        },
        {
          "name": "LICENSE-MIT",
          "type": "blob",
          "size": 0.9990234375,
          "content": "Permission is hereby granted, free of charge, to any\nperson obtaining a copy of this software and associated\ndocumentation files (the \"Software\"), to deal in the\nSoftware without restriction, including without\nlimitation the rights to use, copy, modify, merge,\npublish, distribute, sublicense, and/or sell copies of\nthe Software, and to permit persons to whom the Software\nis furnished to do so, subject to the following\nconditions:\n\nThe above copyright notice and this permission notice\nshall be included in all copies or substantial portions\nof the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF\nANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED\nTO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A\nPARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT\nSHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\nOF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR\nIN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\nDEALINGS IN THE SOFTWARE.\n"
        },
        {
          "name": "LICENSES",
          "type": "tree",
          "content": null
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 10.7939453125,
          "content": "<img src=\"https://user-images.githubusercontent.com/8974888/231858967-7c37bf1e-335b-4f5a-9760-da97be9f54bb.png\" width=\"200\" />\n\n# The Crab Programming Language\n\n[![CrabLang Community](https://img.shields.io/badge/CrabLang_Community%20-Join_us-brightgreen?style=plastic&logo=discord)](https://community.crablang.org)\n\nThis is the main source code repository for [Crab](https://github.com/crablang/crab). It contains the compiler,\nstandard library, and documentation.\n\n*Note*: The master branch contains the code for the CrabLang playground—aka __*The One True Crab*__—which is not guaranteed to be up to date with the upstream project. If you are looking for the renamed toolchain that simply mirrors upstream, check out [the stable branch](https://github.com/crablang/crab/tree/stable) and follow the instructions there. Also note that this README is for _users_ rather than _contributors_.\n\nIf you wish to _contribute_ to the compiler, you should read [CONTRIBUTING.md](CONTRIBUTING.md) instead.\n\n[CrabLang]: https://www.crablang.org/\n\n## Quick Start\n\nTo get started with the renamed CrabLang toolchain, run the following:\n\n```sh\nsh <(curl https://install.crablang.org -L)\n```\n\n\\* currently Unix only\n\n<!-- \nRead [\"Installation\"] from [The Book].\n\n[\"Installation\"]: https://doc.crablang.org/book/ch01-01-installation.html\n[The Book]: https://doc.crablang.org/book/index.html -->\n\n## Installing from Source\n\nThe Crab build system uses a Python script called `x.py` to build the compiler,\nwhich manages the bootstrapping process. It lives at the root of the project.\n\nThe `x.py` command can be run directly on most Unix systems in the following\nformat:\n\n```sh\n./x.py <subcommand> [flags]\n```\n\nThis is how the documentation and examples assume you are running `x.py`.\n\nSome alternative ways are:\n\n```sh\n# On a Unix shell if you don't have the necessary `python3` command\n./x <subcommand> [flags]\n\n# On the Windows Command Prompt (if .py files are configured to run Python)\nx.py <subcommand> [flags]\n\n# You can also run Python yourself, e.g.:\npython x.py <subcommand> [flags]\n```\n\nMore information about `x.py` can be found by running it with the `--help` flag\nor reading the [crabc dev guide][crabcguidebuild].\n\n[gettingstarted]: https://crabc-dev-guide.crablang.org/getting-started.html\n[crabcguidebuild]: https://crabc-dev-guide.crablang.org/building/how-to-build-and-run.html\n\n### Dependencies\n\nMake sure you have installed the dependencies:\n\n* `python` 3 or 2.7\n* `git`\n* A C compiler (when building for the host, `cc` is enough; cross-compiling may\n  need additional compilers)\n* `curl` (not needed on Windows)\n* `pkg-config` if you are compiling on Linux and targeting Linux\n* `libiconv` (already included with glibc on Debian-based distros)\n\nTo build Crabgo, you'll also need OpenSSL (`libssl-dev` or `openssl-devel` on\nmost Unix distros).\n\nIf building LLVM from source, you'll need additional tools:\n\n* `g++`, `clang++`, or MSVC with versions listed on\n  [LLVM's documentation](https://llvm.org/docs/GettingStarted.html#host-c-toolchain-both-compiler-and-standard-library)\n* `ninja`, or GNU `make` 3.81 or later (Ninja is recommended, especially on\n  Windows)\n* `cmake` 3.13.4 or later\n* `libstdc++-static` may be required on some Linux distributions such as Fedora\n  and Ubuntu\n\nOn tier 1 or tier 2 with host tools platforms, you can also choose to download\nLLVM by setting `llvm.download-ci-llvm = true`.\nOtherwise, you'll need LLVM installed and `llvm-config` in your path.\nSee [the crabc-dev-guide for more info][sysllvm].\n\n[sysllvm]: https://crabc-dev-guide.crablang.org/building/new-target.html#using-pre-built-llvm\n\n\n### Building on a Unix-like system\n\n1. Clone the [source] with `git`:\n\n   ```sh\n   git clone https://github.com/crablang/crab.git\n   cd crab\n   ```\n\n[source]: https://github.com/crablang/crablang\n\n2. Configure the build settings:\n\n   The CrabLang build system uses a file named `config.toml` in the root of the\n   source tree to determine various configuration settings for the build.\n   Set up the defaults intended for distros to get started. You can see a full\n   list of options in `config.example.toml`.\n\n   ```sh\n   printf 'profile = \"user\" \\nchangelog-seen = 2 \\n' > config.toml\n   ```\n\n   If you plan to use `x.py install` to create an installation, it is\n   recommended that you set the `prefix` value in the `[install]` section to a\n   directory.\n\n3. Build and install:\n\n   ```sh\n   ./x.py build && ./x.py install\n   ```\n\n   When complete, `./x.py install` will place several programs into\n   `$PREFIX/bin`: `crabc`, the CrabLang compiler, and `crablangdoc`, the\n   API-documentation tool. If you've set `profile = \"user\"` or\n   `build.extended = true`, it will also include [Crabgo], CrabLang's package\n   manager.\n\n[Crabgo]: https://github.com/crablang/crabgo\n\n### Building on Windows\n\nOn Windows, we suggest using [winget] to install dependencies by running the\nfollowing in a terminal:\n\n```powershell\nwinget install -e Python.Python.3\nwinget install -e Kitware.CMake\nwinget install -e Git.Git\n```\n\nThen edit your system's `PATH` variable and add: `C:\\Program Files\\CMake\\bin`.\nSee\n[this guide on editing the system `PATH`](https://www.java.com/en/download/help/path.html)\nfrom the Java documentation.\n\n[winget]: https://github.com/microsoft/winget-cli\n\nThere are two prominent ABIs in use on Windows: the native (MSVC) ABI used by\nVisual Studio and the GNU ABI used by the GCC toolchain. Which version of CrabLang\nyou need depends largely on what C/C++ libraries you want to interoperate with.\nUse the MSVC build of CrabLang to interop with software produced by Visual Studio\nand the GNU build to interop with GNU software built using the MinGW/MSYS2\ntoolchain.\n\n#### MinGW\n\n[MSYS2][msys2] can be used to easily build CrabLang on Windows:\n\n[msys2]: https://www.msys2.org/\n\n1. Download the latest [MSYS2 installer][msys2] and go through the installer.\n\n2. Run `mingw32_shell.bat` or `mingw64_shell.bat` from the MSYS2 installation\n   directory (e.g. `C:\\msys64`), depending on whether you want 32-bit or 64-bit\n   CrabLang. (As of the latest version of MSYS2 you have to run `msys2_shell.cmd\n   -mingw32` or `msys2_shell.cmd -mingw64` from the command line instead.)\n\n3. From this terminal, install the required tools:\n\n   ```sh\n   # Update package mirrors (may be needed if you have a fresh install of MSYS2)\n   pacman -Sy pacman-mirrors\n\n   # Install build tools needed for CrabLang. If you're building a 32-bit compiler,\n   # then replace \"x86_64\" below with \"i686\". If you've already got Git, Python,\n   # or CMake installed and in PATH you can remove them from this list.\n   # Note that it is important that you do **not** use the 'python2', 'cmake',\n   # and 'ninja' packages from the 'msys2' subsystem.\n   # The build has historically been known to fail with these packages.\n   pacman -S git \\\n               make \\\n               diffutils \\\n               tar \\\n               mingw-w64-x86_64-python \\\n               mingw-w64-x86_64-cmake \\\n               mingw-w64-x86_64-gcc \\\n               mingw-w64-x86_64-ninja\n   ```\n\n4. Navigate to CrabLang's source code (or clone it), then build it:\n\n   ```sh\n   ./x.py build && ./x.py install\n   ```\n\n#### MSVC\n\nMSVC builds of CrabLang additionally require an installation of Visual Studio 2017\n(or later) so `crabc` can use its linker.  The simplest way is to get\n[Visual Studio], check the \"C++ build tools\" and \"Windows 10 SDK\" workload.\n\n[Visual Studio]: https://visualstudio.microsoft.com/downloads/\n\n(If you're installing CMake yourself, be careful that \"C++ CMake tools for\nWindows\" doesn't get included under \"Individual components\".)\n\nWith these dependencies installed, you can build the compiler in a `cmd.exe`\nshell with:\n\n```sh\npython x.py build\n```\n\nRight now, building CrabLang only works with some known versions of Visual Studio.\nIf you have a more recent version installed and the build system doesn't\nunderstand, you may need to force crablangbuild to use an older version.\nThis can be done by manually calling the appropriate vcvars file before running\nthe bootstrap.\n\n```batch\nCALL \"C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Auxiliary\\Build\\vcvars64.bat\"\npython x.py build\n```\n\n#### Specifying an ABI\n\nEach specific ABI can also be used from either environment (for example, using\nthe GNU ABI in PowerShell) by using an explicit build triple. The available\nWindows build triples are:\n- GNU ABI (using GCC)\n    - `i686-pc-windows-gnu`\n    - `x86_64-pc-windows-gnu`\n- The MSVC ABI\n    - `i686-pc-windows-msvc`\n    - `x86_64-pc-windows-msvc`\n\nThe build triple can be specified by either specifying `--build=<triple>` when\ninvoking `x.py` commands, or by creating a `config.toml` file (as described in\n[Installing from Source](#installing-from-source)), and modifying the `build`\noption under the `[build]` section.\n\n### Configure and Make\n\nWhile it's not the recommended build system, this project also provides a\nconfigure script and makefile (the latter of which just invokes `x.py`).\n\n```sh\n./configure\nmake && sudo make install\n```\n\n`configure` generates a `config.toml` which can also be used with normal `x.py`\ninvocations.\n\n## Building Documentation\n\nIf you'd like to build the documentation, it's almost the same:\n\n```sh\n./x.py doc\n```\n\nThe generated documentation will appear under `doc` in the `build` directory for\nthe ABI used. That is, if the ABI was `x86_64-pc-windows-msvc`, the directory\nwill be `build\\x86_64-pc-windows-msvc\\doc`.\n\n## Notes\n\nSince the CrabLang compiler is written in CrabLang, it must be built by a precompiled\n\"snapshot\" version of itself (made in an earlier stage of development).\nAs such, source builds require an Internet connection to fetch snapshots, and an\nOS that can execute the available snapshot binaries.\n\nSee https://doc.crablang.org/nightly/crabc/platform-support.html for a list of\nsupported platforms.\nOnly \"host tools\" platforms have a pre-compiled snapshot binary available; to\ncompile for a platform without host tools you must cross-compile.\n\nYou may find that other platforms work, but these are our officially supported\nbuild environments that are most likely to work.\n\n## Getting Help\n\nNeed help? Join us on discord at https://community.crablang.org! \n\n## Contributing\n\nSee [CONTRIBUTING.md](CONTRIBUTING.md).\n\n## License\n\nCrabLang is primarily distributed under the terms of both the MIT license and the\nApache License (Version 2.0), with portions covered by various BSD-like\nlicenses.\n\nSee [LICENSE-APACHE](LICENSE-APACHE), [LICENSE-MIT](LICENSE-MIT), and\n[COPYRIGHT](COPYRIGHT) for details.\n\n## Trademark\n\nIf you want to use any names or brands associated with Crab or CrabLang, please feel free to do so in any capacity.\n\nThird-party logos may be subject to third-party copyrights and trademarks. See\n[Licenses][policies-licenses] for details.\n\n[crablang-foundation]: https://foundation.crablang.org/\n[media-guide]: https://foundation.crablang.org/policies/logo-policy-and-media-guide/\n[policies-licenses]: https://www.crablang.org/policies/licenses\n"
        },
        {
          "name": "RELEASES.md",
          "type": "blob",
          "size": 641.0234375,
          "content": "Version 1.71.0 (2023-07-13)\n==========================\n\n<a id=\"1.71.0-Language\"></a>\n\nLanguage\n--------\n\n- [Stabilize `raw-dylib`, `link_ordinal`, `import_name_type` and `-Cdlltool`.](https://github.com/rust-lang/rust/pull/109677/)\n- [Uplift `clippy::{drop,forget}_{ref,copy}` lints.](https://github.com/rust-lang/rust/pull/109732/)\n- [Type inference is more conservative around constrained vars.](https://github.com/rust-lang/rust/pull/110100/)\n- [Use fulfillment to check `Drop` impl compatibility](https://github.com/rust-lang/rust/pull/110577/)\n\n<a id=\"1.71.0-Compiler\"></a>\n\nCompiler\n--------\n\n- [Evaluate place expression in `PlaceMention`](https://github.com/rust-lang/rust/pull/104844/),\n  making `let _ =` patterns more consistent with respect to the borrow checker.\n- [Add `--print deployment-target` flag for Apple targets.](https://github.com/rust-lang/rust/pull/105354/)\n- [Stabilize `extern \"C-unwind\"` and friends.](https://github.com/rust-lang/rust/pull/106075/)\n  The existing `extern \"C\"` etc. may change behavior for cross-language unwinding in a future release.\n- [Update the version of musl used on `*-linux-musl` targets to 1.2.3](https://github.com/rust-lang/rust/pull/107129/),\n  enabling [time64](https://musl.libc.org/time64.html) on 32-bit systems.\n- [Stabilize `debugger_visualizer`](https://github.com/rust-lang/rust/pull/108668/)\n  for embedding metadata like Microsoft's Natvis.\n- [Enable flatten-format-args by default.](https://github.com/rust-lang/rust/pull/109999/)\n- [Make `Self` respect tuple constructor privacy.](https://github.com/rust-lang/rust/pull/111245/)\n- [Improve niche placement by trying two strategies and picking the better result.](https://github.com/rust-lang/rust/pull/108106/)\n- [Use `apple-m1` as the target CPU for `aarch64-apple-darwin`.](https://github.com/rust-lang/rust/pull/109899/)\n- [Add Tier 3 support for the `x86_64h-apple-darwin` target.](https://github.com/rust-lang/rust/pull/108795/)\n- [Promote `loongarch64-unknown-linux-gnu` to Tier 2 with host tools.](https://github.com/rust-lang/rust/pull/110936/)\n\nRefer to Rust's [platform support page][platform-support-doc]\nfor more information on Rust's tiered platform support.\n\n<a id=\"1.71.0-Libraries\"></a>\n\nLibraries\n---------\n- [Rework handling of recursive panics.](https://github.com/rust-lang/rust/pull/110975/)\n  Additional panics are allowed while unwinding, as long as they are caught before escaping\n  a `Drop` implementation, but panicking within a panic hook is now an immediate abort.\n- [Loosen `From<&[T]> for Box<[T]>` bound to `T: Clone`.](https://github.com/rust-lang/rust/pull/103406/)\n- [Remove unnecessary `T: Send` bound](https://github.com/rust-lang/rust/pull/111134/)\n  in `Error for mpsc::SendError<T>` and `TrySendError<T>`.\n- [Fix docs for `alloc::realloc`](https://github.com/rust-lang/rust/pull/108630/)\n  to match `Layout` requirements that the size must not exceed `isize::MAX`.\n- [Document `const {}` syntax for `std::thread_local`.](https://github.com/rust-lang/rust/pull/110620/)\n  This syntax was stabilized in Rust 1.59, but not previously mentioned in release notes.\n\n<a id=\"1.71.0-Stabilized-APIs\"></a>\n\nStabilized APIs\n---------------\n\n- [`CStr::is_empty`](https://doc.rust-lang.org/stable/std/ffi/struct.CStr.html#method.is_empty)\n- [`BuildHasher::hash_one`](https://doc.rust-lang.org/stable/std/hash/trait.BuildHasher.html#method.hash_one)\n- [`NonZeroI*::is_positive`](https://doc.rust-lang.org/stable/std/num/struct.NonZeroI32.html#method.is_positive)\n- [`NonZeroI*::is_negative`](https://doc.rust-lang.org/stable/std/num/struct.NonZeroI32.html#method.is_negative)\n- [`NonZeroI*::checked_neg`](https://doc.rust-lang.org/stable/std/num/struct.NonZeroI32.html#method.checked_neg)\n- [`NonZeroI*::overflowing_neg`](https://doc.rust-lang.org/stable/std/num/struct.NonZeroI32.html#method.overflowing_neg)\n- [`NonZeroI*::saturating_neg`](https://doc.rust-lang.org/stable/std/num/struct.NonZeroI32.html#method.saturating_neg)\n- [`NonZeroI*::wrapping_neg`](https://doc.rust-lang.org/stable/std/num/struct.NonZeroI32.html#method.wrapping_neg)\n- [`Neg for NonZeroI*`](https://doc.rust-lang.org/stable/std/num/struct.NonZeroI32.html#impl-Neg-for-NonZeroI32)\n- [`Neg for &NonZeroI*`](https://doc.rust-lang.org/stable/std/num/struct.NonZeroI32.html#impl-Neg-for-%26NonZeroI32)\n- [`From<[T; N]> for (T...)`](https://doc.rust-lang.org/stable/std/primitive.array.html#impl-From%3C%5BT;+1%5D%3E-for-(T,))\n  (array to N-tuple for N in 1..=12)\n- [`From<(T...)> for [T; N]`](https://doc.rust-lang.org/stable/std/primitive.array.html#impl-From%3C(T,)%3E-for-%5BT;+1%5D)\n  (N-tuple to array for N in 1..=12)\n- [`windows::io::AsHandle for Box<T>`](https://doc.rust-lang.org/stable/std/os/windows/io/trait.AsHandle.html#impl-AsHandle-for-Box%3CT%3E)\n- [`windows::io::AsHandle for Rc<T>`](https://doc.rust-lang.org/stable/std/os/windows/io/trait.AsHandle.html#impl-AsHandle-for-Rc%3CT%3E)\n- [`windows::io::AsHandle for Arc<T>`](https://doc.rust-lang.org/stable/std/os/windows/io/trait.AsHandle.html#impl-AsHandle-for-Arc%3CT%3E)\n- [`windows::io::AsSocket for Box<T>`](https://doc.rust-lang.org/stable/std/os/windows/io/trait.AsSocket.html#impl-AsSocket-for-Box%3CT%3E)\n- [`windows::io::AsSocket for Rc<T>`](https://doc.rust-lang.org/stable/std/os/windows/io/trait.AsSocket.html#impl-AsSocket-for-Rc%3CT%3E)\n- [`windows::io::AsSocket for Arc<T>`](https://doc.rust-lang.org/stable/std/os/windows/io/trait.AsSocket.html#impl-AsSocket-for-Arc%3CT%3E)\n\nThese APIs are now stable in const contexts:\n\n- [`<*const T>::read`](https://doc.rust-lang.org/stable/std/primitive.pointer.html#method.read)\n- [`<*const T>::read_unaligned`](https://doc.rust-lang.org/stable/std/primitive.pointer.html#method.read_unaligned)\n- [`<*mut T>::read`](https://doc.rust-lang.org/stable/std/primitive.pointer.html#method.read-1)\n- [`<*mut T>::read_unaligned`](https://doc.rust-lang.org/stable/std/primitive.pointer.html#method.read_unaligned-1)\n- [`ptr::read`](https://doc.rust-lang.org/stable/std/ptr/fn.read.html)\n- [`ptr::read_unaligned`](https://doc.rust-lang.org/stable/std/ptr/fn.read_unaligned.html)\n- [`<[T]>::split_at`](https://doc.rust-lang.org/stable/std/primitive.slice.html#method.split_at)\n\n<a id=\"1.71.0-Cargo\"></a>\n\nCargo\n-----\n- [Allow named debuginfo options in `Cargo.toml`.](https://github.com/rust-lang/cargo/pull/11958/)\n- [Add `workspace_default_members` to the output of `cargo metadata`.](https://github.com/rust-lang/cargo/pull/11978/)\n- [Automatically inherit workspace fields when running `cargo new`/`cargo init`.](https://github.com/rust-lang/cargo/pull/12069/)\n\n<a id=\"1.71.0-Rustdoc\"></a>\n\nRustdoc\n-------\n\n- [Add a new `rustdoc::unescaped_backticks` lint for broken inline code.](https://github.com/rust-lang/rust/pull/105848/)\n- [Support strikethrough with single tildes.](https://github.com/rust-lang/rust/pull/111152/) (`~~old~~` vs. `~new~`)\n\n<a id=\"1.71.0-Misc\"></a>\n\nMisc\n----\n\n<a id=\"1.71.0-Compatibility-Notes\"></a>\n\nCompatibility Notes\n-------------------\n\n- [Remove structural match from `TypeId`.](https://github.com/rust-lang/rust/pull/103291/)\n  Code that uses a constant `TypeId` in a pattern will potentially be broken.\n  Known cases have already been fixed -- in particular, users of the `log`\n  crate's `kv_unstable` feature should update to `log v0.4.18` or later.\n- [Add a `sysroot` crate to represent the standard library crates.](https://github.com/rust-lang/rust/pull/108865/)\n  This does not affect stable users, but may require adjustment in tools that build their own standard library.\n- [Cargo optimizes its usage under `rustup`.](https://github.com/rust-lang/cargo/pull/11917/) When\n  Cargo detects it will run `rustc` pointing to a rustup proxy, it'll try bypassing the proxy and\n  use the underlying binary directly. There are assumptions around the interaction with rustup and\n  `RUSTUP_TOOLCHAIN`. However, it's not expected to affect normal users.\n- [When querying a package, Cargo tries only the original name, all hyphens, and all underscores to\n  handle misspellings.](https://github.com/rust-lang/cargo/pull/12083/) Previously, Cargo tried each\n  combination of hyphens and underscores, causing excessive requests to crates.io.\n- Cargo now [disallows `RUSTUP_HOME`](https://github.com/rust-lang/cargo/pull/12101/) and\n  [`RUSTUP_TOOLCHAIN`](https://github.com/rust-lang/cargo/pull/12107/) in the `[env]` configuration\n  table. This is considered to be not a use case Cargo would like to support, since it will likely\n  cause problems or lead to confusion.\n\n<a id=\"1.71.0-Internal-Changes\"></a>\n\nInternal Changes\n----------------\n\nThese changes do not affect any public interfaces of Rust, but they represent\nsignificant improvements to the performance or internals of rustc and related\ntools.\n\n\nVersion 1.70.0 (2023-06-01)\n==========================\n\n<a id=\"1.70.0-Language\"></a>\n\nLanguage\n--------\n- [Relax ordering rules for `asm!` operands](https://github.com/rust-lang/rust/pull/105798/)\n- [Properly allow macro expanded `format_args` invocations to uses captures](https://github.com/rust-lang/rust/pull/106505/)\n- [Lint ambiguous glob re-exports](https://github.com/rust-lang/rust/pull/107880/)\n- [Perform const and unsafe checking for expressions in `let _ = expr` position.](https://github.com/rust-lang/rust/pull/102256/)\n\n<a id=\"1.70.0-Compiler\"></a>\n\nCompiler\n--------\n- [Extend -Cdebuginfo with new options and named aliases](https://github.com/rust-lang/rust/pull/109808/)\n  This provides a smaller version of debuginfo for cases that only need line number information\n  (`-Cdebuginfo=line-tables-only`), which may eventually become the default for `-Cdebuginfo=1`.\n- [Make `unused_allocation` lint against `Box::new` too](https://github.com/rust-lang/rust/pull/104363/)\n- [Detect uninhabited types early in const eval](https://github.com/rust-lang/rust/pull/109435/)\n- [Switch to LLD as default linker for {arm,thumb}v4t-none-eabi](https://github.com/rust-lang/rust/pull/109721/)\n- [Add tier 3 target `loongarch64-unknown-linux-gnu`](https://github.com/rust-lang/rust/pull/96971)\n- [Add tier 3 target for `i586-pc-nto-qnx700` (QNX Neutrino RTOS, version 7.0)](https://github.com/rust-lang/rust/pull/109173/), \n- [Insert alignment checks for pointer dereferences as debug assertions](https://github.com/rust-lang/rust/pull/98112)\n  This catches undefined behavior at runtime, and may cause existing code to fail.\n\nRefer to Rust's [platform support page][platform-support-doc]\nfor more information on Rust's tiered platform support.\n\n<a id=\"1.70.0-Libraries\"></a>\n\nLibraries\n---------\n- [Document NonZeroXxx layout guarantees](https://github.com/rust-lang/rust/pull/94786/)\n- [Windows: make `Command` prefer non-verbatim paths](https://github.com/rust-lang/rust/pull/96391/)\n- [Implement Default for some alloc/core iterators](https://github.com/rust-lang/rust/pull/99929/)\n- [Fix handling of trailing bare CR in str::lines](https://github.com/rust-lang/rust/pull/100311/)\n- [allow negative numeric literals in `concat!`](https://github.com/rust-lang/rust/pull/106844/)\n- [Add documentation about the memory layout of `Cell`](https://github.com/rust-lang/rust/pull/106921/)\n- [Use `partial_cmp` to implement tuple `lt`/`le`/`ge`/`gt`](https://github.com/rust-lang/rust/pull/108157/)\n- [Stabilize `atomic_as_ptr`](https://github.com/rust-lang/rust/pull/108419/)\n- [Stabilize `nonnull_slice_from_raw_parts`](https://github.com/rust-lang/rust/pull/97506/)\n- [Partial stabilization of `once_cell`](https://github.com/rust-lang/rust/pull/105587/)\n- [Stabilize `nonzero_min_max`](https://github.com/rust-lang/rust/pull/106633/)\n- [Flatten/inline format_args!() and (string and int) literal arguments into format_args!()](https://github.com/rust-lang/rust/pull/106824/)\n- [Stabilize movbe target feature](https://github.com/rust-lang/rust/pull/107711/)\n- [don't splice from files into pipes in io::copy](https://github.com/rust-lang/rust/pull/108283/)\n- [Add a builtin unstable `FnPtr` trait that is implemented for all function pointers](https://github.com/rust-lang/rust/pull/108080/)\n  This extends `Debug`, `Pointer`, `Hash`, `PartialEq`, `Eq`, `PartialOrd`, and `Ord`\n  implementations for function pointers with all ABIs.\n\n<a id=\"1.70.0-Stabilized-APIs\"></a>\n\nStabilized APIs\n---------------\n\n- [`NonZero*::MIN/MAX`](https://doc.rust-lang.org/stable/std/num/struct.NonZeroI8.html#associatedconstant.MIN)\n- [`BinaryHeap::retain`](https://doc.rust-lang.org/stable/std/collections/struct.BinaryHeap.html#method.retain)\n- [`Default for std::collections::binary_heap::IntoIter`](https://doc.rust-lang.org/stable/std/collections/binary_heap/struct.IntoIter.html)\n- [`Default for std::collections::btree_map::{IntoIter, Iter, IterMut}`](https://doc.rust-lang.org/stable/std/collections/btree_map/struct.IntoIter.html)\n- [`Default for std::collections::btree_map::{IntoKeys, Keys}`](https://doc.rust-lang.org/stable/std/collections/btree_map/struct.IntoKeys.html)\n- [`Default for std::collections::btree_map::{IntoValues, Values}`](https://doc.rust-lang.org/stable/std/collections/btree_map/struct.IntoValues.html)\n- [`Default for std::collections::btree_map::Range`](https://doc.rust-lang.org/stable/std/collections/btree_map/struct.Range.html)\n- [`Default for std::collections::btree_set::{IntoIter, Iter}`](https://doc.rust-lang.org/stable/std/collections/btree_set/struct.IntoIter.html)\n- [`Default for std::collections::btree_set::Range`](https://doc.rust-lang.org/stable/std/collections/btree_set/struct.Range.html)\n- [`Default for std::collections::linked_list::{IntoIter, Iter, IterMut}`](https://doc.rust-lang.org/stable/alloc/collections/linked_list/struct.IntoIter.html)\n- [`Default for std::vec::IntoIter`](https://doc.rust-lang.org/stable/alloc/vec/struct.IntoIter.html#impl-Default-for-IntoIter%3CT,+A%3E)\n- [`Default for std::iter::Chain`](https://doc.rust-lang.org/stable/std/iter/struct.Chain.html)\n- [`Default for std::iter::Cloned`](https://doc.rust-lang.org/stable/std/iter/struct.Cloned.html)\n- [`Default for std::iter::Copied`](https://doc.rust-lang.org/stable/std/iter/struct.Copied.html)\n- [`Default for std::iter::Enumerate`](https://doc.rust-lang.org/stable/std/iter/struct.Enumerate.html)\n- [`Default for std::iter::Flatten`](https://doc.rust-lang.org/stable/std/iter/struct.Flatten.html)\n- [`Default for std::iter::Fuse`](https://doc.rust-lang.org/stable/std/iter/struct.Fuse.html)\n- [`Default for std::iter::Rev`](https://doc.rust-lang.org/stable/std/iter/struct.Rev.html)\n- [`Default for std::slice::Iter`](https://doc.rust-lang.org/stable/std/slice/struct.Iter.html)\n- [`Default for std::slice::IterMut`](https://doc.rust-lang.org/stable/std/slice/struct.IterMut.html)\n- [`Rc::into_inner`](https://doc.rust-lang.org/stable/alloc/rc/struct.Rc.html#method.into_inner)\n- [`Arc::into_inner`](https://doc.rust-lang.org/stable/alloc/sync/struct.Arc.html#method.into_inner)\n- [`std::cell::OnceCell`](https://doc.rust-lang.org/stable/std/cell/struct.OnceCell.html)\n- [`Option::is_some_and`](https://doc.rust-lang.org/stable/std/option/enum.Option.html#method.is_some_and)\n- [`NonNull::slice_from_raw_parts`](https://doc.rust-lang.org/stable/std/ptr/struct.NonNull.html#method.slice_from_raw_parts)\n- [`Result::is_ok_and`](https://doc.rust-lang.org/stable/std/result/enum.Result.html#method.is_ok_and)\n- [`Result::is_err_and`](https://doc.rust-lang.org/stable/std/result/enum.Result.html#method.is_err_and)\n- [`std::sync::atomic::Atomic*::as_ptr`](https://doc.rust-lang.org/stable/std/sync/atomic/struct.AtomicU8.html#method.as_ptr)\n- [`std::io::IsTerminal`](https://doc.rust-lang.org/stable/std/io/trait.IsTerminal.html)\n- [`std::os::linux::net::SocketAddrExt`](https://doc.rust-lang.org/stable/std/os/linux/net/trait.SocketAddrExt.html)\n- [`std::os::unix::net::UnixDatagram::bind_addr`](https://doc.rust-lang.org/stable/std/os/unix/net/struct.UnixDatagram.html#method.bind_addr)\n- [`std::os::unix::net::UnixDatagram::connect_addr`](https://doc.rust-lang.org/stable/std/os/unix/net/struct.UnixDatagram.html#method.connect_addr)\n- [`std::os::unix::net::UnixDatagram::send_to_addr`](https://doc.rust-lang.org/stable/std/os/unix/net/struct.UnixDatagram.html#method.send_to_addr)\n- [`std::os::unix::net::UnixListener::bind_addr`](https://doc.rust-lang.org/stable/std/os/unix/net/struct.UnixListener.html#method.bind_addr)\n- [`std::path::Path::as_mut_os_str`](https://doc.rust-lang.org/stable/std/path/struct.Path.html#method.as_mut_os_str)\n- [`std::sync::OnceLock`](https://doc.rust-lang.org/stable/std/sync/struct.OnceLock.html)\n\n<a id=\"1.70.0-Cargo\"></a>\n\nCargo\n-----\n\n- [Add `CARGO_PKG_README`](https://github.com/rust-lang/cargo/pull/11645/)\n- [Make `sparse` the default protocol for crates.io](https://github.com/rust-lang/cargo/pull/11791/)\n- [Accurately show status when downgrading dependencies](https://github.com/rust-lang/cargo/pull/11839/)\n- [Use registry.default for login/logout](https://github.com/rust-lang/cargo/pull/11949/)\n- [Stabilize `cargo logout`](https://github.com/rust-lang/cargo/pull/11950/)\n\n<a id=\"1.70.0-Misc\"></a>\n\nMisc\n----\n\n- [Stabilize rustdoc `--test-run-directory`](https://github.com/rust-lang/rust/pull/103682/)\n\n<a id=\"1.70.0-Compatibility-Notes\"></a>\n\nCompatibility Notes\n-------------------\n\n- [Prevent stable `libtest` from supporting `-Zunstable-options`](https://github.com/rust-lang/rust/pull/109044/)\n- [Perform const and unsafe checking for expressions in `let _ = expr` position.](https://github.com/rust-lang/rust/pull/102256/)\n- [WebAssembly targets enable `sign-ext` and `mutable-globals` features in codegen](https://github.com/rust-lang/rust/issues/109807)\n  This may cause incompatibility with older execution environments.\n- [Insert alignment checks for pointer dereferences as debug assertions](https://github.com/rust-lang/rust/pull/98112)\n  This catches undefined behavior at runtime, and may cause existing code to fail.\n\n<a id=\"1.70.0-Internal-Changes\"></a>\n\nInternal Changes\n----------------\n\nThese changes do not affect any public interfaces of Rust, but they represent\nsignificant improvements to the performance or internals of rustc and related\ntools.\n\n- [Upgrade to LLVM 16](https://github.com/rust-lang/rust/pull/109474/)\n- [Use SipHash-1-3 instead of SipHash-2-4 for StableHasher](https://github.com/rust-lang/rust/pull/107925/)\n\nVersion 1.69.0 (2023-04-20)\n==========================\n\n<a id=\"1.69.0-Language\"></a>\n\nLanguage\n--------\n\n- [Deriving built-in traits on packed structs works with `Copy` fields.](https://github.com/rust-lang/rust/pull/104429/)\n- [Stabilize the `cmpxchg16b` target feature on x86 and x86_64.](https://github.com/rust-lang/rust/pull/106774/)\n- [Improve analysis of trait bounds for associated types.](https://github.com/rust-lang/rust/pull/103695/)\n- [Allow associated types to be used as union fields.](https://github.com/rust-lang/rust/pull/106938/)\n- [Allow `Self: Autotrait` bounds on dyn-safe trait methods.](https://github.com/rust-lang/rust/pull/107082/)\n- [Treat `str` as containing `[u8]` for auto trait purposes.](https://github.com/rust-lang/rust/pull/107941/)\n\n<a id=\"1.69.0-Compiler\"></a>\n\nCompiler\n--------\n\n- [Upgrade `*-pc-windows-gnu` on CI to mingw-w64 v10 and GCC 12.2.](https://github.com/rust-lang/rust/pull/100178/)\n- [Rework min_choice algorithm of member constraints.](https://github.com/rust-lang/rust/pull/105300/)\n- [Support `true` and `false` as boolean flags in compiler arguments.](https://github.com/rust-lang/rust/pull/107043/)\n- [Default `repr(C)` enums to `c_int` size.](https://github.com/rust-lang/rust/pull/107592/)\n\n<a id=\"1.69.0-Libraries\"></a>\n\nLibraries\n---------\n\n- [Implement the unstable `DispatchFromDyn` for cell types, allowing downstream experimentation with custom method receivers.](https://github.com/rust-lang/rust/pull/97373/)\n- [Document that `fmt::Arguments::as_str()` may return `Some(_)` in more cases after optimization, subject to change.](https://github.com/rust-lang/rust/pull/106823/)\n- [Implement `AsFd` and `AsRawFd` for `Rc`.](https://github.com/rust-lang/rust/pull/107317/)\n\n<a id=\"1.69.0-Stabilized-APIs\"></a>\n\nStabilized APIs\n---------------\n\n- [`CStr::from_bytes_until_nul`](https://doc.rust-lang.org/stable/core/ffi/struct.CStr.html#method.from_bytes_until_nul)\n- [`core::ffi::FromBytesUntilNulError`](https://doc.rust-lang.org/stable/core/ffi/struct.FromBytesUntilNulError.html)\n\nThese APIs are now stable in const contexts:\n\n- [`SocketAddr::new`](https://doc.rust-lang.org/stable/std/net/enum.SocketAddr.html#method.new)\n- [`SocketAddr::ip`](https://doc.rust-lang.org/stable/std/net/enum.SocketAddr.html#method.ip)\n- [`SocketAddr::port`](https://doc.rust-lang.org/stable/std/net/enum.SocketAddr.html#method.port)\n- [`SocketAddr::is_ipv4`](https://doc.rust-lang.org/stable/std/net/enum.SocketAddr.html#method.is_ipv4)\n- [`SocketAddr::is_ipv6`](https://doc.rust-lang.org/stable/std/net/enum.SocketAddr.html#method.is_ipv6)\n- [`SocketAddrV4::new`](https://doc.rust-lang.org/stable/std/net/struct.SocketAddrV4.html#method.new)\n- [`SocketAddrV4::ip`](https://doc.rust-lang.org/stable/std/net/struct.SocketAddrV4.html#method.ip)\n- [`SocketAddrV4::port`](https://doc.rust-lang.org/stable/std/net/struct.SocketAddrV4.html#method.port)\n- [`SocketAddrV6::new`](https://doc.rust-lang.org/stable/std/net/struct.SocketAddrV6.html#method.new)\n- [`SocketAddrV6::ip`](https://doc.rust-lang.org/stable/std/net/struct.SocketAddrV6.html#method.ip)\n- [`SocketAddrV6::port`](https://doc.rust-lang.org/stable/std/net/struct.SocketAddrV6.html#method.port)\n- [`SocketAddrV6::flowinfo`](https://doc.rust-lang.org/stable/std/net/struct.SocketAddrV6.html#method.flowinfo)\n- [`SocketAddrV6::scope_id`](https://doc.rust-lang.org/stable/std/net/struct.SocketAddrV6.html#method.scope_id)\n\n<a id=\"1.69.0-Cargo\"></a>\n\nCargo\n-----\n\n- [Cargo now suggests `cargo fix` or `cargo clippy --fix` when compilation warnings are auto-fixable.](https://github.com/rust-lang/cargo/pull/11558/)\n- [Cargo now suggests `cargo add` if you try to install a library crate.](https://github.com/rust-lang/cargo/pull/11410/)\n- [Cargo now sets the `CARGO_BIN_NAME` environment variable also for binary examples.](https://github.com/rust-lang/cargo/pull/11705/)\n\n<a id=\"1.69.0-Rustdoc\"></a>\n\nRustdoc\n-----\n\n- [Vertically compact trait bound formatting.](https://github.com/rust-lang/rust/pull/102842/)\n- [Only include stable lints in `rustdoc::all` group.](https://github.com/rust-lang/rust/pull/106316/)\n- [Compute maximum Levenshtein distance based on the query.](https://github.com/rust-lang/rust/pull/107141/)\n- [Remove inconsistently-present sidebar tooltips.](https://github.com/rust-lang/rust/pull/107490/)\n- [Search by macro when query ends with `!`.](https://github.com/rust-lang/rust/pull/108143/)\n\n<a id=\"1.69.0-Compatibility-Notes\"></a>\n\nCompatibility Notes\n-------------------\n\n- [The `rust-analysis` component from `rustup` now only contains a warning placeholder.](https://github.com/rust-lang/rust/pull/101841/) This was primarily intended for RLS, and the corresponding `-Zsave-analysis` flag has been removed from the compiler as well.\n- [Unaligned references to packed fields are now a hard error.](https://github.com/rust-lang/rust/pull/102513/) This has been a warning since 1.53, and denied by default with a future-compatibility warning since 1.62.\n- [Update the minimum external LLVM to 14.](https://github.com/rust-lang/rust/pull/107573/)\n- [Cargo now emits errors on invalid characters in a registry token.](https://github.com/rust-lang/cargo/pull/11600/)\n- [When `default-features` is set to false of a workspace dependency, and an inherited dependency of a member has `default-features = true`, Cargo will enable default features of that dependency.](https://github.com/rust-lang/cargo/pull/11409/)\n- [Cargo denies `CARGO_HOME` in the `[env]` configuration table. Cargo itself doesn't pick up this value, but recursive calls to cargo would, which was not intended.](https://github.com/rust-lang/cargo/pull/11644/)\n- [Debuginfo for build dependencies is now off if not explicitly set. This is expected to improve the overall build time.](https://github.com/rust-lang/cargo/pull/11252/)\n- [The Rust distribution no longer always includes rustdoc](https://github.com/rust-lang/rust/pull/106886)\n  If `tools = [...]` is set in config.toml, we will respect a missing rustdoc in that list. By\n  default rustdoc remains included. To retain the prior behavior explicitly add `\"rustdoc\"` to the\n  list.\n  \n<a id=\"1.69.0-Internal-Changes\"></a>\n\nInternal Changes\n----------------\n\nThese changes do not affect any public interfaces of Rust, but they represent\nsignificant improvements to the performance or internals of rustc and related\ntools.\n\n- [Move `format_args!()` into AST (and expand it during AST lowering)](https://github.com/rust-lang/rust/pull/106745/)\n\nVersion 1.68.2 (2023-03-28)\n===========================\n\n- [Update the GitHub RSA host key bundled within Cargo](https://github.com/rust-lang/cargo/pull/11883).\n  The key was [rotated by GitHub](https://github.blog/2023-03-23-we-updated-our-rsa-ssh-host-key/)\n  on 2023-03-24 after the old one leaked.\n- [Mark the old GitHub RSA host key as revoked](https://github.com/rust-lang/cargo/pull/11889).\n  This will prevent Cargo from accepting the leaked key even when trusted by\n  the system.\n- [Add support for `@revoked` and a better error message for `@cert-authority` in Cargo's SSH host key verification](https://github.com/rust-lang/cargo/pull/11635)\n\nVersion 1.68.1 (2023-03-23)\n===========================\n\n- [Fix miscompilation in produced Windows MSVC artifacts](https://github.com/rust-lang/rust/pull/109094)\n  This was introduced by enabling ThinLTO for the distributed rustc which led\n  to miscompilations in the resulting binary. Currently this is believed to be\n  limited to the -Zdylib-lto flag used for rustc compilation, rather than a\n  general bug in ThinLTO, so only rustc artifacts should be affected.\n- [Fix --enable-local-rust builds](https://github.com/rust-lang/rust/pull/109111/)\n- [Treat `$prefix-clang` as `clang` in linker detection code](https://github.com/rust-lang/rust/pull/109156)\n- [Fix panic in compiler code](https://github.com/rust-lang/rust/pull/108162)\n\nVersion 1.68.0 (2023-03-09)\n==========================\n\n<a id=\"1.68.0-Language\"></a>\n\nLanguage\n--------\n\n- [Stabilize default_alloc_error_handler](https://github.com/rust-lang/rust/pull/102318/)\n  This allows usage of `alloc` on stable without requiring the \n  definition of a handler for allocation failure. Defining custom handlers is still unstable.\n- [Stabilize `efiapi` calling convention.](https://github.com/rust-lang/rust/pull/105795/)\n- [Remove implicit promotion for types with drop glue](https://github.com/rust-lang/rust/pull/105085/)\n\n<a id=\"1.68.0-Compiler\"></a>\n\nCompiler\n--------\n\n- [Change `bindings_with_variant_name` to deny-by-default](https://github.com/rust-lang/rust/pull/104154/)\n- [Allow .. to be parsed as let initializer](https://github.com/rust-lang/rust/pull/105701/)\n- [Add `armv7-sony-vita-newlibeabihf` as a tier 3 target](https://github.com/rust-lang/rust/pull/105712/)\n- [Always check alignment during compile-time const evaluation](https://github.com/rust-lang/rust/pull/104616/)\n- [Disable \"split dwarf inlining\" by default.](https://github.com/rust-lang/rust/pull/106709/)\n- [Add vendor to Fuchsia's target triple](https://github.com/rust-lang/rust/pull/106429/)\n- [Enable sanitizers for s390x-linux](https://github.com/rust-lang/rust/pull/107127/)\n\n<a id=\"1.68.0-Libraries\"></a>\n\nLibraries\n---------\n\n- [Loosen the bound on the Debug implementation of Weak.](https://github.com/rust-lang/rust/pull/90291/)\n- [Make `std::task::Context` !Send and !Sync](https://github.com/rust-lang/rust/pull/95985/)\n- [PhantomData layout guarantees](https://github.com/rust-lang/rust/pull/104081/)\n- [Don't derive Debug for `OnceWith` & `RepeatWith`](https://github.com/rust-lang/rust/pull/104163/)\n- [Implement DerefMut for PathBuf](https://github.com/rust-lang/rust/pull/105018/)\n- [Add O(1) `Vec -> VecDeque` conversion guarantee](https://github.com/rust-lang/rust/pull/105128/)\n- [Leak amplification for peek_mut() to ensure BinaryHeap's invariant is always met](https://github.com/rust-lang/rust/pull/105851/)\n\n<a id=\"1.68.0-Stabilized-APIs\"></a>\n\nStabilized APIs\n---------------\n\n- [`{core,std}::pin::pin!`](https://doc.rust-lang.org/stable/std/pin/macro.pin.html)\n- [`impl From<bool> for {f32,f64}`](https://doc.rust-lang.org/stable/std/primitive.f32.html#impl-From%3Cbool%3E-for-f32)\n- [`std::path::MAIN_SEPARATOR_STR`](https://doc.rust-lang.org/stable/std/path/constant.MAIN_SEPARATOR_STR.html)\n- [`impl DerefMut for PathBuf`](https://doc.rust-lang.org/stable/std/path/struct.PathBuf.html#impl-DerefMut-for-PathBuf)\n\nThese APIs are now stable in const contexts:\n\n- [`VecDeque::new`](https://doc.rust-lang.org/stable/std/collections/struct.VecDeque.html#method.new)\n\n<a id=\"1.68.0-Cargo\"></a>\n\nCargo\n-----\n\n- [Stabilize sparse registry support for crates.io](https://github.com/rust-lang/cargo/pull/11224/)\n- [`cargo build --verbose` tells you more about why it recompiles.](https://github.com/rust-lang/cargo/pull/11407/)\n- [Show progress of crates.io index update even `net.git-fetch-with-cli` option enabled](https://github.com/rust-lang/cargo/pull/11579/)\n\n<a id=\"1.68.0-Misc\"></a>\n\nMisc\n----\n\n<a id=\"1.68.0-Compatibility-Notes\"></a>\n\nCompatibility Notes\n-------------------\n\n- [Only support Android NDK 25 or newer](https://blog.rust-lang.org/2023/01/09/android-ndk-update-r25.html)\n- [Add `SEMICOLON_IN_EXPRESSIONS_FROM_MACROS` to future-incompat report](https://github.com/rust-lang/rust/pull/103418/)\n- [Only specify `--target` by default for `-Zgcc-ld=lld` on wasm](https://github.com/rust-lang/rust/pull/101792/)\n- [Bump `IMPLIED_BOUNDS_ENTAILMENT` to Deny + ReportNow](https://github.com/rust-lang/rust/pull/106465/)\n- [`std::task::Context` no longer implements Send and Sync](https://github.com/rust-lang/rust/pull/95985)\n\n<a id=\"1.68.0-Internal-Changes\"></a>\n\nInternal Changes\n----------------\n\nThese changes do not affect any public interfaces of Rust, but they represent\nsignificant improvements to the performance or internals of rustc and related\ntools.\n\n- [Encode spans relative to the enclosing item](https://github.com/rust-lang/rust/pull/84762/)\n- [Don't normalize in AstConv](https://github.com/rust-lang/rust/pull/101947/)\n- [Find the right lower bound region in the scenario of partial order relations](https://github.com/rust-lang/rust/pull/104765/)\n- [Fix impl block in const expr](https://github.com/rust-lang/rust/pull/104889/)\n- [Check ADT fields for copy implementations considering regions](https://github.com/rust-lang/rust/pull/105102/)\n- [rustdoc: simplify JS search routine by not messing with lev distance](https://github.com/rust-lang/rust/pull/105796/)\n- [Enable ThinLTO for rustc on `x86_64-pc-windows-msvc`](https://github.com/rust-lang/rust/pull/103591/)\n- [Enable ThinLTO for rustc on `x86_64-apple-darwin`](https://github.com/rust-lang/rust/pull/103647/)\n\nVersion 1.67.1 (2023-02-09)\n===========================\n\n- [Fix interoperability with thin archives.](https://github.com/rust-lang/rust/pull/107360)\n- [Fix an internal error in the compiler build process.](https://github.com/rust-lang/rust/pull/105624)\n- [Downgrade `clippy::uninlined_format_args` to pedantic.](https://github.com/rust-lang/rust-clippy/pull/10265)\n\nVersion 1.67.0 (2023-01-26)\n==========================\n\n<a id=\"1.67.0-Language\"></a>\n\nLanguage\n--------\n\n- [Make `Sized` predicates coinductive, allowing cycles.](https://github.com/rust-lang/rust/pull/100386/)\n- [`#[must_use]` annotations on `async fn` also affect the `Future::Output`.](https://github.com/rust-lang/rust/pull/100633/)\n- [Elaborate supertrait obligations when deducing closure signatures.](https://github.com/rust-lang/rust/pull/101834/)\n- [Invalid literals are no longer an error under `cfg(FALSE)`.](https://github.com/rust-lang/rust/pull/102944/)\n- [Unreserve braced enum variants in value namespace.](https://github.com/rust-lang/rust/pull/103578/)\n\n<a id=\"1.67.0-Compiler\"></a>\n\nCompiler\n--------\n\n- [Enable varargs support for calling conventions other than `C` or `cdecl`.](https://github.com/rust-lang/rust/pull/97971/)\n- [Add new MIR constant propagation based on dataflow analysis.](https://github.com/rust-lang/rust/pull/101168/)\n- [Optimize field ordering by grouping m\\*2^n-sized fields with equivalently aligned ones.](https://github.com/rust-lang/rust/pull/102750/)\n- [Stabilize native library modifier `verbatim`.](https://github.com/rust-lang/rust/pull/104360/)\n\nAdded, updated, and removed targets:\n\n- [Add a tier 3 target for PowerPC on AIX](https://github.com/rust-lang/rust/pull/102293/), `powerpc64-ibm-aix`.\n- [Add a tier 3 target for the Sony PlayStation 1](https://github.com/rust-lang/rust/pull/102689/), `mipsel-sony-psx`.\n- [Add tier 3 `no_std` targets for the QNX Neutrino RTOS](https://github.com/rust-lang/rust/pull/102701/),\n  `aarch64-unknown-nto-qnx710` and `x86_64-pc-nto-qnx710`.\n- [Promote UEFI targets to tier 2](https://github.com/rust-lang/rust/pull/103933/), `aarch64-unknown-uefi`, `i686-unknown-uefi`, and `x86_64-unknown-uefi`.\n- [Remove tier 3 `linuxkernel` targets](https://github.com/rust-lang/rust/pull/104015/) (not used by the actual kernel).\n\nRefer to Rust's [platform support page][platform-support-doc]\nfor more information on Rust's tiered platform support.\n\n<a id=\"1.67.0-Libraries\"></a>\n\nLibraries\n---------\n\n- [Merge `crossbeam-channel` into `std::sync::mpsc`.](https://github.com/rust-lang/rust/pull/93563/)\n- [Fix inconsistent rounding of 0.5 when formatted to 0 decimal places.](https://github.com/rust-lang/rust/pull/102935/)\n- [Derive `Eq` and `Hash` for `ControlFlow`.](https://github.com/rust-lang/rust/pull/103084/)\n- [Don't build `compiler_builtins` with `-C panic=abort`.](https://github.com/rust-lang/rust/pull/103786/)\n\n<a id=\"1.67.0-Stabilized-APIs\"></a>\n\nStabilized APIs\n---------------\n\n- [`{integer}::checked_ilog`](https://doc.rust-lang.org/stable/std/primitive.i32.html#method.checked_ilog)\n- [`{integer}::checked_ilog2`](https://doc.rust-lang.org/stable/std/primitive.i32.html#method.checked_ilog2)\n- [`{integer}::checked_ilog10`](https://doc.rust-lang.org/stable/std/primitive.i32.html#method.checked_ilog10)\n- [`{integer}::ilog`](https://doc.rust-lang.org/stable/std/primitive.i32.html#method.ilog)\n- [`{integer}::ilog2`](https://doc.rust-lang.org/stable/std/primitive.i32.html#method.ilog2)\n- [`{integer}::ilog10`](https://doc.rust-lang.org/stable/std/primitive.i32.html#method.ilog10)\n- [`NonZeroU*::ilog2`](https://doc.rust-lang.org/stable/std/num/struct.NonZeroU32.html#method.ilog2)\n- [`NonZeroU*::ilog10`](https://doc.rust-lang.org/stable/std/num/struct.NonZeroU32.html#method.ilog10)\n- [`NonZero*::BITS`](https://doc.rust-lang.org/stable/std/num/struct.NonZeroU32.html#associatedconstant.BITS)\n\nThese APIs are now stable in const contexts:\n\n- [`char::from_u32`](https://doc.rust-lang.org/stable/std/primitive.char.html#method.from_u32)\n- [`char::from_digit`](https://doc.rust-lang.org/stable/std/primitive.char.html#method.from_digit)\n- [`char::to_digit`](https://doc.rust-lang.org/stable/std/primitive.char.html#method.to_digit)\n- [`core::char::from_u32`](https://doc.rust-lang.org/stable/core/char/fn.from_u32.html)\n- [`core::char::from_digit`](https://doc.rust-lang.org/stable/core/char/fn.from_digit.html)\n\n<a id=\"1.67.0-Compatibility-Notes\"></a>\n\nCompatibility Notes\n-------------------\n\n- [The layout of `repr(Rust)` types now groups m\\*2^n-sized fields with\n  equivalently aligned ones.](https://github.com/rust-lang/rust/pull/102750/)\n  This is intended to be an optimization, but it is also known to increase type\n  sizes in a few cases for the placement of enum tags. As a reminder, the layout\n  of `repr(Rust)` types is an implementation detail, subject to change.\n- [0.5 now rounds to 0 when formatted to 0 decimal places.](https://github.com/rust-lang/rust/pull/102935/)\n  This makes it consistent with the rest of floating point formatting that\n  rounds ties toward even digits.\n- [Chains of `&&` and `||` will now drop temporaries from their sub-expressions in\n  evaluation order, left-to-right.](https://github.com/rust-lang/rust/pull/103293/)\n  Previously, it was \"twisted\" such that the _first_ expression dropped its\n  temporaries _last_, after all of the other expressions dropped in order.\n- [Underscore suffixes on string literals are now a hard error.](https://github.com/rust-lang/rust/pull/103914/)\n  This has been a future-compatibility warning since 1.20.0.\n- [Stop passing `-export-dynamic` to `wasm-ld`.](https://github.com/rust-lang/rust/pull/105405/)\n- [`main` is now mangled as `__main_void` on `wasm32-wasi`.](https://github.com/rust-lang/rust/pull/105468/)\n- [Cargo now emits an error if there are multiple registries in the configuration\n  with the same index URL.](https://github.com/rust-lang/cargo/pull/10592)\n\n<a id=\"1.67.0-Internal-Changes\"></a>\n\nInternal Changes\n----------------\n\nThese changes do not affect any public interfaces of Rust, but they represent\nsignificant improvements to the performance or internals of rustc and related\ntools.\n\n- [Rewrite LLVM's archive writer in Rust.](https://github.com/rust-lang/rust/pull/97485/)\n\nVersion 1.66.1 (2023-01-10)\n===========================\n\n- Added validation of SSH host keys for git URLs in Cargo ([CVE-2022-46176](https://www.cve.org/CVERecord?id=CVE-2022-46176))\n\nVersion 1.66.0 (2022-12-15)\n==========================\n\nLanguage\n--------\n- [Permit specifying explicit discriminants on all `repr(Int)` enums](https://github.com/rust-lang/rust/pull/95710/)\n  ```rust\n  #[repr(u8)]\n  enum Foo {\n      A(u8) = 0,\n      B(i8) = 1,\n      C(bool) = 42,\n  }\n  ```\n- [Allow transmutes between the same type differing only in lifetimes](https://github.com/rust-lang/rust/pull/101520/)\n- [Change constant evaluation errors from a deny-by-default lint to a hard error](https://github.com/rust-lang/rust/pull/102091/)\n- [Trigger `must_use` on `impl Trait` for supertraits](https://github.com/rust-lang/rust/pull/102287/)\n  This makes `impl ExactSizeIterator` respect the existing `#[must_use]` annotation on `Iterator`.\n- [Allow `..=X` in patterns](https://github.com/rust-lang/rust/pull/102275/)\n- [Uplift `clippy::for_loops_over_fallibles` lint into rustc](https://github.com/rust-lang/rust/pull/99696/)\n- [Stabilize `sym` operands in inline assembly](https://github.com/rust-lang/rust/pull/103168/)\n- [Update to Unicode 15](https://github.com/rust-lang/rust/pull/101912/)\n- [Opaque types no longer imply lifetime bounds](https://github.com/rust-lang/rust/pull/95474/)\n  This is a soundness fix which may break code that was erroneously relying on this behavior.\n\nCompiler\n--------\n- [Add armv5te-none-eabi and thumbv5te-none-eabi tier 3 targets](https://github.com/rust-lang/rust/pull/101329/)\n  - Refer to Rust's [platform support page][platform-support-doc] for more\n    information on Rust's tiered platform support.\n- [Add support for linking against macOS universal libraries](https://github.com/rust-lang/rust/pull/98736)\n\nLibraries\n---------\n- [Fix `#[derive(Default)]` on a generic `#[default]` enum adding unnecessary `Default` bounds](https://github.com/rust-lang/rust/pull/101040/)\n- [Update to Unicode 15](https://github.com/rust-lang/rust/pull/101821/)\n\nStabilized APIs\n---------------\n\n- [`proc_macro::Span::source_text`](https://doc.rust-lang.org/stable/proc_macro/struct.Span.html#method.source_text)\n- [`uX::{checked_add_signed, overflowing_add_signed, saturating_add_signed, wrapping_add_signed}`](https://doc.rust-lang.org/stable/std/primitive.u8.html#method.checked_add_signed)\n- [`iX::{checked_add_unsigned, overflowing_add_unsigned, saturating_add_unsigned, wrapping_add_unsigned}`](https://doc.rust-lang.org/stable/std/primitive.i8.html#method.checked_add_unsigned)\n- [`iX::{checked_sub_unsigned, overflowing_sub_unsigned, saturating_sub_unsigned, wrapping_sub_unsigned}`](https://doc.rust-lang.org/stable/std/primitive.i8.html#method.checked_sub_unsigned)\n- [`BTreeSet::{first, last, pop_first, pop_last}`](https://doc.rust-lang.org/stable/std/collections/struct.BTreeSet.html#method.first)\n- [`BTreeMap::{first_key_value, last_key_value, first_entry, last_entry, pop_first, pop_last}`](https://doc.rust-lang.org/stable/std/collections/struct.BTreeMap.html#method.first_key_value)\n- [Add `AsFd` implementations for stdio lock types on WASI.](https://github.com/rust-lang/rust/pull/101768/)\n- [`impl TryFrom<Vec<T>> for Box<[T; N]>`](https://doc.rust-lang.org/stable/std/boxed/struct.Box.html#impl-TryFrom%3CVec%3CT%2C%20Global%3E%3E-for-Box%3C%5BT%3B%20N%5D%2C%20Global%3E)\n- [`core::hint::black_box`](https://doc.rust-lang.org/stable/std/hint/fn.black_box.html)\n- [`Duration::try_from_secs_{f32,f64}`](https://doc.rust-lang.org/stable/std/time/struct.Duration.html#method.try_from_secs_f32)\n- [`Option::unzip`](https://doc.rust-lang.org/stable/std/option/enum.Option.html#method.unzip)\n- [`std::os::fd`](https://doc.rust-lang.org/stable/std/os/fd/index.html)\n\n\nRustdoc\n-------\n\n- [Add Rustdoc warning for invalid HTML tags in the documentation](https://github.com/rust-lang/rust/pull/101720/)\n\nCargo\n-----\n\n- [Added `cargo remove` to remove dependencies from Cargo.toml](https://doc.rust-lang.org/nightly/cargo/commands/cargo-remove.html)\n- [`cargo publish` now waits for the new version to be downloadable before exiting](https://github.com/rust-lang/cargo/pull/11062)\n\nSee [detailed release notes](https://github.com/rust-lang/cargo/blob/master/CHANGELOG.md#cargo-166-2022-12-15) for more.\n\nCompatibility Notes\n-------------------\n\n- [Only apply `ProceduralMasquerade` hack to older versions of `rental`](https://github.com/rust-lang/rust/pull/94063/)\n- [Don't export `__heap_base` and `__data_end` on wasm32-wasi.](https://github.com/rust-lang/rust/pull/102385/)\n- [Don't export `__wasm_init_memory` on WebAssembly.](https://github.com/rust-lang/rust/pull/102426/)\n- [Only export `__tls_*` on wasm32-unknown-unknown.](https://github.com/rust-lang/rust/pull/102440/)\n- [Don't link to `libresolv` in libstd on Darwin](https://github.com/rust-lang/rust/pull/102766/)\n- [Update libstd's libc to 0.2.135 (to make `libstd` no longer pull in `libiconv.dylib` on Darwin)](https://github.com/rust-lang/rust/pull/103277/)\n- [Opaque types no longer imply lifetime bounds](https://github.com/rust-lang/rust/pull/95474/)\n  This is a soundness fix which may break code that was erroneously relying on this behavior.\n- [Make `order_dependent_trait_objects` show up in future-breakage reports](https://github.com/rust-lang/rust/pull/102635/)\n- [Change std::process::Command spawning to default to inheriting the parent's signal mask](https://github.com/rust-lang/rust/pull/101077/)\n\nInternal Changes\n----------------\n\nThese changes do not affect any public interfaces of Rust, but they represent\nsignificant improvements to the performance or internals of rustc and related\ntools.\n\n- [Enable BOLT for LLVM compilation](https://github.com/rust-lang/rust/pull/94381/)\n- [Enable LTO for rustc_driver.so](https://github.com/rust-lang/rust/pull/101403/)\n\nVersion 1.65.0 (2022-11-03)\n==========================\n\nLanguage\n--------\n- [Error on `as` casts of enums with `#[non_exhaustive]` variants](https://github.com/rust-lang/rust/pull/92744/)\n- [Stabilize `let else`](https://github.com/rust-lang/rust/pull/93628/)\n- [Stabilize generic associated types (GATs)](https://github.com/rust-lang/rust/pull/96709/)\n- [Add lints `let_underscore_drop` and `let_underscore_lock` from Clippy](https://github.com/rust-lang/rust/pull/97739/)\n- [Stabilize `break`ing from arbitrary labeled blocks (\"label-break-value\")](https://github.com/rust-lang/rust/pull/99332/)\n- [Uninitialized integers, floats, and raw pointers are now considered immediate UB](https://github.com/rust-lang/rust/pull/98919/).\n  Usage of `MaybeUninit` is the correct way to work with uninitialized memory.\n- [Stabilize raw-dylib for Windows x86_64, aarch64, and thumbv7a](https://github.com/rust-lang/rust/pull/99916/)\n- [Do not allow `Drop` impl on foreign ADTs](https://github.com/rust-lang/rust/pull/99576/)\n\nCompiler\n--------\n- [Stabilize -Csplit-debuginfo on Linux](https://github.com/rust-lang/rust/pull/98051/)\n- [Use niche-filling optimization even when multiple variants have data](https://github.com/rust-lang/rust/pull/94075/)\n- [Associated type projections are now verified to be well-formed prior to resolving the underlying type](https://github.com/rust-lang/rust/pull/99217/#issuecomment-1209365630)\n- [Stringify non-shorthand visibility correctly](https://github.com/rust-lang/rust/pull/100350/)\n- [Normalize struct field types when unsizing](https://github.com/rust-lang/rust/pull/101831/)\n- [Update to LLVM 15](https://github.com/rust-lang/rust/pull/99464/)\n- [Fix aarch64 call abi to correctly zeroext when needed](https://github.com/rust-lang/rust/pull/97800/)\n- [debuginfo: Generalize C++-like encoding for enums](https://github.com/rust-lang/rust/pull/98393/)\n- [Add `special_module_name` lint](https://github.com/rust-lang/rust/pull/94467/)\n- [Add support for generating unique profraw files by default when using `-C instrument-coverage`](https://github.com/rust-lang/rust/pull/100384/)\n- [Allow dynamic linking for iOS/tvOS targets](https://github.com/rust-lang/rust/pull/100636/)\n\nNew targets:\n\n- [Add armv4t-none-eabi as a tier 3 target](https://github.com/rust-lang/rust/pull/100244/)\n- [Add powerpc64-unknown-openbsd and riscv64-unknown-openbsd as tier 3 targets](https://github.com/rust-lang/rust/pull/101025/)\n  - Refer to Rust's [platform support page][platform-support-doc] for more\n    information on Rust's tiered platform support.\n\nLibraries\n---------\n\n- [Don't generate `PartialEq::ne` in derive(PartialEq)](https://github.com/rust-lang/rust/pull/98655/)\n- [Windows RNG: Use `BCRYPT_RNG_ALG_HANDLE` by default](https://github.com/rust-lang/rust/pull/101325/)\n- [Forbid mixing `System` with direct system allocator calls](https://github.com/rust-lang/rust/pull/101394/)\n- [Document no support for writing to non-blocking stdio/stderr](https://github.com/rust-lang/rust/pull/101416/)\n- [`std::layout::Layout` size must not overflow `isize::MAX` when rounded up to `align`](https://github.com/rust-lang/rust/pull/95295)\n  This also changes the safety conditions on `Layout::from_size_align_unchecked`.\n\nStabilized APIs\n---------------\n\n- [`std::backtrace::Backtrace`](https://doc.rust-lang.org/stable/std/backtrace/struct.Backtrace.html)\n- [`Bound::as_ref`](https://doc.rust-lang.org/stable/std/ops/enum.Bound.html#method.as_ref)\n- [`std::io::read_to_string`](https://doc.rust-lang.org/stable/std/io/fn.read_to_string.html)\n- [`<*const T>::cast_mut`](https://doc.rust-lang.org/stable/std/primitive.pointer.html#method.cast_mut)\n- [`<*mut T>::cast_const`](https://doc.rust-lang.org/stable/std/primitive.pointer.html#method.cast_const)\n\nThese APIs are now stable in const contexts:\n\n- [`<*const T>::offset_from`](https://doc.rust-lang.org/stable/std/primitive.pointer.html#method.offset_from)\n- [`<*mut T>::offset_from`](https://doc.rust-lang.org/stable/std/primitive.pointer.html#method.offset_from)\n\nCargo\n-----\n\n- [Apply GitHub fast path even for partial hashes](https://github.com/rust-lang/cargo/pull/10807/)\n- [Do not add home bin path to PATH if it's already there](https://github.com/rust-lang/cargo/pull/11023/)\n- [Take priority into account within the pending queue](https://github.com/rust-lang/cargo/pull/11032/).\n  This slightly optimizes job scheduling by Cargo, with typically small improvements on larger crate graph builds.\n\nCompatibility Notes\n-------------------\n\n- [`std::layout::Layout` size must not overflow `isize::MAX` when rounded up to `align`](https://github.com/rust-lang/rust/pull/95295).\n  This also changes the safety conditions on `Layout::from_size_align_unchecked`.\n- [`PollFn` now only implements `Unpin` if the closure is `Unpin`](https://github.com/rust-lang/rust/pull/102737).\n  This is a possible breaking change if users were relying on the blanket unpin implementation.\n  See discussion on the PR for details of why this change was made.\n- [Drop ExactSizeIterator impl from std::char::EscapeAscii](https://github.com/rust-lang/rust/pull/99880)\n  This is a backwards-incompatible change to the standard library's surface\n  area, but is unlikely to affect real world usage.\n- [Do not consider a single repeated lifetime eligible for elision in the return type](https://github.com/rust-lang/rust/pull/103450)\n  This behavior was unintentionally changed in 1.64.0, and this release reverts that change by making this an error again.\n- [Reenable disabled early syntax gates as future-incompatibility lints](https://github.com/rust-lang/rust/pull/99935/)\n- [Update the minimum external LLVM to 13](https://github.com/rust-lang/rust/pull/100460/)\n- [Don't duplicate file descriptors into stdio fds](https://github.com/rust-lang/rust/pull/101426/)\n- [Sunset RLS](https://github.com/rust-lang/rust/pull/100863/)\n- [Deny usage of `#![cfg_attr(..., crate_type = ...)]` to set the crate type](https://github.com/rust-lang/rust/pull/99784/)\n  This strengthens the forward compatibility lint deprecated_cfg_attr_crate_type_name to deny.\n- [`llvm-has-rust-patches` allows setting the build system to treat the LLVM as having Rust-specific patches](https://github.com/rust-lang/rust/pull/101072)\n  This option may need to be set for distributions that are building Rust with a patched LLVM via `llvm-config`, not the built-in LLVM.\n- Combining three or more languages (e.g. Objective C, C++ and Rust) into one binary may hit linker limitations when using `lld`. For more information, see [issue 102754][102754].\n\n[102754]: https://github.com/rust-lang/rust/issues/102754\n\nInternal Changes\n----------------\n\nThese changes do not affect any public interfaces of Rust, but they represent\nsignificant improvements to the performance or internals of rustc and related\ntools.\n\n- [Add `x.sh` and `x.ps1` shell scripts](https://github.com/rust-lang/rust/pull/99992/)\n- [compiletest: use target cfg instead of hard-coded tables](https://github.com/rust-lang/rust/pull/100260/)\n- [Use object instead of LLVM for reading bitcode from rlibs](https://github.com/rust-lang/rust/pull/98100/)\n- [Enable MIR inlining for optimized compilations](https://github.com/rust-lang/rust/pull/91743)\n  This provides a 3-10% improvement in compiletimes for real world crates. See [perf results](https://perf.rust-lang.org/compare.html?start=aedf78e56b2279cc869962feac5153b6ba7001ed&end=0075bb4fad68e64b6d1be06bf2db366c30bc75e1&stat=instructions:u).\n\nVersion 1.64.0 (2022-09-22)\n===========================\n\nLanguage\n--------\n- [Unions with mutable references or tuples of allowed types are now allowed](https://github.com/rust-lang/rust/pull/97995/)\n- It is now considered valid to deallocate memory pointed to by a shared reference `&T` [if every byte in `T` is inside an `UnsafeCell`](https://github.com/rust-lang/rust/pull/98017/)\n- Unused tuple struct fields are now warned against in an allow-by-default lint, [`unused_tuple_struct_fields`](https://github.com/rust-lang/rust/pull/95977/), similar to the existing warning for unused struct fields. This lint will become warn-by-default in the future.\n\nCompiler\n--------\n- [Add Nintendo Switch as tier 3 target](https://github.com/rust-lang/rust/pull/88991/)\n  - Refer to Rust's [platform support page][platform-support-doc] for more\n    information on Rust's tiered platform support.\n- [Only compile `#[used]` as llvm.compiler.used for ELF targets](https://github.com/rust-lang/rust/pull/93718/)\n- [Add the `--diagnostic-width` compiler flag to define the terminal width.](https://github.com/rust-lang/rust/pull/95635/)\n- [Add support for link-flavor `rust-lld` for iOS, tvOS and watchOS](https://github.com/rust-lang/rust/pull/98771/)\n\nLibraries\n---------\n- [Remove restrictions on compare-exchange memory ordering.](https://github.com/rust-lang/rust/pull/98383/)\n- You can now `write!` or `writeln!` into an `OsString`: [Implement `fmt::Write` for `OsString`](https://github.com/rust-lang/rust/pull/97915/)\n- [Make RwLockReadGuard covariant](https://github.com/rust-lang/rust/pull/96820/)\n- [Implement `FusedIterator` for `std::net::[Into]Incoming`](https://github.com/rust-lang/rust/pull/97300/)\n- [`impl<T: AsRawFd> AsRawFd for {Arc,Box}<T>`](https://github.com/rust-lang/rust/pull/97437/)\n- [`ptr::copy` and `ptr::swap` are doing untyped copies](https://github.com/rust-lang/rust/pull/97712/)\n- [Add cgroupv1 support to `available_parallelism`](https://github.com/rust-lang/rust/pull/97925/)\n- [Mitigate many incorrect uses of `mem::uninitialized`](https://github.com/rust-lang/rust/pull/99182/)\n\nStabilized APIs\n---------------\n\n- [`future::IntoFuture`](https://doc.rust-lang.org/stable/std/future/trait.IntoFuture.html)\n- [`future::poll_fn`](https://doc.rust-lang.org/stable/std/future/fn.poll_fn.html)\n- [`task::ready!`](https://doc.rust-lang.org/stable/std/task/macro.ready.html)\n- [`num::NonZero*::checked_mul`](https://doc.rust-lang.org/stable/std/num/struct.NonZeroUsize.html#method.checked_mul)\n- [`num::NonZero*::checked_pow`](https://doc.rust-lang.org/stable/std/num/struct.NonZeroUsize.html#method.checked_pow)\n- [`num::NonZero*::saturating_mul`](https://doc.rust-lang.org/stable/std/num/struct.NonZeroUsize.html#method.saturating_mul)\n- [`num::NonZero*::saturating_pow`](https://doc.rust-lang.org/stable/std/num/struct.NonZeroUsize.html#method.saturating_pow)\n- [`num::NonZeroI*::abs`](https://doc.rust-lang.org/stable/std/num/struct.NonZeroIsize.html#method.abs)\n- [`num::NonZeroI*::checked_abs`](https://doc.rust-lang.org/stable/std/num/struct.NonZeroIsize.html#method.checked_abs)\n- [`num::NonZeroI*::overflowing_abs`](https://doc.rust-lang.org/stable/std/num/struct.NonZeroIsize.html#method.overflowing_abs)\n- [`num::NonZeroI*::saturating_abs`](https://doc.rust-lang.org/stable/std/num/struct.NonZeroIsize.html#method.saturating_abs)\n- [`num::NonZeroI*::unsigned_abs`](https://doc.rust-lang.org/stable/std/num/struct.NonZeroIsize.html#method.unsigned_abs)\n- [`num::NonZeroI*::wrapping_abs`](https://doc.rust-lang.org/stable/std/num/struct.NonZeroIsize.html#method.wrapping_abs)\n- [`num::NonZeroU*::checked_add`](https://doc.rust-lang.org/stable/std/num/struct.NonZeroUsize.html#method.checked_add)\n- [`num::NonZeroU*::checked_next_power_of_two`](https://doc.rust-lang.org/stable/std/num/struct.NonZeroUsize.html#method.checked_next_power_of_two)\n- [`num::NonZeroU*::saturating_add`](https://doc.rust-lang.org/stable/std/num/struct.NonZeroUsize.html#method.saturating_add)\n- [`os::unix::process::CommandExt::process_group`](https://doc.rust-lang.org/stable/std/os/unix/process/trait.CommandExt.html#tymethod.process_group)\n- [`os::windows::fs::FileTypeExt::is_symlink_dir`](https://doc.rust-lang.org/stable/std/os/windows/fs/trait.FileTypeExt.html#tymethod.is_symlink_dir)\n- [`os::windows::fs::FileTypeExt::is_symlink_file`](https://doc.rust-lang.org/stable/std/os/windows/fs/trait.FileTypeExt.html#tymethod.is_symlink_file)\n\nThese types were previously stable in `std::ffi`, but are now also available in `core` and `alloc`:\n\n- [`core::ffi::CStr`](https://doc.rust-lang.org/stable/core/ffi/struct.CStr.html)\n- [`core::ffi::FromBytesWithNulError`](https://doc.rust-lang.org/stable/core/ffi/struct.FromBytesWithNulError.html)\n- [`alloc::ffi::CString`](https://doc.rust-lang.org/stable/alloc/ffi/struct.CString.html)\n- [`alloc::ffi::FromVecWithNulError`](https://doc.rust-lang.org/stable/alloc/ffi/struct.FromVecWithNulError.html)\n- [`alloc::ffi::IntoStringError`](https://doc.rust-lang.org/stable/alloc/ffi/struct.IntoStringError.html)\n- [`alloc::ffi::NulError`](https://doc.rust-lang.org/stable/alloc/ffi/struct.NulError.html)\n\nThese types were previously stable in `std::os::raw`, but are now also available in `core::ffi` and `std::ffi`:\n\n- [`ffi::c_char`](https://doc.rust-lang.org/stable/std/ffi/type.c_char.html)\n- [`ffi::c_double`](https://doc.rust-lang.org/stable/std/ffi/type.c_double.html)\n- [`ffi::c_float`](https://doc.rust-lang.org/stable/std/ffi/type.c_float.html)\n- [`ffi::c_int`](https://doc.rust-lang.org/stable/std/ffi/type.c_int.html)\n- [`ffi::c_long`](https://doc.rust-lang.org/stable/std/ffi/type.c_long.html)\n- [`ffi::c_longlong`](https://doc.rust-lang.org/stable/std/ffi/type.c_longlong.html)\n- [`ffi::c_schar`](https://doc.rust-lang.org/stable/std/ffi/type.c_schar.html)\n- [`ffi::c_short`](https://doc.rust-lang.org/stable/std/ffi/type.c_short.html)\n- [`ffi::c_uchar`](https://doc.rust-lang.org/stable/std/ffi/type.c_uchar.html)\n- [`ffi::c_uint`](https://doc.rust-lang.org/stable/std/ffi/type.c_uint.html)\n- [`ffi::c_ulong`](https://doc.rust-lang.org/stable/std/ffi/type.c_ulong.html)\n- [`ffi::c_ulonglong`](https://doc.rust-lang.org/stable/std/ffi/type.c_ulonglong.html)\n- [`ffi::c_ushort`](https://doc.rust-lang.org/stable/std/ffi/type.c_ushort.html)\n\nThese APIs are now usable in const contexts:\n\n- [`slice::from_raw_parts`](https://doc.rust-lang.org/stable/core/slice/fn.from_raw_parts.html)\n\nCargo\n-----\n- [Packages can now inherit settings from the workspace so that the settings\n  can be centralized in one place.](https://github.com/rust-lang/cargo/pull/10859) See\n  [`workspace.package`](https://doc.rust-lang.org/nightly/cargo/reference/workspaces.html#the-workspacepackage-table)\n  and\n  [`workspace.dependencies`](https://doc.rust-lang.org/nightly/cargo/reference/workspaces.html#the-workspacedependencies-table)\n  for more details on how to define these common settings.\n- [Cargo commands can now accept multiple `--target` flags to build for\n  multiple targets at once](https://github.com/rust-lang/cargo/pull/10766), and the\n  [`build.target`](https://doc.rust-lang.org/nightly/cargo/reference/config.html#buildtarget)\n  config option may now take an array of multiple targets.\n- [The `--jobs` argument can now take a negative number to count backwards from\n  the max CPUs.](https://github.com/rust-lang/cargo/pull/10844)\n- [`cargo add` will now update `Cargo.lock`.](https://github.com/rust-lang/cargo/pull/10902)\n- [Added](https://github.com/rust-lang/cargo/pull/10838) the\n  [`--crate-type`](https://doc.rust-lang.org/nightly/cargo/commands/cargo-rustc.html#option-cargo-rustc---crate-type)\n  flag to `cargo rustc` to override the crate type.\n- [Significantly improved the performance fetching git dependencies from GitHub\n  when using a hash in the `rev` field.](https://github.com/rust-lang/cargo/pull/10079)\n\nMisc\n----\n- [The `rust-analyzer` rustup component is now available on the stable channel.](https://github.com/rust-lang/rust/pull/98640/)\n\nCompatibility Notes\n-------------------\n- The minimum required versions for all `-linux-gnu` targets are now at least kernel 3.2 and glibc 2.17, for targets that previously supported older versions: [Increase the minimum linux-gnu versions](https://github.com/rust-lang/rust/pull/95026/)\n- [Network primitives are now implemented with the ideal Rust layout, not the C system layout](https://github.com/rust-lang/rust/pull/78802/). This can cause problems when transmuting the types.\n- [Add assertion that `transmute_copy`'s `U` is not larger than `T`](https://github.com/rust-lang/rust/pull/98839/)\n- [A soundness bug in `BTreeMap` was fixed](https://github.com/rust-lang/rust/pull/99413/) that allowed data it was borrowing to be dropped before the container.\n- [The Drop behavior of C-like enums cast to ints has changed](https://github.com/rust-lang/rust/pull/96862/). These are already discouraged by a compiler warning.\n- [Relate late-bound closure lifetimes to parent fn in NLL](https://github.com/rust-lang/rust/pull/98835/)\n- [Errors at const-eval time are now in future incompatibility reports](https://github.com/rust-lang/rust/pull/97743/)\n- On the `thumbv6m-none-eabi` target, some incorrect `asm!` statements were erroneously accepted if they used the high registers (r8 to r14) as an input/output operand. [This is no longer accepted](https://github.com/rust-lang/rust/pull/99155/).\n- [`impl Trait` was accidentally accepted as the associated type value of return-position `impl Trait`](https://github.com/rust-lang/rust/pull/97346/), without fulfilling all the trait bounds of that associated type, as long as the hidden type satisfies said bounds. This has been fixed.\n\nInternal Changes\n----------------\n\nThese changes do not affect any public interfaces of Rust, but they represent\nsignificant improvements to the performance or internals of rustc and related\ntools.\n\n- Windows builds now use profile-guided optimization, providing 10-20% improvements to compiler performance: [Utilize PGO for windows x64 rustc dist builds](https://github.com/rust-lang/rust/pull/96978/)\n- [Stop keeping metadata in memory before writing it to disk](https://github.com/rust-lang/rust/pull/96544/)\n- [compiletest: strip debuginfo by default for mode=ui](https://github.com/rust-lang/rust/pull/98140/)\n- Many improvements to generated code for derives, including performance improvements:\n  - [Don't use match-destructuring for derived ops on structs.](https://github.com/rust-lang/rust/pull/98446/)\n  - [Many small deriving cleanups](https://github.com/rust-lang/rust/pull/98741/)\n  - [More derive output improvements](https://github.com/rust-lang/rust/pull/98758/)\n  - [Clarify deriving code](https://github.com/rust-lang/rust/pull/98915/)\n  - [Final derive output improvements](https://github.com/rust-lang/rust/pull/99046/)\n  - [Stop injecting `#[allow(unused_qualifications)]` in generated `derive` implementations](https://github.com/rust-lang/rust/pull/99485/)\n  - [Improve `derive(Debug)`](https://github.com/rust-lang/rust/pull/98190/)\n- [Bump to clap 3](https://github.com/rust-lang/rust/pull/98213/)\n- [fully move dropck to mir](https://github.com/rust-lang/rust/pull/98641/)\n- [Optimize `Vec::insert` for the case where `index == len`.](https://github.com/rust-lang/rust/pull/98755/)\n- [Convert rust-analyzer to an in-tree tool](https://github.com/rust-lang/rust/pull/99603/)\n\nVersion 1.63.0 (2022-08-11)\n==========================\n\nLanguage\n--------\n- [Remove migrate borrowck mode for pre-NLL errors.][95565]\n- [Modify MIR building to drop repeat expressions with length zero.][95953]\n- [Remove label/lifetime shadowing warnings.][96296]\n- [Allow explicit generic arguments in the presence of `impl Trait` args.][96868]\n- [Make `cenum_impl_drop_cast` warnings deny-by-default.][97652]\n- [Prevent unwinding when `-C panic=abort` is used regardless of declared ABI.][96959]\n- [lub: don't bail out due to empty binders.][97867]\n\nCompiler\n--------\n- [Stabilize the `bundle` native library modifier,][95818] also removing the\n  deprecated `static-nobundle` linking kind.\n- [Add Apple WatchOS compile targets\\*.][95243]\n- [Add a Windows application manifest to rustc-main.][96737]\n\n\\* Refer to Rust's [platform support page][platform-support-doc] for more\n   information on Rust's tiered platform support.\n\nLibraries\n---------\n- [Implement `Copy`, `Clone`, `PartialEq` and `Eq` for `core::fmt::Alignment`.][94530]\n- [Extend `ptr::null` and `null_mut` to all thin (including extern) types.][94954]\n- [`impl Read and Write for VecDeque<u8>`.][95632]\n- [STD support for the Nintendo 3DS.][95897]\n- [Use rounding in float to Duration conversion methods.][96051]\n- [Make write/print macros eagerly drop temporaries.][96455]\n- [Implement internal traits that enable `[OsStr]::join`.][96881]\n- [Implement `Hash` for `core::alloc::Layout`.][97034]\n- [Add capacity documentation for `OsString`.][97202]\n- [Put a bound on collection misbehavior.][97316]\n- [Make `std::mem::needs_drop` accept `?Sized`.][97675]\n- [`impl Termination for Infallible` and then make the `Result` impls of `Termination` more generic.][97803]\n- [Document Rust's stance on `/proc/self/mem`.][97837]\n\nStabilized APIs\n---------------\n\n- [`array::from_fn`]\n- [`Box::into_pin`]\n- [`BinaryHeap::try_reserve`]\n- [`BinaryHeap::try_reserve_exact`]\n- [`OsString::try_reserve`]\n- [`OsString::try_reserve_exact`]\n- [`PathBuf::try_reserve`]\n- [`PathBuf::try_reserve_exact`]\n- [`Path::try_exists`]\n- [`Ref::filter_map`]\n- [`RefMut::filter_map`]\n- [`NonNull::<[T]>::len`][`NonNull::<slice>::len`]\n- [`ToOwned::clone_into`]\n- [`Ipv6Addr::to_ipv4_mapped`]\n- [`unix::io::AsFd`]\n- [`unix::io::BorrowedFd<'fd>`]\n- [`unix::io::OwnedFd`]\n- [`windows::io::AsHandle`]\n- [`windows::io::BorrowedHandle<'handle>`]\n- [`windows::io::OwnedHandle`]\n- [`windows::io::HandleOrInvalid`]\n- [`windows::io::HandleOrNull`]\n- [`windows::io::InvalidHandleError`]\n- [`windows::io::NullHandleError`]\n- [`windows::io::AsSocket`]\n- [`windows::io::BorrowedSocket<'handle>`]\n- [`windows::io::OwnedSocket`]\n- [`thread::scope`]\n- [`thread::Scope`]\n- [`thread::ScopedJoinHandle`]\n\nThese APIs are now usable in const contexts:\n\n- [`array::from_ref`]\n- [`slice::from_ref`]\n- [`intrinsics::copy`]\n- [`intrinsics::copy_nonoverlapping`]\n- [`<*const T>::copy_to`]\n- [`<*const T>::copy_to_nonoverlapping`]\n- [`<*mut T>::copy_to`]\n- [`<*mut T>::copy_to_nonoverlapping`]\n- [`<*mut T>::copy_from`]\n- [`<*mut T>::copy_from_nonoverlapping`]\n- [`str::from_utf8`]\n- [`Utf8Error::error_len`]\n- [`Utf8Error::valid_up_to`]\n- [`Condvar::new`]\n- [`Mutex::new`]\n- [`RwLock::new`]\n\nCargo\n-----\n- [Stabilize the `--config path` command-line argument.][cargo/10755]\n- [Expose rust-version in the environment as `CARGO_PKG_RUST_VERSION`.][cargo/10713]\n\nCompatibility Notes\n-------------------\n\n- [`#[link]` attributes are now checked more strictly,][96885] which may introduce\n  errors for invalid attribute arguments that were previously ignored.\n- [Rounding is now used when converting a float to a `Duration`.][96051] The converted\n  duration can differ slightly from what it was.\n\nInternal Changes\n----------------\n\nThese changes provide no direct user facing benefits, but represent significant\nimprovements to the internals and overall performance of rustc\nand related tools.\n\n- [Prepare Rust for LLVM opaque pointers.][94214]\n\n[94214]: https://github.com/rust-lang/rust/pull/94214/\n[94530]: https://github.com/rust-lang/rust/pull/94530/\n[94954]: https://github.com/rust-lang/rust/pull/94954/\n[95243]: https://github.com/rust-lang/rust/pull/95243/\n[95565]: https://github.com/rust-lang/rust/pull/95565/\n[95632]: https://github.com/rust-lang/rust/pull/95632/\n[95818]: https://github.com/rust-lang/rust/pull/95818/\n[95897]: https://github.com/rust-lang/rust/pull/95897/\n[95953]: https://github.com/rust-lang/rust/pull/95953/\n[96051]: https://github.com/rust-lang/rust/pull/96051/\n[96296]: https://github.com/rust-lang/rust/pull/96296/\n[96455]: https://github.com/rust-lang/rust/pull/96455/\n[96737]: https://github.com/rust-lang/rust/pull/96737/\n[96868]: https://github.com/rust-lang/rust/pull/96868/\n[96881]: https://github.com/rust-lang/rust/pull/96881/\n[96885]: https://github.com/rust-lang/rust/pull/96885/\n[96959]: https://github.com/rust-lang/rust/pull/96959/\n[97034]: https://github.com/rust-lang/rust/pull/97034/\n[97202]: https://github.com/rust-lang/rust/pull/97202/\n[97316]: https://github.com/rust-lang/rust/pull/97316/\n[97652]: https://github.com/rust-lang/rust/pull/97652/\n[97675]: https://github.com/rust-lang/rust/pull/97675/\n[97803]: https://github.com/rust-lang/rust/pull/97803/\n[97837]: https://github.com/rust-lang/rust/pull/97837/\n[97867]: https://github.com/rust-lang/rust/pull/97867/\n[cargo/10713]: https://github.com/rust-lang/cargo/pull/10713/\n[cargo/10755]: https://github.com/rust-lang/cargo/pull/10755/\n\n[`array::from_fn`]: https://doc.rust-lang.org/stable/std/array/fn.from_fn.html\n[`Box::into_pin`]: https://doc.rust-lang.org/stable/std/boxed/struct.Box.html#method.into_pin\n[`BinaryHeap::try_reserve_exact`]: https://doc.rust-lang.org/stable/alloc/collections/binary_heap/struct.BinaryHeap.html#method.try_reserve_exact\n[`BinaryHeap::try_reserve`]: https://doc.rust-lang.org/stable/std/collections/struct.BinaryHeap.html#method.try_reserve\n[`OsString::try_reserve`]: https://doc.rust-lang.org/stable/std/ffi/struct.OsString.html#method.try_reserve\n[`OsString::try_reserve_exact`]: https://doc.rust-lang.org/stable/std/ffi/struct.OsString.html#method.try_reserve_exact\n[`PathBuf::try_reserve`]: https://doc.rust-lang.org/stable/std/path/struct.PathBuf.html#method.try_reserve\n[`PathBuf::try_reserve_exact`]: https://doc.rust-lang.org/stable/std/path/struct.PathBuf.html#method.try_reserve_exact\n[`Path::try_exists`]: https://doc.rust-lang.org/stable/std/path/struct.Path.html#method.try_exists\n[`Ref::filter_map`]: https://doc.rust-lang.org/stable/std/cell/struct.Ref.html#method.filter_map\n[`RefMut::filter_map`]: https://doc.rust-lang.org/stable/std/cell/struct.RefMut.html#method.filter_map\n[`NonNull::<slice>::len`]: https://doc.rust-lang.org/stable/std/ptr/struct.NonNull.html#method.len\n[`ToOwned::clone_into`]: https://doc.rust-lang.org/stable/std/borrow/trait.ToOwned.html#method.clone_into\n[`Ipv6Addr::to_ipv4_mapped`]: https://doc.rust-lang.org/stable/std/net/struct.Ipv6Addr.html#method.to_ipv4_mapped\n[`unix::io::AsFd`]: https://doc.rust-lang.org/stable/std/os/unix/io/trait.AsFd.html\n[`unix::io::BorrowedFd<'fd>`]: https://doc.rust-lang.org/stable/std/os/unix/io/struct.BorrowedFd.html\n[`unix::io::OwnedFd`]: https://doc.rust-lang.org/stable/std/os/unix/io/struct.OwnedFd.html\n[`windows::io::AsHandle`]: https://doc.rust-lang.org/stable/std/os/windows/io/trait.AsHandle.html\n[`windows::io::BorrowedHandle<'handle>`]: https://doc.rust-lang.org/stable/std/os/windows/io/struct.BorrowedHandle.html\n[`windows::io::OwnedHandle`]: https://doc.rust-lang.org/stable/std/os/windows/io/struct.OwnedHandle.html\n[`windows::io::HandleOrInvalid`]: https://doc.rust-lang.org/stable/std/os/windows/io/struct.HandleOrInvalid.html\n[`windows::io::HandleOrNull`]: https://doc.rust-lang.org/stable/std/os/windows/io/struct.HandleOrNull.html\n[`windows::io::InvalidHandleError`]: https://doc.rust-lang.org/stable/std/os/windows/io/struct.InvalidHandleError.html\n[`windows::io::NullHandleError`]: https://doc.rust-lang.org/stable/std/os/windows/io/struct.NullHandleError.html\n[`windows::io::AsSocket`]: https://doc.rust-lang.org/stable/std/os/windows/io/trait.AsSocket.html\n[`windows::io::BorrowedSocket<'handle>`]: https://doc.rust-lang.org/stable/std/os/windows/io/struct.BorrowedSocket.html\n[`windows::io::OwnedSocket`]: https://doc.rust-lang.org/stable/std/os/windows/io/struct.OwnedSocket.html\n[`thread::scope`]: https://doc.rust-lang.org/stable/std/thread/fn.scope.html\n[`thread::Scope`]: https://doc.rust-lang.org/stable/std/thread/struct.Scope.html\n[`thread::ScopedJoinHandle`]: https://doc.rust-lang.org/stable/std/thread/struct.ScopedJoinHandle.html\n\n[`array::from_ref`]: https://doc.rust-lang.org/stable/std/array/fn.from_ref.html\n[`slice::from_ref`]: https://doc.rust-lang.org/stable/std/slice/fn.from_ref.html\n[`intrinsics::copy`]: https://doc.rust-lang.org/stable/std/intrinsics/fn.copy.html\n[`intrinsics::copy_nonoverlapping`]: https://doc.rust-lang.org/stable/std/intrinsics/fn.copy_nonoverlapping.html\n[`<*const T>::copy_to`]: https://doc.rust-lang.org/stable/std/primitive.pointer.html#method.copy_to\n[`<*const T>::copy_to_nonoverlapping`]: https://doc.rust-lang.org/stable/std/primitive.pointer.html#method.copy_to_nonoverlapping\n[`<*mut T>::copy_to`]: https://doc.rust-lang.org/stable/std/primitive.pointer.html#method.copy_to-1\n[`<*mut T>::copy_to_nonoverlapping`]: https://doc.rust-lang.org/stable/std/primitive.pointer.html#method.copy_to_nonoverlapping-1\n[`<*mut T>::copy_from`]: https://doc.rust-lang.org/stable/std/primitive.pointer.html#method.copy_from\n[`<*mut T>::copy_from_nonoverlapping`]: https://doc.rust-lang.org/stable/std/primitive.pointer.html#method.copy_from_nonoverlapping\n[`str::from_utf8`]: https://doc.rust-lang.org/stable/std/str/fn.from_utf8.html\n[`Utf8Error::error_len`]: https://doc.rust-lang.org/stable/std/str/struct.Utf8Error.html#method.error_len\n[`Utf8Error::valid_up_to`]: https://doc.rust-lang.org/stable/std/str/struct.Utf8Error.html#method.valid_up_to\n[`Condvar::new`]: https://doc.rust-lang.org/stable/std/sync/struct.Condvar.html#method.new\n[`Mutex::new`]: https://doc.rust-lang.org/stable/std/sync/struct.Mutex.html#method.new\n[`RwLock::new`]: https://doc.rust-lang.org/stable/std/sync/struct.RwLock.html#method.new\n\nVersion 1.62.1 (2022-07-19)\n==========================\n\nRust 1.62.1 addresses a few recent regressions in the compiler and standard\nlibrary, and also mitigates a CPU vulnerability on Intel SGX.\n\n* [The compiler fixed unsound function coercions involving `impl Trait` return types.][98608]\n* [The compiler fixed an incremental compilation bug with `async fn` lifetimes.][98890]\n* [Windows added a fallback for overlapped I/O in synchronous reads and writes.][98950]\n* [The `x86_64-fortanix-unknown-sgx` target added a mitigation for the\n  MMIO stale data vulnerability][98126], advisory [INTEL-SA-00615].\n\n[98608]: https://github.com/rust-lang/rust/issues/98608\n[98890]: https://github.com/rust-lang/rust/issues/98890\n[98950]: https://github.com/rust-lang/rust/pull/98950\n[98126]: https://github.com/rust-lang/rust/pull/98126\n[INTEL-SA-00615]: https://www.intel.com/content/www/us/en/security-center/advisory/intel-sa-00615.html\n\nVersion 1.62.0 (2022-06-30)\n==========================\n\nLanguage\n--------\n\n- [Stabilize `#[derive(Default)]` on enums with a `#[default]` variant][94457]\n- [Teach flow sensitive checks that visibly uninhabited call expressions never return][93313]\n- [Fix constants not getting dropped if part of a diverging expression][94775]\n- [Support unit struct/enum variant in destructuring assignment][95380]\n- [Remove mutable_borrow_reservation_conflict lint and allow the code pattern][96268]\n- [`const` functions may now specify `extern \"C\"` or `extern \"Rust\"`][95346]\n\nCompiler\n--------\n\n- [linker: Stop using whole-archive on dependencies of dylibs][96436]\n- [Make `unaligned_references` lint deny-by-default][95372]\n  This lint is also a future compatibility lint, and is expected to eventually\n  become a hard error.\n- [Only add codegen backend to dep info if -Zbinary-dep-depinfo is used][93969]\n- [Reject `#[thread_local]` attribute on non-static items][95006]\n- [Add tier 3 `aarch64-pc-windows-gnullvm` and `x86_64-pc-windows-gnullvm` targets\\*][94872]\n- [Implement a lint to warn about unused macro rules][96150]\n- [Promote `x86_64-unknown-none` target to Tier 2\\*][95705]\n\n\\* Refer to Rust's [platform support page][platform-support-doc] for more\n   information on Rust's tiered platform support.\n\nLibraries\n---------\n\n- [Windows: Use a pipe relay for chaining pipes][95841]\n- [Replace Linux Mutex and Condvar with futex based ones.][95035]\n- [Replace RwLock by a futex based one on Linux][95801]\n- [std: directly use pthread in UNIX parker implementation][96393]\n\nStabilized APIs\n---------------\n\n- [`bool::then_some`]\n- [`f32::total_cmp`]\n- [`f64::total_cmp`]\n- [`Stdin::lines`]\n- [`windows::CommandExt::raw_arg`]\n- [`impl<T: Default> Default for AssertUnwindSafe<T>`]\n- [`From<Rc<str>> for Rc<[u8]>`][rc-u8-from-str]\n- [`From<Arc<str>> for Arc<[u8]>`][arc-u8-from-str]\n- [`FusedIterator for EncodeWide`]\n- [RDM intrinsics on aarch64][stdarch/1285]\n\nClippy\n------\n\n- [Create clippy lint against unexpectedly late drop for temporaries in match scrutinee expressions][94206]\n\nCargo\n-----\n\n- Added the `cargo add` command for adding dependencies to `Cargo.toml` from\n  the command-line.\n  [docs](https://doc.rust-lang.org/nightly/cargo/commands/cargo-add.html)\n- Package ID specs now support `name@version` syntax in addition to the\n  previous `name:version` to align with the behavior in `cargo add` and other\n  tools. `cargo install` and `cargo yank` also now support this syntax so the\n  version does not need to passed as a separate flag.\n- The `git` and `registry` directories in Cargo's home directory (usually\n  `~/.cargo`) are now marked as cache directories so that they are not\n  included in backups or content indexing (on Windows).\n- Added automatic `@` argfile support, which will use \"response files\" if the\n  command-line to `rustc` exceeds the operating system's limit.\n\nCompatibility Notes\n-------------------\n\n- `cargo test` now passes `--target` to `rustdoc` if the specified target is\n  the same as the host target.\n  [#10594](https://github.com/rust-lang/cargo/pull/10594)\n- [rustdoc: doctests are now run on unexported `macro_rules!` macros, matching other private items][96630]\n- [rustdoc: Remove .woff font files][96279]\n- [Enforce Copy bounds for repeat elements while considering lifetimes][95819]\n- [Windows: Fix potential unsoundness by aborting if `File` reads or writes cannot\n  complete synchronously][95469].\n\nInternal Changes\n----------------\n\n- [Unify ReentrantMutex implementations across all platforms][96042]\n\nThese changes provide no direct user facing benefits, but represent significant\nimprovements to the internals and overall performance of rustc\nand related tools.\n\n[93313]: https://github.com/rust-lang/rust/pull/93313/\n[93969]: https://github.com/rust-lang/rust/pull/93969/\n[94206]: https://github.com/rust-lang/rust/pull/94206/\n[94457]: https://github.com/rust-lang/rust/pull/94457/\n[94775]: https://github.com/rust-lang/rust/pull/94775/\n[94872]: https://github.com/rust-lang/rust/pull/94872/\n[95006]: https://github.com/rust-lang/rust/pull/95006/\n[95035]: https://github.com/rust-lang/rust/pull/95035/\n[95346]: https://github.com/rust-lang/rust/pull/95346/\n[95372]: https://github.com/rust-lang/rust/pull/95372/\n[95380]: https://github.com/rust-lang/rust/pull/95380/\n[95431]: https://github.com/rust-lang/rust/pull/95431/\n[95469]: https://github.com/rust-lang/rust/pull/95469/\n[95705]: https://github.com/rust-lang/rust/pull/95705/\n[95801]: https://github.com/rust-lang/rust/pull/95801/\n[95819]: https://github.com/rust-lang/rust/pull/95819/\n[95841]: https://github.com/rust-lang/rust/pull/95841/\n[96042]: https://github.com/rust-lang/rust/pull/96042/\n[96150]: https://github.com/rust-lang/rust/pull/96150/\n[96268]: https://github.com/rust-lang/rust/pull/96268/\n[96279]: https://github.com/rust-lang/rust/pull/96279/\n[96393]: https://github.com/rust-lang/rust/pull/96393/\n[96436]: https://github.com/rust-lang/rust/pull/96436/\n[96557]: https://github.com/rust-lang/rust/pull/96557/\n[96630]: https://github.com/rust-lang/rust/pull/96630/\n\n[`bool::then_some`]: https://doc.rust-lang.org/stable/std/primitive.bool.html#method.then_some\n[`f32::total_cmp`]: https://doc.rust-lang.org/stable/std/primitive.f32.html#method.total_cmp\n[`f64::total_cmp`]: https://doc.rust-lang.org/stable/std/primitive.f64.html#method.total_cmp\n[`Stdin::lines`]: https://doc.rust-lang.org/stable/std/io/struct.Stdin.html#method.lines\n[`impl<T: Default> Default for AssertUnwindSafe<T>`]: https://doc.rust-lang.org/stable/std/panic/struct.AssertUnwindSafe.html#impl-Default\n[rc-u8-from-str]: https://doc.rust-lang.org/stable/std/rc/struct.Rc.html#impl-From%3CRc%3Cstr%3E%3E\n[arc-u8-from-str]: https://doc.rust-lang.org/stable/std/sync/struct.Arc.html#impl-From%3CArc%3Cstr%3E%3E\n[stdarch/1285]: https://github.com/rust-lang/stdarch/pull/1285\n[`windows::CommandExt::raw_arg`]: https://doc.rust-lang.org/stable/std/os/windows/process/trait.CommandExt.html#tymethod.raw_arg\n[`FusedIterator for EncodeWide`]: https://doc.rust-lang.org/stable/std/os/windows/ffi/struct.EncodeWide.html#impl-FusedIterator\n\nVersion 1.61.0 (2022-05-19)\n==========================\n\nLanguage\n--------\n\n- [`const fn` signatures can now include generic trait bounds][93827]\n- [`const fn` signatures can now use `impl Trait` in argument and return position][93827]\n- [Function pointers can now be created, cast, and passed around in a `const fn`][93827]\n- [Recursive calls can now set the value of a function's opaque `impl Trait` return type][94081]\n\nCompiler\n--------\n\n- [Linking modifier syntax in `#[link]` attributes and on the command line, as well as the `whole-archive` modifier specifically, are now supported][93901]\n- [The `char` type is now described as UTF-32 in debuginfo][89887]\n- The [`#[target_feature]`][target_feature] attribute [can now be used with aarch64 features][90621]\n- X86 [`#[target_feature = \"adx\"]` is now stable][93745]\n\nLibraries\n---------\n\n- [`ManuallyDrop<T>` is now documented to have the same layout as `T`][88375]\n- [`#[ignore = \"…\"]` messages are printed when running tests][92714]\n- [Consistently show absent stdio handles on Windows as NULL handles][93263]\n- [Make `std::io::stdio::lock()` return `'static` handles.][93965] Previously, the creation of locked handles to stdin/stdout/stderr would borrow the handles being locked, which prevented writing `let out = std::io::stdout().lock();` because `out` would outlive the return value of `stdout()`. Such code now works, eliminating a common pitfall that affected many Rust users.\n- [`Vec::from_raw_parts` is now less restrictive about its inputs][95016]\n- [`std::thread::available_parallelism` now takes cgroup quotas into account.][92697] Since `available_parallelism` is often used to create a thread pool for parallel computation, which may be CPU-bound for performance, `available_parallelism` will return a value consistent with the ability to use that many threads continuously, if possible. For instance, in a container with 8 virtual CPUs but quotas only allowing for 50% usage, `available_parallelism` will return 4.\n\nStabilized APIs\n---------------\n\n- [`Pin::static_mut`]\n- [`Pin::static_ref`]\n- [`Vec::retain_mut`]\n- [`VecDeque::retain_mut`]\n- [`Write` for `Cursor<[u8; N]>`][cursor-write-array]\n- [`std::os::unix::net::SocketAddr::from_pathname`]\n- [`std::process::ExitCode`] and [`std::process::Termination`]. The stabilization of these two APIs now makes it possible for programs to return errors from `main` with custom exit codes.\n- [`std::thread::JoinHandle::is_finished`]\n\nThese APIs are now usable in const contexts:\n\n- [`<*const T>::offset` and `<*mut T>::offset`][ptr-offset]\n- [`<*const T>::wrapping_offset` and `<*mut T>::wrapping_offset`][ptr-wrapping_offset]\n- [`<*const T>::add` and `<*mut T>::add`][ptr-add]\n- [`<*const T>::sub` and `<*mut T>::sub`][ptr-sub]\n- [`<*const T>::wrapping_add` and `<*mut T>::wrapping_add`][ptr-wrapping_add]\n- [`<*const T>::wrapping_sub` and `<*mut T>::wrapping_sub`][ptr-wrapping_sub]\n- [`<[T]>::as_mut_ptr`][slice-as_mut_ptr]\n- [`<[T]>::as_ptr_range`][slice-as_ptr_range]\n- [`<[T]>::as_mut_ptr_range`][slice-as_mut_ptr_range]\n\nCargo\n-----\n\nNo feature changes, but see compatibility notes.\n\nCompatibility Notes\n-------------------\n\n- Previously native static libraries were linked as `whole-archive` in some cases, but now rustc tries not to use `whole-archive` unless explicitly requested. This [change][93901] may result in linking errors in some cases. To fix such errors, native libraries linked from the command line, build scripts, or [`#[link]` attributes][link-attr] need to\n  - (more common) either be reordered to respect dependencies between them (if `a` depends on `b` then `a` should go first and `b` second)\n  - (less common) or be updated to use the [`+whole-archive`] modifier.\n- [Catching a second unwind from FFI code while cleaning up from a Rust panic now causes the process to abort][92911]\n- [Proc macros no longer see `ident` matchers wrapped in groups][92472]\n- [The number of `#` in `r#` raw string literals is now required to be less than 256][95251]\n- [When checking that a dyn type satisfies a trait bound, supertrait bounds are now enforced][92285]\n- [`cargo vendor` now only accepts one value for each `--sync` flag][cargo/10448]\n- [`cfg` predicates in `all()` and `any()` are always evaluated to detect errors, instead of short-circuiting.][94295] The compatibility considerations here arise in nightly-only code that used the short-circuiting behavior of `all` to write something like `cfg(all(feature = \"nightly\", syntax-requiring-nightly))`, which will now fail to compile. Instead, use either `cfg_attr(feature = \"nightly\", ...)` or nested uses of `cfg`.\n- [bootstrap: static-libstdcpp is now enabled by default, and can now be disabled when llvm-tools is enabled][94832]\n\nInternal Changes\n----------------\n\nThese changes provide no direct user facing benefits, but represent significant\nimprovements to the internals and overall performance of rustc\nand related tools.\n\n- [debuginfo: Refactor debuginfo generation for types][94261]\n- [Remove the everybody loops pass][93913]\n\n[88375]: https://github.com/rust-lang/rust/pull/88375/\n[89887]: https://github.com/rust-lang/rust/pull/89887/\n[90621]: https://github.com/rust-lang/rust/pull/90621/\n[92285]: https://github.com/rust-lang/rust/pull/92285/\n[92472]: https://github.com/rust-lang/rust/pull/92472/\n[92697]: https://github.com/rust-lang/rust/pull/92697/\n[92714]: https://github.com/rust-lang/rust/pull/92714/\n[92911]: https://github.com/rust-lang/rust/pull/92911/\n[93263]: https://github.com/rust-lang/rust/pull/93263/\n[93745]: https://github.com/rust-lang/rust/pull/93745/\n[93827]: https://github.com/rust-lang/rust/pull/93827/\n[93901]: https://github.com/rust-lang/rust/pull/93901/\n[93913]: https://github.com/rust-lang/rust/pull/93913/\n[93965]: https://github.com/rust-lang/rust/pull/93965/\n[94081]: https://github.com/rust-lang/rust/pull/94081/\n[94261]: https://github.com/rust-lang/rust/pull/94261/\n[94295]: https://github.com/rust-lang/rust/pull/94295/\n[94832]: https://github.com/rust-lang/rust/pull/94832/\n[95016]: https://github.com/rust-lang/rust/pull/95016/\n[95251]: https://github.com/rust-lang/rust/pull/95251/\n[`+whole-archive`]: https://doc.rust-lang.org/stable/rustc/command-line-arguments.html#linking-modifiers-whole-archive\n[`Pin::static_mut`]: https://doc.rust-lang.org/stable/std/pin/struct.Pin.html#method.static_mut\n[`Pin::static_ref`]: https://doc.rust-lang.org/stable/std/pin/struct.Pin.html#method.static_ref\n[`Vec::retain_mut`]: https://doc.rust-lang.org/stable/std/vec/struct.Vec.html#method.retain_mut\n[`VecDeque::retain_mut`]: https://doc.rust-lang.org/stable/std/collections/struct.VecDeque.html#method.retain_mut\n[`std::os::unix::net::SocketAddr::from_pathname`]: https://doc.rust-lang.org/stable/std/os/unix/net/struct.SocketAddr.html#method.from_pathname\n[`std::process::ExitCode`]: https://doc.rust-lang.org/stable/std/process/struct.ExitCode.html\n[`std::process::Termination`]: https://doc.rust-lang.org/stable/std/process/trait.Termination.html\n[`std::thread::JoinHandle::is_finished`]: https://doc.rust-lang.org/stable/std/thread/struct.JoinHandle.html#method.is_finished\n[cargo/10448]: https://github.com/rust-lang/cargo/pull/10448/\n[cursor-write-array]: https://doc.rust-lang.org/stable/std/io/struct.Cursor.html#impl-Write-4\n[link-attr]: https://doc.rust-lang.org/stable/reference/items/external-blocks.html#the-link-attribute\n[ptr-add]: https://doc.rust-lang.org/stable/std/primitive.pointer.html#method.add\n[ptr-offset]: https://doc.rust-lang.org/stable/std/primitive.pointer.html#method.offset\n[ptr-sub]: https://doc.rust-lang.org/stable/std/primitive.pointer.html#method.sub\n[ptr-wrapping_add]: https://doc.rust-lang.org/stable/std/primitive.pointer.html#method.wrapping_add\n[ptr-wrapping_offset]: https://doc.rust-lang.org/stable/std/primitive.pointer.html#method.wrapping_offset\n[ptr-wrapping_sub]: https://doc.rust-lang.org/stable/std/primitive.pointer.html#method.wrapping_sub\n[slice-as_mut_ptr]: https://doc.rust-lang.org/stable/std/primitive.slice.html#method.as_mut_ptr\n[slice-as_mut_ptr_range]: https://doc.rust-lang.org/stable/std/primitive.slice.html#method.as_mut_ptr_range\n[slice-as_ptr_range]: https://doc.rust-lang.org/stable/std/primitive.slice.html#method.as_ptr_range\n[target_feature]: https://doc.rust-lang.org/reference/attributes/codegen.html#the-target_feature-attribute\n\n\nVersion 1.60.0 (2022-04-07)\n==========================\n\nLanguage\n--------\n- [Stabilize `#[cfg(panic = \"...\")]` for either `\"unwind\"` or `\"abort\"`.][93658]\n- [Stabilize `#[cfg(target_has_atomic = \"...\")]` for each integer size and `\"ptr\"`.][93824]\n\nCompiler\n--------\n- [Enable combining `+crt-static` and `relocation-model=pic` on `x86_64-unknown-linux-gnu`][86374]\n- [Fixes wrong `unreachable_pub` lints on nested and glob public reexport][87487]\n- [Stabilize `-Z instrument-coverage` as `-C instrument-coverage`][90132]\n- [Stabilize `-Z print-link-args` as `--print link-args`][91606]\n- [Add new Tier 3 target `mips64-openwrt-linux-musl`\\*][92300]\n- [Add new Tier 3 target `armv7-unknown-linux-uclibceabi` (softfloat)\\*][92383]\n- [Fix invalid removal of newlines from doc comments][92357]\n- [Add kernel target for RustyHermit][92670]\n- [Deny mixing bin crate type with lib crate types][92933]\n- [Make rustc use `RUST_BACKTRACE=full` by default][93566]\n- [Upgrade to LLVM 14][93577]\n\n\\* Refer to Rust's [platform support page][platform-support-doc] for more\n   information on Rust's tiered platform support.\n\nLibraries\n---------\n- [Guarantee call order for `sort_by_cached_key`][89621]\n- [Improve `Duration::try_from_secs_f32`/`f64` accuracy by directly processing exponent and mantissa][90247]\n- [Make `Instant::{duration_since, elapsed, sub}` saturating][89926]\n- [Remove non-monotonic clocks workarounds in `Instant::now`][89926]\n- [Make `BuildHasherDefault`, `iter::Empty` and `future::Pending` covariant][92630]\n\nStabilized APIs\n---------------\n- [`Arc::new_cyclic`][arc_new_cyclic]\n- [`Rc::new_cyclic`][rc_new_cyclic]\n- [`slice::EscapeAscii`][slice_escape_ascii]\n- [`<[u8]>::escape_ascii`][slice_u8_escape_ascii]\n- [`u8::escape_ascii`][u8_escape_ascii]\n- [`Vec::spare_capacity_mut`][vec_spare_capacity_mut]\n- [`MaybeUninit::assume_init_drop`][assume_init_drop]\n- [`MaybeUninit::assume_init_read`][assume_init_read]\n- [`i8::abs_diff`][i8_abs_diff]\n- [`i16::abs_diff`][i16_abs_diff]\n- [`i32::abs_diff`][i32_abs_diff]\n- [`i64::abs_diff`][i64_abs_diff]\n- [`i128::abs_diff`][i128_abs_diff]\n- [`isize::abs_diff`][isize_abs_diff]\n- [`u8::abs_diff`][u8_abs_diff]\n- [`u16::abs_diff`][u16_abs_diff]\n- [`u32::abs_diff`][u32_abs_diff]\n- [`u64::abs_diff`][u64_abs_diff]\n- [`u128::abs_diff`][u128_abs_diff]\n- [`usize::abs_diff`][usize_abs_diff]\n- [`Display for io::ErrorKind`][display_error_kind]\n- [`From<u8> for ExitCode`][from_u8_exit_code]\n- [`Not for !` (the \"never\" type)][not_never]\n- [_Op_`Assign<$t> for Wrapping<$t>`][wrapping_assign_ops]\n- [`arch::is_aarch64_feature_detected!`][is_aarch64_feature_detected]\n\nCargo\n-----\n- [Port cargo from `toml-rs` to `toml_edit`][cargo/10086]\n- [Stabilize `-Ztimings` as `--timings`][cargo/10245]\n- [Stabilize namespaced and weak dependency features.][cargo/10269]\n- [Accept more `cargo:rustc-link-arg-*` types from build script output.][cargo/10274]\n- [cargo-new should not add ignore rule on Cargo.lock inside subdirs][cargo/10379]\n\nMisc\n----\n- [Ship docs on Tier 2 platforms by reusing the closest Tier 1 platform docs][92800]\n- [Drop rustc-docs from complete profile][93742]\n- [bootstrap: tidy up flag handling for llvm build][93918]\n\nCompatibility Notes\n-------------------\n- [Remove compiler-rt linking hack on Android][83822]\n- [Mitigations for platforms with non-monotonic clocks have been removed from\n  `Instant::now`][89926]. On platforms that don't provide monotonic clocks, an\n  instant is not guaranteed to be greater than an earlier instant anymore.\n- [`Instant::{duration_since, elapsed, sub}` do not panic anymore on underflow,\n  saturating to `0` instead][89926]. In the real world the panic happened mostly\n  on platforms with buggy monotonic clock implementations rather than catching\n  programming errors like reversing the start and end times. Such programming\n  errors will now results in `0` rather than a panic.\n- In a future release we're planning to increase the baseline requirements for\n  the Linux kernel to version 3.2, and for glibc to version 2.17. We'd love\n  your feedback in [PR #95026][95026].\n\nInternal Changes\n----------------\n\nThese changes provide no direct user facing benefits, but represent significant\nimprovements to the internals and overall performance of rustc\nand related tools.\n\n- [Switch all libraries to the 2021 edition][92068]\n\n[83822]: https://github.com/rust-lang/rust/pull/83822\n[86374]: https://github.com/rust-lang/rust/pull/86374\n[87487]: https://github.com/rust-lang/rust/pull/87487\n[89621]: https://github.com/rust-lang/rust/pull/89621\n[89926]: https://github.com/rust-lang/rust/pull/89926\n[90132]: https://github.com/rust-lang/rust/pull/90132\n[90247]: https://github.com/rust-lang/rust/pull/90247\n[91606]: https://github.com/rust-lang/rust/pull/91606\n[92068]: https://github.com/rust-lang/rust/pull/92068\n[92300]: https://github.com/rust-lang/rust/pull/92300\n[92357]: https://github.com/rust-lang/rust/pull/92357\n[92383]: https://github.com/rust-lang/rust/pull/92383\n[92630]: https://github.com/rust-lang/rust/pull/92630\n[92670]: https://github.com/rust-lang/rust/pull/92670\n[92800]: https://github.com/rust-lang/rust/pull/92800\n[92933]: https://github.com/rust-lang/rust/pull/92933\n[93566]: https://github.com/rust-lang/rust/pull/93566\n[93577]: https://github.com/rust-lang/rust/pull/93577\n[93658]: https://github.com/rust-lang/rust/pull/93658\n[93742]: https://github.com/rust-lang/rust/pull/93742\n[93824]: https://github.com/rust-lang/rust/pull/93824\n[93918]: https://github.com/rust-lang/rust/pull/93918\n[95026]: https://github.com/rust-lang/rust/pull/95026\n\n[cargo/10086]: https://github.com/rust-lang/cargo/pull/10086\n[cargo/10245]: https://github.com/rust-lang/cargo/pull/10245\n[cargo/10269]: https://github.com/rust-lang/cargo/pull/10269\n[cargo/10274]: https://github.com/rust-lang/cargo/pull/10274\n[cargo/10379]: https://github.com/rust-lang/cargo/pull/10379\n\n[arc_new_cyclic]: https://doc.rust-lang.org/stable/std/sync/struct.Arc.html#method.new_cyclic\n[rc_new_cyclic]: https://doc.rust-lang.org/stable/std/rc/struct.Rc.html#method.new_cyclic\n[slice_escape_ascii]: https://doc.rust-lang.org/stable/std/slice/struct.EscapeAscii.html\n[slice_u8_escape_ascii]: https://doc.rust-lang.org/stable/std/primitive.slice.html#method.escape_ascii\n[u8_escape_ascii]: https://doc.rust-lang.org/stable/std/primitive.u8.html#method.escape_ascii\n[vec_spare_capacity_mut]: https://doc.rust-lang.org/stable/std/vec/struct.Vec.html#method.spare_capacity_mut\n[assume_init_drop]: https://doc.rust-lang.org/stable/std/mem/union.MaybeUninit.html#method.assume_init_drop\n[assume_init_read]: https://doc.rust-lang.org/stable/std/mem/union.MaybeUninit.html#method.assume_init_read\n[i8_abs_diff]: https://doc.rust-lang.org/stable/std/primitive.i8.html#method.abs_diff\n[i16_abs_diff]: https://doc.rust-lang.org/stable/std/primitive.i16.html#method.abs_diff\n[i32_abs_diff]: https://doc.rust-lang.org/stable/std/primitive.i32.html#method.abs_diff\n[i64_abs_diff]: https://doc.rust-lang.org/stable/std/primitive.i64.html#method.abs_diff\n[i128_abs_diff]: https://doc.rust-lang.org/stable/std/primitive.i128.html#method.abs_diff\n[isize_abs_diff]: https://doc.rust-lang.org/stable/std/primitive.isize.html#method.abs_diff\n[u8_abs_diff]: https://doc.rust-lang.org/stable/std/primitive.u8.html#method.abs_diff\n[u16_abs_diff]: https://doc.rust-lang.org/stable/std/primitive.u16.html#method.abs_diff\n[u32_abs_diff]: https://doc.rust-lang.org/stable/std/primitive.u32.html#method.abs_diff\n[u64_abs_diff]: https://doc.rust-lang.org/stable/std/primitive.u64.html#method.abs_diff\n[u128_abs_diff]: https://doc.rust-lang.org/stable/std/primitive.u128.html#method.abs_diff\n[usize_abs_diff]: https://doc.rust-lang.org/stable/std/primitive.usize.html#method.abs_diff\n[display_error_kind]: https://doc.rust-lang.org/stable/std/io/enum.ErrorKind.html#impl-Display\n[from_u8_exit_code]: https://doc.rust-lang.org/stable/std/process/struct.ExitCode.html#impl-From%3Cu8%3E\n[not_never]: https://doc.rust-lang.org/stable/std/primitive.never.html#impl-Not\n[wrapping_assign_ops]: https://doc.rust-lang.org/stable/std/num/struct.Wrapping.html#trait-implementations\n[is_aarch64_feature_detected]: https://doc.rust-lang.org/stable/std/arch/macro.is_aarch64_feature_detected.html\n\nVersion 1.59.0 (2022-02-24)\n==========================\n\nLanguage\n--------\n\n- [Stabilize default arguments for const parameters and remove the ordering restriction for type and const parameters][90207]\n- [Stabilize destructuring assignment][90521]\n- [Relax private in public lint on generic bounds and where clauses of trait impls][90586]\n- [Stabilize asm! and global_asm! for x86, x86_64, ARM, Aarch64, and RISC-V][91728]\n\nCompiler\n--------\n\n- [Stabilize new symbol mangling format, leaving it opt-in (-Csymbol-mangling-version=v0)][90128]\n- [Emit LLVM optimization remarks when enabled with `-Cremark`][90833]\n- [Fix sparc64 ABI for aggregates with floating point members][91003]\n- [Warn when a `#[test]`-like built-in attribute macro is present multiple times.][91172]\n- [Add support for riscv64gc-unknown-freebsd][91284]\n- [Stabilize `-Z emit-future-incompat` as `--json future-incompat`][91535]\n- [Soft disable incremental compilation][94124]\n\nThis release disables incremental compilation, unless the user has explicitly\nopted in via the newly added RUSTC_FORCE_INCREMENTAL=1 environment variable.\nThis is due to a known and relatively frequently occurring bug in incremental\ncompilation, which causes builds to issue internal compiler errors. This\nparticular bug is already fixed on nightly, but that fix has not yet rolled out\nto stable and is deemed too risky for a direct stable backport.\n\nAs always, we encourage users to test with nightly and report bugs so that we\ncan track failures and fix issues earlier.\n\nSee [94124] for more details.\n\n[94124]: https://github.com/rust-lang/rust/issues/94124\n\nLibraries\n---------\n\n- [Remove unnecessary bounds for some Hash{Map,Set} methods][91593]\n\nStabilized APIs\n---------------\n\n- [`std::thread::available_parallelism`][available_parallelism]\n- [`Result::copied`][result-copied]\n- [`Result::cloned`][result-cloned]\n- [`arch::asm!`][asm]\n- [`arch::global_asm!`][global_asm]\n- [`ops::ControlFlow::is_break`][is_break]\n- [`ops::ControlFlow::is_continue`][is_continue]\n- [`TryFrom<char> for u8`][try_from_char_u8]\n- [`char::TryFromCharError`][try_from_char_err]\n  implementing `Clone`, `Debug`, `Display`, `PartialEq`, `Copy`, `Eq`, `Error`\n- [`iter::zip`][zip]\n- [`NonZeroU8::is_power_of_two`][is_power_of_two8]\n- [`NonZeroU16::is_power_of_two`][is_power_of_two16]\n- [`NonZeroU32::is_power_of_two`][is_power_of_two32]\n- [`NonZeroU64::is_power_of_two`][is_power_of_two64]\n- [`NonZeroU128::is_power_of_two`][is_power_of_two128]\n- [`NonZeroUsize::is_power_of_two`][is_power_of_two_usize]\n- [`DoubleEndedIterator for ToLowercase`][lowercase]\n- [`DoubleEndedIterator for ToUppercase`][uppercase]\n- [`TryFrom<&mut [T]> for [T; N]`][tryfrom_ref_arr]\n- [`UnwindSafe for Once`][unwindsafe_once]\n- [`RefUnwindSafe for Once`][refunwindsafe_once]\n- [armv8 neon intrinsics for aarch64][stdarch/1266]\n\nConst-stable:\n\n- [`mem::MaybeUninit::as_ptr`][muninit_ptr]\n- [`mem::MaybeUninit::assume_init`][muninit_init]\n- [`mem::MaybeUninit::assume_init_ref`][muninit_init_ref]\n- [`ffi::CStr::from_bytes_with_nul_unchecked`][cstr_from_bytes]\n\nCargo\n-----\n\n- [Stabilize the `strip` profile option][cargo/10088]\n- [Stabilize future-incompat-report][cargo/10165]\n- [Support abbreviating `--release` as `-r`][cargo/10133]\n- [Support `term.quiet` configuration][cargo/10152]\n- [Remove `--host` from cargo {publish,search,login}][cargo/10145]\n\nCompatibility Notes\n-------------------\n\n- [Refactor weak symbols in std::sys::unix][90846]\n  This may add new, versioned, symbols when building with a newer glibc, as the\n  standard library uses weak linkage rather than dynamically attempting to load\n  certain symbols at runtime.\n- [Deprecate crate_type and crate_name nested inside `#![cfg_attr]`][83744]\n  This adds a future compatibility lint to supporting the use of cfg_attr\n  wrapping either crate_type or crate_name specification within Rust files;\n  it is recommended that users migrate to setting the equivalent command line\n  flags.\n- [Remove effect of `#[no_link]` attribute on name resolution][92034]\n  This may expose new names, leading to conflicts with preexisting names in a\n  given namespace and a compilation failure.\n- [Cargo will document libraries before binaries.][cargo/10172]\n- [Respect doc=false in dependencies, not just the root crate][cargo/10201]\n- [Weaken guarantee around advancing underlying iterators in zip][83791]\n- [Make split_inclusive() on an empty slice yield an empty output][89825]\n- [Update std::env::temp_dir to use GetTempPath2 on Windows when available.][89999]\n- [unreachable! was updated to match other formatting macro behavior on Rust 2021][92137]\n\nInternal Changes\n----------------\n\nThese changes provide no direct user facing benefits, but represent significant\nimprovements to the internals and overall performance of rustc\nand related tools.\n\n- [Fix many cases of normalization-related ICEs][91255]\n- [Replace dominators algorithm with simple Lengauer-Tarjan][85013]\n- [Store liveness in interval sets for region inference][90637]\n\n- [Remove `in_band_lifetimes` from the compiler and standard library, in preparation for removing this\n  unstable feature.][91867]\n\n[91867]: https://github.com/rust-lang/rust/issues/91867\n[83744]: https://github.com/rust-lang/rust/pull/83744/\n[83791]: https://github.com/rust-lang/rust/pull/83791/\n[85013]: https://github.com/rust-lang/rust/pull/85013/\n[89825]: https://github.com/rust-lang/rust/pull/89825/\n[89999]: https://github.com/rust-lang/rust/pull/89999/\n[90128]: https://github.com/rust-lang/rust/pull/90128/\n[90207]: https://github.com/rust-lang/rust/pull/90207/\n[90521]: https://github.com/rust-lang/rust/pull/90521/\n[90586]: https://github.com/rust-lang/rust/pull/90586/\n[90637]: https://github.com/rust-lang/rust/pull/90637/\n[90833]: https://github.com/rust-lang/rust/pull/90833/\n[90846]: https://github.com/rust-lang/rust/pull/90846/\n[91003]: https://github.com/rust-lang/rust/pull/91003/\n[91172]: https://github.com/rust-lang/rust/pull/91172/\n[91255]: https://github.com/rust-lang/rust/pull/91255/\n[91284]: https://github.com/rust-lang/rust/pull/91284/\n[91535]: https://github.com/rust-lang/rust/pull/91535/\n[91593]: https://github.com/rust-lang/rust/pull/91593/\n[91728]: https://github.com/rust-lang/rust/pull/91728/\n[91878]: https://github.com/rust-lang/rust/pull/91878/\n[91896]: https://github.com/rust-lang/rust/pull/91896/\n[91926]: https://github.com/rust-lang/rust/pull/91926/\n[91984]: https://github.com/rust-lang/rust/pull/91984/\n[92020]: https://github.com/rust-lang/rust/pull/92020/\n[92034]: https://github.com/rust-lang/rust/pull/92034/\n[92137]: https://github.com/rust-lang/rust/pull/92137/\n[92483]: https://github.com/rust-lang/rust/pull/92483/\n[cargo/10088]: https://github.com/rust-lang/cargo/pull/10088/\n[cargo/10133]: https://github.com/rust-lang/cargo/pull/10133/\n[cargo/10145]: https://github.com/rust-lang/cargo/pull/10145/\n[cargo/10152]: https://github.com/rust-lang/cargo/pull/10152/\n[cargo/10165]: https://github.com/rust-lang/cargo/pull/10165/\n[cargo/10172]: https://github.com/rust-lang/cargo/pull/10172/\n[cargo/10201]: https://github.com/rust-lang/cargo/pull/10201/\n[cargo/10269]: https://github.com/rust-lang/cargo/pull/10269/\n\n[cstr_from_bytes]: https://doc.rust-lang.org/stable/std/ffi/struct.CStr.html#method.from_bytes_with_nul_unchecked\n[muninit_ptr]: https://doc.rust-lang.org/stable/std/mem/union.MaybeUninit.html#method.as_ptr\n[muninit_init]: https://doc.rust-lang.org/stable/std/mem/union.MaybeUninit.html#method.assume_init\n[muninit_init_ref]: https://doc.rust-lang.org/stable/std/mem/union.MaybeUninit.html#method.assume_init_ref\n[unwindsafe_once]: https://doc.rust-lang.org/stable/std/sync/struct.Once.html#impl-UnwindSafe\n[refunwindsafe_once]: https://doc.rust-lang.org/stable/std/sync/struct.Once.html#impl-RefUnwindSafe\n[tryfrom_ref_arr]: https://doc.rust-lang.org/stable/std/convert/trait.TryFrom.html#impl-TryFrom%3C%26%27_%20mut%20%5BT%5D%3E\n[lowercase]: https://doc.rust-lang.org/stable/std/char/struct.ToLowercase.html#impl-DoubleEndedIterator\n[uppercase]: https://doc.rust-lang.org/stable/std/char/struct.ToUppercase.html#impl-DoubleEndedIterator\n[try_from_char_err]: https://doc.rust-lang.org/stable/std/char/struct.TryFromCharError.html\n[available_parallelism]: https://doc.rust-lang.org/stable/std/thread/fn.available_parallelism.html\n[result-copied]: https://doc.rust-lang.org/stable/std/result/enum.Result.html#method.copied\n[result-cloned]: https://doc.rust-lang.org/stable/std/result/enum.Result.html#method.cloned\n[asm]: https://doc.rust-lang.org/stable/core/arch/macro.asm.html\n[global_asm]: https://doc.rust-lang.org/stable/core/arch/macro.global_asm.html\n[is_break]: https://doc.rust-lang.org/stable/std/ops/enum.ControlFlow.html#method.is_break\n[is_continue]: https://doc.rust-lang.org/stable/std/ops/enum.ControlFlow.html#method.is_continue\n[try_from_char_u8]: https://doc.rust-lang.org/stable/std/primitive.char.html#impl-TryFrom%3Cchar%3E\n[zip]: https://doc.rust-lang.org/stable/std/iter/fn.zip.html\n[is_power_of_two8]: https://doc.rust-lang.org/stable/core/num/struct.NonZeroU8.html#method.is_power_of_two\n[is_power_of_two16]: https://doc.rust-lang.org/stable/core/num/struct.NonZeroU16.html#method.is_power_of_two\n[is_power_of_two32]: https://doc.rust-lang.org/stable/core/num/struct.NonZeroU32.html#method.is_power_of_two\n[is_power_of_two64]: https://doc.rust-lang.org/stable/core/num/struct.NonZeroU64.html#method.is_power_of_two\n[is_power_of_two128]: https://doc.rust-lang.org/stable/core/num/struct.NonZeroU128.html#method.is_power_of_two\n[is_power_of_two_usize]: https://doc.rust-lang.org/stable/core/num/struct.NonZeroUsize.html#method.is_power_of_two\n[stdarch/1266]: https://github.com/rust-lang/stdarch/pull/1266\n\nVersion 1.58.1 (2022-01-20)\n===========================\n\n* Fix race condition in `std::fs::remove_dir_all` ([CVE-2022-21658])\n* [Handle captured arguments in the `useless_format` Clippy lint][clippy/8295]\n* [Move `non_send_fields_in_send_ty` Clippy lint to nursery][clippy/8075]\n* [Fix wrong error message displayed when some imports are missing][91254]\n* [Fix rustfmt not formatting generated files from stdin][92912]\n\n[CVE-2022-21658]: https://www.cve.org/CVERecord?id=CVE-2022-21658\n[91254]: https://github.com/rust-lang/rust/pull/91254\n[92912]: https://github.com/rust-lang/rust/pull/92912\n[clippy/8075]: https://github.com/rust-lang/rust-clippy/pull/8075\n[clippy/8295]: https://github.com/rust-lang/rust-clippy/pull/8295\n\nVersion 1.58.0 (2022-01-13)\n==========================\n\nLanguage\n--------\n\n- [Format strings can now capture arguments simply by writing `{ident}` in the string.][90473] This works in all macros accepting format strings. Support for this in `panic!` (`panic!(\"{ident}\")`) requires the 2021 edition; panic invocations in previous editions that appear to be trying to use this will result in a warning lint about not having the intended effect.\n- [`*const T` pointers can now be dereferenced in const contexts.][89551]\n- [The rules for when a generic struct implements `Unsize` have been relaxed.][90417]\n\nCompiler\n--------\n\n- [Add LLVM CFI support to the Rust compiler][89652]\n- [Stabilize -Z strip as -C strip][90058]. Note that while release builds already don't add debug symbols for the code you compile, the compiled standard library that ships with Rust includes debug symbols, so you may want to use the `strip` option to remove these symbols to produce smaller release binaries. Note that this release only includes support in rustc, not directly in cargo.\n- [Add support for LLVM coverage mapping format versions 5 and 6][91207]\n- [Emit LLVM optimization remarks when enabled with `-Cremark`][90833]\n- [Update the minimum external LLVM to 12][90175]\n- [Add `x86_64-unknown-none` at Tier 3*][89062]\n- [Build musl dist artifacts with debuginfo enabled][90733]. When building release binaries using musl, you may want to use the newly stabilized strip option to remove these debug symbols, reducing the size of your binaries.\n- [Don't abort compilation after giving a lint error][87337]\n- [Error messages point at the source of trait bound obligations in more places][89580]\n\n\\* Refer to Rust's [platform support page][platform-support-doc] for more\n   information on Rust's tiered platform support.\n\nLibraries\n---------\n\n- [All remaining functions in the standard library have `#[must_use]` annotations where appropriate][89692], producing a warning when ignoring their return value. This helps catch mistakes such as expecting a function to mutate a value in place rather than return a new value.\n- [Paths are automatically canonicalized on Windows for operations that support it][89174]\n- [Re-enable debug checks for `copy` and `copy_nonoverlapping`][90041]\n- [Implement `RefUnwindSafe` for `Rc<T>`][87467]\n- [Make RSplit<T, P>: Clone not require T: Clone][90117]\n- [Implement `Termination` for `Result<Infallible, E>`][88601]. This allows writing `fn main() -> Result<Infallible, ErrorType>`, for a program whose successful exits never involve returning from `main` (for instance, a program that calls `exit`, or that uses `exec` to run another program).\n\nStabilized APIs\n---------------\n\n- [`Metadata::is_symlink`]\n- [`Path::is_symlink`]\n- [`{integer}::saturating_div`]\n- [`Option::unwrap_unchecked`]\n- [`Result::unwrap_unchecked`]\n- [`Result::unwrap_err_unchecked`]\n- [`File::options`]\n\nThese APIs are now usable in const contexts:\n\n- [`Duration::new`]\n- [`Duration::checked_add`]\n- [`Duration::saturating_add`]\n- [`Duration::checked_sub`]\n- [`Duration::saturating_sub`]\n- [`Duration::checked_mul`]\n- [`Duration::saturating_mul`]\n- [`Duration::checked_div`]\n\nCargo\n-----\n\n- [Add --message-format for install command][cargo/10107]\n- [Warn when alias shadows external subcommand][cargo/10082]\n\nRustdoc\n-------\n\n- [Show all Deref implementations recursively in rustdoc][90183]\n- [Use computed visibility in rustdoc][88447]\n\nCompatibility Notes\n-------------------\n\n- [Try all stable method candidates first before trying unstable ones][90329]. This change ensures that adding new nightly-only methods to the Rust standard library will not break code invoking methods of the same name from traits outside the standard library.\n- Windows: [`std::process::Command` will no longer search the current directory for executables.][87704]\n- [All proc-macro backward-compatibility lints are now deny-by-default.][88041]\n- [proc_macro: Append .0 to unsuffixed float if it would otherwise become int token][90297]\n- [Refactor weak symbols in std::sys::unix][90846]. This optimizes accesses to glibc functions, by avoiding the use of dlopen. This does not increase the [minimum expected version of glibc](https://doc.rust-lang.org/nightly/rustc/platform-support.html). However, software distributions that use symbol versions to detect library dependencies, and which take weak symbols into account in that analysis, may detect rust binaries as requiring newer versions of glibc.\n- [rustdoc now rejects some unexpected semicolons in doctests][91026]\n\nInternal Changes\n----------------\n\nThese changes provide no direct user facing benefits, but represent significant\nimprovements to the internals and overall performance of rustc\nand related tools.\n\n- [Implement coherence checks for negative trait impls][90104]\n- [Add rustc lint, warning when iterating over hashmaps][89558]\n- [Optimize live point computation][90491]\n- [Enable verification for 1/32nd of queries loaded from disk][90361]\n- [Implement version of normalize_erasing_regions that allows for normalization failure][91255]\n\n[87337]: https://github.com/rust-lang/rust/pull/87337/\n[87467]: https://github.com/rust-lang/rust/pull/87467/\n[87704]: https://github.com/rust-lang/rust/pull/87704/\n[88041]: https://github.com/rust-lang/rust/pull/88041/\n[88447]: https://github.com/rust-lang/rust/pull/88447/\n[88601]: https://github.com/rust-lang/rust/pull/88601/\n[89062]: https://github.com/rust-lang/rust/pull/89062/\n[89174]: https://github.com/rust-lang/rust/pull/89174/\n[89551]: https://github.com/rust-lang/rust/pull/89551/\n[89558]: https://github.com/rust-lang/rust/pull/89558/\n[89580]: https://github.com/rust-lang/rust/pull/89580/\n[89652]: https://github.com/rust-lang/rust/pull/89652/\n[90041]: https://github.com/rust-lang/rust/pull/90041/\n[90058]: https://github.com/rust-lang/rust/pull/90058/\n[90104]: https://github.com/rust-lang/rust/pull/90104/\n[90117]: https://github.com/rust-lang/rust/pull/90117/\n[90175]: https://github.com/rust-lang/rust/pull/90175/\n[90183]: https://github.com/rust-lang/rust/pull/90183/\n[90297]: https://github.com/rust-lang/rust/pull/90297/\n[90329]: https://github.com/rust-lang/rust/pull/90329/\n[90361]: https://github.com/rust-lang/rust/pull/90361/\n[90417]: https://github.com/rust-lang/rust/pull/90417/\n[90473]: https://github.com/rust-lang/rust/pull/90473/\n[90491]: https://github.com/rust-lang/rust/pull/90491/\n[90733]: https://github.com/rust-lang/rust/pull/90733/\n[90833]: https://github.com/rust-lang/rust/pull/90833/\n[90846]: https://github.com/rust-lang/rust/pull/90846/\n[91026]: https://github.com/rust-lang/rust/pull/91026/\n[91207]: https://github.com/rust-lang/rust/pull/91207/\n[91255]: https://github.com/rust-lang/rust/pull/91255/\n[cargo/10082]: https://github.com/rust-lang/cargo/pull/10082/\n[cargo/10107]: https://github.com/rust-lang/cargo/pull/10107/\n[`Metadata::is_symlink`]: https://doc.rust-lang.org/stable/std/fs/struct.Metadata.html#method.is_symlink\n[`Path::is_symlink`]: https://doc.rust-lang.org/stable/std/path/struct.Path.html#method.is_symlink\n[`{integer}::saturating_div`]: https://doc.rust-lang.org/stable/std/primitive.i8.html#method.saturating_div\n[`Option::unwrap_unchecked`]: https://doc.rust-lang.org/stable/std/option/enum.Option.html#method.unwrap_unchecked\n[`Result::unwrap_unchecked`]: https://doc.rust-lang.org/stable/std/result/enum.Result.html#method.unwrap_unchecked\n[`Result::unwrap_err_unchecked`]: https://doc.rust-lang.org/stable/std/result/enum.Result.html#method.unwrap_err_unchecked\n[`File::options`]: https://doc.rust-lang.org/stable/std/fs/struct.File.html#method.options\n[`Duration::new`]: https://doc.rust-lang.org/stable/std/time/struct.Duration.html#method.new\n\nVersion 1.57.0 (2021-12-02)\n==========================\n\nLanguage\n--------\n\n- [Macro attributes may follow `#[derive]` and will see the original (pre-`cfg`) input.][87220]\n- [Accept curly-brace macros in expressions, like `m!{ .. }.method()` and `m!{ .. }?`.][88690]\n- [Allow panicking in constant evaluation.][89508]\n- [Ignore derived `Clone` and `Debug` implementations during dead code analysis.][85200]\n\nCompiler\n--------\n\n- [Create more accurate debuginfo for vtables.][89597]\n- [Add `armv6k-nintendo-3ds` at Tier 3\\*.][88529]\n- [Add `armv7-unknown-linux-uclibceabihf` at Tier 3\\*.][88952]\n- [Add `m68k-unknown-linux-gnu` at Tier 3\\*.][88321]\n- [Add SOLID targets at Tier 3\\*:][86191] `aarch64-kmc-solid_asp3`, `armv7a-kmc-solid_asp3-eabi`, `armv7a-kmc-solid_asp3-eabihf`\n\n\\* Refer to Rust's [platform support page][platform-support-doc] for more\n   information on Rust's tiered platform support.\n\nLibraries\n---------\n\n- [Avoid allocations and copying in `Vec::leak`][89337]\n- [Add `#[repr(i8)]` to `Ordering`][89507]\n- [Optimize `File::read_to_end` and `read_to_string`][89582]\n- [Update to Unicode 14.0][89614]\n- [Many more functions are marked `#[must_use]`][89692], producing a warning\n  when ignoring their return value. This helps catch mistakes such as expecting\n  a function to mutate a value in place rather than return a new value.\n\nStabilised APIs\n---------------\n\n- [`[T; N]::as_mut_slice`][`array::as_mut_slice`]\n- [`[T; N]::as_slice`][`array::as_slice`]\n- [`collections::TryReserveError`]\n- [`HashMap::try_reserve`]\n- [`HashSet::try_reserve`]\n- [`String::try_reserve`]\n- [`String::try_reserve_exact`]\n- [`Vec::try_reserve`]\n- [`Vec::try_reserve_exact`]\n- [`VecDeque::try_reserve`]\n- [`VecDeque::try_reserve_exact`]\n- [`Iterator::map_while`]\n- [`iter::MapWhile`]\n- [`proc_macro::is_available`]\n- [`Command::get_program`]\n- [`Command::get_args`]\n- [`Command::get_envs`]\n- [`Command::get_current_dir`]\n- [`CommandArgs`]\n- [`CommandEnvs`]\n\nThese APIs are now usable in const contexts:\n\n- [`hint::unreachable_unchecked`]\n\nCargo\n-----\n\n- [Stabilize custom profiles][cargo/9943]\n\nCompatibility notes\n-------------------\n\n- [Ignore derived `Clone` and `Debug` implementations during dead code analysis.][85200]\n  This will break some builds that set `#![deny(dead_code)]`.\n\nInternal changes\n----------------\nThese changes provide no direct user facing benefits, but represent significant\nimprovements to the internals and overall performance of rustc\nand related tools.\n\n- [Added an experimental backend for codegen with `libgccjit`.][87260]\n\n[85200]: https://github.com/rust-lang/rust/pull/85200/\n[86191]: https://github.com/rust-lang/rust/pull/86191/\n[87220]: https://github.com/rust-lang/rust/pull/87220/\n[87260]: https://github.com/rust-lang/rust/pull/87260/\n[88321]: https://github.com/rust-lang/rust/pull/88321/\n[88529]: https://github.com/rust-lang/rust/pull/88529/\n[88690]: https://github.com/rust-lang/rust/pull/88690/\n[88952]: https://github.com/rust-lang/rust/pull/88952/\n[89337]: https://github.com/rust-lang/rust/pull/89337/\n[89507]: https://github.com/rust-lang/rust/pull/89507/\n[89508]: https://github.com/rust-lang/rust/pull/89508/\n[89582]: https://github.com/rust-lang/rust/pull/89582/\n[89597]: https://github.com/rust-lang/rust/pull/89597/\n[89614]: https://github.com/rust-lang/rust/pull/89614/\n[89692]: https://github.com/rust-lang/rust/issues/89692/\n[cargo/9943]: https://github.com/rust-lang/cargo/pull/9943/\n[`array::as_mut_slice`]: https://doc.rust-lang.org/std/primitive.array.html#method.as_mut_slice\n[`array::as_slice`]: https://doc.rust-lang.org/std/primitive.array.html#method.as_slice\n[`collections::TryReserveError`]: https://doc.rust-lang.org/std/collections/struct.TryReserveError.html\n[`HashMap::try_reserve`]: https://doc.rust-lang.org/std/collections/hash_map/struct.HashMap.html#method.try_reserve\n[`HashSet::try_reserve`]: https://doc.rust-lang.org/std/collections/hash_set/struct.HashSet.html#method.try_reserve\n[`String::try_reserve`]: https://doc.rust-lang.org/alloc/string/struct.String.html#method.try_reserve\n[`String::try_reserve_exact`]: https://doc.rust-lang.org/alloc/string/struct.String.html#method.try_reserve_exact\n[`Vec::try_reserve`]: https://doc.rust-lang.org/std/vec/struct.Vec.html#method.try_reserve\n[`Vec::try_reserve_exact`]: https://doc.rust-lang.org/std/vec/struct.Vec.html#method.try_reserve_exact\n[`VecDeque::try_reserve`]: https://doc.rust-lang.org/std/collections/struct.VecDeque.html#method.try_reserve\n[`VecDeque::try_reserve_exact`]: https://doc.rust-lang.org/std/collections/struct.VecDeque.html#method.try_reserve_exact\n[`Iterator::map_while`]: https://doc.rust-lang.org/std/iter/trait.Iterator.html#method.map_while\n[`iter::MapWhile`]: https://doc.rust-lang.org/std/iter/struct.MapWhile.html\n[`proc_macro::is_available`]: https://doc.rust-lang.org/proc_macro/fn.is_available.html\n[`Command::get_program`]: https://doc.rust-lang.org/std/process/struct.Command.html#method.get_program\n[`Command::get_args`]: https://doc.rust-lang.org/std/process/struct.Command.html#method.get_args\n[`Command::get_envs`]: https://doc.rust-lang.org/std/process/struct.Command.html#method.get_envs\n[`Command::get_current_dir`]: https://doc.rust-lang.org/std/process/struct.Command.html#method.get_current_dir\n[`CommandArgs`]: https://doc.rust-lang.org/std/process/struct.CommandArgs.html\n[`CommandEnvs`]: https://doc.rust-lang.org/std/process/struct.CommandEnvs.html\n\nVersion 1.56.1 (2021-11-01)\n===========================\n\n- New lints to detect the presence of bidirectional-override Unicode\n  codepoints in the compiled source code ([CVE-2021-42574])\n\n[CVE-2021-42574]: https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-42574\n\nVersion 1.56.0 (2021-10-21)\n========================\n\nLanguage\n--------\n\n- [The 2021 Edition is now stable.][rust#88100]\n  See [the edition guide][rust-2021-edition-guide] for more details.\n- [The pattern in `binding @ pattern` can now also introduce new bindings.][rust#85305]\n- [Union field access is permitted in `const fn`.][rust#85769]\n\n[rust-2021-edition-guide]: https://doc.rust-lang.org/nightly/edition-guide/rust-2021/index.html\n\nCompiler\n--------\n\n- [Upgrade to LLVM 13.][rust#87570]\n- [Support memory, address, and thread sanitizers on aarch64-unknown-freebsd.][rust#88023]\n- [Allow specifying a deployment target version for all iOS targets][rust#87699]\n- [Warnings can be forced on with `--force-warn`.][rust#87472]\n  This feature is primarily intended for usage by `cargo fix`, rather than end users.\n- [Promote `aarch64-apple-ios-sim` to Tier 2\\*.][rust#87760]\n- [Add `powerpc-unknown-freebsd` at Tier 3\\*.][rust#87370]\n- [Add `riscv32imc-esp-espidf` at Tier 3\\*.][rust#87666]\n\n\\* Refer to Rust's [platform support page][platform-support-doc] for more\ninformation on Rust's tiered platform support.\n\nLibraries\n---------\n\n- [Allow writing of incomplete UTF-8 sequences via stdout/stderr on Windows.][rust#83342]\n  The Windows console still requires valid Unicode, but this change allows\n  splitting a UTF-8 character across multiple write calls. This allows, for\n  instance, programs that just read and write data buffers (e.g. copying a file\n  to stdout) without regard for Unicode or character boundaries.\n- [Prefer `AtomicU{64,128}` over Mutex for Instant backsliding protection.][rust#83093]\n  For this use case, atomics scale much better under contention.\n- [Implement `Extend<(A, B)>` for `(Extend<A>, Extend<B>)`][rust#85835]\n- [impl Default, Copy, Clone for std::io::Sink and std::io::Empty][rust#86744]\n- [`impl From<[(K, V); N]>` for all collections.][rust#84111]\n- [Remove `P: Unpin` bound on impl Future for Pin.][rust#81363]\n- [Treat invalid environment variable names as nonexistent.][rust#86183]\n  Previously, the environment functions would panic if given a variable name\n  with an internal null character or equal sign (`=`). Now, these functions will\n  just treat such names as nonexistent variables, since the OS cannot represent\n  the existence of a variable with such a name.\n\nStabilised APIs\n---------------\n\n- [`std::os::unix::fs::chroot`]\n- [`UnsafeCell::raw_get`]\n- [`BufWriter::into_parts`]\n- [`core::panic::{UnwindSafe, RefUnwindSafe, AssertUnwindSafe}`]\n  These APIs were previously stable in `std`, but are now also available in `core`.\n- [`Vec::shrink_to`]\n- [`String::shrink_to`]\n- [`OsString::shrink_to`]\n- [`PathBuf::shrink_to`]\n- [`BinaryHeap::shrink_to`]\n- [`VecDeque::shrink_to`]\n- [`HashMap::shrink_to`]\n- [`HashSet::shrink_to`]\n\nThese APIs are now usable in const contexts:\n\n- [`std::mem::transmute`]\n- [`[T]::first`][`slice::first`]\n- [`[T]::split_first`][`slice::split_first`]\n- [`[T]::last`][`slice::last`]\n- [`[T]::split_last`][`slice::split_last`]\n\nCargo\n-----\n\n- [Cargo supports specifying a minimum supported Rust version in Cargo.toml.][`rust-version`]\n  This has no effect at present on dependency version selection.\n  We encourage crates to specify their minimum supported Rust version, and we encourage CI systems\n  that support Rust code to include a crate's specified minimum version in the test matrix for that\n  crate by default.\n\nCompatibility notes\n-------------------\n\n- [Update to new argument parsing rules on Windows.][rust#87580]\n  This adjusts Rust's standard library to match the behavior of the standard\n  libraries for C/C++. The rules have changed slightly over time, and this PR\n  brings us to the latest set of rules (changed in 2008).\n- [Disallow the aapcs calling convention on aarch64][rust#88399]\n  This was already not supported by LLVM; this change surfaces this lack of\n  support with a better error message.\n- [Make `SEMICOLON_IN_EXPRESSIONS_FROM_MACROS` warn by default][rust#87385]\n- [Warn when an escaped newline skips multiple lines.][rust#87671]\n- [Calls to `libc::getpid` / `std::process::id` from `Command::pre_exec`\n   may return different values on glibc <= 2.24.][rust#81825]\n   Rust now invokes the `clone3` system call directly, when available, to use new functionality\n   available via that system call. Older versions of glibc cache the result of `getpid`, and only\n   update that cache when calling glibc's clone/fork functions, so a direct system call bypasses\n   that cache update. glibc 2.25 and newer no longer cache `getpid` for exactly this reason.\n\nInternal changes\n----------------\nThese changes provide no direct user facing benefits, but represent significant\nimprovements to the internals and overall performance of rustc\nand related tools.\n\n- [LLVM is compiled with PGO in published x86_64-unknown-linux-gnu artifacts.][rust#88069]\n  This improves the performance of most Rust builds.\n- [Unify representation of macros in internal data structures.][rust#88019]\n  This change fixes a host of bugs with the handling of macros by the compiler,\n  as well as rustdoc.\n\n[`std::os::unix::fs::chroot`]: https://doc.rust-lang.org/stable/std/os/unix/fs/fn.chroot.html\n[`UnsafeCell::raw_get`]: https://doc.rust-lang.org/stable/std/cell/struct.UnsafeCell.html#method.raw_get\n[`BufWriter::into_parts`]: https://doc.rust-lang.org/stable/std/io/struct.BufWriter.html#method.into_parts\n[`core::panic::{UnwindSafe, RefUnwindSafe, AssertUnwindSafe}`]: https://github.com/rust-lang/rust/pull/84662\n[`Vec::shrink_to`]: https://doc.rust-lang.org/stable/std/vec/struct.Vec.html#method.shrink_to\n[`String::shrink_to`]: https://doc.rust-lang.org/stable/std/string/struct.String.html#method.shrink_to\n[`OsString::shrink_to`]: https://doc.rust-lang.org/stable/std/ffi/struct.OsString.html#method.shrink_to\n[`PathBuf::shrink_to`]: https://doc.rust-lang.org/stable/std/path/struct.PathBuf.html#method.shrink_to\n[`BinaryHeap::shrink_to`]: https://doc.rust-lang.org/stable/std/collections/struct.BinaryHeap.html#method.shrink_to\n[`VecDeque::shrink_to`]: https://doc.rust-lang.org/stable/std/collections/struct.VecDeque.html#method.shrink_to\n[`HashMap::shrink_to`]: https://doc.rust-lang.org/stable/std/collections/hash_map/struct.HashMap.html#method.shrink_to\n[`HashSet::shrink_to`]: https://doc.rust-lang.org/stable/std/collections/hash_set/struct.HashSet.html#method.shrink_to\n[`std::mem::transmute`]: https://doc.rust-lang.org/stable/std/mem/fn.transmute.html\n[`slice::first`]: https://doc.rust-lang.org/stable/std/primitive.slice.html#method.first\n[`slice::split_first`]: https://doc.rust-lang.org/stable/std/primitive.slice.html#method.split_first\n[`slice::last`]: https://doc.rust-lang.org/stable/std/primitive.slice.html#method.last\n[`slice::split_last`]: https://doc.rust-lang.org/stable/std/primitive.slice.html#method.split_last\n[`rust-version`]: https://doc.rust-lang.org/nightly/cargo/reference/manifest.html#the-rust-version-field\n[rust#87671]: https://github.com/rust-lang/rust/pull/87671\n[rust#86183]: https://github.com/rust-lang/rust/pull/86183\n[rust#87385]: https://github.com/rust-lang/rust/pull/87385\n[rust#88100]: https://github.com/rust-lang/rust/pull/88100\n[rust#85305]: https://github.com/rust-lang/rust/pull/85305\n[rust#88069]: https://github.com/rust-lang/rust/pull/88069\n[rust#87472]: https://github.com/rust-lang/rust/pull/87472\n[rust#87699]: https://github.com/rust-lang/rust/pull/87699\n[rust#87570]: https://github.com/rust-lang/rust/pull/87570\n[rust#88023]: https://github.com/rust-lang/rust/pull/88023\n[rust#87760]: https://github.com/rust-lang/rust/pull/87760\n[rust#87370]: https://github.com/rust-lang/rust/pull/87370\n[rust#87580]: https://github.com/rust-lang/rust/pull/87580\n[rust#83342]: https://github.com/rust-lang/rust/pull/83342\n[rust#83093]: https://github.com/rust-lang/rust/pull/83093\n[rust#85835]: https://github.com/rust-lang/rust/pull/85835\n[rust#86744]: https://github.com/rust-lang/rust/pull/86744\n[rust#81363]: https://github.com/rust-lang/rust/pull/81363\n[rust#84111]: https://github.com/rust-lang/rust/pull/84111\n[rust#85769]: https://github.com/rust-lang/rust/pull/85769#issuecomment-854363720\n[rust#88399]: https://github.com/rust-lang/rust/pull/88399\n[rust#81825]: https://github.com/rust-lang/rust/pull/81825#issuecomment-808406918\n[rust#88019]: https://github.com/rust-lang/rust/pull/88019\n[rust#87666]: https://github.com/rust-lang/rust/pull/87666\n\nVersion 1.55.0 (2021-09-09)\n============================\n\nLanguage\n--------\n- [You can now write open \"from\" range patterns (`X..`), which will start at `X` and\n  will end at the maximum value of the integer.][83918]\n- [You can now explicitly import the prelude of different editions\n  through `std::prelude` (e.g. `use std::prelude::rust_2021::*;`).][86294]\n\nCompiler\n--------\n- [Added tier 3\\* support for `powerpc64le-unknown-freebsd`.][83572]\n\n\\* Refer to Rust's [platform support page][platform-support-doc] for more\n   information on Rust's tiered platform support.\n\nLibraries\n---------\n\n- [Updated std's float parsing to use the Eisel-Lemire algorithm.][86761]\n  These improvements should in general provide faster string parsing of floats,\n  no longer reject certain valid floating point values, and reduce\n  the produced code size for non-stripped artifacts.\n- [`string::Drain` now implements `AsRef<str>` and `AsRef<[u8]>`.][86858]\n\nStabilised APIs\n---------------\n\n- [`Bound::cloned`]\n- [`Drain::as_str`]\n- [`IntoInnerError::into_error`]\n- [`IntoInnerError::into_parts`]\n- [`MaybeUninit::assume_init_mut`]\n- [`MaybeUninit::assume_init_ref`]\n- [`MaybeUninit::write`]\n- [`array::map`]\n- [`ops::ControlFlow`]\n- [`x86::_bittest`]\n- [`x86::_bittestandcomplement`]\n- [`x86::_bittestandreset`]\n- [`x86::_bittestandset`]\n- [`x86_64::_bittest64`]\n- [`x86_64::_bittestandcomplement64`]\n- [`x86_64::_bittestandreset64`]\n- [`x86_64::_bittestandset64`]\n\nThe following previously stable functions are now `const`.\n\n- [`str::from_utf8_unchecked`]\n\n\nCargo\n-----\n- [Cargo will now deduplicate compiler diagnostics to the terminal when invoking\n  rustc in parallel such as when using `cargo test`.][cargo/9675]\n- [The package definition in `cargo metadata` now includes the `\"default_run\"`\n  field from the manifest.][cargo/9550]\n- [Added `cargo d` as an alias for `cargo doc`.][cargo/9680]\n- [Added `{lib}` as formatting option for `cargo tree` to print the `\"lib_name\"`\n  of packages.][cargo/9663]\n\nRustdoc\n-------\n- [Added \"Go to item on exact match\" search option.][85876]\n- [The \"Implementors\" section on traits no longer shows redundant\n  method definitions.][85970]\n- [Trait implementations are toggled open by default.][86260] This should make the\n  implementations more searchable by tools like `CTRL+F` in your browser.\n- [Intra-doc links should now correctly resolve associated items (e.g. methods)\n  through type aliases.][86334]\n- [Traits which are marked with `#[doc(hidden)]` will no longer appear in the\n  \"Trait Implementations\" section.][86513]\n\n\nCompatibility Notes\n-------------------\n- [std functions that return an `io::Error` will no longer use the\n  `ErrorKind::Other` variant.][85746] This is to better reflect that these\n  kinds of errors could be categorised [into newer more specific `ErrorKind`\n  variants][79965], and that they do not represent a user error.\n- [Using environment variable names with `process::Command` on Windows now\n  behaves as expected.][85270] Previously using environment variables with\n  `Command` would cause them to be ASCII-uppercased.\n- [Rustdoc will now warn on using rustdoc lints that aren't prefixed\n  with `rustdoc::`][86849]\n- `RUSTFLAGS` is no longer set for build scripts. Build scripts\n  should use `CARGO_ENCODED_RUSTFLAGS` instead. See the\n  [documentation](https://doc.rust-lang.org/nightly/cargo/reference/environment-variables.html#environment-variables-cargo-sets-for-build-scripts)\n  for more details.\n\n[86849]: https://github.com/rust-lang/rust/pull/86849\n[86513]: https://github.com/rust-lang/rust/pull/86513\n[86334]: https://github.com/rust-lang/rust/pull/86334\n[86260]: https://github.com/rust-lang/rust/pull/86260\n[85970]: https://github.com/rust-lang/rust/pull/85970\n[85876]: https://github.com/rust-lang/rust/pull/85876\n[83572]: https://github.com/rust-lang/rust/pull/83572\n[86294]: https://github.com/rust-lang/rust/pull/86294\n[86858]: https://github.com/rust-lang/rust/pull/86858\n[86761]: https://github.com/rust-lang/rust/pull/86761\n[85746]: https://github.com/rust-lang/rust/pull/85746\n[85270]: https://github.com/rust-lang/rust/pull/85270\n[83918]: https://github.com/rust-lang/rust/pull/83918\n[79965]: https://github.com/rust-lang/rust/pull/79965\n[cargo/9663]: https://github.com/rust-lang/cargo/pull/9663\n[cargo/9675]: https://github.com/rust-lang/cargo/pull/9675\n[cargo/9550]: https://github.com/rust-lang/cargo/pull/9550\n[cargo/9680]: https://github.com/rust-lang/cargo/pull/9680\n[`array::map`]: https://doc.rust-lang.org/stable/std/primitive.array.html#method.map\n[`Bound::cloned`]: https://doc.rust-lang.org/stable/std/ops/enum.Bound.html#method.cloned\n[`Drain::as_str`]: https://doc.rust-lang.org/stable/std/string/struct.Drain.html#method.as_str\n[`IntoInnerError::into_error`]: https://doc.rust-lang.org/stable/std/io/struct.IntoInnerError.html#method.into_error\n[`IntoInnerError::into_parts`]: https://doc.rust-lang.org/stable/std/io/struct.IntoInnerError.html#method.into_parts\n[`MaybeUninit::assume_init_mut`]: https://doc.rust-lang.org/stable/std/mem/union.MaybeUninit.html#method.assume_init_mut\n[`MaybeUninit::assume_init_ref`]: https://doc.rust-lang.org/stable/std/mem/union.MaybeUninit.html#method.assume_init_ref\n[`MaybeUninit::write`]: https://doc.rust-lang.org/stable/std/mem/union.MaybeUninit.html#method.write\n[`ops::ControlFlow`]: https://doc.rust-lang.org/stable/std/ops/enum.ControlFlow.html\n[`str::from_utf8_unchecked`]: https://doc.rust-lang.org/stable/std/str/fn.from_utf8_unchecked.html\n[`x86::_bittest`]: https://doc.rust-lang.org/stable/core/arch/x86/fn._bittest.html\n[`x86::_bittestandcomplement`]: https://doc.rust-lang.org/stable/core/arch/x86/fn._bittestandcomplement.html\n[`x86::_bittestandreset`]: https://doc.rust-lang.org/stable/core/arch/x86/fn._bittestandreset.html\n[`x86::_bittestandset`]: https://doc.rust-lang.org/stable/core/arch/x86/fn._bittestandset.html\n[`x86_64::_bittest64`]: https://doc.rust-lang.org/stable/core/arch/x86_64/fn._bittest64.html\n[`x86_64::_bittestandcomplement64`]: https://doc.rust-lang.org/stable/core/arch/x86_64/fn._bittestandcomplement64.html\n[`x86_64::_bittestandreset64`]: https://doc.rust-lang.org/stable/core/arch/x86_64/fn._bittestandreset64.html\n[`x86_64::_bittestandset64`]: https://doc.rust-lang.org/stable/core/arch/x86_64/fn._bittestandset64.html\n\n\nVersion 1.54.0 (2021-07-29)\n============================\n\nLanguage\n-----------------------\n\n- [You can now use macros for values in some built-in attributes.][83366]\n  This primarily allows you to call macros within the `#[doc]` attribute. For\n  example, to include external documentation in your crate, you can now write\n  the following:\n  ```rust\n  #![doc = include_str!(\"README.md\")]\n  ```\n\n- [You can now cast between unsized slice types (and types which contain\n  unsized slices) in `const fn`.][85078]\n- [You can now use multiple generic lifetimes with `impl Trait` where the\n   lifetimes don't explicitly outlive another.][84701] In code this means\n   that you can now have `impl Trait<'a, 'b>` where as before you could\n   only have `impl Trait<'a, 'b> where 'b: 'a`.\n\nCompiler\n-----------------------\n\n- [Rustc will now search for custom JSON targets in\n  `/lib/rustlib/<target-triple>/target.json` where `/` is the \"sysroot\"\n  directory.][83800] You can find your sysroot directory by running\n  `rustc --print sysroot`.\n- [Added `wasm` as a `target_family` for WebAssembly platforms.][84072]\n- [You can now use `#[target_feature]` on safe functions when targeting\n  WebAssembly platforms.][84988]\n- [Improved debugger output for enums on Windows MSVC platforms.][85292]\n- [Added tier 3\\* support for `bpfel-unknown-none`\n   and `bpfeb-unknown-none`.][79608]\n- [`-Zmutable-noalias=yes`][82834] is enabled by default when using LLVM 12 or above.\n\n\\* Refer to Rust's [platform support page][platform-support-doc] for more\n   information on Rust's tiered platform support.\n\nLibraries\n-----------------------\n\n- [`panic::panic_any` will now `#[track_caller]`.][85745]\n- [Added `OutOfMemory` as a variant of `io::ErrorKind`.][84744]\n- [ `proc_macro::Literal` now implements `FromStr`.][84717]\n- [The implementations of vendor intrinsics in core::arch have been\n   significantly refactored.][83278] The main user-visible changes are\n   a 50% reduction in the size of libcore.rlib and stricter validation\n   of constant operands passed to intrinsics. The latter is technically\n   a breaking change, but allows Rust to more closely match the C vendor\n   intrinsics API.\n\nStabilized APIs\n---------------\n\n- [`BTreeMap::into_keys`]\n- [`BTreeMap::into_values`]\n- [`HashMap::into_keys`]\n- [`HashMap::into_values`]\n- [`arch::wasm32`]\n- [`VecDeque::binary_search`]\n- [`VecDeque::binary_search_by`]\n- [`VecDeque::binary_search_by_key`]\n- [`VecDeque::partition_point`]\n\nCargo\n-----\n\n- [Added the `--prune <spec>` option to `cargo-tree` to remove a package from\n  the dependency graph.][cargo/9520]\n- [Added the `--depth` option to `cargo-tree` to print only to a certain depth\n  in the tree ][cargo/9499]\n- [Added the `no-proc-macro` value to `cargo-tree --edges` to hide procedural\n  macro dependencies.][cargo/9488]\n- [A new environment variable named `CARGO_TARGET_TMPDIR` is available.][cargo/9375]\n  This variable points to a directory that integration tests and benches\n  can use as a \"scratchpad\" for testing filesystem operations.\n\nCompatibility Notes\n-------------------\n- [Mixing Option and Result via `?` is no longer permitted in closures for inferred types.][86831]\n- [Previously unsound code is no longer permitted where different constructors in branches\n  could require different lifetimes.][85574]\n- As previously mentioned the [`std::arch` intrinsics now uses stricter const checking][83278]\n  than before and may reject some previously accepted code.\n- [`i128` multiplication on Cortex M0+ platforms currently unconditionally causes overflow\n   when compiled with `codegen-units = 1`.][86063]\n\n[85574]: https://github.com/rust-lang/rust/issues/85574\n[86831]: https://github.com/rust-lang/rust/issues/86831\n[86063]: https://github.com/rust-lang/rust/issues/86063\n[79608]: https://github.com/rust-lang/rust/pull/79608\n[84988]: https://github.com/rust-lang/rust/pull/84988\n[84701]: https://github.com/rust-lang/rust/pull/84701\n[84072]: https://github.com/rust-lang/rust/pull/84072\n[85745]: https://github.com/rust-lang/rust/pull/85745\n[84744]: https://github.com/rust-lang/rust/pull/84744\n[85078]: https://github.com/rust-lang/rust/pull/85078\n[84717]: https://github.com/rust-lang/rust/pull/84717\n[83800]: https://github.com/rust-lang/rust/pull/83800\n[83366]: https://github.com/rust-lang/rust/pull/83366\n[83278]: https://github.com/rust-lang/rust/pull/83278\n[85292]: https://github.com/rust-lang/rust/pull/85292\n[82834]: https://github.com/rust-lang/rust/pull/82834\n[cargo/9520]: https://github.com/rust-lang/cargo/pull/9520\n[cargo/9499]: https://github.com/rust-lang/cargo/pull/9499\n[cargo/9488]: https://github.com/rust-lang/cargo/pull/9488\n[cargo/9375]: https://github.com/rust-lang/cargo/pull/9375\n[`BTreeMap::into_keys`]: https://doc.rust-lang.org/std/collections/struct.BTreeMap.html#method.into_keys\n[`BTreeMap::into_values`]: https://doc.rust-lang.org/std/collections/struct.BTreeMap.html#method.into_values\n[`HashMap::into_keys`]: https://doc.rust-lang.org/std/collections/struct.HashMap.html#method.into_keys\n[`HashMap::into_values`]: https://doc.rust-lang.org/std/collections/struct.HashMap.html#method.into_values\n[`arch::wasm32`]: https://doc.rust-lang.org/core/arch/wasm32/index.html\n[`VecDeque::binary_search`]: https://doc.rust-lang.org/std/collections/struct.VecDeque.html#method.binary_search\n[`VecDeque::binary_search_by`]: https://doc.rust-lang.org/std/collections/struct.VecDeque.html#method.binary_search_by\n\n[`VecDeque::binary_search_by_key`]: https://doc.rust-lang.org/std/collections/struct.VecDeque.html#method.binary_search_by_key\n\n[`VecDeque::partition_point`]: https://doc.rust-lang.org/std/collections/struct.VecDeque.html#method.partition_point\n\nVersion 1.53.0 (2021-06-17)\n============================\n\nLanguage\n-----------------------\n- [You can now use unicode for identifiers.][83799] This allows multilingual\n  identifiers but still doesn't allow glyphs that are not considered characters\n  such as `◆` or `🦀`. More specifically you can now use any identifier that\n  matches the UAX #31 \"Unicode Identifier and Pattern Syntax\" standard. This\n  is the same standard as languages like Python, however Rust uses NFC\n  normalization which may be different from other languages.\n- [You can now specify \"or patterns\" inside pattern matches.][79278]\n  Previously you could only use `|` (OR) on complete patterns. E.g.\n  ```rust\n  let x = Some(2u8);\n  // Before\n  matches!(x, Some(1) | Some(2));\n  // Now\n  matches!(x, Some(1 | 2));\n  ```\n- [Added the `:pat_param` `macro_rules!` matcher.][83386] This matcher\n  has the same semantics as the `:pat` matcher. This is to allow `:pat`\n  to change semantics to being a pattern fragment in a future edition.\n\nCompiler\n-----------------------\n- [Updated the minimum external LLVM version to LLVM 10.][83387]\n- [Added Tier 3\\* support for the `wasm64-unknown-unknown` target.][80525]\n- [Improved debuginfo for closures and async functions on Windows MSVC.][83941]\n\n\\* Refer to Rust's [platform support page][platform-support-doc] for more\ninformation on Rust's tiered platform support.\n\nLibraries\n-----------------------\n- [Abort messages will now forward to `android_set_abort_message` on\n  Android platforms when available.][81469]\n- [`slice::IterMut<'_, T>` now implements `AsRef<[T]>`][82771]\n- [Arrays of any length now implement `IntoIterator`.][84147]\n  Currently calling `.into_iter()` as a method on an array will\n  return `impl Iterator<Item=&T>`, but this may change in a\n  future edition to change `Item` to `T`. Calling `IntoIterator::into_iter`\n  directly on arrays will provide `impl Iterator<Item=T>` as expected.\n- [`leading_zeros`, and `trailing_zeros` are now available on all\n  `NonZero` integer types.][84082]\n- [`{f32, f64}::from_str` now parse and print special values\n  (`NaN`, `-0`) according to IEEE 754.][78618]\n- [You can now index into slices using `(Bound<usize>, Bound<usize>)`.][77704]\n- [Add the `BITS` associated constant to all numeric types.][82565]\n\nStabilised APIs\n---------------\n- [`AtomicBool::fetch_update`]\n- [`AtomicPtr::fetch_update`]\n- [`BTreeMap::retain`]\n- [`BTreeSet::retain`]\n- [`BufReader::seek_relative`]\n- [`DebugStruct::non_exhaustive`]\n- [`Duration::MAX`]\n- [`Duration::ZERO`]\n- [`Duration::is_zero`]\n- [`Duration::saturating_add`]\n- [`Duration::saturating_mul`]\n- [`Duration::saturating_sub`]\n- [`ErrorKind::Unsupported`]\n- [`Option::insert`]\n- [`Ordering::is_eq`]\n- [`Ordering::is_ge`]\n- [`Ordering::is_gt`]\n- [`Ordering::is_le`]\n- [`Ordering::is_lt`]\n- [`Ordering::is_ne`]\n- [`OsStr::is_ascii`]\n- [`OsStr::make_ascii_lowercase`]\n- [`OsStr::make_ascii_uppercase`]\n- [`OsStr::to_ascii_lowercase`]\n- [`OsStr::to_ascii_uppercase`]\n- [`Peekable::peek_mut`]\n- [`Rc::decrement_strong_count`]\n- [`Rc::increment_strong_count`]\n- [`Vec::extend_from_within`]\n- [`array::from_mut`]\n- [`array::from_ref`]\n- [`cmp::max_by_key`]\n- [`cmp::max_by`]\n- [`cmp::min_by_key`]\n- [`cmp::min_by`]\n- [`f32::is_subnormal`]\n- [`f64::is_subnormal`]\n\nCargo\n-----------------------\n- [Cargo now supports git repositories where the default `HEAD` branch is not\n  \"master\".][cargo/9392] This also includes a switch to the version 3 `Cargo.lock` format\n  which can handle default branches correctly.\n- [macOS targets now default to `unpacked` split-debuginfo.][cargo/9298]\n- [The `authors` field is no longer included in `Cargo.toml` for new\n  projects.][cargo/9282]\n\nRustdoc\n-----------------------\n- [Added the `rustdoc::bare_urls` lint that warns when you have URLs\n  without hyperlinks.][81764]\n\nCompatibility Notes\n-------------------\n- [Implement token-based handling of attributes during expansion][82608]\n- [`Ipv4::from_str` will now reject octal format IP addresses in addition\n  to rejecting hexadecimal IP addresses.][83652] The octal format can lead\n  to confusion and potential security vulnerabilities and [is no\n  longer recommended][ietf6943].\n- [The added `BITS` constant may conflict with external definitions.][85667]\n  In particular, this was known to be a problem in the `lexical-core` crate,\n  but they have published fixes for semantic versions 0.4 through 0.7. To\n  update this dependency alone, use `cargo update -p lexical-core`.\n- Incremental compilation remains off by default, unless one uses the `RUSTC_FORCE_INCREMENTAL=1` environment variable added in 1.52.1.\n\nInternal Only\n-------------\nThese changes provide no direct user facing benefits, but represent significant\nimprovements to the internals and overall performance of rustc and\nrelated tools.\n\n- [Rework the `std::sys::windows::alloc` implementation.][83065]\n- [rustdoc: Don't enter an infer_ctxt in get_blanket_impls for impls that aren't blanket impls.][82864]\n- [rustdoc: Only look at blanket impls in `get_blanket_impls`][83681]\n- [Rework rustdoc const type][82873]\n\n[85667]: https://github.com/rust-lang/rust/pull/85667\n[83386]: https://github.com/rust-lang/rust/pull/83386\n[82771]: https://github.com/rust-lang/rust/pull/82771\n[84147]: https://github.com/rust-lang/rust/pull/84147\n[84082]: https://github.com/rust-lang/rust/pull/84082\n[83799]: https://github.com/rust-lang/rust/pull/83799\n[83681]: https://github.com/rust-lang/rust/pull/83681\n[83652]: https://github.com/rust-lang/rust/pull/83652\n[83387]: https://github.com/rust-lang/rust/pull/83387\n[82873]: https://github.com/rust-lang/rust/pull/82873\n[82864]: https://github.com/rust-lang/rust/pull/82864\n[82608]: https://github.com/rust-lang/rust/pull/82608\n[82565]: https://github.com/rust-lang/rust/pull/82565\n[80525]: https://github.com/rust-lang/rust/pull/80525\n[79278]: https://github.com/rust-lang/rust/pull/79278\n[78618]: https://github.com/rust-lang/rust/pull/78618\n[77704]: https://github.com/rust-lang/rust/pull/77704\n[83941]: https://github.com/rust-lang/rust/pull/83941\n[83065]: https://github.com/rust-lang/rust/pull/83065\n[81764]: https://github.com/rust-lang/rust/pull/81764\n[81469]: https://github.com/rust-lang/rust/pull/81469\n[cargo/9298]: https://github.com/rust-lang/cargo/pull/9298\n[cargo/9282]: https://github.com/rust-lang/cargo/pull/9282\n[cargo/9392]: https://github.com/rust-lang/cargo/pull/9392\n[`AtomicBool::fetch_update`]: https://doc.rust-lang.org/std/sync/atomic/struct.AtomicBool.html#method.fetch_update\n[`AtomicPtr::fetch_update`]: https://doc.rust-lang.org/std/sync/atomic/struct.AtomicPtr.html#method.fetch_update\n[`BTreeMap::retain`]: https://doc.rust-lang.org/std/collections/struct.BTreeMap.html#method.retain\n[`BTreeSet::retain`]: https://doc.rust-lang.org/std/collections/struct.BTreeSet.html#method.retain\n[`BufReader::seek_relative`]: https://doc.rust-lang.org/std/io/struct.BufReader.html#method.seek_relative\n[`DebugStruct::non_exhaustive`]: https://doc.rust-lang.org/std/fmt/struct.DebugStruct.html#method.finish_non_exhaustive\n[`Duration::MAX`]: https://doc.rust-lang.org/std/time/struct.Duration.html#associatedconstant.MAX\n[`Duration::ZERO`]: https://doc.rust-lang.org/std/time/struct.Duration.html#associatedconstant.ZERO\n[`Duration::is_zero`]: https://doc.rust-lang.org/std/time/struct.Duration.html#method.is_zero\n[`Duration::saturating_add`]: https://doc.rust-lang.org/std/time/struct.Duration.html#method.saturating_add\n[`Duration::saturating_mul`]: https://doc.rust-lang.org/std/time/struct.Duration.html#method.saturating_mul\n[`Duration::saturating_sub`]: https://doc.rust-lang.org/std/time/struct.Duration.html#method.saturating_sub\n[`ErrorKind::Unsupported`]: https://doc.rust-lang.org/std/io/enum.ErrorKind.html#variant.Unsupported\n[`Option::insert`]: https://doc.rust-lang.org/std/option/enum.Option.html#method.insert\n[`Ordering::is_eq`]: https://doc.rust-lang.org/std/cmp/enum.Ordering.html#method.is_eq\n[`Ordering::is_ge`]: https://doc.rust-lang.org/std/cmp/enum.Ordering.html#method.is_ge\n[`Ordering::is_gt`]: https://doc.rust-lang.org/std/cmp/enum.Ordering.html#method.is_gt\n[`Ordering::is_le`]: https://doc.rust-lang.org/std/cmp/enum.Ordering.html#method.is_le\n[`Ordering::is_lt`]: https://doc.rust-lang.org/std/cmp/enum.Ordering.html#method.is_lt\n[`Ordering::is_ne`]: https://doc.rust-lang.org/std/cmp/enum.Ordering.html#method.is_ne\n[`OsStr::is_ascii`]: https://doc.rust-lang.org/std/ffi/struct.OsStr.html#method.is_ascii\n[`OsStr::make_ascii_lowercase`]: https://doc.rust-lang.org/std/ffi/struct.OsStr.html#method.make_ascii_lowercase\n[`OsStr::make_ascii_uppercase`]: https://doc.rust-lang.org/std/ffi/struct.OsStr.html#method.make_ascii_uppercase\n[`OsStr::to_ascii_lowercase`]: https://doc.rust-lang.org/std/ffi/struct.OsStr.html#method.to_ascii_lowercase\n[`OsStr::to_ascii_uppercase`]: https://doc.rust-lang.org/std/ffi/struct.OsStr.html#method.to_ascii_uppercase\n[`Peekable::peek_mut`]: https://doc.rust-lang.org/std/iter/struct.Peekable.html#method.peek_mut\n[`Rc::decrement_strong_count`]: https://doc.rust-lang.org/std/rc/struct.Rc.html#method.decrement_strong_count\n[`Rc::increment_strong_count`]: https://doc.rust-lang.org/std/rc/struct.Rc.html#method.increment_strong_count\n[`Vec::extend_from_within`]: https://doc.rust-lang.org/beta/std/vec/struct.Vec.html#method.extend_from_within\n[`array::from_mut`]: https://doc.rust-lang.org/beta/std/array/fn.from_mut.html\n[`array::from_ref`]: https://doc.rust-lang.org/beta/std/array/fn.from_ref.html\n[`cmp::max_by_key`]: https://doc.rust-lang.org/beta/std/cmp/fn.max_by_key.html\n[`cmp::max_by`]: https://doc.rust-lang.org/beta/std/cmp/fn.max_by.html\n[`cmp::min_by_key`]: https://doc.rust-lang.org/beta/std/cmp/fn.min_by_key.html\n[`cmp::min_by`]: https://doc.rust-lang.org/beta/std/cmp/fn.min_by.html\n[`f32::is_subnormal`]: https://doc.rust-lang.org/std/primitive.f32.html#method.is_subnormal\n[`f64::is_subnormal`]: https://doc.rust-lang.org/std/primitive.f64.html#method.is_subnormal\n[ietf6943]: https://datatracker.ietf.org/doc/html/rfc6943#section-3.1.1\n\n\nVersion 1.52.1 (2021-05-10)\n============================\n\nThis release disables incremental compilation, unless the user has explicitly\nopted in via the newly added RUSTC_FORCE_INCREMENTAL=1 environment variable.\n\nThis is due to the widespread, and frequently occurring, breakage encountered by\nRust users due to newly enabled incremental verification in 1.52.0. Notably,\nRust users **should** upgrade to 1.52.0 or 1.52.1: the bugs that are detected by\nnewly added incremental verification are still present in past stable versions,\nand are not yet fixed on any channel. These bugs can lead to miscompilation of\nRust binaries.\n\nThese problems only affect incremental builds, so release builds with Cargo\nshould not be affected unless the user has explicitly opted into incremental.\nDebug and check builds are affected.\n\nSee [84970] for more details.\n\n[84970]: https://github.com/rust-lang/rust/issues/84970\n\nVersion 1.52.0 (2021-05-06)\n============================\n\nLanguage\n--------\n- [Added the `unsafe_op_in_unsafe_fn` lint, which checks whether the unsafe code\n  in an `unsafe fn` is wrapped in a `unsafe` block.][79208] This lint\n  is allowed by default, and may become a warning or hard error in a\n  future edition.\n- [You can now cast mutable references to arrays to a pointer of the same type as\n  the element.][81479]\n\nCompiler\n--------\n- [Upgraded the default LLVM to LLVM 12.][81451]\n\nAdded tier 3\\* support for the following targets.\n\n- [`s390x-unknown-linux-musl`][82166]\n- [`riscv32gc-unknown-linux-musl` & `riscv64gc-unknown-linux-musl`][82202]\n- [`powerpc-unknown-openbsd`][82733]\n\n\\* Refer to Rust's [platform support page][platform-support-doc] for more\ninformation on Rust's tiered platform support.\n\nLibraries\n---------\n- [`OsString` now implements `Extend` and `FromIterator`.][82121]\n- [`cmp::Reverse` now has `#[repr(transparent)]` representation.][81879]\n- [`Arc<impl Error>` now implements `error::Error`.][80553]\n- [All integer division and remainder operations are now `const`.][80962]\n\nStabilised APIs\n-------------\n- [`Arguments::as_str`]\n- [`char::MAX`]\n- [`char::REPLACEMENT_CHARACTER`]\n- [`char::UNICODE_VERSION`]\n- [`char::decode_utf16`]\n- [`char::from_digit`]\n- [`char::from_u32_unchecked`]\n- [`char::from_u32`]\n- [`slice::partition_point`]\n- [`str::rsplit_once`]\n- [`str::split_once`]\n\nThe following previously stable APIs are now `const`.\n\n- [`char::len_utf8`]\n- [`char::len_utf16`]\n- [`char::to_ascii_uppercase`]\n- [`char::to_ascii_lowercase`]\n- [`char::eq_ignore_ascii_case`]\n- [`u8::to_ascii_uppercase`]\n- [`u8::to_ascii_lowercase`]\n- [`u8::eq_ignore_ascii_case`]\n\nRustdoc\n-------\n- [Rustdoc lints are now treated as a tool lint, meaning that\n  lints are now prefixed with `rustdoc::` (e.g. `#[warn(rustdoc::broken_intra_doc_links)]`).][80527]\n  Using the old style is still allowed, and will become a warning in\n  a future release.\n- [Rustdoc now supports argument files.][82261]\n- [Rustdoc now generates smart punctuation for documentation.][79423]\n- [You can now use \"task lists\" in Rustdoc Markdown.][81766] E.g.\n  ```markdown\n  - [x] Complete\n  - [ ] Todo\n  ```\n\nMisc\n----\n- [You can now pass multiple filters to tests.][81356] E.g.\n  `cargo test -- foo bar` will run all tests that match `foo` and `bar`.\n- [Rustup now distributes PDB symbols for the `std` library on Windows,\n  allowing you to see `std` symbols when debugging.][82218]\n\nInternal Only\n-------------\nThese changes provide no direct user facing benefits, but represent significant\nimprovements to the internals and overall performance of rustc and\nrelated tools.\n\n- [Check the result cache before the DepGraph when ensuring queries][81855]\n- [Try fast_reject::simplify_type in coherence before doing full check][81744]\n- [Only store a LocalDefId in some HIR nodes][81611]\n- [Store HIR attributes in a side table][79519]\n\nCompatibility Notes\n-------------------\n- [Cargo build scripts are now forbidden from setting `RUSTC_BOOTSTRAP`.][cargo/9181]\n- [Removed support for the `x86_64-rumprun-netbsd` target.][82594]\n- [Deprecated the `x86_64-sun-solaris` target in favor of `x86_64-pc-solaris`.][82216]\n- [Rustdoc now only accepts `,`, ` `, and `\\t` as delimiters for specifying\n  languages in code blocks.][78429]\n- [Rustc now catches more cases of `pub_use_of_private_extern_crate`][80763]\n- [Changes in how proc macros handle whitespace may lead to panics when used\n  with older `proc-macro-hack` versions. A `cargo update` should be sufficient to fix this in all cases.][84136]\n- [Turn `#[derive]` into a regular macro attribute][79078]\n\n[84136]: https://github.com/rust-lang/rust/issues/84136\n[80763]: https://github.com/rust-lang/rust/pull/80763\n[82166]: https://github.com/rust-lang/rust/pull/82166\n[82121]: https://github.com/rust-lang/rust/pull/82121\n[81879]: https://github.com/rust-lang/rust/pull/81879\n[82261]: https://github.com/rust-lang/rust/pull/82261\n[82218]: https://github.com/rust-lang/rust/pull/82218\n[82216]: https://github.com/rust-lang/rust/pull/82216\n[82202]: https://github.com/rust-lang/rust/pull/82202\n[81855]: https://github.com/rust-lang/rust/pull/81855\n[81766]: https://github.com/rust-lang/rust/pull/81766\n[81744]: https://github.com/rust-lang/rust/pull/81744\n[81611]: https://github.com/rust-lang/rust/pull/81611\n[81479]: https://github.com/rust-lang/rust/pull/81479\n[81451]: https://github.com/rust-lang/rust/pull/81451\n[81356]: https://github.com/rust-lang/rust/pull/81356\n[80962]: https://github.com/rust-lang/rust/pull/80962\n[80553]: https://github.com/rust-lang/rust/pull/80553\n[80527]: https://github.com/rust-lang/rust/pull/80527\n[79519]: https://github.com/rust-lang/rust/pull/79519\n[79423]: https://github.com/rust-lang/rust/pull/79423\n[79208]: https://github.com/rust-lang/rust/pull/79208\n[78429]: https://github.com/rust-lang/rust/pull/78429\n[82733]: https://github.com/rust-lang/rust/pull/82733\n[82594]: https://github.com/rust-lang/rust/pull/82594\n[79078]: https://github.com/rust-lang/rust/pull/79078\n[cargo/9181]: https://github.com/rust-lang/cargo/pull/9181\n[`char::MAX`]: https://doc.rust-lang.org/std/primitive.char.html#associatedconstant.MAX\n[`char::REPLACEMENT_CHARACTER`]: https://doc.rust-lang.org/std/primitive.char.html#associatedconstant.REPLACEMENT_CHARACTER\n[`char::UNICODE_VERSION`]: https://doc.rust-lang.org/std/primitive.char.html#associatedconstant.UNICODE_VERSION\n[`char::decode_utf16`]: https://doc.rust-lang.org/std/primitive.char.html#method.decode_utf16\n[`char::from_u32`]: https://doc.rust-lang.org/std/primitive.char.html#method.from_u32\n[`char::from_u32_unchecked`]: https://doc.rust-lang.org/std/primitive.char.html#method.from_u32_unchecked\n[`char::from_digit`]: https://doc.rust-lang.org/std/primitive.char.html#method.from_digit\n[`Peekable::next_if`]: https://doc.rust-lang.org/stable/std/iter/struct.Peekable.html#method.next_if\n[`Peekable::next_if_eq`]: https://doc.rust-lang.org/stable/std/iter/struct.Peekable.html#method.next_if_eq\n[`Arguments::as_str`]: https://doc.rust-lang.org/stable/std/fmt/struct.Arguments.html#method.as_str\n[`str::split_once`]: https://doc.rust-lang.org/stable/std/primitive.str.html#method.split_once\n[`str::rsplit_once`]: https://doc.rust-lang.org/stable/std/primitive.str.html#method.rsplit_once\n[`slice::partition_point`]: https://doc.rust-lang.org/stable/std/primitive.slice.html#method.partition_point\n[`char::len_utf8`]: https://doc.rust-lang.org/stable/std/primitive.char.html#method.len_utf8\n[`char::len_utf16`]: https://doc.rust-lang.org/stable/std/primitive.char.html#method.len_utf16\n[`char::to_ascii_uppercase`]: https://doc.rust-lang.org/stable/std/primitive.char.html#method.to_ascii_uppercase\n[`char::to_ascii_lowercase`]: https://doc.rust-lang.org/stable/std/primitive.char.html#method.to_ascii_lowercase\n[`char::eq_ignore_ascii_case`]: https://doc.rust-lang.org/stable/std/primitive.char.html#method.eq_ignore_ascii_case\n[`u8::to_ascii_uppercase`]: https://doc.rust-lang.org/stable/std/primitive.u8.html#method.to_ascii_uppercase\n[`u8::to_ascii_lowercase`]: https://doc.rust-lang.org/stable/std/primitive.u8.html#method.to_ascii_lowercase\n[`u8::eq_ignore_ascii_case`]: https://doc.rust-lang.org/stable/std/primitive.u8.html#method.eq_ignore_ascii_case\n\nVersion 1.51.0 (2021-03-25)\n============================\n\nLanguage\n--------\n- [You can now parameterize items such as functions, traits, and `struct`s by constant\n  values in addition to by types and lifetimes.][79135] Also known as \"const generics\"\n  E.g. you can now write the following. Note: Only values of primitive integers,\n  `bool`, or `char` types are currently permitted.\n  ```rust\n  struct GenericArray<T, const LENGTH: usize> {\n      inner: [T; LENGTH]\n  }\n\n  impl<T, const LENGTH: usize> GenericArray<T, LENGTH> {\n      const fn last(&self) -> Option<&T> {\n          if LENGTH == 0 {\n              None\n          } else {\n              Some(&self.inner[LENGTH - 1])\n          }\n      }\n  }\n  ```\n\n\nCompiler\n--------\n\n- [Added the `-Csplit-debuginfo` codegen option for macOS platforms.][79570]\n  This option controls whether debug information is split across multiple files\n  or packed into a single file. **Note** This option is unstable on other platforms.\n- [Added tier 3\\* support for `aarch64_be-unknown-linux-gnu`,\n  `aarch64-unknown-linux-gnu_ilp32`, and `aarch64_be-unknown-linux-gnu_ilp32` targets.][81455]\n- [Added tier 3 support for `i386-unknown-linux-gnu` and `i486-unknown-linux-gnu` targets.][80662]\n- [The `target-cpu=native` option will now detect individual features of CPUs.][80749]\n\n\\* Refer to Rust's [platform support page][platform-support-doc] for more\ninformation on Rust's tiered platform support.\n\nLibraries\n---------\n\n- [`Box::downcast` is now also implemented for any `dyn Any + Send + Sync` object.][80945]\n- [`str` now implements `AsMut<str>`.][80279]\n- [`u64` and `u128` now implement `From<char>`.][79502]\n- [`Error` is now implemented for `&T` where `T` implements `Error`.][75180]\n- [`Poll::{map_ok, map_err}` are now implemented for `Poll<Option<Result<T, E>>>`.][80968]\n- [`unsigned_abs` is now implemented for all signed integer types.][80959]\n- [`io::Empty` now implements `io::Seek`.][78044]\n- [`rc::Weak<T>` and `sync::Weak<T>`'s methods such as `as_ptr` are now implemented for\n  `T: ?Sized` types.][80764]\n- [`Div` and `Rem` by their `NonZero` variant is now implemented for all unsigned integers.][79134]\n\n\nStabilized APIs\n---------------\n\n- [`Arc::decrement_strong_count`]\n- [`Arc::increment_strong_count`]\n- [`Once::call_once_force`]\n- [`Peekable::next_if_eq`]\n- [`Peekable::next_if`]\n- [`Seek::stream_position`]\n- [`array::IntoIter`]\n- [`panic::panic_any`]\n- [`ptr::addr_of!`]\n- [`ptr::addr_of_mut!`]\n- [`slice::fill_with`]\n- [`slice::split_inclusive_mut`]\n- [`slice::split_inclusive`]\n- [`slice::strip_prefix`]\n- [`slice::strip_suffix`]\n- [`str::split_inclusive`]\n- [`sync::OnceState`]\n- [`task::Wake`]\n- [`VecDeque::range`]\n- [`VecDeque::range_mut`]\n\nCargo\n-----\n- [Added the `split-debuginfo` profile option to control the -Csplit-debuginfo\n  codegen option.][cargo/9112]\n- [Added the `resolver` field to `Cargo.toml` to enable the new feature resolver\n  and CLI option behavior.][cargo/8997] Version 2 of the feature resolver will try\n  to avoid unifying features of dependencies where that unification could be unwanted.\n  Such as using the same dependency with a `std` feature in a build scripts and\n  proc-macros, while using the `no-std` feature in the final binary. See the\n  [Cargo book documentation][feature-resolver@2.0] for more information on the feature.\n\nRustdoc\n-------\n\n- [Rustdoc will now include documentation for methods available from _nested_ `Deref` traits.][80653]\n- [You can now provide a `--default-theme` flag which sets the default theme to use for\n  documentation.][79642]\n\nVarious improvements to intra-doc links:\n\n- [You can link to non-path primitives such as `slice`.][80181]\n- [You can link to associated items.][74489]\n- [You can now include generic parameters when linking to items, like `Vec<T>`.][76934]\n\nMisc\n----\n- [You can now pass `--include-ignored` to tests (e.g. with\n  `cargo test -- --include-ignored`) to include testing tests marked `#[ignore]`.][80053]\n\nCompatibility Notes\n-------------------\n\n- [WASI platforms no longer use the `wasm-bindgen` ABI, and instead use the wasm32 ABI.][79998]\n- [`rustc` no longer promotes division, modulo and indexing operations to `const` that\n  could fail.][80579]\n- [The minimum version of glibc for the following platforms has been bumped to version 2.31\n  for the distributed artifacts.][81521]\n    - `armv5te-unknown-linux-gnueabi`\n    - `sparc64-unknown-linux-gnu`\n    - `thumbv7neon-unknown-linux-gnueabihf`\n    - `armv7-unknown-linux-gnueabi`\n    - `x86_64-unknown-linux-gnux32`\n- [`atomic::spin_loop_hint` has been deprecated.][80966] It's recommended to use `hint::spin_loop` instead.\n\nInternal Only\n-------------\n\n- [Consistently avoid constructing optimized MIR when not doing codegen][80718]\n\n[79135]: https://github.com/rust-lang/rust/pull/79135\n[74489]: https://github.com/rust-lang/rust/pull/74489\n[76934]: https://github.com/rust-lang/rust/pull/76934\n[79570]: https://github.com/rust-lang/rust/pull/79570\n[80181]: https://github.com/rust-lang/rust/pull/80181\n[79642]: https://github.com/rust-lang/rust/pull/79642\n[80945]: https://github.com/rust-lang/rust/pull/80945\n[80279]: https://github.com/rust-lang/rust/pull/80279\n[80053]: https://github.com/rust-lang/rust/pull/80053\n[79502]: https://github.com/rust-lang/rust/pull/79502\n[75180]: https://github.com/rust-lang/rust/pull/75180\n[81521]: https://github.com/rust-lang/rust/pull/81521\n[80968]: https://github.com/rust-lang/rust/pull/80968\n[80959]: https://github.com/rust-lang/rust/pull/80959\n[80718]: https://github.com/rust-lang/rust/pull/80718\n[80653]: https://github.com/rust-lang/rust/pull/80653\n[80579]: https://github.com/rust-lang/rust/pull/80579\n[79998]: https://github.com/rust-lang/rust/pull/79998\n[78044]: https://github.com/rust-lang/rust/pull/78044\n[81455]: https://github.com/rust-lang/rust/pull/81455\n[80764]: https://github.com/rust-lang/rust/pull/80764\n[80749]: https://github.com/rust-lang/rust/pull/80749\n[80662]: https://github.com/rust-lang/rust/pull/80662\n[79134]: https://github.com/rust-lang/rust/pull/79134\n[80966]: https://github.com/rust-lang/rust/pull/80966\n[cargo/8997]: https://github.com/rust-lang/cargo/pull/8997\n[cargo/9112]: https://github.com/rust-lang/cargo/pull/9112\n[feature-resolver@2.0]: https://doc.rust-lang.org/nightly/cargo/reference/features.html#feature-resolver-version-2\n[`Once::call_once_force`]: https://doc.rust-lang.org/stable/std/sync/struct.Once.html#method.call_once_force\n[`sync::OnceState`]: https://doc.rust-lang.org/stable/std/sync/struct.OnceState.html\n[`panic::panic_any`]: https://doc.rust-lang.org/stable/std/panic/fn.panic_any.html\n[`slice::strip_prefix`]: https://doc.rust-lang.org/stable/std/primitive.slice.html#method.strip_prefix\n[`slice::strip_suffix`]: https://doc.rust-lang.org/stable/std/primitive.slice.html#method.strip_suffix\n[`Arc::increment_strong_count`]: https://doc.rust-lang.org/nightly/std/sync/struct.Arc.html#method.increment_strong_count\n[`Arc::decrement_strong_count`]: https://doc.rust-lang.org/nightly/std/sync/struct.Arc.html#method.decrement_strong_count\n[`slice::fill_with`]: https://doc.rust-lang.org/nightly/std/primitive.slice.html#method.fill_with\n[`ptr::addr_of!`]: https://doc.rust-lang.org/nightly/std/ptr/macro.addr_of.html\n[`ptr::addr_of_mut!`]: https://doc.rust-lang.org/nightly/std/ptr/macro.addr_of_mut.html\n[`array::IntoIter`]: https://doc.rust-lang.org/nightly/std/array/struct.IntoIter.html\n[`slice::split_inclusive`]: https://doc.rust-lang.org/nightly/std/primitive.slice.html#method.split_inclusive\n[`slice::split_inclusive_mut`]: https://doc.rust-lang.org/nightly/std/primitive.slice.html#method.split_inclusive_mut\n[`str::split_inclusive`]: https://doc.rust-lang.org/nightly/std/primitive.str.html#method.split_inclusive\n[`task::Wake`]: https://doc.rust-lang.org/nightly/std/task/trait.Wake.html\n[`Seek::stream_position`]: https://doc.rust-lang.org/nightly/std/io/trait.Seek.html#method.stream_position\n[`Peekable::next_if`]: https://doc.rust-lang.org/nightly/std/iter/struct.Peekable.html#method.next_if\n[`Peekable::next_if_eq`]: https://doc.rust-lang.org/nightly/std/iter/struct.Peekable.html#method.next_if_eq\n[`VecDeque::range`]: https://doc.rust-lang.org/nightly/std/collections/struct.VecDeque.html#method.range\n[`VecDeque::range_mut`]: https://doc.rust-lang.org/nightly/std/collections/struct.VecDeque.html#method.range_mut\n\nVersion 1.50.0 (2021-02-11)\n============================\n\nLanguage\n-----------------------\n- [You can now use `const` values for `x` in `[x; N]` array expressions.][79270]\n  This has been technically possible since 1.38.0, as it was unintentionally stabilized.\n- [Assignments to `ManuallyDrop<T>` union fields are now considered safe.][78068]\n\nCompiler\n-----------------------\n- [Added tier 3\\* support for the `armv5te-unknown-linux-uclibceabi` target.][78142]\n- [Added tier 3 support for the `aarch64-apple-ios-macabi` target.][77484]\n- [The `x86_64-unknown-freebsd` is now built with the full toolset.][79484]\n- [Dropped support for all cloudabi targets.][78439]\n\n\\* Refer to Rust's [platform support page][platform-support-doc] for more\ninformation on Rust's tiered platform support.\n\nLibraries\n-----------------------\n\n- [`proc_macro::Punct` now implements `PartialEq<char>`.][78636]\n- [`ops::{Index, IndexMut}` are now implemented for fixed sized arrays of any length.][74989]\n- [On Unix platforms, the `std::fs::File` type now has a \"niche\" of `-1`.][74699]\n  This value cannot be a valid file descriptor, and now means `Option<File>` takes\n  up the same amount of space as `File`.\n\nStabilized APIs\n---------------\n\n- [`bool::then`]\n- [`btree_map::Entry::or_insert_with_key`]\n- [`f32::clamp`]\n- [`f64::clamp`]\n- [`hash_map::Entry::or_insert_with_key`]\n- [`Ord::clamp`]\n- [`RefCell::take`]\n- [`slice::fill`]\n- [`UnsafeCell::get_mut`]\n\nThe following previously stable methods are now `const`.\n\n- [`IpAddr::is_ipv4`]\n- [`IpAddr::is_ipv6`]\n- [`IpAddr::is_unspecified`]\n- [`IpAddr::is_loopback`]\n- [`IpAddr::is_multicast`]\n- [`Ipv4Addr::octets`]\n- [`Ipv4Addr::is_loopback`]\n- [`Ipv4Addr::is_private`]\n- [`Ipv4Addr::is_link_local`]\n- [`Ipv4Addr::is_multicast`]\n- [`Ipv4Addr::is_broadcast`]\n- [`Ipv4Addr::is_documentation`]\n- [`Ipv4Addr::to_ipv6_compatible`]\n- [`Ipv4Addr::to_ipv6_mapped`]\n- [`Ipv6Addr::segments`]\n- [`Ipv6Addr::is_unspecified`]\n- [`Ipv6Addr::is_loopback`]\n- [`Ipv6Addr::is_multicast`]\n- [`Ipv6Addr::to_ipv4`]\n- [`Layout::size`]\n- [`Layout::align`]\n- [`Layout::from_size_align`]\n- `pow` for all integer types.\n- `checked_pow` for all integer types.\n- `saturating_pow` for all integer types.\n- `wrapping_pow` for all integer types.\n- `next_power_of_two` for all unsigned integer types.\n- `checked_next_power_of_two` for all unsigned integer types.\n\nCargo\n-----------------------\n\n- [Added the `[build.rustc-workspace-wrapper]` option.][cargo/8976]\n  This option sets a wrapper to execute instead of `rustc`, for workspace members only.\n- [`cargo:rerun-if-changed` will now, if provided a directory, scan the entire\n  contents of that directory for changes.][cargo/8973]\n- [Added the `--workspace` flag to the `cargo update` command.][cargo/8725]\n\nMisc\n----\n\n- [The search results tab and the help button are focusable with keyboard in rustdoc.][79896]\n- [Running tests will now print the total time taken to execute.][75752]\n\nCompatibility Notes\n-------------------\n\n- [The `compare_and_swap` method on atomics has been deprecated.][79261] It's\n  recommended to use the `compare_exchange` and `compare_exchange_weak` methods instead.\n- [Changes in how `TokenStream`s are checked have fixed some cases where you could write\n  unhygenic `macro_rules!` macros.][79472]\n- [`#![test]` as an inner attribute is now considered unstable like other inner macro\n  attributes, and reports an error by default through the `soft_unstable` lint.][79003]\n- [Overriding a `forbid` lint at the same level that it was set is now a hard error.][78864]\n- [You can no longer intercept `panic!` calls by supplying your own macro.][78343] It's\n  recommended to use the `#[panic_handler]` attribute to provide your own implementation.\n- [Semi-colons after item statements (e.g. `struct Foo {};`) now produce a warning.][78296]\n\n[74989]: https://github.com/rust-lang/rust/pull/74989\n[79261]: https://github.com/rust-lang/rust/pull/79261\n[79896]: https://github.com/rust-lang/rust/pull/79896\n[79484]: https://github.com/rust-lang/rust/pull/79484\n[79472]: https://github.com/rust-lang/rust/pull/79472\n[79270]: https://github.com/rust-lang/rust/pull/79270\n[79003]: https://github.com/rust-lang/rust/pull/79003\n[78864]: https://github.com/rust-lang/rust/pull/78864\n[78636]: https://github.com/rust-lang/rust/pull/78636\n[78439]: https://github.com/rust-lang/rust/pull/78439\n[78343]: https://github.com/rust-lang/rust/pull/78343\n[78296]: https://github.com/rust-lang/rust/pull/78296\n[78068]: https://github.com/rust-lang/rust/pull/78068\n[75752]: https://github.com/rust-lang/rust/pull/75752\n[74699]: https://github.com/rust-lang/rust/pull/74699\n[78142]: https://github.com/rust-lang/rust/pull/78142\n[77484]: https://github.com/rust-lang/rust/pull/77484\n[cargo/8976]: https://github.com/rust-lang/cargo/pull/8976\n[cargo/8973]: https://github.com/rust-lang/cargo/pull/8973\n[cargo/8725]: https://github.com/rust-lang/cargo/pull/8725\n[`IpAddr::is_ipv4`]: https://doc.rust-lang.org/stable/std/net/enum.IpAddr.html#method.is_ipv4\n[`IpAddr::is_ipv6`]: https://doc.rust-lang.org/stable/std/net/enum.IpAddr.html#method.is_ipv6\n[`IpAddr::is_unspecified`]: https://doc.rust-lang.org/stable/std/net/enum.IpAddr.html#method.is_unspecified\n[`IpAddr::is_loopback`]: https://doc.rust-lang.org/stable/std/net/enum.IpAddr.html#method.is_loopback\n[`IpAddr::is_multicast`]: https://doc.rust-lang.org/stable/std/net/enum.IpAddr.html#method.is_multicast\n[`Ipv4Addr::octets`]: https://doc.rust-lang.org/stable/std/net/struct.Ipv4Addr.html#method.octets\n[`Ipv4Addr::is_loopback`]: https://doc.rust-lang.org/stable/std/net/struct.Ipv4Addr.html#method.is_loopback\n[`Ipv4Addr::is_private`]: https://doc.rust-lang.org/stable/std/net/struct.Ipv4Addr.html#method.is_private\n[`Ipv4Addr::is_link_local`]: https://doc.rust-lang.org/stable/std/net/struct.Ipv4Addr.html#method.is_link_local\n[`Ipv4Addr::is_multicast`]: https://doc.rust-lang.org/stable/std/net/struct.Ipv4Addr.html#method.is_multicast\n[`Ipv4Addr::is_broadcast`]: https://doc.rust-lang.org/stable/std/net/struct.Ipv4Addr.html#method.is_broadcast\n[`Ipv4Addr::is_documentation`]: https://doc.rust-lang.org/stable/std/net/struct.Ipv4Addr.html#method.is_documentation\n[`Ipv4Addr::to_ipv6_compatible`]: https://doc.rust-lang.org/stable/std/net/struct.Ipv4Addr.html#method.to_ipv6_compatible\n[`Ipv4Addr::to_ipv6_mapped`]: https://doc.rust-lang.org/stable/std/net/struct.Ipv4Addr.html#method.to_ipv6_mapped\n[`Ipv6Addr::segments`]: https://doc.rust-lang.org/stable/std/net/struct.Ipv6Addr.html#method.segments\n[`Ipv6Addr::is_unspecified`]: https://doc.rust-lang.org/stable/std/net/struct.Ipv6Addr.html#method.is_unspecified\n[`Ipv6Addr::is_loopback`]: https://doc.rust-lang.org/stable/std/net/struct.Ipv6Addr.html#method.is_loopback\n[`Ipv6Addr::is_multicast`]: https://doc.rust-lang.org/stable/std/net/struct.Ipv6Addr.html#method.is_multicast\n[`Ipv6Addr::to_ipv4`]: https://doc.rust-lang.org/stable/std/net/struct.Ipv6Addr.html#method.to_ipv4\n[`Layout::align`]: https://doc.rust-lang.org/stable/std/alloc/struct.Layout.html#method.align\n[`Layout::from_size_align`]: https://doc.rust-lang.org/stable/std/alloc/struct.Layout.html#method.from_size_align\n[`Layout::size`]: https://doc.rust-lang.org/stable/std/alloc/struct.Layout.html#method.size\n[`Ord::clamp`]: https://doc.rust-lang.org/stable/std/cmp/trait.Ord.html#method.clamp\n[`RefCell::take`]: https://doc.rust-lang.org/stable/std/cell/struct.RefCell.html#method.take\n[`UnsafeCell::get_mut`]: https://doc.rust-lang.org/stable/std/cell/struct.UnsafeCell.html#method.get_mut\n[`bool::then`]: https://doc.rust-lang.org/stable/std/primitive.bool.html#method.then\n[`btree_map::Entry::or_insert_with_key`]: https://doc.rust-lang.org/stable/std/collections/btree_map/enum.Entry.html#method.or_insert_with_key\n[`f32::clamp`]: https://doc.rust-lang.org/stable/std/primitive.f32.html#method.clamp\n[`f64::clamp`]: https://doc.rust-lang.org/stable/std/primitive.f64.html#method.clamp\n[`hash_map::Entry::or_insert_with_key`]: https://doc.rust-lang.org/stable/std/collections/hash_map/enum.Entry.html#method.or_insert_with_key\n[`slice::fill`]: https://doc.rust-lang.org/stable/std/primitive.slice.html#method.fill\n\n\nVersion 1.49.0 (2020-12-31)\n============================\n\nLanguage\n-----------------------\n\n- [Unions can now implement `Drop`, and you can now have a field in a union\n  with `ManuallyDrop<T>`.][77547]\n- [You can now cast uninhabited enums to integers.][76199]\n- [You can now bind by reference and by move in patterns.][76119] This\n  allows you to selectively borrow individual components of a type. E.g.\n  ```rust\n  #[derive(Debug)]\n  struct Person {\n      name: String,\n      age: u8,\n  }\n\n  let person = Person {\n      name: String::from(\"Alice\"),\n      age: 20,\n  };\n\n  // `name` is moved out of person, but `age` is referenced.\n  let Person { name, ref age } = person;\n  println!(\"{} {}\", name, age);\n  ```\n\nCompiler\n-----------------------\n\n- [Added tier 1\\* support for `aarch64-unknown-linux-gnu`.][78228]\n- [Added tier 2 support for `aarch64-apple-darwin`.][75991]\n- [Added tier 2 support for `aarch64-pc-windows-msvc`.][75914]\n- [Added tier 3 support for `mipsel-unknown-none`.][78676]\n- [Raised the minimum supported LLVM version to LLVM 9.][78848]\n- [Output from threads spawned in tests is now captured.][78227]\n- [Change os and vendor values to \"none\" and \"unknown\" for some targets][78951]\n\n\\* Refer to Rust's [platform support page][platform-support-doc] for more\ninformation on Rust's tiered platform support.\n\nLibraries\n-----------------------\n\n- [`RangeInclusive` now checks for exhaustion when calling `contains` and indexing.][78109]\n- [`ToString::to_string` now no longer shrinks the internal buffer in the default implementation.][77997]\n\nStabilized APIs\n---------------\n\n- [`slice::select_nth_unstable`]\n- [`slice::select_nth_unstable_by`]\n- [`slice::select_nth_unstable_by_key`]\n\nThe following previously stable methods are now `const`.\n\n- [`Poll::is_ready`]\n- [`Poll::is_pending`]\n\nCargo\n-----------------------\n- [Building a crate with `cargo-package` should now be independently reproducible.][cargo/8864]\n- [`cargo-tree` now marks proc-macro crates.][cargo/8765]\n- [Added `CARGO_PRIMARY_PACKAGE` build-time environment variable.][cargo/8758] This\n  variable will be set if the crate being built is one the user selected to build, either\n  with `-p` or through defaults.\n- [You can now use glob patterns when specifying packages & targets.][cargo/8752]\n\n\nCompatibility Notes\n-------------------\n\n- [Demoted `i686-unknown-freebsd` from host tier 2 to target tier 2 support.][78746]\n- [Macros that end with a semi-colon are now treated as statements even if they expand to nothing.][78376]\n- [Rustc will now check for the validity of some built-in attributes on enum variants.][77015]\n  Previously such invalid or unused attributes could be ignored.\n- Leading whitespace is stripped more uniformly in documentation comments, which may change behavior. You\n  read [this post about the changes][rustdoc-ws-post] for more details.\n- [Trait bounds are no longer inferred for associated types.][79904]\n\nInternal Only\n-------------\nThese changes provide no direct user facing benefits, but represent significant\nimprovements to the internals and overall performance of rustc and\nrelated tools.\n\n- [rustc's internal crates are now compiled using the `initial-exec` Thread\n  Local Storage model.][78201]\n- [Calculate visibilities once in resolve.][78077]\n- [Added `system` to the `llvm-libunwind` bootstrap config option.][77703]\n- [Added `--color` for configuring terminal color support to bootstrap.][79004]\n\n\n[75991]: https://github.com/rust-lang/rust/pull/75991\n[78951]: https://github.com/rust-lang/rust/pull/78951\n[78848]: https://github.com/rust-lang/rust/pull/78848\n[78746]: https://github.com/rust-lang/rust/pull/78746\n[78376]: https://github.com/rust-lang/rust/pull/78376\n[78228]: https://github.com/rust-lang/rust/pull/78228\n[78227]: https://github.com/rust-lang/rust/pull/78227\n[78201]: https://github.com/rust-lang/rust/pull/78201\n[78109]: https://github.com/rust-lang/rust/pull/78109\n[78077]: https://github.com/rust-lang/rust/pull/78077\n[77997]: https://github.com/rust-lang/rust/pull/77997\n[77703]: https://github.com/rust-lang/rust/pull/77703\n[77547]: https://github.com/rust-lang/rust/pull/77547\n[77015]: https://github.com/rust-lang/rust/pull/77015\n[76199]: https://github.com/rust-lang/rust/pull/76199\n[76119]: https://github.com/rust-lang/rust/pull/76119\n[75914]: https://github.com/rust-lang/rust/pull/75914\n[79004]: https://github.com/rust-lang/rust/pull/79004\n[78676]: https://github.com/rust-lang/rust/pull/78676\n[79904]: https://github.com/rust-lang/rust/issues/79904\n[cargo/8864]: https://github.com/rust-lang/cargo/pull/8864\n[cargo/8765]: https://github.com/rust-lang/cargo/pull/8765\n[cargo/8758]: https://github.com/rust-lang/cargo/pull/8758\n[cargo/8752]: https://github.com/rust-lang/cargo/pull/8752\n[`slice::select_nth_unstable`]: https://doc.rust-lang.org/nightly/std/primitive.slice.html#method.select_nth_unstable\n[`slice::select_nth_unstable_by`]: https://doc.rust-lang.org/nightly/std/primitive.slice.html#method.select_nth_unstable_by\n[`slice::select_nth_unstable_by_key`]: https://doc.rust-lang.org/nightly/std/primitive.slice.html#method.select_nth_unstable_by_key\n[`Poll::is_ready`]: https://doc.rust-lang.org/stable/std/task/enum.Poll.html#method.is_ready\n[`Poll::is_pending`]: https://doc.rust-lang.org/stable/std/task/enum.Poll.html#method.is_pending\n[rustdoc-ws-post]: https://blog.guillaume-gomez.fr/articles/2020-11-11+New+doc+comment+handling+in+rustdoc\n\nVersion 1.48.0 (2020-11-19)\n==========================\n\nLanguage\n--------\n\n- [The `unsafe` keyword is now syntactically permitted on modules.][75857] This\n  is still rejected *semantically*, but can now be parsed by procedural macros.\n\nCompiler\n--------\n- [Stabilised the `-C link-self-contained=<yes|no>` compiler flag.][76158] This tells\n  `rustc` whether to link its own C runtime and libraries or to rely on a external\n  linker to find them. (Supported only on `windows-gnu`, `linux-musl`, and `wasi` platforms.)\n- [You can now use `-C target-feature=+crt-static` on `linux-gnu` targets.][77386]\n  Note: If you're using cargo you must explicitly pass the `--target` flag.\n- [Added tier 2\\* support for `aarch64-unknown-linux-musl`.][76420]\n\n\\* Refer to Rust's [platform support page][platform-support-doc] for more\ninformation on Rust's tiered platform support.\n\nLibraries\n---------\n- [`io::Write` is now implemented for `&ChildStdin` `&Sink`, `&Stdout`,\n  and `&Stderr`.][76275]\n- [All arrays of any length now implement `TryFrom<Vec<T>>`.][76310]\n- [The `matches!` macro now supports having a trailing comma.][74880]\n- [`Vec<A>` now implements `PartialEq<[B]>` where `A: PartialEq<B>`.][74194]\n- [The `RefCell::{replace, replace_with, clone}` methods now all use `#[track_caller]`.][77055]\n\nStabilized APIs\n---------------\n- [`slice::as_ptr_range`]\n- [`slice::as_mut_ptr_range`]\n- [`VecDeque::make_contiguous`]\n- [`future::pending`]\n- [`future::ready`]\n\nThe following previously stable methods are now `const fn`'s:\n\n- [`Option::is_some`]\n- [`Option::is_none`]\n- [`Option::as_ref`]\n- [`Result::is_ok`]\n- [`Result::is_err`]\n- [`Result::as_ref`]\n- [`Ordering::reverse`]\n- [`Ordering::then`]\n\nCargo\n-----\n\nRustdoc\n-------\n- [You can now link to items in `rustdoc` using the intra-doc link\n  syntax.][74430] E.g. ``/// Uses [`std::future`]`` will automatically generate\n  a link to `std::future`'s documentation. See [\"Linking to items by\n  name\"][intradoc-links] for more information.\n- [You can now specify `#[doc(alias = \"<alias>\")]` on items to add search aliases\n  when searching through `rustdoc`'s UI.][75740]\n\nCompatibility Notes\n-------------------\n- [Promotion of references to `'static` lifetime inside `const fn` now follows the\n  same rules as inside a `fn` body.][75502] In particular, `&foo()` will not be\n  promoted to `'static` lifetime any more inside `const fn`s.\n- [Associated type bindings on trait objects are now verified to meet the bounds\n  declared on the trait when checking that they implement the trait.][27675]\n- [When trait bounds on associated types or opaque types are ambiguous, the\n  compiler no longer makes an arbitrary choice on which bound to use.][54121]\n- [Fixed recursive nonterminals not being expanded in macros during\n  pretty-print/reparse check.][77153] This may cause errors if your macro wasn't\n  correctly handling recursive nonterminal tokens.\n- [`&mut` references to non zero-sized types are no longer promoted.][75585]\n- [`rustc` will now warn if you use attributes like `#[link_name]` or `#[cold]`\n  in places where they have no effect.][73461]\n- [Updated `_mm256_extract_epi8` and `_mm256_extract_epi16` signatures in\n  `arch::{x86, x86_64}` to return `i32` to match the vendor signatures.][73166]\n- [`mem::uninitialized` will now panic if any inner types inside a struct or enum\n  disallow zero-initialization.][71274]\n- [`#[target_feature]` will now error if used in a place where it has no effect.][78143]\n- [Foreign exceptions are now caught by `catch_unwind` and will cause an abort.][70212]\n  Note: This behaviour is not guaranteed and is still considered undefined behaviour,\n  see the [`catch_unwind`] documentation for further information.\n\n\n\nInternal Only\n-------------\nThese changes provide no direct user facing benefits, but represent significant\nimprovements to the internals and overall performance of rustc and\nrelated tools.\n\n- [Building `rustc` from source now uses `ninja` by default over `make`.][74922]\n  You can continue building with `make` by setting `ninja=false` in\n  your `config.toml`.\n- [cg_llvm: `fewer_names` in `uncached_llvm_type`][76030]\n- [Made `ensure_sufficient_stack()` non-generic][76680]\n\n[78143]: https://github.com/rust-lang/rust/issues/78143\n[76680]: https://github.com/rust-lang/rust/pull/76680/\n[76030]: https://github.com/rust-lang/rust/pull/76030/\n[70212]: https://github.com/rust-lang/rust/pull/70212/\n[27675]: https://github.com/rust-lang/rust/issues/27675/\n[54121]: https://github.com/rust-lang/rust/issues/54121/\n[71274]: https://github.com/rust-lang/rust/pull/71274/\n[77386]: https://github.com/rust-lang/rust/pull/77386/\n[77153]: https://github.com/rust-lang/rust/pull/77153/\n[77055]: https://github.com/rust-lang/rust/pull/77055/\n[76275]: https://github.com/rust-lang/rust/pull/76275/\n[76310]: https://github.com/rust-lang/rust/pull/76310/\n[76420]: https://github.com/rust-lang/rust/pull/76420/\n[76158]: https://github.com/rust-lang/rust/pull/76158/\n[75857]: https://github.com/rust-lang/rust/pull/75857/\n[75585]: https://github.com/rust-lang/rust/pull/75585/\n[75740]: https://github.com/rust-lang/rust/pull/75740/\n[75502]: https://github.com/rust-lang/rust/pull/75502/\n[74880]: https://github.com/rust-lang/rust/pull/74880/\n[74922]: https://github.com/rust-lang/rust/pull/74922/\n[74430]: https://github.com/rust-lang/rust/pull/74430/\n[74194]: https://github.com/rust-lang/rust/pull/74194/\n[73461]: https://github.com/rust-lang/rust/pull/73461/\n[73166]: https://github.com/rust-lang/rust/pull/73166/\n[intradoc-links]: https://doc.rust-lang.org/rustdoc/linking-to-items-by-name.html\n[`catch_unwind`]: https://doc.rust-lang.org/std/panic/fn.catch_unwind.html\n[`Option::is_some`]: https://doc.rust-lang.org/std/option/enum.Option.html#method.is_some\n[`Option::is_none`]: https://doc.rust-lang.org/std/option/enum.Option.html#method.is_none\n[`Option::as_ref`]: https://doc.rust-lang.org/std/option/enum.Option.html#method.as_ref\n[`Result::is_ok`]: https://doc.rust-lang.org/std/result/enum.Result.html#method.is_ok\n[`Result::is_err`]: https://doc.rust-lang.org/std/result/enum.Result.html#method.is_err\n[`Result::as_ref`]: https://doc.rust-lang.org/std/result/enum.Result.html#method.as_ref\n[`Ordering::reverse`]: https://doc.rust-lang.org/std/cmp/enum.Ordering.html#method.reverse\n[`Ordering::then`]: https://doc.rust-lang.org/std/cmp/enum.Ordering.html#method.then\n[`slice::as_ptr_range`]: https://doc.rust-lang.org/std/primitive.slice.html#method.as_ptr_range\n[`slice::as_mut_ptr_range`]: https://doc.rust-lang.org/std/primitive.slice.html#method.as_mut_ptr_range\n[`VecDeque::make_contiguous`]: https://doc.rust-lang.org/std/collections/struct.VecDeque.html#method.make_contiguous\n[`future::pending`]: https://doc.rust-lang.org/std/future/fn.pending.html\n[`future::ready`]: https://doc.rust-lang.org/std/future/fn.ready.html\n\n\nVersion 1.47.0 (2020-10-08)\n==========================\n\nLanguage\n--------\n- [Closures will now warn when not used.][74869]\n\nCompiler\n--------\n- [Stabilized the `-C control-flow-guard` codegen option][73893], which enables\n  [Control Flow Guard][1.47.0-cfg] for Windows platforms, and is ignored on other\n  platforms.\n- [Upgraded to LLVM 11.][73526]\n- [Added tier 3\\* support for the `thumbv4t-none-eabi` target.][74419]\n- [Upgrade the FreeBSD toolchain to version 11.4][75204]\n- [`RUST_BACKTRACE`'s output is now more compact.][75048]\n\n\\* Refer to Rust's [platform support page][platform-support-doc] for more\ninformation on Rust's tiered platform support.\n\nLibraries\n---------\n- [`CStr` now implements `Index<RangeFrom<usize>>`.][74021]\n- [Traits in `std`/`core` are now implemented for arrays of any length, not just\n  those of length less than 33.][74060]\n- [`ops::RangeFull` and `ops::Range` now implement Default.][73197]\n- [`panic::Location` now implements `Copy`, `Clone`, `Eq`, `Hash`, `Ord`,\n  `PartialEq`, and `PartialOrd`.][73583]\n\nStabilized APIs\n---------------\n- [`Ident::new_raw`]\n- [`Range::is_empty`]\n- [`RangeInclusive::is_empty`]\n- [`Result::as_deref`]\n- [`Result::as_deref_mut`]\n- [`Vec::leak`]\n- [`pointer::offset_from`]\n- [`f32::TAU`]\n- [`f64::TAU`]\n\nThe following previously stable APIs have now been made const.\n\n- [The `new` method for all `NonZero` integers.][73858]\n- [The `checked_add`,`checked_sub`,`checked_mul`,`checked_neg`, `checked_shl`,\n  `checked_shr`, `saturating_add`, `saturating_sub`, and `saturating_mul`\n  methods for all integers.][73858]\n- [The `checked_abs`, `saturating_abs`, `saturating_neg`, and `signum`  for all\n  signed integers.][73858]\n- [The `is_ascii_alphabetic`, `is_ascii_uppercase`, `is_ascii_lowercase`,\n  `is_ascii_alphanumeric`, `is_ascii_digit`, `is_ascii_hexdigit`,\n  `is_ascii_punctuation`, `is_ascii_graphic`, `is_ascii_whitespace`, and\n  `is_ascii_control` methods for `char` and `u8`.][73858]\n\nCargo\n-----\n- [`build-dependencies` are now built with opt-level 0 by default.][cargo/8500]\n  You can override this by setting the following in your `Cargo.toml`.\n  ```toml\n  [profile.release.build-override]\n  opt-level = 3\n  ```\n- [`cargo-help` will now display man pages for commands rather just the\n  `--help` text.][cargo/8456]\n- [`cargo-metadata` now emits a `test` field indicating if a target has\n  tests enabled.][cargo/8478]\n- [`workspace.default-members` now respects `workspace.exclude`.][cargo/8485]\n- [`cargo-publish` will now use an alternative registry by default if it's the\n  only registry specified in `package.publish`.][cargo/8571]\n\nMisc\n----\n- [Added a help button beside Rustdoc's searchbar that explains rustdoc's\n  type based search.][75366]\n- [Added the Ayu theme to rustdoc.][71237]\n\nCompatibility Notes\n-------------------\n- [Bumped the minimum supported Emscripten version to 1.39.20.][75716]\n- [Fixed a regression parsing `{} && false` in tail expressions.][74650]\n- [Added changes to how proc-macros are expanded in `macro_rules!` that should\n  help to preserve more span information.][73084] These changes may cause\n  compilation errors if your macro was unhygenic or didn't correctly handle\n  `Delimiter::None`.\n- [Moved support for the CloudABI target to tier 3.][75568]\n- [`linux-gnu` targets now require minimum kernel 2.6.32 and glibc 2.11.][74163]\n- [Added the `rustc-docs` component.][75560] This allows you to install\n  and read the documentation for the compiler internal APIs. (Currently only\n  available for `x86_64-unknown-linux-gnu`.)\n\nInternal Only\n--------\n\n- [Improved default settings for bootstrapping in `x.py`.][73964] You can read details about this change in the [\"Changes to `x.py` defaults\"](https://blog.rust-lang.org/inside-rust/2020/08/30/changes-to-x-py-defaults.html) post on the Inside Rust blog.\n\n[1.47.0-cfg]: https://docs.microsoft.com/en-us/windows/win32/secbp/control-flow-guard\n[75048]: https://github.com/rust-lang/rust/pull/75048/\n[74163]: https://github.com/rust-lang/rust/pull/74163/\n[71237]: https://github.com/rust-lang/rust/pull/71237/\n[74869]: https://github.com/rust-lang/rust/pull/74869/\n[73858]: https://github.com/rust-lang/rust/pull/73858/\n[75716]: https://github.com/rust-lang/rust/pull/75716/\n[75560]: https://github.com/rust-lang/rust/pull/75560/\n[75568]: https://github.com/rust-lang/rust/pull/75568/\n[75366]: https://github.com/rust-lang/rust/pull/75366/\n[75204]: https://github.com/rust-lang/rust/pull/75204/\n[74650]: https://github.com/rust-lang/rust/pull/74650/\n[74419]: https://github.com/rust-lang/rust/pull/74419/\n[73964]: https://github.com/rust-lang/rust/pull/73964/\n[74021]: https://github.com/rust-lang/rust/pull/74021/\n[74060]: https://github.com/rust-lang/rust/pull/74060/\n[73893]: https://github.com/rust-lang/rust/pull/73893/\n[73526]: https://github.com/rust-lang/rust/pull/73526/\n[73583]: https://github.com/rust-lang/rust/pull/73583/\n[73084]: https://github.com/rust-lang/rust/pull/73084/\n[73197]: https://github.com/rust-lang/rust/pull/73197/\n[cargo/8456]: https://github.com/rust-lang/cargo/pull/8456/\n[cargo/8478]: https://github.com/rust-lang/cargo/pull/8478/\n[cargo/8485]: https://github.com/rust-lang/cargo/pull/8485/\n[cargo/8500]: https://github.com/rust-lang/cargo/pull/8500/\n[cargo/8571]: https://github.com/rust-lang/cargo/pull/8571/\n[`Ident::new_raw`]:  https://doc.rust-lang.org/nightly/proc_macro/struct.Ident.html#method.new_raw\n[`Range::is_empty`]: https://doc.rust-lang.org/nightly/std/ops/struct.Range.html#method.is_empty\n[`RangeInclusive::is_empty`]: https://doc.rust-lang.org/nightly/std/ops/struct.RangeInclusive.html#method.is_empty\n[`Result::as_deref_mut`]: https://doc.rust-lang.org/nightly/std/result/enum.Result.html#method.as_deref_mut\n[`Result::as_deref`]: https://doc.rust-lang.org/nightly/std/result/enum.Result.html#method.as_deref\n[`Vec::leak`]: https://doc.rust-lang.org/nightly/std/vec/struct.Vec.html#method.leak\n[`f32::TAU`]: https://doc.rust-lang.org/nightly/std/f32/consts/constant.TAU.html\n[`f64::TAU`]: https://doc.rust-lang.org/nightly/std/f64/consts/constant.TAU.html\n[`pointer::offset_from`]: https://doc.rust-lang.org/nightly/std/primitive.pointer.html#method.offset_from\n\n\nVersion 1.46.0 (2020-08-27)\n==========================\n\nLanguage\n--------\n- [`if`, `match`, and `loop` expressions can now be used in const functions.][72437]\n- [Additionally you are now also able to coerce and cast to slices (`&[T]`) in\n  const functions.][73862]\n- [The `#[track_caller]` attribute can now be added to functions to use the\n  function's caller's location information for panic messages.][72445]\n- [Recursively indexing into tuples no longer needs parentheses.][71322] E.g.\n  `x.0.0` over `(x.0).0`.\n- [`mem::transmute` can now be used in statics and constants.][72920] **Note**\n  You currently can't use `mem::transmute` in constant functions.\n\nCompiler\n--------\n- [You can now use the `cdylib` target on Apple iOS and tvOS platforms.][73516]\n- [Enabled static \"Position Independent Executables\" by default\n  for `x86_64-unknown-linux-musl`.][70740]\n\nLibraries\n---------\n- [`mem::forget` is now a `const fn`.][73887]\n- [`String` now implements `From<char>`.][73466]\n- [The `leading_ones`, and `trailing_ones` methods have been stabilised for all\n  integer types.][73032]\n- [`vec::IntoIter<T>` now implements `AsRef<[T]>`.][72583]\n- [All non-zero integer types (`NonZeroU8`) now implement `TryFrom` for their\n  zero-able equivalent (e.g. `TryFrom<u8>`).][72717]\n- [`&[T]` and `&mut [T]` now implement `PartialEq<Vec<T>>`.][71660]\n- [`(String, u16)` now implements `ToSocketAddrs`.][73007]\n- [`vec::Drain<'_, T>` now implements `AsRef<[T]>`.][72584]\n\nStabilized APIs\n---------------\n- [`Option::zip`]\n- [`vec::Drain::as_slice`]\n\nCargo\n-----\nAdded a number of new environment variables that are now available when\ncompiling your crate.\n\n- [`CARGO_BIN_NAME` and `CARGO_CRATE_NAME`][cargo/8270] Providing the name of\n  the specific binary being compiled and the name of the crate.\n- [`CARGO_PKG_LICENSE`][cargo/8325] The license from the manifest of the package.\n- [`CARGO_PKG_LICENSE_FILE`][cargo/8387] The path to the license file.\n\nCompatibility Notes\n-------------------\n- [The target configuration option `abi_blacklist` has been renamed\n  to `unsupported_abis`.][74150] The old name will still continue to work.\n- [Rustc will now warn if you cast a C-like enum that implements `Drop`.][72331]\n  This was previously accepted but will become a hard error in a future release.\n- [Rustc will fail to compile if you have a struct with\n  `#[repr(i128)]` or `#[repr(u128)]`.][74109] This representation is currently only\n  allowed on `enum`s.\n- [Tokens passed to `macro_rules!` are now always captured.][73293] This helps\n  ensure that spans have the correct information, and may cause breakage if you\n  were relying on receiving spans with dummy information.\n- [The InnoSetup installer for Windows is no longer available.][72569] This was\n  a legacy installer that was replaced by a MSI installer a few years ago but\n  was still being built.\n- [`{f32, f64}::asinh` now returns the correct values for negative numbers.][72486]\n- [Rustc will no longer accept overlapping trait implementations that only\n  differ in how the lifetime was bound.][72493]\n- [Rustc now correctly relates the lifetime of an existential associated\n  type.][71896] This fixes some edge cases where `rustc` would erroneously allow\n  you to pass a shorter lifetime than expected.\n- [Rustc now dynamically links to `libz` (also called `zlib`) on Linux.][74420]\n  The library will need to be installed for `rustc` to work, even though we\n  expect it to be already available on most systems.\n- [Tests annotated with `#[should_panic]` are broken on ARMv7 while running\n  under QEMU.][74820]\n- [Pretty printing of some tokens in procedural macros changed.][75453] The\n  exact output returned by rustc's pretty printing is an unstable\n  implementation detail: we recommend any macro relying on it to switch to a\n  more robust parsing system.\n\n[75453]: https://github.com/rust-lang/rust/issues/75453/\n[74820]: https://github.com/rust-lang/rust/issues/74820/\n[74420]: https://github.com/rust-lang/rust/issues/74420/\n[74109]: https://github.com/rust-lang/rust/pull/74109/\n[74150]: https://github.com/rust-lang/rust/pull/74150/\n[73862]: https://github.com/rust-lang/rust/pull/73862/\n[73887]: https://github.com/rust-lang/rust/pull/73887/\n[73466]: https://github.com/rust-lang/rust/pull/73466/\n[73516]: https://github.com/rust-lang/rust/pull/73516/\n[73293]: https://github.com/rust-lang/rust/pull/73293/\n[73007]: https://github.com/rust-lang/rust/pull/73007/\n[73032]: https://github.com/rust-lang/rust/pull/73032/\n[72920]: https://github.com/rust-lang/rust/pull/72920/\n[72569]: https://github.com/rust-lang/rust/pull/72569/\n[72583]: https://github.com/rust-lang/rust/pull/72583/\n[72584]: https://github.com/rust-lang/rust/pull/72584/\n[72717]: https://github.com/rust-lang/rust/pull/72717/\n[72437]: https://github.com/rust-lang/rust/pull/72437/\n[72445]: https://github.com/rust-lang/rust/pull/72445/\n[72486]: https://github.com/rust-lang/rust/pull/72486/\n[72493]: https://github.com/rust-lang/rust/pull/72493/\n[72331]: https://github.com/rust-lang/rust/pull/72331/\n[71896]: https://github.com/rust-lang/rust/pull/71896/\n[71660]: https://github.com/rust-lang/rust/pull/71660/\n[71322]: https://github.com/rust-lang/rust/pull/71322/\n[70740]: https://github.com/rust-lang/rust/pull/70740/\n[cargo/8270]: https://github.com/rust-lang/cargo/pull/8270/\n[cargo/8325]: https://github.com/rust-lang/cargo/pull/8325/\n[cargo/8387]: https://github.com/rust-lang/cargo/pull/8387/\n[`Option::zip`]: https://doc.rust-lang.org/stable/std/option/enum.Option.html#method.zip\n[`vec::Drain::as_slice`]: https://doc.rust-lang.org/stable/std/vec/struct.Drain.html#method.as_slice\n\n\nVersion 1.45.2 (2020-08-03)\n==========================\n\n* [Fix bindings in tuple struct patterns][74954]\n* [Fix track_caller integration with trait objects][74784]\n\n[74954]: https://github.com/rust-lang/rust/issues/74954\n[74784]: https://github.com/rust-lang/rust/issues/74784\n\n\nVersion 1.45.1 (2020-07-30)\n==========================\n\n* [Fix const propagation with references.][73613]\n* [rustfmt accepts rustfmt_skip in cfg_attr again.][73078]\n* [Avoid spurious implicit region bound.][74509]\n* [Install clippy on x.py install][74457]\n\n[73613]: https://github.com/rust-lang/rust/pull/73613\n[73078]: https://github.com/rust-lang/rust/issues/73078\n[74509]: https://github.com/rust-lang/rust/pull/74509\n[74457]: https://github.com/rust-lang/rust/pull/74457\n\n\nVersion 1.45.0 (2020-07-16)\n==========================\n\nLanguage\n--------\n- [Out of range float to int conversions using `as` has been defined as a saturating\n  conversion.][71269] This was previously undefined behaviour, but you can use the\n   `{f64, f32}::to_int_unchecked` methods to continue using the current behaviour, which\n   may be desirable in rare performance sensitive situations.\n- [`mem::Discriminant<T>` now uses `T`'s discriminant type instead of always\n  using `u64`.][70705]\n- [Function like procedural macros can now be used in expression, pattern, and  statement\n  positions.][68717] This means you can now use a function-like procedural macro\n  anywhere you can use a declarative (`macro_rules!`) macro.\n\nCompiler\n--------\n- [You can now override individual target features through the `target-feature`\n  flag.][72094] E.g. `-C target-feature=+avx2 -C target-feature=+fma` is now\n  equivalent to `-C target-feature=+avx2,+fma`.\n- [Added the `force-unwind-tables` flag.][69984] This option allows\n  rustc to always generate unwind tables regardless of panic strategy.\n- [Added the `embed-bitcode` flag.][71716] This codegen flag allows rustc\n  to include LLVM bitcode into generated `rlib`s (this is on by default).\n- [Added the `tiny` value to the `code-model` codegen flag.][72397]\n- [Added tier 3 support\\* for the `mipsel-sony-psp` target.][72062]\n- [Added tier 3 support for the `thumbv7a-uwp-windows-msvc` target.][72133]\n- [Upgraded to LLVM 10.][67759]\n\n\\* Refer to Rust's [platform support page][platform-support-doc] for more\ninformation on Rust's tiered platform support.\n\n\nLibraries\n---------\n- [`net::{SocketAddr, SocketAddrV4, SocketAddrV6}` now implements `PartialOrd`\n  and `Ord`.][72239]\n- [`proc_macro::TokenStream` now implements `Default`.][72234]\n- [You can now use `char` with\n  `ops::{Range, RangeFrom, RangeFull, RangeInclusive, RangeTo}` to iterate over\n  a range of codepoints.][72413] E.g.\n  you can now write the following;\n  ```rust\n  for ch in 'a'..='z' {\n      print!(\"{}\", ch);\n  }\n  println!();\n  // Prints \"abcdefghijklmnopqrstuvwxyz\"\n  ```\n- [`OsString` now implements `FromStr`.][71662]\n- [The `saturating_neg` method has been added to all signed integer primitive\n  types, and the `saturating_abs` method has been added for all integer\n  primitive types.][71886]\n- [`Arc<T>`, `Rc<T>` now implement  `From<Cow<'_, T>>`, and `Box` now\n  implements `From<Cow>` when `T` is `[T: Copy]`, `str`, `CStr`, `OsStr`,\n  or `Path`.][71447]\n- [`Box<[T]>` now implements `From<[T; N]>`.][71095]\n- [`BitOr` and `BitOrAssign` are implemented for all `NonZero`\n  integer types.][69813]\n- [The `fetch_min`, and `fetch_max` methods have been added to all atomic\n  integer types.][72324]\n- [The `fetch_update` method has been added to all atomic integer types.][71843]\n\nStabilized APIs\n---------------\n- [`Arc::as_ptr`]\n- [`BTreeMap::remove_entry`]\n- [`Rc::as_ptr`]\n- [`rc::Weak::as_ptr`]\n- [`rc::Weak::from_raw`]\n- [`rc::Weak::into_raw`]\n- [`str::strip_prefix`]\n- [`str::strip_suffix`]\n- [`sync::Weak::as_ptr`]\n- [`sync::Weak::from_raw`]\n- [`sync::Weak::into_raw`]\n- [`char::UNICODE_VERSION`]\n- [`Span::resolved_at`]\n- [`Span::located_at`]\n- [`Span::mixed_site`]\n- [`unix::process::CommandExt::arg0`]\n\nCargo\n-----\n\n- [Cargo uses the `embed-bitcode` flag to optimize disk usage and build\n  time.][cargo/8066]\n\nMisc\n----\n- [Rustdoc now supports strikethrough text in Markdown.][71928] E.g.\n  `~~outdated information~~` becomes \"~~outdated information~~\".\n- [Added an emoji to Rustdoc's deprecated API message.][72014]\n\nCompatibility Notes\n-------------------\n- [Trying to self initialize a static value (that is creating a value using\n  itself) is unsound and now causes a compile error.][71140]\n- [`{f32, f64}::powi` now returns a slightly different value on Windows.][73420]\n  This is due to changes in LLVM's intrinsics which `{f32, f64}::powi` uses.\n- [Rustdoc's CLI's extra error exit codes have been removed.][71900] These were\n  previously undocumented and not intended for public use. Rustdoc still provides\n  a non-zero exit code on errors.\n- [Rustc's `lto` flag is incompatible with the new `embed-bitcode=no`.][71848]\n  This may cause issues if LTO is enabled through `RUSTFLAGS` or `cargo rustc`\n  flags while cargo is adding `embed-bitcode` itself. The recommended way to\n  control LTO is with Cargo profiles, either in `Cargo.toml` or `.cargo/config`,\n  or by setting `CARGO_PROFILE_<name>_LTO` in the environment.\n\nInternals Only\n--------------\n- [Make clippy a git subtree instead of a git submodule][70655]\n- [Unify the undo log of all snapshot types][69464]\n\n[71848]: https://github.com/rust-lang/rust/issues/71848/\n[73420]: https://github.com/rust-lang/rust/issues/73420/\n[72324]: https://github.com/rust-lang/rust/pull/72324/\n[71843]: https://github.com/rust-lang/rust/pull/71843/\n[71886]: https://github.com/rust-lang/rust/pull/71886/\n[72234]: https://github.com/rust-lang/rust/pull/72234/\n[72239]: https://github.com/rust-lang/rust/pull/72239/\n[72397]: https://github.com/rust-lang/rust/pull/72397/\n[72413]: https://github.com/rust-lang/rust/pull/72413/\n[72014]: https://github.com/rust-lang/rust/pull/72014/\n[72062]: https://github.com/rust-lang/rust/pull/72062/\n[72094]: https://github.com/rust-lang/rust/pull/72094/\n[72133]: https://github.com/rust-lang/rust/pull/72133/\n[67759]: https://github.com/rust-lang/rust/pull/67759/\n[71900]: https://github.com/rust-lang/rust/pull/71900/\n[71928]: https://github.com/rust-lang/rust/pull/71928/\n[71662]: https://github.com/rust-lang/rust/pull/71662/\n[71716]: https://github.com/rust-lang/rust/pull/71716/\n[71447]: https://github.com/rust-lang/rust/pull/71447/\n[71269]: https://github.com/rust-lang/rust/pull/71269/\n[71095]: https://github.com/rust-lang/rust/pull/71095/\n[71140]: https://github.com/rust-lang/rust/pull/71140/\n[70655]: https://github.com/rust-lang/rust/pull/70655/\n[70705]: https://github.com/rust-lang/rust/pull/70705/\n[69984]: https://github.com/rust-lang/rust/pull/69984/\n[69813]: https://github.com/rust-lang/rust/pull/69813/\n[69464]: https://github.com/rust-lang/rust/pull/69464/\n[68717]: https://github.com/rust-lang/rust/pull/68717/\n[cargo/8066]: https://github.com/rust-lang/cargo/pull/8066\n[`Arc::as_ptr`]: https://doc.rust-lang.org/stable/std/sync/struct.Arc.html#method.as_ptr\n[`BTreeMap::remove_entry`]: https://doc.rust-lang.org/stable/std/collections/struct.BTreeMap.html#method.remove_entry\n[`Rc::as_ptr`]: https://doc.rust-lang.org/stable/std/rc/struct.Rc.html#method.as_ptr\n[`rc::Weak::as_ptr`]: https://doc.rust-lang.org/stable/std/rc/struct.Weak.html#method.as_ptr\n[`rc::Weak::from_raw`]: https://doc.rust-lang.org/stable/std/rc/struct.Weak.html#method.from_raw\n[`rc::Weak::into_raw`]: https://doc.rust-lang.org/stable/std/rc/struct.Weak.html#method.into_raw\n[`sync::Weak::as_ptr`]: https://doc.rust-lang.org/stable/std/sync/struct.Weak.html#method.as_ptr\n[`sync::Weak::from_raw`]: https://doc.rust-lang.org/stable/std/sync/struct.Weak.html#method.from_raw\n[`sync::Weak::into_raw`]: https://doc.rust-lang.org/stable/std/sync/struct.Weak.html#method.into_raw\n[`str::strip_prefix`]: https://doc.rust-lang.org/stable/std/primitive.str.html#method.strip_prefix\n[`str::strip_suffix`]: https://doc.rust-lang.org/stable/std/primitive.str.html#method.strip_suffix\n[`char::UNICODE_VERSION`]: https://doc.rust-lang.org/stable/std/char/constant.UNICODE_VERSION.html\n[`Span::resolved_at`]: https://doc.rust-lang.org/stable/proc_macro/struct.Span.html#method.resolved_at\n[`Span::located_at`]: https://doc.rust-lang.org/stable/proc_macro/struct.Span.html#method.located_at\n[`Span::mixed_site`]: https://doc.rust-lang.org/stable/proc_macro/struct.Span.html#method.mixed_site\n[`unix::process::CommandExt::arg0`]: https://doc.rust-lang.org/std/os/unix/process/trait.CommandExt.html#tymethod.arg0\n\n\nVersion 1.44.1 (2020-06-18)\n===========================\n\n* [rustfmt accepts rustfmt_skip in cfg_attr again.][73078]\n* [Don't hash executable filenames on apple platforms, fixing backtraces.][cargo/8329]\n* [Fix crashes when finding backtrace on macOS.][71397]\n* [Clippy applies lint levels into different files.][clippy/5356]\n\n[71397]: https://github.com/rust-lang/rust/issues/71397\n[73078]: https://github.com/rust-lang/rust/issues/73078\n[cargo/8329]: https://github.com/rust-lang/cargo/pull/8329\n[clippy/5356]: https://github.com/rust-lang/rust-clippy/issues/5356\n\n\nVersion 1.44.0 (2020-06-04)\n==========================\n\nLanguage\n--------\n- [You can now use `async/.await` with `#[no_std]` enabled.][69033]\n- [Added the `unused_braces` lint.][70081]\n\n**Syntax-only changes**\n\n- [Expansion-driven outline module parsing][69838]\n```rust\n#[cfg(FALSE)]\nmod foo {\n    mod bar {\n        mod baz; // `foo/bar/baz.rs` doesn't exist, but no error!\n    }\n}\n```\n\nThese are still rejected semantically, so you will likely receive an error but\nthese changes can be seen and parsed by macros and conditional compilation.\n\nCompiler\n--------\n- [Rustc now respects the `-C codegen-units` flag in incremental mode.][70156]\n  Additionally when in incremental mode rustc defaults to 256 codegen units.\n- [Refactored `catch_unwind` to have zero-cost, unless unwinding is enabled and\n  a panic is thrown.][67502]\n- [Added tier 3\\* support for the `aarch64-unknown-none` and\n  `aarch64-unknown-none-softfloat` targets.][68334]\n- [Added tier 3 support for `arm64-apple-tvos` and\n  `x86_64-apple-tvos` targets.][68191]\n\n\nLibraries\n---------\n- [Special cased `vec![]` to map directly to `Vec::new()`.][70632] This allows\n  `vec![]` to be able to be used in `const` contexts.\n- [`convert::Infallible` now implements `Hash`.][70281]\n- [`OsString` now implements `DerefMut` and `IndexMut` returning\n  a `&mut OsStr`.][70048]\n- [Unicode 13 is now supported.][69929]\n- [`String` now implements `From<&mut str>`.][69661]\n- [`IoSlice` now implements `Copy`.][69403]\n- [`Vec<T>` now implements `From<[T; N]>`.][68692] Where `N` is at most 32.\n- [`proc_macro::LexError` now implements `fmt::Display` and `Error`.][68899]\n- [`from_le_bytes`, `to_le_bytes`, `from_be_bytes`, `to_be_bytes`,\n  `from_ne_bytes`, and `to_ne_bytes` methods are now `const` for all\n  integer types.][69373]\n\nStabilized APIs\n---------------\n- [`PathBuf::with_capacity`]\n- [`PathBuf::capacity`]\n- [`PathBuf::clear`]\n- [`PathBuf::reserve`]\n- [`PathBuf::reserve_exact`]\n- [`PathBuf::shrink_to_fit`]\n- [`f32::to_int_unchecked`]\n- [`f64::to_int_unchecked`]\n- [`Layout::align_to`]\n- [`Layout::pad_to_align`]\n- [`Layout::array`]\n- [`Layout::extend`]\n\nCargo\n-----\n- [Added the `cargo tree` command which will print a tree graph of\n  your dependencies.][cargo/8062] E.g.\n  ```\n    mdbook v0.3.2 (/Users/src/rust/mdbook)\n  ├── ammonia v3.0.0\n  │   ├── html5ever v0.24.0\n  │   │   ├── log v0.4.8\n  │   │   │   └── cfg-if v0.1.9\n  │   │   ├── mac v0.1.1\n  │   │   └── markup5ever v0.9.0\n  │   │       ├── log v0.4.8 (*)\n  │   │       ├── phf v0.7.24\n  │   │       │   └── phf_shared v0.7.24\n  │   │       │       ├── siphasher v0.2.3\n  │   │       │       └── unicase v1.4.2\n  │   │       │           [build-dependencies]\n  │   │       │           └── version_check v0.1.5\n  ...\n  ```\n  You can also display dependencies on multiple versions of the same crate with\n  `cargo tree -d` (short for `cargo tree --duplicates`).\n\nMisc\n----\n- [Rustdoc now allows you to specify `--crate-version` to have rustdoc include\n  the version in the sidebar.][69494]\n\nCompatibility Notes\n-------------------\n- [Rustc now correctly generates static libraries on Windows GNU targets with\n  the `.a` extension, rather than the previous `.lib`.][70937]\n- [Removed the `-C no_integrated_as` flag from rustc.][70345]\n- [The `file_name` property in JSON output of macro errors now points the actual\n  source file rather than the previous format of `<NAME macros>`.][70969]\n  **Note:** this may not point to a file that actually exists on the user's system.\n- [The minimum required external LLVM version has been bumped to LLVM 8.][71147]\n- [`mem::{zeroed, uninitialised}` will now panic when used with types that do\n  not allow zero initialization such as `NonZeroU8`.][66059] This was\n  previously a warning.\n- [In 1.45.0 (the next release) converting a `f64` to `u32` using the `as`\n  operator has been defined as a saturating operation.][71269] This was previously\n  undefined behaviour, but you can use the `{f64, f32}::to_int_unchecked` methods to\n  continue using the current behaviour, which may be desirable in rare performance\n  sensitive situations.\n\nInternal Only\n-------------\nThese changes provide no direct user facing benefits, but represent significant\nimprovements to the internals and overall performance of rustc and\nrelated tools.\n\n- [dep_graph Avoid allocating a set on when the number reads are small.][69778]\n- [Replace big JS dict with JSON parsing.][71250]\n\n[69373]: https://github.com/rust-lang/rust/pull/69373/\n[66059]: https://github.com/rust-lang/rust/pull/66059/\n[68191]: https://github.com/rust-lang/rust/pull/68191/\n[68899]: https://github.com/rust-lang/rust/pull/68899/\n[71147]: https://github.com/rust-lang/rust/pull/71147/\n[71250]: https://github.com/rust-lang/rust/pull/71250/\n[70937]: https://github.com/rust-lang/rust/pull/70937/\n[70969]: https://github.com/rust-lang/rust/pull/70969/\n[70632]: https://github.com/rust-lang/rust/pull/70632/\n[70281]: https://github.com/rust-lang/rust/pull/70281/\n[70345]: https://github.com/rust-lang/rust/pull/70345/\n[70048]: https://github.com/rust-lang/rust/pull/70048/\n[70081]: https://github.com/rust-lang/rust/pull/70081/\n[70156]: https://github.com/rust-lang/rust/pull/70156/\n[71269]: https://github.com/rust-lang/rust/pull/71269/\n[69838]: https://github.com/rust-lang/rust/pull/69838/\n[69929]: https://github.com/rust-lang/rust/pull/69929/\n[69661]: https://github.com/rust-lang/rust/pull/69661/\n[69778]: https://github.com/rust-lang/rust/pull/69778/\n[69494]: https://github.com/rust-lang/rust/pull/69494/\n[69403]: https://github.com/rust-lang/rust/pull/69403/\n[69033]: https://github.com/rust-lang/rust/pull/69033/\n[68692]: https://github.com/rust-lang/rust/pull/68692/\n[68334]: https://github.com/rust-lang/rust/pull/68334/\n[67502]: https://github.com/rust-lang/rust/pull/67502/\n[cargo/8062]: https://github.com/rust-lang/cargo/pull/8062/\n[`PathBuf::with_capacity`]: https://doc.rust-lang.org/std/path/struct.PathBuf.html#method.with_capacity\n[`PathBuf::capacity`]: https://doc.rust-lang.org/std/path/struct.PathBuf.html#method.capacity\n[`PathBuf::clear`]: https://doc.rust-lang.org/std/path/struct.PathBuf.html#method.clear\n[`PathBuf::reserve`]: https://doc.rust-lang.org/std/path/struct.PathBuf.html#method.reserve\n[`PathBuf::reserve_exact`]: https://doc.rust-lang.org/std/path/struct.PathBuf.html#method.reserve_exact\n[`PathBuf::shrink_to_fit`]: https://doc.rust-lang.org/std/path/struct.PathBuf.html#method.shrink_to_fit\n[`f32::to_int_unchecked`]: https://doc.rust-lang.org/std/primitive.f32.html#method.to_int_unchecked\n[`f64::to_int_unchecked`]: https://doc.rust-lang.org/std/primitive.f64.html#method.to_int_unchecked\n[`Layout::align_to`]: https://doc.rust-lang.org/std/alloc/struct.Layout.html#method.align_to\n[`Layout::pad_to_align`]: https://doc.rust-lang.org/std/alloc/struct.Layout.html#method.pad_to_align\n[`Layout::array`]: https://doc.rust-lang.org/std/alloc/struct.Layout.html#method.array\n[`Layout::extend`]: https://doc.rust-lang.org/std/alloc/struct.Layout.html#method.extend\n\n\nVersion 1.43.1 (2020-05-07)\n===========================\n\n* [Updated openssl-src to 1.1.1g for CVE-2020-1967.][71430]\n* [Fixed the stabilization of AVX-512 features.][71473]\n* [Fixed `cargo package --list` not working with unpublished dependencies.][cargo/8151]\n\n[71430]: https://github.com/rust-lang/rust/pull/71430\n[71473]: https://github.com/rust-lang/rust/issues/71473\n[cargo/8151]: https://github.com/rust-lang/cargo/issues/8151\n\n\nVersion 1.43.0 (2020-04-23)\n==========================\n\nLanguage\n--------\n- [Fixed using binary operations with `&{number}` (e.g. `&1.0`) not having\n  the type inferred correctly.][68129]\n- [Attributes such as `#[cfg()]` can now be used on `if` expressions.][69201]\n\n**Syntax only changes**\n- [Allow `type Foo: Ord` syntactically.][69361]\n- [Fuse associated and extern items up to defaultness.][69194]\n- [Syntactically allow `self` in all `fn` contexts.][68764]\n- [Merge `fn` syntax + cleanup item parsing.][68728]\n- [`item` macro fragments can be interpolated into `trait`s, `impl`s, and `extern` blocks.][69366]\n  For example, you may now write:\n  ```rust\n  macro_rules! mac_trait {\n      ($i:item) => {\n          trait T { $i }\n      }\n  }\n  mac_trait! {\n      fn foo() {}\n  }\n  ```\n\nThese are still rejected *semantically*, so you will likely receive an error but\nthese changes can be seen and parsed by macros and\nconditional compilation.\n\n\nCompiler\n--------\n- [You can now pass multiple lint flags to rustc to override the previous\n  flags.][67885] For example; `rustc -D unused -A unused-variables` denies\n  everything in the `unused` lint group except `unused-variables` which\n  is explicitly allowed. However, passing `rustc -A unused-variables -D unused` denies\n  everything in the `unused` lint group **including** `unused-variables` since\n  the allow flag is specified before the deny flag (and therefore overridden).\n- [rustc will now prefer your system MinGW libraries over its bundled libraries\n  if they are available on `windows-gnu`.][67429]\n- [rustc now buffers errors/warnings printed in JSON.][69227]\n\nLibraries\n---------\n- [`Arc<[T; N]>`, `Box<[T; N]>`, and `Rc<[T; N]>`, now implement\n  `TryFrom<Arc<[T]>>`,`TryFrom<Box<[T]>>`, and `TryFrom<Rc<[T]>>`\n  respectively.][69538] **Note** These conversions are only available when `N`\n  is `0..=32`.\n- [You can now use associated constants on floats and integers directly, rather\n  than having to import the module.][68952] e.g. You can now write `u32::MAX` or\n  `f32::NAN` with no imports.\n- [`u8::is_ascii` is now `const`.][68984]\n- [`String` now implements `AsMut<str>`.][68742]\n- [Added the `primitive` module to `std` and `core`.][67637] This module\n  reexports Rust's primitive types. This is mainly useful in macros\n  where you want avoid these types being shadowed.\n- [Relaxed some of the trait bounds on `HashMap` and `HashSet`.][67642]\n- [`string::FromUtf8Error` now implements `Clone + Eq`.][68738]\n\nStabilized APIs\n---------------\n- [`Once::is_completed`]\n- [`f32::LOG10_2`]\n- [`f32::LOG2_10`]\n- [`f64::LOG10_2`]\n- [`f64::LOG2_10`]\n- [`iter::once_with`]\n\nCargo\n-----\n- [You can now set config `[profile]`s in your `.cargo/config`, or through\n  your environment.][cargo/7823]\n- [Cargo will now set `CARGO_BIN_EXE_<name>` pointing to a binary's\n  executable path when running integration tests or benchmarks.][cargo/7697]\n  `<name>` is the name of your binary as-is e.g. If you wanted the executable\n  path for a binary named `my-program`you would use `env!(\"CARGO_BIN_EXE_my-program\")`.\n\nMisc\n----\n- [Certain checks in the `const_err` lint were deemed unrelated to const\n  evaluation][69185], and have been moved to the `unconditional_panic` and\n  `arithmetic_overflow` lints.\n\nCompatibility Notes\n-------------------\n\n- [Having trailing syntax in the `assert!` macro is now a hard error.][69548] This\n  has been a warning since 1.36.0.\n- [Fixed `Self` not having the correctly inferred type.][69340] This incorrectly\n  led to some instances being accepted, and now correctly emits a hard error.\n\n[69340]: https://github.com/rust-lang/rust/pull/69340\n\nInternal Only\n-------------\nThese changes provide no direct user facing benefits, but represent significant\nimprovements to the internals and overall performance of `rustc` and\nrelated tools.\n\n- [All components are now built with `opt-level=3` instead of `2`.][67878]\n- [Improved how rustc generates drop code.][67332]\n- [Improved performance from `#[inline]`-ing certain hot functions.][69256]\n- [traits: preallocate 2 Vecs of known initial size][69022]\n- [Avoid exponential behaviour when relating types][68772]\n- [Skip `Drop` terminators for enum variants without drop glue][68943]\n- [Improve performance of coherence checks][68966]\n- [Deduplicate types in the generator witness][68672]\n- [Invert control in struct_lint_level.][68725]\n\n[67332]: https://github.com/rust-lang/rust/pull/67332/\n[67429]: https://github.com/rust-lang/rust/pull/67429/\n[67637]: https://github.com/rust-lang/rust/pull/67637/\n[67642]: https://github.com/rust-lang/rust/pull/67642/\n[67878]: https://github.com/rust-lang/rust/pull/67878/\n[67885]: https://github.com/rust-lang/rust/pull/67885/\n[68129]: https://github.com/rust-lang/rust/pull/68129/\n[68672]: https://github.com/rust-lang/rust/pull/68672/\n[68725]: https://github.com/rust-lang/rust/pull/68725/\n[68728]: https://github.com/rust-lang/rust/pull/68728/\n[68738]: https://github.com/rust-lang/rust/pull/68738/\n[68742]: https://github.com/rust-lang/rust/pull/68742/\n[68764]: https://github.com/rust-lang/rust/pull/68764/\n[68772]: https://github.com/rust-lang/rust/pull/68772/\n[68943]: https://github.com/rust-lang/rust/pull/68943/\n[68952]: https://github.com/rust-lang/rust/pull/68952/\n[68966]: https://github.com/rust-lang/rust/pull/68966/\n[68984]: https://github.com/rust-lang/rust/pull/68984/\n[69022]: https://github.com/rust-lang/rust/pull/69022/\n[69185]: https://github.com/rust-lang/rust/pull/69185/\n[69194]: https://github.com/rust-lang/rust/pull/69194/\n[69201]: https://github.com/rust-lang/rust/pull/69201/\n[69227]: https://github.com/rust-lang/rust/pull/69227/\n[69548]: https://github.com/rust-lang/rust/pull/69548/\n[69256]: https://github.com/rust-lang/rust/pull/69256/\n[69361]: https://github.com/rust-lang/rust/pull/69361/\n[69366]: https://github.com/rust-lang/rust/pull/69366/\n[69538]: https://github.com/rust-lang/rust/pull/69538/\n[cargo/7823]: https://github.com/rust-lang/cargo/pull/7823\n[cargo/7697]: https://github.com/rust-lang/cargo/pull/7697\n[`Once::is_completed`]: https://doc.rust-lang.org/std/sync/struct.Once.html#method.is_completed\n[`f32::LOG10_2`]: https://doc.rust-lang.org/std/f32/consts/constant.LOG10_2.html\n[`f32::LOG2_10`]: https://doc.rust-lang.org/std/f32/consts/constant.LOG2_10.html\n[`f64::LOG10_2`]: https://doc.rust-lang.org/std/f64/consts/constant.LOG10_2.html\n[`f64::LOG2_10`]: https://doc.rust-lang.org/std/f64/consts/constant.LOG2_10.html\n[`iter::once_with`]: https://doc.rust-lang.org/std/iter/fn.once_with.html\n\n\nVersion 1.42.0 (2020-03-12)\n==========================\n\nLanguage\n--------\n- [You can now use the slice pattern syntax with subslices.][67712] e.g.\n  ```rust\n  fn foo(words: &[&str]) {\n      match words {\n          [\"Hello\", \"World\", \"!\", ..] => println!(\"Hello World!\"),\n          [\"Foo\", \"Bar\", ..] => println!(\"Baz\"),\n          rest => println!(\"{:?}\", rest),\n      }\n  }\n  ```\n- [You can now use `#[repr(transparent)]` on univariant `enum`s.][68122] Meaning\n  that you can create an enum that has the exact layout and ABI of the type\n  it contains.\n- [You can now use outer attribute procedural macros on inline modules.][64273]\n- [There are some *syntax-only* changes:][67131]\n   - `default` is syntactically allowed before items in `trait` definitions.\n   - Items in `impl`s (i.e. `const`s, `type`s, and `fn`s) may syntactically\n     leave out their bodies in favor of `;`.\n   - Bounds on associated types in `impl`s are now syntactically allowed\n     (e.g. `type Foo: Ord;`).\n   - `...` (the C-variadic type) may occur syntactically directly as the type of\n      any function parameter.\n\n  These are still rejected *semantically*, so you will likely receive an error\n  but these changes can be seen and parsed by procedural macros and\n  conditional compilation.\n\nCompiler\n--------\n- [Added tier 2\\* support for `armv7a-none-eabi`.][68253]\n- [Added tier 2 support for `riscv64gc-unknown-linux-gnu`.][68339]\n- [`Option::{expect,unwrap}` and\n   `Result::{expect, expect_err, unwrap, unwrap_err}` now produce panic messages\n   pointing to the location where they were called, rather than\n   `core`'s internals. ][67887]\n\n\\* Refer to Rust's [platform support page][platform-support-doc] for more\ninformation on Rust's tiered platform support.\n\nLibraries\n---------\n- [`iter::Empty<T>` now implements `Send` and `Sync` for any `T`.][68348]\n- [`Pin::{map_unchecked, map_unchecked_mut}` no longer require the return type\n   to implement `Sized`.][67935]\n- [`io::Cursor` now derives `PartialEq` and `Eq`.][67233]\n- [`Layout::new` is now `const`.][66254]\n- [Added Standard Library support for `riscv64gc-unknown-linux-gnu`.][66899]\n\n\nStabilized APIs\n---------------\n- [`CondVar::wait_while`]\n- [`CondVar::wait_timeout_while`]\n- [`DebugMap::key`]\n- [`DebugMap::value`]\n- [`ManuallyDrop::take`]\n- [`matches!`]\n- [`ptr::slice_from_raw_parts_mut`]\n- [`ptr::slice_from_raw_parts`]\n\nCargo\n-----\n- [You no longer need to include `extern crate proc_macro;` to be able to\n  `use proc_macro;` in the `2018` edition.][cargo/7700]\n\nCompatibility Notes\n-------------------\n- [`Error::description` has been deprecated, and its use will now produce a\n  warning.][66919] It's recommended to use `Display`/`to_string` instead.\n\n[68253]: https://github.com/rust-lang/rust/pull/68253/\n[68348]: https://github.com/rust-lang/rust/pull/68348/\n[67935]: https://github.com/rust-lang/rust/pull/67935/\n[68339]: https://github.com/rust-lang/rust/pull/68339/\n[68122]: https://github.com/rust-lang/rust/pull/68122/\n[64273]: https://github.com/rust-lang/rust/pull/64273/\n[67712]: https://github.com/rust-lang/rust/pull/67712/\n[67887]: https://github.com/rust-lang/rust/pull/67887/\n[67131]: https://github.com/rust-lang/rust/pull/67131/\n[67233]: https://github.com/rust-lang/rust/pull/67233/\n[66899]: https://github.com/rust-lang/rust/pull/66899/\n[66919]: https://github.com/rust-lang/rust/pull/66919/\n[66254]: https://github.com/rust-lang/rust/pull/66254/\n[cargo/7700]: https://github.com/rust-lang/cargo/pull/7700\n[`DebugMap::key`]: https://doc.rust-lang.org/stable/std/fmt/struct.DebugMap.html#method.key\n[`DebugMap::value`]: https://doc.rust-lang.org/stable/std/fmt/struct.DebugMap.html#method.value\n[`ManuallyDrop::take`]: https://doc.rust-lang.org/stable/std/mem/struct.ManuallyDrop.html#method.take\n[`matches!`]: https://doc.rust-lang.org/stable/std/macro.matches.html\n[`ptr::slice_from_raw_parts_mut`]: https://doc.rust-lang.org/stable/std/ptr/fn.slice_from_raw_parts_mut.html\n[`ptr::slice_from_raw_parts`]: https://doc.rust-lang.org/stable/std/ptr/fn.slice_from_raw_parts.html\n[`CondVar::wait_while`]: https://doc.rust-lang.org/stable/std/sync/struct.Condvar.html#method.wait_while\n[`CondVar::wait_timeout_while`]: https://doc.rust-lang.org/stable/std/sync/struct.Condvar.html#method.wait_timeout_while\n\n\nVersion 1.41.1 (2020-02-27)\n===========================\n\n* [Always check types of static items][69145]\n* [Always check lifetime bounds of `Copy` impls][69145]\n* [Fix miscompilation in callers of `Layout::repeat`][69225]\n* [Rust 1.41.0 was announced as the last Rust release with tier 1 or tier 2 support for 32-bit Apple targets][apple-32bit-drop].\n  That announcement did not expect a patch release. 1.41.1 also includes release binaries for these targets.\n\n[69225]: https://github.com/rust-lang/rust/issues/69225\n[69145]: https://github.com/rust-lang/rust/pull/69145\n\n\nVersion 1.41.0 (2020-01-30)\n===========================\n\nLanguage\n--------\n\n- [You can now pass type parameters to foreign items when implementing\n  traits.][65879] E.g. You can now write `impl<T> From<Foo> for Vec<T> {}`.\n- [You can now arbitrarily nest receiver types in the `self` position.][64325] E.g. you can\n  now write `fn foo(self: Box<Box<Self>>) {}`. Previously only `Self`, `&Self`,\n  `&mut Self`, `Arc<Self>`, `Rc<Self>`, and `Box<Self>` were allowed.\n- [You can now use any valid identifier in a `format_args` macro.][66847]\n  Previously identifiers starting with an underscore were not allowed.\n- [Visibility modifiers (e.g. `pub`) are now syntactically allowed on trait items and\n  enum variants.][66183] These are still rejected semantically, but\n  can be seen and parsed by procedural macros and conditional compilation.\n- [You can now define a Rust `extern \"C\"` function with `Box<T>` and use `T*` as the corresponding\n  type on the C side.][62514] Please see [the documentation][box-memory-layout] for more information,\n  including the important caveat about preferring to avoid `Box<T>` in Rust signatures for functions defined in C.\n\n[box-memory-layout]: https://doc.rust-lang.org/std/boxed/index.html#memory-layout\n\nCompiler\n--------\n\n- [Rustc will now warn if you have unused loop `'label`s.][66325]\n- [Removed support for the `i686-unknown-dragonfly` target.][67255]\n- [Added tier 3 support\\* for the `riscv64gc-unknown-linux-gnu` target.][66661]\n- [You can now pass an arguments file passing the `@path` syntax\n  to rustc.][66172] Note that the format differs somewhat from what is\n  found in other tooling; please see [the documentation][argfile-docs] for\n  more information.\n- [You can now provide `--extern` flag without a path, indicating that it is\n  available from the search path or specified with an `-L` flag.][64882]\n\n\\* Refer to Rust's [platform support page][platform-support-doc] for more\ninformation on Rust's tiered platform support.\n\n[argfile-docs]: https://doc.rust-lang.org/nightly/rustc/command-line-arguments.html#path-load-command-line-flags-from-a-path\n\nLibraries\n---------\n\n- [The `core::panic` module is now stable.][66771] It was already stable\n  through `std`.\n- [`NonZero*` numerics now implement `From<NonZero*>` if it's a smaller integer\n  width.][66277] E.g. `NonZeroU16` now implements `From<NonZeroU8>`.\n- [`MaybeUninit<T>` now implements `fmt::Debug`.][65013]\n\nStabilized APIs\n---------------\n\n- [`Result::map_or`]\n- [`Result::map_or_else`]\n- [`std::rc::Weak::weak_count`]\n- [`std::rc::Weak::strong_count`]\n- [`std::sync::Weak::weak_count`]\n- [`std::sync::Weak::strong_count`]\n\nCargo\n-----\n\n- [Cargo will now document all the private items for binary crates\n  by default.][cargo/7593]\n- [`cargo-install` will now reinstall the package if it detects that it is out\n  of date.][cargo/7560]\n- [Cargo.lock now uses a more git friendly format that should help to reduce\n  merge conflicts.][cargo/7579]\n- [You can now override specific dependencies's build settings][cargo/7591] E.g.\n  `[profile.dev.package.image] opt-level = 2` sets the `image` crate's\n  optimisation level to `2` for debug builds. You can also use\n  `[profile.<profile>.build-override]` to override build scripts and\n  their dependencies.\n\nMisc\n----\n\n- [You can now specify `edition` in documentation code blocks to compile the block\n  for that edition.][66238] E.g. `edition2018` tells rustdoc that the code sample\n  should be compiled the 2018 edition of Rust.\n- [You can now provide custom themes to rustdoc with `--theme`, and check the\n  current theme with `--check-theme`.][54733]\n- [You can use `#[cfg(doc)]` to compile an item when building documentation.][61351]\n\nCompatibility Notes\n-------------------\n\n- [As previously announced 1.41 will be the last tier 1 release for 32-bit\n  Apple targets.][apple-32bit-drop] This means that the source code is still\n  available to build, but the targets are no longer being tested and release\n  binaries for those platforms will no longer be distributed by the Rust project.\n  Please refer to the linked blog post for more information.\n\n[54733]: https://github.com/rust-lang/rust/pull/54733/\n[61351]: https://github.com/rust-lang/rust/pull/61351/\n[62514]: https://github.com/rust-lang/rust/pull/62514/\n[67255]: https://github.com/rust-lang/rust/pull/67255/\n[66661]: https://github.com/rust-lang/rust/pull/66661/\n[66771]: https://github.com/rust-lang/rust/pull/66771/\n[66847]: https://github.com/rust-lang/rust/pull/66847/\n[66238]: https://github.com/rust-lang/rust/pull/66238/\n[66277]: https://github.com/rust-lang/rust/pull/66277/\n[66325]: https://github.com/rust-lang/rust/pull/66325/\n[66172]: https://github.com/rust-lang/rust/pull/66172/\n[66183]: https://github.com/rust-lang/rust/pull/66183/\n[65879]: https://github.com/rust-lang/rust/pull/65879/\n[65013]: https://github.com/rust-lang/rust/pull/65013/\n[64882]: https://github.com/rust-lang/rust/pull/64882/\n[64325]: https://github.com/rust-lang/rust/pull/64325/\n[cargo/7560]: https://github.com/rust-lang/cargo/pull/7560/\n[cargo/7579]: https://github.com/rust-lang/cargo/pull/7579/\n[cargo/7591]: https://github.com/rust-lang/cargo/pull/7591/\n[cargo/7593]: https://github.com/rust-lang/cargo/pull/7593/\n[`Result::map_or_else`]: https://doc.rust-lang.org/std/result/enum.Result.html#method.map_or_else\n[`Result::map_or`]: https://doc.rust-lang.org/std/result/enum.Result.html#method.map_or\n[`std::rc::Weak::weak_count`]: https://doc.rust-lang.org/std/rc/struct.Weak.html#method.weak_count\n[`std::rc::Weak::strong_count`]: https://doc.rust-lang.org/std/rc/struct.Weak.html#method.strong_count\n[`std::sync::Weak::weak_count`]: https://doc.rust-lang.org/std/sync/struct.Weak.html#method.weak_count\n[`std::sync::Weak::strong_count`]: https://doc.rust-lang.org/std/sync/struct.Weak.html#method.strong_count\n[apple-32bit-drop]: https://blog.rust-lang.org/2020/01/03/reducing-support-for-32-bit-apple-targets.html\n\nVersion 1.40.0 (2019-12-19)\n===========================\n\nLanguage\n--------\n- [You can now use tuple `struct`s and tuple `enum` variant's constructors in\n  `const` contexts.][65188] e.g.\n\n  ```rust\n  pub struct Point(i32, i32);\n\n  const ORIGIN: Point = {\n      let constructor = Point;\n\n      constructor(0, 0)\n  };\n  ```\n\n- [You can now mark `struct`s, `enum`s, and `enum` variants with the `#[non_exhaustive]` attribute to\n  indicate that there may be variants or fields added in the future.][64639]\n  For example this requires adding a wild-card branch (`_ => {}`) to any match\n  statements on a non-exhaustive `enum`. [(RFC 2008)]\n- [You can now use function-like procedural macros in `extern` blocks and in\n  type positions.][63931] e.g. `type Generated = macro!();`\n- [Function-like and attribute procedural macros can now emit\n  `macro_rules!` items, so you can now have your macros generate macros.][64035]\n- [The `meta` pattern matcher in `macro_rules!` now correctly matches the modern\n  attribute syntax.][63674] For example `(#[$m:meta])` now matches `#[attr]`,\n  `#[attr{tokens}]`, `#[attr[tokens]]`, and `#[attr(tokens)]`.\n\nCompiler\n--------\n- [Added tier 3 support\\* for the\n  `thumbv7neon-unknown-linux-musleabihf` target.][66103]\n- [Added tier 3 support for the\n  `aarch64-unknown-none-softfloat` target.][64589]\n- [Added tier 3 support for the `mips64-unknown-linux-muslabi64`, and\n  `mips64el-unknown-linux-muslabi64` targets.][65843]\n\n\\* Refer to Rust's [platform support page][platform-support-doc] for more\n  information on Rust's tiered platform support.\n\nLibraries\n---------\n- [The `is_power_of_two` method on unsigned numeric types is now a `const` function.][65092]\n\nStabilized APIs\n---------------\n- [`BTreeMap::get_key_value`]\n- [`HashMap::get_key_value`]\n- [`Option::as_deref_mut`]\n- [`Option::as_deref`]\n- [`Option::flatten`]\n- [`UdpSocket::peer_addr`]\n- [`f32::to_be_bytes`]\n- [`f32::to_le_bytes`]\n- [`f32::to_ne_bytes`]\n- [`f64::to_be_bytes`]\n- [`f64::to_le_bytes`]\n- [`f64::to_ne_bytes`]\n- [`f32::from_be_bytes`]\n- [`f32::from_le_bytes`]\n- [`f32::from_ne_bytes`]\n- [`f64::from_be_bytes`]\n- [`f64::from_le_bytes`]\n- [`f64::from_ne_bytes`]\n- [`mem::take`]\n- [`slice::repeat`]\n- [`todo!`]\n\nCargo\n-----\n- [Cargo will now always display warnings, rather than only on\n  fresh builds.][cargo/7450]\n- [Feature flags (except `--all-features`) passed to a virtual workspace will\n  now produce an error.][cargo/7507] Previously these flags were ignored.\n- [You can now publish `dev-dependencies` without including\n  a `version`.][cargo/7333]\n\nMisc\n----\n- [You can now specify the `#[cfg(doctest)]` attribute to include an item only\n  when running documentation tests with `rustdoc`.][63803]\n\nCompatibility Notes\n-------------------\n- [As previously announced, any previous NLL warnings in the 2015 edition are\n  now hard errors.][64221]\n- [The `include!` macro will now warn if it failed to include the\n  entire file.][64284] The `include!` macro unintentionally only includes the\n  first _expression_ in a file, and this can be unintuitive. This will become\n  either a hard error in a future release, or the behavior may be fixed to include all expressions as expected.\n- [Using `#[inline]` on function prototypes and consts now emits a warning under\n  `unused_attribute` lint.][65294] Using `#[inline]` anywhere else inside traits\n  or `extern` blocks now correctly emits a hard error.\n\n[65294]: https://github.com/rust-lang/rust/pull/65294/\n[66103]: https://github.com/rust-lang/rust/pull/66103/\n[65843]: https://github.com/rust-lang/rust/pull/65843/\n[65188]: https://github.com/rust-lang/rust/pull/65188/\n[65092]: https://github.com/rust-lang/rust/pull/65092/\n[64589]: https://github.com/rust-lang/rust/pull/64589/\n[64639]: https://github.com/rust-lang/rust/pull/64639/\n[64221]: https://github.com/rust-lang/rust/pull/64221/\n[64284]: https://github.com/rust-lang/rust/pull/64284/\n[63931]: https://github.com/rust-lang/rust/pull/63931/\n[64035]: https://github.com/rust-lang/rust/pull/64035/\n[63674]: https://github.com/rust-lang/rust/pull/63674/\n[63803]: https://github.com/rust-lang/rust/pull/63803/\n[cargo/7450]: https://github.com/rust-lang/cargo/pull/7450/\n[cargo/7507]: https://github.com/rust-lang/cargo/pull/7507/\n[cargo/7333]: https://github.com/rust-lang/cargo/pull/7333/\n[(rfc 2008)]: https://rust-lang.github.io/rfcs/2008-non-exhaustive.html\n[`f32::to_be_bytes`]: https://doc.rust-lang.org/std/primitive.f32.html#method.to_be_bytes\n[`f32::to_le_bytes`]: https://doc.rust-lang.org/std/primitive.f32.html#method.to_le_bytes\n[`f32::to_ne_bytes`]: https://doc.rust-lang.org/std/primitive.f32.html#method.to_ne_bytes\n[`f64::to_be_bytes`]: https://doc.rust-lang.org/std/primitive.f64.html#method.to_be_bytes\n[`f64::to_le_bytes`]: https://doc.rust-lang.org/std/primitive.f64.html#method.to_le_bytes\n[`f64::to_ne_bytes`]: https://doc.rust-lang.org/std/primitive.f64.html#method.to_ne_bytes\n[`f32::from_be_bytes`]: https://doc.rust-lang.org/std/primitive.f32.html#method.from_be_bytes\n[`f32::from_le_bytes`]: https://doc.rust-lang.org/std/primitive.f32.html#method.from_le_bytes\n[`f32::from_ne_bytes`]: https://doc.rust-lang.org/std/primitive.f32.html#method.from_ne_bytes\n[`f64::from_be_bytes`]: https://doc.rust-lang.org/std/primitive.f64.html#method.from_be_bytes\n[`f64::from_le_bytes`]: https://doc.rust-lang.org/std/primitive.f64.html#method.from_le_bytes\n[`f64::from_ne_bytes`]: https://doc.rust-lang.org/std/primitive.f64.html#method.from_ne_bytes\n[`option::flatten`]: https://doc.rust-lang.org/std/option/enum.Option.html#method.flatten\n[`option::as_deref`]: https://doc.rust-lang.org/std/option/enum.Option.html#method.as_deref\n[`option::as_deref_mut`]: https://doc.rust-lang.org/std/option/enum.Option.html#method.as_deref_mut\n[`hashmap::get_key_value`]: https://doc.rust-lang.org/std/collections/struct.HashMap.html#method.get_key_value\n[`btreemap::get_key_value`]: https://doc.rust-lang.org/std/collections/struct.BTreeMap.html#method.get_key_value\n[`slice::repeat`]: https://doc.rust-lang.org/std/primitive.slice.html#method.repeat\n[`mem::take`]: https://doc.rust-lang.org/std/mem/fn.take.html\n[`udpsocket::peer_addr`]: https://doc.rust-lang.org/std/net/struct.UdpSocket.html#method.peer_addr\n[`todo!`]: https://doc.rust-lang.org/std/macro.todo.html\n\n\nVersion 1.39.0 (2019-11-07)\n===========================\n\nLanguage\n--------\n- [You can now create `async` functions and blocks with `async fn`, `async move {}`, and\n  `async {}` respectively, and you can now call `.await` on async expressions.][63209]\n- [You can now use certain attributes on function, closure, and function pointer\n  parameters.][64010] These attributes include `cfg`, `cfg_attr`, `allow`, `warn`,\n  `deny`, `forbid` as well as inert helper attributes used by procedural macro\n  attributes applied to items. e.g.\n  ```rust\n  fn len(\n      #[cfg(windows)] slice: &[u16],\n      #[cfg(not(windows))] slice: &[u8],\n  ) -> usize {\n      slice.len()\n  }\n  ```\n- [You can now take shared references to bind-by-move patterns in the `if` guards\n  of `match` arms.][63118] e.g.\n  ```rust\n  fn main() {\n      let array: Box<[u8; 4]> = Box::new([1, 2, 3, 4]);\n\n      match array {\n          nums\n  //      ---- `nums` is bound by move.\n              if nums.iter().sum::<u8>() == 10\n  //                 ^------ `.iter()` implicitly takes a reference to `nums`.\n          => {\n              drop(nums);\n  //          ----------- Legal as `nums` was bound by move and so we have ownership.\n          }\n          _ => unreachable!(),\n      }\n  }\n  ```\n\n\n\nCompiler\n--------\n- [Added tier 3\\* support for the `i686-unknown-uefi` target.][64334]\n- [Added tier 3 support for the `sparc64-unknown-openbsd` target.][63595]\n- [rustc will now trim code snippets in diagnostics to fit in your terminal.][63402]\n  **Note** Cargo currently doesn't use this feature. Refer to\n  [cargo#7315][cargo/7315] to track this feature's progress.\n- [You can now pass `--show-output` argument to test binaries to print the\n  output of successful tests.][62600]\n\n\n\\* Refer to Rust's [platform support page][platform-support-doc] for more\ninformation on Rust's tiered platform support.\n\nLibraries\n---------\n- [`Vec::new` and `String::new` are now `const` functions.][64028]\n- [`LinkedList::new` is now a `const` function.][63684]\n- [`str::len`, `[T]::len` and `str::as_bytes` are now `const` functions.][63770]\n- [The `abs`, `wrapping_abs`, and `overflowing_abs` numeric functions are\n  now `const`.][63786]\n\nStabilized APIs\n---------------\n- [`Pin::into_inner`]\n- [`Instant::checked_duration_since`]\n- [`Instant::saturating_duration_since`]\n\nCargo\n-----\n- [You can now publish git dependencies if supplied with a `version`.][cargo/7237]\n- [The `--all` flag has been renamed to `--workspace`.][cargo/7241] Using\n  `--all` is now deprecated.\n\nMisc\n----\n- [You can now pass `-Clinker` to rustdoc to control the linker used\n  for compiling doctests.][63834]\n\nCompatibility Notes\n-------------------\n- [Code that was previously accepted by the old borrow checker, but rejected by\n  the NLL borrow checker is now a hard error in Rust 2018.][63565] This was\n  previously a warning, and will also become a hard error in the Rust 2015\n  edition in the 1.40.0 release.\n- [`rustdoc` now requires `rustc` to be installed and in the same directory to\n  run tests.][63827] This should improve performance when running a large\n  amount of doctests.\n- [The `try!` macro will now issue a deprecation warning.][62672] It is\n  recommended to use the `?` operator instead.\n- [`asinh(-0.0)` now correctly returns `-0.0`.][63698] Previously this\n  returned `0.0`.\n\n[62600]: https://github.com/rust-lang/rust/pull/62600/\n[62672]: https://github.com/rust-lang/rust/pull/62672/\n[63118]: https://github.com/rust-lang/rust/pull/63118/\n[63209]: https://github.com/rust-lang/rust/pull/63209/\n[63402]: https://github.com/rust-lang/rust/pull/63402/\n[63565]: https://github.com/rust-lang/rust/pull/63565/\n[63595]: https://github.com/rust-lang/rust/pull/63595/\n[63684]: https://github.com/rust-lang/rust/pull/63684/\n[63698]: https://github.com/rust-lang/rust/pull/63698/\n[63770]: https://github.com/rust-lang/rust/pull/63770/\n[63786]: https://github.com/rust-lang/rust/pull/63786/\n[63827]: https://github.com/rust-lang/rust/pull/63827/\n[63834]: https://github.com/rust-lang/rust/pull/63834/\n[64010]: https://github.com/rust-lang/rust/pull/64010/\n[64028]: https://github.com/rust-lang/rust/pull/64028/\n[64334]: https://github.com/rust-lang/rust/pull/64334/\n[cargo/7237]: https://github.com/rust-lang/cargo/pull/7237/\n[cargo/7241]: https://github.com/rust-lang/cargo/pull/7241/\n[cargo/7315]: https://github.com/rust-lang/cargo/pull/7315/\n[`Pin::into_inner`]: https://doc.rust-lang.org/std/pin/struct.Pin.html#method.into_inner\n[`Instant::checked_duration_since`]: https://doc.rust-lang.org/std/time/struct.Instant.html#method.checked_duration_since\n[`Instant::saturating_duration_since`]: https://doc.rust-lang.org/std/time/struct.Instant.html#method.saturating_duration_since\n\nVersion 1.38.0 (2019-09-26)\n==========================\n\nLanguage\n--------\n- [The `#[global_allocator]` attribute can now be used in submodules.][62735]\n- [The `#[deprecated]` attribute can now be used on macros.][62042]\n\nCompiler\n--------\n- [Added pipelined compilation support to `rustc`.][62766] This will\n  improve compilation times in some cases. For further information please refer\n  to the [_\"Evaluating pipelined rustc compilation\"_][pipeline-internals] thread.\n- [Added tier 3\\* support for the `aarch64-uwp-windows-msvc`, `i686-uwp-windows-gnu`,\n  `i686-uwp-windows-msvc`, `x86_64-uwp-windows-gnu`, and\n  `x86_64-uwp-windows-msvc` targets.][60260]\n- [Added tier 3 support for the `armv7-unknown-linux-gnueabi` and\n  `armv7-unknown-linux-musleabi` targets.][63107]\n- [Added tier 3 support for the `hexagon-unknown-linux-musl` target.][62814]\n- [Added tier 3 support for the `riscv32i-unknown-none-elf` target.][62784]\n- [Upgraded to LLVM 9.][62592]\n\n\\* Refer to Rust's [platform support page][platform-support-doc] for more\ninformation on Rust's tiered platform support.\n\nLibraries\n---------\n- [`ascii::EscapeDefault` now implements `Clone` and `Display`.][63421]\n- [Derive macros for prelude traits (e.g. `Clone`, `Debug`, `Hash`) are now\n  available at the same path as the trait.][63056] (e.g. The `Clone` derive macro\n  is available at `std::clone::Clone`). This also makes all built-in macros\n  available in `std`/`core` root. e.g. `std::include_bytes!`.\n- [`str::Chars` now implements `Debug`.][63000]\n- [`slice::{concat, connect, join}` now accepts `&[T]` in addition to `&T`.][62528]\n- [`*const T` and `*mut T` now implement `marker::Unpin`.][62583]\n- [`Arc<[T]>` and `Rc<[T]>` now implement `FromIterator<T>`.][61953]\n- [Added euclidean remainder and division operations (`div_euclid`,\n  `rem_euclid`) to all numeric primitives.][61884] Additionally `checked`,\n  `overflowing`, and `wrapping` versions are available for all\n  integer primitives.\n- [`thread::AccessError` now implements `Clone`, `Copy`, `Eq`, `Error`, and\n  `PartialEq`.][61491]\n- [`iter::{StepBy, Peekable, Take}` now implement `DoubleEndedIterator`.][61457]\n\nStabilized APIs\n---------------\n- [`<*const T>::cast`]\n- [`<*mut T>::cast`]\n- [`Duration::as_secs_f32`]\n- [`Duration::as_secs_f64`]\n- [`Duration::div_f32`]\n- [`Duration::div_f64`]\n- [`Duration::from_secs_f32`]\n- [`Duration::from_secs_f64`]\n- [`Duration::mul_f32`]\n- [`Duration::mul_f64`]\n- [`any::type_name`]\n\nCargo\n-----\n- [Added pipelined compilation support to `cargo`.][cargo/7143]\n- [You can now pass the `--features` option multiple times to enable\n  multiple features.][cargo/7084]\n\nRustdoc\n-------\n\n- [Documentation on `pub use` statements is prepended to the documentation of the re-exported item][63048]\n\nMisc\n----\n- [`rustc` will now warn about some incorrect uses of\n  `mem::{uninitialized, zeroed}` that are known to cause undefined behaviour.][63346]\n\nCompatibility Notes\n-------------------\n- The [`x86_64-unknown-uefi` platform can not be built][62785] with rustc\n  1.38.0.\n- The [`armv7-unknown-linux-gnueabihf` platform is known to have\n  issues][62896] with certain crates such as libc.\n\n[60260]: https://github.com/rust-lang/rust/pull/60260/\n[61457]: https://github.com/rust-lang/rust/pull/61457/\n[61491]: https://github.com/rust-lang/rust/pull/61491/\n[61884]: https://github.com/rust-lang/rust/pull/61884/\n[61953]: https://github.com/rust-lang/rust/pull/61953/\n[62042]: https://github.com/rust-lang/rust/pull/62042/\n[62528]: https://github.com/rust-lang/rust/pull/62528/\n[62583]: https://github.com/rust-lang/rust/pull/62583/\n[62735]: https://github.com/rust-lang/rust/pull/62735/\n[62766]: https://github.com/rust-lang/rust/pull/62766/\n[62784]: https://github.com/rust-lang/rust/pull/62784/\n[62592]: https://github.com/rust-lang/rust/pull/62592/\n[62785]: https://github.com/rust-lang/rust/issues/62785/\n[62814]: https://github.com/rust-lang/rust/pull/62814/\n[62896]: https://github.com/rust-lang/rust/issues/62896/\n[63000]: https://github.com/rust-lang/rust/pull/63000/\n[63056]: https://github.com/rust-lang/rust/pull/63056/\n[63107]: https://github.com/rust-lang/rust/pull/63107/\n[63346]: https://github.com/rust-lang/rust/pull/63346/\n[63421]: https://github.com/rust-lang/rust/pull/63421/\n[cargo/7084]: https://github.com/rust-lang/cargo/pull/7084/\n[cargo/7143]: https://github.com/rust-lang/cargo/pull/7143/\n[63048]: https://github.com/rust-lang/rust/pull/63048\n[`<*const T>::cast`]: https://doc.rust-lang.org/std/primitive.pointer.html#method.cast\n[`<*mut T>::cast`]: https://doc.rust-lang.org/std/primitive.pointer.html#method.cast\n[`Duration::as_secs_f32`]: https://doc.rust-lang.org/std/time/struct.Duration.html#method.as_secs_f32\n[`Duration::as_secs_f64`]: https://doc.rust-lang.org/std/time/struct.Duration.html#method.as_secs_f64\n[`Duration::div_f32`]: https://doc.rust-lang.org/std/time/struct.Duration.html#method.div_f32\n[`Duration::div_f64`]: https://doc.rust-lang.org/std/time/struct.Duration.html#method.div_f64\n[`Duration::from_secs_f32`]: https://doc.rust-lang.org/std/time/struct.Duration.html#method.from_secs_f32\n[`Duration::from_secs_f64`]: https://doc.rust-lang.org/std/time/struct.Duration.html#method.from_secs_f64\n[`Duration::mul_f32`]: https://doc.rust-lang.org/std/time/struct.Duration.html#method.mul_f32\n[`Duration::mul_f64`]: https://doc.rust-lang.org/std/time/struct.Duration.html#method.mul_f64\n[`any::type_name`]: https://doc.rust-lang.org/std/any/fn.type_name.html\n[platform-support-doc]: https://doc.rust-lang.org/nightly/rustc/platform-support.html\n[pipeline-internals]: https://internals.rust-lang.org/t/evaluating-pipelined-rustc-compilation/10199\n\nVersion 1.37.0 (2019-08-15)\n==========================\n\nLanguage\n--------\n- `#[must_use]` will now warn if the type is contained in a [tuple][61100],\n  [`Box`][62228], or an [array][62235] and unused.\n- [You can now use the `cfg` and `cfg_attr` attributes on\n  generic parameters.][61547]\n- [You can now use enum variants through type alias.][61682] e.g. You can\n  write the following:\n  ```rust\n  type MyOption = Option<u8>;\n\n  fn increment_or_zero(x: MyOption) -> u8 {\n      match x {\n          MyOption::Some(y) => y + 1,\n          MyOption::None => 0,\n      }\n  }\n  ```\n- [You can now use `_` as an identifier for consts.][61347] e.g. You can write\n  `const _: u32 = 5;`.\n- [You can now use `#[repr(align(X)]` on enums.][61229]\n- [The  `?` Kleene macro operator is now available in the\n  2015 edition.][60932]\n\nCompiler\n--------\n- [You can now enable Profile-Guided Optimization with the `-C profile-generate`\n  and `-C profile-use` flags.][61268] For more information on how to use profile\n  guided optimization, please refer to the [rustc book][rustc-book-pgo].\n- [The `rust-lldb` wrapper script should now work again.][61827]\n\nLibraries\n---------\n- [`mem::MaybeUninit<T>` is now ABI-compatible with `T`.][61802]\n\nStabilized APIs\n---------------\n- [`BufReader::buffer`]\n- [`BufWriter::buffer`]\n- [`Cell::from_mut`]\n- [`Cell<[T]>::as_slice_of_cells`][`Cell<slice>::as_slice_of_cells`]\n- [`DoubleEndedIterator::nth_back`]\n- [`Option::xor`]\n- [`Wrapping::reverse_bits`]\n- [`i128::reverse_bits`]\n- [`i16::reverse_bits`]\n- [`i32::reverse_bits`]\n- [`i64::reverse_bits`]\n- [`i8::reverse_bits`]\n- [`isize::reverse_bits`]\n- [`slice::copy_within`]\n- [`u128::reverse_bits`]\n- [`u16::reverse_bits`]\n- [`u32::reverse_bits`]\n- [`u64::reverse_bits`]\n- [`u8::reverse_bits`]\n- [`usize::reverse_bits`]\n\nCargo\n-----\n- [`Cargo.lock` files are now included by default when publishing executable crates\n  with executables.][cargo/7026]\n- [You can now specify `default-run=\"foo\"` in `[package]` to specify the\n  default executable to use for `cargo run`.][cargo/7056]\n\nMisc\n----\n\nCompatibility Notes\n-------------------\n- [Using `...` for inclusive range patterns will now warn by default.][61342]\n  Please transition your code to using the `..=` syntax for inclusive\n  ranges instead.\n- [Using a trait object without the `dyn` will now warn by default.][61203]\n  Please transition your code to use `dyn Trait` for trait objects instead.\n\n[62228]: https://github.com/rust-lang/rust/pull/62228/\n[62235]: https://github.com/rust-lang/rust/pull/62235/\n[61802]: https://github.com/rust-lang/rust/pull/61802/\n[61827]: https://github.com/rust-lang/rust/pull/61827/\n[61547]: https://github.com/rust-lang/rust/pull/61547/\n[61682]: https://github.com/rust-lang/rust/pull/61682/\n[61268]: https://github.com/rust-lang/rust/pull/61268/\n[61342]: https://github.com/rust-lang/rust/pull/61342/\n[61347]: https://github.com/rust-lang/rust/pull/61347/\n[61100]: https://github.com/rust-lang/rust/pull/61100/\n[61203]: https://github.com/rust-lang/rust/pull/61203/\n[61229]: https://github.com/rust-lang/rust/pull/61229/\n[60932]: https://github.com/rust-lang/rust/pull/60932/\n[cargo/7026]: https://github.com/rust-lang/cargo/pull/7026/\n[cargo/7056]: https://github.com/rust-lang/cargo/pull/7056/\n[`BufReader::buffer`]: https://doc.rust-lang.org/std/io/struct.BufReader.html#method.buffer\n[`BufWriter::buffer`]: https://doc.rust-lang.org/std/io/struct.BufWriter.html#method.buffer\n[`Cell::from_mut`]: https://doc.rust-lang.org/std/cell/struct.Cell.html#method.from_mut\n[`Cell<slice>::as_slice_of_cells`]: https://doc.rust-lang.org/std/cell/struct.Cell.html#method.as_slice_of_cells\n[`DoubleEndedIterator::nth_back`]: https://doc.rust-lang.org/std/iter/trait.DoubleEndedIterator.html#method.nth_back\n[`Option::xor`]: https://doc.rust-lang.org/std/option/enum.Option.html#method.xor\n[`Wrapping::reverse_bits`]: https://doc.rust-lang.org/std/num/struct.Wrapping.html#method.reverse_bits\n[`i128::reverse_bits`]: https://doc.rust-lang.org/std/primitive.i128.html#method.reverse_bits\n[`i16::reverse_bits`]: https://doc.rust-lang.org/std/primitive.i16.html#method.reverse_bits\n[`i32::reverse_bits`]: https://doc.rust-lang.org/std/primitive.i32.html#method.reverse_bits\n[`i64::reverse_bits`]: https://doc.rust-lang.org/std/primitive.i64.html#method.reverse_bits\n[`i8::reverse_bits`]: https://doc.rust-lang.org/std/primitive.i8.html#method.reverse_bits\n[`isize::reverse_bits`]: https://doc.rust-lang.org/std/primitive.isize.html#method.reverse_bits\n[`slice::copy_within`]: https://doc.rust-lang.org/std/primitive.slice.html#method.copy_within\n[`u128::reverse_bits`]: https://doc.rust-lang.org/std/primitive.u128.html#method.reverse_bits\n[`u16::reverse_bits`]: https://doc.rust-lang.org/std/primitive.u16.html#method.reverse_bits\n[`u32::reverse_bits`]: https://doc.rust-lang.org/std/primitive.u32.html#method.reverse_bits\n[`u64::reverse_bits`]: https://doc.rust-lang.org/std/primitive.u64.html#method.reverse_bits\n[`u8::reverse_bits`]: https://doc.rust-lang.org/std/primitive.u8.html#method.reverse_bits\n[`usize::reverse_bits`]: https://doc.rust-lang.org/std/primitive.usize.html#method.reverse_bits\n[rustc-book-pgo]: https://doc.rust-lang.org/rustc/profile-guided-optimization.html\n\n\nVersion 1.36.0 (2019-07-04)\n==========================\n\nLanguage\n--------\n- [Non-Lexical Lifetimes are now enabled on the 2015 edition.][59114]\n- [The order of traits in trait objects no longer affects the semantics of that\n  object.][59445] e.g. `dyn Send + fmt::Debug` is now equivalent to\n  `dyn fmt::Debug + Send`, where this was previously not the case.\n\nLibraries\n---------\n- [`HashMap`'s implementation has been replaced with `hashbrown::HashMap` implementation.][58623]\n- [`TryFromSliceError` now implements `From<Infallible>`.][60318]\n- [`mem::needs_drop` is now available as a const fn.][60364]\n- [`alloc::Layout::from_size_align_unchecked` is now available as a const fn.][60370]\n- [`String` now implements `BorrowMut<str>`.][60404]\n- [`io::Cursor` now implements `Default`.][60234]\n- [Both `NonNull::{dangling, cast}` are now const fns.][60244]\n- [The `alloc` crate is now stable.][59675] `alloc` allows you to use a subset\n  of `std` (e.g. `Vec`, `Box`, `Arc`) in `#![no_std]` environments if the\n  environment has access to heap memory allocation.\n- [`String` now implements `From<&String>`.][59825]\n- [You can now pass multiple arguments to the `dbg!` macro.][59826] `dbg!` will\n  return a tuple of each argument when there is multiple arguments.\n- [`Result::{is_err, is_ok}` are now `#[must_use]` and will produce a warning if\n  not used.][59648]\n\nStabilized APIs\n---------------\n- [`VecDeque::rotate_left`]\n- [`VecDeque::rotate_right`]\n- [`Iterator::copied`]\n- [`io::IoSlice`]\n- [`io::IoSliceMut`]\n- [`Read::read_vectored`]\n- [`Write::write_vectored`]\n- [`str::as_mut_ptr`]\n- [`mem::MaybeUninit`]\n- [`pointer::align_offset`]\n- [`future::Future`]\n- [`task::Context`]\n- [`task::RawWaker`]\n- [`task::RawWakerVTable`]\n- [`task::Waker`]\n- [`task::Poll`]\n\nCargo\n-----\n- [Cargo will now produce an error if you attempt to use the name of a required dependency as a feature.][cargo/6860]\n- [You can now pass the `--offline` flag to run cargo without accessing the network.][cargo/6934]\n\nYou can find further change's in [Cargo's 1.36.0 release notes][cargo-1-36-0].\n\nClippy\n------\nThere have been numerous additions and fixes to clippy, see [Clippy's 1.36.0 release notes][clippy-1-36-0] for more details.\n\nMisc\n----\n\nCompatibility Notes\n-------------------\n- With the stabilisation of `mem::MaybeUninit`, `mem::uninitialized` use is no\n  longer recommended, and will be deprecated in 1.39.0.\n\n[60318]: https://github.com/rust-lang/rust/pull/60318/\n[60364]: https://github.com/rust-lang/rust/pull/60364/\n[60370]: https://github.com/rust-lang/rust/pull/60370/\n[60404]: https://github.com/rust-lang/rust/pull/60404/\n[60234]: https://github.com/rust-lang/rust/pull/60234/\n[60244]: https://github.com/rust-lang/rust/pull/60244/\n[58623]: https://github.com/rust-lang/rust/pull/58623/\n[59648]: https://github.com/rust-lang/rust/pull/59648/\n[59675]: https://github.com/rust-lang/rust/pull/59675/\n[59825]: https://github.com/rust-lang/rust/pull/59825/\n[59826]: https://github.com/rust-lang/rust/pull/59826/\n[59445]: https://github.com/rust-lang/rust/pull/59445/\n[59114]: https://github.com/rust-lang/rust/pull/59114/\n[cargo/6860]: https://github.com/rust-lang/cargo/pull/6860/\n[cargo/6934]: https://github.com/rust-lang/cargo/pull/6934/\n[`VecDeque::rotate_left`]: https://doc.rust-lang.org/std/collections/struct.VecDeque.html#method.rotate_left\n[`VecDeque::rotate_right`]: https://doc.rust-lang.org/std/collections/struct.VecDeque.html#method.rotate_right\n[`Iterator::copied`]: https://doc.rust-lang.org/std/iter/trait.Iterator.html#tymethod.copied\n[`io::IoSlice`]: https://doc.rust-lang.org/std/io/struct.IoSlice.html\n[`io::IoSliceMut`]: https://doc.rust-lang.org/std/io/struct.IoSliceMut.html\n[`Read::read_vectored`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_vectored\n[`Write::write_vectored`]: https://doc.rust-lang.org/std/io/trait.Write.html#method.write_vectored\n[`str::as_mut_ptr`]: https://doc.rust-lang.org/std/primitive.str.html#method.as_mut_ptr\n[`mem::MaybeUninit`]: https://doc.rust-lang.org/std/mem/union.MaybeUninit.html\n[`pointer::align_offset`]: https://doc.rust-lang.org/std/primitive.pointer.html#method.align_offset\n[`future::Future`]: https://doc.rust-lang.org/std/future/trait.Future.html\n[`task::Context`]: https://doc.rust-lang.org/beta/std/task/struct.Context.html\n[`task::RawWaker`]: https://doc.rust-lang.org/beta/std/task/struct.RawWaker.html\n[`task::RawWakerVTable`]: https://doc.rust-lang.org/beta/std/task/struct.RawWakerVTable.html\n[`task::Waker`]: https://doc.rust-lang.org/beta/std/task/struct.Waker.html\n[`task::Poll`]: https://doc.rust-lang.org/beta/std/task/enum.Poll.html\n[clippy-1-36-0]: https://github.com/rust-lang/rust-clippy/blob/master/CHANGELOG.md#rust-136\n[cargo-1-36-0]: https://github.com/rust-lang/cargo/blob/master/CHANGELOG.md#cargo-136-2019-07-04\n\n\nVersion 1.35.0 (2019-05-23)\n==========================\n\nLanguage\n--------\n- [`FnOnce`, `FnMut`, and the `Fn` traits are now implemented for `Box<FnOnce>`,\n  `Box<FnMut>`, and `Box<Fn>` respectively.][59500]\n- [You can now coerce closures into unsafe function pointers.][59580] e.g.\n  ```rust\n  unsafe fn call_unsafe(func: unsafe fn()) {\n      func()\n  }\n\n  pub fn main() {\n      unsafe { call_unsafe(|| {}); }\n  }\n  ```\n\n\nCompiler\n--------\n- [Added the `armv6-unknown-freebsd-gnueabihf` and\n  `armv7-unknown-freebsd-gnueabihf` targets.][58080]\n- [Added the `wasm32-unknown-wasi` target.][59464]\n\n\nLibraries\n---------\n- [`Thread` will now show its ID in `Debug` output.][59460]\n- [`StdinLock`, `StdoutLock`, and `StderrLock` now implement `AsRawFd`.][59512]\n- [`alloc::System` now implements `Default`.][59451]\n- [Expanded `Debug` output (`{:#?}`) for structs now has a trailing comma on the\n  last field.][59076]\n- [`char::{ToLowercase, ToUppercase}` now\n  implement `ExactSizeIterator`.][58778]\n- [All `NonZero` numeric types now implement `FromStr`.][58717]\n- [Removed the `Read` trait bounds\n  on the `BufReader::{get_ref, get_mut, into_inner}` methods.][58423]\n- [You can now call the `dbg!` macro without any parameters to print the file\n  and line where it is called.][57847]\n- [In place ASCII case conversions are now up to 4× faster.][59283]\n  e.g. `str::make_ascii_lowercase`\n- [`hash_map::{OccupiedEntry, VacantEntry}` now implement `Sync`\n  and `Send`.][58369]\n\nStabilized APIs\n---------------\n- [`f32::copysign`]\n- [`f64::copysign`]\n- [`RefCell::replace_with`]\n- [`RefCell::map_split`]\n- [`ptr::hash`]\n- [`Range::contains`]\n- [`RangeFrom::contains`]\n- [`RangeTo::contains`]\n- [`RangeInclusive::contains`]\n- [`RangeToInclusive::contains`]\n- [`Option::copied`]\n\nCargo\n-----\n- [You can now set `cargo:rustc-cdylib-link-arg` at build time to pass custom\n  linker arguments when building a `cdylib`.][cargo/6298] Its usage is highly\n  platform specific.\n\nMisc\n----\n- [The Rust toolchain is now available natively for musl based distros.][58575]\n\n[59460]: https://github.com/rust-lang/rust/pull/59460/\n[59464]: https://github.com/rust-lang/rust/pull/59464/\n[59500]: https://github.com/rust-lang/rust/pull/59500/\n[59512]: https://github.com/rust-lang/rust/pull/59512/\n[59580]: https://github.com/rust-lang/rust/pull/59580/\n[59283]: https://github.com/rust-lang/rust/pull/59283/\n[59451]: https://github.com/rust-lang/rust/pull/59451/\n[59076]: https://github.com/rust-lang/rust/pull/59076/\n[58778]: https://github.com/rust-lang/rust/pull/58778/\n[58717]: https://github.com/rust-lang/rust/pull/58717/\n[58369]: https://github.com/rust-lang/rust/pull/58369/\n[58423]: https://github.com/rust-lang/rust/pull/58423/\n[58080]: https://github.com/rust-lang/rust/pull/58080/\n[57847]: https://github.com/rust-lang/rust/pull/57847/\n[58575]: https://github.com/rust-lang/rust/pull/58575\n[cargo/6298]: https://github.com/rust-lang/cargo/pull/6298/\n[`f32::copysign`]: https://doc.rust-lang.org/stable/std/primitive.f32.html#method.copysign\n[`f64::copysign`]: https://doc.rust-lang.org/stable/std/primitive.f64.html#method.copysign\n[`RefCell::replace_with`]: https://doc.rust-lang.org/stable/std/cell/struct.RefCell.html#method.replace_with\n[`RefCell::map_split`]: https://doc.rust-lang.org/stable/std/cell/struct.RefCell.html#method.map_split\n[`ptr::hash`]: https://doc.rust-lang.org/stable/std/ptr/fn.hash.html\n[`Range::contains`]: https://doc.rust-lang.org/std/ops/struct.Range.html#method.contains\n[`RangeFrom::contains`]: https://doc.rust-lang.org/std/ops/struct.RangeFrom.html#method.contains\n[`RangeTo::contains`]: https://doc.rust-lang.org/std/ops/struct.RangeTo.html#method.contains\n[`RangeInclusive::contains`]: https://doc.rust-lang.org/std/ops/struct.RangeInclusive.html#method.contains\n[`RangeToInclusive::contains`]: https://doc.rust-lang.org/std/ops/struct.RangeToInclusive.html#method.contains\n[`Option::copied`]: https://doc.rust-lang.org/std/option/enum.Option.html#method.copied\n\nVersion 1.34.2 (2019-05-14)\n===========================\n\n* [Destabilize the `Error::type_id` function due to a security\n   vulnerability][60785] ([CVE-2019-12083])\n\n[60785]: https://github.com/rust-lang/rust/pull/60785\n[CVE-2019-12083]: https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-12083\n\nVersion 1.34.1 (2019-04-25)\n===========================\n\n* [Fix false positives for the `redundant_closure` Clippy lint][clippy/3821]\n* [Fix false positives for the `missing_const_for_fn` Clippy lint][clippy/3844]\n* [Fix Clippy panic when checking some macros][clippy/3805]\n\n[clippy/3821]: https://github.com/rust-lang/rust-clippy/pull/3821\n[clippy/3844]: https://github.com/rust-lang/rust-clippy/pull/3844\n[clippy/3805]: https://github.com/rust-lang/rust-clippy/pull/3805\n\nVersion 1.34.0 (2019-04-11)\n==========================\n\nLanguage\n--------\n- [You can now use `#[deprecated = \"reason\"]`][58166] as a shorthand for\n  `#[deprecated(note = \"reason\")]`. This was previously allowed by mistake\n  but had no effect.\n- [You can now accept token streams in `#[attr()]`,`#[attr[]]`, and\n  `#[attr{}]` procedural macros.][57367]\n- [You can now write `extern crate self as foo;`][57407] to import your\n  crate's root into the extern prelude.\n\n\nCompiler\n--------\n- [You can now target `riscv64imac-unknown-none-elf` and\n  `riscv64gc-unknown-none-elf`.][58406]\n- [You can now enable linker plugin LTO optimisations with\n  `-C linker-plugin-lto`.][58057] This allows rustc to compile your Rust code\n  into LLVM bitcode allowing LLVM to perform LTO optimisations across C/C++ FFI\n  boundaries.\n- [You can now target `powerpc64-unknown-freebsd`.][57809]\n\n\nLibraries\n---------\n- [The trait bounds have been removed on some of `HashMap<K, V, S>`'s and\n  `HashSet<T, S>`'s basic methods.][58370] Most notably you no longer require\n  the `Hash` trait to create an iterator.\n- [The `Ord` trait bounds have been removed on some of `BinaryHeap<T>`'s basic\n  methods.][58421] Most notably you no longer require the `Ord` trait to create\n  an iterator.\n- [The methods `overflowing_neg` and `wrapping_neg` are now `const` functions\n  for all numeric types.][58044]\n- [Indexing a `str` is now generic over all types that\n  implement `SliceIndex<str>`.][57604]\n- [`str::trim`, `str::trim_matches`, `str::trim_{start, end}`, and\n  `str::trim_{start, end}_matches` are now `#[must_use]`][57106] and will\n  produce a warning if their returning type is unused.\n- [The methods `checked_pow`, `saturating_pow`, `wrapping_pow`, and\n  `overflowing_pow` are now available for all numeric types.][57873] These are\n  equivalent to methods such as `wrapping_add` for the `pow` operation.\n\n\nStabilized APIs\n---------------\n\n#### std & core\n* [`Any::type_id`]\n* [`Error::type_id`]\n* [`atomic::AtomicI16`]\n* [`atomic::AtomicI32`]\n* [`atomic::AtomicI64`]\n* [`atomic::AtomicI8`]\n* [`atomic::AtomicU16`]\n* [`atomic::AtomicU32`]\n* [`atomic::AtomicU64`]\n* [`atomic::AtomicU8`]\n* [`convert::Infallible`]\n* [`convert::TryFrom`]\n* [`convert::TryInto`]\n* [`iter::from_fn`]\n* [`iter::successors`]\n* [`num::NonZeroI128`]\n* [`num::NonZeroI16`]\n* [`num::NonZeroI32`]\n* [`num::NonZeroI64`]\n* [`num::NonZeroI8`]\n* [`num::NonZeroIsize`]\n* [`slice::sort_by_cached_key`]\n* [`str::escape_debug`]\n* [`str::escape_default`]\n* [`str::escape_unicode`]\n* [`str::split_ascii_whitespace`]\n\n#### std\n* [`Instant::checked_add`]\n* [`Instant::checked_sub`]\n* [`SystemTime::checked_add`]\n* [`SystemTime::checked_sub`]\n\nCargo\n-----\n- [You can now use alternative registries to crates.io.][cargo/6654]\n\nMisc\n----\n- [You can now use the `?` operator in your documentation tests without manually\n  adding `fn main() -> Result<(), _> {}`.][56470]\n\nCompatibility Notes\n-------------------\n- [`Command::before_exec` is being replaced by the unsafe method\n  `Command::pre_exec`][58059] and will be deprecated with Rust 1.37.0.\n- [Use of `ATOMIC_{BOOL, ISIZE, USIZE}_INIT` is now deprecated][57425] as you\n  can now use `const` functions in `static` variables.\n\n[58370]: https://github.com/rust-lang/rust/pull/58370/\n[58406]: https://github.com/rust-lang/rust/pull/58406/\n[58421]: https://github.com/rust-lang/rust/pull/58421/\n[58166]: https://github.com/rust-lang/rust/pull/58166/\n[58044]: https://github.com/rust-lang/rust/pull/58044/\n[58057]: https://github.com/rust-lang/rust/pull/58057/\n[58059]: https://github.com/rust-lang/rust/pull/58059/\n[57809]: https://github.com/rust-lang/rust/pull/57809/\n[57873]: https://github.com/rust-lang/rust/pull/57873/\n[57604]: https://github.com/rust-lang/rust/pull/57604/\n[57367]: https://github.com/rust-lang/rust/pull/57367/\n[57407]: https://github.com/rust-lang/rust/pull/57407/\n[57425]: https://github.com/rust-lang/rust/pull/57425/\n[57106]: https://github.com/rust-lang/rust/pull/57106/\n[56470]: https://github.com/rust-lang/rust/pull/56470/\n[cargo/6654]: https://github.com/rust-lang/cargo/pull/6654/\n[`Any::type_id`]: https://doc.rust-lang.org/std/any/trait.Any.html#tymethod.type_id\n[`Error::type_id`]: https://doc.rust-lang.org/std/error/trait.Error.html#method.type_id\n[`atomic::AtomicI16`]: https://doc.rust-lang.org/std/sync/atomic/struct.AtomicI16.html\n[`atomic::AtomicI32`]: https://doc.rust-lang.org/std/sync/atomic/struct.AtomicI32.html\n[`atomic::AtomicI64`]: https://doc.rust-lang.org/std/sync/atomic/struct.AtomicI64.html\n[`atomic::AtomicI8`]: https://doc.rust-lang.org/std/sync/atomic/struct.AtomicI8.html\n[`atomic::AtomicU16`]: https://doc.rust-lang.org/std/sync/atomic/struct.AtomicU16.html\n[`atomic::AtomicU32`]: https://doc.rust-lang.org/std/sync/atomic/struct.AtomicU32.html\n[`atomic::AtomicU64`]: https://doc.rust-lang.org/std/sync/atomic/struct.AtomicU64.html\n[`atomic::AtomicU8`]: https://doc.rust-lang.org/std/sync/atomic/struct.AtomicU8.html\n[`convert::Infallible`]: https://doc.rust-lang.org/std/convert/enum.Infallible.html\n[`convert::TryFrom`]: https://doc.rust-lang.org/std/convert/trait.TryFrom.html\n[`convert::TryInto`]: https://doc.rust-lang.org/std/convert/trait.TryInto.html\n[`iter::from_fn`]: https://doc.rust-lang.org/std/iter/fn.from_fn.html\n[`iter::successors`]: https://doc.rust-lang.org/std/iter/fn.successors.html\n[`num::NonZeroI128`]: https://doc.rust-lang.org/std/num/struct.NonZeroI128.html\n[`num::NonZeroI16`]: https://doc.rust-lang.org/std/num/struct.NonZeroI16.html\n[`num::NonZeroI32`]: https://doc.rust-lang.org/std/num/struct.NonZeroI32.html\n[`num::NonZeroI64`]: https://doc.rust-lang.org/std/num/struct.NonZeroI64.html\n[`num::NonZeroI8`]: https://doc.rust-lang.org/std/num/struct.NonZeroI8.html\n[`num::NonZeroIsize`]: https://doc.rust-lang.org/std/num/struct.NonZeroIsize.html\n[`slice::sort_by_cached_key`]: https://doc.rust-lang.org/std/primitive.slice.html#method.sort_by_cached_key\n[`str::escape_debug`]: https://doc.rust-lang.org/std/primitive.str.html#method.escape_debug\n[`str::escape_default`]: https://doc.rust-lang.org/std/primitive.str.html#method.escape_default\n[`str::escape_unicode`]: https://doc.rust-lang.org/std/primitive.str.html#method.escape_unicode\n[`str::split_ascii_whitespace`]: https://doc.rust-lang.org/std/primitive.str.html#method.split_ascii_whitespace\n[`Instant::checked_add`]: https://doc.rust-lang.org/std/time/struct.Instant.html#method.checked_add\n[`Instant::checked_sub`]: https://doc.rust-lang.org/std/time/struct.Instant.html#method.checked_sub\n[`SystemTime::checked_add`]: https://doc.rust-lang.org/std/time/struct.SystemTime.html#method.checked_add\n[`SystemTime::checked_sub`]: https://doc.rust-lang.org/std/time/struct.SystemTime.html#method.checked_sub\n\n\nVersion 1.33.0 (2019-02-28)\n==========================\n\nLanguage\n--------\n- [You can now use the `cfg(target_vendor)` attribute.][57465] E.g.\n  `#[cfg(target_vendor=\"apple\")] fn main() { println!(\"Hello Apple!\"); }`\n- [Integer patterns such as in a match expression can now be exhaustive.][56362]\n  E.g. You can have match statement on a `u8` that covers `0..=255` and\n  you would no longer be required to have a `_ => unreachable!()` case.\n- [You can now have multiple patterns in `if let` and `while let`\n  expressions.][57532] You can do this with the same syntax as a `match`\n  expression. E.g.\n  ```rust\n  enum Creature {\n      Crab(String),\n      Lobster(String),\n      Person(String),\n  }\n\n  fn main() {\n      let state = Creature::Crab(\"Ferris\");\n\n      if let Creature::Crab(name) | Creature::Person(name) = state {\n          println!(\"This creature's name is: {}\", name);\n      }\n  }\n  ```\n- [You can now have irrefutable `if let` and `while let` patterns.][57535] Using\n  this feature will by default produce a warning as this behaviour can be\n  unintuitive. E.g. `if let _ = 5 {}`\n- [You can now use `let` bindings, assignments, expression statements,\n  and irrefutable pattern destructuring in const functions.][57175]\n- [You can now call unsafe const functions.][57067] E.g.\n  ```rust\n  const unsafe fn foo() -> i32 { 5 }\n  const fn bar() -> i32 {\n      unsafe { foo() }\n  }\n  ```\n- [You can now specify multiple attributes in a `cfg_attr` attribute.][57332]\n  E.g. `#[cfg_attr(all(), must_use, optimize)]`\n- [You can now specify a specific alignment with the `#[repr(packed)]`\n  attribute.][57049] E.g. `#[repr(packed(2))] struct Foo(i16, i32);` is a struct\n  with an alignment of 2 bytes and a size of 6 bytes.\n- [You can now import an item from a module as an `_`.][56303] This allows you to\n  import a trait's impls, and not have the name in the namespace. E.g.\n  ```rust\n  use std::io::Read as _;\n\n  // Allowed as there is only one `Read` in the module.\n  pub trait Read {}\n  ```\n- [You may now use `Rc`, `Arc`, and `Pin` as method receivers][56805].\n\nCompiler\n--------\n- [You can now set a linker flavor for `rustc` with the `-Clinker-flavor`\n  command line argument.][56351]\n- [The minimum required LLVM version has been bumped to 6.0.][56642]\n- [Added support for the PowerPC64 architecture on FreeBSD.][57615]\n- [The `x86_64-fortanix-unknown-sgx` target support has been upgraded to\n  tier 2 support.][57130] Visit the [platform support][platform-support] page for\n  information on Rust's platform support.\n- [Added support for the `thumbv7neon-linux-androideabi` and\n  `thumbv7neon-unknown-linux-gnueabihf` targets.][56947]\n- [Added support for the `x86_64-unknown-uefi` target.][56769]\n\nLibraries\n---------\n- [The methods `overflowing_{add, sub, mul, shl, shr}` are now `const`\n  functions for all numeric types.][57566]\n- [The methods `rotate_left`, `rotate_right`, and `wrapping_{add, sub, mul, shl, shr}`\n  are now `const` functions for all numeric types.][57105]\n- [The methods `is_positive` and `is_negative` are now `const` functions for\n  all signed numeric types.][57105]\n- [The `get` method for all `NonZero` types is now `const`.][57167]\n- [The methods `count_ones`, `count_zeros`, `leading_zeros`, `trailing_zeros`,\n  `swap_bytes`, `from_be`, `from_le`, `to_be`, `to_le` are now `const` for all\n  numeric types.][57234]\n- [`Ipv4Addr::new` is now a `const` function][57234]\n\nStabilized APIs\n---------------\n- [`unix::FileExt::read_exact_at`]\n- [`unix::FileExt::write_all_at`]\n- [`Option::transpose`]\n- [`Result::transpose`]\n- [`convert::identity`]\n- [`pin::Pin`]\n- [`marker::Unpin`]\n- [`marker::PhantomPinned`]\n- [`Vec::resize_with`]\n- [`VecDeque::resize_with`]\n- [`Duration::as_millis`]\n- [`Duration::as_micros`]\n- [`Duration::as_nanos`]\n\n\nCargo\n-----\n- [You can now publish crates that require a feature flag to compile with\n  `cargo publish --features` or `cargo publish --all-features`.][cargo/6453]\n- [Cargo should now rebuild a crate if a file was modified during the initial\n  build.][cargo/6484]\n\nCompatibility Notes\n-------------------\n- The methods `str::{trim_left, trim_right, trim_left_matches, trim_right_matches}`\n  are now deprecated in the standard library, and their usage will now produce a warning.\n  Please use the `str::{trim_start, trim_end, trim_start_matches, trim_end_matches}`\n  methods instead.\n- The `Error::cause` method has been deprecated in favor of `Error::source` which supports\n  downcasting.\n- [Libtest no longer creates a new thread for each test when\n  `--test-threads=1`.  It also runs the tests in deterministic order][56243]\n\n[56243]: https://github.com/rust-lang/rust/pull/56243\n[56303]: https://github.com/rust-lang/rust/pull/56303/\n[56351]: https://github.com/rust-lang/rust/pull/56351/\n[56362]: https://github.com/rust-lang/rust/pull/56362\n[56642]: https://github.com/rust-lang/rust/pull/56642/\n[56769]: https://github.com/rust-lang/rust/pull/56769/\n[56805]: https://github.com/rust-lang/rust/pull/56805\n[56947]: https://github.com/rust-lang/rust/pull/56947/\n[57049]: https://github.com/rust-lang/rust/pull/57049/\n[57067]: https://github.com/rust-lang/rust/pull/57067/\n[57105]: https://github.com/rust-lang/rust/pull/57105\n[57130]: https://github.com/rust-lang/rust/pull/57130/\n[57167]: https://github.com/rust-lang/rust/pull/57167/\n[57175]: https://github.com/rust-lang/rust/pull/57175/\n[57234]: https://github.com/rust-lang/rust/pull/57234/\n[57332]: https://github.com/rust-lang/rust/pull/57332/\n[57465]: https://github.com/rust-lang/rust/pull/57465/\n[57532]: https://github.com/rust-lang/rust/pull/57532/\n[57535]: https://github.com/rust-lang/rust/pull/57535/\n[57566]: https://github.com/rust-lang/rust/pull/57566/\n[57615]: https://github.com/rust-lang/rust/pull/57615/\n[cargo/6453]: https://github.com/rust-lang/cargo/pull/6453/\n[cargo/6484]: https://github.com/rust-lang/cargo/pull/6484/\n[`unix::FileExt::read_exact_at`]: https://doc.rust-lang.org/std/os/unix/fs/trait.FileExt.html#method.read_exact_at\n[`unix::FileExt::write_all_at`]: https://doc.rust-lang.org/std/os/unix/fs/trait.FileExt.html#method.write_all_at\n[`Option::transpose`]: https://doc.rust-lang.org/std/option/enum.Option.html#method.transpose\n[`Result::transpose`]: https://doc.rust-lang.org/std/result/enum.Result.html#method.transpose\n[`convert::identity`]: https://doc.rust-lang.org/std/convert/fn.identity.html\n[`pin::Pin`]: https://doc.rust-lang.org/std/pin/struct.Pin.html\n[`marker::Unpin`]: https://doc.rust-lang.org/stable/std/marker/trait.Unpin.html\n[`marker::PhantomPinned`]: https://doc.rust-lang.org/nightly/std/marker/struct.PhantomPinned.html\n[`Vec::resize_with`]: https://doc.rust-lang.org/std/vec/struct.Vec.html#method.resize_with\n[`VecDeque::resize_with`]: https://doc.rust-lang.org/std/collections/struct.VecDeque.html#method.resize_with\n[`Duration::as_millis`]: https://doc.rust-lang.org/std/time/struct.Duration.html#method.as_millis\n[`Duration::as_micros`]: https://doc.rust-lang.org/std/time/struct.Duration.html#method.as_micros\n[`Duration::as_nanos`]: https://doc.rust-lang.org/std/time/struct.Duration.html#method.as_nanos\n[platform-support]: https://forge.rust-lang.org/platform-support.html\n\nVersion 1.32.0 (2019-01-17)\n==========================\n\nLanguage\n--------\n#### 2018 edition\n- [You can now use the `?` operator in macro definitions.][56245] The `?`\n  operator allows you to specify zero or one repetitions similar to the `*` and\n  `+` operators.\n- [Module paths with no leading keyword like `super`, `self`, or `crate`, will\n  now always resolve to the item (`enum`, `struct`, etc.) available in the\n  module if present, before resolving to a external crate or an item the prelude.][56759]\n  E.g.\n  ```rust\n  enum Color { Red, Green, Blue }\n\n  use Color::*;\n  ```\n\n#### All editions\n- [You can now match against `PhantomData<T>` types.][55837]\n- [You can now match against literals in macros with the `literal`\n  specifier.][56072] This will match against a literal of any type.\n  E.g. `1`, `'A'`, `\"Hello World\"`\n- [Self can now be used as a constructor and pattern for unit and tuple structs.][56365] E.g.\n  ```rust\n  struct Point(i32, i32);\n\n  impl Point {\n      pub fn new(x: i32, y: i32) -> Self {\n          Self(x, y)\n      }\n\n      pub fn is_origin(&self) -> bool {\n          match self {\n              Self(0, 0) => true,\n              _ => false,\n          }\n      }\n  }\n  ```\n- [Self can also now be used in type definitions.][56366] E.g.\n  ```rust\n  enum List<T>\n  where\n      Self: PartialOrd<Self> // can write `Self` instead of `List<T>`\n  {\n      Nil,\n      Cons(T, Box<Self>) // likewise here\n  }\n  ```\n- [You can now mark traits with `#[must_use]`.][55663] This provides a warning if\n  a `impl Trait` or `dyn Trait` is returned and unused in the program.\n\nCompiler\n--------\n- [The default allocator has changed from jemalloc to the default allocator on\n  your system.][55238] The compiler itself on Linux & macOS will still use\n  jemalloc, but programs compiled with it will use the system allocator.\n- [Added the `aarch64-pc-windows-msvc` target.][55702]\n\nLibraries\n---------\n- [`PathBuf` now implements `FromStr`.][55148]\n- [`Box<[T]>` now implements `FromIterator<T>`.][55843]\n- [The `dbg!` macro has been stabilized.][56395] This macro enables you to\n  easily debug expressions in your rust program. E.g.\n  ```rust\n  let a = 2;\n  let b = dbg!(a * 2) + 1;\n  //      ^-- prints: [src/main.rs:4] a * 2 = 4\n  assert_eq!(b, 5);\n  ```\n\nThe following APIs are now `const` functions and can be used in a\n`const` context.\n\n- [`Cell::as_ptr`]\n- [`UnsafeCell::get`]\n- [`char::is_ascii`]\n- [`iter::empty`]\n- [`ManuallyDrop::new`]\n- [`ManuallyDrop::into_inner`]\n- [`RangeInclusive::start`]\n- [`RangeInclusive::end`]\n- [`NonNull::as_ptr`]\n- [`slice::as_ptr`]\n- [`str::as_ptr`]\n- [`Duration::as_secs`]\n- [`Duration::subsec_millis`]\n- [`Duration::subsec_micros`]\n- [`Duration::subsec_nanos`]\n- [`CStr::as_ptr`]\n- [`Ipv4Addr::is_unspecified`]\n- [`Ipv6Addr::new`]\n- [`Ipv6Addr::octets`]\n\nStabilized APIs\n---------------\n- [`i8::to_be_bytes`]\n- [`i8::to_le_bytes`]\n- [`i8::to_ne_bytes`]\n- [`i8::from_be_bytes`]\n- [`i8::from_le_bytes`]\n- [`i8::from_ne_bytes`]\n- [`i16::to_be_bytes`]\n- [`i16::to_le_bytes`]\n- [`i16::to_ne_bytes`]\n- [`i16::from_be_bytes`]\n- [`i16::from_le_bytes`]\n- [`i16::from_ne_bytes`]\n- [`i32::to_be_bytes`]\n- [`i32::to_le_bytes`]\n- [`i32::to_ne_bytes`]\n- [`i32::from_be_bytes`]\n- [`i32::from_le_bytes`]\n- [`i32::from_ne_bytes`]\n- [`i64::to_be_bytes`]\n- [`i64::to_le_bytes`]\n- [`i64::to_ne_bytes`]\n- [`i64::from_be_bytes`]\n- [`i64::from_le_bytes`]\n- [`i64::from_ne_bytes`]\n- [`i128::to_be_bytes`]\n- [`i128::to_le_bytes`]\n- [`i128::to_ne_bytes`]\n- [`i128::from_be_bytes`]\n- [`i128::from_le_bytes`]\n- [`i128::from_ne_bytes`]\n- [`isize::to_be_bytes`]\n- [`isize::to_le_bytes`]\n- [`isize::to_ne_bytes`]\n- [`isize::from_be_bytes`]\n- [`isize::from_le_bytes`]\n- [`isize::from_ne_bytes`]\n- [`u8::to_be_bytes`]\n- [`u8::to_le_bytes`]\n- [`u8::to_ne_bytes`]\n- [`u8::from_be_bytes`]\n- [`u8::from_le_bytes`]\n- [`u8::from_ne_bytes`]\n- [`u16::to_be_bytes`]\n- [`u16::to_le_bytes`]\n- [`u16::to_ne_bytes`]\n- [`u16::from_be_bytes`]\n- [`u16::from_le_bytes`]\n- [`u16::from_ne_bytes`]\n- [`u32::to_be_bytes`]\n- [`u32::to_le_bytes`]\n- [`u32::to_ne_bytes`]\n- [`u32::from_be_bytes`]\n- [`u32::from_le_bytes`]\n- [`u32::from_ne_bytes`]\n- [`u64::to_be_bytes`]\n- [`u64::to_le_bytes`]\n- [`u64::to_ne_bytes`]\n- [`u64::from_be_bytes`]\n- [`u64::from_le_bytes`]\n- [`u64::from_ne_bytes`]\n- [`u128::to_be_bytes`]\n- [`u128::to_le_bytes`]\n- [`u128::to_ne_bytes`]\n- [`u128::from_be_bytes`]\n- [`u128::from_le_bytes`]\n- [`u128::from_ne_bytes`]\n- [`usize::to_be_bytes`]\n- [`usize::to_le_bytes`]\n- [`usize::to_ne_bytes`]\n- [`usize::from_be_bytes`]\n- [`usize::from_le_bytes`]\n- [`usize::from_ne_bytes`]\n\nCargo\n-----\n- [You can now run `cargo c` as an alias for `cargo check`.][cargo/6218]\n- [Usernames are now allowed in alt registry URLs.][cargo/6242]\n\nMisc\n----\n- [`libproc_macro` has been added to the `rust-src` distribution.][55280]\n\nCompatibility Notes\n-------------------\n- [The argument types for AVX's\n  `_mm256_stream_si256`, `_mm256_stream_pd`, `_mm256_stream_ps`][55610] have\n  been changed from `*const` to `*mut` as the previous implementation\n  was unsound.\n\n\n[55148]: https://github.com/rust-lang/rust/pull/55148/\n[55238]: https://github.com/rust-lang/rust/pull/55238/\n[55280]: https://github.com/rust-lang/rust/pull/55280/\n[55610]: https://github.com/rust-lang/rust/pull/55610/\n[55663]: https://github.com/rust-lang/rust/pull/55663/\n[55702]: https://github.com/rust-lang/rust/pull/55702/\n[55837]: https://github.com/rust-lang/rust/pull/55837/\n[55843]: https://github.com/rust-lang/rust/pull/55843/\n[56072]: https://github.com/rust-lang/rust/pull/56072/\n[56245]: https://github.com/rust-lang/rust/pull/56245/\n[56365]: https://github.com/rust-lang/rust/pull/56365/\n[56366]: https://github.com/rust-lang/rust/pull/56366/\n[56395]: https://github.com/rust-lang/rust/pull/56395/\n[56759]: https://github.com/rust-lang/rust/pull/56759/\n[cargo/6218]: https://github.com/rust-lang/cargo/pull/6218/\n[cargo/6242]: https://github.com/rust-lang/cargo/pull/6242/\n[`CStr::as_ptr`]: https://doc.rust-lang.org/std/ffi/struct.CStr.html#method.as_ptr\n[`Cell::as_ptr`]: https://doc.rust-lang.org/std/cell/struct.Cell.html#method.as_ptr\n[`Duration::as_secs`]: https://doc.rust-lang.org/std/time/struct.Duration.html#method.as_secs\n[`Duration::subsec_micros`]: https://doc.rust-lang.org/std/time/struct.Duration.html#method.subsec_micros\n[`Duration::subsec_millis`]: https://doc.rust-lang.org/std/time/struct.Duration.html#method.subsec_millis\n[`Duration::subsec_nanos`]: https://doc.rust-lang.org/std/time/struct.Duration.html#method.subsec_nanos\n[`Ipv4Addr::is_unspecified`]: https://doc.rust-lang.org/std/net/struct.Ipv4Addr.html#method.is_unspecified\n[`Ipv6Addr::new`]: https://doc.rust-lang.org/std/net/struct.Ipv6Addr.html#method.new\n[`Ipv6Addr::octets`]: https://doc.rust-lang.org/std/net/struct.Ipv6Addr.html#method.octets\n[`ManuallyDrop::into_inner`]: https://doc.rust-lang.org/std/mem/struct.ManuallyDrop.html#method.into_inner\n[`ManuallyDrop::new`]: https://doc.rust-lang.org/std/mem/struct.ManuallyDrop.html#method.new\n[`NonNull::as_ptr`]: https://doc.rust-lang.org/std/ptr/struct.NonNull.html#method.as_ptr\n[`RangeInclusive::end`]: https://doc.rust-lang.org/std/ops/struct.RangeInclusive.html#method.end\n[`RangeInclusive::start`]: https://doc.rust-lang.org/std/ops/struct.RangeInclusive.html#method.start\n[`UnsafeCell::get`]: https://doc.rust-lang.org/std/cell/struct.UnsafeCell.html#method.get\n[`slice::as_ptr`]: https://doc.rust-lang.org/std/primitive.slice.html#method.as_ptr\n[`char::is_ascii`]: https://doc.rust-lang.org/std/primitive.char.html#method.is_ascii\n[`i128::from_be_bytes`]: https://doc.rust-lang.org/stable/std/primitive.i128.html#method.from_be_bytes\n[`i128::from_le_bytes`]: https://doc.rust-lang.org/stable/std/primitive.i128.html#method.from_le_bytes\n[`i128::from_ne_bytes`]: https://doc.rust-lang.org/stable/std/primitive.i128.html#method.from_ne_bytes\n[`i128::to_be_bytes`]: https://doc.rust-lang.org/stable/std/primitive.i128.html#method.to_be_bytes\n[`i128::to_le_bytes`]: https://doc.rust-lang.org/stable/std/primitive.i128.html#method.to_le_bytes\n[`i128::to_ne_bytes`]: https://doc.rust-lang.org/stable/std/primitive.i128.html#method.to_ne_bytes\n[`i16::from_be_bytes`]: https://doc.rust-lang.org/stable/std/primitive.i16.html#method.from_be_bytes\n[`i16::from_le_bytes`]: https://doc.rust-lang.org/stable/std/primitive.i16.html#method.from_le_bytes\n[`i16::from_ne_bytes`]: https://doc.rust-lang.org/stable/std/primitive.i16.html#method.from_ne_bytes\n[`i16::to_be_bytes`]: https://doc.rust-lang.org/stable/std/primitive.i16.html#method.to_be_bytes\n[`i16::to_le_bytes`]: https://doc.rust-lang.org/stable/std/primitive.i16.html#method.to_le_bytes\n[`i16::to_ne_bytes`]: https://doc.rust-lang.org/stable/std/primitive.i16.html#method.to_ne_bytes\n[`i32::from_be_bytes`]: https://doc.rust-lang.org/stable/std/primitive.i32.html#method.from_be_bytes\n[`i32::from_le_bytes`]: https://doc.rust-lang.org/stable/std/primitive.i32.html#method.from_le_bytes\n[`i32::from_ne_bytes`]: https://doc.rust-lang.org/stable/std/primitive.i32.html#method.from_ne_bytes\n[`i32::to_be_bytes`]: https://doc.rust-lang.org/stable/std/primitive.i32.html#method.to_be_bytes\n[`i32::to_le_bytes`]: https://doc.rust-lang.org/stable/std/primitive.i32.html#method.to_le_bytes\n[`i32::to_ne_bytes`]: https://doc.rust-lang.org/stable/std/primitive.i32.html#method.to_ne_bytes\n[`i64::from_be_bytes`]: https://doc.rust-lang.org/stable/std/primitive.i64.html#method.from_be_bytes\n[`i64::from_le_bytes`]: https://doc.rust-lang.org/stable/std/primitive.i64.html#method.from_le_bytes\n[`i64::from_ne_bytes`]: https://doc.rust-lang.org/stable/std/primitive.i64.html#method.from_ne_bytes\n[`i64::to_be_bytes`]: https://doc.rust-lang.org/stable/std/primitive.i64.html#method.to_be_bytes\n[`i64::to_le_bytes`]: https://doc.rust-lang.org/stable/std/primitive.i64.html#method.to_le_bytes\n[`i64::to_ne_bytes`]: https://doc.rust-lang.org/stable/std/primitive.i64.html#method.to_ne_bytes\n[`i8::from_be_bytes`]: https://doc.rust-lang.org/stable/std/primitive.i8.html#method.from_be_bytes\n[`i8::from_le_bytes`]: https://doc.rust-lang.org/stable/std/primitive.i8.html#method.from_le_bytes\n[`i8::from_ne_bytes`]: https://doc.rust-lang.org/stable/std/primitive.i8.html#method.from_ne_bytes\n[`i8::to_be_bytes`]: https://doc.rust-lang.org/stable/std/primitive.i8.html#method.to_be_bytes\n[`i8::to_le_bytes`]: https://doc.rust-lang.org/stable/std/primitive.i8.html#method.to_le_bytes\n[`i8::to_ne_bytes`]: https://doc.rust-lang.org/stable/std/primitive.i8.html#method.to_ne_bytes\n[`isize::from_be_bytes`]: https://doc.rust-lang.org/stable/std/primitive.isize.html#method.from_be_bytes\n[`isize::from_le_bytes`]: https://doc.rust-lang.org/stable/std/primitive.isize.html#method.from_le_bytes\n[`isize::from_ne_bytes`]: https://doc.rust-lang.org/stable/std/primitive.isize.html#method.from_ne_bytes\n[`isize::to_be_bytes`]: https://doc.rust-lang.org/stable/std/primitive.isize.html#method.to_be_bytes\n[`isize::to_le_bytes`]: https://doc.rust-lang.org/stable/std/primitive.isize.html#method.to_le_bytes\n[`isize::to_ne_bytes`]: https://doc.rust-lang.org/stable/std/primitive.isize.html#method.to_ne_bytes\n[`iter::empty`]: https://doc.rust-lang.org/std/iter/fn.empty.html\n[`str::as_ptr`]: https://doc.rust-lang.org/std/primitive.str.html#method.as_ptr\n[`u128::from_be_bytes`]: https://doc.rust-lang.org/stable/std/primitive.u128.html#method.from_be_bytes\n[`u128::from_le_bytes`]: https://doc.rust-lang.org/stable/std/primitive.u128.html#method.from_le_bytes\n[`u128::from_ne_bytes`]: https://doc.rust-lang.org/stable/std/primitive.u128.html#method.from_ne_bytes\n[`u128::to_be_bytes`]: https://doc.rust-lang.org/stable/std/primitive.u128.html#method.to_be_bytes\n[`u128::to_le_bytes`]: https://doc.rust-lang.org/stable/std/primitive.u128.html#method.to_le_bytes\n[`u128::to_ne_bytes`]: https://doc.rust-lang.org/stable/std/primitive.u128.html#method.to_ne_bytes\n[`u16::from_be_bytes`]: https://doc.rust-lang.org/stable/std/primitive.u16.html#method.from_be_bytes\n[`u16::from_le_bytes`]: https://doc.rust-lang.org/stable/std/primitive.u16.html#method.from_le_bytes\n[`u16::from_ne_bytes`]: https://doc.rust-lang.org/stable/std/primitive.u16.html#method.from_ne_bytes\n[`u16::to_be_bytes`]: https://doc.rust-lang.org/stable/std/primitive.u16.html#method.to_be_bytes\n[`u16::to_le_bytes`]: https://doc.rust-lang.org/stable/std/primitive.u16.html#method.to_le_bytes\n[`u16::to_ne_bytes`]: https://doc.rust-lang.org/stable/std/primitive.u16.html#method.to_ne_bytes\n[`u32::from_be_bytes`]: https://doc.rust-lang.org/stable/std/primitive.u32.html#method.from_be_bytes\n[`u32::from_le_bytes`]: https://doc.rust-lang.org/stable/std/primitive.u32.html#method.from_le_bytes\n[`u32::from_ne_bytes`]: https://doc.rust-lang.org/stable/std/primitive.u32.html#method.from_ne_bytes\n[`u32::to_be_bytes`]: https://doc.rust-lang.org/stable/std/primitive.u32.html#method.to_be_bytes\n[`u32::to_le_bytes`]: https://doc.rust-lang.org/stable/std/primitive.u32.html#method.to_le_bytes\n[`u32::to_ne_bytes`]: https://doc.rust-lang.org/stable/std/primitive.u32.html#method.to_ne_bytes\n[`u64::from_be_bytes`]: https://doc.rust-lang.org/stable/std/primitive.u64.html#method.from_be_bytes\n[`u64::from_le_bytes`]: https://doc.rust-lang.org/stable/std/primitive.u64.html#method.from_le_bytes\n[`u64::from_ne_bytes`]: https://doc.rust-lang.org/stable/std/primitive.u64.html#method.from_ne_bytes\n[`u64::to_be_bytes`]: https://doc.rust-lang.org/stable/std/primitive.u64.html#method.to_be_bytes\n[`u64::to_le_bytes`]: https://doc.rust-lang.org/stable/std/primitive.u64.html#method.to_le_bytes\n[`u64::to_ne_bytes`]: https://doc.rust-lang.org/stable/std/primitive.u64.html#method.to_ne_bytes\n[`u8::from_be_bytes`]: https://doc.rust-lang.org/stable/std/primitive.u8.html#method.from_be_bytes\n[`u8::from_le_bytes`]: https://doc.rust-lang.org/stable/std/primitive.u8.html#method.from_le_bytes\n[`u8::from_ne_bytes`]: https://doc.rust-lang.org/stable/std/primitive.u8.html#method.from_ne_bytes\n[`u8::to_be_bytes`]: https://doc.rust-lang.org/stable/std/primitive.u8.html#method.to_be_bytes\n[`u8::to_le_bytes`]: https://doc.rust-lang.org/stable/std/primitive.u8.html#method.to_le_bytes\n[`u8::to_ne_bytes`]: https://doc.rust-lang.org/stable/std/primitive.u8.html#method.to_ne_bytes\n[`usize::from_be_bytes`]: https://doc.rust-lang.org/stable/std/primitive.usize.html#method.from_be_bytes\n[`usize::from_le_bytes`]: https://doc.rust-lang.org/stable/std/primitive.usize.html#method.from_le_bytes\n[`usize::from_ne_bytes`]: https://doc.rust-lang.org/stable/std/primitive.usize.html#method.from_ne_bytes\n[`usize::to_be_bytes`]: https://doc.rust-lang.org/stable/std/primitive.usize.html#method.to_be_bytes\n[`usize::to_le_bytes`]: https://doc.rust-lang.org/stable/std/primitive.usize.html#method.to_le_bytes\n[`usize::to_ne_bytes`]: https://doc.rust-lang.org/stable/std/primitive.usize.html#method.to_ne_bytes\n\n\nVersion 1.31.1 (2018-12-20)\n===========================\n\n- [Fix Rust failing to build on `powerpc-unknown-netbsd`][56562]\n- [Fix broken go-to-definition in RLS][rls/1171]\n- [Fix infinite loop on hover in RLS][rls/1170]\n\n[56562]: https://github.com/rust-lang/rust/pull/56562\n[rls/1171]: https://github.com/rust-lang/rls/issues/1171\n[rls/1170]: https://github.com/rust-lang/rls/pull/1170\n\nVersion 1.31.0 (2018-12-06)\n==========================\n\nLanguage\n--------\n- 🎉 [This version marks the release of the 2018 edition of Rust.][54057] 🎉\n- [New lifetime elision rules now allow for eliding lifetimes in functions and\n  impl headers.][54778] E.g. `impl<'a> Reader for BufReader<'a> {}` can now be\n  `impl Reader for BufReader<'_> {}`. Lifetimes are still required to be defined\n  in structs.\n- [You can now define and use `const` functions.][54835] These are currently\n  a strict minimal subset of the [const fn RFC][RFC-911]. Refer to the\n  [language reference][const-reference] for what exactly is available.\n- [You can now use tool lints, which allow you to scope lints from external\n  tools using attributes.][54870] E.g. `#[allow(clippy::filter_map)]`.\n- [`#[no_mangle]` and `#[export_name]` attributes can now be located anywhere in\n  a crate, not just in exported functions.][54451]\n- [You can now use parentheses in pattern matches.][54497]\n\nCompiler\n--------\n- [Updated musl to 1.1.20][54430]\n\nLibraries\n---------\n- [You can now convert `num::NonZero*` types to their raw equivalents using the\n  `From` trait.][54240] E.g. `u8` now implements `From<NonZeroU8>`.\n- [You can now convert a `&Option<T>` into `Option<&T>` and `&mut Option<T>`\n  into `Option<&mut T>` using the `From` trait.][53218]\n- [You can now multiply (`*`) a `time::Duration` by a `u32`.][52813]\n\n\nStabilized APIs\n---------------\n- [`slice::align_to`]\n- [`slice::align_to_mut`]\n- [`slice::chunks_exact`]\n- [`slice::chunks_exact_mut`]\n- [`slice::rchunks`]\n- [`slice::rchunks_mut`]\n- [`slice::rchunks_exact`]\n- [`slice::rchunks_exact_mut`]\n- [`Option::replace`]\n\nCargo\n-----\n- [Cargo will now download crates in parallel using HTTP/2.][cargo/6005]\n- [You can now rename packages in your Cargo.toml][cargo/6319] We have a guide\n  on [how to use the `package` key in your dependencies.][cargo-rename-reference]\n\n[52813]: https://github.com/rust-lang/rust/pull/52813/\n[53218]: https://github.com/rust-lang/rust/pull/53218/\n[54057]: https://github.com/rust-lang/rust/pull/54057/\n[54240]: https://github.com/rust-lang/rust/pull/54240/\n[54430]: https://github.com/rust-lang/rust/pull/54430/\n[54451]: https://github.com/rust-lang/rust/pull/54451/\n[54497]: https://github.com/rust-lang/rust/pull/54497/\n[54778]: https://github.com/rust-lang/rust/pull/54778/\n[54835]: https://github.com/rust-lang/rust/pull/54835/\n[54870]: https://github.com/rust-lang/rust/pull/54870/\n[RFC-911]: https://github.com/rust-lang/rfcs/pull/911\n[`Option::replace`]: https://doc.rust-lang.org/std/option/enum.Option.html#method.replace\n[`slice::align_to_mut`]: https://doc.rust-lang.org/std/primitive.slice.html#method.align_to_mut\n[`slice::align_to`]: https://doc.rust-lang.org/std/primitive.slice.html#method.align_to\n[`slice::chunks_exact_mut`]: https://doc.rust-lang.org/std/primitive.slice.html#method.chunks_exact_mut\n[`slice::chunks_exact`]: https://doc.rust-lang.org/std/primitive.slice.html#method.chunks_exact\n[`slice::rchunks_exact_mut`]: https://doc.rust-lang.org/std/primitive.slice.html#method.rchunks_mut\n[`slice::rchunks_exact`]: https://doc.rust-lang.org/std/primitive.slice.html#method.rchunks_exact\n[`slice::rchunks_mut`]: https://doc.rust-lang.org/std/primitive.slice.html#method.rchunks_mut\n[`slice::rchunks`]: https://doc.rust-lang.org/std/primitive.slice.html#method.rchunks\n[cargo/6005]: https://github.com/rust-lang/cargo/pull/6005/\n[cargo/6319]: https://github.com/rust-lang/cargo/pull/6319/\n[cargo-rename-reference]: https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#renaming-dependencies-in-cargotoml\n[const-reference]: https://doc.rust-lang.org/reference/items/functions.html#const-functions\n\nVersion 1.30.1 (2018-11-08)\n===========================\n\n- [Fixed overflow ICE in rustdoc][54199]\n- [Cap Cargo progress bar width at 60 in MSYS terminals][cargo/6122]\n\n[54199]: https://github.com/rust-lang/rust/pull/54199\n[cargo/6122]: https://github.com/rust-lang/cargo/pull/6122\n\nVersion 1.30.0 (2018-10-25)\n==========================\n\nLanguage\n--------\n- [Procedural macros are now available.][52081] These kinds of macros allow for\n  more powerful code generation. There is a [new chapter available][proc-macros]\n  in the Rust Programming Language book that goes further in depth.\n- [You can now use keywords as identifiers using the raw identifiers\n  syntax (`r#`),][53236] e.g. `let r#for = true;`\n- [Using anonymous parameters in traits is now deprecated with a warning and\n  will be a hard error in the 2018 edition.][53272]\n- [You can now use `crate` in paths.][54404] This allows you to refer to the\n  crate root in the path, e.g. `use crate::foo;` refers to `foo` in `src/lib.rs`.\n- [Using a external crate no longer requires being prefixed with `::`.][54404]\n  Previously, using a external crate in a module without a use statement\n  required `let json = ::serde_json::from_str(foo);` but can now be written\n  as `let json = serde_json::from_str(foo);`.\n- [You can now apply the `#[used]` attribute to static items to prevent the\n  compiler from optimising them away, even if they appear to be unused,][51363]\n  e.g. `#[used] static FOO: u32 = 1;`\n- [You can now import and reexport macros from other crates with the `use`\n  syntax.][50911] Macros exported with `#[macro_export]` are now placed into\n  the root module of the crate. If your macro relies on calling other local\n  macros, it is recommended to export with the\n  `#[macro_export(local_inner_macros)]` attribute so users won't have to import\n  those macros.\n- [You can now catch visibility keywords (e.g. `pub`, `pub(crate)`) in macros\n  using the `vis` specifier.][53370]\n- [Non-macro attributes now allow all forms of literals, not just\n  strings.][53044] Previously, you would write `#[attr(\"true\")]`, and you can now\n  write `#[attr(true)]`.\n- [You can now specify a function to handle a panic in the Rust runtime with the\n  `#[panic_handler]` attribute.][51366]\n\nCompiler\n--------\n- [Added the `riscv32imc-unknown-none-elf` target.][53822]\n- [Added the `aarch64-unknown-netbsd` target][53165]\n- [Upgraded to LLVM 8.][53611]\n\nLibraries\n---------\n- [`ManuallyDrop` now allows the inner type to be unsized.][53033]\n\nStabilized APIs\n---------------\n- [`Ipv4Addr::BROADCAST`]\n- [`Ipv4Addr::LOCALHOST`]\n- [`Ipv4Addr::UNSPECIFIED`]\n- [`Ipv6Addr::LOCALHOST`]\n- [`Ipv6Addr::UNSPECIFIED`]\n- [`Iterator::find_map`]\n\n  The following methods are replacement methods for `trim_left`, `trim_right`,\n  `trim_left_matches`, and `trim_right_matches`, which will be deprecated\n  in 1.33.0:\n- [`str::trim_end_matches`]\n- [`str::trim_end`]\n- [`str::trim_start_matches`]\n- [`str::trim_start`]\n\nCargo\n----\n- [`cargo run` doesn't require specifying a package in workspaces.][cargo/5877]\n- [`cargo doc` now supports `--message-format=json`.][cargo/5878] This is\n  equivalent to calling `rustdoc --error-format=json`.\n- [Cargo will now provide a progress bar for builds.][cargo/5995]\n\nMisc\n----\n- [`rustdoc` allows you to specify what edition to treat your code as with the\n  `--edition` option.][54057]\n- [`rustdoc` now has the `--color` (specify whether to output color) and\n  `--error-format` (specify error format, e.g. `json`) options.][53003]\n- [We now distribute a `rust-gdbgui` script that invokes `gdbgui` with Rust\n  debug symbols.][53774]\n- [Attributes from Rust tools such as `rustfmt` or `clippy` are now\n  available,][53459] e.g. `#[rustfmt::skip]` will skip formatting the next item.\n\n[50911]: https://github.com/rust-lang/rust/pull/50911/\n[51363]: https://github.com/rust-lang/rust/pull/51363/\n[51366]: https://github.com/rust-lang/rust/pull/51366/\n[52081]: https://github.com/rust-lang/rust/pull/52081/\n[53003]: https://github.com/rust-lang/rust/pull/53003/\n[53033]: https://github.com/rust-lang/rust/pull/53033/\n[53044]: https://github.com/rust-lang/rust/pull/53044/\n[53165]: https://github.com/rust-lang/rust/pull/53165/\n[53611]: https://github.com/rust-lang/rust/pull/53611/\n[53236]: https://github.com/rust-lang/rust/pull/53236/\n[53272]: https://github.com/rust-lang/rust/pull/53272/\n[53370]: https://github.com/rust-lang/rust/pull/53370/\n[53459]: https://github.com/rust-lang/rust/pull/53459/\n[53774]: https://github.com/rust-lang/rust/pull/53774/\n[53822]: https://github.com/rust-lang/rust/pull/53822/\n[54057]: https://github.com/rust-lang/rust/pull/54057/\n[54404]: https://github.com/rust-lang/rust/pull/54404/\n[cargo/5877]: https://github.com/rust-lang/cargo/pull/5877/\n[cargo/5878]: https://github.com/rust-lang/cargo/pull/5878/\n[cargo/5995]: https://github.com/rust-lang/cargo/pull/5995/\n[proc-macros]: https://doc.rust-lang.org/nightly/book/2018-edition/ch19-06-macros.html\n\n[`Ipv4Addr::BROADCAST`]: https://doc.rust-lang.org/nightly/std/net/struct.Ipv4Addr.html#associatedconstant.BROADCAST\n[`Ipv4Addr::LOCALHOST`]: https://doc.rust-lang.org/nightly/std/net/struct.Ipv4Addr.html#associatedconstant.LOCALHOST\n[`Ipv4Addr::UNSPECIFIED`]: https://doc.rust-lang.org/nightly/std/net/struct.Ipv4Addr.html#associatedconstant.UNSPECIFIED\n[`Ipv6Addr::LOCALHOST`]: https://doc.rust-lang.org/nightly/std/net/struct.Ipv6Addr.html#associatedconstant.LOCALHOST\n[`Ipv6Addr::UNSPECIFIED`]: https://doc.rust-lang.org/nightly/std/net/struct.Ipv6Addr.html#associatedconstant.UNSPECIFIED\n[`Iterator::find_map`]: https://doc.rust-lang.org/std/iter/trait.Iterator.html#method.find_map\n[`str::trim_end_matches`]: https://doc.rust-lang.org/nightly/std/primitive.str.html#method.trim_end_matches\n[`str::trim_end`]: https://doc.rust-lang.org/nightly/std/primitive.str.html#method.trim_end\n[`str::trim_start_matches`]: https://doc.rust-lang.org/nightly/std/primitive.str.html#method.trim_start_matches\n[`str::trim_start`]: https://doc.rust-lang.org/nightly/std/primitive.str.html#method.trim_start\n\n\nVersion 1.29.2 (2018-10-11)\n===========================\n\n- [Workaround for an aliasing-related LLVM bug, which caused miscompilation.][54639]\n- The `rls-preview` component on the windows-gnu targets has been restored.\n\n[54639]: https://github.com/rust-lang/rust/pull/54639\n\n\nVersion 1.29.1 (2018-09-25)\n===========================\n\nSecurity Notes\n--------------\n\n- The standard library's `str::repeat` function contained an out of bounds write\n  caused by an integer overflow. This has been fixed by deterministically\n  panicking when an overflow happens.\n\n  Thank you to Scott McMurray for responsibly disclosing this vulnerability to\n  us.\n\n\nVersion 1.29.0 (2018-09-13)\n==========================\n\nCompiler\n--------\n- [Bumped minimum LLVM version to 5.0.][51899]\n- [Added `powerpc64le-unknown-linux-musl` target.][51619]\n- [Added `aarch64-unknown-hermit` and `x86_64-unknown-hermit` targets.][52861]\n- [Upgraded to LLVM 7.][51966]\n\nLibraries\n---------\n- [`Once::call_once` no longer requires `Once` to be `'static`.][52239]\n- [`BuildHasherDefault` now implements `PartialEq` and `Eq`.][52402]\n- [`Box<CStr>`, `Box<OsStr>`, and `Box<Path>` now implement `Clone`.][51912]\n- [Implemented `PartialEq<&str>` for `OsString` and `PartialEq<OsString>`\n  for `&str`.][51178]\n- [`Cell<T>` now allows `T` to be unsized.][50494]\n- [`SocketAddr` is now stable on Redox.][52656]\n\nStabilized APIs\n---------------\n- [`Arc::downcast`]\n- [`Iterator::flatten`]\n- [`Rc::downcast`]\n\nCargo\n-----\n- [Cargo can silently fix some bad lockfiles.][cargo/5831] You can use\n  `--locked` to disable this behavior.\n- [`cargo-install` will now allow you to cross compile an install\n  using `--target`.][cargo/5614]\n- [Added the `cargo-fix` subcommand to automatically move project code from\n  2015 edition to 2018.][cargo/5723]\n- [`cargo doc` can now optionally document private types using the\n  `--document-private-items` flag.][cargo/5543]\n\nMisc\n----\n- [`rustdoc` now has the `--cap-lints` option which demotes all lints above\n  the specified level to that level.][52354] For example `--cap-lints warn`\n  will demote `deny` and `forbid` lints to `warn`.\n- [`rustc` and `rustdoc` will now have the exit code of `1` if compilation\n  fails and `101` if there is a panic.][52197]\n- [A preview of clippy has been made available through rustup.][51122]\n  You can install the preview with `rustup component add clippy-preview`.\n\nCompatibility Notes\n-------------------\n- [`str::{slice_unchecked, slice_unchecked_mut}` are now deprecated.][51807]\n  Use `str::get_unchecked(begin..end)` instead.\n- [`std::env::home_dir` is now deprecated for its unintuitive behavior.][51656]\n  Consider using the `home_dir` function from\n  https://crates.io/crates/dirs instead.\n- [`rustc` will no longer silently ignore invalid data in target spec.][52330]\n- [`cfg` attributes and `--cfg` command line flags are now more\n  strictly validated.][53893]\n\n[53893]: https://github.com/rust-lang/rust/pull/53893/\n[52861]: https://github.com/rust-lang/rust/pull/52861/\n[51966]: https://github.com/rust-lang/rust/pull/51966/\n[52656]: https://github.com/rust-lang/rust/pull/52656/\n[52239]: https://github.com/rust-lang/rust/pull/52239/\n[52330]: https://github.com/rust-lang/rust/pull/52330/\n[52354]: https://github.com/rust-lang/rust/pull/52354/\n[52402]: https://github.com/rust-lang/rust/pull/52402/\n[52197]: https://github.com/rust-lang/rust/pull/52197/\n[51807]: https://github.com/rust-lang/rust/pull/51807/\n[51899]: https://github.com/rust-lang/rust/pull/51899/\n[51912]: https://github.com/rust-lang/rust/pull/51912/\n[51619]: https://github.com/rust-lang/rust/pull/51619/\n[51656]: https://github.com/rust-lang/rust/pull/51656/\n[51178]: https://github.com/rust-lang/rust/pull/51178/\n[51122]: https://github.com/rust-lang/rust/pull/51122\n[50494]: https://github.com/rust-lang/rust/pull/50494/\n[cargo/5543]: https://github.com/rust-lang/cargo/pull/5543\n[cargo/5614]: https://github.com/rust-lang/cargo/pull/5614/\n[cargo/5723]: https://github.com/rust-lang/cargo/pull/5723/\n[cargo/5831]: https://github.com/rust-lang/cargo/pull/5831/\n[`Arc::downcast`]: https://doc.rust-lang.org/std/sync/struct.Arc.html#method.downcast\n[`Iterator::flatten`]: https://doc.rust-lang.org/std/iter/trait.Iterator.html#method.flatten\n[`Rc::downcast`]: https://doc.rust-lang.org/std/rc/struct.Rc.html#method.downcast\n\n\nVersion 1.28.0 (2018-08-02)\n===========================\n\nLanguage\n--------\n- [The `#[repr(transparent)]` attribute is now stable.][51562] This attribute\n  allows a Rust newtype wrapper (`struct NewType<T>(T);`) to be represented as\n  the inner type across Foreign Function Interface (FFI) boundaries.\n- [The keywords `pure`, `sizeof`, `alignof`, and `offsetof` have been unreserved\n  and can now be used as identifiers.][51196]\n- [The `GlobalAlloc` trait and `#[global_allocator]` attribute are now\n  stable.][51241] This will allow users to specify a global allocator for\n  their program.\n- [Unit test functions marked with the `#[test]` attribute can now return\n  `Result<(), E: Debug>` in addition to `()`.][51298]\n- [The `lifetime` specifier for `macro_rules!` is now stable.][50385] This\n  allows macros to easily target lifetimes.\n\nCompiler\n--------\n- [The `s` and `z` optimisation levels are now stable.][50265] These optimisations\n  prioritise making smaller binary sizes. `z` is the same as `s` with the\n  exception that it does not vectorise loops, which typically results in an even\n  smaller binary.\n- [The short error format is now stable.][49546] Specified with\n  `--error-format=short` this option will provide a more compressed output of\n  rust error messages.\n- [Added a lint warning when you have duplicated `macro_export`s.][50143]\n- [Reduced the number of allocations in the macro parser.][50855] This can\n  improve compile times of macro heavy crates on average by 5%.\n\nLibraries\n---------\n- [Implemented `Default` for `&mut str`.][51306]\n- [Implemented `From<bool>` for all integer and unsigned number types.][50554]\n- [Implemented `Extend` for `()`.][50234]\n- [The `Debug` implementation of `time::Duration` should now be more easily\n  human readable.][50364] Previously a `Duration` of one second would printed as\n  `Duration { secs: 1, nanos: 0 }` and will now be printed as `1s`.\n- [Implemented `From<&String>` for `Cow<str>`, `From<&Vec<T>>` for `Cow<[T]>`,\n  `From<Cow<CStr>>` for `CString`, `From<CString>, From<CStr>, From<&CString>`\n  for `Cow<CStr>`, `From<OsString>, From<OsStr>, From<&OsString>` for\n  `Cow<OsStr>`, `From<&PathBuf>` for `Cow<Path>`, and `From<Cow<Path>>`\n  for `PathBuf`.][50170]\n- [Implemented `Shl` and `Shr` for `Wrapping<u128>`\n  and `Wrapping<i128>`.][50465]\n- [`DirEntry::metadata` now uses `fstatat` instead of `lstat` when\n  possible.][51050] This can provide up to a 40% speed increase.\n- [Improved error messages when using `format!`.][50610]\n\nStabilized APIs\n---------------\n- [`Iterator::step_by`]\n- [`Path::ancestors`]\n- [`SystemTime::UNIX_EPOCH`]\n- [`alloc::GlobalAlloc`]\n- [`alloc::Layout`]\n- [`alloc::LayoutErr`]\n- [`alloc::System`]\n- [`alloc::alloc`]\n- [`alloc::alloc_zeroed`]\n- [`alloc::dealloc`]\n- [`alloc::realloc`]\n- [`alloc::handle_alloc_error`]\n- [`btree_map::Entry::or_default`]\n- [`fmt::Alignment`]\n- [`hash_map::Entry::or_default`]\n- [`iter::repeat_with`]\n- [`num::NonZeroUsize`]\n- [`num::NonZeroU128`]\n- [`num::NonZeroU16`]\n- [`num::NonZeroU32`]\n- [`num::NonZeroU64`]\n- [`num::NonZeroU8`]\n- [`ops::RangeBounds`]\n- [`slice::SliceIndex`]\n- [`slice::from_mut`]\n- [`slice::from_ref`]\n- [`{Any + Send + Sync}::downcast_mut`]\n- [`{Any + Send + Sync}::downcast_ref`]\n- [`{Any + Send + Sync}::is`]\n\nCargo\n-----\n- [Cargo will now no longer allow you to publish crates with build scripts that\n  modify the `src` directory.][cargo/5584] The `src` directory in a crate should be\n  considered to be immutable.\n\nMisc\n----\n- [The `suggestion_applicability` field in `rustc`'s json output is now\n  stable.][50486] This will allow dev tools to check whether a code suggestion\n  would apply to them.\n\nCompatibility Notes\n-------------------\n- [Rust will consider trait objects with duplicated constraints to be the same\n  type as without the duplicated constraint.][51276] For example the below code will\n  now fail to compile.\n  ```rust\n  trait Trait {}\n\n  impl Trait + Send {\n      fn test(&self) { println!(\"one\"); } //~ ERROR duplicate definitions with name `test`\n  }\n\n  impl Trait + Send + Send {\n      fn test(&self) { println!(\"two\"); }\n  }\n  ```\n\n[49546]: https://github.com/rust-lang/rust/pull/49546/\n[50143]: https://github.com/rust-lang/rust/pull/50143/\n[50170]: https://github.com/rust-lang/rust/pull/50170/\n[50234]: https://github.com/rust-lang/rust/pull/50234/\n[50265]: https://github.com/rust-lang/rust/pull/50265/\n[50364]: https://github.com/rust-lang/rust/pull/50364/\n[50385]: https://github.com/rust-lang/rust/pull/50385/\n[50465]: https://github.com/rust-lang/rust/pull/50465/\n[50486]: https://github.com/rust-lang/rust/pull/50486/\n[50554]: https://github.com/rust-lang/rust/pull/50554/\n[50610]: https://github.com/rust-lang/rust/pull/50610/\n[50855]: https://github.com/rust-lang/rust/pull/50855/\n[51050]: https://github.com/rust-lang/rust/pull/51050/\n[51196]: https://github.com/rust-lang/rust/pull/51196/\n[51241]: https://github.com/rust-lang/rust/pull/51241/\n[51276]: https://github.com/rust-lang/rust/pull/51276/\n[51298]: https://github.com/rust-lang/rust/pull/51298/\n[51306]: https://github.com/rust-lang/rust/pull/51306/\n[51562]: https://github.com/rust-lang/rust/pull/51562/\n[cargo/5584]: https://github.com/rust-lang/cargo/pull/5584/\n[`Iterator::step_by`]: https://doc.rust-lang.org/std/iter/trait.Iterator.html#method.step_by\n[`Path::ancestors`]: https://doc.rust-lang.org/std/path/struct.Path.html#method.ancestors\n[`SystemTime::UNIX_EPOCH`]: https://doc.rust-lang.org/std/time/struct.SystemTime.html#associatedconstant.UNIX_EPOCH\n[`alloc::GlobalAlloc`]: https://doc.rust-lang.org/std/alloc/trait.GlobalAlloc.html\n[`alloc::Layout`]: https://doc.rust-lang.org/std/alloc/struct.Layout.html\n[`alloc::LayoutErr`]: https://doc.rust-lang.org/std/alloc/struct.LayoutErr.html\n[`alloc::System`]: https://doc.rust-lang.org/std/alloc/struct.System.html\n[`alloc::alloc`]: https://doc.rust-lang.org/std/alloc/fn.alloc.html\n[`alloc::alloc_zeroed`]: https://doc.rust-lang.org/std/alloc/fn.alloc_zeroed.html\n[`alloc::dealloc`]: https://doc.rust-lang.org/std/alloc/fn.dealloc.html\n[`alloc::realloc`]: https://doc.rust-lang.org/std/alloc/fn.realloc.html\n[`alloc::handle_alloc_error`]: https://doc.rust-lang.org/std/alloc/fn.handle_alloc_error.html\n[`btree_map::Entry::or_default`]: https://doc.rust-lang.org/std/collections/btree_map/enum.Entry.html#method.or_default\n[`fmt::Alignment`]: https://doc.rust-lang.org/std/fmt/enum.Alignment.html\n[`hash_map::Entry::or_default`]: https://doc.rust-lang.org/std/collections/hash_map/enum.Entry.html#method.or_default\n[`iter::repeat_with`]: https://doc.rust-lang.org/std/iter/fn.repeat_with.html\n[`num::NonZeroUsize`]: https://doc.rust-lang.org/std/num/struct.NonZeroUsize.html\n[`num::NonZeroU128`]: https://doc.rust-lang.org/std/num/struct.NonZeroU128.html\n[`num::NonZeroU16`]: https://doc.rust-lang.org/std/num/struct.NonZeroU16.html\n[`num::NonZeroU32`]: https://doc.rust-lang.org/std/num/struct.NonZeroU32.html\n[`num::NonZeroU64`]: https://doc.rust-lang.org/std/num/struct.NonZeroU64.html\n[`num::NonZeroU8`]: https://doc.rust-lang.org/std/num/struct.NonZeroU8.html\n[`ops::RangeBounds`]: https://doc.rust-lang.org/std/ops/trait.RangeBounds.html\n[`slice::SliceIndex`]: https://doc.rust-lang.org/std/slice/trait.SliceIndex.html\n[`slice::from_mut`]: https://doc.rust-lang.org/std/slice/fn.from_mut.html\n[`slice::from_ref`]: https://doc.rust-lang.org/std/slice/fn.from_ref.html\n[`{Any + Send + Sync}::downcast_mut`]: https://doc.rust-lang.org/std/any/trait.Any.html#method.downcast_mut-2\n[`{Any + Send + Sync}::downcast_ref`]: https://doc.rust-lang.org/std/any/trait.Any.html#method.downcast_ref-2\n[`{Any + Send + Sync}::is`]: https://doc.rust-lang.org/std/any/trait.Any.html#method.is-2\n\nVersion 1.27.2 (2018-07-20)\n===========================\n\nCompatibility Notes\n-------------------\n\n- The borrow checker was fixed to avoid potential unsoundness when using\n  match ergonomics: [#52213][52213].\n\n[52213]: https://github.com/rust-lang/rust/issues/52213\n\nVersion 1.27.1 (2018-07-10)\n===========================\n\nSecurity Notes\n--------------\n\n- rustdoc would execute plugins in the /tmp/rustdoc/plugins directory\n  when running, which enabled executing code as some other user on a\n  given machine. This release fixes that vulnerability; you can read\n  more about this on the [blog][rustdoc-sec]. The associated CVE is [CVE-2018-1000622].\n\n  Thank you to Red Hat for responsibly disclosing this vulnerability to us.\n\nCompatibility Notes\n-------------------\n\n- The borrow checker was fixed to avoid an additional potential unsoundness when using\n  match ergonomics: [#51415][51415], [#49534][49534].\n\n[51415]: https://github.com/rust-lang/rust/issues/51415\n[49534]: https://github.com/rust-lang/rust/issues/49534\n[rustdoc-sec]: https://blog.rust-lang.org/2018/07/06/security-advisory-for-rustdoc.html\n[CVE-2018-1000622]: https://cve.mitre.org/cgi-bin/cvename.cgi?name=%20CVE-2018-1000622\n\nVersion 1.27.0 (2018-06-21)\n==========================\n\nLanguage\n--------\n- [Removed 'proc' from the reserved keywords list.][49699] This allows `proc` to\n  be used as an identifier.\n- [The dyn syntax is now available.][49968] This syntax is equivalent to the\n  bare `Trait` syntax, and should make it clearer when being used in tandem with\n  `impl Trait` because it is equivalent to the following syntax:\n  `&Trait == &dyn Trait`, `&mut Trait == &mut dyn Trait`, and\n  `Box<Trait> == Box<dyn Trait>`.\n- [Attributes on generic parameters such as types and lifetimes are\n  now stable.][48851] e.g.\n  `fn foo<#[lifetime_attr] 'a, #[type_attr] T: 'a>() {}`\n- [The `#[must_use]` attribute can now also be used on functions as well as\n  types.][48925] It provides a lint that by default warns users when the\n  value returned by a function has not been used.\n\nCompiler\n--------\n- [Added the `armv5te-unknown-linux-musleabi` target.][50423]\n\nLibraries\n---------\n- [SIMD (Single Instruction Multiple Data) on x86/x86_64 is now stable.][49664]\n  This includes [`arch::x86`] & [`arch::x86_64`] modules which contain\n  SIMD intrinsics, a new macro called `is_x86_feature_detected!`, the\n  `#[target_feature(enable=\"\")]` attribute, and adding `target_feature = \"\"` to\n  the `cfg` attribute.\n- [A lot of methods for `[u8]`, `f32`, and `f64` previously only available in\n  std are now available in core.][49896]\n- [The generic `Rhs` type parameter on `ops::{Shl, ShlAssign, Shr}` now defaults\n  to `Self`.][49630]\n- [`std::str::replace` now has the `#[must_use]` attribute][50177] to clarify\n  that the operation isn't done in place.\n- [`Clone::clone`, `Iterator::collect`, and `ToOwned::to_owned` now have\n  the `#[must_use]` attribute][49533] to warn about unused potentially\n  expensive allocations.\n\nStabilized APIs\n---------------\n- [`DoubleEndedIterator::rfind`]\n- [`DoubleEndedIterator::rfold`]\n- [`DoubleEndedIterator::try_rfold`]\n- [`Duration::from_micros`]\n- [`Duration::from_nanos`]\n- [`Duration::subsec_micros`]\n- [`Duration::subsec_millis`]\n- [`HashMap::remove_entry`]\n- [`Iterator::try_fold`]\n- [`Iterator::try_for_each`]\n- [`NonNull::cast`]\n- [`Option::filter`]\n- [`String::replace_range`]\n- [`Take::set_limit`]\n- [`hint::unreachable_unchecked`]\n- [`os::unix::process::parent_id`]\n- [`ptr::swap_nonoverlapping`]\n- [`slice::rsplit_mut`]\n- [`slice::rsplit`]\n- [`slice::swap_with_slice`]\n\nCargo\n-----\n- [`cargo-metadata` now includes `authors`, `categories`, `keywords`,\n  `readme`, and `repository` fields.][cargo/5386]\n- [`cargo-metadata` now includes a package's `metadata` table.][cargo/5360]\n- [Added the `--target-dir` optional argument.][cargo/5393] This allows you to specify\n  a different directory than `target` for placing compilation artifacts.\n- [Cargo will be adding automatic target inference for binaries, benchmarks,\n  examples, and tests in the Rust 2018 edition.][cargo/5335] If your project specifies\n  specific targets, e.g. using `[[bin]]`, and have other binaries in locations\n  where cargo would infer a binary, Cargo will produce a warning. You can\n  disable this feature ahead of time by setting any of the following to false:\n  `autobins`, `autobenches`, `autoexamples`, `autotests`.\n- [Cargo will now cache compiler information.][cargo/5359] This can be disabled by\n  setting `CARGO_CACHE_RUSTC_INFO=0` in your environment.\n\nMisc\n----\n- [Added “The Rustc book” into the official documentation.][49707]\n  [“The Rustc book”] documents and teaches how to use the rustc compiler.\n- [All books available on `doc.rust-lang.org` are now searchable.][49623]\n\nCompatibility Notes\n-------------------\n- [Calling a `CharExt` or `StrExt` method directly on core will no longer\n  work.][49896] e.g. `::core::prelude::v1::StrExt::is_empty(\"\")` will not\n  compile, `\"\".is_empty()` will still compile.\n- [`Debug` output on `atomic::{AtomicBool, AtomicIsize, AtomicPtr, AtomicUsize}`\n  will only print the inner type.][48553] E.g.\n  `print!(\"{:?}\", AtomicBool::new(true))` will print `true`,\n  not `AtomicBool(true)`.\n- [The maximum number for `repr(align(N))` is now 2²⁹.][50378] Previously you\n  could enter higher numbers but they were not supported by LLVM. Up to 512MB\n  alignment should cover all use cases.\n- The `.description()` method on the `std::error::Error` trait\n  [has been soft-deprecated][50163]. It is no longer required to implement it.\n\n[48553]: https://github.com/rust-lang/rust/pull/48553/\n[48851]: https://github.com/rust-lang/rust/pull/48851/\n[48925]: https://github.com/rust-lang/rust/pull/48925/\n[49533]: https://github.com/rust-lang/rust/pull/49533/\n[49623]: https://github.com/rust-lang/rust/pull/49623/\n[49630]: https://github.com/rust-lang/rust/pull/49630/\n[49664]: https://github.com/rust-lang/rust/pull/49664/\n[49699]: https://github.com/rust-lang/rust/pull/49699/\n[49707]: https://github.com/rust-lang/rust/pull/49707/\n[49896]: https://github.com/rust-lang/rust/pull/49896/\n[49968]: https://github.com/rust-lang/rust/pull/49968/\n[50163]: https://github.com/rust-lang/rust/pull/50163\n[50177]: https://github.com/rust-lang/rust/pull/50177/\n[50378]: https://github.com/rust-lang/rust/pull/50378/\n[50423]: https://github.com/rust-lang/rust/pull/50423/\n[cargo/5335]: https://github.com/rust-lang/cargo/pull/5335/\n[cargo/5359]: https://github.com/rust-lang/cargo/pull/5359/\n[cargo/5360]: https://github.com/rust-lang/cargo/pull/5360/\n[cargo/5386]: https://github.com/rust-lang/cargo/pull/5386/\n[cargo/5393]: https://github.com/rust-lang/cargo/pull/5393/\n[`DoubleEndedIterator::rfind`]: https://doc.rust-lang.org/std/iter/trait.DoubleEndedIterator.html#method.rfind\n[`DoubleEndedIterator::rfold`]: https://doc.rust-lang.org/std/iter/trait.DoubleEndedIterator.html#method.rfold\n[`DoubleEndedIterator::try_rfold`]: https://doc.rust-lang.org/std/iter/trait.DoubleEndedIterator.html#method.try_rfold\n[`Duration::from_micros`]: https://doc.rust-lang.org/std/time/struct.Duration.html#method.from_micros\n[`Duration::from_nanos`]: https://doc.rust-lang.org/std/time/struct.Duration.html#method.from_nanos\n[`Duration::subsec_micros`]: https://doc.rust-lang.org/std/time/struct.Duration.html#method.subsec_micros\n[`Duration::subsec_millis`]: https://doc.rust-lang.org/std/time/struct.Duration.html#method.subsec_millis\n[`HashMap::remove_entry`]: https://doc.rust-lang.org/std/collections/struct.HashMap.html#method.remove_entry\n[`Iterator::try_fold`]: https://doc.rust-lang.org/std/iter/trait.Iterator.html#method.try_fold\n[`Iterator::try_for_each`]: https://doc.rust-lang.org/std/iter/trait.Iterator.html#method.try_for_each\n[`NonNull::cast`]: https://doc.rust-lang.org/std/ptr/struct.NonNull.html#method.cast\n[`Option::filter`]: https://doc.rust-lang.org/std/option/enum.Option.html#method.filter\n[`String::replace_range`]: https://doc.rust-lang.org/std/string/struct.String.html#method.replace_range\n[`Take::set_limit`]: https://doc.rust-lang.org/std/io/struct.Take.html#method.set_limit\n[`hint::unreachable_unchecked`]: https://doc.rust-lang.org/std/hint/fn.unreachable_unchecked.html\n[`os::unix::process::parent_id`]: https://doc.rust-lang.org/std/os/unix/process/fn.parent_id.html\n[`process::id`]: https://doc.rust-lang.org/std/process/fn.id.html\n[`ptr::swap_nonoverlapping`]: https://doc.rust-lang.org/std/ptr/fn.swap_nonoverlapping.html\n[`slice::rsplit_mut`]: https://doc.rust-lang.org/std/primitive.slice.html#method.rsplit_mut\n[`slice::rsplit`]: https://doc.rust-lang.org/std/primitive.slice.html#method.rsplit\n[`slice::swap_with_slice`]: https://doc.rust-lang.org/std/primitive.slice.html#method.swap_with_slice\n[`arch::x86_64`]: https://doc.rust-lang.org/std/arch/x86_64/index.html\n[`arch::x86`]: https://doc.rust-lang.org/std/arch/x86/index.html\n[“The Rustc book”]: https://doc.rust-lang.org/rustc\n\n\nVersion 1.26.2 (2018-06-05)\n==========================\n\nCompatibility Notes\n-------------------\n\n- [The borrow checker was fixed to avoid unsoundness when using match ergonomics.][51117]\n\n[51117]: https://github.com/rust-lang/rust/issues/51117\n\n\nVersion 1.26.1 (2018-05-29)\n==========================\n\nTools\n-----\n\n- [RLS now works on Windows.][50646]\n- [Rustfmt stopped badly formatting text in some cases.][rustfmt/2695]\n\n\nCompatibility Notes\n--------\n\n- [`fn main() -> impl Trait` no longer works for non-Termination\n  trait.][50656]\n  This reverts an accidental stabilization.\n- [`NaN > NaN` no longer returns true in const-fn contexts.][50812]\n- [Prohibit using turbofish for `impl Trait` in method arguments.][50950]\n\n[50646]: https://github.com/rust-lang/rust/issues/50646\n[50656]: https://github.com/rust-lang/rust/pull/50656\n[50812]: https://github.com/rust-lang/rust/pull/50812\n[50950]: https://github.com/rust-lang/rust/issues/50950\n[rustfmt/2695]: https://github.com/rust-lang-nursery/rustfmt/issues/2695\n\nVersion 1.26.0 (2018-05-10)\n==========================\n\nLanguage\n--------\n- [Closures now implement `Copy` and/or `Clone` if all captured variables\n  implement either or both traits.][49299]\n- [The inclusive range syntax e.g. `for x in 0..=10` is now stable.][47813]\n- [The `'_` lifetime is now stable. The underscore lifetime can be used anywhere a\n  lifetime can be elided.][49458]\n- [`impl Trait` is now stable allowing you to have abstract types in returns\n   or in function parameters.][49255] E.g. `fn foo() -> impl Iterator<Item=u8>` or\n  `fn open(path: impl AsRef<Path>)`.\n- [Pattern matching will now automatically apply dereferences.][49394]\n- [128-bit integers in the form of `u128` and `i128` are now stable.][49101]\n- [`main` can now return `Result<(), E: Debug>`][49162] in addition to `()`.\n- [A lot of operations are now available in a const context.][46882] E.g. You\n  can now index into constant arrays, reference and dereference into constants,\n  and use tuple struct constructors.\n- [Fixed entry slice patterns are now stable.][48516] E.g.\n  ```rust\n  let points = [1, 2, 3, 4];\n  match points {\n      [1, 2, 3, 4] => println!(\"All points were sequential.\"),\n      _ => println!(\"Not all points were sequential.\"),\n  }\n  ```\n\n\nCompiler\n--------\n- [LLD is now used as the default linker for `wasm32-unknown-unknown`.][48125]\n- [Fixed exponential projection complexity on nested types.][48296]\n  This can provide up to a ~12% reduction in compile times for certain crates.\n- [Added the `--remap-path-prefix` option to rustc.][48359] Allowing you\n  to remap path prefixes outputted by the compiler.\n- [Added `powerpc-unknown-netbsd` target.][48281]\n\nLibraries\n---------\n- [Implemented `From<u16> for usize` & `From<{u8, i16}> for isize`.][49305]\n- [Added hexadecimal formatting for integers with fmt::Debug][48978]\n  e.g. `assert!(format!(\"{:02x?}\", b\"Foo\\0\") == \"[46, 6f, 6f, 00]\")`\n- [Implemented `Default, Hash` for `cmp::Reverse`.][48628]\n- [Optimized `str::repeat` being 8x faster in large cases.][48657]\n- [`ascii::escape_default` is now available in libcore.][48735]\n- [Trailing commas are now supported in std and core macros.][48056]\n- [Implemented `Copy, Clone` for `cmp::Reverse`][47379]\n- [Implemented `Clone` for `char::{ToLowercase, ToUppercase}`.][48629]\n\nStabilized APIs\n---------------\n- [`*const T::add`]\n- [`*const T::copy_to_nonoverlapping`]\n- [`*const T::copy_to`]\n- [`*const T::read_unaligned`]\n- [`*const T::read_volatile`]\n- [`*const T::read`]\n- [`*const T::sub`]\n- [`*const T::wrapping_add`]\n- [`*const T::wrapping_sub`]\n- [`*mut T::add`]\n- [`*mut T::copy_to_nonoverlapping`]\n- [`*mut T::copy_to`]\n- [`*mut T::read_unaligned`]\n- [`*mut T::read_volatile`]\n- [`*mut T::read`]\n- [`*mut T::replace`]\n- [`*mut T::sub`]\n- [`*mut T::swap`]\n- [`*mut T::wrapping_add`]\n- [`*mut T::wrapping_sub`]\n- [`*mut T::write_bytes`]\n- [`*mut T::write_unaligned`]\n- [`*mut T::write_volatile`]\n- [`*mut T::write`]\n- [`Box::leak`]\n- [`FromUtf8Error::as_bytes`]\n- [`LocalKey::try_with`]\n- [`Option::cloned`]\n- [`btree_map::Entry::and_modify`]\n- [`fs::read_to_string`]\n- [`fs::read`]\n- [`fs::write`]\n- [`hash_map::Entry::and_modify`]\n- [`iter::FusedIterator`]\n- [`ops::RangeInclusive`]\n- [`ops::RangeToInclusive`]\n- [`process::id`]\n- [`slice::rotate_left`]\n- [`slice::rotate_right`]\n- [`String::retain`]\n\n\nCargo\n-----\n- [Cargo will now output path to custom commands when `-v` is\n  passed with `--list`][cargo/5041]\n- [The Cargo binary version is now the same as the Rust version][cargo/5083]\n\nMisc\n----\n- [The second edition of \"The Rust Programming Language\" book is now recommended\n  over the first.][48404]\n\nCompatibility Notes\n-------------------\n\n- [aliasing a `Fn` trait as `dyn` no longer works.][48481] E.g. the following\n  syntax is now invalid.\n  ```\n  use std::ops::Fn as dyn;\n  fn g(_: Box<dyn(std::fmt::Debug)>) {}\n  ```\n- [The result of dereferences are no longer promoted to `'static`.][47408]\n  e.g.\n  ```rust\n  fn main() {\n      const PAIR: &(i32, i32) = &(0, 1);\n      let _reversed_pair: &'static _ = &(PAIR.1, PAIR.0); // Doesn't work\n  }\n  ```\n- [Deprecate `AsciiExt` trait in favor of inherent methods.][49109]\n- [`\".e0\"` will now no longer parse as `0.0` and will instead cause\n  an error.][48235]\n- [Removed hoedown from rustdoc.][48274]\n- [Bounds on higher-kinded lifetimes a hard error.][48326]\n\n[46882]: https://github.com/rust-lang/rust/pull/46882\n[47379]: https://github.com/rust-lang/rust/pull/47379\n[47408]: https://github.com/rust-lang/rust/pull/47408\n[47813]: https://github.com/rust-lang/rust/pull/47813\n[48056]: https://github.com/rust-lang/rust/pull/48056\n[48125]: https://github.com/rust-lang/rust/pull/48125\n[48235]: https://github.com/rust-lang/rust/pull/48235\n[48274]: https://github.com/rust-lang/rust/pull/48274\n[48281]: https://github.com/rust-lang/rust/pull/48281\n[48296]: https://github.com/rust-lang/rust/pull/48296\n[48326]: https://github.com/rust-lang/rust/pull/48326\n[48359]: https://github.com/rust-lang/rust/pull/48359\n[48404]: https://github.com/rust-lang/rust/pull/48404\n[48481]: https://github.com/rust-lang/rust/pull/48481\n[48516]: https://github.com/rust-lang/rust/pull/48516\n[48628]: https://github.com/rust-lang/rust/pull/48628\n[48629]: https://github.com/rust-lang/rust/pull/48629\n[48657]: https://github.com/rust-lang/rust/pull/48657\n[48735]: https://github.com/rust-lang/rust/pull/48735\n[48978]: https://github.com/rust-lang/rust/pull/48978\n[49101]: https://github.com/rust-lang/rust/pull/49101\n[49109]: https://github.com/rust-lang/rust/pull/49109\n[49162]: https://github.com/rust-lang/rust/pull/49162\n[49255]: https://github.com/rust-lang/rust/pull/49255\n[49299]: https://github.com/rust-lang/rust/pull/49299\n[49305]: https://github.com/rust-lang/rust/pull/49305\n[49394]: https://github.com/rust-lang/rust/pull/49394\n[49458]: https://github.com/rust-lang/rust/pull/49458\n[`*const T::add`]: https://doc.rust-lang.org/std/primitive.pointer.html#method.add\n[`*const T::copy_to_nonoverlapping`]: https://doc.rust-lang.org/std/primitive.pointer.html#method.copy_to_nonoverlapping\n[`*const T::copy_to`]: https://doc.rust-lang.org/std/primitive.pointer.html#method.copy_to\n[`*const T::read_unaligned`]: https://doc.rust-lang.org/std/primitive.pointer.html#method.read_unaligned\n[`*const T::read_volatile`]: https://doc.rust-lang.org/std/primitive.pointer.html#method.read_volatile\n[`*const T::read`]: https://doc.rust-lang.org/std/primitive.pointer.html#method.read\n[`*const T::sub`]: https://doc.rust-lang.org/std/primitive.pointer.html#method.sub\n[`*const T::wrapping_add`]: https://doc.rust-lang.org/std/primitive.pointer.html#method.wrapping_add\n[`*const T::wrapping_sub`]: https://doc.rust-lang.org/std/primitive.pointer.html#method.wrapping_sub\n[`*mut T::add`]: https://doc.rust-lang.org/std/primitive.pointer.html#method.add-1\n[`*mut T::copy_to_nonoverlapping`]: https://doc.rust-lang.org/std/primitive.pointer.html#method.copy_to_nonoverlapping-1\n[`*mut T::copy_to`]: https://doc.rust-lang.org/std/primitive.pointer.html#method.copy_to-1\n[`*mut T::read_unaligned`]: https://doc.rust-lang.org/std/primitive.pointer.html#method.read_unaligned-1\n[`*mut T::read_volatile`]: https://doc.rust-lang.org/std/primitive.pointer.html#method.read_volatile-1\n[`*mut T::read`]: https://doc.rust-lang.org/std/primitive.pointer.html#method.read-1\n[`*mut T::replace`]: https://doc.rust-lang.org/std/primitive.pointer.html#method.replace\n[`*mut T::sub`]: https://doc.rust-lang.org/std/primitive.pointer.html#method.sub-1\n[`*mut T::swap`]: https://doc.rust-lang.org/std/primitive.pointer.html#method.swap\n[`*mut T::wrapping_add`]: https://doc.rust-lang.org/std/primitive.pointer.html#method.wrapping_add-1\n[`*mut T::wrapping_sub`]: https://doc.rust-lang.org/std/primitive.pointer.html#method.wrapping_sub-1\n[`*mut T::write_bytes`]: https://doc.rust-lang.org/std/primitive.pointer.html#method.write_bytes\n[`*mut T::write_unaligned`]: https://doc.rust-lang.org/std/primitive.pointer.html#method.write_unaligned\n[`*mut T::write_volatile`]: https://doc.rust-lang.org/std/primitive.pointer.html#method.write_volatile\n[`*mut T::write`]: https://doc.rust-lang.org/std/primitive.pointer.html#method.write\n[`Box::leak`]: https://doc.rust-lang.org/std/boxed/struct.Box.html#method.leak\n[`FromUtf8Error::as_bytes`]: https://doc.rust-lang.org/std/string/struct.FromUtf8Error.html#method.as_bytes\n[`LocalKey::try_with`]: https://doc.rust-lang.org/std/thread/struct.LocalKey.html#method.try_with\n[`Option::cloned`]: https://doc.rust-lang.org/std/option/enum.Option.html#method.cloned\n[`btree_map::Entry::and_modify`]: https://doc.rust-lang.org/std/collections/btree_map/enum.Entry.html#method.and_modify\n[`fs::read_to_string`]: https://doc.rust-lang.org/std/fs/fn.read_to_string.html\n[`fs::read`]: https://doc.rust-lang.org/std/fs/fn.read.html\n[`fs::write`]: https://doc.rust-lang.org/std/fs/fn.write.html\n[`hash_map::Entry::and_modify`]: https://doc.rust-lang.org/std/collections/hash_map/enum.Entry.html#method.and_modify\n[`iter::FusedIterator`]: https://doc.rust-lang.org/std/iter/trait.FusedIterator.html\n[`ops::RangeInclusive`]: https://doc.rust-lang.org/std/ops/struct.RangeInclusive.html\n[`ops::RangeToInclusive`]: https://doc.rust-lang.org/std/ops/struct.RangeToInclusive.html\n[`process::id`]: https://doc.rust-lang.org/std/process/fn.id.html\n[`slice::rotate_left`]: https://doc.rust-lang.org/std/primitive.slice.html#method.rotate_left\n[`slice::rotate_right`]: https://doc.rust-lang.org/std/primitive.slice.html#method.rotate_right\n[`String::retain`]: https://doc.rust-lang.org/std/string/struct.String.html#method.retain\n[cargo/5041]: https://github.com/rust-lang/cargo/pull/5041\n[cargo/5083]: https://github.com/rust-lang/cargo/pull/5083\n\n\nVersion 1.25.0 (2018-03-29)\n==========================\n\nLanguage\n--------\n- [The `#[repr(align(x))]` attribute is now stable.][47006] [RFC 1358]\n- [You can now use nested groups of imports.][47948]\n  e.g. `use std::{fs::File, io::Read, path::{Path, PathBuf}};`\n- [You can now have `|` at the start of a match arm.][47947] e.g.\n```rust\nenum Foo { A, B, C }\n\nfn main() {\n    let x = Foo::A;\n    match x {\n        | Foo::A\n        | Foo::B => println!(\"AB\"),\n        | Foo::C => println!(\"C\"),\n    }\n}\n```\n\nCompiler\n--------\n- [Upgraded to LLVM 6.][47828]\n- [Added `-C lto=val` option.][47521]\n- [Added `i586-unknown-linux-musl` target][47282]\n\nLibraries\n---------\n- [Impl Send for `process::Command` on Unix.][47760]\n- [Impl PartialEq and Eq for `ParseCharError`.][47790]\n- [`UnsafeCell::into_inner` is now safe.][47204]\n- [Implement libstd for CloudABI.][47268]\n- [`Float::{from_bits, to_bits}` is now available in libcore.][46931]\n- [Implement `AsRef<Path>` for Component][46985]\n- [Implemented `Write` for `Cursor<&mut Vec<u8>>`][46830]\n- [Moved `Duration` to libcore.][46666]\n\nStabilized APIs\n---------------\n- [`Location::column`]\n- [`ptr::NonNull`]\n\nThe following functions can now be used in a constant expression.\neg. `static MINUTE: Duration = Duration::from_secs(60);`\n- [`Duration::new`][47300]\n- [`Duration::from_secs`][47300]\n- [`Duration::from_millis`][47300]\n\nCargo\n-----\n- [`cargo new` no longer removes `rust` or `rs` prefixes/suffixes.][cargo/5013]\n- [`cargo new` now defaults to creating a binary crate, instead of a\n  library crate.][cargo/5029]\n\nMisc\n----\n- [Rust by example is now shipped with new releases][46196]\n\nCompatibility Notes\n-------------------\n- [Deprecated `net::lookup_host`.][47510]\n- [`rustdoc` has switched to pulldown as the default markdown renderer.][47398]\n- The borrow checker was sometimes incorrectly permitting overlapping borrows\n  around indexing operations (see [#47349][47349]). This has been fixed (which also\n  enabled some correct code that used to cause errors (e.g. [#33903][33903] and [#46095][46095]).\n- [Removed deprecated unstable attribute `#[simd]`.][47251]\n\n[33903]: https://github.com/rust-lang/rust/pull/33903\n[47947]: https://github.com/rust-lang/rust/pull/47947\n[47948]: https://github.com/rust-lang/rust/pull/47948\n[47760]: https://github.com/rust-lang/rust/pull/47760\n[47790]: https://github.com/rust-lang/rust/pull/47790\n[47828]: https://github.com/rust-lang/rust/pull/47828\n[47398]: https://github.com/rust-lang/rust/pull/47398\n[47510]: https://github.com/rust-lang/rust/pull/47510\n[47521]: https://github.com/rust-lang/rust/pull/47521\n[47204]: https://github.com/rust-lang/rust/pull/47204\n[47251]: https://github.com/rust-lang/rust/pull/47251\n[47268]: https://github.com/rust-lang/rust/pull/47268\n[47282]: https://github.com/rust-lang/rust/pull/47282\n[47300]: https://github.com/rust-lang/rust/pull/47300\n[47349]: https://github.com/rust-lang/rust/pull/47349\n[46931]: https://github.com/rust-lang/rust/pull/46931\n[46985]: https://github.com/rust-lang/rust/pull/46985\n[47006]: https://github.com/rust-lang/rust/pull/47006\n[46830]: https://github.com/rust-lang/rust/pull/46830\n[46095]: https://github.com/rust-lang/rust/pull/46095\n[46666]: https://github.com/rust-lang/rust/pull/46666\n[46196]: https://github.com/rust-lang/rust/pull/46196\n[cargo/5013]: https://github.com/rust-lang/cargo/pull/5013\n[cargo/5029]: https://github.com/rust-lang/cargo/pull/5029\n[RFC 1358]: https://github.com/rust-lang/rfcs/pull/1358\n[`Location::column`]: https://doc.rust-lang.org/std/panic/struct.Location.html#method.column\n[`ptr::NonNull`]: https://doc.rust-lang.org/std/ptr/struct.NonNull.html\n\n\nVersion 1.24.1 (2018-03-01)\n==========================\n\n - [Do not abort when unwinding through FFI][48251]\n - [Emit UTF-16 files for linker arguments on Windows][48318]\n - [Make the error index generator work again][48308]\n - [Cargo will warn on Windows 7 if an update is needed][cargo/5069].\n\n[48251]: https://github.com/rust-lang/rust/issues/48251\n[48308]: https://github.com/rust-lang/rust/issues/48308\n[48318]: https://github.com/rust-lang/rust/issues/48318\n[cargo/5069]: https://github.com/rust-lang/cargo/pull/5069\n\n\nVersion 1.24.0 (2018-02-15)\n==========================\n\nLanguage\n--------\n- [External `sysv64` ffi is now available.][46528]\n  eg. `extern \"sysv64\" fn foo () {}`\n\nCompiler\n--------\n- [rustc now uses 16 codegen units by default for release builds.][46910]\n  For the fastest builds, utilize `codegen-units=1`.\n- [Added `armv4t-unknown-linux-gnueabi` target.][47018]\n- [Add `aarch64-unknown-openbsd` support][46760]\n\nLibraries\n---------\n- [`str::find::<char>` now uses memchr.][46735] This should lead to a 10x\n  improvement in performance in the majority of cases.\n- [`OsStr`'s `Debug` implementation is now lossless and consistent\n  with Windows.][46798]\n- [`time::{SystemTime, Instant}` now implement `Hash`.][46828]\n- [impl `From<bool>` for `AtomicBool`][46293]\n- [impl `From<{CString, &CStr}>` for `{Arc<CStr>, Rc<CStr>}`][45990]\n- [impl `From<{OsString, &OsStr}>` for `{Arc<OsStr>, Rc<OsStr>}`][45990]\n- [impl `From<{PathBuf, &Path}>` for `{Arc<Path>, Rc<Path>}`][45990]\n- [float::from_bits now just uses transmute.][46012] This provides\n  some optimisations from LLVM.\n- [Copied `AsciiExt` methods onto `char`][46077]\n- [Remove `T: Sized` requirement on `ptr::is_null()`][46094]\n- [impl `From<RecvError>` for `{TryRecvError, RecvTimeoutError}`][45506]\n- [Optimised `f32::{min, max}` to generate more efficient x86 assembly][47080]\n- [`[u8]::contains` now uses memchr which provides a 3x speed improvement][46713]\n\nStabilized APIs\n---------------\n- [`RefCell::replace`]\n- [`RefCell::swap`]\n- [`atomic::spin_loop_hint`]\n\nThe following functions can now be used in a constant expression.\neg. `let buffer: [u8; size_of::<usize>()];`, `static COUNTER: AtomicUsize = AtomicUsize::new(1);`\n\n- [`AtomicBool::new`][46287]\n- [`AtomicUsize::new`][46287]\n- [`AtomicIsize::new`][46287]\n- [`AtomicPtr::new`][46287]\n- [`Cell::new`][46287]\n- [`{integer}::min_value`][46287]\n- [`{integer}::max_value`][46287]\n- [`mem::size_of`][46287]\n- [`mem::align_of`][46287]\n- [`ptr::null`][46287]\n- [`ptr::null_mut`][46287]\n- [`RefCell::new`][46287]\n- [`UnsafeCell::new`][46287]\n\nCargo\n-----\n- [Added a `workspace.default-members` config that\n  overrides implied `--all` in virtual workspaces.][cargo/4743]\n- [Enable incremental by default on development builds.][cargo/4817] Also added\n  configuration keys to `Cargo.toml` and `.cargo/config` to disable on a\n  per-project or global basis respectively.\n\nMisc\n----\n\nCompatibility Notes\n-------------------\n- [Floating point types `Debug` impl now always prints a decimal point.][46831]\n- [`Ipv6Addr` now rejects superfluous `::`'s in IPv6 addresses][46671] This is\n  in accordance with IETF RFC 4291 §2.2.\n- [Unwinding will no longer go past FFI boundaries, and will instead abort.][46833]\n- [`Formatter::flags` method is now deprecated.][46284] The `sign_plus`,\n  `sign_minus`, `alternate`, and `sign_aware_zero_pad` should be used instead.\n- [Leading zeros in tuple struct members is now an error][47084]\n- [`column!()` macro is one-based instead of zero-based][46977]\n- [`fmt::Arguments` can no longer be shared across threads][45198]\n- [Access to `#[repr(packed)]` struct fields is now unsafe][44884]\n- [Cargo sets a different working directory for the compiler][cargo/4788]\n\n[44884]: https://github.com/rust-lang/rust/pull/44884\n[45198]: https://github.com/rust-lang/rust/pull/45198\n[45506]: https://github.com/rust-lang/rust/pull/45506\n[45990]: https://github.com/rust-lang/rust/pull/45990\n[46012]: https://github.com/rust-lang/rust/pull/46012\n[46077]: https://github.com/rust-lang/rust/pull/46077\n[46094]: https://github.com/rust-lang/rust/pull/46094\n[46284]: https://github.com/rust-lang/rust/pull/46284\n[46287]: https://github.com/rust-lang/rust/pull/46287\n[46293]: https://github.com/rust-lang/rust/pull/46293\n[46528]: https://github.com/rust-lang/rust/pull/46528\n[46671]: https://github.com/rust-lang/rust/pull/46671\n[46713]: https://github.com/rust-lang/rust/pull/46713\n[46735]: https://github.com/rust-lang/rust/pull/46735\n[46760]: https://github.com/rust-lang/rust/pull/46760\n[46798]: https://github.com/rust-lang/rust/pull/46798\n[46828]: https://github.com/rust-lang/rust/pull/46828\n[46831]: https://github.com/rust-lang/rust/pull/46831\n[46833]: https://github.com/rust-lang/rust/pull/46833\n[46910]: https://github.com/rust-lang/rust/pull/46910\n[46977]: https://github.com/rust-lang/rust/pull/46977\n[47018]: https://github.com/rust-lang/rust/pull/47018\n[47080]: https://github.com/rust-lang/rust/pull/47080\n[47084]: https://github.com/rust-lang/rust/pull/47084\n[cargo/4743]: https://github.com/rust-lang/cargo/pull/4743\n[cargo/4788]: https://github.com/rust-lang/cargo/pull/4788\n[cargo/4817]: https://github.com/rust-lang/cargo/pull/4817\n[`RefCell::replace`]: https://doc.rust-lang.org/std/cell/struct.RefCell.html#method.replace\n[`RefCell::swap`]: https://doc.rust-lang.org/std/cell/struct.RefCell.html#method.swap\n[`atomic::spin_loop_hint`]: https://doc.rust-lang.org/std/sync/atomic/fn.spin_loop_hint.html\n\n\nVersion 1.23.0 (2018-01-04)\n==========================\n\nLanguage\n--------\n- [Arbitrary `auto` traits are now permitted in trait objects.][45772]\n- [rustc now uses subtyping on the left hand side of binary operations.][45435]\n  Which should fix some confusing errors in some operations.\n\nCompiler\n--------\n- [Enabled `TrapUnreachable` in LLVM which should mitigate the impact of\n  undefined behavior.][45920]\n- [rustc now suggests renaming import if names clash.][45660]\n- [Display errors/warnings correctly when there are zero-width or\n  wide characters.][45711]\n- [rustc now avoids unnecessary copies of arguments that are\n  simple bindings][45380] This should improve memory usage on average by 5-10%.\n- [Updated musl used to build musl rustc to 1.1.17][45393]\n\nLibraries\n---------\n- [Allow a trailing comma in `assert_eq/ne` macro][45887]\n- [Implement Hash for raw pointers to unsized types][45483]\n- [impl `From<*mut T>` for `AtomicPtr<T>`][45610]\n- [impl `From<usize/isize>` for `AtomicUsize/AtomicIsize`.][45610]\n- [Removed the `T: Sync` requirement for `RwLock<T>: Send`][45267]\n- [Removed `T: Sized` requirement for `{<*const T>, <*mut T>}::as_ref`\n  and `<*mut T>::as_mut`][44932]\n- [Optimized `Thread::{park, unpark}` implementation][45524]\n- [Improved `SliceExt::binary_search` performance.][45333]\n- [impl `FromIterator<()>` for `()`][45379]\n- [Copied `AsciiExt` trait methods to primitive types.][44042] Use of `AsciiExt`\n  is now deprecated.\n\nStabilized APIs\n---------------\n\nCargo\n-----\n- [Cargo now supports uninstallation of multiple packages][cargo/4561]\n  eg. `cargo uninstall foo bar` uninstalls `foo` and `bar`.\n- [Added unit test checking to `cargo check`][cargo/4592]\n- [Cargo now lets you install a specific version\n  using `cargo install --version`][cargo/4637]\n\nMisc\n----\n- [Releases now ship with the Cargo book documentation.][45692]\n- [rustdoc now prints rendering warnings on every run.][45324]\n\nCompatibility Notes\n-------------------\n- [Changes have been made to type equality to make it more correct,\n  in rare cases this could break some code.][45853] [Tracking issue for\n  further information][45852]\n- [`char::escape_debug` now uses Unicode 10 over 9.][45571]\n- [Upgraded Android SDK to 27, and NDK to r15c.][45580] This drops support for\n  Android 9, the minimum supported version is Android 14.\n- [Bumped the minimum LLVM to 3.9][45326]\n\n[44042]: https://github.com/rust-lang/rust/pull/44042\n[44932]: https://github.com/rust-lang/rust/pull/44932\n[45267]: https://github.com/rust-lang/rust/pull/45267\n[45324]: https://github.com/rust-lang/rust/pull/45324\n[45326]: https://github.com/rust-lang/rust/pull/45326\n[45333]: https://github.com/rust-lang/rust/pull/45333\n[45379]: https://github.com/rust-lang/rust/pull/45379\n[45380]: https://github.com/rust-lang/rust/pull/45380\n[45393]: https://github.com/rust-lang/rust/pull/45393\n[45435]: https://github.com/rust-lang/rust/pull/45435\n[45483]: https://github.com/rust-lang/rust/pull/45483\n[45524]: https://github.com/rust-lang/rust/pull/45524\n[45571]: https://github.com/rust-lang/rust/pull/45571\n[45580]: https://github.com/rust-lang/rust/pull/45580\n[45610]: https://github.com/rust-lang/rust/pull/45610\n[45660]: https://github.com/rust-lang/rust/pull/45660\n[45692]: https://github.com/rust-lang/rust/pull/45692\n[45711]: https://github.com/rust-lang/rust/pull/45711\n[45772]: https://github.com/rust-lang/rust/pull/45772\n[45852]: https://github.com/rust-lang/rust/issues/45852\n[45853]: https://github.com/rust-lang/rust/pull/45853\n[45887]: https://github.com/rust-lang/rust/pull/45887\n[45920]: https://github.com/rust-lang/rust/pull/45920\n[cargo/4561]: https://github.com/rust-lang/cargo/pull/4561\n[cargo/4592]: https://github.com/rust-lang/cargo/pull/4592\n[cargo/4637]: https://github.com/rust-lang/cargo/pull/4637\n\n\nVersion 1.22.1 (2017-11-22)\n==========================\n\n- [Update Cargo to fix an issue with macOS 10.13 \"High Sierra\"][46183]\n\n[46183]: https://github.com/rust-lang/rust/pull/46183\n\nVersion 1.22.0 (2017-11-22)\n==========================\n\nLanguage\n--------\n- [`non_snake_case` lint now allows extern no-mangle functions][44966]\n- [Now accepts underscores in unicode escapes][43716]\n- [`T op= &T` now works for numeric types.][44287] eg. `let mut x = 2; x += &8;`\n- [types that impl `Drop` are now allowed in `const` and `static` types][44456]\n\nCompiler\n--------\n- [rustc now defaults to having 16 codegen units at debug on supported platforms.][45064]\n- [rustc will no longer inline in codegen units when compiling for debug][45075]\n  This should decrease compile times for debug builds.\n- [strict memory alignment now enabled on ARMv6][45094]\n- [Remove support for the PNaCl target `le32-unknown-nacl`][45041]\n\nLibraries\n---------\n- [Allow atomic operations up to 32 bits\n  on `armv5te_unknown_linux_gnueabi`][44978]\n- [`Box<Error>` now impls `From<Cow<str>>`][44466]\n- [`std::mem::Discriminant` is now guaranteed to be `Send + Sync`][45095]\n- [`fs::copy` now returns the length of the main stream on NTFS.][44895]\n- [Properly detect overflow in `Instant += Duration`.][44220]\n- [impl `Hasher` for `{&mut Hasher, Box<Hasher>}`][44015]\n- [impl `fmt::Debug` for `SplitWhitespace`.][44303]\n- [`Option<T>` now impls `Try`][42526] This allows for using `?` with `Option` types.\n\nStabilized APIs\n---------------\n\nCargo\n-----\n- [Cargo will now build multi file examples in subdirectories of the `examples`\n  folder that have a `main.rs` file.][cargo/4496]\n- [Changed `[root]` to `[package]` in `Cargo.lock`][cargo/4571] Packages with\n  the old format will continue to work and can be updated with `cargo update`.\n- [Now supports vendoring git repositories][cargo/3992]\n\nMisc\n----\n- [`libbacktrace` is now available on Apple platforms.][44251]\n- [Stabilised the `compile_fail` attribute for code fences in doc-comments.][43949]\n  This now lets you specify that a given code example will fail to compile.\n\nCompatibility Notes\n-------------------\n- [The minimum Android version that rustc can build for has been bumped\n  to `4.0` from `2.3`][45656]\n- [Allowing `T op= &T` for numeric types has broken some type\n  inference cases][45480]\n\n\n[42526]: https://github.com/rust-lang/rust/pull/42526\n[43716]: https://github.com/rust-lang/rust/pull/43716\n[43949]: https://github.com/rust-lang/rust/pull/43949\n[44015]: https://github.com/rust-lang/rust/pull/44015\n[44220]: https://github.com/rust-lang/rust/pull/44220\n[44251]: https://github.com/rust-lang/rust/pull/44251\n[44287]: https://github.com/rust-lang/rust/pull/44287\n[44303]: https://github.com/rust-lang/rust/pull/44303\n[44456]: https://github.com/rust-lang/rust/pull/44456\n[44466]: https://github.com/rust-lang/rust/pull/44466\n[44895]: https://github.com/rust-lang/rust/pull/44895\n[44966]: https://github.com/rust-lang/rust/pull/44966\n[44978]: https://github.com/rust-lang/rust/pull/44978\n[45041]: https://github.com/rust-lang/rust/pull/45041\n[45064]: https://github.com/rust-lang/rust/pull/45064\n[45075]: https://github.com/rust-lang/rust/pull/45075\n[45094]: https://github.com/rust-lang/rust/pull/45094\n[45095]: https://github.com/rust-lang/rust/pull/45095\n[45480]: https://github.com/rust-lang/rust/issues/45480\n[45656]: https://github.com/rust-lang/rust/pull/45656\n[cargo/3992]: https://github.com/rust-lang/cargo/pull/3992\n[cargo/4496]: https://github.com/rust-lang/cargo/pull/4496\n[cargo/4571]: https://github.com/rust-lang/cargo/pull/4571\n\n\n\n\n\n\nVersion 1.21.0 (2017-10-12)\n==========================\n\nLanguage\n--------\n- [You can now use static references for literals.][43838]\n  Example:\n  ```rust\n  fn main() {\n      let x: &'static u32 = &0;\n  }\n  ```\n- [Relaxed path syntax. Optional `::` before `<` is now allowed in all contexts.][43540]\n  Example:\n  ```rust\n  my_macro!(Vec<i32>::new); // Always worked\n  my_macro!(Vec::<i32>::new); // Now works\n  ```\n\nCompiler\n--------\n- [Upgraded jemalloc to 4.5.0][43911]\n- [Enabled unwinding panics on Redox][43917]\n- [Now runs LLVM in parallel during translation phase.][43506]\n  This should reduce peak memory usage.\n\nLibraries\n---------\n- [Generate builtin impls for `Clone` for all arrays and tuples that\n  are `T: Clone`][43690]\n- [`Stdin`, `Stdout`, and `Stderr` now implement `AsRawFd`.][43459]\n- [`Rc` and `Arc` now implement `From<&[T]> where T: Clone`, `From<str>`,\n  `From<String>`, `From<Box<T>> where T: ?Sized`, and `From<Vec<T>>`.][42565]\n\nStabilized APIs\n---------------\n\n[`std::mem::discriminant`]\n\nCargo\n-----\n- [You can now call `cargo install` with multiple package names][cargo/4216]\n- [Cargo commands inside a virtual workspace will now implicitly\n  pass `--all`][cargo/4335]\n- [Added a `[patch]` section to `Cargo.toml` to handle\n  prepublication dependencies][cargo/4123] [RFC 1969]\n- [`include` & `exclude` fields in `Cargo.toml` now accept gitignore\n  like patterns][cargo/4270]\n- [Added the `--all-targets` option][cargo/4400]\n- [Using required dependencies as a feature is now deprecated and emits\n  a warning][cargo/4364]\n\n\nMisc\n----\n- [Cargo docs are moving][43916]\n  to [doc.rust-lang.org/cargo](https://doc.rust-lang.org/cargo)\n- [The rustdoc book is now available][43863]\n  at [doc.rust-lang.org/rustdoc](https://doc.rust-lang.org/rustdoc)\n- [Added a preview of RLS has been made available through rustup][44204]\n  Install with `rustup component add rls-preview`\n- [`std::os` documentation for Unix, Linux, and Windows now appears on doc.rust-lang.org][43348]\n  Previously only showed `std::os::unix`.\n\nCompatibility Notes\n-------------------\n- [Changes in method matching against higher-ranked types][43880] This may cause\n  breakage in subtyping corner cases. [A more in-depth explanation is available.][info/43880]\n- [rustc's JSON error output's byte position start at top of file.][42973]\n  Was previously relative to the rustc's internal `CodeMap` struct which\n  required the unstable library `libsyntax` to correctly use.\n- [`unused_results` lint no longer ignores booleans][43728]\n\n[42565]: https://github.com/rust-lang/rust/pull/42565\n[42973]: https://github.com/rust-lang/rust/pull/42973\n[43348]: https://github.com/rust-lang/rust/pull/43348\n[43459]: https://github.com/rust-lang/rust/pull/43459\n[43506]: https://github.com/rust-lang/rust/pull/43506\n[43540]: https://github.com/rust-lang/rust/pull/43540\n[43690]: https://github.com/rust-lang/rust/pull/43690\n[43728]: https://github.com/rust-lang/rust/pull/43728\n[43838]: https://github.com/rust-lang/rust/pull/43838\n[43863]: https://github.com/rust-lang/rust/pull/43863\n[43880]: https://github.com/rust-lang/rust/pull/43880\n[43911]: https://github.com/rust-lang/rust/pull/43911\n[43916]: https://github.com/rust-lang/rust/pull/43916\n[43917]: https://github.com/rust-lang/rust/pull/43917\n[44204]: https://github.com/rust-lang/rust/pull/44204\n[cargo/4123]: https://github.com/rust-lang/cargo/pull/4123\n[cargo/4216]: https://github.com/rust-lang/cargo/pull/4216\n[cargo/4270]: https://github.com/rust-lang/cargo/pull/4270\n[cargo/4335]: https://github.com/rust-lang/cargo/pull/4335\n[cargo/4364]: https://github.com/rust-lang/cargo/pull/4364\n[cargo/4400]: https://github.com/rust-lang/cargo/pull/4400\n[RFC 1969]: https://github.com/rust-lang/rfcs/pull/1969\n[info/43880]: https://github.com/rust-lang/rust/issues/44224#issuecomment-330058902\n[`std::mem::discriminant`]: https://doc.rust-lang.org/std/mem/fn.discriminant.html\n\nVersion 1.20.0 (2017-08-31)\n===========================\n\nLanguage\n--------\n- [Associated constants are now stabilised.][42809]\n- [A lot of macro bugs are now fixed.][42913]\n\nCompiler\n--------\n\n- [Struct fields are now properly coerced to the expected field type.][42807]\n- [Enabled wasm LLVM backend][42571] WASM can now be built with the\n  `wasm32-experimental-emscripten` target.\n- [Changed some of the error messages to be more helpful.][42033]\n- [Add support for RELRO(RELocation Read-Only) for platforms that support\n  it.][43170]\n- [rustc now reports the total number of errors on compilation failure][43015]\n  previously this was only the number of errors in the pass that failed.\n- [Expansion in rustc has been sped up 29x.][42533]\n- [added `msp430-none-elf` target.][43099]\n- [rustc will now suggest one-argument enum variant to fix type mismatch when\n  applicable][43178]\n- [Fixes backtraces on Redox][43228]\n- [rustc now identifies different versions of same crate when absolute paths of\n  different types match in an error message.][42826]\n\nLibraries\n---------\n\n\n- [Relaxed Debug constraints on `{HashMap,BTreeMap}::{Keys,Values}`.][42854]\n- [Impl `PartialEq`, `Eq`, `PartialOrd`, `Ord`, `Debug`, `Hash` for unsized\n  tuples.][43011]\n- [Impl `fmt::{Display, Debug}` for `Ref`, `RefMut`, `MutexGuard`,\n  `RwLockReadGuard`, `RwLockWriteGuard`][42822]\n- [Impl `Clone` for `DefaultHasher`.][42799]\n- [Impl `Sync` for `SyncSender`.][42397]\n- [Impl `FromStr` for `char`][42271]\n- [Fixed how `{f32, f64}::{is_sign_negative, is_sign_positive}` handles\n  NaN.][42431]\n- [allow messages in the `unimplemented!()` macro.][42155]\n  ie. `unimplemented!(\"Waiting for 1.21 to be stable\")`\n- [`pub(restricted)` is now supported in the `thread_local!` macro.][43185]\n- [Upgrade to Unicode 10.0.0][42999]\n- [Reimplemented `{f32, f64}::{min, max}` in Rust instead of using CMath.][42430]\n- [Skip the main thread's manual stack guard on Linux][43072]\n- [Iterator::nth for `ops::{Range, RangeFrom}` is now done in *O*(1) time][43077]\n- [`#[repr(align(N))]` attribute max number is now 2^31 - 1.][43097] This was\n  previously 2^15.\n- [`{OsStr, Path}::Display` now avoids allocations where possible][42613]\n\nStabilized APIs\n---------------\n\n- [`CStr::into_c_string`]\n- [`CString::as_c_str`]\n- [`CString::into_boxed_c_str`]\n- [`Chain::get_mut`]\n- [`Chain::get_ref`]\n- [`Chain::into_inner`]\n- [`Option::get_or_insert_with`]\n- [`Option::get_or_insert`]\n- [`OsStr::into_os_string`]\n- [`OsString::into_boxed_os_str`]\n- [`Take::get_mut`]\n- [`Take::get_ref`]\n- [`Utf8Error::error_len`]\n- [`char::EscapeDebug`]\n- [`char::escape_debug`]\n- [`compile_error!`]\n- [`f32::from_bits`]\n- [`f32::to_bits`]\n- [`f64::from_bits`]\n- [`f64::to_bits`]\n- [`mem::ManuallyDrop`]\n- [`slice::sort_unstable_by_key`]\n- [`slice::sort_unstable_by`]\n- [`slice::sort_unstable`]\n- [`str::from_boxed_utf8_unchecked`]\n- [`str::as_bytes_mut`]\n- [`str::as_bytes_mut`]\n- [`str::from_utf8_mut`]\n- [`str::from_utf8_unchecked_mut`]\n- [`str::get_mut`]\n- [`str::get_unchecked_mut`]\n- [`str::get_unchecked`]\n- [`str::get`]\n- [`str::into_boxed_bytes`]\n\n\nCargo\n-----\n- [Cargo API token location moved from `~/.cargo/config` to\n  `~/.cargo/credentials`.][cargo/3978]\n- [Cargo will now build `main.rs` binaries that are in sub-directories of\n  `src/bin`.][cargo/4214] ie. Having `src/bin/server/main.rs` and\n  `src/bin/client/main.rs` generates `target/debug/server` and `target/debug/client`\n- [You can now specify version of a binary when installed through\n  `cargo install` using `--vers`.][cargo/4229]\n- [Added `--no-fail-fast` flag to cargo to run all benchmarks regardless of\n  failure.][cargo/4248]\n- [Changed the convention around which file is the crate root.][cargo/4259]\n\nCompatibility Notes\n-------------------\n\n- [Functions with `'static` in their return types will now not be as usable as\n  if they were using lifetime parameters instead.][42417]\n- [The reimplementation of `{f32, f64}::is_sign_{negative, positive}` now\n  takes the sign of NaN into account where previously didn't.][42430]\n\n[42033]: https://github.com/rust-lang/rust/pull/42033\n[42155]: https://github.com/rust-lang/rust/pull/42155\n[42271]: https://github.com/rust-lang/rust/pull/42271\n[42397]: https://github.com/rust-lang/rust/pull/42397\n[42417]: https://github.com/rust-lang/rust/pull/42417\n[42430]: https://github.com/rust-lang/rust/pull/42430\n[42431]: https://github.com/rust-lang/rust/pull/42431\n[42533]: https://github.com/rust-lang/rust/pull/42533\n[42571]: https://github.com/rust-lang/rust/pull/42571\n[42613]: https://github.com/rust-lang/rust/pull/42613\n[42799]: https://github.com/rust-lang/rust/pull/42799\n[42807]: https://github.com/rust-lang/rust/pull/42807\n[42809]: https://github.com/rust-lang/rust/pull/42809\n[42822]: https://github.com/rust-lang/rust/pull/42822\n[42826]: https://github.com/rust-lang/rust/pull/42826\n[42854]: https://github.com/rust-lang/rust/pull/42854\n[42913]: https://github.com/rust-lang/rust/pull/42913\n[42999]: https://github.com/rust-lang/rust/pull/42999\n[43011]: https://github.com/rust-lang/rust/pull/43011\n[43015]: https://github.com/rust-lang/rust/pull/43015\n[43072]: https://github.com/rust-lang/rust/pull/43072\n[43077]: https://github.com/rust-lang/rust/pull/43077\n[43097]: https://github.com/rust-lang/rust/pull/43097\n[43099]: https://github.com/rust-lang/rust/pull/43099\n[43170]: https://github.com/rust-lang/rust/pull/43170\n[43178]: https://github.com/rust-lang/rust/pull/43178\n[43185]: https://github.com/rust-lang/rust/pull/43185\n[43228]: https://github.com/rust-lang/rust/pull/43228\n[cargo/3978]: https://github.com/rust-lang/cargo/pull/3978\n[cargo/4214]: https://github.com/rust-lang/cargo/pull/4214\n[cargo/4229]: https://github.com/rust-lang/cargo/pull/4229\n[cargo/4248]: https://github.com/rust-lang/cargo/pull/4248\n[cargo/4259]: https://github.com/rust-lang/cargo/pull/4259\n[`CStr::into_c_string`]: https://doc.rust-lang.org/std/ffi/struct.CStr.html#method.into_c_string\n[`CString::as_c_str`]: https://doc.rust-lang.org/std/ffi/struct.CString.html#method.as_c_str\n[`CString::into_boxed_c_str`]: https://doc.rust-lang.org/std/ffi/struct.CString.html#method.into_boxed_c_str\n[`Chain::get_mut`]: https://doc.rust-lang.org/std/io/struct.Chain.html#method.get_mut\n[`Chain::get_ref`]: https://doc.rust-lang.org/std/io/struct.Chain.html#method.get_ref\n[`Chain::into_inner`]: https://doc.rust-lang.org/std/io/struct.Chain.html#method.into_inner\n[`Option::get_or_insert_with`]: https://doc.rust-lang.org/std/option/enum.Option.html#method.get_or_insert_with\n[`Option::get_or_insert`]: https://doc.rust-lang.org/std/option/enum.Option.html#method.get_or_insert\n[`OsStr::into_os_string`]: https://doc.rust-lang.org/std/ffi/struct.OsStr.html#method.into_os_string\n[`OsString::into_boxed_os_str`]: https://doc.rust-lang.org/std/ffi/struct.OsString.html#method.into_boxed_os_str\n[`Take::get_mut`]: https://doc.rust-lang.org/std/io/struct.Take.html#method.get_mut\n[`Take::get_ref`]: https://doc.rust-lang.org/std/io/struct.Take.html#method.get_ref\n[`Utf8Error::error_len`]: https://doc.rust-lang.org/std/str/struct.Utf8Error.html#method.error_len\n[`char::EscapeDebug`]: https://doc.rust-lang.org/std/char/struct.EscapeDebug.html\n[`char::escape_debug`]: https://doc.rust-lang.org/std/primitive.char.html#method.escape_debug\n[`compile_error!`]: https://doc.rust-lang.org/std/macro.compile_error.html\n[`f32::from_bits`]: https://doc.rust-lang.org/std/primitive.f32.html#method.from_bits\n[`f32::to_bits`]: https://doc.rust-lang.org/std/primitive.f32.html#method.to_bits\n[`f64::from_bits`]: https://doc.rust-lang.org/std/primitive.f64.html#method.from_bits\n[`f64::to_bits`]: https://doc.rust-lang.org/std/primitive.f64.html#method.to_bits\n[`mem::ManuallyDrop`]: https://doc.rust-lang.org/std/mem/union.ManuallyDrop.html\n[`slice::sort_unstable_by_key`]: https://doc.rust-lang.org/std/primitive.slice.html#method.sort_unstable_by_key\n[`slice::sort_unstable_by`]: https://doc.rust-lang.org/std/primitive.slice.html#method.sort_unstable_by\n[`slice::sort_unstable`]: https://doc.rust-lang.org/std/primitive.slice.html#method.sort_unstable\n[`str::from_boxed_utf8_unchecked`]: https://doc.rust-lang.org/std/str/fn.from_boxed_utf8_unchecked.html\n[`str::as_bytes_mut`]: https://doc.rust-lang.org/std/primitive.str.html#method.as_bytes_mut\n[`str::from_utf8_mut`]: https://doc.rust-lang.org/std/str/fn.from_utf8_mut.html\n[`str::from_utf8_unchecked_mut`]: https://doc.rust-lang.org/std/str/fn.from_utf8_unchecked_mut.html\n[`str::get_mut`]: https://doc.rust-lang.org/std/primitive.str.html#method.get_mut\n[`str::get_unchecked_mut`]: https://doc.rust-lang.org/std/primitive.str.html#method.get_unchecked_mut\n[`str::get_unchecked`]: https://doc.rust-lang.org/std/primitive.str.html#method.get_unchecked\n[`str::get`]: https://doc.rust-lang.org/std/primitive.str.html#method.get\n[`str::into_boxed_bytes`]: https://doc.rust-lang.org/std/primitive.str.html#method.into_boxed_bytes\n\n\nVersion 1.19.0 (2017-07-20)\n===========================\n\nLanguage\n--------\n\n- [Numeric fields can now be used for creating tuple structs.][41145] [RFC 1506]\n  For example `struct Point(u32, u32); let x = Point { 0: 7, 1: 0 };`.\n- [Macro recursion limit increased to 1024 from 64.][41676]\n- [Added lint for detecting unused macros.][41907]\n- [`loop` can now return a value with `break`.][42016] [RFC 1624]\n  For example: `let x = loop { break 7; };`\n- [C compatible `union`s are now available.][42068] [RFC 1444] They can only\n  contain `Copy` types and cannot have a `Drop` implementation.\n  Example: `union Foo { bar: u8, baz: usize }`\n- [Non capturing closures can now be coerced into `fn`s,][42162] [RFC 1558]\n  Example: `let foo: fn(u8) -> u8 = |v: u8| { v };`\n\nCompiler\n--------\n\n- [Add support for bootstrapping the Rust compiler toolchain on Android.][41370]\n- [Change `arm-linux-androideabi` to correspond to the `armeabi`\n  official ABI.][41656] If you wish to continue targeting the `armeabi-v7a` ABI\n  you should use `--target armv7-linux-androideabi`.\n- [Fixed ICE when removing a source file between compilation sessions.][41873]\n- [Minor optimisation of string operations.][42037]\n- [Compiler error message is now `aborting due to previous error(s)` instead of\n  `aborting due to N previous errors`][42150] This was previously inaccurate and\n  would only count certain kinds of errors.\n- [The compiler now supports Visual Studio 2017][42225]\n- [The compiler is now built against LLVM 4.0.1 by default][42948]\n- [Added a lot][42264] of [new error codes][42302]\n- [Added `target-feature=+crt-static` option][37406] [RFC 1721] Which allows\n  libraries with C Run-time Libraries(CRT) to be statically linked.\n- [Fixed various ARM codegen bugs][42740]\n\nLibraries\n---------\n\n- [`String` now implements `FromIterator<Cow<'a, str>>` and\n  `Extend<Cow<'a, str>>`][41449]\n- [`Vec` now implements `From<&mut [T]>`][41530]\n- [`Box<[u8]>` now implements `From<Box<str>>`][41258]\n- [`SplitWhitespace` now implements `Clone`][41659]\n- [`[u8]::reverse` is now 5x faster and `[u16]::reverse` is now\n  1.5x faster][41764]\n- [`eprint!` and `eprintln!` macros added to prelude.][41192] Same as the `print!`\n  macros, but for printing to stderr.\n\nStabilized APIs\n---------------\n\n- [`OsString::shrink_to_fit`]\n- [`cmp::Reverse`]\n- [`Command::envs`]\n- [`thread::ThreadId`]\n\nCargo\n-----\n\n- [Build scripts can now add environment variables to the environment\n  the crate is being compiled in.\n  Example: `println!(\"cargo:rustc-env=FOO=bar\");`][cargo/3929]\n- [Subcommands now replace the current process rather than spawning a new\n  child process][cargo/3970]\n- [Workspace members can now accept glob file patterns][cargo/3979]\n- [Added `--all` flag to the `cargo bench` subcommand to run benchmarks of all\n  the members in a given workspace.][cargo/3988]\n- [Updated `libssh2-sys` to 0.2.6][cargo/4008]\n- [Target directory path is now in the cargo metadata][cargo/4022]\n- [Cargo no longer checks out a local working directory for the\n  crates.io index][cargo/4026] This should provide smaller file size for the\n  registry, and improve cloning times, especially on Windows machines.\n- [Added an `--exclude` option for excluding certain packages when using the\n  `--all` option][cargo/4031]\n- [Cargo will now automatically retry when receiving a 5xx error\n  from crates.io][cargo/4032]\n- [The `--features` option now accepts multiple comma or space\n  delimited values.][cargo/4084]\n- [Added support for custom target specific runners][cargo/3954]\n\nMisc\n----\n\n- [Added `rust-windbg.cmd`][39983] for loading rust `.natvis` files in the\n  Windows Debugger.\n- [Rust will now release XZ compressed packages][rust-installer/57]\n- [rustup will now prefer to download rust packages with\n  XZ compression][rustup/1100] over GZip packages.\n- [Added the ability to escape `#` in rust documentation][41785] By adding\n  additional `#`'s ie. `##` is now `#`\n\nCompatibility Notes\n-------------------\n\n- [`MutexGuard<T>` may only be `Sync` if `T` is `Sync`.][41624]\n- [`-Z` flags are now no longer allowed to be used on the stable\n  compiler.][41751] This has been a warning for a year previous to this.\n- [As a result of the `-Z` flag change, the `cargo-check` plugin no\n  longer works][42844]. Users should migrate to the built-in `check`\n  command, which has been available since 1.16.\n- [Ending a float literal with `._` is now a hard error.\n  Example: `42._` .][41946]\n- [Any use of a private `extern crate` outside of its module is now a\n  hard error.][36886] This was previously a warning.\n- [`use ::self::foo;` is now a hard error.][36888] `self` paths are always\n  relative while the `::` prefix makes a path absolute, but was ignored and the\n  path was relative regardless.\n- [Floating point constants in match patterns is now a hard error][36890]\n  This was previously a warning.\n- [Struct or enum constants that don't derive `PartialEq` & `Eq` used\n  match patterns is now a hard error][36891] This was previously a warning.\n- [Lifetimes named `'_` are no longer allowed.][36892] This was previously\n  a warning.\n- [From the pound escape, lines consisting of multiple `#`s are\n  now visible][41785]\n- [It is an error to re-export private enum variants][42460]. This is\n  known to break a number of crates that depend on an older version of\n  mustache.\n- [On Windows, if `VCINSTALLDIR` is set incorrectly, `rustc` will try\n  to use it to find the linker, and the build will fail where it did\n  not previously][42607]\n\n[36886]: https://github.com/rust-lang/rust/issues/36886\n[36888]: https://github.com/rust-lang/rust/issues/36888\n[36890]: https://github.com/rust-lang/rust/issues/36890\n[36891]: https://github.com/rust-lang/rust/issues/36891\n[36892]: https://github.com/rust-lang/rust/issues/36892\n[37406]: https://github.com/rust-lang/rust/issues/37406\n[39983]: https://github.com/rust-lang/rust/pull/39983\n[41145]: https://github.com/rust-lang/rust/pull/41145\n[41192]: https://github.com/rust-lang/rust/pull/41192\n[41258]: https://github.com/rust-lang/rust/pull/41258\n[41370]: https://github.com/rust-lang/rust/pull/41370\n[41449]: https://github.com/rust-lang/rust/pull/41449\n[41530]: https://github.com/rust-lang/rust/pull/41530\n[41624]: https://github.com/rust-lang/rust/pull/41624\n[41656]: https://github.com/rust-lang/rust/pull/41656\n[41659]: https://github.com/rust-lang/rust/pull/41659\n[41676]: https://github.com/rust-lang/rust/pull/41676\n[41751]: https://github.com/rust-lang/rust/pull/41751\n[41764]: https://github.com/rust-lang/rust/pull/41764\n[41785]: https://github.com/rust-lang/rust/pull/41785\n[41873]: https://github.com/rust-lang/rust/pull/41873\n[41907]: https://github.com/rust-lang/rust/pull/41907\n[41946]: https://github.com/rust-lang/rust/pull/41946\n[42016]: https://github.com/rust-lang/rust/pull/42016\n[42037]: https://github.com/rust-lang/rust/pull/42037\n[42068]: https://github.com/rust-lang/rust/pull/42068\n[42150]: https://github.com/rust-lang/rust/pull/42150\n[42162]: https://github.com/rust-lang/rust/pull/42162\n[42225]: https://github.com/rust-lang/rust/pull/42225\n[42264]: https://github.com/rust-lang/rust/pull/42264\n[42302]: https://github.com/rust-lang/rust/pull/42302\n[42460]: https://github.com/rust-lang/rust/issues/42460\n[42607]: https://github.com/rust-lang/rust/issues/42607\n[42740]: https://github.com/rust-lang/rust/pull/42740\n[42844]: https://github.com/rust-lang/rust/issues/42844\n[42948]: https://github.com/rust-lang/rust/pull/42948\n[RFC 1444]: https://github.com/rust-lang/rfcs/pull/1444\n[RFC 1506]: https://github.com/rust-lang/rfcs/pull/1506\n[RFC 1558]: https://github.com/rust-lang/rfcs/pull/1558\n[RFC 1624]: https://github.com/rust-lang/rfcs/pull/1624\n[RFC 1721]: https://github.com/rust-lang/rfcs/pull/1721\n[`Command::envs`]: https://doc.rust-lang.org/std/process/struct.Command.html#method.envs\n[`OsString::shrink_to_fit`]: https://doc.rust-lang.org/std/ffi/struct.OsString.html#method.shrink_to_fit\n[`cmp::Reverse`]: https://doc.rust-lang.org/std/cmp/struct.Reverse.html\n[`thread::ThreadId`]: https://doc.rust-lang.org/std/thread/struct.ThreadId.html\n[cargo/3929]: https://github.com/rust-lang/cargo/pull/3929\n[cargo/3954]: https://github.com/rust-lang/cargo/pull/3954\n[cargo/3970]: https://github.com/rust-lang/cargo/pull/3970\n[cargo/3979]: https://github.com/rust-lang/cargo/pull/3979\n[cargo/3988]: https://github.com/rust-lang/cargo/pull/3988\n[cargo/4008]: https://github.com/rust-lang/cargo/pull/4008\n[cargo/4022]: https://github.com/rust-lang/cargo/pull/4022\n[cargo/4026]: https://github.com/rust-lang/cargo/pull/4026\n[cargo/4031]: https://github.com/rust-lang/cargo/pull/4031\n[cargo/4032]: https://github.com/rust-lang/cargo/pull/4032\n[cargo/4084]: https://github.com/rust-lang/cargo/pull/4084\n[rust-installer/57]: https://github.com/rust-lang/rust-installer/pull/57\n[rustup/1100]: https://github.com/rust-lang-nursery/rustup.rs/pull/1100\n\n\nVersion 1.18.0 (2017-06-08)\n===========================\n\nLanguage\n--------\n\n- [Stabilize pub(restricted)][40556] `pub` can now accept a module path to\n  make the item visible to just that module tree. Also accepts the keyword\n  `crate` to make something public to the whole crate but not users of the\n  library. Example: `pub(crate) mod utils;`. [RFC 1422].\n- [Stabilize `#![windows_subsystem]` attribute][40870] conservative exposure of the\n  `/SUBSYSTEM` linker flag on Windows platforms. [RFC 1665].\n- [Refactor of trait object type parsing][40043] Now `ty` in macros can accept\n  types like `Write + Send`, trailing `+` are now supported in trait objects,\n  and better error reporting for trait objects starting with `?Sized`.\n- [0e+10 is now a valid floating point literal][40589]\n- [Now warns if you bind a lifetime parameter to 'static][40734]\n- [Tuples, Enum variant fields, and structs with no `repr` attribute or with\n  `#[repr(Rust)]` are reordered to minimize padding and produce a smaller\n  representation in some cases.][40377]\n\nCompiler\n--------\n\n- [rustc can now emit mir with `--emit mir`][39891]\n- [Improved LLVM IR for trivial functions][40367]\n- [Added explanation for E0090(Wrong number of lifetimes are supplied)][40723]\n- [rustc compilation is now 15%-20% faster][41469] Thanks to optimisation\n  opportunities found through profiling\n- [Improved backtrace formatting when panicking][38165]\n\nLibraries\n---------\n\n- [Specialized `Vec::from_iter` being passed `vec::IntoIter`][40731] if the\n  iterator hasn't been advanced the original `Vec` is reassembled with no actual\n  iteration or reallocation.\n- [Simplified HashMap Bucket interface][40561] provides performance\n  improvements for iterating and cloning.\n- [Specialize Vec::from_elem to use calloc][40409]\n- [Fixed Race condition in fs::create_dir_all][39799]\n- [No longer caching stdio on Windows][40516]\n- [Optimized insertion sort in slice][40807] insertion sort in some cases\n  2.50%~ faster and in one case now 12.50% faster.\n- [Optimized `AtomicBool::fetch_nand`][41143]\n\nStabilized APIs\n---------------\n\n- [`Child::try_wait`]\n- [`HashMap::retain`]\n- [`HashSet::retain`]\n- [`PeekMut::pop`]\n- [`TcpStream::peek`]\n- [`UdpSocket::peek`]\n- [`UdpSocket::peek_from`]\n\nCargo\n-----\n\n- [Added partial Pijul support][cargo/3842] Pijul is a version control system in Rust.\n  You can now create new cargo projects with Pijul using `cargo new --vcs pijul`\n- [Now always emits build script warnings for crates that fail to build][cargo/3847]\n- [Added Android build support][cargo/3885]\n- [Added `--bins` and `--tests` flags][cargo/3901] now you can build all programs\n  of a certain type, for example `cargo build --bins` will build all\n  binaries.\n- [Added support for haiku][cargo/3952]\n\nMisc\n----\n\n- [rustdoc can now use pulldown-cmark with the `--enable-commonmark` flag][40338]\n- [Rust now uses the official cross compiler for NetBSD][40612]\n- [rustdoc now accepts `#` at the start of files][40828]\n- [Fixed jemalloc support for musl][41168]\n\nCompatibility Notes\n-------------------\n\n- [Changes to how the `0` flag works in format!][40241] Padding zeroes are now\n  always placed after the sign if it exists and before the digits. With the `#`\n  flag the zeroes are placed after the prefix and before the digits.\n- [Due to the struct field optimisation][40377], using `transmute` on structs\n  that have no `repr` attribute or `#[repr(Rust)]` will no longer work. This has\n  always been undefined behavior, but is now more likely to break in practice.\n- [The refactor of trait object type parsing][40043] fixed a bug where `+` was\n  receiving the wrong priority parsing things like `&for<'a> Tr<'a> + Send` as\n  `&(for<'a> Tr<'a> + Send)` instead of `(&for<'a> Tr<'a>) + Send`\n- [Overlapping inherent `impl`s are now a hard error][40728]\n- [`PartialOrd` and `Ord` must agree on the ordering.][41270]\n- [`rustc main.rs -o out --emit=asm,llvm-ir`][41085] Now will output\n  `out.asm` and `out.ll` instead of only one of the filetypes.\n- [ calling a function that returns `Self` will no longer work][41805] when\n  the size of `Self` cannot be statically determined.\n- [rustc now builds with a \"pthreads\" flavour of MinGW for Windows GNU][40805]\n  this has caused a few regressions namely:\n\n  - Changed the link order of local static/dynamic libraries (respecting the\n    order on given rather than having the compiler reorder).\n  - Changed how MinGW is linked, native code linked to dynamic libraries\n    may require manually linking to the gcc support library (for the native\n    code itself)\n\n[38165]: https://github.com/rust-lang/rust/pull/38165\n[39799]: https://github.com/rust-lang/rust/pull/39799\n[39891]: https://github.com/rust-lang/rust/pull/39891\n[40043]: https://github.com/rust-lang/rust/pull/40043\n[40241]: https://github.com/rust-lang/rust/pull/40241\n[40338]: https://github.com/rust-lang/rust/pull/40338\n[40367]: https://github.com/rust-lang/rust/pull/40367\n[40377]: https://github.com/rust-lang/rust/pull/40377\n[40409]: https://github.com/rust-lang/rust/pull/40409\n[40516]: https://github.com/rust-lang/rust/pull/40516\n[40556]: https://github.com/rust-lang/rust/pull/40556\n[40561]: https://github.com/rust-lang/rust/pull/40561\n[40589]: https://github.com/rust-lang/rust/pull/40589\n[40612]: https://github.com/rust-lang/rust/pull/40612\n[40723]: https://github.com/rust-lang/rust/pull/40723\n[40728]: https://github.com/rust-lang/rust/pull/40728\n[40731]: https://github.com/rust-lang/rust/pull/40731\n[40734]: https://github.com/rust-lang/rust/pull/40734\n[40805]: https://github.com/rust-lang/rust/pull/40805\n[40807]: https://github.com/rust-lang/rust/pull/40807\n[40828]: https://github.com/rust-lang/rust/pull/40828\n[40870]: https://github.com/rust-lang/rust/pull/40870\n[41085]: https://github.com/rust-lang/rust/pull/41085\n[41143]: https://github.com/rust-lang/rust/pull/41143\n[41168]: https://github.com/rust-lang/rust/pull/41168\n[41270]: https://github.com/rust-lang/rust/issues/41270\n[41469]: https://github.com/rust-lang/rust/pull/41469\n[41805]: https://github.com/rust-lang/rust/issues/41805\n[RFC 1422]: https://github.com/rust-lang/rfcs/blob/master/text/1422-pub-restricted.md\n[RFC 1665]: https://github.com/rust-lang/rfcs/blob/master/text/1665-windows-subsystem.md\n[`Child::try_wait`]: https://doc.rust-lang.org/std/process/struct.Child.html#method.try_wait\n[`HashMap::retain`]: https://doc.rust-lang.org/std/collections/struct.HashMap.html#method.retain\n[`HashSet::retain`]: https://doc.rust-lang.org/std/collections/struct.HashSet.html#method.retain\n[`PeekMut::pop`]: https://doc.rust-lang.org/std/collections/binary_heap/struct.PeekMut.html#method.pop\n[`TcpStream::peek`]: https://doc.rust-lang.org/std/net/struct.TcpStream.html#method.peek\n[`UdpSocket::peek_from`]: https://doc.rust-lang.org/std/net/struct.UdpSocket.html#method.peek_from\n[`UdpSocket::peek`]: https://doc.rust-lang.org/std/net/struct.UdpSocket.html#method.peek\n[cargo/3842]: https://github.com/rust-lang/cargo/pull/3842\n[cargo/3847]: https://github.com/rust-lang/cargo/pull/3847\n[cargo/3885]: https://github.com/rust-lang/cargo/pull/3885\n[cargo/3901]: https://github.com/rust-lang/cargo/pull/3901\n[cargo/3952]: https://github.com/rust-lang/cargo/pull/3952\n\n\nVersion 1.17.0 (2017-04-27)\n===========================\n\nLanguage\n--------\n\n* [The lifetime of statics and consts defaults to `'static`][39265]. [RFC 1623]\n* [Fields of structs may be initialized without duplicating the field/variable\n  names][39761]. [RFC 1682]\n* [`Self` may be included in the `where` clause of `impls`][38864]. [RFC 1647]\n* [When coercing to an unsized type lifetimes must be equal][40319]. That is,\n  there is no subtyping between `T` and `U` when `T: Unsize<U>`. For example,\n  coercing `&mut [&'a X; N]` to `&mut [&'b X]` requires `'a` be equal to\n  `'b`. Soundness fix.\n* [Values passed to the indexing operator, `[]`, automatically coerce][40166]\n* [Static variables may contain references to other statics][40027]\n\nCompiler\n--------\n\n* [Exit quickly on only `--emit dep-info`][40336]\n* [Make `-C relocation-model` more correctly determine whether the linker\n  creates a position-independent executable][40245]\n* [Add `-C overflow-checks` to directly control whether integer overflow\n  panics][40037]\n* [The rustc type checker now checks items on demand instead of in a single\n  in-order pass][40008]. This is mostly an internal refactoring in support of\n  future work, including incremental type checking, but also resolves [RFC\n  1647], allowing `Self` to appear in `impl` `where` clauses.\n* [Optimize vtable loads][39995]\n* [Turn off vectorization for Emscripten targets][39990]\n* [Provide suggestions for unknown macros imported with `use`][39953]\n* [Fix ICEs in path resolution][39939]\n* [Strip exception handling code on Emscripten when `panic=abort`][39193]\n* [Add clearer error message using `&str + &str`][39116]\n\nStabilized APIs\n---------------\n\n* [`Arc::into_raw`]\n* [`Arc::from_raw`]\n* [`Arc::ptr_eq`]\n* [`Rc::into_raw`]\n* [`Rc::from_raw`]\n* [`Rc::ptr_eq`]\n* [`Ordering::then`]\n* [`Ordering::then_with`]\n* [`BTreeMap::range`]\n* [`BTreeMap::range_mut`]\n* [`collections::Bound`]\n* [`process::abort`]\n* [`ptr::read_unaligned`]\n* [`ptr::write_unaligned`]\n* [`Result::expect_err`]\n* [`Cell::swap`]\n* [`Cell::replace`]\n* [`Cell::into_inner`]\n* [`Cell::take`]\n\nLibraries\n---------\n\n* [`BTreeMap` and `BTreeSet` can iterate over ranges][27787]\n* [`Cell` can store non-`Copy` types][39793]. [RFC 1651]\n* [`String` implements `FromIterator<&char>`][40028]\n* `Box` [implements][40009] a number of new conversions:\n  `From<Box<str>> for String`,\n  `From<Box<[T]>> for Vec<T>`,\n  `From<Box<CStr>> for CString`,\n  `From<Box<OsStr>> for OsString`,\n  `From<Box<Path>> for PathBuf`,\n  `Into<Box<str>> for String`,\n  `Into<Box<[T]>> for Vec<T>`,\n  `Into<Box<CStr>> for CString`,\n  `Into<Box<OsStr>> for OsString`,\n  `Into<Box<Path>> for PathBuf`,\n  `Default for Box<str>`,\n  `Default for Box<CStr>`,\n  `Default for Box<OsStr>`,\n  `From<&CStr> for Box<CStr>`,\n  `From<&OsStr> for Box<OsStr>`,\n  `From<&Path> for Box<Path>`\n* [`ffi::FromBytesWithNulError` implements `Error` and `Display`][39960]\n* [Specialize `PartialOrd<A> for [A] where A: Ord`][39642]\n* [Slightly optimize `slice::sort`][39538]\n* [Add `ToString` trait specialization for `Cow<'a, str>` and `String`][39440]\n* [`Box<[T]>` implements `From<&[T]> where T: Copy`,\n  `Box<str>` implements `From<&str>`][39438]\n* [`IpAddr` implements `From` for various arrays. `SocketAddr` implements\n  `From<(I, u16)> where I: Into<IpAddr>`][39372]\n* [`format!` estimates the needed capacity before writing a string][39356]\n* [Support unprivileged symlink creation in Windows][38921]\n* [`PathBuf` implements `Default`][38764]\n* [Implement `PartialEq<[A]>` for `VecDeque<A>`][38661]\n* [`HashMap` resizes adaptively][38368] to guard against DOS attacks\n  and poor hash functions.\n\nCargo\n-----\n\n* [Add `cargo check --all`][cargo/3731]\n* [Add an option to ignore SSL revocation checking][cargo/3699]\n* [Add `cargo run --package`][cargo/3691]\n* [Add `required_features`][cargo/3667]\n* [Assume `build.rs` is a build script][cargo/3664]\n* [Find workspace via `workspace_root` link in containing member][cargo/3562]\n\nMisc\n----\n\n* [Documentation is rendered with mdbook instead of the obsolete, in-tree\n  `rustbook`][39633]\n* [The \"Unstable Book\" documents nightly-only features][ubook]\n* [Improve the style of the sidebar in rustdoc output][40265]\n* [Configure build correctly on 64-bit CPU's with the armhf ABI][40261]\n* [Fix MSP430 breakage due to `i128`][40257]\n* [Preliminary Solaris/SPARCv9 support][39903]\n* [`rustc` is linked statically on Windows MSVC targets][39837], allowing it to\n  run without installing the MSVC runtime.\n* [`rustdoc --test` includes file names in test names][39788]\n* This release includes builds of `std` for `sparc64-unknown-linux-gnu`,\n  `aarch64-unknown-linux-fuchsia`, and `x86_64-unknown-linux-fuchsia`.\n* [Initial support for `aarch64-unknown-freebsd`][39491]\n* [Initial support for `i686-unknown-netbsd`][39426]\n* [This release no longer includes the old makefile build system][39431]. Rust\n  is built with a custom build system, written in Rust, and with Cargo.\n* [Add Debug implementations for libcollection structs][39002]\n* [`TypeId` implements `PartialOrd` and `Ord`][38981]\n* [`--test-threads=0` produces an error][38945]\n* [`rustup` installs documentation by default][40526]\n* [The Rust source includes NatVis visualizations][39843]. These can be used by\n  WinDbg and Visual Studio to improve the debugging experience.\n\nCompatibility Notes\n-------------------\n\n* [Rust 1.17 does not correctly detect the MSVC 2017 linker][38584]. As a\n  workaround, either use MSVC 2015 or run vcvars.bat.\n* [When coercing to an unsized type lifetimes must be equal][40319]. That is,\n  disallow subtyping between `T` and `U` when `T: Unsize<U>`, e.g. coercing\n  `&mut [&'a X; N]` to `&mut [&'b X]` requires `'a` be equal to `'b`. Soundness\n  fix.\n* [`format!` and `Display::to_string` panic if an underlying formatting\n  implementation returns an error][40117]. Previously the error was silently\n  ignored. It is incorrect for `write_fmt` to return an error when writing\n  to a string.\n* [In-tree crates are verified to be unstable][39851]. Previously, some minor\n  crates were marked stable and could be accessed from the stable toolchain.\n* [Rust git source no longer includes vendored crates][39728]. Those that need\n  to build with vendored crates should build from release tarballs.\n* [Fix inert attributes from `proc_macro_derives`][39572]\n* [During crate resolution, rustc prefers a crate in the sysroot if two crates\n  are otherwise identical][39518]. Unlikely to be encountered outside the Rust\n  build system.\n* [Fixed bugs around how type inference interacts with dead-code][39485]. The\n  existing code generally ignores the type of dead-code unless a type-hint is\n  provided; this can cause surprising inference interactions particularly around\n  defaulting. The new code uniformly ignores the result type of dead-code.\n* [Tuple-struct constructors with private fields are no longer visible][38932]\n* [Lifetime parameters that do not appear in the arguments are now considered\n  early-bound][38897], resolving a soundness bug (#[32330]). The\n  `hr_lifetime_in_assoc_type` future-compatibility lint has been in effect since\n  April of 2016.\n* [rustdoc: fix doctests with non-feature crate attributes][38161]\n* [Make transmuting from fn item types to pointer-sized types a hard\n  error][34198]\n\n[27787]: https://github.com/rust-lang/rust/issues/27787\n[32330]: https://github.com/rust-lang/rust/issues/32330\n[34198]: https://github.com/rust-lang/rust/pull/34198\n[38161]: https://github.com/rust-lang/rust/pull/38161\n[38368]: https://github.com/rust-lang/rust/pull/38368\n[38584]: https://github.com/rust-lang/rust/issues/38584\n[38661]: https://github.com/rust-lang/rust/pull/38661\n[38764]: https://github.com/rust-lang/rust/pull/38764\n[38864]: https://github.com/rust-lang/rust/issues/38864\n[38897]: https://github.com/rust-lang/rust/pull/38897\n[38921]: https://github.com/rust-lang/rust/pull/38921\n[38932]: https://github.com/rust-lang/rust/pull/38932\n[38945]: https://github.com/rust-lang/rust/pull/38945\n[38981]: https://github.com/rust-lang/rust/pull/38981\n[39002]: https://github.com/rust-lang/rust/pull/39002\n[39116]: https://github.com/rust-lang/rust/pull/39116\n[39193]: https://github.com/rust-lang/rust/pull/39193\n[39265]: https://github.com/rust-lang/rust/pull/39265\n[39356]: https://github.com/rust-lang/rust/pull/39356\n[39372]: https://github.com/rust-lang/rust/pull/39372\n[39426]: https://github.com/rust-lang/rust/pull/39426\n[39431]: https://github.com/rust-lang/rust/pull/39431\n[39438]: https://github.com/rust-lang/rust/pull/39438\n[39440]: https://github.com/rust-lang/rust/pull/39440\n[39485]: https://github.com/rust-lang/rust/pull/39485\n[39491]: https://github.com/rust-lang/rust/pull/39491\n[39518]: https://github.com/rust-lang/rust/pull/39518\n[39538]: https://github.com/rust-lang/rust/pull/39538\n[39572]: https://github.com/rust-lang/rust/pull/39572\n[39633]: https://github.com/rust-lang/rust/pull/39633\n[39642]: https://github.com/rust-lang/rust/pull/39642\n[39728]: https://github.com/rust-lang/rust/pull/39728\n[39761]: https://github.com/rust-lang/rust/pull/39761\n[39788]: https://github.com/rust-lang/rust/pull/39788\n[39793]: https://github.com/rust-lang/rust/pull/39793\n[39837]: https://github.com/rust-lang/rust/pull/39837\n[39843]: https://github.com/rust-lang/rust/pull/39843\n[39851]: https://github.com/rust-lang/rust/pull/39851\n[39903]: https://github.com/rust-lang/rust/pull/39903\n[39939]: https://github.com/rust-lang/rust/pull/39939\n[39953]: https://github.com/rust-lang/rust/pull/39953\n[39960]: https://github.com/rust-lang/rust/pull/39960\n[39990]: https://github.com/rust-lang/rust/pull/39990\n[39995]: https://github.com/rust-lang/rust/pull/39995\n[40008]: https://github.com/rust-lang/rust/pull/40008\n[40009]: https://github.com/rust-lang/rust/pull/40009\n[40027]: https://github.com/rust-lang/rust/pull/40027\n[40028]: https://github.com/rust-lang/rust/pull/40028\n[40037]: https://github.com/rust-lang/rust/pull/40037\n[40117]: https://github.com/rust-lang/rust/pull/40117\n[40166]: https://github.com/rust-lang/rust/pull/40166\n[40245]: https://github.com/rust-lang/rust/pull/40245\n[40257]: https://github.com/rust-lang/rust/pull/40257\n[40261]: https://github.com/rust-lang/rust/pull/40261\n[40265]: https://github.com/rust-lang/rust/pull/40265\n[40319]: https://github.com/rust-lang/rust/pull/40319\n[40336]: https://github.com/rust-lang/rust/pull/40336\n[40526]: https://github.com/rust-lang/rust/pull/40526\n[RFC 1623]: https://github.com/rust-lang/rfcs/blob/master/text/1623-static.md\n[RFC 1647]: https://github.com/rust-lang/rfcs/blob/master/text/1647-allow-self-in-where-clauses.md\n[RFC 1651]: https://github.com/rust-lang/rfcs/blob/master/text/1651-movecell.md\n[RFC 1682]: https://github.com/rust-lang/rfcs/blob/master/text/1682-field-init-shorthand.md\n[`Arc::from_raw`]: https://doc.rust-lang.org/std/sync/struct.Arc.html#method.from_raw\n[`Arc::into_raw`]: https://doc.rust-lang.org/std/sync/struct.Arc.html#method.into_raw\n[`Arc::ptr_eq`]: https://doc.rust-lang.org/std/sync/struct.Arc.html#method.ptr_eq\n[`BTreeMap::range_mut`]: https://doc.rust-lang.org/std/collections/btree_map/struct.BTreeMap.html#method.range_mut\n[`BTreeMap::range`]: https://doc.rust-lang.org/std/collections/btree_map/struct.BTreeMap.html#method.range\n[`Cell::into_inner`]: https://doc.rust-lang.org/std/cell/struct.Cell.html#method.into_inner\n[`Cell::replace`]: https://doc.rust-lang.org/std/cell/struct.Cell.html#method.replace\n[`Cell::swap`]: https://doc.rust-lang.org/std/cell/struct.Cell.html#method.swap\n[`Cell::take`]: https://doc.rust-lang.org/std/cell/struct.Cell.html#method.take\n[`Ordering::then_with`]: https://doc.rust-lang.org/std/cmp/enum.Ordering.html#method.then_with\n[`Ordering::then`]: https://doc.rust-lang.org/std/cmp/enum.Ordering.html#method.then\n[`Rc::from_raw`]: https://doc.rust-lang.org/std/rc/struct.Rc.html#method.from_raw\n[`Rc::into_raw`]: https://doc.rust-lang.org/std/rc/struct.Rc.html#method.into_raw\n[`Rc::ptr_eq`]: https://doc.rust-lang.org/std/rc/struct.Rc.html#method.ptr_eq\n[`Result::expect_err`]: https://doc.rust-lang.org/std/result/enum.Result.html#method.expect_err\n[`collections::Bound`]: https://doc.rust-lang.org/std/collections/enum.Bound.html\n[`process::abort`]: https://doc.rust-lang.org/std/process/fn.abort.html\n[`ptr::read_unaligned`]: https://doc.rust-lang.org/std/ptr/fn.read_unaligned.html\n[`ptr::write_unaligned`]: https://doc.rust-lang.org/std/ptr/fn.write_unaligned.html\n[cargo/3562]: https://github.com/rust-lang/cargo/pull/3562\n[cargo/3664]: https://github.com/rust-lang/cargo/pull/3664\n[cargo/3667]: https://github.com/rust-lang/cargo/pull/3667\n[cargo/3691]: https://github.com/rust-lang/cargo/pull/3691\n[cargo/3699]: https://github.com/rust-lang/cargo/pull/3699\n[cargo/3731]: https://github.com/rust-lang/cargo/pull/3731\n[ubook]: https://doc.rust-lang.org/unstable-book/\n\n\nVersion 1.16.0 (2017-03-16)\n===========================\n\nLanguage\n--------\n\n* [The compiler's `dead_code` lint now accounts for type aliases][38051].\n* [Uninhabitable enums (those without any variants) no longer permit wildcard\n  match patterns][38069]\n* [Clean up semantics of `self` in an import list][38313]\n* [`Self` may appear in `impl` headers][38920]\n* [`Self` may appear in struct expressions][39282]\n\nCompiler\n--------\n\n* [`rustc` now supports `--emit=metadata`, which causes rustc to emit\n  a `.rmeta` file containing only crate metadata][38571]. This can be\n  used by tools like the Rust Language Service to perform\n  metadata-only builds.\n* [Levenshtein based typo suggestions now work in most places, while\n  previously they worked only for fields and sometimes for local\n  variables][38927]. Together with the overhaul of \"no\n  resolution\"/\"unexpected resolution\" errors (#[38154]) they result in\n  large and systematic improvement in resolution diagnostics.\n* [Fix `transmute::<T, U>` where `T` requires a bigger alignment than\n  `U`][38670]\n* [rustc: use -Xlinker when specifying an rpath with ',' in it][38798]\n* [`rustc` no longer attempts to provide \"consider using an explicit\n  lifetime\" suggestions][37057]. They were inaccurate.\n\nStabilized APIs\n---------------\n\n* [`VecDeque::truncate`]\n* [`VecDeque::resize`]\n* [`String::insert_str`]\n* [`Duration::checked_add`]\n* [`Duration::checked_sub`]\n* [`Duration::checked_div`]\n* [`Duration::checked_mul`]\n* [`str::replacen`]\n* [`str::repeat`]\n* [`SocketAddr::is_ipv4`]\n* [`SocketAddr::is_ipv6`]\n* [`IpAddr::is_ipv4`]\n* [`IpAddr::is_ipv6`]\n* [`Vec::dedup_by`]\n* [`Vec::dedup_by_key`]\n* [`Result::unwrap_or_default`]\n* [`<*const T>::wrapping_offset`]\n* [`<*mut T>::wrapping_offset`]\n* `CommandExt::creation_flags`\n* [`File::set_permissions`]\n* [`String::split_off`]\n\nLibraries\n---------\n\n* [`[T]::binary_search` and `[T]::binary_search_by_key` now take\n  their argument by `Borrow` parameter][37761]\n* [All public types in std implement `Debug`][38006]\n* [`IpAddr` implements `From<Ipv4Addr>` and `From<Ipv6Addr>`][38327]\n* [`Ipv6Addr` implements `From<[u16; 8]>`][38131]\n* [Ctrl-Z returns from `Stdin.read()` when reading from the console on\n  Windows][38274]\n* [std: Fix partial writes in `LineWriter`][38062]\n* [std: Clamp max read/write sizes on Unix][38622]\n* [Use more specific panic message for `&str` slicing errors][38066]\n* [`TcpListener::set_only_v6` is deprecated][38304]. This\n  functionality cannot be achieved in std currently.\n* [`writeln!`, like `println!`, now accepts a form with no string\n  or formatting arguments, to just print a newline][38469]\n* [Implement `iter::Sum` and `iter::Product` for `Result`][38580]\n* [Reduce the size of static data in `std_unicode::tables`][38781]\n* [`char::EscapeDebug`, `EscapeDefault`, `EscapeUnicode`,\n  `CaseMappingIter`, `ToLowercase`, `ToUppercase`, implement\n  `Display`][38909]\n* [`Duration` implements `Sum`][38712]\n* [`String` implements `ToSocketAddrs`][39048]\n\nCargo\n-----\n\n* [The `cargo check` command does a type check of a project without\n  building it][cargo/3296]\n* [crates.io will display CI badges from Travis and AppVeyor, if\n  specified in Cargo.toml][cargo/3546]\n* [crates.io will display categories listed in Cargo.toml][cargo/3301]\n* [Compilation profiles accept integer values for `debug`, in addition\n  to `true` and `false`. These are passed to `rustc` as the value to\n  `-C debuginfo`][cargo/3534]\n* [Implement `cargo --version --verbose`][cargo/3604]\n* [All builds now output 'dep-info' build dependencies compatible with\n  make and ninja][cargo/3557]\n* [Build all workspace members with `build --all`][cargo/3511]\n* [Document all workspace members with `doc --all`][cargo/3515]\n* [Path deps outside workspace are not members][cargo/3443]\n\nMisc\n----\n\n* [`rustdoc` has a `--sysroot` argument that, like `rustc`, specifies\n  the path to the Rust implementation][38589]\n* [The `armv7-linux-androideabi` target no longer enables NEON\n  extensions, per Google's ABI guide][38413]\n* [The stock standard library can be compiled for Redox OS][38401]\n* [Rust has initial SPARC support][38726]. Tier 3. No builds\n  available.\n* [Rust has experimental support for Nvidia PTX][38559]. Tier 3. No\n  builds available.\n* [Fix backtraces on i686-pc-windows-gnu by disabling FPO][39379]\n\nCompatibility Notes\n-------------------\n\n* [Uninhabitable enums (those without any variants) no longer permit wildcard\n  match patterns][38069]\n* In this release, references to uninhabited types can not be\n  pattern-matched. This was accidentally allowed in 1.15.\n* [The compiler's `dead_code` lint now accounts for type aliases][38051].\n* [Ctrl-Z returns from `Stdin.read()` when reading from the console on\n  Windows][38274]\n* [Clean up semantics of `self` in an import list][38313]\n* Reimplemented lifetime elision. This change was almost entirely compatible\n  with existing code, but it did close a number of small bugs and loopholes,\n  as well as being more accepting in some other [cases][41105].\n\n[37057]: https://github.com/rust-lang/rust/pull/37057\n[37761]: https://github.com/rust-lang/rust/pull/37761\n[38006]: https://github.com/rust-lang/rust/pull/38006\n[38051]: https://github.com/rust-lang/rust/pull/38051\n[38062]: https://github.com/rust-lang/rust/pull/38062\n[38622]: https://github.com/rust-lang/rust/pull/38622\n[38066]: https://github.com/rust-lang/rust/pull/38066\n[38069]: https://github.com/rust-lang/rust/pull/38069\n[38131]: https://github.com/rust-lang/rust/pull/38131\n[38154]: https://github.com/rust-lang/rust/pull/38154\n[38274]: https://github.com/rust-lang/rust/pull/38274\n[38304]: https://github.com/rust-lang/rust/pull/38304\n[38313]: https://github.com/rust-lang/rust/pull/38313\n[38327]: https://github.com/rust-lang/rust/pull/38327\n[38401]: https://github.com/rust-lang/rust/pull/38401\n[38413]: https://github.com/rust-lang/rust/pull/38413\n[38469]: https://github.com/rust-lang/rust/pull/38469\n[38559]: https://github.com/rust-lang/rust/pull/38559\n[38571]: https://github.com/rust-lang/rust/pull/38571\n[38580]: https://github.com/rust-lang/rust/pull/38580\n[38589]: https://github.com/rust-lang/rust/pull/38589\n[38670]: https://github.com/rust-lang/rust/pull/38670\n[38712]: https://github.com/rust-lang/rust/pull/38712\n[38726]: https://github.com/rust-lang/rust/pull/38726\n[38781]: https://github.com/rust-lang/rust/pull/38781\n[38798]: https://github.com/rust-lang/rust/pull/38798\n[38909]: https://github.com/rust-lang/rust/pull/38909\n[38920]: https://github.com/rust-lang/rust/pull/38920\n[38927]: https://github.com/rust-lang/rust/pull/38927\n[39048]: https://github.com/rust-lang/rust/pull/39048\n[39282]: https://github.com/rust-lang/rust/pull/39282\n[39379]: https://github.com/rust-lang/rust/pull/39379\n[41105]: https://github.com/rust-lang/rust/issues/41105\n[`<*const T>::wrapping_offset`]: https://doc.rust-lang.org/std/primitive.pointer.html#method.wrapping_offset\n[`<*mut T>::wrapping_offset`]: https://doc.rust-lang.org/std/primitive.pointer.html#method.wrapping_offset-1\n[`Duration::checked_add`]: https://doc.rust-lang.org/std/time/struct.Duration.html#method.checked_add\n[`Duration::checked_div`]: https://doc.rust-lang.org/std/time/struct.Duration.html#method.checked_div\n[`Duration::checked_mul`]: https://doc.rust-lang.org/std/time/struct.Duration.html#method.checked_mul\n[`Duration::checked_sub`]: https://doc.rust-lang.org/std/time/struct.Duration.html#method.checked_sub\n[`File::set_permissions`]: https://doc.rust-lang.org/std/fs/struct.File.html#method.set_permissions\n[`IpAddr::is_ipv4`]: https://doc.rust-lang.org/std/net/enum.IpAddr.html#method.is_ipv4\n[`IpAddr::is_ipv6`]: https://doc.rust-lang.org/std/net/enum.IpAddr.html#method.is_ipv6\n[`Result::unwrap_or_default`]: https://doc.rust-lang.org/std/result/enum.Result.html#method.unwrap_or_default\n[`SocketAddr::is_ipv4`]: https://doc.rust-lang.org/std/net/enum.SocketAddr.html#method.is_ipv4\n[`SocketAddr::is_ipv6`]: https://doc.rust-lang.org/std/net/enum.SocketAddr.html#method.is_ipv6\n[`String::insert_str`]: https://doc.rust-lang.org/std/string/struct.String.html#method.insert_str\n[`String::split_off`]: https://doc.rust-lang.org/std/string/struct.String.html#method.split_off\n[`Vec::dedup_by_key`]: https://doc.rust-lang.org/std/vec/struct.Vec.html#method.dedup_by_key\n[`Vec::dedup_by`]: https://doc.rust-lang.org/std/vec/struct.Vec.html#method.dedup_by\n[`VecDeque::resize`]:  https://doc.rust-lang.org/std/collections/vec_deque/struct.VecDeque.html#method.resize\n[`VecDeque::truncate`]: https://doc.rust-lang.org/std/collections/vec_deque/struct.VecDeque.html#method.truncate\n[`str::repeat`]: https://doc.rust-lang.org/std/primitive.str.html#method.repeat\n[`str::replacen`]: https://doc.rust-lang.org/std/primitive.str.html#method.replacen\n[cargo/3296]: https://github.com/rust-lang/cargo/pull/3296\n[cargo/3301]: https://github.com/rust-lang/cargo/pull/3301\n[cargo/3443]: https://github.com/rust-lang/cargo/pull/3443\n[cargo/3511]: https://github.com/rust-lang/cargo/pull/3511\n[cargo/3515]: https://github.com/rust-lang/cargo/pull/3515\n[cargo/3534]: https://github.com/rust-lang/cargo/pull/3534\n[cargo/3546]: https://github.com/rust-lang/cargo/pull/3546\n[cargo/3557]: https://github.com/rust-lang/cargo/pull/3557\n[cargo/3604]: https://github.com/rust-lang/cargo/pull/3604\n\n\nVersion 1.15.1 (2017-02-09)\n===========================\n\n* [Fix IntoIter::as_mut_slice's signature][39466]\n* [Compile compiler builtins with `-fPIC` on 32-bit platforms][39523]\n\n[39466]: https://github.com/rust-lang/rust/pull/39466\n[39523]: https://github.com/rust-lang/rust/pull/39523\n\n\nVersion 1.15.0 (2017-02-02)\n===========================\n\nLanguage\n--------\n\n* Basic procedural macros allowing custom `#[derive]`, aka \"macros 1.1\", are\n  stable. This allows popular code-generating crates like Serde and Diesel to\n  work ergonomically. [RFC 1681].\n* [Tuple structs may be empty. Unary and empty tuple structs may be instantiated\n  with curly braces][36868]. Part of [RFC 1506].\n* [A number of minor changes to name resolution have been activated][37127].\n  They add up to more consistent semantics, allowing for future evolution of\n  Rust macros. Specified in [RFC 1560], see its section on [\"changes\"] for\n  details of what is different. The breaking changes here have been transitioned\n  through the [`legacy_imports`] lint since 1.14, with no known regressions.\n* [In `macro_rules`, `path` fragments can now be parsed as type parameter\n  bounds][38279]\n* [`?Sized` can be used in `where` clauses][37791]\n* [There is now a limit on the size of monomorphized types and it can be\n  modified with the `#![type_size_limit]` crate attribute, similarly to\n  the `#![recursion_limit]` attribute][37789]\n\nCompiler\n--------\n\n* [On Windows, the compiler will apply dllimport attributes when linking to\n  extern functions][37973]. Additional attributes and flags can control which\n  library kind is linked and its name. [RFC 1717].\n* [Rust-ABI symbols are no longer exported from cdylibs][38117]\n* [The `--test` flag works with procedural macro crates][38107]\n* [Fix `extern \"aapcs\" fn` ABI][37814]\n* [The `-C no-stack-check` flag is deprecated][37636]. It does nothing.\n* [The `format!` expander recognizes incorrect `printf` and shell-style\n  formatting directives and suggests the correct format][37613].\n* [Only report one error for all unused imports in an import list][37456]\n\nCompiler Performance\n--------------------\n\n* [Avoid unnecessary `mk_ty` calls in `Ty::super_fold_with`][37705]\n* [Avoid more unnecessary `mk_ty` calls in `Ty::super_fold_with`][37979]\n* [Don't clone in `UnificationTable::probe`][37848]\n* [Remove `scope_auxiliary` to cut RSS by 10%][37764]\n* [Use small vectors in type walker][37760]\n* [Macro expansion performance was improved][37701]\n* [Change `HirVec<P<T>>` to `HirVec<T>` in `hir::Expr`][37642]\n* [Replace FNV with a faster hash function][37229]\n\nStabilized APIs\n---------------\n\n* [`std::iter::Iterator::min_by`]\n* [`std::iter::Iterator::max_by`]\n* [`std::os::*::fs::FileExt`]\n* [`std::sync::atomic::Atomic*::get_mut`]\n* [`std::sync::atomic::Atomic*::into_inner`]\n* [`std::vec::IntoIter::as_slice`]\n* [`std::vec::IntoIter::as_mut_slice`]\n* [`std::sync::mpsc::Receiver::try_iter`]\n* [`std::os::unix::process::CommandExt::before_exec`]\n* [`std::rc::Rc::strong_count`]\n* [`std::rc::Rc::weak_count`]\n* [`std::sync::Arc::strong_count`]\n* [`std::sync::Arc::weak_count`]\n* [`std::char::encode_utf8`]\n* [`std::char::encode_utf16`]\n* [`std::cell::Ref::clone`]\n* [`std::io::Take::into_inner`]\n\nLibraries\n---------\n\n* [The standard sorting algorithm has been rewritten for dramatic performance\n  improvements][38192]. It is a hybrid merge sort, drawing influences from\n  Timsort. Previously it was a naive merge sort.\n* [`Iterator::nth` no longer has a `Sized` bound][38134]\n* [`Extend<&T>` is specialized for `Vec` where `T: Copy`][38182] to improve\n  performance.\n* [`chars().count()` is much faster][37888] and so are [`chars().last()`\n  and `char_indices().last()`][37882]\n* [Fix ARM Objective-C ABI in `std::env::args`][38146]\n* [Chinese characters display correctly in `fmt::Debug`][37855]\n* [Derive `Default` for `Duration`][37699]\n* [Support creation of anonymous pipes on WinXP/2k][37677]\n* [`mpsc::RecvTimeoutError` implements `Error`][37527]\n* [Don't pass overlapped handles to processes][38835]\n\nCargo\n-----\n\n* [In this release, Cargo build scripts no longer have access to the `OUT_DIR`\n  environment variable at build time via `env!(\"OUT_DIR\")`][cargo/3368]. They\n  should instead check the variable at runtime with `std::env`. That the value\n  was set at build time was a bug, and incorrect when cross-compiling. This\n  change is known to cause breakage.\n* [Add `--all` flag to `cargo test`][cargo/3221]\n* [Compile statically against the MSVC CRT][cargo/3363]\n* [Mix feature flags into fingerprint/metadata shorthash][cargo/3102]\n* [Link OpenSSL statically on OSX][cargo/3311]\n* [Apply new fingerprinting to build dir outputs][cargo/3310]\n* [Test for bad path overrides with summaries][cargo/3336]\n* [Require `cargo install --vers` to take a semver version][cargo/3338]\n* [Fix retrying crate downloads for network errors][cargo/3348]\n* [Implement string lookup for `build.rustflags` config key][cargo/3356]\n* [Emit more info on --message-format=json][cargo/3319]\n* [Assume `build.rs` in the same directory as `Cargo.toml` is a build script][cargo/3361]\n* [Don't ignore errors in workspace manifest][cargo/3409]\n* [Fix `--message-format JSON` when rustc emits non-JSON warnings][cargo/3410]\n\nTooling\n-------\n\n* [Test runners (binaries built with `--test`) now support a `--list` argument\n  that lists the tests it contains][38185]\n* [Test runners now support a `--exact` argument that makes the test filter\n  match exactly, instead of matching only a substring of the test name][38181]\n* [rustdoc supports a `--playground-url` flag][37763]\n* [rustdoc provides more details about `#[should_panic]` errors][37749]\n\nMisc\n----\n\n* [The Rust build system is now written in Rust][37817]. The Makefiles may\n  continue to be used in this release by passing `--disable-rustbuild` to the\n  configure script, but they will be deleted soon. Note that the new build\n  system uses a different on-disk layout that will likely affect any scripts\n  building Rust.\n* [Rust supports i686-unknown-openbsd][38086]. Tier 3 support. No testing or\n  releases.\n* [Rust supports the MSP430][37627]. Tier 3 support. No testing or releases.\n* [Rust supports the ARMv5TE architecture][37615]. Tier 3 support. No testing or\n  releases.\n\nCompatibility Notes\n-------------------\n\n* [A number of minor changes to name resolution have been activated][37127].\n  They add up to more consistent semantics, allowing for future evolution of\n  Rust macros. Specified in [RFC 1560], see its section on [\"changes\"] for\n  details of what is different. The breaking changes here have been transitioned\n  through the [`legacy_imports`] lint since 1.14, with no known regressions.\n* [In this release, Cargo build scripts no longer have access to the `OUT_DIR`\n  environment variable at build time via `env!(\"OUT_DIR\")`][cargo/3368]. They\n  should instead check the variable at runtime with `std::env`. That the value\n  was set at build time was a bug, and incorrect when cross-compiling. This\n  change is known to cause breakage.\n* [Higher-ranked lifetimes are no longer allowed to appear _only_ in associated\n  types][33685]. The [`hr_lifetime_in_assoc_type` lint] has been a warning since\n  1.10 and is now an error by default. It will become a hard error in the near\n  future.\n* [The semantics relating modules to file system directories are changing in\n  minor ways][37602]. This is captured in the new `legacy_directory_ownership`\n  lint, which is a warning in this release, and will become a hard error in the\n  future.\n* [Rust-ABI symbols are no longer exported from cdylibs][38117]\n* [Once `Peekable` peeks a `None` it will return that `None` without re-querying\n  the underlying iterator][37834]\n\n[\"changes\"]: https://github.com/rust-lang/rfcs/blob/master/text/1560-name-resolution.md#changes-to-name-resolution-rules\n[33685]: https://github.com/rust-lang/rust/issues/33685\n[36868]: https://github.com/rust-lang/rust/pull/36868\n[37127]: https://github.com/rust-lang/rust/pull/37127\n[37229]: https://github.com/rust-lang/rust/pull/37229\n[37456]: https://github.com/rust-lang/rust/pull/37456\n[37527]: https://github.com/rust-lang/rust/pull/37527\n[37602]: https://github.com/rust-lang/rust/pull/37602\n[37613]: https://github.com/rust-lang/rust/pull/37613\n[37615]: https://github.com/rust-lang/rust/pull/37615\n[37636]: https://github.com/rust-lang/rust/pull/37636\n[37627]: https://github.com/rust-lang/rust/pull/37627\n[37642]: https://github.com/rust-lang/rust/pull/37642\n[37677]: https://github.com/rust-lang/rust/pull/37677\n[37699]: https://github.com/rust-lang/rust/pull/37699\n[37701]: https://github.com/rust-lang/rust/pull/37701\n[37705]: https://github.com/rust-lang/rust/pull/37705\n[37749]: https://github.com/rust-lang/rust/pull/37749\n[37760]: https://github.com/rust-lang/rust/pull/37760\n[37763]: https://github.com/rust-lang/rust/pull/37763\n[37764]: https://github.com/rust-lang/rust/pull/37764\n[37789]: https://github.com/rust-lang/rust/pull/37789\n[37791]: https://github.com/rust-lang/rust/pull/37791\n[37814]: https://github.com/rust-lang/rust/pull/37814\n[37817]: https://github.com/rust-lang/rust/pull/37817\n[37834]: https://github.com/rust-lang/rust/pull/37834\n[37848]: https://github.com/rust-lang/rust/pull/37848\n[37855]: https://github.com/rust-lang/rust/pull/37855\n[37882]: https://github.com/rust-lang/rust/pull/37882\n[37888]: https://github.com/rust-lang/rust/pull/37888\n[37973]: https://github.com/rust-lang/rust/pull/37973\n[37979]: https://github.com/rust-lang/rust/pull/37979\n[38086]: https://github.com/rust-lang/rust/pull/38086\n[38107]: https://github.com/rust-lang/rust/pull/38107\n[38117]: https://github.com/rust-lang/rust/pull/38117\n[38134]: https://github.com/rust-lang/rust/pull/38134\n[38146]: https://github.com/rust-lang/rust/pull/38146\n[38181]: https://github.com/rust-lang/rust/pull/38181\n[38182]: https://github.com/rust-lang/rust/pull/38182\n[38185]: https://github.com/rust-lang/rust/pull/38185\n[38192]: https://github.com/rust-lang/rust/pull/38192\n[38279]: https://github.com/rust-lang/rust/pull/38279\n[38835]: https://github.com/rust-lang/rust/pull/38835\n[RFC 1506]: https://github.com/rust-lang/rfcs/blob/master/text/1506-adt-kinds.md\n[RFC 1560]: https://github.com/rust-lang/rfcs/blob/master/text/1560-name-resolution.md\n[RFC 1681]: https://github.com/rust-lang/rfcs/blob/master/text/1681-macros-1.1.md\n[RFC 1717]: https://github.com/rust-lang/rfcs/blob/master/text/1717-dllimport.md\n[`hr_lifetime_in_assoc_type` lint]: https://github.com/rust-lang/rust/issues/33685\n[`legacy_imports`]: https://github.com/rust-lang/rust/pull/38271\n[cargo/3102]: https://github.com/rust-lang/cargo/pull/3102\n[cargo/3221]: https://github.com/rust-lang/cargo/pull/3221\n[cargo/3310]: https://github.com/rust-lang/cargo/pull/3310\n[cargo/3311]: https://github.com/rust-lang/cargo/pull/3311\n[cargo/3319]: https://github.com/rust-lang/cargo/pull/3319\n[cargo/3336]: https://github.com/rust-lang/cargo/pull/3336\n[cargo/3338]: https://github.com/rust-lang/cargo/pull/3338\n[cargo/3348]: https://github.com/rust-lang/cargo/pull/3348\n[cargo/3356]: https://github.com/rust-lang/cargo/pull/3356\n[cargo/3361]: https://github.com/rust-lang/cargo/pull/3361\n[cargo/3363]: https://github.com/rust-lang/cargo/pull/3363\n[cargo/3368]: https://github.com/rust-lang/cargo/issues/3368\n[cargo/3409]: https://github.com/rust-lang/cargo/pull/3409\n[cargo/3410]: https://github.com/rust-lang/cargo/pull/3410\n[`std::iter::Iterator::min_by`]: https://doc.rust-lang.org/std/iter/trait.Iterator.html#method.min_by\n[`std::iter::Iterator::max_by`]: https://doc.rust-lang.org/std/iter/trait.Iterator.html#method.max_by\n[`std::os::*::fs::FileExt`]: https://doc.rust-lang.org/std/os/unix/fs/trait.FileExt.html\n[`std::sync::atomic::Atomic*::get_mut`]: https://doc.rust-lang.org/std/sync/atomic/struct.AtomicU8.html#method.get_mut\n[`std::sync::atomic::Atomic*::into_inner`]: https://doc.rust-lang.org/std/sync/atomic/struct.AtomicU8.html#method.into_inner\n[`std::vec::IntoIter::as_slice`]: https://doc.rust-lang.org/std/vec/struct.IntoIter.html#method.as_slice\n[`std::vec::IntoIter::as_mut_slice`]: https://doc.rust-lang.org/std/vec/struct.IntoIter.html#method.as_mut_slice\n[`std::sync::mpsc::Receiver::try_iter`]: https://doc.rust-lang.org/std/sync/mpsc/struct.Receiver.html#method.try_iter\n[`std::os::unix::process::CommandExt::before_exec`]: https://doc.rust-lang.org/std/os/unix/process/trait.CommandExt.html#tymethod.before_exec\n[`std::rc::Rc::strong_count`]: https://doc.rust-lang.org/std/rc/struct.Rc.html#method.strong_count\n[`std::rc::Rc::weak_count`]: https://doc.rust-lang.org/std/rc/struct.Rc.html#method.weak_count\n[`std::sync::Arc::strong_count`]: https://doc.rust-lang.org/std/sync/struct.Arc.html#method.strong_count\n[`std::sync::Arc::weak_count`]: https://doc.rust-lang.org/std/sync/struct.Arc.html#method.weak_count\n[`std::char::encode_utf8`]: https://doc.rust-lang.org/std/primitive.char.html#method.encode_utf8\n[`std::char::encode_utf16`]: https://doc.rust-lang.org/std/primitive.char.html#method.encode_utf16\n[`std::cell::Ref::clone`]: https://doc.rust-lang.org/std/cell/struct.Ref.html#method.clone\n[`std::io::Take::into_inner`]: https://doc.rust-lang.org/std/io/struct.Take.html#method.into_inner\n\n\nVersion 1.14.0 (2016-12-22)\n===========================\n\nLanguage\n--------\n\n* [`..` matches multiple tuple fields in enum variants, structs\n  and tuples][36843]. [RFC 1492].\n* [Safe `fn` items can be coerced to `unsafe fn` pointers][37389]\n* [`use *` and `use ::*` both glob-import from the crate root][37367]\n* [It's now possible to call a `Vec<Box<Fn()>>` without explicit\n  dereferencing][36822]\n\nCompiler\n--------\n\n* [Mark enums with non-zero discriminant as non-zero][37224]\n* [Lower-case `static mut` names are linted like other\n  statics and consts][37162]\n* [Fix ICE on some macros in const integer positions\n   (e.g. `[u8; m!()]`)][36819]\n* [Improve error message and snippet for \"did you mean `x`\"][36798]\n* [Add a panic-strategy field to the target specification][36794]\n* [Include LLVM version in `--version --verbose`][37200]\n\nCompile-time Optimizations\n--------------------------\n\n* [Improve macro expansion performance][37569]\n* [Shrink `Expr_::ExprInlineAsm`][37445]\n* [Replace all uses of SHA-256 with BLAKE2b][37439]\n* [Reduce the number of bytes hashed by `IchHasher`][37427]\n* [Avoid more allocations when compiling html5ever][37373]\n* [Use `SmallVector` in `CombineFields::instantiate`][37322]\n* [Avoid some allocations in the macro parser][37318]\n* [Use a faster deflate setting][37298]\n* [Add `ArrayVec` and `AccumulateVec` to reduce heap allocations\n  during interning of slices][37270]\n* [Optimize `write_metadata`][37267]\n* [Don't process obligation forest cycles when stalled][37231]\n* [Avoid many `CrateConfig` clones][37161]\n* [Optimize `Substs::super_fold_with`][37108]\n* [Optimize `ObligationForest`'s `NodeState` handling][36993]\n* [Speed up `plug_leaks`][36917]\n\nLibraries\n---------\n\n* [`println!()`, with no arguments, prints newline][36825].\n  Previously, an empty string was required to achieve the same.\n* [`Wrapping` impls standard binary and unary operators, as well as\n   the `Sum` and `Product` iterators][37356]\n* [Implement `From<Cow<str>> for String` and `From<Cow<[T]>> for\n  Vec<T>`][37326]\n* [Improve `fold` performance for `chain`, `cloned`, `map`, and\n  `VecDeque` iterators][37315]\n* [Improve `SipHasher` performance on small values][37312]\n* [Add Iterator trait TrustedLen to enable better FromIterator /\n  Extend][37306]\n* [Expand `.zip()` specialization to `.map()` and `.cloned()`][37230]\n* [`ReadDir` implements `Debug`][37221]\n* [Implement `RefUnwindSafe` for atomic types][37178]\n* [Specialize `Vec::extend` to `Vec::extend_from_slice`][37094]\n* [Avoid allocations in `Decoder::read_str`][37064]\n* [`io::Error` implements `From<io::ErrorKind>`][37037]\n* [Impl `Debug` for raw pointers to unsized data][36880]\n* [Don't reuse `HashMap` random seeds][37470]\n* [The internal memory layout of `HashMap` is more cache-friendly, for\n  significant improvements in some operations][36692]\n* [`HashMap` uses less memory on 32-bit architectures][36595]\n* [Impl `Add<{str, Cow<str>}>` for `Cow<str>`][36430]\n\nCargo\n-----\n\n* [Expose rustc cfg values to build scripts][cargo/3243]\n* [Allow cargo to work with read-only `CARGO_HOME`][cargo/3259]\n* [Fix passing --features when testing multiple packages][cargo/3280]\n* [Use a single profile set per workspace][cargo/3249]\n* [Load `replace` sections from lock files][cargo/3220]\n* [Ignore `panic` configuration for test/bench profiles][cargo/3175]\n\nTooling\n-------\n\n* [rustup is the recommended Rust installation method][1.14rustup]\n* This release includes host (rustc) builds for Linux on MIPS, PowerPC, and\n  S390x. These are [tier 2] platforms and may have major defects. Follow the\n  instructions on the website to install, or add the targets to an existing\n  installation with `rustup target add`. The new target triples are:\n  - `mips-unknown-linux-gnu`\n  - `mipsel-unknown-linux-gnu`\n  - `mips64-unknown-linux-gnuabi64`\n  - `mips64el-unknown-linux-gnuabi64 `\n  - `powerpc-unknown-linux-gnu`\n  - `powerpc64-unknown-linux-gnu`\n  - `powerpc64le-unknown-linux-gnu`\n  - `s390x-unknown-linux-gnu `\n* This release includes target (std) builds for ARM Linux running MUSL\n  libc. These are [tier 2] platforms and may have major defects. Add the\n  following triples to an existing rustup installation with `rustup target add`:\n  - `arm-unknown-linux-musleabi`\n  - `arm-unknown-linux-musleabihf`\n  - `armv7-unknown-linux-musleabihf`\n* This release includes [experimental support for WebAssembly][1.14wasm], via\n  the `wasm32-unknown-emscripten` target. This target is known to have major\n  defects. Please test, report, and fix.\n* rustup no longer installs documentation by default. Run `rustup\n  component add rust-docs` to install.\n* [Fix line stepping in debugger][37310]\n* [Enable line number debuginfo in releases][37280]\n\nMisc\n----\n\n* [Disable jemalloc on aarch64/powerpc/mips][37392]\n* [Add support for Fuchsia OS][37313]\n* [Detect local-rebuild by only MAJOR.MINOR version][37273]\n\nCompatibility Notes\n-------------------\n\n* [A number of forward-compatibility lints used by the compiler\n  to gradually introduce language changes have been converted\n  to deny by default][36894]:\n  - [\"use of inaccessible extern crate erroneously allowed\"][36886]\n  - [\"type parameter default erroneously allowed in invalid location\"][36887]\n  - [\"detects super or self keywords at the beginning of global path\"][36888]\n  - [\"two overlapping inherent impls define an item with the same name\n    were erroneously allowed\"][36889]\n  - [\"floating-point constants cannot be used in patterns\"][36890]\n  - [\"constants of struct or enum type can only be used in a pattern if\n     the struct or enum has `#[derive(PartialEq, Eq)]`\"][36891]\n  - [\"lifetimes or labels named `'_` were erroneously allowed\"][36892]\n* [Prohibit patterns in trait methods without bodies][37378]\n* [The atomic `Ordering` enum may not be matched exhaustively][37351]\n* [Future-proofing `#[no_link]` breaks some obscure cases][37247]\n* [The `$crate` macro variable is accepted in fewer locations][37213]\n* [Impls specifying extra region requirements beyond the trait\n  they implement are rejected][37167]\n* [Enums may not be unsized][37111]. Unsized enums are intended to\n  work but never have. For now they are forbidden.\n* [Enforce the shadowing restrictions from RFC 1560 for today's macros][36767]\n\n[tier 2]: https://forge.rust-lang.org/platform-support.html\n[1.14rustup]: https://internals.rust-lang.org/t/beta-testing-rustup-rs/3316/204\n[1.14wasm]: https://users.rust-lang.org/t/compiling-to-the-web-with-rust-and-emscripten/7627\n[36430]: https://github.com/rust-lang/rust/pull/36430\n[36595]: https://github.com/rust-lang/rust/pull/36595\n[36692]: https://github.com/rust-lang/rust/pull/36692\n[36767]: https://github.com/rust-lang/rust/pull/36767\n[36794]: https://github.com/rust-lang/rust/pull/36794\n[36798]: https://github.com/rust-lang/rust/pull/36798\n[36819]: https://github.com/rust-lang/rust/pull/36819\n[36822]: https://github.com/rust-lang/rust/pull/36822\n[36825]: https://github.com/rust-lang/rust/pull/36825\n[36843]: https://github.com/rust-lang/rust/pull/36843\n[36880]: https://github.com/rust-lang/rust/pull/36880\n[36886]: https://github.com/rust-lang/rust/issues/36886\n[36887]: https://github.com/rust-lang/rust/issues/36887\n[36888]: https://github.com/rust-lang/rust/issues/36888\n[36889]: https://github.com/rust-lang/rust/issues/36889\n[36890]: https://github.com/rust-lang/rust/issues/36890\n[36891]: https://github.com/rust-lang/rust/issues/36891\n[36892]: https://github.com/rust-lang/rust/issues/36892\n[36894]: https://github.com/rust-lang/rust/pull/36894\n[36917]: https://github.com/rust-lang/rust/pull/36917\n[36993]: https://github.com/rust-lang/rust/pull/36993\n[37037]: https://github.com/rust-lang/rust/pull/37037\n[37064]: https://github.com/rust-lang/rust/pull/37064\n[37094]: https://github.com/rust-lang/rust/pull/37094\n[37108]: https://github.com/rust-lang/rust/pull/37108\n[37111]: https://github.com/rust-lang/rust/pull/37111\n[37161]: https://github.com/rust-lang/rust/pull/37161\n[37162]: https://github.com/rust-lang/rust/pull/37162\n[37167]: https://github.com/rust-lang/rust/pull/37167\n[37178]: https://github.com/rust-lang/rust/pull/37178\n[37200]: https://github.com/rust-lang/rust/pull/37200\n[37213]: https://github.com/rust-lang/rust/pull/37213\n[37221]: https://github.com/rust-lang/rust/pull/37221\n[37224]: https://github.com/rust-lang/rust/pull/37224\n[37230]: https://github.com/rust-lang/rust/pull/37230\n[37231]: https://github.com/rust-lang/rust/pull/37231\n[37247]: https://github.com/rust-lang/rust/pull/37247\n[37267]: https://github.com/rust-lang/rust/pull/37267\n[37270]: https://github.com/rust-lang/rust/pull/37270\n[37273]: https://github.com/rust-lang/rust/pull/37273\n[37280]: https://github.com/rust-lang/rust/pull/37280\n[37298]: https://github.com/rust-lang/rust/pull/37298\n[37306]: https://github.com/rust-lang/rust/pull/37306\n[37310]: https://github.com/rust-lang/rust/pull/37310\n[37312]: https://github.com/rust-lang/rust/pull/37312\n[37313]: https://github.com/rust-lang/rust/pull/37313\n[37315]: https://github.com/rust-lang/rust/pull/37315\n[37318]: https://github.com/rust-lang/rust/pull/37318\n[37322]: https://github.com/rust-lang/rust/pull/37322\n[37326]: https://github.com/rust-lang/rust/pull/37326\n[37351]: https://github.com/rust-lang/rust/pull/37351\n[37356]: https://github.com/rust-lang/rust/pull/37356\n[37367]: https://github.com/rust-lang/rust/pull/37367\n[37373]: https://github.com/rust-lang/rust/pull/37373\n[37378]: https://github.com/rust-lang/rust/pull/37378\n[37389]: https://github.com/rust-lang/rust/pull/37389\n[37392]: https://github.com/rust-lang/rust/pull/37392\n[37427]: https://github.com/rust-lang/rust/pull/37427\n[37439]: https://github.com/rust-lang/rust/pull/37439\n[37445]: https://github.com/rust-lang/rust/pull/37445\n[37470]: https://github.com/rust-lang/rust/pull/37470\n[37569]: https://github.com/rust-lang/rust/pull/37569\n[RFC 1492]: https://github.com/rust-lang/rfcs/blob/master/text/1492-dotdot-in-patterns.md\n[cargo/3175]: https://github.com/rust-lang/cargo/pull/3175\n[cargo/3220]: https://github.com/rust-lang/cargo/pull/3220\n[cargo/3243]: https://github.com/rust-lang/cargo/pull/3243\n[cargo/3249]: https://github.com/rust-lang/cargo/pull/3249\n[cargo/3259]: https://github.com/rust-lang/cargo/pull/3259\n[cargo/3280]: https://github.com/rust-lang/cargo/pull/3280\n\n\nVersion 1.13.0 (2016-11-10)\n===========================\n\nLanguage\n--------\n\n* [Stabilize the `?` operator][36995]. `?` is a simple way to propagate\n  errors, like the `try!` macro, described in [RFC 0243].\n* [Stabilize macros in type position][36014]. Described in [RFC 873].\n* [Stabilize attributes on statements][36995]. Described in [RFC 0016].\n* [Fix `#[derive]` for empty tuple structs/variants][35728]\n* [Fix lifetime rules for 'if' conditions][36029]\n* [Avoid loading and parsing unconfigured non-inline modules][36482]\n\nCompiler\n--------\n\n* [Add the `-C link-arg` argument][36574]\n* [Remove the old AST-based backend from rustc_trans][35764]\n* [Don't enable NEON by default on armv7 Linux][35814]\n* [Fix debug line number info for macro expansions][35238]\n* [Do not emit \"class method\" debuginfo for types that are not\n  DICompositeType][36008]\n* [Warn about multiple conflicting #[repr] hints][34623]\n* [When sizing DST, don't double-count nested struct prefixes][36351]\n* [Default RUST_MIN_STACK to 16MiB for now][36505]\n* [Improve rlib metadata format][36551]. Reduces rlib size significantly.\n* [Reject macros with empty repetitions to avoid infinite loop][36721]\n* [Expand macros without recursing to avoid stack overflows][36214]\n\nDiagnostics\n-----------\n\n* [Replace macro backtraces with labeled local uses][35702]\n* [Improve error message for misplaced doc comments][33922]\n* [Buffer unix and lock windows to prevent message interleaving][35975]\n* [Update lifetime errors to specifically note temporaries][36171]\n* [Special case a few colors for Windows][36178]\n* [Suggest `use self` when such an import resolves][36289]\n* [Be more specific when type parameter shadows primitive type][36338]\n* Many minor improvements\n\nCompile-time Optimizations\n--------------------------\n\n* [Compute and cache HIR hashes at beginning][35854]\n* [Don't hash types in loan paths][36004]\n* [Cache projections in trans][35761]\n* [Optimize the parser's last token handling][36527]\n* [Only instantiate #[inline] functions in codegen units referencing\n  them][36524]. This leads to big improvements in cases where crates export\n  define many inline functions without using them directly.\n* [Lazily allocate TypedArena's first chunk][36592]\n* [Don't allocate during default HashSet creation][36734]\n\nStabilized APIs\n---------------\n\n* [`checked_abs`]\n* [`wrapping_abs`]\n* [`overflowing_abs`]\n* [`RefCell::try_borrow`]\n* [`RefCell::try_borrow_mut`]\n\nLibraries\n---------\n\n* [Add `assert_ne!` and `debug_assert_ne!`][35074]\n* [Make `vec_deque::Drain`, `hash_map::Drain`, and `hash_set::Drain`\n  covariant][35354]\n* [Implement `AsRef<[T]>` for `std::slice::Iter`][35559]\n* [Implement `Debug` for `std::vec::IntoIter`][35707]\n* [`CString`: avoid excessive growth just to 0-terminate][35871]\n* [Implement `CoerceUnsized` for `{Cell, RefCell, UnsafeCell}`][35627]\n* [Use arc4rand on FreeBSD][35884]\n* [memrchr: Correct aligned offset computation][35969]\n* [Improve Demangling of Rust Symbols][36059]\n* [Use monotonic time in condition variables][35048]\n* [Implement `Debug` for `std::path::{Components,Iter}`][36101]\n* [Implement conversion traits for `char`][35755]\n* [Fix illegal instruction caused by overflow in channel cloning][36104]\n* [Zero first byte of CString on drop][36264]\n* [Inherit overflow checks for sum and product][36372]\n* [Add missing Eq implementations][36423]\n* [Implement `Debug` for `DirEntry`][36631]\n* [When `getaddrinfo` returns `EAI_SYSTEM` retrieve actual error from\n  `errno`][36754]\n* [`SipHasher`] is deprecated. Use [`DefaultHasher`].\n* [Implement more traits for `std::io::ErrorKind`][35911]\n* [Optimize BinaryHeap bounds checking][36072]\n* [Work around pointer aliasing issue in `Vec::extend_from_slice`,\n  `extend_with_element`][36355]\n* [Fix overflow checking in unsigned pow()][34942]\n\nCargo\n-----\n\n* This release includes security fixes to both curl and OpenSSL.\n* [Fix transitive doctests when panic=abort][cargo/3021]\n* [Add --all-features flag to cargo][cargo/3038]\n* [Reject path-based dependencies in `cargo package`][cargo/3060]\n* [Don't parse the home directory more than once][cargo/3078]\n* [Don't try to generate Cargo.lock on empty workspaces][cargo/3092]\n* [Update OpenSSL to 1.0.2j][cargo/3121]\n* [Add license and license_file to cargo metadata output][cargo/3110]\n* [Make crates-io registry URL optional in config; ignore all changes to\n  source.crates-io][cargo/3089]\n* [Don't download dependencies from other platforms][cargo/3123]\n* [Build transitive dev-dependencies when needed][cargo/3125]\n* [Add support for per-target rustflags in .cargo/config][cargo/3157]\n* [Avoid updating registry when adding existing deps][cargo/3144]\n* [Warn about path overrides that won't work][cargo/3136]\n* [Use workspaces during `cargo install`][cargo/3146]\n* [Leak mspdbsrv.exe processes on Windows][cargo/3162]\n* [Add --message-format flag][cargo/3000]\n* [Pass target environment for rustdoc][cargo/3205]\n* [Use `CommandExt::exec` for `cargo run` on Unix][cargo/2818]\n* [Update curl and curl-sys][cargo/3241]\n* [Call rustdoc test with the correct cfg flags of a package][cargo/3242]\n\nTooling\n-------\n\n* [rustdoc: Add the `--sysroot` argument][36586]\n* [rustdoc: Fix a couple of issues with the search results][35655]\n* [rustdoc: remove the `!` from macro URLs and titles][35234]\n* [gdb: Fix pretty-printing special-cased Rust types][35585]\n* [rustdoc: Filter more incorrect methods inherited through Deref][36266]\n\nMisc\n----\n\n* [Remove unmaintained style guide][35124]\n* [Add s390x support][36369]\n* [Initial work at Haiku OS support][36727]\n* [Add mips-uclibc targets][35734]\n* [Crate-ify compiler-rt into compiler-builtins][35021]\n* [Add rustc version info (git hash + date) to dist tarball][36213]\n* Many documentation improvements\n\nCompatibility Notes\n-------------------\n\n* [`SipHasher`] is deprecated. Use [`DefaultHasher`].\n* [Deny (by default) transmuting from fn item types to pointer-sized\n  types][34923]. Continuing the long transition to zero-sized fn items,\n  per [RFC 401].\n* [Fix `#[derive]` for empty tuple structs/variants][35728].\n  Part of [RFC 1506].\n* [Issue deprecation warnings for safe accesses to extern statics][36173]\n* [Fix lifetime rules for 'if' conditions][36029].\n* [Inherit overflow checks for sum and product][36372].\n* [Forbid user-defined macros named \"macro_rules\"][36730].\n\n[33922]: https://github.com/rust-lang/rust/pull/33922\n[34623]: https://github.com/rust-lang/rust/pull/34623\n[34923]: https://github.com/rust-lang/rust/pull/34923\n[34942]: https://github.com/rust-lang/rust/pull/34942\n[35021]: https://github.com/rust-lang/rust/pull/35021\n[35048]: https://github.com/rust-lang/rust/pull/35048\n[35074]: https://github.com/rust-lang/rust/pull/35074\n[35124]: https://github.com/rust-lang/rust/pull/35124\n[35234]: https://github.com/rust-lang/rust/pull/35234\n[35238]: https://github.com/rust-lang/rust/pull/35238\n[35354]: https://github.com/rust-lang/rust/pull/35354\n[35559]: https://github.com/rust-lang/rust/pull/35559\n[35585]: https://github.com/rust-lang/rust/pull/35585\n[35627]: https://github.com/rust-lang/rust/pull/35627\n[35655]: https://github.com/rust-lang/rust/pull/35655\n[35702]: https://github.com/rust-lang/rust/pull/35702\n[35707]: https://github.com/rust-lang/rust/pull/35707\n[35728]: https://github.com/rust-lang/rust/pull/35728\n[35734]: https://github.com/rust-lang/rust/pull/35734\n[35755]: https://github.com/rust-lang/rust/pull/35755\n[35761]: https://github.com/rust-lang/rust/pull/35761\n[35764]: https://github.com/rust-lang/rust/pull/35764\n[35814]: https://github.com/rust-lang/rust/pull/35814\n[35854]: https://github.com/rust-lang/rust/pull/35854\n[35871]: https://github.com/rust-lang/rust/pull/35871\n[35884]: https://github.com/rust-lang/rust/pull/35884\n[35911]: https://github.com/rust-lang/rust/pull/35911\n[35969]: https://github.com/rust-lang/rust/pull/35969\n[35975]: https://github.com/rust-lang/rust/pull/35975\n[36004]: https://github.com/rust-lang/rust/pull/36004\n[36008]: https://github.com/rust-lang/rust/pull/36008\n[36014]: https://github.com/rust-lang/rust/pull/36014\n[36029]: https://github.com/rust-lang/rust/pull/36029\n[36059]: https://github.com/rust-lang/rust/pull/36059\n[36072]: https://github.com/rust-lang/rust/pull/36072\n[36101]: https://github.com/rust-lang/rust/pull/36101\n[36104]: https://github.com/rust-lang/rust/pull/36104\n[36171]: https://github.com/rust-lang/rust/pull/36171\n[36173]: https://github.com/rust-lang/rust/pull/36173\n[36178]: https://github.com/rust-lang/rust/pull/36178\n[36213]: https://github.com/rust-lang/rust/pull/36213\n[36214]: https://github.com/rust-lang/rust/pull/36214\n[36264]: https://github.com/rust-lang/rust/pull/36264\n[36266]: https://github.com/rust-lang/rust/pull/36266\n[36289]: https://github.com/rust-lang/rust/pull/36289\n[36338]: https://github.com/rust-lang/rust/pull/36338\n[36351]: https://github.com/rust-lang/rust/pull/36351\n[36355]: https://github.com/rust-lang/rust/pull/36355\n[36369]: https://github.com/rust-lang/rust/pull/36369\n[36372]: https://github.com/rust-lang/rust/pull/36372\n[36423]: https://github.com/rust-lang/rust/pull/36423\n[36482]: https://github.com/rust-lang/rust/pull/36482\n[36505]: https://github.com/rust-lang/rust/pull/36505\n[36524]: https://github.com/rust-lang/rust/pull/36524\n[36527]: https://github.com/rust-lang/rust/pull/36527\n[36551]: https://github.com/rust-lang/rust/pull/36551\n[36574]: https://github.com/rust-lang/rust/pull/36574\n[36586]: https://github.com/rust-lang/rust/pull/36586\n[36592]: https://github.com/rust-lang/rust/pull/36592\n[36631]: https://github.com/rust-lang/rust/pull/36631\n[36721]: https://github.com/rust-lang/rust/pull/36721\n[36727]: https://github.com/rust-lang/rust/pull/36727\n[36730]: https://github.com/rust-lang/rust/pull/36730\n[36734]: https://github.com/rust-lang/rust/pull/36734\n[36754]: https://github.com/rust-lang/rust/pull/36754\n[36995]: https://github.com/rust-lang/rust/pull/36995\n[RFC 0016]: https://github.com/rust-lang/rfcs/blob/master/text/0016-more-attributes.md\n[RFC 0243]: https://github.com/rust-lang/rfcs/blob/master/text/0243-trait-based-exception-handling.md\n[RFC 1506]: https://github.com/rust-lang/rfcs/blob/master/text/1506-adt-kinds.md\n[RFC 401]: https://github.com/rust-lang/rfcs/blob/master/text/0401-coercions.md\n[RFC 873]: https://github.com/rust-lang/rfcs/blob/master/text/0873-type-macros.md\n[cargo/2818]: https://github.com/rust-lang/cargo/pull/2818\n[cargo/3000]: https://github.com/rust-lang/cargo/pull/3000\n[cargo/3021]: https://github.com/rust-lang/cargo/pull/3021\n[cargo/3038]: https://github.com/rust-lang/cargo/pull/3038\n[cargo/3060]: https://github.com/rust-lang/cargo/pull/3060\n[cargo/3078]: https://github.com/rust-lang/cargo/pull/3078\n[cargo/3089]: https://github.com/rust-lang/cargo/pull/3089\n[cargo/3092]: https://github.com/rust-lang/cargo/pull/3092\n[cargo/3110]: https://github.com/rust-lang/cargo/pull/3110\n[cargo/3121]: https://github.com/rust-lang/cargo/pull/3121\n[cargo/3123]: https://github.com/rust-lang/cargo/pull/3123\n[cargo/3125]: https://github.com/rust-lang/cargo/pull/3125\n[cargo/3136]: https://github.com/rust-lang/cargo/pull/3136\n[cargo/3144]: https://github.com/rust-lang/cargo/pull/3144\n[cargo/3146]: https://github.com/rust-lang/cargo/pull/3146\n[cargo/3157]: https://github.com/rust-lang/cargo/pull/3157\n[cargo/3162]: https://github.com/rust-lang/cargo/pull/3162\n[cargo/3205]: https://github.com/rust-lang/cargo/pull/3205\n[cargo/3241]: https://github.com/rust-lang/cargo/pull/3241\n[cargo/3242]: https://github.com/rust-lang/cargo/pull/3242\n[`checked_abs`]: https://doc.rust-lang.org/std/primitive.i32.html#method.checked_abs\n[`wrapping_abs`]: https://doc.rust-lang.org/std/primitive.i32.html#method.wrapping_abs\n[`overflowing_abs`]: https://doc.rust-lang.org/std/primitive.i32.html#method.overflowing_abs\n[`RefCell::try_borrow`]: https://doc.rust-lang.org/std/cell/struct.RefCell.html#method.try_borrow\n[`RefCell::try_borrow_mut`]: https://doc.rust-lang.org/std/cell/struct.RefCell.html#method.try_borrow_mut\n[`SipHasher`]: https://doc.rust-lang.org/std/hash/struct.SipHasher.html\n[`DefaultHasher`]: https://doc.rust-lang.org/std/collections/hash_map/struct.DefaultHasher.html\n\n\nVersion 1.12.1 (2016-10-20)\n===========================\n\nRegression Fixes\n----------------\n\n* [ICE: 'rustc' panicked at 'assertion failed: concrete_substs.is_normalized_for_trans()' #36381][36381]\n* [Confusion with double negation and booleans][36856]\n* [rustc 1.12.0 fails with SIGSEGV in release mode (syn crate 0.8.0)][36875]\n* [Rustc 1.12.0 Windows build of `ethcore` crate fails with LLVM error][36924]\n* [1.12.0: High memory usage when linking in release mode with debug info][36926]\n* [Corrupted memory after updated to 1.12][36936]\n* [\"Let NullaryConstructor = something;\" causes internal compiler error: \"tried to overwrite interned AdtDef\"][37026]\n* [Fix ICE: inject bitcast if types mismatch for invokes/calls/stores][37112]\n* [debuginfo: Handle spread_arg case in MIR-trans in a more stable way.][37153]\n\n[36381]: https://github.com/rust-lang/rust/issues/36381\n[36856]: https://github.com/rust-lang/rust/issues/36856\n[36875]: https://github.com/rust-lang/rust/issues/36875\n[36924]: https://github.com/rust-lang/rust/issues/36924\n[36926]: https://github.com/rust-lang/rust/issues/36926\n[36936]: https://github.com/rust-lang/rust/issues/36936\n[37026]: https://github.com/rust-lang/rust/issues/37026\n[37112]: https://github.com/rust-lang/rust/issues/37112\n[37153]: https://github.com/rust-lang/rust/issues/37153\n\n\nVersion 1.12.0 (2016-09-29)\n===========================\n\nHighlights\n----------\n\n* [`rustc` translates code to LLVM IR via its own \"middle\" IR (MIR)](https://github.com/rust-lang/rust/pull/34096).\n  This translation pass is far simpler than the previous AST->LLVM pass, and\n  creates opportunities to perform new optimizations directly on the MIR. It\n  was previously described [on the Rust blog](https://blog.rust-lang.org/2016/04/19/MIR.html).\n* [`rustc` presents a new, more readable error format, along with\n  machine-readable JSON error output for use by IDEs](https://github.com/rust-lang/rust/pull/35401).\n  Most common editors supporting Rust have been updated to work with it. It was\n  previously described [on the Rust blog](https://blog.rust-lang.org/2016/08/10/Shape-of-errors-to-come.html).\n\nCompiler\n--------\n\n* [`rustc` translates code to LLVM IR via its own \"middle\" IR (MIR)](https://github.com/rust-lang/rust/pull/34096).\n  This translation pass is far simpler than the previous AST->LLVM pass, and\n  creates opportunities to perform new optimizations directly on the MIR. It\n  was previously described [on the Rust blog](https://blog.rust-lang.org/2016/04/19/MIR.html).\n* [Print the Rust target name, not the LLVM target name, with\n  `--print target-list`](https://github.com/rust-lang/rust/pull/35489)\n* [The computation of `TypeId` is correct in some cases where it was previously\n  producing inconsistent results](https://github.com/rust-lang/rust/pull/35267)\n* [The `mips-unknown-linux-gnu` target uses hardware floating point by default](https://github.com/rust-lang/rust/pull/34910)\n* [The `rustc` arguments, `--print target-cpus`, `--print target-features`,\n  `--print relocation-models`, and `--print code-models` print the available\n  options to the `-C target-cpu`, `-C target-feature`, `-C relocation-model` and\n  `-C code-model` code generation arguments](https://github.com/rust-lang/rust/pull/34845)\n* [`rustc` supports three new MUSL targets on ARM: `arm-unknown-linux-musleabi`,\n  `arm-unknown-linux-musleabihf`, and `armv7-unknown-linux-musleabihf`](https://github.com/rust-lang/rust/pull/35060).\n  These targets produce statically-linked binaries. There are no binary release\n  builds yet though.\n\nDiagnostics\n-----------\n\n* [`rustc` presents a new, more readable error format, along with\n  machine-readable JSON error output for use by IDEs](https://github.com/rust-lang/rust/pull/35401).\n  Most common editors supporting Rust have been updated to work with it. It was\n  previously described [on the Rust blog](https://blog.rust-lang.org/2016/08/10/Shape-of-errors-to-come.html).\n* [In error descriptions, references are now described in plain English,\n  instead of as \"&-ptr\"](https://github.com/rust-lang/rust/pull/35611)\n* [In error type descriptions, unknown numeric types are named `{integer}` or\n  `{float}` instead of `_`](https://github.com/rust-lang/rust/pull/35080)\n* [`rustc` emits a clearer error when inner attributes follow a doc comment](https://github.com/rust-lang/rust/pull/34676)\n\nLanguage\n--------\n\n* [`macro_rules!` invocations can be made within `macro_rules!` invocations](https://github.com/rust-lang/rust/pull/34925)\n* [`macro_rules!` meta-variables are hygienic](https://github.com/rust-lang/rust/pull/35453)\n* [`macro_rules!` `tt` matchers can be reparsed correctly, making them much more\n  useful](https://github.com/rust-lang/rust/pull/34908)\n* [`macro_rules!` `stmt` matchers correctly consume the entire contents when\n  inside non-braces invocations](https://github.com/rust-lang/rust/pull/34886)\n* [Semicolons are properly required as statement delimiters inside\n  `macro_rules!` invocations](https://github.com/rust-lang/rust/pull/34660)\n* [`cfg_attr` works on `path` attributes](https://github.com/rust-lang/rust/pull/34546)\n\nStabilized APIs\n---------------\n\n* [`Cell::as_ptr`](https://doc.rust-lang.org/std/cell/struct.Cell.html#method.as_ptr)\n* [`RefCell::as_ptr`](https://doc.rust-lang.org/std/cell/struct.RefCell.html#method.as_ptr)\n* [`IpAddr::is_unspecified`](https://doc.rust-lang.org/std/net/enum.IpAddr.html#method.is_unspecified)\n* [`IpAddr::is_loopback`](https://doc.rust-lang.org/std/net/enum.IpAddr.html#method.is_loopback)\n* [`IpAddr::is_multicast`](https://doc.rust-lang.org/std/net/enum.IpAddr.html#method.is_multicast)\n* [`Ipv4Addr::is_unspecified`](https://doc.rust-lang.org/std/net/struct.Ipv4Addr.html#method.is_unspecified)\n* [`Ipv6Addr::octets`](https://doc.rust-lang.org/std/net/struct.Ipv6Addr.html#method.octets)\n* [`LinkedList::contains`](https://doc.rust-lang.org/std/collections/linked_list/struct.LinkedList.html#method.contains)\n* [`VecDeque::contains`](https://doc.rust-lang.org/std/collections/vec_deque/struct.VecDeque.html#method.contains)\n* [`ExitStatusExt::from_raw`](https://doc.rust-lang.org/std/os/unix/process/trait.ExitStatusExt.html#tymethod.from_raw).\n  Both on Unix and Windows.\n* [`Receiver::recv_timeout`](https://doc.rust-lang.org/std/sync/mpsc/struct.Receiver.html#method.recv_timeout)\n* [`RecvTimeoutError`](https://doc.rust-lang.org/std/sync/mpsc/enum.RecvTimeoutError.html)\n* [`BinaryHeap::peek_mut`](https://doc.rust-lang.org/std/collections/binary_heap/struct.BinaryHeap.html#method.peek_mut)\n* [`PeekMut`](https://doc.rust-lang.org/std/collections/binary_heap/struct.PeekMut.html)\n* [`iter::Product`](https://doc.rust-lang.org/std/iter/trait.Product.html)\n* [`iter::Sum`](https://doc.rust-lang.org/std/iter/trait.Sum.html)\n* [`OccupiedEntry::remove_entry`](https://doc.rust-lang.org/std/collections/btree_map/struct.OccupiedEntry.html#method.remove_entry)\n* [`VacantEntry::into_key`](https://doc.rust-lang.org/std/collections/btree_map/struct.VacantEntry.html#method.into_key)\n\nLibraries\n---------\n\n* [The `format!` macro and friends now allow a single argument to be formatted\n  in multiple styles](https://github.com/rust-lang/rust/pull/33642)\n* [The lifetime bounds on `[T]::binary_search_by` and\n  `[T]::binary_search_by_key` have been adjusted to be more flexible](https://github.com/rust-lang/rust/pull/34762)\n* [`Option` implements `From` for its contained type](https://github.com/rust-lang/rust/pull/34828)\n* [`Cell`, `RefCell` and `UnsafeCell` implement `From` for their contained type](https://github.com/rust-lang/rust/pull/35392)\n* [`RwLock` panics if the reader count overflows](https://github.com/rust-lang/rust/pull/35378)\n* [`vec_deque::Drain`, `hash_map::Drain` and `hash_set::Drain` are covariant](https://github.com/rust-lang/rust/pull/35354)\n* [`vec::Drain` and `binary_heap::Drain` are covariant](https://github.com/rust-lang/rust/pull/34951)\n* [`Cow<str>` implements `FromIterator` for `char`, `&str` and `String`](https://github.com/rust-lang/rust/pull/35064)\n* [Sockets on Linux are correctly closed in subprocesses via `SOCK_CLOEXEC`](https://github.com/rust-lang/rust/pull/34946)\n* [`hash_map::Entry`, `hash_map::VacantEntry` and `hash_map::OccupiedEntry`\n  implement `Debug`](https://github.com/rust-lang/rust/pull/34937)\n* [`btree_map::Entry`, `btree_map::VacantEntry` and `btree_map::OccupiedEntry`\n  implement `Debug`](https://github.com/rust-lang/rust/pull/34885)\n* [`String` implements `AddAssign`](https://github.com/rust-lang/rust/pull/34890)\n* [Variadic `extern fn` pointers implement the `Clone`, `PartialEq`, `Eq`,\n  `PartialOrd`, `Ord`, `Hash`, `fmt::Pointer`, and `fmt::Debug` traits](https://github.com/rust-lang/rust/pull/34879)\n* [`FileType` implements `Debug`](https://github.com/rust-lang/rust/pull/34757)\n* [References to `Mutex` and `RwLock` are unwind-safe](https://github.com/rust-lang/rust/pull/34756)\n* [`mpsc::sync_channel` `Receiver`s return any available message before\n  reporting a disconnect](https://github.com/rust-lang/rust/pull/34731)\n* [Unicode definitions have been updated to 9.0](https://github.com/rust-lang/rust/pull/34599)\n* [`env` iterators implement `DoubleEndedIterator`](https://github.com/rust-lang/rust/pull/33312)\n\nCargo\n-----\n\n* [Support local mirrors of registries](https://github.com/rust-lang/cargo/pull/2857)\n* [Add support for command aliases](https://github.com/rust-lang/cargo/pull/2679)\n* [Allow `opt-level=\"s\"` / `opt-level=\"z\"` in profile overrides](https://github.com/rust-lang/cargo/pull/3007)\n* [Make `cargo doc --open --target` work as expected](https://github.com/rust-lang/cargo/pull/2988)\n* [Speed up noop registry updates](https://github.com/rust-lang/cargo/pull/2974)\n* [Update OpenSSL](https://github.com/rust-lang/cargo/pull/2971)\n* [Fix `--panic=abort` with plugins](https://github.com/rust-lang/cargo/pull/2954)\n* [Always pass `-C metadata` to the compiler](https://github.com/rust-lang/cargo/pull/2946)\n* [Fix depending on git repos with workspaces](https://github.com/rust-lang/cargo/pull/2938)\n* [Add a `--lib` flag to `cargo new`](https://github.com/rust-lang/cargo/pull/2921)\n* [Add `http.cainfo` for custom certs](https://github.com/rust-lang/cargo/pull/2917)\n* [Indicate the compilation profile after compiling](https://github.com/rust-lang/cargo/pull/2909)\n* [Allow enabling features for dependencies with `--features`](https://github.com/rust-lang/cargo/pull/2876)\n* [Add `--jobs` flag to `cargo package`](https://github.com/rust-lang/cargo/pull/2867)\n* [Add `--dry-run` to `cargo publish`](https://github.com/rust-lang/cargo/pull/2849)\n* [Add support for `RUSTDOCFLAGS`](https://github.com/rust-lang/cargo/pull/2794)\n\nPerformance\n-----------\n\n* [`panic::catch_unwind` is more optimized](https://github.com/rust-lang/rust/pull/35444)\n* [`panic::catch_unwind` no longer accesses thread-local storage on entry](https://github.com/rust-lang/rust/pull/34866)\n\nTooling\n-------\n\n* [Test binaries now support a `--test-threads` argument to specify the number\n  of threads used to run tests, and which acts the same as the\n  `RUST_TEST_THREADS` environment variable](https://github.com/rust-lang/rust/pull/35414)\n* [The test runner now emits a warning when tests run over 60 seconds](https://github.com/rust-lang/rust/pull/35405)\n* [rustdoc: Fix methods in search results](https://github.com/rust-lang/rust/pull/34752)\n* [`rust-lldb` warns about unsupported versions of LLDB](https://github.com/rust-lang/rust/pull/34646)\n* [Rust releases now come with source packages that can be installed by rustup\n  via `rustup component add rust-src`](https://github.com/rust-lang/rust/pull/34366).\n  The resulting source code can be used by tools and IDES, located in the\n  sysroot under `lib/rustlib/src`.\n\nMisc\n----\n\n* [The compiler can now be built against LLVM 3.9](https://github.com/rust-lang/rust/pull/35594)\n* Many minor improvements to the documentation.\n* [The Rust exception handling \"personality\" routine is now written in Rust](https://github.com/rust-lang/rust/pull/34832)\n\nCompatibility Notes\n-------------------\n\n* [When printing Windows `OsStr`s, unpaired surrogate codepoints are escaped\n  with the lowercase format instead of the uppercase](https://github.com/rust-lang/rust/pull/35084)\n* [When formatting strings, if \"precision\" is specified, the \"fill\",\n  \"align\" and \"width\" specifiers are no longer ignored](https://github.com/rust-lang/rust/pull/34544)\n* [The `Debug` impl for strings no longer escapes all non-ASCII characters](https://github.com/rust-lang/rust/pull/34485)\n\n\nVersion 1.11.0 (2016-08-18)\n===========================\n\nLanguage\n--------\n\n* [Support nested `cfg_attr` attributes](https://github.com/rust-lang/rust/pull/34216)\n* [Allow statement-generating braced macro invocations at the end of blocks](https://github.com/rust-lang/rust/pull/34436)\n* [Macros can be expanded inside of trait definitions](https://github.com/rust-lang/rust/pull/34213)\n* [`#[macro_use]` works properly when it is itself expanded from a macro](https://github.com/rust-lang/rust/pull/34032)\n\nStabilized APIs\n---------------\n\n* [`BinaryHeap::append`](https://doc.rust-lang.org/std/collections/binary_heap/struct.BinaryHeap.html#method.append)\n* [`BTreeMap::append`](https://doc.rust-lang.org/std/collections/btree_map/struct.BTreeMap.html#method.append)\n* [`BTreeMap::split_off`](https://doc.rust-lang.org/std/collections/btree_map/struct.BTreeMap.html#method.split_off)\n* [`BTreeSet::append`](https://doc.rust-lang.org/std/collections/btree_set/struct.BTreeSet.html#method.append)\n* [`BTreeSet::split_off`](https://doc.rust-lang.org/std/collections/btree_set/struct.BTreeSet.html#method.split_off)\n* [`f32::to_degrees`](https://doc.rust-lang.org/std/primitive.f32.html#method.to_degrees)\n  (in libcore - previously stabilized in libstd)\n* [`f32::to_radians`](https://doc.rust-lang.org/std/primitive.f32.html#method.to_radians)\n  (in libcore - previously stabilized in libstd)\n* [`f64::to_degrees`](https://doc.rust-lang.org/std/primitive.f64.html#method.to_degrees)\n  (in libcore - previously stabilized in libstd)\n* [`f64::to_radians`](https://doc.rust-lang.org/std/primitive.f64.html#method.to_radians)\n  (in libcore - previously stabilized in libstd)\n* [`Iterator::sum`](https://doc.rust-lang.org/std/iter/trait.Iterator.html#method.sum)\n* [`Iterator::product`](https://doc.rust-lang.org/std/iter/trait.Iterator.html#method.product)\n* [`Cell::get_mut`](https://doc.rust-lang.org/std/cell/struct.Cell.html#method.get_mut)\n* [`RefCell::get_mut`](https://doc.rust-lang.org/std/cell/struct.RefCell.html#method.get_mut)\n\nLibraries\n---------\n\n* [The `thread_local!` macro supports multiple definitions in a single\n   invocation, and can apply attributes](https://github.com/rust-lang/rust/pull/34077)\n* [`Cow` implements `Default`](https://github.com/rust-lang/rust/pull/34305)\n* [`Wrapping` implements binary, octal, lower-hex and upper-hex\n  `Display` formatting](https://github.com/rust-lang/rust/pull/34190)\n* [The range types implement `Hash`](https://github.com/rust-lang/rust/pull/34180)\n* [`lookup_host` ignores unknown address types](https://github.com/rust-lang/rust/pull/34067)\n* [`assert_eq!` accepts a custom error message, like `assert!` does](https://github.com/rust-lang/rust/pull/33976)\n* [The main thread is now called \"main\" instead of \"&lt;main&gt;\"](https://github.com/rust-lang/rust/pull/33803)\n\nCargo\n-----\n\n* [Disallow specifying features of transitive deps](https://github.com/rust-lang/cargo/pull/2821)\n* [Add color support for Windows consoles](https://github.com/rust-lang/cargo/pull/2804)\n* [Fix `harness = false` on `[lib]` sections](https://github.com/rust-lang/cargo/pull/2795)\n* [Don't panic when `links` contains a '.'](https://github.com/rust-lang/cargo/pull/2787)\n* [Build scripts can emit warnings](https://github.com/rust-lang/cargo/pull/2630),\n  and `-vv` prints warnings for all crates.\n* [Ignore file locks on OS X NFS mounts](https://github.com/rust-lang/cargo/pull/2720)\n* [Don't warn about `package.metadata` keys](https://github.com/rust-lang/cargo/pull/2668).\n  This provides room for expansion by arbitrary tools.\n* [Add support for cdylib crate types](https://github.com/rust-lang/cargo/pull/2741)\n* [Prevent publishing crates when files are dirty](https://github.com/rust-lang/cargo/pull/2781)\n* [Don't fetch all crates on clean](https://github.com/rust-lang/cargo/pull/2704)\n* [Propagate --color option to rustc](https://github.com/rust-lang/cargo/pull/2779)\n* [Fix `cargo doc --open` on Windows](https://github.com/rust-lang/cargo/pull/2780)\n* [Improve autocompletion](https://github.com/rust-lang/cargo/pull/2772)\n* [Configure colors of stderr as well as stdout](https://github.com/rust-lang/cargo/pull/2739)\n\nPerformance\n-----------\n\n* [Caching projections speeds up type check dramatically for some\n  workloads](https://github.com/rust-lang/rust/pull/33816)\n* [The default `HashMap` hasher is SipHash 1-3 instead of SipHash 2-4](https://github.com/rust-lang/rust/pull/33940)\n  This hasher is faster, but is believed to provide sufficient\n  protection from collision attacks.\n* [Comparison of `Ipv4Addr` is 10x faster](https://github.com/rust-lang/rust/pull/33891)\n\nRustdoc\n-------\n\n* [Fix empty implementation section on some module pages](https://github.com/rust-lang/rust/pull/34536)\n* [Fix inlined renamed re-exports in import lists](https://github.com/rust-lang/rust/pull/34479)\n* [Fix search result layout for enum variants and struct fields](https://github.com/rust-lang/rust/pull/34477)\n* [Fix issues with source links to external crates](https://github.com/rust-lang/rust/pull/34387)\n* [Fix redirect pages for renamed re-exports](https://github.com/rust-lang/rust/pull/34245)\n\nTooling\n-------\n\n* [rustc is better at finding the MSVC toolchain](https://github.com/rust-lang/rust/pull/34492)\n* [When emitting debug info, rustc emits frame pointers for closures,\n  shims and glue, as it does for all other functions](https://github.com/rust-lang/rust/pull/33909)\n* [rust-lldb warns about unsupported versions of LLDB](https://github.com/rust-lang/rust/pull/34646)\n* Many more errors have been given error codes and extended\n  explanations\n* API documentation continues to be improved, with many new examples\n\nMisc\n----\n\n* [rustc no longer hangs when dependencies recursively re-export\n  submodules](https://github.com/rust-lang/rust/pull/34542)\n* [rustc requires LLVM 3.7+](https://github.com/rust-lang/rust/pull/34104)\n* [The 'How Safe and Unsafe Interact' chapter of The Rustonomicon was\n  rewritten](https://github.com/rust-lang/rust/pull/33895)\n* [rustc support 16-bit pointer sizes](https://github.com/rust-lang/rust/pull/33460).\n  No targets use this yet, but it works toward AVR support.\n\nCompatibility Notes\n-------------------\n\n* [`const`s and `static`s may not have unsized types](https://github.com/rust-lang/rust/pull/34443)\n* [The new follow-set rules that place restrictions on `macro_rules!`\n  in order to ensure syntax forward-compatibility have been enabled](https://github.com/rust-lang/rust/pull/33982)\n  This was an [amendment to RFC 550](https://github.com/rust-lang/rfcs/pull/1384),\n  and has been a warning since 1.10.\n* [`cfg` attribute process has been refactored to fix various bugs](https://github.com/rust-lang/rust/pull/33706).\n  This causes breakage in some corner cases.\n\n\nVersion 1.10.0 (2016-07-07)\n===========================\n\nLanguage\n--------\n\n* [`Copy` types are required to have a trivial implementation of `Clone`](https://github.com/rust-lang/rust/pull/33420).\n  [RFC 1521](https://github.com/rust-lang/rfcs/blob/master/text/1521-copy-clone-semantics.md).\n* [Single-variant enums support the `#[repr(..)]` attribute](https://github.com/rust-lang/rust/pull/33355).\n* [Fix `#[derive(RustcEncodable)]` in the presence of other `encode` methods](https://github.com/rust-lang/rust/pull/32908).\n* [`panic!` can be converted to a runtime abort with the\n  `-C panic=abort` flag](https://github.com/rust-lang/rust/pull/32900).\n  [RFC 1513](https://github.com/rust-lang/rfcs/blob/master/text/1513-less-unwinding.md).\n* [Add a new crate type, 'cdylib'](https://github.com/rust-lang/rust/pull/33553).\n  cdylibs are dynamic libraries suitable for loading by non-Rust hosts.\n  [RFC 1510](https://github.com/rust-lang/rfcs/blob/master/text/1510-cdylib.md).\n  Note that Cargo does not yet directly support cdylibs.\n\nStabilized APIs\n---------------\n\n* `os::windows::fs::OpenOptionsExt::access_mode`\n* `os::windows::fs::OpenOptionsExt::share_mode`\n* `os::windows::fs::OpenOptionsExt::custom_flags`\n* `os::windows::fs::OpenOptionsExt::attributes`\n* `os::windows::fs::OpenOptionsExt::security_qos_flags`\n* `os::unix::fs::OpenOptionsExt::custom_flags`\n* [`sync::Weak::new`](http://doc.rust-lang.org/alloc/arc/struct.Weak.html#method.new)\n* `Default for sync::Weak`\n* [`panic::set_hook`](http://doc.rust-lang.org/std/panic/fn.set_hook.html)\n* [`panic::take_hook`](http://doc.rust-lang.org/std/panic/fn.take_hook.html)\n* [`panic::PanicInfo`](http://doc.rust-lang.org/std/panic/struct.PanicInfo.html)\n* [`panic::PanicInfo::payload`](http://doc.rust-lang.org/std/panic/struct.PanicInfo.html#method.payload)\n* [`panic::PanicInfo::location`](http://doc.rust-lang.org/std/panic/struct.PanicInfo.html#method.location)\n* [`panic::Location`](http://doc.rust-lang.org/std/panic/struct.Location.html)\n* [`panic::Location::file`](http://doc.rust-lang.org/std/panic/struct.Location.html#method.file)\n* [`panic::Location::line`](http://doc.rust-lang.org/std/panic/struct.Location.html#method.line)\n* [`ffi::CStr::from_bytes_with_nul`](http://doc.rust-lang.org/std/ffi/struct.CStr.html#method.from_bytes_with_nul)\n* [`ffi::CStr::from_bytes_with_nul_unchecked`](http://doc.rust-lang.org/std/ffi/struct.CStr.html#method.from_bytes_with_nul_unchecked)\n* [`ffi::FromBytesWithNulError`](http://doc.rust-lang.org/std/ffi/struct.FromBytesWithNulError.html)\n* [`fs::Metadata::modified`](http://doc.rust-lang.org/std/fs/struct.Metadata.html#method.modified)\n* [`fs::Metadata::accessed`](http://doc.rust-lang.org/std/fs/struct.Metadata.html#method.accessed)\n* [`fs::Metadata::created`](http://doc.rust-lang.org/std/fs/struct.Metadata.html#method.created)\n* `sync::atomic::Atomic{Usize,Isize,Bool,Ptr}::compare_exchange`\n* `sync::atomic::Atomic{Usize,Isize,Bool,Ptr}::compare_exchange_weak`\n* `collections::{btree,hash}_map::{Occupied,Vacant,}Entry::key`\n* `os::unix::net::{UnixStream, UnixListener, UnixDatagram, SocketAddr}`\n* [`SocketAddr::is_unnamed`](http://doc.rust-lang.org/std/os/unix/net/struct.SocketAddr.html#method.is_unnamed)\n* [`SocketAddr::as_pathname`](http://doc.rust-lang.org/std/os/unix/net/struct.SocketAddr.html#method.as_pathname)\n* [`UnixStream::connect`](http://doc.rust-lang.org/std/os/unix/net/struct.UnixStream.html#method.connect)\n* [`UnixStream::pair`](http://doc.rust-lang.org/std/os/unix/net/struct.UnixStream.html#method.pair)\n* [`UnixStream::try_clone`](http://doc.rust-lang.org/std/os/unix/net/struct.UnixStream.html#method.try_clone)\n* [`UnixStream::local_addr`](http://doc.rust-lang.org/std/os/unix/net/struct.UnixStream.html#method.local_addr)\n* [`UnixStream::peer_addr`](http://doc.rust-lang.org/std/os/unix/net/struct.UnixStream.html#method.peer_addr)\n* [`UnixStream::set_read_timeout`](http://doc.rust-lang.org/std/os/unix/net/struct.UnixStream.html#method.read_timeout)\n* [`UnixStream::set_write_timeout`](http://doc.rust-lang.org/std/os/unix/net/struct.UnixStream.html#method.write_timeout)\n* [`UnixStream::read_timeout`](http://doc.rust-lang.org/std/os/unix/net/struct.UnixStream.html#method.read_timeout)\n* [`UnixStream::write_timeout`](http://doc.rust-lang.org/std/os/unix/net/struct.UnixStream.html#method.write_timeout)\n* [`UnixStream::set_nonblocking`](http://doc.rust-lang.org/std/os/unix/net/struct.UnixStream.html#method.set_nonblocking)\n* [`UnixStream::take_error`](http://doc.rust-lang.org/std/os/unix/net/struct.UnixStream.html#method.take_error)\n* [`UnixStream::shutdown`](http://doc.rust-lang.org/std/os/unix/net/struct.UnixStream.html#method.shutdown)\n* Read/Write/RawFd impls for `UnixStream`\n* [`UnixListener::bind`](http://doc.rust-lang.org/std/os/unix/net/struct.UnixListener.html#method.bind)\n* [`UnixListener::accept`](http://doc.rust-lang.org/std/os/unix/net/struct.UnixListener.html#method.accept)\n* [`UnixListener::try_clone`](http://doc.rust-lang.org/std/os/unix/net/struct.UnixListener.html#method.try_clone)\n* [`UnixListener::local_addr`](http://doc.rust-lang.org/std/os/unix/net/struct.UnixListener.html#method.local_addr)\n* [`UnixListener::set_nonblocking`](http://doc.rust-lang.org/std/os/unix/net/struct.UnixListener.html#method.set_nonblocking)\n* [`UnixListener::take_error`](http://doc.rust-lang.org/std/os/unix/net/struct.UnixListener.html#method.take_error)\n* [`UnixListener::incoming`](http://doc.rust-lang.org/std/os/unix/net/struct.UnixListener.html#method.incoming)\n* RawFd impls for `UnixListener`\n* [`UnixDatagram::bind`](http://doc.rust-lang.org/std/os/unix/net/struct.UnixDatagram.html#method.bind)\n* [`UnixDatagram::unbound`](http://doc.rust-lang.org/std/os/unix/net/struct.UnixDatagram.html#method.unbound)\n* [`UnixDatagram::pair`](http://doc.rust-lang.org/std/os/unix/net/struct.UnixDatagram.html#method.pair)\n* [`UnixDatagram::connect`](http://doc.rust-lang.org/std/os/unix/net/struct.UnixDatagram.html#method.connect)\n* [`UnixDatagram::try_clone`](http://doc.rust-lang.org/std/os/unix/net/struct.UnixDatagram.html#method.try_clone)\n* [`UnixDatagram::local_addr`](http://doc.rust-lang.org/std/os/unix/net/struct.UnixDatagram.html#method.local_addr)\n* [`UnixDatagram::peer_addr`](http://doc.rust-lang.org/std/os/unix/net/struct.UnixDatagram.html#method.peer_addr)\n* [`UnixDatagram::recv_from`](http://doc.rust-lang.org/std/os/unix/net/struct.UnixDatagram.html#method.recv_from)\n* [`UnixDatagram::recv`](http://doc.rust-lang.org/std/os/unix/net/struct.UnixDatagram.html#method.recv)\n* [`UnixDatagram::send_to`](http://doc.rust-lang.org/std/os/unix/net/struct.UnixDatagram.html#method.send_to)\n* [`UnixDatagram::send`](http://doc.rust-lang.org/std/os/unix/net/struct.UnixDatagram.html#method.send)\n* [`UnixDatagram::set_read_timeout`](http://doc.rust-lang.org/std/os/unix/net/struct.UnixDatagram.html#method.set_read_timeout)\n* [`UnixDatagram::set_write_timeout`](http://doc.rust-lang.org/std/os/unix/net/struct.UnixDatagram.html#method.set_write_timeout)\n* [`UnixDatagram::read_timeout`](http://doc.rust-lang.org/std/os/unix/net/struct.UnixDatagram.html#method.read_timeout)\n* [`UnixDatagram::write_timeout`](http://doc.rust-lang.org/std/os/unix/net/struct.UnixDatagram.html#method.write_timeout)\n* [`UnixDatagram::set_nonblocking`](http://doc.rust-lang.org/std/os/unix/net/struct.UnixDatagram.html#method.set_nonblocking)\n* [`UnixDatagram::take_error`](http://doc.rust-lang.org/std/os/unix/net/struct.UnixDatagram.html#method.take_error)\n* [`UnixDatagram::shutdown`](http://doc.rust-lang.org/std/os/unix/net/struct.UnixDatagram.html#method.shutdown)\n* RawFd impls for `UnixDatagram`\n* `{BTree,Hash}Map::values_mut`\n* [`<[_]>::binary_search_by_key`](http://doc.rust-lang.org/std/primitive.slice.html#method.binary_search_by_key)\n\nLibraries\n---------\n\n* [The `abs_sub` method of floats is deprecated](https://github.com/rust-lang/rust/pull/33664).\n  The semantics of this minor method are subtle and probably not what\n  most people want.\n* [Add implementation of Ord for Cell<T> and RefCell<T> where T: Ord](https://github.com/rust-lang/rust/pull/33306).\n* [On Linux, if `HashMap`s can't be initialized with `getrandom` they\n  will fall back to `/dev/urandom` temporarily to avoid blocking\n  during early boot](https://github.com/rust-lang/rust/pull/33086).\n* [Implemented negation for wrapping numerals](https://github.com/rust-lang/rust/pull/33067).\n* [Implement `Clone` for `binary_heap::IntoIter`](https://github.com/rust-lang/rust/pull/33050).\n* [Implement `Display` and `Hash` for `std::num::Wrapping`](https://github.com/rust-lang/rust/pull/33023).\n* [Add `Default` implementation for `&CStr`, `CString`](https://github.com/rust-lang/rust/pull/32990).\n* [Implement `From<Vec<T>>` and `Into<Vec<T>>` for `VecDeque<T>`](https://github.com/rust-lang/rust/pull/32866).\n* [Implement `Default` for `UnsafeCell`, `fmt::Error`, `Condvar`,\n  `Mutex`, `RwLock`](https://github.com/rust-lang/rust/pull/32785).\n\nCargo\n-----\n* [Cargo.toml supports the `profile.*.panic` option](https://github.com/rust-lang/cargo/pull/2687).\n  This controls the runtime behavior of the `panic!` macro\n  and can be either \"unwind\" (the default), or \"abort\".\n  [RFC 1513](https://github.com/rust-lang/rfcs/blob/master/text/1513-less-unwinding.md).\n* [Don't throw away errors with `-p` arguments](https://github.com/rust-lang/cargo/pull/2723).\n* [Report status to stderr instead of stdout](https://github.com/rust-lang/cargo/pull/2693).\n* [Build scripts are passed a `CARGO_MANIFEST_LINKS` environment\n  variable that corresponds to the `links` field of the manifest](https://github.com/rust-lang/cargo/pull/2710).\n* [Ban keywords from crate names](https://github.com/rust-lang/cargo/pull/2707).\n* [Canonicalize `CARGO_HOME` on Windows](https://github.com/rust-lang/cargo/pull/2604).\n* [Retry network requests](https://github.com/rust-lang/cargo/pull/2396).\n  By default they are retried twice, which can be customized with the\n  `net.retry` value in `.cargo/config`.\n* [Don't print extra error info for failing subcommands](https://github.com/rust-lang/cargo/pull/2674).\n* [Add `--force` flag to `cargo install`](https://github.com/rust-lang/cargo/pull/2405).\n* [Don't use `flock` on NFS mounts](https://github.com/rust-lang/cargo/pull/2623).\n* [Prefer building `cargo install` artifacts in temporary directories](https://github.com/rust-lang/cargo/pull/2610).\n  Makes it possible to install multiple crates in parallel.\n* [Add `cargo test --doc`](https://github.com/rust-lang/cargo/pull/2578).\n* [Add `cargo --explain`](https://github.com/rust-lang/cargo/pull/2551).\n* [Don't print warnings when `-q` is passed](https://github.com/rust-lang/cargo/pull/2576).\n* [Add `cargo doc --lib` and `--bin`](https://github.com/rust-lang/cargo/pull/2577).\n* [Don't require build script output to be UTF-8](https://github.com/rust-lang/cargo/pull/2560).\n* [Correctly attempt multiple git usernames](https://github.com/rust-lang/cargo/pull/2584).\n\nPerformance\n-----------\n\n* [rustc memory usage was reduced by refactoring the context used for\n  type checking](https://github.com/rust-lang/rust/pull/33425).\n* [Speed up creation of `HashMap`s by caching the random keys used\n  to initialize the hash state](https://github.com/rust-lang/rust/pull/33318).\n* [The `find` implementation for `Chain` iterators is 2x faster](https://github.com/rust-lang/rust/pull/33289).\n* [Trait selection optimizations speed up type checking by 15%](https://github.com/rust-lang/rust/pull/33138).\n* [Efficient trie lookup for boolean Unicode properties](https://github.com/rust-lang/rust/pull/33098).\n  10x faster than the previous lookup tables.\n* [Special case `#[derive(Copy, Clone)]` to avoid bloat](https://github.com/rust-lang/rust/pull/31414).\n\nUsability\n---------\n\n* Many incremental improvements to documentation and rustdoc.\n* [rustdoc: List blanket trait impls](https://github.com/rust-lang/rust/pull/33514).\n* [rustdoc: Clean up ABI rendering](https://github.com/rust-lang/rust/pull/33151).\n* [Indexing with the wrong type produces a more informative error](https://github.com/rust-lang/rust/pull/33401).\n* [Improve diagnostics for constants being used in irrefutable patterns](https://github.com/rust-lang/rust/pull/33406).\n* [When many method candidates are in scope limit the suggestions to 10](https://github.com/rust-lang/rust/pull/33338).\n* [Remove confusing suggestion when calling a `fn` type](https://github.com/rust-lang/rust/pull/33325).\n* [Do not suggest changing `&mut self` to `&mut mut self`](https://github.com/rust-lang/rust/pull/33319).\n\nMisc\n----\n\n* [Update i686-linux-android features to match Android ABI](https://github.com/rust-lang/rust/pull/33651).\n* [Update aarch64-linux-android features to match Android ABI](https://github.com/rust-lang/rust/pull/33500).\n* [`std` no longer prints backtraces on platforms where the running\n  module must be loaded with `env::current_exe`, which can't be relied\n  on](https://github.com/rust-lang/rust/pull/33554).\n* This release includes std binaries for the i586-unknown-linux-gnu,\n  i686-unknown-linux-musl, and armv7-linux-androideabi targets. The\n  i586 target is for old x86 hardware without SSE2, and the armv7\n  target is for Android running on modern ARM architectures.\n* [The `rust-gdb` and `rust-lldb` scripts are distributed on all\n  Unix platforms](https://github.com/rust-lang/rust/pull/32835).\n* [On Unix the runtime aborts by calling `libc::abort` instead of\n  generating an illegal instruction](https://github.com/rust-lang/rust/pull/31457).\n* [Rust is now bootstrapped from the previous release of Rust,\n  instead of a snapshot from an arbitrary commit](https://github.com/rust-lang/rust/pull/32942).\n\nCompatibility Notes\n-------------------\n\n* [`AtomicBool` is now bool-sized, not word-sized](https://github.com/rust-lang/rust/pull/33579).\n* [`target_env` for Linux ARM targets is just `gnu`, not\n  `gnueabihf`, `gnueabi`, etc](https://github.com/rust-lang/rust/pull/33403).\n* [Consistently panic on overflow in `Duration::new`](https://github.com/rust-lang/rust/pull/33072).\n* [Change `String::truncate` to panic less](https://github.com/rust-lang/rust/pull/32977).\n* [Add `:block` to the follow set for `:ty` and `:path`](https://github.com/rust-lang/rust/pull/32945).\n  Affects how macros are parsed.\n* [Fix macro hygiene bug](https://github.com/rust-lang/rust/pull/32923).\n* [Feature-gated attributes on macro-generated macro invocations are\n  now rejected](https://github.com/rust-lang/rust/pull/32791).\n* [Suppress fallback and ambiguity errors during type inference](https://github.com/rust-lang/rust/pull/32258).\n  This caused some minor changes to type inference.\n\n\nVersion 1.9.0 (2016-05-26)\n==========================\n\nLanguage\n--------\n\n* The `#[deprecated]` attribute when applied to an API will generate\n  warnings when used. The warnings may be suppressed with\n  `#[allow(deprecated)]`. [RFC 1270].\n* [`fn` item types are zero sized, and each `fn` names a unique\n  type][1.9fn]. This will break code that transmutes `fn`s, so calling\n  `transmute` on a `fn` type will generate a warning for a few cycles,\n  then will be converted to an error.\n* [Field and method resolution understand visibility, so private\n  fields and methods cannot prevent the proper use of public fields\n  and methods][1.9fv].\n* [The parser considers unicode codepoints in the\n  `PATTERN_WHITE_SPACE` category to be whitespace][1.9ws].\n\nStabilized APIs\n---------------\n\n* [`std::panic`]\n* [`std::panic::catch_unwind`] (renamed from `recover`)\n* [`std::panic::resume_unwind`] (renamed from `propagate`)\n* [`std::panic::AssertUnwindSafe`] (renamed from `AssertRecoverSafe`)\n* [`std::panic::UnwindSafe`] (renamed from `RecoverSafe`)\n* [`str::is_char_boundary`]\n* [`<*const T>::as_ref`]\n* [`<*mut T>::as_ref`]\n* [`<*mut T>::as_mut`]\n* [`AsciiExt::make_ascii_uppercase`]\n* [`AsciiExt::make_ascii_lowercase`]\n* [`char::decode_utf16`]\n* [`char::DecodeUtf16`]\n* [`char::DecodeUtf16Error`]\n* [`char::DecodeUtf16Error::unpaired_surrogate`]\n* [`BTreeSet::take`]\n* [`BTreeSet::replace`]\n* [`BTreeSet::get`]\n* [`HashSet::take`]\n* [`HashSet::replace`]\n* [`HashSet::get`]\n* [`OsString::with_capacity`]\n* [`OsString::clear`]\n* [`OsString::capacity`]\n* [`OsString::reserve`]\n* [`OsString::reserve_exact`]\n* [`OsStr::is_empty`]\n* [`OsStr::len`]\n* [`std::os::unix::thread`]\n* [`RawPthread`]\n* [`JoinHandleExt`]\n* [`JoinHandleExt::as_pthread_t`]\n* [`JoinHandleExt::into_pthread_t`]\n* [`HashSet::hasher`]\n* [`HashMap::hasher`]\n* [`CommandExt::exec`]\n* [`File::try_clone`]\n* [`SocketAddr::set_ip`]\n* [`SocketAddr::set_port`]\n* [`SocketAddrV4::set_ip`]\n* [`SocketAddrV4::set_port`]\n* [`SocketAddrV6::set_ip`]\n* [`SocketAddrV6::set_port`]\n* [`SocketAddrV6::set_flowinfo`]\n* [`SocketAddrV6::set_scope_id`]\n* [`slice::copy_from_slice`]\n* [`ptr::read_volatile`]\n* [`ptr::write_volatile`]\n* [`OpenOptions::create_new`]\n* [`TcpStream::set_nodelay`]\n* [`TcpStream::nodelay`]\n* [`TcpStream::set_ttl`]\n* [`TcpStream::ttl`]\n* [`TcpStream::set_only_v6`]\n* [`TcpStream::only_v6`]\n* [`TcpStream::take_error`]\n* [`TcpStream::set_nonblocking`]\n* [`TcpListener::set_ttl`]\n* [`TcpListener::ttl`]\n* [`TcpListener::set_only_v6`]\n* [`TcpListener::only_v6`]\n* [`TcpListener::take_error`]\n* [`TcpListener::set_nonblocking`]\n* [`UdpSocket::set_broadcast`]\n* [`UdpSocket::broadcast`]\n* [`UdpSocket::set_multicast_loop_v4`]\n* [`UdpSocket::multicast_loop_v4`]\n* [`UdpSocket::set_multicast_ttl_v4`]\n* [`UdpSocket::multicast_ttl_v4`]\n* [`UdpSocket::set_multicast_loop_v6`]\n* [`UdpSocket::multicast_loop_v6`]\n* [`UdpSocket::set_multicast_ttl_v6`]\n* [`UdpSocket::multicast_ttl_v6`]\n* [`UdpSocket::set_ttl`]\n* [`UdpSocket::ttl`]\n* [`UdpSocket::set_only_v6`]\n* [`UdpSocket::only_v6`]\n* [`UdpSocket::join_multicast_v4`]\n* [`UdpSocket::join_multicast_v6`]\n* [`UdpSocket::leave_multicast_v4`]\n* [`UdpSocket::leave_multicast_v6`]\n* [`UdpSocket::take_error`]\n* [`UdpSocket::connect`]\n* [`UdpSocket::send`]\n* [`UdpSocket::recv`]\n* [`UdpSocket::set_nonblocking`]\n\nLibraries\n---------\n\n* [`std::sync::Once` is poisoned if its initialization function\n  fails][1.9o].\n* [`cell::Ref` and `cell::RefMut` can contain unsized types][1.9cu].\n* [Most types implement `fmt::Debug`][1.9db].\n* [The default buffer size used by `BufReader` and `BufWriter` was\n  reduced to 8K, from 64K][1.9bf]. This is in line with the buffer size\n  used by other languages.\n* [`Instant`, `SystemTime` and `Duration` implement `+=` and `-=`.\n  `Duration` additionally implements `*=` and `/=`][1.9ta].\n* [`Skip` is a `DoubleEndedIterator`][1.9sk].\n* [`From<[u8; 4]>` is implemented for `Ipv4Addr`][1.9fi].\n* [`Chain` implements `BufRead`][1.9ch].\n* [`HashMap`, `HashSet` and iterators are covariant][1.9hc].\n\nCargo\n-----\n\n* [Cargo can now run concurrently][1.9cc].\n* [Top-level overrides allow specific revisions of crates to be\n  overridden through the entire crate graph][1.9ct].  This is intended\n  to make upgrades easier for large projects, by allowing crates to be\n  forked temporarily until they've been upgraded and republished.\n* [Cargo exports a `CARGO_PKG_AUTHORS` environment variable][1.9cp].\n* [Cargo will pass the contents of the `RUSTFLAGS` variable to `rustc`\n  on the commandline][1.9cf]. `rustc` arguments can also be specified\n  in the `build.rustflags` configuration key.\n\nPerformance\n-----------\n\n* [The time complexity of comparing variables for equivalence during type\n  unification is reduced from _O_(_n_!) to _O_(_n_)][1.9tu]. This leads\n  to major compilation time improvement in some scenarios.\n* [`ToString` is specialized for `str`, giving it the same performance\n  as `to_owned`][1.9ts].\n* [Spawning processes with `Command::output` no longer creates extra\n  threads][1.9sp].\n* [`#[derive(PartialEq)]` and `#[derive(PartialOrd)]` emit less code\n  for C-like enums][1.9cl].\n\nMisc\n----\n\n* [Passing the `--quiet` flag to a test runner will produce\n  much-abbreviated output][1.9q].\n* The Rust Project now publishes std binaries for the\n  `mips-unknown-linux-musl`, `mipsel-unknown-linux-musl`, and\n  `i586-pc-windows-msvc` targets.\n\nCompatibility Notes\n-------------------\n\n* [`std::sync::Once` is poisoned if its initialization function\n  fails][1.9o].\n* [It is illegal to define methods with the same name in overlapping\n  inherent `impl` blocks][1.9sn].\n* [`fn` item types are zero sized, and each `fn` names a unique\n  type][1.9fn]. This will break code that transmutes `fn`s, so calling\n  `transmute` on a `fn` type will generate a warning for a few cycles,\n  then will be converted to an error.\n* [Improvements to const evaluation may trigger new errors when integer\n  literals are out of range][1.9ce].\n\n\n[1.9bf]: https://github.com/rust-lang/rust/pull/32695\n[1.9cc]: https://github.com/rust-lang/cargo/pull/2486\n[1.9ce]: https://github.com/rust-lang/rust/pull/30587\n[1.9cf]: https://github.com/rust-lang/cargo/pull/2241\n[1.9ch]: https://github.com/rust-lang/rust/pull/32541\n[1.9cl]: https://github.com/rust-lang/rust/pull/31977\n[1.9cp]: https://github.com/rust-lang/cargo/pull/2465\n[1.9ct]: https://github.com/rust-lang/cargo/pull/2385\n[1.9cu]: https://github.com/rust-lang/rust/pull/32652\n[1.9db]: https://github.com/rust-lang/rust/pull/32054\n[1.9fi]: https://github.com/rust-lang/rust/pull/32050\n[1.9fn]: https://github.com/rust-lang/rust/pull/31710\n[1.9fv]: https://github.com/rust-lang/rust/pull/31938\n[1.9hc]: https://github.com/rust-lang/rust/pull/32635\n[1.9o]: https://github.com/rust-lang/rust/pull/32325\n[1.9q]: https://github.com/rust-lang/rust/pull/31887\n[1.9sk]: https://github.com/rust-lang/rust/pull/31700\n[1.9sn]: https://github.com/rust-lang/rust/pull/31925\n[1.9sp]: https://github.com/rust-lang/rust/pull/31618\n[1.9ta]: https://github.com/rust-lang/rust/pull/32448\n[1.9ts]: https://github.com/rust-lang/rust/pull/32586\n[1.9tu]: https://github.com/rust-lang/rust/pull/32062\n[1.9ws]: https://github.com/rust-lang/rust/pull/29734\n[RFC 1270]: https://github.com/rust-lang/rfcs/blob/master/text/1270-deprecation.md\n[`<*const T>::as_ref`]: http://doc.rust-lang.org/nightly/std/primitive.pointer.html#method.as_ref\n[`<*mut T>::as_mut`]: http://doc.rust-lang.org/nightly/std/primitive.pointer.html#method.as_mut\n[`<*mut T>::as_ref`]: http://doc.rust-lang.org/nightly/std/primitive.pointer.html#method.as_ref\n[`slice::copy_from_slice`]: http://doc.rust-lang.org/nightly/std/primitive.slice.html#method.copy_from_slice\n[`AsciiExt::make_ascii_lowercase`]: http://doc.rust-lang.org/nightly/std/ascii/trait.AsciiExt.html#tymethod.make_ascii_lowercase\n[`AsciiExt::make_ascii_uppercase`]: http://doc.rust-lang.org/nightly/std/ascii/trait.AsciiExt.html#tymethod.make_ascii_uppercase\n[`BTreeSet::get`]: http://doc.rust-lang.org/nightly/collections/btree/set/struct.BTreeSet.html#method.get\n[`BTreeSet::replace`]: http://doc.rust-lang.org/nightly/collections/btree/set/struct.BTreeSet.html#method.replace\n[`BTreeSet::take`]: http://doc.rust-lang.org/nightly/collections/btree/set/struct.BTreeSet.html#method.take\n[`CommandExt::exec`]: http://doc.rust-lang.org/nightly/std/os/unix/process/trait.CommandExt.html#tymethod.exec\n[`File::try_clone`]: http://doc.rust-lang.org/nightly/std/fs/struct.File.html#method.try_clone\n[`HashMap::hasher`]: http://doc.rust-lang.org/nightly/std/collections/struct.HashMap.html#method.hasher\n[`HashSet::get`]: http://doc.rust-lang.org/nightly/std/collections/struct.HashSet.html#method.get\n[`HashSet::hasher`]: http://doc.rust-lang.org/nightly/std/collections/struct.HashSet.html#method.hasher\n[`HashSet::replace`]: http://doc.rust-lang.org/nightly/std/collections/struct.HashSet.html#method.replace\n[`HashSet::take`]: http://doc.rust-lang.org/nightly/std/collections/struct.HashSet.html#method.take\n[`JoinHandleExt::as_pthread_t`]: http://doc.rust-lang.org/nightly/std/os/unix/thread/trait.JoinHandleExt.html#tymethod.as_pthread_t\n[`JoinHandleExt::into_pthread_t`]: http://doc.rust-lang.org/nightly/std/os/unix/thread/trait.JoinHandleExt.html#tymethod.into_pthread_t\n[`JoinHandleExt`]: http://doc.rust-lang.org/nightly/std/os/unix/thread/trait.JoinHandleExt.html\n[`OpenOptions::create_new`]: http://doc.rust-lang.org/nightly/std/fs/struct.OpenOptions.html#method.create_new\n[`OsStr::is_empty`]: http://doc.rust-lang.org/nightly/std/ffi/struct.OsStr.html#method.is_empty\n[`OsStr::len`]: http://doc.rust-lang.org/nightly/std/ffi/struct.OsStr.html#method.len\n[`OsString::capacity`]: http://doc.rust-lang.org/nightly/std/ffi/struct.OsString.html#method.capacity\n[`OsString::clear`]: http://doc.rust-lang.org/nightly/std/ffi/struct.OsString.html#method.clear\n[`OsString::reserve_exact`]: http://doc.rust-lang.org/nightly/std/ffi/struct.OsString.html#method.reserve_exact\n[`OsString::reserve`]: http://doc.rust-lang.org/nightly/std/ffi/struct.OsString.html#method.reserve\n[`OsString::with_capacity`]: http://doc.rust-lang.org/nightly/std/ffi/struct.OsString.html#method.with_capacity\n[`RawPthread`]: http://doc.rust-lang.org/nightly/std/os/unix/thread/type.RawPthread.html\n[`SocketAddr::set_ip`]: http://doc.rust-lang.org/nightly/std/net/enum.SocketAddr.html#method.set_ip\n[`SocketAddr::set_port`]: http://doc.rust-lang.org/nightly/std/net/enum.SocketAddr.html#method.set_port\n[`SocketAddrV4::set_ip`]: http://doc.rust-lang.org/nightly/std/net/struct.SocketAddrV4.html#method.set_ip\n[`SocketAddrV4::set_port`]: http://doc.rust-lang.org/nightly/std/net/struct.SocketAddrV4.html#method.set_port\n[`SocketAddrV6::set_flowinfo`]: http://doc.rust-lang.org/nightly/std/net/struct.SocketAddrV6.html#method.set_flowinfo\n[`SocketAddrV6::set_ip`]: http://doc.rust-lang.org/nightly/std/net/struct.SocketAddrV6.html#method.set_ip\n[`SocketAddrV6::set_port`]: http://doc.rust-lang.org/nightly/std/net/struct.SocketAddrV6.html#method.set_port\n[`SocketAddrV6::set_scope_id`]: http://doc.rust-lang.org/nightly/std/net/struct.SocketAddrV6.html#method.set_scope_id\n[`TcpListener::only_v6`]: http://doc.rust-lang.org/nightly/std/net/struct.TcpStream.html#method.only_v6\n[`TcpListener::set_nonblocking`]: http://doc.rust-lang.org/nightly/std/net/struct.TcpStream.html#method.set_nonblocking\n[`TcpListener::set_only_v6`]: http://doc.rust-lang.org/nightly/std/net/struct.TcpStream.html#method.set_only_v6\n[`TcpListener::set_ttl`]: http://doc.rust-lang.org/nightly/std/net/struct.TcpStream.html#method.set_ttl\n[`TcpListener::take_error`]: http://doc.rust-lang.org/nightly/std/net/struct.TcpStream.html#method.take_error\n[`TcpListener::ttl`]: http://doc.rust-lang.org/nightly/std/net/struct.TcpStream.html#method.ttl\n[`TcpStream::nodelay`]: http://doc.rust-lang.org/nightly/std/net/struct.TcpStream.html#method.nodelay\n[`TcpStream::only_v6`]: http://doc.rust-lang.org/nightly/std/net/struct.TcpStream.html#method.only_v6\n[`TcpStream::set_nodelay`]: http://doc.rust-lang.org/nightly/std/net/struct.TcpStream.html#method.set_nodelay\n[`TcpStream::set_nonblocking`]: http://doc.rust-lang.org/nightly/std/net/struct.TcpStream.html#method.set_nonblocking\n[`TcpStream::set_only_v6`]: http://doc.rust-lang.org/nightly/std/net/struct.TcpStream.html#method.set_only_v6\n[`TcpStream::set_ttl`]: http://doc.rust-lang.org/nightly/std/net/struct.TcpStream.html#method.set_ttl\n[`TcpStream::take_error`]: http://doc.rust-lang.org/nightly/std/net/struct.TcpStream.html#method.take_error\n[`TcpStream::ttl`]: http://doc.rust-lang.org/nightly/std/net/struct.TcpStream.html#method.ttl\n[`UdpSocket::broadcast`]: http://doc.rust-lang.org/nightly/std/net/struct.UdpSocket.html#method.broadcast\n[`UdpSocket::connect`]: http://doc.rust-lang.org/nightly/std/net/struct.UdpSocket.html#method.connect\n[`UdpSocket::join_multicast_v4`]: http://doc.rust-lang.org/nightly/std/net/struct.UdpSocket.html#method.join_multicast_v4\n[`UdpSocket::join_multicast_v6`]: http://doc.rust-lang.org/nightly/std/net/struct.UdpSocket.html#method.join_multicast_v6\n[`UdpSocket::leave_multicast_v4`]: http://doc.rust-lang.org/nightly/std/net/struct.UdpSocket.html#method.leave_multicast_v4\n[`UdpSocket::leave_multicast_v6`]: http://doc.rust-lang.org/nightly/std/net/struct.UdpSocket.html#method.leave_multicast_v6\n[`UdpSocket::multicast_loop_v4`]: http://doc.rust-lang.org/nightly/std/net/struct.UdpSocket.html#method.multicast_loop_v4\n[`UdpSocket::multicast_loop_v6`]: http://doc.rust-lang.org/nightly/std/net/struct.UdpSocket.html#method.multicast_loop_v6\n[`UdpSocket::multicast_ttl_v4`]: http://doc.rust-lang.org/nightly/std/net/struct.UdpSocket.html#method.multicast_ttl_v4\n[`UdpSocket::multicast_ttl_v6`]: http://doc.rust-lang.org/nightly/std/net/struct.UdpSocket.html#method.multicast_ttl_v6\n[`UdpSocket::only_v6`]: http://doc.rust-lang.org/nightly/std/net/struct.UdpSocket.html#method.only_v6\n[`UdpSocket::recv`]: http://doc.rust-lang.org/nightly/std/net/struct.UdpSocket.html#method.recv\n[`UdpSocket::send`]: http://doc.rust-lang.org/nightly/std/net/struct.UdpSocket.html#method.send\n[`UdpSocket::set_broadcast`]: http://doc.rust-lang.org/nightly/std/net/struct.UdpSocket.html#method.set_broadcast\n[`UdpSocket::set_multicast_loop_v4`]: http://doc.rust-lang.org/nightly/std/net/struct.UdpSocket.html#method.set_multicast_loop_v4\n[`UdpSocket::set_multicast_loop_v6`]: http://doc.rust-lang.org/nightly/std/net/struct.UdpSocket.html#method.set_multicast_loop_v6\n[`UdpSocket::set_multicast_ttl_v4`]: http://doc.rust-lang.org/nightly/std/net/struct.UdpSocket.html#method.set_multicast_ttl_v4\n[`UdpSocket::set_multicast_ttl_v6`]: http://doc.rust-lang.org/nightly/std/net/struct.UdpSocket.html#method.set_multicast_ttl_v6\n[`UdpSocket::set_nonblocking`]: http://doc.rust-lang.org/nightly/std/net/struct.UdpSocket.html#method.set_nonblocking\n[`UdpSocket::set_only_v6`]: http://doc.rust-lang.org/nightly/std/net/struct.UdpSocket.html#method.set_only_v6\n[`UdpSocket::set_ttl`]: http://doc.rust-lang.org/nightly/std/net/struct.UdpSocket.html#method.set_ttl\n[`UdpSocket::take_error`]: http://doc.rust-lang.org/nightly/std/net/struct.UdpSocket.html#method.take_error\n[`UdpSocket::ttl`]: http://doc.rust-lang.org/nightly/std/net/struct.UdpSocket.html#method.ttl\n[`char::DecodeUtf16Error::unpaired_surrogate`]: http://doc.rust-lang.org/nightly/std/char/struct.DecodeUtf16Error.html#method.unpaired_surrogate\n[`char::DecodeUtf16Error`]: http://doc.rust-lang.org/nightly/std/char/struct.DecodeUtf16Error.html\n[`char::DecodeUtf16`]: http://doc.rust-lang.org/nightly/std/char/struct.DecodeUtf16.html\n[`char::decode_utf16`]: http://doc.rust-lang.org/nightly/std/char/fn.decode_utf16.html\n[`ptr::read_volatile`]: http://doc.rust-lang.org/nightly/std/ptr/fn.read_volatile.html\n[`ptr::write_volatile`]: http://doc.rust-lang.org/nightly/std/ptr/fn.write_volatile.html\n[`std::os::unix::thread`]: http://doc.rust-lang.org/nightly/std/os/unix/thread/index.html\n[`std::panic::AssertUnwindSafe`]: http://doc.rust-lang.org/nightly/std/panic/struct.AssertUnwindSafe.html\n[`std::panic::UnwindSafe`]: http://doc.rust-lang.org/nightly/std/panic/trait.UnwindSafe.html\n[`std::panic::catch_unwind`]: http://doc.rust-lang.org/nightly/std/panic/fn.catch_unwind.html\n[`std::panic::resume_unwind`]: http://doc.rust-lang.org/nightly/std/panic/fn.resume_unwind.html\n[`std::panic`]: http://doc.rust-lang.org/nightly/std/panic/index.html\n[`str::is_char_boundary`]: http://doc.rust-lang.org/nightly/std/primitive.str.html#method.is_char_boundary\n\n\nVersion 1.8.0 (2016-04-14)\n==========================\n\nLanguage\n--------\n\n* Rust supports overloading of compound assignment statements like\n  `+=` by implementing the [`AddAssign`], [`SubAssign`],\n  [`MulAssign`], [`DivAssign`], [`RemAssign`], [`BitAndAssign`],\n  [`BitOrAssign`], [`BitXorAssign`], [`ShlAssign`], or [`ShrAssign`]\n  traits. [RFC 953].\n* Empty structs can be defined with braces, as in `struct Foo { }`, in\n  addition to the non-braced form, `struct Foo;`. [RFC 218].\n\nLibraries\n---------\n\n* Stabilized APIs:\n  * [`str::encode_utf16`] (renamed from `utf16_units`)\n  * [`str::EncodeUtf16`] (renamed from `Utf16Units`)\n  * [`Ref::map`]\n  * [`RefMut::map`]\n  * [`ptr::drop_in_place`]\n  * [`time::Instant`]\n  * [`time::SystemTime`]\n  * [`Instant::now`]\n  * [`Instant::duration_since`] (renamed from `duration_from_earlier`)\n  * [`Instant::elapsed`]\n  * [`SystemTime::now`]\n  * [`SystemTime::duration_since`] (renamed from `duration_from_earlier`)\n  * [`SystemTime::elapsed`]\n  * Various `Add`/`Sub` impls for `Time` and `SystemTime`\n  * [`SystemTimeError`]\n  * [`SystemTimeError::duration`]\n  * Various impls for `SystemTimeError`\n  * [`UNIX_EPOCH`]\n  * [`AddAssign`], [`SubAssign`], [`MulAssign`], [`DivAssign`],\n    [`RemAssign`], [`BitAndAssign`], [`BitOrAssign`],\n    [`BitXorAssign`], [`ShlAssign`], [`ShrAssign`].\n* [The `write!` and `writeln!` macros correctly emit errors if any of\n  their arguments can't be formatted][1.8w].\n* [Various I/O functions support large files on 32-bit Linux][1.8l].\n* [The Unix-specific `raw` modules, which contain a number of\n  redefined C types are deprecated][1.8r], including `os::raw::unix`,\n  `os::raw::macos`, and `os::raw::linux`. These modules defined types\n  such as `ino_t` and `dev_t`. The inconsistency of these definitions\n  across platforms was making it difficult to implement `std`\n  correctly. Those that need these definitions should use the `libc`\n  crate. [RFC 1415].\n* The Unix-specific `MetadataExt` traits, including\n  `os::unix::fs::MetadataExt`, which expose values such as inode\n  numbers [no longer return platform-specific types][1.8r], but\n  instead return widened integers. [RFC 1415].\n* [`btree_set::{IntoIter, Iter, Range}` are covariant][1.8cv].\n* [Atomic loads and stores are not volatile][1.8a].\n* [All types in `sync::mpsc` implement `fmt::Debug`][1.8mp].\n\nPerformance\n-----------\n\n* [Inlining hash functions lead to a 3% compile-time improvement in\n  some workloads][1.8h].\n* When using jemalloc, its symbols are [unprefixed so that it\n  overrides the libc malloc implementation][1.8h]. This means that for\n  rustc, LLVM is now using jemalloc, which results in a 6%\n  compile-time improvement on a specific workload.\n* [Avoid quadratic growth in function size due to cleanups][1.8cu].\n\nMisc\n----\n\n* [32-bit MSVC builds finally implement unwinding][1.8ms].\n  i686-pc-windows-msvc is now considered a tier-1 platform.\n* [The `--print targets` flag prints a list of supported targets][1.8t].\n* [The `--print cfg` flag prints the `cfg`s defined for the current\n  target][1.8cf].\n* [`rustc` can be built with an new Cargo-based build system, written\n  in Rust][1.8b].  It will eventually replace Rust's Makefile-based\n  build system. To enable it configure with `configure --rustbuild`.\n* [Errors for non-exhaustive `match` patterns now list up to 3 missing\n  variants while also indicating the total number of missing variants\n  if more than 3][1.8m].\n* [Executable stacks are disabled on Linux and BSD][1.8nx].\n* The Rust Project now publishes binary releases of the standard\n  library for a number of tier-2 targets:\n  `armv7-unknown-linux-gnueabihf`, `powerpc-unknown-linux-gnu`,\n  `powerpc64-unknown-linux-gnu`, `powerpc64le-unknown-linux-gnu`\n  `x86_64-rumprun-netbsd`. These can be installed with\n  tools such as [multirust][1.8mr].\n\nCargo\n-----\n\n* [`cargo init` creates a new Cargo project in the current\n  directory][1.8ci].  It is otherwise like `cargo new`.\n* [Cargo has configuration keys for `-v` and\n  `--color`][1.8cc]. `verbose` and `color`, respectively, go in the\n  `[term]` section of `.cargo/config`.\n* [Configuration keys that evaluate to strings or integers can be set\n  via environment variables][1.8ce]. For example the `build.jobs` key\n  can be set via `CARGO_BUILD_JOBS`. Environment variables take\n  precedence over config files.\n* [Target-specific dependencies support Rust `cfg` syntax for\n  describing targets][1.8cfg] so that dependencies for multiple\n  targets can be specified together. [RFC 1361].\n* [The environment variables `CARGO_TARGET_ROOT`, `RUSTC`, and\n  `RUSTDOC` take precedence over the `build.target-dir`,\n  `build.rustc`, and `build.rustdoc` configuration values][1.8cfv].\n* [The child process tree is killed on Windows when Cargo is\n  killed][1.8ck].\n* [The `build.target` configuration value sets the target platform,\n  like `--target`][1.8ct].\n\nCompatibility Notes\n-------------------\n\n* [Unstable compiler flags have been further restricted][1.8u]. Since\n  1.0 `-Z` flags have been considered unstable, and other flags that\n  were considered unstable additionally required passing `-Z\n  unstable-options` to access. Unlike unstable language and library\n  features though, these options have been accessible on the stable\n  release channel. Going forward, *new unstable flags will not be\n  available on the stable release channel*, and old unstable flags\n  will warn about their usage. In the future, all unstable flags will\n  be unavailable on the stable release channel.\n* [It is no longer possible to `match` on empty enum variants using\n  the `Variant(..)` syntax][1.8v]. This has been a warning since 1.6.\n* The Unix-specific `MetadataExt` traits, including\n  `os::unix::fs::MetadataExt`, which expose values such as inode\n  numbers [no longer return platform-specific types][1.8r], but\n  instead return widened integers. [RFC 1415].\n* [Modules sourced from the filesystem cannot appear within arbitrary\n  blocks, but only within other modules][1.8mf].\n* [`--cfg` compiler flags are parsed strictly as identifiers][1.8c].\n* On Unix, [stack overflow triggers a runtime abort instead of a\n  SIGSEGV][1.8so].\n* [`Command::spawn` and its equivalents return an error if any of\n  its command-line arguments contain interior `NUL`s][1.8n].\n* [Tuple and unit enum variants from other crates are in the type\n  namespace][1.8tn].\n* [On Windows `rustc` emits `.lib` files for the `staticlib` library\n  type instead of `.a` files][1.8st]. Additionally, for the MSVC\n  toolchain, `rustc` emits import libraries named `foo.dll.lib`\n  instead of `foo.lib`.\n\n\n[1.8a]: https://github.com/rust-lang/rust/pull/30962\n[1.8b]: https://github.com/rust-lang/rust/pull/31123\n[1.8c]: https://github.com/rust-lang/rust/pull/31530\n[1.8cc]: https://github.com/rust-lang/cargo/pull/2397\n[1.8ce]: https://github.com/rust-lang/cargo/pull/2398\n[1.8cf]: https://github.com/rust-lang/rust/pull/31278\n[1.8cfg]: https://github.com/rust-lang/cargo/pull/2328\n[1.8ci]: https://github.com/rust-lang/cargo/pull/2081\n[1.8ck]: https://github.com/rust-lang/cargo/pull/2370\n[1.8ct]: https://github.com/rust-lang/cargo/pull/2335\n[1.8cu]: https://github.com/rust-lang/rust/pull/31390\n[1.8cfv]: https://github.com/rust-lang/cargo/issues/2365\n[1.8cv]: https://github.com/rust-lang/rust/pull/30998\n[1.8h]: https://github.com/rust-lang/rust/pull/31460\n[1.8l]: https://github.com/rust-lang/rust/pull/31668\n[1.8m]: https://github.com/rust-lang/rust/pull/31020\n[1.8mf]: https://github.com/rust-lang/rust/pull/31534\n[1.8mp]: https://github.com/rust-lang/rust/pull/30894\n[1.8mr]: https://users.rust-lang.org/t/multirust-0-8-with-cross-std-installation/4901\n[1.8ms]: https://github.com/rust-lang/rust/pull/30448\n[1.8n]: https://github.com/rust-lang/rust/pull/31056\n[1.8nx]: https://github.com/rust-lang/rust/pull/30859\n[1.8r]: https://github.com/rust-lang/rust/pull/31551\n[1.8so]: https://github.com/rust-lang/rust/pull/31333\n[1.8st]: https://github.com/rust-lang/rust/pull/29520\n[1.8t]: https://github.com/rust-lang/rust/pull/31358\n[1.8tn]: https://github.com/rust-lang/rust/pull/30882\n[1.8u]: https://github.com/rust-lang/rust/pull/31793\n[1.8v]: https://github.com/rust-lang/rust/pull/31757\n[1.8w]: https://github.com/rust-lang/rust/pull/31904\n[RFC 1361]: https://github.com/rust-lang/rfcs/blob/master/text/1361-cargo-cfg-dependencies.md\n[RFC 1415]: https://github.com/rust-lang/rfcs/blob/master/text/1415-trim-std-os.md\n[RFC 218]: https://github.com/rust-lang/rfcs/blob/master/text/0218-empty-struct-with-braces.md\n[RFC 953]: https://github.com/rust-lang/rfcs/blob/master/text/0953-op-assign.md\n[`AddAssign`]: http://doc.rust-lang.org/nightly/std/ops/trait.AddAssign.html\n[`BitAndAssign`]: http://doc.rust-lang.org/nightly/std/ops/trait.BitAndAssign.html\n[`BitOrAssign`]: http://doc.rust-lang.org/nightly/std/ops/trait.BitOrAssign.html\n[`BitXorAssign`]: http://doc.rust-lang.org/nightly/std/ops/trait.BitXorAssign.html\n[`DivAssign`]: http://doc.rust-lang.org/nightly/std/ops/trait.DivAssign.html\n[`Instant::duration_since`]: http://doc.rust-lang.org/nightly/std/time/struct.Instant.html#method.duration_since\n[`Instant::elapsed`]: http://doc.rust-lang.org/nightly/std/time/struct.Instant.html#method.elapsed\n[`Instant::now`]: http://doc.rust-lang.org/nightly/std/time/struct.Instant.html#method.now\n[`MulAssign`]: http://doc.rust-lang.org/nightly/std/ops/trait.MulAssign.html\n[`Ref::map`]: http://doc.rust-lang.org/nightly/std/cell/struct.Ref.html#method.map\n[`RefMut::map`]: http://doc.rust-lang.org/nightly/std/cell/struct.RefMut.html#method.map\n[`RemAssign`]: http://doc.rust-lang.org/nightly/std/ops/trait.RemAssign.html\n[`ShlAssign`]: http://doc.rust-lang.org/nightly/std/ops/trait.ShlAssign.html\n[`ShrAssign`]: http://doc.rust-lang.org/nightly/std/ops/trait.ShrAssign.html\n[`SubAssign`]: http://doc.rust-lang.org/nightly/std/ops/trait.SubAssign.html\n[`SystemTime::duration_since`]: http://doc.rust-lang.org/nightly/std/time/struct.SystemTime.html#method.duration_since\n[`SystemTime::elapsed`]: http://doc.rust-lang.org/nightly/std/time/struct.SystemTime.html#method.elapsed\n[`SystemTime::now`]: http://doc.rust-lang.org/nightly/std/time/struct.SystemTime.html#method.now\n[`SystemTimeError::duration`]: http://doc.rust-lang.org/nightly/std/time/struct.SystemTimeError.html#method.duration\n[`SystemTimeError`]: http://doc.rust-lang.org/nightly/std/time/struct.SystemTimeError.html\n[`UNIX_EPOCH`]: http://doc.rust-lang.org/nightly/std/time/constant.UNIX_EPOCH.html\n[`ptr::drop_in_place`]: http://doc.rust-lang.org/nightly/std/ptr/fn.drop_in_place.html\n[`str::EncodeUtf16`]: http://doc.rust-lang.org/nightly/std/str/struct.EncodeUtf16.html\n[`str::encode_utf16`]: http://doc.rust-lang.org/nightly/std/primitive.str.html#method.encode_utf16\n[`time::Instant`]: http://doc.rust-lang.org/nightly/std/time/struct.Instant.html\n[`time::SystemTime`]: http://doc.rust-lang.org/nightly/std/time/struct.SystemTime.html\n\n\nVersion 1.7.0 (2016-03-03)\n==========================\n\nLibraries\n---------\n\n* Stabilized APIs\n  * `Path`\n    * [`Path::strip_prefix`] (renamed from relative_from)\n    * [`path::StripPrefixError`] (new error type returned from strip_prefix)\n  * `Ipv4Addr`\n    * [`Ipv4Addr::is_loopback`]\n    * [`Ipv4Addr::is_private`]\n    * [`Ipv4Addr::is_link_local`]\n    * [`Ipv4Addr::is_multicast`]\n    * [`Ipv4Addr::is_broadcast`]\n    * [`Ipv4Addr::is_documentation`]\n  * `Ipv6Addr`\n    * [`Ipv6Addr::is_unspecified`]\n    * [`Ipv6Addr::is_loopback`]\n    * [`Ipv6Addr::is_multicast`]\n  * `Vec`\n    * [`Vec::as_slice`]\n    * [`Vec::as_mut_slice`]\n  * `String`\n    * [`String::as_str`]\n    * [`String::as_mut_str`]\n  * Slices\n    * `<[T]>::`[`clone_from_slice`], which now requires the two slices to\n    be the same length\n    * `<[T]>::`[`sort_by_key`]\n  * checked, saturated, and overflowing operations\n    * [`i32::checked_rem`], [`i32::checked_neg`], [`i32::checked_shl`], [`i32::checked_shr`]\n    * [`i32::saturating_mul`]\n    * [`i32::overflowing_add`], [`i32::overflowing_sub`], [`i32::overflowing_mul`], [`i32::overflowing_div`]\n    * [`i32::overflowing_rem`], [`i32::overflowing_neg`], [`i32::overflowing_shl`], [`i32::overflowing_shr`]\n    * [`u32::checked_rem`], [`u32::checked_neg`], [`u32::checked_shl`], [`u32::checked_shl`]\n    * [`u32::saturating_mul`]\n    * [`u32::overflowing_add`], [`u32::overflowing_sub`], [`u32::overflowing_mul`], [`u32::overflowing_div`]\n    * [`u32::overflowing_rem`], [`u32::overflowing_neg`], [`u32::overflowing_shl`], [`u32::overflowing_shr`]\n    * and checked, saturated, and overflowing operations for other primitive types\n  * FFI\n    * [`ffi::IntoStringError`]\n    * [`CString::into_string`]\n    * [`CString::into_bytes`]\n    * [`CString::into_bytes_with_nul`]\n    * `From<CString> for Vec<u8>`\n  * `IntoStringError`\n    * [`IntoStringError::into_cstring`]\n    * [`IntoStringError::utf8_error`]\n    * `Error for IntoStringError`\n  * Hashing\n    * [`std::hash::BuildHasher`]\n    * [`BuildHasher::Hasher`]\n    * [`BuildHasher::build_hasher`]\n    * [`std::hash::BuildHasherDefault`]\n    * [`HashMap::with_hasher`]\n    * [`HashMap::with_capacity_and_hasher`]\n    * [`HashSet::with_hasher`]\n    * [`HashSet::with_capacity_and_hasher`]\n    * [`std::collections::hash_map::RandomState`]\n    * [`RandomState::new`]\n* [Validating UTF-8 is faster by a factor of between 7 and 14x for\n  ASCII input][1.7utf8]. This means that creating `String`s and `str`s\n  from bytes is faster.\n* [The performance of `LineWriter` (and thus `io::stdout`) was\n  improved by using `memchr` to search for newlines][1.7m].\n* [`f32::to_degrees` and `f32::to_radians` are stable][1.7f]. The\n  `f64` variants were stabilized previously.\n* [`BTreeMap` was rewritten to use less memory and improve the performance\n  of insertion and iteration, the latter by as much as 5x][1.7bm].\n* [`BTreeSet` and its iterators, `Iter`, `IntoIter`, and `Range` are\n  covariant over their contained type][1.7bt].\n* [`LinkedList` and its iterators, `Iter` and `IntoIter` are covariant\n  over their contained type][1.7ll].\n* [`str::replace` now accepts a `Pattern`][1.7rp], like other string\n  searching methods.\n* [`Any` is implemented for unsized types][1.7a].\n* [`Hash` is implemented for `Duration`][1.7h].\n\nMisc\n----\n\n* [When running tests with `--test`, rustdoc will pass `--cfg`\n  arguments to the compiler][1.7dt].\n* [The compiler is built with RPATH information by default][1.7rpa].\n  This means that it will be possible to run `rustc` when installed in\n  unusual configurations without configuring the dynamic linker search\n  path explicitly.\n* [`rustc` passes `--enable-new-dtags` to GNU ld][1.7dta]. This makes\n  any RPATH entries (emitted with `-C rpath`) *not* take precedence\n  over `LD_LIBRARY_PATH`.\n\nCargo\n-----\n\n* [`cargo rustc` accepts a `--profile` flag that runs `rustc` under\n  any of the compilation profiles, 'dev', 'bench', or 'test'][1.7cp].\n* [The `rerun-if-changed` build script directive no longer causes the\n  build script to incorrectly run twice in certain scenarios][1.7rr].\n\nCompatibility Notes\n-------------------\n\n* Soundness fixes to the interactions between associated types and\n  lifetimes, specified in [RFC 1214], [now generate errors][1.7sf] for\n  code that violates the new rules. This is a significant change that\n  is known to break existing code, so it has emitted warnings for the\n  new error cases since 1.4 to give crate authors time to adapt. The\n  details of what is changing are subtle; read the RFC for more.\n* [Several bugs in the compiler's visibility calculations were\n  fixed][1.7v]. Since this was found to break significant amounts of\n  code, the new errors will be emitted as warnings for several release\n  cycles, under the `private_in_public` lint.\n* Defaulted type parameters were accidentally accepted in positions\n  that were not intended. In this release, [defaulted type parameters\n  appearing outside of type definitions will generate a\n  warning][1.7d], which will become an error in future releases.\n* [Parsing \".\" as a float results in an error instead of 0][1.7p].\n  That is, `\".\".parse::<f32>()` returns `Err`, not `Ok(0.0)`.\n* [Borrows of closure parameters may not outlive the closure][1.7bc].\n\n[1.7a]: https://github.com/rust-lang/rust/pull/30928\n[1.7bc]: https://github.com/rust-lang/rust/pull/30341\n[1.7bm]: https://github.com/rust-lang/rust/pull/30426\n[1.7bt]: https://github.com/rust-lang/rust/pull/30998\n[1.7cp]: https://github.com/rust-lang/cargo/pull/2224\n[1.7d]: https://github.com/rust-lang/rust/pull/30724\n[1.7dt]: https://github.com/rust-lang/rust/pull/30372\n[1.7dta]: https://github.com/rust-lang/rust/pull/30394\n[1.7f]: https://github.com/rust-lang/rust/pull/30672\n[1.7h]: https://github.com/rust-lang/rust/pull/30818\n[1.7ll]: https://github.com/rust-lang/rust/pull/30663\n[1.7m]: https://github.com/rust-lang/rust/pull/30381\n[1.7p]: https://github.com/rust-lang/rust/pull/30681\n[1.7rp]: https://github.com/rust-lang/rust/pull/29498\n[1.7rpa]: https://github.com/rust-lang/rust/pull/30353\n[1.7rr]: https://github.com/rust-lang/cargo/pull/2279\n[1.7sf]: https://github.com/rust-lang/rust/pull/30389\n[1.7utf8]: https://github.com/rust-lang/rust/pull/30740\n[1.7v]: https://github.com/rust-lang/rust/pull/29973\n[RFC 1214]: https://github.com/rust-lang/rfcs/blob/master/text/1214-projections-lifetimes-and-wf.md\n[`BuildHasher::Hasher`]: http://doc.rust-lang.org/nightly/std/hash/trait.Hasher.html\n[`BuildHasher::build_hasher`]: http://doc.rust-lang.org/nightly/std/hash/trait.BuildHasher.html#tymethod.build_hasher\n[`CString::into_bytes_with_nul`]: http://doc.rust-lang.org/nightly/std/ffi/struct.CString.html#method.into_bytes_with_nul\n[`CString::into_bytes`]: http://doc.rust-lang.org/nightly/std/ffi/struct.CString.html#method.into_bytes\n[`CString::into_string`]: http://doc.rust-lang.org/nightly/std/ffi/struct.CString.html#method.into_string\n[`HashMap::with_capacity_and_hasher`]: http://doc.rust-lang.org/nightly/std/collections/struct.HashMap.html#method.with_capacity_and_hasher\n[`HashMap::with_hasher`]: http://doc.rust-lang.org/nightly/std/collections/struct.HashMap.html#method.with_hasher\n[`HashSet::with_capacity_and_hasher`]: http://doc.rust-lang.org/nightly/std/collections/struct.HashSet.html#method.with_capacity_and_hasher\n[`HashSet::with_hasher`]: http://doc.rust-lang.org/nightly/std/collections/struct.HashSet.html#method.with_hasher\n[`IntoStringError::into_cstring`]: http://doc.rust-lang.org/nightly/std/ffi/struct.IntoStringError.html#method.into_cstring\n[`IntoStringError::utf8_error`]: http://doc.rust-lang.org/nightly/std/ffi/struct.IntoStringError.html#method.utf8_error\n[`Ipv4Addr::is_broadcast`]: http://doc.rust-lang.org/nightly/std/net/struct.Ipv4Addr.html#method.is_broadcast\n[`Ipv4Addr::is_documentation`]: http://doc.rust-lang.org/nightly/std/net/struct.Ipv4Addr.html#method.is_documentation\n[`Ipv4Addr::is_link_local`]: http://doc.rust-lang.org/nightly/std/net/struct.Ipv4Addr.html#method.is_link_local\n[`Ipv4Addr::is_loopback`]: http://doc.rust-lang.org/nightly/std/net/struct.Ipv4Addr.html#method.is_loopback\n[`Ipv4Addr::is_multicast`]: http://doc.rust-lang.org/nightly/std/net/struct.Ipv4Addr.html#method.is_multicast\n[`Ipv4Addr::is_private`]: http://doc.rust-lang.org/nightly/std/net/struct.Ipv4Addr.html#method.is_private\n[`Ipv6Addr::is_loopback`]: http://doc.rust-lang.org/nightly/std/net/struct.Ipv6Addr.html#method.is_loopback\n[`Ipv6Addr::is_multicast`]: http://doc.rust-lang.org/nightly/std/net/struct.Ipv6Addr.html#method.is_multicast\n[`Ipv6Addr::is_unspecified`]: http://doc.rust-lang.org/nightly/std/net/struct.Ipv6Addr.html#method.is_unspecified\n[`Path::strip_prefix`]: http://doc.rust-lang.org/nightly/std/path/struct.Path.html#method.strip_prefix\n[`RandomState::new`]: http://doc.rust-lang.org/nightly/std/collections/hash_map/struct.RandomState.html#method.new\n[`String::as_mut_str`]: http://doc.rust-lang.org/nightly/std/string/struct.String.html#method.as_mut_str\n[`String::as_str`]: http://doc.rust-lang.org/nightly/std/string/struct.String.html#method.as_str\n[`Vec::as_mut_slice`]: http://doc.rust-lang.org/nightly/std/vec/struct.Vec.html#method.as_mut_slice\n[`Vec::as_slice`]: http://doc.rust-lang.org/nightly/std/vec/struct.Vec.html#method.as_slice\n[`clone_from_slice`]: http://doc.rust-lang.org/nightly/std/primitive.slice.html#method.clone_from_slice\n[`ffi::IntoStringError`]: http://doc.rust-lang.org/nightly/std/ffi/struct.IntoStringError.html\n[`i32::checked_neg`]: http://doc.rust-lang.org/nightly/std/primitive.i32.html#method.checked_neg\n[`i32::checked_rem`]: http://doc.rust-lang.org/nightly/std/primitive.i32.html#method.checked_rem\n[`i32::checked_shl`]: http://doc.rust-lang.org/nightly/std/primitive.i32.html#method.checked_shl\n[`i32::checked_shr`]: http://doc.rust-lang.org/nightly/std/primitive.i32.html#method.checked_shr\n[`i32::overflowing_add`]: http://doc.rust-lang.org/nightly/std/primitive.i32.html#method.overflowing_add\n[`i32::overflowing_div`]: http://doc.rust-lang.org/nightly/std/primitive.i32.html#method.overflowing_div\n[`i32::overflowing_mul`]: http://doc.rust-lang.org/nightly/std/primitive.i32.html#method.overflowing_mul\n[`i32::overflowing_neg`]: http://doc.rust-lang.org/nightly/std/primitive.i32.html#method.overflowing_neg\n[`i32::overflowing_rem`]: http://doc.rust-lang.org/nightly/std/primitive.i32.html#method.overflowing_rem\n[`i32::overflowing_shl`]: http://doc.rust-lang.org/nightly/std/primitive.i32.html#method.overflowing_shl\n[`i32::overflowing_shr`]: http://doc.rust-lang.org/nightly/std/primitive.i32.html#method.overflowing_shr\n[`i32::overflowing_sub`]: http://doc.rust-lang.org/nightly/std/primitive.i32.html#method.overflowing_sub\n[`i32::saturating_mul`]: http://doc.rust-lang.org/nightly/std/primitive.i32.html#method.saturating_mul\n[`path::StripPrefixError`]: http://doc.rust-lang.org/nightly/std/path/struct.StripPrefixError.html\n[`sort_by_key`]: http://doc.rust-lang.org/nightly/std/primitive.slice.html#method.sort_by_key\n[`std::collections::hash_map::RandomState`]: http://doc.rust-lang.org/nightly/std/collections/hash_map/struct.RandomState.html\n[`std::hash::BuildHasherDefault`]: http://doc.rust-lang.org/nightly/std/hash/struct.BuildHasherDefault.html\n[`std::hash::BuildHasher`]: http://doc.rust-lang.org/nightly/std/hash/trait.BuildHasher.html\n[`u32::checked_neg`]: http://doc.rust-lang.org/nightly/std/primitive.u32.html#method.checked_neg\n[`u32::checked_rem`]: http://doc.rust-lang.org/nightly/std/primitive.u32.html#method.checked_rem\n[`u32::checked_neg`]: http://doc.rust-lang.org/nightly/std/primitive.u32.html#method.checked_neg\n[`u32::checked_shl`]: http://doc.rust-lang.org/nightly/std/primitive.u32.html#method.checked_shl\n[`u32::overflowing_add`]: http://doc.rust-lang.org/nightly/std/primitive.u32.html#method.overflowing_add\n[`u32::overflowing_div`]: http://doc.rust-lang.org/nightly/std/primitive.u32.html#method.overflowing_div\n[`u32::overflowing_mul`]: http://doc.rust-lang.org/nightly/std/primitive.u32.html#method.overflowing_mul\n[`u32::overflowing_neg`]: http://doc.rust-lang.org/nightly/std/primitive.u32.html#method.overflowing_neg\n[`u32::overflowing_rem`]: http://doc.rust-lang.org/nightly/std/primitive.u32.html#method.overflowing_rem\n[`u32::overflowing_shl`]: http://doc.rust-lang.org/nightly/std/primitive.u32.html#method"
        },
        {
          "name": "compiler",
          "type": "tree",
          "content": null
        },
        {
          "name": "config.example.toml",
          "type": "blob",
          "size": 35.6396484375,
          "content": "# Sample TOML configuration file for building Rust.\n#\n# To configure rustbuild, run `./configure` or `./x.py setup`.\n# See https://rustc-dev-guide.rust-lang.org/building/how-to-build-and-run.html#create-a-configtoml for more information.\n#\n# All options are commented out by default in this file, and they're commented\n# out with their default values. The build system by default looks for\n# `config.toml` in the current directory of a build for build configuration, but\n# a custom configuration file can also be specified with `--config` to the build\n# system.\n\n# =============================================================================\n# Global Settings\n# =============================================================================\n\n# Use different pre-set defaults than the global defaults.\n#\n# See `src/bootstrap/defaults` for more information.\n# Note that this has no default value (x.py uses the defaults in `config.example.toml`).\n#profile = <none>\n\n# Keeps track of the last version of `x.py` used.\n# If `changelog-seen` does not match the version that is currently running,\n# `x.py` will prompt you to update it and to read the changelog.\n# See `src/bootstrap/CHANGELOG.md` for more information.\nchangelog-seen = 2\n\n# =============================================================================\n# Tweaking how LLVM is compiled\n# =============================================================================\n[llvm]\n\n# Whether to use Rust CI built LLVM instead of locally building it.\n#\n# Unless you're developing for a target where Rust CI doesn't build a compiler\n# toolchain or changing LLVM locally, you probably want to leave this enabled.\n#\n# All tier 1 targets are currently supported; set this to `\"if-available\"` if\n# you are not sure whether you're on a tier 1 target.\n#\n# We also currently only support this when building LLVM for the build triple.\n#\n# Note that many of the LLVM options are not currently supported for\n# downloading. Currently only the \"assertions\" option can be toggled.\n#download-ci-llvm = if rust.channel == \"dev\" { \"if-available\" } else { false }\n\n# Indicates whether the LLVM build is a Release or Debug build\n#optimize = true\n\n# Indicates whether LLVM should be built with ThinLTO. Note that this will\n# only succeed if you use clang, lld, llvm-ar, and llvm-ranlib in your C/C++\n# toolchain (see the `cc`, `cxx`, `linker`, `ar`, and `ranlib` options below).\n# More info at: https://clang.llvm.org/docs/ThinLTO.html#clang-bootstrap\n#thin-lto = false\n\n# Indicates whether an LLVM Release build should include debug info\n#release-debuginfo = false\n\n# Indicates whether the LLVM assertions are enabled or not\n# NOTE: When assertions are disabled, bugs in the integration between rustc and LLVM can lead to\n# unsoundness (segfaults, etc.) in the rustc process itself, not just in the generated code.\n#assertions = false\n\n# Indicates whether the LLVM testsuite is enabled in the build or not. Does\n# not execute the tests as part of the build as part of x.py build et al,\n# just makes it possible to do `ninja check-llvm` in the staged LLVM build\n# directory when doing LLVM development as part of Rust development.\n#tests = false\n\n# Indicates whether the LLVM plugin is enabled or not\n#plugins = false\n\n# Indicates whether ccache is used when building LLVM. Set to `true` to use the first `ccache` in\n# PATH, or set an absolute path to use a specific version.\n#ccache = false\n\n# When true, link libstdc++ statically into the rustc_llvm.\n# This is useful if you don't want to use the dynamic version of that\n# library provided by LLVM.\n#static-libstdcpp = false\n\n# Whether to use Ninja to build LLVM. This runs much faster than make.\n#ninja = true\n\n# LLVM targets to build support for.\n# Note: this is NOT related to Rust compilation targets. However, as Rust is\n# dependent on LLVM for code generation, turning targets off here WILL lead to\n# the resulting rustc being unable to compile for the disabled architectures.\n#\n# To add support for new targets, see https://rustc-dev-guide.rust-lang.org/building/new-target.html.\n#targets = \"AArch64;ARM;BPF;Hexagon;LoongArch;MSP430;Mips;NVPTX;PowerPC;RISCV;Sparc;SystemZ;WebAssembly;X86\"\n\n# LLVM experimental targets to build support for. These targets are specified in\n# the same format as above, but since these targets are experimental, they are\n# not built by default and the experimental Rust compilation targets that depend\n# on them will not work unless the user opts in to building them.\n#experimental-targets = \"AVR;M68k\"\n\n# Cap the number of parallel linker invocations when compiling LLVM.\n# This can be useful when building LLVM with debug info, which significantly\n# increases the size of binaries and consequently the memory required by\n# each linker process.\n# If set to 0, linker invocations are treated like any other job and\n# controlled by rustbuild's -j parameter.\n#link-jobs = 0\n\n# Whether to build LLVM as a dynamically linked library (as opposed to statically linked).\n# Under the hood, this passes `--shared` to llvm-config.\n# NOTE: To avoid performing LTO multiple times, we suggest setting this to `true` when `thin-lto` is enabled.\n#link-shared = llvm.thin-lto\n\n# When building llvm, this configures what is being appended to the version.\n# To use LLVM version as is, provide an empty string.\n#version-suffix = if rust.channel == \"dev\" { \"-rust-dev\" } else { \"-rust-$version-$channel\" }\n\n# On MSVC you can compile LLVM with clang-cl, but the test suite doesn't pass\n# with clang-cl, so this is special in that it only compiles LLVM with clang-cl.\n# Note that this takes a /path/to/clang-cl, not a boolean.\n#clang-cl = cc\n\n# Pass extra compiler and linker flags to the LLVM CMake build.\n#cflags = \"\"\n#cxxflags = \"\"\n#ldflags = \"\"\n\n# Use libc++ when building LLVM instead of libstdc++. This is the default on\n# platforms already use libc++ as the default C++ library, but this option\n# allows you to use libc++ even on platforms when it's not. You need to ensure\n# that your host compiler ships with libc++.\n#use-libcxx = false\n\n# The value specified here will be passed as `-DLLVM_USE_LINKER` to CMake.\n#use-linker = <none> (path)\n\n# Whether or not to specify `-DLLVM_TEMPORARILY_ALLOW_OLD_TOOLCHAIN=YES`\n#allow-old-toolchain = false\n\n# Whether to include the Polly optimizer.\n#polly = false\n\n# Whether to build the clang compiler.\n#clang = false\n\n# Whether to enable llvm compilation warnings.\n#enable-warnings = false\n\n# Custom CMake defines to set when building LLVM.\n#build-config = {}\n\n# =============================================================================\n# General build configuration options\n# =============================================================================\n[build]\n\n# The default stage to use for the `check` subcommand\n#check-stage = 0\n\n# The default stage to use for the `doc` subcommand\n#doc-stage = 0\n\n# The default stage to use for the `build` subcommand\n#build-stage = 1\n\n# The default stage to use for the `test` subcommand\n#test-stage = 1\n\n# The default stage to use for the `dist` subcommand\n#dist-stage = 2\n\n# The default stage to use for the `install` subcommand\n#install-stage = 2\n\n# The default stage to use for the `bench` subcommand\n#bench-stage = 2\n\n# Build triple for the pre-compiled snapshot compiler. If `rustc` is set, this must match its host\n# triple (see `rustc --version --verbose`; cross-compiling the rust build system itself is NOT\n# supported). If `rustc` is unset, this must be a platform with pre-compiled host tools\n# (https://doc.rust-lang.org/nightly/rustc/platform-support.html). The current platform must be\n# able to run binaries of this build triple.\n#\n# If `rustc` is present in path, this defaults to the host it was compiled for.\n# Otherwise, `x.py` will try to infer it from the output of `uname`.\n# If `uname` is not found in PATH, we assume this is `x86_64-pc-windows-msvc`.\n# This may be changed in the future.\n#build = \"x86_64-unknown-linux-gnu\" (as an example)\n\n# Which triples to produce a compiler toolchain for. Each of these triples will be bootstrapped from\n# the build triple themselves. In other words, this is the list of triples for which to build a\n# compiler that can RUN on that triple.\n#\n# Defaults to just the `build` triple.\n#host = [build.build] (list of triples)\n\n# Which triples to build libraries (core/alloc/std/test/proc_macro) for. Each of these triples will\n# be bootstrapped from the build triple themselves. In other words, this is the list of triples for\n# which to build a library that can CROSS-COMPILE to that triple.\n#\n# Defaults to `host`. If you set this explicitly, you likely want to add all\n# host triples to this list as well in order for those host toolchains to be\n# able to compile programs for their native target.\n#target = build.host (list of triples)\n\n# Use this directory to store build artifacts. Paths are relative to the current directory, not to\n# the root of the repository.\n#build-dir = \"build\"\n\n# Instead of downloading the src/stage0.json version of Cargo specified, use\n# this Cargo binary instead to build all Rust code\n# If you set this, you likely want to set `rustc` as well.\n#cargo = \"/path/to/cargo\"\n\n# Instead of downloading the src/stage0.json version of the compiler\n# specified, use this rustc binary instead as the stage0 snapshot compiler.\n# If you set this, you likely want to set `cargo` as well.\n#rustc = \"/path/to/rustc\"\n\n# Instead of downloading the src/stage0.json version of rustfmt specified,\n# use this rustfmt binary instead as the stage0 snapshot rustfmt.\n#rustfmt = \"/path/to/rustfmt\"\n\n# Whether to build documentation by default. If false, rustdoc and\n# friends will still be compiled but they will not be used to generate any\n# documentation.\n#\n# You can still build documentation when this is disabled by explicitly passing paths,\n# e.g. `x doc library`.\n#docs = true\n\n# Flag to specify whether CSS, JavaScript, and HTML are minified when\n# docs are generated. JSON is always minified, because it's enormous,\n# and generated in already-minified form from the beginning.\n#docs-minification = true\n\n# Flag to specify whether private items should be included in the library docs.\n#library-docs-private-items = false\n\n# Indicate whether to build compiler documentation by default.\n# You can still build documentation when this is disabled by explicitly passing a path: `x doc compiler`.\n#compiler-docs = false\n\n# Indicate whether git submodules are managed and updated automatically.\n#submodules = true\n\n# The path to (or name of) the GDB executable to use. This is only used for\n# executing the debuginfo test suite.\n#gdb = \"gdb\"\n\n# The node.js executable to use. Note that this is only used for the emscripten\n# target when running tests, otherwise this can be omitted.\n#nodejs = \"node\"\n\n# The npm executable to use. Note that this is used for rustdoc-gui tests,\n# otherwise this can be omitted.\n#\n# Under Windows this should be `npm.cmd` or path to it (verified on nodejs v18.06), or\n# error will be emitted.\n#npm = \"npm\"\n\n# Python interpreter to use for various tasks throughout the build, notably\n# rustdoc tests, the lldb python interpreter, and some dist bits and pieces.\n#\n# Defaults to the Python interpreter used to execute x.py.\n#python = \"python\"\n\n# The path to the REUSE executable to use. Note that REUSE is not required in\n# most cases, as our tooling relies on a cached (and shrunk) copy of the\n# REUSE output present in the git repository and in our source tarballs.\n#\n# REUSE is only needed if your changes caused the overall licensing of the\n# repository to change, and the cached copy has to be regenerated.\n#\n# Defaults to the \"reuse\" command in the system path.\n#reuse = \"reuse\"\n\n# Force Cargo to check that Cargo.lock describes the precise dependency\n# set that all the Cargo.toml files create, instead of updating it.\n#locked-deps = false\n\n# Indicate whether the vendored sources are used for Rust dependencies or not.\n#\n# Vendoring requires additional setup. We recommend using the pre-generated source tarballs if you\n# want to use vendoring. See\n# https://forge.rust-lang.org/infra/other-installation-methods.html#source-code.\n#vendor = false\n\n# Typically the build system will build the Rust compiler twice. The second\n# compiler, however, will simply use its own libraries to link against. If you\n# would rather to perform a full bootstrap, compiling the compiler three times,\n# then you can set this option to true.\n#\n# This is only useful for verifying that rustc generates reproducible builds.\n#full-bootstrap = false\n\n# Enable a build of the extended Rust tool set which is not only the compiler\n# but also tools such as Cargo. This will also produce \"combined installers\"\n# which are used to install Rust and Cargo together. This is disabled by\n# default. The `tools` option (immediately below) specifies which tools should\n# be built if `extended = true`.\n#extended = false\n\n# Set of tools to be included in the installation.\n#\n# If `extended = false`, the only one of these built by default is rustdoc.\n#\n# If `extended = true`, they're all included, with the exception of\n# rust-demangler which additionally requires `profiler = true` to be set.\n#\n# If any enabled tool fails to build, the installation fails.\n#tools = [\n#    \"cargo\",\n#    \"clippy\",\n#    \"rustdoc\",\n#    \"rustfmt\",\n#    \"rust-analyzer\",\n#    \"analysis\",\n#    \"src\",\n#    \"rust-demangler\",  # if profiler = true\n#]\n\n# Verbosity level: 0 == not verbose, 1 == verbose, 2 == very verbose, 3 == print environment variables on each rustc invocation\n#verbose = 0\n\n# Build the sanitizer runtimes\n#sanitizers = false\n\n# Build the profiler runtime (required when compiling with options that depend\n# on this runtime, such as `-C profile-generate` or `-C instrument-coverage`).\n#profiler = false\n\n# Indicates whether the native libraries linked into Cargo will be statically\n# linked or not.\n#cargo-native-static = false\n\n# Run the build with low priority, by setting the process group's \"nice\" value\n# to +10 on Unix platforms, and by using a \"low priority\" job object on Windows.\n#low-priority = false\n\n# Arguments passed to the `./configure` script, used during distcheck. You\n# probably won't fill this in but rather it's filled in by the `./configure`\n# script. Useful for debugging.\n#configure-args = []\n\n# Indicates that a local rebuild is occurring instead of a full bootstrap,\n# essentially skipping stage0 as the local compiler is recompiling itself again.\n# Useful for modifying only the stage2 compiler without having to pass `--keep-stage 0` each time.\n#local-rebuild = false\n\n# Print out how long each rustbuild step took (mostly intended for CI and\n# tracking over time)\n#print-step-timings = false\n\n# Print out resource usage data for each rustbuild step, as defined by the Unix\n# struct rusage. (Note that this setting is completely unstable: the data it\n# captures, what platforms it supports, the format of its associated output, and\n# this setting's very existence, are all subject to change.)\n#print-step-rusage = false\n\n# Always patch binaries for usage with Nix toolchains. If `true` then binaries\n# will be patched unconditionally. If `false` or unset, binaries will be patched\n# only if the current distribution is NixOS. This option is useful when using\n# a Nix toolchain on non-NixOS distributions.\n#patch-binaries-for-nix = false\n\n# Collect information and statistics about the current build and writes it to\n# disk. Enabling this or not has no impact on the resulting build output. The\n# schema of the file generated by the build metrics feature is unstable, and\n# this is not intended to be used during local development.\n#metrics = false\n\n# =============================================================================\n# General install configuration options\n# =============================================================================\n[install]\n\n# Where to install the generated toolchain. Must be an absolute path.\n#prefix = \"/usr/local\"\n\n# Where to install system configuration files.\n# If this is a relative path, it will get installed in `prefix` above\n#sysconfdir = \"/etc\"\n\n# Where to install documentation in `prefix` above\n#docdir = \"share/doc/rust\"\n\n# Where to install binaries in `prefix` above\n#bindir = \"bin\"\n\n# Where to install libraries in `prefix` above\n#libdir = \"lib\"\n\n# Where to install man pages in `prefix` above\n#mandir = \"share/man\"\n\n# Where to install data in `prefix` above\n#datadir = \"share\"\n\n# =============================================================================\n# Options for compiling Rust code itself\n# =============================================================================\n[rust]\n\n# Whether or not to optimize when compiling the compiler and standard library,\n# and what level of optimization to use.\n# WARNING: Building with optimize = false is NOT SUPPORTED. Due to bootstrapping,\n# building without optimizations takes much longer than optimizing. Further, some platforms\n# fail to build without this optimization (c.f. #65352).\n# The valid options are:\n# true - Enable optimizations.\n# false - Disable optimizations.\n# 0 - Disable optimizations.\n# 1 - Basic optimizations.\n# 2 - Some optimizations.\n# 3 - All optimizations.\n# \"s\" - Optimize for binary size.\n# \"z\" - Optimize for binary size, but also turn off loop vectorization.\n#optimize = true\n\n# Indicates that the build should be configured for debugging Rust. A\n# `debug`-enabled compiler and standard library will be somewhat\n# slower (due to e.g. checking of debug assertions) but should remain\n# usable.\n#\n# Note: If this value is set to `true`, it will affect a number of\n#       configuration options below as well, if they have been left\n#       unconfigured in this file.\n#\n# Note: changes to the `debug` setting do *not* affect `optimize`\n#       above. In theory, a \"maximally debuggable\" environment would\n#       set `optimize` to `false` above to assist the introspection\n#       facilities of debuggers like lldb and gdb. To recreate such an\n#       environment, explicitly set `optimize` to `false` and `debug`\n#       to `true`. In practice, everyone leaves `optimize` set to\n#       `true`, because an unoptimized rustc with debugging\n#       enabled becomes *unusably slow* (e.g. rust-lang/rust#24840\n#       reported a 25x slowdown) and bootstrapping the supposed\n#       \"maximally debuggable\" environment (notably libstd) takes\n#       hours to build.\n#\n#debug = false\n\n# Whether to download the stage 1 and 2 compilers from CI.\n# This is mostly useful for tools; if you have changes to `compiler/` or `library/` they will be ignored.\n#\n# Set this to \"if-unchanged\" to only download if the compiler and standard library have not been modified.\n# Set this to `true` to download unconditionally (useful if e.g. you are only changing doc-comments).\n#download-rustc = false\n\n# Number of codegen units to use for each compiler invocation. A value of 0\n# means \"the number of cores on this machine\", and 1+ is passed through to the\n# compiler.\n#\n# Uses the rustc defaults: https://doc.rust-lang.org/rustc/codegen-options/index.html#codegen-units\n#codegen-units = if incremental { 256 } else { 16 }\n\n# Sets the number of codegen units to build the standard library with,\n# regardless of what the codegen-unit setting for the rest of the compiler is.\n# NOTE: building with anything other than 1 is known to occasionally have bugs.\n# See https://github.com/rust-lang/rust/issues/83600.\n#codegen-units-std = codegen-units\n\n# Whether or not debug assertions are enabled for the compiler and standard library.\n# These can help find bugs at the cost of a small runtime slowdown.\n#\n# Defaults to rust.debug value\n#debug-assertions = rust.debug (boolean)\n\n# Whether or not debug assertions are enabled for the standard library.\n# Overrides the `debug-assertions` option, if defined.\n#\n# Defaults to rust.debug-assertions value\n#debug-assertions-std = rust.debug-assertions (boolean)\n\n# Whether or not to leave debug! and trace! calls in the rust binary.\n#\n# Defaults to rust.debug-assertions value\n#\n# If you see a message from `tracing` saying \"some trace filter directives would enable traces that\n# are disabled statically\" because `max_level_info` is enabled, set this value to `true`.\n#debug-logging = rust.debug-assertions (boolean)\n\n# Whether or not overflow checks are enabled for the compiler and standard\n# library.\n#\n# Defaults to rust.debug value\n#overflow-checks = rust.debug (boolean)\n\n# Whether or not overflow checks are enabled for the standard library.\n# Overrides the `overflow-checks` option, if defined.\n#\n# Defaults to rust.overflow-checks value\n#overflow-checks-std = rust.overflow-checks (boolean)\n\n# Debuginfo level for most of Rust code, corresponds to the `-C debuginfo=N` option of `rustc`.\n# `0` - no debug info\n# `1` - line tables only - sufficient to generate backtraces that include line\n#       information and inlined functions, set breakpoints at source code\n#       locations, and step through execution in a debugger.\n# `2` - full debug info with variable and type information\n# Can be overridden for specific subsets of Rust code (rustc, std or tools).\n# Debuginfo for tests run with compiletest is not controlled by this option\n# and needs to be enabled separately with `debuginfo-level-tests`.\n#\n# Note that debuginfo-level = 2 generates several gigabytes of debuginfo\n# and will slow down the linking process significantly.\n#debuginfo-level = if rust.debug { 1 } else { 0 }\n\n# Debuginfo level for the compiler.\n#debuginfo-level-rustc = rust.debuginfo-level\n\n# Debuginfo level for the standard library.\n#debuginfo-level-std = rust.debuginfo-level\n\n# Debuginfo level for the tools.\n#debuginfo-level-tools = rust.debuginfo-level\n\n# Debuginfo level for the test suites run with compiletest.\n# FIXME(#61117): Some tests fail when this option is enabled.\n#debuginfo-level-tests = 0\n\n# Should rustc be build with split debuginfo? Default is platform dependent.\n# Valid values are the same as those accepted by `-C split-debuginfo`\n# (`off`/`unpacked`/`packed`).\n#\n# On Linux, split debuginfo is disabled by default.\n#\n# On Apple platforms, unpacked split debuginfo is used by default. Unpacked\n# debuginfo does not run `dsymutil`, which packages debuginfo from disparate\n# object files into a single `.dSYM` file. `dsymutil` adds time to builds for\n# no clear benefit, and also makes it more difficult for debuggers to find\n# debug info. The compiler currently defaults to running `dsymutil` to preserve\n# its historical default, but when compiling the compiler itself, we skip it by\n# default since we know it's safe to do so in that case.\n#\n# On Windows platforms, packed debuginfo is the only supported option,\n# producing a `.pdb` file.\n#split-debuginfo = if linux { off } else if windows { packed } else if apple { unpacked }\n\n# Whether or not `panic!`s generate backtraces (RUST_BACKTRACE)\n#backtrace = true\n\n# Whether to always use incremental compilation when building rustc\n#incremental = false\n\n# Build a multi-threaded rustc\n# FIXME(#75760): Some UI tests fail when this option is enabled.\n# NOTE: This option is NOT SUPPORTED. See #48685.\n#parallel-compiler = false\n\n# The default linker that will be hard-coded into the generated\n# compiler for targets that don't specify a default linker explicitly\n# in their target specifications.  Note that this is not the linker\n# used to link said compiler. It can also be set per-target (via the\n# `[target.<triple>]` block), which may be useful in a cross-compilation\n# setting.\n#\n# See https://doc.rust-lang.org/rustc/codegen-options/index.html#linker for more information.\n#default-linker = <none> (path)\n\n# The \"channel\" for the Rust build to produce. The stable/beta channels only\n# allow using stable features, whereas the nightly and dev channels allow using\n# nightly features\n#channel = \"dev\"\n\n# A descriptive string to be appended to `rustc --version` output, which is\n# also used in places like debuginfo `DW_AT_producer`. This may be useful for\n# supplementary build information, like distro-specific package versions.\n#\n# The Rust compiler will differentiate between versions of itself, including\n# based on this string, which means that if you wish to be compatible with\n# upstream Rust you need to set this to \"\". However, note that if you are not\n# actually compatible -- for example if you've backported patches that change\n# behavior -- this may lead to miscompilations or other bugs.\n#description = \"\"\n\n# The root location of the musl installation directory. The library directory\n# will also need to contain libunwind.a for an unwinding implementation. Note\n# that this option only makes sense for musl targets that produce statically\n# linked binaries.\n#\n# Defaults to /usr on musl hosts. Has no default otherwise.\n#musl-root = <platform specific> (path)\n\n# By default the `rustc` executable is built with `-Wl,-rpath` flags on Unix\n# platforms to ensure that the compiler is usable by default from the build\n# directory (as it links to a number of dynamic libraries). This may not be\n# desired in distributions, for example.\n#rpath = true\n\n# Prints each test name as it is executed, to help debug issues in the test harness itself.\n#verbose-tests = false\n\n# Flag indicating whether tests are compiled with optimizations (the -O flag).\n#optimize-tests = true\n\n# Flag indicating whether codegen tests will be run or not. If you get an error\n# saying that the FileCheck executable is missing, you may want to disable this.\n# Also see the target's llvm-filecheck option.\n#codegen-tests = true\n\n# Flag indicating whether git info will be retrieved from .git automatically.\n# Having the git information can cause a lot of rebuilds during development.\n#\n# FIXME(#76720): this can causes bugs if different compilers reuse the same metadata cache.\n#omit-git-hash = if rust.channel == \"dev\" { true } else { false }\n\n# Whether to create a source tarball by default when running `x dist`.\n#\n# You can still build a source tarball when this is disabled by explicitly passing `x dist rustc-src`.\n#dist-src = true\n\n# After building or testing an optional component (e.g. the nomicon or reference), append the\n# result (broken, compiling, testing) into this JSON file.\n#save-toolstates = <none> (path)\n\n# This is an array of the codegen backends that will be compiled for the rustc\n# that's being compiled. The default is to only build the LLVM codegen backend,\n# and currently the only standard options supported are `\"llvm\"`, `\"cranelift\"`\n# and `\"gcc\"`. The first backend in this list will be used as default by rustc\n# when no explicit backend is specified.\n#codegen-backends = [\"llvm\"]\n\n# Indicates whether LLD will be compiled and made available in the sysroot for\n# rustc to execute.\n#lld = false\n\n# Indicates whether LLD will be used to link Rust crates during bootstrap on\n# supported platforms. The LLD from the bootstrap distribution will be used\n# and not the LLD compiled during the bootstrap.\n#\n# LLD will not be used if we're cross linking.\n#\n# Explicitly setting the linker for a target will override this option when targeting MSVC.\n#use-lld = false\n\n# Indicates whether some LLVM tools, like llvm-objdump, will be made available in the\n# sysroot.\n#llvm-tools = false\n\n# Whether to deny warnings in crates\n#deny-warnings = true\n\n# Print backtrace on internal compiler errors during bootstrap\n#backtrace-on-ice = false\n\n# Whether to verify generated LLVM IR\n#verify-llvm-ir = false\n\n# Compile the compiler with a non-default ThinLTO import limit. This import\n# limit controls the maximum size of functions imported by ThinLTO. Decreasing\n# will make code compile faster at the expense of lower runtime performance.\n#thin-lto-import-instr-limit = if incremental { 10 } else { LLVM default (currently 100) }\n\n# Map debuginfo paths to `/rust/$sha/...`.\n# Useful for reproducible builds. Generally only set for releases\n#remap-debuginfo = false\n\n# Link the compiler and LLVM against `jemalloc` instead of the default libc allocator.\n# This option is only tested on Linux and OSX.\n#jemalloc = false\n\n# Run tests in various test suites with the \"nll compare mode\" in addition to\n# running the tests in normal mode. Largely only used on CI and during local\n# development of NLL\n#test-compare-mode = false\n\n# Global default for llvm-libunwind for all targets. See the target-specific\n# documentation for llvm-libunwind below. Note that the target-specific\n# option will override this if set.\n#llvm-libunwind = 'no'\n\n# Enable Windows Control Flow Guard checks in the standard library.\n# This only applies from stage 1 onwards, and only for Windows targets.\n#control-flow-guard = false\n\n# Enable symbol-mangling-version v0. This can be helpful when profiling rustc,\n# as generics will be preserved in symbols (rather than erased into opaque T).\n# When no setting is given, the new scheme will be used when compiling the\n# compiler and its tools and the legacy scheme will be used when compiling the\n# standard library.\n# If an explicit setting is given, it will be used for all parts of the codebase.\n#new-symbol-mangling = true|false (see comment)\n\n# Select LTO mode that will be used for compiling rustc. By default, thin local LTO\n# (LTO within a single crate) is used (like for any Rust crate). You can also select\n# \"thin\" or \"fat\" to apply Thin/Fat LTO to the `rustc_driver` dylib, or \"off\" to disable\n# LTO entirely.\n#lto = \"thin-local\"\n\n# Build compiler with the optimization enabled and -Zvalidate-mir, currently only for `std`\n#validate-mir-opts = 3\n\n# Copy the linker, DLLs, and various libraries from MinGW into the rustc toolchain.\n# Only applies when the host or target is pc-windows-gnu.\n#include-mingw-linker = true\n\n# =============================================================================\n# Options for specific targets\n#\n# Each of the following options is scoped to the specific target triple in\n# question and is used for determining how to compile each target.\n# =============================================================================\n[target.x86_64-unknown-linux-gnu]\n\n# C compiler to be used to compile C code. Note that the\n# default value is platform specific, and if not specified it may also depend on\n# what platform is crossing to what platform.\n# See `src/bootstrap/cc_detect.rs` for details.\n#cc = \"cc\" (path)\n\n# C++ compiler to be used to compile C++ code (e.g. LLVM and our LLVM shims).\n# This is only used for host targets.\n# See `src/bootstrap/cc_detect.rs` for details.\n#cxx = \"c++\" (path)\n\n# Archiver to be used to assemble static libraries compiled from C/C++ code.\n# Note: an absolute path should be used, otherwise LLVM build will break.\n#ar = \"ar\" (path)\n\n# Ranlib to be used to assemble static libraries compiled from C/C++ code.\n# Note: an absolute path should be used, otherwise LLVM build will break.\n#ranlib = \"ranlib\" (path)\n\n# Linker to be used to bootstrap Rust code. Note that the\n# default value is platform specific, and if not specified it may also depend on\n# what platform is crossing to what platform.\n# Setting this will override the `use-lld` option for Rust code when targeting MSVC.\n#linker = \"cc\" (path)\n\n# Path to the `llvm-config` binary of the installation of a custom LLVM to link\n# against. Note that if this is specified we don't compile LLVM at all for this\n# target.\n#llvm-config = <none> (path)\n\n# Override detection of whether this is a Rust-patched LLVM. This would be used\n# in conjunction with either an llvm-config or build.submodules = false.\n#llvm-has-rust-patches = if llvm-config { false } else { true }\n\n# Normally the build system can find LLVM's FileCheck utility, but if\n# not, you can specify an explicit file name for it.\n#llvm-filecheck = \"/path/to/llvm-version/bin/FileCheck\"\n\n# Use LLVM libunwind as the implementation for Rust's unwinder.\n# Accepted values are 'in-tree' (formerly true), 'system' or 'no' (formerly false).\n# This option only applies for Linux and Fuchsia targets.\n# On Linux target, if crt-static is not enabled, 'no' means dynamic link to\n# `libgcc_s.so`, 'in-tree' means static link to the in-tree build of llvm libunwind\n# and 'system' means dynamic link to `libunwind.so`. If crt-static is enabled,\n# the behavior is depend on the libc. On musl target, 'no' and 'in-tree' both\n# means static link to the in-tree build of llvm libunwind, and 'system' means\n# static link to `libunwind.a` provided by system. Due to the limitation of glibc,\n# it must link to `libgcc_eh.a` to get a working output, and this option have no effect.\n#llvm-libunwind = 'no' if Linux, 'in-tree' if Fuchsia\n\n# If this target is for Android, this option will be required to specify where\n# the NDK for the target lives. This is used to find the C compiler to link and\n# build native code.\n# See `src/bootstrap/cc_detect.rs` for details.\n#android-ndk = <none> (path)\n\n# Build the sanitizer runtimes for this target.\n# This option will override the same option under [build] section.\n#sanitizers = build.sanitizers (bool)\n\n# Build the profiler runtime for this target(required when compiling with options that depend\n# on this runtime, such as `-C profile-generate` or `-C instrument-coverage`).\n# This option will override the same option under [build] section.\n#profiler = build.profiler (bool)\n\n# This option supports enable `rpath` in each target independently,\n# and will override the same option under [rust] section. It only works on Unix platforms\n#rpath = rust.rpath (bool)\n\n# Force static or dynamic linkage of the standard library for this target. If\n# this target is a host for rustc, this will also affect the linkage of the\n# compiler itself. This is useful for building rustc on targets that normally\n# only use static libraries. If unset, the target's default linkage is used.\n#crt-static = <platform-specific> (bool)\n\n# The root location of the musl installation directory. The library directory\n# will also need to contain libunwind.a for an unwinding implementation. Note\n# that this option only makes sense for musl targets that produce statically\n# linked binaries.\n#musl-root = build.musl-root (path)\n\n# The full path to the musl libdir.\n#musl-libdir = musl-root/lib\n\n# The root location of the `wasm32-wasi` sysroot. Only used for the\n# `wasm32-wasi` target. If you are building wasm32-wasi target, make sure to\n# create a `[target.wasm32-wasi]` section and move this field there.\n#wasi-root = <none> (path)\n\n# Used in testing for configuring where the QEMU images are located, you\n# probably don't want to use this.\n#qemu-rootfs = <none> (path)\n\n# Skip building the `std` library for this target. Enabled by default for\n# target triples containing `-none`, `nvptx`, `switch`, or `-uefi`.\n#no-std = <platform-specific> (bool)\n\n# =============================================================================\n# Distribution options\n#\n# These options are related to distribution, mostly for the Rust project itself.\n# You probably won't need to concern yourself with any of these options\n# =============================================================================\n[dist]\n\n# This is the folder of artifacts that the build system will sign. All files in\n# this directory will be signed with the default gpg key using the system `gpg`\n# binary. The `asc` and `sha256` files will all be output into the standard dist\n# output folder (currently `build/dist`)\n#\n# This folder should be populated ahead of time before the build system is\n# invoked.\n#sign-folder = <none> (path)\n\n# The remote address that all artifacts will eventually be uploaded to. The\n# build system generates manifests which will point to these urls, and for the\n# manifests to be correct they'll have to have the right URLs encoded.\n#\n# Note that this address should not contain a trailing slash as file names will\n# be appended to it.\n#upload-addr = <none> (URL)\n\n# Whether to build a plain source tarball to upload\n# We disable that on Windows not to override the one already uploaded on S3\n# as the one built on Windows will contain backslashes in paths causing problems\n# on linux\n#src-tarball = true\n\n# Whether to allow failures when building tools\n#missing-tools = false\n\n# List of compression formats to use when generating dist tarballs. The list of\n# formats is provided to rust-installer, which must support all of them.\n#\n# This list must be non-empty.\n#compression-formats = [\"gz\", \"xz\"]\n\n# How much time should be spent compressing the tarballs. The better the\n# compression profile, the longer compression will take.\n#\n# Available options: fast, balanced, best\n#compression-profile = \"fast\"\n"
        },
        {
          "name": "configure",
          "type": "blob",
          "size": 0.28515625,
          "content": "#!/bin/sh\n\nscript=\"$(dirname $0)\"/src/bootstrap/configure.py\n\ntry() {\n    cmd=$1\n    shift\n    T=$($cmd --version 2>/dev/null)\n    if [ $? -eq 0 ]; then\n        exec $cmd \"$script\" \"$@\"\n    fi\n}\n\ntry python3 \"$@\"\ntry python2.7 \"$@\"\ntry python27 \"$@\"\ntry python2 \"$@\"\nexec python $script \"$@\"\n"
        },
        {
          "name": "library",
          "type": "tree",
          "content": null
        },
        {
          "name": "monorepoize.sh",
          "type": "blob",
          "size": 2.9931640625,
          "content": "#!/usr/bin/env bash\n\n###\n# converts a project with git submodules to a monorepo by importing all the\n# submodules into the main repository.\n#\n# gets submodule info from .gitmodules file and imports each submodule into\n# the main repository.\n###\n\nmain() {\n    # checkout \"current\" branch and reset to latest changes\n    git checkout current >/dev/null 2>&1 || fail \"failed to checkout master branch\"\n    git reset --hard origin/upstream >/dev/null 2>&1 || fail \"failed to reset upstream branch\"\n\n    if [[ -f .gitmodules ]]; then\n        # make sure the .gitmodules file is not empty\n        if [[ ! -s .gitmodules ]]; then\n            echo \".gitmodules file is empty. nothing to do. exiting...\"\n        else\n            echo \"found .gitmodules file. attempting to convert to monorepo...\"\n            convert\n        fi\n    else\n        echo \"no .gitmodules file found. exiting...\"\n    fi\n\n    # copy over the README from remote master branch\n    git checkout origin/master -- README.md monorepoize.sh >/dev/null 2>&1 || fail \"failed to copy README.md and monorepoize.sh from remote master branch\"\n    git add README.md monorepoize.sh >/dev/null 2>&1 || fail \"failed to add README.md and monorepoize.sh\"\n    git commit -m \"use CrabLang README.md and monorepoize.sh\" >/dev/null 2>&1 || fail \"failed to commit README.md and monorepoize.sh\"\n\n    # force push master branch to remote\n    git push -f origin current >/dev/null 2>&1 || fail \"failed to push 'current' branch to remote\"\n}\n\nconvert() {\n    # read each submodule from .gitmodules file\n    while read -r i; do\n        if [[ $i == \\[submodule* ]]; then\n            read -r i # next line is the path\n            path=$(echo \"$i\" | cut -d'=' -f2 | xargs)\n            read -r i # next line is the url\n            url=$(echo \"$i\" | cut -d'=' -f2 | xargs)\n            # if path equals \"src/llvm-project\", skip it\n            if [[ $path == \"src/llvm-project\" ]]; then\n                echo \"skipping LLVM submodule...\"\n                continue\n            fi\n            echo \"converting $path from $url...\"\n            # deinitialize and remove the submodule\n            git submodule deinit -f \"$path\" >/dev/null 2>&1 || fail \"failed to deinit $path\"\n            rm -rf .git/modules/\"$path\"\n            git rm -f \"$path\" >/dev/null 2>&1 || fail \"failed to remove $path\"\n            # clone the submodule and remove its .git directory\n            git clone \"$url\" \"$path\" >/dev/null 2>&1 || fail \"failed to clone $url\"\n            rm -rf \"$path\"/.git\n            # add the submodule files and commit\n            git add \"$path\" >/dev/null 2>&1 || fail \"failed to add $path with git\"\n            msg=\"imported $path into main repository\"\n            echo \"$msg\"\n            git commit -m \"$msg\" >/dev/null 2>&1 || fail \"failed to commit $path\"\n            echo \"successfully converted $path.\"\n        fi\n    done <.gitmodules\n}\n\nfail() {\n    printf '%s\\n' \"$1\" >&2\n    exit \"${2-1}\"\n}\n\ntry_and_continue() {\n    $1 || echo \"command failed: $1, continuing...\"\n}\n\nmain \"$@\" && echo \"converted to monorepo successfully.\"\n"
        },
        {
          "name": "rustfmt.toml",
          "type": "blob",
          "size": 1.2646484375,
          "content": "# Run rustfmt with this config (it should be picked up automatically).\nversion = \"Two\"\nuse_small_heuristics = \"Max\"\nmerge_derives = false\n\n# by default we ignore everything in the repository\n# tidy only checks files which are not ignored, each entry follows gitignore style\nignore = [\n    \"/build/\",\n    \"/*-build/\",\n    \"/build-*/\",\n    \"/vendor/\",\n\n    # tests for now are not formatted, as they are sometimes pretty-printing constrained\n    # (and generally rustfmt can move around comments in UI-testing incompatible ways)\n    \"tests\",\n\n    # do not format submodules\n    # FIXME: sync submodule list with tidy/bootstrap/etc\n    # tidy/src/walk.rs:filter_dirs\n    \"library/backtrace\",\n    \"library/portable-simd\",\n    \"library/stdarch\",\n    \"compiler/rustc_codegen_gcc\",\n    \"src/doc/book\",\n    \"src/doc/edition-guide\",\n    \"src/doc/embedded-book\",\n    \"src/doc/nomicon\",\n    \"src/doc/reference\",\n    \"src/doc/rust-by-example\",\n    \"src/doc/rustc-dev-guide\",\n    \"src/llvm-project\",\n    \"src/tools/cargo\",\n    \"src/tools/clippy\",\n    \"src/tools/miri\",\n    \"src/tools/rust-analyzer\",\n    \"src/tools/rustfmt\",\n\n    # these are ignored by a standard cargo fmt run\n    \"compiler/rustc_codegen_cranelift/y.rs\", # running rustfmt breaks this file\n    \"compiler/rustc_codegen_cranelift/scripts\",\n]\n"
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        },
        {
          "name": "triagebot.toml",
          "type": "blob",
          "size": 18.193359375,
          "content": "[relabel]\nallow-unauthenticated = [\n    \"A-*\",\n    \"C-*\",\n    \"D-*\",\n    \"E-*\",\n    \"F-*\",\n    \"I-*\",\n    \"NLL-*\",\n    \"O-*\",\n    \"S-*\",\n    \"T-*\",\n    \"WG-*\",\n    \"beta-nominated\",\n    \"const-hack\",\n    \"llvm-main\",\n    \"needs-fcp\",\n    \"relnotes\",\n    \"requires-*\",\n    \"regression-*\",\n    \"perf-*\",\n    \"AsyncAwait-OnDeck\",\n    \"needs-triage\",\n]\n\n[glacier]\n\n[ping.icebreakers-llvm]\nalias = [\"llvm\", \"llvms\"]\nmessage = \"\"\"\\\nHey LLVM ICE-breakers! This bug has been identified as a good\n\"LLVM ICE-breaking candidate\". In case it's useful, here are some\n[instructions] for tackling these sorts of bugs. Maybe take a look?\nThanks! <3\n\n[instructions]: https://rustc-dev-guide.rust-lang.org/notification-groups/llvm.html\n\"\"\"\nlabel = \"ICEBreaker-LLVM\"\n\n[ping.icebreakers-cleanup-crew]\nalias = [\"cleanup\", \"cleanups\", \"cleanup-crew\", \"shrink\", \"reduce\", \"bisect\"]\nmessage = \"\"\"\\\nHey Cleanup Crew ICE-breakers! This bug has been identified as a good\n\"Cleanup ICE-breaking candidate\". In case it's useful, here are some\n[instructions] for tackling these sorts of bugs. Maybe take a look?\nThanks! <3\n\n[instructions]: https://rustc-dev-guide.rust-lang.org/notification-groups/cleanup-crew.html\n\"\"\"\nlabel = \"ICEBreaker-Cleanup-Crew\"\n\n[ping.windows]\nmessage = \"\"\"\\\nHey Windows Group! This bug has been identified as a good \"Windows candidate\".\nIn case it's useful, here are some [instructions] for tackling these sorts of\nbugs. Maybe take a look?\nThanks! <3\n\n[instructions]: https://rustc-dev-guide.rust-lang.org/notification-groups/windows.html\n\"\"\"\nlabel = \"O-windows\"\n\n[ping.arm]\nmessage = \"\"\"\\\nHey ARM Group! This bug has been identified as a good \"ARM candidate\".\nIn case it's useful, here are some [instructions] for tackling these sorts of\nbugs. Maybe take a look?\nThanks! <3\n\n[instructions]: https://rustc-dev-guide.rust-lang.org/notification-groups/arm.html\n\"\"\"\nlabel = \"O-ARM\"\n\n[ping.risc-v]\nmessage = \"\"\"\\\nHey RISC-V Group! This bug has been identified as a good \"RISC-V candidate\".\nIn case it's useful, here are some [instructions] for tackling these sorts of\nbugs. Maybe take a look?\nThanks! <3\n\n[instructions]: https://rustc-dev-guide.rust-lang.org/notification-groups/risc-v.html\n\"\"\"\nlabel = \"O-riscv\"\n\n[ping.fuchsia]\nmessage = \"\"\"\\\nHey friends of Fuchsia! This issue could use some guidance on how this should be\nresolved/implemented on Fuchsia. Could one of you weigh in?\n\"\"\"\nlabel = \"O-fuchsia\"\n\n[ping.macos]\nmessage = \"\"\"\\\nHey MacOS Group! This issue or PR could use some MacOS-specific guidance. Could one\nof you weigh in? Thanks <3\n\"\"\"\nlabel = \"O-macos\"\n\n[prioritize]\nlabel = \"I-prioritize\"\n\n[autolabel.\"I-prioritize\"]\ntrigger_labels = [\n    \"regression-untriaged\",\n    \"regression-from-stable-to-stable\",\n    \"regression-from-stable-to-beta\",\n    \"regression-from-stable-to-nightly\",\n    \"I-unsound\",\n]\nexclude_labels = [\n    \"P-*\",\n    \"T-infra\",\n    \"T-release\",\n    \"requires-nightly\",\n]\n\n[autolabel.\"T-rustdoc\"]\ntrigger_files = [\n    # Source code\n    \"src/librustdoc\",\n    \"src/tools/rustdoc\",\n    \"src/rustdoc-json-types\",\n\n    # Tests\n    \"tests/rustdoc\",\n    \"tests/rustdoc-ui\",\n    \"tests/rustdoc-gui\",\n    \"tests/rustdoc-js\",\n    \"tests/rustdoc-js-std\",\n    \"tests/rustdoc-json\",\n\n    # Internal tooling\n    \"src/etc/htmldocck.py\",\n    \"src/tools/jsondocck\",\n    \"src/tools/jsondoclint\",\n    \"src/tools/rustdoc-gui\",\n    \"src/tools/rustdoc-js\",\n    \"src/tools/rustdoc-themes\",\n]\nexclude_labels = [\n    \"T-*\",\n]\n\n[autolabel.\"A-rustdoc-json\"]\ntrigger_files = [\n    \"src/librustdoc/json/\",\n    \"src/rustdoc-json-types\",\n    \"tests/rustdoc-json\",\n    \"src/tools/jsondocck\",\n    \"src/tools/jsondoclint\",\n]\n\n[autolabel.\"T-compiler\"]\ntrigger_files = [\n    # Source code\n    \"compiler\",\n\n    # Tests\n    \"tests/ui\",\n]\nexclude_labels = [\n    \"T-*\",\n]\n\n[autolabel.\"T-libs\"]\ntrigger_files = [\n    \"library/alloc\",\n    \"library/core\",\n    \"library/panic_abort\",\n    \"library/panic_unwind\",\n    \"library/std\",\n    \"library/stdarch\",\n    \"library/term\",\n    \"library/test\",\n]\nexclude_labels = [\n    \"T-*\",\n]\n\n[autolabel.\"T-bootstrap\"]\ntrigger_files = [\n    \"x.py\",\n    \"x\",\n    \"x.ps1\",\n    \"src/bootstrap\",\n    \"src/tools/rust-installer\",\n    \"src/tools/x\",\n    \"configure\",\n    \"Cargo.toml\",\n    \"config.example.toml\",\n    \"src/stage0.json\",\n    \"src/tools/compiletest\",\n    \"src/tools/tidy\",\n    \"src/tools/rustdoc-gui-test\",\n]\n\n[autolabel.\"T-infra\"]\ntrigger_files = [\n    \"src/ci\",\n    \"src/tools/bump-stage0\",\n    \"src/tools/cargotest\",\n    \"src/tools/tier-check\",\n]\n\n[autolabel.\"T-style\"]\ntrigger_files = [\n    \"src/doc/style-guide\",\n]\n\n[autolabel.\"A-translation\"]\ntrigger_files = [\n    \"compiler/rustc_error_messages\",\n    \"compiler/rustc_errors/src/translation.rs\",\n    \"compiler/rustc_macros/src/diagnostics\"\n]\n\n[autolabel.\"A-query-system\"]\ntrigger_files = [\n    \"compiler/rustc_query_system\",\n    \"compiler/rustc_query_impl\",\n    \"compiler/rustc_macros/src/query.rs\"\n]\n\n[autolabel.\"A-testsuite\"]\ntrigger_files = [\n    \"src/ci\",\n    \"src/tools/compiletest\",\n    \"src/tools/cargotest\",\n    \"src/tools/tidy\",\n    \"src/tools/remote-test-server\",\n    \"src/tools/remote-test-client\",\n    \"src/tools/tier-check\"\n]\n\n[autolabel.\"A-meta\"]\ntrigger_files = [\n    \"triagebot.toml\",\n    \"rustfmt.toml\",\n    \"LICENSES\",\n    \"README.md\",\n    \"CONTRIBUTING.md\",\n    \".reuse\",\n    \".mailmap\",\n    \".git-blame-ignore-revs\",\n    \".editorconfig\"\n]\n\n[autolabel.\"T-release\"]\ntrigger_files = [\n    \"RELEASES.md\",\n    \"src/stage0.json\",\n    \"src/version\"\n]\n\n[autolabel.\"S-waiting-on-review\"]\nnew_pr = true\n\n[autolabel.\"needs-triage\"]\nnew_issue = true\nexclude_labels = [\n    \"C-tracking-issue\"\n]\n\n[autolabel.\"WG-trait-system-refactor\"]\ntrigger_files = [\n    \"compiler/rustc_trait_selection/src/solve\",\n    \"compiler/rustc_middle/src/traits/solve\"\n]\n\n[notify-zulip.\"I-prioritize\"]\nzulip_stream = 245100 # #t-compiler/wg-prioritization/alerts\ntopic = \"#{number} {title}\"\nmessage_on_add = \"\"\"\\\n@*WG-prioritization/alerts* issue #{number} has been requested for prioritization.\n\n# [Procedure](https://forge.rust-lang.org/compiler/prioritization/procedure.html#assign-priority-to-unprioritized-issues-with-i-prioritize-label)\n- Priority?\n- Regression?\n- Notify people/groups?\n- Needs `I-nominated`?\n\"\"\"\nmessage_on_remove = \"Issue #{number}'s prioritization request has been removed.\"\nmessage_on_close = \"Issue #{number} has been closed while requested for prioritization.\"\nmessage_on_reopen = \"Issue #{number} has been reopened.\"\n\n[notify-zulip.\"T-rustdoc\"]\nrequired_labels = [\"I-nominated\"]\nzulip_stream = 266220 # #rustdoc\ntopic = \"nominated: #{number}\"\nmessage_on_add = \"\"\"\\\n@*T-rustdoc* issue #{number} \"{title}\" has been nominated for `T-rustdoc` discussion.\n\"\"\"\nmessage_on_remove = \"Issue #{number}'s nomination request has been removed.\"\n\n[notify-zulip.\"I-types-nominated\"]\nzulip_stream = 326866 # #T-types/nominated\ntopic = \"#{number}: {title}\"\nmessage_on_add = \"\"\"\\\n@*T-types* issue #{number} \"{title}\" has been nominated for team discussion.\n\"\"\"\nmessage_on_remove = \"Issue #{number}'s nomination has been removed. Thanks all for participating!\"\nmessage_on_close = \"Issue #{number} has been closed. Thanks for participating!\"\nmessage_on_reopen = \"Issue #{number} has been reopened. Pinging @*T-types*.\"\n\n[notify-zulip.\"A-edition-2021\"]\nrequired_labels = [\"C-bug\"]\nzulip_stream = 268952 # #edition 2021\ntopic = \"Edition Bugs\"\nmessage_on_add = \"\"\"\\\nIssue #{number} \"{title}\" has been added.\n\"\"\"\n\n[github-releases]\nformat = \"rustc\"\nproject-name = \"Rust\"\nchangelog-path = \"RELEASES.md\"\nchangelog-branch = \"master\"\n\n[shortcut]\n\n[mentions.\"compiler/rustc_codegen_cranelift\"]\ncc = [\"@bjorn3\"]\n\n[mentions.\"compiler/rustc_codegen_gcc\"]\ncc = [\"@antoyo\"]\n\n[mentions.\"compiler/rustc_const_eval/src/interpret\"]\nmessage = \"Some changes occurred to the CTFE / Miri engine\"\ncc = [\"@rust-lang/miri\"]\n\n[mentions.\"compiler/rustc_infer/src/infer/error_reporting/need_type_info.rs\"]\nmessage = \"Some changes occurred in need_type_info.rs\"\ncc = [\"@lcnr\"]\n\n[mentions.\"compiler/rustc_middle/src/mir/interpret\"]\nmessage = \"Some changes occurred to the CTFE / Miri engine\"\ncc = [\"@rust-lang/miri\"]\n\n[mentions.\"compiler/rustc_mir_transform/src/\"]\nmessage = \"Some changes occurred to MIR optimizations\"\ncc = [\"@rust-lang/wg-mir-opt\"]\n\n[mentions.\"compiler/rustc_trait_selection/src/traits/const_evaluatable.rs\"]\nmessage = \"Some changes occurred in `const_evaluatable.rs`\"\ncc = [\"@BoxyUwU\"]\n\n[mentions.\"compiler/rustc_middle/src/ty/abstract_const.rs\"]\nmessage = \"Some changes occurred in `abstract_const.rs`\"\ncc = [\"@BoxyUwU\"]\n\n[mentions.\"compiler/rustc_ty_utils/src/consts.rs\"]\nmessage = \"Some changes occurred in `rustc_ty_utils::consts.rs`\"\ncc = [\"@BoxyUwU\"]\n\n[mentions.\"compiler/rustc_trait_selection/src/solve/\"]\nmessage = \"Some changes occurred to the core trait solver\"\ncc = [\"@rust-lang/initiative-trait-system-refactor\"]\n\n[mentions.\"compiler/rustc_trait_selection/src/traits/engine.rs\"]\nmessage = \"\"\"\nSome changes occurred in engine.rs, potentially modifying the public API \\\nof `ObligationCtxt`.\n\"\"\"\ncc = [\"@lcnr\", \"@compiler-errors\"]\n\n[mentions.\"compiler/rustc_error_codes/src/error_codes.rs\"]\nmessage = \"Some changes occurred in diagnostic error codes\"\ncc = [\"@GuillaumeGomez\"]\n\n[mentions.\"compiler/rustc_mir_build/src/thir/pattern\"]\nmessage = \"Some changes might have occurred in exhaustiveness checking\"\ncc = [\"@Nadrieril\"]\n\n[mentions.\"library/portable-simd\"]\nmessage = \"\"\"\nPortable SIMD is developed in its own repository. If possible, consider \\\nmaking this change to [rust-lang/portable-simd](https://github.com/rust-lang/portable-simd) \\\ninstead.\n\"\"\"\ncc = [\"@calebzulawski\", \"@programmerjake\"]\n\n[mentions.\"src/librustdoc/clean/types.rs\"]\ncc = [\"@camelid\"]\n\n[mentions.\"src/librustdoc/html/static\"]\nmessage = \"Some changes occurred in HTML/CSS/JS.\"\ncc = [\n    \"@GuillaumeGomez\",\n    \"@Folyd\",\n    \"@jsha\",\n]\n\n[mentions.\"src/librustdoc/html/static/css/themes\"]\nmessage = \"Some changes occurred in HTML/CSS themes.\"\ncc = [\"@GuillaumeGomez\"]\n\n[mentions.\"tests/rustdoc-gui/\"]\nmessage = \"Some changes occurred in GUI tests.\"\ncc = [\"@GuillaumeGomez\"]\n\n[mentions.\"src/librustdoc/html/static/css/themes/ayu.css\"]\nmessage = \"A change occurred in the Ayu theme.\"\ncc = [\"@Cldfire\"]\n\n[mentions.\"src/rustdoc-json-types\"]\nmessage = \"\"\"\nrustdoc-json-types is a **public** (although nightly-only) API. \\\nIf possible, consider changing `src/librustdoc/json/conversions.rs`; \\\notherwise, make sure you bump the `FORMAT_VERSION` constant.\n\"\"\"\ncc = [\n    \"@CraftSpider\",\n    \"@aDotInTheVoid\",\n    \"@Enselic\",\n    \"@obi1kenobi\",\n]\n\n[mentions.\"src/tools/cargo\"]\ncc = [\"@ehuss\"]\n\n[mentions.\"src/tools/clippy\"]\ncc = [\"@rust-lang/clippy\"]\n\n[mentions.\"src/tools/miri\"]\nmessage = \"The Miri subtree was changed\"\ncc = [\"@rust-lang/miri\"]\n\n[mentions.\"src/tools/rust-analyzer\"]\ncc = [\"@rust-lang/rust-analyzer\"]\n\n[mentions.\"src/tools/rustfmt\"]\ncc = [\"@rust-lang/rustfmt\"]\n\n[mentions.\"compiler/rustc_middle/src/mir/syntax.rs\"]\nmessage = \"This PR changes MIR\"\ncc = [\"@oli-obk\", \"@RalfJung\", \"@JakobDegen\", \"@davidtwco\", \"@celinval\", \"@vakaras\"]\n\n[mentions.\"compiler/rustc_error_messages\"]\nmessage = \"`rustc_error_messages` was changed\"\ncc = [\"@davidtwco\", \"@compiler-errors\", \"@JohnTitor\", \"@TaKO8Ki\"]\n\n[mentions.\"compiler/rustc_errors/src/translation.rs\"]\nmessage = \"`rustc_errors::translation` was changed\"\ncc = [\"@davidtwco\", \"@compiler-errors\", \"@JohnTitor\", \"@TaKO8Ki\"]\n\n[mentions.\"compiler/rustc_macros/src/diagnostics\"]\nmessage = \"`rustc_macros::diagnostics` was changed\"\ncc = [\"@davidtwco\", \"@compiler-errors\", \"@JohnTitor\", \"@TaKO8Ki\"]\n\n[mentions.\"compiler/rustc_smir\"]\nmessage = \"This PR changes Stable MIR\"\ncc = [\"@oli-obk\", \"@celinval\", \"@spastorino\"]\n\n[mentions.\"compiler/rustc_target/src/spec\"]\nmessage = \"\"\"\nThese commits modify **compiler targets**.\n(See the [Target Tier Policy](https://doc.rust-lang.org/nightly/rustc/target-tier-policy.html).)\n\"\"\"\n\n[mentions.\"src/doc/style-guide\"]\ncc = [\"@rust-lang/style\"]\n\n[mentions.\"Cargo.lock\"]\nmessage = \"\"\"\nThese commits modify the `Cargo.lock` file. Unintentional changes to `Cargo.lock` can be introduced when switching branches and rebasing PRs.\n\nIf this was unintentional then you should revert the changes before this PR is merged.\nOtherwise, you can ignore this comment.\n\"\"\"\n\n[mentions.\"src/tools/x\"]\nmessage = \"`src/tools/x` was changed. Bump version of Cargo.toml in `src/tools/x` so tidy will suggest installing the new version.\"\n\n[mentions.\"src/bootstrap/defaults/config.compiler.toml\"]\nmessage = \"This PR changes src/bootstrap/defaults/config.compiler.toml. If appropriate, please also update `config.codegen.toml` so the defaults are in sync.\"\n[mentions.\"src/bootstrap/defaults/config.codegen.toml\"]\nmessage = \"This PR changes src/bootstrap/defaults/config.codegen.toml. If appropriate, please also update `config.compiler.toml` so the defaults are in sync.\"\n\n[mentions.\"src/bootstrap/llvm.rs\"]\nmessage = \"This PR changes how LLVM is built. Consider updating src/bootstrap/download-ci-llvm-stamp.\"\n\n[mentions.\"tests/ui/deriving/deriving-all-codegen.stdout\"]\nmessage = \"Changes to the code generated for builtin derived traits.\"\ncc = [\"@nnethercote\"]\n\n[mentions.\"tests/ui/stats/hir-stats.stderr\"]\nmessage = \"Changes to the size of AST and/or HIR nodes.\"\ncc = [\"@nnethercote\"]\n\n[assign]\nwarn_non_default_branch = true\ncontributing_url = \"https://rustc-dev-guide.rust-lang.org/getting-started.html\"\n\n[assign.adhoc_groups]\ncompiler-team = [\n    \"@cjgillot\",\n    \"@petrochenkov\",\n    \"@davidtwco\",\n    \"@oli-obk\",\n    \"@wesleywiser\",\n]\ncompiler-team-contributors = [\n    \"@compiler-errors\",\n    \"@eholk\",\n    \"@jackh726\",\n    \"@TaKO8Ki\",\n    \"@WaffleLapkin\",\n    \"@b-naber\",\n    \"@fee1-dead\",\n]\ncompiler = [\n    \"compiler-team\",\n    \"compiler-team-contributors\",\n]\nlibs = [\n    \"@cuviper\",\n    \"@joshtriplett\",\n    \"@Mark-Simulacrum\",\n    \"@m-ou-se\",\n    \"@thomcc\",\n]\nbootstrap = [\n    \"@Mark-Simulacrum\",\n    \"@albertlarsan68\",\n    \"@ozkanonur\",\n    \"@clubby789\",\n]\ninfra-ci = [\n    \"@Mark-Simulacrum\",\n    \"@pietroalbini\",\n]\nrustdoc = [\n    \"@jsha\",\n    \"@GuillaumeGomez\",\n    \"@notriddle\",\n]\ndocs = [\n    \"@ehuss\",\n    \"@GuillaumeGomez\",\n    \"@JohnTitor\",\n]\nquery-system = [\n    \"@cjgillot\",\n]\nincremental = [\n    \"@michaelwoerister\",\n    \"@wesleywiser\",\n]\ndiagnostics = [\n    \"@compiler-errors\",\n    \"@davidtwco\",\n    \"@oli-obk\",\n    \"@TaKO8Ki\",\n]\nparser = [\n    \"@compiler-errors\",\n    \"@davidtwco\",\n    \"@nnethercote\",\n    \"@petrochenkov\",\n]\nlexer = [\n    \"@nnethercote\",\n    \"@petrochenkov\",\n]\nmir = [\n    \"@davidtwco\",\n    \"@oli-obk\",\n]\nmir-opt = [\n    \"@oli-obk\",\n    \"@wesleywiser\",\n]\ntypes = [\n    \"@compiler-errors\",\n    \"@jackh726\",\n    \"@lcnr\",\n    \"@oli-obk\",\n    \"@spastorino\",\n    \"@BoxyUwU\",\n]\nborrowck = [\n    \"@davidtwco\",\n    \"@pnkfelix\",\n]\nast_lowering = [\n    \"@compiler-errors\",\n    \"@spastorino\",\n]\nfallback = [\n    \"@Mark-Simulacrum\"\n]\nstyle-team = [\n    \"@calebcartwright\",\n    \"@compiler-errors\",\n    \"@joshtriplett\",\n    \"@yaahc\",\n]\n\n[assign.owners]\n\"/.github/workflows\" =                       [\"infra-ci\"]\n\"/Cargo.lock\" =                              [\"@Mark-Simulacrum\"]\n\"/Cargo.toml\" =                              [\"@Mark-Simulacrum\"]\n\"/compiler\" =                                [\"compiler\"]\n\"/compiler/rustc_ast\" =                      [\"compiler\", \"parser\"]\n\"/compiler/rustc_ast_lowering\" =             [\"compiler\", \"ast_lowering\"]\n\"/compiler/rustc_hir_analysis\" =             [\"compiler\", \"types\"]\n\"/compiler/rustc_lexer\" =                    [\"compiler\", \"lexer\"]\n\"/compiler/rustc_llvm\" =                     [\"@cuviper\"]\n\"/compiler/rustc_middle/src/mir\" =           [\"compiler\", \"mir\"]\n\"/compiler/rustc_middle/src/traits\" =        [\"compiler\", \"types\"]\n\"/compiler/rustc_middle/src/ty\" =            [\"compiler\", \"types\"]\n\"/compiler/rustc_const_eval/src/interpret\" = [\"compiler\", \"mir\"]\n\"/compiler/rustc_const_eval/src/transform\" = [\"compiler\", \"mir-opt\"]\n\"/compiler/rustc_mir_build/src/build\" =      [\"compiler\", \"mir\"]\n\"/compiler/rustc_parse\" =                    [\"compiler\", \"parser\"]\n\"/compiler/rustc_parse/src/lexer\" =          [\"compiler\", \"lexer\"]\n\"/compiler/rustc_query_impl\" =               [\"compiler\", \"query-system\"]\n\"/compiler/rustc_query_system\" =             [\"compiler\", \"query-system\"]\n\"/compiler/rustc_trait_selection\" =          [\"compiler\", \"types\"]\n\"/compiler/rustc_traits\" =                   [\"compiler\", \"types\"]\n\"/compiler/rustc_type_ir\" =                  [\"compiler\", \"types\"]\n\"/library/alloc\" =                           [\"libs\"]\n\"/library/core\" =                            [\"libs\", \"@scottmcm\"]\n\"/library/panic_abort\" =                     [\"libs\"]\n\"/library/panic_unwind\" =                    [\"libs\"]\n\"/library/proc_macro\" =                      [\"@petrochenkov\"]\n\"/library/std\" =                             [\"libs\"]\n\"/library/std/src/sys/windows\" =             [\"@ChrisDenton\", \"@thomcc\"]\n\"/library/stdarch\" =                         [\"libs\"]\n\"/library/test\" =                            [\"libs\"]\n\"/src/bootstrap\" =                           [\"bootstrap\"]\n\"/src/ci\" =                                  [\"infra-ci\"]\n\"/src/doc\" =                                 [\"docs\"]\n\"/src/doc/book\" =                            [\"@ehuss\"]\n\"/src/doc/edition-guide\" =                   [\"@ehuss\"]\n\"/src/doc/embedded-book\" =                   [\"@ehuss\"]\n\"/src/doc/nomicon\" =                         [\"@ehuss\"]\n\"/src/doc/reference\" =                       [\"@ehuss\"]\n\"/src/doc/rust-by-example\" =                 [\"@ehuss\"]\n\"/src/doc/rustc-dev-guide\" =                 [\"@ehuss\"]\n\"/src/doc/rustdoc\" =                         [\"rustdoc\"]\n\"/src/doc/style-guide\" =                     [\"style-team\"]\n\"/src/etc\" =                                 [\"@Mark-Simulacrum\"]\n\"/src/librustdoc\" =                          [\"rustdoc\"]\n\"/src/llvm-project\" =                        [\"@cuviper\"]\n\"/src/rustdoc-json-types\" =                  [\"rustdoc\"]\n\"/src/stage0.json\" =                         [\"bootstrap\"]\n\"/tests/ui\" =                                [\"compiler\"]\n\"/src/tools/cargo\" =                         [\"@ehuss\", \"@joshtriplett\"]\n\"/src/tools/compiletest\" =                   [\"bootstrap\", \"@wesleywiser\", \"@oli-obk\", \"@compiler-errors\"]\n\"/src/tools/linkchecker\" =                   [\"@ehuss\"]\n\"/src/tools/rust-installer\" =                [\"bootstrap\"]\n\"/src/tools/rustbook\" =                      [\"@ehuss\"]\n\"/src/tools/rustdoc\" =                       [\"rustdoc\"]\n\"/src/tools/rustdoc-js\" =                    [\"rustdoc\"]\n\"/src/tools/rustdoc-themes\" =                [\"rustdoc\"]\n\"/src/tools/tidy\" =                          [\"bootstrap\"]\n\"/src/tools/x\" =                             [\"bootstrap\"]\n\"/src/tools/rustdoc-gui-test\" =              [\"bootstrap\", \"@ozkanonur\"]\n"
        },
        {
          "name": "x",
          "type": "blob",
          "size": 1.1552734375,
          "content": "#!/bin/sh\n\n# Modern Linux and macOS systems commonly only have a thing called `python3` and\n# not `python`, while Windows commonly does not have `python3`, so we cannot\n# directly use python in the x.py shebang and have it consistently work. Instead we\n# have a shell script to look for a python to run x.py.\n\nset -eu\n\n# syntax check\nsh -n $0\n\nrealpath() {\n    if [ -d \"$1\" ]; then\n        CDPATH='' command cd \"$1\" && pwd -P\n    else\n        echo \"$(realpath \"$(dirname \"$1\")\")/$(basename \"$1\")\"\n    fi\n}\n\nxpy=$(dirname \"$(realpath \"$0\")\")/x.py\n\n# On Windows, `py -3` sometimes works. We need to try it first because `python3`\n# sometimes tries to launch the app store on Windows.\nfor SEARCH_PYTHON in py python3 python python2; do\n    if python=$(command -v $SEARCH_PYTHON) && [ -x \"$python\" ]; then\n        if [ $SEARCH_PYTHON = py ]; then\n            extra_arg=\"-3\"\n        else\n            extra_arg=\"\"\n        fi\n        exec \"$python\" $extra_arg \"$xpy\" \"$@\"\n    fi\ndone\n\npython=$(bash -c \"compgen -c python\" | grep '^python[2-3]\\.[0-9]\\+$' | head -n1)\nif ! [ \"$python\" = \"\" ]; then\n    exec \"$python\" \"$xpy\" \"$@\"\nfi\n\necho \"$0: error: did not find python installed\" >&2\nexit 1\n"
        },
        {
          "name": "x.ps1",
          "type": "blob",
          "size": 2.138671875,
          "content": "#!/usr/bin/env pwsh\n\n# See ./x for why these scripts exist.\n\n$ErrorActionPreference = \"Stop\"\n\n# syntax check\nGet-Command -syntax ${PSCommandPath} >$null\n\n$xpy = Join-Path $PSScriptRoot x.py\n# Start-Process for some reason splits arguments on spaces. (Isn't powershell supposed to be simpler than bash?)\n# Double-quote all the arguments so it doesn't do that.\n$xpy_args = @(\"\"\"$xpy\"\"\")\nforeach ($arg in $args) {\n    $xpy_args += \"\"\"$arg\"\"\"\n}\n\nfunction Get-Application($app) {\n    $cmd = Get-Command $app -ErrorAction SilentlyContinue -CommandType Application | Select-Object -First 1\n    if ($cmd.source -match '.*AppData\\\\Local\\\\Microsoft\\\\WindowsApps\\\\.*exe') {\n        # Windows for some reason puts a `python3.exe` executable in PATH that just opens the windows store.\n        # Ignore it.\n        return $false\n    }\n    return $cmd\n}\n\nfunction Invoke-Application($application, $arguments) {\n    $process = Start-Process -NoNewWindow -PassThru $application $arguments\n    # WORKAROUND: Caching the handle is necessary to make ExitCode work.\n    # See https://stackoverflow.com/a/23797762\n    $handle = $process.Handle\n    $process.WaitForExit()\n    if ($null -eq $process.ExitCode) {\n        Write-Error \"Unable to read the exit code\"\n        Exit 1\n    }\n    Exit $process.ExitCode\n}\n\nforeach ($python in \"py\", \"python3\", \"python\", \"python2\") {\n    # NOTE: this only tests that the command exists in PATH, not that it's actually\n    # executable. The latter is not possible in a portable way, see\n    # https://github.com/PowerShell/PowerShell/issues/12625.\n    if (Get-Application $python) {\n        if ($python -eq \"py\") {\n            # Use python3, not python2\n            $xpy_args = @(\"-3\") + $xpy_args\n        }\n        Invoke-Application $python $xpy_args\n    }\n}\n\n$found = (Get-Application \"python*\" | Where-Object {$_.name -match '^python[2-3]\\.[0-9]+(\\.exe)?$'})\nif (($null -ne $found) -and ($found.Length -ge 1)) {\n    $python = $found[0]\n    Invoke-Application $python $xpy_args\n}\n\n$msg = \"${PSCommandPath}: error: did not find python installed`n\"\n$msg += \"help: consider installing it from https://www.python.org/downloads/\"\nWrite-Error $msg -Category NotInstalled\nExit 1\n"
        },
        {
          "name": "x.py",
          "type": "blob",
          "size": 1.923828125,
          "content": "#!/usr/bin/env python3\n# Some systems don't have `python3` in their PATH. This isn't supported by x.py directly;\n# they should use `x` or `x.ps1` instead.\n\n# This file is only a \"symlink\" to bootstrap.py, all logic should go there.\n\n# Parts of `bootstrap.py` use the `multiprocessing` module, so this entry point\n# must use the normal `if __name__ == '__main__':` convention to avoid problems.\nif __name__ == '__main__':\n    import os\n    import sys\n    import warnings\n    from inspect import cleandoc\n\n    major = sys.version_info.major\n    minor = sys.version_info.minor\n\n    # If this is python2, check if python3 is available and re-execute with that\n    # interpreter. Only python3 allows downloading CI LLVM.\n    #\n    # This matters if someone's system `python` is python2.\n    if major < 3:\n        try:\n            os.execvp(\"py\", [\"py\", \"-3\"] + sys.argv)\n        except OSError:\n            try:\n                os.execvp(\"python3\", [\"python3\"] + sys.argv)\n            except OSError:\n                # Python 3 isn't available, fall back to python 2\n                pass\n\n    # soft deprecation of old python versions\n    skip_check = os.environ.get(\"RUST_IGNORE_OLD_PYTHON\") == \"1\"\n    if not skip_check and (major < 3 or (major == 3 and minor < 6)):\n        msg = cleandoc(\"\"\"\n            Using python {}.{} but >= 3.6 is recommended. Your python version\n            should continue to work for the near future, but this will\n            eventually change. If python >= 3.6 is not available on your system,\n            please file an issue to help us understand timelines.\n\n            This message can be suppressed by setting `RUST_IGNORE_OLD_PYTHON=1`\n        \"\"\".format(major, minor))\n        warnings.warn(msg)\n\n    rust_dir = os.path.dirname(os.path.abspath(__file__))\n    # For the import below, have Python search in src/bootstrap first.\n    sys.path.insert(0, os.path.join(rust_dir, \"src\", \"bootstrap\"))\n\n    import bootstrap\n    bootstrap.main()\n"
        }
      ]
    }
  ]
}