{
  "metadata": {
    "timestamp": 1736709402103,
    "page": 131,
    "hasNextPage": false,
    "endCursor": "Y3Vyc29yOjE0MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "image-rs/image",
      "stars": 5089,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.0390625,
          "content": "*.jpg binary -delta\n*.png binary -delta\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.173828125,
          "content": ".DS_Store\n*~\n*#\n*.o\n*.so\n*.swp\n*.dylib\n*.dSYM\n*.dll\n*.rlib\n*.dummy\n*.exe\n*-test\n/bin/main\n/bin/test-internal\n/bin/test-external\n/doc/\n/target\n/build/\n/.rust/\nrusti.sh\nCargo.lock\n"
        },
        {
          "name": "CHANGES.md",
          "type": "blob",
          "size": 29.78125,
          "content": "# Release Notes\n\n## Known issues\n- Many decoders will panic on malicious input.\n- The color space information of pixels is not clearly communicated.\n\n## Changes\n\n### Version 0.25.5\n\nFeatures:\n - Added support for decoding 10-bit and 12-bit AVIF\n - Initial, opt-in serde support for an enum. This may be extended to other types in the future.\n\nBug fixes:\n - [Multiple bug fixes in AVIF decoding](https://github.com/image-rs/image/pull/2373)\n - The `rayon` feature now correctly toggles the use of `rayon` when encoding AVIF. (Previously it would be either always on or always off depending on the version of the `ravif` crate in your dependency tree.)\n - \"jfif\" file extension for JPEG images is now recognized\n\n### Version 0.25.4\n\nFeatures:\n - Much faster decoding of lossless WebP due to a variety of optimizations. Our benchmarks show 2x to 2.5x improvement.\n - Added support for orientation metadata, so that e.g. smartphone camera images could be displayed correctly:\n   - Added `ImageDecoder::orientation()` and implemented orientation metadata extraction for JPEG, WebP and TIFF formats\n   - Added `DynamicImage::apply_orientation()` to apply the orientation to an image\n - Added support for extracting Exif metadata from images via `ImageDecoder::exif_metadata()`, and implemented it for JPEG and WebP formats\n - Added `ImageEncoder::set_icc_profile()` and implemented it for WebP format. Pull requests with implementations for other formats are welcome.\n - Added `DynamicImage::fast_blur()` for a linear-time approximation of Gaussian blur, which is much faster at larger blur radii\n\nBug fixes:\n - Fixed some APNG images being decoded incorrectly\n - Fixed the iterator over animated WebP frames to return `None` instead of an error when the end of the animation is reached\n\n### Version 0.25.3\n\nYanked! This version accidentally missed a commit that should have been\nincluded with the release. The `Orientation` struct should be in the\nappropriate module instead of the top-level. This release won't be supported.\n\n### Version 0.25.2\n\nFeatures:\n- Added the HDR encoder to supported formats in generic write methods with the\n  `hdr` feature enabled. Supports 32-bit float RGB color only, for now.\n- When cloning `ImageBuffer`, `DynamicImage` and `Frame` the existing buffer\n  will now be reused if possible.\n- Added `image::ImageReader` as an alias.\n- Implement `ImageEncoder` for `HdrEncoder`.\n\nStructural changes\n- Switch from `byteorder` to `byteorder-lite`, consolidating some casting\n  unsafety to `bytemuck`.\n- Many methods on `DynamicImage` and buffers gained `#[must_use]` indications.\n\nBug fixes:\n- Removed test data included in the crate archive.\n- The WebP animation decoder stops when reaching the indicate frame count.\n- Fixed bugs in the `bmp` decoder.\n- Format support gated on the `exr` feature now compiles in isolation.\n\n### Version 0.25.1\n\nBug fixes:\n- Fixed corrupt JPEG output when attempting to encode images containing an alpha\n  channel.\n- Only accept \".ff\" file extension for farbfeld images.\n- Correct farbfeld feature flag for `ImageFormat::{reading_enabled, writing_enabled}`.\n- Disable strict mode for JPEG decoder.\n- Add nasm feature to optionally enable faster AVIF encoding.\n\n\n### Version 0.25.0\n\nBreaking changes:\n- Added `BufRead` + `Seek` bound on many decoders.\n- Use `ExtendedColorType` instead of `ColorType` when encoding.\n- Removed `ImageOutputFormat`, `GenericImageView::bounds`, and several other\n  deprecated items.\n- Removed incremental decoding support and changed `ImageDecoder` so the trait\n  is object safe.\n- Pixel types are now `repr(transparent)` rather than `repr(C)`.\n- Made color_quant dependency optional.\n- Renamed some feature flags.\n\nStructural changes:\n- Increased MSRV to 1.67.1\n\nCodec changes:\n- Switched to image-webp for WebP encoding.\n- Switched to zune-jpeg for JPEG decoding.\n- Made the HDR decoder produce f32 images.\n- Removed DXT encoding and decoding support.\n\n### Version 0.24.9\n\nStructural changes:\n- Relicense to MIT OR Apache-2.0\n- Increase MSRV 1.63.0\n\nNew features:\n- Support limits in PNG animation decoding.\n- Added offsets to SubImage to compensate for the now-deprecated bounds call\n  from GenericImageView.\n\nBug fixes:\n- Correct limit tests for TIFF.\n- Avoid overflow in gif::Decoder::buffer_size.\n- Return error instead of using asssertion for Avif decoder unsupported or\n  invalid bit depth.\n\n### Version 0.24.8\n\nNew features:\n- Added pure-Rust lossless WebP encoding.\n- Added `DynamicImage::new` method.\n- Added `PngDecoder::gamma_value` method.\n- Added `ImageFormat::{reading_enabled, writing_enabled, all}`.\n- TGA encoder now supports RLE encoding.\n- Add rayon parallel iterators behind an optional `rayon` feature.\n- Support CMYK TIFF images.\n- Implement `From<DynamicImage>` for all image types.\n\nBug fixes:\n- Fix decoding pngs with invalid text chunks.\n- Handle non-fatal error dav1d::Error::Again.\n- Do not round floats in interpolate.\n- PNM decoder now scales samples according to specified maximum.\n- Fix wrong implementation of unsharpen filter.\n- Fix `GifDecoder::with_limits` to raise an error when limits are exceeded.\n\n### Version 0.24.7\n\nNew features:\n- Added `{ImageBuffer, DynamicImage}::write_with_encoder` to simplify writing\n  images with custom settings.\n- Expose ICC profiles stored in tiff and webp files.\n- Added option to set the background color of animated webp images.\n- New methods for sampling and interpolation of `GenericImageView`s\n\nBug fixes:\n- Fix panic on empty dxt.\n- Fix several panics in webp decoder.\n- Allow unknown chunks at the end of webp files.\n\n### Version 0.24.6\n\n- Add support for QOI.\n- ImageDecoders now expose ICC profiles on supported formats.\n- Add support for BMPs without a file header.\n- Improved AVIF encoder.\n- WebP decoding fixes.\n\n### Version 0.24.5\n\nStructural changes:\n- Increased the minimum supported Rust version (MSRV) to 1.61.\n- Increased the version requirement for the `tiff` crate to 0.8.0.\n- Increased the version requirement for the `jpeg` crate to 0.3.0.\n\nBug fixes:\n- The `as_rgb32f` function of `DynamicImage` is now correctly documented.\n- Fixed a crash when decoding ICO images. Added a regression test.\n- Fixed a panic when transforming webp images. Added a regression test.\n- Added a check to prevent integer overflow when calculating file size for BMP\n  images. The missing check could panic in debug mode or else set an incorrect\n  file size in release mode.\n- Upgraded the PNG image encoder to use the newer `PngEncoder::write_image`\n  instead of the deprecated `PngEncoder::encode` which did not account for byte\n  order and could result in images with incorrect colors.\n- Fixed `InsufficientMemory` error when trying to decode a PNG image.\n- Fix warnings and CI issues.\n- Typos and links in the documentation have been corrected.\n\nPerformance:\n- Added check for dynamic image dimensions before resizing. This improves\n  performance in cases where the image does not need to be resized or has\n  already been resized.\n\n### Version 0.24.4\n\nNew Features:\n- Encoding for `webp` is now available with the native library. This needs to\n  be activate explicitly with the `web-encoder` feature.\n- `exr` decoding has gained basic limit support.\n\nBug fixes:\n- The `Iterator::size_hint` implementation of pixel iterators has been fixed to\n  return the current length indicated by its `ExactSizeIterator` hint.\n- Typos and bad references in the documentation have been removed.\n\nPerformance:\n- `ImageBuffer::get_pixel{,_mut}` is now marked inline.\n- `resize` now short-circuits when image dimensions are unchanged.\n\n### Version 0.24.3\n\nNew Features:\n- `TiffDecoder` now supports setting resource limits.\n\nBug fixes:\n- Fix compile issues on little endian systems.\n- Various panics discovered by fuzzing.\n\n### Version 0.24.2\n\nStructural changes:\n- CI now runs `cargo-deny`, checking dependent crates to an OSS license list\n  and against RUSTSEC advisories.\n\nNew Features:\n- The WebP decoder recognizes and decodes images with `VP8X` header.\n- The DDS decoder recognizes and decodes images with `DX10` headers.\n\nBug fixes:\n- Calling `DynamicImage`/`ImageBuffer`'s methods `write_to` and `save` will now\n  work properly even if the backing container is larger than the image layout\n  requires. Only the relevant slice of pixel data is passed to the encoder.\n- Fixed a OOM-panic caused by malformed images in the `gif` decoder.\n\n### Version 0.24.1\n\nBug Fixes:\n- ImageBuffer::get_pixel_checked would sometimes return the incorrect pixel.\n- PNG encoding would sometimes not recognize unsupported color.\n\n### Version 0.24.0\n\nBreaking changes\n\nStructural changes:\n- Minimum Rust version is now `1.56` and may change in minor versions until\n  further notice. It is now tracked in the library's `Cargo.toml`, instead, by\n  the standard `[package.rust-version]` field. Note: this applies _to the\n  library itself_. You may need different version resolutions for dependencies\n  when using a non-stable version of Rust.\n- The `math::utils::{nq, utils}` modules have been removed. These are better\n  served through the `color_quant` crate and the standard library respectively.\n- All codecs are now available through `image::codecs`, no longer top-level.\n- `ExtendedColorType` and `DynamicImage` have been made `#[non_exhaustive]`,\n  providing more methods instead of exhaustive matching.\n- Reading images through the generic `io::Reader`, as well as generic\n  convenience interfaces, now requires the underlying reader to be `BufRead +\n  Seek`. This allows more efficient support more formats. Similarly, writing\n  now requires writers to be `Write + Seek`.\n- The `Bgra*` variants of buffers, which were only half-supported, have been\n  removed. The owning buffer types `ImageBuffer` and `DynamicImage`\n  fundamentally already make a choice in supported pixel representations. This\n  allows for more consistent internal behavior. Callers are expected to convert\n  formats when using those buffers, which they are required to do in any case\n  already, and which is routinely performed by decoders.\n\nTrait reworks:\n- The `Pixel` trait is no longer implemented quite as liberally for structs\n  defined in the crate. Instead, it is now restricted to a set of known channel\n  which ensures accuracy in computations involving those channels.\n- The `ImageDecoderExt` trait has been renamed to `ImageDecoderRect`, according\n  to its actual functionality.\n- The `Pixel` trait and its `Subpixel` field no longer require (or provide) a\n  `'static` lifetime bound.\n- The `Pixel` trait no longer requires specifying an associated, constant\n  `ColorType`. This was of little relevance to computation but made it much\n  harder to implement and extend correctly. Instead, the _private_\n  `PixelWithColorType` extension is added for interfaces that require a\n  properly known variant.\n- Reworked how `SubImage` interacts with the `GenericImage` trait. It is now a\n  default implementation. Note that `SubImage` now has _inherent_ methods that\n  avoid double-indirection, the trait's method will no longer avoid this.\n- The `Primitive` trait now requires implementations to provide a minimum and\n  maximum logical bound for the purpose of converting to other primitive\n  representations.\n\nAdditions\n\nImage formats:\n- Reading lossless WebP is now supported.\n- The OpenEXR format is now supported.\n- The `jpeg` decoder has been upgraded to Lossless JPEG.\n- The `AvifEncoder` now correctly handles alpha-less images. Some additional\n  color formats are converted to RGBA as well.\n- The `Bmp` codec now decodes more valid images. It can decode a raw image\n  without performing the palette mapping. It provides a method to access the\n  palette. The encoder provides the inverse capabilities.\n- `Tiff` is now an output format.\n\nBuffers and Operations:\n- The channel / primitive type `f32` is now supported. Currently only the\n  OpenEXR codec makes full use of it but this is expected to change.\n- `ImageBuffer::{get_pixel_checked, get_pixel_mut_checked}` provide panic-free\n  access to pixels and channels by returning `Option<&P>` and `Option<&mut P>`.\n- `ImageBuffer::write_to` has been added, encoding the buffer to a writer. This\n  method already existed on `DynamicImage`.\n- `DynamicImage` now implements `From<_>` for all supported buffer types.\n- `DynamicImage` now implements `Default`, an empty `Rgba8` image.\n- `imageops::overlay` now takes coordinates as `i64`.\n\nLimits:\n- Added `Limits` and `LimitSupport`, utilized in `io::Reader`. These can be\n  configured for rudimentary protection against resource exhaustion (images\n  pretending to require a very large buffer). These types are not yet\n  exhaustive by design, and more and stricter limits may be added in the\n  future.\n- Encoders that do provide inherent support for limits, or reserve a\n  significant amount of internal memory, are urged to implement the\n  `set_limits` extension to `ImageDecoder`. Some strict limit are opt-in, which\n  may cause decoding to fail if not supported.\n\nMiscellaneous:\n- `PNMSubtype` has been renamed to `PnmSubtype`, by Rust's naming scheme.\n- Several incorrectly capitalized `PNM*` aliases have been removed.\n- Several `enum` types that had previously used a hidden variant now use the\n  official `#[non_exhaustive]` attribute instead.\n\n### Version 0.23.14\n\n- Unified gif blending in different decode methods, fixing out-of-bounds checks\n  in a number of weirdly positioned frames.\n- Hardened TGA decoder against a number of malicious inputs.\n- Fix forward incompatible usage of the panic macro.\n- Fix load_rect for gif reaching `unreachable!()` code.\n\n- Added `ExtendedColorType::A8`.\n- Allow TGA to load alpha-only images.\n- Optimized load_rect to avoid unnecessary seeks.\n\n### Version 0.23.13\n\n- Fix an inconsistency in supported formats of different methods for encoding\n  an image.\n- Fix `thumbnail` choosing an empty image. It now always prefer non-empty image\n  dimensions.\n- Fix integer overflow in calculating requires bytes for decoded image buffers\n  for farbfeld, hdr, and pnm decoders. These will now error early.\n- Fix a panic decoding certain `jpeg` image without frames or meta data.\n- Optimized the `jpeg` encoder.\n- Optimized `GenericImage::copy_from` default impl in various cases.\n\n- Add `avif` decoders. You must enable it explicitly and it is not covered by\n  our usual MSRV policy of Rust 1.34. Instead, only latest stable is supported.\n- Add `ImageFormat::{can_read, can_write}`\n- Add `Frame::buffer_mut`\n- Add speed and quality options on `avif` encoder.\n- Add speed parameter to `gif` encoder.\n- Expose control over sequence repeat to the `gif` encoder.\n- Add `{contrast,brighten,huerotate}_in_place` functions in imageproc.\n\n- Relax `Default` impl of `ImageBuffer`, removing the bound on the color type.\n- Derive Debug, Hash, PartialEq, Eq for DynamicImage\n\n### Version 0.23.12\n\n- Fix a soundness issue affecting the impls of `Pixel::from_slice_mut`. This\n  would previously reborrow the mutable input reference as a shared one but\n  then proceed to construct the mutable result reference from it. While UB\n  according to Rust's memory model, we're fairly certain that no miscompilation\n  can happen with the LLVM codegen in practice.\n  See 5cbe1e6767d11aff3f14c7ad69a06b04e8d583c7 for more details.\n- Fix `imageops::blur` panicking when `sigma = 0.0`. It now defaults to `1.0`\n  as all negative values.\n- Fix re-exporting `png::{CompressionType, FilterType}` to maintain SemVer\n  compatibility with the `0.23` releases.\n\n- Add `ImageFormat::from_extension`\n- Add copyless DynamicImage to byte slice/vec conversion.\n- Add bit-depth specific `into_` and `to_` DynamicImage conversion methods.\n\n\n### Version 0.23.11\n\n- The `NeuQuant` implementation is now supplied by `color_quant`. Use of the\n  type defined by this library is discouraged.\n- The `jpeg` decoder can now downscale images that are decoded by 1,2,4,8.\n- Optimized the jpeg encoding ~5-15%.\n- Deprecated the `clamp` function. Use `num-traits` instead.\n- The ICO decoder now accepts an empty mask.\n- Fixed an overflow in ICO mask decoding potentially leading to panic.\n- Added `ImageOutputFormat` for `AVIF`\n- Updated `tiff` to `0.6` with lzw performance improvements.\n\n### Version 0.23.10\n\n- Added AVIF encoding capabilities using the `ravif` crate. Please note that\n  the feature targets the latest stable compiler and is not enabled by default.\n- Added `ImageBuffer::as_raw` to inspect the underlying container.\n- Updated `gif` to `0.11` with large performance improvements.\n\n### Version 0.23.9\n\n- Introduced correctly capitalized aliases for some scream case types\n- Introduced `imageops::{vertical_gradient, horizontal_gradient}` for writing\n  simple color gradients into an image.\n- Sped up methods iterating over `Pixels`, `PixelsMut`, etc. by using exact\n  chunks internally. This should auto-vectorize `ImageBuffer::from_pixel`.\n- Adjusted `Clone` impls of iterators to not require a bound on the pixel.\n- Add `Debug` impls for iterators where the pixel's channel implements it.\n- Add comparison impls for `FilterType`\n\n### Version 0.23.8\n\n- `flat::Error` now implements the standard `Error` trait\n- The type parameter of `Map` has been relaxed to `?Sized`\n- Added the `imageops::tile` function that repeats one image across another\n\n### Version 0.23.7\n\n- Iterators over immutable pixels of `ImageBuffer` can now be cloned\n- Added a `tga` encoder\n- Added `ColorMap::lookup`, an optional reversal of the map\n- The `EncodableLayout` trait is now exported\n\n### Version 0.23.6\n\n- Added `png::ApngDecoder`, an adapter decoding the animation in an APNG.\n- Fixed a bug in `jpeg` encoding that would darken output colors.\n- Added a utility constructor `FlatSamples::with_monocolor`.\n- Added `ImageBuffer::as_flat_samples_mut` which is a mutable variant of the\n  existing ffi-helper `ImageBuffer::as_flat_samples`.\n\n### Version 0.23.5\n\n- The `png` encoder now allows configuring compression and filter type. The\n  output is not part of stability guarantees, see its documentation.\n- The `jpeg` encoder now accepts any implementor of `GenericImageView`. This\n  allows images that are only partially present in memory to be encoded.\n- `ImageBuffer` now derives `Hash`, `PartialEq`, `Eq`.\n- The `Pixels`/`PixelsMut` iterator no longer yields out-of-bounds pixels when\n  the underlying buffer is larger than required.\n- The `pbm` decoder correctly decodes ascii data again, fixing a regression\n  where it would use the sample value `1` as white instead of `255`.\n- Fix encoding of RGBA data in `gif` frames.\n- Constructing a `Rows`/`RowsMut` iterator no longer panics when the image has\n  a width or height of `0`.\n\n### Version 0.23.4\n\n- Improved the performance of decoding animated gifs\n- Added `crop_imm` which functions like `crop` but on a shared reference\n- The gif `DisposalMethod::Any` is treated as `Keep`, consistent with browsers\n- Most errors no longer allocate a string, instead implement Display.\n- Add some implementations of `Error::source`\n\n### Version 0.23.3\n\n- Added `ColorType::has_alpha` to facilitate lossless conversion\n- Recognize extended WebP formats for decoding\n- Added decoding and encoding for the `farbfeld` format\n- Export named iterator types created from various `ImageBuffer` methods\n- Error in jpeg encoder for images larger than 65536 pixels, fixes panic\n\n### Version 0.23.2\n\n- The dependency on `jpeg-decoder` now reflects minimum requirements.\n\n### Version 0.23.1\n\n- Fix cmyk_to_rgb (jpeg) causing off by one rounding errors.\n- A number of performance improvements for jpeg (encode and decode), bmp, vp8\n- Added more details to errors for many formats\n\n### Version 0.23.0\n\nThis major release intends to improve the interface with regards to handling of\ncolor format data and errors for both decoding and encoding. This necessitated\nmany breaking changes anyways so it was used to improve the compliance to the\ninterface guidelines such as outstanding renaming.\n\nIt is not yet perfect with regards to color spaces but it was designed mainly\nas an improvement over the current interface with regards to in-memory color\nformats, first. We'll get to color spaces in a later major version.\n\n- Heavily reworked `ColorType`:\n  - This type is now used for denoting formats for which we support operations\n      on buffers in these memory representations. Particularly, all channels in\n      pixel types are assumed to be an integer number of bytes (In terms of the\n      Rust type system, these are `Sized` and one can crate slices of channel\n      values).\n  - An `ExtendedColorType` is used to express more generic color formats for\n      which the library has limited support but can be converted/scaled/mapped\n      into a `ColorType` buffer. This operation might be fallible but, for\n      example, includes sources with 1/2/4-bit components.\n  - Both types are non-exhaustive to add more formats in a minor release.\n  - A work-in-progress (#1085) will further separate the color model from the\n      specific channel instantiation, e.g. both `8-bit RGB` and `16-bit BGR`\n      are instantiations of `RGB` color model.\n- Heavily rework `ImageError`:\n  - The top-level enum type now serves to differentiate cause with multiple\n      opaque representations for the actual error. These are no longer simple\n      Strings but contains useful types. Third-party decoders that have no\n      variant in `ImageFormat` have also been considered.\n  - Support for `Error::source` that can be downcast to an error from a\n      matching version of the underlying decoders. Note that the version is not\n      part of the stable interface guarantees, this should not be relied upon\n      for correctness and only be used as an optimization.\n  - Added image format indications to errors.\n  - The error values produced by decoder will be upgraded incrementally. See\n      something that still produces plain old String messages? Feel free to\n      send a PR.\n- Reworked the `ImageDecoder` trait:\n  - `read_image` takes an output buffer argument instead of allocating all\n      memory on its own.\n  - The return type of `dimensions` now aligns with `GenericImage` sizes.\n  - The `colortype` method was renamed to `color_type` for conformity.\n- The enums `ColorType`, `DynamicImage`, `imageops::FilterType`, `ImageFormat`\n  no longer re-export all of their variants in the top-level of the crate. This\n  removes the growing pollution in the documentation and usage. You can still\n  insert the equivalent statement on your own:\n  `use image::ImageFormat::{self, *};`\n- The result of `encode` operations is now uniformly an `ImageResult<()>`.\n- Removed public converters from some `tiff`, `png`, `gif`, `jpeg` types,\n  mainly such as error conversion. This allows upgrading the dependency across\n  major versions without a major release in `image` itself.\n- On that note, the public interface of `gif` encoder no longer takes a\n  `gif::Frame` but rather deals with `image::Frame` only. If you require to\n  specify the disposal method, transparency, etc. then you may want to wait\n  with upgrading but (see next change).\n- The `gif` encoder now errors on invalid dimensions or unsupported color\n  formats. It would previously silently reinterpret bytes as RGB/RGBA.\n- The capitalization of  `ImageFormat` and other enum variants has been\n  adjusted to adhere to the API guidelines. These variants are now spelled\n  `Gif`, `Png`, etc. The same change has been made to the name of types such as\n  `HDRDecoder`.\n- The `Progress` type has finally received public accessor method. Strange that\n  no one reported them missing.\n- Introduced `PixelDensity` and `PixelDensityUnit` to store DPI information in\n  formats that support encoding this form of meta data (e.g. in `jpeg`).\n\n### Version 0.22.5\n\n- Added `GenericImage::copy_within`, specialized for `ImageBuffer`\n- Fixed decoding of interlaced `gif` files\n- Prepare for future compatibility of array `IntoIterator` in example code\n\n### Version 0.22.4\n\n- Added in-place variants for flip and rotate operations.\n- The bmp encoder now checks if dimensions are valid for the format. It would\n  previously write a subset or panic.\n- Removed deprecated implementations of `Error::description`\n- Added `DynamicImage::into_*` which convert without an additional allocation.\n- The PNG encoder errors on unsupported color types where it had previously\n  silently swapped color channels.\n- Enabled saving images as `gif` with `save_buffer`.\n\n### Version 0.22.3\n\n- Added a new module `io` containing a configurable `Reader`. It can replace\n  the bunch of free functions: `image::{load_*, open, image_dimensions}` while\n  enabling new combinations such as `open` but with format deduced from content\n  instead of file path.\n- Fixed `const_err` lint in the macro expanded implementations of `Pixel`. This\n  can only affect your crate if `image` is used as a path dependency.\n\n### Version 0.22.2\n\n- Undeprecate `unsafe` trait accessors. Further evaluation showed that their\n  deprecation should be delayed until trait `impl` specialization is available.\n- Fixed magic bytes used to detect `tiff` images.\n- Added `DynamicImage::from_decoder`.\n- Fixed a bug in the `PNGReader` that caused an infinite loop.\n- Added `ColorType::{bits_per_pixel, num_components}`.\n- Added `ImageFormat::from_path`, same format deduction as the `open` method.\n- Fixed a panic in the gif decoder.\n- Aligned background color handling of `gif` to web browser implementations.\n- Fixed handling of partial frames in animated `gif`.\n- Removed unused direct `lzw` dependency, an indirect dependency in `tiff`.\n\n### Version 0.22.1\n\n- Fixed build without no features enabled\n\n### Version 0.22\n\n- The required Rust version is now `1.34.2`.\n- Note the website and blog: [image-rs.org][1] and [blog.image-rs.org][2]\n- `PixelMut` now only on `ImageBuffer` and removed from `GenericImage`\n  interface. Prefer iterating manually in the generic case.\n- Replaced an unsafe interface in the hdr decoder with a safe variant.\n- Support loading 2-bit BMP images\n- Add method to save an `ImageBuffer`/`DynamicImage` with specified format\n- Update tiff to `0.3` with a writer\n- Update png to `0.15`, fixes reading of interlaced sub-byte pixels\n- Always use custom struct for `ImageDecoder::Reader`\n- Added `apply_without_alpha` and `map_without_alpha` to `Pixel` trait\n- Pixel information now with associated constants instead of static methods\n- Changed color structs to tuple types with single component. Improves\n  ergonomics of destructuring assignment and construction.\n- Add lifetime parameter on `ImageDecoder` trait.\n- Remove unnecessary `'static` bounds on affine operations\n- Add function to retrieve image dimensions without loading full image\n- Allow different image types in overlay and replace\n- Iterators over rows of `ImageBuffer`, mutable variants\n\n[1]: https://www.image-rs.org\n[2]: https://blog.image-rs.org\n\n### Version 0.21.2\n\n- Fixed a variety of crashes and opaque errors in webp\n- Updated the png limits to be less restrictive\n- Reworked even more `unsafe` operations into safe alternatives\n- Derived Debug on FilterType and Deref on Pixel\n- Removed a restriction on DXT to always require power of two dimensions\n- Change the encoding of RGBA in bmp using bitfields\n- Corrected various urls\n\n### Version 0.21.1\n\n- A fairly important bugfix backport\n- Fixed a potentially memory safety issue in the hdr and tiff decoders, see #885\n- See [the full advisory](docs/2019-04-23-memory-unsafety.md) for an analysis\n- Fixes `ImageBuffer` index calculation for very, very large images\n- Fix some crashes while parsing specific incomplete pnm images\n- Added comprehensive fuzzing for the pam image types\n\n### Version 0.21\n\n- Updated README to use `GenericImageView`\n- Removed outdated version number from CHANGES\n- Compiles now with wasm-unknown-emscripten target\n- Restructured `ImageDecoder` trait\n- Updated README with a more colorful example for the Julia fractal\n- Use Rust 1.24.1 as minimum supported version\n- Support for loading GIF frames one at a time with `animation::Frames`\n- The TGA decoder now recognizes 32 bpp as RGBA(8)\n- Fixed `to_bgra` document comment\n- Added release test script\n- Removed unsafe code blocks several places\n- Fixed overlay overflow bug issues with documented proofs\n\n### Version 0.20\n\n- Clippy lint pass\n- Updated num-rational dependency\n- Added BGRA and BGR color types\n- Improved performance of image resizing\n- Improved PBM decoding\n- PNM P4 decoding now returns bits instead of bytes\n- Fixed move of overlapping buffers in BMP decoder\n- Fixed some document comments\n- `GenericImage` and `GenericImageView` is now object-safe\n- Moved TIFF code to its own library\n- Fixed README examples\n- Fixed ordering of interpolated parameters in TIFF decode error string\n- Thumbnail now handles upscaling\n- GIF encoding for multiple frames\n- Improved subimages API\n- Cargo fmt fixes\n\n### Version 0.19\n\n- Fixed panic when blending with alpha zero.\n- Made `save` consistent.\n- Consistent size calculation.\n- Fixed bug in `apply_with_alpha`.\n- Implemented `TGADecoder::read_scanline`.\n- Use deprecated attribute for `pixels_mut`.\n- Fixed bug in JPEG grayscale encoding.\n- Fixed multi image TIFF.\n- PNM encoder.\n- Added `#[derive(Hash)]` for `ColorType`.\n- Use `num-derive` for `#[derive(FromPrimitive)]`.\n- Added `into_frames` implementation for GIF.\n- Made rayon an optional dependency.\n- Fixed issue where resizing image did not give exact width/height.\n- Improved downscale.\n- Added a way to expose options when saving files.\n- Fixed some compiler warnings.\n- Switched to lzw crate instead of using built-in version.\n- Added `ExactSizeIterator` implementations to buffer structs.\n- Added `resize_to_fill` method.\n- DXT encoding support.\n- Applied clippy suggestions.\n\n### Version 0.4\n - Various improvements.\n - Additional supported image formats (BMP and ICO).\n - GIF and PNG codec moved into separate crates.\n\n### Version 0.3\n - Replace `std::old_io` with `std::io`.\n\n### Version 0.2\n - Support for interlaced PNG images.\n - Writing support for GIF images (full color and paletted).\n - Color quantizer that converts 32bit images to paletted including the alpha channel.\n - Initial support for reading TGA images.\n - Reading support for TIFF images (packbits and FAX compression not supported).\n - Various bug fixes and improvements.\n\n### Version 0.1\n- Initial release\n- Basic reading support for png, jpeg, gif, ppm and webp.\n- Basic writing support for png and jpeg.\n- A collection of basic imaging processing function like `blur` or `invert`\n"
        },
        {
          "name": "Cargo.toml",
          "type": "blob",
          "size": 3.220703125,
          "content": "[package]\nname = \"image\"\nversion = \"0.25.5\"\nedition = \"2021\"\nresolver = \"2\"\n\n# note: when changed, also update test runner in `.github/workflows/rust.yml`\nrust-version = \"1.70.0\"\n\nlicense = \"MIT OR Apache-2.0\"\ndescription = \"Imaging library. Provides basic image processing and encoders/decoders for common image formats.\"\nauthors = [\"The image-rs Developers\"]\nreadme = \"README.md\"\n\n# crates.io metadata\ndocumentation = \"https://docs.rs/image\"\nrepository = \"https://github.com/image-rs/image\"\nhomepage = \"https://github.com/image-rs/image\"\ncategories = [\"multimedia::images\", \"multimedia::encoding\", \"encoding\"]\n\n# Crate build related\nexclude = [\"src/png/testdata/*\", \"examples/*\", \"tests/*\"]\n\ninclude = [\n    \"/LICENSE-APACHE\",\n    \"/LICENSE-MIT\",\n    \"/README.md\",\n    \"/CHANGES.md\",\n    \"/src/\",\n    \"/benches/\",\n]\n\n[package.metadata.docs.rs]\nall-features = true\nrustdoc-args = [\"--cfg\", \"docsrs\"]\n\n[dependencies]\nbytemuck = { version = \"1.8.0\", features = [\"extern_crate_alloc\"] } # includes cast_vec\nbyteorder-lite = \"0.1.0\"\nnum-traits = { version = \"0.2.0\" }\n\n# Optional dependencies\ncolor_quant = { version = \"1.1\", optional = true }\ndav1d = { version = \"0.10.3\", optional = true }\nexr = { version = \"1.5.0\", optional = true }\ngif = { version = \"0.13.1\", optional = true }\nimage-webp = { version = \"0.2.0\", optional = true }\nmp4parse = { version = \"0.17.0\", optional = true }\npng = { version = \"0.17.11\", optional = true }\nqoi = { version = \"0.4\", optional = true }\nravif = { version = \"0.11.11\", default-features = false, optional = true }\nrayon = { version = \"1.7.0\", optional = true }\nrgb = { version = \"0.8.48\", default-features = false, optional = true }\ntiff = { version = \"0.9.0\", optional = true }\nzune-core = { version = \"0.4.12\", default-features = false, optional = true }\nzune-jpeg = { version = \"0.4.13\", optional = true }\nserde = { version = \"1.0.214\", optional = true, features = [\"derive\"] }\n\n[dev-dependencies]\ncrc32fast = \"1.2.0\"\nnum-complex = \"0.4\"\nglob = \"0.3\"\nquickcheck = \"1\"\ncriterion = \"0.5.0\"\n\n[features]\ndefault = [\"rayon\", \"default-formats\"]\n\n# Format features\ndefault-formats = [\"avif\", \"bmp\", \"dds\", \"exr\", \"ff\", \"gif\", \"hdr\", \"ico\", \"jpeg\", \"png\", \"pnm\", \"qoi\", \"tga\", \"tiff\", \"webp\"]\navif = [\"dep:ravif\", \"dep:rgb\"]\nbmp = []\ndds = []\nexr = [\"dep:exr\"]\nff = [] # Farbfeld image format\ngif = [\"dep:gif\", \"dep:color_quant\"]\nhdr = []\nico = [\"bmp\", \"png\"]\njpeg = [\"dep:zune-core\", \"dep:zune-jpeg\"]\npng = [\"dep:png\"]\npnm = []\nqoi = [\"dep:qoi\"]\ntga = []\ntiff = [\"dep:tiff\"]\nwebp = [\"dep:image-webp\"]\n\n# Other features\nrayon = [\"dep:rayon\", \"ravif?/threading\"] # Enables multi-threading\nnasm = [\"ravif?/asm\"] # Enables use of nasm by rav1e (requires nasm to be installed)\ncolor_quant = [\"dep:color_quant\"] # Enables color quantization\navif-native = [\"dep:mp4parse\", \"dep:dav1d\"] # Enable native dependency libdav1d\nbenchmarks = [] # Build some inline benchmarks. Useful only during development (requires nightly Rust)\nserde = [\"dep:serde\"]\n\n[[bench]]\npath = \"benches/decode.rs\"\nname = \"decode\"\nharness = false\n\n[[bench]]\npath = \"benches/encode.rs\"\nname = \"encode\"\nharness = false\n\n[[bench]]\nname = \"copy_from\"\nharness = false\n\n[[bench]]\npath = \"benches/fast_blur.rs\"\nname = \"fast_blur\"\nharness = false\n\n[[bench]]\npath = \"benches/blur.rs\"\nname = \"blur\"\nharness = false\n"
        },
        {
          "name": "LICENSE-APACHE",
          "type": "blob",
          "size": 9.935546875,
          "content": "\n                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n"
        },
        {
          "name": "LICENSE-MIT",
          "type": "blob",
          "size": 1.01171875,
          "content": "MIT License\n\nPermission is hereby granted, free of charge, to any\nperson obtaining a copy of this software and associated\ndocumentation files (the \"Software\"), to deal in the\nSoftware without restriction, including without\nlimitation the rights to use, copy, modify, merge,\npublish, distribute, sublicense, and/or sell copies of\nthe Software, and to permit persons to whom the Software\nis furnished to do so, subject to the following\nconditions:\n\nThe above copyright notice and this permission notice\nshall be included in all copies or substantial portions\nof the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF\nANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED\nTO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A\nPARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT\nSHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\nOF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR\nIN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\nDEALINGS IN THE SOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 9.2314453125,
          "content": "# Image\n[![crates.io](https://img.shields.io/crates/v/image.svg)](https://crates.io/crates/image)\n[![Documentation](https://docs.rs/image/badge.svg)](https://docs.rs/image)\n[![Build Status](https://github.com/image-rs/image/workflows/Rust%20CI/badge.svg)](https://github.com/image-rs/image/actions)\n[![Gitter](https://badges.gitter.im/image-rs/image.svg)](https://gitter.im/image-rs/image?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge)\n\nMaintainers: [@HeroicKatora](https://github.com/HeroicKatora), [@fintelia](https://github.com/fintelia)\n\n[How to contribute](https://github.com/image-rs/organization/blob/master/CONTRIBUTING.md)\n\n## An Image Processing Library\n\nThis crate provides basic image processing functions and methods for converting to and from various image formats.\n\nAll image processing functions provided operate on types that implement the `GenericImageView` and `GenericImage` traits and return an `ImageBuffer`.\n\n## High level API\n\nLoad images using [`ImageReader`]:\n\n```rust,ignore\nuse std::io::Cursor;\nuse image::ImageReader;\n\nlet img = ImageReader::open(\"myimage.png\")?.decode()?;\nlet img2 = ImageReader::new(Cursor::new(bytes)).with_guessed_format()?.decode()?;\n```\n\nAnd save them using [`save`] or [`write_to`] methods:\n\n```rust,ignore\nimg.save(\"empty.jpg\")?;\n\nlet mut bytes: Vec<u8> = Vec::new();\nimg2.write_to(&mut Cursor::new(&mut bytes), image::ImageFormat::Png)?;\n```\n\n## Supported Image Formats\n\nWith default features enabled, `image` provides implementations of many common\nimage format encoders and decoders.\n\n<!--- NOTE: Make sure to keep this table in sync with the one in src/lib.rs -->\n\n| Format   | Decoding                                  | Encoding                                |\n| -------- | ----------------------------------------- | --------------------------------------- |\n| AVIF     | Yes \\*                                    | Yes (lossy only)                        |\n| BMP      | Yes                                       | Yes                                     |\n| DDS      | Yes                                       | ---                                     |\n| Farbfeld | Yes                                       | Yes                                     |\n| GIF      | Yes                                       | Yes                                     |\n| HDR      | Yes                                       | Yes                                     |\n| ICO      | Yes                                       | Yes                                     |\n| JPEG     | Yes                                       | Yes                                     |\n| EXR      | Yes                                       | Yes                                     |\n| PNG      | Yes                                       | Yes                                     |\n| PNM      | Yes                                       | Yes                                     |\n| QOI      | Yes                                       | Yes                                     |\n| TGA      | Yes                                       | Yes                                     |\n| TIFF     | Yes                                       | Yes                                     |\n| WebP     | Yes                                       | Yes (lossless only)                     |\n\n- \\* Requires the `avif-native` feature, uses the libdav1d C library.\n\n## Image Types\n\nThis crate provides a number of different types for representing images.\nIndividual pixels within images are indexed with (0,0) at the top left corner.\n\n### [`ImageBuffer`](https://docs.rs/image/*/image/struct.ImageBuffer.html)\nAn image parameterised by its Pixel type, represented by a width and height and\na vector of pixels. It provides direct access to its pixels and implements the\n`GenericImageView` and `GenericImage` traits.\n\n### [`DynamicImage`](https://docs.rs/image/*/image/enum.DynamicImage.html)\nA `DynamicImage` is an enumeration over all supported `ImageBuffer<P>` types.\nIts exact image type is determined at runtime. It is the type returned when\nopening an image. For convenience `DynamicImage` reimplements all image\nprocessing functions.\n\n### The [`GenericImageView`](https://docs.rs/image/*/image/trait.GenericImageView.html) and [`GenericImage`](https://docs.rs/image/*/image/trait.GenericImage.html) Traits\n\nTraits that provide methods for inspecting (`GenericImageView`) and manipulating (`GenericImage`) images, parameterised over the image's pixel type.\n\n### [`SubImage`](https://docs.rs/image/*/image/struct.SubImage.html)\nA view into another image, delimited by the coordinates of a rectangle.\nThe coordinates given set the position of the top left corner of the rectangle.\nThis is used to perform image processing functions on a subregion of an image.\n\n\n## The [`ImageDecoder`](https://docs.rs/image/*/image/trait.ImageDecoder.html) and [`ImageDecoderRect`](https://docs.rs/image/*/image/trait.ImageDecoderRect.html) Traits\n\nAll image format decoders implement the `ImageDecoder` trait which provide\nbasic methods for getting image metadata and decoding images. Some formats\nadditionally provide `ImageDecoderRect` implementations which allow for\ndecoding only part of an image at once.\n\nThe most important methods for decoders are...\n+ **dimensions**: Return a tuple containing the width and height of the image.\n+ **color_type**: Return the color type of the image data produced by this decoder.\n+ **read_image**: Decode the entire image into a slice of bytes.\n\n## Pixels\n\n`image` provides the following pixel types:\n+ **Rgb**: RGB pixel\n+ **Rgba**: RGB with alpha (RGBA pixel)\n+ **Luma**: Grayscale pixel\n+ **LumaA**: Grayscale with alpha\n\nAll pixels are parameterised by their component type.\n\n## Image Processing Functions\nThese are the functions defined in the `imageops` module. All functions operate on types that implement the `GenericImage` trait.\nNote that some of the functions are very slow in debug mode. Make sure to use release mode if you experience any performance issues.\n\n+ **blur**: Performs a Gaussian blur on the supplied image.\n+ **brighten**: Brighten the supplied image.\n+ **huerotate**: Hue rotate the supplied image by degrees.\n+ **contrast**: Adjust the contrast of the supplied image.\n+ **crop**: Return a mutable view into an image.\n+ **filter3x3**: Perform a 3x3 box filter on the supplied image.\n+ **flip_horizontal**: Flip an image horizontally.\n+ **flip_vertical**: Flip an image vertically.\n+ **grayscale**: Convert the supplied image to grayscale.\n+ **invert**: Invert each pixel within the supplied image This function operates in place.\n+ **resize**: Resize the supplied image to the specified dimensions.\n+ **rotate180**: Rotate an image 180 degrees clockwise.\n+ **rotate270**: Rotate an image 270 degrees clockwise.\n+ **rotate90**: Rotate an image 90 degrees clockwise.\n+ **unsharpen**: Performs an unsharpen mask on the supplied image.\n\nFor more options, see the [`imageproc`](https://crates.io/crates/imageproc) crate.\n\n## Examples\n### Opening and Saving Images\n\n`image` provides the `open` function for opening images from a path.  The image\nformat is determined from the path's file extension. An `io` module provides a\nreader which offer some more control.\n\n```rust,no_run\nuse image::GenericImageView;\n\n// Use the open function to load an image from a Path.\n// `open` returns a `DynamicImage` on success.\nlet img = image::open(\"tests/images/jpg/progressive/cat.jpg\").unwrap();\n\n// The dimensions method returns the images width and height.\nprintln!(\"dimensions {:?}\", img.dimensions());\n\n// The color method returns the image's `ColorType`.\nprintln!(\"{:?}\", img.color());\n\n// Write the contents of this image to the Writer in PNG format.\nimg.save(\"test.png\").unwrap();\n```\n\n### Generating Fractals\n\n```rust,no_run\n//! An example of generating julia fractals.\nlet imgx = 800;\nlet imgy = 800;\n\nlet scalex = 3.0 / imgx as f32;\nlet scaley = 3.0 / imgy as f32;\n\n// Create a new ImgBuf with width: imgx and height: imgy\nlet mut imgbuf = image::ImageBuffer::new(imgx, imgy);\n\n// Iterate over the coordinates and pixels of the image\nfor (x, y, pixel) in imgbuf.enumerate_pixels_mut() {\n    let r = (0.3 * x as f32) as u8;\n    let b = (0.3 * y as f32) as u8;\n    *pixel = image::Rgb([r, 0, b]);\n}\n\n// A redundant loop to demonstrate reading image data\nfor x in 0..imgx {\n    for y in 0..imgy {\n        let cx = y as f32 * scalex - 1.5;\n        let cy = x as f32 * scaley - 1.5;\n\n        let c = num_complex::Complex::new(-0.4, 0.6);\n        let mut z = num_complex::Complex::new(cx, cy);\n\n        let mut i = 0;\n        while i < 255 && z.norm() <= 2.0 {\n            z = z * z + c;\n            i += 1;\n        }\n\n        let pixel = imgbuf.get_pixel_mut(x, y);\n        let image::Rgb(data) = *pixel;\n        *pixel = image::Rgb([data[0], i as u8, data[2]]);\n    }\n}\n\n// Save the image as “fractal.png”, the format is deduced from the path\nimgbuf.save(\"fractal.png\").unwrap();\n```\n\nExample output:\n\n<img src=\"examples/fractal.png\" alt=\"A Julia Fractal, c: -0.4 + 0.6i\" width=\"500\" />\n\n### Writing raw buffers\nIf the high level interface is not needed because the image was obtained by other means, `image` provides the function `save_buffer` to save a buffer to a file.\n\n```rust,no_run\nlet buffer: &[u8] = unimplemented!(); // Generate the image data\n\n// Save the buffer as \"image.png\"\nimage::save_buffer(\"image.png\", buffer, 800, 600, image::ExtendedColorType::Rgb8).unwrap()\n```\n"
        },
        {
          "name": "benches",
          "type": "tree",
          "content": null
        },
        {
          "name": "deny.toml",
          "type": "blob",
          "size": 0.8447265625,
          "content": "# https://embarkstudios.github.io/cargo-deny/\n\n[graph]\ntargets = [\n    { triple = \"aarch64-apple-darwin\" },\n    { triple = \"aarch64-linux-android\" },\n    { triple = \"x86_64-apple-darwin\" },\n    { triple = \"x86_64-pc-windows-msvc\" },\n    { triple = \"x86_64-unknown-linux-gnu\" },\n    { triple = \"x86_64-unknown-linux-musl\" },\n]\n\n\n[licenses]\nconfidence-threshold = 0.93\nallow = [\n    \"Apache-2.0 WITH LLVM-exception\",\n    \"Apache-2.0\",\n    \"BSD-2-Clause\",\n    \"BSD-3-Clause\",\n    \"MIT\",\n    \"Unicode-3.0\",\n]\n\n[advisories]\nyanked = \"deny\"\nignore = []\n\n\n[bans]\nmultiple-versions = \"deny\"\nwildcards = \"allow\" # at least until https://github.com/EmbarkStudios/cargo-deny/issues/241 is fixed\ndeny = []\nskip = [\n    { name = \"bitflags\" },   # Some deps depend on 1.3.2 while others on 2.6.0\n    { name = \"hashbrown\" },  # Some deps depend on 0.13.2 while others on 0.14.5\n]\n"
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "fuzz-afl",
          "type": "tree",
          "content": null
        },
        {
          "name": "fuzz",
          "type": "tree",
          "content": null
        },
        {
          "name": "release.sh",
          "type": "blob",
          "size": 0.7802734375,
          "content": "#!/bin/bash\n# Checks automatic preconditions for a release\ndetermine_new_version() {\n\tgrep \"version = \" Cargo.toml | sed -Ee 's/version = \"(.*)\"/\\1/' | head -1\n}\n\ncheck_notexists_version() {\n\t# Does the api information start with: '{\"errors\":'\n\t[[ $(wget \"https://crates.io/api/v1/crates/image/$1\" -qO -) == \"{\\\"errors\\\":\"* ]]\n}\n\ncheck_release_description() {\n\tmajor=${1%%.*}\n\tminor_patch=${1#$major.}\n\tminor=${minor_patch%%.*}\n\tpatch=${minor_patch#$minor.}\n\t# We just need to find a fitting header line\n\tgrep -Eq \"^### Version ${major}.${minor}$\" CHANGES.md\n}\n\nversion=\"$(determine_new_version)\"\ncheck_release_description $version || { echo \"Version does not have a release description\"; exit 1; }\ncheck_notexists_version $version || { echo \"Version $version appears already published\"; exit 1; }\n\n"
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}