{
  "metadata": {
    "timestamp": 1736709362306,
    "page": 60,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjYw",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "loco-rs/loco",
      "stars": 6838,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".cargo",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.0478515625,
          "content": "* linguist-vendored\n*.rs linguist-vendored=false\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 1.0146484375,
          "content": "# local dev\ntodo.txt\ntodo.md\nexamples/demo2\nexamples/myapp\n*.sqlite\n*.sqlite-wal\n*.sqlite-shm\n\n*.sqlite3\n*.sqlite3-wal\n*.sqlite3-shm\n\n# IDE config files\n.idea\n.vscode\n\n**/config/local.yaml\n**/config/*.local.yaml\n\n# Local Netlify folder\n.netlify\n\n\n### macOS ###\n# General\n.DS_Store\n.AppleDouble\n.LSOverride\n\n# Icon must end with two \\r\nIcon\n\n# Thumbnails\n._*\n\n# Files that might appear in the root of a volume\n.DocumentRevisions-V100\n.fseventsd\n.Spotlight-V100\n.TemporaryItems\n.Trashes\n.VolumeIcon.icns\n.com.apple.timemachine.donotpresent\n\n# Directories potentially created on remote AFP share\n.AppleDB\n.AppleDesktop\nNetwork Trash Folder\nTemporary Items\n.apdisk\n\n### Rust ###\n# Generated by Cargo\n# will have compiled files and executables\ntarget/\nCargo.lock\n\n# These are backup files generated by rustfmt\n**/*.rs.bk\n\n## Frontend\n# Various node lock files; so people don't accidentally commit them while\n# updating the template\nstarters/saas/frontend/package-lock.json\nstarters/saas/frontend/yarn.lock\nstarters/saas/frontend/pnpm-lock.yaml\n"
        },
        {
          "name": ".rustfmt.toml",
          "type": "blob",
          "size": 0.171875,
          "content": "max_width = 100\ncomment_width = 80\nwrap_comments = true\nimports_granularity = \"Crate\"\nuse_small_heuristics = \"Default\"\ngroup_imports = \"StdExternalCrate\"\nformat_strings = true\n"
        },
        {
          "name": ".vscode",
          "type": "tree",
          "content": null
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 42.123046875,
          "content": "# Changelog\n\n## Unreleased\n\n* fix: bump shuttle to 0.51.0. [https://github.com/loco-rs/loco/pull/1169](https://github.com/loco-rs/loco/pull/1169)\n* Return 422 status code for JSON rejection errors. [https://github.com/loco-rs/loco/pull/1173](https://github.com/loco-rs/loco/pull/1173)\n* Address clippy warnings for Rust stable 1.84. [https://github.com/loco-rs/loco/pull/1168](https://github.com/loco-rs/loco/pull/1168)\n\n\n## v0.14\n\n* feat: smart migration generator. you can now generate migration based on naming them for creating a table, adding columns, references, join tables and more. [https://github.com/loco-rs/loco/pull/1086](https://github.com/loco-rs/loco/pull/1086)\n* feat: `cargo loco routes` will now pretty-print routes\n* fix: guard jwt error behind feature flag. [https://github.com/loco-rs/loco/pull/1032](https://github.com/loco-rs/loco/pull/1032)\n* fix: logger file_appender not using the seperated format setting. [https://github.com/loco-rs/loco/pull/1036](https://github.com/loco-rs/loco/pull/1036)\n* seed cli command. [https://github.com/loco-rs/loco/pull/1046](https://github.com/loco-rs/loco/pull/1046)\n* Updated validator to 0.19. [https://github.com/loco-rs/loco/pull/993](https://github.com/loco-rs/loco/pull/993)\n  ### Breaking Changes\n  Bump validator to 0.19 in your local `Cargo.toml`\n* Testing helpers: simplified function calls + adding html selector. [https://github.com/loco-rs/loco/pull/1047](https://github.com/loco-rs/loco/pull/1047)\n  ### Breaking Changes\n  #### Updated Import Paths\n  The testing module import path has been updated. To adapt your code, update imports from:\n  ```rust\n  use loco_rs::testing;\n  ```\n  to:\n  ```rust\n  use testing::prelude::*;\n  ```\n  #### Simplified Function Calls\n  Function calls within the testing module no longer require the testing:: prefix. Update your code accordingly. For example:\n  \n  Before:\n  ```rust\n  let boot = testing::boot_test::<App>().await.unwrap();\n  ```\n\n  After:\n  ```rust\n  let boot = boot_test::<App>().await.unwrap();\n  ```\n* implement commands to manage background jobs. [https://github.com/loco-rs/loco/pull/1071](https://github.com/loco-rs/loco/pull/1071)\n* magic link. [https://github.com/loco-rs/loco/pull/1085](https://github.com/loco-rs/loco/pull/1085)\n* infer migration. [https://github.com/loco-rs/loco/pull/1086](https://github.com/loco-rs/loco/pull/1086)\n* Remove unnecessary calls to 'register_tasks' functions in scheduler. [https://github.com/loco-rs/loco/pull/1100](https://github.com/loco-rs/loco/pull/1100)\n* implement commands to manage background jobs. [https://github.com/loco-rs/loco/pull/1071](https://github.com/loco-rs/loco/pull/1071)\n* expose hello_name for SMTP client config. [https://github.com/loco-rs/loco/pull/1057](https://github.com/loco-rs/loco/pull/1057)\n* use reqwest with rustls rather than openssl. [https://github.com/loco-rs/loco/pull/1058](https://github.com/loco-rs/loco/pull/1058)\n* more flexible config, take more values from ENV. [https://github.com/loco-rs/loco/pull/1058](https://github.com/loco-rs/loco/pull/1058)\n* refactor: Use opendal to replace object_store. [https://github.com/loco-rs/loco/pull/897](https://github.com/loco-rs/loco/pull/897)\n* allow override loco template. [https://github.com/loco-rs/loco/pull/1102](https://github.com/loco-rs/loco/pull/1102)\n* support custom config folder. [https://github.com/loco-rs/loco/pull/1081](https://github.com/loco-rs/loco/pull/1081)\n* feat: upgrade to Axum 8. [https://github.com/loco-rs/loco/pull/1130](https://github.com/loco-rs/loco/pull/1130)\n* create load config hook. [https://github.com/loco-rs/loco/pull/1143](https://github.com/loco-rs/loco/pull/1143)\n* initial impl new migration dsl. [https://github.com/loco-rs/loco/pull/1125](https://github.com/loco-rs/loco/pull/1125)\n* allow disable limit_payload middleware. [https://github.com/loco-rs/loco/pull/1113](https://github.com/loco-rs/loco/pull/1113)\n\n\n## v0.13.2\n\n* static fallback now returns 200 and not 404 [https://github.com/loco-rs/loco/pull/991](https://github.com/loco-rs/loco/pull/991)\n* cache system now has expiry [https://github.com/loco-rs/loco/pull/1006](https://github.com/loco-rs/loco/pull/1006)\n* fixed: http interface binding [https://github.com/loco-rs/loco/pull/1007](https://github.com/loco-rs/loco/pull/1007)\n* JWT claims now editable and public [https://github.com/loco-rs/loco/issues/988](https://github.com/loco-rs/loco/issues/988)\n* CORS now not enabled in dev mode to avoid friction [https://github.com/loco-rs/loco/pull/1009](https://github.com/loco-rs/loco/pull/1009)\n* fixed: task code generation now injects in all cases [https://github.com/loco-rs/loco/pull/1012](https://github.com/loco-rs/loco/pull/1012)\n\n**BREAKING**\nIn your `app.rs` add the following injection comment at the bottom:\n\n```rust\nfn register_tasks(tasks: &mut Tasks) {\n    tasks.register(tasks::user_report::UserReport);\n    tasks.register(tasks::seed::SeedData);\n    tasks.register(tasks::foo::Foo);\n    // tasks-inject (do not remove)\n}\n```\n* fix: seeding now sets autoincrement fields in the relevant DBs [https://github.com/loco-rs/loco/pull/1014](https://github.com/loco-rs/loco/pull/1014)\n* fix: avoid generating entities from queue tables when the queue backend is database based [https://github.com/loco-rs/loco/issues/1013](https://github.com/loco-rs/loco/issues/1013)\n* removed: channels moved to an initializer [https://github.com/loco-rs/loco/issues/892](https://github.com/loco-rs/loco/issues/892)\n**BREAKING**\nSee how this looks like in [https://github.com/loco-rs/chat-rooms](https://github.com/loco-rs/chat-rooms)\n\n## v0.13.0\n\n* Added SQLite background job support [https://github.com/loco-rs/loco/pull/969](https://github.com/loco-rs/loco/pull/969)\n* Added automatic updating of `updated_at` on change [https://github.com/loco-rs/loco/pull/962](https://github.com/loco-rs/loco/pull/962)\n* fixed codegen injection point in migrations [https://github.com/loco-rs/loco/pull/952](https://github.com/loco-rs/loco/pull/952)\n\n**NOTE: update your migration listing module like so:**\n\n```rust\n// migrations/src/lib.rs\n  vec![\n      Box::new(m20220101_000001_users::Migration),\n      Box::new(m20231103_114510_notes::Migration),\n      Box::new(m20240416_071825_roles::Migration),\n      Box::new(m20240416_082115_users_roles::Migration),\n      // inject-above (do not remove this comment)\n  ]\n```\n\nAdd the comment just before the closing array (`inject-above`)\n\n* Added ability to name references in [https://github.com/loco-rs/loco/pull/955](https://github.com/loco-rs/loco/pull/955):\n\n```sh\n$ generate scaffold posts title:string! content:string! written_by:references:users approved_by:references:users\n```\n\n* Added hot-reload like experience to Tera templates [https://github.com/loco-rs/loco/issues/977](https://github.com/loco-rs/loco/issues/977), in debug builds only.\n\n**NOTE: update your initializers `after_routes` like so:**\n\n```rust\n// src/initializers/view_engine.rs\nasync fn after_routes(&self, router: AxumRouter, _ctx: &AppContext) -> Result<AxumRouter> {\n    #[allow(unused_mut)]\n    let mut tera_engine = engines::TeraView::build()?;\n    if std::path::Path::new(I18N_DIR).exists() {\n        let arc = ArcLoader::builder(&I18N_DIR, unic_langid::langid!(\"en-US\"))\n            .shared_resources(Some(&[I18N_SHARED.into()]))\n            .customize(|bundle| bundle.set_use_isolating(false))\n            .build()\n            .map_err(|e| Error::string(&e.to_string()))?;\n        #[cfg(debug_assertions)]\n        tera_engine\n            .tera\n            .lock()\n            .expect(\"lock\")\n            .register_function(\"t\", FluentLoader::new(arc));\n\n        #[cfg(not(debug_assertions))]\n        tera_engine\n            .tera\n            .register_function(\"t\", FluentLoader::new(arc));\n        info!(\"locales loaded\");\n    }\n\n    Ok(router.layer(Extension(ViewEngine::from(tera_engine))))\n}\n```\n\n* `loco doctor` now checks for app-specific minimum dependency versions. This should help in upgrades. `doctor` also supports \"production only\" checks which you can run in production with `loco doctor --production`. This, for example, will check your connections but will not check dependencies. [https://github.com/loco-rs/loco/pull/931](https://github.com/loco-rs/loco/pull/931)\n* Use a single loco-rs dep for a whole project. [https://github.com/loco-rs/loco/pull/927](https://github.com/loco-rs/loco/pull/927)\n* chore: fix generated testcase. [https://github.com/loco-rs/loco/pull/939](https://github.com/loco-rs/loco/pull/939)\n* chore: Correct cargo test message. [https://github.com/loco-rs/loco/pull/938](https://github.com/loco-rs/loco/pull/938)\n* Add relevant meta tags for better defaults. [https://github.com/loco-rs/loco/pull/943](https://github.com/loco-rs/loco/pull/943)\n* Update cli message with correct command. [https://github.com/loco-rs/loco/pull/942](https://github.com/loco-rs/loco/pull/942)\n* remove lazy_static. [https://github.com/loco-rs/loco/pull/941](https://github.com/loco-rs/loco/pull/941)\n* change update HTTP verb semantics to put+patch. [https://github.com/loco-rs/loco/pull/919](https://github.com/loco-rs/loco/pull/919)\n* Fixed HTML scaffold error. [https://github.com/loco-rs/loco/pull/960](https://github.com/loco-rs/loco/pull/960)\n* Scaffolded HTML update method should be POST. [https://github.com/loco-rs/loco/pull/963](https://github.com/loco-rs/loco/pull/963)\n\n## v0.12.0\n\nThis release have been primarily about cleanups and simplification.\n\nPlease update:\n\n* `loco-rs`\n* `loco-cli`\n\nChanges:\n\n* **generators (BREAKING)**: all prefixes in starters (e.g. `/api`) are now _local to each controller_, and generators will be prefix-aware (`--api` generator will add an `/api` prefix to controllers) [https://github.com/loco-rs/loco/pull/818](https://github.com/loco-rs/loco/pull/818)\n\nTo migrate, please move prefixes from `app.rs` to each controller you use in `controllers/`, for example in `notes` controller:\n\n```rust\nRoutes::new()\n    .prefix(\"api/notes\")\n    .add(\"/\", get(list))\n```\n\n* **starters**: removed `.devcontainer` which can now be found in [loco-devcontainer](https://github.com/loco-rs/loco-devcontainer)\n* **starters**: removed example `notes` scaffold (model, controllers, etc), and unified `user` and `auth` into a single file: `auth.rs`\n* **generators**: `scaffold` generator will now generate a CRUD with `PUT` and `PATCH` semantics for updating an entity [https://github.com/loco-rs/loco/issues/896](https://github.com/loco-rs/loco/issues/896)\n* **cleanup**: `loco-extras` was moved out of the repo, but we've incorporated `MultiDB` and `ExtraDB` from `extras` into `loco-rs` [https://github.com/loco-rs/loco/pull/917](https://github.com/loco-rs/loco/pull/917)\n\n* `cargo loco doctor` now checks for minimal required SeaORM CLI version\n* **BREAKING** Improved migration generator. If you have an existing migration project, add the following comment indicator to the top of the `vec` statement and right below the opening bracked like so in `migration/src/lib.rs`:\n```rust\n    fn migrations() -> Vec<Box<dyn MigrationTrait>> {\n        vec![\n            // inject-below (do not remove this comment)\n```\n\n## v0.11.0\n\n\n* Upgrade **SeaORM to v1.1.0**\n* Added OpenAPI example\n* Improve health route [https://github.com/loco-rs/loco/pull/851](https://github.com/loco-rs/loco/pull/851)\n* Add good pragmas to Sqlite [https://github.com/loco-rs/loco/pull/848](https://github.com/loco-rs/loco/pull/848)\n* Upgrade to rsbuild 1.0. [https://github.com/loco-rs/loco/pull/792](https://github.com/loco-rs/loco/pull/792)\n* Implements fmt::Debug to pub structs. [https://github.com/loco-rs/loco/pull/812](https://github.com/loco-rs/loco/pull/812)\n* Add num_workers config for sidekiq queue. [https://github.com/loco-rs/loco/pull/823](https://github.com/loco-rs/loco/pull/823)\n* Fix some comments in the starters and example code. [https://github.com/loco-rs/loco/pull/824](https://github.com/loco-rs/loco/pull/824)\n* Fix Y2038 bug for JWT on 32 bit platforms. [https://github.com/loco-rs/loco/pull/825](https://github.com/loco-rs/loco/pull/825)\n* Make App URL in Boot Banner Clickable. [https://github.com/loco-rs/loco/pull/826](https://github.com/loco-rs/loco/pull/826)\n* Add `--no-banner` flag to allow disabling the banner display. [https://github.com/loco-rs/loco/pull/839](https://github.com/loco-rs/loco/pull/839)\n* add on_shutdown hook. [https://github.com/loco-rs/loco/pull/842](https://github.com/loco-rs/loco/pull/842)\n\n\n## v0.10.1\n\n* `Format(respond_to): Format` extractor in controller can now be replaced with `respond_to: RespondTo` extractor for less typing.\n* When supplying data to views, you can now use `data!` instead of `serde_json::json!` for shorthand.\n* Refactor middlewares. [https://github.com/loco-rs/loco/pull/785](https://github.com/loco-rs/loco/pull/785). Middleware selection, configuration, and tweaking is MUCH more powerful and convenient now. You can keep the `middleware:` section empty or remove it now, see more in [the middleware docs](https://loco.rs/docs/the-app/controller/#middleware)\n* **NEW (BREAKING)** background worker subsystem is now queue agnostic. Providing for both Redis and Postgres with a change of configuration. This means you can now use a full-Postgres stack to remove Redis as a dependency if you wish. Here are steps to migrate your codebase:\n\n```rust\n// in your app.rs, change the worker registration code:\n\n// BEFORE\nfn connect_workers<'a>(p: &'a mut Processor, ctx: &'a AppContext) {\n    p.register(DownloadWorker::build(ctx)); \n}\n\n// AFTER\nasync fn connect_workers(ctx: &AppContext, queue: &Queue) -> Result<()>{\n    queue.register(DownloadWorker::build(ctx)).await?;\n    Ok(())\n}\n\n// in your app.rs, replace the `worker` module references.\n// REMOVE\nworker::{AppWorker, Processor},\n// REPLACE WITH\nbgworker::{BackgroundWorker, Queue},\n\n// in your workers change the signature, and add the `build` function\n\n// BEFORE\nimpl worker::Worker<DownloadWorkerArgs> for DownloadWorker {\n    async fn perform(&self, args: DownloadWorkerArgs) -> worker::Result<()> {\n\n// AFTER\n#[async_trait]\nimpl BackgroundWorker<DownloadWorkerArgs> for DownloadWorker {\n    fn build(ctx: &AppContext) -> Self {\n        Self { ctx: ctx.clone() }\n    }\n    async fn perform(&self, args: DownloadWorkerArgs) -> Result<()> {\n  \n// Finally, remove the `AppWorker` trait implementation completely.\n\n// REMOVE\nimpl worker::AppWorker<DownloadWorkerArgs> for DownloadWorker {\n    fn build(ctx: &AppContext) -> Self {\n        Self { ctx: ctx.clone() }\n    }\n}\n```\n\nFinally, update your `development.yaml` and `test.yaml` with a `kind`:\n\n```yaml\nqueue:\n  kind: Redis  # add this to the existing `queue` section\n```\n\n\n* **UPGRADED (BREAKING)**: `validator` crate was upgraded which require some small tweaks to work with the new API:\n\n```rust\n// BEFORE:\n#[validate(custom = \"validation::is_valid_email\")]\npub email: String,\n\n// AFTER:\n#[validate(custom (function = \"validation::is_valid_email\"))]\npub email: String,\n```\n\nThen update your `Cargo.toml` to take version `0.18`:\n\n```toml\n# update\nvalidator = { version = \"0.18\" }\n```\n\n* **UPGRADED (BREAKING)**: `axum-test` crate was upgraded \nUpdate your `Cargo.toml` to version `16`:\n\n```toml\n# update\naxum-test = { version = \"16\" }\n```\n\n## v0.9.0\n\n* Add fallback behavior. [https://github.com/loco-rs/loco/pull/732](https://github.com/loco-rs/loco/pull/732)\n* Add Scheduler Feature for Running Cron Jobs. [https://github.com/loco-rs/loco/pull/735](https://github.com/loco-rs/loco/pull/735)\n* Add `--html`, `--htmx` and `--api` flags to scaffold CLI command. [https://github.com/loco-rs/loco/pull/749](https://github.com/loco-rs/loco/pull/749)\n* Add base template for scaffold generation. [https://github.com/loco-rs/loco/pull/752](https://github.com/loco-rs/loco/pull/752)\n* Connect Redis only when the worker is BackgroundQueue. [https://github.com/loco-rs/loco/pull/755](https://github.com/loco-rs/loco/pull/755)\n* Add loco doctor --config. [https://github.com/loco-rs/loco/pull/736](https://github.com/loco-rs/loco/pull/736)\n* Rename demo: blo -> demo_app. [https://github.com/loco-rs/loco/pull/741](https://github.com/loco-rs/loco/pull/741)\n\n\n## v0.8.1\n* fix: introduce secondary binary for compile-and-run on Windows. [https://github.com/loco-rs/loco/pull/727](https://github.com/loco-rs/loco/pull/727)\n\n\n## v0.8.0\n\n* Added: loco-cli (`loco new`) now receives options from CLI and/or interactively asks for configuration options such as which asset pipeline, background worker type, or database provider to use.\n* Fix: custom queue names now merge with default queues.\n* Added `remote_ip` middleware for resolving client remote IP when under a proxy or loadbalancer, similar to the Rails `remote_ip` middleware.\n* Added `secure_headers` middleware for setting secure headers by default, similar to how [https://github.com/github/secure_headers](https://github.com/github/secure_headers) works. This is now ON by default to promote security-by-default.\n* Added: `money`, `blob` types to entitie generator.\n\n## 0.7.0\n* Moving to _timezone aware timestamps_. From now on migrations will generate **timestamps with time zone** by default. Moving to TZ aware timestamps in combination with newly revamped timestamp code generation in SeaORM v1.0.0 finally allows for _seamlessly_ moving between using `sqlite` and `postgres` with minimal or no entities code changes (resolved [this long standing issue](https://github.com/loco-rs/loco/issues/518#issuecomment-2051708319)). TZ aware timestamps also aligns us with how Rails works today (initially Rails had a no-tz timestamps, and today the default is to use timestamps). If not specified the TZ is the server TZ, which is usually UTC, therefore semantically this is almost like a no-tz timestamp.\n\n**A few highlights:**\n\nGenerated entities will now always use `DateTimeWithTimeZone` for the default timestamp fields:\n\n```\n...\nGenerating users.rs\n    > Column `created_at`: DateTimeWithTimeZone, not_null\n    > Column `updated_at`: DateTimeWithTimeZone, not_null\n...\n```\n\nFor better cross database provider compatibility, from now on prefer the `tstz` type instead of just `ts` when using generators (i.e. `cargo loco generate model movie released:tstz`)\n\n* remove eyer lib. [https://github.com/loco-rs/loco/pull/650](https://github.com/loco-rs/loco/pull/650)\n  ### Breaking Changes:\n     1. Update the Main Function in src/bin/main\n   \n      Replace the return type of the main function:\n   \n      **Before:**\n      ```rust\n      async fn main() -> eyre::Result<()>\n      ```\n   \n      **After:**\n      ```rust\n      async fn main() -> loco_rs::Result<()>\n      ```\n   \n   \n   2. Modify examples/playground.rs\n      You need to apply two changes here:\n   \n        a. Update the Function Signature\n        **Before:**\n        ```rust\n        async fn main() -> eyre::Result<()>\n        ```\n   \n        **After:**\n        ```rust\n        async fn main() -> loco_rs::Result<()>\n        ```\n   \n        b. Adjust the Context Handling\n        **Before:**\n        ```rust\n        let _ctx = playground::<App>().await.context(\"playground\")?;\n        ```\n   \n        **After:**\n        ```rust\n        let _ctx = playground::<App>().await?;\n        ```\n   \n   Note, \n   If you are using eyre in your project, you can continue to do so. We have only removed this crate from our base code dependencies.\n* Bump rstest crate to 0.21.0. [https://github.com/loco-rs/loco/pull/650](https://github.com/loco-rs/loco/pull/650)\n* Bump serial_test crate to 3.1.1. [https://github.com/loco-rs/loco/pull/651](https://github.com/loco-rs/loco/pull/651)\n* Bumo object store to create to 0.10.2. [https://github.com/loco-rs/loco/pull/654](https://github.com/loco-rs/loco/pull/654)\n* Bump axum crate to 0.7.5. [https://github.com/loco-rs/loco/pull/652](https://github.com/loco-rs/loco/pull/652)\n* Add Hooks::before_routes to give user control over initial axum::Router construction. [https://github.com/loco-rs/loco/pull/646](https://github.com/loco-rs/loco/pull/646)\n* Support logger file appender. [https://github.com/loco-rs/loco/pull/636](https://github.com/loco-rs/loco/pull/636)\n* Response from the template. [https://github.com/loco-rs/loco/pull/682](https://github.com/loco-rs/loco/pull/682)\n* Add get_or_insert function to cache layer. [https://github.com/loco-rs/loco/pull/637](https://github.com/loco-rs/loco/pull/637)\n* Bump ORM create to 1.0.0. [https://github.com/loco-rs/loco/pull/684](https://github.com/loco-rs/loco/pull/684)\n\n\n## 0.6.2\n* Use Rust-based tooling for SaaS starter frontend. [https://github.com/loco-rs/loco/pull/625](https://github.com/loco-rs/loco/pull/625)\n* Default binding to localhost to avoid firewall dialogues during development on macOS. [https://github.com/loco-rs/loco/pull/627](https://github.com/loco-rs/loco/pull/627)\n* upgrade sea-orm to 1.0.0 RC 7. [https://github.com/loco-rs/loco/pull/627](https://github.com/loco-rs/loco/pull/639)\n* Add a down migration command. [https://github.com/loco-rs/loco/pull/414](https://github.com/loco-rs/loco/pull/414)\n* replace create_postgres_database function table_name to db_name. [https://github.com/loco-rs/loco/pull/647](https://github.com/loco-rs/loco/pull/647)\n\n## 0.6.1\n * Upgrade htmx generator to htmx2. [https://github.com/loco-rs/loco/pull/629](https://github.com/loco-rs/loco/pull/629)\n\n\n## 0.6.0 https://github.com/loco-rs/loco/pull/610\n* Bump socketioxide to v0.13.1. [https://github.com/loco-rs/loco/pull/594](https://github.com/loco-rs/loco/pull/594)\n* Add CC and BCC fields to the mailers. [https://github.com/loco-rs/loco/pull/599](https://github.com/loco-rs/loco/pull/599)\n* Delete reset tokens after use. [https://github.com/loco-rs/loco/pull/602](https://github.com/loco-rs/loco/pull/602)\n* Generator html support delete entity. [https://github.com/loco-rs/loco/pull/604](https://github.com/loco-rs/loco/pull/604)\n* **Breaking changes** move task args from BTreeMap to struct. [https://github.com/loco-rs/loco/pull/609](https://github.com/loco-rs/loco/pull/609)\n  * Change task signature from `async fn run(&self, app_context: &AppContext, vars: &BTreeMap<String, String>)` to `async fn run(&self, _app_context: &AppContext, _vars: &task::Vars) -> Result<()>`\n  *  **Breaking changes** change default port to 5150. [https://github.com/loco-rs/loco/pull/611](https://github.com/loco-rs/loco/pull/611)\n*  Update shuttle version in deployment generation. [https://github.com/loco-rs/loco/pull/616](https://github.com/loco-rs/loco/pull/616)\n\n## v0.5.0 https://github.com/loco-rs/loco/pull/593\n\n* refactor auth middleware for supporting bearer, cookie and query. [https://github.com/loco-rs/loco/pull/560](https://github.com/loco-rs/loco/pull/560)\n* SeaORM upgraded: `rc1` -> `rc4`. [https://github.com/loco-rs/loco/pull/585](https://github.com/loco-rs/loco/pull/585)\n* Adding Cache to app content. [https://github.com/loco-rs/loco/pull/570](https://github.com/loco-rs/loco/pull/570)\n* Apply a layer to a specific handler using `layer` method. [https://github.com/loco-rs/loco/pull/554](https://github.com/loco-rs/loco/pull/554)\n* Add the debug macro to the templates to improve the errors. [https://github.com/loco-rs/loco/pull/547](https://github.com/loco-rs/loco/pull/547)\n* Opentelemetry initializer. [https://github.com/loco-rs/loco/pull/531](https://github.com/loco-rs/loco/pull/531)\n* Refactor auth middleware for supporting bearer, cookie and query [https://github.com/loco-rs/loco/pull/560](https://github.com/loco-rs/loco/pull/560)\n* Add redirect response [https://github.com/loco-rs/loco/pull/563](https://github.com/loco-rs/loco/pull/563)\n* **Breaking changes** Adding a custom claims `Option<serde_json::Value>` to the `UserClaims` struct (type changed). [https://github.com/loco-rs/loco/pull/578](https://github.com/loco-rs/loco/pull/578)\n* **Breaking changes** Refactored DSL and Pagination: namespace changes. [https://github.com/loco-rs/loco/pull/566](https://github.com/loco-rs/loco/pull/566)\n  * Replaced `model::query::dsl::` with `model::query`.\n  * Replaced `model::query::exec::paginate` with `model::query::paginate`.\n  * Updated the `PaginatedResponse` struct. Refer to its usage example [here](https://github.com/loco-rs/loco/blob/master/examples/demo/src/views/notes.rs#L29).\n* **Breaking changes** When introducing the Cache system which is much more flexible than having just Redis, we now call the 'redis' member simply a 'queue' which indicates it should be used only for the internal queue and not as a general purpose cache. In the application configuration setting `redis`, change to `queue`. [https://github.com/loco-rs/loco/pull/590](https://github.com/loco-rs/loco/pull/590)\n```yaml\n# before:\nredis:\n# after:\nqueue:\n```\n* **Breaking changes** We have made a few parts of the context pluggable, such as the `storage` and new `cache` subsystems, this is why we decided to let you configure the context entirely before starting up your app. As a result, if you have a storage building hook code it should move to `after_context`, see example [here](https://github.com/loco-rs/loco/pull/570/files#diff-5534e8826fb82e5c7f2587d270a51b48009341e79889d1504e6b63b2f0b652bdR83). [https://github.com/loco-rs/loco/pull/570](https://github.com/loco-rs/loco/pull/570)\n\n## v0.4.0\n\n* Refactored model validation for better developer experience. Added a few traits and structs to `loco::prelude` for a smoother import story. Introducing `Validatable`:\n\n```rust\nimpl Validatable for super::_entities::users::ActiveModel {\n    fn validator(&self) -> Box<dyn Validate> {\n        Box::new(Validator {\n            name: self.name.as_ref().to_owned(),\n            email: self.email.as_ref().to_owned(),\n        })\n    }\n}\n\n// now you can call `user.validate()` freely\n```\n\n* Refactored type field mapping to be centralized. Now model, scaffold share the same field mapping, so no more gaps like [https://github.com/loco-rs/loco/issues/513](https://github.com/loco-rs/loco/issues/513) (e.g. when calling `loco generate model title:string` the ability to map `string` into something useful in the code generation side)\n**NOTE** the `_integer` class of types are now just `_int`, e.g. `big_int`, so that it correlate with the `int` field name in a better way\n\n* Adding to to quiery dsl `is_in` and `is_not_in`. [https://github.com/loco-rs/loco/pull/507](https://github.com/loco-rs/loco/pull/507)\n* Added: in your configuration you can now use an `initializers:` section for initializer specific settings\n\n  ```yaml\n  # Initializers Configuration\n  initializers:\n  # oauth2:\n  #   authorization_code: # Authorization code grant type\n  #     - client_identifier: google # Identifier for the OAuth2 provider. Replace 'google' with your provider's name if different, must be unique within the oauth2 config.\n  #       ... other fields\n  ```\n\n* Docs: fix schema data types mapping. [https://github.com/loco-rs/loco/pull/506](https://github.com/loco-rs/loco/pull/506)\n* Let Result accept other errors. [https://github.com/loco-rs/loco/pull/505](https://github.com/loco-rs/loco/pull/505)\n* Allow trailing slashes in URIs by adding the NormalizePathLayer. [https://github.com/loco-rs/loco/pull/481](https://github.com/loco-rs/loco/pull/481)\n* **BREAKING** Move from `Result<impl IntoResponse>` to `Result<Response>`. This enables much greater flexibility building APIs, where with `Result<Response>` you mix and match response types based on custom logic (returning JSON and HTML/String in the same route).\n* **Added**: mime responders similar to `respond_to` in Rails:\n\n1. Use the `Format` extractor\n2. Match on `respond_to`\n3. Create different content for different response formats\n\nThe following route will always return JSON, unless explicitly asked for HTML with a\n`Content-Type: text/html` (or `Accept: `) header:\n\n```rust\npub async fn get_one(\n    Format(respond_to): Format,\n    Path(id): Path<i32>,\n    State(ctx): State<AppContext>,\n) -> Result<Response> {\n    let item = load_item(&ctx, id).await?;\n    match respond_to {\n        RespondTo::Html => format::html(&format!(\"<html><body>{:?}</body></html>\", item.title)),\n        _ => format::json(item),\n    }\n}\n```\n\n## 0.3.2\n\n* Redisgin pagination. [https://github.com/loco-rs/loco/pull/463](https://github.com/loco-rs/loco/pull/463)\n* Wrap seaorm query and condition for common use cases. [https://github.com/loco-rs/loco/pull/463](https://github.com/loco-rs/loco/pull/463)\n* Adding to loco-extras initializer for extra or multiple db. [https://github.com/loco-rs/loco/pull/471](https://github.com/loco-rs/loco/pull/471)\n* Scaffold now supporting different templates such as API,HTML or htmx, this future is in beta.[https://github.com/loco-rs/loco/pull/474](https://github.com/loco-rs/loco/pull/474)\n* Fix generatore fields types + adding tests. [https://github.com/loco-rs/loco/pull/459](https://github.com/loco-rs/loco/pull/459)\n* Fix channel cors. [https://github.com/loco-rs/loco/pull/430](https://github.com/loco-rs/loco/pull/430)\n* Improve auth controller compatibility with frontend [https://github.com/loco-rs/loco/pull/472](https://github.com/loco-rs/loco/pull/472)\n\n\n## 0.3.1\n\n* **Breaking changes** Upgrade sea-orm to v1.0.0-rc.1. [https://github.com/loco-rs/loco/pull/420](https://github.com/loco-rs/loco/pull/420)\n  Needs to update `sea-orm` crate to use `v1.0.0-rc.1` version.\n* Implemented file upload support with versatile strategies. [https://github.com/loco-rs/loco/pull/423](https://github.com/loco-rs/loco/pull/423)\n* Create a `loco_extra` crate to share common basic implementations. [https://github.com/loco-rs/loco/pull/425](https://github.com/loco-rs/loco/pull/425)\n* Update shuttle deployment template to 0.38. [https://github.com/loco-rs/loco/pull/422](https://github.com/loco-rs/loco/pull/422)\n* Enhancement: Move the Serve to Hook flow with the ability to override default serve settings. [https://github.com/loco-rs/loco/pull/418](https://github.com/loco-rs/loco/pull/418)\n* Avoid cloning sea_query::ColumnDef. [https://github.com/loco-rs/loco/pull/415](https://github.com/loco-rs/loco/pull/415)\n* Allow required UUID type in a scaffold. [https://github.com/loco-rs/loco/pull/408](https://github.com/loco-rs/loco/pull/408)\n* Cover `SqlxMySqlPoolConnection` in db.rs. [https://github.com/loco-rs/loco/pull/411](https://github.com/loco-rs/loco/pull/411)\n* Update worker docs and change default worker mode. [https://github.com/loco-rs/loco/pull/412](https://github.com/loco-rs/loco/pull/412)\n* Added server-side view generation through a new `ViewEngine` infrastructure and `Tera` server-side templates: [https://github.com/loco-rs/loco/pull/389](https://github.com/loco-rs/loco/pull/389)\n* Added `generate model --migration-only` [https://github.com/loco-rs/loco/issues/400](https://github.com/loco-rs/loco/issues/400)\n* Add JSON to scaffold gen. [https://github.com/loco-rs/loco/pull/396](https://github.com/loco-rs/loco/pull/396)\n* Add --binding(-b) and --port(-b) to `cargo loco start`.[https://github.com/loco-rs/loco/pull/402](https://github.com/loco-rs/loco/pull/402)\n\n## 0.2.3\n\n* Add: support for [pre-compressed assets](https://github.com/loco-rs/loco/pull/370/files).\n* Added: Support socket channels, see working example [here](https://github.com/loco-rs/chat-rooms). [https://github.com/loco-rs/loco/pull/380](https://github.com/loco-rs/loco/pull/380)\n* refactor: optimize checking permissions on Postgres. [9416c](https://github.com/loco-rs/loco/commit/9416c5db85a27e3d30471374effec3fe88bf80a2)\n* Added: E2E db. [https://github.com/loco-rs/loco/pull/371](https://github.com/loco-rs/loco/pull/371)\n\n## v0.2.2\n* fix: public fields in mailer-op. [e51b7e](https://github.com/loco-rs/loco/commit/e51b7e64e7667c519451ac8a8bea574b2c5d4403)\n* fix: handle missing db permissions. [e51b7e](https://github.com/loco-rs/loco/commit/e51b7e64e7667c519451ac8a8bea574b2c5d4403)\n\n## v0.2.1\n* enable compression for CompressionLayer, not etag. [https://github.com/loco-rs/loco/pull/356](https://github.com/loco-rs/loco/pull/356)\n* Fix nullable JSONB column schema definition. [https://github.com/loco-rs/loco/pull/357](https://github.com/loco-rs/loco/pull/357)\n\n## v0.2.0\n\n* Add: Loco now has Initializers ([see the docs](https://loco.rs/docs/the-app/initializers/)). Initializers help you integrate infra into your app in a seamless way, as well as share pieces of setup code between your projects\n* Add: an `init_logger` hook in `src/app.rs` for those who want to take ownership of their logging and tracing stack.\n* Add: Return a JSON schema when payload json could not serialize to a struct. [https://github.com/loco-rs/loco/pull/343](https://github.com/loco-rs/loco/pull/343)\n* Init logger in cli.rs. [https://github.com/loco-rs/loco/pull/338](https://github.com/loco-rs/loco/pull/338)\n* Add: return JSON schema in panic HTTP layer. [https://github.com/loco-rs/loco/pull/336](https://github.com/loco-rs/loco/pull/336)\n* Add: JSON field support in model generation. [https://github.com/loco-rs/loco/pull/327](https://github.com/loco-rs/loco/pull/327) [https://github.com/loco-rs/loco/pull/332](https://github.com/loco-rs/loco/pull/332)\n* Add: float support in model generation. [https://github.com/loco-rs/loco/pull/317](https://github.com/loco-rs/loco/pull/317) \n* Fix: conflicting idx definition on M:M migration. [https://github.com/loco-rs/loco/issues/311](https://github.com/loco-rs/loco/issues/311)\n* Add: **Breaking changes** Supply `AppContext` to `routes` Hook. Migration steps in `src/app.rs`:\n\n```rust\n// src/app.rs: add app context to routes function\nimpl Hooks for App {\n  ...\n  fn routes(_ctx: &AppContext) -> AppRoutes;\n  ...\n}\n```\n\n* Add: **Breaking changes** change parameter type from `&str` to `&Environment` in `src/app.rs`\n\n```rust\n// src/app.rs: change parameter type for `environment` from `&str` to `&Environment`\nimpl Hooks for App {\n    ...\n    async fn boot(mode: StartMode, environment: &Environment) -> Result<BootResult> {\n        create_app::<Self>(mode, environment).await\n    }\n    ...\n```\n\n* Added: setting cookies:\n\n```rust\nformat::render()\n    .cookies(&[\n        cookie::Cookie::new(\"foo\", \"bar\"),\n        cookie::Cookie::new(\"baz\", \"qux\"),\n    ])?\n    .etag(\"foobar\")?\n    .json(notes)\n```\n\n\n## v0.1.9\n\n* Adding [pagination](https://loco.rs/docs/the-app/pagination/) on Models. [https://github.com/loco-rs/loco/pull/238](https://github.com/loco-rs/loco/pull/238)\n* Adding compression middleware. [https://github.com/loco-rs/loco/pull/205](https://github.com/loco-rs/loco/pull/205)\n  Added support for [compression middleware](https://docs.rs/tower-http/0.5.0/tower_http/compression/index.html).\n  usage:\n\n```yaml\nmiddlewares:\n  compression:\n    enable: true\n```\n* Create a new Database from the CLI. [https://github.com/loco-rs/loco/pull/223](https://github.com/loco-rs/loco/pull/223)\n* Validate if seaorm CLI is installed before running `cargo loco db entities` and show a better error to the user. [https://github.com/loco-rs/loco/pull/212](https://github.com/loco-rs/loco/pull/212)\n* Adding to `saas and `rest-api` starters a redis and DB in GitHub action workflow to allow users work with github action out of the box. [https://github.com/loco-rs/loco/pull/215](https://github.com/loco-rs/loco/pull/215)\n* Adding the app name and the environment to the DB name when creating a new starter. [https://github.com/loco-rs/loco/pull/216](https://github.com/loco-rs/loco/pull/216)\n* Fix generator when users adding a `created_at` or `update_at` fields. [https://github.com/loco-rs/loco/pull/214](https://github.com/loco-rs/loco/pull/214)\n* Add: `format::render` which allows a builder-like formatting, including setting etag and ad-hoc headers\n* Add: Etag middleware, enabled by default in starter projects. Once you set an Etag it will check for cache headers and return `304` if needed. To enable etag in your existing project:\n\n```yaml\n#...\n  middlewares:\n    etag:\n      enable: true\n```\n\nusage:\n```rust\n  format::render()\n      .etag(\"foobar\")?\n      .json(Entity::find().all(&ctx.db).await?)\n```\n\n\n#### Authentication: Added API Token Authentication!\n\n* See [https://github.com/loco-rs/loco/pull/217](https://github.com/loco-rs/loco/pull/217)\nNow when you generate a `saas starter` or `rest api` starter you will get additional authentication methods for free:\n\n* Added: authentication added -- **api authentication** where each user has an API token in the schema, and you can authenticate with `Bearer` against that user.\n* Added: authentication added -- `JWTWithUser` extractor, which is a convenience for resolving the authenticated JWT claims into a current user from database\n\n**migrating an existing codebase**\n\nAdd the following to your generated `src/models/user.rs`:\n\n```rust\n#[async_trait]\nimpl Authenticable for super::_entities::users::Model {\n    async fn find_by_api_key(db: &DatabaseConnection, api_key: &str) -> ModelResult<Self> {\n        let user = users::Entity::find()\n            .filter(users::Column::ApiKey.eq(api_key))\n            .one(db)\n            .await?;\n        user.ok_or_else(|| ModelError::EntityNotFound)\n    }\n\n    async fn find_by_claims_key(db: &DatabaseConnection, claims_key: &str) -> ModelResult<Self> {\n        super::_entities::users::Model::find_by_pid(db, claims_key).await\n    }\n}\n```\n\nUpdate imports in this file to include `model::Authenticable`:\n\n```rust\nuse loco_rs::{\n    auth, hash,\n    model::{Authenticable, ModelError, ModelResult},\n    validation,\n    validator::Validate,\n};\n```\n\n  \n## v0.1.8\n\n* Added: `loco version` for getting an operable version string containing logical crate version and git SHA if available: `0.3.0 (<git sha>)`\n\nTo migrate to this behavior from earlier versions, it requires adding the following to your `app.rs` app hooks:\n\n```rust\n    fn app_version() -> String {\n        format!(\n            \"{} ({})\",\n            env!(\"CARGO_PKG_VERSION\"),\n            option_env!(\"BUILD_SHA\")\n                .or(option_env!(\"GITHUB_SHA\"))\n                .unwrap_or(\"dev\")\n        )\n    }\n```\n\nReminder: `loco --version` will give you the current Loco framework which your app was built against and `loco version` gives you your app version.\n \n* Added: `loco generate migration` for adding ad-hoc migrations\n* Added: added support in model generator for many-to-many link table generation via `loco generate model --link`\n* Docs: added Migration section, added relations documentation 1:M, M:M\n* Adding .devcontainer to starter projects [https://github.com/loco-rs/loco/issues/170](https://github.com/loco-rs/loco/issues/170)\n* **Braking changes**: Adding `Hooks::boot` application. Migration steps:\n    ```rust\n    // Load boot::{create_app, BootResult, StartMode} from loco_rs lib\n    // Load migration: use migration::Migrator; Only when using DB\n    // Adding boot hook with the following code\n    impl Hooks for App {\n      ...\n      async fn boot(mode: StartMode, environment: &str) -> Result<BootResult> {\n        // With DB:\n        create_app::<Self, Migrator>(mode, environment).await\n        // Without DB:\n        create_app::<Self>(mode, environment).await\n      }\n      ...\n    }\n    ```\n  \n## v0.1.7\n* Added pretty backtraces [https://github.com/loco-rs/loco/issues/41](https://github.com/loco-rs/loco/issues/41)\n* adding tests for note requests [https://github.com/loco-rs/loco/pull/156](https://github.com/loco-rs/loco/pull/156)\n* Define the min rust version the loco can run [https://github.com/loco-rs/loco/pull/164](https://github.com/loco-rs/loco/pull/164)\n* Added `cargo loco doctor` cli command for validate and diagnose configurations. [https://github.com/loco-rs/loco/pull/145](https://github.com/loco-rs/loco/pull/145)\n* Added ability to specify `settings:` in config files, which are available in context\n* Adding compilation mode in the banner. [https://github.com/loco-rs/loco/pull/127](https://github.com/loco-rs/loco/pull/127)\n* Support shuttle deployment generator. [https://github.com/loco-rs/loco/pull/124](https://github.com/loco-rs/loco/pull/124)\n* Adding a static asset middleware which allows to serve static folder/data. Enable this section in config. [https://github.com/loco-rs/loco/pull/134](https://github.com/loco-rs/loco/pull/134)\n  ```yaml\n   static:\n      enable: true\n      # ensure that both the folder.path and fallback file path are existence.\n      must_exist: true\n      folder: \n        uri: \"/assets\"\n        path: \"frontend/dist\"        \n      fallback: \"frontend/dist/index.html\" \n  ```\n* fix: `loco generate request` test template. [https://github.com/loco-rs/loco/pull/133](https://github.com/loco-rs/loco/pull/133)\n* Improve docker deployment generator. [https://github.com/loco-rs/loco/pull/131](https://github.com/loco-rs/loco/pull/131)\n\n## v0.1.6\n\n* refactor: local settings are now `<env>.local.yaml` and available for all environments, for example you can add a local `test.local.yaml` and `development.local.yaml`\n* refactor: removed `config-rs` and now doing config loading by ourselves.\n* fix: email template rendering will not escape URLs\n* Config with variables: It is now possible to use [tera](https://keats.github.io/tera) templates in config YAML files\n\nExample of pulling a port from environment:\n\n```yaml\nserver:\n  port: {{ get_env(name=\"NODE_PORT\", default=5150) }}\n```\n\nIt is possible to use any `tera` templating constructs such as loops, conditionals, etc. inside YAML configuration files.\n\n* Mailer: expose `stub` in non-test\n\n* `Hooks::before_run` with a default blank implementation. You can now code some custom loading of resources or other things before the app runs\n* an LLM inference example, text generation in Rust, using an API (`examples/inference`)\n* Loco starters version & create release script [https://github.com/loco-rs/loco/pull/110](https://github.com/loco-rs/loco/pull/110)\n* Configure Cors middleware [https://github.com/loco-rs/loco/pull/114](https://github.com/loco-rs/loco/pull/114)\n* `Hooks::after_routes` Invoke this function after the Loco routers have been constructed. This function enables you to configure custom Axum logics, such as layers, that are compatible with Axum. [https://github.com/loco-rs/loco/pull/114](https://github.com/loco-rs/loco/pull/114)\n* Adding docker deployment generator [https://github.com/loco-rs/loco/pull/119](https://github.com/loco-rs/loco/pull/119)\n\nDOCS:\n* Remove duplicated docs in auth section\n* FAQ docs: [https://github.com/loco-rs/loco/pull/116](https://github.com/loco-rs/loco/pull/116)\n\nENHANCEMENTS:\n* Remove unused libs: [https://github.com/loco-rs/loco/pull/106](https://github.com/loco-rs/loco/pull/106)\n* turn off default features in tokio [https://github.com/loco-rs/loco/pull/118](https://github.com/loco-rs/loco/pull/118)\n\n## 0.1.5\n\nNEW FEATURES\n* `format:html` [https://github.com/loco-rs/loco/issues/74](https://github.com/loco-rs/loco/issues/74)\n* Create a stateless HTML starter [https://github.com/loco-rs/loco/pull/100](https://github.com/loco-rs/loco/pull/100)\n* Added worker generator + adding a way to test workers [https://github.com/loco-rs/loco/pull/92](https://github.com/loco-rs/loco/pull/92)\n\nENHANCEMENTS:\n* CI: allows cargo cli run on fork prs [https://github.com/loco-rs/loco/pull/96](https://github.com/loco-rs/loco/pull/96)\n\n"
        },
        {
          "name": "CODE_OF_CONDUCT.md",
          "type": "blob",
          "size": 5.10546875,
          "content": "# Contributor Covenant Code of Conduct\n\n## Our Pledge\n\nWe as members, contributors, and leaders pledge to make participation in our\ncommunity a harassment-free experience for everyone, regardless of age, body\nsize, visible or invisible disability, ethnicity, sex characteristics, gender\nidentity and expression, level of experience, education, socio-economic status,\nnationality, personal appearance, race, religion, or sexual identity\nand orientation.\n\nWe pledge to act and interact in ways that contribute to an open, welcoming,\ndiverse, inclusive, and healthy community.\n\n## Our Standards\n\nExamples of behavior that contributes to a positive environment for our\ncommunity include:\n\n* Demonstrating empathy and kindness toward other people\n* Being respectful of differing opinions, viewpoints, and experiences\n* Giving and gracefully accepting constructive feedback\n* Accepting responsibility and apologizing to those affected by our mistakes,\n  and learning from the experience\n* Focusing on what is best not just for us as individuals, but for the\n  overall community\n\nExamples of unacceptable behavior include:\n\n* The use of sexualized language or imagery, and sexual attention or\n  advances of any kind\n* Trolling, insulting or derogatory comments, and personal or political attacks\n* Public or private harassment\n* Publishing others' private information, such as a physical or email\n  address, without their explicit permission\n* Other conduct which could reasonably be considered inappropriate in a\n  professional setting\n\n## Enforcement Responsibilities\n\nCommunity leaders are responsible for clarifying and enforcing our standards of\nacceptable behavior and will take appropriate and fair corrective action in\nresponse to any behavior that they deem inappropriate, threatening, offensive,\nor harmful.\n\nCommunity leaders have the right and responsibility to remove, edit, or reject\ncomments, commits, code, wiki edits, issues, and other contributions that are\nnot aligned to this Code of Conduct, and will communicate reasons for moderation\ndecisions when appropriate.\n\n## Scope\n\nThis Code of Conduct applies within all community spaces, and also applies when\nan individual is officially representing the community in public spaces.\nExamples of representing our community include using an official e-mail address,\nposting via an official social media account, or acting as an appointed\nrepresentative at an online or offline event.\n\n## Enforcement\n\nInstances of abusive, harassing, or otherwise unacceptable behavior may be\nreported to the community leaders responsible for enforcement (open an issue to reach out).\nAll complaints will be reviewed and investigated promptly and fairly.\n\nAll community leaders are obligated to respect the privacy and security of the\nreporter of any incident.\n\n## Enforcement Guidelines\n\nCommunity leaders will follow these Community Impact Guidelines in determining\nthe consequences for any action they deem in violation of this Code of Conduct:\n\n### 1. Correction\n\n**Community Impact**: Use of inappropriate language or other behavior deemed\nunprofessional or unwelcome in the community.\n\n**Consequence**: A private, written warning from community leaders, providing\nclarity around the nature of the violation and an explanation of why the\nbehavior was inappropriate. A public apology may be requested.\n\n### 2. Warning\n\n**Community Impact**: A violation through a single incident or series\nof actions.\n\n**Consequence**: A warning with consequences for continued behavior. No\ninteraction with the people involved, including unsolicited interaction with\nthose enforcing the Code of Conduct, for a specified period of time. This\nincludes avoiding interactions in community spaces as well as external channels\nlike social media. Violating these terms may lead to a temporary or\npermanent ban.\n\n### 3. Temporary Ban\n\n**Community Impact**: A serious violation of community standards, including\nsustained inappropriate behavior.\n\n**Consequence**: A temporary ban from any sort of interaction or public\ncommunication with the community for a specified period of time. No public or\nprivate interaction with the people involved, including unsolicited interaction\nwith those enforcing the Code of Conduct, is allowed during this period.\nViolating these terms may lead to a permanent ban.\n\n### 4. Permanent Ban\n\n**Community Impact**: Demonstrating a pattern of violation of community\nstandards, including sustained inappropriate behavior,  harassment of an\nindividual, or aggression toward or disparagement of classes of individuals.\n\n**Consequence**: A permanent ban from any sort of public interaction within\nthe community.\n\n## Attribution\n\nThis Code of Conduct is adapted from the [Contributor Covenant][homepage],\nversion 2.0, available at\nhttps://www.contributor-covenant.org/version/2/0/code_of_conduct.html.\n\nCommunity Impact Guidelines were inspired by [Mozilla's code of conduct\nenforcement ladder](https://github.com/mozilla/diversity).\n\n[homepage]: https://www.contributor-covenant.org\n\nFor answers to common questions about this code of conduct, see the FAQ at\nhttps://www.contributor-covenant.org/faq. Translations are available at\nhttps://www.contributor-covenant.org/translations.\n\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 4.322265625,
          "content": "# Contributing to Loco\n\nThank you for taking the time to read this.\n\nThe first way to show support is to star our repos :).\n\n\nLoco is a community driven project. We welcome you to participate, contribute and together build a productivity-first web and api framework in Rust.\n\n## Code of Conduct\n\nThis project is follows [Code of Conduct](CODE_OF_CONDUCT.md). By participating, you are expected to uphold this code.\n\n## I have a question\n\nIf you have a question to ask, feel free to open an new [discussion](https://github.com/loco-rs/loco/discussions). There are no dumb questions.\n\n## I need a feature\n\nFeature requests from anyone is definitely welcomed! You can open an [issue](https://github.com/loco-rs/loco/issues/new/choose). When you can, illustrate a feature with code, simulated console output, and \"make believe\" console interactions, so we know what you want and what you expect.\n\n## I want to support\n\nAwesome! The best way to support us is to recommend it to your classmates/colleagues/friends, write blog posts and tutorials on our projects and help out other users in the community.\n\n## I want to join\n\nWe are always looking for long-term contributors. If you want to commit longer-term to Loco's open source effort, definitely talk with us!\n\n* From time to time we will make issues clear for newcomers with `mentoring` and `good-first-issue`\n* If no issue exist, just open an issue and ask how to help\n\n### Using an example app to test\n\nOur testing grounds is [examples/demo](examples/demo/) which is pointing to the latest local `loco` framework. You can use it to test out an actual app, using a locally modified `loco`.\n\n\n## Code style\n\nWe use `rustfmt`/`cargo fmt`. A few code style options are set in the [.rustfmt.toml](.rustfmt.toml) file, and some of them are not stable yet and require a nightly version of rustfmt.\n\nIf you're using rustup, the nightly version of rustfmt can be installed by doing the following:\n```sh\nrustup component add rustfmt --toolchain nightly\n```\nAnd then format your code by running:\n```sh\ncargo +nightly fmt\n```\n\n## Testing\n\nJust clone the project and run `cargo test`.\nYou can see how we test in [.github/workflows](.github/workflows/)\n\n#### Snapshots\nWe use [insta](https://github.com/mitsuhiko/insta) for snapshot testing, which helps us detect changes in output formats and behavior. To work with snapshots:\n\n1. Install the insta CLI tool:\n```sh\ncargo install cargo-insta\n```\n\n2. Run tests and review/update snapshots:\n```sh\ncargo insta test --review\n```\n\nFor CLI-related changes, we maintain separate snapshots of binary command outputs. To update these CLI snapshots:\n```sh\nLOCO_CI_MODE=true TRYCMD=overwrite cargo test\n```\n\n## Docs\n\nThe documentation consists of two main components:\n\n+ The [loco.rs website](https://loco.rs) with its source code available [here](./docs-site/).\n+ RustDocs.\n\nTo reduce duplication in documentation and examples, we use [snipdoc](https://github.com/kaplanelad/snipdoc). As part of our CI process, we ensure that the documentation remains consistent.\n\nUpdating the Documentation\n+ Download [snipdoc](https://github.com/kaplanelad/snipdoc).\n+ Create the snippet in the [yaml file](./snipdoc.yml) or inline the code.\n+ Run `snipdoc run`.\n\nTo run the documentation site locally, we use [zola](https://www.getzola.org/) so you'll need to [install](https://www.getzola.org/documentation/getting-started/installation/) it. The documentation site works with zola version `0.19.2` and since zola still has breaking changes, we make no guarantees about other versions.\n\nRunning the local preview\n+ `cd docs-site`\n+ `npm run serve` or `zola serve`\n\n## Open A Pull Request\n\nThe most recommended and straightforward method to contribute changes to the project involves forking it on GitHub and subsequently initiating a pull request to propose the integration of your modifications into our repository.\n\nChanges a starters project are not recommended. read more [here](./starters/README.md)\n\n### In Your Pull Request Description, Include:\n- References to any bugs fixed by the change\n- Informative notes for the reviewer, aiding their comprehension of the necessity for the change or providing insights on how to conduct a more effective review.\n- A clear explanation of how you tested your changes.\n\n### Your PR must also:\n- be based on the master branch\n- adhere to the code [style](#code-style)\n- Successfully passes the [test suite](#testing)\n"
        },
        {
          "name": "Cargo.toml",
          "type": "blob",
          "size": 5.396484375,
          "content": "[workspace]\nmembers = [\"xtask\", \"loco-gen\"]\nexclude = [\"starters\"]\n\n[workspace.package]\nedition = \"2021\"\nrust-version = \"1.70\"\nlicense = \"Apache-2.0\"\n\n[package]\nname = \"loco-rs\"\nversion = \"0.14.0\"\ndescription = \"The one-person framework for Rust\"\nhomepage = \"https://loco.rs/\"\ndocumentation = \"https://docs.rs/loco-rs\"\nauthors = [\"Dotan Nahum <dotan@rng0.io>\", \"Elad Kaplan <kaplan.elad@gmail.com>\"]\nrepository = \"https://github.com/loco-rs/loco\"\nlicense.workspace = true\nedition.workspace = true\nrust-version.workspace = true\n\n# See more keys and their definitions at https://doc.rust-lang.org/cargo/reference/manifest.html\n\n[features]\ndefault = [\n    \"auth_jwt\",\n    \"cli\",\n    \"with-db\",\n    \"cache_inmem\",\n    \"bg_redis\",\n    \"bg_pg\",\n    \"bg_sqlt\",\n]\nauth_jwt = [\"dep:jsonwebtoken\"]\ncli = [\"dep:clap\"]\ntesting = [\"dep:axum-test\", \"dep:scraper\"]\nwith-db = [\"dep:sea-orm\", \"dep:sea-orm-migration\", \"loco-gen/with-db\"]\n# Storage features\nall_storage = [\"storage_aws_s3\", \"storage_azure\", \"storage_gcp\"]\nstorage_aws_s3 = [\"opendal/services-s3\"]\nstorage_azure = [\"opendal/services-azblob\"]\nstorage_gcp = [\"opendal/services-gcs\"]\n# Cache feature\ncache_inmem = [\"dep:moka\"]\nbg_redis = [\"dep:rusty-sidekiq\", \"dep:bb8\"]\nbg_pg = [\"dep:sqlx\", \"dep:ulid\"]\nbg_sqlt = [\"dep:sqlx\", \"dep:ulid\"]\n## Testing feature flags\nintegration_test = []\n\n[dependencies]\nloco-gen = { version = \"0.14.0\", path = \"./loco-gen\" }\nbacktrace_printer = { version = \"1.3.0\" }\n\n# cli\nclap = { version = \"4.4.7\", features = [\"derive\"], optional = true }\ncolored = { workspace = true }\nreqwest = { version = \"0.12.7\", features = [\n    \"charset\",\n    \"http2\",\n    \"json\",\n    \"macos-system-configuration\",\n    \"rustls-tls\",\n], default-features = false }\n\n\nsea-orm = { version = \"1.1.0\", features = [\n    \"sqlx-postgres\",        # `DATABASE_DRIVER` feature\n    \"sqlx-sqlite\",\n    \"runtime-tokio-rustls\",\n    \"macros\",\n], optional = true }\n\ntokio = { version = \"1.33.0\", default-features = false }\ntokio-util = \"0.7.10\"\n# the rest\n\nserde = { workspace = true }\nserde_json = { workspace = true }\nserde_yaml = \"0.9\"\nserde_variant = \"0.1.2\"\ntoml = \"0.8\"\n\n\nasync-trait = { workspace = true }\n\naxum = { workspace = true }\naxum-extra = { version = \"0.10\", features = [\"cookie\"] }\nregex = { workspace = true }\nfs-err = \"2.11.0\"\n# mailer\ntera = \"1.19.1\"\nthousands = \"0.2.0\"\nheck = \"0.4.0\"\ncruet = \"0.13.0\"\nlettre = { version = \"0.11.4\", default-features = false, features = [\n    \"builder\",\n    \"hostname\",\n    \"smtp-transport\",\n    \"tokio1-rustls-tls\",\n] }\ninclude_dir = \"0.7.3\"\nthiserror = { workspace = true }\ntracing = { workspace = true }\ntracing-subscriber = { version = \"0.3.16\", features = [\"env-filter\"] }\ntracing-appender = \"0.2.3\"\n\nduct = { version = \"0.13.6\" }\nduct_sh = { version = \"0.13.7\" }\n\ntower-http = { workspace = true }\nbyte-unit = \"4.0.19\"\n\nargon2 = { version = \"0.5.2\", features = [\"std\"] }\nrand = { version = \"0.8.5\", features = [\"std\"] }\njsonwebtoken = { version = \"9.3.0\", optional = true }\nvalidator = { version = \"0.19.0\", features = [\"derive\"] }\nfutures-util = \"0.3\"\ntower = { workspace = true }\nhyper = \"1.1\"\nmime = \"0.3\"\nbytes = \"1.1\"\nipnetwork = \"0.20.0\"\nsemver = \"1\"\n\naxum-test = { version = \"17.0.1\", optional = true }\n\nchrono = { workspace = true }\ncfg-if = \"1\"\n\nuuid = { version = \"1.10.0\", features = [\"v4\", \"fast-rng\"] }\n\n# File Upload\nopendal = { version = \"0.50.2\", default-features = false, features = [\n    \"services-memory\",\n    \"services-fs\",\n] }\n\n# cache\nmoka = { version = \"0.12.7\", features = [\"sync\"], optional = true }\n\n# Scheduler\ntokio-cron-scheduler = { version = \"0.11.0\", features = [\"signal\"] }\nenglish-to-cron = { version = \"0.1.2\" }\n\n# bg_sqlt: sqlite workers\n# bg_pg: postgres workers\nsqlx = { version = \"0.8.2\", default-features = false, features = [\n    \"postgres\",\n    \"chrono\",\n    \"sqlite\",\n], optional = true }\nulid = { version = \"1\", optional = true }\n\n# bg_redis: redis workers\nrusty-sidekiq = { version = \"0.11.0\", default-features = false, optional = true }\nbb8 = { version = \"0.8.1\", optional = true }\n\nscraper = { version = \"0.21.0\", features = [\"deterministic\"], optional = true }\n\n[workspace.dependencies]\ncolored = { version = \"2\" }\nchrono = { version = \"0.4\", features = [\"serde\"] }\ntracing = \"0.1.40\"\nregex = \"1\"\nthiserror = \"1\"\nserde = \"1\"\nserde_json = \"1\"\nasync-trait = { version = \"0.1.74\" }\naxum = { version = \"0.8.1\", features = [\"macros\"] }\ntower = \"0.4\"\ntower-http = { version = \"0.6.1\", features = [\n    \"trace\",\n    \"catch-panic\",\n    \"timeout\",\n    \"add-extension\",\n    \"cors\",\n    \"fs\",\n    \"set-header\",\n    \"compression-full\",\n] }\n\n[dependencies.sea-orm-migration]\noptional = true\nversion = \"1.0.0\"\nfeatures = [\n    # Enable at least one `ASYNC_RUNTIME` and `DATABASE_DRIVER` feature if you want to run migration via CLI.\n    # View the list of supported features at https://www.sea-ql.org/SeaORM/docs/install-and-config/database-and-async-runtime.\n    # e.g.\n    \"runtime-tokio-rustls\", # `ASYNC_RUNTIME` feature\n    \"sqlx-postgres\",        # `DATABASE_DRIVER` feature\n    \"sqlx-sqlite\",\n]\n\n[package.metadata.docs.rs]\nfeatures = [\"testing\"]\n\n[dev-dependencies]\nloco-rs = { path = \".\", features = [\"testing\"] }\nrstest = \"0.21.0\"\ninsta = { version = \"1.34.0\", features = [\"redactions\", \"yaml\", \"filters\"] }\ntree-fs = { version = \"0.2.1\" }\nreqwest = { version = \"0.12.7\" }\nserial_test = \"3.1.1\"\ntower = { workspace = true, features = [\"util\"] }\nsqlx = { version = \"0.8.2\", default-features = false, features = [\n    \"macros\",\n    \"json\",\n    \"postgres\",\n    \"chrono\",\n    \"sqlite\",\n] }\n"
        },
        {
          "name": "DEVELOPMENT.md",
          "type": "blob",
          "size": 5.1884765625,
          "content": "## Blessed dependencies maintenance and `loco doctor`\n\nLoco contain a few major and \"blessed\" dependencies, these appear **both** in an app that was generated at the surface level in their `Cargo.toml` and in the core Loco framework.\n\nIf stale, may require an upgrade as a must.\n\nExample for such dependencies:\n\n* The `sea-orm-cli` - while Loco uses `SeaORM`, it uses the `SeaORM` CLI to generate entities, and so there may be an incompatibility if `SeaORM` has a too large breaking change between their CLI (which ships separately) and their framework. \n* `axum`\n* etc.\n\nThis is why we are checking these automatically as part of `loco doctor`.\n\nWe keep minimal version requirements for these. As a maintainer, you can update these **minimal** versions, only if required in [`doctor.rs`](src/doctor.rs).\n\n\n\n## Running Tests\n\nBefore running tests make sure that:\n\n[ ] redis is running\n[ ] starters/saas frontend package is built:\n\n```\n$ cd starters/saas/frontend\n$ npm i -g pnpm\n$ pnpm i && pnpm build\n```\n\nRunning all tests should be done with:\n\n```\n$ cargo xtask test\n```\n\n## Rebuilding your database and local generated entities\n\nThis should write out a fresh DB structure (drops and migrates):\n\n```\n$ cargo loco db reset\n```\n\nAnd then, the entities generators connect to that newly minted DB, to generate a corresponding entities code:\n\n```\n$ cargo loco db entities\n```\n\n## Publishing a new version\n\n**Test your changes**\n\n* [ ] Ensure you have the necessary local resources, such as `DB`/`Redis`, by executing the command `cargo loco doctor  --environment test`. In case you don't have them, refer to the relevant documentation section for guidance.\n* [ ] run `cargo test` on the root to test Loco itself\n* [ ] cd `examples/demo` and run `cargo test` to test our \"driver app\" which exercises the framework in various ways\n* [ ] push your changes to Github to get the CI running and testing in various additional configurations that you don't have\n* [ ] CI should pass. Take note that all `starters-*` CI are using a **fixed version** of Loco and are not seeing your changes yet\n\n\n**Actually bump version + test and align starters**\n\n* [ ] in project root, run `cargo xtask bump-version` and give it the next version. Versions are without `v` prefix. Example: `0.1.3`. \n* [ ] Did the xtask testing workflow fail?\n  * [ ] YES: fix errors, and re-run `cargo xtask bump-version` **with the same version as before**.\n  * [ ] NO: great, move to publishing\n* [ ] Your repo may be dirty with fixes. Now that tests are passing locally commit the changes. Then run `cargo publish` to publish the next Loco version (remember: the starters at this point are pointing to the **next version already**, so we don't want to push until publish finished)\n* [ ] When publish finished successfully, push your changes to github\n* [ ] Wait for CI to finish. You want to be focusing more at the starters CI, because they will now pull the new version.\n* [ ] Did CI fail?\n  * [ ] YES: This means you had a circumstance that's not predictable (e.g. some operating system issue). Fix the issue and **repeat the bumping process, advance a new version**.\n  * [ ] NO: all good! you're done.\n\n**Book keeping**\n\n* [ ] Update changelog: (1) move vnext to be that new version of yours, (2) create a blank vnext\n* [ ] Think about if any of the items in the new version needs new documentation or update to the documentation -- and do it\n## Errors\n\nErrors are done with `thiserror`. We adopt a minimalistic approach to errors.\n\n* We try to have _one error kind_ for the entirety of Loco.\n* Errors that cannot be handled, are _informative_ and so can be opaque (we don't offer deep matching on those)\n* Errors that can be handled and reasoned upon should be able to be matched and extract good knowledge from\n* To users, error should _not be cryptic_, and should indicate how to fix issues as much as possible, or point to the issue precisely\n\n\n### Auto conversions\n\nWhen possible use `from` conversions.\n\n```rust\n    #[error(transparent)]\n    JSON(#[from] serde_json::Error),\n```\n\nWhen complicated, implement a `From` trait yourself. This is done to _centralize_ errors into one place and not litter needless `map_err` code which holds error conversion logic (an exception is Context, see below).\n\n\n### Context\n\nWhen you know a user might need context, resort to manually shaping the error with extra information. First, define the error:\n\n```rust\n    #[error(\"cannot parse `{1}`: {0}\")]\n    YAMLFile(#[source] serde_yaml::Error, String),\n```\n\nThen, shape it:\n\n```rust\n  serde_yaml::from_str(&rendered)\n      .map_err(|err| Error::YAMLFile(err, selected_path.to_string_lossy().to_string()))\n```\n\nIn this example, the information about where `rendered` came from was long lost at the `serde_yaml::from_str` callsite. Which is why errors were cryptic indicating bad YAML format, but not where it comes from (which file).\n\nIn this case, we duplicate the YAML error type, leave one of those for auto conversions with `from`, where we don't have a file, and create a new specialized error type with the file information: `YAMLFile`.\n\n## The `CONTRIBUTORS` comment\n\nSome files contain a special `CONTRIBUTORS` comment. This comment should\ncontain context, special notes for that module, and a checklist if needed, so please make sure to follow it.\n\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 10.689453125,
          "content": "                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\nTERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n1.  Definitions.\n\n    \"License\" shall mean the terms and conditions for use, reproduction,\n    and distribution as defined by Sections 1 through 9 of this document.\n\n    \"Licensor\" shall mean the copyright owner or entity authorized by\n    the copyright owner that is granting the License.\n\n    \"Legal Entity\" shall mean the union of the acting entity and all\n    other entities that control, are controlled by, or are under common\n    control with that entity. For the purposes of this definition,\n    \"control\" means (i) the power, direct or indirect, to cause the\n    direction or management of such entity, whether by contract or\n    otherwise, or (ii) ownership of fifty percent (50%) or more of the\n    outstanding shares, or (iii) beneficial ownership of such entity.\n\n    \"You\" (or \"Your\") shall mean an individual or Legal Entity\n    exercising permissions granted by this License.\n\n    \"Source\" form shall mean the preferred form for making modifications,\n    including but not limited to software source code, documentation\n    source, and configuration files.\n\n    \"Object\" form shall mean any form resulting from mechanical\n    transformation or translation of a Source form, including but\n    not limited to compiled object code, generated documentation,\n    and conversions to other media types.\n\n    \"Work\" shall mean the work of authorship, whether in Source or\n    Object form, made available under the License, as indicated by a\n    copyright notice that is included in or attached to the work\n    (an example is provided in the Appendix below).\n\n    \"Derivative Works\" shall mean any work, whether in Source or Object\n    form, that is based on (or derived from) the Work and for which the\n    editorial revisions, annotations, elaborations, or other modifications\n    represent, as a whole, an original work of authorship. For the purposes\n    of this License, Derivative Works shall not include works that remain\n    separable from, or merely link (or bind by name) to the interfaces of,\n    the Work and Derivative Works thereof.\n\n    \"Contribution\" shall mean any work of authorship, including\n    the original version of the Work and any modifications or additions\n    to that Work or Derivative Works thereof, that is intentionally\n    submitted to Licensor for inclusion in the Work by the copyright owner\n    or by an individual or Legal Entity authorized to submit on behalf of\n    the copyright owner. For the purposes of this definition, \"submitted\"\n    means any form of electronic, verbal, or written communication sent\n    to the Licensor or its representatives, including but not limited to\n    communication on electronic mailing lists, source code control systems,\n    and issue tracking systems that are managed by, or on behalf of, the\n    Licensor for the purpose of discussing and improving the Work, but\n    excluding communication that is conspicuously marked or otherwise\n    designated in writing by the copyright owner as \"Not a Contribution.\"\n\n    \"Contributor\" shall mean Licensor and any individual or Legal Entity\n    on behalf of whom a Contribution has been received by Licensor and\n    subsequently incorporated within the Work.\n\n2.  Grant of Copyright License. Subject to the terms and conditions of\n    this License, each Contributor hereby grants to You a perpetual,\n    worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n    copyright license to reproduce, prepare Derivative Works of,\n    publicly display, publicly perform, sublicense, and distribute the\n    Work and such Derivative Works in Source or Object form.\n\n3.  Grant of Patent License. Subject to the terms and conditions of\n    this License, each Contributor hereby grants to You a perpetual,\n    worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n    (except as stated in this section) patent license to make, have made,\n    use, offer to sell, sell, import, and otherwise transfer the Work,\n    where such license applies only to those patent claims licensable\n    by such Contributor that are necessarily infringed by their\n    Contribution(s) alone or by combination of their Contribution(s)\n    with the Work to which such Contribution(s) was submitted. If You\n    institute patent litigation against any entity (including a\n    cross-claim or counterclaim in a lawsuit) alleging that the Work\n    or a Contribution incorporated within the Work constitutes direct\n    or contributory patent infringement, then any patent licenses\n    granted to You under this License for that Work shall terminate\n    as of the date such litigation is filed.\n\n4.  Redistribution. You may reproduce and distribute copies of the\n    Work or Derivative Works thereof in any medium, with or without\n    modifications, and in Source or Object form, provided that You\n    meet the following conditions:\n\n    (a) You must give any other recipients of the Work or\n    Derivative Works a copy of this License; and\n\n    (b) You must cause any modified files to carry prominent notices\n    stating that You changed the files; and\n\n    (c) You must retain, in the Source form of any Derivative Works\n    that You distribute, all copyright, patent, trademark, and\n    attribution notices from the Source form of the Work,\n    excluding those notices that do not pertain to any part of\n    the Derivative Works; and\n\n    (d) If the Work includes a \"NOTICE\" text file as part of its\n    distribution, then any Derivative Works that You distribute must\n    include a readable copy of the attribution notices contained\n    within such NOTICE file, excluding those notices that do not\n    pertain to any part of the Derivative Works, in at least one\n    of the following places: within a NOTICE text file distributed\n    as part of the Derivative Works; within the Source form or\n    documentation, if provided along with the Derivative Works; or,\n    within a display generated by the Derivative Works, if and\n    wherever such third-party notices normally appear. The contents\n    of the NOTICE file are for informational purposes only and\n    do not modify the License. You may add Your own attribution\n    notices within Derivative Works that You distribute, alongside\n    or as an addendum to the NOTICE text from the Work, provided\n    that such additional attribution notices cannot be construed\n    as modifying the License.\n\n    You may add Your own copyright statement to Your modifications and\n    may provide additional or different license terms and conditions\n    for use, reproduction, or distribution of Your modifications, or\n    for any such Derivative Works as a whole, provided Your use,\n    reproduction, and distribution of the Work otherwise complies with\n    the conditions stated in this License.\n\n5.  Submission of Contributions. Unless You explicitly state otherwise,\n    any Contribution intentionally submitted for inclusion in the Work\n    by You to the Licensor shall be under the terms and conditions of\n    this License, without any additional terms or conditions.\n    Notwithstanding the above, nothing herein shall supersede or modify\n    the terms of any separate license agreement you may have executed\n    with Licensor regarding such Contributions.\n\n6.  Trademarks. This License does not grant permission to use the trade\n    names, trademarks, service marks, or product names of the Licensor,\n    except as required for reasonable and customary use in describing the\n    origin of the Work and reproducing the content of the NOTICE file.\n\n7.  Disclaimer of Warranty. Unless required by applicable law or\n    agreed to in writing, Licensor provides the Work (and each\n    Contributor provides its Contributions) on an \"AS IS\" BASIS,\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n    implied, including, without limitation, any warranties or conditions\n    of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n    PARTICULAR PURPOSE. You are solely responsible for determining the\n    appropriateness of using or redistributing the Work and assume any\n    risks associated with Your exercise of permissions under this License.\n\n8.  Limitation of Liability. In no event and under no legal theory,\n    whether in tort (including negligence), contract, or otherwise,\n    unless required by applicable law (such as deliberate and grossly\n    negligent acts) or agreed to in writing, shall any Contributor be\n    liable to You for damages, including any direct, indirect, special,\n    incidental, or consequential damages of any character arising as a\n    result of this License or out of the use or inability to use the\n    Work (including but not limited to damages for loss of goodwill,\n    work stoppage, computer failure or malfunction, or any and all\n    other commercial damages or losses), even if such Contributor\n    has been advised of the possibility of such damages.\n\n9.  Accepting Warranty or Additional Liability. While redistributing\n    the Work or Derivative Works thereof, You may choose to offer,\n    and charge a fee for, acceptance of support, warranty, indemnity,\n    or other liability obligations and/or rights consistent with this\n    License. However, in accepting such obligations, You may act only\n    on Your own behalf and on Your sole responsibility, not on behalf\n    of any other Contributor, and only if You agree to indemnify,\n    defend, and hold each Contributor harmless for any liability\n    incurred by, or claims asserted against, such Contributor by reason\n    of your accepting any such warranty or additional liability.\n\nEND OF TERMS AND CONDITIONS\n\nAPPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"[]\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\nCopyright [2022] Dotan Nahum, Elad Kaplan\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n"
        },
        {
          "name": "README-pt_BR.md",
          "type": "blob",
          "size": 6.228515625,
          "content": " <div align=\"center\">\n\n   <img src=\"https://github.com/loco-rs/loco/assets/83390/992d215a-3cd3-42ee-a1c7-de9fd25a5bac\"/>\n\n   <h1>Bem-vindo ao Loco</h1>\n\n   <h3>\n   <!-- <snip id=\"description\" inject_from=\"yaml\"> -->\n🚂 Loco is Rust on Rails.\n<!--</snip> -->\n   </h3>\n\n   [![crate](https://img.shields.io/crates/v/loco-rs.svg)](https://crates.io/crates/loco-rs)\n   [![docs](https://docs.rs/loco-rs/badge.svg)](https://docs.rs/loco-rs)\n   [![Discord channel](https://img.shields.io/badge/discord-Join-us)](https://discord.gg/fTvyBzwKS8)\n\n </div>\n\n[English](./README.md) · [中文](./README-zh_CN.md) · [Français](./README.fr.md) · Portuguese (Brazil) ・ [日本語](./README.ja.md) · [한국어](./README.ko.md) · [Русский](./README.ru.md)\n\n\n## O que é o Loco?\n`Loco` é fortemente inspirado no Rails. Se você conhece Rails e Rust, se sentirá em casa. Se você só conhece Rails e é novo em Rust, achará o Loco refrescante. Não presumimos que você conheça o Rails.\n\nPara uma imersão mais profunda em como o Loco funciona, incluindo guias detalhados, exemplos e referências da API, confira nosso [site de documentação](https://loco.rs).\n\n\n## Recursos do Loco:\n\n* `Convenção sobre Configuração:` Semelhante ao Ruby on Rails, o Loco enfatiza simplicidade e produtividade ao reduzir a necessidade de código boilerplate. Ele utiliza padrões sensatos, permitindo que os desenvolvedores se concentrem em escrever a lógica de negócios em vez de perder tempo com configuração.\n\n* `Desenvolvimento Rápido:` Com o objetivo de alta produtividade para o desenvolvedor, o design do Loco se concentra em reduzir código boilerplate e fornecer APIs intuitivas, permitindo que os desenvolvedores iteren rapidamente e construam protótipos com esforço mínimo.\n\n* `Integração ORM:` Modele seu negócio com entidades robustas, eliminando a necessidade de escrever SQL. Defina relacionamentos, validações e lógica personalizada diretamente em suas entidades para melhorar a manutenção e escalabilidade.\n\n* `Controladores:` Manipule os parâmetros de solicitações web, corpo, validação e renderize uma resposta que é consciente do conteúdo. Usamos Axum para o melhor desempenho, simplicidade e extensibilidade. Os controladores também permitem que você construa facilmente middlewares, que podem ser usados para adicionar lógica como autenticação, registro ou tratamento de erros antes de passar as solicitações para as ações principais do controlador.\n\n* `Views:` O Loco pode se integrar com mecanismos de template para gerar conteúdo HTML dinâmico a partir de templates.\n\n* `Trabalhos em segundo plano:` Realize trabalhos intensivos de computação ou I/O em segundo plano com uma fila baseada em Redis ou com threads. Implementar um trabalhador é tão simples quanto implementar uma função de execução para o trait Worker.\n\n* `Scheduler:` Simplifica o tradicional e frequentemente complicado sistema crontab, tornando mais fácil e elegante agendar tarefas ou scripts shell.\n\n* `Mailers:` Um mailer entregará e-mails em segundo plano usando a infraestrutura de trabalhador existente do loco. Tudo será transparente para você.\n\n* `Armazenamento:` No Armazenamento do Loco, facilitamos o trabalho com arquivos por meio de várias operações. O armazenamento pode ser em memória, no disco ou utilizar serviços em nuvem, como AWS S3, GCP e Azure.\n\n* `Cache:` O Loco fornece uma camada de cache para melhorar o desempenho da aplicação armazenando dados acessados frequentemente.\n\nPara ver mais recursos do Loco, confira nosso [site de documentação](https://loco.rs/docs/getting-started/tour/).\n\n\n\n## Começando\n<!-- <snip id=\"quick-installation-command\" inject_from=\"yaml\" template=\"sh\"> -->\n```sh\ncargo install loco\ncargo install sea-orm-cli # Only when DB is needed\n```\n<!-- </snip> -->\n\nAgora você pode criar seu novo aplicativo (escolha \"`SaaS` app\").\n\n\n<!-- <snip id=\"loco-cli-new-from-template\" inject_from=\"yaml\" template=\"sh\"> -->\n```sh\n❯ loco new\n✔ ❯ App name? · myapp\n✔ ❯ What would you like to build? · Saas App with client side rendering\n✔ ❯ Select a DB Provider · Sqlite\n✔ ❯ Select your background worker type · Async (in-process tokio async tasks)\n\n🚂 Loco app generated successfully in:\nmyapp/\n\n- assets: You've selected `clientside` for your asset serving configuration.\n\nNext step, build your frontend:\n  $ cd frontend/\n  $ npm install && npm run build\n```\n<!-- </snip> -->\n\n Agora execute `cd` no seu `myapp` e inicie seu aplicativo:\n<!-- <snip id=\"starting-the-server-command-with-output\" inject_from=\"yaml\" template=\"sh\"> -->\n```sh\n$ cargo loco start\n\n                      ▄     ▀\n                                ▀  ▄\n                  ▄       ▀     ▄  ▄ ▄▀\n                                    ▄ ▀▄▄\n                        ▄     ▀    ▀  ▀▄▀█▄\n                                          ▀█▄\n▄▄▄▄▄▄▄  ▄▄▄▄▄▄▄▄▄   ▄▄▄▄▄▄▄▄▄▄▄ ▄▄▄▄▄▄▄▄▄ ▀▀█\n██████  █████   ███ █████   ███ █████   ███ ▀█\n██████  █████   ███ █████   ▀▀▀ █████   ███ ▄█▄\n██████  █████   ███ █████       █████   ███ ████▄\n██████  █████   ███ █████   ▄▄▄ █████   ███ █████\n██████  █████   ███  ████   ███ █████   ███ ████▀\n  ▀▀▀██▄ ▀▀▀▀▀▀▀▀▀▀  ▀▀▀▀▀▀▀▀▀▀  ▀▀▀▀▀▀▀▀▀▀ ██▀\n      ▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀\n                https://loco.rs\n\nlistening on port 5150\n```\n<!-- </snip> -->\n\n## Impulsionado pelo Loco\n+ [SpectralOps](https://spectralops.io) - vários serviços impulsionados pelo framework Loco\n+ [Nativish](https://nativi.sh) - backend do aplicativo impulsionado pelo framework Loco\n\n## Contribuidores ✨\nAgradecimentos a essas pessoas maravilhosas:\n\n<a href=\"https://github.com/loco-rs/loco/graphs/contributors\">\n  <img src=\"https://contrib.rocks/image?repo=loco-rs/loco\" />\n</a>\n"
        },
        {
          "name": "README-zh_CN.md",
          "type": "blob",
          "size": 1.564453125,
          "content": " <div align=\"center\">\n\n   <img src=\"https://github.com/loco-rs/loco/assets/83390/992d215a-3cd3-42ee-a1c7-de9fd25a5bac\"/>\n\n   <h1>Loco</h1>\n\n\n   [![crate](https://img.shields.io/crates/v/loco-rs.svg)](https://crates.io/crates/loco-rs)\n   [![docs](https://docs.rs/loco-rs/badge.svg)](https://docs.rs/loco-rs)\n   [![Discord channel](https://img.shields.io/badge/discord-Join-us)](https://discord.gg/fTvyBzwKS8)\n\n </div>\n\n[English](./README.md) · 中文 · [Français](./README.fr.md) · [Portuguese (Brazil)](./README-pt_BR.md) ・ [日本語](./README.ja.md) · [한국어](./README.ko.md) · [Русский](./README.ru.md)\n\nLoco 是一个用 Rust 编写的 Web 框架，类似于 Rails。Loco 提供快速构建 Web 应用的功能，并且允许创建自定义任务，可以通过 CLI 运行。\n\n## 特性\n\n- **简单的 API**: 使用 Rust 的强类型系统确保安全性和可靠性。\n- **快速开发**: 提供快速构建 Web 应用的工具和模板。\n- **CLI 支持**: 可以创建和运行自定义 CLI 任务。\n- **灵活性**: 支持自定义配置和扩展。\n\n## 安装\n\n通过 Cargo 安装 Loco:\n\n```sh\ncargo install loco\n```\n\n## 快速开始\n\n创建一个新的 Loco 项目:\n\n```sh\nloco new my_project\ncd my_project\n```\n\n启动开发服务器:\n\n```sh\nloco server\n```\n\n## 贡献\n\n欢迎对 Loco 的贡献！请阅读 [CONTRIBUTING.md](CONTRIBUTING.md) 了解更多信息。\n\n## 许可证\n\nLoco 在 MIT 许可证下发布。详情请参阅 [LICENSE](LICENSE)。\n\n---\n\nFor more details, you can visit the [original README file](https://github.com/loco-rs/loco/blob/master/README.md).\n"
        },
        {
          "name": "README.fr.md",
          "type": "blob",
          "size": 6.529296875,
          "content": " <div align=\"center\">\n\n   <img src=\"https://github.com/loco-rs/loco/assets/83390/992d215a-3cd3-42ee-a1c7-de9fd25a5bac\"/>\n\n   <h1>Loco vous souhaite la bienvenue</h1>\n\n   <h3>\n🚂 Loco c'est Rust on Rails. \n   </h3>\n\n   [![crate](https://img.shields.io/crates/v/loco-rs.svg)](https://crates.io/crates/loco-rs)\n   [![docs](https://docs.rs/loco-rs/badge.svg)](https://docs.rs/loco-rs)\n   [![Discord channel](https://img.shields.io/badge/discord-Join-us)](https://discord.gg/fTvyBzwKS8)\n\n </div>\n\n[English](./README.md) · [中文](./README-zh_CN.md) · Français · [Portuguese (Brazil)](./README-pt_BR.md) ・ [日本語](./README.ja.md) · [한국어](./README.ko.md) · [Русский](./README.ru.md)\n\n## À propos de Loco\n`Loco` est fortement inspiré de Rails. Si vous connaissez Rails et Rust, vous vous sentirez chez vous. Si vous ne connaissez que Rails et que vous êtes nouveau sur Rust, vous trouverez Loco rafraîchissant. Nous ne supposons pas que vous connaissez Rails.\nPour un aperçu plus approfondie du fonctionnement de Loco, y compris des guides détaillés, des exemples et des références API, consultez notre [site Web de documentation](https://loco.rs).\n\n## Caractéristiques de Loco:\n\n* `Convention plutôt que configuration`: Semblable à Ruby on Rails, Loco met l'accent sur la simplicité et la productivité en réduisant le besoin de code passe-partout. Il utilise des valeurs par défaut raisonnables, permettant aux développeurs de se concentrer sur l'écriture de la logique métier plutôt que de consacrer du temps à la configuration.\n\n* `Développement rapide`: Visant une productivité élevée des développeurs, la conception de Loco se concentre sur la réduction du code passe-partout et la fourniture d'API intuitives, permettant aux développeurs d'intégrer rapidement et de créer des prototypes avec un minimum d'effort.\n\n* `Intégration ORM`: Modélisez avec des entités robustes, éliminant le besoin d'écrire du SQL. Définissez les relations, la validation et la logique sur mesure directement sur vos entités pour une maintenabilité et une évolutivité améliorées.\n\n* `Contrôleurs`: Gérez les paramètres et le contenu des requêtes Web, la validation des requêtes et affichez une réponse tenant compte du contenu. Nous utilisons Axum pour une meilleure performance, simplicité et extensibilité. Les contrôleurs vous permettent également de créer facilement des middlewares, qui peuvent être utilisés pour ajouter une logique telle que l'authentification, la journalisation (logging) ou la gestion des erreurs avant de transmettre les requêtes aux actions du contrôleur principal.\n\n* `Vues`: Loco peut s'intégrer aux moteurs de _templates_ pour générer du contenu HTML dynamique à partir de modèles template.\n\n* `Tâches en arrière-plan`: Effectuer des calculs informatiques ou d'I/O (Entrée/Sortie) intensives en arrière-plan avec une file d'attente sauvegardée Redis ou avec des threads. Implémenter un travailleur (worker) est aussi simple que d'implémenter une fonction d'exécution pour le trait Worker.\n\n* `Scheduler`: Simplifie le système crontab traditionnel, souvent encombrant, en rendant plus facile et plus élégante la planification de tâches ou de scripts shell.\n\n* `Mailers`: Un logiciel de messagerie enverra des e-mails en arrière-plan en utilisant l'infrastructure de travail d'arrière-plan de Loco existante. Tout se passera sans problème pour vous.\n\n* `Stockage`: Loco Storage facilite le travail avec des fichiers via plusieurs opérations. Le stockage peut être en mémoire, sur disque ou utiliser des services cloud tels qu'AWS S3, GCP et Azure.\n\n* `Cache :` Loco fournit une strate cache pour améliorer les performances des applications en stockant les données fréquemment consultées.\n\nPour en savoir plus sur les fonctionnalités de Loco, consultez notre [site Web de documentation](https://loco.rs/docs/getting-started/tour/).\n\n\n## Commencez rapidement\n<!-- <snip id=\"quick-installation-command\" inject_from=\"yaml\" template=\"sh\"> -->\n```sh\ncargo install loco\ncargo install sea-orm-cli # Only when DB is needed\n```\n<!-- </snip> -->\n\nVous pouvez maintenant créer votre nouvelle application (choisissez \"`SaaS` app\").\n\n\n<!-- <snip id=\"loco-cli-new-from-template\" inject_from=\"yaml\" template=\"sh\"> -->\n```sh\n❯ loco new\n✔ ❯ App name? · myapp\n✔ ❯ What would you like to build? · Saas App with client side rendering\n✔ ❯ Select a DB Provider · Sqlite\n✔ ❯ Select your background worker type · Async (in-process tokio async tasks)\n\n🚂 Loco app generated successfully in:\nmyapp/\n\n- assets: You've selected `clientside` for your asset serving configuration.\n\nNext step, build your frontend:\n  $ cd frontend/\n  $ npm install && npm run build\n```\n<!-- </snip> -->\n\nMaintenant, faite `cd` dans votre `myapp` et démarrez votre application:\n\n<!-- <snip id=\"starting-the-server-command-with-output\" inject_from=\"yaml\" template=\"sh\"> -->\n```sh\n$ cargo loco start\n\n                      ▄     ▀\n                                ▀  ▄\n                  ▄       ▀     ▄  ▄ ▄▀\n                                    ▄ ▀▄▄\n                        ▄     ▀    ▀  ▀▄▀█▄\n                                          ▀█▄\n▄▄▄▄▄▄▄  ▄▄▄▄▄▄▄▄▄   ▄▄▄▄▄▄▄▄▄▄▄ ▄▄▄▄▄▄▄▄▄ ▀▀█\n██████  █████   ███ █████   ███ █████   ███ ▀█\n██████  █████   ███ █████   ▀▀▀ █████   ███ ▄█▄\n██████  █████   ███ █████       █████   ███ ████▄\n██████  █████   ███ █████   ▄▄▄ █████   ███ █████\n██████  █████   ███  ████   ███ █████   ███ ████▀\n  ▀▀▀██▄ ▀▀▀▀▀▀▀▀▀▀  ▀▀▀▀▀▀▀▀▀▀  ▀▀▀▀▀▀▀▀▀▀ ██▀\n      ▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀\n                https://loco.rs\n\nlistening on port 5150\n```\n<!-- </snip> -->\n\n## Servi par Loco\n+ [SpectralOps](https://spectralops.io) - divers services servi par le framework Loco\n+ [Nativish](https://nativi.sh) - app backend servi par le framework Loco\n\n## Contributeurs ✨\nMerci à ces personnes formidables :\n\n<a href=\"https://github.com/loco-rs/loco/graphs/contributors\">\n  <img src=\"https://contrib.rocks/image?repo=loco-rs/loco\" />\n</a>\n\n"
        },
        {
          "name": "README.ja.md",
          "type": "blob",
          "size": 6.3349609375,
          "content": "<div align=\"center\">\n\n   <img src=\"https://github.com/loco-rs/loco/assets/83390/992d215a-3cd3-42ee-a1c7-de9fd25a5bac\"/>\n\n   <h1>Locoへようこそ</h1>\n\n   <h3>\n🚂 LocoはRust on Railsです。\n   </h3>\n\n   [![crate](https://img.shields.io/crates/v/loco-rs.svg)](https://crates.io/crates/loco-rs)\n   [![docs](https://docs.rs/loco-rs/badge.svg)](https://docs.rs/loco-rs)\n   [![Discord channel](https://img.shields.io/badge/discord-Join-us)](https://discord.gg/fTvyBzwKS8)\n\n </div>\n\nEnglish · [中文](./README-zh_CN.md) · [Français](./README.fr.md) · [Portuguese (Brazil)](./README-pt_BR.md) ・ 日本語 · [한국어](./README.ko.md) · [Русский](./README.ru.md)\n\n## Locoとは？\n`Loco`はRailsに強くインスパイアされています。RailsとRustの両方を知っているなら、すぐに馴染むでしょう。Railsしか知らなく、Rustに新しい方でも、Locoは新鮮に感じるでしょう。Railsを知っているとは仮定していません。\n\nLocoの動作についての詳細なガイド、例、APIリファレンスは、[ドキュメント](https://loco.rs)をチェックしてください。\n\n## Locoの特徴：\n\n* `設定より規約:` Ruby on Railsに似て、Locoはボイラープレートコードを減らすことでシンプルさと生産性を発揮します。合理的なデフォルトを使用し、開発者が設定に時間を費やすのではなく、ビジネスロジックの記述に集中できるようにします。\n\n* `迅速な開発:` 高い開発者生産性を目指し、Locoの設計はボイラープレートコードを減らし、直感的なAPIを提供することに焦点を当てています。これにより、開発者は迅速に反復し、最小限の努力でプロトタイプを構築できます。\n\n* `ORM統合:` ビジネスモデルを堅牢なエンティティで表現し、SQLを書く必要をなくします。エンティティに直接関係、検証、およびカスタムロジックを定義でき、メンテナンス性とスケーラビリティが向上します。\n\n* `コントローラー:` ウェブリクエストのパラメータ、ボディ、検証を処理し、コンテンツに応じたレスポンスをレンダリングします。最高のパフォーマンス、シンプルさ、拡張性のためにAxumを使用しています。コントローラーは、認証、ロギング、エラーハンドリングなどのロジックを追加するためのミドルウェアを簡単に構築できます。\n\n* `ビュー:` Locoはテンプレートエンジンと統合し、テンプレートから動的なHTMLコンテンツを生成できます。\n\n* `バックグラウンドジョブ:` Redisバックエンドキューやスレッドを使用して、計算またはI/O集約型のジョブをバックグラウンドで実行します。ワーカーを実装するのは、Workerトレイトのperform関数を実装するだけです。\n\n* `スケジューラー:` 従来の、しばしば面倒なcrontabシステムを簡素化し、タスクやシェルスクリプトをスケジュールするのをより簡単かつエレガントにします。\n\n* `メール送信:` メール送信者は、既存のLocoバックグラウンドワーカーインフラストラクチャを使用して、バックグラウンドでメールを配信します。すべてがシームレスに行われます。\n\n* `ストレージ:` Locoのストレージでは、ファイル操作を簡素化します。ストレージはメモリ内、ディスク上、またはAWS S3、GCP、Azureなどのクラウドサービスを使用できます。\n\n* `キャッシュ:` Locoは、頻繁にアクセスされるデータを保存することでアプリケーションのパフォーマンスを向上させるためのキャッシュレイヤーを提供します。\n\nLocoの詳細な機能については、[ドキュメントウェブサイト](https://loco.rs/docs/getting-started/tour/)を確認してください。\n\n## 始め方\n```sh\ncargo install loco\ncargo install sea-orm-cli # データベースが必要な場合のみ\n```\n\n以下で新しいアプリを作成できます（「`SaaS`アプリ」を選択）。\n\n```sh\n❯ loco new\n✔ ❯ App name? · myapp\n✔ ❯ What would you like to build? · SaaS app (with DB and user auth)\n✔ ❯ Select a DB Provider · Sqlite\n✔ ❯ Select your background worker type · Async (in-process tokio async tasks)\n✔ ❯ Select an asset serving configuration · Client (configures assets for frontend serving)\n\n🚂 Loco app generated successfully in:\nmyapp/\n```\n\n次に`myapp`に移動し、アプリを起動します：\n```sh\n$ cargo loco start\n\n                      ▄     ▀\n                                ▀  ▄\n                  ▄       ▀     ▄  ▄ ▄▀\n                                    ▄ ▀▄▄\n                        ▄     ▀    ▀  ▀▄▀█▄\n                                          ▀█▄\n▄▄▄▄▄▄▄  ▄▄▄▄▄▄▄▄▄   ▄▄▄▄▄▄▄▄▄▄▄ ▄▄▄▄▄▄▄▄▄ ▀▀█\n██████  █████   ███ █████   ███ █████   ███ ▀█\n██████  █████   ███ █████   ▀▀▀ █████   ███ ▄█▄\n██████  █████   ███ █████       █████   ███ ████▄\n██████  █████   ███ █████   ▄▄▄ █████   ███ █████\n██████  █████   ███  ████   ███ █████   ███ ████▀\n  ▀▀▀██▄ ▀▀▀▀▀▀▀▀▀▀  ▀▀▀▀▀▀▀▀▀▀  ▀▀▀▀▀▀▀▀▀▀ ██▀\n      ▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀\n                https://loco.rs\n\nlistening on port 5150\n```\n\n## Locoによって開発されています\n+ [SpectralOps](https://spectralops.io) - Locoフレームワークによる各種サービス\n+ [Nativish](https://nativi.sh) - Locoフレームワークによるアプリバックエンド\n\n## 貢献者 ✨\nこれらの素晴らしい人々に感謝します：\n\n<a href=\"https://github.com/loco-rs/loco/graphs/contributors\">\n  <img src=\"https://contrib.rocks/image?repo=loco-rs/loco\" />\n</a>\n"
        },
        {
          "name": "README.ko.md",
          "type": "blob",
          "size": 6.212890625,
          "content": " <div align=\"center\">\n\n   <img src=\"https://github.com/loco-rs/loco/assets/83390/992d215a-3cd3-42ee-a1c7-de9fd25a5bac\"/>\n\n   <h1>Loco에 오신 것을 환영합니다</h1>\n\n   <h3>\n   🚂 Loco는 Rust on Rails입니다.\n   </h3>\n\n   [![crate](https://img.shields.io/crates/v/loco-rs.svg)](https://crates.io/crates/loco-rs)\n   [![docs](https://docs.rs/loco-rs/badge.svg)](https://docs.rs/loco-rs)\n   [![Discord channel](https://img.shields.io/badge/discord-Join-us)](https://discord.gg/fTvyBzwKS8)\n\n </div>\n\n[English](./README.md) · [中文](./README-zh_CN.md) · [Français](./README.fr.md) · [Portuguese (Brazil)](./README-pt_BR.md) ・ [日本語](./README.ja.md) · 한국어 · [Русский](./README.ru.md)\n\n\n## Loco란?\n`Loco`는 Rails에서 강한 영감을 받았습니다. Rails와 Rust를 모두 알고 계신다면 친숙하게 느껴지실 것이며, Rails만 알고 Rust를 처음 접하시는 분들에게도 Loco는 새롭게 다가올 것입니다. 참고로, Rails에 대한 사전 지식은 필수가 아닙니다.\n\nLoco의 작동 방식에 대해 더 자세히 알아보려면 가이드, 예제, API 참조를 포함한 [문서 웹사이트](https://loco.rs)를 확인해보세요.\n\n## Loco의 주요 기능:\n\n* `설정보다 관습`: Ruby on Rails와 유사하게, Loco는 상용구 코드의 필요성을 줄임으로써 단순성과 생산성을 강조합니다. 합리적인 기본값을 사용하여 개발자가 설정보다는 비즈니스 로직 작성에 집중할 수 있게 합니다.\n\n* `빠른 개발`: 높은 개발자 생산성을 목표로 하며, Loco의 설계는 상용구 코드를 줄이고 직관적인 API를 제공하여 개발자가 최소한의 노력으로 빠르게 반복하고 프로토타입을 구축할 수 있도록 합니다.\n\n* `ORM 통합`: SQL 작성 없이 비즈니스를 강력한 엔티티로 모델링합니다. 관계, 유효성 검사, 사용자 정의 로직을 엔티티에 직접 정의하여 유지보수성과 확장성을 향상시킵니다.\n\n* `컨트롤러`: 웹 요청 매개변수, 본문, 유효성 검사를 처리하고 컨텐츠를 인식하는 응답을 렌더링합니다. 최고의 성능, 단순성, 확장성을 위해 Axum을 사용합니다. 또한 컨트롤러를 통해 인증, 로깅, 오류 처리와 같은 로직을 추가할 수 있는 미들웨어를 쉽게 구축할 수 있습니다.\n\n* `뷰`: Loco는 템플릿에서 동적 HTML 콘텐츠를 생성하기 위해 템플릿 엔진과 통합할 수 있습니다.\n\n* `백그라운드 작업`: Redis 기반 큐 또는 스레드를 사용하여 계산이나 I/O 집약적인 작업을 백그라운드에서 수행합니다. Worker 트레이트에 대한 perform 함수를 구현하는 것만으로도 워커를 구현할 수 있습니다.\n\n* `스케줄러`: 전통적이고 번거로운 crontab 시스템을 단순화하여 작업이나 셸 스크립트를 더 쉽고 우아하게 예약할 수 있습니다.\n\n* `메일러`: 메일러는 기존 loco 백그라운드 워커 인프라를 사용하여 이메일을 백그라운드에서 전달합니다. 모든 과정이 매끄럽게 처리됩니다.\n\n* `스토리지`: Loco 스토리지는 여러 작업을 통해 파일 작업을 용이하게 합니다. 메모리 내, 디스크, AWS S3, GCP, Azure와 같은 클라우드 서비스를 사용할 수 있습니다.\n\n* `캐시`: Loco는 자주 접근하는 데이터를 저장하여 애플리케이션 성능을 향상시키는 캐시 레이어를 제공합니다.\n\n더 많은 Loco 기능을 보려면 [문서 웹사이트](https://loco.rs/docs/getting-started/tour/)를 확인하세요.\n\n\n## 시작하기\n<!-- <snip id=\"quick-installation-command\" inject_from=\"yaml\" template=\"sh\"> -->\n```sh\ncargo install loco\ncargo install sea-orm-cli # Only when DB is needed\n```\n<!-- </snip> -->\n\n이제 새로운 앱을 만들 수 있습니다 (\"`SaaS 앱`\" 선택).\n\n\n<!-- <snip id=\"loco-cli-new-from-template\" inject_from=\"yaml\" template=\"sh\"> -->\n```sh\n❯ loco new\n✔ ❯ App name? · myapp\n✔ ❯ What would you like to build? · Saas App with client side rendering\n✔ ❯ Select a DB Provider · Sqlite\n✔ ❯ Select your background worker type · Async (in-process tokio async tasks)\n\n🚂 Loco app generated successfully in:\nmyapp/\n\n- assets: You've selected `clientside` for your asset serving configuration.\n\nNext step, build your frontend:\n  $ cd frontend/\n  $ npm install && npm run build\n```\n<!-- </snip> -->\n\n이제 `myapp` 디렉토리로 이동하여 앱을 시작하세요:\n\n<!-- <snip id=\"starting-the-server-command-with-output\" inject_from=\"yaml\" template=\"sh\"> -->\n```sh\n$ cargo loco start\n\n                      ▄     ▀\n                                ▀  ▄\n                  ▄       ▀     ▄  ▄ ▄▀\n                                    ▄ ▀▄▄\n                        ▄     ▀    ▀  ▀▄▀█▄\n                                          ▀█▄\n▄▄▄▄▄▄▄  ▄▄▄▄▄▄▄▄▄   ▄▄▄▄▄▄▄▄▄▄▄ ▄▄▄▄▄▄▄▄▄ ▀▀█\n██████  █████   ███ █████   ███ █████   ███ ▀█\n██████  █████   ███ █████   ▀▀▀ █████   ███ ▄█▄\n██████  █████   ███ █████       █████   ███ ████▄\n██████  █████   ███ █████   ▄▄▄ █████   ███ █████\n██████  █████   ███  ████   ███ █████   ███ ████▀\n  ▀▀▀██▄ ▀▀▀▀▀▀▀▀▀▀  ▀▀▀▀▀▀▀▀▀▀  ▀▀▀▀▀▀▀▀▀▀ ██▀\n      ▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀\n                https://loco.rs\n\nlistening on port 5150\n```\n<!-- </snip> -->\n\n## Loco 사용 사례\n+ [SpectralOps](https://spectralops.io) - Loco 프레임워크로 구동되는 다양한 서비스\n+ [Nativish](https://nativi.sh) - Loco 프레임워크로 구동되는 앱 백엔드\n\n## 기여자 ✨\n이 멋진 분들께 감사드립니다:\n\n<a href=\"https://github.com/loco-rs/loco/graphs/contributors\">\n  <img src=\"https://contrib.rocks/image?repo=loco-rs/loco\" />\n</a>\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 5.7958984375,
          "content": " <div align=\"center\">\n\n   <img src=\"https://github.com/loco-rs/loco/assets/83390/992d215a-3cd3-42ee-a1c7-de9fd25a5bac\"/>\n\n   <h1>Welcome to Loco</h1>\n\n   <h3>\n   <!-- <snip id=\"description\" inject_from=\"yaml\"> -->\n🚂 Loco is Rust on Rails.\n<!--</snip> -->\n   </h3>\n\n   [![crate](https://img.shields.io/crates/v/loco-rs.svg)](https://crates.io/crates/loco-rs)\n   [![docs](https://docs.rs/loco-rs/badge.svg)](https://docs.rs/loco-rs)\n   [![Discord channel](https://img.shields.io/badge/discord-Join-us)](https://discord.gg/fTvyBzwKS8)\n\n </div>\n\n\nEnglish · [中文](./README-zh_CN.md) · [Français](./README.fr.md) · [Portuguese (Brazil)](./README-pt_BR.md) ・ [日本語](./README.ja.md) · [한국어](./README.ko.md) · [Русский](./README.ru.md)\n\n\n## What's Loco?\n`Loco` is strongly inspired by Rails. If you know Rails and Rust, you'll feel at home. If you only know Rails and new to Rust, you'll find Loco refreshing. We do not assume you know Rails.\n\nFor a deeper dive into how Loco works, including detailed guides, examples, and API references, check out our [documentation website](https://loco.rs).\n\n\n## Features of Loco:\n\n* `Convention Over Configuration:` Similar to Ruby on Rails, Loco emphasizes simplicity and productivity by reducing the need for boilerplate code. It uses sensible defaults, allowing developers to focus on writing business logic rather than spending time on configuration.\n\n* `Rapid Development:` Aim for high developer productivity, Loco’s design focuses on reducing boilerplate code and providing intuitive APIs, allowing developers to iterate quickly and build prototypes with minimal effort.\n\n* `ORM Integration:` Model your business with robust entities, eliminating the need to write SQL. Define relationships, validation, and custom logic directly on your entities for enhanced maintainability and scalability.\n\n* `Controllers`: Handle web requests parameters, body, validation, and render a response that is content-aware. We use Axum for the best performance, simplicity, and extensibility. Controllers also allow you to easily build middlewares, which can be used to add logic such as authentication, logging, or error handling before passing requests to the main controller actions.\n\n* `Views:` Loco can integrate with templating engines to generate dynamic HTML content from templates.\n\n* `Background Jobs:` Perform compute or I/O intensive jobs in the background with a Redis backed queue, or with threads. Implementing a worker is as simple as implementing a perform function for the Worker trait.\n\n* `Scheduler:` Simplifies the traditional, often cumbersome crontab system, making it easier and more elegant to schedule tasks or shell scripts.\n\n* `Mailers:` A mailer will deliver emails in the background using the existing loco background worker infrastructure. It will all be seamless for you.\n\n* `Storage:` In Loco Storage, we facilitate working with files through multiple operations. Storage can be in-memory, on disk, or use cloud services such as AWS S3, GCP, and Azure.\n\n* `Cache:` Loco provides an cache layer to improve application performance by storing frequently accessed data.\n\nSo see more Loco features, check out our [documentation website](https://loco.rs/docs/getting-started/tour/).\n\n\n\n## Getting Started\n<!-- <snip id=\"quick-installation-command\" inject_from=\"yaml\" template=\"sh\"> -->\n```sh\ncargo install loco\ncargo install sea-orm-cli # Only when DB is needed\n```\n<!-- </snip> -->\n\nNow you can create your new app (choose \"`SaaS` app\").\n\n\n<!-- <snip id=\"loco-cli-new-from-template\" inject_from=\"yaml\" template=\"sh\"> -->\n```sh\n❯ loco new\n✔ ❯ App name? · myapp\n✔ ❯ What would you like to build? · Saas App with client side rendering\n✔ ❯ Select a DB Provider · Sqlite\n✔ ❯ Select your background worker type · Async (in-process tokio async tasks)\n\n🚂 Loco app generated successfully in:\nmyapp/\n\n- assets: You've selected `clientside` for your asset serving configuration.\n\nNext step, build your frontend:\n  $ cd frontend/\n  $ npm install && npm run build\n```\n<!-- </snip> -->\n\n Now `cd` into your `myapp` and start your app:\n<!-- <snip id=\"starting-the-server-command-with-output\" inject_from=\"yaml\" template=\"sh\"> -->\n```sh\n$ cargo loco start\n\n                      ▄     ▀\n                                ▀  ▄\n                  ▄       ▀     ▄  ▄ ▄▀\n                                    ▄ ▀▄▄\n                        ▄     ▀    ▀  ▀▄▀█▄\n                                          ▀█▄\n▄▄▄▄▄▄▄  ▄▄▄▄▄▄▄▄▄   ▄▄▄▄▄▄▄▄▄▄▄ ▄▄▄▄▄▄▄▄▄ ▀▀█\n██████  █████   ███ █████   ███ █████   ███ ▀█\n██████  █████   ███ █████   ▀▀▀ █████   ███ ▄█▄\n██████  █████   ███ █████       █████   ███ ████▄\n██████  █████   ███ █████   ▄▄▄ █████   ███ █████\n██████  █████   ███  ████   ███ █████   ███ ████▀\n  ▀▀▀██▄ ▀▀▀▀▀▀▀▀▀▀  ▀▀▀▀▀▀▀▀▀▀  ▀▀▀▀▀▀▀▀▀▀ ██▀\n      ▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀\n                https://loco.rs\n\nlistening on port 5150\n```\n<!-- </snip> -->\n\n## Powered by Loco\n+ [SpectralOps](https://spectralops.io) - various services powered by Loco\n  framework\n+ [Nativish](https://nativi.sh) - app backend powered by Loco framework\n\n## Contributors ✨\nThanks goes to these wonderful people:\n\n<a href=\"https://github.com/loco-rs/loco/graphs/contributors\">\n  <img src=\"https://contrib.rocks/image?repo=loco-rs/loco\" />\n</a>\n"
        },
        {
          "name": "README.ru.md",
          "type": "blob",
          "size": 7.8544921875,
          "content": " <div align=\"center\">\n\n   <img src=\"https://github.com/loco-rs/loco/assets/83390/992d215a-3cd3-42ee-a1c7-de9fd25a5bac\"/>\n\n   <h1>Добро пожаловать в *Loco*</h1>\n\n   <h3>\n   <!-- <snip id=\"description\" inject_from=\"yaml\"> -->\n🚂 Loco is Rust on Rails.\n<!--</snip> -->\n   </h3>\n\n   [![crate](https://img.shields.io/crates/v/loco-rs.svg)](https://crates.io/crates/loco-rs)\n   [![docs](https://docs.rs/loco-rs/badge.svg)](https://docs.rs/loco-rs)\n   [![Discord channel](https://img.shields.io/badge/discord-Join-us)](https://discord.gg/fTvyBzwKS8)\n\n </div>\n\n[English](./README.md) · [中文](./README-zh_CN.md) · [Français](./README.fr.md) · [Portuguese (Brazil)](./README-pt_BR.md) ・ [日本語](./README.ja.md) · Русский\n\n\n## Что такое Loco?\n*Loco* сильно вдохновлён проектом *Ruby on Rails*. Если вы знакомы и с *Rails*, и с *Rust*, вы будете чувствовать себя как дома. Если вы знаете только *Rails*, и не знакомы с *Rust*, *Loco* будет для вас чем-то освежающим.\n\nЕсли вам интересно узнать внутрение устройство *Loco*, включая детальные гайды, примеры, и устройство API, почитайте нашу [документацию](https://loco.rs).\n\n\n## Фишки Loco:\n\n- **Простота превыше конфигурации**: Подобно *Ruby on Rails*, *Loco* делает упор на простоту и продуктивность, снижая потребность в лишнем коде. *Loco* использует оптимальные настройки по-умолчанию, давая разработчикам возможность сфокусироваться на написании бизнес логики, а не конфигурации.\n- **Быстрая разработка**: Ставя акцент на высокой производительности разработчика, Дизайн *Loco* фокусируется на сокращении ненужного кода и предоставления интуитивного API. Это позволяет быстро создавать прототипы без лишних усилий.\n- **ORM интеграция**: Стройте свой бизнес с крепкими составляющими, убирая необходимость писать SQL. Определяйте взаимосвязи, проверку, и кастомную логику прямо в составляющих, упрощая поддержку и рост кодовой базы.\n- **Контролеры**: Обрабатывайте параметры и данные web-запросов, проверяйте их содержимое, отображайте ответ с учетом запроса. Мы используем *Axum* для достижения наилучшей производительности, простоты, и возможности расширения. Также, контролеры облегчают внедрение middleware. Это может быть использовано для добавления всевозможной логики: аутентификации, логгинга, или обработки ошибок перед отправкой на сервер.\n- **Виды**: *Loco* может интегрироваться с template-движками для генерации динамического HTML из шаблонов.\n- **Фоновые задачи**: Исполняйте I/O и другие тяжелые операции в фоновом режиме с помощью *Redis*, или потоков. Для написания функционала фоновой задачи нужно всего лишь написать функцию `perform` из `trait Worker`.\n- **Планировщик**: Облегчает традиционную, часто громоздкую систему, упрощая планировку задач и исполнение shell-скриптов.\n- **Отправка электронной почты**: Отправка электронной почты в фоновом режиме, без необходимости создавать новую фоновую задачу.\n- **Хранилище**: Мы способствуем работе с файлами несколькими путями: хранение в памяти, на диске, или использование облачных сервисов как *AWS*, *S3*, *GCP*, и *Azure*.\n- **Кэширование**: *Loco* кэширует частые запросы для улучшения производительности приложения.\n\nУ *Loco* есть ещё множество фишек, котрые вы можете посмотреть на [сайте документации](https://loco.rs/docs/getting-started/tour/).\n\n\n## Установка\n<!-- <snip id=\"quick-installation-command\" inject_from=\"yaml\" template=\"sh\"> -->\n```sh\ncargo install loco\ncargo install sea-orm-cli # Only when DB is needed\n```\n<!-- </snip> -->\n\nТеперь вы можете создать свое новое приложение (выберете \"`SaaS` app\").\n\n\n<!-- <snip id=\"loco-cli-new-from-template\" inject_from=\"yaml\" template=\"sh\"> -->\n```sh\n❯ loco new\n✔ ❯ App name? · myapp\n✔ ❯ What would you like to build? · Saas App with client side rendering\n✔ ❯ Select a DB Provider · Sqlite\n✔ ❯ Select your background worker type · Async (in-process tokio async tasks)\n\n🚂 Loco app generated successfully in:\nmyapp/\n\n- assets: You've selected `clientside` for your asset serving configuration.\n\nNext step, build your frontend:\n  $ cd frontend/\n  $ npm install && npm run build\n```\n<!-- </snip> -->\n\nТеперь выполните `cd` в папку `myapp` и запускайте приложение:\n<!-- <snip id=\"starting-the-server-command-with-output\" inject_from=\"yaml\" template=\"sh\"> -->\n```sh\n$ cargo loco start\n\n                      ▄     ▀\n                                ▀  ▄\n                  ▄       ▀     ▄  ▄ ▄▀\n                                    ▄ ▀▄▄\n                        ▄     ▀    ▀  ▀▄▀█▄\n                                          ▀█▄\n▄▄▄▄▄▄▄  ▄▄▄▄▄▄▄▄▄   ▄▄▄▄▄▄▄▄▄▄▄ ▄▄▄▄▄▄▄▄▄ ▀▀█\n██████  █████   ███ █████   ███ █████   ███ ▀█\n██████  █████   ███ █████   ▀▀▀ █████   ███ ▄█▄\n██████  █████   ███ █████       █████   ███ ████▄\n██████  █████   ███ █████   ▄▄▄ █████   ███ █████\n██████  █████   ███  ████   ███ █████   ███ ████▀\n  ▀▀▀██▄ ▀▀▀▀▀▀▀▀▀▀  ▀▀▀▀▀▀▀▀▀▀  ▀▀▀▀▀▀▀▀▀▀ ██▀\n      ▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀\n                https://loco.rs\n\nlistening on port 5150\n```\n<!-- </snip> -->\n\n## Проекты, использующие *Loco*\n+ [SpectralOps](https://spectralops.io) - различные сервисы, использующие *Loco*\n  framework\n+ [Nativish](https://nativi.sh) - backend приложения, использующий *Loco*\n\n## Контрибьютеры ✨\nСпасибо всем этим прекрасным людям:\n\n<a href=\"https://github.com/loco-rs/loco/graphs/contributors\">\n  <img src=\"https://contrib.rocks/image?repo=loco-rs/loco\" />\n</a>\n"
        },
        {
          "name": "SECURITY.md",
          "type": "blob",
          "size": 0.3671875,
          "content": "# Security Policy\n\nBy researching and submitting a vulnerability, you'll be helping open source and this project's goal to provide a fast to build fast to run Web framework based on Rust.\n\n\n## Reporting a Vulnerability\n\nPlease report directly to [dotan@rng0.io](mailto:dotan@rng0.io).\n\nWe will credit you as a committer with every vulnerability you find that we can validate.\n"
        },
        {
          "name": "docs-site",
          "type": "tree",
          "content": null
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "loco-cli",
          "type": "tree",
          "content": null
        },
        {
          "name": "loco-gen",
          "type": "tree",
          "content": null
        },
        {
          "name": "loco-new",
          "type": "tree",
          "content": null
        },
        {
          "name": "media",
          "type": "tree",
          "content": null
        },
        {
          "name": "snipdoc.yml",
          "type": "blob",
          "size": 5.365234375,
          "content": "snippets:\n  description:\n    content: 🚂 Loco is Rust on Rails.\n    path: ./snipdoc.yml\n  help-command:\n    content: cargo loco --help\n    path: ./snipdoc.yml\n  exec-help-command:\n    content: cd ./examples/demo && cargo loco --help\n    path: ./snipdoc.yml\n  build-command:\n    content: cargo build --release\n    path: ./snipdoc.yml\n  quick-installation-command:\n    content: |-\n      cargo install loco\n      cargo install sea-orm-cli # Only when DB is needed\n    path: ./snipdoc.yml\n  loco-cli-new-from-template:\n    content: |-\n      ❯ loco new\n      ✔ ❯ App name? · myapp\n      ✔ ❯ What would you like to build? · Saas App with client side rendering\n      ✔ ❯ Select a DB Provider · Sqlite\n      ✔ ❯ Select your background worker type · Async (in-process tokio async tasks)\n\n      🚂 Loco app generated successfully in:\n      myapp/\n\n      - assets: You've selected `clientside` for your asset serving configuration.\n\n      Next step, build your frontend:\n        $ cd frontend/\n        $ npm install && npm run build\n\n    path: ./snipdoc.yml\n  postgres-run-docker-command:\n    content: |-\n      docker run -d -p 5432:5432 \\\n        -e POSTGRES_USER=loco \\\n        -e POSTGRES_DB=myapp_development \\\n        -e POSTGRES_PASSWORD=\"loco\" \\\n        postgres:15.3-alpine\n    path: ./snipdoc.yml\n  redis-run-docker-command:\n    content: docker run -p 6379:6379 -d redis redis-server\n    path: ./snipdoc.yml\n  starting-the-server-command:\n    content: cargo loco start\n    path: ./snipdoc.yml\n  starting-the-server-command-with-environment-env-var:\n    content: LOCO_ENV=qa cargo loco start\n    path: ./snipdoc.yml\n  starting-the-server-command-with-output:\n    content: |-\n      $ cargo loco start\n\n                            ▄     ▀\n                                      ▀  ▄\n                        ▄       ▀     ▄  ▄ ▄▀\n                                          ▄ ▀▄▄\n                              ▄     ▀    ▀  ▀▄▀█▄\n                                                ▀█▄\n      ▄▄▄▄▄▄▄  ▄▄▄▄▄▄▄▄▄   ▄▄▄▄▄▄▄▄▄▄▄ ▄▄▄▄▄▄▄▄▄ ▀▀█\n      ██████  █████   ███ █████   ███ █████   ███ ▀█\n      ██████  █████   ███ █████   ▀▀▀ █████   ███ ▄█▄\n      ██████  █████   ███ █████       █████   ███ ████▄\n      ██████  █████   ███ █████   ▄▄▄ █████   ███ █████\n      ██████  █████   ███  ████   ███ █████   ███ ████▀\n        ▀▀▀██▄ ▀▀▀▀▀▀▀▀▀▀  ▀▀▀▀▀▀▀▀▀▀  ▀▀▀▀▀▀▀▀▀▀ ██▀\n            ▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀\n                      https://loco.rs\n\n      listening on port 5150\n    path: ./snipdoc.yml\n  doctor-command:\n    content: |-\n      $ cargo loco doctor\n          Finished dev [unoptimized + debuginfo] target(s) in 0.32s\n          Running `target/debug/myapp-cli doctor`\n      ✅ SeaORM CLI is installed\n      ✅ DB connection: success\n      ✅ Redis connection: success\n    path: ./snipdoc.yml\n  generate-deployment-command:\n    content: |-\n      cargo loco generate deployment\n      ? ❯ Choose your deployment ›\n      ❯ Docker\n      ❯ Shuttle\n      ❯ Nginx\n\n      ..\n      ✔ ❯ Choose your deployment · Docker\n      skipped (exists): \"dockerfile\"\n      added: \".dockerignore\"\n    path: ./snipdoc.yml\n  scaffold-help-command:\n    content: cd ./examples/demo && cargo loco generate scaffold --help\n    path: ./snipdoc.yml\n  scaffold-post-command:\n    content: cargo loco generate scaffold posts\n      name:string title:string content:text --api\n    path: ./snipdoc.yml\n  generate-task-help-command:\n    content: cd ./examples/demo && cargo loco generate task --help\n    path: ./snipdoc.yml\n  run-task-command:\n    content: cargo loco task <TASK_NAME>\n    path: ./snipdoc.yml\n  list-tasks-command:\n    content: cargo loco task\n    path: ./snipdoc.yml\n  migrate-down-command:\n    content: cargo loco db down\n    path: ./snipdoc.yml\n  migrate-down-n-command:\n    content: cargo loco db down 2\n    path: ./snipdoc.yml\n  scheduler-generate-command:\n    content: cargo loco generate scheduler\n    path: ./snipdoc.yml\n  scheduler-list-command:\n    content: cargo loco scheduler --list\n    path: ./snipdoc.yml\n  scheduler-list-from-file-command:\n    content: cargo loco scheduler --config config/scheduler.yaml --list\n    path: ./snipdoc.yml\n  scheduler-list-from-env-setting-command:\n    content: LOCO_ENV=production cargo loco scheduler --list\n    path: ./snipdoc.yml\n  scheduler-run-job-by-name-command:\n    content: LOCO_ENV=production cargo loco scheduler --name 'JOB_NAME'\n    path: ./snipdoc.yml\n  scheduler-run-job-by-tag-command:\n    content: LOCO_ENV=production cargo loco scheduler --tag 'maintenance'\n    path: ./snipdoc.yml\n  cli-middleware-list:\n    content: cargo loco middleware --config\n    path: ./snipdoc.yml\n  jobs-help-command:\n    content: cd ./examples/demo && cargo loco jobs --help\n    path: ./snipdoc.yml\n  seed-help-command:\n    content: cd ./examples/demo && cargo loco db seed --help\n    path: ./snipdoc.yml\n"
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "starters",
          "type": "tree",
          "content": null
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        },
        {
          "name": "xtask",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}