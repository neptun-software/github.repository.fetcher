{
  "metadata": {
    "timestamp": 1736709396609,
    "page": 121,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjEzMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "tensorflow/rust",
      "stars": 5235,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.26171875,
          "content": "# Handle line endings automatically for files detected as text\n# and leave all files detected as binary untouched.\n*.rs text eol=lf\n* text=auto\n\n# Check for whitespace errors\n* whitespace=tab-in-indent,tabwidth=2\n\n.gitattributes export-ignore\n.gitignore export-ignore\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.1103515625,
          "content": "*~\n*.log\nCargo.lock\ntarget\n**/*.iml\n.idea\ntest_resources/io/actual.tfrecord\ntest_resources/io/roundtrip.tfrecord\n"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 2.8818359375,
          "content": "# Changelog\n\n## Release 0.21.0\n\n### Additions\n\n- Add PluggableDeviceLibrary\n\n### Changes\n\n- Upgrade to TensorFlow 2.13.0\n- Add support for saving to and restoring from checkpoints\n\n## Release 0.20.0\n\n### Additions\n\n- Implemented Send and Sync for SessionRunArgs\n\n### Changes\n\n- Migrated from random to rand\n- Upgraded to TensorFlow 2.11.0\n\n### Fixes\n\n- Removed binaries from the repository\n\n## Release 0.19.0\n\n### Additions\n\n- Improved debug formatting of tensors\n- Add accessors for operation named inputs and outputs\n- Support loading TensorFlow library dynamically at runtime\n\n### Changes\n\n- Upgrade to TensorFlow 2.9.1\n\n## Release 0.18.0\n\n### Additions\n\n- Added eager API support (Big thanks to dskkato!)\n- Add pre-trained Keras model use example\n\n### Changes\n\n- Upgrade to TensorFlow 2.8\n- Update addition and regression_savedmodel examples' python code for tf2.5\n- Migrate CI from Travis to GitHub Actions\n\n### Fixes\n\n- Codegen cleanup\n- Fixed rustfmt on Windows\n\n## Release 0.17.0\n\n### Additions\n\n- Support Tensor::from and Shape::from for arrays (requires Rust 1.51)\n- Add dtype and shape accessors to TensorInfo\n- Implement Scope::with_xla_cluster\n- Add Scope::with_kernel_label\n\n### Changes\n\n- Upgrade to TensorFlow 2.5\n- Deprecate Session::from_saved_model in favor of SavedModelBundle::load\n\n## Release 0.16.1\n\n### Fixes\n\n- Fix Windows build\n\n## Release 0.16.0\n\n### Additions\n\n- Stabilize new graph generation code (removed experimental_training feature)\n- Add Scope::{with_device, with_control_dependencies}\n- Add optional support for Tensor conversions to/from ndarray::Array\n- Add Library::op_list\n- Allow tensorflow-sys to download prebuilt windows releases\n\n### Changes\n\n- Improve ergonomics for graph building\n  - Allow conversions for arguments to generated ops\n  - Implement From for arrays for Shape\n  - Allow VariableBuilder::shape to take Into<Shape>\n\n### Fixes\n\n- Fix memory safety bug in Operation::control_inputs\n- Allow 0 colons in output names, default to index 0\n- Fix docs.rs (hopefully)\n\n## Release 0.15.0\n\n### Additions\n\n- Add generated code for all standard ops\n  - Currently guarded by experimental_training feature\n- Add RecordReader for TFRecords\n- Add support for creating saved models\n- Document that BFloat16 is not an IEEE-754 16-bit float\n- Implement Send and Sync for Status\n- Add Tensor::get and Tensor::set\n\n### Changes\n\n- Use std::alloc instead of aligned_alloc\n\n## Release 0.14.0\n\n### Additions\n\n- Support for high-level graph building in pure Rust\n  - Adds Scope, ops module, etc.\n  - Currently guarded by experimental_training feature\n  - Includes a basic xor example\n- Support requesting run metadata from Session::run\n- Implement TensorType for half::f16\n- Add From<&[i64]> and From<&[u64]> for Shape\n- Add Tensor::shape\n- Add Shape::new\n\n### Changes\n\n- Change return type of Graph::add_gradients to return optional gradients\n\n### Fixes\n\n- Fix memory initialization bug in Operation::output_consumers\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 3.060546875,
          "content": "# Contributing guidelines\n\n## How to become a contributor and submit your own code\n\n### Contributor License Agreements\n\nWe'd love to accept your patches! Before we can take them, we have to jump a couple of legal hurdles.\n\nPlease fill out either the individual or corporate Contributor License Agreement (CLA).\n\n  * If you are an individual writing original source code and you're sure you own the intellectual property, then you'll need to sign an [individual CLA](http://code.google.com/legal/individual-cla-v1.0.html).\n  * If you work for a company that wants to allow you to contribute your work, then you'll need to sign a [corporate CLA](http://code.google.com/legal/corporate-cla-v1.0.html).\n\nFollow either of the two links above to access the appropriate CLA and instructions for how to sign and return it. Once we receive it, we'll be able to accept your pull requests.\n\n***NOTE***: Only original source code from you and other people that have signed the CLA can be accepted into the main repository.\n\nMake sure that your [email address in the commit](https://help.github.com/articles/setting-your-commit-email-address-in-git/)\nmatches the email address you use to sign the CLA, or we won't be able to merge your pull request.\nDo this *before* creating the commits.\nIf you've already created the commits with a different email address, you should be able to sign the CLA again with that email address.\n\n### GitHub Issues\n\nIf you want to work on a GitHub issue, check to make sure it's not assigned to someone first.\nIf it's not assigned to anyone, assign yourself once you start writing code.\n(Please don't assign yourself just because you'd like to work on the issue, but only when you actually start.)\nThis helps avoid duplicate work.\n\nIf you start working on an issue but find that you won't be able to finish, please un-assign yourself so other people know the issue is available.\nIf you assign yourself but aren't making progress, we may assign the issue to someone else.\n\nIf you're working on issue 123, please put \"Fixes #123\" (without quotes) in the commit message below everything else and separated by a blank line.\nFor example, if issue 123 is a feature request to add foobar, the commit message might look like:\n```\nAdd foobar\n\nSome longer description goes here, if you\nwant to describe your change in detail.\n\nFixes #123\n```\nThis will [close the bug once your pull request is merged](https://help.github.com/articles/closing-issues-using-keywords/).\n\nIf you're a first-time contributor, try looking for an issue with the label \"good first issue\", which should be easier for someone unfamiliar with the codebase to work on.\n\n### Git\n\nPlease check out a recent version of `master` before starting work, and rebase onto `master` before creating a pull request.\nThis helps keep the commit graph clean and easy to follow.\n\nAs noted in the CLA section, make sure that your [email address in the commit](https://help.github.com/articles/setting-your-commit-email-address-in-git/)\nmatches the email address you use to sign the CLA, or we won't be able to merge your pull request.\nDo this *before* creating the commits.\n"
        },
        {
          "name": "Cargo.toml",
          "type": "blob",
          "size": 2.1630859375,
          "content": "[package]\nname = \"tensorflow\"\nversion = \"0.21.0\"\nauthors = [\"Adam Crume <acrume@google.com>\"]\ndescription = \"Rust language bindings for TensorFlow.\"\nlicense = \"Apache-2.0\"\nkeywords = [\"TensorFlow\", \"bindings\"]\nreadme = \"README.md\"\nrepository = \"https://github.com/tensorflow/rust\"\ndocumentation = \"https://tensorflow.github.io/rust/tensorflow\"\nedition = \"2018\"\nrust-version = \"1.63.0\"\n\n[lib]\n# We want to run doctests, but they're broken by https://github.com/rust-lang/cargo/issues/8531.\ndoctest = false\n\n# Prevent downloading or building TensorFlow when building docs on docs.rs.\n[package.metadata.docs.rs]\nfeatures = [\"private-docs-rs\", \"tensorflow_unstable\", \"ndarray\", \"eager\", \"experimental\"]\n\n[dependencies]\nlibc = \"0.2.132\"\nnum-complex = { version = \"0.4.2\", default-features = false }\ntensorflow-internal-macros = { version = \"=0.0.3\", path = \"tensorflow-internal-macros\" }\ntensorflow-sys = { version = \"0.24.0\", path = \"tensorflow-sys\", optional = true }\ntensorflow-sys-runtime = { version = \"0.2.0\", path = \"tensorflow-sys-runtime\", optional = true }\nbyteorder = \"1.4.3\"\ncrc = \"3.0.0\"\nhalf = \"2.1.0\"\n# This is used internally but not intended to be exposed through the API.\nprotobuf = \"=2.27.1\"\n# Enables conversions between ndarray::Array objects and tensorflow::Tensor\nndarray = { version = \"0.15.6\", optional = true }\nrustversion = \"1.0.9\"\n\n[dev-dependencies]\nrand = \"0.8.5\"\nserial_test = \"0.9.0\"\ntempfile = \"3.7.0\"\n\n[features]\ndefault = [\"tensorflow-sys\"]\nexperimental = [\"tensorflow-sys/experimental\"]\ntensorflow_gpu = [\"tensorflow-sys/tensorflow_gpu\"]\ntensorflow_unstable = []\ntensorflow_runtime_linking = [\"tensorflow-sys-runtime\"]\neager = [\"tensorflow-sys/eager\"]\n# This is for testing purposes; users should not use this.\nexamples_system_alloc = [\"tensorflow-sys/examples_system_alloc\"]\nprivate-docs-rs = [\"tensorflow-sys/private-docs-rs\"] # DO NOT RELY ON THIS\n\n[workspace]\n\n[[example]]\nname = \"addition\"\n\n[[example]]\nname = \"expressions\"\nrequired-features = [\"tensorflow_unstable\"]\n\n[[example]]\nname = \"regression\"\n\n[[example]]\nname = \"regression_savedmodel\"\n\n[[example]]\nname = \"regression_checkpoint\"\n\n[[example]]\nname = \"xor\"\n\n[[example]]\nname = \"mobilenetv3\"\nrequired-features = [\"eager\"]\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 11.091796875,
          "content": "\n                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"[]\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright [yyyy] [name of copyright owner]\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 5.41796875,
          "content": "# <img alt=\"SIG Rust TensorFlow\" src=\"https://github.com/tensorflow/community/blob/master/sigs/logos/SIGRust.png\" width=\"340\"/>\n[![Version](https://img.shields.io/crates/v/tensorflow.svg)](https://crates.io/crates/tensorflow)\n[![Build status](https://github.com/tensorflow/rust/actions/workflows/ci.yml/badge.svg)](https://github.com/tensorflow/rust/actions/workflows/ci.yml)\n\nTensorFlow Rust provides idiomatic [Rust](https://www.rust-lang.org) language\nbindings for [TensorFlow](https://www.tensorflow.org).\n\n**Notice:** This project is still under active development and not guaranteed to have a\nstable API.\n\n* [Documentation](https://tensorflow.github.io/rust/tensorflow/)\n* [TensorFlow Rust Google Group](https://groups.google.com/a/tensorflow.org/forum/#!forum/rust)\n* [TensorFlow website](https://www.tensorflow.org)\n* [TensorFlow GitHub page](https://github.com/tensorflow/tensorflow)\n\n## Getting Started\nSince this crate depends on the TensorFlow C API, it needs to be downloaded or compiled first. This\ncrate will automatically download or compile the TensorFlow shared libraries for you, but it is also\npossible to manually install TensorFlow and the crate will pick it up accordingly.\n\n### Prerequisites\nIf the TensorFlow shared libraries can already be found on your system, they will be used.  If your\nsystem is x86-64 Linux or Mac, a prebuilt binary will be downloaded, and no special prerequisites\nare needed.\n\nOtherwise, the following dependencies are needed to compile and build this crate, which involves\ncompiling TensorFlow itself:\n\n - git\n - [bazel](https://bazel.build/)\n - Python Dependencies `numpy`, `dev`, `pip` and `wheel`\n - Optionally, CUDA packages to support GPU-based processing\n\nThe TensorFlow website provides detailed instructions on how to obtain and install said dependencies,\nso if you are unsure please [check out the docs](https://www.tensorflow.org/install/source)\n for further details.\n\nSome of the examples use TensorFlow code written in Python and require a full TensorFlow\ninstallation.\n\nThe minimum supported Rust version is 1.58.\n\n### Usage\nAdd this to your `Cargo.toml`:\n\n```toml\n[dependencies]\ntensorflow = \"0.21.0\"\n```\n\nand this to your crate root:\n\n```rust\nextern crate tensorflow;\n```\n\nThen run `cargo build -j 1`. The tensorflow-sys crate's \n[`build.rs`](https://github.com/tensorflow/rust/blob/f204b39/tensorflow-sys/build.rs#L44-L52)\nnow either downloads a pre-built, basic CPU only binary\n([the default](https://github.com/tensorflow/rust/pull/65))\nor compiles TensorFlow if forced to by an environment variable. If TensorFlow\nis compiled during this process, since the full compilation is very memory\nintensive, we recommend using the `-j 1` flag which tells cargo to use only one\ntask, which in turn tells TensorFlow to build with only one task. Though, if\nyou have a lot of RAM, you can obviously use a higher value.\n\nTo include the especially unstable API (which is currently the `expr` module),\nuse `--features tensorflow_unstable`.\n\nFor now, please see the [Examples](https://github.com/tensorflow/rust/tree/master/examples) for more\ndetails on how to use this binding.\n\n## Tensor Max Display\nWhen printing or debugging a tensor, it will print every element by default, this\ncan be modified by changing an environment variable:\n```bash\nTF_RUST_DISPLAY_MAX=5\n```\nWhich will truncate the values if they exceed the limit:\n\n```rust\nlet values: Vec<u64> = (0..100000).collect();\nlet t = Tensor::new(&[2, 50000]).with_values(&values).unwrap();\ndbg!(t);\n```\n```\nt = Tensor<u64> {\n    values: [\n        [0, 1, 2, 3, 4, ...],\n        ...\n    ],\n    dtype: uint64,\n    shape: [2, 50000]\n}\n```\n\n## GPU Support\n\nTo enable GPU support, use the `tensorflow_gpu` feature in your Cargo.toml:\n\n```\n[dependencies]\ntensorflow = { version = \"0.21.0\", features = [\"tensorflow_gpu\"] }\n```\n\n## Manual TensorFlow Compilation\n\nIf you want to work against unreleased/unsupported TensorFlow versions or use a build optimized for\nyour machine, manual compilation is the way to go.\n\nSee [tensorflow-sys/README.md](tensorflow-sys/README.md) for details.\n\n## FAQ's\n\n### Why does the compiler say that parts of the API don't exist?\nThe especially unstable parts of the API (which is currently the `expr` module) are\nfeature-gated behind the feature `tensorflow_unstable` to prevent accidental\nuse. See http://doc.crates.io/manifest.html#the-features-section.\n(We would prefer using an `#[unstable]` attribute, but that\n[doesn't exist](https://github.com/rust-lang/rfcs/issues/1491) yet.)\n\n### How do I...?\nTry the [documentation](https://tensorflow.github.io/rust/tensorflow/) first, and see if it answers\nyour question.  If not, take a look at the examples folder.  Note that there may not be an example\nfor your exact question, but it may be answered by an example demonstrating something else.\n\nIf none of the above help, you can ask your question on\n[TensorFlow Rust Google Group](https://groups.google.com/a/tensorflow.org/forum/#!forum/rust).\n\n## Contributing\nDevelopers and users are welcome to join the\n[TensorFlow Rust Google Group](https://groups.google.com/a/tensorflow.org/forum/#!forum/rust).\n\nPlease read the [contribution guidelines](CONTRIBUTING.md) on how to contribute code.\n\nThis is not an official Google product.\n\nRFCs are [issues tagged with RFC](https://github.com/tensorflow/rust/labels/rfc).\nCheck them out and comment. Discussions are welcomed. After all, that is the purpose of\nRequest For Comment!\n\n## License\nThis project is licensed under the terms of the [Apache 2.0 license](LICENSE).\n"
        },
        {
          "name": "RELEASING.md",
          "type": "blob",
          "size": 4.0439453125,
          "content": "## Pre-release\n\n1. Clean up clippy lints\n1. Run `cargo audit` and fix any issues\n1. Generate protos\n   1. Run `cd tensorflow-proto-codegen; cargo run -- ${PATH_TO_TENSORFLOW?} $PWD/..`\n   1. Update Cargo.toml in root and tensorflow-op-codegen to ensure version of protobuf exactly equals version of protoc_rust used\n1. Generate ops\n   1. Run `cd tensorflow-op-codegen; cargo run -- ${PATH_TO_TENSORFLOW?} $PWD/..`\n   1. Run `cd tensorflow-op-codegen; cargo run --bin eager -- ${PATH_TO_TENSORFLOW?} $PWD/..`\n   1. Run `cargo fmt` to format generated code\n1. Commit and push changes\n\n## Releasing\n\nNote that any crate not mentioned here (e.g. tensorflow-proto-codegen, tensorflow-op-codegen) is internal-only and should *not* be published to crates.io.\n\n1. Check out a clean copy.  Note that `cargo publish` packages up untracked files.  Use `--allow-dirty` at your peril.\n1. Fetch from the main repo\n1. Ensure that the TensorFlow version is a real release, not a release candidate\n1. Ensure that the minimum supported Rust version in the README is up to date\n1. Update changelog.\n1. Bump version number of `tensorflow-sys` if necessary\n   1. Run `git log v${PREVIOUS_VERSION?}..HEAD tensorflow-sys` and see if there were any changes. If not, skip.\n   1. Bump the version in `tensorflow-sys/Cargo.toml`\n   1. Bump the version in `tensorflow-sys/README.md`\n   1. Bump the version for `tensorflow-sys` in the root `Cargo.toml`\n1. Bump version number of `tensorflow-sys-runtime` if necessary\n   1. Run `git log v${PREVIOUS_VERSION?}..HEAD tensorflow-sys-runtime` and see if there were any changes. If not, skip.\n   1. Bump the version in `tensorflow-sys-runtime/Cargo.toml`\n   1. Bump the version in `tensorflow-sys-runtime/README.md`\n   1. Bump the version for `tensorflow-sys-runtime` in the root `Cargo.toml`\n1. Bump version number of `tensorflow-internal-macros` if necessary\n   1. Run `git log v${PREVIOUS_VERSION?}..HEAD tensorflow-internal-macros` and see if there were any changes. If not, skip.\n   1. Bump the version in `tensorflow-internal-macros/Cargo.toml`\n   1. Bump the version for `tensorflow-internal-macros` in the root `Cargo.toml`\n1. Bump the version number in `Cargo.toml`\n1. Bump the version number in `README.md`\n1. Inside a virtualenv, run `./test-all`.  (See \"Running in a virtualenv\" section.)\n1. Double-check that addition.py is built using the version of TensorFlow being linked against.  (See \"Upgrading TensorFlow\" section.)\n1. Run `./run-valgrind`\n1. Commit and push the changes. (Push before publishing to ensure that the changes being published are up to date.)\n1. If the version of tensorflow-sys was bumped, run `cargo publish` for tensorflow-sys. (Publish before tagging in case there are problems publishing and we need to add commits to fix them.)\n1. If the version of tensorflow-sys-runtime was bumped, run `cargo publish` for tensorflow-sys-runtime. (Publish before tagging in case there are problems publishing and we need to add commits to fix them.)\n1. If the version of tensorflow-internal-macros was bumped, run `cargo publish` for tensorflow-internal-macros. (Publish before tagging in case there are problems publishing and we need to add commits to fix them.)\n1. Run `cargo publish`. (Publish before tagging in case there are problems publishing and we need to add commits to fix them.)\n1. Add a `v${VERSION?}` tag and push it\n1. Run `./update-docs`\n1. Announce the release to the mailing list\n\n## Post-release\n\n1. Update version numbers of dependencies\n1. Remove any deprecated items scheduled to be removed\n\n## Upgrading TensorFlow\n\n1. Update version and tag in tensorflow-sys/build.rs\n1. Update version in .github/workflow/requirements.txt\n1. Inside a virtualenv using the version of TensorFlow being linked against, run `python examples/addition/addition.py`.  (See \"Running in a virtualenv\" section.)\n\n## Running in a virtualenv\n\n1. If you haven't set it up, run `./create-virtualenv ${TENSORFLOW_VERSION?}`\n1. Run `source ~/tensorflow-${TENSORFLOW_VERSION?}/bin/activate` to activate the virtualenv\n1. Do whatever you need to do in the virtual env\n1. Run `deactivate` to exit the virtualenv\n"
        },
        {
          "name": "check-disk-space",
          "type": "blob",
          "size": 0.0771484375,
          "content": "#!/bin/bash\n\nset -euo pipefail\n\ndf -h || true\ndu -sh || true\ndu -sh /* || true\n"
        },
        {
          "name": "create-virtualenv",
          "type": "blob",
          "size": 0.6826171875,
          "content": "#!/bin/bash\n\n# See https://www.tensorflow.org/install/pip#2-create-a-virtual-environment-recommended\n\nset -euo pipefail\n\nif [ \"$#\" -lt 1 ]; then\n     echo \"Expected first argument to be TensorFlow version\"\n     exit 1\nfi\nTENSORFLOW_VERSION=\"$1\"\n\nfunction run {\n    echo \"----------------------------------------------------------------------\"\n    echo \"Running: $@\"\n    \"$@\"\n    echo\n}\n\nrun virtualenv --system-site-packages -p python3 ~/tensorflow-${TENSORFLOW_VERSION?}\nrun source ~/tensorflow-${TENSORFLOW_VERSION?}/bin/activate\nrun pip install --upgrade pip\nrun pip install --upgrade tensorflow==${TENSORFLOW_VERSION?}\nrun pip install tf_keras # required for examples/mobilenetv3\nrun deactivate\n"
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "run-valgrind",
          "type": "blob",
          "size": 3.1923828125,
          "content": "#!/bin/bash\n\n# Runs valgrind and reports results.\n#\n# Since jemalloc dropped support for valgrind\n# (https://github.com/jemalloc/jemalloc/issues/369), and both Rust and TensorFlow\n# use jemalloc by default, we need to compile both without it.  Unfortunately,\n# compiling TensorFlow from source is expensive, so this script takes a long\n# time to run.\n\nset -e\n\ncd $(dirname $(readlink -f \"$0\"))\n\nfunction run {\n    echo \"----------------------------------------------------------------------\"\n    echo \"Running: $@\"\n    \"$@\"\n    echo\n}\n\nvalgrind_log=valgrind.log\ntruncate --size=0 \"$valgrind_log\"\n\nrel_log=$(readlink -f \"$PWD\"/\"$valgrind_log\")\necho \"Writing valgrind output to $rel_log.\"\n\necho \"Building libtensorflow.so\"\n\n# This is the very expensive step.\nrun cargo build -p tensorflow-sys -vvv -j 1\n\n# Build examples and grab the path to the shared libraries.\n# The filename parsing is a hack because we're not really parsing JSON.\nexport LD_LIBRARY_PATH=\"$(cargo build --features='examples_system_alloc tensorflow_unstable' --example=addition --message-format=json \\\n    2>/dev/null | \\\nsed -En 's|^.*\"([^\"]*/target/debug/build/tensorflow-sys-[^\"/]*/out)\".*$|\\1|p')\"\necho \"LD_LIBRARY_PATH=$LD_LIBRARY_PATH\"\n\n# Run valgrind against all the things.\necho \"Testing tensorflow examples\"\nfor example in addition regression expressions regression_checkpoint regression_savedmodel; do\n    run cargo build --features='examples_system_alloc tensorflow_unstable' --example=\"$example\"\n    run valgrind --leak-check=full target/debug/examples/\"$example\" >> \"$valgrind_log\" 2>&1\ndone\n\necho \"Testing tensorflow eager examples\"\nfor example in mobilenetv3; do\n    run cargo build --features='examples_system_alloc tensorflow_unstable eager' --example=\"$example\"\n    run valgrind --leak-check=full target/debug/examples/\"$example\" >> \"$valgrind_log\" 2>&1\ndone\n\necho \"Testing tensorflow-sys examples\"\nfor example in multiplication; do\n    cargo build --features=examples_system_alloc --example=\"$example\" -p tensorflow-sys\n    (cd tensorflow-sys && run valgrind --leak-check=full ../target/debug/examples/\"$example\") >> \"$valgrind_log\" 2>&1\ndone\n\n# Build tests and grab the path to the test binary, because we can't properly run valgrind through cargo.\n# The filename parsing is a hack because we're not really parsing JSON.\ntest_binary=$(cargo test --features='examples_system_alloc tensorflow_unstable' --message-format=json --no-run \\\n    2>/dev/null | \\\nsed -En 's|^.*\"([^\"]*/target/debug/deps/tensorflow-[^\"]*)\".*$|\\1|p')\n\n# Run valgrind against the tests.\necho \"Testing tests\"\nrun valgrind --leak-check=full \"$test_binary\" >> \"$valgrind_log\" 2>&1\n\n# Aggregate results.\nprintf \"Definitely lost bytes: %9d\\n\" $(awk '/definitely lost:/{gsub(\",\",\"\",$4);sum+=$4}END{print sum}' < \"$valgrind_log\")\nprintf \"Indirectly lost bytes: %9d\\n\" $(awk '/indirectly lost:/{gsub(\",\",\"\",$4);sum+=$4}END{print sum}' < \"$valgrind_log\")\nprintf \"Possibly lost bytes:   %9d\\n\" $(awk '/possibly lost:/{gsub(\",\",\"\",$4);sum+=$4}END{print sum}' < \"$valgrind_log\")\nprintf \"Still reachable bytes: %9d\\n\" $(awk '/still reachable:/{gsub(\",\",\"\",$4);sum+=$4}END{print sum}' < \"$valgrind_log\")\n\nif egrep -i -q \"invalid read|invalid write\" \"$valgrind_log\"; then\n    echo \"Invalid operations detected\"\n    exit 1\nfi\n"
        },
        {
          "name": "rustfmt.toml",
          "type": "blob",
          "size": 0.0390625,
          "content": "newline_style = \"Unix\"\nedition = \"2018\"\n"
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "tensorflow-internal-macros",
          "type": "tree",
          "content": null
        },
        {
          "name": "tensorflow-op-codegen",
          "type": "tree",
          "content": null
        },
        {
          "name": "tensorflow-proto-codegen",
          "type": "tree",
          "content": null
        },
        {
          "name": "tensorflow-sys-runtime",
          "type": "tree",
          "content": null
        },
        {
          "name": "tensorflow-sys",
          "type": "tree",
          "content": null
        },
        {
          "name": "test-all",
          "type": "blob",
          "size": 4.6103515625,
          "content": "#!/bin/bash\n\nset -e\n\nfunction run {\n    echo \"----------------------------------------------------------------------\"\n    echo \"Running $@\"\n    \"$@\"\n    echo\n}\n\nfunction clean {\n    if [ \"$CI\" = \"true\" ]; then\n        rm -rf target/debug/examples\n        rm -rf target/debug/incremental\n    fi\n    df -h || true\n    du -sh target/debug/build/* || true\n}\n\n# Make sure the Tensorflow version in the -sys build script matches the one in\n# the run-valgrind script.\nversion_build_script=`grep \"const VERSION\" tensorflow-sys/build.rs | sed 's|.*\"\\([^\"]*\\)\";|\\1|g'`\nversion_requirements=`grep \"tensorflow\\s*=\" .github/workflows/requirements.txt | sed \"s|.*== \\(.*\\)|\\1|g\"`\nif [[ \"${version_build_script}\" != \"${version_requirements}\" ]]; then\n    echo \"ERROR: TensorFlow version specified in build script does not match the one in the\"\n    echo \"       GitHub requirements.\"\n    echo \"       tensorflow-sys/build.rs: ${version_build_script}\"\n    echo \"       .github/workflows/requirements.txt: ${version_requirements}\"\n    exit 1\nfi\n\n# Make sure the crate version matches the one in README.md.\nversion_tensorflow_crate=`grep \"^version =\" Cargo.toml | sed 's|.*= \"\\(.*\\)\"|\\1|g'`\nversion_tensorflow_readme=`sed -En 's|tensorflow *= *\"([^\"]*)\"|\\1|p' < README.md`\nversion_tensorflow_readme2=`sed -En 's|tensorflow *= *\\{ *version *= *\"([^\"]*)\".*$|\\1|p' < README.md`\nif [[ \"${version_tensorflow_crate}\" != \"${version_tensorflow_readme}\" || \\\n          \"${version_tensorflow_crate}\" != \"${version_tensorflow_readme2}\" ]]; then\n    echo \"ERROR: tensorflow crate version does not match the ones in README.md.\"\n    echo \"       Cargo.toml: ${version_tensorflow_crate}\"\n    echo \"       README.md: ${version_tensorflow_readme}\"\n    echo \"       README.md: ${version_tensorflow_readme2}\"\n    exit 1\nfi\n\n# Make sure the crate version matches the one in README.md for tensorflow-sys.\nversion_tensorflow_sys_crate=`grep \"^version =\" tensorflow-sys/Cargo.toml | sed 's|.*= \"\\(.*\\)\"|\\1|g'`\nversion_tensorflow_sys_readme=`sed -En 's|tensorflow-sys *= *\\{ *version *= *\"([^\"]*)\".*$|\\1|p' < tensorflow-sys/README.md`\nif [[ \"${version_tensorflow_sys_crate}\" != \"${version_tensorflow_sys_readme}\" ]]; then\n    echo \"ERROR: tensorflow-sys crate version does not match the one in README.md.\"\n    echo \"       Cargo.toml: ${version_tensorflow_sys_crate}\"\n    echo \"       README.md: ${version_tensorflow_sys_readme}\"\n    exit 1\nfi\n\n# GitHub seems to choke on the large number of warnings from dependencies.\nexport RUSTFLAGS=\"-Awarnings\"\n\n# Legacy Keras required for now because Keras 3 requires exporting models as\n# Keras format, which the C API can't read:\n# https://github.com/tensorflow/tensorflow/issues/70514\nTF_USE_LEGACY_KERAS=1 run python3 examples/mobilenetv3/create_model.py\nrun df -h\n# TODO(#391): Re-enable: (cd test_resources/library && ./build-test-op)\nrun cargo fmt --all -- --check\nclean\nrun cargo test -vv -j 2\nclean\nrun cargo test -vv -j 2 --features eager\nclean\nrun cargo test -vv -j 2 --features tensorflow_unstable\nclean\nrun cargo test -vv -j 2 --features ndarray\nclean\nrun cargo run --example regression\nclean\nrun cargo run --example xor\nclean\nrun cargo run --features tensorflow_unstable --example expressions\nclean\nrun cargo run --features eager --example mobilenetv3\nclean\nrun cargo doc --features experimental,tensorflow_unstable,ndarray,eager\nclean\nrun cargo doc --features experimental,tensorflow_unstable,ndarray,eager,private-docs-rs\nclean\n# TODO(#66): Re-enable: (cd tensorflow-sys && cargo test -vv -j 1)\n(cd tensorflow-sys && run cargo run --example multiplication && clean)\n(cd tensorflow-sys && run cargo run --example tf_version && clean)\n(cd tensorflow-sys && run cargo doc -vv && clean)\n\n# run cargo clippy\n# (cd tensorflow-sys && run cargo clippy)\n# (cd tensorflow-op-codegen && run cargo clippy)\n# (cd tensorflow-proto-codegen && run cargo clippy)\n# (cd tensorflow-internal-macros && run cargo clippy)\n\nfor file in $(find . -name target -prune -o -name '*.rs' -print); do\n    bad_deprecations=\"$(rustfmt --emit stdout --config max_width=1000 \"$file\" | grep '#\\[deprecated' | grep -E -v '([^\"\\\\]|\\\\.|\"([^\"\\\\]|\\\\.)*\")*since' || true)\"\n    if [[ \"${bad_deprecations}\" != \"\" ]]; then\n        echo \"ERROR: #[deprecated] attribute(s) found with no 'since' key in $file:\"\n        echo \"${bad_deprecations}\"\n        exit 1\n    fi\n    bad_deprecations=\"$(rustfmt --emit stdout --config max_width=1000 \"$file\" | grep '#\\[deprecated' | grep -E -v '([^\"\\\\]|\\\\.|\"([^\"\\\\]|\\\\.)*\")*note' || true)\"\n    if [[ \"${bad_deprecations}\" != \"\" ]]; then\n        echo \"ERROR: #[deprecated] attribute(s) found with no 'note' key in $file:\"\n        echo \"${bad_deprecations}\"\n        exit 1\n    fi\ndone\n\ndf -h\ndu -sh target/debug/build/*\n"
        },
        {
          "name": "test_resources",
          "type": "tree",
          "content": null
        },
        {
          "name": "update-docs",
          "type": "blob",
          "size": 0.439453125,
          "content": "#!/bin/bash\n\nset -ev\n\nURL=\"tensorflow/index.html\"\n\nHTML=\"<!DOCTYPE html>\n<link rel='canonical' href='${URL}'>\n<meta http-equiv='refresh' content='0; url=${URL}'>\n<script>window.location='${URL}'</script>\"\n\necho \"${HTML}\" > target/doc/index.html\n\nexport PYTHONUSERBASE=\"${HOME}/.local\"\npip install ghp-import --user\n${PYTHONUSERBASE}/bin/ghp-import -m 'Update the documentation' -n target/doc\n\ngit push -qf git@github.com:tensorflow/rust.git gh-pages\n"
        }
      ]
    }
  ]
}