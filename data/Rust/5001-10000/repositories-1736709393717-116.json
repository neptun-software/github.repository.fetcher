{
  "metadata": {
    "timestamp": 1736709393717,
    "page": 116,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjEyMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "gfx-rs/gfx",
      "stars": 5365,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.1298828125,
          "content": "# Junk\n.DS_Store\n.vscode/\n.#*\n*.iml\n.idea\n.fuse_hidden*\n\n# Compiled\n/doc\ntarget/\nexamples/generated-wasm\n\n# Service\nCargo.lock\n*.swp\n"
        },
        {
          "name": ".monocodus",
          "type": "blob",
          "size": 0.0146484375,
          "content": "version: 1.0.0\n"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 13.484375,
          "content": "# Change Log\n\n### hal-0.9.0 (18-06-2021)\n  - This is the final crates-published release of gfx-hal. gfx-hal development was mainly driven by wgpu which has now switched to its own GPU abstraction: wgpu-hal. As such, gfx-hal will be in maintence mode until the story of gfx-portability is figured out. Read more about the transition in #3768.\n  - MTL: Prevent accessing NSView on other threads.\n  - Fix panics when android apps reopen.\n  - Support dynamic array sizes on metal.\n  - Added backend agnostic RenderDoc captures.\n  - Allow initialization of gfx objects from raw handles.\n  - Add missing features to the dx12 backend that are needed by wgpu.\n  - Made `PhysicalDevice::enabled_extensions` public.\n  - Added the ability to import formeign memory\n  - GLES: Deferred deleting shaders until after linking\n  - GLES: Fix texture views\n  - GLES: Fix nearest neighbor filtering.\n  - Assorted: Documentation fixes\n\n### backend-metal-0.8.2 (08-05-2021)\n  - fix linking to QuartzCore\n\n### hal-0.8.0 (29-04-2021)\n  - Naga is the required and preferred shader translation path in Metal and OpenGL\n  - enabling SPIRV-Cross is optional behind `cross` feature\n  API: \n    - all backends can create shader modules from `naga::Module`\n    - sampler reduction modes (min/max samplers)\n    - image view creation requires `image::Usage` to be specified\n    - timestamp period query is moved to the `Queue`\n    - `DescriptorLimits` is added to consolidate descriptor-related limits and its fields changed from `usize` to `u32`\n    - `Limits` and `Capabilities` structures merged together as `PhysicalDeviceProperties`\n    - Entries for Mesh Shading and Descriptor Indexing added to `PhysicalDeviceProperties`\n    - buffer descriptor indexing\n    - sparse memory binding\n    - blend color is renamed to blend constants\n    - debug capture API for interfacing with XCode/RenderDoc/PIX\n    - better shader and pipeline creation errors\n  - Infrastructure:\n    - the new \"bench\" example is added\n  - Metal backend:\n    - pipeline cache support with binary archives\n    - `profiling` integration\n    - immutable sampler support on Naga path\n    - improve window resizing, expose \"present with transaction\" option\n\n## hal-0.7.0 (30-01-2021)\n  - `Borrow` and `ExactSizeIterator` bounds are removed from the iterators\n  - error improvements:\n    - use `thiserror` for errors\n    - variants and a few names are refactored\n  - API external synchronization constraints now match Vulkan, `&mut` changes affected the following parameters:\n    - event in `Device::set_event` and `Device::reset_event`\n    - fence in `Device::reset_fences` and `Queue::submit`\n    - destination sets in `write_descriptor_sets` and `copy_descriptor_sets`\n    - memory in `map_memory` and `unmap_memory`\n    - queue in `Queue::wait_idle`\n    - semaphore in `Queue::present`\n  - `ImageFeature` improvements:\n    - new `STORAGE_READ_WRITE` bit, indicating that the storage can be read and written within the same draw/dispatch call\n    - new `TRANSFER_SRC` and `TRANSFER_DST` bits, following `VK_KHR_maintenance1`\n    - new `SAMPLED_MINMAX` bit, following `VK_EXT_sampling_minmax`\n  - Framebuffers become image-less, following `VK_KHR_imageless_framebuffer`\n  - the old swapchain model is removed, and the new one is updated to match the backends even better\n  - debug names are supported for all objectr\n  - other API changes:\n    - `bind_index_buffer` now doesn't need a separate structure\n    - plural versions of `reset_fence` and `create_xx_pipeline` are removed\n    - swapchain images can be used for transfer operations\n    - separate feature for comparison mutable samplers\n    - pipeline descriptor vectors are replaced with slices\n    - features for non-normalized mutable samplers\n    - `Capabilities` structure with supported dynamic state flags\n  - OpenGL backend improvements:\n    - finally has the API fully matching gfx-hal\n    - now only uses OpenGL ES on Linux/Android/Web targets\n    - binding model has been completely rewritten\n    - various number of fixed in rendering, memory mapping, and other areas\n\n### backend-dx12-unreleased\n  - fix SPIR-V entry point selection\n\n### backend-vulkan-0.6.5 (15-10-2020)\n  - support different types of descriptors in a single `DescriptorSetWrite`\n\n### backend-dx12-0.6.3 backend-dx11-0.6.1 backend-metal-0.6.2 auxil-0.5.1 (31-08-2020)\n  - update spirv_cross to 0.21:\n    - force zero initialization in all generated shaders\n    - force the use of native arrays for MSL\n\n### backend-dx12-0.6.7 (12-10-2020)\n  - get proper support for compressed textures\n\n### backend-dx12-0.6.6 (05-10-2020)\n  - allow color blend factors to be used on alpha channel\n\n### backend-dx12-0.6.5 (04-10-2020)\n  - implement command buffer markers\n  - debug names for render passes and descriptor sets\n\n### backend-vulkan-0.6.3 (30-09-2020)\n  - enable VK_KHR_maintenance3 when VK_EXT_descriptor_indexing is enabled\n\n### backend-dx12-0.6.4 backend-vulkan-0.6.2 backend-metal-0.6.3 (23-09-2020)\n  - fix descriptor indexing features\n\n### backend-dx11-0.6.4 (07-09-2020)\n  - fix memory flush ranges\n  - support presentation modes\n\n### backend-dx11-0.6.3 (04-09-2020)\n  - fix cpu-visible mapping\n  - fix UAV reset count\n\n### backend-dx11-0.6.2 (02-09-2020)\n  - fix bindings filter by shader stages\n  - implement copies from buffers into R8, RG8, and RGBA8 textures\n  - fix read-only storage buffer support\n  - fix race condition in internal shader operations\n\n### auxil-0.6.0 (02-09-2020)\n  - update to newer version of spirv_cross to be consistent with backends\n\n### backend-dx12-0.6.3 (02-09-2020)\n  - fix root signature indexing\n  - force zero initialization for shader variables\n\n### backend-metal-0.6.2 (02-09-2020)\n  - enable compatibility with iOS emulator\n  - force zero initialization for shader variables\n  - force the use of native arrays for MSL\n\n### backend-dx11-0.6.1 (02-09-2020)\n  - force zero initialization for shader variables\n\n### backend-metal-0.6.1 (23-08-2020)\n  - fix layer checks in `clear_image`\n\n### backend-dx12-0.6.2 (19-08-2020)\n  - enable multisampling and object labels\n\n### backend-dx12-0.6.1 (18-08-2020)\n  - fix descriptor binding\n\n### backend-vulkan-0.6.1 (17-08-2020)\n  - fix Android build\n\n## hal-0.6.0 (15-08-2020)\n  - API changes:\n    - the old Vulkan-ish swapchain model is completely removed\n    - `pso::Stage` enum is removed from the API into `gfx-auxil::ShaderStage`\n    - `SubresourceRange` allows unbound array layers and mipmap levels\n    - new `PrimitiveAssemblerDesc` enum\n    - `DescriptorPool::free_sets` is renamed to just `free`\n  - Features:\n    - object labels for pipelines and their layouts\n    - draw with indirect counts\n    - mesh shaders (Vulkan with NV extension only, for now)\n\n### backend-dx12-0.5.10 (16-08-2020)\n  - fix binding of dynamic uniform buffers\n\n### backend-dx12-0.5.9 (14-08-2020)\n  - fix creation of depth-stencil views\n  - fix command allocator reset validation errors\n  - fix the crash on `unconfigure_swapchain`\n\n### backend-dx11-0.5.2 (29-07-2020)\n  - update libloading to 0.6\n\n### backend-vulkan-0.5.11 (22-07-2020)\n  - switch from `core-graphics` to `core-graphics-types`.\n\n### backend-metal-0.5.6 (21-07-2020)\n  - update metal to 0.20\n  - switch from `cocoa` to `cocoa-foundation`.\n  - remove core-graphics dependency\n\n### backend-metal-0.5.5 (20-07-2020)\n  - update cocoa to 0.22 and metal to 0.19.\n\n### backend-vulkan-0.5.10 (10-07-2020)\n  - skip unknown memory types\n\n### backend-empty-0.5.2 (06-07-2020)\n  - mock descriptor set creation functions\n\n### backend-empty-0.5.1 (30-06-2020)\n  - start turning the empty backend into a mock instead of always panicking\n  - mock memory creation and buffer and image creation functions\n\n### hal-0.5.3 backend-dx12-0.5.8 backend-vulkan-0.5.9 (27-06-2020)\n  - add `DRAW_INDIRECT_COUNT` feature and enable on supported backends\n\n### hal-0.5.2 backend-dx12-0.5.7 backend-metal-0.5.4 backend-vulkan-0.5.8 (12-06-2020)\n  - add descriptor indexing features and enable on supported backends\n\n### hal-0.5.1 backend-dx12-0.5.6 backend-metal-0.5.3 backend-vulkan-0.5.7 (10-06-2020)\n  - add `TEXTURE_DESCRIPTOR_ARRAY` feature and enable on supported backends\n\n### backend-dx12-0.5.5 (01-06-2020)\n  - implement descriptor pool destruction\n\n### backend-dx12-0.5.4 (29-05-2020)\n  - fix detection of integrated gpus\n  - fix UB in `compile_shader`\n\n### backend-dx11-0.5.1, backend-dx12-0.5.3, backend-gl-0.5.1, backend-metal-0.5.2 (05-05-2020)\n  - update spirv_cross to 0.20\n\n### backend-dx12-0.5.2 (05-04-2020)\n  - fix offset calculation for root descriptors\n\n### backend-dx12-0.5.1 (01-01-2020)\n  - fix drop of physical devices\n  - handle device lost during a fence wait\n  - rework the way swapchain waits to acquire new frames\n\n### backend-vulkan-0.5.6 (27-04-2020)\n  - gracefully detect when the driver supports it but hardware does not\n\n### backend-vulkan-0.5.3 (25-04-2020)\n  - switch to `VK_LAYER_KHRONOS_validation`\n\n### backend-vulkan-0.5.2 (01-04-2020)\n  - fix support for `AMD_NEGATIVE_VIEWPORT_HEIGHT`\n\n### backend-metal-0.5.1 (26-03-2020)\n  - fix debug assertion for the index buffer range\n  - fix `NDC_Y_FLIP` feature\n\n### backend-vulkan-0.5.1 (26-03-2020)\n  - fix debug color markers\n  - fix detection of the `MirrorClamp` mode\n\n## hal-0.5.0 (23-03-2020)\n  - API changes:\n    - allocating command buffers or descriptor sets no longer touches the heap\n    - `DescriptorType` is now a rich enum\n    - `RangeArg` trait is removed, instead the offsets are required, and the sizes are optional\n    - Removed `Anisotropic` and `SubpassRef` enums in favor of options\n  - Features:\n    - debug markers\n    - new `WrapMode::MirrorClamp`\n    - Y-flipped NDC space\n    - read-only storage descriptors\n\n### backend-metal-0.4.3 (22-02-2020)\n  - support version 2.2 of the Metal shading language\n\n### backend-vulkan-0.4.2 (13-02-2020)\n  - work around Intel swapchain bug when acquiring images\n\n### backend-dx12-0.4.3 (07-01-2020)\n  - fix a crash at initialization time\n\n### backend-dx11-0.4.4, backend-dx11-0.4.5 (06-01-2020)\n  - disable coherent memory for being broken\n  - rewrite the binding model completely\n\n### backend-metal-0.4.2 (18-11-2019)\n  - fix missing iOS metallib\n  - fix viewport/scissor after `clear_attachments` call\n\n### hal-0.4.1 (04-11-2019)\n  - `Error` implementations\n  - fix `ShaderStageFlags::ALL`\n\n### backend-dx12-0.4.1, backend-dx11-0.4.2 (01-11-2019)\n  - switch to explicit linking of \"d3d12.dll\", \"d3d11.dll\" and \"dxgi.dll\"\n\n### backend-dx12-0.4.1 (01-11-2019)\n  - switch to explicit linking of \"d3d12.dll\" and \"dxgi.dll\"\n\n## hal-0.4.0 (23-10-2019)\n  - all strongly typed HAL wrappers are removed\n  - all use of `failure` is removed\n  - alternative swapchain model built into `Surface`\n  - `Instance` trait is assocated by `Backend`, now includes surface creation and destruction\n  - `Surface` capabiltities queried are refactored, `PresentMode` is turned into bitflags\n  - `Primitive` enum is refactored and moved to `pso` module\n  - `SamplerInfo` struct is refactored and renamed to `SamplerDesc`\n  - debug labels for objects\n\n### backend-dx12-0.3.4 (13-09-2019)\n  - improve external render pass barriers\n\n### backend-metal-0.3.3 (05-09-2019)\n  - fix immutable samplers in combined image-samplers\n\n### backend-vulkan-0.3.3 (03-09-2019)\n  - fix iOS build\n\n### backend-vulkan-0.3.2, backend-dx12-0.3.2 (30-08-2019)\n  - add `Instance::try_create` methods\n\n### backend-metal-0.3.1 (21-08-2019)\n  - fix memory leaks in render pass and labels creation\n\n## hal-0.3.0 (08-08-2019)\n  - graphics pipeline state refactor\n  - no `winit` feature by default\n  - events support\n  - more device limits are exposed\n  - Vulkan: fixed swapchain ranges, stencil dynamic states\n  - DX12: \"readonly\" storage support\n  - Metal: argument buffer support, real immutable samplers\n  - GL: compute shaders, new memory model, WebGL support, lots of other goodies\n\n### backend-dx12-0.2.4 (02-08-2019)\n  - optimize shader visibility of descriptors\n\n### backend-dx12-0.2.3, backend-metal-0.2.4 (01-08-2019)\n  - fix exposed MSAA capabilities and resolves\n\n### backend-dx12-0.2.2 (29-07-2019)\n  - fix image view creation panics\n\n### backend-backend-metal-0.2.3 (10-07-2019)\n  - fixed depth clip mode support, updates spirv-cross\n\n### backend-dx11-0.2.1, backend-dx12-0.2.1, backend-metal-0.2.2, backend-empty-0.2.1 (28-06-2019)\n  - `Debug` implementations for `Instance`\n\n### backend-vulkan-0.2.2 (14-06-2019)\n  - allow building on macOS for Vulkan Portability\n\n### backend-metal-0.2.1 (14-06-2019)\n  - fixed memory leaks in render pass descriptors and function strings\n\n### hal-0.2.1 (10-06-2019)\n  - `Debug` implementations\n\n### backend-vulkan-0.2.1 (23-05-2019)\n  - fix `VK_EXT_debug_utils` check at startup\n\n## hal-0.2.0 (10-05-2019)\n  - pipeline cache support\n  - rich presentation errors\n  - nicer specialization constants\n  - `Debug` implementations\n  - consistent format names\n  - more limits\n  - surface alpha composition properties\n  - descriptor pool create flags\n  - removal of `FrameSync`\n\n### backend-dx11-0.1.1 (05-03-2019)\n  - fixed buffer bind flags\n  - synchronization of disjoint CB across copy operations\n  - depth texture views\n\n### backend-dx12-0.1.2 (04-03-2019)\n  - typeless formats for textures\n  - fixed vertex buffer binding\n  - fixed non-array views of array textures\n\n### backend-metal-0.1.1 (21-02-2019)\n  - secondary command buffers\n  - multiple iOS fixes\n  - fixed surface dimensions\n\n### backend-dx12-0.1.1 (04-02-2019)\n  - `get_fence_status`\n\n### backend-empty-0.1.0 (04-02-2019)\n  - dummy surface creation\n\n## hal-0.1.0 (27-12-2018)\n  - `gfx-hal`: graphics hardware abstraction layer\n  - `gfx-backend-*`: Vulkan, D3D12, D3D11, Metal, and GL\n  - `range-alloc`: helper struct to manage ranges\n  - unsafe qualifiers on all the API methods\n  - non-clonable command buffers and resources\n"
        },
        {
          "name": "Cargo.toml",
          "type": "blob",
          "size": 0.4208984375,
          "content": "[workspace]\n\nmembers = [\n    \"src/auxil/auxil\",\n    \"src/auxil/external-memory\",\n    \"src/auxil/range-alloc\",\n    \"src/auxil/renderdoc\",\n    \"src/backend/dx11\",\n    \"src/backend/dx12\",\n    \"src/backend/empty\",\n    \"src/backend/gl\",\n    \"src/backend/metal\",\n    \"src/backend/vulkan\",\n    \"src/backend/webgpu\",\n    \"src/hal\",\n    \"src/warden\",\n    \"examples\",\n]\n\n[patch.\"https://github.com/gfx-rs/naga\"]\n#naga = { path = \"../naga\" }\n"
        },
        {
          "name": "LICENSE-APACHE",
          "type": "blob",
          "size": 11.05859375,
          "content": "Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"{}\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright {yyyy} {name of copyright owner}\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n"
        },
        {
          "name": "LICENSE-MIT",
          "type": "blob",
          "size": 0.9990234375,
          "content": "Permission is hereby granted, free of charge, to any\nperson obtaining a copy of this software and associated\ndocumentation files (the \"Software\"), to deal in the\nSoftware without restriction, including without\nlimitation the rights to use, copy, modify, merge,\npublish, distribute, sublicense, and/or sell copies of\nthe Software, and to permit persons to whom the Software\nis furnished to do so, subject to the following\nconditions:\n\nThe above copyright notice and this permission notice\nshall be included in all copies or substantial portions\nof the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF\nANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED\nTO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A\nPARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT\nSHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\nOF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR\nIN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\nDEALINGS IN THE SOFTWARE.\n"
        },
        {
          "name": "Makefile",
          "type": "blob",
          "size": 3.6953125,
          "content": "RUST_BACKTRACE:=1\nEXCLUDES:=--exclude gfx-backend-webgpu\nFEATURES_GL:=\nFEATURES_HAL:=\nFEATURES_HAL2:=\nMETAL_SHADERS:=src/backend/metal/shaders\nVULKAN_FEATURES:=naga\n\nifeq (,$(TARGET))\n\tCHECK_TARGET_FLAG=\nelse\n\tCHECK_TARGET_FLAG=--target $(TARGET)\nendif\n\nifeq ($(OS),Windows_NT)\n\tEXCLUDES+= --exclude gfx-backend-metal --exclude gfx-backend-gl\n\tFEATURES_HAL=vulkan\n\tifeq ($(TARGET),x86_64-pc-windows-gnu)\n\t\t# No d3d12 support on GNU windows ATM\n\t\t# context: https://github.com/gfx-rs/gfx/pull/1417\n\t\tEXCLUDES+= --exclude gfx-backend-dx12\n\t\tEXCLUDES+= --exclude gfx-backend-dx11\n\telse\n\t\tFEATURES_HAL2=dx12\n\tendif\nelse\n\tUNAME_S:=$(shell uname -s)\n\tEXCLUDES+= --exclude gfx-backend-dx12\n\tEXCLUDES+= --exclude gfx-backend-dx11\n\tifeq ($(TARGET),aarch64-apple-ios)\n\t\tEXCLUDES+= --exclude gfx-backend-vulkan\n\telse ifeq ($(TARGET),x86_64-apple-ios)\n\t\tEXCLUDES+= --exclude gfx-backend-vulkan\n\tendif\n\tifeq ($(UNAME_S),Darwin)\n\t\tEXCLUDES+= --exclude gfx-backend-gl\n\t\tFEATURES_HAL=metal\n\telse\n\t\tEXCLUDES+= --exclude gfx-backend-metal\n\t\tFEATURES_HAL=vulkan\n\t\tFEATURES_GL=gl\n\t\tVULKAN_FEATURES+= use-rtld-next\n\tendif\nendif\n\n\n.PHONY: all check check-backends check-wasm quad quad-wasm test doc reftests benches shader-binaries\n\nall: check test\n\nhelp:\n\t@echo \"Supported backends: $(FEATURES_GL) $(FEATURES_HAL) $(FEATURES_HAL2)\"\n\ncheck: check-backends\n\tcd examples && cargo check $(CHECK_TARGET_FLAG) --features \"$(FEATURES_GL)\"\n\tcd examples && cargo check $(CHECK_TARGET_FLAG) --features \"$(FEATURES_HAL)\"\n\tcd examples && cargo check $(CHECK_TARGET_FLAG) --features \"$(FEATURES_HAL2)\"\n\tcd src/warden && cargo check $(CHECK_TARGET_FLAG) --no-default-features\n\tcd src/warden && cargo check $(CHECK_TARGET_FLAG) --features \"env_logger $(FEATURES_GL) $(FEATURES_HAL) $(FEATURES_HAL2)\"\n\ncheck-backends:\n\tcargo check --all $(CHECK_TARGET_FLAG) $(EXCLUDES) --exclude gfx-warden\n\tcargo check --manifest-path=src/backend/vulkan/Cargo.toml --features \"$(VULKAN_FEATURES)\"\nifeq ($(UNAME_S),Darwin)\n\tcargo check --manifest-path=src/backend/metal/Cargo.toml --all-features\nelse ifeq ($(OS),Windows_NT)\n\tcargo check --manifest-path=src/backend/dx12/Cargo.toml --all-features\n\tcargo check --manifest-path=src/backend/dx11/Cargo.toml --all-features\nelse\n\tcargo check --manifest-path=src/backend/gl/Cargo.toml --all-features\nendif\n\ncheck-wasm:\n\tcd src/backend/webgpu && RUSTFLAGS=\"--cfg=web_sys_unstable_apis\" cargo check --target wasm32-unknown-unknown\n\ntest:\n\tcargo test --all $(EXCLUDES)\n\ndoc:\n\tcargo doc --all $(EXCLUDES)\n\nreftests:\n\tcd src/warden && cargo run --bin reftest --features \"$(FEATURES_GL) $(FEATURES_HAL) $(FEATURES_HAL2)\" -- local\n\nbenches:\n\tcd src/warden && cargo run --release --bin bench --features \"$(FEATURES_GL) $(FEATURES_HAL) $(FEATURES_HAL2)\" -- blit\n\nreftests-ci:\n\tcd src/warden && cargo test\n\tcd src/warden && cargo run --features \"gl\" -- ci\n\nquad:\n\tcd examples && cargo run --bin quad --features ${FEATURES_HAL}\n\nquad-wasm:\n\tcd examples && cargo build --features gl --target wasm32-unknown-unknown --bin quad && wasm-bindgen ../target/wasm32-unknown-unknown/debug/quad.wasm --out-dir ../examples/generated-wasm --web\n\nshader-binaries: $(METAL_SHADERS)/*.metal\nifeq ($(UNAME_S),Darwin)\n\t# MacOS\n\txcrun -sdk macosx metal -c $(METAL_SHADERS)/*.metal -mmacosx-version-min=10.11 -g -MO\n\txcrun -sdk macosx metallib *.air -o $(METAL_SHADERS)/gfx-shaders-macos.metallib\n\trm *.air\n\t# iOS\n\txcrun -sdk iphoneos metal -c $(METAL_SHADERS)/*.metal -mios-version-min=11.4 -g -MO\n\txcrun -sdk iphoneos metallib *.air -o $(METAL_SHADERS)/gfx-shaders-ios.metallib\n\trm *.air\n\t# iOS Simulator\n\txcrun -sdk iphonesimulator metal -c $(METAL_SHADERS)/*.metal -mios-simulator-version-min=13.0 -g -MO\n\txcrun -sdk iphonesimulator metallib *.air -o $(METAL_SHADERS)/gfx-shaders-ios-simulator.metallib\n\trm *.air\nendif\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 5.2880859375,
          "content": "<p align=\"center\">\n  <img src=\"info/logo.png\">\n</p>\n<p align=\"center\">\n  <a href=\"https://matrix.to/#/#gfx:matrix.org\">\n    <img src=\"https://img.shields.io/badge/Matrix-%23gfx%3Amatrix.org-blueviolet.svg\" alt=\"Matrix room\">\n  </a>\n  <a href=\"https://crates.io/crates/gfx-hal\">\n      <img src=\"https://img.shields.io/crates/v/gfx-hal.svg?label=gfx-hal\" alt = \"gfx-hal on crates.io\">\n  </a>\n  <a href=\"https://github.com/gfx-rs/gfx/actions\">\n      <img src=\"https://github.com/gfx-rs/gfx/workflows/CI/badge.svg\" alt=\"Build Status\">\n  </a>\n  <br>\n  <strong><a href=\"info/getting_started.md\">Getting Started</a> | <a href=\"http://docs.rs/gfx-hal\">Documentation</a> | <a href=\"http://gfx-rs.github.io/\">Blog</a> | <a href=\"https://opencollective.com/gfx-rs\">Funding</a> </strong>\n</p>\n\n# gfx-rs\n\ngfx-rs is a low-level, cross-platform graphics and compute abstraction library in Rust. It consists of the following components:\n\n## gfx-hal deprecation\n\nAs of the v0.9 release, gfx-hal is now in maintenance mode. gfx-hal development was mainly driven by [wgpu](https://github.com/gfx-rs/wgpu), which has now switched to its own GPU abstraction called [wgpu-hal](https://github.com/gfx-rs/wgpu/pull/1471). For this reason, gfx-hal development has switched to maintenance only, until the developers figure out the story for gfx-portability. Read more about the transition in [#3768](https://github.com/gfx-rs/gfx/discussions/3768).\n\n## hal\n\n* `gfx-hal` which is gfx's hardware abstraction layer: a Vulkan-ic mostly unsafe API which translates to native graphics backends.\n* `gfx-backend-*` which contains graphics backends for various platforms:\n  * [Vulkan](src/backend/vulkan) (runs on Linux, Windows, and Android)\n  * [DirectX 12](src/backend/dx12) and [DirectX 11](src/backend/dx11)\n  * [Metal](src/backend/metal) (runs on macOS and iOS)\n  * [OpenGL ES3](src/backend/gl) (runs on Linux/BSD, Android, and WASM/WebGL2)\n* `gfx-warden` which is a data-driven reference test framework, used to verify consistency across all graphics backends.\n\ngfx-rs is hard to use, it's recommended for performance-sensitive libraries and engines. If that's not your domain, take a look at [wgpu-rs](https://github.com/gfx-rs/wgpu-rs) for a safe and simple alternative.\n\n## Hardware Abstraction Layer\n\nThe Hardware Abstraction Layer (HAL), is a thin, low-level graphics and compute layer which translates API calls to various backends, which allows for cross-platform support. The API of this layer is based on the Vulkan API, adapted to be more Rust-friendly.\n\n<p align=\"center\"><img src=\"info/hal.svg\" alt=\"Hardware Abstraction Layer (HAL)\" /></p>\n\nCurrently HAL has backends for Vulkan, DirectX 12/11, Metal, and OpenGL/OpenGL ES/WebGL.\n\nThe HAL layer is consumed directly by user applications or libraries. HAL is also used in efforts such as [gfx-portability](https://github.com/gfx-rs/portability).\n\nSee the [Big Picture](https://gfx-rs.github.io/2020/11/16/big-picture.html) blog post for connections.\n\n## The old `gfx` crate (pre-ll)\n\nThis repository was originally home to the [`gfx`](https://crates.io/crates/gfx) crate, which is now deprecated. You can find the latest versions of the code for that crate in the [`pre-ll`](https://github.com/gfx-rs/gfx/tree/pre-ll) branch of this repository.\n\nThe master branch of this repository is now focused on developing [`gfx-hal`](https://crates.io/crates/gfx-hal) and its associated backend and helper libraries, as described above. `gfx-hal` is a complete rewrite of `gfx`, but it is not necessarily the direct successor to `gfx`. Instead, it serves a different purpose than the original `gfx` crate, by being \"lower level\" than the original. Hence, the name of `gfx-hal` was originally `ll`, which stands for \"lower level\", and the original `gfx` is now referred to as `pre-ll`.\n\nThe spiritual successor to the original `gfx` is actually [`wgpu`](https://github.com/gfx-rs/wgpu-rs), which stands on a similar level of abstraction to the old `gfx` crate, but with a modernized API that is more fit for being used over Vulkan/DX12/Metal. If you want something similar to the old `gfx` crate that is being actively developed, `wgpu` is probably what you're looking for, rather than `gfx-hal`.\n\n## Contributing\n\nWe are actively looking for new contributors and aim to be welcoming and helpful to anyone that is interested! We know the code base can be a bit intimidating in size and depth at first, and to this end we have a [label](https://github.com/gfx-rs/gfx/issues?q=is%3Aissue+is%3Aopen+label%3Acontributor-friendly) on the issue tracker which marks issues that are new contributor friendly and have some basic direction for completion in the issue comments. If you have any questions about any of these issues (or any other issues) you may want to work on, please comment on GitHub and/or drop a message in our [Matrix chat](https://matrix.to/#/#gfx:matrix.org)!\n\n## License\n\n[license]: #license\n\nThis repository is licensed under either of\n\n* Apache License, Version 2.0, ([LICENSE-APACHE](LICENSE-APACHE) or http://www.apache.org/licenses/LICENSE-2.0)\n* MIT license ([LICENSE-MIT](LICENSE-MIT) or http://opensource.org/licenses/MIT)\n\nat your option.\n\nUnless you explicitly state otherwise, any contribution intentionally submitted for inclusion in the work by you, as defined in the Apache-2.0 license, shall be dual licensed as above, without any additional terms or conditions.\n"
        },
        {
          "name": "bors.toml",
          "type": "blob",
          "size": 0.201171875,
          "content": "status = [\n  \"Dependency Check\",\n  \"iOS Stable\",\n  \"Web Assembly\",\n  \"MacOS Stable\",\n  \"MacOS Nightly\",\n  \"Android Stable\",\n  \"Ubuntu Stable\",\n  \"Ubuntu Nightly\",\n  \"Windows Stable\",\n  \"Windows Nightly\",\n]\n"
        },
        {
          "name": "deny.toml",
          "type": "blob",
          "size": 4.7109375,
          "content": "# This template contains all of the possible sections and their default values\n\n# Note that all fields that take a lint level have these possible values:\n# * deny - An error will be produced and the check will fail\n# * warn - A warning will be produced, but the check will not fail\n# * allow - No warning or error will be produced, though in some cases a note\n# will be\n\n# The values provided in this template are the default values that will be used\n# when any section or field is not specified in your own configuration\n\n# If 1 or more target triples (and optionally, target_features) are specified,\n# only the specified targets will be checked when running `cargo deny check`.\n# This means, if a particular package is only ever used as a target specific\n# dependency, such as, for example, the `nix` crate only being used via the\n# `target_family = \"unix\"` configuration, that only having windows targets in\n# this list would mean the nix crate, as well as any of its exclusive\n# dependencies not shared by any other crates, would be ignored, as the target\n# list here is effectively saying which targets you are building for.\ntargets = [\n    # The triple can be any string, but only the target triples built in to\n    # rustc (as of 1.40) can be checked against actual config expressions\n    #{ triple = \"x86_64-unknown-linux-musl\" },\n    # You can also specify which target_features you promise are enabled for a\n    # particular target. target_features are currently not validated against\n    # the actual valid features supported by the target architecture.\n    #{ triple = \"wasm32-unknown-unknown\", features = [\"atomics\"] },\n]\n\n# This section is considered when running `cargo deny check advisories`\n# More documentation for the advisories section can be found here:\n# https://embarkstudios.github.io/cargo-deny/checks/advisories/cfg.html\n[advisories]\n# The path where the advisory database is cloned/fetched into\ndb-path = \"~/.cargo/advisory-db\"\n# The url of the advisory database to use\ndb-url = \"https://github.com/rustsec/advisory-db\"\n# The lint level for security vulnerabilities\nvulnerability = \"deny\"\n# The lint level for unmaintained crates\nunmaintained = \"warn\"\n# The lint level for crates that have been yanked from their source registry\nyanked = \"warn\"\n# The lint level for crates with security notices. Note that as of\n# 2019-12-17 there are no security notice advisories in\n# https://github.com/rustsec/advisory-db\nnotice = \"warn\"\n# A list of advisory IDs to ignore. Note that ignored advisories will still\n# output a note when they are encountered.\nignore = [\n    #\"RUSTSEC-0000-0000\",\n]\n# Threshold for security vulnerabilities, any vulnerability with a CVSS score\n# lower than the range specified will be ignored. Note that ignored advisories\n# will still output a note when they are encountered.\n# * None - CVSS Score 0.0\n# * Low - CVSS Score 0.1 - 3.9\n# * Medium - CVSS Score 4.0 - 6.9\n# * High - CVSS Score 7.0 - 8.9\n# * Critical - CVSS Score 9.0 - 10.0\n#severity-threshold = \n\n# This section is considered when running `cargo deny check licenses`\n# More documentation for the licenses section can be found here:\n# https://embarkstudios.github.io/cargo-deny/checks/licenses/cfg.html\n[licenses]\n# The lint level for crates which do not have a detectable license\nunlicensed = \"allow\"\n# List of explictly allowed licenses\n# See https://spdx.org/licenses/ for list of possible licenses\n# [possible values: any SPDX 3.7 short identifier (+ optional exception)].\nallow = [\n    \"MIT\",\n    \"Apache-2.0\",\n    \"ISC\",\n    \"Zlib\",\n    \"BSD-3-Clause\",\n    \"BSD-2-Clause\",\n]\n# List of explictly disallowed licenses\n# See https://spdx.org/licenses/ for list of possible licenses\n# [possible values: any SPDX 3.7 short identifier (+ optional exception)].\ndeny = [\n    #\"Nokia\",\n]\n# Lint level for licenses considered copyleft\ncopyleft = \"warn\"\n# Blanket approval or denial for OSI-approved or FSF Free/Libre licenses\n# * both - The license will be approved if it is both OSI-approved *AND* FSF\n# * either - The license will be approved if it is either OSI-approved *OR* FSF\n# * osi-only - The license will be approved if is OSI-approved *AND NOT* FSF\n# * fsf-only - The license will be approved if is FSF *AND NOT* OSI-approved\n# * neither - This predicate is ignored and the default lint level is used\nallow-osi-fsf-free = \"neither\"\n# Lint level used when no other predicates are matched\n# 1. License isn't in the allow or deny lists\n# 2. License isn't copyleft\n# 3. License isn't OSI/FSF, or allow-osi-fsf-free = \"neither\"\ndefault = \"deny\"\n# The confidence threshold for detecting a license from license text.\n# The higher the value, the more closely the license text must be to the\n# canonical license text of a valid SPDX license file.\n# [possible values: any between 0.0 and 1.0].\nconfidence-threshold = 0.8\n"
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "info",
          "type": "tree",
          "content": null
        },
        {
          "name": "rustfmt.toml",
          "type": "blob",
          "size": 0.0947265625,
          "content": "#blank_lines_upper_bound = 2\n#spaces_around_ranges = true\n#imports_layout = \"HorizontalVertical\"\n"
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "work",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}