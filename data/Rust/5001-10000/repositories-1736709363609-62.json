{
  "metadata": {
    "timestamp": 1736709363609,
    "page": 62,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjcw",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "mre/idiomatic-rust",
      "stars": 6754,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".lycheeignore",
          "type": "blob",
          "size": 0.01171875,
          "content": "linkedin.com"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 2.2568359375,
          "content": "# Contributing to Idiomatic Rust\n\n## Introduction\n\nThank you for your interest in contributing to Idiomatic Rust! This guide will\nhelp you understand how to contribute effectively.\n\n## `README` is Auto-Generated\n\nPlease note that the `README.md` file in this repository is auto-generated\n*using a\nRust script. **Do not edit the `README.md` file directly.** Instead, make\nchanges to the `resources.json` file or the Rust script.\n\n### Generating the README\n\nTo generate the README, ensure that Rust is installed on your machine. You can\nthen run the following command:\n\n```sh\nmake render\n```\n\nThis will update the `README.md` file based on the current contents of\n`resources.json`.\n\n### Adding Resources to `resources.json`\n\n`resources.json` is the primary file where resources about idiomatic Rust are\nlisted. The file is structured in a JSON array, where each resource is an object\nwith specific fields.\n\n### File Structure\n\nEach resource object in `resources.json` should have the following structure:\n\n```json\n{\n  \"title\": \"Resource Title\",\n  \"url\": \"https://resource.url\",\n  \"description\": \"A brief description of the resource.\",\n  \"tags\": [\"tag1\", \"tag2\"],\n  \"official\": true or false,\n  \"year\": YearOfPublication,\n  \"difficultyLevel\": \"beginner | intermediate | advanced\",\n  \"duration\": \"time duration (if audio/video) or null\",\n  \"interactivityLevel\": \"low | medium | high\",\n  \"free\": true or false,\n  \"category\": \"project | workshop | book | article | talk | forum\"\n}\n```\n\nCheck out the file for some examples.\nPlease ensure that your addition adheres to this format for consistency.\n\n### Adding a New Resource\n\n1. Fork the repository.\n2. Add your resource to `resources.json`, following the structure above.\n3. Run `make render` to locally to generate the README.\n4. Create a pull request with your changes.\n\n### Pull Requests\n\nWhen you submit a pull request, please include the following:\n\n* A brief explanation of the resource and why it's beneficial for idiomatic\n  Rust.\n* Confirmation that the resource links and information are current and valid.\n\n### Questions or Issues\n\nIf you have any questions or encounter any issues, please open an issue in the\nrepository, and we'll get back to you as soon as possible.\n\nThank you for contributing to making Rust programming more idiomatic and\naccessible!\n"
        },
        {
          "name": "Makefile",
          "type": "blob",
          "size": 0.0654296875,
          "content": ".PHONY: render\nrender:\n\tcargo run --manifest-path=render/Cargo.toml"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 14.8271484375,
          "content": "<!--\n‚ö†Ô∏è‚ö†Ô∏è WARNING: This file is generated by `make render`. Do not edit manually!\nSee `CONTRIBUTING.md` for more information.\n-->\n\n<picture >\n  <source media=\"(prefers-color-scheme: dark)\" srcset=\"assets/idiomatic-rust-dark.png\">\n  <img src=\"assets/idiomatic-rust.png\" />\n</picture>\n\n[![Check Links](https://github.com/mre/idiomatic-rust/workflows/Check%20Links/badge.svg)](https://github.com/mre/idiomatic-rust/actions/workflows/check_links.yml)\n\nThis repository collects resources for writing clean, idiomatic Rust code.\nYou can find a sortable/searchable version of this list [here](https://corrode.dev/idiomatic-rust/).\n\n> _Idiomatic_ coding means following the conventions of a given language. It is\n> the most concise, convenient, and common way of accomplishing a task in that\n> language, rather than forcing it to work in a way the author is familiar with\n> from a different language. - Adapted from [Tim\n> Mansfield](https://github.com/tim-hr/stuff/wiki/Idiomatic-coding)\n\nContributions welcome! To add missing resources, [please refer to the contributing documentation](https://github.com/mre/idiomatic-rust/blob/master/CONTRIBUTING.md).\n\n## ‚öô Projects\n\n\n\n- [blessed.rs](https://blessed.rs/) ‚Äî An unofficial guide to the Rust ecosystem. Suggestions for popular, well-maintained crates.\n\n- [cheats.rs - Idiomatic Rust tips](https://cheats.rs/) ‚Äî A list of quick tips to make your code more idiomatic.\n\n- [clippy](https://github.com/rust-lang/rust-clippy) ‚Äî A bunch of lints to catch common mistakes and improve your Rust code.\n\n- [Elements of Rust](https://github.com/ferrous-systems/elements-of-rust) ‚Äî A collection of software engineering techniques for effectively expressing intent with Rust.\n\n- [Patterns](https://rust-unofficial.github.io/patterns/) ‚Äî A catalogue of design patterns in Rust.\n\n- [Possible Rust](https://www.possiblerust.com/) ‚Äî A blog for intermediate Rust programmers exploring real-world code and design patterns.\n\n- [Rust Anthology](https://github.com/brson/rust-anthology) ‚Äî The best short-form writing about Rust, collected.\n\n- [Rust API Guidelines](https://rust-lang.github.io/api-guidelines/) ‚Äî An extensive list of recommendations for idiomatic Rust APIs.\n\n- [Rust by Example](https://doc.rust-lang.org/rust-by-example/) ‚Äî A community driven collection of example code which follow Rust best practices.\n\n## üèã Workshops\n\n\n\n- [Build your own JIRA with Rust](https://github.com/LukeMathWalker/build-your-own-jira-with-rust/) ‚Äî A test-driven workshop to learn Rust by building your own JIRA clone!\n\n- [Comprehensive Rust](https://github.com/google/comprehensive-rust) ‚Äî A four day Rust course developed by the Android team, covering all aspects of Rust.\n\n- [Ferrous Systems Teaching Material](https://ferrous-systems.github.io/teaching-material/index.html) ‚Äî Free workshop material produced by Ferrous Systems for trainings.\n\n- [Hecto: Build your own text editor in Rust](https://www.flenker.blog/hecto/) ‚Äî This is a series of blog posts that shows you how to build a text editor in Rust\n\n- [Idiomatic Rust Workshop](https://fettblog.eu/slides/idiomatic-rust/) ‚Äî A talk/workshop about idiomatic Rust code focusing on effective use of existing syntax and design patterns\n\n- [PingCAP talent plan](https://github.com/pingcap/talent-plan) ‚Äî A series of training courses about writing distributed systems in Rust.\n\n- [Procedural Macros Workshop](https://github.com/dtolnay/proc-macro-workshop) ‚Äî A selection of projects designed to learn to write Rust procedural macros.\n\n- [Rust 101](https://101-rs.tweede.golf/) ‚Äî A Rust University course by tweede golf.\n\n- [Rust Development at Sentry](https://develop.sentry.dev/rust/) ‚Äî A document containing useful resources for getting started with Rust and adhering to Sentry coding principles.\n\n- [rust-lang/rustlings](https://github.com/rust-lang/rustlings) ‚Äî Small exercises to get you used to reading and writing Rust code.\n\n## üìñ Books\n\n\n\n- [Command Line Applications in Rust](https://rust-cli.github.io/book) ‚Äî A tutorial on how to write CLI apps in Rust, learning many aspects of the ecosystem.\n\n- [Command-Line Rust](https://github.com/kyclark/command-line-rust) ‚Äî Learn the language by writing Rust versions of common Unix coreutils.\n\n- [Discover the world of microcontrollers through Rust!](https://rust-embedded.github.io/discovery/) ‚Äî An introductory course on microcontroller-based embedded systems using Rust.\n\n- [High Assurance Rust](https://highassurance.rs/) ‚Äî Developing secure and robust software, focusing on embedded-friendly data structures in Rust.\n\n- [Programming Rust: Fast, Safe Systems Development](https://www.oreilly.com/library/view/programming-rust-2nd/9781492052586/) ‚Äî A comprehensive Rust Programming Guide that covers most of Rust's features in detail.\n\n- [Rust Atomics and Locks](https://marabos.nl/atomics/) ‚Äî Helps Rust programmers of all levels gain a clear understanding of low-level concurrency.\n\n- [Rust Cookbook](https://github.com/rust-lang-nursery/rust-cookbook) ‚Äî Examples that demonstrate good practices to accomplish common programming tasks in Rust.\n\n- [Rust for Rustaceans](https://nostarch.com/rust-rustaceans) ‚Äî Covers how to design reliable, idiomatic, and ergonomic Rust programs based on best principles.\n\n## üì∞ Articles\n\n\n\n### 2023\n\n- [Aim For Immutability in Rust](https://corrode.dev/blog/immutability/) ‚Äî Explains why variables are immutable in Rust by default.\n  - [Compile-Time Invariants in Rust](https://corrode.dev/blog/compile-time-invariants/) ‚Äî Shows how macros can be used to enforce invariants at compile-time.\n  \n\n### 2021\n\n- [Rust Number Conversion: Don't Follow the Book...](https://blog.notmet.net/2021/12/rust-number-conversion-dont-follow-the-book.../) ‚Äî A blog post discussing the best practices for number conversion in Rust.\n  - [Hexagonal architecture in Rust](https://alexis-lozano.com/hexagonal-architecture-in-rust-1/) ‚Äî Describes how to build a Rust service using domain driven design and a test-first approach.\n  - [Wrapping errors in Rust](https://edgarluque.com/blog/wrapping-errors-in-rust) ‚Äî Wrapping 'reqwest::Error' and a custom error type as an enum to make library usage easier.\n  - [Aiming for idiomatic Rust](https://web.archive.org/web/20221203043933/https://shane-o.dev/blog/aiming-for-idiomatic-rust) ‚Äî Discusses different ways to solve a popular coding puzzle, 'balanced brackets', in Rust.\n  - [Naming Your Lifetimes](https://www.possiblerust.com/pattern/naming-your-lifetimes) ‚Äî Explains how using longer, declarative lifetime names can help to disambiguate which borrow is which.\n  \n\n### 2020\n\n- [Are out parameters idiomatic in Rust?](https://steveklabnik.com/writing/are-out-parameters-idiomatic-in-rust) ‚Äî Discusses the pros and cons of functions returning a value vs. modifying a parameter in-place.\n  - [Guide on how to write documentation for a Rust crate](https://blog.guillaume-gomez.fr/articles/2020-03-12+Guide+on+how+to+write+documentation+for+a+Rust+crate) ‚Äî Writing good documentation with rustdoc including many examples.\n  - [Learning Rust through open source and live code reviews](https://loige.co/learning-rust-through-open-source-and-live-code-reviews/) ‚Äî Covers patterns like 'FromStr' and exposing a CLI and a library in one crate.\n  - [Refactoring Rust Transpiled from C](https://immunant.com/blog/2020/09/transpiled_c_safety/) ‚Äî Describes how to lift a C-project that was automatically converted to unsafe Rust to safer, more idiomatic Rust.\n  - [Context-preserving error handling](https://kazlauskas.me/entries/errors) ‚Äî Explains how to use crates like 'thiserror' in combination with 'map_err' to add context to errors.\n  \n\n### 2019\n\n- [Rust Patterns: Enums Instead Of Booleans](http://blakesmith.me/2019/05/07/rust-patterns-enums-instead-of-booleans.html) ‚Äî Discusses how using enums instead of booleans can express intent more clearly in Rust.\n  - [Taking string arguments in Rust](http://xion.io/post/code/rust-string-args.html) ‚Äî Discussing how to avoid subtle issues with string handling and when to use 'str' vs 'String'.\n  - [Await a minute](https://docs.rs/dtolnay/0.0.3/dtolnay/macro._01__await_a_minute.html) ‚Äî Example code for moving from raw futures to async/await syntax to improve error handling.\n  \n\n### 2018\n\n- [Programming an ARM microcontroller in Rust at four different levels of abstraction](https://pramode.in/2018/02/20/programming-a-microcontroller-in-rust-at-four-levels-of-abstraction/) ‚Äî Demonstrates how Rust helps to move from low-level embedded code to high-level abstractions.\n  \n\n### 2017\n\n- [The balance between cost, useability and soundness in C bindings, and Rust-SDL2's release](https://web.archive.org/web/20190509123207/https://cobrand.github.io/rust/sdl2/2017/05/07/the-balance-between-soundness-cost-useability.html) ‚Äî Writing safe, sound, idiomatic libraries despite the limitations of the borrow checker.\n  - [Math with distances in Rust: safety and correctness across units](https://ferrisellis.com/content/rust-implementing-units-for-types/) ‚Äî How to create a system to cleanly and safely do arithmetic with lengths.\n  - [Lessons learned redesigning and refactoring a Rust Library](https://web.archive.org/web/20220126172949/https://blog.mgattozzi.dev/refactor-rust/) ‚Äî 'RefCell', the builder pattern and more.\n  - [Iteration patterns for Result & Option](http://xion.io/post/code/rust-iter-patterns.html) ‚Äî Explores how to filter and partition iterators of Result and Option types idiomatically.\n  \n\n### 2016\n\n- [Idiomatic tree and graph like structures in Rust](https://rust-leipzig.github.io/architecture/2016/12/20/idiomatic-trees-in-rust/) ‚Äî Introduction to safe, dynamic, arena based tree structures without using lifetimes.\n  - [Convenient and idiomatic conversions in Rust](https://ricardomartins.cc/2016/08/03/convenient_and_idiomatic_conversions_in_rust) ‚Äî Explains 'From<T>', 'Into<T>', 'TryFrom<T>', 'TryInto<T>', 'AsRef<T>' and 'AsMut<T>' with practical examples.\n  - [Rustic Bits](https://llogiq.github.io/2016/02/11/rustic.html) ‚Äî Small things that make for rustic code.\n  - [Ripgrep Code Review](https://blog.mbrt.dev/posts/ripgrep/) ‚Äî An analysis of the popular 'ripgrep' tool's source code.\n  - [Pretty State Machine Patterns in Rust](https://hoverbear.org/2016/10/12/rust-state-machine-pattern/) ‚Äî How to represent a State Machine in an expressive and understandable way in Rust.\n  - [Teaching libraries through good documentation](https://deterministic.space/teaching-libraries.html) ‚Äî How to use the full power of Rust's documentation support (e.g. doc tests).\n  - [Elegant Library APIs in Rust](https://deterministic.space/elegant-apis-in-rust.html) ‚Äî Many helpful tips and tricks for writing libraries in Rust.\n  - [Russian Dolls and clean Rust code](https://web.archive.org/web/20220126183049/https://blog.mgattozzi.dev/russian-dolls/) ‚Äî How to use the full power of 'Option' and 'Result' (especially 'and_then()' and 'unwrap_or()').\n  \n\n### 2015\n\n- [Rayon: data parallelism in Rust](https://smallcultfollowing.com/babysteps/blog/2015/12/18/rayon-data-parallelism-in-rust/) ‚Äî Writing elegant parallel code in Rust.\n  - [Strategies for solving 'cannot move out of' borrowing errors in Rust](https://hermanradtke.com/2015/06/09/strategies-for-solving-cannot-move-out-of-borrowing-errors-in-rust.html) ‚Äî Practical tips to help understand the borrow-checker and move semantics.\n  - [Effectively Using Iterators In Rust](https://hermanradtke.com/2015/06/22/effectively-using-iterators-in-rust.html) ‚Äî Explanation of the 'Iter' and 'IntoIter' traits and how loops actually work in Rust.\n  - [Creating a Rust function that returns a &str or String](https://hermanradtke.com/2015/05/29/creating-a-rust-function-that-returns-string-or-str.html) ‚Äî How 'Into' and 'Cow' (Clone-on-write) work together to avoid allocations for string types.\n  - [Creating a Rust function that accepts String or &str](https://hermanradtke.com/2015/05/06/creating-a-rust-function-that-accepts-string-or-str.html) ‚Äî How to make calling your code both ergonomic and fast (zero-allocation).\n  - [Error Handling in Rust](https://blog.burntsushi.net/rust-error-handling/) ‚Äî Understanding and handling errors in Rust in an idiomatic way.\n  - [Rust traits for developer friendly libraries](https://benashford.github.io/blog/2015/05/24/rust-traits-for-developer-friendly-libraries/) ‚Äî Thoughts about implementing good Rust libraries.\n  \n\n## üé§ Talks\n\n\n\n### 2024\n\n- The Four Horsemen of Bad Rust Code ‚Äî A talk about common pitfalls in Rust code like overengineering and premature optimization. [[Video](https://github.com/corrode/four-horsemen-talk)]\n  \n\n### 2023\n\n- Tricks of the Trait: Enabling Ergonomic Extractors ‚Äî Rust Nation UK, Feb. 2023 [[Video](https://www.youtube.com/watch?v=7DOYtnCXucw)]\n  \n\n### 2022\n\n- Ergonomic APIs for hard problems ‚Äî RustLab Conference, October 2022 [[Video](https://www.youtube.com/watch?v=Phk0C-kLlho)]\n  - Nine Rules for Elegant Rust Library APIs ‚Äî Seattle Rust Meetup, Sep. 2022 [[Video](https://www.youtube.com/watch?v=6-8-9ZV-2WQ)]\n  \n\n### 2020\n\n- Macros for a More Productive Rust ‚Äî RustConf 2020 [[Video](https://www.youtube.com/watch?v=dZiWkbnaQe8)]\n  \n\n### 2019\n\n- Making Rust Delightful ‚Äî RustCon Asia 2019 [[Video](https://www.youtube.com/watch?v=YSEx8wtlPWc)]\n  \n\n### 2018\n\n- Idiomatic Rust - Writing Concise and Elegant Rust Code ‚Äî FOSDEM 2018 [[Video](https://www.youtube.com/watch?v=P2mooqNMxMs)]\n  \n\n### 2017\n\n- Idiomatic Rust Libraries ‚Äî Rustfest Kiev [[Video](https://www.youtube.com/watch?v=0zOg8_B71gE)]\n  \n\n## üí¨ Forum\n\n\n\n### 2020\n\n- [Preferred way of passing `Path`-like types around?](https://www.reddit.com/r/rust/comments/cekeq9/preferred_way_of_passing_pathlike_types_around/)\n  \n\n### 2017\n\n- [An idiomatic way to sum up values in a multidimensional Array](https://users.rust-lang.org/t/an-idiomatic-way-to-sum-up-values-in-a-multidimensional-array/9485)\n  - [Which is more idiomatic? Functional, imperative or a mix?](https://users.rust-lang.org/t/which-is-more-idiomatic-functional-imperative-or-a-mix/11278)\n  \n\n## üìú History\n\nComing from Python, I loved the guidelines on how _idiomatic Python_ looks like. I was inspired by the likes of Peter Norvig, who wrote amazing articles on [spellcheckers](https://norvig.com/spell-correct.html) and [sudoku solvers](https://norvig.com/sudoku.html); and, of course, the [Zen of Python](https://www.python.org/dev/peps/pep-0020/). For Rust, there is no such thing as the Zen of Python, however, so I started collecting my own resources.\nThe goal of this project is to create a peer-reviewed collection of articles/talks/repos, which teach idiomatic Rust style. It's a community project and you can contribute.\n\n## üîè License\n\n[![CC0](https://i.creativecommons.org/p/zero/1.0/88x31.png)](https://creativecommons.org/publicdomain/zero/1.0/)\n\nTo the extent possible under law, [Matthias Endler](https://endler.dev) has waived all copyright and related or neighboring rights to this work.\nLogo adapted from [FreePik.com](https://www.freepik.com/free-vector/crabs-pattern-design_1093131.htm)."
        },
        {
          "name": "assets",
          "type": "tree",
          "content": null
        },
        {
          "name": "render",
          "type": "tree",
          "content": null
        },
        {
          "name": "resources.json",
          "type": "blob",
          "size": 34.033203125,
          "content": "[\n  {\n    \"title\": \"Rust Anthology\",\n    \"url\": \"https://github.com/brson/rust-anthology\",\n    \"description\": \"The best short-form writing about Rust, collected.\",\n    \"tags\": [\n      \"anthology\",\n      \"writing\",\n      \"collection\"\n    ],\n    \"official\": false,\n    \"year\": 2018,\n    \"difficultyLevel\": \"all\",\n    \"duration\": null,\n    \"interactivityLevel\": \"low\",\n    \"free\": true,\n    \"category\": \"project\"\n  },\n  {\n    \"title\": \"blessed.rs\",\n    \"url\": \"https://blessed.rs\",\n    \"description\": \"An unofficial guide to the Rust ecosystem. Suggestions for popular, well-maintained crates.\",\n    \"tags\": [\n      \"guide\",\n      \"ecosystem\",\n      \"crates\"\n    ],\n    \"official\": false,\n    \"year\": 2019,\n    \"difficultyLevel\": \"all\",\n    \"duration\": null,\n    \"interactivityLevel\": \"medium\",\n    \"free\": true,\n    \"category\": \"project\"\n  },\n  {\n    \"title\": \"cheats.rs - Idiomatic Rust tips\",\n    \"url\": \"https://cheats.rs\",\n    \"description\": \"A list of quick tips to make your code more idiomatic.\",\n    \"tags\": [\n      \"tips\",\n      \"idiomatic\",\n      \"quick\"\n    ],\n    \"official\": false,\n    \"year\": 2020,\n    \"difficultyLevel\": \"all\",\n    \"duration\": null,\n    \"interactivityLevel\": \"low\",\n    \"free\": true,\n    \"category\": \"project\"\n  },\n  {\n    \"title\": \"clippy\",\n    \"url\": \"https://github.com/rust-lang/rust-clippy\",\n    \"description\": \"A bunch of lints to catch common mistakes and improve your Rust code.\",\n    \"tags\": [\n      \"lints\",\n      \"code-quality\",\n      \"tool\"\n    ],\n    \"official\": true,\n    \"year\": 2015,\n    \"difficultyLevel\": \"all\",\n    \"duration\": null,\n    \"interactivityLevel\": \"low\",\n    \"free\": true,\n    \"category\": \"project\"\n  },\n  {\n    \"title\": \"Patterns\",\n    \"url\": \"https://rust-unofficial.github.io/patterns/\",\n    \"description\": \"A catalogue of design patterns in Rust.\",\n    \"tags\": [\n      \"design-patterns\",\n      \"catalogue\",\n      \"best-practices\"\n    ],\n    \"official\": false,\n    \"year\": 2016,\n    \"difficultyLevel\": \"intermediate\",\n    \"duration\": null,\n    \"interactivityLevel\": \"low\",\n    \"free\": true,\n    \"category\": \"project\"\n  },\n  {\n    \"title\": \"Elements of Rust\",\n    \"url\": \"https://github.com/ferrous-systems/elements-of-rust\",\n    \"description\": \"A collection of software engineering techniques for effectively expressing intent with Rust.\",\n    \"tags\": [\n      \"software-engineering\",\n      \"techniques\",\n      \"best-practices\"\n    ],\n    \"official\": false,\n    \"year\": 2019,\n    \"difficultyLevel\": \"advanced\",\n    \"duration\": null,\n    \"interactivityLevel\": \"medium\",\n    \"free\": true,\n    \"category\": \"project\"\n  },\n  {\n    \"title\": \"Possible Rust\",\n    \"url\": \"https://www.possiblerust.com/\",\n    \"description\": \"A blog for intermediate Rust programmers exploring real-world code and design patterns.\",\n    \"tags\": [\n      \"blog\",\n      \"intermediate\",\n      \"design-patterns\"\n    ],\n    \"official\": false,\n    \"year\": 2020,\n    \"difficultyLevel\": \"intermediate\",\n    \"duration\": null,\n    \"interactivityLevel\": \"medium\",\n    \"free\": true,\n    \"category\": \"project\"\n  },\n  {\n    \"title\": \"Rust API Guidelines\",\n    \"url\": \"https://rust-lang.github.io/api-guidelines/\",\n    \"description\": \"An extensive list of recommendations for idiomatic Rust APIs.\",\n    \"tags\": [\n      \"api\",\n      \"guidelines\",\n      \"best-practices\"\n    ],\n    \"official\": true,\n    \"year\": 2017,\n    \"difficultyLevel\": \"intermediate\",\n    \"duration\": null,\n    \"interactivityLevel\": \"low\",\n    \"free\": true,\n    \"category\": \"project\"\n  },\n  {\n    \"title\": \"Rust by Example\",\n    \"url\": \"https://doc.rust-lang.org/rust-by-example/\",\n    \"description\": \"A community driven collection of example code which follow Rust best practices.\",\n    \"tags\": [\n      \"examples\",\n      \"community\",\n      \"best-practices\"\n    ],\n    \"official\": false,\n    \"year\": 2015,\n    \"difficultyLevel\": \"all\",\n    \"duration\": null,\n    \"interactivityLevel\": \"high\",\n    \"free\": true,\n    \"category\": \"project\"\n  },\n  {\n    \"title\": \"Comprehensive Rust\",\n    \"url\": \"https://github.com/google/comprehensive-rust\",\n    \"description\": \"A four day Rust course developed by the Android team, covering all aspects of Rust.\",\n    \"tags\": [\n      \"course\",\n      \"learning\",\n      \"comprehensive\"\n    ],\n    \"official\": true,\n    \"year\": 2021,\n    \"difficultyLevel\": \"all\",\n    \"duration\": \"4 days\",\n    \"interactivityLevel\": \"high\",\n    \"free\": true,\n    \"category\": \"workshop\"\n  },\n  {\n    \"title\": \"Hecto: Build your own text editor in Rust\",\n    \"url\": \"https://www.flenker.blog/hecto/\",\n    \"description\": \"This is a series of blog posts that shows you how to build a text editor in Rust\",\n    \"tags\": [\n      \"project\",\n      \"learning\"\n    ],\n    \"official\": false,\n    \"year\": 2019,\n    \"difficultyLevel\": \"all\",\n    \"duration\": \"variable\",\n    \"interactivityLevel\": \"high\",\n    \"free\": true,\n    \"category\": \"workshop\"\n  },\n  {\n    \"title\": \"Build your own JIRA with Rust\",\n    \"url\": \"https://github.com/LukeMathWalker/build-your-own-jira-with-rust/\",\n    \"description\": \"A test-driven workshop to learn Rust by building your own JIRA clone!\",\n    \"tags\": [\n      \"test-driven\",\n      \"project\"\n    ],\n    \"official\": true,\n    \"year\": 2020,\n    \"difficultyLevel\": \"intermediate\",\n    \"duration\": null,\n    \"interactivityLevel\": \"high\",\n    \"free\": true,\n    \"category\": \"workshop\"\n  },\n  {\n    \"title\": \"Ferrous Systems Teaching Material\",\n    \"url\": \"https://ferrous-systems.github.io/teaching-material/index.html\",\n    \"description\": \"Free workshop material produced by Ferrous Systems for trainings.\",\n    \"tags\": [\n      \"material\",\n      \"training\"\n    ],\n    \"official\": true,\n    \"year\": 2019,\n    \"difficultyLevel\": \"all\",\n    \"duration\": \"3-4 days\",\n    \"interactivityLevel\": \"medium\",\n    \"free\": true,\n    \"category\": \"workshop\"\n  },\n  {\n    \"title\": \"PingCAP talent plan\",\n    \"url\": \"https://github.com/pingcap/talent-plan\",\n    \"description\": \"A series of training courses about writing distributed systems in Rust.\",\n    \"tags\": [\n      \"training\",\n      \"distributed-systems\",\n      \"course\"\n    ],\n    \"official\": true,\n    \"year\": 2018,\n    \"difficultyLevel\": \"advanced\",\n    \"duration\": null,\n    \"interactivityLevel\": \"high\",\n    \"free\": true,\n    \"category\": \"workshop\"\n  },\n  {\n    \"title\": \"Procedural Macros Workshop\",\n    \"url\": \"https://github.com/dtolnay/proc-macro-workshop\",\n    \"description\": \"A selection of projects designed to learn to write Rust procedural macros.\",\n    \"tags\": [\n      \"macros\",\n      \"coding\"\n    ],\n    \"official\": true,\n    \"year\": 2019,\n    \"difficultyLevel\": \"advanced\",\n    \"duration\": null,\n    \"interactivityLevel\": \"high\",\n    \"free\": true,\n    \"category\": \"workshop\"\n  },\n  {\n    \"title\": \"rust-lang/rustlings\",\n    \"url\": \"https://github.com/rust-lang/rustlings\",\n    \"description\": \"Small exercises to get you used to reading and writing Rust code.\",\n    \"tags\": [\n      \"exercises\",\n      \"learning\",\n      \"beginner\"\n    ],\n    \"official\": true,\n    \"year\": 2018,\n    \"difficultyLevel\": \"beginner\",\n    \"duration\": null,\n    \"interactivityLevel\": \"high\",\n    \"free\": true,\n    \"category\": \"workshop\"\n  },\n  {\n    \"title\": \"Rust Development at Sentry\",\n    \"url\": \"https://develop.sentry.dev/rust/\",\n    \"description\": \"A document containing useful resources for getting started with Rust and adhering to Sentry coding principles.\",\n    \"tags\": [\n      \"guide\",\n      \"coding-principles\",\n      \"development\"\n    ],\n    \"official\": true,\n    \"year\": 2020,\n    \"difficultyLevel\": \"intermediate\",\n    \"duration\": null,\n    \"interactivityLevel\": \"low\",\n    \"free\": true,\n    \"category\": \"workshop\"\n  },\n  {\n    \"title\": \"Rust 101\",\n    \"url\": \"https://101-rs.tweede.golf/\",\n    \"description\": \"A Rust University course by tweede golf.\",\n    \"tags\": [\n      \"course\",\n      \"university\",\n      \"learning\"\n    ],\n    \"official\": false,\n    \"year\": 2019,\n    \"difficultyLevel\": \"beginner\",\n    \"duration\": null,\n    \"interactivityLevel\": \"medium\",\n    \"free\": true,\n    \"category\": \"workshop\"\n  },\n  {\n    \"title\": \"Command Line Applications in Rust\",\n    \"url\": \"https://rust-cli.github.io/book\",\n    \"description\": \"A tutorial on how to write CLI apps in Rust, learning many aspects of the ecosystem.\",\n    \"tags\": [\n      \"tutorial\",\n      \"cli\",\n      \"ecosystem\"\n    ],\n    \"official\": false,\n    \"year\": 2024,\n    \"difficultyLevel\": \"all\",\n    \"duration\": null,\n    \"interactivityLevel\": \"medium\",\n    \"free\": true,\n    \"category\": \"book\"\n  },\n  {\n    \"title\": \"Command-Line Rust\",\n    \"url\": \"https://github.com/kyclark/command-line-rust\",\n    \"description\": \"Learn the language by writing Rust versions of common Unix coreutils.\",\n    \"tags\": [\n      \"unix\",\n      \"coreutils\",\n      \"learning\"\n    ],\n    \"official\": false,\n    \"year\": 2022,\n    \"difficultyLevel\": \"intermediate\",\n    \"duration\": null,\n    \"interactivityLevel\": \"medium\",\n    \"free\": true,\n    \"category\": \"book\"\n  },\n  {\n    \"title\": \"Discover the world of microcontrollers through Rust!\",\n    \"url\": \"https://rust-embedded.github.io/discovery/\",\n    \"description\": \"An introductory course on microcontroller-based embedded systems using Rust.\",\n    \"tags\": [\n      \"embedded-systems\",\n      \"microcontroller\",\n      \"course\"\n    ],\n    \"official\": false,\n    \"year\": 2023,\n    \"difficultyLevel\": \"beginner\",\n    \"duration\": null,\n    \"interactivityLevel\": \"high\",\n    \"free\": true,\n    \"category\": \"book\"\n  },\n  {\n    \"title\": \"High Assurance Rust\",\n    \"url\": \"https://highassurance.rs/\",\n    \"description\": \"Developing secure and robust software, focusing on embedded-friendly data structures in Rust.\",\n    \"tags\": [\n      \"security\",\n      \"robustness\",\n      \"embedded\"\n    ],\n    \"official\": false,\n    \"year\": 2022,\n    \"difficultyLevel\": \"advanced\",\n    \"duration\": null,\n    \"interactivityLevel\": \"medium\",\n    \"free\": true,\n    \"category\": \"book\"\n  },\n  {\n    \"title\": \"Rust Cookbook\",\n    \"url\": \"https://github.com/rust-lang-nursery/rust-cookbook\",\n    \"description\": \"Examples that demonstrate good practices to accomplish common programming tasks in Rust.\",\n    \"tags\": [\n      \"examples\",\n      \"good-practices\",\n      \"programming\"\n    ],\n    \"official\": false,\n    \"year\": 2021,\n    \"difficultyLevel\": \"intermediate\",\n    \"duration\": null,\n    \"interactivityLevel\": \"medium\",\n    \"free\": true,\n    \"category\": \"book\"\n  },\n  {\n    \"title\": \"Rust for Rustaceans\",\n    \"url\": \"https://nostarch.com/rust-rustaceans\",\n    \"description\": \"Covers how to design reliable, idiomatic, and ergonomic Rust programs based on best principles.\",\n    \"tags\": [\n      \"design\",\n      \"idiomatic\",\n      \"ergonomic\"\n    ],\n    \"official\": false,\n    \"year\": 2021,\n    \"difficultyLevel\": \"advanced\",\n    \"duration\": null,\n    \"interactivityLevel\": \"low\",\n    \"free\": false,\n    \"category\": \"book\"\n  },\n  {\n    \"title\": \"Programming Rust: Fast, Safe Systems Development\",\n    \"url\": \"https://www.oreilly.com/library/view/programming-rust-2nd/9781492052586/\",\n    \"description\": \"A comprehensive Rust Programming Guide that covers most of Rust's features in detail.\",\n    \"tags\": [\n      \"comprehensive\",\n      \"features\",\n      \"guide\"\n    ],\n    \"official\": false,\n    \"year\": 2021,\n    \"difficultyLevel\": \"all\",\n    \"duration\": null,\n    \"interactivityLevel\": \"low\",\n    \"free\": false,\n    \"category\": \"book\"\n  },\n  {\n    \"title\": \"Rust Atomics and Locks\",\n    \"url\": \"https://marabos.nl/atomics/\",\n    \"description\": \"Helps Rust programmers of all levels gain a clear understanding of low-level concurrency.\",\n    \"tags\": [\n      \"concurrency\",\n      \"low-level\",\n      \"understanding\"\n    ],\n    \"official\": false,\n    \"year\": 2023,\n    \"difficultyLevel\": \"intermediate\",\n    \"duration\": null,\n    \"interactivityLevel\": \"medium\",\n    \"free\": true,\n    \"category\": \"book\"\n  },\n  {\n    \"title\": \"Compile-Time Invariants in Rust\",\n    \"url\": \"https://corrode.dev/blog/compile-time-invariants/\",\n    \"description\": \"Shows how macros can be used to enforce invariants at compile-time.\",\n    \"tags\": [\n      \"macros\",\n      \"invariants\",\n      \"compile-time\"\n    ],\n    \"official\": false,\n    \"year\": 2023,\n    \"difficultyLevel\": \"advanced\",\n    \"duration\": null,\n    \"interactivityLevel\": \"low\",\n    \"free\": true,\n    \"category\": \"article\"\n  },\n  {\n    \"title\": \"Aim For Immutability in Rust\",\n    \"url\": \"https://corrode.dev/blog/immutability/\",\n    \"description\": \"Explains why variables are immutable in Rust by default.\",\n    \"tags\": [\n      \"immutability\",\n      \"variables\",\n      \"rust-basics\"\n    ],\n    \"official\": false,\n    \"year\": 2023,\n    \"difficultyLevel\": \"beginner\",\n    \"duration\": null,\n    \"interactivityLevel\": \"low\",\n    \"free\": true,\n    \"category\": \"article\"\n  },\n  {\n    \"title\": \"Naming Your Lifetimes\",\n    \"url\": \"https://www.possiblerust.com/pattern/naming-your-lifetimes\",\n    \"description\": \"Explains how using longer, declarative lifetime names can help to disambiguate which borrow is which.\",\n    \"tags\": [\n      \"lifetimes\",\n      \"naming-conventions\",\n      \"rust-patterns\"\n    ],\n    \"official\": false,\n    \"year\": 2021,\n    \"difficultyLevel\": \"intermediate\",\n    \"duration\": null,\n    \"interactivityLevel\": \"low\",\n    \"free\": true,\n    \"category\": \"article\"\n  },\n  {\n    \"title\": \"Aiming for idiomatic Rust\",\n    \"url\": \"https://web.archive.org/web/20221203043933/https://shane-o.dev/blog/aiming-for-idiomatic-rust\",\n    \"description\": \"Discusses different ways to solve a popular coding puzzle, 'balanced brackets', in Rust.\",\n    \"tags\": [\n      \"coding-puzzle\",\n      \"best-practices\"\n    ],\n    \"official\": false,\n    \"year\": 2021,\n    \"difficultyLevel\": \"intermediate\",\n    \"duration\": null,\n    \"interactivityLevel\": \"medium\",\n    \"free\": true,\n    \"category\": \"article\"\n  },\n  {\n    \"title\": \"Wrapping errors in Rust\",\n    \"url\": \"https://edgarluque.com/blog/wrapping-errors-in-rust\",\n    \"description\": \"Wrapping 'reqwest::Error' and a custom error type as an enum to make library usage easier.\",\n    \"tags\": [\n      \"error-handling\",\n      \"rust-tips\",\n      \"programming\"\n    ],\n    \"official\": false,\n    \"year\": 2021,\n    \"difficultyLevel\": \"intermediate\",\n    \"duration\": null,\n    \"interactivityLevel\": \"medium\",\n    \"free\": true,\n    \"category\": \"article\"\n  },\n  {\n    \"title\": \"Hexagonal architecture in Rust\",\n    \"url\": \"https://alexis-lozano.com/hexagonal-architecture-in-rust-1/\",\n    \"description\": \"Describes how to build a Rust service using domain driven design and a test-first approach.\",\n    \"tags\": [\n      \"architecture\",\n      \"domain-driven-design\",\n      \"rust-service\"\n    ],\n    \"official\": false,\n    \"year\": 2021,\n    \"difficultyLevel\": \"advanced\",\n    \"duration\": null,\n    \"interactivityLevel\": \"medium\",\n    \"free\": true,\n    \"category\": \"article\"\n  },\n  {\n    \"title\": \"Context-preserving error handling\",\n    \"url\": \"https://kazlauskas.me/entries/errors\",\n    \"description\": \"Explains how to use crates like 'thiserror' in combination with 'map_err' to add context to errors.\",\n    \"tags\": [\n      \"error-handling\",\n      \"crates\",\n      \"rust-tips\"\n    ],\n    \"official\": false,\n    \"year\": 2020,\n    \"difficultyLevel\": \"intermediate\",\n    \"duration\": null,\n    \"interactivityLevel\": \"low\",\n    \"free\": true,\n    \"category\": \"article\"\n  },\n  {\n    \"title\": \"Refactoring Rust Transpiled from C\",\n    \"url\": \"https://immunant.com/blog/2020/09/transpiled_c_safety/\",\n    \"description\": \"Describes how to lift a C-project that was automatically converted to unsafe Rust to safer, more idiomatic Rust.\",\n    \"tags\": [\n      \"refactoring\",\n      \"transpiling\",\n      \"c-to-rust\"\n    ],\n    \"official\": false,\n    \"year\": 2020,\n    \"difficultyLevel\": \"advanced\",\n    \"duration\": null,\n    \"interactivityLevel\": \"medium\",\n    \"free\": true,\n    \"category\": \"article\"\n  },\n  {\n    \"title\": \"Learning Rust through open source and live code reviews\",\n    \"url\": \"https://loige.co/learning-rust-through-open-source-and-live-code-reviews/\",\n    \"description\": \"Covers patterns like 'FromStr' and exposing a CLI and a library in one crate.\",\n    \"tags\": [\n      \"open-source\",\n      \"code-review\",\n      \"rust-patterns\"\n    ],\n    \"official\": false,\n    \"year\": 2020,\n    \"difficultyLevel\": \"intermediate\",\n    \"duration\": null,\n    \"interactivityLevel\": \"medium\",\n    \"free\": true,\n    \"category\": \"article\"\n  },\n  {\n    \"title\": \"Guide on how to write documentation for a Rust crate\",\n    \"url\": \"https://blog.guillaume-gomez.fr/articles/2020-03-12+Guide+on+how+to+write+documentation+for+a+Rust+crate\",\n    \"description\": \"Writing good documentation with rustdoc including many examples.\",\n    \"tags\": [\n      \"documentation\",\n      \"rustdoc\",\n      \"best-practices\"\n    ],\n    \"official\": false,\n    \"year\": 2020,\n    \"difficultyLevel\": \"all\",\n    \"duration\": null,\n    \"interactivityLevel\": \"medium\",\n    \"free\": true,\n    \"category\": \"article\"\n  },\n  {\n    \"title\": \"Are out parameters idiomatic in Rust?\",\n    \"url\": \"https://steveklabnik.com/writing/are-out-parameters-idiomatic-in-rust\",\n    \"description\": \"Discusses the pros and cons of functions returning a value vs. modifying a parameter in-place.\",\n    \"tags\": [\n      \"functions\",\n      \"parameters\"\n    ],\n    \"official\": false,\n    \"year\": 2020,\n    \"difficultyLevel\": \"intermediate\",\n    \"duration\": null,\n    \"interactivityLevel\": \"low\",\n    \"free\": true,\n    \"category\": \"article\"\n  },\n  {\n    \"title\": \"Await a minute\",\n    \"url\": \"https://docs.rs/dtolnay/0.0.3/dtolnay/macro._01__await_a_minute.html\",\n    \"description\": \"Example code for moving from raw futures to async/await syntax to improve error handling.\",\n    \"tags\": [\n      \"async\",\n      \"await\",\n      \"error-handling\"\n    ],\n    \"official\": false,\n    \"year\": 2019,\n    \"difficultyLevel\": \"intermediate\",\n    \"duration\": null,\n    \"interactivityLevel\": \"medium\",\n    \"free\": true,\n    \"category\": \"article\"\n  },\n  {\n    \"title\": \"Taking string arguments in Rust\",\n    \"url\": \"http://xion.io/post/code/rust-string-args.html\",\n    \"description\": \"Discussing how to avoid subtle issues with string handling and when to use 'str' vs 'String'.\",\n    \"tags\": [\n      \"strings\",\n      \"arguments\",\n      \"best-practices\"\n    ],\n    \"official\": false,\n    \"year\": 2019,\n    \"difficultyLevel\": \"beginner\",\n    \"duration\": null,\n    \"interactivityLevel\": \"low\",\n    \"free\": true,\n    \"category\": \"article\"\n  },\n  {\n    \"title\": \"Rust Patterns: Enums Instead Of Booleans\",\n    \"url\": \"http://blakesmith.me/2019/05/07/rust-patterns-enums-instead-of-booleans.html\",\n    \"description\": \"Discusses how using enums instead of booleans can express intent more clearly in Rust.\",\n    \"tags\": [\n      \"enums\",\n      \"booleans\",\n      \"patterns\"\n    ],\n    \"official\": false,\n    \"year\": 2019,\n    \"difficultyLevel\": \"intermediate\",\n    \"duration\": null,\n    \"interactivityLevel\": \"medium\",\n    \"free\": true,\n    \"category\": \"article\"\n  },\n  {\n    \"title\": \"Programming an ARM microcontroller in Rust at four different levels of abstraction\",\n    \"url\": \"https://pramode.in/2018/02/20/programming-a-microcontroller-in-rust-at-four-levels-of-abstraction/\",\n    \"description\": \"Demonstrates how Rust helps to move from low-level embedded code to high-level abstractions.\",\n    \"tags\": [\n      \"microcontroller\",\n      \"arm\",\n      \"abstraction\"\n    ],\n    \"official\": false,\n    \"year\": 2018,\n    \"difficultyLevel\": \"advanced\",\n    \"duration\": null,\n    \"interactivityLevel\": \"high\",\n    \"free\": true,\n    \"category\": \"article\"\n  },\n  {\n    \"title\": \"Iteration patterns for Result & Option\",\n    \"url\": \"http://xion.io/post/code/rust-iter-patterns.html\",\n    \"description\": \"Explores how to filter and partition iterators of Result and Option types idiomatically.\",\n    \"tags\": [\n      \"iterators\",\n      \"result\",\n      \"option\"\n    ],\n    \"official\": false,\n    \"year\": 2017,\n    \"difficultyLevel\": \"intermediate\",\n    \"duration\": null,\n    \"interactivityLevel\": \"medium\",\n    \"free\": true,\n    \"category\": \"article\"\n  },\n  {\n    \"title\": \"Lessons learned redesigning and refactoring a Rust Library\",\n    \"url\": \"https://web.archive.org/web/20220126172949/https://blog.mgattozzi.dev/refactor-rust/\",\n    \"description\": \"'RefCell', the builder pattern and more.\",\n    \"tags\": [\n      \"refactoring\",\n      \"design-patterns\",\n      \"library\"\n    ],\n    \"official\": false,\n    \"year\": 2017,\n    \"difficultyLevel\": \"advanced\",\n    \"duration\": null,\n    \"interactivityLevel\": \"medium\",\n    \"free\": true,\n    \"category\": \"article\"\n  },\n  {\n    \"title\": \"Math with distances in Rust: safety and correctness across units\",\n    \"url\": \"https://ferrisellis.com/content/rust-implementing-units-for-types/\",\n    \"description\": \"How to create a system to cleanly and safely do arithmetic with lengths.\",\n    \"tags\": [\n      \"math\",\n      \"safety\",\n      \"type-system\"\n    ],\n    \"official\": false,\n    \"year\": 2017,\n    \"difficultyLevel\": \"intermediate\",\n    \"duration\": null,\n    \"interactivityLevel\": \"medium\",\n    \"free\": true,\n    \"category\": \"article\"\n  },\n  {\n    \"title\": \"The balance between cost, useability and soundness in C bindings, and Rust-SDL2's release\",\n    \"url\": \"https://web.archive.org/web/20190509123207/https://cobrand.github.io/rust/sdl2/2017/05/07/the-balance-between-soundness-cost-useability.html\",\n    \"description\": \"Writing safe, sound, idiomatic libraries despite the limitations of the borrow checker.\",\n    \"tags\": [\n      \"c-bindings\",\n      \"sdl\",\n      \"borrow-checker\"\n    ],\n    \"official\": false,\n    \"year\": 2017,\n    \"difficultyLevel\": \"advanced\",\n    \"duration\": null,\n    \"interactivityLevel\": \"medium\",\n    \"free\": true,\n    \"category\": \"article\"\n  },\n  {\n    \"title\": \"Russian Dolls and clean Rust code\",\n    \"url\": \"https://web.archive.org/web/20220126183049/https://blog.mgattozzi.dev/russian-dolls/\",\n    \"description\": \"How to use the full power of 'Option' and 'Result' (especially 'and_then()' and 'unwrap_or()').\",\n    \"tags\": [\n      \"option\",\n      \"result\",\n      \"code-quality\"\n    ],\n    \"official\": false,\n    \"year\": 2016,\n    \"difficultyLevel\": \"intermediate\",\n    \"duration\": null,\n    \"interactivityLevel\": \"medium\",\n    \"free\": true,\n    \"category\": \"article\"\n  },\n  {\n    \"title\": \"Elegant Library APIs in Rust\",\n    \"url\": \"https://deterministic.space/elegant-apis-in-rust.html\",\n    \"description\": \"Many helpful tips and tricks for writing libraries in Rust.\",\n    \"tags\": [\n      \"libraries\",\n      \"api-design\",\n      \"best-practices\"\n    ],\n    \"official\": false,\n    \"year\": 2016,\n    \"difficultyLevel\": \"intermediate\",\n    \"duration\": null,\n    \"interactivityLevel\": \"medium\",\n    \"free\": true,\n    \"category\": \"article\"\n  },\n  {\n    \"title\": \"Teaching libraries through good documentation\",\n    \"url\": \"https://deterministic.space/teaching-libraries.html\",\n    \"description\": \"How to use the full power of Rust's documentation support (e.g. doc tests).\",\n    \"tags\": [\n      \"documentation\",\n      \"libraries\"\n    ],\n    \"official\": false,\n    \"year\": 2016,\n    \"difficultyLevel\": \"intermediate\",\n    \"duration\": null,\n    \"interactivityLevel\": \"medium\",\n    \"free\": true,\n    \"category\": \"article\"\n  },\n  {\n    \"title\": \"Pretty State Machine Patterns in Rust\",\n    \"url\": \"https://hoverbear.org/2016/10/12/rust-state-machine-pattern/\",\n    \"description\": \"How to represent a State Machine in an expressive and understandable way in Rust.\",\n    \"tags\": [\n      \"state-machine\",\n      \"patterns\"\n    ],\n    \"official\": false,\n    \"year\": 2016,\n    \"difficultyLevel\": \"intermediate\",\n    \"duration\": null,\n    \"interactivityLevel\": \"medium\",\n    \"free\": true,\n    \"category\": \"article\"\n  },\n  {\n    \"title\": \"Ripgrep Code Review\",\n    \"url\": \"https://blog.mbrt.dev/posts/ripgrep/\",\n    \"description\": \"An analysis of the popular 'ripgrep' tool's source code.\",\n    \"tags\": [\n      \"code-review\",\n      \"ripgrep\",\n      \"analysis\"\n    ],\n    \"official\": false,\n    \"year\": 2016,\n    \"difficultyLevel\": \"advanced\",\n    \"duration\": null,\n    \"interactivityLevel\": \"medium\",\n    \"free\": true,\n    \"category\": \"article\"\n  },\n  {\n    \"title\": \"Rustic Bits\",\n    \"url\": \"https://llogiq.github.io/2016/02/11/rustic.html\",\n    \"description\": \"Small things that make for rustic code.\",\n    \"tags\": [\n      \"best-practices\",\n      \"code-quality\"\n    ],\n    \"official\": false,\n    \"year\": 2016,\n    \"difficultyLevel\": \"beginner\",\n    \"duration\": null,\n    \"interactivityLevel\": \"low\",\n    \"free\": true,\n    \"category\": \"article\"\n  },\n  {\n    \"title\": \"Convenient and idiomatic conversions in Rust\",\n    \"url\": \"https://ricardomartins.cc/2016/08/03/convenient_and_idiomatic_conversions_in_rust\",\n    \"description\": \"Explains 'From<T>', 'Into<T>', 'TryFrom<T>', 'TryInto<T>', 'AsRef<T>' and 'AsMut<T>' with practical examples.\",\n    \"tags\": [\n      \"conversions\",\n      \"examples\"\n    ],\n    \"official\": false,\n    \"year\": 2016,\n    \"difficultyLevel\": \"intermediate\",\n    \"duration\": null,\n    \"interactivityLevel\": \"medium\",\n    \"free\": true,\n    \"category\": \"article\"\n  },\n  {\n    \"title\": \"Idiomatic tree and graph like structures in Rust\",\n    \"url\": \"https://rust-leipzig.github.io/architecture/2016/12/20/idiomatic-trees-in-rust/\",\n    \"description\": \"Introduction to safe, dynamic, arena based tree structures without using lifetimes.\",\n    \"tags\": [\n      \"tree-structures\",\n      \"graphs\"\n    ],\n    \"official\": false,\n    \"year\": 2016,\n    \"difficultyLevel\": \"advanced\",\n    \"duration\": null,\n    \"interactivityLevel\": \"medium\",\n    \"free\": true,\n    \"category\": \"article\"\n  },\n  {\n    \"title\": \"Rust traits for developer friendly libraries\",\n    \"url\": \"https://benashford.github.io/blog/2015/05/24/rust-traits-for-developer-friendly-libraries/\",\n    \"description\": \"Thoughts about implementing good Rust libraries.\",\n    \"tags\": [\n      \"rust-traits\",\n      \"libraries\",\n      \"development\"\n    ],\n    \"official\": false,\n    \"year\": 2015,\n    \"difficultyLevel\": \"intermediate\",\n    \"duration\": null,\n    \"interactivityLevel\": \"low\",\n    \"free\": true,\n    \"category\": \"article\"\n  },\n  {\n    \"title\": \"Error Handling in Rust\",\n    \"url\": \"https://blog.burntsushi.net/rust-error-handling/\",\n    \"description\": \"Understanding and handling errors in Rust in an idiomatic way.\",\n    \"tags\": [\n      \"error-handling\"\n    ],\n    \"official\": false,\n    \"year\": 2015,\n    \"difficultyLevel\": \"intermediate\",\n    \"duration\": null,\n    \"interactivityLevel\": \"medium\",\n    \"free\": true,\n    \"category\": \"article\"\n  },\n  {\n    \"title\": \"Creating a Rust function that accepts String or &str\",\n    \"url\": \"https://hermanradtke.com/2015/05/06/creating-a-rust-function-that-accepts-string-or-str.html\",\n    \"description\": \"How to make calling your code both ergonomic and fast (zero-allocation).\",\n    \"tags\": [\n      \"functions\",\n      \"string-handling\"\n    ],\n    \"official\": false,\n    \"year\": 2015,\n    \"difficultyLevel\": \"intermediate\",\n    \"duration\": null,\n    \"interactivityLevel\": \"medium\",\n    \"free\": true,\n    \"category\": \"article\"\n  },\n  {\n    \"title\": \"Creating a Rust function that returns a &str or String\",\n    \"url\": \"https://hermanradtke.com/2015/05/29/creating-a-rust-function-that-returns-string-or-str.html\",\n    \"description\": \"How 'Into' and 'Cow' (Clone-on-write) work together to avoid allocations for string types.\",\n    \"tags\": [\n      \"functions\",\n      \"string-handling\"\n    ],\n    \"official\": false,\n    \"year\": 2015,\n    \"difficultyLevel\": \"intermediate\",\n    \"duration\": null,\n    \"interactivityLevel\": \"medium\",\n    \"free\": true,\n    \"category\": \"article\"\n  },\n  {\n    \"title\": \"Effectively Using Iterators In Rust\",\n    \"url\": \"https://hermanradtke.com/2015/06/22/effectively-using-iterators-in-rust.html\",\n    \"description\": \"Explanation of the 'Iter' and 'IntoIter' traits and how loops actually work in Rust.\",\n    \"tags\": [\n      \"iterators\",\n      \"traits\"\n    ],\n    \"official\": false,\n    \"year\": 2015,\n    \"difficultyLevel\": \"intermediate\",\n    \"duration\": null,\n    \"interactivityLevel\": \"medium\",\n    \"free\": true,\n    \"category\": \"article\"\n  },\n  {\n    \"title\": \"Strategies for solving 'cannot move out of' borrowing errors in Rust\",\n    \"url\": \"https://hermanradtke.com/2015/06/09/strategies-for-solving-cannot-move-out-of-borrowing-errors-in-rust.html\",\n    \"description\": \"Practical tips to help understand the borrow-checker and move semantics.\",\n    \"tags\": [\n      \"borrow-checker\",\n      \"move-semantics\"\n    ],\n    \"official\": false,\n    \"year\": 2015,\n    \"difficultyLevel\": \"intermediate\",\n    \"duration\": null,\n    \"interactivityLevel\": \"medium\",\n    \"free\": true,\n    \"category\": \"article\"\n  },\n  {\n    \"title\": \"Rayon: data parallelism in Rust\",\n    \"url\": \"https://smallcultfollowing.com/babysteps/blog/2015/12/18/rayon-data-parallelism-in-rust/\",\n    \"description\": \"Writing elegant parallel code in Rust.\",\n    \"tags\": [\n      \"parallelism\",\n      \"rayon\"\n    ],\n    \"official\": false,\n    \"year\": 2015,\n    \"difficultyLevel\": \"advanced\",\n    \"duration\": null,\n    \"interactivityLevel\": \"medium\",\n    \"free\": true,\n    \"category\": \"article\"\n  },\n  {\n    \"title\": \"Tricks of the Trait: Enabling Ergonomic Extractors\",\n    \"url\": \"https://www.youtube.com/watch?v=7DOYtnCXucw\",\n    \"description\": \"Rust Nation UK, Feb. 2023\",\n    \"tags\": [\n      \"traits\",\n      \"ergonomics\",\n      \"extractors\"\n    ],\n    \"official\": false,\n    \"year\": 2023,\n    \"difficultyLevel\": \"intermediate\",\n    \"duration\": null,\n    \"interactivityLevel\": \"low\",\n    \"free\": true,\n    \"category\": \"talk\"\n  },\n  {\n    \"title\": \"Nine Rules for Elegant Rust Library APIs\",\n    \"url\": \"https://www.youtube.com/watch?v=6-8-9ZV-2WQ\",\n    \"description\": \"Seattle Rust Meetup, Sep. 2022\",\n    \"tags\": [\n      \"library-apis\",\n      \"elegance\"\n    ],\n    \"official\": false,\n    \"year\": 2022,\n    \"difficultyLevel\": \"intermediate\",\n    \"duration\": null,\n    \"interactivityLevel\": \"low\",\n    \"free\": true,\n    \"category\": \"talk\"\n  },\n  {\n    \"title\": \"Ergonomic APIs for hard problems\",\n    \"url\": \"https://www.youtube.com/watch?v=Phk0C-kLlho\",\n    \"description\": \"RustLab Conference, October 2022\",\n    \"tags\": [\n      \"apis\",\n      \"ergonomics\",\n      \"rust-conference\"\n    ],\n    \"official\": false,\n    \"year\": 2022,\n    \"difficultyLevel\": \"intermediate\",\n    \"duration\": null,\n    \"interactivityLevel\": \"low\",\n    \"free\": true,\n    \"category\": \"talk\"\n  },\n  {\n    \"title\": \"Macros for a More Productive Rust\",\n    \"url\": \"https://www.youtube.com/watch?v=dZiWkbnaQe8\",\n    \"description\": \"RustConf 2020\",\n    \"tags\": [\n      \"macros\",\n      \"productivity\",\n      \"rustconf\"\n    ],\n    \"official\": false,\n    \"year\": 2020,\n    \"difficultyLevel\": \"intermediate\",\n    \"duration\": null,\n    \"interactivityLevel\": \"low\",\n    \"free\": true,\n    \"category\": \"talk\"\n  },\n  {\n    \"title\": \"Making Rust Delightful\",\n    \"url\": \"https://www.youtube.com/watch?v=YSEx8wtlPWc\",\n    \"description\": \"RustCon Asia 2019\",\n    \"tags\": [\n      \"conference\",\n      \"development\"\n    ],\n    \"official\": false,\n    \"year\": 2019,\n    \"difficultyLevel\": \"all\",\n    \"duration\": null,\n    \"interactivityLevel\": \"low\",\n    \"free\": true,\n    \"category\": \"talk\"\n  },\n  {\n    \"title\": \"Idiomatic Rust - Writing Concise and Elegant Rust Code\",\n    \"url\": \"https://www.youtube.com/watch?v=P2mooqNMxMs\",\n    \"description\": \"FOSDEM 2018\",\n    \"tags\": [\n      \"fosdem\"\n    ],\n    \"official\": false,\n    \"year\": 2018,\n    \"difficultyLevel\": \"all\",\n    \"duration\": null,\n    \"interactivityLevel\": \"low\",\n    \"free\": true,\n    \"category\": \"talk\"\n  },\n  {\n    \"title\": \"Idiomatic Rust Libraries\",\n    \"url\": \"https://www.youtube.com/watch?v=0zOg8_B71gE\",\n    \"description\": \"Rustfest Kiev\",\n    \"tags\": [\n      \"rust-libraries\",\n      \"rustfest\"\n    ],\n    \"official\": false,\n    \"year\": 2017,\n    \"difficultyLevel\": \"intermediate\",\n    \"duration\": null,\n    \"interactivityLevel\": \"low\",\n    \"free\": true,\n    \"category\": \"talk\"\n  },\n  {\n    \"title\": \"Preferred way of passing `Path`-like types around?\",\n    \"url\": \"https://www.reddit.com/r/rust/comments/cekeq9/preferred_way_of_passing_pathlike_types_around/\",\n    \"description\": \"A Reddit discussion on the best practices for passing `Path`-like types in Rust.\",\n    \"tags\": [\n      \"discussion\",\n      \"path-types\",\n      \"best-practices\"\n    ],\n    \"official\": false,\n    \"year\": 2020,\n    \"difficultyLevel\": \"intermediate\",\n    \"duration\": null,\n    \"interactivityLevel\": \"high\",\n    \"free\": true,\n    \"category\": \"forum\"\n  },\n  {\n    \"title\": \"Which is more idiomatic? Functional, imperative or a mix?\",\n    \"url\": \"https://users.rust-lang.org/t/which-is-more-idiomatic-functional-imperative-or-a-mix/11278\",\n    \"description\": \"A discussion on Rust's users forum about the idiomatic way to write Rust code: functional, imperative, or a mix of both.\",\n    \"tags\": [\n      \"functional\",\n      \"imperative\",\n      \"coding-style\"\n    ],\n    \"official\": false,\n    \"year\": 2017,\n    \"difficultyLevel\": \"all\",\n    \"duration\": null,\n    \"interactivityLevel\": \"high\",\n    \"free\": true,\n    \"category\": \"forum\"\n  },\n  {\n    \"title\": \"An idiomatic way to sum up values in a multidimensional Array\",\n    \"url\": \"https://users.rust-lang.org/t/an-idiomatic-way-to-sum-up-values-in-a-multidimensional-array/9485\",\n    \"description\": \"Forum discussion on idiomatic approaches to summing values in a multidimensional array in Rust.\",\n    \"tags\": [\n      \"arrays\",\n      \"summing\"\n    ],\n    \"official\": false,\n    \"year\": 2017,\n    \"difficultyLevel\": \"intermediate\",\n    \"duration\": null,\n    \"interactivityLevel\": \"high\",\n    \"free\": true,\n    \"category\": \"forum\"\n  },\n  {\n    \"title\": \"The Four Horsemen of Bad Rust Code\",\n    \"url\": \"https://github.com/corrode/four-horsemen-talk\",\n    \"description\": \"A talk about common pitfalls in Rust code like overengineering and premature optimization.\",\n    \"tags\": [\n      \"pitfalls\",\n      \"common-mistakes\",\n      \"patterns\"\n    ],\n    \"official\": false,\n    \"year\": 2024,\n    \"difficultyLevel\": \"beginner\",\n    \"duration\": null,\n    \"interactivityLevel\": \"low\",\n    \"free\": true,\n    \"category\": \"talk\"\n  },\n  {\n    \"title\": \"Idiomatic Rust Workshop\",\n    \"url\": \"https://fettblog.eu/slides/idiomatic-rust/\",\n    \"description\": \"A talk/workshop about idiomatic Rust code focusing on effective use of existing syntax and design patterns\",\n    \"tags\": [\n      \"tooling\",\n      \"syntax\",\n      \"design-patterns\"\n    ],\n    \"official\": false,\n    \"year\": 2021,\n    \"difficultyLevel\": \"beginner\",\n    \"duration\": null,\n    \"interactivityLevel\": \"low\",\n    \"free\": true,\n    \"category\": \"workshop\"\n  },\n  {\n    \"title\": \"Rust Number Conversion: Don't Follow the Book...\",\n    \"url\": \"https://blog.notmet.net/2021/12/rust-number-conversion-dont-follow-the-book.../\",\n    \"description\": \"A blog post discussing the best practices for number conversion in Rust.\",\n    \"tags\": [\n      \"number-conversion\",\n      \"best-practices\"\n    ],\n    \"official\": false,\n    \"year\": 2021,\n    \"difficultyLevel\": \"intermediate\",\n    \"duration\": null,\n    \"interactivityLevel\": \"low\",\n    \"free\": true,\n    \"category\": \"article\"\n  }\n]"
        }
      ]
    }
  ]
}