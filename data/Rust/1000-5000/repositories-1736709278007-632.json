{
  "metadata": {
    "timestamp": 1736709278007,
    "page": 632,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjY0MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "fltk-rs/fltk-rs",
      "stars": 1669,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.2001953125,
          "content": "target\n**/*.rs.bk\nCargo.lock\nfltk-sys/.build.rs.un~\nfltk-sys/build.rs~\n/.vscode\ntemp.*\n.DS_Store\ncompile_commands.json\n/.clangd\n*.ttf\n/.cache\n/example.png\n**/.vs/**/v17\n**/.vs/**/FileContentIndex\n*.sqlite\n"
        },
        {
          "name": ".gitmodules",
          "type": "blob",
          "size": 0.107421875,
          "content": "[submodule \"fltk-sys/cfltk\"]\n\tpath = fltk-sys/cfltk\n\turl = https://github.com/MoAlyousef/cfltk\n\tbranch = main\n"
        },
        {
          "name": "AUTHORS",
          "type": "blob",
          "size": 1.298828125,
          "content": "# This is the list of fltk-rs' authors for copyright purposes.\n#\n# This does not necessarily list everyone who has contributed code, since in\n# some cases, their employer may be the copyright holder.\n# The list was retrieved using `git log --format=format:'%aN <%aE>' | awk '!x[$0]++'`\n# and follows the guidelines described in https://opensource.google/docs/releasing/authors/\n\nMohammed Alyousef <may642_2000@hotmail.com>\nAshfordN <ashford.nichols@gmail.com>\nPeter C. S. Scholtens <peter.scholtens@freedom.nl>\nKillTheMule <KillTheMule@users.noreply.github.com>\nctrl-81 <96100184+ctrl-81@users.noreply.github.com>\nMark <mark@qtrac.eu>\nHannes Braun <hannesbraun@mail.de>\nAdia Robbie <adyaro37@gmail.com>\neadf <ead.fritz@gmail.com>\nMosolov Sergey <mosolovs1987@gmail.com>\nctrl-81 <96100184+ctrl-81@users.noreply.github.com>\nFlorian Bruder <florian.bruder@posteo.de>\nKevin Wojniak <kainjow@users.noreply.github.com>\nCasey Borders <TheBeast.13@gmail.com>\nTom Dryer <tomdryer.com@gmail.com>\nlegendofa <34162874+legendofa@users.noreply.github.com>\ndheatovwil <tgtay@outlook.com>\nNicolas Salguero <nicolas.salguero@laposte.net>\nNicolas BAUW <nbauw@hotmail.com>\nZalasus <niklas.weissner@gmail.com>\nbasedtho <60894565+basedtho@users.noreply.github.com>\nMarty B <mrbm74@gmail.com>\neddylin83 <linzuobin@foxmail.com>\nHMH <henry@freedesk.net>\n"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 67.8408203125,
          "content": "# Changelog\n\n\n# [1.5.2] - 2025-01-11\n- Add TableRow::clear_rows().\n- Expose app::cairo_gc().\n- Inverse event_d{x,y} values.\n- cfltk: remove no longer necessary widget deletion code.\n- Update FLTK.\n\n# [1.5.1] - 2024-12-10\n- Add empty experimental module to group module.\n\n# [1.5.0] - 2024-12-08\n- Update FLTK to 1.4.0-1.\n- Grid and Terminal are no longer experimental.\n- Move Terminal under its own module.\n\n# [1.4.36] - 2024-11-14\n- Add draw::capture_window_part.\n- Update FLTK to 1.4.0rc3.\n\n# [1.4.35] - 2024-10-21\n- Add MouseButton::Back and MouseButton::Forward.\n- Add Scrollbar and Slider `scrollvalue()` method.\n- Refactor emscripten build script.\n- Support raw-window-handle v0.6 for emscripten canvas.\n- Add ability to read and write to web browser files via the local FS api.\n- Update ttf-parser to 0.25.\n- Update FLTK.\n\n# [1.4.34] - 2024-09-24\n- Add Scrollbar::set_linesize and linesize.\n- Add utils::open_uri and utils::decode_uri.\n- Make fltk-rs build with emscripten.\n- Fix link error with Window::platform_hide\n- Update FLTK.\n\n# [1.4.33] - 2024-07-30\n- Add Window::set_on_top() support on windows by @caesay.\n- Add MenuExt::mvalue() and prev_mvalue().\n- Update docs and improve editor examples by @ntrrgc.\n- Refactor Window::raw_handle() code.\n- image::Pixmap improvements.\n- Fix cfg(no-images) in build script.\n- Add runtime check for wayland use.\n- Link ScreenCaptureKit for macos 15 (required by FLTK).\n- Update github actions workflows.\n- Update ttf-parser to 0.24.\n- Update FLTK submodule.\n\n# [1.4.32] - 2024-06-21\n- Add BrowserExt::deselect.\n- Update FLTK submodule.\n\n# [1.4.31] - 2024-06-07\n- Add InputChoice::value_index().\n- Tweak the Terminal widget API, remove some redundant methods by @jgriffitts.\n- Update ttf-parser to 0.21.\n- Update FLTK submodule.\n\n# [1.4.30] - 2024-05-09\n- Pin fltk to fltk-sys version so that users targeting older versions of fltk don't get a newer version of fltk-sys automatically.\n- Use MACOSX_DEPLOYMENT_TARGET to determine CMAKE_SYSTEM_VERSION when crosscompiling from linux to macos.\n- Update MSRV to 1.64 since underlying deps require it.\n- Make fltk-sys no_std compatible.\n- Add extra check for MenuItem::do_callback.\n- Update FLTK submodule (fixes Fl_Tree issue, wayland IME and crosscompiling from linux to macos with sdk < 11).\n\n# [1.4.29] - 2024-04-24\n- Rename experimental Terminal::put_char* to plot_char*.\n- Add MenuItem::do_callback().\n- Update FLTK submodule.\n\n# [1.4.28] - 2024-04-05\n- Fix macos link error required for macos > 11.0 by @volitionsystems.\n\n# [1.4.27] - 2024-04-01\n- Document that WindowExt::fullscreen() requires that the window is resizable as per upstream.\n- Use data_w and data_h for the RgbImage::convert method.\n- Update FLTK submodule.\n\n# [1.4.26] - 2024-03-10\n- Add Tile::size_range_by_child() and size_range_by_index().\n- Add utils::type_name for debugging purposes.\n- Fix TreeItem draw_item_content with newed items.\n- Fix single-threaded builds and linux arm64 cross-compilation.\n- Update FLTK submodule.\n\n# [1.4.25] - 2024-02-21\n- Add NativeFileChooser::try_show().\n- Add NativeFileChooserAction enum.\n- Add Tile::move_intersection method.\n- Add Color contrast functions.\n- Add MenuExt::menu_box() and set_menu_box().\n- Add MenuItem::pulldown().\n- Update Terminal widget and track changes in fltk Fl_Terminal widget color handling and docs by @jgriffitts.\n- Update FLTK submodule.\n\n# [1.4.24] - 2024-01-31\n- Revert to initial implementation of Color::from_rgbi().\n- Add check to Color::to_rgb() for colors within FLTK's colormap.\n- Add support for raw-window-handle version 0.6.\n\n# [1.4.23] - 2024-01-29\n- Allow a widget's inner handler to execute first. Super::handle only executes if inner_handler returns false by @jgriffitts.\n- use OPTION_USE_THREADS=OFF with CFLTK_SINGLE_THREADED.\n- Update FLTK submodule.\n\n# [1.4.22] - 2024-01-15\n- Add more Fl_Terminal protected methods by @jgriffitts.\n- Add WidgetBase::super_handle_first.\n- Use WidgetBase::assume_derived() in handle() and draw() methods when appropriate.\n- Fix enum with unknown value in FileDialogOptions.\n- Update FLTK submodule.\n\n# [1.4.21] - 2023-12-30\n- Fix Widget_Derived::resize() timing.\n- Fix deletion of SharedImage which is handled by FLTK.\n- Update FLTK submodule.\n\n# [1.4.20] - 2023-12-16\n- Add several Terminal methods by @jgriffitts.\n- Add Terminal::selection_text().\n- Fix drawing artifact on wayland.\n- Disable system libdecor by default.\n- Add takes_events() check for windows on macos.\n- Remove memory leak associated with calls to into_raw() by @jgriffitts.\nRelax static lifetime on Widget::new's title param.\n- Update FLTK submodule.\n\n# [1.4.19] - 2023-12-03\n- Add group::experimental::Terminal widget by @jgriffitts.\n- Add some extra colors, helpful for the newly added Terminal widget.\n- Add GlutWindow::swap_interval and set_swap_interval.\n- Update fltk submodule.\n\n# [1.4.18] - 2023-11-17\n- Fix build with enable-glwindowf feature.\n\n# [1.4.17] - 2023-11-17\n- Add Window::maximize, un_maximize, and maximize_active.\n- Add Button::set_compact.\n- Add TextBuffer::replace check.\n- Update FLTK submodule.\n\n# [1.4.16] - 2023-11-03\n- Fix Column::default_fill() centering.\n- Schedule callback deletion.\n- cfltk: Update pkg-config .pc generation under wayland.\n- Update FLTK submodule.\n\n# [1.4.15] - 2023-10-21\n- Wrap newly added Grid widget under the group::experimental module (api might change depending on FLTK).\n- Update FLTK submodule.\n\n\n# [1.4.14] - 2023-10-08\n- Add InputExt::cursor_color() and set_cursor_color() by @thorio.\n- Add TextBuffer::redo() and TextEditor::redo().\n- Add TextBuffer::append2().\n- Add TextBuffer::set_bytes().\n- Load system icons on linux.\n- Increate StyleTableEntry enties accepted length.\n- Update FLTK submodule.\n\n# [1.4.13] - 2023-09-23\n- Fix building with single-threaded feature.\n- Add DisplayExt::has_buffer().\n- Handle submenu in MenuItem::size().\n- Add pkg-config feature which builds this crate against a system installed cfltk instance.\n- Update FLTK submodule.\n\n# [1.4.12] - 2023-09-09\n- Add app::prefs::Preferences.\n- Fix drop impl for non-parented widgets.\n- Allow FrameType to represent values above 56.\n- Enable feature doc_auto_cfg for docs.rs by @viruscamp.\n- Update FLTK submodule.\n\n# [1.4.11] - 2023-09-05\n- Add app::add_check, has_check and remove_check.\n- Saner management of WidgetTracker.\n- Make Image code aware of single-threaded feature.\n- Refactoring usage of bitflags.\n- Update FLTK submodule.\n\n# [1.4.10] - 2023-08-23\n- Fixed build issue on windows-gnu when cross-compiling.\n- The bundled flag now searches cfltk releases for the latest build by default. This can be overriden by overriding the CFLTK_BUNDLE_DIR or CFLTK_BUNDLE_URL, or if providing libs for multiple targets with the same naming schema as cfltk (`lib_<arch>-<platform>.tar.gz`), via the CFLTK_BUNDLE_URL_PREFIX env var. This allows decoupling cfltk releases from fltk-sys releases.\n- fltk bundles are now named following the rustc triple convention. This removes a previous limitation on supported bundle platforms.\n- Refactoring the build script. \n- Add RgbImage::blur and convert_transparent.\n- Add RgbImage::to_srgb_image.\n- Fix RgbImage::convert from Rgba8 to Rgb8.\n- Enable app::set_color_with_alpha for cairoext feature.\n- Update FLTK submodule.\n\n# [1.4.9] - 2023-07-30\n- Add ShortcutButton::set_default_value, default_value, and default_clear.\n- Add WidgetExt::super_draw_first.\n- Require C++17 for building cfltk.\n- Use `-bundle` link flag if rustc version > 1.62 on windows-gnu.\n- Update FLTK submodule\n\n# [1.4.8] - 2023-07-20\n- Add cairoext feature which allow using cairo for drawing via functions in app::cairo::*.\n- Add fltk-config feature which allows the use of installed FLTK via invoking fltk-config. This still requires FLTK 1.4.\n- Add app::option, set_option functions and Option enum.\n- Deprecate Flex::set_size() in favor of Flex::fixed().\n- Update FLTK submodule.\n\n# [1.4.7] - 2023-07-04\n- Support Flex::set_margins() and margins().\n- Add Image::set_scaling_algorithm and scaling_algorithm.\n- Add ImageExt::copy_size().\n- Update FLTK submodule.\n\n# [1.4.6] - 2023-06-27\n- Add Flex::fixed (as is the current api in FLTK's Fl_Flex).\n- Add app::fl_msg() (a way to get the fl_msg (the win32 MSG object)).\n- Update FLTK submodule.\n\n# [1.4.5] - 2023-06-08\n- Return bool from handle_event.\n- Update fltk submodule.\n\n# [1.4.4] - 2023-05-23\n- Add app::set_belowmouse().\n- Relax SimpleTerminal::append2() requiring ansi mode.\n- Tooltip::enter_area() requires a static CStr as previous code didn't work correctly https://github.com/fltk-rs/fltk-rs/issues/1402.\n- Update fltk submodule.\n\n# [1.4.3] - 2023-05-08\n- SimpleTerminal::append2 should not allocate a CString by @bigfarts.\n- Support loongarch64-unknown-linux-gnu by @cstkingkey.\n- use ::std::os::raw ctypes prefix with newer bindgen.\n- Remove cty dependency because of c_char issue on aarch64 windows.\n- Fix call to fl_wl_screen in cfltk.\n- Update fltk submodule.\n\n# [1.4.2] - 2023-04-27\n- Adds several SysMenuBar methods.\n- Adds MacAppMenu and related methods.\n- Fixes WindowExt::raw_handle() on wayland.\n- Update ttf-parser dependency.\n- Update FLTK submodule.\n\n# [1.4.1] - 2023-04-13\n- Add capture of offscreens and image surfaces by @Postrediori.\n- Added taskbar visibility for the shapedwindow example by @SigmaEG.\n- Update FLTK submodule.\n\n# [1.4.0] - 2023-04-01\n- Use Rust version 2021 and require rustc 1.56.\n- Add explicit static-msvcrt feature for when cargo doesn't auto-propagate crt-static, by @vstojkovic.\n- Improve docs on font indexing ops.\n- Refactor images to use Arc.\n- Add MenuButton::popup check.\n- Update bitflags dependency.\n- Apply newer clippy lints.\n- Update FLTK submodule.\n\n# [1.3.34] - 2023-03-19\n- Fix CFLTK_WAYLAND_ONLY builds.\n- Add WidgetExt::set_damage_area() by @jkl1337.\n- Add WidgetBase::super_draw().\n- Update FLTK submodule.\n\n# [1.3.33] - 2023-03-08\n- Fix typo in draw routines for draw_rounded_rect: by @jkl1337.\n- Fix a break in fltk-flow from moving cfl_widget.hpp from cfltk/include: by @jkl1337.\n- Update FLTK submodule.\n\n## [1.3.32] - 2023-03-02\n- Support crt-static with msvc toolchain.\n- Internally use String for widget id.\n- Update FLTK submodule.\n\n## [1.3.31] - 2023-02-16\n- Correct draw::LineStyle values by @cpardotortosa\n- Improve Tooltip documentation by @mark-summerfield\n- Add ShortcutButton\n- Add InputExt::tab_nav setter/getter\n- Make Tabs::auto_layout also run when called\n- Add Tabs::handle_overflow\n- Update FLTK submodule\n\n### [1.3.30] - 2023-02-07\n- Fix memory issue with WidgetExt::set_image and set_deimage caused in version 1.3.24.\n- Add BrowserExt::selected_items().\n- Update Tile docs.\n- Add some draw graphics context checks in cfltk.\n- Pull FLTK fixes.\n\n### [1.3.29] - 2023-02-03\n- Remove redundant check in Browser::insert.\n- Pull fix in BrowseMultiFile FileDialog: https://github.com/fltk-rs/fltk-rs/issues/1346.\n- Update FLTK.\n\n### [1.3.28] - 2023-01-23\n- Add image::AnimGifImage.\n- Add Tabs::auto_layout().\n- Add Color::from_rgba and to_rgba with enable-glwindow feature.\n- Make Color::from_hex, from_hex_str, to_hex_str RGBA aware.\n- Expose internal utils::oncelock module.\n\n### [1.3.27] - 2023-01-14\n- Pull FLTK fixes.\n- Add hack to fix builds with cross-rs.\n\n### [1.3.26] - 2023-01-05\n- Add newly-added CallbackTrigger::Closed.\n- Add app::callback_reason().\n- Add enums::CallbackReason.\n= Add draw::draw_circle_fill().\n- Fix building on macos when using the use-wayland feature flag.\n- Update FLTK.\n- Update ttf-parser to 0.18.\n\n### [1.3.25] - 2022-12-25\n- Add `WidgetBase::from_dyn_widget() and from_dyn_widget_ptr()`.\n- Add `utils::is<WidgetExt>(w) and is_ptr_of()`.\n- Add `WidgetExt::image_mut() and deimage_mut()`.\n- Mark `WidgetExt::as_widget_ptr() and ImageExt::as_image_ptr()` as safe.\n- Pull FLTK fixes.\n\n### [1.3.24] - 2022-12-15\n- Add image::IcoImage.\n- Use Fl_Widget::bind_image and bind_deimage internally.\n- Relax GlobalState callback. (Fn to FnMut)\n- Add WidgetExt::as_base_widget.\n- Pull FLTK fixes.\n\n## [1.3.23] - 2022-12-02\n- Fix docs.rs build!\n\n## [1.3.22] - 2022-12-02\n- Adds newly added Oxy scheme.\n- Add MenuExt::item_pathname.\n- Add draw_rounded_rect and draw_rounded_rectf.\n- Add app::WidgetId trait.\n- Pull FLTK fixes.\n\n## [1.3.21] - 2022-11-24\n- Impl HasRawDisplayHandle for windows.\n- Fix MenuItem::set_callback().\n- Add MenuItem::set_shortcut and set_flag.\n- Use bitflags for MenuFlag.\n\n## [1.3.20] - 2022-11-13\n- Add ColorChooser::set_tuple_rgb by @ConsoleC137.\n- Add a grabbed() check for MenuButton::clear().\n- Use FLTK's own Flex widget (newly added to FLTK).\n- Update FLTK.\n\n## [1.3.19] - 2022-11-01\n- Add ColorChooser::set_rgb().\n- Add check in MenuExt::text() for empty menus by @purrie.\n- Add other similar checks for other MenuExt methods.\n- Impl PartialEq, Eq and Default for StyleTableEntry and StyleTableEntryExt.\n- Pull FLTK fixes.\n\n## [1.3.18] - 2022-10-21\n- Fix build on Windows when enabling the raw-window-handle feature.\n\n## [1.3.17] - 2022-10-21\n- Several improvements to the tree example, by @peter-scholtens. \n- Add support for raw-window-handle version 0.5 under the rwh05 feature flag.\n- Add draw::draw_rbox().\n- Add MenuButton::clear().\n- Update README and FAQ.\n- Pull FLTK fixes.\n\n## [1.3.16] - 2022-10-05\n- Default to drawing with Cairo on Linux/BSD\n- Fix building with both features use-wayland and enable-glwindow while adding widgets to the glwindow.\n- Pull upstream support for adding widgets to GlWindow.\n- Pull upstream fixes.\n- Remove once_cell.\n- Update ttf-parser to version 0.17.\n\n## [1.3.15] - 2022-09-11\n- Revert breaking change with raw-window-handle's update.\n- Support CFLTK_WAYLAND_ONLY env variable which allows building a wayland non-hybrid FLTK app.\n- Fix some clippy lints.\n- Pull FLTK's pure wayland backend.\n\n## [1.3.14] - 2022-09-06\n- impl std::default::Default for TextBuffer by @ConsoleC137.\n- Avoid calling git submodule update in build script.\n- Update raw-window-handle dep to 0.5.\n- Pull FLTK's hybrid wayland backend.\n- Pull FLTK fixes.\n\n## [1.3.13] - 2022-08-09\n- Add BrowserExt::hide_line().\n- Replace lazy_static with once_cell.\n- Remove assert from Offscreen::is_valid().\n- Pull FLTK fixes.\n\n## [1.3.12] - 2022-07-26\n- Explicitly check darwin arch in fltk-sys' build script.\n- Add index check with GroupExt::insert\n- Pull upstream FLTK fixes.\n\n## [1.3.11] - 2022-07-10\n- Add WindowType::Single as alias to WindowType::Normal.\n- Add Window::set_on_top() which modifies the Window's level on macOS platforms to be NSMainMenuWindowLevel + 2.\n- Fix Flex::recalc to not change the current group.\n- Expose Group::set_current.\n- Pull FLTK fixes.\n\n## [1.3.10] - 2022-07-01\n- Fix Flex::clear.\n- Fix build using musl on Alpine Linux. \n- Add app::modal().\n- Revert change where app::channel::recv() requires Clone.\n- Pull FLTK fixes.\n\n## [1.3.9] - 2022-06-23\n- Pull FLTK fixes.\n- Fix opacity issue on wayland.\n\n## [1.3.8] - 2022-06-06\n- Add app::raw_open_callback.\n- Add WindowExt::icon_label and set_icon_label.\n- Pull fixes from FLTK.\n\n## [1.3.7] - 2022-05-19\n- Add app::GlobalState.\n- Add DisplayExt::show_insert_position by @degaart\n- Relax some DisplayExt method asserts checking for an existing buffer by @degaart.\n- Pull fixes from FLTK.\n\n## [1.3.6] - 2022-04-23\n- Re-enable doc example scraping after upstream nightly rustdoc fix.\n\n## [1.3.5] - 2022-04-17\n- Add BrowserExt::data(), set_data(), add_with_data() and insert_with_data() methods.\n- Fix SharedImage::from_image() refcount.\n\n## [1.3.4] - 2022-04-10\n- Pull FLTK fixes.\n- Some refactoring.\n\n## [1.3.2] - 2022-03-31\n- Add Screen type as well as related screen functions and screens_info example, by @joseluis.\n- Add Rect and new Coordinates type, by @joseluis.\n- Add Size and Cell types.\n- Add link to fltk-grid.\n- Add CFLTK_BUNDLE_PREFIX_URL by @aaronps.\n- Check curl and tar error codes when using fltk-bundled feature flags and properly report them, by @aaronps.\n\n## [1.3.1] - 2022-03-22\n- Pull updated Wayland backend code from FLTK.\n- Fix HasRawWindowHandle implementation on Wayland.\n- Improve TreeItem::move* docs.\n- Deprecate dialog::choice() and choice_default() in favor of choice2() and choice2_default().\n- Fix BrowserExt::set_icon() leak after calling BrowserExt::clear().\n\n## [1.3.0] - 2022-03-06\n- Pull FLTK dialog [fix](https://github.com/fltk/fltk/issues/401).\n- Pull FLTK's wayland support.\n- Enable building using the wayland backend, requires the use-wayland feature flag.\n\n## [1.2.32] - 2022-02-26\n- Free singleshot heap-allocated trait-object(callbacks) in app::awake_callback() and add_timeout() by @mosolovsa.\n- Fix TiledImage refcount.\n- Fix MenuItem::add() and insert().\n- Add experimental GlWidgetWindow, gated under the enable-glwindow feature.\n- Add app::set_color_with_alpha(), gated under the enable-glwindow feature.\n- Update ttf-parser to 0.15.\n\n## [1.2.31] - 2022-02-19\n- Add dialog::message_icon().\n- Add dialog::FileChooser size and position methods.\n- Add dialog::message_set_hotspot(), message_hotspot() and set_font().\n- Fix FileChooser::set_label() and set_ok_label().\n\n## [1.2.30] - 2022-02-10\n- Add MenuItem::add, add_emit, insert and insert_emit.\n- Add details to channel docs by @peter-scholtens.\n- Derive PartialEq for TextAttr.\n- Update patch to detect Event::Enter for windows on Windows.\n- Update FLTK.\n\n## [1.2.29] - 2022-01-31\n- Add TextEditor::AnyState const value.\n- Add TextEditor::add_key_binding() and remove_key_binding().\n- Add TextBuffer methods of secondary selection.\n- Fix for unicode fonts.\n- Add DisplayExt::set_highlight_data_ext() and text::StyleTableEntryExt (supports underline, strikethrough, background color...etc).\n- Add setters & getters for secondary selection, spelling and grammar colors.\n- Pull FLTK menu fixes.\n- Update FLTK (removes experimental drivers).\n\n## [1.2.28] - 2022-01-22\n- Expose TreeItem user_data.\n- Documentation fix by @AshfordN.\n- Further improvement to the editor example (updates title bar with status of the file) by @peter-scholtens.\n- Check image size in ImageExt::scale().\n- Add debug assert checking if browser column widths contains 0.\n\n## [1.2.27] - 2022-01-14\n- Add custom impl of Clone for app::Sender & Receiver by @KillTheMule.\n- Remove dependency on stb_truetype in favor of ttf-parser.\n- Add Spinner::set_wrap() and wrap().\n- Improve editor example, #1105 by @peter-scholtens.\n- Pull FLTK InputChoice changes and other fixes.\n\n## [1.2.26] - 2022-01-05\n- Add timeout3, idle3 functions which properly handle removal of callbacks, by @AshfordN.\n- Deprecate app::release() in favor of app::set_grab(None), by @AshfordN.\n- Pull FLTK fixes.\n\n## [1.2.25] - 2021-12-30\n- Add WindowExt::set_override() by @AshfordN.\n- Add draw::wrap_measure() by @AshfordN.\n- Add TableExt::cursor2rowcol().\n- Add enum table::TableResizeFlag.\n- Add WidgetBase::assume_derived().\n- Relax derive requirement for TableExt::scrollbar().\n- Removed use of function-like macros in doc attribute which requires Rust 1.54.\n\n## [1.2.24] - 2021-12-27\n- Improve calculator examples. Thanks @peter-scholtens.\n- Add TableExt::find_cell(), TableExt::try_get_selection() and try_visible_cells().\n- Fix FileChooser filter docs. FileChooser also accepts Paths in addition to strings.\n- Use crossbeam-channel internally to avoid conflicts with app::awake().\n\n## [1.2.23] - 2021-12-21\n- Update raw-window-handle to 0.4.\n- Make Offscreen aware of single-threaded feature.\n- Fix visibility of is_ui_thread().\n- Update FLTK.\n\n## [1.2.22] - 2021-12-19\n- Add doc comments and example comments. Thanks @KillTheMule.\n- Fix doc typos. Thanks @ctrl-81.\n- Fix doc typos. Thanks @AshfordN.\n- Guard against division by zero in Flex code.\n- Check that certain calls are only done in the main thread.\n- Add app::is_initialized().\n- Use ninja only via feature flag.\n\n## [1.2.21] - 2021-12-14\n- Fix BmpImage::from_data() not passing the correct len.\n- Fix GroupExt::remove_by_index() virtual call.\n- Fix documentation typo. Thanks @mark-summerfield.\n- Add HelpDialog::shown().\n- Add Window::clear_modal_states().\n- Add Window::force_position().\n- Improve font documentation.\n- Add hack to find a font's name based on the file name when stb fails to get the name.\n- Improve radio button docs.\n- Pull FLTK IME fixes.\n- Deprecate Tree::set_item_clicked().\n- Relax mutability requirements for several methods.\n\n## [1.2.20] - 2021-12-09\n- Cleanup macros and surrounding api. Thanks @AshfordN.\n- Update doc comment on draw::set_line_style().\n- Add Window xclass and default_xclass setter and getter. (Changes the XA_WM_CLASS property of the window)\n- Add `Color::from_hex_str(&str)` and `to_hex_str()`.\n- Optimize Color::from_rgba_tuple().\n- Add draw::text_extents().\n- Properly `cfltk_` prefix extern Cocoa wrapper functions.\n- Fix build on 32-bit X11 systems (introduced in 1.2.11 by Window::platform_hide() and platform_show()).\n\n## [1.2.19] - 2021-12-03\n- Fix docs for dialog::message_title_default(). Thanks @hannesbraun.\n- Add TreeItem::set_label_fgcolor() and label_fgcolor(), deprecate the older names. Thanks @AshfordN.\n- Add TreeItem::as_ptr().\n- Add Tree::item_pathname().\n- Add enums::Key::F1 to F12, Key::is_fn_key() and Key::fn_key(i32).\n\n## [1.2.18] - 2021-11-27\n- Add menu::mac_set_about(). Thanks @hannesbraun.\n- Add TreeItem::try_widget() and Wizard::try_current_widget().\n- Add app::version_str().\n- Add dialog::message_title() and message_title_default().\n- Shift experimental Flow widget to its own [crate](https://github.com/MoAlyousef/fltk-flow).\n- Add TreeItem::draw_item_content.\n- Expose several macros that assist in implementing some traits (WidgetExt, WidgetBase, GroupExt), useful for creating custom widgets.\n- Deprecate TreeItem::widget(), wizard::current_widget() and Group::current().\n\n## [1.2.17] - 2021-11-21\n- Add draw::draw_check().\n- Expose trait macros.\n- Link to FLTK bundled libpng on Linux.\n- Add SimpleTerminal::append2.\n- Build thin binaries on MacOS 11 M1 since cargo/rust still don't support universal binaries.\n\n## [1.2.16] - 2021-11-15\n- Add WidgetExt::center_x() and center_y().\n- Allow scraping examples for docs.rs.\n- Add Fl_Flex::remove to C wrapper.\n- Expose WidgetExt::raw_user_data() and set_raw_user_data().\n- Pull fixes from FLTK.\n\n## [1.2.15] - 2021-11-11\n- Fix android build (break introduced with version 1.2.11). Thanks @Ar37-rs. \n- Don't assert that window is shown with set_opacity.\n\n## [1.2.14] - 2021-11-09\n- Mark Window::platform_hide() and platform_show() as safe.\n- Add WindowExt::wait_for_expose().\n- Fix div by zero in Flex orphaned space.\n- Flex::set_size() no longer needs a mutable widget ref.\n- Flex::end() and recalc() no longer need mutable ref to self.\n- Pull FLTK fixes.\n- Update README with tutorial links and reference to fltk-table and fltk-evented.\n- Cleanup and reorganize macro ordering to be after structs.\n- Formatting and lints.\n\n## [1.2.13] - 2021-11-01\n- Unlink C++ std lib to enable cross-compiling to Windows.\n- Fix draw::Offscreen::rescale().\n- Update FLTK device code.\n\n## [1.2.12] - 2021-10-30\n- Fix 32bit Windows broken build in version 1.2.11, by changing ShowWindow extern calling convention.\n\n## [1.2.11] - 2021-10-30\n- Pull FLTK focus box fix.\n- Fix Flex::Row set_pad().\n- Add experimental Flow widget.\n- Add Window::platform_show() and platform_hide() which calls the platforms show and hide routines.\n\n## [1.2.10] - 2021-10-23\n- Add utils::char_len() and content_view().\n- Remove asserts in WindowExt::set_cursor_image() and just rescale if image had been modified.\n\n## [1.2.9] - 2021-10-19\n- Fix image links in crates.io.\n- Adds image::RgbScaling enum.\n- Adds RgbImage::scaling_algorithm() and set_scaling_algorithm().\n- Add ImageExt::to_rgb_image().\n- Add RgbImage::from_pixmap().\n- Assert image size in WindowExt::set_cursor_image().\n- Scale returned RgbImage in ImageExt::to_rgb().\n- Update FLTK.\n\n## [1.2.8] - 2021-10-11\n- Fix floating point exception in Flex inner vector not properly resizing with set_size().\n- Fix crates.io links by using absolute urls.\n\n## [1.2.7] - 2021-10-07\n- Add Group::try_current().\n- Add Color::from_rgba_tuple().\n- Constify more enums::Color and Shortcut methods.\n- Constify utils functions.\n- Formatting and clippy.\n- Update FLTK and cfltk.\n\n## [1.2.6] - 2021-10-05\n- Move macros into fltk and remove dependency on syn & quote.\n- Make raw-window-handle an optional dependency.\n- Constify Key, Event and Shortcut constructors.\n- Add const Key::to_char().\n- Add const Color::from_rgbi().\n\n## [1.2.5] - 2021-10-02\n- Add app::font_size() getter.\n- Handle None in DisplayExt::set_highlight_data().\n- Alias GlutWindow as GlWindow since they are basically the same!\n- Remove wrong implementation of draw::scale_x().\n- Add WidgetExt::handle_event().\n- Relax app::handle() event requirements, and use `Into<Event>`.\n- Pull FLTK Gif fixes.\n\n## [1.2.4] - 2021-09-29\n- Pull image fixes from FLTK.\n- Add app::compose, compose_state, reset_marked_text and insertion_point_location.\n- Add app::copy.\n- Check the size of drawn text.\n- Get scaling factor on MacOS without requiring info.plist.\n- Add copy and paste overloads for selection buffers.\n- Add app::add_clipboard_notify() and remove_clipboard_notify().\n\n## [1.2.3] - 2021-09-24\n- Add a new group::Flex widget wrapping [Fl_Flex](https://github.com/osen/FL_Flex).\n- Use fork of FL_Flex to avoid patching, then linking libstd++.\n- Add Flex's margin and pad properties getter and setter.\n- Overload Flex::add to recalculate layout.\n- Add WidgetBase::resize_callback().\n- Add WidgetBase::default_fill() to construct a widget with the size of its parent.\n- Improve some docs.\n- Derive Default for Column, Row and Grid widgets.\n- Fix cargo doc build issue on docs.rs.\n\n## [1.1.19] - 2021-09-18\n- Fix doc comments about FileDialog and NativeFileChooser.\n- Using fltk-bundled automatically enables glwindow. Note, other user-built bundles can be cached and used via the CFLTK_BUNDLE_DIR or CFLTK_BUNDLE_URL env variables.\n- Remove unnecessary references to use-ninja in the README and main docs since it will be used if found.\n- Update ROADMAP.\n\n## [1.1.18] - 2021-09-15\n- Open display for certain draw functions when appropriate.\n- Add TextBuffer::search_forward(), search_backward(), find_char_forward() and find_char_backward().\n- Add DisplayExt::unset_highlight_data() convenience method.\n- Update FLTK to pull nanosvg fixes.\n\n## [1.1.17] - 2021-09-10\n- Fix image type asserts in Window::set_shape().\n- Add draw::gl_start() and gl_finish(). As well as app::set_gl_visual(Mode).\n- Copy shared lib when building with fltk-shared feature to the target dir.\n- Update docs regarding WidgetExt::trigger(), set_trigger() and enums::CallbackTrigger explaining their provenance.\n\n## [1.1.16] - 2021-09-04\n- Fix typo in function name (my_getContentView).\n- Enable building FLTK and cfltk in MinSizeRel profile when using opt-level=\"s\" or \"z\".\n- Add a single-threaded feature. This allows linking X11-based libs not built with threading support. As a side-effect, this disables accessing/modifying widgets from other threads, it also might improve performance. It should not be the default.\n- Update fltk and syn.\n\n## [1.1.15] - 2021-08-31\n- Pull FLTK tooltip fix for issue #797.\n- Fix `fn WidgetExt::callback() -> Option<Box<dyn FnMut()>>` (callback getter) to only work for FLTK types with default callbacks.\n- Properly export the widget_extends macro.\n- Fix undefined symbol on macos.\n\n## [1.1.13] - 2021-08-27\n- Check for ImageExt::count() when calling ImageExt::to_rgb().\n- Remove unnecessary deps.\n- Refactor cfltk to remove code duplication and reduce build times.\n\n## [1.1.12] - 2021-08-21\n- Update libc, cmake-rs, bitflags and syn.\n- Fix fltk-shared feature on X11 systems.\n\n## [1.1.11] - 2021-08-12\n- Remove redundant macro expansion.\n- Update deps.\n\n## [1.1.10] - 2021-08-09\n- Add output::OutputType.\n- Add format_text example. Contributed by @mvasi90.\n- Fix some clippy lints.\n- Add Font::get_name().\n- Add image::RgbImage::convert().\n- Add ColorDepth::from_u8().\n- Add a widget_extends! macro for custom widgets, which basically implements Deref/DerefMut and adds convenience constructor and anchoring methods.\n- (Revert a breaking change introduced in 1.1.8)\n\n## [1.1.7] - 2021-08-04\n- Fix invalid cast in TextBuffer::selection_position().\n- Update FLTK.\n- Add draw::scale().\n- Add app::add_system_handler and remove_system_handler.\n\n## [1.1.6] - 2021-08-02\n- Fix high cpu usage due to spurious awakes during app::wait().\n- Add Color::to_rgb().\n- Add frame_color() and set_frame_color().\n- Add menubutton example, this should be preferable over MenuItem for right click menus.\n\n## [1.1.5] - 2021-07-31\n- Add Color::contrast, grayscale and rgb_color.\n- Add doc comment that SvgFileSurface can panic on creation.\n- Add WidgetExt::has_focus().\n\n## [1.1.4] - 2021-07-23\n- Add app::set_frame_type_cb() and set_frame2().\n- Add Color::gray_ramp and color_average().\n- Add app::draw_frame_active().\n- Fix doc of draw::draw_frame and draw_frame2 and add assert.\n- Update Syn. \n\n## [1.1.3] - 2021-07-21\n- Add WidgetExt::with_type().\n- Add MenuExt::menu and set_menu().\n- Add ImageExt::draw_ext() which allows passing the offset to the image.\n- Add app::frame_shadow_width setter and getter.\n- Add app::frame_border_radius_max setter and getter.\n- Add app::set_color().\n- Add enums::Color::darker() and lighter().\n\n## [1.1.2] - 2021-07-19\n- Fix app::event_clicks() and add overload for event_clicks_num() for number of clicks.\n- Add widget_resize() for simple resizing without class-specific resize functionality.\n- Add overloads for `app::*_idle` and `app::*_timeout` which accept simple function pointers.\n- Add utils::filename_expand().\n- Support `::new` and `::end` calls for Column and Row widgets.\n- Support `::end` calls for VGrid and HGrid widgets.\n- Update libc and FLTK.\n\n## [1.1.0] - 2021-07-10\n- Largely simplify getting concrete types, ex. Scroll::scrollbar() now returns a concrete Scrollbar instead of a `Box<dyn ValuatorExt>`, and parent() returns an `Option<Group>` instead of an `Option<Box<dyn GroupExt>>`.\n- Add Window::opacity() and set_opacity() to support window transparency/opacity.\n- Add MenuItem::add_image() to add icons to menu items.\n- MenuExt::add(), add_emit(), insert() and insert_emit() now return the index of the menu item.\n- Add WidgetExt::set_image_scaled() and set_deimage_scaled().\n- Add callback getter.\n- Fix MSRV, turns out it's 1.46 when using if in const context!\n- Add TableExt::scrollbar() and hscrollbar().\n\n## [1.0.22] - 2021-07-05\n- Add `fn WidgetExt::is_same<W: WidgetExt>(&self, other: &W)`.\n- Add WidgetExt::active and active_r.\n- Add app::ready, check, release, reload_scheme, menu_line_spacing and set_menu_line_spacing.\n- Fix double fclose in SvgFileSurface drop impl. Thanks @DBLouis.\n- Pull MouseWheel coordinate in subwindows fix from FLTK.\n- impl PartialEq for several FLTK types.\n\n## [1.0.21] - 2021-07-01\n- Fix MenuItem::set_label() on Windows.\n- Add into_group() method to GroupExt.\n- Add MenuButton types enum MenuButtonType.\n- Allow DisplayExt::set_highlight_data() to be set even in the absence of a text buffer.\n- Pull fixes from FLTK and cfltk.\n\n## [1.0.20] - 2021-06-26\n- Add app::event_original_key().\n- Add GroupExt::init_sizes(), bounds() and add_resizable().\n- Add alias OFlatBox to OFlatFrame.\n- Add feature `no-gdiplus` to disable gdi+ drawing on Windows.\n- Fix dependabot config.\n- Update dependencies.\n\n## [1.0.19] - 2021-06-17\n- Fixed spreadsheet example, Thanks @eadf.\n- Fixed calculator example. Thanks @eadf.\n- Add several clipboard event handling functions into the app module. app::event_clipboard().\n- Add app::clipboard_contains().\n- Add app::paste_text() and paste_image().\n- Add app::event_dispatch to intercept events before they reach widgets’ handlers.\n- Add app::handle_raw for forwarding events from event_dispatch.\n\n## [1.0.18] - 2021-06-08\n- Fix Font::set_font(), FLTK expects a long lived string.\n\n## [1.0.17] - 2021-06-07\n- Update app::set_callback to reflect WidgetExt::set_callback.\n- Add app::swap_frame_type() to swap the default frame type with a new one.\n- Add app::frame_type() to get the default frame type.\n- Add enums::FrameType::swap_frames() to swap frame types.\n- Free WindowExt::raw_handle() memory on error.\n- Use full font name instead of family name when handling external truetype fonts.\n- Add convenience functions to enums::Font for loading and replacing fonts.\n\n## [1.0.16] - 2021-06-02\n- Update to latest FLTK with gdi+ support on Windows (for anti-aliased oblique lines and curves).\n- Fix GroupExt::clear().\n- Add `impl From<i32> for Event`.\n- Use bitflags for Event.\n- Impl fmt::Display for Event.\n\n## [1.0.14] - 2021-05-23\n- Update FLTK and cfltk.\n- Link to system libpng on linux to avoid conflicting with FLTK's bundled libpng.\n- Add pixels_per_unit() and pixel_h pixel_w for SingleWindow and DoubleWindow.\n- Add WindowExt::screen_num() and set_screen_num().\n\n## [1.0.13] - 2021-05-20\n- Fix link in main docs.\n- Relax FileChooser::shown() to accept immutable borrow.\n- Update fltk-derive.\n\n## [1.0.12] - 2021-05-11\n- Pass FileChooser title as long-lived string.\n- Fix GroupExt::clear to account for empty groups.\n\n## [1.0.11] - 2021-05-11\n- Add open_display call before surface::ImageSurface::new.\n- Update FAQ to use 1.0 code . Thanks @sportfloh\n- Add GroupExt::unsafe_clear for faster clearing of group widgets.\n- Update FLTK & cfltk.\n\n## [1.0.9] - 2021-05-09\n- Add RgbImage constructors which take line data as param.\n- Add draw::draw_image2 which takes line data as param.\n- Update FLTK & syn.\n\n## [1.0.8] - 2021-05-03\n- Transfer repo and update LICENSE files.\n- Fix links to releases and demos.\n\n## [1.0.7] - 2021-05-02\n- Add missing Shortcut/EventState values.\n- Add missing screen functions.\n- Add SvgImage::normalize().\n- Re-revert WindowExt::set_icon().\n\n## [1.0.6] - 2021-05-01\n- Fix WindowExt::set_icon potential leak.\n- Update FLTK.\n\n## [1.0.5] - 2021-04-28\n- Revert WindowExt::set_icon to previous behavior.\n- Add null checks to new image code.\n\n## [1.0.4] - 2021-04-28 (Yanked)\n- Add Meta, Command & Control Shortcuts (helpful for working with MacOS). #640. Thanks @hannesbraun\n- Fix WidgetExt::set_image() memory leak when called with an already set image.\n- Update deps: Syn, libc and FLTK.\n\n## [1.0.3] - 2021-04-27 (Yanked)\n- Grab correct image for correct drops.\n- Fix `enable-glwindow` builds.\n\n## [1.0.2] - 2021-04-26\n- Reorganize build script.\n- Remove redundant functions in the bindings.\n- Update FLTK, cfltk, syn.\n- Base on cfltk main branch.\n\n## [1.0.1] - 2021-04-18\n- Add MenuItem::children().\n- Relax mutability requirement for MenuItem::next() and at().\n- Add check on WidgetExt::label().\n\n## [1.0.0] - 2021-04-18\n- [BREAKING] Importing fltk::* no longer auto-imports the prelude nor enums modules.\n- [BREAKING] Importing widgets no longer auto-imports the prelude nor enums modules.\n- [BREAKING] Replace set_callback, handle, draw, draw_cell with their overloads.\n- [BREAKING] Widgets take a `&'static str` for a label when initialized. To use dynamic labels, use set_label or with_label.\n- [BREAKING] Replace TableExt::visible_cells and get_selection with their easier overloads.\n- [BREAKING] Rename InputChoice::set_value2 to set_value_index.\n- [BREAKING] Take i32 where FLTK expects i32.\n- [BREAKING] Rename WidgetType::to_int() to to_i32().\n- [BREAKING] app::event_dx() and event_dy() return an app::MouseWheel instead of i32.\n- [BREAKING] enums::Mouse moved to app::MouseButton.\n- [BREAKING] Move enums::TextCursor to text::Cursor.\n- Add a Column and Row widgets which support auto_layout by default, but require that widgets be added using add().\n- Add ValueInput::soft and set_soft methods.\n- Add WindowExt::set_cursor_image() and default_cursor().\n\n## [0.16.5] - 2021-04-10\n### Changes\n- Update FLTK, syn and libc.\n- Add assert of widget validity when cloning.\n\n## [0.16.4] - 2021-04-01\n### Changes\n- Add GroupExt::clip_children() and set_clip_children().\n- Add GroupExt::draw_child(), update_child, draw_children and draw_outside_label.\n- Fix FileBrowser::set_filter doc comment.\n- Update libc and syn.\n- Update FLTK and cfltk.\n\n## [0.16.3] - 2021-03-27\n### Changes\n- Add app::set_selection_color() and set_inactive_color().\n- Update readme on events.\n- Update deps.\n- Try to use ninja when available.\n\n## [0.16.2] - 2021-03-24\n### Changes\n- Update FLTK cfltk and libc.\n- Add BrowserExt::selected_text().\n- Remove commented code.\n- Fix refcount checks.\n- Fix typo in docs.\n- Update FAQ.\n- Add ValuatorExt::set_step() zero checks.\n\n## [0.16.1] - 2021-03-22\n### Changes\n- [BREAKING] Remove image conversion code.\n- Fix Fl_RGB_Image allocation.\n- Refactor build script.\n- Enable the fltk-bundled feature on a system path using the CFLTK_BUNDLE_DIR env variable.\n- Enable the fltk-bundled feature on a user-defined url using CFLTK_BUNDLE_URL env var.\n- Add app::set_font_size() to set the global font size of the app.\n- Add Slider (and Scrollbar) slider_size setter and getter.\n- Add Slider (and Scrollbar) slider_frame setter and getter.\n\n## [0.15.15] - 2021-03-21\n### Changes\n- Specify 'static lifetime for Printer labels.\n- Add assert on image's color depth prior to writing to a file.\n- Add second check in GlWindow get_proc_address.\n\n## [0.15.14] - 2021-03-19\n### Changes\n- Fix print support on linux/bsd and add proper error handling.\n- Pull Gif fix from FLTK.\n- Fix system-fltk feature.\n\n## [0.15.13] - 2021-03-18\n### Changes\n- Update deps.\n- Add ImageExt::w() and h().\n- Add MenuExt::global(). \n- Add MenuItem::measure(), draw() and set_image().\n- Add WindowExt::shap() and set_shape().\n- Fix take_focus() error value.\n- Add WindowExt::x_root() and y_root().\n- Add FrameType::dx(), dy(), dw() and dh().\n\n## [0.15.12] - 2021-03-17\n### Changes\n- Add WidgetExt::center_of_parent().\n- Add ButtonExt::value() and set_value().\n- Add comment on supported image formats in WindowExt::set_icon().\n- Remove redundant set_size() definitions in Chart and BrowserExt.\n- Add WidgetExt::w() and WidgetExt::h().\n\n## [0.15.11] - 2021-03-14\n### Changes\n- Add Spinner value setter and getter.\n\n## [0.15.10] - 2021-03-13\n### Changes\n- Remove unnecessary clone in RgbImage::new().\n- Add doc comments regarding SysMenuBar and enums::Event::Resize.\n\n## [0.15.9] - 2021-03-10\n### Changes\n- Clone data in RgbImage::new().\n- Fix typo in EngravedBox name.\n- Fix memory leak in RgbImage::new() and other functions calling it.\n- Add enums::Damage.\n- Add WidgetExt::damage_type() and set_damage_type().\n- Add WidgetExt::size_of_parent().\n\n## [0.15.7] - 2021-03-08\n### Changes\n- Fix typo in README. Thanks @kainjow.\n- Update deps.\n- Update README & FAQ.\n\n## [0.15.6] - 2021-03-03\n### Changes\n- Add screen scale getters and setters in the app module.\n- add WidgetExt::visible() and visible_r() (recursive) methods.\n- Add GroupExt::remove_by_index().\n- MenuItem::popup() no longer requires mut self.\n- Update deps.\n\n## [0.15.5] - 2021-03-01\n### Changes\n- Check for 0 children with Pack::auto_layout(). Thanks @dheijl.\n\n## [0.15.4] - 2021-02-26\n### Changes\n- Add utils::rgba2hex().\n- Pass u32 to utils::hex2rgba().\n- Fix docs and intra doc links.\n- Update FLTK and cfltk.\n\n## [0.15.3] - 2021-02-24\n### Changes\n- Mark app::handle and handle_main as safe.\n- Add methods to get and set Dial angles.\n- Add app::remove_idle, has_idle, remove_timeout.\n\n## [0.15.2] - 2021-02-22\n### Changes\n- [BREAKING] RgbImage::new() and draw::draw_image() take a ColorDepth enum instead of an int.\n- [BREAKING] Remove app::delay().\n- [BREAKING] Remove image related LabelType values.\n- [BREAKING] Change iconsize and set_iconsize to icon_size and set_icon_size.\n- [BREAKING] BrowserExt::topline, middleline and bottomline converted to snake case.\n- [BREAKING] app::wait_for returns a Result<bool, FltkError>.\n- Fix temp file creation when lacking TMPDIR env variable on some systems.\n- Fix doc tests.\n- Add tests directory.\n- Update FLTK and cfltk.\n\n## [0.14.13] - 2021-02-19\n### Changes\n- Clean up examples.\n- Move example usage to docs.\n- Mark Pixmap constructor as unsafe.\n- Refactoring.\n\n## [0.14.12] - 2021-02-18\n### Changes\n- Update FLTK and cfltk.\n- cleanup fltk.patch.\n- Fix broken image::Pixmap.\n- Add asserts for supported window icon images.\n\n## [0.14.11] - 2021-02-17\n### Changes\n- Fix android typo causing failed android builds.\n- Fix draw::draw_image().\n\n## [0.14.10] - 2021-02-16\n### Changes\n- Mark draw::draw_image() as unsafe.\n- Add docs regarding label's special symbols.\n- Add enable-glwindow to docs.rs metadata.\n\n## [0.14.9] - 2021-02-14\n### Changes\n- Add draw::draw_image().\n- Add OverlayWindow widget.\n- Relax requirement of static str for get_proc_address.\n- Update deps.\n\n## [0.14.8] - 2021-02-13\n### Changes\n- Add TabelExt::get_selection2 and visible_cells2 variants which return tuples.\n- Add GlutWindow widget.\n\n## [0.14.7] - 2021-02-12\n### Changes\n- Fix size of window::RawHandle on 32-bit Xlib systems (#502). Thanks @CaseyB.\n\n## [0.14.6] - 2021-02-11\n### Changes\n- Add BrowserExt::value(). Thanks @tdryer.\n- Refactoring derive code.\n- Update cfltk.\n\n## [0.14.5] - 2021-02-10\n### Changes\n- Remove unnecessary field in MenuItem.\n\n## [0.14.4] - 2021-02-09\n### Changes\n- Add app::event_mouse_button();\n- Add enums::Mouse.\n- Fix docs.\n- impl IntoIter for MenuItem.\n\n## [0.14.3] - 2021-02-08\n### Changes\n- Add app::add_idle().\n- Add app::sleep().\n- Add note on WidgetBase::draw() regarding drawing on MacOS.\n- Update cfltk.\n\n## [0.14.2] - 2021-02-07\n### Changes\n- Add InputChoice::input() which returns the underlying input widget. Thanks @tdryer\n- Update docs.\n\n## [0.14.1] - 2021-02-06\n### Changes\n- [BREAKING] Rename old app::awake<F: FnMut()>(cb: F) to app::awake_callback.\n- [BREAKING] Remove redundant/unnecessary methods from the App struct.\n- Add app::event_key_down(Key) which takes a key and returns true if the given key was held down (or pressed) during the last event. Thanks @CaseyB.\n- Add framebuffer drawing functions: draw::draw_rgba(), draw_rgba_nocopy(), draw_rgb() and draw_rgb_nocopy().\n- Add utils::hex2rgba().\n- Add app::awake().\n- Add custom std::fmt::Debug impl for Event to account for custom events.\n- Update libc dependency.\n\n## [0.13.15] - 2021-02-04\n### Changes\n- Add app::handle_main() for sending events to the main window.\n- Add i32 conversion methods for enums::Event.\n\n## [0.13.14] - 2021-02-03\n### Changes\n- Lock messages.\n- Enable detection of window resizing (added enums::Event::Resize).\n- Added unsafe app::handle which enables sending messages to app windows.\n- Expose unsafe functions app::awake_msg and thread_msg.\n- Update FLTK and cfltk.\n\n## [0.13.13] - 2021-02-02\n### Changes\n- Add optional gl_loader dependency for interop with other OpenGL crates.\n- Add raw-window-handle dependency for interop with other renderers and windowing systems.\n(both are lightweight)\n- Pass contentView to RawWindowHandle for compat with wgpu.\n\n## [0.13.11] - 2021-01-29\n### Changes\n- Add GlWindow::get_proc_address().\n- Use bitflags for draw::LineStyle.\n- Open display before calls to draw.\n- Add default variants of message boxes (not requiring coordinates)\n\n## [0.13.10] - 2021-01-25\n### Changes\n- Add missing docs.\n- Fix clippy warnings.\n- Update syn crate.\n\n## [0.13.9] - 2021-01-22\n### Changes\n- Fix GlWindow::set_mode to account for change of enums::Mode now using bitfalgs.\n- Fix linkage with feature enable-glwindow.\n- Add missing assert.\n- Update cfltk.\n\n## [0.13.7] - 2021-01-18\n### Changes\n- Add debug_assert that char != 0 for BrowserExt::set_format_char and set_column_char.\n- Fix rustdoc failing tests.\n- Add syntactic sugar for DisplayExt::set_buffer to accept Into-Option, same for set_highlight_data.\n\n## [0.13.5] - 2021-01-15\n### Changes\n- Change dialog::color_chooser's default to white instead of black.\n- Add dialog::color_chooser_with_default().\n\n## [0.13.4] - 2021-01-13\n### Changes\n- Fix premature drop in app::load_font.\n- Add build instructions for nixOS. Thanks @legendofa\n\n## [0.13.3] - 2021-01-12\n### Changes\n- [BREAKING] Remove deprecated calls app::set_color and calls to scrollbar_width (should be replaced by scrollbar_size).\n- [BREAKING] Change Color::BackGround to BackGround2 to better reflect the color of input/output widgets.\n- [BREAKING] TableRowSelectMode enum values were trimmed to remove Select prefix.\n- [BREAKING] DragType enum values were trimmed to remove Drag prefix.\n- [BREAKING] Change text methods to snake case in dialog and browser modules for consistency.\n- FAQ: Add info on keeping the console window only for debug builds on Windows.Thanks @dheijl\n- Add proper Default impl for use with fl2rust.\n- Add Color::by_index(u8).\n- Add WindowExt::hotspot().\n- Add Group::current().\n- Add ButtonExt and MenuExt down_box().\n- Add HelpView and InputChoice widgets in the misc module.\n- Add CheckBrowser in the browser module.\n- Add app::get_system_colors().\n- Update dependencies.\n- Add missing docs.\n\n## [0.12.8] - 2021-01-06\n### Changes\n- Add WindowExt::size_range which sets min/max width/height.\n\n## [0.12.7] - 2021-01-05\n### Changes\n- Relax Copy trait bound to Clone as message requirement in widget emit calls.\n- Update syn version.\n\n## [0.12.6] - 2021-01-03\n### Changes\n- Add MenuExt::end, a stub needed for fluid.\n- Add TableExt::callback_col, callback_row, callback_context.\n- Build fluid with fltk.\n\n## [0.12.5] - 2020-12-30\n### Changes\n- Widget deletion is relegated to WidgetBase.\n- Add app::background, background2 and foreground to set default app colors.\n- Deprecate app::set_color.\n\n## [0.12.4] - YANKED\n### Changes\n\n## [0.12.3] - 2020-12-28\n### Changes\n- Add IntoIterator impls for GroupExt widgets, MenuExt widgets and the Tree widget.\n\n## [0.12.2] - 2020-12-26\n### Changes\n- Fix logic bug in the BrowserExt::select method. Thanks @ThiNei2l.\n\n## [0.12.1] - 2020-12-26\n### Changes\n- [BREAKING] TableRow::select_row and select_all_rows also take a flag to specify selection/deselection/toggling existing state.\n- [BREAKING] Mark WidgetExt::into_widget as unsafe since it allows casting into incompatible widget types.\n- Update docs.\n- Update dependencies.\n- Refactoring.\n\n## [0.12.0] - 2020-12-23 - YANKED\n### Changes\n\n## [0.11.6] - 2020-12-13\n### Changes\n- Update docs and README.\n- Dissociate versions of fltk from both fltk-derive and fltk-sys.\n\n## [0.11.5] - 2020-12-09\n### Changes\n- Add wiki.\n- Update dependencies.\n- Update README and lib.rs.\n\n\n## [0.11.4] - 2020-11-30\n### Changes\n- [BREAKING] Remove enums::Color::to_rgb and to_u32.\n- [BREAKING] WidgetExt::trigger returns a CallbackTrigger instead of an int.\n- Add custom Display implementation for Color.\n- Use lazy_static for globals.\n- Use bitflags for several enum types.\n- Add utils::rgb2hex and utils::hex2rgb.\n- Add draw::set_draw_rgb_color() and set_draw_hex_color().\n- Relax app::Message requirements to only be Send + Sync.\n- Add app::set_font(Font) to set global app font.\n- Add app::set_color(Color) to set the global app's background color.\n- Add app::visible_focus and set_visible_focus.\n- Fix WidgetExt::center_of() to account for special positioning within windows.\n- WidgetExt::as_window and as_group only require immutable ref to self.\n- Default Window to a DoubleWindow instead of single window for better performance.\n\n## [0.10.15] - 2020-11-27\n### Changes\n- Add more fields to enums::Align.\n- Add impl BitOr for Shortcut | Shortcut.\n- Update dependencies.\n\n## [0.10.14] - 2020-11-23\n### Changes\n- Pin fltk crate versions to each other.\n- update fltk and cfltk.\n\n## [0.10.13] - 2020-11-21\n### Changes\n\n- Fix WidgetExt::right_of() by @dheatovwil\n- Fix WidgetExt::center_of().\n- Add WidgetExt::trigger() getter.\n- Trigger rebuild on env change of CC or CXX.\n- Update cfltk.\n\n## [0.10.12] - 2020-11-20\n### Changes\n- Write to temp files in TEMP/TMPDIR.\n- Add surface::SvgFileSurface to draw widgets as svg images.\n- Add surface::ImageSurface::draw_decorated_window().\n- Add WindowExt::decorated_w() and decorated_h().\n\n## [0.10.11] - 2020-11-19\n### Changes\n- Added doc comment on the limitations of SimpleTerminal.\n- Added a Dockerfile, because why not!\n- Update cfltk and fltk.\n\n## [0.10.10] - 2020-11-17\n### Changes\n- Clean up build script.\n- Account for spacing with auto_layout.\n- Add custom widgets: group::HGrid and group::VGrid.\n- Add lib search paths for Mageia 7 by @nsalguero.\n- Fix docs on special characters. \n- Add feature: no-pango if rtl and cjk unicode support is not needed on linux/bsd.s\n\n## [0.10.9] - 2020-11-15\n### Changes\n- Add Pack::auto_layout.\n- GroupExt::resizable() takes a &WidgetExt instead of a &mut WidgetExt.\n\n## [0.10.8] - 2020-11-13\n### Changes\n- WindowExt::make_resizable moved to GroupExt::make_resizable.\n- WidgetExt::parent returns a boxed GroupExt instead of a WidgetExt.\n- Follow cfltk stable branch instead of main.\n\n## [0.10.7] - 2020-11-11\n### Changes\n- Separate the C api \"cfltk\" into a separate repo and add via submodules.\n- Restructuring the repo accordingly.\n\n## [0.10.6] - 2020-11-10\n### Changes\n- No longer force the position of default init windows and keep it up to the window manager.\n- Add WindowExt::free_position().\n- Change C api set_style_table_entry to set_highlight_data.\n\n## [0.10.5] - 2020-11-08\n### Changes\n- Patch fltk to fix behavior of Fl_Win32_At_Exit() with mingw toolchain.\n- Fix android build which doesn't support Fl_Printer.\n- Fix WidgetExt::with_size() resizability.\n- Add WidgetExt::measure_label() and draw::measure().\n- Simplified some return types in the printer module.\n\n## [0.10.4] - 2020-11-06\n### Changes\n- Change return type of Printer::begin_job().\n- Use AtomicUsize for refcounting instead of Arc<Mutex>.\n- Decrease refcount when unsetting an image or setting another image.\n- Remove unwrapping when querying for windows, which could fail.\n\n## [0.10.3] - 2020-11-04\n### Changes\n- BREAKING (Security update): Methods and functions returning widget and image instances now return a safer boxed trait object since these might not be constructed by user code (like in dialogs).\n- Fix support for msvc 2013 and lower.\n- Add WidgetBase trait.\n- Images and TextBuffer are now refcounted.\n\n\n## [0.10.2] - 2020-11-02\n### Changes\n- Add unsafe RgbImage::from_data() which creates an RgbImage from non-owned data.\n- <image type>Image::write_to_file has an AsRef<std::path::Path> parameter.\n- Add SurfaceDevice trait and ImageSurface type.\n- Add Printer type for native print support.\n- Prelim support for musl builds.\n- Remove back-compat SurfaceDevice::set_current().\n- Enable window grabbing.\n\n## [0.10.1] - 2020-10-30\n### Changes\n- BREAKING: App::wait() returns bool instead of Result since it doesn't error out.\n- BREAKING: Require pango headers on linux distros for rtl and cjk unicode support.\n- BREAKING: Deletion static methods take ownership of widgets and images.\n- Update docs regarding build dependencies.\n- Add WidgetExt::draw2(), WidgetExt::handle2() and TableExt::draw_cell2() all of which expose the widget in the closure arguments.\n- Remove the requirement to box callbacks.\n- Passing CString to C/C++ should not panic on inner null characters.\n- Removed several unused internal methods from the public interface.\n\n## [0.9.7] - 2020-10-20\n### Changes\n- Add doc comment on MenuExt::value() which might return -1 when no choice is made.\n- Add WidgetExt::set_callback2 which exposes the widget in the closure arguments.\n- Remove unused safe_new.\n\n## [0.9.6] - 2020-10-15\n### Changes\n- Update FLTK.\n- Internal refactoring.\n- Fix app::wait erroneous result.\n\n## [0.9.5] - 2020-10-09\n### Changes\n- Change Tree methods to take immutable borrows of tree items.\n- Pull fixes from FLTK.\n\n## [0.9.4] - 2020-10-05\n### Changes\n- Move threads initialization to occur on App initialization.\n- Pull NSOpenPanel fix from FLTK.\n\n## [0.9.3] - 2020-10-04\n### Changes\n- Add app::set_scrollbar_size(u32) and app::scrollbar_size().\n- Add wrapping methods to DisplayExt as well the text::WrapMode enum.\n- Fix Window::show_with_args().\n\n## [0.9.2] - 2020-09-26\n### Changes\n- Require ANDROID_SDK_ROOT, which has cmake and ninja.\n- No need to specify use-ninja feature for Android.\n- Require ANDROID_NDK_ROOT. Still uses NDK_HOME for back-compat.\n- Fix channels on Android.\n\n## [0.9.1] - 2020-09-24\n### Changes\n- Breaking:\n    - Some draw functions now take a Coord struct:\n        - draw_polygon2()\n        - draw_curve()\n- Add prelim alpha support for Android, this requires:\n    - Android NDK to be installed.\n    - NDK_HOME to be set.\n- Add support for passing cmake toolchain files via env var CFLTK_TOOLCHAIN.\n- Add struct AndroidWindow.\n- Update FLTK.\n- Update syn.\n- Add a [roadmap](./ROADMAP.md) for the project.\n\n\n## [0.8.8] - 2020-09-19\n### Changes\n- Fix typos, thanks @nicolasbauw \n- Add DisplayExt::style_buffer().\n- Fix wrapper bug which ignored return values.\n- Update FLTK.\n- Impl Send and Sync for FltkError.\n- Remove opaque type StyleTables.\n- BrowserExt::set_column_widths() takes a static slice.\n\n## [0.8.7] - 2020-09-14\n### Changes\n- Accept AsRef<Path> where &Path was previously required.\n- Update FLTK.\n- Update deps.\n\n## [0.8.6] - 2020-09-09\n### Changes\n- Add null check on C++ side when loading fonts.\n- Update FLTK.\n- Add doc comments on MenuExt::add() labels.\n\n## [0.8.5] - 2020-09-04\n### Changes\n- Add App::load_font() to load a font from a path.\n- Update build.rs to reflect latest FLTK cmake options.\n\n## [0.8.4] - 2020-09-01\n### Changes\n- Remove potentially failing internal unwraps.\n\n## [0.8.3] - 2020-08-21\n### Changes\n- Update FLTK.\n- Update syn.\n- Clean up examples.\n- Add fltk-sys example.\n- Restructure C wrapper.\n- Rename enum InputType field value InputType to Input.\n\n## [0.8.2] - 2020-08-21\n### Changes\n- Add experimental no-images feature flag.\n- cfltk and fltk are compiled with no-rtti and no-exceptions.\n- Override placement new in cfltk.\n- Add note on exception-safety in FAQ.\n- mark app::set_raw_callback as unsafe.\n- Add static widget, buffer and image deletion functions.\n- Fixed typo app::dispaly -> app::display (Thanks @DBLouis).\n- Remove default linkage to C++ std library.\n\n## [0.8.1] - 2020-08-13\n### Changes\n- Add app::set_raw_callback() which avoids boxing callbacks.\n- Update FLTK to after commit cd26829 which adds MacOS 11.0 support.\n- Add missing docs for callback arguments.\n- Add TextBuffer::save_file().\n- Use expect() in the build script to give meaningful messages on missing dependencies.\n\n## [0.8.0] - 2020-08-02\n### Changes\n- Make fltk-sys no_std.\n- Add feature flag \"enable-glwindow\".\n- Remove feature flag \"no-opengl\".\n- Separate raw opengl functions into their own crate \"glu-sys\".\n- Add DoubleWindow::flush().\n- Update dependencies (syn to 1.0.36).\n\n## [0.7.26] - 2020-08-01\n### Changes\n- Add alias Scheme to AppScheme.\n- Add WindowExt::fullscreen_active() and WindowExt::iconize().\n- Update FLTK.\n\n\n## [0.7.25] - 2020-07-30\n### Changes\n- Fix WindowExt::raw_handle() method on systems where `unsigned long int` is u32.\n- Make several free functions in the app module public.\n\n## [0.7.24] - 2020-07-29\n### Changes\n- Add convenience functions dialog::file_chooser() and dialog::dir_chooser().\n- Add color_chooser() convenience function.\n- Add dialog::FileChooser::window().\n- impl BitOr for dialog::FileChooserType.\n- Add WidgetExt::set_pos and WidgetExt::set_size.\n\n## [0.7.23] - 2020-07-28\n### Changes\n- Add Fltk's own FileChooser. In addition to the already available native FileDialog.\n- Add app::wait_for(dur: f64).\n\n## [0.7.22] - 2020-07-25\n### Changes\n- Add impl BitOr<Key> for Shortcut.\n- Change impl Add to impl BitOr for Shortcut.\n- Add Shortcut::from_key() and Shortcut::from_i32().\n\n## [0.7.21] - 2020-07-24\n### Changes\n- Add Window::show_with_args() and show_with_env_args() for FLTK specific command-line arguments.\n- Add FrameType::by_index().\n- Add some missing asserts.\n\n## [0.7.20] - 2020-07-23\n### Changes\n- Add missing docs for new TextEditor functions.\n- Add SingleWindow widget.\n- Add more FileBrowser methods.\n\n## [0.7.19] - 2020-07-22\n### Changes\n- Add Pixmap.\n- Use high res GL on MacOS by default when OpenGL is supported.\n- Add more Tabs methods.\n- Add rest of TextEditor methods.\n- Move LineStyle to draw module.\n- Move ChartType to misc module.\n\n## [0.7.18] - 2020-07-20\n### Changes\n- Allow getting the fl_display and fl_gc globabl variables.\n- Add null checks for methods acquiring and requiring raw handles.\n\n## [0.7.17] - 2020-07-19\n### Changes\n- Add several more image types.\n- Add SysMenuBar widget.\n- Add WindowExt::region and set_region methods.\n\n## [0.7.16] - 2020-07-17\n### Changes\n- Change interface of raw handles to return and accept RawHandle (HWND on windows, NSWindow on macos, Xid on X11).\n- Rename Window::from_raw_handle() to Window::find_by_handle().\n- Add event coordinate getters relative to the screen position of the cursor.\n\n## [0.7.15] - 2020-07-16\n### Changes\n- Add fl_find(Window xid) as Window::from_raw_handle().\n- Add RawWindowHandle as a wrapper around an opaque type.\n\n## [0.7.14] - 2020-07-12\n### Changes\n- FLTK update.\n- Add ScrollType enum.\n- Update versions of syn, quote and cmake.\n- Add Scroll::scrollbar() and Scroll::hscrollbar().\n- Add BrowserExt::scrollbar() and BrowserExt::hscrollbar().\n\n## [0.7.13] - 2020-07-10\n### Changes\n- Add missing stdint.h header at cfl.cpp.\n- Expose unsafe TableExt::draw_cell_data() and set_draw_cell_data() methods.\n\n## [0.7.12] - 2020-07-05\n### Changes\n- Refactoring.\n- Add ``` # Safety``` to docs.\n- Add to readme and faq.\n- Fix \"save as\" in the editor example.\n\n## [0.7.11] - 2020-07-04\n### Changes\n- Fixed Chart colors.\n\n## [0.7.10] - 2020-07-03\n### Changes\n- MenuItem::new now takes a slice instead of a vector.\n\n## [0.7.9] - 2020-06-30\n### Changes\n- Add exception checks in callbacks.\n\n## [0.7.8] - 2020-06-29\n### Changes\n- Add app::belowmouse, pushed and focus functions.\n- Add functions to query FLTK's api and abi versions.\n\n## [0.7.7] - 2020-06-28\n### Changes\n- Remove Copy trait from TextBuffer and Images since it was potentially unsound.\n- Rename TextBuffer::copy to copy_from to avoid conflict with copy method which does a deep copy.\n\n## [0.7.6] - 2020-06-27\n### Changes\n- Deprecate App::set_scheme in favor of App::with_scheme.\n\n\n## [0.7.5] - 2020-06-26\n### Changes\n- Change char flags to return raw::c_char instead of i8/u8.\n- Add is_ascii assert for set_column_char and set_format_char.\n- Add missing docs for BrowserExt methods.\n- Add None to BrowserScrollbar Enum.\n- Rename BrowserScrollBar to BrowserScrollbar.\n- Remove redundancies in WidgetType enum values.\n\n## [0.7.4] - 2020-06-25\n### Changes\n- Add several missing methods to BrowserExt methods.\n\n## [0.7.3] - 2020-06-24\n### Changes\n- Added PackType which can be used with the Pack widget.\n\n## [0.7.2] - 2020-06-23\n### Changes\n- Clean up fonts interface. Add example on how to use system fonts.\n- Add app::delay() which delays the execution of the application.\n- Add missing docs.\n\n## [0.7.1] - 2020-06-22\n### Changes\n- Add asserts around TextBuffer operations.\n\n## [0.7.0] - 2020-06-21\n### Changes\n- Change interface for working with images. Now widgets take an Option<ImageExt>. This allows unsetting images.\n- Remove unnecessary copy when setting a widget image.\n- Add deimage and set_deimage methods to WidgetExt.\n- The DisplayExt::set_buffer() takes an optional buffer, this allows unsetting the buffer.\n- The DisplayExt widgets have the same constructors as other widgets.\n- Fixed TextBuffer load_file method.\n- Added assert to length of style entries.\n\n## [0.6.9] - 2020-06-20\n### Changes\n- Fix image deletion.\n- Add asserts to check if an image was deleted.\n- Add note on image lifetimes in relation to widgets.\n\n## [0.6.8] - 2020-06-19\n### Changes\n- Give image type specialized drop impls.\n\n## [0.6.7] - 2020-06-18\n### Changes\n- Provide unsafe variant for widget deletion, which would delete user_data recursively for when needed.\n- Improve docs about TableRow.\n\n## [0.6.6] - 2020-06-17\n### Changes\n- RgbImage takes ownership of the underlying data.\n- Remove gl_start and gl_finish.\n- Add App::set_visual(Mode), app::own_colormap, app::set_focus.\n- Fix Cursor naming.\n- Update FLTK to commit 5005d04 for further SVG fixes.\n- Add TableExt::draw_cell and TableContext.\n- Rename Align enum members.\n\n## [0.6.5] - 2020-06-16\n### Changes\n- Fix cmake invocation on Windows to build for release.\n- Add most ImageExt methods.\n- Change signature of draw::write_<image>_file to accept ImageExt trait.\n- SharedImage::from_image() can't take ownership of the image.\n- Add BMP, Jpeg and PNG image conversion methods.\n- Update FLTK to commit 46b8968 which fixes Fl_SVG_Image to window icon issue.\n- Add damage related methods to WidgetExt.\n- Add gl_start and gl_finish to enable gl drawing within widgets.\n\n## [0.6.4] - 2020-06-15\n### Changes\n- Rename SharedImage::from_rgb to from_image.\n- Add count method to ImageExt.\n- Modify visibility of internal image methods.\n- ImageExt::to_rgb_data marked as unsafe.\n- Added ImageExt::to_rgb_image.\n- Update FLTK to commit b831848.\n- Add assert for WindowExt::set_icon() supported image types.\n\n## [0.6.3] - 2020-06-13\n### Changes\n- Fix memory leak with set_image and set_icon methods.\n- Mark Image::into<ImageExt>() as unsafe.\n\n## [0.6.2] - 2020-06-12\n### Changes\n- Mark Widget::into<WidgetExt>() as unsafe.\n- Add App::windows() method which returns an optional Vector of the application's windows.\n- Widget deletion calls app::delete_widget instead of raw delete.\n- Add add_emit and insert_emit to MenuExt, also emit to MenuItem.\n- Add support for systems without OpenGL using the no-opengl feature flag.\n\n## [0.6.1] - 2020-06-10\n### Changes\n- Initialize internal FLTK styles on application start.\n- Fix use of uninitialized data.\n- Remove deprecate set_style_table_entry method, which was replaced by set_highlight_data.\n- Impl Copy for the TextBuffer.\n- Add WindowExt border and set_border methods.\n- Add is_radio and is_checkbox methods to MenuItem.\n- Remove WidgetType trait from LabelType and FrameType.\n\n## [0.5.12] - 2020-06-08\n### Changes\n- Add TextBuffer::unset_buffer() method.\n- Deprecated DisplayExt::set_style_table_entry, use set_highlight_data instead.\n\n## [0.5.11] - 2020-06-04\n### Changes\n- DisplayExt::buffer just returns a manually managed buffer.\n- Automatically export fltk::prelude and fltk::enums into the fltk namespace.\n\n## [0.5.10] - 2020-06-02\n### Changes\n- Fixed typos in method names.\n- Fixed use-after-free of TextDisplay StyleTableEntry.\n- Enable manual memory management of the style table entry when necessary.\n- Add clean way to quit application using App::quit().\n- Revert the DisplayExt buffer method to returning a reference.\n\n## [0.5.9] - 2020-06-02 -- YANKED\n### Changes\n- Fixed typos in method names.\n- Fixed use-after-free of TextDisplay StyleTableEntry.\n- Make TextBuffer semantics clearer using ManuallyDrop for all methods taking and returning a TextBuffer.\n- Enable manual memory management of the style table entry when necessary.\n- Add clean way to quit application using App::quit().\n- Revert the DisplayExt buffer method to returning a reference.\n\n## [0.5.8] - 2020-06-02 -- YANKED\n### Changes\n- Fixed typos in method names.\n- Fixed use-after-free of TextDisplay StyleTableEntry.\n- Make TextBuffer semantics clearer using ManuallyDrop for all methods taking and returning a TextBuffer.\n- Enable manual memory management of the style table entry when necessary.\n- Add clean way to quit application using App::quit().\n\n## [0.5.7] - 2020-06-01\n### Changes\n- Add support for windows-gnu fltk-bundled builds.\n- Update to latest FLTK.\n- Add positions to common dialogs which are now supported by FLTK.\n\n## [0.5.6] - 2020-05-31\n### Changes\n- Complete methods for the SimpleTerminal struct.\n- Add proper cleanup for draw callbacks\n\n## [0.5.5] - 2020-05-30\n### Changes\n- Add checks for menu clear and clear_submenu operations.\n- Add checks for tree clear operations.\n- Add MenuExt::remove.\n- Important fix to menu item set_label method.\n\n## [0.5.4] - 2020-05-30\n### Changes\n- Add more checks for widget deletion.\n- Add cleanup after menu deletion.\n- Remove redundant delete_widget function.\n- Add method to iterate menus.\n- Add a safe variant to delete and unset callbacks.\n- Calls to widget::clear will automatically delete allocated user_data.\n- Mark clear methods not acting on FLTK widgets as unsafe.\n\n## [0.5.3] - 2020-05-29\n### Changes\n- Add a method to unset callbacks.\n- Fix double free after acquiring user_data.\n- Add a tracker pointer to all widgets.\n- Check for use after widget deletion for all operations on widgets.\n\n## [0.5.2] - 2020-05-28\n### Changes\n- Add Fl_Scroll methods.\n- Mark GroupExt clear method as unsafe since it could invalidate underlying widgets.\n- Add WidgetExt unsafe methods to acquire user_data and manually delete widgets.\n- Add WidgetExt focus methods.\n\n## [0.5.1] - 2020-05-26\n### Changes\n- Added several methods to MenuExt and Pack.\n- Relax callback restrictions.\n- Give some more descriptive names for draw methods.\n- Revert back to C++11 for the wrapper.\n- Allow for custom widget creation, along with example.\n\n## [0.5.0] - 2020-05-26\n### Changes\n- Image constructors return a Result instead of an Option for all ops.\n- Impl Clone for widgets, since they have interior mutability (basically Arc<Mutex<widget>> on the C++ side).\n- Systematically return Error when FLTK (C++) returns Error code.\n- Add emit method for widgets which take a app::Sender and a message to allow for message passing and shorted callback function. \n- Added the rest of the horizontal valuator widgets.\n- Methods return raw pointers are marked as unsafe.\n- Impl Error for FltkError.\n\n## [0.4.13] - 2020-05-25\n### Changes\n- Add support for bundled fltk via the fltk-bundled feature flag.\n- Several fixes to Offscreen and GlWindow methods.\n\n## [0.4.12] - 2020-05-24\n### Changes\n- Translate gl functions exposed via fltk.\n- Add mode and set_mode to GlWindow.\n- Prefer platfrom gl header.\n\n## [0.4.11] - 2020-05-23\n### Changes\n- Prefix all draw methods with draw_.\n- Add a SharedImage struct.\n- Add shown() and raw_handle() methods to WindowExt trait.\n\n## [0.4.10] - 2020-05-22\n### Changes\n- Remove the necessity for the gl-window feature flag, however on Linux distros, OpenGL headers must be installed.\n- Add several handler methods (delete_widget, event_inside_widget, event_inside).\n- Add app::delete_widget() for safe widget deletion during event handling.\n- Require a C++17 compiler to deal with msvc issues.\n- Fix GlWindow conditional compilation.\n- Fix GLU linkage on Linux.\n- Fix memory leaks from CString.\n- Remove unintentional debug message.\n\n## [0.4.9] - 2020-05-21 (YANKED)\n### Changes\n- Remove the necessity for the gl-window feature flag, however on Linux distros, OpenGL headers must be installed.\n- Add several handler methods (delete_widget, event_inside_widget, event_inside).\n- Add app::delete_widget() for safe widget deletion during event handling.\n- Require a C++17 compiler to deal with msvc issues.\n- Fix GlWindow conditional compilation.\n- Fix GLU linkage on Linux.\n\n## [0.4.8] - 2020-05-20 (YANKED)\n### Changes\n- Add several handler methods (delete_widget, event_inside_widget, event_inside).\n- Add app::delete_widget() for safe widget deletion during event handling.\n- Require a C++17 compiler to deal with msvc issues.\n- Fix GlWindow conditional compilation.\n- Fix GLU linkage on Linux.\n\n## [0.4.7] - 2020-05-20\n### Changes\n- Add GlWindow under gl-window feature flag.\n- Add draw::show_colormap.\n- Add draw methods.\n- Add set_cursor method for window types.\n\n## [0.4.6] - 2020-05-20\n### Changes\n- Add get_items() method to Tree widget.\n- Add support for loading images from data/memory using the from_data() method.\n- impl Send and Sync for TreeItem and MenuItem.\n- Renamed ImageExt to_bytes to to_rgb which is more approprate.\n- Added more button and valuator widgets.\n- Add scale method to images.\n\n## [0.4.5] - 2020-05-19\n### Changes\n- Require Rust 1.38 or higher.\n- Use type hashing for channels.\n- Add support for Trees and TreeItems.\n- Add feature to support legacy OpenGL.\n\n## [0.4.4] - 2020-05-15\n### Changes\n- Added wrapper for program_should_quit signal.\n- Free user data after widget destruction.\n- Added beeps.\n- Require channel messages to also be Send and Sync.\n\n## [0.4.3] - 2020-05-13\n### Changes\n- Mark internal traits as unsafe.\n- Fix operator widget*().\n- Add excludes to Cargo.toml.\n\n## [0.4.2] - 2020-05-10\n### Changes\n- Added timeout callback functions to the app module.\n- Added features to use system libjpeg, libpng and zlib instead of bundled ones.\n- Added initial support for Drag and Drop operations\n\n## [0.4.1] - 2020-05-07\n### Changes\n- Fix documentation\n\n## [0.4.0] - 2020-05-07\n### Changes\n- Reinstated hard requirement of of Copy for sent messages.\n- Change Image::new to Image::load when it involves getting an image from the filesystem.\n- Make methods involved in loading file return Result.\n\n## [0.3.12] - 2020-05-05\n### Changes\n- Removed hard requirement of of Copy for sent messages.\n- Fix some methods taking an immutable reference to widgets\n\n## [0.3.11] - 2020-05-03\n### Changes\n- Made app::awake_msg and app::thread_msg private, and are only exposed via app::channel<T>(), where T must implement Copy.\n- Added async_std and tokio examples in the examples directory.\n- Added CHANGELOG.md to the repository.\n- Added FAQ.md to the repository.\n\n## [0.3.10] - 2020-05-02\n### Changes\n- Added app::add_handler() to handle unhandled events, this takes a non-capturing closure.\n- Removed deprecated description() method in FltkError.\n- Added app::channel<T>() as well as app::awake_msg and app::thread_msg.\n- Added clear and clear_submenu to MenuExt\n\n## [0.3.9] - 2020-04-29\n### Changes\n- Completed ButtonExt methods and checks.\n- Added impl methods for certain button checks (is_checked, is_toggled...etc).\n"
        },
        {
          "name": "CODE_OF_CONDUCT.md",
          "type": "blob",
          "size": 3.283203125,
          "content": "# Contributor Covenant Code of Conduct\n\n## Our Pledge\n\nIn the interest of fostering an open and welcoming environment, we as\ncontributors and maintainers pledge to making participation in our project and\nour community a harassment-free experience for everyone, regardless of age, body\nsize, disability, ethnicity, sex characteristics, gender identity and expression,\nlevel of experience, education, socio-economic status, nationality, personal\nappearance, race, religion, or sexual identity and orientation.\n\n## Our Standards\n\nExamples of behavior that contributes to creating a positive environment\ninclude:\n\n* Using welcoming and inclusive language\n* Being respectful of differing viewpoints and experiences\n* Gracefully accepting constructive criticism\n* Focusing on what is best for the community\n* Showing empathy towards other community members\n\nExamples of unacceptable behavior by participants include:\n\n* The use of sexualized language or imagery and unwelcome sexual attention or\n advances\n* Trolling, insulting/derogatory comments, and personal or political attacks\n* Public or private harassment\n* Publishing others' private information, such as a physical or electronic\n address, without explicit permission\n* Other conduct which could reasonably be considered inappropriate in a\n professional setting\n\n## Our Responsibilities\n\nProject maintainers are responsible for clarifying the standards of acceptable\nbehavior and are expected to take appropriate and fair corrective action in\nresponse to any instances of unacceptable behavior.\n\nProject maintainers have the right and responsibility to remove, edit, or\nreject comments, commits, code, wiki edits, issues, and other contributions\nthat are not aligned to this Code of Conduct, or to ban temporarily or\npermanently any contributor for other behaviors that they deem inappropriate,\nthreatening, offensive, or harmful.\n\n## Scope\n\nThis Code of Conduct applies both within project spaces and in public spaces\nwhen an individual is representing the project or its community. Examples of\nrepresenting a project or community include using an official project e-mail\naddress, posting via an official social media account, or acting as an appointed\nrepresentative at an online or offline event. Representation of a project may be\nfurther defined and clarified by project maintainers.\n\n## Enforcement\n\nInstances of abusive, harassing, or otherwise unacceptable behavior may be\nreported by contacting the project team at mohammed.alyousef@neurosrg.com. All\ncomplaints will be reviewed and investigated and will result in a response that\nis deemed necessary and appropriate to the circumstances. The project team is\nobligated to maintain confidentiality with regard to the reporter of an incident.\nFurther details of specific enforcement policies may be posted separately.\n\nProject maintainers who do not follow or enforce the Code of Conduct in good\nfaith may face temporary or permanent repercussions as determined by other\nmembers of the project's leadership.\n\n## Attribution\n\nThis Code of Conduct is adapted from the [Contributor Covenant][homepage], version 1.4,\navailable at https://www.contributor-covenant.org/version/1/4/code-of-conduct.html\n\n[homepage]: https://www.contributor-covenant.org\n\nFor answers to common questions about this code of conduct, see\nhttps://www.contributor-covenant.org/faq\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 5.1337890625,
          "content": "## Contributing\n\nContributions are very welcome! Even if just for submitting bug fixes, improving the documentation, adding tests and/or examples.\n\n### Contributing to the wrapper\nThe wrapper itself now lives in the cfltk [repo](https://github.com/MoAlyousef/cfltk) as a git submodule in the fltk-sys directory, it uses C89 for the headers (in the cfltk/include directory) and C++17 for the source files (in the cfltk/src directory). \nBindgen is used on the header files using the bind.sh script. It's not added as dependency to this project since it depends on libclang and \nllvm and which add to the build complexity. As such, code added into the header files should be cross-platform and not depend on system pecularities or system headers (ifdefs are acceptable).  \nC89 was chosen for the headers since bindgen works best with them. \nIt's possible to contribute by directly modifying the .rs files in the fltk-sys directory. Or just running the bind.sh or the bind.sh line corresponding the header unit being modified, and all headers depending on it (for example cfl_window.h includes cfl_group.h).\nFor the C/C++ code, the supplied clang-format formatting is used.\nFLTK's source code lives within cfltk/fltk also as a git submodule. The intention of the wrapper is to only expose the non-deprecated gui parts of the public api which lives in the fltk/FL directory. The reasoning is that the non-gui parts can be replaced by crates from the Rust ecosystem, and the deprecated parts aren't really needed since no Rust software depends on them. Also no modifications should be done there unless it's git pulling the latest master branch from the FLTK repo. \n\n### Contributing to the bindings\nFLTK itself is quite conservative when using features, it does so to get the high portability its known for. As such, similarly the Rust code shouldn't use nightly or unstable features. The current MSRV (Minimum Supported Rust Version) is 1.39 (bound to change when necessary). Avoid pulling other dependencies except when necessary. The dependencies themselves need the same MSRV or lower and be cross-platform, or guarded behind conditional compilation config.\nDoc comments would also be appreciated, the rustc warning for missing_docs is enabled by default. rustfmt is used for formatting. Pull requests automatically go to the github workflow in which \nthe crate is built on the major desktop platforms, along with all the examples.\nThe bindings live in the fltk and fltk-derive directories. The fltk-derive provides derive macros which are intended to be internal to the fltk project. FLTK depends on inheritance to represent relationships between widgets, and these are easier done with derive macros in Rust, thus it's used to implement all widget trait methods. They also reduce repetition in code. \nThe fltk directory contains a prelude which has all the traits exposed by the crate, as well as the error types. Widgets are grouped by their inheritance relations, the outliers being the utils (for utility functions) and misc modules. The misc module contain widgets which are either composite (containing multiple) widgets or widgets directly inheriting from Fl_Widget. \n\n### Contributing examples \nEach example should be in a single file, with no dependencies to other than this crate. This allows people to just copy them verbatim and have the examples run, it also avoids adding unnecessary dev-dependencies to the project which might increase build times. If you would like to contribute more complex examples, I invite you to contribute them to the fltk-rs/demos [repo](https://github.com/fltk-rs/demos). Also adding your project or examples/demos using fltk as a dependency or dev-dependency to the Project Showcase issue tracker is also very appreciated. \n\n### Major API changes\nPlease open an issue or a discussion for such changes before going ahead and doing them. It allows for discussion regarding the proposed changes. \nThis crate tries to stay as close as possible to the FLTK api, which offers familiarity to people having used FLTK, \nand allows easier referral to the official documentation.\n\n### Typical workflow\nGiven the above info, a normal workflow to add a method to a certain button widget for example would entail adding the method wrapper to the corresponding header file cfl_button.h and an implementation in the cpp file cfl_button.cpp (both in fltk-rs/fltk-sys/cfltk). Running `$ ./fltk-sys/bind.sh` or just the corresponding line to the header file `$ bindgen --use-core --ctypes-prefix libc fltk-sys/cfltk/include/cfl_button.h -o fltk-sys/src/button.rs`. If the method is part of the Fl_Button (which corresponds to the the interface implemented by all button widgets), the method is added to the ButtonExt trait, with the implementation added to the fltk-derive/src/button.rs impl_button_trait derive macro. Otherwise it's added directly in the fltk/src/button.rs in the impl of the corresponding button widget. If the method requires special handling or could benefit from an example, add an example to the fltk/examples directory or to the doc comment, showing a minimal example of using that method.\nRunning `cargo test` should test the added example whether it was added to the examples directory or the doc comment. \n"
        },
        {
          "name": "Cargo.toml",
          "type": "blob",
          "size": 0.0615234375,
          "content": "[workspace]\nmembers = [\n\t\"fltk\",\n\t\"fltk-sys\",\n]\nresolver = \"2\"\n"
        },
        {
          "name": "FAQ.md",
          "type": "blob",
          "size": 14.7978515625,
          "content": "# FAQ\n\n## Build issues\n\n### Why does the build fail when I follow one of the tutorials?\nThe first tutorial uses the fltk-bundled feature flag, which is only supported for certain platforms since these are built using the Github Actions CI, namely:\n- Windows 10 x64 (msvc and gnu).\n- MacOS 12 x64 and aarch64.\n- Ubuntu 20.04 or later, x64 and aarch64.\n\nIf you're not running one of the aforementioned platforms, you'll have to remove the fltk-bundled feature flag in your Cargo.toml file:\n```toml\n[dependencies]\nfltk = \"^1.5\"\n```\nFurthermore, the fltk-bundled flag assumes you have curl and tar installed (for Windows, they're available in the Native Tools Command Prompt).\n\n### Build fails on windows, why can't CMake find my toolchain?\nIf you're building using the MSVC toolchain, make sure you run your build (at least your initial build) using the Native Tools Command Prompt, which should appear once you start typing \"native\" in the start menu, choose the version corresponding to your installed Rust toolchain (x86 or x64). The Native Tools Command Prompt has all the environment variables set correctly for native development. [cmake-rs](https://github.com/alexcrichton/cmake-rs) which the bindings use might not be able to find the Visual Studio 2022 generator, in which case, you can try to use the fltk-bundled feature, or use ninja via the use-ninja feature. This requires installing [Ninja](https://github.com/ninja-build/ninja/wiki/Pre-built-Ninja-packages) which can be installed with Chocolatey, Scoop or manually.\n\nIf you're building for the GNU toolchain, make sure that Make is also installed, which usually comes installed in mingw64 toolchain.\n\n\n### Build fails on MacOS 11 with an Apple M1 chip, what can I do?\nIf you're getting \"file too small to be an archive\" error, you might be hitting this [issues](https://github.com/rust-lang/cargo/issues/8875) or this [issue](https://github.com/rust-lang/rust/issues/50220). MacOS's native C/C++ toolchain shouldn't have this issue, and can be installed by running `xcode-select --install` or by installing XCode. Make sure the corresponding Rust toolchain (aarch64-apple-darwin) is installed as well. You can uninstall other Rust apple-darwin toolchains or use cargo-lipo instead if you need universal/fat binaries.\n\n### Why do I get a Link error while using the mingw toolchain on windows?\nIf the linking fails because of this [issue](https://github.com/rust-lang/rust/issues/47048) with older toolchains, it should work by using the fltk-shared feature (an issue with older compilers). Which would also generate a dynamic library which would need to be deployed with your application.\n```toml\n[dependencies]\nfltk = { version = \"^1.5\", features = [\"fltk-shared\"] }\n```\n\n### Why does my msys2 mingw built fltk app using, fltk-bundled, isn't self-contained and requires several dlls?\nIf you have installed libgdiplus via pacman, it would require those dependencies on other systems. If you're using the windows sdk-provided libgdiplus, it shouldn't require extra dlls. You can either uninstall libgdiplus that was installed via pacman, or or you can build using the feature flag: `no-gdiplus`.\n\n### Why do I get link errors when I use the system-fltk feature?\nThis crate targets FLTK 1.4, while currently most distros distribute an older version of FLTK (1.3.5). You can try to install FLTK (C++) by building from source.\n\n### Build fails on Arch linux because of pango or cairo?\nPango changed its include paths which caused build failures across many projects. There are 2 solutions:\n- Use the no-pango feature. Downsides: loss of rtl and cjk language support.\n- Set the CFLAGS and CXXFLAGS to correct the global include paths.\n```\n$ export CFLAGS=\"-isystem /usr/include/harfbuzz -isystem /usr/include/cairo\"\n$ export CXXFLAGS=\"-isystem /usr/include/harfbuzz -isystem /usr/include/cairo\"\n```\n\n### How do I force CMake to use a certain C++ compiler?\nFLTK works with all 3 major compilers. If you would like to change the C++ compiler that's chosen by default by CMake, you can change the CXX environment variable before running the build:\n```\n$ export CXX=/usr/bin/clang++\n$ cargo run\n```\nCMake caches the C++ compiler variable after it's first run, so if the above failed because of a previous run, you would have to run ```cargo clean``` or you can manually delete the CMakeCache.txt file in the build directory.\n\n### Can I accelerate the build speed?\nYou can use the \"use-ninja\" feature flag if you have ninja installed. \n\n### Can I cache a previous build of the FLTK library?\nYou can use the fltk-bundled feature and use either the CFLTK_BUNDLE_DIR or CFLTK_BUNDLE_URL to point to the location of your cached cfltk and fltk libraries.\n\n### How can I target FLTK 1.3?\nYou can't. Adding support in fltk-rs for FLTK 1.3 is non-trivial. However, interested parties can contribute to the repo if such effort is needed.\n\n## Deployment\n\n### How do I deploy my application?\nRust, by default, statically links your application. FLTK is built also for static linking. That means that the resulting executable can be directly deployed without the need to deploy other files along with it. If you want to create a WIN32 application, Mac OS Bundle or Linux AppImage, please check the question just below!\n\n### Why do I get a console window whenever I start my GUI app?\nThis is the default behavior of the toolchain, and is helpful for debugging purposes. It can be turned off easily by adding ```#![windows_subsystem = \"windows\"]``` at the beginning of your main.rs file if you're on windows. \nIf you would like to keep the console window on debug builds, but not on release builds, you can use ```#![cfg_attr(not(debug_assertions), windows_subsystem = \"windows\")]``` instead.\n\nFor Mac OS and Linux, this is done by a post-build process to create a Mac OS Bundle or Linux AppImage respectively.\n\nSee [cargo-bundle](https://github.com/burtonageo/cargo-bundle) for an automated tool for creating Mac OS app bundles. \n\nSee [here](https://docs.appimage.org/packaging-guide/overview.html#converting-existing-binary-packages) for directions on creating an AppImage for Linux.\n\n### Why is the size of my resulting executable larger than I had expected?\nFLTK is known for it's small applications. Make sure you're building in release, and make sure symbols are stripped using the strip command in Unix-like systems. On Windows it's unnecessary since symbols would end up in the pdb file (which shouldn't be deployed).\n\nIf you need an even smaller size, try using opt-level=\"z\":\n```toml\n[profile.release]\nopt-level = \"z\"\nlto = true\ncodegen-units = 1\npanic = \"abort\"\n```\n\nNewer versions of cargo (>1.46) support automatically stripping binaries in the post-build phase:\n```toml\ncargo-features = [\"strip\"]\n\n[profile.release]\nstrip = true\nopt-level = \"z\"\nlto = true\ncodegen-units = 1\npanic = \"abort\"\n```\n\nFurthermore, you can build Rust's stdlib (which is statically linked to your application) optimized for size (it comes optimized for speed by default). More info on that [here](https://github.com/johnthagen/min-sized-rust)\n\n### Can I cross-compile my application to a mobile platform or WASM?\nFLTK currently doesn't support WASM nor iOS. It has experimental support for Android (YMMV). It is focused on desktop applications.\n\n## Licensing\n\n### Can I use this crate in a commercial application?\nYes. This crate has an MIT license which requires acknowledgment. FLTK (the C++ library) is licensed under the LGPL license with an exception allowing static linking for commercial/closed-source use. You can find the full terms of both licenses here:\n- [COPYING](https://github.com/fltk/fltk/blob/master/COPYING)\n- [LICENSE](https://github.com/fltk-rs/fltk-rs/blob/master/LICENSE)\n\n## Alignment\n\n### Why can't I align input or output text to the right?\nFLTK has some known issues with text alignment.\n\n## Concurrency\n\n### Do you plan on supporting multithreading or async/await?\nFLTK supports multithreaded and concurrent applications. See the examples dir and the [fltk-rs demos repo](https://github.com/fltk-rs/demos) for examples on usage with threads, messages, async_std and tokio (web-todo examples).\n\n### Should I explicitly call app::lock() and app::unlock()?\nfltk-rs surrounds all mutating calls to widgets with a lock on the C++ wrapper side. Normally you wouldn't have to call app::lock() and app::unlock(). \nThis depends however on the support of recursive mutexes in your system. \nIf you notice haning in multithreaded applications, you might have to initialize threads (like xlib threads) by calling app::lock() once in your main thread. \nIn that case, you can wrap widgets in an Arc<Mutex> or surround widget-mutating functions/methods with an app::lock and app::unlock. \nBut that should rarely be required.\n\n## Windowing\n\n### Why does FLTK exit when I hit the escape key?\nThis is the default behavior in FLTK. You can easily override it by setting a callback for your main window:\n```rust\n    wind.set_callback(|_| {\n        if fltk::app::event() == fltk::enums::Event::Close {\n            app::quit(); // Which would close using the close button. You can also assign other keys to close the application\n        }\n    });\n```\n\n## Panics/Crashes\n\n### My app panics when I try to handle events, how can I fix it?\nThis is due to a debug_assert which checks that the involved widget and the window are capable of handling events. Although most events would be handled correctly, some events require that the aforementioned conditions be met. Thus it is advisable to place your event handling code after the main drawing is done, i.e after calling your main window's show() method. Another point is that event handling and drawing should be done in the main thread. Panics accross FFI boundaries are undefined behavior, as such, the wrapper never throws. Furthermore, all panics which might arise in callbacks are caught on the Rust side using catch_unwind.\n\n## Memory and unsafety\n\n### How memory-safe is fltk-rs?\nThe callback mechanism consists of a closure as a void pointer with a shim which dereferences the void pointer into a function pointer and calls the function. This is technically undefined behavior, however most implementations permit it and it's the method used by most wrappers to handle callbacks across FFI boundaries. [link](https://rust-lang.github.io/unsafe-code-guidelines/layout/function-pointers.html#representation)\n\nAs stated before, panics accross FFI boundaries are undefined behavior, as such, the C++ wrapper never throws. Furthermore, all panics which might arise in callbacks are caught on the Rust side using catch_unwind.\n\nFLTK manages it's own memory. Any widget is automatically owned by a parent which does the book-keeping as well and deletion, this is the enclosing widget implementing GroupExt such as windws etc. This is done in the C++ FLTK library itself. Any constructed widget calls the current() method which detects the enclosing group widget, and calls its add() method rending ownership to the group widget. Upon destruction of the group widget, all owned widgets are freed. Also all widgets are wrapped in a mutex for all mutating methods, and their lifetimes are tracked using an Fl_Widget_Tracker, That means widgets have interior mutability as if wrapped in an Arc<Mutex<widget>> and have a tracking pointer to detect deletion. Cloning a widget performs a memcpy of the underlying pointer and allows for interior mutability; it does not create a new widget.\nImages are reference-counted. All mutating methods are wrapped in locks.\nThis locking might lead to some performance degradation as compared to the original FLTK library, it does allow for multithreaded applications, and is necessary in an FLTK (C++) application if it also required threading.\n\nOverriding drawing methods will box data to be sent to the C++ library, so the data should optimally be limited to widgets or plain old data types to avoid unnecessary leaks if a custom drawn widget might be deleted during the lifetime of the program.\n\n### Can I get memory leaks with fltk-rs?\nNon-parented widgets that can no longer be accessed are a memory leak. Otherwise, as mentioned in the previous section all parented widgets lifetimes' are managed by the parent.\nAn example of a leaking widget:\n```rust\nfn main() {\n    let a = app::App::default();\n    let mut win = window::Window::default();\n    win.end();\n    win.show();\n\n    {\n        button::Button::default(); // this leaks since it's not parented by the window, and has no handle in main\n    }\n}\n```\n\nA more subtle cause of leaks, is removing a widget from a group, then the scope ends without it being added to another group or deleted:\n```rust\nfn main() {\n    let a = app::App::default();\n    let mut win = window::Window::default();\n    {\n        button::Button::default(); // This doesn't leak since the parent is the window\n    }\n    win.end();\n    win.show();\n\n    {\n        win.remove_by_index(0); // the button leaks here since it's removed and we no longer have access to it\n    }\n}\n```\n\n### Why is fltk-rs using so much unsafe code?\nInterfacing with C++ or C code can't be reasoned about by the Rust compiler, so the unsafe keyword is needed.\n\n### Is fltk-rs panic/exception-safe?\nFLTK (C++) doesn't throw exceptions, neither do the C wrapper (cfltk) nor the fltk-sys crate. The higher level fltk crate, which wraps fltk-sys, is not exception-safe since it uses asserts internally after various operations to ensure memory-safety. An example is a widget constructor which checks that the returned pointer (from the C++ side) is not null from allocation failure. It also asserts all widget reads/writes are happening on valid (not deleted) widgets.\nAlso any function sending a string across FFI is checked for interal null bytes. For such functions, the developer can perform a sanity check on passed strings to make sure they're valid UTF-8 strings, or check that a widget was not deleted prior to accessing a widget. That said, all functions passed as callbacks to be handled by the C++ side are exception-safe.\n\n### Are there any environment variables which can affect the build or behavior?\n- `CFLTK_TOOLCHAIN=<path>` allows passing the path to a CMake file acting as a CMAKE_TOOLCHAIN_FILE, this allows passing extra info to cmake if needed.\n- `CFLTK_WAYLAND_ONLY=<1 or 0>` allows building for wayland only without directly linking X11 libs nor relying on their headers for the build process. This only works with the `use-wayland` feature flag.\n- `CFLTK_BUNDLE_DIR=<path>` allows passing a path of prebuilt cfltk and fltk static libs, useful for when a customized build of fltk is needed, or for targetting other arches when building with the `fltk-bundled` flag.\n- `CFLTK_BUNDLE_URL=<url>` similar to above but allows passing a url which will directs the build script to download from the passed url.\n- `FLTK_BACKEND=<x11 or wayland>` allows choosing the backend of your hybrid X11/wayland FLTK app. This only works for apps built with `use-wayland` feature flag. \n\n## Contributing\nPlease refer to the [CONTRIBUTING](https://github.com/fltk-rs/fltk-rs/blob/master/CONTRIBUTING.md) page for further information.\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.05078125,
          "content": "MIT License\n\nCopyright © 2021 The fltk-rs Authors.\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 21.537109375,
          "content": "# fltk-rs\n\n[![Documentation](https://docs.rs/fltk/badge.svg)](https://docs.rs/fltk)\n[![Crates.io](https://img.shields.io/crates/v/fltk.svg)](https://crates.io/crates/fltk)\n[![License](https://img.shields.io/crates/l/fltk.svg)](https://github.com/fltk-rs/fltk-rs/blob/master/LICENSE)\n[![Build](https://github.com/fltk-rs/fltk-rs/workflows/Build/badge.svg?branch=master)](https://github.com/fltk-rs/fltk-rs/actions)\n\n\nRust bindings for the FLTK 1.4 Graphical User Interface library. \n\nThe fltk crate is a cross-platform lightweight gui library which can be statically linked to produce small, self-contained and fast gui applications.\n\nResources:\n- [Book](https://fltk-rs.github.io/fltk-book/)\n- [本書的中文翻譯](https://flatig.vip/fltk-book-zh)\n- [Documentation](https://docs.rs/fltk)\n- [Videos](https://github.com/fltk-rs/fltk-rs#tutorials)\n- [Discussions](https://github.com/fltk-rs/fltk-rs/discussions)\n- [Examples](https://github.com/fltk-rs/fltk-rs/tree/master/fltk/examples)\n- [Demos](https://github.com/fltk-rs/demos)\n- [7guis-fltk-rs](https://github.com/tdryer/7guis-fltk-rs)\n- [FLTK-RS-Examples](https://github.com/wyhinton/FLTK-RS-Examples)\n- Erco's FLTK cheat [page](http://seriss.com/people/erco/fltk/), which is an excellent FLTK C++ reference. \n\nWhy choose FLTK?\n- Lightweight. Small binary, around 1mb after stripping. [Small memory footprint](https://szibele.com/memory-footprint-of-gui-toolkits/).\n- Speed. Fast to install, fast to build, fast at startup and fast at runtime. \n- Single executable. No DLLs to deploy.\n- Supports old architectures. \n- FLTK's permissive license which allows static linking for closed-source applications.\n- Themeability (5 supported schemes: Base, GTK, Plastic, Gleam and Oxy), and additional theming using [fltk-theme](https://crates.io/crates/fltk-theme).\n- Provides around 80 customizable widgets. \n- Has inbuilt image support.\n\nHere is a [list](https://en.wikipedia.org/wiki/FLTK#Use) of software using FLTK. For software using fltk-rs, check [here](https://github.com/fltk-rs/fltk-rs/issues/418).\n\n- [Link](https://github.com/fltk/fltk) to the official FLTK repository.\n- [Link](https://www.fltk.org/doc-1.4/index.html) to the official documentation.\n\n## Usage\n\nJust add the following to your project's Cargo.toml file:\n\n```toml\n[dependencies]\nfltk = \"^1.5\"\n```\nTo use the latest changes in the repo:\n```toml\n[dependencies]\nfltk = { version = \"^1.5\", git = \"https://github.com/fltk-rs/fltk-rs\" }\n```\nOr if you have other depenendencies which depend on fltk-rs:\n```toml\n[dependencies]\nfltk = \"^1.5\"\n\n[patch.crates-io]\nfltk = { git = \"https://github.com/fltk-rs/fltk-rs\" }\n```\n\nTo use the bundled libs (available for x64 windows (msvc & gnu (msys2-mingw)), x64 & aarch64 linux & macos):\n```toml\n[dependencies]\nfltk = { version = \"^1.5\", features = [\"fltk-bundled\"] }\n```\n\nThe library is automatically built and statically linked to your binary.\n\nAn example hello world application:\n\n```rust,no_run\nuse fltk::{app, prelude::*, window::Window};\n\nfn main() {\n    let app = app::App::default();\n    let mut wind = Window::new(100, 100, 400, 300, \"Hello from rust\");\n    wind.end();\n    wind.show();\n    app.run().unwrap();\n}\n```\n\nAnother example showing the basic callback functionality:\n```rust,no_run\nuse fltk::{app, button::Button, frame::Frame, prelude::*, window::Window};\n\nfn main() {\n    let app = app::App::default();\n    let mut wind = Window::new(100, 100, 400, 300, \"Hello from rust\");\n    let mut frame = Frame::new(0, 0, 400, 200, \"\");\n    let mut but = Button::new(160, 210, 80, 40, \"Click me!\");\n    wind.end();\n    wind.show();\n    but.set_callback(move |_| frame.set_label(\"Hello World!\")); // the closure capture is mutable borrow to our button\n    app.run().unwrap();\n}\n```\nPlease check the [examples](https://github.com/fltk-rs/fltk-rs/tree/master/fltk/examples) directory for more examples.\nYou will notice that all widgets are instantiated with a new() method, taking the x and y coordinates, the width and height of the widget, as well as a label which can be left blank if needed. Another way to initialize a widget is using the builder pattern: (The following buttons are equivalent)\n\n```rust,no_run\nuse fltk::{button::Button, prelude::*};\nlet but1 = Button::new(10, 10, 80, 40, \"Button 1\");\n\nlet but2 = Button::default()\n    .with_pos(10, 10)\n    .with_size(80, 40)\n    .with_label(\"Button 2\");\n```\n\nAn example of a counter showing use of the builder pattern:\n```rust,no_run\nuse fltk::{app, button::Button, frame::Frame, prelude::*, window::Window};\nfn main() {\n    let app = app::App::default();\n    let mut wind = Window::default()\n        .with_size(160, 200)\n        .center_screen()\n        .with_label(\"Counter\");\n    let mut frame = Frame::default()\n        .with_size(100, 40)\n        .center_of(&wind)\n        .with_label(\"0\");\n    let mut but_inc = Button::default()\n        .size_of(&frame)\n        .above_of(&frame, 0)\n        .with_label(\"+\");\n    let mut but_dec = Button::default()\n        .size_of(&frame)\n        .below_of(&frame, 0)\n        .with_label(\"-\");\n    wind.make_resizable(true);\n    wind.end();\n    wind.show();\n    /* Event handling */\n    app.run().unwrap();\n}\n```\n\nAlternatively, you can use Flex (for flexbox layouts), Pack or [Grid](https://github.com/fltk-rs/fltk-grid):\n```rust,no_run\nuse fltk::{app, button::Button, frame::Frame, group::Flex, prelude::*, window::Window};\nfn main() {\n    let app = app::App::default();\n    let mut wind = Window::default().with_size(160, 200).with_label(\"Counter\");\n    let mut flex = Flex::default().with_size(120, 140).center_of_parent().column();\n    let mut but_inc = Button::default().with_label(\"+\");\n    let mut frame = Frame::default().with_label(\"0\");\n    let mut but_dec = Button::default().with_label(\"-\");\n    flex.end();\n    wind.end();\n    wind.show();\n    app.run().unwrap();\n}\n```\n\nAnother example:\n```rust,no_run\nuse fltk::{app, button::Button, frame::Frame, group::Flex, prelude::*, window::Window};\n\nfn main() {\n    let app = app::App::default();\n    let mut wind = Window::default().with_size(400, 300);\n    let mut col = Flex::default_fill().column();\n    col.set_margins(120, 80, 120, 80);\n    let mut frame = Frame::default();\n    let mut but = Button::default().with_label(\"Click me!\");\n    col.fixed(&but, 40);\n    col.end();\n    wind.end();\n    wind.show();\n\n    but.set_callback(move |_| frame.set_label(\"Hello world\"));\n\n    app.run().unwrap();\n}\n```\n\n### Events\nEvents can be handled using the `set_callback` method (as above) or the available `fltk::app::set_callback()` free function, which will handle the default trigger of each widget(like clicks for buttons):\n```rust,ignore\n    /* previous hello world code */\n    but.set_callback(move |_| frame.set_label(\"Hello World!\"));\n    another_but.set_callback(|this_button| this_button.set_label(\"Works\"));\n    app.run().unwrap();\n```\nAnother way is to use message passing:\n```rust,ignore\n    /* previous counter code */\n    let (s, r) = app::channel::<Message>();\n\n    but_inc.emit(s, Message::Increment);\n    but_dec.emit(s, Message::Decrement);\n    \n    while app.wait() {\n        let label: i32 = frame.label().parse().unwrap();\n        if let Some(msg) = r.recv() {\n            match msg {\n                Message::Increment => frame.set_label(&(label + 1).to_string()),\n                Message::Decrement => frame.set_label(&(label - 1).to_string()),\n            }\n        }\n    }\n```\nFor the remainder of the code, check the full example [here](https://github.com/fltk-rs/fltk-rs/tree/master/fltk/examples/counter2.rs).\n\nFor custom event handling, the handle() method can be used:\n```rust,ignore\n    some_widget.handle(move |widget, ev: Event| {\n        match ev {\n            Event::Push => {\n                println!(\"Pushed!\");\n                true\n            },\n            /* other events to be handled */\n            _ => false,\n        }\n    });\n```\nHandled or ignored events using the handle method should return true, unhandled events should return false. More examples are available in the fltk/examples directory.\n\nFor an alternative event handling mechanism using an immediate-mode approach, check the [fltk-evented crate](https://crates.io/crates/fltk-evented).\n\n### Theming\n\nFLTK offers 5 application schemes:\n- Base\n- Gtk\n- Gleam\n- Plastic\n- Oxy\n\n(Additional theming can be found in the [fltk-theme](https://crates.io/crates/fltk-theme) crate)\n\nThese can be set using the `App::with_scheme()` method.\n```rust,ignore\nlet app = app::App::default().with_scheme(app::Scheme::Gleam);\n```\nThemes of individual widgets can be optionally modified using the provided methods in the `WidgetExt` trait, such as `set_color()`, `set_label_font()`, `set_frame()` etc:\n```rust,ignore\n    some_button.set_color(Color::Light1); // You can use one of the provided colors in the fltk enums\n    some_button.set_color(Color::from_rgb(255, 0, 0)); // Or you can specify a color by rgb or hex/u32 value\n    some_button.set_color(Color::from_u32(0xffebee));\n    some_button.set_frame(FrameType::RoundUpBox);\n    some_button.set_font(Font::TimesItalic);\n```\nFor default application colors, fltk-rs provides `app::background()`, `app::background2()` and `app::foreground()`. You can also specify the default application selection/inactive colors, font, label size, frame type, scrollbar size, menu line-spacing. Additionally the [fltk-theme](https://crates.io/crates/fltk-theme) crate offers some other predefined color maps (dark theme, tan etc) and widget themes which can be loaded into your application.\n\n## Build Dependencies\n\nRust (version > 1.63), CMake (version > 3.15), Git and a C++17 compiler need to be installed and in your PATH for a cross-platform build from source. [Ninja](https://github.com/ninja-build/ninja) is recommended, but not required. This crate also offers a bundled form of fltk on selected x86_64 and aarch64 platforms (Windows (msvc and gnu), MacOS, Linux), this can be enabled using the fltk-bundled feature flag as mentioned in the usage section (this requires curl and tar to download and unpack the bundled libraries).\n\n- Windows: \n    - MSVC: Windows SDK\n    - Gnu: No dependencies\n- MacOS: No dependencies.\n- Linux/BSD: X11 (and wayland for `use-wayland` feature flag) and OpenGL development headers need to be installed for development. The libraries themselves are normally available on linux/bsd distros with a graphical user interface.\n\nFor Debian-based GUI distributions, that means running:\n```bash\nsudo apt-get install libx11-dev libxext-dev libxft-dev libxinerama-dev libxcursor-dev libxrender-dev libxfixes-dev libpango1.0-dev libgl1-mesa-dev libglu1-mesa-dev\n```\nFor RHEL-based GUI distributions, that means running:\n```bash\nsudo yum groupinstall \"X Software Development\" && sudo yum install pango-devel libXinerama-devel libstdc++-static\n```\nFor Arch-based GUI distributions, that means running:\n```bash\nsudo pacman -S libx11 libxext libxft libxinerama libxcursor libxrender libxfixes pango cairo libgl mesa --needed\n```\nFor Alpine linux:\n```bash\napk add pango-dev fontconfig-dev libxinerama-dev libxfixes-dev libxcursor-dev mesa-gl\n```\nFor NixOS (Linux distribution) this `nix-shell` environment can be used:\n```bash\nnix-shell --packages rustc cmake git gcc xorg.libXext xorg.libXft xorg.libXinerama xorg.libXcursor xorg.libXrender xorg.libXfixes libcerf pango cairo libGL mesa pkg-config\n```\nFor Freebsd:\n```bash\npkg install -y cairo pango fontconfig freetype2 libX11 libXext libXfixes mesa-libs\n# building might require setting `CPATH=/usr/local/include` and `LIBRARY_PATH=$LIBRARY_PATH:/usr/local/lib\n```\n\n## Runtime Dependencies\n- Windows: None\n- MacOS: None\n- Linux: You need X11 libraries, as well as pango and cairo for drawing (and OpenGL if you want to enable the enable-glwindow feature):\n```bash\napt-get install -qq --no-install-recommends libx11-6 libxinerama1 libxft2 libxext6 libxcursor1 libxrender1 libxfixes3 libcairo2 libpango-1.0-0 libpangocairo-1.0-0 libpangoxft-1.0-0 libglib2.0-0 libfontconfig1 libglu1-mesa libgl1\n```\nNote that if you installed the build dependencies, it will also install the runtime dependencies automatically as well.\n\nAlso note that most graphical desktop environments already have these libs already installed. This list can be useful if you want to test your already built package in CI/docker (where there is no graphical user interface).\n\n## Features\n\nThe following are the features offered by the crate:\n- use-ninja: Uses the ninja build system if available for a faster build, especially on Windows.\n- no-pango: Build without pango support on Linux/BSD, if rtl/cjk font support is not needed.\n- fltk-bundled: Support for bundled versions of cfltk and fltk on selected platforms (requires curl and tar)\n- enable-glwindow: Support for drawing using OpenGL functions.\n- system-libpng: Uses the system libpng\n- system-libjpeg: Uses the system libjpeg\n- system-zlib: Uses the system zlib\n- use-wayland: Uses FLTK's wayland hybrid backend (runs on wayland when present, and on X11 when not present). Requires libwayland-dev, wayland-protocols, libdbus-1-dev, libxkbcommon-dev, libgtk-3-dev (optional, for the GTK-style titlebar), in addition to the X11 development packages. Sample [CI](https://github.com/MoAlyousef/test_wayland/blob/main/.github/workflows/rust.yml).\n- fltk-config: Uses an already installed FLTK's fltk-config to build this crate against. This still requires FLTK 1.4. Useful for reducing build times, testing against a locally built FLTK and doesn't need to invoke neither git nor cmake. \n\n## FAQ\n\nplease check the [FAQ](FAQ.md) page for frequently asked questions, encountered issues, guides on deployment, and contribution.\n\n## Building\n\nTo build, just run:\n```bash\ngit clone https://github.com/fltk-rs/fltk-rs --recurse-submodules\ncd fltk-rs\ncargo build\n```\n\n## Currently implemented types:\n\n### Image types:\n- SharedImage\n- BmpImage\n- JpegImage\n- GifImage\n- AnimGifImage\n- PngImage\n- SvgImage\n- Pixmap\n- RgbImage\n- XpmImage\n- XbmImage\n- PnmImage\n- TiledImage\n\n### Widgets:\n- Buttons\n    - Button\n    - RadioButton\n    - ToggleButton\n    - RoundButton\n    - CheckButton\n    - LightButton\n    - RepeatButton\n    - RadioLightButton\n    - RadioRoundButton\n    - ReturnButton\n    - ShortcutButton\n- Dialogs\n    - Native FileDialog\n    - FileChooser\n    - HelpDialog\n    - Message dialog\n    - Alert dialog\n    - Password dialog\n    - Choice dialog\n    - Input dialog\n    - ColorChooser dialog\n- Frame (Fl_Box)\n- Windows\n    - Window\n    - SingleWindow (single buffered)\n    - DoubleWindow (double buffered)\n    - MenuWindow\n    - OverlayWindow\n    - GlWindow (requires the \"enable-glwindow\" flag)\n    - Experimental GlWidgetWindow (requires the \"enable-glwindow\" flag)\n- Groups\n    - Group\n    - Pack (Horizontal and Vertical)\n    - Tabs\n    - Scroll\n    - Tile\n    - Wizard\n    - ColorChooser\n    - Flex (Column and Row)\n    - Grid (https://github.com/fltk-rs/fltk-grid)\n- Text display widgets\n    - TextDisplay\n    - TextEditor\n    - SimpleTerminal\n- Input widgets\n    - Input\n    - IntInput\n    - FloatInput\n    - MultilineInput\n    - SecretInput\n    - FileInput\n- Output widgets\n    - Output\n    - MultilineOutput\n- Menu widgets\n    - MenuBar\n    - MenuItem\n    - Choice (dropdown list)\n    - SysMenuBar (MacOS menu bar which appears at the top of the screen)\n- Valuator widgets\n    - Slider\n    - NiceSlider\n    - ValueSlider\n    - Dial\n    - LineDial\n    - Counter\n    - Scrollbar\n    - Roller\n    - Adjuster\n    - ValueInput\n    - ValueOutput\n    - FillSlider\n    - FillDial\n    - HorSlider (Horizontal slider)\n    - HorFillSlider\n    - HorNiceSlider\n    - HorValueSlider\n- Browsing widgets\n    - Browser\n    - SelectBrowser\n    - HoldBrowser\n    - MultiBrowser\n    - FileBrowser\n    - CheckBrowser\n- Miscelaneous widgets\n    - Spinner\n    - Clock (Round and Square)\n    - Chart (several chart types are available)\n    - Progress (progress bar)\n    - Tooltip\n    - InputChoice\n    - HelpView\n- Table widgets\n    - Table\n    - TableRow\n    - SmartTable (via the [fltk-table crate](https://crates.io/crates/fltk-table))\n- Trees\n    - Tree\n    - TreeItem\n\n### Drawing primitives\n(In the draw module)\n### Surface types:\n- Printer.\n- ImageSurface.\n- SvgFileSurface.\n\n### GUI designer\n\nfltk-rs supports FLUID, the RAD wysiwyg designer for FLTK. \nCheckout the [fl2rust crate](https://github.com/fltk-rs/fl2rust) and [fl2rust template](https://github.com/fltk-rs/fl2rust-template).\n\n- [FLTK Rust: Latest FLUID, fl2rust and fltk-rs](https://www.youtube.com/watch?v=33NdaW08fP8)\n\n## Examples\n\nTo run the [examples](https://github.com/fltk-rs/fltk-rs/tree/master/fltk/examples): \n```bash\ncargo run --example editor\ncargo run --example calculator\ncargo run --example calculator2\ncargo run --example counter\ncargo run --example hello_svg\ncargo run --example hello_button\ncargo run --example fb\ncargo run --example pong\ncargo run --example custom_widgets\ncargo run --example custom_dial\n...\n```\n\nUsing custom theming and also FLTK provided default schemes like Gtk:\n\n- [hello_svg](https://github.com/fltk-rs/fltk-rs/tree/master/fltk/examples/hello_svg.rs)\n\n- ![alt_test](https://github.com/fltk-rs/fltk-rs/raw/master/screenshots/hello.jpg)\n\n- [calculator2](https://github.com/fltk-rs/fltk-rs/tree/master/fltk/examples/calculator2.rs)\n\n- ![alt_test](https://github.com/fltk-rs/fltk-rs/raw/master/screenshots/calc2.jpg)\n\n- [counter3](https://github.com/fltk-rs/fltk-rs/tree/master/fltk/examples/counter3.rs)\n\n- ![alt_test](https://github.com/fltk-rs/fltk-rs/raw/master/screenshots/flutter_like.jpg)\n\n- [custom_dial](https://github.com/fltk-rs/fltk-rs/tree/master/fltk/examples/custom_dial.rs)\n\n- ![alt_test](https://github.com/fltk-rs/fltk-rs/raw/master/screenshots/dial.jpg)\n\n- [calculator](https://github.com/fltk-rs/fltk-rs/tree/master/fltk/examples/calculator.rs)\n\n- ![alt_test](https://github.com/fltk-rs/fltk-rs/raw/master/screenshots/calc.jpg)\n\n- [tabs](https://github.com/fltk-rs/fltk-rs/tree/master/fltk/examples/tabs.rs)\n\n- ![alt_test](https://github.com/fltk-rs/fltk-rs/raw/master/screenshots/tabs.jpg)\n\n- [counter](https://github.com/fltk-rs/fltk-rs/tree/master/fltk/examples/counter.rs)\n\n- ![alt_test](https://github.com/fltk-rs/fltk-rs/raw/master/screenshots/counter.jpg)\n\n- [editor](https://github.com/fltk-rs/fltk-rs/tree/master/fltk/examples/editor.rs)\n\n- ![alt_test](https://github.com/fltk-rs/fltk-rs/raw/master/screenshots/editor.jpg)\n\n- [table](https://github.com/fltk-rs/fltk-rs/tree/master/fltk/examples/table.rs)\n\n- ![alt_test](https://github.com/fltk-rs/fltk-rs/raw/master/screenshots/table.jpg)\n\n- [charts](https://github.com/fltk-rs/fltk-rs/tree/master/fltk/examples/charts.rs)\n\n- ![alt_test](https://github.com/fltk-rs/fltk-rs/raw/master/screenshots/charts.jpg)\n\n- [pong](https://github.com/fltk-rs/fltk-rs/tree/master/fltk/examples/pong.rs)\n\n- ![alt_test](https://github.com/fltk-rs/fltk-rs/raw/master/screenshots/pong.gif)\n\n- [frames](https://github.com/fltk-rs/fltk-rs/tree/master/fltk/examples/frames.rs)\n\n- ![alt_test](https://github.com/fltk-rs/fltk-rs/raw/master/screenshots/frames.jpg)\n\nDifferent frame types which can be used with many different widgets such as Frame, Button widgets, In/Output widgets...etc.\n\nMore interesting examples can be found in the fltk-rs-demos [repo](https://github.com/fltk-rs/demos).\nAlso a nice implementation of the 7guis tasks can be found [here](https://github.com/tdryer/7guis-fltk-rs).\nVarious advanced examples can also be found [here](https://github.com/wyhinton/FLTK-RS-Examples).\n\n\n### Themes\n\nAdditional themes can be found in the [fltk-theme crate](https://github.com/fltk-rs/fltk-theme).\n\n- ![screenshots/aero.jpg](https://github.com/fltk-rs/fltk-theme/blob/dfd1e97b62c94d7af9d615cab0ab809226957a3f/screenshots/aero.jpg)\n\n- ![screenshots/black.jpg](https://github.com/fltk-rs/fltk-theme/blob/dfd1e97b62c94d7af9d615cab0ab809226957a3f/screenshots/black.jpg)\n\nAnd more...\n\n### Extra widgets\n\nThis crate exposes FLTK's set of widgets, which are all customizable. Additional custom widgets can be found in the [fltk-extras crate](https://github.com/fltk-rs/fltk-extras).\n\n![image](https://user-images.githubusercontent.com/37966791/212541355-91062d78-5c5d-4b7a-aa6d-e1be49cff340.png)\n\n![image](https://user-images.githubusercontent.com/37966791/212541425-f594a7bc-d7bc-49e5-90f3-03f52d437cce.png)\n\n![ss](https://github.com/fltk-rs/fltk-extras/assets/37966791/a03e1912-7658-48be-a354-2b588b417fd8)\n\n![image](https://user-images.githubusercontent.com/37966791/212541392-2cd4fb08-4152-484a-86da-64b2bc476a0e.png)\n\n## Tutorials\n\n- [Basics](https://www.youtube.com/watch?v=ygP4egJtmzw)\n- [New basics](https://youtu.be/S1NSsHZs6hI) (Uses fltk post 1.0)\n- [User input](https://youtu.be/rIq2O4vg9fQ)\n- [Client-side web todo app](https://youtu.be/tdfFXi4-Yrw)\n- [Create a media player using the vlc crate](https://youtu.be/enxqU3bhCEs)\n- [Custom dialogs](https://youtu.be/tXeXHoKG6-I)\n- [Add drag and drop to the editor example](https://www.youtube.com/watch?v=qp5hnRvSxAg)\n- [Drawing things with fltk](https://www.youtube.com/watch?v=r9MOpvfBPWs)\n- [Working with images](https://www.youtube.com/watch?v=Rn2sjfAX4WI)\n- [Audio player with custom widgets](https://www.youtube.com/watch?v=okdFx6tv7ds)\n- [Use FLUID (RAD tool) with Rust](https://www.youtube.com/watch?v=k_P0wG3-dNk)\n- [multiple windows and embedding windows](https://www.youtube.com/watch?v=qEPYx1Lw7fY)\n- [FLTK Rust tutorial: Improve FLTK's toggle button appearance!](https://www.youtube.com/watch?v=WCTbPKHXR-o)\n- [FLTK Rust: Customizing your app and widgets](https://www.youtube.com/watch?v=uCZl0PuMVGo)\n- [FLTK Rust: fltk-table, a boilerplate-less table creating crate](https://www.youtube.com/watch?v=pVJ8Yq1kDGs)\n- [FLTK Rust: intro into the fltk-evented crate](https://www.youtube.com/watch?v=rAVHBl3W9W8)\n- [FLTK Rust: Latest FLUID, fl2rust and fltk-rs](https://www.youtube.com/watch?v=33NdaW08fP8)\n\nMore videos in the playlist [here](https://www.youtube.com/playlist?list=PLHqrrowPLkDu9U-uk60sGM-YWLOJFfLoE).\nSome of the demo projects can be found [here](https://github.com/fltk-rs/demos).\n"
        },
        {
          "name": "ROADMAP.md",
          "type": "blob",
          "size": 1.30859375,
          "content": "# Roadmap for version 2 (when FLTK 1.4 is released). \n\n- Update to edition2021.\n- Rename WidgetExt::into_widget() to as_widget() and GroupExt::into_group() to as_group() to conform to Rust's self convention.\n- Rename TreeItem::try_widget() to widget() and remove old widget() method.\n- Rename TreeItem::label_fg/bg_color() and TreeItem::set_label_fg/bg_color() to label_fg/bg_color() and set_label_fg/bg_color(), respectively\n- Rename Wizard::try_current_widget() to current_widget() and remove old current_widget() method.\n- Rename TableExt::try_get_selection() and try_visible_cells() to get_selection and visible_cells().\n- FileChooser::directory() should return a PathBuf.\n- Rename timeout3 functions to timeout, as well as idle and clipboard callbacks.\n- Support opacity and platform_hide/platform_show for the wayland backend.\n- Rename no-pango feature to no-pango-cairo, to better reflect the linked libs.\n- app::screen_size() should return (i32, i32) since the implementation changed.\n- Refactor drawing code to use Coord and Rect.\n- Rust 1.63 constifies Mutex::new, so lazy_static can be removed.\n- Replace WindowType::Normal with WindowType::Single.\n- Default Flex to Column as is now the default in FLTK.\n- Rename Flex::set_size to fixed. \n- Rename InputExt::position to insert_position.\n- Rename Browser::position to vposition.\n"
        },
        {
          "name": "_config.yml",
          "type": "blob",
          "size": 0.02734375,
          "content": "theme: jekyll-theme-cayman \n"
        },
        {
          "name": "examples",
          "type": "blob",
          "size": 0.013671875,
          "content": "fltk/examples/"
        },
        {
          "name": "fltk-sys",
          "type": "tree",
          "content": null
        },
        {
          "name": "fltk",
          "type": "tree",
          "content": null
        },
        {
          "name": "screenshots",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}