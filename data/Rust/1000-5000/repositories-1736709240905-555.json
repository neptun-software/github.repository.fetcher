{
  "metadata": {
    "timestamp": 1736709240905,
    "page": 555,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjU2MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "JelteF/derive_more",
      "stars": 1789,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 0.224609375,
          "content": "root = true\n\n[*]\nend_of_line = lf\ninsert_final_newline = true\ntrim_trailing_whitespace = true\nindent_style = space\ncharset = utf-8\n\n[*.rs]\nindent_size = 4\n\n[*.sh]\nindent_size = 4\n\n[*.toml]\nindent_size = 4\n\n[*.yml]\nindent_size = 2\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.1318359375,
          "content": "# Compiled files\n*.o\n*.so\n*.rlib\n*.dll\n\n# Executables\n*.exe\n\n# Generated by Cargo\nCargo.lock\ntarget/\n\ngh-pages\n\n# git files\n.swp\n/tags\n"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 14.298828125,
          "content": "# Changelog\n\nAll notable changes to this project will be documented in this file.\n\nThe format is based on [Keep a Changelog](http://keepachangelog.com/)\nand this project adheres to [Semantic Versioning](http://semver.org/).\n\n\n## 2.0.0 - Unreleased\n\n### Breaking changes\n\n- `use derive_more::SomeTrait` now imports macro only. Importing macro with\n  its trait along is possible now via `use derive_more::with_trait::SomeTrait`.\n  ([#406](https://github.com/JelteF/derive_more/pull/406))\n- Top-level `#[display(\"...\")]` attribute on an enum now has defaulting behavior\n  instead of replacing when no wrapping is possible (no `_variant` placeholder).\n  ([#395](https://github.com/JelteF/derive_more/pull/395))\n\n### Fixed\n\n- Associated types of type parameters not being treated as generics in `Debug`\n  and `Display` expansions.\n  ([#399](https://github.com/JelteF/derive_more/pull/399))\n- `unreachable_code` warnings on generated code when `!` (never type) is used.\n  ([#404](https://github.com/JelteF/derive_more/pull/404))\n- Ambiguous associated item error when deriving `TryFrom`, `TryInto` or `FromStr`\n  with an associated item called `Error` or `Err` respectively.\n  ([#410](https://github.com/JelteF/derive_more/pull/410))\n- Top-level `#[display(\"...\")]` attribute on an enum being incorrectly treated\n  as transparent or wrapping.\n  ([#395](https://github.com/JelteF/derive_more/pull/395))\n\n\n## 1.0.0 - 2024-08-07\n\nMore than 8 years after the first commit and almost 5 years after the 0.99.0\nrelease, `derive_more` has finally reached its 1.0.0 release. This release\ncontains a lot of changes (including some breaking ones) to make it easier to\nuse the derives and make it possible to extend them without having to break\nbackwards compatibility again. There are five major changes that I would like\nto call out, but there are many more changes that are documented below:\n1. There is a new `Debug` derive that can be used to easily customize `Debug`\n   formatting.\n2. A greatly improved `Display` derive, which allows you to do anything that\n   [`thiserror`](https://github.com/dtolnay/thiserror) provides, but it works\n   for any type not just errors. And by combining the `Display` derive with the\n   `Error` and `From` derives, there shouldn't really be any need to use\n   `thiserror` anymore (if you are missing a feature/behaviour from `thiserror`\n   please report an issue).\n3. Traits that can return errors now return a type that implements `Error`\n   when an error occurs instead of a `&'static str`.\n4. When using `use derive_more::SomeTrait` the actual trait is also imported\n   not just the derive macro. This is especially useful for `Error` and\n   `Display`\n5. The docs are now rendered on docs.rs and are much better overall.\n\n\n### Breaking changes\n\n- The minimum supported Rust version (MSRV) is now Rust 1.75.\n- Add the `std` feature which should be disabled in `no_std` environments.\n- All Cargo features, except `std`, are now disabled by default. The `full`\n  feature can be used to get the old behavior of supporting all possible\n  derives.\n- The `TryFrom`, `Add`, `Sub`, `BitAnd`, `BitOr`, `BitXor`, `Not` and `Neg`\n  derives now return a dedicated error type instead of a `&'static str` on\n  error.\n- The `FromStr` derive now uses a dedicated `FromStrError` error type instead\n  of generating unique one each time.\n- The `Display` derive (and other `fmt`-like ones) now uses\n  `#[display(\"...\", (<expr>),*)]` syntax instead of\n  `#[display(fmt = \"...\", (\"<expr>\"),*)]`, and `#[display(bound(<bound>))]`\n  instead of `#[display(bound = \"<bound>\")]`. So without the double quotes\n  around the expressions and bounds.\n- The `Debug` and `Display` derives (and other `fmt`-like ones) now transparently\n  delegate to the inner type when `#[display(\"...\", (<expr>),*)]` attribute is\n  trivially substitutable with a transparent call.\n  ([#322](https://github.com/JelteF/derive_more/pull/322))\n- The `DebugCustom` derive is renamed to just `Debug` (gated now under a separate\n  `debug` feature), and its semantics were changed to be a superset of `std` variant\n  of `Debug`.\n- The `From` derive doesn't derive `From<()>` for enum variants without any\n  fields anymore. This feature was removed because it was considered useless in\n  practice.\n- The `From` derive now uses `#[from(<types>)]` instead of `#[from(types(<types>))]`\n  and ignores field type itself.\n- The `Into` derive now uses `#[into(<types>)]` instead of `#[into(types(<types>))]`\n  and ignores field type itself.\n- The `Into` derive now generates separate impls for each field whenever the `#[into(...)]`\n  attribute is applied to it. ([#291](https://github.com/JelteF/derive_more/pull/291))\n- Importing a derive macro now also imports its corresponding trait.\n- The `Error` derive is updated with changes to the `error_generic_member_access`\n  unstable feature for nightly users. ([#200](https://github.com/JelteF/derive_more/pull/200),\n  [#294](https://github.com/JelteF/derive_more/pull/294))\n- The `as_mut` feature is removed, and the `AsMut` derive is now gated by the\n  `as_ref` feature. ([#295](https://github.com/JelteF/derive_more/pull/295))\n- A top level `#[display(\"...\")]` attribute on an enum now requires the usage\n  of `{_variant}` to include the variant instead of including it at `{}`. The\n  reason is that `{}` now references the first argument to the format string,\n  just like in all other format strings. ([#377](https://github.com/JelteF/derive_more/pull/377))\n\n### Added\n\n- Add support captured identifiers in `Display` derives. So now you can use:\n  `#[display(fmt = \"Prefix: {field}\")]` instead of needing to use\n  `#[display(fmt = \"Prefix: {}\", field)]`\n- Add `FromStr` derive support for enums that contain variants without fields.\n  If you pass the name of the variant to `from_str` it will create the matching\n  variant.\n- Add `#[unwrap(owned, ref, ref_mut)]` attribute for the `Unwrap` derive.\n  By using them, it is possible to derive implementations for the reference types as well.\n  ([#206](https://github.com/JelteF/derive_more/pull/206))\n- Add `TryUnwrap` derive similar to the `Unwrap` derive. This one returns a `Result` and does not panic.\n  ([#206](https://github.com/JelteF/derive_more/pull/206))\n- Add support for container format in `Debug` derive with the same syntax as `Display` derives.\n  ([#279](https://github.com/JelteF/derive_more/pull/279))\n- `derive_more::derive` module exporting only macros, without traits.\n  ([#290](https://github.com/JelteF/derive_more/pull/290))\n- Add support for specifying concrete types to `AsRef`/`AsMut` derives.\n  ([#298](https://github.com/JelteF/derive_more/pull/298))\n- Add `TryFrom` derive for enums to convert from their discriminant.\n  ([#300](https://github.com/JelteF/derive_more/pull/300))\n- `#[inline]` attributes to `IsVariant` and `Debug` implementations.\n  ([#334](https://github.com/JelteF/derive_more/pull/334)\n- Add `#[track_caller]` to `Add`, `Mul`, `AddAssign` and `MulAssign` derives\n  ([#378](https://github.com/JelteF/derive_more/pull/378)\n\n\n### Changed\n\n- The `Constructor` and `IsVariant` derives now generate `const fn` functions.\n- Static methods derived by `IsVariant` are now marked `#[must_use]`.\n  ([#350](https://github.com/JelteF/derive_more/pull/350))\n- The `Unwrap` and `IsVariant` derives now generate doc comments.\n- `#[automatically_derived]` is now emitted from all macro expansions. This\n  should prevent code style linters from attempting to modify the generated\n  code.\n- Upgrade to `syn` 2.0.\n- The `Error` derive now works in nightly `no_std` environments\n\n### Fixed\n\n- Use a deterministic `HashSet` in all derives, this is needed for rust analyzer\n  to work correctly.\n- Use `Provider` API for backtraces in `Error` derive.\n- Fix `Error` derive not working with `const` generics.\n- Support trait objects for source in Error, e.g.\n  `Box<dyn Error + Send + 'static>`\n- Fix bounds on derived `IntoIterator` impls for generic structs.\n  ([#284](https://github.com/JelteF/derive_more/pull/284))\n- Fix documentation of generated bounds in `Display` derive.\n  ([#297](https://github.com/JelteF/derive_more/pull/297))\n- Hygiene of macro expansions in presence of custom `core` crate.\n  ([#327](https://github.com/JelteF/derive_more/pull/327))\n- Fix documentation of generated methods in `IsVariant` derive.\n- Make `{field:p}` do the expected thing in format strings for `Display` and\n  `Debug`. Also document weirdness around `Pointer` formatting when using\n  expressions, due to field variables being references.\n  ([#381](https://github.com/JelteF/derive_more/pull/381))\n\n## 0.99.10 - 2020-09-11\n\n### Added\n\n- `From` supports additional types for conversion: `#[from(types(u8, u16))]`.\n\n\n## 0.99.7 - 2020-05-16\n\n### Changed\n\n- When specifying specific features of the crate to only enable specific\n    derives, the `extra-traits` feature of  `syn` is not always enabled\n    when those the specified features do not require it. This should speed up\n    compile time of `syn` when this feature is not needed.\n\n### Fixed\n\n- Fix generic derives for `MulAssign`\n\n## 0.99.6 - 2020-05-13\n\n### Changed\n\n- Make sure output of derives is deterministic, for better support in\n    rust-analyzer\n\n\n## 0.99.5 - 2020-03-28\n\n### Added\n\n- Support for deriving `Error`!!! (many thanks to @ffuugoo and @tyranron)\n\n### Fixed\n\n- Fix generic bounds for `Deref` and `DerefMut` with `forward`, i.e. put `Deref`\n  bound on whole type, so on `where Box<T>: Deref` instead of on `T: Deref`.\n  ([#107](https://github.com/JelteF/derive_more/issues/114))\n\n- The `tests` directory is now correctly included in the crate (requested by\n    Debian package maintainers)\n\n## 0.99.4 - 2020-03-28 [YANKED]\n\nNote: This version is yanked, because quickly after release it was found out\ntests did not run in CI.\n\n## 0.99.3 - 2020-02-19\n\n### Fixed\n\n- Fix generic bounds for `Deref` and `DerefMut` with no `forward`, i.e. no bounds\n    are necessary. ([#107](https://github.com/JelteF/derive_more/issues/114))\n\n\n## 0.99.2 - 2019-11-17\n\n### Fixed\n\n- Hotfix for a regression in allowed `Display` derives using `#` flag, such as\n    `{:#b}` ([#107](https://github.com/JelteF/derive_more/issues/107))\n\n## 0.99.1 - 2019-11-12\n\n### Fixed\n\n- Hotfix for a regression in allowed `From` derives\n    ([#105](https://github.com/JelteF/derive_more/issues/105))\n\n## 0.99.0 - 2019-11-11\n\nThis release is a huge milestone for this library.\nLot's of new derives are implemented and a ton of attributes are added for\nconfiguration purposes.\nThese attributes will allow future releases to add features/options without\nbreaking backwards compatibility.\nThis is why the next release with breaking changes is planned to be 1.0.0.\n\n### Breaking changes\n- The minimum supported rust version (MSRV) is now Rust 1.36.\n- When using in a Rust 2015 crate, you should add `extern crate core` to your\n  code.\n- `no_std` feature is removed, the library now supports `no_std` without having\n  to configure any features.\n\n\n### Added\n\n- `Deref` derives now dereference to the type in the newtype. So if you have\n  `MyBox(Box<i32>)`, dereferencing it will result in a `Box<i32>` not an `i32`.\n  To get the old behaviour of forwarding the dereference you can add the\n  `#[deref(forward)]` attribute on the struct or field.\n- Derives for `AsRef`, `AsMut`, `Sum`, `Product`, `IntoIterator`.\n- Choosing the field of a struct for which to derive the newtype derive.\n- Ignoring variants of enums when deriving `From`, by using `#[from(ignore)]`.\n- Add `#[from(forward)]` attribute for `From` derives. This forwards the `from`\n  calls to the fields themselves. So if your field is an `i64` you can call from\n  on an `i32` and it will work.\n- Add `#[mul(forward)]` and `#[mul_assign(forward)]`, which implement `Mul` and\n  `MulAssign` with the semantics as if they were `Add`/`AddAssign`.\n- You can use features to cut down compile time of the crate by only compiling\n  the code needed for the derives that you use. (see Cargo.toml for the\n  features, by default they are all on)\n- Add `#[into(owned, ref, ref_mut)]` and `#[try_into(owned, ref, ref_mut)]`\n  attributes. These cause the `Into` and `TryInto` derives to also implement\n  derives that return references to the inner fields.\n- Allow `#[display(fmt=\"some shared display text for all enum variants {}\")]`\n  attribute on enum.\n- Better bounds inference of `Display` trait.\n\n### Changed\n\n- Remove dependency on `regex` to cut down compile time.\n- Use `syn` 1.0\n\n## 0.15.0 - 2019-06-08\n\n### Fixed\n\n- Automatic detection of traits needed for `Display` format strings\n\n## 0.14.0 - 2019-02-02\n\n### Added\n\n- Added `no_std` support\n\n### Changed\n\n- Suppress `unused_variables` warnings in derives\n\n## 0.13.0 - 2018-10-19\n\n### Added\n\n- Extended Display-like derives to support custom formats\n\n### Changed\n\n- Updated to `syn` v0.15\n\n## 0.12.0 - 2018-09-19\n\n### Changed\n\n- Updated to `syn` v0.14, `quote` v0.6 and `proc-macro2` v0.4\n\n## 0.11.0 - 2018-05-12\n\n### Changed\n\n- Updated to latest version of `syn` and `quote`\n\n### Fixed\n\n- Changed some URLs in the docs so they were correct on crates.io and docs.rs\n- The `Result` type is now referenced in the derives using its absolute path\n  (`::std::result::Result`) to make sure that the derives don't accidentally use\n  another `Result` type that is in scope.\n\n## 0.10.0 - 2018-03-29\n\n### Added\n\n- Allow deriving of `TryInto`\n- Allow deriving of `Deref`\n- Allow deriving of `DerefMut`\n\n## 0.9.0 - 2018-03-18\n\n### Added\n\n- Allow deriving of `Display`, `Binary`, `Octal`, `LowerHex`, `UpperHex`, `LowerExp`, `UpperExp`, `Pointer`\n- Allow deriving of `Index`\n- Allow deriving of `IndexMut`\n\n### Fixed\n\n- Allow cross crate inlining of derived methods\n\n## 0.8.0 - 2018-03-10\n\n### Added\n\n- Allow deriving of `FromStr`\n\n### Changed\n\n- Updated to latest version of `syn` and `quote`\n\n## 0.7.1 - 2018-01-25\n\n### Fixed\n\n- Add `#[allow(missing_docs)]` to the Constructor definition\n\n## 0.7.0 - 2017-07-25\n\n### Changed\n\n- Changed code to work with newer version of the `syn` library.\n\n## 0.6.2 - 2017-04-23\n\n### Changed\n\n- Deriving `From`, `Into` and `Constructor` now works for empty structs.\n\n## 0.6.1 - 2017-03-08\n\n### Changed\n\n- The `new()` method that is created when deriving `Constructor` is now public.\n  This makes it a lot more useful.\n\n## 0.6.0 - 2017-02-20\n\n### Added\n\n- Derives for `Into`, `Constructor` and `MulAssign`-like\n\n### Changed\n\n- `From` is now derived for enum variants with multiple fields.\n\n### Fixed\n\n- Derivations now support generics.\n\n## 0.5.0 - 2017-02-02\n\n### Added\n\n- Lots of docs.\n- Derives for `Neg`-like and `AddAssign`-like.\n\n### Changed\n\n- `From` can now be derived for structs with multiple fields.\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 5.6455078125,
          "content": "Contribution Guide\n==================\n\n🎈 Thanks for your help improving the project! We are so happy to have you!\n\n__No contribution is too small and all contributions are valued.__\n\n\n\n\n## Pull Requests\n\n[Pull Requests][PR] are the way concrete changes are made to the code, documentation, and dependencies in the `derive_more` repository.\n\nEven tiny [PR]s (e.g., fixing a typo in API documentation) are greatly appreciated. Before making a large change, however, it's usually a good idea to first open an [issue] describing the change to solicit feedback and guidance. This will increase the likelihood of the [PR] getting merged.\n\nAny of the guidelines described below may be ignored if it makes sense in the specific case, but following them should be the default.\n\n\n### Breaking changes\n\nTry to avoid introducing breaking changes in [PR]s.\n\nIf a new behaviour makes sense, that is different from the current behavior, then this new behaviour should only be enabled via an attribute. Of course, if the old behaviour doesn't make sense for any reasonable person to rely on, it's possible to ignore this guideline, but such a decision should be made actively and argued for.\n\n\n### Documentation\n\nDocumentation is contained in the `impl/doc/*.md` files and [README].\n\nDocumentation should be up-to-date with any [PR] changes visible for library end-users.\n\n#### Changelog\n\nThe same way, any [PR] changes visible for library end-users should be mentioned in the [CHANGELOG] file.\n\nConsider to mention a [PR] number (and [issue], if possible) in the added [CHANGELOG] entries.\n\n\n### Tests\n\nIf the change being proposed alters code (as opposed to only documentation, for example), it's either adding new functionality or is fixing existing, broken functionality. In both of these cases, the [PR] should include one or more tests to ensure that `derive_more` won't regress in the future.\n\nThere are multiple ways to write tests: integration tests, documentation tests and unit tests.\n\n#### Integration tests\n\n[Integration tests][3] are contained in the `tests/` directory of the repository.\n\nThe best strategy for writing a new integration test is to look at existing integration tests in the crate and follow the style.\n\n#### Documentation tests\n\nThese are the [code examples][1] in the `impl/doc/*.md` files and [README].\n\nWriting documentation tests is needed for better illustration of the added/altered capabilities for end-users of the crate.\n\n#### Unit tests\n\n[Unit tests][2] don't have much sense when it comes to macro testing. That's why they are rare beasts in the code of this repository. However, occasionally, they're very useful for testing some complicated properties locally (like correctness of syntax parsing, for example).\n\n\n### Review\n\nTo get merged, any [PR] should be reviewed and approved by at least one of the active project maintainers, except the [PR] submitter, of course.\n\nFurthermore, __any `derive_more` community member is welcome to review any [PR].__\n\nAll `derive_more` contributors who choose to review and provide feedback on [Pull Requests][PR] have a responsibility to both the project and the individual making the contribution. Reviews and feedback must be helpful, insightful, and geared towards improving the contribution as opposed to simply blocking it. If there are reasons why you feel the [PR] should not land, explain what those are. Do not expect to be able to block a [Pull Request][PR] from advancing simply because you say \"No\" without giving an explanation. Be open to having your mind changed. Be open to working with the contributor to make the [Pull Request][PR] better.\n\nWhen reviewing a [Pull Request][PR], the primary goals are for the codebase to improve and for the person submitting the request to succeed. Even if a [Pull Request][PR] doesn't land, the submitters should come away from the experience feeling like their effort was not wasted or unappreciated.\n\n#### Abandoned or stalled [Pull Requests][PR]\n\nIf a [Pull Request][PR] appears to be abandoned or stalled, it's polite to first check with the contributor to see if they intend to continue the work before checking if they would mind if you took it over (especially if it just has nits left). When doing so, it's courteous to give the original contributor credit for the work they started (by preserving their name and email address with `Co-authored-by:` meta-data tag in the commit).\n\n\n### Merging\n\nAll [PR]s are [squash]-merged to preserve the main history linear and meaningful.\n\n#### Commit message for a [squash] merge\n\nCommit message for a [squash] merge of the [PR] should mention its number and the number of the relevant [issue] (if it has the one). The commit body should contain the [PR] description. All of this is done automatically by GitHub.\n\n\n\n\n## Releasing\n\nTo produce a new release of the `derive_more` crate, perform the following steps:\n\n1. Complete the existing [CHANGELOG] or fill up a new one for the new version.\n2. Update [README] installation instructions with the new version.\n3. Run `cargo release patch --workspace` (or `minor`/`major`).\n4. Wait for the CI pipeline to complete successfully, and the [GitHub release] being created.\n\n\n\n\n[`Cargo.toml`]: Cargo.toml\n[CHANGELOG]: CHANGELOG.md\n[GitHub release]: /../../releases\n[issue]: /../../issues\n[PR]: /../../pulls\n[README]: README.md#installation\n[squash]: https://docs.github.com/en/pull-requests/collaborating-with-pull-requests/incorporating-changes-from-a-pull-request/about-pull-request-merges#squash-and-merge-your-commits\n\n[1]: https://doc.rust-lang.org/rustdoc/write-documentation/documentation-tests.html\n[2]: https://doc.rust-lang.org/book/ch11-03-test-organization.html#unit-tests\n[3]: https://doc.rust-lang.org/book/ch11-03-test-organization.html#integration-tests\n"
        },
        {
          "name": "Cargo.toml",
          "type": "blob",
          "size": 5.228515625,
          "content": "[package]\nname = \"derive_more\"\nversion = \"1.0.0\"\nedition = \"2021\"\nrust-version = \"1.75.0\"\ndescription = \"Adds #[derive(x)] macros for more traits\"\nauthors = [\"Jelte Fennema <github-tech@jeltef.nl>\"]\nlicense = \"MIT\"\nrepository = \"https://github.com/JelteF/derive_more\"\ndocumentation = \"https://docs.rs/derive_more\"\n\nreadme = \"README.md\"\nkeywords = [\"derive\", \"Add\", \"From\", \"Display\", \"IntoIterator\"]\ncategories = [\"development-tools\", \"development-tools::procedural-macro-helpers\", \"no-std\", \"rust-patterns\"]\n\ninclude = [\n    \"src/**/*.rs\",\n    \"Cargo.toml\",\n    \"LICENSE\",\n    \"README.md\",\n    \"CHANGELOG.md\",\n    \"tests/**/*.rs\", # debian packaging wants this\n    \"examples/**/*.rs\"\n]\n\n[workspace]\nmembers = [\"impl\"]\n\n[dependencies]\nderive_more-impl = { version = \"=1.0.0\", path = \"impl\" }\n\n[build-dependencies]\nrustc_version = { version = \"0.4\", optional = true }\n\n[dev-dependencies]\nrustversion = \"1.0\"\nstatic_assertions = \"1.1\"\ntrybuild = \"1.0.56\"\n\n[badges]\ngithub = { repository = \"JelteF/derive_more\", workflow = \"CI\" }\n\n[package.metadata.docs.rs]\nfeatures = [\"full\"]\nrustdoc-args = [\"--cfg\", \"docsrs\"]\n\n[lints.rust]\nunexpected_cfgs = { level = \"warn\", check-cfg = [\"cfg(ci)\", \"cfg(nightly)\"] }\n\n[features]\ndefault = [\"std\"]\n\nadd = [\"derive_more-impl/add\"]\nadd_assign = [\"derive_more-impl/add_assign\"]\nas_ref = [\"derive_more-impl/as_ref\"]\nconstructor = [\"derive_more-impl/constructor\"]\ndebug = [\"derive_more-impl/debug\"]\nderef = [\"derive_more-impl/deref\"]\nderef_mut = [\"derive_more-impl/deref_mut\"]\ndisplay = [\"derive_more-impl/display\"]\nerror = [\"derive_more-impl/error\"]\nfrom = [\"derive_more-impl/from\"]\nfrom_str = [\"derive_more-impl/from_str\"]\nindex = [\"derive_more-impl/index\"]\nindex_mut = [\"derive_more-impl/index_mut\"]\ninto = [\"derive_more-impl/into\"]\ninto_iterator = [\"derive_more-impl/into_iterator\"]\nis_variant = [\"derive_more-impl/is_variant\"]\nmul = [\"derive_more-impl/mul\"]\nmul_assign = [\"derive_more-impl/mul_assign\"]\nnot = [\"derive_more-impl/not\"]\nsum = [\"derive_more-impl/sum\"]\ntry_from = [\"derive_more-impl/try_from\"]\ntry_into = [\"derive_more-impl/try_into\"]\ntry_unwrap = [\"derive_more-impl/try_unwrap\"]\nunwrap = [\"derive_more-impl/unwrap\"]\n\nstd = []\nfull = [\n    \"add\",\n    \"add_assign\",\n    \"as_ref\",\n    \"constructor\",\n    \"debug\",\n    \"deref\",\n    \"deref_mut\",\n    \"display\",\n    \"error\",\n    \"from\",\n    \"from_str\",\n    \"index\",\n    \"index_mut\",\n    \"into\",\n    \"into_iterator\",\n    \"is_variant\",\n    \"mul\",\n    \"mul_assign\",\n    \"not\",\n    \"sum\",\n    \"try_from\",\n    \"try_into\",\n    \"try_unwrap\",\n    \"unwrap\",\n]\n\ntesting-helpers = [\"derive_more-impl/testing-helpers\", \"dep:rustc_version\"]\n\n[[test]]\nname = \"add\"\npath = \"tests/add.rs\"\nrequired-features = [\"add\"]\n\n[[test]]\nname = \"add_assign\"\npath = \"tests/add_assign.rs\"\nrequired-features = [\"add_assign\"]\n\n[[test]]\nname = \"as_mut\"\npath = \"tests/as_mut.rs\"\nrequired-features = [\"as_ref\"]\n\n[[test]]\nname = \"as_ref\"\npath = \"tests/as_ref.rs\"\nrequired-features = [\"as_ref\"]\n\n[[test]]\nname = \"boats_display_derive\"\npath = \"tests/boats_display_derive.rs\"\nrequired-features = [\"display\"]\n\n[[test]]\nname = \"constructor\"\npath = \"tests/constructor.rs\"\nrequired-features = [\"constructor\"]\n\n[[test]]\nname = \"debug\"\npath = \"tests/debug.rs\"\nrequired-features = [\"debug\"]\n\n[[test]]\nname = \"deref\"\npath = \"tests/deref.rs\"\nrequired-features = [\"deref\"]\n\n[[test]]\nname = \"deref_mut\"\npath = \"tests/deref_mut.rs\"\nrequired-features = [\"deref_mut\"]\n\n[[test]]\nname = \"display\"\npath = \"tests/display.rs\"\nrequired-features = [\"display\"]\n\n[[test]]\nname = \"error\"\npath = \"tests/error_tests.rs\"\nrequired-features = [\"error\"]\n\n[[test]]\nname = \"from\"\npath = \"tests/from.rs\"\nrequired-features = [\"from\"]\n\n[[test]]\nname = \"from_str\"\npath = \"tests/from_str.rs\"\nrequired-features = [\"from_str\"]\n\n[[test]]\nname = \"index_mut\"\npath = \"tests/index_mut.rs\"\nrequired-features = [\"index_mut\"]\n\n[[test]]\nname = \"index\"\npath = \"tests/index.rs\"\nrequired-features = [\"index\"]\n\n[[test]]\nname = \"into\"\npath = \"tests/into.rs\"\nrequired-features = [\"into\"]\n\n[[test]]\nname = \"into_iterator\"\npath = \"tests/into_iterator.rs\"\nrequired-features = [\"into_iterator\"]\n\n[[test]]\nname = \"is_variant\"\npath = \"tests/is_variant.rs\"\nrequired-features = [\"is_variant\"]\n\n[[test]]\nname = \"mul\"\npath = \"tests/mul.rs\"\nrequired-features = [\"mul\"]\n\n[[test]]\nname = \"mul_assign\"\npath = \"tests/mul_assign.rs\"\nrequired-features = [\"mul_assign\"]\n\n[[test]]\nname = \"not\"\npath = \"tests/not.rs\"\nrequired-features = [\"not\"]\n\n[[test]]\nname = \"sum\"\npath = \"tests/sum.rs\"\nrequired-features = [\"sum\"]\n\n[[test]]\nname = \"try_from\"\npath = \"tests/try_from.rs\"\nrequired-features = [\"try_from\"]\n\n[[test]]\nname = \"try_into\"\npath = \"tests/try_into.rs\"\nrequired-features = [\"try_into\"]\n\n[[test]]\nname = \"try_unwrap\"\npath = \"tests/try_unwrap.rs\"\nrequired-features = [\"try_unwrap\"]\n\n[[test]]\nname = \"unwrap\"\npath = \"tests/unwrap.rs\"\nrequired-features = [\"unwrap\"]\n\n[[test]]\nname = \"compile_fail\"\npath = \"tests/compile_fail/mod.rs\"\nrequired-features = [\"as_ref\", \"debug\", \"display\", \"from\", \"into\", \"is_variant\", \"try_from\"]\n\n[[test]]\nname = \"no_std\"\npath = \"tests/no_std.rs\"\nrequired-features = [\"full\"]\n\n[[test]]\nname = \"generics\"\npath = \"tests/generics.rs\"\nrequired-features = [\"full\"]\n\n[[test]]\nname = \"lib\"\npath = \"tests/lib.rs\"\nrequired-features = [\"full\"]\n\n[[example]]\nname = \"deny_missing_docs\"\npath = \"examples/deny_missing_docs.rs\"\nrequired-features = [\"full\"]\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.0546875,
          "content": "The MIT License (MIT)\n\nCopyright (c) 2016 Jelte Fennema\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 10.01953125,
          "content": "# `derive_more`\n\n[![Build Status](https://github.com/JelteF/derive_more/workflows/CI/badge.svg)](https://github.com/JelteF/derive_more/actions)\n[![Latest Version](https://img.shields.io/crates/v/derive_more.svg)](https://crates.io/crates/derive_more)\n[![Rust Documentation](https://docs.rs/derive_more/badge.svg)](https://docs.rs/derive_more)\n[![GitHub license](https://img.shields.io/badge/license-MIT-blue.svg)](https://raw.githubusercontent.com/JelteF/derive_more/master/LICENSE)\n[![Rust 1.75+](https://img.shields.io/badge/rustc-1.75+-lightgray.svg)](https://blog.rust-lang.org/2023/12/28/Rust-1.75.0.html)\n[![Unsafe Forbidden](https://img.shields.io/badge/unsafe-forbidden-success.svg)](https://github.com/rust-secure-code/safety-dance)\n\nRust has lots of builtin traits that are implemented for its basic types, such\nas `Add`, `Not`, `From` or `Display`.\nHowever, when wrapping these types inside your own structs or enums you lose the\nimplementations of these traits and are required to recreate them.\nThis is especially annoying when your own structures are very simple, such as\nwhen using the commonly advised newtype pattern (e.g. `MyInt(i32)`).\n\nThis library tries to remove these annoyances and the corresponding boilerplate code.\nIt does this by allowing you to derive lots of commonly used traits for both structs and enums.\n\n\n\n\n## Example code\n\nBy using this library the following code just works:\n\n```rust\nuse derive_more::{Add, Display, From, Into};\n\n#[derive(PartialEq, From, Add)]\nstruct MyInt(i32);\n\n#[derive(PartialEq, From, Into)]\nstruct Point2D {\n    x: i32,\n    y: i32,\n}\n\n#[derive(PartialEq, From, Add, Display)]\nenum MyEnum {\n    #[display(\"int: {_0}\")]\n    Int(i32),\n    Uint(u32),\n    #[display(\"nothing\")]\n    Nothing,\n}\n\nassert!(MyInt(11) == MyInt(5) + 6.into());\nassert!((5, 6) == Point2D { x: 5, y: 6 }.into());\nassert!(MyEnum::Int(15) == (MyEnum::Int(8) + 7.into()).unwrap());\nassert!(MyEnum::Int(15).to_string() == \"int: 15\");\nassert!(MyEnum::Uint(42).to_string() == \"42\");\nassert!(MyEnum::Nothing.to_string() == \"nothing\");\n```\n\n\n\n\n## The derivable traits\n\nBelow are all the traits that you can derive using this library.\nSome trait derivations are so similar that the further documentation will only show a single one\nof them.\nYou can recognize these by the \"-like\" suffix in their name.\nThe trait name before that will be the only one that is used throughout the further\ndocumentation.\n\nIt is important to understand what code gets generated when using one of the\nderives from this crate.\nThat is why the links below explain what code gets generated for a trait for\neach group from before.\n\nYou can use the [`cargo-expand`] utility to see the exact code that is generated\nfor your specific type.\nThis will show you your code with all macros and derives expanded.\n\n**NOTE**: You still have to derive each trait separately. So `#[derive(Mul)]` doesn't\nautomatically derive `Div` as well. To derive both you should do `#[derive(Mul, Div)]`\n\n\n### Conversion traits\n\nThese are traits that are used to convert automatically between types.\n\n1. [`From`]\n2. [`Into`]\n3. [`FromStr`]\n4. [`TryFrom`]\n5. [`TryInto`]\n6. [`IntoIterator`]\n7. [`AsRef`], [`AsMut`]\n\n\n### Formatting traits\n\nThese traits are used for converting a struct to a string in different ways.\n\n1. [`Debug`]\n2. [`Display`-like], contains `Display`, `Binary`, `Octal`, `LowerHex`,\n   `UpperHex`, `LowerExp`, `UpperExp`, `Pointer`\n\n\n### Error-handling traits\n\nThese traits are used to define error-types.\n\n1. [`Error`]\n\n\n### Operators\n\nThese are traits that can be used for operator overloading.\n\n1. [`Index`]\n2. [`Deref`]\n3. [`Not`-like], contains `Not` and `Neg`\n4. [`Add`-like], contains `Add`, `Sub`, `BitAnd`, `BitOr`, `BitXor`\n5. [`Mul`-like], contains `Mul`, `Div`, `Rem`, `Shr` and `Shl`\n6. [`Sum`-like], contains `Sum` and `Product`\n7. [`IndexMut`]\n8. [`DerefMut`]\n9. [`AddAssign`-like], contains `AddAssign`, `SubAssign`, `BitAndAssign`,\n   `BitOrAssign` and `BitXorAssign`\n10. [`MulAssign`-like], contains `MulAssign`, `DivAssign`, `RemAssign`,\n    `ShrAssign` and `ShlAssign`\n\n\n### Static methods\n\nThese don't derive traits, but derive static methods instead.\n\n1. [`Constructor`], this derives a `new` method that can be used as a constructor.\n   This is very basic if you need more customization for your constructor, check\n   out the [`derive-new`] crate.\n2. [`IsVariant`], for each variant `foo` of an enum type, derives a `is_foo` method.\n3. [`Unwrap`], for each variant `foo` of an enum type, derives an `unwrap_foo` method.\n4. [`TryUnwrap`], for each variant `foo` of an enum type, derives an `try_unwrap_foo` method.\n\n\n### Re-exports\n\nThis crate also re-exports all the standard library traits, that it adds derives\nfor, in the `with_trait` module. So, both the `Display` derive and the `Display`\ntrait will be in scope when you add the following code:\n```rust\nuse derive_more::with_trait::Display; // also imports `core::fmt::Display`\n```\n\nBy default, derive macros only, without the corresponding traits, are imported from\nthe crate's root (or from the `derive` module):\n```rust\nuse derive_more::Display;   // imports macro only\nuse derive_more::derive::*; // imports all macros only\n```\n\n#### Hygiene\n\nFor hygiene purposes, macros use `derive_more::*` absolute paths in their expansions.\nThis might introduce a trouble, if you want to re-export `derive_more` macros in your\nown crate without using the `derive_more` as a direct dependency in downstream crates:\n```rust,ignore\nuse my_lib::Display; // re-exported in `my_lib` crate\n\n#[derive(Display)] // error: could not find `derive_more` in the list of imported crates\nstruct MyInt(i32);\n```\nIn such case, you should re-export the `derive_more` module too:\n```rust,ignore\nuse my_lib::{derive_more, Display}; // re-exported in `my_lib` crate\n\n#[derive(Display)] // works fine now!\nstruct MyInt(i32);\n```\n\n\n\n\n## Installation\n\nTo avoid redundant compilation times, by default no derives are supported.\nYou have to enable each type of derive as a feature in `Cargo.toml`:\n```toml\n[dependencies]\n# You can specify the types of derives that you need for less time spent\n# compiling. For the full list of features see this crate its `Cargo.toml`.\nderive_more = { version = \"1\", features = [\"from\", \"add\", \"into_iterator\"] }\n```\n```toml\n[dependencies]\n# If you don't care much about compilation times and simply want to have\n# support for all the possible derives, you can use the \"full\" feature.\nderive_more = { version = \"1\", features = [\"full\"] }\n```\n```toml\n[dependencies]\n# If you run in a `no_std` environment you should disable the default features,\n# because the only default feature is the \"std\" feature.\n# NOTE: You can combine this with \"full\" feature to get support for all the\n#       possible derives in a `no_std` environment.\nderive_more = { version = \"1\", default-features = false }\n```\n\nAnd this to the top of your Rust file:\n```rust\n// use the derives that you want in the file\nuse derive_more::{Add, Display, From};\n```\nIf you're still using Rust 2015, add this instead:\n```rust,edition2015\nextern crate core;\n#[macro_use]\nextern crate derive_more;\n# fn main() {} // omit wrapping statements above into `main()` in tests\n```\n\n\n## [MSRV] policy\n\nThis library requires Rust 1.75 or higher.\n\nChanging [MSRV] (minimum supported Rust version) of this crate is treated as a **minor version change** in terms of [Semantic Versioning].\n- So, if [MSRV] changes are **NOT concerning** for your project, just use the default [caret requirement]:\n  ```toml\n  [dependencies]\n  derive_more = \"1\" # or \"1.0\", or \"^1.0\"\n  ```\n- However, if [MSRV] changes are concerning for your project, then use the [tilde requirement] to **pin to a specific minor version**:\n  ```toml\n  [dependencies]\n  derive_more = \"~1.0\" # or \"~1.0.0\"\n  ```\n\n\n\n\n[`cargo-expand`]: https://github.com/dtolnay/cargo-expand\n[`derive-new`]: https://github.com/nrc/derive-new\n\n[`From`]: https://docs.rs/derive_more/latest/derive_more/derive.From.html\n[`Into`]: https://docs.rs/derive_more/latest/derive_more/derive.Into.html\n[`FromStr`]: https://docs.rs/derive_more/latest/derive_more/derive.FromStr.html\n[`TryFrom`]: https://docs.rs/derive_more/latest/derive_more/derive.TryFrom.html\n[`TryInto`]: https://docs.rs/derive_more/latest/derive_more/derive.TryInto.html\n[`IntoIterator`]: https://docs.rs/derive_more/latest/derive_more/derive.IntoIterator.html\n[`AsRef`]: https://docs.rs/derive_more/latest/derive_more/derive.AsRef.html\n[`AsMut`]: https://docs.rs/derive_more/latest/derive_more/derive.AsMut.html\n\n[`Debug`]: https://docs.rs/derive_more/latest/derive_more/derive.Debug.html\n[`Display`-like]: https://docs.rs/derive_more/latest/derive_more/derive.Display.html\n\n[`Error`]: https://docs.rs/derive_more/latest/derive_more/derive.Error.html\n\n[`Index`]: https://docs.rs/derive_more/latest/derive_more/derive.Index.html\n[`Deref`]: https://docs.rs/derive_more/latest/derive_more/derive.Deref.html\n[`Not`-like]: https://docs.rs/derive_more/latest/derive_more/derive.Not.html\n[`Add`-like]: https://docs.rs/derive_more/latest/derive_more/derive.Add.html\n[`Mul`-like]: https://docs.rs/derive_more/latest/derive_more/derive.Mul.html\n[`Sum`-like]: https://docs.rs/derive_more/latest/derive_more/derive.Sum.html\n[`IndexMut`]: https://docs.rs/derive_more/latest/derive_more/derive.IndexMut.html\n[`DerefMut`]: https://docs.rs/derive_more/latest/derive_more/derive.DerefMut.html\n[`AddAssign`-like]: https://docs.rs/derive_more/latest/derive_more/derive.AddAssign.html\n[`MulAssign`-like]: https://docs.rs/derive_more/latest/derive_more/derive.MulAssign.html\n\n[`Constructor`]: https://docs.rs/derive_more/latest/derive_more/derive.Constructor.html\n[`IsVariant`]: https://docs.rs/derive_more/latest/derive_more/derive.IsVariant.html\n[`Unwrap`]: https://docs.rs/derive_more/latest/derive_more/derive.Unwrap.html\n[`TryUnwrap`]: https://docs.rs/derive_more/latest/derive_more/derive.TryUnwrap.html\n\n[caret requirement]: https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#caret-requirements\n[tilde requirement]: https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#tilde-requirements\n[MSRV]: https://doc.rust-lang.org/cargo/reference/manifest.html#the-rust-version-field\n[Semantic Versioning]: http://semver.org\n"
        },
        {
          "name": "build.rs",
          "type": "blob",
          "size": 0.3154296875,
          "content": "#[cfg(not(feature = \"testing-helpers\"))]\nfn detect_nightly() {}\n\n#[cfg(feature = \"testing-helpers\")]\nfn detect_nightly() {\n    use rustc_version::{version_meta, Channel};\n\n    if version_meta().unwrap().channel == Channel::Nightly {\n        println!(\"cargo:rustc-cfg=nightly\");\n    }\n}\n\nfn main() {\n    detect_nightly();\n}\n"
        },
        {
          "name": "ci",
          "type": "tree",
          "content": null
        },
        {
          "name": "clippy.toml",
          "type": "blob",
          "size": 0.798828125,
          "content": "# Project configuration for Clippy Rust code linter.\n# See full lints list at:\n# https://rust-lang.github.io/rust-clippy/master/index.html\n\n# Ensures consistent bracing for macro calls in the codebase.\n# Extends default settings:\n# https://github.com/rust-lang/rust-clippy/blob/master/clippy_lints/src/nonstandard_macro_braces.rs#L143-L184\nstandard-macro-braces = [\n    { name = \"assert\", brace = \"(\" },\n    { name = \"assert_eq\", brace = \"(\" },\n    { name = \"assert_ne\", brace = \"(\" },\n    { name = \"format_ident\", brace = \"(\" },\n    { name = \"panic\", brace = \"(\" },\n    { name = \"parse_quote\", brace = \"{\" },\n    { name = \"quote\", brace = \"{\" },\n    { name = \"quote_spanned\", brace = \"{\" },\n    { name = \"todo\", brace = \"(\" },\n    { name = \"unimplemented\", brace = \"(\" },\n    { name = \"unreachable\", brace = \"(\" },\n]\n"
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "impl",
          "type": "tree",
          "content": null
        },
        {
          "name": "rustfmt.toml",
          "type": "blob",
          "size": 0.0703125,
          "content": "merge_derives = false\nmax_width = 88\nformat_code_in_doc_comments = true\n"
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}