{
  "metadata": {
    "timestamp": 1736709077604,
    "page": 210,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjIxMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "tikv/raft-rs",
      "stars": 3014,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.3173828125,
          "content": "\n# OSX leaves these everywhere on SMB shares\n._*\n\n# OSX trash\n.DS_Store\n\n# Eclipse files\n.classpath\n.project\n.settings/**\n\n# Vim swap files\n*.swp\n\n# Files generated by JetBrains IDEs, e.g. IntelliJ IDEA\n.idea/\n*.iml\nout/\n\n# Vscode files\n.vscode/**\n\ntarget\ntmp\n/bin\n\nharness/target\n\nCargo.lock\nrust-toolchain\n*.rs.bk\n*.rs.fmt\n"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 6.4375,
          "content": "# 0.7.0 - 2023-03-06\n\n- Update prost to 0.11 (#496)\n- Make priority an i64 so a lower than default priority can be configured (#495)\n- Allow fetching entries in asynchronous manner (#459)\n- Support setting max-inflight-msgs in runtime to reduce memory usage (#450)\n\n# 0.6.0 - 2021-06-16\n\n- Joint Consensus became a stable feature (#379, #380, #382, #383, #385, #386, #411)\n- Ported aggresive flow control from etcd/raft (#354)\n- Introduced group commit to force geo replication safety (#359)\n- Harden read index (#355, #363)\n- Support limiting uncommitted logs (#398)\n- Support asynchronous ready (#403, #410, #417, #433)\n- Fast log append rejection (#367)\n- bytes::Bytes is used for protos if feature protobuf-codec is enabled (by default) (#438)\n- Switched to thiserror (#435)\n- Implemented committed entries pagination (#440)\n\n# 0.6.0-alpha - 2019-07-24\n\n- Protos now is a separate crate (https://github.com/pingcap/raft-rs/pull/247)\n- raft-rs is rust-2018 compatible (https://github.com/pingcap/raft-rs/pull/184)\n- Optional support for batch MsgAppend (https://github.com/pingcap/raft-rs/pull/179)\n- Harden follower read (https://github.com/pingcap/raft-rs/pull/220)\n- Migrate to slog (https://github.com/pingcap/raft-rs/pull/185)\n- Several code refactor and API clean up\n- Optional support for prost\n\n# 0.5.0 - 2019-02-11\n\n- Introduced an experimental Joint Consensus based arbitrary membership change feature. (https://github.com/pingcap/raft-rs/pull/101)\n- Harmonized `protobuf` dependency to match important downstreams. (https://github.com/pingcap/raft-rs/pull/181)\n- Unified the `Progress` collections inside `ProgressSet`. (https://github.com/pingcap/raft-rs/pull/108)\n- `Raft::new()` now returns a `Result`. (https://github.com/pingcap/raft-rs/pull/122)\n- Removed the `Progress.is_learner` field. Check via function in `ProgressSet` instead. (https://github.com/pingcap/raft-rs/pull/119)\n- Added Appvevor. Added then removed bors. (https://github.com/pingcap/raft-rs/pull/137, https://github.com/pingcap/raft-rs/pull/134)\n- Introduced getters and setters for various `Ready` fields. (https://github.com/pingcap/raft-rs/pull/120)\n- Reduced memory allocation on reset. (https://github.com/pingcap/raft-rs/pull/130)\n- Added issue templates, more links. (https://github.com/pingcap/raft-rs/pull/133, https://github.com/pingcap/raft-rs/pull/126)\n- Moved poll and quorum checking functionality into `ProgressSet`. (https://github.com/pingcap/raft-rs/pull/121)\n- The leader is now trivially in the replicate state. (https://github.com/pingcap/raft-rs/pull/146)\n- Fixed a problem with lease based read-only requests interacting with `check_quorum` wrong. (https://github.com/pingcap/raft-rs/pull/141)\n- Corrected the `single_mem_node` example. (https://github.com/pingcap/raft-rs/pull/162)\n- Fixed typos. (https://github.com/pingcap/raft-rs/pull/159)\n- Adopted [Hashbrown](https://github.com/Amanieu/hashbrown) over `FxHash`. (https://github.com/pingcap/raft-rs/pull/160)\n- Corrected learner checking in `handle_transfer_leader`. (https://github.com/pingcap/raft-rs/pull/165)\n- Resolved some lints (https://github.com/pingcap/raft-rs/pull/174, https://github.com/pingcap/raft-rs/pull/168, https://github.com/pingcap/raft-rs/pull/142, https://github.com/pingcap/raft-rs/pull/124)\n- Fixed uses of `#[feature(_)]` so that we can build on stable cleanly. (https://github.com/pingcap/raft-rs/pull/180)\n\n# 0.4.0 - 2018-09-18\n\n- No longer scan the raft log when becoming a leader. (https://github.com/pingcap/raft-rs/pull/100)\n- Added the ability to skip broadcast commit at runtime. (https://github.com/pingcap/raft-rs/pull/115)\n- Documented all public API. (https://github.com/pingcap/raft-rs/pull/87)\n- Refined a few points in the API in preparation for more work. (https://github.com/pingcap/raft-rs/pull/102)\n- Configuration logic was moved into its own module. (https://github.com/pingcap/raft-rs/pull/91)\n- Added [`fail-rs`](https://github.com/pingcap/fail-rs) based tests. (https://github.com/pingcap/raft-rs/pull/114)\n- Added benchmarking using [`criterion`](). (https://github.com/pingcap/raft-rs/pull/110)\n- Expanded tested examples. (https://github.com/pingcap/raft-rs/pull/118)\n- Improved documentation. (https://github.com/pingcap/raft-rs/pull/106)\n- Refined the CI scripts to ensure strict linting. (https://github.com/pingcap/raft-rs/pull/117)\n- Tests now output logs. Configure it with `RUST_LOG=raft=info`. (https://github.com/pingcap/raft-rs/pull/103)\n- Eased the `log` dependency. (https://github.com/pingcap/raft-rs/pull/116)\n- Formatting updates. (https://github.com/pingcap/raft-rs/pull/104)\n- Updated some dependencies. (https://github.com/pingcap/raft-rs/pull/97)\n- Use the clippy preview from Rustup. (https://github.com/pingcap/raft-rs/pull/95)\n- Adopted a Code of Conduct. (https://github.com/pingcap/raft-rs/pull/107)\n\n# 0.3.1 - 2018-07-10\n\n- Bugfix: Reset leader_id when becoming precandidate to resolve `prevote` and `check_quorum` compatability (https://github.com/pingcap/raft-rs/pull/84)\n- Bugfix: Becoming a precandidate should reset votes (https://github.com/pingcap/raft-rs/pull/83)\n- Fixed some typos, improve variable naming, and other small documentation fixes (https://github.com/pingcap/raft-rs/pull/77, https://github.com/pingcap/raft-rs/pull/79, https://github.com/pingcap/raft-rs/pull/78, https://github.com/pingcap/raft-rs/pull/80)\n- Implemented `Default` for `Config` and fleshed out an example (https://github.com/pingcap/raft-rs/pull/81)\n- Improved our changelog format (https://github.com/pingcap/raft-rs/pull/85)\n- Removed custom Rustfmt configuration (https://github.com/pingcap/raft-rs/pull/86)\n\n# 0.3.0 - 2018-06-07\n\n- Supported configuring the election timeout range (https://github.com/pingcap/raft-rs/pull/63).\n- Kept compatible with rust-protobuf 2.0 (https://github.com/pingcap/raft-rs/pull/64, https://github.com/pingcap/raft-rs/pull/75)\n- Made Raft now `Send` (https://github.com/pingcap/raft-rs/pull/67)\n- Added documentation examples (https://github.com/pingcap/raft-rs/pull/69)\n- Fixed a deadlock in the prevote migration process (https://github.com/pingcap/raft-rs/pull/42)\n\n# 0.2.0 - 2018-05-14\n\n- Deprecated sync-log and add context (https://github.com/pingcap/raft-rs/pull/59)\n- Fixed learner isolation bug (https://github.com/pingcap/raft-rs/pull/58)\n- Ported several tests (https://github.com/pingcap/raft-rs/pull/54, https://github.com/pingcap/raft-rs/pull/41)\n- Added examples (https://github.com/pingcap/raft-rs/pull/44)\n- Added fxhash (https://github.com/pingcap/raft-rs/pull/48)\n\n# 0.1.0 - 2018-02-26\n\n- initial release\n"
        },
        {
          "name": "CODE_OF_CONDUCT.md",
          "type": "blob",
          "size": 3.13671875,
          "content": "# Contributor Covenant Code of Conduct\n\n## Our Pledge\n\nIn the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to making participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, gender identity and expression, level of experience, nationality, personal appearance, race, religion, or sexual identity and orientation.\n\n## Our Standards\n\nExamples of behavior that contributes to creating a positive environment include:\n\n* Using welcoming and inclusive language\n* Being respectful of differing viewpoints and experiences\n* Gracefully accepting constructive criticism\n* Focusing on what is best for the community\n* Showing empathy towards other community members\n\nExamples of unacceptable behavior by participants include:\n\n* The use of sexualized language or imagery and unwelcome sexual attention or advances\n* Trolling, insulting/derogatory comments, and personal or political attacks\n* Public or private harassment\n* Publishing others' private information, such as a physical or electronic address, without explicit permission\n* Other conduct which could reasonably be considered inappropriate in a professional setting\n\n## Our Responsibilities\n\nProject maintainers are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response to any instances of unacceptable behavior.\n\nProject maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful.\n\n## Scope\n\nThis Code of Conduct applies both within project spaces and in public spaces when an individual is representing the project or its community. Examples of representing a project or community include using an official project e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event. Representation of a project may be further defined and clarified by project maintainers.\n\n## Enforcement\n\nInstances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting the project team at coc@pingcap.com. The project team will review and investigate all complaints, and will respond in a way that it deems appropriate to the circumstances. The project team is obligated to maintain confidentiality with regard to the reporter of an incident. Further details of specific enforcement policies may be posted separately.\n\nProject maintainers who do not follow or enforce the Code of Conduct in good faith may face temporary or permanent repercussions as determined by other members of the project's leadership.\n\n## Attribution\n\nThis Code of Conduct is adapted from the [Contributor Covenant][homepage], version 1.4, available at [http://contributor-covenant.org/version/1/4][version]\n\n[homepage]: http://contributor-covenant.org\n[version]: http://contributor-covenant.org/version/1/4/\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 5.005859375,
          "content": "# Overview\n\n**A bit of history:** The Raft-rs library started life inside TiKV, a (now CNCF) project to develop a distributed database. It has existed in some prototype form since Rust around 0.7, and has gone through many changes and evolutions. At the start of 2018 PingCAP packaged this Raft implementation for others to use under the Apache 2.0 license.\n\nRaft, as a distributed consensus algorithm, occupies a core part of the systems that utilize it. While we do not expect contributors to be experts on the algorithm, or Rust, please be aware that the review process for Raft may be longer and more strict than some other projects you have contributed to in the past.\n\n**We'd love it** if you used Raft and reported (or even fixed!) any problems you find, whether it be bugs, safety flaws, or even usability issues. You are welcome to improve existing code, clean up modules, better organize tests, add in tooling and instrumentation, and help us to everything we can to make sure the project is rock solid and an absolute joy to use.\n\nThere is a lot of work to do to get there, and we're very excited for you to consider contributing.\n\n# Process for Contributors\n\n1. **Choose, or report, any issue you want!** Try to keep things bite sized, you may have a lot of ideas, but try to limit your changes to ease future review. If your resulting pull request is too big we will ask you to split it up, and that's no fun!\n    * [These are good first issues.](https://github.com/pingcap/raft-rs/labels/Good%20First%20Issue)\n\t* [These are issues we'd love to complete with your help.](https://github.com/pingcap/raft-rs/labels/Help%20Wanted)\n\t* Many issues are \"big ideas\" which you are welcome to break down and partially complete.\n2. **Tell us you want to tackle it.** If you tell us you're working on something we are very happy to mentor you and pair with you on problems if you want. We'll try to occasionally check in on your progress and see if you need support. Doing this also helps avoid two people doing the same thing.\n3. **Tackle it!** Try to break up your work into a [story](https://about.futurelearn.com/blog/telling-stories-with-your-git-history).\n\t* Once you've opened a PR and requested reviews, try to avoid rebasing (please merge instead).\n\t* If you add any API surface, please test it.\n\t* If you add a feature, tests are required.\n\t* Benchmarks are highly encouraged.\n\t* Try to avoid panicking, return `Result<T>` instead. If you return a result, please test all possible paths do not mutate the `Raft` on failure.\n\t* Avoid public fields, use getters and setters. In the future changing a field could break an API and force a major version update.\n4. **Prepare it.** Groom your code before you send a PR. The CI will verify you did all of this.\n\t* Run `cargo test --all`, make sure they all pass.\n\t* Run `cargo bench --all -- --test`, make sure they all pass.\n\t* Run `cargo clippy --all --all-targets -- -D clippy::all`, fix any lints.\n\t* Run `cargo fmt --all`.\n5. **Submit the Pull Request.**\n\t* Make sure to link to the issue you are addressing. If there is no related issue, please describe what the PR resolves.\n\t* If you're still working on things, or you aren't ready for a full review yet, you can put `WIP:` in the title. You can use this as a chance to ask for some feedback or help.\n\t* Look at the pending changes, give it a quick browse. Use this as a chance to check for `TODOs` or newly incorrect documentation.\n\t* Someone will review your code and assign another reviewer.\n\t* Discuss and consider reflecting any feedback. If you choose to abandon the PR at this point we may choose to drive it to completion, you can let us know if you don't have more time.\n6. Once you have two approving reviews: **Your PR is merged.**\n\n# Process for Reviewers\n\n1. **Find a Pull Request** requiring review, or be requested to review one.\n2. **Review the description.**. If the description does not clearly state the problem it resolves, ask the author to change it so it does.\n3. **Thoroughly review the code.** Take your time, consider the context and possible corner cases. Anywhere which causes confusion you should request some explanation. If you think it's better as documentation in the code please specify that.\n4. If you approve of the change, use **use the 'Submit Review' button to give approval.**\n5. **Request a second reviewer,** if you think it's ready. If you gave a lot of change requests, or think the PR is in the wrong direction, you can wait to do this.\n6. If you're the second reviewer, **review it** and if it's good, leave an approval then **merge it**.\n6. If the PR is by a contributor, make sure we **thank them for their efforts**.\n\n# Becoming a Maintainer\n\nIf you contribute a major feature, or help us tackle several bugs, we may invite you to become a maintainer. As a maintainer we will work with you in any project planning. As you will help reduce our maintenance responsibility, it will be our new responsibility ensure you have a voice in the project.\n\nYou'll also get cool swag, and any time we're in your area we'll do our best to treat you to a meal and/or drinks. :)\n"
        },
        {
          "name": "Cargo.toml",
          "type": "blob",
          "size": 1.7001953125,
          "content": "[package]\nname = \"raft\"\nversion = \"0.7.0\"\nauthors = [\"The TiKV Project Developers\"]\nlicense = \"Apache-2.0\"\nkeywords = [\"raft\", \"distributed-systems\", \"ha\"]\nrepository = \"https://github.com/tikv/raft-rs\"\nreadme = \"README.md\"\nhomepage = \"https://github.com/tikv/raft-rs\"\ndocumentation = \"https://docs.rs/raft\"\ndescription = \"The rust language implementation of Raft algorithm.\"\ncategories = [\"algorithms\", \"database-implementations\"]\nedition = \"2021\"\n\n[workspace]\nmembers = [\"proto\", \"harness\", \"datadriven\"]\n\n[features]\ndefault = [\"protobuf-codec\", \"default-logger\"]\n# Enable failpoints\nfailpoints = [\"fail/failpoints\"]\nprotobuf-codec = [\"raft-proto/protobuf-codec\", \"bytes\"]\nprost-codec = [\"raft-proto/prost-codec\"]\ndefault-logger = [\"slog-stdlog\", \"slog-envlogger\", \"slog-term\"]\n\n# Make sure to synchronize updates with Harness.\n[dependencies]\nbytes = { version = \"1\", optional = true }\nfxhash = \"0.2.1\"\nfail = { version = \"0.4\", optional = true }\ngetset = \"0.1.1\"\nprotobuf = \"2\"\nthiserror = \"1.0\"\nraft-proto = { path = \"proto\", version = \"0.7.0\", default-features = false }\nrand = \"0.8\"\nslog = \"2.2\"\nslog-envlogger = { version = \"2.1.0\", optional = true }\nslog-stdlog = { version = \"4\", optional = true }\nslog-term = { version = \"2.4.0\", optional = true }\n\n[dev-dependencies]\ncriterion = \"0.3\"\nregex = \"1\"\nslog-async = \"2.3.0\"\nslog-envlogger = \"2.1.0\"\nslog-stdlog = \"4\"\nslog-term = \"2.4.0\"\nanyhow = \"1.0.40\"\ndatadriven = { path = \"datadriven\", version = \"0.1.0\" }\nitertools = \"0.10.0\"\n\n[[bench]]\nname = \"benches\"\nharness = false\n\n[badges]\ntravis-ci = { repository = \"tikv/raft-rs\" }\n\n[[example]]\nname = \"single_mem_node\"\npath = \"examples/single_mem_node/main.rs\"\n\n[[example]]\nname = \"five_mem_node\"\npath = \"examples/five_mem_node/main.rs\"\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 11.05859375,
          "content": "Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"{}\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright [yyyy] [name of copyright owner]\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 4.900390625,
          "content": "# Raft\n\n[![CI](https://github.com/tikv/raft-rs/actions/workflows/ci.yml/badge.svg?branch=master)](https://github.com/tikv/raft-rs/actions/workflows/ci.yml)\n[![Documentation](https://docs.rs/raft/badge.svg)](https://docs.rs/raft/)\n[![Crates.io](https://img.shields.io/crates/v/raft.svg)](https://crates.io/crates/raft)\n[![dependency status](https://deps.rs/repo/github/tikv/raft-rs/status.svg)](https://deps.rs/repo/github/tikv/raft-rs)\n\n## Problem and Importance\n\nWhen building a distributed system one principal goal is often to build in *fault-tolerance*. That is, if one particular node in a network goes down, or if there is a network partition, the entire cluster does not fall over. The cluster of nodes taking part in a distributed consensus protocol must come to agreement regarding values, and once that decision is reached, that choice is final.\n\nDistributed Consensus Algorithms often take the form of a replicated state machine and log. Each state machine accepts inputs from its log, and represents the value(s) to be replicated, for example, a hash table. They allow a collection of machines to work as a coherent group that can survive the failures of some of its members.\n\nTwo well known Distributed Consensus Algorithms are Paxos and Raft. Paxos is used in systems like [Chubby](http://research.google.com/archive/chubby.html) by Google, and Raft is used in things like [`tikv`](https://github.com/tikv/tikv) or [`etcd`](https://github.com/etcd-io/etcd). Raft is generally seen as a more understandable and simpler to implement than Paxos.\n\n## Design\n\nRaft replicates the state machine through logs. If you can ensure that all the machines have the same sequence of logs, after applying all logs in order, the state machine will reach a consistent state.\n\nA complete Raft model contains 4 essential parts:\n\n1. Consensus Module, the core consensus algorithm module;\n\n2. Log, the place to keep the Raft logs;\n\n3. State Machine, the place to save the user data;\n\n4. Transport, the network layer for communication.\n\n![The design of the Raft crate](media/the-design-of-raft-rs.png)\n\n> Note: This Raft implementation in Rust includes the core Consensus Module only, not the other parts. The core Consensus Module in the Raft crate is customizable, flexible, and resilient. You can directly use the Raft crate, but you will need to build your own Log, State Machine and Transport components.\n\n## Using the raft crate\n\nYou can use raft with either [rust-protobuf](https://github.com/pingcap/rust-protobuf) or [Prost](https://github.com/tokio-rs/prost) to encode/decode gRPC messages. We use rust-protobuf by default. To use Prost, build (or depend on) Raft using the `prost-codec` feature and without default features.\n\n## Developing the Raft crate\n\n`Raft` is built using the latest version of `stable` Rust, using [the 2018 edition](https://doc.rust-lang.org/edition-guide/rust-2018/).\nMinimum supported version is `1.44.0`.\n\nUsing `rustup` you can get started this way:\n\n```bash\nrustup component add clippy\nrustup component add rustfmt\n```\n\nIn order to have your PR merged running the following must finish without error:\n\n```bash\ncargo test --all && \\\ncargo clippy --all --all-targets -- -D clippy::all   && \\\ncargo fmt --all -- --check\n```\n\nYou may optionally want to install `cargo-watch` to allow for automated rebuilding while editing:\n\n```bash\ncargo watch -s \"cargo check\"\n```\n\n### Modifying Protobufs\n\nSee [instructions](proto/README.md) in the proto subdirectory.\n\n### Benchmarks\n\nWe use [Criterion](https://github.com/japaric/criterion.rs) for benchmarking.\n\n> It's currently an ongoing effort to build an appropriate benchmarking suite. If you'd like to help out please let us know! [Interested?](https://github.com/tikv/raft-rs/issues/109)\n\nYou can run the benchmarks by installing `gnuplot` then running:\n\n```bash\ncargo bench\n```\n\nYou can check `target/criterion/report/index.html` for plots and charts relating to the benchmarks.\n\nYou can check the performance between two branches:\n\n```bash\ngit checkout master\ncargo bench --bench benches -- --save-baseline master\ngit checkout other\ncargo bench --bench benches -- --baseline master\n```\n\nThis will report relative increases or decreased for each benchmark.\n\n## Acknowledgments\n\nThanks [etcd](https://github.com/etcd-io/raft) for providing the amazing Go implementation!\n\n## Projects using the Raft crate\n\n- [TiKV](https://github.com/tikv/tikv), a distributed transactional key value database powered by Rust and Raft.\n\n## Links for Further Research\n\n* [The Raft site](https://raftconsensus.github.io/)\n* [The Secret Lives of Data - Raft](http://thesecretlivesofdata.com/raft/)\n* [Raft Paper](https://raft.github.io/raft.pdf)\n* [Raft Dissertation](https://github.com/ongardie/dissertation#readme)\n* [Raft Refloated](https://www.cl.cam.ac.uk/~ms705/pub/papers/2015-osr-raft.pdf)\n* [Implement Raft in Rust](https://www.pingcap.com/blog/implement-raft-in-rust/)\n* [Using Raft in Rust at RustConf 2018](https://www.youtube.com/watch?v=MSrcdhGRsOE)\n"
        },
        {
          "name": "benches",
          "type": "tree",
          "content": null
        },
        {
          "name": "bors.toml",
          "type": "blob",
          "size": 0.0966796875,
          "content": "status = [\n  \"continuous-integration/travis-ci/push\",\n  \"continuous-integration/appveyor/branch\"\n]\n"
        },
        {
          "name": "datadriven",
          "type": "tree",
          "content": null
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "harness",
          "type": "tree",
          "content": null
        },
        {
          "name": "media",
          "type": "tree",
          "content": null
        },
        {
          "name": "proto",
          "type": "tree",
          "content": null
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}