{
  "metadata": {
    "timestamp": 1736709093696,
    "page": 240,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjI0MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "valence-rs/valence",
      "stars": 2894,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".devcontainer",
          "type": "tree",
          "content": null
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.2099609375,
          "content": "/target\nCargo.lock\n.vscode\n.idea\n*.iml\n.gradle\n/extractor/build\n/extractor/out\n/extractor/classes\n/extractor/run\n/extractor/bin\nrust-mc-bot\n.asset_cache/\n/velocity\nflamegraph*.svg\nperf.data\nperf.data.old\n/graph.svg\n"
        },
        {
          "name": "CODE_OF_CONDUCT.md",
          "type": "blob",
          "size": 5.3955078125,
          "content": "\n# Contributor Covenant Code of Conduct\n\n## Our Pledge\n\nWe as members, contributors, and leaders pledge to make participation in our\ncommunity a harassment-free experience for everyone, regardless of age, body\nsize, visible or invisible disability, ethnicity, sex characteristics, gender\nidentity and expression, level of experience, education, socio-economic status,\nnationality, personal appearance, race, caste, color, religion, or sexual\nidentity and orientation.\n\nWe pledge to act and interact in ways that contribute to an open, welcoming,\ndiverse, inclusive, and healthy community.\n\n## Our Standards\n\nExamples of behavior that contributes to a positive environment for our\ncommunity include:\n\n* Demonstrating empathy and kindness toward other people\n* Being respectful of differing opinions, viewpoints, and experiences\n* Giving and gracefully accepting constructive feedback\n* Accepting responsibility and apologizing to those affected by our mistakes,\n  and learning from the experience\n* Focusing on what is best not just for us as individuals, but for the overall\n  community\n\nExamples of unacceptable behavior include:\n\n* The use of sexualized language or imagery, and sexual attention or advances of\n  any kind\n* Trolling, insulting or derogatory comments, and personal or political attacks\n* Public or private harassment\n* Publishing others' private information, such as a physical or email address,\n  without their explicit permission\n* Other conduct which could reasonably be considered inappropriate in a\n  professional setting\n\n## Enforcement Responsibilities\n\nCommunity leaders are responsible for clarifying and enforcing our standards of\nacceptable behavior and will take appropriate and fair corrective action in\nresponse to any behavior that they deem inappropriate, threatening, offensive,\nor harmful.\n\nCommunity leaders have the right and responsibility to remove, edit, or reject\ncomments, commits, code, wiki edits, issues, and other contributions that are\nnot aligned to this Code of Conduct, and will communicate reasons for moderation\ndecisions when appropriate.\n\n## Scope\n\nThis Code of Conduct applies within all community spaces, and also applies when\nan individual is officially representing the community in public spaces.\nExamples of representing our community include using an official e-mail address,\nposting via an official social media account, or acting as an appointed\nrepresentative at an online or offline event.\n\n## Enforcement\n\nInstances of abusive, harassing, or otherwise unacceptable behavior may be\nreported to the community leaders responsible for enforcement at\nryanj00a at gmail dot com (Email address subject to change).\nAll complaints will be reviewed and investigated promptly and fairly.\n\nAll community leaders are obligated to respect the privacy and security of the\nreporter of any incident.\n\n## Enforcement Guidelines\n\nCommunity leaders will follow these Community Impact Guidelines in determining\nthe consequences for any action they deem in violation of this Code of Conduct:\n\n### 1. Correction\n\n**Community Impact**: Use of inappropriate language or other behavior deemed\nunprofessional or unwelcome in the community.\n\n**Consequence**: A private, written warning from community leaders, providing\nclarity around the nature of the violation and an explanation of why the\nbehavior was inappropriate. A public apology may be requested.\n\n### 2. Warning\n\n**Community Impact**: A violation through a single incident or series of\nactions.\n\n**Consequence**: A warning with consequences for continued behavior. No\ninteraction with the people involved, including unsolicited interaction with\nthose enforcing the Code of Conduct, for a specified period of time. This\nincludes avoiding interactions in community spaces as well as external channels\nlike social media. Violating these terms may lead to a temporary or permanent\nban.\n\n### 3. Temporary Ban\n\n**Community Impact**: A serious violation of community standards, including\nsustained inappropriate behavior.\n\n**Consequence**: A temporary ban from any sort of interaction or public\ncommunication with the community for a specified period of time. No public or\nprivate interaction with the people involved, including unsolicited interaction\nwith those enforcing the Code of Conduct, is allowed during this period.\nViolating these terms may lead to a permanent ban.\n\n### 4. Permanent Ban\n\n**Community Impact**: Demonstrating a pattern of violation of community\nstandards, including sustained inappropriate behavior, harassment of an\nindividual, or aggression toward or disparagement of classes of individuals.\n\n**Consequence**: A permanent ban from any sort of public interaction within the\ncommunity.\n\n## Attribution\n\nThis Code of Conduct is adapted from the [Contributor Covenant][homepage],\nversion 2.1, available at\n[https://www.contributor-covenant.org/version/2/1/code_of_conduct.html][v2.1].\n\nCommunity Impact Guidelines were inspired by\n[Mozilla's code of conduct enforcement ladder][Mozilla CoC].\n\nFor answers to common questions about this code of conduct, see the FAQ at\n[https://www.contributor-covenant.org/faq][FAQ]. Translations are available at\n[https://www.contributor-covenant.org/translations][translations].\n\n[homepage]: https://www.contributor-covenant.org\n[v2.1]: https://www.contributor-covenant.org/version/2/1/code_of_conduct.html\n[Mozilla CoC]: https://github.com/mozilla/diversity\n[FAQ]: https://www.contributor-covenant.org/faq\n[translations]: https://www.contributor-covenant.org/translations\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 6.1611328125,
          "content": "Valence has a public Discord server [here](https://discord.gg/8Fqqy9XrYb) and GitHub discussions [here](https://github.com/valence-rs/valence/discussions). Check those out if you have additional questions\nor comments.\n\n# What version of Rust should I use?\n\nTo _use_ Valence, only the most recent stable version of Rust is required. However, contributors should know that\nunstable `rustfmt` settings are enabled in the project. To run `rustfmt` with the nightly toolchain, use\nthe `cargo +nightly fmt` command.\n\n# What issues should I work on?\n\nIssues\nlabelled [good first issue](https://github.com/valence-rs/valence/issues?q=is%3Aissue+is%3Aopen+label%3A%22good+first+issue%22)\nare a good place to start. This label is reserved for issues that are relatively uncontroversial and shouldn't require too much specialized domain\nknowledge to complete. New contributors are not required to start with these issues.\n\nIf you plan to work on something that's not an open issue, consider making one first so that it can be discussed. This\nway, your contribution will not be rejected when it is submitted for review.\n\n## Playgrounds\n\nPlaygrounds are meant to provide a quick and minimal environment to test out new code or reproduce bugs. Playgrounds are also a great way test out quick ideas. This is the preferred method for providing code samples in issues and pull requests.\n\nTo get started with a new playground, copy the template to `playground.rs`.\n\n```bash\ncp tools/playground/src/playground.template.rs tools/playground/src/playground.rs\n```\n\nMake your changes to `crates/playground/src/playground.rs`. To run it:\n\n```bash\ncargo run -p playground # simply run the playground, or\ncargo watch -c -x \"run -p playground\" # run the playground and watch for changes\n```\n\n# Automatic Checks\n\nWhen you submit a pull request, your code will automatically run through clippy, rustfmt, etc. to check for any errors.\nIf an error does occur, it must be fixed before the pull request can be merged.\n\n# Code Conventions\n\nHere are some rules you should follow for your code. Generally the goal here is to be consistent with existing code, the\nstandard library, and the Rust ecosystem as a whole. Nonconforming code is not necessarily a blocker for accepting your\ncontribution, but conformance is advised.\n\nThese guidelines are intended to complement\nthe [Rust API Guidelines](https://rust-lang.github.io/api-guidelines/naming.html).\n\n## Top-down Modules\n\nReaders of the module should be able to understand your code by reading it from top to bottom.\nWhenever [items](https://doc.rust-lang.org/reference/items.html) in your module form a parent-child relationship, the\nparent should be written above the children. Typically this means that important `pub` items are placed before private\nimplementation details.\n\nFor instance, here are three functions. Notice how the definition of `foo` is placed above its dependencies. The parent\nis `foo` while its children are `bar` and `baz`.\n\n```rust\npub fn foo() {\n    bar();\n    baz();\n}\n\nfn bar() {}\n\nfn baz() {}\n```\n\nThis guideline applies to types as well.\n\n```rust\npub struct Foo {\n    bars: Vec<Bar>,\n}\n\nstruct Bar {\n    // ...\n}\n```\n\n## Getters and Setters\n\nGetters should not start with a `get_` prefix.\n\n<table>\n<tr>\n<th>Good</th>\n<th>Bad</th>\n</tr>\n<tr>\n<td>\n\n```rust\nimpl Foo {\n    fn bar(&self) -> &Bar { ... }\n    fn set_bar(&mut self, bar: Bar) { ... }\n}\n```\n</td>\n<td>\n\n```rust\nimpl Foo {\n    fn get_bar(&self) -> &Bar { ... }\n    fn set_bar(&mut self, bar: Bar) { ... }\n}\n```\n</td>\n</tr>\n</table>\n\nSee [`SocketAddr`](https://doc.rust-lang.org/stable/std/net/enum.SocketAddr.html) for an example of a standard library\ntype that uses this convention.\n\nUnder appropriate circumstances a different naming scheme can be\nused. [`Command`](https://doc.rust-lang.org/stable/std/process/struct.Command.html) is a standard type that demonstrates\nthis.\n\nIf a `bar` field exists and no invariants need to be maintained by the getters and setters, it is usually better to make\nthe `bar` field public.\n\n## Bevy `Event`s\n\nTypes intended to be used as events in [`EventReader`] and [`EventWriter`] should end in the `Event` suffix.\nThis is helpful for readers trying to distinguish events from other types in the program.\n\n<table>\n<tr>\n<th>Good</th>\n<th>Bad</th>\n</tr>\n<tr>\n<td>\n\n```rust\nstruct CollisionEvent { ... }\n\nfn handle_collisions(mut events: EventReader<CollisionEvent>) { ... }\n```\n</td>\n<td>\n\n```rust\nstruct Collision { ... }\n\nfn handle_collisions(mut events: EventReader<Collision>) { ... }\n```\n</td>\n</tr>\n</table>\n\n[`EventReader`]: https://docs.rs/bevy_ecs/latest/bevy_ecs/event/struct.EventReader.html\n[`EventWriter`]: https://docs.rs/bevy_ecs/latest/bevy_ecs/event/struct.EventWriter.html\n\n## Specifying Dependencies\n\nWhen adding a new dependency to a crate, make sure you specify the full semver version.\n\n<table>\n<tr>\n<th>Good</th>\n<th>Bad</th>\n</tr>\n<tr>\n<td>\n\n```toml\n[dependencies]\nserde_json = \"1.0.96\"\n```\n</td>\n<td>\n\n```toml\n[dependencies]\nserde_json = \"1\"\n```\n</td>\n</tr>\n</table>\n\n## Writing Unit Tests\nWhen writing unit tests, unwrap errors instead of returning them.\nPanicking displays the line and column of the error, which is useful for debugging.\nThis information is lost when the error is returned.\n\n<table>\n<tr>\n<th>Good</th>\n<th>Bad</th>\n</tr>\n<tr>\n<td>\n\n```rust\n#[test]\nfn my_test() {\n    some_fallible_func().unwrap();\n}\n```\n</td>\n<td>\n\n```rust\n#[test]\nfn my_test() -> anyhow::Result<()> {\n    some_fallible_func()?;\n    // ...\n    Ok(())\n}\n```\n</td>\n</tr>\n</table>\n\n## Documentation\n\nAll public items should be documented. Documentation must be written with complete sentences and correct grammar.\nConsider using [intra-doc links](https://doc.rust-lang.org/rustdoc/write-documentation/linking-to-items-by-name.html)\nwhere appropriate.\n\n## Unit Tests\n\nUnit tests help your contributions last! They ensure that your code works as expected and that it continues to work in\nthe future.\n\nwhole-server unit tests can be found in [`/src/tests/`](/src/tests).\n\n## Naming Quantities\n\nVariables intended to hold quantities should be written with the `_count` suffix instead of the `num_` prefix.\n\n<table>\n<tr>\n<th>Good</th>\n<th>Bad</th>\n</tr>\n<tr>\n<td>\n\n```rust\nlet block_count = ...;\n```\n</td>\n<td>\n\n```rust\nlet num_blocks = ...;\n```\n</td>\n</tr>\n</table>\n"
        },
        {
          "name": "Cargo.toml",
          "type": "blob",
          "size": 10.1435546875,
          "content": "[package]\nname = \"valence\"\nversion.workspace = true\nedition.workspace = true\ndescription = \"A framework for building Minecraft servers in Rust.\"\ndocumentation.workspace = true\nrepository.workspace = true\nreadme = \"README.md\"\nlicense.workspace = true\nkeywords = [\"minecraft\", \"gamedev\", \"server\", \"ecs\"]\ncategories = [\"game-engines\"]\ninclude = [\"/src\", \"/benches\", \"/examples\", \"/README.md\", \"/LICENSE.txt\"]\n\n[lints]\nworkspace = true\n\n[features]\ndefault = [\n    \"advancement\",\n    \"anvil\",\n    \"boss_bar\",\n    \"equipment\",\n    \"inventory\",\n    \"log\",\n    \"network\",\n    \"player_list\",\n    \"scoreboard\",\n    \"world_border\",\n    \"command\",\n    \"weather\",\n    \"testing\",\n]\nadvancement = [\"dep:valence_advancement\"]\nanvil = [\"dep:valence_anvil\"]\nboss_bar = [\"dep:valence_boss_bar\"]\nequipment = [\"dep:valence_equipment\"]\ninventory = [\"dep:valence_inventory\"]\nlog = [\"dep:bevy_log\"]\nnetwork = [\"dep:valence_network\"]\nplayer_list = [\"dep:valence_player_list\"]\nscoreboard = [\"dep:valence_scoreboard\"]\nworld_border = [\"dep:valence_world_border\"]\ncommand = [\"dep:valence_command\", \"dep:valence_command_macros\"]\nweather = [\"dep:valence_weather\"]\ntesting = []\n\n[dependencies]\nanyhow.workspace = true\nbevy_app.workspace = true\nbevy_ecs.workspace = true\nbevy_log = { workspace = true, optional = true }\nbytes.workspace = true\nrand.workspace = true\nuuid.workspace = true\nvalence_advancement = { workspace = true, optional = true }\nvalence_anvil = { workspace = true, optional = true, features = [\n    \"bevy_plugin\",\n] }\nvalence_boss_bar = { workspace = true, optional = true }\nvalence_command = { workspace = true, optional = true }\nvalence_command_macros = { workspace = true, optional = true }\nvalence_ident_macros.workspace = true\nvalence_ident.workspace = true\nvalence_equipment = { workspace = true, optional = true }\nvalence_inventory = { workspace = true, optional = true }\nvalence_lang.workspace = true\nvalence_network = { workspace = true, optional = true }\nvalence_player_list = { workspace = true, optional = true }\nvalence_registry.workspace = true\nvalence_scoreboard = { workspace = true, optional = true }\nvalence_server.workspace = true\nvalence_text.workspace = true\nvalence_weather = { workspace = true, optional = true }\nvalence_world_border = { workspace = true, optional = true }\n\n[dev-dependencies]\nanyhow.workspace = true\nclap.workspace = true\ndivan.workspace = true\nflume.workspace = true\nnoise.workspace = true     # For the terrain example.\ntracing.workspace = true\n\n[dev-dependencies.reqwest]\nworkspace = true\ndefault-features = false\nfeatures = [\"rustls-tls\", \"blocking\", \"stream\"]\n\n[[bench]]\nname = \"main\"\nharness = false\n\n[profile.dev.package.\"*\"]\nopt-level = 3\n\n[profile.dev]\nopt-level = 1\n\n[workspace]\nmembers = [\"crates/*\", \"tools/*\"]\nexclude = []\nresolver = \"2\"\n\n[workspace.package]\nversion = \"0.2.0-alpha.1+mc.1.20.1\"\nedition = \"2021\"\nrepository = \"https://github.com/valence-rs/valence\"\ndocumentation = \"https://docs.rs/valence/\"\nlicense = \"MIT\"\n\n[workspace.dependencies]\naes = \"0.8.4\"\nanyhow = { version = \"1.0.89\", features = [\"backtrace\"] }\napprox = \"0.5.1\"\narrayvec = \"0.7.6\"\nasync-trait = \"0.1.82\"\natty = \"0.2.14\"\nbase64 = \"0.22.1\"\nbevy_app = { version = \"0.14.2\", default-features = false }\nbevy_derive = \"0.14.2\"\nbevy_ecs = { version = \"0.14.2\", default-features = false, features = [\n    \"multi_threaded\",\n] }\nbevy_hierarchy = { version = \"0.14.2\", default-features = false, features = [\"bevy_app\"] }\nbevy_log = { version = \"0.14.2\" }\nbevy_mod_debugdump = { version = \"0.11.1\" }\nbevy_utils = { version = \"0.14.2\" }\nbitfield-struct = \"0.8.0\"\nbitvec = \"1.0.1\"\nbyteorder = \"1.5.0\"\nbytes = \"1.7.1\"\ncesu8 = \"1.1.0\"\ncfb8 = \"0.8.1\"\nclap = { version = \"4.5.17\", features = [\"derive\"] }\nderive_more = \"1.0.0\"\ndirectories = \"5.0.1\"\ndivan = \"0.1.14\"\neframe = { version = \"0.28.1\" }\negui = \"0.28.1\"\negui_dock = \"0.13\"\nflate2 = \"1.0.33\"\nflume = \"0.11.0\"\nfs_extra = \"1.3.0\"\nglam = \"0.29.0\"\nheck = \"0.5.0\"\nhmac = \"0.12.1\"\nimage = \"0.25.2\"\nindexmap = \"2.5.0\"\nitertools = \"0.13.0\"\njava_string = { path = \"crates/java_string\", version = \"0.1.2\" }\nlru = \"0.12.4\"\nnoise = \"0.9.0\"\nnum = \"0.4.3\"\nnum-bigint = \"0.4.6\"\nowo-colors = \"4.1.0\"\nordered-float = \"4.2.2\"\nparking_lot = \"0.12.3\"\npaste = \"1.0.15\"\npetgraph = \"0.6.5\"\npretty_assertions = \"1.4.1\"\nproc-macro2 = \"1.0.86\"\nquote = \"1.0.37\"\nrand = \"0.8.5\"\nrayon = \"1.10.0\"\nregex = \"1.10.6\"\nreqwest = { version = \"0.12.7\", default-features = false }\nrfd = \"0.14.1\"\nrsa = \"0.9.6\"\nrsa-der = \"0.3.0\"\nrustc-hash = \"2.0.0\"\nserde = \"1.0.210\"\nserde-value = \"0.7.0\"\nserde_json = \"1.0.128\"\nsha1 = \"0.10.6\"\nsha2 = \"0.10.8\"\nsyn = \"2.0.77\"\nsyntect = { version = \"5.2.0\", default-features = false }\ntempfile = \"3.12.0\"\nthiserror = \"1.0.63\"\ntime = \"0.3.36\"\ntokio = { version = \"1.40.0\", features = [\"full\"] }\ntoml = \"0.8.19\"\ntracing = \"0.1.40\"\ntracing-subscriber = \"0.3.18\"\nurl = { version = \"2.5.2\", features = [\"serde\"] }\nuuid = \"1.10.0\"\nvalence = { path = \".\", version = \"0.2.0-alpha.1\" }\nvalence_advancement = { path = \"crates/valence_advancement\", version = \"0.2.0-alpha.1\" }\nvalence_anvil = { path = \"crates/valence_anvil\", version = \"0.1.0\" }\nvalence_boss_bar = { path = \"crates/valence_boss_bar\", version = \"0.2.0-alpha.1\" }\nvalence_build_utils = { path = \"crates/valence_build_utils\", version = \"0.2.0-alpha.1\" }\nvalence_command = { path = \"crates/valence_command\", version = \"0.2.0-alpha.1\" }\nvalence_command_macros = { path = \"crates/valence_command_macros\", version = \"0.2.0-alpha.1\" }\nvalence_entity = { path = \"crates/valence_entity\", version = \"0.2.0-alpha.1\" }\nvalence_generated = { path = \"crates/valence_generated\", version = \"0.2.0-alpha.1\" }\nvalence_ident = { path = \"crates/valence_ident\", version = \"0.2.0-alpha.1\" }\nvalence_ident_macros = { path = \"crates/valence_ident_macros\", version = \"0.2.0-alpha.1\" }\nvalence_equipment = { path = \"crates/valence_equipment\", version = \"0.2.0-alpha.1\" }\nvalence_inventory = { path = \"crates/valence_inventory\", version = \"0.2.0-alpha.1\" }\nvalence_lang = { path = \"crates/valence_lang\", version = \"0.2.0-alpha.1\" }\nvalence_math = { path = \"crates/valence_math\", version = \"0.2.0-alpha.1\" }\nvalence_nbt = { path = \"crates/valence_nbt\", features = [\n    \"uuid\",\n], version = \"0.8.0\" }\nvalence_network = { path = \"crates/valence_network\", version = \"0.2.0-alpha.1\" }\nvalence_player_list = { path = \"crates/valence_player_list\", version = \"0.2.0-alpha.1\" }\nvalence_protocol = { path = \"crates/valence_protocol\", version = \"0.2.0-alpha.1\" }\nvalence_protocol_macros = { path = \"crates/valence_protocol_macros\", version = \"0.2.0-alpha.1\" }\nvalence_registry = { path = \"crates/valence_registry\", version = \"0.2.0-alpha.1\" }\nvalence_scoreboard = { path = \"crates/valence_scoreboard\", version = \"0.2.0-alpha.1\" }\nvalence_server = { path = \"crates/valence_server\", version = \"0.2.0-alpha.1\" }\nvalence_server_common = { path = \"crates/valence_server_common\", version = \"0.2.0-alpha.1\" }\nvalence_text = { path = \"crates/valence_text\", version = \"0.2.0-alpha.1\" }\nvalence_weather = { path = \"crates/valence_weather\", version = \"0.2.0-alpha.1\" }\nvalence_world_border = { path = \"crates/valence_world_border\", version = \"0.2.0-alpha.1\" }\nvek = \"0.17.1\"\nzip = \"2.2.0\"\n\n[workspace.lints.rust]\n# missing_debug_implementations = \"warn\" # TODO: enable me.`\n# missing_docs = \"warn\"\nnonstandard_style = { level = \"warn\", priority = -1 }\n# rust_2018_idioms = { level = \"warn\", priority = -1 }\nunexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(unstable_doc)'] }\nunreachable_pub = \"warn\"\nunused_import_braces = \"warn\"\nunused_lifetimes = \"warn\"\n\n[workspace.lints.clippy]\nalloc_instead_of_core = \"warn\"\nas_ptr_cast_mut = \"warn\"\nas_underscore = \"warn\"\nbool_to_int_with_if = \"warn\"\ncase_sensitive_file_extension_comparisons = \"warn\"\ncast_lossless = \"warn\"\nchecked_conversions = \"warn\"\ncloned_instead_of_copied = \"warn\"\ncopy_iterator = \"warn\"\ndbg_macro = \"warn\"\ndoc_link_with_quotes = \"warn\"\ndoc_markdown = \"warn\"\nempty_enum_variants_with_brackets = \"warn\"\nempty_structs_with_brackets = \"warn\"\nexplicit_deref_methods = \"warn\"\nexplicit_into_iter_loop = \"warn\"\nexplicit_iter_loop = \"warn\"\nfilter_map_next = \"warn\"\nflat_map_option = \"warn\"\nformat_push_string = \"warn\"\nfrom_iter_instead_of_collect = \"warn\"\nget_unwrap = \"warn\"\n# if_then_some_else_none = \"warn\" # TODO: Too many false positives.\nignored_unit_patterns = \"warn\"\nimpl_trait_in_params = \"warn\"\nimplicit_clone = \"warn\"\ninconsistent_struct_constructor = \"warn\"\ninefficient_to_string = \"warn\"\ninfinite_loop = \"warn\"\ninto_iter_without_iter = \"warn\"\ninvalid_upcast_comparisons = \"warn\"\niter_filter_is_ok = \"warn\"\niter_filter_is_some = \"warn\"\niter_not_returning_iterator = \"warn\"\n# iter_over_hash_type = \"warn\" # TODO: enable me.\niter_without_into_iter = \"warn\"\nlarge_stack_arrays = \"warn\"\nlarge_types_passed_by_value = \"warn\"\nmacro_use_imports = \"warn\"\nmanual_assert = \"warn\"\nmanual_instant_elapsed = \"warn\"\nmanual_is_variant_and = \"warn\"\nmanual_let_else = \"warn\"\nmanual_ok_or = \"warn\"\nmanual_string_new = \"warn\"\nmap_unwrap_or = \"warn\"\nmatch_bool = \"warn\"\nmatch_wildcard_for_single_variants = \"warn\"\nmismatching_type_param_order = \"warn\"\nmissing_fields_in_debug = \"warn\"\nmixed_read_write_in_expression = \"warn\"\nmod_module_files = \"warn\"\n# multiple_inherent_impl = \"warn\" TODO: enable me.\nmut_mut = \"warn\"\nmutex_atomic = \"warn\"\nneedless_bitwise_bool = \"warn\"\nneedless_continue = \"warn\"\nneedless_for_each = \"warn\"\nneedless_raw_string_hashes = \"warn\"\nneedless_raw_strings = \"warn\"\nnegative_feature_names = \"warn\"\nno_mangle_with_rust_abi = \"warn\"\noption_as_ref_cloned = \"warn\"\npub_underscore_fields = \"warn\"\nrc_buffer = \"warn\"\nrc_mutex = \"warn\"\nredundant_else = \"warn\"\nredundant_feature_names = \"warn\"\nref_patterns = \"warn\"\nrest_pat_in_fully_bound_structs = \"warn\"\nsemicolon_outside_block = \"warn\"\nstr_to_string = \"warn\"\nstring_lit_chars_any = \"warn\"\nstring_to_string = \"warn\"\nstruct_field_names = \"warn\"\ntests_outside_test_module = \"warn\"\n# todo = \"warn\"\ntrivially_copy_pass_by_ref = \"warn\"\ntry_err = \"warn\"\ntype_complexity = \"allow\"\n# undocumented_unsafe_blocks = \"warn\"\nuninlined_format_args = \"warn\"\nunnecessary_join = \"warn\"\n# unnecessary_safety_doc = \"warn\"\nunnecessary_self_imports = \"warn\"\nunneeded_field_pattern = \"warn\"\nunnested_or_patterns = \"warn\"\nunseparated_literal_suffix = \"warn\"\nunused_self = \"warn\"\nused_underscore_binding = \"warn\"\nwildcard_dependencies = \"warn\"\nzero_sized_map_values = \"warn\"\n\n[workspace.lints.rustdoc]\nunescaped_backticks = \"warn\"\n"
        },
        {
          "name": "LICENSE.txt",
          "type": "blob",
          "size": 1.0439453125,
          "content": "MIT License\n\nCopyright (c) 2022 Ryan Johnson\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 5.287109375,
          "content": "<p align=\"center\">\n    <img src=\"https://raw.githubusercontent.com/valence-rs/valence/main/assets/logo-full.svg\" width=\"650\" align=\"center\">\n</p>\n\n<p align=\"center\">\n    <a href=\"https://github.com/valence-rs/valence/blob/main/LICENSE.txt\">\n        <img src=\"https://img.shields.io/github/license/valence-rs/valence\"\n            alt=\"license\"></a>\n    <a href=\"https://crates.io/crates/valence\">\n      <img src=\"https://img.shields.io/crates/d/valence?label=crates.io\"></a>\n    <a href=\"https://discord.gg/8Fqqy9XrYb\">\n        <img src=\"https://img.shields.io/discord/998132822239870997?logo=discord\"\n            alt=\"chat on Discord\"></a>\n    <a href=\"https://github.com/sponsors/rj00a\">\n        <img src=\"https://img.shields.io/github/sponsors/rj00a\"\n            alt=\"GitHub sponsors\"></a>\n</p>\n\nA Rust framework for building Minecraft: Java Edition servers.\n\nBuilt on top of [Bevy ECS](https://bevyengine.org/learn/book/getting-started/ecs/), Valence is an effort to create a\nMinecraft compatible server completely from scratch in Rust. You can think of Valence as a _game engine for\nMinecraft servers_. It doesn't do much by default, but by writing game logic yourself and leveraging Bevy's\npowerful [plugin system](https://bevyengine.org/learn/book/getting-started/plugins/), you can make almost anything.\n\nOpinionated features like dynamic scripting, dedicated executables, and vanilla game mechanics are all expected to be\nbuilt as optional plugins. This level of modularity is desirable for those looking to build highly custom experiences\nin Minecraft such as minigame servers.\n\n⚠️ **Valence is still early in development with many features unimplemented or incomplete. Expect to encounter bugs, limitations, and breaking changes.**\n\n# Goals\n\nValence aims to be the following:\n\n* **Complete**. Abstractions for the full breadth of the Minecraft protocol.\n* **Flexible**. Can easily extend Valence from within user code. Direct access to the Minecraft protocol is provided.\n* **Modular**. Pick and choose the components you need.\n* **Intuitive**. An API that is easy to use and difficult to misuse. Extensive documentation and examples are important.\n* **Efficient**. Optimal use of system resources with multiple CPU cores in mind. Valence uses very little memory and\n  can\n  support [thousands](https://raw.githubusercontent.com/valence-rs/valence/main/assets/many-players.png)\n  of players at the same time without lag (assuming you have the bandwidth).\n* **Up to date**. Targets the most recent stable version of Minecraft. Support for multiple versions at once is not\n  planned. However, you can use a proxy with [ViaBackwards](https://www.spigotmc.org/resources/viabackwards.27448/) to\n  achieve backwards compatibility with older clients.\n\n## Current Status\n\nHere are some noteworthy achievements:\n- `valence_nbt`: A speedy new library for Minecraft's Named Binary Tag (NBT) format.\n- Authentication, encryption, and compression\n- Block states\n- Chunks\n- Entities and metadata\n- Bounding volume hierarchy for fast spatial entity queries\n- Player list and player skins\n- Dimensions, biomes, and worlds\n- JSON Text API\n- A Fabric mod for extracting data from the game into JSON files. These files are processed by a build script to\n  generate Rust code for the project. The JSON files can be used in other projects as well.\n- Inventories\n- Items\n- Particles\n- Anvil file format (read only)\n- Proxy support ([Velocity](https://velocitypowered.com/), [Bungeecord](https://www.spigotmc.org/wiki/bungeecord/)\n  and [Waterfall](https://docs.papermc.io/waterfall))\n\nHere is a [short video](https://www.youtube.com/watch?v=jkw9fZx9Etg) showing the examples and some of\nValence's capabilities.\n\n# Getting Started\n\n## Running the Examples\n\nAfter cloning the repository, run this command to try an example.\n\n```shell\ncargo r -r --example parkour\n```\n\n I also recommend giving `game_of_life`, `terrain`, and `cow_sphere` a try.\n\nNext, open your Minecraft client and connect to the address `localhost`.\nIf all goes well you should be playing on the server.\n\n## Adding Valence as a Dependency\n\nValence is published to [crates.io](https://crates.io/crates/valence). Run `cargo add valence` to add it to your\nproject.\n\nHowever, the crates.io version is likely outdated. To use the most recent development version, add Valence as a\n[git dependency](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#specifying-dependencies-from-git-repositories).\n\n```toml\n[dependencies]\nvalence = { git = \"https://github.com/valence-rs/valence\" }\n```\n\nDocumentation from the main branch is available [here](https://valence.rs/rustdoc/valence/).\n\n# Contributing\n\nContributions are welcome! Please\nsee [CONTRIBUTING.md](https://github.com/valence-rs/valence/blob/main/CONTRIBUTING.md). You can\njoin [Discord](https://discord.gg/8Fqqy9XrYb) or [GitHub Discussions](https://github.com/valence-rs/valence/discussions)\nto discuss the project and ask questions.\n\n# License\n\nCode is licensed under [MIT](https://opensource.org/licenses/MIT) while the Valence logo is\nunder [CC BY-NC-ND 4.0](https://creativecommons.org/licenses/by-nc-nd/4.0/)\n\n# Funding\n\nIf you would like to contribute financially, consider sponsoring me (rj00a)\non [GitHub](https://github.com/sponsors/rj00a)\nor [Patreon](https://www.patreon.com/rj00a).\n\nI would love to continue working on Valence and your support would help me do that. Thanks!\n"
        },
        {
          "name": "assets",
          "type": "tree",
          "content": null
        },
        {
          "name": "benches",
          "type": "tree",
          "content": null
        },
        {
          "name": "crates",
          "type": "tree",
          "content": null
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "extractor",
          "type": "tree",
          "content": null
        },
        {
          "name": "flake.lock",
          "type": "blob",
          "size": 2.869140625,
          "content": "{\n  \"nodes\": {\n    \"flake-compat\": {\n      \"flake\": false,\n      \"locked\": {\n        \"lastModified\": 1696426674,\n        \"narHash\": \"sha256-kvjfFW7WAETZlt09AgDn1MrtKzP7t90Vf7vypd3OL1U=\",\n        \"owner\": \"edolstra\",\n        \"repo\": \"flake-compat\",\n        \"rev\": \"0f9255e01c2351cc7d116c072cb317785dd33b33\",\n        \"type\": \"github\"\n      },\n      \"original\": {\n        \"owner\": \"edolstra\",\n        \"repo\": \"flake-compat\",\n        \"type\": \"github\"\n      }\n    },\n    \"flake-utils\": {\n      \"inputs\": {\n        \"systems\": \"systems\"\n      },\n      \"locked\": {\n        \"lastModified\": 1726560853,\n        \"narHash\": \"sha256-X6rJYSESBVr3hBoH0WbKE5KvhPU5bloyZ2L4K60/fPQ=\",\n        \"owner\": \"numtide\",\n        \"repo\": \"flake-utils\",\n        \"rev\": \"c1dfcf08411b08f6b8615f7d8971a2bfa81d5e8a\",\n        \"type\": \"github\"\n      },\n      \"original\": {\n        \"owner\": \"numtide\",\n        \"repo\": \"flake-utils\",\n        \"type\": \"github\"\n      }\n    },\n    \"nixpkgs\": {\n      \"locked\": {\n        \"lastModified\": 1728326379,\n        \"narHash\": \"sha256-iMcTDurmGnOAJ1NbdBON40WYLJ+kV4WbhxwrD3zI7Qo=\",\n        \"owner\": \"nixos\",\n        \"repo\": \"nixpkgs\",\n        \"rev\": \"48bb1e89d6fecff0b857e4bd052607f5d0385a56\",\n        \"type\": \"github\"\n      },\n      \"original\": {\n        \"owner\": \"nixos\",\n        \"ref\": \"master\",\n        \"repo\": \"nixpkgs\",\n        \"type\": \"github\"\n      }\n    },\n    \"nixpkgs_2\": {\n      \"locked\": {\n        \"lastModified\": 1718428119,\n        \"narHash\": \"sha256-WdWDpNaq6u1IPtxtYHHWpl5BmabtpmLnMAx0RdJ/vo8=\",\n        \"owner\": \"NixOS\",\n        \"repo\": \"nixpkgs\",\n        \"rev\": \"e6cea36f83499eb4e9cd184c8a8e823296b50ad5\",\n        \"type\": \"github\"\n      },\n      \"original\": {\n        \"owner\": \"NixOS\",\n        \"ref\": \"nixpkgs-unstable\",\n        \"repo\": \"nixpkgs\",\n        \"type\": \"github\"\n      }\n    },\n    \"root\": {\n      \"inputs\": {\n        \"flake-compat\": \"flake-compat\",\n        \"flake-utils\": \"flake-utils\",\n        \"nixpkgs\": \"nixpkgs\",\n        \"rust-overlay\": \"rust-overlay\"\n      }\n    },\n    \"rust-overlay\": {\n      \"inputs\": {\n        \"nixpkgs\": \"nixpkgs_2\"\n      },\n      \"locked\": {\n        \"lastModified\": 1728268235,\n        \"narHash\": \"sha256-lJMFnMO4maJuNO6PQ5fZesrTmglze3UFTTBuKGwR1Nw=\",\n        \"owner\": \"oxalica\",\n        \"repo\": \"rust-overlay\",\n        \"rev\": \"25685cc2c7054efc31351c172ae77b21814f2d42\",\n        \"type\": \"github\"\n      },\n      \"original\": {\n        \"owner\": \"oxalica\",\n        \"repo\": \"rust-overlay\",\n        \"type\": \"github\"\n      }\n    },\n    \"systems\": {\n      \"locked\": {\n        \"lastModified\": 1681028828,\n        \"narHash\": \"sha256-Vy1rq5AaRuLzOxct8nz4T6wlgyUR7zLU309k9mBC768=\",\n        \"owner\": \"nix-systems\",\n        \"repo\": \"default\",\n        \"rev\": \"da67096a3b9bf56a91d16901293e51ba5b49a27e\",\n        \"type\": \"github\"\n      },\n      \"original\": {\n        \"owner\": \"nix-systems\",\n        \"repo\": \"default\",\n        \"type\": \"github\"\n      }\n    }\n  },\n  \"root\": \"root\",\n  \"version\": 7\n}\n"
        },
        {
          "name": "flake.nix",
          "type": "blob",
          "size": 1.3017578125,
          "content": "{\n  inputs = {\n    nixpkgs.url = \"github:nixos/nixpkgs/master\";\n    flake-utils.url = \"github:numtide/flake-utils\";\n    rust-overlay.url = \"github:oxalica/rust-overlay\";\n    flake-compat = {\n      url = \"github:edolstra/flake-compat\";\n      flake = false;\n    };\n  };\n  outputs = { self, nixpkgs, flake-utils, rust-overlay, ... }:\n  flake-utils.lib.eachSystem\n    [ \"x86_64-linux\" \"aarch64-linux\" ]\n    (system:\n    let\n      overlays = [ (import rust-overlay)  ];\n      pkgs = import nixpkgs {\n        inherit system overlays;\n      };\n\n      rust = pkgs.rust-bin.selectLatestNightlyWith (toolchain: toolchain.default);\n\n      appNativeBuildInputs = with pkgs; [\n          # required for the packet inspector on nix\n          pkg-config\n      ];\n      appBuildInputs = with pkgs; [\n          rust rust-analyzer\n          # dependencies for the packet inspector\n          udev alsa-lib vulkan-loader wayland\n          xorg.libX11 xorg.libXcursor xorg.libXi xorg.libXrandr\n          libxkbcommon wayland\n      ];\n    in \n    rec\n    {\n        devShell = pkgs.mkShell {\n            nativeBuildInputs = appNativeBuildInputs;\n            buildInputs = appBuildInputs;    \n            shellHook = ''\n                export LD_LIBRARY_PATH=\"$LD_LIBRARY_PATH:${pkgs.lib.makeLibraryPath appBuildInputs}\"\n            '';\n        };\n    });\n}\n"
        },
        {
          "name": "rustfmt.toml",
          "type": "blob",
          "size": 0.2919921875,
          "content": "edition = \"2021\"\nunstable_features = true\nwrap_comments = true\nimports_granularity = \"Module\"\ngroup_imports = \"StdExternalCrate\"\nformat_code_in_doc_comments = true\nformat_macro_matchers = true\nhex_literal_case = \"Lower\"\nformat_strings = true\nuse_field_init_shorthand = true\nuse_try_shorthand = true\n"
        },
        {
          "name": "shell.nix",
          "type": "blob",
          "size": 0.2841796875,
          "content": "(import (\n  let\n    lock = builtins.fromJSON (builtins.readFile ./flake.lock);\n  in fetchTarball {\n    url = \"https://github.com/edolstra/flake-compat/archive/${lock.nodes.flake-compat.locked.rev}.tar.gz\";\n    sha256 = lock.nodes.flake-compat.locked.narHash; }\n) {\n  src =  ./.;\n}).shellNix\n"
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "tools",
          "type": "tree",
          "content": null
        },
        {
          "name": "typos.toml",
          "type": "blob",
          "size": 0.1494140625,
          "content": "[files]\nextend-exclude = [\"*.svg\", \"*.json\", \"crates/java_string/src/slice.rs\"]\n\n[default]\nextend-ignore-re = ['\\d+ths', 'CC BY-NC-ND', \"trUe\", \"fAlse\"]\n"
        },
        {
          "name": "website",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}