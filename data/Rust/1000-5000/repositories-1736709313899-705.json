{
  "metadata": {
    "timestamp": 1736709313899,
    "page": 705,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjcxMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "shepmaster/snafu",
      "stars": 1555,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".cirrus.yml",
          "type": "blob",
          "size": 5.490234375,
          "content": "env:\n  RUSTFLAGS: -D warnings\n  RUSTDOCFLAGS: -D warnings\n\nstable_test_task:\n  name: \"Rust Stable\"\n  container:\n    image: rust:latest\n    cpu: 1\n    memory: 2Gi\n  cargo_cache:\n    folder: $CARGO_HOME/registry\n    fingerprint_script: cat Cargo.toml\n  setup_script:\n    - rustup component add rustfmt\n  primary_test_script:\n    - rustc --version\n    - cargo test --all\n  backtraces_impl_backtrace_crate_test_script:\n    - cargo test --manifest-path compatibility-tests/backtraces-impl-backtrace-crate/Cargo.toml\n  context_selectors_have_documentation_test_script:\n    - cargo test --manifest-path compatibility-tests/context-selectors-have-documentation/Cargo.toml\n  renamed_import_test_script:\n    - cargo test --manifest-path compatibility-tests/renamed-import/Cargo.toml\n  compile_fail_test_script:\n    - cargo test --manifest-path compatibility-tests/compile-fail/Cargo.toml\n  lint_script:\n    - >\n      for i in $(find . -name 'Cargo.toml'); do\n        pushd $(dirname $i);\n        cargo +stable fmt --all -- --check;\n        popd;\n      done\n  all_compatibility_tests_used_script:\n    - >\n      for n in compatibility-tests/*; do\n        n=$(basename $n);\n        if grep -q $n .cirrus.yml; then\n          echo \"$n found\";\n        else\n          echo \"$n missing\";\n          exit 1;\n        fi;\n      done\n  before_cache_script: rm -rf $CARGO_HOME/registry/index\n\ndoc_test_task:\n  name: \"Docs\"\n  env:\n    # unused-braces is due to https://github.com/rust-lang/rust/issues/70717\n    RUSTFLAGS: \"-D warnings -A unused-braces\"\n    RUSTDOCFLAGS: \"${RUSTFLAGS}\"\n  container:\n    image: rustlang/rust:nightly\n    cpu: 1\n    memory: 2Gi\n  cargo_cache:\n    folder: $CARGO_HOME/registry\n    fingerprint_script: cat Cargo.toml\n  version_information_script:\n    - rustc +nightly --version\n  docs_script:\n    - cargo +nightly doc\n  backtraces_impl_backtrace_crate_docs_script:\n    - cargo +nightly doc --features=backtraces-impl-backtrace-crate\n  futures_docs_script:\n    - cargo +nightly doc --features=futures\n  before_cache_script: rm -rf $CARGO_HOME/registry/index\n\ndoc_tests_task:\n  name: \"Documentation Tests\"\n  container:\n    image: rustlang/rust:nightly\n    cpu: 1\n    memory: 4Gi\n  cargo_cache:\n    folder: $CARGO_HOME/registry\n    fingerprint_script: cat Cargo.toml\n  version_information_script:\n    - rustc +nightly --version\n  backtraces_impl_backtrace_crate_doctests_script:\n    - cargo +nightly test --doc --features=backtraces-impl-backtrace-crate\n  futures_doctests_script:\n    - cargo +nightly test --doc --features=futures,internal-dev-dependencies\n  before_cache_script: rm -rf $CARGO_HOME/registry/index\n\nstable_no_std_test_task:\n  name: \"Rust Stable (no_std)\"\n  container:\n    image: rust:latest\n    cpu: 1\n    memory: 2Gi\n  cargo_cache:\n    folder: $CARGO_HOME/registry\n    fingerprint_script: cat Cargo.toml\n  setup_script:\n    - rustup target add thumbv6m-none-eabi\n  our_error_test_script:\n    - rustc --version\n    - cargo build --no-default-features --target thumbv6m-none-eabi\n  before_cache_script: rm -rf $CARGO_HOME/registry/index\n\nrust_1_81_no_std_test_task:\n  name: \"Rust 1.81 (no_std)\"\n  container:\n    image: rust:latest\n    cpu: 1\n    memory: 2Gi\n  cargo_cache:\n    folder: $CARGO_HOME/registry\n    fingerprint_script: cat Cargo.toml\n  setup_script:\n    - rustup target add thumbv6m-none-eabi\n  core_error_test_script:\n    - rustc --version\n    - cargo build --no-default-features --features=rust_1_81 --target thumbv6m-none-eabi\n  before_cache_script: rm -rf $CARGO_HOME/registry/index\n\nnightly_test_task:\n  name: \"Rust Nightly\"\n  container:\n    image: rustlang/rust:nightly\n    cpu: 1\n    memory: 2Gi\n  cargo_cache:\n    folder: $CARGO_HOME/registry\n    fingerprint_script: cat Cargo.toml\n  setup_script:\n    - rustup toolchain add stable --profile minimal\n  primary_test_script:\n    - rustc +nightly --version\n    - cargo +nightly test\n  minimum_version_derive_test_script:\n    - cp -R snafu-derive snafu-derive-non-workspace\n    - cd snafu-derive-non-workspace\n    - echo '[workspace]' >> Cargo.toml\n    - cargo +nightly -Z minimal-versions update\n    - cargo +stable build\n  minimum_version_test_script:\n    - cargo +nightly -Z minimal-versions update\n    - cargo +stable test\n  futures_test_script:\n    - cd compatibility-tests/futures/\n    - rustc --version\n    - cargo test\n  provider_api_test_script:\n    - cd compatibility-tests/provider-api/\n    - rustc --version\n    - cargo test\n  report_provider_api_test_script:\n    - cd compatibility-tests/report-provider-api/\n    - rustc --version\n    - cargo test\n  report_try_trait_test_script:\n    - cd compatibility-tests/report-try-trait/\n    - rustc --version\n    - cargo test\n  report_provider_api_test_script:\n    - cd compatibility-tests/backtrace-provider-api/\n    - rustc --version\n    - cargo test\n  before_cache_script: rm -rf $CARGO_HOME/registry/index\n\n# Our Minimal Supported Rust Version (MSRV)\nv1_56_test_task:\n  name: \"Rust 1.56\"\n  container:\n    image: rust:1.56\n    cpu: 1\n    memory: 2Gi\n  cargo_cache:\n    folder: $CARGO_HOME/registry\n    fingerprint_script: cat Cargo.toml\n  primary_test_script:\n    - rustup self update\n    - cd compatibility-tests/v1_56/\n    - rustc --version\n    - cargo test\n  before_cache_script: rm -rf $CARGO_HOME/registry/index\n\nv1_61_test_task:\n  name: \"Rust 1.61\"\n  container:\n    image: rust:1.61\n    cpu: 1\n    memory: 2Gi\n  cargo_cache:\n    folder: $CARGO_HOME/registry\n    fingerprint_script: cat Cargo.toml\n  primary_test_script:\n    - rustup self update\n    - cd compatibility-tests/v1_61/\n    - rustc --version\n    - cargo test\n  before_cache_script: rm -rf $CARGO_HOME/registry/index\n"
        },
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 0.314453125,
          "content": "# EditorConfig helps developers define and maintain consistent\n# coding styles between different editors and IDEs\n# editorconfig.org\n\nroot = true\n\n[*]\nend_of_line = lf\ncharset = utf-8\ntrim_trailing_whitespace = true\ninsert_final_newline = true\nindent_style = space\nindent_size = 4\n\n[*.md]\ntrim_trailing_whitespace = false\n"
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.029296875,
          "content": "/target\n**/*.rs.bk\nCargo.lock\n"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 19.5205078125,
          "content": "# Changelog\nAll notable changes to this project will be documented in this file.\n\nThe format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/),\nand this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0.html).\n\nSee the [upgrading guide][] for more detailed information about\nmodifying code to account for new releases.\n\n[upgrading guide]: https://docs.rs/snafu/*/snafu/guide/upgrading/index.html\n\n## [0.8.5] - 2024-09-23\n\n### Added\n\n- Implement the `core::error::Error` trait instead of\n  `std::error::Error` when the `rust_1_81` feature flag is\n  enabled. This supersedes the `unstable-core-error` feature flag.\n\n[0.8.5]: https://github.com/shepmaster/snafu/releases/tag/0.8.5\n\n## [0.8.4] - 2024-07-08\n\n### Fixed\n\n- Use the fully-qualified path to `Location` in the `location!()`\n  macro.\n\n[0.8.4]: https://github.com/shepmaster/snafu/releases/tag/0.8.4\n\n## [0.8.3] - 2024-05-24\n\n### Changed\n\n- `Report` now prints an \"Error: \" prefix when returned directly from\n  `main` or tests.\n\n- Support heck version 0.5 in addition to 0.4.\n\n[0.8.3]: https://github.com/shepmaster/snafu/releases/tag/0.8.3\n\n## [0.8.2] - 2024-03-11\n\n### Fixed\n\n- Adding a custom Whatever variant to a generic error enum is now\n  supported.\n\n- The `#[report]` macro works better on functions that require more\n  complicated type inference for their return types.\n\n[0.8.2]: https://github.com/shepmaster/snafu/releases/tag/0.8.2\n\n## [0.8.1] - 2024-02-26\n\n### Added\n\n- Error types that use constant generics are now supported.\n\n[0.8.1]: https://github.com/shepmaster/snafu/releases/tag/0.8.1\n\n## [0.8.0] - 2023-12-28\n\n### Added\n\n- `snafu(transparent)` allows creating compound error types that act\n  as if they were not present, delegating thier `Display` and `Error`\n  implementations to the source error. This is useful when aggregating\n  smaller errors that already completely explain the failure.\n\n- `ResultExt::boxed` and `ResultExt::boxed_local` are available to\n  convert an error value into an owned trait object. This is useful\n  when an error type is a generic controlled by the caller.\n\n### Changed\n\n- Rust 1.56 is now the *minimum* supported Rust version. This is a\n  **breaking change**.\n\n- Rust 1.65 is now the *default* supported Rust version. This is a\n  **breaking change**.\n\n- The item type of the `ChainCompat` iterator is now `&'a (dyn Error +\n  'b)` to allow downcasting the error trait object to a concrete\n  type. This is a **breaking change**.\n\n- Error fields marked `location` are no longer automatically\n  implicitly created. This is a **breaking change**.\n\n- Adding `#[snafu]` attributes to the field of a tuple struct are now\n  errors. This is a **breaking change**.\n\n- The SNAFU copy of the `Error` trait now marks the `description` and\n  `cause` methods as deprecated, following the standard library's\n  example. This trait is only active when using SNAFU in a no_std\n  environment and no functional difference is intended.\n\n### Removed\n\n- The default `Display` implementation no longer includes the error\n  text of the source error. This is a **breaking change**.\n\n- The `backtraces` and `unstable-backtraces-impl-std` feature flags\n  have been removed. This is a **breaking change**. The `Backtrace`\n  type is now the standard library's `Backtrace` type when it is\n  available.\n\n[0.8.0]: https://github.com/shepmaster/snafu/releases/tag/0.8.0\n\n## [0.7.5] - 2023-07-09\n\n### Added\n\n- The `CleanedErrorText` iterator can be used to remove redundant\n  parts from the messages that many errors duplicate from their\n  underlying sources. This is the same behavior as `Report`, but can\n  be used in contexts other than console output, such as when\n  reporting an error in structured output like HTML or JSON.\n\n### Fixed\n\n- The documentation for the compatability feature flags now mentions\n  `rust_1_39` and shows the correct default state of `rust_1_61`.\n\n[0.7.5]: https://github.com/shepmaster/snafu/releases/tag/0.7.5\n\n## [0.7.4] - 2022-12-19\n\n### Changed\n\n- `Report` and the `#[report]` macro now remove redundant parts from\n  the messages that many errors duplicate from their underlying\n  sources.\n\n[0.7.4]: https://github.com/shepmaster/snafu/releases/tag/0.7.4\n\n## [0.7.3] - 2022-10-20\n\n### Fixed\n\n- The macro no longer generates invalid code when implicitly-generated\n  types (such as backtraces) were used in conjunction with\n  `#[snafu(source(from))]` and the type before transformation does not\n  implement `std::error::Error`.\n\n[0.7.3]: https://github.com/shepmaster/snafu/releases/tag/0.7.3\n\n## [0.7.2] - 2022-10-09\n\n### Added\n\n- `Report` can be returned from `main` or test functions to provide a\n  user-friendly display of errors.\n\n- A cheat sheet for the most common `#[snafu(...)]` attribute usages\n  has been added to the `Snafu` macro's documentation.\n\n- Optional support for using the standard library's\n  `std::backtrace::Backtrace` type via the `backtraces-impl-std`\n  feature flag.\n\n- Optional support for implementing the Provider API using the\n  `std::error::Error::provide` method via the `unstable-provider-api`\n  feature flag.\n\n- Optional support for implementing the `core::error::Error` trait\n  instead of `std::error::Error` via the `unstable-core-error` feature\n  flag.\n\n- `GenerateImplicitData` has a new method `generate_with_source`.\n\n### Changed\n\n- `ErrorCompat::iter_chain` and `ChainCompat` are now available in\n  no_std environments.\n\n- `ChainCompat` now implements `Clone`.\n\n- The `Debug` implementation for `Location` no longer shows some\n  irrelevant internal details.\n\n[0.7.2]: https://github.com/shepmaster/snafu/releases/tag/0.7.2\n\n## [0.7.1] - 2022-05-02\n\n### Added\n\n- The macro `ensure_whatever` provides the functionality of the\n  `ensure` macro for stringly-typed errors.\n\n### Changed\n\n- No longer require the `futures` feature flag to support the shim\n  implementations of standard library errors that have existed since\n  Rust 1.34.\n\n- Documentation improved to demonstrate that custom Whatever errors\n  can optionally be made `Send` and `Sync`.\n\n[0.7.1]: https://github.com/shepmaster/snafu/releases/tag/0.7.1\n\n## [0.7.0] - 2022-01-03\n\nMany breaking changes in this release can be automatically addressed\nwith the [snafu-upgrade-assistant][].\n\n[snafu-upgrade-assistant]: https://github.com/shepmaster/snafu-upgrade-assistant\n\n### Added\n\n- A crate prelude containing common macros and traits can be imported\n  via `use snafu::prelude::*`.\n\n- A ready-to-use error type `Whatever` is available to quickly start\n  reporting errors with little hassle.\n\n- \"Stringly typed\" error cases can be added to existing error types,\n  allowing you to construct errors without defining them first.\n\n- Formatting shorthand syntax for error type data fields is now supported:\n  `#[snafu(display(\"Hello {name}\"))]`.\n\n- `#[snafu(module)]` can be specified on an error type. This will\n  create a module for the error type and all associated context\n  selectors will be placed in that module.\n\n- `snafu::Location` can be added to an error type to provide\n  lightweight tracking of the source location where the error was\n  created.\n\n- `#[snafu(implicit)]` can be specified on context selector data fields\n  to automatically generate it via `snafu::GenerateImplicitData` when\n  the error is created.\n\n- `ErrorCompat::iter_chain` provides an iterator over the list of\n  causal errors.\n\n### Changed\n\n- Generated context selectors now have the suffix `Snafu`. This is a\n  **breaking change**.\n\n- `ResultExt::with_context`, `TryFutureExt::with_context`, and\n  `TryStreamExt::with_context` now pass the error into the\n  closure. This is a **breaking change**.\n\n- The `GenerateBacktrace` trait has been split into\n  `GenerateImplicitData` and `AsBacktrace`. This is a **breaking\n  change**.\n\n- Rust 1.34 is now the minimum supported Rust version. This is a\n  **breaking change**.\n\n### Removed\n\n- String attribute parsing (`#[snafu(foo = \"...\")]`) is no longer\n  supported. This is a **breaking change**.\n\n- The deprecated `eager_context` and `with_eager_context` methods have\n  been removed. This is a **breaking change**.\n\n[0.7.0]: https://github.com/shepmaster/snafu/releases/tag/0.7.0\n\n## [0.6.10] - 2020-12-03\n\n### Fixed\n\n- `ensure!` now uses a fully-qualified path to avoid a name clash when\n  the path `core` is ambiguous.\n\n[0.6.10]: https://github.com/shepmaster/snafu/releases/tag/0.6.10\n\n## [0.6.9] - 2020-09-21\n\n### Added\n\n- `#[derive(Snafu)]` is now supported on unit structs and structs with fields.\n- `ensure!` now supports trailing commas.\n\n### Fixed\n\n- The error text for a misuse of `#[snafu(context)]` was corrected.\n- More usages of `Option` in the generated code are now fully qualified.\n\n[0.6.9]: https://github.com/shepmaster/snafu/releases/tag/0.6.9\n\n## [0.6.8] - 2020-05-11\n\n### Fixed\n\n- The code generated by the `Snafu` macro no longer conflicts with a\n  local module called `core` or `snafu`.\n\n[0.6.8]: https://github.com/shepmaster/snafu/releases/tag/0.6.8\n\n## [0.6.7] - 2020-05-03\n\n### Added\n\n- Demonstration error types are now present in the guide.\n- The user's guide is now an optional feature flag. To preserve\n  compatibility, it is enabled by default, but most users can disable\n  it.\n- It is now possible to import the `snafu` crate under a different\n  name using `#[snafu(crate_root)]`.\n\n[0.6.7]: https://github.com/shepmaster/snafu/releases/tag/0.6.7\n\n## [0.6.6] - 2020-04-05\n\n### Added\n\n- Context selectors without an underlying cause now have a `build`\n  method in addition to the existing `fail` method. `build` creates\n  the error but does not wrap it in a `Result`.\n\n[0.6.6]: https://github.com/shepmaster/snafu/releases/tag/0.6.6\n\n## [0.6.5] - 2020-04-05\n\n- This version was a failed publish; please use 0.6.6 instead.\n\n[0.6.4]: https://github.com/shepmaster/snafu/releases/tag/0.6.4\n\n## [0.6.4] - 2020-04-05\n\n- This version was a failed publish; please use 0.6.6 instead.\n\n[0.6.4]: https://github.com/shepmaster/snafu/releases/tag/0.6.4\n\n## [0.6.3] - 2020-03-18\n\n### Fixed\n\n- License files are now included with the snafu-derive package.\n\n[0.6.3]: https://github.com/shepmaster/snafu/releases/tag/0.6.3\n\n## [0.6.2] - 2020-01-17\n\n### Added\n\n- Automatically-generated code no longer triggers the\n  `single_use_lifetimes` lint.\n\n[0.6.2]: https://github.com/shepmaster/snafu/releases/tag/0.6.2\n\n## [0.6.1] - 2020-01-07\n\n### Added\n\n- It is now possible to create errors that have no context using\n  `#[snafu(context(false))]`. This allows using the question mark\n  operator without calling `.context(...)`.\n\n### Fixed\n\n- Reduced the possibility for a name collision when implementing\n  `Display` when a formatted value was called `f`.\n\n[0.6.1]: https://github.com/shepmaster/snafu/releases/tag/0.6.1\n\n## [0.6.0] - 2019-11-07\n\n### Added\n\n- Optional support for using the unstable `std::backtrace::Backtrace`\n  type and implementing `std::error::Error::backtrace` via the\n  `unstable-backtraces-impl-std` feature flag.\n- Error variants can now use `Option<Backtrace>` for the `backtrace`\n  field. `Backtrace` will always have the backtrace collected, while\n  `Option<Backtrace>` requires that an environment variable be set.\n- Basic support for no-std environments.\n- The `ensure!` macro now allows creating opaque errors.\n- Context selectors have basic documentation generated. This allows\n  using `#[deny(missing_docs)]`.\n\n### Changed\n\n- Rust 1.31 is now the minimum supported Rust version. This is a\n  **breaking change**.\n- The `Backtrace` type is now always available, but does nothing by\n  default. It is recommended that the end application enables\n  backtrace functionality. This is a **breaking change**.\n- Support for `std::future::Future` has been stabilized, which means\n  the feature flag has been renamed from `unstable-futures` to\n  `futures`. This is a **breaking change**.\n- The `backtrace-crate` feature flag has been renamed to\n  `backtraces-impl-backtrace-crate`. Enabling this flag now *replaces*\n  `snafu::Backtrace` with `backtrace::Backtrace`. The `AsRef`\n  implementation has been removed. This is a **breaking change**.\n- A new trait for constructing backtraces is used instead of `Default`\n  so the `Backtrace` type no longer implements `Default` or has any\n  inherent methods. This is a **breaking change**.\n\n[0.6.0]: https://github.com/shepmaster/snafu/releases/tag/0.6.0\n\n## [0.5.0] - 2019-08-26\n\n### Added\n\n- Compiler errors are generated when SNAFU attributes are used in\n  incorrect locations. This is a **breaking change**.\n- Compiler errors are generated when SNAFU attributes are\n  duplicated. This is a **breaking change**.\n\n### Changed\n\n- `#[snafu(source(from))` implies `#[snafu(source)]` (which implies\n  `#[snafu(source(true))]`); `#[snafu(source)]` and\n  `#[snafu(source(true))]` can be removed in these cases.\n\n### Fixed\n\n- Multiple attributes can be specified inside of a single `#[snafu(...)]`.\n\n### Removed\n\n- `#[snafu(backtrace(delegate))]` on source fields is replaced by\n  `#[snafu(backtrace)]`. This is a **breaking change**.\n\n[0.5.0]: https://github.com/shepmaster/snafu/releases/tag/0.5.0\n\n## [0.4.4] - 2019-08-07\n\n### Fixed\n\n- Ignore `#[doc]` attributes that do not correspond to documentation\n  comments. This allows `#[doc(hidden)]` to be used again.\n\n### Changed\n\n- Implement `Future` and `Stream` instead of `TryFuture` and\n  `TryStream` for the combinators for the standard library's\n  futures. This allows the `Context` future combinator to be directly\n  used with `.await` and for the `Context` stream combinator to be\n  used without calling `.into_stream`.\n\n[0.4.4]: https://github.com/shepmaster/snafu/releases/tag/0.4.4\n\n## [0.4.3] - 2019-07-23\n\n### Added\n\n- Add optional conversion of `&snafu::Backtrace` into `&backtrace::Backtrace`.\n\n### Fixed\n\n- Support default generic parameters on error types.\n\n[0.4.3]: https://github.com/shepmaster/snafu/releases/tag/0.4.3\n\n## [0.4.2] - 2019-07-21\n\n### Added\n\n- Documentation comment summaries are used as the default `Display` text.\n\n### Fixed\n\n- Quieted warnings from usages of bare trait objects.\n- The `From` trait is fully-qualified to avoid name clashes.\n\n### Changed\n\n- More errors are reported per compilation attempt.\n\n[0.4.2]: https://github.com/shepmaster/snafu/releases/tag/0.4.2\n\n## [0.4.1] - 2018-05-18\n\n### Fixed\n\n- A feature flag name was rejected by crates.io and needed to be\n  updated; this release has no substantial changes beyond 0.4.0.\n\n[0.4.1]: https://github.com/shepmaster/snafu/releases/tag/0.4.1\n\n## [0.4.0] - 2018-05-18\n\n### Added\n\n- Context selectors now automatically implement `Debug`, `Copy`, and\n  `Clone`. This is a **breaking change**.\n\n- Support for futures 0.1 futures and streams is available using the\n  `futures-01` feature flag.\n\n- **Experimental** support for standard library futures and streams is\n  available using the `unstable-futures` feature flag.\n\n### Deprecated\n\n- `eager_context` and `with_eager_context` have been deprecated.\n\n### Removed\n\n- The `Context` type is no longer needed. This is a **breaking\n  change**.\n\n- SNAFU types no longer implement `Borrow<std::error::Error>`. This is\n  a **breaking change**.\n\n[0.4.0]: https://github.com/shepmaster/snafu/releases/tag/0.4.0\n\n## [0.3.1] - 2019-05-10\n\n### Fixed\n\n- Underlying error causes of `Box<dyn std::error::Error + Send +\n  Sync>` are now supported.\n\n### Deprecated\n\n- `Borrow` is no longer required to be implemented for underlying\n  error causes. In the next release containing breaking changes, the\n  automatic implementation of `Borrow<dyn std::error::Error>` for\n  SNAFU types will be removed.\n\n[0.3.1]: https://github.com/shepmaster/snafu/releases/tag/0.3.1\n\n## [0.3.0] - 2019-05-08\n\n### Added\n\n- `Borrow<std::error::Error>` is now automatically implemented for\n  SNAFU types. This is a **breaking change** as it may conflict with\n  an existing user implementation of the same trait. It is expected\n  that the number of affected users is very small.\n\n- `#[snafu(source)]` can be used to identify the field that\n  corresponds to the underlying error if it is not called `source`. It\n  can also be used to disable automatically using a field called\n  `source` for the underlying error.\n\n- `#[snafu(backtrace)]` can be used to identify the field that\n  corresponds to the backtrace if it is not called `backtrace`. It can\n  also be used to disable automatically using a field called\n  `backtrace` for the backtrace.\n\n- `#[snafu(source(from(...type..., ...expression...)))]` can be used\n  to perform transformations on the underlying error before it is\n  stored. This allows boxing of large errors to avoid bloated return\n  types or recursive errors.\n\n- The user guide has a basic comparison to Failure and migration paths\n  for common Failure patterns.\n\n### Changed\n\n- The default `Display` implementation includes the underlying error\n  message.\n\n[0.3.0]: https://github.com/shepmaster/snafu/releases/tag/0.3.0\n\n## [0.2.3] - 2019-04-24\n\n### Fixed\n\n- User-provided `where` clauses on error types are now copied to\n  SNAFU-created `impl` blocks.\n- User-provided inline trait bounds (`<T: SomeTrait>`) are no longer\n  included in SNAFU-generated type names.\n\n[0.2.3]: https://github.com/shepmaster/snafu/releases/tag/0.2.3\n\n## [0.2.2] - 2019-04-19\n\n### Fixed\n\n- Error enums with variants named `Some` or `None` no longer cause\n  name conflicts in the generated code.\n\n[0.2.2]: https://github.com/shepmaster/snafu/releases/tag/0.2.2\n\n## [0.2.1] - 2019-04-14\n\n### Added\n\n- Deriving `Snafu` on a newtype struct now creates an opaque error\n  type, suitable for conservative public APIs.\n\n[0.2.1]: https://github.com/shepmaster/snafu/releases/tag/0.2.1\n\n## [0.2.0] - 2019-03-02\n\n### Removed\n\n- `snafu::display` and `snafu_display` have been replaced with `snafu(display)`\n- `snafu_visibility` has been replaced with `snafu(visibility)`\n\n### Added\n\n- Backtraces can now be delegated to an underlying error via\n  `#[snafu(backtrace(delegate))]`.\n\n[0.2.0]: https://github.com/shepmaster/snafu/releases/tag/0.2.0\n\n## [0.1.9] - 2019-03-02\n\n### Added\n\n- Error enums with generic lifetimes and types are now supported.\n\n### Changed\n\n- The trait bounds applied to the `fail` method have been moved from\n  the implementation block to the function itself.\n\n[0.1.9]: https://github.com/shepmaster/snafu/releases/tag/0.1.9\n\n## [0.1.8] - 2019-02-27\n\n### Fixed\n\n- Visibility is now applied to context selector fields.\n\n[0.1.8]: https://github.com/shepmaster/snafu/releases/tag/0.1.8\n\n## [0.1.7] - 2019-02-27\n\n### Added\n\n- `#[snafu_visibility]` can be used to configure the visibility of\n  context selectors.\n\n[0.1.7]: https://github.com/shepmaster/snafu/releases/tag/0.1.7\n\n## [0.1.6] - 2019-02-24\n\n### Added\n\n- The `OptionExt` extension trait is now available for converting\n  `Option`s into `Result`s while adding context.\n\n[0.1.6]: https://github.com/shepmaster/snafu/releases/tag/0.1.6\n\n## [0.1.5] - 2019-02-05\n\n### Changed\n\n- Errors from the macro are more detailed and point to reasonable\n  sections of code.\n\n[0.1.5]: https://github.com/shepmaster/snafu/releases/tag/0.1.5\n\n## [0.1.4] - 2019-02-05\n\n### Added\n\n- The `ensure` macro is now available.\n\n[0.1.4]: https://github.com/shepmaster/snafu/releases/tag/0.1.4\n\n## [0.1.3] - 2019-02-04\n\n### Added\n\n- Ability to automatically capture backtraces.\n\n### Changed\n\n- Version requirements for dependencies loosened to allow compiling\n  with more crate versions.\n\n[0.1.3]: https://github.com/shepmaster/snafu/releases/tag/0.1.3\n\n## [0.1.2] - 2019-02-02\n\n### Added\n\n- Support for Rust 1.18\n\n[0.1.2]: https://github.com/shepmaster/snafu/releases/tag/0.1.2\n\n## [0.1.1] - 2019-02-01\n\n### Added\n\n- Context selectors without an underlying source now have a `fail`\n  method.\n\n- `ResultExt` now has the `eager_context` and `with_eager_context`\n   methods to eagerly convert a source `Result` into a final `Result`\n   type, skipping the intermediate `Result<_, Context<_>>` type.\n\n[0.1.1]: https://github.com/shepmaster/snafu/releases/tag/0.1.1\n\n## [0.1.0] - 2019-01-27\n\nInitial version\n\n[0.1.0]: https://github.com/shepmaster/snafu/releases/tag/0.1.0\n"
        },
        {
          "name": "CODE_OF_CONDUCT.md",
          "type": "blob",
          "size": 3.8193359375,
          "content": "# Code of Conduct\n\n## Conduct\n\n* We are committed to providing a friendly, safe and welcoming\n  environment for all, regardless of level of experience, gender\n  identity and expression, sexual orientation, disability, personal\n  appearance, body size, race, ethnicity, age, religion, nationality,\n  or other similar characteristic.\n\n* Please avoid using overtly sexual nicknames or other nicknames that\n  might detract from a friendly, safe and welcoming environment for\n  all.\n\n* Please be kind and courteous. There's no need to be mean or rude.\n\n* Respect that people have differences of opinion and that every\n  design or implementation choice carries a trade-off and numerous\n  costs. There is seldom a right answer.\n\n* Please keep unstructured critique to a minimum. If you have solid\n  ideas you want to experiment with, make a fork and see how it works.\n\n* We will exclude you from interaction if you insult, demean or harass\n  anyone. That is not welcome behavior. We interpret the term\n  \"harassment\" as including the definition in the [Citizen Code of\n  Conduct][CCoC]; if you have any lack of clarity about what might be\n  included in that concept, please read their definition. In\n  particular, we don't tolerate behavior that excludes people in\n  socially marginalized groups.\n\n* Likewise any spamming, trolling, flaming, baiting or other\n  attention-stealing behavior is not welcome.\n\n## Moderation\n\nThese are the policies for upholding our community's standards of\nconduct. If you feel that a thread needs moderation, please notify\n[@shepmaster][].\n\n1. Remarks that violate our standards of conduct, including hateful,\n   hurtful, oppressive, or exclusionary remarks, are not\n   allowed. (Cursing is allowed, but never targeting another user, and\n   never in a hateful manner.)\n\n2. Remarks that moderators find inappropriate, whether listed in the\n   code of conduct or not, are also not allowed.\n\n3. Moderators will first respond to such remarks with a warning.\n\n4. If the warning is unheeded, the user will be \"kicked,\" i.e., kicked\n   out of the communication channel to cool off.\n\n5. If the user comes back and continues to make trouble, they will be\n   banned, i.e., indefinitely excluded.\n\n6. Moderators may choose at their discretion to un-ban the user if it\n   was a first offense and they offer the offended party a genuine\n   apology.\n\n7. If a moderator bans someone and you think it was unjustified,\n   please take it up with that moderator, or with a different\n   moderator, **in private**. Complaints about bans in-channel are not\n   allowed.\n\n8. Moderators are held to a higher standard than other community\n   members. If a moderator creates an inappropriate situation, they\n   should expect less leeway than others.\n\nWe strive to go the extra step to look out for each other. Don't just\naim to be technically unimpeachable, try to be your best self. In\nparticular, avoid flirting with offensive or sensitive issues,\nparticularly if they're off-topic; this all too often leads to\nunnecessary fights, hurt feelings, and damaged trust; worse, it can\ndrive people away from the community entirely.\n\nIf someone takes issue with something you said or did, resist the urge\nto be defensive. Just stop doing what it was they complained about and\napologize. Even if you feel you were misinterpreted or unfairly\naccused, chances are good there was something you could've\ncommunicated better — remember that it's your responsibility to make\nyour fellow humans comfortable. Everyone wants to get along and we\nare all here first and foremost because we want to talk about cool\ntechnology. You will find that people will be eager to assume good\nintent and forgive as long as you earn their trust.\n\n*Adapted from the [Rust Code of Conduct][RCoC]*\n\n[@shepmaster]: https://github.com/shepmaster/\n[CCoc]: http://citizencodeofconduct.org/\n[RCoC]: https://www.rust-lang.org/policies/code-of-conduct\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 3.53125,
          "content": "# Contributor's Guide\n\nThank you for helping with SNAFU!\n\nThis document has some guidelines and tips that can help you make a contribution.\nFeel free to make a pull request to this file, too, if you learn anything during your contribution that can help others.\n\n## Code of Conduct\n\nThis project is governed by the [Code of Conduct](https://github.com/shepmaster/snafu/blob/master/CODE_OF_CONDUCT.md).\nPlease understand those guidelines, and report violations to @shepmaster.\n\n## Getting Started\n\nIf you're looking for a way to contribute - first of all, thanks!\nHere are some ideas:\n\n* Issues that we need help on are tagged [help wanted](https://github.com/shepmaster/snafu/issues?q=is%3Aissue+is%3Aopen+label%3A%22help+wanted%22)\n* Issues good for beginners are tagged [good first issue](https://github.com/shepmaster/snafu/issues?q=is%3Aissue+is%3Aopen+label%3A%22good+first+issue%22)\n* Anything that's not clear to you in the documentation, particularly in the [user's guide](https://docs.rs/snafu/latest/snafu/guide/index.html)\n\n## Communication tips\n\n* Open an issue for discussion before writing any non-trivial changes.  Often the author or other contributors can help shape an even better idea.  Or maybe someone is already working on it!\n* Even if you're making a breaking change, don't worry about updating the version number or changelog.  They're done together before a release.  Feel free to suggest some wording you like in the pull request, though.\n* We value correctness and clarity in the code, API, and docs, and it's worth putting in the time for thorough review in issues and pull requests.\n* Don't try to fix the world in a single issue or pull request.  Even small issues can sprout many good ideas, and feel free to split those into new issues.\n\n## Testing tips\n\n* We maintain compatibility with older versions of Rust, and this is enforced through compatibility testing that runs automatically when you create or update a pull request.  You can run these earlier, locally, by running `cargo test` in one of the directories under `compatibility-tests/`.  The `rust-toolchain` files there will cause the right version of Rust to be used, assuming you use rustup.  The `Cargo.toml` files there will make sure that compatible dependency versions are used, too.\n* If you're adding a new compile-time error, add a sample under `compatibility-tests/compile-fail/tests/ui/` to be sure it fails in the way you expect.\n* If you're adding a feature, please add a test for it.  This helps show your intent, and makes sure others don't accidentally break the feature.\n   * Because the majority of SNAFU code lives in snafu-derive and deals with procedural macros, integration tests are often simpler than unit tests.  They live under `tests/`.  Add to the file that sounds most relevant, or create a new one if necessary.\n   * Unit tests are still great when you're working on something that doesn't need to parse Rust source.  They follow standard unit testing practice in Rust - a `#[test]` function in a `tests` module at the bottom of the relevant source module.\n\n## General tips\n\n* Breaking changes (changes in SNAFU's interface) are OK if they're adding value.\n  * Before 1.0, this may happen relatively frequently, and will result in new minor versions.\n  * After 1.0, this should be relatively rare, but new major versions are OK with good reasons.\n* If you're making a code change, please run the code through rustfmt (`cargo fmt`) and check it with clippy (`cargo clippy`).\n* The user's guide is a valuable resource!  It's worth the time to keep up to date when adding or changing the library.\n"
        },
        {
          "name": "Cargo.toml",
          "type": "blob",
          "size": 2.27734375,
          "content": "[package]\nname = \"snafu\"\nversion = \"0.8.5\"\nauthors = [\"Jake Goulding <jake.goulding@gmail.com>\"]\nedition = \"2018\"\nrust-version = \"1.56\"\n\nreadme = \"README.md\"\ndescription = \"An ergonomic error handling library\"\ndocumentation = \"https://docs.rs/snafu\"\nrepository = \"https://github.com/shepmaster/snafu\"\n\nlicense = \"MIT OR Apache-2.0\"\n\nkeywords = [\"error\", \"ergonomic\", \"library\", \"no_std\"]\ncategories = [\"rust-patterns\", \"no-std\"]\n\nexclude = [\n  \"/.cirrus.yml\",\n  \"/.gitignore\",\n  \"/rust-toolchain\",\n]\n\n[package.metadata.docs.rs]\n# We don't use `all-features` for a few reasons:\n# - `backtraces-impl-backtrace-crate` replaces the default stdlib implementation\n# - `unstable-*` features might break with little warning\n# - `internal-dev-dependencies` is internal\nfeatures = [\"futures\", \"guide\"]\n\n[features]\ndefault = [\"std\", \"rust_1_65\"]\n\n# Implement the `std::error::Error` trait.\nstd = []\n\n# Implement the `core::error::Error` trait.\nunstable-core-error = []\n\n# Add support for `Termination` for `Report`\nrust_1_61 = [\"snafu-derive/rust_1_61\"]\n\n# `Backtrace` was stabilized\nrust_1_65 = [\"rust_1_61\"]\n\n# `core::error` was stabilized\nrust_1_81 = [\"rust_1_65\"]\n\n# The backtrace type becomes `backtrace::Backtrace`\nbacktraces-impl-backtrace-crate = [\"backtrace\"]\n\n# The std::error::Error provider API will be implemented.\nunstable-provider-api = [\"snafu-derive/unstable-provider-api\"]\n\n# Add support for `FromResidual` for `Report`\nunstable-try-trait = []\n\n# The standard library's implementation of futures\nfutures = [\"futures-core-crate\", \"pin-project\"]\n\n# Include the built-in user guide documentation\nguide = []\n\n# No public user should make use of this feature\n# https://github.com/rust-lang/cargo/issues/1596\n\"internal-dev-dependencies\" = [\"futures-crate\"]\n\n[workspace]\n# The compatibility tests each set feature flags for the library and\n# cannot be in the same crate graph.\nexclude = [\"compatibility-tests\"]\n\n[dependencies]\nsnafu-derive = { path = \"snafu-derive\", version = \"0.8.5\" }\nbacktrace = { version = \"0.3.0\", optional = true }\nfutures-crate = { package = \"futures\", version = \"0.3.11\", optional = true, default-features = false }\nfutures-core-crate = { package = \"futures-core\", version = \"0.3.0\", optional = true, default-features = false }\npin-project = { version = \"1.0.2\", optional = true, default-features = false }\n"
        },
        {
          "name": "LICENSE-APACHE",
          "type": "blob",
          "size": 10.580078125,
          "content": "                              Apache License\n                        Version 2.0, January 2004\n                     http://www.apache.org/licenses/\n\nTERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n1. Definitions.\n\n   \"License\" shall mean the terms and conditions for use, reproduction,\n   and distribution as defined by Sections 1 through 9 of this document.\n\n   \"Licensor\" shall mean the copyright owner or entity authorized by\n   the copyright owner that is granting the License.\n\n   \"Legal Entity\" shall mean the union of the acting entity and all\n   other entities that control, are controlled by, or are under common\n   control with that entity. For the purposes of this definition,\n   \"control\" means (i) the power, direct or indirect, to cause the\n   direction or management of such entity, whether by contract or\n   otherwise, or (ii) ownership of fifty percent (50%) or more of the\n   outstanding shares, or (iii) beneficial ownership of such entity.\n\n   \"You\" (or \"Your\") shall mean an individual or Legal Entity\n   exercising permissions granted by this License.\n\n   \"Source\" form shall mean the preferred form for making modifications,\n   including but not limited to software source code, documentation\n   source, and configuration files.\n\n   \"Object\" form shall mean any form resulting from mechanical\n   transformation or translation of a Source form, including but\n   not limited to compiled object code, generated documentation,\n   and conversions to other media types.\n\n   \"Work\" shall mean the work of authorship, whether in Source or\n   Object form, made available under the License, as indicated by a\n   copyright notice that is included in or attached to the work\n   (an example is provided in the Appendix below).\n\n   \"Derivative Works\" shall mean any work, whether in Source or Object\n   form, that is based on (or derived from) the Work and for which the\n   editorial revisions, annotations, elaborations, or other modifications\n   represent, as a whole, an original work of authorship. For the purposes\n   of this License, Derivative Works shall not include works that remain\n   separable from, or merely link (or bind by name) to the interfaces of,\n   the Work and Derivative Works thereof.\n\n   \"Contribution\" shall mean any work of authorship, including\n   the original version of the Work and any modifications or additions\n   to that Work or Derivative Works thereof, that is intentionally\n   submitted to Licensor for inclusion in the Work by the copyright owner\n   or by an individual or Legal Entity authorized to submit on behalf of\n   the copyright owner. For the purposes of this definition, \"submitted\"\n   means any form of electronic, verbal, or written communication sent\n   to the Licensor or its representatives, including but not limited to\n   communication on electronic mailing lists, source code control systems,\n   and issue tracking systems that are managed by, or on behalf of, the\n   Licensor for the purpose of discussing and improving the Work, but\n   excluding communication that is conspicuously marked or otherwise\n   designated in writing by the copyright owner as \"Not a Contribution.\"\n\n   \"Contributor\" shall mean Licensor and any individual or Legal Entity\n   on behalf of whom a Contribution has been received by Licensor and\n   subsequently incorporated within the Work.\n\n2. Grant of Copyright License. Subject to the terms and conditions of\n   this License, each Contributor hereby grants to You a perpetual,\n   worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n   copyright license to reproduce, prepare Derivative Works of,\n   publicly display, publicly perform, sublicense, and distribute the\n   Work and such Derivative Works in Source or Object form.\n\n3. Grant of Patent License. Subject to the terms and conditions of\n   this License, each Contributor hereby grants to You a perpetual,\n   worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n   (except as stated in this section) patent license to make, have made,\n   use, offer to sell, sell, import, and otherwise transfer the Work,\n   where such license applies only to those patent claims licensable\n   by such Contributor that are necessarily infringed by their\n   Contribution(s) alone or by combination of their Contribution(s)\n   with the Work to which such Contribution(s) was submitted. If You\n   institute patent litigation against any entity (including a\n   cross-claim or counterclaim in a lawsuit) alleging that the Work\n   or a Contribution incorporated within the Work constitutes direct\n   or contributory patent infringement, then any patent licenses\n   granted to You under this License for that Work shall terminate\n   as of the date such litigation is filed.\n\n4. Redistribution. You may reproduce and distribute copies of the\n   Work or Derivative Works thereof in any medium, with or without\n   modifications, and in Source or Object form, provided that You\n   meet the following conditions:\n\n   (a) You must give any other recipients of the Work or\n       Derivative Works a copy of this License; and\n\n   (b) You must cause any modified files to carry prominent notices\n       stating that You changed the files; and\n\n   (c) You must retain, in the Source form of any Derivative Works\n       that You distribute, all copyright, patent, trademark, and\n       attribution notices from the Source form of the Work,\n       excluding those notices that do not pertain to any part of\n       the Derivative Works; and\n\n   (d) If the Work includes a \"NOTICE\" text file as part of its\n       distribution, then any Derivative Works that You distribute must\n       include a readable copy of the attribution notices contained\n       within such NOTICE file, excluding those notices that do not\n       pertain to any part of the Derivative Works, in at least one\n       of the following places: within a NOTICE text file distributed\n       as part of the Derivative Works; within the Source form or\n       documentation, if provided along with the Derivative Works; or,\n       within a display generated by the Derivative Works, if and\n       wherever such third-party notices normally appear. The contents\n       of the NOTICE file are for informational purposes only and\n       do not modify the License. You may add Your own attribution\n       notices within Derivative Works that You distribute, alongside\n       or as an addendum to the NOTICE text from the Work, provided\n       that such additional attribution notices cannot be construed\n       as modifying the License.\n\n   You may add Your own copyright statement to Your modifications and\n   may provide additional or different license terms and conditions\n   for use, reproduction, or distribution of Your modifications, or\n   for any such Derivative Works as a whole, provided Your use,\n   reproduction, and distribution of the Work otherwise complies with\n   the conditions stated in this License.\n\n5. Submission of Contributions. Unless You explicitly state otherwise,\n   any Contribution intentionally submitted for inclusion in the Work\n   by You to the Licensor shall be under the terms and conditions of\n   this License, without any additional terms or conditions.\n   Notwithstanding the above, nothing herein shall supersede or modify\n   the terms of any separate license agreement you may have executed\n   with Licensor regarding such Contributions.\n\n6. Trademarks. This License does not grant permission to use the trade\n   names, trademarks, service marks, or product names of the Licensor,\n   except as required for reasonable and customary use in describing the\n   origin of the Work and reproducing the content of the NOTICE file.\n\n7. Disclaimer of Warranty. Unless required by applicable law or\n   agreed to in writing, Licensor provides the Work (and each\n   Contributor provides its Contributions) on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n   implied, including, without limitation, any warranties or conditions\n   of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n   PARTICULAR PURPOSE. You are solely responsible for determining the\n   appropriateness of using or redistributing the Work and assume any\n   risks associated with Your exercise of permissions under this License.\n\n8. Limitation of Liability. In no event and under no legal theory,\n   whether in tort (including negligence), contract, or otherwise,\n   unless required by applicable law (such as deliberate and grossly\n   negligent acts) or agreed to in writing, shall any Contributor be\n   liable to You for damages, including any direct, indirect, special,\n   incidental, or consequential damages of any character arising as a\n   result of this License or out of the use or inability to use the\n   Work (including but not limited to damages for loss of goodwill,\n   work stoppage, computer failure or malfunction, or any and all\n   other commercial damages or losses), even if such Contributor\n   has been advised of the possibility of such damages.\n\n9. Accepting Warranty or Additional Liability. While redistributing\n   the Work or Derivative Works thereof, You may choose to offer,\n   and charge a fee for, acceptance of support, warranty, indemnity,\n   or other liability obligations and/or rights consistent with this\n   License. However, in accepting such obligations, You may act only\n   on Your own behalf and on Your sole responsibility, not on behalf\n   of any other Contributor, and only if You agree to indemnify,\n   defend, and hold each Contributor harmless for any liability\n   incurred by, or claims asserted against, such Contributor by reason\n   of your accepting any such warranty or additional liability.\n\nEND OF TERMS AND CONDITIONS\n\nAPPENDIX: How to apply the Apache License to your work.\n\n   To apply the Apache License to your work, attach the following\n   boilerplate notice, with the fields enclosed by brackets \"[]\"\n   replaced with your own identifying information. (Don't include\n   the brackets!)  The text should be enclosed in the appropriate\n   comment syntax for the file format. We also recommend that a\n   file or class name and description of purpose be included on the\n   same \"printed page\" as the copyright notice for easier\n   identification within third-party archives.\n\nCopyright 2019- Jake Goulding\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n\thttp://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n"
        },
        {
          "name": "LICENSE-MIT",
          "type": "blob",
          "size": 1.033203125,
          "content": "Copyright (c) 2019- Jake Goulding\n\nPermission is hereby granted, free of charge, to any\nperson obtaining a copy of this software and associated\ndocumentation files (the \"Software\"), to deal in the\nSoftware without restriction, including without\nlimitation the rights to use, copy, modify, merge,\npublish, distribute, sublicense, and/or sell copies of\nthe Software, and to permit persons to whom the Software\nis furnished to do so, subject to the following\nconditions:\n\nThe above copyright notice and this permission notice\nshall be included in all copies or substantial portions\nof the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF\nANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED\nTO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A\nPARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT\nSHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\nOF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR\nIN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\nDEALINGS IN THE SOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 1.4755859375,
          "content": "# SNAFU\n\n**S**ituation **N**ormal: **A**ll **F**ouled **U**p\n\n[![crates.io][Crate Logo]][Crate]\n[![Documentation][Doc Logo]][Doc]\n[![Build Status][CI Logo]][CI]\n\nSNAFU is a library to easily assign underlying errors into\ndomain-specific errors while adding context.\n\n```rust\nuse snafu::prelude::*;\nuse std::{fs, io, path::PathBuf};\n\n#[derive(Debug, Snafu)]\nenum Error {\n    #[snafu(display(\"Unable to read configuration from {}\", path.display()))]\n    ReadConfiguration { source: io::Error, path: PathBuf },\n\n    #[snafu(display(\"Unable to write result to {}\", path.display()))]\n    WriteResult { source: io::Error, path: PathBuf },\n}\n\ntype Result<T, E = Error> = std::result::Result<T, E>;\n\nfn process_data() -> Result<()> {\n    let path = \"config.toml\";\n    let configuration = fs::read_to_string(path).context(ReadConfigurationSnafu { path })?;\n    let path = unpack_config(&configuration);\n    fs::write(&path, b\"My complex calculation\").context(WriteResultSnafu { path })?;\n    Ok(())\n}\n\nfn unpack_config(data: &str) -> &str {\n    \"/some/path/that/does/not/exist\"\n}\n```\n\nPlease see [the documentation][Doc] and the [user's guide][Guide] for\na full description.\n\n[Crate]: https://crates.io/crates/snafu\n[Crate Logo]: https://img.shields.io/crates/v/snafu.svg\n\n[Doc]: https://docs.rs/snafu\n[Doc Logo]: https://docs.rs/snafu/badge.svg\n[Guide]: https://docs.rs/snafu/*/snafu/guide/index.html\n\n[CI]: https://cirrus-ci.com/github/shepmaster/snafu\n[CI Logo]: https://api.cirrus-ci.com/github/shepmaster/snafu.svg\n"
        },
        {
          "name": "compatibility-tests",
          "type": "tree",
          "content": null
        },
        {
          "name": "fmt-markdown.sh",
          "type": "blob",
          "size": 0.5849609375,
          "content": "#!/usr/bin/env bash\n\nset -euo pipefail\n\nscratch_dir=$(mktemp -d)\nproject_dir=\"${scratch_dir}/scratch\"\n\ncargo_toml=\"${project_dir}/Cargo.toml\"\nrustfmt_toml=\"${project_dir}/rustfmt.toml\"\nlib_rs=\"${project_dir}/src/lib.rs\"\n\ncargo new --lib \"${project_dir}\"\n\ncat <<-EOF > \"${rustfmt_toml}\"\nformat_code_in_doc_comments = true\nEOF\n\nfor markdown_file in $(git ls-files | rg '.md$'); do\n    awk '{ print \"/// \" $0 } END { print \"fn dummy() {}\"}' \"${markdown_file}\" > \"${lib_rs}\"\n    cargo +nightly fmt --manifest-path=\"${cargo_toml}\"\n    sed -E -e '$ d' -e 's@/// ?@@' \"${lib_rs}\" > \"${markdown_file}\"\ndone\n"
        },
        {
          "name": "netlify.toml",
          "type": "blob",
          "size": 0.1923828125,
          "content": "[build]\ncommand = \"\"\"\nrustup install nightly --profile minimal && \\\ncargo +nightly doc --no-deps --features=futures,guide\n\"\"\"\npublish = \"target/doc\"\n\n[[redirects]]\nfrom = \"/*\"\nto = \"/snafu/:splat\"\n"
        },
        {
          "name": "rust-toolchain",
          "type": "blob",
          "size": 0.0068359375,
          "content": "stable\n"
        },
        {
          "name": "snafu-derive",
          "type": "tree",
          "content": null
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}