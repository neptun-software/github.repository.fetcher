{
  "metadata": {
    "timestamp": 1736709151313,
    "page": 363,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjM3MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "rust-lang-nursery/rust-cookbook",
      "stars": 2330,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".cargo",
          "type": "tree",
          "content": null
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.048828125,
          "content": "Cargo.lock\ntarget/\n*~\nbook/\n*.swp\nlines.txt\n.idea/"
        },
        {
          "name": ".travis.yml",
          "type": "blob",
          "size": 1.2568359375,
          "content": "language: rust\n\nrust:\n  - stable\n  - nightly\n\nos:\n  - linux\n  - osx\n\nenv:\n  global:\n  - secure: m28oDDxTcaLlbCXv9la/yz0PzafOCDuhOhmHRoc1ELQC0wc3r6HT3a2myrP5ewQQhaxYDzd2XXYDJB3odFV1qLQOp0hFDgNn/w3ctWZpJdLxIJN6dsaPL/azhE2hz7T+SPEoWLwTW1va6bu4wwzSOykt9//RIK0ZoyVMCRSAlMB965iMV2Nkw7SWdQZ8SlskMVk8sB103N5+WTtt6rse54jHnXTpFEq9q0EAXC1R3GBDKEWB7iwb0c++Kw46Fz86ZJJDotiVuxMtsEk0VfT0Yxx665is5Ko6sV4cahbuXqMIqYYEfqpTHNHadHWD1m1i32hW9Rjtt9fFZ+a8m9zfTixPlkfOZvQ94RnD2zqv9qiwFr8oR7t2SsZaB4aqPlJd45DqgnwQ1B0cmrUAsjSB2+1DQDkR4FgKFB/o1c6F6g8imNh+2OwiZXVLwIimXNJQ5xfZeObXFMrEZ0+uj7oxFX49EcwE/SvwsVJHST3/zL5QuQwa9/uVhW/x135/Z2ypVao2xydpow/KL8VwhX9YsOSP5ApffL4OLJ5hE9qwS/SShHGg8AenFqqm/UNFqWDU+C097YaWvG5PEvCVXvOofic65AUTCmwB+h3MSQmZIqz2sb/kwdbtkoRRR6maMgelQmg1JdIfQcKeTJIStIihjk54VENHPVAslz0oV7Ia5Bo=\n\nmatrix:\n  include:\n    - rust: stable\n      os: linux\n      env: CONTENT_TESTS=1\n    - rust: stable\n      os: linux\n      env: CONTENT_TESTS=1 CONTENT_TESTS_LINKS=1\n  allow_failures:\n    - rust: stable\n      os: linux\n      env: CONTENT_TESTS=1 CONTENT_TESTS_LINKS=1\n    - rust: stable \n      os: osx\n\naddons:\n  apt:\n    packages:\n      - aspell\n      - aspell-en\n\nbefore_install:\n  - ./ci/install_deps.sh\n  - export PATH=$HOME/.cargo/bin:$PATH\n\nscript: ./ci/test_script.sh\n\nafter_success: ./ci/deploy.sh\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 11.052734375,
          "content": "# Contributing to the Rust Cookbook\n\nThe cookbook needs contributors and is intended to be easy to\ncontribute to. Help is welcome.\n\n* [Building and testing](#building-and-testing)\n* [Finding what to contribute](#finding-what-to-contribute)\n* [Adding an example](#adding-an-example)\n* [Example guidelines](#example-guidelines)\n\n## Building and testing\n\nTo start, clone the cookbook from git and navigate to that directory:\n\n```\ngit clone https://github.com/rust-lang-nursery/rust-cookbook.git\ncd rust-cookbook\n```\n\nCookbook is built with [mdBook], so install that first with Cargo:\n\n```\ncargo install --version 0.4.43 mdbook\n```\n\nTo build and view the cookbook locally, run:\n\n```\nmdbook serve\n```\n\nThen open `http://localhost:3000` in a web browser to browse the cookbook. Any\nchanges you make to the cookbook source will be automatically rebuilt and\nvisible in the browser, so it can be helpful to keep this window open while\nediting.\n\nAll examples in the cookbook are tested with [skeptic], a tool for\ntesting arbitrary markdown documentation in a style similar to\nrustdoc.\n\nTo run the cookbook test suite:\n\n```\ncargo test\n```\n\n### xtask\n\nTo simplify common tasks like testing, building the book, and running linters.\n\nFirst, ensure you have the required tools installed:\n\n```bash\ncargo install mdbook@0.4.43 lychee@0.17.0\n```\n\n- To run all tests:\n\n  ```bash\n  cargo xtask test all\n  ```\n\n- To build the book locally:\n\n  ```bash\n  cargo xtask book\n  ```\n\nFor more details on available tasks, please check the full [xtask README](./xtask/README.md).\n\n## Linters\n\nThe Rust Cookbook comes with link checking and spell checking linters that\nrun on the continuous integration server.  These linters should be run locally\nbefore submitting a pull request to ensure there are no dead links or spelling\nerrors made.\n\nTo install the link checker, review the documentation for [python] to install\npython 3.6 and pip3.  Installing link-checker once the dependencies are met\nis done with pip3.\n\n```\n[sudo] pip3 install link-checker==0.1.0\n```\n\nAlternatively, add the user install directory (probably `~/.local/bin`) to\nyour PATH variable and install link-checker for your user.\n\n```\npip3 install --user link-checker==0.1.0\n```\n\nChecking the links of the book locally first requires the book to be built\nwith mdBook.  From the root directory of the cookbook, the following commands\nrun the link checker.\n\n```\nmdbook build\nlink-checker ./book\n```\n\nThe aspell binary provides spell checking.  Apt packages provide installation\non Debian based operating systems.\n\n```\n[sudo] apt install aspell -y\n```\n\non Mac:\n```\nbrew install aspell \n```\n\nOn other Linux distributions you might also need to install the `aspell-en`\npackage, or similar.\n\nTo check the spelling of the Rust Cookbook locally, run the following command\nfrom the root of the Cookbook.\n\n```\n./ci/spellcheck.sh\n\n# or, if you're using a different locale\nLANG=en_US.UTF-8 ./ci/spellcheck.sh\n```\n\nIf the spell checker finds a misspelled word, you have the opportunity to\ncorrect the spelling mistake with the number keys.  If the spelling mistake\nis erroneous, add the word to the dictionary located in `ci/dictionary.txt`.\nPressing `a` or `l` will not add the word to the custom dictionary.\n\nIf there are no errors, it will just print the local Aspell version and exit.\n\n[mdbook]: https://github.com/rust-lang-nursery/mdBook\n[python]: https://packaging.python.org/tutorials/installing-packages/#install-pip-setuptools-and-wheel\n[skeptic]: https://github.com/brson/rust-skeptic\n\n\n## Finding what to contribute\n\nThis project is intended to be simple to contribute to, and to always\nhave obvious next work items available. If at any time there is not\nsomething obvious to contribute, that is a bug. Feel free to ask for\nadditional support at the\n[Rust Ecosystem Working Group](https://gitter.im/rust-lang/WG-ecosystem).\n\nThe development process for the cookbook is presently oriented around\ncrates: we decide which crates to represent in the cookbook, then come\nup with example use cases to write, then write the examples. And those\nare the three basic, recurring types of contributions needed.\n\nThe development process for the cookbook today is tied to the [libz\nblitz], a broader project to improve the Rust crate ecosystem, and the\ncookbook presently represents the crates under consideration there.\nThe easiest way to find the most immediate work needed for the\ncookbook is to follow the \"What's next\" section at the top of that\nthread, which should at all times link to something to contribute to\nthe cookbook.\n\nOtherwise, look for GitHub issues with the [example] tag. The simplest\nway to contribute is to claim one of these examples, and submit a PR\nadding it. If you do claim one, please leave a comment saying so, so\nothers don't accidentally duplicate your work.\n\nIf you have an idea for an example for a specific crate, please\nsuggest it on the relevant [tracking issue].\n\nPlease do not submit examples for crates not yet represented in the\ncookbook, unless it is part of the libz blitz crate schedule.\nContribution will be open to a broader set of crates in the future.\nFor more about which crates are represented in the cookbook, see [\"a\nnote about crate representation\"][which-crates] in the cookbook.\n\n[example]: https://github.com/rust-lang-nursery/rust-cookbook/issues?q=is%3Aissue+is%3Aopen+label%3Aexample\n[tracking issue]: https://github.com/rust-lang-nursery/rust-cookbook/issues?q=is%3Aissue+is%3Aopen+label%3A%22tracking+issue%22\n[which-crates]: https://rust-lang-nursery.github.io/rust-cookbook/about.html#a-note-about-crate-representation\n[libz blitz]: https://internals.rust-lang.org/t/rust-libz-blitz/5184\n\n## Adding an example\n\nAdding an example involves:\n\n- Deciding which _section_ of the book it belongs in\n- Deciding which _categories_ apply to it\n- Adding the example to the section index in intro.md\n- Adding the example to the appropriate section markdown file\n- Updating badges and hyperlinks as needed\n- Writing a useful description of the example\n\nThe finished commit will look something like [this one].\n\n[this one]: https://github.com/rust-lang-nursery/rust-cookbook/commit/e698443f2af08d3106d953c68c1977eba3c3526c\n\nExamples are presently organized in three ways:\n\n- Book sections - the cookbook is a book, and is organized like a book\n  in logical sections, like \"basics\", \"encoding\", \"concurrency\".\n- Category tags - each example is tagged with one or more category\n  tags, like \"filesystem\", \"debugging\".\n- Crate tags - each example is tagged with one or more crate tags,\n  indicating which crates are represented in the example. Those that\n  use no additional crates are simply tagged 'std'.\n\nFor more about the organization of the book see [\"how to read this\nbook\"] in the cookbook.\n\nHopefully your example belongs to an obvious section and categories,\nbut since the cookbook is so new, quite possibly not. Ask on thread.\n\nFor most steps you can simply follow the lead of existing examples.\nThe art comes in writing effective examples.\n\n[\"how to read this book\"]: https://rust-lang-nursery.github.io/rust-cookbook/about.html#how-to-read-this-book\n\n## Example guidelines\n\nExamples in the cookbook have these goals and qualities:\n\n- They can be described by a single sentence that states their utility.\n- They can be read and understood by a complete beginner.\n- They are standalone examples that can be copied into a learner's\n  own workspace and compiled and modified for experimentation.\n- They demonstrate real tasks, such that experienced developers\n  may use it as a reference.\n- They follow best practices and do not take shortcuts.\n- They use consistent error handling.\n\n#### Title\n\nExamples should have a simple single-sentence title that describes\nsomething a typical Rust user typically wants to do.\n\n> ## Generate random numbers with given distribution\n\n#### Description\n\nDescribe traits imported and the methods used. Think about what information\nsupports the use case and might not be obvious to someone new. Keep the\ndescription to 1-4 sentences, avoiding explanations outside the scope of the\ncode sample.\n\nUse third person narrative of the code execution, taking the opportunity\nto link to API documentation.  Always use\n[active voice](https://www.plainlanguage.gov/guidelines/conversational/use-active-voice/).\nHyperlink all references to APIs, either\non doc.rust-lang.org/std or docs.rs, and style them as `code`.  Use\nwildcard version specifiers for crate links.\n\nAny requirements to execute the code that are not apparent, such as\npassing environment flags, or configuring `Cargo.toml` should be added\nafter the code sample.\n\n> By default, random numbers are generated with [uniform distribution].\n> To generate numbers with other distributions you instantiate a\n> distribution, then sample from that distribution using\n> [`Distribution::sample`] with help of a random-number\n> generator [`rand::Rng`].\n>\n> The [distributions available are documented here][rand-distributions].\n> An example using the [`Normal`] distribution is shown below.\n\n[uniform distribution]: https://en.wikipedia.org/wiki/Uniform_distribution_(continuous)\n[`Distribution::sample`]: https://docs.rs/rand/*/rand/distributions/trait.Distribution.html#tymethod.sample\n[`rand::Rng`]: https://docs.rs/rand/*/rand/trait.Rng.html\n[rand-distributions]: https://docs.rs/rand/*/rand/distributions/index.html\n[`Normal`]: https://docs.rs/rand/*/rand/distributions/struct.Normal.html\n\n#### Code\n\nExamples are intended to be read by complete beginners, and copied into\nprojects for experimentation. They should follow best practices and\nnot take shortcuts.\n\nThe example should have minimal code that doesn't directly support the\ndescription of the example. Keep extra functions and types to a\nminimum.\n\nWhen an example must handle the possibility of errors, follow the error handling\ntemplates in [\"A note about error handling\"][errors]. Examples always set up\nerror handling correctly and propagate errors with `?` (not `try!`, `urwrap`, or\n`expect`). If there is no need for error handling in the example, prefer `main()`.\n\nAvoid glob imports (`*`), even for preludes, so that users can see what\ntraits are called. (Some crates might consider using glob imports for preludes\nbest practice, making this awkward.)\n\nExamples should be simple and obvious enough that an experienced dev\ndo not need comments.\n\nExamples should compile without warnings, clippy lint warnings, or panics.\nThe code should be formatted by rustfmt.  Hide all error boilerplate and\nparts of the sample that do not accomplish the subject of the example.\n\nMark examples that depend on external systems with `no_run` or remove them\nif they are not required for the example.  Avoid inline comments, preferring\nexplanation in the description.\n\n> ```rust,edition2018\n> use rand::distributions::{Normal, Distribution};\n>\n> fn main() {\n>    let mut rng = rand::thread_rng();\n>    let normal = Normal::new(2.0, 3.0);\n>    let v = normal.sample(&mut rng);\n>    println!(\"{} is from a N(2, 9) distribution\", v)\n> }\n> ```\n\nFinally, this book is intended to demonstrate the integration\nof crates that work well together. We are on the lookout for examples\nthat feature multiple crates sensibly.\n\n[errors]: https://rust-lang-nursery.github.io/rust-cookbook/about.html#a-note-about-error-handling\n"
        },
        {
          "name": "Cargo.toml",
          "type": "blob",
          "size": 1.458984375,
          "content": "[package]\nname = \"rust-cookbook\"\nversion = \"1.1.0\"\nauthors = [\"Brian Anderson <banderson@mozilla.com>\", \"Andrew Gauger <andygauge@gmail.com>\"]\nedition = \"2018\"\nlicense = \"MIT/Apache-2.0\"\npublish = false\nbuild = \"build.rs\"\n\n[dependencies]\nansi_term = \"0.11.0\"\napprox = \"0.3\"\nbase64 = \"0.9\"\nbitflags = \"1.0\"\nbyteorder = \"1.0\"\ncc = \"1.0\"\nchrono = \"0.4\"\nclap = \"4.5\"\ncrossbeam = \"0.5\"\ncrossbeam-channel = \"0.3.9\"\ncsv = \"1.0\"\ndata-encoding = \"2.1.0\"\nenv_logger = \"0.11.3\"\nflate2 = \"1.0\"\nglob = \"0.3\"\nimage = \"0.20\"\nlazy_static = \"1.0\"\nlog = \"0.4\"\nlog4rs = \"0.8\"\nmemmap = \"0.7\"\nmime = \"0.3\"\nnalgebra = { version = \"0.33\", features = [\"serde-serialize\"] }\nndarray = { version = \"0.16\", features = [\"approx\"] }\nnum = \"0.4\"\nnum_cpus = \"1.16\"\npercent-encoding = \"2.3\"\npetgraph = \"0.6\"\npostgres = \"0.19\"\nrand = \"0.8\"\nrand_distr = \"0.4\"\nrayon = \"1.10\"\nregex = \"1.11\"\nreqwest = { version = \"0.12\", features = [\"blocking\", \"json\", \"stream\"] }\nring = \"0.17\"\nrusqlite = { version = \"0.32\", features = [\"chrono\"] }\nsame-file = \"1.0\"\nselect = \"0.6\"\nsemver = \"1.0\"\nserde = { version = \"1.0\", features = [\"derive\"] }\nserde_derive = \"1.0\"\nserde_json = \"1.0\"\ntar = \"0.4\"\ntempfile = \"3.14\"\nthiserror = \"2\"\nthreadpool = \"1.8\"\ntoml = \"0.8\"\ntokio = { version = \"1\", features = [\"full\"] }\nunicode-segmentation = \"1.2.1\"\nurl = \"2.5\"\nwalkdir = \"2.5\"\n\n[target.'cfg(target_os = \"linux\")'.dependencies]\nsyslog = \"5.0\"\n\n[build-dependencies]\nskeptic = \"0.13\"\nwalkdir = \"2.5\"\n\n[dev-dependencies]\nskeptic = \"0.13\"\nwalkdir = \"2.5\"\n"
        },
        {
          "name": "LICENSE-CC0",
          "type": "blob",
          "size": 6.4013671875,
          "content": "CC0 1.0 Universal\n\nStatement of Purpose\n\nThe laws of most jurisdictions throughout the world automatically confer\nexclusive Copyright and Related Rights (defined below) upon the creator and\nsubsequent owner(s) (each and all, an \"owner\") of an original work of\nauthorship and/or a database (each, a \"Work\").\n\nCertain owners wish to permanently relinquish those rights to a Work for the\npurpose of contributing to a commons of creative, cultural and scientific\nworks (\"Commons\") that the public can reliably and without fear of later\nclaims of infringement build upon, modify, incorporate in other works, reuse\nand redistribute as freely as possible in any form whatsoever and for any\npurposes, including without limitation commercial purposes. These owners may\ncontribute to the Commons to promote the ideal of a free culture and the\nfurther production of creative, cultural and scientific works, or to gain\nreputation or greater distribution for their Work in part through the use and\nefforts of others.\n\nFor these and/or other purposes and motivations, and without any expectation\nof additional consideration or compensation, the person associating CC0 with a\nWork (the \"Affirmer\"), to the extent that he or she is an owner of Copyright\nand Related Rights in the Work, voluntarily elects to apply CC0 to the Work\nand publicly distribute the Work under its terms, with knowledge of his or her\nCopyright and Related Rights in the Work and the meaning and intended legal\neffect of CC0 on those rights.\n\n1. Copyright and Related Rights. A Work made available under CC0 may be\nprotected by copyright and related or neighboring rights (\"Copyright and\nRelated Rights\"). Copyright and Related Rights include, but are not limited\nto, the following:\n\n  i. the right to reproduce, adapt, distribute, perform, display, communicate,\n  and translate a Work;\n\n  ii. moral rights retained by the original author(s) and/or performer(s);\n\n  iii. publicity and privacy rights pertaining to a person's image or likeness\n  depicted in a Work;\n\n  iv. rights protecting against unfair competition in regards to a Work,\n  subject to the limitations in paragraph 4(a), below;\n\n  v. rights protecting the extraction, dissemination, use and reuse of data in\n  a Work;\n\n  vi. database rights (such as those arising under Directive 96/9/EC of the\n  European Parliament and of the Council of 11 March 1996 on the legal\n  protection of databases, and under any national implementation thereof,\n  including any amended or successor version of such directive); and\n\n  vii. other similar, equivalent or corresponding rights throughout the world\n  based on applicable law or treaty, and any national implementations thereof.\n\n2. Waiver. To the greatest extent permitted by, but not in contravention of,\napplicable law, Affirmer hereby overtly, fully, permanently, irrevocably and\nunconditionally waives, abandons, and surrenders all of Affirmer's Copyright\nand Related Rights and associated claims and causes of action, whether now\nknown or unknown (including existing as well as future claims and causes of\naction), in the Work (i) in all territories worldwide, (ii) for the maximum\nduration provided by applicable law or treaty (including future time\nextensions), (iii) in any current or future medium and for any number of\ncopies, and (iv) for any purpose whatsoever, including without limitation\ncommercial, advertising or promotional purposes (the \"Waiver\"). Affirmer makes\nthe Waiver for the benefit of each member of the public at large and to the\ndetriment of Affirmer's heirs and successors, fully intending that such Waiver\nshall not be subject to revocation, rescission, cancellation, termination, or\nany other legal or equitable action to disrupt the quiet enjoyment of the Work\nby the public as contemplated by Affirmer's express Statement of Purpose.\n\n3. Public License Fallback. Should any part of the Waiver for any reason be\njudged legally invalid or ineffective under applicable law, then the Waiver\nshall be preserved to the maximum extent permitted taking into account\nAffirmer's express Statement of Purpose. In addition, to the extent the Waiver\nis so judged Affirmer hereby grants to each affected person a royalty-free,\nnon transferable, non sublicensable, non exclusive, irrevocable and\nunconditional license to exercise Affirmer's Copyright and Related Rights in\nthe Work (i) in all territories worldwide, (ii) for the maximum duration\nprovided by applicable law or treaty (including future time extensions), (iii)\nin any current or future medium and for any number of copies, and (iv) for any\npurpose whatsoever, including without limitation commercial, advertising or\npromotional purposes (the \"License\"). The License shall be deemed effective as\nof the date CC0 was applied by Affirmer to the Work. Should any part of the\nLicense for any reason be judged legally invalid or ineffective under\napplicable law, such partial invalidity or ineffectiveness shall not\ninvalidate the remainder of the License, and in such case Affirmer hereby\naffirms that he or she will not (i) exercise any of his or her remaining\nCopyright and Related Rights in the Work or (ii) assert any associated claims\nand causes of action with respect to the Work, in either case contrary to\nAffirmer's express Statement of Purpose.\n\n4. Limitations and Disclaimers.\n\n  a. No trademark or patent rights held by Affirmer are waived, abandoned,\n  surrendered, licensed or otherwise affected by this document.\n\n  b. Affirmer offers the Work as-is and makes no representations or warranties\n  of any kind concerning the Work, express, implied, statutory or otherwise,\n  including without limitation warranties of title, merchantability, fitness\n  for a particular purpose, non infringement, or the absence of latent or\n  other defects, accuracy, or the present or absence of errors, whether or not\n  discoverable, all to the greatest extent permissible under applicable law.\n\n  c. Affirmer disclaims responsibility for clearing rights of other persons\n  that may apply to the Work or any use thereof, including without limitation\n  any person's Copyright and Related Rights in the Work. Further, Affirmer\n  disclaims responsibility for obtaining any necessary consents, permissions\n  or other rights required for any use of the Work.\n\n  d. Affirmer understands and acknowledges that Creative Commons is not a\n  party to this document and has no duty or obligation with respect to this\n  CC0 or use of the Work.\n\nFor more information, please see\n<http://creativecommons.org/publicdomain/zero/1.0/>\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 1.9873046875,
          "content": "# A Rust Cookbook &emsp; [![Build Status travis]][travis]\n\n[Build Status travis]: https://api.travis-ci.com/rust-lang-nursery/rust-cookbook.svg?branch=master\n[travis]: https://travis-ci.com/rust-lang-nursery/rust-cookbook\n\n**[Read it here]**.\n\nThis _Rust Cookbook_ is a collection of simple [Rust] examples that\ndemonstrate good practices to accomplish common programming tasks,\nusing the crates of the Rust ecosystem.\n\nThese examples are complete, and suitable for copying directly into\nnew cargo projects. They are tested and guaranteed to work.\n\n## Read it offline\n\nIf you'd like to read it locally:\n\n```bash\n$ git clone https://github.com/rust-lang-nursery/rust-cookbook\n$ cd rust-cookbook\n$ cargo install mdbook --vers \"0.4.43\"\n$ mdbook serve --open\n```\n\nThe output can also be opened from the `book` subdirectory in your web browser.\n\n```bash\n$ xdg-open ./book/index.html # linux\n$ start .\\book\\index.html    # windows\n$ open ./book/index.html     # mac\n```\n\n[Read it here]: https://rust-lang-nursery.github.io/rust-cookbook\n[Rust]: https://www.rust-lang.org/\n\n## Contributing\n\nThis project is intended to be easy for new [Rust] programmers to\ncontribute to, and an easy way to get involved with the Rust\ncommunity. It needs and welcomes help.\n\nFor details see [CONTRIBUTING.md] on GitHub.\n\n[CONTRIBUTING.md]: https://github.com/rust-lang-nursery/rust-cookbook/blob/master/CONTRIBUTING.md\n\n## License [![CC0-badge]][CC0-deed]\n\nRust Cookbook is licensed under Creative Commons Zero v1.0 Universal License\n([LICENSE-CC0](LICENSE-CC0) or https://creativecommons.org/publicdomain/zero/1.0/legalcode)\n\nUnless you explicitly state otherwise, any contribution intentionally submitted\nfor inclusion in Rust Cookbook by you, as defined in the CC0-1.0 license, shall be\n[dedicated to the public domain][CC0-deed] and licensed as above, without any additional\nterms or conditions.\n\n[CC0-deed]: https://creativecommons.org/publicdomain/zero/1.0/deed.en\n[CC0-badge]: https://mirrors.creativecommons.org/presskit/buttons/80x15/svg/cc-zero.svg\n"
        },
        {
          "name": "appveyor.yml",
          "type": "blob",
          "size": 1.05859375,
          "content": "# Based on the \"trust\" template v0.1.1\n# https://github.com/japaric/trust/tree/v0.1.1\n\nenvironment:\n  global:\n    CRATE_NAME: rust-cookbook\n\n  matrix:\n    # - TARGET: x86_64-pc-windows-gnu\n    #  RUST_VERSION: stable\n    - TARGET: x86_64-pc-windows-msvc\n      RUST_VERSION: stable\n    - TARGET: x86_64-pc-windows-msvc\n      RUST_VERSION: nightly\n\ninstall:\n  - ps: >-\n      If ($Env:TARGET -eq 'x86_64-pc-windows-gnu') {\n        $Env:PATH += ';C:\\msys64\\mingw64\\bin'\n      } ElseIf ($Env:TARGET -eq 'i686-pc-windows-gnu') {\n        $Env:PATH += ';C:\\msys64\\mingw32\\bin'\n      }\n  - curl -sSf -o rustup-init.exe https://win.rustup.rs/\n  - rustup-init.exe -y --default-host %TARGET% --default-toolchain %RUST_VERSION%\n  - set PATH=%PATH%;C:\\Users\\appveyor\\.cargo\\bin\n  - rustc -Vv\n  - cargo -V\n\ntest_script:\n  - cargo clean\n  - cargo build\n  - cargo test\n\nbranches:\n  only:\n    # Release tags\n    - /^v\\d+\\.\\d+\\.\\d+.*$/\n    - master\n\nnotifications:\n  - provider: Email\n    on_build_success: false\n\n# Building is done in the test phase, so we disable Appveyor's build phase.\nbuild: false\n"
        },
        {
          "name": "assets",
          "type": "tree",
          "content": null
        },
        {
          "name": "book.toml",
          "type": "blob",
          "size": 0.6357421875,
          "content": "\n[book]\ntitle = \"Rust Cookbook\"\ndescription = \"Collection of useful Rust code examples\"\nauthors = [\"Rust Language Community\"]\nedition = \"2018\"\nmultilingual = false\nlanguage = \"en\"\nsrc = \"src\"\n\n[output.html]\nmathjax-support = false\n# theme = \"theme\"\nadditional-css = [\"theme/custom.css\"]\ngit-repository-url = \"https://github.com/rust-lang-nursery/rust-cookbook\"\nedit-url-template = \"https://github.com/rust-lang-nursery/rust-cookbook/edit/master/{path}\"\n\n[output.html.playpen]\neditable = false\n\n[output.html.search]\nlimit-results = 20\nuse-boolean-and = true\nboost-title = 2\nboost-hierarchy = 2\nboost-paragraph = 1\nexpand = true\nheading-split-level = 2\n"
        },
        {
          "name": "build.rs",
          "type": "blob",
          "size": 0.517578125,
          "content": "use walkdir::WalkDir;\n\nconst REMOVED_TESTS: &[&str] = &[\n    \"./src/web/clients/requests/header.md\",\n    \"./src/web/clients/api/rate-limited.md\",\n];\n\nfn main() {\n    let paths = WalkDir::new(\"./src/\").into_iter()\n        // convert paths to Strings\n        .map(|p| p.unwrap().path().to_str().unwrap().to_string())\n        // only compile markdown files\n        .filter(|p| p.ends_with(\".md\"))\n        .filter(|p| !REMOVED_TESTS.contains(&p.as_ref()))\n        .collect::<Vec<_>>();\n\n    skeptic::generate_doc_tests(&paths[..]);\n}\n"
        },
        {
          "name": "ci",
          "type": "tree",
          "content": null
        },
        {
          "name": "crates",
          "type": "tree",
          "content": null
        },
        {
          "name": "libtest.rmeta",
          "type": "blob",
          "size": 0,
          "content": ""
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        },
        {
          "name": "theme",
          "type": "tree",
          "content": null
        },
        {
          "name": "xtask",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}