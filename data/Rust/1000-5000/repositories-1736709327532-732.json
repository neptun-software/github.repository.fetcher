{
  "metadata": {
    "timestamp": 1736709327532,
    "page": 732,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjc0MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "sebcrozet/kiss3d",
      "stars": 1514,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".circleci",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.359375,
          "content": "*.swp\n*.swo\n*.so\n*.rlib\n*.dSYM\n*.dylib\ncargo.lock\nCargo.lock\ntarget\nbin/camera\nbin/cube\nbin/event\nbin/primitives\nbin/primitives_scale\nbin/quad\nbin/texturing\nbin/window\nbin/lines\nbin/post_processing\nbin/wireframe\nbin/add_remove\nbin/obj\nbin/custom_mesh\nbin/custom_mesh_shared\nbin/stereo\nbin/text\nbin/relativity\nbin/custom_material\nbin/procedural\n\nexamples/wasm/\n\n.idea/\n"
        },
        {
          "name": "AUTHORS",
          "type": "blob",
          "size": 0.0908203125,
          "content": "Main developer:\n    * Sébastien Crozet <developer@crozet.re>\n\nContributors:\n    * Alon Levy\n"
        },
        {
          "name": "Cargo.toml",
          "type": "blob",
          "size": 1.8544921875,
          "content": "[package]\nauthors = [\"Sébastien Crozet <developer@crozet.re>\"]\nname    = \"kiss3d\"\nversion = \"0.35.0\"\n\nautoexamples = true\ndescription  = \"3D graphics engine for Rust.\"\nedition      = \"2018\"\nkeywords     = [\"3D\", \"graphics\", \"OpenGL\", \"KISS\"]\nlicense      = \"BSD-3-Clause\"\nreadme       = \"README.md\"\nrepository   = \"https://github.com/sebcrozet/kiss3d\"\n\ninclude = [\n    \"src/**/*.rs\",\n    \"src/**/*.frag\",\n    \"src/**/*.vert\",\n    \"src/text/*.ttf\",\n    \"examples/**/*.rs\",\n    \"examples/media\",\n    \"examples/Cargo.toml\",\n    \"Cargo.toml\",\n    \"LICENSE\",\n    \"Readme.md\",\n]\n\n\n[lib]\nname = \"kiss3d\"\npath = \"src/lib.rs\"\n\n[features]\nconrod = [\"conrod_core\"]\nvertex_index_u32 = []\n\n[dependencies]\nbitflags     = \"1.2\"\nconrod_core  = { version = \"0.71\", features = [\"wasm-bindgen\"], optional = true }\neither       = \"1\"\nglow         = \"0.12\"\nimage        = \"0.24\"\ninstant      = { version = \"0.1\", features = [\"wasm-bindgen\"] }\nlibc         = \"0.2\"\nnalgebra     = \"0.30\"\nncollide3d   = \"0.33\"\nnum-traits   = \"0.2\"\nrusttype     = { version = \"0.8.3\", features = [\"gpu_cache\"] }\nserde        = \"1\"\nserde_derive = \"1\"\n\n[target.'cfg(not(target_arch = \"wasm32\"))'.dependencies]\nglutin = \"0.26\"\n\n# We repeat all three targets instead of any(target_arch = \"wasm32\", target_arch = \"asmjs\")\n# to avoid https://github.com/koute/stdweb/issues/135\n[target.wasm32-unknown-unknown.dependencies]\ngetrandom = { version = \"0.2\", features = [\"js\"] }\nwasm-bindgen = \"0.2\"\nweb-sys = { version = \"0.3\", features = [\n    \"console\",\n    \"KeyEvent\",\n    \"KeyboardEvent\",\n    \"MouseEvent\",\n    \"WheelEvent\",\n    \"Touch\",\n    \"TouchEvent\",\n    \"TouchList\",\n    \"HtmlCanvasElement\",\n    \"HtmlElement\",\n    \"Window\",\n    \"UiEvent\",\n    \"Event\",\n    \"EventTarget\",\n    \"Element\",\n    \"DomRect\",\n] }\n\n[dev-dependencies]\nenv_logger = \"0.10\"\nnalgebra   = { version = \"0.30\", features = [\"rand\"] }\nncollide2d = \"0.33\"\nrand       = \"0.8\"\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.4580078125,
          "content": "Copyright (c) 2013, Sébastien Crozet\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are met:\n\n1. Redistributions of source code must retain the above copyright notice, this\n   list of conditions and the following disclaimer.\n\n2. Redistributions in binary form must reproduce the above copyright notice,\n   this list of conditions and the following disclaimer in the documentation\n   and/or other materials provided with the distribution.\n\n3. Neither the name of the author nor the names of its contributors may be used\n   to endorse or promote products derived from this software without specific\n   prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\nANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\nWARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\nFOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\nDAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\nSERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\nCAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\nOR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\nOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 3.7900390625,
          "content": "# Kiss3d\n\n[![Crates.io](https://img.shields.io/crates/v/kiss3d.svg)](https://crates.io/crates/kiss3d)\n[![Docs](https://docs.rs/kiss3d/badge.svg)](https://docs.rs/kiss3d)\n[![License](https://img.shields.io/crates/l/kiss3d)](https://github.com/sebcrozet/kiss3d)\n\nKeep It Simple, Stupid 3d graphics engine.\n\nThis library is born from the frustration that today’s 3D\ngraphics library are either:\n\n* **Too low level**: you have to write your own shaders and opening a\n  window takes 8 hours, 300 lines of code and 10L of coffee.\n* High level, but **too hard to understand/use**: these libraries are made to\n  create beautiful photoreal (or close to it) animations or games.\n  They have many features; too many, in fact, if you just want to draw a few objects\n  on the screen with as little friction as possible.\n\n**kiss3d** is not designed to be feature-complete or fast.\nIt is designed to let you draw simple geometric figures and play with them\nwith as little friction as possible.\n\n## Features\n\n* WASM compatible.\n* Out of the box, open a window with a default arc-ball camera and a point light.\n* First-person camera available as well, and user-defined cameras are possible.\n* Render boxes, spheres, cones, cylinders, quads and lines simply\n* Change an object's color or texture.\n* Change an object's transform (we use [nalgebra](http://nalgebra.org) to do that).\n* Create basic post-processing effects.\n\nAs an example, creating a scene with a red, rotating cube with a light attached\nto the camera is as simple as (NOTE: this will **not** compile when targeting WASM):\n\n```rust\nextern crate kiss3d;\n\nuse kiss3d::nalgebra::{Vector3, UnitQuaternion};\nuse kiss3d::window::Window;\nuse kiss3d::light::Light;\n\nfn main() {\n    let mut window = Window::new(\"Kiss3d: cube\");\n    let mut c      = window.add_cube(1.0, 1.0, 1.0);\n\n    c.set_color(1.0, 0.0, 0.0);\n\n    window.set_light(Light::StickToCamera);\n\n    let rot = UnitQuaternion::from_axis_angle(&Vector3::y_axis(), 0.014);\n\n    while window.render() {\n        c.prepend_to_local_rotation(&rot);\n    }\n}\n```\n\nMaking the same example compatible with both WASM and native platforms is slightly more complicated because **kiss3d** must control the render loop:\n\n```rust\nextern crate kiss3d;\n\nuse kiss3d::light::Light;\nuse kiss3d::scene::SceneNode;\nuse kiss3d::window::{State, Window};\nuse kiss3d::nalgebra::{UnitQuaternion, Vector3};\n\nstruct AppState {\n    c: SceneNode,\n    rot: UnitQuaternion<f32>,\n}\n\nimpl State for AppState {\n    fn step(&mut self, _: &mut Window) {\n        self.c.prepend_to_local_rotation(&self.rot)\n    }\n}\n\nfn main() {\n    let mut window = Window::new(\"Kiss3d: wasm example\");\n    let mut c = window.add_cube(1.0, 1.0, 1.0);\n\n    c.set_color(1.0, 0.0, 0.0);\n\n    window.set_light(Light::StickToCamera);\n\n    let rot = UnitQuaternion::from_axis_angle(&Vector3::y_axis(), 0.014);\n    let state = AppState { c, rot };\n\n    window.render_loop(state)\n}\n```\n\nSome controls are handled by default by the engine (they can be overridden by the user):\n\n* `scroll`: zoom in / zoom out.\n* `left click + drag`: look around.\n* `right click + drag`: translate the view point.\n* `enter`: look at the origin (0.0, 0.0, 0.0).\n\n## Compilation\n\nYou will need the last stable build of the [rust compiler](http://www.rust-lang.org)\nand the official package manager: [cargo](https://github.com/rust-lang/cargo).\n\nSimply add the following to your `Cargo.toml` file:\n\n```\n[dependencies]\nkiss3d = \"0.32\"\n```\nNote: If your project already uses nalgebra, you'll need the same version used by `kiss3d`, or you may run into compatibility issues.\n\n\n## Contributions\nI’d love to see people improving this library for their own needs. However, keep in mind that\n**kiss3d** is KISS. One-liner features (from the user point of view) are preferred.\n\n## Acknowledgements\n\nThanks to all the Rustaceans for their help, and their OpenGL bindings.\n"
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "rustfmt.toml",
          "type": "blob",
          "size": 0.1708984375,
          "content": "edition = \"2018\"\nuse_try_shorthand = true\nuse_field_init_shorthand = true\nhard_tabs = false\n\n#indent_style = \"Block\"\n#where_single_line = true\n#brace_style = \"PreferSameLine\"\n"
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}