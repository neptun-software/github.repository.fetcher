{
  "metadata": {
    "timestamp": 1736709213843,
    "page": 495,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjUwMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "ash-rs/ash",
      "stars": 1910,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.04296875,
          "content": "target\nCargo.lock\n!examples/Cargo.lock\n.idea"
        },
        {
          "name": ".gitmodules",
          "type": "blob",
          "size": 0.1376953125,
          "content": "[submodule \"generator/Vulkan-Headers\"]\n\tpath = generator/Vulkan-Headers\n\turl = https://github.com/KhronosGroup/Vulkan-Headers\n\tupdate = none\n"
        },
        {
          "name": "Cargo.toml",
          "type": "blob",
          "size": 0.1630859375,
          "content": "[workspace]\nresolver = \"2\"\nmembers = [\n    \"analysis\",\n    \"ash\",\n    \"ash-examples\",\n    \"ash-rewrite\",\n    \"ash-window\",\n    \"generator\",\n    \"generator-rewrite\",\n]\n"
        },
        {
          "name": "Changelog.md",
          "type": "blob",
          "size": 26.7626953125,
          "content": "# Changelog\n\nAll notable changes to this project will be documented in this file.\n\nThe format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/),\nand this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0.html).\n\n## [Unreleased] - ReleaseDate\n\n### Added\n\n- Added `push()` method to all root structs to insert a single extension-struct in the pointer chain. (#909)\n- Update Vulkan-Headers to 1.3.296 (#910)\n- Added `VK_KHR_get_display_properties2` instance extension (#932)\n- Added `VK_EXT_metal_objects` device extension (#942)\n- Added `VK_AMD_anti_lag` device extension (#943)\n\n### Changed\n\n- Enable passing mutable arrays of `pNext`-initialized structs for these remaining extension functions: (#966)\n  - `VK_EXT_tooling_info`: `get_physical_device_tool_properties()`;\n  - `VK_KHR_cooperative_matrix`: `get_physical_device_cooperative_matrix_properties()`;\n  - `VK_KHR_pipeline_executable_properties`:\n    - `get_pipeline_executable_internal_representations()`;\n    - `get_pipeline_executable_properties()`;\n    - `get_pipeline_executable_statistics()`.\n  The expected length of this array can be queried with the respective `*_len()` variant of these functions.\n- `push_next()` has been renamed to `extend()` and marked as `unsafe`. Users are encouraged to call `push()` for singular structs instead. (#909)\n\n### Removed\n\n- Removed unused lifetime from `vk::AllocationCallbacks` structure (#968)\n- Removed `ash::prelude` and `ash::vk::prelude` in favour of capturing all contents directly in their parent module. (#972)\n\n## [0.38.0] - 2024-04-01\n\nWith over two years of collecting breaking changes (since the `0.37.0` release in March 2022), April 2024 marks the next breaking release of `ash`.  This release introduces an overhaul of all Vulkan structures, restructures modules around extensions, and separates extension wrappers between `Instance` and `Device` functions.  The crate contains all bindings defined by the latest `1.3.281` Vulkan specification, and many old and new extensions have received a hand-written extension wrapper.  For a full overview of all individual changes, see the list at the end of this post.\n\n### Replaced builders with lifetimes/setters directly on Vulkan structs\n\nAll `Builder` structs have been removed, and their builder functions and lifetime generic have moved to the underlying Vulkan struct.  This means all types will carry the lifetime information of contained references at all times, when created using the builder pattern.\n\nWhere one used to call:\n\n```rust\nlet queue_info = [vk::DeviceQueueCreateInfo::build()\n    .queue_family_index(queue_family_index)\n    .queue_priorities(&priorities)\n    .build()];\n```\n\nWhich drops lifetime information about the `&priorities` slice borrow, one now writes:\n\n```rust\nlet queue_info = [vk::DeviceQueueCreateInfo::default()\n    .queue_family_index(queue_family_index)\n    .queue_priorities(&priorities)];\n```\n\nAnd `queue_info` relies on the borrow checker to ensure it cannot outlive `&priorities`.\n\n### Separating extension loaders and wrappers between `instance` and `device` functions\n\nJust like the separation between `InstanceFnV1_x` and `Device_FnV1_x` for Vulkan core functions, all extensions now have a separate generated `InstanceFn` and `DeviceFn` function pointer table (when containing one or more functions), separating out the two.\n\nHigh-level extension wrappers are updated to match via a separate `Instance` and `Device` struct inside a module carrying the extension name (see also below), instead of residing in a single struct.  These modules are generated for all extensions including those without functions (for which no `Instance` or `Device` struct is generated), complete with a reexport of the extension name and version.\n\n### Restructuring of modules around extensions, function-pointer tables and high-level wrappers\n\nFunction pointer tables for both core and extensions have moved out of the \"pure\" `sys`-like `ash::vk::` module, into the `ash::` root for core `*FnV1_x` tables and into the extension module `ash::<prefix>::<extension name>::{InstanceFn, DeviceFn}` for extensions.  High-level wrappers for these structs (originally from the `ash::extensions` module), together with the `Instance` and `Device` structure split detailed above, have also moved into this module.\n\nFor example, `ash::vk::KhrSwapchainFn` is now available as `ash::khr::swapchain::{InstanceFn, DeviceFn}`, and the high-level `ash::extensions::KhrSwapchain` wrapper is available at `ash::khr::swapchain::{Instance, Device}`.  The extension name and version are found under `ash::khr::swapchain::{NAME, SPEC_VERSION}`.\n\n### Misc helpers\n\nVarious miscellaneous helpers have been introduced on low-level Vulkan structs.\n\nFor statically-sized arrays with a field bounding their length (e.g. `ash::vk::PhysicalDeviceMemoryProperties::memory_types` with the `memory_types_count` field) a new `_as_slice()` getter is available to retrieve the initialized portion of the slice.\n\nFor null-terminated strings stored in statically-sized arrays, both `_as_c_str()` getters and more convenient setter is introduced based on the `CStr` type, providing `Result`-based access to these fields.\n\n### `no_std` support\n\nBy disabling the default `std` feature, this crate compiles in a [`no_std` environment](https://docs.rust-embedded.org/book/intro/no-std.html).\n\n### Added\n\n- Added `std` feature. Disabling this feature makes ash `no_std` (#664)\n- Added `Handle::is_null()` to allow checking if a handle is a `NULL` value (#694)\n- Allow building `Entry`/`Instance`/`Device` from handle+fns (see their `from_parts_1_x()` associated functions) (#748)\n- Update Vulkan-Headers to 1.3.281 (#760, #763, #783, #816, #840)\n- Added `VK_NV_memory_decompression` device extension (#761)\n- Added `VK_GOOGLE_display_timing` device extension (#765)\n- Added `VK_ANDROID_external_memory_android_hardware_buffer` device extension (#769)\n- Added `VK_AMD_buffer_marker` device extension (#772)\n- Added `VK_AMD_shader_info` device extension (#773)\n- Added `VK_AMDX_shader_enqueue` device extension (#776)\n- Added `VK_EXT_host_image_copy` device extension (#779)\n- Added `VK_KHR_maintenance5` device extension (#780)\n- Added `VK_NV_device_generated_commands_compute` device extension (#781)\n- Added `VK_KHR_cooperative_matrix` instance extension (#782)\n- Added `VK_EXT_vertex_input_dynamic_state` device extension (#784)\n- Added `VK_KHR_sampler_ycbcr_conversion` device extension (#785)\n- Added `VK_EXT_swapchain_maintenance1` device extension (#786)\n- Added `VK_NV_low_latency2` device extension (#802)\n- Added `VK_EXT_hdr_metadata` device extension (#804)\n- Added `VK_NV_cuda_kernel_launch` device extension (#805)\n- Added `descriptor_count()` setter on `ash::vk::WriteDescriptorSet` (#809)\n- Added `*_as_c_str()` getters for `c_char` pointers and `c_char` arrays (#831)\n- Added `#[must_use]` to Vulkan structs to make it more clear that they are moved by the builder pattern (#845)\n- Added `load_with()` function on `Device` and `Instance` for providing custom `get_xxx_proc_addr()` implementations (#846)\n- Added `Send`/`Sync` to all Vulkan structs (#869)\n- Added `VK_KHR_dynamic_rendering_local_read` device extension (#888)\n- Added `VK_KHR_line_rasterization` device extension (#889)\n- Added `VK_KHR_calibrated_timestamps` device extension (#890)\n- Added `VK_KHR_maintenance6` device extension (#891)\n- Added `VK_NV_copy_memory_indirect` device extension (#892)\n\n### Changed\n\n- Replaced builders with lifetimes/setters directly on Vulkan structs (#602)\n- Inlined struct setters (#602)\n- On Fuchsia `libvulkan.so` is now loaded without inexistent `.1` major-version suffix (#626)\n- Bumped MSRV from 1.59 to 1.69 (#709, #746)\n- Replaced `const fn name()` with associated `NAME` constants (#715)\n- Generic builders now automatically set `objecttype` to `<T as Handle>::ObjectType` (#724)\n- Separated low-level `*Fn` structs and high-level extension wrappers between instance and device functions, and moved high-level extension wrappers from `ash::extensions::*` to `ash::<prefix>::<extension name>::{Instance, Device}` (#734)\n  This not only allows loading `device`-optimized function pointers, it also prevents accidentally loading `instance` functions via `get_device_proc_addr()` which would always return `NULL`, making these `instance` functions always panic on the following high-level extension wrappers:\n  - `VK_KHR_swapchain`\n  - `VK_KHR_device_group`\n  - `VK_EXT_full_screen_exclusive`\n  The following extensions containing `instance`-level functions prevented this panic by loading all functions in the `*Fn` loader struct via `get_instance_proc_addr()`, resulting in extra dispatch code inserted by the loader for all `device`-level functions:\n  - `VK_KHR_swapchain`\n  - `VK_KHR_video_queue`\n  - `VK_KHR_device_group`\n  - `VK_KHR_performance_query`\n  - `VK_EXT_debug_utils`\n  - `VK_EXT_sample_locations`\n  - `VK_EXT_calibrated_timestamps`\n  - `VK_KHR_fragment_shading_rate`\n  - `VK_EXT_full_screen_exclusive`\n  - `VK_NV_optical_flow`\n- `get_calibrated_timestamps()` now returns a single value for `max_deviation` (#738)\n- Bumped `libloading` from `0.7` to `0.8` (#739)\n- extensions/khr: Take the remaining `p_next`-containing structs as `&mut` to allow chains (#744)\n  - `AccelerationStructure::get_acceleration_structure_build_sizes()`\n  - `ExternalMemoryFd::get_memory_fd_properties()`\n  - `ExternalMemoryWin32::get_memory_win32_handle_properties()`\n  - `GetSurfaceCapabilities2::get_physical_device_surface_capabilities2()`\n- Define `Display` as `c_void` instead of `*mut c_void` to match Xlib (#751)\n- `VK_KHR_device_group_creation`: Take borrow of `Entry` in `fn new()` (#753)\n- `VK_KHR_device_group_creation`: Rename `vk::Instance`-returning function from `device()` to `instance()` (#759)\n- Windows `HANDLE` types (`HWND`, `HINSTANCE`, `HMONITOR`) are now defined as `isize` instead of `*const c_void` (#797)\n- extensions: Make all `vk::Pipeline` and `vk::ShaderEXT` creation functions return their impartial result on error (#828)\n  - `VK_AMDX_shader_enqueue`\n  - `VK_EXT_shader_object`\n  - `VK_KHR_ray_tracing_pipeline`\n  - `VK_NV_ray_tracing`\n- extensions/ext/ray_tracing_pipeline: Pass indirect SBT regions as single item reference (#829)\n- Replaced `c_char` array setters with `CStr` setters (#831)\n- `push_next()` functions now allow unsized `p_next` argument (#855)\n- Flattened `ash::extensions` into `ash`, and moved `*Fn` function pointer table structs from `ash::vk` into `ash` or the associated extension module (#894)\n\n### Removed\n\n- Removed all code generated for `\"disabled\"` extensions, typically with a number rather than a descriptive name (#448)\n- Removed experimental AMD extensions (#607)\n- Removed `query_count` parameter from `get_query_pool_results()` in favour of `data.len()` (#644)\n- Removed misnamed, deprecated `debug_utils_set_object_name()` and `debug_utils_set_object_tag()` entirely, use `set_debug_utils_object_name()` and `set_debug_utils_object_tag()` instead (#661)\n- Removed `get_properties` helper from extension wrappers (and `ext::PhysicalDeviceDrm`). Directly call `get_physical_device_properties2()` with a possible chain of multiple structs instead (#728)\n- Removed `fn load()` from empty features and extensions (#752)\n  - Removed empty `entry_fn_1_2`/`entry_fn_1_3` and getters from `Entry`\n  - Removed empty `instance_fn_1_2:` and getters from `Instance`\n\n## [0.37.3] - 2023-05-29\n\n### Changed\n\n- `VK_KHR_device_group_creation`: Replaced `device()` with `instance()` (via deprecation) because it is returning `vk::Instance` (#754)\n\n### Added\n\n- Added `VK_EXT_pipeline_properties` device extension (#622)\n- Update Vulkan-Headers to 1.3.251 (#697, #723, #741)\n- Added `VK_KHR_performance_query` device extension (#726)\n- Added `VK_EXT_shader_object` device extension (#732)\n- Added missing `Device::get_device_queue2()` wrapper (#736)\n- Added with `new_with_instance()` on the following extensions to allow loading the listed `Instance` functions: (#754)\n  - `VK_KHR_swapchain`: `get_physical_device_present_rectangles()`\n  - `VK_KHR_device_group`: `get_physical_device_present_rectangles()`\n  - `VK_EXT_full_screen_exclusive`: `get_physical_device_surface_present_modes2()`\n- Exposed `FramebufferCreateInfoBuilder::attachment_count()` builder for `vk::FramebufferCreateFlags::IMAGELESS` (#747)\n\n## [0.37.2] - 2022-01-11\n\n### Added\n\n- Update Vulkan-Headers to 1.3.238 (#688)\n\n### Fixed\n\n- `VK_KHR_draw_indirect_count`: use `cmd_draw_indirect_count_khr` instead of `cmd_draw_indexed_indirect_count_khr` for non-indexed draw call (#695)\n\n## [0.37.1] - 2022-11-23\n\n### Changed\n\n- Inlined builder setters (partial backport from #602)\n- Inlined `Default` impls and trivial `Instance`/`Device`/`Entry` wrapper methods (#606, #632)\n- Renamed `debug_utils_set_object_name()` to `set_debug_utils_object_name()` and `debug_utils_set_object_tag()` to `set_debug_utils_object_tag()` for consistency and deprecated old ones (#661)\n\n### Added\n\n- Added `VK_EXT_image_drm_format_modifier` device extension (#603)\n- Set MSRV (Minimum Supported Rust Version) in `Cargo.toml` for clearer errors (#604)\n- Update Vulkan-Headers to 1.3.235 (#605, #608, #619, #655, #667)\n- Added `const STRUCTURE_TYPE` to all Vulkan structures for matching with `match_struct!` macro (#614)\n- Added `VK_EXT_sample_locations` device extension (#616)\n- Added `VK_NV_coverage_reduction_mode` device extension (#617)\n- Added `VK_KHR_ray_tracing_maintenance1` device extension (#620)\n- Added `VK_EXT_image_compression_control` device extension (#621)\n- Added new functions to `VK_KHR_swapchain`, available since Vulkan 1.1 (#629)\n- Added `VK_KHR_device_group_creation` instance extension (#630)\n- Added `VK_KHR_device_group` device extension (#631)\n- Added `VK_EXT_mesh_shader` device extension (#657)\n- Added `VK_EXT_acquire_drm_display` instance extension (#668)\n- Added `VK_EXT_extended_dynamic_state3` device extension (#671)\n- Added `VK_EXT_descriptor_buffer` instance extension (#679)\n\n### Fixed\n\n- `VK_KHR_ray_tracing_pipeline`: Set the buffer length in `get_ray_tracing_capture_replay_shader_group_handles` so it no longer always returns an empty `Vec` (#658)\n\n## [0.37.0] - 2022-03-23\n\n### Changed\n\n- Dropped auto-generated wrapper methods from function pointer structs\n  in favor of direct invocation of function pointers (#599)\n- Constified extension names (#590)\n- `VK_NV_device_diagnostic_checkpoints`: Enable passing `pNext`-initialized structs to `get_queue_checkpoint_data` (#588)\n\n### Added\n\n- Update Vulkan-Headers to 1.3.209 (#597, #601)\n- Added `VK_EXT_headless_surface` instance extension (#589)\n\n## [0.36.0] - 2022-02-21\n\n### Changed\n\n- `VK_KHR_external_memory_fd`: Drop `_khr` suffix from `get_memory_fd_properties_khr` (#580)\n- entry: Allow querying `enumerate_instance_extension_properties()` by layer name (#574)\n\n### Added\n\n- Add helper wrappers for Vulkan core 1.3 `Instance` and `Device` functions (#568)\n- Update Vulkan-Headers to 1.3.206 (#563)\n\n## [0.35.2] - 2022-02-19\n\n### Changed\n\n- Replace `1.2-extensions` documentation links with `1.3-extensions` (#569)\n- Fixed broken (intradoc) links in the prelude and `VK_KHR_get_surface_capabilities2` extension (#559)\n\n### Added\n\n- Added `VK_KHR_external_fence_win32` device extension (#582)\n- Added `VK_KHR_external_semaphore_win32` device extension (#581)\n- Added `VK_KHR_external_memory_win32` device extension (#579)\n- Added `VK_EXT_extended_dynamic_state2` device extension (#572)\n- Added `VK_KHR_copy_commands2` device extension (#571)\n- Added `VK_EXT_private_data` device extension (#570)\n- Added conversions from `Extent2D` to `Extent3D` and `Rect2D` (#557)\n\n## [0.35.1] - 2022-01-18\n\n### Added\n\n- Added `VK_EXT_calibrated_timestamps` device extension (#556)\n- Added `VK_KHR_get_surface_capabilities2` device extension (#530)\n\n### Changed\n\n- Convert `vk_bitflags_wrapped!` methods to `const fn` (#549)\n- examples: Update winit to 0.26 and image to 0.23 (#551)\n- ash-window: Require at least `raw-window-handle 0.3.4` for 0.4 interop (#553)\n- Assert that Vulkan array-getters return the same length (#534)\n- README: Correct documentation for `Entry` functions and related crate features (#545)\n- example: Refactor event loop handling for continuous redraw (#542)\n- Generate `RGBA=R|G|B|A` helper constant for `ColorComponentFlags` (#537)\n- Remove remaining `CString` allocations on string literals in examples and hand-written AMD extension (#533)\n\n## [0.35.0] - 2021-12-27\n\n### Changed\n\n- `loaded` feature enabled by default in place of `linked` to relax default constraints on the build environment\n- `Entry::new` renamed to `Entry::linked`\n\n## [0.34.0] - 2021-12-22\n\n### Added\n\n- Update Vulkan-Headers to 1.2.203 (#477, #497, #504, #509, #514)\n- Add missing documentation to bitflag extension variants (#501)\n- Added `VK_KHR_present_wait` device extension (#493)\n- Added `VK_KHR_maintenance4` device extension (#489, #498)\n- Link `_len()` functions to their array-getter using intradoc-links (#490)\n- Added `VK_KHR_dynamic_rendering` device extension (#488)\n\n### Changed\n\n- Extension names from `fn name()` will not be checked for interior nuls anymore at runtime (#522)\n- examples: Use `c_char` for pointer to raw string (#521)\n- Group enum extension variants together per `impl T` block (#519)\n- examples: Use `slice::from_ref` to not loose lifetime on nested slices (#513)\n- Simplify triangle example's vertex input state (#512)\n- Device extension `khr::PipelineExecutableProperties` and `khr::TimelineSemaphore` now expose `fn device()` instead of `fn instance()` (#499)\n- Changed `khr::PipelineExecutableProperties::new()` and `khr::TimelineSemaphore::new()` to take `instance` and `device` as arguments (#499)\n- Fix broken vulkan-tutorial link in README.md (#492)\n- Make `enumerate_physical_device_groups` unsafe (#491)\n- Added `Packed24_8` helper-type for constructing AS Instance bitfields, used in `AccelerationStructureInstanceKHR`, `AccelerationStructureSRTMotionInstanceNV` and `AccelerationStructureMatrixMotionInstanceNV` (#476)s (#490)\n- examples: Upgrade to winit 0.25 (#487)\n- To allow faster builds, Vulkan structures only implement `Debug` if the `debug` feature is enabled, which is the default (#482)\n- Use `Self` in macros (instead of `$name`) and `impl` blocks (#479)\n- Link Vulkan directly under the default `linked` feature. Disable default features and enable the `loaded` feature for the old `libloading` behaviour (#457)\n\n### Removed\n\n- Deprecated aliases for wrongly-named enum constants (containing `\"Backwards-compatible\"` in the Vulkan spec comment) are removed: switch to the version that it aliased (#502)\n- Removed `device()` function from `khr::Synchronization2` device extension (#494)\n- Removed `instance()` function from `ext::ExtendedDynamicState`, `khr::PushDescriptor`, `ext::ToolingInfo` and `khr::GetPhysicalDeviceProperties2` instance extensions (#494)\n- Removed `device` argument from `ext::DebugMarkers::debug_marker_set_object_name` function, `khr::PipelineExecutableProperties` and `khr::TimelineSemaphore` functions (#494, #499)\n- Removed `From<vk::Result>` trait for `VkResult` (#495)\n- Removed `instance` argument from `ext::DebugUtils::submit_debug_utils_message` function (#499)\n- Removed misleading `all()`/`-`/`-=` function/ops from bitflags (#478)\n\n## [0.33.3] - 2021-09-08\n\n### Added\n\n- Regenerated with Vulkan-Headers 1.2.191 (#463)\n\n## [0.33.2] - 2021-08-26\n\n### Fixed\n\n- `tooling_info`: Initialize `sType`/`pNext` in `get_physical_device_tool_properties` (#465)\n- Repeatedly call enumeration functions when `VK_INCOMPLETE` is returned (#465)\n\n## [0.33.1] - 2021-08-23\n\n### Fixed\n\n- util: Zero-initialize result to prevent possible uninit memory read (#470)\n\n## [0.33.0] - 2021-07-30\n\n### Added\n\n- Regenerated with Vulkan-Headers 1.2.186 (#456, #454, #446, #429)\n- Generate `push_next` function for all extended structs (#305)\n- Vulkan 1.2.175: Provisional Video Extensions (#417)\n- Globally remove all `allow(dead_code)` exceptions and make extensions public (#430)\n- Add extension wrapper for `VK_KHR_synchronization2` (#403)\n- added missing functions to `V1_0` traits (#416)\n- extensions/khr: Add `VK_KHR_external_fence_fd` wrapper (#413)\n- Add `VK_EXT_extended_dynamic_state` extension (#421)\n- Add `VK_KHR_get_physical_device_properties2` extension (#400)\n- extensions/khr: Add `ExternalSemaphoreFd` safe wrapper (#395)\n- Add `VK_KHR_get_memory_requirements2` extension (#401)\n- Add `VK_EXT_full_screen_exclusive` extension (#399)\n- Add `VK_NN_vi_surface` extension (#398)\n- Add `merge_pipeline_caches`, `queue_bind_sparse`, `get_render_area_granularity` to `DeviceV1_0` (#397)\n- Add `VK_KHR`/`EXT_buffer_device_address` extension (#405)\n- Add `VK_KHR_maintenance` extensions (#406)\n\n### Changed\n\n- Use `PFN_` types for struct members instead of repeating function signature (#438)\n- Untangle mismatched parameter/return `fn` signatures in types (#437)\n- Mark all function pointer types as `unsafe` (#436)\n- `pSampleMask` setter should write `NULL` if slice is empty (#432)\n- vk/platform_types: Mark `SECURITY_ATTRIBUTES` as a true `ffi::c_void` (#433)\n- Impl trait functions directly on `EntryCustom`/`Instance`/`Device` (#412)\n- Improve `Result`'s `Display` impl for extension values (#424)\n- Use lifetime borrows instead of raw pointers in `pp_geometries` (#420)\n- `Entry::new` returns `Err` when entry point isn't found (#390)\n- Remove the `_mvk` suffix from the two extensions' functions (#407)\n\n### Fixed\n\n- ash/extensions: Fix missing and broken autolinks to Vulkan docs (#459)\n- Adds `LICENSE-*` files to crate subdirectories (#452)\n- external_memory_fd: Initialize output struct with proper `sType` (#394)\n- entry_libloading: Do not pass `AsRef` implementation by reference (#389)\n\n## [0.32.1] - 2021-03-29\n\n### Added\n\n- Add high-level extension wrapper for the 1.1 extension `VK_KHR_create_renderpass2` (#414)\n\n## [0.32.0] - 2021-03-07\n\n### Added\n\n- Final KHR RayTracing support (`VK_KHR_ray_tracing_pipeline`, `VK_KHR_ray_query` and `VK_KHR_acceleration_structure` device extensions)\n- `VK_NV_device_diagnostics_config` device extension\n- `VK_KHR_deferred_host_operations` device extension\n- Expose header version and extension spec version constants\n- Provide Vulkan library loader from custom path\n\n### Changed\n\n- Removed deprecated experimental `VK_KHR_ray_tracing` extension\n- Update Vulkan-Headers to 1.2.168\n- Update libloading from 0.6 to 0.7\n\n### Fixed\n\n- Turn `c_void`-returning functions into Rust `()`\n- Use best guess for ggp extension types\n- Use raw pointers to static-sized arrays in FFI signatures\n- rename parameter of `get_physical_device_surface_support`\n\n## [0.31.0] - 2020-05-10\n\n### Added\n\n- `libloading` is now an optional dependency, but still used by default\n- Add metal surface extension\n- Implement `VK_KHR_draw_indirect_count`\n- Added const qualifier to `as_raw` and `from_raw` fns on enums\n\n### Changed\n\n- The `vk::Device` parameter in 1.2 functions is now implicit\n- Moved library creation out of `Entry::new_custom`\n\n### Fixed\n\n- Initialize MemoryRequirements with `Default` instead of `zeroed`\n\n## [0.30.0] - 2020-03-22\n\n### Added\n\n- Support for Vulkan 1.2 (Generated from spec 1.2.135)\n- Add `VK_KHR_timeline_semaphore` extension support\n- Add `VK_KHR_ray_tracing` extension support\n- Add `VK_KHR_external_memory_fd` extension support\n- More safety docs\n- Expose raw function pointers in extensions\n\n### Changed\n\n- Switch to [libloading](https://github.com/nagisa/rust_libloading)\n- Vulkan version macros are now const functions\n- Switched to a new [changelog](https://keepachangelog.com/en/1.0.0/) format\n\n### Fixed\n\n- Fix XCB types\n- Fix OSX build errors of the examples\n\n## Before 0.30.0\n\n### 0.29.0\n\n- *Breaking*: Removed Display impl for flags. The Debug impl now reports flags by name.\n- Functions now have a doc comment that links to the Vulkan spec\n- Entry has a new method called `try_enumerate_instance_version` which can be used in a 1.0 context.\n- The generator now uses `BTreeMap` for better diffs.\n\n### 0.28.0\n\n- Switched to a new [changelog](https://keepachangelog.com/en/1.0.0/) format\n- Fixed a build issue on ARM.\n- *Breaking*: Arrays are now passed by reference.\n- Builders are now marked as `#[transparent]`.\n- *Breaking*: Renamed `.next(..)` to `push_next`. `push_next` is only available on structs that are passed directly. Additionally `push_next` only accepts structs that can be inserted into the pointer chain. Read the readme for more information.\n- New -experimental- extensions. Those do not follow the semver rules and can be removed at any time.\n- Added `AmdGpaInterface` extension.\n\n# 0.27.0/1\n\n- Extensions are now namespaced. `ash::extensions::khr::Swapchain`\n- Removed vendor tags from extension methods\n- Added missing functions for VkEvent\n- The examples were updated to use the new builder pattern\n- A SPIR-V parsing function `ash::util::read_spv`\n- Added `get_pipeline_cache_data`\n\n### 0.26.0\n\n- Fix loader on MacOS.\n\n- Expose function pointers for easier interop with external libraries.\n\n- Builder now uses bool instead of Bool32.\n\n### 0.25.0\n\n- Adds support for Vulkan 1.1\n\n- Constants are not represented as an `enum` anymore. Constants and flags are both represented as associated constants.\n\n```Rust\nflags: vk::COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT,\n//to\nflags: vk::CommandPoolCreateFlags::RESET_COMMAND_BUFFER_BIT,\n\n```\n\n- Pretty printing for flags\n\n- Handles can be loaded from outside of ash. See `SomeHandle::from_raw`. This is useful if you need to interact with a C library.\n\n- Removing versioning from ash. `V1_X` are now gone. Versioning had very little benefit in practice, `Entry`, `Instance` and `Device` are now version free. A custom loader can still be implemented. The various traits still remain `DeviceV1_0`.\n\n- `vk.rs` is now generated from `vk.xml`\n\n- Ash now includes all docs inside the `vk.xml`, and are visible in rustdoc.\n\n- `Default` is now implemented for all structs\n\n- There is now a builder pattern\n\n- Handles are now `#[repr(transparent)]`\n\n- Various bug fixes\n\n### 0.18.0\n\n- Fixes arm build => uses libc everywhere. Remove `AlignByteSlice`.\n\n### 0.17.0\n\n- Refactor Align to use vk::DeviceSize.\n\n### 0.16.0\n\n- `map_memory` now returns a void ptr\n\n- `ash::util::Align` is a helper struct that\n  can write to aligned memory.\n\n[Unreleased]: https://github.com/ash-rs/ash/compare/0.38.0...HEAD\n[0.38.0]: https://github.com/ash-rs/ash/releases/tag/0.38.0\n[0.37.2]: https://github.com/ash-rs/ash/releases/tag/0.37.2\n[0.37.1]: https://github.com/ash-rs/ash/releases/tag/0.37.1\n[0.37.0]: https://github.com/ash-rs/ash/releases/tag/0.37.0\n[0.36.0]: https://github.com/ash-rs/ash/releases/tag/0.36.0\n[0.35.2]: https://github.com/ash-rs/ash/releases/tag/0.35.2\n[0.35.1]: https://github.com/ash-rs/ash/releases/tag/0.35.1\n[0.35.0]: https://github.com/ash-rs/ash/releases/tag/0.35.0\n[0.34.0]: https://github.com/ash-rs/ash/releases/tag/0.34.0\n[0.33.3]: https://github.com/ash-rs/ash/releases/tag/0.33.3\n[0.33.2]: https://github.com/ash-rs/ash/releases/tag/0.33.2\n[0.33.1]: https://github.com/ash-rs/ash/releases/tag/0.33.1\n[0.33.0]: https://github.com/ash-rs/ash/releases/tag/0.33.0\n[0.32.1]: https://github.com/ash-rs/ash/releases/tag/0.32.1\n[0.32.0]: https://github.com/ash-rs/ash/releases/tag/0.32.0\n[0.31.0]: https://github.com/ash-rs/ash/releases/tag/0.31.0\n[0.30.0]: https://github.com/ash-rs/ash/releases/tag/0.30.0\n"
        },
        {
          "name": "LICENSE-APACHE",
          "type": "blob",
          "size": 9.4638671875,
          "content": "Apache License\n\nVersion 2.0, January 2004\n\nhttp://www.apache.org/licenses/\n\nTERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n1. Definitions.\n\n\"License\" shall mean the terms and conditions for use, reproduction, and distribution as defined by Sections 1 through 9 of this document.\n\n\"Licensor\" shall mean the copyright owner or entity authorized by the copyright owner that is granting the License.\n\n\"Legal Entity\" shall mean the union of the acting entity and all other entities that control, are controlled by, or are under common control with that entity. For the purposes of this definition, \"control\" means (i) the power, direct or indirect, to cause the direction or management of such entity, whether by contract or otherwise, or (ii) ownership of fifty percent (50%) or more of the outstanding shares, or (iii) beneficial ownership of such entity.\n\n\"You\" (or \"Your\") shall mean an individual or Legal Entity exercising permissions granted by this License.\n\n\"Source\" form shall mean the preferred form for making modifications, including but not limited to software source code, documentation source, and configuration files.\n\n\"Object\" form shall mean any form resulting from mechanical transformation or translation of a Source form, including but not limited to compiled object code, generated documentation, and conversions to other media types.\n\n\"Work\" shall mean the work of authorship, whether in Source or Object form, made available under the License, as indicated by a copyright notice that is included in or attached to the work (an example is provided in the Appendix below).\n\n\"Derivative Works\" shall mean any work, whether in Source or Object form, that is based on (or derived from) the Work and for which the editorial revisions, annotations, elaborations, or other modifications represent, as a whole, an original work of authorship. For the purposes of this License, Derivative Works shall not include works that remain separable from, or merely link (or bind by name) to the interfaces of, the Work and Derivative Works thereof.\n\n\"Contribution\" shall mean any work of authorship, including the original version of the Work and any modifications or additions to that Work or Derivative Works thereof, that is intentionally submitted to Licensor for inclusion in the Work by the copyright owner or by an individual or Legal Entity authorized to submit on behalf of the copyright owner. For the purposes of this definition, \"submitted\" means any form of electronic, verbal, or written communication sent to the Licensor or its representatives, including but not limited to communication on electronic mailing lists, source code control systems, and issue tracking systems that are managed by, or on behalf of, the Licensor for the purpose of discussing and improving the Work, but excluding communication that is conspicuously marked or otherwise designated in writing by the copyright owner as \"Not a Contribution.\"\n\n\"Contributor\" shall mean Licensor and any individual or Legal Entity on behalf of whom a Contribution has been received by Licensor and subsequently incorporated within the Work.\n\n2. Grant of Copyright License. Subject to the terms and conditions of this License, each Contributor hereby grants to You a perpetual, worldwide, non-exclusive, no-charge, royalty-free, irrevocable copyright license to reproduce, prepare Derivative Works of, publicly display, publicly perform, sublicense, and distribute the Work and such Derivative Works in Source or Object form.\n\n3. Grant of Patent License. Subject to the terms and conditions of this License, each Contributor hereby grants to You a perpetual, worldwide, non-exclusive, no-charge, royalty-free, irrevocable (except as stated in this section) patent license to make, have made, use, offer to sell, sell, import, and otherwise transfer the Work, where such license applies only to those patent claims licensable by such Contributor that are necessarily infringed by their Contribution(s) alone or by combination of their Contribution(s) with the Work to which such Contribution(s) was submitted. If You institute patent litigation against any entity (including a cross-claim or counterclaim in a lawsuit) alleging that the Work or a Contribution incorporated within the Work constitutes direct or contributory patent infringement, then any patent licenses granted to You under this License for that Work shall terminate as of the date such litigation is filed.\n\n4. Redistribution. You may reproduce and distribute copies of the Work or Derivative Works thereof in any medium, with or without modifications, and in Source or Object form, provided that You meet the following conditions:\n\nYou must give any other recipients of the Work or Derivative Works a copy of this License; and\nYou must cause any modified files to carry prominent notices stating that You changed the files; and\nYou must retain, in the Source form of any Derivative Works that You distribute, all copyright, patent, trademark, and attribution notices from the Source form of the Work, excluding those notices that do not pertain to any part of the Derivative Works; and\nIf the Work includes a \"NOTICE\" text file as part of its distribution, then any Derivative Works that You distribute must include a readable copy of the attribution notices contained within such NOTICE file, excluding those notices that do not pertain to any part of the Derivative Works, in at least one of the following places: within a NOTICE text file distributed as part of the Derivative Works; within the Source form or documentation, if provided along with the Derivative Works; or, within a display generated by the Derivative Works, if and wherever such third-party notices normally appear. The contents of the NOTICE file are for informational purposes only and do not modify the License. You may add Your own attribution notices within Derivative Works that You distribute, alongside or as an addendum to the NOTICE text from the Work, provided that such additional attribution notices cannot be construed as modifying the License. \n\nYou may add Your own copyright statement to Your modifications and may provide additional or different license terms and conditions for use, reproduction, or distribution of Your modifications, or for any such Derivative Works as a whole, provided Your use, reproduction, and distribution of the Work otherwise complies with the conditions stated in this License.\n5. Submission of Contributions. Unless You explicitly state otherwise, any Contribution intentionally submitted for inclusion in the Work by You to the Licensor shall be under the terms and conditions of this License, without any additional terms or conditions. Notwithstanding the above, nothing herein shall supersede or modify the terms of any separate license agreement you may have executed with Licensor regarding such Contributions.\n\n6. Trademarks. This License does not grant permission to use the trade names, trademarks, service marks, or product names of the Licensor, except as required for reasonable and customary use in describing the origin of the Work and reproducing the content of the NOTICE file.\n\n7. Disclaimer of Warranty. Unless required by applicable law or agreed to in writing, Licensor provides the Work (and each Contributor provides its Contributions) on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied, including, without limitation, any warranties or conditions of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A PARTICULAR PURPOSE. You are solely responsible for determining the appropriateness of using or redistributing the Work and assume any risks associated with Your exercise of permissions under this License.\n\n8. Limitation of Liability. In no event and under no legal theory, whether in tort (including negligence), contract, or otherwise, unless required by applicable law (such as deliberate and grossly negligent acts) or agreed to in writing, shall any Contributor be liable to You for damages, including any direct, indirect, special, incidental, or consequential damages of any character arising as a result of this License or out of the use or inability to use the Work (including but not limited to damages for loss of goodwill, work stoppage, computer failure or malfunction, or any and all other commercial damages or losses), even if such Contributor has been advised of the possibility of such damages.\n\n9. Accepting Warranty or Additional Liability. While redistributing the Work or Derivative Works thereof, You may choose to offer, and charge a fee for, acceptance of support, warranty, indemnity, or other liability obligations and/or rights consistent with this License. However, in accepting such obligations, You may act only on Your own behalf and on Your sole responsibility, not on behalf of any other Contributor, and only if You agree to indemnify, defend, and hold each Contributor harmless for any liability incurred by, or claims asserted against, such Contributor by reason of your accepting any such warranty or additional liability.\n\nEND OF TERMS AND CONDITIONS\n\nCopyright 2016 Maik Klein\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n"
        },
        {
          "name": "LICENSE-MIT",
          "type": "blob",
          "size": 1.0224609375,
          "content": "Copyright (c) 2016 ASH\n\nPermission is hereby granted, free of charge, to any\nperson obtaining a copy of this software and associated\ndocumentation files (the \"Software\"), to deal in the\nSoftware without restriction, including without\nlimitation the rights to use, copy, modify, merge,\npublish, distribute, sublicense, and/or sell copies of\nthe Software, and to permit persons to whom the Software\nis furnished to do so, subject to the following\nconditions:\n\nThe above copyright notice and this permission notice\nshall be included in all copies or substantial portions\nof the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF\nANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED\nTO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A\nPARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT\nSHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\nOF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR\nIN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\nDEALINGS IN THE SOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 11.044921875,
          "content": "# Ash\n\nA very lightweight wrapper around Vulkan\n\n[![Crates.io Version](https://img.shields.io/crates/v/ash.svg)](https://crates.io/crates/ash)\n[![Documentation](https://docs.rs/ash/badge.svg)](https://docs.rs/ash)\n[![Build Status](https://github.com/ash-rs/ash/workflows/CI/badge.svg)](https://github.com/ash-rs/ash/actions?workflow=CI)\n[![LICENSE](https://img.shields.io/badge/license-MIT-blue.svg)](LICENSE-MIT)\n[![LICENSE](https://img.shields.io/badge/license-Apache--2.0-blue.svg)](LICENSE-APACHE)\n[![Join the chat at https://gitter.im/MaikKlein/ash](https://badges.gitter.im/MaikKlein/ash.svg)](https://gitter.im/MaikKlein/ash?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)\n[![MSRV](https://img.shields.io/badge/rustc-1.69.0+-ab6000.svg)](https://blog.rust-lang.org/2023/04/20/Rust-1.69.0.html)\n\n## Overview\n\n- [x] A true Vulkan API without compromises\n- [x] Convenience features without limiting functionality\n- [x] Additional type safety\n- [x] Device local function pointer loading\n- [x] No validation, everything is **unsafe**\n- [x] Lifetime-safety on structs created with the builder pattern\n- [x] Generated from `vk.xml`\n- [x] Support for Vulkan `1.1`, `1.2`, `1.3`\n- [x] `no_std` support\n\n## ⚠️ Semver compatibility warning\n\nThe Vulkan Video bindings are experimental and still seeing breaking changes in their upstream specification, and are only provided by Ash for early adopters. All related functions and types are semver-exempt [^1] (we allow breaking API changes while releasing Ash with non-breaking semver bumps).\n\n[^1]: `generator` complexity makes it so that we cannot easily hide these bindings behind a non-`default` feature flag, and they are widespread across the generated codebase.\n\n## Features\n\n### Explicit returns with `Result`\n\n```rust\n// function signature\npub fn create_instance(&self,\n                       create_info: &vk::InstanceCreateInfo<'_>,\n                       allocation_callbacks: Option<&vk::AllocationCallbacks<'_>>)\n                       -> Result<Instance, InstanceError> { .. }\nlet instance = entry.create_instance(&create_info, None)\n    .expect(\"Instance creation error\");\n```\n\n### `Vec<T>` instead of mutable slices\n\n```rust\npub fn get_swapchain_images(&self,\n                            swapchain: vk::SwapchainKHR)\n                            -> VkResult<Vec<vk::Image>>;\nlet present_images = swapchain_loader.get_swapchain_images_khr(swapchain).unwrap();\n```\n\n_Note_: Functions don't return `Vec<T>` if this would limit the functionality. See `p_next`.\n\n### Slices\n\n```rust\npub fn cmd_pipeline_barrier(&self,\n                            command_buffer: vk::CommandBuffer,\n                            src_stage_mask: vk::PipelineStageFlags,\n                            dst_stage_mask: vk::PipelineStageFlags,\n                            dependency_flags: vk::DependencyFlags,\n                            memory_barriers: &[vk::MemoryBarrier<'_>],\n                            buffer_memory_barriers: &[vk::BufferMemoryBarrier<'_>],\n                            image_memory_barriers: &[vk::ImageMemoryBarrier<'_>]);\n```\n\n### Strongly typed handles\n\nEach Vulkan handle type is exposed as a newtyped struct for improved type safety. Null handles can be constructed with\n`T::null()`, and handles may be freely converted to and from `u64` with `Handle::from_raw` and `Handle::as_raw` for\ninterop with non-Ash Vulkan code.\n\n### Builder pattern\n\n```rust\nlet queue_info = [vk::DeviceQueueCreateInfo::default()\n    .queue_family_index(queue_family_index)\n    .queue_priorities(&priorities)];\n\nlet device_create_info = vk::DeviceCreateInfo::default()\n    .queue_create_infos(&queue_info)\n    .enabled_extension_names(&device_extension_names_raw)\n    .enabled_features(&features);\n\nlet device: Device = instance\n    .create_device(pdevice, &device_create_info, None)\n    .unwrap();\n```\n\n### Pointer chains\n\nUse `base.push(ext)` to insert `ext` at the front of the pointer chain attached to `base`.  If `ext` already contains a valid pointer chain of its own, `unsafe`ly call `extend()` instead.\n\n```rust\nlet mut variable_pointers = vk::PhysicalDeviceVariablePointerFeatures::default();\nlet mut corner = vk::PhysicalDeviceCornerSampledImageFeaturesNV::default();\n\nlet mut device_create_info = vk::DeviceCreateInfo::default()\n    .push(&mut corner)\n    .push(&mut variable_pointers);\n```\n\nThe generic argument of `.push()` only allows valid structs to extend a given struct (known as [`structextends` in the Vulkan registry](https://registry.khronos.org/vulkan/specs/1.3/styleguide.html#extensions-interactions), mapped to `Extends*` traits).\nOnly structs that are listed one or more times in any `structextends` will implement a `.push()`.\n\n### Flags and constants as associated constants\n\n```rust\n// Bitflag\nvk::AccessFlags::COLOR_ATTACHMENT_READ | vk::AccessFlags::COLOR_ATTACHMENT_WRITE\n```\n\n```rust\n// Constant\nvk::PipelineBindPoint::GRAPHICS,\n```\n\n### Debug/Display for Flags\n\n```rust\nlet flag = vk::AccessFlags::COLOR_ATTACHMENT_READ\n        | vk::AccessFlags::COLOR_ATTACHMENT_WRITE;\nprintln!(\"Debug: {:?}\", flag);\nprintln!(\"Display: {}\", flag);\n// Prints:\n// Debug: AccessFlags(110000000)\n// Display: COLOR_ATTACHMENT_READ | COLOR_ATTACHMENT_WRITE\n```\n\n### Function pointer loading\n\nAsh also takes care of loading the function pointers. Function pointers are split into 3 categories.\n\n- Entry: Loads the Vulkan library. Needs to outlive `Instance` and `Device`.\n- Instance: Loads instance level functions. Needs to outlive the `Device`s it has created.\n- Device: Loads device **local** functions.\n\nThe loader is just one possible implementation:\n\n- Device level functions are retrieved on a per device basis.\n- Everything is loaded by default, functions that failed to load are initialized to a function that always panics.\n- Do not call Vulkan 1.1 functions if you have created a 1.0 instance. Doing so will result in a panic.\n\nCustom loaders can be implemented.\n\n### Extension loading\n\nAdditionally, every Vulkan extension has to be loaded explicitly. You can find all extensions directly under `ash::*` in a module with their prefix (e.g. `khr` or `ext`).\n\n```rust\nuse ash::khr;\nlet swapchain_loader = khr::swapchain::Device::new(&instance, &device);\nlet swapchain = swapchain_loader.create_swapchain(&swapchain_create_info).unwrap();\n```\n\n### Raw function pointers\n\nRaw function pointers are available, if something hasn't been exposed yet in the higher level API. Please open an issue if anything is missing.\n\n```rust\ndevice.fp_v1_0().destroy_device(...);\n```\n\n### Support for extension names\n\n```rust\nuse ash::{ext, khr};\n#[cfg(all(unix, not(target_os = \"android\")))]\nfn extension_names() -> Vec<*const i8> {\n    vec![\n        khr::surface::NAME.as_ptr(),\n        khr::xlib_surface::NAME.as_ptr(),\n        ext::debug_utils::NAME.as_ptr(),\n    ]\n}\n```\n\n### Implicit handles\n\nHandles from Instance or Device are passed implicitly.\n\n```rust\npub fn create_command_pool(&self,\n                           create_info: &vk::CommandPoolCreateInfo<'_>)\n                           -> VkResult<vk::CommandPool>;\n\nlet pool = device.create_command_pool(&pool_create_info).unwrap();\n```\n\n### Optional linking\n\nThe default `loaded` cargo feature will dynamically load the default Vulkan library for the current platform with `Entry::load`, meaning that the build environment does not have to have Vulkan development packages installed.\n\nIf, on the other hand, your application cannot handle Vulkan being missing at runtime, you can instead enable the `linked` feature, which will link your binary with the Vulkan loader directly and expose the infallible `Entry::linked`.\n\n### Use in `no_std` environments\n\nAsh can be used in `no_std` environments (with `alloc`) by disabling the `std` feature.\n\n## Example\n\nYou can find the examples [here](https://github.com/ash-rs/ash/tree/master/ash-examples).\nAll examples currently require: the LunarG Validation layers and a Vulkan library that is visible in your `PATH`. An easy way to get started is to use the [LunarG Vulkan SDK](https://lunarg.com/vulkan-sdk/)\n\n#### Windows\n\nMake sure that you have a Vulkan ready driver and install the [LunarG Vulkan SDK](https://lunarg.com/vulkan-sdk/).\n\n#### Linux\n\nInstall a Vulkan driver for your graphics hardware of choice, and (optionally) the [Validation Layers](https://github.com/KhronosGroup/Vulkan-ValidationLayers) via your package manager:\n\n- Arch Linux: https://wiki.archlinux.org/title/Vulkan.\n- Gentoo: https://wiki.gentoo.org/wiki/Vulkan.\n- Ubuntu/Debian: Besides installing a compatible graphics driver, install [`vulkan-validationlayers`](https://packages.ubuntu.com/vulkan-validationlayers) ([Debian](https://packages.debian.org/search?keywords=vulkan-validationlayers)) for the Validation Layers.\n- Other distros: consult your distro documentation and/or package repository for the preferred method to install and use Vulkan.\n\n#### macOS\n\nInstall the [LunarG Vulkan SDK](https://lunarg.com/vulkan-sdk/). The installer puts the SDK in `$HOME/VulkanSDK/<version>` by default. You will need to set the following environment variables when running cargo:\n\n```sh\nVULKAN_SDK=$HOME/VulkanSDK/<version>/macOS \\\nDYLD_FALLBACK_LIBRARY_PATH=$VULKAN_SDK/lib \\\nVK_ICD_FILENAMES=$VULKAN_SDK/share/vulkan/icd.d/MoltenVK_icd.json \\\nVK_LAYER_PATH=$VULKAN_SDK/share/vulkan/explicit_layer.d \\\ncargo run ...\n```\n\n### [Triangle](https://github.com/ash-rs/ash/blob/master/ash-examples/src/bin/triangle.rs)\n\nDisplays a triangle with vertex colors.\n\n```sh\ncargo run -p ash-examples --bin triangle\n```\n\n![screenshot](https://i.imgur.com/PQZcL6w.jpg)\n\n### [Texture](https://github.com/ash-rs/ash/blob/master/ash-examples/src/bin/texture.rs)\n\nDisplays a texture on a quad.\n\n```sh\ncargo run -p ash-examples --bin texture\n```\n\n![texture](https://i.imgur.com/trow00H.png)\n\n## Useful resources\n\n### Examples\n\n- [vulkan-tutorial-rust](https://github.com/Usami-Renko/vulkan-tutorial-rust) - A port of [vulkan-tutorial.com](https://vulkan-tutorial.com).\n- [ash-sample-progression](https://github.com/bzm3r/ash-sample-progression) - A port of the LunarG examples.\n- [ash-nv-rt](https://github.com/gwihlidal/ash-nv-rt) A raytracing example for ash.\n\n### Utility libraries\n\n- [vk-sync](https://github.com/gwihlidal/vk-sync-rs) - Simplified Vulkan synchronization logic, written in rust.\n- [vk-mem-rs](https://github.com/gwihlidal/vk-mem-rs) - This crate provides an FFI layer and idiomatic rust wrappers for the excellent AMD Vulkan Memory Allocator (VMA) C/C++ library.\n- [gpu-allocator](https://github.com/Traverse-Research/gpu-allocator) - GPU Memory allocator written in pure Rust for Vulkan and DirectX 12.\n- [lahar](https://github.com/Ralith/lahar) - Tools for asynchronously uploading data to a Vulkan device.\n\n### Libraries that use ash\n\n- [gfx-rs](https://github.com/gfx-rs/gfx) - gfx-rs is a low-level, cross-platform graphics abstraction library in Rust.\n\n## A thanks to\n\n- [Api with no secrets](https://software.intel.com/en-us/articles/api-without-secrets-introduction-to-vulkan-part-1)\n- [Vulkan tutorial](https://jhenriques.net/development.html)\n- [Vulkan examples](https://github.com/SaschaWillems/Vulkan)\n- [Vulkan tutorial](https://vulkan-tutorial.com/)\n- [Vulkano](https://github.com/vulkano-rs/vulkano)\n- [vk-rs](https://github.com/Osspial/vk-rs)\n"
        },
        {
          "name": "analysis",
          "type": "tree",
          "content": null
        },
        {
          "name": "ash-examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "ash-rewrite",
          "type": "tree",
          "content": null
        },
        {
          "name": "ash-window",
          "type": "tree",
          "content": null
        },
        {
          "name": "ash",
          "type": "tree",
          "content": null
        },
        {
          "name": "bors.toml",
          "type": "blob",
          "size": 0.048828125,
          "content": "status = [\"check\"]\n\ntimeout_sec = 18000 # 5 hours\n"
        },
        {
          "name": "generator-rewrite",
          "type": "tree",
          "content": null
        },
        {
          "name": "generator",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}