{
  "metadata": {
    "timestamp": 1736708994532,
    "page": 51,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjYw",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "borgo-lang/borgo",
      "stars": 4276,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.0849609375,
          "content": "/target\n/wasm/pkg\nnode_modules\n*.wasm\n/playground/static\n/playground/examples.out.json\n"
        },
        {
          "name": "Cargo.lock",
          "type": "blob",
          "size": 5.8212890625,
          "content": "# This file is automatically @generated by Cargo.\n# It is not intended for manual editing.\nversion = 3\n\n[[package]]\nname = \"bumpalo\"\nversion = \"3.12.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3c6ed94e98ecff0c12dd1b04c15ec0d7d9458ca8fe806cea6f12954efe74c63b\"\n\n[[package]]\nname = \"cfg-if\"\nversion = \"1.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"baf1de4339761588bc0619e3cbc0120ee582ebb74b53b4efbf79117bd2da40fd\"\n\n[[package]]\nname = \"compiler\"\nversion = \"0.1.0\"\ndependencies = [\n \"expect-test\",\n \"serde\",\n \"serde_json\",\n]\n\n[[package]]\nname = \"console_error_panic_hook\"\nversion = \"0.1.7\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a06aeb73f470f66dcdbf7223caeebb85984942f22f1adb2a088cf9668146bbbc\"\ndependencies = [\n \"cfg-if\",\n \"wasm-bindgen\",\n]\n\n[[package]]\nname = \"dissimilar\"\nversion = \"1.0.7\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"86e3bdc80eee6e16b2b6b0f87fbc98c04bee3455e35174c0de1a125d0688c632\"\n\n[[package]]\nname = \"expect-test\"\nversion = \"1.4.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"30d9eafeadd538e68fb28016364c9732d78e420b9ff8853fa5e4058861e9f8d3\"\ndependencies = [\n \"dissimilar\",\n \"once_cell\",\n]\n\n[[package]]\nname = \"itoa\"\nversion = \"1.0.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"fad582f4b9e86b6caa621cabeb0963332d92eea04729ab12892c2533951e6440\"\n\n[[package]]\nname = \"js-sys\"\nversion = \"0.3.62\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"68c16e1bfd491478ab155fd8b4896b86f9ede344949b641e61501e07c2b8b4d5\"\ndependencies = [\n \"wasm-bindgen\",\n]\n\n[[package]]\nname = \"log\"\nversion = \"0.4.17\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"abb12e687cfb44aa40f41fc3978ef76448f9b6038cad6aef4259d3c095a2382e\"\ndependencies = [\n \"cfg-if\",\n]\n\n[[package]]\nname = \"once_cell\"\nversion = \"1.17.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b7e5500299e16ebb147ae15a00a942af264cf3688f47923b8fc2cd5858f23ad3\"\n\n[[package]]\nname = \"proc-macro2\"\nversion = \"1.0.56\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"2b63bdb0cd06f1f4dedf69b254734f9b45af66e4a031e42a7480257d9898b435\"\ndependencies = [\n \"unicode-ident\",\n]\n\n[[package]]\nname = \"quote\"\nversion = \"1.0.27\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8f4f29d145265ec1c483c7c654450edde0bfe043d3938d6972630663356d9500\"\ndependencies = [\n \"proc-macro2\",\n]\n\n[[package]]\nname = \"ryu\"\nversion = \"1.0.12\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"7b4b9743ed687d4b4bcedf9ff5eaa7398495ae14e61cba0a295704edbc7decde\"\n\n[[package]]\nname = \"serde\"\nversion = \"1.0.152\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"bb7d1f0d3021d347a83e556fc4683dea2ea09d87bccdf88ff5c12545d89d5efb\"\ndependencies = [\n \"serde_derive\",\n]\n\n[[package]]\nname = \"serde-wasm-bindgen\"\nversion = \"0.4.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e3b4c031cd0d9014307d82b8abf653c0290fbdaeb4c02d00c63cf52f728628bf\"\ndependencies = [\n \"js-sys\",\n \"serde\",\n \"wasm-bindgen\",\n]\n\n[[package]]\nname = \"serde_derive\"\nversion = \"1.0.152\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"af487d118eecd09402d70a5d72551860e788df87b464af30e5ea6a38c75c541e\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn 1.0.107\",\n]\n\n[[package]]\nname = \"serde_json\"\nversion = \"1.0.93\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"cad406b69c91885b5107daf2c29572f6c8cdb3c66826821e286c533490c0bc76\"\ndependencies = [\n \"itoa\",\n \"ryu\",\n \"serde\",\n]\n\n[[package]]\nname = \"syn\"\nversion = \"1.0.107\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1f4064b5b16e03ae50984a5a8ed5d4f8803e6bc1fd170a3cda91a1be4b18e3f5\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"unicode-ident\",\n]\n\n[[package]]\nname = \"syn\"\nversion = \"2.0.16\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a6f671d4b5ffdb8eadec19c0ae67fe2639df8684bd7bc4b83d986b8db549cf01\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"unicode-ident\",\n]\n\n[[package]]\nname = \"unicode-ident\"\nversion = \"1.0.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"84a22b9f218b40614adcb3f4ff08b703773ad44fa9423e4e0d346d5db86e4ebc\"\n\n[[package]]\nname = \"wasm\"\nversion = \"0.1.0\"\ndependencies = [\n \"compiler\",\n \"console_error_panic_hook\",\n \"serde\",\n \"serde-wasm-bindgen\",\n \"wasm-bindgen\",\n]\n\n[[package]]\nname = \"wasm-bindgen\"\nversion = \"0.2.85\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"5b6cb788c4e39112fbe1822277ef6fb3c55cd86b95cb3d3c4c1c9597e4ac74b4\"\ndependencies = [\n \"cfg-if\",\n \"wasm-bindgen-macro\",\n]\n\n[[package]]\nname = \"wasm-bindgen-backend\"\nversion = \"0.2.85\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"35e522ed4105a9d626d885b35d62501b30d9666283a5c8be12c14a8bdafe7822\"\ndependencies = [\n \"bumpalo\",\n \"log\",\n \"once_cell\",\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.16\",\n \"wasm-bindgen-shared\",\n]\n\n[[package]]\nname = \"wasm-bindgen-macro\"\nversion = \"0.2.85\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"358a79a0cb89d21db8120cbfb91392335913e4890665b1a7981d9e956903b434\"\ndependencies = [\n \"quote\",\n \"wasm-bindgen-macro-support\",\n]\n\n[[package]]\nname = \"wasm-bindgen-macro-support\"\nversion = \"0.2.85\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"4783ce29f09b9d93134d41297aded3a712b7b979e9c6f28c32cb88c973a94869\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.16\",\n \"wasm-bindgen-backend\",\n \"wasm-bindgen-shared\",\n]\n\n[[package]]\nname = \"wasm-bindgen-shared\"\nversion = \"0.2.85\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a901d592cafaa4d711bc324edfaff879ac700b19c3dfd60058d2b445be2691eb\"\n"
        },
        {
          "name": "Cargo.toml",
          "type": "blob",
          "size": 0.0654296875,
          "content": "[workspace]\n\nresolver = \"2\"\n\nmembers = [\n  \"compiler\",\n  \"wasm\",\n]\n"
        },
        {
          "name": "Justfile",
          "type": "blob",
          "size": 2.0078125,
          "content": "default:\n  just --list\n\nbuild:\n  cargo build --bin compiler \n\ntest-runner test_suite=\"\": build\n  cd compiler/ && deno run -A test/runner.ts {{test_suite}}\n\nbuild-examples:\n  mkdir -p playground/static\n  deno run -A playground/build-examples.ts\n\nrun-examples: build build-examples\n  cd compiler/ && deno run -A test/run-examples.ts\n\nrun-importer +args=\"-folder testpkg\":\n  cd importer/ && go run importer.go {{args}}\n\nupdate-packages:\n  deno run -A importer/update-packages.ts\n\nserve-playground:\n  python3 -m http.server 8888 --directory playground/static\n\nplayground-js: build-examples\n  cp playground/style.css playground/static\n  cd playground && npx esbuild --bundle wasm-index.js --outfile=static/bundle.js\n\nplayground-wasm mode=\"--debug\":\n  #!/usr/bin/env bash\n  cd wasm/\n  wasm-pack build --target web {{mode}}\n  cp -R pkg ../playground/static\n  rm ../playground/static/pkg/.gitignore\n\nplayground-prod: playground-js\n  #!/usr/bin/env bash\n  just playground-wasm --release\n  cd playground/static\n  cat bundle.js | npx esbuild --minify > prod.js\n  mv prod.js bundle.js\n\nwatch +command:\n  watchexec -e rs,md,ts,brg,go,html,js,css,eta \"just {{command}}\"\n\ndeploy-playground destination: playground-prod\n  cp -R playground/static/* {{destination}}\n\ninit-project folder:\n  #!/usr/bin/env bash\n  set -euo pipefail\n\n  DEST={{folder}}\n  ROOT=\".\"\n  MAIN=\"main.brg\"\n\n  if [ -d \"$DEST\" ];\n  then\n      echo \"Folder \\\"$DEST\\\" already exists.\"\n      exit 1\n  fi\n\n  echo \"Creating project folder: \\\"$DEST\\\"\"\n  mkdir -p $DEST\n\n  echo \"Building compiler\"\n  cargo build --bin compiler\n\n  echo \"Copying files\"\n  cp -R $ROOT/std $DEST\n\n  echo \"\n  module borgo_test\n  go 1.19\n  \" > $DEST/go.mod\n\n  echo \"\n  use fmt;\n\n  fn main() {\n    fmt.Println(\\\"Hello world!\\\");\n  }\n  \" > $DEST/$MAIN\n\n  # Copy compiler as well\n  cp $ROOT/target/debug/compiler $DEST/borgo\n\n  # cd $DEST\n  # ./borgo build && go run .\n\n  echo \"\n\n    Done! You can now edit $MAIN and run the compiler.\n\n    cd $DEST\n    ./borgo build && go run .\n\n    Keep in mind a lot of stuff is broken. Have fun!\n  \"\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 3.6025390625,
          "content": "# The Borgo Programming Language\n\n![Borgo sits between Go and Rust](https://raw.githubusercontent.com/borgo-lang/borgo-lang.github.io/main/borgo.jpg)\n\n---\n\n![build](https://github.com/borgo-lang/borgo/actions/workflows/ci.yml/badge.svg)\n\nI want a language for writing applications that is more expressive than Go but\nless complex than Rust.\n\nGo is simple and straightforward, but I often wish it offered more type safety.\nRust is very nice to work with (at least for single threaded code) but it's too\nbroad and complex, sometimes painfully so.\n\n**Borgo is a new language that transpiles to Go**. It's fully compatible with\nexisting Go packages.\n\nBorgo syntax is similar to Rust, with optional semi-colons.\n\n# Tutorial\n\nCheck out the **[online playground](https://borgo-lang.github.io/)** for a tour\nof the language.\n\nYou can also take a look at test files for working Borgo code:\n\n- [codegen-emit.md](compiler/test/codegen-emit.md)\n- [infer-expr.md](compiler/test/infer-expr.md)\n- [infer-file.md](compiler/test/infer-file.md)\n\n# Features\n\n## Algebraic data types and pattern matching\n\n```rust\nuse fmt\n\nenum NetworkState {\n    Loading,\n    Failed(int),\n    Success(string),\n}\n\nlet msg = match state {\n    NetworkState.Loading => \"still loading\",\n    NetworkState.Failed(code) => fmt.Sprintf(\"Got error code: %d\", code),\n    NetworkState.Success(res) => res,\n}\n```\n\n---\n\n## `Option<T>` instead of `nil`\n\n```rust\n// import packages from Go stdlib\nuse fmt\nuse os\n\nlet key = os.LookupEnv(\"HOME\")\n\nmatch key {\n    Some(s) => fmt.Println(\"home dir:\", s),\n    None => fmt.Println(\"Not found in env\"),\n}\n```\n\n---\n\n## `Result<T, E>` instead of multiple return values\n\n```rust\nuse fmt\nuse net.http\n\nfn makeRequest() -> Result<int, error> {\n    let request = http.Get(\"http://example.com\")\n\n    match request {\n        Ok(resp) => Ok(resp.StatusCode),\n        Err(err) => Err(fmt.Errorf(\"failed http request %w\", err))\n    }\n}\n```\n\n---\n\n## Error handling with `?` operator\n\n```rust\nuse fmt\nuse io\nuse os\n\nfn copyFile(src: string, dst: string) -> Result<(), error> {\n    let stat = os.Stat(src)?\n\n    if !stat.Mode().IsRegular() {\n        return Err(fmt.Errorf(\"%s is not a regular file\", src))\n    }\n\n    let source = os.Open(src)?\n    defer source.Close()\n\n    let destination = os.Create(dst)?\n    defer destination.Close()\n\n    // ignore number of bytes copied\n    let _ = io.Copy(destination, source)?\n\n    Ok(())\n}\n```\n\n---\n\n## Guessing game example\n\nSmall game from the Rust book, implemented in Borgo.\n\nThings to note:\n\n- import packages from Go stdlib\n- `strconv.Atoi` returns an `Option<int>`\n- `Reader.ReadString` returns a `Result<string, error>` (which can be unwrapped)\n\n```rust\nuse bufio\nuse fmt\nuse math.rand\nuse os\nuse strconv\nuse strings\n\nfn main() {\n    let reader = bufio.NewReader(os.Stdin)\n\n    let secret = rand.Intn(100) + 1\n\n    loop {\n        fmt.Println(\"Please input your guess.\")\n\n        let text = reader.ReadString('\\n').Unwrap()\n        let text = strings.TrimSpace(text)\n\n        let guess = match strconv.Atoi(text) {\n            Ok(n) => n,\n            Err(_) => continue,\n        }\n\n        fmt.Println(\"You guessed: \", guess)\n\n        if guess < secret {\n            fmt.Println(\"Too small!\")\n        } else if guess > secret {\n            fmt.Println(\"Too big!\")\n        } else {\n            fmt.Println(\"Correct!\")\n            break\n        }\n    }\n}\n```\n\n## Running locally\n\nBorgo is written in Rust, so you'll need `cargo`.\n\nTo compile all `.brg` files in the current folder:\n\n```bash\n$ cargo run -- build\n```\n\nThe compiler will generate `.go` files, which you can run as normal:\n\n```bash\n# generate a go.mod file if needed\n# $ go mod init foo\n$ go run .\n```\n"
        },
        {
          "name": "compiler",
          "type": "tree",
          "content": null
        },
        {
          "name": "deno.lock",
          "type": "blob",
          "size": 0.859375,
          "content": "{\n  \"version\": \"2\",\n  \"remote\": {\n    \"https://deno.land/std@0.154.0/fmt/colors.ts\": \"ff7dc9c9f33a72bd48bc24b21bbc1b4545d8494a431f17894dbc5fe92a938fc4\",\n    \"https://deno.land/std@0.154.0/testing/_diff.ts\": \"141f978a283defc367eeee3ff7b58aa8763cf7c8e0c585132eae614468e9d7b8\",\n    \"https://deno.land/std@0.154.0/testing/_format.ts\": \"cd11136e1797791045e639e9f0f4640d5b4166148796cad37e6ef75f7d7f3832\",\n    \"https://deno.land/std@0.154.0/testing/asserts.ts\": \"ac295f7fd22a7af107580e2475402a8c386cb1bf18bf837ae266ac0665786026\",\n    \"https://esm.sh/marked@4.0.18\": \"48abadf2d5640696a682be72e215df7fbbc99fd654b4cf79eb7fafb983d8f485\",\n    \"https://esm.sh/v95/@types/marked@4.0.7/index.d.ts\": \"c51eb515e127bb15087a6ad404c9c38121f1ccac85ea247baa554c43942ee07c\",\n    \"https://esm.sh/v95/marked@4.0.18/deno/marked.js\": \"225ee1b74220208e146798b2f6a825974e30abed690b4f6ae526166e8e8b17cb\"\n  }\n}\n"
        },
        {
          "name": "flake.lock",
          "type": "blob",
          "size": 3.3173828125,
          "content": "{\n  \"nodes\": {\n    \"flake-utils\": {\n      \"inputs\": {\n        \"systems\": \"systems\"\n      },\n      \"locked\": {\n        \"lastModified\": 1710146030,\n        \"narHash\": \"sha256-SZ5L6eA7HJ/nmkzGG7/ISclqe6oZdOZTNoesiInkXPQ=\",\n        \"owner\": \"numtide\",\n        \"repo\": \"flake-utils\",\n        \"rev\": \"b1d9ab70662946ef0850d488da1c9019f3a9752a\",\n        \"type\": \"github\"\n      },\n      \"original\": {\n        \"owner\": \"numtide\",\n        \"repo\": \"flake-utils\",\n        \"type\": \"github\"\n      }\n    },\n    \"flake-utils_2\": {\n      \"inputs\": {\n        \"systems\": \"systems_2\"\n      },\n      \"locked\": {\n        \"lastModified\": 1692799911,\n        \"narHash\": \"sha256-3eihraek4qL744EvQXsK1Ha6C3CR7nnT8X2qWap4RNk=\",\n        \"owner\": \"numtide\",\n        \"repo\": \"flake-utils\",\n        \"rev\": \"f9e7cf818399d17d347f847525c5a5a8032e4e44\",\n        \"type\": \"github\"\n      },\n      \"original\": {\n        \"owner\": \"numtide\",\n        \"repo\": \"flake-utils\",\n        \"type\": \"github\"\n      }\n    },\n    \"nixpkgs\": {\n      \"locked\": {\n        \"lastModified\": 1693844670,\n        \"narHash\": \"sha256-t69F2nBB8DNQUWHD809oJZJVE+23XBrth4QZuVd6IE0=\",\n        \"owner\": \"NixOS\",\n        \"repo\": \"nixpkgs\",\n        \"rev\": \"3c15feef7770eb5500a4b8792623e2d6f598c9c1\",\n        \"type\": \"github\"\n      },\n      \"original\": {\n        \"owner\": \"NixOS\",\n        \"ref\": \"nixos-unstable\",\n        \"repo\": \"nixpkgs\",\n        \"type\": \"github\"\n      }\n    },\n    \"nixpkgs_2\": {\n      \"locked\": {\n        \"lastModified\": 1694032533,\n        \"narHash\": \"sha256-I8cfCV/4JNJJ8KHOTxTU1EphKT8ARSb4s9pq99prYV0=\",\n        \"owner\": \"NixOS\",\n        \"repo\": \"nixpkgs\",\n        \"rev\": \"efd23a1c9ae8c574e2ca923c2b2dc336797f4cc4\",\n        \"type\": \"github\"\n      },\n      \"original\": {\n        \"owner\": \"NixOS\",\n        \"ref\": \"nixpkgs-unstable\",\n        \"repo\": \"nixpkgs\",\n        \"type\": \"github\"\n      }\n    },\n    \"root\": {\n      \"inputs\": {\n        \"flake-utils\": \"flake-utils\",\n        \"nixpkgs\": \"nixpkgs\",\n        \"rust-overlay\": \"rust-overlay\"\n      }\n    },\n    \"rust-overlay\": {\n      \"inputs\": {\n        \"flake-utils\": \"flake-utils_2\",\n        \"nixpkgs\": \"nixpkgs_2\"\n      },\n      \"locked\": {\n        \"lastModified\": 1694052649,\n        \"narHash\": \"sha256-+eBEU3dw3/fCfi8ZHFNutINxehMazGkQxqNcpeNbTo4=\",\n        \"owner\": \"oxalica\",\n        \"repo\": \"rust-overlay\",\n        \"rev\": \"a795148ffbcc77f2b592d50ceebe36147e623a77\",\n        \"type\": \"github\"\n      },\n      \"original\": {\n        \"owner\": \"oxalica\",\n        \"repo\": \"rust-overlay\",\n        \"type\": \"github\"\n      }\n    },\n    \"systems\": {\n      \"locked\": {\n        \"lastModified\": 1681028828,\n        \"narHash\": \"sha256-Vy1rq5AaRuLzOxct8nz4T6wlgyUR7zLU309k9mBC768=\",\n        \"owner\": \"nix-systems\",\n        \"repo\": \"default\",\n        \"rev\": \"da67096a3b9bf56a91d16901293e51ba5b49a27e\",\n        \"type\": \"github\"\n      },\n      \"original\": {\n        \"owner\": \"nix-systems\",\n        \"repo\": \"default\",\n        \"type\": \"github\"\n      }\n    },\n    \"systems_2\": {\n      \"locked\": {\n        \"lastModified\": 1681028828,\n        \"narHash\": \"sha256-Vy1rq5AaRuLzOxct8nz4T6wlgyUR7zLU309k9mBC768=\",\n        \"owner\": \"nix-systems\",\n        \"repo\": \"default\",\n        \"rev\": \"da67096a3b9bf56a91d16901293e51ba5b49a27e\",\n        \"type\": \"github\"\n      },\n      \"original\": {\n        \"owner\": \"nix-systems\",\n        \"repo\": \"default\",\n        \"type\": \"github\"\n      }\n    }\n  },\n  \"root\": \"root\",\n  \"version\": 7\n}\n"
        },
        {
          "name": "flake.nix",
          "type": "blob",
          "size": 0.7294921875,
          "content": "{\n  inputs = {\n    nixpkgs.url = \"github:NixOS/nixpkgs/nixos-unstable\";\n    flake-utils.url = \"github:numtide/flake-utils\";\n    rust-overlay.url = \"github:oxalica/rust-overlay\";\n  };\n\n  outputs = {\n    self,\n    nixpkgs,\n    flake-utils,\n    rust-overlay,\n  }:\n    flake-utils.lib.eachDefaultSystem (system:\n      let\n        pkgs = import nixpkgs {\n    \t  inherit system;\n    \t  overlays = [rust-overlay.overlays.default];\n    \t};\n\n    \ttoolchain = pkgs.rust-bin.fromRustupToolchainFile ./rust-toolchain.toml;\n\n      in {\n        devShells.default = pkgs.mkShell {\n          packages = [\n            toolchain\n            pkgs.go_1_19\n            pkgs.just\n            pkgs.deno\n            pkgs.gofumpt\n          ];\n        };\n      }\n    );\n}\n\n"
        },
        {
          "name": "importer",
          "type": "tree",
          "content": null
        },
        {
          "name": "playground",
          "type": "tree",
          "content": null
        },
        {
          "name": "rust-toolchain.toml",
          "type": "blob",
          "size": 0.0498046875,
          "content": "[toolchain]\nprofile = \"default\"\nchannel = \"1.72.0\"\n"
        },
        {
          "name": "std",
          "type": "tree",
          "content": null
        },
        {
          "name": "wasm",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}