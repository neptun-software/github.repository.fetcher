{
  "metadata": {
    "timestamp": 1736709025378,
    "page": 110,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjExMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "Pumpkin-MC/Pumpkin",
      "stars": 3721,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".devcontainer",
          "type": "tree",
          "content": null
        },
        {
          "name": ".dockerignore",
          "type": "blob",
          "size": 0.2265625,
          "content": "# A whitelist of files that should be included into docker\n# Put an exclaimation mark before everything to include\n\n# Ignore everything\n*\n\n# Allow the source code folders\n!/pumpkin*/\n!/assets\n\n# Dependencies\n!Cargo.lock\n!Cargo.toml\n"
        },
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 0.466796875,
          "content": "# EditorConfig helps developers define and maintain consistent\n# coding styles between different editors and IDEs\n# editorconfig.org\n\nroot = true\n\n[*]\nend_of_line = lf\ncharset = utf-8\ntrim_trailing_whitespace = true\ninsert_final_newline = true\nindent_style = space\nindent_size = 4\n\n[*.rs]\nmax_line_length = 100\n\n[*.md]\n# double whitespace at end of line\n# denotes a line break in Markdown\ntrim_trailing_whitespace = false\n\n[*.yml]\nindent_size = 2\n\n[Makefile]\nindent_style = tab\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 2.28125,
          "content": "# === APPLE FILE SYSTEM CRAP ===\n# General\n.DS_Store\n.AppleDouble\n.LSOverride\n\n# Icon must end with two \\r\nIcon\n\n# Intellij IDEA\n.idea\n\n# Thumbnails\n._*\n\n# Files that might appear in the root of a volume\n.DocumentRevisions-V100\n.fseventsd\n.Spotlight-V100\n.TemporaryItems\n.Trashes\n.VolumeIcon.icns\n.com.apple.timemachine.donotpresent\n\n# Directories potentially created on remote AFP share\n.AppleDB\n.AppleDesktop\nNetwork Trash Folder\nTemporary Items\n.apdisk\n\n# === JAVA COMPILED CODE AND LOGS ===\n# Compiled class file\n*.class\n\n# Log file\n*.log\n\n# BlueJ files\n*.ctxt\n\n# Mobile Tools for Java (J2ME)\n.mtj.tmp/\n\n## Java/Gradle Stuff\n.gradle\n!src/**/build/\n.kotlin\n\n# Ignore Gradle GUI config\ngradle-app.setting\n\n# Avoid ignoring Gradle wrapper jar file (.jar files are usually ignored)\n!gradle-wrapper.jar\n\n# Avoid ignore Gradle wrappper properties\n!gradle-wrapper.properties\n\n# Cache of project\n.gradletasknamecache\n\n# Eclipse Gradle plugin generated files\n# Eclipse Core\n.project\n# JDT-specific (Eclipse Java Development Tools)\n.classpath\n\n# Package Files #\n*.jar\n*.war\n*.nar\n*.ear\n*.zip\n*.tar.gz\n*.rar\n# virtual machine crash logs, see http://www.java.com/en/download/help/error_hotspot.xml\nhs_err_pid*\nreplay_pid*\n\n# === RUST BUILDS AND DEBUG ===\n# Generated by Cargo\n# will have compiled files and executables\ndebug/\ntarget/\n\n# Remove Cargo.lock from gitignore if creating an executable, leave it for libraries\n# More information here https://doc.rust-lang.org/cargo/guide/cargo-toml-vs-cargo-lock.html\nCargo.lock\n\n# These are backup files generated by rustfmt\n**/*.rs.bk\n\n# MSVC Windows builds of rustc generate these, which store debugging information\n*.pdb\n\n# RustRover\n#  JetBrains specific template is maintained in a separate JetBrains.gitignore that can\n#  be found at https://github.com/github/gitignore/blob/main/Global/JetBrains.gitignore\n#  and can be added to the global gitignore or merged into this file.  For a more nuclear\n#  option (not recommended) you can uncomment the following to ignore the entire idea folder.\n#.idea/\n\n# === PROJECT SPECIFIC ===\nplugins/*\nworld/*\n\n# docker-compose\ndata/*\n\n# project's configurations\nconfiguration.toml\nfeatures.toml\n\n\n*.local.nbt\n\n\n.vscode/settings.json\n\n# Documentation\ndocs/.vitepress/dist\ndocs/.vitepress/cache\nnode_modules\n\nrun/\n\n# Benchmarking\n*perf.data*\n*flamegraph.svg\n\n"
        },
        {
          "name": "CODE_OF_CONDUCT.md",
          "type": "blob",
          "size": 5.099609375,
          "content": "# Contributor Covenant Code of Conduct\n\n## Our Pledge\n\nWe as members, contributors, and leaders pledge to make participation in our\ncommunity a harassment-free experience for everyone, regardless of age, body\nsize, visible or invisible disability, ethnicity, sex characteristics, gender\nidentity and expression, level of experience, education, socio-economic status,\nnationality, personal appearance, race, religion, or sexual identity\nand orientation.\n\nWe pledge to act and interact in ways that contribute to an open, welcoming,\ndiverse, inclusive, and healthy community.\n\n## Our Standards\n\nExamples of behavior that contributes to a positive environment for our\ncommunity include:\n\n* Demonstrating empathy and kindness toward other people\n* Being respectful of differing opinions, viewpoints, and experiences\n* Giving and gracefully accepting constructive feedback\n* Accepting responsibility and apologizing to those affected by our mistakes,\n  and learning from the experience\n* Focusing on what is best not just for us as individuals, but for the\n  overall community\n\nExamples of unacceptable behavior include:\n\n* The use of sexualized language or imagery, and sexual attention or\n  advances of any kind\n* Trolling, insulting or derogatory comments, and personal or political attacks\n* Public or private harassment\n* Publishing others' private information, such as a physical or email\n  address, without their explicit permission\n* Other conduct which could reasonably be considered inappropriate in a\n  professional setting\n\n## Enforcement Responsibilities\n\nCommunity leaders are responsible for clarifying and enforcing our standards of\nacceptable behavior and will take appropriate and fair corrective action in\nresponse to any behavior that they deem inappropriate, threatening, offensive,\nor harmful.\n\nCommunity leaders have the right and responsibility to remove, edit, or reject\ncomments, commits, code, wiki edits, issues, and other contributions that are\nnot aligned to this Code of Conduct, and will communicate reasons for moderation\ndecisions when appropriate.\n\n## Scope\n\nThis Code of Conduct applies within all community spaces, and also applies when\nan individual is officially representing the community in public spaces.\nExamples of representing our community include using an official e-mail address,\nposting via an official social media account, or acting as an appointed\nrepresentative at an online or offline event.\n\n## Enforcement\n\nInstances of abusive, harassing, or otherwise unacceptable behavior may be\nreported to the community leaders responsible for enforcement at\nlilalexmed@proton.me.\nAll complaints will be reviewed and investigated promptly and fairly.\n\nAll community leaders are obligated to respect the privacy and security of the\nreporter of any incident.\n\n## Enforcement Guidelines\n\nCommunity leaders will follow these Community Impact Guidelines in determining\nthe consequences for any action they deem in violation of this Code of Conduct:\n\n### 1. Correction\n\n**Community Impact**: Use of inappropriate language or other behavior deemed\nunprofessional or unwelcome in the community.\n\n**Consequence**: A private, written warning from community leaders, providing\nclarity around the nature of the violation and an explanation of why the\nbehavior was inappropriate. A public apology may be requested.\n\n### 2. Warning\n\n**Community Impact**: A violation through a single incident or series\nof actions.\n\n**Consequence**: A warning with consequences for continued behavior. No\ninteraction with the people involved, including unsolicited interaction with\nthose enforcing the Code of Conduct, for a specified period of time. This\nincludes avoiding interactions in community spaces as well as external channels\nlike social media. Violating these terms may lead to a temporary or\npermanent ban.\n\n### 3. Temporary Ban\n\n**Community Impact**: A serious violation of community standards, including\nsustained inappropriate behavior.\n\n**Consequence**: A temporary ban from any sort of interaction or public\ncommunication with the community for a specified period of time. No public or\nprivate interaction with the people involved, including unsolicited interaction\nwith those enforcing the Code of Conduct, is allowed during this period.\nViolating these terms may lead to a permanent ban.\n\n### 4. Permanent Ban\n\n**Community Impact**: Demonstrating a pattern of violation of community\nstandards, including sustained inappropriate behavior,  harassment of an\nindividual, or aggression toward or disparagement of classes of individuals.\n\n**Consequence**: A permanent ban from any sort of public interaction within\nthe community.\n\n## Attribution\n\nThis Code of Conduct is adapted from the [Contributor Covenant][homepage],\nversion 2.0, available at\nhttps://www.contributor-covenant.org/version/2/0/code_of_conduct.html.\n\nCommunity Impact Guidelines were inspired by [Mozilla's code of conduct\nenforcement ladder](https://github.com/mozilla/diversity).\n\n[homepage]: https://www.contributor-covenant.org\n\nFor answers to common questions about this code of conduct, see the FAQ at\nhttps://www.contributor-covenant.org/faq. Translations are available at\nhttps://www.contributor-covenant.org/translations.\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 3.9443359375,
          "content": "# Contributing to Pumpkin\n\nWe appreciate your interest in contributing to Pumpkin! This document outlines the guidelines for submitting bug reports, feature suggestions, and code changes.\n\n## Getting Started\n\nThe easiest way to get started is by asking for help in our [discord](https://discord.gg/wT8XjrjKkf).\n\n### How to Contribute\n\nThere are several ways you can contribute to Pumpkin:\n\n- **Reporting Bugs**:\n  If you encounter a bug, please search for existing issues on the issue tracker first.\n  If you can't find a duplicate issue, open a new one.\n  Provide a clear description of the bug, including steps to reproduce it if possible.\n  Screenshots, logs, or code snippets can also be helpful.\n- **Suggesting Features**:\n  Do you have an idea on how Pumpkin can be improved? Share your thoughts by opening an issue on the issue tracker.\n  Describe the proposed feature in detail, including its benefits and potential implementation considerations.\n- **Submitting Pull Requests**:\n  If you'd like to contribute code changes, fork the Pumpkin repository on GitHub.\n  Install Rust at [rust-lang.org](https://www.rust-lang.org/).\n  Make your changes on your local fork and create a pull request to the main repository.\n  Ensure your code adheres to our project structure and style guidelines.\n  Write clear and concise commit messages that describe your changes.\n\n### Docs\n\nThe Documentation of Pumpkin can be found at <https://pumpkinmc.org/>\n\n**Tip: [typos](https://github.com/crate-ci/typos) is a great Project to detect and automatically fix typos**\n\n### Coding Guidelines\n\nThings need to be done before this Pull Request can be merged. Your CI also checks most of them automaticly and fill fail if something is not fulfilled\nNote: Pumpkin's clippy settings are relativly strict, this can be may frustrating but is necesarry so the code says clean and conssistent\n**Basic**\n\n- **Code Formatting:** Code must be well-formatted and follow the project's style guidelines. You can achieve this by running `cargo fmt`.\n- **No Clippy Warnings:** Code should not produce any warnings from the Clippy linter. You can check for warnings using `cargo clippy --all-targets`.\n- **Passing Unit Tests:** All existing unit tests must pass successfully. You can run the tests with `cargo test`.\n\n**Best Pratice**\n\n- **Writing Unit Tests:** When adding new features or modifying existing code, consider adding unit tests to prevent regressions in the future. Refer to the Rust documentation for guidance on writing tests: https://doc.rust-lang.org/book/ch11-01-writing-tests.html\n- **Benchmarking:** If your changes might impact performance, consider adding benchmarks to track performance regressions or improvements. We use the Criterion library for benchmarking. Refer to their Quick Start guide for more information: https://github.com/bheisler/criterion.rs#quickstart\n- **Clear and Concise Commit Messages:** Use clear and concise commit messages that describe the changes you've made.\n- **Code Style:** Adhere to consistent coding style throughout your contributions.\n- **Documentation:** If your changes introduce new functionality, consider updating the relevant documentation.\n- **Working with Tokio and Rayon:**\n  When dealing with CPU-intensive tasks, it's recommended to utilize Rayon's thread pool (`rayon::spawn`), parallel iterators, or similar mechanisms instead of the Tokio runtime. However, it's crucial to avoid blocking the Tokio runtime on Rayon calls. Instead, use asynchronous methods like `tokio::sync::mpsc` to transfer data between the two runtimes. Refer to `pumpkin_world::level::Level::fetch_chunks` for an example of this approach.\n\n### Additional Information\n\nWe encourage you to comment on existing issues and pull requests to share your thoughts and provide feedback.\nFeel free to ask questions in the issue tracker or reach out to the project maintainers if you need assistance.\nBefore submitting a large contribution, consider opening an issue, discussion or talk with us on our discord to discuss your approach.\n"
        },
        {
          "name": "Cargo.toml",
          "type": "blob",
          "size": 0.97265625,
          "content": "[workspace]\nresolver = \"2\"\nmembers = [\n    \"pumpkin-config\",\n    \"pumpkin-util\",\n    \"pumpkin-inventory\",\n    \"pumpkin-macros/\",\n    \"pumpkin-protocol/\",\n    \"pumpkin-registry/\",\n    \"pumpkin-world\",\n    \"pumpkin/\", \"pumpkin-data\",\n]\n\n[workspace.package]\nversion = \"0.1.0\"\nedition = \"2021\"\n\n\n[profile.dev]\nopt-level = 1\n\n[profile.release]\nlto = true\ncodegen-units = 1\n\n[profile.bench]\ndebug = true\n\n[profile.profiling]\ninherits = \"release\"\ndebug = true\n\n[workspace.dependencies]\nlog = \"0.4\"\ntokio = { version = \"1.42\", features = [\n    \"macros\",\n    \"net\",\n    \"rt-multi-thread\",\n    \"sync\",\n    \"io-std\",\n    \"signal\",\n] }\n\nthiserror = \"2\"\n\nbytes = \"1.9\"\n\n# Concurrency/Parallelism and Synchronization\nrayon = \"1.10.0\"\nparking_lot = { version = \"0.12.3\", features = [\"send_guard\"] }\ncrossbeam = \"0.8.4\"\n\nuuid = { version = \"1.11.0\", features = [\"serde\", \"v3\", \"v4\"] }\nderive_more = { version = \"1.0.0\", features = [\"full\"] }\nserde = { version = \"1.0\", features = [\"derive\"] }\nserde_json = \"1.0\"\n"
        },
        {
          "name": "Dockerfile",
          "type": "blob",
          "size": 1.0712890625,
          "content": "FROM rust:1-alpine3.21 AS builder\nARG GIT_VERSION=Docker\nENV GIT_VERSION=$GIT_VERSION\nENV RUSTFLAGS=\"-C target-feature=-crt-static\"\nRUN apk add --no-cache musl-dev\n\nWORKDIR /pumpkin\nCOPY . /pumpkin\n\n# build release\nRUN --mount=type=cache,sharing=private,target=/pumpkin/target \\\n    --mount=type=cache,target=/usr/local/cargo/git/db \\\n    --mount=type=cache,target=/usr/local/cargo/registry/ \\\n    cargo build --release && cp target/release/pumpkin ./pumpkin.release\n\n# strip debug symbols from binary\nRUN strip pumpkin.release\n\nFROM alpine:3.21\n\n# Identifying information for registries like ghcr.io\nLABEL org.opencontainers.image.source=https://github.com/Pumpkin-MC/Pumpkin\n\nRUN apk add --no-cache libgcc\n\nCOPY --from=builder /pumpkin/pumpkin.release /bin/pumpkin\n\n# set workdir to /pumpkin, this is required to influence the PWD environment variable\n# it allows for bind mounting the server files without overwriting the pumpkin\n# executable (without requiring an `docker cp`-ing the binary to the host folder)\nWORKDIR /pumpkin\n\nENV RUST_BACKTRACE=1\nEXPOSE 25565\nENTRYPOINT [ \"/bin/pumpkin\" ]\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.05078125,
          "content": "MIT License\n\nCopyright (c) 2025 Aleksander Medvedev\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 3.2080078125,
          "content": "<div align=\"center\">\n\n# Pumpkin\n\n![CI](https://github.com/Snowiiii/Pumpkin/actions/workflows/rust.yml/badge.svg)\n[![Discord](https://img.shields.io/discord/1268592337445978193.svg?label=&logo=discord&logoColor=ffffff&color=7389D8&labelColor=6A7EC2)](https://discord.gg/wT8XjrjKkf)\n[![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)\n![Current version)](https://img.shields.io/badge/current_version-1.21.4-blue)\n\n</div>\n\n[Pumpkin](https://pumpkinmc.org/) is a Minecraft server built entirely in Rust, offering a fast, efficient,\nand customizable experience. It prioritizes performance and player enjoyment while adhering to the core mechanics of the game.\n\n![image](https://github.com/user-attachments/assets/7e2e865e-b150-4675-a2d5-b52f9900378e)\n\n## What Pumpkin wants to achieve\n\n- **Performance**: Leveraging multi-threading for maximum speed and efficiency.\n- **Compatibility**: Supports the latest Minecraft server version and adheres to vanilla game mechanics.\n- **Security**: Prioritizes security by preventing known security exploits.\n- **Flexibility**: Highly configurable, with the ability to disable unnecessary features.\n- **Extensibility**: Provides a foundation for plugin development.\n\n## What Pumpkin will not\n\n- Be compatible with plugins or mods for other servers\n- Function as a framework for building a server from scratch.\n\n> [!IMPORTANT]\n> Pumpkin is currently under heavy development.\n\n## Features (WIP)\n\n- [x] Configuration (toml)\n- [x] Server Status/Ping\n- Networking\n  - [x] Encryption\n  - [x] Packet Compression\n- Player Configuration\n  - [x] Registries (biome types, paintings, dimensions)\n  - [x] Server Brand\n  - [x] Server Links\n  - [x] Set Resource Pack\n  - [x] Cookies\n- World\n  - [x] World Joining\n  - [x] Player Tab-list\n  - [x] World Loading\n  - [x] Lighting\n  - [x] Entity Spawning\n  - [x] Bossbar\n  - [x] Chunk Loading\n  - [x] Chunk Generation\n  - [x] Chunk Saving\n  - [x] World Time\n  - [x] Scoreboard\n  - [x] World Borders\n  - [x] World Saving\n  - [ ] Redstone\n  - [ ] Liquid Physics\n- Player\n  - [x] Player Skins\n  - [x] Player Client brand\n  - [x] Player Teleport\n  - [x] Player Movement\n  - [x] Player Animation\n  - [x] Player Inventory\n  - [x] Player Combat\n- Entities\n  - [ ] Non-Living (Minecart, Eggs...)\n  - [x] Players\n  - [x] Mobs\n  - [x] Animals\n  - [x] Entity AI\n  - [ ] Boss\n- Server\n  - [ ] Plugins\n  - [x] Query\n  - [x] RCON\n  - [x] Inventories\n  - [x] Particles\n  - [x] Chat\n  - [x] Commands\n  - [x] Permissions\n- Proxy\n  - [x] Bungeecord\n  - [x] Velocity\n\nCheck out our [Github Project](https://github.com/users/Snowiiii/projects/12/views/3) to see current progress\n\n## How to run\n\nSee our [Quick Start](https://pumpkinmc.org/about/quick-start.html) Guide to get Pumpkin running\n\n## Contributions\n\nContributions are welcome! See [CONTRIBUTING.md](CONTRIBUTING.md)\n\n## Docs\n\nThe Documentation of Pumpkin can be found at https://pumpkinmc.org/\n\n## Communication\n\nConsider joining our [discord](https://discord.gg/wT8XjrjKkf) to stay up-to-date on events, updates, and connect with other members.\n\n## Funding\n\nIf you want to fund me and help the project, Check out my [GitHub sponsors](https://github.com/sponsors/Snowiiii) or my [PayPal](https://www.paypal.me/alexxmedvedev)\n"
        },
        {
          "name": "SECURITY.md",
          "type": "blob",
          "size": 0.8857421875,
          "content": "# Security Policy\n\n## Reporting a Vulnerability\n\n**Please do not report security vulnerabilities through public GitHub issues.**\n\nInstead, please send email to lilalexmed@proton.me\n\nYou should receive a response within 48 hours.\n\nPlease include the requested information listed below (as much as you can provide) to help us better understand the nature and scope of the possible issue:\n- Type of issue (e.g. buffer overflow, SQL injection, cross-site scripting, etc.)\n- Full paths of source file(s) related to the manifestation of the issue\n- The location of the affected source code (tag/branch/commit or direct URL)\n- Any special configuration required to reproduce the issue\n- Step-by-step instructions to reproduce the issue\n- Proof-of-concept or exploit code (if possible)\n- Impact of the issue, including how an attacker might exploit the issue\n  \n **We prefer all communications to be in English.** \n"
        },
        {
          "name": "assets",
          "type": "tree",
          "content": null
        },
        {
          "name": "docker-compose.yml",
          "type": "blob",
          "size": 0.1357421875,
          "content": "services:\n  pumpkin:\n    build: .\n    ports:\n      - \"25565:25565\"\n    volumes:\n      - ./data:/pumpkin\n    stdin_open: true\n    tty: true\n"
        },
        {
          "name": "fuzz",
          "type": "tree",
          "content": null
        },
        {
          "name": "pumpkin-config",
          "type": "tree",
          "content": null
        },
        {
          "name": "pumpkin-data",
          "type": "tree",
          "content": null
        },
        {
          "name": "pumpkin-inventory",
          "type": "tree",
          "content": null
        },
        {
          "name": "pumpkin-macros",
          "type": "tree",
          "content": null
        },
        {
          "name": "pumpkin-nbt",
          "type": "tree",
          "content": null
        },
        {
          "name": "pumpkin-protocol",
          "type": "tree",
          "content": null
        },
        {
          "name": "pumpkin-registry",
          "type": "tree",
          "content": null
        },
        {
          "name": "pumpkin-util",
          "type": "tree",
          "content": null
        },
        {
          "name": "pumpkin-world",
          "type": "tree",
          "content": null
        },
        {
          "name": "pumpkin",
          "type": "tree",
          "content": null
        },
        {
          "name": "rust-toolchain.toml",
          "type": "blob",
          "size": 0.0927734375,
          "content": "[toolchain]\n# Anything in the latest stable version of rust is fine to use.\nchannel = \"stable\"\n"
        }
      ]
    }
  ]
}