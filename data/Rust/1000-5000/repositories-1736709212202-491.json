{
  "metadata": {
    "timestamp": 1736709212202,
    "page": 491,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjUwMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "ryanmcgrath/cacao",
      "stars": 1915,
      "defaultBranch": "trunk",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.017578125,
          "content": "target\nCargo.lock\n"
        },
        {
          "name": "ARCHITECTURE.md",
          "type": "blob",
          "size": 17.0400390625,
          "content": "# Cacao Architecture\nCacao is a library to interface with AppKit (macOS) or UIKit (iOS/iPadOS/tvOS). It uses the Objective-C runtime to\nhandle calling into these frameworks.\n\nSaid frameworks typically use an Object Oriented style of programming (subclasses, etc), which can be tricky to\nhandle with the way that Rust works with regards to ownership. Thankfully, AppKit & UIKit often also use a\ndelegate pattern - objects registered to receive callbacks. With some creative assumptions, we can get somewhat close\nto expected conventions.\n\nThis document outlines some of the thinking surrounding the architectural patterns used in this framework. Consider it\nto be a somewhat living document - things may change or bend as far as rules go, but hopefully this guide makes looking\nthrough the framework easier.\n\nIn general, a tl;dr:\n\n**macOS architecture**\n```\nApp -> Window(s) -> Core Controls\n```\n\n**iOS architecture**\n```\nApp -> Window(s) -> UIScene(s) -> Core Controls\n```\n\n## Control Setup\nA typical control in Cacao has 2-3 main pieces:\n\n- The core control, which can take an optional delegate. More on this below.\n- iOS/macOS bridges, which inject a subclass into the Objective-C runtime that forwards methods/callbacks/etc to the Rust\n  side of things.\n- Extra delegates, which are similar to the above bridges (some classes need this to avoid issues).\n\n## Core Control Contract\nA core control is just the Rust interface. It should adhere to the following \"contract\".\n\n### It should always expose an `objc` field, which holds the underlying Objective-C object.\nThis is important, as the underlying frameworks can differ in how they handle things, and they get frequent-ish updates\neach year. There should _always_ be an escape hatch to make life easier for the end-user.\n\n### Controls should always expose the underlying Layer.\nThis is technically not \"correct\" on macOS but I don't care. We explicitly expect there to be a layer on controls, and modern\nmacOS wants things to be layer backed anyway.\n\nFor example, the `View<T>` type has the following field:\n\n### Controls should always expose AutoLayout Anchors.\nAutoLayout is the preferred layout engine for Apple's frameworks. Users who need frame-based layouts get them for free as\nlong as the control also implements the `Layout` trait.\n\n### Interior Mutability makes life easier.\nI anticipate this being somewhat divisive, maybe. Not sure. Point is, Rust's model is already hard enough to reason about with\nUI frameworks - we can try to ease this with interior mutability on controls.\n\n`utils::properties::ObjcProperty` is a handy wrapper for this, which should ideally be used - it will handle retain counts while\nsimultaneously making the borrow model feel \"correct\" on the Rust side.\n\n## Control Example\nLet's walk through the `View<T>` type to better understand this architecture.\n\n### Core Control\nSince this is our Rust type, we can mostly jump right in. Let's start with the struct definition:\n\n``` rust\n#[derive(Debug)]\npub struct View<T = ()> {\n    /// An internal flag for whether an instance of a View<T> is a handle. Typically, there's only\n    /// one instance that should have this set to `false` - if that one drops, we need to know to\n    /// do some extra cleanup.\n    pub is_handle: bool,\n\n    /// A pointer to the Objective-C runtime view controller.\n    pub objc: ObjcProperty,\n\n    /// References the underlying layer. This is consistent across macOS, iOS and tvOS - on macOS\n    /// we explicitly opt in to layer backed views.\n    pub layer: Layer,\n\n    /// A pointer to the delegate for this view.\n    pub delegate: Option<Box<T>>,\n\n    /// A pointer to the Objective-C runtime top layout constraint.\n    pub top: LayoutAnchorY,\n\n    /// A pointer to the Objective-C runtime leading layout constraint.\n    pub leading: LayoutAnchorX,\n\n    /// A pointer to the Objective-C runtime left layout constraint.\n    pub left: LayoutAnchorX,\n\n    /// A pointer to the Objective-C runtime trailing layout constraint.\n    pub trailing: LayoutAnchorX,\n\n    /// A pointer to the Objective-C runtime right layout constraint.\n    pub right: LayoutAnchorX,\n\n    /// A pointer to the Objective-C runtime bottom layout constraint.\n    pub bottom: LayoutAnchorY,\n\n    /// A pointer to the Objective-C runtime width layout constraint.\n    pub width: LayoutAnchorDimension,\n\n    /// A pointer to the Objective-C runtime height layout constraint.\n    pub height: LayoutAnchorDimension,\n\n    /// A pointer to the Objective-C runtime center X layout constraint.\n    pub center_x: LayoutAnchorX,\n\n    /// A pointer to the Objective-C runtime center Y layout constraint.\n    pub center_y: LayoutAnchorY\n}\n```\n\nA few things to note here!\n\n#### `T` is optional.\nWe want a user to be able to just slap a `View` onto the screen if they want - they're essential building blocks, after all. We default\nthis to `()` and provide a designated initializer (see below) for cases where you _want_ a delegate set.\n\n#### `is_handle`\nWe want to be able to run cleanup on `Drop` of the Rust struct, because we want Rust programmers to be able to think in their assumed lifecycle,\nnot Objective-C's. We need to be able to clone this into a possible delegate to enable customizing as if it were a class, though; enter `is_handle`.\n\nEssentially, `is_handle` should only be false for the \"originating\" `View`. Clones should always have `is_handle` set to true; this guard is checked\non Drop, and if it's false, we know we're dropping the original and can clean up.\n\n#### `objc`\nThis stores the underlying Objective-C object (e.g, `NSView` or `UIView`).\n\n#### Layer backing\nControls should expose a `layer` property. On macOS this technically should be optional, but I'm making the BDFL decision to enforce it being there, because\noutside of a shrinking set of cases, you want it there.\n\n#### `delegate`\nA `delegate` is our Rust trait impl that receives callbacks from the core control.\n\nFor instance, you might have a `View<DragAndDrop>` that calls are forwarded to. It'd look something like the following:\n\n``` rust\npub struct DragAndDrop;\n\nimpl cacao::view::ViewDelegate for DragAndDrop {\n    const NAME: &'static str = \"DragAndDropView\";\n\n    fn did_load(&mut self, view: cacao::view::View) {\n        // Customize View in here, persist it or something\n    }\n\n    // implement various drag and drop handlers\n}\n```\n\nAnd the `View<DragAndDrop>` would be constructed like so:\n\n``` rust\nlet dnd_view = View::with(DragAndDrop);\n```\n\n#### AutoLayout Abound\nThe various Layout Anchors in here are used for AutoLayout (positioning/sizing on the screen). They should always be set.\n\n\n#### Default\nNot every control needs a `Default` impl, but View defaulting is convenient for deep initialization, so we offer it.\n\n``` rust\nimpl Default for View {\n    /// Returns a stock view, for... well, whatever you want.\n    fn default() -> Self {\n        View::new()\n    }\n}\n\n```\n\n### Base Initializers\nSo next on the list is `View::new()`. We also have an internal `init(view)` method to collect some logic that we need in two places.\n\n`register_view_class()` is located in `view/macos.rs` on macOS, and `view/ios.rs` on iOS; this is a _bridge_ that handles class setup.\nWe'll look at this more in-depth below, but the general idea here is that the method returns a `Class *` that can be used to create a\nnew Objective-C object.\n\n``` rust\nimpl View {\n    /// An internal initializer method for very common things that we need to do, regardless of\n    /// what type the end user is creating.\n    ///\n    /// This handles grabbing autolayout anchor pointers, as well as things related to layering and\n    /// so on. It returns a generic `View<T>`, which the caller can then customize as needed.\n    pub(crate) fn init<T>(view: id) -> View<T> {\n        unsafe {\n            let _: () = msg_send![view, setTranslatesAutoresizingMaskIntoConstraints:NO];\n\n            #[cfg(target_os = \"macos\")]\n            let _: () = msg_send![view, setWantsLayer:YES];\n        }\n\n        View {\n            is_handle: false,\n            delegate: None,\n            top: LayoutAnchorY::top(view),\n            left: LayoutAnchorX::left(view),\n            leading: LayoutAnchorX::leading(view),\n            right: LayoutAnchorX::right(view),\n            trailing: LayoutAnchorX::trailing(view),\n            bottom: LayoutAnchorY::bottom(view),\n            width: LayoutAnchorDimension::width(view),\n            height: LayoutAnchorDimension::height(view),\n            center_x: LayoutAnchorX::center(view),\n            center_y: LayoutAnchorY::center(view),\n\n            layer: Layer::from_id(unsafe { msg_send_id![view, layer] }),\n\n            objc: ObjcProperty::retain(view),\n        }\n    }\n\n    /// Returns a default `View`, suitable for customizing and displaying.\n    pub fn new() -> Self {\n        View::init(unsafe {\n            msg_send![register_view_class(), new]\n        })\n    }\n}\n```\n\n### Delegate Initializer\nFor types that accept a delegate, the common pattern we use is for the initializer to be named `with()`. Below, we implement `with()` for `View<T>`:\n\n``` rust\nimpl<T> View<T> where T: ViewDelegate + 'static {\n    /// Initializes a new View with a given `ViewDelegate`. This enables you to respond to events\n    /// and customize the view as a module, similar to class-based systems.\n    pub fn with(delegate: T) -> View<T> {\n        let class = register_view_class_with_delegate(&delegate);\n        let mut delegate = Box::new(delegate);\n\n        let view = unsafe {\n            let view: id = msg_send![class, new];\n            let ptr = Box::into_raw(delegate);\n            (&mut *view).set_ivar(VIEW_DELEGATE_PTR, ptr as usize);\n            delegate = Box::from_raw(ptr);\n            view\n        };\n\n        let mut view = View::init(view);\n        (&mut delegate).did_load(view.clone_as_handle());\n        view.delegate = Some(delegate);\n        view\n    }\n}\n```\n\nNote that we use a second view class registration function here, as it performs some extra work to ensure that a unique subclass is created per-Rust-type. We dive\ninto some `unsafe` here, as we need to set a pointer to our trait object `T` so that the callbacks are able to load and call when coming around from the Objective-C\nside - this is explained more in the _bridge_ sections below.\n\n### Drawing the Owl\nAs this block is likely to still grow, we'll be somewhat brief here - below, we implement a `clone_as_handle()` method, which returns a bland clone of this type (a _handle_).\nNotably, this does not have a _delegate_ reference, and `is_handle` is set to `true`. This is passed to the trait implementation in `did_load()`, to enable the trait having access\nto the containing Objective-C type.\n\n``` rust\nimpl<T> View<T> {\n    /// An internal method that returns a clone of this object, sans references to the delegate or\n    /// callback pointer. We use this in calling `did_load()` - implementing delegates get a way to\n    /// reference, customize and use the view but without the trickery of holding pieces of the\n    /// delegate - the `View` is the only true holder of those.\n    pub(crate) fn clone_as_handle(&self) -> View {\n        View {\n            delegate: None,\n            is_handle: true,\n            layer: self.layer.clone(),\n            top: self.top.clone(),\n            leading: self.leading.clone(),\n            left: self.left.clone(),\n            trailing: self.trailing.clone(),\n            right: self.right.clone(),\n            bottom: self.bottom.clone(),\n            width: self.width.clone(),\n            height: self.height.clone(),\n            center_x: self.center_x.clone(),\n            center_y: self.center_y.clone(),\n            objc: self.objc.clone()\n        }\n    }\n\n    /// Call this to set the background color for the backing layer.\n    pub fn set_background_color<C: AsRef<Color>>(&self, color: C) {\n        let color: id = color.as_ref().into();\n\n        #[cfg(target_os = \"macos\")]\n        self.objc.with_mut(|obj| unsafe {\n            // TODO: Fix this unnecessary retain!\n            (&mut *obj).set_ivar::<id>(BACKGROUND_COLOR, msg_send![color, retain]);\n        });\n\n        #[cfg(target_os = \"ios\")]\n        self.objc.with_mut(|obj| unsafe {\n            let _: () = msg_send![&*obj, setBackgroundColor:color];\n        });\n    }\n}\n```\n\nWe also see a `set_background_color`, which performs different calls depending on the target OS environment: iOS supports background colors by default, and macOS... well, we store it as an `ivar`, and then rely on the\nlayer painting itself in the _bridge_ implementation. You might see some cases online where code simply just does `layer.backgroundColor.cgColor = ...`, but this doesn't work properly for dark mode support.\n\n### Layout Support\nThe `layout::Layout` trait implements a slew of commonly needed functions, such as setting frames, handling view adding/removing, hiding and showing, and so on. Controls need only implement one or two `Layout` trait methods\nto get most of this for free:\n\n``` rust\nimpl<T> Layout for View<T> {\n    fn with_backing_node<F: Fn(id)>(&self, handler: F) {\n        self.objc.with_mut(handler);\n    }\n\n    fn get_from_backing_node<F: Fn(&Object) -> R, R>(&self, handler: F) -> R {\n        self.objc.get(handler)\n    }\n}\n```\n\nHere, we simply pass handlers into the `objc` field calls. With this setup, we're able to offer relatively sound checks for borrowing the underlying types, and most other `Layout` methods \"just work\".\n\n### Dropping\nHere, we simply check if the dropping item is a handle or not. If it's not (i.e, if it's the top-level original), we can ensure it's removed from the Objective-V view heirarchy and be on our way.\n\n``` rust\nimpl<T> Drop for View<T> {\n    /// If the instance being dropped is _not_ a handle, then we want to go ahead and explicitly\n    /// remove it from any super views.\n    ///\n    /// Why do we do this? It's to try and match Rust's ownership model/semantics. If a Rust value\n    /// drops, it (theoretically) makes sense that the View would drop... and not be visible, etc.\n    ///\n    /// If you're venturing into unsafe code for the sake of custom behavior via the Objective-C\n    /// runtime, you can consider flagging your instance as a handle - it will avoid the drop logic here.\n    fn drop(&mut self) {\n        if !self.is_handle {\n            self.remove_from_superview();\n        }\n    }\n}\n```\n\n## Bridges(s)\nWe'll step through an example (abridged) `View` bridge below, for macOS. You should consult the full implementation in `view/` to learn more after reading this.\n\nFor our basic `View` type, we want to just map to the corresponding class on the Objective-C side (in this case, `NSView`), and maybe do a bit of tweaking for sanity reasons.\n\n``` rust\npub(crate) fn register_view_class() -> &'static Class {\n    static mut VIEW_CLASS: Option<'static Class> = None;\n    static INIT: Once = Once::new();\n\n    INIT.call_once(|| unsafe {\n        let superclass = class!(NSView);\n        let mut decl = ClassDecl::new(\"RSTView\", superclass).unwrap();\n\n        decl.add_method(sel!(isFlipped), enforce_normalcy as extern \"C\" fn(_, _) -> _);\n\n        decl.add_ivar::<id>(BACKGROUND_COLOR);\n\n        VIEW_CLASS = Some(decl.register());\n    });\n\n    unsafe { VIEW_CLASS.unwrap() }\n}\n```\n\nThis function (called inside `View::new()`) creates one reusable `View` subclass, and returns the type on subsequent calls. We're able to add methods to it (`add_method`) which match\nObjective-C method signatures, as well as provision space for variable storage (`add_ivar`).\n\nFor our _delegate_ types, we need a different class creation method - one that creates a subclass per-unique-type:\n\n``` rust\npub(crate) fn register_view_class_with_delegate<T: ViewDelegate>(instance: &T) -> &'static Class {\n    load_or_register_class(\"NSView\", instance.subclass_name(), |decl| unsafe {\n        decl.add_ivar::<usize>(VIEW_DELEGATE_PTR);\n        decl.add_ivar::<id>(BACKGROUND_COLOR);\n\n        decl.add_method(\n            sel!(isFlipped),\n            enforce_normalcy as extern \"C\" fn(_, _) -> _,\n        );\n\n        decl.add_method(\n            sel!(draggingEntered:),\n            dragging_entered::<T> as extern \"C\" fn (_, _, _) -> _,\n        );\n    })\n}\n```\n\nHere, we add a method that only makes sense if you're using a delegate (notifying about a drag-enter event). We also provision an extra storage slot, which contains a pointer\nto the Rust `ViewDelegate` implementation.\n\nThe methods we're setting up can range from simple to complex - take `isFlipped`:\n\n``` rust\nextern \"C\" fn is_flipped(_: &Object, _: Sel) -> Bool {\n    return Bool::YES;\n}\n```\n\nHere, we just want to tell `NSView` to use top,left as the origin point, so we need to respond `Bool::YES` in this subclass method.\n\n``` rust\nextern \"C\" fn dragging_entered<T: ViewDelegate>(this: &mut Object, _: Sel, info: id) -> NSUInteger {\n    let view = utils::load::<T>(this, VIEW_DELEGATE_PTR);\n    view.dragging_entered(DragInfo {\n        info: unsafe { Id::retain(info).unwrap() }\n    }).into()\n}\n```\n\nThis is an example of a more complex method: we load the `ViewDelegate` type from the pointer set on the object, and forward the information\ninto the `dragging_entered` trait method.\n\n## Conclusion\nHopefully this helps newcomers understand the design choices and architecture found in this repository. It can feel odd at first, but ends up lending itself well to UI patterns, and provides\nsome structure for how things should work.\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 3.5595703125,
          "content": "# Contributing\n\nThanks for your interest in contributing to this project! Suggestions, bug reports, and pull requests and so on are cool, but keep in mind this is open source - there's currently no guarantee this project does much.\n\n*Note:* Anyone who interacts with this project in any space, including but not\nlimited to this GitHub repository, must follow the [code of\nconduct](https://github.com/ryanmcgrath/cacao/blob/trunk/code_of_conduct.md).\n\n\n## Submitting bug reports\n\nHave a look at the [issue tracker](https://github.com/ryanmcgrath/cacao/issues). If you can't find an issue (open or closed)\ndescribing your problem (or a very similar one) there, please open a new issue with\nthe following details:\n\n- Which versions of Rust and Cacao (and macOS/iOS build/device) are you using?\n- Which feature flags are you using?\n- What are you trying to accomplish?\n- What is the full error you are seeing?\n- How can this be reproduced?\n  - Please quote as much of your code as needed to reproduce (best link to a\n    public repository or [Gist])\n  - Please post as much of your database schema as is relevant to your error\n\n[issue tracker]: https://github.com/ryanmcgrath/cacao/issues\n[Gist]: https://gist.github.com\n\nThank you!\n\n\n## Submitting feature requests\n\nIf you can't find an issue (open or closed) describing your idea on the [issue\ntracker], open an issue. Adding answers to the following\nquestions in your description is +1:\n\n- What do you want to do, and how do you expect Cacao to support you with that?\n- How might this be added to Cacao?\n- What are possible alternatives?\n- Are there any disadvantages?\n\nThank you!\n\n\n## Contribute code to Cacao\n\n### Setting up Cacao locally\n\n1. Install Rust. Stable should be fine.\n2. Clone this repository and open it in your favorite editor.\n3. `cargo build`, or link it via your `Cargo.toml` to mess with it.\n\n### Coding Style\n\nGenerally follow the [Rust Style Guide](https://github.com/rust-lang-nursery/fmt-rfcs/blob/master/guide/guide.md), enforced using [rustfmt](https://github.com/rust-lang-nursery/rustfmt).\nIn a few cases, though, it's fine to deviate - a good example is branching match trees.\n\nTo run rustfmt tests locally:\n\n1. Use rustup to set Rust toolchain to the latest stable version of Rust.\n\n2. Install the rustfmt and clippy by running\n   ```\n   rustup component add rustfmt-preview\n   rustup component add clippy-preview\n   ```\n\n3. Run clippy nightly using cargo from the root of your Cacao repo.\n   ```\n   cargo +nightly clippy\n   ```\n   Each PR needs to compile without warning.\n\n4. Run rustfmt nightly using cargo from the root of your Cacao repo.\n\n   To see changes that need to be made, run\n\n   ```\n   cargo +nightly fmt --all -- --check\n   ```\n\n   If all code is properly formatted (e.g. if you have not made any changes),\n   this should run without error or output.\n   If your code needs to be reformatted,\n   you will see a diff between your code and properly formatted code.\n   If you see code here that you didn't make any changes to\n   then you are probably running the wrong version of rustfmt.\n   Once you are ready to apply the formatting changes, run\n\n   ```\n   cargo +nightly fmt --all\n   ```\n\n   You won't see any output, but all your files will be corrected.\n\nYou can also use rustfmt to make corrections or highlight issues in your editor.\nCheck out [their README](https://github.com/rust-lang/rustfmt) for details.\n\n\n### Notes\nThis project prefers verbose naming, to a certain degree - UI code is read more often than written, so it's\nworthwhile to ensure that it scans well. It also maps well to existing Cocoa/Cacao idioms and is generally preferred.\n"
        },
        {
          "name": "Cargo.toml",
          "type": "blob",
          "size": 2.7783203125,
          "content": "[package]\nname = \"cacao\"\ndescription = \"Rust bindings for AppKit (macOS/Airyx/GNUStep, beta) and UIKit (iOS/tvOS, alpha).\"\nversion = \"0.4.0-beta2\"\nedition = \"2018\"\nauthors = [\"Ryan McGrath <ryan@rymc.io>\"]\nbuild = \"build.rs\"\nrepository = \"https://github.com/ryanmcgrath/cacao\"\ncategories = [\"gui\", \"os::macos-apis\", \"os::ios-apis\"]\nkeywords = [\"gui\", \"macos\", \"ios\", \"appkit\", \"uikit\"]\nlicense = \"MIT OR MPL-2.0+\"\n\n[badges]\nmaintenance = { status = \"actively-developed\" }\n\n[package.metadata.docs.rs]\nall-features = true\ndefault-target = \"x86_64-apple-darwin\"\nrustdoc-args = [\"--cfg\", \"docsrs\"]\n\n[dependencies]\nbitmask-enum = \"2.2.1\"\nobjc = { version = \"=0.3.0-beta.2\", package = \"objc2\" }\nblock = { version = \"=0.2.0-alpha.6\", package = \"block2\" }\n# Temporary: Patched versions that implement `Encode` for common types\n# Branch: `objc2`\ncore-foundation = { git = \"https://github.com/madsmtm/core-foundation-rs.git\", rev = \"7d593d016175755e492a92ef89edca68ac3bd5cd\" }\ncore-graphics = { git = \"https://github.com/madsmtm/core-foundation-rs.git\", rev = \"7d593d016175755e492a92ef89edca68ac3bd5cd\" }\ndispatch = \"0.2.0\"\ninfer = { version = \"0.15\", optional = true }\nlazy_static = \"1.4.0\"\nlibc = \"0.2\"\nos_info = \"3.0.1\"\nurl = \"2.1.1\"\nuuid = { version = \"1.1\", features = [\"v4\"], optional = true }\n\n[dev-dependencies]\neval = \"0.4\"\n\n[features]\nappkit = [\"core-foundation/mac_os_10_8_features\"]\nuikit = []\nautolayout = []\ndefault = [\"appkit\", \"autolayout\"]\ncloudkit = []\ncolor_fallbacks = []\nquicklook = []\nuser-notifications = [\"uuid\"]\nwebview = [\"infer\"]\nwebview-downloading-macos = []\n\n[package.metadata.bundle.example.ios-beta]\nname = \"ios-beta\"\nidentifier = \"com.cacao.ios-test\"\ncategory = \"Developer Tool\"\nshort_description = \"An example Cacao iOS app.\"\nlong_description = \"An example Cacao iOS app.\"\n\n[[example]]\nname = \"webview_custom_protocol\"\nrequired-features = [\"webview\"]\n\n[[example]]\nname = \"browser\"\nrequired-features = [\"webview\"]\n\n[[example]]\nname = \"ios-beta\"\nrequired-features = [\"uikit\", \"autolayout\"]\n\n[[example]]\nname = \"calculator\"\nrequired-features = [\"appkit\"]\n[[example]]\nname = \"todos_list\"\nrequired-features = [\"appkit\"]\n[[example]]\nname = \"animation\"\nrequired-features = [\"appkit\"]\n[[example]]\nname = \"autolayout\"\nrequired-features = [\"appkit\"]\n[[example]]\nname = \"custom_image_drawing\"\nrequired-features = [\"appkit\"]\n[[example]]\nname = \"text_input\"\nrequired-features = [\"appkit\"]\n[[example]]\nname = \"defaults\"\nrequired-features = [\"appkit\"]\n[[example]]\nname = \"frame_layout\"\nrequired-features = [\"appkit\"]\n[[example]]\nname = \"window\"\nrequired-features = [\"appkit\"]\n[[example]]\nname = \"window_delegate\"\nrequired-features = [\"appkit\"]\n[[example]]\nname = \"window_controller\"\nrequired-features = [\"appkit\"]\n[[example]]\nname = \"safe_area\"\nrequired-features = [\"appkit\"]\n[[example]]\nname = \"popover\"\nrequired-features = [\"appkit\"]\n"
        },
        {
          "name": "LICENSE-MIT.md",
          "type": "blob",
          "size": 1.044921875,
          "content": "MIT License\n\nCopyright (c) 2020 Ryan McGrath.\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "LICENSE-MPL.md",
          "type": "blob",
          "size": 15.185546875,
          "content": "Mozilla Public License Version 2.0\n==================================\n\n### 1. Definitions\n\n**1.1. “Contributor”**\n    means each individual or legal entity that creates, contributes to\n    the creation of, or owns Covered Software.\n\n**1.2. “Contributor Version”**\n    means the combination of the Contributions of others (if any) used\n    by a Contributor and that particular Contributor's Contribution.\n\n**1.3. “Contribution”**\n    means Covered Software of a particular Contributor.\n\n**1.4. “Covered Software”**\n    means Source Code Form to which the initial Contributor has attached\n    the notice in Exhibit A, the Executable Form of such Source Code\n    Form, and Modifications of such Source Code Form, in each case\n    including portions thereof.\n\n**1.5. “Incompatible With Secondary Licenses”**\n    means\n\n* **(a)** that the initial Contributor has attached the notice described\n    in Exhibit B to the Covered Software; or\n* **(b)** that the Covered Software was made available under the terms of\n    version 1.1 or earlier of the License, but not also under the\n    terms of a Secondary License.\n\n**1.6. “Executable Form”**\n    means any form of the work other than Source Code Form.\n\n**1.7. “Larger Work”**\n    means a work that combines Covered Software with other material, in\n    a separate file or files, that is not Covered Software.\n\n**1.8. “License”**\n    means this document.\n\n**1.9. “Licensable”**\n    means having the right to grant, to the maximum extent possible,\n    whether at the time of the initial grant or subsequently, any and\n    all of the rights conveyed by this License.\n\n**1.10. “Modifications”**\n    means any of the following:\n\n* **(a)** any file in Source Code Form that results from an addition to,\n    deletion from, or modification of the contents of Covered\n    Software; or\n* **(b)** any new file in Source Code Form that contains any Covered\n    Software.\n\n**1.11. “Patent Claims” of a Contributor**\n    means any patent claim(s), including without limitation, method,\n    process, and apparatus claims, in any patent Licensable by such\n    Contributor that would be infringed, but for the grant of the\n    License, by the making, using, selling, offering for sale, having\n    made, import, or transfer of either its Contributions or its\n    Contributor Version.\n\n**1.12. “Secondary License”**\n    means either the GNU General Public License, Version 2.0, the GNU\n    Lesser General Public License, Version 2.1, the GNU Affero General\n    Public License, Version 3.0, or any later versions of those\n    licenses.\n\n**1.13. “Source Code Form”**\n    means the form of the work preferred for making modifications.\n\n**1.14. “You” (or “Your”)**\n    means an individual or a legal entity exercising rights under this\n    License. For legal entities, “You” includes any entity that\n    controls, is controlled by, or is under common control with You. For\n    purposes of this definition, “control” means **(a)** the power, direct\n    or indirect, to cause the direction or management of such entity,\n    whether by contract or otherwise, or **(b)** ownership of more than\n    fifty percent (50%) of the outstanding shares or beneficial\n    ownership of such entity.\n\n\n### 2. License Grants and Conditions\n\n#### 2.1. Grants\n\nEach Contributor hereby grants You a world-wide, royalty-free,\nnon-exclusive license:\n\n* **(a)** under intellectual property rights (other than patent or trademark)\n    Licensable by such Contributor to use, reproduce, make available,\n    modify, display, perform, distribute, and otherwise exploit its\n    Contributions, either on an unmodified basis, with Modifications, or\n    as part of a Larger Work; and\n* **(b)** under Patent Claims of such Contributor to make, use, sell, offer\n    for sale, have made, import, and otherwise transfer either its\n    Contributions or its Contributor Version.\n\n#### 2.2. Effective Date\n\nThe licenses granted in Section 2.1 with respect to any Contribution\nbecome effective for each Contribution on the date the Contributor first\ndistributes such Contribution.\n\n#### 2.3. Limitations on Grant Scope\n\nThe licenses granted in this Section 2 are the only rights granted under\nthis License. No additional rights or licenses will be implied from the\ndistribution or licensing of Covered Software under this License.\nNotwithstanding Section 2.1(b) above, no patent license is granted by a\nContributor:\n\n* **(a)** for any code that a Contributor has removed from Covered Software;\n    or\n* **(b)** for infringements caused by: **(i)** Your and any other third party's\n    modifications of Covered Software, or **(ii)** the combination of its\n    Contributions with other software (except as part of its Contributor\n    Version); or\n* **(c)** under Patent Claims infringed by Covered Software in the absence of\n    its Contributions.\n\nThis License does not grant any rights in the trademarks, service marks,\nor logos of any Contributor (except as may be necessary to comply with\nthe notice requirements in Section 3.4).\n\n#### 2.4. Subsequent Licenses\n\nNo Contributor makes additional grants as a result of Your choice to\ndistribute the Covered Software under a subsequent version of this\nLicense (see Section 10.2) or under the terms of a Secondary License (if\npermitted under the terms of Section 3.3).\n\n#### 2.5. Representation\n\nEach Contributor represents that the Contributor believes its\nContributions are its original creation(s) or it has sufficient rights\nto grant the rights to its Contributions conveyed by this License.\n\n#### 2.6. Fair Use\n\nThis License is not intended to limit any rights You have under\napplicable copyright doctrines of fair use, fair dealing, or other\nequivalents.\n\n#### 2.7. Conditions\n\nSections 3.1, 3.2, 3.3, and 3.4 are conditions of the licenses granted\nin Section 2.1.\n\n\n### 3. Responsibilities\n\n#### 3.1. Distribution of Source Form\n\nAll distribution of Covered Software in Source Code Form, including any\nModifications that You create or to which You contribute, must be under\nthe terms of this License. You must inform recipients that the Source\nCode Form of the Covered Software is governed by the terms of this\nLicense, and how they can obtain a copy of this License. You may not\nattempt to alter or restrict the recipients' rights in the Source Code\nForm.\n\n#### 3.2. Distribution of Executable Form\n\nIf You distribute Covered Software in Executable Form then:\n\n* **(a)** such Covered Software must also be made available in Source Code\n    Form, as described in Section 3.1, and You must inform recipients of\n    the Executable Form how they can obtain a copy of such Source Code\n    Form by reasonable means in a timely manner, at a charge no more\n    than the cost of distribution to the recipient; and\n\n* **(b)** You may distribute such Executable Form under the terms of this\n    License, or sublicense it under different terms, provided that the\n    license for the Executable Form does not attempt to limit or alter\n    the recipients' rights in the Source Code Form under this License.\n\n#### 3.3. Distribution of a Larger Work\n\nYou may create and distribute a Larger Work under terms of Your choice,\nprovided that You also comply with the requirements of this License for\nthe Covered Software. If the Larger Work is a combination of Covered\nSoftware with a work governed by one or more Secondary Licenses, and the\nCovered Software is not Incompatible With Secondary Licenses, this\nLicense permits You to additionally distribute such Covered Software\nunder the terms of such Secondary License(s), so that the recipient of\nthe Larger Work may, at their option, further distribute the Covered\nSoftware under the terms of either this License or such Secondary\nLicense(s).\n\n#### 3.4. Notices\n\nYou may not remove or alter the substance of any license notices\n(including copyright notices, patent notices, disclaimers of warranty,\nor limitations of liability) contained within the Source Code Form of\nthe Covered Software, except that You may alter any license notices to\nthe extent required to remedy known factual inaccuracies.\n\n#### 3.5. Application of Additional Terms\n\nYou may choose to offer, and to charge a fee for, warranty, support,\nindemnity or liability obligations to one or more recipients of Covered\nSoftware. However, You may do so only on Your own behalf, and not on\nbehalf of any Contributor. You must make it absolutely clear that any\nsuch warranty, support, indemnity, or liability obligation is offered by\nYou alone, and You hereby agree to indemnify every Contributor for any\nliability incurred by such Contributor as a result of warranty, support,\nindemnity or liability terms You offer. You may include additional\ndisclaimers of warranty and limitations of liability specific to any\njurisdiction.\n\n\n### 4. Inability to Comply Due to Statute or Regulation\n\nIf it is impossible for You to comply with any of the terms of this\nLicense with respect to some or all of the Covered Software due to\nstatute, judicial order, or regulation then You must: **(a)** comply with\nthe terms of this License to the maximum extent possible; and **(b)**\ndescribe the limitations and the code they affect. Such description must\nbe placed in a text file included with all distributions of the Covered\nSoftware under this License. Except to the extent prohibited by statute\nor regulation, such description must be sufficiently detailed for a\nrecipient of ordinary skill to be able to understand it.\n\n\n### 5. Termination\n\n**5.1.** The rights granted under this License will terminate automatically\nif You fail to comply with any of its terms. However, if You become\ncompliant, then the rights granted under this License from a particular\nContributor are reinstated **(a)** provisionally, unless and until such\nContributor explicitly and finally terminates Your grants, and **(b)** on an\nongoing basis, if such Contributor fails to notify You of the\nnon-compliance by some reasonable means prior to 60 days after You have\ncome back into compliance. Moreover, Your grants from a particular\nContributor are reinstated on an ongoing basis if such Contributor\nnotifies You of the non-compliance by some reasonable means, this is the\nfirst time You have received notice of non-compliance with this License\nfrom such Contributor, and You become compliant prior to 30 days after\nYour receipt of the notice.\n\n**5.2.** If You initiate litigation against any entity by asserting a patent\ninfringement claim (excluding declaratory judgment actions,\ncounter-claims, and cross-claims) alleging that a Contributor Version\ndirectly or indirectly infringes any patent, then the rights granted to\nYou by any and all Contributors for the Covered Software under Section\n2.1 of this License shall terminate.\n\n**5.3.** In the event of termination under Sections 5.1 or 5.2 above, all\nend user license agreements (excluding distributors and resellers) which\nhave been validly granted by You or Your distributors under this License\nprior to termination shall survive termination.\n\n\n### 6. Disclaimer of Warranty\n\n> Covered Software is provided under this License on an “as is”\n> basis, without warranty of any kind, either expressed, implied, or\n> statutory, including, without limitation, warranties that the\n> Covered Software is free of defects, merchantable, fit for a\n> particular purpose or non-infringing. The entire risk as to the\n> quality and performance of the Covered Software is with You.\n> Should any Covered Software prove defective in any respect, You\n> (not any Contributor) assume the cost of any necessary servicing,\n> repair, or correction. This disclaimer of warranty constitutes an\n> essential part of this License. No use of any Covered Software is\n> authorized under this License except under this disclaimer.\n\n### 7. Limitation of Liability\n\n> Under no circumstances and under no legal theory, whether tort\n> (including negligence), contract, or otherwise, shall any\n> Contributor, or anyone who distributes Covered Software as\n> permitted above, be liable to You for any direct, indirect,\n> special, incidental, or consequential damages of any character\n> including, without limitation, damages for lost profits, loss of\n> goodwill, work stoppage, computer failure or malfunction, or any\n> and all other commercial damages or losses, even if such party\n> shall have been informed of the possibility of such damages. This\n> limitation of liability shall not apply to liability for death or\n> personal injury resulting from such party's negligence to the\n> extent applicable law prohibits such limitation. Some\n> jurisdictions do not allow the exclusion or limitation of\n> incidental or consequential damages, so this exclusion and\n> limitation may not apply to You.\n\n\n### 8. Litigation\n\nAny litigation relating to this License may be brought only in the\ncourts of a jurisdiction where the defendant maintains its principal\nplace of business and such litigation shall be governed by laws of that\njurisdiction, without reference to its conflict-of-law provisions.\nNothing in this Section shall prevent a party's ability to bring\ncross-claims or counter-claims.\n\n\n### 9. Miscellaneous\n\nThis License represents the complete agreement concerning the subject\nmatter hereof. If any provision of this License is held to be\nunenforceable, such provision shall be reformed only to the extent\nnecessary to make it enforceable. Any law or regulation which provides\nthat the language of a contract shall be construed against the drafter\nshall not be used to construe this License against a Contributor.\n\n\n### 10. Versions of the License\n\n#### 10.1. New Versions\n\nMozilla Foundation is the license steward. Except as provided in Section\n10.3, no one other than the license steward has the right to modify or\npublish new versions of this License. Each version will be given a\ndistinguishing version number.\n\n#### 10.2. Effect of New Versions\n\nYou may distribute the Covered Software under the terms of the version\nof the License under which You originally received the Covered Software,\nor under the terms of any subsequent version published by the license\nsteward.\n\n#### 10.3. Modified Versions\n\nIf you create software not governed by this License, and you want to\ncreate a new license for such software, you may create and use a\nmodified version of this License if you rename the license and remove\nany references to the name of the license steward (except to note that\nsuch modified license differs from this License).\n\n#### 10.4. Distributing Source Code Form that is Incompatible With Secondary Licenses\n\nIf You choose to distribute Source Code Form that is Incompatible With\nSecondary Licenses under the terms of this version of the License, the\nnotice described in Exhibit B of this License must be attached.\n\n## Exhibit A - Source Code Form License Notice\n\n    This Source Code Form is subject to the terms of the Mozilla Public\n    License, v. 2.0. If a copy of the MPL was not distributed with this\n    file, You can obtain one at http://mozilla.org/MPL/2.0/.\n\nIf it is not possible or desirable to put the notice in a particular\nfile, then You may include the notice in a location (such as a LICENSE\nfile in a relevant directory) where a recipient would be likely to look\nfor such a notice.\n\nYou may add additional accurate notices of copyright ownership.\n\n## Exhibit B - “Incompatible With Secondary Licenses” Notice\n\n    This Source Code Form is \"Incompatible With Secondary Licenses\", as\n    defined by the Mozilla Public License, v. 2.0.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 11.166015625,
          "content": "# Cacao\n\nThis library provides safe Rust bindings for `AppKit` on macOS (beta quality, fairly usable) and `UIKit` on iOS/tvOS (alpha quality, see repo).\nIt tries to do so in a way that, if you've done programming for the framework before (in Swift or\nObjective-C), will feel familiar. This is tricky in Rust due to the ownership model, but some\ncreative coding and assumptions can get us pretty far.\n\nThis exists on crates.io in part to enable the project to see wider usage, which can\ninform development. That said, this library is currently early stages and may have bugs - your usage of it is at\nyour own risk. However, provided you follow the rules (regarding memory/ownership) it's\nalready fine for some apps. The core repository has a wealth of examples to help you get started.\n\n> **Important**\n>\n> If you are migrating from 0.2 to 0.3, you should elect either `appkit` or `uikit` as a feature in your `Cargo.toml`. This change was made to\n> support platforms that aren't just macOS/iOS/tvOS (e.g, gnustep, airyx). One of these features is required to work; `appkit` is defaulted for\n> ease of development.\n\n>_Note that this crate relies on the Objective-C runtime. Interfacing with the runtime **requires**\nunsafe blocks; this crate handles those unsafe interactions for you and provides a safe wrapper,\nbut by using this crate you understand that usage of `unsafe` is a given and will be somewhat\nrampant for wrapped controls. This does **not** mean you can't assess, review, or question unsafe\nusage - just know it's happening, and in large part it's not going away. Issues pertaining to the mere\nexistence of unsafe will be closed without comment._\n\nIf you're looking to build the docs for this on your local machine, you'll want the following due to the way feature flags work\nwith `cargo doc`:\n\n`RUSTDOCFLAGS=\"--cfg docsrs\" cargo +nightly doc --all-features --open`\n\n# Hello World\n\n```rust\nuse cacao::appkit::{App, AppDelegate};\nuse cacao::appkit::window::Window;\n\n#[derive(Default)]\nstruct BasicApp {\n    window: Window\n}\n\nimpl AppDelegate for BasicApp {\n    fn did_finish_launching(&self) {\n        self.window.set_minimum_content_size(400., 400.);\n        self.window.set_title(\"Hello World!\");\n        self.window.show();\n    }\n}\n\nfn main() {\n    App::new(\"com.hello.world\", BasicApp::default()).run();\n}\n```\n\nFor more thorough examples, check the `examples/` folder.\n\nIf you're interested in a more \"kitchen sink\" example, check out the todos_list with:\n\n``` sh\ncargo run --example todos_list\n```\n\n## Initialization\nDue to the way that AppKit and UIKit programs typically work, you're encouraged to do the bulk\nof your work starting from the `did_finish_launching()` method of your `AppDelegate`. This\nensures the application has had time to initialize and do any housekeeping necessary behind the\nscenes.\n\n## Currently Supported\nIn terms of mostly working pieces, the table below showcases the level of support for varying features. This list is not exhaustive just by virtue of documentation updating being hell - so you're encouraged to check out the code-built documentation for more info:\n\nNote that while iOS has green checkmarks, some components still aren't as well defined (e.g, Views/ViewControllers are still very alpha there).\n\nNon-Apple platforms that shim or provide a form of AppKit may be able to use a good chunk of the AppKit support in this library.\n\n| Component           | Description                         | AppKit | iOS | tvOS |\n| ------------------- | ----------------------------------- | ------ | --- | ---- |\n| App                 | Initialization & events             |   ✅   | ✅  |  ❌  |\n| Window              | Construction, handling, events      |   ✅   | ✅  |  ❌  |\n| View                | Construction, styling, events       |   ✅   | ✅  |  ❌  |\n| ViewController      | Construction, lifecycle events      |   ✅   | ✅  |  ❌  |\n| Color               | System-backed colors, theming       |   ✅   | ✅  |  ❌  |\n| ListView            | Reusable list w/ cached rows        |   ✅   | ❌  |  ❌  |\n| Button              | Styling, events, toolbar support    |   ✅   | ❌  |  ❌  |\n| Label/TextField     | Text rendering & input              |   ✅   | ❌  |  ❌  |\n| Image/ImageView     | Loading, drawing, etc               |   ✅   | ✅  |  ❌  |\n| Toolbar             | Basic native toolbar                |   ✅   | ❌  |  ❌  |\n| SplitViewController | Split views (Big Sur friendly)      |   ✅   | ❌  |  ❌  |\n| WebView             | Wrapper for WKWebView               |   ✅   | ❌  |  ❌  |\n| UserDefaults        | Persisting small data               |   ✅   | ✅  |  ❌  |\n| Autolayout          | View layout for varying screens     |   ✅   | ✅  |  ❌  |\n\n## Optional Features\n\nThe following are a list of [Cargo features][cargo-features] that can be enabled or disabled.\n\n- `appkit`: Links `AppKit.framework`.\n- `uikit`: Links `UIKit.framework` (iOS/tvOS only).\n- `cloudkit`: Links `CloudKit.framework` and provides some wrappers around CloudKit functionality. Currently not feature complete.\n- `color_fallbacks`: Provides fallback colors for older systems where `systemColor` types don't exist. This feature is very uncommon and you probably don't need it.\n- `quicklook`: Links `QuickLook.framework` and offers methods for generating preview images for files.\n- `user-notifications`: Links `UserNotifications.framework` and provides functionality for emitting notifications on macOS and iOS. Note that this _requires_ your application be code-signed, and will not work without it.\n- `webview`: Links `WebKit.framework` and provides a `WebView` control backed by `WKWebView`. This feature is not supported on tvOS, as the platform has no webview control. This feature is also potentially only supported for macOS/iOS due to the WKWebView control and varying support on non-Apple platforms.\n- `webview-downloading-macos`: Enables downloading files from the `WebView` via a private interface. This is not an App-Store-safe feature, so be aware of that before enabling. This feature is not supported on iOS (a user would handle downloads very differently) or tvOS (there's no web browser there at all).\n\n[cargo-features]: https://doc.rust-lang.org/stable/cargo/reference/manifest.html#the-features-section\n\n## General Notes\n**Why not extend the existing cocoa-rs crate?**  \nA good question. At the end of the day, that crate (I believe, and someone can correct me if I'm wrong) is somewhat tied to Servo, and I wanted to experiment with what the best approach for representing the Cocoa UI model in Rust was. This crate doesn't ignore their work entirely, either - `core_foundation` and `core_graphics` are used internally and re-exported for general use.\n\n**Why should I write in Rust, rather than X language?**  \nIn _my_ case, I want to be able to write native applications for my devices (and the platform I like to build products for) without being locked in to writing in Apple-specific languages... and without writing in C/C++ or JavaScript (note: the _toolchain_, not the language - ES6/Typescript are fine). I want to do this because I'm tired of hitting a mountain of work when I want to port my applications to other ecosystems. I think that Rust offers a (growing, but significant) viable model for sharing code across platforms and ecosystems without sacrificing performance.\n\n_(This is the part where the internet lights up and rants about some combination of Electron, Qt, and so on - we're not bothering here as it's beaten to death elsewhere)_\n\nThis crate is useful for people who don't need to go all-in on the Apple ecosystem, but want to port their work there with some relative ease. It's not expected that everyone will suddenly want to rewrite their macOS/iOS/tvOS apps in Rust.\n\n**Isn't Objective-C dead?**  \nYes, and no.\n\nIt's true that Apple definitely favors Swift, and for good reason (and I say this as an unabashed lover of Objective-C). With that said, I would be surprised if we didn't have another ~5+ years of support; Apple is quick to deprecate, but removing the Objective-C runtime would require a ton of time and effort. Maybe SwiftUI kills it, who knows. A wrapper around this stuff should conceivably make it easier to swap out the underlying UI backend whenever it comes time.\n\nOne thing to note is that Apple _has_ started releasing Swift-only frameworks. For cases where you need those, it should be possible to do some combination of linking and bridging - which would inform how swapping out the underlying UI backend would happen at some point.\n\nSome might also decry Objective-C as slow. To that, I'd note the following:\n\n- Your UI engine is probably not the bottleneck.\n- Swift is generally better as it fixes a class of bugs that Objective-C doesn't catch; for the most part it still sits on top of the existing Cocoa frameworks anyway (though this statement will not age well~).\n- Message dispatching in Objective-C is more optimized than significant chunks of the code you'll write, and is fast enough for most things.\n\n**tl;dr** it's probably fine, and you have Rust for your performance needs.\n\n**Why not just wrap UIKit, and then rely on Catalyst?**  \nI have yet to see a single application where Catalyst felt good. The goal is good, though, and if it got to a point where that just seemed like the way forward (e.g, Apple just kills AppKit) then it's certainly an option.\n\n**You can't possibly wrap all platform-specific behavior here...**  \nCorrect! Each UI control contains a `objc` field, which you can use as an escape hatch - if the control doesn't support something, you're free to drop to the Objective-C runtime yourself and handle it.\n\n**Why don't you use bindings to automatically generate this stuff?**  \nFor initial exploration purposes I've done most of this by hand, as I wanted to find an approach that fit well in the Rust model before committing to binding generation. This is something I'll likely focus on next now that I've got things \"working\" well enough.\n\n**Is this related to Cacao, the Swift project?**  \nNo. The project referred to in this question aimed to map portions of Cocoa and UIKit over to run on Linux, but hasn't seen activity in some time (it was really cool, too!).\n\nOpen source project naming in 2020 is like trying to buy a `.com` domain: everything good is taken. Luckily, multiple projects can share a name... so that's what's going to happen here.\n\n**Isn't this kind of cheating the Rust object model?**  \nDepends on how you look at it. I personally don't care too much - the GUI layer for these platforms is a hard requirement to support for certain classes of products, and giving them up also means giving up battle-tested tools for things like Accessibility and deeper OS integration. With that said, internally there are efforts to try and make things respect Rust's model of how things should work.\n\nYou can think of this as similar to gtk-rs. If you want to support or try a more _pure_ model, go check out Druid or something. :)\n\n## License\nDual licensed under an MIT/MPL-2.0 license. See the appropriate files in this repository for more information. Apple, AppKit, UIKit, Cocoa, and other trademarks are copyright Apple, Inc.\n\n## Questions, Comments, etc\nYou can follow me over on [twitter](https://twitter.com/ryanmcgrath/) or [email me](mailto:ryan@rymc.io) with questions that don't fit as an issue here.\n"
        },
        {
          "name": "build.rs",
          "type": "blob",
          "size": 0.845703125,
          "content": "//! Emits linker flags depending on platforms and features.\n\nfn main() {\n    println!(\"cargo:rustc-link-lib=framework=Foundation\");\n\n    #[cfg(feature = \"appkit\")]\n    println!(\"cargo:rustc-link-lib=framework=AppKit\");\n\n    #[cfg(feature = \"uikit\")]\n    println!(\"cargo:rustc-link-lib=framework=UIKit\");\n\n    println!(\"cargo:rustc-link-lib=framework=CoreGraphics\");\n    println!(\"cargo:rustc-link-lib=framework=QuartzCore\");\n    println!(\"cargo:rustc-link-lib=framework=Security\");\n\n    #[cfg(feature = \"webview\")]\n    println!(\"cargo:rustc-link-lib=framework=WebKit\");\n\n    #[cfg(feature = \"cloudkit\")]\n    println!(\"cargo:rustc-link-lib=framework=CloudKit\");\n\n    #[cfg(feature = \"user-notifications\")]\n    println!(\"cargo:rustc-link-lib=framework=UserNotifications\");\n\n    #[cfg(feature = \"quicklook\")]\n    println!(\"cargo:rustc-link-lib=framework=QuickLook\");\n}\n"
        },
        {
          "name": "clippy.toml",
          "type": "blob",
          "size": 0.1396484375,
          "content": "cyclomatic-complexity-threshold = 30\ndoc-valid-idents = [\n  \"MiB\", \"GiB\", \"TiB\", \"PiB\", \"EiB\",\n  \"DirectX\", \"OpenGL\", \"TrueType\",\n  \"GitHub\"\n]\n"
        },
        {
          "name": "code_of_conduct.md",
          "type": "blob",
          "size": 3.1611328125,
          "content": "# Contributor Code of Conduct\n\n## Our Pledge\n\nIn the interest of fostering an open and welcoming environment, we as\ncontributors and maintainers pledge to making participation in our project and\nour community a harassment-free experience for everyone, regardless of age, body\nsize, disability, ethnicity, gender identity and expression, level of experience,\nnationality, personal appearance, race, religion, or sexual identity and\norientation.\n\n## Our Standards\n\nExamples of behavior that contributes to creating a positive environment\ninclude:\n\n* Using welcoming and inclusive language\n* Being respectful of differing viewpoints and experiences\n* Gracefully accepting constructive criticism\n* Focusing on what is best for the community\n* Showing empathy towards other community members\n\nExamples of unacceptable behavior by participants include:\n\n* The use of sexualized language or imagery and unwelcome sexual attention or\nadvances\n* Trolling, insulting/derogatory comments, and personal or political attacks\n* Public or private harassment\n* Publishing others' private information, such as a physical or electronic\n  address, without explicit permission\n* Other conduct which could reasonably be considered inappropriate in a\n  professional setting\n\n## Our Responsibilities\n\nProject maintainers are responsible for clarifying the standards of acceptable\nbehavior and are expected to take appropriate and fair corrective action in\nresponse to any instances of unacceptable behavior.\n\nProject maintainers have the right and responsibility to remove, edit, or\nreject comments, commits, code, wiki edits, issues, and other contributions\nthat are not aligned to this Code of Conduct, or to ban temporarily or\npermanently any contributor for other behaviors that they deem inappropriate,\nthreatening, offensive, or harmful.\n\n## Scope\n\nThis Code of Conduct applies both within project spaces and in public spaces\nwhen an individual is representing the project or its community. Examples of\nrepresenting a project or community include using an official project e-mail\naddress, posting via an official social media account, or acting as an appointed\nrepresentative at an online or offline event. Representation of a project may be\nfurther defined and clarified by project maintainers.\n\n## Enforcement\n\nInstances of abusive, harassing, or otherwise unacceptable behavior may be\nreported by contacting a project maintainer at:\n\n* Ryan McGrath <ryan@rymc.io>\n\nAll complaints will be reviewed and investigated and will result in a response\nthat is deemed necessary and appropriate to the circumstances. The project team\nis obligated to maintain confidentiality with regard to the reporter of an\nincident. Further details of specific enforcement policies may be posted\nseparately.\n\nProject maintainers who do not follow or enforce the Code of Conduct in good\nfaith may face temporary or permanent repercussions as determined by other\nmembers of the project's leadership.\n\n## Attribution\n\nThis Code of Conduct is adapted from the [Contributor Covenant][homepage], version 1.4,\navailable at [https://contributor-covenant.org/version/1/4][version]\n\n[homepage]: https://contributor-covenant.org\n[version]: https://contributor-covenant.org/version/1/4/\n"
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "rustfmt.toml",
          "type": "blob",
          "size": 0.1142578125,
          "content": "max_width = 130\nmatch_block_trailing_comma = true\n\n# Nightly\noverflow_delimited_expr = true\ntrailing_comma = \"Never\"\n"
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "test-data",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}