{
  "metadata": {
    "timestamp": 1736709098959,
    "page": 251,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjI2MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "Amanieu/parking_lot",
      "stars": 2816,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.017578125,
          "content": "target\nCargo.lock\n"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 9.14453125,
          "content": "## parking_lot 0.12.3 (2024-05-24)\n\n- Export types provided by arc_lock feature (#442)\n\n## parking_lot 0.12.2, parking_lot_core 0.9.10, lock_api 0.4.12 (2024-04-15)\n\n- Fixed panic when calling `with_upgraded` twice on a `ArcRwLockUpgradableReadGuard` (#431)\n- Fixed `RwLockUpgradeableReadGuard::with_upgraded` \n- Added lock_api::{Mutex, ReentrantMutex, RwLock}::from_raw methods (#429)\n- Added Apple visionOS support (#433)\n\n## parking_lot_core 0.9.9, lock_api 0.4.11 (2023-10-18)\n\n- Fixed `RwLockUpgradeableReadGuard::with_upgraded`. (#393)\n- Fixed `ReentrantMutex::bump` lock count. (#390)\n- Added methods to unsafely create a lock guard out of thin air. (#403)\n- Added support for Apple tvOS. (#405)\n\n## parking_lot_core 0.9.8, lock_api 0.4.10 (2023-06-05)\n\n- Mark guards with `#[clippy::has_significant_drop]` (#369, #371)\n- Removed windows-sys dependency (#374, #378)\n- Add `atomic_usize` default feature to support platforms without atomics. (#380)\n- Add with_upgraded API to upgradable read locks (#386)\n- Make RwLock guards Sync again (#370)\n\n## parking_lot_core 0.9.7 (2023-02-01)\n\n- Update windows-sys dependency to 0.45. (#368)\n\n## parking_lot_core 0.9.6 (2023-01-11)\n\n- Add support for watchOS. (#367)\n\n## parking_lot_core 0.9.5 (2022-11-29)\n\n- Update use of `libc::timespec` to prepare for future libc version (#363)\n\n## parking_lot_core 0.9.4 (2022-10-18)\n\n- Bump windows-sys dependency to 0.42. (#356)\n\n## lock_api 0.4.9 (2022-09-20)\n\n- Fixed `ReentrantMutexGuard::try_map` signature (#355)\n\n## lock_api 0.4.8 (2022-08-28)\n\n- Fixed unsound `Sync`/`Send` impls for `ArcMutexGuard`. (#349)\n- Added `ArcMutexGuard::into_arc`. (#350)\n\n## parking_lot 0.12.1 (2022-05-31)\n\n- Fixed incorrect memory ordering in `RwLock`. (#344)\n- Added `Condvar::wait_while` convenience methods (#343)\n\n## parking_lot_core 0.9.3 (2022-04-30)\n\n- Bump windows-sys dependency to 0.36. (#339)\n\n## parking_lot_core 0.9.2, lock_api 0.4.7 (2022-03-25)\n\n- Enable const new() on lock types on stable. (#325)\n- Added `MutexGuard::leak` function. (#333)\n- Bump windows-sys dependency to 0.34. (#331)\n- Bump petgraph dependency to 0.6. (#326)\n- Don't use pthread attributes on the espidf platform. (#319)\n\n## parking_lot_core 0.9.1 (2022-02-06)\n\n- Bump windows-sys dependency to 0.32. (#316)\n\n## parking_lot 0.12.0, parking_lot_core 0.9.0, lock_api 0.4.6 (2022-01-28)\n\n- The MSRV is bumped to 1.49.0.\n- Disabled eventual fairness on wasm32-unknown-unknown. (#302)\n- Added a rwlock method to report if lock is held exclusively. (#303)\n- Use new `asm!` macro. (#304)\n- Use windows-rs instead of winapi for faster builds. (#311)\n- Moved hardware lock elision support to a separate Cargo feature. (#313)\n- Removed used of deprecated `spin_loop_hint`. (#314)\n\n## parking_lot 0.11.2, parking_lot_core 0.8.4, lock_api 0.4.5 (2021-08-28)\n\n- Fixed incorrect memory orderings on `RwLock` and `WordLock`. (#294, #292)\n- Added `Arc`-based lock guards. (#291)\n- Added workaround for TSan's lack of support for `fence`. (#292)\n\n## lock_api 0.4.4 (2021-05-01)\n\n- Update for latest nightly. (#281)\n\n## lock_api 0.4.3 (2021-04-03)\n\n- Added `[Raw]ReentrantMutex::is_owned`. (#280)\n\n## parking_lot_core 0.8.3 (2021-02-12)\n\n- Updated smallvec to 1.6. (#276)\n\n## parking_lot_core 0.8.2 (2020-12-21)\n\n- Fixed assertion failure on OpenBSD. (#270)\n\n## parking_lot_core 0.8.1 (2020-12-04)\n\n- Removed deprecated CloudABI support. (#263)\n- Fixed build on wasm32-unknown-unknown. (#265)\n- Relaxed dependency on `smallvec`. (#266)\n\n## parking_lot 0.11.1, lock_api 0.4.2 (2020-11-18)\n\n- Fix bounds on Send and Sync impls for lock guards. (#262)\n- Fix incorrect memory ordering in `RwLock`. (#260)\n\n## lock_api 0.4.1 (2020-07-06)\n\n- Add `data_ptr` method to lock types to allow unsafely accessing the inner data\n  without a guard. (#247)\n\n## parking_lot 0.11.0, parking_lot_core 0.8.0, lock_api 0.4.0 (2020-06-23)\n\n- Add `is_locked` method to mutex types. (#235)\n- Make `RawReentrantMutex` public. (#233)\n- Allow lock guard to be sent to another thread with the `send_guard` feature. (#240)\n- Use `Instant` type from the `instant` crate on wasm32-unknown-unknown. (#231)\n- Remove deprecated and unsound `MappedRwLockWriteGuard::downgrade`. (#244)\n- Most methods on the `Raw*` traits have been made unsafe since they assume\n  the current thread holds the lock. (#243)\n\n## parking_lot_core 0.7.2 (2020-04-21)\n\n- Add support for `wasm32-unknown-unknown` under the \"nightly\" feature. (#226)\n\n## parking_lot 0.10.2 (2020-04-10)\n\n- Update minimum version of `lock_api`.\n\n## parking_lot 0.10.1, parking_lot_core 0.7.1, lock_api 0.3.4 (2020-04-10)\n\n- Add methods to construct `Mutex`, `RwLock`, etc in a `const` context. (#217)\n- Add `FairMutex` which always uses fair unlocking. (#204)\n- Fixed panic with deadlock detection on macOS. (#203)\n- Fixed incorrect synchronization in `create_hashtable`. (#210)\n- Use `llvm_asm!` instead of the deprecated `asm!`. (#223)\n\n## lock_api 0.3.3 (2020-01-04)\n\n- Deprecate unsound `MappedRwLockWriteGuard::downgrade` (#198)\n\n## parking_lot 0.10.0, parking_lot_core 0.7.0, lock_api 0.3.2 (2019-11-25)\n\n- Upgrade smallvec dependency to 1.0 in parking_lot_core.\n- Replace all usage of `mem::uninitialized` with `mem::MaybeUninit`.\n- The minimum required Rust version is bumped to 1.36. Because of the above two changes.\n- Make methods on `WaitTimeoutResult` and `OnceState` take `self` by value instead of reference.\n\n## parking_lot_core 0.6.2 (2019-07-22)\n\n- Fixed compile error on Windows with old cfg_if version. (#164)\n\n## parking_lot_core 0.6.1 (2019-07-17)\n\n- Fixed Android build. (#163)\n\n## parking_lot 0.9.0, parking_lot_core 0.6.0, lock_api 0.3.1 (2019-07-14)\n\n- Re-export lock_api (0.3.1) from parking_lot (#150)\n- Removed (non-dev) dependency on rand crate for fairness mechanism, by\n  including a simple xorshift PRNG in core (#144)\n- Android now uses the futex-based ThreadParker. (#140)\n- Fixed CloudABI ThreadParker. (#140)\n- Fix race condition in lock_api::ReentrantMutex (da16c2c7)\n\n## lock_api 0.3.0 (2019-07-03, _yanked_)\n\n- Use NonZeroUsize in GetThreadId::nonzero_thread_id (#148)\n- Debug assert lock_count in ReentrantMutex (#148)\n- Tag as `unsafe` and document some internal methods (#148)\n- This release was _yanked_ due to a regression in ReentrantMutex (da16c2c7)\n\n## parking_lot 0.8.1 (2019-07-03, _yanked_)\n\n- Re-export lock_api (0.3.0) from parking_lot (#150)\n- This release was _yanked_ from crates.io due to unexpected breakage (#156)\n\n## parking_lot 0.8.0, parking_lot_core 0.5.0, lock_api 0.2.0 (2019-05-04)\n\n- Fix race conditions in deadlock detection.\n- Support for more platforms by adding ThreadParker implementations for\n  Wasm, Redox, SGX and CloudABI.\n- Drop support for older Rust. parking_lot now requires 1.31 and is a\n  Rust 2018 edition crate (#122).\n- Disable the owning_ref feature by default.\n- Fix was_last_thread value in the timeout callback of park() (#129).\n- Support single byte Mutex/Once on stable Rust when compiler is at least\n  version 1.34.\n- Make Condvar::new and Once::new const fns on stable Rust and remove\n  ONCE_INIT (#134).\n- Add optional Serde support (#135).\n\n## parking_lot 0.7.1 (2019-01-01)\n\n- Fixed potential deadlock when upgrading a RwLock.\n- Fixed overflow panic on very long timeouts (#111).\n\n## parking_lot 0.7.0, parking_lot_core 0.4.0 (2018-11-26)\n\n- Return if or how many threads were notified from `Condvar::notify_*`\n\n## parking_lot 0.6.3 (2018-07-18)\n\n- Export `RawMutex`, `RawRwLock` and `RawThreadId`.\n\n## parking_lot 0.6.2 (2018-06-18)\n\n- Enable `lock_api/nightly` feature from `parking_lot/nightly` (#79)\n\n## parking_lot 0.6.1 (2018-06-08)\n\nAdded missing typedefs for mapped lock guards:\n\n- `MappedMutexGuard`\n- `MappedReentrantMutexGuard`\n- `MappedRwLockReadGuard`\n- `MappedRwLockWriteGuard`\n\n## parking_lot 0.6.0 (2018-06-08)\n\nThis release moves most of the code for type-safe `Mutex` and `RwLock` types\ninto a separate crate called `lock_api`. This new crate is compatible with\n`no_std` and provides `Mutex` and `RwLock` type-safe wrapper types from a raw\nmutex type which implements the `RawMutex` or `RawRwLock` trait. The API\nprovided by the wrapper types can be extended by implementing more traits on\nthe raw mutex type which provide more functionality (e.g. `RawMutexTimed`). See\nthe crate documentation for more details.\n\nThere are also several major changes:\n\n- The minimum required Rust version is bumped to 1.26.\n- All methods on `MutexGuard` (and other guard types) are no longer inherent\n  methods and must be called as `MutexGuard::method(self)`. This avoids\n  conflicts with methods from the inner type.\n- `MutexGuard` (and other guard types) add the `unlocked` method which\n  temporarily unlocks a mutex, runs the given closure, and then re-locks the\n   mutex.\n- `MutexGuard` (and other guard types) add the `bump` method which gives a\n  chance for other threads to acquire the mutex by temporarily unlocking it and\n  re-locking it. However this is optimized for the common case where there are\n  no threads waiting on the lock, in which case no unlocking is performed.\n- `MutexGuard` (and other guard types) add the `map` method which returns a\n  `MappedMutexGuard` which holds only a subset of the original locked type. The\n  `MappedMutexGuard` type is identical to `MutexGuard` except that it does not\n  support the `unlocked` and `bump` methods, and can't be used with `CondVar`.\n"
        },
        {
          "name": "Cargo.toml",
          "type": "blob",
          "size": 1.166015625,
          "content": "[package]\nname = \"parking_lot\"\nversion = \"0.12.3\"\nauthors = [\"Amanieu d'Antras <amanieu@gmail.com>\"]\ndescription = \"More compact and efficient implementations of the standard synchronization primitives.\"\nlicense = \"MIT OR Apache-2.0\"\nrepository = \"https://github.com/Amanieu/parking_lot\"\nreadme = \"README.md\"\nkeywords = [\"mutex\", \"condvar\", \"rwlock\", \"once\", \"thread\"]\ncategories = [\"concurrency\"]\nedition = \"2021\"\nrust-version = \"1.56\"\n\n[package.metadata.docs.rs]\nfeatures = [\"arc_lock\", \"serde\", \"deadlock_detection\"]\nrustdoc-args = [\"--generate-link-to-definition\"]\n\n[package.metadata.playground]\nfeatures = [\"arc_lock\", \"serde\", \"deadlock_detection\"]\n\n[dependencies]\nparking_lot_core = { path = \"core\", version = \"0.9.0\" }\nlock_api = { path = \"lock_api\", version = \"0.4.6\" }\n\n[dev-dependencies]\nrand = \"0.8.3\"\n\n# Used when testing out serde support.\nbincode = \"1.3.3\"\n\n[features]\ndefault = []\narc_lock = [\"lock_api/arc_lock\"]\nowning_ref = [\"lock_api/owning_ref\"]\nnightly = [\"parking_lot_core/nightly\", \"lock_api/nightly\"]\ndeadlock_detection = [\"parking_lot_core/deadlock_detection\"]\nserde = [\"lock_api/serde\"]\nsend_guard = []\nhardware-lock-elision = []\n\n[workspace]\nexclude = [\"benchmark\"]\n"
        },
        {
          "name": "LICENSE-APACHE",
          "type": "blob",
          "size": 10.5927734375,
          "content": "                              Apache License\n                        Version 2.0, January 2004\n                     http://www.apache.org/licenses/\n\nTERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n1. Definitions.\n\n   \"License\" shall mean the terms and conditions for use, reproduction,\n   and distribution as defined by Sections 1 through 9 of this document.\n\n   \"Licensor\" shall mean the copyright owner or entity authorized by\n   the copyright owner that is granting the License.\n\n   \"Legal Entity\" shall mean the union of the acting entity and all\n   other entities that control, are controlled by, or are under common\n   control with that entity. For the purposes of this definition,\n   \"control\" means (i) the power, direct or indirect, to cause the\n   direction or management of such entity, whether by contract or\n   otherwise, or (ii) ownership of fifty percent (50%) or more of the\n   outstanding shares, or (iii) beneficial ownership of such entity.\n\n   \"You\" (or \"Your\") shall mean an individual or Legal Entity\n   exercising permissions granted by this License.\n\n   \"Source\" form shall mean the preferred form for making modifications,\n   including but not limited to software source code, documentation\n   source, and configuration files.\n\n   \"Object\" form shall mean any form resulting from mechanical\n   transformation or translation of a Source form, including but\n   not limited to compiled object code, generated documentation,\n   and conversions to other media types.\n\n   \"Work\" shall mean the work of authorship, whether in Source or\n   Object form, made available under the License, as indicated by a\n   copyright notice that is included in or attached to the work\n   (an example is provided in the Appendix below).\n\n   \"Derivative Works\" shall mean any work, whether in Source or Object\n   form, that is based on (or derived from) the Work and for which the\n   editorial revisions, annotations, elaborations, or other modifications\n   represent, as a whole, an original work of authorship. For the purposes\n   of this License, Derivative Works shall not include works that remain\n   separable from, or merely link (or bind by name) to the interfaces of,\n   the Work and Derivative Works thereof.\n\n   \"Contribution\" shall mean any work of authorship, including\n   the original version of the Work and any modifications or additions\n   to that Work or Derivative Works thereof, that is intentionally\n   submitted to Licensor for inclusion in the Work by the copyright owner\n   or by an individual or Legal Entity authorized to submit on behalf of\n   the copyright owner. For the purposes of this definition, \"submitted\"\n   means any form of electronic, verbal, or written communication sent\n   to the Licensor or its representatives, including but not limited to\n   communication on electronic mailing lists, source code control systems,\n   and issue tracking systems that are managed by, or on behalf of, the\n   Licensor for the purpose of discussing and improving the Work, but\n   excluding communication that is conspicuously marked or otherwise\n   designated in writing by the copyright owner as \"Not a Contribution.\"\n\n   \"Contributor\" shall mean Licensor and any individual or Legal Entity\n   on behalf of whom a Contribution has been received by Licensor and\n   subsequently incorporated within the Work.\n\n2. Grant of Copyright License. Subject to the terms and conditions of\n   this License, each Contributor hereby grants to You a perpetual,\n   worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n   copyright license to reproduce, prepare Derivative Works of,\n   publicly display, publicly perform, sublicense, and distribute the\n   Work and such Derivative Works in Source or Object form.\n\n3. Grant of Patent License. Subject to the terms and conditions of\n   this License, each Contributor hereby grants to You a perpetual,\n   worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n   (except as stated in this section) patent license to make, have made,\n   use, offer to sell, sell, import, and otherwise transfer the Work,\n   where such license applies only to those patent claims licensable\n   by such Contributor that are necessarily infringed by their\n   Contribution(s) alone or by combination of their Contribution(s)\n   with the Work to which such Contribution(s) was submitted. If You\n   institute patent litigation against any entity (including a\n   cross-claim or counterclaim in a lawsuit) alleging that the Work\n   or a Contribution incorporated within the Work constitutes direct\n   or contributory patent infringement, then any patent licenses\n   granted to You under this License for that Work shall terminate\n   as of the date such litigation is filed.\n\n4. Redistribution. You may reproduce and distribute copies of the\n   Work or Derivative Works thereof in any medium, with or without\n   modifications, and in Source or Object form, provided that You\n   meet the following conditions:\n\n   (a) You must give any other recipients of the Work or\n       Derivative Works a copy of this License; and\n\n   (b) You must cause any modified files to carry prominent notices\n       stating that You changed the files; and\n\n   (c) You must retain, in the Source form of any Derivative Works\n       that You distribute, all copyright, patent, trademark, and\n       attribution notices from the Source form of the Work,\n       excluding those notices that do not pertain to any part of\n       the Derivative Works; and\n\n   (d) If the Work includes a \"NOTICE\" text file as part of its\n       distribution, then any Derivative Works that You distribute must\n       include a readable copy of the attribution notices contained\n       within such NOTICE file, excluding those notices that do not\n       pertain to any part of the Derivative Works, in at least one\n       of the following places: within a NOTICE text file distributed\n       as part of the Derivative Works; within the Source form or\n       documentation, if provided along with the Derivative Works; or,\n       within a display generated by the Derivative Works, if and\n       wherever such third-party notices normally appear. The contents\n       of the NOTICE file are for informational purposes only and\n       do not modify the License. You may add Your own attribution\n       notices within Derivative Works that You distribute, alongside\n       or as an addendum to the NOTICE text from the Work, provided\n       that such additional attribution notices cannot be construed\n       as modifying the License.\n\n   You may add Your own copyright statement to Your modifications and\n   may provide additional or different license terms and conditions\n   for use, reproduction, or distribution of Your modifications, or\n   for any such Derivative Works as a whole, provided Your use,\n   reproduction, and distribution of the Work otherwise complies with\n   the conditions stated in this License.\n\n5. Submission of Contributions. Unless You explicitly state otherwise,\n   any Contribution intentionally submitted for inclusion in the Work\n   by You to the Licensor shall be under the terms and conditions of\n   this License, without any additional terms or conditions.\n   Notwithstanding the above, nothing herein shall supersede or modify\n   the terms of any separate license agreement you may have executed\n   with Licensor regarding such Contributions.\n\n6. Trademarks. This License does not grant permission to use the trade\n   names, trademarks, service marks, or product names of the Licensor,\n   except as required for reasonable and customary use in describing the\n   origin of the Work and reproducing the content of the NOTICE file.\n\n7. Disclaimer of Warranty. Unless required by applicable law or\n   agreed to in writing, Licensor provides the Work (and each\n   Contributor provides its Contributions) on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n   implied, including, without limitation, any warranties or conditions\n   of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n   PARTICULAR PURPOSE. You are solely responsible for determining the\n   appropriateness of using or redistributing the Work and assume any\n   risks associated with Your exercise of permissions under this License.\n\n8. Limitation of Liability. In no event and under no legal theory,\n   whether in tort (including negligence), contract, or otherwise,\n   unless required by applicable law (such as deliberate and grossly\n   negligent acts) or agreed to in writing, shall any Contributor be\n   liable to You for damages, including any direct, indirect, special,\n   incidental, or consequential damages of any character arising as a\n   result of this License or out of the use or inability to use the\n   Work (including but not limited to damages for loss of goodwill,\n   work stoppage, computer failure or malfunction, or any and all\n   other commercial damages or losses), even if such Contributor\n   has been advised of the possibility of such damages.\n\n9. Accepting Warranty or Additional Liability. While redistributing\n   the Work or Derivative Works thereof, You may choose to offer,\n   and charge a fee for, acceptance of support, warranty, indemnity,\n   or other liability obligations and/or rights consistent with this\n   License. However, in accepting such obligations, You may act only\n   on Your own behalf and on Your sole responsibility, not on behalf\n   of any other Contributor, and only if You agree to indemnify,\n   defend, and hold each Contributor harmless for any liability\n   incurred by, or claims asserted against, such Contributor by reason\n   of your accepting any such warranty or additional liability.\n\nEND OF TERMS AND CONDITIONS\n\nAPPENDIX: How to apply the Apache License to your work.\n\n   To apply the Apache License to your work, attach the following\n   boilerplate notice, with the fields enclosed by brackets \"[]\"\n   replaced with your own identifying information. (Don't include\n   the brackets!)  The text should be enclosed in the appropriate\n   comment syntax for the file format. We also recommend that a\n   file or class name and description of purpose be included on the\n   same \"printed page\" as the copyright notice for easier\n   identification within third-party archives.\n\nCopyright [yyyy] [name of copyright owner]\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n\thttp://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n"
        },
        {
          "name": "LICENSE-MIT",
          "type": "blob",
          "size": 1.0458984375,
          "content": "Copyright (c) 2016 The Rust Project Developers\n\nPermission is hereby granted, free of charge, to any\nperson obtaining a copy of this software and associated\ndocumentation files (the \"Software\"), to deal in the\nSoftware without restriction, including without\nlimitation the rights to use, copy, modify, merge,\npublish, distribute, sublicense, and/or sell copies of\nthe Software, and to permit persons to whom the Software\nis furnished to do so, subject to the following\nconditions:\n\nThe above copyright notice and this permission notice\nshall be included in all copies or substantial portions\nof the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF\nANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED\nTO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A\nPARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT\nSHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\nOF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR\nIN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\nDEALINGS IN THE SOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 6.7958984375,
          "content": "parking_lot\n============\n\n[![Rust](https://github.com/Amanieu/parking_lot/workflows/Rust/badge.svg)](https://github.com/Amanieu/parking_lot/actions)\n[![Crates.io](https://img.shields.io/crates/v/parking_lot.svg)](https://crates.io/crates/parking_lot)\n\n[Documentation (synchronization primitives)](https://docs.rs/parking_lot/)\n\n[Documentation (core parking lot API)](https://docs.rs/parking_lot_core/)\n\n[Documentation (type-safe lock API)](https://docs.rs/lock_api/)\n\nThis library provides implementations of `Mutex`, `RwLock`, `Condvar` and\n`Once` that are smaller, faster and more flexible than those in the Rust\nstandard library, as well as a `ReentrantMutex` type which supports recursive\nlocking. It also exposes a low-level API for creating your own efficient\nsynchronization primitives.\n\nWhen tested on x86_64 Linux, `parking_lot::Mutex` was found to be 1.5x\nfaster than `std::sync::Mutex` when uncontended, and up to 5x faster when\ncontended from multiple threads. The numbers for `RwLock` vary depending on\nthe number of reader and writer threads, but are almost always faster than\nthe standard library `RwLock`, and even up to 50x faster in some cases.\n\n## Features\n\nThe primitives provided by this library have several advantages over those\nin the Rust standard library:\n\n1. `Mutex` and `Once` only require 1 byte of storage space, while `Condvar`\n   and `RwLock` only require 1 word of storage space. On the other hand on\n   some platforms (macOS and a few others) the standard library primitives\n   require a dynamically allocated `Box` to hold OS-specific synchronization \n   primitives. The small size of `Mutex` in particular encourages the use\n   of fine-grained locks to increase parallelism.\n2. Uncontended lock acquisition and release is done through fast inline\n   paths which only require a single atomic operation.\n3. Microcontention (a contended lock with a short critical section) is\n   efficiently handled by spinning a few times while trying to acquire a\n   lock.\n4. The locks are adaptive and will suspend a thread after a few failed spin\n   attempts. This makes the locks suitable for both long and short critical\n   sections.\n5. `Condvar`, `RwLock` and `Once` work on Windows XP, unlike the standard\n   library versions of those types.\n6. `RwLock` takes advantage of hardware lock elision on processors that\n   support it, which can lead to huge performance wins with many readers.\n   This must be enabled with the `hardware-lock-elision` feature.\n7. `RwLock` uses a task-fair locking policy, which avoids reader and writer\n   starvation, whereas the standard library version makes no guarantees.\n8. `Condvar` is guaranteed not to produce spurious wakeups. A thread will\n    only be woken up if it timed out or it was woken up by a notification.\n9. `Condvar::notify_all` will only wake up a single thread and requeue the\n    rest to wait on the associated `Mutex`. This avoids a thundering herd\n    problem where all threads try to acquire the lock at the same time.\n10. `RwLock` supports atomically downgrading a write lock into a read lock.\n11. `Mutex` and `RwLock` allow raw unlocking without a RAII guard object.\n12. `Mutex<()>` and `RwLock<()>` allow raw locking without a RAII guard\n    object.\n13. `Mutex` and `RwLock` support [eventual fairness](https://trac.webkit.org/changeset/203350)\n    which allows them to be fair on average without sacrificing performance.\n14. A `ReentrantMutex` type which supports recursive locking.\n15. An *experimental* deadlock detector that works for `Mutex`,\n    `RwLock` and `ReentrantMutex`. This feature is disabled by default and\n    can be enabled via the `deadlock_detection` feature.\n16. `RwLock` supports atomically upgrading an \"upgradable\" read lock into a\n    write lock.\n17. Optional support for [serde](https://docs.serde.rs/serde/).  Enable via the\n    feature `serde`.  **NOTE!** this support is for `Mutex`, `ReentrantMutex`,\n    and `RwLock` only; `Condvar` and `Once` are not currently supported.\n18. Lock guards can be sent to other threads when the `send_guard` feature is\n    enabled.\n\n## The parking lot\n\nTo keep these primitives small, all thread queuing and suspending\nfunctionality is offloaded to the *parking lot*. The idea behind this is\nbased on the Webkit [`WTF::ParkingLot`](https://webkit.org/blog/6161/locking-in-webkit/)\nclass, which essentially consists of a hash table mapping of lock addresses\nto queues of parked (sleeping) threads. The Webkit parking lot was itself\ninspired by Linux [futexes](https://man7.org/linux/man-pages/man2/futex.2.html),\nbut it is more powerful since it allows invoking callbacks while holding a queue\nlock.\n\n## Nightly vs stable\n\nThere are a few restrictions when using this library on stable Rust:\n\n- The `wasm32-unknown-unknown` target is only fully supported on nightly with\n  `-C target-feature=+atomics` in `RUSTFLAGS` and `-Zbuild-std=panic_abort,std`\n  passed to cargo. parking_lot will work mostly fine on stable, the only\n  difference is it will panic instead of block forever if you hit a deadlock.\n  Just make sure not to enable `-C target-feature=+atomics` on stable as that\n  will allow wasm to run with multiple threads which will completely break\n  parking_lot's concurrency guarantees.\n\nTo enable nightly-only functionality, you need to enable the `nightly` feature\nin Cargo (see below).\n\n## Usage\n\nAdd this to your `Cargo.toml`:\n\n```toml\n[dependencies]\nparking_lot = \"0.12\"\n```\n\nTo enable nightly-only features, add this to your `Cargo.toml` instead:\n\n```toml\n[dependencies]\nparking_lot = { version = \"0.12\", features = [\"nightly\"] }\n```\n\nThe experimental deadlock detector can be enabled with the\n`deadlock_detection` Cargo feature.\n\nTo allow sending `MutexGuard`s and `RwLock*Guard`s to other threads, enable the\n`send_guard` option.\n\nNote that the `deadlock_detection` and `send_guard` features are incompatible\nand cannot be used together.\n\nHardware lock elision support for x86 can be enabled with the\n`hardware-lock-elision` feature. This requires Rust 1.59 due to the use of\ninline assembly.\n\nThe core parking lot API is provided by the `parking_lot_core` crate. It is\nseparate from the synchronization primitives in the `parking_lot` crate so that\nchanges to the core API do not cause breaking changes for users of `parking_lot`.\n\n## Minimum Rust version\n\nThe current minimum required Rust version is 1.56. Any change to this is\nconsidered a breaking change and will require a major version bump.\n\n## License\n\nLicensed under either of\n\n * Apache License, Version 2.0, ([LICENSE-APACHE](LICENSE-APACHE) or https://www.apache.org/licenses/LICENSE-2.0)\n * MIT license ([LICENSE-MIT](LICENSE-MIT) or https://opensource.org/licenses/MIT)\n\nat your option.\n\n### Contribution\n\nUnless you explicitly state otherwise, any contribution intentionally submitted\nfor inclusion in the work by you, as defined in the Apache-2.0 license, shall be dual licensed as above, without any\nadditional terms or conditions.\n"
        },
        {
          "name": "benchmark",
          "type": "tree",
          "content": null
        },
        {
          "name": "bors.toml",
          "type": "blob",
          "size": 0.0595703125,
          "content": "status = [\n  \"build_tier_one\", \n  \"build_other_platforms\",\n]\n"
        },
        {
          "name": "core",
          "type": "tree",
          "content": null
        },
        {
          "name": "lock_api",
          "type": "tree",
          "content": null
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}