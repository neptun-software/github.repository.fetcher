{
  "metadata": {
    "timestamp": 1736709048521,
    "page": 153,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjE2MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "ron-rs/ron",
      "stars": 3431,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.1591796875,
          "content": "# Compiled files\n*.o\n*.so\n*.rlib\n*.dll\n\n# Executables\n*.exe\n\n# Generated by Cargo\n/target/\n/Cargo.lock\n\n# VSCode Extensions\n/.trunk\n\n# MacOS Shenanigans\n.DS_Store\n"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 17.533203125,
          "content": "# Changelog\nAll notable changes to this project will be documented in this file.\n\nThe format is based on [Keep a Changelog](http://keepachangelog.com/en/1.0.0/)\nand this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0.html).\n\n## Unreleased\n\n## [0.9.0] - 2023-09-??\n\n### API Changes\n\n- Add `ron::value::RawValue` helper type which can (de)serialize any valid RON ([#407](https://github.com/ron-rs/ron/pull/407))\n- Add `escape_strings` option to `PrettyConfig` to allow serialising with or without escaping ([#426](https://github.com/ron-rs/ron/pull/426))\n- Add `compact_maps` and `compact_structs` options to `PrettyConfig` to allow serialising maps and structs on a single line ([#448](https://github.com/ron-rs/ron/pull/448))\n- Add minimal support for `#[serde(flatten)]` with roundtripping through RON maps ([#455](https://github.com/ron-rs/ron/pull/455))\n- Add minimal roundtripping support for `#[serde(tag = \"tag\")]`, `#[serde(tag = \"tag\", content = \"content\")]`, and `#[serde(untagged)]` enums ([#451](https://github.com/ron-rs/ron/pull/451))\n- Breaking: Expand the `value::Number` enum to explicitly encode all possible number types ([#479](https://github.com/ron-rs/ron/pull/479))\n- Add `number_suffixes` option to `PrettyConfig` to allow serialising numbers with their explicit type suffix, e.g. `42i32` ([#481](https://github.com/ron-rs/ron/pull/481))\n- Allow `ron::value::RawValue` to capture any whitespace to the left and right of a ron value ([#487](https://github.com/ron-rs/ron/pull/487))\n- Breaking: Enforce that ron always writes valid UTF-8 ([#488](https://github.com/ron-rs/ron/pull/488))\n- Add convenient `Value::from` impls ([#498](https://github.com/ron-rs/ron/pull/498))\n- Add new extension `explicit_struct_names` which requires that struct names are included during deserialization ([#522](https://github.com/ron-rs/ron/pull/522))\n- Add new path-based field metadata serialization support via `PrettyConfig` ([#544](https://github.com/ron-rs/ron/pull/544))\n- Breaking: Change `PrettyConfig` so that `new_line`, `indentor` and `separator` are all `Cow<'static, str>` instead of `String` ([#546](https://github.com/ron-rs/ron/pull/546))\n\n### Format Changes\n\n- [Non-API] Breaking: Treat `Some` like a newtype variant with `unwrap_variant_newtypes` ([#465](https://github.com/ron-rs/ron/pull/465))\n- Allow parsing floating point literals with underscores ([#481](https://github.com/ron-rs/ron/pull/481))\n- **Format-Breaking:** Switch from base64-encoded to Rusty byte strings, still allow base64 deserialising for now ([#438](https://github.com/ron-rs/ron/pull/438))\n- Fix issue [#241](https://github.com/ron-rs/ron/issues/241) and allow parsing numbers with explicit type suffixes, e.g. `1u8` or `-1f32` ([#481](https://github.com/ron-rs/ron/pull/481))\n- Add support for byte literals as strongly typed unsigned 8-bit integers ([#438](https://github.com/ron-rs/ron/pull/438))\n- Fix issue [#321](https://github.com/ron-rs/ron/issues/321) and allow parsing UTF-8 identifiers ([#488](https://github.com/ron-rs/ron/pull/488))\n\n### Bug Fixes\n\n- Fix parsing `r` as a self-describing struct or variant name (and not the start of a raw string) ([#465](https://github.com/ron-rs/ron/pull/465))\n- Fix serialising raw strings containing a literal backslash ([#465](https://github.com/ron-rs/ron/pull/465))\n- Fix serialising `None` inside a stack of nested `Option`s with `#![enable(implicit_some)]` enabled ([#465](https://github.com/ron-rs/ron/pull/465))\n- Fix deserialising deserialising `A('/')` into a `ron::Value` ([#465](https://github.com/ron-rs/ron/pull/465))\n- Fix issue [#445](https://github.com/ron-rs/ron/issues/445) and allow parsing `+unsigned` as an unsigned int ([#479](https://github.com/ron-rs/ron/pull/479))\n- Fix serialising reserved identifiers `true`, `false`, `Some`, `None`, `inf`[`f32`|`f64`], and `Nan`[`f32`|`f64`] ([#487](https://github.com/ron-rs/ron/pull/487))\n- Disallow unclosed line comments at the end of `ron::value::RawValue` ([#489](https://github.com/ron-rs/ron/pull/489))\n- Fix parsing of struct/variant names starting in `None`, `Some`, `true`, or `false` ([#499](https://github.com/ron-rs/ron/pull/499))\n- Fix deserialising owned string field names in structs, allowing deserializing into `serde_json::Value`s ([#511](https://github.com/ron-rs/ron/pull/512))\n\n### Miscellaneous\n\n- Add CIFuzz GitHub action ([#429](https://github.com/ron-rs/ron/pull/429))\n- Update the arbitrary fuzzer to check arbitrary serde data types, values, and `ron::ser::PrettyConfig`s ([#465](https://github.com/ron-rs/ron/pull/465))\n- Add a benchmark for PRs that runs over the latest fuzzer corpus ([#465](https://github.com/ron-rs/ron/pull/465))\n- Fuzz serde enum representation and flatten attributes and collect current limitations in ron and serde ([#502](https://github.com/ron-rs/ron/pull/502))\n- Update `base64` dependency to version 0.22 ([#529](https://github.com/ron-rs/ron/pull/529))\n\n## [0.8.1] - 2023-08-17\n\n- Fix issues [#277](https://github.com/ron-rs/ron/issues/277) and [#405](https://github.com/ron-rs/ron/issues/405) with `Value::Map` `IntoIter` and extraneous item check for `Value::Seq` ([#406](https://github.com/ron-rs/ron/pull/406))\n- Fix issue [#401](https://github.com/ron-rs/ron/issues/401) with correct raw struct name identifier parsing ([#402](https://github.com/ron-rs/ron/pull/402))\n- Fix issue [#410](https://github.com/ron-rs/ron/issues/410) trailing comma parsing in tuples and `Some` ([#412](https://github.com/ron-rs/ron/pull/412))\n- Error instead of panic when deserializing non-identifiers as field names ([#415](https://github.com/ron-rs/ron/pull/415))\n- [Non-API] Breaking: Fix issue [#307](https://github.com/ron-rs/ron/issues/307) stack overflow with explicit recursion limits in serialising and deserialising ([#420](https://github.com/ron-rs/ron/pull/420))\n- Fix issue [#423](https://github.com/ron-rs/ron/issues/423) deserialising an identifier into a borrowed str ([#424](https://github.com/ron-rs/ron/pull/424))\n- Bump MSRV to 1.57.0 and bump dependency: `base64` to 0.20 ([#431](https://github.com/ron-rs/ron/pull/431))\n- Bump dependency `base64` to 0.21 ([#433](https://github.com/ron-rs/ron/pull/433))\n- Depend on `serde_derive` directly to potentially enable more compilation parallelism ([#441](https://github.com/ron-rs/ron/pull/441))\n- [Non-API] Breaking: Bump `bitflags` dependency to 2.0, changes `serde` impls of `Extensions` ([#443](https://github.com/ron-rs/ron/pull/443))\n- Add `Map::retain` method ([#460](https://github.com/ron-rs/ron/pull/460))\n- Bump MSRV to 1.64.0 and bump dependency: `indexmap` to 2.0 ([#459](https://github.com/ron-rs/ron/pull/459))\n\n## [0.8.0] - 2022-08-17\n\n- Bump dependencies: `bitflags` to 1.3, `indexmap` to 1.9 ([#399](https://github.com/ron-rs/ron/pull/399))\n- Add `integer128` feature that guards `i128` and `u128` ([#304](https://github.com/ron-rs/ron/pull/304), [#351](https://github.com/ron-rs/ron/pull/351))\n- Fix issue [#265](https://github.com/ron-rs/ron/issues/265) with better missing comma error ([#353](https://github.com/ron-rs/ron/pull/353))\n- Fix issue [#301](https://github.com/ron-rs/ron/issues/301) with better error messages ([#354](https://github.com/ron-rs/ron/pull/354))\n- Fix issue [#337](https://github.com/ron-rs/ron/issues/337) by removing `decimal_floats` PrettyConfig option and unconditional decimals in floats ([#363](https://github.com/ron-rs/ron/pull/363))\n- Fix issue [#203](https://github.com/ron-rs/ron/issues/203) with full de error positioning ([#356](https://github.com/ron-rs/ron/pull/356))\n- Expand the `ron::Error` enum to distinguish `serde` errors like `NoSuchEnumVariant` and `MissingStructField` with error positioning ([#394](https://github.com/ron-rs/ron/pull/394))\n- Bump MSRV to 1.56.0 ([#396](https://github.com/ron-rs/ron/pull/396))\n\n## [0.7.1] - 2022-06-15\n\n- Add `struct_names` option to `PrettyConfig` ([#329](https://github.com/ron-rs/ron/pull/329))\n- Fix newtype variant unwrapping around enum, seq and map ([#331](https://github.com/ron-rs/ron/pull/331))\n- Implement `unwrap_newtypes` extension during serialization ([#333](https://github.com/ron-rs/ron/pull/333))\n- Implement `unwrap_variant_newtypes` extension during serialization ([#336](https://github.com/ron-rs/ron/pull/336))\n- Add `compact_arrays` ([#299](https://github.com/ron-rs/ron/pull/299)) and `separator` options to `PrettyConfig` ([#349](https://github.com/ron-rs/ron/pull/349))\n- Fix issue [#338](https://github.com/ron-rs/ron/issues/338) value map roundtrip ([#341](https://github.com/ron-rs/ron/pull/341))\n- Fix issue [#289](https://github.com/ron-rs/ron/issues/289) enumerate_arrays comments ([#344](https://github.com/ron-rs/ron/pull/344))\n- Report struct name in expected struct error ([#342](https://github.com/ron-rs/ron/pull/342))\n- Add `Options` builder to configure the RON serde roundtrip ([#343](https://github.com/ron-rs/ron/pull/343))\n- Fix issue [#367](https://github.com/ron-rs/ron/issues/367) with eager implicit some ([#368](https://github.com/ron-rs/ron/pull/368))\n- Fix issue [#359](https://github.com/ron-rs/ron/issues/359) with `DeserializeSeed` support ([#360](https://github.com/ron-rs/ron/pull/360))\n- Fix issue [#370](https://github.com/ron-rs/ron/issues/370) with `FromStr`-equivalent float EBNF and `Error::FloatUnderscore` ([#371](https://github.com/ron-rs/ron/pull/371))\n- Fix issue [#374](https://github.com/ron-rs/ron/issues/374) extraneous .0 for small floats ([#372](https://github.com/ron-rs/ron/pull/372))\n- Deprecate `Serializer::new` ([#382](https://github.com/ron-rs/ron/issues/382))\n\n## [0.7.0] - 2021-10-22\n\n- Add `unwrap_variant_newtypes` extension ([#319](https://github.com/ron-rs/ron/pull/319))\n- Change MSRV to 1.36\n\n## [0.6.6] - 2021-10-21\n\n- Fix serialization of raw identifiers ([#323](https://github.com/ron-rs/ron/pull/323))\n\n## [0.6.5] - 2021-09-09\n- support serde renames that start with a digit\n\n## [0.6.3] - 2020-12-18\n- bump `base64` dependency to 0.13\n\n## [0.6.2] - 2020-09-09\n\n- Added `decimal_floats` PrettyConfig option, which always includes decimals in floats (`1.0` vs `1`) ([#237](https://github.com/ron-rs/ron/pull/237))\n- Fixed EBNF grammar for raw strings ([#236](https://github.com/ron-rs/ron/pull/236), unsigned integers ([#248](https://github.com/ron-rs/ron/pull/248)), and nested comments ([#272](https://github.com/ron-rs/ron/pull/272))\n- Added `ser::to_writer_pretty` ([#269](https://github.com/ron-rs/ron/pull/269))\n- Sped up parsing using table predicates ([#276](https://github.com/ron-rs/ron/pull/276))\n\n## [0.6.1] - 2020-07-14\n\n### Fixes\n\n- Fix array formatting regression ([#260](https://github.com/ron-rs/ron/pull/260))\n\n## [0.6.0] - 2020-05-21\n\n### Additions\n- Implement integer support in Numbers ([#210](https://github.com/ron-rs/ron/pull/210))\n- Port `ser::Serializer` to `io::Write` ([#206](https://github.com/ron-rs/ron/pull/206))\n- Support i128 and u128 ([#219](https://github.com/ron-rs/ron/pull/219))\n- Allow pretty ser to work with implicit-some extension ([#182](https://github.com/ron-rs/ron/pull/182))\n- Make PrettyConfig future-proof ([#173](https://github.com/ron-rs/ron/pull/173))\n- Use indexmap to preserve order (optional) ([#172](https://github.com/ron-rs/ron/pull/172))\n- Add tests for different enum representations ([#166](https://github.com/ron-rs/ron/pull/166))\n- Implement inf, -inf and NaN handling ([#163](https://github.com/ron-rs/ron/pull/163))\n- Add VS code language tooling ([#160](https://github.com/ron-rs/ron/pull/160))\n- Be smarter about integer deserialization ([#157](https://github.com/ron-rs/ron/pull/157))\n\n### Fixes\n- Fix parsing of borrowed strings ([#228](https://github.com/ron-rs/ron/pull/228))\n- Fix depth limit test for off-by-one fix ([#225](https://github.com/ron-rs/ron/pull/225))\n- Remove deprecated uses of `Error::description` ([#208](https://github.com/ron-rs/ron/pull/208))\n- Preserve ordering of map sequences ([#197](https://github.com/ron-rs/ron/pull/197))\n- Remove unneeded Neg requirement for signed_integer ([#193](https://github.com/ron-rs/ron/pull/193))\n- Ensure \"Untagged tuple-like enum variants not deserializing correctly……\" is fixed ([#170](https://github.com/ron-rs/ron/pull/170))\n\n### Changes\n- Update `serde` requirement to 1.0.60 ([#226](https://github.com/ron-rs/ron/pull/226))\n- Replace Travis with GitHub actions ([#223](https://github.com/ron-rs/ron/pull/223))\n- Rename `format_doc_comments` to `format_code_in_doc_comment`\n- Update base64 requirement from 0.11 to 0.12 ([#204](https://github.com/ron-rs/ron/pull/204))\n- Update base64 requirement from 0.10 to 0.11 ([#195](https://github.com/ron-rs/ron/pull/195))\n- Update `serde_bytes` to 0.11 ([#164](https://github.com/ron-rs/ron/pull/164))\n\n## [0.5.1] - 2019-04-05\n### Fixes\n- Increase source compability from Rust `1.34.0` to `1.31.0` by not relying on `as _` imports ([#156](https://github.com/ron-rs/ron/pull/156))\n\n## [0.5.0] - 2019-03-31\n### Additions\n- Don't insert new lines in empty arrays or maps ([#150](https://github.com/ron-rs/ron/pull/150))\n### Changes\n- Transition to Rust 2018 ([#149](https://github.com/ron-rs/ron/pull/149))\n\n## [0.4.2] - 2019-03-01\n### Additions\n- Add integer check for deserializer ([#148](https://github.com/ron-rs/ron/pull/148))\n- Implement `Value::into_rust` ([#146](https://github.com/ron-rs/ron/pull/146))\n\n## [0.4.1] - 2019-01-09\n### Additions\n- Allow underscores in integers ([#135](https://github.com/ron-rs/ron/pull/135))\n- Added extension documentation ([#130](https://github.com/ron-rs/ron/pull/130))\n### Changes\n- Move sublime text syntax to separate repo ([#138](https://github.com/ron-rs/ron/pull/138))\n- Update `base64` crate dependency to 0.10 ([#137](https://github.com/ron-rs/ron/pull/137))\n\n## [0.4.0] - 2018-08-11\n### Fixes\n- Handle tuple deserialization in deserialize_any properly ([#124](https://github.com/ron-rs/ron/pull/124))\n### Changes\n- Add raw string syntax to grammar ([#125](https://github.com/ron-rs/ron/pull/125))\n- Reexport `Value` at root ([#120](https://github.com/ron-rs/ron/pull/120))\n\n## [0.3.0] - 2018-06-15\n### Additions\n- `serde_bytes` fields to be encoded using base64. ([#109](https://github.com/ron-rs/ron/pull/109))\n### Fixes\n- Allow raw string literals ([#114](https://github.com/ron-rs/ron/pull/114))\n### Changes\n- Now depends on `base64` 0.9.2.\n\n## [0.2.2] - 2018-05-19\n### Fixes\n- Allow whitespace in newtype variants ([#104](https://github.com/ron-rs/ron/pull/104))\n\n## [0.2.1] - 2018-05-04\n### Additions\n- Add multi-line comments ([#98](https://github.com/ron-rs/ron/pull/98))\n### Fixes\n- Allow more whitespace inside newtypes ([#103](https://github.com/ron-rs/ron/pull/103))\n\n## [0.2.0] - 2018-02-14\n### Additions\n- Limit the pretty depth ([#93](https://github.com/ron-rs/ron/pull/93))\n- Add support for `\\x??` and improve unicode escapes ([#84](https://github.com/ron-rs/ron/pull/84))\n\n## [0.1.7] - 2018-01-24\n### Additions\n- Deep array indexing ([#88](https://github.com/ron-rs/ron/pull/88))\n- Pretty sequence indexing ([#86](https://github.com/ron-rs/ron/pull/86))\n- Add unicode support for chars ([#80](https://github.com/ron-rs/ron/pull/80))\n- Add support for hex, oct and bin numbers ([#78](https://github.com/ron-rs/ron/pull/78))\n- Allow implicit Some ([#75](https://github.com/ron-rs/ron/pull/75))\n- Add grammar specification ([#73](https://github.com/ron-rs/ron/pull/73))\n- Add extension support and first extension, unwrap_newtypes ([#72](https://github.com/ron-rs/ron/pull/72))\n### Fixes\n- Directly serialize `f32` ([#81](https://github.com/ron-rs/ron/pull/81))\n\n## [0.1.6] - 2018-01-24\n### Additions\n- Implement sequence indexing ([#87](https://github.com/ron-rs/ron/pull/87))\n### Fixes\n- Remove ident variable from Sublime syntax ([#71](https://github.com/ron-rs/ron/pull/71))\n\n## [0.1.5] - 2017-12-27\n### Additions\n- Allow creating a new serializer ([#70](https://github.com/ron-rs/ron/pull/70))\n- Sublime syntax highlighter ([#67](https://github.com/ron-rs/ron/pull/67))\n- Add support for integers ([#65](https://github.com/ron-rs/ron/pull/65))\n- Implement `Deserializer` for `Value` ([#64](https://github.com/ron-rs/ron/pull/64))\n\n## [0.1.4] - 2017-10-12\n### Additions\n- Add `PrettyConfig` ([#61](https://github.com/ron-rs/ron/pull/61))\n- impl `deserialize_ignored_any` for `id` ([#60](https://github.com/ron-rs/ron/pull/60))\n### Fixes\n- Fix  deserializing of ignored fields ([#62](https://github.com/ron-rs/ron/pull/62))\n\n## [0.1.3] - 2017-10-06\n### Fixes\n- Removed indentation from tuple variant pretty encoder ([#57](https://github.com/ron-rs/ron/pull/57))\n\n## [0.1.2] - 2017-10-06\n### Fixes\n- Fix decoding of string literals ([#56](https://github.com/ron-rs/ron/pull/56))\n- Add `Value` and implement `deserialize_any` ([#53](https://github.com/ron-rs/ron/pull/53))\n\n## [0.1.1] - 2017-08-07\n### Fixes\n- Be more permissive wrt whitespace decoding ([#41](https://github.com/ron-rs/ron/pull/41))\n### Additions\n- Add utility function to deserialize from `std::io::Read` ([#42](https://github.com/ron-rs/ron/pull/42))\n\n## [0.1.0] - 2015-08-04\n### Changes\n- Reorganize deserialization modules ([#30](https://github.com/ron-rs/ron/pull/30))\n- Rework deserializer not to require `pom` crate [#27](https://github.com/ron-rs/ron/pull/27), ([#38](https://github.com/ron-rs/ron/pull/38))\n- Dual license under Apache 2.0 and MIT ([#26](https://github.com/ron-rs/ron/pull/26))\n### Fixes\n- Use CRLF for serializatio on Windows ([#32](https://github.com/ron-rs/ron/pull/32))\n- Fix bors-ng to work with travis ([#31](https://github.com/ron-rs/ron/pull/31))\n- Handle escapes ([#23](https://github.com/ron-rs/ron/pull/23))\n### Additions\n- Improve error reporting ([#29](https://github.com/ron-rs/ron/pull/29))\n- Allow decoding of comments ([#28](https://github.com/ron-rs/ron/pull/28))\n- Add `pretty` option to serializer ([#25](https://github.com/ron-rs/ron/pull/25))\n- Add roundtrip tests ([#24](https://github.com/ron-rs/ron/pull/24))\n\n## [0.0.1] - 2015-07-30\nInitial release\n"
        },
        {
          "name": "Cargo.toml",
          "type": "blob",
          "size": 1.271484375,
          "content": "[package]\nname = \"ron\"\n# Memo: update version in src/lib.rs too (doc link)\nversion = \"0.9.0-alpha.0\"\nlicense = \"MIT OR Apache-2.0\"\nkeywords = [\"parser\", \"serde\", \"serialization\"]\nauthors = [\n\t\"Christopher Durham <cad97@cad97.com>\",\n\t\"Dzmitry Malyshau <kvarkus@gmail.com>\",\n\t\"Thomas Schaller <torkleyy@gmail.com>\",\n\t\"Juniper Tyree <juniper.tyree@helsinki.fi>\",\n]\nedition = \"2021\"\ndescription = \"Rusty Object Notation\"\ncategories = [\"encoding\"]\nreadme = \"README.md\"\nhomepage = \"https://github.com/ron-rs/ron\"\nrepository = \"https://github.com/ron-rs/ron\"\ndocumentation = \"https://docs.rs/ron/\"\nrust-version = \"1.64.0\"\n\n[features]\ndefault = []\ninteger128 = []\n\n[dependencies]\n# FIXME @juntyr remove base64 once old byte strings are fully deprecated\nbase64 = \"0.22\"\nbitflags = { version = \"2.0\", features = [\"serde\"] }\nindexmap = { version = \"2.0\", features = [\"serde\"], optional = true }\n# serde supports i128/u128 from 1.0.60 onwards\nserde = \"1.0.60\"\nserde_derive = \"1.0\"\nunicode-ident = \"1.0\"\n\n[dev-dependencies]\nserde = { version = \"1.0\", features = [\"derive\"] }\nserde_bytes = \"0.11\"\nserde_json = \"1.0\"\noption_set = \"0.2\"\ntypetag = \"0.2\"\nbytes = { version = \"1.3\", features = [\"serde\"] }\n\n[package.metadata.docs.rs]\nfeatures = [\"integer128\", \"indexmap\"]\nrustdoc-args = [\"--generate-link-to-definition\"]\n"
        },
        {
          "name": "LICENSE-APACHE",
          "type": "blob",
          "size": 10.5927734375,
          "content": "                              Apache License\n                        Version 2.0, January 2004\n                     http://www.apache.org/licenses/\n\nTERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n1. Definitions.\n\n   \"License\" shall mean the terms and conditions for use, reproduction,\n   and distribution as defined by Sections 1 through 9 of this document.\n\n   \"Licensor\" shall mean the copyright owner or entity authorized by\n   the copyright owner that is granting the License.\n\n   \"Legal Entity\" shall mean the union of the acting entity and all\n   other entities that control, are controlled by, or are under common\n   control with that entity. For the purposes of this definition,\n   \"control\" means (i) the power, direct or indirect, to cause the\n   direction or management of such entity, whether by contract or\n   otherwise, or (ii) ownership of fifty percent (50%) or more of the\n   outstanding shares, or (iii) beneficial ownership of such entity.\n\n   \"You\" (or \"Your\") shall mean an individual or Legal Entity\n   exercising permissions granted by this License.\n\n   \"Source\" form shall mean the preferred form for making modifications,\n   including but not limited to software source code, documentation\n   source, and configuration files.\n\n   \"Object\" form shall mean any form resulting from mechanical\n   transformation or translation of a Source form, including but\n   not limited to compiled object code, generated documentation,\n   and conversions to other media types.\n\n   \"Work\" shall mean the work of authorship, whether in Source or\n   Object form, made available under the License, as indicated by a\n   copyright notice that is included in or attached to the work\n   (an example is provided in the Appendix below).\n\n   \"Derivative Works\" shall mean any work, whether in Source or Object\n   form, that is based on (or derived from) the Work and for which the\n   editorial revisions, annotations, elaborations, or other modifications\n   represent, as a whole, an original work of authorship. For the purposes\n   of this License, Derivative Works shall not include works that remain\n   separable from, or merely link (or bind by name) to the interfaces of,\n   the Work and Derivative Works thereof.\n\n   \"Contribution\" shall mean any work of authorship, including\n   the original version of the Work and any modifications or additions\n   to that Work or Derivative Works thereof, that is intentionally\n   submitted to Licensor for inclusion in the Work by the copyright owner\n   or by an individual or Legal Entity authorized to submit on behalf of\n   the copyright owner. For the purposes of this definition, \"submitted\"\n   means any form of electronic, verbal, or written communication sent\n   to the Licensor or its representatives, including but not limited to\n   communication on electronic mailing lists, source code control systems,\n   and issue tracking systems that are managed by, or on behalf of, the\n   Licensor for the purpose of discussing and improving the Work, but\n   excluding communication that is conspicuously marked or otherwise\n   designated in writing by the copyright owner as \"Not a Contribution.\"\n\n   \"Contributor\" shall mean Licensor and any individual or Legal Entity\n   on behalf of whom a Contribution has been received by Licensor and\n   subsequently incorporated within the Work.\n\n2. Grant of Copyright License. Subject to the terms and conditions of\n   this License, each Contributor hereby grants to You a perpetual,\n   worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n   copyright license to reproduce, prepare Derivative Works of,\n   publicly display, publicly perform, sublicense, and distribute the\n   Work and such Derivative Works in Source or Object form.\n\n3. Grant of Patent License. Subject to the terms and conditions of\n   this License, each Contributor hereby grants to You a perpetual,\n   worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n   (except as stated in this section) patent license to make, have made,\n   use, offer to sell, sell, import, and otherwise transfer the Work,\n   where such license applies only to those patent claims licensable\n   by such Contributor that are necessarily infringed by their\n   Contribution(s) alone or by combination of their Contribution(s)\n   with the Work to which such Contribution(s) was submitted. If You\n   institute patent litigation against any entity (including a\n   cross-claim or counterclaim in a lawsuit) alleging that the Work\n   or a Contribution incorporated within the Work constitutes direct\n   or contributory patent infringement, then any patent licenses\n   granted to You under this License for that Work shall terminate\n   as of the date such litigation is filed.\n\n4. Redistribution. You may reproduce and distribute copies of the\n   Work or Derivative Works thereof in any medium, with or without\n   modifications, and in Source or Object form, provided that You\n   meet the following conditions:\n\n   (a) You must give any other recipients of the Work or\n       Derivative Works a copy of this License; and\n\n   (b) You must cause any modified files to carry prominent notices\n       stating that You changed the files; and\n\n   (c) You must retain, in the Source form of any Derivative Works\n       that You distribute, all copyright, patent, trademark, and\n       attribution notices from the Source form of the Work,\n       excluding those notices that do not pertain to any part of\n       the Derivative Works; and\n\n   (d) If the Work includes a \"NOTICE\" text file as part of its\n       distribution, then any Derivative Works that You distribute must\n       include a readable copy of the attribution notices contained\n       within such NOTICE file, excluding those notices that do not\n       pertain to any part of the Derivative Works, in at least one\n       of the following places: within a NOTICE text file distributed\n       as part of the Derivative Works; within the Source form or\n       documentation, if provided along with the Derivative Works; or,\n       within a display generated by the Derivative Works, if and\n       wherever such third-party notices normally appear. The contents\n       of the NOTICE file are for informational purposes only and\n       do not modify the License. You may add Your own attribution\n       notices within Derivative Works that You distribute, alongside\n       or as an addendum to the NOTICE text from the Work, provided\n       that such additional attribution notices cannot be construed\n       as modifying the License.\n\n   You may add Your own copyright statement to Your modifications and\n   may provide additional or different license terms and conditions\n   for use, reproduction, or distribution of Your modifications, or\n   for any such Derivative Works as a whole, provided Your use,\n   reproduction, and distribution of the Work otherwise complies with\n   the conditions stated in this License.\n\n5. Submission of Contributions. Unless You explicitly state otherwise,\n   any Contribution intentionally submitted for inclusion in the Work\n   by You to the Licensor shall be under the terms and conditions of\n   this License, without any additional terms or conditions.\n   Notwithstanding the above, nothing herein shall supersede or modify\n   the terms of any separate license agreement you may have executed\n   with Licensor regarding such Contributions.\n\n6. Trademarks. This License does not grant permission to use the trade\n   names, trademarks, service marks, or product names of the Licensor,\n   except as required for reasonable and customary use in describing the\n   origin of the Work and reproducing the content of the NOTICE file.\n\n7. Disclaimer of Warranty. Unless required by applicable law or\n   agreed to in writing, Licensor provides the Work (and each\n   Contributor provides its Contributions) on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n   implied, including, without limitation, any warranties or conditions\n   of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n   PARTICULAR PURPOSE. You are solely responsible for determining the\n   appropriateness of using or redistributing the Work and assume any\n   risks associated with Your exercise of permissions under this License.\n\n8. Limitation of Liability. In no event and under no legal theory,\n   whether in tort (including negligence), contract, or otherwise,\n   unless required by applicable law (such as deliberate and grossly\n   negligent acts) or agreed to in writing, shall any Contributor be\n   liable to You for damages, including any direct, indirect, special,\n   incidental, or consequential damages of any character arising as a\n   result of this License or out of the use or inability to use the\n   Work (including but not limited to damages for loss of goodwill,\n   work stoppage, computer failure or malfunction, or any and all\n   other commercial damages or losses), even if such Contributor\n   has been advised of the possibility of such damages.\n\n9. Accepting Warranty or Additional Liability. While redistributing\n   the Work or Derivative Works thereof, You may choose to offer,\n   and charge a fee for, acceptance of support, warranty, indemnity,\n   or other liability obligations and/or rights consistent with this\n   License. However, in accepting such obligations, You may act only\n   on Your own behalf and on Your sole responsibility, not on behalf\n   of any other Contributor, and only if You agree to indemnify,\n   defend, and hold each Contributor harmless for any liability\n   incurred by, or claims asserted against, such Contributor by reason\n   of your accepting any such warranty or additional liability.\n\nEND OF TERMS AND CONDITIONS\n\nAPPENDIX: How to apply the Apache License to your work.\n\n   To apply the Apache License to your work, attach the following\n   boilerplate notice, with the fields enclosed by brackets \"[]\"\n   replaced with your own identifying information. (Don't include\n   the brackets!)  The text should be enclosed in the appropriate\n   comment syntax for the file format. We also recommend that a\n   file or class name and description of purpose be included on the\n   same \"printed page\" as the copyright notice for easier\n   identification within third-party archives.\n\nCopyright [yyyy] [name of copyright owner]\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n\thttp://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n"
        },
        {
          "name": "LICENSE-MIT",
          "type": "blob",
          "size": 1.033203125,
          "content": "Copyright (c) 2017 RON developers\n\nPermission is hereby granted, free of charge, to any\nperson obtaining a copy of this software and associated\ndocumentation files (the \"Software\"), to deal in the\nSoftware without restriction, including without\nlimitation the rights to use, copy, modify, merge,\npublish, distribute, sublicense, and/or sell copies of\nthe Software, and to permit persons to whom the Software\nis furnished to do so, subject to the following\nconditions:\n\nThe above copyright notice and this permission notice\nshall be included in all copies or substantial portions\nof the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF\nANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED\nTO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A\nPARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT\nSHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\nOF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR\nIN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\nDEALINGS IN THE SOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 10.3125,
          "content": "# Rusty Object Notation\n\n[![MSRV](https://img.shields.io/badge/MSRV-1.64.0-orange)](https://github.com/ron-rs/ron)\n[![Crates.io](https://img.shields.io/crates/v/ron.svg)](https://crates.io/crates/ron)\n[![Docs](https://docs.rs/ron/badge.svg)](https://docs.rs/ron)\n\n[![CI](https://github.com/ron-rs/ron/actions/workflows/ci.yaml/badge.svg)](https://github.com/ron-rs/ron/actions/workflows/ci.yaml)\n[![Coverage](https://img.shields.io/endpoint?url=https%3A%2F%2Fron-rs.github.io%2Fron%2Fcoverage%2Fcoverage.json)](https://ron-rs.github.io/ron/coverage/)\n[![Fuzzing](https://oss-fuzz-build-logs.storage.googleapis.com/badges/ron.svg)](https://bugs.chromium.org/p/oss-fuzz/issues/list?sort=-opened&can=1&q=proj:ron)\n\n[![Matrix](https://img.shields.io/matrix/ron-rs:matrix.org.svg)](https://matrix.to/#/#ron-rs:matrix.org)\n\nRON is a simple readable data serialization format that looks similar to Rust syntax.\nIt's designed to support all of [Serde's data model](https://serde.rs/data-model.html), so\nstructs, enums, tuples, arrays, generic maps, and primitive values.\n\n## Example\n\n```ron\nGameConfig( // optional struct name\n    window_size: (800, 600),\n    window_title: \"PAC-MAN\",\n    fullscreen: false,\n\n    mouse_sensitivity: 1.4,\n    key_bindings: {\n        \"up\": Up,\n        \"down\": Down,\n        \"left\": Left,\n        \"right\": Right,\n\n        // Uncomment to enable WASD controls\n        /*\n        \"W\": Up,\n        \"S\": Down,\n        \"A\": Left,\n        \"D\": Right,\n        */\n    },\n\n    difficulty_options: (\n        start_difficulty: Easy,\n        adaptive: false,\n    ),\n)\n```\n\n## RON syntax overview\n\n* Numbers: `42`, `3.14`, `0xFF`, `0b0110`\n* Strings: `\"Hello\"`, `\"with\\\\escapes\\n\"`, `r#\"raw string, great for regex\\.\"#`\n* Byte Strings: `b\"Hello\"`, `b\"with \\x65\\x73\\x63\\x61\\x70\\x65\\x73\\n\"`, `br#\"raw, too\"#`\n* Booleans: `true`, `false`\n* Chars: `'e'`, `'\\n'`\n* Optionals: `Some(\"string\")`, `Some(Some(1.34))`, `None`\n* Tuples: `(\"abc\", 1.23, true)`, `()`\n* Lists: `[\"abc\", \"def\"]`\n* Structs: `( foo: 1.0, bar: ( baz: \"I'm nested\" ) )`\n* Maps: `{ \"arbitrary\": \"keys\", \"are\": \"allowed\" }`\n\n> **Note:** Serde's data model represents fixed-size Rust arrays as tuple (instead of as list)\n\nRON also supports several extensions, which are documented [here](docs/extensions.md).\n\n## Specification\n\nRON's formal and complete grammar is available [here](docs/grammar.md).\n\nThere also is a very basic, work in progress specification available on\n[the wiki page](https://github.com/ron-rs/ron/wiki/Specification).\n\n## Why RON?\n\n### Example in JSON\n\n```json\n{\n   \"materials\": {\n        \"metal\": {\n            \"reflectivity\": 1.0\n        },\n        \"plastic\": {\n            \"reflectivity\": 0.5\n        }\n   },\n   \"entities\": [\n        {\n            \"name\": \"hero\",\n            \"material\": \"metal\"\n        },\n        {\n            \"name\": \"monster\",\n            \"material\": \"plastic\"\n        }\n   ]\n}\n```\n\n### Same example in RON\n\n```ron\nScene( // class name is optional\n    materials: { // this is a map\n        \"metal\": (\n            reflectivity: 1.0,\n        ),\n        \"plastic\": (\n            reflectivity: 0.5,\n        ),\n    },\n    entities: [ // this is an array\n        (\n            name: \"hero\",\n            material: \"metal\",\n        ),\n        (\n            name: \"monster\",\n            material: \"plastic\",\n        ),\n    ],\n)\n```\n\nNote the following advantages of RON over JSON:\n\n* trailing commas allowed\n* single- and multi-line comments\n* field names aren't quoted, so it's less verbose\n* optional struct names improve readability\n* enums are supported (and less verbose than their JSON representation)\n\n## Quickstart\n\n### `Cargo.toml`\n\n```toml\n[dependencies]\nron = \"0.8\"\nserde = { version = \"1\", features = [\"derive\"] }\n```\n\n### `main.rs`\n\n```rust\nuse serde::{Deserialize, Serialize};\n\n#[derive(Debug, Deserialize, Serialize)]\nstruct MyStruct {\n    boolean: bool,\n    float: f32,\n}\n\nfn main() {\n    let x: MyStruct = ron::from_str(\"(boolean: true, float: 1.23)\").unwrap();\n\n    println!(\"RON: {}\", ron::to_string(&x).unwrap());\n\n    println!(\"Pretty RON: {}\", ron::ser::to_string_pretty(\n        &x, ron::ser::PrettyConfig::default()).unwrap(),\n    );\n}\n```\n\n## Tooling\n\n| Editor       | Plugin                                                      |\n| ------------ | ----------------------------------------------------------- |\n| IntelliJ     | [intellij-ron](https://github.com/ron-rs/intellij-ron)      |\n| VS Code      | [a5huynh/vscode-ron](https://github.com/a5huynh/vscode-ron) |\n| Sublime Text | [RON](https://packagecontrol.io/packages/RON)               |\n| Atom         | [language-ron](https://atom.io/packages/language-ron)       |\n| Vim          | [ron-rs/ron.vim](https://github.com/ron-rs/ron.vim)         |\n| EMACS        | [emacs-ron]                                                 |\n\n[emacs-ron]: https://chiselapp.com/user/Hutzdog/repository/ron-mode/home\n\n## Limitations\n\nRON is not designed to be a fully self-describing format (unlike JSON) and is thus not guaranteed to work when [`deserialize_any`](https://docs.rs/serde/latest/serde/trait.Deserializer.html#tymethod.deserialize_any) is used instead of its typed alternatives. In particular, the following Serde attributes only have limited support:\n\n- `#[serde(tag = \"tag\")]`, i.e. internally tagged enums [^serde-enum-hack]\n- `#[serde(tag = \"tag\", content = \"content\")]`, i.e. adjacently tagged enums [^serde-enum-hack]\n- `#[serde(untagged)]`, i.e. untagged enums [^serde-enum-hack]\n- `#[serde(flatten)]`, i.e. flattening of structs into maps [^serde-flatten-hack]\n\nWhile data structures with any of these attributes should generally roundtrip through RON, some restrictions apply [^serde-restrictions] and their textual representation may not always match your expectation:\n\n- ron only supports string keys inside maps flattened into structs\n- internally (or adjacently) tagged or untagged enum variants or `#[serde(flatten)]`ed fields must not contain:\n  - struct names, e.g. by enabling the `#[enable(explicit_struct_names)]` extension or the `PrettyConfig::struct_names` setting\n  - newtypes\n  - zero-length arrays / tuples / tuple structs / structs / tuple variants / struct variants\n    - `Option`s with `#[enable(implicit_some)]` must not contain any of these or a unit, unit struct, or an untagged unit variant\n  - externally tagged tuple variants with just one field (that are not newtype variants)\n  - tuples or arrays or tuple structs with just one element are not supported inside newtype variants with `#[enable(unwrap_variant_newtypes)]` (including `Some`)\n  - a `ron::value::RawValue`\n- untagged tuple / struct variants with no fields are not supported\n- untagged tuple variants with just one field (that are not newtype variants) are not supported when the `#![enable(unwrap_variant_newtypes)]` extension is enabled\n- serializing a `ron::value::RawValue` using a `PrettyConfig` may add leading and trailing whitespace and comments, which the `ron::value::RawValue` absorbs upon deserialization\n\nFurthermore, serde imposes the following restrictions for data to roundtrip:\n\n- structs or struct variants that contain a `#[serde(flatten)]`ed field:\n  - are only serialised as maps and deserialised from maps\n  - must not contain duplicate fields / keys, e.g. where an inner-struct field matches an outer-struct or inner-struct field\n  - must not contain more than one (within the super-struct of all flattened structs) `#[serde(flatten)]`ed map field, which collects all unknown fields\n  - if they contain a `#[serde(flatten)]`ed map, they must not contain:\n    - a struct that is not flattened itself but contains some flattened fields and is flattened into the outer struct (variant)\n    - an untagged struct variant that contains some flattened fields\n    - a flattened externally tagged newtype, tuple, or struct variant, flattened internally tagged unit, newtype, or struct variant, or any flattened adjacently tagged variant\n    - a flattened tagged struct\n- internally (or adjacently) tagged or untagged enum variants or `#[serde(flatten)]`ed fields must not contain:\n  - `i128` or `u128` values\n- internally tagged newtype variants and `#[serde(flatten)]`ed fields must not contain:\n  - a unit or a unit struct inside an untagged newtype variant\n  - an untagged unit variant\n- internally tagged newtype variants, which are `#[serde(flatten)]`ed together with other fields, must not contain:\n  - a unit or unit struct or an untagged unit variant\n\nPlease file a [new issue](https://github.com/ron-rs/ron/issues/new) if you come across a use case which is not listed among the above restrictions but still breaks.\n\nWhile RON guarantees roundtrips like Rust -> RON -> Rust for Rust types using non-`deserialize_any`-based implementations, RON does not yet make any guarantees about roundtrips through `ron::Value`. For instance, even when RON -> Rust works, RON -> `ron::Value` -> Rust, or RON -> `ron::Value` -> RON -> Rust may not work. We plan on improving `ron::Value` in an upcoming version of RON, though this work is partially blocked on [serde#1183](https://github.com/serde-rs/serde/issues/1183).\n\n[^serde-enum-hack]: Deserialising an internally, adjacently, or un-tagged enum requires detecting `serde`'s internal `serde::__private::de::content::Content` content type so that RON can describe the deserialised data structure in serde's internal JSON-like format. This detection only works for the automatically-derived [`Deserialize`](https://docs.rs/serde/latest/serde/de/trait.Deserialize.html) impls on enums. See [#451](https://github.com/ron-rs/ron/pull/451) for more details.\n\n[^serde-flatten-hack]: Deserialising a flattened struct from a map requires that the struct's [`Visitor::expecting`](https://docs.rs/serde/latest/serde/de/trait.Visitor.html#tymethod.expecting) implementation formats a string starting with `\"struct \"`. This is the case for automatically-derived [`Deserialize`](https://docs.rs/serde/latest/serde/de/trait.Deserialize.html) impls on structs. See [#455](https://github.com/ron-rs/ron/pull/455) for more details.\n\n[^serde-restrictions]: Most of these restrictions are currently blocked on [serde#1183](https://github.com/serde-rs/serde/issues/1183), which limits non-self-describing formats from roundtripping format-specific information through internally (or adjacently) tagged or untagged enums or `#[serde(flatten)]`ed fields.\n\n## License\n\nRON is dual-licensed under Apache-2.0 and MIT.\n\nAny contribution intentionally submitted for inclusion in the work must be provided under the same dual-license terms.\n"
        },
        {
          "name": "clippy.toml",
          "type": "blob",
          "size": 0.015625,
          "content": "msrv = \"1.64.0\"\n"
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "fuzz",
          "type": "tree",
          "content": null
        },
        {
          "name": "rustfmt.toml",
          "type": "blob",
          "size": 0.08984375,
          "content": "hard_tabs = false\nuse_field_init_shorthand = true\nuse_try_shorthand = true\nedition = \"2021\"\n"
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}