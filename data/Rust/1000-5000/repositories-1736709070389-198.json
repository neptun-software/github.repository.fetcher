{
  "metadata": {
    "timestamp": 1736709070389,
    "page": 198,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjIwMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "artichoke/artichoke",
      "stars": 3069,
      "defaultBranch": "trunk",
      "files": [
        {
          "name": ".clang-format",
          "type": "blob",
          "size": 0.212890625,
          "content": "---\nBasedOnStyle: Google\nIndentWidth: 2\nColumnLimit: 100\n---\nLanguage: Cpp\nPointerAlignment: Right\nAlwaysBreakAfterReturnType: TopLevelDefinitions\nBreakBeforeBraces: Linux\nUseTab: Never\nTabWidth: 2\nSortIncludes: false\n"
        },
        {
          "name": ".clang-format-ignore",
          "type": "blob",
          "size": 0.04296875,
          "content": ".git\nbuild\nemsdk\nnode_modules\ntarget\nvendor\n"
        },
        {
          "name": ".config",
          "type": "tree",
          "content": null
        },
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 1.0458984375,
          "content": "# EditorConfig helps developers define and maintain consistent\n# coding styles between different editors and IDEs\n# editorconfig.org\n\nroot = true\n\n[*]\ncharset = utf-8\nend_of_line = lf\ninsert_final_newline = true\nindent_style = space\ntrim_trailing_whitespace = true\n\n[*.rs]\nindent_size = 4\n\n[*.{rb,erb}]\nindent_size = 2\n\n[*.{md,markdown}]\ntrim_trailing_whitespace = false\n\n[*.sh]\nend_of_line = lf\nindent_size = 2\n\n[*.{h,c,cc,cpp}]\nindent_size = 2\n\n[Makefile]\nindent_style = tab\nindent_size = 8\n\n[*.make]\nindent_style = tab\nindent_size = 8\n\n[*.diff]\ntrim_trailing_whitespace = false\n\n[*.json]\nindent_size = 2\n\n[*.{js,jsx}]\nindent_size = 2\n\n[*.{ts,tsx}]\nindent_size = 2\n\n[*.{htm,html}]\nindent_size = 2\n\n[*.{css,sass,scss,less}]\nindent_size = 2\n\n[*.svg]\nindent_size = 2\n\n[*.toml]\nindent_size = 2\n\n[*.xml]\nindent_size = 2\n\n[*.{yml,yaml}]\nindent_size = 2\n\n[Dockerfile]\nindent_size = 4\n\n# Ignore paths\n[**/{node_modules,target,vendor}/**]\ncharset = unset\nend_of_line = unset\ninsert_final_newline = unset\nindent_size = unset\nindent_style = unset\ntrim_trailing_whitespace = unset\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 10.158203125,
          "content": "# Created by https://www.toptal.com/developers/gitignore/api/c,vim,rust,ruby,visualstudio,visualstudiocode\n# Edit at https://www.toptal.com/developers/gitignore?templates=c,vim,rust,ruby,visualstudio,visualstudiocode\n\n### C ###\n# Prerequisites\n*.d\n\n# Object files\n*.o\n*.ko\n*.obj\n*.elf\n\n# Linker output\n*.ilk\n*.map\n*.exp\n\n# Precompiled Headers\n*.gch\n*.pch\n\n# Libraries\n*.lib\n*.a\n*.la\n*.lo\n\n# Shared objects (inc. Windows DLLs)\n*.dll\n*.so\n*.so.*\n*.dylib\n\n# Executables\n*.exe\n*.out\n*.app\n*.i*86\n*.x86_64\n*.hex\n\n# Debug files\n*.dSYM/\n*.su\n*.idb\n*.pdb\n\n# Kernel Module Compile Results\n*.mod*\n*.cmd\n.tmp_versions/\nmodules.order\nModule.symvers\nMkfile.old\ndkms.conf\n\n### Ruby ###\n*.gem\n*.rbc\n/.config\n/coverage/\n/InstalledFiles\n/pkg/\n/spec/reports/\n/spec/examples.txt\n/test/tmp/\n/test/version_tmp/\n/tmp/\n\n# Used by dotenv library to load environment variables.\n# .env\n\n# Ignore Byebug command history file.\n.byebug_history\n\n## Specific to RubyMotion:\n.dat*\n.repl_history\nbuild/\n*.bridgesupport\nbuild-iPhoneOS/\nbuild-iPhoneSimulator/\n\n## Specific to RubyMotion (use of CocoaPods):\n#\n# We recommend against adding the Pods directory to your .gitignore. However\n# you should judge for yourself, the pros and cons are mentioned at:\n# https://guides.cocoapods.org/using/using-cocoapods.html#should-i-check-the-pods-directory-into-source-control\n# vendor/Pods/\n\n## Documentation cache and generated files:\n/.yardoc/\n/_yardoc/\n/doc/\n/rdoc/\n\n## Environment normalization:\n/.bundle/\n/vendor/bundle\n/lib/bundler/man/\n\n# for a library or gem, you might want to ignore these files since the code is\n# intended to run in multiple environments; otherwise, check them in:\n# Gemfile.lock\n# .ruby-version\n# .ruby-gemset\n\n# unless supporting rvm < 1.11.0 or doing something fancy, ignore this:\n.rvmrc\n\n# Used by RuboCop. Remote config files pulled in from inherit_from directive.\n# .rubocop-https?--*\n\n### Rust ###\n# Generated by Cargo\n# will have compiled files and executables\ndebug/\ntarget/\n\n# Remove Cargo.lock from gitignore if creating an executable, leave it for libraries\n# More information here https://doc.rust-lang.org/cargo/guide/cargo-toml-vs-cargo-lock.html\nCargo.lock\n\n# These are backup files generated by rustfmt\n**/*.rs.bk\n\n# MSVC Windows builds of rustc generate these, which store debugging information\n\n### Vim ###\n# Swap\n[._]*.s[a-v][a-z]\n!*.svg  # comment out if you don't need vector files\n[._]*.sw[a-p]\n[._]s[a-rt-v][a-z]\n[._]ss[a-gi-z]\n[._]sw[a-p]\n\n# Session\nSession.vim\nSessionx.vim\n\n# Temporary\n.netrwhist\n*~\n# Auto-generated tag files\ntags\n# Persistent undo\n[._]*.un~\n\n### VisualStudioCode ###\n.vscode/*\n!.vscode/settings.json\n!.vscode/tasks.json\n!.vscode/launch.json\n!.vscode/extensions.json\n!.vscode/*.code-snippets\n\n# Local History for Visual Studio Code\n.history/\n\n# Built Visual Studio Code Extensions\n*.vsix\n\n### VisualStudioCode Patch ###\n# Ignore all local history of files\n.history\n.ionide\n\n# Support for Project snippet scope\n.vscode/*.code-snippets\n\n# Ignore code-workspaces\n*.code-workspace\n\n### VisualStudio ###\n## Ignore Visual Studio temporary files, build results, and\n## files generated by popular Visual Studio add-ons.\n##\n## Get latest from https://github.com/github/gitignore/blob/main/VisualStudio.gitignore\n\n# User-specific files\n*.rsuser\n*.suo\n*.user\n*.userosscache\n*.sln.docstates\n\n# User-specific files (MonoDevelop/Xamarin Studio)\n*.userprefs\n\n# Mono auto generated files\nmono_crash.*\n\n# Build results\n[Dd]ebug/\n[Dd]ebugPublic/\n[Rr]elease/\n[Rr]eleases/\nx64/\nx86/\n[Ww][Ii][Nn]32/\n[Aa][Rr][Mm]/\n[Aa][Rr][Mm]64/\nbld/\n[Bb]in/\n[Oo]bj/\n[Ll]og/\n[Ll]ogs/\n\n# Visual Studio 2015/2017 cache/options directory\n.vs/\n# Uncomment if you have tasks that create the project's static files in wwwroot\n#wwwroot/\n\n# Visual Studio 2017 auto generated files\nGenerated\\ Files/\n\n# MSTest test Results\n[Tt]est[Rr]esult*/\n[Bb]uild[Ll]og.*\n\n# NUnit\n*.VisualState.xml\nTestResult.xml\nnunit-*.xml\n\n# Build Results of an ATL Project\n[Dd]ebugPS/\n[Rr]eleasePS/\ndlldata.c\n\n# Benchmark Results\nBenchmarkDotNet.Artifacts/\n\n# .NET Core\nproject.lock.json\nproject.fragment.lock.json\nartifacts/\n\n# ASP.NET Scaffolding\nScaffoldingReadMe.txt\n\n# StyleCop\nStyleCopReport.xml\n\n# Files built by Visual Studio\n*_i.c\n*_p.c\n*_h.h\n*.meta\n*.iobj\n*.ipdb\n*.pgc\n*.pgd\n*.rsp\n*.sbr\n*.tlb\n*.tli\n*.tlh\n*.tmp\n*.tmp_proj\n*_wpftmp.csproj\n*.log\n*.tlog\n*.vspscc\n*.vssscc\n.builds\n*.pidb\n*.svclog\n*.scc\n\n# Chutzpah Test files\n_Chutzpah*\n\n# Visual C++ cache files\nipch/\n*.aps\n*.ncb\n*.opendb\n*.opensdf\n*.sdf\n*.cachefile\n*.VC.db\n*.VC.VC.opendb\n\n# Visual Studio profiler\n*.psess\n*.vsp\n*.vspx\n*.sap\n\n# Visual Studio Trace Files\n*.e2e\n\n# TFS 2012 Local Workspace\n$tf/\n\n# Guidance Automation Toolkit\n*.gpState\n\n# ReSharper is a .NET coding add-in\n_ReSharper*/\n*.[Rr]e[Ss]harper\n*.DotSettings.user\n\n# TeamCity is a build add-in\n_TeamCity*\n\n# DotCover is a Code Coverage Tool\n*.dotCover\n\n# AxoCover is a Code Coverage Tool\n.axoCover/*\n!.axoCover/settings.json\n\n# Coverlet is a free, cross platform Code Coverage Tool\ncoverage*.json\ncoverage*.xml\ncoverage*.info\n\n# Visual Studio code coverage results\n*.coverage\n*.coveragexml\n\n# NCrunch\n_NCrunch_*\n.*crunch*.local.xml\nnCrunchTemp_*\n\n# MightyMoose\n*.mm.*\nAutoTest.Net/\n\n# Web workbench (sass)\n.sass-cache/\n\n# Installshield output folder\n[Ee]xpress/\n\n# DocProject is a documentation generator add-in\nDocProject/buildhelp/\nDocProject/Help/*.HxT\nDocProject/Help/*.HxC\nDocProject/Help/*.hhc\nDocProject/Help/*.hhk\nDocProject/Help/*.hhp\nDocProject/Help/Html2\nDocProject/Help/html\n\n# Click-Once directory\npublish/\n\n# Publish Web Output\n*.[Pp]ublish.xml\n*.azurePubxml\n# Note: Comment the next line if you want to checkin your web deploy settings,\n# but database connection strings (with potential passwords) will be unencrypted\n*.pubxml\n*.publishproj\n\n# Microsoft Azure Web App publish settings. Comment the next line if you want to\n# checkin your Azure Web App publish settings, but sensitive information contained\n# in these scripts will be unencrypted\nPublishScripts/\n\n# NuGet Packages\n*.nupkg\n# NuGet Symbol Packages\n*.snupkg\n# The packages folder can be ignored because of Package Restore\n**/[Pp]ackages/*\n# except build/, which is used as an MSBuild target.\n!**/[Pp]ackages/build/\n# Uncomment if necessary however generally it will be regenerated when needed\n#!**/[Pp]ackages/repositories.config\n# NuGet v3's project.json files produces more ignorable files\n*.nuget.props\n*.nuget.targets\n\n# Microsoft Azure Build Output\ncsx/\n*.build.csdef\n\n# Microsoft Azure Emulator\necf/\nrcf/\n\n# Windows Store app package directories and files\nAppPackages/\nBundleArtifacts/\nPackage.StoreAssociation.xml\n_pkginfo.txt\n*.appx\n*.appxbundle\n*.appxupload\n\n# Visual Studio cache files\n# files ending in .cache can be ignored\n*.[Cc]ache\n# but keep track of directories ending in .cache\n!?*.[Cc]ache/\n\n# Others\nClientBin/\n~$*\n*.dbmdl\n*.dbproj.schemaview\n*.jfm\n*.pfx\n*.publishsettings\norleans.codegen.cs\n\n# Including strong name files can present a security risk\n# (https://github.com/github/gitignore/pull/2483#issue-259490424)\n#*.snk\n\n# Since there are multiple workflows, uncomment next line to ignore bower_components\n# (https://github.com/github/gitignore/pull/1529#issuecomment-104372622)\n#bower_components/\n\n# RIA/Silverlight projects\nGenerated_Code/\n\n# Backup & report files from converting an old project file\n# to a newer Visual Studio version. Backup files are not needed,\n# because we have git ;-)\n_UpgradeReport_Files/\nBackup*/\nUpgradeLog*.XML\nUpgradeLog*.htm\nServiceFabricBackup/\n*.rptproj.bak\n\n# SQL Server files\n*.mdf\n*.ldf\n*.ndf\n\n# Business Intelligence projects\n*.rdl.data\n*.bim.layout\n*.bim_*.settings\n*.rptproj.rsuser\n*- [Bb]ackup.rdl\n*- [Bb]ackup ([0-9]).rdl\n*- [Bb]ackup ([0-9][0-9]).rdl\n\n# Microsoft Fakes\nFakesAssemblies/\n\n# GhostDoc plugin setting file\n*.GhostDoc.xml\n\n# Node.js Tools for Visual Studio\n.ntvs_analysis.dat\nnode_modules/\n\n# Visual Studio 6 build log\n*.plg\n\n# Visual Studio 6 workspace options file\n*.opt\n\n# Visual Studio 6 auto-generated workspace file (contains which files were open etc.)\n*.vbw\n\n# Visual Studio 6 auto-generated project file (contains which files were open etc.)\n*.vbp\n\n# Visual Studio 6 workspace and project file (working project files containing files to include in project)\n*.dsw\n*.dsp\n\n# Visual Studio 6 technical files\n\n# Visual Studio LightSwitch build output\n**/*.HTMLClient/GeneratedArtifacts\n**/*.DesktopClient/GeneratedArtifacts\n**/*.DesktopClient/ModelManifest.xml\n**/*.Server/GeneratedArtifacts\n**/*.Server/ModelManifest.xml\n_Pvt_Extensions\n\n# Paket dependency manager\n.paket/paket.exe\npaket-files/\n\n# FAKE - F# Make\n.fake/\n\n# CodeRush personal settings\n.cr/personal\n\n# Python Tools for Visual Studio (PTVS)\n__pycache__/\n*.pyc\n\n# Cake - Uncomment if you are using it\n# tools/**\n# !tools/packages.config\n\n# Tabs Studio\n*.tss\n\n# Telerik's JustMock configuration file\n*.jmconfig\n\n# BizTalk build output\n*.btp.cs\n*.btm.cs\n*.odx.cs\n*.xsd.cs\n\n# OpenCover UI analysis results\nOpenCover/\n\n# Azure Stream Analytics local run output\nASALocalRun/\n\n# MSBuild Binary and Structured Log\n*.binlog\n\n# NVidia Nsight GPU debugger configuration file\n*.nvuser\n\n# MFractors (Xamarin productivity tool) working folder\n.mfractor/\n\n# Local History for Visual Studio\n.localhistory/\n\n# Visual Studio History (VSHistory) files\n.vshistory/\n\n# BeatPulse healthcheck temp database\nhealthchecksdb\n\n# Backup folder for Package Reference Convert tool in Visual Studio 2017\nMigrationBackup/\n\n# Ionide (cross platform F# VS Code tools) working folder\n.ionide/\n\n# Fody - auto-generated XML schema\nFodyWeavers.xsd\n\n# VS Code files for those working on multiple tools\n\n# Local History for Visual Studio Code\n\n# Windows Installer files from build outputs\n*.cab\n*.msi\n*.msix\n*.msm\n*.msp\n\n# JetBrains Rider\n*.sln.iml\n\n### VisualStudio Patch ###\n# Additional files built by Visual Studio\n\n# End of https://www.toptal.com/developers/gitignore/api/c,vim,rust,ruby,visualstudio,visualstudiocode\n\n# Overrides\n\n# Artichoke is an application, so check in `Cargo.lock`.\n!Cargo.lock\n# Cargo and other Rust tool configuration lives in a top-level `.config/` directory.\n!/.config/\n# Rust binary sources and some ruby/spec fixtures live in `bin/` directories.\n![Bb]in/\n# Allow ruby/spec shared object fixtures.\n!**/vendor/spec/**/*.dll\n!**/vendor/spec/**/*.so\n!**/vendor/spec/**/*.so.*\n!**/vendor/spec/**/*.dylib\n# https://github.com/sourcefrog/cargo-mutants/blob/main/.gitignore\nmutants.out\nmutants.out.old\n"
        },
        {
          "name": ".node-version",
          "type": "blob",
          "size": 0.005859375,
          "content": "lts/*\n"
        },
        {
          "name": ".prettierignore",
          "type": "blob",
          "size": 0.142578125,
          "content": "**/*\n\n!**/*/\n\n.vscode/\nmutants.out\nmutants.out.old\nnode_modules/\ntarget/\n\n!*.html\n!*.js\n!*.json\n!*.md\n!*.yaml\n!*.yml\n\n**/vendor/*\n!**/vendor/*.md\n"
        },
        {
          "name": ".prettierrc.yaml",
          "type": "blob",
          "size": 0.30078125,
          "content": "---\noverrides:\n  # Always wrap markdown\n  - files: \"*.md\"\n    options:\n      proseWrap: always\n  # Preserve wrap for yaml as wrapping make some commands less readable\n  - files: \"*.{yaml,yml}\"\n    options:\n      proseWrap: preserve\n  - files: \".github/labels.{yaml,yml}\"\n    options:\n      proseWrap: always\n"
        },
        {
          "name": ".rubocop.yml",
          "type": "blob",
          "size": 0.5673828125,
          "content": "---\nrequire: rubocop-rake\nAllCops:\n  NewCops: enable\n  TargetRubyVersion: 2.6\n  DisplayCopNames: true\n  Exclude:\n    - \"**/node_modules/**/*\"\n    - \"**/target/**/*\"\n    - \"**/vendor/**/*\"\nLayout/EndOfLine:\n  EnforcedStyle: lf\nLayout/LineLength:\n  Enabled: true\n  Exclude:\n    - \"**/Rakefile\"\n    - \"**/extn/**/*\"\nLayout/MultilineMethodCallIndentation:\n  EnforcedStyle: indented\nMetrics:\n  Enabled: false\nStyle/Documentation:\n  Enabled: false\nStyle/RedundantRegexpArgument:\n  Exclude:\n    - \"**/test/**/*\"\n    - \"**/*test*.rb\"\nStyle/SlicingWithRange:\n  Enabled: false # See GH-679.\n"
        },
        {
          "name": ".ruby-version",
          "type": "blob",
          "size": 0.005859375,
          "content": "3.3.6\n"
        },
        {
          "name": ".vscode",
          "type": "tree",
          "content": null
        },
        {
          "name": ".yamllint.yaml",
          "type": "blob",
          "size": 0.134765625,
          "content": "---\nextends: default\n\nignore: |\n  **/node_modules/**/*\n  **/vendor/**\n  **/target/**/*\n\nrules:\n  comments: disable\n  line-length: disable\n"
        },
        {
          "name": "ARCHITECTURE.md",
          "type": "blob",
          "size": 16.38671875,
          "content": "<!-- vim: set ft=markdown fenc=utf-8 spell spl=en -->\n\n# Artichoke Ruby Architecture\n\nArtichoke Ruby is a modular Ruby implementation written in Rust. Artichoke is\nmade up of several Rust libraries, called [crates], which are arranged in a\n[Cargo workspace].\n\n[crates]: https://doc.rust-lang.org/book/ch07-01-packages-and-crates.html\n[cargo workspace]: https://doc.rust-lang.org/book/ch14-03-cargo-workspaces.html\n\n_Aside_: This document uses the word \"interpreter\" to refer to a Ruby engine.\nThis word may mean either a VM-based or interpreted Ruby engine.\n\n## Overview\n\n<!-- source: https://whimsical.com/architecture-6tvfYsGZzs3FVqfk6J9KGw -->\n\n![Artichoke Ruby architecture diagram](docs/architecture.png)\n\nArtichoke is organized into several layers:\n\n- [Binaries and frontend](#frontend)\n- [Interpreter backend](#interpreter-backend)\n- [Interpreter core APIs](#core-interpreter-traits)\n- [Ruby Core data structures and APIs](#ruby-core-apis-and-standard-library-packages)\n- [Utilities](#utilities)\n\n### Frontend\n\nThe entry point to Artichoke for running Ruby code is the `artichoke` crate. The\ncode for this crate is located in the [`src` directory](src). All functionality\nof Artichoke Ruby is accessible through this crate. You'll likely want to create\nan interpreter with [`artichoke::interpreter()`] and import the\n[`artichoke::prelude::*`] items to bring the traits that define the interpreter\nAPIs into scope.\n\n```rust\nuse artichoke::prelude::*;\n\nlet mut interp = artichoke::interpreter()?;\nlet value = interp.eval(b\"[nil] * 3\")?;\nlet len = value.funcall(&mut interp, \"length\", &[], None)?;\nlet len = len.try_into::<usize>(&interp)?;\nassert_eq!(len, 3);\n```\n\n[`artichoke::interpreter()`]:\n  https://artichoke.github.io/artichoke/artichoke/fn.interpreter.html\n[`artichoke::prelude::*`]:\n  https://artichoke.github.io/artichoke/artichoke/prelude/index.html\n\nThe frontend crate provides [two binary targets]:\n\n- `artichoke` is the Ruby CLI frontend.\n- `airb` is Artichoke's [`irb` shell].\n\n[two binary targets]: README.md#Usage\n[`irb` shell]: https://en.wikipedia.org/wiki/Interactive_Ruby_Shell\n\nThe frontend implements command line argument parsing and a readline shell,\nreads source programs from disk or standard input (stdin), formats exception\nbacktraces, and evaluates code on an interpreter backend.\n\n### Interpreter Backend\n\nArtichoke uses a \"backend\" crate to implement the core interpreter APIs.\n\nBackend crates integrate a parser, Ruby VM or interpreter, and stitch together\ncore APIs and standard library packages to create a Ruby environment.\nInterpreter backends are expected to implement the core interpreter traits from\n[`artichoke-core`][artichoke-core-docs].\n\nArtichoke currently implements one interpreter backend [based on\nmruby][b-mruby], `artichoke-backend`. The project has plans to implement an\n[MRI-based backend][b-mri] crate and a [pure Rust backend][b-artichoke].\n\n[artichoke-core-docs]: https://artichoke.github.io/artichoke/artichoke_core/\n[b-mruby]: https://github.com/artichoke/artichoke/labels/B-mruby\n[b-mri]: https://github.com/artichoke/artichoke/labels/B-MRI\n[b-artichoke]: https://github.com/artichoke/artichoke/labels/B-Artichoke\n\n#### `artichoke-backend`\n\n[`artichoke-backend`][artichoke-backend-docs] is an interpreter backend that\nuses the [mruby VM] and parser. The code for this crate is located in the\n[`artichoke-backend` directory][artichoke-backend-src].\n\nThe [mruby C sources] are built into a static library using a [custom build\nprocess][mruby-build] and exposed via [`bindgen`] in the [`sys` module].\n\n`artichoke-backend` implements some core interpreter traits from\n`artichoke-core` with mruby APIs, for example, [getting and setting global\nvariables][mruby-globals]. Previous project goals and execution localized mruby\n`sys` calls to only core traits, for example [artichoke/artichoke#562][gh-562].\n\nAs core APIs and data structures are implemented in _Spinoso_ crates,\n`artichoke-backend` will disable mruby C functions, [reimplement them in\nRust][artichoke-strangler], and expose `unsafe extern \"C\" fn` replacements for\ninteroperability with the remaining mruby pieces. This process is an application\nof the [Strangler Fig pattern].\n\n[artichoke-backend-docs]:\n  https://artichoke.github.io/artichoke/artichoke_backend/\n[mruby vm]: https://github.com/mruby/mruby\n[artichoke-backend-src]: artichoke-backend\n[mruby c sources]: artichoke-backend/vendor/mruby\n[mruby-build]: artichoke-backend/build.rs\n[`bindgen`]: https://rust-lang.github.io/rust-bindgen/\n[`sys` module]:\n  https://artichoke.github.io/artichoke/artichoke_backend/sys/index.html\n[mruby-globals]: artichoke-backend/src/globals.rs\n[gh-562]: https://github.com/artichoke/artichoke/pull/562\n[artichoke-strangler]:\n  https://twitter.com/artichokeruby/status/1339578582222266368\n[strangler fig pattern]:\n  https://martinfowler.com/bliki/StranglerFigApplication.html\n\n### Core Interpreter Traits\n\n[`artichoke-core`][artichoke-core-docs] contains the traits required to\nimplement a fully functional and ruby/spec-compliant Ruby interpreter. The code\nfor this crate is located in the [`artichoke-core`\ndirectory][artichoke-core-src].\n\n`artichoke-core` is `no_std` + `alloc` with an optional (enabled by default)\n`std` feature.\n\n#### Interpreter APIs\n\nArtichoke Core defines traits for the following interpreter capabilities:\n\n- [`DefineConstant`][core-define-constant]: Define global, class, and module\n  constants to be arbitrary Ruby [`Value`][core-value]s.\n- [`Eval`][core-eval]: Execute Ruby source code on an interpreter from various\n  sources.\n- [`Globals`][core-globals]: Get, set, and unset interpreter-level global\n  variables.\n- [`Intern`][core-intern]: Intern byte strings to a cheap to copy and compare\n  symbol type.\n- [`Io`][core-io]: External I/O APIs, such as writing to the standard output of\n  the current process.\n- [`LoadSources`][core-load-sources]: [Require][kernel#require] source code from\n  interpreter disk or [`File`][core-file] gems.\n- [`Parser`][core-parser]: Manipulate the parser state, e.g. setting the current\n  filename.\n- [`Prng`][core-prng]: An interpreter-level pseudorandom number generator that\n  is the backend for [`Random::DEFAULT`].\n- [`Regexp`][core-regexp]: Manipulate [`Regexp`][regexp-globals] global state.\n- [`ReleaseMetadata`][core-releasemetadata]: Enable interpreters to describe\n  themselves.\n- [`TopSelf`][core-topself]: Access to the root execution context.\n- [`Warn`][core-warn]: Emit warnings.\n\nArtichoke Core also describes what capabilities a Ruby [`Value`][core-value]\nmust have and how to [convert][core-convert-module] between Ruby VM and Rust\ntypes.\n\n[artichoke-core-src]: artichoke-core\n[kernel#require]: https://ruby-doc.org/core-3.1.2/Kernel.html#method-i-require\n[`random::default`]: https://ruby-doc.org/core-3.1.2/Random.html#DEFAULT\n[regexp-globals]:\n  https://ruby-doc.org/core-3.1.2/Regexp.html#class-Regexp-label-Special+global+variables\n[core-convert-module]:\n  https://artichoke.github.io/artichoke/artichoke_core/convert/index.html\n[core-define-constant]:\n  https://artichoke.github.io/artichoke/artichoke_core/constant/trait.DefineConstant.html\n[core-value]:\n  https://artichoke.github.io/artichoke/artichoke_core/value/trait.Value.html\n[core-eval]:\n  https://artichoke.github.io/artichoke/artichoke_core/eval/trait.Eval.html\n[core-globals]:\n  https://artichoke.github.io/artichoke/artichoke_core/globals/trait.Globals.html\n[core-intern]:\n  https://artichoke.github.io/artichoke/artichoke_core/intern/trait.Intern.html\n[core-io]: https://artichoke.github.io/artichoke/artichoke_core/io/trait.Io.html\n[core-load-sources]:\n  https://artichoke.github.io/artichoke/artichoke_core/load/trait.LoadSources.html\n[core-file]:\n  https://artichoke.github.io/artichoke/artichoke_core/file/trait.File.html\n[core-parser]:\n  https://artichoke.github.io/artichoke/artichoke_core/parser/trait.Parser.html\n[core-prng]:\n  https://artichoke.github.io/artichoke/artichoke_core/prng/trait.Prng.html\n[core-regexp]:\n  https://artichoke.github.io/artichoke/artichoke_core/regexp/trait.Regexp.html\n[core-releasemetadata]:\n  https://artichoke.github.io/artichoke/artichoke_core/release_metadata/trait.ReleaseMetadata.html\n[core-topself]:\n  https://artichoke.github.io/artichoke/artichoke_core/top_self/trait.TopSelf.html\n[core-warn]:\n  https://artichoke.github.io/artichoke/artichoke_core/warn/trait.Warn.html\n\n### Ruby Core APIs and Standard Library Packages\n\nThe data structures and platform-specific code for APIs in [Ruby Core] and\n[Standard Library] are implemented in the _Spinoso_ family of crates. (_Spinoso_\nrefers to _Carciofo spinoso di Sardegna_, the thorny artichoke of Sardinia. The\ndata structures defined in the `spinoso` family of crates form the backbone of\nRuby Core in Artichoke.)\n\n_Spinoso_ crates aim to incorporate the following design goals:\n\n- Declare the crate as `no_std` and/or no-`alloc` where possible.\n- Depend on state-of-the-art crates.\n- Expose multiple implementations of the same data structure such that they are\n  [source-compatible].\n- Gate independent functionality and optional implementations behind Cargo\n  features.\n- `#![forbid(unsafe_code)]` where possible.\n- Require 100% API documentation: all APIs have examples, all APIs have panic\n  docs and safety docs where relevant.\n- Require unit tests.\n\nBackend and frontend crates should propagate as many Cargo features of _Spinoso_\ncrates as possible.\n\n[`spinoso-array`] and [`spinoso-env`] are two examples of typical _Spinoso_\ncrates.\n\n[ruby core]: https://ruby-doc.org/core-3.1.2/\n[standard library]: https://ruby-doc.org/stdlib-3.1.2/\n[source-compatible]: https://hyperbo.la/w/source-level-polymorphism/\n[`spinoso-array`]: https://artichoke.github.io/artichoke/spinoso_array/\n[`spinoso-env`]: https://artichoke.github.io/artichoke/spinoso_env/\n\n#### Array\n\n`spinso-array` implements contiguous growable vector types that implement the\n[Ruby `Array`] API. The code for this crate is located in the [`spinoso-array`\ndirectory][spinoso-array-src]. `spinoso-array` is `no_std` + `alloc` and exports\ntwo implementations:\n\n- `Array`, which is implemented with [`Vec`][rust-alloc-vec].\n- `SmallArray`, which is implemented with [`SmallVec`] from the [Servo project].\n\n`Array` is enabled by default; `SmallArray` requires activating the\n`small-array` Cargo feature. Both data structures have nearly identical APIs\n(`Array` exposes additional [\"raw parts\"] APIs that are not present in\n`SmallArray`) which allows downstream consumers of these data structures to swap\nout implementations by changing an import.\n\n[ruby `array`]: https://ruby-doc.org/core-3.1.2/Array.html\n[spinoso-array-src]: spinoso-array\n[rust-alloc-vec]: https://doc.rust-lang.org/alloc/vec/struct.Vec.html\n[`smallvec`]:\n  https://artichoke.github.io/artichoke/smallvec/struct.SmallVec.html\n[servo project]: https://github.com/servo/rust-smallvec\n[\"raw parts\"]:\n  https://artichoke.github.io/artichoke/spinoso_array/struct.Array.html#method.into_raw_parts\n\n#### ENV\n\n`spinoso-env` implements a hash-like accessor for environment variables which\ncan be used to build the [`ENV`][ruby-core-env] singleton object from Ruby Core.\nThe code for this crate is located in the [`spinoso-env`\ndirectory][spinoso-env-src]. `spinoso-env` exports two implementations:\n\n- `Memory`, which is a fake, in-memory store using a\n  [`HashMap`][rust-std-hashmap].\n- `System`, which is implemented with the platform APIs in the\n  [`std::env`][rust-std-env] module.\n\n`Memory` is enabled by default; `System` requires activating the `system-env`\nCargo feature. Both data structures have identical APIs which allows downstream\nconsumers of these data structures to swap out implementations by changing an\nimport.\n\n`Memory` allows an interpreter to expose an `ENV` API in embedded environments\nwhere it may be undesirable for Ruby code to modify the host process's\nenvironment.\n\n[ruby-core-env]: https://ruby-doc.org/core-3.1.2/ENV.html\n[spinoso-env-src]: spinoso-env\n[rust-std-hashmap]:\n  https://doc.rust-lang.org/nightly/std/collections/hash/map/struct.HashMap.html\n[rust-std-env]: https://doc.rust-lang.org/nightly/std/env/index.html\n\n### Utilities\n\nSeveral _Spinoso_ crates require shared utilities. These utilities are extracted\ninto separate crates prefixed with `scolapasta-`. (_Scolapasta_ refers to a\nspecialized colander used to drain pasta. The utilities defined in the\n`scolapasta` family of crates are the kitchen tools for preparing Artichoke\nRuby.)\n\n## Ecosystem\n\n### Nightly Builds\n\nThe [artichoke/nightly] repository uses a [nightly scheduled GitHub Actions\nworkflow][github-actions-nightly] to publish [nightly pre-built binary\nartifacts][nightly-releases].\n\nThese releases are also available through [`ruby-build`] for Linux, macOS, and\nApple Silicon macOS. To install, run:\n\n```console\n$ mkdir -p ~/.rubies\n$ ruby-build artichoke-dev ~/.rubies/artichoke\n```\n\nor use [`rbenv install`]:\n\n```console\n$ rbenv install artichoke-dev\n```\n\nCurrently supported nightly targets are:\n\n- [`aarch64-apple-darwin`] (Apple Silicon)\n- [`aarch64-unknown-linux-gnu`]\n- [`x86_64-apple-darwin`]\n- [`x86_64-unknown-linux-gnu`]\n- [`x86_64-unknown-linux-musl`]\n- [`x86_64-pc-windows-msvc`]\n\n[artichoke/nightly]: https://github.com/artichoke/nightly\n[github-actions-nightly]:\n  https://github.com/artichoke/nightly/blob/trunk/.github/workflows/nightly.yaml\n[nightly-releases]: https://github.com/artichoke/nightly/releases\n[`ruby-build`]: https://github.com/rbenv/ruby-build\n[`rbenv install`]: https://github.com/rbenv/rbenv#installing-ruby-versions\n[`aarch64-apple-darwin`]:\n  https://github.com/artichoke/nightly/releases/latest/download/artichoke-nightly-aarch64-apple-darwin.tar.gz\n[`aarch64-unknown-linux-gnu`]:\n  https://github.com/artichoke/nightly/releases/latest/download/artichoke-nightly-aarch64-unknown-linux-gnu.tar.gz\n[`x86_64-apple-darwin`]:\n  https://github.com/artichoke/nightly/releases/latest/download/artichoke-nightly-x86_64-apple-darwin.tar.gz\n[`x86_64-unknown-linux-gnu`]:\n  https://github.com/artichoke/nightly/releases/latest/download/artichoke-nightly-x86_64-unknown-linux-gnu.tar.gz\n[`x86_64-unknown-linux-musl`]:\n  https://github.com/artichoke/nightly/releases/latest/download/artichoke-nightly-x86_64-unknown-linux-musl.tar.gz\n[`x86_64-pc-windows-msvc`]:\n  https://github.com/artichoke/nightly/releases/latest/download/artichoke-nightly-x86_64-pc-windows-msvc.zip\n\n### Nightly Containers\n\nThe [artichoke/docker-artichoke-nightly] repository uses a [nightly scheduled\nGitHub Actions workflow][github-actions-docker-nightly] to publish Docker builds\nto the [`artichokeruby/artichoke` repository on Docker Hub][docker-hub].\n\nTo pull and run an image, run:\n\n```console\n$ docker run -it docker.io/artichokeruby/artichoke airb\n```\n\nCurrently supported Docker platforms are listed at:\n\n- <https://github.com/artichoke/docker-artichoke-nightly/blob/trunk/README.md#platforms>\n\n[artichoke/docker-artichoke-nightly]:\n  https://github.com/artichoke/docker-artichoke-nightly\n[github-actions-docker-nightly]:\n  https://github.com/artichoke/docker-artichoke-nightly/blob/trunk/.github/workflows/docker-nightly.yaml\n[docker-hub]: https://hub.docker.com/r/artichokeruby/artichoke\n\n### Playground\n\nThe Artichoke project maintains a [Wasm]-based playground at\n<https://artichoke.run> which exposes a REPL with a [Monaco Editor] environment.\n\nBecause of the mruby C dependency, the playground compiles to Wasm with Rust's\n[Emscripten] target.\n\n[wasm]: https://webassembly.org/\n[monaco editor]: https://microsoft.github.io/monaco-editor/\n[emscripten]: https://emscripten.org/\n\n#### Try Artichoke\n\n<p align=\"center\">\n  <a href=\"https://artichoke.run\">\n    <img style=\"max-width: 400px\" width=\"400\" src=\"https://artichoke.run/playground.png\">\n  </a>\n  <br>\n  <em>Artichoke Ruby Wasm Playground</em>\n</p>\n\nYou can [try Artichoke in your browser][playground]. The [Artichoke\nPlayground][playground-repo] runs a [WebAssembly] build of\n[Artichoke][artichoke-repo].\n\n[playground]: https://artichoke.run\n[playground-repo]: https://github.com/artichoke/playground\n[webassembly]: https://webassembly.org/\n[artichoke-repo]: https://github.com/artichoke/artichoke\n\n### Project Website\n\nThe Artichoke project hosts a project website at\n<https://www.artichokeruby.org>.\n\nThe website is a static site built with a custom static site generator which is\ndeployed on [GitHub Pages]. The source code can be found in the\n[artichoke/www.artichokeruby.org] repository and is [deployed\nautomatically][github-actions-www-deploy] when PRs are merged.\n\n[github pages]: https://pages.github.com/\n[artichoke/www.artichokeruby.org]:\n  https://github.com/artichoke/www.artichokeruby.org\n[github-actions-www-deploy]:\n  https://github.com/artichoke/www.artichokeruby.org/blob/trunk/.github/workflows/ci.yaml\n"
        },
        {
          "name": "BUILD.md",
          "type": "blob",
          "size": 3.5419921875,
          "content": "# Building Artichoke\n\nTo build Artichoke, install the [prerequisites](#prerequisites) and run:\n\n```console\n$ git clone https://github.com/artichoke/artichoke.git\n$ cd ./artichoke\n$ cargo build --release\n$ ./target/release/artichoke --version\nartichoke 0.1.0-pre.0\n```\n\n## WebAssembly\n\nArtichoke can be used in WebAssembly environments via the\n`wasm32-unknown-emscripten` target. This target is not tested in CI and should\nbe considered unstable.\n\n```sh\nrustup target add wasm32-unknown-emscripten\ncargo build --release --target wasm32-unknown-unknown\n```\n\nThis on its own does not produce a usable artifact. To build a WebAssembly\nbundle, depend on `artichoke` in a crate with a main. See the\n[artichoke/playground] repository for an example.\n\n## Prerequisites\n\n### Rust Toolchain\n\nArtichoke is a collection of Rust crates and requires a Rust compiler. The\nspecific version of Rust Artichoke requires is specified in the\n[toolchain file](rust-toolchain.toml).\n\nArtichoke only guarantees support for the latest stable version of the Rust\ncompiler.\n\n#### Installation\n\nThe recommended way to install the Rust toolchain is with [rustup]. On macOS,\nyou can install rustup with [Homebrew]:\n\n```sh\nbrew install rustup-init\nrustup-init\n```\n\nOn Windows, you can install rustup from the official site and follow the\nprompts: <https://rustup.rs/>. This requires a download of Visual Studio (the\n[Community Edition][vs-community] is sufficient) and several C++ packages\nselected through the VS component installer. (I'm not sure which packages are\nrequired; I selected them all.)\n\nWhen running any subsequent `cargo` commands, rustup will ensure the correct\nversion of the toolchain is installed.\n\nIt is recommended to install `rustfmt` and `clippy` to help with static code\nanalysis and to do relevant checks prior to submitting PRs.\n\n```sh\nrustup component add rustfmt clippy\n```\n\n### Bindgen\n\nArtichoke generates Rust declarations for C code at build time using\n[`bindgen`]. `bindgen` is a build dependency of `artichoke-backend` and the\nbindgen CLI is not required to be present on `$PATH`.\n\n### Rust Crates\n\nArtichoke depends on several Rust libraries, or crates. Once you have the Rust\ntoolchain installed, you can install the crates specified in\n[`Cargo.lock`](Cargo.lock) by running:\n\n```sh\ncargo build --workspace\n```\n\n### C Toolchain\n\nSome artichoke dependencies, like the mruby [`sys`](artichoke-backend/src/sys)\nFFI bindings and the [`onig`] crate, build C static libraries and require a C\ncompiler.\n\nArtichoke specifically requires clang. WebAssembly targets require clang-8 or\nnewer.\n\nOn Windows, install the latest LLVM distribution from GitHub and add LLVM to\nyour PATH: <https://github.com/llvm/llvm-project/releases>.\n\n#### `cc` Crate\n\nArtichoke and some of its dependencies use the Rust [`cc` crate] to build. `cc`\nuses a [platform-dependent C compiler] to compile C sources. On Unix, `cc` crate\nuses the `cc` binary.\n\n### mruby Bindings\n\nTo build the Artichoke mruby backend, you will need a C compiler toolchain. By\ndefault, mruby requires the following to compile:\n\n- clang\n- ar\n\nYou can override the requirement for clang by setting the `CC` and `LD`\nenvironment variables.\n\n[artichoke/playground]: https://github.com/artichoke/playground\n[rustup]: https://rustup.rs/\n[homebrew]: https://docs.brew.sh/Installation\n[vs-community]: https://visualstudio.microsoft.com/vs/community/\n[`bindgen`]: https://github.com/rust-lang/rust-bindgen\n[`onig`]: https://crates.io/crates/onig\n[`cc` crate]: https://crates.io/crates/cc\n[platform-dependent c compiler]:\n  https://github.com/alexcrichton/cc-rs#compile-time-requirements\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 8.7021484375,
          "content": "# Contributing to Artichoke\n\n👋 Hi and welcome to [Artichoke]. Thanks for taking the time to contribute!\n💪💎🙌\n\nArtichoke aspires to be an [MRI Ruby-compatible][mri-target] implementation of\nthe Ruby programming language. [There is lots to do].\n\n[mri-target]:\n  https://github.com/artichoke/artichoke/blob/trunk/RUBYSPEC.md#mri-target\n\nIf Artichoke does not run Ruby source code in the same way that MRI does, it is\na bug and we would appreciate if you [filed an issue so we can fix it].\n\nIf you would like to contribute code 👩‍💻👨‍💻, find an issue that looks interesting\nand leave a comment that you're beginning to investigate. If there is no issue,\nplease file one before beginning to work on a PR. [Good first issues are labeled\n`E-easy`].\n\n## Discussion\n\nIf you'd like to engage in a discussion outside of GitHub, you can [join\nArtichoke's public Discord server].\n\n## Implementation Philosophy\n\n- Prefer pure Ruby implementations when initially implementing features.\n- A feature is not done until it passes [ruby/spec](RUBYSPEC.md).\n- Move implementations to Rust for performance, e.g. [using Serde to implement\n  the JSON package].\n- If there is a Rust crate that does what we need, prefer to use it. Forking is\n  OK, too, e.g. [artichoke/rust-onig].\n\n## Setup\n\nArtichoke includes Rust, Ruby, C, and Text sources. Developing on Artichoke\nrequires configuring several dependencies.\n\n### Rust Toolchain\n\nArtichoke depends on Rust and several compiler plugins for linting and\nformatting. The specific version of Rust that Artichoke requires is specified in\nthe [toolchain file](rust-toolchain.toml).\n\nToolchain requirements are documented in [`BUILD.md`](BUILD.md#rust-toolchain).\n\n### C Toolchain\n\nSome Artichoke dependencies, like the mruby [`sys`] module and the [`onig`]\ncrate, build C static libraries and require a C compiler.\n\nToolchain requirements are documented in [`BUILD.md`](BUILD.md#c-toolchain).\n\n### Ruby\n\nArtichoke requires a recent Ruby and [bundler] for development tasks. The\n[`.ruby-version`](.ruby-version) file in this repository specifies the preferred\nRuby toolchain.\n\nRuby is not required to build Artichoke.\n\nIf you use [RVM], you can install Ruby dependencies by running:\n\n```sh\nrvm install \"$(cat .ruby-version)\"\ngem install bundler\n```\n\nIf you use [rbenv] and [ruby-build], you can install Ruby dependencies by\nrunning:\n\n```sh\nrbenv install \"$(cat .ruby-version)\"\ngem install bundler\nrbenv rehash\n```\n\nThe [`Gemfile`](Gemfile) in Artichoke specifies several dev dependencies. You\ncan install these dependencies by running:\n\n```sh\nbundle install\n```\n\n[rvm]: https://rvm.io/\n[rbenv]: https://github.com/rbenv/rbenv\n[ruby-build]: https://github.com/rbenv/ruby-build\n\nArtichoke uses [`rake`](Rakefile) as a task runner. You can see the available\ntasks by running:\n\n```console\n$ bundle exec rake --tasks\nrake build                         # Build Rust workspace\nrake build:all                     # Build Rust workspace and sub-workspaces\nrake bundle:audit:check            # Checks the Gemfile.lock for insecure dependencies\nrake bundle:audit:update           # Updates the bundler-audit vulnerability database\nrake deps:firstparty               # List first-party crate dependencies\nrake deps:thirdparty               # List third-party crate dependencies\nrake doc                           # Generate Rust API documentation\nrake doc:open                      # Generate Rust API documentation and open it in a web browser\nrake fmt                           # Format sources\nrake fmt:c                         # Format .c and .h sources with clang-format\nrake fmt:rust                      # Format Rust sources with rustfmt\nrake fmt:text                      # Format text, YAML, and Markdown sources with prettier\nrake format                        # Format sources\nrake format:c                      # Format .c and .h sources with clang-format\nrake format:rust                   # Format Rust sources with rustfmt\nrake format:text                   # Format text, YAML, and Markdown sources with prettier\nrake lint                          # Lint sources\nrake lint:clippy                   # Lint Rust sources with Clippy\nrake lint:clippy:restriction       # Lint Rust sources with Clippy restriction pass (unenforced lints)\nrake lint:rubocop                  # Run RuboCop\nrake lint:rubocop:autocorrect      # Autocorrect RuboCop offenses (only when it's safe)\nrake lint:rubocop:autocorrect_all  # Autocorrect RuboCop offenses (safe and unsafe)\nrake sanitizer:leak                # Run Artichoke with LeakSanitizer\nrake spec                          # Run enforced ruby/spec suite\nrake test                          # Run Artichoke unit tests\nrake test:all                      # Run all tests\nrake test:fuzz                     # Run fuzz tests (Fuzz the interpreter for crashes with arbitrary input)\nrake test:ui                       # Run ui tests (check exact stdout/stderr of Artichoke binaries)\nrake test:unit                     # Run unit tests\nrake toolchain:sync                # Sync Rust toolchain to all sources\nrake toolchain:sync:ci             # Sync the root rust-toolchain version to CI jobs\nrake toolchain:sync:manifests      # Sync the root rust-toolchain version to all crate manifests\n```\n\nTo lint Ruby sources, Artichoke uses [RuboCop]. RuboCop runs as part of the\n`lint` task. To run RuboCop by itself, invoke the `lint:rubocop` task.\n\n```console\n$ bundle exec rake lint\n$ bundle exec rake lint:rubocop\n```\n\n### Node.js\n\nNode.js is an optional dependency that is used for formatting text sources with\n[prettier].\n\nNode.js is only required for formatting if modifying the following filetypes:\n\n- `c`\n- `h`\n- `html`\n- `json`\n- `md`\n- `toml`\n- `yaml`\n- `yml`\n\nYou will need to install [Node.js]. On macOS, you can install Node.js with\n[Homebrew]:\n\n```sh\nbrew install node\n```\n\n## Code Quality\n\n### Linting\n\nOnce you [configure a development environment](#setup), run the following to\nlint and format sources:\n\n```sh\nbundle exec rake\n```\n\nMerges will be blocked by CI if there are lint errors.\n\n### Testing\n\nA PR must have new or existing tests for it to be merged. The [Rust book chapter\non testing] is a good place to start. If you'd like to see some examples in\nArtichoke, take a look at:\n\n- `Value` VM integration tests in [`artichoke-backend/src/value.rs`].\n- `spinoso-env` unit tests for the `Memory` backend in\n  [`spinoso-env/src/env/memory.rs`].\n\nTo run tests:\n\n```sh\nbundle exec rake test\n```\n\nIf you are only working on one crate, it can speed up iteration time to only\nbuild and run tests for that crate:\n\n```sh\ncargo test -p artichoke-backend\n```\n\n`cargo test` accepts a filter argument that will limit test execution to tests\nthat substring match. For example, to run all of the Ruby/Rust Boolean\nconversion tests:\n\n```sh\ncargo test -p artichoke-backend convert::boolean\n```\n\nTests are run for every PR. All builds must pass before merging a PR.\n\n## Updating Dependencies\n\n### Rust Toolchain\n\nUpgrades to the Rust toolchain should happen in a dedicated PR that addresses\nany changes to ructc warnings and clippy lints. See [artichoke/artichoke#482]\nfor an example.\n\n### Rust Crates\n\nVersion specifiers in `Cargo.toml` are NPM caret-style by default. A version\nspecifier of `4.1.2` means `4.1.2 <= version < 5.0.0`.\n\nTo see what crates are outdated, you can use [cargo-outdated].\n\nIf you need to pull in an updated version of a crate for a bugfix or a new\nfeature, update the version number in `Cargo.toml`. See\n[artichoke/artichoke#548] for an example.\n\nRegular dependency bumps are handled by [@dependabot].\n\n[artichoke]: https://github.com/artichoke\n[there is lots to do]: https://github.com/artichoke/artichoke/issues\n[filed an issue so we can fix it]:\n  https://github.com/artichoke/artichoke/issues/new\n[good first issues are labeled `e-easy`]:\n  https://github.com/artichoke/artichoke/labels/E-easy\n[join artichoke's public discord server]: https://discord.gg/QCe2tp2\n[using serde to implement the json package]:\n  https://github.com/artichoke/artichoke/issues/77\n[artichoke/rust-onig]:\n  https://github.com/artichoke/rust-onig/tree/artichoke-vendor\n[`sys`]: artichoke-backend/src/sys\n[`onig`]: https://crates.io/crates/onig\n[bundler]: https://bundler.io/\n[rubocop]: https://github.com/rubocop-hq/rubocop\n[prettier]: https://prettier.io/\n[node.js]: https://nodejs.org/en/download/package-manager/\n[homebrew]: https://docs.brew.sh/Installation\n[rust book chapter on testing]:\n  https://doc.rust-lang.org/book/ch11-00-testing.html\n[`artichoke-backend/src/value.rs`]: artichoke-backend/src/value.rs\n[`spinoso-env/src/env/memory.rs`]: spinoso-env/src/env/memory.rs\n[artichoke/artichoke#482]: https://github.com/artichoke/artichoke/pull/482\n[cargo-outdated]: https://github.com/kbknapp/cargo-outdated\n[artichoke/artichoke#548]: https://github.com/artichoke/artichoke/pull/548\n[@dependabot]: https://dependabot.com/\n"
        },
        {
          "name": "Cargo.lock",
          "type": "blob",
          "size": 26.142578125,
          "content": "# This file is automatically @generated by Cargo.\n# It is not intended for manual editing.\nversion = 4\n\n[[package]]\nname = \"aho-corasick\"\nversion = \"1.1.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8e60d3430d3a69478ad0993f19238d2df97c507009a52b3c10addcd7f6bcb916\"\ndependencies = [\n \"memchr\",\n]\n\n[[package]]\nname = \"android_system_properties\"\nversion = \"0.1.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"819e7219dbd41043ac279b19830f2efc897156490d7fd6ea916720117ee66311\"\ndependencies = [\n \"libc\",\n]\n\n[[package]]\nname = \"anstyle\"\nversion = \"1.0.8\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1bec1de6f59aedf83baf9ff929c98f2ad654b97c9510f4e70cf6f661d49fd5b1\"\n\n[[package]]\nname = \"artichoke\"\nversion = \"0.1.0-pre.0\"\ndependencies = [\n \"artichoke-backend\",\n \"artichoke-readline\",\n \"artichoke-repl-history\",\n \"clap\",\n \"log\",\n \"rustyline\",\n \"scolapasta-path\",\n \"scolapasta-string-escape\",\n \"termcolor\",\n \"tz-rs\",\n]\n\n[[package]]\nname = \"artichoke-backend\"\nversion = \"0.24.1\"\ndependencies = [\n \"artichoke-core\",\n \"artichoke-load-path\",\n \"bindgen\",\n \"bstr\",\n \"cc\",\n \"intaglio\",\n \"mezzaluna-conversion-methods\",\n \"mezzaluna-type-registry\",\n \"onig\",\n \"posix-space\",\n \"qed\",\n \"quickcheck\",\n \"regex\",\n \"rustc-hash\",\n \"scolapasta-aref\",\n \"scolapasta-int-parse\",\n \"scolapasta-path\",\n \"scolapasta-string-escape\",\n \"spinoso-array\",\n \"spinoso-env\",\n \"spinoso-exception\",\n \"spinoso-math\",\n \"spinoso-random\",\n \"spinoso-regexp\",\n \"spinoso-securerandom\",\n \"spinoso-string\",\n \"spinoso-symbol\",\n \"spinoso-time\",\n]\n\n[[package]]\nname = \"artichoke-core\"\nversion = \"0.13.0\"\n\n[[package]]\nname = \"artichoke-load-path\"\nversion = \"0.1.0\"\ndependencies = [\n \"same-file\",\n]\n\n[[package]]\nname = \"artichoke-readline\"\nversion = \"1.2.0\"\ndependencies = [\n \"bstr\",\n \"known-folders\",\n \"posix-space\",\n \"rustyline\",\n]\n\n[[package]]\nname = \"artichoke-repl-history\"\nversion = \"1.0.0\"\ndependencies = [\n \"known-folders\",\n \"sysdir\",\n]\n\n[[package]]\nname = \"base64\"\nversion = \"0.22.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"72b3254f16251a8381aa12e40e3c4d2f0199f8c6508fbecb9d91f575e0fbb8c6\"\n\n[[package]]\nname = \"bindgen\"\nversion = \"0.69.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a00dc851838a2120612785d195287475a3ac45514741da670b735818822129a0\"\ndependencies = [\n \"bitflags 2.6.0\",\n \"cexpr\",\n \"clang-sys\",\n \"itertools\",\n \"lazy_static\",\n \"lazycell\",\n \"proc-macro2\",\n \"quote\",\n \"regex\",\n \"rustc-hash\",\n \"shlex\",\n \"syn\",\n]\n\n[[package]]\nname = \"bitflags\"\nversion = \"1.3.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"bef38d45163c2f1dde094a7dfd33ccf595c92905c8f8f4fdc18d06fb1037718a\"\n\n[[package]]\nname = \"bitflags\"\nversion = \"2.6.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b048fb63fd8b5923fc5aa7b340d8e156aec7ec02f0c78fa8a6ddc2613f6f71de\"\n\n[[package]]\nname = \"bstr\"\nversion = \"1.10.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"40723b8fb387abc38f4f4a37c09073622e41dd12327033091ef8950659e6dc0c\"\ndependencies = [\n \"memchr\",\n \"serde\",\n]\n\n[[package]]\nname = \"bumpalo\"\nversion = \"3.16.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"79296716171880943b8470b5f8d03aa55eb2e645a4874bdbb28adb49162e012c\"\n\n[[package]]\nname = \"bytecount\"\nversion = \"0.6.8\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"5ce89b21cab1437276d2650d57e971f9d548a2d9037cc231abdc0562b97498ce\"\n\n[[package]]\nname = \"cc\"\nversion = \"1.1.10\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e9e8aabfac534be767c909e0690571677d49f41bd8465ae876fe043d52ba5292\"\ndependencies = [\n \"jobserver\",\n \"libc\",\n]\n\n[[package]]\nname = \"cexpr\"\nversion = \"0.6.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"6fac387a98bb7c37292057cffc56d62ecb629900026402633ae9160df93a8766\"\ndependencies = [\n \"nom\",\n]\n\n[[package]]\nname = \"cfg-if\"\nversion = \"1.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"baf1de4339761588bc0619e3cbc0120ee582ebb74b53b4efbf79117bd2da40fd\"\n\n[[package]]\nname = \"cfg_aliases\"\nversion = \"0.2.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"613afe47fcd5fac7ccf1db93babcb082c5994d996f20b8b159f2ad1658eb5724\"\n\n[[package]]\nname = \"clang-sys\"\nversion = \"1.8.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"0b023947811758c97c59bf9d1c188fd619ad4718dcaa767947df1cadb14f39f4\"\ndependencies = [\n \"glob\",\n \"libc\",\n \"libloading\",\n]\n\n[[package]]\nname = \"clap\"\nversion = \"4.5.15\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"11d8838454fda655dafd3accb2b6e2bea645b9e4078abe84a22ceb947235c5cc\"\ndependencies = [\n \"clap_builder\",\n]\n\n[[package]]\nname = \"clap_builder\"\nversion = \"4.5.15\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"216aec2b177652e3846684cbfe25c9964d18ec45234f0f5da5157b207ed1aab6\"\ndependencies = [\n \"anstyle\",\n \"clap_lex\",\n \"strsim\",\n]\n\n[[package]]\nname = \"clap_lex\"\nversion = \"0.7.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1462739cb27611015575c0c11df5df7601141071f07518d56fcc1be504cbec97\"\n\n[[package]]\nname = \"clipboard-win\"\nversion = \"5.4.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"15efe7a882b08f34e38556b14f2fb3daa98769d06c7f0c1b076dfd0d983bc892\"\ndependencies = [\n \"error-code\",\n]\n\n[[package]]\nname = \"const_fn\"\nversion = \"0.4.10\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"373e9fafaa20882876db20562275ff58d50e0caa2590077fe7ce7bef90211d0d\"\n\n[[package]]\nname = \"core-foundation-sys\"\nversion = \"0.8.7\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"773648b94d0e5d620f64f280777445740e61fe701025087ec8b57f45c791888b\"\n\n[[package]]\nname = \"either\"\nversion = \"1.13.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"60b1af1c220855b6ceac025d3f6ecdd2b7c4894bfe9cd9bda4fbb4bc7c0d4cf0\"\n\n[[package]]\nname = \"errno\"\nversion = \"0.3.9\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"534c5cf6194dfab3db3242765c03bbe257cf92f22b38f6bc0c58d59108a820ba\"\ndependencies = [\n \"libc\",\n \"windows-sys 0.52.0\",\n]\n\n[[package]]\nname = \"error-code\"\nversion = \"3.2.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a0474425d51df81997e2f90a21591180b38eccf27292d755f3e30750225c175b\"\n\n[[package]]\nname = \"fd-lock\"\nversion = \"4.0.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"7e5768da2206272c81ef0b5e951a41862938a6070da63bcea197899942d3b947\"\ndependencies = [\n \"cfg-if\",\n \"rustix\",\n \"windows-sys 0.52.0\",\n]\n\n[[package]]\nname = \"focaccia\"\nversion = \"1.4.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"9ee11ab04c870c105dd00e08fb7e2cd1a7375ab8ca4daab2ee1c9d71d6cbc80e\"\n\n[[package]]\nname = \"getrandom\"\nversion = \"0.2.15\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"c4567c8db10ae91089c99af84c68c38da3ec2f087c3f82960bcdbf3656b6f4d7\"\ndependencies = [\n \"cfg-if\",\n \"libc\",\n \"wasi\",\n]\n\n[[package]]\nname = \"glob\"\nversion = \"0.3.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d2fabcfbdc87f4758337ca535fb41a6d701b65693ce38287d856d1674551ec9b\"\n\n[[package]]\nname = \"iana-time-zone\"\nversion = \"0.1.60\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e7ffbb5a1b541ea2561f8c41c087286cc091e21e556a4f09a8f6cbf17b69b141\"\ndependencies = [\n \"android_system_properties\",\n \"core-foundation-sys\",\n \"iana-time-zone-haiku\",\n \"js-sys\",\n \"wasm-bindgen\",\n \"windows-core\",\n]\n\n[[package]]\nname = \"iana-time-zone-haiku\"\nversion = \"0.1.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f31827a206f56af32e590ba56d5d2d085f558508192593743f16b2306495269f\"\ndependencies = [\n \"cc\",\n]\n\n[[package]]\nname = \"intaglio\"\nversion = \"1.9.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"aa3eb1c7e05b0f9ddc99a1e9f186a434fa0bfd0087d6369acf5f2814731ab610\"\n\n[[package]]\nname = \"itertools\"\nversion = \"0.12.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ba291022dbbd398a455acf126c1e341954079855bc60dfdda641363bd6922569\"\ndependencies = [\n \"either\",\n]\n\n[[package]]\nname = \"jobserver\"\nversion = \"0.1.32\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"48d1dbcbbeb6a7fec7e059840aa538bd62aaccf972c7346c4d9d2059312853d0\"\ndependencies = [\n \"libc\",\n]\n\n[[package]]\nname = \"js-sys\"\nversion = \"0.3.70\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1868808506b929d7b0cfa8f75951347aa71bb21144b7791bae35d9bccfcfe37a\"\ndependencies = [\n \"wasm-bindgen\",\n]\n\n[[package]]\nname = \"known-folders\"\nversion = \"1.2.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b7d9a1740cc8b46e259a0eb787d79d855e79ff10b9855a5eba58868d5da7927c\"\ndependencies = [\n \"windows-sys 0.59.0\",\n]\n\n[[package]]\nname = \"lazy_static\"\nversion = \"1.5.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"bbd2bcb4c963f2ddae06a2efc7e9f3591312473c50c6685e1f298068316e66fe\"\n\n[[package]]\nname = \"lazycell\"\nversion = \"1.3.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"830d08ce1d1d941e6b30645f1a0eb5643013d835ce3779a5fc208261dbe10f55\"\n\n[[package]]\nname = \"libc\"\nversion = \"0.2.155\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"97b3888a4aecf77e811145cadf6eef5901f4782c53886191b2f693f24761847c\"\n\n[[package]]\nname = \"libloading\"\nversion = \"0.8.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"4979f22fdb869068da03c9f7528f8297c6fd2606bc3a4affe42e6a823fdb8da4\"\ndependencies = [\n \"cfg-if\",\n \"windows-targets\",\n]\n\n[[package]]\nname = \"libm\"\nversion = \"0.2.8\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"4ec2a862134d2a7d32d7983ddcdd1c4923530833c9f2ea1a44fc5fa473989058\"\n\n[[package]]\nname = \"linux-raw-sys\"\nversion = \"0.4.14\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"78b3ae25bc7c8c38cec158d1f2757ee79e9b3740fbc7ccf0e59e4b08d793fa89\"\n\n[[package]]\nname = \"log\"\nversion = \"0.4.22\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a7a70ba024b9dc04c27ea2f0c0548feb474ec5c54bba33a7f72f873a39d07b24\"\n\n[[package]]\nname = \"memchr\"\nversion = \"2.7.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"78ca9ab1a0babb1e7d5695e3530886289c18cf2f87ec19a575a0abdce112e3a3\"\n\n[[package]]\nname = \"mezzaluna-conversion-methods\"\nversion = \"1.0.0\"\ndependencies = [\n \"intaglio\",\n]\n\n[[package]]\nname = \"mezzaluna-load-path\"\nversion = \"0.1.0\"\n\n[[package]]\nname = \"mezzaluna-loaded-features\"\nversion = \"0.10.0\"\ndependencies = [\n \"same-file\",\n]\n\n[[package]]\nname = \"mezzaluna-type-registry\"\nversion = \"2.0.0\"\n\n[[package]]\nname = \"minimal-lexical\"\nversion = \"0.2.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"68354c5c6bd36d73ff3feceb05efa59b6acb7626617f4962be322a825e61f79a\"\n\n[[package]]\nname = \"nix\"\nversion = \"0.29.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"71e2746dc3a24dd78b3cfcb7be93368c6de9963d30f43a6a73998a9cf4b17b46\"\ndependencies = [\n \"bitflags 2.6.0\",\n \"cfg-if\",\n \"cfg_aliases\",\n \"libc\",\n]\n\n[[package]]\nname = \"nom\"\nversion = \"7.1.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d273983c5a657a70a3e8f2a01329822f3b8c8172b73826411a55751e404a0a4a\"\ndependencies = [\n \"memchr\",\n \"minimal-lexical\",\n]\n\n[[package]]\nname = \"once_cell\"\nversion = \"1.19.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3fdb12b2476b595f9358c5161aa467c2438859caa136dec86c26fdd2efe17b92\"\n\n[[package]]\nname = \"onig\"\nversion = \"6.4.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8c4b31c8722ad9171c6d77d3557db078cab2bd50afcc9d09c8b315c59df8ca4f\"\ndependencies = [\n \"bitflags 1.3.2\",\n \"libc\",\n \"once_cell\",\n \"onig_sys\",\n]\n\n[[package]]\nname = \"onig_sys\"\nversion = \"69.8.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"7b829e3d7e9cc74c7e315ee8edb185bf4190da5acde74afd7fc59c35b1f086e7\"\ndependencies = [\n \"cc\",\n \"pkg-config\",\n]\n\n[[package]]\nname = \"pkg-config\"\nversion = \"0.3.30\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d231b230927b5e4ad203db57bbcbee2802f6bce620b1e4a9024a07d94e2907ec\"\n\n[[package]]\nname = \"posix-space\"\nversion = \"1.0.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"fb172572fa316ae7e019d10c827231a9be803f3562543813aad86f547f11f352\"\n\n[[package]]\nname = \"proc-macro2\"\nversion = \"1.0.86\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"5e719e8df665df0d1c8fbfd238015744736151d4445ec0836b8e628aae103b77\"\ndependencies = [\n \"unicode-ident\",\n]\n\n[[package]]\nname = \"qed\"\nversion = \"1.6.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"bf666b4ca1b0b9d8b24345b8fb64b54e7197b4b665f81bad3cc806935344eb23\"\n\n[[package]]\nname = \"quickcheck\"\nversion = \"1.0.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"588f6378e4dd99458b60ec275b4477add41ce4fa9f64dcba6f15adccb19b50d6\"\ndependencies = [\n \"rand\",\n]\n\n[[package]]\nname = \"quote\"\nversion = \"1.0.36\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"0fa76aaf39101c457836aec0ce2316dbdc3ab723cdda1c6bd4e6ad4208acaca7\"\ndependencies = [\n \"proc-macro2\",\n]\n\n[[package]]\nname = \"rand\"\nversion = \"0.8.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"34af8d1a0e25924bc5b7c43c079c942339d8f0a8b57c39049bef581b46327404\"\ndependencies = [\n \"rand_core\",\n]\n\n[[package]]\nname = \"rand_core\"\nversion = \"0.6.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ec0be4795e2f6a28069bec0b5ff3e2ac9bafc99e6a9a7dc3547996c5c816922c\"\ndependencies = [\n \"getrandom\",\n]\n\n[[package]]\nname = \"rand_mt\"\nversion = \"4.2.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"49e018c6ded60e5252609887c12eb3ca2592e9248c5894a7db3975c8a7a1e2df\"\n\n[[package]]\nname = \"raw-parts\"\nversion = \"2.1.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"24dd65952ed12722ac59c13689a11aaba885d1af3abacb5332deb8158f3c2153\"\n\n[[package]]\nname = \"regex\"\nversion = \"1.10.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"4219d74c6b67a3654a9fbebc4b419e22126d13d2f3c4a07ee0cb61ff79a79619\"\ndependencies = [\n \"aho-corasick\",\n \"memchr\",\n \"regex-automata\",\n \"regex-syntax\",\n]\n\n[[package]]\nname = \"regex-automata\"\nversion = \"0.4.7\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"38caf58cc5ef2fed281f89292ef23f6365465ed9a41b7a7754eb4e26496c92df\"\ndependencies = [\n \"aho-corasick\",\n \"memchr\",\n \"regex-syntax\",\n]\n\n[[package]]\nname = \"regex-syntax\"\nversion = \"0.8.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"7a66a03ae7c801facd77a29370b4faec201768915ac14a721ba36f20bc9c209b\"\n\n[[package]]\nname = \"rustc-hash\"\nversion = \"1.1.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"08d43f7aa6b08d49f382cde6a7982047c3426db949b1424bc4b7ec9ae12c6ce2\"\n\n[[package]]\nname = \"rustix\"\nversion = \"0.38.34\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"70dc5ec042f7a43c4a73241207cecc9873a06d45debb38b329f8541d85c2730f\"\ndependencies = [\n \"bitflags 2.6.0\",\n \"errno\",\n \"libc\",\n \"linux-raw-sys\",\n \"windows-sys 0.52.0\",\n]\n\n[[package]]\nname = \"rustyline\"\nversion = \"15.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"2ee1e066dc922e513bda599c6ccb5f3bb2b0ea5870a579448f2622993f0a9a2f\"\ndependencies = [\n \"bitflags 2.6.0\",\n \"cfg-if\",\n \"clipboard-win\",\n \"fd-lock\",\n \"libc\",\n \"log\",\n \"memchr\",\n \"nix\",\n \"unicode-segmentation\",\n \"unicode-width\",\n \"utf8parse\",\n \"windows-sys 0.59.0\",\n]\n\n[[package]]\nname = \"same-file\"\nversion = \"1.0.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"93fc1dc3aaa9bfed95e02e6eadabb4baf7e3078b0bd1b4d7b6b0b68378900502\"\ndependencies = [\n \"winapi-util\",\n]\n\n[[package]]\nname = \"scolapasta-aref\"\nversion = \"0.1.0\"\n\n[[package]]\nname = \"scolapasta-fixable\"\nversion = \"0.1.0\"\n\n[[package]]\nname = \"scolapasta-hex\"\nversion = \"0.3.0\"\n\n[[package]]\nname = \"scolapasta-int-parse\"\nversion = \"0.2.2\"\ndependencies = [\n \"posix-space\",\n \"scolapasta-string-escape\",\n]\n\n[[package]]\nname = \"scolapasta-path\"\nversion = \"0.5.1\"\n\n[[package]]\nname = \"scolapasta-strbuf\"\nversion = \"1.0.0\"\ndependencies = [\n \"quickcheck\",\n \"raw-parts\",\n]\n\n[[package]]\nname = \"scolapasta-string-escape\"\nversion = \"0.3.0\"\ndependencies = [\n \"bstr\",\n]\n\n[[package]]\nname = \"serde\"\nversion = \"1.0.207\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"5665e14a49a4ea1b91029ba7d3bca9f299e1f7cfa194388ccc20f14743e784f2\"\ndependencies = [\n \"serde_derive\",\n]\n\n[[package]]\nname = \"serde_derive\"\nversion = \"1.0.207\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"6aea2634c86b0e8ef2cfdc0c340baede54ec27b1e46febd7f80dffb2aa44a00e\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn\",\n]\n\n[[package]]\nname = \"shlex\"\nversion = \"1.3.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"0fda2ff0d084019ba4d7c6f371c95d8fd75ce3524c3cb8fb653a3023f6323e64\"\n\n[[package]]\nname = \"simdutf8\"\nversion = \"0.1.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f27f6278552951f1f2b8cf9da965d10969b2efdea95a6ec47987ab46edfe263a\"\n\n[[package]]\nname = \"smallvec\"\nversion = \"1.13.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3c5e1a9a646d36c3599cd173a41282daf47c44583ad367b8e6837255952e5c67\"\n\n[[package]]\nname = \"spinoso-array\"\nversion = \"0.10.0\"\ndependencies = [\n \"raw-parts\",\n \"smallvec\",\n \"tinyvec\",\n]\n\n[[package]]\nname = \"spinoso-env\"\nversion = \"0.2.0\"\ndependencies = [\n \"bstr\",\n \"scolapasta-path\",\n \"scolapasta-string-escape\",\n]\n\n[[package]]\nname = \"spinoso-exception\"\nversion = \"0.1.0\"\ndependencies = [\n \"scolapasta-string-escape\",\n]\n\n[[package]]\nname = \"spinoso-math\"\nversion = \"0.3.0\"\ndependencies = [\n \"libm\",\n]\n\n[[package]]\nname = \"spinoso-random\"\nversion = \"0.4.0\"\ndependencies = [\n \"getrandom\",\n \"libm\",\n \"rand\",\n \"rand_core\",\n \"rand_mt\",\n]\n\n[[package]]\nname = \"spinoso-regexp\"\nversion = \"0.5.0\"\ndependencies = [\n \"bitflags 2.6.0\",\n \"bstr\",\n \"onig\",\n \"posix-space\",\n \"regex\",\n \"scolapasta-aref\",\n \"scolapasta-string-escape\",\n]\n\n[[package]]\nname = \"spinoso-securerandom\"\nversion = \"0.2.0\"\ndependencies = [\n \"base64\",\n \"rand\",\n \"scolapasta-hex\",\n]\n\n[[package]]\nname = \"spinoso-string\"\nversion = \"0.25.0\"\ndependencies = [\n \"bstr\",\n \"bytecount\",\n \"focaccia\",\n \"quickcheck\",\n \"scolapasta-strbuf\",\n \"scolapasta-string-escape\",\n \"simdutf8\",\n]\n\n[[package]]\nname = \"spinoso-symbol\"\nversion = \"0.4.0\"\ndependencies = [\n \"artichoke-core\",\n \"bstr\",\n \"focaccia\",\n \"qed\",\n \"scolapasta-string-escape\",\n]\n\n[[package]]\nname = \"spinoso-time\"\nversion = \"0.8.0\"\ndependencies = [\n \"iana-time-zone\",\n \"regex\",\n \"strftime-ruby\",\n \"tz-rs\",\n \"tzdb\",\n]\n\n[[package]]\nname = \"strftime-ruby\"\nversion = \"1.0.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1e551de0e4068c3b0940da8ea808bb31a2690ec279f610d88125d994700b4a78\"\n\n[[package]]\nname = \"strsim\"\nversion = \"0.11.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"7da8b5736845d9f2fcb837ea5d9e2628564b3b043a70948a3f0b778838c5fb4f\"\n\n[[package]]\nname = \"syn\"\nversion = \"2.0.74\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1fceb41e3d546d0bd83421d3409b1460cc7444cd389341a4c880fe7a042cb3d7\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"unicode-ident\",\n]\n\n[[package]]\nname = \"sysdir\"\nversion = \"1.2.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e14698b92621402a8aa2e10f3994232e8986b7d8f31c85fffbc420b5b32823f0\"\n\n[[package]]\nname = \"termcolor\"\nversion = \"1.4.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"06794f8f6c5c898b3275aebefa6b8a1cb24cd2c6c79397ab15774837a0bc5755\"\ndependencies = [\n \"winapi-util\",\n]\n\n[[package]]\nname = \"tinyvec\"\nversion = \"1.8.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"445e881f4f6d382d5f27c034e25eb92edd7c784ceab92a0937db7f2e9471b938\"\ndependencies = [\n \"tinyvec_macros\",\n]\n\n[[package]]\nname = \"tinyvec_macros\"\nversion = \"0.1.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1f3ccbac311fea05f86f61904b462b55fb3df8837a366dfc601a0161d0532f20\"\n\n[[package]]\nname = \"tz-rs\"\nversion = \"0.6.14\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"33851b15c848fad2cf4b105c6bb66eb9512b6f6c44a4b13f57c53c73c707e2b4\"\ndependencies = [\n \"const_fn\",\n]\n\n[[package]]\nname = \"tzdb\"\nversion = \"0.6.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1b580f6b365fa89f5767cdb619a55d534d04a4e14c2d7e5b9a31e94598687fb1\"\ndependencies = [\n \"tz-rs\",\n \"tzdb_data\",\n]\n\n[[package]]\nname = \"tzdb_data\"\nversion = \"0.1.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d1889fdffac09d65c1d95c42d5202e9b21ad8c758f426e9fe09088817ea998d6\"\ndependencies = [\n \"tz-rs\",\n]\n\n[[package]]\nname = \"unicode-ident\"\nversion = \"1.0.12\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3354b9ac3fae1ff6755cb6db53683adb661634f67557942dea4facebec0fee4b\"\n\n[[package]]\nname = \"unicode-segmentation\"\nversion = \"1.11.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d4c87d22b6e3f4a18d4d40ef354e97c90fcb14dd91d7dc0aa9d8a1172ebf7202\"\n\n[[package]]\nname = \"unicode-width\"\nversion = \"0.2.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1fc81956842c57dac11422a97c3b8195a1ff727f06e85c84ed2e8aa277c9a0fd\"\n\n[[package]]\nname = \"utf8parse\"\nversion = \"0.2.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"06abde3611657adf66d383f00b093d7faecc7fa57071cce2578660c9f1010821\"\n\n[[package]]\nname = \"wasi\"\nversion = \"0.11.0+wasi-snapshot-preview1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"9c8d87e72b64a3b4db28d11ce29237c246188f4f51057d65a7eab63b7987e423\"\n\n[[package]]\nname = \"wasm-bindgen\"\nversion = \"0.2.93\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a82edfc16a6c469f5f44dc7b571814045d60404b55a0ee849f9bcfa2e63dd9b5\"\ndependencies = [\n \"cfg-if\",\n \"once_cell\",\n \"wasm-bindgen-macro\",\n]\n\n[[package]]\nname = \"wasm-bindgen-backend\"\nversion = \"0.2.93\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"9de396da306523044d3302746f1208fa71d7532227f15e347e2d93e4145dd77b\"\ndependencies = [\n \"bumpalo\",\n \"log\",\n \"once_cell\",\n \"proc-macro2\",\n \"quote\",\n \"syn\",\n \"wasm-bindgen-shared\",\n]\n\n[[package]]\nname = \"wasm-bindgen-macro\"\nversion = \"0.2.93\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"585c4c91a46b072c92e908d99cb1dcdf95c5218eeb6f3bf1efa991ee7a68cccf\"\ndependencies = [\n \"quote\",\n \"wasm-bindgen-macro-support\",\n]\n\n[[package]]\nname = \"wasm-bindgen-macro-support\"\nversion = \"0.2.93\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"afc340c74d9005395cf9dd098506f7f44e38f2b4a21c6aaacf9a105ea5e1e836\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn\",\n \"wasm-bindgen-backend\",\n \"wasm-bindgen-shared\",\n]\n\n[[package]]\nname = \"wasm-bindgen-shared\"\nversion = \"0.2.93\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"c62a0a307cb4a311d3a07867860911ca130c3494e8c2719593806c08bc5d0484\"\n\n[[package]]\nname = \"winapi-util\"\nversion = \"0.1.9\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"cf221c93e13a30d793f7645a0e7762c55d169dbb0a49671918a2319d289b10bb\"\ndependencies = [\n \"windows-sys 0.59.0\",\n]\n\n[[package]]\nname = \"windows-core\"\nversion = \"0.52.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"33ab640c8d7e35bf8ba19b884ba838ceb4fba93a4e8c65a9059d08afcfc683d9\"\ndependencies = [\n \"windows-targets\",\n]\n\n[[package]]\nname = \"windows-sys\"\nversion = \"0.52.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"282be5f36a8ce781fad8c8ae18fa3f9beff57ec1b52cb3de0789201425d9a33d\"\ndependencies = [\n \"windows-targets\",\n]\n\n[[package]]\nname = \"windows-sys\"\nversion = \"0.59.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1e38bc4d79ed67fd075bcc251a1c39b32a1776bbe92e5bef1f0bf1f8c531853b\"\ndependencies = [\n \"windows-targets\",\n]\n\n[[package]]\nname = \"windows-targets\"\nversion = \"0.52.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"9b724f72796e036ab90c1021d4780d4d3d648aca59e491e6b98e725b84e99973\"\ndependencies = [\n \"windows_aarch64_gnullvm\",\n \"windows_aarch64_msvc\",\n \"windows_i686_gnu\",\n \"windows_i686_gnullvm\",\n \"windows_i686_msvc\",\n \"windows_x86_64_gnu\",\n \"windows_x86_64_gnullvm\",\n \"windows_x86_64_msvc\",\n]\n\n[[package]]\nname = \"windows_aarch64_gnullvm\"\nversion = \"0.52.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"32a4622180e7a0ec044bb555404c800bc9fd9ec262ec147edd5989ccd0c02cd3\"\n\n[[package]]\nname = \"windows_aarch64_msvc\"\nversion = \"0.52.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"09ec2a7bb152e2252b53fa7803150007879548bc709c039df7627cabbd05d469\"\n\n[[package]]\nname = \"windows_i686_gnu\"\nversion = \"0.52.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8e9b5ad5ab802e97eb8e295ac6720e509ee4c243f69d781394014ebfe8bbfa0b\"\n\n[[package]]\nname = \"windows_i686_gnullvm\"\nversion = \"0.52.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"0eee52d38c090b3caa76c563b86c3a4bd71ef1a819287c19d586d7334ae8ed66\"\n\n[[package]]\nname = \"windows_i686_msvc\"\nversion = \"0.52.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"240948bc05c5e7c6dabba28bf89d89ffce3e303022809e73deaefe4f6ec56c66\"\n\n[[package]]\nname = \"windows_x86_64_gnu\"\nversion = \"0.52.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"147a5c80aabfbf0c7d901cb5895d1de30ef2907eb21fbbab29ca94c5b08b1a78\"\n\n[[package]]\nname = \"windows_x86_64_gnullvm\"\nversion = \"0.52.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"24d5b23dc417412679681396f2b49f3de8c1473deb516bd34410872eff51ed0d\"\n\n[[package]]\nname = \"windows_x86_64_msvc\"\nversion = \"0.52.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"589f6da84c646204747d1270a2a5661ea66ed1cced2631d546fdfb155959f9ec\"\n"
        },
        {
          "name": "Cargo.toml",
          "type": "blob",
          "size": 6.9033203125,
          "content": "[package]\nname = \"artichoke\"\nversion = \"0.1.0-pre.0\"\nauthors = [\"Ryan Lopopolo <rjl@hyperbo.la>\"]\ndescription = \"\"\"\nartichoke is an implementation of the Ruby programming language.\n\"\"\"\nkeywords = [\"artichoke\", \"artichoke-ruby\", \"mri\", \"cruby\", \"ruby\"]\ncategories = [\"command-line-utilities\"]\nreadme = \"README.md\"\nedition.workspace = true\nrust-version.workspace = true\nlicense.workspace = true\nrepository.workspace = true\nhomepage.workspace = true\ndocumentation.workspace = true\n\n[dependencies]\n\n[dependencies.artichoke-backend]\nversion = \"0.24.1\"\npath = \"artichoke-backend\"\ndefault-features = false\n\n[dependencies.artichoke-readline]\nversion = \"1.2.0\"\npath = \"artichoke-readline\"\noptional = true\n\n[dependencies.artichoke-repl-history]\nversion = \"1.0.0\"\npath = \"artichoke-repl-history\"\noptional = true\n\n[dependencies.clap]\nversion = \"4.3.19\"\noptional = true\ndefault-features = false\nfeatures = [\"std\", \"help\", \"usage\", \"error-context\", \"suggestions\"]\n\n# XXX: load-bearing unused dependency.\n#\n# `rustyline` improperly declares its minimum version on `log` as `0.4` despite\n# requiring `>=0.4.5` to compile. Link in at least the minimum version here so\n# cargo pulls in at least 0.4.5, e.g. when using `-Zminimal-versions`.\n#\n# Upstream has not been willing to merge a patch to fix this, so hack around it\n# here.\n#\n# See: https://github.com/kkawakam/rustyline/pull/583\n[dependencies.log]\nversion = \"0.4.19\"\noptional = true\n\n[dependencies.rustyline]\nversion = \"15.0.0\"\noptional = true\ndefault-features = false\nfeatures = [\"with-file-history\"]\n\n[dependencies.scolapasta-path]\nversion = \"0.5.1\"\npath = \"scolapasta-path\"\noptional = true\n\n[dependencies.scolapasta-string-escape]\nversion = \"0.3.0\"\npath = \"scolapasta-string-escape\"\noptional = true\ndefault-features = false\n\n[dependencies.termcolor]\nversion = \"1.1.0\"\noptional = true\n\n[build-dependencies]\n\n[build-dependencies.tz-rs]\nversion = \"0.6.12\"\ndefault-features = false\nfeatures = [\"std\"]\n\n[[bin]]\nname = \"airb\"\npath = \"src/bin/airb.rs\"\nrequired-features = [\"cli\"]\n\n[[bin]]\nname = \"artichoke\"\npath = \"src/bin/artichoke.rs\"\nrequired-features = [\"cli\"]\n\n[workspace]\nmembers = [\n  \"artichoke-*\",\n  \"mezzaluna-*\",\n  \"scolapasta-*\",\n  \"spinoso-*\",\n]\n\n[workspace.package]\nedition = \"2021\"\nrust-version = \"1.83.0\"\nlicense = \"MIT\"\nrepository = \"https://github.com/artichoke/artichoke\"\nhomepage = \"https://github.com/artichoke/artichoke\"\ndocumentation = \"https://artichoke.github.io/artichoke/artichoke/\"\n\n[profile.release]\ncodegen-units = 1\nlto = true\nstrip = true\n\n[features]\ndefault = [\n  \"backtrace\",\n  \"cli\",\n  \"kitchen-sink\",\n]\n# Enable a CLI frontend for Artichoke, including a `ruby`-equivalent CLI and\n# REPL.\ncli = [\n  \"backtrace\",\n  \"dep:artichoke-readline\",\n  \"dep:artichoke-repl-history\",\n  \"dep:clap\",\n  \"dep:log\",\n  \"dep:rustyline\",\n  \"dep:scolapasta-path\",\n  \"dep:scolapasta-string-escape\",\n]\n# Enable a module for formtting backtraces from Ruby exceptions.\nbacktrace = [\"dep:termcolor\"]\n# Enable all features of Ruby Core, Standard Library, and the underlying VM.\nkitchen-sink = [\n  \"core-full\",\n  \"load-path-native-file-system-loader\",\n  \"load-path-rubylib-native-file-system-loader\",\n  \"stdlib-full\",\n]\n\n# Enable every API in Ruby Core\ncore-full = [\n  \"core-env\",\n  \"core-env-system\",\n  \"core-math\",\n  \"core-math-full\",\n  \"core-random\",\n  \"core-regexp\",\n  \"core-regexp-oniguruma\",\n  \"core-time\",\n]\n# Enable resolving environment variables with the `ENV` core object.\ncore-env = [\"artichoke-backend/core-env\"]\n# Enable resolving environment variables with the `ENV` core object using native\n# OS APIs. This feature replaces the in-memory backend with `std::env`.\ncore-env-system = [\"core-env\", \"artichoke-backend/core-env-system\"]\n# Enable the `Math` module in Ruby Core.\ncore-math = [\"artichoke-backend/core-math\"]\n# Enable an extra dependency on `libm` to implement some `Math` core APIs for\n# functions not present in `std`.\ncore-math-full = [\"core-math\", \"artichoke-backend/core-math-full\"]\n# Implement the `Random` core class and add an interpreter-default PRNG to\n# Artichoke. This feature adds dependencies on `rand_core` and `rand_pcg`.\ncore-random = [\"artichoke-backend/core-random\"]\n# Implement the `Regexp` and `MatchData` core classes. This feature adds a\n# dependency on `regex`.\ncore-regexp = [\"artichoke-backend/core-regexp\"]\n# Enable an oniguruma engine backend to the `Regexp` core class. With this\n# feature, Regexp patterns must be parsable by oniguruma regardless of the\n# backend they execute on. The `regex` crate backend remains the default as long\n# as it can parse the given pattern.\ncore-regexp-oniguruma = [\"core-regexp\", \"artichoke-backend/core-regexp-oniguruma\"]\n# Implement the `Time` core class. This feature adds dependencies on `tz-rs` and\n# `tzdb`.\ncore-time = [\"artichoke-backend/core-time\"]\n\n# Extend the Artichoke virtual file system to have native/host access.\n#\n# This feature enables requiring sources from local disk.\nload-path-native-file-system-loader = [\"artichoke-backend/load-path-native-file-system-loader\"]\n# Extend the Artichoke virtual file system to search a path separator-delimited\n# list of paths for Ruby sources by parsing the `RUBYLIB` environment variable.\n#\n# This feature enables requiring sources from local disk.\nload-path-rubylib-native-file-system-loader = [\"load-path-native-file-system-loader\", \"artichoke-backend/load-path-rubylib-native-file-system-loader\"]\n\n# Override the `stdout` and `stdin` streams to write to an in-memory buffer.\noutput-strategy-capture = [\"artichoke-backend/output-strategy-capture\"]\n# Override the `stdout` and `stdin` streams to write to be discarded.\n# `output-strategy-null` implies the `output-strategy-capture` feature.\noutput-strategy-null = [\"output-strategy-capture\", \"artichoke-backend/output-strategy-null\"]\n\n# Enable every integrated standard library package.\nstdlib-full = [\n  \"stdlib-abbrev\",\n  \"stdlib-base64\",\n  \"stdlib-cmath\",\n  \"stdlib-delegate\",\n  \"stdlib-forwardable\",\n  \"stdlib-json\",\n  \"stdlib-monitor\",\n  \"stdlib-ostruct\",\n  \"stdlib-securerandom\",\n  \"stdlib-set\",\n  \"stdlib-shellwords\",\n  \"stdlib-strscan\",\n  \"stdlib-time\",\n  \"stdlib-uri\",\n]\nstdlib-abbrev = [\"artichoke-backend/stdlib-abbrev\"]\nstdlib-base64 = [\"artichoke-backend/stdlib-base64\"]\nstdlib-cmath = [\"artichoke-backend/stdlib-cmath\"]\nstdlib-delegate = [\"artichoke-backend/stdlib-delegate\"]\nstdlib-forwardable = [\"artichoke-backend/stdlib-forwardable\"]\nstdlib-json = [\"artichoke-backend/stdlib-json\"]\nstdlib-monitor = [\"artichoke-backend/stdlib-monitor\"]\nstdlib-ostruct = [\"artichoke-backend/stdlib-ostruct\"]\n# Implement the `SecureRandom` Standard Library package. This feature adds\n# dependencies on `base64`, `rand`, `rand_core`.\nstdlib-securerandom = [\"artichoke-backend/stdlib-securerandom\"]\nstdlib-set = [\"artichoke-backend/stdlib-set\"]\nstdlib-shellwords = [\"artichoke-backend/stdlib-shellwords\"]\nstdlib-strscan = [\"artichoke-backend/stdlib-strscan\"]\nstdlib-time = [\"artichoke-backend/stdlib-time\"]\nstdlib-uri = [\"artichoke-backend/stdlib-uri\"]\n\n[package.metadata.docs.rs]\nall-features = true\nrustdoc-args = [\"--cfg\", \"docsrs\"]\n"
        },
        {
          "name": "Gemfile",
          "type": "blob",
          "size": 0.2666015625,
          "content": "# frozen_string_literal: true\n\nsource 'https://rubygems.org'\n\ngem 'bundler-audit', '~> 0.9', require: false\ngem 'rake', '>= 12.3.3', require: false\ngem 'rubocop', '~> 1.69', require: false\ngem 'rubocop-rake', '~> 0.6', require: false\ngem 'tomlrb', '~> 2.0', require: false\n"
        },
        {
          "name": "Gemfile.lock",
          "type": "blob",
          "size": 1.1005859375,
          "content": "GEM\n  remote: https://rubygems.org/\n  specs:\n    ast (2.4.2)\n    bundler-audit (0.9.2)\n      bundler (>= 1.2.0, < 3)\n      thor (~> 1.0)\n    json (2.9.1)\n    language_server-protocol (3.17.0.3)\n    parallel (1.26.3)\n    parser (3.3.6.0)\n      ast (~> 2.4.1)\n      racc\n    racc (1.8.1)\n    rainbow (3.1.1)\n    rake (13.2.1)\n    regexp_parser (2.10.0)\n    rubocop (1.69.2)\n      json (~> 2.3)\n      language_server-protocol (>= 3.17.0)\n      parallel (~> 1.10)\n      parser (>= 3.3.0.2)\n      rainbow (>= 2.2.2, < 4.0)\n      regexp_parser (>= 2.9.3, < 3.0)\n      rubocop-ast (>= 1.36.2, < 2.0)\n      ruby-progressbar (~> 1.7)\n      unicode-display_width (>= 2.4.0, < 4.0)\n    rubocop-ast (1.37.0)\n      parser (>= 3.3.1.0)\n    rubocop-rake (0.6.0)\n      rubocop (~> 1.0)\n    ruby-progressbar (1.13.0)\n    thor (1.3.2)\n    tomlrb (2.0.3)\n    unicode-display_width (3.1.3)\n      unicode-emoji (~> 4.0, >= 4.0.4)\n    unicode-emoji (4.0.4)\n\nPLATFORMS\n  ruby\n  x64-mingw-ucrt\n  x64-mingw32\n\nDEPENDENCIES\n  bundler-audit (~> 0.9)\n  rake (>= 12.3.3)\n  rubocop (~> 1.69)\n  rubocop-rake (~> 0.6)\n  tomlrb (~> 2.0)\n\nBUNDLED WITH\n   2.6.2\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.0712890625,
          "content": "The MIT License (MIT)\n\nCopyright (c) 2019 Ryan Lopopolo <rjl@hyperbo.la>\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 6.5146484375,
          "content": "# Artichoke Ruby\n\n[![GitHub Actions](https://github.com/artichoke/artichoke/workflows/CI/badge.svg)](https://github.com/artichoke/artichoke/actions)\n[![Discord](https://img.shields.io/discord/607683947496734760)](https://discord.gg/QCe2tp2)\n[![Twitter](https://img.shields.io/twitter/follow/artichokeruby?label=Follow&style=social)](https://twitter.com/artichokeruby)\n<br>\n[![Crate](https://img.shields.io/crates/v/artichoke.svg)](https://crates.io/crates/artichoke)\n[![API](https://docs.rs/artichoke/badge.svg)](https://docs.rs/artichoke)\n[![API trunk](https://img.shields.io/badge/docs-trunk-blue.svg)](https://artichoke.github.io/artichoke/artichoke/)\n\n<p align=\"center\">\n  <a href=\"https://www.artichokeruby.org\">\n    <img alt=\"Artichoke Ruby logo\" height=\"200\" width=\"200\" src=\"https://www.artichokeruby.org/artichoke-logo.svg\">\n  </a>\n</p>\n\nArtichoke is a Ruby implementation written in Rust and Ruby. Artichoke intends\nto be [MRI-compatible][ruby-spec] and targets [recent MRI Ruby][mri-target].\nArtichoke provides a Ruby runtime implemented in Rust and Ruby.\n\n## Try Artichoke\n\n<p align=\"center\">\n  <a href=\"https://artichoke.run\">\n    <img alt=\"Artichoke Ruby WebAssembly playground\" style=\"max-width: 400px\" width=\"400\" src=\"https://artichoke.run/artichoke-playground-safari-revision-4938-light-mode.png\">\n  </a>\n  <br>\n  <em>Artichoke Ruby Wasm Playground</em>\n</p>\n\nYou can [try Artichoke in your browser][playground]. The [Artichoke\nPlayground][playground-repo] runs a [WebAssembly] build of Artichoke.\n\n## Install Artichoke\n\n### Prebuilt nightly binaries\n\n[Download a prebuilt binary from artichoke/nightly][nightlies]. Binaries are\navailable for Linux, Linux/musl, macOS, and Windows.\n\nThese daily binaries track the latest trunk branch of Artichoke.\n\nBinaries are also distributed through [ruby-build]. To install with [rbenv]:\n\n```console\n$ rbenv install artichoke-dev\n```\n\n### Cargo\n\nYou can install a pre-release build of Artichoke using `cargo`, Rust's package\nmanager, by running:\n\n```console\n$ cargo install --git https://github.com/artichoke/artichoke --branch trunk --locked artichoke\n```\n\nTo install via `cargo install` or to checkout and build locally, you'll need\nRust and clang. [`BUILD.md`](BUILD.md) has more detail on\n[how to set up the compiler toolchain](BUILD.md#prerequisites).\n\n### Docker\n\n[Artichoke is available on Docker Hub][docker-hub].\n\nYou can launch a REPL by running:\n\n```sh\ndocker run -it docker.io/artichokeruby/artichoke airb\n```\n\n## Usage\n\nArtichoke ships with two binaries: `airb` and `artichoke`.\n\n### `airb`\n\n`airb` is the Artichoke implementation of `irb` and is an interactive Ruby shell\nand [REPL].\n\n`airb` is a readline-enabled shell, although it does not persist history.\n\n### `artichoke`\n\n`artichoke` is the `ruby` binary frontend to Artichoke.\n\n`artichoke` supports executing programs via files, stdin, or inline with one or\nmore `-e` flags.\n\nArtichoke can `require`, `require_relative`, and `load` files from the local\nfile system, but otherwise does not yet support local file system access. A\ntemporary workaround is to inject data into the interpreter with the\n`--with-fixture` flag, which reads file contents into a `$fixture` global.\n\n```console\n$ artichoke --help\nArtichoke is a Ruby made with Rust.\n\nUsage: artichoke [OPTIONS] [programfile] [arguments]...\n\nArguments:\n  [programfile]\n  [arguments]...\n\nOptions:\n      --copyright               print the copyright\n  -e <commands>                 one line of script. Several -e's allowed. Omit [programfile]\n      --with-fixture <fixture>  file whose contents will be read into the `$fixture` global\n  -h, --help                    Print help\n  -V, --version                 Print version\n```\n\n## Design and Goals\n\nArtichoke is [designed to enable experimentation](VISION.md). The top goals of\nthe project are:\n\n- [Support WebAssembly as a build target][o-wasm].\n- Support embedding and executing Ruby in untrusted environments.\n- [Distribute Ruby applications as single-binary artifacts][a-single-binary].\n- [Implement Ruby with state-of-the-art dependencies][a-deps].\n- Experiment with VMs to support [dynamic codegen][a-codegen], [ahead of time\n  compilation][a-compiler], [parallelism and eliminating the\n  GIL][a-parallelism], and novel [memory management and garbage collection\n  techniques][a-memory-management].\n\n## Contributing\n\nArtichoke aspires to be an [MRI Ruby-compatible][mri-target] implementation of\nthe Ruby programming language. [There is lots to do][github-issues].\n\nIf Artichoke does not run Ruby source code in the same way that MRI does, it is\na bug and we would appreciate if you [filed an issue so we can fix\nit][file-an-issue].\n\nIf you would like to contribute code 👩‍💻👨‍💻, find an issue that looks interesting\nand leave a comment that you're beginning to investigate. If there is no issue,\nplease file one before beginning to work on a PR. [Good first issues are labeled\n`E-easy`][e-easy].\n\n### Discussion\n\nIf you'd like to engage in a discussion outside of GitHub, you can [join\nArtichoke's public Discord server][discord].\n\n## License\n\n`artichoke` is licensed with the [MIT License](LICENSE) (c) Ryan Lopopolo.\n\nSome portions of Artichoke are derived from third party sources. The READMEs in\neach workspace crate discuss which third party licenses are applicable to the\nsources and derived works in Artichoke.\n\n[ruby-spec]: https://github.com/ruby/spec\n[mri-target]:\n  https://github.com/artichoke/artichoke/blob/trunk/RUBYSPEC.md#mri-target\n[playground]: https://artichoke.run\n[playground-repo]: https://github.com/artichoke/playground\n[webassembly]: https://webassembly.org/\n[nightlies]: https://github.com/artichoke/nightly/releases/latest\n[docker-hub]: https://hub.docker.com/r/artichokeruby/artichoke\n[ruby-build]: https://github.com/rbenv/ruby-build\n[rbenv]: https://github.com/rbenv/rbenv\n[repl]: https://en.wikipedia.org/wiki/Interactive_Ruby_Shell\n[o-wasm]: https://github.com/artichoke/artichoke/labels/O-wasm-unknown\n[a-single-binary]: https://github.com/artichoke/artichoke/labels/A-single-binary\n[a-deps]: https://github.com/artichoke/artichoke/labels/A-deps\n[a-codegen]: https://github.com/artichoke/artichoke/labels/A-codegen\n[a-compiler]: https://github.com/artichoke/artichoke/labels/A-compiler\n[a-parallelism]: https://github.com/artichoke/artichoke/labels/A-parallelism\n[a-memory-management]:\n  https://github.com/artichoke/artichoke/labels/A-memory-management\n[github-issues]: https://github.com/artichoke/artichoke/issues\n[file-an-issue]: https://github.com/artichoke/artichoke/issues/new\n[discord]: https://discord.gg/QCe2tp2\n[e-easy]: https://github.com/artichoke/artichoke/labels/E-easy\n"
        },
        {
          "name": "RUBYSPEC.md",
          "type": "blob",
          "size": 1.2431640625,
          "content": "# Ruby Spec\n\nArtichoke embeds a copy of [ruby/spec][ruby-spec-sources].\n[ruby/spec][ruby-spec] is a set of specifications for testing the Ruby language,\ncore, and standard library packages.\n\nArtichoke enforces that some ruby/specs pass. These specs are tracked in\n[`spec-runner/enforced-specs.toml`].\n\n## MRI Target\n\n**Target**: MRI Ruby 3.1.2.\n\nArtichoke targets recent MRI Ruby. Compatibility with this target is currently\nvery work in progress. As portions of Ruby Core and Stdlib are implemented in\nArtichoke, their behavior targets the most recent MRI. There are many spec\nfailures.\n\n## Running Specs\n\nYou can run these specs for Artichoke crate with the `spec-runner` crate.\n\n### Running the enforced specs\n\n```shell\nbundle exec rake spec\n```\n\n### Running specific specs\n\nTo run specific specs, create a custom spec manifest and pass it as the\npositional argument to the `spec-runner` binary.\n\nFor the `uri` stdlib package:\n\n```toml\n[specs.library.uri]\ninclude = \"all\"\nskip = [\"parse\"]\n```\n\nFor `Array#each` and `Array#length`:\n\n```toml\n[specs.core.array]\ninclude = \"set\"\nspecs = [\n  \"each\",\n  \"length\",\n]\n```\n\n[ruby-spec-sources]: spec-runner/vendor/spec\n[ruby-spec]: https://github.com/ruby/spec\n[`spec-runner/enforced-specs.toml`]: spec-runner/enforced-specs.toml\n"
        },
        {
          "name": "Rakefile",
          "type": "blob",
          "size": 6.7607421875,
          "content": "# frozen_string_literal: true\n\nrequire 'open-uri'\nrequire 'shellwords'\n\nrequire 'bundler/audit/task'\nrequire 'rubocop/rake_task'\nrequire 'tomlrb'\n\ntask default: %i[format lint]\n\ndesc 'Lint sources'\ntask lint: %i[lint:clippy lint:rubocop:autocorrect]\n\nnamespace :lint do\n  RuboCop::RakeTask.new(:rubocop)\n\n  desc 'Lint Rust sources with Clippy'\n  task :clippy do\n    sh 'cargo clippy --workspace --all-features --all-targets'\n    Dir.chdir('spec-runner') do\n      sh 'cargo clippy --workspace --all-features --all-targets'\n    end\n    Dir.chdir('ui-tests') do\n      sh 'cargo clippy --workspace --all-features --all-targets'\n    end\n  end\n\n  desc 'Lint Rust sources with Clippy restriction pass (unenforced lints)'\n  task :'clippy:restriction' do\n    lints = [\n      'clippy::dbg_macro',\n      'clippy::get_unwrap',\n      'clippy::indexing_slicing',\n      'clippy::panic',\n      'clippy::print_stdout',\n      'clippy::expect_used',\n      'clippy::unwrap_used',\n      'clippy::todo',\n      'clippy::unimplemented',\n      'clippy::unreachable'\n    ]\n    command = ['cargo', 'clippy', '--'] + lints.flat_map { |lint| ['-W', lint] }\n    sh command.shelljoin\n  end\nend\n\ndesc 'Format sources'\ntask format: %i[format:rust format:text format:c]\n\nnamespace :format do\n  desc 'Format Rust sources with rustfmt'\n  task :rust do\n    sh 'rustup run --install nightly cargo fmt -- --color=auto'\n    Dir.chdir('spec-runner') do\n      sh 'rustup run --install nightly cargo fmt -- --color=auto'\n    end\n    Dir.chdir('ui-tests') do\n      sh 'rustup run --install nightly cargo fmt -- --color=auto'\n    end\n  end\n\n  desc 'Format text, YAML, and Markdown sources with prettier'\n  task :text do\n    sh 'npm run fmt'\n  end\n\n  desc 'Format .c and .h sources with clang-format'\n  task :c do\n    sh 'npm run fmt:c'\n  end\nend\n\ndesc 'Format sources'\ntask fmt: %i[fmt:rust fmt:text fmt:c]\n\nnamespace :fmt do\n  desc 'Format Rust sources with rustfmt'\n  task :rust do\n    sh 'rustup run --install nightly cargo fmt -- --color=auto'\n    Dir.chdir('spec-runner') do\n      sh 'rustup run --install nightly cargo fmt -- --color=auto'\n    end\n    Dir.chdir('ui-tests') do\n      sh 'rustup run --install nightly cargo fmt -- --color=auto'\n    end\n  end\n\n  desc 'Format text, YAML, and Markdown sources with prettier'\n  task :text do\n    sh 'npm run fmt'\n  end\n\n  desc 'Format .c and .h sources with clang-format'\n  task :c do\n    sh 'npm run fmt:c'\n  end\nend\n\ndesc 'Build Rust workspace'\ntask :build do\n  sh 'cargo build --workspace'\nend\n\ndesc 'Build Rust workspace and sub-workspaces'\ntask :'build:all' do\n  sh 'cargo build --workspace'\n  Dir.chdir('fuzz') do\n    sh 'cargo build --workspace'\n  end\n  Dir.chdir('spec-runner') do\n    sh 'cargo build --workspace'\n  end\n  Dir.chdir('ui-tests') do\n    sh 'cargo build --workspace'\n  end\nend\n\ndesc 'Generate Rust API documentation'\ntask :doc do\n  ENV['RUSTDOCFLAGS'] = '-D warnings -D rustdoc::broken_intra_doc_links --cfg docsrs'\n  sh 'rustup run --install nightly cargo doc --workspace'\nend\n\ndesc 'Generate Rust API documentation and open it in a web browser'\ntask :'doc:open' do\n  ENV['RUSTDOCFLAGS'] = '-D warnings -D rustdoc::broken_intra_doc_links --cfg docsrs'\n  sh 'rustup run --install nightly cargo doc --workspace --open'\nend\n\ndesc 'Run enforced ruby/spec suite'\ntask :spec do\n  Dir.chdir('spec-runner') do\n    sh 'cargo run -q -- enforced-specs.toml'\n  end\nend\n\ndesc 'Run Artichoke unit tests'\ntask test: %i[test:unit]\n\nnamespace :test do\n  # TODO: Add fuzz into all list when tests work\n  desc 'Run all tests'\n  task all: %i[unit ui]\n\n  desc 'Run fuzz tests (Fuzz the interpreter for crashes with arbitrary input)'\n  task :fuzz do\n    Dir.chdir('fuzz') do\n      sh 'cargo test --workspace'\n    end\n  end\n\n  desc 'Run ui tests (check exact stdout/stderr of Artichoke binaries)'\n  task :ui do\n    sh 'cargo build'\n    Dir.chdir('ui-tests') do\n      sh 'cargo test --workspace'\n    end\n  end\n\n  desc 'Run unit tests'\n  task :unit do\n    sh 'cargo test --workspace'\n  end\nend\n\ndesc 'Run Artichoke with LeakSanitizer'\ntask :'sanitizer:leak' do\n  ENV['RUSTFLAGS'] = '-Z sanitizer=leak'\n  ENV['RUST_BACKTRACE'] = '1'\n  host = `rustc -vV | grep host | cut -d' ' -f2`.chomp\n  command = ['rustup', 'run', '--install', 'nightly', 'cargo', 'test', '--workspace', '--all-features', '--target', host]\n  sh command.shelljoin\nend\n\nBundler::Audit::Task.new\n\nnamespace :toolchain do\n  desc 'Sync Rust toolchain to all sources'\n  task sync: %i[sync:manifests sync:ci]\n\n  rust_toolchain = Tomlrb.load_file('rust-toolchain.toml', symbolize_keys: true)\n  toolchain_version = rust_toolchain[:toolchain][:channel]\n\n  namespace :sync do\n    desc 'Sync the root rust-toolchain version to all crate manifests'\n    task :manifests do\n      regexp = /^rust-version = \"(.*)\"$/\n      next_rust_version = \"rust-version = \\\"#{toolchain_version}\\\"\"\n\n      pkg_files = FileList.new(['Cargo.toml', 'fuzz/Cargo.toml', 'spec-runner/Cargo.toml', 'ui-tests/Cargo.toml'])\n\n      failures = pkg_files.map do |file|\n        contents = File.read(file)\n\n        if (existing_version = contents.match(regexp))\n          File.write(file, contents.gsub(regexp, next_rust_version)) if existing_version != next_rust_version\n          next\n        end\n\n        puts \"Failed to update #{file}, ensure there is a rust-version specified\" if Rake.verbose\n        file\n      end.compact\n\n      raise 'Failed to update some rust-versions' if failures.any?\n    end\n\n    desc 'Sync the root rust-toolchain version to CI jobs'\n    task :ci do\n      workflow_files = FileList.new('.github/workflows/*.yaml')\n\n      workflow_files.each do |file|\n        contents = File.read(file)\n        contents = contents.gsub(/(toolchain: \"?)\\d+\\.\\d+\\.\\d+(\"?)/, \"\\\\1#{toolchain_version}\\\\2\")\n\n        File.write(file, contents)\n      end\n    end\n  end\nend\n\nKNOWN_WORKSPACE_PREFIXES = %w[\n  artichoke\n  mezzaluna\n  scolapasta\n  spinoso\n].freeze\n\nKNOWN_FIRST_PARTY = %w[\n  boba\n  focaccia\n  intaglio\n  known-folders\n  posix-space\n  qed\n  rand_mt\n  raw-parts\n  roe\n  strftime-ruby\n  sysdir\n].freeze\n\nnamespace :deps do\n  desc 'List first-party crate dependencies'\n  task :firstparty do\n    deps = File.readlines('Cargo.lock', chomp: true)\n      .select { |line| line.start_with?('name = ') }\n      .map { |line| line.delete_prefix('name = \"') }\n      .map { |line| line.delete_suffix('\"') }\n      .select { |dep| KNOWN_FIRST_PARTY.include?(dep) || KNOWN_WORKSPACE_PREFIXES.any? { |prefix| dep.include?(prefix) } }\n    puts deps\n  end\n\n  desc 'List third-party crate dependencies'\n  task :thirdparty do\n    deps = File.readlines('Cargo.lock', chomp: true)\n      .select { |line| line.start_with?('name = ') }\n      .map { |line| line.delete_prefix('name = \"') }\n      .map { |line| line.delete_suffix('\"') }\n      .reject { |dep| KNOWN_FIRST_PARTY.include?(dep) }\n      .reject { |dep| KNOWN_WORKSPACE_PREFIXES.any? { |prefix| dep.include?(prefix) } }\n    puts deps\n  end\nend\n"
        },
        {
          "name": "VISION.md",
          "type": "blob",
          "size": 5.58984375,
          "content": "# Design and Goals\n\nArtichoke is a platform for building Ruby implementations. You can build a\n[ruby/spec]-compliant Ruby by combining Artichoke core, a VM and parser backend,\nand the Artichoke frontend.\n\nArtichoke is designed to enable experimentation. The top goals of the project\nare:\n\n- [Support WebAssembly as a build target][wasm-target].\n- Support embedding and executing Ruby in untrusted environments.\n- [Distribute Ruby applications as single-binary artifacts][a-single-binary].\n- [Implement Ruby with state-of-the-art dependencies][a-deps].\n- Experiment with VMs to support [dynamic codegen][a-codegen], [ahead of time\n  compilation][a-compiler], [parallelism and eliminating the\n  GIL][a-parallelism], and novel [memory management and garbage collection\n  techniques][a-memory-management].\n\n## Core\n\n`artichoke-core` contains traits for the core set of APIs an interpreter must\nimplement. The traits in [`artichoke-core`] define:\n\n- APIs a concrete VM must implement to support the Artichoke runtime and\n  frontends.\n- How to box polymorphic core types into [Ruby `Value`].\n- [Interoperability] between the VM backend and the Rust-implemented core.\n\nSome of the core APIs a Ruby implementation must provide are [evaluating\ncode][core-eval], [converting Rust data structures to boxed `Value`s on the\ninterpreter heap][core-converter], and [interning `Symbol`s][core-intern].\n\n### Runtime\n\nArtichoke core provides an implementation-agnostic Ruby runtime. The runtime in\nArtichoke core will pass 100% of the [Core][a-ruby-core] and [Standard\nLibrary][a-ruby-stdlib] Ruby specs. The runtime will be implemented in a hybrid\nof Rust and Ruby. The [`Regexp` implementation][extn-regexp] is a representative\nexample of the approach.\n\n### Embedding\n\nArtichoke core will support embedding with:\n\n- Multiple [file system backends], including an in-memory [virtual file system].\n- Multiple [`ENV` backends][extn-env], including an in-memory `HashMap` backend.\n- Optional C dependencies via multiple implementations of Core classes, e.g.\n  [`Regexp`][extn-regexp].\n- [Optional standard-library][a-optional-stdlib].\n- [Optional multi-threading][a-parallelism].\n- Capturable IO.\n\n### Experimentation\n\nA Rust-implemented Ruby runtime offers an opportunity to experiment with:\n\n- [Improving performance][a-performance] of MRI Core and Standard Library.\n- Implementing the runtime with [state-of-the-art dependencies][a-deps].\n- Distributing [single-binary builds][a-single-binary].\n\n## VM Backend\n\nArtichoke core does not provide a parser or a VM for executing Ruby. VM backends\nprovide these functions.\n\nArtichoke currently includes an [mruby backend][b-mruby]. There are plans to add\nan [MRI backend][b-mri] and a [pure Rust backend][b-artichoke].\n\nVM backends are responsible for passing 100% of the [Language][a-ruby-language]\nRuby specs.\n\n### Experimentation\n\nVM backends offer an opportunity to experiment with:\n\n- [Dynamic codegen][a-codegen].\n- [Compilation][a-compiler].\n- [Parallelism and eliminating the GIL][a-parallelism].\n- [Memory management and garbage collection techniques][a-memory-management].\n\n## Frontend\n\nArtichoke will include `ruby` and `irb` [binary frontends][a-frontend] with\ndynamically selectable VM backends.\n\nArtichoke will produce a [WebAssembly frontend][wasm-target].\n\nArtichoke will include implementation-agnostic [C APIs][a-c-api] targeting:\n\n- [MRI API][capi-mri] from Ruby.\n- [`MRB_API`][capi-mruby] from mruby.\n\n[ruby/spec]: https://github.com/ruby/spec\n[wasm-target]: https://github.com/artichoke/artichoke/labels/O-wasm-unknown\n[a-single-binary]: https://github.com/artichoke/artichoke/labels/A-single-binary\n[a-deps]: https://github.com/artichoke/artichoke/labels/A-deps\n[a-codegen]: https://github.com/artichoke/artichoke/labels/A-codegen\n[a-compiler]: https://github.com/artichoke/artichoke/labels/A-compiler\n[a-parallelism]: https://github.com/artichoke/artichoke/labels/A-parallelism\n[a-memory-management]:\n  https://github.com/artichoke/artichoke/labels/A-memory-management\n[`artichoke-core`]: https://artichoke.github.io/artichoke/artichoke_core/\n[ruby `value`]:\n  https://artichoke.github.io/artichoke/artichoke_core/value/trait.Value.html\n[interoperability]:\n  https://artichoke.github.io/artichoke/artichoke_core/convert/index.html\n[core-eval]:\n  https://artichoke.github.io/artichoke/artichoke_core/eval/trait.Eval.html\n[core-converter]:\n  https://artichoke.github.io/artichoke/artichoke_core/convert/trait.ConvertMut.html\n[core-intern]:\n  https://artichoke.github.io/artichoke/artichoke_core/intern/trait.Intern.html\n[a-ruby-core]: https://github.com/artichoke/artichoke/labels/A-ruby-core\n[a-ruby-stdlib]: https://github.com/artichoke/artichoke/labels/A-ruby-stdlib\n[extn-regexp]: artichoke-backend/src/extn/core/regexp\n[file system backends]:\n  https://github.com/artichoke/artichoke/labels/A-filesystem\n[virtual file system]:\n  https://artichoke.github.io/artichoke/artichoke_backend/load_path/index.html\n[extn-env]: artichoke-backend/src/extn/core/env\n[a-optional-stdlib]:\n  https://github.com/artichoke/artichoke/labels/A-optional-stdlib\n[a-performance]: https://github.com/artichoke/artichoke/labels/A-performance\n[a-frontend]: https://github.com/artichoke/artichoke/labels/A-frontend\n[b-mruby]: https://github.com/artichoke/artichoke/labels/B-mruby\n[b-mri]: https://github.com/artichoke/artichoke/labels/B-MRI\n[b-artichoke]: https://github.com/artichoke/artichoke/labels/B-Artichoke\n[a-ruby-language]: https://github.com/artichoke/artichoke/labels/A-ruby-language\n[a-c-api]: https://github.com/artichoke/artichoke/labels/A-C-API\n[capi-mri]: https://github.com/artichoke/artichoke/labels/CAPI-MRI\n[capi-mruby]: https://github.com/artichoke/artichoke/labels/CAPI-mruby\n"
        },
        {
          "name": "artichoke-backend",
          "type": "tree",
          "content": null
        },
        {
          "name": "artichoke-core",
          "type": "tree",
          "content": null
        },
        {
          "name": "artichoke-load-path",
          "type": "tree",
          "content": null
        },
        {
          "name": "artichoke-readline",
          "type": "tree",
          "content": null
        },
        {
          "name": "artichoke-repl-history",
          "type": "tree",
          "content": null
        },
        {
          "name": "build.rs",
          "type": "blob",
          "size": 5.2236328125,
          "content": "#![warn(clippy::all)]\n#![warn(clippy::pedantic)]\n#![allow(clippy::restriction)]\n#![allow(clippy::missing_panics_doc)]\n\nuse std::env;\nuse std::ffi::OsString;\nuse std::fmt;\nuse std::process::Command;\nuse std::str;\n\nuse tz::UtcDateTime;\n\n#[derive(Default, Debug, Clone, Copy, Hash, PartialEq, Eq, PartialOrd, Ord)]\nstruct Date {\n    pub year: i32,\n    pub month: u32,\n    pub day: u32,\n}\n\nimpl From<UtcDateTime> for Date {\n    fn from(date: UtcDateTime) -> Self {\n        Self {\n            year: date.year(),\n            month: date.month().into(),\n            day: date.month_day().into(),\n        }\n    }\n}\n\nimpl fmt::Display for Date {\n    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n        write!(f, \"{:04}-{:02}-{:02}\", self.year, self.month, self.day)\n    }\n}\n\npub fn build_release_metadata() {\n    let version = env::var_os(\"CARGO_PKG_VERSION\").expect(\"CARGO_PKG_VERSION was not set in build.rs\");\n    let version = version\n        .to_str()\n        .expect(\"CARGO_PKG_VERSION was not a valid UTF-8 String\");\n    let birth_date = birthdate();\n    let build_date = build_date();\n    let release_date = build_date;\n    let revision_count = revision_count();\n    let platform = platform();\n    let copyright = copyright(birth_date, build_date);\n    let description = description(version, release_date, revision_count, platform.as_str());\n\n    emit(\"RUBY_RELEASE_DATE\", release_date);\n    emit(\"RUBY_RELEASE_YEAR\", build_date.year);\n    emit(\"RUBY_RELEASE_MONTH\", build_date.month);\n    emit(\"RUBY_RELEASE_DAY\", build_date.day);\n    emit(\"RUBY_REVISION\", revision_count.unwrap_or(0));\n    emit(\"RUBY_PLATFORM\", platform);\n    emit(\"RUBY_COPYRIGHT\", copyright);\n    emit(\"RUBY_DESCRIPTION\", description);\n    emit(\"ARTICHOKE_COMPILER_VERSION\", compiler_version().unwrap_or_default());\n}\n\nfn emit<T>(env: &str, value: T)\nwhere\n    T: fmt::Display,\n{\n    println!(\"cargo:rustc-env={env}={value}\");\n}\n\nfn birthdate() -> Date {\n    // ```console\n    // $ git rev-list --format=%B --max-parents=0 trunk\n    // commit db318759dad41686be679c87c349fcb5ff0a396c\n    // Initial commit\n    // $ git show -s --format=\"%ct\" db318759dad41686be679c87c349fcb5ff0a396c\n    // 1554600621\n    // $ git show -s --format=\"%ci\" db318759dad41686be679c87c349fcb5ff0a396c\n    // 2019-04-06 18:30:21 -0700\n    // ```\n    let time = 1_554_600_621;\n    UtcDateTime::from_timespec(time, 0)\n        .expect(\"Could not construct datetime from birthdate\")\n        .into()\n}\n\nfn build_date() -> Date {\n    // Enable reproducibility for `RUBY_RELEASE_DATE` and friends by respecting\n    // the `SOURCE_DATE_EPOCH` env variable.\n    //\n    // https://reproducible-builds.org/docs/source-date-epoch/\n    println!(\"cargo:rerun-if-env-changed=SOURCE_DATE_EPOCH\");\n    let datetime = if let Some(timestamp) = env::var_os(\"SOURCE_DATE_EPOCH\") {\n        let seconds_since_epoch = timestamp\n            .into_string()\n            .expect(\"SOURCE_DATE_EPOCH was not valid UTF-8\")\n            .parse::<i64>()\n            .expect(\"SOURCE_DATE_EPOCH was not a valid integer\");\n        UtcDateTime::from_timespec(seconds_since_epoch, 0)\n            .expect(\"Could not construct datetime from SOURCE_DATE_EPOCH\")\n    } else {\n        UtcDateTime::now().expect(\"Could not retreive current timestamp\")\n    };\n    datetime.into()\n}\n\nfn revision_count() -> Option<usize> {\n    let revision_count = Command::new(\"git\")\n        .arg(\"rev-list\")\n        .arg(\"--count\")\n        .arg(\"HEAD\")\n        .output()\n        .ok()?;\n    let output = String::from_utf8(revision_count.stdout).ok()?;\n    output.trim().parse::<usize>().ok()\n}\n\nfn platform() -> String {\n    env::var_os(\"TARGET\")\n        .expect(\"cargo-provided TARGET env var not set\")\n        .to_str()\n        .expect(\"cargo-provided TARGET env var was not valid UTF-8\")\n        .to_owned()\n}\n\nfn copyright(birth_date: Date, build_date: Date) -> String {\n    match build_date.year {\n        build_date_year if build_date_year == birth_date.year => format!(\n            \"artichoke - Copyright (c) {} Ryan Lopopolo <rjl@hyperbo.la>\",\n            build_date.year\n        ),\n        build_date_year if build_date_year > birth_date.year => format!(\n            \"artichoke - Copyright (c) {}-{} Ryan Lopopolo <rjl@hyperbo.la>\",\n            birth_date.year, build_date.year\n        ),\n        _ => format!(\n            \"artichoke - Copyright (c) {} Ryan Lopopolo <rjl@hyperbo.la>\",\n            birth_date.year\n        ),\n    }\n}\n\nfn description(version: &str, release_date: Date, revision_count: Option<usize>, platform: &str) -> String {\n    if let Some(revision_count) = revision_count {\n        format!(\"artichoke {version} ({release_date} revision {revision_count}) [{platform}]\",)\n    } else {\n        format!(\"artichoke {version} ({release_date}) [{platform}]\")\n    }\n}\n\nfn compiler_version() -> Option<String> {\n    let cmd = env::var_os(\"RUSTC\").unwrap_or_else(|| OsString::from(\"rustc\"));\n    let compiler_version = Command::new(cmd).arg(\"-V\").output().ok()?;\n    let compiler_version = String::from_utf8(compiler_version.stdout).ok()?;\n    let mut compiler_version = compiler_version.trim().to_owned();\n    if let Ok(compiler_host) = env::var(\"HOST\") {\n        compiler_version.push_str(\" on \");\n        compiler_version.push_str(&compiler_host);\n    }\n    Some(compiler_version)\n}\n\nfn main() {\n    build_release_metadata();\n}\n"
        },
        {
          "name": "clippy.toml",
          "type": "blob",
          "size": 0.048828125,
          "content": "doc-valid-idents = [\n  \"CRuby\",\n  \"DoS\",\n  \"..\"\n]\n"
        },
        {
          "name": "deny.toml",
          "type": "blob",
          "size": 0.5712890625,
          "content": "[advisories]\nignore = []\n\n[licenses]\nallow = [\n  \"Apache-2.0\",\n  \"BSD-3-Clause\",\n  \"BSL-1.0\",\n  \"ISC\",\n  \"MIT\",\n  \"MIT-0\",\n  \"Unicode-DFS-2016\",\n]\n\n[bans]\n# bitflags transition to v2 and usually there are duplicates of `windows-sys` in\n# the lockfile.\nmultiple-versions = \"warn\"\nwildcards = \"deny\"\nhighlight = \"all\"\nallow = []\ndeny = [\n  { name = \"time\", version = \">=0.2.0\" },\n  # See https://github.com/artichoke/artichoke/pull/2564 for more context.\n  { name = \"dirs-sys\", version = \">= 0.4.1\" },\n]\nskip = []\nskip-tree = []\n\n[sources]\nunknown-registry = \"deny\"\nunknown-git = \"deny\"\n"
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "fuzz",
          "type": "tree",
          "content": null
        },
        {
          "name": "mezzaluna-conversion-methods",
          "type": "tree",
          "content": null
        },
        {
          "name": "mezzaluna-load-path",
          "type": "tree",
          "content": null
        },
        {
          "name": "mezzaluna-loaded-features",
          "type": "tree",
          "content": null
        },
        {
          "name": "mezzaluna-type-registry",
          "type": "tree",
          "content": null
        },
        {
          "name": "package-lock.json",
          "type": "blob",
          "size": 3.232421875,
          "content": "{\n  \"name\": \"@artichokeruby/artichoke\",\n  \"version\": \"0.1.0-pre.0\",\n  \"lockfileVersion\": 3,\n  \"requires\": true,\n  \"packages\": {\n    \"\": {\n      \"name\": \"@artichokeruby/artichoke\",\n      \"version\": \"0.1.0-pre.0\",\n      \"devDependencies\": {\n        \"@artichokeruby/clang-format\": \"github:artichoke/clang-format#semver:^0.17.0\",\n        \"prettier\": \"^3.4.2\"\n      }\n    },\n    \"node_modules/@artichokeruby/clang-format\": {\n      \"version\": \"0.17.0\",\n      \"resolved\": \"git+ssh://git@github.com/artichoke/clang-format.git#5149eafdbc048c34ad0b32464bc56872ab42a0c2\",\n      \"dev\": true,\n      \"license\": \"MIT\",\n      \"dependencies\": {\n        \"chalk\": \"^5.3.0\",\n        \"commander\": \"^12.0.0\",\n        \"ignore\": \"^5.3.1\",\n        \"p-limit\": \"^5.0.0\"\n      },\n      \"bin\": {\n        \"clang-format\": \"bin/clang-format.js\"\n      }\n    },\n    \"node_modules/chalk\": {\n      \"version\": \"5.3.0\",\n      \"resolved\": \"https://registry.npmjs.org/chalk/-/chalk-5.3.0.tgz\",\n      \"integrity\": \"sha512-dLitG79d+GV1Nb/VYcCDFivJeK1hiukt9QjRNVOsUtTy1rR1YJsmpGGTZ3qJos+uw7WmWF4wUwBd9jxjocFC2w==\",\n      \"dev\": true,\n      \"engines\": {\n        \"node\": \"^12.17.0 || ^14.13 || >=16.0.0\"\n      },\n      \"funding\": {\n        \"url\": \"https://github.com/chalk/chalk?sponsor=1\"\n      }\n    },\n    \"node_modules/commander\": {\n      \"version\": \"12.0.0\",\n      \"resolved\": \"https://registry.npmjs.org/commander/-/commander-12.0.0.tgz\",\n      \"integrity\": \"sha512-MwVNWlYjDTtOjX5PiD7o5pK0UrFU/OYgcJfjjK4RaHZETNtjJqrZa9Y9ds88+A+f+d5lv+561eZ+yCKoS3gbAA==\",\n      \"dev\": true,\n      \"engines\": {\n        \"node\": \">=18\"\n      }\n    },\n    \"node_modules/ignore\": {\n      \"version\": \"5.3.1\",\n      \"resolved\": \"https://registry.npmjs.org/ignore/-/ignore-5.3.1.tgz\",\n      \"integrity\": \"sha512-5Fytz/IraMjqpwfd34ke28PTVMjZjJG2MPn5t7OE4eUCUNf8BAa7b5WUS9/Qvr6mwOQS7Mk6vdsMno5he+T8Xw==\",\n      \"dev\": true,\n      \"engines\": {\n        \"node\": \">= 4\"\n      }\n    },\n    \"node_modules/p-limit\": {\n      \"version\": \"5.0.0\",\n      \"resolved\": \"https://registry.npmjs.org/p-limit/-/p-limit-5.0.0.tgz\",\n      \"integrity\": \"sha512-/Eaoq+QyLSiXQ4lyYV23f14mZRQcXnxfHrN0vCai+ak9G0pp9iEQukIIZq5NccEvwRB8PUnZT0KsOoDCINS1qQ==\",\n      \"dev\": true,\n      \"dependencies\": {\n        \"yocto-queue\": \"^1.0.0\"\n      },\n      \"engines\": {\n        \"node\": \">=18\"\n      },\n      \"funding\": {\n        \"url\": \"https://github.com/sponsors/sindresorhus\"\n      }\n    },\n    \"node_modules/prettier\": {\n      \"version\": \"3.4.2\",\n      \"resolved\": \"https://registry.npmjs.org/prettier/-/prettier-3.4.2.tgz\",\n      \"integrity\": \"sha512-e9MewbtFo+Fevyuxn/4rrcDAaq0IYxPGLvObpQjiZBMAzB9IGmzlnG9RZy3FFas+eBMu2vA0CszMeduow5dIuQ==\",\n      \"dev\": true,\n      \"bin\": {\n        \"prettier\": \"bin/prettier.cjs\"\n      },\n      \"engines\": {\n        \"node\": \">=14\"\n      },\n      \"funding\": {\n        \"url\": \"https://github.com/prettier/prettier?sponsor=1\"\n      }\n    },\n    \"node_modules/yocto-queue\": {\n      \"version\": \"1.0.0\",\n      \"resolved\": \"https://registry.npmjs.org/yocto-queue/-/yocto-queue-1.0.0.tgz\",\n      \"integrity\": \"sha512-9bnSc/HEW2uRy67wc+T8UwauLuPJVn28jb+GtJY16iiKWyvmYJRXVT4UamsAEGQfPohgr2q4Tq0sQbQlxTfi1g==\",\n      \"dev\": true,\n      \"engines\": {\n        \"node\": \">=12.20\"\n      },\n      \"funding\": {\n        \"url\": \"https://github.com/sponsors/sindresorhus\"\n      }\n    }\n  }\n}\n"
        },
        {
          "name": "package.json",
          "type": "blob",
          "size": 0.6279296875,
          "content": "{\n  \"name\": \"@artichokeruby/artichoke\",\n  \"version\": \"0.1.0-pre.0\",\n  \"private\": true,\n  \"description\": \"Artichoke is a Ruby made with Rust\",\n  \"keywords\": [\n    \"ruby\",\n    \"rust\",\n    \"wasm\"\n  ],\n  \"repository\": \"github:artichoke/artichoke\",\n  \"author\": \"Ryan Lopopolo <rjl@hyperbo.la> (https://hyperbo.la/)\",\n  \"homepage\": \"https://www.artichokeruby.org\",\n  \"bugs\": \"https://github.com/artichoke/artichoke/issues\",\n  \"devDependencies\": {\n    \"@artichokeruby/clang-format\": \"github:artichoke/clang-format#semver:^0.17.0\",\n    \"prettier\": \"^3.4.2\"\n  },\n  \"scripts\": {\n    \"fmt\": \"prettier --write \\\"**/*\\\"\",\n    \"fmt:c\": \"clang-format\"\n  }\n}\n"
        },
        {
          "name": "rust-toolchain.toml",
          "type": "blob",
          "size": 0.0302734375,
          "content": "[toolchain]\nchannel = \"1.83.0\"\n"
        },
        {
          "name": "rustfmt.toml",
          "type": "blob",
          "size": 0.3203125,
          "content": "# Artichoke crates always use the 2021 edition.\nedition = \"2021\"\n\nhard_tabs = false\nnewline_style = \"Unix\"\n\n# Wider width lines and less-aggressive line breaking.\nmax_width = 119\nuse_small_heuristics = \"Default\"\n\nuse_field_init_shorthand = true\nuse_try_shorthand = true\n\n# nightly only option\ngroup_imports = \"StdExternalCrate\"\n"
        },
        {
          "name": "scolapasta-aref",
          "type": "tree",
          "content": null
        },
        {
          "name": "scolapasta-fixable",
          "type": "tree",
          "content": null
        },
        {
          "name": "scolapasta-hex",
          "type": "tree",
          "content": null
        },
        {
          "name": "scolapasta-int-parse",
          "type": "tree",
          "content": null
        },
        {
          "name": "scolapasta-path",
          "type": "tree",
          "content": null
        },
        {
          "name": "scolapasta-strbuf",
          "type": "tree",
          "content": null
        },
        {
          "name": "scolapasta-string-escape",
          "type": "tree",
          "content": null
        },
        {
          "name": "spec-runner",
          "type": "tree",
          "content": null
        },
        {
          "name": "spinoso-array",
          "type": "tree",
          "content": null
        },
        {
          "name": "spinoso-env",
          "type": "tree",
          "content": null
        },
        {
          "name": "spinoso-exception",
          "type": "tree",
          "content": null
        },
        {
          "name": "spinoso-math",
          "type": "tree",
          "content": null
        },
        {
          "name": "spinoso-random",
          "type": "tree",
          "content": null
        },
        {
          "name": "spinoso-regexp",
          "type": "tree",
          "content": null
        },
        {
          "name": "spinoso-securerandom",
          "type": "tree",
          "content": null
        },
        {
          "name": "spinoso-string",
          "type": "tree",
          "content": null
        },
        {
          "name": "spinoso-symbol",
          "type": "tree",
          "content": null
        },
        {
          "name": "spinoso-time",
          "type": "tree",
          "content": null
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "ui-tests",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}