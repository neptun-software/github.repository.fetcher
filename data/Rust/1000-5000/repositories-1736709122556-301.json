{
  "metadata": {
    "timestamp": 1736709122556,
    "page": 301,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjMxMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "xd009642/tarpaulin",
      "stars": 2575,
      "defaultBranch": "develop",
      "files": [
        {
          "name": ".dockerignore",
          "type": "blob",
          "size": 0.0322265625,
          "content": ".*\ntarget\n*.md\n!README.md\ntests\n\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.25390625,
          "content": "# Generated by Cargo\n# will have compiled files and executables\n**/target\n*.swp\n*.swo\n**/*.rs.bk\n*.log\n*.profdata\n*.profraw\n*.profdata\n# Generated by IntelliJ IDEs\n.idea\ntarpaulin*.json\ntarpaulin-report.html\n# Generated by `cargo test`\ncobertura.xml\nlcov.info\n"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 25.2060546875,
          "content": "# Changelog\n\nFrom 2019 onwards, all notable changes to tarpaulin will be documented in this\nfile.\n\n## [Unreleased]\n### Changed\n- ASLR detection was slightly broken - although it wouldn't break anything unless setting was broken as well.\n\n## [0.31.4] 2024-12-31\n### Added\n- Added `--include-files` argument to only display coverage for the mentioned files (#1667)\n\n## [0.31.3] 2024-11-29\n### Added\n- The `CARGO_TARPAULIN_CONFIG_FILE` environment variable may be used to set the\n  path to the configuration file. The command line argument has precedence,\n  but this environment variable has precedence over `tarpaulin.toml` and `.tarpaulin.toml`.\n\n### Changed\n- For `LD_LIBRARY_PATH` get all link paths from build script outputs\n- Use `PATH` on windows and `DYLIB_LIBRARY_PATH` for mac instead of `LD_LIBRARY_PATH`\n- Add `--stderr` flag to print tarpaulin logs to stderr\n\n## [0.31.2] 2024-08-20\n### Changed\n- Removed debug printout of function map\n\n## [0.31.1] 2024-08-05\n### Added\n- Support for `#[coverage(off)]` to exclude expressions from coverage results\n- Updated llvm_profparsers to llvm-19 version\n\n## [0.31.0] 2024-07-22 \n### Added\n- Ability to remove coveralls from the build making openssl optional.\n\n### Changed\n- No longer print rustflags for report configs with `--print-rust-flags` \n- Now use source code to get function names and locations instead of debug information\n\n## [0.30.0] 2024-05-10\n### Changed\n- Upgraded to syn2 and removed branch coverage module. This only had impact in debug dumps so shouldn't impact users\n- Ignore type definitions in trait implementations\n- Upgrade llvm-profparsers crate and now use sub-report filtering to skip dependency only coverage stats\n\n## [0.29.2] 2024-05-08\n### Changed\n- Update jobserver crate to allow building on alpine\n\n## [0.29.1] 2024-05-03\n### Added\n- Use `RUSTUP_HOME` to handle rustup being installed in non-standard directories\n\n## [0.29.0] 2024-05-01\n### Added \n- Troubleshooting guide \n\n### Changed\n- Now override toolchain less-eagerly in windows #1494\n- Fixed build for x86\n- Add summary coverage, covered and coverable to json report #1415\n- Pass RUSTFLAGS to the binary under test for any project bins compiled during test\n- Force coverage of generic functions/methods using `impl Trait` args\n\n## [0.28.0] 2024-04-13\n### Changed\n- No longer add `+nightly` if cargo version is already nightly\n- Adds `-Cstrip=None` to the rustflags to prevent default stripping\n- Update profparsers for llvm 17 and 18 support\n\n## [0.27.3] 2024-01-13\n### Changed\n- Add line reports and make file name float in HTML report\n- Make coverallss report path match linux path format on windows\n\n## [0.27.2] 2023-11-28\n### Changed\n- Don't disable ASLR if it's already disabled\n\n## [0.27.1] 2023-10-02\n### Changed\n- Restore casing of enum clap arguments e.g. `--out` so they match old behaviour\n\n## [0.27.0] 2023-09-17\n### Added\n- Added `--fail-immediately` flag to abort execution the moment the first test failure occurs\n\n### Changed\n- Upgraded from clap v2 to v4. This has a few changes, notably any arguments which can be specified more\nthan once require multiple entries so `--run-types doc test` needs to be turned into `--run-types doc --run-types test`\n- Ignore attributes on methods, functions and trait methods\n\n## [0.26.1] 2023-07-02\n### Changed\n- Expand doc test prefix to cover more of the directory tree to work with the new naming structure\n- Handle -A -W and -D flags in the RUSTFLAGS deduplication\n- Ignore `//` comments as well as `///`\n\n## [0.26.0] 2023-06-16\n### Changed\n- Match `cargo test` behaviour for --no-fail-fast and report coverage when option is selected\n- Simplify cargo version parsing for rust installed via distro package managers\n\n### Removed\n- Unused utility methods on json report type\n\n### Fixed\n- Fix handling of `--all-targets` flag\n\n## [0.25.2] 2023-04-04\n### Added\n- Filtering for other test attributes such as `#[tokio::test]`\n\n### Changed\n- Update to newer faster `llvm_profparser`\n\n## [0.25.1] 2023-02-26\n### Changed\n- Improve logs for processing stripped projects with ptrace\n- Skip missing objects provided by `--objects` if they aren't present when getting reports\n- No longer canonicalise potentially missing paths for `--objects`\n\n## [0.25.0] 2023-01-30\n### Added\n- `--objects` argument to provide other object files with coverage information \n- `--no-dead-code` flag to avoid adding `-Clink-dead-code` to linker flags\n- ptrace support for x86\n\n### Changed\n- Dumped traces are now saved to reports output directory\n- Change event log name to print datetime stamps without colons or slashes so they'll save in other\noperating systems\n- Set `LLVM_PROFILE_FILE` for building tests and delete the generated profraws to ignore build script\ncoverage \n- Remove dependency on memmap\n- Filter out expressions or items with `#[cfg_attr(tarpaulin, no_coverage)]`\n\n## [0.24.0] 2023-01-24\n### Added\n- Merge rustdocflags field from `cargo/config.toml` with env tarpaulin sets\n\n### Changed\n- Create profraw folder if it doesn't exist\n- Normalise UNC paths provided via env or CLI args\n- Make output directory crate root if not provided\n- If root is not provided fall-back to root from manifest for base directory when printing\nreports not the current directory\n- Change exclude-files pattern to use glob crate instead of a regex\n- Set `LLVM_PROFILE_FILE` so profraw files go directly to target dir\n- Make llvm coverage single threaded to avoid concurrency issues when writing profraw files\n\n## [0.23.1] 2022-11-18\n### Changed\n- Fix linux cfg instead of ptrace\\_supported cfg on event log for ARM linux builds\n\n## [0.23.0] 2022-11-18\n### Changed\n- Look for existing profraws before spawning test\n- Add empty `<a>` wrapping elements to improve mouseless navigation of HTML reports #1120 \n- Disable ptrace engine support for non-x64 architectures\n\n### Removed\n- Travis install script - users should use one of the other fast install tools\n\n## [0.22.0] 2022-10-09\n### Added\n- Working llvm coverage instrumentation (coverage now works on Mac and Windows!)\n- `--post-test-delay` for tests which spawn a process (default 1s for llvm coverage)\n\n### Changed\n- Update quick-xml to 0.25\n- Make --ignore-tests the default and add a flag --include-tests to reapply the old behaviour\n- profraw files moved to `$TARGET_DIR/tarpaulin/profraws` (configurable via `Config::set_profraw_folder`)\n\n## [0.21.0] 2022-08-30\n### Changed\n- Fix issue in parsing output from `cargo --version` with some beta versions (support beta.n)\n- Forward `RUSTC_BOOTSTRAP` to cargo when building test binary #1074\n\n## [0.20.1] 2022-05-24\n### Added\n- Added support for `--out stdout` to print uncovered lines without enabling `--verbose` logging\n\n### Changed\n- Add max line for each file into source analysis and filter out lines beyond this range #1016\n- Reject traces with a line of 0\n\n## [0.20.0] 2022-03-20\n### Added\n\n### Changed\n- Stop adding `LD_LIBRARY_PATHS` to process env twice\n- [Internal] can now run `cargo test` on tarpaulin without need of `--test-threads 1`\n- Force --test-threads 1 for --follow-exec unless there's `--implicit-test-threads`\n- Add markers to event log to show where state machine iterations start and end, fix fork parent tracing\n- Handle exec following in vfork children\n- Continue vfork parents so test execution isn't stalled when tracing children\n- Make `--forward` default signal behaviour\n- Fix follow-exec aliasing for config file\n- Fix `force_clean` merging to take into account the default being true\n\n## [0.19.1] 2022-01-16\n### Added\n- Added support for `RUST_TEST_THREADS` to specify test threads instead of --test-threads\n\n### Changed\n- Support skip-clean in config files and implement prioritisation in merges\n- Fix issue where in a workspace with different run types the package IDs can become misaligned with test binaries\n\n## [0.19.0] 2021-12-27\n### Added\n- Check build script output from cargo build and use it to set `LD_LIBRARY_PATH` to match cargo test behaviour\n- `--implicit-test-flags` argument so that `--test-threads` isn't passed into the test binary\n\n### Changed\n- Parse RUSTFLAGS and RUSTDOCFLAGS to remove duplicate entries #891\n- Explicitly pass `--test-threads` to test binary to counteract cpu affinity being set to 1 CPU\n\n### Removed\n\n## [0.18.5] 2021-11-05\n### Added\n\n### Changed\n- Correct report line-rate in cobertura to use coverage percentage of `TraceMap` instead of averaging package line-rate\n\n### Removed\n\n## [0.18.4] 2021-11-04\n### Added\n- Support for `#[no_coverage]` to exclude expressions from coverage results\n\n### Changed\n- Add division by zero check for cobertura package line-rate\n\n### Removed\n\n## [0.18.3] 2021-10-24\n### Added\n- Added support for doctest `no_run` attribute\n- Add support for source filter via inner attributes\n\n### Changed\n- [INTERNAL] Made link-dead-code apply for non-windows llvm instrumentation builds\n- Consolidate fn/impl-fn/trait-fn source analysis to use same implementation for consistency\n- Add check to make sure a `DirEntry` with a .rs extension is actually a file and not a directory fixes #857\n- Make `path_utils`, `source_analysis` and `statemachine` public modules\n- Add fork child to PID map to fix #790\n\n### Removed\n\n## [0.18.2] 2021-09-05\n### Added\n\n### Changed\n- Fix #819 incorrect handling of test args caused by removing the executable path as first program arg in execve\n- Now factor in try and return blocks in reachability calculation\n- Remove erroneous filtering of function calls that take a single line with arguments present\n\n### Removed\n\n## [0.18.1] 2021-09-03\n### Added\n\n### Changed\n- `--verbose` now calls cargo with `-v` flag\n- Now handles string values for rustflags in .cargo/config not just a list of values\n- [INTERNAL] If llvm coverage is enabled and test binary can't be loaded start with empty `TraceMap`\n- Config parse errors are logged\n- Setting the processor affinity now uses an existing core from the initial affinity mask instead of defaulting to the first one (see issue #817)\n\n### Removed\n\n## [0.18.0] 2021-06-28\n### Added\n\n### Changed\n- Updated logging so for the build mode it says \"launching binary\" instead of\n\"launching test\"\n- Don't apply `--color` argument to test executables if \"auto\" to prevent issues\nwith tests that can't have color controlled\n- Fix directory that `cargo clean` is run from\n- Reduce number of cleans fixing issue where only last run-type was ran\n- Clean without `cargo clean` removing directory to preserve coverage run delta reporting\n- Set `CARGO_MANIFEST_DIR` when running doc tests\n- Stop processing a DWARF line number program after the end sequence is hit\n- If a breakpoint gets disabled due to instruction clash also disable the first breakpoint\nthat fell upon that aligned address\n- Make percentage change in CLI printout two decimal places\n\n### Removed\n\n## [0.18.0-alpha2] 2021-04-16\n### Added\n- Check if user sets -Cdebuginfo and remove it #601\n- INTERNAL Added ability to build with LLVM coverage instrumentation and detect\ncompiler support. This isn't enabled so should have no effect it's just the\nstart of the support work.\n- Now factors in rustflags from toml files #528\n- Now able to add to rustflags via CLI args and via tarpaulin config files\n- Added `--skip-clean` arg as an inverse to `--force-clean` and made cleaning default\n\n### Changed\n- Make doctest prefix matching less specific as the naming convention changed again\n- Ensure report is always generated if coverage is below failure threshold\n- Rearrange crate internals and enable cross compilation for windows and macos.\nThis doesn't allow tarpaulin to work on these Operating Systems but it will\nprint an error and exit instead of failing to build\n- Fixed `--force-clean` so it actually cleans the project\n- Change event log to now contain a time for each event\n- Add project name to coverage report in target dir to make things nicer for people\nreusing a target dir for multiple projects (#710)\n\n### Removed\n\n## [0.18.0-alpha1] 2021-02-14\n### Added\n- Added `--color` option matching cargo arg\n- `--follow-exec` option making exec tracing non-default\n- `--jobs` option matching the one in cargo test\n\n### Changed\n- Check through memory map for the first entry belonging to the executable [FIX]\n- Pass through the non-zero exit code from cargo (issue #627)\n- Change doctest source resolution to accommodate for binary renaming in nightly\n1.50.0\n- Changed path prefix in doctests to go from workspace package root not project root\n- Added source location to debug event logs\n- Improve error message for building tests to include target name that failed\n- Hidden file filtering only applied for folders inside project directory not\nany folder on path. Fixes #682\n- Removed unimplemented `toml` report\n\n### Removed\n\n## [0.17.0] - 2020-11-10 [YANKED]\n### Added\n- Now trace into executed binaries\n- Added `--avoid-cfg-tarpaulin` flag to remove `--cfg=tarpaulin` from the\n`RUSTFLAGS`\n\n### Changed\n- Address offset mapping has been added which allows us to compile binaries\nwithout changing the relocation model\n- Tie match patterns to a single logical line\n- Check if unable to read file to string and skip source analysis for it if \nthat's the case\n\n### Removed\n\n## [0.16.0] - 2020-11-02\n### Added\n- `--command` option to build and run a binary for testing CLI apps\n\n### Changed\n- Make `--run-types` and `--out` case insensitive\n- Filter executables on command not run type to fix #610\n\n### Removed\n\n## [0.15.0] - 2020-10-17\n### Added\n\n### Changed\n- Moved from `log` and `env_logger` to `tracing`\n- Correct field name for `--fail-under` in config file from `fail_under` to \n`fail-under`\n- Fix process deadlock when compiler diagnostic error or ICE occur\n- Ignore non-project files when checking source locations in DWARF (issue #566)\n\n### Removed\n\n## [0.14.3] - 2020-08-31\n### Added\n- Added `--fail-under` flag to set minimum coverage required for a run\n- Added `--print-rust-flags` and `--print-rustdoc-flags` to print the set of \n`RUSTFLAGS` and `RUSTDOCFLAGS` that can occur across all configs to aid user \ndebugging\n- Source analysis for group, await, async block, try and try block expressions\n- `#[tarpaulin::skip]` and `#[cfg(not(tarpaulin_include))]` can now work in\nfile inner attributes.\n\n### Changed\n- Don't report coverage when not running tests\n- Inline react scripts to HTML to allow rendering on more restrictive security\npolicies (issue #534)\n- Check addresses are within .text section\n- Apply line one filtering to all files not just src/main.rs\n\n### Removed\n\n## [0.14.2] - 2020-07-10\n### Added\n- Added `--all-targets` to config file\n\n### Changed\n- Actually pass `--all-targets` to cargo\n- Merge more CLI options with active config (no-run, no-default-features, \nignore-panics, forward-signals, run-ignored, release, count, all-features, \nall-targets, line-coverage, branch-coverage, offline, timeout, features, \nout, arguments passed to test executable, -Z)\n- Update stats for all traces when they match a single address\n- Correct handling of doc tests in workspaces as doctest name is relative to \npackage root not workspace root\n- Return an error if a doctest fails to compile\n- Include files with no coverable lines in Html report\n- `--ignore-panics` now ignores `assert_*` and `debug_assert*` macros\n\n### Removed\n\n## [0.14.1] - 2020-07-01\n### Added\n- run-types for lib, bins and all-targets\n- `--tests` `--lib`, `--examples, `--bins`, `--doc`, `--benches`, \n`--all-targets` flags matching `cargo test`\n- Add named test running and flags `--test`, `--example`, `--bin`, `--bench`\n- Equivalent options for `--no-fail-fast` and `--profile`\n- Filtering of `CARGO_HOME` contents when it exists in project directory\n- `--debug` or `--dump-traces` now outputs a json log format that can be used \nto plot tarpaulin execution\n\n### Changed\n- Now merge run-types in configs\n\n### Removed\n\n## [0.14.0] - 2020-06-25\n### Added\n- Filtering for `cfg(not(tarpaulin_include))` also adding `--cfg=tarpaulin` to default config\n- Support for tool attribute `#[tarpaulin::skip]`\n\n### Changed\n\n### Removed\n\n# [0.13.4] - 2020-06-23 [YANKED]\n### Added\n- Add `--cfg=tarpaulin` to `RUSTFLAGS` this allows users to use\n`#[cfg(tarpaulin)]` and `#[cfg(not(tarpaulin))]`\n\n### Changed\n- Don't run executables when `--no-run` provided\n- `#[cfg(not(tarpaulin))]` blocks are ignored in source analysis\n\n### Removed \n\n## [0.13.3] - 2020-06-06\n### Added\n\n### Changed\n- Fix issue where doc tests could hang if stdout buffer filled (#402)\n- No longer report test failure if a `should_panic` doc test is ran\n- Clean pre-existing doc tests from target/doctests directory\n- Always print stderr output from cargo when building project\n\n### Removed\n\n## [0.13.2] - 2020-05-25\n### Added\n\n### Changed\n- Make features argument optional again\n\n### Removed\n\n## [0.13.1] - 2020-05-25\n### Added\n\n### Changed\n- `frozen`, `locked`, `force-clean` and `ignore-tests` flags are now propagated\nto feature configurations.\n- `exclude` argument for packages is now propagated and any features existing\nin the `package` list are removed to avoid conflicts\n- Fixed regression where features weren't propagated\n\n### Removed\n\n## [0.13.0] - 2020-05-25\n### Added\n- Compilation target is now accepted through the `--target` parameter.\n\n### Changed\n- Examples coverage now runs the tests that would be ran with `cargo test --examples`\n- Look up previous report from correct target directory.\n- Added doc comments to ignorable lines in source analysis\n- Feature configurations in `tarpaulin.toml` are now run in order of declaration.\n- Compilation failure results in `cargo tarpaulin` execution failure.\n- `workspace` flag is correctly propagated to feature configurations.\n- `features` now takes in a string e.g. `\"f1 f2\"`, instead of an array of strings `[\"f1\", \"f2\"]`.\n- `packages` and `exclude` in workspace configurations are now read.\n\n### Removed\n\n## [0.12.4] - 2020-05-10\n### Added\n\n- The `CARGO_TARPAULIN_TARGET_DIR` environment variable may be used to set the\n  default target directory for tarpaulin artifacts. The command line argument\n  has precedence.\n\n### Changed\n- Find target folder from metadata if not provided and place reports there (fixes running from packages inside workspaces)\n- Using date-locked toolchains no longer defaults to trying to use a toolchain with the channel name and no date\n- The following CLI options now take effect even when a custom config file is\n  in place: `output-dir`, `target-dir`, `root`, `coveralls`, `ciserver`,\n  `report-uri`.\n\n### Removed\n\n## [0.12.3] - 2020-04-16\n### Added\n- Ignore hidden files and folders based on a dot prefix to the folder or filename \n\n### Changed\n- Update object and if an ELF section can't be parsed return an io error instead of letting it continue \nwith an empty section\n- Removed forcing of `opt-level` to 0\n- When `--debug` is provided now print the cargo command/arg list and pass `-vvv` to cargo\n- Create target directory if option given via `--target-dir` doesn't exist\n\n### Removed\n\n## [0.12.2] 2020-04-11\n### Changed\n- Fill in `CARGO_PKG_NAME`, `CARG_PKG_VERSION`, `CARGO_PKG_AUTHORS` and \n`CARGO_MANIFEST_DIR` environment variables when launching tests\n- Filter out executables where profile test is false and run type is `Tests`\n\n## [0.12.1] 2020-04-09\n### Added\n\n### Changed\n- Can now pass a list of values for `--run-types`\n\n### Removed\n\n### Fixed\n- Get manifest directory for packages in workspace so working directory is the same as before 0.12.0\n\n## [0.12.0] 2020-04-06\n### Added\n- Concept of logical lines to map multiple physical lines to a single line for statistics added for split lets statements\n\n### Changed\n- Reverted Dockerfiles to full images added dockerfiles with `-slim` postfix for slim images\n- Added cURL to the slim images\n- `todo!()` macros are now ignored with the `--ignore-panics` flag\n- The HTML output report will no longer fail if a previous run contains a source file that no longer exists\n- Process expression preceding method call in source analysis\n\n### Removed\n\n## [0.11.1] 2020-03-13\n### Added\n- Add support for JSON output, including public functions for querying reports programmatically.\n\n### Changed\n- Pulled `trace` function out of `run` in `main.rs` in order to expose public function for creating\n  `TraceMap` structs.\n- Moved Dockerfiles to slim images\n\n## [0.11.0] 2020-02-26\n### Added\n- Change in coverage between last 2 runs in HTML report\n- Filter attributes on match arms\n- Add toml config files for multiple runs with merged reports and `--config` and `--ignore-config` options \n\n### Changed\n- Now instrument multiple points in the same binary for the same line to remove false negatives\n- Filter out constants from coverage results\n\n### Removed\n\n## [0.10.2] 2020-01-15\n### Added\n\n### Changed\n- Dropped log dependency to 0.4.8 as later versions have been yanked\n\n### Removed\n\n## [0.10.1] 2020-01-15 [YANKED]\n### Added\n- Filtering of attributes on `loop`, `for` and `while` expressions\n- Added support for `lcov.info` report\n\n### Changed\n- Updated dependencies including `Cargo` to mitigate #319\n\n### Removed\n\n## [0.10.0] 2019-12-07\n### Added\n- `--locked` and `--frozen` options to mirror `cargo test` options\n- `--target-dir` option to mirror `cargo test` and `cargo build` options\n- `--offline` option to mirror `cargo test` and `cargo build` options\n\n### Changed\n- Fixed issue where examples were ran with `RunType::Tests`\n- No longer pass `--quiet` to examples\n- Updated futures test for stable features\n- Split up docker run stages to optimise build times and added `.dockerignore`\n\n### Removed\n\n## [0.9.2] 2019-11-19\n### Added\n- Added Benchmarks to `RunType` to allow coverage of benchmark tests to be collected\n- Added Examples to `RunType` to allow coverage of examples to be collected\n- Instructions for integration to Gitlab pipelines to `README.md`\n- `--no-run` option to build tests and not collect coverage\n- Added run-to-run coverage change reporting through saving the previous run in `target/tarpaulin/coverage.json`\n\n### Changed\n\n### Removed\n\n## [0.9.1] 2019-10-30\n### Added\n- Sets an environment variable `TARPAULIN` to `1` when starting so inferiors can detect coverage runs\n- Limit the processor affinity to a single core to solve #190\n\n### Changed\n- Switch from travis-ci to github actions\n\n### Removed\n\n## [0.9.0] 2019-10-03\n### Added\n\n### Changed\n- Updated phrasing of error messages on invalid `--out` and `--output-dir` command line options\n- Replaced error printout in statemachine with `log::error`\n- Check callable arg count to prevent removing callables with no return from coverable lines\n- Removed test-threads limit from traced tests solving #190\n- Ignore empty executables generated by doctests with `no_run` annotation to avoid parsing errors\n\n### Removed\n\n## [0.8.7] 2019-09-21\n### Added\n- Created `CHANGELOG.md`\n- Add `--manifest-path` option\n- Add `--output-dir` option\n\n### Changed\n- Ignore lines containing \"}else{\"\n- Use relative file paths to base_dir (env::current_dir() or --root option if set)\n- Use `HashSet` for XML package deduplication in cobertura fixing a codecov rendering issue\n\n### Removed\n\n## [0.8.6] 2019-08-17\n\n### Changed\n- Updated dependencies including cargo so tarpaulin works with `default-run` manifest option\n\n### Fixed\n- Fixed function ignoring logic where non-test functions with the ignored attribute weren't ignored\n\n## [0.8.5] 2019-07-27\n### Changed\n- Updated `README.md` for CircleCI\n- Updated `README.md` instructions for Docker on Windows\n\n### Fixed\n- tarpaulin returns a non-zero error code if test compilation fails\n\n## [0.8.4] 2019-06-09\n### Added\n- Added tests for covering match expressions\n- Added tests for covering path expressions\n- Added tests for doc-test coverage\n\n### Fixed\n- Fix unicode handling in json for html reports\n\n## [0.8.3] 2019-05-26\n### Added\n- `span-locations` feature for `proc-macro2` removing need for semver-exempt and updated `README.md`\n\n### Changed\n- Added persistent URLs to HTML report when navigating source\n- Updated `cargo`, `gimli`, `git`, `nix`, `object` and `quick-xml`\n\n### Fixed\n- Cobertura report now generates name attribute for the package tag\n\n## [0.8.2] 2019-05-26 [YANKED]\n- See 0.8.3 for changes\n\n## [0.8.1] 2019-05-26 [YANKED]\n- See 0.8.3 for changes\n\n## [0.8.0] 2019-05-09\n### Added\n- Tarpaulin run type for doc-tests setting `RUSTDOCFLAGS` flag\n- Added loading of Apple dSYM files\n- Save non-persistent reports when debug flag is present\n- Populate CI server information for coveralls\n- Populate git info in coveralls report\n- Debug prinouts for tarpaulin for debugging\n\n### Changed\n- Moved `statemachine` and `process_handling` modules in preparation for cross-platform support\n- Go into closures in syntax analysis\n- Moved state machine handling to use an event queue system\n- Added more attributes for classes in Cobertura reports\n- Updated `cargo`, `env_logger`, `failure`, `log` and `nix`\n- Improved structure and layout of cobertura reports\n\n### Fixed\n- Added result de-duplication when using doc-tests\n- Formatting for HTML characters in JSON files\n- Correct path detection for HTML reports\n- Made test paths relative to Cargo manifest\n\n## [0.7.0] 2019-01-08\n### Added\n- Failure crate for improved error handling\n- Added HTML reports\n- Added pull-request template\n\n### Changed\n- Moved to Rust 2018 edition\n\n## [0.6.11] 2019-01-03\n### Added\n- `--Release` option to run tarpaulin with tests built in release mode\n- Tests for coverage of assign operations\n\n### Changed\n- Changed `--skip-clean` to `--force-clean` to make skipping clean default\n- Visit return statements in `source_analysis` to handle attributes\n- Updated `cargo`, `fallible-iterator`, `libc`, `rustc-demangle`, `syn`\n- Updated Dockerfile for rust 2018 and `procmacro2_semver_exempt` working on stable\n\n### Removed\n- Removed `publish-lockfile` from `Cargo.toml`\n\n## [0.6.10] 2018-12-03\n### Changed\n- Updated `nix`, `regex`, and `syn`\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 2.861328125,
          "content": "# Contributing to Tarpaulin\n\nContributions to Tarpaulin are always welcome and encouraged. Check below to\ninformation on the various methods of contributing.\n\n## Feature Requests\n\nCurrently there's no mechanism for feature requests as such so just use the\nGithub issue tracker.\n\n## Reporting bugs\n\nIf you find an issue in Tarpaulin, please report it using the Github issue\ntracker. When you make the issue if you could provide the following information\nwe can recreate the issue and resolve it quicker.\n\n* A description of the problem\n* Tarpaulin output\n* The rust project you ran Tarpaulin on\n* Your linux distro and version (output of `uname -a` is sufficient)\n* Version of rustc used\n\nThe verbose output of Tarpaulin is preferred but isn't always necessary. If you\nwant to include the verbose output and it's very long a pastebin link or similar\nis ideal.\n\nIf there's a reason you can't share your project code publicly, a small example\nproject which recreates the issue would help a great deal. You can always\ndownload one of the example projects used to test Tarpaulin from tests/data and\nsee if they work.\n\n## Pull Requests\n\nPull requests are welcome, after you've implemented your feature test it on your\nown system and submit a PR. Make sure to explain what the feature adds to \nTarpaulin and any information you feel will make the review go easier. \n\nFor a more detailed look at the internals of Tarpaulin consult the developer\nsection in [the wiki](https://github.com/xd009642/tarpaulin/wiki/Developers).\nThis section aims to break down the components of Tarpaulin to make it easier\nfor newcomers to contribute.\n\nTarpaulin uses the gitflow model so for new features branch off of the develop\nbranch and add your changes.\n\nAny changes which break existing functionality won't be merged, but you'll\nreceive feedback and help to resolve those issues and close the PR.\n\nIf you want some good explanations on process tracing in Linux and some of the\nformative literature that helped me write tarpaulin's initial implementation\nthen check out the following resources.\n\nI wouldn't have been able to make progress as quickly in this project without\nJoseph Kain's blog on writing a debugger in Rust and C. It's a great read, so I\nrecommend you check it out [here](http://system.joekain.com/debugger/). This\nseries seems to be abandoned, however it does introduce you to some of the\nlibraries I use and still has useful insights.\n\nFor a more complete (and still updated) guide Sy Brand has written the\ndefinitive guide which you can find \n[here](https://blog.tartanllama.xyz/writing-a-linux-debugger-setup/).\nThis is written in C++ but should still be easily comprehendable for\npeople who don't know C++. \n\nAdditionally, for any help or guidance to working with Tarpaulin there is\nalways yours personally. Open a PR and ask questions or contact me via discord\nor email, xd009642 in any rust discords or danielmckenna93@gmail.com.\n"
        },
        {
          "name": "Cargo.lock",
          "type": "blob",
          "size": 54.076171875,
          "content": "# This file is automatically @generated by Cargo.\n# It is not intended for manual editing.\nversion = 4\n\n[[package]]\nname = \"addr2line\"\nversion = \"0.21.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8a30b2e23b9e17a9f90641c7ab1549cd9b44f296d3ccbf309d2863cfe398a0cb\"\ndependencies = [\n \"gimli 0.28.1\",\n]\n\n[[package]]\nname = \"adler\"\nversion = \"1.0.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f26201604c87b1e01bd3d98f8d5d9a8fcbb815e8cedb41ffccbeb4bf593a35fe\"\n\n[[package]]\nname = \"adler32\"\nversion = \"1.2.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"aae1277d39aeec15cb388266ecc24b11c80469deae6067e17a1a7aa9e5c1f234\"\n\n[[package]]\nname = \"aho-corasick\"\nversion = \"1.1.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8e60d3430d3a69478ad0993f19238d2df97c507009a52b3c10addcd7f6bcb916\"\ndependencies = [\n \"memchr\",\n]\n\n[[package]]\nname = \"android-tzdata\"\nversion = \"0.1.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e999941b234f3131b00bc13c22d06e8c5ff726d1b6318ac7eb276997bbb4fef0\"\n\n[[package]]\nname = \"android_system_properties\"\nversion = \"0.1.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"819e7219dbd41043ac279b19830f2efc897156490d7fd6ea916720117ee66311\"\ndependencies = [\n \"libc\",\n]\n\n[[package]]\nname = \"anstream\"\nversion = \"0.6.14\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"418c75fa768af9c03be99d17643f93f79bbba589895012a80e3452a19ddda15b\"\ndependencies = [\n \"anstyle\",\n \"anstyle-parse\",\n \"anstyle-query\",\n \"anstyle-wincon\",\n \"colorchoice\",\n \"is_terminal_polyfill\",\n \"utf8parse\",\n]\n\n[[package]]\nname = \"anstyle\"\nversion = \"1.0.7\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"038dfcf04a5feb68e9c60b21c9625a54c2c0616e79b72b0fd87075a056ae1d1b\"\n\n[[package]]\nname = \"anstyle-parse\"\nversion = \"0.2.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"c03a11a9034d92058ceb6ee011ce58af4a9bf61491aa7e1e59ecd24bd40d22d4\"\ndependencies = [\n \"utf8parse\",\n]\n\n[[package]]\nname = \"anstyle-query\"\nversion = \"1.0.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a64c907d4e79225ac72e2a354c9ce84d50ebb4586dee56c82b3ee73004f537f5\"\ndependencies = [\n \"windows-sys 0.52.0\",\n]\n\n[[package]]\nname = \"anstyle-wincon\"\nversion = \"3.0.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"61a38449feb7068f52bb06c12759005cf459ee52bb4adc1d5a7c4322d716fb19\"\ndependencies = [\n \"anstyle\",\n \"windows-sys 0.52.0\",\n]\n\n[[package]]\nname = \"anyhow\"\nversion = \"1.0.83\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"25bdb32cbbdce2b519a9cd7df3a678443100e265d5e25ca763b7572a5104f5f3\"\n\n[[package]]\nname = \"autocfg\"\nversion = \"1.3.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"0c4b4d0bd25bd0b74681c0ad21497610ce1b7c91b1022cd21c80c6fbdd9476b0\"\n\n[[package]]\nname = \"backtrace\"\nversion = \"0.3.71\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"26b05800d2e817c8b3b4b54abd461726265fa9789ae34330622f2db9ee696f9d\"\ndependencies = [\n \"addr2line\",\n \"cc\",\n \"cfg-if\",\n \"libc\",\n \"miniz_oxide\",\n \"object 0.32.2\",\n \"rustc-demangle\",\n]\n\n[[package]]\nname = \"base64\"\nversion = \"0.21.7\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"9d297deb1925b89f2ccc13d7635fa0714f12c87adce1c75356b39ca9b7178567\"\n\n[[package]]\nname = \"bitflags\"\nversion = \"1.3.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"bef38d45163c2f1dde094a7dfd33ccf595c92905c8f8f4fdc18d06fb1037718a\"\n\n[[package]]\nname = \"bitflags\"\nversion = \"2.5.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"cf4b9d6a944f767f8e5e0db018570623c85f3d925ac718db4e06d0187adb21c1\"\n\n[[package]]\nname = \"bumpalo\"\nversion = \"3.16.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"79296716171880943b8470b5f8d03aa55eb2e645a4874bdbb28adb49162e012c\"\n\n[[package]]\nname = \"bytes\"\nversion = \"1.6.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"514de17de45fdb8dc022b1a7975556c53c86f9f0aa5f534b98977b171857c2c9\"\n\n[[package]]\nname = \"camino\"\nversion = \"1.1.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"c59e92b5a388f549b863a7bea62612c09f24c8393560709a54558a9abdfb3b9c\"\ndependencies = [\n \"serde\",\n]\n\n[[package]]\nname = \"cargo-platform\"\nversion = \"0.1.8\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"24b1f0365a6c6bb4020cd05806fd0d33c44d38046b8bd7f0e40814b9763cabfc\"\ndependencies = [\n \"serde\",\n]\n\n[[package]]\nname = \"cargo-tarpaulin\"\nversion = \"0.31.4\"\ndependencies = [\n \"cargo_metadata\",\n \"cfg-if\",\n \"chrono\",\n \"clap\",\n \"coveralls-api\",\n \"gimli 0.31.1\",\n \"git2\",\n \"glob\",\n \"humantime-serde\",\n \"indexmap 1.8.2\",\n \"lazy_static\",\n \"lcov\",\n \"libc\",\n \"llvm_profparser\",\n \"nix\",\n \"num_cpus\",\n \"object 0.36.7\",\n \"proc-macro2\",\n \"procfs\",\n \"quick-xml\",\n \"quote\",\n \"regex\",\n \"rustc-demangle\",\n \"rustc_version\",\n \"rusty-fork\",\n \"serde\",\n \"serde_json\",\n \"syn\",\n \"test-log\",\n \"toml\",\n \"tracing\",\n \"tracing-subscriber\",\n \"walkdir\",\n]\n\n[[package]]\nname = \"cargo_metadata\"\nversion = \"0.19.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8769706aad5d996120af43197bf46ef6ad0fda35216b4505f926a365a232d924\"\ndependencies = [\n \"camino\",\n \"cargo-platform\",\n \"semver\",\n \"serde\",\n \"serde_json\",\n \"thiserror 2.0.4\",\n]\n\n[[package]]\nname = \"cc\"\nversion = \"1.0.97\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"099a5357d84c4c61eb35fc8eafa9a79a902c2f76911e5747ced4e032edd8d9b4\"\ndependencies = [\n \"jobserver\",\n \"libc\",\n \"once_cell\",\n]\n\n[[package]]\nname = \"cfg-if\"\nversion = \"1.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"baf1de4339761588bc0619e3cbc0120ee582ebb74b53b4efbf79117bd2da40fd\"\n\n[[package]]\nname = \"cfg_aliases\"\nversion = \"0.2.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"613afe47fcd5fac7ccf1db93babcb082c5994d996f20b8b159f2ad1658eb5724\"\n\n[[package]]\nname = \"chrono\"\nversion = \"0.4.39\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"7e36cc9d416881d2e24f9a963be5fb1cd90966419ac844274161d10488b3e825\"\ndependencies = [\n \"android-tzdata\",\n \"iana-time-zone\",\n \"js-sys\",\n \"num-traits\",\n \"wasm-bindgen\",\n \"windows-targets 0.52.5\",\n]\n\n[[package]]\nname = \"clap\"\nversion = \"4.5.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"90bc066a67923782aa8515dbaea16946c5bcc5addbd668bb80af688e53e548a0\"\ndependencies = [\n \"clap_builder\",\n \"clap_derive\",\n]\n\n[[package]]\nname = \"clap_builder\"\nversion = \"4.5.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ae129e2e766ae0ec03484e609954119f123cc1fe650337e155d03b022f24f7b4\"\ndependencies = [\n \"anstream\",\n \"anstyle\",\n \"clap_lex\",\n \"strsim\",\n]\n\n[[package]]\nname = \"clap_derive\"\nversion = \"4.5.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"528131438037fd55894f62d6e9f068b8f45ac57ffa77517819645d10aed04f64\"\ndependencies = [\n \"heck\",\n \"proc-macro2\",\n \"quote\",\n \"syn\",\n]\n\n[[package]]\nname = \"clap_lex\"\nversion = \"0.7.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"98cc8fbded0c607b7ba9dd60cd98df59af97e84d24e49c8557331cfc26d301ce\"\n\n[[package]]\nname = \"colorchoice\"\nversion = \"1.0.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"0b6a852b24ab71dffc585bcb46eaf7959d175cb865a7152e35b348d1b2960422\"\n\n[[package]]\nname = \"core-foundation\"\nversion = \"0.9.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"91e195e091a93c46f7102ec7818a2aa394e1e1771c3ab4825963fa03e45afb8f\"\ndependencies = [\n \"core-foundation-sys\",\n \"libc\",\n]\n\n[[package]]\nname = \"core-foundation-sys\"\nversion = \"0.8.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"06ea2b9bc92be3c2baa9334a323ebca2d6f074ff852cd1d7b11064035cd3868f\"\n\n[[package]]\nname = \"coveralls-api\"\nversion = \"0.6.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e07c65ecfe8bc0aa668923234a499ee7317082847bd9de36f77cbc4fc5123a66\"\ndependencies = [\n \"deflate\",\n \"md5\",\n \"reqwest\",\n \"serde\",\n \"serde_derive\",\n \"serde_json\",\n]\n\n[[package]]\nname = \"crc32fast\"\nversion = \"1.4.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b3855a8a784b474f333699ef2bbca9db2c4a1f6d9088a90a2d25b1eb53111eaa\"\ndependencies = [\n \"cfg-if\",\n]\n\n[[package]]\nname = \"deflate\"\nversion = \"1.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"c86f7e25f518f4b81808a2cf1c50996a61f5c2eb394b2393bd87f2a4780a432f\"\ndependencies = [\n \"adler32\",\n \"gzip-header\",\n]\n\n[[package]]\nname = \"encoding_rs\"\nversion = \"0.8.34\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b45de904aa0b010bce2ab45264d0631681847fa7b6f2eaa7dab7619943bc4f59\"\ndependencies = [\n \"cfg-if\",\n]\n\n[[package]]\nname = \"env_filter\"\nversion = \"0.1.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a009aa4810eb158359dda09d0c87378e4bbb89b5a801f016885a4707ba24f7ea\"\ndependencies = [\n \"log\",\n]\n\n[[package]]\nname = \"env_logger\"\nversion = \"0.11.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"38b35839ba51819680ba087cd351788c9a3c476841207e0b8cee0b04722343b9\"\ndependencies = [\n \"anstream\",\n \"anstyle\",\n \"env_filter\",\n \"log\",\n]\n\n[[package]]\nname = \"equivalent\"\nversion = \"1.0.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"5443807d6dff69373d433ab9ef5378ad8df50ca6298caf15de6e52e24aaf54d5\"\n\n[[package]]\nname = \"errno\"\nversion = \"0.3.8\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a258e46cdc063eb8519c00b9fc845fc47bcfca4130e2f08e88665ceda8474245\"\ndependencies = [\n \"libc\",\n \"windows-sys 0.52.0\",\n]\n\n[[package]]\nname = \"fallible-iterator\"\nversion = \"0.3.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"2acce4a10f12dc2fb14a218589d4f1f62ef011b2d0cc4b3cb1bba8e94da14649\"\n\n[[package]]\nname = \"fastrand\"\nversion = \"2.1.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"9fc0510504f03c51ada170672ac806f1f105a88aa97a5281117e1ddc3368e51a\"\n\n[[package]]\nname = \"flate2\"\nversion = \"1.0.30\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"5f54427cfd1c7829e2a139fcefea601bf088ebca651d2bf53ebc600eac295dae\"\ndependencies = [\n \"crc32fast\",\n \"miniz_oxide\",\n]\n\n[[package]]\nname = \"fnv\"\nversion = \"1.0.7\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3f9eec918d3f24069decb9af1554cad7c880e2da24a9afd88aca000531ab82c1\"\n\n[[package]]\nname = \"foreign-types\"\nversion = \"0.3.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f6f339eb8adc052cd2ca78910fda869aefa38d22d5cb648e6485e4d3fc06f3b1\"\ndependencies = [\n \"foreign-types-shared\",\n]\n\n[[package]]\nname = \"foreign-types-shared\"\nversion = \"0.1.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"00b0228411908ca8685dba7fc2cdd70ec9990a6e753e89b6ac91a84c40fbaf4b\"\n\n[[package]]\nname = \"form_urlencoded\"\nversion = \"1.2.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e13624c2627564efccf4934284bdd98cbaa14e79b0b5a141218e507b3a823456\"\ndependencies = [\n \"percent-encoding\",\n]\n\n[[package]]\nname = \"futures-channel\"\nversion = \"0.3.30\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"eac8f7d7865dcb88bd4373ab671c8cf4508703796caa2b1985a9ca867b3fcb78\"\ndependencies = [\n \"futures-core\",\n]\n\n[[package]]\nname = \"futures-core\"\nversion = \"0.3.30\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"dfc6580bb841c5a68e9ef15c77ccc837b40a7504914d52e47b8b0e9bbda25a1d\"\n\n[[package]]\nname = \"futures-io\"\nversion = \"0.3.30\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a44623e20b9681a318efdd71c299b6b222ed6f231972bfe2f224ebad6311f0c1\"\n\n[[package]]\nname = \"futures-sink\"\nversion = \"0.3.30\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"9fb8e00e87438d937621c1c6269e53f536c14d3fbd6a042bb24879e57d474fb5\"\n\n[[package]]\nname = \"futures-task\"\nversion = \"0.3.30\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"38d84fa142264698cdce1a9f9172cf383a0c82de1bddcf3092901442c4097004\"\n\n[[package]]\nname = \"futures-util\"\nversion = \"0.3.30\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3d6401deb83407ab3da39eba7e33987a73c3df0c82b4bb5813ee871c19c41d48\"\ndependencies = [\n \"futures-core\",\n \"futures-io\",\n \"futures-task\",\n \"memchr\",\n \"pin-project-lite\",\n \"pin-utils\",\n \"slab\",\n]\n\n[[package]]\nname = \"gimli\"\nversion = \"0.28.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"4271d37baee1b8c7e4b708028c57d816cf9d2434acb33a549475f78c181f6253\"\n\n[[package]]\nname = \"gimli\"\nversion = \"0.31.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"07e28edb80900c19c28f1072f2e8aeca7fa06b23cd4169cefe1af5aa3260783f\"\ndependencies = [\n \"fallible-iterator\",\n \"indexmap 2.2.6\",\n \"stable_deref_trait\",\n]\n\n[[package]]\nname = \"git2\"\nversion = \"0.20.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3fda788993cc341f69012feba8bf45c0ba4f3291fcc08e214b4d5a7332d88aff\"\ndependencies = [\n \"bitflags 2.5.0\",\n \"libc\",\n \"libgit2-sys\",\n \"log\",\n \"openssl-probe\",\n \"openssl-sys\",\n \"url\",\n]\n\n[[package]]\nname = \"glob\"\nversion = \"0.3.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a8d1add55171497b4705a648c6b583acafb01d58050a51727785f0b2c8e0a2b2\"\n\n[[package]]\nname = \"gzip-header\"\nversion = \"1.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"95cc527b92e6029a62960ad99aa8a6660faa4555fe5f731aab13aa6a921795a2\"\ndependencies = [\n \"crc32fast\",\n]\n\n[[package]]\nname = \"h2\"\nversion = \"0.3.26\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"81fe527a889e1532da5c525686d96d4c2e74cdd345badf8dfef9f6b39dd5f5e8\"\ndependencies = [\n \"bytes\",\n \"fnv\",\n \"futures-core\",\n \"futures-sink\",\n \"futures-util\",\n \"http\",\n \"indexmap 2.2.6\",\n \"slab\",\n \"tokio\",\n \"tokio-util\",\n \"tracing\",\n]\n\n[[package]]\nname = \"hashbrown\"\nversion = \"0.11.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ab5ef0d4909ef3724cc8cce6ccc8572c5c817592e9285f5464f8e86f8bd3726e\"\n\n[[package]]\nname = \"hashbrown\"\nversion = \"0.14.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e5274423e17b7c9fc20b6e7e208532f9b19825d82dfd615708b70edd83df41f1\"\n\n[[package]]\nname = \"heck\"\nversion = \"0.5.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"2304e00983f87ffb38b55b444b5e3b60a884b5d30c0fca7d82fe33449bbe55ea\"\n\n[[package]]\nname = \"hermit-abi\"\nversion = \"0.3.9\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d231dfb89cfffdbc30e7fc41579ed6066ad03abda9e567ccafae602b97ec5024\"\n\n[[package]]\nname = \"hex\"\nversion = \"0.4.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"7f24254aa9a54b5c858eaee2f5bccdb46aaf0e486a595ed5fd8f86ba55232a70\"\n\n[[package]]\nname = \"http\"\nversion = \"0.2.12\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"601cbb57e577e2f5ef5be8e7b83f0f63994f25aa94d673e54a92d5c516d101f1\"\ndependencies = [\n \"bytes\",\n \"fnv\",\n \"itoa\",\n]\n\n[[package]]\nname = \"http-body\"\nversion = \"0.4.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"7ceab25649e9960c0311ea418d17bee82c0dcec1bd053b5f9a66e265a693bed2\"\ndependencies = [\n \"bytes\",\n \"http\",\n \"pin-project-lite\",\n]\n\n[[package]]\nname = \"httparse\"\nversion = \"1.8.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d897f394bad6a705d5f4104762e116a75639e470d80901eed05a860a95cb1904\"\n\n[[package]]\nname = \"httpdate\"\nversion = \"1.0.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"df3b46402a9d5adb4c86a0cf463f42e19994e3ee891101b1841f30a545cb49a9\"\n\n[[package]]\nname = \"humantime\"\nversion = \"2.1.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"9a3a5bfb195931eeb336b2a7b4d761daec841b97f947d34394601737a7bba5e4\"\n\n[[package]]\nname = \"humantime-serde\"\nversion = \"1.1.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"57a3db5ea5923d99402c94e9feb261dc5ee9b4efa158b0315f788cf549cc200c\"\ndependencies = [\n \"humantime\",\n \"serde\",\n]\n\n[[package]]\nname = \"hyper\"\nversion = \"0.14.28\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"bf96e135eb83a2a8ddf766e426a841d8ddd7449d5f00d34ea02b41d2f19eef80\"\ndependencies = [\n \"bytes\",\n \"futures-channel\",\n \"futures-core\",\n \"futures-util\",\n \"h2\",\n \"http\",\n \"http-body\",\n \"httparse\",\n \"httpdate\",\n \"itoa\",\n \"pin-project-lite\",\n \"socket2\",\n \"tokio\",\n \"tower-service\",\n \"tracing\",\n \"want\",\n]\n\n[[package]]\nname = \"hyper-tls\"\nversion = \"0.5.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d6183ddfa99b85da61a140bea0efc93fdf56ceaa041b37d553518030827f9905\"\ndependencies = [\n \"bytes\",\n \"hyper\",\n \"native-tls\",\n \"tokio\",\n \"tokio-native-tls\",\n]\n\n[[package]]\nname = \"iana-time-zone\"\nversion = \"0.1.60\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e7ffbb5a1b541ea2561f8c41c087286cc091e21e556a4f09a8f6cbf17b69b141\"\ndependencies = [\n \"android_system_properties\",\n \"core-foundation-sys\",\n \"iana-time-zone-haiku\",\n \"js-sys\",\n \"wasm-bindgen\",\n \"windows-core\",\n]\n\n[[package]]\nname = \"iana-time-zone-haiku\"\nversion = \"0.1.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f31827a206f56af32e590ba56d5d2d085f558508192593743f16b2306495269f\"\ndependencies = [\n \"cc\",\n]\n\n[[package]]\nname = \"idna\"\nversion = \"0.5.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"634d9b1461af396cad843f47fdba5597a4f9e6ddd4bfb6ff5d85028c25cb12f6\"\ndependencies = [\n \"unicode-bidi\",\n \"unicode-normalization\",\n]\n\n[[package]]\nname = \"indexmap\"\nversion = \"1.8.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e6012d540c5baa3589337a98ce73408de9b5a25ec9fc2c6fd6be8f0d39e0ca5a\"\ndependencies = [\n \"autocfg\",\n \"hashbrown 0.11.2\",\n \"serde\",\n]\n\n[[package]]\nname = \"indexmap\"\nversion = \"2.2.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"168fb715dda47215e360912c096649d23d58bf392ac62f73919e831745e40f26\"\ndependencies = [\n \"equivalent\",\n \"hashbrown 0.14.5\",\n]\n\n[[package]]\nname = \"ipnet\"\nversion = \"2.9.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8f518f335dce6725a761382244631d86cf0ccb2863413590b31338feb467f9c3\"\n\n[[package]]\nname = \"is_terminal_polyfill\"\nversion = \"1.70.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f8478577c03552c21db0e2724ffb8986a5ce7af88107e6be5d2ee6e158c12800\"\n\n[[package]]\nname = \"itoa\"\nversion = \"1.0.11\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"49f1f14873335454500d59611f1cf4a4b0f786f9ac11f4312a78e4cf2566695b\"\n\n[[package]]\nname = \"jobserver\"\nversion = \"0.1.31\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d2b099aaa34a9751c5bf0878add70444e1ed2dd73f347be99003d4577277de6e\"\ndependencies = [\n \"libc\",\n]\n\n[[package]]\nname = \"js-sys\"\nversion = \"0.3.69\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"29c15563dc2726973df627357ce0c9ddddbea194836909d655df6a75d2cf296d\"\ndependencies = [\n \"wasm-bindgen\",\n]\n\n[[package]]\nname = \"lazy_static\"\nversion = \"1.5.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"bbd2bcb4c963f2ddae06a2efc7e9f3591312473c50c6685e1f298068316e66fe\"\n\n[[package]]\nname = \"lcov\"\nversion = \"0.8.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1ccfa6d5e585a884db65b37f38184e4364eaf74d884ac35d0a90fe9baf80b723\"\ndependencies = [\n \"thiserror 1.0.60\",\n]\n\n[[package]]\nname = \"leb128\"\nversion = \"0.2.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"884e2677b40cc8c339eaefcb701c32ef1fd2493d71118dc0ca4b6a736c93bd67\"\n\n[[package]]\nname = \"libc\"\nversion = \"0.2.169\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b5aba8db14291edd000dfcc4d620c7ebfb122c613afb886ca8803fa4e128a20a\"\n\n[[package]]\nname = \"libgit2-sys\"\nversion = \"0.18.0+1.9.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e1a117465e7e1597e8febea8bb0c410f1c7fb93b1e1cddf34363f8390367ffec\"\ndependencies = [\n \"cc\",\n \"libc\",\n \"libssh2-sys\",\n \"libz-sys\",\n \"openssl-sys\",\n \"pkg-config\",\n]\n\n[[package]]\nname = \"libssh2-sys\"\nversion = \"0.3.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"2dc8a030b787e2119a731f1951d6a773e2280c660f8ec4b0f5e1505a386e71ee\"\ndependencies = [\n \"cc\",\n \"libc\",\n \"libz-sys\",\n \"openssl-sys\",\n \"pkg-config\",\n \"vcpkg\",\n]\n\n[[package]]\nname = \"libz-sys\"\nversion = \"1.1.16\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"5e143b5e666b2695d28f6bca6497720813f699c9602dd7f5cac91008b8ada7f9\"\ndependencies = [\n \"cc\",\n \"libc\",\n \"pkg-config\",\n \"vcpkg\",\n]\n\n[[package]]\nname = \"linux-raw-sys\"\nversion = \"0.4.13\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"01cda141df6706de531b6c46c3a33ecca755538219bd484262fa09410c13539c\"\n\n[[package]]\nname = \"llvm_profparser\"\nversion = \"0.7.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"98658087d4c3f1e03b6fd3474251bbb9353b2470cc0f03d81a46fd39077d0060\"\ndependencies = [\n \"anyhow\",\n \"flate2\",\n \"indexmap 1.8.2\",\n \"leb128\",\n \"md5\",\n \"nom\",\n \"object 0.26.2\",\n \"rustc-hash\",\n \"thiserror 1.0.60\",\n \"tracing\",\n]\n\n[[package]]\nname = \"log\"\nversion = \"0.4.21\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"90ed8c1e510134f979dbc4f070f87d4313098b704861a105fe34231c70a3901c\"\n\n[[package]]\nname = \"matchers\"\nversion = \"0.1.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8263075bb86c5a1b1427b5ae862e8889656f126e9f77c484496e8b47cf5c5558\"\ndependencies = [\n \"regex-automata 0.1.10\",\n]\n\n[[package]]\nname = \"md5\"\nversion = \"0.7.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"490cc448043f947bae3cbee9c203358d62dbee0db12107a74be5c30ccfd09771\"\n\n[[package]]\nname = \"memchr\"\nversion = \"2.7.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"6c8640c5d730cb13ebd907d8d04b52f55ac9a2eec55b440c8892f40d56c76c1d\"\n\n[[package]]\nname = \"mime\"\nversion = \"0.3.17\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"6877bb514081ee2a7ff5ef9de3281f14a4dd4bceac4c09388074a6b5df8a139a\"\n\n[[package]]\nname = \"mime_guess\"\nversion = \"2.0.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"4192263c238a5f0d0c6bfd21f336a313a4ce1c450542449ca191bb657b4642ef\"\ndependencies = [\n \"mime\",\n \"unicase\",\n]\n\n[[package]]\nname = \"minimal-lexical\"\nversion = \"0.2.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"68354c5c6bd36d73ff3feceb05efa59b6acb7626617f4962be322a825e61f79a\"\n\n[[package]]\nname = \"miniz_oxide\"\nversion = \"0.7.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"9d811f3e15f28568be3407c8e7fdb6514c1cda3cb30683f15b6a1a1dc4ea14a7\"\ndependencies = [\n \"adler\",\n]\n\n[[package]]\nname = \"mio\"\nversion = \"0.8.11\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a4a650543ca06a924e8b371db273b2756685faae30f8487da1b56505a8f78b0c\"\ndependencies = [\n \"libc\",\n \"wasi\",\n \"windows-sys 0.48.0\",\n]\n\n[[package]]\nname = \"native-tls\"\nversion = \"0.2.11\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"07226173c32f2926027b63cce4bcd8076c3552846cbe7925f3aaffeac0a3b92e\"\ndependencies = [\n \"lazy_static\",\n \"libc\",\n \"log\",\n \"openssl\",\n \"openssl-probe\",\n \"openssl-sys\",\n \"schannel\",\n \"security-framework\",\n \"security-framework-sys\",\n \"tempfile\",\n]\n\n[[package]]\nname = \"nix\"\nversion = \"0.29.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"71e2746dc3a24dd78b3cfcb7be93368c6de9963d30f43a6a73998a9cf4b17b46\"\ndependencies = [\n \"bitflags 2.5.0\",\n \"cfg-if\",\n \"cfg_aliases\",\n \"libc\",\n]\n\n[[package]]\nname = \"nom\"\nversion = \"7.1.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d273983c5a657a70a3e8f2a01329822f3b8c8172b73826411a55751e404a0a4a\"\ndependencies = [\n \"memchr\",\n \"minimal-lexical\",\n]\n\n[[package]]\nname = \"nu-ansi-term\"\nversion = \"0.46.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"77a8165726e8236064dbb45459242600304b42a5ea24ee2948e18e023bf7ba84\"\ndependencies = [\n \"overload\",\n \"winapi\",\n]\n\n[[package]]\nname = \"num-traits\"\nversion = \"0.2.19\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"071dfc062690e90b734c0b2273ce72ad0ffa95f0c74596bc250dcfd960262841\"\ndependencies = [\n \"autocfg\",\n]\n\n[[package]]\nname = \"num_cpus\"\nversion = \"1.16.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"4161fcb6d602d4d2081af7c3a45852d875a03dd337a6bfdd6e06407b61342a43\"\ndependencies = [\n \"hermit-abi\",\n \"libc\",\n]\n\n[[package]]\nname = \"object\"\nversion = \"0.26.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"39f37e50073ccad23b6d09bcb5b263f4e76d3bb6038e4a3c08e52162ffa8abc2\"\ndependencies = [\n \"flate2\",\n \"memchr\",\n]\n\n[[package]]\nname = \"object\"\nversion = \"0.32.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a6a622008b6e321afc04970976f62ee297fdbaa6f95318ca343e3eebb9648441\"\ndependencies = [\n \"memchr\",\n]\n\n[[package]]\nname = \"object\"\nversion = \"0.36.7\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"62948e14d923ea95ea2c7c86c71013138b66525b86bdc08d2dcc262bdb497b87\"\ndependencies = [\n \"flate2\",\n \"memchr\",\n \"ruzstd\",\n]\n\n[[package]]\nname = \"once_cell\"\nversion = \"1.19.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3fdb12b2476b595f9358c5161aa467c2438859caa136dec86c26fdd2efe17b92\"\n\n[[package]]\nname = \"openssl\"\nversion = \"0.10.66\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"9529f4786b70a3e8c61e11179af17ab6188ad8d0ded78c5529441ed39d4bd9c1\"\ndependencies = [\n \"bitflags 2.5.0\",\n \"cfg-if\",\n \"foreign-types\",\n \"libc\",\n \"once_cell\",\n \"openssl-macros\",\n \"openssl-sys\",\n]\n\n[[package]]\nname = \"openssl-macros\"\nversion = \"0.1.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a948666b637a0f465e8564c73e89d4dde00d72d4d473cc972f390fc3dcee7d9c\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn\",\n]\n\n[[package]]\nname = \"openssl-probe\"\nversion = \"0.1.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ff011a302c396a5197692431fc1948019154afc178baf7d8e37367442a4601cf\"\n\n[[package]]\nname = \"openssl-src\"\nversion = \"300.2.3+3.2.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"5cff92b6f71555b61bb9315f7c64da3ca43d87531622120fea0195fc761b4843\"\ndependencies = [\n \"cc\",\n]\n\n[[package]]\nname = \"openssl-sys\"\nversion = \"0.9.103\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"7f9e8deee91df40a943c71b917e5874b951d32a802526c85721ce3b776c929d6\"\ndependencies = [\n \"cc\",\n \"libc\",\n \"openssl-src\",\n \"pkg-config\",\n \"vcpkg\",\n]\n\n[[package]]\nname = \"overload\"\nversion = \"0.1.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b15813163c1d831bf4a13c3610c05c0d03b39feb07f7e09fa234dac9b15aaf39\"\n\n[[package]]\nname = \"percent-encoding\"\nversion = \"2.3.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e3148f5046208a5d56bcfc03053e3ca6334e51da8dfb19b6cdc8b306fae3283e\"\n\n[[package]]\nname = \"pin-project-lite\"\nversion = \"0.2.14\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"bda66fc9667c18cb2758a2ac84d1167245054bcf85d5d1aaa6923f45801bdd02\"\n\n[[package]]\nname = \"pin-utils\"\nversion = \"0.1.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8b870d8c151b6f2fb93e84a13146138f05d02ed11c7e7c54f8826aaaf7c9f184\"\n\n[[package]]\nname = \"pkg-config\"\nversion = \"0.3.30\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d231b230927b5e4ad203db57bbcbee2802f6bce620b1e4a9024a07d94e2907ec\"\n\n[[package]]\nname = \"proc-macro2\"\nversion = \"1.0.92\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"37d3544b3f2748c54e147655edb5025752e2303145b5aefb3c3ea2c78b973bb0\"\ndependencies = [\n \"unicode-ident\",\n]\n\n[[package]]\nname = \"procfs\"\nversion = \"0.17.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"cc5b72d8145275d844d4b5f6d4e1eef00c8cd889edb6035c21675d1bb1f45c9f\"\ndependencies = [\n \"bitflags 2.5.0\",\n \"chrono\",\n \"flate2\",\n \"hex\",\n \"procfs-core\",\n \"rustix\",\n]\n\n[[package]]\nname = \"procfs-core\"\nversion = \"0.17.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"239df02d8349b06fc07398a3a1697b06418223b1c7725085e801e7c0fc6a12ec\"\ndependencies = [\n \"bitflags 2.5.0\",\n \"chrono\",\n \"hex\",\n]\n\n[[package]]\nname = \"quick-error\"\nversion = \"1.2.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a1d01941d82fa2ab50be1e79e6714289dd7cde78eba4c074bc5a4374f650dfe0\"\n\n[[package]]\nname = \"quick-xml\"\nversion = \"0.37.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"165859e9e55f79d67b96c5d96f4e88b6f2695a1972849c15a6a3f5c59fc2c003\"\ndependencies = [\n \"memchr\",\n]\n\n[[package]]\nname = \"quote\"\nversion = \"1.0.38\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"0e4dccaaaf89514f546c693ddc140f729f958c247918a13380cccc6078391acc\"\ndependencies = [\n \"proc-macro2\",\n]\n\n[[package]]\nname = \"regex\"\nversion = \"1.11.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b544ef1b4eac5dc2db33ea63606ae9ffcfac26c1416a2806ae0bf5f56b201191\"\ndependencies = [\n \"aho-corasick\",\n \"memchr\",\n \"regex-automata 0.4.8\",\n \"regex-syntax 0.8.5\",\n]\n\n[[package]]\nname = \"regex-automata\"\nversion = \"0.1.10\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"6c230d73fb8d8c1b9c0b3135c5142a8acee3a0558fb8db5cf1cb65f8d7862132\"\ndependencies = [\n \"regex-syntax 0.6.29\",\n]\n\n[[package]]\nname = \"regex-automata\"\nversion = \"0.4.8\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"368758f23274712b504848e9d5a6f010445cc8b87a7cdb4d7cbee666c1288da3\"\ndependencies = [\n \"aho-corasick\",\n \"memchr\",\n \"regex-syntax 0.8.5\",\n]\n\n[[package]]\nname = \"regex-syntax\"\nversion = \"0.6.29\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f162c6dd7b008981e4d40210aca20b4bd0f9b60ca9271061b07f78537722f2e1\"\n\n[[package]]\nname = \"regex-syntax\"\nversion = \"0.8.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"2b15c43186be67a4fd63bee50d0303afffcef381492ebe2c5d87f324e1b8815c\"\n\n[[package]]\nname = \"reqwest\"\nversion = \"0.11.27\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"dd67538700a17451e7cba03ac727fb961abb7607553461627b97de0b89cf4a62\"\ndependencies = [\n \"base64\",\n \"bytes\",\n \"encoding_rs\",\n \"futures-core\",\n \"futures-util\",\n \"h2\",\n \"http\",\n \"http-body\",\n \"hyper\",\n \"hyper-tls\",\n \"ipnet\",\n \"js-sys\",\n \"log\",\n \"mime\",\n \"mime_guess\",\n \"native-tls\",\n \"once_cell\",\n \"percent-encoding\",\n \"pin-project-lite\",\n \"rustls-pemfile\",\n \"serde\",\n \"serde_json\",\n \"serde_urlencoded\",\n \"sync_wrapper\",\n \"system-configuration\",\n \"tokio\",\n \"tokio-native-tls\",\n \"tower-service\",\n \"url\",\n \"wasm-bindgen\",\n \"wasm-bindgen-futures\",\n \"web-sys\",\n \"winreg\",\n]\n\n[[package]]\nname = \"rustc-demangle\"\nversion = \"0.1.24\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"719b953e2095829ee67db738b3bfa9fa368c94900df327b3f07fe6e794d2fe1f\"\n\n[[package]]\nname = \"rustc-hash\"\nversion = \"1.1.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"08d43f7aa6b08d49f382cde6a7982047c3426db949b1424bc4b7ec9ae12c6ce2\"\n\n[[package]]\nname = \"rustc_version\"\nversion = \"0.4.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"cfcb3a22ef46e85b45de6ee7e79d063319ebb6594faafcf1c225ea92ab6e9b92\"\ndependencies = [\n \"semver\",\n]\n\n[[package]]\nname = \"rustix\"\nversion = \"0.38.34\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"70dc5ec042f7a43c4a73241207cecc9873a06d45debb38b329f8541d85c2730f\"\ndependencies = [\n \"bitflags 2.5.0\",\n \"errno\",\n \"libc\",\n \"linux-raw-sys\",\n \"windows-sys 0.52.0\",\n]\n\n[[package]]\nname = \"rustls-pemfile\"\nversion = \"1.0.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1c74cae0a4cf6ccbbf5f359f08efdf8ee7e1dc532573bf0db71968cb56b1448c\"\ndependencies = [\n \"base64\",\n]\n\n[[package]]\nname = \"rusty-fork\"\nversion = \"0.3.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"cb3dcc6e454c328bb824492db107ab7c0ae8fcffe4ad210136ef014458c1bc4f\"\ndependencies = [\n \"fnv\",\n \"quick-error\",\n \"tempfile\",\n \"wait-timeout\",\n]\n\n[[package]]\nname = \"ruzstd\"\nversion = \"0.7.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"fad02996bfc73da3e301efe90b1837be9ed8f4a462b6ed410aa35d00381de89f\"\ndependencies = [\n \"twox-hash\",\n]\n\n[[package]]\nname = \"ryu\"\nversion = \"1.0.18\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f3cb5ba0dc43242ce17de99c180e96db90b235b8a9fdc9543c96d2209116bd9f\"\n\n[[package]]\nname = \"same-file\"\nversion = \"1.0.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"93fc1dc3aaa9bfed95e02e6eadabb4baf7e3078b0bd1b4d7b6b0b68378900502\"\ndependencies = [\n \"winapi-util\",\n]\n\n[[package]]\nname = \"schannel\"\nversion = \"0.1.23\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"fbc91545643bcf3a0bbb6569265615222618bdf33ce4ffbbd13c4bbd4c093534\"\ndependencies = [\n \"windows-sys 0.52.0\",\n]\n\n[[package]]\nname = \"security-framework\"\nversion = \"2.11.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"c627723fd09706bacdb5cf41499e95098555af3c3c29d014dc3c458ef6be11c0\"\ndependencies = [\n \"bitflags 2.5.0\",\n \"core-foundation\",\n \"core-foundation-sys\",\n \"libc\",\n \"security-framework-sys\",\n]\n\n[[package]]\nname = \"security-framework-sys\"\nversion = \"2.11.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"317936bbbd05227752583946b9e66d7ce3b489f84e11a94a510b4437fef407d7\"\ndependencies = [\n \"core-foundation-sys\",\n \"libc\",\n]\n\n[[package]]\nname = \"semver\"\nversion = \"1.0.23\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"61697e0a1c7e512e84a621326239844a24d8207b4669b41bc18b32ea5cbf988b\"\ndependencies = [\n \"serde\",\n]\n\n[[package]]\nname = \"serde\"\nversion = \"1.0.217\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"02fc4265df13d6fa1d00ecff087228cc0a2b5f3c0e87e258d8b94a156e984c70\"\ndependencies = [\n \"serde_derive\",\n]\n\n[[package]]\nname = \"serde_derive\"\nversion = \"1.0.217\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"5a9bf7cf98d04a2b28aead066b7496853d4779c9cc183c440dbac457641e19a0\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn\",\n]\n\n[[package]]\nname = \"serde_json\"\nversion = \"1.0.135\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"2b0d7ba2887406110130a978386c4e1befb98c674b4fba677954e4db976630d9\"\ndependencies = [\n \"itoa\",\n \"memchr\",\n \"ryu\",\n \"serde\",\n]\n\n[[package]]\nname = \"serde_spanned\"\nversion = \"0.6.7\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"eb5b1b31579f3811bf615c144393417496f152e12ac8b7663bf664f4a815306d\"\ndependencies = [\n \"serde\",\n]\n\n[[package]]\nname = \"serde_urlencoded\"\nversion = \"0.7.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d3491c14715ca2294c4d6a88f15e84739788c1d030eed8c110436aafdaa2f3fd\"\ndependencies = [\n \"form_urlencoded\",\n \"itoa\",\n \"ryu\",\n \"serde\",\n]\n\n[[package]]\nname = \"sharded-slab\"\nversion = \"0.1.7\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f40ca3c46823713e0d4209592e8d6e826aa57e928f09752619fc696c499637f6\"\ndependencies = [\n \"lazy_static\",\n]\n\n[[package]]\nname = \"slab\"\nversion = \"0.4.9\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8f92a496fb766b417c996b9c5e57daf2f7ad3b0bebe1ccfca4856390e3d3bb67\"\ndependencies = [\n \"autocfg\",\n]\n\n[[package]]\nname = \"smallvec\"\nversion = \"1.13.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3c5e1a9a646d36c3599cd173a41282daf47c44583ad367b8e6837255952e5c67\"\n\n[[package]]\nname = \"socket2\"\nversion = \"0.5.7\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ce305eb0b4296696835b71df73eb912e0f1ffd2556a501fcede6e0c50349191c\"\ndependencies = [\n \"libc\",\n \"windows-sys 0.52.0\",\n]\n\n[[package]]\nname = \"stable_deref_trait\"\nversion = \"1.2.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a8f112729512f8e442d81f95a8a7ddf2b7c6b8a1a6f509a95864142b30cab2d3\"\n\n[[package]]\nname = \"static_assertions\"\nversion = \"1.1.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a2eb9349b6444b326872e140eb1cf5e7c522154d69e7a0ffb0fb81c06b37543f\"\n\n[[package]]\nname = \"strsim\"\nversion = \"0.11.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"7da8b5736845d9f2fcb837ea5d9e2628564b3b043a70948a3f0b778838c5fb4f\"\n\n[[package]]\nname = \"syn\"\nversion = \"2.0.90\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"919d3b74a5dd0ccd15aeb8f93e7006bd9e14c295087c9896a110f490752bcf31\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"unicode-ident\",\n]\n\n[[package]]\nname = \"sync_wrapper\"\nversion = \"0.1.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"2047c6ded9c721764247e62cd3b03c09ffc529b2ba5b10ec482ae507a4a70160\"\n\n[[package]]\nname = \"system-configuration\"\nversion = \"0.5.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ba3a3adc5c275d719af8cb4272ea1c4a6d668a777f37e115f6d11ddbc1c8e0e7\"\ndependencies = [\n \"bitflags 1.3.2\",\n \"core-foundation\",\n \"system-configuration-sys\",\n]\n\n[[package]]\nname = \"system-configuration-sys\"\nversion = \"0.5.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a75fb188eb626b924683e3b95e3a48e63551fcfb51949de2f06a9d91dbee93c9\"\ndependencies = [\n \"core-foundation-sys\",\n \"libc\",\n]\n\n[[package]]\nname = \"tempfile\"\nversion = \"3.10.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"85b77fafb263dd9d05cbeac119526425676db3784113aa9295c88498cbf8bff1\"\ndependencies = [\n \"cfg-if\",\n \"fastrand\",\n \"rustix\",\n \"windows-sys 0.52.0\",\n]\n\n[[package]]\nname = \"test-log\"\nversion = \"0.2.16\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3dffced63c2b5c7be278154d76b479f9f9920ed34e7574201407f0b14e2bbb93\"\ndependencies = [\n \"env_logger\",\n \"test-log-macros\",\n \"tracing-subscriber\",\n]\n\n[[package]]\nname = \"test-log-macros\"\nversion = \"0.2.16\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"5999e24eaa32083191ba4e425deb75cdf25efefabe5aaccb7446dd0d4122a3f5\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn\",\n]\n\n[[package]]\nname = \"thiserror\"\nversion = \"1.0.60\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"579e9083ca58dd9dcf91a9923bb9054071b9ebbd800b342194c9feb0ee89fc18\"\ndependencies = [\n \"thiserror-impl 1.0.60\",\n]\n\n[[package]]\nname = \"thiserror\"\nversion = \"2.0.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"2f49a1853cf82743e3b7950f77e0f4d622ca36cf4317cba00c767838bac8d490\"\ndependencies = [\n \"thiserror-impl 2.0.4\",\n]\n\n[[package]]\nname = \"thiserror-impl\"\nversion = \"1.0.60\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e2470041c06ec3ac1ab38d0356a6119054dedaea53e12fbefc0de730a1c08524\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn\",\n]\n\n[[package]]\nname = \"thiserror-impl\"\nversion = \"2.0.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8381894bb3efe0c4acac3ded651301ceee58a15d47c2e34885ed1908ad667061\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn\",\n]\n\n[[package]]\nname = \"thread_local\"\nversion = \"1.1.8\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8b9ef9bad013ada3808854ceac7b46812a6465ba368859a37e2100283d2d719c\"\ndependencies = [\n \"cfg-if\",\n \"once_cell\",\n]\n\n[[package]]\nname = \"tinyvec\"\nversion = \"1.6.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"87cc5ceb3875bb20c2890005a4e226a4651264a5c75edb2421b52861a0a0cb50\"\ndependencies = [\n \"tinyvec_macros\",\n]\n\n[[package]]\nname = \"tinyvec_macros\"\nversion = \"0.1.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1f3ccbac311fea05f86f61904b462b55fb3df8837a366dfc601a0161d0532f20\"\n\n[[package]]\nname = \"tokio\"\nversion = \"1.37.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1adbebffeca75fcfd058afa480fb6c0b81e165a0323f9c9d39c9697e37c46787\"\ndependencies = [\n \"backtrace\",\n \"bytes\",\n \"libc\",\n \"mio\",\n \"pin-project-lite\",\n \"socket2\",\n \"windows-sys 0.48.0\",\n]\n\n[[package]]\nname = \"tokio-native-tls\"\nversion = \"0.3.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"bbae76ab933c85776efabc971569dd6119c580d8f5d448769dec1764bf796ef2\"\ndependencies = [\n \"native-tls\",\n \"tokio\",\n]\n\n[[package]]\nname = \"tokio-util\"\nversion = \"0.7.11\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"9cf6b47b3771c49ac75ad09a6162f53ad4b8088b76ac60e8ec1455b31a189fe1\"\ndependencies = [\n \"bytes\",\n \"futures-core\",\n \"futures-sink\",\n \"pin-project-lite\",\n \"tokio\",\n]\n\n[[package]]\nname = \"toml\"\nversion = \"0.8.19\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a1ed1f98e3fdc28d6d910e6737ae6ab1a93bf1985935a1193e68f93eeb68d24e\"\ndependencies = [\n \"serde\",\n \"serde_spanned\",\n \"toml_datetime\",\n \"toml_edit\",\n]\n\n[[package]]\nname = \"toml_datetime\"\nversion = \"0.6.8\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"0dd7358ecb8fc2f8d014bf86f6f638ce72ba252a2c3a2572f2a795f1d23efb41\"\ndependencies = [\n \"serde\",\n]\n\n[[package]]\nname = \"toml_edit\"\nversion = \"0.22.20\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"583c44c02ad26b0c3f3066fe629275e50627026c51ac2e595cca4c230ce1ce1d\"\ndependencies = [\n \"indexmap 2.2.6\",\n \"serde\",\n \"serde_spanned\",\n \"toml_datetime\",\n \"winnow\",\n]\n\n[[package]]\nname = \"tower-service\"\nversion = \"0.3.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b6bc1c9ce2b5135ac7f93c72918fc37feb872bdc6a5533a8b85eb4b86bfdae52\"\n\n[[package]]\nname = \"tracing\"\nversion = \"0.1.41\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"784e0ac535deb450455cbfa28a6f0df145ea1bb7ae51b821cf5e7927fdcfbdd0\"\ndependencies = [\n \"pin-project-lite\",\n \"tracing-attributes\",\n \"tracing-core\",\n]\n\n[[package]]\nname = \"tracing-attributes\"\nversion = \"0.1.28\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"395ae124c09f9e6918a2310af6038fba074bcf474ac352496d5910dd59a2226d\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn\",\n]\n\n[[package]]\nname = \"tracing-core\"\nversion = \"0.1.33\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e672c95779cf947c5311f83787af4fa8fffd12fb27e4993211a84bdfd9610f9c\"\ndependencies = [\n \"once_cell\",\n \"valuable\",\n]\n\n[[package]]\nname = \"tracing-log\"\nversion = \"0.2.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ee855f1f400bd0e5c02d150ae5de3840039a3f54b025156404e34c23c03f47c3\"\ndependencies = [\n \"log\",\n \"once_cell\",\n \"tracing-core\",\n]\n\n[[package]]\nname = \"tracing-subscriber\"\nversion = \"0.3.19\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e8189decb5ac0fa7bc8b96b7cb9b2701d60d48805aca84a238004d665fcc4008\"\ndependencies = [\n \"chrono\",\n \"matchers\",\n \"nu-ansi-term\",\n \"once_cell\",\n \"regex\",\n \"sharded-slab\",\n \"smallvec\",\n \"thread_local\",\n \"tracing\",\n \"tracing-core\",\n \"tracing-log\",\n]\n\n[[package]]\nname = \"try-lock\"\nversion = \"0.2.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e421abadd41a4225275504ea4d6566923418b7f05506fbc9c0fe86ba7396114b\"\n\n[[package]]\nname = \"twox-hash\"\nversion = \"1.6.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"97fee6b57c6a41524a810daee9286c02d7752c4253064d0b05472833a438f675\"\ndependencies = [\n \"cfg-if\",\n \"static_assertions\",\n]\n\n[[package]]\nname = \"unicase\"\nversion = \"2.7.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f7d2d4dafb69621809a81864c9c1b864479e1235c0dd4e199924b9742439ed89\"\ndependencies = [\n \"version_check\",\n]\n\n[[package]]\nname = \"unicode-bidi\"\nversion = \"0.3.15\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"08f95100a766bf4f8f28f90d77e0a5461bbdb219042e7679bebe79004fed8d75\"\n\n[[package]]\nname = \"unicode-ident\"\nversion = \"1.0.12\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3354b9ac3fae1ff6755cb6db53683adb661634f67557942dea4facebec0fee4b\"\n\n[[package]]\nname = \"unicode-normalization\"\nversion = \"0.1.23\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a56d1686db2308d901306f92a263857ef59ea39678a5458e7cb17f01415101f5\"\ndependencies = [\n \"tinyvec\",\n]\n\n[[package]]\nname = \"url\"\nversion = \"2.5.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"31e6302e3bb753d46e83516cae55ae196fc0c309407cf11ab35cc51a4c2a4633\"\ndependencies = [\n \"form_urlencoded\",\n \"idna\",\n \"percent-encoding\",\n]\n\n[[package]]\nname = \"utf8parse\"\nversion = \"0.2.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"711b9620af191e0cdc7468a8d14e709c3dcdb115b36f838e601583af800a370a\"\n\n[[package]]\nname = \"valuable\"\nversion = \"0.1.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"830b7e5d4d90034032940e4ace0d9a9a057e7a45cd94e6c007832e39edb82f6d\"\n\n[[package]]\nname = \"vcpkg\"\nversion = \"0.2.15\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"accd4ea62f7bb7a82fe23066fb0957d48ef677f6eeb8215f372f52e48bb32426\"\n\n[[package]]\nname = \"version_check\"\nversion = \"0.9.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"49874b5167b65d7193b8aba1567f5c7d93d001cafc34600cee003eda787e483f\"\n\n[[package]]\nname = \"wait-timeout\"\nversion = \"0.2.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"9f200f5b12eb75f8c1ed65abd4b2db8a6e1b138a20de009dacee265a2498f3f6\"\ndependencies = [\n \"libc\",\n]\n\n[[package]]\nname = \"walkdir\"\nversion = \"2.5.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"29790946404f91d9c5d06f9874efddea1dc06c5efe94541a7d6863108e3a5e4b\"\ndependencies = [\n \"same-file\",\n \"winapi-util\",\n]\n\n[[package]]\nname = \"want\"\nversion = \"0.3.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"bfa7760aed19e106de2c7c0b581b509f2f25d3dacaf737cb82ac61bc6d760b0e\"\ndependencies = [\n \"try-lock\",\n]\n\n[[package]]\nname = \"wasi\"\nversion = \"0.11.0+wasi-snapshot-preview1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"9c8d87e72b64a3b4db28d11ce29237c246188f4f51057d65a7eab63b7987e423\"\n\n[[package]]\nname = \"wasm-bindgen\"\nversion = \"0.2.92\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"4be2531df63900aeb2bca0daaaddec08491ee64ceecbee5076636a3b026795a8\"\ndependencies = [\n \"cfg-if\",\n \"wasm-bindgen-macro\",\n]\n\n[[package]]\nname = \"wasm-bindgen-backend\"\nversion = \"0.2.92\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"614d787b966d3989fa7bb98a654e369c762374fd3213d212cfc0251257e747da\"\ndependencies = [\n \"bumpalo\",\n \"log\",\n \"once_cell\",\n \"proc-macro2\",\n \"quote\",\n \"syn\",\n \"wasm-bindgen-shared\",\n]\n\n[[package]]\nname = \"wasm-bindgen-futures\"\nversion = \"0.4.42\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"76bc14366121efc8dbb487ab05bcc9d346b3b5ec0eaa76e46594cabbe51762c0\"\ndependencies = [\n \"cfg-if\",\n \"js-sys\",\n \"wasm-bindgen\",\n \"web-sys\",\n]\n\n[[package]]\nname = \"wasm-bindgen-macro\"\nversion = \"0.2.92\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a1f8823de937b71b9460c0c34e25f3da88250760bec0ebac694b49997550d726\"\ndependencies = [\n \"quote\",\n \"wasm-bindgen-macro-support\",\n]\n\n[[package]]\nname = \"wasm-bindgen-macro-support\"\nversion = \"0.2.92\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e94f17b526d0a461a191c78ea52bbce64071ed5c04c9ffe424dcb38f74171bb7\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn\",\n \"wasm-bindgen-backend\",\n \"wasm-bindgen-shared\",\n]\n\n[[package]]\nname = \"wasm-bindgen-shared\"\nversion = \"0.2.92\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"af190c94f2773fdb3729c55b007a722abb5384da03bc0986df4c289bf5567e96\"\n\n[[package]]\nname = \"web-sys\"\nversion = \"0.3.69\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"77afa9a11836342370f4817622a2f0f418b134426d91a82dfb48f532d2ec13ef\"\ndependencies = [\n \"js-sys\",\n \"wasm-bindgen\",\n]\n\n[[package]]\nname = \"winapi\"\nversion = \"0.3.9\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"5c839a674fcd7a98952e593242ea400abe93992746761e38641405d28b00f419\"\ndependencies = [\n \"winapi-i686-pc-windows-gnu\",\n \"winapi-x86_64-pc-windows-gnu\",\n]\n\n[[package]]\nname = \"winapi-i686-pc-windows-gnu\"\nversion = \"0.4.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ac3b87c63620426dd9b991e5ce0329eff545bccbbb34f3be09ff6fb6ab51b7b6\"\n\n[[package]]\nname = \"winapi-util\"\nversion = \"0.1.8\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"4d4cc384e1e73b93bafa6fb4f1df8c41695c8a91cf9c4c64358067d15a7b6c6b\"\ndependencies = [\n \"windows-sys 0.52.0\",\n]\n\n[[package]]\nname = \"winapi-x86_64-pc-windows-gnu\"\nversion = \"0.4.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"712e227841d057c1ee1cd2fb22fa7e5a5461ae8e48fa2ca79ec42cfc1931183f\"\n\n[[package]]\nname = \"windows-core\"\nversion = \"0.52.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"33ab640c8d7e35bf8ba19b884ba838ceb4fba93a4e8c65a9059d08afcfc683d9\"\ndependencies = [\n \"windows-targets 0.52.5\",\n]\n\n[[package]]\nname = \"windows-sys\"\nversion = \"0.48.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"677d2418bec65e3338edb076e806bc1ec15693c5d0104683f2efe857f61056a9\"\ndependencies = [\n \"windows-targets 0.48.5\",\n]\n\n[[package]]\nname = \"windows-sys\"\nversion = \"0.52.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"282be5f36a8ce781fad8c8ae18fa3f9beff57ec1b52cb3de0789201425d9a33d\"\ndependencies = [\n \"windows-targets 0.52.5\",\n]\n\n[[package]]\nname = \"windows-targets\"\nversion = \"0.48.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"9a2fa6e2155d7247be68c096456083145c183cbbbc2764150dda45a87197940c\"\ndependencies = [\n \"windows_aarch64_gnullvm 0.48.5\",\n \"windows_aarch64_msvc 0.48.5\",\n \"windows_i686_gnu 0.48.5\",\n \"windows_i686_msvc 0.48.5\",\n \"windows_x86_64_gnu 0.48.5\",\n \"windows_x86_64_gnullvm 0.48.5\",\n \"windows_x86_64_msvc 0.48.5\",\n]\n\n[[package]]\nname = \"windows-targets\"\nversion = \"0.52.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"6f0713a46559409d202e70e28227288446bf7841d3211583a4b53e3f6d96e7eb\"\ndependencies = [\n \"windows_aarch64_gnullvm 0.52.5\",\n \"windows_aarch64_msvc 0.52.5\",\n \"windows_i686_gnu 0.52.5\",\n \"windows_i686_gnullvm\",\n \"windows_i686_msvc 0.52.5\",\n \"windows_x86_64_gnu 0.52.5\",\n \"windows_x86_64_gnullvm 0.52.5\",\n \"windows_x86_64_msvc 0.52.5\",\n]\n\n[[package]]\nname = \"windows_aarch64_gnullvm\"\nversion = \"0.48.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"2b38e32f0abccf9987a4e3079dfb67dcd799fb61361e53e2882c3cbaf0d905d8\"\n\n[[package]]\nname = \"windows_aarch64_gnullvm\"\nversion = \"0.52.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"7088eed71e8b8dda258ecc8bac5fb1153c5cffaf2578fc8ff5d61e23578d3263\"\n\n[[package]]\nname = \"windows_aarch64_msvc\"\nversion = \"0.48.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"dc35310971f3b2dbbf3f0690a219f40e2d9afcf64f9ab7cc1be722937c26b4bc\"\n\n[[package]]\nname = \"windows_aarch64_msvc\"\nversion = \"0.52.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"9985fd1504e250c615ca5f281c3f7a6da76213ebd5ccc9561496568a2752afb6\"\n\n[[package]]\nname = \"windows_i686_gnu\"\nversion = \"0.48.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a75915e7def60c94dcef72200b9a8e58e5091744960da64ec734a6c6e9b3743e\"\n\n[[package]]\nname = \"windows_i686_gnu\"\nversion = \"0.52.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"88ba073cf16d5372720ec942a8ccbf61626074c6d4dd2e745299726ce8b89670\"\n\n[[package]]\nname = \"windows_i686_gnullvm\"\nversion = \"0.52.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"87f4261229030a858f36b459e748ae97545d6f1ec60e5e0d6a3d32e0dc232ee9\"\n\n[[package]]\nname = \"windows_i686_msvc\"\nversion = \"0.48.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8f55c233f70c4b27f66c523580f78f1004e8b5a8b659e05a4eb49d4166cca406\"\n\n[[package]]\nname = \"windows_i686_msvc\"\nversion = \"0.52.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"db3c2bf3d13d5b658be73463284eaf12830ac9a26a90c717b7f771dfe97487bf\"\n\n[[package]]\nname = \"windows_x86_64_gnu\"\nversion = \"0.48.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"53d40abd2583d23e4718fddf1ebec84dbff8381c07cae67ff7768bbf19c6718e\"\n\n[[package]]\nname = \"windows_x86_64_gnu\"\nversion = \"0.52.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"4e4246f76bdeff09eb48875a0fd3e2af6aada79d409d33011886d3e1581517d9\"\n\n[[package]]\nname = \"windows_x86_64_gnullvm\"\nversion = \"0.48.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"0b7b52767868a23d5bab768e390dc5f5c55825b6d30b86c844ff2dc7414044cc\"\n\n[[package]]\nname = \"windows_x86_64_gnullvm\"\nversion = \"0.52.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"852298e482cd67c356ddd9570386e2862b5673c85bd5f88df9ab6802b334c596\"\n\n[[package]]\nname = \"windows_x86_64_msvc\"\nversion = \"0.48.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ed94fce61571a4006852b7389a063ab983c02eb1bb37b47f8272ce92d06d9538\"\n\n[[package]]\nname = \"windows_x86_64_msvc\"\nversion = \"0.52.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"bec47e5bfd1bff0eeaf6d8b485cc1074891a197ab4225d504cb7a1ab88b02bf0\"\n\n[[package]]\nname = \"winnow\"\nversion = \"0.6.18\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"68a9bda4691f099d435ad181000724da8e5899daa10713c2d432552b9ccd3a6f\"\ndependencies = [\n \"memchr\",\n]\n\n[[package]]\nname = \"winreg\"\nversion = \"0.50.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"524e57b2c537c0f9b1e69f1965311ec12182b4122e45035b1508cd24d2adadb1\"\ndependencies = [\n \"cfg-if\",\n \"windows-sys 0.48.0\",\n]\n"
        },
        {
          "name": "Cargo.toml",
          "type": "blob",
          "size": 2.25,
          "content": "[package]\nname = \"cargo-tarpaulin\"\nversion = \"0.31.4\"\nauthors = [\"Daniel McKenna <danielmckenna93@gmail.com>\"]\ndescription = \"Cargo-Tarpaulin is a tool to determine code coverage achieved via tests\"\nrepository = \"https://github.com/xd009642/tarpaulin\"\nreadme = \"README.md\"\nlicense = \"MIT OR Apache-2.0\"\ncategories = [\"development-tools\"]\nkeywords = [\"cargo\", \"cargo-subcommand\", \"testing\"]\nedition = \"2018\"\nautotests = false\nbuild = \"build.rs\"\n\n[[bin]]\nname = \"cargo-tarpaulin\"\n\n[[test]]\nname = \"integration\"\npath = \"tests/mod.rs\"\n\n[dependencies]\ncargo_metadata = \"0.19\"\ncfg-if = \"1.0.0\"\nchrono = \"0.4\"\nclap = { version = \"4.4.0\", features = [\"derive\"] }\ncoveralls-api = { version = \"0.6.0\", optional = true }\ngimli = \"0.31.1\"\ngit2 =  { version = \"0.20\", optional = true }\nhumantime-serde = \"1\"\nindexmap = { version = \"~1.8\", features = [\"serde-1\"] }\nlazy_static = \"1.5\"\nllvm_profparser = { version = \"0.7.0\", default-features = false }\nobject = \"0.36\"\nnum_cpus = \"1.16.0\"\nproc-macro2 = { version = \"1.0\", features = [\"span-locations\"] }\nquick-xml = \"0.37\"\nquote = \"1.0\"\nregex = \"1.11\"\nrustc-demangle = \"0.1.24\"\nserde = { version = \"1.0\", features = [\"derive\"] }\nserde_json = \"1.0\"\nsyn = { version = \"2.0\", features = [\"full\"] }\ntoml = \"0.8\"\ntracing = { version = \"0.1\", default-features = false }\ntracing-subscriber = { version = \"0.3.19\", default-features = false, features = [\n    \"env-filter\",\n    \"fmt\",\n    \"chrono\",\n    \"ansi\",\n    \"smallvec\",\n    \"tracing-log\",\n] }\nwalkdir = \"2.5.0\"\nglob = \"0.3.2\"\n\n[target.'cfg(all(target_os = \"linux\", any(target_arch = \"x86_64\", target_arch = \"x86\")))'.dependencies]\nlibc = \"0.2.169\"\nnix = {version = \"0.29.0\", default-features = false, features = [\"sched\", \"signal\", \"ptrace\", \"personality\"]}\nprocfs = \"0.17\"\n\n[features]\ndefault = [\"coveralls\"]\ncoveralls = [\"coveralls-api\", \"git2\"]\nvendored-openssl = [\"git2/vendored-openssl\", \"coveralls\"]\n\n[build-dependencies]\nrustc_version = \"0.4\"\n\n[dev-dependencies]\nlcov = \"0.8.1\"\nrusty-fork = \"0.3.0\"\ntest-log = { version = \"0.2.16\", features = [\"trace\"] }\n\n[package.metadata.binstall]\npkg-url = \"{ repo }/releases/download/{ version }/cargo-tarpaulin-{ target }{ archive-suffix }\"\nbin-dir = \"cargo-tarpaulin{ binary-ext }\"\npkg-fmt = \"tgz\"\n\n[package.metadata.binstall.overrides.x86_64-pc-windows-msvc]\npkg-fmt = \"zip\"\n"
        },
        {
          "name": "Dockerfile",
          "type": "blob",
          "size": 0.4970703125,
          "content": "FROM rust as builder\n\nWORKDIR /opt/tarpaulin\n\nRUN env USER=root cargo init .\n\nCOPY Cargo.toml .\nCOPY Cargo.lock .\nCOPY build.rs .\n\nRUN mkdir .cargo\nRUN cargo vendor > .cargo/config\n\nCOPY src /opt/tarpaulin/src\n\nRUN cd /opt/tarpaulin/ && \\\n    cargo install --locked --path . && \\\n    rm -rf /opt/tarpaulin/ && \\\n    rm -rf /usr/local/cargo/registry/\n\nFROM rust\n\nCOPY --from=builder /usr/local/cargo/bin/cargo-tarpaulin /usr/local/cargo/bin/cargo-tarpaulin\n\nWORKDIR /volume\n\nCMD cargo build && cargo tarpaulin\n"
        },
        {
          "name": "Dockerfile-nightly",
          "type": "blob",
          "size": 0.5302734375,
          "content": "FROM rustlang/rust:nightly as builder\n\nWORKDIR /opt/tarpaulin\n\nRUN env USER=root cargo init .\n\nCOPY Cargo.toml .\nCOPY Cargo.lock .\nCOPY build.rs .\n\nRUN mkdir .cargo\nRUN cargo vendor > .cargo/config\n\nCOPY src /opt/tarpaulin/src\n\nRUN cd /opt/tarpaulin/ && \\\n    cargo install --locked --path . && \\\n    rm -rf /opt/tarpaulin/ && \\\n    rm -rf /usr/local/cargo/registry/\n\nFROM rustlang/rust:nightly\n\nCOPY --from=builder /usr/local/cargo/bin/cargo-tarpaulin /usr/local/cargo/bin/cargo-tarpaulin\n\nWORKDIR /volume\n\nCMD cargo build && cargo tarpaulin\n"
        },
        {
          "name": "Dockerfile-nightly-slim",
          "type": "blob",
          "size": 0.623046875,
          "content": "FROM rustlang/rust:nightly as builder\n\nWORKDIR /opt/tarpaulin\n\nRUN env USER=root cargo init .\n\nCOPY Cargo.toml .\nCOPY Cargo.lock .\nCOPY build.rs .\n\nRUN mkdir .cargo\nRUN cargo vendor > .cargo/config\n\nCOPY src /opt/tarpaulin/src\n\nRUN cd /opt/tarpaulin/ && \\\n    cargo install --locked --path . && \\\n    rm -rf /opt/tarpaulin/ && \\\n    rm -rf /usr/local/cargo/registry/\n\nFROM rustlang/rust:nightly-slim\n\nRUN apt-get update && \\\n    apt-get install -y curl && \\\n    rm -rf /var/lib/apt/lists/*\n\nCOPY --from=builder /usr/local/cargo/bin/cargo-tarpaulin /usr/local/cargo/bin/cargo-tarpaulin\n\nWORKDIR /volume\n\nCMD cargo build && cargo tarpaulin\n"
        },
        {
          "name": "Dockerfile-slim",
          "type": "blob",
          "size": 0.58984375,
          "content": "FROM rust as builder\n\nWORKDIR /opt/tarpaulin\n\nRUN env USER=root cargo init .\n\nCOPY Cargo.toml .\nCOPY Cargo.lock .\nCOPY build.rs .\n\nRUN mkdir .cargo\nRUN cargo vendor > .cargo/config\n\nCOPY src /opt/tarpaulin/src\n\nRUN cd /opt/tarpaulin/ && \\\n    cargo install --locked --path . && \\\n    rm -rf /opt/tarpaulin/ && \\\n    rm -rf /usr/local/cargo/registry/\n\nFROM rust:slim\n\nRUN apt-get update && \\\n    apt-get install -y curl && \\\n    rm -rf /var/lib/apt/lists/*\n\nCOPY --from=builder /usr/local/cargo/bin/cargo-tarpaulin /usr/local/cargo/bin/cargo-tarpaulin\n\nWORKDIR /volume\n\nCMD cargo build && cargo tarpaulin\n"
        },
        {
          "name": "LICENSE-APACHE",
          "type": "blob",
          "size": 10.5927734375,
          "content": "                              Apache License\n                        Version 2.0, January 2004\n                     http://www.apache.org/licenses/\n\nTERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n1. Definitions.\n\n   \"License\" shall mean the terms and conditions for use, reproduction,\n   and distribution as defined by Sections 1 through 9 of this document.\n\n   \"Licensor\" shall mean the copyright owner or entity authorized by\n   the copyright owner that is granting the License.\n\n   \"Legal Entity\" shall mean the union of the acting entity and all\n   other entities that control, are controlled by, or are under common\n   control with that entity. For the purposes of this definition,\n   \"control\" means (i) the power, direct or indirect, to cause the\n   direction or management of such entity, whether by contract or\n   otherwise, or (ii) ownership of fifty percent (50%) or more of the\n   outstanding shares, or (iii) beneficial ownership of such entity.\n\n   \"You\" (or \"Your\") shall mean an individual or Legal Entity\n   exercising permissions granted by this License.\n\n   \"Source\" form shall mean the preferred form for making modifications,\n   including but not limited to software source code, documentation\n   source, and configuration files.\n\n   \"Object\" form shall mean any form resulting from mechanical\n   transformation or translation of a Source form, including but\n   not limited to compiled object code, generated documentation,\n   and conversions to other media types.\n\n   \"Work\" shall mean the work of authorship, whether in Source or\n   Object form, made available under the License, as indicated by a\n   copyright notice that is included in or attached to the work\n   (an example is provided in the Appendix below).\n\n   \"Derivative Works\" shall mean any work, whether in Source or Object\n   form, that is based on (or derived from) the Work and for which the\n   editorial revisions, annotations, elaborations, or other modifications\n   represent, as a whole, an original work of authorship. For the purposes\n   of this License, Derivative Works shall not include works that remain\n   separable from, or merely link (or bind by name) to the interfaces of,\n   the Work and Derivative Works thereof.\n\n   \"Contribution\" shall mean any work of authorship, including\n   the original version of the Work and any modifications or additions\n   to that Work or Derivative Works thereof, that is intentionally\n   submitted to Licensor for inclusion in the Work by the copyright owner\n   or by an individual or Legal Entity authorized to submit on behalf of\n   the copyright owner. For the purposes of this definition, \"submitted\"\n   means any form of electronic, verbal, or written communication sent\n   to the Licensor or its representatives, including but not limited to\n   communication on electronic mailing lists, source code control systems,\n   and issue tracking systems that are managed by, or on behalf of, the\n   Licensor for the purpose of discussing and improving the Work, but\n   excluding communication that is conspicuously marked or otherwise\n   designated in writing by the copyright owner as \"Not a Contribution.\"\n\n   \"Contributor\" shall mean Licensor and any individual or Legal Entity\n   on behalf of whom a Contribution has been received by Licensor and\n   subsequently incorporated within the Work.\n\n2. Grant of Copyright License. Subject to the terms and conditions of\n   this License, each Contributor hereby grants to You a perpetual,\n   worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n   copyright license to reproduce, prepare Derivative Works of,\n   publicly display, publicly perform, sublicense, and distribute the\n   Work and such Derivative Works in Source or Object form.\n\n3. Grant of Patent License. Subject to the terms and conditions of\n   this License, each Contributor hereby grants to You a perpetual,\n   worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n   (except as stated in this section) patent license to make, have made,\n   use, offer to sell, sell, import, and otherwise transfer the Work,\n   where such license applies only to those patent claims licensable\n   by such Contributor that are necessarily infringed by their\n   Contribution(s) alone or by combination of their Contribution(s)\n   with the Work to which such Contribution(s) was submitted. If You\n   institute patent litigation against any entity (including a\n   cross-claim or counterclaim in a lawsuit) alleging that the Work\n   or a Contribution incorporated within the Work constitutes direct\n   or contributory patent infringement, then any patent licenses\n   granted to You under this License for that Work shall terminate\n   as of the date such litigation is filed.\n\n4. Redistribution. You may reproduce and distribute copies of the\n   Work or Derivative Works thereof in any medium, with or without\n   modifications, and in Source or Object form, provided that You\n   meet the following conditions:\n\n   (a) You must give any other recipients of the Work or\n       Derivative Works a copy of this License; and\n\n   (b) You must cause any modified files to carry prominent notices\n       stating that You changed the files; and\n\n   (c) You must retain, in the Source form of any Derivative Works\n       that You distribute, all copyright, patent, trademark, and\n       attribution notices from the Source form of the Work,\n       excluding those notices that do not pertain to any part of\n       the Derivative Works; and\n\n   (d) If the Work includes a \"NOTICE\" text file as part of its\n       distribution, then any Derivative Works that You distribute must\n       include a readable copy of the attribution notices contained\n       within such NOTICE file, excluding those notices that do not\n       pertain to any part of the Derivative Works, in at least one\n       of the following places: within a NOTICE text file distributed\n       as part of the Derivative Works; within the Source form or\n       documentation, if provided along with the Derivative Works; or,\n       within a display generated by the Derivative Works, if and\n       wherever such third-party notices normally appear. The contents\n       of the NOTICE file are for informational purposes only and\n       do not modify the License. You may add Your own attribution\n       notices within Derivative Works that You distribute, alongside\n       or as an addendum to the NOTICE text from the Work, provided\n       that such additional attribution notices cannot be construed\n       as modifying the License.\n\n   You may add Your own copyright statement to Your modifications and\n   may provide additional or different license terms and conditions\n   for use, reproduction, or distribution of Your modifications, or\n   for any such Derivative Works as a whole, provided Your use,\n   reproduction, and distribution of the Work otherwise complies with\n   the conditions stated in this License.\n\n5. Submission of Contributions. Unless You explicitly state otherwise,\n   any Contribution intentionally submitted for inclusion in the Work\n   by You to the Licensor shall be under the terms and conditions of\n   this License, without any additional terms or conditions.\n   Notwithstanding the above, nothing herein shall supersede or modify\n   the terms of any separate license agreement you may have executed\n   with Licensor regarding such Contributions.\n\n6. Trademarks. This License does not grant permission to use the trade\n   names, trademarks, service marks, or product names of the Licensor,\n   except as required for reasonable and customary use in describing the\n   origin of the Work and reproducing the content of the NOTICE file.\n\n7. Disclaimer of Warranty. Unless required by applicable law or\n   agreed to in writing, Licensor provides the Work (and each\n   Contributor provides its Contributions) on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n   implied, including, without limitation, any warranties or conditions\n   of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n   PARTICULAR PURPOSE. You are solely responsible for determining the\n   appropriateness of using or redistributing the Work and assume any\n   risks associated with Your exercise of permissions under this License.\n\n8. Limitation of Liability. In no event and under no legal theory,\n   whether in tort (including negligence), contract, or otherwise,\n   unless required by applicable law (such as deliberate and grossly\n   negligent acts) or agreed to in writing, shall any Contributor be\n   liable to You for damages, including any direct, indirect, special,\n   incidental, or consequential damages of any character arising as a\n   result of this License or out of the use or inability to use the\n   Work (including but not limited to damages for loss of goodwill,\n   work stoppage, computer failure or malfunction, or any and all\n   other commercial damages or losses), even if such Contributor\n   has been advised of the possibility of such damages.\n\n9. Accepting Warranty or Additional Liability. While redistributing\n   the Work or Derivative Works thereof, You may choose to offer,\n   and charge a fee for, acceptance of support, warranty, indemnity,\n   or other liability obligations and/or rights consistent with this\n   License. However, in accepting such obligations, You may act only\n   on Your own behalf and on Your sole responsibility, not on behalf\n   of any other Contributor, and only if You agree to indemnify,\n   defend, and hold each Contributor harmless for any liability\n   incurred by, or claims asserted against, such Contributor by reason\n   of your accepting any such warranty or additional liability.\n\nEND OF TERMS AND CONDITIONS\n\nAPPENDIX: How to apply the Apache License to your work.\n\n   To apply the Apache License to your work, attach the following\n   boilerplate notice, with the fields enclosed by brackets \"[]\"\n   replaced with your own identifying information. (Don't include\n   the brackets!)  The text should be enclosed in the appropriate\n   comment syntax for the file format. We also recommend that a\n   file or class name and description of purpose be included on the\n   same \"printed page\" as the copyright notice for easier\n   identification within third-party archives.\n\nCopyright [yyyy] [name of copyright owner]\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n\thttp://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n"
        },
        {
          "name": "LICENSE-MIT",
          "type": "blob",
          "size": 1.0400390625,
          "content": "MIT License\n\nCopyright (c) 2017 xd009642\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 26.84765625,
          "content": "# Tarpaulin\n\n[![Build Status](https://github.com/xd009642/tarpaulin/workflows/Build/badge.svg)](https://github.com/xd009642/tarpaulin/actions)\n[![Latest Version](https://img.shields.io/crates/v/cargo-tarpaulin.svg)](https://crates.io/crates/cargo-tarpaulin)\n[![License:MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)\n[![Docker](https://img.shields.io/docker/automated/xd009642/tarpaulin.svg)](https://hub.docker.com/r/xd009642/tarpaulin/)\n[![Developers Wiki](https://img.shields.io/badge/development-wiki-yellowgreen.svg)](https://github.com/xd009642/tarpaulin/wiki/Developers)\n[![Coverage Status](https://coveralls.io/repos/github/xd009642/tarpaulin/badge.svg?branch=develop)](https://coveralls.io/github/xd009642/tarpaulin?branch=develop)\n\nTarpaulin is a code coverage reporting tool for the Cargo build system, named \nfor a waterproof cloth used to cover cargo on a ship.\n\nCurrently, Tarpaulin provides working line coverage, and while fairly reliable, \nmay still contain  minor inaccuracies in the results. A lot of work has been \ndone to get it working on a wide range of projects, but unique combinations of\npackages and build features can cause issues, so please report anything\nyou find that's wrong. Also, check out our roadmap for planned features.\n\nOn Linux, Tarpaulin's default tracing backend is still Ptrace and will only work\non x86\\_64 processors. This can be changed to the llvm coverage instrumentation\nwith `--engine llvm`. For Mac and Windows, this is the default collection\nmethod.\n\nIt can also be run in Docker, which is useful for when you don't use Linux but\nwant to run it locally, e.g. during development. See below for how to do that.\n\nBelow is the help-text for a thorough explanation of the flags and features\navailable:\n\n```\nCargo-Tarpaulin is a tool to determine code coverage achieved via tests\n\nUsage: cargo tarpaulin [OPTIONS] [-- <ARGS>...]\n\nArguments:\n  [ARGS]...  Arguments to be passed to the test executables can be used to filter or skip certain tests\n\nOptions:\n      --print-rust-flags           Print the RUSTFLAGS options that tarpaulin will compile your program with and exit\n      --print-rustdoc-flags        Print the RUSTDOCFLAGS options that tarpaulin will compile any doctests with and exit\n      --color <WHEN>               Coloring: auto, always, never [possible values: Auto, Always, Never]\n      --debug                      Show debug output - this is used for diagnosing issues with tarpaulin\n  -v, --verbose                    Show extra output\n      --dump-traces                Log tracing events and save to a json file. Also, enabled when --debug is used\n      --stderr                     Print tarpaulin logs to stderr instead - test output will still be printed to stdout\n      --run-types <TYPE>           Type of the coverage run [possible values: Tests, Doctests, Benchmarks, Examples, Lib, Bins, AllTargets]\n      --benches                    Test all benches\n      --doc                        Test only this library's documentation\n      --all-targets                Test all targets (excluding doctests)\n      --lib                        Test only this package's library unit tests\n      --bins                       Test all binaries\n      --examples                   Test all examples\n      --tests                      Test all tests\n      --config <FILE>              Path to a toml file specifying a list of options this will override any other options set\n      --ignore-config              Ignore any project config files\n      --bin [<NAME>...]            Test only the specified binary\n      --example [<NAME>...]        Test only the specified example\n      --test [<NAME>...]           Test only the specified test target\n      --bench [<NAME>...]          Test only the specified bench target\n      --no-fail-fast               Run all tests regardless of failure\n      --profile <NAME>             Build artefacts with the specified profile\n      --ignore-tests               Ignore lines of test functions when collecting coverage (default)\n      --no-dead-code               Stops tarpaulin from building projects with -Clink-dead-code\n      --include-tests              Include lines of test functions when collecting coverage\n      --ignore-panics              Ignore panic macros in tests\n      --count                      Counts the number of hits during coverage\n  -i, --ignored                    Run ignored tests as well\n  -l, --line                       Line coverage\n      --skip-clean                 The opposite of --force-clean\n      --force-clean                Adds a clean stage to work around cargo bugs that may affect coverage results\n      --fail-under <PERCENTAGE>    Sets a percentage threshold for failure ranging from 0-100, if coverage is below exit with a non-zero code\n  -b, --branch                     Branch coverage: NOT IMPLEMENTED\n  -f, --forward                    Forwards unexpected signals to test. This is now the default behaviour\n      --coveralls <KEY>            Coveralls key, either the repo token, or if you're using travis use $TRAVIS_JOB_ID and specify travis-{ci|pro} in --ciserver\n      --report-uri <URI>           URI to send report to, only used if the option --coveralls is used\n      --no-default-features        Do not include default features\n      --features [<FEATURES>...]   Features to be included in the target project\n      --all-features               Build all available features\n      --all                        Alias for --workspace (deprecated)\n      --workspace                  Test all packages in the workspace\n  -p, --packages [<PACKAGE>...]    Package id specifications for which package should be build. See cargo help pkgid for more info\n  -e, --exclude [<PACKAGE>...]     Package id specifications to exclude from coverage. See cargo help pkgid for more info\n      --exclude-files [<FILE>...]  Exclude given files from coverage results has * wildcard\n      --include-files [<FILE>...]  Include only given files in coverage results. Can have a * wildcard\n  -t, --timeout <SECONDS>          Integer for the maximum time in seconds without response from test before timeout (default is 1 minute)\n      --post-test-delay <SECONDS>  Delay after test to collect coverage profiles\n      --follow-exec                Follow executed processes capturing coverage information if they're part of your project\n      --release                    Build in release mode\n      --no-run                     Compile tests but don't run coverage\n      --implicit-test-threads      'Don't supply an explicit `--test-threads` argument to test executable. By default tarpaulin will infer the default rustc would pick if not ran via tarpaulin and set it\n      --locked                     Do not update Cargo.lock\n      --frozen                     Do not update Cargo.lock or any caches\n      --target <TRIPLE>            Compilation target triple\n      --target-dir <DIR>           Directory for all generated artifacts\n      --offline                    Run without accessing the network\n      --avoid-cfg-tarpaulin        Remove --cfg=tarpaulin from the RUSTFLAG\n  -j, --jobs <N>                   Number of parallel jobs, defaults to # of CPUs\n      --rustflags <FLAGS>          Rustflags to add when building project (can also be set via RUSTFLAGS env var)\n      --objects [<objects>...]     Other object files to load which contain information for llvm coverage - must have been compiled with llvm coverage instrumentation (ignored for ptrace)\n  -Z [<FEATURES>...]               List of unstable nightly only flags\n  -o, --out [<FMT>...]             Output format of coverage report [possible values: Json, Stdout, Xml, Html, Lcov]\n      --engine <ENGINE>            Coverage tracing backend to use [possible values: Auto, Ptrace, Llvm]\n      --output-dir <PATH>          Specify a custom directory to write report files\n      --command <CMD>              cargo subcommand to run. So far only test and build are supported [possible values: Test, Build]\n  -r, --root <DIR>                 Calculates relative paths to root directory. If --manifest-path isn't specified it will look for a Cargo.toml in root\n      --manifest-path <PATH>       Path to Cargo.toml\n      --ciserver <SERVICE>         CI server being used, if unspecified tarpaulin may automatically infer for coveralls uploads\n      --fail-immediately           Option to fail immediately after a single test fails\n  -h, --help                       Print help\n  -V, --version                    Print version\n```\n\n### Note on tests using signals\n\nIf your tests or application make use of unix signals they may not work with\nptrace instrumentation in Tarpaulin. This is because Tarpaulin relies on the\nsigtrap signal to catch when the instrumentation points are hit. The\n`--forward` option results in forwarding the signals from process stops not\ncaused by SIGSTOP, SIGSEGV or SIGILL to the test binary.\n\n### Nuances with LLVM Coverage\n\nDespite generally being far more accurate there are some nuances with the LLVM\ncoverage instrumentation. \n\n1. If a test has a non-zero exit code coverage data isn't returned\n2. Some areas of thread unsafety\n3. Unable to handle fork and similar syscalls (one process will overwrite another's\nprofraw file)\n\nIn these cases coverage results may differ a lot between ptrace and llvm and llvm\ncoverage may be a worse choice. Things like doc tests with the `should_panic`\nattribute or `--no-fail-fast` won't report any coverage because of non-zero\nexit codes and if you use these and want coverage data from them you should\navoid the llvm coverage backend.\n\n## Features\n\nBelow is a list of features currently implemented. As Tarpaulin loads binary\nfiles into memory and parses the debugging information, different setups could\nlead to coverage not working. In this instance, please raise an issue detailing\nyour setup and an example project and I'll attempt to fix it (please link us to\na repo and the commit containing your project and paste the verbose output).\n\n* Line coverage\n* Full compatibility with cargo test CLI arguments\n* Uploading coverage to <https://coveralls.io> or <https://codecov.io>\n* HTML report generation and other coverage report types\n* Coverage of tests, doctests, benchmarks and examples possible\n* Excluding irrelevant files from coverage\n* Config file for mutually exclusive coverage settings (see `Config file` section for details)\n\n## Issues and Contributing\n\nIssues, feature requests and pull requests are always welcome! For a guide on\nhow to approach bugs found in Tarpaulin and add features please check\n[CONTRIBUTING](CONTRIBUTING.md). If you're having any troubles also look to our \n[TROUBLESHOOTING](TROUBLESHOOTING.md)\n\nRust 1.23 introduced a regression in the compiler affecting Tarpaulin's\naccuracy. If you see missing lines or files, check your compiler version.\n\n## Usage\n\n### Installation\n\nTarpaulin is a command-line program, you install it into your development\nenvironment with cargo install:\n\n```text\ncargo install cargo-tarpaulin\n```\n\nWhen using the [Nix](https://nixos.org/nix) package manager, the `nixpkgs.cargo-tarpaulin` package can be used.\nThis ensures that Tarpaulin will be built with the same rust version as the rest of your packages.\n\nYou can also use [cargo-binstall](https://github.com/ryankurte/cargo-binstall):\n\n```text\ncargo binstall cargo-tarpaulin\n```\n\n### Environment Variables\n\nWhen Tarpaulin runs your tests it strives to run them in the same environment as if they were run via cargo test. \nTo achieve this it sets the following environment variables when executing the test binaries:\n\n- **RUST_BACKTRACE**      - _When --verbose flag is used_\n- **CARGO_MANIFEST_DIR**  - _Path to Cargo.toml From --root | --manifest-path or guessed from the current or parent directory_\n- **CARGO_PKG_NAME**      - _From Cargo.toml_\n- **CARGO_PKG_AUTHORS**   - _From Cargo.toml_\n- **CARGO_PKG_VERSION**   - _From Cargo.toml_\n- **LLVM_PROFILE_FILE**   - _Used for LLVM coverage_\n\n### Cargo Manifest\n\nFor Tarpaulin to construct the Cargo environment correctly, Tarpaulin needs to find Cargo.toml by either:\n\n- Using *--root* or *--manifest-path* or\n- By invoking Cargo from the current working directory within the project holding Cargo.toml manifest or\n- By invoking Cargo from a sub-directory within the project\n\nIf Cargo does not find any Cargo.toml from using either of the above methods the run will error \"cargo metadata\" and exit.\n\nSeveral RFCs are open in rust-lang to expose [more of these](https://doc.rust-lang.org/cargo/reference/environment-variables.html#environment-variables-cargo-sets-for-3rd-party-subcommands) directly in order to avoid the issues arising out of this.\n\n### Command line\n\nTo get detailed help on available arguments when running Tarpaulin call:\n\n```bash\ncargo tarpaulin --help\n```\n\nCurrently, no options are required, if no root directory is defined Tarpaulin\nwill run in the current working directory.\n\nBelow is a Tarpaulin run utilising one of our example projects. This is a\nrelatively simple project to test and if you check the test, you can see the\noutput correctly reports the lines the test hits.\n\n```bash\ncargo tarpaulin\nJan 30 21:43:33.715  INFO cargo_tarpaulin::config: Creating config\nJan 30 21:43:33.908  INFO cargo_tarpaulin: Running Tarpaulin\nJan 30 21:43:33.908  INFO cargo_tarpaulin: Building project\nJan 30 21:43:33.908  INFO cargo_tarpaulin::cargo: Cleaning project\n   Compiling simple_project v0.1.0 (/home/daniel/personal/tarpaulin/tests/data/simple_project)\n    Finished test [unoptimized + debuginfo] target(s) in 0.51s\nJan 30 21:43:34.631  INFO cargo_tarpaulin::process_handling::linux: Launching test\nJan 30 21:43:34.631  INFO cargo_tarpaulin::process_handling: running /home/daniel/personal/tarpaulin/tests/data/simple_project/target/debug/deps/simple_project-417a21905eb8be09\n\nrunning 1 test\ntest tests::bad_test ... ok\n\ntest result: ok. 1 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0.02s\n\nJan 30 21:43:35.563  INFO cargo_tarpaulin::report: Coverage Results:\n|| Uncovered Lines:\n|| src/lib.rs: 6\n|| src/unused.rs: 4-6\n|| Tested/Total Lines:\n|| src/lib.rs: 3/4\n|| src/unused.rs: 0/3\n|| \n42.86% coverage, 3/7 lines covered\n```\n\nTarpaulin can also report the change in coverage for each file between runs. If\nthe tests were updated in the previous example to cover all the lines we would\nexpect the following output.\n\n```text\ncargo tarpaulin\nJan 30 21:45:37.611  INFO cargo_tarpaulin::config: Creating config\nJan 30 21:45:37.623  INFO cargo_tarpaulin: Running Tarpaulin\nJan 30 21:45:37.623  INFO cargo_tarpaulin: Building project\nJan 30 21:45:37.623  INFO cargo_tarpaulin::cargo: Cleaning project\n   Compiling simple_project v0.1.0 (/home/daniel/personal/tarpaulin/tests/data/simple_project)\n    Finished test [unoptimized + debuginfo] target(s) in 0.40s\nJan 30 21:45:38.085  INFO cargo_tarpaulin::process_handling::linux: Launching test\nJan 30 21:45:38.085  INFO cargo_tarpaulin::process_handling: running /home/daniel/personal/tarpaulin/tests/data/simple_project/target/debug/deps/simple_project-417a21905eb8be09\n\nrunning 2 tests\ntest unused::blah ... ok\ntest tests::bad_test ... ok\n\ntest result: ok. 2 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0.02s\n\nJan 30 21:45:38.990  INFO cargo_tarpaulin::report: Coverage Results:\n|| Uncovered Lines:\n|| src/lib.rs: 6\n|| Tested/Total Lines:\n|| src/lib.rs: 3/4 +0.00%\n|| src/unused.rs: 3/3 +100.00%\n|| \n85.71% coverage, 6/7 lines covered, +42.86% change in coverage\n```\n\nHint: if using coveralls.io with travis-ci run with the options\n`--ciserver travis-ci --coveralls $TRAVIS_JOB_ID`. The coveralls.io repo-token\nis mainly designed for private repos and it won't generate a badge for the\ncoverage results submitted (although you can still see them on the coveralls\nweb interface). For an example of a project using Tarpaulin, you can check out\nmy crate [keygraph-rs](https://github.com/xd009642/keygraph-rs).\n\n### Ignoring code in files\n\nTarpaulin allows you to ignore modules or functions using attributes.\nBelow is an example of ignoring the main function in a project:\n\n```Rust\n#[cfg(not(tarpaulin_include))]\nfn main() {\n    println!(\"I won't be included in results\");\n}\n\n// Also supports the nightly rustc `coverage(off)` attribute.\n#[coverage(off)]\nfn not_included() {\n\n}\n```\n\nUnfortunately, due to the unexpected cfg warnings cargo now emits you will\nlikely want to add the recommended lints to your `Cargo.toml`, or utilise any\nexisting build scripts. If you're using a nightly compiler then making use of\nunstable coverage attributes may be preferable.\n\nHowever, the skip attribute only allows you to exclude code from coverage\nit doesn't change the code present in the binaries or what tests are run.\nBecause of this, `--cfg=tarpaulin` is used when building your project for\nTarpaulin allowing you to also conditionally include/exclude code from\ncompilation entirely. For example to have a test that isn't included in\nthe test binaries when built with Tarpaulin and cannot be run just do:\n\n```Rust\n#[test]\n#[cfg(not(tarpaulin))]\nfn big_test_not_for_tarpaulin() {\n    // Something that would be very slow in tarpaulin or not work\n}\n```\n\nIf you still want the test included in the binary and ignored by default\nyou can use:\n\n```Rust\n#[test]\n#[cfg_attr(tarpaulin, ignore)]\nfn ignored_by_tarpaulin() {\n\n}\n```\n\nThere is also nightly support for using tool attributes with Tarpaulin for\nskip. For example:\n\n```Rust \n#![feature(register_tool)]\n#![register_tool(tarpaulin)]\n\n#[tarpaulin::skip]\nfn main() {\n    println!(\"I won't be in coverage stats\");\n}\n```\n\n### Recompilation\n\nAs Tarpaulin changes the `RUSTFLAGS` when building tests sometimes rebuilds of\ntest binaries can't be avoided. There is also a `--clean` and `--skip-clean`\nargument, the default has been changed at times to avoid issues with incremental\ncompilation when changing `RUSTFLAGS`. If you aim to reduce the amount of\nunnecessary recompilation attempting to add the `--skip-clean` flag should be\nthe first step. After that you can either:\n\n1. Use `cargo tarpaulin --print-rust-flags` and use those flags for dev and coverage\n2. Use `--target-dir` when running Tarpaulin and have a coverage build and dev build\n\n### Continuous Integration Services\n\nTarpaulin aims to be easy to add to your CI workflow. With well-tested support\nfor Travis-CI it also supports sending CI specific meta-data to coveralls.io for\nCircle, Semaphore, Jenkins and Codeship (though only Jenkins has been tested).\n\nYou can also use Tarpaulin on Azure, check out\n[crate-ci/azure-pipelines](https://github.com/crate-ci/azure-pipelines) for an\nexample config.\n\n#### Travis-ci and Coverage Sites\n\nThe expected most common use case is launching coverage via a CI service to\nupload to a site like codecov or coveralls. Given the built-in support and\nubiquity of travis-ci it seems prudent to document the required steps here for\nnew users. To follow these steps you'll first need a travis-ci and a project setup\nfor your coverage reporting site of choice.\n\nWe recommend taking the minimal rust .travis.yml, installing the libssl-dev\ndependency Tarpaulin has and then running Tarpaulin with the version of\nrustc you require. Tarpaulin is installed in `before_cache` to allow it to be cached\nand prevent having to reinstall every Travis run. You can also replace `cargo test`\nwith a verbose run of Tarpaulin to see the test results as well as coverage output.\n\nTarpaulin is run after success as there are still some unstable features which could\ncause coverage runs to fail. If you don't rely on any of these features you can\nalternatively replace `cargo test` with a call to `cargo tarpaulin`.\n\nFor codecov.io you'll need to export `CODECOV_TOKEN` there are instructions on this in\nthe settings of your codecov project.\n\n```yml\nlanguage: rust\n# tarpaulin has only been tested on bionic and trusty other distros may have issues\ndist: bionic\naddons:\n    apt:\n        packages:\n            - libssl-dev\ncache: cargo\nrust:\n  - stable\n  - beta\n  - nightly\nmatrix:\n  allow_failures:\n    - rust: nightly\n\nbefore_script: |\n  if [[ \"$TRAVIS_RUST_VERSION\" == stable ]]; then\n    cargo install cargo-tarpaulin\n  fi\n\nscript:\n- cargo clean\n- cargo build\n- cargo test\n\nafter_success: |\n  if [[ \"$TRAVIS_RUST_VERSION\" == stable ]]; then\n    # Uncomment the following line for coveralls.io\n    # cargo tarpaulin --ciserver travis-ci --coveralls $TRAVIS_JOB_ID\n\n    # Uncomment the following two lines create and upload a report for codecov.io\n    # cargo tarpaulin --out xml\n    # bash <(curl -s https://codecov.io/bash)\n  fi\n```\n\nIf you rely on certain nightly features you may need to change the `before_script` to\n`before_cache` to force Tarpaulin to reinstall each time. However, if it can be avoided it\nwill speed up your CI runs.\n\nAlternatively, there are the prebuilt docker images or you can use\n[cargo-binstall](https://github.com/cargo-bins/cargo-binstall).\n\nThe prebuilt binary is built using github actions ubuntu:latest image, because of this it\ndoesn't work on xenial or trusty, but it works on bionic. You should still keep the rest\nof the recommended travis settings.\n\n### GitHub Actions\n\nFile `.github/workflows/coverage.yml`\nExample how to run coverage within `docker` with `seccomp` in GitHub Actions and push the result\nto <codecov.io>.\n\n```yml\nname: coverage\n\non: [push]\njobs:\n  test:\n    name: coverage\n    runs-on: ubuntu-latest\n    container:\n      image: xd009642/tarpaulin:develop-nightly\n      options: --security-opt seccomp=unconfined\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v2\n\n      - name: Generate code coverage\n        run: |\n          cargo +nightly tarpaulin --verbose --all-features --workspace --timeout 120 --out xml\n\n      - name: Upload to codecov.io\n        uses: codecov/codecov-action@v2\n        with:\n          # token: ${{secrets.CODECOV_TOKEN}} # not required for public repos\n          fail_ci_if_error: true\n```\n\n#### CircleCI\n\nTo run Tarpaulin on CircleCI you need to run Tarpaulin in docker and set the\nmachine flag to true as shown below:\n\n```yml\njobs:\n  coverage:\n    machine: true\n    steps:\n      - checkout\n      - run:\n          name: Coverage with docker\n          command: docker run --security-opt seccomp=unconfined -v \"${PWD}:/volume\" xd009642/tarpaulin\n```\n\n#### Gitlab Pipelines\n\nTo get the coverage results showing up in your Gitlab pipelines add the following regex to the `Test\ncoverage` section in the gitlab job definition in `.gitlab-ci.yml`:\n\n```yml\njob: ...\n  coverage: '/^\\d+.\\d+% coverage/'\n```\n\nGitlab can [show coverage information] in the diff of a merge request. For that, use\n\n```yml\njob: ...\n  artifacts:\n    reports:\n      coverage_report:\n        coverage_format: cobertura\n        path: cobertura.xml\n```\n\nand generate a `cobertura.xml` as described under [Pycobertura](#pycobertura).\n\n  [show coverage information]: https://docs.gitlab.com/ee/ci/testing/test_coverage_visualization.html\n\nFor installation add `cargo install cargo-tarpaulin -f` to the script section.\n\n### Docker\n\nTarpaulin has builds deployed to [docker-hub](https://hub.docker.com/r/xd009642/tarpaulin/),\nto run Tarpaulin on any system that has Docker, run this in your project directory:\n\n```text\ndocker run --security-opt seccomp=unconfined -v \"${PWD}:/volume\" xd009642/tarpaulin\n```\n\nThis builds your project inside Docker and runs Tarpaulin without any arguments. There are\nalso tags available for the latest version on the develop branch in stable or nightly. And\nversions after 0.5.6 will have the latest release built with the rust stable and nightly\ncompilers. To get the latest development version built with rustc-nightly run the following:\n\n```text\ndocker run --security-opt seccomp=unconfined -v \"${PWD}:/volume\" xd009642/tarpaulin:develop-nightly\n```\n\nNote that the build might fail if the Docker image doesn't contain any necessary\ndependencies. In that case, you can install dependencies before, like this:\n\n```text\ndocker run --security-opt seccomp=unconfined -v \"${PWD}:/volume\" xd009642/tarpaulin sh -c \"apt-get install xxx && cargo tarpaulin\"\n```\n\nAlternatively, taking the seccomp json and setting all seccomp actions\nfor the `personality` syscall to `SCMP_ACT_ALLOW` to avoid removing all\nthe seccomp policies for Docker.\n\n### Config file\n\nTarpaulin has a config file setting where multiple coverage setups can be\nencoded in a toml file. This can be provided by an argument,\nby the environment variable `CARGO_TARPAULIN_CONFIG_FILE` or if a\n`.tarpaulin.toml` or `tarpaulin.toml` is present in the same directory as\nthe projects manifest or in the root directory that will be used unless\n`--ignore-config` is passed. Below is an example file:\n\n```toml\n[feature_a_coverage]\nfeatures = \"feature_a\"\n\n[feature_a_and_b_coverage]\nfeatures = \"feature_a feature_b\"\nrelease = true\n\n[report]\ncoveralls = \"coveralls_key\"\nout = [\"Html\", \"Xml\"]\n```\n\nHere we'd create three configurations, one would run your tests with\n`feature_a` enabled, and the other with the tests built-in release and\nboth `feature_a` and `feature_b` enabled. The last configuration uses a reserved\nconfiguration name `report` and this doesn't result in a coverage run but\naffects the report output. This is a reserved feature name and any non-reporting\nbased options chosen will not affect the output of Tarpaulin.\n\nFor reference on available keys and their types refer to the CLI help text\nat the start of the readme or [`src/config/mod.rs`](https://github.com/xd009642/tarpaulin/blob/develop/src/config/mod.rs) for the concrete types\nif anything is unclear. For arguments to be passed into the test binary that\nfollow `--` in Tarpaulin use `args` in the toml file. Find an example in the projects [`tarpaulin.toml](./tarpaulin.toml) file.\n\nSetting the field `config` will not affect the run as it won't be parsed\nfor additional configuration.\n\nFor the flags `--lib`, `--examples`, `--benches`, `--tests`, `--all-targets`,\n`--doc`, `--bins` use the `run-types` entry in the config file.\n\n## Extending Tarpaulin\n\nThere are some tools available which can extend Tarpaulin functionality for\nother potential user needs.\n\n### Procedural Macros\n\nNormally, Tarpaulin can't report on code coverage within the code for a\nprocedural macro. You'll need to add a test that expands the macro at run-time\nto get those stats. The\n[`runtime-macros` crate](https://crates.io/crates/runtime-macros) was made for\nthis purpose, and its documentation describes how to use it with Tarpaulin.\n\n### Pycobertura\n\n[`pycobertura`](https://pypi.python.org/pypi/pycobertura) is a python library\nfor working with cobertura reports. It offers a report diffing tool as well as\nits own report implementations.\n\nTo generate a `cobertura.xml` simply run the following Tarpaulin command:\n\n```text\ncargo tarpaulin --out xml\n```\n\nThen install `pycobertura` with pip and execute the desired command.\n\nAs Tarpaulin doesn't allow you to change the name of the generated cobertura\nreport be mindful of this if diffing reports between multiple commits.\n\n## Roadmap\n\n* [ ] Branch coverage for tests\n* [ ] Condition coverage for tests\n* [ ] MCDC coverage reports\n* [x] LLVM coverage support\n* [ ] Support for embedded targets\n* [x] OSX support\n* [x] Windows support\n\n## License\n\nTarpaulin is currently licensed under the terms of both the MIT license and the\nApache License (Version 2.0). See LICENSE-MIT and LICENSE-APACHE for more \ndetails.\n\n"
        },
        {
          "name": "TROUBLESHOOTING.md",
          "type": "blob",
          "size": 5.5625,
          "content": "# Troubleshooting\n\nAs much as we hope everything goes smoothly, sometimes things don't quite work\nout of the box. This guide aims to help troubleshoot a wide array of potential\nissues!\n\nOn Linux the default engine is ptrace so it's always worthwhile trying\n`--engine llvm` on Linux if a project doesn't quite work and steps aren't covered\nbelow.\n\n## General Troubleshooting\n\n### Compilation Failures\n\nIf your project compiles fine outside of tarpaulin but fails when running\nvia tarpaulin the issue may be related to dead-code linking. For projects\nthat link to native libraries `-Clink-dead-code` will cause a compilation\nerror [rustc issue](https://github.com/rust-lang/rust/issues/64685). To solve\nthis there is a `--no-dead-code` argument to remove dead code linking. \n\nRemoving dead code linking will cause uncovered functions in your code to\nnot be present in the debug info meaning they may be completely missed from\ncoverage. To mitigate this `--engine llvm` should also be used.\n\n### Linker Errors Running Tests\n\nSome libraries may do things like download dependencies into the target\nfolder for testing and set the `LD_LIBRARY_PATH` causing the tests to pass\nwhen ran via `cargo test`. This will fail with tarpaulin because we use\n`cargo test --no-run` internally and then run the tests afterwards. \n\nTo solve this, ensure that you recreate an environment so that you can run your\ntests calling the test binary in the target folder directly and not just via\n`cargo test`.\n\n### Inaccurate Coverage Results\n\nTarpaulin builds up a view of the source code coverage by utilising debug\ninformation in the tests and source tree analysis to filter out lines which\ndon't meaningfully contribute to results but may appear as \"coverable\" in the\ncode.\n\nInaccurate coverage can be caused by:\n\n1. Misleading debug information\n2. Language constructs that make source location hard to reason about.\n3. Macros\n\nHere are some tips to avoid these issues:\n\nAvoid inlining - this can be a tarpaulin only configuration, but inline\nfunctions won't end up with representative debug information and may be\nshown as lines that should be covered. You could do this as so:\n\n```\n#[cfg_attr(tarpaulin, inline(never))]\n```\n\nWith highly generic code unused generics won't be represented in debug\ninformation. To avoid this impacting results tarpaulin aims to reason about\nwhich lines _should_ be in the results. As this uses some manner of heuristics,\nminimising generic use can improve results. Although, you shouldn't be shaping\nyour code to get better coverage results unless you have a regulatory reason to\ndo so (and then maybe don't consider tarpaulin without reaching out first).\n\nAvoid large amounts of macros or macros with branching behaviour in them.\nUnfortunately being overly allowing on macro coverage would make tarpaulin's\ncoverage statistics less trustworthy and the current approach is it's better\nto report too low than too high.\n\n### Doctest Coverage\n\nThis is a nightly only feature! So if you're not running in nightly that will\nbe your first issue.\n\nRetaining the doctests to gain coverage is mildly tricky, the executable\ngenerated uses the location of the doc test to generate the file name and\nisn't a clear one-to-one mapping. This means some heuristics have to be used.\n\nThere are some steps you can do to avoid clashes in generated file names.\n\n1. Avoid adding doctests in your README or other markdown included like \n`#![doc = include_str!(\"../README.md\")]` \n2. Avoid name overlap if you replace all path separators with `_` so no\nfiles like `src/bar_foo.rs` and `src/bar/foo.rs` \n\nThis would _generally_ not be a big problem, but if there are doc tests which\nshould panic then tarpaulin has to catch the exit code for the doc test and\nensure that it is not zero to make sure the test pass/fail is reported\ncorrectly and coverage continues on.\n\n### Cannot open libssl.so\n\nTarpaulin by default will attempt to use a system libssl for uploading coverage\nreports or general interfacing with the network. If you have an issue running\ntarpaulin due to an error like:\n\n```\ncargo-tarpaulin: error while loading shared libraries: libssl.so.1.1: cannot open shared object file: No such file or directory\n```\n\nIt may be solved by installing using the `vendored-openssl` feature like so:\n\n```\ncargo install --features vendored-openssl cargo-tarpaulin\n```\n\n## Ptrace Engine\n\n### Unix Signals\n\nIf your test uses unix signals tarpaulin using ptrace may steal them and cause\ntarpaulin to exit with a failure. `--forward-signals` is a useful flag here to\nmitigate some of these issues. Also if you use a lot of process spawns\n`--follow-exec` may be of use.\n\nUnfortunately, ptrace is a complicated API and signal handling further\ncomplicates it so switching to `--engine llvm` may be the best solution.\n\n### EPERM Operation not Permitted\n\nThe ptrace engine needs to use the `personality` syscall to disable ASLR. If\nthis operation is not allowed then the ptrace engine will fail.\n\nEither use `--engine llvm` or allow the syscall. In docker this would involve\nsetting the `personality` syscall to `SCMP_ACT_ALLOW` or using\n`--seccomp=unconfined`\n\n## LLVM Instrumentation\n\n### Coverage not Collecting from Applications\n\nIf a process segfaults or exits with a panic LLVM instrumentation won't write\nout the profraw files with coverage data. For tests or applications that do this\n(i.e. `should_panic` doctests) you will have to use the ptrace engine or make \nthem not panic and find an alternative testing method.\n\nAs tests need to exit 0 to pass, this typically only impacts doctests and \nspawned processes, not the actual tests themselves. For spawned processes this\nwould result in a decrease in coverage.\n"
        },
        {
          "name": "build.rs",
          "type": "blob",
          "size": 0.8916015625,
          "content": "use rustc_version::{version, version_meta, Channel};\nuse std::env;\n\nfn main() {\n    println!(\"cargo::rustc-check-cfg=cfg(ptrace_supported)\");\n    println!(\"cargo::rustc-check-cfg=cfg(tarpaulin_include)\");\n    println!(\"cargo::rustc-check-cfg=cfg(tarpaulin)\");\n    println!(\"cargo::rustc-check-cfg=cfg(nightly)\");\n\n    assert!(version().expect(\"Couldn't get compiler version\").major >= 1);\n\n    let channel = version_meta()\n        .expect(\"Couldn't get compiler metadata\")\n        .channel;\n    if channel == Channel::Nightly {\n        println!(\"cargo:rustc-cfg=nightly\");\n    }\n\n    let target_arch = env::var(\"CARGO_CFG_TARGET_ARCH\").expect(\"CARGO_CFG_TARGET_ARCH not set\");\n    let target_os = env::var(\"CARGO_CFG_TARGET_OS\").expect(\"CARGO_CFG_TARGET_OS not set\");\n    if target_os == \"linux\" && (target_arch == \"x86_64\" || target_arch == \"x86\") {\n        println!(\"cargo:rustc-cfg=ptrace_supported\");\n    }\n}\n"
        },
        {
          "name": "dependabot.yml",
          "type": "blob",
          "size": 0.294921875,
          "content": "version: 2\nupdates:\n  - package-ecosystem: github-actions\n    directory: /\n    schedule:\n      interval: weekly\n  - package-ecosystem: cargo\n    directory: /\n    schedule:\n      interval: weekly\n    versioning-strategy: lockfile-only\n    groups:\n      all-dependencies:\n        patterns:\n          - *\n"
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "tarpaulin.toml",
          "type": "blob",
          "size": 5.1337890625,
          "content": "[test_config]\n# The name of the project or the configuration.\nname = \"tarpaulin\"\n\n# Path to the project's cargo manifest.\n# The manifest path is required for Tarpaulin to find the project.\nmanifest-path = \"./Cargo.toml\"\n\n# Optional path to a custom tarpaulin.toml config file.\n# config = null\n\n# Path to the project's root directory.\n# This is optional and can be used to override the default location.\n# root = null\n\n# Flag to run tests with the ignored attribute.\n# If true, ignored tests will be included in the coverage report.\nrun-ignored = false\n\n# Ignore panic macros in code during coverage analysis.\nignore-panics = false\n\n# Force a clean step before building the project.\n# This will clean the target directory before running tests.\nforce-clean = false\n\n# Skip the clean step and proceed without cleaning the target directory.\nskip-clean = true\n\n# Enable verbose logging for user information during tests.\nverbose = true\n\n# Enable debugging information for internal issues.\ndebug = false\n\n# Enable the event logger for trace dumps.\ndump-traces = false\n\n# Count hits for coverage, useful for more detailed reporting.\ncount = true\n\n# Set the type of coverage to be run:\n# - 'line' for line coverage (default)\n# - 'branch' for branch coverage\nline-coverage = true\nbranch-coverage = false\n\n# Directory to output coverage files and reports.\noutput-dir = \"./coverage_output\"\n\n# Optional key for a coveralls service or repository.\n# coveralls = null\n\n# Specify the CI server tool for integration with coverage reports.\n# Only valid if coveralls is set.\n# ci-tool = null\n\n# Report URI to send results to a custom endpoint if provided.\n# report-uri = null\n\n# Forward unexpected signals back to the tracee (useful for tests relying on signals).\nforward-signals = false\n\n# Flag to disable linking with `-Clink-dead-code`.\nno-dead-code = false\n\n# Include all available features in the build.\nall-features = false\n\n# Exclude default features from the build.\nno-default-features = false\n\n# Build all packages in the workspace.\nworkspace = false\n\n# Timeout duration for tests to finish.\n# (in a format that human-time library can parse, e.g., \"5m\" for 5 minutes)\ntest-timeout = \"10m\"\n\n# Build in release mode for optimized builds.\nrelease = false\n\n# Do not run the tests, only build them (for faster compilation).\nno-run = false\n\n# Do not update the `Cargo.lock` file.\nlocked = false\n\n# Do not update the `Cargo.lock` or any caches.\nfrozen = false\n\n# Build for a specific target architecture or OS.\n# target = null\n\n# Directory for storing generated build artifacts.\ntarget-dir = \"./target\"\n\n# Run the tests without accessing the network (offline mode).\noffline = false\n\n# Cargo subcommand to run; options are \"Test\" or \"Build\".\ncommand = \"Test\"\n\n# Types of tests to collect coverage for. For example: [\"Lib\", \"AllTargets\", \"Benchmarks\", \"Bins\", \"Examples\", \"Doctests\", \"Tests\"]\nrun-types = [\"AllTargets\"]\n\n# List of packages to include when building the target project.\npackages = []\n\n# List of packages to exclude from testing.\nexclude = []\n\n# List of file paths to exclude from testing.\nexclude-files = []\n\n# List of file paths to include (and exclude all others) from testing.\ninclude-files = []\n\n# Additional arguments to pass to the test executables.\nargs = []\n\n# Features to include in the build, e.g., \"feature1 feature2\".\n# features = null\n\n# List of unstable cargo features to use.\nunstable-features = []\n\n# Output files to generate as part of the test execution.\ngenerate = []\n\n# List of test names to run (corresponding to `cargo --test <NAME>`).\ntest-names = []\n\n# List of binary names to run (corresponding to `cargo --bin <NAME>`).\nbin-names = []\n\n# List of example names to run (corresponding to `cargo --example <NAME>`).\nexample-names = []\n\n# List of bench names to run (corresponding to `cargo --bench <NAME>`).\nbench-names = []\n\n# Flag to allow the process to stop immediately on a test failure.\nno-fail-fast = false\n\n# Specify a custom profile to use when building.\n# profile = null\n\n# Fail if coverage is below the specified threshold (e.g., 80.0).\n# fail-under = null\n\n# Metadata generated from `cargo metadata` (this field is internal and usually empty).\n# metadata = null\n\n# Flag to avoid passing `--cfg=tarpaulin` to the Rust compiler.\navoid-cfg-tarpaulin = false\n\n# Colouring of logs in the terminal output (e.g., \"auto\", \"always\", \"never\").\ncolor = \"Auto\"\n\n# Follow traced executables down through function calls.\nfollow-exec = true\n\n# Number of jobs (threads) to use for building the tests.\n# jobs = null\n\n# Allow the test suite to use implicit test threads if needed.\nimplicit-test-threads = true\n\n# Specify the engine to use for collecting coverage (default: \"trace\").\nengine = \"Llvm\"\n\n# Additional rust flags to be passed during the build process.\n# rustflags = null\n\n# Include test functions in the coverage statistics.\ninclude-tests = true\n\n# Delay after tests to collect instrumentation files (LLVM only).\n# post-test-delay = 0\n\n# Additional objects to be included in the coverage instrumentation.\nobjects = []\n\n# Directory where profraw files are stored.\nprofraw-folder = \"./target/profraw\"\n\n# Fail immediately after a single test fails.\nfail-immediately = false\n\n# Log to stderr instead of the default output.\nstderr = false\n"
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}