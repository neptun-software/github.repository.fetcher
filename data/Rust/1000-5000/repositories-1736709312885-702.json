{
  "metadata": {
    "timestamp": 1736709312885,
    "page": 702,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjcxMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "websockets-rs/rust-websocket",
      "stars": 1561,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.4716796875,
          "content": "# Auto detect text files and perform LF normalization\n* text=auto\n\n# Custom for Visual Studio\n*.cs     diff=csharp\n*.sln    merge=union\n*.csproj merge=union\n*.vbproj merge=union\n*.fsproj merge=union\n*.dbproj merge=union\n\n# Standard to msysgit\n*.doc\t diff=astextplain\n*.DOC\t diff=astextplain\n*.docx diff=astextplain\n*.DOCX diff=astextplain\n*.dot  diff=astextplain\n*.DOT  diff=astextplain\n*.pdf  diff=astextplain\n*.PDF\t diff=astextplain\n*.rtf\t diff=astextplain\n*.RTF\t diff=astextplain\n"
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.6484375,
          "content": "/target\n/Cargo.lock\n\n# emacs\n*.#*.rs\n\n# Windows image file caches\nThumbs.db\nehthumbs.db\n\n# Folder config file\nDesktop.ini\n\n# Recycle Bin used on file shares\n$RECYCLE.BIN/\n\n# Windows Installer files\n*.cab\n*.msi\n*.msm\n*.msp\n\n# =========================\n# Operating System Files\n# =========================\n\n# OSX\n# =========================\n\n.DS_Store\n.AppleDouble\n.LSOverride\n\n# Icon must end with two \\r\nIcon\n\n\n# Thumbnails\n._*\n\n# Files that might appear on external disk\n.Spotlight-V100\n.Trashes\n\n# Directories potentially created on remote AFP share\n.AppleDB\n.AppleDesktop\nNetwork Trash Folder\nTemporary Items\n\n# Autobahn Output\nautobahn/client\nautobahn/server\n\n"
        },
        {
          "name": ".rustfmt.toml",
          "type": "blob",
          "size": 0.0166015625,
          "content": "hard_tabs = true\n"
        },
        {
          "name": ".travis.yml",
          "type": "blob",
          "size": 2.0322265625,
          "content": "language: rust\nrust: nightly-2019-11-04\n\nbefore_script:\n  - export PATH=\"$PATH:$HOME/.cargo/bin\"\n\ninstall:\n  - rustup component add rustfmt\n  - rustup component add clippy\nscript:\n  - cargo fmt -- --version\n  - cargo fmt -- --check\n  - cargo clippy --all-features --\n  - ./scripts/build-all.sh\n  - cargo test --features nightly\n  - cargo bench --features nightly\n\nafter_success:\n  - sudo apt-get install python-unittest2\n  - sudo pip install ghp-import urllib3[secure] autobahntestsuite\n  - echo \"Running Autobahn TestSuite for client\" && ./scripts/autobahn-client.sh\n  - echo \"Running Autobahn TestSuite for server\" && ./scripts/autobahn-server.sh\n  - >\n    [ $TRAVIS_BRANCH = master ] && [ $TRAVIS_PULL_REQUEST = false ] && {\n    echo \"Building docs and gh-pages\" ;\n    PROJECT_VERSION=$(cargo doc --features nightly | grep \"Documenting websocket v\" | sed 's/.*Documenting websocket v\\(.*\\) .*/\\1/') ;\n    curl -sL https://github.com/${TRAVIS_REPO_SLUG}/archive/html.tar.gz | tar xz ;\n    cd ./rust-websocket-html &&\n    find . -type f | xargs sed -i 's/<!--VERSION-->/'\"${PROJECT_VERSION}\"'/g' ;\n    mv ../target/doc ./doc ;\n    mv ../autobahn/server ./autobahn/server ;\n    mv ../autobahn/client ./autobahn/client ;\n    mv ./autobahn/server/index.json ./autobahn/server/index.temp && rm ./autobahn/server/*.json && mv ./autobahn/server/index.temp ./autobahn/server/index.json ;\n    mv ./autobahn/client/index.json ./autobahn/client/index.temp && rm ./autobahn/client/*.json && mv ./autobahn/client/index.temp ./autobahn/client/index.json ;\n    cd ../ ; }\n  - >\n    [ $TRAVIS_BRANCH = master ] && [ $TRAVIS_PULL_REQUEST = false ] && {\n    echo \"Pushing gh-pages\" ;\n    ghp-import -n ./rust-websocket-html -m \"Generated by Travis CI build ${TRAVIS_BUILD_NUMBER} for commit ${TRAVIS_COMMIT}\" &&\n    git push -fq https://${TOKEN}@github.com/${TRAVIS_REPO_SLUG}.git gh-pages ; }\n\nenv:\n  global:\n    secure: \"g79arUER26fJvQu5/e/KvPl8jgnOv+LYD64x0PEZzRY7x+Bo0F45gjDTUG40AEdeh4upxT6twnSo6y+/v8V71NY0b+lPM2q3pS4KicQaDSLfigR1ogMo5A+Iv6l3shRFJhMiDapO3OlcvI2i+U6Er7sUcqIkZaUbbohGI1/0DtE=\"\n"
        },
        {
          "name": "Cargo.toml",
          "type": "blob",
          "size": 1.6318359375,
          "content": "[package]\nname = \"websocket\"\nversion = \"0.27.0\"\nauthors = [\"cyderize <admin@cyderize.org>\", \"Michael Eden <themichaeleden@gmail.com>\"]\nedition = \"2018\"\n\ndescription = \"[deprecated] A WebSocket (RFC6455) library for Rust.\"\n\ndocumentation = \"https://docs.rs/websocket/\"\nrepository = \"https://github.com/websockets-rs/rust-websocket\"\n\nreadme = \"README.md\"\n\nkeywords = [\"websocket\", \"websockets\", \"rfc6455\", \"async\", \"tokio\"]\ncategories = [\"asynchronous\", \"network-programming\", \"web-programming\", \"web-programming::websocket\"]\n\nlicense = \"MIT\"\n\n[dependencies]\nhyper = \"^0.10.6\"\nunicase = \"1.0\"\nurl = \"1.0\"\nrand = \"0.6.1\"\nfutures = { version = \"0.1\", optional = true }\ntokio-io = { version = \"0.1\", optional = true }\ntokio-tls = { version = \"0.2.0\", optional = true }\ntokio-tcp = { version = \"0.1\", optional = true }\ntokio-codec = { version = \"0.1\", optional = true }\ntokio-reactor = { version = \"0.1\", optional = true }\nbytes = { version = \"0.4\", optional = true }\nnative-tls = { version = \"0.2.1\", optional = true }\nwebsocket-base = { path = \"websocket-base\", version=\"0.26.5\", default-features=false }\n\n[dev-dependencies]\nfutures-cpupool = \"0.1\"\n\n[dev-dependencies.tokio]\nversion = \"0.1\"\ndefault-features = false\nfeatures = [\"codec\", \"tcp\", \"rt-full\"]\n\n[features]\ndefault = [\"sync\", \"sync-ssl\", \"async\", \"async-ssl\"]\nsync = [\"websocket-base/sync\"]\nsync-ssl = [\"native-tls\", \"sync\", \"websocket-base/sync-ssl\"]\nasync = [\"bytes\", \"futures\", \"tokio-io\", \"tokio-tcp\", \"tokio-reactor\", \"tokio-codec\", \"websocket-base/async\"]\nasync-ssl = [\"native-tls\", \"tokio-tls\", \"async\", \"websocket-base/async-ssl\"]\nnightly = [\"hyper/nightly\"]\n\n[workspace]\nmembers = [\n    \"websocket-base\"\n]\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.044921875,
          "content": "Copyright (c) 2014 Rust Websockets Developers\n\nPermission is hereby granted, free of charge, to any\nperson obtaining a copy of this software and associated\ndocumentation files (the \"Software\"), to deal in the\nSoftware without restriction, including without\nlimitation the rights to use, copy, modify, merge,\npublish, distribute, sublicense, and/or sell copies of\nthe Software, and to permit persons to whom the Software\nis furnished to do so, subject to the following\nconditions:\n\nThe above copyright notice and this permission notice\nshall be included in all copies or substantial portions\nof the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF\nANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED\nTO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A\nPARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT\nSHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\nOF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR\nIN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\nDEALINGS IN THE SOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 4.4033203125,
          "content": "Rust-WebSocket [![Build Status](https://travis-ci.com/websockets-rs/rust-websocket.svg?branch=master)](https://travis-ci.com/websockets-rs/rust-websocket) [![docs.rs](https://docs.rs/websocket/badge.svg)](https://docs.rs/websocket)\n==============\n\n\n|**Note: Maintainership of this project is slugglish. You may want to use [tungstenite](https://crates.io/crates/tungstenite) or [tokio-tungstenite](https://crates.io/crates/tokio-tungstenite) instead.**|\n|----|\n\n\nRust-WebSocket is a WebSocket ([RFC6455](https://datatracker.ietf.org/doc/rfc6455/)) library written in Rust.\n\n**Note that this particular library is based on obsolete dependencies (Hyper 0.10, Tokio 0.1), so is a poor choice for new projects. You are adviced to use other Websocket libraries.**\n\nRust-WebSocket provides a framework for dealing with WebSocket connections (both clients and servers). The library is currently in an experimental state, but provides functionality for both normal and secure WebSockets, a message level API supporting fragmentation, a data frame level API, and the ability to extend and customize behaviour.\n\n## Installation\n\nTo add a library release version from [crates.io](https://crates.io/crates/websocket) to a Cargo project, add this to the 'dependencies' section of your Cargo.toml:\n\n```INI\nwebsocket = \"0.24.0\"\n```\n\nTo add the library's Git repository to a Cargo project, add this to your Cargo.toml:\n\n```INI\n[dependencies.websocket]\n\ngit = \"https://github.com/websockets-rs/rust-websocket.git\"\n```\n\nOptionally add ```extern crate websocket;``` to your project.\n\nNote that `0.24.0` is the last version of `rust-websocket` that supports some very old Rust versions (I'm not sure which exactly, maybe 1.28).\n\n## Usage\n\nThe library can be compiled with tests and benches and some extra capabilities on Rust nightly. To enable the nightly features, use `cargo --features nightly ...`.\n\nSee the documentation for the latest release of the library [here](https://docs.rs/websocket/), and also the examples, which are located in `/examples` and can be run with:\n\n```\ncargo run --example server\n```\n\nAnd in a separate terminal:\n\n```\ncargo run --example client\n```\n\n## Testing\n\nThe library can be tested using `cargo test` to run tests and `cargo bench` to run bench tests.\n\nA number of tests are included, which ensure core WebSocket functionality works as expected. These tests are not yet comprehensive, and are still being worked on.\n\n## Autobahn TestSuite\n\nRust-WebSocket uses the [Autobahn TestSuite](https://crossbar.io/autobahn/) to test conformance to RFC6455. If you have Autobahn TestSuite installed you can run these tests yourself using the commands:\n\n```\nwstest -m fuzzingserver\ncargo run --example autobahn-client\n```\n\nTo test the client implementation, and\n\n```\nwstest -m fuzzingclient\ncargo run --example autobahn-server\n```\n\nTo test the server implementation. The spec files are available [here](http://websockets-rs.github.io/rust-websocket/autobahn).\n\nThe results of these tests are available [here](http://websockets-rs.github.io/rust-websocket/autobahn).\n\n## Contributing\n\nBefore you make a PR be sure to run all the tests!\n\n```bash\n# install\nrustup component add rustfmt-preview\nrustup component add clippy-preview\n\n# test\ncargo +nightly fmt -- --check\ncargo +nightly clippy --all-features -- -D clippy::all\ncargo test --features nightly\ncargo bench --features nightly\n./scripts/build-all.sh\n```\n\n## License\n\n### The MIT License (MIT)\n\nCopyright (c) 2014-2015 Cyderize\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n"
        },
        {
          "name": "ROADMAP.md",
          "type": "blob",
          "size": 1.4658203125,
          "content": "# The Roadmap\n\n## More Docs, Examples and Tests\n\nEasy as that, every method should be tested and documented.\nEvery use-case should have an example.\n\n## Adding Features\n\n### `net2` Feature\n\nThis is a feature to add the `net2` crate which will let us do cool things\nlike set the option `SO_REUSEADDR` and similar when making TCP connections.\n\nThis is discussed in [vi/rust-websocket#2](https://github.com/vi/rust-websocket/pull/2).\n\n### Add Mio & Tokio (Evented Websocket)\n\nThere are a lot of issues that would be solved if this was evented, such as:\n\n - [#88 tokio support](https://github.com/cyderize/rust-websocket/issues/88)\n - [#66 Timeout on recv_message](https://github.com/cyderize/rust-websocket/issues/66)\n - [#6  one client, one thread?](https://github.com/cyderize/rust-websocket/issues/6)\n\nSo maybe we should _just_ add `tokio` support, or maybe `mio` is still used and popular.\n\n### Support Permessage-Deflate\n\nWe need this to pass more autobahn tests!\n\n### Buffer Reads and Writes\n\nIn the old crate the stream was split up into a reader and writer stream so you could\nhave both a `BufReader` and a `BufWriter` to buffer your operations to gain some speed.\nHowever is doesn't make sense to split the stream up anymore\n(see [#83](https://github.com/cyderize/rust-websocket/issues/83))\nmeaning that we should buffer reads and writes in some other way.\n\nSome work has begun on this, like [#91](https://github.com/cyderize/rust-websocket/pull/91),\nbut is this enough? And what about writing?\n\n"
        },
        {
          "name": "autobahn",
          "type": "tree",
          "content": null
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "scripts",
          "type": "tree",
          "content": null
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "websocket-base",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}