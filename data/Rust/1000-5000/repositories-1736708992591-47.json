{
  "metadata": {
    "timestamp": 1736708992591,
    "page": 47,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjUw",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "ggez/ggez",
      "stars": 4317,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 0.1201171875,
          "content": "root = true\n\n[*]\ncharset = utf-8\nend_of_line = lf\ninsert_final_newline = true\n\n[*.rs]\nindent_style = space\nindent_size = 4\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.3291015625,
          "content": "# Compiled files\n*.o\n*.so\n*.rlib\n*.dll\n\n# Executables\n*.exe\n\n# Generated by Cargo\ntarget/\n\n# Generated by rust-skeptic, sometimes.\nlibtest.rmeta\n\n# Remove Cargo.lock from gitignore if creating an executable, leave it for libraries\n# More information here http://doc.crates.io/guide.html#cargotoml-vs-cargolock\nCargo.lock\n\nvisual-tester/\n"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 28.1240234375,
          "content": "# 0.9.3\n\n## Fixed\n- `Image` can now be loaded from jpg/jpeg files\n- Fixed memory leak caused by resizing\n\n# 0.9.2\n\n## Fixed\n- Fixed memory leak caused by previous `Image` fix.\n- Fixed memory leak caused by `Text` rendering and creation\n\n# 0.9.1\n\n## Fixed\n- Fixed memory leak caused by drawing `Image`\n\n# 0.9.0\n\n## Added\n\nNone, just minor but breaking changes.\n\n## Changed\n\n`Image::new_blank_canvas_image` has been renamed to `Image::from_color`\n\n`InstanceArray::resize` takes a `usize` instead of a `u32`.\n\n`Canvas::set_shader`, `Canvas::set_shader_params`, and `Canvas::set_text_shader_params` now take a reference.\n\n`ShaderParams::set_uniforms` now takes self and ctx mutably.\n\n`ShaderParams::set_uniforms` and `ShaderParamsBuilder::build` now take the full context.\n\n`ShaderBuilder::new_wgsl` is now called `ShaderBuilder::new`.\n\n`ShaderBuilder::combined_code` and `ShaderBuilder::combined_path` have become associated functions called `ShaderBuilder::from_code` and `ShaderBuilder::from_path` respectively.\n\nSome `ContextBuilder` options now take paths instead of strings.\n\n## Removed\n\n`ShaderParams` no longer implements Clone, PartialEq, Eq, or ToOwned.\n\n`Image::from_solid` has been removed use `Image::from_color`\n\n## Fixed\n\nThings not rendering.\n\n# 0.8.1\n\n## Fixed\n- Fixed broken `InstanceArray::resize` and improved its documentation\n\n# 0.8.0 (wgpu)\n\nThe biggest change in this version is the long awaited redo of our graphics stack, which used to be based on `gfx-rs`\nand is now using `wgpu`. This gives us more reliability going into the future and fixes many bugs, albeit costing us\nsome portability to low-level hardware (looking at you Pi 3; EDIT: and... [Pi 4 as well?](https://github.com/ggez/ggez/issues/1093) o_o ).\n\nCredit goes out to our wonderful contributors, with special thanks to [@jazzfool](https://github.com/jazzfool)\nand [@aleokdev](https://github.com/aleokdev), for putting so much work and patience into the graphics stack.\n\nAs there are too many changes to simply list them in the usual fashion, let's look at them topic by topic:\n\n## Changes in the graphics API\n\nWith the redo of the graphics stack some parts of the API changes with it, most notably canvases and the shader API.\n\n### Canvas\n\nFirst of all, each draw call is now explicitly bound to a `Canvas`. This means instead of \"setting\" the active canvas and\nthen drawing implicitly on that canvas you now call `canvas.draw(...)` or `drawable.draw(canvas, ...)`. And then, once\nyou're done drawing on it, you call `canvas.finish(ctx)`.\nThis helps to keep track of the active canvas and gives you more explicit renderpasses to work with, as `Canvas` is now\nno longer a special image that you can draw to, but a wrapped `wgpu` renderpass, operating naturally on whatever image\nyou pass it, or on the screen buffer itself.\n\nThe downside of this is that it's a bit more verbose and that you have to pass around your canvas to be able to draw.\n\n### Shader\n\nThere's a new struct `ShaderParams`allowing you to pass images, samplers and uniforms to shaders.\nBoth `ShaderParam`s and `Shader`s are now set per `Canvas` (as well as blend modes and projection matrices).\n\n`Shader`s and `ShaderParam`s are created through `ShaderBuilder` and `ShaderParamBuilder` respectively, allowing you to\nonly set the parameters you're interested in, without worrying about the rest.\n\nUniforms are now no longer created using the `gfx!` macro. No need to include `gfx-rs` in your own project, just to be\nable to create shader uniforms. Now, simply deriving `AsStd140` is all you usually need (see the shader examples).\nAt the time of writing you're sadly also required to depend on `crevice 0.11` directly, as `AsStd140` needs to have it\nvisible globally (and re-exporting it on our side doesn't seem to be enough). If you know a way around this, let us know!\n\n### InstanceArray\n\n`SpriteBatch` and `MeshBatch` have been replaced by `InstanceArray`, a more generic \"batch\" that also features internal z-ordering.\n\n### Z-Order\n\nBefore, the order of draws had been determined solely by order of execution. Now `DrawParam` features an additional\nfield `z`, to give you control over the order in which draw calls are placed. This works on the global level, but also\ninside of `InstanceArray`, when requested.\n\n## Sub-contexts\n\nAnother field that has seen a bit of love is the modularization of contexts. Sub-contexts are now public and can be borrowed\nand handed around freely. Most module functions used to require `Context` as a whole. These have, for this reason, now been\ndeprecated and directly replaced by methods on the sub-contexts.\n\nIn situations where multiple sub-contexts are needed (one is the creation of audio sources and one the creation of images\nfrom paths) you can pass the necessary sub-contexts, or instead just pass `Context` as a whole, just like before, thanks to a little trait-workaround.\n\nThe latter applies to all situations in which you'd need one specific sub-context as well.\nIf you, for some reason, needed or wanted to split the context, then you can pass only the required sub-context.\nIf you didn't split it then you can comfortably hand around and pass the context as a whole, like before.\n\n## Added\n\n* Added touch event to `EventHandler`\n* Added access to scancodes in both keyboard events and keyboard context methods, allowing you to make your game\n portable across the different keyboard letter layouts of different countries\n* Added `Canvas::set_scissor_rect` allowing you to restrict drawing to a part of your surface\n* Added `is_key_just_pressed` and `is_key_just_released` to keyboard context\n* Added an option for transparent windows\n* Added the ability to build your own `BlendMode`s built from the components offered through wgpu's `BlendComponent` struct\n* Exposed rodio API for skipping the first part of a sample\n* Added `audio` and `gamepad` as crate features, allowing you to disable them if not necessary\n* Added the `zip-compression` feature (as part of the default features), now allowing the use of zip-files with compression\n* Added `Rect::overlaps_circle`\n* Added `Context::request_quit` as a replacement for `event::quit`\n  * `Context::request_quit` works like `event::quit` did before, except that instead of directly breaking the game loop it\n  now triggers a `quit_event`, which allows you to handle all attempts to quit the game in one place.\n* Added a re-export for `glam`, as ggez is aimed at beginners for whom it's convenient to just have it at hand directly; most people will want/need to use it anyway\n* Added `logical_size` as optional argument in `WindowMode` which overrides width/height with a `LogicalSize` which supports high DPI systems.\n\n## Changed\n\nThe following list doesn't repeat the changes already mentioned above.\n\n* Relaxed the error type of `EventHandler` from `std::error::Error` into `std::fmt::Debug`, allowing you to use\n things like `anyhow::error` as error types as well\n* Made offset on `Text` relative (I know, I know, we've been changing this around a lot lately, but I hope we're finally\n  done now), as it makes things like centering text on positions easier (see the blend modes example)\n* Also `Text` is now a first class citizen and can be drawn normally with `DrawParam`, implementing things like rotation\n that weren't possible in batched text rendering before\n* Changed how bounds on Text work as well as layouting\n  * `Text::set_bounds` now expects width and height of the bounds, but not the destination point, as that's handled through the `DrawParam`\n  * additionally to horizontal alignment vertical alignment is now possible as well\n* Improved `Text` performance through better glyph re-use\n* Changed the `Drawable` trait; this will downstream require changes in projects like `ggez-egui`\n* Version bumped `zip` to 0.6, `directories` to 4.0.1, `winit` to 0.27.3, image to `0.24` and `rodio` to 0.16\n* As each `Canvas` now keeps track of its own projection matrix the `screen_coordinates` of each `Canvas` now start out\n with the same dimensions as the `Canvas` surface\n\n## Deprecated\n\n* Most of the module level functions, which have been  replaced by sub-context methods\n\n## Removed\n\n* Removed `duration_to_f64` and `f64_to_duration` as the std library now already contains this\n functionality itself\n* Removed `From<tuple>` implementations for `DrawParam`, as they're non-transparent and weird\n* Removed `event::quit`, as it was replaced by `Context::request_quit`\n* Removed the ability to update only parts of the `DrawParams` inside a `MeshBatch` (now `InstanceArray`)\n  * If you want that ability back let us know! Atm it's staged as \"maybe in `0.8.1`\"\n\n## Fixed\nMany graphics bugs that were caused by the use of the discontinued `gfx-rs` were fixed by the switch to `wgpu`. The\nfollowing list is very probably not complete.\n\n* Multisampling on canvases is now no longer based on dirty workarounds, but on the inner workings of `wgpu`,\n supporting it naturally\n* Fixed zip `read_dir` not working deeper than one level on Windows\n* Fixed a memory leak on `set_screen_coordinates` on Windows 11\n* Fixed not being able to take screenshots of anti-aliased targets\n\n# 0.7.0\n\n## Added\n\n* Added `filesystem::zip_dir`\n* Expanded/improved documentation\n\n## Changed\n\n* Switched `DrawParam::offset` behavior back to how it was pre-ggez 0.6; more details in the [FAQ](https://github.com/ggez/ggez/blob/devel/docs/FAQ.md#offsets)\n* Moved some generic functionality from `Image` to `ImageGeneric` and from `Canvas` to `CanvasGeneric`\n* Also moved some `Canvas` specific functionality from `CanvasGeneric` to `Canvas`\n* Made `GameError` the implicit default error type for the event handler\n* Made `TextFragment` functions take `Into<T>` for better usability\n* Changed Rust edition to 2021\n* Version bumped `bytemuck` to 1.7\n* Version bumped `glam` to 0.20\n\n## Deprecated\n\nNothing\n\n## Removed\n\n* Multi-sampled canvases (which didn't work at all before) can no longer be created when using the GLES backend.\n  The reason for this is that we finally fixed them via a fragment shader workaround which isn't supported on GLES.\n\n## Fixed\n\n* Finally fixed/implemented MSAA on canvases. As `gfx` doesn't provide us with the necessary tools to do so directly,\n  the implementation is internally based upon a fragment shader workaround, which doesn't work on GLES.\n* Made sure that the bounding box of `Mesh` is actually updated when `Mesh::set_vertices` is called\n\n## Broken\n\nNothing we're aware of yet\n\n# 0.6.1\n\n## Added\n\n * Allowed `ContextBuilder` to rename resources folder and resources.zip\n * Added `winit` re-export\n * Added `get_window_position`\n * Added an example showcasing animation using keyframe\n * Added support for the TGA image file format (and possibly some others by accident as well)\n * Added methods to access sprites inside of a `SpriteBatch` directly\n\n## Changed\n\n * `MeshBatch::dimensions` now returns a rectangle containing all of its mesh instances\n   (instead of simply returning the dimensions of the underlying single mesh, as before)\n    * Drawing a `MeshBatch` with an offset != (0,0) results in such dimensions being calculated (just like in `SpriteBatch`),\n      which can be expensive, but leads to the offset being interpreted as a relative offset, instead of an absolute one\n * Changed mouse move callback a little: it now returns the difference in movement relative to the last callback,\n   not the mouse position at the end of the previous frame\n * Most of the filesystem functions now take `&Context` instead of a mutable one\n * Version bumped `old_school_gfx_glutin_ext` to 0.27\n * Version bumped `glutin` to 0.27\n * Version bumped `winit` to 0.25\n * Version bumped `glam` to 0.17.3\n\n## Deprecated\n\nNothing\n\n## Removed\n\nNothing\n\n## Fixed\n\n * fixed color transformation from linear color back to sRGB\n * internal folder structure of the resources.zip file is now resolved correctly on Windows\n * fixed `mouse::delta`: it now actually returns the difference in mouse position relative to the previous frame\n   instead of the raw mouse feedback it returned until now\n\n## Broken\n\n * bumping our dependencies on a patch release is technically a breaking change, sry for that\n\n# 0.6.0\n\n## Added\n\n * Added `MeshBatch`\n * Added a `Premultiplied` blend mode, [which greatly improves `Canvas` usability](https://github.com/ggez/ggez/issues/301#issuecomment-854603057)\n * Added a `CustomError` variant to `GameError`.\n * Added function to allow custom gamepad definitions\n * Added function to fetch raw window\n * Added function to set window position on the screen\n * Added function to get supported resolutions of the current monitor\n * Added generators for rounded rectangle meshes\n * Tried to make more error types conveniently comply with\n   `std::error::Error`\n * Added functions to fetch positions of text glyphs\n * Added `visible` to `WindowMode` to allow ggez to run without a visible window\n * Added `on_error` function to `EventHandler`, making error handling more convenient\n * Added a download buffer handle to the gfx context, to avoid possibly recreating it all the time,\n   which means things like taking multiple screenshots should work more smoothly now, as long as the target size doesn't change\n\n## Changed\n\n * `EventHandler` now takes an error type as a parameter, which allows you to use your own error types\n * `FullscreenType::True` now causes the game to be rendered exclusively on the current monitor, which also allows\n   to set different resolutions\n * Changed blend modes massively in the hope that they're either more \"correct\" or helpful now\n * Changed the way `SpriteBatch` reacts to `DrawParam`s with an offset != (0,0): It now calculates its own dimensions\n   (a rectangle containing all sprites) and interprets the offset as a fraction of that\n * Switched `rand` in the examples to `oorandom`, for basically\n   aesthetic reasons.  (Not advertising at all, honest.)\n * Version bumped `rodio` to 0.13\n * Version bumped `lyon` to 0.16\n * Version bumped `glyph_brush` to 0.7\n * Version bumped `winit` to 0.23, which brings many fixes, better\n   Wayland handling, and a slightly different style of event loop\n   with some different constraints and type names.\n * `winit` update has also changed and smoothed over some of the issues\n   with high-DPI handling.\n * Updated just about every other dependency under the sun\n * Minimum rustc version is now 1.42\n * Audio API in general changed a little for `rodio` API differences.\n\n## Deprecated\n\nNothing\n\n## Removed\n\n * removed `ggez::nalgebra` crate re-export.  All math in the public API\n   should now be `mint` types, and it is a bug if they are not.\n\n## Fixed\n\n * Fixed a mistake in the matrices created from `DrawParams` leading to them being slightly wrong when an offset was used\n   (this might fix a lot of very subtle rendering bugs)\n * ggez no longer creates empty directories (for resources and other things), unless necessary\n * Setting `DrawParam`s now results in consistent behaviour <del>everywhere</del> (ok, no, we missed `MeshBatch`,\n   which received this fix in 0.6.1), including `SpriteBatch` and `Canvas`\n * Fixed a memory leak in `screenshot` and `to_rgba8`\n * Fixed `transfrom_rect` (and added some more tests for it)\n * Too many things to count\n\n## Broken\n\nNothing (yet)\n\n\n# 0.5.1\n\n## Added\n\nNothing\n\n## Changed\n\n * version bumped `image`\n * Tiny doc cleanups and futzing around with readme\n\n\n## Deprecated\n\nNothing\n\n## Removed\n\nNothing\n\n## Fixed\n\nNothing\n\n## Broken\n\nNothing\n\n# 0.5.0\n\n## Added\n\n * Added line cap and join options\n * Added spatial sources for audio\n * Added `From` implementations for `Color` to convert from various tuples of `f32`'s.  Redundant but it annoyed me they don't exist.\n * Add OpenGL ES 3.0 support\n * Add optional textures to `Mesh`es.\n * Added lots of tests and doctests.\n * Added a `c_dependencies` feature.  It's on by default, but\n   disabling it will build ggez without unnecessary C dependencies\n   (currently `bzip2` and `minimp3`). [#549](https://github.com/ggez/ggez/issues/549)\n * Added (basic) spatial sound support.\n * Added loading of resource zip files from in-memory bytes\n\n## Changed\n\n * Updated versions of lots of dependencies.\n * Minimum rustc version is now 1.33, rust 2018 edition.\n * We now use `winit` instead of `sdl2` for window creation and events!  This removes the last major C dependency from ggez.  It also involves lots of minor changes, the full extent of which is still going to evolve.\n * `DrawParam` now uses the builder pattern instead of being a bare struct, which allows easier conversion from generics (such as `mint` types) as well as simplifying the internal math.\n * All public-facing API's that take `Point2`, `Vector2` or `Matrix4` should now take\n   `Into<mint::...>` for the appropriate type from the `mint` crate.  This should let users use\n   whatever math library they care to that supports `mint`; currently `nalgebra`, `cgmath` and\n   `euclid` are all options.\n * Moved all the `FilesystemContext` methods into top-level functions in the `filesystem` module,\n   to be consistent with the rest of the API.\n * What used to be the `text_cached` module is now the `text` module, replacing all the old text stuff with cached text drawing using the `glyph_brush` crate.  This *dramatically* changes the text API, as well as being faster and more powerful.\n * Various dimension parameters have changed to fit the underlying implementations more closely.  `Image` dimensions have changed from `u32` to `u16`, which they always were but now it's exposed to the API.  Various screen size dimensions have changed from `u32` to `f64`, which allows `winit` to do smoother scaling.\n * Similarly, `Mesh`'s now have `u32` indices. [#574](https://github.com/ggez/ggez/issues/574)\n * Various getters have been renamed from `get_<field>()` to `<field>`(). Of particular note are changes to Drawable and ShaderHandle traits.\n * Some minor modularization has taken place; at least, gamepad and audio module scan be disabled with settings in your `conf.toml`.  Doing the same for filesystem, graphics, and input is a liiiiiittle more involved.\n * `MeshBuilder` `DrawMode`'s now can take parameters, and have some shortcut functions to make default parameters.  This simplifies things somewhat by not needing separate args to specify things like a stroke width for `DrawMode::Stroke`.\n * HiDPI support removed [since it doesn't do anything useful](https://github.com/rust-windowing/winit/issues/837#issuecomment-485864175). Any problems with your window not being the size you asked for are `winit`'s problem and will be solved once they fix it. [#587](https://github.com/ggez/ggez/issues/587)\n * Moved `ggez::quit()` to `ggez::event::quit()`.  [This commit](https://github.com/ggez/ggez/commit/66f21b3d03aea482001d60d23032354d7876446b)\n * Probably tons of other things I've forgotten.\n\n## Deprecated\n\n * Nothing, it's a breaking change so things just got removed.\n\n## Removed\n\n * Apple products are no longer officially supported.  They may work fine anyway, and I'll accept PR's for them, but handlin it all myself is too large an investment of time and energy.  Sorry.  :-(  [this commit](https://github.com/ggez/ggez/commit/2f02c72cf31401a1e6ab55edc745f6227c99fb67)\n * The foreground and background colors and associated functions have beeen removed; all colors are now specified purely where they are used for drawing.\n * Removed deprecated `BoundSpriteBatch` type.\n * Removed `Context::print_resource_stats()` in favor of `filesystem::print_all()`.\n * Removed `graphics::rectangle()` and friends in favor of just\n   building and drawing the meshes explicitly.  Shortcut functions for\n   this have been added to `Mesh`. [#466](https://github.com/ggez/ggez/issues/466)\n * Removed `TTFFont` font type in favor of `GlyphBrush`. [#132](https://github.com/ggez/ggez/issues/132)\n * Removed `Context::from_conf()` for `ContextBuilder` which is strictly more powerful.  [#429](https://github.com/ggez/ggez/issues/429)\n * Removed bitmap fonts; better support deserves to exist than what ggez currently provides, and there's no reason it can't be its own crate.\n * Removed the `cargo-resource-root` feature flag; just use `filesystem::mount()` instead or add the directories to your `ContextBuilder`.\n\n## Fixed\n\n * Minor things beyond counting.  Don't worry, we added plenty of new\n   bugs too.\n\n## Broken\n\n * Does not work on Windows 7 or below, again due to `gilrs`.\n   [#588](https://github.com/ggez/ggez/issues/588)\n\n# 0.4.4\n\n## Added\n\n * Added functions to get and set mouse cursor visibility.\n * Derived `PartialEq` for `Image` and `SpriteBatch`.\n\n## Changed\n\nNothing\n\n## Deprecated\n\nNothing\n\n## Removed\n\nNothing\n\n## Fixed\n\n * Myriad small documentation and example typos.\n * Fixed a rounding error in `Font::get_width()`.\n\n# 0.4.3\n\n## Added\n\n * Added a feature flag to build nalgebra with the `mint` math library inter-operability layer [#344](https://github.com/ggez/ggez/issues/344)\n * Updated `image` to 0.19 which lets us add another feature flag selecting whether or not to use multithreaded libraries when loading images.  [#377](https://github.com/ggez/ggez/issues/377)\n * We got more awesome logos!  Thanks ozkriff and termhn! [#327](https://github.com/ggez/ggez/issues/327)\n * Added hooks to the `log` crate, so we will now output some logging data via it that clients may use.  [#311](https://github.com/ggez/ggez/pull/331)\n * There's now a functional and reasonably ergonomic [game template](https://github.com/ggez/game-template) repo that demonstrates how to use `ggez` with `specs`, `warmy`, `failure`, `log` and other useful tools.\n * Added `Font::new_px()` and `Font::from_bytes_px()` functions to create fonts that are specific pixel sizes  [#268](https://github.com/ggez/ggez/issues/268)\n * Added Ratysz's glyph cache implementation integrating the awesome `gfx_glyph` crate!  This gives us faster text drawing as well as more features; if it works out well it should replace all text rendering in another version or two.  [#132](https://github.com/ggez/ggez/issues/132)\n\n## Changed\n\n * Made it so that the configuration directories are only created on-demand, not whenever the Context is created: [#356](https://github.com/ggez/ggez/issues/356)\n * Updated rodio to 0.7, which fixes a sample rate bug on Linux: [#359](https://github.com/ggez/ggez/issues/359)\n * Documented which version of rustc we require, and added unit tests for that specific version: it is currently >=1.23.0,\n   primarily driven by features required by dependencies.\n * Moved `Context::quit()` to `ggez::quit()` 'cause all our other non-object-related functions are functions, not methods.\n\n## Deprecated\n\n## Removed\n\n## Fixed\n\n\n# 0.4.2\n\n## Added\n\n * Added a feature to enable or disable bzip2 zip file support\n * Lots of small documentation fixes and improvements thanks to lovely contributors\n * Added termhn's `ggez_snake` to the examples, 'cause it's awesome\n * Added `timer::get_remaining_update_time()` to let you easily do sub-frame timing for interpolation and such.\n * Many small improvements and cleanups\n\n## Changed\n\n * Version bumped lots of dependencies: zip, rand, rodio, rusttype\n * Switched to the `app_dirs2` crate to avoid a bug in upcoming rustc change\n\n## Deprecated\n\n## Removed\n\n## Fixed\n\n * Made `Image::from_rgba8` properly check that the array you pass it is the right size\n * Fixed more documentation bugs (https://github.com/ggez/ggez/issues/303).\n\n# 0.4.1\n\n## Added\n\n * Added `Text::into_inner()` and related methods to get ahold of a `Text` object's underlying `Image`\n * Added `SoundData::new()` and `Source::set_repeat()`/`Source::get_repeat()` (thanks jupart!)\n * Added `Context::process_event()` to smooth out a bump or two in the\n   API for writing custom event loops.  This does change the API a little, but the old style should still work.\n * Added functions for taking screenshots and saving `Image`'s (thanks DenialAdams!)\n\n## Changed\n\n * Version-bumped `lyon` crate\n\n## Deprecated\n\n * Deprecated `BoundSpriteBatch`, since you can just clone an `Image`\n   relatively cheaply.\n\n## Removed\n\n * Nothing\n\n## Fixed\n\n * Fixed bug in `mouse::get_position()`, see https://github.com/ggez/ggez/issues/283\n * Lots of small documentation fixes from a variety of awesome sharp-eyed contributors\n * Fixed bug that was making canvas's render upside-down https://github.com/ggez/ggez/issues/252\n\n# 0.4.0\n\n## Added\n\n * Added `mouse` module with some utility functions\n * Added some utility functions to query window size\n * Sprite batching implemented by termhn!\n * Added mesh builders allowing you to build complex meshes simply.\n * Integrated nalgebra to provide point and vector types.\n * Added MSAA, blend modes, other graphics toys (thanks termhn!)\n * Added graphics_settings example to show hot to play with graphics modes\n * Made the render pipeline just use matrices instead of separate transform elements\n * SHADERS!  Woo, thanks nlordell!\n * Added `Filesystem::mount()` function and made examples use it; they no longer need the `cargo-resource-root` feature\n * Added filesystem and graphics setting examples\n * Added more useful/informative constructors for `Color`\n * Added ability to select OpenGL version\n * Added some useful methods to `Rect`\n * Added a FAQ and some other documentation\n * Added a `ContextBuilder` type that allows finer control over creating a `Context`\n * Added an optional `color` value to `DrawParam`, which overrides the default foreground color.  Life would be simpler removing the foreground color entirely...\n\n## Changed\n\n * First off, there will be some switches in process: We're going to make the master branch STABLE, tracking the latest release,\n   and create a devel branch that new work will be pushed to.  That way people don't check out master and get some WIP stuff.\n * The coordinate system moved from origin-at-center, x-increasing-up to origin-at-top-left, x-increasing-down\n * Updated all dependencies to newer versions\n * Refactored EventHandler interface, again\n * Altered timestep functions to be nicer and made examples use them consistently\n * Updated to Lyon 0.8, which brings some bugfixes\n * Refactored Conf interface a little to separate \"things that can be changed at runtime\" from \"things which must be specified at init time\".\n\n## Deprecated\n\n## Removed\n\n * Removed `get_line_width()` and `set_line_width()` and made line widths parameters where necessary\n * Did the same for `get/set_point_size()`\n * Removed inaccurate `timer::sleep_until_next_frame()`, added `timer::yield_now()`.\n\n## Fixed\n\n * Fixed some bugs with type visibility and directory paths.\n * Fixed a few smallish filesystem bugs\n * Got the 3D cube example working and shuffled around the gfx-rs interface methods a little, so we could make more of the graphics innards hidden while still exposing the useful bits.\n\n# 0.3.4\n\n * Backported correction to SRGB color conversions\n * Added std::error::Error implementation for GameError\n\n# 0.3.3\n\n * Documentation and unit test updates\n * Derive some common traits on types\n\n# 0.3.2\n\n * Fixed bug in conf.toml reading and writing (thanks chinatsu)\n * Made filesystem.print_all() a little more informative\n * Added graphics::set_mode() function to allow setting window size, etc.\n * Added some functions to allow querying fullscreen modes and such\n * Made gamepad example test all input\n * Added bindings to the `mint` crate (a whole one type conversion)\n * Implemented stop() for audio\n\n# 0.3.1\n\n * Fixed bug in when CARGO_MANIFEST_DIR is checked (thanks 17cupsofcoffee)\n * Added experimental support for SDL's gamepads (thanks kampffrosch94)\n * Re-improved resource-not-found error messages (thanks 17cupsofcoffee)\n * Fixed minor bug with text rendering alpha, added more useful methods to `Text`\n * Fixed bug with text wrapping (I hope)\n * VERY EXPERIMENTAL functions for exposing the gfx-rs rendering context to a bold user\n\n# 0.3.0\n\n * Almost everything is now pure rust; the only C dependency is libsdl2.\n * Entirely new rendering engine using `gfx-rs` backed by OpenGL 3.2\n * New (if limited) 2D drawing primitives using `lyon`\n * Font rendering still uses `rusttype` but it's still cool\n * New option to enable/disable vsync\n * New sound system using `rodio`, supporting pure Rust loading of WAV, Vorbis and FLAC files\n * Configuration system now uses `serde` rather than `rustc_serialize`\n * Refactored event loop handling somewhat to make it less magical and more composable.\n * New filesystem indirection code using `app_dirs`, and `cargo-resource-root` feature flag.\n\n# 0.2.2\n\nAdded `set_color_mod` and `set_alpha_mod` functions which I'd forgotten\n\n# 0.2.1\n\nIIRC, switched from SDL_ttf to rusttype because of horrible evil API's not playing nice with\nlifetimes.\n\n# 0.2.0\n\nMade a fairly fully fleshed out SDL implementation\n\n# 0.1.0\n\nInitial proof of concept\n"
        },
        {
          "name": "CODE_OF_CONDUCT.md",
          "type": "blob",
          "size": 4.4443359375,
          "content": "# The Code of Conduct\n\n## Conduct\n\n**Contact**: Via [github issue tracker](https://github.com/ggez/ggez/issues) or email (precise contact info for current project owners should be available elsewhere in the repo)\n\n* We are committed to providing a friendly, safe and welcoming environment for all, regardless of level of experience, gender, gender identity and expression, sexual orientation, disability, personal appearance, body size, race, ethnicity, age, religion, nationality, or other similar characteristic.\n* On IRC, please avoid using overtly sexual nicknames or other nicknames that might detract from a friendly, safe and welcoming environment for all.\n* Please be kind and courteous. There's no need to be mean or rude.\n* Respect that people have differences of opinion and that every design or implementation choice carries a trade-off and numerous costs. There is seldom a right answer.\n* Please keep unstructured critique to a minimum. If you have solid ideas you want to experiment with, make a fork and see how it works.\n* We will exclude you from interaction if you insult, demean or harass anyone. That is not welcome behaviour. We interpret the term \"harassment\" as including the definition in the <a href=\"http://citizencodeofconduct.org/\">Citizen Code of Conduct</a>; if you have any lack of clarity about what might be included in that concept, please read their definition. In particular, we don't tolerate behavior that excludes people in socially marginalized groups.\n* Private harassment is also unacceptable. No matter who you are, if you feel you have been or are being harassed or made uncomfortable by a community member, please contact one of the project owners immediately. Whether you're a regular contributor or a newcomer, we care about making this community a safe place for you and we've got your back.\n* Likewise any spamming, trolling, flaming, baiting or other attention-stealing behaviour is not welcome.\n\n## Moderation\n\n\nThese are the policies for upholding our community's standards of conduct. If you feel that a thread needs moderation, please contact the project owners.\n\n1. Remarks that violate the [Rust standards of conduct](https://www.rust-lang.org/en-US/conduct.html)), including hateful, hurtful, oppressive, or exclusionary remarks, are not allowed. (Cursing is allowed, but never targeting another user, and never in a hateful manner.)\n2. Remarks that moderators find inappropriate, whether listed in the code of conduct or not, are also not allowed.\n3. Moderators will first respond to such remarks with a warning.\n4. If the warning is unheeded, the user will be \"kicked,\" i.e., kicked out of the communication channel to cool off.\n5. If the user comes back and continues to make trouble, they will be banned, i.e., indefinitely excluded.\n6. Moderators may choose at their discretion to un-ban the user if it was a first offense and they offer the offended party a genuine apology.\n7. If a moderator bans someone and you think it was unjustified, please take it up with that moderator, or with a different moderator, **in private**. Complaints about bans in-channel are not allowed.\n8. Moderators are held to a higher standard than other community members. If a moderator creates an inappropriate situation, they should expect less leeway than others.\n\nIn the Rust community in general we strive to go the extra step to look out for each other. Don't just aim to be technically unimpeachable, try to be your best self. In particular, avoid flirting with offensive or sensitive issues, particularly if they're off-topic; this all too often leads to unnecessary fights, hurt feelings, and damaged trust; worse, it can drive people away from the community entirely.\n\nAnd if someone takes issue with something you said or did, resist the urge to be defensive. Just stop doing what it was they complained about and apologize. Even if you feel you were misinterpreted or unfairly accused, chances are good there was something you could've communicated better — remember that it's your responsibility to make your fellow Rustaceans comfortable. Everyone wants to get along and we are all here first and foremost because we want to talk about cool technology. You will find that people will be eager to assume good intent and forgive as long as you earn their trust.\n\nThe enforcement policies listed above apply to all official ggez venues; which at the moment basically means the Github issue tracker.\n\n*Adapted for ggez from the [Rust Code of Conduct](https://www.rust-lang.org/en-US/conduct.html)*"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 5.5517578125,
          "content": "# Contributing to ggez\n\nHi there! We're thrilled that you'd like to contribute to this project. Your help is essential for keeping it great.\n\n## How to send in your contributions\n\nThere are many ways you can send your contributions to ggez. You can either **report a bug**, or you can make the changes yourself and **submit a pull request**!\n\n### Reporting bugs and opening issues\n\nPlease [report bugs](https://github.com/ggez/ggez/issues) and open issues generously. Don't be afraid that your idea is silly, or you're reporting a duplicate. We're happy to hear from you. Seriously.\n\n> ***Please Note:*** ggez is written by volunteers. If you encounter a problem while using it, we'll do our best to help you, but the authors cannot offer any support.\n\n### Finding things to work on\n\nKnown bugs and feature requests are all in the [issue tracker](https://github.com/ggez/ggez/issues) so that's a good place to start looking for places to help.  Bugs marked `*GOOD FIRST ISSUE*` are fairly self-contained and probably don't need lots and lots of research. Others, especially those marked `*HARD*`, will often require a bit of finesse, or larger/broader changes to the library.\n\n### Submitting a pull request\n\n* [Fork](https://github.com/ggez/ggez/fork) and clone the repository\n* Create a new branch: git checkout -b my-branch-name\n* Make your changes\n> Ideally all commits will contain no use of `unwrap()`, no compiler warnings and all tests will pass.\n> It's advised to run _latest_ [rustfmt](https://github.com/rust-lang-nursery/rustfmt) and [clippy](https://github.com/rust-lang-nursery/rust-clippy) before submitting a pull request\n* Push to your fork and [submit a pull request](https://github.com/ggez/ggez/compare) to the `devel` branch\n* Pat your self on the back and wait for your pull request to be reviewed.\n\nIf you're unfamiliar with how pull requests work, [GitHub's documentation on them](https://help.github.com/articles/using-pull-requests/) is very good.\n\nHere are a few things you can do that will increase the likelihood of your pull request being accepted:\n\n* Update the documentation as necessary, as well as making code changes.\n* Keep your change as focused as possible. If there are multiple changes you would like to make that are not dependent upon each other, consider submitting them as separate pull requests.\n* [Write a good commit message](http://tbaggery.com/2008/04/19/a-note-about-git-commit-messages.html).\n\n### Branches\n\nAll of ggez's in-progress work happens on the `devel` branch.  The `master` branch tracks the current latest release.  When we make\na major release, we merge the `devel` branch into `master`, and from then on only backwards-compatible changes get merged from\n`devel` into `master`.\n\nFor example, when we release `0.3.0`, we create a new branch for `0.2` from `master`, `devel` gets merged into `master` and the\nrelease gets made from `master`.  If we then discover and fix a bug in `devel`, we can merge the changes fixing that bug into the\n`master` branch, and make a `0.3.1` release from it.\n\n### Code and other contributions\n\nContributions to ggez (via pull request or otherwise) must be licensed under the same license as ggez\n\n### Submitting examples\n\nThe purpose of the example code is to be documentation of ggez's features.  Unfortunately, examples are also a maintenance burden, so we\ndon't want to just include every cool little program we write.  Examples that just use features that already are shown off by other examples should be\nkept to a minimum... though this doesn't mean we can't refactor several example programs into one, or vice versa, or that there has to be no\nduplication at all.\n\nIf you've written something cool and want to show it off, but it doesn't fulfill the listed guidelines, consider making it its own project\nand submitting a PR to add it to the `docs/Projects.md` file!\n\n# Maintainer's Code of Conduct\n\nMaintainers are the ones who accept or deny pull requests, make\nreleases, and generally choose long-term goals and designs.\n\nThe best thing I've ever seen for how to successfully run an open source\nproject has been the talk titled \"Making Night In The Woods Better With\nOpen Source\", at GDC 2017.  It is viewable here:\n<https://www.youtube.com/watch?v=Qsiu-zzDYww> I've tried to do what it\nsays to do, and it seems to have worked pretty well.\n\nCurrently there is no real process for how maintainers are chosen,\nbesides an existing maintainer saying \"hey, are you interested?\".  These\ncommunications should be done in public if possible, because it's a\npublic project.  Example: <https://github.com/ggez/ggez/issues/875>\nTry to be a little conservative please, it's a lot easier to add\nmaintainers than remove them.\n\nHere are rules for how to act when speaking for ggez as a maintainer.\nPeople notice this project from time to time, and it has a reputation\nfor friendliness, ease of use that is worth almost as much as any\ntechnical merit.  This tries to sum up how to maintain and carry forward\nthat reputation, so people keep doing cool stuff with the project.\nChange the rules if you need to, but try to have good reasons for it.\n\nAs a maintainer, you promise:\n\n * I will be polite, even when noobs annoy me\n * I will not bash other projects, even when they do dumb stuff\n * I will uphold the Code of Conduct fairly and justly, even when I\n   would rather hold a grudge\n * I will not abuse ggez or associated tools for personal gain, even\n   when it would be really easy\n * I will try to prefer solutions that do 90% of the work with 10% of\n   the code, even when it would be really fun to do the other 90%\n * I will keep the project about its core values: make good games,\n   easily\n"
        },
        {
          "name": "Cargo.toml",
          "type": "blob",
          "size": 2.0810546875,
          "content": "[package]\nname = \"ggez\"\ndescription = \"A lightweight game framework for making 2D games with minimum friction, inspired by Love2D.\"\nversion = \"0.9.3\"\nhomepage = \"https://ggez.rs\"\nrepository = \"https://github.com/ggez/ggez\"\ndocumentation = \"https://docs.rs/ggez\"\nkeywords = [\"ggez\", \"graphics\", \"2D\", \"game\", \"engine\"]\nauthors = [\n   \"Rafael Epplee <raffomania@gmail.com>\",\n   \"Sven-Hendrik Haase <svenstaro@gmail.com>\",\n   \"Simon Heath <icefoxen@gmail.com>\",\n]\n\nedition = \"2021\"\nlicense = \"MIT\"\nreadme = \"README.md\"\ncategories = [\"game-engines\"]\nbuild = \"build.rs\"\nexclude = [\"docs\", \"resources\", \"!LiberationMono-Regular.ttf\"]\n\n[lib]\nname = \"ggez\"\npath = \"src/lib.rs\"\n\n[features]\ndefault = [\"c_dependencies\", \"audio\", \"gamepad\"]\nzip-compression = [\"zip/bzip2\", \"zip/zstd\"]\nmp3 = [\"rodio/mp3\"]\nmultithread-image-decoding = [\"image/hdr\", \"image/jpeg_rayon\"]\nc_dependencies = [\"zip-compression\", \"mp3\"]\naudio = [\"rodio\"]\ngamepad = [\"gilrs\"]\n\n[dependencies]\nbitflags = \"2.1\"\nzip = { version = \"0.6\", default-features = false, features = [\"deflate\"] }\ndirectories = \"5.0\"\nwgpu = \"0.16\"\nglyph_brush = \"0.7\"\nwinit = { version = \"0.28.3\", features = [\"serde\"] }\nimage = { version = \"0.24\", default-features = false, features = [\n   \"gif\",\n   \"png\",\n   \"pnm\",\n   \"tga\",\n   \"tiff\",\n   \"webp\",\n   \"bmp\",\n   \"dxt\",\n   \"jpeg\"\n] }\nrodio = { version = \"0.17\", optional = true, default-features = false, features = [\n   \"flac\",\n   \"vorbis\",\n   \"wav\",\n] }\nserde = { version = \"1.0\", features = [\"derive\"] }\ntoml = \"0.5\"\nlog = \"0.4\"\nlyon = \"1.0\"\nsmart-default = \"0.7\"\nglam = { version = \"0.24\", features = [\"mint\"] }\n# Has to be the same version of mint that our math lib uses here.\nmint = \"0.5.9\"\ngilrs = { version = \"0.10\", optional = true }\napprox = \"0.5\"\nbytemuck = { version = \"1.12\", features = [\"derive\"] }\npollster = \"0.3\"\nmemoffset = \"0.8\"\ncrevice = \"0.13\"\ntyped-arena = \"2.0\"\nordered-float = \"3.3\"\n\n[dev-dependencies]\nchrono = \"0.4\"\nfern = \"0.6\"\noorandom = \"11\"\nargh = \"0.1\"\nrand = \"0.8\"\nkeyframe = \"1\"\nkeyframe_derive = \"1\"\nnum-traits = \"0.2\"\nnum-derive = \"0.3\"\n\nskeptic = \"0.13\"\ngetrandom = \"0.2\"\n\n[build-dependencies]\nskeptic = \"0.13\"\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.0546875,
          "content": "The MIT License (MIT)\n\nCopyright (c) 2016-2017 ggez-dev\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 7.185546875,
          "content": "# ggez\n\n[![ggez logo](docs/ggez-logo-maroon-full.svg)](http://ggez.rs/)\n\n## What is this?\n\n![Build status](https://github.com/ggez/ggez/workflows/CI/badge.svg)\n[![Docs Status](https://docs.rs/ggez/badge.svg)](https://docs.rs/ggez)\n[![license](https://img.shields.io/badge/license-MIT-blue.svg)](https://github.com/ggez/ggez/blob/master/LICENSE)\n[![Crates.io](https://img.shields.io/crates/v/ggez.svg)](https://crates.io/crates/ggez)\n[![Crates.io](https://img.shields.io/crates/d/ggez.svg)](https://crates.io/crates/ggez)\n[![Discord chat](https://img.shields.io/discord/1031224392174293002.svg?label=discord%20chat)](https://discord.gg/48VycPe2ZX)\n\n\nggez is a Rust library to create a Good Game Easily.\n\nThe current version is 0.9.3.\n\nMore specifically, ggez is a lightweight cross-platform game framework\nfor making 2D games with minimum friction.  It aims to implement an\nAPI based on (a Rustified version of) the [LÖVE](https://love2d.org/)\ngame framework.  This means it contains basic and portable 2D\ndrawing, sound, resource loading and event handling, but finer details\nand performance characteristics may be different than LÖVE.\n\nggez is not meant to be everything to everyone, but rather a good\nbase upon which to build.  Thus it takes a fairly\nbatteries-included approach without needing a million additions\nand plugins for everything imaginable, but also does not dictate\nhigher-level functionality such as physics engine or entity\ncomponent system.  Instead the goal is to allow you to use\nwhichever libraries you want to provide these functions, or build\nyour own libraries atop ggez.\n\n### Features\n\n* Filesystem abstraction that lets you load resources from folders or zip files\n* Hardware-accelerated 2D rendering built on the `wgpu` graphics API\n* Loading and playing .ogg, .wav and .flac files via the `rodio` crate\n* TTF font rendering with `glyph_brush`.\n* Interface for handling keyboard and mouse events easily through callbacks\n* Config file for defining engine and game settings\n* Easy timing and FPS measurement functions.\n* Math library integration with `mint`.\n* Some more advanced graphics options: shaders, instanced draws and render targets\n\n### Non-Features (i.e. things to add from elsewhere if needed)\n\n* [Physics](https://arewegameyet.rs/ecosystem/physics/)\n* Animation (check out [keyframe](https://github.com/HannesMann/keyframe); [it works pretty well with ggez](https://psteinhaus.github.io/ggez/web-examples/) ([source](https://github.com/PSteinhaus/PSteinhaus.github.io/tree/main/ggez/web-examples)))\n* [GUI](https://arewegameyet.rs/ecosystem/ui/)\n* [Assets manager](https://github.com/a1phyr/assets_manager)\n* [AI](https://arewegameyet.rs/ecosystem/ai/)\n* [ECS](https://arewegameyet.rs/ecosystem/ecs/)\n* [Networking](https://arewegameyet.rs/ecosystem/networking/)\n\n### Supported platforms\n\n * Fully supported: Windows, Linux, MacOS\n * Not officially supported but might work anyway: Android, iOS, Web\n\nFor details, see [docs/BuildingForEveryPlatform.md](docs/BuildingForEveryPlatform.md)\n\nIf you want to run ggez (up to 0.7 as of now) on Android, iOS or the web using WebAssembly right now, take a look at [good-web-game](https://github.com/ggez/good-web-game).\n\n### Who's using ggez?\n\nCheck out the [projects list!](docs/Projects.md)\n\n### Usage\n\nggez requires rustc >= 1.42 and is distributed on\ncrates.io. To include it in your project, just add the dependency\nline to your `Cargo.toml` file:\n\n```\nggez = \"0.9.3\"\n```\n\nggez consists of three main parts: A `Context` object which\ncontains all the state required to interface with the computer's\nhardware, an `EventHandler` trait that the user implements to\nregister callbacks for events, and various sub-modules such as\n`graphics` and `audio` that provide the functionality to actually\nget stuff done.  The general pattern is to create a struct holding\nyour game's data which implements the `EventHandler` trait.\nCreate a new `Context` object with default objects from a `ContextBuilder`\nor `Conf` object, and then call `event::run()` with\nthe `Context` and an instance of your `EventHandler` to run your game's\nmain loop.\n\nSee the [API docs](https://docs.rs/ggez/) for full documentation, or the [examples](/examples) directory for a number of commented examples of varying complexity.  Most examples show off\na single feature of ggez, while `astroblasto` and `snake` are small but complete games.\n\n### Getting started\n\nFor a quick tutorial on ggez, see the [Hello ggez](https://github.com/ggez/ggez/blob/master/docs/guides/HelloGgez.md) guide in the `docs/` directory.\n\n### Examples\n\nSee the `examples/` directory in the source.  Most examples show off\na single feature of ggez, while `astroblasto` is a small  but\ncomplete Asteroids-like game.\n\nTo run the examples, just check out the source and execute `cargo run --example`\nin the root directory:\n\n```\ngit clone https://github.com/ggez/ggez.git\ncd ggez\ncargo run --example 05_astroblasto\n```\n\nIf this doesn't work, see the\n[FAQ](https://github.com/ggez/ggez/blob/master/docs/FAQ.md) for solutions\nto common problems.\n\n#### Basic Project Template\n\n```rust,no_run\nuse ggez::{Context, ContextBuilder, GameResult};\nuse ggez::graphics::{self, Color};\nuse ggez::event::{self, EventHandler};\n\nfn main() {\n    // Make a Context.\n    let (mut ctx, event_loop) = ContextBuilder::new(\"my_game\", \"Cool Game Author\")\n        .build()\n        .expect(\"aieee, could not create ggez context!\");\n\n    // Create an instance of your event handler.\n    // Usually, you should provide it with the Context object to\n    // use when setting your game up.\n    let my_game = MyGame::new(&mut ctx);\n\n    // Run!\n    event::run(ctx, event_loop, my_game);\n}\n\nstruct MyGame {\n    // Your state here...\n}\n\nimpl MyGame {\n    pub fn new(_ctx: &mut Context) -> MyGame {\n        // Load/create resources such as images here.\n        MyGame {\n            // ...\n        }\n    }\n}\n\nimpl EventHandler for MyGame {\n    fn update(&mut self, _ctx: &mut Context) -> GameResult {\n        // Update code here...\n        Ok(())\n    }\n\n    fn draw(&mut self, ctx: &mut Context) -> GameResult {\n        let mut canvas = graphics::Canvas::from_frame(ctx, Color::WHITE);\n        // Draw code here...\n        canvas.finish(ctx)\n    }\n}\n```\n\n### Implementation details\n\nggez is built upon `winit` for windowing and events, `rodio` for\nsound, and a 2D drawing engine implemented with `wgpu`. It is entirely\nthread-safe (though platform constraints mean the event-handling loop\nand drawing must be done in the main thread), and portable to Windows\nand Linux.\n\nggez is pure Rust™.\n\n### Help!\n\nSources of information:\n\n * The [FAQ](https://github.com/ggez/ggez/blob/master/docs/FAQ.md) has answers to common questions and problems.\n * The [API docs](https://docs.rs/ggez/), a lot of design stuff is explained there.\n * Check out the [examples](https://github.com/ggez/ggez/tree/master/examples).\n\n If you still have problems or questions, feel free to ask!  Easiest ways are:\n\n * Open an issue on [the Github issue tracker](https://github.com/ggez/ggez/issues)\n * Say hi on [our new Discord server](https://discord.gg/48VycPe2ZX)\n * Or ask the wise people on the [unofficial Rust Discord server](http://bit.ly/rust-community), the [Rust Gamedev server](https://discord.gg/yNtPTb2) or the [good-web-game Discord server](https://discord.gg/jum3Fjek2A)\n\nLicense: MIT\n"
        },
        {
          "name": "RELEASE_PROCEDURES.md",
          "type": "blob",
          "size": 1.080078125,
          "content": "# Things that maintainers should do prior to every release!\n\n * Note that updating a dep to a breaking version (i.e., nalgebra 0.13 -> 0.14) is a BREAKING\nAPI CHANGE and should not be done on things that don't break API.  For instance, we screwed this\nup 'cause ggez 0.4.0 used nalgebra 0.13 and 0.4.1 used nalgebra 0.14... so this broke the exposed\nAPI.  (Doing this for packages that aren't publically exposed is PROBABLY okay...)\n * Fix all rustc warnings\n * Make sure all unit tests pass\n * Test all examples\n * Read all docs (ideally in rendered form)\n * Also read (and ideally test) all docs and guides inside the `docs` folder! (check that links are up to date, etc.)\n * Make sure website is updated and in-sync\n * rustfmt\n * clippy\n * Search for and remove all `expect()` and `unwrap()` calls\n * Search for and address all `TODO` and `BUGGO` comments\n * Make sure readme is updated.  Should be the same as the top-level crate docs `cargo-readme` can make life simpler for this.\n * Make sure changelog is up to date, ideally including full links to issues or commits (not just github issue numbers)\n"
        },
        {
          "name": "build.rs",
          "type": "blob",
          "size": 0.2626953125,
          "content": "use std::path::PathBuf;\n\nfn main() {\n    let mut mdbook_files = skeptic::markdown_files_of_directory(\"docs/guides/\");\n\n    let other_files: Vec<PathBuf> = vec![\"README.md\".into()];\n    mdbook_files.extend(other_files);\n    skeptic::generate_doc_tests(&mdbook_files);\n}\n"
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "resources",
          "type": "tree",
          "content": null
        },
        {
          "name": "rustfmt.toml",
          "type": "blob",
          "size": 0,
          "content": ""
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}