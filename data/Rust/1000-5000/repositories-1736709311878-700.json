{
  "metadata": {
    "timestamp": 1736709311878,
    "page": 700,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjcwMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "asomers/mockall",
      "stars": 1567,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".cirrus.yml",
          "type": "blob",
          "size": 1.3134765625,
          "content": "common: &COMMON\n  env:\n    RUSTFLAGS: -Dwarnings\n    RUSTDOCFLAGS: -Dwarnings\n  cargo_cache:\n    folder: $CARGO_HOME/registry\n    fingerprint_script: cat Cargo.lock || echo \"\"\n  build_script:\n    - cargo build $CARGO_ARGS\n  doc_script:\n    - cargo doc $CARGO_ARGS --no-deps\n\n\ntask:\n  name: MSRV\n  container:\n    image: rust:1.71.0\n  cargo_lock_script:\n    - cp Cargo.lock.msrv Cargo.lock\n  << : *COMMON\n  before_cache_script: rm -rf $CARGO_HOME/registry/index\n\ntask:\n  name: stable\n  container:\n    image: rust:latest\n  << : *COMMON\n  test_script:\n    # Mockall has unit tests in the examples, so we must pass --all-targets\n    - cargo test $CARGO_ARGS --all-targets\n  before_cache_script: rm -rf $CARGO_HOME/registry/index\n\ntask:\n  name: nightly\n  container:\n    image: rustlang/rust:nightly\n  env:\n    CARGO_ARGS: --all-features\n  << : *COMMON\n  test_script:\n    # Mockall has unit tests in the examples, so we must pass --all-targets\n    - cargo test $CARGO_ARGS --all-targets\n  lint_script:\n    - rustup component add clippy\n    - cargo clippy $CARGO_ARGS --all-targets --workspace -- -D warnings\n  reproducibility_script:\n    - env RUSTFLAGS=\"--cfg reprocheck\" cargo check $CARGO_ARGS --all-targets\n  minver_script:\n    - cargo update -Zminimal-versions\n    - cargo test $CARGO_ARGS\n  before_cache_script: rm -rf $CARGO_HOME/registry/index\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.0673828125,
          "content": "/target\n**/*.rs.bk\n**/*.orig\n**/*.rej\n**/*.diff\n**/.*.swp\nCargo.lock\n"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 23.935546875,
          "content": "# Change Log\n\nAll notable changes to this project will be documented in this file.\nThis project adheres to [Semantic Versioning](http://semver.org/).\n\n## [ Unreleased ] - ReleaseDate\n\n### Fixed\n\n- Suppress `single-use-lifetimes` lints in the generated code, for cases where\n  the orginal code wouldn't have triggered the warning.\n  ([#627](https://github.com/asomers/mockall/pull/627))\n\n## [ 0.13.1 ] - 2024-11-17\n\n### Fixed\n\n- Suppress warnings about the `#[expect]` lint, new in Rust 1.81.0, in\n  generated code.\n  ([#619](https://github.com/asomers/mockall/pull/619))\n\n- Suppress the `#[clippy::ref_option]` warning, new in Rust 1.83.0, in\n  generated code.\n  ([#618](https://github.com/asomers/mockall/pull/618))\n\n- When mocking functions with a closure argument, but not using\n  `#[concretize]`, include any additional trait bounds in the trait object\n  argument passed to `.with` and `.returning`.\n  ([#606](https://github.com/asomers/mockall/pull/606))\n\n- Fixed naming conflict when mocking multiple traits with same name but from\n  different modules.\n  ([#601](https://github.com/asomers/mockall/pull/601))\n\n## [ 0.13.0 ] - 2024-07-21\n\n### Added\n\n- Add the ability to use `#[concretize]` with methods that have an `FnMut`\n  argument.\n  ([#595](https://github.com/asomers/mockall/pull/595))\n\n- Add the ability to mock methods that use `#[auto_enum]`, from the\n  `auto_enums` crate.  But only for methods that use RPIT; Mockall can't yet\n  handle syntax like `-> Result<(), impl T>`\n  ([#590](https://github.com/asomers/mockall/pull/590))\n\n- Add the ability to mock methods that use `#[inline]` or `#[cold]`, and\n  methods or traits that use `#[must_use]`.\n  ([#555](https://github.com/asomers/mockall/pull/555))\n\n### Changed\n\n- Raised MSRV to 1.71.0 due to the `C-unwind` ABI.\n  ([#585](https://github.com/asomers/mockall/pull/585))\n\n- No longer poison a Context object's internal `Mutex` when panicing.  This\n  requires the \"nightly\" feature.\n  ([#527](https://github.com/asomers/mockall/pull/527))\n\n### Fixed\n\n- Fixed panicing within mocked `extern \"C\"` functions, for example due to\n  unsatisfied expectations, with Rust 1.81.0 or newer.\n  ([#585](https://github.com/asomers/mockall/pull/585))\n\n## [ 0.12.1 ] - 2023-12-21\n\n### Fixed\n\n- Fixed using `#[mockall::concretize]` on functions whose generic types contain\n  trait bounds, yet are still object safe.\n  ([#531](https://github.com/asomers/mockall/pull/531))\n\n- Fixed mocking methods that use raw identifiers for their names.  This was a\n  regression in 0.12.0.\n  ([#534](https://github.com/asomers/mockall/pull/534))\n\n## [ 0.12.0 ] - 2023-12-10\n\n### Added\n\n- Added `#[mockall::concretize]`, which can be used to mock some generic\n  methods that have non-`'static` generic parameters.  It works by turning the\n  generic arguments into trait objects for the expectation.\n  ([#408](https://github.com/asomers/mockall/pull/408))\n\n- When mocking functions with a non-default ABI (Like `extern \"C\"`), the mock\n  function will now use the same ABI as the original. Name mangling will also\n  be disabled, so the mock function will be callable from external code. For\n  example, from C functions.\n  ([#504](https://github.com/asomers/mockall/pull/504))\n\n### Changed\n\n- Raised predicates, which is reexported, to 3.0.0.  This may affect backwards\n  compatibility for users who make use of predicates's \"color\" feature.\n  ([#467](https://github.com/asomers/mockall/pull/467))\n\n- Raised MSRV to 1.64.0 because predicates-core and predicates-tree did.\n  ([#430](https://github.com/asomers/mockall/pull/430))\n  ([#467](https://github.com/asomers/mockall/pull/467))\n\n- Better \"No matching expectation found\" messages on stable.\n  ([#425](https://github.com/asomers/mockall/pull/425))\n\n### Fixed\n\n- Fixed mocking non-private inherent methods that have attributes with syn\n  version 2.0.9 and later.\n  ([#486](https://github.com/asomers/mockall/pull/486))\n\n- Suppress `clippy::too_many_arguments` warnings in the generated code.  This\n  is most useful when mocking static functions with exactly 7 arguments.\n  ([#487](https://github.com/asomers/mockall/pull/487))\n\n- Fixed `unused_attributes` warnings in the generated code when mocking FFI\n  functions that use `#[link_name]`.\n  ([#503](https://github.com/asomers/mockall/pull/503))\n\n- Fix a panic during Drop for static methods.  One way to trigger it is by\n  calling the method more times than is allowed by a `.times()` constraint.\n  Another way would be to explicitly panic during the `.returning` method.\n  ([#516](https://github.com/asomers/mockall/pull/516))\n\n### Removed\n\n- Removed syntax deprecated since 0.9.0: using `#[automock]` directly on an\n  `extern \"C\"` block, and using `trait Foo {}` syntax inside of `mock!`.\n  ([#476](https://github.com/asomers/mockall/pull/476))\n\n- Removed default features from `predicates` dependency. Reexports no longer\n  include `difflib`, `normalize-line-endings`, `regex` and `float-cmp` features.\n  ([#517](https://github.com/asomers/mockall/pull/517))\n\n## [ 0.11.4 ] - 2023-03-26\n\n### Fixed\n\n- Static methods' expectations will now be cleared during a panic.\n  ([#443](https://github.com/asomers/mockall/pull/443))\n\n- The `checkpoint` method now works correctly even after a panic due to too many\n  method calls.\n  ([#472](https://github.com/asomers/mockall/pull/472))\n\n- Methods with unknown size type bounds can now be mocked.\n  ([#421](https://github.com/asomers/mockall/pull/421))\n\n## [ 0.11.3 ] - 2022-10-18\n\n### Fixed\n\n- Methods with a `where Self: ...` clause will now be mocked like concrete\n  methods, not generic ones.  Among other effects, this prevents \"unused method\n  expect\" warnings from the latest nightly compiler.\n  ([#415](https://github.com/asomers/mockall/pull/415))\n\n## [ 0.11.2 ] - 2022-07-24\n\n### Fixed\n\n- Suppress \"dead code\" warnings when automocking a struct's private method.  It\n  might be used only by other public methods in the same struct.\n  ([#397](https://github.com/asomers/mockall/pull/397))\n\n- Fixed using Mockall when a function named `Ok` is in scope.  The `anyhow`\n  crate, for example, creates a function by this name.\n  ([#389](https://github.com/asomers/mockall/pull/389))\n\n## [ 0.11.1 ] - 2022-05-15\n\n### Fixed\n\n- Fixed mocking methods that use `Self` in their arguments, but not as the\n  receiver.  For example, `PartialEq::eq` has a signature like\n  `fn eq(&self, other: &Self) -> bool`\n  ([#373](https://github.com/asomers/mockall/pull/373))\n- Fixed mocking methods that return a reference to a `dyn T` trait object,\n  when that trait is not already implemented for `Box<dyn T>`.\n  ([#380](https://github.com/asomers/mockall/pull/380))\n\n## [ 0.11.0 ] - 2021-12-11\n\n### Added\n\n- `mock!` and `#[automock]` now support `unsafe` traits.\n  ([#313](https://github.com/asomers/mockall/pull/313))\n\n### Changed\n\n- Bump `predicates` to v2.0.1, see all v2 changes in\n  [predicates' changelog](https://github.com/assert-rs/predicates-rs/blob/master/CHANGELOG.md).\n  ([#325](https://github.com/asomers/mockall/pull/325))\n\n### Fixed\n\n- Fixed nondeterministic code generation in methods with multiple lifetime\n  parameters.\n  ([#333](https://github.com/asomers/mockall/pull/333))\n\n## [ 0.10.2 ] - 2021-07-12\n\n### Fixed\n\n- Fix mocking specializing methods of non-generic structs, a regression in\n  v0.10.0.\n  ([#309](https://github.com/asomers/mockall/pull/309))\n\n- Fix mocking generic methods of generic structs returning nonstatic, a\n  regression in v0.10.0.\n  ([#312](https://github.com/asomers/mockall/pull/312))\n\n\n## [ 0.10.1 ] - 2021-07-01\n\n### Fixed\n\n- Fix mocking trait methods whose return values have lifetime parameters, a\n  regression in v0.10.0.\n  ([#304](https://github.com/asomers/mockall/pull/304))\n\n## [ 0.10.0 ] - 2021-06-27\n\n### Added\n\n- `mock!` will now allow both methods and trait impls to be gated with\n  `#[cfg()]]` attributes.  The attributes will be forwarded to all generated\n  code.  This allows for example only mocking certain traits on certain OSes.\n  ([#297](https://github.com/asomers/mockall/pull/297))\n\n- automock will now automatically generate Debug implementations for traits and\n  structs.  mock! will to, if you put `#[derive(Debug)]` above the struct's\n  name.\n  ([#289](https://github.com/asomers/mockall/pull/289))\n\n- Added support for specific impls.  A specific impl is an implementation of a\n  trait on a generic struct with specified generic parameters.  For example,\n  `impl Foo for Bar<i32>` as opposed to `impl<T> Foo for Bar<T>`.  Mockall does\n  not yet support generic methods in such traits.\n  ([#274](https://github.com/asomers/mockall/pull/274))\n\n### Changed\n\n- Mockall is pickier now about how you mock a trait on a generic struct.\n  Previously you could usually omit the generics.  Now, they're required.\n  i.e.,\n  ```rust\n  mock!{\n      MyStruct<T: Bounds> {...}\n      impl Foo for MyStruct {...}\n  }\n  ```\n  should now be written as\n  ```rust\n  mock!{\n      MyStruct<T: Bounds> {...}\n      impl<T: Bounds> Foo for MyStruct<T> {...}\n  }\n  ```\n  ([#274](https://github.com/asomers/mockall/pull/274))\n\n### Fixed\n\n- Fixed setting simultaneous expectations with different generic types on\n  generic methods whose generic parameters appear in neither the arguments nor\n  the return type.\n  ([#272](https://github.com/asomers/mockall/pull/272))\n\n## [0.9.1] - 2021-02-13\n### Added\n\n- When a test fails because of a method sequence violation, the error message\n  will now show the method's arguments.  This requires the `nightly` feature,\n  and requires that the arguments implement `Debug`.\n  ([#247](https://github.com/asomers/mockall/pull/247))\n\n- When a test fails because a mock object receives an unexpected call, the\n  error message will now show the method's arguments.  This requires the\n  `nightly` feature, and requires that the arguments implement `Debug`.\n  ([#246](https://github.com/asomers/mockall/pull/246))\n\n### Changed\n### Fixed\n\n- Fixed Clippy warnings in generated code with Rustc 1.52.0.\n  ([#255](https://github.com/asomers/mockall/pull/255))\n\n- Fixed using `#[automock]` with `#[tracing::instrument]`.  The mock function\n  won't be instrumented, but at least it will compile.\n  ([#256](https://github.com/asomers/mockall/pull/256))\n\n### Removed\n\n## [0.9.0] - 2020-12-21\n### Added\n\n- Added the ability to mock methods returning `impl Future` or `impl Stream`.\n  Unlike other traits, these two aren't very useful in a `Box`.  Instead,\n  Mockall will now change the Expectation's return type to `Pin<Box<_>>`.\n  ([#229](https://github.com/asomers/mockall/pull/229))\n\n- Added the ability to mock methods returning references to trait objects.\n  ([#213](https://github.com/asomers/mockall/pull/213))\n\n- `mock!` supports a new syntax: \"impl Trait for\".  It has two benefits:\n  * It can implement a generic trait for specific generic type(s).\n  * It allows mocking a non-local trait.\n  The syntax looks like this:\n  ```rust\n    mock! {\n        Bar {}\n        impl Foo<i32> for Bar {\n            fn foo(&self, x: i32) -> i32;\n        }\n    }\n  ```\n  ([#205](https://github.com/asomers/mockall/pull/205))\n\n- `#[automock]` now works on modules even without the `nightly` feature, and no\n  longer requires `#[feature(proc_macro_hygiene)]`.\n  ([#198](https://github.com/asomers/mockall/pull/198))\n\n### Changed\n\n- `mock!` now requires visibility specifiers for inherent methods.\n  ([#207](https://github.com/asomers/mockall/pull/207))\n\n- Changed the syntax for mocking foreign functions.  Instead of using\n  `#[automock]` directly on the `extern` block, you must wrap the `extern`\n  block in a module, and `#[automock]` that module.  The old method is\n  deprecated.\n  ([#201](https://github.com/asomers/mockall/pull/201))\n\n### Fixed\n\n- Fixed mocking methods that return `Self` inside of a trait object with\n  multiple bounds.  For example: `-> impl Future<Output=Self> + Send`\n  ([3400916](https://github.com/asomers/mockall/commit/34009169cf5fe5440a452f1285c20e1fb49c768c))\n\n- Fixed setting multiple expectations on generic methods whose only generic\n  type is the return.\n  ([#238](https://github.com/asomers/mockall/pull/238))\n\n- Fixed mocking generic structs with generic methods whose only generic types\n  are lifetimes.  This is useful for mocking generic structs that implement\n  traits like `Future` and `Stream`.\n  ([#225](https://github.com/asomers/mockall/pull/225))\n  ([#226](https://github.com/asomers/mockall/pull/226))\n  ([#228](https://github.com/asomers/mockall/pull/228))\n\n### Removed\n\n- Removed `times_any` and `times_range` methods from Expectations.  They've\n  been deprecated since 0.3.0.\n  ([#197](https://github.com/asomers/mockall/pull/197))\n\n## [0.8.3] - 21 October 2020\n### Added\n### Changed\n### Fixed\n\n- Suppressed `default_trait_access` pedantic Clippy lint in generated code\n  ([#222](https://github.com/asomers/mockall/pull/222))\n\n## [0.8.2] - 12 October 2020\n### Added\n### Changed\n### Fixed\n\n- Fixed Clippy warnings for mocked methods with `Vec` or `String` arguments.\n  ([#195](https://github.com/asomers/mockall/pull/195))\n\n## [0.8.1] - 7 September 2020\n### Added\n### Changed\n### Fixed\n\n- Fixed using `<X as Y>::Z` syntax in a where clause or a return type.\n  ([#208](https://github.com/asomers/mockall/pull/208))\n\n### Removed\n\n## [0.8.0] - 29 August 2020\n### Added\n- Added support for mocking structs and traits with associated constants.\n  ([#187](https://github.com/asomers/mockall/pull/187))\n\n- Methods returning slices can now be mocked.  Their expectations take `Vec`s.\n  ([#185](https://github.com/asomers/mockall/pull/185))\n\n- Compatibility with the `#[async_trait]` macro.\n  ([#183](https://github.com/asomers/mockall/pull/183))\n\n- Better support for non-Send types:\n  * Added `return_const_st` for returning non-`Send` constants, similar to\n    `returning_st`.\n  * Added `return_once_st` for static methods.  It was already available for\n    non-static methods.\n  ([#178](https://github.com/asomers/mockall/pull/178))\n\n- Support mocking methods with arbitrary receivers like `self: Box<Self>`\n  ([#176](https://github.com/asomers/mockall/pull/176))\n\n- Support mocking methods with trait object arguments that use implicit\n  lifetimes.\n  ([#174](https://github.com/asomers/mockall/pull/174))\n\n### Changed\n- Raised the minimum supported Rust version (MSRV) to 1.42.0.\n  ([#175](https://github.com/asomers/mockall/pull/175))\n\n- Mocked modules now have the same visibility as the original module.\n  ([#169](https://github.com/asomers/mockall/pull/169))\n\n### Fixed\n- Fixed mocking modules including functions that use \"impl Trait\" or mutable\n  arguments.\n  ([#169](https://github.com/asomers/mockall/pull/169))\n\n- Fixed mocking methods whose generic types include `super::`.\n  ([#167](https://github.com/asomers/mockall/pull/167))\n\n- Fixed mocking generic methods with where clauses returning references.\n  ([#166](https://github.com/asomers/mockall/pull/166))\n\n- Fixed mocking generic methods returning mutable references.\n  ([#165](https://github.com/asomers/mockall/pull/165))\n\n- Suppressed `incomplete_features` warnings in the latest nightly.\n  ([#161](https://github.com/asomers/mockall/pull/161))\n\n### Removed\n\n## [0.7.2] - 28 July 2020\n### Added\n### Changed\n### Fixed\n\n- Fixed handling function attributes.  They already worked on methods, but not\n  foreign functions or module functions.\n  ([#129](https://github.com/asomers/mockall/pull/129))\n\n- Propagate doc comments for module functions to the generated mock functions.\n  ([#132](https://github.com/asomers/mockall/pull/132))\n\n- Fix the formatting of generated doc comments for context methods\n  ([#132](https://github.com/asomers/mockall/pull/132))\n\n- Fixed some visibility issues in the generated mocks for modules and extern\n  functions.\n  ([#133](https://github.com/asomers/mockall/pull/133))\n\n- Fixed mocking methods with complicated types including a `super::` component.\n  ([#137](https://github.com/asomers/mockall/pull/137))\n\n- Mocked generic static methods can now use `return_const`.  This capability\n  was omitted as an oversight from PR #47.\n  ([#141](https://github.com/asomers/mockall/pull/141))\n\n- Suppressed `unused unit` warnings from Clippy in the latest nightly.\n  ([#148](https://github.com/asomers/mockall/pull/148))\n\n### Removed\n\n## [0.7.1] - 3 May 2020\n### Fixed\n\n- Fixed `unused must_use` warnings in consumers' crates on the latest nightly\n  ([#124](https://github.com/asomers/mockall/pull/124))\n  ([#125](https://github.com/asomers/mockall/pull/125))\n\n## [0.7.0] - 29 March 2020\n### Added\n\n- `mock!` now allows doc comments in any position\n  ([#102](https://github.com/asomers/mockall/pull/102))\n\n- Added the ability to match non-`Send` arguments with `withf_st`\n  ([#93](https://github.com/asomers/mockall/pull/93))\n\n- Added the ability to mock non-`'static` structs (but not their constructor\n  methods)\n  ([#114](https://github.com/asomers/mockall/pull/114))\n\n### Changed\n### Fixed\n\n- Fixed the docs for `mockall_examples`\n  ([#103](https://github.com/asomers/mockall/pull/103))\n\n- Fixed the build with nightly compilers 2020-03-11 and later.  This also\n  raises the MSRV to 1.36.0.\n  ([#108](https://github.com/asomers/mockall/pull/108))\n\n- The proc macros will now build successfully in crates that set\n  `#![deny(missing_docs)]`\n  ([#107](https://github.com/asomers/mockall/pull/107))\n\n- Fixed mocking methods with an explicit receiver lifetime like `&'a self`\n  ([#112](https://github.com/asomers/mockall/pull/112))\n\n### Removed\n\n## [0.6.0] - 5 December 2019\n### Added\n\n- Added the ability to mock generic methods whose return values' lifetimes are\n  chosen by the caller.  Especially useful with `std::future::Future`\n  ([#86](https://github.com/asomers/mockall/pull/86))\n\n### Changed\n### Fixed\n\n- Fixed using `prediate::always` and `prediate::never` with `?Sized` types\n  ([#80](https://github.com/asomers/mockall/pull/80))\n\n- Fixed mocking methods when a custom `Result` type is in-scope.\n  ([#74](https://github.com/asomers/mockall/pull/74))\n\n### Removed\n\n## [0.5.2] - 2 November 2019\n### Added\n### Changed\n\n- Mock objects' checkpoint methods will no longer check static expectations.\n  This behavior is more useful where static and regular methods are both used\n  in the same test.  The old behavior was a relic from release 0.3.0 and\n  before, when static methods did not yet have Context objects of their own.\n  ([#64](https://github.com/asomers/mockall/pull/64))\n\n### Fixed\n\n- Fixed hygiene violations in some of mockall_derive's warnings.\n  ([#63](https://github.com/asomers/mockall/pull/63))\n\n### Removed\n\n## [0.5.1] - 28 September 2019\n### Added\n### Changed\n### Fixed\n\n- Fixed using super:: in the signature of a bare function\n  ([#54](https://github.com/asomers/mockall/pull/54))\n\n- Fixed automocking modules that contain use statements importing types that\n  are used in function signatures.\n  ([#53](https://github.com/asomers/mockall/pull/53))\n\n### Removed\n\n## [0.5.0] - 5 September 2019\n\n### Added\n\n- Many generic methods with lifetime parameters can now be mocked.  The\n  condition is that they may not also have generic type parameters, and their\n  return values must be `'static`.\n  ([#48](https://github.com/asomers/mockall/pull/48))\n\n- Reexport more traits from the predicates crate\n  ([09746e9](https://github.com/asomers/mockall/commit/09746e92d4a7a904b1911babbe65cc1043e237d4))\n\n### Changed\n### Fixed\n\n- `return_const` now works for static methods with no preceding `with` or\n  `withf`.\n  ([#47](https://github.com/asomers/mockall/pull/47))\n\n### Removed\n\n## [0.4.0] - 29 August 2019\n### Added\n\n- Warnings for misued expectations and context objects\n  ([#37](https://github.com/asomers/mockall/pull/37))\n\n- Methods with closure arguments and where clauses can now be mocked.\n  ([#35](https://github.com/asomers/mockall/pull/35))\n\n- Mocked static methods and free functions now use a Context object to manage\n  their expectations.  The context object will validate call counts when it\n  drops, and clean up any leftover expectations.  This makes it practical to\n  use mocked free functions from multiple test cases.  The user still will most\n  likely need to provide his own synchronization to prevent such test cases\n  from running concurrently.\n  ([#34](https://github.com/asomers/mockall/pull/34))\n\n### Changed\n\n- Better panic messages when an expectation fails its expected call count.\n  ([#33](https://github.com/asomers/mockall/pull/33))\n\n### Fixed\n\n- Fixed mocking methods that return `'static` deref types, like `&'static str`\n  ([#39](https://github.com/asomers/mockall/pull/39))\n\n- Methods returning non-`'static` references (mutable or otherwise) will now\n  return a default value if no return value is set, if the output type\n  implements `Default` and the `nightly` feature is enabled.  This more closely\n  matches existing behavior for methods returning non-reference types.\n  ([#32](https://github.com/asomers/mockall/pull/32))\n\n### Removed\n\n## [0.3.0] - 10 August 2019\n### Added\n\n- Methods with closure arguments can now be mocked.  Technically they always\n  could be, but until now it wasn't possible to call the closure argument from\n  `withf` or `returning`.  No special tricks are required by the user.\n  Similarly, methods with bare fn arguments can be mocked, too.\n  ([#15](https://github.com/asomers/mockall/pull/15))\n\n### Changed\n\n- It is no longer necessary for consuming crates to explicitly depend on\n  fragile, downcast, or predicates-tree.  Mockall now reexports them.\n  ([#29](https://github.com/asomers/mockall/pull/29))\n\n- The MSRV is now Rust 1.35.0\n  ([#15](https://github.com/asomers/mockall/pull/15))\n\n- The `times` method now accepts ranges as arguments.  `types_any` and\n  `times_range` are deprecated.\n  ([#14](https://github.com/asomers/mockall/pull/14))\n\n### Fixed\n\n- Fixed mocking methods with arguments or return values that use `Self` as an\n  associated type of some other trait.\n  ([#28](https://github.com/asomers/mockall/pull/28))\n\n- Fixed mocking structs and traits with more than one static method.\n  ([#22](https://github.com/asomers/mockall/pull/22))\n\n- Methods of generic structs and traits that reference `Self` (such as\n  constructors or comparators) can now be mocked without any hacks.\n  ([#21](https://github.com/asomers/mockall/pull/21))\n  ([#25](https://github.com/asomers/mockall/pull/25))\n\n- Specializing methods of generic structs (and traits) can now be mocked\n  without the hack of duplicating the struct's (or trait's) generic parameters.\n  ([#20](https://github.com/asomers/mockall/pull/20))\n\n- Static methods of generic structs (and traits) can now be mocked without the\n  hack of duplicating the struct's (or trait's) generic parameters.\n  ([#19](https://github.com/asomers/mockall/pull/19))\n\n### Removed\n\n## [0.2.1] - 3 August 2019\n\n### Fixed\n\n- Fixed some hygiene problems introduced in 0.2.0\n  ([db25804](https://github.com/asomers/mockall/commit/db25804255861c6a36d1e0d2d0a81926d296c79a))\n\n## [0.2.0] - 2 August 2019\n### Added\n\n- Support mocking generic specializing methods.\n  ([#13](https://github.com/asomers/mockall/issues/13))\n\n- Correctly handle where clauses on mocked methods.\n  ([#13](https://github.com/asomers/mockall/issues/13))\n\n- Allow mocking generic constructor methods\n  ([#11](https://github.com/asomers/mockall/issues/11))\n\n- Allow mocking methods that use `super` somewhere in their signatures.\n  ([#8](https://github.com/asomers/mockall/issues/8))\n\n### Changed\n### Fixed\n\n- Fixed `#[automock]` for `new` methods with arguments.\n  ([#3](https://github.com/asomers/mockall/issues/3))\n\n- Fixed the `never` method, which never actually worked.\n  ([#10](https://github.com/asomers/mockall/issues/10))\n\n- Fixed mocking generic traits or structs with generic methods\n  ([6126359](https://github.com/asomers/mockall/commit/612635978540e06de93a218d937d70016221de9a))\n\n- Fixed an issue with using associated types in generic parameter bounds\n  ([116e5a2](https://github.com/asomers/mockall/commit/116e5a293254d6ae0348f73370bbf8623521a4c2))\n\n- Fixed mocking methods with mutable arguments\n  ([8058701](https://github.com/asomers/mockall/commit/8058701f7e195636fd1759f10187fa431b7aa61c))\n\n### Removed\n\n- Removed `expectation!`, used to manually mock methods in rare circumstances.\n  Now `mock!` and `#[automock]` are the only way to use Mockall.\n  ([#12](https://github.com/asomers/mockall/pull/12))\n\n## [0.1.1] - 3 July 2019\n### Added\n### Changed\n### Fixed\n\n- Fixed some issues in the API docs.  No functional change.\n  ([ba88fd1](https://github.com/asomers/mockall/commit/ba88fd19ccd1af7f882df43d6fc36019211d2893))\n\n### Removed\n"
        },
        {
          "name": "CODEOWNERS",
          "type": "blob",
          "size": 0.0107421875,
          "content": "* @asomers\n"
        },
        {
          "name": "Cargo.lock.msrv",
          "type": "blob",
          "size": 11.6015625,
          "content": "# This file is automatically @generated by Cargo.\n# It is not intended for manual editing.\nversion = 3\n\n[[package]]\nname = \"aho-corasick\"\nversion = \"1.0.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"0c378d78423fdad8089616f827526ee33c19f2fddbd5de1629152c9593ba4783\"\ndependencies = [\n \"memchr\",\n]\n\n[[package]]\nname = \"anstyle\"\nversion = \"1.0.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"15c4c2c83f81532e5845a733998b6971faca23490340a418e9b72a3ec9de12ea\"\n\n[[package]]\nname = \"async-trait\"\nversion = \"0.1.73\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"bc00ceb34980c03614e35a3a4e218276a0a824e911d07651cd0d858a51e8c0f0\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn\",\n]\n\n[[package]]\nname = \"autocfg\"\nversion = \"1.1.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d468802bab17cbc0cc575e9b053f41e72aa36bfa6b7f55e3529ffa43161b97fa\"\n\n[[package]]\nname = \"cfg-if\"\nversion = \"1.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"baf1de4339761588bc0619e3cbc0120ee582ebb74b53b4efbf79117bd2da40fd\"\n\n[[package]]\nname = \"diff\"\nversion = \"0.1.13\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"56254986775e3233ffa9c4d7d3faaf6d36a2c09d30b20687e9f88bc8bafc16c8\"\n\n[[package]]\nname = \"difflib\"\nversion = \"0.4.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"6184e33543162437515c2e2b48714794e37845ec9851711914eec9d308f6ebe8\"\n\n[[package]]\nname = \"downcast\"\nversion = \"0.11.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1435fa1053d8b2fbbe9be7e97eca7f33d37b28409959813daefc1446a14247f1\"\n\n[[package]]\nname = \"either\"\nversion = \"1.9.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a26ae43d7bcc3b814de94796a5e736d4029efb0ee900c12e2d54c993ad1a1e07\"\n\n[[package]]\nname = \"float-cmp\"\nversion = \"0.9.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"98de4bbd547a563b716d8dfa9aad1cb19bfab00f4fa09a6a4ed21dbcf44ce9c4\"\ndependencies = [\n \"num-traits\",\n]\n\n[[package]]\nname = \"fragile\"\nversion = \"2.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"6c2141d6d6c8512188a7891b4b01590a45f6dac67afb4f255c4124dbb86d4eaa\"\n\n[[package]]\nname = \"futures\"\nversion = \"0.3.28\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"23342abe12aba583913b2e62f22225ff9c950774065e4bfb61a19cd9770fec40\"\ndependencies = [\n \"futures-channel\",\n \"futures-core\",\n \"futures-executor\",\n \"futures-io\",\n \"futures-sink\",\n \"futures-task\",\n \"futures-util\",\n]\n\n[[package]]\nname = \"futures-channel\"\nversion = \"0.3.28\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"955518d47e09b25bbebc7a18df10b81f0c766eaf4c4f1cccef2fca5f2a4fb5f2\"\ndependencies = [\n \"futures-core\",\n \"futures-sink\",\n]\n\n[[package]]\nname = \"futures-core\"\nversion = \"0.3.28\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"4bca583b7e26f571124fe5b7561d49cb2868d79116cfa0eefce955557c6fee8c\"\n\n[[package]]\nname = \"futures-executor\"\nversion = \"0.3.28\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ccecee823288125bd88b4d7f565c9e58e41858e47ab72e8ea2d64e93624386e0\"\ndependencies = [\n \"futures-core\",\n \"futures-task\",\n \"futures-util\",\n]\n\n[[package]]\nname = \"futures-io\"\nversion = \"0.3.28\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"4fff74096e71ed47f8e023204cfd0aa1289cd54ae5430a9523be060cdb849964\"\n\n[[package]]\nname = \"futures-macro\"\nversion = \"0.3.28\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"89ca545a94061b6365f2c7355b4b32bd20df3ff95f02da9329b34ccc3bd6ee72\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn\",\n]\n\n[[package]]\nname = \"futures-sink\"\nversion = \"0.3.28\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f43be4fe21a13b9781a69afa4985b0f6ee0e1afab2c6f454a8cf30e2b2237b6e\"\n\n[[package]]\nname = \"futures-task\"\nversion = \"0.3.28\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"76d3d132be6c0e6aa1534069c705a74a5997a356c0dc2f86a47765e5617c5b65\"\n\n[[package]]\nname = \"futures-util\"\nversion = \"0.3.28\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"26b01e40b772d54cf6c6d721c1d1abd0647a0106a12ecaa1c186273392a69533\"\ndependencies = [\n \"futures-channel\",\n \"futures-core\",\n \"futures-io\",\n \"futures-macro\",\n \"futures-sink\",\n \"futures-task\",\n \"memchr\",\n \"pin-project-lite\",\n \"pin-utils\",\n \"slab\",\n]\n\n[[package]]\nname = \"itertools\"\nversion = \"0.10.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b0fd2260e829bddf4cb6ea802289de2f86d6a7a690192fbe91b3f46e0f2c8473\"\ndependencies = [\n \"either\",\n]\n\n[[package]]\nname = \"itoa\"\nversion = \"1.0.9\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"af150ab688ff2122fcef229be89cb50dd66af9e01a4ff320cc137eecc9bacc38\"\n\n[[package]]\nname = \"lazy_static\"\nversion = \"1.4.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e2abad23fbc42b3700f2f279844dc832adb2b2eb069b2df918f455c4e18cc646\"\n\n[[package]]\nname = \"memchr\"\nversion = \"2.6.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8f232d6ef707e1956a43342693d2a31e72989554d58299d7a88738cc95b0d35c\"\n\n[[package]]\nname = \"mockall\"\nversion = \"0.11.2\"\ndependencies = [\n \"async-trait\",\n \"cfg-if\",\n \"downcast\",\n \"fragile\",\n \"futures\",\n \"lazy_static\",\n \"mockall_derive\",\n \"mockall_double\",\n \"predicates\",\n \"predicates-tree\",\n \"serde\",\n \"serde_derive\",\n \"serde_json\",\n \"tracing\",\n]\n\n[[package]]\nname = \"mockall_derive\"\nversion = \"0.11.2\"\ndependencies = [\n \"cfg-if\",\n \"pretty_assertions\",\n \"proc-macro2\",\n \"quote\",\n \"syn\",\n]\n\n[[package]]\nname = \"mockall_double\"\nversion = \"0.3.0\"\ndependencies = [\n \"cfg-if\",\n \"proc-macro2\",\n \"quote\",\n \"syn\",\n]\n\n[[package]]\nname = \"normalize-line-endings\"\nversion = \"0.3.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"61807f77802ff30975e01f4f071c8ba10c022052f98b3294119f3e615d13e5be\"\n\n[[package]]\nname = \"num-traits\"\nversion = \"0.2.16\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f30b0abd723be7e2ffca1272140fac1a2f084c77ec3e123c192b66af1ee9e6c2\"\ndependencies = [\n \"autocfg\",\n]\n\n[[package]]\nname = \"once_cell\"\nversion = \"1.18.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"dd8b5dd2ae5ed71462c540258bedcb51965123ad7e7ccf4b9a8cafaa4a63576d\"\n\n[[package]]\nname = \"pin-project-lite\"\nversion = \"0.2.13\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8afb450f006bf6385ca15ef45d71d2288452bc3683ce2e2cacc0d18e4be60b58\"\n\n[[package]]\nname = \"pin-utils\"\nversion = \"0.1.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8b870d8c151b6f2fb93e84a13146138f05d02ed11c7e7c54f8826aaaf7c9f184\"\n\n[[package]]\nname = \"predicates\"\nversion = \"3.0.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"09963355b9f467184c04017ced4a2ba2d75cbcb4e7462690d388233253d4b1a9\"\ndependencies = [\n \"anstyle\",\n \"difflib\",\n \"float-cmp\",\n \"itertools\",\n \"normalize-line-endings\",\n \"predicates-core\",\n \"regex\",\n]\n\n[[package]]\nname = \"predicates-core\"\nversion = \"1.0.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b794032607612e7abeb4db69adb4e33590fa6cf1149e95fd7cb00e634b92f174\"\n\n[[package]]\nname = \"predicates-tree\"\nversion = \"1.0.9\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"368ba315fb8c5052ab692e68a0eefec6ec57b23a36959c14496f0b0df2c0cecf\"\ndependencies = [\n \"predicates-core\",\n \"termtree\",\n]\n\n[[package]]\nname = \"pretty_assertions\"\nversion = \"1.4.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"af7cee1a6c8a5b9208b3cb1061f10c0cb689087b3d8ce85fb9d2dd7a29b6ba66\"\ndependencies = [\n \"diff\",\n \"yansi\",\n]\n\n[[package]]\nname = \"proc-macro2\"\nversion = \"1.0.66\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"18fb31db3f9bddb2ea821cde30a9f70117e3f119938b5ee630b7403aa6e2ead9\"\ndependencies = [\n \"unicode-ident\",\n]\n\n[[package]]\nname = \"quote\"\nversion = \"1.0.33\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"5267fca4496028628a95160fc423a33e8b2e6af8a5302579e322e4b520293cae\"\ndependencies = [\n \"proc-macro2\",\n]\n\n[[package]]\nname = \"regex\"\nversion = \"1.9.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"697061221ea1b4a94a624f67d0ae2bfe4e22b8a17b6a192afb11046542cc8c47\"\ndependencies = [\n \"aho-corasick\",\n \"memchr\",\n \"regex-automata\",\n \"regex-syntax\",\n]\n\n[[package]]\nname = \"regex-automata\"\nversion = \"0.3.8\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"c2f401f4955220693b56f8ec66ee9c78abffd8d1c4f23dc41a23839eb88f0795\"\ndependencies = [\n \"aho-corasick\",\n \"memchr\",\n \"regex-syntax\",\n]\n\n[[package]]\nname = \"regex-syntax\"\nversion = \"0.7.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"dbb5fb1acd8a1a18b3dd5be62d25485eb770e05afb408a9627d14d451bae12da\"\n\n[[package]]\nname = \"ryu\"\nversion = \"1.0.15\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1ad4cc8da4ef723ed60bced201181d83791ad433213d8c24efffda1eec85d741\"\n\n[[package]]\nname = \"serde\"\nversion = \"1.0.188\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"cf9e0fcba69a370eed61bcf2b728575f726b50b55cba78064753d708ddc7549e\"\ndependencies = [\n \"serde_derive\",\n]\n\n[[package]]\nname = \"serde_derive\"\nversion = \"1.0.188\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"4eca7ac642d82aa35b60049a6eccb4be6be75e599bd2e9adb5f875a737654af2\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn\",\n]\n\n[[package]]\nname = \"serde_json\"\nversion = \"1.0.106\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"2cc66a619ed80bf7a0f6b17dd063a84b88f6dea1813737cf469aef1d081142c2\"\ndependencies = [\n \"itoa\",\n \"ryu\",\n \"serde\",\n]\n\n[[package]]\nname = \"slab\"\nversion = \"0.4.9\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8f92a496fb766b417c996b9c5e57daf2f7ad3b0bebe1ccfca4856390e3d3bb67\"\ndependencies = [\n \"autocfg\",\n]\n\n[[package]]\nname = \"syn\"\nversion = \"2.0.32\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"239814284fd6f1a4ffe4ca893952cdd93c224b6a1571c9a9eadd670295c0c9e2\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"unicode-ident\",\n]\n\n[[package]]\nname = \"termtree\"\nversion = \"0.4.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3369f5ac52d5eb6ab48c6b4ffdc8efbcad6b89c765749064ba298f2c68a16a76\"\n\n[[package]]\nname = \"tracing\"\nversion = \"0.1.37\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8ce8c33a8d48bd45d624a6e523445fd21ec13d3653cd51f681abf67418f54eb8\"\ndependencies = [\n \"cfg-if\",\n \"pin-project-lite\",\n \"tracing-attributes\",\n \"tracing-core\",\n]\n\n[[package]]\nname = \"tracing-attributes\"\nversion = \"0.1.26\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"5f4f31f56159e98206da9efd823404b79b6ef3143b4a7ab76e67b1751b25a4ab\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn\",\n]\n\n[[package]]\nname = \"tracing-core\"\nversion = \"0.1.31\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"0955b8137a1df6f1a2e9a37d8a6656291ff0297c1a97c24e0d8425fe2312f79a\"\ndependencies = [\n \"once_cell\",\n]\n\n[[package]]\nname = \"unicode-ident\"\nversion = \"1.0.11\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"301abaae475aa91687eb82514b328ab47a211a533026cb25fc3e519b86adfc3c\"\n\n[[package]]\nname = \"yansi\"\nversion = \"0.5.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"09041cd90cf85f7f8b2df60c646f853b7f535ce68f85244eb6731cf89fa498ec\"\n"
        },
        {
          "name": "Cargo.toml",
          "type": "blob",
          "size": 0.0830078125,
          "content": "[workspace]\nmembers = [\"mockall\", \"mockall_derive\", \"mockall_double\"]\nresolver = \"2\"\n"
        },
        {
          "name": "LICENSE-APACHE",
          "type": "blob",
          "size": 10.5927734375,
          "content": "                              Apache License\n                        Version 2.0, January 2004\n                     http://www.apache.org/licenses/\n\nTERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n1. Definitions.\n\n   \"License\" shall mean the terms and conditions for use, reproduction,\n   and distribution as defined by Sections 1 through 9 of this document.\n\n   \"Licensor\" shall mean the copyright owner or entity authorized by\n   the copyright owner that is granting the License.\n\n   \"Legal Entity\" shall mean the union of the acting entity and all\n   other entities that control, are controlled by, or are under common\n   control with that entity. For the purposes of this definition,\n   \"control\" means (i) the power, direct or indirect, to cause the\n   direction or management of such entity, whether by contract or\n   otherwise, or (ii) ownership of fifty percent (50%) or more of the\n   outstanding shares, or (iii) beneficial ownership of such entity.\n\n   \"You\" (or \"Your\") shall mean an individual or Legal Entity\n   exercising permissions granted by this License.\n\n   \"Source\" form shall mean the preferred form for making modifications,\n   including but not limited to software source code, documentation\n   source, and configuration files.\n\n   \"Object\" form shall mean any form resulting from mechanical\n   transformation or translation of a Source form, including but\n   not limited to compiled object code, generated documentation,\n   and conversions to other media types.\n\n   \"Work\" shall mean the work of authorship, whether in Source or\n   Object form, made available under the License, as indicated by a\n   copyright notice that is included in or attached to the work\n   (an example is provided in the Appendix below).\n\n   \"Derivative Works\" shall mean any work, whether in Source or Object\n   form, that is based on (or derived from) the Work and for which the\n   editorial revisions, annotations, elaborations, or other modifications\n   represent, as a whole, an original work of authorship. For the purposes\n   of this License, Derivative Works shall not include works that remain\n   separable from, or merely link (or bind by name) to the interfaces of,\n   the Work and Derivative Works thereof.\n\n   \"Contribution\" shall mean any work of authorship, including\n   the original version of the Work and any modifications or additions\n   to that Work or Derivative Works thereof, that is intentionally\n   submitted to Licensor for inclusion in the Work by the copyright owner\n   or by an individual or Legal Entity authorized to submit on behalf of\n   the copyright owner. For the purposes of this definition, \"submitted\"\n   means any form of electronic, verbal, or written communication sent\n   to the Licensor or its representatives, including but not limited to\n   communication on electronic mailing lists, source code control systems,\n   and issue tracking systems that are managed by, or on behalf of, the\n   Licensor for the purpose of discussing and improving the Work, but\n   excluding communication that is conspicuously marked or otherwise\n   designated in writing by the copyright owner as \"Not a Contribution.\"\n\n   \"Contributor\" shall mean Licensor and any individual or Legal Entity\n   on behalf of whom a Contribution has been received by Licensor and\n   subsequently incorporated within the Work.\n\n2. Grant of Copyright License. Subject to the terms and conditions of\n   this License, each Contributor hereby grants to You a perpetual,\n   worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n   copyright license to reproduce, prepare Derivative Works of,\n   publicly display, publicly perform, sublicense, and distribute the\n   Work and such Derivative Works in Source or Object form.\n\n3. Grant of Patent License. Subject to the terms and conditions of\n   this License, each Contributor hereby grants to You a perpetual,\n   worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n   (except as stated in this section) patent license to make, have made,\n   use, offer to sell, sell, import, and otherwise transfer the Work,\n   where such license applies only to those patent claims licensable\n   by such Contributor that are necessarily infringed by their\n   Contribution(s) alone or by combination of their Contribution(s)\n   with the Work to which such Contribution(s) was submitted. If You\n   institute patent litigation against any entity (including a\n   cross-claim or counterclaim in a lawsuit) alleging that the Work\n   or a Contribution incorporated within the Work constitutes direct\n   or contributory patent infringement, then any patent licenses\n   granted to You under this License for that Work shall terminate\n   as of the date such litigation is filed.\n\n4. Redistribution. You may reproduce and distribute copies of the\n   Work or Derivative Works thereof in any medium, with or without\n   modifications, and in Source or Object form, provided that You\n   meet the following conditions:\n\n   (a) You must give any other recipients of the Work or\n       Derivative Works a copy of this License; and\n\n   (b) You must cause any modified files to carry prominent notices\n       stating that You changed the files; and\n\n   (c) You must retain, in the Source form of any Derivative Works\n       that You distribute, all copyright, patent, trademark, and\n       attribution notices from the Source form of the Work,\n       excluding those notices that do not pertain to any part of\n       the Derivative Works; and\n\n   (d) If the Work includes a \"NOTICE\" text file as part of its\n       distribution, then any Derivative Works that You distribute must\n       include a readable copy of the attribution notices contained\n       within such NOTICE file, excluding those notices that do not\n       pertain to any part of the Derivative Works, in at least one\n       of the following places: within a NOTICE text file distributed\n       as part of the Derivative Works; within the Source form or\n       documentation, if provided along with the Derivative Works; or,\n       within a display generated by the Derivative Works, if and\n       wherever such third-party notices normally appear. The contents\n       of the NOTICE file are for informational purposes only and\n       do not modify the License. You may add Your own attribution\n       notices within Derivative Works that You distribute, alongside\n       or as an addendum to the NOTICE text from the Work, provided\n       that such additional attribution notices cannot be construed\n       as modifying the License.\n\n   You may add Your own copyright statement to Your modifications and\n   may provide additional or different license terms and conditions\n   for use, reproduction, or distribution of Your modifications, or\n   for any such Derivative Works as a whole, provided Your use,\n   reproduction, and distribution of the Work otherwise complies with\n   the conditions stated in this License.\n\n5. Submission of Contributions. Unless You explicitly state otherwise,\n   any Contribution intentionally submitted for inclusion in the Work\n   by You to the Licensor shall be under the terms and conditions of\n   this License, without any additional terms or conditions.\n   Notwithstanding the above, nothing herein shall supersede or modify\n   the terms of any separate license agreement you may have executed\n   with Licensor regarding such Contributions.\n\n6. Trademarks. This License does not grant permission to use the trade\n   names, trademarks, service marks, or product names of the Licensor,\n   except as required for reasonable and customary use in describing the\n   origin of the Work and reproducing the content of the NOTICE file.\n\n7. Disclaimer of Warranty. Unless required by applicable law or\n   agreed to in writing, Licensor provides the Work (and each\n   Contributor provides its Contributions) on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n   implied, including, without limitation, any warranties or conditions\n   of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n   PARTICULAR PURPOSE. You are solely responsible for determining the\n   appropriateness of using or redistributing the Work and assume any\n   risks associated with Your exercise of permissions under this License.\n\n8. Limitation of Liability. In no event and under no legal theory,\n   whether in tort (including negligence), contract, or otherwise,\n   unless required by applicable law (such as deliberate and grossly\n   negligent acts) or agreed to in writing, shall any Contributor be\n   liable to You for damages, including any direct, indirect, special,\n   incidental, or consequential damages of any character arising as a\n   result of this License or out of the use or inability to use the\n   Work (including but not limited to damages for loss of goodwill,\n   work stoppage, computer failure or malfunction, or any and all\n   other commercial damages or losses), even if such Contributor\n   has been advised of the possibility of such damages.\n\n9. Accepting Warranty or Additional Liability. While redistributing\n   the Work or Derivative Works thereof, You may choose to offer,\n   and charge a fee for, acceptance of support, warranty, indemnity,\n   or other liability obligations and/or rights consistent with this\n   License. However, in accepting such obligations, You may act only\n   on Your own behalf and on Your sole responsibility, not on behalf\n   of any other Contributor, and only if You agree to indemnify,\n   defend, and hold each Contributor harmless for any liability\n   incurred by, or claims asserted against, such Contributor by reason\n   of your accepting any such warranty or additional liability.\n\nEND OF TERMS AND CONDITIONS\n\nAPPENDIX: How to apply the Apache License to your work.\n\n   To apply the Apache License to your work, attach the following\n   boilerplate notice, with the fields enclosed by brackets \"[]\"\n   replaced with your own identifying information. (Don't include\n   the brackets!)  The text should be enclosed in the appropriate\n   comment syntax for the file format. We also recommend that a\n   file or class name and description of purpose be included on the\n   same \"printed page\" as the copyright notice for easier\n   identification within third-party archives.\n\nCopyright [yyyy] [name of copyright owner]\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n\thttp://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n"
        },
        {
          "name": "LICENSE-MIT",
          "type": "blob",
          "size": 1.0302734375,
          "content": "Copyright (c) 2019 Alan Somers\n\nPermission is hereby granted, free of charge, to any\nperson obtaining a copy of this software and associated\ndocumentation files (the \"Software\"), to deal in the\nSoftware without restriction, including without\nlimitation the rights to use, copy, modify, merge,\npublish, distribute, sublicense, and/or sell copies of\nthe Software, and to permit persons to whom the Software\nis furnished to do so, subject to the following\nconditions:\n\nThe above copyright notice and this permission notice\nshall be included in all copies or substantial portions\nof the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF\nANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED\nTO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A\nPARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT\nSHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\nOF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR\nIN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\nDEALINGS IN THE SOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 2.76171875,
          "content": "# Mockall\n\nA powerful mock object library for Rust.\n\n[![Build Status](https://api.cirrus-ci.com/github/asomers/mockall.svg)](https://cirrus-ci.com/github/asomers/mockall)\n[![Crates.io](https://img.shields.io/crates/v/mockall.svg)](https://crates.io/crates/mockall)\n[![Documentation](https://docs.rs/mockall/badge.svg)](https://docs.rs/mockall)\n\n## Overview\n\nMock objects are a powerful technique for unit testing software.  A mock object\nis an object with the same interface as a real object, but whose responses are\nall manually controlled by test code.  They can be used to test the upper and\nmiddle layers of an application without instantiating the lower ones, or to\ninject edge and error cases that would be difficult or impossible to create\nwhen using the full stack.\n\nStatically typed languages are inherently more difficult to\nmock than dynamically typed languages. Since Rust is a statically typed language, \nprevious attempts at creating a mock object library have had mixed results. Mockall \nincorporates the best elements of previous designs, resulting in it having a rich \nfeature set with a terse and ergonomic interface. Mockall is written in 100% *safe* \nand *stable* Rust.\n\n## Usage\n\nTypically mockall is only used by unit tests.  To use it this way, add this to\nyour `Cargo.toml`:\n\n```toml\n[dev-dependencies]\nmockall = \"0.13.1\"\n```\n\nThen use it like this:\n\n```rust\n#[cfg(test)]\nuse mockall::{automock, mock, predicate::*};\n#[cfg_attr(test, automock)]\ntrait MyTrait {\n    fn foo(&self, x: u32) -> u32;\n}\n\n#[cfg(test)]\nmod tests {\n    use super::*;\n\n    #[test]\n    fn mytest() {\n        let mut mock = MockMyTrait::new();\n        mock.expect_foo()\n            .with(eq(4))\n            .times(1)\n            .returning(|x| x + 1);\n        assert_eq!(5, mock.foo(4));\n    }\n}\n```\n\nSee the [API docs](https://docs.rs/mockall) for more information.\n\n# Minimum Supported Rust Version (MSRV)\n\nMockall is supported on Rust 1.71.0 and higher.  Mockall's MSRV will not be\nchanged in the future without bumping the major or minor version.\n\n# License\n\n`mockall` is primarily distributed under the terms of both the MIT license\nand the Apache License (Version 2.0).\n\nSee LICENSE-APACHE, and LICENSE-MIT for details\n\n# Acknowledgements\n\nMockall was not built in a day.  JMock was probably the first popular mock\nobject library.  Many ports and imitations have been made, including GoogleMock\nfor C++.  Mockers, inspired by GoogleMock, was the first attempt to bring the\nconcept to Rust.  The now-defunct Mock_derive was the first library to generate\nmock objects with procedural macros, greatly reducing the user's workload.\nMockall also uses proc macros, and copies many of Mockers' features and\nconventions.  Mockall also takes inspiration from Simulacrum's internal design,\nand its technique for mocking generic methods.\n"
        },
        {
          "name": "clippy.toml",
          "type": "blob",
          "size": 0.203125,
          "content": "# I use a lot of dumb names in the tests\ndisallowed-names = []\n\n# Default is 7.  Lock it there, so a change to the default value doesn't break\n# the automock_seven_args test.\ntoo-many-arguments-threshold = 7\n"
        },
        {
          "name": "mockall",
          "type": "tree",
          "content": null
        },
        {
          "name": "mockall_derive",
          "type": "tree",
          "content": null
        },
        {
          "name": "mockall_double",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}