{
  "metadata": {
    "timestamp": 1736709192776,
    "page": 448,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjQ1MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "rust-windowing/glutin",
      "stars": 2014,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.4716796875,
          "content": "# Auto detect text files and perform LF normalization\n* text=auto\n\n# Custom for Visual Studio\n*.cs     diff=csharp\n*.sln    merge=union\n*.csproj merge=union\n*.vbproj merge=union\n*.fsproj merge=union\n*.dbproj merge=union\n\n# Standard to msysgit\n*.doc\t diff=astextplain\n*.DOC\t diff=astextplain\n*.docx diff=astextplain\n*.DOCX diff=astextplain\n*.dot  diff=astextplain\n*.DOT  diff=astextplain\n*.pdf  diff=astextplain\n*.PDF\t diff=astextplain\n*.rtf\t diff=astextplain\n*.RTF\t diff=astextplain\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.03515625,
          "content": "Cargo.lock\ntarget/\n.DS_Store\n*~\n#*#\n"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 17.791015625,
          "content": "# Unreleased\n\n- **Breaking:** Added `make_current_surfaceless(self)` for `{Possibly,Not}CurrentGlContext`.\n\n# Version 0.32.2\n\n- Added `PossiblyCurrentContext::make_not_current_in_place(&self)` for when `Send` capability of `NotCurrentContext` is not required.\n- Added `NotCurrentContext::make_current_surfaceless(self)` and\n  `PossiblyCurrentContext::make_current_surfaceless(&self)` in the `Cgl`\n  implementation to allow the use of surfaceless contexts on MacOS.\n- Added `NotCurrentContext::make_current_surfaceless(self)` and\n  `PossiblyCurrentContext::make_current_surfaceless(&self)` in the `Glx`\n  implementation to allow the use of surfaceless contexts with GLX.\n- Added `NotCurrentContext::make_current_surfaceless(self)` and\n  `PossiblyCurrentContext::make_current_surfaceless(&self)` in the `Wgl`\n  implementation to allow the use of surfaceless contexts with WGL.\n- Added workaround for EGL drivers reporting `EGL_KHR_platform_gbm` without EGL 1.5 client.\n- Added `GlContext::priority`/`ContextAttributesBuilder::with_priority` to get/set context priority.\n\n# Version 0.32.1\n\n- Fixed EGL's `Device::query_devices()` being too strict about required extensions.\n- Fixed crash in `EglGetProcAddress` on Win32-x86 platform due to wrong calling convention.\n- Fixed EGL's `Display::device()` always returning an error due to invalid pointer-argument passing inside.\n- Fixed EGL's `Display::new()` making an `EGLDisplay::Khr` when the EGL version for the display is 1.4 or lower.\n- Added `Device::drm_device_node_path()` and `Device::drm_render_device_node_path()` getters to EGL via `EGL_EXT_device_drm`.\n- Added support for `DrmDisplayHandle` in EGL's `Display::with_device()` using `EGL_DRM_MASTER_FD_EXT` from `EGL_EXT_device_drm`.\n- Properly set up OpenGL-specific stuff on the `NSView`, instead of relying on Winit to do it.\n- Added `OpenHarmony` platform support with EGL.\n- Added support for `Display::create_pbuffer_surface()` in WGL via `WGL_ARB_pbuffer`.\n\n# Version 0.32.0\n\n- **Breaking:** updated `raw-window-handle` dependency to `0.6`.\n- Bump MSRV from `1.65` to `1.70`.\n- Bump `windows-sys` from `0.48.0` to `0.52.0`.\n- Expose `Egl` and `Glx` raw API functions on `Egl` and `Glx` displays.\n- Add `GLUTIN_WGL_OPENGL_DLL` environment variable to change OpenGL provider name with WGL.\n\n# Version 0.31.3\n\n- Change `Surface` to be `Send`. This makes it consistent with the context, so now they are both `Send` but not `Sync`.\n\n# Version 0.31.2\n\n- Fixed EGL not setting context version with EGL versions before 1.5 and missing context ext.\n\n# Version 0.31.1\n\n- Fixed `CGLContextObj` having an invalid encoding on newer macOS versions.\n\n# Version 0.31.0\n\n- Bump MSRV from `1.60` to `1.65`.\n- **Breaking:** `bitflags` which is used as a part of public API was updated to `2.0`.\n- **Breaking:** `.*SurfaceAccessor` traits got removed; their methods now on respective `.*GlContext` traits instead.\n- **Breaking:** `GlContext` trait is now a part of the `prelude`.\n- Automatically cleanup the `EGLDisplay` when `EGL_KHR_display_reference` is present.\n- Add `api::egl::Display::terminate` to terminate the display when glutin doesn't manage it.\n- Fixed handling of `Robustness::NoError` and `debug` attribute when building context.\n- `Robustness::NoError` not being properly enabled with GLX/WGL.\n\n# Version 0.30.10\n\n- Add `X11VisualInfo::visual_id` to get `XID` of the visual.\n- Added support for EGL on Windows using Angle. This assumes libEGL.dll/libGLESv2.dll present.\n- EGL's `Display::create_pbuffer_surface()` no longer sets the invalid `RENDER_BUFFER` attribute.\n\n# Version 0.30.9\n\n- Fixed lock on SwapBuffers with some GLX drivers.\n- Fixed EGL's `Surface::is_single_buffered` being inversed.\n\n# Version 0.30.8\n\n- Fixed EGL dereferencing raw window handles on everything but X11 in legacy `Window` and `Pixmap` surface creation.\n- On GLX, fixed startup failure when passing default `Flush` with `KHR_context_flush_control`.\n- **Behavior change:** the `Config`'s `Api` now has platform specific default instead of being unspecified.\n\n# Version 0.30.7\n\n- Altered specification for `objc2` crate to pull patch update.\n\n# Version 0.30.6\n\n- Fixed handling of `*_base` extensions with EGL.\n\n# Version 0.30.5\n\n- Fixed EGL/GLX display initialization when the provided raw-window-handle has an unknown visual_id.\n- Fixed EGL always returning `None` for `x11_visual()`.\n- Fixed GLX error handling assuming that `XError`'s will arrive like they should on X11.\n- Fixed EGL window/pixmap creation when using legacy path.\n\n# Version 0.30.4\n\n- Fixed EGL display initialization with XcbDisplayHandle.\n- Fixed EGL/GLX `Surface::width` returning the height instead of the width.\n- On GLX, fixed handling of errors not directly requested by glutin.\n- Added `GlConfig::hardware_accelerated` to check if the config is hardware accelerated.\n- Added `GlContext::context_api` to get the `ContextApi` used by the context.\n- Added missing implementations of `Surface::{width,height}` for WGL/CGL\n- Fixed crash when accessing context from the off-thread on macOS.\n- **Clarified that `make_{,not}_current()`, `GlSurface::width()`, `GlSurface::height()`, and `GlSurface::resize()` could block on macOS.**\n\n# Version 0.30.3\n\n- Fixed wrong amount of rects committed in `Surface::swap_buffers_with_damage` with EGL.\n- Added missing `Eq`, `PartialEq`, and `Hash` impls for `surface::Rect`.\n\n# Version 0.30.2\n\n- Fixed robust context creation with EGL.\n- Moved to stable version of `wayland-sys`.\n- Allow offline renderers with CGL.\n- Fixed an error when compiling the EGL backend with only one of Wayland and X11 enabled.\n\n# Version 0.30.1\n\n- Added new `glutin-winit` crate to help bootstrapping new `glutin` with `winit`.\n- Added `EGLDevice` wrappers for EGL.\n- Added EGL dependent api to make a context current without a surface.\n- Added `supports_transparency` on `GlConfig`.\n- On GLX, try all extensions when setting vsync.\n- On WGL, fixed that `Surface::swap_buffers` takes longer with every call caused by frequent calls of the win32 function `HDC GetDC(HWND hWnd)`.\n\n# Version 0.30.0\n\n- **This version of `glutin` has been rewritten from the ground and no longer depends on `winit`, the `raw-window-handle` is now used instead of it.**\n- The Api is now built around `Display`, `Surface`, `Config`, and `Surface`. For more info see crate documentation and examples.\n- **Breaking:** Bump MSRV from `1.57` to `1.60`.\n- The ios support was removed for the lack of maintenance for now. In case there's a need for it, contributions are welcome.\n- The context creation is no longer limited to winit's supported platforms.\n- The underlying Api providers are publicly exposed now, so glutin could be used with just e.g. `EGL`.\n- Fixed soundness issues with `Surface` MT safety, since before `EGLSurface` could be sent to a different thread, which is not safe.\n- Fallback to `Surface::swap_buffers` when `Surface::swap_buffers_with_damage` is not supported on `EGL`.\n\n# Version 0.29.1 (2022-08-10)\n\n- Fix build failures when building from crates.io\n\n# Version 0.29.0 (2022-07-30)\n\n- Fix crash when creating OpenGLES context without explicit version.\n- Add `buffer_age` method on `WindowedContext`.\n- Return an `Err` instead of panicking when surfaceless GLX context creation fails on Linux.\n- Fix compilation on Android:\n  - Switch from `StaticStructGenerator` to `StructGenerator` to dynamically load symbols.\n  - Replace `android_glue` dependency with `raw-window-handle`, and remove broken lifecycle event handling.\n  - Glutin can now be used on Android, however, the application must ensure it only creates the `Context` following a winit `Event::Resumed` event, and destroys the `Context` in response to a `Event::Suspended` event.\n- Updated winit dependency to 0.27.0. See [winit's CHANGELOG](https://github.com/rust-windowing/winit/releases/tag/v0.27.0) for more info.\n- On Windows, `build_raw_context` now uses `isize` for `hwnd` to follow winit change.\n\n# Version 0.28.0 (2021-12-02)\n\n- On Windows, fixed a panic for headless contexts because of active drag-and-drop (OleInitialize failed! Result was: `RPC_E_CHANGED_MODE`)\n- Updated winit dependency to 0.26.0. See [winit's CHANGELOG](https://github.com/rust-windowing/winit/releases/tag/v0.26.0) for more info.\n- Remove emscripten support leftover.\n\n# Version 0.27.0 (2021-06-01)\n\n- Updated winit dependency to 0.25.0. See [winit's CHANGELOG](https://github.com/rust-windowing/winit/releases/tag/v0.25.0) for more info.\n\n# Version 0.26.0 (2020-12-10)\n\n- Updated winit dependency to 0.24.0. See [winit's CHANGELOG](https://github.com/rust-windowing/winit/releases/tag/v0.24.0) for more info.\n\n# Version 0.25.1 (2020-10-10)\n\n- X11 and Wayland are now optional features (enabled by default)\n\n# Version 0.25.0 (2020-10-02)\n\n- Updated winit dependency to 0.23.0. See [winit's CHANGELOG](https://github.com/rust-windowing/winit/blob/master/CHANGELOG.md#0230-2020-10-02) for more info.\n- Avoid loading libEGL.dll from PATH on Windows.\n\n# Version 0.24.1 (2020-05-26)\n\n- On X11, Fixed unnecessary instantiation of GLX/EGL\n\n# Version 0.24.0 (2020-03-11)\n\n- Updated winit dependency to 0.22.0. See [winit's CHANGELOG](https://github.com/rust-windowing/winit/blob/master/CHANGELOG.md#0220-2020-03-09) for more info.\n\n# Version 0.23.0 (2020-02-06)\n\n- Updated winit dependency to 0.21.0. See [winit's CHANGELOG](https://github.com/rust-windowing/winit/blob/master/CHANGELOG.md#0210-2020-02-04) for more info.\n- Removed broken CI for the `armv7-apple-ios` target.\n\n# Version 0.22.1 (2020-01-29)\n\n- Fixed incorrectly documented default value for `ContextBuilder::with_srgb`\n\n# Version 0.22.0 (2020-01-07)\n\n- Updated winit dependency to 0.20.0. See [winit's CHANGELOG](https://github.com/rust-windowing/winit/blob/master/CHANGELOG.md#0200-2020-01-05) for more info.\n\n# Version 0.22.0-alpha6 (2020-01-05)\n\n- Fixed dependencies so wrong winit version is not used.\n- On X11, got rid of mistaken `XRenderFindVisualFormat` call so that glutin doesn't ignore configs that lack a `XRenderPictFormat`.\n- On iOS, fixed not linking against OpenGLES.framework.\n- On X11, fixed VSync not being disabled when requested.\n\n# Version 0.22.0-alpha5 (2019-11-14)\n\n- Fixed build issue.\n\n# Version 0.22.0-alpha4 (2019-11-10)\n\n- Update winit dependency to 0.20.0-alpha4. See [winit's CHANGELOG](https://github.com/rust-windowing/winit/blob/master/CHANGELOG.md#0200-alpha-4) for more info.\n- Added an xcode example for building for iOS.\n- Made using sRGB the default.\n- MacOSX's raw_handle trait method  now returns the CGLContext object.\n\n# Version 0.22.0-alpha3 (2019-8-15)\n\n - Switched from needing a `EventLoop` to a `EventLoopWindowTarget`\n\n# Version 0.22.0-alpha2 (2019-08-15)\n\n- Fixed attribute handling for sRGB in WGL.\n- Fixed VSync being always enabled on EGL.\n\n# Version 0.20.1 (2019-08-08)\n\n - **Backport:** We now load `libGL.so` instead of `libGLX.so`.\n\n# Version 0.22.0-alpha1 (2019-06-21)\n\n- Update winit dependency to 0.20.0-alpha1. See [winit's CHANGELOG](https://github.com/rust-windowing/winit/blob/master/CHANGELOG.md#0200-alpha-1) for more info.\n\n# Version 0.21.0 (2019-04-20)\n\n - Bumped dependencies, fixed docs.\n\n# Version 0.21.0-rc3 (2019-04-13)\n\n - Bumped dependencies.\n\n# Version 0.21.0-rc2 (2019-04-08)\n\n - **Breaking**: Removed `DisplayLost` variant to `ContextError`.\n - **Breaking**: Renamed `NotCurrentContext` to `NotCurrent`.\n - **Breaking**: Renamed `PossiblyCurrentContext` to `PossiblyCurrent`.\n - Added `treat_as_current` function.\n\n# Version 0.21.0-rc1 (2019-04-07)\n\n - **Breaking:** Replaced `CreationErrorPair` enum variant with `CreationErrors`.\n - Added `Clone` to `ContextBuilder`.\n - Added headless example.\n - Removed internal code relating to libcaca.\n - Implemented `Debug` on all public facing types.\n - Dropping contexts on platforms using egl and/or glx no longer resets the\n current context, if the context dropped wasn't the current context.\n - Added context sharing support to MacOS.\n - **Breaking**: Removed `ContextTrait`.\n - **Breaking**: Renamed `OsMesaContextExt` to `HeadlessContextExt`. Added functions\n for using egl-surfaceless.\n - **Breaking**: Changed `WindowedContext` and `RawContext` into typedefs of\n `ContextWrapper`.\n - **Breaking**: Removed `new_windowed` and `new_headless` from `WindowedContext`\n and `Context`, respectively.\n - **Breaking**: Added two new types, `NotCurrentContext` and `PossiblyCurrentContext`,\n which `RawContext`, `WindowedContext`, `ContextBuilder` and `Context` are now\n generic over.\n - Added `{make,treat_as}_not_current` function to `{Raw,Windowed,}Context`.\n - We now load `libGL.so` instead of `libGLX.so`.\n - **Breaking**: Added `DisplayLost` variant to `ContextError`.\n - Fixed bug where we drop the hidden window belonging to a headless context on\n on X11 and/or Wayland before the actual context.\n - \"Fixed\" bug where we will close `EGLDisplay`s while they are still in use by\n others. Angry and/or salty rant can be found in `glutin/src/api/egl/mod.rs`,\n you can't miss it.\n - **Breaking**: `WindowedContext`s now deref to `Context`, not `Window`.\n Please use `.window()` to access the window.\n\n# Version 0.20.0 (2019-03-09)\n\n- We no longer load `libEGL.so` and `libGL.so` multiple times.\n- Fixes `Context::is_current` incorrectly returning `false`.\n- Made `ContextBuilder`'s `pf_reqs` public.\n- **Breaking:** Renamed `GlContext{,Ext}` to `ContextTrait{,Ext}`.\n- **Breaking:** Renamed `GlWindow` to `WindowedContext`.\n- Implemented context sharing support for Windows and Linux.\n- Added support for contexts made from raw parts for Windows and Linux.\n- **Breaking:** Removed `shareable_with_windowed_contexts`. Now you must build\nOsMesa contexts via a separate extension.\n- Added `ContextBuilder::build_{windowed,headless}` methods.\n- **Breaking:** Renamed `Context::new` to `Context::new_headless`. `new_headless` now accepts dimensions for the off-screen surface backing it.\n- **Breaking:** Renamed `GlWindow::new` to `WindowedContext::new_windowed`.\n- On X11 and Wayland, you can now use shared contexts, however, one limitation\nof the Wayland backend is that all shared contexts must use the same events\npool as each other.\n- Added context sharing support to windows.\n- Improved docs.\n- Refactored code to be more consistent/cleaner. Ran rustfmt on everything.\n- Added NetBSD support.\n- **Breaking:** Removed `new_shared` function from `Context` and `GlWindow`, in favor of `new`.\n- Added `build` method to `ContextBuilder`.\n- Added `get_egl_display` method to `GlContextExt` trait and its implementation for platforms.\n- Removed minimum supported Rust version guarantee.\n- `NoBackendAvailable` is now `Sync`, as a result `CreationError` is also `Sync`.\n- Update winit dependency to 0.19.0. See [winit's CHANGELOG](https://github.com/rust-windowing/winit/blob/master/CHANGELOG.md#version-0190-2019-03-06) for more info.\n\n# Version 0.19.0 (2018-11-09)\n\n- **Breaking:** The entire API for headless contexts has been removed. Please instead use `Context::new()` when trying to make a context without a visible window. Also removed `headless` feature.\n- **Breaking:** Types implementing the `GlContext` trait must now be sized.\n- **Breaking:** Added new `CreationErrorPair` enum variant to enum `CreationError`.\n- Remove requirement for EGL dev packages on Wayland.\n- Update winit dependency to 0.18.0. See [winit's CHANGELOG](https://github.com/rust-windowing/winit/blob/v0.18.0/CHANGELOG.md#version-0180-2018-11-07) for more info.\n\n# Version 0.18.0 (2018-08-03)\n\n- cocoa and core-graphics updates.\n- **Breaking:** Added `OsError` variant to `ContextError`.\n- Improved glX error reporting.\n- The iOS backend no longer fails to compile... again (added iOS testing on CI to prevent further issues).\n- Update winit dependency to 0.17.0. See [winit's CHANGELOG](https://github.com/rust-windowing/winit/blob/v0.17.0/CHANGELOG.md#version-0170-2018-08-02) for more info.\n\n# Version 0.17.0 (2018-06-27)\n\n- Fix regression that prevented automatic graphics switching in macOS ([#980](https://github.com/rust-windowing/glutin/issues/980)).\n- Add `ContextBuilder::with_double_buffer` function.\n- Add `ContextBuilder::with_hardware_acceleration` function.\n- Work around a presumed Android emulator bug\n  that would cause context creation to return `CreationError::OpenGlVersionNotSupported`\n  in some configurations\n  ([#1036](https://github.com/rust-windowing/glutin/pull/1036)).\n- Update winit dependency to 0.16.0. See [winit's CHANGELOG](https://github.com/rust-windowing/winit/blob/v0.16.0/CHANGELOG.md#version-0160-2018-06-25) for more info.\n- The iOS backend no longer fails to compile.\n\n# Version 0.16.0 (2018-05-09)\n\n- Update winit dependency to 0.14.0. See [winit's CHANGELOG](https://github.com/rust-windowing/winit/blob/v0.14.0/CHANGELOG.md#version-0140-2018-05-09) for more info.\n- Update winit dependency to 0.15.0. See [winit's CHANGELOG](https://github.com/rust-windowing/winit/blob/v0.15.0/CHANGELOG.md#version-0150-2018-05-22) for more info.\n\n# Version 0.15.0 (2018-04-25)\n\n- Update winit dependency to 0.13.0. See [winit's CHANGELOG](https://github.com/rust-windowing/winit/blob/v0.13.0/CHANGELOG.md#version-0130-2018-04-25) for more info.\n\n# Version 0.14.0 (2018-04-06)\n\n- Update winit dependency to 0.12.0. See [winit's CHANGELOG](https://github.com/rust-windowing/winit/blob/master/CHANGELOG.md#version-0120-2018-04-06) for more info.\n- Update Wayland backend to not use deprecated `get_inner_size_points` method.\n\n# Version 0.13.1 (2018-03-07)\n\n- Fix Android activity life cycle.\n- Update winit dependency to 0.11.2. See [winit's CHANGELOG](https://github.com/rust-windowing/winit/blob/master/CHANGELOG.md#version-0112-2018-03-06) for more info.\n\n# Version 0.13.0 (2018-02-28)\n\n- Update winit dependency to 0.11.1. See [winit's CHANGELOG](https://github.com/rust-windowing/winit/blob/master/CHANGELOG.md#version-0111-2018-02-19) for more info.\n\n# Version 0.12.2 (2018-02-12)\n\n- Don't use yanked version of winit.\n\n# Version 0.12.1 (2018-02-05)\n\n- Add support for winapi 0.3 ([#975](https://github.com/rust-windowing/glutin/pull/975)).\n- Fix macOS to return compatibility profile if applicable ([#977](https://github.com/rust-windowing/glutin/pull/977)).\n- Update gl_generator and macOS dependencies.\n"
        },
        {
          "name": "Cargo.toml",
          "type": "blob",
          "size": 0.18359375,
          "content": "[workspace]\nresolver = \"2\"\nmembers = [\n    \"glutin\",\n    \"glutin-winit\",\n    \"glutin_examples\",\n    \"glutin_egl_sys\",\n    \"glutin_glx_sys\",\n    \"glutin_wgl_sys\",\n    \"glutin_gles2_sys\",\n]\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 11.046875,
          "content": "Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"{}\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright 2022 Kirill Chibisov\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 1.9697265625,
          "content": "# glutin -  OpenGL, UTilities, and INput\n\nA low-level library for OpenGL context creation.\n\n[![](https://img.shields.io/crates/v/glutin.svg)](https://crates.io/crates/glutin)\n[![Docs.rs](https://docs.rs/glutin/badge.svg)](https://docs.rs/glutin)\n\n## [Documentation](https://docs.rs/glutin)\n\n## Contact Us\n\nJoin us in any of these:\n\n[![Matrix](https://img.shields.io/badge/Matrix-%23winit%3Amatrix.org-blueviolet.svg)](https://matrix.to/#/#winit:matrix.org)\n[![Libera.Chat](https://img.shields.io/badge/libera.chat-%23winit-red.svg)](https://web.libera.chat/#winit)\n\n## Usage Examples\n\n**Warning:** These are examples for `master`. You can find examples for\nthe latest _released version_ [here](https://github.com/rust-windowing/glutin/releases/latest).\n\nThe examples use [`gl_generator`](https://crates.io/crates/gl_generator) to\ngenerate OpenGL bindings.\n\n### Try it!\n\n```bash\ngit clone https://github.com/rust-windowing/glutin\ncd glutin\ncargo run --example window\n```\n\n### Usage\n\nGlutin is an OpenGL context creation library, and doesn't directly provide\nOpenGL bindings for you.\n\nFor examples, please look [here](https://github.com/rust-windowing/glutin/tree/master/glutin_examples).\n\nNote that glutin aims at being a low-level brick in your rendering\ninfrastructure. You are encouraged to write another layer of abstraction\nbetween glutin and your application.\n\nGlutin follows winit's [MSRV policy](https://github.com/rust-windowing/winit/blob/master/README.md#msrv-policy).\n\n## Platform-specific notes\n\n### Android\n\nBe sure to handle Android's lifecycle correctly when using a `winit` window\nby only creating a GL surface after `winit` raises `Event::Resumed`, and\ndestroy it again upon receiving `Event::Suspended`. See this in action in the\n[`android.rs` example](./glutin_examples/examples/android.rs).\n\nTo compile and run the Android example on your device,\ninstall [`cargo-apk`](https://crates.io/crates/cargo-apk)\nand start the app using:\n\n```console\n$ cargo apk r -p glutin_examples --example android\n```\n"
        },
        {
          "name": "_typos.toml",
          "type": "blob",
          "size": 0.0556640625,
          "content": "[type.md.extend-identifiers]\nApiPrefence = \"ApiPrefence\"\n"
        },
        {
          "name": "glutin-winit",
          "type": "tree",
          "content": null
        },
        {
          "name": "glutin",
          "type": "tree",
          "content": null
        },
        {
          "name": "glutin_egl_sys",
          "type": "tree",
          "content": null
        },
        {
          "name": "glutin_examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "glutin_gles2_sys",
          "type": "tree",
          "content": null
        },
        {
          "name": "glutin_glx_sys",
          "type": "tree",
          "content": null
        },
        {
          "name": "glutin_wgl_sys",
          "type": "tree",
          "content": null
        },
        {
          "name": "rustfmt.toml",
          "type": "blob",
          "size": 0.4267578125,
          "content": "format_code_in_doc_comments = true\nmatch_block_trailing_comma = true\ncondense_wildcard_suffixes = true\nuse_field_init_shorthand = true\nnormalize_doc_attributes = true\noverflow_delimited_expr = true\nimports_granularity = \"Module\"\nuse_small_heuristics = \"Max\"\nnormalize_comments = true\nreorder_impl_items = true\nuse_try_shorthand = true\nnewline_style = \"Unix\"\nformat_strings = true\nwrap_comments = true\ncomment_width = 80\nedition = \"2021\"\n"
        }
      ]
    }
  ]
}