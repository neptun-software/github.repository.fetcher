{
  "metadata": {
    "timestamp": 1736709028904,
    "page": 118,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjEyMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "visioncortex/vtracer",
      "stars": 3687,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.0263671875,
          "content": "docs/** linguist-generated\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.03515625,
          "content": "target\nCargo.lock\n*.sublime*\n.vscode"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 0.9912109375,
          "content": "# Changelog\n\nAll notable changes to this project will be documented in this file.\n\nThe format is based on [Keep a Changelog](http://keepachangelog.com/)\nand this project adheres to [Semantic Versioning](http://semver.org/).\n\n## 0.6.4 - 2024-03-29\n\n* Update `visioncortex` version to `0.8.8`\n\n## 0.6.3 - 2023-11-21\n\n* New converter API https://github.com/visioncortex/vtracer/pull/59\n\n## 0.6.1 - 2023-09-23\n\n* Fixed \"The two lines are parallel!\"\n\n### Python Binding\n\nThanks to the contribution of [@etjones](https://github.com/etjones), we now have an official Python binding! https://github.com/visioncortex/vtracer/pull/55\n\nhttps://pypi.org/project/vtracer/0.6.10/\n\n## 0.5.0 - 2022-10-09\n\n* Handle transparent png images (cli) https://github.com/visioncortex/vtracer/pull/23\n\n## 0.4.0 - 2021-07-23\n\n* SVG path string numeric precision\n\n## 0.3.0 - 2021-01-24\n\n* Added cutout mode\n\n## 0.2.0 - 2020-11-15\n\n* Use relative & closed paths\n\n## 0.1.1 - 2020-11-01\n\n* SVG namespace\n\n## 0.1.0 - 2020-10-31\n\n* Initial release"
        },
        {
          "name": "Cargo.toml",
          "type": "blob",
          "size": 0.0673828125,
          "content": "[workspace]\n\nmembers = [\n    \"cmdapp\",\n    \"webapp\",\n]\nresolver = \"2\""
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.033203125,
          "content": "Copyright (c) 2024 TSANG, Hao Fung\n\nPermission is hereby granted, free of charge, to any\nperson obtaining a copy of this software and associated\ndocumentation files (the \"Software\"), to deal in the\nSoftware without restriction, including without\nlimitation the rights to use, copy, modify, merge,\npublish, distribute, sublicense, and/or sell copies of\nthe Software, and to permit persons to whom the Software\nis furnished to do so, subject to the following\nconditions:\n\nThe above copyright notice and this permission notice\nshall be included in all copies or substantial portions\nof the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF\nANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED\nTO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A\nPARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT\nSHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\nOF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR\nIN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\nDEALINGS IN THE SOFTWARE."
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 7.626953125,
          "content": "<div align=\"center\">\n\n  <img src=\"docs/images/visioncortex-banner.png\">\n  <h1>VTracer</h1>\n\n  <p>\n    <strong>Raster to Vector Graphics Converter built on top of visioncortex</strong>\n  </p>\n\n  <h3>\n    <a href=\"https://www.visioncortex.org/vtracer-docs\">Article</a>\n    <span> | </span>\n    <a href=\"https://www.visioncortex.org/vtracer/\">Web App</a>\n    <span> | </span>\n    <a href=\"https://github.com/visioncortex/vtracer/releases\">Download</a>\n  </h3>\n\n  <sub>Built with ðŸ¦€ by <a href=\"https://www.visioncortex.org/\">The Vision Cortex Research Group</a></sub>\n</div>\n\n## Introduction\n\nvisioncortex VTracer is an open source software to convert raster images (like jpg & png) into vector graphics (svg). It can vectorize graphics and photographs and trace the curves to output compact vector files.\n\nComparing to [Potrace](http://potrace.sourceforge.net/) which only accept binarized inputs (Black & White pixmap), VTracer has an image processing pipeline which can handle colored high resolution scans. tl;dr: Potrace uses a `O(n^2)` fitting algorithm, whereas `vtracer` is entirely `O(n)`.\n\nComparing to Adobe Illustrator's [Image Trace](https://helpx.adobe.com/illustrator/using/image-trace.html), VTracer's output is much more compact (less shapes) as we adopt a stacking strategy and avoid producing shapes with holes.\n\nVTracer is originally designed for processing high resolution scans of historic blueprints up to gigapixels. At the same time, VTracer can also handle low resolution pixel art, simulating `image-rendering: pixelated` for retro game artworks.\n\nTechnical descriptions of the [tracing algorithm](https://www.visioncortex.org/vtracer-docs) and [clustering algorithm](https://www.visioncortex.org/impression-docs).\n\n## Web App\n\nVTracer and its [core library](//github.com/visioncortex/visioncortex) is implemented in [Rust](//www.rust-lang.org/). It provides us a solid foundation to develop robust and efficient algorithms and easily bring it to interactive applications. The webapp is a perfect showcase of the capability of the Rust + wasm platform.\n\n![screenshot](docs/images/screenshot-01.png)\n\n![screenshot](docs/images/screenshot-02.png)\n\n## Cmd App\n\n```sh\nvisioncortex VTracer 0.6.0\nA cmd app to convert images into vector graphics.\n\nUSAGE:\n    vtracer [OPTIONS] --input <input> --output <output>\n\nFLAGS:\n    -h, --help       Prints help information\n    -V, --version    Prints version information\n\nOPTIONS:\n        --colormode <color_mode>                 True color image `color` (default) or Binary image `bw`\n    -p, --color_precision <color_precision>      Number of significant bits to use in an RGB channel\n    -c, --corner_threshold <corner_threshold>    Minimum momentary angle (degree) to be considered a corner\n    -f, --filter_speckle <filter_speckle>        Discard patches smaller than X px in size\n    -g, --gradient_step <gradient_step>          Color difference between gradient layers\n        --hierarchical <hierarchical>\n            Hierarchical clustering `stacked` (default) or non-stacked `cutout`. Only applies to color mode.\n\n    -i, --input <input>                          Path to input raster image\n    -m, --mode <mode>                            Curver fitting mode `pixel`, `polygon`, `spline`\n    -o, --output <output>                        Path to output vector graphics\n        --path_precision <path_precision>        Number of decimal places to use in path string\n        --preset <preset>                        Use one of the preset configs `bw`, `poster`, `photo`\n    -l, --segment_length <segment_length>\n            Perform iterative subdivide smooth until all segments are shorter than this length\n\n    -s, --splice_threshold <splice_threshold>    Minimum angle displacement (degree) to splice a spline\n```\n\n## Downloads\n\nYou can download pre-built binaries from [Releases](https://github.com/visioncortex/vtracer/releases).\n\nYou can also install the program from source from [crates.io/vtracer](https://crates.io/crates/vtracer):\n\n```sh\ncargo install vtracer\n```\n\n> You are strongly advised to not download from any other third-party sources \n\n### Usage\n\n```sh\n./vtracer --input input.jpg --output output.svg\n```\n\n### Rust Library\n\nYou can install [`vtracer`](https://crates.io/crates/vtracer) as a Rust library.\n\n```sh\ncargo add vtracer\n```\n\n### Python Library\n\nSince `0.6`, [`vtracer`](https://pypi.org/project/vtracer/) is also packaged as Python native extensions, thanks to the awesome [pyo3](https://github.com/PyO3/pyo3) project.\n\n```sh\npip install vtracer\n```\n\n## In the wild\n\nVTracer is used by the following products (open a PR to add yours):\n\n<table>\n  <tbody>\n    <tr>\n      <td><a href=\"https://logo.aliyun.com/logo#/name\"><img src=\"docs/images/aliyun-logo.png\" width=\"250\"/></a>\n      <br>Smart logo design\n      </td>\n      <td></td>\n    </tr>\n  </tbody>\n</table>\n\n## Citations\n\nVTracer has since been cited by a few academic papers in computer graphics / vision research. Please kindly let us know if you have cited our work:\n\n+ SKILL 2023 [Framework to Vectorize Digital Artworks for Physical Fabrication based on Geometric Stylization Techniques](https://www.researchgate.net/publication/374448489_Framework_to_Vectorize_Digital_Artworks_for_Physical_Fabrication_based_on_Geometric_Stylization_Techniques)\n+ arXiv 2023 [Image Vectorization: a Review](https://arxiv.org/abs/2306.06441)\n+ arXiv 2023 [StarVector: Generating Scalable Vector Graphics Code from Images](https://arxiv.org/abs/2312.11556)\n+ arXiv 2024 [Text-Based Reasoning About Vector Graphics](https://arxiv.org/abs/2404.06479)\n+ arXiv 2024 [Delving into LLMs' visual understanding ability using SVG to bridge image and text](https://openreview.net/pdf?id=pwlm6Po61I)\n\n## How did VTracer come about?\n\n> The following content is an excerpt from my [unpublished memoir](https://github.com/visioncortex/memoir).\n\nAt my teenage, two open source projects in the vector graphics space inspired me the most: Potrace and Anti-Grain Geometry (AGG).\n\nMany years later, in 2020, I was developing a video processing engine. And it became evident that it requires way more investment to be commercially viable. So before abandoning the project, I wanted to publish *something* as open-source for posterity. At that time, I already developed a prototype vector graphics tracer. It can convert high-resolution scans of hand-drawn blueprints into vectors. But it can only process black and white images, and can only output polygons, not splines.\n\nThe plan was to fully develop the vectorizer: to handle color images and output splines. I recruited a very talented intern, [@shpun817](https://github.com/shpun817), to work on VTracer. I grafted the frontend of the video processing engine - the [\"The Clustering Algorithm\"](https://www.visioncortex.org/impression-docs#the-clustering-algorithm) as the pre-processor.\n\nThree months later, we published the first version on Reddit. Out of my surprise, the response of such an underwhelming project was overwhelming.\n\n## What's next?\n\nThere are several things in my mind:\n\n1. Path simplification. Implement a post-process filter to the output paths to further reduce the number of splines.\n\n2. Perfect cut-out mode. Right now in cut-out mode, the shapes do not share boundaries perfectly, but have seams.\n\n3. Pencil tracing. Instead of tracing shapes as closed paths, may be we can attempt to skeletonize the shapes as open paths. The output would be clean, fixed width strokes.\n\n4. Image cleaning. Right now the tracer works best on losslessly compressed pngs. If an image suffered from jpeg noises, it could impact the tracing quality. We might be able to develop a pre-filtering pass that denoises the input.\n\nIf you are interested in working on them or willing to sponsor its development, feel free to get in touch.\n"
        },
        {
          "name": "cmdapp",
          "type": "tree",
          "content": null
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "webapp",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}