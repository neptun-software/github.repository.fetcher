{
  "metadata": {
    "timestamp": 1736709200687,
    "page": 466,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjQ3MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "stacks-archive/sbtc-developer-release",
      "stars": 1978,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".dockerignore",
          "type": "blob",
          "size": 0.1396484375,
          "content": ".*\ntarget\nCargo.lock\ndevenv/*\n!devenv/sbtc/docker/entrypoint\ncoverage\nromeo/testing/\nromeo/asset-contract/.test\nromeo/asset-contract/.coverage\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.1357421875,
          "content": "target\nCargo.lock\ncoverage\nromeo/testing/\nromeo/asset-contract/.test\nromeo/asset-contract/.coverage\n**/.DS_Store\n**/romeo.log\nnode_modules\n"
        },
        {
          "name": "CODE_OF_CONDUCT.md",
          "type": "blob",
          "size": 5.1005859375,
          "content": "# Contributor Covenant Code of Conduct\n\n## Our Pledge\n\nWe as members, contributors, and leaders pledge to make participation in our community a harassment-free experience for everyone, regardless of age, body size, visible or invisible disability, ethnicity, sex characteristics, gender identity and expression, level of experience, education, socio-economic status, nationality, personal appearance, race, religion, or sexual identity and orientation.\n\nWe pledge to act and interact in ways that contribute to an open, welcoming, diverse, inclusive, and healthy community.\n\n## Our Standards\n\nExamples of behavior that contributes to a positive environment for our community include:\n\n* Demonstrating empathy and kindness toward other people\n* Being respectful of differing opinions, viewpoints, and experiences\n* Giving and gracefully accepting constructive feedback\n* Accepting responsibility and apologizing to those affected by our mistakes, and learning from the experience\n* Focusing on what is best not just for us as individuals, but for the overall community\n\nExamples of unacceptable behavior include:\n\n* The use of sexualized language or imagery, and sexual attention or\n  advances of any kind\n* Trolling, insulting or derogatory comments, and personal or political attacks\n* Public or private harassment\n* Publishing others' private information, such as a physical or email\n  address, without their explicit permission\n* Other conduct which could reasonably be considered inappropriate in a\n  professional setting\n\n## Enforcement Responsibilities\n\nCommunity leaders are responsible for clarifying and enforcing our standards of acceptable behavior and will take appropriate and fair corrective action in response to any behavior that they deem inappropriate, threatening, offensive, or harmful.\n\nCommunity leaders have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, and will communicate reasons for moderation decisions when appropriate.\n\n## Scope\n\nThis Code of Conduct applies within all community spaces, and also applies when an individual is officially representing the community in public spaces. Examples of representing our community include using an official e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event.\n\n## Enforcement\n\nInstances of abusive, harassing, or otherwise unacceptable behavior may be reported to the community leaders responsible for enforcement at opensource@blockstack.org. All complaints will be reviewed and investigated promptly and fairly.\n\nAll community leaders are obligated to respect the privacy and security of the reporter of any incident.\n\n## Enforcement Guidelines\n\nCommunity leaders will follow these Community Impact Guidelines in determining the consequences for any action they deem in violation of this Code of Conduct:\n\n### 1. Correction\n\n**Community Impact**: Use of inappropriate language or other behavior deemed unprofessional or unwelcome in the community.\n\n**Consequence**: A private, written warning from community leaders, providing clarity around the nature of the violation and an explanation of why the behavior was inappropriate. A public apology may be requested.\n\n### 2. Warning\n\n**Community Impact**: A violation through a single incident or series of actions.\n\n**Consequence**: A warning with consequences for continued behavior. No interaction with the people involved, including unsolicited interaction with those enforcing the Code of Conduct, for a specified period of time. This includes avoiding interactions in community spaces as well as external channels like social media. Violating these terms may lead to a temporary or permanent ban.\n\n### 3. Temporary Ban\n\n**Community Impact**: A serious violation of community standards, including sustained inappropriate behavior.\n\n**Consequence**: A temporary ban from any sort of interaction or public communication with the community for a specified period of time. No public or private interaction with the people involved, including unsolicited interaction with those enforcing the Code of Conduct, is allowed during this period. Violating these terms may lead to a permanent ban.\n\n### 4. Permanent Ban\n\n**Community Impact**: Demonstrating a pattern of violation of community standards, including sustained inappropriate behavior,  harassment of an individual, or aggression toward or disparagement of classes of individuals.\n\n**Consequence**: A permanent ban from any sort of public interaction within the community.\n\n## Attribution\n\nThis Code of Conduct is adapted from the [Contributor Covenant][homepage], version 2.0,\navailable at https://www.contributor-covenant.org/version/2/0/code_of_conduct.html.\n\nCommunity Impact Guidelines were inspired by [Mozilla's code of conduct enforcement ladder](https://github.com/mozilla/diversity).\n\n[homepage]: https://www.contributor-covenant.org\n\nFor answers to common questions about this code of conduct, see the FAQ at\nhttps://www.contributor-covenant.org/faq. Translations are available at https://www.contributor-covenant.org/translations.\n"
        },
        {
          "name": "Cargo.toml",
          "type": "blob",
          "size": 0.7421875,
          "content": "[workspace]\nmembers = [\"sbtc-cli\", \"sbtc-core\", \"stacks-core\", \"romeo\"]\nresolver = \"2\"\n\n[workspace.dependencies]\nanyhow = \"1.0\"\narray-bytes = \"6.1.0\"\nbackoff = \"0.4.0\"\nbdk = \"0.28.1\"\nbitcoin = \"0.29.2\"\nclap = \"4.1.1\"\nderivative = \"2.2.0\"\ndirs = \"5.0.1\"\nfutures = \"0.3.28\"\nhex = \"0.4.3\"\nlog = \"0.4.19\"\nonce_cell = \"1.18.0\"\np256k1 = \"5.1\"\nrand = \"0.8.5\"\nregex = \"~1.8.4\"\nreqwest = \"0.11.20\"\nring = \"0.16.20\"\nripemd = \"0.1.3\"\nrs_merkle = \"1.4.1\"\nsecp256k1 = \"0.27.0\"\nserde = \"1.0\"\nserde_json = \"1.0\"\nsha2 = \"0.10.7\"\nstacks-core = { version = \"0.1.0\", path = \"./stacks-core\" }\nstrum = \"0.25.0\"\nthiserror = \"1.0.43\"\ntokio = \"1.32.0\"\ntoml = \"0.8.0\"\ntracing = \"0.1.37\"\ntracing-subscriber = { version = \"0.3.17\", features = [\"env-filter\"] }\nurl = \"2.4.1\"\nwsts = \"1.2\"\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.0419921875,
          "content": "MIT License\n\nCopyright (c) 2020 Blockstack\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "Makefile.toml",
          "type": "blob",
          "size": 4.1376953125,
          "content": "[config]\n# Remove the cargo-make defaults.\nskip_core_tasks = true\n\n[env]\n# Cargo Make specific env variables\nCARGO_MAKE_EXTEND_WORKSPACE_MAKEFILE = true # Remove defaults\n\n# Custom env variables\nCOVERAGE_DIRECTORY = \"coverage\"\nCOVERAGE_LCOV = \"${COVERAGE_DIRECTORY}/lcov.info\"\nCOVERAGE_HTML_DIR = \"${COVERAGE_DIRECTORY}/html\"\n\n# Default to using nextest\nTEST_FRAMEWORK = \"nextest\"\n\n[env.github-actions]\n# TODO: use nexttest when testing becomes too much to do in series.\n# Installing nexttest takes > 5 minutes on github workflow machines.\nTEST_FRAMEWORK = \"test\"\n\n# Installations\n# --------------\n# NOTE: Performing installations in task dependencies is not the way `cargo-make`\n# was intended to be used, but this approach prevents version inconsistencies\n# and keeps the individual installation tasks private.\n\n[tasks._install-test-framework]\nprivate = true\ncondition = { env = { \"TEST_FRAMEWORK\" = \"nextest\" } }\ninstall_crate = { crate_name = \"cargo-nextest\", version = \"0.9.57\", binary = \"cargo\", \"test_arg\" = [\"nextest\" , \"--help\"]}\n\n[tasks._install-llvm-cov]\nprivate = true\ninstall_crate = { crate_name = \"cargo-llvm-cov\", version = \"0.5.25\", binary = \"cargo\", \"test_arg\" = [\"llvm-cov\" , \"--help\"]}\n\n[tasks._install-audit]\nprivate = true\ninstall_crate = { crate_name = \"cargo-audit\", version = \"0.18.1\", binary = \"cargo\", \"test_arg\" = [\"audit\" , \"--help\"]}\n\n[tasks.install]\ndependencies = [\n    \"_install-test-framework\",\n    \"_install-audit\",\n    \"_install-llvm-cov\",\n]\n\n# Formatting\n# -----------\n\n[tasks.format-fmt]\ninstall_crate = \"rustfmt\" # uses the stable version.\ncommand = \"cargo\"\nargs = [\"fmt\", \"--check\", \"--verbose\"]\n\n[tasks.format-clippy]\ninstall_crate = \"clippy\" # uses the stable version.\ncommand = \"cargo\"\nargs = [\"clippy\",\"--all-features\", \"--all-targets\", \"--\", \"-D\", \"warnings\", \"-W\", \"clippy::all\"]\n\n[tasks.format]\ndependencies = [\"format-clippy\", \"format-fmt\"]\n\n# Code coverage\n# ------------------------------------------------------------------------------\n\n# Private tasks ----------------------------------------------------------------\n[tasks._coverage-output-clean]\nprivate = true\ncommand = \"rm\"\nargs = [\"-rf\", \"${COVERAGE_DIRECTORY}\"]\n\n[tasks._make-coverage-output-directory]\nprivate = true\ncommand = \"mkdir\"\nargs = [\"-p\", \"${COVERAGE_DIRECTORY}\"]\n\n[tasks._calculate-coverage]\nprivate = true\ndependencies = [\n    \"_install-llvm-cov\",\n    \"_install-test-framework\",\n]\ncommand = \"cargo\"\nargs = [\n    \"llvm-cov\",\n    \"${TEST_FRAMEWORK}\",\n    \"--all-features\",\n    \"--no-report\"\n]\n\n[tasks._calculated-coverage-clean]\nprivate = true\ndependencies = [\"_install-llvm-cov\"]\nargs = [\"llvm-cov\", \"clean\"]\n\n# Public tasks ----------------------------------------------------------------\n[tasks.coverage-clean]\nworkspace = false\ndependencies = [ \"_calculated-coverage-clean\", \"_coverage-output-clean\" ]\n\n[tasks.coverage-lcov]\nworkspace = false\ndependencies = [\n    \"_install-llvm-cov\",\n    \"_calculate-coverage\",\n    \"_make-coverage-output-directory\"\n]\ncommand = \"cargo\"\nargs = [\n    \"llvm-cov\",\n    \"report\",\n    \"--output-path=${COVERAGE_LCOV}\",\n    \"--lcov\",\n]\n\n[tasks.coverage-html]\nworkspace = false\ndependencies = [\n    \"_install-llvm-cov\",\n    \"_calculate-coverage\",\n    \"_make-coverage-output-directory\"\n]\ncommand = \"cargo\"\nargs = [\n    \"llvm-cov\",\n    \"report\",\n    \"--output-dir=${COVERAGE_HTML_DIR}\",\n    \"--html\",\n]\n\n[tasks.coverage-all]\nworkspace = false\ndependencies = [\"coverage-lcov\", \"coverage-html\"]\n\n[tasks.coverage]\nworkspace = false\nrun_task = \"coverage-all\"\n\n# Build\n# ------\n\n[tasks.cargo-clean]\ncommand = \"cargo\"\nargs = [\"clean\"]\n\n[tasks.release]\ncommand = \"cargo\"\nargs = [\"build\", \"--release\"]\n\n[tasks.test]\nworkspace = false\ndependencies = [\"_install-test-framework\"]\ncommand = \"cargo\"\nargs = [\"${TEST_FRAMEWORK}\", \"run\", \"--release\"]\n\n[tasks.doc]\ncommand = \"cargo\"\nargs = [\"doc\"]\n\n# Audit\n# ------\n\n[tasks.audit]\nworkspace = false # Audit must run in workspace root.\ndependencies = [\"_install-audit\"]\ncommand = \"cargo\"\nargs = [\"audit\", \"-D\", \"warnings\"]\n\n# Workflows\n# ----------\n\n[tasks.clean]\ndependencies = [\"coverage-clean\", \"cargo-clean\"]\n\n[tasks.pr-validation]\ndependencies = [\n    \"clean\",\n    \"format\",\n    \"coverage\",\n    \"release\",\n]\n\n[tasks.default]\nrun_task = \"pr-validation\"\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 2.7353515625,
          "content": "# sbtc\n\n[![Daily Verification][daily-workflow-badge]][daily-workflow-link]\n[![Code Coverage][coverage-badge]][coverage-link]\n[![License: MIT][mit-license-badge]][mit-license-link]\n[![Discord][discord-badge]][discord-link]\n\n\n> Note: This repo is still in early development and is not ready for production use.\n\nThis repo contains, or will contain, packages that define sBTC primitives, signer components, helper tools such as `sbtc-cli` and `devenv`.\n\n## stacks-core\n\nAt the moment this repo also contains Stacks primitives in the `stacks-core` package. The goal is to make this the default way of interfacing with the Stacks blockchain in Rust. At some point it might be moved to a different location.\n\nIt contains fundamental types and logic such as:\n\n- crockford32 encoding\n- hashing primitives (SHA256 and RIPEMD160)\n- StacksAddress\n- Uint support\n- other types\n\n## sbtc-core\n\nThis package contains the core logic for sBTC. For now, most of it is sBTC operation parsing and construction.\n\n## romeo (sBTC Developer Release)\n\nThis package contains a version of the sBTC token (SIP-10) for developers on testnet.\n\nVersion 0.1 is a custodial solution that supports with deposit and withdrawal transaction on Bitoin only using OP_RETURN. The custodial solution is a rust binary that continuously observes the bitcoin and stacks blockchain.\n\n## sbtc-cli\n\nThis package contains a command-line interface for sBTC to create and broadcast deposit and withdraw btc transactions. The cli also has a helper commands for credentials.\n## devenv\n\nThis folder contains configuration files for docker images to launch services for sBTC in a local environment. Use `up.sh` to launch it, and use utility scripts to deposit and withdraw BTC. This environment can be used for demonstrations and automated testing.\n## Contributing\n\n**Before going any further please review our [code of conduct](CODE_OF_CONDUCT.md)**\n\n### Getting Started\n\nThis repository uses the task runner cargo-make to manage its build scripts and CI. To install cargo-make, run the following command:\n\n```bash\ncargo install --version 0.36.13 cargo-make\n```\n\nAlso verify that openssl is install on your machine.\n\n[coverage-badge]: https://codecov.io/github/stacks-network/sbtc/branch/main/graph/badge.svg?token=2sbE9YLwT6\n[coverage-link]: https://codecov.io/github/stacks-network/sbtc\n[discord-badge]: https://img.shields.io/static/v1?logo=discord&label=discord&message=Join&color=blue\n[discord-link]: https://discord.gg/WPWZPppr\n[mit-license-badge]: https://img.shields.io/badge/License-MIT-yellow.svg\n[mit-license-link]: https://opensource.org/licenses/MIT\n[daily-workflow-badge]: https://github.com/stacks-network/sbtc/actions/workflows/daily.yml/badge.svg\n[daily-workflow-link]: https://github.com/stacks-network/sbtc/actions/workflows/daily.yml\n"
        },
        {
          "name": "creds.json",
          "type": "blob",
          "size": 0,
          "content": ""
        },
        {
          "name": "devenv",
          "type": "tree",
          "content": null
        },
        {
          "name": "romeo",
          "type": "tree",
          "content": null
        },
        {
          "name": "rustfmt.toml",
          "type": "blob",
          "size": 0.25390625,
          "content": "group_imports = \"StdExternalCrate\"\nimports_granularity = \"Crate\"\nformat_code_in_doc_comments = true\nhard_tabs = true\nmax_width = 80\nnewline_style = \"Unix\"\nnormalize_comments = true\nreorder_impl_items = true\nuse_field_init_shorthand = true\nwrap_comments = true\n"
        },
        {
          "name": "sbtc-cli",
          "type": "tree",
          "content": null
        },
        {
          "name": "sbtc-core",
          "type": "tree",
          "content": null
        },
        {
          "name": "stacks-core",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}