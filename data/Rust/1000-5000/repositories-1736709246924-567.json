{
  "metadata": {
    "timestamp": 1736709246924,
    "page": 567,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjU3MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "kyren/piccolo",
      "stars": 1767,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".circleci",
          "type": "tree",
          "content": null
        },
        {
          "name": ".envrc",
          "type": "blob",
          "size": 0.009765625,
          "content": "use flake\n"
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.06640625,
          "content": "/target/\n**/*.rs.bk\n**/*.sw?\n.DS_Store\n.#*\n.dir-locals.el\n/.direnv/\n"
        },
        {
          "name": ".gitmodules",
          "type": "blob",
          "size": 0.083984375,
          "content": "[submodule \"tests/parsing\"]\n\tpath = tests/parsing\n\turl = https://github.com/lua/tests\n"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 5.0673828125,
          "content": "## [0.3.3]\n* Bugfix to not reset live threads held in upvalues of dead threads.\n\n## [0.3.2]\n\n* Bugfix for tail-calling uncallable values. Fixes internal panics.\n* Major bugfix for finalization, make sure to transition the collector\n  immediately to `Collecting` after finalization is done. Fixes lost `Thread`\n  finalization and unclosed upvalues.\n* Make the `type` builtin match PUC-Rio Lua by @Jengamon.\n* Fix Lua stack corruption during tail calls with less arguments than expected.\n* Make function statements act like local / upvalue assignment when appropriate.\n* Fix `math.random` and `math.log` to better match PUC-Rio Lua by @Jengamon.\n* Fix `select` to better match PUC-Rio Lua by @Jengamon.\n* Implement `math.randomseed` by @Jengamon.\n* Let `__index` and `__newindex` chain through `UserData` in addition to\n  `Table`.\n* Implement \"dead keys\" to make table iteration behavior match PUC-Rio Lua.\n* Implement `gc_arena::Collect` for `piccolo_util::UserDataMethods` and\n  `piccolo_util::StaticUserDataMethods`.\n* Implement `string.sub`, `string.lower`, `string.upper`, `string.reverse` by\n  @Jengamon.\n* Better match PUC-Rio Lua behavior with longstring newlines.\n\n## [0.3.1]\n\nSmall fixups from 0.3\n\n* Actually export `ExecutorInner`\n* Add a missing `#[doc(hidden)]` around an internal macro.\n\n## [0.3]\n\nHuge release! Much safer `Executor` API that no longer requires recursion\nfrom Rust -> Lua -> Rust for Rust callbacks to call Lua functions, eliminating\nproblems with unrestricted Rust stack usage. The `Executor` API also has a\nbunch more weird powers that other implementations of Lua can't have, like \"tail\nresuming\" other coroutines and \"tail yield\".\n\nThere is a new `piccolo-util` crate that adds support for some very common use\ncases that are not trivial to do in `piccolo` proper:\n\n* Serde support for convenient conversion between Rust types and Lua tables.\n* \"Freeze\" system to safely support the common case where you need to pass\n  a non-'static (and non-'gc) value into Lua. Not specific to piccolo, it is\n  actually a general way of safely erasing a single lifetime parameter from a\n  type (and replacing it with a runtime check).\n* Super quick and simple way to wrap Rust types into a Lua userdata with\n  methods.\n\n`piccolo-util` will always be an **optional** dependency, and it may contain\ncode that is more opinionated or limited than vanilla `piccolo` should be.\n`piccolo-util` will have opionions about things, and those opinions may be\ndifferent than yours... if it is in your way or incomplete for your use, you can\nalways use it as a starting point for something better.\n\nAlso includes a lot of quality of life API improvements, error message\nimprovements, and more!\n\n- New `Executor` API that enables safe thread recursion and \"tail resume\" /\n  \"tail yield\".\n- New `piccolo-util` crate with very commonly requested, useful features that\n  are too opinionated or limited to belong in `piccolo` proper.\n- API changes to `Stack` to support a single, unified thread stack shared\n  between Lua and callbacks, similar to PUC-Rio Lua et al.\n- Upvalues no longer keep entire threads alive and instead use new gc-arena\n  finalization support to become closed when threads are garbage collected.\n- `IntoMultiValue` / `FromMultiValue` conversion for tuples now allows every\n  element to be multi-converted rather than just the last element.\n- Support the `__eq` metamethod.\n- Error message improvements in lexer / parser errors (they now have line\n  numbers at least!).\n- API changes to second callback parameter, now an `Execution` type with `Fuel`\n  access *and* also calling thread information.\n- Add \"chunk name\" information to compiled chunks for future use in runtime\n  errors / tracebacks.\n- Simplified `ctx` access, most methods are now directly implemented on `Context`.\n- Lots of type renames for clarity, `AnyCallback` -> `Callback`, `AnyUserData`\n  -> `UserData`, `AnyValue` -> `Any`, and others.\n- Add line number annotations to opcodes for future tracebacks.\n- Clean up general ptr handling and allow the user to access internal `Gc`\n  pointers in all cases, allows for weak pointers to all pointer types.\n\n## [0.2]\n- Allow `Thread` to be forcibly reset to a stopped state.\n- Improve the `Table` API, add functions that skip `IntoValue` conversion and\n  simplify `Table::next`.\n- Support `__newindex`.\n- Auto conversion improvements, add a `Variadic` wrapper type to indicate\n  variadic multi-values instead of bare arrays.\n- Add `Function::compose` and `Function::bind` for easier generic function\n  handling from Rust.\n- Completely track used memory within interpreter instances. Tracks both\n  `gc-arena` allocated `Gc` pointers as well as all normal heap allocations\n  using `gc-arena` external allocation tracking.\n- `Fuel` system to limit the execution time of Lua code.\n- Properly handle `...` in table constructors.\n- Implement `table.select('#')`, `table.pack`, and `table.unpack`.\n- Fix local function declarations to be visible in their own function body.\n- Guard against arbitrary recursion depth of callbacks (only ever a risk for\n  Threads calling callbacks on *other* Threads, aka Lua coroutines).\n\n## [0.1.1]\n- Initial crates.io release\n"
        },
        {
          "name": "COMPATIBILITY.md",
          "type": "blob",
          "size": 27.8720703125,
          "content": "- ‚ö´Ô∏èÔ∏è = unimplemented\n- üü° = differing\n- üîµ = implemented\n- ‚ùó= will not implement\n- ü§∑‚Äç‚ôÄÔ∏è = low importance\n\n\"Implemented\" means \"near 1:1 PUC-Lua behavior\"[^0].\n\n\"Differing\" means that there is an implementation, but it doesn't correspond to PUC-Lua behavior.\n\n\"Unimplemented\" means there is no implementation (when used, `nil` is found) _or_\nthat calling the implementation with the corresponding arguments will error where in PUC-Lua it does not.\n\n\"Will Not Implement\" is for functions that will not be implemented due to a fundamental difference between piccolo and PUC-Lua.\n\n\"Low Importance\" is for things that, while technically implementable, will\nlikely not be implemented due to differences between piccolo and PUC-Lua.\n\n**NOTE**: `(a[, b, c])` corresponds to the Lua docs' `(a[, b[, c]])` usage.\n\n## Base\n\n| Status | Function                                                       | Differences                                                                                                                            | Notes |\n| ------ | -------------------------------------------------------------- | -------------------------------------------------------------------------------------------------------------------------------------- | ----- |\n| üîµ     | `assert(v[, message])`                                         |                                                                                                                                        |       |\n| üîµ     | `collectgarbage(\"count\")`                                      |                                                                                                                                        |       |\n| ‚ö´Ô∏è    | `collectgarbage(\"collect\")`                                    |                                                                                                                                        |       |\n| ‚ö´Ô∏è    | `collectgarbage(\"stop\")`                                       |                                                                                                                                        |       |\n| ‚ö´Ô∏è    | `collectgarbage(\"restart\")`                                    |                                                                                                                                        |       |\n| ‚ö´Ô∏è    | `collectgarbage(\"step\"[, memkb])`                              |                                                                                                                                        |       |\n| ‚ö´Ô∏è    | `collectgarbage(\"isrunning\")`                                  |                                                                                                                                        |       |\n| ü§∑‚Äç‚ôÄÔ∏è     | `collectgarbage(\"incremental\"[, gcpause, stepmult, stepsize])` |                                                                                                                                        |       |\n| ü§∑‚Äç‚ôÄÔ∏è     | `collectgarbage(\"generational\"[, minormult, majormult])`       |                                                                                                                                        |       |\n| ‚ö´Ô∏è    | `dofile([filename])`                                           |                                                                                                                                        |       |\n| üü°     | `error(message)`                                               | Due to `level` not being implemented for, all calls here give the same result as PUC-Lua `error(message, 0)` (or any invalid `level`). |       |\n| ‚ö´Ô∏è    | `error(message, level)`                                        |                                                                                                                                        |       |\n| ‚ö´Ô∏è    | `_G` (value)                                                   |                                                                                                                                        |       |\n| üîµ     | `getmetatable(object)`                                         |                                                                                                                                        |       |\n| üü°     | `ipairs(t)`                                                    | PUC-Lua returns `iter, table, 0`, where as piccolo returns `iter, table`.                                                              |       |\n| ‚ö´Ô∏è    | `load(chunk[, chunkname, mode, env])`                          |                                                                                                                                        |       |\n| ‚ö´Ô∏è    | `loadfile([filename, mode, env])`                              |                                                                                                                                        |       |\n| üîµ     | `next(table [, index])`                                        |                                                                                                                                        |       |\n| üü°     | `pairs(t)`                                                     | By default, PUC-Lua return `iter, table, nil` where as piccolo returns `iter, table`. Also how `__pairs` works differs[^1]             |       |\n| üîµ     | `pcall(f, args...)`                                            |                                                                                                                                        |       |\n| üîµ     | `print(args...)`                                               |                                                                                                                                        |       |\n| ‚ö´Ô∏è    | `rawequal(v1, v2)`                                             |                                                                                                                                        |       |\n| üîµ     | `rawget(table, index)`                                         |                                                                                                                                        |       |\n| üîµ    | `rawlen(v)`                                                    |                                                                                                                                        |       |\n| üîµ     | `rawset(table, index, value)`                                  |                                                                                                                                        |       |\n| üîµ     | `select(index, args...)`                                       |                                                                                                                                        |       |\n| üîµ     | `setmetatable(table, metatable)`                               |                                                                                                                                        |       |\n| üîµ    | `tonumber(e[, base])`                                          |                                                                                                                                        |       |\n| üü°     | `tostring(v)`                                                  | piccolo does not use the metatable field `__name` by default, while PUC-Lua does.                                                      |       |\n| üîµ     | `type(v)`                                                      |                                                                                                                                        |       |\n| üîµ    | `_VERSION` (value)                                             |                                                                                                                                        |       |\n| ‚ö´Ô∏è    | `warn(msg, args...)`                                           |                                                                                                                                        |       |\n| ‚ö´Ô∏è    | `xpcall(f, msgh, args...)`                                     |                                                                                                                                        |       |\n\n[^1]:\n    Given the code below, calling `pairs(t)`, PUC-Lua returns `1, 2, 3`, while piccolo returns `1, 2, 3, 4`. The documentation from PUC-Lua does state that `pairs(t)` \"\\[where] `t` has a metamethod `__pairs`, calls it with `t` as argument and returns the first three results from the call.\"\n\n    ```lua\n    t = {}\n    tm = {}\n    function tm:__pairs()\n    \treturn 1, 2, 3, 4\n    end\n    setmetatable(t, tm)\n    ```\n\n[^0]: Hedging b/c I don't know PUC-Lua like my reverse palm, and there might be differing behaviors if you poke both implementations to death, but that's not what this document is for.\n\n## Coroutine\n\n| Status | Function                | Differences | Notes |\n| ------ | ----------------------- | ----------- | ----- |\n| ‚ö´Ô∏èÔ∏è   | `close(co)`             |             |       |\n| üîµ     | `create(f)`             |             |       |\n| ‚ö´Ô∏èÔ∏è   | `isyieldable([co])`     |             |       |\n| üîµ     | `resume(co[, vals...])` |             |       |\n| üîµ     | `running()`             |             |       |\n| üîµ     | `status(co)`            |             |       |\n| ‚ö´Ô∏èÔ∏è   | `wrap(f)`               |             |       |\n| üîµ     | `yield(args...)`        |             |       |\n\n## Package\n\n| Status | Function                             | Differences                                                                                     | Notes |\n| ------ | ------------------------------------ | ----------------------------------------------------------------------------------------------- | ----- |\n| ‚ö´Ô∏èÔ∏è   | (global) `require(modname)`          |                                                                                                 |       |\n| ‚ö´Ô∏èÔ∏è   | `config` (value)                     |                                                                                                 |       |\n| ‚ùó     | `cpath` (value)                      |                                                                                                 |       |\n| ‚ö´Ô∏èÔ∏è   | `loaded` (value)                     |                                                                                                 |       |\n| ‚ùó     | `loadlib(libname, funcname)`         |                                                                                                 |       |\n| ‚ö´Ô∏èÔ∏è   | `path` (value)                       |                                                                                                 |       |\n| ‚ö´Ô∏èÔ∏è   | `preload` (value)                    |                                                                                                 |       |\n| ‚ö´Ô∏èÔ∏è   | `searchers` (value)                  | This implementation will _definitely_ differ from PUC-Lua as piccolo does not support C loaders |       |\n| ‚ö´Ô∏èÔ∏è   | `searchpath(name, path[, sep, rep])` |                                                                                                 |       |\n\n## String\n\n| Status | Function                          | Differences | Notes |\n| ------ | --------------------------------- | ----------- | ----- |\n| ‚ö´Ô∏èÔ∏è   | `byte(s[, i, j])`                 |             |       |\n| ‚ö´Ô∏èÔ∏è   | `char(args...)`                   |             |       |\n| ‚ö´Ô∏èÔ∏è   | `dump(function[, strip])`         |             |       |\n| ‚ö´Ô∏èÔ∏è   | `find(s, pattern[, init, plain])` |             |       |\n| ‚ö´Ô∏èÔ∏è   | `format(formatstring, args...)`   |             |       |\n| ‚ö´Ô∏èÔ∏è   | `gmatch(s, pattern[, init])`      |             |       |\n| ‚ö´Ô∏èÔ∏è   | `gsub(s, pattern, repl[, n])`     |             |       |\n| üîµ     | `len(s)`                          |             |       |\n| üîµ   | `lower(s)`                        |             |       |\n| ‚ö´Ô∏èÔ∏è   | `match(s, pattern[, init])`       |             |       |\n| ‚ö´Ô∏èÔ∏è   | `pack(fmt, values...)`            |             |       |\n| ‚ö´Ô∏èÔ∏è   | `packsize(fmt)`                   |             |       |\n| ‚ö´Ô∏èÔ∏è   | `rep(s, n[, sep])`                |             |       |\n| üîµ   | `reverse(s)`                      |             |       |\n| üîµ   | `sub(s, i[, j])`                  |             |       |\n| ‚ö´Ô∏èÔ∏è   | `unpack(fmt, s[, pos])`           |             |       |\n| üîµ   | `upper(s)`                        |             |       |\n\n## UTF8\n\n| Status | Function                     | Differences | Notes |\n| ------ | ---------------------------- | ----------- | ----- |\n| ‚ö´Ô∏èÔ∏è   | `char(args..)`               |             |       |\n| ‚ö´Ô∏èÔ∏è   | `charpattern` (value)        |             |       |\n| ‚ö´Ô∏èÔ∏è   | `codes(s[, lax])`            |             |       |\n| ‚ö´Ô∏èÔ∏è   | `codepoints(s[, i, j, lax])` |             |       |\n| ‚ö´Ô∏èÔ∏è   | `len(s[, i, j, lax])`        |             |       |\n| ‚ö´Ô∏èÔ∏è   | `offset(s, n[, i])`          |             |       |\n\n## Table\n\n| Status | Function                     | Differences | Notes |\n| ------ | ---------------------------- | ----------- | ----- |\n| üîµ     | `concat(list[, sep, i, j])`  |             | Supports the `__concat` metamethod |\n| üîµ     | `insert(list, [pos,] value)` |             |       |\n| üîµ     | `move(a1, f, e, t[, a2])`    |             | Currently implemented with a Lua polyfill |\n| üîµ     | `pack(args...)`              |             |       |\n| üîµ     | `remove(list[, pos])`        |             |       |\n| üîµ     | `sort(list[, comp])`         |             | Currently implemented with a Lua polyfill using a simple merge sort, rather than PUC-Rio Lua's quicksort impl |\n| üîµ     | `unpack(list[, i, j])`       |             |       |\n\n## Math\n\nI'm not going over these with a fine-tooth comb, if it exists (and takes the specified number of arguments), it's considered implemented. (Except for \"basic\" identities like $\\cos(0) = 1$ and stuff like that.)\n\n| Status | Function             | Differences | Notes |\n| ------ | -------------------- | ----------- | ----- |\n| üîµ     | `abs(x)`             |             |       |\n| üîµ     | `acos(x)`            |             |       |\n| üîµ     | `asin(x)`            |             |       |\n| üîµ     | `atan(y[, x])`       |             |       |\n| üîµ     | `ceil(x)`            |             |       |\n| üîµ     | `cos(x)`             |             |       |\n| üîµ     | `deg(x)`             |             |       |\n| üîµ     | `exp(x)`             |             |       |\n| üîµ     | `floor(x)`           |             |       |\n| üîµ     | `fmod(x, y)`         |             |       |\n| üîµ     | `huge` (value)       |             |       |\n| üîµ     | `log(x[, base])`     |             |       |\n| üîµ     | `max(x, args...)`    |             |       |\n| üîµ     | `maxinteger` (value) |             |       |\n| üîµ     | `min(x, args...)`    |             |       |\n| üîµ     | `mininteger` (value) |             |       |\n| üîµ     | `modf(x)`            |             |       |\n| üîµ     | `pi` (value)         |             |       |\n| üîµ     | `rad(x)`             |             |       |\n| üîµ     | `random([m, n])`     |             |       |\n| üîµ     | `randomseed([x, y])` |             |       |\n| üîµ     | `sin(x)`             |             |       |\n| üîµ     | `sqrt(x)`            |             |       |\n| üîµ     | `tan(x)`             |             |       |\n| üîµ     | `tointeger(x)`       |             |       |\n| üîµ     | `type(x)`            |             |       |\n| üîµ     | `ult(m, n)`          |             |       |\n\n## I/O\n\nI see a module in the code repo that is labelled the IO library, but it only creates the `print` global, which is not the IO module (as understood from the Lua Manual).\n\n| Status | Function                      | Differences                                                                                                                 | Notes |\n| ------ | ----------------------------- | --------------------------------------------------------------------------------------------------------------------------- | ----- |\n| ‚ö´Ô∏è    | `close([file])`               |                                                                                                                             |       |\n| ‚ö´Ô∏è    | `flush()`                     |                                                                                                                             |       |\n| ‚ö´Ô∏è    | `input([file])`               |                                                                                                                             |       |\n| ‚ö´Ô∏è    | `lines([filename, args...])`  |                                                                                                                             |       |\n| ‚ö´Ô∏è    | `open(filename [, mode])`     |                                                                                                                             |       |\n|        | `output([file])`              |                                                                                                                             |       |\n| ‚ö´Ô∏è/‚ùó | `popen(prog[, mode])`         | Might be classifiable as \"C weirdness\" or it's just creating another process which kinda feels as icky as the OS module imo |       |\n| ‚ö´Ô∏è    | `read(args...)`               |                                                                                                                             |       |\n| ‚ö´Ô∏è    | `tmpfile()`                   |                                                                                                                             |       |\n| ‚ö´Ô∏è    | `type(obj)`                   |                                                                                                                             |       |\n| ‚ö´Ô∏è    | `write(args...)`              |                                                                                                                             |       |\n| ‚ö´Ô∏è    | `file:close()`                |                                                                                                                             |       |\n| ‚ö´Ô∏è    | `file:flush()`                |                                                                                                                             |       |\n| ‚ö´Ô∏è    | `file:lines(args...)`         |                                                                                                                             |       |\n| ‚ö´Ô∏è    | `file:read(args...)`          |                                                                                                                             |       |\n| ‚ö´Ô∏è    | `file:seek([whence, offset])` |                                                                                                                             |       |\n| ‚ö´Ô∏è    | `file:setvbuf(mode[, size])`  |                                                                                                                             |       |\n| ‚ö´Ô∏è    | `file:write(args...)`         |                                                                                                                             |       |\n\n## OS\n\nIMO this module is best in its current state, but I cannot stop one from downloading the individual pixels of Henry Cavill's side profile, so...\n\n| Status | Function                        | Differences                                                                                                                                                                                | Notes |\n| ------ | ------------------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ | ----- |\n| ‚ö´Ô∏è    | `clock()`                       |                                                                                                                                                                                            |       |\n| ‚ö´Ô∏è    | `date([format, time])`          |                                                                                                                                                                                            |       |\n| ‚ö´Ô∏è    | `difftime(t2, t1)`              |                                                                                                                                                                                            |       |\n| ‚ùó     | `execute([command])`            | Because PUC-Lua requires this to be isomorphic to ISO C `system`, I can simply put this under C weirdness!                                                                                 |       |\n| ‚ö´Ô∏è    | `exit([code, close])`           | Probably a‚ùó, but I cannae tell you want to do                                                                                                                                             |       |\n| ‚ö´Ô∏è    | `getenv(varname)`               | ...what is this a shell script?                                                                                                                                                            |       |\n| ‚ö´Ô∏è    | `remove(filename)`              |                                                                                                                                                                                            |       |\n| ‚ö´Ô∏è    | `rename(oldname, newname)`      |                                                                                                                                                                                            |       |\n| ‚ùó     | `setlocale(locale[, category])` | This is _explictly_ not going to be implemented according to the README, along with its C weirdness brethren, I just have problems with the rest of this module. _Personnel_ problems \\\\s. |       |\n| ‚ö´Ô∏è    | `time([table])`                 |                                                                                                                                                                                            |       |\n| ‚ö´Ô∏è    | `tmpname()`                     |                                                                                                                                                                                            |       |\n\n## Debug\n\nAs stated on the repository main page, this library for the most part is not\nimplemented nor are there plans to implement due to differences between the implementations. This sections is mostly so that people might get an idea of what _is_ implemented, and what is theoretically _possible_ to implement.\n\n| Status | Function                                  | Implementation Notes / Differences                                                                                                                                                                        | Notes |\n| ------ | ----------------------------------------- | --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | ----- |\n| ‚ö´Ô∏è    | `debug()`                                 |                                                                                                                                                                                                           |       |\n| ‚ùó     | `gethook([thread])`                       |                                                                                                                                                                                                           |       |\n| ‚ö´Ô∏è    | `getinfo([thread, ]f[, what])`            |                                                                                                                                                                                                           |       |\n| ‚ö´Ô∏è    | `getlocal([thread, ]f, local)`            |                                                                                                                                                                                                           |       |\n| ‚ö´Ô∏è    | `getmetatable(value)`                     |                                                                                                                                                                                                           |       |\n| ‚ö´Ô∏è    | `getregistry()`                           |                                                                                                                                                                                                           |       |\n| ‚ö´Ô∏è    | `getupvalue(f, up)`                       |                                                                                                                                                                                                           |       |\n| ‚ö´Ô∏è    | `getuservalue(u, n)`                      |                                                                                                                                                                                                           |       |\n| ‚ùó     | `sethook([thread, ] hook, mask[, count])` |                                                                                                                                                                                                           |       |\n| ‚ö´Ô∏è    | `setlocal([thread, ]level, local, value)` |                                                                                                                                                                                                           |       |\n| ‚ö´Ô∏è    | `setmetatable(value, table)`              | Interesting thing to note is that this is _not_ the base library `setmetatable`, as `debug.setmetatable`'s first argument accepts any Lua value, while `setmetatable`'s first argument _must_ be a table. |       |\n| ‚ö´Ô∏è    | `setupvalue(f, up, value)`                |                                                                                                                                                                                                           |       |\n| ‚ö´Ô∏è    | `setuservalue(udata, value, n)`           |                                                                                                                                                                                                           |       |\n| ‚ö´Ô∏è    | `traceback([thread,][message, level])`    |                                                                                                                                                                                                           |       |\n| ‚ö´Ô∏è    | `upvalueid(f, n)`                         |                                                                                                                                                                                                           |       |\n| ‚ö´Ô∏è    | `upvaluejoin(f1, n1, f2, n2)`             |                                                                                                                                                                                                           |       |\n"
        },
        {
          "name": "Cargo.lock",
          "type": "blob",
          "size": 15.658203125,
          "content": "# This file is automatically @generated by Cargo.\n# It is not intended for manual editing.\nversion = 3\n\n[[package]]\nname = \"ahash\"\nversion = \"0.8.11\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e89da841a80418a9b391ebaea17f5c112ffaaa96f621d2c285b5174da76b9011\"\ndependencies = [\n \"cfg-if\",\n \"getrandom\",\n \"once_cell\",\n \"version_check\",\n \"zerocopy\",\n]\n\n[[package]]\nname = \"allocator-api2\"\nversion = \"0.2.18\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"5c6cb57a04249c6480766f7f7cef5467412af1490f8d1e243141daddada3264f\"\n\n[[package]]\nname = \"anstream\"\nversion = \"0.6.14\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"418c75fa768af9c03be99d17643f93f79bbba589895012a80e3452a19ddda15b\"\ndependencies = [\n \"anstyle\",\n \"anstyle-parse\",\n \"anstyle-query\",\n \"anstyle-wincon\",\n \"colorchoice\",\n \"is_terminal_polyfill\",\n \"utf8parse\",\n]\n\n[[package]]\nname = \"anstyle\"\nversion = \"1.0.7\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"038dfcf04a5feb68e9c60b21c9625a54c2c0616e79b72b0fd87075a056ae1d1b\"\n\n[[package]]\nname = \"anstyle-parse\"\nversion = \"0.2.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"c03a11a9034d92058ceb6ee011ce58af4a9bf61491aa7e1e59ecd24bd40d22d4\"\ndependencies = [\n \"utf8parse\",\n]\n\n[[package]]\nname = \"anstyle-query\"\nversion = \"1.1.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ad186efb764318d35165f1758e7dcef3b10628e26d41a44bc5550652e6804391\"\ndependencies = [\n \"windows-sys\",\n]\n\n[[package]]\nname = \"anstyle-wincon\"\nversion = \"3.0.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"61a38449feb7068f52bb06c12759005cf459ee52bb4adc1d5a7c4322d716fb19\"\ndependencies = [\n \"anstyle\",\n \"windows-sys\",\n]\n\n[[package]]\nname = \"anyhow\"\nversion = \"1.0.86\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b3d1d046238990b9cf5bcde22a3fb3584ee5cf65fb2765f454ed428c7a0063da\"\n\n[[package]]\nname = \"bitflags\"\nversion = \"2.6.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b048fb63fd8b5923fc5aa7b340d8e156aec7ec02f0c78fa8a6ddc2613f6f71de\"\n\n[[package]]\nname = \"cfg-if\"\nversion = \"1.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"baf1de4339761588bc0619e3cbc0120ee582ebb74b53b4efbf79117bd2da40fd\"\n\n[[package]]\nname = \"cfg_aliases\"\nversion = \"0.1.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"fd16c4719339c4530435d38e511904438d07cce7950afa3718a84ac36c10e89e\"\n\n[[package]]\nname = \"clap\"\nversion = \"4.5.8\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"84b3edb18336f4df585bc9aa31dd99c036dfa5dc5e9a2939a722a188f3a8970d\"\ndependencies = [\n \"clap_builder\",\n]\n\n[[package]]\nname = \"clap_builder\"\nversion = \"4.5.8\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"c1c09dd5ada6c6c78075d6fd0da3f90d8080651e2d6cc8eb2f1aaa4034ced708\"\ndependencies = [\n \"anstream\",\n \"anstyle\",\n \"clap_lex\",\n \"strsim\",\n]\n\n[[package]]\nname = \"clap_lex\"\nversion = \"0.7.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"4b82cf0babdbd58558212896d1a4272303a57bdb245c2bf1147185fb45640e70\"\n\n[[package]]\nname = \"clipboard-win\"\nversion = \"5.3.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"79f4473f5144e20d9aceaf2972478f06ddf687831eafeeb434fbaf0acc4144ad\"\ndependencies = [\n \"error-code\",\n]\n\n[[package]]\nname = \"colorchoice\"\nversion = \"1.0.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"0b6a852b24ab71dffc585bcb46eaf7959d175cb865a7152e35b348d1b2960422\"\n\n[[package]]\nname = \"endian-type\"\nversion = \"0.1.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"c34f04666d835ff5d62e058c3995147c06f42fe86ff053337632bca83e42702d\"\n\n[[package]]\nname = \"errno\"\nversion = \"0.3.9\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"534c5cf6194dfab3db3242765c03bbe257cf92f22b38f6bc0c58d59108a820ba\"\ndependencies = [\n \"libc\",\n \"windows-sys\",\n]\n\n[[package]]\nname = \"error-code\"\nversion = \"3.2.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a0474425d51df81997e2f90a21591180b38eccf27292d755f3e30750225c175b\"\n\n[[package]]\nname = \"fd-lock\"\nversion = \"4.0.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"7e5768da2206272c81ef0b5e951a41862938a6070da63bcea197899942d3b947\"\ndependencies = [\n \"cfg-if\",\n \"rustix\",\n \"windows-sys\",\n]\n\n[[package]]\nname = \"gc-arena\"\nversion = \"0.5.3\"\nsource = \"git+https://github.com/kyren/gc-arena?rev=5a7534b883b703f23cfb8c3cfdf033460aa77ea9#5a7534b883b703f23cfb8c3cfdf033460aa77ea9\"\ndependencies = [\n \"allocator-api2\",\n \"gc-arena-derive\",\n \"hashbrown\",\n \"sptr\",\n]\n\n[[package]]\nname = \"gc-arena-derive\"\nversion = \"0.5.3\"\nsource = \"git+https://github.com/kyren/gc-arena?rev=5a7534b883b703f23cfb8c3cfdf033460aa77ea9#5a7534b883b703f23cfb8c3cfdf033460aa77ea9\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn\",\n \"synstructure\",\n]\n\n[[package]]\nname = \"getrandom\"\nversion = \"0.2.15\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"c4567c8db10ae91089c99af84c68c38da3ec2f087c3f82960bcdbf3656b6f4d7\"\ndependencies = [\n \"cfg-if\",\n \"libc\",\n \"wasi\",\n]\n\n[[package]]\nname = \"hashbrown\"\nversion = \"0.14.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e5274423e17b7c9fc20b6e7e208532f9b19825d82dfd615708b70edd83df41f1\"\ndependencies = [\n \"ahash\",\n \"allocator-api2\",\n]\n\n[[package]]\nname = \"home\"\nversion = \"0.5.9\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e3d1354bf6b7235cb4a0576c2619fd4ed18183f689b12b006a0ee7329eeff9a5\"\ndependencies = [\n \"windows-sys\",\n]\n\n[[package]]\nname = \"is_terminal_polyfill\"\nversion = \"1.70.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f8478577c03552c21db0e2724ffb8986a5ce7af88107e6be5d2ee6e158c12800\"\n\n[[package]]\nname = \"libc\"\nversion = \"0.2.155\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"97b3888a4aecf77e811145cadf6eef5901f4782c53886191b2f693f24761847c\"\n\n[[package]]\nname = \"linux-raw-sys\"\nversion = \"0.4.14\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"78b3ae25bc7c8c38cec158d1f2757ee79e9b3740fbc7ccf0e59e4b08d793fa89\"\n\n[[package]]\nname = \"log\"\nversion = \"0.4.22\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a7a70ba024b9dc04c27ea2f0c0548feb474ec5c54bba33a7f72f873a39d07b24\"\n\n[[package]]\nname = \"memchr\"\nversion = \"2.7.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"78ca9ab1a0babb1e7d5695e3530886289c18cf2f87ec19a575a0abdce112e3a3\"\n\n[[package]]\nname = \"nibble_vec\"\nversion = \"0.1.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"77a5d83df9f36fe23f0c3648c6bbb8b0298bb5f1939c8f2704431371f4b84d43\"\ndependencies = [\n \"smallvec\",\n]\n\n[[package]]\nname = \"nix\"\nversion = \"0.28.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ab2156c4fce2f8df6c499cc1c763e4394b7482525bf2a9701c9d79d215f519e4\"\ndependencies = [\n \"bitflags\",\n \"cfg-if\",\n \"cfg_aliases\",\n \"libc\",\n]\n\n[[package]]\nname = \"once_cell\"\nversion = \"1.19.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3fdb12b2476b595f9358c5161aa467c2438859caa136dec86c26fdd2efe17b92\"\n\n[[package]]\nname = \"piccolo\"\nversion = \"0.3.3\"\ndependencies = [\n \"ahash\",\n \"allocator-api2\",\n \"anyhow\",\n \"clap\",\n \"gc-arena\",\n \"hashbrown\",\n \"rand\",\n \"rustyline\",\n \"thiserror\",\n]\n\n[[package]]\nname = \"piccolo-util\"\nversion = \"0.3.3\"\ndependencies = [\n \"gc-arena\",\n \"piccolo\",\n \"serde\",\n \"thiserror\",\n]\n\n[[package]]\nname = \"ppv-lite86\"\nversion = \"0.2.17\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"5b40af805b3121feab8a3c29f04d8ad262fa8e0561883e7653e024ae4479e6de\"\n\n[[package]]\nname = \"proc-macro2\"\nversion = \"1.0.86\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"5e719e8df665df0d1c8fbfd238015744736151d4445ec0836b8e628aae103b77\"\ndependencies = [\n \"unicode-ident\",\n]\n\n[[package]]\nname = \"quote\"\nversion = \"1.0.36\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"0fa76aaf39101c457836aec0ce2316dbdc3ab723cdda1c6bd4e6ad4208acaca7\"\ndependencies = [\n \"proc-macro2\",\n]\n\n[[package]]\nname = \"radix_trie\"\nversion = \"0.2.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"c069c179fcdc6a2fe24d8d18305cf085fdbd4f922c041943e203685d6a1c58fd\"\ndependencies = [\n \"endian-type\",\n \"nibble_vec\",\n]\n\n[[package]]\nname = \"rand\"\nversion = \"0.8.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"34af8d1a0e25924bc5b7c43c079c942339d8f0a8b57c39049bef581b46327404\"\ndependencies = [\n \"libc\",\n \"rand_chacha\",\n \"rand_core\",\n]\n\n[[package]]\nname = \"rand_chacha\"\nversion = \"0.3.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e6c10a63a0fa32252be49d21e7709d4d4baf8d231c2dbce1eaa8141b9b127d88\"\ndependencies = [\n \"ppv-lite86\",\n \"rand_core\",\n]\n\n[[package]]\nname = \"rand_core\"\nversion = \"0.6.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ec0be4795e2f6a28069bec0b5ff3e2ac9bafc99e6a9a7dc3547996c5c816922c\"\ndependencies = [\n \"getrandom\",\n]\n\n[[package]]\nname = \"rustix\"\nversion = \"0.38.34\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"70dc5ec042f7a43c4a73241207cecc9873a06d45debb38b329f8541d85c2730f\"\ndependencies = [\n \"bitflags\",\n \"errno\",\n \"libc\",\n \"linux-raw-sys\",\n \"windows-sys\",\n]\n\n[[package]]\nname = \"rustyline\"\nversion = \"14.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"7803e8936da37efd9b6d4478277f4b2b9bb5cdb37a113e8d63222e58da647e63\"\ndependencies = [\n \"bitflags\",\n \"cfg-if\",\n \"clipboard-win\",\n \"fd-lock\",\n \"home\",\n \"libc\",\n \"log\",\n \"memchr\",\n \"nix\",\n \"radix_trie\",\n \"unicode-segmentation\",\n \"unicode-width\",\n \"utf8parse\",\n \"windows-sys\",\n]\n\n[[package]]\nname = \"serde\"\nversion = \"1.0.203\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"7253ab4de971e72fb7be983802300c30b5a7f0c2e56fab8abfc6a214307c0094\"\ndependencies = [\n \"serde_derive\",\n]\n\n[[package]]\nname = \"serde_derive\"\nversion = \"1.0.203\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"500cbc0ebeb6f46627f50f3f5811ccf6bf00643be300b4c3eabc0ef55dc5b5ba\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn\",\n]\n\n[[package]]\nname = \"smallvec\"\nversion = \"1.13.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3c5e1a9a646d36c3599cd173a41282daf47c44583ad367b8e6837255952e5c67\"\n\n[[package]]\nname = \"sptr\"\nversion = \"0.3.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3b9b39299b249ad65f3b7e96443bad61c02ca5cd3589f46cb6d610a0fd6c0d6a\"\n\n[[package]]\nname = \"strsim\"\nversion = \"0.11.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"7da8b5736845d9f2fcb837ea5d9e2628564b3b043a70948a3f0b778838c5fb4f\"\n\n[[package]]\nname = \"syn\"\nversion = \"2.0.68\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"901fa70d88b9d6c98022e23b4136f9f3e54e4662c3bc1bd1d84a42a9a0f0c1e9\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"unicode-ident\",\n]\n\n[[package]]\nname = \"synstructure\"\nversion = \"0.13.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"c8af7666ab7b6390ab78131fb5b0fce11d6b7a6951602017c35fa82800708971\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn\",\n]\n\n[[package]]\nname = \"thiserror\"\nversion = \"1.0.61\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"c546c80d6be4bc6a00c0f01730c08df82eaa7a7a61f11d656526506112cc1709\"\ndependencies = [\n \"thiserror-impl\",\n]\n\n[[package]]\nname = \"thiserror-impl\"\nversion = \"1.0.61\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"46c3384250002a6d5af4d114f2845d37b57521033f30d5c3f46c4d70e1197533\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn\",\n]\n\n[[package]]\nname = \"unicode-ident\"\nversion = \"1.0.12\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3354b9ac3fae1ff6755cb6db53683adb661634f67557942dea4facebec0fee4b\"\n\n[[package]]\nname = \"unicode-segmentation\"\nversion = \"1.11.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d4c87d22b6e3f4a18d4d40ef354e97c90fcb14dd91d7dc0aa9d8a1172ebf7202\"\n\n[[package]]\nname = \"unicode-width\"\nversion = \"0.1.13\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"0336d538f7abc86d282a4189614dfaa90810dfc2c6f6427eaf88e16311dd225d\"\n\n[[package]]\nname = \"utf8parse\"\nversion = \"0.2.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"06abde3611657adf66d383f00b093d7faecc7fa57071cce2578660c9f1010821\"\n\n[[package]]\nname = \"version_check\"\nversion = \"0.9.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"49874b5167b65d7193b8aba1567f5c7d93d001cafc34600cee003eda787e483f\"\n\n[[package]]\nname = \"wasi\"\nversion = \"0.11.0+wasi-snapshot-preview1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"9c8d87e72b64a3b4db28d11ce29237c246188f4f51057d65a7eab63b7987e423\"\n\n[[package]]\nname = \"windows-sys\"\nversion = \"0.52.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"282be5f36a8ce781fad8c8ae18fa3f9beff57ec1b52cb3de0789201425d9a33d\"\ndependencies = [\n \"windows-targets\",\n]\n\n[[package]]\nname = \"windows-targets\"\nversion = \"0.52.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"6f0713a46559409d202e70e28227288446bf7841d3211583a4b53e3f6d96e7eb\"\ndependencies = [\n \"windows_aarch64_gnullvm\",\n \"windows_aarch64_msvc\",\n \"windows_i686_gnu\",\n \"windows_i686_gnullvm\",\n \"windows_i686_msvc\",\n \"windows_x86_64_gnu\",\n \"windows_x86_64_gnullvm\",\n \"windows_x86_64_msvc\",\n]\n\n[[package]]\nname = \"windows_aarch64_gnullvm\"\nversion = \"0.52.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"7088eed71e8b8dda258ecc8bac5fb1153c5cffaf2578fc8ff5d61e23578d3263\"\n\n[[package]]\nname = \"windows_aarch64_msvc\"\nversion = \"0.52.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"9985fd1504e250c615ca5f281c3f7a6da76213ebd5ccc9561496568a2752afb6\"\n\n[[package]]\nname = \"windows_i686_gnu\"\nversion = \"0.52.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"88ba073cf16d5372720ec942a8ccbf61626074c6d4dd2e745299726ce8b89670\"\n\n[[package]]\nname = \"windows_i686_gnullvm\"\nversion = \"0.52.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"87f4261229030a858f36b459e748ae97545d6f1ec60e5e0d6a3d32e0dc232ee9\"\n\n[[package]]\nname = \"windows_i686_msvc\"\nversion = \"0.52.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"db3c2bf3d13d5b658be73463284eaf12830ac9a26a90c717b7f771dfe97487bf\"\n\n[[package]]\nname = \"windows_x86_64_gnu\"\nversion = \"0.52.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"4e4246f76bdeff09eb48875a0fd3e2af6aada79d409d33011886d3e1581517d9\"\n\n[[package]]\nname = \"windows_x86_64_gnullvm\"\nversion = \"0.52.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"852298e482cd67c356ddd9570386e2862b5673c85bd5f88df9ab6802b334c596\"\n\n[[package]]\nname = \"windows_x86_64_msvc\"\nversion = \"0.52.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"bec47e5bfd1bff0eeaf6d8b485cc1074891a197ab4225d504cb7a1ab88b02bf0\"\n\n[[package]]\nname = \"zerocopy\"\nversion = \"0.7.34\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ae87e3fcd617500e5d106f0380cf7b77f3c6092aae37191433159dda23cfb087\"\ndependencies = [\n \"zerocopy-derive\",\n]\n\n[[package]]\nname = \"zerocopy-derive\"\nversion = \"0.7.34\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"15e934569e47891f7d9411f1a451d947a60e000ab3bd24fbb970f000387d1b3b\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn\",\n]\n"
        },
        {
          "name": "Cargo.toml",
          "type": "blob",
          "size": 1.162109375,
          "content": "[workspace]\nresolver = \"2\"\nmembers = [\n    \"util\",\n]\ndefault-members = [\n    \".\",\n    \"util\",\n]\n\n[workspace.package]\nversion = \"0.3.3\"\nedition = \"2021\"\nauthors = [\"kyren <catherine@kyju.org>\"]\nlicense = \"MIT\"\nrepository = \"https://github.com/kyren/piccolo\"\n\n[workspace.dependencies]\nahash = \"0.8\"\nallocator-api2 = \"0.2\"\nanyhow = \"1.0\"\ngc-arena = { git = \"https://github.com/kyren/gc-arena\", rev = \"5a7534b883b703f23cfb8c3cfdf033460aa77ea9\", features = [\"allocator-api2\", \"hashbrown\"] }\nhashbrown = { version = \"0.14\", features = [\"raw\"] }\nrand = { version = \"0.8\", features = [\"small_rng\"] }\nserde = \"1.0\"\nthiserror = \"1.0\"\n\npiccolo = { path = \"./\", version = \"0.3.3\" }\n\n[package]\nname = \"piccolo\"\ndescription = \"Stackless Lua VM implemented in pure Rust\"\nreadme = \"README.md\"\nversion.workspace = true\nedition.workspace = true\nauthors.workspace = true\nlicense.workspace = true\nrepository.workspace = true\n\n[dependencies]\nahash.workspace = true\nallocator-api2.workspace = true\nanyhow.workspace = true\ngc-arena.workspace = true\nhashbrown.workspace = true\nrand.workspace = true\nthiserror.workspace = true\n\n[dev-dependencies]\nclap = { version = \"4.5\", features = [\"cargo\"] }\nrustyline = \"14.0\"\n"
        },
        {
          "name": "LICENSE-CC0",
          "type": "blob",
          "size": 6.8818359375,
          "content": "Creative Commons Legal Code\n\nCC0 1.0 Universal\n\n    CREATIVE COMMONS CORPORATION IS NOT A LAW FIRM AND DOES NOT PROVIDE\n    LEGAL SERVICES. DISTRIBUTION OF THIS DOCUMENT DOES NOT CREATE AN\n    ATTORNEY-CLIENT RELATIONSHIP. CREATIVE COMMONS PROVIDES THIS\n    INFORMATION ON AN \"AS-IS\" BASIS. CREATIVE COMMONS MAKES NO WARRANTIES\n    REGARDING THE USE OF THIS DOCUMENT OR THE INFORMATION OR WORKS\n    PROVIDED HEREUNDER, AND DISCLAIMS LIABILITY FOR DAMAGES RESULTING FROM\n    THE USE OF THIS DOCUMENT OR THE INFORMATION OR WORKS PROVIDED\n    HEREUNDER.\n\nStatement of Purpose\n\nThe laws of most jurisdictions throughout the world automatically confer\nexclusive Copyright and Related Rights (defined below) upon the creator\nand subsequent owner(s) (each and all, an \"owner\") of an original work of\nauthorship and/or a database (each, a \"Work\").\n\nCertain owners wish to permanently relinquish those rights to a Work for\nthe purpose of contributing to a commons of creative, cultural and\nscientific works (\"Commons\") that the public can reliably and without fear\nof later claims of infringement build upon, modify, incorporate in other\nworks, reuse and redistribute as freely as possible in any form whatsoever\nand for any purposes, including without limitation commercial purposes.\nThese owners may contribute to the Commons to promote the ideal of a free\nculture and the further production of creative, cultural and scientific\nworks, or to gain reputation or greater distribution for their Work in\npart through the use and efforts of others.\n\nFor these and/or other purposes and motivations, and without any\nexpectation of additional consideration or compensation, the person\nassociating CC0 with a Work (the \"Affirmer\"), to the extent that he or she\nis an owner of Copyright and Related Rights in the Work, voluntarily\nelects to apply CC0 to the Work and publicly distribute the Work under its\nterms, with knowledge of his or her Copyright and Related Rights in the\nWork and the meaning and intended legal effect of CC0 on those rights.\n\n1. Copyright and Related Rights. A Work made available under CC0 may be\nprotected by copyright and related or neighboring rights (\"Copyright and\nRelated Rights\"). Copyright and Related Rights include, but are not\nlimited to, the following:\n\n  i. the right to reproduce, adapt, distribute, perform, display,\n     communicate, and translate a Work;\n ii. moral rights retained by the original author(s) and/or performer(s);\niii. publicity and privacy rights pertaining to a person's image or\n     likeness depicted in a Work;\n iv. rights protecting against unfair competition in regards to a Work,\n     subject to the limitations in paragraph 4(a), below;\n  v. rights protecting the extraction, dissemination, use and reuse of data\n     in a Work;\n vi. database rights (such as those arising under Directive 96/9/EC of the\n     European Parliament and of the Council of 11 March 1996 on the legal\n     protection of databases, and under any national implementation\n     thereof, including any amended or successor version of such\n     directive); and\nvii. other similar, equivalent or corresponding rights throughout the\n     world based on applicable law or treaty, and any national\n     implementations thereof.\n\n2. Waiver. To the greatest extent permitted by, but not in contravention\nof, applicable law, Affirmer hereby overtly, fully, permanently,\nirrevocably and unconditionally waives, abandons, and surrenders all of\nAffirmer's Copyright and Related Rights and associated claims and causes\nof action, whether now known or unknown (including existing as well as\nfuture claims and causes of action), in the Work (i) in all territories\nworldwide, (ii) for the maximum duration provided by applicable law or\ntreaty (including future time extensions), (iii) in any current or future\nmedium and for any number of copies, and (iv) for any purpose whatsoever,\nincluding without limitation commercial, advertising or promotional\npurposes (the \"Waiver\"). Affirmer makes the Waiver for the benefit of each\nmember of the public at large and to the detriment of Affirmer's heirs and\nsuccessors, fully intending that such Waiver shall not be subject to\nrevocation, rescission, cancellation, termination, or any other legal or\nequitable action to disrupt the quiet enjoyment of the Work by the public\nas contemplated by Affirmer's express Statement of Purpose.\n\n3. Public License Fallback. Should any part of the Waiver for any reason\nbe judged legally invalid or ineffective under applicable law, then the\nWaiver shall be preserved to the maximum extent permitted taking into\naccount Affirmer's express Statement of Purpose. In addition, to the\nextent the Waiver is so judged Affirmer hereby grants to each affected\nperson a royalty-free, non transferable, non sublicensable, non exclusive,\nirrevocable and unconditional license to exercise Affirmer's Copyright and\nRelated Rights in the Work (i) in all territories worldwide, (ii) for the\nmaximum duration provided by applicable law or treaty (including future\ntime extensions), (iii) in any current or future medium and for any number\nof copies, and (iv) for any purpose whatsoever, including without\nlimitation commercial, advertising or promotional purposes (the\n\"License\"). The License shall be deemed effective as of the date CC0 was\napplied by Affirmer to the Work. Should any part of the License for any\nreason be judged legally invalid or ineffective under applicable law, such\npartial invalidity or ineffectiveness shall not invalidate the remainder\nof the License, and in such case Affirmer hereby affirms that he or she\nwill not (i) exercise any of his or her remaining Copyright and Related\nRights in the Work or (ii) assert any associated claims and causes of\naction with respect to the Work, in either case contrary to Affirmer's\nexpress Statement of Purpose.\n\n4. Limitations and Disclaimers.\n\n a. No trademark or patent rights held by Affirmer are waived, abandoned,\n    surrendered, licensed or otherwise affected by this document.\n b. Affirmer offers the Work as-is and makes no representations or\n    warranties of any kind concerning the Work, express, implied,\n    statutory or otherwise, including without limitation warranties of\n    title, merchantability, fitness for a particular purpose, non\n    infringement, or the absence of latent or other defects, accuracy, or\n    the present or absence of errors, whether or not discoverable, all to\n    the greatest extent permissible under applicable law.\n c. Affirmer disclaims responsibility for clearing rights of other persons\n    that may apply to the Work or any use thereof, including without\n    limitation any person's Copyright and Related Rights in the Work.\n    Further, Affirmer disclaims responsibility for obtaining any necessary\n    consents, permissions or other rights required for any use of the\n    Work.\n d. Affirmer understands and acknowledges that Creative Commons is not a\n    party to this document and has no duty or obligation with respect to\n    this CC0 or use of the Work."
        },
        {
          "name": "LICENSE-MIT",
          "type": "blob",
          "size": 1,
          "content": "Permission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 15.341796875,
          "content": "[![crates.io](https://img.shields.io/crates/v/piccolo)](https://crates.io/crates/piccolo)\n[![docs.rs](https://docs.rs/piccolo/badge.svg)](https://docs.rs/piccolo)\n[![Build Status](https://img.shields.io/circleci/project/github/kyren/piccolo.svg)](https://circleci.com/gh/kyren/piccolo)\n[![Chat](https://img.shields.io/discord/865004050357682246)](https://discord.gg/CSJCVTvgNB)\n\n## piccolo - An experimental stackless Lua VM implemented in pure Rust\n\n**(After *four* years, now UN-paused!)**\n\nProject Goals, in roughly descending priority:\n  * Be an arguably working, useful Lua interpreter.\n  * Be an easy way to *confidently* sandbox untrusted Lua scripts.\n  * Be resilient against DoS from untrusted scripts (scripts should not be able\n    to cause the interpreter to panic or use an unbounded amount of memory and\n    should be guaranteed to return control to the caller in some bounded amount\n    of time).\n  * Be an easy way to bind Rust APIs to Lua safely, with a bindings system that is\n    resilient against weirdness and edge cases, and with user types that can\n    safely participate in runtime garbage collection.\n  * Be pragmatically compatible with some version(s) of PUC-Rio Lua.\n  * Don't be obnoxiously slow (for example, avoid abstractions that would make\n    the interpreter fundamentally slower than PUC-Rio Lua).\n\nYou read more about the design of `piccolo` (and try it out a live REPL!) in\n[this blog post](https://kyju.org/blog/piccolo-a-stackless-lua-interpreter/).\n\n## API Instability\n\nExpect *frequent* pre-1.0 API breakage, this crate is still very experimental.\nAll API incompatible changes will be accompanied by minor version bumps, but\nthese will be very common.\n\n## Safety\n\nThe goal with `piccolo` is to have the majority of it written in safe Rust.\nCurrently, there are a few sources of unsafety, but crucially these sources\nof unsafety are *isolated*. `piccolo` will avoid at all costs relying on\nabstractions which *leak* unsafety, it should always be possible to interact\nwith even low level details of `piccolo` without using `unsafe`.\n\nThe current primary sources of unsafety:\n  * The particularly weird requirements of Lua tables require using hashbrown's\n    low level RawTable API.\n  * Userdata requires unsafety to allow for downcasting non-'static userdata\n    with a safe interface.\n  * The implementation of async `Sequence`s require unsafety to \"tunnel\" the\n    normal `Sequence` method parameters into the future (this is completely\n    hidden from the user behind a safe interface).\n  * Unsafe code is required to avoid fat pointers in several Lua types, to keep\n    `Value` as small as possible and allow potential future smaller `Value`\n    representations.\n\n*(`piccolo` makes no attempt yet to guard against side channel attacks like\nspectre, so even if the VM is memory safe, running untrusted scripts may carry\nadditional risk. With no JIT or callback API to accurately measure time, this\nmight be practically impossible anwyay.)*\n\n## A unique system for Rust <-> GC interaction\n\n*The garbage collector system for `piccolo` is now in its [own repo](\nhttps://github.com/kyren/gc-arena), and also on crates.io. See the README in the\nlinked repo for more detail about the GC design.*\n\n`piccolo` has a real, cycle detecting, incremental garbage collector with\nzero-cost `Gc` pointers (they are machine pointer sized and implement `Copy`)\nthat are usable from safe Rust. It achieves this by combining two things:\n\n1) An unsafe `Collect` trait which allows tracing through garbage collected\n   types that, despite being unsafe, can be implemented safely using procedural\n   macros.\n2) Branding `Gc` pointers by unique, invariant \"generative\" lifetimes to ensure\n   that such pointers are isolated to a single root object, and to guarantee\n   that, outside an active call to `mutate`, all such pointers are either\n   reachable from the root object or are safe to collect.\n   \n## Stackless VM\n\nThe `mutate` based GC API means that long running calls to `mutate` can be\nproblematic. No garbage collection can take place during a call to `mutate`, so\nwe have to make sure to regularly return from the `mutate` call to allow garbage\ncollection to take place.\n\nThe VM in `piccolo` is thus written in what is sometimes called \"stackless\"\nor \"trampoline\" style. It does not rely on the rust stack for Lua -> Rust and\nRust -> Lua nesting, instead callbacks can either have some kind of immediate\nresult (return values, yield values from a coroutine, resume a thread, error),\nor they can produce a `Sequence`. A `Sequence` is a bit like a `Future` in\nthat it is a multi-step operation that the parent `Executor` will drive to\ncompletion. `Executor` will repeatedly call `Sequence::poll` until the sequence\nis complete, and the `Sequence` can yield values and call arbitrary Lua\nfunctions while it is being polled.\n\nAs an example, it is of course possible for Lua to call a Rust callback, which\nthen in turn creates a new Lua coroutine and runs it. In order to do so, a\ncallback would take a Lua function as a parameter, then create a new coroutine\n`Thread` from it and return `SequencePoll:Resume` to run it. The outer main\n`Executor` will run the created `Thread`, and when it is finished it will\n\"return\" via `Sequence::poll` (or `Sequence::error`). This is exactly how the\n`coroutine.resume` Lua stdlib function is implemented.\n\nAs another example, `pcall` is easy to implement here, a callback can call the\nprovided function with a `Sequence` underneath it, and the sequence can catch\nthe error and return the error status.\n\nYet another example, imagine Rust code calling a Lua coroutine thread which\ncalls a Rust `Sequence` which calls yet more Lua code which then yields. Our\nstack will look something like this:\n\n```\n[Rust] -> [Lua Coroutine] -> [Rust Sequence] -> [Lua code that yields]\n```\n\nThis is no problem with this VM style, the inner Rust callback is paused as a\n`Sequence`, and the inner yield will return the value all the way to the top\nlevel Rust code. When the coroutine thread is resumed and eventually returns,\nthe Rust `Sequence` will be resumed.\n\nWith any number of nested Lua threads and `Sequence`s, control will always\ncontinuously return outside the GC arena and to the outer Rust code driving\neverything. This is the \"trampoline\" here, when using this interpreter,\nsomewhere there is a loop that is continuously calling `Arena::mutate` and\n`Executor::step`, and it can stop or pause or change tasks at any time, not\nrequiring unwinding the Rust stack.\n\nThis \"stackless\" style has many benefits, it allows for concurrency patterns\nthat are difficult in some other VMs (like tasklets), and makes the VM much more\nresilient against untrusted script DoS.\n\n## Async `Sequence`s\n\nThe downside of the \"stackless\" style is that writing things as a `Sequence`\nimplementation is much more difficult than writing in normal, straight control\nflow. This is identical to the problem Rust had before proper `async` support,\nwhere it required implementing `Future` manually or using difficult to use\ncombinators. Ideally, if we could somehow implement `Collect` for the generated\nstate machine for a rust `async` block, then we could use rust `async` (or more\ndirectly, unstable Rust coroutines) to implement our `Sequence` state machines.\n\nUnfortunately, implementing a trait like this for a Rust async (coroutine) state\nmachine is not currently possible. HOWEVER, `piccolo` is currently still able to\nprovide a safe way to implement `Sequence` using async blocks by using a clever\ntrick: a shadow stack.\n\nThe `async_sequence` function can create a `Sequence` impl from an `async`\nblock, and the generated `Future` tells the outer sequence what actions to\ntake on its behalf. Since the Rust future cannot (safely) hold GC pointers\n(since it cannot possibly implement `Collect` in today's Rust), we instead\nallow it to hold proxy \"stashed\" values, and these \"stashed\" values point to\na \"shadow stack\" held inside the outer sequence which allows them to be traced\nand collected properly! We provide a `Locals` object inside async sequences\nand this is the future's \"shadow stack\"; it can be used to stash / fetch any\nGC value and any values stashed using this object are treated as owned by the\nouter `Sequence`. In this way, we end up with a Rust future that can store GC\nvalues safely, both in the sense of being sound and not leading to dangling\n`Gc` pointers, but also in a way that cannot possibly lead to things like\nuncollectable cycles. It is slightly more inconvenient than if Rust async blocks\ncould implement `Collect` directly (it requires entering and exiting the GC\ncontext manually and stashing / unstashing GC values), but it is MUCH easier\nthan manually implementing a custom `Sequence` state machine!\n\nUsing this, it is easy to write very complex Rust callbacks that can themselves\ncall into Lua or resume threads or yield values back to Lua (or simply return\ncontrol to the outermost Rust code), while also maintaining complex internal\nstate. In addition, these running callbacks are themselves *proper* garbage\ncollected values, and all of the GC values they hold will be collected if they\nare (for example) forgotten as part of a suspended Lua coroutine. Without async\nsequences, this would require writing complex state machines by hand, so this is\n*critical* for very complex uses of `piccolo`.\n\n## Executor \"fuel\" and VM memory tracking\n\nThe stackless VM style \"periodically\" returns control to the outer Rust code\ndriving everything, and how often this happens can be controlled using the\n\"fuel\" system.\n\nLua and Lua driven callback code *always* happens within some call to\n`Executor::step`. This method takes a `fuel` parameter which controls how long\nthe VM should run before pausing, with fuel measured (roughly) in units of VM\ninstructions.\n\nDifferent amounts of fuel provided to `Executor::step` bound the amount of Lua\nexecution that can occur, bounding both the CPU time used and also the amount of\nmemory allocation that can occur within a single `Executor::step` call (assuming\ncertain rules are followed w.r.t. provided callbacks).\n\nThe VM also now accurately tracks all memory allocated within its inner\n`gc-arena::Arena` using `gc-arena` memory tracking features. This can extend\nto userdata and userdata APIs, and assuming the correct rules are follwed in\nexposed userdata and callbacks, allows for accurate memory reporting and memory\nlimits.\n\n*Assuming* that both of these mechanisms work correctly, and *assuming* that all\ncallback / userdata APIs also follow the same rules, this allows for completely\nsandboxing untrusted scripts not only in memory safety and API access but also\nin CPU and RAM usage. These are big assumptions though, and `piccolo` is still\nvery much WIP, so ensuring this is done correctly is an ongoing effort.\n\n## What currently works\n\n* An actual cycle detecting, incremental GC similar to the incremental collector\n  in PUC-Rio Lua 5.3 / 5.4\n* Lua source code is compiled to a VM bytecode similar to PUC-Rio Lua's, and\n  there are a complete set of VM instructions implemented\n* Almost all of the core Lua language works. Some tricky Lua features that\n  currently actually work:\n  * Real closures with proper upvalue handling\n  * Proper tail calls\n  * Variable arguments and returns and generally proper vararg (`...`) handling\n  * Coroutines, including yielding that is transparent to Rust callbacks\n  * Gotos with label handling that matches Lua 5.3 / 5.4\n  * Proper _ENV handling\n  * Metatables and metamethods, including fully recursive metamethods that\n    trigger other metamethods (Not every metamethod is implemented yet,\n    particularly `__gc` finalizers).\n* A robust Rust callback system with sequencing callbacks that don't block\n  the interpreter and allow calling into and returning from Lua without using\n  the Rust stack, and a way to integrate Rust async so that implementing these\n  callbacks is not wildly painful.\n* Garbage collected \"userdata\" with safe downcasting.\n* Some of the stdlib (almost all of the core, fundamental parts of the stdlib\n  are implemented, e.g. things like the `coroutine` library, `pcall`, `error`,\n  most everything that exposes some fundamental runtime feature is implemented).\n* A simple REPL (try it with `cargo run --example interpreter`)\n\n## What currently doesn't work\n\n* A large amount of the stdlib is not implemented yet. Most \"peripheral\" parts\n  of the stdlib are this way, the `io`, `file`, `os`, `package`, `string`,\n  `table`, and `utf8` libs are either missing or very sparsely implemented.\n* There is no support yet for finalization. `gc-arena` supports finalization in\n  such a way now that it should be possible to implement `__gc` metamethods with\n  resurrection and tables with weak keys / values and ephemeron tables fully,\n  but it has not been done yet. Currently, the `__gc` metamethod has no effect.\n* The compiled VM code is in a couple of ways worse than what PUC-Rio Lua will\n  generate. Notably, there is a JMP chaining optimization that is not yet\n  implemented that makes most loops much slower than in PUC-Rio Lua.\n* Error messages that don't make you want to cry\n* Stack traces\n* Debugger\n* Aggressive optimization and *real* effort towards matching or beating (or\n  even just being within a respectable distance of) PUC-Rio Lua's performance in\n  all cases.\n* Probably much more I've forgotten about\n\n## What will probably never be implemented\n\nThis is not an exhaustive list, but these are some things which I currently\nconsider *almost definite* non-goals.\n\n* An API compatible with the PUC-Rio Lua C API. It would be amazingly difficult\n  to implement and would be very slow, and some of it would be basically\n  impossible (longjmp error handling and adjacent behavior).\n* Perfect compatibility with certain classes of behavior in PUC-Rio Lua:\n  * PUC-Rio Lua behaves differently on systems depending on the OS, environment,\n    compilation settings, system locale, etc. (In certain versions of PUC-Rio Lua,\n    even the behavior of the *lexer* changes depending on the system locale!)\n    `piccolo` is more or less aiming to emulate PUC-Rio Lua behavior with the\n    \"C\" locale set with the default settings in `luaconf.h` on 64-bit Linux.\n  * The specific format of error messages.\n  * The specific iteration order of tables, and the specific behavior of the\n    length operator (the length operator currently functions correctly and will\n    always return a table \"border\", but for tables that are not sequences,\n    the choice of border that is returned may differ).\n* The `debug` library is unimplemented and much of it will probably never be\n  implemented due to fundamental VM differences.\n* Compatibility with PUC-Rio Lua bytecode\n* `os.setlocale` and other weirdness inherited from C\n* `package.loadlib` and all functionality which allows loading C libraries.\n* Perfectly matching all of the (sometimes quite exotic) garbage collector\n  corner case behavior in PUC-Rio Lua.\n\n## Why is it called 'piccolo'?\n\nIt's a cute little \"pico\" Lua, get it?\n\nIt's not really all that \"pico\" anymore, but it's still a cute little instrument\nyou can safely carry with you anywhere!\n\n## Wasn't this project called something else? Luster? Deimos?\n\nThere was an embarassing naming kerfluffle where I somehow ended up with other\npeople's project names *twice*. They're all the same project. I promise I'm done\nrenaming it.\n\n## License\n\n`piccolo` is licensed under either of:\n\n* MIT license [LICENSE-MIT](LICENSE-MIT) or http://opensource.org/licenses/MIT\n* Creative Commons CC0 1.0 Universal Public Domain Dedication\n  [LICENSE-CC0](LICENSE-CC0) or\n  https://creativecommons.org/publicdomain/zero/1.0/\n\nat your option.\n"
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "flake.lock",
          "type": "blob",
          "size": 2.4033203125,
          "content": "{\n  \"nodes\": {\n    \"flake-utils\": {\n      \"inputs\": {\n        \"systems\": \"systems\"\n      },\n      \"locked\": {\n        \"lastModified\": 1731533236,\n        \"narHash\": \"sha256-l0KFg5HjrsfsO/JpG+r7fRrqm12kzFHyUHqHCVpMMbI=\",\n        \"owner\": \"numtide\",\n        \"repo\": \"flake-utils\",\n        \"rev\": \"11707dc2f618dd54ca8739b309ec4fc024de578b\",\n        \"type\": \"github\"\n      },\n      \"original\": {\n        \"owner\": \"numtide\",\n        \"repo\": \"flake-utils\",\n        \"type\": \"github\"\n      }\n    },\n    \"nixpkgs\": {\n      \"locked\": {\n        \"lastModified\": 1733376361,\n        \"narHash\": \"sha256-aLJxoTDDSqB+/3orsulE6/qdlX6MzDLIITLZqdgMpqo=\",\n        \"owner\": \"NixOS\",\n        \"repo\": \"nixpkgs\",\n        \"rev\": \"929116e316068c7318c54eb4d827f7d9756d5e9c\",\n        \"type\": \"github\"\n      },\n      \"original\": {\n        \"owner\": \"NixOS\",\n        \"ref\": \"nixpkgs-unstable\",\n        \"repo\": \"nixpkgs\",\n        \"type\": \"github\"\n      }\n    },\n    \"nixpkgs_2\": {\n      \"locked\": {\n        \"lastModified\": 1728538411,\n        \"narHash\": \"sha256-f0SBJz1eZ2yOuKUr5CA9BHULGXVSn6miBuUWdTyhUhU=\",\n        \"owner\": \"NixOS\",\n        \"repo\": \"nixpkgs\",\n        \"rev\": \"b69de56fac8c2b6f8fd27f2eca01dcda8e0a4221\",\n        \"type\": \"github\"\n      },\n      \"original\": {\n        \"owner\": \"NixOS\",\n        \"ref\": \"nixpkgs-unstable\",\n        \"repo\": \"nixpkgs\",\n        \"type\": \"github\"\n      }\n    },\n    \"root\": {\n      \"inputs\": {\n        \"flake-utils\": \"flake-utils\",\n        \"nixpkgs\": \"nixpkgs\",\n        \"rust-overlay\": \"rust-overlay\"\n      }\n    },\n    \"rust-overlay\": {\n      \"inputs\": {\n        \"nixpkgs\": \"nixpkgs_2\"\n      },\n      \"locked\": {\n        \"lastModified\": 1733711706,\n        \"narHash\": \"sha256-uDfJ/TrLLqrtoNzfPODDOVyZ+JWsJfd5T1r7xuE6h6g=\",\n        \"owner\": \"oxalica\",\n        \"repo\": \"rust-overlay\",\n        \"rev\": \"4eb3f096e14431bd0ab4cca039f9c9d77331cbfc\",\n        \"type\": \"github\"\n      },\n      \"original\": {\n        \"owner\": \"oxalica\",\n        \"repo\": \"rust-overlay\",\n        \"type\": \"github\"\n      }\n    },\n    \"systems\": {\n      \"locked\": {\n        \"lastModified\": 1681028828,\n        \"narHash\": \"sha256-Vy1rq5AaRuLzOxct8nz4T6wlgyUR7zLU309k9mBC768=\",\n        \"owner\": \"nix-systems\",\n        \"repo\": \"default\",\n        \"rev\": \"da67096a3b9bf56a91d16901293e51ba5b49a27e\",\n        \"type\": \"github\"\n      },\n      \"original\": {\n        \"owner\": \"nix-systems\",\n        \"repo\": \"default\",\n        \"type\": \"github\"\n      }\n    }\n  },\n  \"root\": \"root\",\n  \"version\": 7\n}\n"
        },
        {
          "name": "flake.nix",
          "type": "blob",
          "size": 0.75390625,
          "content": "{\n  inputs = {\n    flake-utils.url = \"github:numtide/flake-utils\";\n    nixpkgs.url = \"github:NixOS/nixpkgs/nixpkgs-unstable\";\n    rust-overlay.url = \"github:oxalica/rust-overlay\";\n  };\n\n  outputs = { self, flake-utils, nixpkgs, rust-overlay }:\n    flake-utils.lib.eachDefaultSystem (system:\n      let\n        pkgs = import nixpkgs {\n          inherit system;\n          overlays = [ rust-overlay.overlays.default ];\n        };\n\n        rust = pkgs.rust-bin.stable.latest.default.override {\n          extensions = [\n            \"rust-src\"\n            \"rust-analyzer\"\n          ];\n        };\n      in {\n        devShells.default = with pkgs; mkShell {\n          packages = [\n            rust\n            cargo-edit\n            lua5_4\n          ];\n        };\n      }\n    );\n}\n"
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        },
        {
          "name": "util",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}