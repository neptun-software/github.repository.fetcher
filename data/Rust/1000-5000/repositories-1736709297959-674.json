{
  "metadata": {
    "timestamp": 1736709297959,
    "page": 674,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjY4MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "stateright/stateright",
      "stars": 1600,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.0380859375,
          "content": "*.bk\n*.iml\nCargo.lock\n*.swp\n.*\ntarget/\n"
        },
        {
          "name": "CHANGES.md",
          "type": "blob",
          "size": 7.61328125,
          "content": "# Changes\n\n## 0.30.2\n\nAndrew Jeffery <dev@jeffas.io>\n\n- Add ability to define when checking finishes via `HasDiscoveries`.\n- Add optional checker timeout.\n\nD. Reusche <code@degregat.net>\n\n- Add `interaction.rs` example.\n\nLiangrun Da <liangrun_da@outlook.com>\n\n- Fix handling of non-unique states for unordered duplicating networks.\n\n## 0.30.1\n\nAndrew Jeffery <dev@jeffas.io>\n\n- Cleanly handle panics during model checking.\n- Leverage `tiny_http` for Explorer.\n- Print fingerprint path for discoveries in default report.\n- Add names to actors and show in Explorer.\n- Introduce simulation checker.\n\nJonathan Nadal <jon.nadal@gmail.com>\n\n- Fix unintentional spin-wait loop in real-world runtime (`spawn`).\n- Fix nondeterministic test result.\n\nremzi <13716567376yh@gmail.com>\n\n- Simplify `DGraph` (used by tests) by eliminating unnecessary cloning.\n\n## 0.30.0\n\nNotable changes follow, grouped by author.\n\nAndrea Stedile <andrea.stedile@studenti.unitn.it>\n\n- Support crash failures.\n\nAndrew Jeffery <dev@jeffas.io>\n\n- Enhance how properties are displayed in the Explorer UI.\n- Introduce an \"on-demand\" checker for Explorer.\n- Introduce depth tracking and max depth checking.\n- Introduce named timers.\n- Sort discoveries.\n- Introduce a `join_and_report` method to reduce time overestimation.\n\nDavid Rusu <davidrusu.me@gmail.com>\n\n- Fix a bug in the new on-demand checker.\n\nJonathan Nadal <jon.nadal@gmail.com>\n\n- Address a bug for ordered network checking that would result in not exploring\n  the complete state space. Thank you to Andrea Stedile for identifying this\n  problem.\n\nWink Saville <wink@saville.com>\n\n- Improve `tcpdump` usage details in the examples.\n\n## 0.29.0\n\nThis release adds support for symmetry reduction, courtesy of Chris Jensen\n(`@Cjen1` on GitHub).  It also introduces the ability to choose network\nsemantics, which can be helpful for reducing the state space. Options are:\nordered, unordered duplicating, and unordered non-duplicating.\n`DuplicatingNetwork` was removed in favor of capturing that aspect via the new\n`Network` type, enabling the library to leverage the most efficient data\nstructure for each particular use case.\n\n## 0.28.0\n\nStateright now distinguishes between the number of states (including\nregenerated) and the number of unique states. To facilitate this,\n`Checker::generated_count` has been removed in favor of `state_count` and\n`unique_state_count` methods.\n\n## 0.27.1\n\nThis release introduces the ability to quickly navigate forward/backward along\na path using `down`/`up` or `j`/`k`.\n\n## 0.27.0\n\nThis release introduces multiple enhancements for Stateright Explorer. Explorer\nnow shows ignored actions. It also has labels for previous/next states that\nmatch the current state. Arguably the biggest improvement is that Explorer now\nshows all properties (not just properties with discoveries) and explains the\nchecker outcomes for each property. There are also some minor styling changes\nin the UI.\n\nAnother small improvement is that `ActorModel` now overrides rendering of the\n`Deliver` action with a more concise/intuitive representation.\n\nWhile preparing an example for a revised screenshot, I accidentally created a\nmodel with unwanted nondeterminism: my model depended on iteration order, which\nin turn depended upon a random seed. Root causing took a long time, so I\nimproved the error message that shows when the checker detects unwanted\nnondetermism to make similar mistakes easier to debug in the future.\n\n## 0.26.1\n\nThis release introduces a `PathRecorder` visitor and a `VectorClock` utility\ntype. It also adds an `Actor` implementation for `Vec<(Id, Msg)>` for any\nmessage type `Msg`, which can be used as a simple client actor for exercising a\nsystem.\n\n## 0.26.0\n\n`RegisterActor::Client` now has a `put_count` field that indicates how many\n`RegisterMsg::Put`s to perform before issuing a `RegisterMsg::Get`.\n\n## 0.25.0\n\nI was recently asked where linearizability was specified in the actor examples.\nThe answer was `RegisterCfg::into_model`, but this question provided useful\nfeedback: the existing structure was hiding information important for\nunderstanding each model.\n\nThis release addresses that gap by removing `RegisterCfg`. Instead the actor\nexamples fully specify their `ActorModel`s. This requirement is made less\nverbose by introducing two helpers, `RegisterMsg::record_invocations` and\n`RegisterMsg::record_returns`.\n\nHere is a representative example prior to this release:\n\n```rust\nRegisterCfg {\n        client_count: 2,\n\t\tservers: vec![\n\t\t\tPaxosActor { peer_ids: model_peers(0, 3) },\n\t\t\tPaxosActor { peer_ids: model_peers(1, 3) },\n\t\t\tPaxosActor { peer_ids: model_peers(2, 3) },\n\t\t],\n    }\n    .into_model()\n    .duplicating_network(DuplicatingNetwork::No)\n    .within_boundary(within_boundary)\n    .checker()\n```\n\nAs mentioned above, `RegisterCfg::into_model` was implemented inside the\nlibrary, thereby inadvertantly hiding important details about the resulting\nmodel. Furthermore, `within_boundary` lacked access to sufficient\nconfiguration:\n\n```rust\nfn within_boundary<H>(\n    _: &RegisterCfg<PaxosActor>,\n    state: &ActorModelState<RegisterActor<PaxosActor>, H>)\n    -> bool\n{\n    state.actor_states.iter().all(|s| {\n        if let RegisterActorState::Server(s) = &**s {\n            s.ballot.0 <= 3\n        } else {\n            true\n        }\n    })\n}\n```\n\nThe new pattern is to introduce a model-specific configuration type, which has\nthe added benefit of enabling additional model-specific parameters:\n\n```rust\nPaxosModelCfg {\n        client_count: 2,\n        server_count: 3,\n        max_round: 3,\n    }\n    .into_model().checker()\n```\n\nThe same program would then specify a dedicated `into_model`, thereby\naddressing the motivating question of this release. For example:\n\n```rust\nimpl PaxosModelCfg {\n    fn into_model(self) ->\n        ActorModel<\n            RegisterActor<PaxosActor>,\n            Self,\n            LinearizabilityTester<Id, Register<Value>>>\n    {\n        ActorModel::new(\n                self.clone(),\n                LinearizabilityTester::new(Register(Value::default()))\n            )\n            .actors((0..self.server_count)\n                    .map(|i| RegisterActor::Server(PaxosActor {\n                        peer_ids: model_peers(i, self.server_count),\n                    })))\n            .actors((0..self.client_count)\n                    .map(|_| RegisterActor::Client {\n                        server_count: self.server_count,\n                    }))\n            .duplicating_network(DuplicatingNetwork::No)\n            .property(Expectation::Always, \"linearizable\", |_, state| {\n                state.history.serialized_history().is_some()\n            })\n            .property(Expectation::Sometimes, \"value chosen\", |_, state| {\n                for env in &state.network {\n                    if let RegisterMsg::GetOk(_req_id, value) = env.msg {\n                        if value != Value::default() { return true; }\n                    }\n                }\n                false\n            })\n            .record_msg_in(RegisterMsg::record_returns)\n            .record_msg_out(RegisterMsg::record_invocations)\n            .within_boundary(|cfg, state| {\n                state.actor_states.iter().all(|s| {\n                    if let RegisterActorState::Server(s) = &**s {\n                        s.ballot.0 <= cfg.max_round\n                    } else {\n                        true\n                    }\n                })\n            })\n    }\n}\n```\n\nThe release also introduces a supporting `ConsistencyTester` trait generalizing\n`LinearizabilityTester` and `SequentialConsistencyTester`. This new trait\nenables helpers (such as `RegisterMsg::record_invocations`) to be used with\nmodels expecting linearizability, sequential consistency, or other to-be-added\nconsistency semantics.\n"
        },
        {
          "name": "Cargo.toml",
          "type": "blob",
          "size": 0.83203125,
          "content": "[package]\nname = \"stateright\"\nversion = \"0.30.2\"\nauthors = [\"Jonathan Nadal <jon.nadal@gmail.com>\"]\nlicense = \"MIT\"\nedition = \"2021\"\n\ndescription = \"A model checker for implementing distributed systems.\"\nhomepage = \"https://www.stateright.rs\"\nrepository = \"https://github.com/stateright/stateright\"\nreadme = \"README.md\"\ncategories = [\"algorithms\", \"concurrency\", \"development-tools\", \"network-programming\", \"simulation\"]\nkeywords = [\"actor\", \"model-checking\", \"paxos\", \"raft\", \"simulation\"]\n\n[dependencies]\nahash = \"0.8\"\ntiny_http = \"0.12\"\nchoice = \"0.0.2\"\ncrossbeam-utils = \"0.8\"\ndashmap = \"6.1\"\nid-set = \"0.2\"\nlog = \"0.4\"\nnohash-hasher = \"0.2\"\nparking_lot = \"0.12\"\nrand = \"0.8\"\nserde = { version = \"1.0\", features = [\"rc\", \"derive\"] }\nserde_json = \"1.0\"\n\n[dev-dependencies]\nenv_logger = \"0.11\"\nlazy_static = \"1.5\"\nnum_cpus = \"1.16\"\npico-args = \"0.5\"\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.080078125,
          "content": "MIT License\n\nCopyright (c) 2018 Jonathan Nadal and other Stateright contributors\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 5.9384765625,
          "content": "[![chat](https://img.shields.io/discord/781357978652901386)](https://discord.gg/JbxGSVP4A6)\n[![crates.io](https://img.shields.io/crates/v/stateright.svg)](https://crates.io/crates/stateright)\n[![docs.rs](https://docs.rs/stateright/badge.svg)](https://docs.rs/stateright)\n[![LICENSE](https://img.shields.io/crates/l/stateright.svg)](https://github.com/stateright/stateright/blob/master/LICENSE)\n\nCorrectly implementing distributed algorithms such as the\n[Paxos](https://en.wikipedia.org/wiki/Paxos_%28computer_science%29) and\n[Raft](https://en.wikipedia.org/wiki/Raft_%28computer_science%29) consensus\nprotocols is notoriously difficult due to inherent nondetermism such as message\nreordering by network devices. Stateright is a\n[Rust](https://www.rust-lang.org/) actor library that aims to solve this\nproblem by providing an embedded [model\nchecker](https://en.wikipedia.org/wiki/Model_checking), a UI for exploring\nsystem behavior ([demo](http://demo.stateright.rs:3000/)), and a lightweight\nactor runtime. It also features a linearizability tester that can be run within\nthe model checker for more exhaustive test coverage than similar solutions such\nas [Jepsen](https://jepsen.io/).\n\n![Stateright Explorer screenshot](https://raw.githubusercontent.com/stateright/stateright/master/explorer.png)\n\n## Getting Started\n\n1. **Please see the book, \"[Building Distributed Systems With\n   Stateright](https://www.stateright.rs).\"**\n2. A [video\n   introduction](https://youtube.com/playlist?list=PLUhyBsVvEJjaF1VpNhLRfIA4E7CFPirmz)\n   is also available.\n3. Stateright also has detailed [API docs](https://docs.rs/stateright/).\n4. Consider also joining the [Stateright Discord\n   server](https://discord.gg/JbxGSVP4A6) for Q&A or other feedback.\n\n## Examples\n\nStateright includes a variety of\n[examples](https://github.com/stateright/stateright/tree/master/examples), such\nas a [Single Decree Paxos\ncluster](https://github.com/stateright/stateright/blob/master/examples/paxos.rs)\nand an [abstract two phase commit\nmodel](https://github.com/stateright/stateright/blob/master/examples/2pc.rs).\n\nPassing a `check` CLI argument causes each example to validate itself using\nStateright's model checker:\n\n```sh\n# Two phase commit with 3 resource managers.\ncargo run --release --example 2pc check 3\n# Paxos cluster with 3 clients.\ncargo run --release --example paxos check 3\n# Single-copy (unreplicated) register with 3 clients.\ncargo run --release --example single-copy-register check 3\n# Linearizable distributed register (ABD algorithm) with 2 clients\n# assuming ordered channels between actors.\ncargo run --release --example linearizable-register check 2 ordered\n```\n\nPassing an `explore` CLI argument causes each example to spin up the Stateright\nExplorer web UI locally on port 3000, allowing you to browse system behaviors:\n\n```sh\ncargo run --release --example 2pc explore\ncargo run --release --example paxos explore\ncargo run --release --example single-copy-register explore\ncargo run --release --example linearizable-register explore\n```\n\nPassing a `spawn` CLI argument to the examples leveraging the actor\nfunctionality will cause each to spawn actors using the included runtime,\ntransmitting JSON messages over UDP:\n\n```sh\ncargo run --release --example paxos spawn\ncargo run --release --example single-copy-register spawn\ncargo run --release --example linearizable-register spawn\n```\n\nThe `bench.sh` script runs all the examples with various settings for\nbenchmarking the performance impact of changes to the library.\n\n```sh\n./bench.sh\n```\n\n# Features\n\nStateright contains a general purpose model checker offering:\n\n- Invariant checks via \"always\" properties.\n- Nontriviality checks via \"sometimes\" properties.\n- Liveness checks via \"eventually\" properties (experimental/incomplete).\n- A web browser UI for interactively exploring state space.\n- [Linearizability](https://en.wikipedia.org/wiki/Linearizability)\n  and [sequential consistency](https://en.wikipedia.org/wiki/Sequential_consistency)\n  testers.\n- Support for symmetry reduction to reduce state spaces.\n\nStateright's actor system features include:\n\n- An actor runtime that can execute actors outside the model checker in the\n  \"real world.\"\n- A model for lossy/lossless duplicating/non-duplicating networks with the\n  ability to capture actor message\n  [history](https://lamport.azurewebsites.net/tla/auxiliary/auxiliary.html) to\n  check an actor system against an expected consistency model.\n- Pluggable network semantics for model checking, allowing you to choose\n  between fewer assumptions (e.g. \"lossy unordered duplicating\") or more\n  assumptions (speeding up model checking; e.g. \"lossless ordered\").\n- An optional network adapter that provides a lossless non-duplicating ordered\n  virtual channel for messages between a pair of actors.\n\nIn contrast with other actor libraries, Stateright enables you to [formally\nverify](https://en.wikipedia.org/wiki/Formal_verification) the correctness of\nyour implementation, and in contrast with model checkers such as TLC for\n[TLA+](https://lamport.azurewebsites.net/tla/tla.html), systems implemented\nusing Stateright can also be run on a real network without being reimplemented\nin a different language.\n\n## Contribution\n\nContributions are welcome! Please [fork the\nlibrary](https://github.com/stateright/stateright/fork), push changes to your\nfork, and send a [pull\nrequest](https://help.github.com/articles/creating-a-pull-request-from-a-fork/).\nAll contributions are shared under an MIT license unless explicitly stated\notherwise in the pull request.\n\n## License\n\nStateright is copyright 2018 Jonathan Nadal and other\n[contributors](https://github.com/stateright/stateright/graphs/contributors).\nIt is made available under the MIT License.\n\nTo avoid the need for a Javascript package manager, the Stateright repository\nincludes code for the following Javascript dependency used by Stateright\nExplorer:\n\n- [KnockoutJS](https://knockoutjs.com/) is copyright 2010 Steven Sanderson, the\n  Knockout.js team, and other contributors. It is made available under the MIT\n  License.\n"
        },
        {
          "name": "bench.sh",
          "type": "blob",
          "size": 0.734375,
          "content": "#!/bin/bash\n\nset -e\nset -u\n\nCOUNT=${1:-3}\nFILTER=${2:-''}\n\necho \"Benchmarking with:\" >&2\necho \"- COUNT=$COUNT\"     >&2\necho \"- FILTER='$FILTER'\" >&2\necho                      >&2\n\n# USAGE: bench EXAMPLE ARGS...\n# EXAMPLE: bench 2pc check 9\n# \n# No-op if EXAMPLE does not match FILTER.\nbench() {\n    if [[ $1 == *\"$FILTER\"* ]]; then\n        echo \"== $@ ==\"\n        for i in $(seq $COUNT); do\n            cargo -q run --release --example \"$@\" |grep \"sec=\"\n        done\n    fi\n}\n\nbench 2pc check 10\nbench paxos check 6\nbench single-copy-register check 4\nbench linearizable-register check 2\nif [[ \"$FILTER\" == '' ]]; then\n    # This test takes particularly long so it's only run when the filter is empty.\n    bench linearizable-register check 3 ordered\nfi\n"
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "explorer.png",
          "type": "blob",
          "size": 153.3623046875,
          "content": null
        },
        {
          "name": "flake.lock",
          "type": "blob",
          "size": 1.587890625,
          "content": "{\n  \"nodes\": {\n    \"flake-utils\": {\n      \"locked\": {\n        \"lastModified\": 1667395993,\n        \"narHash\": \"sha256-nuEHfE/LcWyuSWnS8t12N1wc105Qtau+/OdUAjtQ0rA=\",\n        \"owner\": \"numtide\",\n        \"repo\": \"flake-utils\",\n        \"rev\": \"5aed5285a952e0b949eb3ba02c12fa4fcfef535f\",\n        \"type\": \"github\"\n      },\n      \"original\": {\n        \"owner\": \"numtide\",\n        \"repo\": \"flake-utils\",\n        \"type\": \"github\"\n      }\n    },\n    \"nixpkgs\": {\n      \"locked\": {\n        \"lastModified\": 1673796341,\n        \"narHash\": \"sha256-1kZi9OkukpNmOaPY7S5/+SlCDOuYnP3HkXHvNDyLQcc=\",\n        \"owner\": \"nixos\",\n        \"repo\": \"nixpkgs\",\n        \"rev\": \"6dccdc458512abce8d19f74195bb20fdb067df50\",\n        \"type\": \"github\"\n      },\n      \"original\": {\n        \"owner\": \"nixos\",\n        \"ref\": \"nixos-unstable\",\n        \"repo\": \"nixpkgs\",\n        \"type\": \"github\"\n      }\n    },\n    \"root\": {\n      \"inputs\": {\n        \"flake-utils\": \"flake-utils\",\n        \"nixpkgs\": \"nixpkgs\",\n        \"rust-overlay\": \"rust-overlay\"\n      }\n    },\n    \"rust-overlay\": {\n      \"inputs\": {\n        \"flake-utils\": [\n          \"flake-utils\"\n        ],\n        \"nixpkgs\": [\n          \"nixpkgs\"\n        ]\n      },\n      \"locked\": {\n        \"lastModified\": 1674008920,\n        \"narHash\": \"sha256-ugwPxKjvmJ5GpzN/MHg8tuhe8nYi3SbJm5nWNy7CB0Q=\",\n        \"owner\": \"oxalica\",\n        \"repo\": \"rust-overlay\",\n        \"rev\": \"eecc44934a0f6c02c02856b38bd3b6af3bec0870\",\n        \"type\": \"github\"\n      },\n      \"original\": {\n        \"owner\": \"oxalica\",\n        \"repo\": \"rust-overlay\",\n        \"type\": \"github\"\n      }\n    }\n  },\n  \"root\": \"root\",\n  \"version\": 7\n}\n"
        },
        {
          "name": "flake.nix",
          "type": "blob",
          "size": 0.8720703125,
          "content": "{\n  description = \"stateright model checker\";\n\n  inputs = {\n    nixpkgs.url = \"github:nixos/nixpkgs/nixos-unstable\";\n    flake-utils.url = \"github:numtide/flake-utils\";\n    rust-overlay = {\n      url = \"github:oxalica/rust-overlay\";\n      inputs.nixpkgs.follows = \"nixpkgs\";\n      inputs.flake-utils.follows = \"flake-utils\";\n    };\n  };\n\n  outputs = {\n    self,\n    nixpkgs,\n    rust-overlay,\n    flake-utils,\n  }:\n    flake-utils.lib.eachDefaultSystem\n    (\n      system: let\n        pkgs = import nixpkgs {\n          inherit system;\n          overlays = [rust-overlay.overlays.default];\n        };\n        rust = pkgs.rust-bin.stable.latest.default;\n      in {\n        formatter = pkgs.alejandra;\n\n        devShell = pkgs.mkShell {\n          packages = [\n            (rust.override {\n              extensions = [\"rust-src\" \"rustfmt\"];\n            })\n          ];\n        };\n      }\n    );\n}\n"
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "ui",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}