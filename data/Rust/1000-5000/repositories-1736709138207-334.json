{
  "metadata": {
    "timestamp": 1736709138207,
    "page": 334,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjM0MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "rust-headless-chrome/rust-headless-chrome",
      "stars": 2434,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.091796875,
          "content": "/target\n**/*.rs.bk\n.idea\nlogs\nCargo.lock\n\n/tests/temp/*\n!/tests/temp/.gitkeep\n\ndebug.log\nTAGS\n"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 7.8857421875,
          "content": "# Changelog\n\nAll notable changes to this project will be documented in this file.\n\n## [Unreleased](https://github.com/atroche/rust-headless-chrome/compare/v0.9.0...HEAD)\n\n### Added\n* [`LaunchOptions::default_builder()`](https://github.com/atroche/rust-headless-chrome/pull/176) for easier access to LaunchOptionsBuilder (which, because it's created via `derive(Builder)` is hard for editors to deal with\n* [Support for intercepting the file chooser dialog](https://github.com/atroche/rust-headless-chrome/pull/169)\n* [Slow motion option for tab](https://github.com/atroche/rust-headless-chrome/pull/177)\n* [`Element::get_inner_text()`](https://github.com/atroche/rust-headless-chrome/pull/178)\n* [`Element::find_element` and `Element::find_elements`](https://github.com/atroche/rust-headless-chrome/pull/190)\n\n### Removed\n### Changed\n* Move env_logger to dev dependencies \n\n## 0.9.0 - 2019-08-22\n\n### Added\n* [Add get_title method to tab](https://github.com/atroche/rust-headless-chrome/pull/167)\n* [Add way to set env vars for Chrome process](https://github.com/atroche/rust-headless-chrome/pull/168)\n* [Improve Runtime Domain, Add ability to listen to all Events on a tab](https://github.com/atroche/rust-headless-chrome/pull/162)\n\n### Removed\n### Changed\n\n## 0.8.0 - 2019-08-22\n\n### Added\n\n*  [tab.set_default_timeout](https://github.com/atroche/rust-headless-chrome/pull/161), a convenience method.\n\n### Removed\n### Changed\n\n*  [Run Chrome with same 'DEFAULT_ARGS' as puppeteer](https://github.com/atroche/rust-headless-chrome/pull/165)\n*  **BREAKING CHANGE**: [Remove the 'fetch' feature (which enables the fetcher module) from default features](https://github.com/atroche/rust-headless-chrome/pull/164).\n*  **BREAKING CHANGE**: [Use JsFloat / JsUInt / JsInt consistently in protocol module ](https://github.com/atroche/rust-headless-chrome/pull/166)\n   All 'integer' types in the protocol are now either i32 or u32, and all 'number' types are f64, via type aliases.\n\n## 0.7.0 - 2019-08-20\n\n### Added\n\n* [`Tab.get_cookies()`](https://github.com/atroche/rust-headless-chrome/pull/159)\n* [`Browser.getWindowBounds()`, `Tab.setWindowBounds()`](https://github.com/atroche/rust-headless-chrome/pull/102)\n\n### Removed\n### Changed\n\n## 0.6.0 - 2019-08-20\n\n### Added\n\n* [Support for Log domain](https://github.com/atroche/rust-headless-chrome/pull/155) (`tab.enable_logging()` and `tab.disable_logging()`, `tab.start_violations_report()` and `tab.stop_violations_report()`)\n* [`protocol::runtime::StackTrace`](https://github.com/atroche/rust-headless-chrome/pull/155/files#diff-b42bc2ad3d82a3891748fd549d3e0a50R95) and `protocol::runtime::CallFrame`.\n\n### Removed\n### Changed\n\n* `procotol::runtime::RemoteObject.object_type` is now an enum rather than any string.\n\n\n## 0.5.0 - 2019-08-12\n\n### Added\n\n* [`Tab.evaluate`](https://github.com/atroche/rust-headless-chrome/pull/150)\n\n### Removed\n### Changed\n\n* [Fixed problem with compiling project with --no-default-features](https://github.com/atroche/rust-headless-chrome/pull/152)\n\n## 0.4.0 - 2019-08-02\n\n### Added\n\n* [`Browser.setUserAgentOverride()`](https://github.com/atroche/rust-headless-chrome/pull/141)\n* [`LaunchOptions.idle_browser_timeout`](https://github.com/atroche/rust-headless-chrome/pull/145): an option to specify timeout value for when the connection hasn't received any events from the browser\n\n### Removed\n### Changed\n\n* Changed `protocol::dom::NodeId` from `u16` to `u32`.\n\n## 0.3.0 - 2019-07-07\n\n### Added\n\n* Re-export Element struct in top level module\n* Better crate-level docs, and also docs for the Element struct\n* Browser::default convenience method for quickly getting a headless browser with default options\n\n### Removed\n### Changed\n\n## 0.2.0 - 2019-07-07\n\nNote: starting with this release we're going to bump the minor version whenever anything new is added to the public API.\n\n### Added\n\n* [Response handling callback for tabs (`Tab.enable_response_handler`)](https://github.com/atroche/rust-headless-chrome/pull/133)\n\n### Removed\n### Changed\n\n* [Fixed a race condition in Tab.wait_until_navigated](https://github.com/atroche/rust-headless-chrome/pull/135)\n* [Bump dependencies (rand, ureq, directories) and remove base64 dev dep](https://github.com/atroche/rust-headless-chrome/pull/134)\n\n\n## 0.1.5 - 2019-06-19\n\n### Added\n\n* [Tab.get_script_source, Tab.enable_debugger, Tab.disable_debugger](https://github.com/atroche/rust-headless-chrome/commit/625c59f9957d3ffa1853164d1d77e9c252d116ee)\n* [Add ability to set window size of browser on launch](https://github.com/atroche/rust-headless-chrome/pull/123)\n* [Scroll elements into view before clicking, mousing over or focusing on them](https://github.com/atroche/rust-headless-chrome/pull/128)\n* [FrameTree.child_frames field](https://github.com/atroche/rust-headless-chrome/commit/9c86817fdbf8fa63620cad3700f7063781335d20)\n* [When waiting for elements, return most errors early instead of retrying and timing out](https://github.com/atroche/rust-headless-chrome/pull/129)\n* [Add `await_promise` argument to Tab.call_js_fn](https://github.com/atroche/rust-headless-chrome/commit/d82ffa8fd4c3efaed1721d8721068d2c6d6c7c9c)\n* [Search for existing Chrome / Chromium binaries in more locations](https://github.com/atroche/rust-headless-chrome/pull/126/files)\n\n### Removed\n\n* [Remove some out-dated examples, along with a couple of dependencies](https://github.com/atroche/rust-headless-chrome/commit/7e99bb861bf8476192b6402a12e9c7d06f15911f)\n\n### Changed\n\n* [Fix Windows build](https://github.com/atroche/rust-headless-chrome/pull/118)\n* [Use ureq instead of reqwest for fetching Chromium binaries](https://github.com/atroche/rust-headless-chrome/commit/acf336707759b646f59d68b05465a0e0ef2a0fa7)\n\n\n## 0.1.4 - 2019-03-21\n\n### Added\n* [Tab.capture_screenshot](https://github.com/atroche/rust-headless-chrome/pull/48)\n* [Tab.print_to_pdf](https://github.com/atroche/rust-headless-chrome/pull/107)\n* [Element.wait_for_elements](https://github.com/atroche/rust-headless-chrome/pull/90)\n* [Automatic downloading of Chromium binary for people who don't want to use their own binary](https://github.com/atroche/rust-headless-chrome/pull/83)\n* [Tab.reload](https://github.com/atroche/rust-headless-chrome/pull/49)\n* [Network request interception](https://github.com/atroche/rust-headless-chrome/pull/98)\n* [Method chaining on Tab for common methods like click()](https://github.com/atroche/rust-headless-chrome/pull/44)\n* [Browser.new_tab](https://github.com/atroche/rust-headless-chrome/pull/56)\n* [Incognito support (Browser.new_context)](https://github.com/atroche/rust-headless-chrome/pull/97)\n* [Element.capture_screenshot](https://github.com/atroche/rust-headless-chrome/pull/59)\n* [Element.get_box_model](https://github.com/atroche/rust-headless-chrome/pull/67)\n* [Support for preloading extensions](https://github.com/atroche/rust-headless-chrome/pull/69)\n* [Support for watching JS / CSS coverage](https://github.com/atroche/rust-headless-chrome/pull/86)\n* [Element.move_mouse_over and Tab.move_mouse_to_point functions](https://github.com/atroche/rust-headless-chrome/pull/96)\n* [Browser.get_version](https://github.com/atroche/rust-headless-chrome/pull/66)\n* [LaunchOptionsBuilder](https://github.com/atroche/rust-headless-chrome/pull/62)\n* Added badge to [the Discord server](https://discord.gg/yyGEzcc) in README\n\n### Changed\n* [Renamed cdtp module to protocol](https://github.com/atroche/rust-headless-chrome/pull/80)\n* [Refactored Waiting helper](https://github.com/atroche/rust-headless-chrome/pull/88)\n* [Exposed more modules (like Browser, Tab and Element) as public](https://github.com/atroche/rust-headless-chrome/pull/70)\n* [protocol::dom::Node.attributes is now a HashMap](https://github.com/atroche/rust-headless-chrome/pull/52/files)\n* Run Travis on stable and nightly on Linux and MacOS, with rustfmt and pedantic clippy.\n* Fixed [some  concurrency issues](https://github.com/atroche/rust-headless-chrome/pull/41)\n\n### Removed\n* [Removed Element's found_via_selector field](https://github.com/atroche/rust-headless-chrome/pull/101/files)\n"
        },
        {
          "name": "Cargo.toml",
          "type": "blob",
          "size": 1.474609375,
          "content": "[package]\nname = \"headless_chrome\"\nversion = \"1.0.15\"\nauthors = [\"Alistair Roche <alistair@sunburnt.country>\"]\nedition = \"2021\"\nrust-version = \"1.78\"\ndescription = \"Control Chrome programatically\"\nlicense = \"MIT\"\nhomepage = \"https://github.com/rust-headless-chrome/rust-headless-chrome\"\nrepository = \"https://github.com/rust-headless-chrome/rust-headless-chrome\"\nreadme = \"README.md\"\n\n[dependencies]\nanyhow = \"1\"\nbase64 = \"0.22.1\"\nderive_builder = \"0.20.1\"\ndirectories = { version = \"5.0\", optional = true }\nlog = \"0.4\"\nrand = \"0.8\"\nregex = \"1\"\nserde = { version = \"1\", features = [\"derive\"] }\nserde_json = \"1\"\ntempfile = \"3\"\nthiserror = \"1\"\nureq = { version = \"2.10\", optional = true, features = [\"proxy-from-env\"] }\nwalkdir = { version = \"2\", optional = true }\ntungstenite = \"0.24.0\"\nurl = \"2.5\"\nwhich = \"6.0.3\"\nzip = { version = \"2.2.0\", optional = true }\n\n[target.'cfg(windows)'.dependencies]\nwinreg = \"0.52.0\"\n\n[dev-dependencies]\nchrono = { version = \"0.4\", default-features = false, features = [\"clock\"] }\nenv_logger = \"0.11.3\"\nfilepath = \"0.1.2\"\njpeg-decoder = { version = \"0.3\", default-features = false }\npng = { version = \"0.17\" }\ntiny_http = \"0.12\"\n\n[build-dependencies]\nauto_generate_cdp = \"0.4.4\"\n\n[lib]\nname = \"headless_chrome\"\npath = \"src/lib.rs\"\n\n[features]\ndefault = [\"offline\"]\nfetch = [\"ureq\", \"directories\", \"zip\", \"walkdir\"]\nnightly = []\noffline = [\"auto_generate_cdp/offline\"]\nrustls = [\"tungstenite/rustls\", \"tungstenite/rustls-tls-native-roots\"]\nnative-tls = [\"tungstenite/native-tls\"]\n"
        },
        {
          "name": "LICENSE.md",
          "type": "blob",
          "size": 1.052734375,
          "content": "Copyright © 2022 headless_chrome contributors\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the “Software”), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 6.0302734375,
          "content": "# Headless Chrome\n\n[![Build Status](https://github.com/rust-headless-chrome/rust-headless-chrome/actions/workflows/ci.yml/badge.svg?branch=main)](https://github.com/rust-headless-chrome/rust-headless-chrome/actions/workflows/ci.yml)\n[![Crate](https://img.shields.io/crates/v/headless_chrome.svg)](https://crates.io/crates/headless_chrome)\n[![API](https://docs.rs/headless_chrome/badge.svg)](https://docs.rs/headless_chrome)\n[![Discord channel](https://img.shields.io/discord/557374784233799681.svg?logo=discord)](https://discord.gg/yyGEzcc)\n\nA high-level API to control headless Chrome or Chromium over the DevTools Protocol. It is the\nRust equivalent of [Puppeteer](https://github.com/GoogleChrome/puppeteer), a Node library\nmaintained by the Chrome DevTools team.\n\nIt is not 100% feature compatible with Puppeteer, but there's enough here to satisfy most\nbrowser testing / web crawling use cases, and there are several 'advanced' features such as:\n\n- [network request interception](https://docs.rs/headless_chrome/latest/headless_chrome/browser/tab/struct.Tab.html#method.enable_request_interception)\n- [JavaScript coverage monitoring](https://docs.rs/headless_chrome/latest/headless_chrome/browser/tab/struct.Tab.html#method.take_precise_js_coverage)\n- Opening incognito windows\n- [taking screenshots of elements or the entire page](https://docs.rs/headless_chrome/latest/headless_chrome/browser/tab/struct.Tab.html#method.capture_screenshot)\n- [saving pages to PDF](https://docs.rs/headless_chrome/latest/headless_chrome/browser/tab/struct.Tab.html#method.print_to_pdf)\n- ['headful' browsing](https://docs.rs/headless_chrome/latest/headless_chrome/browser/struct.LaunchOptionsBuilder.html#method.headless)\n- automatic downloading of 'known good' Chromium binaries for Linux / Mac / Windows\n- [extension pre-loading](https://docs.rs/headless_chrome/latest/headless_chrome/browser/struct.LaunchOptionsBuilder.html#method.extensions)\n\n## Quick Start\n\n```rust\nuse std::error::Error;\n\nuse headless_chrome::Browser;\nuse headless_chrome::protocol::cdp::Page;\n\nfn browse_wikipedia() -> Result<(), Box<dyn Error>> {\n    let browser = Browser::default()?;\n\n    let tab = browser.new_tab()?;\n\n    // Navigate to wikipedia\n    tab.navigate_to(\"https://www.wikipedia.org\")?;\n\n    // Wait for network/javascript/dom to make the search-box available\n    // and click it.\n    tab.wait_for_element(\"input#searchInput\")?.click()?;\n\n    // Type in a query and press `Enter`\n    tab.type_str(\"WebKit\")?.press_key(\"Enter\")?;\n\n    // We should end up on the WebKit-page once navigated\n    let elem = tab.wait_for_element(\"#firstHeading\")?;\n    assert!(tab.get_url().ends_with(\"WebKit\"));\n\n    /// Take a screenshot of the entire browser window\n    let jpeg_data = tab.capture_screenshot(\n        Page::CaptureScreenshotFormatOption::Jpeg,\n        None,\n        None,\n        true)?;\n    // Save the screenshot to disc\n    std::fs::write(\"screenshot.jpeg\", jpeg_data)?;\n\n    /// Take a screenshot of just the WebKit-Infobox\n    let png_data = tab\n        .wait_for_element(\"#mw-content-text > div > table.infobox.vevent\")?\n        .capture_screenshot(Page::CaptureScreenshotFormatOption::Png)?;\n    // Save the screenshot to disc\n    std::fs::write(\"screenshot.png\", png_data)?;\n\n    // Run JavaScript in the page\n    let remote_object = elem.call_js_fn(r#\"\n        function getIdTwice () {\n            // `this` is always the element that you called `call_js_fn` on\n            const id = this.id;\n            return id + id;\n        }\n    \"#, vec![], false)?;\n    match remote_object.value {\n        Some(returned_string) => {\n            dbg!(&returned_string);\n            assert_eq!(returned_string, \"firstHeadingfirstHeading\".to_string());\n        }\n        _ => unreachable!()\n    };\n\n    Ok(())\n}\n```\n\n# Auto fetching chrome binary\n\n```toml\n[dependencies]\nheadless_chrome = {git = \"https://github.com/rust-headless-chrome/rust-headless-chrome\", features = [\"fetch\"]}\n```\n\n\n\nFor fuller examples, take a look at [`tests/simple.rs`](tests/simple.rs) and [`examples`](examples/).\n\n> Before running examples. Make sure add [failure](https://crates.io/crates/failure) crate in your cargo project dependency of `Cargo.toml`\n\n\n## What can't it do?\n\nThe [Chrome DevTools Protocol](https://chromedevtools.github.io/devtools-protocol/tot/Browser) is huge. Currently, Puppeteer supports way more of it than we do. Some of the missing features include:\n\n-  Dealing with frames\n-  Handling file picker / chooser interactions\n-  Tapping touchscreens\n-  Emulating different network conditions (DevTools can alter latency, throughput, offline status, 'connection type')\n-  Viewing timing information about network requests\n-  Reading the SSL certificate\n-  Replaying XHRs\n-  HTTP Basic Auth\n-  Inspecting `EventSource`s (aka server-sent events or SSEs)\n-  WebSocket inspection\n\nIf you're interested in adding one of these features but would like some advice about how to start, please reach out by creating an issue or sending me an email at [`alistair@sunburnt.country`](mailto:alistair@sunburnt.country).\n\n## Related crates\n\n-  [fantoccini](https://github.com/jonhoo/fantoccini) uses WebDriver, so it works with browsers other than Chrome. It's also asynchronous and based on Tokio, unlike `headless_chrome`, which has a synchronous API and is just implemented using plain old threads. Fantoccini has also been around longer and is more battle-tested. It doesn't support Chrome DevTools-specific functionality like JS Coverage.\n\n## Testing\n\nFor debug output, set these environment variables before running `cargo test`:\n\n```RUST_BACKTRACE=1 RUST_LOG=headless_chrome=trace```\n\n## Version numbers\n\nStarting with v0.2.0, we're trying to follow SemVar strictly.\n\n## Troubleshooting\n\nIf you get errors related to timeouts, you likely need to enable sandboxing either in the kernel or as a setuid sandbox. Puppeteer has some information about how to do that [here](https://github.com/GoogleChrome/puppeteer/blob/master/docs/troubleshooting.md).\n\n## Contributing\n\nPull requests and issues are most welcome, even if they're just experience reports. If you find anything frustrating or confusing, let me know!\n"
        },
        {
          "name": "build.rs",
          "type": "blob",
          "size": 0.0546875,
          "content": "use auto_generate_cdp::init;\n\nfn main() {\n    init();\n}\n"
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "json",
          "type": "tree",
          "content": null
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}