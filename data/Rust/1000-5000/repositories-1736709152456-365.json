{
  "metadata": {
    "timestamp": 1736709152456,
    "page": 365,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjM3MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "GuillaumeGomez/sysinfo",
      "stars": 2325,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".cirrus.yml",
          "type": "blob",
          "size": 4.4453125,
          "content": "task:\n  name: rust 1.74 on freebsd 13\n  freebsd_instance:\n    image: freebsd-13-1-release-amd64\n  setup_script:\n    - curl https://sh.rustup.rs -sSf --output rustup.sh\n    - sh rustup.sh -y --profile=minimal --default-toolchain=1.74\n    - . $HOME/.cargo/env\n    - rustup --version\n    - rustup component add clippy\n  test_script:\n    - . $HOME/.cargo/env\n    - cargo check\n    - RUSTFLAGS=-Dwarnings cargo check --no-default-features\n    - RUSTFLAGS=-Dwarnings cargo check --no-default-features --features system\n    - RUSTFLAGS=-Dwarnings cargo check --no-default-features --features debug,serde,system\n    - RUSTFLAGS=-Dwarnings cargo check --no-default-features --features disk\n    - RUSTFLAGS=-Dwarnings cargo check --no-default-features --features debug,serde,disk\n    - RUSTFLAGS=-Dwarnings cargo check --no-default-features --features component\n    - RUSTFLAGS=-Dwarnings cargo check --no-default-features --features debug,serde,component\n    - RUSTFLAGS=-Dwarnings cargo check --no-default-features --features network\n    - RUSTFLAGS=-Dwarnings cargo check --no-default-features --features debug,serde,network\n    - RUSTFLAGS=-Dwarnings cargo check --no-default-features --features user\n    - RUSTFLAGS=-Dwarnings cargo check --no-default-features --features debug,serde,user\n    - cargo clippy -- -D warnings\n    - cargo check --example simple\n    - FREEBSD_CI=1 cargo test -- --test-threads=1\n    - FREEBSD_CI=1 cargo test --lib -- --ignored --test-threads=1\n\ntask:\n  name: rust nightly on freebsd 13\n  freebsd_instance:\n    image: freebsd-13-1-release-amd64\n  setup_script:\n    - curl https://sh.rustup.rs -sSf --output rustup.sh\n    - sh rustup.sh -y --profile=minimal --default-toolchain=nightly\n    - . $HOME/.cargo/env\n    - rustup --version\n    - rustup component add clippy\n  test_script:\n    - . $HOME/.cargo/env\n    - cargo check\n    - RUSTFLAGS=-Dwarnings cargo check --no-default-features\n    - RUSTFLAGS=-Dwarnings cargo check --no-default-features --features system\n    - RUSTFLAGS=-Dwarnings cargo check --no-default-features --features debug,serde,system\n    - RUSTFLAGS=-Dwarnings cargo check --no-default-features --features disk\n    - RUSTFLAGS=-Dwarnings cargo check --no-default-features --features debug,serde,disk\n    - RUSTFLAGS=-Dwarnings cargo check --no-default-features --features component\n    - RUSTFLAGS=-Dwarnings cargo check --no-default-features --features debug,serde,component\n    - RUSTFLAGS=-Dwarnings cargo check --no-default-features --features network\n    - RUSTFLAGS=-Dwarnings cargo check --no-default-features --features debug,serde,network\n    - RUSTFLAGS=-Dwarnings cargo check --no-default-features --features user\n    - RUSTFLAGS=-Dwarnings cargo check --no-default-features --features debug,serde,user\n    - cargo clippy -- -D warnings\n    - cargo check --example simple\n    - FREEBSD_CI=1 cargo test -- --test-threads=1\n    - FREEBSD_CI=1 cargo test --lib -- --test-threads=1\n\ntask:\n  name: rust 1.74 on mac m1\n  macos_instance:\n    image: ghcr.io/cirruslabs/macos-monterey-base:latest\n  setup_script:\n    - brew update\n    - brew install curl\n    - curl https://sh.rustup.rs -sSf --output rustup.sh\n    - sh rustup.sh -y --profile=minimal --default-toolchain=1.74\n    - source $HOME/.cargo/env\n    - rustup --version\n    - rustup component add clippy\n  test_script:\n    - source $HOME/.cargo/env\n    - cargo check\n    - RUSTFLAGS=-Dwarnings cargo check --no-default-features\n    - RUSTFLAGS=-Dwarnings cargo check --no-default-features --features system\n    - RUSTFLAGS=-Dwarnings cargo check --no-default-features --features debug,serde,system\n    - RUSTFLAGS=-Dwarnings cargo check --no-default-features --features disk\n    - RUSTFLAGS=-Dwarnings cargo check --no-default-features --features debug,serde,disk\n    - RUSTFLAGS=-Dwarnings cargo check --no-default-features --features component\n    - RUSTFLAGS=-Dwarnings cargo check --no-default-features --features debug,serde,component\n    - RUSTFLAGS=-Dwarnings cargo check --no-default-features --features network\n    - RUSTFLAGS=-Dwarnings cargo check --no-default-features --features debug,serde,network\n    - RUSTFLAGS=-Dwarnings cargo check --no-default-features --features user\n    - RUSTFLAGS=-Dwarnings cargo check --no-default-features --features debug,serde,user\n    - RUSTFLAGS=-Dwarnings cargo check --no-default-features --features apple-sandbox\n    - cargo clippy -- -D warnings\n    - cargo check --example simple\n    - APPLE_CI=1 cargo test -- --test-threads=1\n    - APPLE_CI=1 cargo test --lib -- --ignored --test-threads=1\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.849609375,
          "content": "\n# Created by https://www.gitignore.io/api/osx,rust\n\n### OSX ###\n*.DS_Store\n.AppleDouble\n.LSOverride\n\n# Icon must end with two \\r\nIcon\n\n\n# Thumbnails\n._*\n\n# Files that might appear in the root of a volume\n.DocumentRevisions-V100\n.fseventsd\n.Spotlight-V100\n.TemporaryItems\n.Trashes\n.VolumeIcon.icns\n.com.apple.timemachine.donotpresent\n\n# Directories potentially created on remote AFP share\n.AppleDB\n.AppleDesktop\nNetwork Trash Folder\nTemporary Items\n.apdisk\n\n### Rust ###\n# Generated by Cargo\n# will have compiled files and executables\n/target/\nexamples/target\ntest-unknown/target\ntest-unknown/pkg\n\n# Remove Cargo.lock from gitignore if creating an executable, leave it for libraries\n# More information here http://doc.crates.io/guide.html#cargotoml-vs-cargolock\nCargo.lock\n\n# These are backup files generated by rustfmt\n**/*.rs.bk\nrusty-tags.vi\ntags\n\n**.o\nsimple\n.idea/\n"
        },
        {
          "name": "ADDING_NEW_PLATFORMS.md",
          "type": "blob",
          "size": 0.140625,
          "content": "To get the `target_os` etc:\n```\nrustc --print cfg\n```\n\nIn `src/lib.rs` add the matching based on the `cfg` data.\n\nCreate `src/<new_platform>`. \n"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 23.3720703125,
          "content": "# 0.33.1\n\n * Linux: Fix components retrieval.\n * Linux: Filter out more virtual file systems for `Disk` API.\n * Linux/Android: Improve `System::long_os_version()`.\n * Apple: Add missing CPU brands for iPhone and iPads.\n * macOS: Improve system name retrieval in `System::long_os_version()`.\n * Linux/macOS: Avoid trailing whitespace and consecutive whitespace in `System::long_os_version()`.\n * Windows: Fix `User::groups`.\n * Improve documentation for `System::name`, `System::kernel_version`, `System::os_version`, `System::long_os_version` and `System::distribution_id`.\n\n# 0.33.0\n\n * Linux: Add more ARM vendor IDs.\n * Linux: Improve CPU computation when refreshing a single process CPU usage.\n * Windows: Fix CPU frequency not being refreshed.\n * Windows: Improved components retrieval.\n * Windows: Fix inconsistent `boot_time` information.\n * Windows: Fix `User::groups`.\n * macOS: Fix network data information being limited to 32 bits.\n * macOS: Add newer macOS version for `System::long_os_version`.\n * unix: Add support for network sub-interfaces.\n * Use `std::env::consts::ARCH` as fallback for `System::cpu_arch`.\n * Add disk I/O support provided through `Disk::usage`.\n * Add `NetworkData::mtu`.\n * Add `DiskRefreshKind` to have finer-grained disks refreshes.\n * `Component::temperature` and `Component::max` now returns `Option<f32>`.\n * `Users::refresh_list`, `Groups::refresh_list`, `Components::refresh_list`, `Networks::refresh_list` and `Disks::refresh_list` methods were renamed `refresh`.\n * `*RefreshKind::new` methods were renamed `nothing`.\n * Improve documentation for `DiskUsage::read_bytes`.\n * Improve documentation for `Process::kill`.\n\n# 0.32.1\n\n * Fix compilation error due to `libc` update.\n\n# 0.32.0\n\n * Add new `Disk::is_read_only` API.\n * Add new `remove_dead_processes` argument to `System::refresh_processes` and `System::refresh_processes_specifics`.\n * macOS: Fix memory leak in disk refresh.\n\n# 0.31.4\n\n * macOS: Force memory cleanup in disk list retrieval.\n\n# 0.31.3\n\n * Raspberry Pi: Fix temperature retrieval.\n\n# 0.31.2\n\n * Remove `bstr` dependency (needed for rustc development).\n\n# 0.31.1\n\n * Downgrade version of `memchr` (needed for rustc development).\n\n# 0.31.0\n\n * Split crate in features to only enable what you need.\n * Remove `System::refresh_process`, `System::refresh_process_specifics` and `System::refresh_pids`\nmethods.\n * Add new argument of type `ProcessesToUpdate` to `System::refresh_processes` and `System::refresh_processes_specifics` methods.\n * Add new `NetworkData::ip_networks` method.\n * Add new `System::refresh_cpu_list` method.\n * Global CPU now only contains CPU usage.\n * Rename `TermalSensorType` to `ThermalSensorType`.\n * Process names is now an `OsString`.\n * Remove `System::global_cpu_info`.\n * Add `System::global_cpu_usage`.\n * macOS: Fix invalid CPU computation when single processes are refreshed one after the other.\n * Windows: Fix virtual memory computation.\n * Windows: Fix WoW64 parent process refresh.\n * Linux: Retrieve RSS (Resident Set Size) memory for cgroups.\n\n# 0.30.13\n\n * macOS: Fix segfault when calling `Components::refresh_list` multiple times.\n * Windows: Fix CPU arch retrieval.\n\n# 0.30.12\n\n * FreeBSD: Fix network interfaces retrieval (one was always missing).\n\n# 0.30.11\n\n * macOS: Fix some invalid utf8 conversions.\n\n# 0.30.10\n\n * Linux: Fix components not being listed anymore.\n\n# 0.30.9\n\n * Linux/Windows: Performance improvements.\n * Linux/macOS/FreeBSD: Parent process ID is updated if changed as expected.\n\n# 0.30.8\n\n * Linux: Fix missing parallelization.\n * Linux: Add `cargo` feature flag `linux-tmpfs` to list `tmpfs` mounts.\n * macOS: Fix CPU usage returning `NaN`.\n * `Components::refresh` is now parallelized.\n\n# 0.30.7\n\n * Linux: Fix cgroup memory computation.\n * FreeBSD: Fix documentation about disk usage.\n\n# 0.30.6\n\n * macOS: Fix missing update of process run time.\n * Add new `Groups` API.\n * Improve documentation.\n\n# 0.30.5\n\n * Windows: Correctly retrieve processes name on 32 bits platforms.\n * Windows: Fix swap memory computation.\n\n# 0.30.4\n\n * Windows: Fix misaligned read.\n\n# 0.30.3\n\n * Improve dependency stack by updating the `windows` dependency.\n\n# 0.30.2\n\n * Add `ThreadKind` enum.\n * Add `Process::thread_kind` method.\n\n# 0.30.1\n\n * Linux: Fix invalid memory information retrieval (virtual and resident set size were reversed).\n\n# 0.30.0\n\n * Split `System` into subtypes: `Components`, `Disks`, `Networks` and `Users`.\n * `brand`, `vendor_id` and `frequency` information is not set anymore on the global CPU.\n * Unix: Fix endless loop in user groups retrieval.\n * Unix/Windows: Fix infinite loop when retrieving various information because of bad usage\n   of `Vec::reserve`.\n * Unix: Fix invalid usage of NULL pointer when retrieving user group name.\n * Linux: Fix CPU name retrieval.\n * Linux: Remove cgroup usage from memory computation.\n * Linux: Add `linux-netdevs` feature to allow to retrieve network devices.\n * Linux: Improve system memory information retrieval (using `statm` file instead of `stat`).\n * Linux: Tasks are listed in processes.\n * macOS: Correctly retrieve process root directory.\n * Windows: Add warning that `System::load_average` is not working in documentation.\n * Windows: Fix invalid use of NULL pointer when retrieving users groups.\n * Windows: Correctly retrieve process root directory.\n * Create new `System::cgroup_limits` method.\n * Remove `System::refresh_system` method.\n * `Disk::file_system` and `Disk::name` now return an `Option<&OsStr>`.\n * Implement `Display` trait on `DiskKind`.\n * Move from `winapi` to `windows` crate.\n * Add `System::cpu_arch`.\n * Add `System::refresh_pids` and `System::refresh_pids_specifics`.\n * `System::boot_time`, `System::cpu_arch`, `System::distribution_id`, `System::host_name`,\n   `System::kernel_version`, `System::load_average`, `System::long_os_version`, `System::name`,\n   `System::os_version` and `System::uptime` are static methods.\n * `ProcessRefreshKind` has a lot more of possibilities for better control over updates.\n * Add new `UpdateKind` enum.\n * Add new `MemoryRefreshKind` struct.\n * Add new `System::refresh_memory_specifics` method.\n * `Process::exe`, `Process::cwd` and `Process::root` return an `Option<&Path>`.\n * `Process::tasks` method is available on all platforms.\n * `Process::tasks` method returns a `HashSet<Pid>`.\n * Move `System::IS_SUPPORTED`, `System::SUPPORTED_SIGNALS` and\n   `System::MINIMUM_CPU_UPDATE_INTERVAL` constants out of `System` directly at the crate top-level.\n * Rename `IS_SUPPORTED` into `IS_SUPPORTED_SYSTEM`.\n * Fix `serde` serialization.\n * Add `System::refresh_cpu_frequency` and `System::refresh_cpu_all`.\n * Fix `sysinfo.h` and C wrapper.\n * Add a migration guide.\n\n# 0.29.11\n\n * macOS: Fix bug when a user group doesn't have a name.\n\n# 0.29.10\n\n * Linux: Correctly handle max memory value for cgroups.\n\n# 0.29.9\n\n * Linux: Fix memory usage retrieval for cgroups.\n\n# 0.29.8\n\n * Linux: Fix overflow bug.\n\n# 0.29.7\n\n * macOS: Fix CPU frequency retrieval for M1 and M2.\n * Linux: Add support for cgroups v1/v2 for memory.\n * Windows: Fix processes name encoding issues.\n\n# 0.29.6\n\n * Update minimum rust version to 1.63.\n * Windows: Fix memory corruption when listing processes.\n * Windows: Fix name inconsistency between `refresh_processes` and `refresh_process`.\n * `Cargo.lock` is now included to prevent minimum rust version disruptions.\n\n# 0.29.5\n\n * Windows: Remove some undefined behaviour when listing processes.\n * <docs.rs>: Use `--generate-link-to-definition` option to have better source code pages.\n\n# 0.29.4\n\n * Windows: Improve code to retrieve network interfaces.\n * Improve serde documentation example.\n * Fix some clippy lints.\n\n# 0.29.3\n\n * Fix some documentation examples.\n\n# 0.29.2\n\n * <docs.rs>: Generate documentation for all supported platforms.\n\n# 0.29.1\n\n * Update `libc` version to 0.2.144.\n * Linux/FreeBSD/macOS: Fix retrieval of users groups in multi-threaded context.\n\n# 0.29.0\n\n * Add `ProcessExt::effective_user_id` and `ProcessExt::effective_group_id`.\n * Rename `DiskType` into `DiskKind`.\n * Rename `DiskExt::type_` into `DiskExt::kind`.\n * macOS: Correctly handle `ProcessStatus` and remove public `ThreadStatus` field.\n * Windows 11: Fix CPU core usage.\n\n# 0.28.4\n\n * macOS: Improve CPU computation.\n * Strengthen a process test (needed for debian).\n\n# 0.28.3\n\n * FreeBSD/Windows: Add missing frequency for global CPU.\n * macOS: Fix used memory computation.\n * macOS: Improve available memory computation.\n * Windows: Fix potential panic when getting process data.\n\n# 0.28.2\n\n * Linux: Improve CPU usage computation.\n\n# 0.28.1\n\n * macOS: Fix overflow when computing CPU usage.\n\n# 0.28.0\n\n * Linux: Fix name and CPU usage for processes tasks.\n * unix: Keep all users, even \"not real\" accounts.\n * Windows: Use SID for Users ID.\n * Fix C API.\n * Disable default cdylib compilation.\n * Add `serde` feature to enable serialization.\n * Linux: Handle `Idle` state in `ProcessStatus`.\n * Linux: Add brand and name of ARM CPUs.\n\n# 0.27.8\n\n * macOS: Fix overflow when computing CPU usage.\n\n# 0.27.7\n\n * macOS: Fix process CPU usage computation\n * Linux: Improve ARM CPU `brand` and `name` information.\n * Windows: Fix resource leak.\n * Documentation improvements.\n\n# 0.27.6\n\n * Make `MacAddr` public.\n\n# 0.27.5\n\n * Linux: Improve compatibility with upcoming `libc` changes for musl targets.\n\n# 0.27.4\n\n * Create `SystemExt::MINIMUM_CPU_UPDATE_INTERVAL` constant.\n * Fix consecutive processes updates CPU usage computation.\n\n# 0.27.3\n\n * macOS: Fix free/available memory computation.\n * Fix processes_by_name* lifetimes\n\n# 0.27.2\n\n * Linux: Fix consecutive process CPU usage updates.\n * Linux: Ignore NFS disks.\n\n# 0.27.1\n\n * Unix systems: Fix network address segfault issue.\n\n# 0.27.0\n\n * Add `NetworkExt::mac_address` method and `MacAddr` type.\n * Linux: Fix truncated environment retrieval.\n * Implement `TryFrom<usize>` and `FromStr` for `Gid` and `Uid`.\n * Implement `TryFrom<usize>` for `Pid`.\n * Fix documentation of `System::new` about CPU list not loaded by default.\n\n# 0.26.9\n\n * (backport) Linux: Improve compatibility with upcoming `libc` changes for musl targets.\n\n# 0.26.8\n\n * Add `ProcessExt::session_id` method.\n * Linux: Ignore NFS disks.\n\n# 0.26.7\n\n * Apple: Greatly improve disk retrieval (I recommend reading the pull request first comment for more information here: <https://github.com/GuillaumeGomez/sysinfo/pull/855>).\n * Remove build script.\n\n# 0.26.6\n\n * Add `Process::wait`.\n * Add \"Good practice\" entry into the crate level documentation and in the README.\n * Linux: More precise used memory computation.\n\n# 0.26.5\n\n * Windows: Fix disk information retrieval.\n * Linux: Improve `Process` document.\n * Linux: Fix a compilation error if the `apple-sandbox` feature is enabled.\n * Internal code improvements.\n\n# 0.26.4\n\n * Add `SystemExt::distribution_id` method.\n * Update `ntapi` version to `0.4`.\n * Update minimum supported Rust version (MSRV) to `1.59` for `ntapi` 0.4.\n\n# 0.26.3\n\n * Update minimum supported Rust version (MSRV) to `1.56` to follow `once_cell` minor update.\n\n# 0.26.2\n\n * Linux: Fix process information retrieval.\n * Linux: Get more components temperature.\n * Linux: Fix disk name retrieval (which in turn fixed disk type retrieval).\n\n# 0.26.1\n\n * macOS M1: Fix segmentation fault crash.\n\n# 0.26.0\n\n * Switch memory unit from kilobytes to bytes.\n * Windows: Fix Windows version display on Windows 11.\n\n# 0.25.3\n\n * Add macOS M1 CI checks.\n * macOS M1: Add temperature support.\n * macOS: Fix leak in disk retrieval.\n\n# 0.25.2\n\n * Windows: Fix `Process::exe` information retrieval.\n * All supported platforms: Correctly handle a PID owner change (#809).\n\n# 0.25.1\n\n * Linux: Fix potential problem on `ProcessExt::exe` in case `/proc/<pid>/exe` cannot be read.\n * Add `SystemExt::sort_disks_by`.\n\n# 0.25.0\n\n * Linux: CPU frequency is now retrieved on-demand as expected when `CpuRefreshKind::frequency` is `true`.\n * `System::refresh_cpu` behaviour changed: it only computes CPU usage and doesn't retrieve CPU frequency.\n\n# 0.24.7\n\n * Windows: Fix boot time computation.\n * macOS: Fix available memory computation.\n * Some documentation fixes.\n\n# 0.24.6\n\n * macOS: Don't compute CPU usage when elapsed time is 0.\n * macOS: Fix memory leak when retrieving disks.\n * C interface: Fix `char` cast when platform is using unsigned `char`s.\n\n# 0.24.5\n\n * Implement `Hash` trait on `Uid` and `Gid` types.\n * Remove dependency `once_cell` for targets other than `linux`, `android` and `windows`.\n\n# 0.24.4\n\n * Windows: Fix `System::refresh_process` when required higher privileges.\n\n# 0.24.3\n\n * macOS: Fix `System::refresh_processes` badly handling updates.\n * FreeBSD: Improve performance of `System::refresh_processes`.\n\n# 0.24.2\n\n * Windows: Fix CPU usage computation.\n * Windows: Enable extra feature on `winapi`.\n * macOS: Fix executable path retrieval.\n\n# 0.24.1\n\n * Use `saturating_*` function for mathematical operations to prevent overflows/underflows.\n\n# 0.24.0\n\n * Rename `Processor` into `Cpu` and `ProcessorExt` into `CpuExt`.\n * Retrieve information about a process' owner.\n * Add `SystemExt::get_user_by_id`.\n * Add `ProcessExt::user_id`.\n * Add `ProcessExt::group_id`.\n * Add `user`-related methods to `ProcessRefreshKind`.\n * Linux: Improve performance when creating new `Process` by improving retrieval of user ID and group ID.\n\n# 0.23.14\n\n * Linux: Fix processes' virtual memory computation.\n\n# 0.23.13\n\n * macOS/FreeBSD: Fix `System::refresh_process` and `System::refresh_process_specifics` returned value.\n * Linux: Small performance improvement when updating process list.\n\n# 0.23.12\n\n * Linux: Improve `System::refresh_cpu` performance.\n * Fix clippy lints.\n\n# 0.23.11\n\n * Add FreeBSD to the \"supported OS\" list\n * Remove useless benchmark results\n\n# 0.23.10\n\n * Improve documentation of `SystemExt::refresh_cpu`.\n\n# 0.23.9\n\n * macOS: Fix disk retrieval\n\n# 0.23.8\n\n * Windows: Fix underflow for `Process` run_time computation\n\n# 0.23.7\n\n * macOS: Ignore non-root drive partitions\n\n# 0.23.6\n\n * Windows: Fix process name retrieval\n * Windows: Unify internal process creation methods\n * FreeBSD: Simplify code for process update\n\n# 0.23.5\n\n * Windows: Fix a bug which prevent all disks to be listed.\n\n# 0.23.4\n\n * Linux (raspberry): Fix physical core count.\n\n# 0.23.3\n\n * Impl `From<Pid>` for Pid inner type.\n * Code cleanup.\n\n# 0.23.2\n\n * Fix unsafe \"correctness\".\n * Correctly handle `MaybeUninit::assume_init`.\n\n# 0.23.1\n\n * Implement `Into` trait on `Pid`\n * Add `#[repr(transparent)]` on `Pid`\n * Clean up `refresh_process` and `refresh_processes`: only `refresh_processes` removes non-existing processes.\n\n# 0.23.0\n\n * Linux: Fix process uptime.\n * Rename `process_by_name` into `processes_by_name`.\n * Rename `process_by_name_exact` into `processes_by_name_exact`.\n * Change returned type of `process_by_name` and of `process_by_name_exact` into an iterator.\n * Improved `Signal` documentation.\n * Turned `Pid` type alias into a newtype.\n\n# 0.22.5\n\n * Linux: Improve documentation on how processes queries are handled.\n * FreeBSD: Fix type error for 32-bit (on i386, armv6, armv7, powerpc).\n * Improve Pid type documentation.\n * Add `SystemExt::process_by_exact_name` method.\n * Add `SUPPORTED_SIGNALS` constant on `SystemExt`.\n * Fix common type aliases.\n * Implement `Display` for `Signal`.\n\n# 0.22.4\n\n * Windows: Correctly handle COM initialization/deinitialization.\n * Linux: Fix panic when changing the limit of open files.\n\n# 0.22.3\n\n * FreeBSD: Take ZFS ARC value into account when computing used system memory.\n * Add some missing `#[must_use]`.\n\n# 0.22.2\n\n * FreeBSD: Improve memory information retrieval.\n\n# 0.22.1\n\n * Remove forgotten debug.\n\n# 0.22.0\n\n * Add FreeBSD support.\n * Create `SystemExt::refresh_processes_specifics` and `SystemExt::refresh_process_specifics` methods.\n * Update `ProcessExt::kill` API and add `ProcessExt::kill_with`.\n * Add `ProcessExt::run_time`.\n\n# 0.21.2\n\n * Unsupported targets: Fix build.\n * Linux: Exclude rootfs disk type as well.\n * Windows: Performance improvement by lazily creating queries.\n\n# 0.21.1\n\n * Linux: Process CPU usage cannot go above maximum value (number of CPUs * 100) anymore.\n * Linux: Improve processors update.\n * Linux: Improve processes CPU usage computation speed.\n\n# 0.21.0\n\n * Linux: Fix processes CPU computation (if `System::refresh_cpu` wasn't used).\n * Fix build for unsupported targets.\n * Make `ProcessStatus` enum unique for all platforms.\n * Unify documentation over all platforms.\n\n# 0.20.5\n\n * Linux: Prevented overflow in disk size computation (bug in `davfs2`).\n * Fixed clippy lints\n\n# 0.20.4\n\n * Update libc version, allowing to remove a lot of FFI bindings.\n\n# 0.20.3\n\n * Windows: Reworked process information retrieval\n * Windows: Fixed issue on `c_void` size.\n * Improved documentation of `ProcessExt::environ`.\n\n# 0.20.2\n\n * Windows: Added support for getting process' current working directory\n * Windows: Added support for getting process' environment variables\n * Removed more FFI bindings and replaced them with libc's.\n\n# 0.20.1\n\n * macOS: Added better support for sandboxing.\n * macOS: Added support for getting process current working directory.\n * Added more explanations in crate level code example.\n * Updated rayon version to 1.5.1.\n\n# 0.20.0\n\n * macOS: Improved code readability.\n * Windows: Prevented the `taskkill.exe` console window from appearing when using `kill`.\n * Fixed benchmarks compilation issue.\n * Upgraded minimum supported Rust version to 1.54.\n * Removed doc-comment dependency.\n * Merged README and crate documentation.\n\n# 0.19.2\n\n * Windows: Fixed swap memory information computation.\n\n# 0.19.1\n\n * Windows: Got swap memory information.\n * Linux: Fixed memory information gathering (bad parsing of `/proc/meminfo`).\n\n# 0.19.0\n\n * Renamed functions/methods to follow [Rust API guidelines on naming](https://rust-lang.github.io/api-guidelines/naming.html#getter-names-follow-rust-convention-c-getter).\n * Linux: Set processes' executable path from command line if not found.\n * Linux: Added extra information about `ProcessExt::name()`.\n * macOS: Removed unneeded (re)import of CoreFoundation library at compile-time.\n * Reworked `DiskType` enum: there is no more `Removable` variant, it's now set into the `Disk` struct. `DiskExt::is_removable` was added.\n * Linux: Added support for removable disks.\n * Linux: Ensured there's a value in `global_processor` frequency.\n * Fixed tests to make them a bit less strict (which was problematic when run on VMs).\n * Linux: Fixed CPU usage subtraction overflow.\n\n# 0.18.2\n\n * macOS: Brand and vendor ID information were reversed.\n * macOS: On Apple M1 processors, the vendor ID is empty, so instead we return \"Apple\".\n * Added tests to ensure that the processors are always set after `System::new()`.\n\n# 0.18.1\n\n * Added `SystemExt::IS_SUPPORTED` constant to allow to easily query if a system is supported or not.\n * Used `SystemExt::IS_SUPPORTED` to fix tests on non-supported platforms and simplify others.\n\n# 0.18.0\n\n * Improved documentation to make it more clear how to use the different information.\n * Turned the `Signal` enum into a full rust one by removing the `#[repr(C)]` attribute on it. Each platform now implements its own conversion.\n * Removed `Signal::Stklft` which wasn't used on any supported system.\n * Linux: Added support for paravirtualized disks.\n\n# 0.17.5\n\n * Improved network code: network interfaces were handled a bit differently depending on the platform, it is now unified.\n\n# 0.17.4\n\n * Linux: fixed invalid network interface cleanup when an interface was removed from the system in `refresh_networks_list`.\n * Added freebsd to CI runs.\n * Added `cargo test` command for freebsd on CI.\n * freebsd: Fixed build.\n\n# 0.17.3\n\n * Removed manual FFI bindings in both Apple and Windows targets.\n * Fixed C-interface compilation.\n * Added information on how to add new platform.\n\n# 0.17.2\n\n * Linux: fixed `System::refresh_process` return value.\n\n# 0.17.1\n\n * Windows: fixed process CPU usage computation.\n * Linux: improved CPU usage values on first query by returning 0: it now waits the second cycle before computing it to avoid abherent values.\n * Linux: fixed process name retrieval by using `stat` information instead.\n * Apple: only list local users.\n\n# 0.17.0\n\n * Linux: fixed OS version retrieval by adding a fallback to `/etc/lsb-release`.\n * iOS: fixed warnings.\n * Renamed `ProcessStatus::to_string` method to `as_str`.\n * macOS: fixed CPU usage computation.\n\n# 0.16.5\n\n * Windows: Removed trailing NUL bytes in hostname.\n * Added user ID and group ID.\n\n# 0.16.4\n\n * macOS: Removed trailing NUL bytes in various values returned by the `sysctl` calls.\n\n# 0.16.3\n\n * Updated minimum libc version to 0.2.86.\n\n# 0.16.2\n\n * Fixed network values computation: replaced the simple arithmetic with `saturating_sub` and `saturating_add`.\n * Converted values read in `/proc/meminfo` from KiB to KB (because contrary to what is said in the manual, they are in KiB, not in KB).\n * macOS: Rewrote `get_disks` function to remove the Objective-C dependency.\n * Added `SystemExt::get_long_os_version`.\n * Linux: Fixed sequences for disks.\n * Linux: Allowed `/run/media` as a mount path.\n * Windows: Fixed disk size computation.\n * Linux: Fixed virtual memory size computation.\n\n# 0.16.1\n\n * Added support for Android.\n * Added flag to remove APIs prohibited in Apple store.\n\n# 0.16.0\n\n * Windows: show removable drives on Windows.\n * Switched to Rust 2018 edition.\n * Split `SystemExt::get_version` into `SystemExt::get_kernel_version` and `SystemExt::get_os_version`.\n * Windows: added support for `get_kernel_version` and `get_os_version`.\n * Changed return type of `SystemExt::get_physical_core_count` from `usize` to `Option<usize>`.\n * Added `SystemExt::get_physical_core_numbers`.\n\n# 0.15.9\n\n * iOS: Fixed build.\n * Fixed cross-compilation.\n\n# 0.15.8\n\n * Apple: fixed Objective-C library imports.\n\n# 0.15.7\n\n * Added `SystemExt::get_host_name`.\n\n# 0.15.6\n\n * Upgraded `cfg-if` dependency version to `1.0`.\n\n# 0.15.5\n\n * Added `SystemExt::get_name` and `SystemExt::get_version`.\n * Added `multithread` feature, making the `rayon` dependency optional.\n\n# 0.15.4\n\n * Apple: gig source code cleanup.\n * Apple: improved disk handling.\n * Removed manual FFI code and used libc's instead.\n\n# 0.15.3\n\n * Prevented CPU value to be NaN.\n\n# 0.15.2\n\n * macOS: fixed disk space computation.\n\n# 0.15.1\n\n * Improved documentation.\n * Extended example.\n\n# 0.15.0\n\n * Added `SystemExt::get_available_memory`.\n\n# 0.14.15\n\n * Linux: improved task source code.\n\n# 0.14.14\n\n * macOS: renamed \"CPU\" into \"CPU Die\".\n * macOS: added \"CPU proximity\" information.\n\n# 0.14.13\n\n * Linux: improved process name retrieval.\n\n# 0.14.12\n\n * Linux: fixed infinite recursion when gathering disk information.\n\n# 0.14.11\n\n * Added iOS support.\n\n# 0.14.10\n\n * Simplified `DiskType` handling by removing `From` implementation.\n * Linux: fixed SSD/HDD detection.\n\n# 0.14.9\n\n * Linux: fixed CPU usage computation.\n * Windows: fixed load average constants.\n\n# 0.14.8\n\n * Linux: fixed network information retrieval by replacing `usize` with `u64` because it was too small on 32 bits systems.\n * Linux: get each core frequency.\n\n# 0.14.7\n\n * Raspberry Pi: fixed temperature retrieval.\n\n# 0.14.6\n\n * Linux: fixed infinite recursion when getting disk.\n\n# 0.14.5\n\n * Strengthened cfg checks: use \"linux\" and \"android\" instead of \"unix\".\n\n# 0.14.4\n\n * Linux: fixed memory usage computation.\n\n# 0.14.3\n\n * Linux: fixed memory usage computation.\n\n# 0.14.2\n\n * Windows: fixed CPU usage computation overflow.\n * macOS: fixed CPU usage computation overflow.\n * Windows: retrieved command line.\n\n# 0.14.1\n\n* Removed empty disks.\n\n# 0.14.0\n\n * Converted KiB to KB.\n\n# 0.13.4\n\n * Code improvements.\n\n# 0.13.3\n\n * Linux: fixed some issues on disks retrieval.\n * Linux: fixed out-of-bound access in `boot_time`.\n * Added benchmark on `Disk::refresh`.\n"
        },
        {
          "name": "Cargo.toml",
          "type": "blob",
          "size": 3.8232421875,
          "content": "[package]\nname = \"sysinfo\"\nversion = \"0.33.1\"\nauthors = [\"Guillaume Gomez <guillaume1.gomez@gmail.com>\"]\ndescription = \"Library to get system information such as processes, CPUs, disks, components and networks\"\nrepository = \"https://github.com/GuillaumeGomez/sysinfo\"\nlicense = \"MIT\"\nreadme = \"README.md\"\nrust-version = \"1.74\"\nexclude = [\"/test-unknown\"]\nkeywords = [\"system-information\", \"disk\", \"process\", \"network\", \"cpu\"]\nedition = \"2021\"\n\n[lib]\nname = \"sysinfo\"\n\n[features]\ndefault = [\"component\", \"disk\", \"network\", \"system\", \"user\", \"multithread\"]\ncomponent = [\n    \"windows/Win32_Foundation\",\n    \"windows/Win32_Security\",\n    \"windows/Win32_System_Com\",\n    \"windows/Win32_System_Rpc\",\n    \"windows/Win32_System_Variant\",\n    \"windows/Win32_System_Wmi\",\n]\ndisk = [\n    \"windows/Win32_Foundation\",\n    \"windows/Win32_Storage_FileSystem\",\n    \"windows/Win32_Security\", # For `windows::Win32::Storage::FileSystem::CreateFileW`.\n    \"windows/Win32_System_IO\",\n    \"windows/Win32_System_Ioctl\",\n    \"windows/Win32_System_SystemServices\",\n    \"windows/Win32_System_WindowsProgramming\",\n]\nsystem = [\n    \"windows/Win32_Foundation\",\n    \"windows/Wdk_System_SystemInformation\",\n    \"windows/Wdk_System_SystemServices\",\n    \"windows/Wdk_System_Threading\",\n    \"windows/Win32_Security_Authorization\",\n    \"windows/Win32_System_Diagnostics_Debug\",\n    \"windows/Win32_System_Kernel\",\n    \"windows/Win32_System_Memory\",\n    \"windows/Win32_System_Performance\",\n    \"windows/Win32_System_Power\",\n    \"windows/Win32_System_ProcessStatus\",\n    \"windows/Win32_System_Registry\",\n    \"windows/Win32_System_RemoteDesktop\",\n    \"windows/Win32_System_SystemInformation\",\n    \"windows/Win32_System_SystemServices\",\n    \"windows/Win32_System_Threading\",\n    \"windows/Win32_UI_Shell\",\n    \"dep:ntapi\",\n    \"dep:memchr\",\n]\nnetwork = [\n    \"windows/Win32_Foundation\",\n    \"windows/Win32_NetworkManagement_IpHelper\",\n    \"windows/Win32_NetworkManagement_Ndis\",\n    \"windows/Win32_Networking_WinSock\",\n]\nuser = [\n    \"windows/Win32_Foundation\",\n    \"windows/Win32_NetworkManagement_NetManagement\",\n    \"windows/Win32_Security\",\n    \"windows/Win32_Security_Authentication_Identity\",\n    \"windows/Win32_Security_Authorization\",\n]\napple-sandbox = []\napple-app-store = [\"apple-sandbox\"]\nc-interface = [\"default\"]\nmultithread = [\"dep:rayon\"]\nlinux-netdevs = []\nlinux-tmpfs = []\ndebug = [\"libc/extra_traits\"]\n# This feature is used on CI to emulate unknown/unsupported target.\nunknown-ci = []\n\n[package.metadata.docs.rs]\nfeatures = [\"serde\"]\n# Setting this default target to prevent `freebsd` to be the default one.\ndefault-target = \"x86_64-unknown-linux-gnu\"\ntargets = [\n    \"i686-unknown-linux-gnu\",\n    \"x86_64-apple-darwin\",\n    \"x86_64-pc-windows-msvc\",\n    \"i686-pc-windows-msvc\",\n    \"x86_64-unknown-freebsd\",\n]\ncargo-args = [\"-Zbuild-std\"]\nrustdoc-args = [\"--generate-link-to-definition\"]\n\n[dependencies]\nmemchr = { version = \"2.5\", optional = true }\nrayon = { version = \"^1.8\", optional = true }\nserde = { version = \"^1.0.190\", optional = true }\n\n[target.'cfg(windows)'.dependencies]\nntapi = { version = \"0.4\", optional = true }\n# Support a range of versions in order to avoid duplication of this crate. Make sure to test all\n# versions when bumping to a new release, and only increase the minimum when absolutely necessary.\nwindows = { version = \">=0.54, <=0.57\", optional = true }\n\n[target.'cfg(not(any(target_os = \"unknown\", target_arch = \"wasm32\")))'.dependencies]\nlibc = \"^0.2.164\"\n\n[target.'cfg(any(target_os = \"macos\", target_os = \"ios\"))'.dependencies]\ncore-foundation-sys = \"0.8.7\"\n\n[target.'cfg(all(target_os = \"linux\", not(target_os = \"android\")))'.dev-dependencies]\ntempfile = \"3.9\"\n\n[dev-dependencies]\nserde_json = \"1.0\" # Used in documentation tests.\nbstr = \"1.9.0\"\ntempfile = \"3.9\"\nitertools = \"0.13.0\"\n\n[[example]]\nname = \"simple\"\npath = \"examples/simple.rs\"\nrequired-features = [\"default\"]\ndoc-scrape-examples = true\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.0576171875,
          "content": "The MIT License (MIT)\n\nCopyright (c) 2015 Guillaume Gomez\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n"
        },
        {
          "name": "Makefile",
          "type": "blob",
          "size": 0.8212890625,
          "content": "#\n# Sysinfo\n#\n# Copyright (c) 2017 Guillaume Gomez\n#\n\n#\n# Please note that this Makefile only generates the c example.\n#\n\nIDIR = ./src\nCC = gcc\nCFLAGS = -I$(IDIR)\n\nODIR = examples/\nLDIR = ./target/debug/\nLDIR-RELEASE = ./target/release/\n\nLIBS = -lsysinfo -lpthread\n\n_DEPS = sysinfo.h\nDEPS = $(patsubst %,$(IDIR)/%,$(_DEPS))\n\n_OBJ = simple.o\nOBJ = $(patsubst %,$(ODIR)/%,$(_OBJ))\n\n\nsimple: $(OBJ)\n\t@echo \"Compiling in debug mode\"\n\tcargo rustc --features=c-interface --crate-type cdylib\n\tgcc -o $@ $^ $(CFLAGS) -L$(LDIR) $(LIBS)\n\nrelease: $(OBJ)\n\t@echo \"Compiling in release mode\"\n\tcargo rustc --features=c-interface --release --crate-type cdylib\n\tgcc -o simple $^ $(CFLAGS) -L$(LDIR-RELEASE) $(LIBS)\n\n$(ODIR)/%.o: %.c $(DEPS)\n\t$(CC) -c -o $@ $< $(CFLAGS)\n\n.PHONY: simple\n\nclean:\n\t@echo \"Cleaning mess\"\n\trm -f $(ODIR)/*.o *~ core $(INCDIR)/*~\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 7.3515625,
          "content": "# sysinfo [![][img_crates]][crates] [![][img_doc]][doc]\n\n`sysinfo` is a crate used to get a system's information.\n\n## Supported OSes\n\nIt currently supports the following OSes (alphabetically sorted):\n\n * Android\n * FreeBSD\n * iOS\n * Linux\n * macOS\n * Raspberry Pi\n * Windows\n\nYou can still use `sysinfo` on non-supported OSes, it'll simply do nothing and always return\nempty values. You can check in your program directly if an OS is supported by checking the\n[`IS_SUPPORTED_SYSTEM`] constant.\n\nThe minimum-supported version of `rustc` is **1.74**.\n\n## Usage\n\nIf you want to migrate from an older version, don't hesitate to take a look at the\n[CHANGELOG](https://github.com/GuillaumeGomez/sysinfo/blob/master/CHANGELOG.md) and at the\n[migration guide](https://github.com/GuillaumeGomez/sysinfo/blob/master/migration_guide.md).\n\n⚠️ Before any attempt to read the different structs' information, you need to update them to\nget up-to-date information because for most of them, it works on diff between the current value\nand the old one.\n\nWhich is why, it's much better to keep the same instance of [`System`] around instead of\nrecreating it multiple times.\n\nYou have an example into the `examples` folder. You can run it with `cargo run --example simple`.\n\nOtherwise, here is a little code sample:\n\n```rust\nuse sysinfo::{\n    Components, Disks, Networks, System,\n};\n\n// Please note that we use \"new_all\" to ensure that all lists of\n// CPUs and processes are filled!\nlet mut sys = System::new_all();\n\n// First we update all information of our `System` struct.\nsys.refresh_all();\n\nprintln!(\"=> system:\");\n// RAM and swap information:\nprintln!(\"total memory: {} bytes\", sys.total_memory());\nprintln!(\"used memory : {} bytes\", sys.used_memory());\nprintln!(\"total swap  : {} bytes\", sys.total_swap());\nprintln!(\"used swap   : {} bytes\", sys.used_swap());\n\n// Display system information:\nprintln!(\"System name:             {:?}\", System::name());\nprintln!(\"System kernel version:   {:?}\", System::kernel_version());\nprintln!(\"System OS version:       {:?}\", System::os_version());\nprintln!(\"System host name:        {:?}\", System::host_name());\n\n// Number of CPUs:\nprintln!(\"NB CPUs: {}\", sys.cpus().len());\n\n// Display processes ID, name na disk usage:\nfor (pid, process) in sys.processes() {\n    println!(\"[{pid}] {:?} {:?}\", process.name(), process.disk_usage());\n}\n\n// We display all disks' information:\nprintln!(\"=> disks:\");\nlet disks = Disks::new_with_refreshed_list();\nfor disk in &disks {\n    println!(\"{disk:?}\");\n}\n\n// Network interfaces name, total data received and total data transmitted:\nlet networks = Networks::new_with_refreshed_list();\nprintln!(\"=> networks:\");\nfor (interface_name, data) in &networks {\n    println!(\n        \"{interface_name}: {} B (down) / {} B (up)\",\n        data.total_received(),\n        data.total_transmitted(),\n    );\n    // If you want the amount of data received/transmitted since last call\n    // to `Networks::refresh`, use `received`/`transmitted`.\n}\n\n// Components temperature:\nlet components = Components::new_with_refreshed_list();\nprintln!(\"=> components:\");\nfor component in &components {\n    println!(\"{component:?}\");\n}\n```\n\nPlease remember that to have some up-to-date information, you need to call the equivalent\n`refresh` method. For example, for the CPU usage:\n\n```rust,no_run\nuse sysinfo::System;\n\nlet mut sys = System::new();\n\nloop {\n    sys.refresh_cpu_usage(); // Refreshing CPU usage.\n    for cpu in sys.cpus() {\n        print!(\"{}% \", cpu.cpu_usage());\n    }\n    // Sleeping to let time for the system to run for long\n    // enough to have useful information.\n    std::thread::sleep(sysinfo::MINIMUM_CPU_UPDATE_INTERVAL);\n}\n```\n\nBy default, `sysinfo` uses multiple threads. However, this can increase the memory usage on some\nplatforms (macOS for example). The behavior can be disabled by setting `default-features = false`\nin `Cargo.toml` (which disables the `multithread` cargo feature).\n\n### Good practice / Performance tips\n\nMost of the time, you don't want all information provided by `sysinfo` but just a subset of it.\nIn this case, it's recommended to use `refresh_specifics(...)` methods with only what you need\nto have much better performance.\n\nAnother issues frequently encountered: unless you know what you're doing, it's almost all the\ntime better to instantiate the `System` struct once and use this one instance through your\nprogram. The reason is because a lot of information needs a previous measure to be computed\n(the CPU usage for example). Another example why it's much better: in case you want to list\nall running processes, `sysinfo` needs to allocate all memory for the `Process` struct list,\nwhich takes quite some time on the first run.\n\nIf your program needs to use a lot of file descriptors, you'd better use:\n\n```rust,no_run\nsysinfo::set_open_files_limit(0);\n```\n\nas `sysinfo` keeps a number of file descriptors open to have better performance on some\ntargets when refreshing processes.\n\n### Running on Raspberry Pi\n\nIt'll be difficult to build on Raspberry Pi. A good way-around is to cross-build, then send the\nexecutable to your Raspberry Pi.\n\nFirst install the arm toolchain, for example on Ubuntu:\n\n```bash\n> sudo apt-get install gcc-multilib-arm-linux-gnueabihf\n```\n\nThen configure cargo to use the corresponding toolchain:\n\n```bash\ncat << EOF > ~/.cargo/config\n[target.armv7-unknown-linux-gnueabihf]\nlinker = \"arm-linux-gnueabihf-gcc\"\nEOF\n```\n\nFinally, cross compile:\n\n```bash\nrustup target add armv7-unknown-linux-gnueabihf\ncargo build --target=armv7-unknown-linux-gnueabihf\n```\n\n### Linux on Docker & Windows Subsystem for Linux (WSL)\n\nVirtual Linux systems, such as those run through Docker and Windows Subsystem for Linux (WSL), do\nnot receive host hardware information via `/sys/class/hwmon` or `/sys/class/thermal`. As such,\nquerying for components may return no results (or unexpected results) when using this library on\nvirtual systems.\n\n### Use in binaries running inside the macOS or iOS Sandbox/stores\n\nApple has restrictions as to which APIs can be linked into binaries that are distributed through the app store.\nBy default, `sysinfo` is not compatible with these restrictions. You can use the `apple-app-store`\nfeature flag to disable the Apple prohibited features. This also enables the `apple-sandbox` feature.\nIn the case of applications using the sandbox outside of the app store, the `apple-sandbox` feature\ncan be used alone to avoid causing policy violations at runtime.\n\n### How it works\n\nI wrote a blog post you can find [here][sysinfo-blog] which explains how `sysinfo` extracts information\non the different systems.\n\n[sysinfo-blog]: https://blog.guillaume-gomez.fr/articles/2021-09-06+sysinfo%3A+how+to+extract+systems%27+information\n\n### C interface\n\nIt's possible to use this crate directly from C. Take a look at the `Makefile` and at the\n`examples/simple.c` file.\n\nTo build the C example, just run:\n\n```bash\n> make\n> ./simple\n# If needed:\n> LD_LIBRARY_PATH=target/debug/ ./simple\n```\n\n### Benchmarks\n\nYou can run the benchmarks locally with rust **nightly** by doing:\n\n```bash\n> cargo bench\n```\n\n## Donations\n\nIf you appreciate my work and want to support me, you can do it with\n[github sponsors](https://github.com/sponsors/GuillaumeGomez) or with\n[patreon](https://www.patreon.com/GuillaumeGomez).\n\n[img_crates]: https://img.shields.io/crates/v/sysinfo.svg\n[img_doc]: https://img.shields.io/badge/rust-documentation-blue.svg\n\n[crates]: https://crates.io/crates/sysinfo\n[doc]: https://docs.rs/sysinfo/\n"
        },
        {
          "name": "benches",
          "type": "tree",
          "content": null
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "funding.json",
          "type": "blob",
          "size": 2.353515625,
          "content": "{\n    \"version\": \"v1.0.0\",\n    \"entity\": {\n        \"type\": \"individual\",\n        \"role\": \"owner\",\n        \"name\": \"Guillaume Gomez\",\n        \"email\": \"guillaume1.gomez@gmail.com\",\n        \"phone\": \"\",\n        \"description\": \"Contributor on multiple open-source projects in the Rust ecosystem, including the Rust compiler itself.\",\n        \"webpageUrl\": {\n            \"url\": \"https://github.com/GuillaumeGomez/sysinfo\"\n        }\n    },\n    \"projects\": [\n        {\n            \"guid\": \"sysinfo-crate\",\n            \"name\": \"sysinfo\",\n            \"description\": \"Cross-platform library to fetch system information.\",\n            \"webpageUrl\": {\n                \"url\": \"https://github.com/GuillaumeGomez/sysinfo\"\n            },\n            \"repositoryUrl\": {\n                \"url\": \"https://github.com/GuillaumeGomez/sysinfo\"\n            },\n            \"licenses\": [\"spdx:MIT\"],\n            \"tags\": [\"rust\", \"system\", \"CPU\", \"process\"]\n        }\n    ],\n    \"funding\": {\n        \"channels\": [\n            {\n                \"guid\": \"github-sponsors\",\n                \"type\": \"payment-provider\",\n                \"address\": \"https://github.com/sponsors/GuillaumeGomez\",\n                \"description\": \"Sponsor me through Github.\"\n            },\n            {\n                \"guid\": \"paypal-sponsors\",\n                \"type\": \"payment-provider\",\n                \"address\": \"https://www.paypal.com/paypalme/imperioland\",\n                \"description\": \"Sponsor me through Paypal.\"\n            }\n        ],\n        \"plans\": [\n            {\n                \"guid\": \"developer-time\",\n                \"status\": \"active\",\n                \"name\": \"Developer compensation\",\n                \"description\": \"This will cover the cost of one developer working part-time on the projects.\",\n                \"amount\": 0,\n                \"currency\": \"USD\",\n                \"frequency\": \"monthly\",\n                \"channels\": [\"github-sponsors\", \"paypal-sponsors\"]\n            },\n            {\n                \"guid\": \"support-plan\",\n                \"status\": \"active\",\n                \"name\": \"Support plan\",\n                \"description\": \"Pay anything you wish/can to show your support for the projects.\",\n                \"amount\": 0,\n                \"currency\": \"USD\",\n                \"frequency\": \"one-time\",\n                \"channels\": [\"github-sponsors\", \"paypal-sponsors\"]\n            }\n        ],\n        \"history\": []\n    }\n}\n"
        },
        {
          "name": "md_doc",
          "type": "tree",
          "content": null
        },
        {
          "name": "migration_guide.md",
          "type": "blob",
          "size": 6.291015625,
          "content": "# Migration guide\n\n## 0.32 to 0.33\n\n### Major changes\n\n`Users::refresh_list`, `Groups::refresh_list`, `Components::refresh_list`, `Networks::refresh_list` and `Disks::refresh_list` methods were renamed into `refresh`. All of them except for `Users::refresh` and `Groups::refresh` expect a boolean to tell whether or not `sysinfo` should keep removed items.\n\n`Component::temperature` and `Component::max` now returns `Option<f32>` instead of returning `f32::NaN` in case the information isn't available.\n\n`*RefreshKind::new` methods were renamed `nothing` to better the match the `*RefreshKind::everything` method.\n\n### New APIs\n\n`Disks` now has a new `refresh_specifics` method expecting a `DiskRefreshKind` argument to allow you finer-grained refreshes.\n\nThe `NetworkData` type now has a new `mtu` method to retrieve the Maximum Transfer Unit.\n\n## 0.31 to 0.32\n\n### Major changes\n\n`System::refresh_process` and `System::refresh_process_specifics` methods now take\nan extra `remove_dead_processes` argument. When set to `true`, dead processes will\nbe removed.\n\n## 0.30 to 0.31\n\nWith this update, the minimum supported Rust version goes up to 1.74.\n\n### Major changes\n\n`System::refresh_process`, `System::refresh_process_specifics` and `System::refresh_pids`\nmethods were removed. The `System::refresh_processes` and `System::refresh_processes_specifics`\nmethods take a new argument of type `ProcessesToUpdate`.\n\nThe equivalent of `System::refresh_process`, `System::refresh_process_specifics` and\n`System::refresh_pids` looks like this:\n\n```rust\nuse sysinfo::{ProcessesToUpdate, System};\n\nlet pid = 1337;\nlet mut s = System::new();\ns.refresh_processes(ProcessesToUpdate::Some(&[pid.into()]));\n```\n\nThe equivalent of `System::refresh_processes` and `System::refresh_processes_specifics` looks\nlike this:\n\n```rust\nuse sysinfo::{ProcessesToUpdate, System};\n\nlet mut s = System::new();\ns.refresh_processes(ProcessesToUpdate::All);\n```\n\n#### Global CPU usage\n\n`System::global_cpu_info` was replaced with `System::global_cpu_usage` which returns an `f32`\nrepresenting the global CPU usage and no other information.\n\n#### Features\n\nYou can now enable/disable parts of `sysinfo` API through its cargo features to have\nsmaller build (size and time). If you're only interested by network information, then\nyou'll import `sysinfo` like this:\n\n```toml\nsysinfo = { version = \"0.31\", default-features = false, features = [\"network\"] }\n```\n\n#### Renaming\n\nThe `TermalSensorType` type was renamed into `ThermalSensorType`.\n\n## 0.29 to 0.30\n\nWith this update, the minimum supported Rust version goes up to 1.69.\n\n### Major changes\n\nThere are two major changes in this update. The first one was that all the traits were removed.\nIt means that now, if you want to use methods on `System`, you don't need to import `SystemExt`\nanymore.\n\nSo before you had:\n\n```rust\nuse sysinfo::{System, SystemExt};\n\n// `SystemExt` is needed for both `new` and `refresh_processes`.\nlet mut s = System::new();\ns.refresh_processes();\n```\n\nAnd now you have:\n\n```rust\nuse sysinfo::System;\n\n// No need for `SystemExt` anymore!\nlet s = System::new();\ns.refresh_processes();\n```\n\nThe second major change was that the `System` type has been split into smaller types:\n * `Components`\n * `Disks`\n * `Networks`\n * `Users`\n\nThe `System` type itself still handles CPU, memory and processes.\n\n### Finer control over what is refreshed\n\nThe `*RefreshKind` types now have many more options allowing you to control exactly what is\nretrieved. In particular, the `ProcessRefreshKind` now allows you to refresh specifically:\n * `cmd`\n * `cpu`\n * `disk_usage`\n * `environ`\n * `exe`\n * `memory`\n * `root`\n * `user`\n\nIn some cases, like `user`, you might want this information to be retrieved only if it hasn't been\nalready. For them, a new `UpdateKind` enum was added. It contains three variants:\n * `Never`\n * `Always`\n * `OnlyIfNotSet`\n\nLike that, you get yet another extra level of control over what's updated and when.\n\n### Constants in `System` have been moved to crate level\n\n`System::IS_SUPPORTED` is now `sysinfo::IS_SUPPORTED_SYSTEM`.\n`System::SUPPORTED_SIGNALS` is now `sysinfo::SUPPORTED_SIGNALS`.\n`System::MINIMUM_CPU_UPDATE_INTERVAL` is now `sysinfo::MINIMUM_CPU_UPDATE_INTERVAL`.\n\n### `System` changes\n\n`System::refresh_pids` and `System::refresh_pids_specifics` methods have been added. They allow you\nto be able to refresh multiple PIDs while being able to have support for `sysinfo` multi-threading\ncontext (and much better performance in any case even if disabled).\n\nSome methods are now static methods:\n * `boot_time`\n * `cpu_arch`\n * `distribution_id`\n * `host_name`\n * `kernel_version`\n * `load_average`\n * `long_os_version`\n * `name`\n * `os_version`\n * `uptime`\n\nMeaning you can call them without having an instance of `System`:\n\n```rust\nprintln!(\"host name: {}\", System::host_name());\n```\n\nA new `System::refresh_memory_specifics` method and a new `MemoryRefreshKind` type were added,\nallowing you to control whether you want both RAM and SWAP memories to be updated or only one of\nthe two. This change was needed because getting SWAP information on Windows is very slow.\n\n`System::tasks` method is now available on all OSes even if it only returns something on Linux. Its\nreturn type is now a `Option<HashSet<Pid>>` instead of `HashMap<Pid, Process>`. The tasks are listed\nin `processes`.\n\n### `Disk` changes\n\n`Disk::name` and `Disk::file_system` now returns `&OsStr`.\n\n### cgroups handling\n\nBefore, `sysinfo` was handling cgroups internally and the users had no control over it. Now there is\na `System::cgroup_limits` method which allows you to query this information if you need it.\n\n### `Process` changes\n\n`Process::cwd`, `Process::exe` and `Process::root` now return an `Option<&Path>`.\n\n### Removal of `sort_by` methods\n\nIf you want to sort `Disks`, `Users` or `Components`, you can do it by calling `sort` (or\nequivalents) on the value returned by the `list_mut` methods.\n\n### New `linux-netdevs` feature\n\nBy default, `sysinfo` excludes network devices because they can make the retrieval hangs\nindefinitely. If you still want to get network devices knowing this risk, you can enable this\nfeature.\n\n### `Cpu` changes\n\nInformation like `Cpu::brand`, `Cpu::vendor_id` or `Cpu::frequency` are not set on the \"global\" CPU.\n\n## CHANGELOG\n\nIf you want the full list of changes, take a look at the\n[CHANGELOG](https://github.com/GuillaumeGomez/sysinfo/blob/master/CHANGELOG.md).\n"
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "test-unknown",
          "type": "tree",
          "content": null
        },
        {
          "name": "test_bin",
          "type": "tree",
          "content": null
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}