{
  "metadata": {
    "timestamp": 1736709006462,
    "page": 73,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjgw",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "tokio-rs/prost",
      "stars": 4050,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".devcontainer",
          "type": "tree",
          "content": null
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.02734375,
          "content": "target\nCargo.lock\n\n.DS_Store"
        },
        {
          "name": ".gitmodules",
          "type": "blob",
          "size": 0.1162109375,
          "content": "[submodule \"third_party/protobuf\"]\n\tpath = third_party/protobuf\n\turl = https://github.com/protocolbuffers/protobuf.git\n"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 6.7509765625,
          "content": "# Prost version 0.13.4\n\n_PROST!_ is a [Protocol Buffers](https://developers.google.com/protocol-buffers/) implementation for the [Rust Language](https://www.rust-lang.org/). `prost` generates simple, idiomatic Rust code from `proto2` and `proto3` files.\n\n## Features\n\n- Impl Name for Protobuf well-known wrapper types (#1174)\n\n## Performance\n\n- NonZeroU64 to optimize encoded_len_varint (#1192)\n\n## Dependencies\n\n- Remove unused `bytes` dependency from `prost-build` (#1169)\n- Update pulldown-cmark-to-cmark requirement from >=16, <=17 to >=16, <=18 (#1173)\n- Update pulldown-cmark-to-cmark requirement from >=16, <=18 to >=16, <=19 (#1195)\n- Update protobuf to v25.3 (#1165)\n- Update protobuf to v25.4 (#1176)\n\n## Styling\n\n- Remove explicit lifetimes (#1180)\n- Remove unnecessary empty line after document (#1181)\n\n## Testing\n\n- *(boxed_field)* Confirm `Foo::bar` is boxed (#1168)\n- Move build.rs to standard location (#1167)\n- *(custom_debug)* Merge `skip_debug` into `custom_debug` (#1178)\n- Rename `invalid_doctest` to `disable_comments` (#1183)\n- *(custom_attributes)* Move module to separate file (#1187)\n\n## Build\n\n- Bump clippy version to 1.82 (#1182)\n- Restrict permissions of `GITHUB_TOKEN` (#1189)\n\n# Prost version 0.13.3\n\n_PROST!_ is a [Protocol Buffers](https://developers.google.com/protocol-buffers/) implementation for the [Rust Language](https://www.rust-lang.org/). `prost` generates simple, idiomatic Rust code from `proto2` and `proto3` files.\n\n\n### Features\n\n- *(prost-types)* Add `normalized` functions (#1158)\n\n### Bug Fixes\n\n- *(prost-build)* Remove `derived(Copy)` on boxed fields (#1157)\n\n### Documentation\n\n- *(prost-types)* Add description of using Any (#1141)\n- *(prost-build)* Use `cargo add` in example (#1149)\n\n### Styling\n\n- Use `Path::display()` when printing a path (#1150)\n- `MessageGraph::new()` can't actually fail (#1151)\n- *(generated-code)* Use `Self` in `as_str_name` (#1154)\n\n### Testing\n\n- Actually test `skip_debug` for `prost::Oneof` (#1148)\n- *(prost-build)* Validate error texts (#1152)\n- *(prost-build)* Fix error texts (#1156)\n\n### Build\n\n- Increase MSRV to 1.71.1 (#1135)\n- *(deps)* Update pulldown-cmark to 0.12 and pulldown-cmark-to-cmark to 16 (#1144)\n- *(protobuf)* Compile and install protoc on Windows (#1145)\n- *(protobuf)* Use same `protoc` from same repo as .proto-files (#1136)\n- *(deps)* Update pulldown-cmark-to-cmark from 16 to 17 (#1155)\n- Unify assert on fixtures (#1142)\n\n# Prost version 0.13.2\n\n_PROST!_ is a [Protocol Buffers](https://developers.google.com/protocol-buffers/) implementation for the [Rust Language](https://www.rust-lang.org/). `prost` generates simple, idiomatic Rust code from `proto2` and `proto3` files.\n\n## Features\n\n- prost-build: Add protoc executable path to Config (#1126)\n- prost-build: Extract file descriptor loading from compile_protos() (#1067)\n\n## Bug Fixes\n\n- prost-types: Fix date-time parsing (#1096)\n- prost-types: '+' is not a numeric digit (#1104)\n- prost-types: Converting DateTime to Timestamp is fallible (#1095)\n- prost-types: Parse timestamp with long second fraction (#1106)\n- prost-types: Format negative fractional duration (#1110)\n- prost-types: Allow unknown local time offset (#1109)\n\n## Styling\n\n- Remove use of legacy numeric constants (#1089)\n- Move encoding functions into separate modules (#1111)\n- Remove needless borrow (#1122)\n\n## Testing\n\n- Add tests for public interface of DecodeError (#1120)\n- Add `parse_date` fuzzing target (#1127)\n- Fix build without std (#1134)\n- Change some proptest to kani proofs (#1133)\n- Add `parse_duration` fuzzing target (#1129)\n- fuzz: Fix building of fuzzing targets (#1107)\n- fuzz: Add fuzz targets to workspace (#1117)\n\n## Miscellaneous Tasks\n\n- Move old protobuf benchmark into prost (#1100)\n- Remove allow clippy::derive_partial_eq_without_eq (#1115)\n- Run `cargo test` without `all-targets` (#1118)\n- dependabot: Add github actions (#1121)\n- Update to cargo clippy version 1.80 (#1128)\n\n## Build\n\n- Use `proc-macro` in Cargo.toml (#1102)\n- Ignore missing features in `tests` crates (#1101)\n- Use separated build directory for protobuf (#1103)\n- protobuf: Don't install unused test proto (#1116)\n- protobuf: Use crate `cmake` (#1137)\n- deps: Update devcontainer to Debian Bookworm release (#1114)\n- deps: Bump actions/upload-artifact from 3 to 4 (#1123)\n- deps: Bump baptiste0928/cargo-install from 2 to 3 (#1124)\n- deps: bump model-checking/kani-github-action from 0.32 to 1.1 (#1125)\n\n# Prost version 0.13.1\n\n_PROST!_ is a [Protocol Buffers](https://developers.google.com/protocol-buffers/) implementation for the [Rust Language](https://www.rust-lang.org/). `prost` generates simple, idiomatic Rust code from `proto2` and `proto3` files.\n\n## Bug fixes\n\n* Enum variant named Error causes ambiguous item (#1098)\n\n# PROST version 0.13.0\n\n**note**: this version was yanked in favor of 0.13.1\n\n_PROST!_ is a [Protocol Buffers](https://developers.google.com/protocol-buffers/) implementation for the [Rust Language](https://www.rust-lang.org/). `prost` generates simple, idiomatic Rust code from `proto2` and `proto3` files.\n\nThis major update brings new features and fixes:\n\n## Breaking changes\n- derive Copy trait for messages where possible (#950)\n\n  `prost-build` will automatically derive `trait Copy` for some messages. If you manually implement `Copy` you should remove your implementation.\n\n- Change generated functions signatures to remove type parameters (#1045)\n\n  The function signature of `trait Message` is changed to use `impl Buf` instead of a named generic type. If you implement `trait Message`, you should change the function signature.\n\n- Lightweight error value in TryFrom<i32> for enums (#1010)\n\n  When a `impl TryFrom<i32>` is generated by `prost` derive macros, it will now return the error type `UnknownEnumValue` instead of `DecodeError`. The new error can be used to retreive the integer value that failed to convert.\n\n## Features\n- fix: Only touch include file if contents is changed (#1058)\n\n  Most generated files are untouched when the contents doesn't change. Use the same mechanism for include file as well.\n\n## Dependencies\n- update env_logger requirement from 0.10 to 0.11 (#1074)\n- update criterion requirement from 0.4 to 0.5 (#1071)\n- Remove unused libz-sys (#1077)\n- build(deps): update itertools requirement from >=0.10, <=0.12 to >=0.10, <=0.13 (#1070)\n\n## Documentation\n- better checking of tag duplicates, avoid discarding invalid variant errs (#951)\n- docs: Fix broken link warnings (#1056)\n- Add missing LICENSE symlink (#1086)\n\n## Internal\n- workspace package metadata (#1036)\n- fix: Build error due to merge conflict (#1068)\n- build: Fix release scripts (#1055)\n- chore: Add ci to check MSRV (#1057)\n- ci: Add all tests pass job (#1069)\n- ci: Add Dependabot (#957)\n- ci: Ensure both README are the same and prost version is correct  (#1078)\n- ci: Set rust version of clippy job to a fixed version (#1090)\n"
        },
        {
          "name": "Cargo.toml",
          "type": "blob",
          "size": 0.5751953125,
          "content": "[workspace]\nmembers = [\n  \"benchmarks\",\n  \"conformance\",\n  \"prost\",\n  \"prost-build\",\n  \"prost-derive\",\n  \"prost-types\",\n  \"protobuf\",\n  \"tests\",\n  \"tests-2015\",\n  \"tests-no-std\",\n  \"tests/single-include\",\n  \"fuzz\",\n]\n\nresolver = \"2\"\n\n[workspace.package]\nversion = \"0.13.4\"\nauthors = [\n  \"Dan Burkert <dan@danburkert.com>\",\n  \"Lucio Franco <luciofranco14@gmail.com>\",\n  \"Casper Meijn <casper@meijn.net>\",\n  \"Tokio Contributors <team@tokio.rs>\",\n]\nlicense = \"Apache-2.0\"\nrepository = \"https://github.com/tokio-rs/prost\"\nrust-version = \"1.71.1\"\nedition = \"2021\"\n\n[profile.bench]\ndebug = true\n"
        },
        {
          "name": "FUZZING.md",
          "type": "blob",
          "size": 0.478515625,
          "content": "# Fuzzing\n\nProst ships a few fuzz tests, using both libfuzzer and aflfuzz.\n\n\n## afl\n\nTo run the afl fuzz tests, first install cargo-afl:\n\n    cargo install -f afl\n\nThen build a fuzz target and run afl on it:\n\n    cd fuzz/afl/<target>/\n    cargo afl build --bin fuzz-target\n    cargo afl fuzz -i in -o out target/debug/fuzz-target\n\nTo reproduce a crash:\n\n    cd fuzz/afl/<target>/\n    cargo build --bin reproduce\n    cargo run --bin reproduce -- out/crashes/<crashfile>\n\n\n## libfuzzer\n\nTODO\n"
        },
        {
          "name": "KANI.md",
          "type": "blob",
          "size": 1.1962890625,
          "content": "# Kani\nThis document describes how to **locally** install and use Kani. Because of instability in\nKani internals, the GitHub action is the recommended option if you are\nrunning in CI.\n\nKani is a software verification tool that complements testing by\nproving the absence of certain classes of bugs like unwrap exceptions,\noverflows, and assertion failures. See the [Kani\nbook](https://model-checking.github.io/kani/) for a full list of\ncapabilities and limitations.\n\n## Installing Kani\n-  The install instructions for Kani can be [found\n   here](https://model-checking.github.io/kani/install-guide.html). Once\n   Kani is installed, you can run with `cargo kani` for projects or\n   `kani` for individual Rust files.\n\n## Running Kani\nAfter installing Kani, `cargo kani` should\nautomatically run `kani::proof` harnesses inside your crate. Use\n`--harness` to run a specific harness, and `-p` for a specific\nsub-crate.\n\nIf Kani returns with an error, you can use the concrete playback\nfeature using `--enable-unstable --concrete-playback print` and paste\nin the code to your repository. Running this harness with `cargo test`\nwill replay the input found by Kani that produced this crash. Please\nnote that this feature is unstable.\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 10.5927734375,
          "content": "                              Apache License\n                        Version 2.0, January 2004\n                     http://www.apache.org/licenses/\n\nTERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n1. Definitions.\n\n   \"License\" shall mean the terms and conditions for use, reproduction,\n   and distribution as defined by Sections 1 through 9 of this document.\n\n   \"Licensor\" shall mean the copyright owner or entity authorized by\n   the copyright owner that is granting the License.\n\n   \"Legal Entity\" shall mean the union of the acting entity and all\n   other entities that control, are controlled by, or are under common\n   control with that entity. For the purposes of this definition,\n   \"control\" means (i) the power, direct or indirect, to cause the\n   direction or management of such entity, whether by contract or\n   otherwise, or (ii) ownership of fifty percent (50%) or more of the\n   outstanding shares, or (iii) beneficial ownership of such entity.\n\n   \"You\" (or \"Your\") shall mean an individual or Legal Entity\n   exercising permissions granted by this License.\n\n   \"Source\" form shall mean the preferred form for making modifications,\n   including but not limited to software source code, documentation\n   source, and configuration files.\n\n   \"Object\" form shall mean any form resulting from mechanical\n   transformation or translation of a Source form, including but\n   not limited to compiled object code, generated documentation,\n   and conversions to other media types.\n\n   \"Work\" shall mean the work of authorship, whether in Source or\n   Object form, made available under the License, as indicated by a\n   copyright notice that is included in or attached to the work\n   (an example is provided in the Appendix below).\n\n   \"Derivative Works\" shall mean any work, whether in Source or Object\n   form, that is based on (or derived from) the Work and for which the\n   editorial revisions, annotations, elaborations, or other modifications\n   represent, as a whole, an original work of authorship. For the purposes\n   of this License, Derivative Works shall not include works that remain\n   separable from, or merely link (or bind by name) to the interfaces of,\n   the Work and Derivative Works thereof.\n\n   \"Contribution\" shall mean any work of authorship, including\n   the original version of the Work and any modifications or additions\n   to that Work or Derivative Works thereof, that is intentionally\n   submitted to Licensor for inclusion in the Work by the copyright owner\n   or by an individual or Legal Entity authorized to submit on behalf of\n   the copyright owner. For the purposes of this definition, \"submitted\"\n   means any form of electronic, verbal, or written communication sent\n   to the Licensor or its representatives, including but not limited to\n   communication on electronic mailing lists, source code control systems,\n   and issue tracking systems that are managed by, or on behalf of, the\n   Licensor for the purpose of discussing and improving the Work, but\n   excluding communication that is conspicuously marked or otherwise\n   designated in writing by the copyright owner as \"Not a Contribution.\"\n\n   \"Contributor\" shall mean Licensor and any individual or Legal Entity\n   on behalf of whom a Contribution has been received by Licensor and\n   subsequently incorporated within the Work.\n\n2. Grant of Copyright License. Subject to the terms and conditions of\n   this License, each Contributor hereby grants to You a perpetual,\n   worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n   copyright license to reproduce, prepare Derivative Works of,\n   publicly display, publicly perform, sublicense, and distribute the\n   Work and such Derivative Works in Source or Object form.\n\n3. Grant of Patent License. Subject to the terms and conditions of\n   this License, each Contributor hereby grants to You a perpetual,\n   worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n   (except as stated in this section) patent license to make, have made,\n   use, offer to sell, sell, import, and otherwise transfer the Work,\n   where such license applies only to those patent claims licensable\n   by such Contributor that are necessarily infringed by their\n   Contribution(s) alone or by combination of their Contribution(s)\n   with the Work to which such Contribution(s) was submitted. If You\n   institute patent litigation against any entity (including a\n   cross-claim or counterclaim in a lawsuit) alleging that the Work\n   or a Contribution incorporated within the Work constitutes direct\n   or contributory patent infringement, then any patent licenses\n   granted to You under this License for that Work shall terminate\n   as of the date such litigation is filed.\n\n4. Redistribution. You may reproduce and distribute copies of the\n   Work or Derivative Works thereof in any medium, with or without\n   modifications, and in Source or Object form, provided that You\n   meet the following conditions:\n\n   (a) You must give any other recipients of the Work or\n       Derivative Works a copy of this License; and\n\n   (b) You must cause any modified files to carry prominent notices\n       stating that You changed the files; and\n\n   (c) You must retain, in the Source form of any Derivative Works\n       that You distribute, all copyright, patent, trademark, and\n       attribution notices from the Source form of the Work,\n       excluding those notices that do not pertain to any part of\n       the Derivative Works; and\n\n   (d) If the Work includes a \"NOTICE\" text file as part of its\n       distribution, then any Derivative Works that You distribute must\n       include a readable copy of the attribution notices contained\n       within such NOTICE file, excluding those notices that do not\n       pertain to any part of the Derivative Works, in at least one\n       of the following places: within a NOTICE text file distributed\n       as part of the Derivative Works; within the Source form or\n       documentation, if provided along with the Derivative Works; or,\n       within a display generated by the Derivative Works, if and\n       wherever such third-party notices normally appear. The contents\n       of the NOTICE file are for informational purposes only and\n       do not modify the License. You may add Your own attribution\n       notices within Derivative Works that You distribute, alongside\n       or as an addendum to the NOTICE text from the Work, provided\n       that such additional attribution notices cannot be construed\n       as modifying the License.\n\n   You may add Your own copyright statement to Your modifications and\n   may provide additional or different license terms and conditions\n   for use, reproduction, or distribution of Your modifications, or\n   for any such Derivative Works as a whole, provided Your use,\n   reproduction, and distribution of the Work otherwise complies with\n   the conditions stated in this License.\n\n5. Submission of Contributions. Unless You explicitly state otherwise,\n   any Contribution intentionally submitted for inclusion in the Work\n   by You to the Licensor shall be under the terms and conditions of\n   this License, without any additional terms or conditions.\n   Notwithstanding the above, nothing herein shall supersede or modify\n   the terms of any separate license agreement you may have executed\n   with Licensor regarding such Contributions.\n\n6. Trademarks. This License does not grant permission to use the trade\n   names, trademarks, service marks, or product names of the Licensor,\n   except as required for reasonable and customary use in describing the\n   origin of the Work and reproducing the content of the NOTICE file.\n\n7. Disclaimer of Warranty. Unless required by applicable law or\n   agreed to in writing, Licensor provides the Work (and each\n   Contributor provides its Contributions) on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n   implied, including, without limitation, any warranties or conditions\n   of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n   PARTICULAR PURPOSE. You are solely responsible for determining the\n   appropriateness of using or redistributing the Work and assume any\n   risks associated with Your exercise of permissions under this License.\n\n8. Limitation of Liability. In no event and under no legal theory,\n   whether in tort (including negligence), contract, or otherwise,\n   unless required by applicable law (such as deliberate and grossly\n   negligent acts) or agreed to in writing, shall any Contributor be\n   liable to You for damages, including any direct, indirect, special,\n   incidental, or consequential damages of any character arising as a\n   result of this License or out of the use or inability to use the\n   Work (including but not limited to damages for loss of goodwill,\n   work stoppage, computer failure or malfunction, or any and all\n   other commercial damages or losses), even if such Contributor\n   has been advised of the possibility of such damages.\n\n9. Accepting Warranty or Additional Liability. While redistributing\n   the Work or Derivative Works thereof, You may choose to offer,\n   and charge a fee for, acceptance of support, warranty, indemnity,\n   or other liability obligations and/or rights consistent with this\n   License. However, in accepting such obligations, You may act only\n   on Your own behalf and on Your sole responsibility, not on behalf\n   of any other Contributor, and only if You agree to indemnify,\n   defend, and hold each Contributor harmless for any liability\n   incurred by, or claims asserted against, such Contributor by reason\n   of your accepting any such warranty or additional liability.\n\nEND OF TERMS AND CONDITIONS\n\nAPPENDIX: How to apply the Apache License to your work.\n\n   To apply the Apache License to your work, attach the following\n   boilerplate notice, with the fields enclosed by brackets \"[]\"\n   replaced with your own identifying information. (Don't include\n   the brackets!)  The text should be enclosed in the appropriate\n   comment syntax for the file format. We also recommend that a\n   file or class name and description of purpose be included on the\n   same \"printed page\" as the copyright notice for easier\n   identification within third-party archives.\n\nCopyright [yyyy] [name of copyright owner]\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n\thttp://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 15.1767578125,
          "content": "[![continuous integration](https://github.com/tokio-rs/prost/actions/workflows/ci.yml/badge.svg?branch=master)](https://github.com/tokio-rs/prost/actions/workflows/ci.yml?query=branch%3Amaster)\n[![Documentation](https://docs.rs/prost/badge.svg)](https://docs.rs/prost/)\n[![Crate](https://img.shields.io/crates/v/prost.svg)](https://crates.io/crates/prost)\n[![Dependency Status](https://deps.rs/repo/github/tokio-rs/prost/status.svg)](https://deps.rs/repo/github/tokio-rs/prost)\n[![Discord](https://img.shields.io/discord/500028886025895936)](https://discord.gg/tokio)\n\n# *PROST!*\n\n`prost` is a [Protocol Buffers](https://developers.google.com/protocol-buffers/)\nimplementation for the [Rust Language](https://www.rust-lang.org/). `prost`\ngenerates simple, idiomatic Rust code from `proto2` and `proto3` files.\n\nCompared to other Protocol Buffers implementations, `prost`\n\n* Generates simple, idiomatic, and readable Rust types by taking advantage of\n  Rust `derive` attributes.\n* Retains comments from `.proto` files in generated Rust code.\n* Allows existing Rust types (not generated from a `.proto`) to be serialized\n  and deserialized by adding attributes.\n* Uses the [`bytes::{Buf, BufMut}`](https://github.com/carllerche/bytes)\n  abstractions for serialization instead of `std::io::{Read, Write}`.\n* Respects the Protobuf `package` specifier when organizing generated code\n  into Rust modules.\n* Preserves unknown enum values during deserialization.\n* Does not include support for runtime reflection or message descriptors.\n\n## Using `prost` in a Cargo Project\n\nFirst, add `prost` and its public dependencies to your `Cargo.toml`:\n\n```ignore\n[dependencies]\nprost = \"0.13\"\n# Only necessary if using Protobuf well-known types:\nprost-types = \"0.13\"\n```\n\nThe recommended way to add `.proto` compilation to a Cargo project is to use the\n`prost-build` library. See the [`prost-build` documentation][prost-build] for\nmore details and examples.\n\nSee the [snazzy repository][snazzy] for a simple start-to-finish example.\n\n[prost-build]: https://docs.rs/prost-build/latest/prost_build/\n[snazzy]: https://github.com/danburkert/snazzy\n\n### MSRV\n\n`prost` follows the `tokio-rs` project's MSRV model and supports 1.70. For more\ninformation on the tokio msrv policy you can check it out [here][tokio msrv]\n\n[tokio msrv]: https://github.com/tokio-rs/tokio/#supported-rust-versions\n\n## Generated Code\n\n`prost` generates Rust code from source `.proto` files using the `proto2` or\n`proto3` syntax. `prost`'s goal is to make the generated code as simple as\npossible.\n\n### `protoc`\n\nWith `prost-build` v0.11 release, `protoc` will be required to invoke\n`compile_protos` (unless `skip_protoc` is enabled). Prost will no longer provide\nbundled `protoc` or attempt to compile `protoc` for users. For install\ninstructions for `protoc`, please check out the [protobuf install] instructions.\n\n[protobuf install]: https://github.com/protocolbuffers/protobuf#protobuf-compiler-installation\n\n\n### Packages\n\nProst can now generate code for `.proto` files that don't have a package spec.\n`prost` will translate the Protobuf package into\na Rust module. For example, given the `package` specifier:\n\n[package]: https://developers.google.com/protocol-buffers/docs/proto#packages\n\n```protobuf,ignore\npackage foo.bar;\n```\n\nAll Rust types generated from the file will be in the `foo::bar` module.\n\n### Messages\n\nGiven a simple message declaration:\n\n```protobuf,ignore\n// Sample message.\nmessage Foo {\n}\n```\n\n`prost` will generate the following Rust struct:\n\n```rust,ignore\n/// Sample message.\n#[derive(Clone, Debug, PartialEq, Message)]\npub struct Foo {\n}\n```\n\n### Fields\n\nFields in Protobuf messages are translated into Rust as public struct fields of the\ncorresponding type.\n\n#### Scalar Values\n\nScalar value types are converted as follows:\n\n| Protobuf Type | Rust Type |\n| --- | --- |\n| `double` | `f64` |\n| `float` | `f32` |\n| `int32` | `i32` |\n| `int64` | `i64` |\n| `uint32` | `u32` |\n| `uint64` | `u64` |\n| `sint32` | `i32` |\n| `sint64` | `i64` |\n| `fixed32` | `u32` |\n| `fixed64` | `u64` |\n| `sfixed32` | `i32` |\n| `sfixed64` | `i64` |\n| `bool` | `bool` |\n| `string` | `String` |\n| `bytes` | `Vec<u8>` |\n\n#### Enumerations\n\nAll `.proto` enumeration types convert to the Rust `i32` type. Additionally,\neach enumeration type gets a corresponding Rust `enum` type. For example, this\n`proto` enum:\n\n```protobuf,ignore\nenum PhoneType {\n  MOBILE = 0;\n  HOME = 1;\n  WORK = 2;\n}\n```\n\ngets this corresponding Rust enum [^1]:\n\n```rust,ignore\npub enum PhoneType {\n    Mobile = 0,\n    Home = 1,\n    Work = 2,\n}\n```\n\n[^1]: Annotations have been elided for clarity. See below for a full example.\n\nYou can convert a `PhoneType` value to an `i32` by doing:\n\n```rust,ignore\nPhoneType::Mobile as i32\n```\n\nThe `#[derive(::prost::Enumeration)]` annotation added to the generated\n`PhoneType` adds these associated functions to the type:\n\n```rust,ignore\nimpl PhoneType {\n    pub fn is_valid(value: i32) -> bool { ... }\n    #[deprecated]\n    pub fn from_i32(value: i32) -> Option<PhoneType> { ... }\n}\n```\n\nIt also adds an `impl TryFrom<i32> for PhoneType`, so you can convert an `i32` to its corresponding `PhoneType` value by doing,\nfor example:\n\n```rust,ignore\nlet phone_type = 2i32;\n\nmatch PhoneType::try_from(phone_type) {\n    Ok(PhoneType::Mobile) => ...,\n    Ok(PhoneType::Home) => ...,\n    Ok(PhoneType::Work) => ...,\n    Err(_) => ...,\n}\n```\n\nAdditionally, wherever a `proto` enum is used as a field in a `Message`, the\nmessage will have 'accessor' methods to get/set the value of the field as the\nRust enum type. For instance, this proto `PhoneNumber` message that has a field\nnamed `type` of type `PhoneType`:\n\n```protobuf,ignore\nmessage PhoneNumber {\n  string number = 1;\n  PhoneType type = 2;\n}\n```\n\nwill become the following Rust type [^2] with methods `type` and `set_type`:\n\n```rust,ignore\npub struct PhoneNumber {\n    pub number: String,\n    pub r#type: i32, // the `r#` is needed because `type` is a Rust keyword\n}\n\nimpl PhoneNumber {\n    pub fn r#type(&self) -> PhoneType { ... }\n    pub fn set_type(&mut self, value: PhoneType) { ... }\n}\n```\n\nNote that the getter methods will return the Rust enum's default value if the\nfield has an invalid `i32` value.\n\nThe `enum` type isn't used directly as a field, because the Protobuf spec\nmandates that enumerations values are 'open', and decoding unrecognized\nenumeration values must be possible.\n\n[^2]: Annotations have been elided for clarity. See below for a full example.\n\n#### Field Modifiers\n\nProtobuf scalar value and enumeration message fields can have a modifier\ndepending on the Protobuf version. Modifiers change the corresponding type of\nthe Rust field:\n\n| `.proto` Version | Modifier | Rust Type |\n| --- | --- | --- |\n| `proto2` | `optional` | `Option<T>` |\n| `proto2` | `required` | `T` |\n| `proto3` | default | `T` for scalar types, `Option<T>` otherwise |\n| `proto3` | `optional` | `Option<T>` |\n| `proto2`/`proto3` | `repeated` | `Vec<T>` |\n\nNote that in `proto3` the default representation for all user-defined message\ntypes is `Option<T>`, and for scalar types just `T` (during decoding, a missing\nvalue is populated by `T::default()`). If you need a witness of the presence of\na scalar type `T`, use the `optional` modifier to enforce an `Option<T>`\nrepresentation in the generated Rust struct.\n\n#### Map Fields\n\nMap fields are converted to a Rust `HashMap` with key and value type converted\nfrom the Protobuf key and value types.\n\n#### Message Fields\n\nMessage fields are converted to the corresponding struct type. The table of\nfield modifiers above applies to message fields, except that `proto3` message\nfields without a modifier (the default) will be wrapped in an `Option`.\nTypically message fields are unboxed. `prost` will automatically box a message\nfield if the field type and the parent type are recursively nested in order to\navoid an infinite sized struct.\n\n#### Oneof Fields\n\nOneof fields convert to a Rust enum. Protobuf `oneof`s types are not named, so\n`prost` uses the name of the `oneof` field for the resulting Rust enum, and\ndefines the enum in a module under the struct. For example, a `proto3` message\nsuch as:\n\n```protobuf,ignore\nmessage Foo {\n  oneof widget {\n    int32 quux = 1;\n    string bar = 2;\n  }\n}\n```\n\ngenerates the following Rust[^3]:\n\n```rust,ignore\npub struct Foo {\n    pub widget: Option<foo::Widget>,\n}\npub mod foo {\n    pub enum Widget {\n        Quux(i32),\n        Bar(String),\n    }\n}\n```\n\n`oneof` fields are always wrapped in an `Option`.\n\n[^3]: Annotations have been elided for clarity. See below for a full example.\n\n### Services\n\n`prost-build` allows a custom code-generator to be used for processing `service`\ndefinitions. This can be used to output Rust traits according to an\napplication's specific needs.\n\n### Generated Code Example\n\nExample `.proto` file:\n\n```protobuf,ignore\nsyntax = \"proto3\";\npackage tutorial;\n\nmessage Person {\n  string name = 1;\n  int32 id = 2;  // Unique ID number for this person.\n  string email = 3;\n\n  enum PhoneType {\n    MOBILE = 0;\n    HOME = 1;\n    WORK = 2;\n  }\n\n  message PhoneNumber {\n    string number = 1;\n    PhoneType type = 2;\n  }\n\n  repeated PhoneNumber phones = 4;\n}\n\n// Our address book file is just one of these.\nmessage AddressBook {\n  repeated Person people = 1;\n}\n```\n\nand the generated Rust code (`tutorial.rs`):\n\n```rust,ignore\n#[derive(Clone, PartialEq, ::prost::Message)]\npub struct Person {\n    #[prost(string, tag=\"1\")]\n    pub name: ::prost::alloc::string::String,\n    /// Unique ID number for this person.\n    #[prost(int32, tag=\"2\")]\n    pub id: i32,\n    #[prost(string, tag=\"3\")]\n    pub email: ::prost::alloc::string::String,\n    #[prost(message, repeated, tag=\"4\")]\n    pub phones: ::prost::alloc::vec::Vec<person::PhoneNumber>,\n}\n/// Nested message and enum types in `Person`.\npub mod person {\n    #[derive(Clone, PartialEq, ::prost::Message)]\n    pub struct PhoneNumber {\n        #[prost(string, tag=\"1\")]\n        pub number: ::prost::alloc::string::String,\n        #[prost(enumeration=\"PhoneType\", tag=\"2\")]\n        pub r#type: i32,\n    }\n    #[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]\n    #[repr(i32)]\n    pub enum PhoneType {\n        Mobile = 0,\n        Home = 1,\n        Work = 2,\n    }\n}\n/// Our address book file is just one of these.\n#[derive(Clone, PartialEq, ::prost::Message)]\npub struct AddressBook {\n    #[prost(message, repeated, tag=\"1\")]\n    pub people: ::prost::alloc::vec::Vec<Person>,\n}\n```\n\n## Accessing the `protoc` `FileDescriptorSet`\n\nThe `prost_build::Config::file_descriptor_set_path` option can be used to emit a file descriptor set\nduring the build & code generation step. When used in conjunction with the `std::include_bytes`\nmacro and the `prost_types::FileDescriptorSet` type, applications and libraries using Prost can\nimplement introspection capabilities requiring details from the original `.proto` files.\n\n## Using `prost` in a `no_std` Crate\n\n`prost` is compatible with `no_std` crates. To enable `no_std` support, disable\nthe `std` features in `prost` and `prost-types`:\n\n```ignore\n[dependencies]\nprost = { version = \"0.13.4\", default-features = false, features = [\"prost-derive\"] }\n# Only necessary if using Protobuf well-known types:\nprost-types = { version = \"0.13.4\", default-features = false }\n```\n\nAdditionally, configure `prost-build` to output `BTreeMap`s instead of `HashMap`s\nfor all Protobuf `map` fields in your `build.rs`:\n\n```rust,ignore\nlet mut config = prost_build::Config::new();\nconfig.btree_map(&[\".\"]);\n```\n\nWhen using edition 2015, it may be necessary to add an `extern crate core;`\ndirective to the crate which includes `prost`-generated code.\n\n## Serializing Existing Types\n\n`prost` uses a custom derive macro to handle encoding and decoding types, which\nmeans that if your existing Rust type is compatible with Protobuf types, you can\nserialize and deserialize it by adding the appropriate derive and field\nannotations.\n\nCurrently the best documentation on adding annotations is to look at the\ngenerated code examples above.\n\n### Tag Inference for Existing Types\n\nProst automatically infers tags for the struct.\n\nFields are tagged sequentially in the order they\nare specified, starting with `1`.\n\nYou may skip tags which have been reserved, or where there are gaps between\nsequentially occurring tag values by specifying the tag number to skip to with\nthe `tag` attribute on the first field after the gap. The following fields will\nbe tagged sequentially starting from the next number.\n\n```rust,ignore\nuse prost;\nuse prost::{Enumeration, Message};\n\n#[derive(Clone, PartialEq, Message)]\nstruct Person {\n    #[prost(string, tag = \"1\")]\n    pub id: String, // tag=1\n    // NOTE: Old \"name\" field has been removed\n    // pub name: String, // tag=2 (Removed)\n    #[prost(string, tag = \"6\")]\n    pub given_name: String, // tag=6\n    #[prost(string)]\n    pub family_name: String, // tag=7\n    #[prost(string)]\n    pub formatted_name: String, // tag=8\n    #[prost(uint32, tag = \"3\")]\n    pub age: u32, // tag=3\n    #[prost(uint32)]\n    pub height: u32, // tag=4\n    #[prost(enumeration = \"Gender\")]\n    pub gender: i32, // tag=5\n    // NOTE: Skip to less commonly occurring fields\n    #[prost(string, tag = \"16\")]\n    pub name_prefix: String, // tag=16  (eg. mr/mrs/ms)\n    #[prost(string)]\n    pub name_suffix: String, // tag=17  (eg. jr/esq)\n    #[prost(string)]\n    pub maiden_name: String, // tag=18\n}\n\n#[derive(Clone, Copy, Debug, PartialEq, Eq, Enumeration)]\npub enum Gender {\n    Unknown = 0,\n    Female = 1,\n    Male = 2,\n}\n```\n\n## Nix\n\nThe prost project maintains flakes support for local development. Once you have\nnix and nix flakes setup you can just run `nix develop` to get a shell\nconfigured with the required dependencies to compile the whole project.\n\n## Feature Flags\n- `std`: Enable integration with standard library. Disable this feature for `no_std` support. This feature is enabled by default.\n- `derive`: Enable integration with `prost-derive`. Disable this feature to reduce compile times. This feature is enabled by default.\n- `prost-derive`: Deprecated. Alias for `derive` feature.\n- `no-recursion-limit`: Disable the recursion limit. The recursion limit is 100 and cannot be customized. \n\n## FAQ\n\n1. **Could `prost` be implemented as a serializer for [Serde](https://serde.rs/)?**\n\n  Probably not, however I would like to hear from a Serde expert on the matter.\n  There are two complications with trying to serialize Protobuf messages with\n  Serde:\n\n  - Protobuf fields require a numbered tag, and currently there appears to be no\n    mechanism suitable for this in `serde`.\n  - The mapping of Protobuf type to Rust type is not 1-to-1. As a result,\n    trait-based approaches to dispatching don't work very well. Example: six\n    different Protobuf field types correspond to a Rust `Vec<i32>`: `repeated\n    int32`, `repeated sint32`, `repeated sfixed32`, and their packed\n    counterparts.\n\n  But it is possible to place `serde` derive tags onto the generated types, so\n  the same structure can support both `prost` and `Serde`.\n\n2. **I get errors when trying to run `cargo test` on MacOS**\n\n  If the errors are about missing `autoreconf` or similar, you can probably fix\n  them by running\n\n  ```ignore\n  brew install automake\n  brew install libtool\n  ```\n\n## License\n\n`prost` is distributed under the terms of the Apache License (Version 2.0).\n\nSee [LICENSE](https://github.com/tokio-rs/prost/blob/master/LICENSE) for details.\n\nCopyright 2022 Dan Burkert & Tokio Contributors\n"
        },
        {
          "name": "benchmarks",
          "type": "tree",
          "content": null
        },
        {
          "name": "clippy.toml",
          "type": "blob",
          "size": 0.0322265625,
          "content": "too-many-arguments-threshold = 8\n"
        },
        {
          "name": "conformance",
          "type": "tree",
          "content": null
        },
        {
          "name": "flake.lock",
          "type": "blob",
          "size": 1.4638671875,
          "content": "{\n  \"nodes\": {\n    \"flake-utils\": {\n      \"inputs\": {\n        \"systems\": \"systems\"\n      },\n      \"locked\": {\n        \"lastModified\": 1731533236,\n        \"narHash\": \"sha256-l0KFg5HjrsfsO/JpG+r7fRrqm12kzFHyUHqHCVpMMbI=\",\n        \"owner\": \"numtide\",\n        \"repo\": \"flake-utils\",\n        \"rev\": \"11707dc2f618dd54ca8739b309ec4fc024de578b\",\n        \"type\": \"github\"\n      },\n      \"original\": {\n        \"owner\": \"numtide\",\n        \"repo\": \"flake-utils\",\n        \"type\": \"github\"\n      }\n    },\n    \"nixpkgs\": {\n      \"locked\": {\n        \"lastModified\": 1735648875,\n        \"narHash\": \"sha256-fQ4k/hyQiH9RRPznztsA9kbcDajvwV1sRm01el6Sr3c=\",\n        \"owner\": \"NixOS\",\n        \"repo\": \"nixpkgs\",\n        \"rev\": \"47e29c20abef74c45322eca25ca1550cdf5c3b50\",\n        \"type\": \"github\"\n      },\n      \"original\": {\n        \"owner\": \"NixOS\",\n        \"ref\": \"nixpkgs-unstable\",\n        \"repo\": \"nixpkgs\",\n        \"type\": \"github\"\n      }\n    },\n    \"root\": {\n      \"inputs\": {\n        \"flake-utils\": \"flake-utils\",\n        \"nixpkgs\": \"nixpkgs\"\n      }\n    },\n    \"systems\": {\n      \"locked\": {\n        \"lastModified\": 1681028828,\n        \"narHash\": \"sha256-Vy1rq5AaRuLzOxct8nz4T6wlgyUR7zLU309k9mBC768=\",\n        \"owner\": \"nix-systems\",\n        \"repo\": \"default\",\n        \"rev\": \"da67096a3b9bf56a91d16901293e51ba5b49a27e\",\n        \"type\": \"github\"\n      },\n      \"original\": {\n        \"owner\": \"nix-systems\",\n        \"repo\": \"default\",\n        \"type\": \"github\"\n      }\n    }\n  },\n  \"root\": \"root\",\n  \"version\": 7\n}\n"
        },
        {
          "name": "flake.nix",
          "type": "blob",
          "size": 0.51953125,
          "content": "{\n  description = \"Prost dependencies\";\n\n  inputs = {\n    nixpkgs.url = \"github:NixOS/nixpkgs/nixpkgs-unstable\";\n    flake-utils.url = \"github:numtide/flake-utils\";\n  };\n\n  outputs = { self, nixpkgs, flake-utils }:\n    flake-utils.lib.eachDefaultSystem (system:\n      let\n        pkgs = import nixpkgs { inherit system; };\n      in\n      {\n        devShells.default = pkgs.mkShell {\n          packages = with pkgs; [ cargo rustc ];\n          buildInputs = with pkgs; [ pkg-config protobuf curl cmake ninja ];\n        };\n      });\n}\n"
        },
        {
          "name": "fuzz",
          "type": "tree",
          "content": null
        },
        {
          "name": "prepare-release.sh",
          "type": "blob",
          "size": 1.6875,
          "content": "#!/bin/bash\n\n# Script which automates modifying source version fields, and creating a release\n# commit and tag. The commit and tag are not automatically pushed, nor are the\n# crates published (see publish-release.sh).\n\nset -ex\n\nif [ \"$#\" -ne 1 ]\nthen\n  echo \"Usage: $0 <version>\"\n  exit 1\nfi\n\nDIR=\"$( cd \"$( dirname \"${BASH_SOURCE[0]}\" )\" >/dev/null 2>&1 && pwd )\"\nVERSION=\"$1\"\nMINOR=\"$( echo ${VERSION} | cut -d\\. -f1-2 )\"\n\nVERSION_MATCHER=\"([a-z0-9\\\\.-]+)\"\nPROST_CRATE_MATCHER=\"(prost|prost-[a-z]+)\"\n\n# Update the README.md.\nsed -i -E \"s/version = \\\"${VERSION_MATCHER}\\\"/version = \\\"${VERSION}\\\"/\" \"$DIR/README.md\"\nsed -i -E \"s/version = \\\"${VERSION_MATCHER}\\\"/version = \\\"${VERSION}\\\"/\" \"$DIR/prost/README.md\"\nsed -i -E \"s/${PROST_CRATE_MATCHER} = \\\"${VERSION_MATCHER}\\\"/\\1 = \\\"${MINOR}\\\"/\" \"$DIR/README.md\"\nsed -i -E \"s/${PROST_CRATE_MATCHER} = \\\"${VERSION_MATCHER}\\\"/\\1 = \\\"${MINOR}\\\"/\" \"$DIR/prost/README.md\"\n\n# Update html_root_url attributes.\nsed -i -E \"s~html_root_url = \\\"https://docs\\.rs/${PROST_CRATE_MATCHER}/$VERSION_MATCHER\\\"~html_root_url = \\\"https://docs.rs/\\1/${VERSION}\\\"~\" \\\n  \"$DIR/prost/src/lib.rs\" \\\n  \"$DIR/prost-derive/src/lib.rs\" \\\n  \"$DIR/prost-build/src/lib.rs\" \\\n  \"$DIR/prost-types/src/lib.rs\"\n\n# Update Cargo.toml version fields.\nsed -i -E \"s/^version = \\\"${VERSION_MATCHER}\\\"$/version = \\\"${VERSION}\\\"/\" \\\n  \"$DIR/Cargo.toml\"\n\n# Update Cargo.toml dependency versions.\nsed -i -E \"s/^${PROST_CRATE_MATCHER} = \\{ version = \\\"${VERSION_MATCHER}\\\"/\\1 = { version = \\\"${VERSION}\\\"/\" \\\n  \"$DIR/prost/Cargo.toml\" \\\n  \"$DIR/prost-derive/Cargo.toml\" \\\n  \"$DIR/prost-build/Cargo.toml\" \\\n  \"$DIR/prost-types/Cargo.toml\"\n\ngit commit -a -m \"release ${VERSION}\"\ngit tag -a \"v${VERSION}\" -m \"release ${VERSION}\"\n"
        },
        {
          "name": "prost-build",
          "type": "tree",
          "content": null
        },
        {
          "name": "prost-derive",
          "type": "tree",
          "content": null
        },
        {
          "name": "prost-types",
          "type": "tree",
          "content": null
        },
        {
          "name": "prost",
          "type": "tree",
          "content": null
        },
        {
          "name": "protobuf",
          "type": "tree",
          "content": null
        },
        {
          "name": "publish-release.sh",
          "type": "blob",
          "size": 0.48046875,
          "content": "#!/bin/bash\n\n# Script which automates publishing a crates.io release of the prost crates.\n\nset -ex\n\nif [ \"$#\" -ne 0 ]\nthen\n  echo \"Usage: $0\"\n  exit 1\nfi\n\nDIR=\"$( cd \"$( dirname \"${BASH_SOURCE[0]}\" )\" >/dev/null 2>&1 && pwd )\"\n\nCRATES=( \\\n  \"prost-derive\" \\\n  \"prost\" \\\n  \"prost-types\" \\\n  \"prost-build\" \\\n)\n\nfor CRATE in \"${CRATES[@]}\"; do\n  pushd \"$DIR/$CRATE\"\n\n  echo \"Publishing $CRATE\"\n\n  cargo publish\n\n  echo \"Sleeping 5 seconds...for the release to be visible\"\n  sleep 5\n\n  popd\ndone\n"
        },
        {
          "name": "taplo.toml",
          "type": "blob",
          "size": 0.0400390625,
          "content": "[formatting]\ninline_table_expand = false\n"
        },
        {
          "name": "tests-2015",
          "type": "tree",
          "content": null
        },
        {
          "name": "tests-2018",
          "type": "tree",
          "content": null
        },
        {
          "name": "tests-no-std",
          "type": "tree",
          "content": null
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        },
        {
          "name": "third_party",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}