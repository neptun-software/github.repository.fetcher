{
  "metadata": {
    "timestamp": 1736709282132,
    "page": 640,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjY0MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "wasmi-labs/wasmi",
      "stars": 1647,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".config",
          "type": "tree",
          "content": null
        },
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 0.15234375,
          "content": "root = true\n[*]\nindent_style=space\nindent_size = 4\nend_of_line=lf\ncharset=utf-8\ntrim_trailing_whitespace=true\nmax_line_length=120\ninsert_final_newline=true\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.123046875,
          "content": "\n/target/\n**/*.rs.bk\nspec/target\n\n**/fuzz/corpus/\n**/fuzz/target/\n**/fuzz/artifacts/\n**/fuzz/crash-inputs/\n**/fuzz/Cargo.lock\n"
        },
        {
          "name": ".gitmodules",
          "type": "blob",
          "size": 0.2626953125,
          "content": "[submodule \"crates/wasmi/tests/spec/testsuite\"]\n\tpath = crates/wasmi/tests/spec/testsuite\n\turl = https://github.com/WebAssembly/testsuite.git\n[submodule \"crates/wasmi/benches/rust\"]\n\tpath = crates/wasmi/benches/rust\n\turl = https://github.com/wasmi-labs/rust-benchmarks\n"
        },
        {
          "name": ".rustfmt.toml",
          "type": "blob",
          "size": 0.119140625,
          "content": "imports_granularity = \"Crate\"\nimports_layout = \"HorizontalVertical\"\nedition = \"2021\"\nmatch_arm_leading_pipes = \"Preserve\"\n"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 57.919921875,
          "content": "# Changelog\n\nAll notable changes to this project will be documented in this file.\n\nThe format is loosely based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/),\nand this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0.html).\nAdditionally we have an `Internal` section for changes that are of interest to developers.\n\nDates in this file are formattes as `YYYY-MM-DD`.\n\n## [`0.40.0`] - 2024-11-27\n\nThis release focuses on compile time improvements for Wasmi,\nsignificantly reducing the time it takes to compile Wasmi and\ndecrease its compiled artifact size.\n\n### Added\n\n- Added optimization for `load` and `store` lowering. [#1303]\n    - This reduces the total number of Wasmi instructions.\n- Added `prefix-symbols` crate feature to `wasmi_c_api_impl` crate. [#1315]\n    - This allows to prefix all exported symbols with `wasmi_` in order to\n      avoid duplicate symbols when linking multiple Wasm runtimes implementing\n      the Wasm C-API.\n\n### Fixed\n\n- C-API\n    - Fix a minor compilation issue. [#1296]\n    - Fix the name of `wasmi_config_compilation_mode_set` [#1298]\n- Conditionally forward the `string-interner/std` crate feature. [#1304]\n- Fix Wasmtime fuzzer oracle config usage. [#1314]\n\n### Changed\n\n- Bumped minimum supported Rust version from v1.79 -> v1.80. [#1318]\n- Replace the `wasmparser-nostd` fork with upstream `wasmparser`. [#1141]\n    - This allows Wasmi to implement new Wasm proposals.\n    - Unfortunately this update also regresses Wasmi translation performance\n      by roughly 5-15% depending on the exact Wasm blob and translation mode.\n- Update the `string-interner` and `hashbrown` dependencies. [#1305]\n\n### Internal\n\n- Update the `wast` dependency for Wasmi's Wast runner. [#1306]\n- Update `wasm-tools` dependencies to `v0.221`. [#1318]\n\n[#1141]: https://github.com/wasmi-labs/wasmi/pull/1141\n[#1296]: https://github.com/wasmi-labs/wasmi/pull/1296\n[#1298]: https://github.com/wasmi-labs/wasmi/pull/1298\n[#1303]: https://github.com/wasmi-labs/wasmi/pull/1303\n[#1304]: https://github.com/wasmi-labs/wasmi/pull/1304\n[#1305]: https://github.com/wasmi-labs/wasmi/pull/1305\n[#1306]: https://github.com/wasmi-labs/wasmi/pull/1306\n[#1314]: https://github.com/wasmi-labs/wasmi/pull/1314\n[#1315]: https://github.com/wasmi-labs/wasmi/pull/1315\n[#1318]: https://github.com/wasmi-labs/wasmi/pull/1318\n\n## [`0.39.1`] - 2024-11-06\n\n### Fixed\n\n- Fixed a bug when translating double negations in expression contexts. [#1293]\n\n[#1293]: https://github.com/wasmi-labs/wasmi/pull/1293\n\n## [`0.39.0`] - 2024-11-04\n\n### Added\n\n- Add new `Linker` APIs. [#1281]\n  - `Linker::instance`: conveniently add exports from an instance to a linker.\n  - `Linker::alias_module`: alias module definitions via another name.\n  - `Linker::allow_shadowing`: enable to shadow previous definitions without errors.\n- Add `hash-collections` and `prefer-btree-collections` crate features to the `wasmi` crate. [#1265]\n    - This allows for more fine grained control over Wasmi\n      dependencies to further decrease compile times.\n- Add lowering of compare instructions and fused branch+compare instructions. [#1243]\n    - This improved performance for certain workloads and\n      reduced the total Wasmi instruction count significantly.\n\n### Fixed\n\n- Fixed a bug in translation of fused `cmp+branch` instructions with huge offsets.\n  - This was fixed as a side product in [#1243].\n\n### Removed\n\n- Removed the `no-hash-maps` crate feature. [#1265]\n- Removed some minor `wasmi` crate dependencies. [#1266] [#1267]\n  - This should improve compile times of the `wasmi` crate slightly.\n\n### Internal\n\n- Modernize fuzzer and significantly improve fuzzing test coverage.\n  - Reworked `differential` fuzzing entirely. [#1257]\n    - This also improves handling of non-deterministic behavior\n      between Wasm runtimes in `differential` fuzzing.\n  - Add `wasmi_fuzz` crate for better code organization. [#1252]\n  - Merged `translate` and `translate_metered` fuzzers. [#1249]\n- Modernize Wasmi `.wast` directives runner. [#1279]\n  - Overall this significantly improved readability and maintainability\n    of the Wasmi `.wast` directives runner.\n\n[#1243]: https://github.com/wasmi-labs/wasmi/pull/1243\n[#1249]: https://github.com/wasmi-labs/wasmi/pull/1249\n[#1252]: https://github.com/wasmi-labs/wasmi/pull/1252\n[#1257]: https://github.com/wasmi-labs/wasmi/pull/1257\n[#1265]: https://github.com/wasmi-labs/wasmi/pull/1265\n[#1266]: https://github.com/wasmi-labs/wasmi/pull/1266\n[#1267]: https://github.com/wasmi-labs/wasmi/pull/1267\n[#1279]: https://github.com/wasmi-labs/wasmi/pull/1279\n[#1281]: https://github.com/wasmi-labs/wasmi/pull/1281\n\n## [`0.38.0`] - 2024-10-06\n\n### Added\n\n- Add `no-hash-maps` crate feature to Wasmi CLI and enable it by default. [#1225]\n\n### Internal\n\n- Rename various instructions and add `ShiftAmount` abstraction. [#1221]\n- Use Rust's `ControlFlow` utility. [#1223]\n- Use `get_memory` in `load` and `store` execution handlers. [#1224]\n\n[#1221]: https://github.com/wasmi-labs/wasmi/pull/1221\n[#1223]: https://github.com/wasmi-labs/wasmi/pull/1223\n[#1224]: https://github.com/wasmi-labs/wasmi/pull/1224\n[#1225]: https://github.com/wasmi-labs/wasmi/pull/1225\n\n## [`0.37.2`] - 2024-10-04\n\n### Added\n\n- Added a new `extra-checks` crate feature to the `wasmi` crate. [#1217]\n\n    - This improves unreachability checks in when `debug-assertions` or `extra-checks` are enabled.\n    - If `extra-checks` are disabled, some technically unnecessary runtime checks are no longer performed.\n    - Use `extra-checks` if your focus is on safety, disable if your focus is on performance.\n\n### Fixed\n\n- Fixed a bug in local preservation when translating Wasm `loop` control flow. [#1218]\n\n[#1217]: https://github.com/wasmi-labs/wasmi/pull/1217\n[#1218]: https://github.com/wasmi-labs/wasmi/pull/1218\n\n## [`0.37.1`] - 2024-10-01\n\n### Fixed\n\n- Fixed a bug in `select` translation constant propagation. [#1213]\n\n[#1213]: https://github.com/wasmi-labs/wasmi/pull/1213\n\n## [`0.37.0`] - 2024-09-30\n\n### Added\n\n- Added support for Wasm `multi-memory` proposal. [#1191]\n- Added `Store::call_hook` API. [#1144]\n  - Contributed by [emiltayl](https://github.com/emiltayl).\n\n### Changed\n\n- Updated WASI dependencies. [#1140]\n  - This fixes some long-standing bugs in the `wasmi_wasi` crate.\n\n### Fixed\n\n- This release includes all fixes that have been backported to `v0.36.1`, `v0.36.2` and `v0.36.5`.\n\n### Internal\n\n- Add new Wasmi bytecode. [#1152]\n  - This was a major undertaking with lots of sub-issues and PRs.\n  - The Wasmi bytecode definitions now reside in their own [`wasmi_ir` crate].\n  - Most of the definitions are sourced from a single Rust macro to reduce maintenance friction.\n- Remove unnecessary `iextend` instructions. [#1147]\n- Changed encoding for Wasmi `call_indirect` instructions. [#1156]\n  - The new encoding improves performance and reduces the number of function local constants.\n- Changed encoding for Wasmi `select` instructions. [#1157]\n  - The new encoding is more straight-forward and aims to simplify the Wasmi executor and translator.\n- Changed encoding for Wasmi `br_table` instruction. [#1158]\n  - The new encoding improves performance and memory consumption for certain use cases.\n- Minor improvements to Wasmi bytecode.\n  - `MemoryGrowBy` now takes `u32` delta. [#1193]\n  - Improved `storeN` encoding with immediates. [#1194]\n\n[#1144]: https://github.com/wasmi-labs/wasmi/pull/1144\n[#1147]: https://github.com/wasmi-labs/wasmi/pull/1147\n[#1140]: https://github.com/wasmi-labs/wasmi/pull/1140\n[#1152]: https://github.com/wasmi-labs/wasmi/pull/1152\n[#1156]: https://github.com/wasmi-labs/wasmi/pull/1156\n[#1157]: https://github.com/wasmi-labs/wasmi/pull/1157\n[#1158]: https://github.com/wasmi-labs/wasmi/pull/1158\n[#1191]: https://github.com/wasmi-labs/wasmi/pull/1191\n[#1193]: https://github.com/wasmi-labs/wasmi/pull/1193\n[#1194]: https://github.com/wasmi-labs/wasmi/pull/1194\n\n[`wasmi_ir` crate]: https://crates.io/crates/wasmi_ir\n\n## [`0.36.5`] - 2024-10-11\n\n### Fixed\n\n- Fixed a bug with `table.get` translation when `index` is a preserved register. [#commit-b4e78d]\n\n[#commit-82c938]: https://github.com/wasmi-labs/wasmi/commit/82c9388f1d54e4e74e1b581f11978b4028eeaba2\n\n## [`0.36.4`] - 2024-10-03\n\n### Fixed\n\n- Fixed a bug in local preservation when translating Wasm `loop` control flow. [#1218]\n\n[#1218]: https://github.com/wasmi-labs/wasmi/pull/1218\n\n## [`0.36.3`] - 2024-10-01\n\n### Fixed\n\n- Fixed a bug in `select` translation constant propagation. [#1213]\n\n[#1213]: https://github.com/wasmi-labs/wasmi/pull/1213\n\n## [`0.36.2`] - 2024-09-28\n\n### Fixed\n\n- Fix miri reported UB in `FuncRef` and `ExternRef` conversions. [#1201]\n- Fix bug in `table.init` from imported `global.get` values. [#1192]\n\n### Changed\n\n- Changed some `inline` annotations in the Wasmi executor. [#commit-b4e78d]\n    - This change had minor positive effects on the performance of commonly executed Wasmi instructions.\n\n[#1192]: https://github.com/wasmi-labs/wasmi/pull/1192\n[#1201]: https://github.com/wasmi-labs/wasmi/pull/1201\n[#commit-b4e78d]: https://github.com/wasmi-labs/wasmi/commit/b4e78d23451cb40a7b43404f8e6e868a362b7985\n\n## [`0.36.1`] - 2024-09-20\n\n### Fixed\n\n- Fixed `ref.is_null` translation constant propagation issue. [#1189]\n- Fixed invalid overwrite of preserved local register. [#1177]\n- Removed faulty `br_table` optimization.\n    - [Link to Commit](https://github.com/wasmi-labs/wasmi/commit/a646d27a4d69e73dffb30bf706bfb394dfa6a27f)\n- Fix a few `clippy` warnings.\n\n[#1177]: https://github.com/wasmi-labs/wasmi/pull/1177\n[#1189]: https://github.com/wasmi-labs/wasmi/pull/1189\n\n## [`0.36.0`] - 2024-07-24\n\n### Added\n\n- Added support for the official Wasm C-API. (https://github.com/wasmi-labs/wasmi/pull/1009)\n  - This allows to use Wasmi from any program that can interface with C code.\n  - The `wasmi_c_api_impl` crate allows to use Wasmi via the Wasm C-API from Rust code.\n- Added `Instance::new` API. (https://github.com/wasmi-labs/wasmi/pull/1134)\n  - This was mainly needed to support the Wasm C-API.\n  - The new API offers a more low-level way for Wasm module instantiation\n    that may be more efficient for certain use cases.\n- Added `Clone` implementation for `Module`. (https://github.com/wasmi-labs/wasmi/pull/1130)\n  - This was mainly needed to support the Wasm C-API.\n\n### Changed\n\n- The store fuel API now returns `Error` instead of `FuelError`. (https://github.com/wasmi-labs/wasmi/pull/1131)\n  - This was needed to support the Wasm C-API.\n  - The `FuelError` is still accessible via the `Error::kind` method.\n\n## [`0.35.0`] - 2024-07-11\n\n### Fixed\n\n- Fixed a dead-lock that prevented users from compiling Wasm modules in host functions\n  called from Wasmi's executor. (https://github.com/wasmi-labs/wasmi/pull/1122)\n    - This was a very long-standing bug in the Wasmi interpreter and it is now finally closed.\n    - Note that this regressed performance of call-intense workloads by roughly 5-10%.\n      Future work is under way to hopefully fix these regressions.\n    - Before this fix, users had to use a work-around using resumable function calls to\n      cirumvent this issue which is no longer necessary, fortunately.\n\n### Internals\n\n- Add `CodeMap::alloc_funcs` API and use it when compiling Wasm modules. (https://github.com/wasmi-labs/wasmi/pull/1125)\n    - This significantly improved performance for lazily compiling\n      Wasm modules (e.g.  via `Module::new`) by up to 23%.\n\n## [`0.34.0`] - 2024-07-08\n\n### Added\n\n- Allows Wasmi CLI to be installed with locked dependencies. ([#1096])\n    - This can be done as follows: `cargo install --locked wasmi_cli`\n\n### Fixed\n\n- Allow Wasm module instantiation in host functions called from Wasmi's executor. ([#1116])\n\n### Changed\n\n- Limit number of parameter and result types in `FuncType` to 1000, each. ([#1116])\n\n### Dev. Note\n\n- Significantly improved and Wasmi's CI and made it a lot faster.\n    - Multi PR effort: [#1098], [#1100], [#1104]\n- Refactored and cleaned-up call based and Rust sourced Wasmi benchmarks.\n    - Call-based Benchmarks: [#1102], [#1113]\n    - Rust-sourced Benchmarks: [#1107], [#1108], [#1109], [#1111], [#1115]\n\n[#1096]: https://github.com/wasmi-labs/wasmi/pull/1096\n[#1098]: https://github.com/wasmi-labs/wasmi/pull/1098\n[#1100]: https://github.com/wasmi-labs/wasmi/pull/1100\n[#1102]: https://github.com/wasmi-labs/wasmi/pull/1102\n[#1104]: https://github.com/wasmi-labs/wasmi/pull/1104\n[#1107]: https://github.com/wasmi-labs/wasmi/pull/1107\n[#1108]: https://github.com/wasmi-labs/wasmi/pull/1108\n[#1109]: https://github.com/wasmi-labs/wasmi/pull/1109\n[#1111]: https://github.com/wasmi-labs/wasmi/pull/1111\n[#1113]: https://github.com/wasmi-labs/wasmi/pull/1113\n[#1115]: https://github.com/wasmi-labs/wasmi/pull/1115\n[#1116]: https://github.com/wasmi-labs/wasmi/pull/1116\n\n## [`0.33.1`] - 2024-07-01\n\n### Added\n\n- Added `Error` trait impls for all Wasmi error types impleemnting `Display`. (https://github.com/wasmi-labs/wasmi/pull/1089)\n    - Contributed by [kajacx](https://github.com/kajacx).\n\n### Fixed\n\n- Fixed compilation for Rust versions <1.78. (https://github.com/wasmi-labs/wasmi/pull/1093)\n- Fixed nightly `clippy` warning about `map_err`. (https://github.com/wasmi-labs/wasmi/pull/1094)\n\n## [`0.33.0`] - 2024-06-24\n\n### Added\n\n- Added support for Wasm custom sections processing. (https://github.com/wasmi-labs/wasmi/pull/1085)\n    - It is now possible to query name and data of Wasm custom sections of a `Module`.\n    - Use the new `Config::ignore_custom_sections` flag to disable this functionality.\n- Added `Config::ignore_custom_sections` flag to disable processing custom sections if this is unwanted. (https://github.com/wasmi-labs/wasmi/pull/1085)\n- Add `Memory::{data_ptr, data_size, size}` methods. (https://github.com/wasmi-labs/wasmi/pull/1082)\n- Added a Wasmi usage guide documentation. (https://github.com/wasmi-labs/wasmi/pull/1072)\n    - Link: https://github.com/wasmi-labs/wasmi/blob/master/docs/usage.md\n\n### Changed\n\n- Optimized the Wasmi executor in various ways.\n    - In summary the Wasmi executor now more optimally caches the currently used\n      Wasm instance and optimizes access to instance related data.\n      In particular access to the default linear memory bytes as well as the value of\n      the global variable at index 0 (often used as shadow stack pointer) are more efficient.\n    - The following PRs are part of this effort:\n        - https://github.com/wasmi-labs/wasmi/pull/1059\n        - https://github.com/wasmi-labs/wasmi/pull/1062\n        - https://github.com/wasmi-labs/wasmi/pull/1068\n        - https://github.com/wasmi-labs/wasmi/pull/1069\n        - https://github.com/wasmi-labs/wasmi/pull/1065\n        - https://github.com/wasmi-labs/wasmi/pull/1075\n        - https://github.com/wasmi-labs/wasmi/pull/1076\n- Changed `Memory::grow` signature to mirror Wasmtime's `Memory::grow` method. (https://github.com/wasmi-labs/wasmi/pull/1082)\n\n### Removed\n\n- Removed `Memory::current_pages` method. (https://github.com/wasmi-labs/wasmi/pull/1082)\n    - Users should use the new `Memory::size` method instead.\n\n## [`0.32.3`] - 2024-06-06\n\n### Fixed\n\n- Fix overlapping reuse of local preservation slots. (https://github.com/wasmi-labs/wasmi/pull/1057)\n    - Thanks again to [kaiavintr](https://github.com/kaiavintr) for reporting the bug.\n\n## [`0.32.2`] - 2024-06-03\n\n### Fixed\n\n- Refine and generalize the fix for v0.32.1. (https://github.com/wasmi-labs/wasmi/pull/1054)\n\n## [`0.32.1`] - 2024-06-03\n\n### Fixed\n\n- Fixes a miscompilation when merging two copy instructions where the result of the first copy is also the input to the second copy and vice versa. (https://github.com/wasmi-labs/wasmi/pull/1052)\n    - Thanks to [kaiavintr](https://github.com/kaiavintr) for reporting the bug.\n\n## [`0.32.0`] - 2024-05-28\n\n**Note:**\n\n- This release is the culmination of months of research, development and QA\n  with a new execution engine utilizing register-based IR at its core boosting\n  both startup and execution performance to new levels for the Wasmi interpreter.\n- This release is accompanied with [an article](https://wasmi-labs.github.io/blog/) that presents some of the highlights.\n\n### Added\n\n- Added a new execution engine based on register-based bytecode. (https://github.com/wasmi-labs/wasmi/pull/729)\n    - The register-based Wasmi `Engine` executes roughly 80-100% faster and\n      compiles roughly 30% slower according to benchmarks conducted so far.\n- Added `Module::new_unchecked` API. (https://github.com/wasmi-labs/wasmi/pull/829)\n    - This allows to compile a Wasm module without Wasm validation which can be useful\n      when users know that their inputs are valid Wasm binaries.\n    - This improves Wasm compilation performance for faster startup times by roughly 10-20%.\n- Added Wasm compilation modes. (https://github.com/wasmi-labs/wasmi/pull/844)\n    - When using `Module::new` Wasmi eagerly compiles Wasm bytecode into Wasmi bytecode\n      which is optimized for efficient execution. However, this compilation can become very\n      costly especially for large Wasm binaries.\n    - The solution to this problem is to introduce new compilation modes, namely:\n      - `CompilationMode::Eager`: Eager compilation, what Wasmi did so far. (default)\n      - `CompilationMode::LazyTranslation`: Eager Wasm validation and lazy Wasm translation.\n      - `CompilationMode::Lazy`: Lazy Wasm validation and translation.\n    - Benchmarks concluded that\n      - `CompilationMode::LazyTanslation`: Usually improves startup performance by a factor of 2 to 3.\n      - `CompilationMode::Lazy`: Usually improves startup performance by a factor of up to 27.\n    - Note that `CompilationMode::Lazy` can lead to partially validated Wasm modules\n      which can introduce non-determinism when using different Wasm implementations.\n      Therefore users should know what they are doing when using `CompilationMode::Lazy` if this is a concern.\n    - Enable lazy Wasm compilation with:\n      ```rust\n      let mut config = wasmi::Config::default();\n      config.compilation_mode(wasmi::CompilationMode::Lazy);\n      ```\n    - When `CompilationMode::Lazy` or `CompilationMode::LazyTranslation` and fuel metering is enabled\n      the first function access that triggers compilation (and validation) will charge fuel respective\n      to the number of bytes of the Wasm function body. (https://github.com/wasmi-labs/wasmi/pull/876)\n- Added non-streaming Wasm module compilation. (https://github.com/wasmi-labs/wasmi/pull/1035)\n    - So far Wasmi only offered a streaming Wasm module compilation API, however most users\n      probably never really needed that. So starting from this version both `Module::new` and\n      `Module::new_unchecked` are now non-streaming with insane performance improvements of up\n      to 80% in certain configurations.\n    - For streaming Wasm module users we added `Module::new_streaming` and `Module::new_streaming_unchecked` APIs.\n- Added `Module::validate` API. (https://github.com/wasmi-labs/wasmi/pull/840)\n    - This allows to quickly check if a Wasm binary is valid according to a Wasmi `Engine` config.\n    - Note that this does not translate the Wasm and thus `Module::new` or `Module::new_unchecked`\n      might still fail due to translation errors.\n- CLI: Added `--compilation-mode` argument to enable lazy Wasm compilation. (https://github.com/wasmi-labs/wasmi/pull/849)\n- Added `--verbose` mode to Wasmi CLI by @tjpalmer. (https://github.com/wasmi-labs/wasmi/pull/957)\n    - By default Wasmi CLI no longer prints messages during execution.\n- Added `Memory::new_static` constructor by @Ddystopia. (https://github.com/wasmi-labs/wasmi/pull/939)\n    - This allows to construct a Wasm `Memory` from a static byte array\n      which is especially handy for certain embedded use cases.\n- Added `LinkerBuilder` type. (https://github.com/wasmi-labs/wasmi/pull/989)\n    - Using `LinkerBuilder` to create new `Linker`s with the same set of host functions is a lot more\n      efficient than creating those `Linker`s the original way. However, the initial `LinkerBuilder`\n      construction will be as inefficient as building up a `Linker` previously.\n- Added `EnforcedLimits` configuration option to `Config`. (https://github.com/wasmi-labs/wasmi/pull/985)\n    - Some users want to run Wasm binaries in a specially restricted or limited mode.\n      For example this mode limits the amount of functions, globals, tables etc. can be defined\n      in a single Wasm module.\n      With this change they can enable this new strict mode using\n      ```rust\n      let mut config = wasmi::Config::default();\n      config.enforced_limits(wasmi::EnforcedLimits::strict());\n      ```\n      In future updates we might relax this to make `EnforcedLimits` fully customizable.\n- Added `EngineWeak` constructed via `Engine::weak`. (https://github.com/wasmi-labs/wasmi/pull/1003)\n    - This properly mirrors the Wasmtime API and allows users to store weak references to the `Engine`.\n- Added `no-hash-maps` crate feature to the `wasmi` crate. (https://github.com/wasmi-labs/wasmi/pull/1007)\n    - This tells the `wasmi` crate to avoid using hash based data structures which can be beneficial for\n      running Wasmi in some embedded environments such as `wasm32-unknown-unknown` that do not support\n      random sources and thus are incapable to spawn hash maps that are resilient to malicious actors.\n    - Note that Wasmi has always avoided using hash map based data structures prior to this change so\n      not enabling this new crate feature kind of acts as an optimization.\n- Added `Default` implementation for `Store<T> where T: Default`. (https://github.com/wasmi-labs/wasmi/pull/1031)\n    - This mostly serves as a convenient way to create a minimal Wasmi setup.\n- Added `WasmTy` implementations for `f32` and `f64` Rust primitives. (https://github.com/wasmi-labs/wasmi/pull/1031)\n    - This is convenience for `Linker::func_wrap` calls that take those primitives as arguments.\n      Before this change users had to use `F32` and `F64` instead which is a bit cumbersome.\n\n### Changed\n\n- Minimum Rust version set to 1.77. (https://github.com/wasmi-labs/wasmi/pull/961)\n- CLI: Enabled Wasm `tail-calls` and `extend-const` proposals by default. (https://github.com/wasmi-labs/wasmi/pull/849)\n    - We expect those Wasm proposals to be stabilized very soon so we feel safe to enable them by default already.\n- Improved `Debug` and `Display` impls for NaNs of Wasm `f32` and `f64` values.\n  - They now show `nan:0x{bytes}` where `{bytes}` is their respective raw bytes.\n- Implement `Sync` for `ResumableInvocation` and `TypedResumableInvocation`. (https://github.com/wasmi-labs/wasmi/pull/870)\n- Properly mirror Wasmtime's fuel API. (https://github.com/wasmi-labs/wasmi/pull/1002)\n- Renamed some Wasmi items to improve its Wasmtime mirroring. (https://github.com/wasmi-labs/wasmi/pull/1011)\n- Improved Wasmtime API mirror for Store fuel. (https://github.com/wasmi-labs/wasmi/pull/1002)\n- Enabled `Config::tail_call` and `Config::extended_const` by default. (https://github.com/wasmi-labs/wasmi/pull/1031)\n    - Those Wasm proposals have been moved to phase 4 for many months now.\n\n### Removed\n\n- Removed the stack-machine bytecode based Wasmi `Engine` backend. (https://github.com/wasmi-labs/wasmi/pull/818)\n    - The new register-based bytecode based Wasmi `Engine` is more promising\n      and the Wasmi team does not want to maintain two different engine backends.\n- Removed `FuelConsumptionMode` from `Config`. (https://github.com/wasmi-labs/wasmi/pull/877)\n    - `FuelConsumptionMode` was required to differentiate between lazy and eager fuel consumption.\n      This was necessary due to how lazy fuel consumption was implemented in that it would pre-charge\n      for instruction execution were the exact amount of required fuel was not possible to determine\n      at compilation time. Examples are `memory.grow` and `table.copy` instructions. The linked PR\n      improved lazy fuel consumption to no longer pre-charge and instead pre-check if the operation\n      is going to succeed and only charge fuel in that case.\n\n### Dev. Note\n\n- Added execution fuzzing and differential fuzzing.\n    - PRs: https://github.com/wasmi-labs/wasmi/pull/832, https://github.com/wasmi-labs/wasmi/pull/833\n    - Both fuzzing strategies are applied on each commit in our CI pipeline.\n- Updated CI jobs to use `dtolnay/rust-toolchain` instead of `actions-rs` because the latter was deprecated. (https://github.com/wasmi-labs/wasmi/pull/842)\n\n## [`0.31.0`] - 2023-07-31\n\n### Added\n\n- Added `ResourceLimiter` API known from Wasmtime. (https://github.com/wasmi-labs/wasmi/pull/737)\n  - This API allows to limit growable Wasm resources such as Wasm tables and linear memories.\n  - Special thanks to [Graydon Hoare](https://github.com/graydon) for contributing this feature!\n\n### Fixes\n\n- Fixed a bug were `Module::len_globals` internal API returned length of linear memories instead. (https://github.com/wasmi-labs/wasmi/pull/741)\n\n### Changed\n\n- Removed `intx` crate dependency. (https://github.com/wasmi-labs/wasmi/pull/727)\n  - The dependence on the `intx` crate was accidental and not really required at any time.\n- Optimized `f64.const` instructions for `f64` constant values that can losslessly be encoded as 32-bit `f32` value. (https://github.com/wasmi-labs/wasmi/pull/746)\n\n### Dev. Note\n\n- We now publish and record graphs of benchmarks over time. (https://github.com/wasmi-labs/wasmi/pull/740)\n  - This allows Wasmi developers to better inspect performance changes over longer periods of time.\n- Updated dev. dependencies:\n  - `criterion 0.4.0` -> `0.5.0`\n  - `wast 0.52.0` -> `0.62.0`\n\n## [`0.30.0`] - 2023-05-28\n\n### Changed\n\n- Optimized Wasmi bytecode memory consumption. (https://github.com/wasmi-labs/wasmi/pull/718)\n  - This reduced the memory consumption of Wasmi bytecode by organizing the instructions\n    into so-called instruction words, effectively reducing the amount of bytes required per\n    Wasmi instruction 16 bytes to 8 bytes.\n    There was an experiment with 4 bytes but experiments confirmed that 8 bytes per instruction\n    word was the sweetspot for Wasmi execution and translation performance.\n  - This did not affect execution performance too much but we saw performance improvements\n    for translation from Wasm to Wasmi bytecode by roughly 15-20%.\n- Optimized `call` and `return_call` for Wasm module internal calls. (https://github.com/wasmi-labs/wasmi/pull/724)\n  - Wasmi bytecode now differentiates between calls to Wasm module internal functions\n    and imported functions which allows the Wasmi bytecode executor to perform the common\n    internal calls more efficiently.\n  - This led to an execution performance improvement across the board but especially for\n    call intense workloads of up to 30% in some test cases.\n\n## [`0.29.0`] - 2023-03-20\n\n### Added\n\n- Added support for `extended-const` Wasm proposal. (https://github.com/wasmi-labs/wasmi/pull/707)\n- Added fuel consumption modes. (https://github.com/wasmi-labs/wasmi/pull/706)\n  - This allows eager and lazy fuel consumption modes to be used which\n    mainly affects bulk operations such as `table.copy` and `memory.grow`.\n    Eager fuel consumption always consumes fuel before a bulk operation for the\n    total amount independent of success or failure of the operation whereras\n    lazy fuel consumption only consumes fuel for successful executions.\n\n### Changed\n\n- Normalize fuel costs of all instructions. (https://github.com/wasmi-labs/wasmi/pull/705)\n  - With this change most instructions cost roughly 1 fuel upon execution.\n    This is more similar to how Wasmtime deals with fuel metered instruction costs.\n    Before this change Wasmi tried to have fuel costs that more closely mirror\n    the computation intensity of the respective instruction according to benchmarks.\n\n## [`0.28.0`] - 2023-03-01\n\n### Added\n\n- Added support for the `tail-call` Wasm proposal. (https://github.com/wasmi-labs/wasmi/pull/683)\n- Added support for `Linker` defined host functions. (https://github.com/wasmi-labs/wasmi/pull/692)\n  - Apparently this PR introduced some performance wins for the Wasm target according to our tests.\n    This information shall be taken with a grain of salt since we are not sure why those performance\n    improvement occured since the PR's functionality is orthogonal to Wasm engine performance.\n  - Required precursor refactoring PR: https://github.com/wasmi-labs/wasmi/pull/681\n\n[`tail-call`]: https://github.com/WebAssembly/tail-call\n\n### Changed\n\n- The `wasmi_wasi` crate now more closely mirrors the `wasmtime_wasi` crate API. (https://github.com/wasmi-labs/wasmi/pull/700)\n\n### Internal\n\n- Refactor the Wasmi Wasm engine to handle Wasm calls and returns in its core. [(#694)]\n  - This improved performance of Wasm function calls significantly at the cost of host function call performance.\n  - Also this seemed to have impacts Wasm target performance quite positively, too.\n- The `Store` now handles Wasm functions and host functions separately. (https://github.com/wasmi-labs/wasmi/pull/686)\n  - This allows to store Wasm functions into the `StoreInner` type which was an important\n    step towards the major refactoring in [(#694)]\n  - It was expected that host function call performance would degrade by this PR but our tests\n    actually showed that the opposite was true and Wasm target performance was improved overall.\n- Introduce `ValueStackPtr` abstraction for the Wasmi engine core. (https://github.com/wasmi-labs/wasmi/pull/688)\n  - This change significantly improved performance especially on the Wasm target according to our tests.\n- Optimize `memory.{load,store}` when reading or writing single bytes. (https://github.com/wasmi-labs/wasmi/pull/689)\n  - The performance wins were more modest than we hoped but still measurable.\n- Use `StoreContextMut<T>` instead of `impl AsContextMut` in the Wasmi engine core. (https://github.com/wasmi-labs/wasmi/pull/685)\n  - This is a simple refactoring with the goal to make the Rust compiler have a simpler job at\n    optimizing certain functions in the engine's inner workings since `StoreContextMut` provides\n    more information to the compiler.\n\n[(#694)]: https://github.com/wasmi-labs/wasmi/pull/694\n\n## [`0.27.0`] - 2023-02-14\n\n### Added\n\n- Added support for fuel metering in the Wasmi CLI. (https://github.com/wasmi-labs/wasmi/pull/679)\n  - Users can now specify an amount of fuel via `--fuel N` to commit for the execution.\n    Upon success the Wasmi CLI will display the total amount of consumed and remaining fuel.\n\n### Fixed\n\n- Fixed a bug that Wasmi CLI did not preserve the WASI exit status. (https://github.com/wasmi-labs/wasmi/pull/677)\n  - Thanks to [YAMAMOTO Takashi @yamt](https://github.com/yamt) for reporting the issue.\n- The Wasmi CLI now properly displays exported functions if `--invoke x` was provided and `x` was not found. (https://github.com/wasmi-labs/wasmi/pull/678)\n- Applied minor fixes to `Config` docs. (https://github.com/wasmi-labs/wasmi/pull/673)\n\n### Changed\n\n- Defer charging fuel for costly bulk `memory` and bulk `table` operations. (https://github.com/wasmi-labs/wasmi/pull/676)\n  - Note that the check to assert that enough fuel is provided for these costly\n    operation is still happening before the actual computation and only the charging\n    is deferred to after a successful run. The reason behind this is that all the affected\n    operations fail fast and therefore should not cost lots of fuel in case of failure.\n\n## [`0.26.1`] - 2023-02-13\n\n### Fixed\n\n- Fixed a bug where resuming a resumable function from a host function with more outputs than\n  inputs could lead to incorrect behavior or runtime panics. (https://github.com/wasmi-labs/wasmi/pull/671)\n    - Thanks to [Pierre Krieger (tomaka)](https://github.com/tomaka) for reporting and crafting an initial minimal test case.\n\n## [`0.26.0`] - 2023-02-11\n\n### Added\n\n- Wasmi CLI: Add WASI support. (https://github.com/wasmi-labs/wasmi/pull/597)\n  - Big shoutout to [Onigbinde Oluwamuyiwa Elijah](https://github.com/OLUWAMUYIWA) for contributing this to Wasmi!\n- Add built-in support for fuel metering. (https://github.com/wasmi-labs/wasmi/pull/653)\n  - This allows to control the runtime of Wasm executions in a deterministic fasion\n    effectively avoiding the halting problem by charging for executed instructions.\n    Not using the feature will not affect the execution efficiency of Wasmi for users.\n- Add `Pages::checked_sub` method. (https://github.com/wasmi-labs/wasmi/pull/660)\n- Add `Func::new` constructor. (https://github.com/wasmi-labs/wasmi/pull/662)\n  - This allows to create `Func` instances from closures without statically known types.\n\n### Changed\n\n- Update to `wasmparser-nostd` version `0.100.1`. (https://github.com/wasmi-labs/wasmi/pull/666)\n\n### Internal\n\n- Clean up and reorganization of the `wasmi_cli` crate. (https://github.com/wasmi-labs/wasmi/pull/655)\n- Refactoring of internal host call API. (https://github.com/wasmi-labs/wasmi/pull/664)\n\n## [`0.25.0`] - 2023-02-04\n\n### Added\n\n- Added `Config::floats` option to enable or disable Wasm float operators during Wasm validation.\n- `Trap::downcast_mut` and `Trap::downcast` methods. (https://github.com/wasmi-labs/wasmi/pull/650)\n  - This helps users to downcast into `T: HostError`.\n- Added `WasmType` impls for `FuncRef` and `ExternRef` types. (https://github.com/wasmi-labs/wasmi/pull/642)\n  - This allows `FuncRef` and `ExternRef` instances to be used in `TypedFunc` parameters and results.\n\n### Removed\n\n- Removed from `From` impls from `wasmparser-nostd` types to Wasmi types.\n  - For example `From<wasmparser::FuncType> for wasmi::FuncType` got removed.\n\n### Changed\n\n- Update the `wasmparser-nostd` dependency from version `0.91.0` to `0.99.0`. (https://github.com/wasmi-labs/wasmi/pull/640)\n- The `Trap` type is no longer `Clone`. (https://github.com/wasmi-labs/wasmi/pull/650)\n\n### Internal\n\n- Resolved plenty of technical debt and improved structure of the Wasmi crate.\n  - PRs: https://github.com/wasmi-labs/wasmi/pull/648, https://github.com/wasmi-labs/wasmi/pull/647, https://github.com/wasmi-labs/wasmi/pull/646, https://github.com/wasmi-labs/wasmi/pull/645, https://github.com/wasmi-labs/wasmi/pull/644, https://github.com/wasmi-labs/wasmi/pull/641\n\n## [`0.24.0`] - 2023-01-31\n\n### Added\n\n- Added support for the [`bulk-memory`] Wasm proposal. (https://github.com/wasmi-labs/wasmi/pull/628)\n- Added support for the [`reference-types`] Wasm proposal. (https://github.com/wasmi-labs/wasmi/pull/635)\n- Added `ValueType::{is_ref, is_num`} methods. (https://github.com/wasmi-labs/wasmi/pull/635)\n- Added `Value::{i32, i64, f32, f64, externref, funcref}` accessor methods to `Value`.\n\n[`bulk-memory`]: https://github.com/WebAssembly/bulk-memory-operations\n[`reference-types`]: https://github.com/WebAssembly/reference-types\n\n### Fixed\n\n- Fix a bug with `Table` and `Memory` imports not respecting the current size. (https://github.com/wasmi-labs/wasmi/pull/635)\n  - This sometimes led to the problem that valid `Table` and `Memory` imports\n    could incorrectly be rejected for having an invalid size for the subtype check.\n  - This has been fixed as part of the [`reference-types`] Wasm proposal implementation.\n\n### Changed\n\n- Use more references in places to provide the compiler with more optimization opportunities. (https://github.com/wasmi-labs/wasmi/pull/634)\n  - This led to a speed-up across the board for Wasm targets of about 15-20%.\n- Move the `Value` type from `wasmi_core` to Wasmi. (https://github.com/wasmi-labs/wasmi/pull/636)\n  - This change was necessary in order to support the [`reference-types`] Wasm proposal.\n- There has been some consequences from implementing the [`reference-types`] Wasm proposal which are listed below:\n  - The `Value` type no longer implements `Copy` and `PartialEq`.\n  - The `From<&Value> for UntypedValue` impl has been removed.\n  - Remove some `From` impls for `Value`.\n  - Moved some `Display` impls for types like `FuncType` and `Value` to the `wasmi_cli` crate.\n  - Remove the `try_into` API from the `Value` type.\n    - Users should use the new accessor methods as in the Wasmtime API.\n\n### Internal\n\n- Update `wast` dependency from version `0.44` to `0.52`. (https://github.com/wasmi-labs/wasmi/pull/632)\n- Update the Wasm spec testsuite to the most recent commit: `3a04b2cf9`\n- Improve error reporting for the internal Wasm spec testsuite runner.\n  - It will now show proper span information in many more cases.\n\n## [`0.23.0`] - 2023-01-19\n\n> **Note:** This is the Wasmtime API Compatibility update.\n\n### Added\n\n- Add `Module::get_export` method. (https://github.com/wasmi-labs/wasmi/pull/617)\n\n### Changed\n\n- Removed `ModuleError` export from crate root. (https://github.com/wasmi-labs/wasmi/pull/618)\n  - Now `ModuleError` is exported from `crate::errors` just like all the other error types.\n- Refactor and cleanup traits underlying to `IntoFunc`. (https://github.com/wasmi-labs/wasmi/pull/620)\n  - This is only the first step in moving closer to the Wasmtime API traits.\n- Mirror Wasmtime API more closely. (https://github.com/wasmi-labs/wasmi/pull/615, https://github.com/wasmi-labs/wasmi/pull/616)\n  - Renamed `Caller::host_data` method to `Caller::data`.\n  - Renamed `Caller::host_data_mut` method to `Caller::data_mut`.\n  - Add `Extern::ty` method and the `ExternType` type.\n  - Rename `ExportItem` to `ExportType`:\n    - Rename the `ExportItem::kind` method to `ty` and return `ExternType` instead of `ExportItemKind`.\n    - Remove the no longer used `ExportItemKind` entirely.\n  - The `ExportsIter` now yields items of the new type `Export` instead of pairs of `(&str, Extern)`.\n  - Rename `ModuleImport` to `ImportType`.\n    - Rename `ImportType::item_type` to `ty`.\n    - Rename `ImportType::field` to `name`.\n    - Properly forward `&str` lifetimes in `ImportType::{module, name}`.\n    - Replace `ModuleImportType` by `ExternType`.\n  - Add new convenience methods to `Instance`:\n    - `Instance::get_func`\n    - `Instance::get_typed_func`\n    - `Instance::get_global`\n    - `Instance::get_table`\n    - `Instance::get_memory`\n  - Rename getters for querying types of runtime objects:\n    - `Func::func_type` => `Func::ty`\n    - `Global::global_type` => `Global::ty`\n    - `Table::table_type` => `Table::ty`\n    - `Memory::memory_type` => `Memory::ty`\n    - `Value::value_type` => `Value::ty`\n  - Remove `Global::value_type` getter.\n    - Use `global.ty().content()` instead.\n  - Remove `Global::is_mutable` getter.\n    - Use `global.ty().mutability().is_mut()` instead.\n  - Rename `Mutability::Mutable` to `Var`.\n  - Add `Mutability::is_mut` getter.\n    - While this API is not included in Wasmtime it is a useful convenience method.\n  - Rename `TableType::initial` method to `minimum`.\n  - Rename `Table::len` method to `size`.\n  - `Table` and `TableType` now operate on `u32` instead of `usize` just like in Wasmtime.\n    - This affects `Table::{new, size, set, get, grow}` methods and `TableType::{new, minimum, maximum}` methods and their users.\n\n## [`0.22.0`] - 2023-01-16\n\n### Added\n\n- Add missing `TypedFunc::call_resumable` API. (https://github.com/wasmi-labs/wasmi/pull/605)\n  - So far resumable calls were only available for the `Func` type.\n    However, there was no technical reason why it was not implemented\n    for `TypedFunc` so this mirrored API now exists.\n  - This also cleans up rough edges with the `Func::call_resumable` API.\n\n### Changed\n\n- Clean up the `wasmi_core` crate API. (https://github.com/wasmi-labs/wasmi/pull/607, https://github.com/wasmi-labs/wasmi/pull/608, https://github.com/wasmi-labs/wasmi/pull/609)\n  - This removes plenty of traits from the public interface of the crate\n    which greatly simplifies the API surface for users.\n  - The `UntypedValue` type gained some new methods to replace functionality\n    that was provided in parts by the removed traits.\n- The Wasmi crate now follows the Wasmtime API a bit more closely. (https://github.com/wasmi-labs/wasmi/pull/613)\n  - `StoreContext` new methods:\n    - `fn engine(&self) -> &Engine`\n    - `fn data(&self) -> &T` \n  - `StoreContextMut` new methods:\n    - `fn engine(&self) -> &Engine`\n    - `fn data(&self) -> &T` \n    - `fn data_mut(&mut self) -> &mut T`\n  - Renamed `Store::state` method to `Store::data`.\n  - Renamed `Store::state_mut` method to `Store::data_mut`.\n  - Renamed `Store::into_state` method to `Store::into_data`.\n### Internal\n\n- The `Store` and `Engine` types are better decoupled from their generic parts. (https://github.com/wasmi-labs/wasmi/pull/610, https://github.com/wasmi-labs/wasmi/pull/611)\n  - This might reduce binary bloat and may have positive effects on the performance.\n    In fact we measured significant performance improvements on the Wasm target.\n\n## [`0.21.0`] - 2023-01-04\n\n### Added\n\n- Add support for resumable function calls. (https://github.com/wasmi-labs/wasmi/pull/598)\n  - This feature allows to resume a function call upon encountering a host trap.\n- Add support for concurrently running function executions using a single Wasmi engine.\n  - This feature also allows to call Wasm functions from host functions. (https://github.com/wasmi-labs/wasmi/pull/590)\n- Add initial naive WASI support for Wasmi using the new `wasmi_wasi` crate. (https://github.com/wasmi-labs/wasmi/pull/557)\n  - Special thanks to [Onigbinde Oluwamuyiwa Elijah](https://github.com/OLUWAMUYIWA) for carrying the WASI support efforts!\n  - Also thanks to [Yuyi Wang](https://github.com/Berrysoft) for testing and improving initial WASI support. (https://github.com/wasmi-labs/wasmi/pull/592, https://github.com/wasmi-labs/wasmi/pull/571, https://github.com/wasmi-labs/wasmi/pull/568)\n  - **Note:** There is ongoing work to integrate WASI support in `wasmi_cli` so that the Wasmi CLI will then\n              be able to execute arbitrary `wasm-wasi` files out of the box in the future.\n- Add `Module::imports` that allows to query Wasm module imports. (https://github.com/wasmi-labs/wasmi/pull/573, https://github.com/wasmi-labs/wasmi/pull/583)\n\n### Fixed\n\n- Fix a bug that imported linear memories and tables were initialized twice upon instantiation. (https://github.com/wasmi-labs/wasmi/pull/593)\n- The Wasmi CLI now properly hints for file path arguments. (https://github.com/wasmi-labs/wasmi/pull/596)\n\n### Changed\n\n- The `wasmi::Trap` type is now more similar to Wasmtime's `Trap` type. (https://github.com/wasmi-labs/wasmi/pull/559)\n- The `wasmi::Store` type is now `Send` and `Sync` as intended. (https://github.com/wasmi-labs/wasmi/pull/566)\n- The Wasmi CLI now prints exported functions names if the function name CLI argument is missing. (https://github.com/wasmi-labs/wasmi/pull/579)\n- Improve feedback when running a Wasm module without exported function using Wasmi CLI. (https://github.com/wasmi-labs/wasmi/pull/584)\n\n## [`0.20.0`] - 2022-11-04\n\n### Added\n\n- Contribution documentation about fuzz testing. (https://github.com/wasmi-labs/wasmi/pull/529)\n\n### Removed\n\n- Removed some deprecated functions in the `wasmi_core` crate. (https://github.com/wasmi-labs/wasmi/pull/545)\n\n### Fixed\n\n- Fixed a critical performance regression introduced in Rust 1.65. (https://github.com/wasmi-labs/wasmi/pull/518)\n  - While the PR's main job was to clean up some code it was found out that it\n    also fixes a critical performance regression introduced in Rust 1.65.\n  - You can read more about this performance regression [in this thread](https://github.com/rust-lang/rust/issues/102952).\n\n### Changed\n\n- Fixed handling of edge cases with respect to Wasm linear memory. (https://github.com/wasmi-labs/wasmi/pull/449)\n  - This allows for Wasmi to properly setup and use linear memory instances of up to 4GB.\n- Optimize and improve Wasm instantiation. (https://github.com/wasmi-labs/wasmi/pull/531)\n- Optimize `global.get` of immutable non-imported globals. (https://github.com/wasmi-labs/wasmi/pull/533)\n  - Also added a benchmark test for this. (https://github.com/wasmi-labs/wasmi/pull/532)\n\n### Internal\n\n- Implemented miscellaneous improvements to our CI system.\n  - https://github.com/wasmi-labs/wasmi/pull/539 (and more)\n- Miscellaneous clean ups in `wasmi_core` and Wasmi's executor.\n  - https://github.com/wasmi-labs/wasmi/pull/542 https://github.com/wasmi-labs/wasmi/pull/541\n  https://github.com/wasmi-labs/wasmi/pull/508 https://github.com/wasmi-labs/wasmi/pull/543\n\n## [`0.19.0`] - 2022-10-20\n\n### Fixed\n\n- Fixed a potential undefined behavior as reported by the `miri` tool\n  with respect to its experimental stacked borrows. (https://github.com/wasmi-labs/wasmi/pull/524)\n\n### Changed\n\n- Optimized Wasm to Wasmi translation phase by removing unnecessary Wasm\n  validation type checks. (https://github.com/wasmi-labs/wasmi/pull/527)\n    - Speedups were in the range of 15%.\n- `Linker::instantiate` now takes `&self` instead of `&mut self`. (https://github.com/wasmi-labs/wasmi/pull/512)\n  - This allows users to easily predefine a linker and reused its definitions\n    as shared resource.\n- Fixed a bug were `Caller::new` was public. (https://github.com/wasmi-labs/wasmi/pull/514)\n  - It is now a private method as it was meant to be.\n- Optimized `TypedFunc::call` at slight cost of `Func::call`. (https://github.com/wasmi-labs/wasmi/pull/522)\n  - For many parameters and return values the measured improvements are in the range of 25%.\n    Note that this is only significant for a large amount of host to Wasm calls of small functions.\n\n### Internal\n\n- Added new benchmarks and cleaned up benchmarking code in general.\n  - https://github.com/wasmi-labs/wasmi/pull/525\n  https://github.com/wasmi-labs/wasmi/pull/526\n  https://github.com/wasmi-labs/wasmi/pull/521\n- Add `miri` testing to Wasmi CI (https://github.com/wasmi-labs/wasmi/pull/523)\n\n## [`0.18.1`] - 2022-10-13\n\n### Changed\n\n- Optimize for common cases for branch and return instructions.\n  (https://github.com/wasmi-labs/wasmi/pull/493)\n    - This led to up to 10% performance improvement according to our benchmarks\n      in some cases.\n- Removed extraneous `S: impl AsContext` generic parameter from `Func::typed` method.\n- Make `IntoFunc`, `WasmType` and `WasmRet` traits publicly available.\n- Add missing impl for `WasmRet` for `Result<T, Trap> where T: WasmType`.\n    - Without this impl it was impossible to provide closures to `Func::wrap`\n      that returned `Result<T, Trap>` where `T: WasmType`, only `Result<(), Trap>`\n      or `Result<(T,), Trap>` was possible before.\n\n### Internal\n\n- Added `wasmi_arena` crate which defines all internally used arena data structures.\n  (https://github.com/wasmi-labs/wasmi/pull/502)\n- Update to `clap 4.0` in `wasmi_cli`. (https://github.com/wasmi-labs/wasmi/pull/498)\n- Many more improvements to our internal benchmarking CI.\n  (https://github.com/wasmi-labs/wasmi/pull/494, https://github.com/wasmi-labs/wasmi/pull/501,\n  https://github.com/wasmi-labs/wasmi/pull/506, https://github.com/wasmi-labs/wasmi/pull/509)\n\n## [`0.18.0`] - 2022-10-02\n\n### Added\n\n- Added Contibution Guidelines and Code of Conduct to the repository. (https://github.com/wasmi-labs/wasmi/pull/485)\n\n### Changed\n\n- Optimized instruction dispatch in the Wasmi interpreter.\n  (https://github.com/wasmi-labs/wasmi/pull/478, https://github.com/wasmi-labs/wasmi/pull/482)\n  - This yielded combined speed-ups of ~20% across the board.\n  - As a side effect we also refactored the way we compute branching offsets\n    at Wasm module compilation time which improved performance of Wasm module\n    compilation by roughly 5%.\n\n### Internal\n\n- Our CI now also benchmarks Wasmi when ran inside Wasmtime as Wasm.\n  (https://github.com/wasmi-labs/wasmi/pull/483, https://github.com/wasmi-labs/wasmi/pull/487)\n  - This allows us to optimize Wasmi towards Wasm performance more easily in the future.\n\n## [`0.17.0`] - 2022-09-23\n\n### Added\n\n- Added `Memory::data_and_store_mut` API inspired by Wasmtime's API. (https://github.com/wasmi-labs/wasmi/pull/448)\n\n### Changed\n\n- Updated `wasmparser-nostd` dependency from `0.90.0` to `0.91.0`.\n    - This improved performance of Wasm module compilation by ~10%.\n- Updated `wasmi_core` from `0.3.0` to `0.4.0`.\n- Optimized execution of several Wasm float to int conversion instructions. (https://github.com/wasmi-labs/wasmi/pull/439)\n    - We measured a performance improvement of 6000% or in other words those\n      instructions are now 60 times faster than before.\n    - This allowed us to remove the big `num-rational` dependency from `wasmi_core`\n      for some nice speed-ups in compilation time of Wasmi itself.\n- Optimized `global.get` and `global.set` Wasm instruction execution. (https://github.com/wasmi-labs/wasmi/pull/427)\n    - This improved performance of those instructions by up to 17%.\n- Optimized Wasm value stack emulation. (https://github.com/wasmi-labs/wasmi/pull/459)\n    - This improved performance of compute intense workloads by up to 23%.\n\n### Internal\n\n- Added automated continuous benchmarking to Wasmi. (https://github.com/wasmi-labs/wasmi/pull/422)\n    - This allows us to have a more consistent overview over the performance of Wasmi.\n- Updated `criterion` benchmarking framework to version `0.4.0`.\n- Reuse allocations during Wasm validation and translation:\n     - Wasm validation and translation combined. (https://github.com/wasmi-labs/wasmi/pull/462)\n     - Wasm `br_table` translations. (https://github.com/wasmi-labs/wasmi/pull/440)\n- Enabled more useful `clippy` lints for Wasmi and `wasmi_core`. (https://github.com/wasmi-labs/wasmi/pull/438)\n- Reorganized the Wasmi workspace. (https://github.com/wasmi-labs/wasmi/pull/466)\n\n## [`0.16.0`] - 2022-08-30\n\n### Changed\n\n- Update `wasmparser-nostd` dependency from version `0.83.0` -> `0.90.0`.\n  [**Link:**](https://github.com/wasmi-labs/wasmi/commit/e9b0463817e277cd9daccca7e66e52e4fd147d8e)\n    - This significantly improved Wasmi's Wasm parsing, validation and\n      Wasm to Wasmi bytecode translation performance.\n\n### Internal\n\n- Transition to the new `wasmparser::VisitOperator` API.\n  [**Link**](https://github.com/wasmi-labs/wasmi/commit/225c8224729661ea091e650e3278c4980bd1d405)\n    - This again significantly improved Wasmi's Wasm parsing, validation and\n      Wasm to Wasmi bytecode translation performance by avoiding many\n      unnecessary unpredictable branches in the process.\n\n## [`0.15.0`] - 2022-08-22\n\n### Fixed\n\n- Fixed bugs found during fuzzing the translation phase of Wasmi.\n  [**Link**](https://github.com/wasmi-labs/wasmi/commit/43d7037745a266ece2baccd9e78f7d983dacbb93)\n- Fix `Read` trait implementation for `no_std` compilations.\n  [**Link**](https://github.com/wasmi-labs/wasmi/commit/baab359de955240fbb9c89ebbc369d7a6e6d8569)\n\n### Changed\n\n- Update to `wasmi_core` version `0.3.0`.\n- Changed API of `wasmi::Config` in order to better reflect the API of\n  `wasmtime::Config`.\n- Refactor `Trap` type to be of pointer size which resulted in significant\n  performance wins across the board especially for call intense work loads.\n  [**Link**](https://github.com/wasmi-labs/wasmi/commit/4a5d113a11a0f0020491c2cc08dd195a184256f0)\n\n### Removed\n\n- Removed support for virtual memory based Wasm linear memory.\n  We decided to remove support since benchmarks showed that our current\n  implementation actually regresses performance compared to our naive\n  `Vec` based implementation.\n  [**Link**](https://github.com/wasmi-labs/wasmi/commit/10f8780a49b8cc8d8719e2b74089bf6848b8f982)\n\n### Internal\n\n- The `wasmi::Engine` now caches the bytes of the default linear memory for\n  performance wins in `memory.store` and `memory.load` intense work loads.\n  [**Link**](https://github.com/wasmi-labs/wasmi/commit/c0df344e970bcdd4c6ce25f64265c854a1239220)\n- The Wasmi engine internals have been reorganized and modernised to improve\n  performance on function call intense work loads. This resulted in performance\n  improvements across the board.\n  [**Link**](https://github.com/wasmi-labs/wasmi/commit/d789570b51effb3a0c397c2d4ea1dc03c5d76918)\n- The Wasm to Wasmi bytecode translation now properly reuses heap allocations\n  across function translation units which improved translation performance by\n  roughly 10%.\n  [**Link**](https://github.com/wasmi-labs/wasmi/commit/71a913fc508841b3b7f799c8e4406e1e48feb046)\n- Optimized the Wasmi engine Wasm value stack implementation for significant\n  performance wins across the board.\n  [**Link**](https://github.com/wasmi-labs/wasmi/commit/3886d9190e89d44a701ad5cbbda0c7457feba510)\n- Shrunk size of some internal identifier types for minor performance wins.\n  [**Link**](https://github.com/wasmi-labs/wasmi/commit/3d544b82a5089ae4331024b1e6762dcb48a02898)\n- Added initial naive fuzz testing for Wasm parsing, validation and Wasm to\n  Wasmi bytecode translation.\n  [**Link**](https://github.com/wasmi-labs/wasmi/commit/4d1f2ad6cbf07e61656185101bbd0bd5a941335f)\n\n## [`0.14.0`] - 2022-07-26\n\n### Added\n\n- Added support for the following Wasm proposals:\n\n    - [Import and export of mutable globals](https://github.com/WebAssembly/mutable-global)\n    - [Non-trapping float-to-int conversions](https://github.com/WebAssembly/nontrapping-float-to-int-conversions)\n    - [Sign-extension operators](https://github.com/WebAssembly/sign-extension-ops)\n    - [Multi-value](https://github.com/WebAssembly/multi-value)\n\n  We plan to support more Wasm proposals in the future.\n\n### Changed\n\n- Wasmi has been entirely redesigned and reimplemented.\n  This work resulted in an entirely new API that is heavily inspired by\n  the [Wasmtime API](https://docs.rs/wasmtime/0.39.1/wasmtime/),\n  a brand new Wasm execution engine that performs roughly 30-40%\n  better than the previous engine according to our benchmarks,\n  the support of many Wasm proposals and Wasm parsing and validation\n  using the battle tested [`wasmparser`](https://crates.io/crates/wasmparser)\n  crate by the BytecodeAlliance.\n\n  The new Wasmi design allows to reuse the Wasm execution engine\n  resources instead of spinning up a new Wasm execution engine for every\n  function call.\n\n  **Note:** If you plan to use Wasmi it is of critical importance\n  to compile Wasmi using the following Cargo `profile` settings:\n\n  ```toml\n  [profile.release]\n  lto = \"fat\"\n  codegen-units = 1\n  ```\n\n  If you do not use these profile settings you might risk regressing\n  performance of Wasmi by up to 400%. You can read more about this\n  issue [here](https://github.com/wasmi-labs/wasmi/issues/339).\n\n### Removed\n\n- Removed support for resuming function execution.\n  We may consider to add this feature back into the new engine.\n  If you are a user of Wasmi and want this feature please feel\n  free to [open an issue](https://github.com/wasmi-labs/wasmi/issues)\n  and provide us with your use case.\n\n## [`0.13.2`] - 2022-09-20\n\n### Fixed\n\n- Support allocating 4GB of memory (https://github.com/wasmi-labs/wasmi/pull/452)\n\n## [`0.13.1`] - 2022-09-20\n\n**Note:** Yanked because of missing `wasmi_core` bump.\n\n## [`0.13.0`] - 2022-07-25\n\n**Note:** This is the last major release of the legacy Wasmi engine.\n          Future releases are using the new Wasm execution engines\n          that are currently in development.\n          We may consider to publish new major versions of this Wasm engine\n          as `wasmi-legacy` crate.\n\n### Changed\n\n- Update dependency: `wasmi-validation v0.4.2 -> v0.5.0`\n\n## [`0.12.0`] - 2022-07-24\n\n### Changed\n\n- Wasmi now depends on the [`wasmi_core`](https://crates.io/crates/wasmi_core) crate.\n- Deprecated `RuntimeValue::decode_{f32,f64}` methods.\n    - **Reason**: These methods expose details about the `F32` and `F64` types.\n                  The `RuntimeValue` type provides `from_bits` methods for similar purposes.\n    - **Replacement:** Replace those deprecated methods with `F{32,64}::from_bits().into()` respectively.\n- Refactor traps in Wasmi: [PR](https://github.com/wasmi-labs/wasmi/commit/cd59462bc946a52a7e3e4db491ac6675e3a2f53f)\n    - This change also renames `TrapKind` to `TrapCode`.\n    - The Wasmi crate now properly reuses the `TrapCode` definitions from the `wasmi_core` crate.\n- Updated dependency:\n    - `parity-wasm v0.42 -> v0.45`\n    - `memory_units v0.3.0 -> v0.4.0`\n\n### Internal\n\n- Rename `RuntimeValue` to `Value` internally.\n- Now uses `wat` crate dependency instead of `wabt` for reading `.wat` files in tests.\n- Updated dev-dependencies:\n    - `assert_matches: v1.1 -> v1.5`\n    - `rand 0.4.2 -> 0.8.2`\n- Fix some `clippy` warnings.\n\n## [`0.11.0`] - 2022-01-06\n\n### Fixed\n\n- Make Wasmi traps more conformant with the Wasm specification. (https://github.com/wasmi-labs/wasmi/pull/300)\n- Fixed a bug in `{f32, f64}_copysign` implementations. (https://github.com/wasmi-labs/wasmi/pull/293)\n- Fixed a bug in `{f32, f64}_{min, max}` implementations. (https://github.com/wasmi-labs/wasmi/pull/295)\n\n### Changed\n\n- Optimized Wasm to host calls. (https://github.com/wasmi-labs/wasmi/pull/291)\n    - In some artificial benchmarks we saw improvements of up to 42%!\n- Introduce a more efficient `LittleEndianConvert` trait. (https://github.com/wasmi-labs/wasmi/pull/290)\n\n### Internal\n\n- Refactor and clean up benchmarking code and added more benchmarks.\n    - https://github.com/wasmi-labs/wasmi/pull/299\n    - https://github.com/wasmi-labs/wasmi/pull/298\n- Apply some clippy suggestions with respect ot `#[must_use]`. (https://github.com/wasmi-labs/wasmi/pull/288)\n- Improve Rust code formatting of imports.\n- Improve debug impl of `ValueStack` so that only the live parts are printed.\n\n## [`0.10.0`] - 2021-12-14\n\n### Added\n\n- Support for virtual memory usage on Windows 64-bit platforms.\n    - Technically we now support the same set of platforms as the `region` crate does:\n      https://github.com/darfink/region-rs#platforms\n\n### Changed\n\n- The Wasmi and `wasmi-validation` crates now both use Rust edition 2021.\n- The `README` now better teaches how to test and benchmark the crate.\n- Updated `num-rational` from version `0.2.2` -> `0.4.0`.\n\n### Deprecated\n\n- Deprecated `MemoryInstance::get` method.\n    - Users are recommended to use `MemoryInstance::get_value` or `MemoryInstance::get_into`\n      methods instead.\n\n### Removed\n\n- Removed support for virtual memory on 32-bit platforms.\n    - Note that the existing support was supposedly not more efficient than the `Vec`\n      based fallback implementation anyways due to technical design.\n- Removed the `core` crate feature that previously has been required for `no_std` builds.\n    - Now users only have to specify `--no-default-features` for a `no_std` build.\n\n### Internal\n\n- Fully deploy GitHub Actions CI and remove deprecated Travis based CI. Added CI jobs for:\n    - Testing on Linux, MacOS and Windows\n    - Checking docs and dead links in docs.\n    - Audit crate dependencies for vulnerabilities.\n    - Check Wasm builds.\n    - File test coverage reports to codecov.io.\n\n## [`0.9.1`] - 2021-09-23\n\n### Changed\n\n- Added possibility to forward `reduced_stack_buffers` crate feature to `parity-wasm` crate.\n\n### Internal\n\n- Added a default `rustfmt.toml` configuration file.\n- Fixed some warnings associated to Rust edition 2021.\n    - Note: The crate itself remains in Rust edition 2018.\n\n## [`0.9.0`] - 2021-05-27\n\n### Changed\n\n- Updated `parity-wasm` from verion `0.41` to `0.42`.\n- Bumped `wasmi-validation` from version `0.3.1` to `0.4.0`.\n"
        },
        {
          "name": "CODE_OF_CONDUCT.md",
          "type": "blob",
          "size": 3.693359375,
          "content": "# Contributor Covenant Code of Conduct\n\n## Our Pledge\n\nIn the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to making participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, gender identity and expression, level of experience, nationality, personal appearance, race, religion, or sexual identity and orientation.\n\n## Our Standards\n\nExamples of behavior that contributes to creating a positive environment include:\n\n- Using welcoming and inclusive language\n- Being respectful of differing viewpoints and experiences\n- Gracefully accepting constructive criticism\n- Focusing on what is best for the community\n- Showing empathy towards other community members\n\nExamples of unacceptable behavior by participants include:\n\n- The use of sexualized language or imagery and unwelcome sexual attention or advances\n- Trolling, insulting/derogatory comments, and personal or political attacks\n- Public or private harassment\n- Publishing others' private information, such as a physical or electronic address, without explicit permission\n- Other conduct which could reasonably be considered inappropriate in a professional setting\n\n### Facilitation, Not Strongarming\n\nWe recognise that this software is merely a tool for users to create and maintain their blockchain of preference. We see that blockchains are naturally community platforms with users being the ultimate decision makers. We assert that good software will maximise user agency by facilitate user-expression on the network. As such:\n\n- This project will strive to give users as much choice as is both reasonable and possible over what protocol they adhere to; but\n- use of the project's technical forums, commenting systems, pull requests and issue trackers as a means to express individual protocol preferences is forbidden.\n\n## Our Responsibilities\n\nProject maintainers are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response to any instances of unacceptable behavior.\n\nProject maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful.\n\n## Scope\n\nThis Code of Conduct applies both within project spaces and in public spaces when an individual is representing the project or its community. Examples of representing a project or community include using an official project e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event. Representation of a project may be further defined and clarified by project maintainers.\n\n## Enforcement\n\nInstances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting the project team at admin@parity.io. The project team will review and investigate all complaints, and will respond in a way that it deems appropriate to the circumstances. The project team is obligated to maintain confidentiality with regard to the reporter of an incident. Further details of specific enforcement policies may be posted separately.\n\nProject maintainers who do not follow or enforce the Code of Conduct in good faith may face temporary or permanent repercussions as determined by other members of the project's leadership.\n\n## Attribution\n\nThis Code of Conduct is adapted from the [Contributor Covenant](http://contributor-covenant.org), version 1.4, available at http://contributor-covenant.org/version/1/4\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 5.6162109375,
          "content": "# Contribution Guidelines\n\nFirst of all, thank you for taking your time to contribute to Wasmi!\n\nReading these contribution guidelines is your best initial step towards\nsuccessfully driving the development of Wasmi forward with your own ideas\nand use cases.\n\n## Code of Conduct\n\nPlease respect our [code of conduct](./CODE_OF_CONDUCT.md) in every\ncommunication and discussion related to the Wasmi project.\n\n## I don't want to contribute, I just have some questions\n\nFor technical questions about Wasmi feel free to contact\nus via one of the following communication channels:\n\n- GitHub Discussions\n    - Write a [**new GitHub Discussions post**](https://github.com/wasmi-labs/wasmi/discussions/new).\n    - For simple questions around usage or development of Wasmi.\n- Polkadot Forums\n    - Write a new post in the [**Polkadot Forum**](https://forum.polkadot.network/).\n    - For public Pokadot, smart contract, ink! or `pallet-contracts`\n      related Wasmi questions.\n- GitHub Issue\n    - Write a [**new GitHub issue**](https://github.com/wasmi-labs/wasmi/issues/new).\n    - To initiate a technical (design) discussion or debate.\n- Element Chat\n    - Server: `matrix.parity.io`\n    - Channel: `#substrate-wasm-smart-contracts:matrix.parity.io`\n    - Reach out to us there especially for non-public details and business\n      related (technical) support or general questions about Wasm smart contract\n      execution.\n\n## Communication & Language\n\nIn an open source project communication is one of the most important things.\nPeople from all around the globe with different cultures and native tongues\ncome together to work towards a common goal.\n\nEnglish naturally is the language of choice for developing and communicating\ntechnicalities concerning Wasmi. If you feel like your English skills are not\non par to properly communicate your intent don't feel ashamed to use any of\nthe well known translators in order to make everyone's lifes simpler.\nFeeding properly articulated sentences in your language to an established\ntranslation engine usually yields good translation results.\n\n## Feature Development\n\nBefore developing a new feature for the Wasmi interpreter on your own\nwe recommend checking in on the maintainers via a GitHub issue to discuss\nyour proposed feature in technical details.\nMaintainers usually have a fundamental understanding of the codebase and\ntherefore might know simpler ways to achieve the same thing.\n\nA good feature request issue consists of a problem description of the current\nsituation, a motivating example, the wording for the proposed feature or\nchange and optionally alternative designs and known issues.\n\n## Setup\n\nWe are using a recent version of stable Rust.\nPlease make sure that you are having a proper stable Rust installation on your\nsystem. We recommend using [`rustup`](https://rustup.rs/) to set you up.\n\nFor local CI runs you also are required to have the following `rustup`\ncomponents installed via `rustup component add`:\n\n- `cargo`: The Rust build system and package manager.\n- `clippy`: The Rust linter.\n- `fmt`: For automatic formatting of Rust code.\n- `docs`: For automatic Rust documentation generation.\n\nFurthermore you are going to need `git` version control on your system which\nyou usually can install via your package manager.\n\nCheckout the Wasmi repository using\n```\ngit clone git@github.com:paritytech/wasmi.git\n```\nAnd develop your feature, bug fix, or miscellaneous changes inside of a feature\nbranch\n```\ngit checkout -b $your-branch-name\n```\n\n## Testing\n\nBefore pushing your changes to the main repository as a PR please run the\n`./scripts/run-local-ci.sh` script locally on your machine in order to make sure\nthat your PR is in an acceptable state.\nAlso this reduces resource strain on the expensive CI routines that run on every\nopened PR.\n\nIf you struggle to get your PR into a shape that our CI accepts please feel\nfree to reach out to the maintainers and provide them with the information\nthey need in order to help unblock you.\n\n### Fuzz Testing\n\nRun Wasmi fuzz tests using the following command:\n\n```\ncargo +nightly fuzz run <target>\n```\nWhere `<target>` is the name of any of the files under `fuzz/fuzz_targets`\ndirectory. Unfortunately `+nightly` is required because the `cargo fuzz` tool\ndoes not work on the stable Rust channel.\n\n## Optimizations\n\nIf you are working on changes that are going to optimize any part of the Wasmi\ninterpreter please provide proper benchmarks and make sure that the optimized\ncode parts are properly tested.\n\nCompare benchmarks between `master` branch and your PR as follows:\n```\ngit checkout master\npushd crates/wasmi\ncargo bench --bench benches -- --save-baseline master\ngit checkout $YOUR_PR\ncargo bench --bench benches -- --baseline master\npopd\n```\nThis way you can ensure locally if your optimization techniques actually\nimproved the performance in the expected way.\n\n**Note:** We won't merge PRs that regress performance without proper reasoning.\nA proper reason is to fix a security issue that cannot be fixed otherwise.\n\n## Commits\n\n### Commit Signing\n\nWe require all commits to be signed. GitHub has a [pretty decent documentation]\nabout how to setup signing your Git commits.\n\n[pretty decent documentation]:\nhttps://docs.github.com/en/authentication/managing-commit-signature-verification/signing-commits\n\n### Commit Messages\n\nWe losely follow [semantic commit messages] without the `<type>` tags.\nYou are free to add those commit tags though and if you do please follow\nthe linked guidelines.\nIn any case please use decent language, short and precise commit messages,\nand elaborate in case a commit needs technical explanation in isolation.\n\n[semantic commit messages]:\nhttps://gist.github.com/joshbuchea/6f47e86d2510bce28f8e7f42ae84c716\n"
        },
        {
          "name": "Cargo.lock",
          "type": "blob",
          "size": 54.056640625,
          "content": "# This file is automatically @generated by Cargo.\n# It is not intended for manual editing.\nversion = 3\n\n[[package]]\nname = \"ahash\"\nversion = \"0.8.11\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e89da841a80418a9b391ebaea17f5c112ffaaa96f621d2c285b5174da76b9011\"\ndependencies = [\n \"cfg-if\",\n \"once_cell\",\n \"version_check\",\n \"zerocopy\",\n]\n\n[[package]]\nname = \"aho-corasick\"\nversion = \"1.1.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8e60d3430d3a69478ad0993f19238d2df97c507009a52b3c10addcd7f6bcb916\"\ndependencies = [\n \"memchr\",\n]\n\n[[package]]\nname = \"ambient-authority\"\nversion = \"0.0.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e9d4ee0d472d1cd2e28c97dfa124b3d8d992e10eb0a035f33f5d12e3a177ba3b\"\n\n[[package]]\nname = \"android_system_properties\"\nversion = \"0.1.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"819e7219dbd41043ac279b19830f2efc897156490d7fd6ea916720117ee66311\"\ndependencies = [\n \"libc\",\n]\n\n[[package]]\nname = \"anes\"\nversion = \"0.1.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"4b46cbb362ab8752921c97e041f5e366ee6297bd428a31275b9fcf1e380f7299\"\n\n[[package]]\nname = \"anstream\"\nversion = \"0.6.18\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8acc5369981196006228e28809f761875c0327210a891e941f4c683b3a99529b\"\ndependencies = [\n \"anstyle\",\n \"anstyle-parse\",\n \"anstyle-query\",\n \"anstyle-wincon\",\n \"colorchoice\",\n \"is_terminal_polyfill\",\n \"utf8parse\",\n]\n\n[[package]]\nname = \"anstyle\"\nversion = \"1.0.10\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"55cc3b69f167a1ef2e161439aa98aed94e6028e5f9a59be9a6ffb47aef1651f9\"\n\n[[package]]\nname = \"anstyle-parse\"\nversion = \"0.2.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3b2d16507662817a6a20a9ea92df6652ee4f94f914589377d69f3b21bc5798a9\"\ndependencies = [\n \"utf8parse\",\n]\n\n[[package]]\nname = \"anstyle-query\"\nversion = \"1.1.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"79947af37f4177cfead1110013d678905c37501914fba0efea834c3fe9a8d60c\"\ndependencies = [\n \"windows-sys 0.59.0\",\n]\n\n[[package]]\nname = \"anstyle-wincon\"\nversion = \"3.0.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"2109dbce0e72be3ec00bed26e6a7479ca384ad226efdd66db8fa2e3a38c83125\"\ndependencies = [\n \"anstyle\",\n \"windows-sys 0.59.0\",\n]\n\n[[package]]\nname = \"anyhow\"\nversion = \"1.0.93\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"4c95c10ba0b00a02636238b814946408b1322d5ac4760326e6fb8ec956d85775\"\n\n[[package]]\nname = \"arbitrary\"\nversion = \"1.4.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"dde20b3d026af13f561bdd0f15edf01fc734f0dafcedbaf42bba506a9517f223\"\ndependencies = [\n \"derive_arbitrary\",\n]\n\n[[package]]\nname = \"arrayvec\"\nversion = \"0.7.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"7c02d123df017efcdfbd739ef81735b36c5ba83ec3c59c80a9d7ecc718f92e50\"\n\n[[package]]\nname = \"assert_cmd\"\nversion = \"2.0.16\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"dc1835b7f27878de8525dc71410b5a31cdcc5f230aed5ba5df968e09c201b23d\"\ndependencies = [\n \"anstyle\",\n \"bstr\",\n \"doc-comment\",\n \"libc\",\n \"predicates\",\n \"predicates-core\",\n \"predicates-tree\",\n \"wait-timeout\",\n]\n\n[[package]]\nname = \"assert_matches\"\nversion = \"1.5.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"9b34d609dfbaf33d6889b2b7106d3ca345eacad44200913df5ba02bfd31d2ba9\"\n\n[[package]]\nname = \"async-trait\"\nversion = \"0.1.83\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"721cae7de5c34fbb2acd27e21e6d2cf7b886dce0c27388d46c4e6c47ea4318dd\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn\",\n]\n\n[[package]]\nname = \"autocfg\"\nversion = \"1.4.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ace50bade8e6234aa140d9a2f552bbee1db4d353f69b8217bc503490fc1a9f26\"\n\n[[package]]\nname = \"bitflags\"\nversion = \"2.6.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b048fb63fd8b5923fc5aa7b340d8e156aec7ec02f0c78fa8a6ddc2613f6f71de\"\n\n[[package]]\nname = \"block-buffer\"\nversion = \"0.10.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3078c7629b62d3f0439517fa394996acacc5cbc91c5a20d8c658e77abd503a71\"\ndependencies = [\n \"generic-array\",\n]\n\n[[package]]\nname = \"bstr\"\nversion = \"1.11.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1a68f1f47cdf0ec8ee4b941b2eee2a80cb796db73118c0dd09ac63fbe405be22\"\ndependencies = [\n \"memchr\",\n \"regex-automata\",\n \"serde\",\n]\n\n[[package]]\nname = \"bumpalo\"\nversion = \"3.16.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"79296716171880943b8470b5f8d03aa55eb2e645a4874bdbb28adb49162e012c\"\n\n[[package]]\nname = \"byteorder\"\nversion = \"1.5.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1fd0f2584146f6f2ef48085050886acf353beff7305ebd1ae69500e27c67f64b\"\n\n[[package]]\nname = \"cap-fs-ext\"\nversion = \"3.4.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e16619ada836f12897a72011fe99b03f0025b87a8dbbea4f3c9f89b458a23bf3\"\ndependencies = [\n \"cap-primitives\",\n \"cap-std\",\n \"io-lifetimes\",\n \"windows-sys 0.52.0\",\n]\n\n[[package]]\nname = \"cap-primitives\"\nversion = \"3.4.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"82fa6c3f9773feab88d844aa50035a33fb6e7e7426105d2f4bb7aadc42a5f89a\"\ndependencies = [\n \"ambient-authority\",\n \"fs-set-times\",\n \"io-extras\",\n \"io-lifetimes\",\n \"ipnet\",\n \"maybe-owned\",\n \"rustix\",\n \"windows-sys 0.52.0\",\n \"winx\",\n]\n\n[[package]]\nname = \"cap-rand\"\nversion = \"3.4.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"53774d49369892b70184f8312e50c1b87edccb376691de4485b0ff554b27c36c\"\ndependencies = [\n \"ambient-authority\",\n \"rand\",\n]\n\n[[package]]\nname = \"cap-std\"\nversion = \"3.4.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"7f71b70818556b4fe2a10c7c30baac3f5f45e973f49fc2673d7c75c39d0baf5b\"\ndependencies = [\n \"cap-primitives\",\n \"io-extras\",\n \"io-lifetimes\",\n \"rustix\",\n]\n\n[[package]]\nname = \"cap-time-ext\"\nversion = \"3.4.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"69dd48afa2363f746c93f961c211f6f099fb594a3446b8097bc5f79db51b6816\"\ndependencies = [\n \"ambient-authority\",\n \"cap-primitives\",\n \"iana-time-zone\",\n \"once_cell\",\n \"rustix\",\n \"winx\",\n]\n\n[[package]]\nname = \"cast\"\nversion = \"0.3.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"37b2a672a2cb129a2e41c10b1224bb368f9f37a2b16b612598138befd7b37eb5\"\n\n[[package]]\nname = \"cc\"\nversion = \"1.2.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f34d93e62b03caf570cccc334cbc6c2fceca82f39211051345108adcba3eebdc\"\ndependencies = [\n \"jobserver\",\n \"libc\",\n \"shlex\",\n]\n\n[[package]]\nname = \"cfg-if\"\nversion = \"1.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"baf1de4339761588bc0619e3cbc0120ee582ebb74b53b4efbf79117bd2da40fd\"\n\n[[package]]\nname = \"ciborium\"\nversion = \"0.2.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"42e69ffd6f0917f5c029256a24d0161db17cea3997d185db0d35926308770f0e\"\ndependencies = [\n \"ciborium-io\",\n \"ciborium-ll\",\n \"serde\",\n]\n\n[[package]]\nname = \"ciborium-io\"\nversion = \"0.2.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"05afea1e0a06c9be33d539b876f1ce3692f4afea2cb41f740e7743225ed1c757\"\n\n[[package]]\nname = \"ciborium-ll\"\nversion = \"0.2.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"57663b653d948a338bfb3eeba9bb2fd5fcfaecb9e199e87e1eda4d9e8b240fd9\"\ndependencies = [\n \"ciborium-io\",\n \"half\",\n]\n\n[[package]]\nname = \"clap\"\nversion = \"4.5.21\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"fb3b4b9e5a7c7514dfa52869339ee98b3156b0bfb4e8a77c4ff4babb64b1604f\"\ndependencies = [\n \"clap_builder\",\n \"clap_derive\",\n]\n\n[[package]]\nname = \"clap_builder\"\nversion = \"4.5.21\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b17a95aa67cc7b5ebd32aa5370189aa0d79069ef1c64ce893bd30fb24bff20ec\"\ndependencies = [\n \"anstream\",\n \"anstyle\",\n \"clap_lex\",\n \"strsim\",\n]\n\n[[package]]\nname = \"clap_derive\"\nversion = \"4.5.18\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"4ac6a0c7b1a9e9a5186361f67dfa1b88213572f427fb9ab038efb2bd8c582dab\"\ndependencies = [\n \"heck\",\n \"proc-macro2\",\n \"quote\",\n \"syn\",\n]\n\n[[package]]\nname = \"clap_lex\"\nversion = \"0.7.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"afb84c814227b90d6895e01398aee0d8033c00e7466aca416fb6a8e0eb19d8a7\"\n\n[[package]]\nname = \"cobs\"\nversion = \"0.2.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"67ba02a97a2bd10f4b59b25c7973101c79642302776489e030cd13cdab09ed15\"\n\n[[package]]\nname = \"colorchoice\"\nversion = \"1.0.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"5b63caa9aa9397e2d9480a9b13673856c78d8ac123288526c37d7839f2a86990\"\n\n[[package]]\nname = \"core-foundation-sys\"\nversion = \"0.8.7\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"773648b94d0e5d620f64f280777445740e61fe701025087ec8b57f45c791888b\"\n\n[[package]]\nname = \"cpufeatures\"\nversion = \"0.2.16\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"16b80225097f2e5ae4e7179dd2266824648f3e2f49d9134d584b76389d31c4c3\"\ndependencies = [\n \"libc\",\n]\n\n[[package]]\nname = \"cranelift-bforest\"\nversion = \"0.114.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"2ba4f80548f22dc9c43911907b5e322c5555544ee85f785115701e6a28c9abe1\"\ndependencies = [\n \"cranelift-entity\",\n]\n\n[[package]]\nname = \"cranelift-bitset\"\nversion = \"0.114.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"005884e3649c3e5ff2dc79e8a94b138f11569cc08a91244a292714d2a86e9156\"\ndependencies = [\n \"serde\",\n \"serde_derive\",\n]\n\n[[package]]\nname = \"cranelift-codegen\"\nversion = \"0.114.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"fe4036255ec33ce9a37495dfbcfc4e1118fd34e693eff9a1e106336b7cd16a9b\"\ndependencies = [\n \"bumpalo\",\n \"cranelift-bforest\",\n \"cranelift-bitset\",\n \"cranelift-codegen-meta\",\n \"cranelift-codegen-shared\",\n \"cranelift-control\",\n \"cranelift-entity\",\n \"cranelift-isle\",\n \"gimli\",\n \"hashbrown 0.14.5\",\n \"log\",\n \"regalloc2\",\n \"rustc-hash\",\n \"serde\",\n \"smallvec\",\n \"target-lexicon\",\n]\n\n[[package]]\nname = \"cranelift-codegen-meta\"\nversion = \"0.114.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f7ca74f4b68319da11d39e894437cb6e20ec7c2e11fbbda823c3bf207beedff7\"\ndependencies = [\n \"cranelift-codegen-shared\",\n]\n\n[[package]]\nname = \"cranelift-codegen-shared\"\nversion = \"0.114.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"897e54f433a0269c4187871aa06d452214d5515d228d5bdc22219585e9eef895\"\n\n[[package]]\nname = \"cranelift-control\"\nversion = \"0.114.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"29cb4018f5bf59fb53f515fa9d80e6f8c5ce19f198dc538984ebd23ecf8965ec\"\ndependencies = [\n \"arbitrary\",\n]\n\n[[package]]\nname = \"cranelift-entity\"\nversion = \"0.114.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"305399fd781a2953ac78c1396f02ff53144f39c33eb7fc7789cf4e8936d13a96\"\ndependencies = [\n \"cranelift-bitset\",\n \"serde\",\n \"serde_derive\",\n]\n\n[[package]]\nname = \"cranelift-frontend\"\nversion = \"0.114.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"9230b460a128d53653456137751d27baf567947a3ab8c0c4d6e31fd08036d81e\"\ndependencies = [\n \"cranelift-codegen\",\n \"log\",\n \"smallvec\",\n \"target-lexicon\",\n]\n\n[[package]]\nname = \"cranelift-isle\"\nversion = \"0.114.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b961e24ae3ec9813a24a15ae64bbd2a42e4de4d79a7f3225a412e3b94e78d1c8\"\n\n[[package]]\nname = \"cranelift-native\"\nversion = \"0.114.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"4d5bd76df6c9151188dfa428c863b33da5b34561b67f43c0cf3f24a794f9fa1f\"\ndependencies = [\n \"cranelift-codegen\",\n \"libc\",\n \"target-lexicon\",\n]\n\n[[package]]\nname = \"crc32fast\"\nversion = \"1.4.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a97769d94ddab943e4510d138150169a2758b5ef3eb191a9ee688de3e23ef7b3\"\ndependencies = [\n \"cfg-if\",\n]\n\n[[package]]\nname = \"criterion\"\nversion = \"0.5.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f2b12d017a929603d80db1831cd3a24082f8137ce19c69e6447f54f5fc8d692f\"\ndependencies = [\n \"anes\",\n \"cast\",\n \"ciborium\",\n \"clap\",\n \"criterion-plot\",\n \"is-terminal\",\n \"itertools 0.10.5\",\n \"num-traits\",\n \"once_cell\",\n \"oorandom\",\n \"regex\",\n \"serde\",\n \"serde_derive\",\n \"serde_json\",\n \"tinytemplate\",\n \"walkdir\",\n]\n\n[[package]]\nname = \"criterion-plot\"\nversion = \"0.5.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"6b50826342786a51a89e2da3a28f1c32b06e387201bc2d19791f622c673706b1\"\ndependencies = [\n \"cast\",\n \"itertools 0.10.5\",\n]\n\n[[package]]\nname = \"crunchy\"\nversion = \"0.2.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"7a81dae078cea95a014a339291cec439d2f232ebe854a9d672b796c6afafa9b7\"\n\n[[package]]\nname = \"crypto-common\"\nversion = \"0.1.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1bfb12502f3fc46cca1bb51ac28df9d618d813cdc3d2f25b9fe775a34af26bb3\"\ndependencies = [\n \"generic-array\",\n \"typenum\",\n]\n\n[[package]]\nname = \"derive_arbitrary\"\nversion = \"1.4.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"30542c1ad912e0e3d22a1935c290e12e8a29d704a420177a31faad4a601a0800\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn\",\n]\n\n[[package]]\nname = \"difflib\"\nversion = \"0.4.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"6184e33543162437515c2e2b48714794e37845ec9851711914eec9d308f6ebe8\"\n\n[[package]]\nname = \"digest\"\nversion = \"0.10.7\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"9ed9a281f7bc9b7576e61468ba615a66a5c8cfdff42420a70aa82701a3b1e292\"\ndependencies = [\n \"block-buffer\",\n \"crypto-common\",\n]\n\n[[package]]\nname = \"dirs\"\nversion = \"4.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ca3aa72a6f96ea37bbc5aa912f6788242832f75369bdfdadcb0e38423f100059\"\ndependencies = [\n \"dirs-sys\",\n]\n\n[[package]]\nname = \"dirs-sys\"\nversion = \"0.3.7\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1b1d1d91c932ef41c0f2663aa8b0ca0342d444d842c06914aa0a7e352d0bada6\"\ndependencies = [\n \"libc\",\n \"redox_users\",\n \"winapi\",\n]\n\n[[package]]\nname = \"doc-comment\"\nversion = \"0.3.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"fea41bba32d969b513997752735605054bc0dfa92b4c56bf1189f2e174be7a10\"\n\n[[package]]\nname = \"downcast-rs\"\nversion = \"1.2.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"75b325c5dbd37f80359721ad39aca5a29fb04c89279657cffdda8736d0c0b9d2\"\n\n[[package]]\nname = \"either\"\nversion = \"1.13.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"60b1af1c220855b6ceac025d3f6ecdd2b7c4894bfe9cd9bda4fbb4bc7c0d4cf0\"\n\n[[package]]\nname = \"embedded-io\"\nversion = \"0.4.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ef1a6892d9eef45c8fa6b9e0086428a2cca8491aca8f787c534a3d6d0bcb3ced\"\n\n[[package]]\nname = \"embedded-io\"\nversion = \"0.6.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"edd0f118536f44f5ccd48bcb8b111bdc3de888b58c74639dfb034a357d0f206d\"\n\n[[package]]\nname = \"equivalent\"\nversion = \"1.0.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"5443807d6dff69373d433ab9ef5378ad8df50ca6298caf15de6e52e24aaf54d5\"\n\n[[package]]\nname = \"errno\"\nversion = \"0.3.10\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"33d852cb9b869c2a9b3df2f71a3074817f01e1844f839a144f5fcef059a4eb5d\"\ndependencies = [\n \"libc\",\n \"windows-sys 0.59.0\",\n]\n\n[[package]]\nname = \"fallible-iterator\"\nversion = \"0.3.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"2acce4a10f12dc2fb14a218589d4f1f62ef011b2d0cc4b3cb1bba8e94da14649\"\n\n[[package]]\nname = \"fd-lock\"\nversion = \"4.0.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"7e5768da2206272c81ef0b5e951a41862938a6070da63bcea197899942d3b947\"\ndependencies = [\n \"cfg-if\",\n \"rustix\",\n \"windows-sys 0.52.0\",\n]\n\n[[package]]\nname = \"flagset\"\nversion = \"0.4.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b3ea1ec5f8307826a5b71094dd91fc04d4ae75d5709b20ad351c7fb4815c86ec\"\n\n[[package]]\nname = \"foldhash\"\nversion = \"0.1.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f81ec6369c545a7d40e4589b5597581fa1c441fe1cce96dd1de43159910a36a2\"\n\n[[package]]\nname = \"fs-set-times\"\nversion = \"0.20.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"033b337d725b97690d86893f9de22b67b80dcc4e9ad815f348254c38119db8fb\"\ndependencies = [\n \"io-lifetimes\",\n \"rustix\",\n \"windows-sys 0.52.0\",\n]\n\n[[package]]\nname = \"fuzz\"\nversion = \"0.0.0\"\ndependencies = [\n \"arbitrary\",\n \"libfuzzer-sys\",\n \"wasm-smith\",\n \"wasmi 0.40.0\",\n \"wasmi_fuzz\",\n]\n\n[[package]]\nname = \"generic-array\"\nversion = \"0.14.7\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"85649ca51fd72272d7821adaf274ad91c288277713d9c18820d8499a7ff69e9a\"\ndependencies = [\n \"typenum\",\n \"version_check\",\n]\n\n[[package]]\nname = \"getrandom\"\nversion = \"0.2.15\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"c4567c8db10ae91089c99af84c68c38da3ec2f087c3f82960bcdbf3656b6f4d7\"\ndependencies = [\n \"cfg-if\",\n \"libc\",\n \"wasi\",\n]\n\n[[package]]\nname = \"gimli\"\nversion = \"0.31.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"07e28edb80900c19c28f1072f2e8aeca7fa06b23cd4169cefe1af5aa3260783f\"\ndependencies = [\n \"fallible-iterator\",\n \"indexmap\",\n \"stable_deref_trait\",\n]\n\n[[package]]\nname = \"half\"\nversion = \"2.4.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"6dd08c532ae367adf81c312a4580bc67f1d0fe8bc9c460520283f4c0ff277888\"\ndependencies = [\n \"cfg-if\",\n \"crunchy\",\n]\n\n[[package]]\nname = \"hashbrown\"\nversion = \"0.14.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e5274423e17b7c9fc20b6e7e208532f9b19825d82dfd615708b70edd83df41f1\"\ndependencies = [\n \"ahash\",\n \"serde\",\n]\n\n[[package]]\nname = \"hashbrown\"\nversion = \"0.15.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"bf151400ff0baff5465007dd2f3e717f3fe502074ca563069ce3a6629d07b289\"\ndependencies = [\n \"foldhash\",\n]\n\n[[package]]\nname = \"heck\"\nversion = \"0.5.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"2304e00983f87ffb38b55b444b5e3b60a884b5d30c0fca7d82fe33449bbe55ea\"\n\n[[package]]\nname = \"hermit-abi\"\nversion = \"0.4.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"fbf6a919d6cf397374f7dfeeea91d974c7c0a7221d0d0f4f20d859d329e53fcc\"\n\n[[package]]\nname = \"iana-time-zone\"\nversion = \"0.1.61\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"235e081f3925a06703c2d0117ea8b91f042756fd6e7a6e5d901e8ca1a996b220\"\ndependencies = [\n \"android_system_properties\",\n \"core-foundation-sys\",\n \"iana-time-zone-haiku\",\n \"js-sys\",\n \"wasm-bindgen\",\n \"windows-core\",\n]\n\n[[package]]\nname = \"iana-time-zone-haiku\"\nversion = \"0.1.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f31827a206f56af32e590ba56d5d2d085f558508192593743f16b2306495269f\"\ndependencies = [\n \"cc\",\n]\n\n[[package]]\nname = \"id-arena\"\nversion = \"2.2.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"25a2bc672d1148e28034f176e01fffebb08b35768468cc954630da77a1449005\"\n\n[[package]]\nname = \"indexmap\"\nversion = \"2.7.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"62f822373a4fe84d4bb149bf54e584a7f4abec90e072ed49cda0edea5b95471f\"\ndependencies = [\n \"equivalent\",\n \"hashbrown 0.15.2\",\n \"serde\",\n]\n\n[[package]]\nname = \"indexmap-nostd\"\nversion = \"0.4.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8e04e2fd2b8188ea827b32ef11de88377086d690286ab35747ef7f9bf3ccb590\"\n\n[[package]]\nname = \"io-extras\"\nversion = \"0.18.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"7d45fd7584f9b67ac37bc041212d06bfac0700b36456b05890d36a3b626260eb\"\ndependencies = [\n \"io-lifetimes\",\n \"windows-sys 0.52.0\",\n]\n\n[[package]]\nname = \"io-lifetimes\"\nversion = \"2.0.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"5a611371471e98973dbcab4e0ec66c31a10bc356eeb4d54a0e05eac8158fe38c\"\n\n[[package]]\nname = \"ipnet\"\nversion = \"2.10.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ddc24109865250148c2e0f3d25d4f0f479571723792d3802153c60922a4fb708\"\n\n[[package]]\nname = \"is-terminal\"\nversion = \"0.4.13\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"261f68e344040fbd0edea105bef17c66edf46f984ddb1115b775ce31be948f4b\"\ndependencies = [\n \"hermit-abi\",\n \"libc\",\n \"windows-sys 0.52.0\",\n]\n\n[[package]]\nname = \"is_terminal_polyfill\"\nversion = \"1.70.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"7943c866cc5cd64cbc25b2e01621d07fa8eb2a1a23160ee81ce38704e97b8ecf\"\n\n[[package]]\nname = \"itertools\"\nversion = \"0.10.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b0fd2260e829bddf4cb6ea802289de2f86d6a7a690192fbe91b3f46e0f2c8473\"\ndependencies = [\n \"either\",\n]\n\n[[package]]\nname = \"itertools\"\nversion = \"0.12.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ba291022dbbd398a455acf126c1e341954079855bc60dfdda641363bd6922569\"\ndependencies = [\n \"either\",\n]\n\n[[package]]\nname = \"itoa\"\nversion = \"1.0.14\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d75a2a4b1b190afb6f5425f10f6a8f959d2ea0b9c2b1d79553551850539e4674\"\n\n[[package]]\nname = \"jobserver\"\nversion = \"0.1.32\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"48d1dbcbbeb6a7fec7e059840aa538bd62aaccf972c7346c4d9d2059312853d0\"\ndependencies = [\n \"libc\",\n]\n\n[[package]]\nname = \"js-sys\"\nversion = \"0.3.74\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a865e038f7f6ed956f788f0d7d60c541fff74c7bd74272c5d4cf15c63743e705\"\ndependencies = [\n \"once_cell\",\n \"wasm-bindgen\",\n]\n\n[[package]]\nname = \"leb128\"\nversion = \"0.2.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"884e2677b40cc8c339eaefcb701c32ef1fd2493d71118dc0ca4b6a736c93bd67\"\n\n[[package]]\nname = \"libc\"\nversion = \"0.2.167\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"09d6582e104315a817dff97f75133544b2e094ee22447d2acf4a74e189ba06fc\"\n\n[[package]]\nname = \"libfuzzer-sys\"\nversion = \"0.4.8\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"9b9569d2f74e257076d8c6bfa73fb505b46b851e51ddaecc825944aa3bed17fa\"\ndependencies = [\n \"arbitrary\",\n \"cc\",\n]\n\n[[package]]\nname = \"libm\"\nversion = \"0.2.11\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8355be11b20d696c8f18f6cc018c4e372165b1fa8126cef092399c9951984ffa\"\n\n[[package]]\nname = \"libredox\"\nversion = \"0.1.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"c0ff37bd590ca25063e35af745c343cb7a0271906fb7b37e4813e8f79f00268d\"\ndependencies = [\n \"bitflags\",\n \"libc\",\n]\n\n[[package]]\nname = \"linux-raw-sys\"\nversion = \"0.4.14\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"78b3ae25bc7c8c38cec158d1f2757ee79e9b3740fbc7ccf0e59e4b08d793fa89\"\n\n[[package]]\nname = \"log\"\nversion = \"0.4.22\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a7a70ba024b9dc04c27ea2f0c0548feb474ec5c54bba33a7f72f873a39d07b24\"\n\n[[package]]\nname = \"mach2\"\nversion = \"0.4.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"19b955cdeb2a02b9117f121ce63aa52d08ade45de53e48fe6a38b39c10f6f709\"\ndependencies = [\n \"libc\",\n]\n\n[[package]]\nname = \"maybe-owned\"\nversion = \"0.3.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"4facc753ae494aeb6e3c22f839b158aebd4f9270f55cd3c79906c45476c47ab4\"\n\n[[package]]\nname = \"memchr\"\nversion = \"2.7.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"78ca9ab1a0babb1e7d5695e3530886289c18cf2f87ec19a575a0abdce112e3a3\"\n\n[[package]]\nname = \"memfd\"\nversion = \"0.6.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b2cffa4ad52c6f791f4f8b15f0c05f9824b2ced1160e88cc393d64fff9a8ac64\"\ndependencies = [\n \"rustix\",\n]\n\n[[package]]\nname = \"multi-stash\"\nversion = \"0.2.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"685a9ac4b61f4e728e1d2c6a7844609c16527aeb5e6c865915c08e619c16410f\"\n\n[[package]]\nname = \"num-traits\"\nversion = \"0.2.19\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"071dfc062690e90b734c0b2273ce72ad0ffa95f0c74596bc250dcfd960262841\"\ndependencies = [\n \"autocfg\",\n]\n\n[[package]]\nname = \"object\"\nversion = \"0.36.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"aedf0a2d09c573ed1d8d85b30c119153926a2b36dce0ab28322c09a117a4683e\"\ndependencies = [\n \"crc32fast\",\n \"hashbrown 0.15.2\",\n \"indexmap\",\n \"memchr\",\n]\n\n[[package]]\nname = \"once_cell\"\nversion = \"1.20.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1261fe7e33c73b354eab43b1273a57c8f967d0391e80353e51f764ac02cf6775\"\n\n[[package]]\nname = \"oorandom\"\nversion = \"11.1.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b410bbe7e14ab526a0e86877eb47c6996a2bd7746f027ba551028c925390e4e9\"\n\n[[package]]\nname = \"paste\"\nversion = \"1.0.15\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"57c0d7b74b563b49d38dae00a0c37d4d6de9b432382b2892f0574ddcae73fd0a\"\n\n[[package]]\nname = \"pin-project-lite\"\nversion = \"0.2.15\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"915a1e146535de9163f3987b8944ed8cf49a18bb0056bcebcdcece385cece4ff\"\n\n[[package]]\nname = \"postcard\"\nversion = \"1.1.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"170a2601f67cc9dba8edd8c4870b15f71a6a2dc196daec8c83f72b59dff628a8\"\ndependencies = [\n \"cobs\",\n \"embedded-io 0.4.0\",\n \"embedded-io 0.6.1\",\n \"serde\",\n]\n\n[[package]]\nname = \"ppv-lite86\"\nversion = \"0.2.20\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"77957b295656769bb8ad2b6a6b09d897d94f05c41b069aede1fcdaa675eaea04\"\ndependencies = [\n \"zerocopy\",\n]\n\n[[package]]\nname = \"predicates\"\nversion = \"3.1.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"7e9086cc7640c29a356d1a29fd134380bee9d8f79a17410aa76e7ad295f42c97\"\ndependencies = [\n \"anstyle\",\n \"difflib\",\n \"predicates-core\",\n]\n\n[[package]]\nname = \"predicates-core\"\nversion = \"1.0.8\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ae8177bee8e75d6846599c6b9ff679ed51e882816914eec639944d7c9aa11931\"\n\n[[package]]\nname = \"predicates-tree\"\nversion = \"1.0.11\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"41b740d195ed3166cd147c8047ec98db0e22ec019eb8eeb76d343b795304fb13\"\ndependencies = [\n \"predicates-core\",\n \"termtree\",\n]\n\n[[package]]\nname = \"proc-macro2\"\nversion = \"1.0.92\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"37d3544b3f2748c54e147655edb5025752e2303145b5aefb3c3ea2c78b973bb0\"\ndependencies = [\n \"unicode-ident\",\n]\n\n[[package]]\nname = \"psm\"\nversion = \"0.1.24\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"200b9ff220857e53e184257720a14553b2f4aa02577d2ed9842d45d4b9654810\"\ndependencies = [\n \"cc\",\n]\n\n[[package]]\nname = \"pulley-interpreter\"\nversion = \"27.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a3b8d81cf799e20564931e9867ca32de545188c6ee4c2e0f6e41d32f0c7dc6fb\"\ndependencies = [\n \"cranelift-bitset\",\n \"log\",\n \"sptr\",\n]\n\n[[package]]\nname = \"quote\"\nversion = \"1.0.37\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b5b9d34b8991d19d98081b46eacdd8eb58c6f2b201139f7c5f643cc155a633af\"\ndependencies = [\n \"proc-macro2\",\n]\n\n[[package]]\nname = \"rand\"\nversion = \"0.8.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"34af8d1a0e25924bc5b7c43c079c942339d8f0a8b57c39049bef581b46327404\"\ndependencies = [\n \"libc\",\n \"rand_chacha\",\n \"rand_core\",\n]\n\n[[package]]\nname = \"rand_chacha\"\nversion = \"0.3.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e6c10a63a0fa32252be49d21e7709d4d4baf8d231c2dbce1eaa8141b9b127d88\"\ndependencies = [\n \"ppv-lite86\",\n \"rand_core\",\n]\n\n[[package]]\nname = \"rand_core\"\nversion = \"0.6.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ec0be4795e2f6a28069bec0b5ff3e2ac9bafc99e6a9a7dc3547996c5c816922c\"\ndependencies = [\n \"getrandom\",\n]\n\n[[package]]\nname = \"redox_users\"\nversion = \"0.4.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ba009ff324d1fc1b900bd1fdb31564febe58a8ccc8a6fdbb93b543d33b13ca43\"\ndependencies = [\n \"getrandom\",\n \"libredox\",\n \"thiserror\",\n]\n\n[[package]]\nname = \"regalloc2\"\nversion = \"0.10.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"12908dbeb234370af84d0579b9f68258a0f67e201412dd9a2814e6f45b2fc0f0\"\ndependencies = [\n \"hashbrown 0.14.5\",\n \"log\",\n \"rustc-hash\",\n \"slice-group-by\",\n \"smallvec\",\n]\n\n[[package]]\nname = \"regex\"\nversion = \"1.11.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b544ef1b4eac5dc2db33ea63606ae9ffcfac26c1416a2806ae0bf5f56b201191\"\ndependencies = [\n \"aho-corasick\",\n \"memchr\",\n \"regex-automata\",\n \"regex-syntax\",\n]\n\n[[package]]\nname = \"regex-automata\"\nversion = \"0.4.9\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"809e8dc61f6de73b46c85f4c96486310fe304c434cfa43669d7b40f711150908\"\ndependencies = [\n \"aho-corasick\",\n \"memchr\",\n \"regex-syntax\",\n]\n\n[[package]]\nname = \"regex-syntax\"\nversion = \"0.8.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"2b15c43186be67a4fd63bee50d0303afffcef381492ebe2c5d87f324e1b8815c\"\n\n[[package]]\nname = \"rustc-hash\"\nversion = \"2.1.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"c7fb8039b3032c191086b10f11f319a6e99e1e82889c5cc6046f515c9db1d497\"\n\n[[package]]\nname = \"rustix\"\nversion = \"0.38.41\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d7f649912bc1495e167a6edee79151c84b1bad49748cb4f1f1167f459f6224f6\"\ndependencies = [\n \"bitflags\",\n \"errno\",\n \"itoa\",\n \"libc\",\n \"linux-raw-sys\",\n \"once_cell\",\n \"windows-sys 0.52.0\",\n]\n\n[[package]]\nname = \"ryu\"\nversion = \"1.0.18\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f3cb5ba0dc43242ce17de99c180e96db90b235b8a9fdc9543c96d2209116bd9f\"\n\n[[package]]\nname = \"same-file\"\nversion = \"1.0.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"93fc1dc3aaa9bfed95e02e6eadabb4baf7e3078b0bd1b4d7b6b0b68378900502\"\ndependencies = [\n \"winapi-util\",\n]\n\n[[package]]\nname = \"semver\"\nversion = \"1.0.23\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"61697e0a1c7e512e84a621326239844a24d8207b4669b41bc18b32ea5cbf988b\"\n\n[[package]]\nname = \"serde\"\nversion = \"1.0.215\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"6513c1ad0b11a9376da888e3e0baa0077f1aed55c17f50e7b2397136129fb88f\"\ndependencies = [\n \"serde_derive\",\n]\n\n[[package]]\nname = \"serde_derive\"\nversion = \"1.0.215\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ad1e866f866923f252f05c889987993144fb74e722403468a4ebd70c3cd756c0\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn\",\n]\n\n[[package]]\nname = \"serde_json\"\nversion = \"1.0.133\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"c7fceb2473b9166b2294ef05efcb65a3db80803f0b03ef86a5fc88a2b85ee377\"\ndependencies = [\n \"itoa\",\n \"memchr\",\n \"ryu\",\n \"serde\",\n]\n\n[[package]]\nname = \"sha2\"\nversion = \"0.10.8\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"793db75ad2bcafc3ffa7c68b215fee268f537982cd901d132f89c6343f3a3dc8\"\ndependencies = [\n \"cfg-if\",\n \"cpufeatures\",\n \"digest\",\n]\n\n[[package]]\nname = \"shellexpand\"\nversion = \"2.1.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"7ccc8076840c4da029af4f87e4e8daeb0fca6b87bbb02e10cb60b791450e11e4\"\ndependencies = [\n \"dirs\",\n]\n\n[[package]]\nname = \"shlex\"\nversion = \"1.3.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"0fda2ff0d084019ba4d7c6f371c95d8fd75ce3524c3cb8fb653a3023f6323e64\"\n\n[[package]]\nname = \"slice-group-by\"\nversion = \"0.3.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"826167069c09b99d56f31e9ae5c99049e932a98c9dc2dac47645b08dbbf76ba7\"\n\n[[package]]\nname = \"smallvec\"\nversion = \"1.13.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3c5e1a9a646d36c3599cd173a41282daf47c44583ad367b8e6837255952e5c67\"\ndependencies = [\n \"serde\",\n]\n\n[[package]]\nname = \"spin\"\nversion = \"0.9.8\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"6980e8d7511241f8acf4aebddbb1ff938df5eebe98691418c4468d0b72a96a67\"\n\n[[package]]\nname = \"sptr\"\nversion = \"0.3.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3b9b39299b249ad65f3b7e96443bad61c02ca5cd3589f46cb6d610a0fd6c0d6a\"\n\n[[package]]\nname = \"stable_deref_trait\"\nversion = \"1.2.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a8f112729512f8e442d81f95a8a7ddf2b7c6b8a1a6f509a95864142b30cab2d3\"\n\n[[package]]\nname = \"string-interner\"\nversion = \"0.18.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1a3275464d7a9f2d4cac57c89c2ef96a8524dba2864c8d6f82e3980baf136f9b\"\ndependencies = [\n \"hashbrown 0.15.2\",\n \"serde\",\n]\n\n[[package]]\nname = \"strsim\"\nversion = \"0.11.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"7da8b5736845d9f2fcb837ea5d9e2628564b3b043a70948a3f0b778838c5fb4f\"\n\n[[package]]\nname = \"syn\"\nversion = \"2.0.90\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"919d3b74a5dd0ccd15aeb8f93e7006bd9e14c295087c9896a110f490752bcf31\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"unicode-ident\",\n]\n\n[[package]]\nname = \"system-interface\"\nversion = \"0.27.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b858526d22750088a9b3cf2e3c2aacebd5377f13adeec02860c30d09113010a6\"\ndependencies = [\n \"bitflags\",\n \"cap-fs-ext\",\n \"cap-std\",\n \"fd-lock\",\n \"io-lifetimes\",\n \"rustix\",\n \"windows-sys 0.52.0\",\n \"winx\",\n]\n\n[[package]]\nname = \"target-lexicon\"\nversion = \"0.12.16\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"61c41af27dd6d1e27b1b16b489db798443478cef1f06a660c96db617ba5de3b1\"\n\n[[package]]\nname = \"termcolor\"\nversion = \"1.4.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"06794f8f6c5c898b3275aebefa6b8a1cb24cd2c6c79397ab15774837a0bc5755\"\ndependencies = [\n \"winapi-util\",\n]\n\n[[package]]\nname = \"termtree\"\nversion = \"0.4.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3369f5ac52d5eb6ab48c6b4ffdc8efbcad6b89c765749064ba298f2c68a16a76\"\n\n[[package]]\nname = \"thiserror\"\nversion = \"1.0.69\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b6aaf5339b578ea85b50e080feb250a3e8ae8cfcdff9a461c9ec2904bc923f52\"\ndependencies = [\n \"thiserror-impl\",\n]\n\n[[package]]\nname = \"thiserror-impl\"\nversion = \"1.0.69\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"4fee6c4efc90059e10f81e6d42c60a18f76588c3d74cb83a0b242a2b6c7504c1\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn\",\n]\n\n[[package]]\nname = \"tinytemplate\"\nversion = \"1.2.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"be4d6b5f19ff7664e8c98d03e2139cb510db9b0a60b55f8e8709b689d939b6bc\"\ndependencies = [\n \"serde\",\n \"serde_json\",\n]\n\n[[package]]\nname = \"tracing\"\nversion = \"0.1.41\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"784e0ac535deb450455cbfa28a6f0df145ea1bb7ae51b821cf5e7927fdcfbdd0\"\ndependencies = [\n \"pin-project-lite\",\n \"tracing-attributes\",\n \"tracing-core\",\n]\n\n[[package]]\nname = \"tracing-attributes\"\nversion = \"0.1.28\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"395ae124c09f9e6918a2310af6038fba074bcf474ac352496d5910dd59a2226d\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn\",\n]\n\n[[package]]\nname = \"tracing-core\"\nversion = \"0.1.33\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e672c95779cf947c5311f83787af4fa8fffd12fb27e4993211a84bdfd9610f9c\"\ndependencies = [\n \"once_cell\",\n]\n\n[[package]]\nname = \"typenum\"\nversion = \"1.17.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"42ff0bf0c66b8238c6f3b578df37d0b7848e55df8577b3f74f92a69acceeb825\"\n\n[[package]]\nname = \"unicode-ident\"\nversion = \"1.0.14\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"adb9e6ca4f869e1180728b7950e35922a7fc6397f7b641499e8f3ef06e50dc83\"\n\n[[package]]\nname = \"unicode-width\"\nversion = \"0.2.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1fc81956842c57dac11422a97c3b8195a1ff727f06e85c84ed2e8aa277c9a0fd\"\n\n[[package]]\nname = \"unicode-xid\"\nversion = \"0.2.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ebc1c04c71510c7f702b52b7c350734c9ff1295c464a03335b00bb84fc54f853\"\n\n[[package]]\nname = \"utf8parse\"\nversion = \"0.2.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"06abde3611657adf66d383f00b093d7faecc7fa57071cce2578660c9f1010821\"\n\n[[package]]\nname = \"version_check\"\nversion = \"0.9.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"0b928f33d975fc6ad9f86c8f283853ad26bdd5b10b7f1542aa2fa15e2289105a\"\n\n[[package]]\nname = \"wait-timeout\"\nversion = \"0.2.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"9f200f5b12eb75f8c1ed65abd4b2db8a6e1b138a20de009dacee265a2498f3f6\"\ndependencies = [\n \"libc\",\n]\n\n[[package]]\nname = \"walkdir\"\nversion = \"2.5.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"29790946404f91d9c5d06f9874efddea1dc06c5efe94541a7d6863108e3a5e4b\"\ndependencies = [\n \"same-file\",\n \"winapi-util\",\n]\n\n[[package]]\nname = \"wasi\"\nversion = \"0.11.0+wasi-snapshot-preview1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"9c8d87e72b64a3b4db28d11ce29237c246188f4f51057d65a7eab63b7987e423\"\n\n[[package]]\nname = \"wasi-common\"\nversion = \"27.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"829f6c8c15912907b472bd9d195893bcdb1bde9cd8de55f134f6ab8aa507bf10\"\ndependencies = [\n \"anyhow\",\n \"bitflags\",\n \"cap-fs-ext\",\n \"cap-rand\",\n \"cap-std\",\n \"cap-time-ext\",\n \"fs-set-times\",\n \"io-extras\",\n \"io-lifetimes\",\n \"log\",\n \"rustix\",\n \"system-interface\",\n \"thiserror\",\n \"tracing\",\n \"wiggle\",\n \"windows-sys 0.59.0\",\n]\n\n[[package]]\nname = \"wasm-bindgen\"\nversion = \"0.2.97\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d15e63b4482863c109d70a7b8706c1e364eb6ea449b201a76c5b89cedcec2d5c\"\ndependencies = [\n \"cfg-if\",\n \"once_cell\",\n \"wasm-bindgen-macro\",\n]\n\n[[package]]\nname = \"wasm-bindgen-backend\"\nversion = \"0.2.97\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8d36ef12e3aaca16ddd3f67922bc63e48e953f126de60bd33ccc0101ef9998cd\"\ndependencies = [\n \"bumpalo\",\n \"log\",\n \"once_cell\",\n \"proc-macro2\",\n \"quote\",\n \"syn\",\n \"wasm-bindgen-shared\",\n]\n\n[[package]]\nname = \"wasm-bindgen-macro\"\nversion = \"0.2.97\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"705440e08b42d3e4b36de7d66c944be628d579796b8090bfa3471478a2260051\"\ndependencies = [\n \"quote\",\n \"wasm-bindgen-macro-support\",\n]\n\n[[package]]\nname = \"wasm-bindgen-macro-support\"\nversion = \"0.2.97\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"98c9ae5a76e46f4deecd0f0255cc223cfa18dc9b261213b8aa0c7b36f61b3f1d\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn\",\n \"wasm-bindgen-backend\",\n \"wasm-bindgen-shared\",\n]\n\n[[package]]\nname = \"wasm-bindgen-shared\"\nversion = \"0.2.97\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"6ee99da9c5ba11bd675621338ef6fa52296b76b83305e9b6e5c77d4c286d6d49\"\n\n[[package]]\nname = \"wasm-encoder\"\nversion = \"0.219.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"29cbbd772edcb8e7d524a82ee8cef8dd046fc14033796a754c3ad246d019fa54\"\ndependencies = [\n \"leb128\",\n \"wasmparser 0.219.1\",\n]\n\n[[package]]\nname = \"wasm-encoder\"\nversion = \"0.221.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"de35b6c3ef1f53ac7a31b5e69bc00f1542ea337e7e7162dc34c68b537ff82690\"\ndependencies = [\n \"leb128\",\n]\n\n[[package]]\nname = \"wasm-smith\"\nversion = \"0.221.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d5de53d4bad9a3e0b7c7733061981c52dc904db95b319432501349a635d0fac2\"\ndependencies = [\n \"anyhow\",\n \"arbitrary\",\n \"flagset\",\n \"indexmap\",\n \"leb128\",\n \"wasm-encoder 0.221.0\",\n]\n\n[[package]]\nname = \"wasmi\"\nversion = \"0.31.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"77a8281d1d660cdf54c76a3efa9ddd0c270cada1383a995db3ccb43d166456c7\"\ndependencies = [\n \"smallvec\",\n \"spin\",\n \"wasmi_arena\",\n \"wasmi_core 0.13.0\",\n \"wasmparser-nostd\",\n]\n\n[[package]]\nname = \"wasmi\"\nversion = \"0.40.0\"\ndependencies = [\n \"anyhow\",\n \"arrayvec\",\n \"assert_matches\",\n \"criterion\",\n \"multi-stash\",\n \"smallvec\",\n \"spin\",\n \"wasmi_collections\",\n \"wasmi_core 0.40.0\",\n \"wasmi_ir\",\n \"wasmi_wast\",\n \"wasmparser 0.221.0\",\n \"wat\",\n]\n\n[[package]]\nname = \"wasmi_arena\"\nversion = \"0.4.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"104a7f73be44570cac297b3035d76b169d6599637631cf37a1703326a0727073\"\n\n[[package]]\nname = \"wasmi_c_api\"\nversion = \"0.40.0\"\ndependencies = [\n \"wasmi_c_api_impl\",\n]\n\n[[package]]\nname = \"wasmi_c_api_impl\"\nversion = \"0.40.0\"\ndependencies = [\n \"wasmi 0.40.0\",\n \"wasmi_c_api_macros\",\n]\n\n[[package]]\nname = \"wasmi_c_api_macros\"\nversion = \"0.40.0\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n]\n\n[[package]]\nname = \"wasmi_cli\"\nversion = \"0.40.0\"\ndependencies = [\n \"anyhow\",\n \"assert_cmd\",\n \"clap\",\n \"wasmi 0.40.0\",\n \"wasmi_wasi\",\n]\n\n[[package]]\nname = \"wasmi_collections\"\nversion = \"0.40.0\"\ndependencies = [\n \"hashbrown 0.15.2\",\n \"string-interner\",\n]\n\n[[package]]\nname = \"wasmi_core\"\nversion = \"0.13.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"dcf1a7db34bff95b85c261002720c00c3a6168256dcb93041d3fa2054d19856a\"\ndependencies = [\n \"downcast-rs\",\n \"libm\",\n \"num-traits\",\n \"paste\",\n]\n\n[[package]]\nname = \"wasmi_core\"\nversion = \"0.40.0\"\ndependencies = [\n \"downcast-rs\",\n \"libm\",\n \"rand\",\n]\n\n[[package]]\nname = \"wasmi_fuzz\"\nversion = \"0.40.0\"\ndependencies = [\n \"anyhow\",\n \"arbitrary\",\n \"sha2\",\n \"wasm-smith\",\n \"wasmi 0.31.2\",\n \"wasmi 0.40.0\",\n \"wasmprinter 0.221.0\",\n \"wasmtime\",\n]\n\n[[package]]\nname = \"wasmi_ir\"\nversion = \"0.40.0\"\ndependencies = [\n \"wasmi_core 0.40.0\",\n]\n\n[[package]]\nname = \"wasmi_wasi\"\nversion = \"0.40.0\"\ndependencies = [\n \"wasi-common\",\n \"wasmi 0.40.0\",\n \"wiggle\",\n]\n\n[[package]]\nname = \"wasmi_wast\"\nversion = \"0.40.0\"\ndependencies = [\n \"anyhow\",\n \"wasmi 0.40.0\",\n \"wast 221.0.0\",\n]\n\n[[package]]\nname = \"wasmparser\"\nversion = \"0.219.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"5c771866898879073c53b565a6c7b49953795159836714ac56a5befb581227c5\"\ndependencies = [\n \"ahash\",\n \"bitflags\",\n \"hashbrown 0.14.5\",\n \"indexmap\",\n \"semver\",\n \"serde\",\n]\n\n[[package]]\nname = \"wasmparser\"\nversion = \"0.221.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8659e755615170cfe20da468865c989da78c5da16d8652e69a75acda02406a92\"\ndependencies = [\n \"bitflags\",\n \"hashbrown 0.15.2\",\n \"indexmap\",\n]\n\n[[package]]\nname = \"wasmparser-nostd\"\nversion = \"0.100.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d5a015fe95f3504a94bb1462c717aae75253e39b9dd6c3fb1062c934535c64aa\"\ndependencies = [\n \"indexmap-nostd\",\n]\n\n[[package]]\nname = \"wasmprinter\"\nversion = \"0.219.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"228cdc1f30c27816da225d239ce4231f28941147d34713dee8f1fff7cb330e54\"\ndependencies = [\n \"anyhow\",\n \"termcolor\",\n \"wasmparser 0.219.1\",\n]\n\n[[package]]\nname = \"wasmprinter\"\nversion = \"0.221.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"7f4234d0682f373b1878cefd5b3d99843312478ee4f603b2cea34cc2135f0a65\"\ndependencies = [\n \"anyhow\",\n \"termcolor\",\n \"wasmparser 0.221.0\",\n]\n\n[[package]]\nname = \"wasmtime\"\nversion = \"27.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"5b79302e3e084713249cc5622e8608e7410afdeeea8c8026d04f491d1fab0b4b\"\ndependencies = [\n \"anyhow\",\n \"bitflags\",\n \"bumpalo\",\n \"cc\",\n \"cfg-if\",\n \"hashbrown 0.14.5\",\n \"indexmap\",\n \"libc\",\n \"libm\",\n \"log\",\n \"mach2\",\n \"memfd\",\n \"object\",\n \"once_cell\",\n \"paste\",\n \"postcard\",\n \"psm\",\n \"pulley-interpreter\",\n \"rustix\",\n \"serde\",\n \"serde_derive\",\n \"smallvec\",\n \"sptr\",\n \"target-lexicon\",\n \"wasmparser 0.219.1\",\n \"wasmtime-asm-macros\",\n \"wasmtime-component-macro\",\n \"wasmtime-cranelift\",\n \"wasmtime-environ\",\n \"wasmtime-jit-icache-coherence\",\n \"wasmtime-slab\",\n \"wasmtime-versioned-export-macros\",\n \"windows-sys 0.59.0\",\n]\n\n[[package]]\nname = \"wasmtime-asm-macros\"\nversion = \"27.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"fe53a24e7016a5222875d8ca3ad6024b464465985693c42098cd0bb710002c28\"\ndependencies = [\n \"cfg-if\",\n]\n\n[[package]]\nname = \"wasmtime-component-macro\"\nversion = \"27.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e118acbd2bc09b32ad8606bc7cef793bf5019c1b107772e64dc6c76b5055d40b\"\ndependencies = [\n \"anyhow\",\n \"proc-macro2\",\n \"quote\",\n \"syn\",\n \"wasmtime-component-util\",\n \"wasmtime-wit-bindgen\",\n \"wit-parser\",\n]\n\n[[package]]\nname = \"wasmtime-component-util\"\nversion = \"27.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"4a6db4f3ee18c699629eabb9c64e77efe5a93a5137f098db7cab295037ba41c2\"\n\n[[package]]\nname = \"wasmtime-cranelift\"\nversion = \"27.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8b87e6c78f562b50aff1afd87ff32a57e241424c846c1c8f3c5fd352d2d62906\"\ndependencies = [\n \"anyhow\",\n \"cfg-if\",\n \"cranelift-codegen\",\n \"cranelift-control\",\n \"cranelift-entity\",\n \"cranelift-frontend\",\n \"cranelift-native\",\n \"gimli\",\n \"itertools 0.12.1\",\n \"log\",\n \"object\",\n \"smallvec\",\n \"target-lexicon\",\n \"thiserror\",\n \"wasmparser 0.219.1\",\n \"wasmtime-environ\",\n \"wasmtime-versioned-export-macros\",\n]\n\n[[package]]\nname = \"wasmtime-environ\"\nversion = \"27.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"c25bfeaa16432d59a0706e2463d315ef4c9ebcfaf5605670b99d46373bdf9f27\"\ndependencies = [\n \"anyhow\",\n \"cranelift-bitset\",\n \"cranelift-entity\",\n \"gimli\",\n \"indexmap\",\n \"log\",\n \"object\",\n \"postcard\",\n \"serde\",\n \"serde_derive\",\n \"smallvec\",\n \"target-lexicon\",\n \"wasm-encoder 0.219.1\",\n \"wasmparser 0.219.1\",\n \"wasmprinter 0.219.1\",\n]\n\n[[package]]\nname = \"wasmtime-jit-icache-coherence\"\nversion = \"27.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"91b218a92866f74f35162f5d03a4e0f62cd0e1cc624285b1014275e5d4575fad\"\ndependencies = [\n \"anyhow\",\n \"cfg-if\",\n \"libc\",\n \"windows-sys 0.59.0\",\n]\n\n[[package]]\nname = \"wasmtime-slab\"\nversion = \"27.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"4d5f8acf677ee6b3b8ba400dd9753ea4769e56a95c4b30b045ac6d2d54b2f8ea\"\n\n[[package]]\nname = \"wasmtime-versioned-export-macros\"\nversion = \"27.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"df09be00c38f49172ca9936998938476e3f2df782673a39ae2ef9fb0838341b6\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn\",\n]\n\n[[package]]\nname = \"wasmtime-wit-bindgen\"\nversion = \"27.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"bf3963c9c29df91564d8bd181eb00d0dbaeafa1b2a01e15952bb7391166b704e\"\ndependencies = [\n \"anyhow\",\n \"heck\",\n \"indexmap\",\n \"wit-parser\",\n]\n\n[[package]]\nname = \"wast\"\nversion = \"35.0.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"2ef140f1b49946586078353a453a1d28ba90adfc54dde75710bc1931de204d68\"\ndependencies = [\n \"leb128\",\n]\n\n[[package]]\nname = \"wast\"\nversion = \"221.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"9d8eb1933d493dd07484a255c3f52236123333f5befaa3be36182a50d393ec54\"\ndependencies = [\n \"bumpalo\",\n \"leb128\",\n \"memchr\",\n \"unicode-width\",\n \"wasm-encoder 0.221.0\",\n]\n\n[[package]]\nname = \"wat\"\nversion = \"1.221.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"c813fd4e5b2b97242830b56e7b7dc5479bc17aaa8730109be35e61909af83993\"\ndependencies = [\n \"wast 221.0.0\",\n]\n\n[[package]]\nname = \"wiggle\"\nversion = \"27.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"80e0f6ef83a263c0fa11957c363aeaa76dc84832484d0e119f22810d4d0e09a7\"\ndependencies = [\n \"anyhow\",\n \"async-trait\",\n \"bitflags\",\n \"thiserror\",\n \"tracing\",\n \"wiggle-macro\",\n]\n\n[[package]]\nname = \"wiggle-generate\"\nversion = \"27.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"dd266b290a0fdace3af6a05c6ebbcc54de303a774448ecf5a98cd0bc12d89c52\"\ndependencies = [\n \"anyhow\",\n \"heck\",\n \"proc-macro2\",\n \"quote\",\n \"shellexpand\",\n \"syn\",\n \"witx\",\n]\n\n[[package]]\nname = \"wiggle-macro\"\nversion = \"27.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"9b8eb1a5783540696c59cefbfc9e52570c2d5e62bd47bdf0bdcef29231879db2\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn\",\n \"wiggle-generate\",\n]\n\n[[package]]\nname = \"winapi\"\nversion = \"0.3.9\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"5c839a674fcd7a98952e593242ea400abe93992746761e38641405d28b00f419\"\ndependencies = [\n \"winapi-i686-pc-windows-gnu\",\n \"winapi-x86_64-pc-windows-gnu\",\n]\n\n[[package]]\nname = \"winapi-i686-pc-windows-gnu\"\nversion = \"0.4.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ac3b87c63620426dd9b991e5ce0329eff545bccbbb34f3be09ff6fb6ab51b7b6\"\n\n[[package]]\nname = \"winapi-util\"\nversion = \"0.1.9\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"cf221c93e13a30d793f7645a0e7762c55d169dbb0a49671918a2319d289b10bb\"\ndependencies = [\n \"windows-sys 0.59.0\",\n]\n\n[[package]]\nname = \"winapi-x86_64-pc-windows-gnu\"\nversion = \"0.4.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"712e227841d057c1ee1cd2fb22fa7e5a5461ae8e48fa2ca79ec42cfc1931183f\"\n\n[[package]]\nname = \"windows-core\"\nversion = \"0.52.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"33ab640c8d7e35bf8ba19b884ba838ceb4fba93a4e8c65a9059d08afcfc683d9\"\ndependencies = [\n \"windows-targets\",\n]\n\n[[package]]\nname = \"windows-sys\"\nversion = \"0.52.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"282be5f36a8ce781fad8c8ae18fa3f9beff57ec1b52cb3de0789201425d9a33d\"\ndependencies = [\n \"windows-targets\",\n]\n\n[[package]]\nname = \"windows-sys\"\nversion = \"0.59.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1e38bc4d79ed67fd075bcc251a1c39b32a1776bbe92e5bef1f0bf1f8c531853b\"\ndependencies = [\n \"windows-targets\",\n]\n\n[[package]]\nname = \"windows-targets\"\nversion = \"0.52.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"9b724f72796e036ab90c1021d4780d4d3d648aca59e491e6b98e725b84e99973\"\ndependencies = [\n \"windows_aarch64_gnullvm\",\n \"windows_aarch64_msvc\",\n \"windows_i686_gnu\",\n \"windows_i686_gnullvm\",\n \"windows_i686_msvc\",\n \"windows_x86_64_gnu\",\n \"windows_x86_64_gnullvm\",\n \"windows_x86_64_msvc\",\n]\n\n[[package]]\nname = \"windows_aarch64_gnullvm\"\nversion = \"0.52.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"32a4622180e7a0ec044bb555404c800bc9fd9ec262ec147edd5989ccd0c02cd3\"\n\n[[package]]\nname = \"windows_aarch64_msvc\"\nversion = \"0.52.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"09ec2a7bb152e2252b53fa7803150007879548bc709c039df7627cabbd05d469\"\n\n[[package]]\nname = \"windows_i686_gnu\"\nversion = \"0.52.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8e9b5ad5ab802e97eb8e295ac6720e509ee4c243f69d781394014ebfe8bbfa0b\"\n\n[[package]]\nname = \"windows_i686_gnullvm\"\nversion = \"0.52.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"0eee52d38c090b3caa76c563b86c3a4bd71ef1a819287c19d586d7334ae8ed66\"\n\n[[package]]\nname = \"windows_i686_msvc\"\nversion = \"0.52.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"240948bc05c5e7c6dabba28bf89d89ffce3e303022809e73deaefe4f6ec56c66\"\n\n[[package]]\nname = \"windows_x86_64_gnu\"\nversion = \"0.52.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"147a5c80aabfbf0c7d901cb5895d1de30ef2907eb21fbbab29ca94c5b08b1a78\"\n\n[[package]]\nname = \"windows_x86_64_gnullvm\"\nversion = \"0.52.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"24d5b23dc417412679681396f2b49f3de8c1473deb516bd34410872eff51ed0d\"\n\n[[package]]\nname = \"windows_x86_64_msvc\"\nversion = \"0.52.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"589f6da84c646204747d1270a2a5661ea66ed1cced2631d546fdfb155959f9ec\"\n\n[[package]]\nname = \"winx\"\nversion = \"0.36.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f9643b83820c0cd246ecabe5fa454dd04ba4fa67996369466d0747472d337346\"\ndependencies = [\n \"bitflags\",\n \"windows-sys 0.52.0\",\n]\n\n[[package]]\nname = \"wit-parser\"\nversion = \"0.219.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"4a86f669283257e8e424b9a4fc3518e3ade0b95deb9fbc0f93a1876be3eda598\"\ndependencies = [\n \"anyhow\",\n \"id-arena\",\n \"indexmap\",\n \"log\",\n \"semver\",\n \"serde\",\n \"serde_derive\",\n \"serde_json\",\n \"unicode-xid\",\n \"wasmparser 0.219.1\",\n]\n\n[[package]]\nname = \"witx\"\nversion = \"0.9.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e366f27a5cabcddb2706a78296a40b8fcc451e1a6aba2fc1d94b4a01bdaaef4b\"\ndependencies = [\n \"anyhow\",\n \"log\",\n \"thiserror\",\n \"wast 35.0.2\",\n]\n\n[[package]]\nname = \"zerocopy\"\nversion = \"0.7.35\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1b9b4fd18abc82b8136838da5d50bae7bdea537c574d8dc1a34ed098d6c166f0\"\ndependencies = [\n \"byteorder\",\n \"zerocopy-derive\",\n]\n\n[[package]]\nname = \"zerocopy-derive\"\nversion = \"0.7.35\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"fa4f8080344d4671fb4e831a13ad1e68092748387dfc4f55e356242fae12ce3e\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn\",\n]\n"
        },
        {
          "name": "Cargo.toml",
          "type": "blob",
          "size": 1.3564453125,
          "content": "[workspace]\nmembers = [\n    \"crates/collections\",\n    \"crates/c_api/artifact\",\n    \"crates/c_api/macro\",\n    \"crates/cli\",\n    \"crates/core\",\n    \"crates/wasmi\",\n    \"crates/wasi\",\n    \"crates/ir\",\n    \"crates/fuzz\",\n    \"crates/wast\",\n    \"fuzz\",\n]\nexclude = []\nresolver = \"2\"\n\n[workspace.package]\nauthors = [\"Robin Freyler <robin.freyler@gmail.com>\"]\nrepository = \"https://github.com/wasmi-labs/wasmi\"\nversion = \"0.40.0\"\nrust-version = \"1.80\"\nedition = \"2021\"\nreadme = \"README.md\"\nlicense = \"MIT/Apache-2.0\"\nkeywords = [\"wasm\", \"webassembly\", \"interpreter\", \"vm\"]\ncategories = [\"wasm\", \"no-std\", \"virtualization\"]\nexclude = [\"tests\"]\n\n[workspace.dependencies]\nwasmi = { version = \"0.40.0\", path = \"crates/wasmi\", default-features = false }\nwasmi_wasi = { version = \"0.40.0\", path = \"crates/wasi\", default-features = false }\nwasmi_core = { version = \"0.40.0\", path = \"crates/core\", default-features = false }\nwasmi_ir = { version = \"0.40.0\", path = \"crates/ir\", default-features = false }\nwasmi_collections = { version = \"0.40.0\", path = \"crates/collections\", default-features = false }\nwasmi_c_api_impl = { version = \"0.40.0\", path = \"crates/c_api\" }\nwasmi_c_api_macros = { version = \"0.40.0\", path = \"crates/c_api/macro\" }\nwasmi_fuzz = { version = \"0.40.0\", path = \"crates/fuzz\" }\nwasmi_wast = { version = \"0.40.0\", path = \"crates/wast\" }\n\n[profile.bench]\nlto = \"fat\"\ncodegen-units = 1\n"
        },
        {
          "name": "LICENSE-APACHE",
          "type": "blob",
          "size": 10.587890625,
          "content": "                              Apache License\n                        Version 2.0, January 2004\n                     http://www.apache.org/licenses/\n\nTERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n1. Definitions.\n\n   \"License\" shall mean the terms and conditions for use, reproduction,\n   and distribution as defined by Sections 1 through 9 of this document.\n\n   \"Licensor\" shall mean the copyright owner or entity authorized by\n   the copyright owner that is granting the License.\n\n   \"Legal Entity\" shall mean the union of the acting entity and all\n   other entities that control, are controlled by, or are under common\n   control with that entity. For the purposes of this definition,\n   \"control\" means (i) the power, direct or indirect, to cause the\n   direction or management of such entity, whether by contract or\n   otherwise, or (ii) ownership of fifty percent (50%) or more of the\n   outstanding shares, or (iii) beneficial ownership of such entity.\n\n   \"You\" (or \"Your\") shall mean an individual or Legal Entity\n   exercising permissions granted by this License.\n\n   \"Source\" form shall mean the preferred form for making modifications,\n   including but not limited to software source code, documentation\n   source, and configuration files.\n\n   \"Object\" form shall mean any form resulting from mechanical\n   transformation or translation of a Source form, including but\n   not limited to compiled object code, generated documentation,\n   and conversions to other media types.\n\n   \"Work\" shall mean the work of authorship, whether in Source or\n   Object form, made available under the License, as indicated by a\n   copyright notice that is included in or attached to the work\n   (an example is provided in the Appendix below).\n\n   \"Derivative Works\" shall mean any work, whether in Source or Object\n   form, that is based on (or derived from) the Work and for which the\n   editorial revisions, annotations, elaborations, or other modifications\n   represent, as a whole, an original work of authorship. For the purposes\n   of this License, Derivative Works shall not include works that remain\n   separable from, or merely link (or bind by name) to the interfaces of,\n   the Work and Derivative Works thereof.\n\n   \"Contribution\" shall mean any work of authorship, including\n   the original version of the Work and any modifications or additions\n   to that Work or Derivative Works thereof, that is intentionally\n   submitted to Licensor for inclusion in the Work by the copyright owner\n   or by an individual or Legal Entity authorized to submit on behalf of\n   the copyright owner. For the purposes of this definition, \"submitted\"\n   means any form of electronic, verbal, or written communication sent\n   to the Licensor or its representatives, including but not limited to\n   communication on electronic mailing lists, source code control systems,\n   and issue tracking systems that are managed by, or on behalf of, the\n   Licensor for the purpose of discussing and improving the Work, but\n   excluding communication that is conspicuously marked or otherwise\n   designated in writing by the copyright owner as \"Not a Contribution.\"\n\n   \"Contributor\" shall mean Licensor and any individual or Legal Entity\n   on behalf of whom a Contribution has been received by Licensor and\n   subsequently incorporated within the Work.\n\n2. Grant of Copyright License. Subject to the terms and conditions of\n   this License, each Contributor hereby grants to You a perpetual,\n   worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n   copyright license to reproduce, prepare Derivative Works of,\n   publicly display, publicly perform, sublicense, and distribute the\n   Work and such Derivative Works in Source or Object form.\n\n3. Grant of Patent License. Subject to the terms and conditions of\n   this License, each Contributor hereby grants to You a perpetual,\n   worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n   (except as stated in this section) patent license to make, have made,\n   use, offer to sell, sell, import, and otherwise transfer the Work,\n   where such license applies only to those patent claims licensable\n   by such Contributor that are necessarily infringed by their\n   Contribution(s) alone or by combination of their Contribution(s)\n   with the Work to which such Contribution(s) was submitted. If You\n   institute patent litigation against any entity (including a\n   cross-claim or counterclaim in a lawsuit) alleging that the Work\n   or a Contribution incorporated within the Work constitutes direct\n   or contributory patent infringement, then any patent licenses\n   granted to You under this License for that Work shall terminate\n   as of the date such litigation is filed.\n\n4. Redistribution. You may reproduce and distribute copies of the\n   Work or Derivative Works thereof in any medium, with or without\n   modifications, and in Source or Object form, provided that You\n   meet the following conditions:\n\n   (a) You must give any other recipients of the Work or\n       Derivative Works a copy of this License; and\n\n   (b) You must cause any modified files to carry prominent notices\n       stating that You changed the files; and\n\n   (c) You must retain, in the Source form of any Derivative Works\n       that You distribute, all copyright, patent, trademark, and\n       attribution notices from the Source form of the Work,\n       excluding those notices that do not pertain to any part of\n       the Derivative Works; and\n\n   (d) If the Work includes a \"NOTICE\" text file as part of its\n       distribution, then any Derivative Works that You distribute must\n       include a readable copy of the attribution notices contained\n       within such NOTICE file, excluding those notices that do not\n       pertain to any part of the Derivative Works, in at least one\n       of the following places: within a NOTICE text file distributed\n       as part of the Derivative Works; within the Source form or\n       documentation, if provided along with the Derivative Works; or,\n       within a display generated by the Derivative Works, if and\n       wherever such third-party notices normally appear. The contents\n       of the NOTICE file are for informational purposes only and\n       do not modify the License. You may add Your own attribution\n       notices within Derivative Works that You distribute, alongside\n       or as an addendum to the NOTICE text from the Work, provided\n       that such additional attribution notices cannot be construed\n       as modifying the License.\n\n   You may add Your own copyright statement to Your modifications and\n   may provide additional or different license terms and conditions\n   for use, reproduction, or distribution of Your modifications, or\n   for any such Derivative Works as a whole, provided Your use,\n   reproduction, and distribution of the Work otherwise complies with\n   the conditions stated in this License.\n\n5. Submission of Contributions. Unless You explicitly state otherwise,\n   any Contribution intentionally submitted for inclusion in the Work\n   by You to the Licensor shall be under the terms and conditions of\n   this License, without any additional terms or conditions.\n   Notwithstanding the above, nothing herein shall supersede or modify\n   the terms of any separate license agreement you may have executed\n   with Licensor regarding such Contributions.\n\n6. Trademarks. This License does not grant permission to use the trade\n   names, trademarks, service marks, or product names of the Licensor,\n   except as required for reasonable and customary use in describing the\n   origin of the Work and reproducing the content of the NOTICE file.\n\n7. Disclaimer of Warranty. Unless required by applicable law or\n   agreed to in writing, Licensor provides the Work (and each\n   Contributor provides its Contributions) on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n   implied, including, without limitation, any warranties or conditions\n   of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n   PARTICULAR PURPOSE. You are solely responsible for determining the\n   appropriateness of using or redistributing the Work and assume any\n   risks associated with Your exercise of permissions under this License.\n\n8. Limitation of Liability. In no event and under no legal theory,\n   whether in tort (including negligence), contract, or otherwise,\n   unless required by applicable law (such as deliberate and grossly\n   negligent acts) or agreed to in writing, shall any Contributor be\n   liable to You for damages, including any direct, indirect, special,\n   incidental, or consequential damages of any character arising as a\n   result of this License or out of the use or inability to use the\n   Work (including but not limited to damages for loss of goodwill,\n   work stoppage, computer failure or malfunction, or any and all\n   other commercial damages or losses), even if such Contributor\n   has been advised of the possibility of such damages.\n\n9. Accepting Warranty or Additional Liability. While redistributing\n   the Work or Derivative Works thereof, You may choose to offer,\n   and charge a fee for, acceptance of support, warranty, indemnity,\n   or other liability obligations and/or rights consistent with this\n   License. However, in accepting such obligations, You may act only\n   on Your own behalf and on Your sole responsibility, not on behalf\n   of any other Contributor, and only if You agree to indemnify,\n   defend, and hold each Contributor harmless for any liability\n   incurred by, or claims asserted against, such Contributor by reason\n   of your accepting any such warranty or additional liability.\n\nEND OF TERMS AND CONDITIONS\n\nAPPENDIX: How to apply the Apache License to your work.\n\n   To apply the Apache License to your work, attach the following\n   boilerplate notice, with the fields enclosed by brackets \"[]\"\n   replaced with your own identifying information. (Don't include\n   the brackets!)  The text should be enclosed in the appropriate\n   comment syntax for the file format. We also recommend that a\n   file or class name and description of purpose be included on the\n   same \"printed page\" as the copyright notice for easier\n   identification within third-party archives.\n\nCopyright (c) 2018-2024 Robin Freyler\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n\thttp://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n"
        },
        {
          "name": "LICENSE-MIT",
          "type": "blob",
          "size": 1.037109375,
          "content": "Copyright (c) 2018-2024 Robin Freyler\n\nPermission is hereby granted, free of charge, to any\nperson obtaining a copy of this software and associated\ndocumentation files (the \"Software\"), to deal in the\nSoftware without restriction, including without\nlimitation the rights to use, copy, modify, merge,\npublish, distribute, sublicense, and/or sell copies of\nthe Software, and to permit persons to whom the Software\nis furnished to do so, subject to the following\nconditions:\n\nThe above copyright notice and this permission notice\nshall be included in all copies or substantial portions\nof the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF\nANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED\nTO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A\nPARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT\nSHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\nOF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR\nIN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\nDEALINGS IN THE SOFTWARE.\n"
        },
        {
          "name": "NEWS.md",
          "type": "blob",
          "size": 1.7509765625,
          "content": "# Wasmi News\n\n## 2024-11-27 - Wasmi Security Audit for v0.36+\n\nWasmi v0.36 and partially 0.37-0.38 have been audited by \n[Runtime Verification Inc.](https://runtimeverification.com/) contracted by\nthe [Stellar Development Foundation](https://stellar.org/foundation).\n\nThe final report can be found [here](./resources/audit-2024-11-27.pdf).\n\nI want to thank the Stellar Development Foundation and Runtime Verification Inc.\nfor this highly appreciated and valuable contribution which will make Wasmi an even\nmore attractive option for safety critical use cases in the future.\n\n## 2024-02-07 - Announcement: Transfer of Ownership\n\nAs of 2024-02-01, the original owner and maintainer of the Wasmi project, [Parity Technologies], has officially transferred ownership of the project to me, [Robin Freyler]. Since over 2 years I am the main developer and contributor for the project.\n\nThe goal of this transition is to find or create a new home in a non-profit organization with a focus on WebAssembly, virtualization or embeddeded environments. This should allow multiple Free Open Source Software (FOSS) stakeholders to collaborate on Wasmi's development and make the project more attractive to the FOSS community in general.\n\nThe core principles, objectives and licenses of Wasmi remain unchanged.\n\nFeel free to reach out via e-mail to robin.freyler@gmail.com or via Wasmi's [discussions board] for questions or support.\n\nFinally I want to thank [Parity Technologies] for their past involvement and support for the Wasmi project and to give me and the FOSS community the chance of taking the future of Wasmi into our own hands.\n\n[Robin Freyler]: https://github.com/Robbepop\n[Parity Technologies]: https://github.com/paritytech/\n[discussions board]: https://github.com/wasmi-labs/wasmi/discussions\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 7.1201171875,
          "content": "\n| Continuous Integration |     Test Coverage    |  Documentation   |      Crates.io       |\n|:----------------------:|:--------------------:|:----------------:|:--------------------:|\n| [![ci][1]][2]          | [![codecov][3]][4]   | [![docs][5]][6] | [![crates][7]][8]  |\n\n[1]: https://github.com/wasmi-labs/wasmi/workflows/Rust%20-%20Continuous%20Integration/badge.svg?branch=master\n[2]: https://github.com/wasmi-labs/wasmi/actions?query=workflow%3A%22Rust+-+Continuous+Integration%22+branch%3Amaster\n[3]: https://codecov.io/gh/wasmi-labs/wasmi/branch/master/graph/badge.svg\n[4]: https://codecov.io/gh/wasmi-labs/wasmi/branch/master\n[5]: https://docs.rs/wasmi/badge.svg\n[6]: https://docs.rs/wasmi\n[7]: https://img.shields.io/crates/v/wasmi.svg\n[8]: https://crates.io/crates/wasmi\n\n[license-mit-badge]: https://img.shields.io/badge/license-MIT-blue.svg\n[license-apache-badge]: https://img.shields.io/badge/license-APACHE-orange.svg\n\n# Wasmi - WebAssembly (Wasm) Interpreter\n\n<p align=\"center\">\n  <img src=\"./resources/wasmi-logo.png\" width=\"100\" height=\"100\">\n</p>\n\nWasmi is an efficient and lightweight WebAssembly interpreter with a focus on constrained and embedded systems.\n\n## Security Audits\n\nWasmi is suitable for safety critical use cases and has been audited several times already.\n\n| Wasmi Version(s) | Auditor | Contractor | Report |\n|--:|:--|:--|:--|\n| `0.36.0`-`0.38.0` | [Runtime Verification Inc.] | [Stellar Development Foundation] | [PDF](./resources/audit-2024-11-27.pdf) |\n| `0.31.0` | [SRLabs] | [Parity Technologies] | [PDF](./resources/audit-2023-12-20.pdf) |\n\n[Wasmtime]: https://github.com/bytecodealliance/wasmtime\n[SRLabs]: https://www.srlabs.de/\n[Runtime Verification Inc.]: https://runtimeverification.com/\n[Stellar Development Foundation]: https://stellar.org/foundation\n[Parity Technologies]: https://www.parity.io/\n\n## Distinct Features\n\nThe following list states some of the distinct features of Wasmi.\n\n- Simple, correct and deterministic execution of WebAssembly.\n- Low-overhead and cross-platform WebAssembly runtime for embedded environments.\n- JIT bomb resisting translation.\n- Loosely mirrors the [Wasmtime API](https://docs.rs/wasmtime/).\n- 100% WebAssembly spec testsuite compliance.\n- Built-in support for fuel metering.\n- Supports the official [Wasm C-API](https://github.com/WebAssembly/wasm-c-api).\n\n## Usage\n\nRefer to the [Wasmi usage guide](./docs/usage.md) to learn how properly to use [Wasmi](https://crates.io/crates/wasmi).\n\n## WebAssembly Proposals\n\nThe new Wasmi engine supports a variety of WebAssembly proposals and will support even more of them in the future.\n\n| WebAssembly Proposal | Status | Comment |\n|:--|:--:|:--|\n| [`mutable-global`] | ✅ | ≥ `0.14.0`. |\n| [`saturating-float-to-int`] | ✅ | ≥ `0.14.0`. |\n| [`sign-extension`] | ✅ | ≥ `0.14.0`. |\n| [`multi-value`] | ✅ | ≥ `0.14.0`. |\n| [`bulk-memory`] | ✅ | ≥ `0.24.0`. [(#628)] |\n| [`reference-types`] | ✅ | ≥ `0.24.0`. [(#635)] |\n| [`tail-calls`] | ✅ | ≥ `0.28.0`. [(#683)] |\n| [`extended-const`] | ✅ | ≥ `0.29.0`. [(#707)] |\n| [`multi-memory`] | ✅ | ≥ `0.37.0`. [(#1191)] |\n| [`simd`] | ❌ | Unlikely to be supported. |\n| [`relaxed-simd`] | ❌ | Unlikely to be supported. Depends on `simd`. |\n| [`function-references`] | 📅 | Not yet implemented. [(#774)] |\n| [`gc`] | 📅 | Not yet implemented. [(#775)] |\n| [`threads`] | 📅 | Not yet implemented. [(#777)] |\n| [`exception-handling`] | 📅 | Not yet implemented. [(#1037)] |\n| [`custom-page-sizes`] | 📅 | Not yet implemented. [(#1197)] |\n| | |\n| [WASI] | 👨‍🔬 | Experimental support for WASI (`wasip1`) via the [`wasmi_wasi` crate]. |\n| [C-API] | 👨‍🔬 | Experimental support for the official Wasm C-API via the [`wasmi_c_api_impl` crate]. |\n\n[`mutable-global`]: https://github.com/WebAssembly/mutable-global\n[`saturating-float-to-int`]: https://github.com/WebAssembly/nontrapping-float-to-int-conversions\n[`sign-extension`]: https://github.com/WebAssembly/sign-extension-ops\n[`multi-value`]: https://github.com/WebAssembly/multi-value\n[`reference-types`]: https://github.com/WebAssembly/reference-types\n[`bulk-memory`]: https://github.com/WebAssembly/bulk-memory-operations\n[`simd` ]: https://github.com/webassembly/simd\n[`tail-calls`]: https://github.com/WebAssembly/tail-call\n[`extended-const`]: https://github.com/WebAssembly/extended-const\n[`function-references`]: https://github.com/WebAssembly/function-references\n[`gc`]: https://github.com/WebAssembly/gc\n[`multi-memory`]: https://github.com/WebAssembly/multi-memory\n[`threads`]: https://github.com/WebAssembly/threads\n[`relaxed-simd`]: https://github.com/WebAssembly/relaxed-simd\n[`exception-handling`]: https://github.com/WebAssembly/exception-handling\n[`custom-page-sizes`]: https://github.com/WebAssembly/custom-page-sizes\n\n[WASI]: https://github.com/WebAssembly/WASI\n[C-API]: https://github.com/WebAssembly/wasm-c-api\n[`wasmi_wasi` crate]: ./crates/wasi\n[`wasmi_c_api_impl` crate]: ./crates/c_api\n\n[(#363)]: https://github.com/wasmi-labs/wasmi/issues/363\n[(#364)]: https://github.com/wasmi-labs/wasmi/issues/364\n[(#496)]: https://github.com/wasmi-labs/wasmi/issues/496\n[(#628)]: https://github.com/wasmi-labs/wasmi/pull/628\n[(#635)]: https://github.com/wasmi-labs/wasmi/pull/635\n[(#638)]: https://github.com/wasmi-labs/wasmi/pull/638\n[(#683)]: https://github.com/wasmi-labs/wasmi/pull/683\n[(#707)]: https://github.com/wasmi-labs/wasmi/pull/707\n[(#774)]: https://github.com/wasmi-labs/wasmi/pull/774\n[(#775)]: https://github.com/wasmi-labs/wasmi/pull/775\n[(#776)]: https://github.com/wasmi-labs/wasmi/pull/776\n[(#777)]: https://github.com/wasmi-labs/wasmi/pull/777\n[(#1037)]: https://github.com/wasmi-labs/wasmi/issues/1137\n[(#1197)]: https://github.com/wasmi-labs/wasmi/issues/1197\n[(#1191)]: https://github.com/wasmi-labs/wasmi/issues/1191\n\n## Development\n\n### Build & Test\n\nClone the Wasmi repository and build using `cargo`:\n\n```console\ngit clone https://github.com/wasmi-labs/wasmi.git --recursive\ncd wasmi\ncargo build\ncargo test\n```\n\n### Benchmarks\n\nIn order to benchmark Wasmi use the following command:\n\n```console\ncargo bench\n```\n\nUse `translate`, `instantiate`, `execute` or `overhead` filters to only run benchmarks that test performance of Wasm translation, instantiation, execution or miscellaneous overhead respectively, e.g. `cargo bench execute`.\n\n## Supported Platforms\n\nWasmi supports a wide variety of architectures and platforms.\n\n- Fore more details see this [list of supported platforms for Rust](https://doc.rust-lang.org/stable/rustc/platform-support.html).\n- **Note:** Wasmi can be used in `no_std` embedded environments, thus not requiring the standard library (`std`).\n- Only some platforms are checked in CI and guaranteed to be fully working by the Wasmi maintainers.\n\n## License\n\nLicensed under either of\n\n  * Apache License, Version 2.0, ([LICENSE-APACHE](LICENSE-APACHE) or <http://www.apache.org/licenses/LICENSE-2.0>)\n  * MIT license ([LICENSE-MIT](LICENSE-MIT) or <http://opensource.org/licenses/MIT>)\n\nat your option.\n\n## Contribution\n\nUnless you explicitly state otherwise, any contribution intentionally submitted for inclusion in the work by you, as defined in the Apache-2.0 license, shall be dual licensed as above, without any additional terms or conditions.\n"
        },
        {
          "name": "SECURITY.md",
          "type": "blob",
          "size": 0.9736328125,
          "content": "# Reporting a vulnerability\n\nIf you identify a potential security vulnerability, we kindly request refraining from using the issue tracker or engaging in public discussions to mitigate the risk of exacerbating the situation. Such vulnerabilities should be promptly reported via email to: robin.freyler@gmail.com.\n\nPlease adhere to the following guidelines when reporting security concerns:\n\n- Furnish a comprehensive report inclusive of reproducible steps and a clearly articulated impact.\n- Limit each report to a single vulnerability.\n- Social engineering tactics such as phishing, vishing, or smishing are not prohibited.\n\nUpon receipt of your report, the Wasmi team will endeavor to keep you informed of the progress being made towards a fix and full announcement. We may seek additional details or guidance pertinent to the reported issue.\n\nIf you have not received a reply to your report within three days, we encourage you to reach out on our GitHub discussions board by posting a message.\n"
        },
        {
          "name": "crates",
          "type": "tree",
          "content": null
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "fuzz",
          "type": "tree",
          "content": null
        },
        {
          "name": "resources",
          "type": "tree",
          "content": null
        },
        {
          "name": "scripts",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}