{
  "metadata": {
    "timestamp": 1736709007201,
    "page": 75,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjgw",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "async-rs/async-std",
      "stars": 3992,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.029296875,
          "content": "/target\n**/*.rs.bk\nCargo.lock\n"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 37.9384765625,
          "content": "# Changelog\n\nAll notable changes to async-std will be documented in this file.\n\nThe format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/),\nand this project adheres to [Semantic Versioning](https://book.async.rs/overview/stability-guarantees.html).\n\n# [1.13.0] - 2024-09-06\n\n## Added\n- IO Safety traits implementations\n\n## Changed\n- Various dependencies updates\n- Export `BufReadExt` and `SeekExt` from `async_std::io`\n\n# [1.12.0] - 2022-06-18\n\n## Added\n- `async_std::task::spawn_blocking` is now stabilized. We consider it a fundamental API for bridging between blocking code and async code, and we widely use it within async-std's own implementation.\n- Add `TryFrom` implementations to convert `TcpListener`, `TcpStream`, `UdpSocket`, `UnixDatagram`, `UnixListener`, and `UnixStream` to their synchronous equivalents, including putting them back into blocking mode.\n\n## Changed\n- async-std no longer depends on `num_cpus`; it uses functionality in the standard library instead (via `async-global-executor`).\n- Miscellaneous documentation fixes and cleanups.\n\n# [1.11.0] - 2022-03-22\n\nThis release improves compile times by up to 55% on initial builds, and up to 75% on recompilation. Additionally we've added a few new APIs and made some tweaks.\n\n## Added\n- `TcpListener::into_incoming` to convert a `TcpListener` into a stream of incoming TCP connections\n\n## Removed\n- The internal `extension_trait` macro had been removed. This drastically improves compile times for `async-std`, but changes the way our documentation is rendered. This is a cosmetic change only, and all existing code should continue to work as it did before.\n\n## Changed\n- Some internal code has been de-macro-ified, making for quicker compile times.\n- We now use the default recursion limit.\n\n## Docs\n- Several docs improvements / fixes.\n\n# [1.10.0] - 2021-08-25\n\nThis release comes with an assortment of small features and fixes.\n\n## Added\n- `File` now implements `Clone` so that `File`s can be passed into closures for use in `spawn_blocking`.\n    - `File`'s contents are already wrapped in `Arc`s, so the implementation of `Clone` is straightforward.\n- `task::try_current()` which returns a handle to the current task if called within the context of a task created by async-std.\n- `async_std::io` now re-exports `WriteExt` directly.\n\n## Fixed\n- `write!` now takes already written bytes into account on `File`.\n\n## Internal\n- `TcpStream` now properly makes use of vectored IO.\n- The `net::*::Incoming` implementations now do less allocation.\n\n## Docs\n- Several docs improvements / fixes.\n\n# [1.9.0] - 2021-01-15\n\nThis patch stabilizes the `async_std::channel` submodule, removes the\ndeprecated `sync::channel` types, and introduces the `tokio1` feature.\n\n## New Channels\n\nAs part of our `1.8.0` release last month we introduced the new\n`async_std::channel` submodule and deprecated the unstable\n`async_std::sync::channel` types. You can read our full motivation for this\nchange in the last patch notes. But the short version is that the old\nchannels had some fundamental problems, and the `sync` submodule is a bit of\na mess.\n\nThis release of `async-std` promotes `async_std::channel` to stable, and\nfully removes the `async_std::sync::channel` types. In practice many\nlibraries have already been upgraded to the new channels in the past month,\nand this will enable much of the ecosystem to switch off \"unstable\" versions\nof `async-std`.\n\n```rust\nuse async_std::channel;\n\nlet (sender, receiver) = channel::unbounded();\n\nassert_eq!(sender.send(\"Hello\").await, Ok(()));\nassert_eq!(receiver.recv().await, Ok(\"Hello\"));\n```\n\n## Tokio 1.0 compat\n\nThe Tokio project recently released version 1.0 of their runtime, and the\nasync-std team would like to congratulate the Tokio team on achieving this\nmilestone.\n\nThis release of `async-std` adds the `tokio1` feature flag, enabling Tokio's\nTLS constructors to be initialized within the `async-std` runtime. This is in\naddition to the `tokio02` and `tokio03` feature flags which we were already\nexposing.\n\nIn terms of stability it's worth noting that we will continue to provide\nsupport for the `tokio02`, `tokio03`, and `tokio1` on the current major\nrelease line of `async-std`. These flags are part of our public API, and\nremoving compat support for older Tokio versions is considered a breaking\nchange.\n\n## Added\n\n- Added the `tokio1` feature ([#924](https://github.com/async-rs/async-std/pull/924))\n- Stabilized the `async_std::channel` submodule ([#934](https://github.com/async-rs/async-std/pull/934))\n\n## Removed\n\n- Removed deprecated `sync::channel` ([#933](https://github.com/async-rs/async-std/pull/933))\n\n## Fixed\n\n- Fixed a typo for [sic] `FuturesExt` trait ([#930](https://github.com/async-rs/async-std/pull/930))\n- Update the link to `cargo-edit` in the installation section of the docs ([#932](https://github.com/async-rs/async-std/pull/932))\n- Fixed a small typo for stream ([#926](https://github.com/async-rs/async-std/pull/926))\n\n## Internal\n\n- Updated `rand` to 0.8 ([#923](https://github.com/async-rs/async-std/pull/923))\n- Migrated `RwLock` and `Barrier` to use the `async-lock` crate internally ([#925](https://github.com/async-rs/async-std/pull/925))\n- Replaced uses of deprecated the `compare_and_swap` method with `compare_exchange` ([#927](https://github.com/async-rs/async-std/pull/927))\n\n# [1.8.0] - 2020-12-04\n\nThis patch introduces `async_std::channel`, a new submodule for our async channels implementation. `channels` have been one of async-std's most requested features, and have existed as \"unstable\" for the past year. We've been cautious about stabilizing channels, and this caution turned out to be warranted: we realized our channels could hang indefinitely under certain circumstances, and people ended up expressing a need for unbounded channels.\n\nSo today we're introducing the new `async_std::channel` submodule which exports the `async-channel` crate, and we're marking the older unstable `async_std::sync::channel` API as \"deprecated\". This release includes both APIs, but we intend to stabilize `async_std::channel` and remove the older API in January. This should give dependent projects a month to upgrade, though we can extend that if it proves to be too short.\n\nThe rationale for adding a new top-level `channel` submodule, rather than extending `sync` is that the `std::sync` and `async_std::sync` submodule are a bit of a mess, and the libs team [has been talking about splitting `std::sync` up]([https://github.com/rust-lang/rfcs/pull/2788#discussion_r339092478](https://github.com/rust-lang/rfcs/pull/2788#discussion_r339092478)) into separate modules. The stdlib has to guarantee it'll forever be backwards compatible, but `async-std` does not (we fully expect a 2.0 once we have async closures & traits). So we're experimenting with this change before `std` does, with the expectation that this change can serve as a data point when the libs team decides how to proceed in std.\n\n### Added\n\n- `async_std::channel` as \"unstable\" #915\n- `async_std::process` as \"unstable\" #916\n\n### Fixed\n\n- Fixed mentions of the `tokio03` flags in the docs #909\n- Fixed a double drop issue in `StreamExt::cycle` #903\n\n### Internal\n\n- updated `pin-project` to `v0.2.0`\n\n# [1.7.0] - 2020-10-30\n\nThis patch adds a feature to enable compatibility with the new `tokio` 0.3.0\nrelease, and updates internal dependencies.\n\n## Added\n\n- Add `tokio03` feature ([#895](https://github.com/async-rs/async-std/pull/895))\n\n## Internal\n\n- chore: update dependencies ([#897](https://github.com/async-rs/async-std/pull/897))\n\n# [1.6.5] - 2020-09-28\n\n## Fixed\n\n- Fix `TcpListener::incoming`. ([#889](https://github.com/async-rs/async-std/pull/889))\n- Fix tokio compatibility flag. ([#882](https://github.com/async-rs/async-std/pull/882))\n\n# [1.6.4] - 2020-09-16\n\n## Added\n\n- Added `UdpSocket::peek` and `UdpSocket::peek_from` ([#853](https://github.com/async-rs/async-std/pull/853))\n\n## Changed\n\n- Extracted the executor into [async-global-executor](https://github.com/async-rs/async-global-executor) ([#867](https://github.com/async-rs/async-std/pull/867))\n\n- Updated various dependencies\n\n## Fixed\n\n- Ensure `UnixStream::into_raw_fd` doesn't close the file descriptor ([#855](https://github.com/async-rs/async-std/issues/855))\n- Fixed wasm builds and ensured better dependency management depending on the compile target ([#863](https://github.com/async-rs/async-std/pull/863))\n\n\n# [1.6.3] - 2020-07-31\n\n## Added\n\n## Changed\n\n- Switched from smol to individual executor parts. ([#836](https://github.com/async-rs/async-std/pull/836))\n- Replaced internal `Mutex` implementation with `async-mutex`. ([#822](https://github.com/async-rs/async-std/pull/822))\n\n## Fixed\n\n- Added missing `Send` guards to `Stream::collect`. ([#665](https://github.com/async-rs/async-std/pull/665))\n\n\n# [1.6.2] - 2020-06-19\n\n## Added\n\n- Add `UdpSocket::peer_addr` ([#816](https://github.com/async-rs/async-std/pull/816))\n\n## Changed\n\n## Fixed\n\n- Ensure the reactor is running for sockets and timers ([#819](https://github.com/async-rs/async-std/pull/819)).\n- Avoid excessive polling in `flatten` and `flat_map` ([#701](https://github.com/async-rs/async-std/pull/701))\n\n\n# [1.6.1] - 2020-06-11\n\n## Added\n\n- Added `tokio02` feature flag, to allow compatibility usage with tokio@0.2 ([#804](https://github.com/async-rs/async-std/pull/804)).\n\n## Changed\n\n- Removed unstable `stdio` lock methods, due to their unsoundness ([#807](https://github.com/async-rs/async-std/pull/807)).\n\n## Fixed\n\n- Fixed wrong slice index for file reading ([#802](https://github.com/async-rs/async-std/pull/802)).\n- Fixed recursive calls to `block_on` ([#799](https://github.com/async-rs/async-std/pull/799)) and ([#809](https://github.com/async-rs/async-std/pull/809)).\n- Remove `default` feature requirement for the `unstable` feature ([#806](https://github.com/async-rs/async-std/pull/806)).\n\n# [1.6.0] - 2020-05-22\n\nSee `1.6.0-beta.1` and `1.6.0-beta.2`.\n\n# [1.6.0-beta.2] - 2020-05-19\n\n## Added \n\n- Added an environment variable to configure the thread pool size of the runtime. ([#774](https://github.com/async-rs/async-std/pull/774))\n- Implement `Clone` for `UnixStream` ([#772](https://github.com/async-rs/async-std/pull/772))\n\n## Changed\n\n- For `wasm`, switched underlying `Timer` implementation to [`futures-timer`](https://github.com/async-rs/futures-timer). ([#776](https://github.com/async-rs/async-std/pull/776))\n\n## Fixed\n\n- Use `smol::block_on` to handle drop of `File`, avoiding nested executor panic. ([#768](https://github.com/async-rs/async-std/pull/768))\n\n# [1.6.0-beta.1] - 2020-05-07\n\n## Added\n\n- Added `task::spawn_local`. ([#757](https://github.com/async-rs/async-std/pull/757))\n- Added out of the box support for `wasm`. ([#757](https://github.com/async-rs/async-std/pull/757))\n- Added `JoinHandle::cancel` ([#757](https://github.com/async-rs/async-std/pull/757))\n- Added `sync::Condvar` ([#369](https://github.com/async-rs/async-std/pull/369))\n- Added `sync::Sender::try_send` and `sync::Receiver::try_recv` ([#585](https://github.com/async-rs/async-std/pull/585))\n- Added `no_std` support for `task`, `future` and `stream` ([#680](https://github.com/async-rs/async-std/pull/680))\n\n## Changed\n\n- Switched underlying runtime to [`smol`](https://github.com/stjepang/smol/). ([#757](https://github.com/async-rs/async-std/pull/757))\n- Switched implementation of `sync::Barrier` to use `sync::Condvar` like `std` does. ([#581](https://github.com/async-rs/async-std/pull/581))\n\n## Fixed\n\n- Allow compilation on 32 bit targets, by using `AtomicUsize` for `TaskId`. ([#756](https://github.com/async-rs/async-std/pull/756))\n\n# [1.5.0] - 2020-02-03\n\n[API Documentation](https://docs.rs/async-std/1.5.0/async-std)\n\nThis patch includes various quality of life improvements to async-std.\nIncluding improved performance, stability, and the addition of various\n`Clone` impls that replace the use of `Arc` in many cases.\n\n## Added\n\n- Added links to various ecosystem projects from the README ([#660](https://github.com/async-rs/async-std/pull/660))\n- Added an example on `FromStream` for `Result<T, E>` ([#643](https://github.com/async-rs/async-std/pull/643))\n- Added `stream::pending` as \"unstable\" ([#615](https://github.com/async-rs/async-std/pull/615))\n- Added an example of `stream::timeout` to document the error flow ([#675](https://github.com/async-rs/async-std/pull/675))\n- Implement `Clone` for `DirEntry` ([#682](https://github.com/async-rs/async-std/pull/682))\n- Implement `Clone` for `TcpStream` ([#689](https://github.com/async-rs/async-std/pull/689))\n\n## Changed\n\n- Removed internal comment on `stream::Interval` ([#645](https://github.com/async-rs/async-std/pull/645))\n- The \"unstable\" feature can now be used without requiring the \"default\" feature ([#647](https://github.com/async-rs/async-std/pull/647))\n- Removed unnecessary trait bound on `stream::FlatMap` ([#651](https://github.com/async-rs/async-std/pull/651))\n- Updated the \"broadcaster\" dependency used by \"unstable\" to `1.0.0` ([#681](https://github.com/async-rs/async-std/pull/681))\n- Updated `async-task` to 1.2.1 ([#676](https://github.com/async-rs/async-std/pull/676))\n- `task::block_on` now parks after a single poll, improving performance in many cases ([#684](https://github.com/async-rs/async-std/pull/684))\n- Improved reading flow of the \"client\" part of the async-std tutorial ([#550](https://github.com/async-rs/async-std/pull/550))\n- Use `take_while` instead of `scan` in `impl` of `Product`, `Sum` and `FromStream` ([#667](https://github.com/async-rs/async-std/pull/667))\n- `TcpStream::connect` no longer uses a thread from the threadpool, improving performance ([#687](https://github.com/async-rs/async-std/pull/687))\n\n## Fixed\n\n- Fixed crate documentation typo ([#655](https://github.com/async-rs/async-std/pull/655))\n- Fixed documentation for `UdpSocket::recv` ([#648](https://github.com/async-rs/async-std/pull/648))\n- Fixed documentation for `UdpSocket::send` ([#671](https://github.com/async-rs/async-std/pull/671))\n- Fixed typo in stream documentation ([#650](https://github.com/async-rs/async-std/pull/650))\n- Fixed typo on `sync::JoinHandle` documentation ([#659](https://github.com/async-rs/async-std/pull/659))\n- Removed use of `std::error::Error::description` which failed CI ([#661](https://github.com/async-rs/async-std/pull/661))\n- Removed the use of rustfmt's unstable `format_code_in_doc_comments` option which failed CI ([#685](https://github.com/async-rs/async-std/pull/685))\n- Fixed a code typo in the `task::sleep` example ([#688](https://github.com/async-rs/async-std/pull/688))\n\n# [1.4.0] - 2019-12-20\n\n[API Documentation](https://docs.rs/async-std/1.4.0/async-std)\n\nThis patch adds `Future::timeout`, providing a method counterpart to the\n`future::timeout` free function. And includes several bug fixes around missing\nAPIs. Notably we're not shipping our new executor yet, first announced [on our\nblog](https://async.rs/blog/stop-worrying-about-blocking-the-new-async-std-runtime/).\n\n## Examples\n\n```rust\nuse async_std::prelude::*;\nuse async_std::future;\nuse std::time::Duration;\n\nlet fut = future::pending::<()>(); // This future will never resolve.\nlet res = fut.timeout(Duration::from_millis(100)).await;\nassert!(res.is_err()); // The future timed out, returning an err.\n```\n\n## Added\n\n- Added `Future::timeout` as \"unstable\" [(#600)](https://github.com/async-rs/async-std/pull/600)\n\n## Fixes\n\n- Fixed a doc test and enabled it on CI [(#597)](https://github.com/async-rs/async-std/pull/597)\n- Fixed a rendering issue with the `stream` submodule documentation [(#621)](https://github.com/async-rs/async-std/pull/621)\n- `Write::write_fmt`'s future is now correctly marked as `#[must_use]` [(#628)](https://github.com/async-rs/async-std/pull/628)\n- Fixed the missing `io::Bytes` export [(#633)](https://github.com/async-rs/async-std/pull/633)\n- Fixed the missing `io::Chain` export [(#633)](https://github.com/async-rs/async-std/pull/633)\n- Fixed the missing `io::Take` export [(#633)](https://github.com/async-rs/async-std/pull/633)\n\n# [1.3.0] - 2019-12-12\n\n[API Documentation](https://docs.rs/async-std/1.3.0/async-std)\n\nThis patch introduces `Stream::delay`, more methods on `DoubleEndedStream`,\nand improves compile times. `Stream::delay` is a new API that's similar to\n[`task::sleep`](https://docs.rs/async-std/1.2.0/async_std/task/fn.sleep.html),\nbut can be passed as part of as stream, rather than as a separate block. This is\nuseful for examples, or when manually debugging race conditions.\n\n## Examples\n\n```rust\nlet start = Instant::now();\nlet mut s = stream::from_iter(vec![0u8, 1]).delay(Duration::from_millis(200));\n\n// The first time will take more than 200ms due to delay.\ns.next().await;\nassert!(start.elapsed().as_millis() >= 200);\n\n// There will be no delay after the first time.\ns.next().await;\nassert!(start.elapsed().as_millis() <= 210);\n```\n\n## Added\n\n- Added `Stream::delay` as \"unstable\" [(#309)](https://github.com/async-rs/async-std/pull/309)\n- Added `DoubleEndedStream::next_back` as \"unstable\" [(#562)](https://github.com/async-rs/async-std/pull/562)\n- Added `DoubleEndedStream::nth_back` as \"unstable\" [(#562)](https://github.com/async-rs/async-std/pull/562)\n- Added `DoubleEndedStream::rfind` as \"unstable\" [(#562)](https://github.com/async-rs/async-std/pull/562)\n- Added `DoubleEndedStream::rfold` as \"unstable\" [(#562)](https://github.com/async-rs/async-std/pull/562)\n- Added `DoubleEndedStream::try_rfold` as \"unstable\" [(#562)](https://github.com/async-rs/async-std/pull/562)\n- `stream::Once` now implements `DoubleEndedStream` [(#562)](https://github.com/async-rs/async-std/pull/562)\n- `stream::FromIter` now implements `DoubleEndedStream` [(#562)](https://github.com/async-rs/async-std/pull/562)\n\n## Changed\n\n- Removed our dependency on `async-macros`, speeding up compilation [(#610)](https://github.com/async-rs/async-std/pull/610)\n\n## Fixes\n\n- Fixed a link in the task docs [(#598)](https://github.com/async-rs/async-std/pull/598)\n- Fixed the `UdpSocket::recv` example [(#603)](https://github.com/async-rs/async-std/pull/603)\n- Fixed a link to `task::block_on` [(#608)](https://github.com/async-rs/async-std/pull/608)\n- Fixed an incorrect API mention in `task::Builder` [(#612)](https://github.com/async-rs/async-std/pull/612)\n- Fixed leftover mentions of `futures-preview` [(#595)](https://github.com/async-rs/async-std/pull/595)\n- Fixed a typo in the tutorial [(#614)](https://github.com/async-rs/async-std/pull/614)\n- `<TcpStream as Write>::poll_close` now closes the write half of the stream [(#618)](https://github.com/async-rs/async-std/pull/618)\n\n# [1.2.0] - 2019-11-27\n\n[API Documentation](https://docs.rs/async-std/1.2.0/async-std)\n\nThis patch includes some minor quality-of-life improvements, introduces a\nnew `Stream::unzip` API, and adds verbose errors to our networking types.\n\nThis means if you can't connect to a socket, you'll never have to wonder again\n*which* address it was you couldn't connect to, instead of having to go through\nthe motions to debug what the address was.\n\n## Example\n\nUnzip a stream of tuples into two collections:\n\n```rust\nuse async_std::prelude::*;\nuse async_std::stream;\n\nlet s = stream::from_iter(vec![(1,2), (3,4)]);\n\nlet (left, right): (Vec<_>, Vec<_>) = s.unzip().await;\n\nassert_eq!(left, [1, 3]);\nassert_eq!(right, [2, 4]);\n```\n\n## Added\n\n- Added `Stream::unzip` as \"unstable\".\n- Added verbose errors to the networking types.\n\n## Changed\n\n- Enabled CI.\n- `Future::join` and `Future::try_join` can now join futures with different\n  output types.\n\n## Fixed\n\n- Fixed the docs and `Debug` output of `BufWriter`.\n- Fixed a bug in `Stream::throttle` that made it consume too much CPU.\n\n# [1.1.0] - 2019-11-21\n\n[API Documentation](https://docs.rs/async-std/1.1.0/async-std)\n\nThis patch introduces a faster scheduler algorithm, `Stream::throttle`, and\nstabilizes `task::yield_now`. Additionally we're introducing several more stream\nAPIs, bringing us to almost complete parity with the standard library.\n\nFurthermore our `path` submodule now returns more context in errors. So if\nopening a file fails, async-std will tell you *which* file was failed to open,\nmaking it easier to write and debug programs.\n\n## Examples\n\n```rust\nlet start = Instant::now();\n\nlet mut s = stream::interval(Duration::from_millis(5))\n    .throttle(Duration::from_millis(10))\n    .take(2);\n\ns.next().await;\nassert!(start.elapsed().as_millis() >= 5);\n\ns.next().await;\nassert!(start.elapsed().as_millis() >= 15);\n\ns.next().await;\nassert!(start.elapsed().as_millis() >= 25);\n```\n\n## Added\n\n- Added `Stream::throttle` as \"unstable\".\n- Added `Stream::count` as \"unstable\".\n- Added `Stream::max` as \"unstable\".\n- Added `Stream::successors` as \"unstable\".\n- Added `Stream::by_ref` as \"unstable\".\n- Added `Stream::partition` as \"unstable\".\n- Added contextual errors to the `path` submodule.\n- Added `os::windows::symlink_dir` as \"unstable\".\n- Added `os::windows::symlink_file` as \"unstable\".\n- Stabilized `task::yield_now`.\n\n## Fixes\n\n- We now ignore seek errors when rolling back failed `read` calls on `File`.\n- Fixed a bug where `Stream::max_by_key` was returning the wrong result.\n- Fixed a bug where `Stream::min_by_key` was returning the wrong result.\n\n## Changed\n\n- Applied various fixes to the tutorial.\n- Fixed an issue with Clippy.\n- Optimized an internal code generation macro, improving compilation speeds.\n- Removed an `Unpin` bound from `stream::Once`.\n- Removed various extra internal uses of `pin_mut!`.\n- Simplified `Stream::any` and `Stream::all`'s internals.\n- The `surf` example is now enabled again.\n- Tweaked some streams internals.\n- Updated `futures-timer` to 2.0.0, improving compilation speed.\n- Upgraded `async-macros` to 2.0.0.\n- `Stream::merge` now uses randomized ordering to reduce overall latency.\n- The scheduler is now more efficient by keeping a slot for the next task to\n  run. This is similar to Go's scheduler, and Tokio's scheduler.\n- Fixed the documentation of the `channel` types to link back to the `channel`\n  function.\n\n# [1.0.1] - 2019-11-12\n\n[API Documentation](https://docs.rs/async-std/1.0.1/async-std)\n\nWe were seeing a regression in our fs performance, caused by too many\nlong-running tasks. This patch fixes that regression by being more proactive\nabout closing down idle threads.\n\n## Changes\n\n- Improved thread startup/shutdown algorithm in `task::spawn_blocking`.\n- Fixed a typo in the tutorial.\n\n# [1.0.0] - 2019-11-11\n\n[API Documentation](https://docs.rs/async-std/1.0.0/async-std)\n\nThis release marks the `1.0.0` release of async-std; a major milestone for our\ndevelopment. This release itself mostly includes quality of life improvements\nfor all of modules, including more consistent API bounds for a lot of our\nsubmodules.\n\nThe biggest change is that we're now using the full semver range,\n`major.minor.patch`, and any breaking changes to our \"stable\" APIs will require\nan update of the `major` number.\n\nWe're excited we've hit this milestone together with you all. Thank you!\n\n## Added\n\n- Added `Future::join` as \"unstable\", replacing `future::join!`.\n- Added `Future::try_join` as \"unstable\", replacing `future::try_join!`.\n- Enabled `stable` and `beta` channel testing on CI.\n- Implemented `FromIterator` and `Extend` for `PathBuf`.\n- Implemented `FromStream` for `PathBuf`.\n- Loosened the trait bounds of `io::copy` on \"unstable\".\n\n## Changed\n\n- Added a `Sync` bound to `RwLock`, resolving a memory safety issue.\n- Fixed a bug in `Stream::take_while` where it could continue after it should've\n  ended.\n- Fixed a bug where our `attributes` Cargo feature wasn't working as intended.\n- Improved documentation of `Stream::merge`, documenting  ordering guarantees.\n- Update doc imports in examples to prefer async-std's types.\n- Various quality of life improvements to the `future` submodule.\n- Various quality of life improvements to the `path` submodule.\n- Various quality of life improvements to the `stream` submodule.\n\n## Removed\n\n- Removed `future::join!` in favor of `Future::join`.\n- Removed `future::try_join!` in favor of `Future::try_join`.\n\n# [0.99.12] - 2019-11-07\n\n[API Documentation](https://docs.rs/async-std/0.99.12/async-std)\n\nThis patch upgrades us to `futures` 0.3, support for `async/await` on Rust\nStable, performance improvements, and brand new module-level documentation.\n\n## Added\n\n- Added `Future::flatten` as \"unstable\".\n- Added `Future::race` as \"unstable\" (replaces `future::select!`).\n- Added `Future::try_race` as \"unstable\" (replaces `future::try_select!`).\n- Added `Stderr::lock` as \"unstable\".\n- Added `Stdin::lock` as \"unstable\".\n- Added `Stdout::lock` as \"unstable\".\n- Added `Stream::copied` as \"unstable\".\n- Added `Stream::eq` as \"unstable\".\n- Added `Stream::max_by_key` as \"unstable\".\n- Added `Stream::min` as \"unstable\".\n- Added `Stream::ne` as \"unstable\".\n- Added `Stream::position` as \"unstable\".\n- Added `StreamExt` and `FutureExt` as enumerable in the `prelude`.\n- Added `TcpListener` and `TcpStream` integration tests.\n- Added `stream::from_iter`.\n- Added `sync::WakerSet` for internal use.\n- Added an example to handle both `IP v4` and `IP v6` connections.\n- Added the `default` Cargo feature.\n- Added the `attributes` Cargo feature.\n- Added the `std` Cargo feature.\n\n## Changed\n\n- Fixed a bug in the blocking threadpool where it didn't spawn more than one thread.\n- Fixed a bug with `Stream::merge` where sometimes it ended too soon.\n- Fixed a bug with our GitHub actions setup.\n- Fixed an issue where our channels could spuriously deadlock.\n- Refactored the `task` module.\n- Removed a deprecated GitHub action.\n- Replaced `futures-preview` with `futures`.\n- Replaced `lazy_static` with `once_cell`.\n- Replaced all uses of `VecDequeue` in the examples with `stream::from_iter`.\n- Simplified `sync::RwLock` using the internal `sync::WakerSet` type.\n- Updated the `path` submodule documentation to match std.\n- Updated the mod-level documentation to match std.\n\n## Removed\n\n- Removed `future::select!` (replaced by `Future::race`).\n- Removed `future::try_select!` (replaced by `Future::try_race`).\n\n# [0.99.11] - 2019-10-29\n\nThis patch introduces `async_std::sync::channel`, a novel asynchronous port of\nthe ultra-fast Crossbeam channels. This has been one of the most anticipated\nfeatures for async-std, and we're excited to be providing a first version of\nthis!\n\nIn addition to channels, this patch has the regular list of new methods, types,\nand doc fixes.\n\n## Examples\n\n__Send and receive items from a channel__\n```rust\n// Create a bounded channel with a max-size of 1\nlet (s, r) = channel(1);\n\n// This call returns immediately because there is enough space in the channel.\ns.send(1).await;\n\ntask::spawn(async move {\n    // This call blocks the current task because the channel is full.\n    // It will be able to complete only after the first message is received.\n    s.send(2).await;\n});\n\n// Receive items from the channel\ntask::sleep(Duration::from_secs(1)).await;\nassert_eq!(r.recv().await, Some(1));\nassert_eq!(r.recv().await, Some(2));\n```\n\n## Added\n- Added `Future::delay` as \"unstable\"\n- Added `Stream::flat_map` as \"unstable\"\n- Added `Stream::flatten` as \"unstable\"\n- Added `Stream::product` as \"unstable\"\n- Added `Stream::sum` as \"unstable\"\n- Added `Stream::min_by_key`\n- Added `Stream::max_by`\n- Added `Stream::timeout` as \"unstable\"\n- Added `sync::channel` as \"unstable\".\n- Added doc links from instantiated structs to the methods that create them.\n- Implemented `Extend` + `FromStream` for `PathBuf`.\n\n## Changed\n- Fixed an issue with `block_on` so it works even when nested.\n- Fixed issues with our Clippy check on CI.\n- Replaced our uses of `cfg_if` with our own macros, simplifying the codebase.\n- Updated the homepage link in `Cargo.toml` to point to [async.rs](https://async.rs).\n- Updated the module-level documentation for `stream` and `sync`.\n- Various typos and grammar fixes.\n- Removed redundant file flushes, improving the performance of `File` operations\n\n## Removed\nNothing was removed in this release.\n\n# [0.99.10] - 2019-10-16\n\nThis patch stabilizes several core concurrency macros, introduces async versions\nof `Path` and `PathBuf`, and adds almost 100 other commits.\n\n## Examples\n\n__Asynchronously read directories from the filesystem__\n```rust\nuse async_std::fs;\nuse async_std::path::Path;\nuse async_std::prelude::*;\n\nlet path = Path::new(\"/laputa\");\nlet mut dir = fs::read_dir(&path).await.unwrap();\nwhile let Some(entry) = dir.next().await {\n    if let Ok(entry) = entry {\n        println!(\"{:?}\", entry.path());\n    }\n}\n```\n\n__Cooperatively reschedule the current task on the executor__\n```rust\nuse async_std::prelude::*;\nuse async_std::task;\n\ntask::spawn(async {\n    let x = fibonacci(1000); // Do expensive work\n    task::yield_now().await;  // Allow other tasks to run\n    x + fibonacci(100)       // Do more work\n})\n```\n\n__Create an interval stream__\n```rust\nuse async_std::prelude::*;\nuse async_std::stream;\nuse std::time::Duration;\n\nlet mut interval = stream::interval(Duration::from_secs(4));\nwhile let Some(_) = interval.next().await {\n    println!(\"prints every four seconds\");\n}\n```\n\n## Added\n\n- Added `FutureExt` to the `prelude`, allowing us to extend `Future`\n- Added `Stream::cmp`\n- Added `Stream::ge`\n- Added `Stream::last`\n- Added `Stream::le`\n- Added `Stream::lt`\n- Added `Stream::merge` as \"unstable\", replacing `stream::join!`\n- Added `Stream::partial_cmp`\n- Added `Stream::take_while`\n- Added `Stream::try_fold`\n- Added `future::IntoFuture` as \"unstable\"\n- Added `io::BufRead::split`\n- Added `io::Write::write_fmt`\n- Added `print!`, `println!`, `eprint!`, `eprintln!` macros as \"unstable\"\n- Added `process` as \"unstable\", re-exporting std types only for now\n- Added `std::net` re-exports to the `net` submodule\n- Added `std::path::PathBuf` with all associated methods\n- Added `std::path::Path` with all associated methods\n- Added `stream::ExactSizeStream` as \"unstable\"\n- Added `stream::FusedStream` as \"unstable\"\n- Added `stream::Product`\n- Added `stream::Sum`\n- Added `stream::from_fn`\n- Added `stream::interval` as \"unstable\"\n- Added `stream::repeat_with`\n- Added `task::spawn_blocking` as \"unstable\", replacing `task::blocking`\n- Added `task::yield_now`\n- Added `write!` and `writeln!` macros as \"unstable\"\n- Stabilized `future::join!` and `future::try_join!`\n- Stabilized `future::timeout`\n- Stabilized `path`\n- Stabilized `task::ready!`\n\n## Changed\n\n- Fixed `BufWriter::into_inner` so it calls `flush` before yielding\n- Refactored `io::BufWriter` internals\n- Refactored `net::ToSocketAddrs` internals\n- Removed Travis CI entirely\n- Rewrote the README.md\n- Stabilized `io::Cursor`\n- Switched bors over to use GitHub actions\n- Updated the `io` documentation to match std's `io` docs\n- Updated the `task` documentation to match std's `thread` docs\n\n## Removed\n\n- Removed the \"unstable\" `stream::join!` in favor of `Stream::merge`\n- Removed the \"unstable\" `task::blocking` in favor of `task::spawn_blocking`\n\n# [0.99.9] - 2019-10-08\n\nThis patch upgrades our `futures-rs` version, allowing us to build on the 1.39\nbeta. Additionally we've introduced `map` and `for_each` to `Stream`. And we've\nadded about a dozen new `FromStream` implementations for `std` types, bringing\nus up to par with std's `FromIterator` implementations.\n\nAnd finally we've added a new \"unstable\" `task::blocking` function which can be\nused to convert blocking code into async code using a threadpool. We've been\nusing this internally for a while now to async-std to power our `fs` and\n`net::SocketAddr` implementations. With this patch userland code now finally has\naccess to this too.\n\n## Example\n\n__Create a stream of tuples, and collect into a hashmap__\n```rust\nlet a = stream::once(1u8);\nlet b = stream::once(0u8);\n\nlet s = a.zip(b);\n\nlet map: HashMap<u8, u8> = s.collect().await;\nassert_eq!(map.get(&1), Some(&0u8));\n```\n\n__Spawn a blocking task on a dedicated threadpool__\n```rust\ntask::blocking(async {\n    println!(\"long-running task here\");\n}).await;\n```\n\n## Added\n\n- Added `stream::Stream::map`\n- Added `stream::Stream::for_each`\n- Added `stream::Stream::try_for_each`\n- Added `task::blocking` as \"unstable\"\n- Added `FromStream` for all `std::{option, collections, result, string, sync}` types.\n- Added the `path` submodule as \"unstable\".\n\n## Changed\n\n- Updated `futures-preview` to `0.3.0-alpha.19`, allowing us to build on `rustc 1.39.0-beta`.\n- As a consequence of this upgrade, all of our concrete stream implementations\n  now make use of `Stream::size_hint` to optimize internal allocations.\n- We now use GitHub Actions through [actions-rs](https://github.com/actions-rs),\n  in addition to Travis CI. We intend to fully switch in the near future.\n- Fixed a bug introduced in 0.99.6 where Unix Domain Listeners would sometimes become unresponsive.\n- Updated our `sync::Barrier` docs to match std.\n- Updated our `stream::FromStream` docs to match std's `FromIterator`.\n\n# [0.99.8] - 2019-09-28\n\n## Added\n\n- Added README to examples directory.\n- Added concurrency documentation to the futures submodule.\n- Added `io::Read::take` method.\n- Added `io::Read::by_ref` method.\n- Added `io::Read::chain` method.\n\n## Changed\n\n- Pin futures-preview to `0.3.0-alpha.18`, to avoid rustc upgrade problems.\n- Simplified extension traits using a macro.\n- Use the `broadcast` module with `std::sync::Mutex`, reducing dependencies.\n\n# [0.99.7] - 2019-09-26\n\n## Added\n\n- Added `future::join` macro as \"unstable\"\n- Added `future::select` macro as \"unstable\"\n- Added `future::try_join` macro as \"unstable\"\n- Added `future::try_select` macro as \"unstable\"\n- Added `io::BufWriter` struct\n- Added `stream::Extend` trait\n- Added `stream::Stream::chain` method\n- Added `stream::Stream::filter` method\n- Added `stream::Stream::inspect` method\n- Added `stream::Stream::skip_while` method\n- Added `stream::Stream::skip` method\n- Added `stream::Stream::step_by` method\n- Added `sync::Arc` struct from stdlib\n- Added `sync::Barrier` struct as \"unstable\"\n- Added `sync::Weak` struct from stdlib\n- Added `task::ready` macro as \"unstable\"\n\n## Changed\n\n- Correctly marked the `pin` submodule as \"unstable\" in the docs\n- Updated tutorial to have certain functions suffixed with `_loop`\n- `io` traits are now re-exports of futures-rs types, allowing them to be\n  implemented\n- `stream` traits are now re-exports of futures-rs types, allowing them to be\n  implemented\n- `prelude::*` now needs to be in scope for functions `io` and `stream` traits\n  to work\n\n# [0.99.6] - 2019-09-19\n\n## Added\n\n- Added `stream::Stream::collect` as \"unstable\"\n- Added `stream::Stream::enumerate`\n- Added `stream::Stream::fuse`\n- Added `stream::Stream::fold`\n- Added `stream::Stream::scan`\n- Added `stream::Stream::zip`\n- Added `stream::join` macro as \"unstable\"\n- Added `stream::DoubleEndedStream` as \"unstable\"\n- Added `stream::FromStream` trait as \"unstable\"\n- Added `stream::IntoStream` trait as \"unstable\"\n- Added `io::Cursor` as \"unstable\"\n- Added `io::BufRead::consume` method\n- Added `io::repeat`\n- Added `io::Slice` and `io::SliceMut`\n- Added documentation for feature flags\n- Added `pin` submodule as \"unstable\"\n- Added the ability to `collect` a stream of `Result<T, E>`s into a\n  `Result<impl FromStream<T>, E>`\n\n## Changed\n\n- Refactored the scheduling algorithm of our executor to use work stealing\n- Refactored the network driver, removing 400 lines of code\n- Removed the `Send` bound from `task::block_on`\n- Removed `Unpin` bound from `impl<T: futures::stream::Stream> Stream for T`\n\n# [0.99.5] - 2019-09-12\n\n## Added\n\n- Added tests for `io::timeout`\n- Added `io::BufRead::fill_buf`, an `async fn` counterpart to `poll_fill_buf`\n- Added `fs::create_dir_all`\n- Added `future::timeout`, a free function to time out futures after a threshold\n- Added `io::prelude`\n- Added `net::ToSocketAddrs`, a non-blocking version of std's `ToSocketAddrs`\n- Added `stream::Stream::all`\n- Added `stream::Stream::filter_map`\n- Added `stream::Stream::find_map`\n- Added `stream::Stream::find`\n- Added `stream::Stream::min_by`\n- Added `stream::Stream::nth`\n\n## Changed\n\n- Polished the text and examples of the tutorial\n- `cargo fmt` on all examples\n- Simplified internals of `TcpStream::connect_to`\n- Modularized our CI setup, enabled a rustfmt fallback, and improved caching\n- Reduced our dependency on the `futures-rs` crate, improving compilation times\n- Split `io::Read`, `io::Write`, `io::BufRead`, and `stream::Stream` into\n  multiple files\n- `fs::File` now flushes more often to prevent flushes during `seek`\n- Updated all dependencies\n- Fixed a bug in the conversion of `File` into raw handle\n- Fixed compilation errors on the latest nightly\n\n## Removed\n\n# [0.99.4] - 2019-08-21\n\n## Changes\n\n- Many small changes in the book, mostly typos\n- Documentation fixes correcting examples\n- Now works with recent nightly with stabilised async/await (> 2019-08-21)\n\n# [0.99.3] - 2019-08-16\n\n- Initial beta release\n\n[Unreleased]: https://github.com/async-rs/async-std/compare/v1.7.0...HEAD\n[1.7.0]: https://github.com/async-rs/async-std/compare/v1.6.5...1.7.0\n[1.6.5]: https://github.com/async-rs/async-std/compare/v1.6.4...v1.6.5\n[1.6.4]: https://github.com/async-rs/async-std/compare/v1.6.3...v1.6.4\n[1.6.3]: https://github.com/async-rs/async-std/compare/v1.6.2...v1.6.3\n[1.6.2]: https://github.com/async-rs/async-std/compare/v1.6.1...v1.6.2\n[1.6.1]: https://github.com/async-rs/async-std/compare/v1.6.0...v1.6.1\n[1.6.0]: https://github.com/async-rs/async-std/compare/v1.5.0...v1.6.0\n[1.6.0-beta.2]: https://github.com/async-rs/async-std/compare/v1.6.0-beta.1...v1.6.0-beta.2\n[1.6.0-beta.1]: https://github.com/async-rs/async-std/compare/v1.5.0...v1.6.0-beta.1\n[1.5.0]: https://github.com/async-rs/async-std/compare/v1.4.0...v1.5.0\n[1.4.0]: https://github.com/async-rs/async-std/compare/v1.3.0...v1.4.0\n[1.3.0]: https://github.com/async-rs/async-std/compare/v1.2.0...v1.3.0\n[1.2.0]: https://github.com/async-rs/async-std/compare/v1.1.0...v1.2.0\n[1.1.0]: https://github.com/async-rs/async-std/compare/v1.0.1...v1.1.0\n[1.0.1]: https://github.com/async-rs/async-std/compare/v1.0.0...v1.0.1\n[1.0.0]: https://github.com/async-rs/async-std/compare/v0.99.12...v1.0.0\n[0.99.12]: https://github.com/async-rs/async-std/compare/v0.99.11...v0.99.12\n[0.99.11]: https://github.com/async-rs/async-std/compare/v0.99.10...v0.99.11\n[0.99.10]: https://github.com/async-rs/async-std/compare/v0.99.9...v0.99.10\n[0.99.9]: https://github.com/async-rs/async-std/compare/v0.99.8...v0.99.9\n[0.99.8]: https://github.com/async-rs/async-std/compare/v0.99.7...v0.99.8\n[0.99.7]: https://github.com/async-rs/async-std/compare/v0.99.6...v0.99.7\n[0.99.6]: https://github.com/async-rs/async-std/compare/v0.99.5...v0.99.6\n[0.99.5]: https://github.com/async-rs/async-std/compare/v0.99.4...v0.99.5\n[0.99.4]: https://github.com/async-rs/async-std/compare/v0.99.3...v0.99.4\n[0.99.3]: https://github.com/async-rs/async-std/tree/v0.99.3\n"
        },
        {
          "name": "CODE_OF_CONDUCT.md",
          "type": "blob",
          "size": 3.271484375,
          "content": "# Contributor Covenant Code of Conduct\n\n## Our Pledge\n\nIn the interest of fostering an open and welcoming environment, we as\ncontributors and maintainers pledge to making participation in our project and\nour community a harassment-free experience for everyone, regardless of age, body\nsize, disability, ethnicity, sex characteristics, gender identity and expression,\nlevel of experience, education, socio-economic status, nationality, personal\nappearance, race, religion, or sexual identity and orientation.\n\n## Our Standards\n\nExamples of behavior that contributes to creating a positive environment\ninclude:\n\n* Using welcoming and inclusive language\n* Being respectful of differing viewpoints and experiences\n* Gracefully accepting constructive criticism\n* Focusing on what is best for the community\n* Showing empathy towards other community members\n\nExamples of unacceptable behavior by participants include:\n\n* The use of sexualized language or imagery and unwelcome sexual attention or\n advances\n* Trolling, insulting/derogatory comments, and personal or political attacks\n* Public or private harassment\n* Publishing others' private information, such as a physical or electronic\n address, without explicit permission\n* Other conduct which could reasonably be considered inappropriate in a\n professional setting\n\n## Our Responsibilities\n\nProject maintainers are responsible for clarifying the standards of acceptable\nbehavior and are expected to take appropriate and fair corrective action in\nresponse to any instances of unacceptable behavior.\n\nProject maintainers have the right and responsibility to remove, edit, or\nreject comments, commits, code, wiki edits, issues, and other contributions\nthat are not aligned to this Code of Conduct, or to ban temporarily or\npermanently any contributor for other behaviors that they deem inappropriate,\nthreatening, offensive, or harmful.\n\n## Scope\n\nThis Code of Conduct applies both within project spaces and in public spaces\nwhen an individual is representing the project or its community. Examples of\nrepresenting a project or community include using an official project e-mail\naddress, posting via an official social media account, or acting as an appointed\nrepresentative at an online or offline event. Representation of a project may be\nfurther defined and clarified by project maintainers.\n\n## Enforcement\n\nInstances of abusive, harassing, or otherwise unacceptable behavior may be\nreported by contacting the project team at stjepang@gmail.com. All\ncomplaints will be reviewed and investigated and will result in a response that\nis deemed necessary and appropriate to the circumstances. The project team is\nobligated to maintain confidentiality with regard to the reporter of an incident.\nFurther details of specific enforcement policies may be posted separately.\n\nProject maintainers who do not follow or enforce the Code of Conduct in good\nfaith may face temporary or permanent repercussions as determined by other\nmembers of the project's leadership.\n\n## Attribution\n\nThis Code of Conduct is adapted from the [Contributor Covenant][homepage], version 1.4,\navailable at https://www.contributor-covenant.org/version/1/4/code-of-conduct.html\n\n[homepage]: https://www.contributor-covenant.org\n\nFor answers to common questions about this code of conduct, see\nhttps://www.contributor-covenant.org/faq\n"
        },
        {
          "name": "Cargo.toml",
          "type": "blob",
          "size": 3.15625,
          "content": "[package]\nname = \"async-std\"\nversion = \"1.13.0\"\nauthors = [\n  \"Stjepan Glavina <stjepang@gmail.com>\",\n  \"Yoshua Wuyts <yoshuawuyts@gmail.com>\",\n  \"Friedel Ziegelmayer <me@dignifiedquire.com>\",\n  \"Contributors to async-std\",\n]\nedition = \"2018\"\nrust-version = \"1.63\"\nlicense = \"Apache-2.0 OR MIT\"\nrepository = \"https://github.com/async-rs/async-std\"\nhomepage = \"https://async.rs\"\ndescription = \"Async version of the Rust standard library\"\nkeywords = [\"async\", \"await\", \"future\", \"std\", \"task\"]\ncategories = [\"asynchronous\", \"concurrency\", \"network-programming\"]\n\n[package.metadata.docs.rs]\nfeatures = [\"docs\"]\nrustdoc-args = [\"--cfg\", \"feature=\\\"docs\\\"\"]\n\n[features]\ndefault = [\n  \"std\",\n  \"async-global-executor\",\n  \"async-io\",\n  \"futures-lite\",\n  \"kv-log-macro\",\n  \"log\",\n  \"pin-project-lite\",\n  \"gloo-timers\",\n]\ndocs = [\"attributes\", \"unstable\", \"default\"]\nunstable = [\n  \"std\",\n  \"async-io\",\n  \"async-process\",\n]\nattributes = [\"async-attributes\"]\nstd = [\n  \"alloc\",\n  \"crossbeam-utils\",\n  \"futures-core/std\",\n  \"futures-io\",\n  \"memchr\",\n  \"once_cell\",\n  \"pin-utils\",\n  \"slab\",\n  \"wasm-bindgen-futures\",\n  \"futures-channel\",\n  \"async-channel\",\n  \"async-lock\",\n]\nalloc = [\n  \"futures-core/alloc\",\n  \"pin-project-lite\",\n]\ntokio1 = [\"async-global-executor/tokio\"]\ntokio02 = [\"async-global-executor/tokio02\"]\ntokio03 = [\"async-global-executor/tokio03\"]\nio_safety = []\n\n[dependencies]\nasync-attributes = { version = \"1.1.2\", optional = true }\nasync-lock = { version = \"3.1.0\", optional = true }\ncrossbeam-utils = { version = \"0.8.0\", optional = true }\nfutures-core = { version = \"0.3.4\", optional = true, default-features = false }\nfutures-io = { version = \"0.3.4\", optional = true }\nkv-log-macro = { version = \"1.0.6\", optional = true }\nlog = { version = \"0.4.8\", features = [\"kv_unstable\"], optional = true }\nmemchr = { version = \"2.3.3\", optional = true }\nonce_cell = { version = \"1.3.1\", optional = true }\npin-project-lite = { version = \"0.2.0\", optional = true }\npin-utils = { version = \"0.1.0-alpha.4\", optional = true }\nslab = { version = \"0.4.2\", optional = true }\nasync-channel = { version = \"1.8.0\", optional = true }\n\n# dev dependency, but they are not allowed to be optional :/\nsurf = { version = \"2.0.0\", optional = true }\n\n\n[target.'cfg(not(target_os = \"unknown\"))'.dependencies]\nasync-global-executor = { version = \"2.4.0\", optional = true, features = [\"async-io\"] }\nasync-io = { version = \"2.2.0\", optional = true }\nfutures-lite = { version = \"2.0.0\", optional = true }\nasync-process = { version = \"2.0.0\", optional = true }\n\n[target.'cfg(target_arch = \"wasm32\")'.dependencies]\ngloo-timers = { version = \"0.3.0\", features = [\"futures\"], optional = true }\nwasm-bindgen-futures = { version = \"0.4.10\", optional = true }\nfutures-channel = { version = \"0.3.4\", optional = true }\n\n[target.'cfg(target_arch = \"wasm32\")'.dev-dependencies]\nwasm-bindgen-test = \"0.3.10\"\ngetrandom = { version = \"0.2.0\", features = [\"js\"] }\n\n[dev-dependencies]\nfemme = \"2.1.1\"\nrand = \"0.8.0\"\ntempfile = \"3.1.0\"\nfutures = \"0.3.4\"\nrand_xorshift = \"0.3.0\"\n\n[[test]]\nname = \"stream\"\nrequired-features = [\"unstable\"]\n\n[[example]]\nname = \"tcp-ipv4-and-6-echo\"\nrequired-features = [\"unstable\"]\n\n[[example]]\nname = \"surf-web\"\nrequired-features = [\"surf\"]\n"
        },
        {
          "name": "LICENSE-APACHE",
          "type": "blob",
          "size": 10.5927734375,
          "content": "                              Apache License\n                        Version 2.0, January 2004\n                     http://www.apache.org/licenses/\n\nTERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n1. Definitions.\n\n   \"License\" shall mean the terms and conditions for use, reproduction,\n   and distribution as defined by Sections 1 through 9 of this document.\n\n   \"Licensor\" shall mean the copyright owner or entity authorized by\n   the copyright owner that is granting the License.\n\n   \"Legal Entity\" shall mean the union of the acting entity and all\n   other entities that control, are controlled by, or are under common\n   control with that entity. For the purposes of this definition,\n   \"control\" means (i) the power, direct or indirect, to cause the\n   direction or management of such entity, whether by contract or\n   otherwise, or (ii) ownership of fifty percent (50%) or more of the\n   outstanding shares, or (iii) beneficial ownership of such entity.\n\n   \"You\" (or \"Your\") shall mean an individual or Legal Entity\n   exercising permissions granted by this License.\n\n   \"Source\" form shall mean the preferred form for making modifications,\n   including but not limited to software source code, documentation\n   source, and configuration files.\n\n   \"Object\" form shall mean any form resulting from mechanical\n   transformation or translation of a Source form, including but\n   not limited to compiled object code, generated documentation,\n   and conversions to other media types.\n\n   \"Work\" shall mean the work of authorship, whether in Source or\n   Object form, made available under the License, as indicated by a\n   copyright notice that is included in or attached to the work\n   (an example is provided in the Appendix below).\n\n   \"Derivative Works\" shall mean any work, whether in Source or Object\n   form, that is based on (or derived from) the Work and for which the\n   editorial revisions, annotations, elaborations, or other modifications\n   represent, as a whole, an original work of authorship. For the purposes\n   of this License, Derivative Works shall not include works that remain\n   separable from, or merely link (or bind by name) to the interfaces of,\n   the Work and Derivative Works thereof.\n\n   \"Contribution\" shall mean any work of authorship, including\n   the original version of the Work and any modifications or additions\n   to that Work or Derivative Works thereof, that is intentionally\n   submitted to Licensor for inclusion in the Work by the copyright owner\n   or by an individual or Legal Entity authorized to submit on behalf of\n   the copyright owner. For the purposes of this definition, \"submitted\"\n   means any form of electronic, verbal, or written communication sent\n   to the Licensor or its representatives, including but not limited to\n   communication on electronic mailing lists, source code control systems,\n   and issue tracking systems that are managed by, or on behalf of, the\n   Licensor for the purpose of discussing and improving the Work, but\n   excluding communication that is conspicuously marked or otherwise\n   designated in writing by the copyright owner as \"Not a Contribution.\"\n\n   \"Contributor\" shall mean Licensor and any individual or Legal Entity\n   on behalf of whom a Contribution has been received by Licensor and\n   subsequently incorporated within the Work.\n\n2. Grant of Copyright License. Subject to the terms and conditions of\n   this License, each Contributor hereby grants to You a perpetual,\n   worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n   copyright license to reproduce, prepare Derivative Works of,\n   publicly display, publicly perform, sublicense, and distribute the\n   Work and such Derivative Works in Source or Object form.\n\n3. Grant of Patent License. Subject to the terms and conditions of\n   this License, each Contributor hereby grants to You a perpetual,\n   worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n   (except as stated in this section) patent license to make, have made,\n   use, offer to sell, sell, import, and otherwise transfer the Work,\n   where such license applies only to those patent claims licensable\n   by such Contributor that are necessarily infringed by their\n   Contribution(s) alone or by combination of their Contribution(s)\n   with the Work to which such Contribution(s) was submitted. If You\n   institute patent litigation against any entity (including a\n   cross-claim or counterclaim in a lawsuit) alleging that the Work\n   or a Contribution incorporated within the Work constitutes direct\n   or contributory patent infringement, then any patent licenses\n   granted to You under this License for that Work shall terminate\n   as of the date such litigation is filed.\n\n4. Redistribution. You may reproduce and distribute copies of the\n   Work or Derivative Works thereof in any medium, with or without\n   modifications, and in Source or Object form, provided that You\n   meet the following conditions:\n\n   (a) You must give any other recipients of the Work or\n       Derivative Works a copy of this License; and\n\n   (b) You must cause any modified files to carry prominent notices\n       stating that You changed the files; and\n\n   (c) You must retain, in the Source form of any Derivative Works\n       that You distribute, all copyright, patent, trademark, and\n       attribution notices from the Source form of the Work,\n       excluding those notices that do not pertain to any part of\n       the Derivative Works; and\n\n   (d) If the Work includes a \"NOTICE\" text file as part of its\n       distribution, then any Derivative Works that You distribute must\n       include a readable copy of the attribution notices contained\n       within such NOTICE file, excluding those notices that do not\n       pertain to any part of the Derivative Works, in at least one\n       of the following places: within a NOTICE text file distributed\n       as part of the Derivative Works; within the Source form or\n       documentation, if provided along with the Derivative Works; or,\n       within a display generated by the Derivative Works, if and\n       wherever such third-party notices normally appear. The contents\n       of the NOTICE file are for informational purposes only and\n       do not modify the License. You may add Your own attribution\n       notices within Derivative Works that You distribute, alongside\n       or as an addendum to the NOTICE text from the Work, provided\n       that such additional attribution notices cannot be construed\n       as modifying the License.\n\n   You may add Your own copyright statement to Your modifications and\n   may provide additional or different license terms and conditions\n   for use, reproduction, or distribution of Your modifications, or\n   for any such Derivative Works as a whole, provided Your use,\n   reproduction, and distribution of the Work otherwise complies with\n   the conditions stated in this License.\n\n5. Submission of Contributions. Unless You explicitly state otherwise,\n   any Contribution intentionally submitted for inclusion in the Work\n   by You to the Licensor shall be under the terms and conditions of\n   this License, without any additional terms or conditions.\n   Notwithstanding the above, nothing herein shall supersede or modify\n   the terms of any separate license agreement you may have executed\n   with Licensor regarding such Contributions.\n\n6. Trademarks. This License does not grant permission to use the trade\n   names, trademarks, service marks, or product names of the Licensor,\n   except as required for reasonable and customary use in describing the\n   origin of the Work and reproducing the content of the NOTICE file.\n\n7. Disclaimer of Warranty. Unless required by applicable law or\n   agreed to in writing, Licensor provides the Work (and each\n   Contributor provides its Contributions) on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n   implied, including, without limitation, any warranties or conditions\n   of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n   PARTICULAR PURPOSE. You are solely responsible for determining the\n   appropriateness of using or redistributing the Work and assume any\n   risks associated with Your exercise of permissions under this License.\n\n8. Limitation of Liability. In no event and under no legal theory,\n   whether in tort (including negligence), contract, or otherwise,\n   unless required by applicable law (such as deliberate and grossly\n   negligent acts) or agreed to in writing, shall any Contributor be\n   liable to You for damages, including any direct, indirect, special,\n   incidental, or consequential damages of any character arising as a\n   result of this License or out of the use or inability to use the\n   Work (including but not limited to damages for loss of goodwill,\n   work stoppage, computer failure or malfunction, or any and all\n   other commercial damages or losses), even if such Contributor\n   has been advised of the possibility of such damages.\n\n9. Accepting Warranty or Additional Liability. While redistributing\n   the Work or Derivative Works thereof, You may choose to offer,\n   and charge a fee for, acceptance of support, warranty, indemnity,\n   or other liability obligations and/or rights consistent with this\n   License. However, in accepting such obligations, You may act only\n   on Your own behalf and on Your sole responsibility, not on behalf\n   of any other Contributor, and only if You agree to indemnify,\n   defend, and hold each Contributor harmless for any liability\n   incurred by, or claims asserted against, such Contributor by reason\n   of your accepting any such warranty or additional liability.\n\nEND OF TERMS AND CONDITIONS\n\nAPPENDIX: How to apply the Apache License to your work.\n\n   To apply the Apache License to your work, attach the following\n   boilerplate notice, with the fields enclosed by brackets \"[]\"\n   replaced with your own identifying information. (Don't include\n   the brackets!)  The text should be enclosed in the appropriate\n   comment syntax for the file format. We also recommend that a\n   file or class name and description of purpose be included on the\n   same \"printed page\" as the copyright notice for easier\n   identification within third-party archives.\n\nCopyright [yyyy] [name of copyright owner]\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n\thttp://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n"
        },
        {
          "name": "LICENSE-MIT",
          "type": "blob",
          "size": 0.9990234375,
          "content": "Permission is hereby granted, free of charge, to any\nperson obtaining a copy of this software and associated\ndocumentation files (the \"Software\"), to deal in the\nSoftware without restriction, including without\nlimitation the rights to use, copy, modify, merge,\npublish, distribute, sublicense, and/or sell copies of\nthe Software, and to permit persons to whom the Software\nis furnished to do so, subject to the following\nconditions:\n\nThe above copyright notice and this permission notice\nshall be included in all copies or substantial portions\nof the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF\nANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED\nTO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A\nPARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT\nSHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\nOF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR\nIN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\nDEALINGS IN THE SOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 5.1015625,
          "content": "<h1 align=\"center\">async-std</h1>\n<div align=\"center\">\n <strong>\n   Async version of the Rust standard library\n </strong>\n</div>\n\n<br />\n\n<div align=\"center\">\n   <!-- CI status -->\n  <a href=\"https://github.com/async-rs/async-std/actions\">\n    <img src=\"https://img.shields.io/github/actions/workflow/status/async-rs/async-std/ci.yml?branch=main&style=flat-square\"\n      alt=\"CI Status\" />\n  </a>\n  <!-- Crates version -->\n  <a href=\"https://crates.io/crates/async-std\">\n    <img src=\"https://img.shields.io/crates/v/async-std.svg?style=flat-square\"\n    alt=\"Crates.io version\" />\n  </a>\n  <!-- Downloads -->\n  <a href=\"https://crates.io/crates/async-std\">\n    <img src=\"https://img.shields.io/crates/d/async-std.svg?style=flat-square\"\n      alt=\"Download\" />\n  </a>\n  <!-- docs.rs docs -->\n  <a href=\"https://docs.rs/async-std\">\n    <img src=\"https://img.shields.io/badge/docs-latest-blue.svg?style=flat-square\"\n      alt=\"docs.rs docs\" />\n  </a>\n\n  <a href=\"https://discord.gg/JvZeVNe\">\n    <img src=\"https://img.shields.io/discord/598880689856970762.svg?logo=discord&style=flat-square\"\n      alt=\"chat\" />\n  </a>\n</div>\n\n<div align=\"center\">\n  <h3>\n    <a href=\"https://docs.rs/async-std\">\n      API Docs\n    </a>\n    <span> | </span>\n    <a href=\"https://book.async.rs\">\n      Book\n    </a>\n    <span> | </span>\n    <a href=\"https://github.com/async-rs/async-std/releases\">\n      Releases\n    </a>\n    <span> | </span>\n    <a href=\"https://async.rs/contribute\">\n      Contributing\n    </a>\n  </h3>\n</div>\n\n<br/>\n\nThis crate provides an async version of [`std`]. It provides all the interfaces\nyou are used to, but in an async version and ready for Rust's `async`/`await`\nsyntax.\n\n[`std`]: https://doc.rust-lang.org/std/index.html\n\n## Features\n\n- __Modern:__ Built from the ground up for `std::future` and `async/await` with\n    blazing fast compilation time.\n- __Fast:__ Our robust allocator and threadpool designs provide ultra-high\n    throughput with predictably low latency.\n- __Intuitive:__ Complete parity with the stdlib means you only need to learn\n    APIs once.\n- __Clear:__ [Detailed documentation][docs] and [accessible guides][book] mean\n    using async Rust was never easier.\n\n[docs]: https://docs.rs/async-std\n[book]: https://book.async.rs\n\n## Examples\n\n```rust\nuse async_std::task;\n\nasync fn say_hello() {\n    println!(\"Hello, world!\");\n}\n\nfn main() {\n    task::block_on(say_hello())\n}\n```\n\nMore examples, including networking and file access, can be found in our\n[`examples`] directory and in our [documentation].\n\n[`examples`]: https://github.com/async-rs/async-std/tree/HEAD/examples\n[documentation]: https://docs.rs/async-std#examples\n[`task::block_on`]: https://docs.rs/async-std/*/async_std/task/fn.block_on.html\n[`\"attributes\"` feature]: https://docs.rs/async-std/#features\n\n## Philosophy\n\nWe believe Async Rust should be as easy to pick up as Sync Rust. We also believe\nthat the best API is the one you already know. And finally, we believe that\nproviding an asynchronous counterpart to the standard library is the best way\nstdlib provides a reliable basis for both performance and productivity.\n\nAsync-std is the embodiment of that vision. It combines single-allocation task\ncreation, with an adaptive lock-free executor, threadpool and network driver to\ncreate a smooth system that processes work at a high pace with low latency,\nusing Rust's familiar stdlib API.\n\n## Installation\n\nRun this in your projects folder:\n\n```sh\n$ cargo add async-std\n```\n\nWe also provide a set of \"unstable\" features with async-std. See the [features\ndocumentation] on how to enable them.\n\n[cargo add]: https://doc.rust-lang.org/cargo/commands/cargo-add.html\n[features documentation]: https://docs.rs/async-std/#features\n\n## Ecosystem\n \n * [async-tls](https://crates.io/crates/async-tls) — Async TLS/SSL streams using **Rustls**. \n  \n * [async-native-tls](https://crates.io/crates/async-native-tls) — **Native TLS** for Async. Native TLS for futures and async-std.\n \n * [async-tungstenite](https://crates.io/crates/async-tungstenite) — Asynchronous **WebSockets** for async-std, tokio, gio and any std Futures runtime.\n \n * [Tide](https://crates.io/crates/tide) — Serve the web. A modular **web framework** built around async/await.\n\n * [SQLx](https://crates.io/crates/sqlx) — The Rust **SQL** Toolkit. SQLx is a 100% safe Rust library for Postgres and MySQL with compile-time checked queries.\n\n * [Surf](https://crates.io/crates/surf) — Surf the web. Surf is a friendly **HTTP client** built for casual Rustaceans and veterans alike.\n \n * [Xactor](https://crates.io/crates/xactor) — Xactor is a rust actors framework based on async-std.\n \n * [async-graphql](https://crates.io/crates/async-graphql) — A GraphQL server library implemented in rust, with full support for async/await.\n \n## License\n\n<sup>\nLicensed under either of <a href=\"LICENSE-APACHE\">Apache License, Version\n2.0</a> or <a href=\"LICENSE-MIT\">MIT license</a> at your option.\n</sup>\n\n<br/>\n\n<sub>\nUnless you explicitly state otherwise, any contribution intentionally submitted\nfor inclusion in this crate by you, as defined in the Apache-2.0 license, shall\nbe dual licensed as above, without any additional terms or conditions.\n</sub>\n"
        },
        {
          "name": "benches",
          "type": "tree",
          "content": null
        },
        {
          "name": "ci",
          "type": "tree",
          "content": null
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}