{
  "metadata": {
    "timestamp": 1736709109731,
    "page": 274,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjI4MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "TeXitoi/structopt",
      "stars": 2717,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.048828125,
          "content": "target\nCargo.lock\n*~\nexpanded.rs\n\n.idea/\n.vscode/\n"
        },
        {
          "name": ".travis.yml",
          "type": "blob",
          "size": 0.8447265625,
          "content": "if: type != push OR branch = master\n\nlanguage: rust\nmatrix:\n  include:\n    - rust: stable\n      name: check if `cargo fmt --all` is applied\n      before_script: rustup component add rustfmt-preview\n      script: cargo fmt --all -- --check\n\n    - language: node_js\n      node_js: node\n      name: check links\n      install: npm install -g markdown-link-check\n      script:\n        - markdown-link-check -c link-check-headers.json README.md\n        - markdown-link-check -c link-check-headers.json CHANGELOG.md\n        - markdown-link-check -c link-check-headers.json examples/README.md\n\n    - rust: stable\n      name: clippy\n      before_script: rustup component add clippy\n      script: cargo clippy --all -- -D warnings\n\n    - rust: 1.46.0\n    - rust: stable\n    - rust: beta\n    - rust: nightly\n\nscript:\n  - cargo test\n\njobs:\n  allow_failures:\n    - name: clippy\n"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 20.599609375,
          "content": "# v0.3.25 (2021-10-18)\n\n* Fix duplication of aliases in subcommands [#504](https://github.com/TeXitoi/structopt/pull/504)\n\n# v0.3.25 (2021-10-18)\n\n* No changes\n\n# v0.3.23 (2021-08-30)\n\n* Update minimal rust version to 1.46 because of bitflags 1.3\n* Fixed [a bug that occurs when the type of `map` becomes ambiguous](https://github.com/TeXitoi/structopt/issues/490).\n* Add support for [skip for enum variant subcommands](https://github.com/TeXitoi/structopt/issues/493)\n\n# v0.3.22 (2021-07-04)\n\n* Add support for [generics in derive](https://github.com/TeXitoi/structopt/issues/128)\n\n# v0.3.21 (2020-11-30)\n\n* Fixed [another breakage](https://github.com/TeXitoi/structopt/issues/447)\n  when the struct is placed inside a `macro_rules!` macro.\n\n# v0.3.20 (2020-10-12)\n\n* Fixed [a breakage](https://github.com/TeXitoi/structopt/issues/439)\n  when the struct is placed inside a `macro_rules!` macro.\n\n# v0.3.19 (2020-10-08)\n\n* Added [StructOpt::from_args_safe](https://docs.rs/structopt/0.3/structopt/trait.StructOpt.html#tymethod.from_args_safe) as a shortcut for `StructOpt::from_iter_safe(std::env::args_os())`.\n* Some links in documentation have been corrected.\n\n# v0.3.18 (2020-09-23)\n\n* Unsafe code [has been forbidden](https://github.com/TeXitoi/structopt/issues/432). This makes\n  [`cargo geiger`](https://github.com/rust-secure-code/cargo-geiger) list structopt as \"safe\".\n  Maybe it will help somebody trying to locate a bug in their dependency tree.\n\n# v0.3.17 (2020-08-25)\n\n* Fixed [a breakage](https://github.com/TeXitoi/structopt/issues/424) with resent rustc versions\n  due to `quote_spanned` misuse.\n\n# v0.3.16 (2020-08-05)\n\n* Added [the new example](https://github.com/TeXitoi/structopt/blob/master/examples/required_if.rs).\n* Allow `#[structopt(flatten)]` fields to have doc comments. The comments are ignored.\n* The `paw` crate is now being reexported when `paw` feature is enabled,\n  see [`#407`](https://github.com/TeXitoi/structopt/issues/407).\n\n# v0.3.15 (2020-06-16)\n\n* Minor documentation improvements.\n* Fixed [a latent bug](https://github.com/TeXitoi/structopt/pull/398),\n  courtesy of [@Aaron1011](https://github.com/Aaron1011).\n\n# v0.3.14 (2020-04-22)\n\n* Minor documentation improvements.\n\n# v0.3.13 (2020-04-9)\n\n* Bump `proc-macro-error` to `1.0`.\n\n# v0.3.12 (2020-03-18)\n\n* Fixed [bug in `external_subcommand`](https://github.com/TeXitoi/structopt/issues/359).\n\n# v0.3.11 (2020-03-01)\n\n* `syn`'s \"full\" feature is now explicitly enabled. It must have been, but hasn't.\n\n# v0.3.10 (2020-03-01) - YANKED\n\n* Fixed the breakage due to a required `syn` feature was not enabled.\n\n# v0.3.9 (2020-02-01) - YANKED\n\n* `clippy` warnings triggered by generated code shall not annoy you anymore!\n  Except for those from `clippy::correctness`, these lints are useful even\n  for auto generated code.\n* Improved error messages.\n\n# v0.3.8 (2020-1-19) - YANKED\n\n* You don't have to apply `#[no_version]` to every `enum` variant anymore.\n  Just annotate the `enum` and the setting will be propagated down\n  ([#242](https://github.com/TeXitoi/structopt/issues/242)).\n* [Auto-default](https://docs.rs/structopt/0.3/structopt/#default-values).\n* [External subcommands](https://docs.rs/structopt/0.3/structopt/#external-subcommands).\n* [Flattening subcommands](https://docs.rs/structopt/0.3.8/structopt/#flattening-subcommands).\n\n# v0.3.7 (2019-12-28)\n\nNothing's new. Just re-release of `v0.3.6` due to\n[the mess with versioning](https://github.com/TeXitoi/structopt/issues/315#issuecomment-568502792).\n\nYou may notice that `structopt-derive` was bumped to `v0.4.0`, that's OK, it's not a breaking change.\n`structopt` will pull the right version in on its on.\n\n# v0.3.6 (2019-12-22) - YANKED\n\nThis is unusually big patch release. It contains a number of bugfixes and\nnew features, some of them may theoretically be considered breaking. We did our best\nto avoid any problems on user's side but, if it wasn't good enough, please\n[file an issue ASAP](https://github.com/TeXitoi/structopt/issues).\n\n## Bugfixes\n\n* `structopt` used to treat `::path::to::type::Vec<T>` as `Vec<T>`\n  special type. [This was considered erroneous](https://github.com/TeXitoi/structopt/pull/287).\n  (same for `Option<T>` and `bool`). Now only exact `Vec<T>` match is a special type.\n\n* `#[structopt(version = expr)]` where `expr` is not a string literal used to get\n  overridden by auto generated `.version()` call,\n  [incorrectly](https://github.com/TeXitoi/structopt/issues/283). Now it doesn't.\n\n* Fixed bug with top-level `App::*` calls on multiple `struct`s, see\n  [#289](https://github.com/TeXitoi/structopt/issues/265).\n\n* Positional `bool` args with no explicit `#[structopt(parse(...))]` annotation are\n  now prohibited. This couldn't work well anyway, see\n  [this example](https://github.com/TeXitoi/structopt/blob/master/examples/true_or_false.rs)\n  for details.\n\n* Now we've instituted strict priority between doc comments, about, help, and the like.\n  See [the documentation](https://docs.rs/structopt/0.3/structopt/#help-messages).\n\n  **HUGE THANKS to [`@ssokolow`](https://github.com/ssokolow)** for tidying up our documentation,\n  teaching me English and explaining why our doc used to suck. I promise I'll make the rest\n  of the doc up to your standards... sometime later!\n\n## New features\n\n* Implement `StructOpt` for `Box<impl StructOpt>` so from now on you can use `Box<T>`\n  with `flatten` and `subcommand` ([#304](https://github.com/TeXitoi/structopt/issues/304)).\n\n  ```rust\n  enum Command {\n      #[structopt(name = \"version\")]\n      PrintVersion,\n\n      #[structopt(name = \"second\")]\n      DoSomething {\n          #[structopt(flatten)]\n          config: Box<DoSomethingConfig>,\n      },\n\n      #[structopt(name = \"first\")]\n      DoSomethingElse {\n          #[structopt(flatten)]\n          config: Box<DoSomethingElseConfig>,\n      }\n  }\n  ```\n\n* Introduced `#[structopt(verbatim_doc_comment)]` attribute that keeps line breaks in\n  doc comments, see\n  [the documentation](https://docs.rs/structopt/0.3/structopt/#doc-comment-preprocessing-and-structoptverbatim_doc_comment).\n\n* Introduced `#[structopt(rename_all_env)]` and `#[structopt(env)]` magical methods\n  so you can derive env var's name from field's name. See\n  [the documentation](https://docs.rs/structopt/0.3/structopt/#auto-deriving-environment-variables).\n\n## Improvements\n\n* Now we have nice README for our examples,\n  [check it out](https://github.com/TeXitoi/structopt/tree/master/examples)!\n\n* Some error messages were improved and clarified, thanks for all people involved!\n\n\n# v0.3.5 (2019-11-22)\n\n* `try_from_str` functions are now called with a `&str` instead of a `&String` ([#282](https://github.com/TeXitoi/structopt/pull/282))\n\n# v0.3.4 (2019-11-08)\n\n* `rename_all` does not apply to fields that were annotated with explicit\n  `short/long/name = \"...\"` anymore ([#265](https://github.com/TeXitoi/structopt/issues/265))\n* Now raw idents are handled correctly ([#269](https://github.com/TeXitoi/structopt/issues/269))\n* Some documentation improvements and clarification.\n\n# v0.3.3 (2019-10-10)\n\n* Add `from_flag` custom parser to create flags from non-bool types.\n  Fixes [#185](https://github.com/TeXitoi/structopt/issues/185)\n\n# v0.3.2 (2019-09-18)\n\n* `structopt` does not replace `:` with `, ` inside \"author\" strings while inside `<...>`.\n  Fixes [#156](https://github.com/TeXitoi/structopt/issues/156)\n* Introduced [`#[structopt(skip = expr)]` syntax](https://docs.rs/structopt/0.3.2/structopt/#skipping-fields).\n\n# v0.3.1 (2019-09-06)\n\n* Fix error messages ([#241](https://github.com/TeXitoi/structopt/issues/241))\n* Fix \"`skip` plus long doc comment\" bug ([#245](https://github.com/TeXitoi/structopt/issues/245))\n* Now `structopt` emits dummy `StructOpt` implementation along with an error. It suppresses\n  meaningless errors like `from_args method is not found for Opt`\n* `.version()` not get generated if `CARGO_PKG_VERSION` is not set anymore.\n\n# v0.3.0 (2019-08-30)\n\n## Breaking changes\n\n### Bump minimum rustc version to 1.36 by [@TeXitoi](https://github.com/TeXitoi)\nNow `rustc` 1.36 is the minimum compiler version supported by `structopt`,\nit likely won't work with older compilers.\n\n### Remove \"nightly\" feature\nOnce upon a time this feature had been used to enable some of improvements\nin `proc-macro2` crate that were available only on nightly. Nowadays this feature doesn't\nmean anything so it's now removed.\n\n### Support optional vectors of arguments for distinguishing between `-o 1 2`, `-o` and no option provided at all by [@sphynx](https://github.com/sphynx) ([#180](https://github.com/TeXitoi/structopt/issues/188)).\n\n```rust\n#[derive(StructOpt)]\nstruct Opt {\n  #[structopt(long)]\n  fruit: Option<Vec<String>>,\n}\n\nfn main() {\n  assert_eq!(Opt::from_args(&[\"test\"]), None);\n  assert_eq!(Opt::from_args(&[\"test\", \"--fruit\"]), Some(vec![]));\n  assert_eq!(Opt::from_args(&[\"test\", \"--fruit=apple orange\"]), Some(vec![\"apple\", \"orange\"]));\n}\n```\n\nIf you need to fall back to the old behavior you can use a type alias:\n```rust\ntype Something = Vec<String>;\n\n#[derive(StructOpt)]\nstruct Opt {\n  #[structopt(long)]\n  fruit: Option<Something>,\n}\n```\n\n### Change default case from 'Verbatim' into 'Kebab' by [@0ndorio](https://github.com/0ndorio) ([#202](https://github.com/TeXitoi/structopt/issues/202)).\n`structopt` 0.3 uses field renaming to deduce a name for long options and subcommands.\n\n```rust\n#[derive(StructOpt)]\nstruct Opt {\n  #[structopt(long)]\n  http_addr: String, // will be renamed to `--http-addr`\n\n  #[structopt(subcommand)]\n  addr_type: AddrType // this adds `addr-type` subcommand\n}\n```\n\n`structopt` 0.2 used to leave things \"as is\", not renaming anything. If you want to keep old\nbehavior add `#[structopt(rename_all = \"verbatim\")]` on top of a `struct`/`enum`.\n\n### Change `version`, `author` and `about` attributes behavior.\nProposed by [@TeXitoi](https://github.com/TeXitoi) [(#217)](https://github.com/TeXitoi/structopt/issues/217), implemented by [@CreepySkeleton](https://github.com/CreepySkeleton) [(#229)](https://github.com/TeXitoi/structopt/pull/229).\n\n`structopt` have been deducing `version`, `author`, and `about` properties from `Cargo.toml`\nfor a long time (more accurately, from `CARGO_PKG_...` environment variables).\nBut many users found this behavior somewhat confusing, and a hack was added to cancel out\nthis behavior: `#[structopt(author = \"\")]`.\n\nIn `structopt` 0.3 this has changed.\n* `author` and `about` are no longer deduced by default. You should use `#[structopt(author, about)]`\n  to explicitly request `structopt` to deduce them.\n* Contrary, `version` **is still deduced by default**. You can use `#[structopt(no_version)]` to\n  cancel it out.\n* `#[structopt(author = \"\", about = \"\", version = \"\")]` is no longer a valid syntax\n  and will trigger an error.\n* `#[structopt(version = \"version\", author = \"author\", about = \"about\")]` syntax\n  stays unaffected by this changes.\n\n### Raw attributes are removed ([#198](https://github.com/TeXitoi/structopt/pull/198)) by [@sphynx](https://github.com/sphynx)\nIn `structopt` 0.2 you were able to use any method from `clap::App` and `clap::Arg` via\nraw attribute: `#[structopt(raw(method_name = \"arg\"))]`. This syntax was kind of awkward.\n\n```rust\n#[derive(StructOpt, Debug)]\n#[structopt(raw(\n    global_settings = \"&[AppSettings::ColoredHelp, AppSettings::VersionlessSubcommands]\"\n))]\nstruct Opt {\n    #[structopt(short = \"l\", long = \"level\", raw(aliases = r#\"&[\"set-level\", \"lvl\"]\"#))]\n    level: Vec<String>,\n}\n```\n\nRaw attributes were removed in 0.3. Now you can use any method from `App` and `Arg` *directly*:\n```rust\n#[derive(StructOpt)]\n#[structopt(global_settings(&[AppSettings::ColoredHelp, AppSettings::VersionlessSubcommands]))]\nstruct Opt {\n    #[structopt(short = \"l\", long = \"level\", aliases(&[\"set-level\", \"lvl\"]))]\n    level: Vec<String>,\n}\n```\n\n## Improvements\n\n### Support skipping struct fields\nProposed by [@Morganamilo](https://github.com/Morganamilo) in ([#174](https://github.com/TeXitoi/structopt/issues/174))\nimplemented by [@sphynx](https://github.com/sphynx) in ([#213](https://github.com/TeXitoi/structopt/issues/213)).\n\nSometimes you want to include some fields in your `StructOpt` `struct` that are not options\nand `clap` should know nothing about them. In `structopt` 0.3 it's possible via the\n`#[structopt(skip)]` attribute. The field in question will be assigned with `Default::default()`\nvalue.\n\n```rust\n#[derive(StructOpt)]\nstruct Opt {\n    #[structopt(short, long)]\n    speed: f32,\n\n    car: String,\n\n    // this field should not generate any arguments\n    #[structopt(skip)]\n    meta: Vec<u64>\n}\n```\n\n### Add optional feature to support `paw` by [@gameldar](https://github.com/gameldar) ([#187](https://github.com/TeXitoi/structopt/issues/187))\n\n### Significantly improve error reporting by [@CreepySkeleton](https://github.com/CreepySkeleton) ([#225](https://github.com/TeXitoi/structopt/pull/225/))\nNow (almost) every error message points to the location it originates from:\n\n```text\nerror: default_value is meaningless for bool\n  --> $DIR/bool_default_value.rs:14:24\n   |\n14 |     #[structopt(short, default_value = true)]\n   |                        ^^^^^^^^^^^^^\n```\n\n# v0.2.16 (2019-05-29)\n\n### Support optional options with optional argument, allowing `cmd [--opt[=value]]` by [@sphynx](https://github.com/sphynx) ([#188](https://github.com/TeXitoi/structopt/issues/188))\nSometimes you want to represent an optional option that optionally takes an argument,\ni.e `[--opt[=value]]`. This is represented by `Option<Option<T>>`\n\n```rust\n#[derive(StructOpt)]\nstruct Opt {\n  #[structopt(long)]\n  fruit: Option<Option<String>>,\n}\n\nfn main() {\n  assert_eq!(Opt::from_args(&[\"test\"]), None);\n  assert_eq!(Opt::from_args(&[\"test\", \"--fruit\"]), Some(None));\n  assert_eq!(Opt::from_args(&[\"test\", \"--fruit=apple\"]), Some(\"apple\"));\n}\n```\n\n# v0.2.15 (2019-03-08)\n\n* Fix [#168](https://github.com/TeXitoi/structopt/issues/168) by [@TeXitoi](https://github.com/TeXitoi)\n\n# v0.2.14 (2018-12-10)\n\n* Introduce smarter parsing of doc comments by [@0ndorio](https://github.com/0ndorio)\n\n# v0.2.13 (2018-11-01)\n\n* Automatic naming of fields and subcommands by [@0ndorio](https://github.com/0ndorio)\n\n# v0.2.12 (2018-10-11)\n\n* Fix minimal clap version by [@TeXitoi](https://github.com/TeXitoi)\n\n# v0.2.11 (2018-10-05)\n\n* Upgrade syn to 0.15 by [@konstin](https://github.com/konstin)\n\n# v0.2.10 (2018-06-07)\n\n* 1.21.0 is the minimum required rustc version by\n  [@TeXitoi](https://github.com/TeXitoi)\n\n# v0.2.9 (2018-06-05)\n\n* Fix a bug when using `flatten` by\n  [@fbenkstein](https://github.com/fbenkstein)\n* Update syn, quote and proc_macro2 by\n  [@TeXitoi](https://github.com/TeXitoi)\n* Fix a regression when there is multiple authors by\n  [@windwardly](https://github.com/windwardly)\n\n# v0.2.8 (2018-04-28)\n\n* Add `StructOpt::from_iter_safe()`, which returns an `Error` instead of\n  killing the program when it fails to parse, or parses one of the\n  short-circuiting flags. ([#98](https://github.com/TeXitoi/structopt/pull/98)\n  by [@quodlibetor](https://github.com/quodlibetor))\n* Allow users to enable `clap` features independently by\n  [@Kerollmops](https://github.com/Kerollmops)\n* Fix a bug when flattening an enum\n  ([#103](https://github.com/TeXitoi/structopt/pull/103) by\n  [@TeXitoi](https://github.com/TeXitoi)\n\n# v0.2.7 (2018-04-12)\n\n* Add flattening, the insertion of options of another StructOpt struct\n  into another ([#92](https://github.com/TeXitoi/structopt/pull/92))\n  by [@birkenfeld](https://github.com/birkenfeld)\n* Fail compilation when using `default_value` or `required` with\n  `Option` ([#88](https://github.com/TeXitoi/structopt/pull/88)) by\n  [@Kerollmops](https://github.com/Kerollmops)\n\n# v0.2.6 (2018-03-31)\n\n* Fail compilation when using `default_value` or `required` with `bool` ([#80](https://github.com/TeXitoi/structopt/issues/80)) by [@TeXitoi](https://github.com/TeXitoi)\n* Fix compilation with `#[deny(warnings)]` with the `!` type (https://github.com/rust-lang/rust/pull/49039#issuecomment-376398999) by [@TeXitoi](https://github.com/TeXitoi)\n* Improve first example in the documentation ([#82](https://github.com/TeXitoi/structopt/issues/82)) by [@TeXitoi](https://github.com/TeXitoi)\n\n# v0.2.5 (2018-03-07)\n\n* Work around breakage when `proc-macro2`'s nightly feature is enabled. ([#77](https://github.com/Texitoi/structopt/pull/77) and [proc-macro2#67](https://github.com/alexcrichton/proc-macro2/issues/67)) by [@fitzgen](https://github.com/fitzgen)\n\n# v0.2.4 (2018-02-25)\n\n* Fix compilation with `#![deny(missig_docs]` ([#74](https://github.com/TeXitoi/structopt/issues/74)) by [@TeXitoi](https://github.com/TeXitoi)\n* Fix [#76](https://github.com/TeXitoi/structopt/issues/76) by [@TeXitoi](https://github.com/TeXitoi)\n* Re-licensed to Apache-2.0/MIT by [@CAD97](https://github.com/cad97)\n\n# v0.2.3 (2018-02-16)\n\n* An empty line in a doc comment will result in a double linefeed in the generated about/help call by [@TeXitoi](https://github.com/TeXitoi)\n\n# v0.2.2 (2018-02-12)\n\n* Fix [#66](https://github.com/TeXitoi/structopt/issues/66) by [@TeXitoi](https://github.com/TeXitoi)\n\n# v0.2.1 (2018-02-11)\n\n* Fix a bug around enum tuple and the about message in the global help by [@TeXitoi](https://github.com/TeXitoi)\n* Fix [#65](https://github.com/TeXitoi/structopt/issues/65) by [@TeXitoi](https://github.com/TeXitoi)\n\n# v0.2.0 (2018-02-10)\n\n## Breaking changes\n\n### Don't special case `u64` by [@SergioBenitez](https://github.com/SergioBenitez)\n\nIf you are using a `u64` in your struct to get the number of occurrence of a flag, you should now add `parse(from_occurrences)` on the flag.\n\nFor example\n```rust\n#[structopt(short = \"v\", long = \"verbose\")]\nverbose: u64,\n```\nmust be changed by\n```rust\n#[structopt(short = \"v\", long = \"verbose\", parse(from_occurrences))]\nverbose: u64,\n```\n\nThis feature was surprising as shown in [#30](https://github.com/TeXitoi/structopt/issues/30). Using the `parse` feature seems much more natural.\n\n### Change the signature of `Structopt::from_clap` to take its argument by reference by [@TeXitoi](https://github.com/TeXitoi)\n\nThere was no reason to take the argument by value. Most of the StructOpt users will not be impacted by this change. If you are using `StructOpt::from_clap`, just add a `&` before the argument.\n\n### Fail if attributes are not used by [@TeXitoi](https://github.com/TeXitoi)\n\nStructOpt was quite fuzzy in its attribute parsing: it was only searching for interesting things, e. g. something like `#[structopt(foo(bar))]` was accepted but not used. It now fails the compilation.\n\nYou should have nothing to do here. This breaking change may highlight some misuse that can be bugs.\n\nIn future versions, if there is cases that are not highlighted, they will be considerated as bugs, not breaking changes.\n\n### Use `raw()` wrapping instead of `_raw` suffixing by [@TeXitoi](https://github.com/TeXitoi)\n\nThe syntax of raw attributes is changed to improve the syntax.\n\nYou have to change `foo_raw = \"bar\", baz_raw = \"foo\"` by `raw(foo = \"bar\", baz = \"foo\")` or `raw(foo = \"bar\"), raw(baz = \"foo\")`.\n\n## New features\n\n* Add `parse(from_occurrences)` parser by [@SergioBenitez](https://github.com/SergioBenitez)\n* Support 1-uple enum variant as subcommand by [@TeXitoi](https://github.com/TeXitoi)\n* structopt-derive crate is now an implementation detail, structopt reexport the custom derive macro by [@TeXitoi](https://github.com/TeXitoi)\n* Add the `StructOpt::from_iter` method by [@Kerollmops](https://github.com/Kerollmops)\n\n## Documentation\n\n* Improve doc by [@bestouff](https://github.com/bestouff)\n* All the documentation is now on the structopt crate by [@TeXitoi](https://github.com/TeXitoi)\n\n# v0.1.7 (2018-01-23)\n\n* Allow opting out of clap default features by [@ski-csis](https://github.com/ski-csis)\n\n# v0.1.6 (2017-11-25)\n\n* Improve documentation by [@TeXitoi](https://github.com/TeXitoi)\n* Fix bug [#31](https://github.com/TeXitoi/structopt/issues/31) by [@TeXitoi](https://github.com/TeXitoi)\n\n# v0.1.5 (2017-11-14)\n\n* Fix a bug with optional subsubcommand and Enum by [@TeXitoi](https://github.com/TeXitoi)\n\n# v0.1.4 (2017-11-09)\n\n* Implement custom string parser from either `&str` or `&OsStr` by [@kennytm](https://github.com/kennytm)\n\n# v0.1.3 (2017-11-01)\n\n* Improve doc by [@TeXitoi](https://github.com/TeXitoi)\n\n# v0.1.2 (2017-11-01)\n\n* Fix bugs [#24](https://github.com/TeXitoi/structopt/issues/24) and [#25](https://github.com/TeXitoi/structopt/issues/25) by [@TeXitoi](https://github.com/TeXitoi)\n* Support of methods with something else that a string as argument thanks to `_raw` suffix by [@Flakebi](https://github.com/Flakebi)\n\n# v0.1.1 (2017-09-22)\n\n* Better formatting of multiple authors by [@killercup](https://github.com/killercup)\n\n# v0.1.0 (2017-07-17)\n\n* Subcommand support by [@williamyaoh](https://github.com/williamyaoh)\n\n# v0.0.5 (2017-06-16)\n\n* Using doc comment to populate help by [@killercup](https://github.com/killercup)\n\n# v0.0.3 (2017-02-11)\n\n* First version with flags, arguments and options support by [@TeXitoi](https://github.com/TeXitoi)\n"
        },
        {
          "name": "Cargo.toml",
          "type": "blob",
          "size": 1.111328125,
          "content": "[package]\nname = \"structopt\"\nversion = \"0.3.26\"\nedition = \"2018\"\nauthors = [\"Guillaume Pinot <texitoi@texitoi.eu>\", \"others\"]\ndescription = \"Parse command line argument by defining a struct.\"\ndocumentation = \"https://docs.rs/structopt\"\nrepository = \"https://github.com/TeXitoi/structopt\"\nkeywords = [\"clap\", \"cli\", \"derive\", \"docopt\"]\ncategories = [\"command-line-interface\"]\nlicense = \"Apache-2.0 OR MIT\"\nreadme = \"README.md\"\n\n[features]\ndefault = [\"clap/default\"]\nsuggestions = [\"clap/suggestions\"]\ncolor = [\"clap/color\"]\nwrap_help = [\"clap/wrap_help\"]\nyaml = [\"clap/yaml\"]\nlints = [\"clap/lints\"]\ndebug = [\"clap/debug\"]\nno_cargo = [\"clap/no_cargo\"]\ndoc = [\"clap/doc\"]\npaw = [\"structopt-derive/paw\", \"paw_dep\"]\n\n[badges]\ntravis-ci = { repository = \"TeXitoi/structopt\" }\n\n[dependencies]\nclap = { version = \"2.33\", default-features = false }\nstructopt-derive = { path = \"structopt-derive\", version = \"=0.4.18\" }\nlazy_static = \"1.4.0\"\npaw_dep = { version = \"1\", optional = true, package = \"paw\" }\n\n[dev-dependencies]\ntrybuild = { version = \"1.0.5\", features = [\"diff\"] }\nrustversion = \"1\"\nstrum = { version = \"0.21\", features = [\"derive\"] }\n"
        },
        {
          "name": "LICENSE-APACHE",
          "type": "blob",
          "size": 11.0908203125,
          "content": "                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"[]\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright [yyyy] [name of copyright owner]\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n"
        },
        {
          "name": "LICENSE-MIT",
          "type": "blob",
          "size": 1.078125,
          "content": "MIT License\n\nCopyright (c) 2018 Guillaume Pinot (@TeXitoi) <texitoi@texitoi.eu>\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 4.767578125,
          "content": "# StructOpt\n\n[![Build status](https://travis-ci.com/TeXitoi/structopt.svg?branch=master)](https://app.travis-ci.com/github/TeXitoi/structopt) [![](https://img.shields.io/crates/v/structopt.svg)](https://crates.io/crates/structopt) [![](https://docs.rs/structopt/badge.svg)](https://docs.rs/structopt)\n[![unsafe forbidden](https://img.shields.io/badge/unsafe-forbidden-success.svg)](https://github.com/rust-secure-code/safety-dance/)\n\nParse command line arguments by defining a struct.  It combines [clap](https://crates.io/crates/clap) with custom derive.\n\n## Maintenance\n\nAs clap v3 is now out, and the structopt features are integrated into (almost as-is), structopt is now in maintenance mode: no new feature will be added.\n\nBugs will be fixed, and documentation improvements will be accepted.\n\nSee the [structopt -> clap migration guide](https://github.com/clap-rs/clap/blob/master/CHANGELOG.md#migrating)\n\n## Documentation\n\nFind it on [Docs.rs](https://docs.rs/structopt).  You can also check the [examples](https://github.com/TeXitoi/structopt/tree/master/examples) and the [changelog](https://github.com/TeXitoi/structopt/blob/master/CHANGELOG.md).\n\n## Example\n\nAdd `structopt` to your dependencies of your `Cargo.toml`:\n```toml\n[dependencies]\nstructopt = \"0.3\"\n```\n\nAnd then, in your rust file:\n```rust\nuse std::path::PathBuf;\nuse structopt::StructOpt;\n\n/// A basic example\n#[derive(StructOpt, Debug)]\n#[structopt(name = \"basic\")]\nstruct Opt {\n    // A flag, true if used in the command line. Note doc comment will\n    // be used for the help message of the flag. The name of the\n    // argument will be, by default, based on the name of the field.\n    /// Activate debug mode\n    #[structopt(short, long)]\n    debug: bool,\n\n    // The number of occurrences of the `v/verbose` flag\n    /// Verbose mode (-v, -vv, -vvv, etc.)\n    #[structopt(short, long, parse(from_occurrences))]\n    verbose: u8,\n\n    /// Set speed\n    #[structopt(short, long, default_value = \"42\")]\n    speed: f64,\n\n    /// Output file\n    #[structopt(short, long, parse(from_os_str))]\n    output: PathBuf,\n\n    // the long option will be translated by default to kebab case,\n    // i.e. `--nb-cars`.\n    /// Number of cars\n    #[structopt(short = \"c\", long)]\n    nb_cars: Option<i32>,\n\n    /// admin_level to consider\n    #[structopt(short, long)]\n    level: Vec<String>,\n\n    /// Files to process\n    #[structopt(name = \"FILE\", parse(from_os_str))]\n    files: Vec<PathBuf>,\n}\n\nfn main() {\n    let opt = Opt::from_args();\n    println!(\"{:#?}\", opt);\n}\n```\n\nUsing this example:\n```\n$ ./basic\nerror: The following required arguments were not provided:\n    --output <output>\n\nUSAGE:\n    basic --output <output> --speed <speed>\n\nFor more information try --help\n$ ./basic --help\nbasic 0.3.0\nGuillaume Pinot <texitoi@texitoi.eu>, others\nA basic example\n\nUSAGE:\n    basic [FLAGS] [OPTIONS] --output <output> [--] [file]...\n\nFLAGS:\n    -d, --debug      Activate debug mode\n    -h, --help       Prints help information\n    -V, --version    Prints version information\n    -v, --verbose    Verbose mode (-v, -vv, -vvv, etc.)\n\nOPTIONS:\n    -l, --level <level>...     admin_level to consider\n    -c, --nb-cars <nb-cars>    Number of cars\n    -o, --output <output>      Output file\n    -s, --speed <speed>        Set speed [default: 42]\n\nARGS:\n    <file>...    Files to process\n$ ./basic -o foo.txt\nOpt {\n    debug: false,\n    verbose: 0,\n    speed: 42.0,\n    output: \"foo.txt\",\n    nb_cars: None,\n    level: [],\n    files: [],\n}\n$ ./basic -o foo.txt -dvvvs 1337 -l alice -l bob --nb-cars 4 bar.txt baz.txt\nOpt {\n    debug: true,\n    verbose: 3,\n    speed: 1337.0,\n    output: \"foo.txt\",\n    nb_cars: Some(\n        4,\n    ),\n    level: [\n        \"alice\",\n        \"bob\",\n    ],\n    files: [\n        \"bar.txt\",\n        \"baz.txt\",\n    ],\n}\n```\n\n## StructOpt rustc version policy\n\n- Minimum rustc version modification must be specified in the [changelog](https://github.com/TeXitoi/structopt/blob/master/CHANGELOG.md) and in the [travis configuration](https://github.com/TeXitoi/structopt/blob/master/.travis.yml).\n- Contributors can increment minimum rustc version without any justification if the new version is required by the latest version of one of StructOpt's dependencies (`cargo update` will not fail on StructOpt).\n- Contributors can increment minimum rustc version if the library user experience is improved.\n\n## License\n\nLicensed under either of\n\n- Apache License, Version 2.0 ([LICENSE-APACHE](LICENSE-APACHE) or <https://www.apache.org/licenses/LICENSE-2.0>)\n- MIT license ([LICENSE-MIT](LICENSE-MIT) or <https://opensource.org/licenses/MIT>)\n\nat your option.\n\n### Contribution\n\nUnless you explicitly state otherwise, any contribution intentionally submitted\nfor inclusion in the work by you, as defined in the Apache-2.0 license, shall be\ndual licensed as above, without any additional terms or conditions.\n"
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "link-check-headers.json",
          "type": "blob",
          "size": 0.3046875,
          "content": "{\n    \"httpHeaders\": [\n        {\n            \"urls\": [\n                \"https://\",\n                \"http://\"\n            ],\n            \"headers\": {\n                \"User-Agent\": \"broken links checker (https://github.com/TeXitoi/structopt)\",\n                \"Accept\": \"text/html\"\n            }\n        }\n    ]\n}\n"
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "structopt-derive",
          "type": "tree",
          "content": null
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}