{
  "metadata": {
    "timestamp": 1736709210674,
    "page": 488,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjQ5MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "dgiagio/warp",
      "stars": 1920,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.3310546875,
          "content": "# Generated by Cargo\n# will have compiled files and executables\n/target/\n\n# Remove Cargo.lock from gitignore if creating an executable, leave it for libraries\n# More information here https://doc.rust-lang.org/cargo/guide/cargo-toml-vs-cargo-lock.html\nCargo.lock\n\n# These are backup files generated by rustfmt\n**/*.rs.bk\n\n# Intellij\n.idea/\n"
        },
        {
          "name": "Cargo.toml",
          "type": "blob",
          "size": 0.0517578125,
          "content": "[workspace]\nmembers = [\"warp-runner\", \"warp-packer\"]\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.0625,
          "content": "MIT License\n\nCopyright (c) 2018 Diego Giagio <diego@giagio.com>\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "Makefile",
          "type": "blob",
          "size": 1.0234375,
          "content": "all:\r\n\t$(MAKE) build\r\n\r\nbuild:\r\n\tcargo build -p warp-runner --release --target x86_64-unknown-linux-gnu\r\n\tstrip target/x86_64-unknown-linux-gnu/release/warp-runner\r\n\r\n\tCC=x86_64-apple-darwin15-clang cargo build -p warp-runner --release --target x86_64-apple-darwin\r\n\tx86_64-apple-darwin15-strip target/x86_64-apple-darwin/release/warp-runner\r\n\r\n\tcargo build -p warp-runner --release --target x86_64-pc-windows-gnu\r\n\tstrip target/x86_64-pc-windows-gnu/release/warp-runner.exe\r\n\r\n\tcargo build -p warp-packer --release --target x86_64-unknown-linux-gnu\r\n\tstrip target/x86_64-unknown-linux-gnu/release/warp-packer\r\n\r\n\tCC=x86_64-apple-darwin15-clang cargo build -p warp-packer --release --target x86_64-apple-darwin\r\n\tx86_64-apple-darwin15-strip target/x86_64-apple-darwin/release/warp-packer\r\n\r\n\tcargo build -p warp-packer --release --target x86_64-pc-windows-gnu\r\n\tstrip target/x86_64-pc-windows-gnu/release/warp-packer.exe\r\n\r\nclean:\r\n\tcargo clean\r\n\r\ncheck:\r\n\t$(MAKE) build\r\n\t$(MAKE) test\r\n\r\ntest:\r\n\tcargo  test\r\n\r\n.PHONY: all build clean check test\r\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 15.2294921875,
          "content": "# Warp\nWarp lets you create self-contained single binary applications making it simpler and more ergonomic to deliver your application to your customers. A self-contained binary is specially convenient when the technology you use, such as Node.js, .NET Core, Java and others, contain many dependencies that must be shipped alongside your application.\n\nWarp is written in Rust and is supported on Linux, Windows and macOS.\n\n### Table of Content\n  * [Quickstart with Node.js](#quickstart-with-nodejs)\n    + [Linux](#linux)\n    + [macOS](#macos)\n    + [Windows](#windows)\n  * [Quickstart with .NET Core](#quickstart-with-net-core)\n    + [Linux](#linux-1)\n    + [macOS](#macos-1)\n    + [Windows](#windows-1)\n  * [Quickstart with Java](#quickstart-with-java)\n  * [How it works](#how-it-works)\n    + [Performance](#performance)\n    + [Packages cache location](#packages-cache-location)\n    + [Runners cache location](#runners-cache-location)\n  * [Authors](#authors)\n  * [License](#license)\n\n\n## Quickstart with Node.js\n### Linux\n**Create the directory for the application**\n```sh\ndgiagio@X1:~/Devel$ mkdir myapp\ndgiagio@X1:~/Devel/myapp$ cd myapp\n```\n\n**Create main application** - `app.js`\n```javascript\nvar lodash = require('lodash');\nvar output = lodash.without([1, 2, 3], 1);\nconsole.log(output);\n```\n\n**Download Node.js distribution**\n```sh\ndgiagio@X1:~/Devel/myapp$ wget https://nodejs.org/dist/v8.12.0/node-v8.12.0-linux-x64.tar.xz\ndgiagio@X1:~/Devel/myapp$ xz -dc node-v8.12.0-linux-x64.tar.xz | tar xvf -\n```\n\n**Install dependencies**\n```sh\ndgiagio@X1:~/Devel/myapp$ node-v8.12.0-linux-x64/bin/npm install lodash\n```\n\n**Remove unneeded files**\n```sh\ndgiagio@X1:~/Devel/myapp$ rm -r node-v8.12.0-linux-x64/include node-v8.12.0-linux-x64/share node-v8.12.0-linux-x64/lib\ndgiagio@X1:~/Devel/myapp$ rm node-v8.12.0-linux-x64/bin/npm node-v8.12.0-linux-x64/bin/npx\n```\n\n**Create launcher script** - `launch`\n```sh\n#!/bin/sh\n\nNODE_DIST=node-v8.12.0-linux-x64\nAPP_MAIN_JS=app.js\n\nDIR=\"$(cd \"$(dirname \"$0\")\" ; pwd -P)\"\nNODE_EXE=$DIR/$NODE_DIST/bin/node\nNODE_PATH=$DIR/node_modules\nAPP_MAIN_JS_PATH=$DIR/$APP_MAIN_JS\n\nexec $NODE_EXE $APP_MAIN_JS_PATH $@\n```\n\n**Make the launcher script executable**\n```sh\ndgiagio@X1:~/Devel/myapp$ chmod +x launch\n```\n\n**Download `warp-packer`**\n\nIf you save `warp-packer` in a directory in your PATH, you only need to download it once.\n```sh\ndgiagio@X1:~/Devel/myapp$ cd ..\ndgiagio@X1:~/Devel$ curl -Lo warp-packer https://github.com/dgiagio/warp/releases/download/v0.3.0/linux-x64.warp-packer\ndgiagio@X1:~/Devel$ chmod +x warp-packer\n```\n\n**Create your self-contained application**\n\n```sh\ndgiagio@X1:~/Devel$ ./warp-packer --arch linux-x64 --input_dir myapp --exec launch --output myapp.bin\ndgiagio@X1:~/Devel$ chmod +x myapp.bin\n```\n\n**Run your self-contained application**\n\n```sh\ndgiagio@X1:~/Devel$ ./myapp.bin\n[ 2, 3 ]\ndgiagio@X1:~/Devel$\n```\n\n**More information about your self-contained application**\n\n```sh\ndgiagio@X1:~/Devel/myapp$ file myapp.bin\nmyapp.bin: ELF 64-bit LSB shared object, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, for GNU/Linux 3.2.0, BuildID[sha1]=aa53b01be2cde5e0b64450870b1af13b52d5cffb, with debug_info, not stripped\n\ndgiagio@X1:~/Devel/myapp$ du -hs myapp.bin\n17M     myapp.bin\n```\n\n### macOS\n**Create the directory for the application**\n```sh\nDiegos-iMac:Devel dgiagio$ mkdir myapp\nDiegos-iMac:Devel dgiagio$ cd myapp\n```\n\n**Create main application** - `app.js`\n```javascript\nvar lodash = require('lodash');\nvar output = lodash.without([1, 2, 3], 1);\nconsole.log(output);\n```\n\n**Download Node.js distribution**\n```sh\nDiegos-iMac:myapp dgiagio$ curl -Lo node-v8.12.0-darwin-x64.tar.gz https://nodejs.org/dist/v8.12.0/node-v8.12.0-darwin-x64.tar.gz\nDiegos-iMac:myapp dgiagio$ tar xvfz node-v8.12.0-darwin-x64.tar.gz\n```\n\n**Install dependencies**\n```sh\nDiegos-iMac:myapp dgiagio$ PATH=node-v8.12.0-darwin-x64/bin npm install lodash\n```\n\n**Remove unneeded files**\n```sh\nDiegos-iMac:myapp dgiagio$ rm -r node-v8.12.0-darwin-x64/include node-v8.12.0-darwin-x64/share node-v8.12.0-darwin-x64/lib\nDiegos-iMac:myapp dgiagio$ rm node-v8.12.0-darwin-x64/bin/npm node-v8.12.0-darwin-x64/bin/npx\n```\n\n**Create launcher script*** - `launch`\n```sh\n#!/bin/sh\n\nNODE_DIST=node-v8.12.0-darwin-x64\nAPP_MAIN_JS=app.js\n\nDIR=\"$(cd \"$(dirname \"$0\")\" ; pwd -P)\"\nNODE_EXE=$DIR/$NODE_DIST/bin/node\nNODE_PATH=$DIR/node_modules\nAPP_MAIN_JS_PATH=$DIR/$APP_MAIN_JS\n\nexec \"$NODE_EXE\" \"$APP_MAIN_JS_PATH\" $@\n```\n\n**Make the launcher script executable**\n```sh\nDiegos-iMac:myapp dgiagio$ chmod +x launch\n```\n\n**Download `warp-packer`**\n\nIf you save `warp-packer` in a directory in your PATH, you only need to download it once.\n```sh\nDiegos-iMac:myapp dgiagio$ cd ..\nDiegos-iMac:Devel dgiagio$ curl -Lo warp-packer https://github.com/dgiagio/warp/releases/download/v0.3.0/macos-x64.warp-packer\nDiegos-iMac:Devel dgiagio$ chmod +x warp-packer\n```\n\n**Create your self-contained application**\n\n```sh\nDiegos-iMac:Devel dgiagio$ ./warp-packer --arch macos-x64 --input_dir myapp --exec launch --output myapp.bin\nDiegos-iMac:Devel dgiagio$ chmod +x myapp.bin\n```\n\n**Run your self-contained application**\n\n```sh\nDiegos-iMac:Devel dgiagio$ ./myapp.bin\n[ 2, 3 ]\nDiegos-iMac:Devel dgiagio$\n```\n\n**More information about your self-contained application**\n\n```sh\nDiegos-iMac:Devel dgiagio$ file myapp.bin\nmyapp.bin: Mach-O 64-bit executable x86_64\n\nDiegos-iMac:Devel dgiagio$ du -hs myapp.bin\n26M     myapp.bin\n```\n\n### Windows\n**Create the directory for the application**\n```powershell\nPS C:\\Users\\Diego\\Devel> mkdir myapp\nPS C:\\Users\\Diego\\Devel> cd myapp\n```\n\n**Create main application** - `app.js`\n```javascript\nvar lodash = require('lodash');\nvar output = lodash.without([1, 2, 3], 1);\nconsole.log(output);\n```\n\n**Download Node.js distribution**\n```powershell\nPS C:\\Users\\Diego\\Devel\\myapp> curl https://nodejs.org/dist/v8.12.0/node-v8.12.0-win-x64.zip -OutFile node-v8.12.0-win-x64.zip\nPS C:\\Users\\Diego\\Devel\\myapp> Expand-Archive .\\node-v8.12.0-win-x64.zip -DestinationPath .\\\n```\n\n**Install dependencies**\n```powershell\nPS C:\\Users\\Diego\\Devel\\myapp> .\\node-v8.12.0-win-x64\\npm install lodash\n```\n\n**Remove unneeded files**\n```powershell\nPS C:\\Users\\Diego\\Devel\\myapp> rmdir -Recurse .\\node-v8.12.0-win-x64\\node_modules\\npm\n```\n\n**Create launcher script*** - `launch.cmd`\n```bat\n@ECHO OFF\n\nSETLOCAL\n\nSET \"NODE_DIST=node-v8.12.0-win-x64\"\nSET \"APP_MAIN_JS=app.js\"\n\nSET \"NODE_EXE=%~dp0\\%NODE_DIST%\\node.exe\"\nSET \"NODE_PATH=%~dp0\\%NODE_DIST%\\node_modules\"\nSET \"APP_MAIN_JS_PATH=%~dp0\\%APP_MAIN_JS%\"\n\nCALL %NODE_EXE% %APP_MAIN_JS_PATH% %*\nEXIT /B %ERRORLEVEL%\n```\n\n**Download `warp-packer`**\n\nIf you save `warp-packer` in a directory in your PATH, you only need to download it once.\n```powershell\nPS C:\\Users\\Diego\\Devel\\myapp> cd ..\nPS C:\\Users\\Diego\\Devel> [Net.ServicePointManager]::SecurityProtocol = \"tls12, tls11, tls\" ; Invoke-WebRequest https://github.com/dgiagio/warp/releases/download/v0.3.0/windows-x64.warp-packer.exe -OutFile warp-packer.exe\n```\n\n**Create your self-contained application**\n\n```powershell\nPS C:\\Users\\Diego\\Devel> .\\warp-packer --arch windows-x64 --input_dir .\\myapp\\ --exec launch.cmd --output myapp.exe\n```\n\n**Run your self-contained application**\n\n```powershell\nPS C:\\Users\\Diego\\Devel> .\\myapp.exe\n[ 2, 3 ]\nPS C:\\Users\\Diego\\Devel>\n```\n\n**More information about your self-contained application**\n\n```powershell\nPS C:\\Users\\Diego\\Devel> \"{0:N2} MB\" -f ((Get-Item myapp.exe).Length / 1MB)\n9.15 MB\n```\n\n## Quickstart with .NET Core\n### Linux\n**Create a simple console application**\n\n```sh\ndgiagio@X1:~/Devel$ mkdir myapp\ndgiagio@X1:~/Devel$ cd myapp\ndgiagio@X1:~/Devel/myapp$ dotnet new console\ndgiagio@X1:~/Devel/myapp$ dotnet run\nHello World!\ndgiagio@X1:~/Devel/myapp$\n```\n\n**Publish the application with native installer for `linux-x64` runtime**\n\n```sh\ndgiagio@X1:~/Devel/myapp$ dotnet publish -c Release -r linux-x64\n```\nThe application should be published to `bin/Release/netcoreapp2.1/linux-x64/publish/`\n\n**Download `warp-packer`**\n\nIf you save `warp-packer` in a directory in your PATH, you only need to download it once.\n```sh\ndgiagio@X1:~/Devel/myapp$ curl -Lo warp-packer https://github.com/dgiagio/warp/releases/download/v0.3.0/linux-x64.warp-packer\ndgiagio@X1:~/Devel/myapp$ chmod +x warp-packer\n```\n\n**Create your self-contained application**\n\n```sh\ndgiagio@X1:~/Devel/myapp$ ./warp-packer --arch linux-x64 --input_dir bin/Release/netcoreapp2.1/linux-x64/publish --exec myapp --output myapp\ndgiagio@X1:~/Devel/myapp$ chmod +x myapp\n```\n\n**Run your self-contained application**\n\n```sh\ndgiagio@X1:~/Devel/myapp$ ./myapp\nHello World!\ndgiagio@X1:~/Devel/myapp$\n```\n\n**More information about your self-contained application**\n\n```sh\ndgiagio@X1:~/Devel/myapp$ file myapp\nmyapp: ELF 64-bit LSB executable, x86-64, version 1 (GNU/Linux), statically linked, BuildID[sha1]=13b12e71a63ca1de8537ad7e90c83241f9f87f6c, with debug_info, not stripped\n\ndgiagio@X1:~/Devel/myapp$ du -hs myapp\n34M     myapp\n```\n\n### macOS\n**Create a simple console application**\n\n```sh\nDiegos-iMac:Devel dgiagio$ mkdir myapp\nDiegos-iMac:Devel dgiagio$ cd myapp\nDiegos-iMac:myapp dgiagio$ dotnet new console\nDiegos-iMac:myapp dgiagio$ dotnet run\nHello World!\nDiegos-iMac:myapp dgiagio$\n```\n\n**Publish the application with native installer for `osx-x64` runtime**\n\n```sh\nDiegos-iMac:myapp dgiagio$ dotnet publish -c Release -r osx-x64\n```\nThe application should be published to `bin/Release/netcoreapp2.1/osx-x64/publish/`\n\n**Download `warp-packer`**\n\nIf you save `warp-packer` in a directory in your PATH, you only need to download it once.\n```sh\nDiegos-iMac:myapp dgiagio$ curl -Lo warp-packer https://github.com/dgiagio/warp/releases/download/v0.3.0/macos-x64.warp-packer\nDiegos-iMac:myapp dgiagio$ chmod +x warp-packer\n```\n\n**Create your self-contained application**\n\n```sh\nDiegos-iMac:myapp dgiagio$ ./warp-packer --arch macos-x64 --input_dir bin/Release/netcoreapp2.1/osx-x64/publish --exec myapp --output myapp\nDiegos-iMac:myapp dgiagio$ chmod +x myapp\n```\n\n**Run your self-contained application**\n\n```sh\nDiegos-iMac:myapp dgiagio$ ./myapp\nHello World!\nDiegos-iMac:myapp dgiagio$\n```\n\n**More information about your self-contained application**\n\n```sh\nDiegos-iMac:myapp dgiagio$ file myapp\nmyapp: Mach-O 64-bit executable x86_64\n\nDiegos-iMac:myapp dgiagio$ du -hs myapp\n 27M    myapp\n```\n\n### Windows\n**Create a simple console application**\n\n```powershell\nPS C:\\Users\\Diego\\Devel> mkdir myapp\nPS C:\\Users\\Diego\\Devel> cd myapp\nPS C:\\Users\\Diego\\Devel\\myapp> dotnet new console\nPS C:\\Users\\Diego\\Devel\\myapp> dotnet run\nHello World!\nPS C:\\Users\\Diego\\Devel\\myapp>\n```\n\n**Publish the application with native installer for `win10-x64` runtime**\n\n```powershell\nPS C:\\Users\\Diego\\Devel\\myapp> dotnet publish -c Release -r win10-x64\n```\nThe application should be published to `bin/Release/netcoreapp2.1/win10-x64/publish/`\n\n**Download `warp-packer`**\n\nIf you save `warp-packer` in a directory in your PATH, you only need to download it once.\n```powershell\nPS C:\\Users\\Diego\\Devel\\myapp> [Net.ServicePointManager]::SecurityProtocol = \"tls12, tls11, tls\" ; Invoke-WebRequest https://github.com/dgiagio/warp/releases/download/v0.3.0/windows-x64.warp-packer.exe -OutFile warp-packer.exe\n```\n\n**Create your self-contained application**\n\n```powershell\nPS C:\\Users\\Diego\\Devel\\myapp> .\\warp-packer --arch windows-x64 --input_dir bin/Release/netcoreapp2.1/win10-x64/publish --exec myapp.exe --output myapp.exe\n```\n\n**Run your self-contained application**\n\n```powershell\nPS C:\\Users\\Diego\\Devel\\myapp> .\\myapp.exe\nHello World!\nPS C:\\Users\\Diego\\Devel\\myapp>\n```\n\n**More information about your self-contained application**\n\n```powershell\nPS C:\\Users\\Diego\\Devel\\myapp> \"{0:N2} MB\" -f ((Get-Item myapp.exe).Length / 1MB)\n28.51 MB\n```\n\n## Quickstart with Java\n### Linux\n\n**Create a Hello World application**\n\nCreate `HelloWorld.java`: \n\n```java\n// HelloWorld.java\npublic final class HelloWorld {\n  public static void main(final String[] args) {\n    System.out.println(\"Hello, world. \");\n  }\n}\n```\n\nTest that it works: \n\n```bash\n$ javac HelloWorld.java\n$ java HelloWorld\nHello, world.\n```\n\nWe need to bundle this as a `.jar`:\n\n```bash\n$ jar cvfe app.jar HelloWorld HelloWorld.class\nadded manifest\nadding: HelloWorld.class(in = 428) (out= 290)(deflated 32%)\n$ java -jar app.jar\nHello, world.\n```\n\n**Download a JRE**\n\nThere are prebuilt JREs over on [AdoptOpenJDK](https://adoptopenjdk.net). \n\nHere we use JRE 8:\n\n```\nwget -N https://github.com/AdoptOpenJDK/openjdk8-binaries/releases/download/jdk8u202-b08/OpenJDK8U-jre_x64_linux_hotspot_8u202b08.tar.gz\n```\n\nUnpack it: \n\n```\ntar -xvf OpenJDK8U-jre_x64_linux_hotspot_8u202b08.tar.gz\n```\n\n**Create a bundle**\n\nWe need to create a folder containing: our compiled code, the JRE and a launch script. \n\n```\nmkdir bundle\ncp -r ./jdk8u202-b08-jre ./bundle/jre\ncp app.jar ./bundle/app.jar\ntouch bundle/run.sh\nchmod +x ./bundle/run.sh \n```\n\nFinally, we to write `run.sh`. This script will run our `.jar` using the bundled JRE.\n\nHere are the contents of `./bundle/run.sh`:\n\n```bash\n#!/usr/bin/env bash\n\nHERE=${BASH_SOURCE%/*}\n\n\"$HERE/jre/bin/java\" -jar \"$HERE/app.jar\" \"$@\"\n```\n\nTest the bundle: \n\n```bash\n$ ./bundle/run.sh \nHello, world. \n```\n\n**Download `warp-packer`**\n\nIf you save `warp-packer` in a directory in your PATH, you only need to download it once.\n\n```bash\n$ wget -O warp-packer https://github.com/dgiagio/warp/releases/download/v0.3.0/linux-x64.warp-packer\n$ chmod +x ./warp-packer\n```\n\n**Create your self-contained application**\n\n```bash\n$ ./warp-packer --arch linux-x64 --input_dir bundle --exec run.sh --output app.bin\n$ chmod +x app.bin\n```\n\n**Run your self-contained application**\n\n```bash\n$ ./app.bin \nHello, world. \n```\n\n## How it works\nWarp is a multi-platform tool written in Rust and is comprised of two programs: `warp-runner` and `warp-packer`.\n\nThe final self-contained single binary application consists of two parts: 1) runner and 2) the compressed target application executable and dependencies.\n\n<img src=\"https://image.ibb.co/bBe669/warp_app_binary.png\" width=\"272\">\n\n`warp-runner` is a stub application that knows how to find the compressed payload within its own binary, perform extraction to a local cache and execute the target application.\n\nThe extraction process only happens the first time the application is ran, or when the self-contained application binary is updated.\n\n`warp-packer` is a CLI application that's used to create the self-contained application binary by downloading the matching `warp-runner` for the chosen platform, compressing the target application and its dependencies, and generating the final self-contained binary.\n\n### Performance\nThe performance characteristics of the generated self-contained application is roughly the same of original application, except for the first time it's ran as the target application and its dependencies have to be decompressed to a local cache.\n\n### Packages cache location\n- Linux: `$HOME/.local/share/warp/packages`\n- macOS: `$HOME/Library/Application Support/warp/packges`\n- Windows: `%LOCALAPPDATA%\\warp\\packages`\n\n### Runners cache location\n- Linux: `$HOME/.local/share/warp/runners`\n- macOS: `$HOME/Library/Application Support/warp/runners`\n- Windows: `%LOCALAPPDATA%\\warp\\runners`\n\n## Authors\n- Diego Giagio `<diego@giagio.com>`\n\n## License\nThis project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details\n\n## Who is Using Warp? \n\n * Buckaroo, the C++ package manager https://github.com/loopperfect/buckaroo\n * Buck, the build system https://github.com/njlr/buck-warp\n"
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "warp-packer",
          "type": "tree",
          "content": null
        },
        {
          "name": "warp-runner",
          "type": "tree",
          "content": null
        },
        {
          "name": "warp.iml",
          "type": "blob",
          "size": 1.5419921875,
          "content": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<module type=\"RUST_MODULE\" version=\"4\">\r\n  <component name=\"NewModuleRootManager\" inherit-compiler-output=\"true\">\r\n    <exclude-output />\r\n    <content url=\"file://$MODULE_DIR$\">\r\n      <sourceFolder url=\"file://$MODULE_DIR$/src\" isTestSource=\"false\" />\r\n      <sourceFolder url=\"file://$MODULE_DIR$/examples\" isTestSource=\"false\" />\r\n      <sourceFolder url=\"file://$MODULE_DIR$/tests\" isTestSource=\"true\" />\r\n      <sourceFolder url=\"file://$MODULE_DIR$/benches\" isTestSource=\"true\" />\r\n      <sourceFolder url=\"file://$MODULE_DIR$/warp-packer/src\" isTestSource=\"false\" />\r\n      <sourceFolder url=\"file://$MODULE_DIR$/warp-packer/examples\" isTestSource=\"false\" />\r\n      <sourceFolder url=\"file://$MODULE_DIR$/warp-packer/tests\" isTestSource=\"true\" />\r\n      <sourceFolder url=\"file://$MODULE_DIR$/warp-packer/benches\" isTestSource=\"true\" />\r\n      <sourceFolder url=\"file://$MODULE_DIR$/warp-runner/src\" isTestSource=\"false\" />\r\n      <sourceFolder url=\"file://$MODULE_DIR$/warp-runner/examples\" isTestSource=\"false\" />\r\n      <sourceFolder url=\"file://$MODULE_DIR$/warp-runner/tests\" isTestSource=\"true\" />\r\n      <sourceFolder url=\"file://$MODULE_DIR$/warp-runner/benches\" isTestSource=\"true\" />\r\n      <excludeFolder url=\"file://$MODULE_DIR$/target\" />\r\n      <excludeFolder url=\"file://$MODULE_DIR$/warp-packer/target\" />\r\n      <excludeFolder url=\"file://$MODULE_DIR$/warp-runner/target\" />\r\n    </content>\r\n    <orderEntry type=\"inheritedJdk\" />\r\n    <orderEntry type=\"sourceFolder\" forTests=\"false\" />\r\n  </component>\r\n</module>"
        }
      ]
    }
  ]
}