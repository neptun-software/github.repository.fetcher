{
  "metadata": {
    "timestamp": 1736709254699,
    "page": 580,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjU4MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "BurntSushi/rust-csv",
      "stars": 1745,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.0859375,
          "content": ".*.swp\ndoc\ntags\nexamples/ss10pusa.csv\nbuild\ntarget\nCargo.lock\nscratch*\nbench_large/huge\n"
        },
        {
          "name": "COPYING",
          "type": "blob",
          "size": 0.123046875,
          "content": "This project is dual-licensed under the Unlicense and MIT licenses.\n\nYou may use this code under the terms of either license.\n"
        },
        {
          "name": "Cargo.toml",
          "type": "blob",
          "size": 0.9228515625,
          "content": "[package]\nname = \"csv\"\nversion = \"1.3.1\"  #:version\nauthors = [\"Andrew Gallant <jamslam@gmail.com>\"]\ndescription = \"Fast CSV parsing with support for serde.\"\ndocumentation = \"https://docs.rs/csv\"\nhomepage = \"https://github.com/BurntSushi/rust-csv\"\nrepository = \"https://github.com/BurntSushi/rust-csv\"\nreadme = \"README.md\"\nkeywords = [\"csv\", \"comma\", \"parser\", \"delimited\", \"serde\"]\nlicense = \"Unlicense/MIT\"\ncategories = [\"encoding\", \"parser-implementations\"]\nexclude = [\"/.github\", \"/ci/*\", \"/scripts/*\"]\nedition = \"2021\"\nrust-version = \"1.73\"\n\n[workspace]\nmembers = [\"csv-core\", \"csv-index\"]\n\n[lib]\nbench = false\n\n[dependencies]\ncsv-core = { path = \"csv-core\", version = \"0.1.11\" }\nitoa = \"1\"\nryu = \"1\"\nserde = \"1.0.55\"\n\n[dev-dependencies]\nbstr = { version = \"1.7.0\", default-features = false, features = [\"alloc\", \"serde\"] }\nserde = { version = \"1.0.55\", features = [\"derive\"] }\n\n[profile.release]\ndebug = true\n\n[profile.bench]\ndebug = true\n"
        },
        {
          "name": "ISSUE_TEMPLATE.md",
          "type": "blob",
          "size": 1.27734375,
          "content": "Thank you for taking the time to file a bug report. The following describes\nsome guidelines to creating a minimally useful ticket.\n\nAbove all else: do not describe your problem, **SHOW** your problem.\n\n#### What version of the `csv` crate are you using?\n\nReplace this text with the version. (The version can be found in your\nCargo.lock.)\n\n#### Briefly describe the question, bug or feature request.\n\nReplace this text with a description.\n\n#### Include a complete program demonstrating a problem.\n\nWhether you're asking for a feature, filing a bug or just asking a question,\nthis section should almost always include some kind of code that you have\nwritten. The code provided should be able to be compiled by others and should\nbe as feasibly small as possible.\n\nIf you're reporting a bug, then the code should exhibit some undesirable\ncharacteristic.\n\nIf you're asking a question, then the code should represent what you've tried\nso far.\n\nIf you're requesting a feature, then provide code that does the closest\npossible thing to what you're requesting, if possible.\n\n#### What is the observed behavior of the code above?\n\nReplace this text with the output of the program.\n\n#### What is the expected or desired behavior of the code above?\n\nReplace this text with the expected or desired output of the program.\n"
        },
        {
          "name": "LICENSE-MIT",
          "type": "blob",
          "size": 1.0556640625,
          "content": "The MIT License (MIT)\n\nCopyright (c) 2015 Andrew Gallant\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 2.5703125,
          "content": "csv\n===\nA fast and flexible CSV reader and writer for Rust, with support for Serde.\n\n[![Build status](https://github.com/BurntSushi/rust-csv/workflows/ci/badge.svg)](https://github.com/BurntSushi/rust-csv/actions)\n[![crates.io](https://img.shields.io/crates/v/csv.svg)](https://crates.io/crates/csv)\n\nDual-licensed under MIT or the [UNLICENSE](http://unlicense.org).\n\n\n### Documentation\n\nhttps://docs.rs/csv\n\nIf you're new to Rust, the\n[tutorial](https://docs.rs/csv/1.*/csv/tutorial/index.html)\nis a good place to start.\n\n\n### Usage\n\nTo bring this crate into your repository, either add `csv` to your\n`Cargo.toml`, or run `cargo add csv`.\n\n\n### Example\n\nThis example shows how to read CSV data from stdin and print each record to\nstdout.\n\nThere are more examples in the\n[cookbook](https://docs.rs/csv/1.*/csv/cookbook/index.html).\n\n```rust\nuse std::{error::Error, io, process};\n\nfn example() -> Result<(), Box<dyn Error>> {\n    // Build the CSV reader and iterate over each record.\n    let mut rdr = csv::Reader::from_reader(io::stdin());\n    for result in rdr.records() {\n        // The iterator yields Result<StringRecord, Error>, so we check the\n        // error here.\n        let record = result?;\n        println!(\"{:?}\", record);\n    }\n    Ok(())\n}\n\nfn main() {\n    if let Err(err) = example() {\n        println!(\"error running example: {}\", err);\n        process::exit(1);\n    }\n}\n```\n\nThe above example can be run like so:\n\n```text\n$ git clone git://github.com/BurntSushi/rust-csv\n$ cd rust-csv\n$ cargo run --example cookbook-read-basic < examples/data/smallpop.csv\n```\n\n### Example with Serde\n\nThis example shows how to read CSV data from stdin into your own custom struct.\nBy default, the member names of the struct are matched with the values in the\nheader record of your CSV data.\n\n```rust\nuse std::{error::Error, io, process};\n\n#[derive(Debug, serde::Deserialize)]\nstruct Record {\n    city: String,\n    region: String,\n    country: String,\n    population: Option<u64>,\n}\n\nfn example() -> Result<(), Box<dyn Error>> {\n    let mut rdr = csv::Reader::from_reader(io::stdin());\n    for result in rdr.deserialize() {\n        // Notice that we need to provide a type hint for automatic\n        // deserialization.\n        let record: Record = result?;\n        println!(\"{:?}\", record);\n    }\n    Ok(())\n}\n\nfn main() {\n    if let Err(err) = example() {\n        println!(\"error running example: {}\", err);\n        process::exit(1);\n    }\n}\n```\n\nThe above example can be run like so:\n\n```\n$ git clone git://github.com/BurntSushi/rust-csv\n$ cd rust-csv\n$ cargo run --example cookbook-read-serde < examples/data/smallpop.csv\n```\n"
        },
        {
          "name": "UNLICENSE",
          "type": "blob",
          "size": 1.1826171875,
          "content": "This is free and unencumbered software released into the public domain.\n\nAnyone is free to copy, modify, publish, use, compile, sell, or\ndistribute this software, either in source code form or as a compiled\nbinary, for any purpose, commercial or non-commercial, and by any\nmeans.\n\nIn jurisdictions that recognize copyright laws, the author or authors\nof this software dedicate any and all copyright interest in the\nsoftware to the public domain. We make this dedication for the benefit\nof the public at large and to the detriment of our heirs and\nsuccessors. We intend this dedication to be an overt act of\nrelinquishment in perpetuity of all present and future rights to this\nsoftware under copyright law.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR\nOTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,\nARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\nOTHER DEALINGS IN THE SOFTWARE.\n\nFor more information, please refer to <http://unlicense.org/>\n"
        },
        {
          "name": "benches",
          "type": "tree",
          "content": null
        },
        {
          "name": "ci",
          "type": "tree",
          "content": null
        },
        {
          "name": "csv-core",
          "type": "tree",
          "content": null
        },
        {
          "name": "csv-index",
          "type": "tree",
          "content": null
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "rustfmt.toml",
          "type": "blob",
          "size": 0.04296875,
          "content": "max_width = 79\nuse_small_heuristics = \"max\"\n"
        },
        {
          "name": "scripts",
          "type": "tree",
          "content": null
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}