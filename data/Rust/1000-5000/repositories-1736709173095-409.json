{
  "metadata": {
    "timestamp": 1736709173095,
    "page": 409,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjQxMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "mikaelmello/inquire",
      "stars": 2132,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".cargo",
          "type": "tree",
          "content": null
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.0185546875,
          "content": "/target\nCargo.lock\n"
        },
        {
          "name": ".idea",
          "type": "tree",
          "content": null
        },
        {
          "name": ".vscode",
          "type": "tree",
          "content": null
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 20.77734375,
          "content": "# Changelog\n\n<!-- next-header -->\n\n## [Unreleased] <!-- ReleaseDate -->\n\n- Fix autocomplete suggestions not being updated after a suggestion is accepted. Thanks @moritz-hoelting and @istudyatuni for reporting and fixing it!\n- Fix incorrect cursor placement when inputting CJK characters. Thanks @phostann (#270) for reporting it!\n- Removed unused dependency (newline-converter). Thanks @jonassmedegaard (#267) for catching it!\n\n## [0.7.5] - 2024-04-23\n\n- Fix user-provided ANSI escape codes from being removed when rendering.\n  - Introduced on 0.7.0, this regression was making it impossible to have colorised text inside the prompt.\n  - Now ANSI escape codes are properly emitted when rendering the prompt in the terminal.\n\n## [0.7.4] - 2024-03-25\n\n- Fix unexpected behaviors of `keep_filter` option in MultiSelect prompts:\n  - Filter input is now correcly getting reset **only when** `keep_filter == false`.\n  - When the filter input is reset, the list of options is now correctly reset as well. Thanks @Swivelgames for reporting [#238](https://github.com/mikaelmello/inquire/issues/238).\n\n## [0.7.3] - 2024-03-21\n\n- Fix cursor occasionally blinking in unexpected places.\n\n## [0.7.2] - 2024-03-17\n\n- Pressing Ctrl+D now cancels the prompt. Thanks @mikecvet for the PR!\n- Add support for `h` and `l` bindings when vim_mode is enabled on MultiSelect prompts, clearing or selecting all options respectively. Thanks @afh for the PR!\n- Fix render issue [#233](https://github.com/mikaelmello/inquire/issues/233) where cursor positioning at the end of a prompt was incorrect. Thanks @msrd0 and @Sydonian for reporting!\n\n## [0.7.1] - 2024-03-10\n\n- Fix render issue [#228](https://github.com/mikaelmello/inquire/pull/228) when using `console` crate as the terminal backend. Thanks @maospr for reporting.\n\n## [0.7.0] - 2024-02-24\n\n### Breaking Changes\n\n- The Select and Multiselect Filter now scores input and is now expected to return an `Option<i64>`, making it possible to order/rank the list of options. [#176](https://github.com/mikaelmello/inquire/pull/176)\n  `None`: Will not be displayed in the list of options.\n  `Some(score)`: score determines the order of options, higher score, higher on the list of options.\n- Improved user experience on Password prompts. When there is a validation error, the input is cleared if the password is rendered using the `Hidden` display mode, matching the user expectation of having to write the password from scratch again. Thanks to @CM-IV for the questions on #149!\n- Allow lifetime customization of RenderConfig. [#101](https://github.com/mikaelmello/inquire/pull/101). Thanks to @arturfast for the suggestion [#95](https://github.com/mikaelmello/inquire/issues/95).\n- Implement fuzzy search as default on Select and MultiSelect prompts. [#176](https://github.com/mikaelmello/inquire/pull/176)\n- Revamped keybindings for DateSelect.\n\n### Features\n\n- Add one-liner helpers for quick scripts. [#144](https://github.com/mikaelmello/inquire/pull/144).\n- Add new option on MultiSelect prompts to set all options to be selected by default. Thanks to @conikeec for the suggestion (#151)!\n- Add new option on Select/MultiSelect prompts allowing to reset selection to the first item on filter-input changes. [#176](https://github.com/mikaelmello/inquire/pull/176)\n- Emacs-like keybindings added where applicable:\n  - Ctrl-p/Ctrl-n for up/down\n  - Ctrl-b/Ctrl-f for left/right\n  - Ctrl-j/Ctrl-g for enter/cancel\n- Vim keybindings are always supported in DateSelect prompts.\n- Added 'with_starting_filter_input' to both Select and MultiSelect, which allows for setting an initial value to the filter section of the prompt.\n- Added starting_input for CustomType. [#194](https://github.com/mikaelmello/inquire/pull/194)\n- Added 'without_filtering' to both Select and MultiSelect, useful when you want to simplify the UX if the filter does not add any value, such as when the list is already short.\n- Added 'with_answered_prompt_prefix' to RenderConfig to allow customization of answered prompt prefix.\n- Improved rendering, with optimizations on incremental rendering and terminal resizing.\n\n### Fixes\n\n- Fixed typos in the code's comments.\n- Fixed issue where inquire, using termion, would crash when receiving piped inputs.\n\n### Dependency changes (some breaking)\n\n- Upgraded underlying `termion` crate from v1.5 to v2.0.\n- Upgraded underlying `bitflags` from v1 to v2, which affects the `Attributes` and `KeyModifiers` crates. If you use any of bitflag's methods directly, you might be affected, refer to the [bitflags changelog](https://github.com/bitflags/bitflags/releases/tag/2.0.0) for more information.\n- Removed `thiserror` dependency in favor of implementing `InquireError` by hand. [#146](https://github.com/mikaelmello/inquire/issues/146)\n- Raised MSRV to 1.66 due to requirements in downstream dependencies.\n- MSRV is now explicitly set in the package definition.\n- Replaced `lazy_static` with `once_cell` as `once_cell::sync::Lazy` is being standardized and `lazy_static` is not actively maintained anymore.\n- Added `fuzzy-matcher` as an optional dependency for fuzzy filtering in Select and MultiSelect prompts [#176](https://github.com/mikaelmello/inquire/pull/176)\n\n## [0.6.2] - 2023-05-07\n\n- Allow usage of ANSI escape codes in prompts. [#136](https://github.com/mikaelmello/inquire/pull/136). Thanks to [@JimLynchCodes](https://github.com/JimLynchCodes) for reporting on [#135](https://github.com/mikaelmello/inquire/issues/135).\n\n## [0.6.1] - 2023-04-08\n\n- Fix incorrect highlighting of lists when filtered. [#110](https://github.com/mikaelmello/inquire/pull/110). Thanks to [@prime31](https://github.com/prime31) for reporting on [#106](https://github.com/mikaelmello/inquire/issues/106).\n\n## [0.6.0] - 2023-03-03\n\n### Breaking Changes\n\n- Selected option can now be styled independently of other options through `RenderConfig::with_selected_option()`.\n- Now selected options are highlighted cyan by default.\n- Output dialogs on `stderr` instead of `stdout` [#89](https://github.com/mikaelmello/inquire/pull/89).\n- New Minimum Supported Rust Version: 1.58.1.\n\n## [0.5.3] - 2023-01-09\n\n- Addition of `with_starting_date(NaiveDate)` to `DateSelect` prompts.\n  - Equivalent to `with_default(NaiveDate)`, but with a more descriptive name.\n\n## [0.5.2] - 2022-11-01\n\n- Fixed typo in the default error message when a password confirmation does not match. Thanks to @woodruffw for the PR! [#79](https://github.com/mikaelmello/inquire/pull/79)\n  - Releases containing the typo: v0.5.0 and v0.5.1.\n\n## [0.5.1] - 2022-10-31\n\n- Removed use of `bool::then_some` feature to keep minimum supported Rust version on 1.56.0.\n\n## [0.5.0] - 2022-10-31\n\n### Breaking Changes\n\n**`Password` prompts now enable a secondary confirmation prompt by default:**\n\n- Added support for password confirmation, which can be oupted-out of by adding the `without_confirmation()` method into the `Password` builder chain. Thanks to @hampuslidin for the PR! [#73](https://github.com/mikaelmello/inquire/pull/73)\n\n## [0.4.0] - 2022-09-27\n\n### Breaking Changes\n\n**Multiple changes to the `CustomType` prompt:**\n\n- Added support for validators, separating concerns between parsing and validating parsed values.\n- Decoupled default value formatting from the default value property. Now you can set default values without a specific formatter to accompany them.\n- Input is not cleared anymore when the parsing or validation fails.\n\n**New autocompletion mechanism for `Text` prompts**\n\n- Existing methods still work, you just have to update `with_suggester` calls to `with_autocomplete`.\n- To know more about the new possibilities, check the updated documentation on the repository's README.\n\n### Other changes\n\n- Added shorthand method `rgb(r: u8, g: u8, b: u8)` to create a `Color` struct from RGB components. Thanks to @tpoliaw for the PR! [#73](https://github.com/mikaelmello/inquire/pull/73)\n\n## [0.3.0] - 2022-08-19\n\n### Breaking Changes\n\nFeatures #1 to #4 are all breaking changes and could break the compilation of your program.\n\nFix #2 represents a change in usability and might be an unexpected behavior.\n\n### Features\n\n#### 1. Completer\n\n`Completer` for `Text` prompts, allowing users to auto-update their text input by pressing `tab` and not having to navigate through a suggestion list.\n\nIt takes the current input and return an optional suggestion. If any, the prompter will replace the current input with the received suggestion. `Completer` is an alias for `&'a dyn Fn(&str) -> Result<Option<String>, CustomUserError>`.\n\n_The auto-completion API will be revamped for v0.4.0, watch [#69](https://github.com/mikaelmello/inquire/pull/69)._\n\n---\n\n#### 2. Support for custom prompt prefix in finished prompts.\n\nAdded `answered_prompt_prefix` configuration on `RenderConfig`, allowing users to set custom prefixes (e.g. a check mark) to prompts that have already been answered.\n\nAdditionally, prompts that have been answered are now differed by a `>` prefix instead of the usual `?`.\n\nCheers to @href for the suggestion! [#44](https://github.com/mikaelmello/inquire/pull/44)\n\n---\n\n#### 3. User-provided operations can be fallible.\n\nInput validation, suggestions and completions are now fallible operations.\n\nThe return type of validators has been changed to `Result<Validation, CustomUserError>`. This means that validating the input can now be a fallible operation. The docs contain more thorough explanations and full-featured examples.\n\n- Successful executions of the validator should return a variant of the `Validation` enum, which can be either `Valid` or `Invalid(ErrorMessage)`.\n- Unsuccessful executions return a `CustomUserError` type, which is an alias for `Box<dyn std::error::Error + Send + Sync + 'static>`.\n\nThe return type of suggesters has also been changed to allow fallible executions. The return type in successful executions continues to be `Vec<String>`, while `CustomUserError` is used with errors.\n\n---\n\n#### 4. Validators are traits instead of closures.\n\nAll builtin validators have been turned into traits, with structs instead of macros as implementations.\n\nThis change makes it easier to share the validators throughout the code, especially if these carry their own owned data. For example, consider a validator that uses a compiled regular expression to verify the input. That validator can now be built as a new-type struct that encapsulates the regex.\n\nClosures can still be used as before, but may not require to pass the argument type explicitly. The previous macros are now simply shorthands for the constructors of builtin validators.\n\n### Fixes\n\n- Fix a broken link in the `struct.Text` documentation.\n- Suggestions are now always loaded at the start of a `Text` prompt.\n  - Previously, suggestions were only loaded and displayed if the `Text` prompt was created with a pre-existing input value or after the user entered any input.\n  - Now, even if the prompt is started without any input and the user hasn't done anything, suggestions are displayed.\n\n### Changes\n\n- Update `crossterm` and `console` to their latest versions.\n\n## [0.2.1] - 2021-10-01\n\n### Features\n\n- Add `initial_value` property to `Text` prompts, which sets an initial value for the prompt's text input. Huge thanks to [@irevoire](https://github.com/irevoire) for the suggestion **and** implementation. [#34](https://github.com/mikaelmello/inquire/pull/34).\n\n### Internals\n\n- Multiple changes to fix general warnings appearing throughout the code.\n\n## [0.2.0] - 2021-09-14\n\n### Features\n\n- Add `inquire::set_global_render_config` method to set a global RenderConfig object to be used as the default one for all prompts created after the call.\n- Add [KEY_BINDINGS.md](KEY_BINDINGS.md) to register all key bindings registered by `inquire` prompts.\n\n### Breaking changes\n\n- `RenderConfig` was made `Copy`-able and prompts now contain a `RenderConfig` field where it previously held a `&'a RenderConfig`. Consequently, `with_render_config()` methods now accept a `RenderConfig` argument instead of `&'a RenderConfig`.\n\n## [0.1.0] - 2021-09-14\n\nNo changes in this version.\n\nThis is a bump to v0.1.0 as per @jam1garner's advice on the Virtual RustConf Discord server.\n\nThe library is already featureful enough to warrant a higher version number, bumping us to a minor release while we are still on our path to stabilization.\n\n## [0.0.11] - 2021-09-06\n\n### Features\n\n- Add [`Editor`](https://docs.rs/inquire/0.0.11/inquire/prompts/editor/struct.Editor.html) prompt.\n- Add support to use `console` or `termion` as the library to handle terminals while keeping `crossterm` as the default choice.\n- Canceling the prompt by pressing `ESC` is now a different behavior than interrupting the prompt by pressing `Ctrl+C`.\n  - If the prompt is canceled, the final prompt render indicates to the user that it was canceled via a `<canceled>` text, which is customizable via RenderConfig, and the prompt method returns `Err(InquireError::OperationCanceled)`.\n  - If the prompt is interrupted, the only clean-up action done is restoring the cursor position, and the prompt method returns `Err(InquireError::OperationInterrupted)`.\n- Add a `prompt_skippable` method for all prompts.\n  - This method is intended for flows where the user skipping/cancelling the prompt - by pressing ESC - is considered normal behavior. In this case, it does not return `Err(InquireError::OperationCanceled)`, but `Ok(None)`. Meanwhile, if the user does submit an answer, the method wraps the return type with `Some`.\n\n### Improvements\n\n- Removed need to add `use inquire::validator::InquireLength` when using one of the length-related built-in validators.\n- Cursor should not ficker anymore in wrong positions on ~~Windows~~ slower terminals.\n- Documentation on the `Color` enum used for render configuration has been improved.\n\n### Fixes\n\n- Fix dependencies the crate had on macros provided by the `builtin_validators` feature, making it now compile when the feature is not turned on.\n\n## [0.0.10] - 2021-08-29\n\n### Features\n\n- Use native terminal cursors in text inputs by default.\n- Use native terminal cursor on date prompts when an optional style sheet for the selected cursor token was defined as `None`. The default behavior is still a custom style sheet which highlights the two columns pertaining to a date, instead of using a native cursor which can only highlight one column.\n- Respect NO_COLOR environment variable when prompt uses the default render configuration.\n\n### Fixes\n\n- By using a new method to identify the length of the rendered prompt, we avoid possible rendering errors (edge cases) when a string can not render into a single line in the terminal due to a smaller width. Inner calculations could previously predict that the rendered string would fit, by considering that 1 grapheme = 1 column width, but this is not true for e.g. emojis. Now we use unicode_width to fix this behavior.\n- Fixed case where Select/MultiSelect prompts were panicking when a user pressed the down arrow on an empty list, which happens when a filter input does not match any options. #30\n- Fixed incorrect indexes on the output of MultiSelect prompts, where the indexes inside a `ListOption` struct were relative to the output instead of the original input vector. #31\n- Fixed case where IO errors due to not finding a tty devices were not being caught and transformed to `InquireError::NotTTY`. #28\n\n## [0.0.9] - 2021-08-28\n\n### General\n\n- Improve docs on the differences between `raw_prompt` and `prompt` on Select and MultiSelect prompts.\n- Bump version of `crossterm` dependency\n\n### Fixes\n\n- Regression introduced on v0.0.8 where select prompts were panicking when user pressed enter while no options were displayed (due to filter input). Tracked by #29 and tests were added for this to not happen again.\n\n## [0.0.8] - 2021-08-25\n\n### Features\n\n- **Password display toggle**: By enabling this option in `Password` prompts via `with_display_toggle_enabled()`, the application user can choose to display the current text input for the password by pressing `Ctrl+R`, and hide it back by pressing the hotkey again. #18\n- **Render mask of password input**: `Password` prompts now support another render mode of the text input. Before, the only behavior was to not render anything about the current password input. Now, if the developer so chooses, they can activate the `Masked` mode where the current text input will be masked with special characters such as `'*'`. #19\n- **PageUp, PageDown, Home and End hotkeys**: PageUp and PageDown are now supported in `Select`, `MultiSelect` and `Text` (suggestions list) prompts, where they go a page up or down in the current list. Also, for `Select` and `MultiSelect` prompts, the Home and End keys were mapped to go to the start or end of the list, respectively. #17\n- **Indication that list is scrollable**: Now option lists, present in `Select`, `MultiSelect` and `Text` prompts, indicate whether there are more options other than the ones currently displayed. Little arrows are displayed at the top or bottom of the list indicating to which positions the user can scroll. #8\n- **Generic option types for Select and MultiSelect prompts**: Now, `Select` and `MultiSelect` prompts accept any type of options as input, allowing developers to pass a vector of owned objects and get back the full object picked by the user. #9\n\n### Fixes\n\n- **Handling of new-line characters in user-provided strings**: When putting `\\n` on strings such as prompt messages, the library previously did not render it very well and did not account for it when cleaning the current prompt. This is fixed and you are free to create multi-line prompts! #15\n- **Lines larger than terminal width broke rendering**: When lines that were larger than the terminal width were rendered, it caused the internal line counter (used to clean the prompt) to be off, leading to buggy behavior. This was fixed by retrieving the terminal size at the start of the prompt. #21\n\n## [0.0.7] - 2021-08-20\n\n### Features\n\n- Add possibility to set custom rendering config, allowing users to set:\n  - Custom colors\n  - Custom prefixes for several prompts\n  - Custom checkboxes\n- Add \"placeholder\" feature for prompts with text input\n\n## [0.0.6] - 2021-07-26\n\n- Add [previously non-existing] documentation.\n- Add [CustomType](https://github.com/mikaelmello/inquire#customtype) prompt\n- Add revamped auto-completion support for Text prompts\n\n## [0.0.5] - 2021-07-19\n\n- All function arguments now accept closures by having their type changed to `&dyn Fn`.\n- Improved input UX\n  - Cursor added for better editing experience\n  - Features/shortcuts added: Ctrl+Left, Ctrl+Right, Home, End, Delete, Ctrl+Delete\n\n## [0.0.4] - 2021-07-14\n\n- Add a custom error enum `InquireError`, improving error handling for library users.\n- Improve support for validator functions, allowing the use of closures.\n- Change the terminal back-end from termion to crossterm, adding Windows support for this library.\n\n## [0.0.3] - 2021-07-07\n\n- Reduce package footprint\n- Add custom parser option to Confirm prompt\n- Add DateSelect prompt\n\n## [History]\n\n- Wasn't documented :)\n\n<!-- next-url -->\n\n[unreleased]: https://github.com/mikaelmello/inquire/compare/v0.7.5...HEAD\n[0.7.5]: https://github.com/mikaelmello/inquire/compare/v0.7.4...v0.7.5\n[0.7.4]: https://github.com/mikaelmello/inquire/compare/v0.7.3...v0.7.4\n[0.7.3]: https://github.com/mikaelmello/inquire/compare/v0.7.2...v0.7.3\n[0.7.2]: https://github.com/mikaelmello/inquire/compare/v0.7.1...v0.7.2\n[0.7.1]: https://github.com/mikaelmello/inquire/compare/v0.7.0...v0.7.1\n[0.7.0]: https://github.com/mikaelmello/inquire/compare/v0.6.2...v0.7.0\n[0.6.2]: https://github.com/mikaelmello/inquire/compare/v0.6.1...v0.6.2\n[0.6.1]: https://github.com/mikaelmello/inquire/compare/v0.6.0...v0.6.1\n[0.6.0]: https://github.com/mikaelmello/inquire/compare/v0.5.3...v0.6.0\n[0.5.3]: https://github.com/mikaelmello/inquire/compare/v0.5.2...v0.5.3\n[0.5.2]: https://github.com/mikaelmello/inquire/compare/v0.5.1...v0.5.2\n[0.5.1]: https://github.com/mikaelmello/inquire/compare/v0.5.0...v0.5.1\n[0.5.0]: https://github.com/mikaelmello/inquire/compare/v0.4.0...v0.5.0\n[0.4.0]: https://github.com/mikaelmello/inquire/compare/v0.3.0...v0.4.0\n[0.3.0]: https://github.com/mikaelmello/inquire/compare/v0.2.1...v0.3.0\n[0.2.1]: https://github.com/mikaelmello/inquire/compare/v0.2.0...v0.2.1\n[0.2.0]: https://github.com/mikaelmello/inquire/compare/v0.1.0...v0.2.0\n[0.1.0]: https://github.com/mikaelmello/inquire/compare/v0.0.11...v0.1.0\n[0.0.11]: https://github.com/mikaelmello/inquire/compare/v0.0.10...v0.0.11\n[0.0.10]: https://github.com/mikaelmello/inquire/compare/v0.0.9...v0.0.10\n[0.0.9]: https://github.com/mikaelmello/inquire/compare/v0.0.8...v0.0.9\n[0.0.8]: https://github.com/mikaelmello/inquire/compare/v0.0.7...v0.0.8\n[0.0.7]: https://github.com/mikaelmello/inquire/compare/v0.0.6...v0.0.7\n[0.0.6]: https://github.com/mikaelmello/inquire/compare/v0.0.5...v0.0.6\n[0.0.5]: https://github.com/mikaelmello/inquire/compare/v0.0.4...v0.0.5\n[0.0.4]: https://github.com/mikaelmello/inquire/compare/v0.0.3...v0.0.4\n[0.0.3]: https://github.com/mikaelmello/inquire/compare/v0.0.2...v0.0.3\n[history]: https://github.com/mikaelmello/inquire/compare/11e6f3b961477fbc19adc3c5322ff159c1f606f5...v0.0.2\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 3.6806640625,
          "content": "# Contributing\n\nWhen contributing to this repository, please first discuss the change you wish to make via issue,\nemail, or any other method with me before making a change, if the change is not trivial.\n\nThis is my first project in Rust and I am pretty sure there are many improvements to be made in a\nlot of areas, such as project structure, programming patterns, a simplified API, better tests, etc.\n\nBecause of that, I'd like to actually understand the improvements that are suggested before deciding\nwhether they make sense or not for the project.\n\n## Code of Conduct\n\n### Our Pledge\n\nIn the interest of fostering an open and welcoming environment, we as\ncontributors and maintainers pledge to making participation in our project and\nour community a harassment-free experience for everyone, regardless of age, body\nsize, disability, ethnicity, gender identity and expression, level of experience,\nnationality, personal appearance, race, religion, or sexual identity and\norientation.\n\n### Our Standards\n\nExamples of behavior that contributes to creating a positive environment\ninclude:\n\n* Using welcoming and inclusive language\n* Being respectful of differing viewpoints and experiences\n* Gracefully accepting constructive criticism\n* Focusing on what is best for the community\n* Showing empathy towards other community members\n\nExamples of unacceptable behavior by participants include:\n\n* The use of sexualized language or imagery and unwelcome sexual attention or\nadvances\n* Trolling, insulting/derogatory comments, and personal or political attacks\n* Public or private harassment\n* Publishing others' private information, such as a physical or electronic\n  address, without explicit permission\n* Other conduct which could reasonably be considered inappropriate in a\n  professional setting\n\n### Our Responsibilities\n\nProject maintainers are responsible for clarifying the standards of acceptable\nbehavior and are expected to take appropriate and fair corrective action in\nresponse to any instances of unacceptable behavior.\n\nProject maintainers have the right and responsibility to remove, edit, or\nreject comments, commits, code, wiki edits, issues, and other contributions\nthat are not aligned to this Code of Conduct, or to ban temporarily or\npermanently any contributor for other behaviors that they deem inappropriate,\nthreatening, offensive, or harmful.\n\n### Scope\n\nThis Code of Conduct applies both within project spaces and in public spaces\nwhen an individual is representing the project or its community. Examples of\nrepresenting a project or community include using an official project e-mail\naddress, posting via an official social media account, or acting as an appointed\nrepresentative at an online or offline event. Representation of a project may be\nfurther defined and clarified by project maintainers.\n\n### Enforcement\n\nInstances of abusive, harassing, or otherwise unacceptable behavior may be\nreported by contacting the project team at [INSERT EMAIL ADDRESS]. All\ncomplaints will be reviewed and investigated and will result in a response that\nis deemed necessary and appropriate to the circumstances. The project team is\nobligated to maintain confidentiality with regard to the reporter of an incident.\nFurther details of specific enforcement policies may be posted separately.\n\nProject maintainers who do not follow or enforce the Code of Conduct in good\nfaith may face temporary or permanent repercussions as determined by other\nmembers of the project's leadership.\n\n### Attribution\n\nThis Code of Conduct is adapted from the [Contributor Covenant][homepage], version 1.4,\navailable at [http://contributor-covenant.org/version/1/4][version]\n\n[homepage]: http://contributor-covenant.org\n[version]: http://contributor-covenant.org/version/1/4/\n"
        },
        {
          "name": "Cargo.toml",
          "type": "blob",
          "size": 0.0615234375,
          "content": "[workspace]\nmembers = [\n    \"inquire\",\n    \"inquire-derive\",\n]\n"
        },
        {
          "name": "KEY_BINDINGS.md",
          "type": "blob",
          "size": 8.43359375,
          "content": "# Key Bindings\n\nThis file lists all of the key bindings currently registered by prompts.\n\n## All prompts\n\nThese key bindings may be used with all prompts.\n\n| **command**                      | **description**         |\n| -------------------------------- | ----------------------- |\n| <kbd>enter</kbd>                 | Submit answer.          |\n| <kbd>esc</kbd>                   | Cancel the prompt\\*.    |\n| <kbd>ctrl</kbd>  +  <kbd>c</kbd> | Interrupt the prompt\\*. |\n\n\\* Canceling and interrupting a prompt have two different meanings. Canceling is defined specially for when the end user is allowed to skip a prompt, the library user can then use `prompt_skippable` which wraps the return type into an `Option` and catches the `CanceledOperation` error transforming it into a `Ok(None)` result. Interrupted operations are closer to \"stop-the-world\" operations, where the library user should treat them as termination commands.\n\n## Text Input\n\nThese key bindings may be used with all prompts that ask the user for text input: [`Text`], [`Select`], [`MultiSelect`], [`Confirm`], [`CustomType`] and [`Password`]. The [`Editor`] prompt is not included because it opens a separate text editor for text input.\n\n\n| **command**                         | **description**                                 |\n| ----------------------------------- | ----------------------------------------------- |\n| <kbd>character</kbd>                | Insert the character into the input.            |\n| <kbd>left</kbd>                     | Move the cursor back one character.             |\n| <kbd>right</kbd>                    | Move the cursor forward one character.          |\n| <kbd>ctrl</kbd> + <kbd>left</kbd>   | Move one word to the left of the cursor.        |\n| <kbd>ctrl</kbd> + <kbd>right</kbd>  | Move one word to the right of the cursor.       |\n| <kbd>home</kbd>                     | Move cursor to the start of the line*.          |\n| <kbd>end</kbd>                      | Move cursor to the end of the line*.            |\n| <kbd>backspace</kbd>                | Delete one character to the left of the cursor. |\n| <kbd>delete</kbd>                   | Delete the character at the cursor.             |\n| <kbd>ctrl</kbd> + <kbd>delete</kbd> | Delete one word to the right of the cursor.     |\n\n\\* Key bindings not supported on [`Select`] and [`MultiSelect`] prompts.\n\n## Text Prompts\n\nThese key bindings may be used in [`Text`] prompts.\n\n| **command**          | **description**                                               |\n| -------------------- | ------------------------------------------------------------- |\n| <kbd>enter</kbd>     | Submit the current current text input.                        |\n| <kbd>up</kbd>        | When suggestions are displayed, move cursor one row up.       |\n| <kbd>down</kbd>      | When suggestions are displayed, move cursor one row down.     |\n| <kbd>page up</kbd>   | When suggestions are displayed, move cursor one page up.      |\n| <kbd>page down</kbd> | When suggestions are displayed, move cursor one page down.    |\n| <kbd>tab</kbd>       | Replace current input with the resulting suggestion if any.   |\n| others               | See [Text Input](#text-input) and [All Prompts](#all-prompts) |\n\n## Select Prompts\n\nThese key bindings may be used in [`Select`] prompts.\n\n| **command**          | **description**                                               |\n| -------------------- | ------------------------------------------------------------- |\n| <kbd>enter</kbd>     | Submit the current highlighted option.                        |\n| <kbd>up</kbd>        | Move cursor one row up.                                       |\n| <kbd>down</kbd>      | Move cursor one row down.                                     |\n| <kbd>k</kbd>         | Move cursor one row up when vim mode is enabled.              |\n| <kbd>j</kbd>         | Move cursor one row down when vim mode is enabled.            |\n| <kbd>page up</kbd>   | Move cursor one page up.                                      |\n| <kbd>page down</kbd> | Move cursor one page down.                                    |\n| <kbd>home</kbd>      | Move cursor to the first option.                              |\n| <kbd>end</kbd>       | Move cursor to the last option.                               |\n| others               | See [Text Input](#text-input) and [All Prompts](#all-prompts) |\n\n## MultiSelect Prompts\n\nThese key bindings may be used in [`MultiSelect`] prompts.\n\n| **command**          | **description**                                               |\n| -------------------- | ------------------------------------------------------------- |\n| <kbd>enter</kbd>     | Submit the options currently selected.                        |\n| <kbd>space</kbd>     | Toggle the selection of the current highlighted option.       |\n| <kbd>up</kbd>        | Move cursor one row up.                                       |\n| <kbd>down</kbd>      | Move cursor one row down.                                     |\n| <kbd>k</kbd>         | Move cursor one row up when vim mode is enabled.              |\n| <kbd>j</kbd>         | Move cursor one row down when vim mode is enabled.            |\n| <kbd>page up</kbd>   | Move cursor one page up.                                      |\n| <kbd>page down</kbd> | Move cursor one page down.                                    |\n| <kbd>home</kbd>      | Move cursor to the first option.                              |\n| <kbd>end</kbd>       | Move cursor to the last option.                               |\n| <kbd>left</kbd>      | Unselect all options.                                         |\n| <kbd>right</kbd>     | Select all options.                                           |\n| others               | See [Text Input](#text-input) and [All Prompts](#all-prompts) |\n\n## DateSelect Prompts\n\nThese key bindings may be used in the interactive calendar of the [`DateSelect`] prompt.\n\n\n| **command**                              | **description**                                               |\n| ---------------------------------------- | ------------------------------------------------------------- |\n| <kbd>space bar</kbd> or <kbd>enter</kbd> | Submit the current highlighted date.                          |\n| <kbd>up</kbd>                            | Move cursor one row up.                                       |\n| <kbd>down</kbd>                          | Move cursor one row down.                                     |\n| <kbd>left</kbd>                          | Move cursor one column to the left.                           |\n| <kbd>right</kbd>                         | Move cursor one column to the right.                          |\n| <kbd>k</kbd>                             | Move cursor one row up when vim mode is enabled.              |\n| <kbd>j</kbd>                             | Move cursor one row down when vim mode is enabled.            |\n| <kbd>h</kbd>                             | Move cursor one column to the left when vim mode is enabled.  |\n| <kbd>l</kbd>                             | Move cursor one column to the right when vim mode is enabled. |\n| <kbd>ctrl</kbd> + <kbd>up</kbd>          | Move calendar back by one year.                               |\n| <kbd>ctrl</kbd> + <kbd>down</kbd>        | Move calendar forward by one year.                            |\n| <kbd>ctrl</kbd> + <kbd>left</kbd>        | Move calendar back by one month.                              |\n| <kbd>ctrl</kbd> + <kbd>right</kbd>       | Move calendar forward by one month.                           |\n\n## Editor Prompts\n\nThese key bindings may be used in [`Editor`] prompts.\n\n| **command**      | **description**                                                |\n| ---------------- | -------------------------------------------------------------- |\n| <kbd>e</kbd>     | Open the editor.                                               |\n| <kbd>enter</kbd> | Submit the current content of the temporary file being edited. |\n\n\n\n\n[`Text`]: https://docs.rs/inquire/*/inquire/prompts/text/struct.Text.html\n[`DateSelect`]: https://docs.rs/inquire/*/inquire/prompts/dateselect/struct.DateSelect.html\n[`Select`]: https://docs.rs/inquire/*/inquire/prompts/select/struct.Select.html\n[`MultiSelect`]: https://docs.rs/inquire/*/inquire/prompts/multiselect/struct.MultiSelect.html\n[`Confirm`]: https://docs.rs/inquire/*/inquire/prompts/confirm/struct.Confirm.html\n[`Editor`]: https://docs.rs/inquire/*/inquire/prompts/editor/struct.Editor.html\n[`customtype`]: https://docs.rs/inquire/*/inquire/struct.CustomType.html\n[`Password`]: https://docs.rs/inquire/*/inquire/prompts/password/struct.Password.html\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.0439453125,
          "content": "MIT License\n\nCopyright (c) 2021 Mikael Mello\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 36.6171875,
          "content": "[![Latest Version]][crates.io] [![Docs]][docs.rs] ![Build status] ![Unsafe forbidden] ![Supported platforms] ![License]\n\n[crates.io]: https://crates.io/crates/inquire\n[latest version]: https://img.shields.io/crates/v/inquire.svg\n[docs]: https://img.shields.io/docsrs/inquire/latest?logo=docs.rs\n[docs.rs]: https://docs.rs/inquire\n[build status]: https://github.com/mikaelmello/inquire/actions/workflows/build.yml/badge.svg\n[unsafe forbidden]: https://img.shields.io/badge/unsafe-forbidden-success.svg\n[supported platforms]: https://img.shields.io/badge/platform-linux%20%7C%20macos%20%7C%20windows-success\n[license]: https://img.shields.io/crates/l/inquire.svg\n\n---\n\n<p align=\"center\">\n  <img width=\"460\" src=\"./assets/inquire.png\">\n  <br>\n  <code>inquire</code> is a library for building interactive prompts on terminals.\n</p>\n\nIt provides several different prompts in order to interactively ask the user for information via the CLI. With `inquire`, you can use:\n\n- [`Text`] to get text input from the user, with _built-in autocompletion support_;\n- [`Editor`]\\* to get longer text inputs by opening a text editor for the user;\n- [`DateSelect`]\\* to get a date input from the user, selected via an _interactive calendar_;\n- [`Select`] to ask the user to select one option from a given list;\n- [`MultiSelect`] to ask the user to select an arbitrary number of options from a given list;\n- [`Confirm`] for simple yes/no confirmation prompts;\n- [`CustomType`] for text prompts that you would like to parse to a custom type, such as numbers or UUIDs;\n- [`Password`] for secretive text prompts.\n\n---\n\n## Demo\n\n![Animated GIF making a demonstration of a questionnaire created with this library. You can replay this recording in your terminal with asciinema play command - asciinema play ./assets/expense_tracker.cast](./assets/expense_tracker.gif)\n[Source](./inquire/examples/expense_tracker.rs)\n\n## Features\n\n- Cross-platform, supporting UNIX and Windows terminals (thanks to [crossterm](https://crates.io/crates/crossterm));\n- Several kinds of prompts to suit your needs;\n- Standardized error handling (thanks to [thiserror](https://crates.io/crates/thiserror));\n- You can choose your terminal backend between `crossterm` (default), `termion` or `console`.\n  - Perfect if you already use one library and do not want additional dependencies.\n- Support for fine-grained configuration for each prompt type, allowing you to customize:\n  - Rendering configuration (aka color theme + other components);\n  - Default values;\n  - Placeholders;\n  - Input validators and formatters;\n  - Help messages;\n  - Autocompletion for [`Text`] prompts;\n  - Confirmation messages for [`Password`] prompts;\n  - Custom list filters for [`Select`] and [`MultiSelect`] prompts;\n  - Custom parsers for [`Confirm`] and [`CustomType`] prompts;\n  - Custom extensions for files created by [`Editor`] prompts;\n  - and many others!\n\n## Examples\n\nExamples can be found in the `examples` directory. Run them to see basic behavior:\n\n```\ncargo run --example expense_tracker --features date\n```\n\n## Usage\n\nPut this line in your `Cargo.toml`, under `[dependencies]`.\n\n```\ninquire = \"0.7.5\"\n```\n\n\\* This prompt type is gated under a feature flag, e.g.:\n\n```\ninquire = { version = \"0.7.5\", features = [\"date\"] }\n```\n\n# Cross-cutting concerns\n\nThere are several features that are shared among different types of prompts. This section will give an overview on each of them.\n\n## Rendering configuration (aka color themes)\n\nAll prompts allow you to set a custom `RenderConfig`, a struct that contains lots of style customization options.\n\nWith `RenderConfig`, you can customize foreground color, background color and attributes (e.g. bold) of most components that are part of a prompt. Additionally, you can also customize the content of special tokens, such as prompt prefixes, highlighted-option prefixes, selected and unselected checkboxes, etc. If you do not want to re-set the render config object for each new prompt you create, you can call `inquire::set_global_render_config` to set a global RenderConfig object to be used as the default one for all future prompts.\n\nThis allows you to have greater control over the style of your application while continuing to have a clean API to create prompts as smoothly as possible.\n\nIn the [`render_config.rs`](./inquire/examples/render_config.rs) example, you can take a look at the capabilities of this API. The example is exactly the same one as [`expense_tracker.rs`](./inquire/examples/expense_tracker.rs), but with several style aspects customized. Take a look at their differences:\n\n![Animated GIF making a demonstration of the expense_tracker example. You can replay this recording in your terminal with asciinema play command - asciinema play ./assets/expense_tracker.cast](./assets/expense_tracker_gifcast.gif)\n[Source](./inquire/examples/expense_tracker.rs)\n![Animated GIF making a demonstration of the render_config example. You can replay this recording in your terminal with asciinema play command - asciinema play ./assets/render_config.cast](./assets/render_config_gifcast.gif)\n[Source](./inquire/examples/render_config.rs)\n\n## Validation\n\nAlmost all prompts provide an API to set custom validators.\n\nThe validators provided to a given prompt are called whenever the user submits their input. These validators vary by prompt type, receiving different types of variables as arguments, such as `&str`, `&[ListOption]`, or `NaiveDate`, but their return type are always the same: `Result<Validation, CustomUserError>`.\n\nThe `Validation` type is an enum that indicates whether the user input is valid, in which you should return `Ok(Validation::Invalid)`, or invalid, where you should return `Ok(Validation::Invalid(ErrorMessage))`. The `ErrorMessage` type is another enum, containing the `Default` and `Custom(String)` variants, indicating the message to indicate the user that their input is invalid.\n\nWith an Invalid result, it is recommended that you set the `ErrorMessage` field to a custom message containing helpful feedback to the user, e.g. \"This field should contain at least 5 characters\".\n\nThe `CustomUserError` type is an alias to `Box<dyn std::error::Error + Send + Sync + 'static>`. Added to support validators with fallible operations, such as HTTP requests or database queries. If the validator returns `Err(CustomUserError)`, the prompt will return `Err(InquireError::Custom(CustomUserError))` as its result, containing the error you returned wrapped around the enums mentioned.\n\nThe validators are typed as a reference to `dyn Fn`. This allows both functions and closures to be used as validators, but it also means that the functions can not hold any mutable references.\n\nFinally, `inquire` has a feature called `macros` that is included by default. When the feature is on, several shorthand macros for the builtin validators are exported at the root-level of the library. Check their documentation to see more details, they provide full-featured examples.\n\nIn the [demo](#demo) you can see the behavior of an input not passing the requirements in the _amount_ prompt, when the error message \"Please type a valid number\" is displayed. _Full disclosure, this error message was displayed due to a parsing, not validation, error, but the user experience is the same for both cases._\n\nIf you'd like to see more examples, the [`date.rs`](./inquire/examples/date.rs) and [`multiselect.rs`](./inquire/examples/multiselect.rs) files contain custom validators.\n\n## Terminal Back-end\n\nCurrently, there are like 3 major libraries to manipulate terminals: [crossterm](https://lib.rs/crates/crossterm), [console](https://lib.rs/crates/console) and [termion](https://lib.rs/crates/termion).\n\nBinary Rust applications that intend to manipulate terminals will probably pick any one of these 3 to power underlying abstractions. `inquire` chose to support crossterm by default in order to support many features on Windows out-of-the-box.\n\nHowever, if your application already uses a dependency other than crossterm, such as console or termion, you can enable another terminal via feature flags. It is also important to disable inquire's default features as it comes with `crossterm` enabled by default. Such as this:\n\n```toml\ninquire = { version = \"0.7.5\", default-features = false, features = [\"termion\", \"date\"] }\n```\n\nor this:\n\n```toml\ninquire = { version = \"0.7.5\", default-features = false, features = [\"console\", \"date\"] }\n```\n\n## Formatting\n\nFormatting is the process of transforming the user input into a readable output displayed after the user submits their response. By default, this is in some cases just echoing back the input itself, such as in Text prompts. Other prompts have different formatting rules by default, for example DateSelect which formats the selected date into something like \"August 5, 2021\".\n\nAll prompts provide an API to set custom formatters. By setting a formatter, you can customize how the user's response is displayed to them. For example, you might want to format a selected date into a new format such as \"05/08/2021\".\n\nCustom formatters receive the input as an argument, with varying types such as `&str`, `chrono::NaiveDate`, and return a `String` containing the output to be displayed to the user. Check the docs for specific examples.\n\nIn the [demo](#demo) you can see this behavior in action with the _amount_ (CustomType) prompt, where a custom formatter adds a '$' character prefix to the input.\n\n## Parsing\n\nParsing features are related to two prompts: [`Confirm`] and [`CustomType`]. They return to you a value (of types `bool` or any custom type you might want) parsed from the user's text input. In both cases, you can either use default parsers that are already built-in or provide custom ones adhering to the function signatures.\n\nThe default `bool` parser returns `true` if the input is either `\"y\"` or `\"yes\"`, in a case-insensitive comparison. Similarly, the parser returns `false` if the input is either `\"n\"` or `\"no\"`.\n\nThe default parser for [`CustomType`] prompts calls the `parse::<T>()` method on the input string. This means that if you want to create a [`CustomType`] with default settings, the wanted return type must implement the `FromStr` trait.\n\nIn the [demo](#demo) you can see this behavior in action with the _amount_ (CustomType) prompt.\n\n## Scoring\n\nScoring is applicable to two prompts: [`Select`] and [`MultiSelect`]. They provide the user the ability to sort and filter the list of options based on their text input. This is specially useful when there are a lot of options for the user to choose from, allowing them to quickly find their expected options.\n\nScoring functions receive four arguments: the current user input, the option, the option string value and the option index. They must return a `Option<i64>` value indicating whether the option should be part of the results or not.\n\nThe default scoring function calculates a match value with the current user input and each option using SkimV2 from [fuzzy_matcher](https://crates.io/crates/fuzzy-matcher), resulting in fuzzy searching and filtering, returning `Some(<score>_i64)` if SkimV2 detects a match.\n\nIn the [demo](#demo) you can see this behavior in action with the _account_ (Select) and _tags_ (MultiSelect) prompts.\n\n## Error handling\n\nError handling when using `inquire` is pretty simple. Instantiating prompt structs is not fallible by design, in order to avoid requiring chaining of `map` and `and_then` methods to subsequent configuration method calls such as `with_help_message()`. All fallible operations are exposable only when you call `prompt()` on the instantiated prompt struct.\n\n`prompt` calls return a `Result` containing either your expected response value or an `Err` of type `InquireError`. An `InquireError` has the following variants:\n\n- **NotTTY**: The input device is not a TTY, which means that enabling raw mode on the terminal in order to listen to input events is not possible. I currently do not know if it is possible to make the library work even if that's the case.\n- **InvalidConfiguration(String)**: Some aspects of the prompt configuration were considered to be invalid, with more details given in the value string.\n  - This error is only possible in [`Select`], [`MultiSelect`] and [`DateSelect`] prompts, where specific settings might be incompatible. All other prompts always have valid configurations by design.\n- **IO(io::Error)**: There was an error when performing IO operations. IO errors are not handled inside `inquire` to keep the library simple.\n- **OperationCanceled**: The user canceled the prompt before submitting a response. The user might cancel the operation by pressing `Ctrl-C` or `ESC`.\n\n## Keybindings\n\nTo see all of the keybindings registered by prompts, check the [`KEY_BINDINGS.md` file](KEY_BINDINGS.md).\n\n# Prompts\n\nCurrently, there are 5 different prompt types supported.\n\n## Text\n\n`Text` is the standard kind of prompt you would expect from a library like this one. It displays a message to the user, prompting them to type something back. The user's input is then stored in a `String` and returned to the prompt caller.\n\n```rust\nlet name = Text::new(\"What is your name?\").prompt();\n\nmatch name {\n    Ok(name) => println!(\"Hello {}\", name),\n    Err(_) => println!(\"An error happened when asking for your name, try again later.\"),\n}\n```\n\n![Animated GIF making a demonstration of a simple prompt with Text created with this library. You can replay this recording in your terminal with asciinema play command using the file ./assets/text_simple.cast](./assets/text_simple.gif)\n\nWith `Text`, you can customize several aspects:\n\n- **Prompt message**: Main message when prompting the user for input, `\"What is your name?\"` in the example above.\n- **Help message**: Message displayed at the line below the prompt.\n- **Default value**: Default value returned when the user submits an empty response.\n- **Initial value**: Initial value of the prompt's text input, in case you want to display the prompt with something already filled in.\n- **Placeholder**: Short hint that describes the expected value of the input.\n- **Validators**: Custom validators to the user's input, displaying an error message if the input does not pass the requirements.\n- **Formatter**: Custom formatter in case you need to pre-process the user input before showing it as the final answer.\n- **Suggester**: Custom function that returns a list of input suggestions based on the current text input. See more on \"Autocomplete\" below.\n\n### Autocomplete\n\nWith `Text` inputs, it is also possible to set-up an autocompletion system to provide a better UX when necessary.\n\nYou can call `with_autocomplete()` and provide a value that implements the `Autocomplete` trait. The `Autocomplete` trait has two provided methods: `get_suggestions` and `get_completion`.\n\n- `get_suggestions` is called whenever the user's text input is modified, e.g. a new letter is typed, returning a `Vec<String>`. The `Vec<String>` is the list of suggestions that the prompt displays to the user according to their text input. The user can then navigate through the list and if they submit while highlighting one of these suggestions, the suggestion is treated as the final answer.\n- `get_completion` is called whenever the user presses the autocompletion hotkey (`tab` by default), with the current text input and the text of the currently highlighted suggestion, if any, as parameters. This method should return whether any text replacement (an autocompletion) should be made. If the prompt receives a replacement to be made, it substitutes the current text input for the string received from the `get_completion` call.\n\nFor example, in the `complex_autocompletion.rs` example file, the `FilePathCompleter` scans the file system based on the current text input, storing a list of paths that match the current text input.\n\nEvery time `get_suggestions` is called, the method returns the list of paths that match the user input. When the user presses the autocompletion hotkey, the `FilePathCompleter` checks whether there is any path selected from the list, if there is, it decides to replace the current text input for it. The interesting piece of functionality is that if there isn't a path selected from the list, the `FilePathCompleter` calculates the longest common prefix amongst all scanned paths and updates the text input to an unambiguous new value. Similar to how terminals work when traversing paths.\n\n### Default behaviors\n\nDefault behaviors for each one of `Text` configuration options:\n\n- The input formatter just echoes back the given input.\n- No validators are called, accepting any sort of input including empty ones.\n- No default values or help messages.\n- No autocompletion features set-up.\n- Prompt messages are always required when instantiating via `new()`.\n\n## DateSelect\n\n![Animated GIF making a demonstration of a DateSelect prompt created with this library. You can replay this recording in your terminal with asciinema play command using the file ./assets/date_complete.cast](./assets/date_complete.gif)\n\n```rust\nlet date = DateSelect::new(\"When do you want to travel?\")\n    .with_default(chrono::NaiveDate::from_ymd(2021, 8, 1))\n    .with_min_date(chrono::NaiveDate::from_ymd(2021, 8, 1))\n    .with_max_date(chrono::NaiveDate::from_ymd(2021, 12, 31))\n    .with_week_start(chrono::Weekday::Mon)\n    .with_help_message(\"Possible flights will be displayed according to the selected date\")\n    .prompt();\n\nmatch date {\n    Ok(_) => println!(\"No flights available for this date.\"),\n    Err(_) => println!(\"There was an error in the system.\"),\n}\n```\n\n`DateSelect` prompts allows user to select a date (time not supported) from an interactive calendar. This prompt is only available when including the `date` feature in the dependency, as it brings an additional module (`chrono`) in your dependency tree.\n\nBy default, the initial selected date is the current date. The user can navigate through the calendar by pressing the keyboard arrows. If the user also presses the control key along with the arrows, the user will be able to \"fast-forward\" to previous or next months or years.\n\nMore specifically:\n\n- Left arrow moves to the day previous to the one selected, and to the month previous to the one selected when pressed with `ctrl`.\n- Analogously, right arrow does the same, but moving to the next day or month.\n- Up arrow moves to the day above to the one selected, basically a week before the selected date. When pressed with `ctrl`, it moves to the previous year.\n- Analogously, the down arrow moves to a week later or a year later.\n\nFinally, the user selects a date by pressing the space or enter keys.\n\n`DateSelect` prompts provide several options of configuration:\n\n- **Prompt message**: Required when creating the prompt.\n- **Default value**: Default value selected when the calendar is displayed and the one select if the user submits without any previous actions. Current date by default.\n- **Help message**: Message displayed at the line below the prompt.\n- **Formatter**: Custom formatter in case you need to pre-process the user input before showing it as the final answer.\n  - Formats to \"Month Day, Year\" by default.\n- **Validators**: Custom validators to the user's selected date, displaying an error message if the date does not pass the requirements.\n- **Week start**: Which day of the week should be displayed in the first column of the calendar, Sunday by default.\n- **Min and max date**: Inclusive boundaries of allowed dates in the interactive calendar. If any boundary is set, the user will not be able to move past them, consequently not being able to select any dates out of the allowed range.\n\n## Select\n\n![Animated GIF making a demonstration of a simple Select prompt created with this library. You can replay this recording in your terminal with asciinema play command using the file ./assets/select.cast](./assets/select.gif)\n\n```rust\nlet options: Vec<&str> = vec![\"Banana\", \"Apple\", \"Strawberry\", \"Grapes\", \"Lemon\", \"Tangerine\", \"Watermelon\", \"Orange\", \"Pear\", \"Avocado\", \"Pineapple\"];\n\nlet ans: Result<&str, InquireError> = Select::new(\"What's your favorite fruit?\", options).prompt();\n\nmatch ans {\n    Ok(choice) => println!(\"{}! That's mine too!\", choice),\n    Err(_) => println!(\"There was an error, please try again\"),\n}\n```\n\n`Select` prompts are suitable for when you need the user to select one option among many.\n\nThe user can select and submit the current highlighted option by pressing space or enter.\n\nThis prompt requires a prompt message and a **non-empty** `Vec` of options to be displayed to the user. The options can be of any type as long as they implement the `Display` trait. It is required that the `Vec` is moved to the prompt, as the prompt will return the selected option (`Vec` element) after the user submits.\n\n- If the list is empty, the prompt operation will fail with an `InquireError::InvalidConfiguration` error.\n\nThis prompt does not support custom validators because of its nature. A submission always selects exactly one of the options. If this option was not supposed to be selected or is invalid in some way, it probably should not be included in the options list.\n\nThe options are paginated in order to provide a smooth experience to the user, with the default page size being 7. The user can move from the options and the pages will be updated accordingly, including moving from the last to the first options (or vice-versa).\n\nLike all others, this prompt also allows you to customize several aspects of it:\n\n- **Prompt message**: Required when creating the prompt.\n- **Options list**: Options displayed to the user. Must be **non-empty**.\n- **Starting cursor**: Index of the cursor when the prompt is first rendered. Default is 0 (first option). If the index is out-of-range of the option list, the prompt will fail with an `InquireError::InvalidConfiguration` error.\n- **Help message**: Message displayed at the line below the prompt.\n- **Formatter**: Custom formatter in case you need to pre-process the user input before showing it as the final answer.\n  - Prints the selected option string value by default.\n- **Page size**: Number of options displayed at once, 7 by default.\n- **Display option indexes**: On long lists, it might be helpful to display the indexes of the options to the user. Via the `RenderConfig`, you can set the display mode of the indexes as a prefix of an option. The default configuration is `None`, to not render any index when displaying the options.\n- **Scoring function**: Function that defines the order of options and if an option is displayed or not based on the current user input.\n\n## MultiSelect\n\n![Animated GIF making a demonstration of a simple MultiSelect prompt created with this library. You can replay this recording in your terminal with asciinema play command using the file ./assets/multiselect.cast](./assets/multiselect.gif)\n\nThe source is too long, find it [here](./inquire/examples/multiselect.rs).\n\n`MultiSelect` prompts are suitable for when you need the user to select many options (including none if applicable) among a list of them.\n\nThe user can select (or deselect) the current highlighted option by pressing space, clean all selections by pressing the left arrow and select all options by pressing the right arrow.\n\nThis prompt requires a prompt message and a **non-empty** `Vec` of options to be displayed to the user. The options can be of any type as long as they implement the `Display` trait. It is required that the `Vec` is moved to the prompt, as the prompt will return the ownership of the `Vec` after the user submits, with only the selected options inside it.\n\n- If the list is empty, the prompt operation will fail with an `InquireError::InvalidConfiguration` error.\n\nThe options are paginated in order to provide a smooth experience to the user, with the default page size being 7. The user can move from the options and the pages will be updated accordingly, including moving from the last to the first options (or vice-versa).\n\nCustomizable options:\n\n- **Prompt message**: Required when creating the prompt.\n- **Options list**: Options displayed to the user. Must be **non-empty**.\n- **Default selections**: Options that are selected by default when the prompt is first rendered. The user can unselect them. If any of the indices is out-of-range of the option list, the prompt will fail with an `InquireError::InvalidConfiguration` error.\n- **Starting cursor**: Index of the cursor when the prompt is first rendered. Default is 0 (first option). If the index is out-of-range of the option list, the prompt will fail with an `InquireError::InvalidConfiguration` error.\n- **Help message**: Message displayed at the line below the prompt.\n- **Formatter**: Custom formatter in case you need to pre-process the user input before showing it as the final answer.\n  - Prints the selected options string value, joined using a comma as the separator, by default.\n- **Validator**: Custom validator to make sure a given submitted input pass the specified requirements, e.g. not allowing 0 selected options or limiting the number of options that the user is allowed to select.\n  - No validators are on by default.\n- **Page size**: Number of options displayed at once, 7 by default.\n- **Display option indexes**: On long lists, it might be helpful to display the indexes of the options to the user. Via the `RenderConfig`, you can set the display mode of the indexes as a prefix of an option. The default configuration is `None`, to not render any index when displaying the options.\n- **Scoring function**: Function that defines the order of options and if an option is displayed or not based on the current user input.\n- **Keep filter flag**: Whether the current filter input should be cleared or not after a selection is made. Defaults to true.\n\n## Editor\n\n![Animated GIF making a demonstration of a simple Editor prompt created with this library. You can replay this recording in your terminal with asciinema play command using the file ./assets/editor.cast](./assets/editor.gif)\n\nThe source is too long, find it [here](./inquire/examples/editor.rs).\n\n`Editor` prompts are meant for cases where you need the user to write some text that might not fit in a single line, such as long descriptions or commit messages.\n\nThis prompt is gated via the `editor` because it depends on the `tempfile` crate.\n\nThis prompt's behavior is to ask the user to either open the editor - by pressing the `e` key - or submit the current text - by pressing the `enter` key. The user can freely open and close the editor as they wish, until they either cancel or submit.\n\nThe editor opened is set by default to `nano` on Unix environments and `notepad` on Windows environments. Additionally, if there's an editor set in either the `EDITOR` or `VISUAL` environment variables, it is used instead.\n\nIf the user presses `esc` while the editor is not open, it will be interpreted as the user canceling (or skipping) the operation, in which case the prompt call will return `Err(InquireError::OperationCanceled)`.\n\nIf the user presses `enter` without ever modyfing the temporary file, it will be treated as an empty submission. If this is unwanted behavior, you can control the user input by using validators.\n\nFinally, this prompt allows a great range of customizable options as all others:\n\n- **Prompt message**: Main message when prompting the user for input, `\"What is your name?\"` in the example above.\n- **Help message**: Message displayed at the line below the prompt.\n- **Editor command and its args**: If you want to override the selected editor, you can pass over the command and additional args.\n- **File extension**: Custom extension for the temporary file, useful as a proxy for proper syntax highlighting for example.\n- **Predefined text**: Pre-defined text to be written to the temporary file before the user is allowed to edit it.\n- **Validators**: Custom validators to the user's input, displaying an error message if the input does not pass the requirements.\n- **Formatter**: Custom formatter in case you need to pre-process the user input before showing it as the final answer.\n  - By default, a successfully submitted answer is displayed to the user simply as `<received>`.\n\n## Password\n\n![Animated GIF making a demonstration of a simple Password prompt created with this library. You can replay this recording in your terminal with asciinema play command using the file ./assets/password_simple.cast](./assets/password_simple.gif)\n\n```rust\nlet name = Password::new(\"Encryption key:\").prompt();\n\nmatch name {\n    Ok(_) => println!(\"This doesn't look like a key.\"),\n    Err(_) => println!(\"An error happened when asking for your key, try again later.\"),\n}\n```\n\n`Password` prompts are meant for secretive text inputs.\n\nBy default, the password prompt behaves like a standard one you'd see in common CLI applications: the user has no UI indicators about the state of the current input. They do not know how many characters they typed, or which character they typed, with no option to display the current text input.\n\nHowever, you can still customize these and other behaviors if you wish:\n\n- **Standard display mode**: Set the display mode of the text input among hidden, masked and full via the `PasswordDisplayMode` enum.\n  - Hidden: default behavior, no UI indicators.\n  - Masked: behaves like a normal text input, except that all characters of the input are masked to a special character, which is `'*'` by default but can be customized via `RenderConfig`.\n  - Full: behaves like a normal text input, no modifications.\n- **Toggle display mode**: When enabling this feature by calling the `with_display_toggle_enabled()` method, you allow the user to toggle between the standard display mode set and the full display mode.\n  - If you have set the standard display mode to hidden (which is also the default) or masked, the user can press `Ctrl+R` to change the display mode to `Full`, and `Ctrl+R` again to change it back to the standard one.\n  - Obviously, if you have set the standard display mode to `Full`, pressing `Ctrl+R` won't cause any changes.\n- **Confirmation**: By default, the password will have a confirmation flow where the user will be asked for the input twice and the two responses will be compared. If they differ, an error message is shown and the user is prompted again.\n  - By default, a \"Confirmation:\" message is shown for the confirmation prompts, but this can be modified by setting a custom confirmation message only shown the second time, using the `with_custom_confirmation_message()` method.\n  - If confirmation is not desired, it can be turned off using the `without_confirmation()` method.\n- **Help message**: Message displayed at the line below the prompt.\n- **Formatter**: Custom formatter in case you need to pre-process the user input before showing it as the final answer.\n  - By default, it prints eight asterisk characters: `********`.\n- **Validators**: Custom validators to make sure a given submitted input pass the specified requirements, e.g. not allowing empty inputs or requiring special characters.\n  - No validators are on by default.\n\nRemember that for CLI applications it is standard to not allow use any display modes other than `Hidden` and to not allow the user to see the text input in any way. _Use the customization options at your discretion_.\n\n## CustomType\n\n![Animated GIF making a demonstration of a simple CustomType prompt created with this library. You can replay this recording in your terminal with asciinema play command using the file ./assets/custom_type.cast](./assets/custom_type.gif)\n\n```rust\nlet amount = CustomType::<f64>::new(\"How much do you want to donate?\")\n    .with_formatter(&|i| format!(\"${:.2}\", i))\n    .with_error_message(\"Please type a valid number\")\n    .with_help_message(\"Type the amount in US dollars using a decimal point as a separator\")\n    .prompt();\n\nmatch amount {\n    Ok(_) => println!(\"Thanks a lot for donating that much money!\"),\n    Err(_) => println!(\"We could not process your donation\"),\n}\n```\n\n`CustomType` prompts are generic prompts suitable for when you need to parse the user input into a specific type, for example an `f64` or a `rust_decimal`, maybe even an `uuid`.\n\nThis prompt has all of the validation, parsing and error handling features built-in to reduce as much boilerplaste as possible from your prompts. Its defaults are necessarily very simple in order to cover a large range of generic cases, for example a \"Invalid input\" error message.\n\nYou can customize as many aspects of this prompt as you like: prompt message, help message, default value, placeholder, value parser and value formatter.\n\n**Behavior**\n\nWhen initializing this prompt via the `new()` method, some constraints on the return type `T` are added to make sure we can apply a default parser and formatter to the prompt.\n\nThe default parser calls the [`str.parse`](https://doc.rust-lang.org/stable/std/primitive.str.html#method.parse) method, which means that `T` must implement the `FromStr` trait. When the parsing fails for any reason, a default error message \"Invalid input\" is displayed to the user.\n\nAfter the user submits, the prompt handler tries to parse the input into the expected type. If the operation succeeds, the value is returned to the prompt caller. If it fails, the message defined in `error_message` is displayed to the user.\n\nThe default formatter simply calls `to_string()` on the parsed value, which means that `T` must implement the `ToString` trait, which normally happens implicitly when you implement the `Display` trait.\n\nIf your type `T` does not satisfy these constraints, you can always manually instantiate the entire struct yourself like this:\n\n```rust\nlet amount_prompt: CustomType<chrono::NaiveDate> = CustomType {\n    message: \"When will you travel?\",\n    formatter: &|val| val.format(\"%d/%m/%Y\").to_string(),\n    default: None,\n    error_message: \"Please type a valid date in the expected format.\".into(),\n    help_message: \"The date should be in the dd/mm/yyyy format.\".into(),\n    parser: &|i| match chrono::NaiveDate::parse_from_str(i, \"%d/%m/%Y\") {\n        Ok(val) => Ok(val),\n        Err(_) => Err(()),\n    },\n};\n```\n\n## Confirm\n\n![Animated GIF making a demonstration of a simple Confirm prompt created with this library. You can replay this recording in your terminal with asciinema play command using the file ./assets/confirm_simple.cast](./assets/confirm_simple.gif)\n\n```rust\nlet ans = Confirm::new(\"Do you live in Brazil?\")\n    .with_default(false)\n    .with_help_message(\"This data is stored for good reasons\")\n    .prompt();\n\nmatch ans {\n    Ok(true) => println!(\"That's awesome!\"),\n    Ok(false) => println!(\"That's too bad, I've heard great things about it.\"),\n    Err(_) => println!(\"Error with questionnaire, try again later\"),\n}\n```\n\n`Confirm` is a prompt to ask the user for simple yes/no questions, commonly known by asking the user displaying the `(y/n)` text.\n\nThis prompt is basically a wrapper around the behavior of [`CustomType`] prompts, providing a sensible set of defaults to ask for simple `true/false` questions, such as confirming an action.\n\nDefault values are formatted with the given value in uppercase, e.g. `(Y/n)` or `(y/N)`. The `bool` parser accepts by default only the following inputs (case-insensitive): `y`, `n`, `yes` and `no`. If the user input does not match any of them, the following error message is displayed by default:\n\n- `# Invalid answer, try typing 'y' for yes or 'n' for no`.\n\nFinally, once the answer is submitted, `Confirm` prompts display the bool value formatted as either \"Yes\", if a `true` value was parsed, or \"No\" otherwise.\n\nThe Confirm prompt does not support custom validators because of the nature of the prompt. The user input is always parsed to true or false. If one of the two alternatives is invalid, a Confirm prompt that only allows yes or no answers does not make a lot of sense to me, but if someone provides a clear use-case I will reconsider.\n\nConfirm prompts provide several options of configuration:\n\n- **Prompt message**: Required when creating the prompt.\n- **Default value**: Default value returned when the user submits an empty response.\n- **Placeholder**: Short hint that describes the expected value of the input.\n- **Help message**: Message displayed at the line below the prompt.\n- **Formatter**: Custom formatter in case you need to pre-process the user input before showing it as the final answer.\n  - Formats `true` to \"Yes\" and `false` to \"No\", by default.\n- **Parser**: Custom parser for user inputs.\n  - The default `bool` parser returns `true` if the input is either `\"y\"` or `\"yes\"`, in a case-insensitive comparison. Similarly, the parser returns `false` if the input is either `\"n\"` or `\"no\"`.\n- **Default value formatter**: Function that formats how the default value is displayed to the user.\n  - By default, displays \"y/n\" with the default value capitalized, e.g. \"y/N\".\n- **Error message**: Error message to display when a value could not be parsed from the input.\n  - Set to \"Invalid answer, try typing 'y' for yes or 'n' for no\" by default.\n\n[`text`]: #Text\n[`dateselect`]: #DateSelect\n[`select`]: #Select\n[`multiselect`]: #MultiSelect\n[`confirm`]: #Confirm\n[`editor`]: #Editor\n[`customtype`]: #CustomType\n[`password`]: #Password\n\n# Stargazers over time\n\n[![Stargazers over time](https://starchart.cc/mikaelmello/inquire.svg)](https://starchart.cc/mikaelmello/inquire)\n"
        },
        {
          "name": "assets",
          "type": "tree",
          "content": null
        },
        {
          "name": "clippy.toml",
          "type": "blob",
          "size": 0.6298828125,
          "content": "disallowed-methods = [\n    { path = \"std::option::Option::map_or\", reason = \"prefer `map(..).unwrap_or(..)` for legibility\" },\n    { path = \"std::option::Option::map_or_else\", reason = \"prefer `map(..).unwrap_or_else(..)` for legibility\" },\n    { path = \"std::result::Result::map_or\", reason = \"prefer `map(..).unwrap_or(..)` for legibility\" },\n    { path = \"std::result::Result::map_or_else\", reason = \"prefer `map(..).unwrap_or_else(..)` for legibility\" },\n    { path = \"std::iter::Iterator::for_each\", reason = \"prefer `for` for side-effects\" },\n    { path = \"std::iter::Iterator::try_for_each\", reason = \"prefer `for` for side-effects\" },\n]\n"
        },
        {
          "name": "inquire-derive",
          "type": "tree",
          "content": null
        },
        {
          "name": "inquire",
          "type": "tree",
          "content": null
        },
        {
          "name": "release.toml",
          "type": "blob",
          "size": 0.224609375,
          "content": "allow-branch = [\"main\"]\nenable-all-features = true\nconsolidate-commits = true\nshared-version = true\n\ntag-prefix = \"\"\ntag-name = \"v{{version}}\"\ntag-message = \"v{{version}}\"\npre-release-commit-message = \"chore: release v{{version}}\""
        }
      ]
    }
  ]
}