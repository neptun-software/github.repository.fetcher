{
  "metadata": {
    "timestamp": 1736709100667,
    "page": 256,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjI2MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "Rust-SDL2/rust-sdl2",
      "stars": 2801,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.0146484375,
          "content": "*.patch eol=lf\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.1669921875,
          "content": "*~\n*#\n*.o\n*.a\n*.so\n*.rlib\n*.dylib\n*.dSYM\n*.dll\n*.dummy\n*.exe\n.rust/\nbuild/\nbin/\nlib/\n*.swp\n.project\nsrc/demo/main\ndoc/\ntarget/\n.DS_Store\n*.iml\n.idea/\n.vscode/\n\nCargo.lock\n"
        },
        {
          "name": ".gitmodules",
          "type": "blob",
          "size": 0.0869140625,
          "content": "[submodule \"sdl2-sys/SDL\"]\n\tpath = sdl2-sys/SDL\n\turl = https://github.com/libsdl-org/SDL\n"
        },
        {
          "name": "Cargo.toml",
          "type": "blob",
          "size": 3.2861328125,
          "content": "[package]\nname = \"sdl2\"\ndescription = \"SDL2 bindings for Rust\"\nrepository = \"https://github.com/Rust-SDL2/rust-sdl2\"\ndocumentation = \"https://docs.rs/sdl2\"\nversion = \"0.37.0\"\nlicense = \"MIT\"\nauthors = [ \"Tony Aldridge <tony@angry-lawyer.com>\", \"Cobrand <cobrandw@gmail.com>\"]\nkeywords = [\"SDL\", \"windowing\", \"graphics\", \"api\", \"engine\"]\ncategories = [\"rendering\",\"api-bindings\",\"game-engines\",\"multimedia\"]\nreadme = \"README.md\"\nresolver = \"2\"\n\n[lib]\nname = \"sdl2\"\npath = \"src/sdl2/lib.rs\"\n\n[dependencies]\nbitflags = \"1.2.1\"\nlibc = \"0.2.92\"\nlazy_static = \"1.4.0\"\n\n[dependencies.sdl2-sys]\npath = \"sdl2-sys\"\nversion = \"^0.37.0\"\n\n[dependencies.c_vec]\n# allow both 1.* and 2.0 versions\nversion = \">= 1.0\"\noptional = true\n\n[dev-dependencies]\nrand = \"0.7\"\nwgpu = { version = \"0.20\", features = [\"spirv\"] }\npollster = \"0.2.4\"\nenv_logger = \"0.11.0\"\n\n[dependencies.raw-window-handle]\nversion = \"0.6.0\"\noptional = true\n\n[features]\nunsafe_textures = []\ndefault = []\ngfx = [\"c_vec\", \"sdl2-sys/gfx\"]\nmixer = [\"sdl2-sys/mixer\"]\nimage = [\"sdl2-sys/image\"]\nttf = [\"sdl2-sys/ttf\"]\n# Use hidapi support in SDL. Only 2.0.12 and after\nhidapi = []\n\nuse-bindgen = [\"sdl2-sys/use-bindgen\"]\nuse-pkgconfig = [\"sdl2-sys/use-pkgconfig\"]\nuse-vcpkg = [\"sdl2-sys/use-vcpkg\"]\nuse_mac_framework = [\"sdl2-sys/use_mac_framework\"]\nuse_ios_framework = [\"sdl2-sys/use_ios_framework\"]\nbundled = [\"sdl2-sys/bundled\"]\nstatic-link = [\"sdl2-sys/static-link\"]\n\n[package.metadata.docs.rs]\nfeatures = [\"default\", \"gfx\", \"mixer\", \"image\", \"ttf\"]\n\n[[example]]\nname = \"animation\"\n\n[[example]]\nname = \"audio-capture-and-replay\"\n\n[[example]]\nname = \"audio-queue-squarewave\"\n\n[[example]]\nname = \"audio-squarewave\"\n\n[[example]]\nname = \"audio-wav\"\n\n[[example]]\nname = \"audio-whitenoise\"\n\n[[example]]\nrequired-features = [\"image\"]\nname = \"cursor\"\n\n[[example]]\nname = \"demo\"\n\n[[example]]\nname = \"game-controller\"\n\n[[example]]\nrequired-features = [\"unsafe_textures\"]\nname = \"game-of-life-unsafe-textures\"\n\n[[example]]\nname = \"game-of-life\"\n\n[[example]]\nrequired-features = [\"gfx\"]\nname = \"gfx-demo\"\n\n[[example]]\nname = \"haptic\"\n\n[[example]]\nrequired-features = [\"image\"]\nname = \"image-demo\"\n\n[[example]]\nname = \"joystick\"\n\n[[example]]\nname = \"keyboard-state\"\n\n[[example]]\nname = \"message-box\"\n\n[[example]]\nrequired-features = [\"mixer\"]\nname = \"mixer-demo\"\n\n[[example]]\nname = \"mouse-state\"\n\n[[example]]\nname = \"no-renderer\"\n\n[[example]]\nname = \"relative-mouse-state\"\n\n[[example]]\nname = \"renderer-target\"\n\n[[example]]\nname = \"events\"\n\n[[example]]\nname = \"renderer-texture\"\n\n[[example]]\nname = \"renderer-yuv\"\n\n[[example]]\nrequired-features = [\"ttf\", \"image\"]\nname = \"resource-manager\"\n\n[[example]]\nrequired-features = [\"hidapi\"]\nname = \"sensors\"\n\n[[example]]\nrequired-features = [\"ttf\"]\nname = \"ttf-demo\"\n\n[[example]]\nname = \"window-properties\"\n\n[[example]]\nrequired-features = [\"raw-window-handle\"]\nname = \"raw-window-handle-with-wgpu\"\n\n[package.metadata.vcpkg]\ndependencies = [\"sdl2\"]\n\n# dependencies required when building examples and tests for this crate\ndev-dependencies = [\"sdl2\", \"sdl2-image[libjpeg-turbo,tiff,libwebp]\", \"sdl2-ttf\", \"sdl2-gfx\", \"sdl2-mixer\"]\ngit = \"https://github.com/microsoft/vcpkg\"\nrev = \"2024.05.24\" # release 2024.05.24 # to check for a new one, check https://github.com/microsoft/vcpkg/releases\n\n[package.metadata.vcpkg.target]\nx86_64-pc-windows-msvc = { triplet = \"x64-windows-static-md\" }\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.0595703125,
          "content": "The MIT License (MIT)\n\nCopyright (c) 2013 Mozilla Foundation\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of\nthis software and associated documentation files (the \"Software\"), to deal in\nthe Software without restriction, including without limitation the rights to\nuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of\nthe Software, and to permit persons to whom the Software is furnished to do so,\nsubject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\nFOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\nCOPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\nIN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\nCONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 27.98828125,
          "content": "# Rust-SDL2 [![Build Status][workflows-ci-img]][workflows-ci] [![crates.io badge][crates-io-badge]][crates-io-url]\n\nBindings for SDL2 in Rust\n\n### [Changelog for 0.37.0](changelog.md#v0370)\n\n# Overview\n\nRust-SDL2 is a library for talking to the new SDL2.0 libraries from Rust.\nLow-level C components are wrapped in Rust code to make them more idiomatic and\nabstract away inappropriate manual memory management.\n\nRust-SDL2 uses the MIT license, but SDL2 itself is under the zlib license.\n\n## Available rust features \n\n* `gfx` to link against SDL2\\_gfx and have access to gfx features\n* `image` to link against SDL2\\_image and have access to image reading and writing features\n* `mixer` to link against SDL2\\_mixer and have access to sound mixing features\n* `ttf` to link against SDL2\\_ttf and have access to various font features\n* `raw-window-handle` to enable the crate `raw-window-handle`, which is useful to interop with various other backends.\n* `unsafe-textures` to not have a lifetime in `Texture` structs. Texture are only freed when the program exits, or can be done manually through `unsafe`.\n* `use-bindgen` to customize bindings instead of using pre-generated `sdl_bindings` which were created from a Linux environment. It generates your own custom SDL2 bindings, tailored to your distro. Useful for specific window-related scenarios.\n* `use-vcpkg` to pull SDL2 from vcpkg instead of looking in your system.\n* `use-pkgconfig` use pkg-config to detect where your library is located on your system. Mostly useful on unix systems for static linking.\n* `static-link` to link to SDL2 statically instead of dynamically.\n* `use_mac_framework` to use SDL2 from a Framework, on macOS only\n* `use_ios_framework` to use SDL2 from a Framework, on iOS only\n* `bundled`, which pulls the SDL repository and compiles it from source. More information below.\n\n# Documentation\n\n[Read the documentation here](https://docs.rs/sdl2/).\n\n# Requirements\n\n## Rust\n\nWe currently target the latest stable release of Rust.\n\n## *SDL2.0 development libraries*\n\nSDL2 >= 2.0.26 is recommended to use these bindings; below 2.0.26, you may experience link-time errors as some functions are used here but are not defined in SDL2. If you experience this issue because you are on a LTS machine (for instance, Ubuntu), we definitely recommend you to use the feature \"bundled\" which will compile the lastest stable version of SDL2 for your project.\n\n### \"Bundled\" Feature\n\nSince 0.31, this crate supports a feature named \"bundled\" which compiles SDL2 from source and links it automatically. While this should work for any architecture, you **will** need a C compiler (like `gcc`, `clang`, or MS's own compiler) to use this feature properly.\n\nBy default, macOS and Linux only load libraries from system directories like `/usr/lib`. If you wish to distribute the newly built libSDL2.so/libSDL2.dylib alongside your executable, you will need to add rpath to your executable. Add the following lines to `build.rs` script:\n\n```rust\n#[cfg(target_os=\"macos\")]\nprintln!(\"cargo:rustc-link-arg=-Wl,-rpath,@loader_path\");\n\n#[cfg(target_os=\"linux\")]\nprintln!(\"cargo:rustc-link-arg=-Wl,-rpath,$ORIGIN\");\n```\n\n**This ONLY works with SDL2, NOT SDL2_image, SDL2_mixer, SDL2_ttf, SDL2_gfx`\n\n### Linux\nInstall these through your favourite package management tool, or via\nhttp://www.libsdl.org/\n\nUbuntu example:\n> sudo apt-get install libsdl2-dev\n\nFedora example:\n> sudo dnf install SDL2-devel\n\nArch example:  \n(Arch doesn't have separate regular and development packages, everything goes together.)  \n> sudo pacman -S sdl2\n\nYou might also need a C compiler (`gcc`).\n\n#### Static linking in Linux\n\nYou can choose to link SDL2 statically instead of dynamically with the `static-link` feature.\nOn Linux, you will need to additionally do one of the following:\n* use the `bundled` feature\n* use the feature `use-pkgconfig` so that rustc knows where to look for your SDL2 libraries and its dependencies for static linking. This is required because there is no built-in way to find the resources needed to link statically SDL2 from your system\n* install development libraries with [vcpkg][vcpkg]. Instructions to generate a static binary on Linux and other operating systems using vcpkg are [here][cargo-vcpkg-usage]\n\n### macOS\n#### Homebrew\nOn macOS, it's a good idea to install these via\n[homebrew][homebrew].\n\n```\nbrew install sdl2\n```\n\nIn recent versions of Homebrew, the installed libraries are usually linked into `$(brew --prefix)/lib`.\nIf you are running an older version, the symlink for SDL might reside in `/usr/local/lib`.\n\nTo make linking libraries installed by Homebrew easier, do the following for your respective shell.\n\nAdd this line to your `~/.zshenv` or `~/.bash_profile` depending on whether you use ZSH or Bash.\n```\nexport LIBRARY_PATH=\"$LIBRARY_PATH:$(brew --prefix)/lib\"\n```\n#### MacPorts\nYou can also get sdl2 via `macports`.\n\n```\nsudo port install libsdl2\n```\n\nThen add the following to your `~/.bash_profile` if not already present.\n```\nexport LIBRARY_PATH=\"$LIBRARY_PATH:/opt/local/lib/\"\n```\n\nIf you're having issues with either Homebrew or MacPorts, [see here][pdev-issue].\n\n#### If you are using the SDL2 framework\n\nYou can download and install the SDL2 Mac OS X framework from:\nhttps://www.libsdl.org/download-2.0.php\n\nTo make the `sdl2` crate link with the SDL2 framework, you will need to enable\nthe `use_mac_framework` feature.  To build and test the `sdl2` crate with this\nfeature, use:\n\n> cargo test --features use\\_mac\\_framework\n\nTo depend on the `sdl2` crate with this feature enabled, put the following in\nyour project's `Cargo.toml` file:\n\n```toml\n[dependencies.sdl2]\nfeatures = [\"use_mac_framework\"]\nversion = ...  # Whichever version you are using\n```\n\nAlternatively, you can re-export the feature in your package by putting the\nfollowing in your `Cargo.toml` file:\n\n```toml\n[features]\ndefault = []\nuse_sdl2_mac_framework = [\"sdl2/use_mac_framework\"]\n```\n\nSimilarly for iOS you can follow the same process using the `use_ios_framework` feature. However\nofficial builds of the iOS framework are not available so you must compile your own SDL2.framework.\n\nUsing the iOS framework also requires adding the 'Frameworks' directory to your rpath so that the\ndynamic linker can find SDL2.framework inside your app bundle. This is done by adding this to your\n`build.rs`:\n\n```rust\n#[cfg(target_os=\"ios\")]\nprintln!(\"cargo:rustc-link-arg=-Wl,-rpath,@loader_path/Frameworks\");\n```\n\n#### Static linking on macOS using vcpkg\n\nInstructions to generate a static binary on macOS and other operating systems using [vcpkg][vcpkg] are [here][cargo-vcpkg-usage].\n\n### Windows (MSVC)\n\n1. Download MSVC development libraries from http://www.libsdl.org/ (SDL2-devel-2.0.x-VC.zip).\n2. Unpack SDL2-devel-2.0.x-VC.zip to a folder of your choosing (You can delete it afterwards).\n3. Copy all lib files from\n    > SDL2-devel-2.0.x-VC\\SDL2-2.0.x\\lib\\x64\\\n\n    to (for Rust 1.6 and above)\n    > C:\\Program Files\\Rust\\\\**lib**\\rustlib\\x86_64-pc-windows-msvc\\lib\n\n    or to (for Rust versions 1.5 and below)\n    > C:\\Program Files\\Rust\\\\**bin**\\rustlib\\x86_64-pc-windows-msvc\\lib\n\n    or to your library folder of choice, and ensure you have a system environment variable of\n    > LIB = C:\\your\\rust\\library\\folder\n\n    For Rustup users, this folder will be in\n    > C:\\Users\\\\{Your Username}\\\\.rustup\\toolchains\\\\{current toolchain}\\lib\\rustlib\\\\{current toolchain}\\lib\n\n  Where current toolchain is likely `stable-x86_64-pc-windows-msvc`.\n\n4. Copy SDL2.dll from\n    > SDL2-devel-2.0.x-VC\\SDL2-2.0.x\\lib\\x64\\\n\n    into your cargo project, right next to your Cargo.toml.\n\n 5. When you're shipping your game make sure to copy SDL2.dll to the same directory that your compiled exe is in, otherwise the game won't launch.\n\n#### Static linking with MSVC\n\nThe MSVC development libraries provided by http://libsdl.org/ don't include a static library. This means that if you want to use the `static-link` feature with the windows-msvc toolchain, you have to do one of\n\n- build an SDL2 static library yourself and copy it to your toolchain's `lib` directory; or\n- also enable the `bundled` feature, which will build a static library for you; or\n- use a static SDL2 library from vcpkg as described below.\n\n### Windows (MinGW)\n\n1. Download mingw development libraries from\nhttp://www.libsdl.org/ (SDL2-devel-2.0.x-mingw.tar.gz).\n2. Unpack to a folder of your choosing (You can delete it afterwards).\n3. Copy all lib files from\n    > SDL2-devel-2.0.x-mingw\\SDL2-2.0.x\\x86_64-w64-mingw32\\lib\n\n    to (for Rust 1.6 and above)\n    > C:\\Program Files\\Rust\\\\**lib**\\rustlib\\x86_64-pc-windows-gnu\\lib\n\n    or to (for Rust versions 1.5 and below)\n    > C:\\Program Files\\Rust\\\\**bin**\\rustlib\\x86_64-pc-windows-gnu\\lib\n\n    or to your library folder of choice, and ensure you have a system environment variable of\n    > LIBRARY_PATH = C:\\your\\rust\\library\\folder\n\n    For Rustup users, this folder will be in\n    > C:\\Users\\\\{Your Username}\\\\.rustup\\toolchains\\\\{current toolchain}\\lib\\rustlib\\\\{current toolchain}\\lib\n\n  Where current toolchain is likely `stable-x86_64-pc-windows-gnu`.\n\n4. Copy SDL2.dll from\n    > SDL2-devel-2.0.x-mingw\\SDL2-2.0.x\\x86_64-w64-mingw32\\bin\n\n    into your cargo project, right next to your Cargo.toml.\n\n5. When you're shipping your game make sure to copy SDL2.dll to the same directory that your compiled exe is in, otherwise the game won't launch.\n\n#### Static linking with MinGW\n\nIf you want to use the `static-link` feature with the windows-gnu toolchain, then you will also need the following libraries:\n\n    libimm32.a\n    libversion.a\n    libdinput8.a\n    libdxguid.a\n\nThese files are not currently included with the windows-gnu toolchain, but can be downloaded [here](https://sourceforge.net/projects/mingw-w64/files/). For the x86_64 toolchain, you want the `x86_64-win32-seh` package, and for i686 you want the `i686-win32-dwarf` one.\n\nYou will find the aforementioned libraries under `mingw64/x86_64-w64-mingw32/lib/` (for x86_64) or `mingw32/i686-w64-mingw32/lib/` (for i686). Copy them to your toolchain's `lib` directory (the same one you copied the SDL .a files to).\n\n### Windows with build script\n\n1. Download mingw and msvc development libraries from\nhttp://www.libsdl.org/ (SDL2-devel-2.0.x-mingw.tar.gz & SDL2-devel-2.0.x-VC.zip).\n2. Unpack to folders of your choosing (You can delete it afterwards).\n3. Create the following folder structure in the same folder as your Cargo.toml:\n\n```\ngnu-mingw\\dll\\32\ngnu-mingw\\dll\\64\ngnu-mingw\\lib\\32\ngnu-mingw\\lib\\64\nmsvc\\dll\\32\nmsvc\\dll\\64\nmsvc\\lib\\32\nmsvc\\lib\\64\n```\n\n4. Copy the lib and dll files from the source archive to the directories we created in step 3 like so:\n```\nSDL2-devel-2.0.x-mingw.tar.gz\\SDL2-2.0.x\\i686-w64-mingw32\\bin \t\t-> \tgnu-mingw\\dll\\32\nSDL2-devel-2.0.x-mingw.tar.gz\\SDL2-2.0.x\\x86_64-w64-mingw32\\bin \t-> \tgnu-mingw\\dll\\64\nSDL2-devel-2.0.x-mingw.tar.gz\\SDL2-2.0.x\\i686-w64-mingw32\\lib \t\t-> \tgnu-mingw\\lib\\32\nSDL2-devel-2.0.x-mingw.tar.gz\\SDL2-2.0.x\\x86_64-w64-mingw32\\lib \t-> \tgnu-mingw\\lib\\64\nSDL2-devel-2.0.8-VC.zip\\SDL2-2.0.x\\lib\\x86\\*.dll\t \t\t-> \tmsvc\\dll\\32\nSDL2-devel-2.0.8-VC.zip\\SDL2-2.0.x\\lib\\x64\\*.dll \t\t\t-> \tmsvc\\dll\\64\nSDL2-devel-2.0.8-VC.zip\\SDL2-2.0.x\\lib\\x86\\*.lib\t \t\t-> \tmsvc\\lib\\32\nSDL2-devel-2.0.8-VC.zip\\SDL2-2.0.x\\lib\\x64\\*.lib\t \t\t-> \tmsvc\\lib\\64\n```\n\n5. Create a build script, if you don't already have one put this in your Cargo.toml under `[package]`:\n> build = \"build.rs\"\n\n6. Create a file in the same directory as Cargo.toml called build.rs (if you didn't already have a build script) and paste this into it:\n\n```Rust\nuse std::env;\nuse std::path::PathBuf;\n\nfn main() {\n    let target = env::var(\"TARGET\").unwrap();\n    if target.contains(\"pc-windows\") {\n        let manifest_dir = PathBuf::from(env::var(\"CARGO_MANIFEST_DIR\").unwrap());\n        let mut lib_dir = manifest_dir.clone();\n        let mut dll_dir = manifest_dir.clone();\n        if target.contains(\"msvc\") {\n            lib_dir.push(\"msvc\");\n            dll_dir.push(\"msvc\");\n        }\n        else {\n            lib_dir.push(\"gnu-mingw\");\n            dll_dir.push(\"gnu-mingw\");\n        }\n        lib_dir.push(\"lib\");\n        dll_dir.push(\"dll\");\n        if target.contains(\"x86_64\") {\n            lib_dir.push(\"64\");\n            dll_dir.push(\"64\");\n        }\n        else {\n            lib_dir.push(\"32\");\n            dll_dir.push(\"32\");\n        }\n        println!(\"cargo:rustc-link-search=all={}\", lib_dir.display());\n        for entry in std::fs::read_dir(dll_dir).expect(\"Can't read DLL dir\")  {\n            let entry_path = entry.expect(\"Invalid fs entry\").path();\n            let file_name_result = entry_path.file_name();\n            let mut new_file_path = manifest_dir.clone();\n            if let Some(file_name) = file_name_result {\n                let file_name = file_name.to_str().unwrap();\n                if file_name.ends_with(\".dll\") {\n                    new_file_path.push(file_name);\n                    std::fs::copy(&entry_path, new_file_path.as_path()).expect(\"Can't copy from DLL dir\");\n                }\n            }\n        }\n    }\n}\n```\n\n7. On build the build script will copy the needed DLLs into the same directory as your Cargo.toml, you probably don't want to commit these to any Git repositories though so add the following line to your .gitignore file\n\n`/*.dll`\n\n8. When you're publish your game make sure to copy the corresponding SDL2.dll to the same directory that your compiled exe is in, otherwise the game won't launch.\n\nAnd now your project should build and run on any Windows computer!\n\n\n### Windows (MSVC with vcpkg)\n1. Install [MS build tools](https://visualstudio.microsoft.com/downloads/) and [vcpkg][vcpkg]\n2. Install the needed SDL2 libs: `vcpkg.exe install sdl2-ttf:x64-windows sdl2:x64-windows`\n3. Open a x64 native tools prompt (x64 Native Tools Command Prompt for VS 2019)\n4. set env vars:\n```\nSET PATH=%PATH%;C:\\Users\\my_user\\dev\\vcpkg\\installed\\x64-windows\\bin\nSET INCLUDE=%INCLUDE%;C:\\Users\\my_user\\dev\\vcpkg\\installed\\x64-windows\\include\nSET LIB=%LIB%;C:\\Users\\my_user\\dev\\vcpkg\\installed\\x64-windows\\lib\n```\n5. `cargo build`\n\n### Windows, Linux and macOS with vcpkg\n\nAnother method of getting the development libraries is with [vcpkg][vcpkg]. To set up a project to build a static binary on Windows (MSVC), Linux or macOS that is buildable like this:\n```sh\ncargo install cargo-vcpkg\ncargo vcpkg build\ncargo build\n```\n\nadd the following your `Cargo.toml`:\n\n```toml\n[dependencies.sdl2]\nversion = \"0.37\"\ndefault-features = false\nfeatures = [\"ttf\",\"image\",\"gfx\",\"mixer\",\"static-link\",\"use-vcpkg\"]\n\n[package.metadata.vcpkg]\ndependencies = [\"sdl2\", \"sdl2-image[libjpeg-turbo,tiff,libwebp]\", \"sdl2-ttf\", \"sdl2-gfx\", \"sdl2-mixer\"]\ngit = \"https://github.com/microsoft/vcpkg\"\nrev = \"2024.05.24\" # release 2024.05.24 # to check for a new one, check https://github.com/microsoft/vcpkg/releases\n\n[package.metadata.vcpkg.target]\nx86_64-pc-windows-msvc = { triplet = \"x64-windows-static-md\" }\n```\n\nMore information on the `cargo vcpkg` tool is [here][cargo-vcpkg].\n\n# Installation\n\nIf you're using [cargo][crates] to manage your project, you can\ndownload through Crates.io:\n\n```toml\n    [dependencies]\n    sdl2 = \"0.37\"\n```\n\nAlternatively, pull it from GitHub to obtain the latest version from master\n\n```toml\n    [dependencies.sdl2]\n    git = \"https://github.com/rust-sdl2/rust-sdl2\"\n```\n\nOtherwise, clone this repo and run [cargo][crates]\n\n```\ncargo build\n```\n\nYou can enable features such as ttf, image, gfx and mixer by\nadding this instead:\n\n```toml\n    [dependencies.sdl2]\n    version = \"0.37\"\n    default-features = false\n    features = [\"ttf\",\"image\",\"gfx\",\"mixer\"]\n```\n\nThose features need their respective libraries, which\ncan be found at these locations : (the install process\nis the same as SDL2)\n\n* [image, ttf, mixer](https://www.libsdl.org/projects/)\n* [gfx](http://sourceforge.net/projects/sdl2gfx/)\n\n## What about sdl2\\_net ?\n\nAs of now, sdl2\\_net is meaningless compared to what other crates\nsuch as `serde` and `bincode` can offer.\nWe highly recommend using those to develop anything UDP or TCP\nrelated (along with futures or TCP/UDP from the standard library).\n\nIf you still want an implementation of sdl2\\_net, you can try to\nadd it in this repo as a feature via a Pull Request. A somewhat\noutdated version of this binding can be found\n[here](https://github.com/Limvot/rust-sdl2_net)\n\n# Demo\n\nWe have several simple example projects included:\n\n> cargo run --example demo\n\nYou can see the full list in the `examples/` folder. Some examples require some features, you can enable them like so:\n\n> cargo run --example gfx-demo --features \"gfx\"\n\nReplace \"gfx\" by the feature(s) needed for the example you want.\n\n# About the `unsafe_textures` feature\n\nIn the `sdl2::render` module, `Texture` has by default lifetimes to prevent it from out-living its parent `TextureCreator`.\nThese lifetimes are sometimes too hard to deal with in Rust, and so you have the option to enable the `unsafe_textures` feature.\n\nThis removes the lifetimes on the `Texture`s, at the cost of optional manual memory management. If you want to manually destroy\nthe `Texture`s you use, you can call the `destroy` method of your `Texture`s, but beware that *it should not* be called if none of\nthe parents (`Canvas` or `TextureCreator`) are alive. If you do not call this method, the memory will simply be freed when\nthe last `Canvas` or the last `TextureCreator` will be freed.\n\nThere is no online documentation for this feature, however you can build it yourself in your project by enabling the feature in your\nCargo.toml, running `cargo doc` and accessing `target/doc/sdl2/index.html` via a browser.\n\n# Generating sdl2-sys with bindgen\n\nThe sdl2-sys that was generated for this crate is very generic and can be used on a lot of platforms with very few limitations. However,\nyou may sometimes face trouble when using platform-specific features of SDL2, for instance the WindowManager category.\n\nThe feature \"use-bindgen\" allows you to avoid this limitation by generating the proper bindings depending on your target. It will take\nthe headers based on what `pkg-config` outputs (if you enabled the feature \"use-pkg-config\") and generate bindings based on them.\nIf you don't have pkg-config or disabled the feature, it will try to get the headers in `SDL-2.0.8/include` of this crate instead.\n\nIf somehow you have your own headers that you want to use (use a beta version, an older version, ...),\nyou can set the environment variable \"SDL2_INCLUDE_PATH\" and those headers will be used by bindgen instead.\n\n# Using sdl2-sys to provide SDL2 headers/library\n\nIf you are creating a `*-sys` crate for a library which requires SDL2, you can use `sdl2-sys` to provide both the compiled library\nand the headers for SDL2. \n\nFollow the following process to get the header directory. In the `Cargo.toml` for your crate, add `sdl2-sys` as a dependency (not a build-dependency).\nCargo will then provide your build script with an environment variable `DEP_SDL2_INCLUDE` which is populated with the include directory for SDL2.\nIf there is more than one directory, they are combined with `:` as a separator. Pass these directories to whatever is building your C/C++.\n\nOnce everything is linked together, there will be a single copy of SDL2 (the one provided by `sdl2-sys`) for all C, C++, and Rust code.\n\nFor more discussion see the corresponding [issue][dep-sdl2-include-issue]\n\n# OpenGL\n\nThere are two ways to use OpenGL:\n\n* As a backend for sdl2::render, where everything is done for you by sdl2. It is the default for linux devices.\n* Manually, using only sdl2 as a \"shell\" for your window (akin to `glutin` and `winit` crates), and still use sdl2's joystick, events, audio, text input, ect capabilities.\n\nIf you want to use OpenGL, you also need the\n[gl-rs][gl-rs] package. If you're using\n[cargo][crates], just add these lines to your Cargo.toml:\n\n```toml\n    [dependencies.gl]\n    git = \"https://github.com/bjz/gl-rs\"\n```\n\nYou have two options to use OpenGL with sdl2:\n\n* Use OpenGL with Canvas and use sdl2::render \n* Use OpenGL directly on the Window \"shell\" and use manual OpenGL calls to render something\n\n## Use sdl2::render\n\nFirst, find the OpenGL driver from SDL:\n\n```rust\nfn find_sdl_gl_driver() -> Option<u32> {\n    for (index, item) in sdl2::render::drivers().enumerate() {\n        if item.name == \"opengl\" {\n            return Some(index as u32);\n        }\n    }\n    None\n}\n\nfn main() {\n    let sdl_context = sdl2::init().unwrap();\n    let video_subsystem = sdl_context.video().unwrap();\n    let window = video_subsystem.window(\"Window\", 800, 600)\n        .opengl() // this line DOES NOT enable opengl, but allows you to create/get an OpenGL context from your window.\n        .build()\n        .unwrap();\n    let canvas = window.into_canvas()\n        .index(find_sdl_gl_driver().unwrap())\n        .build()\n        .unwrap();\n\n    // ...\n}\n```\n\nIf you don't plan to use OpenGL calls via the [gl-rs][gl-rs] crate, you can stop here. SDL2 will automatically use the OpenGL backend\n\nIf you plan to have your own calls intertwined with the sdl2 calls, you need to use the context of your canvas first:\n\n```rust\n\n// initialization\ngl::load_with(|name| video_subsystem.gl_get_proc_address(name) as *const _);\n\n// sdl::render creates a context for you, if you use a Canvas you need to use it.\ncanvas.window().gl_set_context_to_current();\n\n// ... in the main loop ...\nunsafe {\n    gl::ClearColor(0.6, 0.0, 0.8, 1.0);\n    gl::Clear(gl::COLOR_BUFFER_BIT);\n}\ncanvas.present();\n```\n\nBe wary though, sdl2 has its own internal state which you should avoid messing with.\nAvoid using manual OpenGL in the middle of SDL2 calls, or make sure to restore the previous state.\n\n## Use OpenGL calls manually\n\n```rust\nextern crate sdl2;\nextern crate gl;\n\nuse sdl2::event::Event;\nuse sdl2::keyboard::Keycode;\nuse sdl2::video::GLProfile;\n\nfn main() {\n    let sdl_context = sdl2::init().unwrap();\n    let video_subsystem = sdl_context.video().unwrap();\n    \n    let gl_attr = video_subsystem.gl_attr();\n    gl_attr.set_context_profile(GLProfile::Core);\n    gl_attr.set_context_version(3, 3);\n\n    let window = video_subsystem.window(\"Window\", 800, 600)\n        .opengl()\n        .build()\n        .unwrap();\n\n    // Unlike the other example above, nobody created a context for your window, so you need to create one.\n    let ctx = window.gl_create_context().unwrap();\n    gl::load_with(|name| video_subsystem.gl_get_proc_address(name) as *const _);\n    \n    debug_assert_eq!(gl_attr.context_profile(), GLProfile::Core);\n    debug_assert_eq!(gl_attr.context_version(), (3, 3));\n\n    let mut event_pump = sdl_context.event_pump().unwrap();\n\n    'running: loop {\n        unsafe {\n            gl::ClearColor(0.6, 0.0, 0.8, 1.0);\n            gl::Clear(gl::COLOR_BUFFER_BIT);\n        }\n\n        window.gl_swap_window();\n        for event in event_pump.poll_iter() {\n            match event {\n                Event::Quit {..} | Event::KeyDown { keycode: Some(Keycode::Escape), .. } => {\n                    break 'running\n                },\n                _ => {}\n            }\n        }\n        ::std::thread::sleep(::std::time::Duration::new(0, 1_000_000_000u32 / 60));\n    }\n}\n```\n\nAs mentionned above, this method is useful when you don't care about sdl2's render capabilities, but you do care about\nits audio, controller and other neat features that sdl2 has.\n\nYou don't have to worry about messing with the state intertwined with sdl2 or a version you don't like: SDL2 will never\ncall any OpenGL function outside the `render` module.\n\n# Vulkan\n\nTo use Vulkan, you need a Vulkan library for Rust. This example uses the\n[Vulkano](https://github.com/vulkano-rs/vulkano) library. Other libraries may use different data\ntypes for raw Vulkan object handles. The procedure to interface SDL2's Vulkan functions with these\nwill be different for each one.\n\nFirst, make sure you enable the [`raw-window-handle`](#support-for-raw-window-handle) feature.\n\n```rust\nextern crate sdl2;\nextern crate vulkano;\n\nuse sdl2::event::Event;\nuse sdl2::keyboard::Keycode;\nuse vulkano::instance::{Instance, InstanceCreateInfo, InstanceExtensions};\nuse vulkano::swapchain::Surface;\nuse vulkano::VulkanLibrary;\n\nfn main() {\n    let sdl_context = sdl2::init().unwrap();\n    let video_subsystem = sdl_context.video().unwrap();\n\n    let window = video_subsystem\n        .window(\"Window Title - My Vulkano-SDL2 application\", 1024, 768)\n        .vulkan()\n        .build()\n        .unwrap();\n\n    let instance_extensions =\n        InstanceExtensions::from_iter(window.vulkan_instance_extensions().unwrap());\n\n    let instance = Instance::new(\n        VulkanLibrary::new().unwrap(),\n        InstanceCreateInfo {\n            enabled_extensions: instance_extensions,\n            ..Default::default()\n        },\n    )\n    .unwrap();\n\n    // SAFETY: Be sure not to drop the `window` before the `Surface` or vulkan `Swapchain`!\n    // (SIGSEGV otherwise)\n    let surface = unsafe { Surface::from_window_ref(instance.clone(), &window) };\n\n    let mut event_pump = sdl_context.event_pump().unwrap();\n\n    'running: loop {\n        for event in event_pump.poll_iter() {\n            match event {\n                Event::Quit { .. }\n                | Event::KeyDown {\n                    keycode: Some(Keycode::Escape),\n                    ..\n                } => {\n                    break 'running;\n                }\n                _ => {}\n            }\n        }\n        ::std::thread::sleep(::std::time::Duration::new(0, 1_000_000_000u32 / 60));\n    }\n}\n```\n\n# Support for raw-window-handle\n\n`raw-window-handle` can be enabled using the feature name:\n\n```toml\n[dependencies.sdl2]\nversion = \"0.37\"\nfeatures = [\"raw-window-handle\"]\n```\n\nAn example working with [`wgpu`](https://crates.io/crates/wgpu) is also available:\n\n```bash\ncargo run --example raw-window-handle-with-wgpu --features raw-window-handle\n```\n\n### sdl2 with raw-window-handle on macOS:\n\nOn macOS the `RawWindowHandle.ns_view` field is returned null. Libraries consuming the `RawWindowHandle` (such as \n`wgpu`) should determine a sane default for `ns_view`. If they do not, please file an issue with the associated \nproject.\n\n### raw-window-handle on Android\n\nOn some platforms, including Android, SDL2 tries to create the OpenGL context by itself even without creating\na renderer. This can manifest in errors like `VK_ERROR_NATIVE_WINDOW_IN_USE_KHR` when initializing Vulkan or GLES.\nAdd the following code before creating a window to fix the errors:\n```rust\nsdl2::hint::set(\"SDL_VIDEO_EXTERNAL_CONTEXT\", \"1\")\n```\n\n# When things go wrong\nRust, and Rust-SDL2, are both still heavily in development, and you may run\ninto teething issues when using this. Before panicking, check that you're using\nthe latest version of both Rust and Cargo, check that you've updated Rust-SDL2\nto the latest version, and run `cargo clean`. If that fails, please let us know\non the issue tracker.\n\n# Contributing\n\nAny Pull Request is welcome, however small your contribution may be ! There are, however, conditions to contribute:\n\n* New features must be properly documented, be it via examples or inline documentation (via `cargo doc`). Documentation must be for the end user as well as your next fellow contributor.\n* Breaking changes must have a proper argumentation with it. While the pre-1.0 state of this crate allows us to be somewhat unstable, **useless breaking changes will be denied**.\n* Minor changes, breaking changes and new features added via Pull Request must be added in the [changelog][changelog] file. It is now **mandatory** to log your changes in the changelog. A short description with a link to your commit/pull request within GitHub is fine. Internal, documentation or meta-changes (travis build change, README instructions updates, ...) don't have to be added in the changelog.\n\n[changelog]: ./changelog.md\n[crates-io-badge]: https://img.shields.io/crates/v/sdl2.svg\n[crates-io-url]: https://crates.io/crates/sdl2\n[workflows-ci-img]: https://github.com/Rust-SDL2/rust-sdl2/actions/workflows/CI.yml/badge.svg?branch=master\n[workflows-ci]: https://github.com/Rust-SDL2/rust-sdl2/actions/workflows/CI.yml\n[early-sdl]: https://github.com/brson/rust-sdl\n[homebrew]: http://brew.sh/\n[crates]: http://crates.io/\n[examples]: https://github.com/jdeseno/rs-sdl2-examples\n[dep-sdl2-include-issue]: https://github.com/Rust-SDL2/rust-sdl2/pull/968\n[gl-rs]: https://github.com/bjz/gl-rs\n[pdev-issue]: https://github.com/PistonDevelopers/rust-empty/issues/175\n[vcpkg]: https://github.com/microsoft/vcpkg\n[cargo-vcpkg]: https://crates.io/crates/cargo-vcpkg\n[cargo-vcpkg-usage]: #Windows,-Linux-and-macOS-with-vcpkg\n"
        },
        {
          "name": "assets",
          "type": "tree",
          "content": null
        },
        {
          "name": "build.rs",
          "type": "blob",
          "size": 0.1298828125,
          "content": "fn main() {\n    #[cfg(any(target_os = \"openbsd\", target_os = \"freebsd\"))]\n    println!(r\"cargo:rustc-link-search=/usr/local/lib\");\n}\n"
        },
        {
          "name": "changelog.md",
          "type": "blob",
          "size": 19.05078125,
          "content": "In this file will be listed the changes, especially the breaking ones that one should be careful of\nwhen upgrading from a version of rust-sdl2 to another.\n\n### Next\n\n[PR #1416](https://github.com/Rust-SDL2/rust-sdl2/pull/1416) Apply clippy fixes, fix deprecations and other code quality improvements.\n\n[PR #1408](https://github.com/Rust-SDL2/rust-sdl2/pull/1408) Allow comparing `Version`s, add constant with the version the bindings were compiled with.\n\n[PR #1407](https://github.com/Rust-SDL2/rust-sdl2/pull/1407) Add new use_ios_framework for linking to SDL2.framework on iOS\n\n### v0.37.0\n\n[PR #1406](https://github.com/Rust-SDL2/rust-sdl2/pull/1406) Update bindings to SDL 2.0.26, add Event.is\\_touch() for mouse events, upgrade wgpu to 0.20 in examples\n\n[PR #1398](https://github.com/Rust-SDL2/rust-sdl2/pull/1398) Fix bug in rect.shift logic\n\n[PR #1404](https://github.com/Rust-SDL2/rust-sdl2/pull/1404) Make `SdlDrop` a zero sized type.\n\n[PR #1394](https://github.com/Rust-SDL2/rust-sdl2/pull/1394) Do not pull the SDL repository if not using bundled in build.rs\n\n[PR #1394](https://github.com/Rust-SDL2/rust-sdl2/pull/1394) Fix static linking\n\n[PR #1389](https://github.com/Rust-SDL2/rust-sdl2/pull/1389) Fix some undefined behavior.\n\n[PR #1378](https://github.com/Rust-SDL2/rust-sdl2/pull/1378) **BREAKING CHANGE** Change `Keycode` to be a struct rather than an enum. Fix `Keycode::from_scancode` for non-QWERTY keyboard layouts.\n\n[PR #1390](https://github.com/Rust-SDL2/rust-sdl2/pull/1390) Apply clippy fixes, fix deprecations and other code quality improvements.\n\n[PR #1385](https://github.com/Rust-SDL2/rust-sdl2/pull/1385) Upgrade raw-window-handle to 0.6.0\n\n[PR #1380](https://github.com/Rust-SDL2/rust-sdl2/pull/1380) Add controller vendor\\_id() and product\\_id()\n\n[PR #1368](https://github.com/Rust-SDL2/rust-sdl2/pull/1368) Remove unnecessary unsafe in Window interface. Make Window `Clone`.\n\n[PR #1366](https://github.com/Rust-SDL2/rust-sdl2/pull/1366) Add Primary Selection bindings.\n\n### v0.36.0\n\n[PR #1270](https://github.com/Rust-SDL2/rust-sdl2/pull/1270) **BREAKING CHANGE** Remove &mut self requirement in `TimerSubsystem::delay`; Add `TimerSubsystem::ticks64`\n\n[PR #1275](https://github.com/Rust-SDL2/rust-sdl2/pull/1275) **BREAKING CHANGE** Update raw-window-handle to 0.5\n\n[PR #1225](https://github.com/Rust-SDL2/rust-sdl2/pull/1225) Update wgpu to 0.12 in examples\n\n[PR #1250](https://github.com/Rust-SDL2/rust-sdl2/pull/1250) Add `lib64` to native library search path when using bundled feature\n\n[PR #1240](https://github.com/Rust-SDL2/rust-sdl2/pull/1240) **BREAKING CHANGE** Take `PixelMasks` by reference\n\n[PR #1254](https://github.com/Rust-SDL2/rust-sdl2/pull/1254) **BREAKING CHANGE** Make `SdlDrop` and `SubsystemDrop` safer; forbid external code from constructing `SdlDrop`\n\n[PR #1318](https://github.com/Rust-SDL2/rust-sdl2/pull/1318) Add NV12, NV21 to PixelFormatEnum\n\n[PR #1332](https://github.com/Rust-SDL2/rust-sdl2/pull/1332) Fix `size_hint` implementations for `{audio,video,render}::DriverIterator`\n\n[PR #1333](https://github.com/Rust-SDL2/rust-sdl2/pull/1333) Implement `FusedIterator`, `DoubleEndedIterator`, `and nth[_back]` for `{audio,video,render}::DriverIterator`\n\n[PR #1337](https://github.com/Rust-SDL2/rust-sdl2/pull/1337) Fix \"Cannot initialize Sdl from more than one thread\" for tests / CI\n\n[PR #1346](https://github.com/Rust-SDL2/rust-sdl2/pull/1346) Add basic Shaped Window support\n\n[PR #1314](https://github.com/Rust-SDL2/rust-sdl2/pull/1314) Add \"ALWAYS ON TOP\" support for X11\n\n### v0.35.2\n\n[PR #1173](https://github.com/Rust-SDL2/rust-sdl2/pull/1173) Fix segfault when using timer callbacks\n\n[PR #1183](https://github.com/Rust-SDL2/rust-sdl2/pull/1183) WinRT support for raw-window-handle\n\n[PR #1182](https://github.com/Rust-SDL2/rust-sdl2/pull/1182) Updated raw-window-handle to 0.4\n\n[PR #1189](https://github.com/Rust-SDL2/rust-sdl2/pull/1189) Added `AudioQueue::queue_audio` and deprecated `AudioQueue::queue`\n\n[PR #1164](https://github.com/Rust-SDL2/rust-sdl2/pull/1164) Added raw-window-handle support for Android\n\n[PR #1165](https://github.com/Rust-SDL2/rust-sdl2/pull/1165) Added binding for `SDL_GetDisplayOrientation` and `SDL_DISPLAYEVENT`\n\n### v0.35.0\n\n* **BREAKING CHANGE** Update `sdl2-sys/sdl_bindings.rs` to use enums instead of consts. If you were using `sdl2-sys`'s\nenum variants directly in your project, you may be affected. If you only used sdl2 calls, there should not be any problems.\n\n* **BREAKING CHANGE** SDL 2.0.14 or higher is now recommended due to the new binding being added for `SDL_OpenURL`. If you get linking errors, upgrade your SDL2 libraries, or swap to using the `bundled` feature.\n\n[PR #1138](https://github.com/Rust-SDL2/rust-sdl2/pull/1138) Added binding for `SDL_OpenURL`\n\n[PR #1150](https://github.com/Rust-SDL2/rust-sdl2/pull/1150) Do not download SDL2 sources when using bundled feature\n\n[PR #1112](https://github.com/Rust-SDL2/rust-sdl2/pull/1112) Add wrapper functions for `SDL_RenderSetIntegerScale` and `SDL_RenderGetIntegerScale`\n\n[PR #1156](https://github.com/Rust-SDL2/rust-sdl2/pull/1156) **Maybe breaking change**: new variants to enum `GameController`, and prevent panic with unrecognized buttons.\n\n[PR #1153](https://github.com/Rust-SDL2/rust-sdl2/pull/1153) `SDL_GL_GetCurrentContext` and `SDL_RenderFlush` added.\n\n[PR #1131](https://github.com/Rust-SDL2/rust-sdl2/pull/1131) Added Sensor API.\n\n### v0.34.5\n\n[PR #1100](https://github.com/Rust-SDL2/rust-sdl2/pull/1100) Added binding for `SDL_GetDisplayUsableBounds`\n\n[PR #1102](https://github.com/Rust-SDL2/rust-sdl2/pull/1102) Correctly se linux and macSO built libraries when using bundled without static-link.\n\n[PR #1098](https://github.com/Rust-SDL2/rust-sdl2/pull/1098) Fix potential heap corruption when using AudioCVT::convert\n\n[PR #1088](https://github.com/Rust-SDL2/rust-sdl2/pull/1088) Rollback of PR #1081: Broke dynamic linking on Windows\n\nVarious fixes to CI.\n\n### v0.34.4\n\n[PR #1086](https://github.com/Rust-SDL2/rust-sdl2/pull/1086) Update bundled to use SDL2 2.0.14\n\n[PR #1033](https://github.com/Rust-SDL2/rust-sdl2/pull/1033) Changed signature of TimerSubsystem::ticks to accept `&self`.\n\n[PR #1057](https://github.com/Rust-SDL2/rust-sdl2/pull/1057): fix memory safety bug in set_error\n\n[PR #1081](https://github.com/Rust-SDL2/rust-sdl2/pull/1081): Allow bundled build to be built in debug mode.  Fixes issue when linking binary with mixed debug+release CRT dependencies.\n\n[PR #1080](https://github.com/Rust-SDL2/rust-sdl2/pull/1080): Fix line endings of patches to lf so patching of sources works on Windows.\n\n[PR #1031](https://github.com/Rust-SDL2/rust-sdl2/pull/1031): Add patch to fix metal detection (https://bugzilla.libsdl.org/show_bug.cgi?id=4988)\n\n### v0.34.3\n\n[PR #1027](https://github.com/Rust-SDL2/rust-sdl2/pull/1027): upgrade \"bundled\" version of SDL2 to 2.0.12\n[PR #1020](https://github.com/Rust-SDL2/rust-sdl2/pull/1020): revert undefined behavior introduction.\n[Commit](https://github.com/Rust-SDL2/rust-sdl2/commit/9d1851b7dfa53168d22c5c17ca941088e9ab4b34): Fix clippy issue\n[Commit](https://github.com/Rust-SDL2/rust-sdl2/commit/eaa01c597e08f08962b47a862dfdc2b5a0f63b5d): Temporarily suppress dangerous clippy hints\n[PR#1014](https://github.com/Rust-SDL2/rust-sdl2/pull/1014): add `load_texture_bytes` interface for load texture from buffer\n\n### v0.34.2\n\n[PR #1012](https://github.com/Rust-SDL2/rust-sdl2/pull/1012)\nFix use after free with AudioDevice::open and AudioDevice::open\\_queue\n\n[PR #1010](https://github.com/Rust-SDL2/rust-sdl2/pull/1010)\nFix compilation with gcc10.\n\n[PR #1009](https://github.com/Rust-SDL2/rust-sdl2/pull/1009)\nAdd support for linking to development libraries from vcpkg, and automatically setting up a vcpkg installation using `cargo-vcpkg`.\n\n### v0.34.1\n\n[PR #1004](https://github.com/Rust-SDL2/rust-sdl2/pull/1004) + [PR #1005](https://github.com/Rust-SDL2/rust-sdl2/pull/1005):\nAdd convenience functions for Window and Event.\n\n[PR #996](https://github.com/Rust-SDL2/rust-sdl2/pull/996):\nImpl `From<i32>` for `WindowPos`.\n\n[PR #988](https://github.com/Rust-SDL2/rust-sdl2/pull/988):\nAdd convenience functions for `Texture`.\n\n### v0.34.0\n\n[PR #962](https://github.com/Rust-SDL2/rust-sdl2/pull/962):\nAdded `raw-window-handle` support for Windows, Linux (X11 and Wayland) and macOS.\n\n[PR #964](https://github.com/Rust-SDL2/rust-sdl2/pull/964):\n**Breaking change**: Change joystick instance IDs from i32 to u32.\n\n[PR #965](https://github.com/Rust-SDL2/rust-sdl2/pull/965):\nAdded invert method for Color, and added more Color names as constants.\n\n[PR #968](https://github.com/Rust-SDL2/rust-sdl2/pull/968)\nPass SDL2 include directories to `sdl2-sys`'s dependant crates through `DEP_SDL2_INCLUDE`.\n\n[PR #970](https://github.com/Rust-SDL2/rust-sdl2/pull/970)\nAdd `Chunk::from_buffer` in mixer.\n\n[PR #976](https://github.com/Rust-SDL2/rust-sdl2/pull/976)\nFix compilation with `use-bingen` feature.\n\n[PR #977](https://github.com/Rust-SDL2/rust-sdl2/pull/977)\nAdd `cpuinfo::has_avx2` and `cpuinfo::has_avx512f`\n\n[PR #982](https://github.com/Rust-SDL2/rust-sdl2/pull/982)\nSupport for loading Opus format in mixer.\n\n[PR #980](https://github.com/Rust-SDL2/rust-sdl2/pull/980)\nFix compilation on Windows.\n\n### v0.33\n\n[PR #956](https://github.com/Rust-SDL2/rust-sdl2/pull/956) + [PR #960](https://github.com/Rust-SDL2/rust-sdl2/pull/960) + [PR #951](https://github.com/Rust-SDL2/rust-sdl2/pull/951):\nFix some build targets.\n\n[PR #948](https://github.com/Rust-SDL2/rust-sdl2/pull/948) + [PR #957](https://github.com/Rust-SDL2/rust-sdl2/pull/957):\nRemove the `num` dependency.\n\n[PR #947](https://github.com/Rust-SDL2/rust-sdl2/pull/947):\nUpgraded the \"bundled\" version of SDL2 to 2.0.10\n\n[PR #940](https://github.com/Rust-SDL2/rust-sdl2/pull/940):\n**Breaking change** Removed the `rand` dependency for random colors. You will have to implement your own random colors from now on.\n\n[PR #933](https://github.com/Rust-SDL2/rust-sdl2/pull/933):\n**Breaking change** Removed AudioFormatNum::zero(), use AudioFormatNum::SILENCE constant instead.\n\n[PR #907](https://github.com/Rust-SDL2/rust-sdl2/pull/907):\nChanged the data type to i32 for the `which` field for the events `ControllerDeviceAdded` and `JoyDeviceAdded`.\n\n[PR #882](https://github.com/Rust-SDL2/rust-sdl2/pull/882):\nIgnore unknown bits in `SDL_Keysym`'s `mod` field (key modifiers) when constructing `Event::KeyDown` and `Event::KeyUp`. Deprecate `sdl2::event::Event::unwrap_keymod`, which had been made public accidentally.\n\n[PR #898](https://github.com/Rust-SDL2/rust-sdl2/pull/898):\nImplements `TryFrom<PixelFormatEnum>` for `PixelFormat`\n\n### v0.32.2\n\n[PR #868](https://github.com/Rust-SDL2/rust-sdl2/pull/868):\nAdded inplace operations for `rect::Point`.\n\n[PR #827](https://github.com/Rust-SDL2/rust-sdl2/pull/827):\nAdded 32-bit array pixelformats\n\n[PR #824](https://github.com/Rust-SDL2/rust-sdl2/pull/824):\nAdded `controller::set_rumble` and `joystick::set_rumble`, wrappers for `SDL_GameControllerRumble` and `SDL_JoystickRumble` respectively.\n\n[PR #867](https://github.com/Rust-SDL2/rust-sdl2/pull/867):\nAdded `Window::opacity` and `Window::set_opacity`, wrappers for `SDL_GetWindowOpacity` and `SDL_SetWindowOpacity` respectively. This bumps the minimum `SDL2` version requirement from `2.0.4` to `2.0.5`.\n\n### v0.32\n\n[PR #790](https://github.com/Rust-SDL2/rust-sdl2/pull/790): Added missing `window_id` field to `Event::DropFile`\n\n[PR #789](https://github.com/Rust-SDL2/rust-sdl2/pull/789): Audio Safety Fixes\n\n[PR #785](https://github.com/Rust-SDL2/rust-sdl2/pull/785): Vulkan Support\n\n[PR #782](https://github.com/Rust-SDL2/rust-sdl2/pull/782)\n* Move ffi of features (mixer, ...) into `sys`\n* Updated SDL2's default version to 2.0.8\n\n[PR #780](https://github.com/Rust-SDL2/rust-sdl2/pull/780): Fixed a panic in `keyboard::Mod`\n\n[PR #775](https://github.com/Rust-SDL2/rust-sdl2/pull/775): Added `get_platform`\n\n[PR #774](https://github.com/Rust-SDL2/rust-sdl2/pull/774): `add_timer` is now must_use\n\n[PR #764](https://github.com/Rust-SDL2/rust-sdl2/pull/764): impl `Hash` for `Point` and `Rect`\n\n[PR #763](https://github.com/Rust-SDL2/rust-sdl2/pull/763): Allow `-sys` to build for `windows-gnu` target\n\n[PR #751](https://github.com/Rust-SDL2/rust-sdl2/pull/751):\n**Breaking change** `gl_setswap_interval` now returns a `Result` instead of a `bool`.\n\n[PR #759](https://github.com/Rust-SDL2/rust-sdl2/pull/759): Expose Joystick power level\n\n[PR #751](https://github.com/Rust-SDL2/rust-sdl2/pull/751)\n* Fix memory leak in `filesystem::base_path()`\n* Fix memory leak on `ClipboardUtil::clipboard_text()`\n\n[PR #740](https://github.com/Rust-SDL2/rust-sdl2/pull/740): Implement Debug for Event\n\n[PR #737](https://github.com/Rust-SDL2/rust-sdl2/pull/737):\nFix `ClipboardUtil::set_clipboard_text` to return an Ok when it went well.\n\n[PR #733](https://github.com/Rust-SDL2/rust-sdl2/pull/733):\nAdd `video::border_size -> Result<(u16, u16, u16, u16), String>` equivalent of `SDL_GetWindowBorderSize()`\n\n[PR #732](https://github.com/Rust-SDL2/rust-sdl2/pull/732):\nImplemented `From<(u8, u8, u8)>` and `From<(u8, u8, u8, u8)>` for `pixels::Color`.\n  `Canvas.set_draw_color` can now be called with tuples or other types which implements `Into<pixels::Color>`\n\n[PR #279](https://github.com/Rust-SDL2/rust-sdl2/pull/729)\n\n* **Breaking change** set\\_video\\_minimize\\_on\\_focus\\_lost was renamed to …minimize\\_on\\_focus\\_loss, as it should be. As a bonus, it works now.\n* Although this is a breaking change, this function was not working in the first place, so this is hardly a true breaking change\n\n### v0.31\n\n[PR #693](https://github.com/Rust-SDL2/rust-sdl2/pull/693), [PR #720](https://github.com/Rust-SDL2/rust-sdl2/pull/720)\n\n* Adds feature \"bundled\" as well as \"static-link\". Entirely compatible wit hthe \"use-bindgen\" feature. Windows-gnu is not supported yet, any help is needed on that side, but every other major platform should be supported.\n\n[PR #711](https://github.com/Rust-SDL2/rust-sdl2/pull/711)\n\n* **Breaking change** Change HatState::Leftdown casing into HatState::LeftDown to be consistent with naming.\n\n[PR #695](https://github.com/Rust-sdl2/rust-sdl2/pull/695)\n\n* sdl2-sys can now be generated at compile time by bindgen (Opt-in required\n  with \"use-bindgen\" feature)\n* The new sdl2-sys source code is generated by bindgen, hence **almost everything\n  that uses sdl2-sys will be broken**. The fixes are small but still preset.\n\n[PR #673](https://github.com/Rust-sdl2/rust-sdl2/pull/673)\n\n* Support Audio Capture in AudioCallbacks.\n\n[PR #684](https://github.com/Rust-sdl2/rust-sdl2/pull/684)\n\n* **Breaking change** Make get\\_swap\\_interval return an enum instead of i32\n* The signature of set\\_swap\\_interval has been changed as well, but it shouldn't\n  breaking existing code too much.\n\n[PR #683](https://github.com/Rust-sdl2/rust-sdl2/pull/683)\n\n* Adds the `unsafe_textures` feature to this crate, allowing to get rid of the lifetimes\n  in `Texture`s in the `render` module.\n\n[PR #704](https://github.com/Rust-SDL2/rust-sdl2/pull/704)\n\n* Adds the `Music::from_static_bytes` function, which creates a Music instance with the\n  static lifetime from a buffer that also has a static lifetime.\n\n[PR #708](https://github.com/Rust-SDL2/rust-sdl2/pull/708)\n\n* Makes the fields of the `sdl2::mixer::Channel(i32)` and `sdl::mixer::Group(i32)` structs\n  public so they can be instantiated directly, and deprecates `sdl2::mixer::channel(i32)`.\n\n[PR #714](https://github.com/Rust-SDL2/rust-sdl2/pull/714)\n\n* **Breaking change** Updates the `which` fields of `sdl2::Event::ControllerDeviceAdded` and `sdl2::Event::JoyDeviceAdded` to be `u32`s so they can be used with `sdl2::GameControllerSubsystem` and `sdl::JoystickSubsystem` methods directly.\n* **Breaking change** Updates `sdl2::HapticSubsystem::open_from_joystick_id` to correctly advertise `joystick_index` as being a `u32`.\n* This should only mean removing type conversions which were previously needed to use these values, or changing incorrect assumptions in existing code.\n\n### v0.30\n\nRe-exported sdl2\\_sys as sdl2::sys\n\n[PR #632](https://github.com/AngryLawyer/rust-sdl2/pull/632)\n\nThe path of soundness isn't an easy one; sometimes ease of use has to be sacrificed\nfor soundness and safety! This change is a breaking change, and a **huge** one at that.\n\n**You will probably have to refactor some parts of your code**, but this is the price to\npay for soundness and runtime safety.\n\n**Breaking Changes:**\n\n* `Renderer` has been renamed and split into `Canvas` and `TextureCreator`.\n* `Canvas` can store a `Surface` or a `Window`, and can be used to render into these as well.\n  `TextureCreator` creates `Texture`s and is used by Texture to make sure they don't live\n  longer than expected.\n* `set_render_target` has been removed and has been replaced with `Canvas::with_texture_canvas`\n  and `Canvas::with_multiple_texture_canvas`\n* Deleted `WindowRef`, it wasn't useful anymore.\n\nOther Changes:\n\n* Added `PixelFormatEnum::supports_alpha(&self) -> bool` method.\n* A single Game Of Life example has been added to show the basic capabilities of the new `Canvas`\n  and `TextureCreator` structs, as well as adding a very basic game to show how to handle input / game\n  changes in a basic game.\n\nYou won't have to worry about what target your `Renderer` has at runtime anymore, everything\nis done at compile time now !\n\n[PR #628](https://github.com/AngryLawyer/rust-sdl2/pull/628)\n\n* Changed signature of `Surface::fill_rects` ([old](https://docs.rs/sdl2/0.29.1/sdl2/surface/struct.SurfaceRef.html#method.fill_rects) | [new](https://docs.rs/sdl2/0.30.0/sdl2/surface/struct.SurfaceRef.html#method.fill_rects))\n* Changed various `Option<T>` parameters  into `Into<Option<T>>` parameters. For instance, it is now possible to do this:\n\n```rust\nsurface.blit(None,Rect::new(5,5,5,5)); // instead of surface.blit(None,Some(Rect::new(5,5,5,5)));\n```\n\n[PR #639](https://github.com/AngryLawyer/rust-sdl2/pull/639)\n\n* Added hint-specific functions to `sdl2::hint`\n\n```rust\nsdl2::hint::set_video_minimize_on_focus_lost(bool) -> bool;\nsdl2::hint::set_video_minimize_on_focus_lost_with_priority(bool, sdl2::hint::Hint) -> bool;\nsdl2::hint::get_video_minimize_on_focus_lost() -> bool;\n```\n\n[PR #629](https://github.com/AngryLawyer/rust-sdl2/pull/629)\n\n* **Breaking Change: Changed Color to be a struct rather than an enum.**\n* Takes less space, easier to use, old constructors are still available.\n* Matching is no longer necessary to read the component values.\n* Struct rather than variant construction is required in static initializers.\n\n```rust\nlet color = Color { r: 255, g: 0, b: 0, a: 255 };\nlet color = Color::RGBA(255, 0, 0, 255);\nlet color = Color::RGB(255, 0, 0);\nlet (r, g, b) = color.rgb();\nlet (r, g, b, a) = color.rgba();\n```\n\n[PR #651](https://github.com/AngryLawyer/rust-sdl2/pull/629)\n\n* **VideoSystem::display_name** now returns a `Result<String, String>` instead of a `String`.\n* This prevents a segfault when the requested display index is out of bounds\n\n[commit e9681a0fe](https://github.com/AngryLawyer/rust-sdl2/commit/e9681a0fe)\n\n* `window.surface()` has been changed and is now more intuitive to use.\n* The example in `examples/no-renderer.rs` shows how to use this feature.\n\n[PR #635](https://github.com/AngryLawyer/rust-sdl2/pull/635)\n\n* **Deprecated `Rect::contains`**, added `Rect::contains_point` and `Rect::contains_rect`. **`contains` and `contains_point` are close but different ! See [here](https://github.com/AngryLawyer/rust-sdl2/issues/569)**\n"
        },
        {
          "name": "clippy.toml",
          "type": "blob",
          "size": 0.033203125,
          "content": "too-many-arguments-threshold = 10\n"
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "scripts",
          "type": "tree",
          "content": null
        },
        {
          "name": "sdl2-sys",
          "type": "tree",
          "content": null
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}