{
  "metadata": {
    "timestamp": 1736709068676,
    "page": 196,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjIwMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "trifectatechfoundation/teach-rs",
      "stars": 3087,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.0078125,
          "content": "target/\n"
        },
        {
          "name": ".vscode",
          "type": "tree",
          "content": null
        },
        {
          "name": "CODE_OF_CONDUCT.md",
          "type": "blob",
          "size": 0.1474609375,
          "content": "# Code of Conduct\n\nWe abide by the [Rust Code of Conduct][coc] and ask that you do as well.\n\n[coc]: https://www.rust-lang.org/policies/code-of-conduct\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 2.1376953125,
          "content": "# Contributing\n\n**Need help? Have questions? Say hi in our Matrix channel: [![Matrix](https://img.shields.io/badge/Matrix-000?logo=matrix&logoColor=fff)](https://matrix.to/#/#teach-rs:matrix.org)**\n\nGreat that you want to contribute to teach-rs! Here's some ways in which you can help improve the project.\n\n## Improving the material\nIf you see anything you think can easily be improved with a small pull request, such as fixing typos, fixing links or re-formulating sentences, please open a PR directly.\n\nIf you want to propose a structural change to one or more modules, please open an issue first, so we can discuss your ideas.\nPlease clearly state your proposed changes and your motivation for suggesting the changes. In case an improvement proposal is accepted, a PR with the changes referring to the relevant issue can be made.\n\n## Adding a module\nTeach-rs is intended to be used as a basis for custom courses that either are about Rust itself or use Rust to teach some other concept.\nTo that end, the teach-rs project aims to incorporate modules on diverse topics.\n\nIf you feel teach-rs should cover a topic that is currently not covered, you can propose adding a module by opening an issue.\nState the main goal and the learning objectives of the module, as well as the covered topics and proposed exercises.\nIn case an addition proposal is accepted, a PR with the proposed changes referring to the relevant issue can be opened.\n\nHave a look at the structure of the current slides and exercises to get a better understanding of how modules are organized.\n\n## Trying it out on your students\nTeach-rs is distributed under a [Creative Commons](https://creativecommons.org/licenses/by-sa/4.0/) license, so even if you don't have the time to contribute to this repository directly, you are free to teach from it\nand to adapt its material to suit your students' needs. You can also help the development of teach-rs by communicating your experiences---what modules did your students like, which ones did they struggle with?\n\nJust open an issue and don't forget to mention (without going into personal details) what the background of your students is and which parts of the course you used.\n"
        },
        {
          "name": "COURSE.md",
          "type": "blob",
          "size": 13.9921875,
          "content": "# Course outline\n\nThis course is divided into separate modules, detailed below. Module A1-A4 are introductory, and contain what's needed to learn about the contents of the other modules. Therefore, you're advised to teach modules A1-A4 at the start of the course, but you can pick and mix the other modules.\n\n## Learning objectives\nAt the end of the course, the student is able to:\n- Describe the problems Rust aims to solve, why, and how (A1)\n- Identify the design goals of Rust (A1)\n- Decide whether or not Rust is a good fit for a project given requirements (A1)\n- Describe how Rust impacts professional contexts (A1)\n- Solve ownership errors using knowledge about the borrow checker model (A1, A3)\n- Use various tools to improve software quality and programming experience (A2)\n- Find their way around various Rust documentation sources (docs.rs, doc.rust-lang.org) and crate (dependency) indices (lib.rs) (A2)\n- Set up custom Rust application and library projects using Rusts build system and package manager (A2, B)\n- Implement small to medium-sized command-line applications using Rust and contribute to existing Rust projects (B)\n- Make informed choices on whether or not to use dependencies to implement functionality, and make a choice based on requirements (B)\n- Implement concurrent applications using threads and async/await (C)\n- Use various standard patterns to design Rust applications (D)\n- Implement web servers using Rust with several dependencies and frameworks (E)\n- Identify the rules needed to keep in mind when implementing features that cannot be checked by the Rust compiler by using `unsafe` (F)\n- Implement applications/libraries that interoperate with applications/libraries written in C (G)\n\n## Course modules\n\n### 0 - Course introduction\n- Goals\n- Structure\n- Schedule\n- Project introduction\n- Tools\n- Contact info\n\n### A - Introduction to Rust\n#### A1 - Language basics\nThis module introduces the first basic concepts of Rust. It motivates why the Rust language exists, and what students gain from learning it. After completing this module, the student is able to:\n- Describe the problems the Rust programming language aims to solve\n- Describe the design goals of Rust\n- Decide whether Rust is a fitting technology to write a particular application in, given requirements\n- Solve basic compiler errors related to move semantics\n- Write Rust programs using basic syntax and operators\n\n**Topics**\n- **'Why' of Rust language**\n    - Problems Rust intends to solve\n    - The fields it operates in\n    - Rust design goals\n    - Why Rust is considered secure\n    - How learning Rust impacts your career\n- **When to use Rust**\n    - Where Rust really shines\n    - Where Rust maturity lacks\n    - What Rust wasn't designed for\n- **Basic syntax and operators**\n    - main entrypoint\n    - Primitive types, tuples, arrays\n    - Control flow\n    - Scopes, blocks\n    - Statements vs expressions\n    - Functions\n    - Loops\n- **Introduction to move semantics**\n    - Clones vs copies\n    - Value ownership\n    - Move semantics\n\n**Exercises**\n- Basic syntax problems\n- Basic problems on move semantics\n\n\n#### A2 - Intermezzo - Ecosystem and tools\n- **Cargo**\n    - configuration\n    - dependencies\n    - cross-compilation\n    - rustup\n    - rustfmt\n- **Build profiles**\n    - debug vs. release\n    - Opt-levels\n    - LTO\n    - ...\n- **Tour through crate index and API docs**\n    - Docs.rs\n    - Lib.rs (unofficial)\n    - Crates.io\n- **Widely used tools**\n    - debug\n    - test\n    - security\n    - bench (Criterion)\n- **Rust versions**\n    - Release cycle\n    - stable vs beta vs nightly\n    - Unstable features\n    - editions\n- **More resources:**\n    - TRPL\n    - cheats.rs\n    - reference\n    - rustonomicon\n\n**Exercises**\n*TBD*\n\n\n#### A2 - Advanced Syntax, Ownership, References\n- **Advanced syntax**\n    - Types: struct/enum/slice/String/Vec/Box/Option/Result\n    - Impl blocks\n    - Coercion\n    - Closures\n    - Statics\n    - Pattern matching\n    - casting/`as` and pitfalls\n- **Pointers vs references, reference meta**\n- **Ownership, borrowing, lifetimes**\n    - Types of references\n    - Borrowing rules\n    - Lifetime annotations\n    - NLL: https://blog.rust-lang.org/2018/12/06/Rust-1.31-and-rust-2018.html#non-lexical-lifetimes\n- **Lifetime annotation, elision**\n    - Why needed\n    - Syntax\n- **Panicking: explicit/unwrap/overflow**\n    - What happens on panic\n    - `no_panic`\n    - When panicking is OK, and when it's not\n\n**Exercises**\n*TBD*\n\n#### A3 - Traits and generics\nThis module introduces technologies to make your Rust code more versatile: *traits* and *generics*. After completing this module, the student is able to:\n- Describe the problems traits and generics solve\n- Use traits to describe functionality that is common beween types\n- Write functions and methods in terms of traits and bounds.\n- Use various common traits from the standard library\n- Use trait objects to implement dynamic dispatch\n- Decide when dynamic dispatch should be used over static dispatch\n\n- **Traits**\n- **Commonly used traits from std**\n    - Into/From/TryFrom/TryInto, compared to `as` from A1\n    - Copy/Clone\n    - Debug/Display\n    - Iterator/IntoIter/FromIter\n    - FromString\n    - AsRef/AsMut\n    - Deref/DerefMut\n    - PartialEq/Eq/Add/Mul/Div/Sub/PartialOrd/Ord\n    - Drop\n- **Orphan rule**\n- **Const generics**\n- **Lifetime annotations**\n\n\n**Exercises**\n*TBD*\n\n\n### B - Application programming\nThis module is about learning to write actual Rust applications. At the end of this module, the student is able to:\n  - Set up a Rust application and library crate\n  - Add dependencies to a crate\n  - Use the Rust module system to divide a program into logical parts\n  - Write applications that follow the Rust API guidelines\n  - Set up Rust tests and benchmarks\n  - Work with some commonly used crates for logging, argument parsing, deserialization, and testing (Exercise)\n\n**Topics**\n- **Setting up a Rust crate, bin vs lib**\n  - Commands\n  - Cargo.toml entries\n- **Structure of a Rust project**\n  - Module system\n  - Unit tests - integration tests - benchmarks\n  - Examples\n  - Multiple binaries\n  - Cargo workspaces\n- **[Rust API guidelines](https://rust-lang.github.io/api-guidelines/about.html)**\n    - (doc) Comments\n    - Casing conventions\n- **Widely used crates: logging/argparse/(de)serialization/testing**\n\n**Exercises**\n- Introduction to Serde\n- Set up a custom project that:\n  - Acts both as a library and a binary crate\n  - Is divided up into modules\n  - Uses dependencies for argument parsing, logging, and (de)serialization\n  - Has doc comments according to the Rust API guidelines\n- Benchmark an application using Criterion\n\n\n### C - Multitasking\n- **Atomic types**\n- **Multithreading: Send/Sync/Channel....**\n- **How the borrow checker helps us**\n- **Smart pointers, std::sync**\n- **Helpful types**\n    - Cell/RefCell/Rc/Mutex\n\n**Exercises**\n*TBD*\n\n### D - Idiomatic Rust patterns\n- **Newtype**\n- **Typestate**\n- **Builder**\n- **Composition over inheritance**\n- **Error handling: enum/anyhow/thiserror**\n- **Anti patterns**\n- **Cool patterns from std**\n    - https://www.reddit.com/r/rust/comments/x1mo16/is_there_any_part_of_the_standard_library_that/\n\n**Exercises**\n*TBD*\n\n### E - Rust for web\n- **Rust web crates**\n    - Hyper\n    - Rocket\n    - ORM\n    - ...\n- **std::net**\n\n**Exercises**\n*TBD*\n\n### F - Safe Unsafe Rust\n- **Why safe vs unsafe**\n- **Undefined behavior**\n- **Unsafe keyword**\n- **Added functionality**\n- **Optimization**\n- **MaybeUninit**\n- **Drop check, ManuallyDrop**\n- **Type memory layout**\n- [Unsafe code guidelines](https://rust-lang.github.io/unsafe-code-guidelines/introduction.html)\n\n**Exercises**\n\n- linked list\n- execve\n- tagged union\n\n### G - FFI and Dynamic modules\n- **FFI in Rust, extern \"C\"**\n- **`sys`-crates**\n- **std::ffi**\n- **`catch_unwind`**\n- **bindgen**\n- **Cxx/PyO3**\n- **Panics and catch_unwind**\n- **`libloading` crate**\n- **WASI with wasmtime**\n\n**Exercises**\n*TBD*\n\n\n### P Final project\n\n#### Ideas\n- **Scientific programming**\n    - nalgebra\n    - polars\n- **Game development: ggez, bevy**\n    - https://www.arewegameyet.com/\n- **GUI application**\n    - https://www.areweguiyet.com\n- **Doubly linked list**\n- **Embedded programming**\n    - Arduino with https://book.avr-rust.com/\n    - Raspberry pi pico with https://crates.io/crates/rp-pico\n    - Raspberry pi with https://crates.io/crates/rppal\n- **OS dev**\n    - https://os.phil-opp.com/\n    - https://github.com/gjf2a/pluggable_interrupt_os\n- **Some audio filtering and streaming software**\n- **Contribute to an open source project**\n- **SIMD**\n    - Uwuify: https://github.com/Daniel-Liu-c0deb0t/uwu\n- **Simple programming language**\n    - https://craftinginterpreters.com/\n    - Brainfuck interpreter/compiler\n    - https://strlen.com/false-language/\n\n#### Structure\n- Work in teams of 2\n- Hand in proposal in week 7\n- Write small report (2-3 pages), to be handed in in week 12\n    - Introduction\n    - Requirements\n    - Design diagram\n    - Design choices\n    - Dependencies\n    - Evaluation\n- Present project in about 5 minutes in week 12\n\n\n## Lecture format (90 minutes)\n### Rationale\nDuring lectures, new content is provided to students. The idea is to keep engagement high using interaction an by extensively activating prior knowledge. We take some time for questions and discussion during the lecture and are aware of the facts that many concepts are outright confusing to beginners. During discussion, we encourage students to answer questions of fellow students. However, we actively make sure that discussions don't divert from the subject.\n\nTo activate prior knowledge, we start each lecture with a recap on the subject of the last lecture with quiz questions. Once that's done, we relate content of the current subject with content of prior lectures where possible.\n\nWe also relate content to other programming languages, taking into account the intermediate C++ knowledge students have. This can be done by asking questions such as 'How would you solve this problem in your favourite programming language'? However, as relating to\n\nother languages may take a lot of time, we only do this sparingly, and with more confusing subjects.\n\nApart from that, we focus on the 'why' of each concept, as it helps students to better internalize the contents, and it allows them to creatively apply the gained knowledge in doing exercises and in the final project.\n\nDuring the lecture, we actively measure how well the content is being picked up by doing rounds of online multiple-choice quiz questions. The measurement feedback dictates the pace in which the content is gone over. Therefore, we provide enough theory for a high pace, but take into account that we may need to go to a lower pace and this skip some contents or details.\n\nThe lecture slides are available online, and contain links to the [Rust playground](https://play.rust-lang.org/) for each code example. The playground allows students to interact with the code, providing a means of further internalizing the examples. The slides also contain further reading resource links on the lecture subject.\n\n\n### Schedule\n - (2m) Start with welcome, students entering\n - (10m) Recap on content from last time that current subject builds on\n     - (2m) Recap overview\n     - (3m) Short round of questions\n     - (5m) 1 set of quiz questions\n - (3m) Introduce lecture subject and learning objectives\n - (3m) Round up: What do you (think you) know about today's subject?\n - (2m) Lecture content overview\n - (60m) Lecture content\n     - (15m) Quiz questions and discussion\n     - (45m) Subject theory\n     - (5m) Questions\n - (5m) Quick recap, practical announcements\n\n## Tutorial format (90m)\n### Rationale\nIn the tutorials, the focus lies on applying the content of the prior lecture by doing exercises. During these tutorials, exercises from the last tutorial are reviewed and new exercises are introduced. Moreover, in the tutorials, students are encouraged to ask questions on the lecture content. Students are expected to work on the exercises briefly introduced at the beginning of the tutorial in small groups (2 or 3 students). These groups are formed during the first tutorial. The tutor will be available for questions and tips on the exercises during the tutorial. Students can hand in their results for feedback during the tutorial.\n\n### Schedule\n- (2m) Start with welcome, students entering\n- (23m) Review last weeks exercises\n    - (18m) go over model exercise answers\n    - (5m) questions\n- (5m) Introduce new exercises\n- (60m) Work on exercises in small groups\n\n\n## Course topics & schedule\n\n| Week | Module       | Topic                                                           | Notes                         |\n| ---- | ------------ | --------------------------------------------------------------- | ----------------------------- |\n| 1    | 0, <br />A1  | Course intro <br />Language basics                              |                               |\n| 2    | A2, <br />A3 | Ecosystem and tools<br />Advanced Syntax, Ownership, references |                               |\n| 3    | A3           | Traits and generics                                             |                               |\n| 4    | B            | Application programming                                         |                               |\n| 5    | C            | Multitasking                                                    |                               |\n| 6    | D            | Idiomatic Rust patterns                                         | Project proposal reminder     |\n| 7    | E            | Rust for web                                                    | Deadline project proposal     |\n| 8    | F            | Safe Unsafe Rust                                                | Project proposal resubmission |\n| 9    | G            | FFI and Dynamic modules                                         |                               |\n| 10   | P            | Final project                                                   |                               |\n| 11   | P            | Final project                                                   |                               |\n| 12   | P            | Final project submission and presentation                       |                               |\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 19.6669921875,
          "content": "Attribution-ShareAlike 4.0 International\n\n=======================================================================\n\nCreative Commons Corporation (\"Creative Commons\") is not a law firm and\ndoes not provide legal services or legal advice. Distribution of\nCreative Commons public licenses does not create a lawyer-client or\nother relationship. Creative Commons makes its licenses and related\ninformation available on an \"as-is\" basis. Creative Commons gives no\nwarranties regarding its licenses, any material licensed under their\nterms and conditions, or any related information. Creative Commons\ndisclaims all liability for damages resulting from their use to the\nfullest extent possible.\n\nUsing Creative Commons Public Licenses\n\nCreative Commons public licenses provide a standard set of terms and\nconditions that creators and other rights holders may use to share\noriginal works of authorship and other material subject to copyright\nand certain other rights specified in the public license below. The\nfollowing considerations are for informational purposes only, are not\nexhaustive, and do not form part of our licenses.\n\n     Considerations for licensors: Our public licenses are\n     intended for use by those authorized to give the public\n     permission to use material in ways otherwise restricted by\n     copyright and certain other rights. Our licenses are\n     irrevocable. Licensors should read and understand the terms\n     and conditions of the license they choose before applying it.\n     Licensors should also secure all rights necessary before\n     applying our licenses so that the public can reuse the\n     material as expected. Licensors should clearly mark any\n     material not subject to the license. This includes other CC-\n     licensed material, or material used under an exception or\n     limitation to copyright. More considerations for licensors:\n     wiki.creativecommons.org/Considerations_for_licensors\n\n     Considerations for the public: By using one of our public\n     licenses, a licensor grants the public permission to use the\n     licensed material under specified terms and conditions. If\n     the licensor's permission is not necessary for any reason--for\n     example, because of any applicable exception or limitation to\n     copyright--then that use is not regulated by the license. Our\n     licenses grant only permissions under copyright and certain\n     other rights that a licensor has authority to grant. Use of\n     the licensed material may still be restricted for other\n     reasons, including because others have copyright or other\n     rights in the material. A licensor may make special requests,\n     such as asking that all changes be marked or described.\n     Although not required by our licenses, you are encouraged to\n     respect those requests where reasonable. More considerations\n     for the public:\n     wiki.creativecommons.org/Considerations_for_licensees\n\n=======================================================================\n\nCreative Commons Attribution-ShareAlike 4.0 International Public\nLicense\n\nBy exercising the Licensed Rights (defined below), You accept and agree\nto be bound by the terms and conditions of this Creative Commons\nAttribution-ShareAlike 4.0 International Public License (\"Public\nLicense\"). To the extent this Public License may be interpreted as a\ncontract, You are granted the Licensed Rights in consideration of Your\nacceptance of these terms and conditions, and the Licensor grants You\nsuch rights in consideration of benefits the Licensor receives from\nmaking the Licensed Material available under these terms and\nconditions.\n\n\nSection 1 -- Definitions.\n\n  a. Adapted Material means material subject to Copyright and Similar\n     Rights that is derived from or based upon the Licensed Material\n     and in which the Licensed Material is translated, altered,\n     arranged, transformed, or otherwise modified in a manner requiring\n     permission under the Copyright and Similar Rights held by the\n     Licensor. For purposes of this Public License, where the Licensed\n     Material is a musical work, performance, or sound recording,\n     Adapted Material is always produced where the Licensed Material is\n     synched in timed relation with a moving image.\n\n  b. Adapter's License means the license You apply to Your Copyright\n     and Similar Rights in Your contributions to Adapted Material in\n     accordance with the terms and conditions of this Public License.\n\n  c. BY-SA Compatible License means a license listed at\n     creativecommons.org/compatiblelicenses, approved by Creative\n     Commons as essentially the equivalent of this Public License.\n\n  d. Copyright and Similar Rights means copyright and/or similar rights\n     closely related to copyright including, without limitation,\n     performance, broadcast, sound recording, and Sui Generis Database\n     Rights, without regard to how the rights are labeled or\n     categorized. For purposes of this Public License, the rights\n     specified in Section 2(b)(1)-(2) are not Copyright and Similar\n     Rights.\n\n  e. Effective Technological Measures means those measures that, in the\n     absence of proper authority, may not be circumvented under laws\n     fulfilling obligations under Article 11 of the WIPO Copyright\n     Treaty adopted on December 20, 1996, and/or similar international\n     agreements.\n\n  f. Exceptions and Limitations means fair use, fair dealing, and/or\n     any other exception or limitation to Copyright and Similar Rights\n     that applies to Your use of the Licensed Material.\n\n  g. License Elements means the license attributes listed in the name\n     of a Creative Commons Public License. The License Elements of this\n     Public License are Attribution and ShareAlike.\n\n  h. Licensed Material means the artistic or literary work, database,\n     or other material to which the Licensor applied this Public\n     License.\n\n  i. Licensed Rights means the rights granted to You subject to the\n     terms and conditions of this Public License, which are limited to\n     all Copyright and Similar Rights that apply to Your use of the\n     Licensed Material and that the Licensor has authority to license.\n\n  j. Licensor means the individual(s) or entity(ies) granting rights\n     under this Public License.\n\n  k. Share means to provide material to the public by any means or\n     process that requires permission under the Licensed Rights, such\n     as reproduction, public display, public performance, distribution,\n     dissemination, communication, or importation, and to make material\n     available to the public including in ways that members of the\n     public may access the material from a place and at a time\n     individually chosen by them.\n\n  l. Sui Generis Database Rights means rights other than copyright\n     resulting from Directive 96/9/EC of the European Parliament and of\n     the Council of 11 March 1996 on the legal protection of databases,\n     as amended and/or succeeded, as well as other essentially\n     equivalent rights anywhere in the world.\n\n  m. You means the individual or entity exercising the Licensed Rights\n     under this Public License. Your has a corresponding meaning.\n\n\nSection 2 -- Scope.\n\n  a. License grant.\n\n       1. Subject to the terms and conditions of this Public License,\n          the Licensor hereby grants You a worldwide, royalty-free,\n          non-sublicensable, non-exclusive, irrevocable license to\n          exercise the Licensed Rights in the Licensed Material to:\n\n            a. reproduce and Share the Licensed Material, in whole or\n               in part; and\n\n            b. produce, reproduce, and Share Adapted Material.\n\n       2. Exceptions and Limitations. For the avoidance of doubt, where\n          Exceptions and Limitations apply to Your use, this Public\n          License does not apply, and You do not need to comply with\n          its terms and conditions.\n\n       3. Term. The term of this Public License is specified in Section\n          6(a).\n\n       4. Media and formats; technical modifications allowed. The\n          Licensor authorizes You to exercise the Licensed Rights in\n          all media and formats whether now known or hereafter created,\n          and to make technical modifications necessary to do so. The\n          Licensor waives and/or agrees not to assert any right or\n          authority to forbid You from making technical modifications\n          necessary to exercise the Licensed Rights, including\n          technical modifications necessary to circumvent Effective\n          Technological Measures. For purposes of this Public License,\n          simply making modifications authorized by this Section 2(a)\n          (4) never produces Adapted Material.\n\n       5. Downstream recipients.\n\n            a. Offer from the Licensor -- Licensed Material. Every\n               recipient of the Licensed Material automatically\n               receives an offer from the Licensor to exercise the\n               Licensed Rights under the terms and conditions of this\n               Public License.\n\n            b. Additional offer from the Licensor -- Adapted Material.\n               Every recipient of Adapted Material from You\n               automatically receives an offer from the Licensor to\n               exercise the Licensed Rights in the Adapted Material\n               under the conditions of the Adapter's License You apply.\n\n            c. No downstream restrictions. You may not offer or impose\n               any additional or different terms or conditions on, or\n               apply any Effective Technological Measures to, the\n               Licensed Material if doing so restricts exercise of the\n               Licensed Rights by any recipient of the Licensed\n               Material.\n\n       6. No endorsement. Nothing in this Public License constitutes or\n          may be construed as permission to assert or imply that You\n          are, or that Your use of the Licensed Material is, connected\n          with, or sponsored, endorsed, or granted official status by,\n          the Licensor or others designated to receive attribution as\n          provided in Section 3(a)(1)(A)(i).\n\n  b. Other rights.\n\n       1. Moral rights, such as the right of integrity, are not\n          licensed under this Public License, nor are publicity,\n          privacy, and/or other similar personality rights; however, to\n          the extent possible, the Licensor waives and/or agrees not to\n          assert any such rights held by the Licensor to the limited\n          extent necessary to allow You to exercise the Licensed\n          Rights, but not otherwise.\n\n       2. Patent and trademark rights are not licensed under this\n          Public License.\n\n       3. To the extent possible, the Licensor waives any right to\n          collect royalties from You for the exercise of the Licensed\n          Rights, whether directly or through a collecting society\n          under any voluntary or waivable statutory or compulsory\n          licensing scheme. In all other cases the Licensor expressly\n          reserves any right to collect such royalties.\n\n\nSection 3 -- License Conditions.\n\nYour exercise of the Licensed Rights is expressly made subject to the\nfollowing conditions.\n\n  a. Attribution.\n\n       1. If You Share the Licensed Material (including in modified\n          form), You must:\n\n            a. retain the following if it is supplied by the Licensor\n               with the Licensed Material:\n\n                 i. identification of the creator(s) of the Licensed\n                    Material and any others designated to receive\n                    attribution, in any reasonable manner requested by\n                    the Licensor (including by pseudonym if\n                    designated);\n\n                ii. a copyright notice;\n\n               iii. a notice that refers to this Public License;\n\n                iv. a notice that refers to the disclaimer of\n                    warranties;\n\n                 v. a URI or hyperlink to the Licensed Material to the\n                    extent reasonably practicable;\n\n            b. indicate if You modified the Licensed Material and\n               retain an indication of any previous modifications; and\n\n            c. indicate the Licensed Material is licensed under this\n               Public License, and include the text of, or the URI or\n               hyperlink to, this Public License.\n\n       2. You may satisfy the conditions in Section 3(a)(1) in any\n          reasonable manner based on the medium, means, and context in\n          which You Share the Licensed Material. For example, it may be\n          reasonable to satisfy the conditions by providing a URI or\n          hyperlink to a resource that includes the required\n          information.\n\n       3. If requested by the Licensor, You must remove any of the\n          information required by Section 3(a)(1)(A) to the extent\n          reasonably practicable.\n\n  b. ShareAlike.\n\n     In addition to the conditions in Section 3(a), if You Share\n     Adapted Material You produce, the following conditions also apply.\n\n       1. The Adapter's License You apply must be a Creative Commons\n          license with the same License Elements, this version or\n          later, or a BY-SA Compatible License.\n\n       2. You must include the text of, or the URI or hyperlink to, the\n          Adapter's License You apply. You may satisfy this condition\n          in any reasonable manner based on the medium, means, and\n          context in which You Share Adapted Material.\n\n       3. You may not offer or impose any additional or different terms\n          or conditions on, or apply any Effective Technological\n          Measures to, Adapted Material that restrict exercise of the\n          rights granted under the Adapter's License You apply.\n\n\nSection 4 -- Sui Generis Database Rights.\n\nWhere the Licensed Rights include Sui Generis Database Rights that\napply to Your use of the Licensed Material:\n\n  a. for the avoidance of doubt, Section 2(a)(1) grants You the right\n     to extract, reuse, reproduce, and Share all or a substantial\n     portion of the contents of the database;\n\n  b. if You include all or a substantial portion of the database\n     contents in a database in which You have Sui Generis Database\n     Rights, then the database in which You have Sui Generis Database\n     Rights (but not its individual contents) is Adapted Material,\n     including for purposes of Section 3(b); and\n\n  c. You must comply with the conditions in Section 3(a) if You Share\n     all or a substantial portion of the contents of the database.\n\nFor the avoidance of doubt, this Section 4 supplements and does not\nreplace Your obligations under this Public License where the Licensed\nRights include other Copyright and Similar Rights.\n\n\nSection 5 -- Disclaimer of Warranties and Limitation of Liability.\n\n  a. UNLESS OTHERWISE SEPARATELY UNDERTAKEN BY THE LICENSOR, TO THE\n     EXTENT POSSIBLE, THE LICENSOR OFFERS THE LICENSED MATERIAL AS-IS\n     AND AS-AVAILABLE, AND MAKES NO REPRESENTATIONS OR WARRANTIES OF\n     ANY KIND CONCERNING THE LICENSED MATERIAL, WHETHER EXPRESS,\n     IMPLIED, STATUTORY, OR OTHER. THIS INCLUDES, WITHOUT LIMITATION,\n     WARRANTIES OF TITLE, MERCHANTABILITY, FITNESS FOR A PARTICULAR\n     PURPOSE, NON-INFRINGEMENT, ABSENCE OF LATENT OR OTHER DEFECTS,\n     ACCURACY, OR THE PRESENCE OR ABSENCE OF ERRORS, WHETHER OR NOT\n     KNOWN OR DISCOVERABLE. WHERE DISCLAIMERS OF WARRANTIES ARE NOT\n     ALLOWED IN FULL OR IN PART, THIS DISCLAIMER MAY NOT APPLY TO YOU.\n\n  b. TO THE EXTENT POSSIBLE, IN NO EVENT WILL THE LICENSOR BE LIABLE\n     TO YOU ON ANY LEGAL THEORY (INCLUDING, WITHOUT LIMITATION,\n     NEGLIGENCE) OR OTHERWISE FOR ANY DIRECT, SPECIAL, INDIRECT,\n     INCIDENTAL, CONSEQUENTIAL, PUNITIVE, EXEMPLARY, OR OTHER LOSSES,\n     COSTS, EXPENSES, OR DAMAGES ARISING OUT OF THIS PUBLIC LICENSE OR\n     USE OF THE LICENSED MATERIAL, EVEN IF THE LICENSOR HAS BEEN\n     ADVISED OF THE POSSIBILITY OF SUCH LOSSES, COSTS, EXPENSES, OR\n     DAMAGES. WHERE A LIMITATION OF LIABILITY IS NOT ALLOWED IN FULL OR\n     IN PART, THIS LIMITATION MAY NOT APPLY TO YOU.\n\n  c. The disclaimer of warranties and limitation of liability provided\n     above shall be interpreted in a manner that, to the extent\n     possible, most closely approximates an absolute disclaimer and\n     waiver of all liability.\n\n\nSection 6 -- Term and Termination.\n\n  a. This Public License applies for the term of the Copyright and\n     Similar Rights licensed here. However, if You fail to comply with\n     this Public License, then Your rights under this Public License\n     terminate automatically.\n\n  b. Where Your right to use the Licensed Material has terminated under\n     Section 6(a), it reinstates:\n\n       1. automatically as of the date the violation is cured, provided\n          it is cured within 30 days of Your discovery of the\n          violation; or\n\n       2. upon express reinstatement by the Licensor.\n\n     For the avoidance of doubt, this Section 6(b) does not affect any\n     right the Licensor may have to seek remedies for Your violations\n     of this Public License.\n\n  c. For the avoidance of doubt, the Licensor may also offer the\n     Licensed Material under separate terms or conditions or stop\n     distributing the Licensed Material at any time; however, doing so\n     will not terminate this Public License.\n\n  d. Sections 1, 5, 6, 7, and 8 survive termination of this Public\n     License.\n\n\nSection 7 -- Other Terms and Conditions.\n\n  a. The Licensor shall not be bound by any additional or different\n     terms or conditions communicated by You unless expressly agreed.\n\n  b. Any arrangements, understandings, or agreements regarding the\n     Licensed Material not stated herein are separate from and\n     independent of the terms and conditions of this Public License.\n\n\nSection 8 -- Interpretation.\n\n  a. For the avoidance of doubt, this Public License does not, and\n     shall not be interpreted to, reduce, limit, restrict, or impose\n     conditions on any use of the Licensed Material that could lawfully\n     be made without permission under this Public License.\n\n  b. To the extent possible, if any provision of this Public License is\n     deemed unenforceable, it shall be automatically reformed to the\n     minimum extent necessary to make it enforceable. If the provision\n     cannot be reformed, it shall be severed from this Public License\n     without affecting the enforceability of the remaining terms and\n     conditions.\n\n  c. No term or condition of this Public License will be waived and no\n     failure to comply consented to unless expressly agreed to by the\n     Licensor.\n\n  d. Nothing in this Public License constitutes or may be interpreted\n     as a limitation upon, or waiver of, any privileges and immunities\n     that apply to the Licensor or You, including from the legal\n     processes of any jurisdiction or authority.\n\n\n=======================================================================\n\nCreative Commons is not a party to its public licenses.\nNotwithstanding, Creative Commons may elect to apply one of its public\nlicenses to material it publishes and in those instances will be\nconsidered the “Licensor.” The text of the Creative Commons public\nlicenses is dedicated to the public domain under the CC0 Public Domain\nDedication. Except for the limited purpose of indicating that material\nis shared under a Creative Commons public license or as otherwise\npermitted by the Creative Commons policies published at\ncreativecommons.org/policies, Creative Commons does not authorize the\nuse of the trademark \"Creative Commons\" or any other trademark or logo\nof Creative Commons without its prior written consent including,\nwithout limitation, in connection with any unauthorized modifications\nto any of its public licenses or any other arrangements,\nunderstandings, or agreements concerning use of licensed material. For\nthe avoidance of doubt, this paragraph does not form part of the public\nlicenses.\n\nCreative Commons may be contacted at creativecommons.org.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 5.6298828125,
          "content": "# Teach-rs\n[![Matrix](https://img.shields.io/badge/Matrix-000?logo=matrix&logoColor=fff)](https://matrix.to/#/#teach-rs:matrix.org)\n\n![Teach-rs](https://tweedegolf.nl/images/teach-rs-logo.png)\n\nTeach-rs is a university course for computer science students, introducing the Rust Programming Language, and is available for anyone who wants to teach Rust.\n\nWhy? Have a look at our [blog post](https://tweedegolf.nl/en/blog/127/want-more-rust-break-the-cycle) introducing the course.\n\nThis repo will contain everything that's needed to organize the course: slides, exercises, tools, setup instructions and more.\n\n*While all the available material is user-ready, this repo is not yet as exhaustive as we'd like, so feedback and [contributions](./CONTRIBUTING.md) are welcome! So is sponsorship; read more below or on our [Sponsorship page](https://github.com/sponsors/trifectatechfoundation).*\n\n**Need help? Have questions? Say hi in our Matrix channel: [![Matrix](https://img.shields.io/badge/Matrix-000?logo=matrix&logoColor=fff)](https://matrix.to/#/#teach-rs:matrix.org)**\n\n## Usage\nThe teacher's guide can be found [here](./teachers_guide.md).\nHave a look at the [ModMod Readme](./modmod/README.md) for instructions on how to render the content of a track.\n\n## Structure\nThe actual content can be found in the [`content`](./content) directory.\nThe content is structured in a tree of Tracks, Modules, Units, and Topics.\nTracks define a single course, which consists of one or more Modules, which again combines one or more Units, which again is a set of Topics.\nUnits roughly correspond to one lecture+tutorial (or at least that is the idea, but TODO), and consist of several Topics. Related Units are combined in a Module.\nTopics are packages that cover a single topic, and include a small number of slides, some exercises, and an exercise descripion.\nTopics can define their learning objectives, further reading material, and how they should be summarized in a Unit introduction.\n\nTracks, Modules, Units, and Topics and the files they refer to are described in the several TOML files in the [`content`](./content) directory.\n[ModMod](./modmod/README.md) combines the content into a structure that can be directly published to your students in a Git repo, for instance.\n\n## Pre-defined tracks\n- [Rust Language Introduction](./content/rust-intro.track.toml) aims to introduce the basics to the Rust programming language, and to enable students to engineer their own applications and crates.\n- [Rust for the Web](./content/rust-for-web.track.toml) covers content that is needed to use Rust in web applications.\n- [Rust for Systems Programming](./content/rust-for-systems.track.toml) contains more low-level topics, to teach systems programming using Rust.\n- [Scientific Rust](./content/scientific-rust.track.toml) is about using Rust in scientific programming.\n- [Full](./content/full.track.toml) contains all available teach-rs content.\n\n*Note: although the outline of the tracks is mostly complete, the tracks may still contain TODOs. You're invited to contribute your own content to fix these!*\n\n## High-level goals\nTeach-rs aims to provide an open-source course, lectures, tutorials and exercises, that can be used by any higher education institution.\nUse one of the pre-defined tracks, or compose your own with the content we provide and your own.\n\n1. Provide a modular, resuable basis for live-taught Rust courses\n2. Provide students with practical, hands-on experience\n3. Provide students with background information of Rust features\n4. Provide students with ability to judge whether Rust fits a project\n5. Provide several specialized learning tracks that focus on different applications (e.g. systems, embedded, web)\n6. Enable teachers to contribute their material for others to use\n\n## Contributing\nIf you'd like to improve teach-rs, either by doing touchups, restructuring a module, or even adding a module, please refer to the [contributing guidelines](./CONTRIBUTING.md) before you get started.\n\n## About the project\n\nThe project was created by [Tweede golf](https://tweedegolf.nl), and has since moved to the [Trifecta Tech Foundation](https://trifectatech.org).\n\n### Our sponsors\n\n#### Founding sponsors\n\n<img style=\"margin: 1rem 5% 1rem 5%;\" src=\"./assets/STU_FIIT_logo_100_color.png\" alt=\"Logo STU FIIT\"  width=\"200px\" />\n\n<img style=\"margin: 1rem 5% 1rem 5%;\" src=\"https://tweedegolf.nl/images/tweedegolf-logo-2022-1.png\" alt=\"Logo TG\"  width=\"200px\" />\n\n<img style=\"margin: 1rem 5% 1rem 5%;\" src=\"./assets/rust-edu-banner_100.png\" alt=\"Logo Rust Edu\"  width=\"200px\" />\n\n<img style=\"margin: 1rem 5% 1rem 5%;\" src=\"./assets/Rust_Foundation_logo_100_color.png\" alt=\"Logo RF\"  width=\"200px\" />\n\n\nThe project's initial sponsor is the Faculty of Informatics and Information Technologies (FIIT) of the Slovak University of Technology (STU) in Bratislava, Slovakia. [FIIT](https://www.fiit.stuba.sk/en.html?page_id=749)'s contribution has enabled us to lay the groundwork for the course. [Tweede golf](https://tweedegolf.nl/en) and [Rust Edu](https://rust-edu.org/) have also contributed substantially to the creation of teach-rs.\n\nIn addition, one of our maintainers, [@hdoordt](https://github.com/hdoordt), received a grant from the [Rust Foundation](https://foundation.rust-lang.org/).\n\n#### Silver sponsors\n\nAnd a big thank you to our Silver sponsors:\n\n- [Gofore](https://gofore.com/en/)\n- [RustJobs.dev](https://rustjobs.dev/)\n\n### Support teach-rs\n\nContact us if you´re interested in financially supporting the maintenance and further development of the teach-rs resources. See [trifectatech.org/support](https://trifectatech.org/support/).\nYou can also sponsor our work through [GitHub sponsors](https://github.com/sponsors/trifectatechfoundation).\n"
        },
        {
          "name": "assets",
          "type": "tree",
          "content": null
        },
        {
          "name": "book.toml",
          "type": "blob",
          "size": 0.2041015625,
          "content": "[book]\nauthors = [\"Henk Oordt\", \"Marc Schoolderman\", \"Folkert de Vries\", \"Ruben Nijveld\"]\ntitle = \"Teach-rs - Exercises\"\n\nsrc = \"book\"\nlanguage = \"en\"\nmultilingual = false\n\n[build]\nbuild-dir = \"./target/book\"\n"
        },
        {
          "name": "content",
          "type": "tree",
          "content": null
        },
        {
          "name": "intro-101-rs.pdf",
          "type": "blob",
          "size": 86.052734375,
          "content": null
        },
        {
          "name": "modmod",
          "type": "tree",
          "content": null
        },
        {
          "name": "teachers_guide.md",
          "type": "blob",
          "size": 3.935546875,
          "content": "Teacher's companion to teach-rs\n===============================\n\nIf you have decided to try teach-rs for your students, you will probably run into two problems:\n\n1. As an academic, you may feel your own practical knowledge of Rust is lacking.\n\n2. You will have to make a selection of subjects to fit practical constraints.\n\nSo what parts of teach-rs should you invest time in to teach to your students? And how much time is required?\n\nWe assume you have a clear idea of your learning outcomes, and your target audience. Teach-rs can be used for first-year\nstudents at university, for master's students, or even for an internal training for senior engineers at your software company, but obviously different\ngroups would require a different approach!\n\nTeach-rs is a modular course\n============================\nWe have defined particular *tracks*, which consists of selections of modules that go\nwell together given a certain learning outcome and target audience, for example teach-rs focussed on Web programming or teach-rs\nfocussed on Embedded Devices; you can see the full list of tracks [here](./README.md#pre-defined-tracks):\n\nFiner-grained modularity\n------------------------\nIf you want finer-grained control over content selection, we have structured every module into a few *topics*. A topics is defined by\na set of slides and recommended exercises. You can construct your own modules by selectiong topics. We have defined dependencies between\ntopics; for example, if you pick the `basic-syntax` topic you should also select the `why-rust` topic. These dependencies ensure that\nyou should still end up with a coherent course.\n\nIf you take this route, however, you have to take more responsibility that the study load remains balanced, as (unlike with modules), \n*topics* don't have a fixed study time associated with them. For example (again), the `why-rust` topic will require less time (and has no\npartical exercises attached to it) than the `basic-syntax` topic. Since teach-rs is in active development, we cannot give\ntime estimates per topic and are focussing more on balancing the study load for the full course and the pre-defined *tracks*.\n\nOverview of modules and topics\n------------------------------\nGeneral modules of the Rust course can be divided into \"common\" and \"specialized\" modules. The\ncommon ones will be useful for every track (for example, \"Language Basics\") whereas others\ncan be viewed as optional (for example, \"Rust for Web\").\n\nModule 0 (introduction) is recommended in full for every course, since it outlines the motivation\nfor learning Rust, and broadly introduces its features. Module A contains all topics related to language features.\n\nReference material\n==================\nSeveral online resources exists that can provide valuable background material for you (or your students).\n\n- [The Rust Programming Language](https://doc.rust-lang.org/book/index.html), online book, also available [as paperback](https://nostarch.com/rust-programming-language-2nd-edition)\n- [Rust by Example](https://doc.rust-lang.org/stable/rust-by-example/), online reference with idiomatic examples of Rust code\n- [Rust for Rustaceans](https://nostarch.com/rust-rustaceans), book that assumes some prior knowledge and dives into more advanced topics\n- [Learning Rust with Entirely Too Many Linked Lists](https://rust-unofficial.github.io/too-many-lists/), focussing on Rust's ownership and borrowing rules\n- [Rust Design Patterns](https://rust-unofficial.github.io/patterns/), a collection of idiomatic Rust patterns (and anti-patterns)\n- [The Rust Reference](https://doc.rust-lang.org/reference/index.html), a reference suitable for finding explanations for finer points of syntax and semantics.\n- [The Rustonomicon](https://doc.rust-lang.org/nomicon/), a reference that is specific to low-level aspects, application binary interfaces and `unsafe` code.\n\nExercise solutions\n------------------\nTeach-rs is provided without answers to exercises. If you have need of those, please [contact us](mailto:hd@oordt.dev).\n"
        }
      ]
    }
  ]
}