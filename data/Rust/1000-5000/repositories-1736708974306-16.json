{
  "metadata": {
    "timestamp": 1736708974306,
    "page": 16,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjIw",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "rust-lang/miri",
      "stars": 4772,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 0.4052734375,
          "content": "# EditorConfig helps developers define and maintain consistent\n# coding styles between different editors and IDEs\n# editorconfig.org\n\nroot = true\n\n\n[*]\nend_of_line = lf\ncharset = utf-8\ntrim_trailing_whitespace = true\ninsert_final_newline = true\nindent_style = space\nindent_size = 4\n\n[*.rs]\nindent_style = space\nindent_size = 4\n\n[*.toml]\nindent_style = space\nindent_size = 4\n\n[*.md]\ntrim_trailing_whitespace = false\n"
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.1298828125,
          "content": "* text=auto eol=lf\n\n# Older git versions try to fix line endings on images, this prevents it.\n*.png binary\n*.jpg binary\n*.ico binary\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.1455078125,
          "content": "target\n/doc\ntex/*/out\n*.dot\n*.out\n*.rs.bk\n.vscode\n.helix\n*.mm_profdata\nperf.data\nperf.data.old\nflamegraph.svg\ntests/native-lib/libtestlib.so\n.auto-*\n"
        },
        {
          "name": ".gitpod.yml",
          "type": "blob",
          "size": 0.2001953125,
          "content": "image: ubuntu:latest\n\ntasks:\n  - before: echo \"...\"\n    init: |\n      cargo install rustup-toolchain-install-master\n      ./miri toolchain\n      ./miri build\n    command: echo \"Run tests with ./miri test\"\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 17.9248046875,
          "content": "# Contribution Guide\n\nIf you want to hack on Miri yourself, great!  Here are some resources you might\nfind useful.\n\n## Getting started\n\nCheck out the issues on this GitHub repository for some ideas. In particular,\nlook for the green `E-*` labels which mark issues that should be rather\nwell-suited for onboarding. For more ideas or help with hacking on Miri, you can\ncontact us on the [Rust Zulip]. See the [Rust website](https://www.rust-lang.org/governance/teams/compiler#team-miri)\nfor a list of Miri maintainers.\n\n[Rust Zulip]: https://rust-lang.zulipchat.com\n\n### Pull review process\n\nWhen you get a review, please take care of the requested changes in new commits. Do not amend\nexisting commits. Generally avoid force-pushing. The only time you should force push is when there\nis a conflict with the master branch (in that case you should rebase across master, not merge), and\nall the way at the end of the review process when the reviewer tells you that the PR is done and you\nshould squash the commits. For the latter case, use `git rebase --keep-base ...` to squash without\nchanging the base commit your PR branches off of. Use your own judgment and the reviewer's guidance\nto decide whether the PR should be squashed into a single commit or multiple logically separate\ncommits. (All this is to work around the fact that Github is quite bad at dealing with force pushes\nand does not support `git range-diff`. Maybe one day Github will be good at git and then life can\nbecome easier.)\n\nMost PRs bounce back and forth between the reviewer and the author several times, so it is good to\nkeep track of who is expected to take the next step. We are using the `S-waiting-for-review` and\n`S-waiting-for-author` labels for that. If a reviewer asked you to do some changes and you think\nthey are all taken care of, post a comment saying `@rustbot ready` to mark a PR as ready for the\nnext round of review.\n\n### Larger-scale contributions\n\nIf you are thinking about making a larger-scale contribution -- in particular anything that needs\nmore than can reasonably fit in a single PR to be feature-complete -- then please talk to us before\nwriting significant amounts of code. Generally, we will ask that you follow a three-step \"project\"\nprocess for such contributions:\n\n1. Clearly define the **goal** of the project. This defines the scope of the project, i.e. which\n   part of which APIs should be supported. If this involves functions that expose a big API surface\n   with lots of flags, the project may want to support only a tiny subset of flags; that should be\n   documented. A good way to express the goal is with one or more test cases that Miri should be\n   able to successfully execute when the project is completed. It is a good idea to get feedback\n   from team members already at this stage to ensure that the project is reasonably scoped and\n   aligns with our interests.\n2. Make a **design** for how to realize the goal. A larger project will likely have to do global\n   changes to Miri, like adding new global state to the `Machine` type or new methods to the\n   `FileDescription` trait. Often we have to iterate on those changes, which can quite substantially\n   change how the final implementation looks like.\n\n    The design should be reasonably concrete, i.e. for new global state or methods the corresponding\n   Rust types and method signatures should be spelled out. We realize that it can be hard to make a\n   design without doing implementation work, in particular if you are not yet familiar with the\n   codebase. Doing draft implementations in phase 2 of this process is perfectly fine, just please\n   be aware that we might request fundamental changes that can require significantly reworking what\n   you already did. If you open a PR in this stage, please clearly indicate that this project is\n   still in the design stage.\n\n3. Finish the **implementation** and have it reviewed.\n\nThis process is largely informal, and its primary goal is to more clearly communicate expectations.\nPlease get in touch with us if you have any questions!\n\n## Preparing the build environment\n\nMiri heavily relies on internal and unstable rustc interfaces to execute MIR,\nwhich means it is important that you install a version of rustc that Miri\nactually works with.\n\nThe `rust-version` file contains the commit hash of rustc that Miri is currently\ntested against. Other versions will likely not work. After installing\n[`rustup-toolchain-install-master`], you can run the following command to\ninstall that exact version of rustc as a toolchain:\n```\n./miri toolchain\n```\nThis will set up a rustup toolchain called `miri` and set it as an override for\nthe current directory.\n\nYou can also create a `.auto-everything` file (contents don't matter, can be empty), which\nwill cause any `./miri` command to automatically call `./miri toolchain`, `clippy` and `rustfmt`\nfor you. If you don't want all of these to happen, you can add individual `.auto-toolchain`,\n`.auto-clippy` and `.auto-fmt` files respectively.\n\n[`rustup-toolchain-install-master`]: https://github.com/kennytm/rustup-toolchain-install-master\n\n## Building and testing Miri\n\nInvoking Miri requires getting a bunch of flags right and setting up a custom\nsysroot. The `miri` script takes care of that for you. With the\nbuild environment prepared, compiling Miri is just one command away:\n\n```\n./miri build\n```\n\nRun `./miri` without arguments to see the other commands our build tool\nsupports.\n\n### Testing the Miri driver\n\nThe Miri driver compiled from `src/bin/miri.rs` is the \"heart\" of Miri: it is\nbasically a version of `rustc` that, instead of compiling your code, runs it.\nIt accepts all the same flags as `rustc` (though the ones only affecting code\ngeneration and linking obviously will have no effect) [and more][miri-flags].\n\n[miri-flags]: README.md#miri--z-flags-and-environment-variables\n\nFor example, you can (cross-)run the driver on a particular file by doing\n\n```sh\n./miri run tests/pass/format.rs\n./miri run tests/pass/hello.rs --target i686-unknown-linux-gnu\n```\n\nTests in ``pass-dep`` need to be run using ``./miri run --dep <filename>``.  \nFor example:\n```sh\n./miri run --dep tests/pass-dep/shims/libc-fs.rs\n```\n\nYou can (cross-)run the entire test suite using:\n\n```sh\n./miri test\n./miri test --target i686-unknown-linux-gnu\n```\n\n`./miri test FILTER` only runs those tests that contain `FILTER` in their filename (including the\nbase directory, e.g. `./miri test fail` will run all compile-fail tests). Multiple filters are\nsupported: `./miri test FILTER1 FILTER2` runs all tests that contain either string.\n\n#### Fine grained logging\n\nYou can get a trace of which MIR statements are being executed by setting the\n`MIRI_LOG` environment variable.  For example:\n\n```sh\nMIRI_LOG=info ./miri run tests/pass/vec.rs\n```\n\nSetting `MIRI_LOG` like this will configure logging for Miri itself as well as\nthe `rustc_middle::mir::interpret` and `rustc_mir::interpret` modules in rustc. You\ncan also do more targeted configuration, e.g. the following helps debug the\nstacked borrows implementation:\n\n```sh\nMIRI_LOG=rustc_mir::interpret=info,miri::stacked_borrows ./miri run tests/pass/vec.rs\n```\n\nNote that you will only get `info`, `warn` or `error` messages if you use a prebuilt compiler.\nIn order to get `debug` and `trace` level messages, you need to build miri with a locally built\ncompiler that has `debug=true` set in `config.toml`.\n\n#### Debugging error messages\n\nYou can set `MIRI_BACKTRACE=1` to get a backtrace of where an\nevaluation error was originally raised.\n\n\n### UI testing\n\nWe use ui-testing in Miri, meaning we generate `.stderr` and `.stdout` files for the output\nproduced by Miri. You can use `./miri test --bless` to automatically (re)generate these files when\nyou add new tests or change how Miri presents certain output.\n\nNote that when you also use `MIRIFLAGS` to change optimizations and similar, the ui output\nwill change in unexpected ways. In order to still be able\nto run the other checks while ignoring the ui output, use `MIRI_SKIP_UI_CHECKS=1 ./miri test`.\n\nFor more info on how to configure ui tests see [the documentation on the ui test crate][ui_test]\n\n[ui_test]: https://github.com/oli-obk/ui_test/blob/main/README.md\n\n### Testing `cargo miri`\n\nWorking with the driver directly gives you full control, but you also lose all\nthe convenience provided by cargo. Once your test case depends on a crate, it\nis probably easier to test it with the cargo wrapper. You can install your\ndevelopment version of Miri using\n\n```\n./miri install\n```\n\nand then you can use it as if it was installed by `rustup` as a component of the\n`miri` toolchain. Note that the `miri` and `cargo-miri` executables are placed\nin the `miri` toolchain's sysroot to prevent conflicts with other toolchains.\nThe Miri binaries in the `cargo` bin directory (usually `~/.cargo/bin`) are managed by rustup.\n\nThere's a test for the cargo wrapper in the `test-cargo-miri` directory; run `./run-test.py` in\nthere to execute it. You can pass `--target` to execute the test for another target.\n\n### Using a modified standard library\n\nMiri re-builds the standard library into a custom sysroot, so it is fairly easy\nto test Miri against a modified standard library -- you do not even have to\nbuild Miri yourself, the Miri shipped by `rustup` will work. All you have to do\nis set the `MIRI_LIB_SRC` environment variable to the `library` folder of a\n`rust-lang/rust` repository checkout. Note that changing files in that directory\ndoes not automatically trigger a re-build of the standard library; you have to\nclear the Miri build cache manually (on Linux, `rm -rf ~/.cache/miri`;\non Windows, `rmdir /S \"%LOCALAPPDATA%\\rust-lang\\miri\\cache\"`;\nand on macOS, `rm -rf ~/Library/Caches/org.rust-lang.miri`).\n\n### Benchmarking\n\nMiri comes with a few benchmarks; you can run `./miri bench` to run them with the locally built\nMiri. Note: this will run `./miri install` as a side-effect. Also requires `hyperfine` to be\ninstalled (`cargo install hyperfine`).\n\nTo compare the benchmark results with a baseline, do the following:\n- Before applying your changes, run `./miri bench --save-baseline=baseline.json`.\n- Then do your changes.\n- Then run `./miri bench --load-baseline=baseline.json`; the results will include\n  a comparison with the baseline.\n\nYou can run only some of the benchmarks by listing them, e.g. `./miri bench mse`.\nThe names refer to the folders in `bench-cargo-miri`.\n\n## Configuring `rust-analyzer`\n\nTo configure `rust-analyzer` and the IDE for working on Miri, copy one of the provided\nconfiguration files according to the instructions below. You can also set up a symbolic\nlink to keep the configuration in sync with our recommendations.\n\n### Visual Studio Code\n\nCopy [`etc/rust_analyzer_vscode.json`] to `.vscode/settings.json` in the project root directory.\n\n[`etc/rust_analyzer_vscode.json`]: https://github.com/rust-lang/miri/blob/master/etc/rust_analyzer_vscode.json\n\n### Helix\n\nCopy [`etc/rust_analyzer_helix.toml`] to `.helix/languages.toml` in the project root directory.\n\nSince working on Miri requires a custom toolchain, and Helix requires the language server\nto be installed with the toolchain, you have to run `./miri toolchain -c rust-analyzer`\nwhen installing the Miri toolchain. Alternatively, set the `RUSTUP_TOOLCHAIN` environment variable according to\n[the documentation](https://rust-analyzer.github.io/manual.html#toolchain).\n\n[`etc/rust_analyzer_helix.toml`]: https://github.com/rust-lang/miri/blob/master/etc/rust_analyzer_helix.toml\n\n### Advanced configuration\n\nIf you are building Miri with a locally built rustc, set\n`rust-analyzer.rustcSource` to the relative path from your Miri clone to the\nroot `Cargo.toml` of the locally built rustc. For example, the path might look\nlike `../rust/Cargo.toml`. In addition to that, replace `clippy` by `check`\nin the `rust-analyzer.check.overrideCommand` setting.\n\nSee the rustc-dev-guide's docs on [\"Configuring `rust-analyzer` for `rustc`\"][rdg-r-a]\nfor more information about configuring the IDE and `rust-analyzer`.\n\n[rdg-r-a]: https://rustc-dev-guide.rust-lang.org/building/suggested.html#configuring-rust-analyzer-for-rustc\n\n## Advanced topic: Working on Miri in the rustc tree\n\nWe described above the simplest way to get a working build environment for Miri,\nwhich is to use the version of rustc indicated by `rustc-version`. But\nsometimes, that is not enough.\n\nA big part of the Miri driver is shared with rustc, so working on Miri will\nsometimes require also working on rustc itself. In this case, you should *not*\nwork in a clone of the Miri repository, but in a clone of the\n[main Rust repository](https://github.com/rust-lang/rust/). There is a copy of\nMiri located at `src/tools/miri` that you can work on directly. A maintainer\nwill eventually sync those changes back into this repository.\n\nWhen working on Miri in the rustc tree, here's how you can run tests:\n\n```\n./x.py test miri\n```\n\n`--bless` will work, too.\n\nYou can also directly run Miri on a Rust source file:\n\n```\n./x.py run miri --stage 1 --args src/tools/miri/tests/pass/hello.rs\n```\n\n## Advanced topic: Syncing with the rustc repo\n\nWe use the [`josh` proxy](https://github.com/josh-project/josh) to transmit changes between the\nrustc and Miri repositories. You can install it as follows:\n\n```sh\ncargo +stable install josh-proxy --git https://github.com/josh-project/josh --tag r24.10.04\n```\n\nJosh will automatically be started and stopped by `./miri`.\n\n### Importing changes from the rustc repo\n\n*Note: this usually happens automatically, so these steps rarely have to be done by hand.*\n\nWe assume we start on an up-to-date master branch in the Miri repo.\n\n```sh\n# Fetch and merge rustc side of the history. Takes ca 5 min the first time.\n# This will also update the `rustc-version` file.\n./miri rustc-pull\n# Update local toolchain and apply formatting.\n./miri toolchain && ./miri fmt\ngit commit -am \"rustup\"\n```\n\nNow push this to a new branch in your Miri fork, and create a PR. It is worth\nrunning `./miri test` locally in parallel, since the test suite in the Miri repo\nis stricter than the one on the rustc side, so some small tweaks might be\nneeded.\n\n### Exporting changes to the rustc repo\n\nWe will use the josh proxy to push to your fork of rustc. Run the following in the Miri repo,\nassuming we are on an up-to-date master branch:\n\n```sh\n# Push the Miri changes to your rustc fork (substitute your github handle for YOUR_NAME).\n./miri rustc-push YOUR_NAME miri\n```\n\nThis will create a new branch called `miri` in your fork, and the output should include a link that\ncreates a rustc PR to integrate those changes into the main repository. If that PR has conflicts,\nyou need to pull rustc changes into Miri first, and then re-do the rustc push.\n\nIf this fails due to authentication problems, it can help to make josh push via ssh instead of\nhttps. Add the following to your `.gitconfig`:\n\n```toml\n[url \"git@github.com:\"]\n    pushInsteadOf = https://github.com/\n```\n\n## Further environment variables\n\nThe following environment variables are relevant to `./miri`:\n\n* `MIRI_AUTO_OPS` indicates whether the automatic execution of rustfmt, clippy and toolchain setup\n  (as controlled by the `./auto-*` files) should be skipped. If it is set to `no`, they are skipped.\n  This is used to allow automated IDE actions to avoid the auto ops.\n* `MIRI_LOG`, `MIRI_BACKTRACE` control logging and backtrace printing during Miri executions.\n* `MIRI_TEST_THREADS` (recognized by `./miri test`) sets the number of threads to use for running\n  tests. By default, the number of cores is used.\n* `MIRI_SKIP_UI_CHECKS` (recognized by `./miri test`) disables checking that the `stderr` or\n  `stdout` files match the actual output.\n\nFurthermore, the usual environment variables recognized by `cargo miri` also work for `./miri`, e.g.\n`MIRI_LIB_SRC`. Note that `MIRIFLAGS` is ignored by `./miri test` as each test controls the flags it\nis run with.\n\nThe following environment variables are *internal* and must not be used by\nanyone but Miri itself. They are used to communicate between different Miri\nbinaries, and as such worth documenting:\n\n* `CARGO_EXTRA_FLAGS` is understood by `./miri` and passed to all host cargo invocations.\n  It is reserved for CI usage; setting the wrong flags this way can easily confuse the script.\n* `MIRI_BE_RUSTC` can be set to `host` or `target`. It tells the Miri driver to\n  actually not interpret the code but compile it like rustc would. With `target`, Miri sets\n  some compiler flags to prepare the code for interpretation; with `host`, this is not done.\n  This environment variable is useful to be sure that the compiled `rlib`s are compatible\n  with Miri.\n* `MIRI_CALLED_FROM_SETUP` is set during the Miri sysroot build,\n  which will re-invoke `cargo-miri` as the `rustc` to use for this build.\n* `MIRI_CALLED_FROM_RUSTDOC` when set to any value tells `cargo-miri` that it is\n  running as a child process of `rustdoc`, which invokes it twice for each doc-test\n  and requires special treatment, most notably a check-only build before interpretation.\n  This is set by `cargo-miri` itself when running as a `rustdoc`-wrapper.\n* `MIRI_CWD` when set to any value tells the Miri driver to change to the given\n  directory after loading all the source files, but before commencing\n  interpretation. This is useful if the interpreted program wants a different\n  working directory at run-time than at build-time.\n* `MIRI_LOCAL_CRATES` is set by `cargo-miri` to tell the Miri driver which\n  crates should be given special treatment in diagnostics, in addition to the\n  crate currently being compiled.\n* `MIRI_ORIG_RUSTDOC` is set and read by different phases of `cargo-miri` to remember the\n  value of `RUSTDOC` from before it was overwritten.\n* `MIRI_REPLACE_LIBRS_IF_NOT_TEST` when set to any value enables a hack that helps bootstrap\n  run the standard library tests in Miri.\n* `MIRI_TEST_TARGET` is set by `./miri test` (and `./x.py test miri`) to tell the test harness about\n  the chosen target.\n* `MIRI_VERBOSE` when set to any value tells the various `cargo-miri` phases to\n  perform verbose logging.\n* `MIRI_HOST_SYSROOT` is set by bootstrap to tell `cargo-miri` which sysroot to use for *host*\n  operations.\n* `RUSTC_BLESS` is set by `./miri test` (and `./x.py test miri`) to indicate bless-mode to the test\n  harness.\n"
        },
        {
          "name": "Cargo.lock",
          "type": "blob",
          "size": 32.234375,
          "content": "# This file is automatically @generated by Cargo.\n# It is not intended for manual editing.\nversion = 4\n\n[[package]]\nname = \"addr2line\"\nversion = \"0.21.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8a30b2e23b9e17a9f90641c7ab1549cd9b44f296d3ccbf309d2863cfe398a0cb\"\ndependencies = [\n \"gimli\",\n]\n\n[[package]]\nname = \"adler\"\nversion = \"1.0.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f26201604c87b1e01bd3d98f8d5d9a8fcbb815e8cedb41ffccbeb4bf593a35fe\"\n\n[[package]]\nname = \"aes\"\nversion = \"0.8.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b169f7a6d4742236a0a00c541b845991d0ac43e546831af1249753ab4c3aa3a0\"\ndependencies = [\n \"cfg-if\",\n \"cipher\",\n \"cpufeatures\",\n]\n\n[[package]]\nname = \"aho-corasick\"\nversion = \"1.1.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8e60d3430d3a69478ad0993f19238d2df97c507009a52b3c10addcd7f6bcb916\"\ndependencies = [\n \"memchr\",\n]\n\n[[package]]\nname = \"annotate-snippets\"\nversion = \"0.11.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"24e35ed54e5ea7997c14ed4c70ba043478db1112e98263b3b035907aa197d991\"\ndependencies = [\n \"anstyle\",\n \"unicode-width\",\n]\n\n[[package]]\nname = \"anstyle\"\nversion = \"1.0.8\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1bec1de6f59aedf83baf9ff929c98f2ad654b97c9510f4e70cf6f661d49fd5b1\"\n\n[[package]]\nname = \"anyhow\"\nversion = \"1.0.86\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b3d1d046238990b9cf5bcde22a3fb3584ee5cf65fb2765f454ed428c7a0063da\"\n\n[[package]]\nname = \"autocfg\"\nversion = \"1.3.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"0c4b4d0bd25bd0b74681c0ad21497610ce1b7c91b1022cd21c80c6fbdd9476b0\"\n\n[[package]]\nname = \"backtrace\"\nversion = \"0.3.71\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"26b05800d2e817c8b3b4b54abd461726265fa9789ae34330622f2db9ee696f9d\"\ndependencies = [\n \"addr2line\",\n \"cc\",\n \"cfg-if\",\n \"libc\",\n \"miniz_oxide\",\n \"object\",\n \"rustc-demangle\",\n]\n\n[[package]]\nname = \"bitflags\"\nversion = \"2.6.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b048fb63fd8b5923fc5aa7b340d8e156aec7ec02f0c78fa8a6ddc2613f6f71de\"\n\n[[package]]\nname = \"bstr\"\nversion = \"1.10.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"40723b8fb387abc38f4f4a37c09073622e41dd12327033091ef8950659e6dc0c\"\ndependencies = [\n \"memchr\",\n \"regex-automata\",\n \"serde\",\n]\n\n[[package]]\nname = \"byteorder\"\nversion = \"1.5.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1fd0f2584146f6f2ef48085050886acf353beff7305ebd1ae69500e27c67f64b\"\n\n[[package]]\nname = \"camino\"\nversion = \"1.1.7\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e0ec6b951b160caa93cc0c7b209e5a3bff7aae9062213451ac99493cd844c239\"\ndependencies = [\n \"serde\",\n]\n\n[[package]]\nname = \"cargo-platform\"\nversion = \"0.1.8\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"24b1f0365a6c6bb4020cd05806fd0d33c44d38046b8bd7f0e40814b9763cabfc\"\ndependencies = [\n \"serde\",\n]\n\n[[package]]\nname = \"cargo_metadata\"\nversion = \"0.18.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"2d886547e41f740c616ae73108f6eb70afe6d940c7bc697cb30f13daec073037\"\ndependencies = [\n \"camino\",\n \"cargo-platform\",\n \"semver\",\n \"serde\",\n \"serde_json\",\n \"thiserror\",\n]\n\n[[package]]\nname = \"cc\"\nversion = \"1.1.22\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"9540e661f81799159abee814118cc139a2004b3a3aa3ea37724a1b66530b90e0\"\ndependencies = [\n \"shlex\",\n]\n\n[[package]]\nname = \"cfg-if\"\nversion = \"1.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"baf1de4339761588bc0619e3cbc0120ee582ebb74b53b4efbf79117bd2da40fd\"\n\n[[package]]\nname = \"chrono\"\nversion = \"0.4.38\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a21f936df1771bf62b77f047b726c4625ff2e8aa607c01ec06e5a05bd8463401\"\ndependencies = [\n \"num-traits\",\n]\n\n[[package]]\nname = \"chrono-tz\"\nversion = \"0.10.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"cd6dd8046d00723a59a2f8c5f295c515b9bb9a331ee4f8f3d4dd49e428acd3b6\"\ndependencies = [\n \"chrono\",\n \"chrono-tz-build\",\n \"phf\",\n]\n\n[[package]]\nname = \"chrono-tz-build\"\nversion = \"0.4.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e94fea34d77a245229e7746bd2beb786cd2a896f306ff491fb8cecb3074b10a7\"\ndependencies = [\n \"parse-zoneinfo\",\n \"phf_codegen\",\n]\n\n[[package]]\nname = \"cipher\"\nversion = \"0.4.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"773f3b9af64447d2ce9850330c473515014aa235e6a783b02db81ff39e4a3dad\"\ndependencies = [\n \"crypto-common\",\n \"inout\",\n]\n\n[[package]]\nname = \"color-eyre\"\nversion = \"0.6.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"55146f5e46f237f7423d74111267d4597b59b0dad0ffaf7303bce9945d843ad5\"\ndependencies = [\n \"backtrace\",\n \"color-spantrace\",\n \"eyre\",\n \"indenter\",\n \"once_cell\",\n \"owo-colors\",\n \"tracing-error\",\n]\n\n[[package]]\nname = \"color-spantrace\"\nversion = \"0.2.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"cd6be1b2a7e382e2b98b43b2adcca6bb0e465af0bdd38123873ae61eb17a72c2\"\ndependencies = [\n \"once_cell\",\n \"owo-colors\",\n \"tracing-core\",\n \"tracing-error\",\n]\n\n[[package]]\nname = \"colored\"\nversion = \"2.1.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"cbf2150cce219b664a8a70df7a1f933836724b503f8a413af9365b4dcc4d90b8\"\ndependencies = [\n \"lazy_static\",\n \"windows-sys 0.48.0\",\n]\n\n[[package]]\nname = \"comma\"\nversion = \"1.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"55b672471b4e9f9e95499ea597ff64941a309b2cdbffcc46f2cc5e2d971fd335\"\n\n[[package]]\nname = \"console\"\nversion = \"0.15.8\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"0e1f83fc076bd6dd27517eacdf25fef6c4dfe5f1d7448bafaaf3a26f13b5e4eb\"\ndependencies = [\n \"encode_unicode\",\n \"lazy_static\",\n \"libc\",\n \"unicode-width\",\n \"windows-sys 0.52.0\",\n]\n\n[[package]]\nname = \"cpufeatures\"\nversion = \"0.2.12\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"53fe5e26ff1b7aef8bca9c6080520cfb8d9333c7568e1829cef191a9723e5504\"\ndependencies = [\n \"libc\",\n]\n\n[[package]]\nname = \"crossbeam-channel\"\nversion = \"0.5.13\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"33480d6946193aa8033910124896ca395333cae7e2d1113d1fef6c3272217df2\"\ndependencies = [\n \"crossbeam-utils\",\n]\n\n[[package]]\nname = \"crossbeam-utils\"\nversion = \"0.8.20\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"22ec99545bb0ed0ea7bb9b8e1e9122ea386ff8a48c0922e43f36d45ab09e0e80\"\n\n[[package]]\nname = \"crypto-common\"\nversion = \"0.1.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1bfb12502f3fc46cca1bb51ac28df9d618d813cdc3d2f25b9fe775a34af26bb3\"\ndependencies = [\n \"generic-array\",\n \"typenum\",\n]\n\n[[package]]\nname = \"directories\"\nversion = \"5.0.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"9a49173b84e034382284f27f1af4dcbbd231ffa358c0fe316541a7337f376a35\"\ndependencies = [\n \"dirs-sys\",\n]\n\n[[package]]\nname = \"dirs-sys\"\nversion = \"0.4.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"520f05a5cbd335fae5a99ff7a6ab8627577660ee5cfd6a94a6a929b52ff0321c\"\ndependencies = [\n \"libc\",\n \"option-ext\",\n \"redox_users\",\n \"windows-sys 0.48.0\",\n]\n\n[[package]]\nname = \"encode_unicode\"\nversion = \"0.3.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a357d28ed41a50f9c765dbfe56cbc04a64e53e5fc58ba79fbc34c10ef3df831f\"\n\n[[package]]\nname = \"errno\"\nversion = \"0.3.9\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"534c5cf6194dfab3db3242765c03bbe257cf92f22b38f6bc0c58d59108a820ba\"\ndependencies = [\n \"libc\",\n \"windows-sys 0.52.0\",\n]\n\n[[package]]\nname = \"eyre\"\nversion = \"0.6.12\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"7cd915d99f24784cdc19fd37ef22b97e3ff0ae756c7e492e9fbfe897d61e2aec\"\ndependencies = [\n \"indenter\",\n \"once_cell\",\n]\n\n[[package]]\nname = \"fastrand\"\nversion = \"2.1.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"9fc0510504f03c51ada170672ac806f1f105a88aa97a5281117e1ddc3368e51a\"\n\n[[package]]\nname = \"generic-array\"\nversion = \"0.14.7\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"85649ca51fd72272d7821adaf274ad91c288277713d9c18820d8499a7ff69e9a\"\ndependencies = [\n \"typenum\",\n \"version_check\",\n]\n\n[[package]]\nname = \"getrandom\"\nversion = \"0.2.15\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"c4567c8db10ae91089c99af84c68c38da3ec2f087c3f82960bcdbf3656b6f4d7\"\ndependencies = [\n \"cfg-if\",\n \"libc\",\n \"wasi\",\n]\n\n[[package]]\nname = \"gimli\"\nversion = \"0.28.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"4271d37baee1b8c7e4b708028c57d816cf9d2434acb33a549475f78c181f6253\"\n\n[[package]]\nname = \"indenter\"\nversion = \"0.3.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ce23b50ad8242c51a442f3ff322d56b02f08852c77e4c0b4d3fd684abc89c683\"\n\n[[package]]\nname = \"indicatif\"\nversion = \"0.17.8\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"763a5a8f45087d6bcea4222e7b72c291a054edf80e4ef6efd2a4979878c7bea3\"\ndependencies = [\n \"console\",\n \"instant\",\n \"number_prefix\",\n \"portable-atomic\",\n \"unicode-width\",\n]\n\n[[package]]\nname = \"inout\"\nversion = \"0.1.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a0c10553d664a4d0bcff9f4215d0aac67a639cc68ef660840afe309b807bc9f5\"\ndependencies = [\n \"generic-array\",\n]\n\n[[package]]\nname = \"instant\"\nversion = \"0.1.13\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e0242819d153cba4b4b05a5a8f2a7e9bbf97b6055b2a002b395c96b5ff3c0222\"\ndependencies = [\n \"cfg-if\",\n]\n\n[[package]]\nname = \"itoa\"\nversion = \"1.0.11\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"49f1f14873335454500d59611f1cf4a4b0f786f9ac11f4312a78e4cf2566695b\"\n\n[[package]]\nname = \"lazy_static\"\nversion = \"1.5.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"bbd2bcb4c963f2ddae06a2efc7e9f3591312473c50c6685e1f298068316e66fe\"\n\n[[package]]\nname = \"levenshtein\"\nversion = \"1.0.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"db13adb97ab515a3691f56e4dbab09283d0b86cb45abd991d8634a9d6f501760\"\n\n[[package]]\nname = \"libc\"\nversion = \"0.2.155\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"97b3888a4aecf77e811145cadf6eef5901f4782c53886191b2f693f24761847c\"\n\n[[package]]\nname = \"libffi\"\nversion = \"3.2.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ce826c243048e3d5cec441799724de52e2d42f820468431fc3fceee2341871e2\"\ndependencies = [\n \"libc\",\n \"libffi-sys\",\n]\n\n[[package]]\nname = \"libffi-sys\"\nversion = \"2.3.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f36115160c57e8529781b4183c2bb51fdc1f6d6d1ed345591d84be7703befb3c\"\ndependencies = [\n \"cc\",\n]\n\n[[package]]\nname = \"libloading\"\nversion = \"0.8.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"4979f22fdb869068da03c9f7528f8297c6fd2606bc3a4affe42e6a823fdb8da4\"\ndependencies = [\n \"cfg-if\",\n \"windows-targets 0.52.6\",\n]\n\n[[package]]\nname = \"libredox\"\nversion = \"0.1.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"c0ff37bd590ca25063e35af745c343cb7a0271906fb7b37e4813e8f79f00268d\"\ndependencies = [\n \"bitflags\",\n \"libc\",\n]\n\n[[package]]\nname = \"linux-raw-sys\"\nversion = \"0.4.14\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"78b3ae25bc7c8c38cec158d1f2757ee79e9b3740fbc7ccf0e59e4b08d793fa89\"\n\n[[package]]\nname = \"lock_api\"\nversion = \"0.4.12\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"07af8b9cdd281b7915f413fa73f29ebd5d55d0d3f0155584dade1ff18cea1b17\"\ndependencies = [\n \"autocfg\",\n \"scopeguard\",\n]\n\n[[package]]\nname = \"log\"\nversion = \"0.4.22\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a7a70ba024b9dc04c27ea2f0c0548feb474ec5c54bba33a7f72f873a39d07b24\"\n\n[[package]]\nname = \"measureme\"\nversion = \"11.0.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"dfa4a40f09af7aa6faef38285402a78847d0d72bf8827006cd2a332e1e6e4a8d\"\ndependencies = [\n \"log\",\n \"memmap2\",\n \"parking_lot\",\n \"perf-event-open-sys\",\n \"rustc-hash\",\n \"smallvec\",\n]\n\n[[package]]\nname = \"memchr\"\nversion = \"2.7.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"78ca9ab1a0babb1e7d5695e3530886289c18cf2f87ec19a575a0abdce112e3a3\"\n\n[[package]]\nname = \"memmap2\"\nversion = \"0.2.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"723e3ebdcdc5c023db1df315364573789f8857c11b631a2fdfad7c00f5c046b4\"\ndependencies = [\n \"libc\",\n]\n\n[[package]]\nname = \"miniz_oxide\"\nversion = \"0.7.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b8a240ddb74feaf34a79a7add65a741f3167852fba007066dcac1ca548d89c08\"\ndependencies = [\n \"adler\",\n]\n\n[[package]]\nname = \"miri\"\nversion = \"0.1.0\"\ndependencies = [\n \"aes\",\n \"chrono\",\n \"chrono-tz\",\n \"colored\",\n \"directories\",\n \"getrandom\",\n \"libc\",\n \"libffi\",\n \"libloading\",\n \"measureme\",\n \"rand\",\n \"regex\",\n \"rustc_version\",\n \"smallvec\",\n \"tempfile\",\n \"tikv-jemalloc-sys\",\n \"ui_test\",\n \"windows-sys 0.52.0\",\n]\n\n[[package]]\nname = \"num-traits\"\nversion = \"0.2.19\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"071dfc062690e90b734c0b2273ce72ad0ffa95f0c74596bc250dcfd960262841\"\ndependencies = [\n \"autocfg\",\n]\n\n[[package]]\nname = \"number_prefix\"\nversion = \"0.4.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"830b246a0e5f20af87141b25c173cd1b609bd7779a4617d6ec582abaf90870f3\"\n\n[[package]]\nname = \"object\"\nversion = \"0.32.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a6a622008b6e321afc04970976f62ee297fdbaa6f95318ca343e3eebb9648441\"\ndependencies = [\n \"memchr\",\n]\n\n[[package]]\nname = \"once_cell\"\nversion = \"1.19.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3fdb12b2476b595f9358c5161aa467c2438859caa136dec86c26fdd2efe17b92\"\n\n[[package]]\nname = \"option-ext\"\nversion = \"0.2.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"04744f49eae99ab78e0d5c0b603ab218f515ea8cfe5a456d7629ad883a3b6e7d\"\n\n[[package]]\nname = \"owo-colors\"\nversion = \"3.5.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"c1b04fb49957986fdce4d6ee7a65027d55d4b6d2265e5848bbb507b58ccfdb6f\"\n\n[[package]]\nname = \"pad\"\nversion = \"0.1.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d2ad9b889f1b12e0b9ee24db044b5129150d5eada288edc800f789928dc8c0e3\"\ndependencies = [\n \"unicode-width\",\n]\n\n[[package]]\nname = \"parking_lot\"\nversion = \"0.12.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f1bf18183cf54e8d6059647fc3063646a1801cf30896933ec2311622cc4b9a27\"\ndependencies = [\n \"lock_api\",\n \"parking_lot_core\",\n]\n\n[[package]]\nname = \"parking_lot_core\"\nversion = \"0.9.10\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1e401f977ab385c9e4e3ab30627d6f26d00e2c73eef317493c4ec6d468726cf8\"\ndependencies = [\n \"cfg-if\",\n \"libc\",\n \"redox_syscall\",\n \"smallvec\",\n \"windows-targets 0.52.6\",\n]\n\n[[package]]\nname = \"parse-zoneinfo\"\nversion = \"0.3.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1f2a05b18d44e2957b88f96ba460715e295bc1d7510468a2f3d3b44535d26c24\"\ndependencies = [\n \"regex\",\n]\n\n[[package]]\nname = \"perf-event-open-sys\"\nversion = \"3.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b29be2ba35c12c6939f6bc73187f728bba82c3c062ecdc5fa90ea739282a1f58\"\ndependencies = [\n \"libc\",\n]\n\n[[package]]\nname = \"phf\"\nversion = \"0.11.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ade2d8b8f33c7333b51bcf0428d37e217e9f32192ae4772156f65063b8ce03dc\"\ndependencies = [\n \"phf_shared\",\n]\n\n[[package]]\nname = \"phf_codegen\"\nversion = \"0.11.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e8d39688d359e6b34654d328e262234662d16cc0f60ec8dcbe5e718709342a5a\"\ndependencies = [\n \"phf_generator\",\n \"phf_shared\",\n]\n\n[[package]]\nname = \"phf_generator\"\nversion = \"0.11.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"48e4cc64c2ad9ebe670cb8fd69dd50ae301650392e81c05f9bfcb2d5bdbc24b0\"\ndependencies = [\n \"phf_shared\",\n \"rand\",\n]\n\n[[package]]\nname = \"phf_shared\"\nversion = \"0.11.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"90fcb95eef784c2ac79119d1dd819e162b5da872ce6f3c3abe1e8ca1c082f72b\"\ndependencies = [\n \"siphasher\",\n]\n\n[[package]]\nname = \"pin-project-lite\"\nversion = \"0.2.14\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"bda66fc9667c18cb2758a2ac84d1167245054bcf85d5d1aaa6923f45801bdd02\"\n\n[[package]]\nname = \"portable-atomic\"\nversion = \"1.7.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"da544ee218f0d287a911e9c99a39a8c9bc8fcad3cb8db5959940044ecfc67265\"\n\n[[package]]\nname = \"ppv-lite86\"\nversion = \"0.2.20\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"77957b295656769bb8ad2b6a6b09d897d94f05c41b069aede1fcdaa675eaea04\"\ndependencies = [\n \"zerocopy\",\n]\n\n[[package]]\nname = \"prettydiff\"\nversion = \"0.7.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"abec3fb083c10660b3854367697da94c674e9e82aa7511014dc958beeb7215e9\"\ndependencies = [\n \"owo-colors\",\n \"pad\",\n]\n\n[[package]]\nname = \"proc-macro2\"\nversion = \"1.0.86\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"5e719e8df665df0d1c8fbfd238015744736151d4445ec0836b8e628aae103b77\"\ndependencies = [\n \"unicode-ident\",\n]\n\n[[package]]\nname = \"quote\"\nversion = \"1.0.36\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"0fa76aaf39101c457836aec0ce2316dbdc3ab723cdda1c6bd4e6ad4208acaca7\"\ndependencies = [\n \"proc-macro2\",\n]\n\n[[package]]\nname = \"rand\"\nversion = \"0.8.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"34af8d1a0e25924bc5b7c43c079c942339d8f0a8b57c39049bef581b46327404\"\ndependencies = [\n \"libc\",\n \"rand_chacha\",\n \"rand_core\",\n]\n\n[[package]]\nname = \"rand_chacha\"\nversion = \"0.3.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e6c10a63a0fa32252be49d21e7709d4d4baf8d231c2dbce1eaa8141b9b127d88\"\ndependencies = [\n \"ppv-lite86\",\n \"rand_core\",\n]\n\n[[package]]\nname = \"rand_core\"\nversion = \"0.6.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ec0be4795e2f6a28069bec0b5ff3e2ac9bafc99e6a9a7dc3547996c5c816922c\"\ndependencies = [\n \"getrandom\",\n]\n\n[[package]]\nname = \"redox_syscall\"\nversion = \"0.5.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"2a908a6e00f1fdd0dfd9c0eb08ce85126f6d8bbda50017e74bc4a4b7d4a926a4\"\ndependencies = [\n \"bitflags\",\n]\n\n[[package]]\nname = \"redox_users\"\nversion = \"0.4.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"bd283d9651eeda4b2a83a43c1c91b266c40fd76ecd39a50a8c630ae69dc72891\"\ndependencies = [\n \"getrandom\",\n \"libredox\",\n \"thiserror\",\n]\n\n[[package]]\nname = \"regex\"\nversion = \"1.10.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"4219d74c6b67a3654a9fbebc4b419e22126d13d2f3c4a07ee0cb61ff79a79619\"\ndependencies = [\n \"aho-corasick\",\n \"memchr\",\n \"regex-automata\",\n \"regex-syntax\",\n]\n\n[[package]]\nname = \"regex-automata\"\nversion = \"0.4.7\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"38caf58cc5ef2fed281f89292ef23f6365465ed9a41b7a7754eb4e26496c92df\"\ndependencies = [\n \"aho-corasick\",\n \"memchr\",\n \"regex-syntax\",\n]\n\n[[package]]\nname = \"regex-syntax\"\nversion = \"0.8.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"7a66a03ae7c801facd77a29370b4faec201768915ac14a721ba36f20bc9c209b\"\n\n[[package]]\nname = \"rustc-demangle\"\nversion = \"0.1.24\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"719b953e2095829ee67db738b3bfa9fa368c94900df327b3f07fe6e794d2fe1f\"\n\n[[package]]\nname = \"rustc-hash\"\nversion = \"1.1.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"08d43f7aa6b08d49f382cde6a7982047c3426db949b1424bc4b7ec9ae12c6ce2\"\n\n[[package]]\nname = \"rustc_version\"\nversion = \"0.4.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"bfa0f585226d2e68097d4f95d113b15b83a82e819ab25717ec0590d9584ef366\"\ndependencies = [\n \"semver\",\n]\n\n[[package]]\nname = \"rustfix\"\nversion = \"0.8.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"70f5b7fc8060f4f8373f9381a630304b42e1183535d9beb1d3f596b236c9106a\"\ndependencies = [\n \"serde\",\n \"serde_json\",\n \"thiserror\",\n \"tracing\",\n]\n\n[[package]]\nname = \"rustix\"\nversion = \"0.38.34\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"70dc5ec042f7a43c4a73241207cecc9873a06d45debb38b329f8541d85c2730f\"\ndependencies = [\n \"bitflags\",\n \"errno\",\n \"libc\",\n \"linux-raw-sys\",\n \"windows-sys 0.52.0\",\n]\n\n[[package]]\nname = \"ryu\"\nversion = \"1.0.18\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f3cb5ba0dc43242ce17de99c180e96db90b235b8a9fdc9543c96d2209116bd9f\"\n\n[[package]]\nname = \"scopeguard\"\nversion = \"1.2.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"94143f37725109f92c262ed2cf5e59bce7498c01bcc1502d7b9afe439a4e9f49\"\n\n[[package]]\nname = \"semver\"\nversion = \"1.0.23\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"61697e0a1c7e512e84a621326239844a24d8207b4669b41bc18b32ea5cbf988b\"\ndependencies = [\n \"serde\",\n]\n\n[[package]]\nname = \"serde\"\nversion = \"1.0.204\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"bc76f558e0cbb2a839d37354c575f1dc3fdc6546b5be373ba43d95f231bf7c12\"\ndependencies = [\n \"serde_derive\",\n]\n\n[[package]]\nname = \"serde_derive\"\nversion = \"1.0.204\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e0cd7e117be63d3c3678776753929474f3b04a43a080c744d6b0ae2a8c28e222\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn\",\n]\n\n[[package]]\nname = \"serde_json\"\nversion = \"1.0.122\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"784b6203951c57ff748476b126ccb5e8e2959a5c19e5c617ab1956be3dbc68da\"\ndependencies = [\n \"itoa\",\n \"memchr\",\n \"ryu\",\n \"serde\",\n]\n\n[[package]]\nname = \"sharded-slab\"\nversion = \"0.1.7\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f40ca3c46823713e0d4209592e8d6e826aa57e928f09752619fc696c499637f6\"\ndependencies = [\n \"lazy_static\",\n]\n\n[[package]]\nname = \"shlex\"\nversion = \"1.3.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"0fda2ff0d084019ba4d7c6f371c95d8fd75ce3524c3cb8fb653a3023f6323e64\"\n\n[[package]]\nname = \"siphasher\"\nversion = \"0.3.11\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"38b58827f4464d87d377d175e90bf58eb00fd8716ff0a62f80356b5e61555d0d\"\n\n[[package]]\nname = \"smallvec\"\nversion = \"1.13.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3c5e1a9a646d36c3599cd173a41282daf47c44583ad367b8e6837255952e5c67\"\n\n[[package]]\nname = \"spanned\"\nversion = \"0.3.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"86af297923fbcfd107c20a189a6e9c872160df71a7190ae4a7a6c5dce4b2feb6\"\ndependencies = [\n \"bstr\",\n \"color-eyre\",\n]\n\n[[package]]\nname = \"syn\"\nversion = \"2.0.72\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"dc4b9b9bf2add8093d3f2c0204471e951b2285580335de42f9d2534f3ae7a8af\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"unicode-ident\",\n]\n\n[[package]]\nname = \"tempfile\"\nversion = \"3.11.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b8fcd239983515c23a32fb82099f97d0b11b8c72f654ed659363a95c3dad7a53\"\ndependencies = [\n \"cfg-if\",\n \"fastrand\",\n \"once_cell\",\n \"rustix\",\n \"windows-sys 0.52.0\",\n]\n\n[[package]]\nname = \"thiserror\"\nversion = \"1.0.63\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"c0342370b38b6a11b6cc11d6a805569958d54cfa061a29969c3b5ce2ea405724\"\ndependencies = [\n \"thiserror-impl\",\n]\n\n[[package]]\nname = \"thiserror-impl\"\nversion = \"1.0.63\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a4558b58466b9ad7ca0f102865eccc95938dca1a74a856f2b57b6629050da261\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn\",\n]\n\n[[package]]\nname = \"thread_local\"\nversion = \"1.1.8\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8b9ef9bad013ada3808854ceac7b46812a6465ba368859a37e2100283d2d719c\"\ndependencies = [\n \"cfg-if\",\n \"once_cell\",\n]\n\n[[package]]\nname = \"tikv-jemalloc-sys\"\nversion = \"0.6.0+5.3.0-1-ge13ca993e8ccb9ba9847cc330696e02839f328f7\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"cd3c60906412afa9c2b5b5a48ca6a5abe5736aec9eb48ad05037a677e52e4e2d\"\ndependencies = [\n \"cc\",\n \"libc\",\n]\n\n[[package]]\nname = \"tracing\"\nversion = \"0.1.40\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"c3523ab5a71916ccf420eebdf5521fcef02141234bbc0b8a49f2fdc4544364ef\"\ndependencies = [\n \"pin-project-lite\",\n \"tracing-core\",\n]\n\n[[package]]\nname = \"tracing-core\"\nversion = \"0.1.32\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"c06d3da6113f116aaee68e4d601191614c9053067f9ab7f6edbcb161237daa54\"\ndependencies = [\n \"once_cell\",\n \"valuable\",\n]\n\n[[package]]\nname = \"tracing-error\"\nversion = \"0.2.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d686ec1c0f384b1277f097b2f279a2ecc11afe8c133c1aabf036a27cb4cd206e\"\ndependencies = [\n \"tracing\",\n \"tracing-subscriber\",\n]\n\n[[package]]\nname = \"tracing-subscriber\"\nversion = \"0.3.18\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ad0f048c97dbd9faa9b7df56362b8ebcaa52adb06b498c050d2f4e32f90a7a8b\"\ndependencies = [\n \"sharded-slab\",\n \"thread_local\",\n \"tracing-core\",\n]\n\n[[package]]\nname = \"typenum\"\nversion = \"1.17.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"42ff0bf0c66b8238c6f3b578df37d0b7848e55df8577b3f74f92a69acceeb825\"\n\n[[package]]\nname = \"ui_test\"\nversion = \"0.26.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"32ee4c40e5a5f9fa6864ff976473e5d6a6e9884b6ce68b40690d9f87e1994c83\"\ndependencies = [\n \"annotate-snippets\",\n \"anyhow\",\n \"bstr\",\n \"cargo-platform\",\n \"cargo_metadata\",\n \"color-eyre\",\n \"colored\",\n \"comma\",\n \"crossbeam-channel\",\n \"indicatif\",\n \"levenshtein\",\n \"prettydiff\",\n \"regex\",\n \"rustc_version\",\n \"rustfix\",\n \"serde\",\n \"serde_json\",\n \"spanned\",\n]\n\n[[package]]\nname = \"unicode-ident\"\nversion = \"1.0.12\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3354b9ac3fae1ff6755cb6db53683adb661634f67557942dea4facebec0fee4b\"\n\n[[package]]\nname = \"unicode-width\"\nversion = \"0.1.13\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"0336d538f7abc86d282a4189614dfaa90810dfc2c6f6427eaf88e16311dd225d\"\n\n[[package]]\nname = \"valuable\"\nversion = \"0.1.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"830b7e5d4d90034032940e4ace0d9a9a057e7a45cd94e6c007832e39edb82f6d\"\n\n[[package]]\nname = \"version_check\"\nversion = \"0.9.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"0b928f33d975fc6ad9f86c8f283853ad26bdd5b10b7f1542aa2fa15e2289105a\"\n\n[[package]]\nname = \"wasi\"\nversion = \"0.11.0+wasi-snapshot-preview1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"9c8d87e72b64a3b4db28d11ce29237c246188f4f51057d65a7eab63b7987e423\"\n\n[[package]]\nname = \"windows-sys\"\nversion = \"0.48.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"677d2418bec65e3338edb076e806bc1ec15693c5d0104683f2efe857f61056a9\"\ndependencies = [\n \"windows-targets 0.48.5\",\n]\n\n[[package]]\nname = \"windows-sys\"\nversion = \"0.52.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"282be5f36a8ce781fad8c8ae18fa3f9beff57ec1b52cb3de0789201425d9a33d\"\ndependencies = [\n \"windows-targets 0.52.6\",\n]\n\n[[package]]\nname = \"windows-targets\"\nversion = \"0.48.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"9a2fa6e2155d7247be68c096456083145c183cbbbc2764150dda45a87197940c\"\ndependencies = [\n \"windows_aarch64_gnullvm 0.48.5\",\n \"windows_aarch64_msvc 0.48.5\",\n \"windows_i686_gnu 0.48.5\",\n \"windows_i686_msvc 0.48.5\",\n \"windows_x86_64_gnu 0.48.5\",\n \"windows_x86_64_gnullvm 0.48.5\",\n \"windows_x86_64_msvc 0.48.5\",\n]\n\n[[package]]\nname = \"windows-targets\"\nversion = \"0.52.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"9b724f72796e036ab90c1021d4780d4d3d648aca59e491e6b98e725b84e99973\"\ndependencies = [\n \"windows_aarch64_gnullvm 0.52.6\",\n \"windows_aarch64_msvc 0.52.6\",\n \"windows_i686_gnu 0.52.6\",\n \"windows_i686_gnullvm\",\n \"windows_i686_msvc 0.52.6\",\n \"windows_x86_64_gnu 0.52.6\",\n \"windows_x86_64_gnullvm 0.52.6\",\n \"windows_x86_64_msvc 0.52.6\",\n]\n\n[[package]]\nname = \"windows_aarch64_gnullvm\"\nversion = \"0.48.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"2b38e32f0abccf9987a4e3079dfb67dcd799fb61361e53e2882c3cbaf0d905d8\"\n\n[[package]]\nname = \"windows_aarch64_gnullvm\"\nversion = \"0.52.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"32a4622180e7a0ec044bb555404c800bc9fd9ec262ec147edd5989ccd0c02cd3\"\n\n[[package]]\nname = \"windows_aarch64_msvc\"\nversion = \"0.48.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"dc35310971f3b2dbbf3f0690a219f40e2d9afcf64f9ab7cc1be722937c26b4bc\"\n\n[[package]]\nname = \"windows_aarch64_msvc\"\nversion = \"0.52.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"09ec2a7bb152e2252b53fa7803150007879548bc709c039df7627cabbd05d469\"\n\n[[package]]\nname = \"windows_i686_gnu\"\nversion = \"0.48.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a75915e7def60c94dcef72200b9a8e58e5091744960da64ec734a6c6e9b3743e\"\n\n[[package]]\nname = \"windows_i686_gnu\"\nversion = \"0.52.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8e9b5ad5ab802e97eb8e295ac6720e509ee4c243f69d781394014ebfe8bbfa0b\"\n\n[[package]]\nname = \"windows_i686_gnullvm\"\nversion = \"0.52.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"0eee52d38c090b3caa76c563b86c3a4bd71ef1a819287c19d586d7334ae8ed66\"\n\n[[package]]\nname = \"windows_i686_msvc\"\nversion = \"0.48.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8f55c233f70c4b27f66c523580f78f1004e8b5a8b659e05a4eb49d4166cca406\"\n\n[[package]]\nname = \"windows_i686_msvc\"\nversion = \"0.52.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"240948bc05c5e7c6dabba28bf89d89ffce3e303022809e73deaefe4f6ec56c66\"\n\n[[package]]\nname = \"windows_x86_64_gnu\"\nversion = \"0.48.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"53d40abd2583d23e4718fddf1ebec84dbff8381c07cae67ff7768bbf19c6718e\"\n\n[[package]]\nname = \"windows_x86_64_gnu\"\nversion = \"0.52.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"147a5c80aabfbf0c7d901cb5895d1de30ef2907eb21fbbab29ca94c5b08b1a78\"\n\n[[package]]\nname = \"windows_x86_64_gnullvm\"\nversion = \"0.48.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"0b7b52767868a23d5bab768e390dc5f5c55825b6d30b86c844ff2dc7414044cc\"\n\n[[package]]\nname = \"windows_x86_64_gnullvm\"\nversion = \"0.52.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"24d5b23dc417412679681396f2b49f3de8c1473deb516bd34410872eff51ed0d\"\n\n[[package]]\nname = \"windows_x86_64_msvc\"\nversion = \"0.48.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ed94fce61571a4006852b7389a063ab983c02eb1bb37b47f8272ce92d06d9538\"\n\n[[package]]\nname = \"windows_x86_64_msvc\"\nversion = \"0.52.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"589f6da84c646204747d1270a2a5661ea66ed1cced2631d546fdfb155959f9ec\"\n\n[[package]]\nname = \"zerocopy\"\nversion = \"0.7.35\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1b9b4fd18abc82b8136838da5d50bae7bdea537c574d8dc1a34ed098d6c166f0\"\ndependencies = [\n \"byteorder\",\n \"zerocopy-derive\",\n]\n\n[[package]]\nname = \"zerocopy-derive\"\nversion = \"0.7.35\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"fa4f8080344d4671fb4e831a13ad1e68092748387dfc4f55e356242fae12ce3e\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn\",\n]\n"
        },
        {
          "name": "Cargo.toml",
          "type": "blob",
          "size": 1.90234375,
          "content": "[package]\nauthors = [\"Miri Team\"]\ndescription = \"An experimental interpreter for Rust MIR (core driver).\"\nlicense = \"MIT OR Apache-2.0\"\nname = \"miri\"\nrepository = \"https://github.com/rust-lang/miri\"\nversion = \"0.1.0\"\ndefault-run = \"miri\"\nedition = \"2021\"\n\n[lib]\ntest = true     # we have unit tests\ndoctest = false # but no doc tests\n\n[[bin]]\nname = \"miri\"\ntest = false    # we have no unit tests\ndoctest = false # and no doc tests\n\n[dependencies]\ngetrandom = { version = \"0.2\", features = [\"std\"] }\nrand = \"0.8\"\nsmallvec = { version = \"1.7\", features = [\"drain_filter\"] }\naes = { version = \"0.8.3\", features = [\"hazmat\"] }\nmeasureme = \"11\"\nchrono = { version = \"0.4.38\", default-features = false }\nchrono-tz = \"0.10\"\ndirectories = \"5\"\n\n# Copied from `compiler/rustc/Cargo.toml`.\n# But only for some targets, it fails for others. Rustc configures this in its CI, but we can't\n# easily use that since we support of-tree builds.\n[target.'cfg(any(target_os = \"linux\", target_os = \"macos\"))'.dependencies.tikv-jemalloc-sys]\nversion = \"0.6.0\"\nfeatures = ['unprefixed_malloc_on_supported_platforms']\n\n[target.'cfg(unix)'.dependencies]\nlibc = \"0.2\"\nlibffi = \"3.2.0\"\nlibloading = \"0.8\"\n\n[target.'cfg(target_family = \"windows\")'.dependencies]\nwindows-sys = { version = \"0.52\", features = [\n    \"Win32_Foundation\",\n    \"Win32_System_IO\",\n    \"Win32_Storage_FileSystem\",\n] }\n\n[dev-dependencies]\ncolored = \"2\"\nui_test = \"0.26.5\"\nrustc_version = \"0.4\"\nregex = \"1.5.5\"\ntempfile = \"3\"\n\n[package.metadata.rust-analyzer]\n# This crate uses #[feature(rustc_private)].\n# See https://github.com/rust-analyzer/rust-analyzer/pull/7891\nrustc_private = true\n\n[[test]]\nname = \"ui\"\nharness = false\n\n[features]\ndefault = [\"stack-cache\"]\nstack-cache = []\nstack-cache-consistency-check = [\"stack-cache\"]\n\n# Be aware that this file is inside a workspace when used via the\n# submodule in the rustc repo. That means there are many cargo features\n# we cannot use, such as profiles.\n"
        },
        {
          "name": "LICENSE-APACHE",
          "type": "blob",
          "size": 9.4951171875,
          "content": "                              Apache License\n                        Version 2.0, January 2004\n                     http://www.apache.org/licenses/\n\nTERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n1. Definitions.\n\n   \"License\" shall mean the terms and conditions for use, reproduction,\n   and distribution as defined by Sections 1 through 9 of this document.\n\n   \"Licensor\" shall mean the copyright owner or entity authorized by\n   the copyright owner that is granting the License.\n\n   \"Legal Entity\" shall mean the union of the acting entity and all\n   other entities that control, are controlled by, or are under common\n   control with that entity. For the purposes of this definition,\n   \"control\" means (i) the power, direct or indirect, to cause the\n   direction or management of such entity, whether by contract or\n   otherwise, or (ii) ownership of fifty percent (50%) or more of the\n   outstanding shares, or (iii) beneficial ownership of such entity.\n\n   \"You\" (or \"Your\") shall mean an individual or Legal Entity\n   exercising permissions granted by this License.\n\n   \"Source\" form shall mean the preferred form for making modifications,\n   including but not limited to software source code, documentation\n   source, and configuration files.\n\n   \"Object\" form shall mean any form resulting from mechanical\n   transformation or translation of a Source form, including but\n   not limited to compiled object code, generated documentation,\n   and conversions to other media types.\n\n   \"Work\" shall mean the work of authorship, whether in Source or\n   Object form, made available under the License, as indicated by a\n   copyright notice that is included in or attached to the work\n   (an example is provided in the Appendix below).\n\n   \"Derivative Works\" shall mean any work, whether in Source or Object\n   form, that is based on (or derived from) the Work and for which the\n   editorial revisions, annotations, elaborations, or other modifications\n   represent, as a whole, an original work of authorship. For the purposes\n   of this License, Derivative Works shall not include works that remain\n   separable from, or merely link (or bind by name) to the interfaces of,\n   the Work and Derivative Works thereof.\n\n   \"Contribution\" shall mean any work of authorship, including\n   the original version of the Work and any modifications or additions\n   to that Work or Derivative Works thereof, that is intentionally\n   submitted to Licensor for inclusion in the Work by the copyright owner\n   or by an individual or Legal Entity authorized to submit on behalf of\n   the copyright owner. For the purposes of this definition, \"submitted\"\n   means any form of electronic, verbal, or written communication sent\n   to the Licensor or its representatives, including but not limited to\n   communication on electronic mailing lists, source code control systems,\n   and issue tracking systems that are managed by, or on behalf of, the\n   Licensor for the purpose of discussing and improving the Work, but\n   excluding communication that is conspicuously marked or otherwise\n   designated in writing by the copyright owner as \"Not a Contribution.\"\n\n   \"Contributor\" shall mean Licensor and any individual or Legal Entity\n   on behalf of whom a Contribution has been received by Licensor and\n   subsequently incorporated within the Work.\n\n2. Grant of Copyright License. Subject to the terms and conditions of\n   this License, each Contributor hereby grants to You a perpetual,\n   worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n   copyright license to reproduce, prepare Derivative Works of,\n   publicly display, publicly perform, sublicense, and distribute the\n   Work and such Derivative Works in Source or Object form.\n\n3. Grant of Patent License. Subject to the terms and conditions of\n   this License, each Contributor hereby grants to You a perpetual,\n   worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n   (except as stated in this section) patent license to make, have made,\n   use, offer to sell, sell, import, and otherwise transfer the Work,\n   where such license applies only to those patent claims licensable\n   by such Contributor that are necessarily infringed by their\n   Contribution(s) alone or by combination of their Contribution(s)\n   with the Work to which such Contribution(s) was submitted. If You\n   institute patent litigation against any entity (including a\n   cross-claim or counterclaim in a lawsuit) alleging that the Work\n   or a Contribution incorporated within the Work constitutes direct\n   or contributory patent infringement, then any patent licenses\n   granted to You under this License for that Work shall terminate\n   as of the date such litigation is filed.\n\n4. Redistribution. You may reproduce and distribute copies of the\n   Work or Derivative Works thereof in any medium, with or without\n   modifications, and in Source or Object form, provided that You\n   meet the following conditions:\n\n   (a) You must give any other recipients of the Work or\n       Derivative Works a copy of this License; and\n\n   (b) You must cause any modified files to carry prominent notices\n       stating that You changed the files; and\n\n   (c) You must retain, in the Source form of any Derivative Works\n       that You distribute, all copyright, patent, trademark, and\n       attribution notices from the Source form of the Work,\n       excluding those notices that do not pertain to any part of\n       the Derivative Works; and\n\n   (d) If the Work includes a \"NOTICE\" text file as part of its\n       distribution, then any Derivative Works that You distribute must\n       include a readable copy of the attribution notices contained\n       within such NOTICE file, excluding those notices that do not\n       pertain to any part of the Derivative Works, in at least one\n       of the following places: within a NOTICE text file distributed\n       as part of the Derivative Works; within the Source form or\n       documentation, if provided along with the Derivative Works; or,\n       within a display generated by the Derivative Works, if and\n       wherever such third-party notices normally appear. The contents\n       of the NOTICE file are for informational purposes only and\n       do not modify the License. You may add Your own attribution\n       notices within Derivative Works that You distribute, alongside\n       or as an addendum to the NOTICE text from the Work, provided\n       that such additional attribution notices cannot be construed\n       as modifying the License.\n\n   You may add Your own copyright statement to Your modifications and\n   may provide additional or different license terms and conditions\n   for use, reproduction, or distribution of Your modifications, or\n   for any such Derivative Works as a whole, provided Your use,\n   reproduction, and distribution of the Work otherwise complies with\n   the conditions stated in this License.\n\n5. Submission of Contributions. Unless You explicitly state otherwise,\n   any Contribution intentionally submitted for inclusion in the Work\n   by You to the Licensor shall be under the terms and conditions of\n   this License, without any additional terms or conditions.\n   Notwithstanding the above, nothing herein shall supersede or modify\n   the terms of any separate license agreement you may have executed\n   with Licensor regarding such Contributions.\n\n6. Trademarks. This License does not grant permission to use the trade\n   names, trademarks, service marks, or product names of the Licensor,\n   except as required for reasonable and customary use in describing the\n   origin of the Work and reproducing the content of the NOTICE file.\n\n7. Disclaimer of Warranty. Unless required by applicable law or\n   agreed to in writing, Licensor provides the Work (and each\n   Contributor provides its Contributions) on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n   implied, including, without limitation, any warranties or conditions\n   of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n   PARTICULAR PURPOSE. You are solely responsible for determining the\n   appropriateness of using or redistributing the Work and assume any\n   risks associated with Your exercise of permissions under this License.\n\n8. Limitation of Liability. In no event and under no legal theory,\n   whether in tort (including negligence), contract, or otherwise,\n   unless required by applicable law (such as deliberate and grossly\n   negligent acts) or agreed to in writing, shall any Contributor be\n   liable to You for damages, including any direct, indirect, special,\n   incidental, or consequential damages of any character arising as a\n   result of this License or out of the use or inability to use the\n   Work (including but not limited to damages for loss of goodwill,\n   work stoppage, computer failure or malfunction, or any and all\n   other commercial damages or losses), even if such Contributor\n   has been advised of the possibility of such damages.\n\n9. Accepting Warranty or Additional Liability. While redistributing\n   the Work or Derivative Works thereof, You may choose to offer,\n   and charge a fee for, acceptance of support, warranty, indemnity,\n   or other liability obligations and/or rights consistent with this\n   License. However, in accepting such obligations, You may act only\n   on Your own behalf and on Your sole responsibility, not on behalf\n   of any other Contributor, and only if You agree to indemnify,\n   defend, and hold each Contributor harmless for any liability\n   incurred by, or claims asserted against, such Contributor by reason\n   of your accepting any such warranty or additional liability.\n\nEND OF TERMS AND CONDITIONS\n"
        },
        {
          "name": "LICENSE-MIT",
          "type": "blob",
          "size": 0.9990234375,
          "content": "Permission is hereby granted, free of charge, to any\nperson obtaining a copy of this software and associated\ndocumentation files (the \"Software\"), to deal in the\nSoftware without restriction, including without\nlimitation the rights to use, copy, modify, merge,\npublish, distribute, sublicense, and/or sell copies of\nthe Software, and to permit persons to whom the Software\nis furnished to do so, subject to the following\nconditions:\n\nThe above copyright notice and this permission notice\nshall be included in all copies or substantial portions\nof the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF\nANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED\nTO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A\nPARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT\nSHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\nOF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR\nIN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\nDEALINGS IN THE SOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 37.103515625,
          "content": "# Miri\n\nMiri is an [Undefined Behavior][reference-ub] detection tool for Rust. It can run binaries and test\nsuites of cargo projects and detect unsafe code that fails to uphold its safety requirements. For\ninstance:\n\n* Out-of-bounds memory accesses and use-after-free\n* Invalid use of uninitialized data\n* Violation of intrinsic preconditions (an [`unreachable_unchecked`] being\n  reached, calling [`copy_nonoverlapping`] with overlapping ranges, ...)\n* Not sufficiently aligned memory accesses and references\n* Violation of basic type invariants (a `bool` that is not 0 or 1, for example,\n  or an invalid enum discriminant)\n* **Experimental**: Violations of the [Stacked Borrows] rules governing aliasing\n  for reference types\n* **Experimental**: Violations of the [Tree Borrows] aliasing rules, as an optional\n  alternative to [Stacked Borrows]\n* **Experimental**: Data races and emulation of weak memory effects, i.e.,\n  atomic reads can return outdated values.\n\nOn top of that, Miri will also tell you about memory leaks: when there is memory\nstill allocated at the end of the execution, and that memory is not reachable\nfrom a global `static`, Miri will raise an error.\n\nYou can use Miri to emulate programs on other targets, e.g. to ensure that\nbyte-level data manipulation works correctly both on little-endian and\nbig-endian systems. See\n[cross-interpretation](#cross-interpretation-running-for-different-targets)\nbelow.\n\nMiri has already discovered many [real-world bugs](#bugs-found-by-miri). If you\nfound a bug with Miri, we'd appreciate if you tell us and we'll add it to the\nlist!\n\nBy default, Miri ensures a fully deterministic execution and isolates the\nprogram from the host system. Some APIs that would usually access the host, such\nas gathering entropy for random number generators, environment variables, and\nclocks, are replaced by deterministic \"fake\" implementations. Set\n`MIRIFLAGS=\"-Zmiri-disable-isolation\"` to access the real system APIs instead.\n(In particular, the \"fake\" system RNG APIs make Miri **not suited for\ncryptographic use**! Do not generate keys using Miri.)\n\nAll that said, be aware that Miri does **not catch every violation of the Rust specification** in\nyour program, not least because there is no such specification. Miri uses its own approximation of\nwhat is and is not Undefined Behavior in Rust. To the best of our knowledge, all Undefined Behavior\nthat has the potential to affect a program's correctness *is* being detected by Miri (modulo\n[bugs][I-misses-ub]), but you should consult [the Reference][reference-ub] for the official\ndefinition of Undefined Behavior. Miri will be updated with the Rust compiler to protect against UB\nas it is understood by the current compiler, but it makes no promises about future versions of\nrustc.\n\nFurther caveats that Miri users should be aware of:\n\n* If the program relies on unspecified details of how data is laid out, it will\n  still run fine in Miri -- but might break (including causing UB) on different\n  compiler versions or different platforms. (You can use `-Zrandomize-layout`\n  to detect some of these cases.)\n* Program execution is non-deterministic when it depends, for example, on where\n  exactly in memory allocations end up, or on the exact interleaving of\n  concurrent threads. Miri tests one of many possible executions of your\n  program, but it will miss bugs that only occur in a different possible execution.\n  You can alleviate this to some extent by running Miri with different\n  values for `-Zmiri-seed`, but that will still by far not explore all possible executions.\n* Miri runs the program as a platform-independent interpreter, so the program\n  has no access to most platform-specific APIs or FFI. A few APIs have been\n  implemented (such as printing to stdout, accessing environment variables, and\n  basic file system access) but most have not: for example, Miri currently does\n  not support networking. System API support varies between targets; if you run\n  on Windows it is a good idea to use `--target x86_64-unknown-linux-gnu` to get\n  better support.\n* Weak memory emulation is not complete: there are legal behaviors that Miri will never produce.\n  However, Miri produces many behaviors that are hard to observe on real hardware, so it can help\n  quite a bit in finding weak memory concurrency bugs. To be really sure about complicated atomic\n  code, use specialized tools such as [loom](https://github.com/tokio-rs/loom).\n\nMoreover, Miri fundamentally cannot ensure that your code is *sound*. [Soundness] is the property of\nnever causing undefined behavior when invoked from arbitrary safe code, even in combination with\nother sound code. In contrast, Miri can just tell you if *a particular way of interacting with your\ncode* (e.g., a test suite) causes any undefined behavior *in a particular execution* (of which there\nmay be many, e.g. when concurrency or other forms of non-determinism are involved). When Miri finds\nUB, your code is definitely unsound, but when Miri does not find UB, then you may just have to test\nmore inputs or more possible non-deterministic choices.\n\n[rust]: https://www.rust-lang.org/\n[mir]: https://github.com/rust-lang/rfcs/blob/master/text/1211-mir.md\n[`unreachable_unchecked`]: https://doc.rust-lang.org/stable/std/hint/fn.unreachable_unchecked.html\n[`copy_nonoverlapping`]: https://doc.rust-lang.org/stable/std/ptr/fn.copy_nonoverlapping.html\n[Stacked Borrows]: https://github.com/rust-lang/unsafe-code-guidelines/blob/master/wip/stacked-borrows.md\n[Tree Borrows]: https://perso.crans.org/vanille/treebor/\n[Soundness]: https://rust-lang.github.io/unsafe-code-guidelines/glossary.html#soundness-of-code--of-a-library\n[reference-ub]: https://doc.rust-lang.org/reference/behavior-considered-undefined.html\n[I-misses-ub]: https://github.com/rust-lang/miri/labels/I-misses-UB\n\n\n## Using Miri\n\nInstall Miri on Rust nightly via `rustup`:\n\n```sh\nrustup +nightly component add miri\n```\n\nAll the following commands assume the nightly toolchain is pinned via `rustup override set nightly`.\nAlternatively, use `cargo +nightly` for each of the following commands.\n\nNow you can run your project in Miri:\n\n- To run all tests in your project through Miri, use `cargo miri test`.\n- If you have a binary project, you can run it through Miri using `cargo miri run`.\n\nThe first time you run Miri, it will perform some extra setup and install some\ndependencies. It will ask you for confirmation before installing anything.\n\n`cargo miri run/test` supports the exact same flags as `cargo run/test`. For\nexample, `cargo miri test filter` only runs the tests containing `filter` in\ntheir name.\n\nYou can pass [flags][miri-flags] to Miri via `MIRIFLAGS`. For example,\n`MIRIFLAGS=\"-Zmiri-disable-stacked-borrows\" cargo miri run` runs the program\nwithout checking the aliasing of references.\n\nWhen compiling code via `cargo miri`, the `cfg(miri)` config flag is set for code\nthat will be interpreted under Miri. You can use this to ignore test cases that fail\nunder Miri because they do things Miri does not support:\n\n```rust\n#[test]\n#[cfg_attr(miri, ignore)]\nfn does_not_work_on_miri() {\n    tokio::run(futures::future::ok::<_, ()>(()));\n}\n```\n\nThere is no way to list all the infinite things Miri cannot do, but the\ninterpreter will explicitly tell you when it finds something unsupported:\n\n```\nerror: unsupported operation: can't call foreign function: bind\n    ...\n    = help: this is likely not a bug in the program; it indicates that the program \\\n            performed an operation that Miri does not support\n```\n\n### Cross-interpretation: running for different targets\n\nMiri can not only run a binary or test suite for your host target, it can also\nperform cross-interpretation for arbitrary foreign targets: `cargo miri run\n--target x86_64-unknown-linux-gnu` will run your program as if it was a Linux\nprogram, no matter your host OS. This is particularly useful if you are using\nWindows, as the Linux target is much better supported than Windows targets.\n\nYou can also use this to test platforms with different properties than your host\nplatform. For example `cargo miri test --target s390x-unknown-linux-gnu`\nwill run your test suite on a big-endian target, which is useful for testing\nendian-sensitive code.\n\n### Testing multiple different executions\n\nCertain parts of the execution are picked randomly by Miri, such as the exact base address\nallocations are stored at and the interleaving of concurrently executing threads. Sometimes, it can\nbe useful to explore multiple different execution, e.g. to make sure that your code does not depend\non incidental \"super-alignment\" of new allocations and to test different thread interleavings.\nThis can be done with the `-Zmiri-many-seeds` flag:\n\n```\nMIRIFLAGS=\"-Zmiri-many-seeds\" cargo miri test # tries the seeds in 0..64\nMIRIFLAGS=\"-Zmiri-many-seeds=0..16\" cargo miri test\n```\n\nThe default of 64 different seeds can be quite slow, so you often want to specify a smaller range.\n\n### Running Miri on CI\n\nWhen running Miri on CI, use the following snippet to install a nightly toolchain with the Miri\ncomponent:\n\n```sh\nrustup toolchain install nightly --component miri\nrustup override set nightly\n\ncargo miri test\n```\n\nHere is an example job for GitHub Actions:\n\n```yaml\n  miri:\n    name: \"Miri\"\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v4\n      - name: Install Miri\n        run: |\n          rustup toolchain install nightly --component miri\n          rustup override set nightly\n          cargo miri setup\n      - name: Test with Miri\n        run: cargo miri test\n```\n\nThe explicit `cargo miri setup` helps to keep the output of the actual test step\nclean.\n\n### Supported targets\n\nMiri does not support all targets supported by Rust. The good news, however, is\nthat no matter your host OS/platform, it is easy to run code for *any* target\nusing `--target`!\n\nThe following targets are tested on CI and thus should always work (to the\ndegree documented below):\n\n- All Rust [Tier 1 targets](https://doc.rust-lang.org/rustc/platform-support.html) are supported by\n  Miri. They are all checked on Miri's CI, and some (at least one per OS) are even checked on every\n  Rust PR, so the shipped Miri should always work on these targets.\n- `s390x-unknown-linux-gnu` is supported as our \"big-endian target of choice\".\n- For every other target with OS `linux`, `macos`, or `windows`, Miri should generally work, but we\n  make no promises and we don't run tests for such targets.\n- We have unofficial support (not maintained by the Miri team itself) for some further operating systems.\n  - `solaris` / `illumos`: maintained by @devnexen. Supports the entire test suite.\n  - `freebsd`: maintained by @YohDeadfall. Supports `std::env` and parts of `std::{thread, fs}`, but not `std::sync`.\n  - `android`: **maintainer wanted**. Support very incomplete, but a basic \"hello world\" works.\n  - `wasi`: **maintainer wanted**. Support very incomplete, not even standard output works, but an empty `main` function works.\n- For targets on other operating systems, Miri might fail before even reaching the `main` function.\n\nHowever, even for targets that we do support, the degree of support for accessing platform APIs\n(such as the file system) differs between targets: generally, Linux targets have the best support,\nand macOS targets are usually on par. Windows is supported less well.\n\n### Running tests in parallel\n\nThough it implements Rust threading, Miri itself is a single-threaded interpreter.\nThis means that when running `cargo miri test`, you will probably see a dramatic\nincrease in the amount of time it takes to run your whole test suite due to the\ninherent interpreter slowdown and a loss of parallelism.\n\nYou can get your test suite's parallelism back by running `cargo miri nextest run -jN`\n(note that you will need [`cargo-nextest`](https://nexte.st) installed).\nThis works because `cargo-nextest` collects a list of all tests then launches a\nseparate `cargo miri run` for each test. You will need to specify a `-j` or `--test-threads`;\nby default `cargo miri nextest run` runs one test at a time. For more details, see the\n[`cargo-nextest` Miri documentation](https://nexte.st/book/miri.html).\n\nNote: This one-test-per-process model means that `cargo miri test` is able to detect data\nraces where two tests race on a shared resource, but `cargo miri nextest run` will not detect\nsuch races.\n\nNote: `cargo-nextest` does not support doctests, see https://github.com/nextest-rs/nextest/issues/16\n\n### Common Problems\n\nWhen using the above instructions, you may encounter a number of confusing compiler\nerrors.\n\n#### \"note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\"\n\nYou may see this when trying to get Miri to display a backtrace. By default, Miri\ndoesn't expose any environment to the program, so running\n`RUST_BACKTRACE=1 cargo miri test` will not do what you expect.\n\nTo get a backtrace, you need to disable isolation\n[using `-Zmiri-disable-isolation`][miri-flags]:\n\n```sh\nRUST_BACKTRACE=1 MIRIFLAGS=\"-Zmiri-disable-isolation\" cargo miri test\n```\n\n#### \"found crate `std` compiled by an incompatible version of rustc\"\n\nYou may be running `cargo miri` with a different compiler version than the one\nused to build the custom libstd that Miri uses, and Miri failed to detect that.\nTry running `cargo miri clean`.\n\n\n## Miri `-Z` flags and environment variables\n[miri-flags]: #miri--z-flags-and-environment-variables\n\nMiri adds its own set of `-Z` flags, which are usually set via the `MIRIFLAGS`\nenvironment variable. We first document the most relevant and most commonly used flags:\n\n* `-Zmiri-address-reuse-rate=<rate>` changes the probability that a freed *non-stack* allocation\n  will be added to the pool for address reuse, and the probability that a new *non-stack* allocation\n  will be taken from the pool. Stack allocations never get added to or taken from the pool. The\n  default is `0.5`.\n* `-Zmiri-address-reuse-cross-thread-rate=<rate>` changes the probability that an allocation which\n  attempts to reuse a previously freed block of memory will also consider blocks freed by *other\n  threads*. The default is `0.1`, which means by default, in 90% of the cases where an address reuse\n  attempt is made, only addresses from the same thread will be considered. Reusing an address from\n  another thread induces synchronization between those threads, which can mask data races and weak\n  memory bugs.\n* `-Zmiri-compare-exchange-weak-failure-rate=<rate>` changes the failure rate of\n  `compare_exchange_weak` operations. The default is `0.8` (so 4 out of 5 weak ops will fail).\n  You can change it to any value between `0.0` and `1.0`, where `1.0` means it\n  will always fail and `0.0` means it will never fail. Note that setting it to\n  `1.0` will likely cause hangs, since it means programs using\n  `compare_exchange_weak` cannot make progress.\n* `-Zmiri-disable-isolation` disables host isolation. As a consequence,\n  the program has access to host resources such as environment variables, file\n  systems, and randomness.\n  This overwrites a previous `-Zmiri-isolation-error`.\n* `-Zmiri-disable-leak-backtraces` disables backtraces reports for memory leaks. By default, a\n  backtrace is captured for every allocation when it is created, just in case it leaks. This incurs\n  some memory overhead to store data that is almost never used. This flag is implied by\n  `-Zmiri-ignore-leaks`.\n* `-Zmiri-env-forward=<var>` forwards the `var` environment variable to the interpreted program. Can\n  be used multiple times to forward several variables. Execution will still be deterministic if the\n  value of forwarded variables stays the same. Has no effect if `-Zmiri-disable-isolation` is set.\n* `-Zmiri-env-set=<var>=<value>` sets the `var` environment variable to `value` in the interpreted program.\n  It can be used to pass environment variables without needing to alter the host environment. It can\n  be used multiple times to set several variables. If `-Zmiri-disable-isolation` or `-Zmiri-env-forward`\n  is set, values set with this option will have priority over values from the host environment.\n* `-Zmiri-ignore-leaks` disables the memory leak checker, and also allows some\n  remaining threads to exist when the main thread exits.\n* `-Zmiri-isolation-error=<action>` configures Miri's response to operations\n  requiring host access while isolation is enabled. `abort`, `hide`, `warn`,\n  and `warn-nobacktrace` are the supported actions. The default is to `abort`,\n  which halts the machine. Some (but not all) operations also support continuing\n  execution with a \"permission denied\" error being returned to the program.\n  `warn` prints a full backtrace each time that happens; `warn-nobacktrace` is less\n  verbose and shown at most once per operation. `hide` hides the warning entirely.\n  This overwrites a previous `-Zmiri-disable-isolation`.\n* `-Zmiri-many-seeds=[<from>]..<to>` runs the program multiple times with different seeds for Miri's\n  RNG. With different seeds, Miri will make different choices to resolve non-determinism such as the\n  order in which concurrent threads are scheduled, or the exact addresses assigned to allocations.\n  This is useful to find bugs that only occur under particular interleavings of concurrent threads,\n  or that otherwise depend on non-determinism. If the `<from>` part is skipped, it defaults to `0`.\n  Can be used without a value; in that case the range defaults to `0..64`.\n* `-Zmiri-many-seeds-keep-going` tells Miri to really try all the seeds in the given range, even if\n  a failing seed has already been found. This is useful to determine which fraction of seeds fails.\n* `-Zmiri-num-cpus` states the number of available CPUs to be reported by miri. By default, the\n  number of available CPUs is `1`. Note that this flag does not affect how miri handles threads in\n  any way.\n* `-Zmiri-permissive-provenance` disables the warning for integer-to-pointer casts and\n  [`ptr::with_exposed_provenance`](https://doc.rust-lang.org/nightly/std/ptr/fn.with_exposed_provenance.html).\n  This will necessarily miss some bugs as those operations are not efficiently and accurately\n  implementable in a sanitizer, but it will only miss bugs that concern memory/pointers which is\n  subject to these operations.\n* `-Zmiri-preemption-rate` configures the probability that at the end of a basic block, the active\n  thread will be preempted. The default is `0.01` (i.e., 1%). Setting this to `0` disables\n  preemption.\n* `-Zmiri-report-progress` makes Miri print the current stacktrace every now and then, so you can\n  tell what it is doing when a program just keeps running. You can customize how frequently the\n  report is printed via `-Zmiri-report-progress=<blocks>`, which prints the report every N basic\n  blocks.\n* `-Zmiri-seed=<num>` configures the seed of the RNG that Miri uses to resolve non-determinism. This\n  RNG is used to pick base addresses for allocations, to determine preemption and failure of\n  `compare_exchange_weak`, and to control store buffering for weak memory emulation. When isolation\n  is enabled (the default), this is also used to emulate system entropy. The default seed is 0. You\n  can increase test coverage by running Miri multiple times with different seeds.\n* `-Zmiri-strict-provenance` enables [strict\n  provenance](https://github.com/rust-lang/rust/issues/95228) checking in Miri. This means that\n  casting an integer to a pointer will stop execution because the provenance of the pointer\n  cannot be determined.\n* `-Zmiri-symbolic-alignment-check` makes the alignment check more strict.  By default, alignment is\n  checked by casting the pointer to an integer, and making sure that is a multiple of the alignment.\n  This can lead to cases where a program passes the alignment check by pure chance, because things\n  \"happened to be\" sufficiently aligned -- there is no UB in this execution but there would be UB in\n  others.  To avoid such cases, the symbolic alignment check only takes into account the requested\n  alignment of the relevant allocation, and the offset into that allocation.  This avoids missing\n  such bugs, but it also incurs some false positives when the code does manual integer arithmetic to\n  ensure alignment.  (The standard library `align_to` method works fine in both modes; under\n  symbolic alignment it only fills the middle slice when the allocation guarantees sufficient\n  alignment.)\n\nThe remaining flags are for advanced use only, and more likely to change or be removed.\nSome of these are **unsound**, which means they can lead\nto Miri failing to detect cases of undefined behavior in a program.\n\n* `-Zmiri-disable-alignment-check` disables checking pointer alignment, so you\n  can focus on other failures, but it means Miri can miss bugs in your program.\n  Using this flag is **unsound**.\n* `-Zmiri-disable-data-race-detector` disables checking for data races.  Using\n  this flag is **unsound**. This implies `-Zmiri-disable-weak-memory-emulation`.\n* `-Zmiri-disable-stacked-borrows` disables checking the experimental\n  aliasing rules to track borrows ([Stacked Borrows] and [Tree Borrows]).\n  This can make Miri run faster, but it also means no aliasing violations will\n  be detected. Using this flag is **unsound** (but the affected soundness rules\n  are experimental). Later flags take precedence: borrow tracking can be reactivated\n  by `-Zmiri-tree-borrows`.\n* `-Zmiri-disable-validation` disables enforcing validity invariants, which are\n  enforced by default.  This is mostly useful to focus on other failures (such\n  as out-of-bounds accesses) first.  Setting this flag means Miri can miss bugs\n  in your program.  However, this can also help to make Miri run faster.  Using\n  this flag is **unsound**.\n* `-Zmiri-disable-weak-memory-emulation` disables the emulation of some C++11 weak\n  memory effects.\n* `-Zmiri-native-lib=<path to a shared object file>` is an experimental flag for providing support\n  for calling native functions from inside the interpreter via FFI. The flag is supported only on\n  Unix systems. Functions not provided by that file are still executed via the usual Miri shims.\n  **WARNING**: If an invalid/incorrect `.so` file is specified, this can cause Undefined Behavior in\n  Miri itself! And of course, Miri cannot do any checks on the actions taken by the native code.\n  Note that Miri has its own handling of file descriptors, so if you want to replace *some*\n  functions working on file descriptors, you will have to replace *all* of them, or the two kinds of\n  file descriptors will be mixed up. This is **work in progress**; currently, only integer and\n  pointers arguments and return values are supported and memory allocated by the native code cannot\n  be accessed from Rust (only the other way around). Native code must not spawn threads that keep\n  running in the background after the call has returned to Rust and that access Rust-allocated\n  memory. Finally, the flag is **unsound** in the sense that Miri stops tracking details such as\n  initialization and provenance on memory shared with native code, so it is easily possible to write\n  code that has UB which is missed by Miri.\n* `-Zmiri-measureme=<name>` enables `measureme` profiling for the interpreted program.\n   This can be used to find which parts of your program are executing slowly under Miri.\n   The profile is written out to a file inside a directory called `<name>`, and can be processed\n   using the tools in the repository https://github.com/rust-lang/measureme.\n* `-Zmiri-mute-stdout-stderr` silently ignores all writes to stdout and stderr,\n  but reports to the program that it did actually write. This is useful when you\n  are not interested in the actual program's output, but only want to see Miri's\n  errors and warnings.\n* `-Zmiri-recursive-validation` is a *highly experimental* flag that makes validity checking\n  recurse below references.\n* `-Zmiri-retag-fields[=<all|none|scalar>]` controls when Stacked Borrows retagging recurses into\n  fields. `all` means it always recurses (the default, and equivalent to `-Zmiri-retag-fields`\n  without an explicit value), `none` means it never recurses, `scalar` means it only recurses for\n  types where we would also emit `noalias` annotations in the generated LLVM IR (types passed as\n  individual scalars or pairs of scalars). Setting this to `none` is **unsound**.\n* `-Zmiri-provenance-gc=<blocks>` configures how often the pointer provenance garbage collector runs.\n  The default is to search for and remove unreachable provenance once every `10000` basic blocks. Setting\n  this to `0` disables the garbage collector, which causes some programs to have explosive memory\n  usage and/or super-linear runtime.\n* `-Zmiri-track-alloc-accesses` show not only allocation and free events for tracked allocations,\n  but also reads and writes.\n* `-Zmiri-track-alloc-id=<id1>,<id2>,...` shows a backtrace when the given allocations are\n  being allocated or freed.  This helps in debugging memory leaks and\n  use after free bugs. Specifying this argument multiple times does not overwrite the previous\n  values, instead it appends its values to the list. Listing an id multiple times has no effect.\n* `-Zmiri-track-pointer-tag=<tag1>,<tag2>,...` shows a backtrace when a given pointer tag\n  is created and when (if ever) it is popped from a borrow stack (which is where the tag becomes invalid\n  and any future use of it will error).  This helps you in finding out why UB is\n  happening and where in your code would be a good place to look for it.\n  Specifying this argument multiple times does not overwrite the previous\n  values, instead it appends its values to the list. Listing a tag multiple times has no effect.\n* `-Zmiri-track-weak-memory-loads` shows a backtrace when weak memory emulation returns an outdated\n  value from a load. This can help diagnose problems that disappear under\n  `-Zmiri-disable-weak-memory-emulation`.\n* `-Zmiri-tree-borrows` replaces [Stacked Borrows] with the [Tree Borrows] rules.\n  Tree Borrows is even more experimental than Stacked Borrows. While Tree Borrows\n  is still sound in the sense of catching all aliasing violations that current versions\n  of the compiler might exploit, it is likely that the eventual final aliasing model\n  of Rust will be stricter than Tree Borrows. In other words, if you use Tree Borrows,\n  even if your code is accepted today, it might be declared UB in the future.\n  This is much less likely with Stacked Borrows.\n  Using Tree Borrows currently implies `-Zmiri-strict-provenance` because integer-to-pointer\n  casts are not supported in this mode, but that may change in the future.\n* `-Zmiri-force-page-size=<num>` overrides the default page size for an architecture, in multiples of 1k.\n  `4` is default for most targets. This value should always be a power of 2 and nonzero.\n* `-Zmiri-unique-is-unique` performs additional aliasing checks for `core::ptr::Unique` to ensure\n  that it could theoretically be considered `noalias`. This flag is experimental and has\n  an effect only when used with `-Zmiri-tree-borrows`.\n\n[function ABI]: https://doc.rust-lang.org/reference/items/functions.html#extern-function-qualifier\n\nSome native rustc `-Z` flags are also very relevant for Miri:\n\n* `-Zmir-opt-level` controls how many MIR optimizations are performed.  Miri\n  overrides the default to be `0`; be advised that using any higher level can\n  make Miri miss bugs in your program because they got optimized away.\n* `-Zalways-encode-mir` makes rustc dump MIR even for completely monomorphic\n  functions.  This is needed so that Miri can execute such functions, so Miri\n  sets this flag per default.\n* `-Zmir-emit-retag` controls whether `Retag` statements are emitted. Miri\n  enables this per default because it is needed for [Stacked Borrows] and [Tree Borrows].\n\nMoreover, Miri recognizes some environment variables:\n\n* `MIRIFLAGS` defines extra flags to be passed to Miri.\n* `MIRI_LIB_SRC` defines the directory where Miri expects the sources of the standard library that\n  it will build and use for interpretation. This directory must point to the `library` subdirectory\n  of a `rust-lang/rust` repository checkout.\n* `MIRI_SYSROOT` indicates the sysroot to use. When using `cargo miri test`/`cargo miri run`, this skips the automatic\n  setup -- only set this if you do not want to use the automatically created sysroot. When invoking\n  `cargo miri setup`, this indicates where the sysroot will be put.\n* `MIRI_NO_STD` makes sure that the target's sysroot is built without libstd. This allows testing\n  and running no_std programs. This should *not usually be used*; Miri has a heuristic to detect\n  no-std targets based on the target name. Setting this on a target that does support libstd can\n  lead to confusing results.\n\n[testing-miri]: CONTRIBUTING.md#testing-the-miri-driver\n\n## Miri `extern` functions\n\nMiri provides some `extern` functions that programs can import to access\nMiri-specific functionality. They are declared in\n[/tests/utils/miri\\_extern.rs](/tests/utils/miri_extern.rs).\n\n## Entry point for no-std binaries\n\nBinaries that do not use the standard library are expected to declare a function like this so that\nMiri knows where it is supposed to start execution:\n\n```rust\n#[cfg(miri)]\n#[no_mangle]\nfn miri_start(argc: isize, argv: *const *const u8) -> isize {\n    // Call the actual start function that your project implements, based on your target's conventions.\n}\n```\n\n## Contributing and getting help\n\nIf you want to contribute to Miri, great!  Please check out our\n[contribution guide](CONTRIBUTING.md).\n\nFor help with running Miri, you can open an issue here on\nGitHub or use the [Miri stream on the Rust Zulip][zulip].\n\n[zulip]: https://rust-lang.zulipchat.com/#narrow/stream/269128-miri\n\n## History\n\nThis project began as part of an undergraduate research course in 2015 by\n@solson at the [University of Saskatchewan][usask].  There are [slides] and a\n[report] available from that project.  In 2016, @oli-obk joined to prepare Miri\nfor eventually being used as const evaluator in the Rust compiler itself\n(basically, for `const` and `static` stuff), replacing the old evaluator that\nworked directly on the AST.  In 2017, @RalfJung did an internship with Mozilla\nand began developing Miri towards a tool for detecting undefined behavior, and\nalso using Miri as a way to explore the consequences of various possible\ndefinitions for undefined behavior in Rust.  @oli-obk's move of the Miri engine\ninto the compiler finally came to completion in early 2018.  Meanwhile, later\nthat year, @RalfJung did a second internship, developing Miri further with\nsupport for checking basic type invariants and verifying that references are\nused according to their aliasing restrictions.\n\n[usask]: https://www.usask.ca/\n[slides]: https://solson.me/miri-slides.pdf\n[report]: https://solson.me/miri-report.pdf\n\n## Bugs found by Miri\n\nMiri has already found a number of bugs in the Rust standard library and beyond, some of which we collect here.\nIf Miri helped you find a subtle UB bug in your code, we'd appreciate a PR adding it to the list!\n\nDefinite bugs found:\n\n* [`Debug for vec_deque::Iter` accessing uninitialized memory](https://github.com/rust-lang/rust/issues/53566)\n* [`Vec::into_iter` doing an unaligned ZST read](https://github.com/rust-lang/rust/pull/53804)\n* [`From<&[T]> for Rc` creating a not sufficiently aligned reference](https://github.com/rust-lang/rust/issues/54908)\n* [`BTreeMap` creating a shared reference pointing to a too small allocation](https://github.com/rust-lang/rust/issues/54957)\n* [`Vec::append` creating a dangling reference](https://github.com/rust-lang/rust/pull/61082)\n* [Futures turning a shared reference into a mutable one](https://github.com/rust-lang/rust/pull/56319)\n* [`str` turning a shared reference into a mutable one](https://github.com/rust-lang/rust/pull/58200)\n* [`rand` performing unaligned reads](https://github.com/rust-random/rand/issues/779)\n* [The Unix allocator calling `posix_memalign` in an invalid way](https://github.com/rust-lang/rust/issues/62251)\n* [`getrandom` calling the `getrandom` syscall in an invalid way](https://github.com/rust-random/getrandom/pull/73)\n* [`Vec`](https://github.com/rust-lang/rust/issues/69770) and [`BTreeMap`](https://github.com/rust-lang/rust/issues/69769) leaking memory under some (panicky) conditions\n* [`beef` leaking memory](https://github.com/maciejhirsz/beef/issues/12)\n* [`EbrCell` using uninitialized memory incorrectly](https://github.com/Firstyear/concread/commit/b15be53b6ec076acb295a5c0483cdb4bf9be838f#diff-6282b2fc8e98bd089a1f0c86f648157cR229)\n* [TiKV performing an unaligned pointer access](https://github.com/tikv/tikv/issues/7613)\n* [`servo_arc` creating a dangling shared reference](https://github.com/servo/servo/issues/26357)\n* [TiKV constructing out-of-bounds pointers (and overlapping mutable references)](https://github.com/tikv/tikv/pull/7751)\n* [`encoding_rs` doing out-of-bounds pointer arithmetic](https://github.com/hsivonen/encoding_rs/pull/53)\n* [TiKV using `Vec::from_raw_parts` incorrectly](https://github.com/tikv/agatedb/pull/24)\n* Incorrect doctests for [`AtomicPtr`](https://github.com/rust-lang/rust/pull/84052) and [`Box::from_raw_in`](https://github.com/rust-lang/rust/pull/84053)\n* [Insufficient alignment in `ThinVec`](https://github.com/Gankra/thin-vec/pull/27)\n* [`crossbeam-epoch` calling `assume_init` on a partly-initialized `MaybeUninit`](https://github.com/crossbeam-rs/crossbeam/pull/779)\n* [`integer-encoding` dereferencing a misaligned pointer](https://github.com/dermesser/integer-encoding-rs/pull/23)\n* [`rkyv` constructing a `Box<[u8]>` from an overaligned allocation](https://github.com/rkyv/rkyv/commit/a9417193a34757e12e24263178be8b2eebb72456)\n* [Data race in `arc-swap`](https://github.com/vorner/arc-swap/issues/76)\n* [Data race in `thread::scope`](https://github.com/rust-lang/rust/issues/98498)\n* [`regex` incorrectly handling unaligned `Vec<u8>` buffers](https://www.reddit.com/r/rust/comments/vq3mmu/comment/ienc7t0?context=3)\n* [Incorrect use of `compare_exchange_weak` in `once_cell`](https://github.com/matklad/once_cell/issues/186)\n* [Dropping with unaligned pointers in `vec::IntoIter`](https://github.com/rust-lang/rust/pull/106084)\n* [Deallocating with the wrong layout in new specializations for in-place `Iterator::collect`](https://github.com/rust-lang/rust/pull/118460)\n* [Incorrect offset computation for highly-aligned types in `portable-atomic-util`](https://github.com/taiki-e/portable-atomic/pull/138)\n* [Occasional memory leak in `std::mpsc` channels](https://github.com/rust-lang/rust/issues/121582) (original code in [crossbeam](https://github.com/crossbeam-rs/crossbeam/pull/1084))\n* [Weak-memory-induced memory leak in Windows thread-local storage](https://github.com/rust-lang/rust/pull/124281)\n* [A bug in the new `RwLock::downgrade` implementation](https://rust-lang.zulipchat.com/#narrow/channel/269128-miri/topic/Miri.20error.20library.20test) (caught by Miri before it landed in the Rust repo)\n\nViolations of [Stacked Borrows] found that are likely bugs (but Stacked Borrows is currently just an experiment):\n\n* [`VecDeque::drain` creating overlapping mutable references](https://github.com/rust-lang/rust/pull/56161)\n* Various `BTreeMap` problems\n    * [`BTreeMap` iterators creating mutable references that overlap with shared references](https://github.com/rust-lang/rust/pull/58431)\n    * [`BTreeMap::iter_mut` creating overlapping mutable references](https://github.com/rust-lang/rust/issues/73915)\n    * [`BTreeMap` node insertion using raw pointers outside their valid memory area](https://github.com/rust-lang/rust/issues/78477)\n* [`LinkedList` cursor insertion creating overlapping mutable references](https://github.com/rust-lang/rust/pull/60072)\n* [`Vec::push` invalidating existing references into the vector](https://github.com/rust-lang/rust/issues/60847)\n* [`align_to_mut` violating uniqueness of mutable references](https://github.com/rust-lang/rust/issues/68549)\n* [`sized-chunks` creating aliasing mutable references](https://github.com/bodil/sized-chunks/issues/8)\n* [`String::push_str` invalidating existing references into the string](https://github.com/rust-lang/rust/issues/70301)\n* [`ryu` using raw pointers outside their valid memory area](https://github.com/dtolnay/ryu/issues/24)\n* [ink! creating overlapping mutable references](https://github.com/rust-lang/miri/issues/1364)\n* [TiKV creating overlapping mutable reference and raw pointer](https://github.com/tikv/tikv/pull/7709)\n* [Windows `Env` iterator using a raw pointer outside its valid memory area](https://github.com/rust-lang/rust/pull/70479)\n* [`VecDeque::iter_mut` creating overlapping mutable references](https://github.com/rust-lang/rust/issues/74029)\n* [Various standard library aliasing issues involving raw pointers](https://github.com/rust-lang/rust/pull/78602)\n* [`<[T]>::copy_within` using a loan after invalidating it](https://github.com/rust-lang/rust/pull/85610)\n\n## Scientific papers employing Miri\n\n* [Stacked Borrows: An Aliasing Model for Rust](https://plv.mpi-sws.org/rustbelt/stacked-borrows/)\n* [Using Lightweight Formal Methods to Validate a Key-Value Storage Node in Amazon S3](https://www.amazon.science/publications/using-lightweight-formal-methods-to-validate-a-key-value-storage-node-in-amazon-s3)\n* [SyRust: Automatic Testing of Rust Libraries with Semantic-Aware Program Synthesis](https://dl.acm.org/doi/10.1145/3453483.3454084)\n\n## License\n\nLicensed under either of\n\n  * Apache License, Version 2.0 ([LICENSE-APACHE](LICENSE-APACHE) or\n    http://www.apache.org/licenses/LICENSE-2.0)\n  * MIT license ([LICENSE-MIT](LICENSE-MIT) or\n    http://opensource.org/licenses/MIT)\n\nat your option.\n\n### Contribution\n\nUnless you explicitly state otherwise, any contribution intentionally submitted\nfor inclusion in the work by you shall be dual licensed as above, without any\nadditional terms or conditions.\n"
        },
        {
          "name": "bench-cargo-miri",
          "type": "tree",
          "content": null
        },
        {
          "name": "build.rs",
          "type": "blob",
          "size": 0.4130859375,
          "content": "fn main() {\n    // Don't rebuild miri when nothing changed.\n    println!(\"cargo:rerun-if-changed=build.rs\");\n    // Re-export the TARGET environment variable so it can be accessed by miri. Needed to know the\n    // \"host\" triple inside Miri.\n    let target = std::env::var(\"TARGET\").unwrap();\n    println!(\"cargo:rustc-env=TARGET={target}\");\n    // Allow some cfgs.\n    println!(\"cargo::rustc-check-cfg=cfg(bootstrap)\");\n}\n"
        },
        {
          "name": "cargo-miri",
          "type": "tree",
          "content": null
        },
        {
          "name": "ci",
          "type": "tree",
          "content": null
        },
        {
          "name": "clippy.toml",
          "type": "blob",
          "size": 0.0859375,
          "content": "arithmetic-side-effects-allowed = [\"rustc_abi::Size\", \"rustc_apfloat::ieee::IeeeFloat\"]\n"
        },
        {
          "name": "etc",
          "type": "tree",
          "content": null
        },
        {
          "name": "miri",
          "type": "blob",
          "size": 1.0810546875,
          "content": "#!/usr/bin/env bash\nset -e\n# We want to call the binary directly, so we need to know where it ends up.\nROOT_DIR=\"$(dirname \"$0\")\"\nMIRI_SCRIPT_TARGET_DIR=\"$ROOT_DIR\"/miri-script/target\nTOOLCHAIN=\"+nightly\"\n# If we are being invoked for RA, use JSON output and the default toolchain (to make proc-macros\n# work in RA). This needs a different target dir to avoid mixing up the builds.\nif [ -n \"$MIRI_IN_RA\" ]; then\n  MESSAGE_FORMAT=\"--message-format=json\"\n  TOOLCHAIN=\"\"\n  MIRI_SCRIPT_TARGET_DIR=\"$MIRI_SCRIPT_TARGET_DIR\"/ra\nfi\n# We need a nightly toolchain, for `-Zroot-dir`.\ncargo $TOOLCHAIN build $CARGO_EXTRA_FLAGS --manifest-path \"$ROOT_DIR\"/miri-script/Cargo.toml \\\n  -Zroot-dir=\"$ROOT_DIR\" \\\n  -q --target-dir \"$MIRI_SCRIPT_TARGET_DIR\" $MESSAGE_FORMAT || \\\n  ( echo \"Failed to build miri-script. Is the 'nightly' toolchain installed?\"; exit 1 )\n# Instead of doing just `cargo run --manifest-path .. $@`, we invoke miri-script binary directly. Invoking `cargo run` goes through\n# rustup (that sets it's own environmental variables), which is undesirable.\n\"$MIRI_SCRIPT_TARGET_DIR\"/debug/miri-script \"$@\"\n"
        },
        {
          "name": "miri-script",
          "type": "tree",
          "content": null
        },
        {
          "name": "miri.bat",
          "type": "blob",
          "size": 0.7578125,
          "content": ":: This makes execution of ./miri on Linux and Windows the same.\n:: Windows will not execute the bash script, and select this.\n@echo off\nset MIRI_SCRIPT_TARGET_DIR=%0\\..\\miri-script\\target\n\n:: If any other steps are added, the \"|| exit /b\" must be appended to early\n:: return from the script. If not, it will continue execution.\ncargo +nightly build %CARGO_EXTRA_FLAGS% -q --target-dir %MIRI_SCRIPT_TARGET_DIR% --manifest-path %0\\..\\miri-script\\Cargo.toml ^\n  || (echo Failed to build miri-script. Is the 'nightly' toolchain installed? & exit /b)\n\n:: Forwards all arguments to this file to the executable.\n:: We invoke the binary directly to avoid going through rustup, which would set some extra\n:: env vars that we do not want.\n%MIRI_SCRIPT_TARGET_DIR%\\debug\\miri-script %*\n"
        },
        {
          "name": "rust-version",
          "type": "blob",
          "size": 0.0400390625,
          "content": "252b07bba419a075acfa1fa85d66683e9623c281\n"
        },
        {
          "name": "rustfmt.toml",
          "type": "blob",
          "size": 0.2509765625,
          "content": "# This matches rustc\nstyle_edition = \"2024\"\nuse_small_heuristics = \"Max\"\ngroup_imports = \"StdExternalCrate\"\nimports_granularity = \"Module\"\n\n# Miri-specific settings\nforce_multiline_blocks = true\nmatch_arm_blocks = false\nmatch_arm_leading_pipes = \"Preserve\"\n"
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "test-cargo-miri",
          "type": "tree",
          "content": null
        },
        {
          "name": "test_dependencies",
          "type": "tree",
          "content": null
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        },
        {
          "name": "triagebot.toml",
          "type": "blob",
          "size": 1.1455078125,
          "content": "## See <https://forge.rust-lang.org/triagebot/index.html> for documentation\n## of these options.\n\n[relabel]\nallow-unauthenticated = [\n    \"A-*\",\n    \"C-*\",\n    \"E-*\",\n    \"I-*\",\n    \"S-*\",\n ]\n\n# Gives us the commands 'ready', 'author', 'blocked'\n[shortcut]\n\n# Enables assigning users to issues and PRs.\n[assign]\nwarn_non_default_branch = true\ncontributing_url = \"https://github.com/rust-lang/miri/blob/master/CONTRIBUTING.md\"\n\n[no-merges]\nexclude_titles = [\"Rustup\"]\n\n[review-submitted]\n# This label is added when a \"request changes\" review is submitted.\nreviewed_label = \"S-waiting-on-author\"\n# These labels are removed when a \"request changes\" review is submitted.\nreview_labels = [\"S-waiting-on-review\"]\n\n[review-requested]\n# Those labels are removed when PR author requests a review from an assignee\nremove_labels = [\"S-waiting-on-author\"]\n# Those labels are added when PR author requests a review from an assignee\nadd_labels = [\"S-waiting-on-review\"]\n\n[merge-conflicts]\nremove = []\nadd = [\"S-waiting-on-author\"]\nunless = [\"S-blocked\", \"S-waiting-on-team\", \"S-waiting-on-review\"]\n\n# Automatically close and reopen PRs made by bots to run CI on them\n[bot-pull-requests]\n"
        }
      ]
    }
  ]
}