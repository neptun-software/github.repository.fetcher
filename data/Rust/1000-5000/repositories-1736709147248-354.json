{
  "metadata": {
    "timestamp": 1736709147248,
    "page": 354,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjM2MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "chaosprint/glicol",
      "stars": 2348,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 4.3798828125,
          "content": "**/firebaseConfig.js\n.DS_Store\nrs/bela/arm-bela-linux-gnueabihf/\nrs/bela/__MACOSX/\nrs/bela/lib/\nrs/bela/include/\n\n.git-rewrite\n# Generated by Cargo\n# will have compiled files and executables\n/target/\n\n# Remove Cargo.lock from gitignore if creating an executable, leave it for libraries\n# More information here https://doc.rust-lang.org/cargo/guide/cargo-toml-vs-cargo-lock.html\nCargo.lock\n\n# These are backup files generated by rustfmt\n**/*.rs.bk\n\n# Byte-compiled / optimized / DLL files\n__pycache__/\n*.py[cod]\n*$py.class\n\n# C extensions\n*.so\n\n# Distribution / packaging\n.Python\nbuild/\ndevelop-eggs/\ndist/\ndownloads/\neggs/\n.eggs/\nlib/\nlib64/\nparts/\nsdist/\nvar/\nwheels/\npip-wheel-metadata/\nshare/python-wheels/\n*.egg-info/\n.installed.cfg\n*.egg\nMANIFEST\n\n# PyInstaller\n#  Usually these files are written by a python script from a template\n#  before PyInstaller builds the exe, so as to inject date/other infos into it.\n*.manifest\n*.spec\n\n# Installer logs\npip-log.txt\npip-delete-this-directory.txt\n\n# Unit test / coverage reports\nhtmlcov/\n.tox/\n.nox/\n.coverage\n.coverage.*\n.cache\nnosetests.xml\ncoverage.xml\n*.cover\n*.py,cover\n.hypothesis/\n.pytest_cache/\n\n# Translations\n*.mo\n*.pot\n\n# Django stuff:\n*.log\nlocal_settings.py\ndb.sqlite3\ndb.sqlite3-journal\n\n# Flask stuff:\ninstance/\n.webassets-cache\n\n# Scrapy stuff:\n.scrapy\n\n# Sphinx documentation\ndocs/_build/\n\n# PyBuilder\ntarget/\n\n# Jupyter Notebook\n.ipynb_checkpoints\n\n# IPython\nprofile_default/\nipython_config.py\n\n# pyenv\n.python-version\n\n# pipenv\n#   According to pypa/pipenv#598, it is recommended to include Pipfile.lock in version control.\n#   However, in case of collaboration, if having platform-specific dependencies or dependencies\n#   having no cross-platform support, pipenv may install dependencies that don't work, or not\n#   install all needed dependencies.\n#Pipfile.lock\n\n# PEP 582; used by e.g. github.com/David-OConnor/pyflow\n__pypackages__/\n\n# Celery stuff\ncelerybeat-schedule\ncelerybeat.pid\n\n# SageMath parsed files\n*.sage.py\n\n# Environments\n.env\n.venv\nenv/\nvenv/\nENV/\nenv.bak/\nvenv.bak/\n\n# Spyder project settings\n.spyderproject\n.spyproject\n\n# Rope project settings\n.ropeproject\n\n# mkdocs documentation\n/site\n\n# mypy\n.mypy_cache/\n.dmypy.json\ndmypy.json\n\n# Pyre type checker\n.pyre/\n\n# Logs\nlogs\n*.log\nnpm-debug.log*\nyarn-debug.log*\nyarn-error.log*\nlerna-debug.log*\n\n# Diagnostic reports (https://nodejs.org/api/report.html)\nreport.[0-9]*.[0-9]*.[0-9]*.[0-9]*.json\n\n# Runtime data\npids\n*.pid\n*.seed\n*.pid.lock\n\n# Directory for instrumented libs generated by jscoverage/JSCover\nlib-cov\n\n# Coverage directory used by tools like istanbul\ncoverage\n*.lcov\n\n# nyc test coverage\n.nyc_output\n\n# Grunt intermediate storage (https://gruntjs.com/creating-plugins#storing-task-files)\n.grunt\n\n# Bower dependency directory (https://bower.io/)\nbower_components\n\n# node-waf configuration\n.lock-wscript\n\n# Compiled binary addons (https://nodejs.org/api/addons.html)\nbuild/Release\n\n# Dependency directories\nnode_modules/\njspm_packages/\n\n# Snowpack dependency directory (https://snowpack.dev/)\nweb_modules/\n\n# TypeScript cache\n*.tsbuildinfo\n\n# Optional npm cache directory\n.npm\n\n# Optional eslint cache\n.eslintcache\n\n# Microbundle cache\n.rpt2_cache/\n.rts2_cache_cjs/\n.rts2_cache_es/\n.rts2_cache_umd/\n\n# Optional REPL history\n.node_repl_history\n\n# Output of 'npm pack'\n*.tgz\n\n# Yarn Integrity file\n.yarn-integrity\n\n# dotenv environment variables file\n.env\n.env.test\n\n# parcel-bundler cache (https://parceljs.org/)\n.cache\n.parcel-cache\n\n# Next.js build output\n.next\nout\n\n# Nuxt.js build / generate output\n.nuxt\ndist\n\n# Gatsby files\n.cache/\n# Comment in the public line in if your project uses Gatsby and not Next.js\n# https://nextjs.org/blog/next-9-1#public-directory-support\n# public\n\n# vuepress build output\n.vuepress/dist\n\n# Serverless directories\n.serverless/\n\n# FuseBox cache\n.fusebox/\n\n# DynamoDB Local files\n.dynamodb/\n\n# TernJS port file\n.tern-port\n\n# Stores VSCode versions used for testing VSCode extensions\n.vscode-test\n\n# yarn v2\n.yarn/cache\n.yarn/unplugged\n.yarn/build-state.yml\n.yarn/install-state.gz\n.pnp.*\n\npublic/samples\nbuild\n.firebase\n.firebaserc\nfirebase.json\n\n# Generated by Cargo\n# will have compiled files and executables\nglicol-wasm/target/\nglicol-rs/target/\nrs/wasm/pkg\n\n# Remove Cargo.lock from gitignore if creating an executable, leave it for libraries\n# More information here https://doc.rust-lang.org/cargo/guide/cargo-toml-vs-cargo-lock.html\nCargo.lock\n\n# These are backup files generated by rustfmt\n**/*.rs.bk\n"
        },
        {
          "name": ".vscode",
          "type": "tree",
          "content": null
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.0712890625,
          "content": "The MIT License (MIT)\n\nCopyright (c) 2020-present Qichao Lan (chaopsrint)\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of\nthis software and associated documentation files (the \"Software\"), to deal in\nthe Software without restriction, including without limitation the rights to\nuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of\nthe Software, and to permit persons to whom the Software is furnished to do so,\nsubject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\nFOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\nCOPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\nIN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\nCONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 8.015625,
          "content": "<div align=\"center\">\n  <br />\n  <p>\n    <a href=\"https://glicol.org\"><img src=\"https://github.com/glicol/glicol-logo/raw/main/logo.png\" width=\"200\" /></a>\n  </p>\n</div>\n\n<div align=\"center\">\n  <a href=\"https://glicol.org\" target=\"_blank\"><img alt=\"website\" src=\"https://img.shields.io/badge/website-glicol.org-blue\"></a>\n  <a href=\"https://glicol.js.org\" target=\"_blank\"><img alt=\"website\" src=\"https://img.shields.io/badge/npm%20docs-glicol.js.org-yellow\"></a>\n  <a href=\"https://npmjs.com/glicol\" target=\"_blank\"><img alt=\"npm\" src=\"https://img.shields.io/npm/v/glicol\"></a>\n  <a href=\"https://discord.gg/8tmK2bHcwa\" target=\"_blank\"><img alt=\"Discord\" src=\"https://img.shields.io/discord/963514061528662046\"></a>\n  <a href=\"https://github.com/chaosprint/glicol/blob/main/LICENSE\"><img alt=\"GitHub\" src=\"https://img.shields.io/github/license/chaosprint/glicol\"></a>\n</div>\n\nGlicol (an acronym for \"graph-oriented live coding language\") is a computer music language with both its language and audio engine written in [Rust programming language](https://www.rust-lang.org/), a modern alternative to C/C++. Given this low-level nature, Glicol can run on many different platforms such as browsers, VST plugins and Bela board. Glicol's synth-like syntax and powerful audio engine also make it possible to combine high-level synth or sequencer control with low-level sample-accurate audio synthesis, all in real-time.\n\n<!-- Glicol can be used for:\n- live coding performance, either in browsers with your friends or in a VST plugin(experimental)\n- education of electronic music, DSP and coding\n- audio/music app development in browsers, [either CDN or NPM](https://github.com/chaosprint/glicol/tree/main/js)\n- Rust audio library, running on Web, Desktop, [DAW](https://github.com/chaosprint/glicol/tree/main/rs/vst), [Bela](https://github.com/chaosprint/glicol/tree/main/rs/bela), etc. -->\n\n## Get started\n\n### üöÄ The Web App\n \nThe easiest way to try Glicol:\n\nhttps://glicol.org\n\n> There you can find guides, demos, docs, and apps for collaboration.\n\n<details>\n  <summary>Features</summary>\n  \n  - Near-native, garbage-collection-free and memory-safe real-time audio in web browsers\n  \n  - Quick reference in consoles with `alt-d`\n  \n  - The web app automatically loads samples; you can also drag and drop local samples in the browser editor\n  \n  - Robust error handling: error reported in console, but previous music will continue!\n  \n  - Mix JavaScript code to create visuals with Hydra synth made by @ojack\n  \n  - What you see is what you get, i.e. declarative programmering for both code writing and executing: no need to select anything, just change the code and update, Glicol engine will use `LCS` algorithm to handle adding, updating and removing\n  \n  - Decentralised collaboration using `yjs` and a unique `be-ready` mechanism\n</details>\n\n### üéÅ For Audio Dev\n\n|                 |               Description                               |\n|-----------------|:---------------------------------------------------------:|\n| [NPM Docs](https://glicol.js.org)       | Safe, performant, light-weight and ergonomic audio lib for web apps |\n| [Rust Audio Lib](https://github.com/chaosprint/glicol/tree/main/rs/synth)  | Write VST like [this Dattorro reverb plugin](https://github.com/chaosprint/dattorro-vst-rs)  |   \n| [Run on Bela](https://github.com/chaosprint/glicol/tree/main/rs/bela) | Run Glicol DSL on Bela board for quick audio prototyping.  |\n\n### üçø YouTube Channel\nFind Glicol demo vidoes [in this playlist](https://www.youtube.com/playlist?list=PLT4REhRBWaOOrLQxCg5Uw97gEpN-woo1c).\n\n## Philosophy of Glicol\n\nThe motivation of Glicol is:\n\n- to help people with zero knowledge of coding and music production to get started with live coding\n\n- to offer experienced music coders a tool for quick prototyping and hacking\n\nIn [NIME community](https://nime.org/), it is known as: \n> low entry fee and high ceilings\n\nThis is Glicol's philosophy to approach these goals:\n\n- design the language from a new instrument design perspective\n\n- embrace the spirit of the internet for a better experience\n\nReflected in the implementation:\n\n- Glicol adopts a graph-oriented paradigm\n\n- Glicol can be used in browsers with zero-installation\n\n### Graph-oriented\n\nThe basic idea of Glicol is to connect different nodes like synth modules.\n\nAll you need to know is the audio input/output behaviour of each node.\n\nTwo ways for connecting: `>>` and `~reference`:\n```\n// amplitude modulation and lazy evaluation example\n// chain with ~ is a ref chain and will not be sent to the DAC\n\no: sin 440 >> mul ~amp\n~amp: sin 1.0 >> mul 0.3 >> add 0.5\n```\n<!-- Sometimes, constraints make it easier to learn and use. -->\n\nIt also applies to sequencer and sampler:\n```\n// sequencer pattern\n// first divide one bar with space\n// then further divide each part based on midi number and rest(_)\n\no: speed 2.0 >> seq 60 _~a _ 48__67\n>> sp \\blip\n\n// quantity alters probability\n~a: choose 60 60 0 0 72 72\n```\n\nAs mentioned above, you can try these examples on:\n\nhttps://glicol.org\n\nIf you want, you can even hear how a `seq` node work:\n```\no: speed 2.0 >> seq 60 _72 _ 48__67 >> mul 0.5\n```\n\nThis is actually analogous to how hardware module pass signals.\n\nIt is very easy to remember and to get started.\n\nWhen Glicol is used in education, we can let students see and hear each node, even including 'envelope'.\n\nJust leave the introduction of data types, `Object` or `Function` later when we mix JavaScript with Glicol.\n\n### Zero-installation\n\nFor the audio engine, instead of mapping it to existing audio lib like `SuperCollider`, I decide to do it the hard way:\n\n- write the parser in Rust\n\n- write the audio engine in Rust that works seamlessly with the AST processing\n\n- port it to browsers using `WebAssembly`, `AudioWorklet` and `SharedArrayBuffer`\n\nThe main reason is to explore performant audio in browsers for easy access and live coding collaboration.\n\nThe reward is that we now have an Rust audio lib called `glicol_synth`:\n\nIt can run on Web, Desktop, DAW, Bela board, etc.\n\nAnd one more thing.\n\nTo write everything from low-level also opens the door for `meta` node.\n\nNow I can explain to students, the `hello world` tone can also be written in this way:\n```\no: meta `\n    output.pad(128, 0.0);\n    for i in 0..128 {\n        output[i] = sin(2*PI()*phase) ;\n        phase += 440.0 / sr;\n    };\n    while phase > 1.0 { phase -= 1.0 };\n    output\n`\n```\n\n## Roadmap\n\n- [x] `0.1.0` hello world from `dasp_graph` and `pest.rs`, pass code from js to wasm, and lazy evaluation\n- [x] `0.2.0` pass samples from js to wasm, support error handling, bpm control in console\n- [x] `0.3.0` build complex node `plate` reverb using basic node from glicol, using macro in Rust\n- [x] `0.4.0` use `LCS` algorithm and preprocessor for smooth and efficient whole graph updating\n- [x] `0.5.0` build `const_generics` to `dasp_graph` and use it in glicol, use `SharedArrayBuffer`, support local sample loading\n- [x] `0.6.0` refactor the code to modules: \n    - `glicol-main` = `glicol-synth` + `glicol-parser` + `glicol-ext`\n    - `glicol-ext` = `glicol-synth` + `glicol-parser` + `glicol-macro`\n    - `glicol-js` = `glicol-main` + `glicol-wasm`\n- [x] `0.7.0` support mixing js with glicol in `glicol-js` using Regex; add visualisation\n- [x] `0.8.0` embed `Rhai` in glicol üéâ\n- [x] `0.9.0` redesigned architecture; see the release note\n- [x] `0.10.0` run as a VST plugin\n- [x] `0.11.0` run on Bela\n- [x] `0.12.0` distribute as a `npm` package\n- [ ] better music expressions, more variation for `seq` nodes\n- [ ] exploring new forms of musical interactions\n<!-- - [ ] midi support? used in vst? -->\n<!-- - [ ] examples for web audio, vst, bela, etc. -->\n\n> Note that Glicol is still highly experimental, so it can be risky for live performances. \n> The API may also change before version 1.0.0.\n\nPlease let me know in [issues](https://github.com/chaosprint/glicol/issues) or [discussions](https://github.com/chaosprint/glicol/discussions):\n- your thoughts on the experience of glicol\n- new feature suggestion\n- bug report, especially the code that causes a `panic` in browser console\n- missing and confusion in guides and reference on the website\n"
        },
        {
          "name": "js",
          "type": "tree",
          "content": null
        },
        {
          "name": "rs",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}