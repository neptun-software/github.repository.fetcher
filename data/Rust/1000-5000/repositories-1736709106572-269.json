{
  "metadata": {
    "timestamp": 1736709106572,
    "page": 269,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjI3MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "rusoto/rusoto",
      "stars": 2736,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.0810546875,
          "content": "target\nCargo.lock\n.project\ntestfile.zip\n*.pyc\nvenv\n*.rs.bk\n.idea\nrusoto.iml\n.vscode"
        },
        {
          "name": ".gitmodules",
          "type": "blob",
          "size": 0.115234375,
          "content": "[submodule \"service_crategen/botocore\"]\n\tpath = service_crategen/botocore\n\turl = https://github.com/boto/botocore.git\n"
        },
        {
          "name": "AWS-CREDENTIALS.md",
          "type": "blob",
          "size": 4.8818359375,
          "content": "### Credentials\n\n#### Best Practices\n\nPlease follow the [AWS documentation on best practices](https://docs.aws.amazon.com/general/latest/gr/aws-access-keys-best-practices.html) for managing credentials for your account. These credentials provide anyone who has access to them access to your AWS account. You can mitigate risk that goes along with that access by following these best practices.\n\n#### Usage\n\nMuch like the [standard AWS toolchain](https://docs.aws.amazon.com/cli/latest/userguide/cli-chap-configure.html), Rusoto has the ability to source AWS access credentials from multiple sources, either independently or in a tiered fashion.\n\n1. Environment variables via [`rusoto_core::EnvironmentProvider`](https://docs.rs/rusoto_credential/latest/rusoto_credential/struct.EnvironmentProvider.html) (`AWS_ACCESS_KEY_ID` and `AWS_SECRET_ACCESS_KEY`)\n2. AWS credentials file via [`rusoto_core::ProfileProvider`](https://docs.rs/rusoto_credential/latest/rusoto_credential/struct.ProfileProvider.html)\n3. IAM ECS container profile via [`rusoto_core::ContainerProvider`](https://docs.rs/rusoto_credential/latest/rusoto_credential/struct.ContainerProvider.html)\n4. IAM EC2 instance profile via [`rusoto_core::InstanceMetadataProvider`](https://docs.rs/rusoto_credential/latest/rusoto_credential/struct.InstanceMetadataProvider.html)\n\nThe [`rusoto_core::ChainProvider`](https://docs.rs/rusoto_credential/latest/rusoto_credential/struct.ChainProvider.html) is a convenience for attempting to source access credentials using all the methods above in that order.\nIf credentials cannot be obtained through one method, it falls back to the next.\nIf all possibilites are exhausted, an error will be returned.\n\n`ProfileProvider` (and `ChainProvider`) also allow you to specify a custom path to the credentials file and the name of the profile to use.\nIf not explicitly provided as arguments, the values for these two parameters are computed according to the following rules:\n* **location of credentials file:** if set and not empty the value of the environment variable `AWS_SHARED_CREDENTIALS_FILE` otherwise `\"~/.aws/credentials\"`.\n* **profile name:** if set and not empty the value of the environment variable ```AWS_PROFILE``` otherwise `\"default\"`\n\nIt's also possible to implement your own credentials sourcing mechanism by creating a type that implements `rusoto_core::ProvideAwsCredentials`.\n\n`rusoto_sts` implements a replacement `ChainProvider` which adds a credential source for web identities for use with Kubernetes.\n\n#### sts:AssumeRole\n\nIf your aws account belongs to an organization and you need to use sts:AssumeRole, you're probably looking for `rusoto_sts::StsAssumeRoleSessionCredentialsProvider`. A simple program that uses sts:AssumeRole looks like this:\n\n```rust,no_run\nuse std::default::Default;\n\nuse rusoto_core::{Region, HttpClient};\n\nuse rusoto_ec2::{Ec2Client, Ec2, DescribeSpotInstanceRequestsRequest};\nuse rusoto_sts::{StsClient, StsAssumeRoleSessionCredentialsProvider};\n\n#[tokio::main]\nasync fn main() {\n    env_logger::init();\n\n    let sts = StsClient::new(Region::EuWest1);\n\n    let provider = StsAssumeRoleSessionCredentialsProvider::new(\n        sts,\n        \"arn:aws:iam::something:role/something\".to_owned(),\n        \"default\".to_owned(),\n        None, None, None, None\n    );\n\n    let client = Ec2Client::new_with(HttpClient::new().unwrap(), provider, Region::UsEast1);\n\n    let sir_input = DescribeSpotInstanceRequestsRequest::default();\n    let x = client.describe_spot_instance_requests(sir_input).await;\n\n    println!(\"{:?}\", x);\n}\n```\n\n### Important note about using the StsAssumeRoleSessionCredentialsProvider\n\n**Be careful**. The current `rusoto_sts::StsAssumeRoleSessionCredentialsProvider` should be used with `rusoto_credential::AutoRefreshingProvider` as a wrapper to take advantage of using the already cached token of AssumeRole as its only valid for 1 hour by default.\nThe current implementation does not reuse the cached token returned by the AssumeRole by default so it will be refreshed with every call to AWS resource.\n\nThis will affect the performance as well as the size of you AWS bill.\n\n- https://docs.rs/rusoto_credential\n- https://crates.io/crates/rusoto_credential\n\n```rust,no_run\nuse rusoto_core::Region;\nuse rusoto_sts::{StsClient, StsAssumeRoleSessionCredentialsProvider};\nlet sts = StsClient::new(Region::EuWest1);\n\nlet provider = StsAssumeRoleSessionCredentialsProvider::new(\n    sts,\n    \"arn:aws:iam::something:role/something\".to_owned(),\n    \"default\".to_owned(),\n    None, None, None, None\n);\n\nlet auto_refreshing_provider = rusoto_credential::AutoRefreshingProvider::new(provider);\n```\n\n#### Local integration testing of IAM credentials\n\nLocal testing of IAM credentials can be done using [credential_service_mock](rusoto/credential_service_mock) which runs as a local [Warp](https://crates.io/crates/warp) server.\n \nSee [this integration test](rusoto/credential/tests/instance-profile-test.rs) for a working example of local testing.\n"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 20.251953125,
          "content": "# Rusoto changes\n\nThe format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/),\nand this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0.html).\n\n## [Unreleased]\n\n(Please put changes here.)\n\n## [0.48.0] - 2022-04-24\n\n- Remove [`macie`](https://github.com/boto/botocore/blob/81e0b0026f9eb21be658cf0dd4c17e0dc173346f/botocore/data/macie/2017-12-19/service-2.json#L27), [`mobile`](https://stackoverflow.com/a/64990655), and [`worklink`](https://github.com/boto/botocore/blob/81e0b0026f9eb21be658cf0dd4c17e0dc173346f/botocore/data/worklink/2018-09-25/service-2.json#L33-L34) services, which have had their DNS records removed\n- Add support for ap-southeast-3, Asia Pacific (Jakarta)\n- Add Clone derived trait to TlsError\n- Allow the user to choose between rustls and rustls-webpki, and make only the former depend on native cert support\n- Update `hyper-rustls` to `0.23`\n\n## [0.47.0] - 2021-06-29\n\n- Update to botocore 1.20.102\n- Update to `serde_urlencoded` 0.7\n- Update to `rustc_version` 0.4\n- Update to `shlex` 1.0\n- Update to  `hmac` 0.4\n- Replace `time`-related types in `rusoto_signature` with `chrono` types, to\n  match `rusoto_credential`\n- Swap the non-RustCrypto `md5` crate for the RustCrypto `md-5` crate, to match\n  usage of RustCrypto `sha2` crate\n- Remove `Sync` constraint on `ByteStream`-related functions.\n- Update incorrect minimum versions of `async-trait`, `percent-encoding`, and\n  `serde`\n- Avoid unnecessary calls to `to_string`\n- Remove unpublished and outdated `helpers` crate\n\n## [0.46.0] - 2021-01-05\n\n- Display `rusoto_core::Client` in docs\n- Fix unsoundness in `rusoto_mock::MultipleMockRequestDispatcher`\n- Add ability to set local agent appended to the default User-Agent\n- Update to `base64` 0.13\n- Update to `bytes` 1.0\n- Update to `hmac` 0.10\n- Update to `hyper-rustls` 0.22\n- Update to `hyper-tls` 0.5\n- Update to `hyper` 0.14\n- Update to `tokio` 1.0\n- Update to botocore 1.19.42\n- Swap the unmaintained `dirs` crate for its replacement `dirs-next`\n- Swap `pin-project` for the lighter weight `pin-project-lite`\n- Disable `chrono`'s `oldtime` feature\n- Remove dependency on `regex`\n\n## [0.45.0] - 2020-07-22\n\n- Add event-stream protocol support (currently only for JSON APIs, used in `subscribe_to_shard` call in Kinesis)\n- Extract common generated code into utility functions to improve compile times\n- Allow creating a ProfileProvider with only the profile\n- CDATA sections are now treated like strings\n- Fix incorrect type definition for `rusoto_batch::JobDetail`\n- Update to `hmac` 0.8 and `sha2` 0.9\n- Added `Sync` bounds to `AsyncRead` and `Read` structures\n- Update to botocore 1.17.20\n\n## [0.44.0] - 2020-06-01\n\n- Add support for af-south-1, Africa (Cape Town), and eu-south-1, Europe (Milan)\n- Update to botocore 1.16.14\n- Fix `Time::now()` and `OffsetDateTime::now()` deprecation warnings\n- Fix minimum version of `time` crate\n- Always encode `+` in query strings\n- Added a Cognito credential provider\n- Add `MultipleMockRequestDispatcher` to permit mocking multiple requests using the same client\n- Fix `rusoto_sts::WebIdentityProvider::from_k8s_env` always requiring `AWS_ROLE_SESSION_NAME` env var which should be optional\n- Added support to optionally define a session policy when using `rusoto_sts::WebIdentityProvider`\n- Omit generating XML-deseralization code for actions without a response body\n- Add `region_from_profile()` function to ProfileProvider\n- Fix applying `Content-Encoding`\n- Added `new_with_size()` function to ByteStream\n- Add defualt help text to Makefile\n\n## [0.43.0] - 2020-03-15\n\n- Fix minimum version of hyper\n- Fix `PrimitiveDateTime` deprecation error\n- Update to dirs 2.0\n- Bump base64 to 0.12 and hyper-rustls to 0.20\n- Fix `serialize_structs` and `deserialize_structs`\n- Fix JWT serialization in `WebIdentityProvider`\n- Add ability to set local agent prepended to the default User-Agent\n- Fix invalid signature for Route 53 `resource_record_sets` methods\n- Improve `Display` impl for `RusotoError::Unknown`\n- Fix hang in XML deserialization for flattened shapes\n- Remove obsolete `RusotoFuture` and fix docs generation on nightly\n- Fix `credential_process`, again\n- Change non-China S3 domains to `s3.{region}.amazonaws.com`\n\n## [0.43.0-beta.1] - 2020-02-07\n\n- Move to `std::future::Future`, async/.await, and Tokio 0.2\n- Update to botocore 1.14.9\n- Add Discord invite link to README.md and CONTRIBUTING.md\n- Remove unused import\n- Fixed links in AWS-CREDENTIALS.md\n- Fixed SNS API's attributes and value keyword\n- Adding support for web identity provider, which enables IAM roles for Kubernetes service accounts.\n- Add object-safe AwsCredentialsProvider trait as alternative to the existing generic `ProvideAwsCredentials` trait.\n- Introduce `Secret` type to automatically zero-out memory use to stored secret credentials. So far, only used in the new web identity provider.\n- Introduce `Variable` to abstract over certain credential provider input parameters.\n- Encode request payload optionally with Gzip\n- Add Debug trait to generated Clients\n- Add `rusoto_ec2::filter!` macro\n- Improve `InstanceMetadataProvider` to avoid cloning unnecessarily\n- Remove deprecated `Error::description` implementations\n- Add features `serialize_structs` and `deserialize_structs`\n- Implement Clone on various Credential structs.\n- Fix incorrect encoding of Session Token when pre-signing URLs\n- Add IoT Secure Tunneling service\n- Fix Directory Service integration tests\n- Update to time 0.2.x\n\n## [0.42.0] - 2019-11-18\n\n- Use static initializer for AWS profile regex\n- Add QLDB service\n- Add QLDB Session service\n- Update Skeptic tests for Rusoto v0.41\n- Don't decode query string parameters before encoding it. Results in fixing the prefix and marker\nparams for s3 `list_objects` methods\n- Add Textract service\n- Update CloudDirectory API definition to `2017-01-11`\n- Add SecurityHub service\n- Add Transfer service\n- Introducing `rusoto_signature`, a standalone crate for signing HTTP requests.\n- Make static credentials into a credential provider\n- Add anonymous credentials support\n- Don't trim whitepsace when parsing xml payload. Fixes truncating of items with spaces in payloads\nsuch as an S3 key returned in `list_objects_v2`\n- Region deserialization format matches what Region serializers expect: https://github.com/rusoto/rusoto/pull/1544\n- Fixed regression of `x-amz-content-sha256` header not being signed: https://github.com/rusoto/rusoto/pull/1545\n- Allow `rustls` to be used in `rusoto_mock`: https://github.com/rusoto/rusoto/pull/1557\n- Added opt-in ability for service objects to be serialized: https://github.com/rusoto/rusoto/pull/1560\n- Avoid panicking in credential provider when parsing credentials file: https://github.com/rusoto/rusoto/pull/1573\n\n## [0.41.1] - 2019-10-11\n\n- Fixed regression in `rusoto_credential` session token handling: https://github.com/rusoto/rusoto/pull/1528\n\n## [0.41.0] - 2019-10-07\n\n- Add `HttpClient::from_builder`\n- Upgrade to botocore from `1.12.163` to `1.12.230`\n- The types `rusoto_events::{CloudWatchEvents,CloudWatchEventsClient}` were renamed to `rusoto_events::{EventBridge,EventBridgeClient}`\n- Deserialize PostTextResponse correctly by allowing null values in the slots field\n- Fix Profile Config Loading: should ignore comments with '=' chars\n- Add App Mesh service\n- Fix service_crategen to parse operations with multiple static params\n- Refactor S3 integration tests - about a `#[test]` per behavior\n- Add support for non signing clients\n- Add EC2 Instance Connect service\n- Allow deserialization of regions without an endpoint specified\n- Add ApNortheast3 region\n- Add MeSouth1 region\n- Add x-amz-content-sha256 header to signed and canonical headers\n- Added `Eq` and `Hash` implementations on `Region`\n- Fixed parsing of Athena error messages\n- Fix credential_process behavior when using the non-default profile\n- Correctly read session tokens from credential_process\n\n## [0.40.0] - 2019-06-28\n\n- Only emit types used in service during crate generation\n- Updated CloudFront to use latest API version: `2018-11-05`\n- Only emit crate tests section when needed\n- Fix bug with CodePipeline response not containing required fields from AWS\n- Moved API documentation links to docs.rs\n- Decode IAM policy documents automatically\n- Removed `serde_json` crate from services where it was not required\n- Exclude `test_resources` in cargo manifest\n- upgrades botocore version to from `1.12.156` to `1.12.163`\n- (Breaking Change) Fix invalid signatures on presigned URLs by adding a new\n  `should_sha256_sign_payload` argument to `SignedRequest::generate_presigned_url`.\n\n## [0.39.0] - 2019-05-19\n\n- Add Worklink service\n- Add FSX service\n- Fix de/serialization of DynamoDB binary set attribute values\n- Change type for blob values from `Vec<u8>` to `Bytes`\n- Add DocDB service\n- Add License Manager service\n- Add Kafka service\n- Add Chime service\n- Add RDS Data service\n- Add ComprehendMedical service\n- Add Ap-East-1 Region\n- Remove log crate dependency from services\n- Remove decoding of the uri path before encoding it\n- Use http::HeaderMap instead of our custom implementation\n- Update all public crates to Rust 2018 edition\n\n## [0.38.0] - 2019-04-17\n\n- Add `RusotoError` enum as base error type for all services\n- Improve error messages for BufferedHttpResponse in Unknown error variants.\n- Fix hostname derivation for custom Region endpoints\n- Support presigned URLs for multipart uploads to S3\n- Add Us-Gov-East region\n- Fix a bug in SNS CreateTopic and Subscribe\n- Reduced generated xml deserializer logic\n- Move credentials crate to Rust 2018\n- Remove internal test files from published crates for rusoto_credential and rusoto_core\n\n## [0.37.0] - 2019-03-12\n\n- Implement Clone on the various Client types.\n- Upgrade hyper-rustls library\n- Fix duplicated Content-Type header in SageMaker Runtime\n- Switch from `try!` to `?` operator\n- Remove unneeded muts in Glacier codegen\n- Add Eu-North-1 Region\n- Fix bug in SNS publish message action\n- Mock can simulate communications errors\n- Upgrade botocore definitions to [`1.12.100`](https://github.com/boto/botocore/tree/1.12.100)\n- add [amplify](https://docs.aws.amazon.com/cli/latest/reference/amplify/index.html) service\n- add [apigatewaymanagementapi](https://docs.aws.amazon.com/cli/latest/reference/apigatewaymanagementapi/index.html) service\n- add [apigatewayv2](https://docs.aws.amazon.com/cli/latest/reference/apigatewayv2/index.html) service\n- add [ram](https://docs.aws.amazon.com/cli/latest/reference/ram/index.html) service\n- Add [`credential_process`](https://docs.aws.amazon.com/cli/latest/topic/config-vars.html#sourcing-credentials-from-external-processes) support in `~/.aws/config`\n- Add Route53 TXT record quoting helper\n- Fix a malformed SNS Publish API request when it has message attributes\n\n## [0.36.0] - 2018-12-04\n\n- Add Connect service\n- Add MediaTailor support\n- Add ByteStream struct to core\n- Skip serializing blobs when they are `Option::None`\n- Fix typo in `service_crategen` README.md\n- Add Kinesis Video Archived Media service\n- Update regex to version 1\n- Add Appsync service\n- Handle s3 out of order elements\n- Add mediaconvert service\n- Add KinesisVideo support\n- Add a filter that will limit what services to generate\n- Enable passthrough parsing of payload members\n- Add sagemaker-runtime\n- Fix some glacier bugs\n- Add CloudFront unit test\n- Add IoT Data service\n- Add MediaLive service\n- Add ResourceGroups service\n- Add Mobile service\n- Skip serializing blobs when they are Option::None (DynamoDB)\n- Fix import/export endpoint\n- Add MediaPackage service\n- Add IoT Jobs Data\n- Add Kinesis Video Media service\n- Add IoT Analytics\n- Add IoT 1click devices\n- Add Workmail service\n- Add IoT 1Click Projects\n\n## [0.35.0] - 2018-10-31\n\n- Add Cost Explorer\n- Add Performance Insights support\n- Add ServiceDiscovery support\n- Add Sentiment support\n- Add Sagemaker support\n- Add Transcribe service\n- Added Neptune support\n- Add GuardDuty service\n- Add AWS Macie\n- Adds EKS\n- Add AWS Pricing service\n- Add Translate service\n- Add Firewall Management Service (FMS)\n- Add Cloud9 support\n- Add Autoscaling Plans\n- Add MQ service\n- Add `From<Result<T, E>> for RusotoFuture<T, E>` implementation for mocking.\n- Add ACM PCA support\n- rusoto_credential uses Serde derives for credentials instead of hand written code\n- Add MediaStore support\n- Expose raw BufferedHttpResponse on ::Unknown error variants\n- Removed Ceph test for `Luminous`\n- Honor profile region in `Default` implementation of `Region`\n- Fix bug that could not authenticate ARN with colon\n- Fix error parsing for services using boto's `rest-json` protocol published prior to this release . The following service crates were affected.\n  * `apigateway`, `batch`, `clouddirectory`, `cloudsearchdomain`, `cognito-sync`,\n  `efs`, `eks`, `elastictranscoder`, `glacier`, `greengrass`, `guardduty`, `iot`,\n  `lambda`, `lex-models`, `lex-runtime`, `mq`, `polly`, `serverlessrepo`,\n  `workdocs`, `xray`\n\n## [0.34.0] - 2018-09-05\n\n- Add example to Rusoto Logs documentation\n- Add custom dev dependency capability to services crategen\n- Allow replacing OpenSSL with rustls by adding `features = [\"rustls\"], default_features=false` to your Cargo.toml\n- Fix codegen for query types not sending values correctly\n- Bump minimum supported version of Rust to 1.26\n- Make STS provider `Send`\n- Remove unused package `hyper-tls` in credentials crate\n- Send parameters in request body instead of query string for query based services and EC2\n- Allow AWS credentials in environment variables to have a custom prefix\n- Fix bug in presigned URLs for S3\n\n## [0.33.1] - 2018-08-07\n\n- Fix `rusoto_mock` versions available\n\n## [0.33.0] - 2018-07-31\n\n- Remove `impl Display for Region` since it was of little use and confusingly similar to `Region::name()`.\n- More efficiently and correctly remove scheme from `Region::Custom` endpoints\n- Prevent reactor from hanging indefinitely when using the new tokio release\n- Fix deserialization for empty JSON responses\n- Fixed bug in query services where lists had incorrect parent item in request\n- Improve deserializer of XML error responses\n- Adds Serverless Repo service\n- Add Alexa for Business service\n- Add [Secrets Manager](https://docs.aws.amazon.com/secretsmanager/latest/userguide/intro.html) service\n- Support streaming uploads for services like S3\n- Implement `DispatchSignedRequest` and `ProvideAwsCredentials` for `Arc<>` and `Rc<>` wrapped types\n- Changed HttpClient to be generic over hyper::Connect, default HttpClient<C = HttpsConnector<HttpConnector>>, see #1033\n- Derive PartialEq for all request and response types, except when they contain streams\n- Change core and credentials to use Hyper 0.12\n- Add support for alternative prefixes for environment variables.\n\n## [0.32.0] - 2018-03-03\n\n- Convert all services to `futures`-based APIs\n- Show secret keys and tokens as `\"**********\"` in `Debug` output\n- Ensure list of signed headers is correct when not all headers are signed\n- Use ```$AWS_PROFILE``` to obtain default profile name\n- Implement `Default` for `Region`\n- Derive Clone for remaining types (affects CloudFront, Route 53 and S3)\n- Link to service-specific documentation in generated Cargo manifests\n- Change credential expiration for non-temporary credentials to be optional and add support for ```AWS_CREDENTIAL_EXPIRATION``` to EnvironmentProvider\n- Improve ContainerProvider to mimic the behavior of the other SDKs by also considering ```AWS_CONTAINER_AUTHORIZATION_TOKEN``` and ```AWS_CONTAINER_CREDENTIALS_FULL_URI```\n- Implement per-call timeouts for the `DispatchSignedRequest` trait\n- Implement timeouts for `ContainerProvider` and `InstanceMetadataProvider`\n\n## [0.31.0] - 2018-01-21\n\n- Update Rusoto Core ReadMe\n- use correct China-northwest region domain\n- Fix handling of error responses from Ceph (S3)\n- Added integration tests for Ceph and Minio\n- Convert metadata keys to lowercase (only affects third party services, Amazon already converts them)\n- Allow setting both Region name and endpoint via `Region::Custom`\n- Added China-northwest, US-Gov-West & Paris regions\n- Switched crategen from rustfmt to rustfmt-nightly\n- Removed unused AsciiExt imports\n- S3 StreamingBody now has public constructor\n\n## [0.30.0] - 2017-12-02\n\n- Added CloudHSMv2\n- Added ResourceGroupsTaggingApi\n- Added Lex runtime\n- Added Lex Models service\n- S3 StreamingBody now implements Read trait\n- Added Budgets service\n- Send metadata fields to S3\n\n## [0.29.0] - 2017-11-02\n\n- Added CHANGELOG\n- Updated CONTRIBUTING to explain PR process\n- Added Application Autoscaling service\n- Added Athena service\n- Added X-Ray service\n- Updated Credentials crate to use hyper 0.11 (aka the Async IO Update).\n- Added Documentation to Credentials Crate.\n- Make Rusoto Core use HTTP Pools to re-use connections.\n- Fixed Edge Cases in URI Encoding of Rusoto (double query encoding, +'s in query strings).\n- Updated ring dependency\n- Added Cloud Directory service\n- Added CloudSearch Domain service\n- Added GreenGrass service\n- Added Elastic Filesystem service\n- Fix broken links on the STS documentation\n- Use xml::EventWriter to serialize XML payload\n- Added Workdocs service\n- Added Cognito Sync service\n- Added Shield service\n- Added Glue service\n- Added DynamoDB Accelerator\n- Added Discovery service\n- Added CodeStar service\n- Added Migration Hub service\n- Added Marketplace Entitlement service\n\n## [0.28.0] - 2017-08-25\n\n### Added\n- Credentials: accept `aws_security_token` for backwards compatibility\n- Codegen: add `check` command for missing or outdated services\n- API Gateway support\n- Mechanical Turk support\n- Polly support\n- Glacier support\n- Header on files that are generated to guide changes the code generation\n- AWS Batch support\n- Use botocore provided documentation in our crate documentation\n- Credentials crate allows unrecognized fields in credentials profile\n- Route53 now sends request to the right endpoint\n- Route53 integration test\n- Streaming download support for S3\n- Custom region now supported: used for local DynamoDB and API compatible services such as Minio and Ceph\n- Code of Condcut\n\n### Changed\n- Moved root Cargo.toml to root of git project to allow git dependency references\n- Updated botocore to 1.5.75\n- Integration tests now build, but don't run, as part of the CI process\n- Credentials crate got dependency upgrades\n- REST protocols now sends requests with headers and bodies\n\n### Removed\n- Credentials crate no longer retries credential acquiring\n- Type aliases removed.  Example: we no longer use `BucketName` which was an alias for `String`.\n- travis-cargo from TravisCI builds\n\n[Unreleased]: https://github.com/rusoto/rusoto/compare/rusoto-v0.48.0...HEAD\n[0.48.0]: https://github.com/rusoto/rusoto/compare/rusoto-v0.47.0...rusoto-v0.48.0\n[0.47.0]: https://github.com/rusoto/rusoto/compare/rusoto-v0.46.0...rusoto-v0.47.0\n[0.46.0]: https://github.com/rusoto/rusoto/compare/rusoto-v0.45.0...rusoto-v0.46.0\n[0.45.0]: https://github.com/rusoto/rusoto/compare/rusoto-v0.44.0...rusoto-v0.45.0\n[0.44.0]: https://github.com/rusoto/rusoto/compare/rusoto-v0.43.0...rusoto-v0.44.0\n[0.43.0]: https://github.com/rusoto/rusoto/compare/rusoto-v0.43.0-beta.1...rusoto-v0.43.0\n[0.43.0-beta.1]: https://github.com/rusoto/rusoto/compare/rusoto-v0.42.0...rusoto-v0.43.0-beta.1\n[0.42.0]: https://github.com/rusoto/rusoto/compare/credentials-v0.41.1...rusoto-v0.42.0\n[0.41.1]: https://github.com/rusoto/rusoto/compare/rusoto-v0.41.0...credentials-v0.41.1\n[0.41.0]: https://github.com/rusoto/rusoto/compare/rusoto-v0.40.0...rusoto-v0.41.0\n[0.40.0]: https://github.com/rusoto/rusoto/compare/rusoto-v0.39.0...rusoto-v0.40.0\n[0.39.0]: https://github.com/rusoto/rusoto/compare/rusoto-v0.38.0...rusoto-v0.39.0\n[0.38.0]: https://github.com/rusoto/rusoto/compare/rusoto-v0.37.0...rusoto-v0.38.0\n[0.37.0]: https://github.com/rusoto/rusoto/compare/rusoto-v0.36.0...rusoto-v0.37.0\n[0.36.0]: https://github.com/rusoto/rusoto/compare/rusoto-v0.35.0...rusoto-v0.36.0\n[0.35.0]: https://github.com/rusoto/rusoto/compare/rusoto-v0.34.0...rusoto-v0.35.0\n[0.34.0]: https://github.com/rusoto/rusoto/compare/rusoto-v0.33.1...rusoto-v0.34.0\n[0.33.1]: https://github.com/rusoto/rusoto/compare/rusoto-v0.33.0...rusoto-v0.33.1\n[0.33.0]: https://github.com/rusoto/rusoto/compare/rusoto-v0.32.0...rusoto-v0.33.0\n[0.32.0]: https://github.com/rusoto/rusoto/compare/rusoto-v0.31.0...rusoto-v0.32.0\n[0.31.0]: https://github.com/rusoto/rusoto/compare/rusoto-v0.30.0...rusoto-v0.31.0\n[0.30.0]: https://github.com/rusoto/rusoto/compare/rusoto-v0.29.0...rusoto-v0.30.0\n[0.29.0]: https://github.com/rusoto/rusoto/compare/rusoto-v0.28.0...rusoto-v0.29.0\n[0.28.0]: https://github.com/rusoto/rusoto/releases/tag/rusoto-v0.28.0\n"
        },
        {
          "name": "CODE_OF_CONDUCT.md",
          "type": "blob",
          "size": 3.236328125,
          "content": "# Contributor Covenant Code of Conduct\n\n## Our Pledge\n\nIn the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to making participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, gender identity and expression, level of experience, nationality, personal appearance, race, religion, or sexual identity and orientation.\n\n## Our Standards\n\nExamples of behavior that contributes to creating a positive environment include:\n\n* Using welcoming and inclusive language\n* Being respectful of differing viewpoints and experiences\n* Gracefully accepting constructive criticism\n* Focusing on what is best for the community\n* Showing empathy towards other community members\n\nExamples of unacceptable behavior by participants include:\n\n* The use of sexualized language or imagery and unwelcome sexual attention or advances\n* Trolling, insulting/derogatory comments, and personal or political attacks\n* Public or private harassment\n* Publishing others' private information, such as a physical or electronic address, without explicit permission\n* Other conduct which could reasonably be considered inappropriate in a professional setting\n\n## Our Responsibilities\n\nProject maintainers are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response to any instances of unacceptable behavior.\n\nProject maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful.\n\n## Scope\n\nThis Code of Conduct applies both within project spaces and in public spaces when an individual is representing the project or its community. Examples of representing a project or community include using an official project e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event. Representation of a project may be further defined and clarified by project maintainers.\n\n## Enforcement\n\nInstances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting the project team at iweller@amazon.com or matthewkmayer@gmail.com; if necessary, you may also contact opensource-codeofconduct@amazon.com. The project team will review and investigate all complaints, and will respond in a way that it deems appropriate to the circumstances. The project team is obligated to maintain confidentiality with regard to the reporter of an incident. Further details of specific enforcement policies may be posted separately.\n\nProject maintainers who do not follow or enforce the Code of Conduct in good faith may face temporary or permanent repercussions as determined by other members of the project's leadership.\n\n## Attribution\n\nThis Code of Conduct is adapted from the [Contributor Covenant][homepage], version 1.4, available at [http://contributor-covenant.org/version/1/4][version]\n\n[homepage]: http://contributor-covenant.org\n[version]: http://contributor-covenant.org/version/1/4/\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 2.388671875,
          "content": "# Contributing to Rusoto\n\n### General information\n\nAny contribution intentionally submitted for inclusion in the work by you shall be licensed under the MIT license, without any additional terms or conditions.\n\nPull requests (PRs) should follow these guidelines:\n* Include an entry in the [CHANGELOG](CHANGELOG.md).\n* Generated code should be included in the PR.  Putting the codegen changes in a separate commit is preferred.\n* Tests are highly encouraged.\n\nGeneral discussions regarding Rusoto development take place on our [Discord channel][discord-invite].\n\nThe project follows the code of conduct as specified in [CODE_OF_CONDUCT](CODE_OF_CONDUCT.md).\n\n### Setting up the build environment (only needed once)\n\nSee minimum version of Rust required in [README](README.md).\n\nCheck out code from GitHub.\n\nSet up AWS credentials: environment variables (export AWS_ACCESS_KEY_ID and\nAWS_SECRET_ACCESS_KEY), populate the ~/.aws/credentials file, or use an\nIAM instance profile on an EC2 instance.\n\nRusoto codegen depends on botocore.  Update the git submodule via:\n\n``` bash\ncd rusoto\ngit submodule init\ngit submodule update\n```\n\nYou are now ready to build the project with `cargo build`.\nRemember to include the appropriate feature flags for the AWS services you want to use.\nSee [rusoto.org](https://www.rusoto.org/supported-aws-services.html) for a table of available services and their Cargo feature names.\n\n### Building after initial setup\n\nBuild the project with `cargo build`.\n\nIntegration tests can be executed by running `cargo test --features FEATURE`, where FEATURE is one or more space-separated Cargo features to test as defined in `Cargo.toml`.\nEach AWS service has a Cargo feature to enable it.\nThe feature \"all\" can be used to test all supported services.\nThe integration tests will create real AWS resources and you may be charged.\nTo run only the in-crate unit tests, which don't call out to AWS, include the `--lib` option to `cargo test`.\n\nFor more verbose test output, you can run `cargo test --verbose --features FEATURE -- --nocapture`.\n\n### Rust code generation from boto core service definitions:\n\nSee the [README](service_crategen/README.md) in the service_crategen subcrate.\n\n## Clippy\n\nInstructions on [clippy's homepage](https://github.com/Manishearth/rust-clippy) have details on how to install and run.\n\nTo run clippy:\n\n`cargo clippy`\n\n[discord-invite]: https://discordapp.com/invite/WMJ4DWp \"Discord channel invite\"\n"
        },
        {
          "name": "Cargo.toml",
          "type": "blob",
          "size": 7.3974609375,
          "content": "[workspace]\nmembers = [\n    \"mock\",\n    \"rusoto/credential_service_mock\",\n    \"rusoto/core\",\n    \"rusoto/credential\",\n    \"rusoto/signature\",\n    \"rusoto/services/accessanalyzer\",\n    \"rusoto/services/acm\",\n    \"rusoto/services/acm-pca\",\n    \"rusoto/services/alexaforbusiness\",\n    \"rusoto/services/amplify\",\n    \"rusoto/services/apigateway\",\n    \"rusoto/services/apigatewaymanagementapi\",\n    \"rusoto/services/apigatewayv2\",\n    \"rusoto/services/appconfig\",\n    \"rusoto/services/application-autoscaling\",\n    \"rusoto/services/application-insights\",\n    \"rusoto/services/appmesh\",\n    \"rusoto/services/appstream\",\n    \"rusoto/services/appsync\",\n    \"rusoto/services/athena\",\n    \"rusoto/services/autoscaling\",\n    \"rusoto/services/autoscaling-plans\",\n    \"rusoto/services/backup\",\n    \"rusoto/services/batch\",\n    \"rusoto/services/budgets\",\n    \"rusoto/services/ce\",\n    \"rusoto/services/chime\",\n    \"rusoto/services/cloud9\",\n    \"rusoto/services/clouddirectory\",\n    \"rusoto/services/cloudformation\",\n    \"rusoto/services/cloudfront\",\n    \"rusoto/services/cloudhsm\",\n    \"rusoto/services/cloudhsmv2\",\n    \"rusoto/services/cloudsearch\",\n    \"rusoto/services/cloudsearchdomain\",\n    \"rusoto/services/cloudtrail\",\n    \"rusoto/services/cloudwatch\",\n    \"rusoto/services/codebuild\",\n    \"rusoto/services/codecommit\",\n    \"rusoto/services/codedeploy\",\n    \"rusoto/services/codeguru-reviewer\",\n    \"rusoto/services/codeguruprofiler\",\n    \"rusoto/services/codepipeline\",\n    \"rusoto/services/codestar\",\n    \"rusoto/services/codestar-connections\",\n    \"rusoto/services/codestar-notifications\",\n    \"rusoto/services/cognito-identity\",\n    \"rusoto/services/cognito-idp\",\n    \"rusoto/services/cognito-sync\",\n    \"rusoto/services/comprehend\",\n    \"rusoto/services/comprehendmedical\",\n    \"rusoto/services/compute-optimizer\",\n    \"rusoto/services/config\",\n    \"rusoto/services/connect\",\n    \"rusoto/services/connectparticipant\",\n    \"rusoto/services/cur\",\n    \"rusoto/services/dataexchange\",\n    \"rusoto/services/datapipeline\",\n    \"rusoto/services/datasync\",\n    \"rusoto/services/dax\",\n    \"rusoto/services/detective\",\n    \"rusoto/services/devicefarm\",\n    \"rusoto/services/directconnect\",\n    \"rusoto/services/discovery\",\n    \"rusoto/services/dlm\",\n    \"rusoto/services/dms\",\n    \"rusoto/services/docdb\",\n    \"rusoto/services/ds\",\n    \"rusoto/services/dynamodb\",\n    \"rusoto/services/dynamodbstreams\",\n    \"rusoto/services/ebs\",\n    \"rusoto/services/ec2\",\n    \"rusoto/services/ec2-instance-connect\",\n    \"rusoto/services/ecr\",\n    \"rusoto/services/ecs\",\n    \"rusoto/services/efs\",\n    \"rusoto/services/eks\",\n    \"rusoto/services/elastic-inference\",\n    \"rusoto/services/elasticache\",\n    \"rusoto/services/elasticbeanstalk\",\n    \"rusoto/services/elastictranscoder\",\n    \"rusoto/services/elb\",\n    \"rusoto/services/elbv2\",\n    \"rusoto/services/emr\",\n    \"rusoto/services/es\",\n    \"rusoto/services/events\",\n    \"rusoto/services/firehose\",\n    \"rusoto/services/fms\",\n    \"rusoto/services/forecast\",\n    \"rusoto/services/forecastquery\",\n    \"rusoto/services/frauddetector\",\n    \"rusoto/services/fsx\",\n    \"rusoto/services/gamelift\",\n    \"rusoto/services/glacier\",\n    \"rusoto/services/globalaccelerator\",\n    \"rusoto/services/glue\",\n    \"rusoto/services/greengrass\",\n    \"rusoto/services/groundstation\",\n    \"rusoto/services/guardduty\",\n    \"rusoto/services/health\",\n    \"rusoto/services/iam\",\n    \"rusoto/services/imagebuilder\",\n    \"rusoto/services/importexport\",\n    \"rusoto/services/inspector\",\n    \"rusoto/services/iot\",\n    \"rusoto/services/iot-data\",\n    \"rusoto/services/iot-jobs-data\",\n    \"rusoto/services/iot1click-devices\",\n    \"rusoto/services/iot1click-projects\",\n    \"rusoto/services/iotanalytics\",\n    \"rusoto/services/iotevents\",\n    \"rusoto/services/iotevents-data\",\n    \"rusoto/services/iotsecuretunneling\",\n    \"rusoto/services/iotthingsgraph\",\n    \"rusoto/services/kafka\",\n    \"rusoto/services/kendra\",\n    \"rusoto/services/kinesis\",\n    \"rusoto/services/kinesis-video-archived-media\",\n    \"rusoto/services/kinesis-video-media\",\n    \"rusoto/services/kinesis-video-signaling\",\n    \"rusoto/services/kinesisanalytics\",\n    \"rusoto/services/kinesisanalyticsv2\",\n    \"rusoto/services/kinesisvideo\",\n    \"rusoto/services/kms\",\n    \"rusoto/services/lakeformation\",\n    \"rusoto/services/lambda\",\n    \"rusoto/services/lex-models\",\n    \"rusoto/services/lex-runtime\",\n    \"rusoto/services/license-manager\",\n    \"rusoto/services/lightsail\",\n    \"rusoto/services/logs\",\n    \"rusoto/services/machinelearning\",\n    \"rusoto/services/managedblockchain\",\n    \"rusoto/services/marketplace-catalog\",\n    \"rusoto/services/marketplace-entitlement\",\n    \"rusoto/services/marketplacecommerceanalytics\",\n    \"rusoto/services/mediaconnect\",\n    \"rusoto/services/mediaconvert\",\n    \"rusoto/services/medialive\",\n    \"rusoto/services/mediapackage\",\n    \"rusoto/services/mediapackage-vod\",\n    \"rusoto/services/mediastore\",\n    \"rusoto/services/mediatailor\",\n    \"rusoto/services/meteringmarketplace\",\n    \"rusoto/services/mgh\",\n    \"rusoto/services/migrationhub-config\",\n    \"rusoto/services/mq\",\n    \"rusoto/services/mturk\",\n    \"rusoto/services/neptune\",\n    \"rusoto/services/networkmanager\",\n    \"rusoto/services/opsworks\",\n    \"rusoto/services/opsworkscm\",\n    \"rusoto/services/organizations\",\n    \"rusoto/services/outposts\",\n    \"rusoto/services/personalize\",\n    \"rusoto/services/personalize-events\",\n    \"rusoto/services/personalize-runtime\",\n    \"rusoto/services/pi\",\n    \"rusoto/services/pinpoint-email\",\n    \"rusoto/services/pinpoint-sms-voice\",\n    \"rusoto/services/polly\",\n    \"rusoto/services/pricing\",\n    \"rusoto/services/qldb\",\n    \"rusoto/services/qldb-session\",\n    \"rusoto/services/quicksight\",\n    \"rusoto/services/ram\",\n    \"rusoto/services/rds\",\n    \"rusoto/services/rds-data\",\n    \"rusoto/services/redshift\",\n    \"rusoto/services/rekognition\",\n    \"rusoto/services/resource-groups\",\n    \"rusoto/services/resourcegroupstaggingapi\",\n    \"rusoto/services/robomaker\",\n    \"rusoto/services/route53\",\n    \"rusoto/services/route53domains\",\n    \"rusoto/services/route53resolver\",\n    \"rusoto/services/s3\",\n    \"rusoto/services/sagemaker\",\n    \"rusoto/services/sagemaker-a2i-runtime\",\n    \"rusoto/services/sagemaker-runtime\",\n    \"rusoto/services/savingsplans\",\n    \"rusoto/services/schemas\",\n    \"rusoto/services/sdb\",\n    \"rusoto/services/secretsmanager\",\n    \"rusoto/services/securityhub\",\n    \"rusoto/services/serverlessrepo\",\n    \"rusoto/services/service-quotas\",\n    \"rusoto/services/servicecatalog\",\n    \"rusoto/services/servicediscovery\",\n    \"rusoto/services/ses\",\n    \"rusoto/services/sesv2\",\n    \"rusoto/services/shield\",\n    \"rusoto/services/signer\",\n    \"rusoto/services/sms\",\n    \"rusoto/services/sms-voice\",\n    \"rusoto/services/snowball\",\n    \"rusoto/services/sns\",\n    \"rusoto/services/sqs\",\n    \"rusoto/services/ssm\",\n    \"rusoto/services/sso\",\n    \"rusoto/services/sso-oidc\",\n    \"rusoto/services/stepfunctions\",\n    \"rusoto/services/storagegateway\",\n    \"rusoto/services/sts\",\n    \"rusoto/services/support\",\n    \"rusoto/services/swf\",\n    \"rusoto/services/textract\",\n    \"rusoto/services/transcribe\",\n    \"rusoto/services/transfer\",\n    \"rusoto/services/translate\",\n    \"rusoto/services/waf\",\n    \"rusoto/services/waf-regional\",\n    \"rusoto/services/workdocs\",\n    \"rusoto/services/workmail\",\n    \"rusoto/services/workmailmessageflow\",\n    \"rusoto/services/workspaces\",\n    \"rusoto/services/xray\",\n]\n\nexclude = [\n    \"helpers\",\n    \"integration_tests\",\n    \"service_crategen\",\n    \"skeptical\"\n]\n\n[profile.bench]\nopt-level = 3\ndebug = false\ndebug-assertions = false\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.06640625,
          "content": "The MIT License (MIT)\n\nCopyright (c) 2017 Rusoto Project Developers\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "MAINTAINER_GUIDELINES.md",
          "type": "blob",
          "size": 1.171875,
          "content": "## Maintainer Guidelines\n\n### General\n\n1. The `master` branch build should be green. If it's not, it should be a high priority to fix.\n2. Rusoto documentation should work and not be wrong or misleading. This includes https://rusoto.org and the crate docs on https://docs.rs. It doesn't have to be 100% up to date but it should work. `Skeptic` is used to help with this.\n3. Generally prefer fixing bugs over new features.\n\n### Pull request review\n\n1. New service has integration test(s)\n2. All integration tests pass\n3. Code looks sound\n4. Travis/Appveyor builds pass\n5. Rustfmt has been run\n\n### Cutting a release\n\n1. Make a new branch for the release, following the [RELEASING](RELEASING.md) document. ([Example release PR](https://github.com/rusoto/rusoto/pull/883))\n2. Run all integration tests on the PR branch.\n3. After release PR is reviewed and merged, follow instructions in [RELEASING](RELEASING.md).\n\n### Development direction\n\n* Rusoto should be able to be used and developed on Rust's stable channel\n* Rusoto's 1.0 release should have all known AWS related bugs fixed (Ceph and Minio are not required for 1.0) and all services implemented and covered with integration tests (if possible)\n"
        },
        {
          "name": "Makefile",
          "type": "blob",
          "size": 3.259765625,
          "content": "# System Setup\nSHELL = bash\n\n\n.PHONY: help\nhelp:  ## Display this help\n\t@awk 'BEGIN {FS = \":.*##\"; printf \"\\nUsage:\\n  make \\033[36m<target>\\033[0m\\n\"} /^[a-zA-Z_0-9-]+:.*?##/ { printf \"  \\033[36m%-15s\\033[0m %s\\n\", $$1, $$2 } /^##@/ { printf \"\\n\\033[1m%s\\033[0m\\n\", substr($$0, 5) } ' $(MAKEFILE_LIST)\n\nservice_crategen/botocore/.git:\n\tgit submodule update --init --recursive\n\n.PHONY: botocore\nbotocore: service_crategen/botocore/.git\n\n##@ Development\n\n.PHONY: clean\nclean: ## run cargo clean\n\tcargo +$$RUST_VERSION clean\n\n.PHONY: fmt\nfmt: ## run cargo format\n\tcargo +$$RUST_VERSION fmt\n\n.PHONY: generate\ngenerate: botocore ## regenerate all services as described in ./services.json\n\t(cd service_crategen && cargo +$$RUST_VERSION run -- generate -c ./services.json -o ../rusoto/services)\n\n.PHONY: build\nbuild: generate ## build all services after generating them\n\tcargo +$$RUST_VERSION build --features all\n\n.PHONY: docs\ndocs: ## run cargo doc\n\tcargo +$$RUST_VERSION doc --all --no-deps\n\n##@ Testing\n\n.PHONY: unit_test\nunit_test: ## run cargo test (with doctests, can be slow!)\n\tcargo +$$RUST_VERSION test --all\n\n# Doctests can be very slow to compile and run. This option lets us skip those if needed.\n.PHONY: unit_test_no_doctests\nunit_test_no_doctests: ## run cargo test (without doctests)\n\tcargo +$$RUST_VERSION test --all --lib\n\n.PHONY: skeptical\nskeptical: ## run skeptic on mdbook markdown files to verify Rust source code\n\t(cd skeptical && cargo +$$RUST_VERSION test)\n\n.PHONY: integration_test\nintegration_test: ## run integration tests against AWS using your account (charges may incur)\n\t(cd integration_tests && cargo +$$RUST_VERSION test --features all -- --test-threads 1)\n\n.PHONY: check_integration_test\ncheck_integration_test: ## run cargo check on integration tests\n\t(cd integration_tests && cargo +$$RUST_VERSION check --tests --features all)\n\n.PHONY: rustls_unit_test_no_doctests\nrustls_unit_test_no_doctests: ## run unit tests for each service with rustls enabled, without doctests\n\t(cd rusoto/core && cargo +$$RUST_VERSION test --no-default-features --features=rustls --lib)\n\t(cd rusoto/services && ./rustls-unit-test-no-doctests.sh $$RUST_VERSION)\n\n.PHONY: rustls_unit_test\nrustls_unit_test: ## run unit tests for each service with rustls enabled\n\t(cd rusoto/core && cargo +$$RUST_VERSION test --no-default-features --features=rustls)\n\t(cd rusoto/services && ./rustls-unit-test.sh $$RUST_VERSION)\n\n.PHONY: check_service_defintions\ncheck_service_defintions: botocore ## check for missing and outdated services\n\t(cd service_crategen && cargo +$$RUST_VERSION run -- check -c ./services.json)\n\n##@ Performance\n\n.PHONY: time_credentials\ntime_credentials: ## Measure the time to build the credentials crate\n\t(cd rusoto/credential && cargo clean --package rusoto_credential && touch src/lib.rs && time cargo +$$RUST_VERSION build)\n\n.PHONY: bench_s3\nbench_s3: ## run S3 benchmarks\n\t(cd rusoto/services/s3 && cargo +nightly bench)\n\n.PHONY: credential_integration_test\ncredential_integration_test: ## Run credentials integration tests\n\t(cd rusoto/credential_service_mock && ./run-and-test.sh )\n\n.PHONY: serialize_structs_limited_test\nserialize_structs_limited_test:\n\t(cd rusoto/services && ./test-select-features.sh)\n\n.PHONY: serialize_structs_full_test\nserialize_structs_full_test:\n\t(cd rusoto/services && ./test-features.sh)\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 5.3046875,
          "content": "# ![Rusoto](./assets/logo-wide.png)\n\n<a href=\"https://github.com/rusoto/rusoto/actions?query=workflow%3A%22Build+and+test%22\"><img src=\"https://github.com/rusoto/rusoto/workflows/Build%20and%20test/badge.svg\"></a>\n<a href=\"https://docs.rs/rusoto_core\" title=\"API Docs\"><img src=\"https://img.shields.io/badge/API-docs-blue.svg\" alt=\"api-docs-badge\"></img></a>\n<a href=\"https://crates.io/crates/rusoto_core\" title=\"Crates.io\"><img src=\"https://img.shields.io/crates/v/rusoto_core.svg\" alt=\"crates-io\"></img></a>\n<a href=\"#license\" title=\"License: MIT\"><img src=\"https://img.shields.io/badge/license-MIT-blue.svg\" alt=\"license-badge\"></img></a>\n<a href=\"https://deps.rs/repo/github/rusoto/rusoto\" title=\"Dependency Status\"><img src=\"https://deps.rs/repo/github/rusoto/rusoto/status.svg\" alt=\"dependency-status-badge\"></img></a>\n<a href=\"https://discordapp.com/invite/WMJ4DWp\"><img src=\"https://img.shields.io/discord/670751965273391124\"></img></a>\n\n**Rusoto is an AWS SDK for Rust**\n\n---\n\nYou may be looking for:\n\n* [An overview of Rusoto][rusoto-overview]\n* [AWS services supported by Rusoto][supported-aws-services]\n* [API documentation][api-documentation]\n* [Getting help with Rusoto][rusoto-help]\n\n## Maintenance status\n\n⚠️ Rusoto is in **maintenance mode.** ⚠️\n\nThe current maintainers only have the bandwidth to review dependency bumps and\nobvious bugfixes. Our bandwidth for reviewing new features is extremely limited.\n\nWhile you are welcome to submit PRs that implement new features or refactor\nexisting code, they are unlikely to be merged unless we can find more active\nmaintainers.\n\nPlease see [Meta: future of Rusoto (#1651)](https://github.com/rusoto/rusoto/issues/1651)\nfor details.\n\n## Installation\n\nRusoto is available on [crates.io](https://crates.io/crates/rusoto_core).\nTo use Rusoto in your Rust program built with Cargo, add it as a dependency and `rusoto_$SERVICENAME` for any supported AWS service you want to use.\n\nFor example, to include only S3 and SQS:\n\n```toml\n[dependencies]\nrusoto_core = \"0.48.0\"\nrusoto_sqs = \"0.48.0\"\nrusoto_s3 = \"0.48.0\"\n```\n\n## Migration notes\n\nBreaking changes and migration details are documented at [https://rusoto.org/migrations.html](https://rusoto.org/migrations.html).\n\nNote that from v0.43.0 onward, Rusoto uses Rust's `std::future::Future`, and the Tokio 0.2 ecosystem. From v0.46.0 onward, Rusoto uses the Tokio 1.0 ecosystem.\n\n## Usage\n\nRusoto has a crate for each AWS service, containing Rust types for that service's API.\nA full list of these services can be found [here][supported-aws-services].\nAll other public types are reexported to the crate root.\nConsult the rustdoc documentation for full details by running `cargo doc` or visiting the online [documentation](https://docs.rs/rusoto_core) for the latest crates.io release.\n\nA simple example of using Rusoto's DynamoDB API to list the names of all tables in a database:\n\n```rust,no_run\nuse rusoto_core::Region;\nuse rusoto_dynamodb::{DynamoDb, DynamoDbClient, ListTablesInput};\n\n#[tokio::main]\nasync fn main() {\n    let client = DynamoDbClient::new(Region::UsEast1);\n    let list_tables_input: ListTablesInput = Default::default();\n\n    match client.list_tables(list_tables_input).await {\n        Ok(output) => match output.table_names {\n            Some(table_name_list) => {\n                println!(\"Tables in database:\");\n\n                for table_name in table_name_list {\n                    println!(\"{}\", table_name);\n                }\n            }\n            None => println!(\"No tables in database!\"),\n        },\n        Err(error) => {\n            println!(\"Error: {:?}\", error);\n        }\n    }\n}\n```\n\n### Credentials\n\nFor more information on Rusoto's use of AWS credentials such as priority and refreshing, see [AWS Credentials](AWS-CREDENTIALS.md).\n\n## Semantic versioning\n\nRusoto complies with [semantic versioning 2.0.0](http://semver.org/).\nUntil reaching 1.0.0 the API is to be considered unstable.\nSee [Cargo.toml](Cargo.toml) or [rusoto on crates.io](https://crates.io/crates/rusoto_core) for current version.\n\n## Releases\n\nInformation on release schedules and procedures are in [RELEASING](RELEASING.md).\n\n## Contributing\n\nDiscussions take place on the [Rusoto Discord channel][discord-invite].\n\nSee [CONTRIBUTING](CONTRIBUTING.md) for more information.\n\n## Supported OSs, Rust versions and non-AWS projects\n\nLinux, macOS and Windows are supported and tested via [GitHub actions](https://github.com/rusoto/rusoto/actions?query=workflow%3A%22Build+and+test%22).\n\nRust stable, beta and nightly are supported.\n\nRusoto's primary aim is to be used with AWS. Other projects that provide AWS-like APIs, such as Ceph, Minio, Yandex Object Storage, etc... are not a focus at this time. PRs to fix issues with Rusoto and AWS-like APIs are welcome but generally won't be created by Rusoto maintainers.\n\n## License\n\nRusoto is distributed under the terms of the MIT license.\n\nSee [LICENSE][license] for details.\n\n[api-documentation]: https://docs.rs/rusoto_core \"API documentation\"\n[license]: https://github.com/rusoto/rusoto/blob/master/LICENSE \"MIT License\"\n[rusoto-help]: https://www.rusoto.org/help.html \"Getting help with Rusoto\"\n[rusoto-overview]: https://www.rusoto.org/ \"Rusoto overview\"\n[supported-aws-services]: https://www.rusoto.org/supported-aws-services.html \"List of AWS services supported by Rusoto\"\n[discord-invite]: https://discordapp.com/invite/WMJ4DWp \"Discord channel invite\"\n"
        },
        {
          "name": "RELEASING.md",
          "type": "blob",
          "size": 3.1708984375,
          "content": "## Guidelines\n\n1. Rusoto [has a CHANGELOG](CHANGELOG.md) to track what's in releases.\n2. Releases are tracked [in GitHub](https://github.com/rusoto/rusoto/releases).\n\nBefore hitting 1.0, the public API has no backwards compatibility guaranteed.\n\nAfter 1.0, the public API will be stable for the 1.0 releases. If we need to break the public API, Rusoto 2.0 will be started. Patches will be back ported to the 1.x branch.\n\n## Release trains\n\nFor pre-1.0.0:\n\n* Targeting one release a month for minor versions.\n* Regression bug fixes will be released ASAP on best effort for maintainers.  For example, a regression in 0.9.0 means 0.9.1 is released ASAP instead of waiting for the next release train.\n\n## Release procedure for Rusoto\n\n### Semantic versioning\n\nRusoto uses [semantic versioning 2.0.0](http://semver.org/).\n\n### Publishing walkthrough:\n\n1. Ensure all PRs included in the release are reflected in [the CHANGELOG](https://github.com/rusoto/rusoto/blob/master/CHANGELOG.md). If in doubt, add an entry so it's recorded. Can be a separate PR or part of the one below.\n2. Make a pull request that bumps version numbers for `rusoto_core`, `rusoto_credential`, `rusoto_signature` and `rusoto_mock`.  Service versions are in the `services.json` file in the codegen project. Otherwise they are in the `Cargo.toml` files for each project. Make sure the root Rusoto README example gets updated with the new version. Also verify all uses of `rusoto_credential` get updated, as they often use `0.42` instead of `0.42.0` and can be missed while using `grep`.\n3. Run integration tests on the release branch: `make integration_test`.\n4. Merge release PR. See below for [release checklist](https://github.com/rusoto/rusoto/blob/update-releasing-doc/RELEASING.md#publishing-pr-checklist).\n5. Publish new version of `rusoto_credential`.\n6. Publish new version of `rusoto_signature`.\n7. Publish new version of `rusoto_core`.\n8. Publish new version of `rusoto_mock`.\n9. Run `publish-services.sh` in the `rusoto/services` dir. *Warning*: takes >4 hours on a low end Macbook. The script can be run again if an issue comes up without problems - crates.io prevents republishing.\n10. Tag master branch with the new version.  Example: `git tag -a rusoto-v0.41.0 -m \"Rusoto 0.41.0 release.\"` then `git push --tags origin`.\n11. Update the `skeptical` package to use the newly published version of Rusoto.\n\n### Publishing PR checklist\n\n```text\nRelease checklist:\n\n- [ ] run integration tests on this branch\n- [ ] merge this PR\n- [ ] run integration tests on master\n- [ ] publish new crates\n- [ ] tag new releases\n```\n\n### Git tags\n\nDue to multiple crates being in the repo, releases for each crate will be in the format `crate-vmajor.minor.patch`. Rusoto core, service crates, credentials and `rusoto_mock` will all have the same versions for a new release:\n\nExamples:\n\n* `rusoto-v0.42.0`\n* `credentials-v0.42.0`\n* `signature-v0.42.0`\n* `mock-v0.42.0`\n\nWhen bug fixes for a crate are published, all crates get a new release.\n\n### Release notes\n\nAdd a list of user-facing changes to a new release for the tagged version on GitHub: https://github.com/rusoto/rusoto/releases\n\n#### Mdbook docs\n\nSee [the Rusoto mdbook project](https://github.com/rusoto/rusoto.github.io).\n"
        },
        {
          "name": "assets",
          "type": "tree",
          "content": null
        },
        {
          "name": "ci",
          "type": "tree",
          "content": null
        },
        {
          "name": "clippy.toml",
          "type": "blob",
          "size": 0.2294921875,
          "content": "doc-valid-idents = [\n    \"CloudHSM\",\n    \"CloudTrail\",\n    \"CloudWatch\",\n    \"CodeCommit\",\n    \"CodeDeploy\",\n    \"CodePipeline\",\n    \"DynamoDB\",\n    \"IoT\",\n    \"MapReduce\",\n    \"OpsWorks\",\n    \"WorkSpaces\",\n    \"OpenID\",\n    \"OAuth\"\n]\n"
        },
        {
          "name": "integration_tests",
          "type": "tree",
          "content": null
        },
        {
          "name": "mock",
          "type": "tree",
          "content": null
        },
        {
          "name": "rusoto",
          "type": "tree",
          "content": null
        },
        {
          "name": "service_crategen",
          "type": "tree",
          "content": null
        },
        {
          "name": "skeptical",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}