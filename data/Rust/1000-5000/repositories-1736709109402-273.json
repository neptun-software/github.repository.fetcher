{
  "metadata": {
    "timestamp": 1736709109402,
    "page": 273,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjI4MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "imgui-rs/imgui-rs",
      "stars": 2720,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".cargo",
          "type": "tree",
          "content": null
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.0361328125,
          "content": "*~\n*.swp\ntarget\nCargo.lock\nimgui.ini\n"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 47.01953125,
          "content": "# Changelog\n\n## [0.13.0] - Unreleased\n\n### Added\n\n- Bindings for `Key::F12..=Key::F24`, `Key::AppBack`, and `Key::AppForward`.\n- `MouseSource` enumeration which describes from what kind of device a mouse event originated.\n- `Ui::text_link` and `Ui::text_link_open_url` have been added, for working with hyperlinks.\n- Added support for `ChildFlags` for `ChildWindow`.\n- `Ui::separator_with_text`, which is like a `Ui::separator` but with text input.\n- `ItemFlags` to be used with `Ui::push_item_flags`. See note in `Deprecated` for more on that.\n- New style parameters have been added. Note especially `Style::hover_flags_for_tooltip_mouse` and\n  `Style::hover_flags_for_tooltip_nav` which describe the default flags when hovering items.\n- `Style::default`, `StyleColor::dark_colors`, `StyleColor::light_colors`, and `StyleColor::classic_colors`\n  have been added. Note though that `Style::use_x_colors` is still present, as it avoids taking up\n  a lot of stack space like the `StyleColor`s do.\n\n### Changed\n\n- Keys now communicate with `imgui` in a far simpler manner -- rather than going through\n  a complex keymap, they instead simply notate if they are or are not down to `imgui` directly.\n  Multiple functions, such as `Ui::key_index`, `Ui::is_key_index_down`, `Ui::is_key_index_pressed`, `Ui::is_key_index_pressed_no_repeat`, and `Ui::key_index_pressed_amount` were removed. Use the corresponding non-`index` version.\n- The default `oversample_h` on the `FontConfig` has changed to 2 instead of 3.\n- `SelectableFlags::DONT_CLOSE_POPUPS` has been renamed to `SelectableFlags::NO_AUTO_CLOSE_POPUPS`\n- `SelectableFlags::ALLOW_ITEM_OVERLAP` has been renamed to `SelectableFlags::ALLOW_OVERLAP`.\n- `TreeNodeFlags::ALLOW_ITEM_OVERLAP` has been renamed to `TreeNodeFlags::ALLOW_OVERLAP`.\n- `DragDropFlags::SOURCE_AUTO_EXPIRE_PAYLOAD` has been renamed to `DragDropFlags::PAYLOAD_AUTO_EXPIRE`.\n- `Ui::begin_tooltip` now returns an `Option`, as sometimes tooltips fail to begin.\n- `StyleColor::TabActive` has been renamed to `StyleColor::TabSelected`.\n- `StyleColor::TabActive` has been renamed to `StyleColor::TabSelected`.\n- `StyleColor::TabUnfocused` has been renamed to `StyleColor::TabDimmed`.\n- `StyleColor::TabUnfocusedActive` has been renamed to `StyleColor::TabDimmedSelected`.\n- `ItemHoveredFlags` has been renamed to `HoveredFlags`.\n- `Ui::set_item_allow_overlap` has been replaced with `Ui::set_next_item_allow_overlap`:\n  Instead of calling `Ui::set_item_allow_overlap` _after_ calling an item, call `Ui::set_next_item_allow_overlap`\n  before calling the item.\n\n### Fixed\n\n- Fixed null pointers in zero-sized slices - [PR #779](https://github.com/imgui-rs/imgui-rs/pull/779)\n- Fixed `NewFrame` doc alias typo - [PR #791](https://github.com/imgui-rs/imgui-rs/pull/791)\n\n### Deprecated\n\n- `ChildWindow::always_use_window_padding` and `ChildWindow::borders` have both been deprecated\n  in favor of using the new `ChildWindow::child_flags` API.\n- `Ui::push_allow_keyboard_focus` and `Ui::push_button_repeat` have been deprecated in favor\n  of using the new `Ui::push_item_flag` instead. This function itself was deprecated in the\n  past, but Dear ImGui has changed directions and it will now be used going forward instead\n  of many individual methods.\n\n### Removed\n\n- `GetWindowContentRegionMax`, `GetWindowContentRegionMin`, `GetContentRegionMax` --\n  see [this issue](https://github.com/ocornut/imgui/issues/7838) for more information.\n- `WindowFlags::ALWAYS_USE_WINDOW_PADDING` was removed, as this only pertained to `ChildWindow`,\n  which now has a dedicated API for it (see in the `Added` section).\n\n## [0.12.0] - 2024-05-05\n\n- Updated many dependencies - in particular the new winit release is a bit change.\n  - winit to 0.29 - [PR #754](https://github.com/imgui-rs/imgui-rs/pull/754)\n  - glium to 0.34 and glow to 0.13 - [PR #774](https://github.com/imgui-rs/imgui-rs/pull/774)\n  - memset to 0.9 - [PR #726](https://github.com/imgui-rs/imgui-rs/pull/726)\n- Fix some unsaftey issue in the handling of text - [PR #746](https://github.com/imgui-rs/imgui-rs/pull/746)\n- Added `Io::add_key_analog_event` for supporting analog key events such as gamepad sticks - [PR #728](https://github.com/imgui-rs/imgui-rs/pull/728)\n- Added `begin_popup_context_*` methods - [PR #738](https://github.com/imgui-rs/imgui-rs/pull/738)\n- Use correct alpha blending function ([problem described here](https://github.com/imgui-rs/imgui-rs/issues/733) - [PR #756](https://github.com/imgui-rs/imgui-rs/pull/756)\n- Minimum supported version of Rust (MSRV) is now 1.70 - [PR #747](https://github.com/imgui-rs/imgui-rs/pull/747)\n\n## [0.11.0] - 2023-04-05\n\n- Added API to add callbacks to draw list for advanced custom drawing - [PR#702](https://github.com/imgui-rs/imgui-rs/pull/702)\n- Added `OwnedDrawData` API for usage like multithreaded renderers - [PR#721](https://github.com/imgui-rs/imgui-rs/pull/721)\n- MSRV bumped to 1.64 (will likely still work in 1.60 with pinning of some indirect dependencies) - [PR#718](https://github.com/imgui-rs/imgui-rs/pull/718)\n- Examples now use `copypasta` crate for clipboard handling, as it is more maintained - [PR#715](https://github.com/imgui-rs/imgui-rs/pull/715)\n- Update glow to 0.12 (from v0.10)- [PR#711](https://github.com/imgui-rs/imgui-rs/pull/711) (and also [PR#712](https://github.com/imgui-rs/imgui-rs/pull/712))\n- Fixed handling of modifiers keys - [PR#710](https://github.com/imgui-rs/imgui-rs/pull/710)\n- There is a new \"viewport\" renderer which uses the docking branch's multi-viewport handling! - [PR#619](https://github.com/imgui-rs/imgui-rs/pull/619)\n\n## [0.10.0] - 2023-01-16\n\n- Breaking: Removed `im_str!` macro - deprecated since v0.8.\n\n  `ui.button(im_str!(\"Example\"))` just becomes `ui.button(\"Example\")` and `ui.button(&im_str!(\"My age is {}\", 100))` becomes `ui.button!(format!(\"My age is {}\", 100))`\n\n- Breaking: Updated to Dear ImGui 1.89.2.\n\n  This introduces some breaking changes like the `imgui::Key` now contains a full set of keys (previously it was a small subset of to cover copy/paste/undo)\n\n  Also note `Key::KeyPadEnter` was renamed to `KeypadEnter`\n\n- freetype feature can now locate required libraries either via `pkg-config` or `vcpkg`\n\n- Breaking (partially): `ImageButton::new` is now deprecated, replaced by `ui.image_button_config(...)`.\n\n  The old `new` method should be backwards-compatible in most common situations. Exception is if the `ImageButton` builder struct was explicitly specified, say in a method like `fn configure_my_button(button: &mut imgui::ImageButton)` (in which case either change `ImageButton` to `ImageButtonDeprecated`, or update to the new constructor)\n\n- Breaking: `Key`, `StyleColor`, and `StyleVar` enums are now marked [as non-exhaustive](https://doc.rust-lang.org/reference/attributes/type_system.html#the-non_exhaustive-attribute).\n\n- Updated `imgui-winit-support` and `imgui-sdl2-support` to use new \"event based IO\" (detailed in the Dear ImGui 1.87 release notes, but basically it aims to improve behaviour at low frame rates). Existing custom backends should work without changes, but are advised to update to the new API.\n\n- Accept `usize` and `isize` for parameters which use `DataTypeKind` (such as `Ui::input_scalar`). This treats them as `u64`/`i64` (or `u32`/`i32`) as appropriate\n\n- The `examples` directories have been reorganized slightly.\n\n  There is now an example in `imgui-glium-renderer` showing basic usage, consistent with the glow.\n\n## [0.9.0] - 2022-11-30\n\n- MSRV is now **1.57**. We soft-updated to this to Rust 1.54 in the v0.8.0 release (with a feature `min-const-generics`), which has now been removed (and as such, we resume having no default features). Rust 1.56 is required for the Rust 2021 edition, and 1.57 is required by some dependencies\n\n- Upgraded from Dear ImGui 1.84.2 to 1.86. See [the 1.85](https://github.com/ocornut/imgui/releases/tag/v1.85) and [the 1.86](https://github.com/ocornut/imgui/releases/tag/v1.86) release notes\n\n- Upgraded winit version to `v0.27` for `imgu-winit-support`\n\n- The `imgui-winit-support` and `imgui-glow-renderer` re-export `winit` and `glow` respectively to make setup easier for simple projects. [PR #676](https://github.com/imgui-rs/imgui-rs/pull/676)\n\n- BREAKING: Removed `push_style_colors` and `push_style_vars`. Instead, use `push_style_color` in a loop. This was deprecated in `0.7.0` and should have been removed in `0.8.0`. This also removes their associated tokens.\n\n- BREAKING: Ui now does not have a lifetime associated with it, but is only ever given to users in the form of `&mut Ui`. Additionally, the `render` function has been moved to the `Context` instead of `Ui`.\n\n- BREAKING: `SharedFontAtlas` now hides an `Rc` within its wrapper -- this simplifies the codebase and more accurately reflects how we expect `SharedFontAtlas` to be used (ie, you're probably going to set it up once, and then give it around, rather than constantly edit it). `SharedFontAtlas` users, if this change is very bad for you, please let us know with issues!\n\n- BREAKING: `Id` is now a simpler facade, but requires the `Ui` struct to generate. `push_id`, equally, has been split into multiple functions for simplicity. New example `imgui-examples/examples/id_wrangling.rs` shows some of the `push_id` usage\n\n- Added `imgui-sdl2-support` to provide a simple ImGui platform wrapper. Please give it a try! Thank you to @NightShade256 for [implementing this here](https://github.com/imgui-rs/imgui-rs/pull/541)\n\n- BREAKING: We now only support `glium 0.30`. We're in a difficult position supporting arbitrary `glium` versions in our renderer, since `glium` is only in a semi-maintained state. `glium` users, please get in contact in issues to let us know what will work best for your needs!\n\n- Added `InputScalar` and `InputScalarN`. These are the core Input modules that Dear ImGui uses, and ultimately what `InputFloat` and `InputInt` turn into. See deprecation of `InputFloat` and `InputInt` as a result. Thank you to @EmbersArc for [implementing this here](https://github.com/imgui-rs/imgui-rs/pull/544).\n\n- BREAKING: `ui.input_int` and `ui.input_float` now return `InputScalar<'ui, 'l, f32/i32>`, instead of `InputFloat`/`InputInt`. This struct has all of the same flags as `InputFloat` and `InputInt` did.\n\n- DEPRECATED: `InputFloat` and `InputInt` have been deprecated. `ui.input_float` and `ui.input_int` are _not_, however, and instead will just call `input_scalar` as appropriate. Therefore, please switch your code to `ui.input_float` or `ui.input_int`.\n\n- Added `add_polyline` method to `DrawListMut`, which binds to Dear ImGui's `AddPolyline` and `AddConvexPolyFilled`\n\n- BREAKING: The following structs have had their `new` method changed and deprecated; they now also take `ui` in their `new`, but you should create them on the `Ui` struct instead.\n\n  - `Window` should be made with `ui.window` - e.g `ui.window(\"My Window\").build(|| { ui.text(\"Contents\") });`\n  - `ChildWindow` should be made with `ui.child_window`\n  - `MenuItem` should be made with `ui.menu_item` or `ui.menu_item_config`.\n  - `DragDropSource` and `DragDropTarget` should be made with `ui.drag_drop_source_config` or `ui.drag_drop_target`. Both of these methods, and the DragDrop API in general, are likely to change.\n\n- Added `docking` feature which builds against the upstream docking branch. Only basic API is exposed currently, just enough to enable the docking `imgui_context.io_mut().config_flags |= imgui::ConfigFlags::DOCKING_ENABLE;` - a safe API for programtically docking windows and so on will be added later (until then the internal docking API can be accessed, `imgui::sys::igDockBuilderDockWindow` and so on)\n\n- Fixed dpi related issues when not in `HiDpiMode::Default` mode. The wrong scale factor was used when converting winit physical size to logical size, causing the imgui display size to be incorrect.\n\n- Fixed creation of `.crate` (published to crates.io) so required files for freetype feature are included\n\n- Added binding to TextFilter API. [PR #658](https://github.com/imgui-rs/imgui-rs/pull/658)\n\n## [0.8.0] - 2021-09-17\n\nWelcome to the `0.8.0` update. This is one of the largest updates imgui-rs has ever seen; it will generate errors in a `0.7` project, but hopefully it should be both quick to fix, and enjoyable to update. See our [release page](https://github.com/imgui-rs/imgui-rs/releases/tag/v0.8.0) for more information and a list of contributors to this cycle. Thank you to everyone who uses `imgui-rs`, files issues, and spend their time and effort to PR new changes into the codebase. Because of all that effort, this is by far the best `imgui-rs` has looked!\n\n- **Removed ImStr and ImString from the API.** Currently `im_str!` is deprecated and **will be removed in 0.9.0**. To change your code:\n\n  - If you were just wrapping a string literal, like `im_str!(\"button\")`, just use `\"button\"`. (Help: the regex `im_str!\\(\"((?:(?=(\\\\?))\\2.)*?)\"\\)`, replacing matches with `\"$1\"`, can get the majority of these quickly.);\n  - If you were formatting, like `&im_str!(\"My age is {}\", 100)`, you can now just use format like `format!(\"My age is {}, 100)`. Notice that due to the trait bounds, you can pass the string in directly too.\n\n- BREAKING: Most tokens through the repository (eg. `WindowToken`, `TabBarToken`, `FontStackToken`, etc) now allow for permissive dropping -- i.e, you don't need to actually call the `.end()` method on them anymore. In exchange, these tokens have taken on a lifetime, which allows them to be safe. This could make some patterns impossible. Please file an issue if this causes a problem.\n\n  - `end()` no longer takes `Ui`. This is a breaking change, but hopefully should be trivial (and perhaps nice) for users to fix. Simply delete the argument, or add a `_` before the token's binding name and allow it to be dropped on its own. In our code, we tend to write these now like:\n\n```rs\nif let Some(_t) = ui.begin_popup(\"example\") {\n  // your code here\n}\n```\n\n- BREAKING: Created `with_x` variants for most functions which previously took multiple parameters where some had default arguments in the C++. This makes calling most functions simpler and more similar to the C++.\n\n  - The most likely breaking changes users will see is `button` and `same_line` now take one fewer parameter -- if you were calling `button` with `[0.0, 0.0]`, simply delete that -- otherwise, call `button_with_size`. Similarly, for `same_line`, if you were passing in `0.0.` simply delete that argument. Otherwise, call `same_line_with_pos`.\n\n- ADDED: support for the `tables` API which was added in dear imgui `1.80`. We currently have this _feature gated_ behind `tables-api`. You should feel safe to use this in stable production, but be aware of two things:\n\n  1. The tables API is marked as \"beta\" meaning that it may change with fewer stability promises. This is unlikely and it seems fairly settled.\n  2. There are a few cases where the tables API will segfault by dereferencing a `NULL` where it should instead `ASSERT` and crash. This is simply annoying because you won't get a stacktrace. [See here for more info on that.](https://github.com/imgui-rs/imgui-rs/issues/524). If this is fixed upstream, we will issue a patch.\n\n- ADDED: an `imgui-glow-renderer` which targets `glow 0.10`. Before release, this will be updated to target current `0.11` glow when further features are added. Thank you to @jmaargh for the work [implementing this here](https://github.com/imgui-rs/imgui-rs/pull/495)!\n\n- UPGRADED: from v1.80 to [Dear ImGui v1.84.2](https://github.com/ocornut/imgui/releases/tag/v1.84.2) See the [Dear ImGui v1.84](https://github.com/ocornut/imgui/releases/tag/v1.84) release notes for more information. Thank you to @dbr for doing the work (twice actually) of [upgrading the repository](https://github.com/imgui-rs/imgui-rs/pull/519).\n\n- BREAKING: Reworked how callbacks on `InputText` and `InputTextMultiline` work.\n\n  - REMOVED `.callback_name()` methods in favor of one method: `.callback(FLAGS, CallbackStruct)`.\n  - Wrapped callback kinds into their own enums, `InputTextCallback` and `InputTextCallbackMultiline`.\n  - Created a trait, `InputTextCallbackHandler`.\n  - To see how to create an InputText callback, see `examples/text_callback.rs`.\n  - Finally, please note that editing an `&mut String` which contains `\\0` within it will produce _surprising_ truncation within ImGui. If you need to edit such a string, please pre-process it.\n\n- ADDED: `begin_disable` and `begin_enable` methods. These add (finally) support for disabling _any_ widget. Thank you to @dbr for [implementing this here](https://github.com/imgui-rs/imgui-rs/pull/519).\n\n- BREAKING: MSRV is now **1.54**. This is gives us access to min-const-generics, which we use in a few places, but will gradually use more. Because this is the first time we've bumped MSRV intentionally, we have added a new feature `min-const-generics`, which is _enabled by default_. If you are pre-1.54, you can hang onto this update by disabling that feature. In our next update, this feature will be removed and we will commit to our MSRVs going forward. Thank you to @dbr for changing our CI infrastructure to support better MSRVs [here](https://github.com/imgui-rs/imgui-rs/pull/512).\n\n- BREAKING: Changed default version of Winit in `imgui-winit-support` to `winit 0.25`. Thank you to @repi [for implementing this here](https://github.com/imgui-rs/imgui-rs/pull/485).\n\n  - Removed automatically adding default features for `imgui-winit-support`\n    with the exception of the current default winit feature/dep version. If you want to not have the default features of winit with 0.25, set `default-features = false` and add `winit-25` as a normal feature. Thank you to @dzil123 for the work [implementing this here](https://github.com/imgui-rs/imgui-rs/pull/477)!\n\n- ADDED: Support for the freetype font rasterizer. Enabled by the non-default `freetype` feature, e.g `imgui = {version = \"...\", features=[\"freetype\"]})`\n  Thank you to @dbr for this work [implementing this here](https://github.com/imgui-rs/imgui-rs/pull/496).\n\n- ADDED: `doc alias` support throughout the repository. You can now, [inside the docs](https://docs.rs/imgui), search for `imgui-rs` functions by their `Dear ImGui` C++ names. For example, searching for `InputText` will pull up `Ui::input_text`. This was quite a lot of documentation and effort, so thank you to @toyboot4e [for implementing this here](https://github.com/imgui-rs/imgui-rs/pull/458).\n\n- ADDED: text hinting into `InputText`. Thank you to @lwiklendt [for implementing this here](https://github.com/imgui-rs/imgui-rs/pull/449).\n\n- BREAKING: Reworked `.range` calls on `Slider`, `VerticalSlider`, and `Drag` to simply take two min and max values, and requires that they are provided in the constructor.\n\n  - To update without changing behavior, use the range `T::MIN` and `T::MAX` for the given numerical type (such as `i8::MIN` and `i8::MAX`).\n  - Using `.range` is still maintained for simplicity, but will likely be deprecated in 0.9 and removed in 0.10!\n\n- `DrawListMut` has new methods to draw images\n\n  - The methods are `add_image`, `add_image_quad`, and `add_image_rounded`. The `imgui-examples/examples/custom_textures.rs` has been updated to show their usage.\n  - Additionally the `imgui::draw_list` module is now public, which contains the various draw list objects. While the `add_*` methods are preferred, `imgui::draw_list::Circle::new(&draw_list_mut, ...).build()` is equivalent\n  - Finally, we have relaxed the limits around having multiple draw lists such that you can have multiple mutable draw lists of different kinds (ie, a `foreground` and a `background` at the same time.).\n  - Thank you to @dbr for [implementing these changes](https://github.com/imgui-rs/imgui-rs/pull/445).\n\n- ADDED: the `ButtonFlags` which previously prevented `invisible_button` from being usable. Thank you to @dbr for [implementing this change here](https://github.com/imgui-rs/imgui-rs/pull/509).\n\n- BREAKING: `PopupModal`'s `new` was reworked so that it didn't take `Ui` until `build` was called. This is a breaking change if you were invoking it directly. Simply move your `ui` call to `build` or `begin`.\n\n- BREAKING: Restored methods to access keyboard based on backend-defined keyboard map indexes. These allow access to most keys, not just those defined in the small subset of `imgui::Keys` (note the available keys may be expanded in future by [imgui PR #2625](https://github.com/ocornut/imgui/pull/2625))\n\n  - The new methods on `imgui::Ui` are `is_key_index_down`, `is_key_index_pressed`, `is_key_index_pressed_no_repeat`, `is_key_index_released`, `is_key_index_released`\n  - For example `ui.is_key_released(imgui::Key::A)` is same as `ui.is_key_index_released(winit::events::VirtualKeyCode::A as i32)` when using the winit backend\n\n- BREAKING: Modifies `build` style methods to allow the provide closure to return a value. The build call will then return Some(value) if the closure is called, and None if it isn't.\n\n  - The most likely breaking changes users will see is that they will need to add semicolons after calling `build`, because these function no longer return `()`.\n  - Thank you to @AngelOfSol for [implementing this here](https://github.com/imgui-rs/imgui-rs/pull/468).\n\n- BREAKING: Removed `imgui::legacy` which contained the old style of flags. The remaining flags in `imgui::legacy` have been updated to be consistent with other flags in the project.\n\n  - `imgui::legacy::ImGuiDragDropFlags` were accidentally not cleared when they were remade in `drag_drop.rs` in v0.7.0.\n  - `imgui::legacy::ImGuiInputTextFlags` is now `imgui::input_widgets::InputTextFlags`\n  - `imgui::legacy::ImGuiTreeNodeFlags` is now `imgui::widget::tree::TreeNodeFlags`\n  - `imgui::legacy::ImDrawListFlags` is now `imgui::draw_list::DrawListFlags`\n\n- Full (32-bit) unicode support is enabled in Dear Imgui (e.g. `-DIMGUI_USE_WCHAR32` is enabled now). Previously UTF-16 was used internally.\n\n  - BREAKING: Some parts of the font atlas code now use `char` (or `u32`) instead of `u16` to reflect this.\n    - Note: `u32` is used over `char` in some situations, such as when surrogates are allowed\n  - BREAKING (sorta): Dear Imgui now will use 32 bits for character data internally. This impacts the ABI, including sizes of structs and such, and can break some low level or advanced use cases:\n    - If you're linking against extensions or plugins to Dear Imgui not written in Rust, you need to ensure it is built using `-DIMGUI_USE_WCHAR32`.\n      - However, if the `DEP_IMGUI_DEFINE_` vars are [used properly](https://github.com/4bb4/implot-rs/blob/f2a4c6a3d8919ec3438631873ce6a9f94135089c/implot-sys/build.rs#L37-L45), this is non-breaking.\n    - If you're using `features=\"wasm\"` to \"link\" against emscripten-compiled Dear Imgui, you need to ensure you use `-DIMGUI_USE_WCHAR32` when compile the C and C++ code.\n      - If you're using `DEP_IMGUI_DEFINE_`s for this already, then no change is needed.\n    - If you're using `.cargo/config` to apply a build script override and link against a prebuilt `Dear Imgui` (or something else along these lines), you need to ensure you link with a version that was built using `-DIMGUI_USE_WCHAR32`.\n\n## [0.7.0] - 2021-02-04\n\n- Upgrade to [Dear ImGui v1.80](https://github.com/ocornut/imgui/releases/tag/v1.80). (Note that the new table functionality is not yet supported, however)\n\n- `Ui::key_index()` is now called internally when needed, and the various `is_key_foo` now take a `Key` directly: <https://github.com/imgui-rs/imgui-rs/pull/416>\n\n  - `is_key_down`, `is_key_pressed`, `is_key_released` and `key_pressed_amount` now take a `Key` instead of `u32` (breaking).\n  - `key_index` is no longer public (breaking). If you need access to the key map, it can be accessed as `ui.io().key_map[key]` (If you need to do this, file a bug, since I'm open to exposing this if there's actually a use case).\n\n- `winit` 0.23/0.24 handling has been (hopefully) fixed: <https://github.com/imgui-rs/imgui-rs/pull/420> (breaking, see also <https://github.com/imgui-rs/imgui-rs/issues/412>).\n\n  - `imgui-winit-support`'s `winit-23` feature no longer supports `winit` version `0.24` (this caused an unintentional semver breakage before, unfortunately).\n  - `imgui-winit-support` has a new `winit-24` feature for 0.24 support.\n  - By default `imgui-winit-support` feature now enables `winit-24`, and not `winit-23` (by default it will always enable the latest).\n\n- The `imgui` crate no longer depends on `gfx` or `glium` directly: <https://github.com/imgui-rs/imgui-rs/pull/420> (breaking, related to the previous change).\n\n  - That is, the `gfx` and `glium` features are removed to reduce version compatibility issues going forward.\n    - This only matters if you manually implement `gfx` or `glium` renderers without using the `imgui-glium-renderer` or `imgui-gfx-renderer` crates.\n    - In the (somewhat unlikely) case you were relying on these this, you should define your own vertex type that's layout-compatible with `imgui::DrawVert`, and replace calls to `imgui::DrawList::vtx_buffer()` with `imgui::DrawList::transmute_vtx_buffer::<MyDrawVert>()`. You can see `imgui_glium_renderer::GliumDrawVert` and `imgui_gfx_renderer::GfxDrawVert` types respectively for examples of this, if needed, but it should be straightforward enough if you're already implementing a renderer from scratch.\n  - This is admittedly less convenient, but avoids depending on any specific version of `gfx` or `glium` in the core `imgui` crate, which will ease maintenance and reduce unintentional breakage in the future.\n\n- Non-window DrawList support has been fixed/improved: <https://github.com/imgui-rs/imgui-rs/pull/414>\n\n  - `WindowDrawList` has been renamed to `DrawListMut`, to reflect that it may refer to other kinds of draw lists, and is mutable, unlike `imgui::DrawList` (breaking).\n  - `Ui::get_background_draw_list()` has been fixed when used outside of a window context, and now has an example.\n  - `Ui::get_foreground_draw_list()` has been added, analogous to `Ui::get_background_draw_list()`.\n\n- Added drag drop support, with a safe and an unsafe variant: <https://github.com/imgui-rs/imgui-rs/pull/428>\n\n  - `DragDropSource` allows users to create a dragdrop payload which is either empty, of `'static + Copy` data,\n    or `unsafe`, allowing for theoretically arbitrary payloads.\n  - `DragDropTarget` allows users to accept any of the above payloads.\n  - Extensive documentation has been made on all of these features, hopefully as a target for future features.\n\n- `ImColor` (which is a wrapper around `u32`) has been renamed to `ImColor32` in order to avoid confusion with the `ImColor` type from the Dear ImGui C++ code (which is a wrapper around `ImVec4`). In the future an `ImColor` type which maps more closely to the C++ one will be added.\n\n  - Additionally, a number of constructor and accessor methods have been added to it `ImColor`, which are `const fn` where possible.\n\n- The `im_str!` macro can now be used in `const` contexts (when the `format!` version is not used).\n\n- `im_str!` now verifies that the parameter has no interior nuls at compile time. This can be avoided to get the old (truncating) behavior by forcing it to use the `format!`-like version, e.g. `im_str!(\"for_some_reason_this_should_be_truncated\\0 there {}\", \"\")`.\n\n  - This is not recommended, and is probably not useful.\n\n- Many functions are now `const fn`.\n\n- A large number of small functions are now `#[inline]`, but many still aren't, so you probably will want to build with LTO for release builds if you use `imgui` heavily.\n\n- The `io.config_windows_memory_compact_timer` flag has been renamed to `io.config_memory_compact_timer`. This follows the similar rename in the C++ ImGui, and was done because it no longer only applies to window memory usage.\n\n- The variants of `ColorEditInputMode` and `ColorEditDisplayMode` have been renamed to be CamelCase instead of upper case (e.g. `ColorEditFooMode::RGB` => `ColorEditFooMode::Rgb`).\n  - However, this change is probably not breaking (in practice if not in theory) because const aliases using the old names are provided.\n\n## [0.6.1] - 2020-12-16\n\n- Support for winit 0.24.x\n  - Note: this change was accidentally semver-breaking, see the caveat below.\n- Support multiple simultaneous winit versions in imgui-winit-support:\n  - The latest will be if more than one is specified, and a single warning will be logged in debug builds (based on `cfg!(debug_assertions)`) at runtime if multiple are specified.\n  - This is intended to make features behave a bit more closely to additively, and reduce the pain of using this crate in a larger workspace.\n- Avoid dropping mouse events when press/release are on the same frame (macos)\n- Substantial repository layout reorganization\n\n### Caveat: Semver broken in 0.6.1 in `imgui-winit-support`\n\n_Note from the future: `imgui-winit-support@0.6.1` has been yanked. I don't believe the breakage impacted the other crates so I'm leaving those to avoid impacting non-`winit` usages._\n\nThis release accidentally broke semver, and should have been 0.7.0. It will be yanked when 0.7.0 is released, unless there are objections.\n\nThis happened when updating the glium/winit/glium versions, adding support for winit `0.24` and related. Unfortunately, while an attempt to avoid breakage was made, it happened regardless. This mainly happened as it was the holidays and not enough attention was paid to the changes in an urgent-sounding request for supporting the new version, and more care will be taken in the future to avoid cutting a hasty release without adequate testing.\n\nAs mentioned, the 0.6.1 release of `imgui-winit-support` has been yanked.\n\n## [0.6.0] - 2020-11-15\n\n### Added\n\n- `Io::peek_input_characters`\n\n### Changed\n\n- Upgrade to cimgui / imgui 1.79\n- Upgrade to winit 0.23\n- Bump minimum Rust version to 1.43\n\n## [0.5.0] - 2020-09-20\n\n### Added\n\n- Support for ConfigFlags::RENDERER_HAS_VTX_OFFSET in imgui-glium-renderer and imgui-gfx-renderer. This makes it possible to output large meshes (e.g. complex UIs) without problems when using these renderers\n- `Ui::begin_tooltip` to support using tooltips with stack tokens instead of closures\n- API for accessing the background drawlist\n- Tab bar / tab item API\n- Redesigned drag slider API\n\n### Changed\n\n- Upgrade to cimgui / imgui 1.78\n- Store per-texture sampler parameters in imgui-glium-renderer to support customizing them\n- Slider widget constructors no longer require the range parameter. Call the range function on the builder to set the range.\n\n### Fixed\n\n- Reduce unnecessary winit cursor changes which earlier caused cursor flickering or invalid cursors on some platforms (at least Windows)\n\n### Removed\n\n- Various things that were deprecated in imgui-rs 0.4.0\n\n## [0.4.0] - 2020-05-27\n\n### Added\n\n- WebAssembly FFI shells\n\n### Changed\n\n- Redesign tree / collapsing header API\n- Bump minimum Rust version to 1.40 (at least xml-rs crate requires it)\n- Upgrade to glium 0.27 / winit 0.22\n- Switch Glium renderer to use GL_CLAMP_TO_BORDER\n\n### Fixed\n\n- Bug in font name length checking\n\n## [0.3.1] - 2020-03-16\n\n### Fixed\n\n- Narrowed supported winit version range in imgui-winit-support\n\n## [0.3.0] - 2020-02-15\n\n### Added\n\n- Add `ChildWindow::movable`\n- ImString now implements fmt::Write\n\n### Changed\n\n- Upgrade to cimgui / imgui 1.75\n- Bump minimum Rust version to 1.38 (at least backtrace crate requires it)\n- Upgrade to glium 0.26 / winit 0.21\n- Switch imgui-winit-support to 0.20+ by default. Winit 0.19 support is still\n  available via the `winit-19` feature flag\n- Resources used by examples are no longer included in the published crate\n\n### Removed\n\n- Various things that were deprecated in imgui-rs 0.2.0\n\n### Fixed\n\n- Fix toggling behavior on using `MenuItem::build_with_ref` and `Selectable::build_with_ref`.\n- ImString nul terminator handling\n\n## [0.2.1] - 2019-09-09\n\n### Fixed\n\n- Fix backspace handling on macOS\n- Fix ImageButton bool return value\n\n## [0.2.0] - 2019-09-07\n\n### Added\n\n- Window scrolling API\n- Full support for the column API\n- Almost all small utility functions from upstream API\n- Support for winit 0.20 alpha via `winit-20` feature\n\n### Changed\n\n- Redesigned window API\n- Redesigned progress bar API\n- Redesigned color editor/picker API\n- Redesigned child window API (previously known as child frame)\n- Redesigned image / image button API\n- Redesigned combo box API\n- Redesigned selectable API\n- Redesigned slider API. Generic scalar sliders support all main data types and replace previous individual sliders (int, int2, int3, int4, etc...)\n- Redesigned menu API\n- Updated layout API\n- Renderer errors implement std::error::Error\n- Glium renderer re-exports imgui and glium\n- Gfx renderer re-exports imgui and gfx\n- These functions now take/return PathBuf: log_filename, set_log_filename, ini_filename, set_logfilename\n- ID stack manipulation now uses stack tokens\n- Parameter stack pushes _must almost always be paired by a manual call to stack pop_\n- Container widget tokens _must be ended manually by calling end_. Closure-based function (e.g. build()) are unaffected and do this automatically\n- Bump minimum Rust version to 1.36 (some dependencies, including winit, require MaybeUninit)\n- Upgrade to cimgui / imgui 1.72b\n\n### Removed\n\n- Various things that were deprecated in imgui-rs 0.1.0\n\n## [0.1.0] - 2019-07-12\n\n### Added\n\n- Support for font atlas sharing\n- Support for using multiple fonts\n- Support for suspended contexts (useful for having multiple independent operating system windows)\n- Support for DX11 in imgui-gfx-renderer\n- Support for navigation input system\n- Support for backend/renderer name strings\n- Support for saving/loading INI settings manually\n- Pluggable clipboard support\n\n### Changed\n\n- imgui-sys is now almost completely automatically generated. **This is a big breaking change in imgui-sys API**\n- ImGui/Context API is now safer\n- The library context (known as Context, previously known as ImGui) is no longer Send or Sync\n- Many getter/setter APIs have been replaced with direct access to struct fields\n- [f32; 2] and [f32; 4] are now the main vector types. ImVec/ImVec4 and corresponding tuples are no longer used in the main API\n- imgui-gfx-renderer is parameterized over the color format, so Rgba8 and Srgba8 are both supported\n- imgui-winit-support has been rewritten to provide a more robust abstraction that is easier to use correctly\n- Parameter stack (e.g. StyleVar) manipulation is now done using push functions and automatically or manually droppable stack tokens\n- Upgrade to glium 0.25\n- Upgrade to cimgui / imgui 1.71\n- Bump minimum Rust version to 1.33\n\n## [0.0.23] - 2019-04-10\n\n### Added\n\n- Support for image buttons: `Ui::image_button`\n- `Ui::set_keyboard_focus_here`\n- Support for window position pivot\n\n### Changed\n\n- Upgrade to gfx 0.18\n\n### Removed\n\n- Various things that were deprecated in imgui-rs 0.0.21 and 0.0.22\n\n## [0.0.22] - 2019-02-05\n\n### Added\n\n- `Ui::with_test_wrap_pos`\n- `Ui::get_content_region_max`\n- `Ui::get_window_content_region_min`\n- `Ui::get_window_content_region_max`\n\n### Changed\n\n- Upgrade to cimgui 1.66.2+ / imgui 1.66b. **This is a very big update, so there are a lot of breaking changes**\n- Bump minimum Rust version to 1.31 (1.28 required by the glutin crate, and 1.31 required by the stb_truetype crate)\n- Upgrade to glium 0.23\n- Replaced `imgui-glutin-support` with `imgui-winit-support`\n\n## [0.0.21] - 2018-10-11\n\n### Added\n\n- `ImGui::mouse_down`\n- `ImGui::key_super`\n- `Ui::get_window_pos`\n- `Ui::is_window_focused`\n- `Ui::is_root_window_focused`\n- `Ui::is_child_window_focused`\n- `Ui::popup_modal`\n- `imgui-glutin-support` crate\n- Support for custom textures\n\n### Fixed\n\n- Possible crash if rendering was skipped during a frame\n\n### Changed\n\n- Bump minimum Rust version to 1.26 (required by the parking_lot_core crate)\n\n## [0.0.20] - 2018-08-13\n\n### Fixed\n\n- Clip rect regression in the glium renderer\n\n### Removed\n\n- Various things that were deprecated in imgui-rs 0.0.19\n\n## [0.0.19] - 2018-08-12\n\n### Added\n\n- New things in imgui/cimgui 1.53.1\n  - Style: Add `PopupRounding`, `FrameBorderSize`, `WindowBorderSize`, `PopupBorderSize`.\n  - DemoWindow: Add `no_close` state.\n  - Input: Add `no_undo_redo` method.\n  - _imgui-sys_:\n    - `igStyleColorsDark` and `igStyleColorsLight`\n    - DragDrop low level API\n    - `igGetFrameHeight`\n    - `igBeginCombo`, `igEndCombo`\n    - `igSetItemDefaultFocus`\n    - `igGetOverlayDrawList` and `igGetDrawListSharedData`\n    - `ImFontConfig_DefaultConstructor`\n    - `ImDrawList_AddImageRounded`\n- Input: Add `read_only` and `password` methods.\n- Various utility functions\n- Support for changing the mouse cursor\n- Custom font support\n- Support for item grouping (`group` function)\n- Custom drawing with draw list manipulation\n- Drag widgets\n- Input: Add `input_text_multiline` method\n\n### Changed\n\n- Upgrade to imgui/cimgui 1.53.1\n  - Rename `Ui::show_test_window` to `Ui::show_demo_window`. Keep redirection.\n  - Rename `sys::igGetItemsLineHeightWithSpacing` to `sys::igGetFrameHeightWithSpacing`. Keep redirection.\n  - Rename `ImGuiTreeNodeFlags::AllowOverlapMode` to `ImGuiTreeNodeFlags::AllowItemOverlap`. `sys::igSetNextWindowContentSize()`. Keep redirection.\n  - Rename `sys::ImGuiTextBuffer_append()` helper to `appendf()`.\n  - Rename `ImGuiStyleVar::ChildWindowRounding` to `ImGuiStyleVar::ChildRounding`. Keep redirection.\n  - Rename `StyleVar::ChildWindowRounding` to `StyleVar::ChildRounding`. Keep redirection.\n  - Rename `ImGuiCol::ChildWindowBg` to `ImGuiCol::ChildBg`. Keep redirection.\n- Upgrade glium to 0.22.0. This updates winit to 0.16. This changes the way\n  HIDPI are calculated. Depending on your needs, you may want to set HIDPI to 1\n  by setting the environment variable `WINIT_HIDPI_FACTOR=1` if you use X11.\n- `frame()` now takes a single `FrameSize` argument\n- Bump minimum Rust version to 1.24\n- `set_mouse_down` takes button states by value, not by reference\n\n### Deprecated\n\n- Various imgui-sys things that were deprecated in imgui/cimgui 1.53.1\n  - Obsolete `sys::igIsRootWindowFocused()` in favor of using `sys::igIsWindowFocused(ImGuiFocusedFlags::RootWindow)`.\n  - Obsolete `sys::igIsRootWindowOrAnyChildFocused()` in favor of using `sys::igIsWindowFocused(ImGuiFocusedFlags::RootAndChildWindows)`.\n  - Obsolete `sys::igIsRootWindowOrAnyChildHovered()` in favor of using `sys::igIsWindowHovered(ImGuiHoveredFlags::RootAndChildWindows)`.\n  - Obsolete `sys::SetNextWindowContentWidth()` in favor of using - Obsolete `Window::show_borders`. Use `StyleVar` instead.\n  - Obsolete `ImGuiCol::ComboBg`. Use `PopupBg` instead.\n\n### Removed\n\n- Features that were removed in imgui/cimgui 1.53.1\n  - Remove `anti_aliased: bool` final parameter of `sys::ImDrawList_AddPolyline` and `sys::ImDrawList_AddConvexPolyFilled`.\n  - Remove `ImGuiWindowFlags::ShowBorders` window flag. Borders are now fully set up in the ImGuiStyle structure.\n- Various imgui-sys things that were deprecated in imgui/cimgui 1.52\n\n## [0.0.18] - 2017-12-23\n\n### Added\n\n- `is_item_hovered`\n- `tooltip`\n- `tooltip_text`\n\n### Changed\n\n- Upgrade to imgui/cimgui 1.52\n- Upgrade to glium 0.19\n\n### Deprecated\n\n- Various imgui-sys things that were deprecated in imgui/cimgui 1.52\n\n### Removed\n\n- Non-namespaced flags\n- Various imgui-sys things that were deprecated in imgui/cimgui 1.51\n- `Window::bg_alpha`. Push a color change with `with_color_var` instead\n- `color_edit3`\n- `color_edit4`\n\n## [0.0.17] - 2017-11-07\n\n### Added\n\n- Namespaced flags (e.g. `ImGuiWindowFlags`)\n- Color picker widget\n- Color button widget\n- `imgui_sys` is now re-exported as `sys` in the main create\n- `imgui::get_style_color_name`\n\n### Changed\n\n- Upgrade to imgui/cimgui 1.51\n- Adapt to latest cimgui API changes\n- Bump minimum Rust version to 1.20\n- Upgrade to bitflags 1.0\n- Various minor ImString/ImStr changes\n- `text` now accepts normal Rust strings. ImStr is still needed everywhere else\n\n### Fixed\n\n- Default impl for ImString was incorrect and could cause a crash\n\n### Deprecated\n\n- Non-namespaced flags\n- Various imgui-sys things that were deprecated in imgui/cimgui 1.51\n- `Window::bg_alpha`. Push a color change with `with_color_var` instead\n- `color_edit3`. Use `color_edit` instead\n- `color_edit4`. Use `color_edit` instead\n\n### Removed\n\n- ImStr -> str Deref. Use `to_str` instead.\n\n## [0.0.16] - 2017-10-26\n\n### Added\n\n- OpenGL ES 2.0+ support in gfx and glium renderers\n- Separate OpenGL 2.0, 3.0, 4.0 shaders in both renderers. This should fix an\n  issue with some systems that refuse to use old GLSL shaders with modern\n  OpenGL contexts\n- `ImGui::add_font_global_scale`\n- Support for radio buttons\n\n### Changed\n\n- Upgrade to glium 0.18\n- imgui-gfx-renderer `Renderer::init` now requires a `shaders: Shaders` parameter. Please see examples/support_gfx/mod.rs for a shader resolution example\n- Bump minimum Rust version to 1.19 because some dependencies require it.\n\n### Fixed\n\n- Glium renderer now uses MinifySamplerFilter::Nearest. This fixes a blurry font issue in some configurations\n\n### Removed\n\n- `ImString::from_string_unchecked`\n- `ImString::from_bytes_unchecked`\n- `ImStr::from_bytes_unchecked`\n\n## [0.0.15] - 2017-07-23\n\n### Added\n\n- Support for new_line function\n- Support for text size calculation\n- Support for scoped style customization\n- Support for scoped color customization\n- Support for child frames\n- Unsafe ImString/ImStr creation functions for advanced users:\n  - `ImString::from_utf8_unchecked` (renamed from `ImString::from_bytes_unchecked`)\n  - `ImString::from_utf8_with_nul_unchecked`\n  - `ImStr::from_utf8_with_nul_unchecked` (renamed from `ImStr::from_bytes_unchecked`)\n\n### Changed\n\n- Button, selectable, histogram, plotlines, and progress bar accept size with `Into<ImVec2>`\n- `ImString::new` always succeeds and any interior NULs truncate the string. **Breaking change**\n- All builder constructor functions (e.g. Window::new) now take `&Ui` reference to tie the lifetime of the builder to it.\n- Bumped minimum Rust version to 1.17 because some dependencies require it.\n- Upgrade to glium 0.17\n\n### Deprecated\n\n- `ImString::from_string_unchecked` (please use `ImString::new`)\n- `ImString::from_bytes_unchecked` (renamed to `ImString::from_utf8_unchecked`)\n- `ImStr::from_bytes_unchecked` (renamed to `ImStr::from_utf8_with_nul_unchecked`)\n\n### Fixed\n\n- Histogram, plotlines, progressbar builders were not tied to the `&Ui` lifetime, so it was possible to misuse them.\n\n## [0.0.14] - 2017-06-18\n\n### Added\n\n- ImString owned type for strings\n- Experimental support for gfx-rs in imgui-sys\n- Experimental renderer for gfx-rs\n\n### Changed\n\n- ImStr is now \"a dear imgui -compatible string slice\". This change significantly affects how strings are handled.\n- Upgrade to imgui/cimgui 1.50\n- Upgrade to bitflags 0.9\n\n### Fixed\n\n- String pointer compilation problems on ARM\n\n## [0.0.13] - 2017-04-25\n\n### Changed\n\n- Make the crates publishable again after the Glium renderer separation\n\n## [0.0.12] - 2017-04-25 [YANKED]\n\n### Added\n\n- Support for progress bar\n- Support for push/pop item width\n- Support for ID stack manipulation (integer values)\n- Support for 2-4 -element int sliders\n- Support for 2-4 -element float sliders\n- `ImVec4::zero()`\n- `Into` array and tuple conversions for ImVec2 and ImVec4\n- gfx 0.15 support in imgui-sys\n- gfx 0.15 renderer implementation\n\n### Changed\n\n- imgui-sys no longer includes glium support by default\n- Move Glium renderer to a separate crate\n\n### Removed\n\n- `Window::always_vertical_scollbar` (typo)\n- `igPushStyleVavrVec` (typo)\n- `ImGuiInputTextFlags::with`\n- `ImGuiTreeNodeFlags::with`\n- `ImGuiWindowFlags::with`\n\n## [0.0.11] - 2017-02-15\n\n### Added\n\n- `ImVec2::zero()`\n- Support for buttons\n- Support for closing current popup\n- `Window::always_vertical_scrollbar` (fix typo)\n- `igPushStyleVarVec` (fix typo)\n\n### Changed\n\n- Upgrade to bitflags 0.8\n- Upgrade to glium 0.16\n- Replace libc dependency with `std::os::raw`\n- Upgrade cimgui to include MinGW compilation fix\n\n### Deprecated\n\n- `Window::always_vertical_scollbar` (typo)\n- `igPushStyleVavrVec` (typo)\n- `ImGuiInputTextFlags::with`\n- `ImGuiTreeNodeFlags::with`\n- `ImGuiWindowFlags::with`\n\n## [0.0.10] - 2016-08-09\n\n### Changed\n\n- Upgrade to glium 0.15\n- Examples use std::time instead of the deprecated time crate\n\n## [0.0.9] - 2016-07-07\n\n### Added\n\n- Support for columns, combo, listbox\n- Support for plothistogram, plotlines\n- Support for color edit widgets\n- Support for int and float inputs\n- Support for int and float array inputs\n- Support for popups\n- Support for selectable\n- Better support for hidpi environments\n\n### Changed\n\n- ImStr::as_ptr is now part of the public API\n- Upgrade to bitflags 0.7\n- Upgrade to imgui/cimgui 1.49\n  - Several imgui_sys structs have changed\n  - CollapsingHeader API has changed\n  - New window flags are supported\n\n## [0.0.8] - 2016-04-15\n\n### Added\n\n- Add a change log\n\n### Changed\n\n- Upgrade to glium 0.14\n\n## [0.0.7] - 2016-03-26\n\n### Changed\n\n- Upgrade to imgui/cimgui 1.47\n\n### Fixed\n\n- Fix Glium rendering error when more than one texture is used ([issue #17](https://github.com/Gekkio/imgui-rs/issues/17))\n\n## [0.0.6] - 2016-01-12\n\n### Changed\n\n- Relicensed to dual MIT/Apache-2.0\n- Upgrade to glium 0.13\n- Upgrade to imgui/cimgui 1.46\n\n## [0.0.5] - 2015-11-30\n\n### Changed\n\n- Upgrade to glium 0.12\n- Upgrade to libc 0.2\n\n## [0.0.4] - 2015-10-26\n\n### Changed\n\n- Upgrade to glium 0.10\n- Lots of other changes\n\n## [0.0.3] - 2015-09-27\n\n### Changed\n\n- Upgrade to glium 0.9\n- Lots of other changes\n\n## [0.0.2] - 2015-08-31\n\n### Changed\n\n- Lots of changes\n\n## 0.0.1 - 2015-08-20\n\n### Added\n\n- Initial release with cimgui/imgui 1.44, glium 0.9\n\n[0.10.0]: https://github.com/Gekkio/imgui-rs/compare/v0.9.0...v0.10.0\n[0.9.0]: https://github.com/Gekkio/imgui-rs/compare/v0.8.0...v0.9.0\n[0.8.0]: https://github.com/Gekkio/imgui-rs/compare/v0.7.0...v0.8.0\n[0.7.0]: https://github.com/Gekkio/imgui-rs/compare/v0.6.1...v0.7.0\n[0.6.1]: https://github.com/Gekkio/imgui-rs/compare/v0.6.0...v0.6.1\n[0.6.0]: https://github.com/Gekkio/imgui-rs/compare/v0.5.0...v0.6.0\n[0.5.0]: https://github.com/Gekkio/imgui-rs/compare/v0.4.0...v0.5.0\n[0.4.0]: https://github.com/Gekkio/imgui-rs/compare/v0.3.0...v0.4.0\n[0.3.1]: https://github.com/Gekkio/imgui-rs/compare/v0.3.0...v0.3.1\n[0.3.0]: https://github.com/Gekkio/imgui-rs/compare/v0.2.0...v0.3.0\n[0.2.1]: https://github.com/Gekkio/imgui-rs/compare/v0.2.0...v0.2.1\n[0.2.0]: https://github.com/Gekkio/imgui-rs/compare/v0.1.0...v0.2.0\n[0.1.0]: https://github.com/Gekkio/imgui-rs/compare/v0.0.23...v0.1.0\n[0.0.23]: https://github.com/Gekkio/imgui-rs/compare/v0.0.22...v0.0.23\n[0.0.22]: https://github.com/Gekkio/imgui-rs/compare/v0.0.21...v0.0.22\n[0.0.21]: https://github.com/Gekkio/imgui-rs/compare/v0.0.20...v0.0.21\n[0.0.20]: https://github.com/Gekkio/imgui-rs/compare/v0.0.19...v0.0.20\n[0.0.19]: https://github.com/Gekkio/imgui-rs/compare/v0.0.18...v0.0.19\n[0.0.18]: https://github.com/Gekkio/imgui-rs/compare/v0.0.17...v0.0.18\n[0.0.17]: https://github.com/Gekkio/imgui-rs/compare/v0.0.16...v0.0.17\n[0.0.16]: https://github.com/Gekkio/imgui-rs/compare/v0.0.15...v0.0.16\n[0.0.15]: https://github.com/Gekkio/imgui-rs/compare/v0.0.14...v0.0.15\n[0.0.14]: https://github.com/Gekkio/imgui-rs/compare/v0.0.13...v0.0.14\n[0.0.13]: https://github.com/Gekkio/imgui-rs/compare/v0.0.12...v0.0.13\n[0.0.12]: https://github.com/Gekkio/imgui-rs/compare/v0.0.11...v0.0.12\n[0.0.11]: https://github.com/Gekkio/imgui-rs/compare/v0.0.10...v0.0.11\n[0.0.10]: https://github.com/Gekkio/imgui-rs/compare/v0.0.9...v0.0.10\n[0.0.9]: https://github.com/Gekkio/imgui-rs/compare/v0.0.8...v0.0.9\n[0.0.8]: https://github.com/Gekkio/imgui-rs/compare/v0.0.7...v0.0.8\n[0.0.7]: https://github.com/Gekkio/imgui-rs/compare/v0.0.6...v0.0.7\n[0.0.6]: https://github.com/Gekkio/imgui-rs/compare/v0.0.5...v0.0.6\n[0.0.5]: https://github.com/Gekkio/imgui-rs/compare/v0.0.4...v0.0.5\n[0.0.4]: https://github.com/Gekkio/imgui-rs/compare/v0.0.3...v0.0.4\n[0.0.3]: https://github.com/Gekkio/imgui-rs/compare/v0.0.2...v0.0.3\n[0.0.2]: https://github.com/Gekkio/imgui-rs/compare/v0.0.1...v0.0.2\n"
        },
        {
          "name": "Cargo.toml",
          "type": "blob",
          "size": 0.0966796875,
          "content": "[workspace]\nmembers = [\"imgui\", \"imgui-sys\", \"xtask\"]\n\npackage.rust-version = \"1.70\"\nresolver = \"2\""
        },
        {
          "name": "LICENSE-APACHE",
          "type": "blob",
          "size": 10.5166015625,
          "content": "                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   Copyright 2021 the imgui-rs developers\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n\n"
        },
        {
          "name": "LICENSE-MIT",
          "type": "blob",
          "size": 1.0419921875,
          "content": "Copyright (c) 2021 The imgui-rs Developers\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 6.5751953125,
          "content": "# imgui-rs: Rust bindings for Dear ImGui\n\n[![Build Status](https://github.com/imgui-rs/imgui-rs/workflows/ci/badge.svg)](https://github.com/imgui-rs/imgui-rs/actions)\n[![Latest release on crates.io](https://img.shields.io/crates/v/imgui.svg)](https://crates.io/crates/imgui)\n[![Documentation on docs.rs](https://docs.rs/imgui/badge.svg)](https://docs.rs/imgui)\n[![Wrapped Dear ImGui Version](https://img.shields.io/badge/Dear%20ImGui%20Version-1.89.2-blue.svg)](https://github.com/ocornut/imgui)\n\n![Hello world](hello_world.png)\n\n```rust\nui.window(\"Hello world\")\n    .size([300.0, 100.0], Condition::FirstUseEver)\n    .build(|| {\n        ui.text(\"Hello world!\");\n        ui.text(\"こんにちは世界！\");\n        ui.text(\"This...is...imgui-rs!\");\n        ui.separator();\n        let mouse_pos = ui.io().mouse_pos;\n        ui.text(format!(\n            \"Mouse Position: ({:.1},{:.1})\",\n            mouse_pos[0], mouse_pos[1]\n        ));\n    });\n```\n\n`imgui-rs` are the Rust bindings to [Dear ImGui](https://github.com/ocornut/imgui), the standard immediate mode user interface library.\n\n## Main library crates\n\nThe core of imgui-rs consists of:\n\n- [`imgui`](./imgui): High-level safe API\n- [`imgui-sys`](./imgui-sys): Low-level unsafe API (automatically generated)\n\nNext, we provide an example renderer, and two example backend platform implementations:\n\n- [`imgui-glow-renderer`](https://github.com/imgui-rs/imgui-glow-renderer): Renderer implementation that uses the `glow` crate\n- [`imgui-winit-support`](https://github.com/imgui-rs/imgui-winit-support): Backend platform implementation that uses the `winit` crate\n- [`imgui-sdl2-support`](https://github.com/imgui-rs/imgui-sdl2-support): Backend platform using SDL2\n\nEach of these contain an `examples` folder showing their usage. Check\ntheir respective `Cargo.toml` to find compatible versions (e.g\n`imgui-glow-renderer/Cargo.toml` the `[dependencies]` describes the\ncompatible `glow` version and `[dev-dependencies]` describes the\ncompatible `glutin` version)\n\nSee below as well for community lead platform and renderer crates.\n\n## Features\n\n- Bindings for Dear ImGui that can be used with safe Rust. Note: API coverage\n  is not 100%, but will keep improving over time.\n- Builder structs for use cases where the original C++ library uses optional\n  function parameters\n- Easy integration with `glow` and community integrations with `wgpu` and `glium`\n- Easy integration with `winit` and `sdl2`\n- Optional support for the freetype font rasterizer and the docking branch\n\n## Minimum Support Rust Version (MSRV)\n\nThe MSRV for `imgui-rs` and all of the backend crates is **1.70**. We update our MSRV periodically, and issue a minor bump for it.\n\n## Choosing a backend platform and a renderer\n\nAlmost every application that uses imgui-rs needs two additional components in\naddition to the main `imgui` crate: a backend platform, and a renderer.\n\n**imgui-rs is not tied to any particular renderer or platform.**\n\nThe backend platform is responsible for integrating imgui-rs with the operating\nsystem and its window management. Its responsibilities include the following:\n\n- Handling input events (e.g. keyboard, mouse) and updating imgui-rs state\n  accordingly\n- Passing information about the OS window (e.g. size, DPI factor) to imgui-rs\n- Updating the OS-side mouse cursor when imgui-rs requests it\n\nThe renderer is responsible for taking generic, renderer-agnostic _draw lists_\ngenerated by imgui-rs, and rendering them using some graphics API. Its\nresponsibilities include the following:\n\n- Rendering using vertex/index buffers and command lists\n- Handling of DPI factors and scissor rects\n- Texture management\n\nWe provide the following renderer as an official source (ie, they will always be up to date and working): `imgui-glow-renderer`.\n\nAdditionally, we provide the following backends as an official source (ie, they will always be up to date and working): `imgui-winit-support` and `imgui-sdl2-support`.\n\nThe most tested platform/renderer combination is `imgui-glow-renderer` +\n`imgui-winit-support` + `winit`, but this is not the only possible\ncombination.\n\nAdditionally, there are other libraries which provide other kinds of renderers, which may be out of date with `imgui-rs` releases, but might work well for your use case:\n\n1.  [`imgui-wgpu`](https://github.com/Yatekii/imgui-wgpu-rs)\n2.  [`imgui-d3d12-renderer`](https://github.com/curldivergence/imgui-d3d12-renderer)\n3.  [`imgui-dx11-renderer`](https://github.com/veykril/imgui-dx11-renderer)\n4.  [`imgui-gfx-renderer`](https://github.com/imgui-rs/imgui-gfx-renderer): Deprecated (no longer maintained beyond imgui-rs v0.8). Renderer implementation that uses the `gfx` crate (_not the new gfx-hal crate_)\n5.  [`imgui-glium-renderer`](https://github.com/imgui-rs/imgui-glium-renderer): Deprecated implementation that uses the `glium` crate\n6.  Many more can be found on [crates.io](https://crates.io) either using search or the [\"dependents\" page](https://crates.io/crates/imgui/reverse_dependencies) (the \"depends on\" text indicates if the crate has been updated for current versions of imgui-rs)\n\nYou can also write your own support code if you have a more advanced use case, because **imgui-rs is not tied to any specific graphics / OS API**.\n\n## Compiling and running the demos\n\nExamples for `imgui` are in their own crate [`imgui-examples`](https://github.com/imgui-rs/imgui-examples).\n\n```bash\ngit clone https://github.com/imgui-rs/imgui-examples\ncd imgui-examples\n\n# At the reposity root\ncargo test;\n\ncargo run --example hello_world\ncargo run --example test_window\ncargo run --example test_window_impl\n```\n\n## Windows Platform Notes\n\nWindows platform users will need to use the _MSVC ABI_ version of the Rust\ncompiler along with its associated\n[dependencies](https://www.rust-lang.org/en-US/downloads.html#win-foot) to\nbuild this libary and run the examples.\n\n## How to contribute\n\n1. Change or add something\n2. Make sure you're using the latest stable Rust\n3. Run rustfmt to guarantee code style conformance\n\n   ```bash\n   rustup component add rustfmt\n   cargo fmt\n   ```\n\n4. Open a pull request in Github\n\n## License\n\nLicensed under either of\n\n- Apache License, Version 2.0, ([LICENSE-APACHE](LICENSE-APACHE) or https://www.apache.org/licenses/LICENSE-2.0)\n- MIT license ([LICENSE-MIT](LICENSE-MIT) or https://opensource.org/licenses/MIT)\n\nat your option.\n\nUses [Dear ImGui](https://github.com/ocornut/imgui) and\n[cimgui](https://github.com/cimgui/cimgui).\n\n### Contribution\n\nUnless you explicitly state otherwise, any contribution intentionally submitted\nfor inclusion in the work by you, as defined in the Apache-2.0 license, shall\nbe dual licensed as above, without any additional terms or conditions.\n"
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "hello_world.png",
          "type": "blob",
          "size": 7.8876953125,
          "content": null
        },
        {
          "name": "imgui-sys",
          "type": "tree",
          "content": null
        },
        {
          "name": "imgui",
          "type": "tree",
          "content": null
        },
        {
          "name": "xtask",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}