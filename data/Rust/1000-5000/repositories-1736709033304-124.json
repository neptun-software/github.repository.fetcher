{
  "metadata": {
    "timestamp": 1736709033304,
    "page": 124,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjEzMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "Keats/tera",
      "stars": 3641,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 0.0751953125,
          "content": "[*.rs]\nend_of_line = lf\ncharset = utf-8\nindent_style = space\nindent_size = 4\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.1767578125,
          "content": "/*.iml\n/.idea\ntarget/\nCargo.lock\nnotes\nout.html\n*.bench\nnode_modules\nyarn.lock\npublic/\n*.css\n!examples/**/*.css\ncallgrind.out.*\n*.zst\n!docs/playground/pkg/**\ndocs/static/playground/"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 17.2255859375,
          "content": "# Changelog\n\n## 1.20.0 (2024-05-27)\n\n- Support parenthesis in if statemetns\n- Allow escaped newline and tab join separator\n\n## 1.19.1 (2023-09-03)\n\n- Minimum supported Rust version (MSRV) is now 1.63 due to transitive dependencies.\n- Update crates.io metadata for the website\n\n## 1.19.0 (2023-05-31)\n\n- Revert change to glob path to not error if the path doesn't exist\n- Allow macro definition in renderable template\n\n## 1.18.1 (2023-03-15)\n\n- Fix panic on invalid globs to Tera::new\n\n## 1.18.0 (2023-03-08)\n\n- Add `abs` filter\n- Add `indent` filter\n- Deprecate `get_json_pointer` in favour of `dotted_pointer`, a faster alternative\n- Always canonicalize glob paths passed to Tera to workaround a globwalk bug\n- Handle apostrophes in title case filter\n- Some performance improvement\n\n## 1.17.1 (2022-09-19)\n\n- Make `get_random` use isize instead of i32 and bad error message\n- Fix variables lookup when the evaluated key has a `.` or quotes\n- Fix changed output of f64 from serde_json 1.0.85\n\n## 1.17.0 (2022-08-14)\n\n- Fix bug where operands in `in` operation were escaped before comparison\n- Force chrono dep to be 0.4.20 minimum\n- Better support for parenthesis in expression\n\n## 1.16.0 (2022-06-10)\n\n- Add a feature just for the urlencode builtin\n- Fix bug in slice filter if start >= end\n- Allow supplying a timezone to a timestamp for the date filter\n\n## 1.15.0 (2021-11-03)\n\n- Add `default` parameter to `get` filter\n- `Tera::extend` now also copies over function\n- Remove the new Context-local Tera function support, it was an accidental breaking change and will be added in v2 in some ways\ninstead\n\n\n## 1.14.0 (2021-11-01) - YANKED as it added a generic to Context, a breaking change\n\n- Ensure `Context` stays valid in Sync+Send, fixing an issue introduced in 1.13. 1.113 will be yanked.\n\n## 1.13.0 (2021-10-17) - YANKED as it made Context not Send+Sync\n\n- Add `default` parameter to `get` filter\n- `Tera::extend` now also copies over function\n- Add Context-local Tera functions\n\n## 1.12.1 (2021-07-13)\n\n- Remove unused feature of chrono\n- Remove unwanted bloat in crate from accidental WASM files\n\n## 1.12.0 (2021-06-29)\n\n- Add `spaceless` filter from Django\n\n## 1.11.0 (2021-06-14)\n\n- Allow iterating on strings with `for`\n\n## 1.10.0 (2021-05-21)\n\n- Add `Tera::get_template_names`\n\n## 1.9.0 (2021-05-16)\n\n- Add `Context::remove`\n\n## 1.8.0 (2021-04-21)\n\n- Add `linebreaksbr` filter from Django\n- Allow dots in context object key names\n\n## 1.7.1 (2021-04-12)\n\n- Fix parsing of filter arguments separated by whitespaces\n\n## 1.7.0 (2021-03-07)\n\n- Allow rendering to `std::io::Write`\n- Follow symlinks in glob\n- Allow including lists of templates\n- Comment tags can now use whitespace control\n\n## 1.6.1 (2020-12-29)\n\n- Fix date filter sometimes panicking with some format input\n\n## 1.6.0 (2020-12-19)\n\n- Allow multiline function kwargs with trailing comma\n- Add `Context::try_insert`\n\n## 1.5.0 (2020-08-10)\n\n- Add the concept of safe functions and filters\n- Allow negative index on `slice` filter\n\n## 1.4.0 (2020-07-24)\n\n- Add `Context::get` and `Context::contains_key`\n\n## 1.3.1 (2020-06-09)\n\n- Fix `raw` tag swallowing all whitespace at beginning and end\n- Make batch template sources generic\n- Automatically add function/test/filter function name to their error message\n\n## 1.3.0 (2020-05-16)\n\n- Add a `urlencode_strict` filter\n- Add more array literals feature in templates\n- Make `filter` filter value argument optional\n\n## 1.2.0 (2020-03-29)\n\n- Add `trim_start`, `trim_end`, `trim_start_matches` and `trim_end_matches` filters\n- Allow blocks in filter sections\n\n## 1.1.0 (2020-03-08)\n\n- Add Tera::render_str, like Tera::one_off but can use an existing Tera instance\n\n## 1.0.2 (2020-01-13)\n\n- Length filter now errors for things other than array, objects and strings. The fact that it was returning 0 before\nfor other types was something that should have been fixed before 1.0 but got forgotten and was considered a bug.\n\n\n## 1.0.1 (2019-12-18)\n\n- Fix filter sections not keeping whitespaces\n- The filesizeformat filter now takes a usize instead of a i64: no changes to behaviour\n\n## 1.0.0 (2019-12-07)\n\n### Breaking changes\n\n- Now requires Rust 1.34\n- Removed error-chain errors and added rich Error enum instead\n- Filter, Tester and Function are now traits and now take borrowed values instead of owned\n- Updated for 2018 edition\n- Require macros import to be at the top of the files along with `extends` as it is fairly cheap and\nthe code already only really look there.\n- Enforce spacing in tags at the parser, before `ifsomething` was considered ok\n- Pluralize filter now uses `singular` and `plural` arguments instead of `suffix`\n- Add a test for checking whether a variable is an object\n- Escaping now happens before inserting the final result of an expression: no need anymore to add `| safe` everywhere,\nonly at the last position\n- Remove `safe` argument of the urlencode filter, `/` is still escaped by default\n- The `compile_templates!` macro has been removed\n\n### Others\n\n- Tests can now use `value is not defined` order for negation (https://github.com/Keats/tera/issues/308)\n- Add `nth` filter to get the nth value in an array\n- You can now use glob patterns in `Tera::new`\n- `default` filter now works on Null values\n- Literal numbers in template overflowing i64/f64 will now be an error instead of panicking\n- Allow arrays as test arguments\n- Add the `in` operator to check if a left operand is contained in a right one. Also supports negation as `not in`\n- Add `Context::from_value` to instantiate a `Context` from a serde_json `Value`\n- Add `Context::from_serialize` to instantiate a `Context` from something that impl `Serialize`\n- Make tests helper fns `number_args_allowed`, `value_defined` and `extract_string` public\n- Add `else` clause to for loops\n- Filters are now evaluated when checking if/elif conditions\n- Allow `{{-` and `-}}` for whitespace management\n- Add `xml_escape` filter\n- Grave accent is no longer escaped in HTML, it is not really needed anymore\n- Add a `builtins` default feature that gate all filters/functions requiring additional dependencies\n- Add `unique` and `map` filter\n- Add a `timezone` attribute to the `date` filter\n- Add a `get_random` function to get a random number in a range\n- Add a `get_env` function to get the value of an environment variable\n\n## 0.11.20 (2018-11-14)\n\n- Fix bugs in `filter` and `get` filters\n\n## 0.11.19 (2018-10-31)\n\n- Allow function calls in math expressions\n- Allow string concatenation to start with a number\n- Allow function calls in string concatenations\n- Add a `concat` filter to concat arrays or push an element to an array\n\n## 0.11.18 (2018-10-16)\n\n- Allow concatenation of strings and numbers\n\n## 0.11.17 (2018-10-09)\n\n- Clear local context on each forloop iteration\n- Fix variable lookup with `.` that was completely wrong\n- Now requires Rust 1.26 because of some dependencies update\n\n## 0.11.16 (2018-09-12)\n\n- Fix `set`/`set_global` not working correctly in macros\n- Deprecate `register_global_function` for `register_function`\n\n## 0.11.15 (2018-09-09)\n\n- Remove invalid `unreachable!` call causing panic in some combination or for loop and specific filters\n- Fix macros loading in parent templates and using them in child ones\n- Fix macros loading other macros not working when called in inheritance\n- Mark `Context::add` as deprecated and do not display it in the docs anymore (aka TIL the `deprecated` attribute)\n- Fix `__tera_context` not getting all the available context (`set`, `forloop` etc)\n- Better error message when variable indexing fails\n\n## 0.11.14 (2018-09-02)\n\n- Remove stray println\n\n## 0.11.13 (2018-09-02)\n\n- Add `as_str` filter\n- Way fewer allocations and significant speedup (2-5x) for templates with large objects/loops\n- Checks that all macro files are accounted for at compile time and errors if it's not the case\n\n## 0.11.12 (2018-08-04)\n\n- `filter` filter was not properly registered (╯°□°）╯︵ ┻━┻\n\n## 0.11.11 (2018-08-01)\n\n- `truncate` filter now works correctly on multichar graphemes\n\n## 0.11.10 (2018-08-01)\n\n- Add a `throw` global function to fail rendering from inside a template\n\n## 0.11.9 (2018-07-16)\n\n- Add a `matching` tester\n- Register `now` global function so it is available\n- Update `error-chain`\n\n## 0.11.8 (2018-06-20)\n\n- Add `True` and `False` as boolean values to match Python\n- Allow user to define their own escape function, if you want to generate JSON for example\n- Add `end` argument to the `truncate` filter to override the default ellipsis\n- Add a `group_by` filter\n- Add a `filter` filter\n- Add the `~` operator to concatenate strings\n- Add a `now` global function to get local and UTC datetimes\n- Add feature to enable the `preserve_order` feature of serde_json\n- Less confusing behaviour with math arithmetics\n\n## 0.11.7 (2018-04-24)\n\n- Add array literal instantiation from inside Tera for set, set_global, kwargs\nand for loop container\n- Fix panic on truncate filter\n\n## 0.11.6 (2018-03-25)\n\n- Add `break` and `continue` to forloops\n- Fix strings delimited by single quote and backtick not removing the delimiters\n\n\n## 0.11.5 (2018-03-01)\n\n- Re-export `serde_json::Number` as well\n\n## 0.11.4 (2018-02-28)\n\n- Re-export `serde_json::Map` as well\n- You can now access inside a variable using index notation: `{{ arr[0] }}`, `{{ arr[idx] }}` etc\nthanks to @bootandy\n- Add `Context::insert` identical to `Context::add` to mirror Rust HashMap/BTreeMap syntax\n\n\n## 0.11.3 (2018-02-15)\n\n- Add a `slice` filter for arrays\n- Fix macro files importing other macro files not loading properly\n- Fix forloop container being allowed logic expressions\n- Much improved parsing error messages\n\n## 0.11.2 (2018-02-01)\n\n- Fix regression when including templates that import macros\n- Fix `pluralize` filter for real this time!\n\n## 0.11.1 (2018-01-25)\n\n- Fix regression with expressions in comparisons\n\n## 0.11.0 (2018-01-22)\n\n### Breaking changes\n\n- Tests parentheses are now mandatory if there are arguments (`divisibleby 2` -> `divisibleby(2)`)\n- Tests can be only used on variables now, not on expressions\n- Escaping happens immediately now instead of waiting for the filters to be called, unless `safe` is first.\nIf you want the old behaviour you will need to start the a chain of filters with `| safe` as the first one\n\n### Others\n\n- Tests, global functions calls and macro calls are now expressions and can be combined like so: `if x is divisibleby(2) and x > 10`\n- Add default arguments for macro arguments\n- Add whitespace management similar to Liquid and Jinja2\n- Add parentheses to expressions to remove ambiguities\n- Block & macro end tag name are no longer mandatory and it doesn't error on mismatched names between\nthe start and end tag anymore\n- Filters can now be applied to expressions\n- Add modulo operator `%` for math expressions\n- Allow comment tags before the extend tag\n- Make `NaiveDateTime` work with the `date` filter\n- `pluralize` filter now returns the plural suffix for 0 thing as it's apparently what English does\n- Add a `set_global` tag that allows you to set something in the global context: meant to be used in forloops where\nthe normal `set` would put the value into the loop context\n- Add `starting_with`, `ending_with` and `containing` tests\n- Add `json_encode`, `default` and `sort` filters\n- Strings can now also be contained in backticks and single quotes in templates\n\n## 0.10.10 (2017-08-24)\n\n- Add `Tera::parse` for some niche use-cases\n\n## 0.10.9 (2017-08-02)\n\n- Handle path to templates starting with \"./\"\n- Fix loop and macro context overlaps\n- Fix variables being escaped when given to `set` or as arguments to filters/macros/global fns\n\n## 0.10.8 (2017-06-24)\n\n- Update chrono\n\n## 0.10.7 (2017-06-16)\n\n- Fix not being able to use variables starting with `or`, `and` and `not`\n- Fix `<=` and `>=` not being recognised properly\n- Fix if/elif conditions falling through: only the first valid one will be rendered\n- Handle NaN results in `{% set %}` instead of panicking\n- Allow math node on if/elif conditions & fix f64 truthiness\n\n## 0.10.6 (2017-05-23)\n\n- Fix not being able to call global functions without arguments\n- Fix multiple inheritance not rendering blocks as expected for nested blocks\n- Allow filters on key/value for loop containers\n\n## 0.10.5 (2017-05-13)\n\n- Fix bug with `{% set %}` in forloops\n\n## 0.10.4 (2017-05-09)\n\n- Add `Send` to `GlobalFn` return type\n\n## 0.10.3 (2017-05-09)\n\n- Add global functions, see README\n- Add set tag, see README\n- Add get filter\n\n## 0.10.2 (2017-05-03)\n\n- Fix bug with section filter swallowing all content after the end tag\n- Allow whitespace in function args\n\n## 0.10.1 (2017-04-25)\n\n- Fix bug with variable in loop using starting with the container name (#165)\n- Allow whitespace in macros/filters params\n\n## 0.10.0 (2017-04-21)\n\n### Breaking changes\n- Update Serde to 1.0.0\n\n### Others\n- Fix date filter converting everything to UTC\n- Fix panic when using filters on forloop container\n\n## 0.9.0 (2017-04-05)\n\n### Breaking changes\n- Fix bug in Windows where the glob path was not removed correctly\n\n### Others\n- `Tera::extend` now also copy filters and testers\n\n\n## 0.8.1 (2017-03-15)\n\n- Macro rendering perf improved and general code cleanup thanks to @Peternator7\n- Fix bug in parser with floats\n- Make `date` filter work with string input in `YYYY-MM-DD` format\n- Big parsing improvement (~20-40%) for projects with macros and inheritance\n- Add `Tera::extend` to extend another instance of Tera\n- Add `Tera::full_reload` that will re-run the glob and parse all templates found.\n- Make `Tera::add_raw_template{s}` and `Tera::add_template_file{s}` part of the public API\n- Fix location in error message when erroring in a child template\n\n\n## 0.8.0 (2017-03-03)\n\n### Breaking changes\n- Remove `value_render` and `value_one_off`, you can now use `render` and `one_off`\nfor both values and context\n\n### Others\n- Speed improvements on both parsing and rendering (~20-40% faster)\n- Better error message on variable lookup failure in loops\n- Can now iterate on maps/struct using the `{% for key, val in my_object %}` construct\n\n\n## 0.7.2 (2017-02-18)\n\n- Update chrono version\n- Make variable block like `{{ \"hey\" }}` render correctly\n\n## 0.7.1 (2017-02-05)\n\n- Support filter sections\n- Fix path prefix trimming on Windows\n\n## 0.7.0 (2017-02-01)\n\n### Breaking changes\n\n- `Tera::add_template` -> `Tera::add_raw_template`\n- `Tera::add_templates` -> `Tera::add_raw_templates`\n\n### Others\n\n- Performance improvement thanks to @clarcharr\n- Better error message for `value_render`. Thanks to @SilverWingedSeraph for the report\n- Hide `add_raw_template` and `add_raw_templates` from docs, they were meant for internal use\n- Exported macros now use the `$crate` variable, which means you don't need to import anything from Tera to have\nthem working\n- Expose AST (not covered by semver)\n- Add a `Context::extend` method to merge a context object into another one\n\n## 0.6.2 (2017-01-08)\n\n- Performance improvements thanks to @wdv4758h\n- Correctly register `date` filter and make it work on a RFC3339 string as well thanks to @philwhineray\n\n## 0.6.1 (2016-12-28)\n\n- Added `Tera::value_one_off` to parse and render a single template using a\nJson value as context\n\n## 0.6.0 (2016-12-26)\n\n### BREAKING CHANGES\n- `not` is now a Tera keyword\n\n### Others\n- Added `#![deny(missing_docs)]` to the crate\n- Added `Tera::one_off` to parse and render a single template\n- Added `not` operator in conditions to mean falsiness (equivalent to `!` in Rust)\n- Remove specific error message when using `||` or `&&`\n- Improved performances for parsing and rendering (~5-20%)\n- Added `precision` arg to `round` filter\n- Added `date` filter to format a timestamp to a date(time) string\n\n## 0.5.0 (2016-12-19)\n\nA few breaking changes in this one\n\n### BREAKING CHANGES\n- Tera no longer panics when parsing templates, it returns an error instead\n- Tester fn signature changes from `fn(&str, Option<Value>, Vec<Value>) -> Result<bool>` to `fn(Option<Value>, Vec<Value>) -> Result<bool>`\n- Rename `TeraResult` export to `Result`\n\n### Others\n- Stabilized `Tera::add_template` and `Tera::add_templates`\n- Added `compile_templates!` macro to try to compile all templates and, in case of errors,\nprint them and exit the process\n- Much improved error messages\n- Add a magical variable `__tera_context` that will pretty print the current context\n- More documentation inside the crate itself\n- Actually register the `filesizeformat`, `slugify`, `addslashes`, good thing no one noticed\n- Add `divisibleby` and `iterable` test\n- Made `try_get_value!` macro work outside of Tera\n\n## 0.4.1 (2016/12/07)\n\n- Remove println! left behind\n- Fix macros not being found in child templates\n- Export `Value` and `to_value` (currently from serde-json)\n\n## 0.4.0 (2016/12/02)\n- Add macros\n- Add `filesizeformat` filter\n- Add autoescape\n- Add multiple level inheritance\n- Add nested blocks\n- Add `{{ super() }}`\n\nThanks to @SergioBenitez and @yonran for the help!\n\n\n## 0.3.1 (2016/10/11)\n- Fix regression when using variables in forloops + add test for it\n\n## 0.3.0 (2016/10/11)\n\n- Change signature of tests functions (BREAKING CHANGE)\n- Add more tests: `undefined`, `odd`, `even`, `number` and `string`\n- Add `include` directive to include another file\n- Indexed array/tuple access using the `.x` where `x` is an integer\n\nThanks to @SergioBenitez and @andrelmartins for the contributions!\n\n\n## 0.2.0 (2016/09/27)\n\n- Added filters, see README for current list\n- Added tests, only `defined` for now\n\nThanks to @SergioBenitez, @orhanbalci, @foophoof and @Peternator7 for the\ncontribution!\n\n## 0.1.3 (2016/08/14)\n- Completely new parser\n- Expose TeraError\n"
        },
        {
          "name": "Cargo.toml",
          "type": "blob",
          "size": 1.5732421875,
          "content": "[package]\nname = \"tera\"\nversion = \"1.20.0\"\nauthors = [\"Vincent Prouillet <hello@prouilletvincent.com>\"]\nlicense = \"MIT\"\nreadme = \"README.md\"\ndescription = \"Template engine based on Jinja2/Django templates\"\nhomepage = \"https://keats.github.io/tera/\"\nrepository = \"https://github.com/Keats/tera\"\nkeywords = [\"template\", \"html\", \"django\", \"markup\", \"jinja2\"]\ncategories = [\"template-engine\"]\nedition = \"2018\"\ninclude = [\"/src/**/*\", \"/LICENSE\", \"/README.md\", \"/CHANGELOG.md\"]\nrust-version = \"1.70\"\n\n[dependencies]\nglobwalk = \"0.9.1\"\nserde = \"1.0\"\nserde_json = \"1.0\"\npest = \"2.5.5\"\npest_derive = \"2.5.5\"\nlazy_static = \"1.4\"\n# used in striptags, spaceless & titles filters. Already pulled by globwalk\nregex = \"1.7\"\n# used in truncate filter and string iteration\nunic-segment = \"0.9\"\n\n# used in slugify filter\nslug = {version = \"0.1\", optional = true}\n# used in urlencode filter\npercent-encoding = {version = \"2.2\", optional = true}\n# used in filesizeformat filter\nhumansize = {version = \"2.1\", optional = true}\n# used in date format filter\nchrono = {version = \"0.4.27\", optional = true, default-features = false, features = [\"std\", \"clock\"]}\n# used in date format filter\nchrono-tz = {version = \"0.9\", optional = true}\n# used in get_random function\nrand = {version = \"0.8\", optional = true}\n\n[dev-dependencies]\nserde_derive = \"1.0\"\npretty_assertions = \"1\"\ntempfile = \"3\"\n\n[features]\ndefault = [\"builtins\"]\nbuiltins = [\"urlencode\", \"slug\", \"humansize\", \"chrono\", \"chrono-tz\", \"rand\"]\nurlencode = [\"percent-encoding\"]\npreserve_order = [\"serde_json/preserve_order\"]\ndate-locale = [\"builtins\", \"chrono/unstable-locales\"]\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.0595703125,
          "content": "The MIT License (MIT)\n\nCopyright (c) 2015 Vincent Prouillet\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 1.2724609375,
          "content": "# Tera\n\n[![Actions Status](https://github.com/Keats/tera/workflows/ci/badge.svg)](https://github.com/Keats/tera/actions)\n[![Crates.io](https://img.shields.io/crates/v/tera.svg)](https://crates.io/crates/tera)\n[![Docs](https://docs.rs/tera/badge.svg)](https://docs.rs/crate/tera/)\n[![Gitter](https://badges.gitter.im/Tera-templates/community.svg)](https://gitter.im/Tera-templates/community?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge)\n\nTera is a template engine inspired by [Jinja2](http://jinja.pocoo.org/) and the [Django template language](https://docs.djangoproject.com/en/3.1/topics/templates/).\n\n```jinja2\n<title>{% block title %}{% endblock title %}</title>\n<ul>\n{% for user in users %}\n  <li><a href=\"{{ user.url }}\">{{ user.username }}</a></li>\n{% endfor %}\n</ul>\n```\n\nIt does not aim to be 100% compatible with them but has many of the Jinja2/Django filters and testers.\n\n## Documentation\nAPI documentation is available on [docs.rs](https://docs.rs/crate/tera/).\n\nTera documentation is available on its [site](http://keats.github.io/tera/docs).\n\n## SemVer\nThis project follows SemVer only for the public API, public API here meaning functions appearing in the docs.\nSome features, like accessing the AST, are also available but breaking changes in them can happen in any versions.\n"
        },
        {
          "name": "benches",
          "type": "tree",
          "content": null
        },
        {
          "name": "deny.toml",
          "type": "blob",
          "size": 9.591796875,
          "content": "# This template contains all of the possible sections and their default values\n\n# Note that all fields that take a lint level have these possible values:\n# * deny - An error will be produced and the check will fail\n# * warn - A warning will be produced, but the check will not fail\n# * allow - No warning or error will be produced, though in some cases a note\n# will be\n\n# The values provided in this template are the default values that will be used\n# when any section or field is not specified in your own configuration\n\n# If 1 or more target triples (and optionally, target_features) are specified,\n# only the specified targets will be checked when running `cargo deny check`.\n# This means, if a particular package is only ever used as a target specific\n# dependency, such as, for example, the `nix` crate only being used via the\n# `target_family = \"unix\"` configuration, that only having windows targets in\n# this list would mean the nix crate, as well as any of its exclusive\n# dependencies not shared by any other crates, would be ignored, as the target\n# list here is effectively saying which targets you are building for.\ntargets = [\n    # The triple can be any string, but only the target triples built in to\n    # rustc (as of 1.40) can be checked against actual config expressions\n    #{ triple = \"x86_64-unknown-linux-musl\" },\n    # You can also specify which target_features you promise are enabled for a\n    # particular target. target_features are currently not validated against\n    # the actual valid features supported by the target architecture.\n    #{ triple = \"wasm32-unknown-unknown\", features = [\"atomics\"] },\n]\n\n# This section is considered when running `cargo deny check advisories`\n# More documentation for the advisories section can be found here:\n# https://embarkstudios.github.io/cargo-deny/checks/advisories/cfg.html\n[advisories]\n# The path where the advisory database is cloned/fetched into\ndb-path = \"~/.cargo/advisory-db\"\n# The url(s) of the advisory databases to use\ndb-urls = [\"https://github.com/rustsec/advisory-db\"]\n# The lint level for security vulnerabilities\nvulnerability = \"deny\"\n# The lint level for unmaintained crates\nunmaintained = \"warn\"\n# The lint level for crates that have been yanked from their source registry\nyanked = \"warn\"\n# The lint level for crates with security notices. Note that as of\n# 2019-12-17 there are no security notice advisories in\n# https://github.com/rustsec/advisory-db\nnotice = \"warn\"\n# A list of advisory IDs to ignore. Note that ignored advisories will still\n# output a note when they are encountered.\nignore = [\n    #\"RUSTSEC-0000-0000\",\n]\n# Threshold for security vulnerabilities, any vulnerability with a CVSS score\n# lower than the range specified will be ignored. Note that ignored advisories\n# will still output a note when they are encountered.\n# * None - CVSS Score 0.0\n# * Low - CVSS Score 0.1 - 3.9\n# * Medium - CVSS Score 4.0 - 6.9\n# * High - CVSS Score 7.0 - 8.9\n# * Critical - CVSS Score 9.0 - 10.0\n#severity-threshold =\n\n# If this is true, then cargo deny will use the git executable to fetch advisory database.\n# If this is false, then it uses a built-in git library.\n# Setting this to true can be helpful if you have special authentication requirements that cargo-deny does not support.\n# See Git Authentication for more information about setting up git authentication.\n#git-fetch-with-cli = true\n\n# This section is considered when running `cargo deny check licenses`\n# More documentation for the licenses section can be found here:\n# https://embarkstudios.github.io/cargo-deny/checks/licenses/cfg.html\n[licenses]\n# The lint level for crates which do not have a detectable license\nunlicensed = \"deny\"\n# List of explicitly allowed licenses\n# See https://spdx.org/licenses/ for list of possible licenses\n# [possible values: any SPDX 3.11 short identifier (+ optional exception)].\nallow = [\n    \"MIT\",\n    \"Apache-2.0\",\n    \"BSD-3-Clause\",\n]\n# List of explicitly disallowed licenses\n# See https://spdx.org/licenses/ for list of possible licenses\n# [possible values: any SPDX 3.11 short identifier (+ optional exception)].\ndeny = [\n    #\"Nokia\",\n]\n# Lint level for licenses considered copyleft\ncopyleft = \"warn\"\n# Blanket approval or denial for OSI-approved or FSF Free/Libre licenses\n# * both - The license will be approved if it is both OSI-approved *AND* FSF\n# * either - The license will be approved if it is either OSI-approved *OR* FSF\n# * osi-only - The license will be approved if is OSI-approved *AND NOT* FSF\n# * fsf-only - The license will be approved if is FSF *AND NOT* OSI-approved\n# * neither - This predicate is ignored and the default lint level is used\nallow-osi-fsf-free = \"neither\"\n# Lint level used when no other predicates are matched\n# 1. License isn't in the allow or deny lists\n# 2. License isn't copyleft\n# 3. License isn't OSI/FSF, or allow-osi-fsf-free = \"neither\"\ndefault = \"deny\"\n# The confidence threshold for detecting a license from license text.\n# The higher the value, the more closely the license text must be to the\n# canonical license text of a valid SPDX license file.\n# [possible values: any between 0.0 and 1.0].\nconfidence-threshold = 0.8\n# Allow 1 or more licenses on a per-crate basis, so that particular licenses\n# aren't accepted for every possible crate as with the normal allow list\nexceptions = [\n    # Each entry is the crate and version constraint, and its specific allow\n    # list\n    #{ allow = [\"Zlib\"], name = \"adler32\", version = \"*\" },\n    # tera does not re-distribute Unicode datafiles\n    { allow = [\"MIT\", \"Apache-2.0\", \"Unicode-DFS-2016\"], name = \"unicode-ident\" },\n]\n\n# Some crates don't have (easily) machine readable licensing information,\n# adding a clarification entry for it allows you to manually specify the\n# licensing information\n#[[licenses.clarify]]\n# The name of the crate the clarification applies to\n#name = \"ring\"\n# The optional version constraint for the crate\n#version = \"*\"\n# The SPDX expression for the license requirements of the crate\n#expression = \"MIT AND ISC AND OpenSSL\"\n# One or more files in the crate's source used as the \"source of truth\" for\n# the license expression. If the contents match, the clarification will be used\n# when running the license check, otherwise the clarification will be ignored\n# and the crate will be checked normally, which may produce warnings or errors\n# depending on the rest of your configuration\n#license-files = [\n    # Each entry is a crate relative path, and the (opaque) hash of its contents\n    #{ path = \"LICENSE\", hash = 0xbd0eed23 }\n#]\n\n[licenses.private]\n# If true, ignores workspace crates that aren't published, or are only\n# published to private registries.\n# To see how to mark a crate as unpublished (to the official registry),\n# visit https://doc.rust-lang.org/cargo/reference/manifest.html#the-publish-field.\nignore = false\n# One or more private registries that you might publish crates to, if a crate\n# is only published to private registries, and ignore is true, the crate will\n# not have its license(s) checked\nregistries = [\n    #\"https://sekretz.com/registry\n]\n\n# This section is considered when running `cargo deny check bans`.\n# More documentation about the 'bans' section can be found here:\n# https://embarkstudios.github.io/cargo-deny/checks/bans/cfg.html\n[bans]\n# Lint level for when multiple versions of the same crate are detected\nmultiple-versions = \"warn\"\n# Lint level for when a crate version requirement is `*`\nwildcards = \"allow\"\n# The graph highlighting used when creating dotgraphs for crates\n# with multiple versions\n# * lowest-version - The path to the lowest versioned duplicate is highlighted\n# * simplest-path - The path to the version with the fewest edges is highlighted\n# * all - Both lowest-version and simplest-path are used\nhighlight = \"all\"\n# List of crates that are allowed. Use with care!\nallow = [\n    #{ name = \"ansi_term\", version = \"=0.11.0\" },\n]\n# List of crates to deny\ndeny = [\n    # Each entry the name of a crate and a version range. If version is\n    # not specified, all versions will be matched.\n    #{ name = \"ansi_term\", version = \"=0.11.0\" },\n    #\n    # Wrapper crates can optionally be specified to allow the crate when it\n    # is a direct dependency of the otherwise banned crate\n    #{ name = \"ansi_term\", version = \"=0.11.0\", wrappers = [] },\n]\n# Certain crates/versions that will be skipped when doing duplicate detection.\nskip = [\n    #{ name = \"ansi_term\", version = \"=0.11.0\" },\n]\n# Similarly to `skip` allows you to skip certain crates during duplicate\n# detection. Unlike skip, it also includes the entire tree of transitive\n# dependencies starting at the specified crate, up to a certain depth, which is\n# by default infinite\nskip-tree = [\n    #{ name = \"ansi_term\", version = \"=0.11.0\", depth = 20 },\n]\n\n# This section is considered when running `cargo deny check sources`.\n# More documentation about the 'sources' section can be found here:\n# https://embarkstudios.github.io/cargo-deny/checks/sources/cfg.html\n[sources]\n# Lint level for what to happen when a crate from a crate registry that is not\n# in the allow list is encountered\nunknown-registry = \"warn\"\n# Lint level for what to happen when a crate from a git repository that is not\n# in the allow list is encountered\nunknown-git = \"warn\"\n# List of URLs for allowed crate registries. Defaults to the crates.io index\n# if not specified. If it is specified but empty, no registries are allowed.\nallow-registry = [\"https://github.com/rust-lang/crates.io-index\"]\n# List of URLs for allowed Git repositories\nallow-git = []\n\n[sources.allow-org]\n# 1 or more github.com organizations to allow git sources for\n#github = [\"\"]\n# 1 or more gitlab.com organizations to allow git sources for\n#gitlab = [\"\"]\n# 1 or more bitbucket.org organizations to allow git sources for\n#bitbucket = [\"\"]\n"
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "fuzz",
          "type": "tree",
          "content": null
        },
        {
          "name": "rustfmt.toml",
          "type": "blob",
          "size": 0.0283203125,
          "content": "use_small_heuristics = \"max\"\n"
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}