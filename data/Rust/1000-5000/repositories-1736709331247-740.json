{
  "metadata": {
    "timestamp": 1736709331247,
    "page": 740,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjc0MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "rust-skia/rust-skia",
      "stars": 1505,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".devcontainer",
          "type": "tree",
          "content": null
        },
        {
          "name": ".dockerignore",
          "type": "blob",
          "size": 0.0771484375,
          "content": "/docker/\n/target/\n/skia-bindings/skia/\n/skia-bindings/depot_tools/\n/Dockerfile\n"
        },
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 0.0615234375,
          "content": "root = true\n\n[*]\nend_of_line = lf\ninsert_final_newline = true\n\n"
        },
        {
          "name": ".envrc",
          "type": "blob",
          "size": 0.009765625,
          "content": "use flake\n"
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.0185546875,
          "content": "* text=auto eol=lf\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.07421875,
          "content": "/Cargo.lock\ntarget/\n/.cargo/credentials\n/cmake-build-debug/\n.direnv/\n/tmp/\n\n"
        },
        {
          "name": ".gitmodules",
          "type": "blob",
          "size": 0.0888671875,
          "content": "[submodule \"skia\"]\n\tpath = skia-bindings/skia\n\turl = https://github.com/rust-skia/skia.git\n"
        },
        {
          "name": ".vscode",
          "type": "tree",
          "content": null
        },
        {
          "name": "CMakeLists.txt",
          "type": "blob",
          "size": 0.6083984375,
          "content": "# This file is used only for IDE support of src/bindings.cpp.\n\ncmake_minimum_required (VERSION 3.0)\nproject (skia-bindings)\n\ninclude_directories(skia-bindings/skia)\n\nadd_compile_definitions(SK_SHAPER_HARFBUZZ_AVAILABLE, SK_VULKAN, SK_XML, SK_METAL, SK_DIRECT3D)\n\nadd_library(skiabindings\n        skia-bindings/src/bindings.cpp\n        skia-bindings/src/gl.cpp\n        skia-bindings/src/gpu.cpp\n        skia-bindings/src/paragraph.cpp\n        skia-bindings/src/shaper.cpp \n        skia-bindings/src/svg.cpp\n        skia-bindings/src/vulkan.cpp\n        skia-bindings/src/metal.cpp\n        skia-bindings/src/d3d.cpp\n        )\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 2.728515625,
          "content": "# Rust-Skia Contribution Guidelines\n\nThank you for considering to contribute to rust-skia.\n\nWe welcome all contributions. Most likely, a large part of your contribution will be Rust code.\n\nTo contribute Rust code, format the code with `cargo fmt` and be sure that there are no warnings with `cargo clippy`. Don't try too hard follow Clippy suggestions. If a warning does not make sense, add a comment that explains why and mark the code with a `#[allow(clippy::*)]` attribute.\n\nIf possible, add a small test case for you changes. \n\nYour PR will be built for and tested on a number of targets on the CI before it can be merged. If that fails, we will do our best to help out.\n\nIf you'd like the changes in your PR to be released to [crates.io](https://crates.io/) timely, please say so, because we prefer to align crate releases with major [updates to Chrome stable](https://chromestatus.com/roadmap).\n\n## Repository organization\n\nThe repository consists of two primary cargo packages in the folders `/skia-bindings` and `/skia-safe`. `skia-bindings` contains the build support for Skia and the C++ bindings. `skia-safe` contains all the Rust code that wraps the Skia APIs.\n\n## Contributing Bindings & Wrappers\n\nWe did our best to cover most of the Skia API, but you'll find a lot of blind spots by looking closer:\n\n- GPU API support is incomplete, specifically functions that use callbacks.\n- Supporting [Skottie](https://skia.org/user/modules/skottie) would be a nice addition.\n\nFor larger contributions, familiarize yourself with the [various wrapper types](https://github.com/rust-skia/rust-skia/wiki) and consider filing an issue beforehand to give us a heads up and to receive additional directions.\n\n## Contributing Examples\n\nExamples should be added to `/skia-safe/examples` or directly to the `/skia-org` executable which provides a minimal infrastructure to render to PNG, PDF, and SVG files using the CPU or the GPU.\n\n## Updating Skia\n\nSince the beginning of this project, the maintainer team is updating rust-skia to match the Skia API version in the latest stable Chrome release. A new Chrome release [is scheduled](https://chromium.googlesource.com/chromium/src/+/master/docs/process/release_cycle.md) about every 4 weeks and most changes for the upcoming version are already settled when the current release is out, so there is enough time to update rust-skia. For most new Skia releases, the changes are trivial and are integrated without breaking backwards compatibility on the Rust side.\n\nEven though this puts some pressure on dependent projects, we'd try to keep rust-skia updated, because falling behind Chrome's and Flutter's development to keep Skia _modern_ is not an option.\n\n## Licensing\n\nPlease ensure that the code you contribute is compatible with the MIT license.\n\n"
        },
        {
          "name": "Cargo.toml",
          "type": "blob",
          "size": 0.3310546875,
          "content": "[workspace]\nresolver = \"2\"\nmembers = [\n    \"skia-safe\",\n    \"skia-svg-macros\",\n    \"skia-bindings\",\n    \"skia-org\",\n    \"mk-workflows\",\n    \"comment-converter\",\n]\n\n[workspace.package]\nrust-version = \"1.82\"\n\n[profile.release]\n# We want to build skia-org with with lto=\"thin\"\n# https://github.com/rust-skia/rust-skia/issues/565\nlto = \"thin\"\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.0966796875,
          "content": "MIT License\n\nCopyright (c) 2019 LongYinan & Armin Sander\nCopyright (c) 2019 rust-skia Contributors\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "Makefile",
          "type": "blob",
          "size": 6.35546875,
          "content": "doc-features-win=\"gl,vulkan,d3d,textlayout,svg,ureq,webp\"\ndoc-features-mac=\"gl,vulkan,metal,textlayout,svg,ureq,webp\"\ndoc-features-docs-rs=\"gl,textlayout,svg,ureq,webp\"\n\n.PHONY: all\nall:\n\t@echo \"make publish: publish the rust-skia packages to crates.io\"\n\t@echo \"make publish-only: do not verify or build packages, only publish the the packages\"\n\n# Test before releases.\n\n.PHONY: macos-qa\nmacos-qa:\n\t# https://github.com/rust-skia/rust-skia/issues/548\n\trustup update nightly\n\tcargo +nightly build -Z build-std --target x86_64-apple-ios-macabi --release\n\tcargo +nightly build -Z build-std --target aarch64-apple-ios-macabi --release\n\n# Test various configuration from inside crates.\n\n.PHONY: crate-tests\ncrate-tests: crate-bindings-binaries crate-bindings-build\n\n.PHONY: crate-bindings-binaries\ncrate-bindings-binaries: export FORCE_SKIA_BINARIES_DOWNLOAD=1\ncrate-bindings-binaries:\n\tcd skia-bindings && cargo publish -vv --dry-run --features \"gl,vulkan,textlayout,binary-cache\"\n\tcd skia-bindings && cargo publish -vv --dry-run \n\n.PHONY: crate-bindings-build\ncrate-bindings-build: export FORCE_SKIA_BUILD=1\ncrate-bindings-build: \n\tcd skia-bindings && cargo publish -vv --dry-run --features \"gl,vulkan,textlayout\"\n\tcd skia-bindings && cargo publish -vv --dry-run \n\n.PHONY: crate-post-release-test\ncrate-post-release-test:\n\trm -rf /tmp/skia-test\n\tcd /tmp && cargo new skia-test\n\tcd /tmp/skia-test && cargo add skia-safe\n\tcd /tmp/skia-test && cargo run\n\n# Publishes skia-bindings and skia-safe to crates.io\n# This is temporary and should be automated.\n# prerequisites:\n#   .cargo/credentials\n\n.PHONY: publish\npublish: package-bindings package-safe publish-bindings wait publish-safe\n\n.PHONY: publish-only\npublish-only: publish-bindings publish-safe\n\n.PHONY: publish-bindings\npublish-bindings:\n\tcd skia-bindings && cargo publish -vv --no-verify\n\n.PHONY: publish-bindings-docs\npublish-bindings-docs: bindings-docs\n\tcd skia-bindings && cp /tmp/bindings.rs bindings_docs.rs\n\tcd skia-bindings && cargo publish -vv --no-verify --allow-dirty\n\n# SVG Macros are most likely changed rarely. So this is separate.\n\n.PHONY: publish-svg-macros\npublish-svg-macros:\n\tcd skia-svg-macros && cargo publish -vv\n\n# Generates /tmp/bindings.rs with docs-rs features.\n\n.PHONY: bindings-docs\nbindings-docs:\n\tcargo build -vv --features ${doc-features-docs-rs}\n\tcp `${bindings-latest}` /tmp/bindings.rs\n\n\n.PHONY: bindings-docs-docker\nbindings-docs-docker:\n\tdocker build -f bindings-docs/Dockerfile . -t skia-bindings-docs\n\tdocker run -d --name skia-bindings-docs-container skia-bindings-docs\n\tdocker cp skia-bindings-docs-container:/tmp/bindings_docs.rs /tmp/bindings.rs\n\n.PHONY: publish-safe\npublish-safe:\n\tcd skia-safe && cargo publish -vv --no-verify --allow-dirty\n\n.PHONY: package\npackage: clean-packages package-bindings package-safe\n\n# bindings are not verifiable, so we do build them by hand.\n.PHONY: package-bindings\npackage-bindings: \n\trm -f target/package/skia-bindings-*.crate\n\tcd skia-bindings && cargo package -vv --no-verify \n\tcd target/package && tar xzf skia-bindings-*.crate\n\tcd target/package && cargo build -vv --release\n\n.PHONY: package-safe\npackage-safe:\n\trm -f target/package/skia-safe-*.crate\n\tcd skia-safe && cargo package -vv --no-verify --allow-dirty\n\n.PHONY: clean-packages\nclean-packages:\n\trm -rf target/package\n\n.PHONY: update-doc\nupdate-doc:\n\tcargo clean\n\trm -rf rust-skia.github.io\n\tgit clone git@github.com:rust-skia/rust-skia.github.io.git\n\tcd skia-safe && cargo doc --no-deps --lib --features ${doc-features-mac}\n\tcp -r target/doc rust-skia.github.io/\n\tcd rust-skia.github.io && git add --all\n\tcd rust-skia.github.io && git commit -m\"Auto-Update of /doc\" || true\n\tcd rust-skia.github.io && git push origin master\t\n\trm -rf rust-skia.github.io\n\n.PHONY: doc\ndoc:\n\tcargo doc --no-deps --features ${doc-features-mac}\n\nbuild-flags-win=--release --features \"gl,vulkan,d3d,textlayout,webp\"\n\n.PHONY: github-build-win\ngithub-build-win:\n\tcargo clean\n\tcargo build -p skia-safe ${build-flags-win} --all-targets\n\tcd cargo clippy ${build-flags-win} --all-targets -- -D warnings \n\tcd cargo test --all ${build-flags-win} --all-targets -- --nocapture\n\tcd cargo run ${build-flags-win}\n\n.PHONY: workflows\nworkflows:\n\tcargo run -p mk-workflows\n\n# Tests local builds based on the env vars `SKIA_BUILD_DEFINES` and `SKIA_LIBRARY_SEARCH_PATH`.\n#\n# This builds a set of libraries, copies them away and then tries to build with the libraries\n# referenced through `SKIA_LIBRARY_SEARCH_PATH`.\n#\n# https://github.com/rust-skia/rust-skia/pull/527\n\nlocal-build-features=gl,vulkan,webp,textlayout\n\n.PHONY: test-local-build prepare-local-build build-local-build\ntest-local-build: prepare-local-build build-local-build\n\nprepare-local-build:\n\tcargo clean\n\tcargo build --release --features ${local-build-features}\n\trm -rf tmp/\n\tmkdir -p tmp/\n\tfind target -name \"libsk*.a\" -type f -exec cp {} tmp/ \\;\n\tfind target -name \"libicu.a\" -type f -exec cp {} tmp/ \\;\n\tfind target -name \"skia-defines.txt\" -type f -exec cp {} tmp/ \\;\n\t# Windows\n\tfind target -name \"sk*.lib\" -type f -exec cp {} tmp/ \\;\n\tfind target -name \"icu.lib\" -type f -exec cp {} tmp/ \\;\n\tfind target -name \"icudtl.dat\" -type f -exec cp {} tmp/ \\;\n\t# The bindings are expected to be regenerated in a local build.\n\trm tmp/*-bindings.*\n\nbuild-local-build:\n\tcargo clean\n\tSKIA_SOURCE_DIR=$(shell pwd)/skia-bindings/skia SKIA_BUILD_DEFINES=`cat tmp/skia-defines.txt` SKIA_LIBRARY_SEARCH_PATH=$(shell pwd)/tmp cargo build --release --no-default-features -vv --features ${local-build-features}\n\n# Diffs the rust skia commits of the current branch with what is commited to the master branch.\nrust-skia-logs = git log --oneline | head -n 1000 | grep rust-skia | cut -d' ' -f2-\n.PHONY: diff-skia\ndiff-skia:\n\trm -rf /tmp/rust-skia-cmp\n\tgit clone . /tmp/rust-skia-cmp\n\tcd /tmp/rust-skia-cmp && git checkout master && git submodule update --init\n\tcd /tmp/rust-skia-cmp/skia-bindings/skia && ${rust-skia-logs} >/tmp/rust-skia-cmp-master.txt\n\tcd skia-bindings/skia && ${rust-skia-logs} >/tmp/rust-skia-cmp-current.txt\n\tdiff /tmp/rust-skia-cmp-master.txt /tmp/rust-skia-cmp-current.txt\n\n# Diffs the public skia-safe API with the latest on crates.io using cargo public-api\n.PHONY: diff-api\ndiff-api:\n\tcargo public-api -p skia-safe -s --features=all-macos diff latest -- >skia-safe-api.diff\n\nbindings-latest = find target -name \"bindings.rs\" -exec ls -t {} + | head -n 1\n\n.PHONY: locate-bindings\nlocate-bindings:\n\t${bindings-latest}\n\n.PHONY: open-bindings\nopen-bindings:\n\tcode `${bindings-latest}`\n\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 15.6435546875,
          "content": "# <img alt=\"\" width=\"48\" align=\"top\" src=\"artwork/rust-skia-icon_512x512.png\"/> Safe Rust bindings for the [Skia Graphics Library](https://skia.org/).\n\n[![crates.io](https://img.shields.io/crates/v/skia-safe)](https://crates.io/crates/skia-safe) [![license](https://img.shields.io/crates/l/skia-safe)](LICENSE) [![Windows QA](https://github.com/rust-skia/rust-skia/actions/workflows/windows-qa.yaml/badge.svg?branch=master)](https://github.com/rust-skia/rust-skia/actions/workflows/windows-qa.yaml) [![Linux QA](https://github.com/rust-skia/rust-skia/actions/workflows/linux-qa.yaml/badge.svg?branch=master)](https://github.com/rust-skia/rust-skia/actions/workflows/linux-qa.yaml) [![macOS QA](https://github.com/rust-skia/rust-skia/actions/workflows/macos-qa.yaml/badge.svg?branch=master)](https://github.com/rust-skia/rust-skia/actions/workflows/macos-qa.yaml)\n\nSkia Submodule Status: chrome/m132 ([upstream changes][skia-upstream], [our changes][skia-ours]).\n\n[skia-upstream]: https://github.com/rust-skia/skia/compare/m132-0.81.0...google:chrome/m132\n[skia-ours]: https://github.com/google/skia/compare/chrome/m132...rust-skia:m132-0.81.0\n\n## About\n\nThis project provides _up to date_ safe bindings that bridge idiomatic Rust with Skia's C++ API on desktop and mobile platforms, including GPU rendering backends for [Vulkan](<https://en.wikipedia.org/wiki/Vulkan_(API)>), [Metal](<https://en.wikipedia.org/wiki/Metal_(API)>), [OpenGL](https://en.wikipedia.org/wiki/OpenGL), and [Direct3D](https://en.wikipedia.org/wiki/Direct3D).\n\n## Status\n\n### Documentation\n\nBecause we [can't build on docs.rs](https://docs.rs/crate/skia-safe/0.34.0/builds), the `cargo doc` output for skia-safe is manually created and uploaded to [rust-skia.github.io](https://rust-skia.github.io/doc/skia_safe).\n\nWe (slowly) [add more documentation](https://github.com/rust-skia/rust-skia/issues/446) by converting Skia's Doxygen comments to Rust.\n\n### Crate\n\nA prerelease crate is available from [crates.io](https://crates.io/crates/skia-safe) and invoking\n\n```bash\ncargo add skia-safe\n```\n\nin your project's folder should get you started. And you might want to take a look at the [gl-window](https://github.com/rust-skia/rust-skia/tree/master/skia-safe/examples/gl-window) example if you plan to render to a window.\n\n**On Linux** you may run into trouble when **OpenSSL libraries** are missing. On **Debian** and **Ubuntu** they can be installed with:\n\n```bash\nsudo apt-get install pkg-config libssl-dev\n```\n\nFor other platforms, more information is available at the [OpenSSL crate documentation](https://docs.rs/openssl/0.10.24/openssl/#automatic).\n\n### Platform Support, Build Targets, and Prebuilt Binaries\n\nBecause building Skia takes a lot of time and needs tools that may be missing, the skia-bindings crate's `build.rs` attempts to download prebuilt binaries from [the skia-binaries repository](https://github.com/rust-skia/skia-binaries/releases) using the `curl` command line tool.\n\n| Platform                          | Binaries                                                   |\n| --------------------------------- | ---------------------------------------------------------- |\n| Windows                           | `x86_64-pc-windows-msvc`                                   |\n| Linux Ubuntu 16+<br />CentOS 7, 8 | `x86_64-unknown-linux-gnu`<br/>`aarch64-unknown-linux-gnu` |\n| macOS                             | `x86_64-apple-darwin`<br/>`aarch64-apple-darwin`           |\n| Android                           | `aarch64-linux-android`<br/>`x86_64-linux-android`         |\n| iOS                               | `aarch64-apple-ios`<br/>`x86_64-apple-ios`                 |\n| WebAssembly                       | `wasm32-unknown-emscripten`                                |\n\n### Wrappers & Codecs & Supported Features\n\nThe supported wrappers, Skia codecs, and additional Skia features are documented in the [skia-safe package's readme](skia-safe/README.md). Prebuilt binaries are available for most feature combinations.\n\n## Building\n\nIf the target platform or feature configuration is not available as a prebuilt binary, skia-bindings' `build.rs` will try to build Skia and generate the Rust bindings.\n\nFor building Skia from source, **LLVM**, **Python 3**, and **Ninja** are required:\n\n**LLVM**\n\nWe recommend the version that comes preinstalled with your platform, or, if not available, the [latest official LLVM release](http://releases.llvm.org/download.html). To see which version of LLVM/Clang is installed on your system, use `clang --version`.\n\n**Python 3**\n\nThe build script probes for `python --version` and `python3 --version` and uses the first one that looks like a version 3 executable for building Skia.\n\n**Ninja**\n\nThe build system for Skia. `ninja` is available as a binary package on all major platforms. Install `ninja` or `ninja-build` and make sure it is available `PATH` with `ninja --version`.\n\n### On macOS\n\n- Install the Command Line Tools for Xcode with\n\n  ```bash\n  xcode-select --install\n  ```\n\n  or download and install the [Command Line Tools for Xcode](https://developer.apple.com/download/more/).\n\n- As an alternative to Apple's XCode LLVM, install LLVM via `brew install llvm` or `brew install llvm` and then set `PATH`, `CPPFLAGS`, and `LDFLAGS` like instructed.\n\n  If the environment variables are not set, [bindgen](https://github.com/rust-lang/rust-bindgen) will most likely use the wrong `libclang.dylib` and cause confusing compilation errors (see #228).\n\n### On Windows\n\n- Have the latest versions of `git` and Rust ready.\n\n- [Install Visual Studio 2022 Build Tools](https://visualstudio.microsoft.com/downloads/) or one of the other IDE editions. If you installed the IDE, make sure that the [Desktop Development with C++ workload](https://docs.microsoft.com/en-us/cpp/build/vscpp-step-0-installation?view=msvc-170) is installed.\n\n- Install the [latest LLVM](http://releases.llvm.org/download.html) distribution.\n\n  If the environment variable `LLVM_HOME` is not defined, the build script will look for LLVM installations located at `C:\\Program Files\\LLVM\\`, `C:\\LLVM\\`, and `%USERPROFILE%\\scoop\\apps\\llvm\\current\\`.\n\n- [MSYS2](https://www.msys2.org/):\n\n  - Install Python 3 with `pacman -S python`.\n\n- Windows Shell (`Cmd.exe`):\n\n  - Download and install Python 3 from [python.org](https://www.python.org/downloads).\n\n- Install and select the MSVC toolchain:\n  ```bash\n  rustup default stable-msvc\n  ```\n\n### On Linux\n\n#### Ubuntu 20+\n\n- LLVM/Clang should be available already, if not, [install the latest version](http://releases.llvm.org/download.html).\n- If OpenGL libraries are missing, install the drivers for you graphics card, or a mesa package like `libgl1-mesa-dev`.\n- For **X11**, build with feature `x11`.\n- For **Wayland**, install `libwayland-dev` and build with the `wayland` feature.\n\n### For Android\n\nCross compilation to Android is supported for targeting 64 bit ARM and Intel x86 architectures (`aarch64` and `x86_64`) for API Level 26 (Oreo, Android 8):\n\nWe recommend to use [cargo apk](https://crates.io/crates/cargo-apk), but if that does not work for you, following are some instructions on how we build Android targets with GitHub Actions:\n\nFor example, to compile for `aarch64`:\n\n1. Install the Rust target:\n   ```bash\n   rustup target install aarch64-linux-android\n   ```\n2. Download the [r26d NDK](https://developer.android.com/ndk/downloads) (or newer) for your host architecture and unzip it.\n3. Compile your project for the `aarch64-linux-android` target:\n\nOn **macOS**:\n\n```bash\nexport ANDROID_NDK=:path-to-android-ndk-r26d\nexport PATH=$PATH:$ANDROID_NDK/toolchains/llvm/prebuilt/darwin-x86_64/bin\nexport CC_aarch64_linux_android=aarch64-linux-android26-clang\nexport CXX_aarch64_linux_android=aarch64-linux-android26-clang++\nexport AR_aarch64_linux_android=llvm-ar\nexport CARGO_TARGET_AARCH64_LINUX_ANDROID_LINKER=aarch64-linux-android26-clang\n\ncargo build -vv --target aarch64-linux-android\n```\n\nWe don't support Apple's Clang to build for Android on macOS, so you need to install LLVM and set the `PATH` like instructed.\n\nOn **Linux**:\n\n```bash\nexport ANDROID_NDK=:path-to-android-ndk-r26d\nexport PATH=$PATH:$ANDROID_NDK/toolchains/llvm/prebuilt/linux-x86_64/bin\nexport CC_aarch64_linux_android=aarch64-linux-android26-clang\nexport CXX_aarch64_linux_android=aarch64-linux-android26-clang++\nexport AR_aarch64_linux_android=llvm-ar\nexport CARGO_TARGET_AARCH64_LINUX_ANDROID_LINKER=aarch64-linux-android26-clang\n\ncargo build -vv --target aarch64-linux-android\n```\n\nOn **Windows** the Android NDK Clang executable must be invoked through `.cmd` scripts:\n\n```bash\nexport ANDROID_NDK=:path-to-android-ndk-r26d\nexport PATH=$PATH:$ANDROID_NDK/toolchains/llvm/prebuilt/windows-x86_64/bin\nexport CC_aarch64_linux_android=aarch64-linux-android26-clang.cmd\nexport CXX_aarch64_linux_android=aarch64-linux-android26-clang++.cmd\nexport AR_aarch64_linux_android=llvm-ar\nexport CARGO_TARGET_AARCH64_LINUX_ANDROID_LINKER=aarch64-linux-android26-clang.cmd\n\ncargo build -vv --target aarch64-linux-android\n```\n\n_Notes:_\n\n- At the time of this writing, the Rust compiler will [automatically add a `-lgcc` argument](https://github.com/rust-windowing/android-ndk-rs/issues/149) to the linker, which results in a linker error, because newer NDKs do not contain `libgcc.a` anymore. To fix this, we created a workaround and [copy `libunwind.a` over to `libgcc.a`](https://github.com/pragmatrix/rust-skia-containers/blob/master/linux/Dockerfile#L48-L52). Cargo apk does something [similar](https://github.com/rust-windowing/android-ndk-rs/issues/149#issuecomment-963988601).\n- The `CARGO_TARGET_${TARGET}_LINKER` environment variable name [needs to be all uppercase](https://github.com/rust-lang/cargo/issues/1109#issuecomment-386850387).\n- In some older shells (for example macOS High Sierra), environment variable replacement can not be used when the variable was defined on the same line. Therefore the `ANDROID_NDK` variable must be defined before it's used in the `PATH` variable.\n- Rebuilding skia-bindings with a different target may cause linker errors, in that case `touch skia-bindings/build.rs` will force a rebuild ([#10](https://github.com/rust-skia/rust-skia/issues/10)).\n\n### For iOS\n\nCompilation to iOS is supported on macOS targeting the iOS simulator (`--target x86_64-apple-ios`) and 64 bit ARM devices (`--target aarch64-apple-ios`). The ARM64**e** architecture is [not supported yet](https://github.com/rust-lang/rust/issues/73628).\n\n### For WebAssembly\n\nInstall `emscripten` version 3.1.57 or superior and make sure that llvm / clang 16+ is installed. In the examples below, we assume\n`emsdk` version `3.1.57` was installed with [asdf](http://asdf-vm.com/).\n\nBuild with the `wasm32-unknown-emscripten` target (`wasm32-unknown-unknown` is\nunsupported because it is [fundamentally incompatible with linking C code](https://github.com/rustwasm/team/issues/291#issuecomment-645482430):\n\n```bash\nexport EMSDK=~/.asdf/installs/emsdk/3.1.57\nexport EMCC_CFLAGS=\"-s ERROR_ON_UNDEFINED_SYMBOLS=0\"\n\ncargo build --target wasm32-unknown-emscripten\n```\n\nThe `EMSDK` environment variable must be set to the root of your `emscripten` SDK.\n\nIn `EMCC_CFLAGS`, `-s ERROR_ON_UNDEFINED_SYMBOLS` is a\n[workaround](https://github.com/rust-lang/rust/issues/85821#issuecomment-969369677) to build with\n`emscripten > 2.0.9`.\n\nIf you want to enable WebGL, you will also have to set `MAX_WEBGL_VERSION=2`:\n\n```bash\nexport EMSDK=~/.asdf/installs/emsdk/3.1.57\nexport EMCC_CFLAGS=\"-s ERROR_ON_UNDEFINED_SYMBOLS=0 -s MAX_WEBGL_VERSION=2\"\n\ncargo build --target wasm32-unknown-emscripten --features gl\n```\n\nOn MacOS there is a problem with the OS version of `ar` so you will have to install the GNU version from homebrew:\n\n```bash\nbrew install binutils\n```\n\nThen prepend `binutils` path for the build. The path depends on your CPU\narchitecture, and can be retrieved with `brew info binutils`. Here is an\nexample for Apple silicon:\n\n```bash\nexport EMSDK=~/.asdf/installs/emsdk/3.1.57\nexport EMCC_CFLAGS=\"-s ERROR_ON_UNDEFINED_SYMBOLS=0\"\nexport PATH=\"/opt/homebrew/opt/binutils/bin:$PATH\"\n\ncargo build --target wasm32-unknown-emscripten\n```\n\n### Skia\n\nFor situations in which Skia does not build or needs to be configured differently, we support some customization support in `skia-bindings/build.rs`. For more details take a look at the [README of the skia-bindings package](skia-bindings/README.md).\n\nPlease share your build experience so that we can try to automate the build and get to the point where `cargo build` _is_ sufficient to build the bindings _including_ Skia, and if that is not possible, clearly prompts to what's missing.\n\n## Example Applications\n\n### icon\n\nThe `icon` example generates the rust-skia icon in the current directory.\nIt computes the position of all the gear teeth etc. based on parameters such as the number of teeth and wheel radius.\n\nIf you were able to build the project, run\n\n```bash\ncargo run --example icon 512\n```\n\nIt has a single optional parameter which is the size in pixels for the PNG file.\nWithout parameters, it’ll produce PNG frames for the animated version.\n\n### skia-org\n\nThe other examples are taken from [Skia's website](https://skia.org/) and [ported to the Rust API](skia-org/).\n\n```bash\ncargo run -- [OUTPUT_DIR]\n```\n\nto generate some Skia drawn PNG images in the directory `OUTPUT_DIR`. To render with OpenGL, use\n\n```bash\ncargo run -- [OUTPUT_DIR] --driver opengl\n```\n\nAnd to show the drivers that are supported\n\n```bash\ncargo run -- --help\n```\n\n### gl-window\n\nAn example that opens an OpenGL Window and draws the rust-skia icon with skia-safe (contributed by [@nornagon](https://github.com/nornagon)).\n\n```bash\ncargo run --example gl-window --features gl\n```\n\nOn Linux the feature `x11` needs to be enabled:\n\n```bash\ncargo run --example gl-window --features gl,x11\n```\n\n## Example Images\n\nFill, Radial Gradients, Stroke, Stroke with Gradient, Transparency:\n[![Rust-skia icon](artwork/rust-skia-icon_512x512.png)](https://matracas.org/tmp/rust-skia-icon.html)\n\nFill, Stroke, Text:\n\n![Fill, Stroke, Text](https://rust-skia.github.io/skia-org/cpu/SkPaint-Overview/02-fill-and-stroke.png)\n\nSweep Gradient:\n\n![Sweep Gradient](https://rust-skia.github.io/skia-org/cpu/SkPaint-Overview/08-sweep-gradient-shader.png)\n\nDash Path Effect:\n\n![Dash Path Effect](https://rust-skia.github.io/skia-org/cpu/SkPaint-Overview/19-dash-path-effect.png)\n\nFor more, you may take a look at the [rust-skia.github.io](https://github.com/rust-skia/rust-skia.github.io/tree/master/skia-org/cpu) repository.\n\n## This project needs contributions!\n\nIf you'd like to help with the bindings, take a look at the [Wiki](https://github.com/rust-skia/rust-skia/wiki) to get started and create an issue to prevent duplicate work. For smaller tasks, grep for \"TODO\"s in the source code. And for heroic work, check out the label [help wanted](https://github.com/rust-skia/rust-skia/labels/help%20wanted). And if you like to help making the Rust API nicer to use, look out for open issues with the label [api ergonomics](https://github.com/rust-skia/rust-skia/issues?q=is%3Aissue+is%3Aopen+label%3A%22api+ergonomics%22).\n\nMore details can be found at [CONTRIBUTING.md](https://github.com/rust-skia/rust-skia/tree/master/CONTRIBUTING.md).\n\n## Notable Contributions\n\n- Denis Kolodin ([@DenisKolodin](https://github.com/DenisKolodin)) contributed build support for Android.\n- Alberto González Palomo ([@AlbertoGP](https://github.com/AlbertoGP)) designed the Rust-Skia Logo and the example program that renders it.\n- Luper Rouch ([@flupke](https://github.com/flupke), sponsored by [Jitter](https://jitter.video/))\n  added build support for the `wasm32-unknown-emscripten` target.\n- Osei Fortune ([@triniwiz](https://github.com/triniwiz)) and Savchenko Ivan ([@Aiving](https://github.com/Aiving))\n  contributed rendering SVG files.\n\n## Maintainers\n\n- LongYinan ([@Brooooooklyn](https://github.com/Brooooooklyn))\n- Armin ([@pragmatrix](https://github.com/pragmatrix))\n\n## License\n\nMIT\n"
        },
        {
          "name": "artwork",
          "type": "tree",
          "content": null
        },
        {
          "name": "bindings-docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "comment-converter",
          "type": "tree",
          "content": null
        },
        {
          "name": "docker",
          "type": "tree",
          "content": null
        },
        {
          "name": "flake.lock",
          "type": "blob",
          "size": 0.951171875,
          "content": "{\n  \"nodes\": {\n    \"nixpkgs\": {\n      \"locked\": {\n        \"lastModified\": 1656359916,\n        \"narHash\": \"sha256-kzS3TcC6tm4VqNnBmZttsKSZjBk30uUch9KJqq0QmdQ=\",\n        \"owner\": \"NixOS\",\n        \"repo\": \"nixpkgs\",\n        \"rev\": \"8c972668313c6e61a39671efbe48bce148918aa5\",\n        \"type\": \"github\"\n      },\n      \"original\": {\n        \"owner\": \"NixOS\",\n        \"repo\": \"nixpkgs\",\n        \"type\": \"github\"\n      }\n    },\n    \"root\": {\n      \"inputs\": {\n        \"nixpkgs\": \"nixpkgs\",\n        \"utils\": \"utils\"\n      }\n    },\n    \"utils\": {\n      \"locked\": {\n        \"lastModified\": 1656065134,\n        \"narHash\": \"sha256-oc6E6ByIw3oJaIyc67maaFcnjYOz1mMcOtHxbEf9NwQ=\",\n        \"owner\": \"numtide\",\n        \"repo\": \"flake-utils\",\n        \"rev\": \"bee6a7250dd1b01844a2de7e02e4df7d8a0a206c\",\n        \"type\": \"github\"\n      },\n      \"original\": {\n        \"owner\": \"numtide\",\n        \"repo\": \"flake-utils\",\n        \"type\": \"github\"\n      }\n    }\n  },\n  \"root\": \"root\",\n  \"version\": 7\n}\n"
        },
        {
          "name": "flake.nix",
          "type": "blob",
          "size": 1.2412109375,
          "content": "{\n  description = \"nix development shell for rust-skia\";\n\n  inputs = {\n    nixpkgs.url = \"github:NixOS/nixpkgs\";\n    utils.url = \"github:numtide/flake-utils\";\n  };\n\n  outputs = { self, nixpkgs, utils }:\n    utils.lib.eachDefaultSystem (system:\n      let pkgs = nixpkgs.legacyPackages.\"${system}\";\n      in {\n        devShells.default = pkgs.mkShell {\n          SKIA_NINJA_COMMAND = \"${pkgs.ninja}/bin/ninja\";\n          SKIA_GN_COMMAND = \"${pkgs.gn}/bin/gn\";\n          LIBCLANG_PATH = \"${pkgs.llvmPackages.libclang}/lib/libclang.so\";\n\n          # necessary to override nix's defaults which cannot be overriden as others are\n          shellHook = ''\n            export CC=\"${pkgs.clang}/bin/clang\"\n            export CXX=\"${pkgs.clang}/bin/clang++\"\n            export LIBCLANG_PATH=\"${pkgs.libclang.lib}/lib\"\n            rustup override set stable\n            '';\n\n          nativeBuildInputs = with pkgs; [ \n            clang\n            fontconfig\n            libiconv\n            python\n            rustup\n          ] ++ lib.optionals stdenv.isDarwin (with darwin.apple_sdk.frameworks; [\n            AppKit\n            ApplicationServices\n            CoreVideo\n            fixDarwinDylibNames\n            OpenGL\n            Security\n          ]);\n        };\n      });\n}\n"
        },
        {
          "name": "mk-workflows",
          "type": "tree",
          "content": null
        },
        {
          "name": "patch",
          "type": "tree",
          "content": null
        },
        {
          "name": "skia-bindings",
          "type": "tree",
          "content": null
        },
        {
          "name": "skia-org",
          "type": "tree",
          "content": null
        },
        {
          "name": "skia-safe",
          "type": "tree",
          "content": null
        },
        {
          "name": "skia-svg-macros",
          "type": "tree",
          "content": null
        },
        {
          "name": "wasm-example",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}