{
  "metadata": {
    "timestamp": 1736708985406,
    "page": 33,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjQw",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "rust-lang/rust-bindgen",
      "stars": 4572,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.076171875,
          "content": "tests/stylo.hpp -diff\ntests/headers/* eol=lf\ntests/expectations/tests/* eol=lf"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.3935546875,
          "content": "# Cargo\ntarget/\n*~\nbindgen-integration/Cargo.lock\nbindgen-tests/tests/expectations/Cargo.lock\nbindgen-tests/tests/quickchecking/Cargo.lock\n#*#\n\n# Test script output\nir.dot\nir.png\n\n# Output of the --dump-preprocessed-input flag.\n__bindgen.*\n\n# Generated by C-Smith\ncsmith-fuzzing/platform.info\n\n# Backups of test cases from C-Reduce\n**/*.orig\n\n# node.js files\nnode_modules\npackage-lock.json\npackage.json\n"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 64.0087890625,
          "content": "<!-- START doctoc generated TOC please keep comment here to allow auto update -->\n<!-- DON'T EDIT THIS SECTION, INSTEAD RE-RUN doctoc TO UPDATE -->\n\n- [Unreleased](#unreleased)\n  - [Added](#added)\n  - [Changed](#changed)\n  - [Removed](#removed)\n  - [Fixed](#fixed)\n  - [Security](#security)\n- [v0.71.1 (2024-12-09)](#v0711-2024-12-09)\n  - [Fixed](#fixed-1)\n- [0.71.0 (2024-12-06)](#0710-2024-12-06)\n  - [Added](#added-1)\n  - [Changed](#changed-1)\n  - [Removed](#removed-1)\n  - [Fixed](#fixed-2)\n- [0.70.1 (2024-08-20)](#0701-2024-08-20)\n  - [Added](#added-2)\n  - [Changed](#changed-2)\n  - [Removed](#removed-2)\n  - [Fixed](#fixed-3)\n  - [Security](#security-1)\n- [0.70.0 (2024-08-16)](#0700-2024-08-16)\n  - [Added](#added-3)\n  - [Changed](#changed-3)\n  - [Removed](#removed-3)\n  - [Fixed](#fixed-4)\n  - [Security](#security-2)\n- [0.69.4 (2024-02-04)](#0694-2024-02-04)\n  - [Added](#added-4)\n  - [Changed](#changed-4)\n  - [Removed](#removed-4)\n  - [Fixed](#fixed-5)\n  - [Security](#security-3)\n- [0.69.3 (2024-02-04)](#0693-2024-02-04)\n  - [Added](#added-5)\n  - [Changed](#changed-5)\n  - [Removed](#removed-5)\n  - [Fixed](#fixed-6)\n  - [Security](#security-4)\n- [0.69.2 (2024-01-13)](#0692-2024-01-13)\n  - [Added](#added-6)\n  - [Changed](#changed-6)\n  - [Removed](#removed-6)\n  - [Fixed](#fixed-7)\n  - [Security](#security-5)\n- [0.69.1 (2023-11-02)](#0691-2023-11-02)\n  - [Fixed](#fixed-8)\n- [0.69.0 (2023-11-01)](#0690-2023-11-01)\n  - [Added](#added-7)\n  - [Changed](#changed-7)\n  - [Removed](#removed-7)\n  - [Fixed](#fixed-9)\n  - [Security](#security-6)\n- [0.68.1](#0681)\n  - [Fixed](#fixed-10)\n- [0.68.0](#0680)\n  - [Added](#added-8)\n  - [Changed](#changed-8)\n  - [Removed](#removed-8)\n  - [Fixed](#fixed-11)\n- [0.67.0](#0670)\n- [0.66.1](#0661)\n  - [Removed](#removed-9)\n- [0.66.0](#0660)\n  - [Added](#added-9)\n  - [Changed](#changed-9)\n  - [Removed](#removed-10)\n- [0.65.1](#0651)\n  - [Fixed](#fixed-12)\n- [0.65.0](#0650)\n  - [Added](#added-10)\n  - [Changed](#changed-10)\n  - [Removed](#removed-11)\n- [0.64.0](#0640)\n  - [Added](#added-11)\n  - [Changed](#changed-11)\n- [0.63.0](#0630)\n  - [Added](#added-12)\n  - [Changed](#changed-12)\n  - [Removed](#removed-12)\n- [0.62.0](#0620)\n  - [Added](#added-13)\n  - [Changed](#changed-13)\n  - [Fixed](#fixed-13)\n- [0.61.0](#0610)\n  - [Added](#added-14)\n  - [Changed](#changed-14)\n  - [Fixed](#fixed-14)\n- [0.60.1](#0601)\n  - [Fixed](#fixed-15)\n- [0.60.0](#0600)\n  - [Added](#added-15)\n  - [Fixed](#fixed-16)\n  - [Changed](#changed-15)\n  - [Removed](#removed-13)\n- [0.59.2](#0592)\n- [0.59.1](#0591)\n  - [Fixed](#fixed-17)\n- [0.59.0](#0590)\n  - [Added](#added-16)\n  - [Fixed](#fixed-18)\n  - [Changed](#changed-16)\n- [0.58.1](#0581)\n  - [Added](#added-17)\n- [0.58.0](#0580)\n  - [Added](#added-18)\n  - [Fixed](#fixed-19)\n  - [Changed](#changed-17)\n  - [Deprecated](#deprecated)\n  - [Removed](#removed-14)\n  - [Fixed](#fixed-20)\n  - [Security](#security-7)\n- [0.57.0](#0570)\n  - [Added](#added-19)\n  - [Fixed](#fixed-21)\n- [0.56.0](#0560)\n  - [Added](#added-20)\n  - [Changed](#changed-18)\n  - [Fixed](#fixed-22)\n- [0.55.1](#0551)\n  - [Fixed](#fixed-23)\n- [0.55.0](#0550)\n  - [Removed](#removed-15)\n  - [Added](#added-21)\n  - [Changed](#changed-19)\n  - [Fixed](#fixed-24)\n- [0.54.1](#0541)\n  - [Added](#added-22)\n  - [Changed](#changed-20)\n  - [Fixed](#fixed-25)\n- [0.54.0](#0540)\n  - [Added](#added-23)\n  - [Changed](#changed-21)\n  - [Fixed](#fixed-26)\n- [0.53.3](#0533)\n  - [Added](#added-24)\n  - [Fixed](#fixed-27)\n- [0.53.2](#0532)\n  - [Changed](#changed-22)\n- [0.53.1](#0531)\n  - [Added](#added-25)\n- [0.53.0](#0530)\n  - [Added](#added-26)\n  - [Changed](#changed-23)\n  - [Fixed](#fixed-28)\n- [0.52.0](#0520)\n  - [Added](#added-27)\n  - [Changed](#changed-24)\n  - [Fixed](#fixed-29)\n- [0.51.1](#0511)\n  - [Fixed](#fixed-30)\n  - [Changed](#changed-25)\n- [0.51.0](#0510)\n  - [Fixed](#fixed-31)\n  - [Changed](#changed-26)\n  - [Added](#added-28)\n- [0.50.0](#0500)\n  - [Added](#added-29)\n- [0.49.3](#0493)\n  - [Added](#added-30)\n- [0.49.2](#0492)\n  - [Changed](#changed-27)\n- [0.49.1](#0491)\n  - [Fixed](#fixed-32)\n  - [Changed](#changed-28)\n- [0.49.0](#0490)\n  - [Added](#added-31)\n  - [Fixed](#fixed-33)\n  - [Changed](#changed-29)\n- [0.48.1](#0481)\n  - [Fixed](#fixed-34)\n- [0.48.0](#0480)\n  - [Changed](#changed-30)\n  - [Fixed](#fixed-35)\n- [0.47.4](#0474)\n  - [Added](#added-32)\n- [0.47.3](#0473)\n  - [Changed](#changed-31)\n- [0.47.2](#0472)\n  - [Fixed](#fixed-36)\n- [0.47.1](#0471)\n  - [Changed](#changed-32)\n  - [Fixed](#fixed-37)\n- [0.47.0](#0470)\n  - [Changed](#changed-33)\n  - [Fixed](#fixed-38)\n- [0.33.1 .. 0.46.0](#0331--0460)\n  - [Added](#added-33)\n  - [Removed](#removed-16)\n  - [Changed](#changed-34)\n  - [Fixed](#fixed-39)\n- [0.33.1](#0331)\n  - [Fixed](#fixed-40)\n- [0.33.0](#0330)\n- [0.32.2](#0322)\n  - [Fixed](#fixed-41)\n- [0.32.1](#0321)\n  - [Fixed](#fixed-42)\n- [0.32.0](#0320)\n  - [Added](#added-34)\n  - [Changed](#changed-35)\n  - [Fixed](#fixed-43)\n- [0.31.0](#0310)\n  - [Added](#added-35)\n  - [Changed](#changed-36)\n  - [Deprecated](#deprecated-1)\n  - [Removed](#removed-17)\n  - [Fixed](#fixed-44)\n- [0.30.0](#0300)\n  - [Added](#added-36)\n  - [Changed](#changed-37)\n  - [Deprecated](#deprecated-2)\n  - [Fixed](#fixed-45)\n- [0.29.0](#0290)\n  - [Added](#added-37)\n  - [Changed](#changed-38)\n  - [Fixed](#fixed-46)\n\n<!-- END doctoc generated TOC please keep comment here to allow auto update -->\n\n--------------------------------------------------------------------------------\n# Unreleased\n## Added\n## Changed\n## Removed\n## Fixed\n## Security\n\n# v0.71.1 (2024-12-09)\n## Fixed\n- Fix `--version` and `--generate-shell-completions` (#3040)\n\n# 0.71.0 (2024-12-06)\n## Added\n- Add the `ParseCallbacks::new_item_found` callback to expose the original and final name of structs, unions and enums (#2658).\n- Add the `field_type_name` field to `FieldInfo` to expose the name of the type of a field (#2863)\n- Add support for custom attributes with the `--with-attribute-custom` flag (#2866)\n- Allow setting `--rust-target` to any Rust version supported by bindgen (#2993)\n- Use c-string literals if the `--generate-cstr` flag is used for Rust targets after 1.77 under the 2021 edition (#2996)\n- Add the `--rust-edition` flag which allows to select which Rust edition to target. (#3002, #3013) \n- Use `unsafe extern` instead of `extern` in blocks for any Rust target after 1.82. (#3015) \n## Changed\n- The `--wrap-static-fns` related options no longer require the experimental feature or flag (#2928)\n- Use the `Display` implementation instead of the `Debug` one for `BindgenError` in `bindgen-cli` (#3005)\n## Removed\n- Dropped support for any Clang versions strictly lower than 9.0 (#2932)\n- Dropped support for any Rust version strictly lower than 1.33 (#2993)\n## Fixed\n- Represent opaque types in a FFI-safe way (#2880)\n- Use the underlying type of any atomic type instead of panicking (#2920)\n- Use the right characters for newlines on windows (#2923)\n- Inlined namespaces are properly recognized now (#2950)\n- Unsafe calls to `libloading` are now wrapped in `unsafe` blocks when using dynamic loading (#2961)\n- The `ParseCallbacks::field_visibility` callback is now called for newtypes as well (#2967)\n- Gate the use of the `addr_of` and `addr_of_mut` macros under the 1.51 rust version (#2988)\n\n# 0.70.1 (2024-08-20)\n## Added\n## Changed\n## Removed\n## Fixed\n- Fix regression where the `const` layout tests were triggering the `unnecessary_operation` and `identity_op` clippy warnings.\n## Security\n\n# 0.70.0 (2024-08-16)\n## Added\n- Add target mappings for riscv64imac and riscv32imafc.\n- Add a complex macro fallback API (#2779).\n- Add option to use DST structs for flexible arrays (--flexarray-dst, #2772).\n- Add option to dynamically load variables (#2812).\n- Add option in CLI to use rustified non-exhaustive enums (--rustified-non-exhaustive-enum, #2847).\n- Add field_type_name to FieldInfo.\n## Changed\n- Remove which and lazy-static dependencies (#2809, #2817).\n- Generate compile-time layout tests (#2787).\n- Print `bindgen-cli` errors to stderr instead of stdout (#2840)\n## Removed\n## Fixed\n- Fix `--formatter=prettyplease` not working in `bindgen-cli` by adding `prettyplease` feature and\n  enabling it by default for `bindgen-cli` (#2789) .\n- Fix `--allowlist-item` so anonymous enums are no longer ignored (#2827).\n- Use clang_getFileLocation instead of clang_getSpellingLocation to fix clang-trunk (#2824).\n- Fix generated constants: `f64::INFINITY`, `f64::NEG_ INFINITY`, `f64::NAN` (#2854).\n## Security\n- Update `tempfile` and `rustix` due to [GHSA-c827-hfw6-qwvm](https://github.com/advisories/GHSA-c827-hfw6-qwvm).\n\n# 0.69.4 (2024-02-04)\n## Added\n## Changed\n- Allow older itertools. (#2745)\n## Removed\n## Fixed\n## Security\n\n# 0.69.3 (2024-02-04)\n## Added\n\n- Added blocklist_var (#2731)\n- Stabilized thiscall_abi (#2661)\n\n## Changed\n\n- Use CR consistently on windows (#2698)\n- Replaced peeking_take_while by itertools (#2724)\n\n## Removed\n## Fixed\n\n- Try to avoid repr(packed) for explicitly aligned types when not needed (#2734)\n- Improved destructor handling on Windows (#2663)\n- Support Float16 (#2667)\n- Fix alignment contribution from bitfields (#2680)\n- Fixed msrv build.\n\n## Security\n\n- Updated shlex dependency (RUSTSEC-2024-0006)\n\n# 0.69.2 (2024-01-13)\n## Added\n## Changed\n## Removed\n## Fixed\n- Fixed generation of extern \"C\" blocks with llvm 18+. See #2689.\n## Security\n\n# 0.69.1 (2023-11-02)\n\n## Fixed\n- Allow to run `bindgen -v` without an input header argument.\n\n# 0.69.0 (2023-11-01)\n\n## Added\n- Added the `ParseCallbacks::header_file` callback which runs on every filename passed to `Builder::header`.\n- Added the `CargoCallbacks::new` constructor which emits a cargo-rerun line\n  for every input header file by default.\n- Added the `CargoCallbacks::rerun_on_header_files` method to configure whether\n  a cargo-rerun line should be emitted for every input header file.\n## Changed\n- The `--wrap-static-fns` feature was updated so function types that has no\n  argument use `void` as its sole argument.\n- `CargoCallbacks` is no longer a [unit-like\n  struct](https://doc.rust-lang.org/reference/items/structs.html) and the\n  `CargoCallbacks` constant was added to mitigate the breaking nature of this\n  change. This constant has been marked as deprecated and users will have to\n  use the new `CargoCallbacks::new` method in the future.\n## Removed\n## Fixed\n- Allow compiling `bindgen-cli` with a static libclang.\n- Emit an opaque integer type for pointer types that don't have the same size\n  as the target's pointer size.\n- Avoid escaping Objective-C method names unless they are `Self`, `self`,\n  `crate` or `super`.\n## Security\n\n# 0.68.1\n\n## Fixed\n- Fixed errors on the windows artifact build process.\n\n# 0.68.0\n\n## Added\n- The `system` ABI is now supported as an option for the `--override-abi` flag.\n- The `allowlist_item` method and the `--allowlist-item` flag have been\n  included to filter items regardless or their kind.\n- Include installers as release artifacts on Github.\n## Changed\n- The `Clone` implementation for `_BindgenUnionField` has been changed to pass\n  the `incorrect_clone_impl_on_copy_type` Clippy lint.\n- The `c_unwind` ABI can be used without a feature gate for any Rust target version\n  equal to or greater than 1.71.\n  This comes as a result of the ABI being stabilised (in Rust 1.71).\n- Formatting changes when using prettyplease as a formatter due to a new\n  prettyplease version.\n- Avoid generating invalid `CStr` constants when using the `--generate-cstr`\n  option.\n## Removed\n- The `extra_assert` and `extra_assert_eq` macros are no longer exported.\n## Fixed\n- Bindgen no longer panics when parsing an objective-C header that includes a\n  Rust keyword that cannot be a raw identifier, such as: `self`, `crate`,\n  `super` or `Self`.\n\n# 0.67.0\n\nThis version was skipped due to some problems on the release workflow.\n\n# 0.66.1\n\n## Removed\n* Revert source order sorting (#2543) due to correctness regressions #2558.\n\n# 0.66.0\n\n## Added\n\n* Added the `--generate-cstr` CLI flag to generate string constants as `&CStr`\n  instead of `&[u8]`. (Requires Rust 1.59 or higher.)\n* Added the `--generate-shell-completions` CLI flag to generate completions for\n  different shells.\n* The `--wrap-static-fns` option can now wrap `va_list` functions as variadic functions\n  with the experimental `ParseCallbacks::wrap_as_variadic_fn` method.\n* Add target mappings for riscv32imc and riscv32imac.\n* Add the `ParseCallbacks::field_visibility` method to modify field visibility. \n\n## Changed\n\n* Non-UTF-8 string constants are now generated as references (`&[u8; SIZE]`)\n  instead of arrays (`[u8; SIZE]`) to match UTF-8 strings.\n* Wrappers for static functions that return `void` no longer contain a `return`\n  statement and only call the static function instead.\n* The `--wrap-static-fns` option no longer emits wrappers for static variadic\n  functions.\n* Depfiles generated with `--depfile` or `Builder::depfile` will now properly\n  generate module names and paths that include spaces by escaping them. To make\n  the escaping clear and consistent, backslashes are also escaped.\n* Updated `bitflags` dependency to 2.2.1. This changes the API of `CodegenConfig`.\n* Prettyplease formatting is gated by an optional, enabled by default Cargo\n  feature when depending on `bindgen` as a library.\n* Items are now parsed in the order they appear in source files. This may result in\n  auto-generated `_bindgen_*` names having a different index.\n* Use default visibility for padding fields: Previously, padding fields were\n  always public. Now, they follow the default visibility for the type they are\n  in.\n* Compute visibility of bitfield unit based on actual field visibility: A\n  bitfield unit field and its related functions now have their visibility\n  determined based on the most private between the default visibility and the\n  actual visibility of the bitfields within the unit. \n\n## Removed\n* Remove redundant Cargo features, which were all implicit:\n  - bindgen-cli: `env_logger` and `log` removed in favor of `logging`\n  - bindgen (lib):\n    + `log` removed in favor of `logging`\n    + `which` removed in favor of `which-logging`\n    + `annotate-snippets` removed in favor of `experimental`\n\n* Prettyplease is available as a `Formatter` variant now.\n\n# 0.65.1\n\n## Fixed\n\n* The `Builder::rustfmt_bindings` method was added back and tagged as\n  deprecated instead of being removed.\n* Broken documentation links were fixed.\n\n# 0.65.0\n\n## Added\n * Added the `Builder::default_visibility` method and the\n   `--default-visibility` flag to set the default visibility of fields. (#2338)\n * Added the `--formatter` CLI flag with the values `none`, `rustfmt` and\n   `prettyplease` to select which tool will be used to format the bindings. The\n   default value is `rustfmt`. (#2453)\n * Added the `Builder::formatter` method and the `Formatter` type to select\n   which tool will be used to format the bindings. (#2453)\n * Added the `Builder::emit_diagnostics` method and the  `--emit-diagnostics`\n   flag to enable emission of diagnostic messages under the `experimental`\n   feature. (#2436)\n * Added support for the `\"efiapi\"` calling convention (#2490).\n * Added the `ParseCallbacks::read_env_var` method which runs everytime\n   `bindgen` reads and environment variable. (#2400)\n * Added the `ParseCallbacks::generated_link_name_override` method which allow\n   overriding the link name of items. (#2425)\n * Add support for C `enum`s when generating code while using the\n   `--wrap-static-fns` feature. (#2415)\n\n## Changed\n * Static functions with no arguments use `void` as their single argument\n   instead of having no arguments when the `--wrap-static-fns` flag is used.\n   (#2443)\n * The source file generated when the `--wrap-static-fns` flag is enabled now\n   contains `#include` directives with all the input headers and all the source\n   code added with the `header_contents` method. (#2447)\n * The source file generated when the `--wrap-static-fns` flag no longer uses\n   `asm` labeling and the link name of static wrapper functions is allowed to\n   be mangled. (#2448)\n * The documentation of the generated `type` aliases now matches the comments\n   of their `typedef` counterparts instead of using the comments of the aliased\n   types. (#2463)\n * The `Builder::rustfmt_bindings` methods and the `--no-rustfmt-bindings` flag\n   are now deprecated in favor of the formatter API. (#2453)\n   \n## Removed\n * The following deprecated flags were removed: `--use-msvc-mangling`,\n   `--rustfmt-bindings` and `--size_t-is-usize`. (#2408)\n * The `Bindings::emit_warnings` and `Bindings::warnings` methods were removed\n   in favor of `--emit-diagnostics`. (#2436)\n * Bindgen no longer generates C string constants that cannot be represented as\n   byte slices. (#2487)\n\n# 0.64.0\n\n## Added\n * Added a new set of flags `--with-derive-custom`,\n   `--with-derive-custom-struct`, `--with-derive-custom-enum` and\n   `--with-derive-custom-enum` to add custom derives from the CLI.\n * Added the `--experimental` flag on `bindgen-cli` and the `experimental`\n   feature on `bindgen` to gate experimental features whose implementation is\n   incomplete or are prone to change in a non-backwards compatible manner.\n * Added a new set of flags and their equivalent builder methods\n   `--wrap-static-fns`, `--wrap-static-fns-suffix` and `--wrap-static-fns-path`\n   to generate C function wrappers for `static` or `static inline` functions.\n   This feature is experimental.\n\n## Changed\n * Fixed name collisions when having a C `enum` and a `typedef` with the same\n   name.\n * The `ParseCallbacks::generated_name_override` method now receives `ItemInfo<'_>` as\n   argument instead of a `&str`.\n * Updated the `clang-sys` crate version to 1.4.0 to support clang 15.\n * The return type is now omitted in signatures of functions returning `void`.\n * Updated the `clap` dependency for `bindgen-cli` to 4.\n * Rewrote the `bindgen-cli` argument parser which could introduce unexpected\n   behavior changes.\n * The `ParseCallbacks::add_derives` method now receives `DeriveInfo<'_>` as\n   argument instead of a `&str`. This type also includes the kind of target type.\n\n# 0.63.0\n\n## Added\n * new feature: `process_comments` method to the `ParseCallbacks` trait to\n   handle source code comments.\n\n## Changed\n * Only wrap unsafe operations in unsafe blocks if the `--wrap_unsafe_ops`\n   option is enabled.\n * Replace the `name: &str` argument for `ParseCallbacks::add_derives` by\n   `info: DeriveInfo`.\n * All the rust targets equal or lower than `1.30` are being deprecated and\n   will be removed in the future. If you have a good reason to use any of these\n   targets, please report it in the issue tracker.\n\n## Removed\n\n * The following deprecated methods and their equivalent CLI arguments were\n   removed: `whitelist_recursively`, `hide_type`, `blacklist_type`,\n   `blacklist_function`, `blacklist_item`, `whitelisted_type`,\n   `whitelist_type`, `whitelist_function`, `whitelisted_function`,\n   `whitelist_var`, `whitelisted_var`, `unstable_rust`.\n\n# 0.62.0\n\n## Added\n\n * new feature: `--override-abi` flag to override the ABI used by functions\n   matching a regular expression.\n * new feature: allow using the `C-unwind` ABI in `--override-abi` on nightly\n   rust.\n\n## Changed\n\n * Regex inputs are sanitized so alternation (`a|b`) is handled correctly but\n   wildcard patterns (`*`) are now considered invalid. The `.*` pattern can be\n   used as a replacement.\n * the `ParseCallbacks`trait does not require to implement `UnwindSafe`.\n * the `Builder::parse_callbacks` method no longer overwrites previously added\n   callbacks and composes them in a last-to-first manner.\n * any generated rust code containing unsafe operations inside unsafe functions\n   is wrapped in unsafe blocks now.\n\n## Fixed\n\n * Various issues with upcoming clang/libclang versions have been fixed.\n\n# 0.61.0\n\nReleased 2022/10/16\n\n## Added\n\n * new feature: `--sort-semantically` flag to sort the output in a predefined\n   manner [(#1743)].\n * new feature: `Bindgen::emit_warnings` method to emit warnings to stderr in\n   build scripts.\n * new feature: `--newtype-global-enum` flag to generate enum variants as\n   global constants.\n * new feature: `--default-non-copy-union-style` flag to set the default style\n   of code used to generate unions with non-`Copy` members.\n * new feature: `--bindgen-wrapper-union` flag to mark any union that matches a\n   regex and has a non-Copy member to use a bindgen-generated wrapper for its\n   fields.\n * new feature: `--manually-drop-union` flag to mark any union that matches a\n   regex and has a non-`Copy` member to use `ManuallyDrop`.\n * new feature: `--merge-extern-blocks` flag to merge several `extern` blocks\n   that have the same ABI.\n * new feature: `--no-size_t-is-usize` flag to not bind `size_t` as `usize`.\n * new feature: `Builder` implements `Clone`.\n\n## Changed\n\n * clap and regex have been updated, new msrv is 1.57.\n * The `--enable-function-attribute-detection` flag is also used to detect\n   diverging functions so the generated bindings use `!` as the return type.\n * The `--size_t-is-usize` flag is enabled by default.\n * Unused type aliases for `<stdint.h>` types are no longer emitted.\n * The `blocklist` options now can be used to block objective-C methods.\n * The `core::ffi` module is used the sized raw integer types\n   instead of `std::os::raw` if the Rust target version is `1.64` or higher and\n   the `--use-core` flag is enabled.\n * The `bindgen` CLI utility must be installed using `cargo install\n   bindgen-cli` now.\n * Using `bindgen` as a library no longer pulls clap and any other CLI\n   related dependencies.\n\n## Fixed\n\n * Const correctness of incomplete arrays has been fixed. (#2301)\n * C++ inline namespaces don't panic. (#2294)\n\n[(#1743)]: https://github.com/rust-lang/rust-bindgen/issues/1743\n\n# 0.60.1\n\nReleased 2022/06/06\n\n## Fixed\n\n * Fixed stack overflow in generated tests for structs with many fields (#2219).\n\n# 0.60.0\n\nReleased 2022/06/05\n\n## Added\n\n * Objective-C structs now derive `Debug` and `Copy` to support C and Objective-C structs. [(#2176)][]\n * Allow fully-qualified derives. (#2156)\n * Bindings generation now returns a more suitable error (#2125)\n * `--version --verbose` now prints clang version (#2140).\n * Experimental vtable generation (#2145).\n * Added an `--allowlist-file` option (#2122).\n * Support for vectorcall ABI (#2177).\n\n## Fixed\n\n * Fixed lifetimes with Objective-C trait templates. [(#2176)][]\n * Fixed objc imports for non-`#[macro_use]` use. [(#2176)][]\n * Handle differences between clang and rustc targets for RISCV (#2137).\n * `BINDGEN_EXTRA_CLANG_ARGS` is respected on the CLI now (#1723).\n * Use common type alias for anonymous enums in consts mode (#2191)\n * Look for `#[must_use]` in typedefs (#2206).\n * Fixed derive on packed structs (#2083).\n * Fixed warnings on layout tests (#2203).\n\n## Changed\n\n * cexpr, clap, and nom have been updated, new msrv is 1.54.\n\n## Removed\n\n * Support for ancient libclang versions has been removed.\n\n [(#2176)]: https://github.com/rust-lang/rust-bindgen/pull/2176\n\n# 0.59.2\n\nReleased 2021/11/26\n\n * cexpr+env_logger bump.\n * Various fixes for C++ crashes / hangs.\n * Enums now respect annotations and derives properly in more cases.\n * Some more APIs (blocklist-file, etc).\n * 'static lifetime is elided when appropriate.\n\n# 0.59.1\n\nReleased 2021/07/26\n\n## Fixed\n\n * Fixed incorrect bitfield constructors generated for very large bitfields (#2082).\n\n# 0.59.0\n\nReleased 2021/07/20\n\n## Added\n\n * Support emitting Makefile-syntax depfiles (#2026)\n * Add a C naming option (#2045)\n * Allow explicit padding (#2060)\n * Add custom derives callback (#2059)\n * Let Rust derive everything but Default for large arrays in 1.47 and later (#2070).\n\n## Fixed\n\n * Constants now have docstrings (#2027)\n * Don't generate bindings for deleted member functions. (#2044)\n * Zero out padding in custom Default trait implementations (#2051)\n * Identify forward declarations in params. (#2052)\n * Add env var EXTRA_CLANG_ARGS_<target>. (#2031)\n\n## Changed\n\n * cexpr and nom have been updated, new msrv is 1.44 (#2073).\n\n# 0.58.1\n\nReleased 2021/04/06\n\n## Added\n\n * Re-introduced unintentionally removed\n   `bindgen::Builder::whitelist_recursively` (deprecated in favor of\n  `bindgen::Builder::allowlist_recursively`). [#2022][]\n\n# 0.58.0\n\nReleased 2021/04/03\n\n## Added\n\n * Add option to translate enum integer types to native Rust integer types.\n   [#2004][]\n * Add callback to check derives for blocklisted types. [#2007][]\n * Add a flag to ensure all symbols are resolved when a library is loaded.\n   [#2013][]\n * Add from_library for generated dynamic library structs [#2011][].\n\n## Fixed\n\n * Track union layout more accurately. Fixes [an AArch64 bug] and [makes the\n   bindings more portable] where unions could return garbage data ([#1984])\n * Use original name when checking allowlist for anonymous enum variants. [#2006][]\n\n## Changed\n\n## Deprecated\n\n* `bindgen::Builder::whitelist_type` is deprecated in favor of\n  `bindgen::Builder::allowlist_type`. [#1812][]\n\n* `bindgen::Builder::whitelist_function` is deprecated in favor of\n  `bindgen::Builder::allowlist_function`. [#1812][]\n\n* `bindgen::Builder::whitelist_var` is deprecated in favor of\n  `bindgen::Builder::allowlist_var`. [#1812][]\n\n* `--whitelist-type` is deprecated in favor of\n  `--allowlist-type`. [#1812][]\n\n* `--whitelist-function` is deprecated in favor of\n  `--allowlist-function`. [#1812][]\n\n* `--whitelist-var` is deprecated in favor of\n  `--allowlist-var`. [#1812][]\n\n* `bindgen::Builder::blacklist_type` is deprecated in favor of\n  `bindgen::Builder::blocklist_type`. [#1812][]\n\n* `bindgen::Builder::blacklist_function` is deprecated in favor of\n  `bindgen::Builder::blocklist_function`. [#1812][]\n\n* `bindgen::Builder::blacklist_item` is deprecated in favor of\n  `bindgen::Builder::blocklist_item`. [#1812][]\n\n* `--blacklist-type` is deprecated in favor of\n  `--blocklist-type`. [#1812][]\n\n* `--blacklist-function` is deprecated in favor of\n  `--blocklist-function`. [#1812][]\n\n* `--blacklist-item` is deprecated in favor of\n  `--blocklist-item`. [#1812][]\n\n[#1984]: https://github.com/rust-lang/rust-bindgen/pull/1984\n[an AArch64 bug]: https://github.com/rust-lang/rust-bindgen/issues/1973\n[makes the bindings more portable]: https://github.com/rust-lang/rust-bindgen/issues/1983\n\n## Removed\n\n## Fixed\n\n## Security\n\n---\n\n# 0.57.0\n\nReleased 2021/02/01\n\n## Added\n\n* Expose module-raw-lines to the CLI (#1936)\n* Added an option to fit macro constants to smaller types (#1945)\n* Add an option to respect C++ access specifiers on fields (#1968)\n\n## Fixed\n\n* Improved C++ auto-detection (#1933)\n* Fixed layout of bitfields in some edge cases (#1950)\n* Escape the dyn keyword properly (#1951)\n* Use absolute paths for unsaved files passed to clang (#1857).\n\n# 0.56.0\n\nReleased 2020/11/26\n\n## Added\n\n* Objective-c bindings generate `From<ChildClass> for ParentClass` as well as `TryFrom<ParentClass> for ChildClass` ([#1883][]).\n* Experimental dynamic library support via `dynamic_library_name` (#1846).\n* Option to disable deriving `Default` on a per-struct basis (#1930).\n\n## Changed\n\n* Objective-c bindings borrow self rather than take ownership ([#1883][]).\n* Templates and enums now correctly use the same naming scheme as other types\n (#1891).\n\n## Fixed\n\n* Constructors in wasm32 now return a value. (#1877).\n* Fixed objective-c protocol impl blocks for parent classes's protocols ([#1883][]).\n\n[#1883]: https://github.com/rust-lang/rust-bindgen/issues/1883\n\n--------------------------------------------------------------------------------\n\n# 0.55.1\n\nReleased 2020/08/24.\n\n## Fixed\n\n * Fixed a regression where anonymous enums referenced by members or such won't\n   generate valid Rust code. (#1882).\n\n--------------------------------------------------------------------------------\n\n# 0.55.0\n\nReleased 2020/08/23.\n\n## Removed\n\n * Support for libclang 3.8 has been removed (#1830).\n\n## Added\n\n * Added options to avoid deriving the Debug trait (#1858).\n\n * Added options to allow to override the default anonymous field prefix (#1859).\n\n * Added options to allow to override the default macro integer type from the\n   command line (#1863).\n\n## Changed\n\n * Typed anonymous enums now generate better code (#1850).\n\n * Objective-C bindings are more idiomatic now (#1847).\n\n * Updated to clang-sys 1.0. Minimum supported rust version is 1.40 as\n   a consequence of that change.\n\n## Fixed\n\n * Fixed constness of multi-dimensional arrays in some cases (#1861).\n\n * Fixed wrong target given to clang when compiling with a target which doesn't\n   match the target clang expects (#1870, #1878).\n\n * Fixed wrong flags being computed for cross-compilation cases where the target\n   wasn't explicitly provided via clang flags (#1872).\n\nThanks again to all the awesome contributors that sent patches included in this\nrelease!\n\n--------------------------------------------------------------------------------\n\n# 0.54.1\n\nReleased 2020/07/06.\n\n**Yanked**: The change in #1798 is technically breaking, see PR for details.\n\n## Added\n\n * Added ParseCallbacks::func_macro to be able to process function-like macros.\n   (#1792).\n\n * Allowed IntKind::Custom to represent paths instead of idents (#1800).\n\n## Changed\n\n * Generated comment now includes the bindgen version, and can be disabled\n   (#1814).\n\n * Various documentation improvements.\n\n## Fixed\n\n * Typedefs for types with the same names as rust primitive types compiles\n   (#1798).\n\n * Bindgen dependencies will now get rebuilt when various environment variables\n   that affect bindgen change (#1809, #1813).\n\n * Various fixes to command_line_flags (#1816, #1819, #1821).\n\n * Functions that start with `operator` now get properly generated (#1817).\n\n\nThanks to all the awesome contributors that sent patches included in this\nrelease!\n\n--------------------------------------------------------------------------------\n\n# 0.54.0\n\nReleased 2020/05/21.\n\n## Added\n\n * New command line flag to allow disabling untagged unions (#1789).\n\n## Changed\n\n * Various documentation improvements (#1764, #1751, #1757).\n * Better Objective-C support (#1722, #1750).\n\n## Fixed\n\n * Rust method wrappers are not emitted for blacklisted functions (#1775).\n * Fixed function signatures in some edge cases involving Objective-C or\n   `__stdcall` (#1781).\n\n--------------------------------------------------------------------------------\n\n# 0.53.3\n\nReleased 2020/05/21.\n\n*Note: This release contains the same fixes and additions as 0.54.0, but without\nthe Objective-C breaking changes*\n\n## Added\n\n * New command line flag to allow disabling untagged unions (#1789).\n\n## Fixed\n\n * Rust method wrappers are not emitted for blacklisted functions (#1775).\n * Fixed function signatures in some edge cases involving Objective-C or\n   `__stdcall` (#1781).\n\n--------------------------------------------------------------------------------\n\n# 0.53.2\n\nReleased 2020/03/10.\n\n## Changed\n\n * clang-sys and cexpr have been updated (#1741 and #1744).\n * Runtime of some commands has been improved (#1737)\n * Some error messages have been improved (#1734).\n\n--------------------------------------------------------------------------------\n\n# 0.53.1\n\nReleased 2020/02/03.\n\n## Added\n\n * Opt-in to convert size_t to usize again (#1720).\n\n--------------------------------------------------------------------------------\n\n# 0.53.0\n\nReleased 2020/02/02.\n\n## Added\n\n * Support for wasm_import_module. (#1691).\n * non_exhaustive feature is now stable (#1698).\n * Various objective-C improvements (#1702).\n\n## Changed\n\n * Removed size_t to usize conversion rule (#1688).\n\n## Fixed\n\n * Various unneeded padding fields shouldn't be generated anymore (#1710).\n * Bitfields on packed structs should generate correct layout (#1717).\n * Too large bitfield blocks now generate compiling code (#1719).\n\n--------------------------------------------------------------------------------\n\n# 0.52.0\n\nReleased 2019/11/19.\n\n## Added\n\n * Added `newtype` enum style, much like `bitfield` but without the bitwise ops\n   (#1677).\n * Added support for `MaybeUninit` rather than `mem::uninitialized()` (#1666).\n * Allowed static linking (#1620) behind a feature. Note that **if you're using\n   `default-features = false`, you probably want to use the `\"runtime\"` feature\n   to get the same behavior as before**.\n\n## Changed\n\n * Use c_void from core when --use-core is specified and available (#1634).\n * Various dependencies and features are non-default now (like `regex` unicode\n   features).\n\n## Fixed\n\n * Fixed crash when unknown keywords are used before a namespace (#1678).\n * Do not generate implementation for clone for flexible array members (#1664).\n * Fixed `#[must_use]` support for libclang 9+ (#1646).\n * Fixed `BitfieldUnit` constructor to handle 64 bit wide bitfields on 32 bit (#1640).\n * Added a `ParseCallbacks` handler for included files. (#1637).\n\n# 0.51.1\n\nReleased 2019/09/23.\n\n## Fixed\n\n * Mismatched `Ord` and `PartialOrd` implementations were fixed, which regresses\n   bindgen in funny ways when using rustc nightly. Dot releases for a few of the\n   previous versions of bindgen will be created with this fix. Also,\n   a `v0.51.1-oldsyn` version was uploaded without the syn update. [#1627][]\n\n## Changed\n\n * Syn and related dependencies have been updated. [#1611][]\n\n * Switches added to allow less dependencies. In\n   particular: It won't pull `failure` and related dependencies by default, and\n   there's a default-on `which-rustfmt` feature which allows to get rid of\n   `which` altogether. [#1615][] / [#1625][]\n\n * `fxhash` dependency was switched to `rustc-hash`. [#1626][]\n\n[#1627]: https://github.com/rust-lang/rust-bindgen/issues/1627\n[#1611]: https://github.com/rust-lang/rust-bindgen/issues/1611\n[#1615]: https://github.com/rust-lang/rust-bindgen/issues/1615\n[#1625]: https://github.com/rust-lang/rust-bindgen/issues/1625\n[#1626]: https://github.com/rust-lang/rust-bindgen/issues/1626\n[#1627]: https://github.com/rust-lang/rust-bindgen/issues/1627\n\n# 0.51.0\n\nReleased 2019/07/26.\n\n## Fixed\n\n * Improve workaround for LLVM stack overflow when evaluating value-dependent\n   expressions. [#1591][]\n\n * Bindgen will properly detect the layout of incomplete arrays. [#1592][]\n\n * Bindgen will properly detect the layout of empty unions and forward\n   declarations of unions. [#1593][] and [#1595][]. Thanks @pmarks!\n\n## Changed\n\n * Refactored the way layout of `wchar_t` is computed. This is a breaking change\n   since `IntKind::WChar` (exposed in `ParseCallbacks`) no longer needs a `size`\n   member. [#1596][]\n\n## Added\n\n * Bindgen now reads `RUSTFMT` in the environment to try to find a suitable\n   `rustfmt` binary. [#1602][]\n\n[#1591]: https://github.com/rust-lang/rust-bindgen/issues/1591\n[#1592]: https://github.com/rust-lang/rust-bindgen/issues/1592\n[#1593]: https://github.com/rust-lang/rust-bindgen/issues/1593\n[#1595]: https://github.com/rust-lang/rust-bindgen/issues/1595\n[#1596]: https://github.com/rust-lang/rust-bindgen/issues/1596\n[#1602]: https://github.com/rust-lang/rust-bindgen/issues/1602\n\n# 0.50.0\n\nReleased 2019/07/01.\n\n## Added\n\n* Fixed pointers to Objective C blocks [#1582][].\n\n* Various bindgen auto-generated types are now constructible in `const fn`\n  contexts [#1571][]\n\n* It is possible to generate `#[non_exhaustive]` enums for rust nightly targets.\n  [#1575][]\n\n* It is possible to avoid building clap now if you're using bindgen as\n  a library. [#1581][].\n\n[#1571]: https://github.com/rust-lang/rust-bindgen/issues/1571\n[#1575]: https://github.com/rust-lang/rust-bindgen/issues/1575\n[#1581]: https://github.com/rust-lang/rust-bindgen/issues/1581\n[#1582]: https://github.com/rust-lang/rust-bindgen/issues/1582\n\n# 0.49.3\n\nReleased 2019/06/25. **YANKED**\n\n## Added\n\n* Various bindgen auto-generated types are now constructible in `const fn`\n  contexts [#1571][]\n\n* It is possible to generate `#[non_exhaustive]` enums for rust nightly targets.\n  [#1575][]\n\n* It is possible to avoid building clap now if you're using bindgen as\n  a library. [#1581][].\n\n[#1571]: https://github.com/rust-lang/rust-bindgen/issues/1571\n[#1575]: https://github.com/rust-lang/rust-bindgen/issues/1575\n[#1581]: https://github.com/rust-lang/rust-bindgen/issues/1581\n\n# 0.49.2\n\nReleased 2019/05/22\n\n## Changed\n\n* Bindgen now has an option to generate array arguments as pointer to the array,\n  not to the element (so `void foo(int arr[2])` would be generated as\n  `arr: *mut [c_int; 2]` rather than `arr: *mut c_int`. Thanks @elichai!\n  [#1564][].\n\n[#1564]: https://github.com/rust-lang/rust-bindgen/issues/1564\n\n# 0.49.1\n\nReleased 2019/05/16\n\n## Fixed\n\n* Bindgen will not emit `#[link_name]` attributes in win32 and macos for\n  C functions and constants where it can detect it's not needed (thanks\n  @michaelwoerister!). [#1558][]\n\n## Changed\n\n* Bindgen will no longer use `hashbrown` internally, and will use fxhash\n  and `std::HashMap`. This is equivalent for newer `rustc`s since `hashbrown`\n  was merged in libstd, and the performance difference should be close to zero\n  for older rustcs.\n\n[#1558]: https://github.com/rust-lang/rust-bindgen/issues/1558\n\n# 0.49.0\n\nReleased 2019/03/27\n\n## Added\n\n* BINDGEN_EXTRA_CLANG_ARGS environment variable was added (thanks @jhwgh1968!). [#1537][]\n\n## Fixed\n\n* Bindgen will properly name parameters inside nested function pointer\n  declarations (thanks @flowbish!). [#1535][]\n\n## Changed\n\n* Derive code was greatly improved by @jethrogb. [#1540][]\n* Derive analysis now handles trivial types more gracefully. [#1492][]\n* clang-sys was updated by @eclipseo. [#1539][]\n* bindgen should now get include paths correctly even when `--target` is\n  specified. The `detect_include_paths` option can be used to opt-out of this\n  behavior.\n\n[#1535]: https://github.com/rust-lang/rust-bindgen/issues/1535\n[#1537]: https://github.com/rust-lang/rust-bindgen/issues/1537\n[#1540]: https://github.com/rust-lang/rust-bindgen/issues/1540\n[#1492]: https://github.com/rust-lang/rust-bindgen/issues/1492\n\n# 0.48.1\n\nReleased 2019/03/06\n\n## Fixed\n\n* Bindgen will properly lay out types that use reference members. [#1531][]\n\n[#1531]: https://github.com/rust-lang/rust-bindgen/issues/1531\n\n--------------------------------------------------------------------------------\n\n# 0.48.0\n\nReleased 2019/03/04\n\n## Changed\n\n* Default rust target was changed to 1.33, which means that bindgen can get much\n  more often the layout of structs right. [#1529][]\n\n## Fixed\n\n* Bindgen will output repr(align) just when needed for unions. [#1498][]\n\n[#1529]: https://github.com/rust-lang/rust-bindgen/issues/1529\n[#1498]: https://github.com/rust-lang/rust-bindgen/issues/1498\n\n--------------------------------------------------------------------------------\n\n# 0.47.4\n\nReleased 2020/11/13\n\n## Added\n\n* Backported BINDGEN_EXTRA_CLANG_ARGS support per request (#1910).\n\n--------------------------------------------------------------------------------\n\n# 0.47.3\n\nReleased 2019/02/25\n\n## Changed\n\n* Allowed to build with which 1.0.\n\n--------------------------------------------------------------------------------\n\n# 0.47.2\n\nReleased 2019/02/22\n\n## Fixed\n\n* @flowbish fixed code generation for nested function prototypes. [#1508][]\n* Some complex C++ constructs no longer panic on code generation [#1513][]\n* Implicit template parameters are now appended to base classes [#1515][]\n* @flier fixed single-argument block pointers [#1519][]\n* Bindgen won't panic when parsing an undeduced auto type [#1525][]\n\n[#1508]: https://github.com/rust-lang/rust-bindgen/issues/1508\n[#1513]: https://github.com/rust-lang/rust-bindgen/issues/1513\n[#1515]: https://github.com/rust-lang/rust-bindgen/issues/1515\n[#1519]: https://github.com/rust-lang/rust-bindgen/issues/1519\n[#1525]: https://github.com/rust-lang/rust-bindgen/issues/1525\n\n--------------------------------------------------------------------------------\n\n# 0.47.1\n\nReleased 2019/02/02\n\n## Changed\n\n* @luser improved the error message when rustfmt cannot be found [#1501][]\n\n## Fixed\n\n* Reverted `clang-sys` update for regressions [#1505][]\n\n[#1505]: https://github.com/rust-lang/rust-bindgen/issues/1505\n[#1501]: https://github.com/rust-lang/rust-bindgen/issues/1501\n\n--------------------------------------------------------------------------------\n\n# 0.47.0\n\nReleased 2019/01/19\n\n## Changed\n\n- `#pragma pack(n)` is now translated to `#[repr(C, packed(n))]` when targeting Rust 1.33+. [#537][]\n\n[#537]: https://github.com/rust-lang/rust-bindgen/issues/537\n\n* Bitfield enums now use `#[repr(transparent)]` instead of `#[repr(C)]` when targeting Rust 1.28+. [#1474][]\n\n[#1474]: https://github.com/rust-lang/rust-bindgen/issues/1474\n\n## Fixed\n\n* `#[repr(packed)]` is now properly added if the struct only contains a vtable.\n  [#1495][]\n\n[#1495]: https://github.com/rust-lang/rust-bindgen/pull/1495\n\n* `clang-sys` should now more accurately find libclang versions when multiple\n  of them are available. [#1489][]\n\n[#1489]: https://github.com/rust-lang/rust-bindgen/pull/1489\n\n--------------------------------------------------------------------------------\n\n# 0.33.1 .. 0.46.0\n\nhttps://github.com/rust-lang/rust-bindgen/compare/v0.32.2...v0.46.0\n\n(Just a sneak peek, since a lot of stuff has changed :D)\n\n## Added\n\n* APIs to add lines to specific rust modules / C++ namespaces exist now.\n  [#1307][]\n\n[#1307]: https://github.com/rust-lang/rust-bindgen/issues/1307\n\n## Removed\n\n* The link options (`link`, `link_framework`, `link_static`) have been removed.\n  They did nothing already, see [#104][]\n\n[#104]: https://github.com/rust-lang/rust-bindgen/issues/104\n\n## Changed\n\n* Associated constants are used now for bitfield enums when available. [#1166][]\n\n[#1166]: https://github.com/rust-lang/rust-bindgen/issues/1166\n\n* New versions of a bunch of dependencies (syn / quote / etc.).\n\n## Fixed\n\n* Better target information from clang to properly generate types when\n  cross-compiling [#1289][].\n\n[#1289]: https://github.com/rust-lang/rust-bindgen/issues/1289\n\n* Pointer constness was fixed in a bunch of cases when using `int const*` and\n  such. [#1311][] [#1312][].\n\n[#1311]: https://github.com/rust-lang/rust-bindgen/issues/1311\n[#1312]: https://github.com/rust-lang/rust-bindgen/issues/1312\n\n* Bitfields now work properly on big-endian machines. [#1340][]\n\n[#1340]: https://github.com/rust-lang/rust-bindgen/issues/1340\n\n* `wchar_t` layout works properly now. [#1345][]\n\n[#1345]: https://github.com/rust-lang/rust-bindgen/issues/1345\n\n* Functions can be blacklisted now. [#1364][]\n\n[#1364]: https://github.com/rust-lang/rust-bindgen/issues/1364\n\n* ... Lot's more!\n\n--------------------------------------------------------------------------------\n\n# 0.33.1\n\nReleased 2018/02/14\n\n## Fixed\n\n* Reverted the dependency update to `quote = \"0.4\"` and addition of the\n  `proc_macro2` dependency. The `proc_macro2` crate depends on `rustc` internal\n  libraries, which means that CLIs which use it must be run under `rustup`,\n  which is not acceptable for `bindgen`. [#1248][]\n\n[#1248]: https://github.com/rust-lang/rust-bindgen/issues/1248\n\n--------------------------------------------------------------------------------\n\n# 0.33.0\n\n--------------------------------------------------------------------------------\n\n# 0.32.2\n\nReleased 2018/01/22\n\n## Fixed\n\n* Avoid symbol generation for pure virtual functions. [#1197][]\n* Handling of `_Complex _Float128`. [#1087][]\n* Regression on code generation for variadic functions. [#1216][]\n* Enum code generation generates conflicting repr hint warning. [#1224][]\n* Constified code generation for enums with an explicit type of `bool`. [#1145][]\n* Bindgen will now call `rustfmt` directly instead of via `rustup`. [#1184][]\n\n[#1197]: https://github.com/rust-lang/rust-bindgen/issues/1197\n[#1087]: https://github.com/rust-lang/rust-bindgen/issues/1087\n[#1216]: https://github.com/rust-lang/rust-bindgen/issues/1216\n[#1224]: https://github.com/rust-lang/rust-bindgen/issues/1224\n[#1145]: https://github.com/rust-lang/rust-bindgen/issues/1145\n[#1184]: https://github.com/rust-lang/rust-bindgen/issues/1184\n\n# 0.32.1\n\nReleased 2017/12/18\n\n## Fixed\n\n* When translating C/C++ `enum`s into Rust `enum`s using `rustified_enum` /\n  `--rustified-enum`, properly add `#[repr(C)]` to the emitted `enum`. [#1183][]\n\n[#1183]: https://github.com/rust-lang/rust-bindgen/issues/1183\n\n--------------------------------------------------------------------------------\n\n# 0.32.0\n\nReleased 2017/12/08\n\n## Added\n\n* Added support for bit-field allocation units that are larger than 64 bits\n  wide. Note that individual bit-fields within such units are still restricted\n  to being no wider than 64 bits. [#1158][]\n\n* We can now generate random C header files and test that `bindgen` can process\n  them with the `quickcheck` crate. Initial support landed in [#1159][] with a\n  few more additions in follow up pull requests.\n\n## Changed\n\n* The `bindgen::Builder::{constified_enum_module,{bitfield,rustified}_enum}`\n  builder methods and their corresponding CLI flags now compare their argument\n  to the C/C++ `enum`'s \"canonical path\", which includes leading namespaces,\n  rather than its \"canonical name\", which does not. This is a breaking change\n  that requires callers which target a namespaced C++ enum to call e.g.\n  `bitfield_enum(\"<namespace>::<enum_name>\")` rather than e.g.\n  `bitfield_enum(\"<enum_name>\")`. [#1162][]\n\n* When a struct is packed to a smaller alignment that is still greater than one,\n  `bindgen` cannot emit Rust bindings that match the input source. Before, it\n  would emit `#[repr(packed)]` anyways, which packs to an alignment of one, but\n  this can lead to misalignment and UB. Now, `bindgen` will detect these\n  situations and convert the struct into an opaque blob of bytes with the proper\n  alignment. We are eagerly awaiting support for `#[repr(packed(N))]` in\n  Rust. [#1136][]\n\n## Fixed\n\n* There was a perfect storm of conditions that could cause `bindgen` not to emit\n  any bindings if spawning `rustfmt` to format the bindings failed. This is now\n  fixed. [#1112][]\n\n* In some circumstances, `bindgen` would emit type parameters twice for\n  references to template instantiations. This is now fixed. [#1113][]\n\n* When a C/C++ struct had a field named with a Rust keyword, and `impl_debug`\n  was enabled, the generated `impl Debug for ...` blocks could reference the\n  field by the Rust keyword name, rather than the non-keyword field name we\n  actually end up generating. This is now fixed. [#1123][]\n\n* There was a regression in 0.31.0 where C++ template aliases to opaque types\n  would sometimes not treat the aliased type as opaque. This is now\n  fixed. [#1118][]\n\n* There was a regression in 0.31.0 that could cause `bindgen` to panic when\n  parsing nested template classes. This is now fixed. [#1127][]\n\n* Unnamed bit-fields do not affect alignment of their struct or class in C/C++,\n  however `bindgen` interpreted them as doing so, which could generate\n  `#[repr(C)]` structs expecting to have an incorrect alignment. This is now\n  fixed. [#1076][]\n\n* When a zero-sized type was used in a bit-field, `bindgen` could\n  divide-by-zero. This is now fixed. [#1137][]\n\n* When a template parameter is used in a bit-field, `bindgen` would panic. This\n  is now fixed. [#1140][]\n\n* There was a regression in 0.31.0 where if `bindgen` was given a header file\n  that did not exist, it would panic. This is now fixed, and it will instead\n  properly report the error. [#1146][]\n\n* In some cases, generated bit-field getters and setters could access memory\n  beyond `self`. This is now fixed. [#954][]\n\n[#1162]: https://github.com/rust-lang/rust-bindgen/issues/1162\n[#1113]: https://github.com/rust-lang/rust-bindgen/issues/1113\n[#1112]: https://github.com/rust-lang/rust-bindgen/issues/1112\n[#1123]: https://github.com/rust-lang/rust-bindgen/issues/1123\n[#1127]: https://github.com/rust-lang/rust-bindgen/issues/1127\n[#1136]: https://github.com/rust-lang/rust-bindgen/issues/1136\n[#1137]: https://github.com/rust-lang/rust-bindgen/issues/1137\n[#1140]: https://github.com/rust-lang/rust-bindgen/issues/1140\n[#1146]: https://github.com/rust-lang/rust-bindgen/issues/1146\n[#1118]: https://github.com/rust-lang/rust-bindgen/issues/1118\n[#1076]: https://github.com/rust-lang/rust-bindgen/issues/1076\n[#1158]: https://github.com/rust-lang/rust-bindgen/issues/1158\n\n--------------------------------------------------------------------------------\n\n# 0.31.0\n\nReleased 2017/10/27\n\n## Added\n\n* 🎉 **A new `bindgen` reviewer: [@pepyakin](https://github.com/pepyakin)** 🎉\n  You can ask @pepyakin to review all your future pull requests with `r?\n  @pepyakin` from now on 😄\n\n* Timers for seeing which phases `bindgen` is spending its time in. On the\n  command line, use the `--time-phases` flag. From a builder, use the\n  `bindgen::Builder::time_phases(true)` method. [#938][]\n\n* You can now disable `#[derive(Copy)]` for all types with `--no-derive-copy`\n  and `bindgen::Builder::derive_copy(false)`. [#948][]\n\n* We now have an overview of `bindgen`'s code base and architecture for\n  newcomers in `CONTRIBUTING.md`. [#988][]\n\n* Derive `PartialOrd` with the `--with-derive-partialord` CLI flag or\n  `bindgen::Builder::derive_partialord(true)` builder method. [#882][]\n\n* Derive `Ord` with the `--with-derive-ord` CLI flag or\n  `bindgen::Builder::derive_ord(true)` builder method. [#884][]\n\n* When `PartialEq` cannot be derived because of an array larger than Rust's\n  array-derive limit, `bindgen` can emit an `impl PartialEq for ...`\n  block. Enable this behavior with the `--impl-partialeq` CLI flag or the\n  `bindgen::Builder::impl_partialeq(true)` method. [#1012][]\n\n* When deriving `PartialEq` for all types, you can now specify particular types\n  that shouldn't `derive(PartialEq)` with the `--no-partialeq <regex>` CLI flag\n  or `bindgen::Builder::no_partialeq(\"<regex>\")` builder method. [#996][]\n\n* Specify types that should not derive `Copy` with the `--no-copy <regex>` CLI\n  flag or `bindgen::Builder::no_copy(\"<regex>\")` builder method. This\n  functionality was previously only available via comment annotations in the\n  header sources. [#1099][]\n\n* When deriving `Hash` for all types, you can now specify particular types that\n  shouldn't `derive(Hash)` with the `--no-hash <regex>` CLI flag or\n  `bindgen::Builder::no_hash(\"<regex>\")` builder method. [#1105][]\n\n* The `bindgen` users guide now has an [FAQ section][faq]! If you have any FAQ\n  suggestions to put up there, please open a pull request. [#1020][]\n\n* Added `csmith` fuzzing infrastructure. `csmith` generates random C and C++\n  programs, we feed those into `bindgen` as headers to generate bindings to,\n  then test that the generated bindings compile and that their layout tests\n  pass. This infrastructure landed in\n  [many small bits](https://github.com/rust-lang/rust-bindgen/issues?utf8=%E2%9C%93&q=label%3AA-csmith%20is%3Aclosed).\n\n  We <3 folks who [help us find and fix issues via fuzzing][fuzzing]! *hint\n  hint*\n\n* Added experimental support for the `thiscall` ABI when targeting Rust\n  nightly. [#1065][]\n\n## Changed\n\n* If the user does not explicitly pass a `--target` argument for `libclang`,\n  `bindgen` will insert such an argument itself. See [#942][], [#947][], and\n  [#953][] for details.\n\n* C/C++ `enum`s are now translated into constants by default, rather than Rust\n  `enum`s. The old behavior was a big footgun because `rustc` assumes that the\n  only values of an `enum` are its variants, whereas a lot of C/C++ code uses\n  random values as `enum`s. Put these two things and it leads to *undefined\n  behavior*. Translating C/C++ `enum`s into Rust `enum`s is still available with\n  the `--rustified-enum <regex>` CLI flag and\n  `bindgen::Builder::rustified_enum(\"<regex>\")` builder method. [#758][]\n\n* Generated bindings are now pretty printed with `rustfmt` by default.\n  Previously, this option existed, but was off by default because `syntex` did\n  an OK job at pretty printing the bindings. Now that we are using `quote! {\n  ... }` instead of `syntex`, we lost that pretty printing, and now rely on\n  `rustfmt`. You can disable `rustfmt`ing with `--no-rustfmt-bindings` or\n  `bindgen::Builder::rustfmt_bindings(false)`. See [#925][] and [#1022][] for\n  details.\n\n## Deprecated\n\n* `bindgen::Builder::hide_type` is deprecated in favor of\n  `bindgen::Builder::blacklist_type`. [#987][]\n\n* `bindgen::Builder::whitelisted_type` is deprecated in favor of\n  `bindgen::Builder::whitelist_type`. [#987][]\n\n* `bindgen::Builder::whitelisted_function` is deprecated in favor of\n  `bindgen::Builder::whitelist_function`. [#985][]\n\n* `bindgen::Builder::whitelisted_var` is deprecated in favor of\n  `bindgen::Builder::whitelist_var`. [#989][]\n\n## Removed\n\n* Removed the dependency on (unmaintained) `syntex`, and **build times are cut\n  in half**!\n\n  Before:\n\n  ```\n  $ cargo clean; cargo build\n  <snip>\n      Finished dev [unoptimized + debuginfo] target(s) in 98.75 secs\n  ```\n\n  After:\n\n  ```\n  $ cargo clean; cargo build\n  <snip>\n      Finished dev [unoptimized + debuginfo] target(s) in 46.26 secs\n  ```\n\n  [#925][]\n\n* The `BindgenOptions` type is no longer public. It had been deprecated in\n  previous releases. Use `bindgen::Builder` instead. [#1000][]\n\n## Fixed\n\n* Under certain conditions, a globally scoped `enum` could end up with bindings\n  in the wrong namespace module. [#888][]\n\n* Blacklisted types were incorrectly assumed to always be `Copy`able (and\n  assumed to implement other traits as well). `bindgen` is now conservatively\n  pessimistic about the traits that blacklisted types implement. [#944][]\n\n* When bitfields have a ridiculously large number of bits (for example,\n  `unsigned : 632;`) then `bindgen` was incorrectly deriving traits that\n  couldn't be derived, resulting in errors when compiling the bindings, and was\n  also generating `struct`s with an incorrect layout. Both issues have been\n  fixed. [#982][]\n\n* `_` is a valid identifier in some C++ contexts, but can't be referenced in\n  Rust, as it is the \"throwaway identifier\" (a term I just made up, if you use\n  it now, then you owe me money). `bindgen` will now translate `_` into `__` so\n  that it can be used on the Rust side. [#1008][]\n\n* Nested class definitions were sometimes being emitted in the wrong namespace\n  module in the generated bindings. [#1048][]\n\n* `bindgen` was mis-handling `union`s that contained bitfield members. This has\n  been fixed. [#744][]\n\n* Unsigned constants that were greater than `u32::MAX` were being mis-translated\n  by `bindgen`. This is now fixed. [#1040][]\n\n* When given a directory as an input file, or a file to which we don't have read\n  permissions, then `bindgen` will print a more useful error message\n  now. [#1029][]\n\n* `bindgen` previously attempted to derive `Hash` for structures with\n  flexibly-sized array members, but knowing how many elements exist in such\n  arrays requires program-specific knowledge that `bindgen` cannot\n  have. [#1094][]\n\n[faq]: https://rust-lang.github.io/rust-bindgen/faq.html\n[fuzzing]: https://github.com/rust-lang/rust-bindgen/blob/main/csmith-fuzzing/README.md\n\n[#938]: https://github.com/rust-lang/rust-bindgen/issues/938\n[#888]: https://github.com/rust-lang/rust-bindgen/issues/888\n[#944]: https://github.com/rust-lang/rust-bindgen/issues/944\n[#942]: https://github.com/rust-lang/rust-bindgen/issues/942\n[#947]: https://github.com/rust-lang/rust-bindgen/issues/947\n[#953]: https://github.com/rust-lang/rust-bindgen/issues/953\n[#948]: https://github.com/rust-lang/rust-bindgen/issues/948\n[#925]: https://github.com/rust-lang/rust-bindgen/issues/925\n[#758]: https://github.com/rust-lang/rust-bindgen/issues/758\n[#988]: https://github.com/rust-lang/rust-bindgen/issues/988\n[#987]: https://github.com/rust-lang/rust-bindgen/issues/987\n[#985]: https://github.com/rust-lang/rust-bindgen/issues/985\n[#989]: https://github.com/rust-lang/rust-bindgen/issues/989\n[#1000]: https://github.com/rust-lang/rust-bindgen/issues/1000\n[#882]: https://github.com/rust-lang/rust-bindgen/issues/882\n[#884]: https://github.com/rust-lang/rust-bindgen/issues/884\n[#996]: https://github.com/rust-lang/rust-bindgen/issues/996\n[#982]: https://github.com/rust-lang/rust-bindgen/issues/982\n[#1008]: https://github.com/rust-lang/rust-bindgen/issues/1008\n[#1022]: https://github.com/rust-lang/rust-bindgen/issues/1022\n[#1048]: https://github.com/rust-lang/rust-bindgen/issues/1048\n[#1012]: https://github.com/rust-lang/rust-bindgen/issues/1012\n[#744]: https://github.com/rust-lang/rust-bindgen/issues/744\n[#1065]: https://github.com/rust-lang/rust-bindgen/issues/1065\n[#1040]: https://github.com/rust-lang/rust-bindgen/issues/1040\n[#1029]: https://github.com/rust-lang/rust-bindgen/issues/1029\n[#1094]: https://github.com/rust-lang/rust-bindgen/issues/1094\n[#1099]: https://github.com/rust-lang/rust-bindgen/issues/1099\n[#1105]: https://github.com/rust-lang/rust-bindgen/issues/1105\n\n--------------------------------------------------------------------------------\n\n# 0.30.0\n\nReleased 2017/08/28\n\n## Added\n\n* Explicit control over choosing which Rust version (specific stable versions or\n  nightly Rust) to target. This defaults to the latest stable Rust\n  version. [#832][]\n\n```rust\nbindgen::Builder::default()\n    .rust_target(bindgen::RustTarget::Stable_1_19)\n    // or `.rust_target(bindgen::RustTarget::Nightly)` to use unstable features\n```\n\nor\n\n```\n$ bindgen --rust-target 1.19\n# or `--rust-target nightly` to use unstable features\n```\n\n* Started adding `derive(Copy)` for large arrays of `Copy` things, even when the\n  array is too large to `derive(Clone)` because Rust doesn't implement `Clone`\n  for arrays of length greater than 32. [#874][]\n\n* `bindgen` can now determine which types are hashable and add `derive(Hash)` to\n  those types that support it. This is disabled by default, but can be enabled\n  via `bindgen::Builder::derive_hash` or `--with-derive-hash`. [#876][]\n\n* `bindgen` can now generate `impl Debug for Blah` trait implementations for\n  types that contain non-`Debug` types, and therefore cannot\n  `derive(Debug)`. This behavior can be enabled with\n  `bindgen::Builder::impl_debug` and `--impl-debug`. [#875][]\n\n* `bindgen` can now invoke `rustfmt` on the generated bindings. The bindings\n  have historically been fairly pretty printed, but sometimes this is not the\n  case, especially with the new `impl Debug for Blah` feature. Have `bindgen`\n  run `rustfmt` with `bindgen::Builder::rustfmt_bindings` and\n  `--rustfmt-bindings`, and use non-default `rustfmt` configuration files with\n  `bindgen::Builder::rustfmt_configuration_file` and\n  `--rustfmt-configuration-file`. [#900][]\n\n* `bindgen` can now determine which types can be compared with `==` and add\n  `derive(PartialEq)` to those types that support it. This is disabled by\n  default, but can be enabled via `bindgen::Builder::derive_partialeq` or\n  `--with-derive-partialeq`. [#878][]\n\n* Additionally, `bindgen` can also add `derive(Eq)` to those types which we\n  determined we could `derive(PartialEq)` and do not transitively contain any\n  floats. Enable this behavior with `bindgen::Builder::derive_eq` or\n  `--with-derive-eq`. [#880][]\n\n## Changed\n\n* Started emitting Rust `union`s when targeting stable Rust >= 1.19, not just\n  unstable nightly Rust. [#832][]\n\n* Emitted layout `#[test]`s no longer contain internal IDs for template\n  instantiations including pointers and arrays. This should make generated\n  bindings more stable across updates to unrelated parts of the input\n  headers. [#871][]\n\n* Determining whether a type can derive `Copy` or not was ported from an ad-hoc\n  algorithm to our fix-point framework. [#766][]\n\n* Determining whether a type has a destructor or not was also ported from an\n  ad-hoc algorithm to our fix-point framework. [#927][]\n\n## Deprecated\n\n* `bindgen::Builder::unstable_rust`/`--unstable-rust` is deprecated, in favor of\n  targeting explicit Rust versions with\n  `bindgen::Builder::rust_target`/`--rust-target` instead. [#832][]\n\n## Fixed\n\n* Fixed a regression in the `derive(Default)` analysis that resulted in some\n  opaque types deriving `Default` when they shouldn't have. [#889][]\n\n* Fixed a regression where template instantiation layout `#[test]`s were being\n  generated with invalid Rust identifiers. [#906][]\n\n[#832]: https://github.com/rust-lang/rust-bindgen/issues/832\n[#871]: https://github.com/rust-lang/rust-bindgen/issues/871\n[#874]: https://github.com/rust-lang/rust-bindgen/pull/874\n[#889]: https://github.com/rust-lang/rust-bindgen/pull/874\n[#766]: https://github.com/rust-lang/rust-bindgen/issues/766\n[#876]: https://github.com/rust-lang/rust-bindgen/issues/876\n[#875]: https://github.com/rust-lang/rust-bindgen/issues/875\n[#906]: https://github.com/rust-lang/rust-bindgen/pull/906\n[#900]: https://github.com/rust-lang/rust-bindgen/issues/900\n[#878]: https://github.com/rust-lang/rust-bindgen/issues/878\n[#880]: https://github.com/rust-lang/rust-bindgen/issues/880\n[#927]: https://github.com/rust-lang/rust-bindgen/issues/927\n\n--------------------------------------------------------------------------------\n\n# 0.29.0\n\nReleased 2017/07/31\n\n## Added\n\n* [\"Constified enum modules\"](https://github.com/rust-lang/rust-bindgen/pull/741)\n  translating C/C++ `enum`s into constants within a module for namespacing,\n  rather than mangling the name of the generated constants.\n\n  For example, it turns this:\n\n  ```c++\n  // bindgen-flags: --constified-enum-module PetKind\n\n  enum PetKind {\n      Doggo,\n      Kitty,\n      Hamster\n  };\n\n  struct Pet {\n      PetKind kind;\n      char* noise;\n  };\n  ```\n\n  Into this:\n\n  ```rust\n  /* automatically generated by rust-bindgen */\n\n  pub mod PetKind {\n      pub type Type = ::std::os::raw::c_uint;\n      pub const Doggo: Type = 0;\n      pub const Kitty: Type = 1;\n      pub const Hamster: Type = 2;\n  }\n  #[repr(C)]\n  #[derive(Debug, Copy)]\n  pub struct Pet {\n      pub kind: PetKind::Type,\n      pub noise: *mut ::std::os::raw::c_char,\n  }\n  ```\n\n  The default translation strategy for `enum`s will generate constants with\n  names like `PetKind_Hamster` instead.\n\n  Use `bindgen::Builder::constified_enum_module` or `--constified-enum-module`.\n\n* You can now\n  [mark particular template instantiations as \"opaque\"](https://github.com/rust-lang/rust-bindgen/pull/773),\n  so that `bindgen` emits a blob of bytes with the correct size and alignment\n  rather than creating generic Rust types. This is useful as a workaround for\n  when a template has a specialization for the given type arguments, which\n  `bindgen` does not yet support. Previously, it was all of a templates'\n  instantiations would be opaque or none of them would be. Use\n  `bindgen::Builder::opaque_type(\"SomeTemplate<Foo, Bar>\")` or `--opaque-type\n  \"SomeTemplate<Foo, Bar>\"`.\n\n* Added the ability to\n  [preprocess and dump](https://github.com/rust-lang/rust-bindgen/pull/812)\n  the input headers given to `bindgen` to a file. This should make creating\n  reproducible, system independent, standalone test cases much easier! Bring on\n  the new issues! Use `bindgen::Builder::dump_preprocessed_input` or\n  `--dump-preprocessed-input`.\n\n* We now use a fix-point analysis to determine whether any given type can derive\n  `Debug`, or whether it has an explicit virtual table pointer. Previously we\n  were using an ad-hoc algorithm that had at various times suffered from things\n  like going into infinite loops when coming across cycles. Hopefully those\n  kinds of bugs are a thing of the past!\n  [#767](https://github.com/rust-lang/rust-bindgen/issues/767)\n  [#765](https://github.com/rust-lang/rust-bindgen/issues/765)\n\n## Changed\n\n* The `bindgen` repository has moved under the `rust-lang-nursery` umbrella! The\n  new repository URL is https://github.com/rust-lang-nursery/rust-bindgen 🎉\n\n## Fixed\n\n* No longer generating layout tests for template instantiations using type\n  arguments that we didn't generate bindings for (which then caused compilation\n  errors). [#679](https://github.com/rust-lang/rust-bindgen/issues/769)\n\n* Fixed function name mangling when cross compiling bindings for\n  iOS. [#776](https://github.com/rust-lang/rust-bindgen/pull/776)\n\n* Don't include parent `inline namespace`s' names in types' names. Names of\n  types from some STLs were showing up like `std___cxx11_basic_string` when they\n  should have been\n  `std_basic_string`. [#789](https://github.com/rust-lang/rust-bindgen/issues/789)\n\n* Fixed a bug where we wouldn't generate type definitions for some types\n  referenced by an opaque type's methods, causing compilation\n  errors. [#807](https://github.com/rust-lang/rust-bindgen/issues/807)\n\n* Fixed function name mangling issues for win32\n  targets. [#819](https://github.com/rust-lang/rust-bindgen/issues/819)\n\n* Fixed a bug where `bindgen` was generating a generic type alias that didn't\n  use its type parameter, which is illegal Rust code and caused compilation\n  errors. [#820](https://github.com/rust-lang/rust-bindgen/issues/820)\n\n* The generated size, alignment, and field offset unit tests now have stable\n  names rather than sometimes including an internal identifier which is\n  inherently unstable. This was causing unnecessary diffs when folks were\n  checking in new versions of bindings into their VCS.\n  [#394](https://github.com/rust-lang/rust-bindgen/issues/394)\n\n* Fixed a bug where we would try and `derive(Debug, Default)` on structs that\n  had padding like `[u8; 33]`, which is larger than the largest array length for\n  which Rust will derive traits. This would cause compilation errors when\n  compiling the emitted bindings.\n  [#648](https://github.com/rust-lang/rust-bindgen/issues/648)\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 22.7333984375,
          "content": "# Contributing to `bindgen`\n\nHi! We'd love to have your contributions! If you want help or mentorship, reach\nout to us in a GitHub issue, or stop by\n[#rust on chat.mozilla.org](https://chat.mozilla.org/#/room/#rust:mozilla.org)\nand introduce yourself.\n\n<!-- START doctoc generated TOC please keep comment here to allow auto update -->\n<!-- DON'T EDIT THIS SECTION, INSTEAD RE-RUN doctoc TO UPDATE -->\n\n- [Code of Conduct](#code-of-conduct)\n- [Filing an Issue](#filing-an-issue)\n- [Looking to Start Contributing to `bindgen`?](#looking-to-start-contributing-to-bindgen)\n- [Prerequisites](#prerequisites)\n  - [`rustfmt` / `cargo fmt`](#rustfmt--cargo-fmt)\n- [Building](#building)\n- [Testing](#testing)\n  - [Overview](#overview)\n  - [Testing Bindings Generation](#testing-bindings-generation)\n  - [Testing Generated Bindings](#testing-generated-bindings)\n  - [Testing a Single Header's Bindings Generation and Compiling its Bindings](#testing-a-single-headers-bindings-generation-and-compiling-its-bindings)\n  - [Authoring New Tests](#authoring-new-tests)\n  - [Test Expectations and `libclang` Versions](#test-expectations-and-libclang-versions)\n  - [Integration Tests](#integration-tests)\n  - [Fuzzing `bindgen` with `csmith`](#fuzzing-bindgen-with-csmith)\n  - [Property tests for `bindgen` with `quickchecking`](#property-tests-for-bindgen-with-quickchecking)\n- [Code Overview](#code-overview)\n  - [Implementing new options using `syn`](#implementing-new-options-using-syn)\n- [Pull Requests and Code Reviews](#pull-requests-and-code-reviews)\n- [Generating Graphviz Dot Files](#generating-graphviz-dot-files)\n- [Debug Logging](#debug-logging)\n- [Using `creduce` to Minimize Test Cases](#using-creduce-to-minimize-test-cases)\n  - [Getting `creduce`](#getting-creduce)\n  - [Isolating Your Test Case](#isolating-your-test-case)\n  - [Writing a Predicate Script](#writing-a-predicate-script)\n- [Cutting a new bindgen release](#cutting-a-new-bindgen-release)\n  - [Updating the changelog](#updating-the-changelog)\n  - [Merge to `main`](#merge-to-main)\n  - [Tag and publish](#tag-and-publish)\n  - [Create a new release on Github](#create-a-new-release-on-github)\n  - [What to do if a Github release fails](#what-to-do-if-a-github-release-fails)\n  - [Create a new crates.io release](#create-a-new-cratesio-release)\n\n<!-- END doctoc generated TOC please keep comment here to allow auto update -->\n\n## Code of Conduct\n\nWe abide by the [Rust Code of Conduct][coc] and ask that you do as well.\n\n[coc]: https://www.rust-lang.org/policies/code-of-conduct\n\n## Filing an Issue\n\nThink you've found a bug? File an issue! To help us understand and reproduce the\nissue, provide us with:\n\n- A (preferably reduced) C/C++ header file that reproduces the issue\n- The `bindgen` flags used to reproduce the issue with the header file\n- The expected `bindgen` output\n- The actual `bindgen` output\n- The [debugging logs](#debug-logging) generated when running `bindgen` on this testcase\n\n## Looking to Start Contributing to `bindgen`?\n\n- [Issues labeled \"easy\"](https://github.com/rust-lang/rust-bindgen/issues?q=is%3Aopen+is%3Aissue+label%3AE-easy)\n- [Issues labeled \"less easy\"](https://github.com/rust-lang/rust-bindgen/issues?q=is%3Aopen+is%3Aissue+label%3AE-less-easy)\n- [Issues labeled \"help wanted\"](https://github.com/rust-lang/rust-bindgen/labels/help%20wanted)\n- Still can't find something to work on? [Drop a comment here](https://github.com/rust-lang/rust-bindgen/issues/747)\n\n## Prerequisites\n\n### `rustfmt` / `cargo fmt`\n\nWe use `nightly` channel for `rustfmt`,\nso please set the appropriate setting in your editor/IDE for that.\n\nFor rust-analyzer, you can set `rustfmt.extraArgs = ['+nightly']`.\n\nTo check via command line, you can run `cargo +nightly fmt --check`.\n\n## Building\n\nTo build the `bindgen` library and the `bindgen` executable:\n\n```sh\ncargo build\n```\n\nIf you installed multiple versions of llvm, it may not be able to locate the\nlatest version of `libclang`. In that case, you may want to either uninstall other\nversions of llvm, or specify the path of the desired `libclang` explicitly:\n\n```sh\nexport LIBCLANG_PATH=path/to/clang-9.0/lib\n```\n\n## Testing\n\n### Overview\n\nInput C/C++ test headers reside in the `bindgen-tests/tests/headers` directory. Expected\noutput Rust bindings live in `bindgen-tests/tests/expectations/tests`. For example,\n`bindgen-tests/tests/headers/my_header.h`'s expected generated Rust bindings would be\n`bindgen-tests/tests/expectations/tests/my_header.rs`.\n\nThere are also some integration tests in the `./bindgen-integration` crate, which uses `bindgen` to\ngenerate bindings to some C++ code, and then uses the bindings, asserting that\nvalues are what we expect them to be, both on the Rust and C++ side.\n\nThe generated and expected bindings are formatted with [`prettyplease`] before they are\ncompared. It is a default (but optional) dependency of `bindgen`,\nso be sure to keep that in mind\n(if you built `bindgen` with the `--no-default-features` option of Cargo).\nNote also that `rustfmt` formatting is disabled for the `bindgen-tests/tests/expectations/`\ndirectory tree, which helps avoid failing ui tests.\n\nNote: running `cargo test` from the root directory of `bindgen`'s repository does not\nautomatically test the generated bindings or run the integration tests.\nThese steps must be performed manually when needed.\n\n### Testing Bindings Generation\n\nTo regenerate bindings from the corpus of test headers in `bindgen-tests/tests/headers` and\ncompare them against the expected bindings in `bindgen-tests/tests/expectations/tests`, run:\n\n```sh\ncargo test\n```\n\nAs long as you aren't making any changes to `bindgen`'s output, running this\nshould be sufficient to test your local modifications.\n\nYou may set the `BINDGEN_OVERWRITE_EXPECTED` environment variable to overwrite\nthe expected bindings with `bindgen`'s current output:\n\n```sh\nBINDGEN_OVERWRITE_EXPECTED=1 cargo test\n```\n\nIf you set the `BINDGEN_TESTS_DIFFTOOL` environment variable, `cargo test` will\nexecute `BINDGEN_TESTS_DIFFTOOL /path/of/expected/output /path/of/actual/output`\nwhen the expected output differs from the actual output. You can use this to\nhand check differences by setting it to e.g. \"meld\" (assuming you have meld\ninstalled).\n\nIf you're not changing command line arguments, you may want to set\n`BINDGEN_DISABLE_ROUNDTRIP_TEST` to avoid a lot of tests for round-tripping of\nthose.\n\n### Testing Generated Bindings\n\nIf your local changes are introducing expected modifications in the\n`bindgen-tests/tests/expectations/tests/*` bindings files, then you should test that the\ngenerated bindings files still compile, and that their struct layout tests still\npass. Also, run the integration tests (see below).\n\nYou can do this with these commands:\n\n```sh\ncd bindgen-tests/tests/expectations\ncargo test\n```\n\n### Testing a Single Header's Bindings Generation and Compiling its Bindings\n\nNote: You will need to install [graphviz](https://graphviz.org/) since that\nis a dependency for running `test-one.sh`.\n\nSometimes it's useful to work with one test header from start (generating\nbindings for it) to finish (compiling the bindings and running their layout\ntests). This can be done with the `bindgen-tests/tests/test-one.sh` script. It supports fuzzy\nsearching for test headers. For example, to test\n`tests/headers/what_is_going_on.hpp`, execute this command:\n\n```sh\n./bindgen-tests/tests/test-one.sh going\n```\n\nNote that `test-one.sh` does not recompile `bindgen`, so if you change the code,\nyou'll need to rebuild it before running the script again.\n\n### Authoring New Tests\n\nTo add a new test header to the suite, simply put it in the `bindgen-tests/tests/headers`\ndirectory. Next, run `bindgen` to generate the initial expected output Rust\nbindings. Put those in `bindgen-tests/tests/expectations/tests`.\n\nIf your new test requires certain flags to be passed to `bindgen`, you can\nspecify them at the top of the test header, with a comment like this:\n\n`new_test_header.hpp`:\n\n```c\n// bindgen-flags: --enable-cxx-namespaces -- -std=c++14\n```\n\nThen verify the new Rust bindings compile and pass their layout tests:\n\n```sh\ncd bindgen-tests/tests/expectations\ncargo test new_test_header\n```\n\n### Test Expectations and `libclang` Versions\n\nIf a test generates different bindings across different `libclang` versions (for\nexample, because we take advantage of better/newer APIs when possible), then you\ncan add multiple test expectations, one for each supported `libclang`\nversion. Instead of having a single `bindgen-tests/tests/expectations/tests/my_test.rs` file,\nadd each of:\n\n- `bindgen-tests/tests/expectations/tests/libclang-16/my_test.rs`\n- `bindgen-tests/tests/expectations/tests/libclang-9/my_test.rs`\n\nIf you need to update the test expectations for a test file that generates\ndifferent bindings for different `libclang` versions, you *don't* need to have\nmany versions of `libclang` installed locally. Just make a work-in-progress pull\nrequest, and then when CI fails, it will log a diff of the\nexpectations. Use the diff to patch the appropriate expectation file locally and\nthen update your pull request.\n\nUsually, `bindgen`'s test runner can infer which version of `libclang` you\nhave. If for some reason it can't, you can force a specific `libclang` version\nto check the bindings against with a cargo feature:\n\n```sh\ncargo test --features __testing_only_libclang_$VERSION\n```\n\ndepending on which version of `libclang` you have installed.\n\n### Integration Tests\n\nThe `./bindgen-integration` crate uses `bindgen` to\ngenerate bindings to some C++ code, and then uses the bindings, asserting that\nvalues are what we expect them to be, both on the Rust and C++ side.\n\nTo run the integration tests, issue the following:\n\n```sh\ncd bindgen-integration\ncargo test\n```\n\n### Fuzzing `bindgen` with `csmith`\n\nWe <3 finding hidden bugs and the people who help us find them! One way to help\nuncover hidden bugs is by running `csmith` to generate random headers to test\n`bindgen` against.\n\nSee [./csmith-fuzzing/README.md](./csmith-fuzzing/README.md) for details.\n\n### Property tests for `bindgen` with `quickchecking`\n\nThe `tests/quickchecking` crate generates property tests for `bindgen`.\nFrom the crate's directory you can run the tests with `cargo run`. For details\non additional configuration including how to preserve / inspect the generated\nproperty tests, see\n[`./tests/quickchecking/README.md`](./tests/quickchecking/README.md).\n\n## Code Overview\n\n`bindgen` takes C and C++ header files as input and generates corresponding Rust\n`#[repr(C)]` type definitions and `extern` foreign function declarations.\n\nFirst, we use `libclang` to parse the input headers. See `src/clang.rs` for our\nRust-y wrappers over the raw C `libclang` API that the `clang-sys` crate\nexposes. We walk over `libclang`'s AST and construct our own internal\nrepresentation (IR).  The `ir` module and submodules (`src/ir/*`) contain the IR\ntype definitions and `libclang` AST into IR parsing code.\n\nThe umbrella IR type is the `Item`. It contains various nested `enum`s that let\nus drill down and get more specific about the kind of construct that we're\nlooking at. Here is a summary of the IR types and their relationships:\n\n- `Item` contains:\n  - An `ItemId` to uniquely identify it.\n  - An `ItemKind`, which is one of:\n    - A `Module`, which is originally a C++ namespace and becomes a Rust\n          module. It contains the set of `ItemId`s of `Item`s that are defined\n          within it.\n    - A `Type`, which contains:\n      - A `Layout`, describing the type's size and alignment.\n      - A `TypeKind`, which is one of:\n        - Some integer type.\n        - Some float type.\n        - A `Pointer` to another type.\n        - A function pointer type, with `ItemId`s of its parameter types\n                  and return type.\n        - An `Alias` to another type (`typedef` or `using X = ...`).\n        - A fixed size `Array` of `n` elements of another type.\n        - A `Comp` compound type, which is either a `struct`, `class`,\n                  or `union`. This is potentially a template definition.\n        - A `TemplateInstantiation` referencing some template definition\n                  and a set of template argument types.\n        - Etc...\n    - A `Function`, which contains:\n      - An ABI\n      - A mangled name\n      - a `FunctionKind`, which describes whether this function is a plain\n              function, method, static method, constructor, destructor, etc.\n      - The `ItemId` of its function pointer type.\n    - A `Var` representing a static variable or `#define` constant, which\n          contains:\n      - Its type's `ItemId`\n      - Optionally, a mangled name\n      - Optionally, a value\n  - An optional `clang::SourceLocation` that holds the first source code\n      location where the `Item` was encountered.\n\nThe IR forms a graph of interconnected and inter-referencing types and\nfunctions. The `ir::traversal` module provides IR graph traversal\ninfrastructure: edge kind definitions (base member vs field type vs function\nparameter, etc...), the `Trace` trait to enumerate an IR thing's outgoing edges,\nvarious traversal types.\n\nAfter constructing the IR, we run a series of analyses on it. These analyses do\neverything from allocate logical bitfields into physical units, compute for\nwhich types we can `#[derive(Debug)]`, to determining which implicit template\nparameters a given type uses. The analyses are defined in\n`src/ir/analysis/*`. They are implemented as fixed-point algorithms, using the\n`ir::analysis::MonotoneFramework` trait.\n\nThe final phase is generating Rust source text from the analyzed IR, and it is\ndefined in `src/codegen/*`. We use the `quote` crate, which provides the `quote!{ ... }`\nmacro for quasi-quoting Rust forms. Some options that affect the\ngenerated Rust code are implemented using the [`syn`](https://docs.rs/syn) crate.\n\n### Implementing new options using `syn`\n\nIf a new option can be implemented using the `syn` crate it should be added to\nthe `codegen::postprocessing` module by following these steps:\n\n- Introduce a new field to `BindgenOptions` for the option.\n- Write a free function inside `codegen::postprocessing` implementing the\n  option. This function with the same name of the `BindgenOptions` field.\n- Add a new value to the `codegen::postprocessing::PASSES` for the option using\n  the `pass!` macro.\n\n## Pull Requests and Code Reviews\n\nEnsure that each commit stands alone, and passes tests. This enables better `git\nbisect`ing when needed. If your commits do not stand on their own, then rebase\nthem on top of the latest main and squash them into a single commit.\n\nAll pull requests undergo code review before merging. To request review, comment\n`r? @github_username_of_reviewer`. They we will respond with `r+` to approve the\npull request, or may leave feedback and request changes to the pull request. Any\nchanges should be squashed into the original commit.\n\nUnsure who to ask for review? Ask any of:\n\n- `@emilio`\n- `@pvdrz`\n\nMore resources:\n\n- [Servo's GitHub Workflow](https://github.com/servo/servo/wiki/Github-workflow)\n- [Beginner's Guide to Rebasing and Squashing](https://github.com/servo/servo/wiki/Beginner's-guide-to-rebasing-and-squashing)\n\n## Generating Graphviz Dot Files\n\nWe can generate [Graphviz](http://graphviz.org/pdf/dotguide.pdf) dot files from\nour internal representation of a C/C++ input header, and then you can create a\nPNG or PDF from it with Graphviz's `dot` program. This is very useful when\ndebugging bindgen!\n\nFirst, make sure you have Graphviz and `dot` installed:\n\n```sh\nbrew install graphviz         # OS X\nsudo dnf install graphviz     # Fedora\n# Etc...\n```\n\nThen, use the `--emit-ir-graphviz` flag to generate a `dot` file from our IR:\n\n```sh\ncargo run -- example.hpp --emit-ir-graphviz output.dot\n```\n\nFinally, convert the `dot` file to an image:\n\n```sh\ndot -Tpng output.dot -o output.png\n```\n\nThe final result will look something like this:\n\n[![An example graphviz rendering of our IR](./example-graphviz-ir.png)](./example-graphviz-ir.png)\n\n## Debug Logging\n\nTo help debug what `bindgen` is doing, you can define the environment variable\n`RUST_LOG=bindgen` to get a bunch of debugging log spew.\n\n```sh\nRUST_LOG=bindgen ./target/debug/bindgen [flags...] ~/path/to/some/header.h\n```\n\nThis logging can also be used when debugging failing tests:\n\n```sh\nRUST_LOG=bindgen cargo test\n```\n\n## Using `creduce` to Minimize Test Cases\n\nIf you find a test case that triggers an unexpected panic in `bindgen`, causes\n`bindgen` to emit bindings that won't compile, define structs with the wrong\nsize/alignment, or results in any other kind of incorrectness, then using\n`creduce` can help reduce the test case to a minimal one that still exhibits\nthat same bad behavior.\n\n***Reduced test cases are SUPER helpful when filing bug reports!***\n\n### Getting `creduce`\n\nOften, you can install `creduce` from your OS's package manager:\n\n```sh\nsudo apt install creduce\nbrew install creduce\n# Etc...\n```\n\nOtherwise, follow [these instructions](https://github.com/csmith-project/creduce/blob/master/INSTALL.md) for building and/or installing `creduce`.\n\nRunning `creduce` requires two things:\n\n1. Your isolated test case, and\n\n2. A script to act as a predicate script describing whether the behavior you're\n   trying to isolate occurred.\n\nWith those two things in hand, running `creduce` looks like this:\n\n```sh\ncreduce ./predicate.sh ./isolated-test-case.h\n```\n\n### Isolating Your Test Case\n\nIf you're using `bindgen` as a command line tool, pass\n`--dump-preprocessed-input` flag.\n\nIf you're using `bindgen` as a Rust library, invoke the\n`bindgen::Builder::dump_preprocessed_input` method where you call\n`bindgen::Builder::generate`.\n\nAfterwards, there should be a `__bindgen.i` or `__bindgen.ii` file containing\nthe combined and preprocessed input headers, which is usable as an isolated,\nstandalone test case.\n\n### Writing a Predicate Script\n\nWriting a `predicate.sh` script for a `bindgen` test case is straightforward. We\nalready have a general purpose predicate script that you can use, you just have\nto wrap and configure it.\n\n```bash\n#!/usr/bin/env bash\n\n# Exit the script with a nonzero exit code if:\n# * any individual command finishes with a nonzero exit code, or\n# * we access any undefined variable.\nset -eu\n\n# Invoke the general purpose predicate script that comes in the\n# `bindgen` repository.\n#\n# You'll need to replace `--whatever-flags` with things that are specific to the\n# incorrectness you're trying to pin down. See below for details.\npath/to/rust-bindgen/csmith-fuzzing/predicate.py \\\n    --whatever-flags \\\n    ./isolated-test-case.h\n```\n\nWhen hunting down a particular panic emanating from inside `bindgen`, you can\ninvoke `predicate.py` like this:\n\n```bash\npath/to/rust-bindgen/csmith-fuzzing/predicate.py \\\n    --expect-bindgen-fail \\\n    --bindgen-grep \"thread main panicked at '<insert panic message here>'\" \\\n    ./isolated-test-case.h\n```\n\nAlternatively, when hunting down a bad `#[derive(Eq)]` that is causing `rustc`\nto fail to compile `bindgen`'s emitted bindings, you can invoke `predicate.py`\nlike this:\n\n```bash\n# the rustc-grep argument expects a regex, thus escape where necessary\npath/to/rust-bindgen/csmith-fuzzing/predicate.py \\\n    --bindings-grep NameOfTheStructThatIsErroneouslyDerivingEq \\\n    --expect-compile-fail \\\n    --rustc-grep 'error\\[E0277\\]: the trait bound `f64: std::cmp::Eq` is not satisfied' \\\n    ./isolated-test-case.h\n```\n\nOr, when minimizing a failing layout test in the compiled bindings, you can\ninvoke `predicate.py` like this:\n\n```bash\npath/to/rust-bindgen/csmith-fuzzing/predicate.py \\\n    --bindings-grep MyStruct \\\n    --expect-layout-tests-fail \\\n    --layout-tests-grep \"thread 'bindgen_test_layout_MyStruct' panicked\" \\\n    ./isolated-test-case.h\n```\n\nFor details on all the flags that you can pass to `predicate.py`, run:\n\n```sh\npath/to/rust-bindgen/csmith-fuzzing/predicate.py --help\n```\n\nAnd you can always write your own, arbitrary predicate script if you prefer.\n(Although, maybe we should add extra functionality to `predicate.py` -- file an\nissue if you think so!)\n\n`creduce` is *really* helpful and can cut hundreds of thousands of lines of test\ncase down to 5 lines.\n\nHappy bug hunting and test case reducing!\n\n[More information on using `creduce`.](https://embed.cs.utah.edu/creduce/using/)\n\n## Cutting a new bindgen release\n\nTo cut a release, the following needs to happen:\n\n### Updating the changelog\n\nUpdate the CHANGELOG.md file with the changes from the last release. Something\nlike the following is a useful way to check what has landed:\n\n```sh\ngit log --oneline v0.62.0..HEAD\n```\n\nAlso worth checking the [next-release\ntag](https://github.com/rust-lang/rust-bindgen/pulls?q=is%3Apr+label%3Anext-release).\nIt is very important that you do not rename the `Unreleased` section of the\nchangelog as this will be done automatically using `cargo release` on a further\nstep.\n\n### Merge to `main`\n\nFor regular releases, the changes above should end up in `main` before\npublishing. For dot-releases of an old version (e.g., cherry-picking an\nimportant fix) you can skip this.\n\n### Tag and publish\n\nOnce you're in `main`. Remember to install `doctoc` by running:\n\n```sh\nnpm install doctoc\n```\n\nAnd then run:\n\n```sh\ncargo release [patch|minor] --no-publish --execute\n```\n\nThis does the following:\n\n- Bump the version.\n- Turn the `Unreleased` section of the changelog into the section for the version being released.\n- Update the table of contents of the changelog using `doctoc`.\n- Tag (`git tag`) the HEAD commit\n- Push (`git push`) to GitHub\n\nThe `patch` and `minor` refer to semver concepts:\n\n- `patch` would bump **v0.68.1** to **v0.68.2**\n- `minor` would bump **v0.68.2** to **v0.69.0**\n\n> NOTE:\n> We use the `--no-publish` so that the crates are only published after the release is complete.\n> This is automatic, provided the release CI job is successful.\n\n### Create a new release on Github\n\nThe release is automated with the help of `.github/workflows/release.yml`,\nand will only be created...\n\n- when a Git tag is pushed\n- when all tests succeed\n\nWhile the tests are still running,\na draft GitHub release will be created,\nto avoid notifying watchers of the repo should a CI step fail.\n\nIf everything succeeds,\ntarballs containing bindgen cli executables for Linux and MacOS\n(both for x86 and Arm) will be created.\nSee `[workspace.metadata.dist]` section in `Cargo.toml` for the configuration.\n\nTo update the release configuration,\nwhen a new `cargo-dist` is available:\n\n```sh\ncargo dist init # from \"cargo install cargo-dist\"\n```\n\n### What to do if a Github release fails\n\nIf the release process fails after you run `cargo release`, you can manually\ndelete the tag and release from Github. Also remember to delete the tag locally\nby running `git tag -d`. Once all the extra changes are in the `main` branch,\nyou can trigger a release by creating a new tag using `git tag` and push it\nusing `git push --tag`.\n\n### Create a new crates.io release\n\nGo to [the Publish\nworkflow](https://github.com/rust-lang/rust-bindgen/actions/workflows/publish.yml)\nand run a new workflow using the \"Run Workflow\" button.\n\nRemember that crates.io releases cannot be deleted!\n\n[`prettyplease`]: https://github.com/dtolnay/prettyplease\n"
        },
        {
          "name": "Cargo.lock",
          "type": "blob",
          "size": 20.919921875,
          "content": "# This file is automatically @generated by Cargo.\n# It is not intended for manual editing.\nversion = 3\n\n[[package]]\nname = \"aho-corasick\"\nversion = \"1.1.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8e60d3430d3a69478ad0993f19238d2df97c507009a52b3c10addcd7f6bcb916\"\ndependencies = [\n \"memchr\",\n]\n\n[[package]]\nname = \"annotate-snippets\"\nversion = \"0.11.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"24e35ed54e5ea7997c14ed4c70ba043478db1112e98263b3b035907aa197d991\"\ndependencies = [\n \"anstyle\",\n \"unicode-width\",\n]\n\n[[package]]\nname = \"anstyle\"\nversion = \"1.0.10\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"55cc3b69f167a1ef2e161439aa98aed94e6028e5f9a59be9a6ffb47aef1651f9\"\n\n[[package]]\nname = \"autocfg\"\nversion = \"1.4.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ace50bade8e6234aa140d9a2f552bbee1db4d353f69b8217bc503490fc1a9f26\"\n\n[[package]]\nname = \"bindgen\"\nversion = \"0.71.1\"\ndependencies = [\n \"annotate-snippets\",\n \"bitflags 2.2.1\",\n \"cexpr\",\n \"clang-sys\",\n \"clap\",\n \"clap_complete\",\n \"itertools\",\n \"log\",\n \"prettyplease\",\n \"proc-macro2\",\n \"quote\",\n \"regex\",\n \"rustc-hash\",\n \"shlex\",\n \"syn 2.0.90\",\n]\n\n[[package]]\nname = \"bindgen-cli\"\nversion = \"0.71.1\"\ndependencies = [\n \"bindgen\",\n \"env_logger 0.10.0\",\n \"log\",\n \"proc-macro2\",\n \"shlex\",\n]\n\n[[package]]\nname = \"bindgen-integration\"\nversion = \"0.1.0\"\ndependencies = [\n \"bindgen\",\n \"cc\",\n]\n\n[[package]]\nname = \"bindgen-tests\"\nversion = \"0.1.0\"\ndependencies = [\n \"bindgen\",\n \"owo-colors\",\n \"prettyplease\",\n \"proc-macro2\",\n \"regex\",\n \"shlex\",\n \"similar\",\n \"syn 2.0.90\",\n \"tempfile\",\n]\n\n[[package]]\nname = \"bitflags\"\nversion = \"1.3.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"bef38d45163c2f1dde094a7dfd33ccf595c92905c8f8f4fdc18d06fb1037718a\"\n\n[[package]]\nname = \"bitflags\"\nversion = \"2.2.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"24a6904aef64d73cf10ab17ebace7befb918b82164785cb89907993be7f83813\"\n\n[[package]]\nname = \"block\"\nversion = \"0.1.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"0d8c1fef690941d3e7788d328517591fecc684c084084702d6ff1641e993699a\"\n\n[[package]]\nname = \"cc\"\nversion = \"1.2.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f34d93e62b03caf570cccc334cbc6c2fceca82f39211051345108adcba3eebdc\"\ndependencies = [\n \"shlex\",\n]\n\n[[package]]\nname = \"cexpr\"\nversion = \"0.6.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"6fac387a98bb7c37292057cffc56d62ecb629900026402633ae9160df93a8766\"\ndependencies = [\n \"nom\",\n]\n\n[[package]]\nname = \"cfg-if\"\nversion = \"1.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"baf1de4339761588bc0619e3cbc0120ee582ebb74b53b4efbf79117bd2da40fd\"\n\n[[package]]\nname = \"clang-sys\"\nversion = \"1.8.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"0b023947811758c97c59bf9d1c188fd619ad4718dcaa767947df1cadb14f39f4\"\ndependencies = [\n \"glob\",\n \"libc\",\n \"libloading\",\n]\n\n[[package]]\nname = \"clap\"\nversion = \"4.1.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f13b9c79b5d1dd500d20ef541215a6423c75829ef43117e1b4d17fd8af0b5d76\"\ndependencies = [\n \"bitflags 1.3.2\",\n \"clap_derive\",\n \"clap_lex\",\n \"is-terminal\",\n \"once_cell\",\n \"strsim\",\n \"termcolor\",\n]\n\n[[package]]\nname = \"clap_complete\"\nversion = \"4.2.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"01c22dcfb410883764b29953103d9ef7bb8fe21b3fa1158bc99986c2067294bd\"\ndependencies = [\n \"clap\",\n]\n\n[[package]]\nname = \"clap_derive\"\nversion = \"4.1.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"684a277d672e91966334af371f1a7b5833f9aa00b07c84e92fbce95e00208ce8\"\ndependencies = [\n \"heck\",\n \"proc-macro-error\",\n \"proc-macro2\",\n \"quote\",\n \"syn 1.0.109\",\n]\n\n[[package]]\nname = \"clap_lex\"\nversion = \"0.3.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"783fe232adfca04f90f56201b26d79682d4cd2625e0bc7290b95123afe558ade\"\ndependencies = [\n \"os_str_bytes\",\n]\n\n[[package]]\nname = \"either\"\nversion = \"1.13.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"60b1af1c220855b6ceac025d3f6ecdd2b7c4894bfe9cd9bda4fbb4bc7c0d4cf0\"\n\n[[package]]\nname = \"env_logger\"\nversion = \"0.8.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a19187fea3ac7e84da7dacf48de0c45d63c6a76f9490dae389aead16c243fce3\"\ndependencies = [\n \"log\",\n \"regex\",\n]\n\n[[package]]\nname = \"env_logger\"\nversion = \"0.10.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"85cdab6a89accf66733ad5a1693a4dcced6aeff64602b634530dd73c1f3ee9f0\"\ndependencies = [\n \"humantime\",\n \"is-terminal\",\n \"log\",\n \"regex\",\n \"termcolor\",\n]\n\n[[package]]\nname = \"errno\"\nversion = \"0.3.10\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"33d852cb9b869c2a9b3df2f71a3074817f01e1844f839a144f5fcef059a4eb5d\"\ndependencies = [\n \"libc\",\n \"windows-sys 0.52.0\",\n]\n\n[[package]]\nname = \"fastrand\"\nversion = \"1.9.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e51093e27b0797c359783294ca4f0a911c270184cb10f85783b118614a1501be\"\ndependencies = [\n \"instant\",\n]\n\n[[package]]\nname = \"getrandom\"\nversion = \"0.2.15\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"c4567c8db10ae91089c99af84c68c38da3ec2f087c3f82960bcdbf3656b6f4d7\"\ndependencies = [\n \"cfg-if\",\n \"libc\",\n \"wasi\",\n]\n\n[[package]]\nname = \"glob\"\nversion = \"0.3.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d2fabcfbdc87f4758337ca535fb41a6d701b65693ce38287d856d1674551ec9b\"\n\n[[package]]\nname = \"heck\"\nversion = \"0.4.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"95505c38b4572b2d910cecb0281560f54b440a19336cbbcb27bf6ce6adc6f5a8\"\n\n[[package]]\nname = \"hermit-abi\"\nversion = \"0.3.9\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d231dfb89cfffdbc30e7fc41579ed6066ad03abda9e567ccafae602b97ec5024\"\n\n[[package]]\nname = \"hermit-abi\"\nversion = \"0.4.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"fbf6a919d6cf397374f7dfeeea91d974c7c0a7221d0d0f4f20d859d329e53fcc\"\n\n[[package]]\nname = \"humantime\"\nversion = \"2.1.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"9a3a5bfb195931eeb336b2a7b4d761daec841b97f947d34394601737a7bba5e4\"\n\n[[package]]\nname = \"instant\"\nversion = \"0.1.12\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"7a5bbe824c507c5da5956355e86a746d82e0e1464f65d862cc5e71da70e94b2c\"\ndependencies = [\n \"cfg-if\",\n]\n\n[[package]]\nname = \"io-lifetimes\"\nversion = \"1.0.11\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"eae7b9aee968036d54dce06cebaefd919e4472e753296daccd6d344e3e2df0c2\"\ndependencies = [\n \"hermit-abi 0.3.9\",\n \"libc\",\n \"windows-sys 0.48.0\",\n]\n\n[[package]]\nname = \"is-terminal\"\nversion = \"0.4.13\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"261f68e344040fbd0edea105bef17c66edf46f984ddb1115b775ce31be948f4b\"\ndependencies = [\n \"hermit-abi 0.4.0\",\n \"libc\",\n \"windows-sys 0.52.0\",\n]\n\n[[package]]\nname = \"itertools\"\nversion = \"0.13.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"413ee7dfc52ee1a4949ceeb7dbc8a33f2d6c088194d9f922fb8318faf1f01186\"\ndependencies = [\n \"either\",\n]\n\n[[package]]\nname = \"libc\"\nversion = \"0.2.167\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"09d6582e104315a817dff97f75133544b2e094ee22447d2acf4a74e189ba06fc\"\n\n[[package]]\nname = \"libloading\"\nversion = \"0.8.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"fc2f4eb4bc735547cfed7c0a4922cbd04a4655978c09b54f1f7b228750664c34\"\ndependencies = [\n \"cfg-if\",\n \"windows-targets 0.52.6\",\n]\n\n[[package]]\nname = \"linux-raw-sys\"\nversion = \"0.3.8\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ef53942eb7bf7ff43a617b3e2c1c4a5ecf5944a7c1bc12d7ee39bbb15e5c1519\"\n\n[[package]]\nname = \"log\"\nversion = \"0.4.22\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a7a70ba024b9dc04c27ea2f0c0548feb474ec5c54bba33a7f72f873a39d07b24\"\n\n[[package]]\nname = \"malloc_buf\"\nversion = \"0.0.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"62bb907fe88d54d8d9ce32a3cceab4218ed2f6b7d35617cafe9adf84e43919cb\"\ndependencies = [\n \"libc\",\n]\n\n[[package]]\nname = \"memchr\"\nversion = \"2.7.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"78ca9ab1a0babb1e7d5695e3530886289c18cf2f87ec19a575a0abdce112e3a3\"\n\n[[package]]\nname = \"minimal-lexical\"\nversion = \"0.2.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"68354c5c6bd36d73ff3feceb05efa59b6acb7626617f4962be322a825e61f79a\"\n\n[[package]]\nname = \"nom\"\nversion = \"7.1.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d273983c5a657a70a3e8f2a01329822f3b8c8172b73826411a55751e404a0a4a\"\ndependencies = [\n \"memchr\",\n \"minimal-lexical\",\n]\n\n[[package]]\nname = \"objc\"\nversion = \"0.2.7\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"915b1b472bc21c53464d6c8461c9d3af805ba1ef837e1cac254428f4a77177b1\"\ndependencies = [\n \"malloc_buf\",\n]\n\n[[package]]\nname = \"once_cell\"\nversion = \"1.20.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1261fe7e33c73b354eab43b1273a57c8f967d0391e80353e51f764ac02cf6775\"\n\n[[package]]\nname = \"os_str_bytes\"\nversion = \"6.4.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"9b7820b9daea5457c9f21c69448905d723fbd21136ccf521748f23fd49e723ee\"\n\n[[package]]\nname = \"owo-colors\"\nversion = \"4.1.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"fb37767f6569cd834a413442455e0f066d0d522de8630436e2a1761d9726ba56\"\n\n[[package]]\nname = \"prettyplease\"\nversion = \"0.2.25\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"64d1ec885c64d0457d564db4ec299b2dae3f9c02808b8ad9c3a089c591b18033\"\ndependencies = [\n \"proc-macro2\",\n \"syn 2.0.90\",\n]\n\n[[package]]\nname = \"proc-macro-error\"\nversion = \"1.0.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"da25490ff9892aab3fcf7c36f08cfb902dd3e71ca0f9f9517bea02a73a5ce38c\"\ndependencies = [\n \"proc-macro-error-attr\",\n \"proc-macro2\",\n \"quote\",\n \"syn 1.0.109\",\n \"version_check\",\n]\n\n[[package]]\nname = \"proc-macro-error-attr\"\nversion = \"1.0.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a1be40180e52ecc98ad80b184934baf3d0d29f979574e439af5a55274b35f869\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"version_check\",\n]\n\n[[package]]\nname = \"proc-macro2\"\nversion = \"1.0.92\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"37d3544b3f2748c54e147655edb5025752e2303145b5aefb3c3ea2c78b973bb0\"\ndependencies = [\n \"unicode-ident\",\n]\n\n[[package]]\nname = \"quickcheck\"\nversion = \"1.0.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"588f6378e4dd99458b60ec275b4477add41ce4fa9f64dcba6f15adccb19b50d6\"\ndependencies = [\n \"env_logger 0.8.4\",\n \"log\",\n \"rand\",\n]\n\n[[package]]\nname = \"quickchecking\"\nversion = \"0.0.0\"\ndependencies = [\n \"clap\",\n \"quickcheck\",\n \"tempfile\",\n]\n\n[[package]]\nname = \"quote\"\nversion = \"1.0.37\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b5b9d34b8991d19d98081b46eacdd8eb58c6f2b201139f7c5f643cc155a633af\"\ndependencies = [\n \"proc-macro2\",\n]\n\n[[package]]\nname = \"rand\"\nversion = \"0.8.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"34af8d1a0e25924bc5b7c43c079c942339d8f0a8b57c39049bef581b46327404\"\ndependencies = [\n \"rand_core\",\n]\n\n[[package]]\nname = \"rand_core\"\nversion = \"0.6.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ec0be4795e2f6a28069bec0b5ff3e2ac9bafc99e6a9a7dc3547996c5c816922c\"\ndependencies = [\n \"getrandom\",\n]\n\n[[package]]\nname = \"redox_syscall\"\nversion = \"0.3.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"567664f262709473930a4bf9e51bf2ebf3348f2e748ccc50dea20646858f8f29\"\ndependencies = [\n \"bitflags 1.3.2\",\n]\n\n[[package]]\nname = \"regex\"\nversion = \"1.11.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b544ef1b4eac5dc2db33ea63606ae9ffcfac26c1416a2806ae0bf5f56b201191\"\ndependencies = [\n \"aho-corasick\",\n \"memchr\",\n \"regex-automata\",\n \"regex-syntax\",\n]\n\n[[package]]\nname = \"regex-automata\"\nversion = \"0.4.9\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"809e8dc61f6de73b46c85f4c96486310fe304c434cfa43669d7b40f711150908\"\ndependencies = [\n \"aho-corasick\",\n \"memchr\",\n \"regex-syntax\",\n]\n\n[[package]]\nname = \"regex-syntax\"\nversion = \"0.8.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"2b15c43186be67a4fd63bee50d0303afffcef381492ebe2c5d87f324e1b8815c\"\n\n[[package]]\nname = \"rustc-hash\"\nversion = \"2.1.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"c7fb8039b3032c191086b10f11f319a6e99e1e82889c5cc6046f515c9db1d497\"\n\n[[package]]\nname = \"rustix\"\nversion = \"0.37.27\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"fea8ca367a3a01fe35e6943c400addf443c0f57670e6ec51196f71a4b8762dd2\"\ndependencies = [\n \"bitflags 1.3.2\",\n \"errno\",\n \"io-lifetimes\",\n \"libc\",\n \"linux-raw-sys\",\n \"windows-sys 0.48.0\",\n]\n\n[[package]]\nname = \"shlex\"\nversion = \"1.3.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"0fda2ff0d084019ba4d7c6f371c95d8fd75ce3524c3cb8fb653a3023f6323e64\"\n\n[[package]]\nname = \"similar\"\nversion = \"2.6.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1de1d4f81173b03af4c0cbed3c898f6bff5b870e4a7f5d6f4057d62a7a4b686e\"\n\n[[package]]\nname = \"strsim\"\nversion = \"0.10.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"73473c0e59e6d5812c5dfe2a064a6444949f089e20eec9a2e5506596494e4623\"\n\n[[package]]\nname = \"syn\"\nversion = \"1.0.109\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"72b64191b275b66ffe2469e8af2c1cfe3bafa67b529ead792a6d0160888b4237\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"unicode-ident\",\n]\n\n[[package]]\nname = \"syn\"\nversion = \"2.0.90\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"919d3b74a5dd0ccd15aeb8f93e7006bd9e14c295087c9896a110f490752bcf31\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"unicode-ident\",\n]\n\n[[package]]\nname = \"tempfile\"\nversion = \"3.6.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"31c0432476357e58790aaa47a8efb0c5138f137343f3b5f23bd36a27e3b0a6d6\"\ndependencies = [\n \"autocfg\",\n \"cfg-if\",\n \"fastrand\",\n \"redox_syscall\",\n \"rustix\",\n \"windows-sys 0.48.0\",\n]\n\n[[package]]\nname = \"termcolor\"\nversion = \"1.2.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"be55cf8942feac5c765c2c993422806843c9a9a45d4d5c407ad6dd2ea95eb9b6\"\ndependencies = [\n \"winapi-util\",\n]\n\n[[package]]\nname = \"tests_expectations\"\nversion = \"0.0.0\"\ndependencies = [\n \"block\",\n \"libloading\",\n \"objc\",\n]\n\n[[package]]\nname = \"unicode-ident\"\nversion = \"1.0.14\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"adb9e6ca4f869e1180728b7950e35922a7fc6397f7b641499e8f3ef06e50dc83\"\n\n[[package]]\nname = \"unicode-width\"\nversion = \"0.1.14\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"7dd6e30e90baa6f72411720665d41d89b9a3d039dc45b8faea1ddd07f617f6af\"\n\n[[package]]\nname = \"version_check\"\nversion = \"0.9.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"49874b5167b65d7193b8aba1567f5c7d93d001cafc34600cee003eda787e483f\"\n\n[[package]]\nname = \"wasi\"\nversion = \"0.11.0+wasi-snapshot-preview1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"9c8d87e72b64a3b4db28d11ce29237c246188f4f51057d65a7eab63b7987e423\"\n\n[[package]]\nname = \"winapi\"\nversion = \"0.3.9\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"5c839a674fcd7a98952e593242ea400abe93992746761e38641405d28b00f419\"\ndependencies = [\n \"winapi-i686-pc-windows-gnu\",\n \"winapi-x86_64-pc-windows-gnu\",\n]\n\n[[package]]\nname = \"winapi-i686-pc-windows-gnu\"\nversion = \"0.4.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ac3b87c63620426dd9b991e5ce0329eff545bccbbb34f3be09ff6fb6ab51b7b6\"\n\n[[package]]\nname = \"winapi-util\"\nversion = \"0.1.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"70ec6ce85bb158151cae5e5c87f95a8e97d2c0c4b001223f33a334e3ce5de178\"\ndependencies = [\n \"winapi\",\n]\n\n[[package]]\nname = \"winapi-x86_64-pc-windows-gnu\"\nversion = \"0.4.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"712e227841d057c1ee1cd2fb22fa7e5a5461ae8e48fa2ca79ec42cfc1931183f\"\n\n[[package]]\nname = \"windows-sys\"\nversion = \"0.48.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"677d2418bec65e3338edb076e806bc1ec15693c5d0104683f2efe857f61056a9\"\ndependencies = [\n \"windows-targets 0.48.5\",\n]\n\n[[package]]\nname = \"windows-sys\"\nversion = \"0.52.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"282be5f36a8ce781fad8c8ae18fa3f9beff57ec1b52cb3de0789201425d9a33d\"\ndependencies = [\n \"windows-targets 0.52.6\",\n]\n\n[[package]]\nname = \"windows-targets\"\nversion = \"0.48.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"9a2fa6e2155d7247be68c096456083145c183cbbbc2764150dda45a87197940c\"\ndependencies = [\n \"windows_aarch64_gnullvm 0.48.5\",\n \"windows_aarch64_msvc 0.48.5\",\n \"windows_i686_gnu 0.48.5\",\n \"windows_i686_msvc 0.48.5\",\n \"windows_x86_64_gnu 0.48.5\",\n \"windows_x86_64_gnullvm 0.48.5\",\n \"windows_x86_64_msvc 0.48.5\",\n]\n\n[[package]]\nname = \"windows-targets\"\nversion = \"0.52.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"9b724f72796e036ab90c1021d4780d4d3d648aca59e491e6b98e725b84e99973\"\ndependencies = [\n \"windows_aarch64_gnullvm 0.52.6\",\n \"windows_aarch64_msvc 0.52.6\",\n \"windows_i686_gnu 0.52.6\",\n \"windows_i686_gnullvm\",\n \"windows_i686_msvc 0.52.6\",\n \"windows_x86_64_gnu 0.52.6\",\n \"windows_x86_64_gnullvm 0.52.6\",\n \"windows_x86_64_msvc 0.52.6\",\n]\n\n[[package]]\nname = \"windows_aarch64_gnullvm\"\nversion = \"0.48.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"2b38e32f0abccf9987a4e3079dfb67dcd799fb61361e53e2882c3cbaf0d905d8\"\n\n[[package]]\nname = \"windows_aarch64_gnullvm\"\nversion = \"0.52.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"32a4622180e7a0ec044bb555404c800bc9fd9ec262ec147edd5989ccd0c02cd3\"\n\n[[package]]\nname = \"windows_aarch64_msvc\"\nversion = \"0.48.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"dc35310971f3b2dbbf3f0690a219f40e2d9afcf64f9ab7cc1be722937c26b4bc\"\n\n[[package]]\nname = \"windows_aarch64_msvc\"\nversion = \"0.52.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"09ec2a7bb152e2252b53fa7803150007879548bc709c039df7627cabbd05d469\"\n\n[[package]]\nname = \"windows_i686_gnu\"\nversion = \"0.48.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a75915e7def60c94dcef72200b9a8e58e5091744960da64ec734a6c6e9b3743e\"\n\n[[package]]\nname = \"windows_i686_gnu\"\nversion = \"0.52.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8e9b5ad5ab802e97eb8e295ac6720e509ee4c243f69d781394014ebfe8bbfa0b\"\n\n[[package]]\nname = \"windows_i686_gnullvm\"\nversion = \"0.52.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"0eee52d38c090b3caa76c563b86c3a4bd71ef1a819287c19d586d7334ae8ed66\"\n\n[[package]]\nname = \"windows_i686_msvc\"\nversion = \"0.48.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8f55c233f70c4b27f66c523580f78f1004e8b5a8b659e05a4eb49d4166cca406\"\n\n[[package]]\nname = \"windows_i686_msvc\"\nversion = \"0.52.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"240948bc05c5e7c6dabba28bf89d89ffce3e303022809e73deaefe4f6ec56c66\"\n\n[[package]]\nname = \"windows_x86_64_gnu\"\nversion = \"0.48.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"53d40abd2583d23e4718fddf1ebec84dbff8381c07cae67ff7768bbf19c6718e\"\n\n[[package]]\nname = \"windows_x86_64_gnu\"\nversion = \"0.52.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"147a5c80aabfbf0c7d901cb5895d1de30ef2907eb21fbbab29ca94c5b08b1a78\"\n\n[[package]]\nname = \"windows_x86_64_gnullvm\"\nversion = \"0.48.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"0b7b52767868a23d5bab768e390dc5f5c55825b6d30b86c844ff2dc7414044cc\"\n\n[[package]]\nname = \"windows_x86_64_gnullvm\"\nversion = \"0.52.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"24d5b23dc417412679681396f2b49f3de8c1473deb516bd34410872eff51ed0d\"\n\n[[package]]\nname = \"windows_x86_64_msvc\"\nversion = \"0.48.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ed94fce61571a4006852b7389a063ab983c02eb1bb37b47f8272ce92d06d9538\"\n\n[[package]]\nname = \"windows_x86_64_msvc\"\nversion = \"0.52.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"589f6da84c646204747d1270a2a5661ea66ed1cced2631d546fdfb155959f9ec\"\n"
        },
        {
          "name": "Cargo.toml",
          "type": "blob",
          "size": 2.630859375,
          "content": "[workspace]\nresolver = \"2\"\nmembers = [\n    \"bindgen\",\n    \"bindgen-cli\",\n    \"bindgen-integration\",\n    \"bindgen-tests\",\n    \"bindgen-tests/tests/quickchecking\",\n    \"bindgen-tests/tests/expectations\",\n]\ndefault-members = [\n    \"bindgen\",\n    \"bindgen-cli\",\n    \"bindgen-tests\",\n]\n\n[workspace.package]\n# If you change this, also update README.md\nrust-version = \"1.70.0\"\nedition = \"2021\"\n\n# All dependency version management is centralized here\n[workspace.dependencies]\nannotate-snippets = \"0.11.4\"\nbindgen = { version = \"0.71.1\", path = \"./bindgen\", default-features = false }\nbitflags = \"2.2.1\"\nblock = \"0.1\"\ncc = \"1.0\"\ncexpr = \"0.6\"\nclang-sys = \"1\"\nclap = \"4\"\nclap_complete = \"4\"\nenv_logger = \"0.10.0\"\nitertools = { version = \">=0.10,<0.14\", default-features = false }\nlibloading = \"0.8\"\nlog = \"0.4\"\nobjc = \"0.2\"\nowo-colors = \"4.1.0\"\nprettyplease = \"0.2.7\"\nproc-macro2 = \"1.0.80\"\nquickcheck = \"1.0\"\nquote = { version = \"1\", default-features = false }\nregex = { version = \"1.5.3\", default-features = false }\nrustc-hash = \"2.1.0\"\nshlex = \"1\"\nsimilar = \"2.2.1\"\nsyn = \"2.0\"\ntempfile = \"3\"\n\n[workspace.lints.rust]\nunused_qualifications = \"warn\"\n\n[workspace.lints.clippy]\npedantic = { level = \"warn\", priority = -1 }\n\ncast_possible_truncation = \"allow\"\ncast_possible_wrap = \"allow\"\ncast_precision_loss = \"allow\"\ncast_sign_loss = \"allow\"\nchecked_conversions = \"allow\"\ndefault_trait_access = \"allow\"\nexplicit_into_iter_loop = \"allow\"\nflat_map_option = \"allow\"\nignored_unit_patterns = \"allow\"\nimplicit_hasher = \"allow\"\ninconsistent_struct_constructor = \"allow\"\nitems_after_statements = \"allow\"\nmaybe_infinite_iter = \"allow\"\nmissing_errors_doc = \"allow\"\nmissing_panics_doc = \"allow\"\nmodule_name_repetitions = \"allow\"\nmust_use_candidate = \"allow\"\nptr_as_ptr = \"allow\"\nredundant_closure_for_method_calls = \"allow\"\nreturn_self_not_must_use = \"allow\"\n#should_panic_without_expect = \"allow\"\nsimilar_names = \"allow\"\nstruct_excessive_bools = \"allow\"\nstruct_field_names = \"allow\"\nunnecessary_wraps = \"allow\"\nunnested_or_patterns = \"allow\"\nunreadable_literal = \"allow\"\nused_underscore_binding = \"allow\"\nwildcard_imports = \"allow\"\n\n# TODO\nborrow_as_ptr = \"allow\"\nmatch_same_arms = \"allow\"\ntrivially_copy_pass_by_ref = \"allow\"\nneedless_pass_by_value = \"allow\"\nunused_self = \"allow\"\n\n# Theese seem to be ok to ignore for now\nenum_glob_use = \"allow\"\ntoo_many_lines = \"allow\"\n\n# Config for 'cargo release'\n[workspace.metadata.release]\nshared-version = true # ensures published packages share the same version\ntag-name = \"v{{version}}\"\n# Don't release any crate unless its manifest has `release = true`\nrelease = false\n\n# The profile that 'cargo dist' will build with\n[profile.dist]\ninherits = \"release\"\nlto = \"thin\"\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.4765625,
          "content": "BSD 3-Clause License\n\nCopyright (c) 2013, Jyun-Yan You\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are met:\n\n* Redistributions of source code must retain the above copyright notice, this\n  list of conditions and the following disclaimer.\n\n* Redistributions in binary form must reproduce the above copyright notice,\n  this list of conditions and the following disclaimer in the documentation\n  and/or other materials provided with the distribution.\n\n* Neither the name of the copyright holder nor the names of its\n  contributors may be used to endorse or promote products derived from\n  this software without specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\nAND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\nIMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\nFOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\nDAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\nSERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\nCAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\nOR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\nOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 3.220703125,
          "content": "[![crates.io](https://img.shields.io/crates/v/bindgen.svg)](https://crates.io/crates/bindgen)\n[![docs.rs](https://docs.rs/bindgen/badge.svg)](https://docs.rs/bindgen/)\n\n# `bindgen`\n\n**`bindgen` automatically generates Rust FFI bindings to C (and some C++) libraries.**\n\nFor example, given the C header `doggo.h`:\n\n```c\ntypedef struct Doggo {\n    int many;\n    char wow;\n} Doggo;\n\nvoid eleven_out_of_ten_majestic_af(Doggo* pupper);\n```\n\n`bindgen` produces Rust FFI code allowing you to call into the `doggo` library's\nfunctions and use its types:\n\n```rust\n/* automatically generated by rust-bindgen 0.99.9 */\n\n#[repr(C)]\npub struct Doggo {\n    pub many: ::std::os::raw::c_int,\n    pub wow: ::std::os::raw::c_char,\n}\n\nextern \"C\" {\n    pub fn eleven_out_of_ten_majestic_af(pupper: *mut Doggo);\n}\n```\n\n## Users Guide\n\n[📚 Read the `bindgen` users guide here! 📚](https://rust-lang.github.io/rust-bindgen)\n\n## MSRV\n\nThe `bindgen` minimum supported Rust version is **1.70.0**.\n\nThe `bindgen-cli` minimum supported Rust version is **1.70.0**.\n\nNo MSRV bump policy has been established yet, so MSRV may increase in any release.\n\nThe MSRV is the minimum Rust version that can be used to *compile* each crate. However, `bindgen` and `bindgen-cli` can generate bindings that are compatible with Rust versions below the current MSRV.\n\nMost of the time, the `bindgen-cli` crate will have a more recent MSRV than `bindgen` as crates such as `clap` require it. \n\n## API Reference\n\n[API reference documentation is on docs.rs](https://docs.rs/bindgen)\n\n## Environment Variables\n\nIn addition to the [library API](https://docs.rs/bindgen) and [executable command-line API][bindgen-cmdline],\n`bindgen` can be controlled through environment variables.\n\nEnd-users should set these environment variables to modify `bindgen`'s behavior without modifying the source code of direct consumers of `bindgen`.\n\n- `BINDGEN_EXTRA_CLANG_ARGS`: extra arguments to pass to `clang`\n    - Arguments are whitespace-separated\n    - Use shell-style quoting to pass through whitespace\n    - Examples:\n        - Specify alternate sysroot: `--sysroot=/path/to/sysroot`\n        - Add include search path with spaces: `-I\"/path/with spaces\"`\n- `BINDGEN_EXTRA_CLANG_ARGS_<TARGET>`: similar to `BINDGEN_EXTRA_CLANG_ARGS`,\n   but used to set per-target arguments to pass to clang. Useful to set system include\n   directories in a target-specific way in cross-compilation environments with multiple targets.\n   Has precedence over `BINDGEN_EXTRA_CLANG_ARGS`.\n\nAdditionally, `bindgen` uses `libclang` to parse C and C++ header files.\nTo modify how `bindgen` searches for `libclang`, see the [`clang-sys` documentation][clang-sys-env].\nFor more details on how `bindgen` uses `libclang`, see the [`bindgen` users guide][bindgen-book-clang].\n\n## Releases\n\nWe don't follow a specific release calendar, but if you need a release please\nfile an issue requesting that (ping `@emilio` for increased effectiveness).\n\n## Contributing\n\n[See `CONTRIBUTING.md` for hacking on `bindgen`!](./CONTRIBUTING.md)\n\n[bindgen-cmdline]: https://rust-lang.github.io/rust-bindgen/command-line-usage.html\n[clang-sys-env]: https://github.com/KyleMayes/clang-sys#environment-variables\n[bindgen-book-clang]: https://rust-lang.github.io/rust-bindgen/requirements.html#clang\n"
        },
        {
          "name": "appveyor.yml",
          "type": "blob",
          "size": 1.9814453125,
          "content": "environment:\n  RUST_BACKTRACE: 1\n  RUST_CHANNEL: \"%Configuration%\"\n  matrix:\n  - TARGET: gnu\n    LLVM_VERSION: 9.0.0-1\n    BINDGEN_FEATURES: __testing_only_libclang_9\n  - TARGET: gnu\n    LLVM_VERSION: 16.0.4\n    BINDGEN_FEATURES: __testing_only_libclang_16\n  - TARGET: msvc\n    LLVM_VERSION: 9.0.0\n    BINDGEN_FEATURES: __testing_only_libclang_9\n  - TARGET: msvc\n    LLVM_VERSION: 16.0.4\n    BINDGEN_FEATURES: __testing_only_libclang_16\n\nconfiguration:\n- stable\n- nightly\n\nplatform:\n  - x64\n  - x86\n\nbranches:\n  only:\n    - main\n\ninstall:\n  - if %PLATFORM% == x86 (set RUST_PLATFORM=i686&set MINGW_BITS=32) else (set RUST_PLATFORM=x86_64&set MINGW_BITS=64)\n  - echo %RUST_CHANNEL%\n  - echo %RUST_PLATFORM%\n  - echo %MINGW_BITS%\n  - echo %RUST_PLATFORM%-pc-windows-%TARGET%\n  # install Rust\n  - appveyor-retry appveyor DownloadFile https://win.rustup.rs/ -FileName rustup-init.exe\n  - rustup-init.exe -y --default-host %RUST_PLATFORM%-pc-windows-%TARGET% --default-toolchain %RUST_CHANNEL%\n  - set PATH=%PATH%;C:\\Users\\appveyor\\.cargo\\bin\n  # install LLVM for GNU\n  - if %TARGET%==gnu set PATH=C:\\msys64\\mingw%MINGW_BITS%\\bin;C:\\msys64\\usr\\bin\\;%PATH%\n  - if %TARGET%==gnu set \"MINGW_URL=http://repo.msys2.org/mingw/%RUST_PLATFORM%/mingw-w64-%RUST_PLATFORM%\"\n  - if %TARGET%==gnu set \"URL_VER=%LLVM_VERSION%-any.pkg.tar.xz\"\n  - if %TARGET%==gnu bash -lc \"pacman -U --noconfirm $MINGW_URL-clang-$URL_VER $MINGW_URL-llvm-$URL_VER\"\n  - if %TARGET%==gnu bash -lc \"clang --version\"\n  # install LLVM for MSVC\n  - if %TARGET%==msvc appveyor-retry appveyor DownloadFile http://releases.llvm.org/%LLVM_VERSION%/LLVM-%LLVM_VERSION%-win64.exe -FileName llvm-installer.exe\n  - if %TARGET%==msvc 7z x llvm-installer.exe -oc:\\llvm-binary\n  - if %TARGET%==msvc set PATH=C:\\llvm-binary\\bin;%PATH%\n  - if %TARGET%==msvc where clang\n  - if %TARGET%==msvc clang --version\n\nbuild_script:\n  - if %TARGET%==msvc .\\ci\\test.bat\n  - if %TARGET%==gnu bash -lc \"export BINDGEN_FEATURES=$BINDGEN_FEATURES; cd $APPVEYOR_BUILD_FOLDER; ./ci/test.sh\"\n\ntest: off\n"
        },
        {
          "name": "bindgen-cli",
          "type": "tree",
          "content": null
        },
        {
          "name": "bindgen-integration",
          "type": "tree",
          "content": null
        },
        {
          "name": "bindgen-tests",
          "type": "tree",
          "content": null
        },
        {
          "name": "bindgen",
          "type": "tree",
          "content": null
        },
        {
          "name": "book",
          "type": "tree",
          "content": null
        },
        {
          "name": "ci",
          "type": "tree",
          "content": null
        },
        {
          "name": "clippy.toml",
          "type": "blob",
          "size": 0.24609375,
          "content": "disallowed-methods = [\n    { path = \"clang_sys::CXCursor_TranslationUnit\", reason = \"This value was changed in clang 15\"},\n    { path = \"clang_sys::CXCursor_LastStmt\", reason = \"This value was changed in clang 15\"}\n]\nmissing-docs-in-crate-items = true\n"
        },
        {
          "name": "csmith-fuzzing",
          "type": "tree",
          "content": null
        },
        {
          "name": "dist-workspace.toml",
          "type": "blob",
          "size": 0.80078125,
          "content": "[workspace]\nmembers = [\"cargo:.\"]\n\n# Config for 'cargo dist'\n[dist]\n# The preferred cargo-dist version to use in CI (Cargo.toml SemVer syntax)\ncargo-dist-version = \"0.22.1\"\n# CI backends to support\nci = \"github\"\n# The installers to generate for each app\ninstallers = [\"shell\"]\n# Target platforms to build apps for (Rust target-triple syntax)\ntargets = [\"aarch64-apple-darwin\", \"x86_64-apple-darwin\", \"x86_64-unknown-linux-gnu\"]\n# Whether to consider the binaries in a package for distribution (defaults true)\ndist = false\n# Which actions to run on pull requests\npr-run-mode = \"plan\"\n# Whether to install an updater program\ninstall-updater = false\n# Path that installers should place binaries in\ninstall-path = \"CARGO_HOME\"\n\n[dist.github-custom-runners]\naarch64-apple-darwin = \"macos-14\"\nx86_64-apple-darwin = \"macos-13\"\n"
        },
        {
          "name": "example-graphviz-ir.png",
          "type": "blob",
          "size": 1312.03125,
          "content": null
        },
        {
          "name": "releases",
          "type": "tree",
          "content": null
        },
        {
          "name": "rustfmt.toml",
          "type": "blob",
          "size": 0.0390625,
          "content": "max_width = 80\nbinop_separator = \"back\"\n"
        },
        {
          "name": "triagebot.toml",
          "type": "blob",
          "size": 0.4072265625,
          "content": "[relabel]\nallow-unauthenticated = [\n    \"A-*\",\n    \"C-*\",\n    \"E-*\",\n    \"I-*\",\n    \"S-*\",\n    \"bug\",\n    \"dependencies\",\n    \"enhancement\",\n    \"good first issue\",\n    \"hacktoberfest\",\n    \"help wanted\",\n    \"invalid\",\n    \"meta\",\n    \"msvc\",\n    \"next-release\",\n    \"question\",\n    \"This Week In Servo (TWiS)\",\n    \"windows\",\n]\n\n[autolabel.\"A-C++\"]\ntrigger_files = [\n    \"**/*.cpp\",\n    \"**/*.cc\",\n    \"**/*.hpp\",\n]"
        }
      ]
    }
  ]
}