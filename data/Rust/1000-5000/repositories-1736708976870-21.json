{
  "metadata": {
    "timestamp": 1736708976870,
    "page": 21,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjMw",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "extism/extism",
      "stars": 4665,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.6435546875,
          "content": "target\nruntime/ast.json\nruntime/target\nCargo.lock\n.DS_Store\n.vscode\n**/libextism.dylib\n**/libextism.so\n*.o\nmanifest/target\n**/node_modules\n__pycache__\npython/dist\npython/poetry.lock\nc/main\ncpp/test/test\ncpp/example\n.dub\ndub.selections.json\ngo/main\nruby/.bundle/\nruby/.yardoc\nruby/_yardoc/\nruby/coverage/\nruby/doc/\nruby/pkg/\nruby/spec/reports/\nruby/tmp/\nruby/Gemfile.lock\nrust/target\nrust/test.log\nduniverse\n_build\nphp/Extism.php\npython/docs\ndist-newstyle\n.stack-work\nvendor\nzig/zig-*\nzig/example-out/\nzig/*.log\njava/*.iml\njava/*.log\njava/.idea\njava/.DS_Store\nextism-maturin/src/extism.h\nruntime/*.log\nlibextism/example\nlibextism/extism*.pc\n*.cwasm\ntest-cache\n"
        },
        {
          "name": "Cargo.toml",
          "type": "blob",
          "size": 0.6826171875,
          "content": "[workspace]\nresolver = \"2\"\nmembers = [\"extism-maturin\", \"manifest\", \"runtime\", \"libextism\", \"convert\", \"convert-macros\"]\nexclude = [\"kernel\"]\n\n[workspace.package]\nedition = \"2021\"\nauthors = [\"The Extism Authors\", \"oss@extism.org\"]\nlicense = \"BSD-3-Clause\"\nhomepage = \"https://extism.org\"\nrepository = \"https://github.com/extism/extism\"\nversion = \"0.0.0+replaced-by-ci\"\n\n[workspace.dependencies]\nextism = { path = \"./runtime\", version = \"0.0.0+replaced-by-ci\" }\nextism-convert = { path = \"./convert\", version = \"0.0.0+replaced-by-ci\" }\nextism-convert-macros = { path = \"./convert-macros\", version = \"0.0.0+replaced-by-ci\" }\nextism-manifest = { path = \"./manifest\", version = \"0.0.0+replaced-by-ci\" }\n"
        },
        {
          "name": "DEVELOPING.md",
          "type": "blob",
          "size": 4.59375,
          "content": "# HACKING \n\n## cutting releases\n\n### goals\n\nCutting a release should be a boring, rote process with as little excitement as\npossible. Following the processes in this document, we should be able to cut a\nrelease at any time without worrying about producing bad artifacts. Our process\nshould let us resolve build issues without affecting library users.\n\n### branching\n\n1. The `main` branch represents the next major version of the library.\n2. Previous major versions should be tracked using `v0.x`, `v1.x`, `v2.x`, used\n   for backporting changes as necessary.\n3. Libraries should generate a `latest` release using, e.g.,\n   `marvinpinto/action-automatic-releases` on changes to the `main` branch.\n\n### tag and release process\n\n1. Pick a target semver value. Prepend the semver value with `v`: `v1.2.3`.\n   Increment the minor version for additive changes and patch for bugfixes.\n   - For trickier changes, consider using release candidates: `rc0`, `rc1`, etc.\n2. Create an empty git commit for the tag to point at: `git commit -m 'v1.2.3-rc1' --allow-empty`.\n3. Create a new tag against that commit: `v1.2.3-rc1`.\n4. Push the changes to the library: `git push origin main v1.2.3-rc1`.\n    - You can separate these steps: `git push origin main` followed by `git push origin v1.2.3-rc1`,\n      if you want to make absolutely sure the commit you're pushing builds correctly before tagging it.\n5. Wait for the tag `build` workflow to complete.\n    - The `build` workflow should create a _draft_ release (using `softprops/action-gh-release` with `draft`\n      set to `true`) and upload built artifacts to the release.\n6. Once the workflow is complete, do whatever testing is necessary using the artifacts.\n    - TODO: We can add automation to this step so that we test on downstream deps automatically: e.g., if we\n      build a new kernel, we _should_ be able to trigger tests in the `python-sdk` _using_ that new kernel.\n7. Once we're confident the release is good, go to the releases page for the library and edit the draft release.\n    - If the release is a release candidate (`rc0..N`), make sure to mark the release as a \"prerelease\".\n    - Publish the draft release.\n    - This kicks off the publication workflow: taking the artifacts built during the `build` workflow and publishing\n      them to any necessary registry or repository.\n        - In extism, this publishes `extism-maturin` to PyPI as `extism-sys` and the dotnet packages to nuget.\n        - In `python-sdk`, this publishes `extism` to PyPI.\n        - In `js-sdk`, this publishes `@extism/extism` (and `extism`) to NPM.\n\n> **Note**\n> If you're at all worried about a release, use a private fork of the target library repo to test the release first (e.g., `extism/dev-extism`.)\n\n#### CLI flow\n\nFor official releases:\n\n```\n$ git commit -m 'v9.9.9' --allow-empty\n$ git tag v9.9.9\n$ git push origin main v9.9.9\n$ gh run watch\n$ gh release edit v9.9.9 --tag v9.9.9 --title 'v9.9.9' --draft=false\n$ gh run watch\n```\n\nFor prereleases:\n\n```\n$ git commit -m 'v9.9.9' --allow-empty\n$ git tag v9.9.9\n$ git push origin main v9.9.9\n$ gh run watch\n$ gh release edit v9.9.9 --tag v9.9.9 --title 'v9.9.9' --draft=false --prerelease\n$ gh run watch\n```\n\n### implementation\n\nLibraries should:\n\n- Provide a `ci` workflow, triggered on PR and `workflow_dispatch`.\n    - This workflow should exercise the tests, linting, and documentation generation of the library.\n- Provide a `build` workflow, triggered on `v*` tags and merges to `main`\n    - This workflow should produce artifacts and attach them to a draft release (if operating on a tag) or a `latest` release (if operating on `main`.)\n    - Artifacts include: source tarballs, checksums, shared objects, and documentation.\n- Provide a `release` workflow, triggered on github releases:\n    - This workflow should expect artifacts from the draft release to be available.\n    - Artifacts from the release should be published to their final destination as part of this workflow: tarballs to NPM, documentation to Cloudflare R2/Amazon S3/$yourFavoriteBucket.\n\n### A rough list of libraries and downstreams\n\n```mermaid\nflowchart TD;\n    A[\"runtime\"] --> B[\"libextism\"];\n    B --> C[\"extism-maturin\"];\n    B --> X[\"nuget-extism\"];\n    C --> D[\"python-sdk\"];\n    B --> E[\"ruby-sdk\"];\n    A --> F[\"go-sdk\"];\n    G[\"plugins\"] --> B;\n    G --> D;\n    G --> E;\n    G --> F;\n    G --> H[\"js-sdk\"];\n    F --> I[\"cli\"];\n    G --> J[\"dotnet-sdk\"];\n    X --> J;\n    G --> K[\"cpp-sdk\"];\n    G --> L[\"zig-sdk\"];\n    B --> L;\n    G --> M[\"haskell-sdk\"];\n    B --> M;\n    G --> N[\"php-sdk\"];\n    B --> N;\n    G --> O[\"elixir-sdk\"];\n    B --> O;\n    G --> P[\"d-sdk\"];\n    B --> P;\n    G --> Q[\"ocaml-sdk\"];\n    B --> Q;\n```\n\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.4228515625,
          "content": "Copyright 2022 Dylibso, Inc.\n\nRedistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:\n\n1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.\n\n2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.\n\n3. Neither the name of the copyright holder nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."
        },
        {
          "name": "Makefile",
          "type": "blob",
          "size": 1.85546875,
          "content": "DEST?=/usr/local\nSOEXT=so\nAEXT=a\nFEATURES?=default\nDEFAULT_FEATURES?=yes\nRUST_TARGET?=\nEXTRA_LIBS=\n\nUNAME := $(shell uname -s)\nifeq ($(UNAME),Darwin)\n\tSOEXT=dylib\n\tEXTRA_LIBS=-framework Security\nendif\n\nifeq ($(DEFAULT_FEATURES),no)\nifeq ($(FEATURES),default)\n\tFEATURE_FLAGS=--no-default-features\nelse\n\tFEATURE_FLAGS=--features $(FEATURES) --no-default-features\nendif\nelse\n\tFEATURE_FLAGS=--features $(FEATURES)\nendif\n\nifeq ($(RUST_TARGET),)\n\tTARGET_FLAGS=\nelse\n\tTARGET_FLAGS=--target $(RUST_TARGET)\nendif\n\nbuild:\n\tcargo build --release $(FEATURE_FLAGS) --manifest-path libextism/Cargo.toml $(TARGET_FLAGS)\n\tsed -e \"s%@CMAKE_INSTALL_PREFIX@%$(DEST)%\" libextism/extism.pc.in > libextism/extism.pc\n\tsed -e \"s%@CMAKE_INSTALL_PREFIX@%$(DEST)%\" \\\n\t    -e \"s%Libs: %Libs: $(EXTRA_LIBS) %\" libextism/extism-static.pc.in > libextism/extism-static.pc\n\nbench:\n\t@(cargo criterion $(TARGET_FLAGS) || echo 'For nicer output use cargo-criterion: `cargo install cargo-criterion` - using `cargo bench`') && cargo bench $(TARGET_FLAGS)\n\n.PHONY: kernel\nkernel:\n\tcd kernel && bash build.sh\n\nlint:\n\tcargo clippy --release --no-deps --manifest-path runtime/Cargo.toml $(TARGET_FLAGS)\n\ndebug:\n\tRUSTFLAGS=-g RUST_TARGET=$(RUST_TARGET) $(MAKE) build\n\ninstall:\n\techo $(RUST_TARGET)\n\tmkdir -p $(DEST)/lib $(DEST)/include $(DEST)/lib/pkgconfig\n\tinstall runtime/extism.h $(DEST)/include/extism.h\n\tif [ -f target/$(RUST_TARGET)/release/libextism.$(SOEXT) ]; then \\\n\t    install target/$(RUST_TARGET)/release/libextism.$(SOEXT) $(DEST)/lib/libextism.$(SOEXT); \\\n\tfi\n\tinstall target/$(RUST_TARGET)/release/libextism.$(AEXT) $(DEST)/lib/libextism.$(AEXT)\n\tinstall libextism/extism.pc $(DEST)/lib/pkgconfig/extism.pc\n\tinstall libextism/extism-static.pc $(DEST)/lib/pkgconfig/extism-static.pc\n\nuninstall:\n\trm -f $(DEST)/include/extism.h $(DEST)/lib/libextism.$(SOEXT) $(DEST)/lib/libextism.$(AEXT) \\\n\t$(DEST)/lib/pkgconfig/extism*.pc\n\n\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 12.787109375,
          "content": "<div align=\"center\">\n    <a href=\"https://extism.org\">\n    <picture>\n        <source media=\"(prefers-color-scheme: dark)\" srcset=\".github/assets/logo-horizontal-darkmode.png\">\n        <img alt=\"Extism - the WebAssembly framework\" width=\"75%\" style=\"max-width: 600px\" src=\".github/assets/logo-horizontal.png\">\n    </picture>\n    </a>\n\n[![Discord](https://img.shields.io/discord/1011124058408112148?color=%23404eed&label=Community%20Chat&logo=Discord&logoColor=%23404eed)](https://extism.org/discord)\n![GitHub Org's stars](https://img.shields.io/github/stars/extism)\n![Downloads](https://img.shields.io/crates/d/extism-manifest)\n![GitHub License](https://img.shields.io/github/license/extism/extism)\n![GitHub release (with filter)](https://img.shields.io/github/v/release/extism/extism)\n\n</div>\n\n# Overview\n\nExtism is a lightweight framework for building with WebAssembly (Wasm). It\nsupports running Wasm code on servers, the edge, CLIs, IoT, browsers and\neverything in between. Extism is designed to be \"universal\" in that it supports\na common interface, no matter where it runs.\n\n> **Note:** One of the primary use cases for Extism is **building extensible\n> software & plugins**. You want to be able to execute arbitrary, untrusted code\n> from your users? Extism makes this safe and practical to do.\n\nAdditionally, Extism adds some extra utilities on top of standard Wasm runtimes.\nFor example, we support persistent memory/module-scope variables, secure &\nhost-controlled HTTP without WASI, runtime limiters & timers, simpler host\nfunction linking, and more. Extism users build:\n\n- plug-in systems\n- FaaS platforms\n- code generators\n- web applications\n- & much more...\n\n# Run WebAssembly In Your App\n\nPick a SDK to import into your program, and refer to the documentation to get\nstarted:\n\n| Type        | Language                                                                                       | Source Code                                                             | Package                                                                 |\n| ----------- | ---------------------------------------------------------------------------------------------- | ----------------------------------------------------------------------- | ----------------------------------------------------------------------- |\n| Rust SDK    | <img alt=\"Rust SDK\" src=\"https://extism.org/img/sdk-languages/rust.svg\" width=\"50px\"/>         | https://github.com/extism/extism/tree/main/runtime                      | [Crates.io](https://crates.io/crates/extism)                            |\n| JS SDK      | <img alt=\"JS SDK\" src=\"https://extism.org/img/sdk-languages/js.svg\" width=\"50px\"/>             | https://github.com/extism/js-sdk <br/>(supports Web, Node, Deno & Bun!) | [NPM](https://www.npmjs.com/package/@extism/extism)                     |\n| Elixir SDK  | <img alt=\"Elixir SDK\" src=\"https://extism.org/img/sdk-languages/elixir.svg\" width=\"50px\"/>     | https://github.com/extism/elixir-sdk                                    | [Hex](https://hex.pm/packages/extism)                                   |\n| Go SDK      | <img alt=\"Go SDK\" src=\"https://extism.org/img/sdk-languages/go.svg\" width=\"50px\"/>             | https://github.com/extism/go-sdk                                        | [Go mod](https://pkg.go.dev/github.com/extism/go-sdk)                   |\n| Haskell SDK | <img alt=\"Haskell SDK\" src=\"https://extism.org/img/sdk-languages/haskell.svg\" width=\"50px\"/>   | https://github.com/extism/haskell-sdk                                   | [Hackage](https://hackage.haskell.org/package/extism)                   |\n| Java SDK    | <img alt=\"Java SDK\" src=\"https://extism.org/img/sdk-languages/java-android.svg\" width=\"50px\"/> | https://github.com/extism/java-sdk                                      | [Sonatype](https://central.sonatype.com/artifact/org.extism.sdk/extism) |\n| .NET SDK    | <img alt=\".NET SDK\" src=\"https://extism.org/img/sdk-languages/dotnet.svg\" width=\"50px\"/>       | https://github.com/extism/dotnet-sdk <br/>(supports C# & F#!)           | [Nuget](https://www.nuget.org/packages/Extism.Sdk)                      |\n| OCaml SDK   | <img alt=\"OCaml SDK\" src=\"https://extism.org/img/sdk-languages/ocaml.svg\" width=\"50px\"/>       | https://github.com/extism/ocaml-sdk                                     | [opam](https://opam.ocaml.org/packages/extism/)                         |\n| Perl SDK    | <img alt=\"Perl SDK\" src=\"https://extism.org/img/sdk-languages/perl.svg\" width=\"50px\"/>         | https://github.com/extism/perl-sdk                                      | [CPAN](https://metacpan.org/pod/Extism)                                 |\n| PHP SDK     | <img alt=\"PHP SDK\" src=\"https://extism.org/img/sdk-languages/php.svg\" width=\"50px\"/>           | https://github.com/extism/php-sdk                                       | [Packagist](https://packagist.org/packages/extism/extism)               |\n| Python SDK  | <img alt=\"Python SDK\" src=\"https://extism.org/img/sdk-languages/python.svg\" width=\"50px\"/>     | https://github.com/extism/python-sdk                                    | [PyPi](https://pypi.org/project/extism/)                                |\n| Ruby SDK    | <img alt=\"Ruby SDK\" src=\"https://extism.org/img/sdk-languages/ruby.svg\" width=\"50px\"/>         | https://github.com/extism/ruby-sdk                                      | [RubyGems](https://rubygems.org/gems/extism)                            |\n| Zig SDK     | <img alt=\"Zig SDK\" src=\"https://extism.org/img/sdk-languages/zig.svg\" width=\"50px\"/>           | https://github.com/extism/zig-sdk                                       | N/A                                                                     |\n| C SDK       | <img alt=\"C SDK\" src=\"https://extism.org/img/sdk-languages/c.svg\" width=\"50px\"/>               | https://github.com/extism/extism/tree/main/libextism                    | N/A                                                                     |\n| C++ SDK     | <img alt=\"C++ SDK\" src=\"https://extism.org/img/sdk-languages/cpp.svg\" width=\"50px\"/>           | https://github.com/extism/cpp-sdk                                       | N/A                                                                     |\n\n# Compile WebAssembly to run in Extism Hosts\n\nExtism Hosts (running the SDK) must execute WebAssembly code that has a\n[PDK, or Plug-in Development Kit](https://extism.org/docs/concepts/pdk), library\ncompiled in to the `.wasm` binary. PDKs make it easy for plug-in / extension\ncode authors to read input from the host and return data back, read provided\nconfiguration, set/get variables, make outbound HTTP calls if allowed, and more.\n\nPick a PDK to import into your Wasm program, and refer to the documentation to\nget started:\n\n| Type               | Language                                                                                                   | Source Code                                                   | Package                                                   |\n| ------------------ | ---------------------------------------------------------------------------------------------------------- | ------------------------------------------------------------- | --------------------------------------------------------- |\n| Rust PDK           | <img alt=\"Rust PDK\" src=\"https://extism.org/img/sdk-languages/rust.svg\" width=\"50px\"/>                     | https://github.com/extism/rust-pdk                            | [Crates.io](https://crates.io/crates/extism-pdk)          |\n| JS PDK             | <img alt=\"JS PDK\" src=\"https://extism.org/img/sdk-languages/js.svg\" width=\"50px\"/>                         | https://github.com/extism/js-pdk                              | N/A                                                       |\n| Python PDK         | <img alt=\"Python PDK\" src=\"https://extism.org/img/sdk-languages/python.svg\" width=\"50px\"/>                 | https://github.com/extism/python-pdk                          | N/A                                                       |\n| Go PDK             | <img alt=\"Go PDK\" src=\"https://extism.org/img/sdk-languages/go.svg\" width=\"50px\"/>                         | https://github.com/extism/go-pdk                              | [Go mod](https://pkg.go.dev/github.com/extism/go-pdk)     |\n| Haskell PDK        | <img alt=\"Haskell PDK\" src=\"https://extism.org/img/sdk-languages/haskell.svg\" width=\"50px\"/>               | https://github.com/extism/haskell-pdk                         | [Hackage](https://hackage.haskell.org/package/extism-pdk) |\n| AssemblyScript PDK | <img alt=\"AssemblyScript PDK\" src=\"https://extism.org/img/sdk-languages/assemblyscript.svg\" width=\"50px\"/> | https://github.com/extism/assemblyscript-pdk                  | [NPM](https://www.npmjs.com/package/@extism/as-pdk)       |\n| .NET PDK           | <img alt=\".NET PDK\" src=\"https://extism.org/img/sdk-languages/dotnet.svg\" width=\"50px\"/>                   | https://github.com/extism/dotnet-pdk <br/>(supports C# & F#!) | [Nuget](https://www.nuget.org/packages/Extism.Pdk)        |\n| C PDK              | <img alt=\"C PDK\" src=\"https://extism.org/img/sdk-languages/c.svg\" width=\"50px\"/>                           | https://github.com/extism/c-pdk                               | N/A                                                       |\n| C++ PDK            | <img alt=\"C++ PDK\" src=\"https://extism.org/img/sdk-languages/cpp.svg\" width=\"50px\"/>                       | https://github.com/extism/cpp-pdk                             | N/A                                                       |\n| Zig PDK            | <img alt=\"Zig PDK\" src=\"https://extism.org/img/sdk-languages/zig.svg\" width=\"50px\"/>                       | https://github.com/extism/zig-pdk                             | N/A                                                       |\n\n# Generating Bindings\n\nIt's often very useful to define a schema to describe the function signatures\nand types you want to use between Extism SDK and PDK languages.\n\n[XTP Bindgen](https://github.com/dylibso/xtp-bindgen) is an open source\nframework to generate PDK bindings for Extism plug-ins. It's used by the\n[XTP Platform](https://www.getxtp.com/), but can be used outside of the platform\nto define any Extism compatible plug-in system.\n\n## 1. Install the `xtp` CLI.\n\nSee installation instructions\n[here](https://docs.xtp.dylibso.com/docs/cli#installation).\n\n## 2. Create a schema using our OpenAPI-inspired IDL:\n\n```yaml\nversion: v1-draft\nexports: \n  CountVowels:\n      input: \n          type: string\n          contentType: text/plain; charset=utf-8\n      output:\n          $ref: \"#/components/schemas/VowelReport\"\n          contentType: application/json\n# components.schemas defined in example-schema.yaml...\n```\n\n> See an example in [example-schema.yaml](./example-schema.yaml), or a full\n> \"kitchen sink\" example on\n> [the docs page](https://docs.xtp.dylibso.com/docs/concepts/xtp-schema/).\n\n## 3. Generate bindings to use from your plugins:\n\n```\nxtp plugin init --schema-file ./example-schema.yaml\n  > 1. TypeScript                      \n    2. Go                              \n    3. Rust                            \n    4. Python                          \n    5. C#                              \n    6. Zig                             \n    7. C++                             \n    8. GitHub Template                 \n    9. Local Template\n```\n\nThis will create an entire boilerplate plugin project for you to get started\nwith. Implement the empty function(s), and run `xtp plugin build` to compile\nyour plugin.\n\n> For more information about XTP Bindgen, see the\n> [dylibso/xtp-bindgen](https://github.com/dylibso/xtp-bindgen) repository and\n> the official\n> [XTP Schema documentation](https://docs.xtp.dylibso.com/docs/concepts/xtp-schema).\n\n# Support\n\n## Discord\n\nIf you experience any problems or have any questions, please join our\n[Discord](https://extism.org/discord) and let us know. Our community is very\nresponsive and happy to help get you started.\n\n## Usage\n\nHead to the [project website](https://extism.org) for more information and docs.\nAlso, consider reading an [overview](https://extism.org/docs/overview) of Extism\nand its goals & approach.\n\n## Contribution\n\nThank you for considering a contribution to Extism, we are happy to help you\nmake a PR or find something to work on!\n\nThe easiest way to start would be to join the\n[Discord](https://extism.org/discord) or open an issue on the\n[`extism/proposals`](https://github.com/extism/proposals) issue tracker, which\ncan eventually become an Extism Improvement Proposal (EIP).\n\nFor more information, please read the\n[Contributing](https://extism.org/docs/concepts/contributing) guide.\n\n---\n\n## Who's behind this?\n\nExtism is an open-source product from the team at:\n\n<p align=\"left\">\n  <a href=\"https://dylibso.com\" _target=\"blanks\"><img width=\"200px\" src=\"https://user-images.githubusercontent.com/7517515/198204119-5afdebb9-a5d8-4322-bd2a-46179c8d7b24.svg\"/></a>\n</p>\n\n_Reach out and tell us what you're building! We'd love to help:_\n<a href=\"mailto:hello@dylibso.com\">hello@dylibso.com</a>\n"
        },
        {
          "name": "convert-macros",
          "type": "tree",
          "content": null
        },
        {
          "name": "convert",
          "type": "tree",
          "content": null
        },
        {
          "name": "example-schema.yaml",
          "type": "blob",
          "size": 0.9375,
          "content": "# yaml-language-server: $schema=https://xtp.dylibso.com/assets/wasm/schema.json\n# Learn more at https://docs.xtp.dylibso.com/docs/concepts/xtp-schema\nversion: v1-draft\nexports: \n  CountVowels:\n      input: \n          type: string\n          contentType: text/plain; charset=utf-8\n      output:\n          $ref: \"#/components/schemas/VowelReport\"\n          contentType: application/json\ncomponents:\n  schemas:\n    VowelReport:\n      description: The result of counting vowels on the Vowels input.\n      properties:\n        count:\n          type: integer\n          format: int32\n          description: The count of vowels for input string.\n        total:\n          type: integer\n          format: int32\n          description: The cumulative amount of vowels counted, if this keeps state across multiple function calls.\n          nullable: true\n        vowels:\n          type: string\n          description: The set of vowels used to get the count, e.g. \"aAeEiIoOuU\""
        },
        {
          "name": "extism-maturin",
          "type": "tree",
          "content": null
        },
        {
          "name": "kernel",
          "type": "tree",
          "content": null
        },
        {
          "name": "libextism",
          "type": "tree",
          "content": null
        },
        {
          "name": "manifest",
          "type": "tree",
          "content": null
        },
        {
          "name": "nuget",
          "type": "tree",
          "content": null
        },
        {
          "name": "runtime",
          "type": "tree",
          "content": null
        },
        {
          "name": "wasm",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}