{
  "metadata": {
    "timestamp": 1736709202280,
    "page": 469,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjQ3MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "open-telemetry/opentelemetry-rust",
      "stars": 1971,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".cspell.json",
          "type": "blob",
          "size": 2.171875,
          "content": "// http://cspell.org/configuration/\n{\n    \"version\": \"0.2\",\n    \"language\": \"en,en-US\",\n    \"useGitignore\": true,\n    \"minWordLength\": 4,\n    \"ignorePaths\": [\n        \"target/**\"\n    ],\n    // list of words to be ignored.  unlike `words` below, these won't be\n    // suggested as corrections for misspelled words.\n    \"ignoreWords\": [\n        \"otel\",\n        \"rustdoc\",\n        \"rustfilt\"\n    ],\n    // these are words that are always considered incorrect.\n    \"flagWords\": [\n        \"recieve\",\n        \"reciever\",\n        \"seperate\",\n        \"hte\",\n        \"teh\"\n    ],\n    // these are words that are always correct and can be thought of as our\n    // workspace dictionary.\n    \"words\": [\n        \"actix\",\n        \"appender\",\n        \"appenders\",\n        \"Bhasin\",\n        \"Cijo\",\n        \"clippy\",\n        \"clonable\",\n        \"codecov\",\n        \"datapoint\",\n        \"deque\",\n        \"Dirkjan\",\n        \"EPYC\",\n        \"hasher\",\n        \"Isobel\",\n        \"jaegertracing\",\n        \"KÃ¼hle\",\n        \"Kumar\",\n        \"Lalit\",\n        \"LIBCLANG\",\n        \"msrv\",\n        \"mykey\",\n        \"myvalue\",\n        \"nocapture\",\n        \"Ochtman\",\n        \"opentelemetry\",\n        \"OTELCOL\",\n        \"OTLP\",\n        \"periodicreader\",\n        \"prost\",\n        \"protoc\",\n        \"quantile\",\n        \"Redelmeier\",\n        \"reqwest\",\n        \"runtimes\",\n        \"rustc\",\n        \"shoppingcart\",\n        \"struct\",\n        \"Tescher\",\n        \"testresults\",\n        \"tracerprovider\",\n        \"updown\",\n        \"Zhongyang\",\n        \"zipkin\"\n    ],\n    \"enabledLanguageIds\": [\n        \"jsonc\",\n        \"markdown\",\n        \"plaintext\",\n        \"rust\",\n        \"shellscript\"\n    ],\n    \"languageSettings\": [\n        {\n            \"languageId\": \"jsonc\",\n            \"includeRegExpList\": [\n                \"CStyleComment\"\n            ]\n        },\n        {\n            \"languageId\": \"markdown\",\n            \"caseSensitive\": false\n        },\n        {\n            \"languageId\": \"rust\",\n            \"includeRegExpList\": [\n                \"CStyleComment\",\n                \"strings\"\n            ]\n        },\n        {\n            \"languageId\": \"shellscript\",\n            \"includeRegExpList\": [\n                \"/#.*/g\"\n            ]\n        }\n    ]\n}\n"
        },
        {
          "name": ".dockerignore",
          "type": "blob",
          "size": 0.0078125,
          "content": "target/\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.1201171875,
          "content": "/.vscode/\n/target/\n*/target/\n**/*.rs.bk\nCargo.lock\n/.idea/\n\n.cosine\n\nopentelemetry-otlp/tests/integration_test/result.json\n"
        },
        {
          "name": ".gitmodules",
          "type": "blob",
          "size": 0.2001953125,
          "content": "[submodule \"opentelemetry-proto/src/proto/opentelemetry-proto\"]\n\tpath = opentelemetry-proto/src/proto/opentelemetry-proto\n\turl = https://github.com/open-telemetry/opentelemetry-proto\n\tbranch = tags/v1.0.0\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 8.7744140625,
          "content": "# Contributing to opentelemetry-rust\n\nThe Rust special interest group (SIG) meets weekly on Tuesdays at 9 AM Pacific\nTime. The meeting is subject to change depending on contributors'\navailability. Check the [OpenTelemetry community\ncalendar](https://github.com/open-telemetry/community?tab=readme-ov-file#calendar)\nfor specific dates and for Zoom meeting links. \"OTel Rust SIG\" is the name of\nmeeting for this group.\n\nMeeting notes are available as a public [Google\ndoc](https://docs.google.com/document/d/1tGKuCsSnyT2McDncVJrMgg74_z8V06riWZa0Sr79I_4/edit).\nIf you have trouble accessing the doc, please get in touch on\n[Slack](https://cloud-native.slack.com/archives/C03GDP0H023).\n\nThe meeting is open for all to join. We invite everyone to join our meeting,\nregardless of your experience level. Whether you're a seasoned OpenTelemetry\ndeveloper, just starting your journey, or simply curious about the work we do,\nyou're more than welcome to participate!\n\nEven though, anybody can contribute, there are benefits of being a member of our\ncommunity. See to the [community membership\ndocument](https://github.com/open-telemetry/community/blob/main/guides/contributor/membership.md)\non how to become a\n[**Member**](https://github.com/open-telemetry/community/blob/main/guides/contributor/membership.md#member),\n[**Approver**](https://github.com/open-telemetry/community/blob/main/guides/contributor/membership.md#approver)\nand\n[**Maintainer**](https://github.com/open-telemetry/community/blob/main/guides/contributor/membership.md#maintainer).\n\n## Pull Requests\n\n### Prerequisites\n\nCrate `opentelemetry-otlp` uses gRPC + Protocol Buffers.\nYou can provide the protocol compiler protoc path programmatically (only works with tonic) or build it from source\n\n```sh\nexport PROTOC=$(which protoc)\n```\n\nIt is recommended to use \"3.15\" or newer of protoc, as some of the proto\ndefinitions include \"optional\" fields, that are not supported in older versions,\nresulting in errors as shown\n[here](https://github.com/open-telemetry/opentelemetry-proto/issues/451).\n\nPrerequisites to build the protocol compiler protoc from source\n\n- [protoc](https://github.com/protocolbuffers/protobuf)\n- [cmake](https://cmake.org)\n- [llvm](https://releases.llvm.org/download.html) (and `LIBCLANG_PATH` environment variable pointing to the `bin` directory of LLVM install)\n\n### How to Send Pull Requests\n\nEveryone is welcome to contribute code to `opentelemetry-rust` via\nGitHub pull requests (PRs).\n\n```sh\ngit clone --recurse-submodule https://github.com/open-telemetry/opentelemetry-rust\n```\n\nEnter the newly created directory and add your fork as a new remote:\n\n```sh\ngit remote add <YOUR_FORK> git@github.com:<YOUR_GITHUB_USERNAME>/opentelemetry-rust\n```\n\nCheck out a new branch, make modifications, run linters and tests, and\npush the branch to your fork:\n\n```sh\n$ git checkout -b <YOUR_BRANCH_NAME>\n# edit files\n$ git add -p\n$ git commit\n$ git push <YOUR_FORK> <YOUR_BRANCH_NAME>\n```\n\nOpen a pull request against the main\n[opentelemetry-rust](https://github.com/open-telemetry/opentelemetry-rust)\nrepo.\n\n> **Note**\n> It is recommended to run [pre-commit script](scripts/precommit.sh) from the root of\nthe repo to catch any issues locally.\n\n### How to Receive Comments\n\n- If the PR is not ready for review, please put `[WIP]` in the title or mark it\n  as [`draft`](https://github.blog/2019-02-14-introducing-draft-pull-requests/).\n- Make sure CLA is signed and all required CI checks are clear.\n- Submit small, focused PRs addressing a single concern/issue.\n- Make sure the PR title reflects the contribution.\n- Write a summary that helps understand the change.\n- Include usage examples in the summary, where applicable.\n- Include benchmarks (before/after) in the summary, for contributions that are\n  performance enhancements.\n\n### How to Get PRs Merged\n\nA PR is considered to be **ready to merge** when:\n\n- It has received approval from\n  [Approvers](https://github.com/open-telemetry/community/blob/main/guides/contributor/membership.md#approver).\n  /\n  [Maintainers](https://github.com/open-telemetry/community/blob/main/guides/contributor/membership.md#maintainer).\n- Major feedbacks are resolved.\n\nAny Maintainer can merge the PR once it is **ready to merge**. Note, that some\nPRs may not be merged immediately if the repo is in the process of a release and\nthe maintainers decided to defer the PR to the next release train. Also,\nmaintainers may decide to wait for more than one approval for certain PRs,\nparticularly ones that are affecting multiple areas, or topics that may warrant\nmore discussion.\n\n## Design Choices\n\nAs with other OpenTelemetry clients, opentelemetry-rust follows the\n[opentelemetry-specification](https://github.com/open-telemetry/opentelemetry-specification).\n\nIt's especially valuable to read through the [library\nguidelines](https://github.com/open-telemetry/opentelemetry-specification/blob/master/specification/library-guidelines.md).\n\n### Focus on Capabilities, Not Structure Compliance\n\nOpenTelemetry is an evolving specification, one where the desires and\nuse cases are clear, but the method to satisfy those uses cases are\nnot.\n\nAs such, Contributions should provide functionality and behavior that\nconforms to the specification, but the interface and structure is\nflexible.\n\nIt is preferable to have contributions follow the idioms of the\nlanguage rather than conform to specific API names or argument\npatterns in the spec.\n\nFor a deeper discussion, see:\n<https://github.com/open-telemetry/opentelemetry-specification/issues/165>\n\n### Error Handling\n\nCurrently, the Opentelemetry Rust SDK has two ways to handle errors. In the situation where errors are not allowed to return. One should call global error handler to process the errors. Otherwise, one should return the errors.\n\nThe Opentelemetry Rust SDK comes with an error type `opentelemetry::Error`. For different function, one error has been defined. All error returned by trace module MUST be wrapped in `opentelemetry::trace::TraceError`. All errors returned by metrics module MUST be wrapped in `opentelemetry::metrics::MetricError`. All errors returned by logs module MUST be wrapped in `opentelemetry::logs::LogsError`.\n\nFor users that want to implement their own exporters. It's RECOMMENDED to wrap all errors from the exporter into a crate-level error type, and implement `ExporterError` trait.\n\n### Priority of configurations\n\nOpenTelemetry supports multiple ways to configure the API, SDK and other components. The priority of configurations is as follows:\n\n- Environment variables\n- Compiling time configurations provided in the source code\n\n### Experimental/Unstable features\n\nUse `otel_unstable` feature flag for implementation of specification with [experimental](https://github.com/open-telemetry/opentelemetry-specification/blob/v1.27.0/specification/document-status.md) status. This approach ensures clear demarcation and safe integration of new or evolving features. Utilize the following structure:\n\n```rust\n#[cfg(feature = \"otel_unstable\")]\n{\n    // Your feature implementation\n}\n```\n\nIt's important to regularly review and remove the `otel_unstable` flag from the code once the feature becomes stable. This cleanup process is crucial to maintain the overall code quality and to ensure that stable features are accurately reflected in the main build.\n\n### Optional features\n\nThe potential features include:\n\n- Stable and non-experimental features that compliant to specification, and have a feature flag to minimize compilation size. Example: feature flags for signals (like `logs`, `traces`, `metrics`) and runtimes (`rt-tokio`, `rt-tokio-current-thread`, `rt-async-std`).\n- Stable and non-experimental features, although not part of the specification, are crucial for enhancing the tracing/log crate's functionality or boosting performance. These features are also subject to discussion and approval by the OpenTelemetry Rust Maintainers.\n\nAll such features should adhere to naming convention  `<signal>_<feature_name>`\n\n## Style Guide\n\n- Run `cargo clippy --all` - this will catch common mistakes and improve\nyour Rust code\n- Run `cargo fmt` - this will find and fix code formatting\nissues.\n\n## Testing and Benchmarking\n\n- Run `cargo test --all` - this will execute code and doc tests for all\nprojects in this workspace.\n- Run `cargo bench` - this will run benchmarks to show performance\n- Run `cargo bench` - this will run benchmarks to show performance\nregressions\n\n## FAQ\n\n### Where should I put third party propagators/exporters, contrib or standalone crates?\n\nAs of now, the specification classify the propagators into three categories:\nFully opened standards, platform-specific standards, proprietary headers. The\nconclusion is only the fully opened standards should live in SDK packages/repos.\nSo here, only fully opened standards should live as independent crate. For more\ndetail and discussion, see [this\npr](https://github.com/open-telemetry/opentelemetry-specification/pull/1144).\n"
        },
        {
          "name": "Cargo.toml",
          "type": "blob",
          "size": 1.740234375,
          "content": "[workspace]\nmembers = [\n    \"opentelemetry\",\n    \"opentelemetry-*\",\n    \"opentelemetry-*/examples/*\",\n    \"opentelemetry-otlp/tests/*\",\n    \"examples/*\",\n    \"stress\",\n]\nresolver = \"2\"\n\n[profile.bench]\n# https://doc.rust-lang.org/cargo/reference/profiles.html#bench\n# See function names in profiling reports.\n# 2/true is too much, 0 is not enough, 1 is just right for back traces\ndebug = 1\n\n[workspace.dependencies]\nasync-std = \"1.13\"\nasync-trait = \"0.1\"\nbytes = \"1\"\ncriterion = \"0.5\"\nfutures-core = \"0.3\"\nfutures-executor = \"0.3\"\nfutures-util = { version = \"0.3\", default-features = false }\nhttp = { version = \"1.1\", default-features = false, features = [\"std\"] }\nhttp-body-util = \"0.1\"\nhyper = { version = \"1.3\", default-features = false }\nhyper-util = \"0.1\"\nlog = \"0.4.21\"\nonce_cell = \"1.13\"\npin-project-lite = \"0.2\"\nprost = \"0.13\"\nprost-build = \"0.13\"\nprost-types = \"0.13\"\nrand = { version = \"0.8\", default-features = false }\nreqwest = { version = \"0.12\", default-features = false }\nserde = { version = \"1.0\", default-features = false }\nserde_json = \"1.0\"\ntemp-env = \"0.3.6\"\nthiserror = { version = \"2\", default-features = false }\ntonic = { version = \"0.12.3\", default-features = false }\ntonic-build = \"0.12\"\ntokio = { version = \"1\", default-features = false }\ntokio-stream = \"0.1\"\n# Using `tracing 0.1.40` because 0.1.39 (which is yanked) introduces the ability to set event names in macros, \n# required for OpenTelemetry's internal logging macros.\ntracing = { version = \">=0.1.40\", default-features = false }\n# `tracing-core >=0.1.33` is required for compatibility with `tracing >=0.1.40`.\ntracing-core = { version = \">=0.1.33\", default-features = false } \ntracing-subscriber = { version = \"0.3\", default-features = false }\nurl = { version = \"2.5\", default-features = false }\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 11.0908203125,
          "content": "                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"[]\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright [yyyy] [name of copyright owner]\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 9.705078125,
          "content": "# OpenTelemetry Rust\n\nThe Rust [OpenTelemetry](https://opentelemetry.io/) implementation.\n\n[![Crates.io: opentelemetry](https://img.shields.io/crates/v/opentelemetry.svg)](https://crates.io/crates/opentelemetry)\n[![Documentation](https://docs.rs/opentelemetry/badge.svg)](https://docs.rs/opentelemetry)\n[![LICENSE](https://img.shields.io/crates/l/opentelemetry)](./LICENSE)\n[![GitHub Actions CI](https://github.com/open-telemetry/opentelemetry-rust/workflows/CI/badge.svg)](https://github.com/open-telemetry/opentelemetry-rust/actions?query=workflow%3ACI+branch%3Amain)\n[![codecov](https://codecov.io/gh/open-telemetry/opentelemetry-rust/branch/main/graph/badge.svg)](https://codecov.io/gh/open-telemetry/opentelemetry-rust)\n[![Slack](https://img.shields.io/badge/slack-@cncf/otel/rust-brightgreen.svg?logo=slack)](https://cloud-native.slack.com/archives/C03GDP0H023)\n\n## Overview\n\nOpenTelemetry is a collection of tools, APIs, and SDKs used to instrument,\ngenerate, collect, and export telemetry data (metrics, logs, and traces) for\nanalysis in order to understand your software's performance and behavior. You\ncan export and analyze them using [Prometheus], [Jaeger], and other\nobservability tools.\n\n*[Supported Rust Versions](#supported-rust-versions)*\n\n[Prometheus]: https://prometheus.io\n[Jaeger]: https://www.jaegertracing.io\n\n## Project Status\n\nThe table below summarizes the overall status of each component. Some components\ninclude unstable features, which are documented in their respective crate\ndocumentation.\n\n| Signal/Component      | Overall Status     |\n| --------------------  | ------------------ |\n| Logs-API              | RC*                |\n| Logs-SDK              | Beta               |\n| Logs-OTLP Exporter    | Beta               |\n| Logs-Appender-Tracing | Beta               |\n| Metrics-API           | RC                 |\n| Metrics-SDK           | Beta               |\n| Metrics-OTLP Exporter | Beta               |\n| Traces-API            | Beta               |\n| Traces-SDK            | Beta               |\n| Traces-OTLP Exporter  | Beta               |\n\n*OpenTelemetry Rust is not introducing a new end user callable Logging API.\nInstead, it provides [Logs Bridge\nAPI](https://github.com/open-telemetry/opentelemetry-specification/blob/main/specification/logs/api.md),\nthat allows one to write log appenders that can bridge existing logging\nlibraries to the OpenTelemetry log data model. The following log appenders are\navailable:\n\n* [opentelemetry-appender-log](opentelemetry-appender-log/README.md)\n* [opentelemetry-appender-tracing](opentelemetry-appender-tracing/README.md)\n\nIf you already use the logging APIs from above, continue to use them, and use\nthe appenders above to bridge the logs to OpenTelemetry. If you are using a\nlibrary not listed here, feel free to contribute a new appender for the same.\n\nIf you are starting fresh, then consider using\n[tracing](https://github.com/tokio-rs/tracing) as your logging API. It supports\nstructured logging and is actively maintained.\n\nProject versioning information and stability guarantees can be found\n[here](VERSIONING.md).\n\n## Getting Started\n\n```rust\nuse opentelemetry::{\n    global,\n    trace::{Tracer, TracerProvider as _},\n};\nuse opentelemetry_sdk::trace::TracerProvider;\n\nfn main() {\n    // Create a new trace pipeline that prints to stdout\n    let provider = TracerProvider::builder()\n        .with_simple_exporter(opentelemetry_stdout::SpanExporter::default())\n        .build();\n    let tracer = provider.tracer(\"readme_example\");\n\n    tracer.in_span(\"doing_work\", |cx| {\n        // Traced app logic here...\n    });\n\n    // Shutdown trace pipeline\n    provider.shutdown().expect(\"TracerProvider should shutdown successfully\")\n}\n```\n\nThe example above requires the following packages:\n\n```toml\n# Cargo.toml\n[dependencies]\nopentelemetry = \"0.22\"\nopentelemetry_sdk = \"0.22\"\nopentelemetry-stdout = { version = \"0.3\", features = [\"trace\"] }\n```\n\nSee the [examples](./examples) directory for different integration patterns.\n\n## Overview of crates\n\nThe following crates are maintained in this repo:\n\n* [`opentelemetry`] This is the OpenTelemetry API crate, and is the crate\n  required to instrument libraries and applications. It contains Context API,\n  Baggage API, Propagators API, Logging Bridge API, Metrics API, and Tracing\n  API.\n* [`opentelemetry-sdk`] This is the OpenTelemetry SDK crate, and contains the\n  official OpenTelemetry SDK implementation. It contains Logging SDK, Metrics\n  SDK, and Tracing SDK. It also contains propagator implementations.\n* [`opentelemetry-otlp`] - exporter to send telemetry (logs, metrics and traces)\n  in the [OTLP\n  format](https://github.com/open-telemetry/opentelemetry-specification/tree/main/specification/protocol)\n  to an endpoint accepting OTLP. This could be the [OTel\n  Collector](https://github.com/open-telemetry/opentelemetry-collector),\n  telemetry backends like [Jaeger](https://www.jaegertracing.io/),\n  [Prometheus](https://prometheus.io/docs/prometheus/latest/feature_flags/#otlp-receiver)\n  or [vendor specific endpoints](https://opentelemetry.io/ecosystem/vendors/).\n* [`opentelemetry-stdout`] exporter for sending logs, metrics and traces to\n  stdout, for learning/debugging purposes.  \n* [`opentelemetry-http`] This crate contains utility functions to help with\n  exporting telemetry, propagation, over [`http`].\n* [`opentelemetry-appender-log`] This crate provides logging appender to route\n  logs emitted using the [log](https://docs.rs/log/latest/log/) crate to\n  opentelemetry.\n* [`opentelemetry-appender-tracing`] This crate provides logging appender to\n  route logs emitted using the [tracing](https://crates.io/crates/tracing) crate\n  to opentelemetry.  \n* [`opentelemetry-jaeger-propagator`] provides context propagation using [jaeger\n  propagation\n  format](https://www.jaegertracing.io/docs/1.18/client-libraries/#propagation-format).\n* [`opentelemetry-prometheus`] provides a pipeline and exporter for sending\n  metrics to [`Prometheus`].\n* [`opentelemetry-semantic-conventions`] provides standard names and semantic\n  otel conventions.\n* [`opentelemetry-zipkin`] provides a pipeline and exporter for sending traces\n  to [`Zipkin`].\n\nIn addition, there are several other useful crates in the [OTel Rust Contrib\nrepo](https://github.com/open-telemetry/opentelemetry-rust-contrib). A lot of\ncrates maintained outside OpenTelemetry owned repos can be found in the\n[OpenTelemetry\nRegistry](https://opentelemetry.io/ecosystem/registry/?language=rust).\n\n[`opentelemetry`]: https://crates.io/crates/opentelemetry\n[`opentelemetry-sdk`]: https://crates.io/crates/opentelemetry-sdk\n[`opentelemetry-appender-log`]: https://crates.io/crates/opentelemetry-appender-log\n[`opentelemetry-appender-tracing`]: https://crates.io/crates/opentelemetry-appender-tracing\n[`opentelemetry-http`]: https://crates.io/crates/opentelemetry-http\n[`opentelemetry-otlp`]: https://crates.io/crates/opentelemetry-otlp\n[`opentelemetry-stdout`]: https://crates.io/crates/opentelemetry-stdout\n[`opentelemetry-jaeger-propagator`]: https://crates.io/crates/opentelemetry-jaeger-propagator\n[`opentelemetry-prometheus`]: https://crates.io/crates/opentelemetry-prometheus\n[`Prometheus`]: https://prometheus.io\n[`opentelemetry-zipkin`]: https://crates.io/crates/opentelemetry-zipkin\n[`Zipkin`]: https://zipkin.io\n[`opentelemetry-semantic-conventions`]: https://crates.io/crates/opentelemetry-semantic-conventions\n[`http`]: https://crates.io/crates/http\n\n## Supported Rust Versions\n\nOpenTelemetry is built against the latest stable release. The minimum supported\nversion is 1.75. The current OpenTelemetry version is not guaranteed to build\non Rust versions earlier than the minimum supported version.\n\nThe current stable Rust compiler and the three most recent minor versions\nbefore it will always be supported. For example, if the current stable compiler\nversion is 1.49, the minimum supported version will not be increased past 1.46,\nthree minor versions prior. Increasing the minimum supported compiler version\nis not considered a semver breaking change as long as doing so complies with\nthis policy.\n\n## Contributing\n\nSee the [contributing file](CONTRIBUTING.md).\n\nThe Rust special interest group (SIG) meets weekly on Tuesdays at 9 AM Pacific\nTime. The meeting is subject to change depending on contributors' availability.\nCheck the [OpenTelemetry community\ncalendar](https://github.com/open-telemetry/community?tab=readme-ov-file#calendar)\nfor specific dates and for Zoom meeting links. \"OTel Rust SIG\" is the name of\nmeeting for this group.\n\nMeeting notes are available as a public [Google\ndoc](https://docs.google.com/document/d/12upOzNk8c3SFTjsL6IRohCWMgzLKoknSCOOdMakbWo4/edit).\nIf you have trouble accessing the doc, please get in touch on\n[Slack](https://cloud-native.slack.com/archives/C03GDP0H023).\n\nThe meeting is open for all to join. We invite everyone to join our meeting,\nregardless of your experience level. Whether you're a seasoned OpenTelemetry\ndeveloper, just starting your journey, or simply curious about the work we do,\nyou're more than welcome to participate!\n\n## Approvers and Maintainers\n\n### Maintainers\n\n* [Cijo Thomas](https://github.com/cijothomas)\n* [Harold Dost](https://github.com/hdost)\n* [Julian Tescher](https://github.com/jtescher)\n* [Lalit Kumar Bhasin](https://github.com/lalitb)\n* [Utkarsh Umesan Pillai](https://github.com/utpilla)\n* [Zhongyang Wu](https://github.com/TommyCpp)\n\n### Approvers\n\n* [Shaun Cox](https://github.com/shaun-cox)\n\n### Emeritus\n\n* [Dirkjan Ochtman](https://github.com/djc)\n* [Jan KÃ¼hle](https://github.com/frigus02)\n* [Isobel Redelmeier](https://github.com/iredelmeier)\n* [Mike Goldsmith](https://github.com/MikeGoldsmith)\n\n### Thanks to all the people who have contributed\n\n[![contributors](https://contributors-img.web.app/image?repo=open-telemetry/opentelemetry-rust)](https://github.com/open-telemetry/opentelemetry-rust/graphs/contributors)\n"
        },
        {
          "name": "VERSIONING.md",
          "type": "blob",
          "size": 2.796875,
          "content": "# Versioning\n\nThis document describes the versioning policy for this repository. This policy\nis designed so the following goals can be achieved.\n\n## Goals\n\n### API Stability\n\nOnce the API for a given signal (spans, logs, metrics, baggage) has been\nofficially released, that API module will function with any SDK that has the\nsame major version, and equal or greater minor or patch version.\n\nFor example, libraries that are instrumented with `opentelemetry 1.0.1` will\nfunction in applications using `opentelemetry 1.11.33` or `opentelemetry\n1.3.4`.\n\n### SDK Stability\n\nPublic portions of the SDK (constructors, configuration, end-user interfaces)\nmust remain backwards compatible. Internal types are allowed to break.\n\n## Policy\n\n* Releases will follow [SemVer](https://semver.org/).\n* New telemetry signals will be introduced behind experimental \n  [cargo features](https://doc.rust-lang.org/cargo/reference/features.html).\n\n  * New signals will be stabilized via a **minor version bump**, and are not\n    allowed to break existing stable interfaces.\n\n* GitHub releases will be made for all released versions.\n* Crates will be released on crates.io\n\n## Example Versioning Lifecycle\n\nTo better understand the implementation of the above policy, here is an example\nof how the metrics and logging signals **could** stabilize.\n\n- v1.0.0 release:\n   - `opentelemetry 1.0.0`\n     - Contains stable impls of trace, baggage, resource, context modules\n     - experimental metrics impl behind feature flag\n   - `opentelemetry-semantic-conventions 1.0.0`\n     - Contains stable impls of trace, resource conventions\n     - experimental metrics conventions behind feature flag\n   - `opentelemetry-contrib 1.0.0`\n     - Contains stable impls of 3rd party trace exporters and propagators\n     - experimental metrics exporters and propagator impls behind feature flag\n- v1.5.0 release (with metrics)\n   - `opentelemetry 1.5.0`\n     - Contains stable impls of metrics, trace, baggage, resource, context modules\n     - experimental logging impl still only behind feature flag\n   - `opentelemetry-semantic-conventions 1.2.0`\n     - Contains stable impls of metrics, trace, resource conventions\n     - experimental logging conventions still only behind feature flag\n   - `opentelemetry-contrib 1.6.0`\n     - Contains stable impls of 3rd party trace and metrics exporters and propagators\n     - experimental logging exporters and propagator still impls behind feature flag\n- v1.10.0 release (with logging)\n   - `opentelemetry 1.10.0`\n     - Contains stable impls of logging, metrics, trace, baggage, resource, context modules\n   - `opentelemetry-semantic-conventions 1.4.0`\n     - Contains stable impls of logging, metrics, trace, resource conventions\n   - `opentelemetry-contrib 1.12.0`\n     - Contains stable impls of 3rd party trace, metrics, and logging exporters and propagators\n"
        },
        {
          "name": "assets",
          "type": "tree",
          "content": null
        },
        {
          "name": "deny.toml",
          "type": "blob",
          "size": 0.4755859375,
          "content": "exclude=[\n    \"actix-http\",\n    \"actix-http-tracing\",\n    \"actix-udp\",\n    \"actix-udp-example\",\n    \"tracing-grpc\",\n    \"http\"\n]\n\n[licenses]\nunlicensed = \"deny\"\nallow = [\n    \"MIT\",\n    \"Apache-2.0\",\n    \"ISC\",\n    \"BSD-3-Clause\",\n    \"OpenSSL\"\n]\n\n[licenses.private]\nignore = true\n\n[[licenses.clarify]]\nname = \"ring\"\nversion = \"*\"\nexpression = \"MIT AND ISC AND OpenSSL\"\nlicense-files = [\n    { path = \"LICENSE\", hash = 0xbd0eed23 }\n]\n\n[advisories]\nunmaintained = \"allow\"\nyanked = \"allow\""
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "opentelemetry-appender-log",
          "type": "tree",
          "content": null
        },
        {
          "name": "opentelemetry-appender-tracing",
          "type": "tree",
          "content": null
        },
        {
          "name": "opentelemetry-http",
          "type": "tree",
          "content": null
        },
        {
          "name": "opentelemetry-jaeger-propagator",
          "type": "tree",
          "content": null
        },
        {
          "name": "opentelemetry-otlp",
          "type": "tree",
          "content": null
        },
        {
          "name": "opentelemetry-prometheus",
          "type": "tree",
          "content": null
        },
        {
          "name": "opentelemetry-proto",
          "type": "tree",
          "content": null
        },
        {
          "name": "opentelemetry-sdk",
          "type": "tree",
          "content": null
        },
        {
          "name": "opentelemetry-semantic-conventions",
          "type": "tree",
          "content": null
        },
        {
          "name": "opentelemetry-stdout",
          "type": "tree",
          "content": null
        },
        {
          "name": "opentelemetry-zipkin",
          "type": "tree",
          "content": null
        },
        {
          "name": "opentelemetry",
          "type": "tree",
          "content": null
        },
        {
          "name": "rustfmt.toml",
          "type": "blob",
          "size": 0.0166015625,
          "content": "edition = \"2021\"\n"
        },
        {
          "name": "scripts",
          "type": "tree",
          "content": null
        },
        {
          "name": "stress",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}