{
  "metadata": {
    "timestamp": 1736709089426,
    "page": 234,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjI0MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "01mf02/jaq",
      "stars": 2920,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.0078125,
          "content": "/target\n"
        },
        {
          "name": "Cargo.lock",
          "type": "blob",
          "size": 13.943359375,
          "content": "# This file is automatically @generated by Cargo.\n# It is not intended for manual editing.\nversion = 3\n\n[[package]]\nname = \"aho-corasick\"\nversion = \"1.1.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8e60d3430d3a69478ad0993f19238d2df97c507009a52b3c10addcd7f6bcb916\"\ndependencies = [\n \"memchr\",\n]\n\n[[package]]\nname = \"atty\"\nversion = \"0.2.14\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d9b39be18770d11421cdb1b9947a45dd3f37e93092cbf377614828a319d5fee8\"\ndependencies = [\n \"hermit-abi\",\n \"libc\",\n \"winapi\",\n]\n\n[[package]]\nname = \"autocfg\"\nversion = \"1.4.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ace50bade8e6234aa140d9a2f552bbee1db4d353f69b8217bc503490fc1a9f26\"\n\n[[package]]\nname = \"base64\"\nversion = \"0.22.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"72b3254f16251a8381aa12e40e3c4d2f0199f8c6508fbecb9d91f575e0fbb8c6\"\n\n[[package]]\nname = \"bitflags\"\nversion = \"1.3.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"bef38d45163c2f1dde094a7dfd33ccf595c92905c8f8f4fdc18d06fb1037718a\"\n\n[[package]]\nname = \"bumpalo\"\nversion = \"3.14.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"7f30e7476521f6f8af1a1c4c0b8cc94f0bee37d91763d0ca2665f299b6cd8aec\"\n\n[[package]]\nname = \"cc\"\nversion = \"1.2.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"fd9de9f2205d5ef3fd67e685b0df337994ddd4495e2a28d185500d0e1edfea47\"\ndependencies = [\n \"shlex\",\n]\n\n[[package]]\nname = \"cfg-if\"\nversion = \"1.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"baf1de4339761588bc0619e3cbc0120ee582ebb74b53b4efbf79117bd2da40fd\"\n\n[[package]]\nname = \"chrono\"\nversion = \"0.4.38\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a21f936df1771bf62b77f047b726c4625ff2e8aa607c01ec06e5a05bd8463401\"\ndependencies = [\n \"num-traits\",\n]\n\n[[package]]\nname = \"codesnake\"\nversion = \"0.2.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"2205f7f6d3de68ecf4c291c789b3edf07b6569268abd0188819086f71ae42225\"\n\n[[package]]\nname = \"console_log\"\nversion = \"1.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"be8aed40e4edbf4d3b4431ab260b63fdc40f5780a4766824329ea0f1eefe3c0f\"\ndependencies = [\n \"log\",\n \"wasm-bindgen\",\n \"web-sys\",\n]\n\n[[package]]\nname = \"dyn-clone\"\nversion = \"1.0.17\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"0d6ef0072f8a535281e4876be788938b528e9a1d43900b82c2569af7da799125\"\n\n[[package]]\nname = \"env_logger\"\nversion = \"0.10.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"4cd405aab171cb85d6735e5c8d9db038c17d3ca007a4d2c25f337935c3d90580\"\ndependencies = [\n \"log\",\n]\n\n[[package]]\nname = \"equivalent\"\nversion = \"1.0.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"5443807d6dff69373d433ab9ef5378ad8df50ca6298caf15de6e52e24aaf54d5\"\n\n[[package]]\nname = \"fastrand\"\nversion = \"1.9.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e51093e27b0797c359783294ca4f0a911c270184cb10f85783b118614a1501be\"\ndependencies = [\n \"instant\",\n]\n\n[[package]]\nname = \"foldhash\"\nversion = \"0.1.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f81ec6369c545a7d40e4589b5597581fa1c441fe1cce96dd1de43159910a36a2\"\n\n[[package]]\nname = \"getrandom\"\nversion = \"0.2.15\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"c4567c8db10ae91089c99af84c68c38da3ec2f087c3f82960bcdbf3656b6f4d7\"\ndependencies = [\n \"cfg-if\",\n \"js-sys\",\n \"libc\",\n \"wasi\",\n \"wasm-bindgen\",\n]\n\n[[package]]\nname = \"hashbrown\"\nversion = \"0.15.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3a9bfc1af68b1726ea47d3d5109de126281def866b33970e10fbab11b5dafab3\"\n\n[[package]]\nname = \"hermit-abi\"\nversion = \"0.1.19\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"62b467343b94ba476dcb2500d242dadbb39557df889310ac77c5d99100aaac33\"\ndependencies = [\n \"libc\",\n]\n\n[[package]]\nname = \"hifijson\"\nversion = \"0.2.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"9958ab3ce3170c061a27679916bd9b969eceeb5e8b120438e6751d0987655c42\"\n\n[[package]]\nname = \"indexmap\"\nversion = \"2.6.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"707907fe3c25f5424cce2cb7e1cbcafee6bdbe735ca90ef77c29e84591e5b9da\"\ndependencies = [\n \"equivalent\",\n \"hashbrown\",\n]\n\n[[package]]\nname = \"instant\"\nversion = \"0.1.13\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e0242819d153cba4b4b05a5a8f2a7e9bbf97b6055b2a002b395c96b5ff3c0222\"\ndependencies = [\n \"cfg-if\",\n]\n\n[[package]]\nname = \"itoa\"\nversion = \"1.0.11\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"49f1f14873335454500d59611f1cf4a4b0f786f9ac11f4312a78e4cf2566695b\"\n\n[[package]]\nname = \"jaq\"\nversion = \"2.0.1\"\ndependencies = [\n \"atty\",\n \"codesnake\",\n \"env_logger\",\n \"hifijson\",\n \"jaq-core\",\n \"jaq-json\",\n \"jaq-std\",\n \"log\",\n \"memmap2\",\n \"mimalloc\",\n \"tempfile\",\n \"unicode-width\",\n \"yansi\",\n]\n\n[[package]]\nname = \"jaq-core\"\nversion = \"2.0.0\"\ndependencies = [\n \"dyn-clone\",\n \"jaq-json\",\n \"jaq-std\",\n \"once_cell\",\n \"serde_json\",\n \"typed-arena\",\n]\n\n[[package]]\nname = \"jaq-json\"\nversion = \"1.0.0\"\ndependencies = [\n \"foldhash\",\n \"hifijson\",\n \"indexmap\",\n \"jaq-core\",\n \"jaq-std\",\n \"serde_json\",\n]\n\n[[package]]\nname = \"jaq-play\"\nversion = \"0.0.0\"\ndependencies = [\n \"aho-corasick\",\n \"codesnake\",\n \"console_log\",\n \"getrandom\",\n \"hifijson\",\n \"jaq-core\",\n \"jaq-json\",\n \"jaq-std\",\n \"js-sys\",\n \"log\",\n \"unicode-width\",\n \"wasm-bindgen\",\n \"web-sys\",\n]\n\n[[package]]\nname = \"jaq-std\"\nversion = \"2.0.0\"\ndependencies = [\n \"aho-corasick\",\n \"base64\",\n \"chrono\",\n \"hifijson\",\n \"jaq-core\",\n \"jaq-json\",\n \"libm\",\n \"log\",\n \"regex-lite\",\n \"serde_json\",\n \"urlencoding\",\n]\n\n[[package]]\nname = \"js-sys\"\nversion = \"0.3.72\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"6a88f1bda2bd75b0452a14784937d796722fdebfe50df998aeb3f0b7603019a9\"\ndependencies = [\n \"wasm-bindgen\",\n]\n\n[[package]]\nname = \"libc\"\nversion = \"0.2.164\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"433bfe06b8c75da9b2e3fbea6e5329ff87748f0b144ef75306e674c3f6f7c13f\"\n\n[[package]]\nname = \"libm\"\nversion = \"0.2.11\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8355be11b20d696c8f18f6cc018c4e372165b1fa8126cef092399c9951984ffa\"\n\n[[package]]\nname = \"libmimalloc-sys\"\nversion = \"0.1.39\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"23aa6811d3bd4deb8a84dde645f943476d13b248d818edcf8ce0b2f37f036b44\"\ndependencies = [\n \"cc\",\n \"libc\",\n]\n\n[[package]]\nname = \"log\"\nversion = \"0.4.22\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a7a70ba024b9dc04c27ea2f0c0548feb474ec5c54bba33a7f72f873a39d07b24\"\n\n[[package]]\nname = \"memchr\"\nversion = \"2.7.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"78ca9ab1a0babb1e7d5695e3530886289c18cf2f87ec19a575a0abdce112e3a3\"\n\n[[package]]\nname = \"memmap2\"\nversion = \"0.9.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"fd3f7eed9d3848f8b98834af67102b720745c4ec028fcd0aa0239277e7de374f\"\ndependencies = [\n \"libc\",\n]\n\n[[package]]\nname = \"mimalloc\"\nversion = \"0.1.43\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"68914350ae34959d83f732418d51e2427a794055d0b9529f48259ac07af65633\"\ndependencies = [\n \"libmimalloc-sys\",\n]\n\n[[package]]\nname = \"num-traits\"\nversion = \"0.2.19\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"071dfc062690e90b734c0b2273ce72ad0ffa95f0c74596bc250dcfd960262841\"\ndependencies = [\n \"autocfg\",\n]\n\n[[package]]\nname = \"once_cell\"\nversion = \"1.20.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1261fe7e33c73b354eab43b1273a57c8f967d0391e80353e51f764ac02cf6775\"\n\n[[package]]\nname = \"proc-macro2\"\nversion = \"1.0.89\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f139b0662de085916d1fb67d2b4169d1addddda1919e696f3252b740b629986e\"\ndependencies = [\n \"unicode-ident\",\n]\n\n[[package]]\nname = \"quote\"\nversion = \"1.0.37\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b5b9d34b8991d19d98081b46eacdd8eb58c6f2b201139f7c5f643cc155a633af\"\ndependencies = [\n \"proc-macro2\",\n]\n\n[[package]]\nname = \"redox_syscall\"\nversion = \"0.2.16\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"fb5a58c1855b4b6819d59012155603f0b22ad30cad752600aadfcb695265519a\"\ndependencies = [\n \"bitflags\",\n]\n\n[[package]]\nname = \"regex-lite\"\nversion = \"0.1.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"53a49587ad06b26609c52e423de037e7f57f20d53535d66e08c695f347df952a\"\n\n[[package]]\nname = \"remove_dir_all\"\nversion = \"0.5.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3acd125665422973a33ac9d3dd2df85edad0f4ae9b00dafb1a05e43a9f5ef8e7\"\ndependencies = [\n \"winapi\",\n]\n\n[[package]]\nname = \"ryu\"\nversion = \"1.0.18\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f3cb5ba0dc43242ce17de99c180e96db90b235b8a9fdc9543c96d2209116bd9f\"\n\n[[package]]\nname = \"serde\"\nversion = \"1.0.215\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"6513c1ad0b11a9376da888e3e0baa0077f1aed55c17f50e7b2397136129fb88f\"\ndependencies = [\n \"serde_derive\",\n]\n\n[[package]]\nname = \"serde_derive\"\nversion = \"1.0.215\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ad1e866f866923f252f05c889987993144fb74e722403468a4ebd70c3cd756c0\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn\",\n]\n\n[[package]]\nname = \"serde_json\"\nversion = \"1.0.133\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"c7fceb2473b9166b2294ef05efcb65a3db80803f0b03ef86a5fc88a2b85ee377\"\ndependencies = [\n \"itoa\",\n \"memchr\",\n \"ryu\",\n \"serde\",\n]\n\n[[package]]\nname = \"shlex\"\nversion = \"1.3.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"0fda2ff0d084019ba4d7c6f371c95d8fd75ce3524c3cb8fb653a3023f6323e64\"\n\n[[package]]\nname = \"syn\"\nversion = \"2.0.87\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"25aa4ce346d03a6dcd68dd8b4010bcb74e54e62c90c573f394c46eae99aba32d\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"unicode-ident\",\n]\n\n[[package]]\nname = \"tempfile\"\nversion = \"3.3.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"5cdb1ef4eaeeaddc8fbd371e5017057064af0911902ef36b39801f67cc6d79e4\"\ndependencies = [\n \"cfg-if\",\n \"fastrand\",\n \"libc\",\n \"redox_syscall\",\n \"remove_dir_all\",\n \"winapi\",\n]\n\n[[package]]\nname = \"typed-arena\"\nversion = \"2.0.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"6af6ae20167a9ece4bcb41af5b80f8a1f1df981f6391189ce00fd257af04126a\"\n\n[[package]]\nname = \"unicode-ident\"\nversion = \"1.0.13\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e91b56cd4cadaeb79bbf1a5645f6b4f8dc5bde8834ad5894a8db35fda9efa1fe\"\n\n[[package]]\nname = \"unicode-width\"\nversion = \"0.1.13\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"0336d538f7abc86d282a4189614dfaa90810dfc2c6f6427eaf88e16311dd225d\"\n\n[[package]]\nname = \"urlencoding\"\nversion = \"2.1.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"daf8dba3b7eb870caf1ddeed7bc9d2a049f3cfdfae7cb521b087cc33ae4c49da\"\n\n[[package]]\nname = \"wasi\"\nversion = \"0.11.0+wasi-snapshot-preview1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"9c8d87e72b64a3b4db28d11ce29237c246188f4f51057d65a7eab63b7987e423\"\n\n[[package]]\nname = \"wasm-bindgen\"\nversion = \"0.2.95\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"128d1e363af62632b8eb57219c8fd7877144af57558fb2ef0368d0087bddeb2e\"\ndependencies = [\n \"cfg-if\",\n \"once_cell\",\n \"wasm-bindgen-macro\",\n]\n\n[[package]]\nname = \"wasm-bindgen-backend\"\nversion = \"0.2.95\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"cb6dd4d3ca0ddffd1dd1c9c04f94b868c37ff5fac97c30b97cff2d74fce3a358\"\ndependencies = [\n \"bumpalo\",\n \"log\",\n \"once_cell\",\n \"proc-macro2\",\n \"quote\",\n \"syn\",\n \"wasm-bindgen-shared\",\n]\n\n[[package]]\nname = \"wasm-bindgen-macro\"\nversion = \"0.2.95\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e79384be7f8f5a9dd5d7167216f022090cf1f9ec128e6e6a482a2cb5c5422c56\"\ndependencies = [\n \"quote\",\n \"wasm-bindgen-macro-support\",\n]\n\n[[package]]\nname = \"wasm-bindgen-macro-support\"\nversion = \"0.2.95\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"26c6ab57572f7a24a4985830b120de1594465e5d500f24afe89e16b4e833ef68\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn\",\n \"wasm-bindgen-backend\",\n \"wasm-bindgen-shared\",\n]\n\n[[package]]\nname = \"wasm-bindgen-shared\"\nversion = \"0.2.95\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"65fc09f10666a9f147042251e0dda9c18f166ff7de300607007e96bdebc1068d\"\n\n[[package]]\nname = \"web-sys\"\nversion = \"0.3.72\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f6488b90108c040df0fe62fa815cbdee25124641df01814dd7282749234c6112\"\ndependencies = [\n \"js-sys\",\n \"wasm-bindgen\",\n]\n\n[[package]]\nname = \"winapi\"\nversion = \"0.3.9\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"5c839a674fcd7a98952e593242ea400abe93992746761e38641405d28b00f419\"\ndependencies = [\n \"winapi-i686-pc-windows-gnu\",\n \"winapi-x86_64-pc-windows-gnu\",\n]\n\n[[package]]\nname = \"winapi-i686-pc-windows-gnu\"\nversion = \"0.4.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ac3b87c63620426dd9b991e5ce0329eff545bccbbb34f3be09ff6fb6ab51b7b6\"\n\n[[package]]\nname = \"winapi-x86_64-pc-windows-gnu\"\nversion = \"0.4.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"712e227841d057c1ee1cd2fb22fa7e5a5461ae8e48fa2ca79ec42cfc1931183f\"\n\n[[package]]\nname = \"yansi\"\nversion = \"1.0.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"cfe53a6657fd280eaa890a3bc59152892ffa3e30101319d168b781ed6529b049\"\n"
        },
        {
          "name": "Cargo.toml",
          "type": "blob",
          "size": 0.162109375,
          "content": "[workspace]\nmembers = [\n    \"jaq-core\",\n    \"jaq-std\",\n    \"jaq-json\",\n    \"jaq\",\n    \"jaq-play\",\n]\n\nresolver = \"2\"\n\n[profile.release]\nstrip = true\ncodegen-units = 1\n"
        },
        {
          "name": "LICENSE-MIT",
          "type": "blob",
          "size": 0.9990234375,
          "content": "Permission is hereby granted, free of charge, to any\nperson obtaining a copy of this software and associated\ndocumentation files (the \"Software\"), to deal in the\nSoftware without restriction, including without\nlimitation the rights to use, copy, modify, merge,\npublish, distribute, sublicense, and/or sell copies of\nthe Software, and to permit persons to whom the Software\nis furnished to do so, subject to the following\nconditions:\n\nThe above copyright notice and this permission notice\nshall be included in all copies or substantial portions\nof the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF\nANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED\nTO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A\nPARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT\nSHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\nOF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR\nIN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\nDEALINGS IN THE SOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 20.4404296875,
          "content": "# jaq\n\n![Build status](https://github.com/01mf02/jaq/workflows/Rust/badge.svg)\n[![Crates.io](https://img.shields.io/crates/v/jaq-core.svg)](https://crates.io/crates/jaq-core)\n[![Documentation](https://docs.rs/jaq-core/badge.svg)](https://docs.rs/jaq-core)\n[![Rust 1.65+](https://img.shields.io/badge/rust-1.65+-orange.svg)](https://www.rust-lang.org)\n\njaq (pronounced /ʒaːk/, like *Jacques*[^jacques]) is a clone of the JSON data processing tool [jq].\njaq aims to support a large subset of jq's syntax and operations.\n\nYou can try jaq online on the [jaq playground](https://gedenkt.at/jaq/).\nInstructions for the playground can be found [here](jaq-play/).\n\njaq focuses on three goals:\n\n* **Correctness**:\n  jaq aims to provide a more correct and predictable implementation of jq,\n  while preserving compatibility with jq in most cases.\n* **Performance**:\n  I created jaq originally because I was bothered by\n  [the long start-up time of jq 1.6](https://github.com/jqlang/jq/issues/1411),\n  which amounts to about 50ms on my machine.\n  This can be particularly seen when processing a large number of small files.\n  Although the startup time has been vastly improved in jq 1.7,\n  jaq is still faster than jq on many other [benchmarks](#performance).\n* **Simplicity**:\n  jaq aims to have a simple and small implementation, in order to\n  reduce the potential for bugs and to\n  facilitate contributions.\n\nI drew inspiration from another Rust program, namely [jql].\nHowever, unlike jql, jaq aims to closely imitate jq's syntax and semantics.\nThis should allow users proficient in jq to easily use jaq.\n\n[jq]: https://jqlang.github.io/jq/\n[jql]: https://github.com/yamafaktory/jql\n\n[^jacques]: I wanted to create a tool that should be discreet and obliging, like a good waiter.\n  And when I think of a typical name for a (French) waiter, to my mind comes \"Jacques\".\n  Later, I found out about the old French word *jacquet*, meaning \"squirrel\",\n  which makes for a nice *ex post* inspiration for the name.\n\n\n\n# Installation\n\n\n## Binaries\n\nYou can download binaries for Linux, Mac, and Windows on the [releases page](https://github.com/01mf02/jaq/releases).\nOn a Linux system, you can download it using the following commands:\n\n    $ curl -fsSL https://github.com/01mf02/jaq/releases/latest/download/jaq-$(uname -m)-unknown-linux-musl -o jaq && chmod +x jaq\n    $ upx -d jaq # decompress binary for shorter startup time (optional step)\n\nYou may also install jaq using [homebrew](https://formulae.brew.sh/formula/jaq) on macOS or Linux:\n\n    $ brew install jaq\n    $ brew install --HEAD jaq # latest development version\n\nOr using [scoop](https://scoop.sh/#/apps?q=jaq&id=59dbaf2bb778402cd8ec50d0ad4cdae8a6814fc3) on Windows:\n\n    $ scoop install main/jaq\n\n\n## From Source\n\nTo compile jaq, you need a Rust toolchain.\nSee <https://rustup.rs/> for instructions.\n(Note that Rust compilers shipped with Linux distributions\nmay be too outdated to compile jaq.)\n\nAny of the following commands install jaq:\n\n    $ cargo install --locked jaq\n    $ cargo install --locked --git https://github.com/01mf02/jaq # latest development version\n\nOn my system, both commands place the executable at `~/.cargo/bin/jaq`.\n\nIf you have cloned this repository, you can also build jaq by executing one of the commands in the cloned repository:\n\n    $ cargo build --release # places binary into target/release/jaq\n    $ cargo install --locked --path jaq # installs binary\n\njaq should work on any system supported by Rust.\nIf it does not, please file an issue.\n\n\n\n# Examples\n\nThe following examples should give an impression of what jaq can currently do.\nYou should obtain the same outputs by replacing jaq with jq.\nIf not, your filing an issue would be appreciated. :)\nThe syntax is documented in the [jq manual].\n\n[jq manual]: https://jqlang.github.io/jq/manual/v1.6/\n\nAccess a field:\n\n    $ echo '{\"a\": 1, \"b\": 2}' | jaq '.a'\n    1\n\nAdd values:\n\n    $ echo '{\"a\": 1, \"b\": 2}' | jaq 'add'\n    3\n\nConstruct an array from an object in two ways and show that they are equal:\n\n    $ echo '{\"a\": 1, \"b\": 2}' | jaq '[.a, .b] == [.[]]'\n    true\n\nApply a filter to all elements of an array and filter the results:\n\n    $ echo '[0, 1, 2, 3]' | jaq 'map(.*2) | [.[] | select(. < 5)]'\n    [0, 2, 4]\n\nRead (slurp) input values into an array and get the average of its elements:\n\n    $ echo '1 2 3 4' | jaq -s 'add / length'\n    2.5\n\nRepeatedly apply a filter to itself and output the intermediate results:\n\n    $ echo '0' | jaq '[recurse(.+1; . < 3)]'\n    [0, 1, 2]\n\nLazily fold over inputs and output intermediate results:\n\n    $ seq 1000 | jaq -n 'foreach inputs as $x (0; . + $x)'\n    1 3 6 10 15 [...]\n\n\n\n# Performance\n\nThe following evaluation consists of several benchmarks that\nallow comparing the performance of jaq, jq, and [gojq].\nThe `empty` benchmark runs `n` times the filter `empty` with null input,\nserving to measure the startup time.\nThe `bf-fib` benchmark runs a Brainfuck interpreter written in jq,\ninterpreting a Brainfuck script that produces `n` Fibonacci numbers.\nThe other benchmarks evaluate various filters with `n` as input;\nsee [`bench.sh`](bench.sh) for details.\n\nI generated the benchmark data with\n`bench.sh target/release/jaq jq-1.7.1 gojq-0.12.16 | tee bench.json`\non a Linux system with an AMD Ryzen 5 5500U.[^binaries]\nI then processed the results with a \"one-liner\" (stretching the term and the line a bit):\n\n    jq -rs '.[] | \"|`\\(.name)`|\\(.n)|\" + ([.time[] | min | (.*1000|round)? // \"N/A\"] | min as $total_min | map(if . == $total_min then \"**\\(.)**\" else \"\\(.)\" end) | join(\"|\"))' bench.json\n\n(Of course, you can also use jaq here instead of jq.)\nFinally, I concatenated the table header with the output and piped it through `pandoc -t gfm`.\n\n[^binaries]: The binaries for jq-1.7.1 and gojq-0.12.16 were retrieved from their GitHub release pages.\n\nTable: Evaluation results in milliseconds (\"N/A\" if error or more than 10 seconds).\n\n| Benchmark       |       n | jaq-2.0 | jq-1.7.1 | gojq-0.12.16 |\n|-----------------|--------:|--------:|---------:|-------------:|\n| `empty`         |     512 |     300 |      500 |      **230** |\n| `bf-fib`        |      13 | **440** |     1230 |          570 |\n| `defs`          |  100000 |  **60** |      N/A |         1020 |\n| `upto`          |    8192 |   **0** |      470 |          460 |\n| `reduce-update` |   16384 |  **10** |      550 |         1340 |\n| `reverse`       | 1048576 |  **40** |      690 |          280 |\n| `sort`          | 1048576 | **110** |      530 |          630 |\n| `group-by`      | 1048576 | **500** |     1920 |         1500 |\n| `min-max`       | 1048576 | **210** |      320 |          260 |\n| `add`           | 1048576 | **460** |      630 |         1300 |\n| `kv`            |  131072 | **110** |      150 |          230 |\n| `kv-update`     |  131072 | **130** |      540 |          470 |\n| `kv-entries`    |  131072 | **570** |     1150 |          730 |\n| `ex-implode`    | 1048576 | **520** |     1110 |          580 |\n| `reduce`        | 1048576 | **770** |      890 |          N/A |\n| `try-catch`     | 1048576 | **290** |      320 |          370 |\n| `repeat`        | 1048576 | **140** |      840 |          530 |\n| `from`          | 1048576 | **320** |     1010 |          590 |\n| `last`          | 1048576 |  **40** |      240 |          110 |\n| `pyramid`       |  524288 | **340** |      350 |          480 |\n| `tree-contains` |      23 |  **70** |      610 |          210 |\n| `tree-flatten`  |      17 |     780 |      360 |       **10** |\n| `tree-update`   |      17 | **700** |      970 |         1340 |\n| `tree-paths`    |      17 |     440 |  **280** |          870 |\n| `to-fromjson`   |   65536 |  **40** |      360 |          110 |\n| `ack`           |       7 | **520** |      710 |         1220 |\n| `range-prop`    |     128 |     360 |      320 |      **230** |\n| `cumsum`        | 1048576 | **280** |      380 |          450 |\n| `cumsum-xy`     | 1048576 | **430** |      470 |          710 |\n\nThe results show that\njaq-2.0 is fastest on 25 benchmarks, whereas\njq-1.7.1 is fastest on 1 benchmark and\ngojq-0.12.16 is fastest on 3 benchmarks.\ngojq is much faster on `tree-flatten` because it implements the filter `flatten` natively instead of by definition.\n\n[gojq]: https://github.com/itchyny/gojq\n\n\n\n# Features\n\nHere is an overview that summarises:\n\n* [x] features already implemented, and\n* [ ] features not yet implemented.\n\n[Contributions to extend jaq are highly welcome.](#contributing)\n\n\n## Basics\n\n- [x] Identity (`.`)\n- [x] Recursion (`..`)\n- [x] Basic data types (null, boolean, number, string, array, object)\n- [x] if-then-else (`if .a < .b then .a else .b end`)\n- [x] Folding (`reduce .[] as $x (0; . + $x)`, `foreach .[] as $x (0; . + $x; . + .)`)\n- [x] Error handling (`try ... catch ...`)\n- [x] Breaking (`label $x | f | ., break $x`)\n- [x] String interpolation (`\"The successor of \\(.) is \\(.+1).\"`)\n- [x] Format strings (`@json`, `@text`, `@csv`, `@tsv`, `@html`, `@sh`, `@base64`, `@base64d`)\n\n\n## Paths\n\n- [x] Indexing of arrays/objects (`.[0]`, `.a`, `.[\"a\"]`)\n- [x] Iterating over arrays/objects (`.[]`)\n- [x] Optional indexing/iteration (`.a?`, `.[]?`)\n- [x] Array slices (`.[3:7]`, `.[0:-1]`)\n- [x] String slices\n\n\n## Operators\n\n- [x] Composition (`|`)\n- [x] Variable binding (`. as $x | $x`)\n- [x] Pattern  binding (`. as {a: [$x, {(\"b\", \"c\"): $y, $z}]} | $x, $y, $z`)\n- [x] Concatenation (`,`)\n- [x] Plain assignment (`=`)\n- [x] Update assignment (`|=`)\n- [x] Arithmetic update assignment (`+=`, `-=`, ...)\n- [x] Alternation (`//`)\n- [x] Logic (`or`, `and`)\n- [x] Equality and comparison (`.a == .b`, `.a < .b`)\n- [x] Arithmetic (`+`, `-`, `*`, `/`, `%`)\n- [x] Negation (`-`)\n- [x] Error suppression (`?`)\n\n\n## Definitions\n\n- [x] Basic definitions (`def map(f): [.[] | f];`)\n- [x] Recursive definitions (`def r: r; r`)\n\n\n## Core filters\n\n- [x] Empty (`empty`)\n- [x] Errors (`error`)\n- [x] Input (`inputs`)\n- [x] Length (`length`, `utf8bytelength`)\n- [x] Rounding (`floor`, `round`, `ceil`)\n- [x] String <-> JSON (`fromjson`, `tojson`)\n- [x] String <-> integers (`explode`, `implode`)\n- [x] String normalisation (`ascii_downcase`, `ascii_upcase`)\n- [x] String prefix/postfix (`startswith`, `endswith`, `ltrimstr`, `rtrimstr`)\n- [x] String whitespace trimming (`trim`, `ltrim`, `rtrim`)\n- [x] String splitting (`split(\"foo\")`)\n- [x] Array filters (`reverse`, `sort`, `sort_by(-.)`, `group_by`, `min_by`, `max_by`)\n- [x] Stream consumers (`first`, `last`, `range`, `fold`)\n- [x] Stream generators (`range`, `recurse`)\n- [x] Time (`now`, `fromdateiso8601`, `todateiso8601`)\n- [x] More numeric filters (`sqrt`, `sin`, `log`, `pow`, ...) ([list of numeric filters](#numeric-filters))\n- [ ] More time filters (`strptime`, `strftime`, `strflocaltime`, `mktime`, `gmtime`, and `localtime`)\n\n## Standard filters\n\nThese filters are defined via more basic filters.\nTheir definitions are at [`std.jq`](jaq-std/src/std.jq).\n\n- [x] Undefined (`null`)\n- [x] Booleans (`true`, `false`, `not`)\n- [x] Special numbers (`nan`, `infinite`, `isnan`, `isinfinite`, `isfinite`, `isnormal`)\n- [x] Type (`type`)\n- [x] Filtering (`select(. >= 0)`)\n- [x] Selection (`values`, `nulls`, `booleans`, `numbers`, `strings`, `arrays`, `objects`, `iterables`, `scalars`)\n- [x] Conversion (`tostring`, `tonumber`)\n- [x] Iterable filters (`map(.+1)`, `map_values(.+1)`, `add`, `join(\"a\")`)\n- [x] Array filters (`transpose`, `first`, `last`, `nth(10)`, `flatten`, `min`, `max`)\n- [x] Object-array conversion (`to_entries`, `from_entries`, `with_entries`)\n- [x] Universal/existential (`all`, `any`)\n- [x] Recursion (`walk`)\n- [x] I/O (`input`)\n- [x] Regular expressions (`test`, `scan`, `match`, `capture`, `splits`, `sub`, `gsub`)\n- [x] Time (`fromdate`, `todate`)\n\n## Numeric filters\n\njaq imports many filters from [libm](https://crates.io/crates/libm)\nand follows their type signature.\n\n<details><summary>Full list of numeric filters defined in jaq</summary>\n\nZero-argument filters:\n\n- [x] `acos`\n- [x] `acosh`\n- [x] `asin`\n- [x] `asinh`\n- [x] `atan`\n- [x] `atanh`\n- [x] `cbrt`\n- [x] `cos`\n- [x] `cosh`\n- [x] `erf`\n- [x] `erfc`\n- [x] `exp`\n- [x] `exp10`\n- [x] `exp2`\n- [x] `expm1`\n- [x] `fabs`\n- [x] `frexp`, which returns pairs of (float, integer).\n- [x] `gamma`\n- [x] `ilogb`, which returns integers.\n- [x] `j0`\n- [x] `j1`\n- [x] `lgamma`\n- [x] `log`\n- [x] `log10`\n- [x] `log1p`\n- [x] `log2`\n- [x] `logb`\n- [x] `modf`, which returns pairs of (float, float).\n- [x] `nearbyint`\n- [x] `pow10`\n- [x] `rint`\n- [x] `significand`\n- [x] `sin`\n- [x] `sinh`\n- [x] `sqrt`\n- [x] `tan`\n- [x] `tanh`\n- [x] `tgamma`\n- [x] `trunc`\n- [x] `y0`\n- [x] `y1`\n\nTwo-argument filters that ignore `.`:\n\n- [x] `atan2`\n- [x] `copysign`\n- [x] `drem`\n- [x] `fdim`\n- [x] `fmax`\n- [x] `fmin`\n- [x] `fmod`\n- [x] `hypot`\n- [x] `jn`, which takes an integer as first argument.\n- [x] `ldexp`, which takes an integer as second argument.\n- [x] `nextafter`\n- [x] `nexttoward`\n- [x] `pow`\n- [x] `remainder`\n- [x] `scalb`\n- [x] `scalbln`, which takes as integer as second argument.\n- [x] `yn`, which takes an integer as first argument.\n\nThree-argument filters that ignore `.`:\n\n- [x] `fma`\n\n</details>\n\n## Modules\n\n- [x] `include \"path\";`\n- [x] `import \"path\" as mod;`\n- [x] `import \"path\" as $data;`\n\n## Advanced features\n\njaq currently does *not* aim to support several features of jq, such as:\n\n- SQL-style operators\n- Streaming\n\n\n\n# Differences between jq and jaq\n\n\n## Numbers\n\njq uses 64-bit floating-point numbers (floats) for any number.\nBy contrast, jaq interprets\nnumbers such as 0   or -42 as machine-sized integers and\nnumbers such as 0.0 or 3e8 as 64-bit floats.\nMany operations in jaq, such as array indexing,\ncheck whether the passed numbers are indeed integer.\nThe motivation behind this is to avoid\nrounding errors that may silently lead to wrong results.\nFor example:\n\n    $ jq  -n '[0, 1, 2] | .[1.0000000000000001]'\n    1\n    $ jaq -n '[0, 1, 2] | .[1.0000000000000001]'\n    Error: cannot use 1.0 as integer\n    $ jaq -n '[0, 1, 2] | .[1]'\n    1\n\nThe rules of jaq are:\n\n* The sum, difference, product, and remainder of two integers is integer.\n* Any other operation between two numbers yields a float.\n\nExamples:\n\n    $ jaq -n '1 + 2'\n    3\n    $ jaq -n '10 / 2'\n    5.0\n    $ jaq -n '1.0 + 2'\n    3.0\n\nYou can convert an integer to a floating-point number e.g.\nby adding 0.0, by multiplying with 1.0, or by dividing with 1.\nYou can convert a floating-point number to an integer by\n`round`, `floor`, or `ceil`:\n\n    $ jaq -n '1.2 | [floor, round, ceil]'\n    [1, 1, 2]\n\n### NaN and infinity\n\nIn jq, division by 0 yields an error, whereas\nin jaq, `n / 0` yields `nan` if `n == 0`, `infinite` if `n > 0`, and `-infinite` if `n < 0`.\njaq's behaviour is closer to the IEEE standard for floating-point arithmetic (IEEE 754).\n\n\n## Assignments\n\nLike jq, jaq allows for assignments of the form `p |= f`.\nHowever, jaq interprets these assignments differently.\nFortunately, in most cases, the result is the same.\n\nIn jq, an assignment `p |= f` first constructs paths to all values that match `p`.\n*Only then*, it applies the filter `f` to these values.\n\nIn jaq, an assignment `p |= f` applies `f` *immediately* to any value matching `p`.\nUnlike in jq, assignment does not explicitly construct paths.\n\njaq's implementation of assignment likely yields higher performance,\nbecause it does not construct paths.\nFurthermore, this allows jaq to use multiple outputs of the right-hand side, whereas\njq uses only the first.\nFor example, `0 | (., .) |= (., .+1)` yields `0 1 1 2` in jaq,\nwhereas it yields only `0` in jq.\nHowever, `{a: 1} | .a |= (2, 3)` yields `{\"a\": 2}` in both jaq and jq,\nbecause an object can only associate a single value with any given key,\nso we cannot use multiple outputs in a meaningful way here.\n\nBecause jaq does not construct paths,\nit does not allow some filters on the left-hand side of assignments,\nfor example `first`, `last`, `limit`:\nFor example, `[1, 2, 3] | first(.[]) |= .-1`\nyields `[0, 2, 3]` in jq, but is invalid in jaq.\nSimilarly, `[1, 2, 3] | limit(2; .[]) |= .-1`\nyields `[0, 1, 3]` in jq, but is invalid in jaq.\n(Inconsequentially, jq also does not allow for `last`.)\n\n\n## Folding\n\njq and jaq provide filters\n`reduce xs as $x (init; update)`,\n`foreach xs as $x (init; update)`, and\n`foreach xs as $x (init; update; project)`, where\n`foreach xs as $x (init; update)` is equivalent to\n`foreach xs as $x (init; update; .)`.\n\nIn jaq, the output of these filters is defined very simply:\nAssuming that `xs` evaluates to `x0`, `x1`, ..., `xn`,\n`reduce xs as $x (init; update)` evaluates to\n\n~~~\ninit\n| x0 as $x | update\n| ...\n| xn as $x | update\n~~~\n\nand `foreach xs as $x (init; update; project)` evaluates to\n\n~~~ text\ninit |\n( x0 as $x | update | project,\n( ...\n( xn as $x | update | project,\n( empty )...)\n~~~\n\nThe interpretation of `reduce`/`foreach` in jaq has the following advantages over jq:\n\n* It deals very naturally with filters that yield multiple outputs.\n  In contrast, jq discriminates outputs of `f`,\n  because it recurses only on the last of them,\n  although it outputs all of them.\n  <details><summary>Example</summary>\n\n  `foreach (5, 10) as $x (1; .+$x, -.)` yields\n  `6, -1, 9, 1` in jq, whereas it yields\n  `6, 16, -6, -1, 9, 1` in jaq.\n  We can see that both jq and jaq yield the values `6` and `-1`\n  resulting from the first iteration (where `$x` is 5), namely\n  `1 | 5 as $x | (.+$x, -.)`.\n  However, jq performs the second iteration (where `$x` is 10)\n  *only on the last value* returned from the first iteration, namely `-1`,\n  yielding the values `9` and `1` resulting from\n  `-1 | 10 as $x | (.+$x, -.)`.\n  jaq yields these values too, but it also performs the second iteration\n  on all other values returned from the first iteration, namely `6`,\n  yielding the values `16` and `-6` that result from\n  ` 6 | 10 as $x | (.+$x, -.)`.\n\n  </details>\n* It makes the implementation of `reduce` and `foreach`\n  special cases of the same code, reducing the potential for bugs.\n\n\n## Miscellaneous\n\n* Slurping: When files are slurped in (via the `-s` / `--slurp` option),\n  jq combines the inputs of all files into one single array, whereas\n  jaq yields an array for every file.\n  This is motivated by the `-i` / `--in-place` option,\n  which could not work with the behaviour implemented by jq.\n  The behaviour of jq can be approximated in jaq;\n  for example, to achieve the output of\n  `jq -s . a b`, you may use\n  `jaq -s . <(cat a b)`.\n* Cartesian products:\n  In jq, `[(1,2) * (3,4)]` yields `[3, 6, 4, 8]`, whereas\n  `[{a: (1,2), b: (3,4)} | .a * .b]` yields `[3, 4, 6, 8]`.\n  jaq yields `[3, 4, 6, 8]` in both cases.\n* Indexing `null`:\n  In jq, when given `null` input, `.[\"a\"]` and `.[0]` yield `null`, but `.[]` yields an error.\n  jaq yields an error in all cases to prevent accidental indexing of `null` values.\n  To obtain the same behaviour in jq and jaq, you can use\n  `.[\"a\"]? // null` or `.[0]? // null` instead.\n* List updating:\n  In jq, `[0, 1] | .[3] = 3` yields `[0, 1, null, 3]`; that is,\n  jq fills up the list with `null`s if we update beyond its size.\n  In contrast, jaq fails with an out-of-bounds error in such a case.\n* Input reading:\n  When there is no more input value left,\n  in jq, `input` yields an error, whereas in jaq, it yields no output value.\n* Joining:\n  When given an array `[x0, x1, ..., xn]`,\n  in jq, `join(x)` converts all elements of the input array to strings and intersperses them with `x`, whereas\n  in jaq, `join(x)` simply calculates `x0 + x + x1 + x + ... + xn`.\n  When all elements of the input array and `x` are strings, jq and jaq yield the same output.\n\n\n\n# Contributing\n\nContributions to jaq are welcome.\nPlease make sure that after your change, `cargo test` runs successfully.\n\n\n\n# Acknowledgements\n\n[This project](https://nlnet.nl/project/jaq/) was funded through the\n<a href=\"https://nlnet.nl/entrust\">NGI0 Entrust</a> Fund, a fund established by\n<a href=\"https://nlnet.nl\">NLnet</a> with financial support from the\nEuropean Commission's <a href=\"https://ngi.eu\">Next Generation Internet</a>\nprogramme, under the aegis of <a href=\"https://commission.europa.eu/about-european-commission/departments-and-executive-agencies/communications-networks-content-and-technology_en\">DG Communications Networks, Content and Technology</a> under grant agreement N<sup>o</sup> 101069594.\n\njaq has also profited from:\n\n* [serde_json] to read and [colored_json] to output JSON,\n* [chumsky] to parse and [ariadne] to pretty-print parse errors,\n* [mimalloc] to boost the performance of memory allocation, and\n* the Rust standard library, in particular its awesome [Iterator],\n  which builds the rock-solid base of jaq's filter execution\n\n[serde_json]: https://docs.rs/serde_json/\n[colored_json]: https://docs.rs/colored_json/\n[chumsky]: https://docs.rs/chumsky/\n[ariadne]: https://docs.rs/ariadne/\n[mimalloc]: https://docs.rs/mimalloc/\n[Iterator]: https://doc.rust-lang.org/std/iter/trait.Iterator.html\n"
        },
        {
          "name": "bench.sh",
          "type": "blob",
          "size": 1.3583984375,
          "content": "#!/bin/bash\n#\n# Benchmark jq implementations passed as arguments\n#\n# Example usage:\n#\n#     ./bench.sh target/release/jaq jq\n\nTIME='timeout 10 /usr/bin/time -f %U'\n\necho -n '{\"name\": \"empty\", \"n\": 512, \"time\": {'\nfor j in $@; do\n  t=$($TIME bash -c \"for n in {1..512}; do $j -n 'empty'; done\" 2>&1)\n  [ $j != $1 ] && echo -n ', '\n  echo -n '\"'$j'\": ['$t']'\ndone\necho '}}'\n\necho -n '{\"name\": \"bf-fib\", \"n\": 13, \"time\": {'\nfor j in $@; do\n  t=$($TIME $j -sRrf examples/bf.jq examples/fib.bf 2>&1 > /dev/null)\n  [ $j != $1 ] && echo -n ', '\n  echo -n '\"'$j'\": ['$t']'\ndone\necho '}}'\n\necho -n '{\"name\": \"defs\", \"n\": 100000, \"time\": {'\nfor j in $@; do\n  t=$($TIME $j -n -f <(for i in `seq 100000`; do echo \"def a: 0;\"; done; echo empty) 2>&1 > /dev/null)\n  [ $? != 0 ] && t=\"\" # on error\n  [ $j != $1 ] && echo -n ', '\n  echo -n '\"'$j'\": ['$t']'\ndone\necho '}}'\n\nwhile read -r line; do\n  b=`echo $line | $1 -r .name`\n  n=`echo $line | $1 .n`\n  echo -n '{\"name\": \"'$b'\", \"n\": '$n', \"time\": {'\n  for j in $@; do\n    [ $j != $1 ] && echo -n ', '\n    echo -n '\"'$j'\": ['\n    for i in `seq 3`; do\n      t=$(echo $n | $TIME $j \"$(cat examples/$b.jq) | length\" 2>&1 > /dev/null)\n      [ -z \"$t\" ] && break # terminate on timeout\n      [ $i -ne 1 ] && echo -n ', '\n      echo -n $t\n    done\n    echo -n ']'\n  done\n  echo '}}'\ndone <examples/benches.json\n# 2^16 =   65536\n# 2^17 =  131072\n# 2^20 = 1048576\n"
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "jaq-core",
          "type": "tree",
          "content": null
        },
        {
          "name": "jaq-json",
          "type": "tree",
          "content": null
        },
        {
          "name": "jaq-play",
          "type": "tree",
          "content": null
        },
        {
          "name": "jaq-std",
          "type": "tree",
          "content": null
        },
        {
          "name": "jaq",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}