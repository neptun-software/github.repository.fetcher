{
  "metadata": {
    "timestamp": 1736709263171,
    "page": 600,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjYwMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "pyrossh/rust-embed",
      "stars": 1716,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.0322265625,
          "content": "target\nCargo.lock\n\n.vscode\n.idea\n"
        },
        {
          "name": ".pants-ignore",
          "type": "blob",
          "size": 0.1220703125,
          "content": "{\n  \"ignore\": [{ \"id\": \"sonatype-2021-4646\", \"reason\": \"We are handling it this case. Sonatype doesn't recognize that.\" }]\n}\n"
        },
        {
          "name": "Cargo.toml",
          "type": "blob",
          "size": 3.2333984375,
          "content": "[package]\nname = \"rust-embed\"\nversion = \"8.5.0\"\ndescription = \"Rust Custom Derive Macro which loads files into the rust binary at compile time during release and loads the file from the fs during dev\"\nreadme = \"readme.md\"\ndocumentation = \"https://docs.rs/rust-embed\"\nrepository = \"https://github.com/pyros2097/rust-embed\"\nlicense = \"MIT\"\nkeywords = [\"http\", \"rocket\", \"static\", \"web\", \"server\"]\ncategories = [\"web-programming\", \"filesystem\"]\nauthors = [\"pyros2097 <pyros2097@gmail.com>\"]\nedition = \"2018\"\nrust-version = \"1.70.0\"\n\n[[example]]\nname = \"warp\"\npath = \"examples/warp.rs\"\nrequired-features = [\"warp-ex\"]\n\n[[example]]\nname = \"actix\"\npath = \"examples/actix.rs\"\nrequired-features = [\"actix\"]\n\n[[example]]\nname = \"rocket\"\npath = \"examples/rocket.rs\"\nrequired-features = [\"rocket\"]\n\n[[example]]\nname = \"axum\"\npath = \"examples/axum.rs\"\nrequired-features = [\"axum-ex\"]\n\n[[example]]\nname = \"axum-spa\"\npath = \"examples/axum-spa/main.rs\"\nrequired-features = [\"axum-ex\"]\n\n[[example]]\nname = \"poem\"\npath = \"examples/poem.rs\"\nrequired-features = [\"poem-ex\"]\n\n[[example]]\nname = \"salvo\"\npath = \"examples/salvo.rs\"\nrequired-features = [\"salvo-ex\"]\n\n[[test]]\nname = \"interpolated_path\"\npath = \"tests/interpolated_path.rs\"\nrequired-features = [\"interpolate-folder-path\"]\n\n[[test]]\nname = \"include_exclude\"\npath = \"tests/include_exclude.rs\"\nrequired-features = [\"include-exclude\"]\n\n[[test]]\nname = \"mime_guess\"\npath = \"tests/mime_guess.rs\"\nrequired-features = [\"mime-guess\"]\n\n[dependencies]\nwalkdir = \"2.3.2\"\nrust-embed-impl = { version = \"8.4.0\", path = \"impl\"}\nrust-embed-utils = { version = \"8.4.0\", path = \"utils\"}\n\ninclude-flate = { version = \"0.3\", optional = true }\nactix-web = { version = \"4\", optional = true }\nmime_guess = { version = \"2.0.5\", optional = true }\nhex = { version = \"0.4.3\", optional = true }\ntokio = { version = \"1.0\", optional = true, features = [\"macros\", \"rt-multi-thread\"] }\nwarp = { version = \"0.3\", default-features = false, optional = true }\nrocket = { version = \"0.5.0-rc.2\", default-features = false, optional = true }\naxum = { version = \"0.7\", default-features = false, features = [\"http1\", \"tokio\"], optional = true  }\npoem = { version = \"1.3.30\", default-features = false, features = [\"server\"], optional = true  }\nsalvo = { version = \"0.16\", default-features = false, optional = true  }\n\n[dev-dependencies]\nsha2 = \"0.10\"\n\n[features]\ndebug-embed = [\"rust-embed-impl/debug-embed\", \"rust-embed-utils/debug-embed\"]\ninterpolate-folder-path = [\"rust-embed-impl/interpolate-folder-path\"]\ncompression = [\"rust-embed-impl/compression\", \"include-flate\"]\nmime-guess = [\"rust-embed-impl/mime-guess\", \"rust-embed-utils/mime-guess\"]\ninclude-exclude = [\"rust-embed-impl/include-exclude\", \"rust-embed-utils/include-exclude\"]\nactix = [\"actix-web\", \"mime_guess\"]\nwarp-ex = [\"warp\", \"tokio\", \"mime_guess\"]\naxum-ex = [\"axum\", \"tokio\", \"mime_guess\"]\npoem-ex = [\"poem\", \"tokio\", \"mime_guess\", \"hex\"]\nsalvo-ex = [\"salvo\", \"tokio\", \"mime_guess\", \"hex\"]\n\n\n[badges]\nappveyor = { repository = \"pyros2097/rust-embed\" }\ntravis-ci = { repository = \"pyros2097/rust-embed\" }\nis-it-maintained-issue-resolution = { repository = \"pyros2097/rust-embed\" }\nis-it-maintained-open-issues = { repository = \"pyros2097/rust-embed\" }\nmaintenance = { status = \"passively-maintained\" }\n\n[workspace]\nmembers = [\"impl\", \"utils\"]\n"
        },
        {
          "name": "changelog.md",
          "type": "blob",
          "size": 8.1708984375,
          "content": "# Changelog\n\nAll notable changes to this project will be documented in this file.\n\nThe format is based on [Keep a Changelog](http://keepachangelog.com/en/1.0.0/)\nand this project adheres to [Semantic Versioning](http://semver.org/spec/v2.0.0.html).\n\nThanks to [Mark Drobnak](https://github.com/AzureMarker) for the changelog.\n\n## [8.5.0] - 2024-07-09\n\n- Re-export RustEmbed as Embed [#246](https://github.com/pyrossh/rust-embed/pull/246). Thanks to [krant](https://github.com/krant)\n- Allow users to specify a custom path to the rust_embed crate in generated code[#232](https://github.com/pyrossh/rust-embed/pull/232). Thanks to [Wulf](https://github.com/Wulf)\n- Increase minimum rust-version to v1.7.0.0\n\n## [8.4.0] - 2024-05-11\n\n- Re-export RustEmbed as Embed [#245](https://github.com/pyrossh/rust-embed/pull/245/files). Thanks to [pyrossh](https://github.com/pyrossh)\n- Do not build glob matchers repeatedly when include-exclude feature is enabled [#244](https://github.com/pyrossh/rust-embed/pull/244/files). Thanks to [osiewicz](https://github.com/osiewicz)\n- Add `metadata_only` attribute [#241](https://github.com/pyrossh/rust-embed/pull/241/files). Thanks to [ddfisher](https://github.com/ddfisher)\n- Replace `expect` with a safer alternative that returns `None` instead [#240](https://github.com/pyrossh/rust-embed/pull/240/files). Thanks to [costinsin](https://github.com/costinsin)\n- Eliminate unnecessary `to_path` call [#239](https://github.com/pyrossh/rust-embed/pull/239/files). Thanks to [smoelius](https://github.com/smoelius)\n\n## [8.3.0] - 2024-02-26\n\n- Fix symbolic links in debug builds [#235](https://github.com/pyrossh/rust-embed/pull/235/files). Thanks to [Buckram123](https://github.com/Buckram123)\n\n## [8.2.0] - 2023-12-29\n\n- Fix naming collisions in macros [#230](https://github.com/pyrossh/rust-embed/pull/230/files). Thanks to [hwittenborn](https://github.com/hwittenborn)\n\n## [8.1.0] - 2023-12-08\n\n- Add created to file metadata. [#225](https://github.com/pyrossh/rust-embed/pull/225/files). Thanks to [ngalaiko](https://github.com/ngalaiko)\n\n## [8.0.0] - 2023-08-23\n\n- Store file contents statically and use binary search for lookup. [#217](https://github.com/pyrossh/rust-embed/pull/217/files). Thanks to [osiewicz](https://github.com/osiewicz)\n\n## [6.8.1] - 2023-06-30\n\n- Fix failing compilation under compression feature [#182](https://github.com/pyrossh/rust-embed/issues/182). Thanks to [osiewicz](https://github.com/osiewicz)\n\n## [6.8.0] - 2023-06-30\n\n- Update `include-flate` to v0.2 [#182](https://github.com/pyrossh/rust-embed/issues/182)\n\n## [6.7.0] - 2023-06-09\n\n- Update `syn` to v2.0 [#211](https://github.com/pyrossh/rust-embed/issues/211)\n\n## [6.6.1] - 2023-03-25\n\n- Fix mime-guess feature not working properly [#209](https://github.com/pyrossh/rust-embed/issues/209)\n\n## [6.6.0] - 2023-03-05\n\n- sort_by_file_name() requires walkdir v2.3.2 [#206](https://github.com/pyrossh/rust-embed/issues/206)\n- Add `mime-guess` feature to statically store mimetype [#192](https://github.com/pyrossh/rust-embed/issues/192)\n\n## [6.4.2] - 2022-10-20\n\n- Fail the proc macro if include/exclude are used without the feature [#187](https://github.com/pyrossh/rust-embed/issues/187)\n\n## [6.4.1] - 2022-09-13\n\n- Update sha2 dependency version in utils crate [#186](https://github.com/pyrossh/rust-embed/issues/186)\n\n## [6.4.0] - 2022-04-15\n\n- Order files by filename [#171](https://github.com/pyros2097/rust-embed/issues/171). Thanks to [apognu](https://github.com/apognu)\n\n## [6.3.0] - 2021-11-28\n\n- Fixed a security issue in debug mode [#159](https://github.com/pyros2097/rust-embed/issues/159). Thanks to [5225225](https://github.com/5225225)\n\n## [6.2.0] - 2021-09-01\n\n- Fixed `include-exclude` feature when using cargo v2 resolver\n\n## [6.1.0] - 2021-08-31\n\n- Added `include-exclude` feature by [mbme](https://github.com/mbme)\n\n## [6.0.1] - 2021-08-21\n\n- Added doc comments to macro generated functions\n\n## [6.0.0] - 2021-08-01\n\nIdea came about from [Cody Casterline](https://github.com/NfNitLoop)\n\n- Breaking change the `Asset::get()` api has changed and now returns an `EmbeddedFile` which contains a `data` field which is the bytes of the file and\n  a `metadata` field which has theses 2 properties associated to the file `hash` and `last_modified`;\n\n## [5.9.0] - 2021-01-18\n\n### Added\n\n- Added path prefix attribute\n\n## [5.8.0] - 2021-01-06\n\n### Fixed\n\n- Fixed compiling with latest version of syn\n\n## [5.7.0] - 2020-12-08\n\n### Fixed\n\n- Fix feature flag typo\n\n## [5.6.0] - 2020-07-19\n\n### Fixed\n\n- Fixed windows path error in release mode\n\n### Changed\n\n- Using github actions for CI now\n\n## [5.5.1] - 2020-03-19\n\n### Fixed\n\n- Fixed warnings in latest nightly\n\n## [5.5.0] - 2020-02-26\n\n### Fixed\n\n- Fixed the `folder` directory being relative to the current directory.\n  It is now relative to `Cargo.toml`.\n\n## [5.4.0] - 2020-02-24\n\n### Changed\n\n- using rust-2018 edition now\n- code cleanup\n- updated examples and crates\n\n## [5.3.0] - 2020-02-15\n\n### Added\n\n- `compression` feature for compressing embedded files\n\n## [5.2.0] - 2019-12-05\n\n## Changed\n\n- updated syn and quote crate to 1.x\n\n## [5.1.0] - 2019-07-09\n\n## Fixed\n\n- error when debug code tries to import the utils crate\n\n## [5.0.1] - 2019-07-07\n\n## Changed\n\n- derive is allowed only on unit structs now\n\n## [5.0.0] - 2019-07-05\n\n## Added\n\n- proper error message stating only unit structs are supported\n\n## Fixed\n\n- windows latest build\n\n## [4.5.0] - 2019-06-29\n\n## Added\n\n- allow rust embed derive to take env variables in the folder path\n\n## [4.4.0] - 2019-05-11\n\n### Fixed\n\n- a panic when struct has doc comments\n\n### Added\n\n- a warp example\n\n## [4.3.0] - 2019-01-10\n\n### Fixed\n\n- debug_embed feature was not working at all\n\n### Added\n\n- a test run for debug_embed feature\n\n## [4.2.0] - 2018-12-02\n\n### Changed\n\n- return `Cow<'static, [u8]>` to preserve static lifetime\n\n## [4.1.0] - 2018-10-24\n\n### Added\n\n- `iter()` method to list files\n\n## [4.0.0] - 2018-10-11\n\n### Changed\n\n- avoid vector allocation by returning `impl AsRef<[u8]>`\n\n## [3.0.2] - 2018-09-05\n\n### Added\n\n- appveyor for testing on windows\n\n### Fixed\n\n- handle paths in windows correctly\n\n## [3.0.1] - 2018-07-24\n\n### Added\n\n- panic if the folder cannot be found\n\n## [3.0.0] - 2018-06-01\n\n### Changed\n\n- The derive attribute style so we don't need `attr_literals` and it can be used in stable rust now. Thanks to [Mcat12](https://github.com/Mcat12).\n\n```rust\n#[folder(\"assets/\")]\n```\n\nto\n\n```rust\n#[folder = \"assets/\"]\n```\n\n### Removed\n\n- log dependecy as we are not using it anymore\n\n## [2.0.0] - 2018-05-26\n\n### Changed\n\n- Reimplemented the macro for release to use include_bytes for perf sake. Thanks to [lukad](https://github.com/lukad).\n\n## [1.1.1] - 2018-03-19\n\n### Changed\n\n- Fixed usage error message\n\n## [1.1.0] - 2018-03-19\n\n### Added\n\n- Release mode for custom derive\n\n### Changed\n\n- Fixed tests in travis\n\n## [1.0.0] - 2018-03-18\n\n### Changed\n\n- Converted the rust-embed macro `embed!` into a Rust Custom Derive Macro `#[derive(RustEmbed)]` which implements get on the struct\n\n```rust\nlet asset = embed!(\"examples/public/\")\n```\n\nto\n\n```rust\n#[derive(RustEmbed)]\n#[folder = \"examples/public/\"]\nstruct Asset;\n```\n\n## [0.5.2] - 2018-03-16\n\n### Added\n\n- rouille example\n\n## [0.5.1] - 2018-03-16\n\n### Removed\n\n- the plugin attribute from crate\n\n## [0.5.0] - 2018-03-16\n\n### Added\n\n- rocket example\n\n### Changed\n\n- Converted the rust-embed executable into a macro `embed!` which now loads files at compile time during release and from the fs during dev.\n\n## [0.4.0] - 2017-03-2\n\n### Changed\n\n- `generate_assets` to public again\n\n## [0.3.5] - 2017-03-2\n\n### Added\n\n- rust-embed prefix to all logs\n\n## [0.3.4] - 2017-03-2\n\n### Changed\n\n- the lib to be plugin again\n\n## [0.3.3] - 2017-03-2\n\n### Changed\n\n- the lib to be proc-macro from plugin\n\n## [0.3.2] - 2017-03-2\n\n### Changed\n\n- lib name from `rust-embed` to `rust_embed`\n\n## [0.3.1] - 2017-03-2\n\n### Removed\n\n- hyper example\n\n## [0.3.0] - 2017-02-26\n\n### Added\n\n- rust-embed executable which generates rust code to embed resource files into your rust executable\n  it creates a file like assets.rs that contains the code for your assets.\n\n## [0.2.0] - 2017-03-16\n\n### Added\n\n- rust-embed executable which generates rust code to embed resource files into your rust executable\n  it creates a file like assets.rs that contains the code for your assets.\n"
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "impl",
          "type": "tree",
          "content": null
        },
        {
          "name": "license",
          "type": "blob",
          "size": 1.0517578125,
          "content": "The MIT License (MIT)\n\nCopyright (c) 2018 pyros2097\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n"
        },
        {
          "name": "readme.md",
          "type": "blob",
          "size": 5.49609375,
          "content": "# ** Decomissioning of my github profile **\n\nNew rust-embed location,\n**https://git.sr.ht/~pyrossh/rust-embed**\n\n\n## Rust Embed [![Build Status](https://github.com/pyros2097/rust-embed/workflows/Test/badge.svg)](https://github.com/pyros2097/rust-embed/actions?query=workflow%3ATest) [![crates.io](https://img.shields.io/crates/v/rust-embed.svg)](https://crates.io/crates/rust-embed)\n\nRust Custom Derive Macro which loads files into the rust binary at compile time during release and loads the file from the fs during dev.\n\nYou can use this to embed your css, js and images into a single executable which can be deployed to your servers. Also it makes it easy to build a very small docker image for you to deploy.\n\n## Installation\n\n```toml\n[dependencies]\nrust-embed=\"8.5.0\"\n```\n\n## Documentation\n\nYou need to add the custom derive macro RustEmbed to your struct with an attribute `folder` which is the path to your static folder.\n\nThe path resolution works as follows:\n\n- In `debug` and when `debug-embed` feature is not enabled, the folder path is resolved relative to where the binary is run from.\n- In `release` or when `debug-embed` feature is enabled, the folder path is resolved relative to where `Cargo.toml` is.\n\n```rust\n#[derive(Embed)]\n#[folder = \"examples/public/\"]\nstruct Asset;\n```\n\nThe macro will generate the following code:\n\n```rust\nimpl Asset {\n  pub fn get(file_path: &str) -> Option<rust_embed::EmbeddedFile> {\n    ...\n  }\n\n  pub fn iter() -> impl Iterator<Item = Cow<'static, str>> {\n    ...\n  }\n}\nimpl RustEmbed for Asset {\n  fn get(file_path: &str) -> Option<rust_embed::EmbeddedFile> {\n    ...\n  }\n  fn iter() -> impl Iterator<Item = Cow<'static, str>> {\n    ...\n  }\n}\n\n// Where EmbeddedFile contains these fields,\npub struct EmbeddedFile {\n  pub data: Cow<'static, [u8]>,\n  pub metadata: Metadata,\n}\npub struct Metadata {\n  hash: [u8; 32],\n  last_modified: Option<u64>,\n  created: Option<u64>,\n}\n```\n\n### `get(file_path: &str) -> Option<rust_embed::EmbeddedFile>`\n\nGiven a relative path from the assets folder returns the `EmbeddedFile` if found.\n\nIf the feature `debug-embed` is enabled or the binary compiled in release mode the bytes have been embeded in the binary and a `Option<rust_embed::EmbeddedFile>` is returned.\n\nOtherwise the bytes are read from the file system on each call and a `Option<rust_embed::EmbeddedFile>` is returned.\n\n### `iter()`\n\nIterates the files in this assets folder.\n\nIf the feature `debug-embed` is enabled or the binary compiled in release mode a static array to the list of relative paths to the files is returned.\n\nOtherwise the files are listed from the file system on each call.\n\n## Attributes\n### `prefix`\n\nYou can add `#[prefix = \"my_prefix/\"]` to the `RustEmbed` struct to add a prefix\nto all of the file paths. This prefix will be required on `get` calls, and will\nbe included in the file paths returned by `iter`.\n\n### `metadata_only`\n\nYou can add `#[metadata_only = true]` to the `RustEmbed` struct to exclude file contents from the\nbinary. Only file paths and metadata will be embedded.\n\n## Features\n\n### `debug-embed`\n\nAlways embed the files in the binary, even in debug mode.\n\n### `interpolate-folder-path`\n\nAllow environment variables to be used in the `folder` path. Example:\n\n```rust\n#[derive(Embed)]\n#[folder = \"$CARGO_MANIFEST_DIR/foo\"]\nstruct Asset;\n```\n\nThis will pull the `foo` directory relative to your `Cargo.toml` file.\n\n### `compression`\n\nCompress each file when embedding into the binary. Compression is done via [`include-flate`].\n\n### `include-exclude`\nFilter files to be embedded with multiple `#[include = \"*.txt\"]` and `#[exclude = \"*.jpg\"]` attributes. \nMatching is done on relative file paths, via [`globset`].\n`exclude` attributes have higher priority than `include` attributes.\nExample:\n\n```rust\nuse rust_embed::Embed;\n\n#[derive(Embed)]\n#[folder = \"examples/public/\"]\n#[include = \"*.html\"]\n#[include = \"images/*\"]\n#[exclude = \"*.txt\"]\nstruct Asset;\n```\n\n## Usage\n\n```rust\nuse rust_embed::Embed;\n\n#[derive(Embed)]\n#[folder = \"examples/public/\"]\n#[prefix = \"prefix/\"]\nstruct Asset;\n\nfn main() {\n  let index_html = Asset::get(\"prefix/index.html\").unwrap();\n  println!(\"{:?}\", std::str::from_utf8(index_html.data.as_ref()));\n\n  for file in Asset::iter() {\n      println!(\"{}\", file.as_ref());\n  }\n}\n```\n\n## Integrations\n\n1. [Poem](https://github.com/poem-web/poem) for poem framework under feature flag \"embed\"\n2. [warp_embed](https://docs.rs/warp-embed/latest/warp_embed/) for warp framework\n\n## Examples\n\nTo run the example in dev mode where it reads from the fs,\n\n`cargo run --example basic`\n\nTo run the example in release mode where it reads from binary,\n\n`cargo run --example basic --release`\n\nNote: To run the [actix-web](https://github.com/actix/actix-web) example:\n\n`cargo run --example actix --features actix`\n\nNote: To run the [rocket](https://github.com/SergioBenitez/Rocket) example:\n\n`cargo run --example rocket --features rocket`\n\nNote: To run the [warp](https://github.com/seanmonstar/warp) example:\n\n`cargo run --example warp --features warp-ex`\n\nNote: To run the [axum](https://github.com/tokio-rs/axum) example:\n\n`cargo run --example axum --features axum-ex`\n\nNote: To run the [poem](https://github.com/poem-web/poem) example:\n\n`cargo run --example poem --features poem-ex`\n\nNote: To run the [salvo](https://github.com/salvo-rs/salvo) example:\n\n`cargo run --example salvo --features salvo-ex`\n\n## Testing\n\ndebug: `cargo test --test lib`\n\nrelease: `cargo test --test lib --release`\n\nGo Rusketeers!\nThe power is yours!\n\n[`include-flate`]: https://crates.io/crates/include-flate\n[`globset`]: https://crates.io/crates/globset\n"
        },
        {
          "name": "renovate.json",
          "type": "blob",
          "size": 0.0400390625,
          "content": "{\n  \"extends\": [\n    \"config:base\"\n  ]\n}\n"
        },
        {
          "name": "rustfmt.toml",
          "type": "blob",
          "size": 0.1044921875,
          "content": "merge_derives = true\nfn_params_layout = \"Compressed\"\nmax_width = 160\ntab_spaces = 2\nreorder_imports = true\n"
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        },
        {
          "name": "utils",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}