{
  "metadata": {
    "timestamp": 1736709049330,
    "page": 155,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjE2MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "async-graphql/async-graphql",
      "stars": 3415,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.072265625,
          "content": "/target\nCargo.lock\n.idea\n.vscode\n.DS_Store\nnode_modules\n\nbenchmark/target\n"
        },
        {
          "name": ".gitmodules",
          "type": "blob",
          "size": 0.0869140625,
          "content": "[submodule \"examples\"]\n\tpath = examples\n\turl = https://github.com/async-graphql/examples\n"
        },
        {
          "name": ".rustfmt.toml",
          "type": "blob",
          "size": 0.263671875,
          "content": "edition = \"2021\"\nnewline_style = \"Unix\"\n# comments\nnormalize_comments = true\nwrap_comments = true\nformat_code_in_doc_comments = true\n# imports\nimports_granularity = \"Crate\"\ngroup_imports = \"StdExternalCrate\"\n# report\n#report_fixme=\"Unnumbered\"\n#report_todo=\"Unnumbered\"\n"
        },
        {
          "name": "ARCHITECTURE.md",
          "type": "blob",
          "size": 2.314453125,
          "content": "# async-graphql Architecture\n\nThis document describes the internal architecture of `async-graphql`, and can be useful to\npeople wanting to contribute.\n\n## Schema\n\nWhen you create a schema, the first thing it does it asks the query, mutation and subscription types\nto register themselves in the schema's list of GraphQL types called the **registry**. Those types\nwill then recursively register all the types that they depend on in the registry, and so on until\nevery single type that is used has been registered in the registry.\n\n## Query Execution\n\nFirst of all, `async-graphql` will use the `async-graphql-parser` crate (located in the `parser/`\ndirectory) to parse the request document source. This also performs some necessary validations\nsuch as making sure that operation (i.e. query/mutation/subscription) names are unique and that the\nquery does not contain an anonymous operation as well as a named one.\n\nIt then will validate the document as per the rest of GraphQL's validation rules. The `validation/`\nmodule handles this, and it works by walking through the entire document once and notifying the\nvalidation rules on the way to perform their validations and report errors if necessary. If\n`ValidationMode::Fast` is turned on, far far fewer rules are used.\n\nAlso at this stage some non-validators use the same architecture, such as the query depth calculator\nwhich keeps track of how deeply nested the query gets as the document is walked through.\n\nAt this point all the unnecessary operations (ones not selected by `operationName`) are dropped, and\nwe will execute just one.\n\nAt the core of all the resolver logic there are two traits: `InputType` and `OutputType`\nwhich represent a GraphQL input value and GraphQL output value respectively. `InputType` just\nrequires conversions to and from `async_graphql::Value`. `OutputType` is an async trait with a\nsingle method, `resolve`, which takes a field (e.g. `user(name: \"sunli829\") { display_name }`) and\nresolves it to a single value.\n\nScalars and enums are expected to ignore the input and serialize themselves, while objects,\ninterfaces and unions are expected to read the selection set in the field and resolve and serialize\neach one of their fields.\n\nAs implementing `OutputType::resolve` manually quickly becomes very tedious helpful utilities\nare provided in the `resolver_utils` module and via macros.\n"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 48.712890625,
          "content": "# Changelog\nAll notable changes to this project will be documented in this file.\n\nThe format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/),\nand this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0.html).\n\n# [7.0.13] 2024-12-10\n\n- add support introspection inputValueDeprecation [#1621](https://github.com/async-graphql/async-graphql/issues/1621)\n\n# [7.0.12] 2024-12-08\n\n- update MSRV to `1.81.0`\n- Add specified complexity for fields in `SimpleObject`.\n- feat: expose SDL export utilities in ExtensionContext [#1606](https://github.com/async-graphql/async-graphql/pull/1606)\n- feat(dynamic-schema): specify type directives in schema [#1607](https://github.com/async-graphql/async-graphql/pull/1607)\n- Make http2 optional for actix [#1612](https://github.com/async-graphql/async-graphql/pull/1612)\n- chore: use std OnceLock instead LazyLock [#1613](https://github.com/async-graphql/async-graphql/pull/1613)\n- Add UUID validator [#1588](https://github.com/async-graphql/async-graphql/pull/1588)\n- Update secrecy and support new types [#1627](https://github.com/async-graphql/async-graphql/pull/1627)\n- fix [#1626](https://github.com/async-graphql/async-graphql/issues/1626)\n- Allow non-native concrete types in generic structs deriving SimpleObject + InputObject [#1629](https://github.com/async-graphql/async-graphql/pull/1629)\n- chore: update opentelemetry to 0.27 [#1614](https://github.com/async-graphql/async-graphql/pull/1614)\n- connection: Allow 'first' and 'last' parameters to exist at the same time [#1602](https://github.com/async-graphql/async-graphql/pull/1602)\n- feat(dynamic-schema): specify type directives in schema [#1607](https://github.com/async-graphql/async-graphql/pull/1607)\n- Make boxed_any and borrowed_any for FieldValue work with trait objects again [#1636](https://github.com/async-graphql/async-graphql/pull/1636)\n- Add new altair option [#1642](https://github.com/async-graphql/async-graphql/pull/1642)\n- Fix Clippy for latest stable [#1639](https://github.com/async-graphql/async-graphql/pull/1639)\n- Add `boxed-trait` feature [#1641](https://github.com/async-graphql/async-graphql/pull/1641)\n- Support directive in complex object [#1644](https://github.com/async-graphql/async-graphql/pull/1644)\n\n# [7.0.11] 2024-09-26\n\n- fix [#1598](https://github.com/async-graphql/async-graphql/issues/1598)\n\n# [7.0.10] 2024-09-24\n\n- add `SchemeBuilder.limit_directives` method to set the maximum number of directives on a single field.\n- remove needless ?Sized [#1593](https://github.com/async-graphql/async-graphql/pull/1593)\n- fix: generate each variant description correctly. [#1589](https://github.com/async-graphql/async-graphql/pull/1589)\n- Make `From<T>` for [Error] set source [#1561](https://github.com/async-graphql/async-graphql/pull/1561)\n- feat(graphiql): add support for WS connection params [#1597](https://github.com/async-graphql/async-graphql/pull/1597)\n\n# [7.0.9] 2024-09-02\n\n- add `on_ping` callback to `WebSocket`\n\n# [7.0.8] 2024-09-01\n\n- chore: Make Extensions nullable [#1563](https://github.com/async-graphql/async-graphql/pull/1563)\n- expose `rejection` in `async_graphql_axum` [#1571](https://github.com/async-graphql/async-graphql/pull/1571)\n- Updated crate `time` to `3.36`, as it fixes a compilation error in rust `1.80` [#1572](https://github.com/async-graphql/async-graphql/pull/1572)\n- Impl `Debug` for `dynamic::FieldValue` & Improve error messages for its methods [#1582](https://github.com/async-graphql/async-graphql/pull/1582)\n- Support scraping `#[doc = ...]` attributes when generating descriptions [#1581](https://github.com/async-graphql/async-graphql/pull/1581)\n- add `Websocket::keepalive_timeout` method to sets a timeout for receiving an acknowledgement of the keep-alive ping.\n\n# [7.0.7] 2024-07-14\n\n- Support raw values from serde_json [#1554](https://github.com/async-graphql/async-graphql/pull/1554)\n- The custom directive `ARGUMENT_DEFINITION` is not being output at the appropriate location in SDL [#1559](https://github.com/async-graphql/async-graphql/pull/1559)\n- Support for JSON extended representations of BSON ObjectId and Uuid [#1542](https://github.com/async-graphql/async-graphql/pull/1542)\n- feat: get directives from SelectionField [#1548](https://github.com/async-graphql/async-graphql/pull/1548)\n- Support Directives on Subscriptions [#1500](https://github.com/async-graphql/async-graphql/pull/1500)\n- fix subscription err typo [#1556](https://github.com/async-graphql/async-graphql/pull/1556)\n\n# [7.0.6] 2024-06-08\n\n- add license files to each project [#1523](https://github.com/async-graphql/async-graphql/issues/1523)\n- Improve alignment of directive behavior with GraphQL spec [#1524](https://github.com/async-graphql/async-graphql/pull/1524)\n- dynamic schema: pass default vals to ResolverContext [#1527](https://github.com/async-graphql/async-graphql/pull/1527)\n- Add [altair](https://github.com/altair-graphql/altair) source [#1530](https://github.com/async-graphql/async-graphql/pull/1530)\n- feat: Add support for using `Interface` and `OneofObject` on the same struct [#1534](https://github.com/async-graphql/async-graphql/pull/1534)\n\n# [7.0.5] 2024-05-09\n\n- Fix compiler and clippy warnings [#1501](https://github.com/async-graphql/async-graphql/pull/1501)\n- Added support for deploying to wasm targets with axum - (without subscriptions) [#1517](https://github.com/async-graphql/async-graphql/pull/1517)\n- Bump opentelemetry (0.21.0 -> 0.22.0) [#1513](https://github.com/async-graphql/async-graphql/pull/1513)\n- Update lru dependency [#1504](https://github.com/async-graphql/async-graphql/pull/1504)\n- Support TypeDirective for ArgumentDefinition, Enum, EnumValue, InputFieldDefinition, InputObject, Interface [#1509](https://github.com/async-graphql/async-graphql/pull/1509)\n- Add `display` attribute for Enum macro [#1518](https://github.com/async-graphql/async-graphql/issues/1518)\n\n# [7.0.3] 2024-03-16\n\n- Sort schema fields & enums if required [#1475](https://github.com/async-graphql/async-graphql/pull/1475)\n- Change the `type_name` of `EmptySubscription` fix [#1435](https://github.com/async-graphql/async-graphql/issues/1435) [#1475](https://github.com/async-graphql/async-graphql/pull/1475)\n- add `Request::set_parsed_query` method [#1483](https://github.com/async-graphql/async-graphql/pull/1483)\n- Upgrade strum to 0.26 [#1485](https://github.com/async-graphql/async-graphql/pull/1485)\n- Fix validation of non-nullable variables with default values [#1491](https://github.com/async-graphql/async-graphql/pull/1491)\n- add `NextExecute::run_with_data` method to attach context data before execution\n- feat: add registry method in dynamic::Registry [#1492](https://github.com/async-graphql/async-graphql/pull/1492)\n- Allow non-scalars to be used as directive arguments [#1493](https://github.com/async-graphql/async-graphql/pull/1493)\n- fix: add description to __schema introspection result [#1489](https://github.com/async-graphql/async-graphql/pull/1489)\n\n# [7.0.2] 2024-02-18\n\n- Fix `#[derive(OneofObject)]` rejecting enums where the type comes from a macro subsitution [#1473](https://github.com/async-graphql/async-graphql/pull/1473)\n- Optimize object proc-macro codegen [#1470](https://github.com/async-graphql/async-graphql/pull/1470)\n- Use `impl Future` instead of `async-trait` in most traits. [#1468](https://github.com/async-graphql/async-graphql/pull/1468)\n- Upgrade `base64` to `0.21` [#1466](https://github.com/async-graphql/async-graphql/pull/1466)\n- Standardize space between Args, Lists and Binary items [#1392](https://github.com/async-graphql/async-graphql/pull/1392)\n- feat: support bigdecimal 0.4.x  [#1358](https://github.com/async-graphql/async-graphql/pull/1358)\n\n# [7.0.1] 2024-01-21\n\n- Add `Shareable` Attribute To InputObjectField [#1459](https://github.com/async-graphql/async-graphql/pull/1459)\n- Feature Generic Unions [#1424](https://github.com/async-graphql/async-graphql/pull/1424)\n- Address axum integration compilation error with non-Sync body [#1460](https://github.com/async-graphql/async-graphql/pull/1460)\n- fix: date cursor precision string format [#1462](https://github.com/async-graphql/async-graphql/pull/1462)\n\n# [7.0.0] 2024-01-06\n\n- upgrade to `http1`\n- Feature extend ResolveInfo with field attribute [#1428](https://github.com/async-graphql/async-graphql/pull/1428)\n\n# [6.0.11] 2023-11-19\n\n- Clean up example docs [#1411](https://github.com/async-graphql/async-graphql/pull/1411)\n- Run batch requests concurrently [#1420](https://github.com/async-graphql/async-graphql/pull/1420)\n- Update opentelemetry to `v0.21.x` [#1422](https://github.com/async-graphql/async-graphql/pull/1422)\n\n# [6.0.10] 2023-11-04\n\n- bump opentelemetry `0.20.0` [#1406](https://github.com/async-graphql/async-graphql/pull/1406)\n- fix check for serial [#1405](https://github.com/async-graphql/async-graphql/pull/1405)\n- fixes complexity visitor\n- bump Rocket from `0.5.0-rc.2` to `0.5.0-rc.4`\n\n# [6.0.9] 2023-10-21\n\n- add support uploading files in dynamic schema [#1384](https://github.com/async-graphql/async-graphql/discussions/1384)\n- Include `@composeDirective` in Federation's `_service` field and document `#[TypeDirective]` [#1400](https://github.com/async-graphql/async-graphql/pull/1400)\n\n# [6.0.7] 2023-09-23\n\n- initialize source field in tracing extension parse_query method [#1367](https://github.com/async-graphql/async-graphql/pull/1367)\n- test(variables): empty object passes but empty array fails [#1377](https://github.com/async-graphql/async-graphql/pull/1377)\n- Add support for entities without a reference resolver [#1378](https://github.com/async-graphql/async-graphql/pull/1378)\n- Fixes [#1356](https://github.com/async-graphql/async-graphql/pull/1356)\n\n# [6.0.6] 2023-09-04\n\n- fixed SDL formatting for resolver argument comments regressed [#1363](https://github.com/async-graphql/async-graphql/issues/1363)\n\n# [6.0.5] 2023-08-20\n\n- Implement exporting argument documentation [#1352](https://github.com/async-graphql/async-graphql/pull/1352)\n- Add `ValueAccessor::as_value` and `ListAccessor::as_values_slice` methods [#1353](https://github.com/async-graphql/async-graphql/pull/1353)\n- dynamic: fixes key not found when using entity resolver [#1362](https://github.com/async-graphql/async-graphql/issues/1362)\n- fix panic in complexity visitor [#1359](https://github.com/async-graphql/async-graphql/pull/1359)\n- update MSRV to `1.70.0`\n\n# [6.0.4] 2023-08-18\n\n- Parse \"repeatable\" in directive definitions. [#1336](https://github.com/async-graphql/async-graphql/pull/1336)\n- add support `multipart/mixed` request. [#1348](https://github.com/async-graphql/async-graphql/issues/1348)\n- async-graphql-actix-web: add `GraphQL` handler.\n- async-graphql-axum: add `GraphQL` service.\n\n# [6.0.3] 2023-08-15\n\n- dynamic: fix the error that some methods of `XXXAccessor` return reference lifetimes that are smaller than expected.\n- dynamic: no longer throws an error if the Query object does not contain any fields but the schema contains entities.\n- chore: make accessors public and reexport indexmap [#1329](https://github.com/async-graphql/async-graphql/pull/1329)\n- feat: added `OutputType` implementation for `std::sync::Weak` [#1334](https://github.com/async-graphql/async-graphql/pull/1334)\n\n# [6.0.1] 2023-08-02\n\n- dynamic: remove `TypeRefInnner`\n- update MSRV to `1.67.0`\n\n# [6.0.0] 2023-07-29\n\n- Bump `syn` from `1.0` to `2.0`\n- Bump `darling` from `0.14` to `0.20`\n- Bump `indexmap` from `1.6.2` to `2`\n- Attributes `guard`, `process_with`, `complexity` support expression or string as value [#1295](https://github.com/async-graphql/async-graphql/issues/1295)\n- Schema (type) level directive support with optional support of federation composeDirective [#1308](https://github.com/async-graphql/async-graphql/pull/1308)\n- Add support for generic structs derriving InputObject and SimpleObject [#1313](https://github.com/async-graphql/async-graphql/pull/1313)\n- chore: trim up some unnecessary code [#1324](https://github.com/async-graphql/async-graphql/pull/1324)\n- Adds `Dataloader::get_cached_values` method to the dataloader cache so that callers can access the contents of the cache without knowing the keys. [#1326](https://github.com/async-graphql/async-graphql/pull/1326)\n\n## Breaking Changes\n\n- Since `syn 2.0` no longer supports keywords as meta path, rename the parameter used to specify interface field types from `type` to `ty`.\n\n    https://github.com/dtolnay/syn/issues/1458\n    https://github.com/TedDriggs/darling/issues/238\n\n```rust\n#[derive(Interface)]\n#[graphql(field(name = \"id\", ty = \"&i32\"))] // rename from type to ty\nenum Node {\n    MyObj(MyObj),\n}\n```\n\n- Change the parameter `location` of the macro `Directive` to *PascalCase*\n\n```rust\n// #[Directive(location = \"field\")]\n#[Directive(location = \"Field\")]\npub fn lowercase() -> impl CustomDirective {\n    LowercaseDirective\n}\n```\n\n# [5.0.10] 2023-06-07\n\n- Upgrade opentelemetry to 0.19.0 [#1252](https://github.com/async-graphql/async-graphql/pull/1262)\n- Remove internal `CursorScalar` type and expose `Edge::cursor` member [#1302](https://github.com/async-graphql/async-graphql/pull/1302)\n\n# [5.0.9] 2023-05-25\n\n- Prevent input check stack overflow [#1293](https://github.com/async-graphql/async-graphql/pull/1293)\n- Change batch requests to run concurrently [#1290](https://github.com/async-graphql/async-graphql/issues/1290)\n\n# [5.0.8] 2023-05-09\n\n- Improve documentation on Dataloader [#1282](https://github.com/async-graphql/async-graphql/pull/1282)\n- Prevent recursive input type checking from hitting stack overflow [#1284](https://github.com/async-graphql/async-graphql/pull/1284)\n- update MSRV to `1.65.0`\n\n# [5.0.7] 2023-03-25\n\n- Disable default-features in workspace.dependencies [#1232](https://github.com/async-graphql/async-graphql/pull/1232)\n- Copy edit extensions section of The Book [#1234](https://github.com/async-graphql/async-graphql/pull/1234)\n- disable default features for async-graphql in workspace dependencies [#1237](https://github.com/async-graphql/async-graphql/pull/1237)\n- chore: make edge field and connection field shareable [#1246](https://github.com/async-graphql/async-graphql/pull/1246)\n- Added 3 new fns to the ObjectAccessor. [#1244](https://github.com/async-graphql/async-graphql/pull/1244)\n- Dataloader futures lose span context [#1256](https://github.com/async-graphql/async-graphql/pull/1256)\n- Propagate ErrorExtensionValues when calling InputValueError.propagate [#1257](https://github.com/async-graphql/async-graphql/pull/1257)\n- Correct error string for object in ValueAccessor [#1260](https://github.com/async-graphql/async-graphql/pull/1260)\n\n# [5.0.6] 2023-02-11\n\n- docs: Tweak dataloader example and link to full example [#1194](https://github.com/async-graphql/async-graphql/pull/1194)\n- docs: Mention the importance of using dataloader with federation/entities [#1194](https://github.com/async-graphql/async-graphql/pull/1194)\n- chore: enable GraphiQL/Playground via feature flag [#1202](https://github.com/async-graphql/async-graphql/pull/1202)\n- fix: Export directives to federation SDL so they can be composed. [#1209](https://github.com/async-graphql/async-graphql/pull/1209)\n- Fix doc contents details and add AutoCorrect lint to CI. [#1210](https://github.com/async-graphql/async-graphql/pull/1210)\n- fix: provide correct type for _service with dynamic schema [#1212](https://github.com/async-graphql/async-graphql/pull/1212)\n- feat(subscription): support generics in MergedSubscription types [#1222](https://github.com/async-graphql/async-graphql/pull/1222)\n- feat: modify Connection to allow optionally disable nodes field in gql output. [#1218](https://github.com/async-graphql/async-graphql/pull/1218)\n- fixes interface type condition query [#1228](https://github.com/async-graphql/async-graphql/pull/1228)\n- fixes [#1226](https://github.com/async-graphql/async-graphql/issues/1226)\n- update MSRV to `1.64.0`\n\n# [5.0.5] 2023-01-03\n\n- dynamic schema: add boxed_any function [#1179](https://github.com/async-graphql/async-graphql/pull/1179)\n- Improve GraphiQL v2 [#1182](https://github.com/async-graphql/async-graphql/pull/1182)\n- Fix: __Type.oneOf to __Type.isOneOf [#1188](https://github.com/async-graphql/async-graphql/pull/1188)\n- Implemente From<ID> for ConstValue [#1169](https://github.com/async-graphql/async-graphql/pull/1169)\n- Fixes [#1192](https://github.com/async-graphql/async-graphql/issues/1192)\n\n# [5.0.4] 2022-12-17\n\n- Fix named_list_nn [#1172](https://github.com/async-graphql/async-graphql/pull/1172)\n- Add `DynamicRequestExt::root_value` to specify the root value for the request\n- Change `CustomValidator::check` returns error type from `String` to `InputValueError<T>`.\n- Add support that custom validators can set error extensions. [#1174](https://github.com/async-graphql/async-graphql/issues/1174)\n\n# [5.0.3] 2022-12-07\n\n- Fixes [#1163](https://github.com/async-graphql/async-graphql/issues/1163)\n- Fixes [#1161](https://github.com/async-graphql/async-graphql/issues/1161)\n\n# [5.0.2] 2022-11-30\n\n- Fixes [#1157](https://github.com/async-graphql/async-graphql/issues/1157)\n\n# [5.0.1] 2022-11-29\n\n- Add boolean dynamic ValueAccessor method [#1153](https://github.com/async-graphql/async-graphql/pull/1153)\n\n# [5.0.0] 2022-11-27\n\n- Update MSRV to `1.60.0`\n- [async-graphql-axum] bump axum from `0.5.1` to `0.6.0` [#1106](https://github.com/async-graphql/async-graphql/issues/1106)\n\n# [5.0.0-alpha.5] 2022-11-21\n\n- Fixes [#1138](https://github.com/async-graphql/async-graphql/issues/1138)\n- Fixes [#1140](https://github.com/async-graphql/async-graphql/issues/1140)\n- Add `dynamic::Scalar::validator` method to set value validator.\n\n# [5.0.0-alpha.4] 2022-11-12\n\n- Add support to federation(v2) for dynamic schema\n\n# [5.0.0-alpha.3] 2022-11-12\n\n- Simplified way to create type reference `dynamic::TypeRef`\n\n# [5.0.0-alpha.2] 2022-11-11\n\n- Keep object 'implements' order stable in SDL export [#1142](https://github.com/async-graphql/async-graphql/pull/1142)\n- Fix regression on `ComplexObject` descriptions [#1141](https://github.com/async-graphql/async-graphql/pull/1141)\n\n# [5.0.0-alpha.1] 2022-11-10\n\n- Add support for dynamic schema\n- Add `tempfile` feature, enabled by default\n\n# [4.0.17] 2022-10-24\n\n- Add support for using `Union` and `OneofObject` on the same struct [#1116](https://github.com/async-graphql/async-graphql/issues/1116)\n\n# [4.0.16] 2022-10-20\n\n- Add credentials to GraphiQL 2 [#1105](https://github.com/async-graphql/async-graphql/pull/1105)\n- Add TypeName support for InputObject [#1110](https://github.com/async-graphql/async-graphql/pull/1110)\n- Fix error message [#1058](https://github.com/async-graphql/async-graphql/pull/1058)\n- Add TypeName support for Enum, Union, OneofInputObject, Subscription, MergedObject, MergedSubscription, Scalar, Interface, Directive\n- Fixes [#1052](https://github.com/async-graphql/async-graphql/issues/1052)\n- Implement `CustomValidator<T>` for `F: Fn(&T) -> Result<(), E: Into<String>>`\n- Add `validator` attribute to `InputObject` macro [#1072](https://github.com/async-graphql/async-graphql/issues/1072)\n\n# [4.0.15] 2022-10-07\n\n- Dynamic Document Title for GraphiQL v2 and GraphQL Playground [#1099](https://github.com/async-graphql/async-graphql/pull/1099)\n- Skip tracing for introspection queries. [#841](https://github.com/async-graphql/async-graphql/issues/841)\n- Add `SchemaBuilder::disable_suggestions` method to disable field suggestions. [#1101](https://github.com/async-graphql/async-graphql/issues/1101)\n\n# [4.0.14] 2022-09-25\n\n- Implement a simple approach to using the link directive. [#1060](https://github.com/async-graphql/async-graphql/pull/1060)\n- docs: Update federation docs with examples of each directive. [#1080](https://github.com/async-graphql/async-graphql/pull/1080)\n- Add support for parse request from query string. [#1085](https://github.com/async-graphql/async-graphql/issues/1085)\n\n# [4.0.13] 2022-09-09\n\n- Compare to expected schema [#1048](https://github.com/async-graphql/async-graphql/pull/1048)\n- docs: readme flair [#1054](https://github.com/async-graphql/async-graphql/pull/1054)\n- Remove `bson-uuid` feature [#1032](https://github.com/async-graphql/async-graphql/issues/1032)\n- Add `no_cache` for `cache_control` attribute [#1051](https://github.com/async-graphql/async-graphql/issues/1051)\n- Resurrect code generation through tests [#1062](https://github.com/async-graphql/async-graphql/pull/1062)\n- Support for primitive type in CursorType [#1049](https://github.com/async-graphql/async-graphql/pull/1049)\n- Add `SDLExportOptions::include_specified_by` method to enable `specifiedBy` directive [#1065](https://github.com/async-graphql/async-graphql/issues/1065)\n\n# [4.0.12] 2022-08-24\n\n- Update MSRV to `1.59.0`\n- Support `@specifiedBy` directive in SDL export [#1041](https://github.com/async-graphql/async-graphql/pull/1041)\n- Add GraphiQL v2 [#1044](https://github.com/async-graphql/async-graphql/pull/1044)\n- Export SDL: consistently avoid trailing spaces [#1043](https://github.com/async-graphql/async-graphql/pull/1043)\n\n# [4.0.11] 2022-08-23\n\n- Define `override` directive on fields [#1029](https://github.com/async-graphql/async-graphql/pull/1029)\n- Add `@tag` support [#1038](https://github.com/async-graphql/async-graphql/pull/1038)\n- Export SDL: avoid trailing space for scalar definitions [#1036](https://github.com/async-graphql/async-graphql/pull/1036)\n- Fixes [#1039](https://github.com/async-graphql/async-graphql/issues/1039)\n\n# [4.0.10] 2022-08-18\n\n- Fixes extension `request.data(X)` being lost in the resolver [#1018](https://github.com/async-graphql/async-graphql/pull/1018)\n- Add Apollo federation `@shareable` directive support [#1025](https://github.com/async-graphql/async-graphql/pull/1025)\n- Add Apollo Federation `@inaccessible` directive support [#1026](https://github.com/async-graphql/async-graphql/pull/1026)\n\n# [4.0.9] 2022-08-15\n\n- `on_connection_init` takes `FnOnce` instead of `Fn` [#1022](https://github.com/async-graphql/async-graphql/issues/1022#issuecomment-1214575590)\n\n# [4.0.8] 2022-08-12\n\n- Add tracing to dataloader methods when the tracing feature is enabled. [#996](https://github.com/async-graphql/async-graphql/pull/996)\n\n# [4.0.7] 2022-08-09\n\n- Limit parser recursion depth to `64`.\n\n# [4.0.6] 2022-07-21\n\n- Limit execution recursion depth to `32` by default.\n\n# [4.0.5] 2022-07-18\n\n- Fix serializing of JSON default values [#969](https://github.com/async-graphql/async-graphql/issues/969)\n- Bump `rocket-0.5.0-rc.1` to `rocket-0.5.0-rc.2` for `async-graphql-rocket` [#968](https://github.com/async-graphql/async-graphql/pull/968)\n- Implement `Default` for `StringNumber` [#980](https://github.com/async-graphql/async-graphql/issues/980)\n- Implement `Guard` for `Fn`\n- Fix impossible to specify both `name` and `input_name` [#987](https://github.com/async-graphql/async-graphql/issues/987)\n\n\n# [4.0.4] 2022-6-25\n\n- Bump Actix-web from `4.0.1` to `4.1.0`\n- Add a `prefer_single_line_descriptions` option on `SDLExportOptions` [#955](https://github.com/async-graphql/async-graphql/pull/955)\n- Fixes [#957](https://github.com/async-graphql/async-graphql/issues/957)\n- Fixes [#943](https://github.com/async-graphql/async-graphql/issues/943)\n\n# [4.0.3] 2022-6-20\n\n- Custom error type in axum request extractor [#945](https://github.com/async-graphql/async-graphql/pull/945)\n- Add nodes exposure on `ConectionType` so nesting through edges isn't always needed. [#952](https://github.com/async-graphql/async-graphql/pull/952)\n- Make email-validator optional [#950](https://github.com/async-graphql/async-graphql/pull/950)\n\n# [4.0.2] 2022-6-10\n\n- Expose `Edge::node` to allow better testing. [#933](https://github.com/async-graphql/async-graphql/pull/933)\n- Integrate with the [`bigdecimal` crate](https://crates.io/crates/bigdecimal). [#926](https://github.com/async-graphql/async-graphql/pull/926)\n- Improve the examples in the book. [#940](https://github.com/async-graphql/async-graphql/pull/940)\n- Fixed [#941](https://github.com/async-graphql/async-graphql/issues/941)\n- Fixed [#848](https://github.com/async-graphql/async-graphql/issues/848)\n- Bump `darling` from `0.13.0` to `0.14.0` [#939](https://github.com/async-graphql/async-graphql/pull/939)\n- Fixed [#9461](https://github.com/async-graphql/async-graphql/issues/946)\n\n# [4.0.1] 2022-5-24\n\n- Add `Schema::build_with_ignore_name_conflicts` method to specifies a list to ignore type conflict detection.\n\n# [4.0.0] 2022-5-17\n\n- Implement the `ConnectionNameType` and `EdgeNameType` traits to specify GraphQL type names for `Connection` and `Edge`, which can be automatically generated using `DefaultConnectionName` and `DefaultEdgeName`.\n- Add `#[non_exhaustive]` attribute to Request/Response types.\n- Introduce ability to pre-parse Request's query. [#891](https://github.com/async-graphql/async-graphql/pull/891)\n- Add `introspection-only` mode. [#894](https://github.com/async-graphql/async-graphql/pull/894)\n- Add `bson-uuid` feature to implement `ScalarType` for `bson::Uuid`. [#875](https://github.com/async-graphql/async-graphql/pull/875)\n- Bump `regex` crate from `1.4.5` to `1.5.5`. [#862](https://github.com/async-graphql/async-graphql/pull/862)\n- Bump `chrono-tz` crate from `0.5.3` to `0.6.1`. [#831](https://github.com/async-graphql/async-graphql/pull/831)\n- Move the pest parser code generation step into a test. [#901](https://github.com/async-graphql/async-graphql/pull/901)\n- Update `log` to version `0.4.16`. [#903](https://github.com/async-graphql/async-graphql/pull/903)\n- Added impl of `CursorType` for floats [#897](https://github.com/async-graphql/async-graphql/pull/897)\n- Implement `OutputType` for `tokio::sync::RwLock` and `tokio::sync::Mutex`. [#896](https://github.com/async-graphql/async-graphql/pull/896)\n- Bump [`uuid`](https://crates.io/crates/uuid) to `1.0.0`. [#907](https://github.com/async-graphql/async-graphql/pull/907/files)\n- Add some options for exporting SDL. [#877](https://github.com/async-graphql/async-graphql/issues/877)\n- Cache parsed `ExecuteDocument` in APQ. [#919](https://github.com/async-graphql/async-graphql/issues/919)\n- Fixed `OneofObject` restriction on inner types being unique. [#923](https://github.com/async-graphql/async-graphql/issues/923)\n\n# [3.0.38] 2022-4-8\n\n- Update Axum integration to Axum 0.5.1 [#883](https://github.com/async-graphql/async-graphql/pull/883)\n- Support macro type in enum variant. [#884](https://github.com/async-graphql/async-graphql/pull/884)\n- Introduce process_with for input object [#817](https://github.com/async-graphql/async-graphql/pull/817)\n- Add `MaybeUndefined::update_to` method. [#881](https://github.com/async-graphql/async-graphql/issues/881)\n\n# [3.0.37] 2022-3-30\n\n- Panics when the same Rust type has the same name. [#880](https://github.com/async-graphql/async-graphql/issues/880)\n\n# [3.0.36] 2022-3-22\n\n- Generate `@deprecated` to SDL. [#874](https://github.com/async-graphql/async-graphql/issues/874)\n- Expose `Connection::edges`. [#871](https://github.com/async-graphql/async-graphql/issues/871)\n\n# [3.0.35] 2022-3-14\n\n- Make `HashMap` more generics for `InputOutput` and `OutputType`.\n- Add support `group` attribute to Object/SimpleObject/ComplexObject/Subscription macros. [#838](https://github.com/async-graphql/async-graphql/issues/838)\n- Fixed recursive generic input objects failing to compile. [#859](https://github.com/async-graphql/async-graphql/issues/859)\n- Add `ErrorExtensionValues::get` method. [#855](https://github.com/async-graphql/async-graphql/issues/855)\n\n# [3.0.34] 2022-3-5\n\n- Export `@oneOf` directive to SDL when Oneof type is defined. [#766](https://github.com/async-graphql/async-graphql/issues/766)\n\n# [3.0.33] 2022-3-4\n\n- Add support for oneof field on object. [#766](https://github.com/async-graphql/async-graphql/issues/766)\n\n# [3.0.32] 2022-3-4\n\n- Bump `Actix-web` from `4.0.0-rc.3` to `4.0.1`.\n\n# [3.0.31] 2022-02-17\n\n- Add `OneOfObject` macro to support for oneof input object.\n- Bump actix-web from `4.0.0-rc.2` to `4.0.0-rc.3`.\n\n# [3.0.30] 2022-2-15\n\n- Implement `ScalarType` for `time::Date`. [#822](https://github.com/async-graphql/async-graphql/pull/822)\n\n# [3.0.29] 2022-2-6\n\n- Pass context to resolvers with flatten attribute. [#813](https://github.com/async-graphql/async-graphql/pull/813)\n- Add support for using both `ComplexObject` and `InputObject`.\n- Bump `Actix-web` from `4.0.0-beta.19` to `4.0.0-rc.2`.\n\n# [3.0.28] 2022-1-30\n\n- Implement `InputType` and `OutputType` for `Box<[T]>` and `Arc<[T]>`. [#805](https://github.com/async-graphql/async-graphql/issues/805)\n\n# [3.0.27] 2022-1-28\n\n- Fix possible stack overflow in validator, thanks @quapka.\n\n# [3.0.26] 2022-1-26\n\n- Add `skip_input` attribute to `InputObject` macro, `skip_output` attribute to `SimpleObject` macro.\n\n# [3.0.25] 2022-1-24\n\n- Fixed some integrations overwritten HTTP headers. [#793](https://github.com/async-graphql/async-graphql/issues/793)\n- Fixed variable type not checked when given a default value. [#795](https://github.com/async-graphql/async-graphql/pull/795)\n\n# [3.0.24] 2022-1-24\n\n- Remove `'static` bound for `impl From<T> for Error`.\n\n# [3.0.23] 2022-1-19\n\n- Bump hashbrown from `0.11.2` to `0.12.0`.\n- Implement `InputType` for `Box<str>` and `Arc<str>`. [#792](https://github.com/async-graphql/async-graphql/issues/792)\n- Add scalars for the `time` crate's datetime types. [#791](https://github.com/async-graphql/async-graphql/pull/791)\n- Add `DataContext` trait. [#786](https://github.com/async-graphql/async-graphql/pull/786)\n\n## [3.0.22] 2022-1-11\n\n- Add support `flatten` attribute for `SimpleObject`, `ComplexObject` and `Object` macros. [#533](https://github.com/async-graphql/async-graphql/issues/533)\n- Actix integration: cbor response support + error handling improvements [#784](https://github.com/async-graphql/async-graphql/pull/784)\n\n## [3.0.21] 2022-1-11\n\n- Add `Union` and `Interface` support for trait objects. [#780](https://github.com/async-graphql/async-graphql/issues/780)\n\n## [3.0.20] 2022-1-5\n\n- Bump `lru` to `0.7.1`. [#773](https://github.com/async-graphql/async-graphql/pull/773)\n- Align `indexmap` version to `1.6.2`. [#776](https://github.com/async-graphql/async-graphql/pull/776)\n- Bump actix-web from `4.0.0-beta.18` to `4.0.0-beta.19`.\n- Fix the generic `SimpleObject` can't define the lifetimes. [#774](https://github.com/async-graphql/async-graphql/issues/774)\n\n## [3.0.19] 2021-12-28\n\n- Add `InputType` / `OutputType` support for `hashbrown` crate.\n- Bump actix-web from `4.0.0-beta.14` to `4.0.0-beta.18`. [#768](https://github.com/async-graphql/async-graphql/pull/768)\n\n## [3.0.18] 2021-12-26\n\n- Federation's `_Entity` should not be sent if empty as it's in conflict with [GraphQL Union type validation](https://spec.graphql.org/draft/#sec-Unions.Type-Validation) [#765](https://github.com/async-graphql/async-graphql/pull/765).\n- Fix field guards not working on `ComplexObject`. [#767](https://github.com/async-graphql/async-graphql/issues/767)\n\n## [3.0.17] 2021-12-16\n\n- Bump poem to `1.2.2`.\n\n## [3.0.16] 2021-12-16\n\n- Bump poem to `1.2.1`.\n\n## [3.0.15] 2021-12-12\n\n- Bump actix-web from `4.0.0-beta.11` to `4.0.0-beta.14`.\n\n## [3.0.14] 2021-12-06\n\n- [async-graphql-axum] bump axum from `0.3` to `0.4`.\n\n## [3.0.13] 2021-12-06\n\n- No longer assumes that a subscription stream that failed to resolve has ended. [#744](https://github.com/async-graphql/async-graphql/issues/744)\n- Rework to implement `InputType` and `OutputType` for `HashMap` and `BTreeMap`.\n\n## [3.0.12] 2021-12-05\n\n- Fix possible deadlock in dataloader. [#555](https://github.com/async-graphql/async-graphql/issues/555)\n- Add some helper methods for `BatchRequest`.\n  - BatchRequest::iter\n  - BatchRequest::iter_mut\n  - BatchRequest::variables\n  - BatchRequest::data\n  - BatchRequest::disable_introspection\n- Fix implicit interfaces not being exposed via the __schema introspection. [#741](https://github.com/async-graphql/async-graphql/pull/741)\n\n## [3.0.11] 2021-12-02\n\n- Fix panic on f32-64::INFINITE/f32-64::NEG_INFINITE/f32-64::NAN output. [#735](https://github.com/async-graphql/async-graphql/issues/735)\n\n## [3.0.10] 2021-11-30\n\n- Fix the custom validator cannot work on `Option<Vec<T>>`.\n\n## [3.0.9] 2021-11-30\n\n- Fix the validator cannot work on `Option<Vec<T>>`.\n\n## [3.0.8] 2021-11-30\n\n- `#[graphql(validator(list))]` no longer applies to `max_items` and `min_items`.\n- Implement `InputValue`/`OutputValue` for `serde_json::Value`.\n- Add support for `SmolStr` via a feature. [#730](https://github.com/async-graphql/async-graphql/pull/730)\n\n## [3.0.7] 2021-11-23\n\n- Fix error extensions cause stack overflow. [#719](https://github.com/async-graphql/async-graphql/issues/719)\n\n## [3.0.6] 2021-11-19\n\n- Custom directives. [Book](https://async-graphql.github.io/async-graphql/en/custom_directive.html)\n\n## [3.0.5] 2021-11-19\n\n- Remove skipped fields from the document before executing the query.\n- Add `isRepeatable` field to `__Directive` - [GraphQL - October 2021]\n\n## [3.0.4] 2021-11-18\n\n- Remove `OutputJson` because `Json` can replace it.\n- Allowed use validators on wrapper types, for example: `Option<T>`, `MaybeUnefined<T>`.\n\n## [3.0.3] 2021-11-18\n\n- [integrations] Make `GraphQLWebSocket::new` use generic stream.\n- [integrations] Add `GraphQLWebSocket::new_with_pair` method.\n\n## [3.0.2] 2021-11-16\n\n- Add `url`, `regex` and `ip` validators.\n\n## [3.0.1] 2021-11-17\n\n- Remove the `ctx` parameter of `CustomValidator::check`. [#710](https://github.com/async-graphql/async-graphql/issues/710)\n\n## [3.0.0-alpha.2] 2021-11-16\n\n- Change the signature of the `connection::query` function to allow the callback to use any type that implements `Into<Error>`.\n- Remove `ResolverError` and use `Error::new_with_source` instead.\n- Add `ErrorExtensionValues::unset` method.\n- Use the `SimpleObject` macro and the `InputObject` macro at the same time.\n- Types that are not referenced will be hidden in introspection.\n- Make the API of integrations is more consistent.\n- Remove `async-graphql-tide`.\n- Rework validators. [Book](https://async-graphql.github.io/async-graphql/en/input_value_validators.html)\n- Rework guards. [Book](https://async-graphql.github.io/async-graphql/en/field_guard.html)\n\n## [2.11.3] 2021-11-13\n\n- Implemented CursorType for i32/i64. [#701](https://github.com/async-graphql/async-graphql/pull/701)\n- An error is returned when the number fails to parse. [#704](https://github.com/async-graphql/async-graphql/issues/704)\n- Fix Federation entity union is empty during schema introspection. [#700](https://github.com/async-graphql/async-graphql/issues/700)\n\n## [2.11.2] 2021-11-11\n\n- Fix the problem that `EmptyMutation` may cause when used in `MergedObject`. [#694](https://github.com/async-graphql/async-graphql/issues/694)\n- If a GraphQL name conflict is detected when creating schema, it will cause panic. [#499](https://github.com/async-graphql/async-graphql/issues/499)\n\n## [2.11.1] 2021-11-07\n\n- Add `chrono::Duration` custom scalar. [#689](https://github.com/async-graphql/async-graphql/pull/689)\n- Implement `From<Option<Option<T>>>` for `MaybeUndefined<T>`.\n- Add `MaybeUndefined::as_opt_ref`, `MaybeUndefined::as_opt_deref`, `MaybeUndefined::map`, `MaybeUndefined::map_value`, `MaybeUndefined::contains`, `MaybeUndefined::contains_value`, and `MaybeUndefined::transpose` methods.\n- Made `MaybeUndefined::is_undefined`, `MaybeUndefined::is_null`, `MaybeUndefined::is_value`, `MaybeUndefined::value` and `MaybeUndefined::as_opt_ref` const.\n- Add `ResolverError` type. [#671](https://github.com/async-graphql/async-graphql/issues/671)\n- [async-graphql-axum] Bump axum from `0.2.5` to `0.3`.\n- [async-graphql-poem] Export the HTTP headers in the `Context`.\n\n## [2.11.0] 2021-11-03\n\n- Use Rust `2021` edition.\n- Subscription typename - [GraphQL - October 2021] [#681](https://github.com/async-graphql/async-graphql/issues/681)\n- Allow directive on variable definition - [GraphQL - October 2021] [#678](https://github.com/async-graphql/async-graphql/issues/678)\n- Specified By - [GraphQL - October 2021] [#677](https://github.com/async-graphql/async-graphql/issues/677)\n- Add `specified_by_url` for `Tz`, `DateTime<Tz>`, `Url`, `Uuid` and `Upload` scalars.\n- Number value literal lookahead restrictions - [GraphQL - October 2021] [#685](https://github.com/async-graphql/async-graphql/issues/685)\n\n## [2.10.8] 2021-10-26\n\n- [async-graphql-poem] Bump poem to `1.0.13`. \n\n## [2.10.6] 2021-10-26\n\n- Add derived for object & simple object & complex object. [#667](https://github.com/async-graphql/async-graphql/pull/667) [#670](https://github.com/async-graphql/async-graphql/pull/670)\n- Respect query object field order. [#612](https://github.com/async-graphql/async-graphql/issues/612)\n\n## [2.10.5] 2021-10-22\n\n- Bump poem from `0.6.6` to `1.0.7`. \n\n## [2.10.4] 2021-10-22\n\n- Implement `Default` for ID #659.\n- Implement `ScalarType` for `bson::Bson` and `bson::Document`. [#661](https://github.com/async-graphql/async-graphql/pull/661)\n- Add `CharsMinLength` and `CharsMaxLength` validators. [#656](https://github.com/async-graphql/async-graphql/pull/656)\n- Fix the `Subscription` macro to work on Rust 2021. [#665](https://github.com/async-graphql/async-graphql/pull/665)\n\n## [2.10.3] 2021-10-12\n\n- Add `visible` macro argument for union type. [#655](https://github.com/async-graphql/async-graphql/pull/655)\n\n## [2.10.2] 2021-09-29\n\n- Add concrete names support for `Object` macro. [#633](https://github.com/async-graphql/async-graphql/issues/633)\n- Add `Lookahead::selection_fields` method. [#643](https://github.com/async-graphql/async-graphql/pull/643)\n\n## [2.10.1] 2021-09-24\n\n- Add `DataLoader::enable_all_cache` and `DataLoader::enable_cache` methods. [#642](https://github.com/async-graphql/async-graphql/issues/642)\n- Change the execution order of `chain` and `race` guards. [#614](https://github.com/async-graphql/async-graphql/issues/614)\n- Change log level from `error` to `info`. [#518](https://github.com/async-graphql/async-graphql/issues/518)\n\n## [2.10.0] 2021-09-17\n\n- Add support for `graphql-ws` pings. [#635](https://github.com/async-graphql/async-graphql/issues/635)\n- Add feature gate `websocket` for async-graphql-tide. [#636](https://github.com/async-graphql/async-graphql/issues/636)\n- Implement GraphQL enum to `Value` conversion. [#617](https://github.com/async-graphql/async-graphql/issues/617)\n- Implement `ScalarType` for `HashMap`/`BTreeMap` to use `ToString`/`FromStr`. [#585](https://github.com/async-graphql/async-graphql/issues/585)\n\n## [2.9.15] 2021-09-10\n\n- Added Axum error handling. [#629](https://github.com/async-graphql/async-graphql/pull/629)\n- Bump bson from `2.0.0-beta.1` to `2.0.0`. [#628](https://github.com/async-graphql/async-graphql/pull/628)\n\n## [2.9.14] 2021-09-03\n\n- Add support for [serde_cbor](https://crates.io/crates/serde_cbor). [#619](https://github.com/async-graphql/async-graphql/pull/619)\n\n## [2.9.13] 2021-09-01\n\n- Released [`Axum`](https://github.com/tokio-rs/axum) integration. [`async-graphql-axum`](https://crates.io/crates/async-graphql-axum)\n\n## [2.9.12] 2021-08-24\n\n- Add integration for [`Poem`](https://github.com/poem-web/poem).\n- Ignore items flagged `@skip` in `SelectionField` and `Lookahead`. [#605](https://github.com/async-graphql/async-graphql/pull/605)\n\n## [2.9.11] 2021-08-22\n\n- Implement `From<MaybeUndefined<T>> for Option<Option<T>>`. [#599](https://github.com/async-graphql/async-graphql/issues/599)\n- Add human readable for serializer. [#604](https://github.com/async-graphql/async-graphql/pull/604)\n\n## [2.9.10] 2021-08-05\n\n- Change `GraphQLPlaygroundConfig::with_setting` to accept `impl Into<Value>` [#583](https://github.com/async-graphql/async-graphql/issues/583)\n- Remove unnecessary unwrap in multipart handler [#594](https://github.com/async-graphql/async-graphql/pull/594)\n\n## [2.9.9] 2021-07-20\n\n- Add binary types to `ConstValue` and `Value`. [#569](https://github.com/async-graphql/async-graphql/issues/569)\n- Implemented `OutputType` for [Bytes](https://docs.rs/bytes/1.0.1/bytes/struct.Bytes.html).\n- Changed Lookahead to support multiple fields. [#574](https://github.com/async-graphql/async-graphql/issues/574)\n- Implement `TryFrom<&[SelectionField<'a>]>` for `Lookahead<'a>`. [#575](https://github.com/async-graphql/async-graphql/issues/575)\n- Attach custom HTTP headers to the response when an error occurs. [#572](https://github.com/async-graphql/async-graphql/issues/572)\n- Allow field visible to support paths. [#578](https://github.com/async-graphql/async-graphql/pull/578)\n- Add `list` attribute to the input value validator. [#579](https://github.com/async-graphql/async-graphql/issues/579)\n\n## [2.9.8] 2021-07-12\n\n- Add Extensions in Error of `InputValueValidator`. [#564](https://github.com/async-graphql/async-graphql/pull/564)\n\n- Fix SDL print is not stable. [#547](https://github.com/async-graphql/async-graphql/issues/547)\n\n## [2.9.7] 2021-07-04\n\n- Add support for generic `ComplexObject`. [#562](https://github.com/async-graphql/async-graphql/pull/562)\n\n## [2.9.6] 2021-07-02\n\n- Implement `From<SelectionField>` for `Lookahead`. [#557](https://github.com/async-graphql/async-graphql/issues/557)\n  \n- Add Decimal scalar (from `rust_decimal` crate) [#559](https://github.com/async-graphql/async-graphql/pull/559)\n\n## [2.9.5] 2021-06-29\n\n- Allows to get the actual field name and alias in `ResolveInfo`. [#551](https://github.com/async-graphql/async-graphql/issues/551)\n\n## [2.9.4] 2021-06-21\n\n- Fix the bug that `MergedObject` may cause panic. [#539](https://github.com/async-graphql/async-graphql/issues/539#issuecomment-862209442)\n\n## [2.9.3] 2021-06-17\n\n- Bump upstream crate `bson` from `v1.2.0` to `v2.0.0-beta.1`. [#516](https://github.com/async-graphql/async-graphql/pull/516)\n\n- Add `serial` attribute for `Object`, `SimpleObject` and `MergedObject` macros. [#539](https://github.com/async-graphql/async-graphql/issues/539)\n\n- Remove the `static` constraint of the `receive_body` and `receive_batch_body` functions. [#544](https://github.com/async-graphql/async-graphql/issues/544)\n\n- Implement `InputType` and `OutputType` for `[T; N]` array.\n\n## [2.9.2] 2021-06-10\n\n- Allow field guards to support paths. [#536](https://github.com/async-graphql/async-graphql/issues/536)\n  \n- Add the `operation_name` to `Extension::execute` method. [#538](https://github.com/async-graphql/async-graphql/issues/538)\n\n## [2.9.1] 2021-06-08\n\n- Rework error propagation. [#531](https://github.com/async-graphql/async-graphql/issues/531)\n\n## [2.9.0] 2021-06-07\n\n- Add support for returning multiple resolver errors. [#531](https://github.com/async-graphql/async-graphql/issues/531)\n\n- Bump upstream crate `multer` from `v1.2.2` to `v2.0.0`.\n\n- Aligned NaiveDateTime formatting with DateTime. [#535](https://github.com/async-graphql/async-graphql/pull/535)\n\n## [2.8.6] 2021-06-01\n\n- Allow the ability to set GraphQL Playground settings. [#508](https://github.com/async-graphql/async-graphql/pull/508)\n\n- WebSocket is now generic in graphql_subscription_upgrade functions. [#530](https://github.com/async-graphql/async-graphql/pull/530)\n\n- Removed `Copy` trait from initializer in `graphql_subscription_with_data`. [#530](https://github.com/async-graphql/async-graphql/pull/530)\n\n## [2.8.5] 2021-05-11\n\n- If `InputObject` contains an unnamed field, the correct error message will be given. [#498](https://github.com/async-graphql/async-graphql/issues/498)\n\n- Added `Websocket::with_message_stream` for client message customization. [#501](https://github.com/async-graphql/async-graphql/pull/501)\n\n- Added the `Secret` type using [secrecy](https://crates.io/crates/secrecy) crate.\n\n## [2.8.4] 2021-04-23\n\n- Fix the problem that the `ComplexObject` macro cannot work due to the `secret` attribute.\n\n## [2.8.3] 2021-04-12\n\n- Fixed an error in exporting Federation SDL.\n\n## [2.8.2] 2021-04-09\n\n- Now when the resolver returns the `Result` type, `E` can be all types that implement `async_graphql::Into<Error>`.\n\n## [2.8.1] 2021-04-08\n\n### Fixed\n\n- Fix stack overflow during Registry::create_type for recursive type while running Schema::build. [#474](https://github.com/async-graphql/async-graphql/issues/474)\n\n### Added\n\n- Add `secret` attribute for arguments, they will not appear in the log.\n\n```rust\n#[Object]\nimpl Query {\n    async fn login(&self, username:String, #[graphql(secret)] password: String) -> i32 {\n        todo!()\n    }\n}\n```\n\n## [2.8.0] 2021-04-05\n\n### Changed\n\n- Rework `Extension`, now fully supports asynchronous, better to use than before, and can achieve more features, it contains a lot of changes. _(if you don't have a custom extension, it will not cause the existing code to fail to compile)_\n  \n### Added\n\n- Add `async_graphql_warp::graphql_protocol`, `async_graphql_warp::graphql_subscription_upgrade` and `async_graphql_warp::graphql_subscription_upgrade_with_data` to control WebSocket subscription more finely. \n\n## [2.7.4] 2021-04-02\n\n- Add the `BuildHasher` generic parameter to `dataloader::HashMapCache` to allow custom hashing algorithms. [#455](https://github.com/async-graphql/async-graphql/issues/455)\n\n## [2.7.3] 2021-04-02\n \n## Added \n\n- Add cache support for DataLoader. [#455](https://github.com/async-graphql/async-graphql/issues/455)\n- Implements `ScalarType` for `serde_json::Value`.\n- Add `SelectionField::alias` and `SelectionField::arguments` methods.\n\n## Fixed  \n\n- Prevent Warp WS Close, Ping, and Pong messages from being parsed as GraphQL [#459](https://github.com/async-graphql/async-graphql/pull/459)\n- Fix Schema::sdl() does not include subscription definitions. [#464](https://github.com/async-graphql/async-graphql/issues/464)\n\n## [2.7.2] 2021-04-01\n\n## Removed\n\n- Remove `SchemaBuilder::override_name` method. [#437](https://github.com/async-graphql/async-graphql/issues/437)\n  \n## Added\n\n- Add `name` and `visible` attributes for `Newtype` macro for define a new scalar. [#437](https://github.com/async-graphql/async-graphql/issues/437)\n- `NewType` macro now also implements `From<InnerType>` and `Into<InnerType>`.\n\n## [2.7.1] 2021-03-31\n\n- Add `Request::disable_introspection` method. [#456](https://github.com/async-graphql/async-graphql/issues/456)\n\n## [2.7.0] 2021-03-27\n\n## Fixed\n\n- Fix chrono-tz integration. [#452](https://github.com/async-graphql/async-graphql/pull/452)\n\n## Changed\n\n- Rework Extension & TracingExtension & OpenTelemetryExtension\n\n## [2.6.5] - 2021-03-24\n\n- In websocket, if the client sends `start` before `connection_init`, the connection will be immediately disconnected and return `1011` error. [#451](https://github.com/async-graphql/async-graphql/issues/451)\n\n## [2.6.4] - 2021-03-22\n\n- Fix docs.\n\n## [2.6.3] - 2021-03-22\n\n### Added\n\n- Add `extension::OpenTelemetry`.\n\n### Removed\n\n- Remove `TracingConfig`, now Request span always takes the current span as the parent, so this option is no longer needed.\n- Remove `multipart` feature.\n\n### Changed\n\n- Now all features are not activated by default.\n\n## [2.6.2] - 2021-03-20\n\n- Add `SchemaBuilder::enable_subscription_in_federation` method.  [#449](https://github.com/async-graphql/async-graphql/issues/449)\n\n## [2.6.1] - 2021-03-19\n\n- Fix tracing extension doesn't work with async code. [#448](https://github.com/async-graphql/async-graphql/issues/448)\n\n## [2.6.0] - 2021-03-18\n\n- Add [ComplexObject](https://docs.rs/async-graphql/2.6.0/async_graphql/attr.ComplexObject.html) macro.\n\n## [2.5.14] - 2021-03-14\n\n- Add `DataLoader::loader` method. [#441](https://github.com/async-graphql/async-graphql/issues/441)\n- Fix the validation does not work on some inline fragments.\n\n## [2.5.13] - 2021-03-09\n\n- Support generics in Subscription types. [#438](https://github.com/async-graphql/async-graphql/pull/438)\n\n## [2.5.12] - 2021-03-09\n\n- Remove unnecessary Box from WebSocket messages.\n- Export subscription type to Federation SDL. (for [GraphGate](https://github.com/async-graphql/graphgate) 😁)\n- Add `extends` attribute for derive macros Subscription and MergedSubscription.\n- Add `SchemaBuilder::override_name` method. [#437](https://github.com/async-graphql/async-graphql/issues/437)\n\n## [2.5.11] - 2021-03-07\n\n- Execute `_entity` requests in parallel. [#431](https://github.com/async-graphql/async-graphql/issues/431)\n\n## [2.5.10] - 2021-03-06\n\n- Add descriptions for the exported Federation SDL.\n\n## [2.5.9] - 2021-02-28\n\n### Changed\n\n- Moved `Variables` from `async_graphql::context::Variables` to `async_graphql::Variables`.\n\n## [2.5.8] - 2021-02-27\n\n### Added\n\n- Allow the `deprecation` attribute to have no reason.\n\n    ```rust\n    #[derive(SimpleObject)]\n    struct MyObject {\n        #[graphql(deprecation)]\n        a: i32,\n    \n        #[graphql(deprecation = true)]\n        b: i32,\n    \n        #[graphql(deprecation = false)]\n        c: i32,\n    \n        #[graphql(deprecation = \"reason\")]\n        d: i32,\n    }\n    ```\n\n## [2.5.7] - 2021-02-23\n\n### Fixed\n\n- Fix the problem that the borrowing lifetime returned by the `Context::data` function is too small.\n\n## [2.5.6] - 2021-02-23\n\n### Changed\n\n- When introspection is disabled, introspection related types are no longer registered.\n\n## [2.5.5] - 2021-02-22\n\n### Added\n\n- Add support for Federation [nested keys](https://www.apollographql.com/docs/federation/entities/#defining-a-compound-primary-key).\n\n## [2.5.4] - 2021-02-15\n\n### Fixed\n\n- Fixed the error that the directive locations `FIELD_DEFINITION` and `ENUM_VALUE` cannot be parsed.\n\n## [2.5.3] - 2021-02-13\n\n### Fixed\n\n- Fixed [#409](https://github.com/async-graphql/async-graphql/issues/409)\n\n## [2.5.2] - 2021-02-06\n\n### Added\n\n- Add subscription support for tide with [tide-websockets](https://crates.io/crates/tide-websockets).\n\n### Fixed\n\n- Fixed the bug that can accept subscription requests during the initialization of WebSocket.\n- Fixed GraphQL over WebSocket Protocol does not support ConnectionError events. [#406](https://github.com/async-graphql/async-graphql/issues/406)\n"
        },
        {
          "name": "Cargo.toml",
          "type": "blob",
          "size": 4.8720703125,
          "content": "[package]\nauthors = [\"sunli <scott_s829@163.com>\", \"Koxiaet\"]\ncategories = [\"network-programming\", \"asynchronous\"]\ndescription = \"A GraphQL server library implemented in Rust\"\ndocumentation = \"https://docs.rs/async-graphql/\"\nedition = \"2021\"\nrust-version = \"1.81.0\"\nhomepage = \"https://github.com/async-graphql/async-graphql\"\nkeywords = [\"futures\", \"async\", \"graphql\"]\nlicense = \"MIT OR Apache-2.0\"\nname = \"async-graphql\"\nreadme = \"README.md\"\nrepository = \"https://github.com/async-graphql/async-graphql\"\nversion = \"7.0.13\"\n\n[features]\napollo_persisted_queries = [\"lru\", \"sha2\"]\napollo_tracing = [\"chrono\"]\nemail-validator = [\"fast_chemail\"]\ncbor = [\"serde_cbor\"]\nchrono-duration = [\"chrono\", \"iso8601\"]\ndataloader = [\"futures-channel\", \"lru\"]\ndecimal = [\"rust_decimal\"]\ndefault = [\"email-validator\", \"tempfile\", \"playground\", \"graphiql\"]\npassword-strength-validator = [\"zxcvbn\"]\nstring_number = []\ntokio-sync = [\"tokio\"]\ntracing = [\"tracinglib\", \"tracing-futures\"]\nunblock = [\"blocking\"]\ndynamic-schema = []\ngraphiql = [\"handlebars\"]\naltair = [\"handlebars\", \"schemars\"]\nplayground = []\nraw_value = [\"async-graphql-value/raw_value\"]\nuuid-validator = [\"uuid\"]\nboxed-trait = [\"async-graphql-derive/boxed-trait\"]\n\n[[bench]]\nharness = false\nname = \"static_schema\"\n\n[dependencies]\nasync-graphql-derive.workspace = true\nasync-graphql-parser.workspace = true\nasync-graphql-value.workspace = true\n\nasync-stream = \"0.3.5\"\nasync-trait.workspace = true\nbytes.workspace = true\nfnv = \"1.0.7\"\nfutures-util = { workspace = true, features = [\n  \"std\",\n  \"io\",\n  \"sink\",\n  \"async-await\",\n  \"async-await-macro\",\n] }\nindexmap.workspace = true\nmime = \"0.3.17\"\nmulter = \"3.0.0\"\nnum-traits = \"0.2.18\"\npin-project-lite = \"0.2.14\"\nregex = \"1.10.4\"\nserde.workspace = true\nserde_json.workspace = true\nstatic_assertions_next = \"1.1.2\"\nthiserror.workspace = true\nbase64 = \"0.22.0\"\nserde_urlencoded = \"0.7.1\"\nhttp.workspace = true\nfutures-timer = \"3.0.3\"\n\n# Feature optional dependencies\nbson = { version = \"2.9.0\", optional = true, features = [\n  \"chrono-0_4\",\n  \"uuid-1\",\n] }\nchrono = { version = \"0.4.37\", optional = true, default-features = false, features = [\n  \"clock\",\n  \"std\",\n] }\nchrono-tz = { version = \"0.10.0\", optional = true }\nfast_chemail = { version = \"0.9.6\", optional = true }\nhashbrown = { version = \"0.14.5\", optional = true }\niso8601 = { version = \"0.6.1\", optional = true }\nlog = { version = \"0.4.21\", optional = true }\nopentelemetry = { version = \"0.27.0\", optional = true, default-features = false, features = [\n  \"trace\",\n] }\nrust_decimal = { version = \"1.35.0\", optional = true, default-features = false }\nbigdecimal = { version = \">=0.3.0, <0.5.0\", optional = true, default-features = false }\nsecrecy = { version = \"0.10.3\", optional = true }\nsmol_str = { version = \"0.3.1\", optional = true }\ntime = { version = \"0.3.36\", optional = true, features = [\n  \"parsing\",\n  \"formatting\",\n  \"macros\",\n] }\ntokio = { version = \"1.37.0\", features = [\"sync\"], optional = true }\ntracing-futures = { version = \"0.2.5\", optional = true, features = [\n  \"std-future\",\n  \"futures-03\",\n] }\ntracinglib = { version = \"0.1.40\", optional = true, package = \"tracing\" }\nurl = { version = \"2.5.0\", optional = true }\nuuid = { version = \"1.8.0\", optional = true, features = [\"v4\", \"serde\"] }\ntempfile = { version = \"3.10.1\", optional = true }\n\n# Non-feature optional dependencies\nblocking = { version = \"1.6.1\", optional = true }\nfutures-channel = { version = \"0.3.30\", optional = true }\nlru = { version = \"0.12.3\", optional = true }\nserde_cbor = { version = \"0.11.2\", optional = true }\nsha2 = { version = \"0.10.8\", optional = true }\nzxcvbn = { version = \"2.2.2\", optional = true }\nhandlebars = { version = \"5.1.2\", optional = true }\nschemars = { version = \"0.8.21\", optional = true }\n\n[dev-dependencies]\nfutures-channel = \"0.3.30\"\ntokio = { version = \"1.37.0\", features = [\n  \"macros\",\n  \"rt-multi-thread\",\n  \"sync\",\n  \"time\",\n] }\ncriterion = { version = \"0.5.1\", features = [\"html_reports\", \"async_tokio\"] }\nslab = \"0.4.9\"\n\n[package.metadata.docs.rs]\nall-features = true\nrustdoc-args = [\"--cfg\", \"docsrs\"]\n\n[workspace]\nresolver = \"2\"\nmembers = [\n  \"value\",\n  \"parser\",\n  \"derive\",\n  \"integrations/poem\",\n  \"integrations/actix-web\",\n  \"integrations/rocket\",\n  \"integrations/warp\",\n  \"integrations/axum\",\n  \"integrations/tide\",\n]\n\n[workspace.dependencies]\nasync-graphql = { path = \".\", version = \"7.0.13\", default-features = false }\nasync-graphql-derive = { path = \"derive\", version = \"7.0.13\" }\nasync-graphql-parser = { path = \"parser\", version = \"7.0.13\" }\nasync-graphql-value = { path = \"value\", version = \"7.0.13\" }\n\nserde = { version = \"1.0.197\", features = [\"derive\"] }\nserde_json = \"1.0.115\"\nindexmap = { version = \"2\", features = [\"serde\"] }\nbytes = { version = \"1.6.0\", features = [\"serde\"] }\nthiserror = \"1.0.58\"\nasync-trait = \"0.1.79\"\nfutures-util = { version = \"0.3.30\", default-features = false }\ntokio-util = { version = \"0.7.10\", default-features = false }\nhttp = { package = \"http\", version = \"1.1.0\" }\n"
        },
        {
          "name": "LICENSE-APACHE",
          "type": "blob",
          "size": 10.787109375,
          "content": "                              Apache License\r\n                        Version 2.0, January 2004\r\n                     http://www.apache.org/licenses/\r\n\r\nTERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\r\n\r\n1. Definitions.\r\n\r\n   \"License\" shall mean the terms and conditions for use, reproduction,\r\n   and distribution as defined by Sections 1 through 9 of this document.\r\n\r\n   \"Licensor\" shall mean the copyright owner or entity authorized by\r\n   the copyright owner that is granting the License.\r\n\r\n   \"Legal Entity\" shall mean the union of the acting entity and all\r\n   other entities that control, are controlled by, or are under common\r\n   control with that entity. For the purposes of this definition,\r\n   \"control\" means (i) the power, direct or indirect, to cause the\r\n   direction or management of such entity, whether by contract or\r\n   otherwise, or (ii) ownership of fifty percent (50%) or more of the\r\n   outstanding shares, or (iii) beneficial ownership of such entity.\r\n\r\n   \"You\" (or \"Your\") shall mean an individual or Legal Entity\r\n   exercising permissions granted by this License.\r\n\r\n   \"Source\" form shall mean the preferred form for making modifications,\r\n   including but not limited to software source code, documentation\r\n   source, and configuration files.\r\n\r\n   \"Object\" form shall mean any form resulting from mechanical\r\n   transformation or translation of a Source form, including but\r\n   not limited to compiled object code, generated documentation,\r\n   and conversions to other media types.\r\n\r\n   \"Work\" shall mean the work of authorship, whether in Source or\r\n   Object form, made available under the License, as indicated by a\r\n   copyright notice that is included in or attached to the work\r\n   (an example is provided in the Appendix below).\r\n\r\n   \"Derivative Works\" shall mean any work, whether in Source or Object\r\n   form, that is based on (or derived from) the Work and for which the\r\n   editorial revisions, annotations, elaborations, or other modifications\r\n   represent, as a whole, an original work of authorship. For the purposes\r\n   of this License, Derivative Works shall not include works that remain\r\n   separable from, or merely link (or bind by name) to the interfaces of,\r\n   the Work and Derivative Works thereof.\r\n\r\n   \"Contribution\" shall mean any work of authorship, including\r\n   the original version of the Work and any modifications or additions\r\n   to that Work or Derivative Works thereof, that is intentionally\r\n   submitted to Licensor for inclusion in the Work by the copyright owner\r\n   or by an individual or Legal Entity authorized to submit on behalf of\r\n   the copyright owner. For the purposes of this definition, \"submitted\"\r\n   means any form of electronic, verbal, or written communication sent\r\n   to the Licensor or its representatives, including but not limited to\r\n   communication on electronic mailing lists, source code control systems,\r\n   and issue tracking systems that are managed by, or on behalf of, the\r\n   Licensor for the purpose of discussing and improving the Work, but\r\n   excluding communication that is conspicuously marked or otherwise\r\n   designated in writing by the copyright owner as \"Not a Contribution.\"\r\n\r\n   \"Contributor\" shall mean Licensor and any individual or Legal Entity\r\n   on behalf of whom a Contribution has been received by Licensor and\r\n   subsequently incorporated within the Work.\r\n\r\n2. Grant of Copyright License. Subject to the terms and conditions of\r\n   this License, each Contributor hereby grants to You a perpetual,\r\n   worldwide, non-exclusive, no-charge, royalty-free, irrevocable\r\n   copyright license to reproduce, prepare Derivative Works of,\r\n   publicly display, publicly perform, sublicense, and distribute the\r\n   Work and such Derivative Works in Source or Object form.\r\n\r\n3. Grant of Patent License. Subject to the terms and conditions of\r\n   this License, each Contributor hereby grants to You a perpetual,\r\n   worldwide, non-exclusive, no-charge, royalty-free, irrevocable\r\n   (except as stated in this section) patent license to make, have made,\r\n   use, offer to sell, sell, import, and otherwise transfer the Work,\r\n   where such license applies only to those patent claims licensable\r\n   by such Contributor that are necessarily infringed by their\r\n   Contribution(s) alone or by combination of their Contribution(s)\r\n   with the Work to which such Contribution(s) was submitted. If You\r\n   institute patent litigation against any entity (including a\r\n   cross-claim or counterclaim in a lawsuit) alleging that the Work\r\n   or a Contribution incorporated within the Work constitutes direct\r\n   or contributory patent infringement, then any patent licenses\r\n   granted to You under this License for that Work shall terminate\r\n   as of the date such litigation is filed.\r\n\r\n4. Redistribution. You may reproduce and distribute copies of the\r\n   Work or Derivative Works thereof in any medium, with or without\r\n   modifications, and in Source or Object form, provided that You\r\n   meet the following conditions:\r\n\r\n   (a) You must give any other recipients of the Work or\r\n       Derivative Works a copy of this License; and\r\n\r\n   (b) You must cause any modified files to carry prominent notices\r\n       stating that You changed the files; and\r\n\r\n   (c) You must retain, in the Source form of any Derivative Works\r\n       that You distribute, all copyright, patent, trademark, and\r\n       attribution notices from the Source form of the Work,\r\n       excluding those notices that do not pertain to any part of\r\n       the Derivative Works; and\r\n\r\n   (d) If the Work includes a \"NOTICE\" text file as part of its\r\n       distribution, then any Derivative Works that You distribute must\r\n       include a readable copy of the attribution notices contained\r\n       within such NOTICE file, excluding those notices that do not\r\n       pertain to any part of the Derivative Works, in at least one\r\n       of the following places: within a NOTICE text file distributed\r\n       as part of the Derivative Works; within the Source form or\r\n       documentation, if provided along with the Derivative Works; or,\r\n       within a display generated by the Derivative Works, if and\r\n       wherever such third-party notices normally appear. The contents\r\n       of the NOTICE file are for informational purposes only and\r\n       do not modify the License. You may add Your own attribution\r\n       notices within Derivative Works that You distribute, alongside\r\n       or as an addendum to the NOTICE text from the Work, provided\r\n       that such additional attribution notices cannot be construed\r\n       as modifying the License.\r\n\r\n   You may add Your own copyright statement to Your modifications and\r\n   may provide additional or different license terms and conditions\r\n   for use, reproduction, or distribution of Your modifications, or\r\n   for any such Derivative Works as a whole, provided Your use,\r\n   reproduction, and distribution of the Work otherwise complies with\r\n   the conditions stated in this License.\r\n\r\n5. Submission of Contributions. Unless You explicitly state otherwise,\r\n   any Contribution intentionally submitted for inclusion in the Work\r\n   by You to the Licensor shall be under the terms and conditions of\r\n   this License, without any additional terms or conditions.\r\n   Notwithstanding the above, nothing herein shall supersede or modify\r\n   the terms of any separate license agreement you may have executed\r\n   with Licensor regarding such Contributions.\r\n\r\n6. Trademarks. This License does not grant permission to use the trade\r\n   names, trademarks, service marks, or product names of the Licensor,\r\n   except as required for reasonable and customary use in describing the\r\n   origin of the Work and reproducing the content of the NOTICE file.\r\n\r\n7. Disclaimer of Warranty. Unless required by applicable law or\r\n   agreed to in writing, Licensor provides the Work (and each\r\n   Contributor provides its Contributions) on an \"AS IS\" BASIS,\r\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\r\n   implied, including, without limitation, any warranties or conditions\r\n   of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\r\n   PARTICULAR PURPOSE. You are solely responsible for determining the\r\n   appropriateness of using or redistributing the Work and assume any\r\n   risks associated with Your exercise of permissions under this License.\r\n\r\n8. Limitation of Liability. In no event and under no legal theory,\r\n   whether in tort (including negligence), contract, or otherwise,\r\n   unless required by applicable law (such as deliberate and grossly\r\n   negligent acts) or agreed to in writing, shall any Contributor be\r\n   liable to You for damages, including any direct, indirect, special,\r\n   incidental, or consequential damages of any character arising as a\r\n   result of this License or out of the use or inability to use the\r\n   Work (including but not limited to damages for loss of goodwill,\r\n   work stoppage, computer failure or malfunction, or any and all\r\n   other commercial damages or losses), even if such Contributor\r\n   has been advised of the possibility of such damages.\r\n\r\n9. Accepting Warranty or Additional Liability. While redistributing\r\n   the Work or Derivative Works thereof, You may choose to offer,\r\n   and charge a fee for, acceptance of support, warranty, indemnity,\r\n   or other liability obligations and/or rights consistent with this\r\n   License. However, in accepting such obligations, You may act only\r\n   on Your own behalf and on Your sole responsibility, not on behalf\r\n   of any other Contributor, and only if You agree to indemnify,\r\n   defend, and hold each Contributor harmless for any liability\r\n   incurred by, or claims asserted against, such Contributor by reason\r\n   of your accepting any such warranty or additional liability.\r\n\r\nEND OF TERMS AND CONDITIONS\r\n\r\nAPPENDIX: How to apply the Apache License to your work.\r\n\r\n   To apply the Apache License to your work, attach the following\r\n   boilerplate notice, with the fields enclosed by brackets \"[]\"\r\n   replaced with your own identifying information. (Don't include\r\n   the brackets!)  The text should be enclosed in the appropriate\r\n   comment syntax for the file format. We also recommend that a\r\n   file or class name and description of purpose be included on the\r\n   same \"printed page\" as the copyright notice for easier\r\n   identification within third-party archives.\r\n\r\nCopyright [yyyy] [name of copyright owner]\r\n\r\nLicensed under the Apache License, Version 2.0 (the \"License\");\r\nyou may not use this file except in compliance with the License.\r\nYou may obtain a copy of the License at\r\n\r\n\thttp://www.apache.org/licenses/LICENSE-2.0\r\n\r\nUnless required by applicable law or agreed to in writing, software\r\ndistributed under the License is distributed on an \"AS IS\" BASIS,\r\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\nSee the License for the specific language governing permissions and\r\nlimitations under the License."
        },
        {
          "name": "LICENSE-MIT",
          "type": "blob",
          "size": 1.01953125,
          "content": "Permission is hereby granted, free of charge, to any\r\nperson obtaining a copy of this software and associated\r\ndocumentation files (the \"Software\"), to deal in the\r\nSoftware without restriction, including without\r\nlimitation the rights to use, copy, modify, merge,\r\npublish, distribute, sublicense, and/or sell copies of\r\nthe Software, and to permit persons to whom the Software\r\nis furnished to do so, subject to the following\r\nconditions:\r\n\r\nThe above copyright notice and this permission notice\r\nshall be included in all copies or substantial portions\r\nof the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF\r\nANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED\r\nTO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A\r\nPARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT\r\nSHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\r\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\r\nOF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR\r\nIN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\r\nDEALINGS IN THE SOFTWARE."
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 15.244140625,
          "content": "<div align=\"center\">\n<samp>\n\n# async-graphql\n\n**a high-performance graphql server library that's fully specification compliant**\n\n</samp>\n\n[Book](https://async-graphql.github.io/async-graphql/en/index.html) • [中文文档](https://async-graphql.github.io/async-graphql/zh-CN/index.html) • [Docs](https://docs.rs/async-graphql) • [GitHub repository](https://github.com/async-graphql/async-graphql) • [Cargo package](https://crates.io/crates/async-graphql)\n\n---\n\n![ci status](https://github.com/async-graphql/async-graphql/workflows/CI/badge.svg)\n[![code coverage](https://codecov.io/gh/async-graphql/async-graphql/branch/master/graph/badge.svg)](https://codecov.io/gh/async-graphql/async-graphql/)\n[![Unsafe Rust forbidden](https://img.shields.io/badge/unsafe-forbidden-success.svg)](https://github.com/rust-secure-code/safety-dance/)\n[![Crates.io version](https://img.shields.io/crates/v/async-graphql.svg)](https://crates.io/crates/async-graphql)\n[![docs.rs docs](https://img.shields.io/badge/docs-latest-blue.svg)](https://docs.rs/async-graphql)\n[![downloads](https://img.shields.io/crates/d/async-graphql.svg)](https://crates.io/crates/async-graphql)\n[![PRs Welcome](https://img.shields.io/badge/PRs-welcome-brightgreen.svg)](https://github.com/async-graphql/async-graphql/compare)\n\n_This crate uses `#![forbid(unsafe_code)]` to ensure everything is implemented in 100% safe Rust._\n\n</div>\n\n## Static schema\n\n```rs\nuse std::error::Error;\n\nuse async_graphql::{http::GraphiQLSource, EmptyMutation, EmptySubscription, Object, Schema};\nuse async_graphql_poem::*;\nuse poem::{listener::TcpListener, web::Html, *};\n\nstruct Query;\n\n#[Object]\nimpl Query {\n    async fn howdy(&self) -> &'static str {\n        \"partner\"\n    }\n}\n\n#[handler]\nasync fn graphiql() -> impl IntoResponse {\n    Html(GraphiQLSource::build().finish())\n}\n\n#[tokio::main]\nasync fn main() -> Result<(), Box<dyn Error>> {\n    // create the schema\n    let schema = Schema::build(Query, EmptyMutation, EmptySubscription).finish();\n\n    // start the http server\n    let app = Route::new().at(\"/\", get(graphiql).post(GraphQL::new(schema)));\n    println!(\"GraphiQL: http://localhost:8000\");\n    Server::new(TcpListener::bind(\"0.0.0.0:8000\"))\n        .run(app)\n        .await?;\n    Ok(())\n}\n```\n\n## Dynamic schema\nRequires the `dynamic-schema` feature to be enabled.\n\n```rs\nuse std::error::Error;\n\nuse async_graphql::{dynamic::*, http::GraphiQLSource};\nuse async_graphql_poem::*;\nuse poem::{listener::TcpListener, web::Html, *};\n\n#[handler]\nasync fn graphiql() -> impl IntoResponse {\n    Html(GraphiQLSource::build().finish())\n}\n\n#[tokio::main]\nasync fn main() -> Result<(), Box<dyn Error>> {\n    let query = Object::new(\"Query\").field(Field::new(\n        \"howdy\",\n        TypeRef::named_nn(TypeRef::STRING),\n        |_| FieldFuture::new(async { \"partner\" }),\n    ));\n\n    // create the schema\n    let schema = Schema::build(query, None, None).register(query).finish()?;\n\n    // start the http server\n    let app = Route::new().at(\"/\", get(graphiql).post(GraphQL::new(schema)));\n    println!(\"GraphiQL: http://localhost:8000\");\n    Server::new(TcpListener::bind(\"0.0.0.0:8000\"))\n        .run(app)\n        .await?;\n    Ok(())\n}\n```\n\n## ⚠️Security\n\nI strongly recommend limiting the [complexity and depth](https://async-graphql.github.io/async-graphql/en/depth_and_complexity.html?highlight=complex#limiting-query-complexity) of queries in a production environment to avoid possible DDos attacks.\n\n- [SchemaBuilder.limit_complexity](https://docs.rs/async-graphql/latest/async_graphql/struct.SchemaBuilder.html#method.limit_complexity)\n- [SchemaBuilder.limit_depth](https://docs.rs/async-graphql/latest/async_graphql/struct.SchemaBuilder.html#method.limit_depth)\n- [SchemaBuilder.limit_directives](https://docs.rs/async-graphql/latest/async_graphql/struct.SchemaBuilder.html#method.limit_directives)\n\n## Features\n\n- Static and dynamic schemas are fully supported\n- Fully supports async/await\n- Type safety\n- Rustfmt friendly (Procedural Macro)\n- Custom scalars\n- Minimal overhead\n- Easy integration ([poem](https://crates.io/crates/poem), [axum](https://crates.io/crates/axum), [actix-web](https://crates.io/crates/actix-web), [tide](https://crates.io/crates/tide), [warp](https://crates.io/crates/warp), [rocket](https://crates.io/crates/rocket) ...)\n- Upload files (Multipart request)\n- Subscriptions (WebSocket transport)\n- Custom extensions\n- Error extensions\n- Limit query complexity/depth\n- Batch queries\n- Apollo Persisted Queries\n- Apollo Tracing extension\n- Apollo Federation(v2)\n\n> **Note**: Minimum supported Rust version: 1.81.0 or later\n\n## Examples\n\nAll examples are in the [sub-repository](https://github.com/async-graphql/examples), located in the examples directory.\n\n```shell\ngit submodule update # update the examples repo\ncd examples && cargo run --bin [name]\n```\n\nFor more information, see the [sub-repository](https://github.com/async-graphql/examples) README.md.\n\n## Integrations\n\nIntegrations are what glue `async-graphql` with your web server, here are provided ones, or you can build your own!\n\n- Poem [async-graphql-poem](https://crates.io/crates/async-graphql-poem)\n- Actix-web [async-graphql-actix-web](https://crates.io/crates/async-graphql-actix-web)\n- Warp [async-graphql-warp](https://crates.io/crates/async-graphql-warp)\n- Tide [async-graphql-tide](https://crates.io/crates/async-graphql-tide)\n- Rocket [async-graphql-rocket](https://github.com/async-graphql/async-graphql/tree/master/integrations/rocket)\n- Axum [async-graphql-axum](https://github.com/async-graphql/async-graphql/tree/master/integrations/axum)\n\n## Crate features\n\nThis crate offers the following features. Most are not activated by default, except the integrations of GraphiQL (`graphiql`) and GraphQL Playground (`playground`):\n\n| feature                        | enables                                                                                                                                                                                       |\n|:-------------------------------|:----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| **`apollo_tracing`**           | Enable the [Apollo tracing extension](https://docs.rs/async-graphql/latest/async_graphql/extensions/struct.ApolloTracing.html).                                                               |\n| **`apollo_persisted_queries`** | Enable the [Apollo persisted queries extension](https://docs.rs/async-graphql/latest/async_graphql/extensions/apollo_persisted_queries/struct.ApolloPersistedQueries.html).                   |\n| **`boxed-trait`**              | Enables [`async-trait`](https://crates.io/crates/async-trait) for all traits.                                                                                                                 |\n| **`bson`**                     | Integrate with the [`bson` crate](https://crates.io/crates/bson).                                                                                                                             |\n| **`bigdecimal`**               | Integrate with the [`bigdecimal` crate](https://crates.io/crates/bigdecimal).                                                                                                                 |\n| **`cbor`**                     | Support for [serde_cbor](https://crates.io/crates/serde_cbor).                                                                                                                                |\n| **`chrono`**                   | Integrate with the [`chrono` crate](https://crates.io/crates/chrono).                                                                                                                         |\n| **`chrono-tz`**                | Integrate with the [`chrono-tz` crate](https://crates.io/crates/chrono-tz).                                                                                                                   |\n| **`dataloader`**               | Support [DataLoader](dataloader/struct.DataLoader.html).                                                                                                                                      |\n| **`decimal`**                  | Integrate with the [`rust_decimal` crate](https://crates.io/crates/rust_decimal).                                                                                                             |\n| **`dynamic-schema`**           | Support dynamic schema                                                                                                                                                                        |\n| **`fast_chemail`**             | Integrate with the [`fast_chemail` crate](https://crates.io/crates/fast_chemail).                                                                                                             |\n| **`graphiql`**                 | Enables the [GraphiQL IDE](https://github.com/graphql/graphiql) integration                                                                                                                   |\n| **`hashbrown`**                | Integrate with the [`hashbrown` crate](https://github.com/rust-lang/hashbrown).                                                                                                               |\n| **`log`**                      | Enable the [Logger extension](https://docs.rs/async-graphql/latest/async_graphql/extensions/struct.Logger.html).                                                                              |\n| **`opentelemetry`**            | Enable the [OpenTelemetry extension](https://docs.rs/async-graphql/latest/async_graphql/extensions/struct.OpenTelemetry.html).                                                                |\n| **`playground`**               | Enables the [GraphQL playground IDE](https://github.com/graphql/graphql-playground) integration                                                                                               |\n| **`rawvalue`**                 | Support raw values from [`serde_json`](https://crates.io/crates/serde_json)                                                                                                                   |\n| **`secrecy`**                  | Integrate with the [`secrecy` crate](https://crates.io/crates/secrecy).                                                                                                                       |\n| **`smol_str`**                 | Integrate with the [`smol_str` crate](https://crates.io/crates/smol_str).                                                                                                                     |\n| **`string_number`**            | Enable the [StringNumber](types/struct.StringNumber.html).                                                                                                                                    |\n| **`time`**                     | Integrate with the [`time` crate](https://github.com/time-rs/time).                                                                                                                           |\n| **`tracing`**                  | Enable the [Tracing extension](https://docs.rs/async-graphql/latest/async_graphql/extensions/struct.Tracing.html).                                                                            |\n| **`tempfile`**                 | Save the uploaded content in the temporary file.                                                                                                                                              |\n| **`tokio-sync`**               | Integrate with the [`tokio::sync::RwLock`](https://docs.rs/tokio/1.18.1/tokio/sync/struct.RwLock.html) and [`tokio::sync::Mutex`](https://docs.rs/tokio/1.18.1/tokio/sync/struct.Mutex.html). |\n| **`unblock`**                  | Support [Asynchronous reader for Upload](types/struct.Upload.html)                                                                                                                            |\n| **`uuid`**                     | Integrate with the [`uuid` crate](https://crates.io/crates/uuid).                                                                                                                             |\n| **`url`**                      | Integrate with the [`url` crate](https://crates.io/crates/url).                                                                                                                               |\n\n### Observability\n\nOne of the tools used to monitor your graphql server in production is Apollo Studio. Apollo Studio is a cloud platform that helps you build, monitor, validate, and secure your organization's data graph.\nAdd the extension crate [`async_graphql_apollo_studio_extension`](https://github.com/async-graphql/async_graphql_apollo_studio_extension) to make this avaliable.\n\n## Who's using `async-graphql` in production?\n\n- [Vector](https://vector.dev/)\n- [DiveDB](https://divedb.net)\n- [Kairos Sports tech](https://kairostech.io/)\n- [AxieInfinity](https://axieinfinity.com/)\n- [Nando's](https://www.nandos.co.uk/)\n- [Prima.it](https://www.prima.it/)\n- [VoxJar](https://voxjar.com/)\n- [Zenly](https://zen.ly/)\n- [Brevz](https://brevz.io/)\n- [thorndyke](https://www.thorndyke.ai/)\n- [My Data My Consent](https://mydatamyconsent.com/)\n\n## Community Showcase\n\n- [rust-actix-graphql-sqlx-postgresql](https://github.com/camsjams/rust-actix-graphql-sqlx-postgresql)\n  Using GraphQL with Rust and Apollo Federation\n- [entity-rs](https://github.com/chipsenkbeil/entity-rs) A simplistic framework based on TAO, Facebook's distributed database for Social Graph.\n- [vimwiki-server](https://github.com/chipsenkbeil/vimwiki-rs/tree/master/vimwiki-server) Provides graphql server to inspect and manipulate vimwiki files.\n- [Diana](https://github.com/arctic-hen7/diana) Diana is a GraphQL system for Rust that's designed to work as simply as possible out of the box, without sacrificing configuration ability.\n- [cindythink](https://www.cindythink.com/)\n- [sudograph](https://github.com/sudograph/sudograph)\n\n## Blog Posts\n\n- [Async GraphQL with Rust](https://formidable.com/blog/2022/async-graphql-with-rust-1/)\n- [GraphQL in Rust](https://romankudryashov.com/blog/2020/12/graphql-rust/)\n- [How to implement a Rust micro-service using Rocket, GraphQL, PostgreSQL](https://lionkeng.medium.com/how-to-implement-a-rust-micro-service-using-rocket-graphql-postgresql-a3f455f2ae8b)\n- [Running GraphQL on Lambda with Rust](https://dylananthony.com/posts/graphql-lambda-rust)\n\n## References\n\n- [GraphQL](https://graphql.org)\n- [GraphQL Multipart Request](https://github.com/jaydenseric/graphql-multipart-request-spec)\n- [Multipart HTTP protocol for GraphQL subscriptions](https://www.apollographql.com/docs/router/executing-operations/subscription-multipart-protocol/)\n- [GraphQL Cursor Connections Specification](https://facebook.github.io/relay/graphql/connections.htm)\n- [GraphQL over WebSocket Protocol](https://github.com/apollographql/subscriptions-transport-ws/blob/master/PROTOCOL.md)\n- [Apollo Tracing](https://github.com/apollographql/apollo-tracing)\n- [Apollo Federation](https://www.apollographql.com/docs/apollo-server/federation/introduction)\n\n## License\n\nLicensed under either of\n\n- Apache License, Version 2.0,\n  ([LICENSE-APACHE](./LICENSE-APACHE) or http://www.apache.org/licenses/LICENSE-2.0)\n- MIT license ([LICENSE-MIT](./LICENSE-MIT) or http://opensource.org/licenses/MIT)\n  at your option.\n"
        },
        {
          "name": "SECURITY.md",
          "type": "blob",
          "size": 0.8544921875,
          "content": "# Security Policy\n\n## Supported Versions\n\n| Version  | Supported          |\n|----------|--------------------|\n| >= 3.0.0 | :white_check_mark: |\n\n## Reporting a Vulnerability\n\n\nIf you discover a vulnerability, please do the following:\n\n- E-mail your findings to scott_s829 [at] 163 [dot] com.\n- Do not take advantage of the vulnerability or problem you have discovered, for example by downloading more data than necessary to demonstrate the vulnerability or deleting or modifying other people's data.\n- Do not reveal the problem to others until it has been resolved.\n- Do not use attacks on physical security, social engineering, distributed denial of service, spam or applications of third parties.\n- Do provide sufficient information to reproduce the problem, so we will be able to resolve it as quickly as possible. Complex vulnerabilities may require further explanation!\n"
        },
        {
          "name": "benches",
          "type": "tree",
          "content": null
        },
        {
          "name": "derive",
          "type": "tree",
          "content": null
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "examples",
          "type": "commit",
          "content": null
        },
        {
          "name": "integrations",
          "type": "tree",
          "content": null
        },
        {
          "name": "parser",
          "type": "tree",
          "content": null
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        },
        {
          "name": "value",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}