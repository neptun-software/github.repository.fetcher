{
  "metadata": {
    "timestamp": 1736709328675,
    "page": 735,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjc0MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "bodil/im-rs",
      "stars": 1510,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.0419921875,
          "content": "target/\ndist/\n**/*.rs.bk\nCargo.lock\n/im-rc\n"
        },
        {
          "name": ".travis.yml",
          "type": "blob",
          "size": 0.5048828125,
          "content": "language: rust\nrust:\n    - stable\n    - beta\n    - nightly\narch:\n    - amd64\n    - arm64\n    - ppc64le\nenv:\n    - CRATE=im\n    - CRATE=im-rc\n\ncache:\n    directories:\n        - /home/travis/.rustup\n        - /home/travis/.cargo\n        - /home/travis/target\n\ninstall:\n    - rustup update\n    - mkdir -p .cargo && echo '[build]' > .cargo/config && echo 'target-dir = \"/home/travis/target\"'\n      >> .cargo/config\n    - cargo install cargo-make; true\n    - cargo make prepare-release\n\nscript: cd dist/$CRATE; cargo test\n"
        },
        {
          "name": ".vscode",
          "type": "tree",
          "content": null
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 19.404296875,
          "content": "# Changelog\n\nAll notable changes to this project will be documented in this file.\n\nThe format is based on [Keep a Changelog](http://keepachangelog.com/en/1.0.0/) and this project\nadheres to [Semantic Versioning](http://semver.org/spec/v2.0.0.html).\n\n## [15.1.0] - 2022-04-29\n\n### Added\n\n-   `HashSet` now implements `From<Vector<A>>` and `From<&Vector<A>> where A: Clone`.\n\n### Fixed\n\n-   Fixed a long standing crash bug in `OrdMap`/`OrdSet`. (#154, #143, #152, #124)\n-   The `union` method on maps/sets will now prefer to mutate the larger set (which leads to less\n    work) rather than the first set. (#163)\n-   Ensure `TreeFocus` only implements `Send`/`Sync` when the underlying type does. (#157, #158)\n-   There was an issue where nodes in very large `OrdMap`s could overflow when removing an element\n    and cause a panic, which has now been fixed. (#141)\n-   Assorted doc cleanup. (#150, #173, #186, #194)\n\n## [15.0.0] - 2020-05-15\n\n### Changed\n\n-   Map iterators now return `(&K, &V)` and `(&K, &mut V)` respectively, to be consistent with\n    `std::collections`'s API. `DiffIter` for `OrdMap` has also changed in the same manner. (#121)\n\n### Removed\n\n-   The `pool` feature flag has been removed from the `im` version of the crate, as `refpool` no\n    longer supports threadsafe pools.\n-   `HashSet::iter_mut()` has been removed, because if you modify the hashed values in a hash set,\n    you break the hash set.\n\n### Added\n\n-   The `pool` feature flag was missing from the `im-rc` version of the crate, which is the version\n    where it's actually useful. It's been added now.\n-   `DiffIter` now has a `Debug` implementation.\n-   There is now a `Vector::is_inline()` method to determine whether a `Vector` is currently\n    inlined. (#129)\n\n### Fixed\n\n-   A smarter implementation of the sorting algorithm for `Vector` has improved the performance of\n    `Vector::sort` by approximately 2x. (#126)\n\n## [14.3.0] - 2020-03-03\n\n### Changed\n\n-   `proptest` strategies have been moved to `im::proptest`. The previous locations of the\n    strategies (`im::vector::proptest` etc) are still available, but have been deprecated.\n\n### Added\n\n-   `OrdSet` and `OrdMap` now have `get_prev` and `get_next` methods (with equivalent `get_prev_mut`\n    and `get_next_mut` methods for `OrdMap`) which will return the closest key match to the\n    requested key in the specified direction if the key isn't in the set. (#95)\n-   The `retain` method, inexplicably missing from `HashMap` but not `HashSet`, has been added.\n    (#120)\n-   The `get_mut` method on `OrdMap` was, equally inexplicably, private. It has now been made\n    public.\n\n## [14.2.0] - 2020-01-17\n\n### Added\n\n-   Both map types now have the `get_key_value()` method, corresponding to the equivalent\n    [additions](https://doc.rust-lang.org/std/collections/struct.BTreeMap.html#method.get_key_value)\n    to the standard library.\n-   The `ptr_eq` method has been added to all data types, allowing you to test whether two values\n    refer to the same content in memory, by testing for pointer equality. (#117)\n-   `HashMap` had lost its `Arbitrary` implementation for the `quickcheck` feature flag. It's now\n    been restored. (#118)\n-   Implementations for `Arbitrary` from the [`arbitrary`](https://crates.io/crates/arbitrary/)\n    crate have been added behind the `arbitrary` feature flag.\n\n### Fixed\n\n-   Fixed a bug when reversing a consuming iterator over a `Vector` by replacing the consuming\n    iterator with a much simpler and slightly more efficient version. (#116)\n\n## [14.1.0] - 2019-12-16\n\n### Added\n\n-   If you enable the `pool` feature flag, im now supports constructing data types using\n    [`refpool`](https://crates.io/crates/refpool) to speed up chunk allocation. The performance\n    boost will vary between use cases and operating systems, but generally at least a 10% speedup\n    can be expected when constructing a data type from an iterator, and the more complex an\n    operation is, the more likely it is to benefit from being able to quickly reallocate chunks.\n    Note that in order to use this feature, you have to construct your data types using the\n    `with_pool(&pool)` constructor, it's not enough just to enable the feature flag.\n\n## [14.0.0] - 2019-11-19\n\n### Changed\n\n-   As `sized-chunks` now requires a slightly more recent version of `rustc` to compile,\n    specifically version 1.36.0, so does `im`. This is a breaking change, but will of course only\n    affect your code if you're using an older `rustc`.\n\n### Fixed\n\n-   Fixed a quadratic time worst case scenario in the quicksort implementation for `Vector`. (#101)\n-   Fixed an edge case bug when splitting and joining large `Vector`s. (#105, #107)\n\n## [13.0.0] - 2019-05-18\n\nThe minimum supported Rust version is now 1.34.0.\n\n### Changed\n\n-   `im::iter::unfold` now gives you the owned state value rather than an immutable reference to it,\n    which makes it a little more useful.\n\n### Removed\n\n-   The deprecated `singleton` constructors have been removed. Please use `unit` instead.\n-   The deprecated methods `Vector::chunks` and `Vector::chunks_mut` have been removed in favour of\n    `Vector::leaves` and `Vector::leaves_mut` respectively. (#50)\n-   The deprecated reference to [`sized-chunks`](https://crates.io/crates/sized-chunks) has been\n    removed. If you need it, please use the `sized-chunks` crate directly.\n-   `im::iter::unfold_mut` has been removed, as there's no meaningful difference between it and\n    rust-std 1.34.0's `std::iter::from_fn` with a captured state variable.\n\n### Fixed\n\n-   `Vector` now uses\n    [`sized_chunks::InlineArray`](https://docs.rs/sized-chunks/0.3.0/sized_chunks/inline_array/struct.InlineArray.html)\n    instead of an `Empty` enum case to avoid allocation at very small sizes, letting you store a\n    handful of elements on the stack before needing to grow into a full chunk. This has a beneficial\n    effect on performance as well, as there's no pointer into the heap to dereference, making it\n    faster than `std::vec::Vec` in this configuration.\n-   Some complexity timings have been added and corrected. (#87)\n-   `OrdSet::is_subset(&self, other)` now returns immediately when `self` is larger than `other` and\n    thus could not possibly be a subset of it. (#87)\n\n## [12.3.4] - 2019-04-08\n\n### Changed\n\n-   `Clone` constraints have been further relaxed on maps and sets, so that you can now lookup and\n    iterate over them without requiring a `Clone` constraint (though you do still need `Clone` to\n    actually insert data into them to lookup or iterate over). (#81)\n\n### Fixed\n\n-   Enforces the latest bugfix release of sized-chunks. (#78)\n-   Another edge case bugfix to `Vector`'s size table handling. (#79)\n\n## [12.3.3] - 2019-03-11\n\n### Fixed\n\n-   A number of issues were fixed where `Vector`'s size table would get out of sync with the node\n    structure if exercised too much and cause erroneous behaviour. (#72, #74)\n-   Comprehensive generative tests were added to test all data structures through more unexpected\n    code paths.\n\n## [12.3.2] - 2019-03-05\n\n### Changed\n\n-   `Clone` constraints on all data structures, as well as relevant constraints on maps and sets,\n    have been relaxed where possible, so that you can now construct empty instances and call most\n    query methods without requiring values implement `Clone` etc. (#63)\n\n### Fixed\n\n-   Constructing an empty `Vector` will not allocate any heap memory, instead deferring allocation\n    until you perform an operation that would increase its length. (#65)\n-   Some bugs arising when using `Vector::append` repeatedly were fixed. (#67, #70)\n\n## [12.3.1] - 2019-02-19\n\n### Changed\n\n-   Unsafe chunks have been separated out into the `sized-chunks` crate, which is now a dependency\n    of `im`.\n\n## [12.3.0] - 2019-01-15\n\n### Added\n\n-   `singleton` methods have been deprecated and renamed to `unit`.\n-   `Vector::chunks` and `Vector::chunks_mut` have been deprecated and renamed to `leaves` and\n    `leaves_mut` to avoid confusion with `Vec::chunks`. (#50)\n\n### Fixed\n\n-   Fixed an issue where the `HashMap` draining iterator might access uninitialised memory leading\n    to undefined behaviour. (#60)\n-   Fixed multiple issues in `Vector::split_off` and `Vector::append` that would cause lookup errors\n    and unexpectedly unbalanced trees. (#55).\n\n## [12.2.0] - 2018-10-12\n\n### Added\n\n-   `OrdMap` and `OrdSet` now have a `range()` method which makes an iterator over a bounded subset\n    of the values. The improved iterator implementation is also considerably more efficient than the\n    previous (about an order of magnitude faster for nontrivial data sets). `iter()` has been\n    updated to take advantage of this, and is now just an alias for `range(..)`. (#27)\n-   `FocusMut` now has an `unmut` method to turn it into an immutable `Focus`, releasing its\n    exclusive hold on the underlying `Vector`.\n-   `Focus` now implements `Clone`.\n\n## [12.1.0] - 2018-09-25\n\n### Added\n\n-   Maps and sets now have the `clear` method just like `Vector`. (#46)\n\n### Changed\n\n-   Single chunk `Vector`s are no longer allocated directly on the stack, meaning that they're now\n    comparable in performance to `std::vec::Vec` rather than slightly faster, but they also won't\n    eat up your stack space quite as quickly, and they'll clone without copying and share structure\n    with clones as you'd expect.\n\n## [12.0.0] - 2018-08-30\n\nStarting with this release, the `arc` flag is gone, in favour of publishing `im` as two separate\ncrates: `im` (using `Arc`) and `im-rc` (using `Rc`). They're identical (and built from the same\ncode), except that `im` is thread safe and `im-rc` is a little bit more performant.\n\nThis is a major release as a consequence, but there should be no breaking code changes other than\nthe new default choice of reference counter.\n\n### Added\n\n-   The `Chunk` datatype that's used to build `Vector` and `OrdMap` has been exposed and made\n    generally usable. It's somewhere between a\n    [`GenericArray`](https://crates.io/crates/generic-array) and a ring buffer, offers O(1)\\* push\n    in either direction, and is generally hyperoptimised for its purpose of serving as nodes for\n    Bagwell tries, but it's also a powered up version of\n    [`GenericArray`](https://crates.io/crates/generic-array) that might be useful to others, hence\n    the public API.\n-   `Vector` now has `Focus` and `FocusMut` APIs for caching index lookups, yielding huge\n    performance gains when performing multiple adjacent index lookups. `Vector::iter` has been\n    reimplemented using this API, and is now much simpler and about twice as fast as a result, and\n    `Vector::iter_mut` now runs nearly an order of magnitude faster. Likewise, `Vector::sort` and\n    `Vector::retain` are now using `FocusMut` and run considerably faster as a result.\n-   `Focus` and `FocusMut` can also be used as stand ins for subslices through the `narrow` and\n    `split_at` methods. You can also iterate over foci, making this the most efficient way to\n    iterate over a subset of a `Vector`.\n-   `Vector` now implements [Rayon](https://crates.io/crates/rayon)'s parallel iterators behind the\n    `rayon` feature flag.\n\n### Changed\n\n-   As `std::ops::RangeBounds` is now stabilised in Rust 1.28, the `Vector::slice` method is now\n    unconditionally available on the stable channel.\n-   Union/difference/intersection/is_submap methods on `HashMap` and `OrdMap` that take functions\n    now take `FnMut` instead of `Fn`. This should not affect any existing code. (#34)\n-   `Vector::split_off` can now take an index equal to the length of the vector, yielding an empty\n    vector as the split result. (#33)\n-   `Vector::set` now returns the replaced value.\n\n### Fixed\n\n-   `Vector` is now represented as a single inline chunk until it grows larger than the chunk size,\n    making it even faster than `Vec` at small sizes, though `clone` could now be slower if the clone\n    is expensive (it's still absurdly fast for `A: Copy`).\n\n## [11.0.1] - 2018-07-23\n\n### Fixed\n\n-   Various performance improvements, amounting to a 5-10% speedup for both kinds of map/set.\n-   Fixed an edge case bug in `sort::quicksort`.\n\n## [11.0.0] - 2018-07-10\n\n### Changed\n\nThis is a major release with many breaking changes, and is intended to stabilise the API more than\nto denote that the rewrite is now production ready. You should expect future releases with\nsignificant performance improvements as well as additional APIs, but there should be no further\nmajor release with breaking changes in the immediate future, barring very serious unforeseen issues.\n\nSpecifically, you should expect imminent minor releases with performance improvements for `Vector`\nand `OrdMap`, for which I have a number of known optimisations that remain unimplemented.\n\n#### No More `Arc`\n\nAll data structures have been reworked to take values of `A: Clone` instead of `Arc<A>`, meaning\nthat there's less performance overhead (as well as mental overhead) when using values that clone\ncheaply. The performance gain when values are `A: Copy` is a factor of two or more. It's expected\nthat users should wrap values in `Arc` themselves when using values which are expensive to clone.\n\nData structures still use reference counters internally to reference nodes, but values are stored\ndirectly in the nodes with no further indirection. This is also good for cache locality.\n\nData structures now use `Rc` instead of `Arc` by default to do reference counting. If you need a\nthread safe version that implements `Send` and `Sync`, you can enable the `arc` feature on the\npackage to compile with `Arc` instead.\n\n#### `std::collections` Compatible API\n\nThe API has been reworked to align more closely with `std::collections`, favouring mutable\noperations by default, so that operations that were previously suffixed with `_mut` are now the\nstandard operations, and immutable operations which return a modified copy have been given different\nnames altogether. In short, all your code using previous versions of this library will no longer\nwork, and if it was relying heavily on immutable operations, it's recommended that you rewrite it to\nbe mutable by preference, but you should generally be able to make it work again by using the new\nmethod names for the immutable operations.\n\nHere is a list of the most notable changed method names for maps and sets:\n\n| Previous immutable | Current immutable | Previous mutable | Current mutable |\n| ------------------ | ----------------- | ---------------- | --------------- |\n| `insert`           | `update`          | `insert_mut`     | `insert`        |\n| `remove`           | `without`         | `remove_mut`     | `remove`        |\n| `pop`              | `extract`         | `pop_mut`        | `remove`        |\n\nYou should expect to be able to rewrite code using `std::collections::HashMap` and\n`std::collections::BTreeMap` with minimal or no changes using `im::HashMap` and `im::OrdMap`\nrespectively.\n\n`Vector` has been completely rewritten and has an API that aligns closely with\n`std::collections::VecDeque`, with very few immutable equivalents. It's expected that you should use\n`Vector::clone()` to take a snapshot when you need it rather than cause an implicit clone for each\noperation. (It's still O(1) and practically instant.)\n\nI'm considering adding back some of the immutable operations if I can come up with good names for\nthem, but for now, just `clone` it if you need it.\n\n#### RRB Vector\n\n`Vector` is now implemented as an\n[RRB tree](https://infoscience.epfl.ch/record/213452/files/rrbvector.pdf) with\n[smart head/tail chunking](http://gallium.inria.fr/~rainey/chunked_seq.pdf), obsoleting the previous\n[Hickey trie](https://hypirion.com/musings/understanding-persistent-vector-pt-1) implementation.\n\nRRB trees have generally similar performance characteristics to the Hickey trie, with the added\nbenefit of having O(log n) splitting and concatenation.\n\n| Operation       | RRB tree | Hickey trie | Vec    | VecDeque |\n| --------------- | -------- | ----------- | ------ | -------- |\n| Push front      | O(1)\\*   | O(log n)    | O(n)   | O(1)\\*   |\n| Push back       | O(1)\\*   | O(log n)    | O(1)\\* | O(1)\\*   |\n| Pop front       | O(1)\\*   | O(log n)    | O(n)   | O(1)\\*   |\n| Pop back        | O(1)\\*   | O(log n)    | O(1)   | O(1)\\*   |\n| Lookup by index | O(log n) | O(log n)    | O(1)   | O(1)     |\n| Split           | O(log n) | O(log n)    | O(n)   | O(n)     |\n| Join            | O(log n) | O(n)        | O(n)   | O(n)     |\n\n(Please note that the timings above are for the `im` version of the Hickey trie, based on the\n[Immutable.js](https://facebook.github.io/immutable-js/) implementation, which performs better than\nthe original Clojure version on splits and push/pop front, but worse on push/pop back).\n\nThe RRB tree is the most generally efficient list like data structure currently known, to my\nknowledge, but obviously it does not and cannot perform as well as a simple `Vec` on certain\noperations. It makes up for that by having no operations you need to worry about the performance\ncomplexity of: nothing you can do to an RRB tree is going to be more expensive than just iterating\nover it. For larger data sets, being able to concatenate (and, by extension, insert and remove at\narbitrary locations) several orders of magnitude faster than `Vec` could also be considered a\nselling point.\n\n#### No More `CatList` And `ConsList`\n\n`CatList` has been superseded by `Vector`, and `ConsList` was generally not very useful except in\nthe more peculiar edge cases where memory consumption matters more than performance, and keeping it\nin line with current API changes wasn't practical.\n\n#### No More Funny Words\n\nThough it breaks my heart, words like `cons`, `snoc`, `car`, `cdr` and `uncons` are no longer used\nin the `im` API, to facilitiate closer alignment with `std::collections`. Even the `head`/`tail`\npair is gone, though `head` and `last` remain as aliases for `front` and `back`.\n\n## [10.2.0] - 2018-04-15\n\n### Added\n\n-   Map/set methods which accept references to keys will now also take any value that's borrowable\n    to the key's type, ie. it will take a reference to a type `Borrowable` where the key implements\n    `Borrow<Borrowable>`. This is particularly handy for types such as `String` because you can now\n    pass `&str` to key lookups instead of `&String`. So, instead of the incredibly cumbersome\n    `map.get(&\"foo\".to_string())` you can just do `map.get(\"foo\")` when looking up a mapping for a\n    string literal.\n\n## [10.1.0] - 2018-04-12\n\n### Added\n\n-   `Vector`, `OrdMap` and `HashMap` now implement `Index` and `IndexMut`, allowing for syntax like\n    `map[key] = value`.\n-   Added `cons`, `snoc`, `uncons` and `unsnoc` aliases where they were missing.\n-   Everything now implements `Sum` and `Extend` where possible.\n\n### Changed\n\n-   Generalised `OrdMap`/`OrdSet`'s internal nodes so `OrdSet` now only needs to store pointers to\n    its values, not pairs of pointers to value and `Unit`. This has caused `OrdMap/Set`'s type\n    constraints to tighten somewhat - in particular, iteration over maps/sets whose keys don't\n    implement `Ord` is no longer possible, but as you would only have been able to create empty\n    instances of these, no sensible code should break because of this.\n-   `HashMap`/`HashSet` now also cannot be iterated over unless they implement `Hash + Eq`, with the\n    same note as above.\n-   Constraints on single operations that take closures on `HashMap` and `OrdMap` have been relaxed\n    from `Fn` to `FnOnce`. (Fixes #7.)\n\n### Fixed\n\n-   Hashes are now stored in `HashMap`s along with their associated values, removing the need to\n    recompute the hash when a value is reordered inside the tree.\n\n## [10.0.0] - 2018-03-25\n\n### Added\n\nThis is the first release to be considered reasonably stable. No changelog has been kept until now.\n"
        },
        {
          "name": "CODE_OF_CONDUCT.md",
          "type": "blob",
          "size": 3.150390625,
          "content": "# Contributor Covenant Code of Conduct\n\n## Our Pledge\n\nIn the interest of fostering an open and welcoming environment, we as\ncontributors and maintainers pledge to making participation in our project and\nour community a harassment-free experience for everyone, regardless of age, body\nsize, disability, ethnicity, gender identity and expression, level of experience,\neducation, socio-economic status, nationality, personal appearance, race,\nreligion, or sexual identity and orientation.\n\n## Our Standards\n\nExamples of behavior that contributes to creating a positive environment\ninclude:\n\n* Using welcoming and inclusive language\n* Being respectful of differing viewpoints and experiences\n* Gracefully accepting constructive criticism\n* Focusing on what is best for the community\n* Showing empathy towards other community members\n\nExamples of unacceptable behavior by participants include:\n\n* The use of sexualized language or imagery and unwelcome sexual attention or\n  advances\n* Trolling, insulting/derogatory comments, and personal or political attacks\n* Public or private harassment\n* Publishing others' private information, such as a physical or electronic\n  address, without explicit permission\n* Other conduct which could reasonably be considered inappropriate in a\n  professional setting\n\n## Our Responsibilities\n\nProject maintainers are responsible for clarifying the standards of acceptable\nbehavior and are expected to take appropriate and fair corrective action in\nresponse to any instances of unacceptable behavior.\n\nProject maintainers have the right and responsibility to remove, edit, or\nreject comments, commits, code, wiki edits, issues, and other contributions\nthat are not aligned to this Code of Conduct, or to ban temporarily or\npermanently any contributor for other behaviors that they deem inappropriate,\nthreatening, offensive, or harmful.\n\n## Scope\n\nThis Code of Conduct applies both within project spaces and in public spaces\nwhen an individual is representing the project or its community. Examples of\nrepresenting a project or community include using an official project e-mail\naddress, posting via an official social media account, or acting as an appointed\nrepresentative at an online or offline event. Representation of a project may be\nfurther defined and clarified by project maintainers.\n\n## Enforcement\n\nInstances of abusive, harassing, or otherwise unacceptable behavior may be\nreported by contacting the project team at admin@immutable.rs. All\ncomplaints will be reviewed and investigated and will result in a response that\nis deemed necessary and appropriate to the circumstances. The project team is\nobligated to maintain confidentiality with regard to the reporter of an incident.\nFurther details of specific enforcement policies may be posted separately.\n\nProject maintainers who do not follow or enforce the Code of Conduct in good\nfaith may face temporary or permanent repercussions as determined by other\nmembers of the project's leadership.\n\n## Attribution\n\nThis Code of Conduct is adapted from the [Contributor Covenant][homepage], version 1.4,\navailable at https://www.contributor-covenant.org/version/1/4/code-of-conduct.html\n\n[homepage]: https://www.contributor-covenant.org\n"
        },
        {
          "name": "Cargo.toml",
          "type": "blob",
          "size": 1.2646484375,
          "content": "[package]\nname = \"im\"\nversion = \"15.1.0\"\nauthors = [\"Bodil Stokke <bodil@bodil.org>\"]\nedition = \"2018\"\nrust-version = \"1.46.0\"\nlicense = \"MPL-2.0+\"\ndescription = \"Immutable collection datatypes\"\nrepository = \"https://github.com/bodil/im-rs\"\ndocumentation = \"http://immutable.rs/\"\nhomepage = \"http://immutable.rs/\"\nreadme = \"./README.md\"\ncategories = [\"data-structures\"]\nkeywords = [\"immutable\", \"persistent\", \"hamt\", \"b-tree\", \"rrb-tree\"]\nbuild = \"./build.rs\"\nexclude = [\n    \"dist/**\",\n    \"rc/**\",\n    \"release.toml\",\n    \"Makefile.toml\",\n    \"proptest-regressions/**\"\n]\n\n[package.metadata.docs.rs]\nall-features = true\n\n[lib]\npath = \"./src/lib.rs\"\n\n[build-dependencies]\nversion_check = \"0.9\"\n\n[features]\ndebug = []\n\n[dependencies]\ntypenum = \"1.12\"\nbitmaps = \"2\"\nsized-chunks = \"0.6.4\"\nrand_core = \"0.6\"\nrand_xoshiro = \"0.6\"\nquickcheck = { version = \"1\", optional = true }\nproptest = { version = \"1\", optional = true }\nserde = { version = \"1\", optional = true }\nrayon = { version = \"1\", optional = true }\nrefpool = { version = \"0.4\", optional = true }\narbitrary = { version = \"1.1\", optional = true }\n\n[dev-dependencies]\nproptest = \"1\"\nserde = \"1\"\nserde_json = \"1\"\nrayon = \"1\"\nrand = { version = \"0.8\", features = [\"small_rng\"] }\npretty_assertions = \"1\"\nmetrohash = \"1\"\nproptest-derive = \"0.3\"\n"
        },
        {
          "name": "LICENCE.md",
          "type": "blob",
          "size": 15.185546875,
          "content": "Mozilla Public License Version 2.0\n==================================\n\n### 1. Definitions\n\n**1.1. “Contributor”**\n    means each individual or legal entity that creates, contributes to\n    the creation of, or owns Covered Software.\n\n**1.2. “Contributor Version”**\n    means the combination of the Contributions of others (if any) used\n    by a Contributor and that particular Contributor's Contribution.\n\n**1.3. “Contribution”**\n    means Covered Software of a particular Contributor.\n\n**1.4. “Covered Software”**\n    means Source Code Form to which the initial Contributor has attached\n    the notice in Exhibit A, the Executable Form of such Source Code\n    Form, and Modifications of such Source Code Form, in each case\n    including portions thereof.\n\n**1.5. “Incompatible With Secondary Licenses”**\n    means\n\n* **(a)** that the initial Contributor has attached the notice described\n    in Exhibit B to the Covered Software; or\n* **(b)** that the Covered Software was made available under the terms of\n    version 1.1 or earlier of the License, but not also under the\n    terms of a Secondary License.\n\n**1.6. “Executable Form”**\n    means any form of the work other than Source Code Form.\n\n**1.7. “Larger Work”**\n    means a work that combines Covered Software with other material, in\n    a separate file or files, that is not Covered Software.\n\n**1.8. “License”**\n    means this document.\n\n**1.9. “Licensable”**\n    means having the right to grant, to the maximum extent possible,\n    whether at the time of the initial grant or subsequently, any and\n    all of the rights conveyed by this License.\n\n**1.10. “Modifications”**\n    means any of the following:\n\n* **(a)** any file in Source Code Form that results from an addition to,\n    deletion from, or modification of the contents of Covered\n    Software; or\n* **(b)** any new file in Source Code Form that contains any Covered\n    Software.\n\n**1.11. “Patent Claims” of a Contributor**\n    means any patent claim(s), including without limitation, method,\n    process, and apparatus claims, in any patent Licensable by such\n    Contributor that would be infringed, but for the grant of the\n    License, by the making, using, selling, offering for sale, having\n    made, import, or transfer of either its Contributions or its\n    Contributor Version.\n\n**1.12. “Secondary License”**\n    means either the GNU General Public License, Version 2.0, the GNU\n    Lesser General Public License, Version 2.1, the GNU Affero General\n    Public License, Version 3.0, or any later versions of those\n    licenses.\n\n**1.13. “Source Code Form”**\n    means the form of the work preferred for making modifications.\n\n**1.14. “You” (or “Your”)**\n    means an individual or a legal entity exercising rights under this\n    License. For legal entities, “You” includes any entity that\n    controls, is controlled by, or is under common control with You. For\n    purposes of this definition, “control” means **(a)** the power, direct\n    or indirect, to cause the direction or management of such entity,\n    whether by contract or otherwise, or **(b)** ownership of more than\n    fifty percent (50%) of the outstanding shares or beneficial\n    ownership of such entity.\n\n\n### 2. License Grants and Conditions\n\n#### 2.1. Grants\n\nEach Contributor hereby grants You a world-wide, royalty-free,\nnon-exclusive license:\n\n* **(a)** under intellectual property rights (other than patent or trademark)\n    Licensable by such Contributor to use, reproduce, make available,\n    modify, display, perform, distribute, and otherwise exploit its\n    Contributions, either on an unmodified basis, with Modifications, or\n    as part of a Larger Work; and\n* **(b)** under Patent Claims of such Contributor to make, use, sell, offer\n    for sale, have made, import, and otherwise transfer either its\n    Contributions or its Contributor Version.\n\n#### 2.2. Effective Date\n\nThe licenses granted in Section 2.1 with respect to any Contribution\nbecome effective for each Contribution on the date the Contributor first\ndistributes such Contribution.\n\n#### 2.3. Limitations on Grant Scope\n\nThe licenses granted in this Section 2 are the only rights granted under\nthis License. No additional rights or licenses will be implied from the\ndistribution or licensing of Covered Software under this License.\nNotwithstanding Section 2.1(b) above, no patent license is granted by a\nContributor:\n\n* **(a)** for any code that a Contributor has removed from Covered Software;\n    or\n* **(b)** for infringements caused by: **(i)** Your and any other third party's\n    modifications of Covered Software, or **(ii)** the combination of its\n    Contributions with other software (except as part of its Contributor\n    Version); or\n* **(c)** under Patent Claims infringed by Covered Software in the absence of\n    its Contributions.\n\nThis License does not grant any rights in the trademarks, service marks,\nor logos of any Contributor (except as may be necessary to comply with\nthe notice requirements in Section 3.4).\n\n#### 2.4. Subsequent Licenses\n\nNo Contributor makes additional grants as a result of Your choice to\ndistribute the Covered Software under a subsequent version of this\nLicense (see Section 10.2) or under the terms of a Secondary License (if\npermitted under the terms of Section 3.3).\n\n#### 2.5. Representation\n\nEach Contributor represents that the Contributor believes its\nContributions are its original creation(s) or it has sufficient rights\nto grant the rights to its Contributions conveyed by this License.\n\n#### 2.6. Fair Use\n\nThis License is not intended to limit any rights You have under\napplicable copyright doctrines of fair use, fair dealing, or other\nequivalents.\n\n#### 2.7. Conditions\n\nSections 3.1, 3.2, 3.3, and 3.4 are conditions of the licenses granted\nin Section 2.1.\n\n\n### 3. Responsibilities\n\n#### 3.1. Distribution of Source Form\n\nAll distribution of Covered Software in Source Code Form, including any\nModifications that You create or to which You contribute, must be under\nthe terms of this License. You must inform recipients that the Source\nCode Form of the Covered Software is governed by the terms of this\nLicense, and how they can obtain a copy of this License. You may not\nattempt to alter or restrict the recipients' rights in the Source Code\nForm.\n\n#### 3.2. Distribution of Executable Form\n\nIf You distribute Covered Software in Executable Form then:\n\n* **(a)** such Covered Software must also be made available in Source Code\n    Form, as described in Section 3.1, and You must inform recipients of\n    the Executable Form how they can obtain a copy of such Source Code\n    Form by reasonable means in a timely manner, at a charge no more\n    than the cost of distribution to the recipient; and\n\n* **(b)** You may distribute such Executable Form under the terms of this\n    License, or sublicense it under different terms, provided that the\n    license for the Executable Form does not attempt to limit or alter\n    the recipients' rights in the Source Code Form under this License.\n\n#### 3.3. Distribution of a Larger Work\n\nYou may create and distribute a Larger Work under terms of Your choice,\nprovided that You also comply with the requirements of this License for\nthe Covered Software. If the Larger Work is a combination of Covered\nSoftware with a work governed by one or more Secondary Licenses, and the\nCovered Software is not Incompatible With Secondary Licenses, this\nLicense permits You to additionally distribute such Covered Software\nunder the terms of such Secondary License(s), so that the recipient of\nthe Larger Work may, at their option, further distribute the Covered\nSoftware under the terms of either this License or such Secondary\nLicense(s).\n\n#### 3.4. Notices\n\nYou may not remove or alter the substance of any license notices\n(including copyright notices, patent notices, disclaimers of warranty,\nor limitations of liability) contained within the Source Code Form of\nthe Covered Software, except that You may alter any license notices to\nthe extent required to remedy known factual inaccuracies.\n\n#### 3.5. Application of Additional Terms\n\nYou may choose to offer, and to charge a fee for, warranty, support,\nindemnity or liability obligations to one or more recipients of Covered\nSoftware. However, You may do so only on Your own behalf, and not on\nbehalf of any Contributor. You must make it absolutely clear that any\nsuch warranty, support, indemnity, or liability obligation is offered by\nYou alone, and You hereby agree to indemnify every Contributor for any\nliability incurred by such Contributor as a result of warranty, support,\nindemnity or liability terms You offer. You may include additional\ndisclaimers of warranty and limitations of liability specific to any\njurisdiction.\n\n\n### 4. Inability to Comply Due to Statute or Regulation\n\nIf it is impossible for You to comply with any of the terms of this\nLicense with respect to some or all of the Covered Software due to\nstatute, judicial order, or regulation then You must: **(a)** comply with\nthe terms of this License to the maximum extent possible; and **(b)**\ndescribe the limitations and the code they affect. Such description must\nbe placed in a text file included with all distributions of the Covered\nSoftware under this License. Except to the extent prohibited by statute\nor regulation, such description must be sufficiently detailed for a\nrecipient of ordinary skill to be able to understand it.\n\n\n### 5. Termination\n\n**5.1.** The rights granted under this License will terminate automatically\nif You fail to comply with any of its terms. However, if You become\ncompliant, then the rights granted under this License from a particular\nContributor are reinstated **(a)** provisionally, unless and until such\nContributor explicitly and finally terminates Your grants, and **(b)** on an\nongoing basis, if such Contributor fails to notify You of the\nnon-compliance by some reasonable means prior to 60 days after You have\ncome back into compliance. Moreover, Your grants from a particular\nContributor are reinstated on an ongoing basis if such Contributor\nnotifies You of the non-compliance by some reasonable means, this is the\nfirst time You have received notice of non-compliance with this License\nfrom such Contributor, and You become compliant prior to 30 days after\nYour receipt of the notice.\n\n**5.2.** If You initiate litigation against any entity by asserting a patent\ninfringement claim (excluding declaratory judgment actions,\ncounter-claims, and cross-claims) alleging that a Contributor Version\ndirectly or indirectly infringes any patent, then the rights granted to\nYou by any and all Contributors for the Covered Software under Section\n2.1 of this License shall terminate.\n\n**5.3.** In the event of termination under Sections 5.1 or 5.2 above, all\nend user license agreements (excluding distributors and resellers) which\nhave been validly granted by You or Your distributors under this License\nprior to termination shall survive termination.\n\n\n### 6. Disclaimer of Warranty\n\n> Covered Software is provided under this License on an “as is”\n> basis, without warranty of any kind, either expressed, implied, or\n> statutory, including, without limitation, warranties that the\n> Covered Software is free of defects, merchantable, fit for a\n> particular purpose or non-infringing. The entire risk as to the\n> quality and performance of the Covered Software is with You.\n> Should any Covered Software prove defective in any respect, You\n> (not any Contributor) assume the cost of any necessary servicing,\n> repair, or correction. This disclaimer of warranty constitutes an\n> essential part of this License. No use of any Covered Software is\n> authorized under this License except under this disclaimer.\n\n### 7. Limitation of Liability\n\n> Under no circumstances and under no legal theory, whether tort\n> (including negligence), contract, or otherwise, shall any\n> Contributor, or anyone who distributes Covered Software as\n> permitted above, be liable to You for any direct, indirect,\n> special, incidental, or consequential damages of any character\n> including, without limitation, damages for lost profits, loss of\n> goodwill, work stoppage, computer failure or malfunction, or any\n> and all other commercial damages or losses, even if such party\n> shall have been informed of the possibility of such damages. This\n> limitation of liability shall not apply to liability for death or\n> personal injury resulting from such party's negligence to the\n> extent applicable law prohibits such limitation. Some\n> jurisdictions do not allow the exclusion or limitation of\n> incidental or consequential damages, so this exclusion and\n> limitation may not apply to You.\n\n\n### 8. Litigation\n\nAny litigation relating to this License may be brought only in the\ncourts of a jurisdiction where the defendant maintains its principal\nplace of business and such litigation shall be governed by laws of that\njurisdiction, without reference to its conflict-of-law provisions.\nNothing in this Section shall prevent a party's ability to bring\ncross-claims or counter-claims.\n\n\n### 9. Miscellaneous\n\nThis License represents the complete agreement concerning the subject\nmatter hereof. If any provision of this License is held to be\nunenforceable, such provision shall be reformed only to the extent\nnecessary to make it enforceable. Any law or regulation which provides\nthat the language of a contract shall be construed against the drafter\nshall not be used to construe this License against a Contributor.\n\n\n### 10. Versions of the License\n\n#### 10.1. New Versions\n\nMozilla Foundation is the license steward. Except as provided in Section\n10.3, no one other than the license steward has the right to modify or\npublish new versions of this License. Each version will be given a\ndistinguishing version number.\n\n#### 10.2. Effect of New Versions\n\nYou may distribute the Covered Software under the terms of the version\nof the License under which You originally received the Covered Software,\nor under the terms of any subsequent version published by the license\nsteward.\n\n#### 10.3. Modified Versions\n\nIf you create software not governed by this License, and you want to\ncreate a new license for such software, you may create and use a\nmodified version of this License if you rename the license and remove\nany references to the name of the license steward (except to note that\nsuch modified license differs from this License).\n\n#### 10.4. Distributing Source Code Form that is Incompatible With Secondary Licenses\n\nIf You choose to distribute Source Code Form that is Incompatible With\nSecondary Licenses under the terms of this version of the License, the\nnotice described in Exhibit B of this License must be attached.\n\n## Exhibit A - Source Code Form License Notice\n\n    This Source Code Form is subject to the terms of the Mozilla Public\n    License, v. 2.0. If a copy of the MPL was not distributed with this\n    file, You can obtain one at http://mozilla.org/MPL/2.0/.\n\nIf it is not possible or desirable to put the notice in a particular\nfile, then You may include the notice in a location (such as a LICENSE\nfile in a relevant directory) where a recipient would be likely to look\nfor such a notice.\n\nYou may add additional accurate notices of copyright ownership.\n\n## Exhibit B - “Incompatible With Secondary Licenses” Notice\n\n    This Source Code Form is \"Incompatible With Secondary Licenses\", as\n    defined by the Mozilla Public License, v. 2.0.\n"
        },
        {
          "name": "Makefile.toml",
          "type": "blob",
          "size": 6.3828125,
          "content": "[tasks.prepare-release]\ndependencies = [\"copy-release\", \"patch-release\"]\n\n[tasks.patch-release]\nscript_runner = \"@rust\"\nscript = [\n'''\nuse std::fs;\nuse std::io::Result;\nuse std::ffi::OsStr;\nuse std::path::{Path, PathBuf};\n\nconst FROM: &'static str = \"extern crate im\";\nconst TO: &'static str = \"extern crate im_rc as im\";\n\nfn patch_file(path: &Path) -> Result<()> {\n  let orig = fs::read_to_string(path)?;\n  let mut bits: Vec<_> = orig.split(FROM).collect();\n  if bits.len() > 1 {\n    let out = bits.join(TO);\n    fs::write(path, &out)?;\n  }\n  Ok(())\n}\n\nfn fix_imports(path: &Path) -> Result<()> {\n  for entry in fs::read_dir(path)? {\n    let entry = entry?;\n    let path = entry.path();\n    if path.is_dir() {\n      fix_imports(&path)?;\n    } else if path.extension() == Some(OsStr::new(\"rs\")) {\n      patch_file(&path)?;\n    }\n  }\n  Ok(())\n}\n\nfn main() {\n  let path = PathBuf::from(\"dist\").join(\"im-rc\");\n  fix_imports(&path);\n}\n'''\n]\n\n[tasks.copy-release]\ndependencies = [\"sync\"]\nscript_runner = \"@rust\"\nscript = [\n'''\n//! ```cargo\n//! [dependencies]\n//! toml_edit = \"0.1\"\n//! fs_extra = \"1.1\"\n//! glob = \"0.2\"\n//! ```\n#![allow(non_snake_case)]\nextern crate toml_edit;\nextern crate fs_extra;\nextern crate glob;\nuse std::fs;\nuse std::path::{Path, PathBuf};\nuse toml_edit::{Document, value};\n\nfn read_doc<P: AsRef<Path>>(name: P) -> Document {\n  let name: &Path = name.as_ref();\n  fs::read_to_string(name).expect(&format!(\"error reading {:?}\", name))\n    .parse::<Document>()\n    .expect(&format!(\"failed to parse TOML in {:?}\", name))\n}\n\nfn make_dist(root: &Path, target: &str, manifest: &str) -> PathBuf {\n  let path = root.join(target);\n  fs::create_dir_all(&path).unwrap();\n  let mut src = vec![\"src\".into(), \"build.rs\".into(), \"proptest-regressions\".into()];\n  for item in glob::glob(\"*.md\").unwrap() {\n    if let Ok(path) = item {\n      src.push(path);\n    }\n  }\n  fs_extra::copy_items(&src, &path, &fs_extra::dir::CopyOptions::new())\n    .expect(&format!(\"unable to copy files to {:?} target\", target));\n  fs::copy(manifest, path.join(\"Cargo.toml\"))\n    .expect(&format!(\"unable to copy Cargo.toml to {:?} target\", target));\n  path\n}\n\nfn main() {\n  // Prepare target folder\n  fs::remove_dir_all(\"dist\");\n  let path = PathBuf::from(\"dist\");\n\n  // Copy files into im and im-rc subfolders\n  make_dist(&path, \"im\", \"Cargo.toml\");\n  make_dist(&path, \"im-rc\", \"rc/Cargo.toml\");\n\n  // Patch im-rc/Cargo.toml paths\n  let rc_manifest_path = path.join(\"im-rc/Cargo.toml\");\n  let mut doc = read_doc(&rc_manifest_path);\n  let build = value(doc[\"package\"][\"build\"].as_str().unwrap()[1..].to_string());\n  doc[\"package\"][\"build\"] = build;\n  doc[\"package\"][\"readme\"] = value(\"../../README.md\".to_string());\n  let libpath = value(doc[\"lib\"][\"path\"].as_str().unwrap()[1..].to_string());\n  doc[\"lib\"][\"path\"] = libpath;\n  fs::write(&rc_manifest_path, doc.to_string())\n    .expect(&format!(\"unable to write {:?}!\", rc_manifest_path));\n}\n'''\n]\n\n[tasks.sync]\nscript_runner = \"@rust\"\nscript = [\n'''\n//! ```cargo\n//! [dependencies]\n//! toml_edit = \"0.1\"\n//! ```\nextern crate toml_edit;\nuse std::{env, process};\nuse std::fs::{read_to_string, write};\nuse toml_edit::{Document, Item, Table, Value};\n\nfn read_doc(name: &str) -> Document {\n  read_to_string(name).expect(&format!(\"error reading {:?}\", name))\n    .parse::<Document>()\n    .expect(&format!(\"failed to parse TOML in {:?}\", name))\n}\n\nfn compare_values(left: &Value, right: &Value) -> bool {\n  if left.is_integer() && (left.as_integer() == right.as_integer()) {\n    return true;\n  }\n  if left.is_float() && (left.as_float() == right.as_float()) {\n    return true;\n  }\n  if left.is_bool() && (left.as_bool() == right.as_bool()) {\n    return true;\n  }\n  if left.is_str() && (left.as_str() == right.as_str()) {\n    return true;\n  }\n  if left.is_date_time() && (left.as_date_time() == right.as_date_time()) {\n    return true;\n  }\n  if let (Some(left), Some(right)) = (left.as_array(), right.as_array()) {\n    if left.len() != right.len() {\n      return false;\n    }\n    for (lvalue, rvalue) in left.iter().zip(right.iter()) {\n      if !compare_values(lvalue, rvalue) {\n        return false;\n      }\n    }\n    return true;\n  }\n  if let (Some(left), Some(right)) = (left.as_inline_table(), right.as_inline_table()) {\n    if left.len() != right.len() {\n      return false;\n    }\n    for (key, value) in left.iter() {\n      if !right.contains_key(key) {\n        return false;\n      }\n      if !compare_values(value, &right.get(key).unwrap()) {\n        return false;\n      }\n    }\n    return true;\n  }\n  false\n}\n\nfn compare_tables(left: &Table, right: &Table) -> bool {\n  if left.len() != right.len() {\n    return false;\n  }\n  for (key, value) in left.iter() {\n    if !right.contains_key(key) {\n      return false;\n    }\n    if !compare(value, &right[key]) {\n      return false;\n    }\n  }\n  true\n}\n\nfn compare(left: &Item, right: &Item) -> bool {\n  match (left, right) {\n    (&Item::Value(ref left), &Item::Value(ref right)) => compare_values(left, right),\n    (&Item::Table(ref left), &Item::Table(ref right)) => compare_tables(left, right),\n    (&Item::ArrayOfTables(ref left), &Item::ArrayOfTables(ref right)) => {\n      if left.len() != right.len() {\n        return false;\n      }\n      for (ltable, rtable) in left.iter().zip(right.iter()) {\n        if !compare_tables(ltable, rtable) {\n          return false;\n        }\n      }\n      true\n    }\n    _ => false\n  }\n}\n\nfn main() {\n  let args: Vec<String> = env::args().skip(1).collect();\n  let command = args.get(0).cloned().unwrap_or(\"sync\".to_string());\n  let src = read_doc(\"./Cargo.toml\");\n  let mut out = read_doc(\"./rc/Cargo.toml\");\n  if &command == \"sync\" {\n    out[\"package\"][\"version\"] = src[\"package\"][\"version\"].clone();\n    out[\"dependencies\"] = src[\"dependencies\"].clone();\n    out[\"dev-dependencies\"] = src[\"dev-dependencies\"].clone();\n    out[\"build-dependencies\"] = src[\"build-dependencies\"].clone();\n    out[\"package.metadata.docs.rs\"] = src[\"build-dependencies\"].clone();\n    write(\"./rc/Cargo.toml\", out.to_string()).expect(\"unable to write rc/Cargo.toml!\");\n  } else if &command == \"check\" {\n    if !compare(&src[\"package\"][\"version\"], &out[\"package\"][\"version\"])\n    || !compare(&src[\"dependencies\"], &out[\"dependencies\"])\n    || !compare(&src[\"dev-dependencies\"], &out[\"dev-dependencies\"])\n    || !compare(&src[\"build-dependencies\"], &out[\"build-dependencies\"]) {\n      eprintln!(\"*** ERROR: Cargo.toml files are out of sync!\\n*** Please run `cargo make sync` and commit the changes.\");\n      process::exit(1);\n    }\n  }\n}\n'''\n]\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 0.8017578125,
          "content": "# im-rs\n\n[![Crate Status](https://img.shields.io/crates/v/im.svg)](https://crates.io/crates/im)\n\nBlazing fast immutable collection datatypes for Rust.\n\nComes in two versions: [`im`](https://crates.io/crates/im) (thread safe) and\n[`im-rc`](https://crates.io/crates/im-rc) (fast but not thread safe).\n\n## Documentation\n\n* [API docs](https://docs.rs/im/)\n\n## Licence\n\nCopyright 2017 Bodil Stokke\n\nThis software is subject to the terms of the Mozilla Public\nLicense, v. 2.0. If a copy of the MPL was not distributed with this\nfile, You can obtain one at http://mozilla.org/MPL/2.0/.\n\n## Code of Conduct\n\nPlease note that this project is released with a [Contributor Code of\nConduct][coc]. By participating in this project you agree to abide by its\nterms.\n\n[coc]: https://github.com/bodil/im-rs/blob/master/CODE_OF_CONDUCT.md\n"
        },
        {
          "name": "benches",
          "type": "tree",
          "content": null
        },
        {
          "name": "build.rs",
          "type": "blob",
          "size": 0.818359375,
          "content": "// This Source Code Form is subject to the terms of the Mozilla Public\n// License, v. 2.0. If a copy of the MPL was not distributed with this\n// file, You can obtain one at http://mozilla.org/MPL/2.0/.\n\nuse std::env;\n\nfn main() {\n    println!(\"cargo:rerun-if-changed=build.rs\");\n    if let Some(channel) = version_check::Channel::read() {\n        if channel.supports_features() {\n            println!(\"cargo:rustc-cfg=has_specialisation\");\n        }\n    }\n    let pkgname = env::var(\"CARGO_PKG_NAME\").expect(\"Cargo didn't set the CARGO_PKG_NAME env var!\");\n    let test_rc = env::var(\"IM_TEST_RC\").is_ok();\n    match pkgname.as_str() {\n        \"im\" => {\n            if !test_rc {\n                println!(\"cargo:rustc-cfg=threadsafe\")\n            }\n        }\n        \"im-rc\" => {}\n        _ => panic!(\"unexpected package name!\"),\n    }\n}\n"
        },
        {
          "name": "clippy.toml",
          "type": "blob",
          "size": 0.158203125,
          "content": "blacklisted-names = []\nsingle-char-binding-names-threshold = 15\n# I HAVE THE POWER OF OLEG\ntype-complexity-threshold = 999999\ncognitive-complexity-threshold = 30\n"
        },
        {
          "name": "fuzz",
          "type": "tree",
          "content": null
        },
        {
          "name": "proptest-regressions",
          "type": "tree",
          "content": null
        },
        {
          "name": "rc",
          "type": "tree",
          "content": null
        },
        {
          "name": "release.toml",
          "type": "blob",
          "size": 0.1982421875,
          "content": "sign-commit = true\npre-release-replacements = [\n    { file = \"CHANGELOG.md\", search = \"\\\\[Unreleased\\\\]\", replace = \"[{{version}}] - {{date}}\" }\n]\npre-release-hook = [\"cargo\", \"make\", \"prepare-release\"]\n"
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}