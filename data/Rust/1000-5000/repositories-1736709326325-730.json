{
  "metadata": {
    "timestamp": 1736709326325,
    "page": 730,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjczMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "bytecodealliance/rustix",
      "stars": 1518,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".cirrus.yml",
          "type": "blob",
          "size": 0.86328125,
          "content": "# Implementation derived from `.cirrus.yml` in Rust's libc bindings\n# at revision 7f4774e76bd5cb9ccb7140d71ef9be9c16009cdf.\n\ntask:\n  name: stable x86_64-unknown-freebsd-14\n  freebsd_instance:\n    image_family: freebsd-14-0\n  setup_script:\n    - curl https://sh.rustup.rs -sSf --output rustup.sh\n    - sh rustup.sh --default-toolchain stable -y --profile=minimal\n    - . $HOME/.cargo/env\n    - rustup default stable\n  test_script:\n    - . $HOME/.cargo/env\n    - cargo test --workspace --features=all-apis\n\ntask:\n  name: stable x86_64-unknown-freebsd-13\n  freebsd_instance:\n    image_family: freebsd-13-3\n  setup_script:\n    - curl https://sh.rustup.rs -sSf --output rustup.sh\n    - sh rustup.sh --default-toolchain stable -y --profile=minimal\n    - . $HOME/.cargo/env\n    - rustup default stable\n  test_script:\n    - . $HOME/.cargo/env\n    - cargo test --workspace --features=all-apis\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.017578125,
          "content": "target\nCargo.lock\n"
        },
        {
          "name": ".rustfmt.toml",
          "type": "blob",
          "size": 0.0673828125,
          "content": "# This file tells tools we use rustfmt. We use the default settings.\n"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 0.6962890625,
          "content": "# Changes from 0.38.x to 1.0\n\n`rustix::pipe::fcntl_getpipe_size` now returns the new size, which may be\ngreater than the requested size.\n\n`rustix::thread::FutexOperation` and `rustix::thread::futex` are removed. Use\nthe functions in the `rustix::thread::futex` module instead.\n\n`rustix::process::waitpid`'s return type changed from `WaitStatus` to\n`(Pid, WaitStatus)`, to additionally return the pid of the child.\n\nThe `SLAVE` flag in `rustix::mount::MountPropagationFlags` is renamed\nto `DOWNSTREAM`.\n\nThe \"cc\" feature is removed. It hasn't had any effect for several\nmajor releases.\n\nAll explicitly deprecated functions and types have been removed. Their\ndeprecation messages will have identified alternatives.\n"
        },
        {
          "name": "CODE_OF_CONDUCT.md",
          "type": "blob",
          "size": 3.4150390625,
          "content": "# Contributor Covenant Code of Conduct\n\n*Note*: this Code of Conduct pertains to individuals' behavior. Please also see the [Organizational Code of Conduct][OCoC].\n\n## Our Pledge\n\nIn the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to making participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, gender identity and expression, level of experience, nationality, personal appearance, race, religion, or sexual identity and orientation.\n\n## Our Standards\n\nExamples of behavior that contributes to creating a positive environment include:\n\n* Using welcoming and inclusive language\n* Being respectful of differing viewpoints and experiences\n* Gracefully accepting constructive criticism\n* Focusing on what is best for the community\n* Showing empathy towards other community members\n\nExamples of unacceptable behavior by participants include:\n\n* The use of sexualized language or imagery and unwelcome sexual attention or advances\n* Trolling, insulting/derogatory comments, and personal or political attacks\n* Public or private harassment\n* Publishing others' private information, such as a physical or electronic address, without explicit permission\n* Other conduct which could reasonably be considered inappropriate in a professional setting\n\n## Our Responsibilities\n\nProject maintainers are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response to any instances of unacceptable behavior.\n\nProject maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful.\n\n## Scope\n\nThis Code of Conduct applies both within project spaces and in public spaces when an individual is representing the project or its community. Examples of representing a project or community include using an official project e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event. Representation of a project may be further defined and clarified by project maintainers.\n\n## Enforcement\n\nInstances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting the Bytecode Alliance CoC team at [report@bytecodealliance.org](mailto:report@bytecodealliance.org). The CoC team will review and investigate all complaints, and will respond in a way that it deems appropriate to the circumstances. The CoC team is obligated to maintain confidentiality with regard to the reporter of an incident. Further details of specific enforcement policies may be posted separately.\n\nProject maintainers who do not follow or enforce the Code of Conduct in good faith may face temporary or permanent repercussions as determined by other members of the Bytecode Alliance's leadership.\n\n## Attribution\n\nThis Code of Conduct is adapted from the [Contributor Covenant][homepage], version 1.4, available at [http://contributor-covenant.org/version/1/4][version]\n\n[OCoC]: https://github.com/bytecodealliance/rustix/blob/main/ORG_CODE_OF_CONDUCT.md\n[homepage]: https://www.contributor-covenant.org\n[version]: https://www.contributor-covenant.org/version/1/4/\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 0.8349609375,
          "content": "# Contributing to rustix\n\nRustix is a [Bytecode Alliance] project. It follows the Bytecode Alliance's\n[Code of Conduct] and [Organizational Code of Conduct].\n\n## Testing\n\nTo keep compile times low, most features in rustix's API are behind cargo\nfeatures. A special feature, `all-apis` enables all APIs, which is useful\nfor testing.\n\n```console\ncargo test --features=all-apis\n```\n\nAnd, rustix has two backends, linux_raw and libc, and only one is used in\nany given build. To test with the libc backend explicitly, additionally\nenable the `use-libc` feature:\n\n```console\ncargo test --features=all-apis,use-libc\n```\n\nBeyond that, rustix's CI tests many targets and configurations. Asking for\nhelp is always welcome, and it's especially encouraged when the issue is\ngetting all the `cfg`s lined up to get everything compiling on all the\nconfigurations on CI.\n"
        },
        {
          "name": "COPYRIGHT",
          "type": "blob",
          "size": 0.8330078125,
          "content": "Short version for non-lawyers:\n\n`rustix` is triple-licensed under Apache 2.0 with the LLVM Exception,\nApache 2.0, and MIT terms.\n\n\nLonger version:\n\nCopyrights in the `rustix` project are retained by their contributors.\nNo copyright assignment is required to contribute to the `rustix`\nproject.\n\nSome files include code derived from Rust's `libstd`; see the comments in\nthe code for details.\n\nExcept as otherwise noted (below and/or in individual files), `rustix`\nis licensed under:\n\n - the Apache License, Version 2.0, with the LLVM Exception\n   <LICENSE-Apache-2.0_WITH_LLVM-exception> or\n   <http://llvm.org/foundation/relicensing/LICENSE.txt>\n - the Apache License, Version 2.0\n   <LICENSE-APACHE> or\n   <http://www.apache.org/licenses/LICENSE-2.0>,\n - or the MIT license\n   <LICENSE-MIT> or\n   <http://opensource.org/licenses/MIT>,\n\nat your option.\n"
        },
        {
          "name": "Cargo.toml",
          "type": "blob",
          "size": 10.08984375,
          "content": "[package]\nname = \"rustix\"\nversion = \"0.38.35\"\nauthors = [\n    \"Dan Gohman <dev@sunfishcode.online>\",\n    \"Jakub Konka <kubkon@jakubkonka.com>\",\n]\ndescription = \"Safe Rust bindings to POSIX/Unix/Linux/Winsock-like syscalls\"\ndocumentation = \"https://docs.rs/rustix\"\nlicense = \"Apache-2.0 WITH LLVM-exception OR Apache-2.0 OR MIT\"\nrepository = \"https://github.com/bytecodealliance/rustix\"\nedition = \"2021\"\nkeywords = [\"api\", \"file\", \"network\", \"safe\", \"syscall\"]\ncategories = [\"os::unix-apis\", \"date-and-time\", \"filesystem\", \"network-programming\"]\ninclude = [\"src\", \"build.rs\", \"Cargo.toml\", \"COPYRIGHT\", \"LICENSE*\", \"/*.md\", \"benches\"]\nrust-version = \"1.63\"\n\n[dependencies]\nbitflags = { version = \"2.4.0\", default-features = false }\n\n# Special dependencies used in rustc-dep-of-std mode.\ncore = { version = \"1.0.0\", optional = true, package = \"rustc-std-workspace-core\" }\nrustc-std-workspace-alloc = { version = \"1.0.0\", optional = true } # not aliased here but in lib.rs because of name collision with the alloc feature\ncompiler_builtins = { version = '0.1.49', optional = true }\n\n# The procfs feature needs once_cell.\n# With Rust 1.70.0, we can switch to `core::cell::OnceCell`.\n[target.'cfg(any(target_os = \"android\", target_os = \"linux\"))'.dependencies]\nonce_cell = { version = \"1.5.2\", optional = true }\n\n# Dependencies for platforms where linux_raw is supported, in addition to libc:\n#\n# On Linux on selected architectures, the linux_raw backend is supported, in\n# addition to the libc backend. The linux_raw backend is used by default. The\n# libc backend can be selected via adding `--cfg=rustix_use_libc` to\n# `RUSTFLAGS` or enabling the `use-libc` cargo feature.\n[target.'cfg(all(not(rustix_use_libc), not(miri), target_os = \"linux\", any(target_endian = \"little\", target_arch = \"s390x\"), any(target_arch = \"arm\", all(target_arch = \"aarch64\", target_pointer_width = \"64\"), target_arch = \"riscv64\", all(rustix_use_experimental_asm, target_arch = \"powerpc64\"), all(rustix_use_experimental_asm, target_arch = \"s390x\"), all(rustix_use_experimental_asm, target_arch = \"mips\"), all(rustix_use_experimental_asm, target_arch = \"mips32r6\"), all(rustix_use_experimental_asm, target_arch = \"mips64\"), all(rustix_use_experimental_asm, target_arch = \"mips64r6\"), target_arch = \"x86\", all(target_arch = \"x86_64\", target_pointer_width = \"64\"))))'.dependencies]\nlinux-raw-sys = { version = \"0.7.0\", default-features = false, features = [\"general\", \"errno\", \"ioctl\", \"no_std\", \"elf\"] }\nlibc_errno = { package = \"errno\", version = \"0.3.10\", default-features = false, optional = true }\nlibc = { version = \"0.2.161\", default-features = false, optional = true }\n\n# Dependencies for platforms where only libc is supported:\n#\n# On all other Unix-family platforms, and under Miri, we always use the libc\n# backend, so enable its dependencies unconditionally.\n[target.'cfg(all(not(windows), any(rustix_use_libc, miri, not(all(target_os = \"linux\", any(target_endian = \"little\", target_arch = \"s390x\"), any(target_arch = \"arm\", all(target_arch = \"aarch64\", target_pointer_width = \"64\"), target_arch = \"riscv64\", all(rustix_use_experimental_asm, target_arch = \"powerpc64\"), all(rustix_use_experimental_asm, target_arch = \"s390x\"), all(rustix_use_experimental_asm, target_arch = \"mips\"), all(rustix_use_experimental_asm, target_arch = \"mips32r6\"), all(rustix_use_experimental_asm, target_arch = \"mips64\"), all(rustix_use_experimental_asm, target_arch = \"mips64r6\"), target_arch = \"x86\", all(target_arch = \"x86_64\", target_pointer_width = \"64\")))))))'.dependencies]\nlibc_errno = { package = \"errno\", version = \"0.3.10\", default-features = false }\nlibc = { version = \"0.2.161\", default-features = false }\n\n# Additional dependencies for Linux with the libc backend:\n#\n# Some syscalls do not have libc wrappers, such as in `io_uring`. For these,\n# the libc backend uses the linux-raw-sys ABI and `libc::syscall`.\n[target.'cfg(all(any(target_os = \"android\", target_os = \"linux\"), any(rustix_use_libc, miri, not(all(target_os = \"linux\", any(target_endian = \"little\", target_arch = \"s390x\"), any(target_arch = \"arm\", all(target_arch = \"aarch64\", target_pointer_width = \"64\"), target_arch = \"riscv64\", all(rustix_use_experimental_asm, target_arch = \"powerpc64\"), all(rustix_use_experimental_asm, target_arch = \"s390x\"), all(rustix_use_experimental_asm, target_arch = \"mips\"), all(rustix_use_experimental_asm, target_arch = \"mips32r6\"), all(rustix_use_experimental_asm, target_arch = \"mips64\"), all(rustix_use_experimental_asm, target_arch = \"mips64r6\"), target_arch = \"x86\", all(target_arch = \"x86_64\", target_pointer_width = \"64\")))))))'.dependencies]\nlinux-raw-sys = { version = \"0.7\", default-features = false, features = [\"general\", \"ioctl\", \"no_std\"] }\n\n# For the libc backend on Windows, use the Winsock API in windows-sys.\n[target.'cfg(windows)'.dependencies.windows-sys]\nversion = \">=0.52, <=0.59\"\nfeatures = [\n    \"Win32_Foundation\",\n    \"Win32_Networking_WinSock\",\n    \"Win32_NetworkManagement_IpHelper\",\n    \"Win32_System_Threading\"\n]\n\n# For the libc backend on Windows, also use the errno crate, which has Windows\n# support.\n[target.'cfg(windows)'.dependencies.libc_errno]\nversion = \"0.3.10\"\npackage = \"errno\"\ndefault-features = false\n\n[dev-dependencies]\ntempfile = \"3.5.0\"\nlibc = \"0.2.161\"\nlibc_errno = { package = \"errno\", version = \"0.3.10\", default-features = false }\nserial_test = \"2.0.0\"\nmemoffset = \"0.9.0\"\nflate2 = \"1.0\"\nstatic_assertions = \"1.1.0\"\n\n[target.'cfg(all(criterion, not(any(target_os = \"emscripten\", target_os = \"wasi\"))))'.dev-dependencies]\ncriterion = \"0.4\"\n\n# Add Criterion configuration, as described here:\n# <https://bheisler.github.io/criterion.rs/book/getting_started.html#step-1---add-dependency-to-cargotoml>\n[[bench]]\nname = \"mod\"\nharness = false\n\n[package.metadata.docs.rs]\nfeatures = [\"all-apis\"]\ntargets = [\n    \"x86_64-unknown-linux-gnu\",\n    \"i686-unknown-linux-gnu\",\n    \"x86_64-apple-darwin\",\n    \"x86_64-pc-windows-msvc\",\n    \"x86_64-unknown-freebsd\",\n    \"x86_64-unknown-openbsd\",\n    \"x86_64-unknown-netbsd\",\n    \"x86_64-unknown-dragonfly\",\n    \"x86_64-unknown-illumos\",\n    \"x86_64-unknown-redox\",\n    \"x86_64-unknown-haiku\",\n    \"wasm32-unknown-emscripten\",\n    \"wasm32-wasip1\",\n]\n\n[features]\n\n# By default, use `std` and use libc for aux values.\n#\n# It turns out to be bizarrely awkward to obtain the aux values reliably and\n# efficiently on Linux from anywhere other than libc. We can do it, but most\n# users are better served by just using libc for this.\ndefault = [\"std\", \"use-libc-auxv\"]\n\n# This enables use of std. Disabling this enables `#![no_std]`, and requires\n# Rust 1.64 or newer.\nstd = [\"bitflags/std\", \"alloc\", \"libc?/std\", \"libc_errno?/std\", \"libc-extra-traits\"]\n\n# Enable this to request the libc backend.\nuse-libc = [\"libc_errno\", \"libc\", \"libc-extra-traits\"]\n\n# Enable `extra_traits` in libc types, to provide `Debug`, `Hash`, and other\n# trait impls for libc types.\nlibc-extra-traits = [\"libc?/extra_traits\"]\n\n# Enable `rustix::event::*`.\nevent = []\n\n# Enable `rustix::fs::*`.\nfs = []\n\n# Enable `rustix::io_uring::*` (on platforms that support it).\nio_uring = [\"event\", \"fs\", \"net\", \"linux-raw-sys/io_uring\"]\n\n# Enable `rustix::mount::*`.\nmount = []\n\n# Enable `rustix::net::*`.\nnet = [\"linux-raw-sys/net\", \"linux-raw-sys/netlink\", \"linux-raw-sys/if_ether\", \"linux-raw-sys/xdp\"]\n\n# Enable `rustix::thread::*`.\nthread = [\"linux-raw-sys/prctl\"]\n\n# Enable `rustix::process::*`.\nprocess = [\"linux-raw-sys/prctl\"]\n\n# Enable `rustix::shm::*`.\nshm = [\"fs\"]\n\n# Enable `rustix::time::*`.\ntime = []\n\n# Enable `rustix::param::*`.\nparam = [\"fs\"]\n\n# Enable this to enable `rustix::io::proc_self_*` (on Linux) and `ttyname`.\nprocfs = [\"once_cell\", \"fs\"]\n\n# Enable `rustix::pty::*`.\npty = [\"fs\"]\n\n# Enable `rustix::termios::*`.\ntermios = []\n\n# Enable `rustix::mm::*`.\nmm = []\n\n# Enable `rustix::pipe::*`.\npipe = []\n\n# Enable `rustix::rand::*`.\nrand = []\n\n# Enable `rustix::stdio::*`.\nstdio = []\n\n# Enable `rustix::system::*`.\nsystem = [\"linux-raw-sys/system\"]\n\n# Enable `rustix::runtime::*`. ⚠ This API is undocumented and unstable and\n# experimental and not intended for general-purpose use. ⚠\nruntime = [\"linux-raw-sys/prctl\"]\n\n# Enable all API features.\nall-apis = [\n    \"event\",\n    \"fs\",\n    \"io_uring\",\n    \"mm\",\n    \"mount\",\n    \"net\",\n    \"param\",\n    \"pipe\",\n    \"process\",\n    \"procfs\",\n    \"pty\",\n    \"rand\",\n    \"runtime\",\n    \"shm\",\n    \"stdio\",\n    \"system\",\n    \"termios\",\n    \"thread\",\n    \"time\",\n]\n\n# When using the linux_raw backend, should we use libc for reading the aux\n# vectors, instead of reading them ourselves from /proc/self/auxv?\nuse-libc-auxv = []\n\n# Enable \"use-explicitly-provided-auxv\" mode, with a public\n# `rustix::param::init` function that must be called before anything else in\n# rustix. This is unstable and experimental and not intended for\n# general-purpose use.\nuse-explicitly-provided-auxv = []\n\n# OS compatibility features\n\n# Optimize for Linux 4.11 or later\nlinux_4_11 = []\n\n# Enable all optimizations for the latest Linux versions.\nlinux_latest = [\"linux_4_11\"]\n\n# Enable features which depend on the Rust global allocator, such as functions\n# that return owned strings or `Vec`s.\nalloc = []\n\n# This is used in the port of std to rustix. This is experimental and not meant\n# for regular use.\nrustc-dep-of-std = [\n    \"core\",\n    \"rustc-std-workspace-alloc\",\n    \"compiler_builtins\",\n    \"linux-raw-sys/rustc-dep-of-std\",\n    \"bitflags/rustc-dep-of-std\",\n    \"compiler_builtins?/rustc-dep-of-std\",\n]\n\n# Enable `rustix::io::try_close`. The rustix developers do not intend the\n# existence of this feature to imply that anyone should use it.\ntry_close = []\n\n[lints.rust.unexpected_cfgs]\nlevel = \"warn\"\ncheck-cfg = [\n    'cfg(alloc_c_string)',\n    'cfg(alloc_ffi)',\n    'cfg(apple)',\n    'cfg(asm_experimental_arch)',\n    'cfg(bsd)',\n    'cfg(core_c_str)',\n    'cfg(core_ffi_c)',\n    'cfg(core_intrinsics)',\n    'cfg(criterion)',\n    'cfg(document_experimental_runtime_api)',\n    'cfg(error_in_core)',\n    'cfg(fix_y2038)',\n    'cfg(freebsdlike)',\n    'cfg(libc)',\n    'cfg(linux_kernel)',\n    'cfg(linux_like)',\n    'cfg(linux_raw)',\n    'cfg(netbsdlike)',\n    'cfg(rustc_attrs)',\n    'cfg(solarish)',\n    'cfg(staged_api)',\n    'cfg(static_assertions)',\n    'cfg(thumb_mode)',\n    'cfg(wasi)',\n    'cfg(wasi_ext)',\n    'cfg(target_arch, values(\"xtensa\"))',\n]\n"
        },
        {
          "name": "LICENSE-APACHE",
          "type": "blob",
          "size": 10.5927734375,
          "content": "                              Apache License\n                        Version 2.0, January 2004\n                     http://www.apache.org/licenses/\n\nTERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n1. Definitions.\n\n   \"License\" shall mean the terms and conditions for use, reproduction,\n   and distribution as defined by Sections 1 through 9 of this document.\n\n   \"Licensor\" shall mean the copyright owner or entity authorized by\n   the copyright owner that is granting the License.\n\n   \"Legal Entity\" shall mean the union of the acting entity and all\n   other entities that control, are controlled by, or are under common\n   control with that entity. For the purposes of this definition,\n   \"control\" means (i) the power, direct or indirect, to cause the\n   direction or management of such entity, whether by contract or\n   otherwise, or (ii) ownership of fifty percent (50%) or more of the\n   outstanding shares, or (iii) beneficial ownership of such entity.\n\n   \"You\" (or \"Your\") shall mean an individual or Legal Entity\n   exercising permissions granted by this License.\n\n   \"Source\" form shall mean the preferred form for making modifications,\n   including but not limited to software source code, documentation\n   source, and configuration files.\n\n   \"Object\" form shall mean any form resulting from mechanical\n   transformation or translation of a Source form, including but\n   not limited to compiled object code, generated documentation,\n   and conversions to other media types.\n\n   \"Work\" shall mean the work of authorship, whether in Source or\n   Object form, made available under the License, as indicated by a\n   copyright notice that is included in or attached to the work\n   (an example is provided in the Appendix below).\n\n   \"Derivative Works\" shall mean any work, whether in Source or Object\n   form, that is based on (or derived from) the Work and for which the\n   editorial revisions, annotations, elaborations, or other modifications\n   represent, as a whole, an original work of authorship. For the purposes\n   of this License, Derivative Works shall not include works that remain\n   separable from, or merely link (or bind by name) to the interfaces of,\n   the Work and Derivative Works thereof.\n\n   \"Contribution\" shall mean any work of authorship, including\n   the original version of the Work and any modifications or additions\n   to that Work or Derivative Works thereof, that is intentionally\n   submitted to Licensor for inclusion in the Work by the copyright owner\n   or by an individual or Legal Entity authorized to submit on behalf of\n   the copyright owner. For the purposes of this definition, \"submitted\"\n   means any form of electronic, verbal, or written communication sent\n   to the Licensor or its representatives, including but not limited to\n   communication on electronic mailing lists, source code control systems,\n   and issue tracking systems that are managed by, or on behalf of, the\n   Licensor for the purpose of discussing and improving the Work, but\n   excluding communication that is conspicuously marked or otherwise\n   designated in writing by the copyright owner as \"Not a Contribution.\"\n\n   \"Contributor\" shall mean Licensor and any individual or Legal Entity\n   on behalf of whom a Contribution has been received by Licensor and\n   subsequently incorporated within the Work.\n\n2. Grant of Copyright License. Subject to the terms and conditions of\n   this License, each Contributor hereby grants to You a perpetual,\n   worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n   copyright license to reproduce, prepare Derivative Works of,\n   publicly display, publicly perform, sublicense, and distribute the\n   Work and such Derivative Works in Source or Object form.\n\n3. Grant of Patent License. Subject to the terms and conditions of\n   this License, each Contributor hereby grants to You a perpetual,\n   worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n   (except as stated in this section) patent license to make, have made,\n   use, offer to sell, sell, import, and otherwise transfer the Work,\n   where such license applies only to those patent claims licensable\n   by such Contributor that are necessarily infringed by their\n   Contribution(s) alone or by combination of their Contribution(s)\n   with the Work to which such Contribution(s) was submitted. If You\n   institute patent litigation against any entity (including a\n   cross-claim or counterclaim in a lawsuit) alleging that the Work\n   or a Contribution incorporated within the Work constitutes direct\n   or contributory patent infringement, then any patent licenses\n   granted to You under this License for that Work shall terminate\n   as of the date such litigation is filed.\n\n4. Redistribution. You may reproduce and distribute copies of the\n   Work or Derivative Works thereof in any medium, with or without\n   modifications, and in Source or Object form, provided that You\n   meet the following conditions:\n\n   (a) You must give any other recipients of the Work or\n       Derivative Works a copy of this License; and\n\n   (b) You must cause any modified files to carry prominent notices\n       stating that You changed the files; and\n\n   (c) You must retain, in the Source form of any Derivative Works\n       that You distribute, all copyright, patent, trademark, and\n       attribution notices from the Source form of the Work,\n       excluding those notices that do not pertain to any part of\n       the Derivative Works; and\n\n   (d) If the Work includes a \"NOTICE\" text file as part of its\n       distribution, then any Derivative Works that You distribute must\n       include a readable copy of the attribution notices contained\n       within such NOTICE file, excluding those notices that do not\n       pertain to any part of the Derivative Works, in at least one\n       of the following places: within a NOTICE text file distributed\n       as part of the Derivative Works; within the Source form or\n       documentation, if provided along with the Derivative Works; or,\n       within a display generated by the Derivative Works, if and\n       wherever such third-party notices normally appear. The contents\n       of the NOTICE file are for informational purposes only and\n       do not modify the License. You may add Your own attribution\n       notices within Derivative Works that You distribute, alongside\n       or as an addendum to the NOTICE text from the Work, provided\n       that such additional attribution notices cannot be construed\n       as modifying the License.\n\n   You may add Your own copyright statement to Your modifications and\n   may provide additional or different license terms and conditions\n   for use, reproduction, or distribution of Your modifications, or\n   for any such Derivative Works as a whole, provided Your use,\n   reproduction, and distribution of the Work otherwise complies with\n   the conditions stated in this License.\n\n5. Submission of Contributions. Unless You explicitly state otherwise,\n   any Contribution intentionally submitted for inclusion in the Work\n   by You to the Licensor shall be under the terms and conditions of\n   this License, without any additional terms or conditions.\n   Notwithstanding the above, nothing herein shall supersede or modify\n   the terms of any separate license agreement you may have executed\n   with Licensor regarding such Contributions.\n\n6. Trademarks. This License does not grant permission to use the trade\n   names, trademarks, service marks, or product names of the Licensor,\n   except as required for reasonable and customary use in describing the\n   origin of the Work and reproducing the content of the NOTICE file.\n\n7. Disclaimer of Warranty. Unless required by applicable law or\n   agreed to in writing, Licensor provides the Work (and each\n   Contributor provides its Contributions) on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n   implied, including, without limitation, any warranties or conditions\n   of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n   PARTICULAR PURPOSE. You are solely responsible for determining the\n   appropriateness of using or redistributing the Work and assume any\n   risks associated with Your exercise of permissions under this License.\n\n8. Limitation of Liability. In no event and under no legal theory,\n   whether in tort (including negligence), contract, or otherwise,\n   unless required by applicable law (such as deliberate and grossly\n   negligent acts) or agreed to in writing, shall any Contributor be\n   liable to You for damages, including any direct, indirect, special,\n   incidental, or consequential damages of any character arising as a\n   result of this License or out of the use or inability to use the\n   Work (including but not limited to damages for loss of goodwill,\n   work stoppage, computer failure or malfunction, or any and all\n   other commercial damages or losses), even if such Contributor\n   has been advised of the possibility of such damages.\n\n9. Accepting Warranty or Additional Liability. While redistributing\n   the Work or Derivative Works thereof, You may choose to offer,\n   and charge a fee for, acceptance of support, warranty, indemnity,\n   or other liability obligations and/or rights consistent with this\n   License. However, in accepting such obligations, You may act only\n   on Your own behalf and on Your sole responsibility, not on behalf\n   of any other Contributor, and only if You agree to indemnify,\n   defend, and hold each Contributor harmless for any liability\n   incurred by, or claims asserted against, such Contributor by reason\n   of your accepting any such warranty or additional liability.\n\nEND OF TERMS AND CONDITIONS\n\nAPPENDIX: How to apply the Apache License to your work.\n\n   To apply the Apache License to your work, attach the following\n   boilerplate notice, with the fields enclosed by brackets \"[]\"\n   replaced with your own identifying information. (Don't include\n   the brackets!)  The text should be enclosed in the appropriate\n   comment syntax for the file format. We also recommend that a\n   file or class name and description of purpose be included on the\n   same \"printed page\" as the copyright notice for easier\n   identification within third-party archives.\n\nCopyright [yyyy] [name of copyright owner]\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n\thttp://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n"
        },
        {
          "name": "LICENSE-Apache-2.0_WITH_LLVM-exception",
          "type": "blob",
          "size": 11.9560546875,
          "content": "\n                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"[]\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright [yyyy] [name of copyright owner]\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n\n\n--- LLVM Exceptions to the Apache 2.0 License ----\n\nAs an exception, if, as a result of your compiling your source code, portions\nof this Software are embedded into an Object form of such source code, you\nmay redistribute such embedded portions in such Object form without complying\nwith the conditions of Sections 4(a), 4(b) and 4(d) of the License.\n\nIn addition, if you combine or link compiled forms of this Software with\nsoftware that is licensed under the GPLv2 (\"Combined Software\") and if a\ncourt of competent jurisdiction determines that the patent provision (Section\n3), the indemnity provision (Section 9) or other Section of the License\nconflicts with the conditions of the GPLv2, you may retroactively and\nprospectively choose to deem waived or otherwise exclude such Section(s) of\nthe License, but only in their entirety and only with respect to the Combined\nSoftware.\n\n"
        },
        {
          "name": "LICENSE-MIT",
          "type": "blob",
          "size": 0.9990234375,
          "content": "Permission is hereby granted, free of charge, to any\nperson obtaining a copy of this software and associated\ndocumentation files (the \"Software\"), to deal in the\nSoftware without restriction, including without\nlimitation the rights to use, copy, modify, merge,\npublish, distribute, sublicense, and/or sell copies of\nthe Software, and to permit persons to whom the Software\nis furnished to do so, subject to the following\nconditions:\n\nThe above copyright notice and this permission notice\nshall be included in all copies or substantial portions\nof the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF\nANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED\nTO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A\nPARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT\nSHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\nOF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR\nIN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\nDEALINGS IN THE SOFTWARE.\n"
        },
        {
          "name": "ORG_CODE_OF_CONDUCT.md",
          "type": "blob",
          "size": 7.056640625,
          "content": "# Bytecode Alliance Organizational Code of Conduct (OCoC)\n\n*Note*: this Code of Conduct pertains to organizations' behavior. Please also see the [Individual Code of Conduct](CODE_OF_CONDUCT.md).\n\n## Preamble\n\nThe Bytecode Alliance (BA) welcomes involvement from organizations,\nincluding commercial organizations.  This document is an\n*organizational* code of conduct, intended particularly to provide\nguidance to commercial organizations.  It is distinct from the\n[Individual Code of Conduct (ICoC)](CODE_OF_CONDUCT.md), and does not \nreplace the ICoC. This OCoC applies to any group of people acting in \nconcert as a BA member or as a participant in BA activities, whether \nor not that group is formally incorporated in some jurisdiction.\n\nThe code of conduct described below is not a set of rigid rules, and\nwe did not write it to encompass every conceivable scenario that might\narise.  For example, it is theoretically possible there would be times\nwhen asserting patents is in the best interest of the BA community as\na whole.  In such instances, consult with the BA, strive for\nconsensus, and interpret these rules with an intent that is generous\nto the community the BA serves.\n\nWhile we may revise these guidelines from time to time based on\nreal-world experience, overall they are based on a simple principle:\n\n*Bytecode Alliance members should observe the distinction between\n public community functions and private functions — especially\n commercial ones — and should ensure that the latter support, or at\n least do not harm, the former.*\n\n## Guidelines\n\n * **Do not cause confusion about Wasm standards or interoperability.** \n \n   Having an interoperable WebAssembly core is a high priority for\n   the BA, and members should strive to preserve that core.  It is fine\n   to develop additional non-standard features or APIs, but they\n   should always be clearly distinguished from the core interoperable\n   Wasm.\n \n   Treat the WebAssembly name and any BA-associated names with\n   respect, and follow BA trademark and branding guidelines.  If you\n   distribute a customized version of software originally produced by\n   the BA, or if you build a product or service using BA-derived\n   software, use names that clearly distinguish your work from the\n   original.  (You should still provide proper attribution to the\n   original, of course, wherever such attribution would normally be\n   given.)\n     \n   Further, do not use the WebAssembly name or BA-associated names in\n   other public namespaces in ways that could cause confusion, e.g.,\n   in company names, names of commercial service offerings, domain\n   names, publicly-visible social media accounts or online service\n   accounts, etc.  It may sometimes be reasonable, however, to\n   register such a name in a new namespace and then immediately donate\n   control of that account to the BA, because that would help the project\n   maintain its identity.\n\n   For further guidance, see the BA Trademark and Branding Policy\n   [TODO: create policy, then insert link].\n     \n * **Do not restrict contributors.** If your company requires\n   employees or contractors to sign non-compete agreements, those\n   agreements must not prevent people from participating in the BA or\n   contributing to related projects.\n\n   This does not mean that all non-compete agreements are incompatible\n   with this code of conduct.  For example, a company may restrict an\n   employee's ability to solicit the company's customers.  However, an\n   agreement must not block any form of technical or social\n   participation in BA activities, including but not limited to the\n   implementation of particular features.\n\n   The accumulation of experience and expertise in individual persons,\n   who are ultimately free to direct their energy and attention as\n   they decide, is one of the most important drivers of progress in\n   open source projects.  A company that limits this freedom may hinder\n   the success of the BA's efforts.\n\n * **Do not use patents as offensive weapons.** If any BA participant\n   prevents the adoption or development of BA technologies by\n   asserting its patents, that undermines the purpose of the\n   coalition.  The collaboration fostered by the BA cannot include\n   members who act to undermine its work.\n \n * **Practice responsible disclosure** for security vulnerabilities.\n   Use designated, non-public reporting channels to disclose technical\n   vulnerabilities, and give the project a reasonable period to\n   respond, remediate, and patch.  [TODO: optionally include the\n   security vulnerability reporting URL here.]\n\n   Vulnerability reporters may patch their company's own offerings, as\n   long as that patching does not significantly delay the reporting of\n   the vulnerability.  Vulnerability information should never be used\n   for unilateral commercial advantage.  Vendors may legitimately\n   compete on the speed and reliability with which they deploy\n   security fixes, but withholding vulnerability information damages\n   everyone in the long run by risking harm to the BA project's\n   reputation and to the security of all users.\n\n * **Respect the letter and spirit of open source practice.** While\n     there is not space to list here all possible aspects of standard\n     open source practice, some examples will help show what we mean:\n\n   * Abide by all applicable open source license terms.  Do not engage\n     in copyright violation or misattribution of any kind.\n\n   * Do not claim others' ideas or designs as your own.\n\n   * When others engage in publicly visible work (e.g., an upcoming\n     demo that is coordinated in a public issue tracker), do not\n     unilaterally announce early releases or early demonstrations of\n     that work ahead of their schedule in order to secure private\n     advantage (such as marketplace advantage) for yourself.\n\n   The BA reserves the right to determine what constitutes good open\n   source practices and to take action as it deems appropriate to\n   encourage, and if necessary enforce, such practices.\n\n## Enforcement\n\nInstances of organizational behavior in violation of the OCoC may \nbe reported by contacting the Bytecode Alliance CoC team at \n[report@bytecodealliance.org](mailto:report@bytecodealliance.org). The \nCoC team will review and investigate all complaints, and will respond \nin a way that it deems appropriate to the circumstances. The CoC team \nis obligated to maintain confidentiality with regard to the reporter of \nan incident. Further details of specific enforcement policies may be \nposted separately.\n\nWhen the BA deems an organization in violation of this OCoC, the BA\nwill, at its sole discretion, determine what action to take.  The BA\nwill decide what type, degree, and duration of corrective action is\nneeded, if any, before a violating organization can be considered for\nmembership (if it was not already a member) or can have its membership\nreinstated (if it was a member and the BA canceled its membership due\nto the violation).\n\nIn practice, the BA's first approach will be to start a conversation,\nwith punitive enforcement used only as a last resort.  Violations\noften turn out to be unintentional and swiftly correctable with all\nparties acting in good faith.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 10.9521484375,
          "content": "<div align=\"center\">\n  <h1><code>rustix</code></h1>\n\n  <p>\n    <strong>Safe Rust bindings to POSIX/Unix/Linux/Winsock syscalls</strong>\n  </p>\n\n  <strong>A <a href=\"https://bytecodealliance.org/\">Bytecode Alliance</a> project</strong>\n\n  <p>\n    <a href=\"https://github.com/bytecodealliance/rustix/actions?query=workflow%3ACI\"><img src=\"https://github.com/bytecodealliance/rustix/workflows/CI/badge.svg\" alt=\"Github Actions CI Status\" /></a>\n    <a href=\"https://bytecodealliance.zulipchat.com/#narrow/stream/206238-general\"><img src=\"https://img.shields.io/badge/zulip-join_chat-brightgreen.svg\" alt=\"zulip chat\" /></a>\n    <a href=\"https://crates.io/crates/rustix\"><img src=\"https://img.shields.io/crates/v/rustix.svg\" alt=\"crates.io page\" /></a>\n    <a href=\"https://docs.rs/rustix\"><img src=\"https://docs.rs/rustix/badge.svg\" alt=\"docs.rs docs\" /></a>\n  </p>\n</div>\n\n`rustix` provides efficient memory-safe and [I/O-safe] wrappers to POSIX-like,\nUnix-like, Linux, and Winsock syscall-like APIs, with configurable backends. It\nuses Rust references, slices, and return values instead of raw pointers, and\n[I/O safety types] instead of raw file descriptors, providing memory safety,\n[I/O safety], and [provenance]. It uses `Result`s for reporting errors,\n[`bitflags`] instead of bare integer flags, an [`Arg`] trait with optimizations\nto efficiently accept any Rust string type, and several other efficient\nconveniences.\n\n`rustix` is low-level and, and while the `net` API supports [Windows Sockets 2]\n(Winsock), the rest of the APIs do not support Windows; for higher-level and\nmore portable APIs built on this functionality, see the [`cap-std`], [`memfd`],\n[`timerfd`], and [`io-streams`] crates, for example.\n\n`rustix` currently has two backends available:\n\n * linux_raw, which uses raw Linux system calls and vDSO calls, and is\n   supported on Linux on x86-64, x86, aarch64, riscv64gc, powerpc64le,\n   arm (v5 onwards), mipsel, and mips64el, with stable, nightly, and 1.63 Rust.\n    - By being implemented entirely in Rust, avoiding `libc`, `errno`, and pthread\n      cancellation, and employing some specialized optimizations, most functions\n      compile down to very efficient code, which can often be fully inlined into\n      user code.\n    - Most functions in `linux_raw` preserve memory, I/O safety, and pointer\n      provenance all the way down to the syscalls.\n\n * libc, which uses the [`libc`] crate which provides bindings to native `libc`\n   libraries on Unix-family platforms, and [`windows-sys`] for Winsock on\n   Windows, and is portable to many OS's.\n\nThe linux_raw backend is enabled by default on platforms which support it. To\nenable the libc backend instead, either enable the \"use-libc\" cargo feature, or\nset the `RUSTFLAGS` environment variable to `--cfg=rustix_use_libc` when\nbuilding.\n\n## Cargo features\n\nThe modules [`rustix::io`], [`rustix::fd`], and [`rustix::ffi`] are enabled by\ndefault. The rest of the API is conditional with cargo feature flags:\n\n| Name       | Description                                                    |\n| ---------- | -------------------------------------------------------------- |\n| `event`    | [`rustix::event`]—Polling and event operations.                |\n| `fs`       | [`rustix::fs`]—Filesystem operations.                          |\n| `io_uring` | [`rustix::io_uring`]—Linux io_uring.                           |\n| `mm`       | [`rustix::mm`]—Memory map operations.                          |\n| `mount`    | [`rustix::mount`]—Linux mount API.                             |\n| `net`      | [`rustix::net`]—Network-related operations.                    |\n| `param`    | [`rustix::param`]—Process parameters.                          |\n| `pipe`     | [`rustix::pipe`]—Pipe operations.                              |\n| `process`  | [`rustix::process`]—Process-associated operations.             |\n| `procfs`   | [`rustix::procfs`]—Utilities for reading `/proc` on Linux.     |\n| `pty`      | [`rustix::pty`]—Pseudoterminal operations.                     |\n| `rand`     | [`rustix::rand`]—Random-related operations.                    |\n| `shm`      | [`rustix::shm`]—POSIX shared memory.                           |\n| `stdio`    | [`rustix::stdio`]—Stdio-related operations.                    |\n| `system`   | [`rustix::system`]—System-related operations.                  |\n| `termios`  | [`rustix::termios`]—Terminal I/O stream operations.            |\n| `thread`   | [`rustix::thread`]—Thread-associated operations.               |\n| `time`     | [`rustix::time`]—Time-related operations.                      |\n|            |                                                                |\n| `use-libc` | Enable the libc backend.                                       |\n\n[`rustix::event`]: https://docs.rs/rustix/*/rustix/event/index.html\n[`rustix::fs`]: https://docs.rs/rustix/*/rustix/fs/index.html\n[`rustix::io_uring`]: https://docs.rs/rustix/*/rustix/io_uring/index.html\n[`rustix::mm`]: https://docs.rs/rustix/*/rustix/mm/index.html\n[`rustix::mount`]: https://docs.rs/rustix/*/rustix/mount/index.html\n[`rustix::net`]: https://docs.rs/rustix/*/rustix/net/index.html\n[`rustix::param`]: https://docs.rs/rustix/*/rustix/param/index.html\n[`rustix::pipe`]: https://docs.rs/rustix/*/rustix/pipe/index.html\n[`rustix::process`]: https://docs.rs/rustix/*/rustix/process/index.html\n[`rustix::procfs`]: https://docs.rs/rustix/*/rustix/procfs/index.html\n[`rustix::pty`]: https://docs.rs/rustix/*/rustix/pty/index.html\n[`rustix::rand`]: https://docs.rs/rustix/*/rustix/rand/index.html\n[`rustix::shm`]: https://docs.rs/rustix/*/rustix/shm/index.html\n[`rustix::stdio`]: https://docs.rs/rustix/*/rustix/stdio/index.html\n[`rustix::system`]: https://docs.rs/rustix/*/rustix/system/index.html\n[`rustix::termios`]: https://docs.rs/rustix/*/rustix/termios/index.html\n[`rustix::thread`]: https://docs.rs/rustix/*/rustix/thread/index.html\n[`rustix::time`]: https://docs.rs/rustix/*/rustix/time/index.html\n[`rustix::io`]: https://docs.rs/rustix/*/rustix/io/index.html\n[`rustix::fd`]: https://docs.rs/rustix/*/rustix/fd/index.html\n[`rustix::ffi`]: https://docs.rs/rustix/*/rustix/ffi/index.html\n\n## 64-bit Large File Support (LFS) and Year 2038 (y2038) support\n\n`rustix` automatically uses 64-bit APIs when available, and avoids exposing\n32-bit APIs that would have the year-2038 problem or fail to support large\nfiles. For instance, `rustix::fstatvfs` calls `fstatvfs64`, and returns a\nstruct that's 64-bit even on 32-bit platforms.\n\n## Similar crates\n\n`rustix` is similar to [`nix`], [`simple_libc`], [`unix`], [`nc`], [`uapi`],\nand [`rusl`]. `rustix` is architected for [I/O safety] with most APIs using\n[`OwnedFd`] and [`AsFd`] to manipulate file descriptors rather than `File` or\neven `c_int`, and supporting multiple backends so that it can use direct\nsyscalls while still being usable on all platforms `libc` supports. Like `nix`,\n`rustix` has an optimized and flexible filename argument mechanism that allows\nusers to use a variety of string types, including non-UTF-8 string types.\n\n[`relibc`] is a similar project which aims to be a full \"libc\", including\nC-compatible interfaces and higher-level C/POSIX standard-library\nfunctionality; `rustix` just aims to provide safe and idiomatic Rust interfaces\nto low-level syscalls. `relibc` also doesn't tend to support features not\nsupported on Redox, such as `*at` functions like `openat`, which are important\nfeatures for `rustix`.\n\n`rustix` has its own code for making direct syscalls, similar to the\n[`syscall`], [`sc`], and [`scall`] crates, using the Rust `asm!` macro.\n`rustix` can also use Linux's vDSO mechanism to optimize Linux `clock_gettime`\non all architectures, and all Linux system calls on x86. And `rustix`'s\nsyscalls report errors using an optimized `Errno` type.\n\n`rustix`'s `*at` functions are similar to the [`openat`] crate, but `rustix`\nprovides them as free functions rather than associated functions of a `Dir`\ntype. `rustix`'s `CWD` constant exposes the special `AT_FDCWD` value in a safe\nway, so users don't need to open `.` to get a current-directory handle.\n\n`rustix`'s `openat2` function is similar to the [`openat2`] crate, but uses I/O\nsafety types rather than `RawFd`. `rustix` does not provide dynamic feature\ndetection, so users must handle the [`NOSYS`] error themselves.\n\n`rustix`'s `termios` module is similar to the [`termios`] crate, but uses I/O\nsafety types rather than `RawFd`, and the flags parameters to functions such as\n`tcsetattr` are `enum`s rather than bare integers. And, rustix calls its\n`tcgetattr` function `tcgetattr`, rather than `Termios::from_fd`.\n\n## Minimum Supported Rust Version (MSRV)\n\nThis crate currently works on the version of [Rust on Debian stable], which is\ncurrently [Rust 1.63]. This policy may change in the future, in minor version\nreleases, so users using a fixed version of Rust should pin to a specific\nversion of this crate.\n\n## Minimum Linux Version\n\nOn Linux platforms, rustix requires at least Linux 3.2. This is at most the\noldest Linux version supported by:\n - [any current Rust target], or\n - [kernel.org] at the time of rustix's [MSRV] release.\nThe specifics of this policy may change in the future, but we intend it to\nalways reflect “very old” Linux versions.\n\n[MSRV]: #minimum-supported-rust-version-msrv\n[Rust 1.63]: https://blog.rust-lang.org/2022/08/11/Rust-1.63.0.html\n[any current Rust target]: https://doc.rust-lang.org/nightly/rustc/platform-support.html\n[kernel.org]: https://www.kernel.org/releases.html\n[Rust on Debian stable]: https://packages.debian.org/stable/rust/rustc\n[Windows Sockets 2]: https://learn.microsoft.com/en-us/windows/win32/winsock/windows-sockets-start-page-2\n[`nix`]: https://crates.io/crates/nix\n[`unix`]: https://crates.io/crates/unix\n[`nc`]: https://crates.io/crates/nc\n[`simple_libc`]: https://crates.io/crates/simple_libc\n[`uapi`]: https://crates.io/crates/uapi\n[`rusl`]: https://lib.rs/crates/rusl\n[`relibc`]: https://gitlab.redox-os.org/redox-os/relibc\n[`syscall`]: https://crates.io/crates/syscall\n[`sc`]: https://crates.io/crates/sc\n[`scall`]: https://crates.io/crates/scall\n[`openat`]: https://crates.io/crates/openat\n[`openat2`]: https://crates.io/crates/openat2\n[I/O safety types]: https://doc.rust-lang.org/stable/std/os/fd/index.html#structs\n[`termios`]: https://crates.io/crates/termios\n[`libc`]: https://crates.io/crates/libc\n[`windows-sys`]: https://crates.io/crates/windows-sys\n[`cap-std`]: https://crates.io/crates/cap-std\n[`memfd`]: https://crates.io/crates/memfd\n[`timerfd`]: https://crates.io/crates/timerfd\n[`io-streams`]: https://crates.io/crates/io-streams\n[`bitflags`]: https://crates.io/crates/bitflags\n[`Arg`]: https://docs.rs/rustix/*/rustix/path/trait.Arg.html\n[I/O-safe]: https://github.com/rust-lang/rfcs/blob/master/text/3128-io-safety.md\n[I/O safety]: https://github.com/rust-lang/rfcs/blob/master/text/3128-io-safety.md\n[provenance]: https://github.com/rust-lang/rust/issues/95228\n[`OwnedFd`]: https://doc.rust-lang.org/stable/std/os/fd/struct.OwnedFd.html\n[`AsFd`]: https://doc.rust-lang.org/stable/std/os/fd/trait.AsFd.html\n[`NOSYS`]: https://docs.rs/rustix/*/rustix/io/struct.Errno.html#associatedconstant.NOSYS\n"
        },
        {
          "name": "SECURITY.md",
          "type": "blob",
          "size": 1.7958984375,
          "content": "# Security Policy\n\nBuilding secure foundations for software development is at the core of what we do in the Bytecode Alliance. Contributions of external security researchers are a vital part of that.\n\n## Scope\n\nIf you believe you've found a security issue in any website, service, or software owned or operated by the Bytecode Alliance, we encourage you to notify us.\n\n## How to Submit a Report\n\nTo submit a vulnerability report to the Bytecode Alliance, please contact us at [security@bytecodealliance.org](mailto:security@bytecodealliance.org). Your submission will be reviewed and validated by a member of our security team.\n\n## Safe Harbor\n\nThe Bytecode Alliance supports safe harbor for security researchers who:\n\n*   Make a good faith effort to avoid privacy violations, destruction of data, and interruption or degradation of our services.\n*   Only interact with accounts you own or with explicit permission of the account holder. If you do encounter Personally Identifiable Information (PII) contact us immediately, do not proceed with access, and immediately purge any local information.\n*   Provide us with a reasonable amount of time to resolve vulnerabilities prior to any disclosure to the public or a third-party.\n\nWe will consider activities conducted consistent with this policy to constitute \"authorized\" conduct and will not pursue civil action or initiate a complaint to law enforcement. We will help to the extent we can if legal action is initiated by a third party against you.\n\nPlease submit a report to us before engaging in conduct that may be inconsistent with or unaddressed by this policy.\n\n## Preferences\n\n*   Please provide detailed reports with reproducible steps and a clearly defined impact.\n*   Submit one vulnerability per report.\n*   Social engineering (e.g. phishing, vishing, smishing) is prohibited.\n"
        },
        {
          "name": "benches",
          "type": "tree",
          "content": null
        },
        {
          "name": "build.rs",
          "type": "blob",
          "size": 9.134765625,
          "content": "use std::env::var;\nuse std::io::Write;\n\n/// The directory for inline asm.\nconst ASM_PATH: &str = \"src/backend/linux_raw/arch\";\n\nfn main() {\n    // Don't rerun this on changes other than build.rs, as we only depend on\n    // the rustc version.\n    println!(\"cargo:rerun-if-changed=build.rs\");\n\n    // Gather target information.\n    let arch = var(\"CARGO_CFG_TARGET_ARCH\").unwrap();\n    let env = var(\"CARGO_CFG_TARGET_ENV\").unwrap();\n    let abi = var(\"CARGO_CFG_TARGET_ABI\");\n    let inline_asm_name = format!(\"{}/{}.rs\", ASM_PATH, arch);\n    let inline_asm_name_present = std::fs::metadata(inline_asm_name).is_ok();\n    let os = var(\"CARGO_CFG_TARGET_OS\").unwrap();\n    let pointer_width = var(\"CARGO_CFG_TARGET_POINTER_WIDTH\").unwrap();\n    let endian = var(\"CARGO_CFG_TARGET_ENDIAN\").unwrap();\n\n    // Check for special target variants.\n    let is_x32 = arch == \"x86_64\" && pointer_width == \"32\";\n    let is_arm64_ilp32 = arch == \"aarch64\" && pointer_width == \"32\";\n    let is_powerpc64be = arch == \"powerpc64\" && endian == \"big\";\n    let is_mipseb = (arch == \"mips\" || arch == \"mips32r6\") && endian == \"big\";\n    let is_mips64eb = arch.contains(\"mips64\") && endian == \"big\";\n    let is_unsupported_abi = is_x32 || is_arm64_ilp32 || is_powerpc64be || is_mipseb || is_mips64eb;\n\n    // Check for `--features=use-libc`. This allows crate users to enable the\n    // libc backend.\n    let feature_use_libc = var(\"CARGO_FEATURE_USE_LIBC\").is_ok();\n\n    // Check for `RUSTFLAGS=--cfg=rustix_use_libc`. This allows end users to\n    // enable the libc backend even if rustix is depended on transitively.\n    let cfg_use_libc = var(\"CARGO_CFG_RUSTIX_USE_LIBC\").is_ok();\n\n    // Check for `--features=rustc-dep-of-std`.\n    let rustc_dep_of_std = var(\"CARGO_FEATURE_RUSTC_DEP_OF_STD\").is_ok();\n\n    // Check for eg. `RUSTFLAGS=--cfg=rustix_use_experimental_features`. This\n    // is a rustc flag rather than a cargo feature flag because it's\n    // experimental and not something we want accidentally enabled via\n    // `--all-features`.\n    let rustix_use_experimental_features =\n        var(\"CARGO_CFG_RUSTIX_USE_EXPERIMENTAL_FEATURES\").is_ok();\n\n    // Check for eg. `RUSTFLAGS=--cfg=rustix_use_experimental_asm`. This is a\n    // rustc flag rather than a cargo feature flag because it's experimental\n    // and not something we want accidentally enabled via `--all-features`.\n    let rustix_use_experimental_asm = var(\"CARGO_CFG_RUSTIX_USE_EXPERIMENTAL_ASM\").is_ok();\n\n    // Miri doesn't support inline asm, and has builtin support for recognizing\n    // libc FFI calls, so if we're running under miri, use the libc backend.\n    let miri = var(\"CARGO_CFG_MIRI\").is_ok();\n\n    // If experimental features are enabled, auto-detect and use available\n    // features.\n    if rustc_dep_of_std {\n        use_feature(\"rustc_attrs\");\n        use_feature(\"core_intrinsics\");\n    } else if rustix_use_experimental_features {\n        use_feature_or_nothing(\"rustc_attrs\");\n        use_feature_or_nothing(\"core_intrinsics\");\n    }\n\n    // Features needed only in no-std configurations.\n    #[cfg(not(feature = \"std\"))]\n    {\n        use_feature_or_nothing(\"core_c_str\");\n        use_feature_or_nothing(\"core_ffi_c\");\n        use_feature_or_nothing(\"alloc_c_string\");\n        use_feature_or_nothing(\"alloc_ffi\");\n        use_feature_or_nothing(\"error_in_core\");\n    }\n\n    // Feature needed for testing.\n    if use_static_assertions() {\n        use_feature(\"static_assertions\");\n    }\n\n    // WASI support can utilize wasi_ext if present.\n    if os == \"wasi\" {\n        use_feature_or_nothing(\"wasi_ext\");\n    }\n\n    // If the libc backend is requested, or if we're not on a platform for\n    // which we have linux_raw support, use the libc backend.\n    //\n    // For now Android uses the libc backend; in theory it could use the\n    // linux_raw backend, but to do that we'll need to figure out how to\n    // install the toolchain for it.\n    let libc = feature_use_libc\n        || cfg_use_libc\n        || os != \"linux\"\n        || !inline_asm_name_present\n        || is_unsupported_abi\n        || miri\n        || ((arch == \"powerpc64\" || arch == \"s390x\" || arch.starts_with(\"mips\"))\n            && !rustix_use_experimental_asm);\n    if libc {\n        // Use the libc backend.\n        use_feature(\"libc\");\n    } else {\n        // Use the linux_raw backend.\n        use_feature(\"linux_raw\");\n        if rustix_use_experimental_asm {\n            use_feature(\"asm_experimental_arch\");\n        }\n    }\n\n    // Detect whether the compiler requires us to use thumb mode on ARM.\n    if arch == \"arm\" && use_thumb_mode() {\n        use_feature(\"thumb_mode\");\n    }\n\n    // Rust's libc crate groups some OS's together which have similar APIs;\n    // create similarly-named features to make `cfg` tests more concise.\n    let freebsdlike = os == \"freebsd\" || os == \"dragonfly\";\n    if freebsdlike {\n        use_feature(\"freebsdlike\");\n    }\n    let netbsdlike = os == \"openbsd\" || os == \"netbsd\";\n    if netbsdlike {\n        use_feature(\"netbsdlike\");\n    }\n    let apple = os == \"macos\" || os == \"ios\" || os == \"tvos\" || os == \"visionos\" || os == \"watchos\";\n    if apple {\n        use_feature(\"apple\");\n    }\n    if os == \"linux\" || os == \"l4re\" || os == \"android\" || os == \"emscripten\" {\n        use_feature(\"linux_like\");\n    }\n    if os == \"solaris\" || os == \"illumos\" {\n        use_feature(\"solarish\");\n    }\n    if apple || freebsdlike || netbsdlike {\n        use_feature(\"bsd\");\n    }\n\n    // Add some additional common target combinations.\n\n    // Android and \"regular\" Linux both use the Linux kernel.\n    if os == \"android\" || os == \"linux\" {\n        use_feature(\"linux_kernel\");\n    }\n\n    // These platforms have a 32-bit `time_t`.\n    if libc\n        && (arch == \"arm\"\n            || arch == \"mips\"\n            || arch == \"sparc\"\n            || arch == \"x86\"\n            || (arch == \"wasm32\" && os == \"emscripten\")\n            || (arch == \"aarch64\" && os == \"linux\" && abi == Ok(\"ilp32\".to_string())))\n        && (apple\n            || os == \"android\"\n            || os == \"emscripten\"\n            || os == \"haiku\"\n            || env == \"gnu\"\n            || (env == \"musl\" && arch == \"x86\")\n            || (arch == \"aarch64\" && os == \"linux\" && abi == Ok(\"ilp32\".to_string())))\n    {\n        use_feature(\"fix_y2038\");\n    }\n\n    println!(\"cargo:rerun-if-env-changed=CARGO_CFG_RUSTIX_USE_EXPERIMENTAL_ASM\");\n    println!(\"cargo:rerun-if-env-changed=CARGO_CFG_RUSTIX_USE_LIBC\");\n\n    // Rerun this script if any of our features or configuration flags change,\n    // or if the toolchain we used for feature detection changes.\n    println!(\"cargo:rerun-if-env-changed=CARGO_FEATURE_USE_LIBC\");\n    println!(\"cargo:rerun-if-env-changed=CARGO_FEATURE_RUSTC_DEP_OF_STD\");\n    println!(\"cargo:rerun-if-env-changed=CARGO_CFG_MIRI\");\n}\n\nfn use_static_assertions() -> bool {\n    // `offset_from` was made const in Rust 1.65.\n    can_compile(\"const unsafe fn foo(p: *const u8) -> isize { p.offset_from(p) }\")\n}\n\nfn use_thumb_mode() -> bool {\n    // In thumb mode, r7 is reserved.\n    !can_compile(\"pub unsafe fn f() { core::arch::asm!(\\\"udf #16\\\", in(\\\"r7\\\") 0); }\")\n}\n\nfn use_feature_or_nothing(feature: &str) {\n    if has_feature(feature) {\n        use_feature(feature);\n    }\n}\n\nfn use_feature(feature: &str) {\n    println!(\"cargo:rustc-cfg={}\", feature);\n}\n\n/// Test whether the rustc at `var(\"RUSTC\")` supports the given feature.\nfn has_feature(feature: &str) -> bool {\n    can_compile(format!(\n        \"#![allow(stable_features)]\\n#![feature({})]\",\n        feature\n    ))\n}\n\n/// Test whether the rustc at `var(\"RUSTC\")` can compile the given code.\nfn can_compile<T: AsRef<str>>(test: T) -> bool {\n    use std::process::Stdio;\n\n    let rustc = var(\"RUSTC\").unwrap();\n    let target = var(\"TARGET\").unwrap();\n\n    // Use `RUSTC_WRAPPER` if it's set, unless it's set to an empty string, as\n    // documented [here].\n    // [here]: https://doc.rust-lang.org/cargo/reference/environment-variables.html#environment-variables-cargo-reads\n    let wrapper = var(\"RUSTC_WRAPPER\")\n        .ok()\n        .and_then(|w| if w.is_empty() { None } else { Some(w) });\n\n    let mut cmd = if let Some(wrapper) = wrapper {\n        let mut cmd = std::process::Command::new(wrapper);\n        // The wrapper's first argument is supposed to be the path to rustc.\n        cmd.arg(rustc);\n        cmd\n    } else {\n        std::process::Command::new(rustc)\n    };\n\n    cmd.arg(\"--crate-type=rlib\") // Don't require `main`.\n        .arg(\"--emit=metadata\") // Do as little as possible but still parse.\n        .arg(\"--target\")\n        .arg(target)\n        .arg(\"-o\")\n        .arg(\"-\")\n        .stdout(Stdio::null()); // We don't care about the output (only whether it builds or not)\n\n    // If Cargo wants to set RUSTFLAGS, use that.\n    if let Ok(rustflags) = var(\"CARGO_ENCODED_RUSTFLAGS\") {\n        if !rustflags.is_empty() {\n            for arg in rustflags.split('\\x1f') {\n                cmd.arg(arg);\n            }\n        }\n    }\n\n    let mut child = cmd\n        .arg(\"-\") // Read from stdin.\n        .stdin(Stdio::piped()) // Stdin is a pipe.\n        .stderr(Stdio::null()) // Errors from feature detection aren't interesting and can be confusing.\n        .spawn()\n        .unwrap();\n\n    writeln!(child.stdin.take().unwrap(), \"{}\", test.as_ref()).unwrap();\n\n    child.wait().unwrap().success()\n}\n"
        },
        {
          "name": "ci",
          "type": "tree",
          "content": null
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "test-crates",
          "type": "tree",
          "content": null
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}