{
  "metadata": {
    "timestamp": 1736709215389,
    "page": 499,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjUwMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "probe-rs/probe-rs",
      "stars": 1902,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".cargo",
          "type": "tree",
          "content": null
        },
        {
          "name": ".devcontainer",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.0244140625,
          "content": "CHANGELOG.md merge=union\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.1181640625,
          "content": "target\n!/gdb-server/src/target\n**/*.rs.bk\n\n# It's a Mac Thing\n**/.DS_Store \n\n# IDE settings\n.vscode/settings.json\n.idea/\n"
        },
        {
          "name": ".vscode",
          "type": "tree",
          "content": null
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 92.78125,
          "content": "# Changelog\n\nThe format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/)\nand this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0.html).\n\nDo not edit this file by hand. If you want to add a new entry, please follow the [Contribution Guidelines](https://github.com/probe-rs/probe-rs/blob/master/CONTRIBUTING.md#changelog-entries).\n\n## [0.25.0]\n\nReleased 2024-12-16\n\n### Added\n\n - Added `--preverify` to skip flashing regions that are up to date.\n   Added `probe-rs verify` that only verifies flash contents. (#2722) by @bugadani\n - Add support for the Fujitsu/Cypress/Infineon FM3 high performance series. (#2566) by @jeffglaum\n - Added an optional `ReadFlash` flash algorithm function. (#2727) by @bugadani\n - Added support for new nRF54 chips: nRF54L15. (#2911) by @Dirbaio\n - Added support for Texas Instruments MSPM0C series (#2811) by @i509VCB\n - Added support for MIMXRT118x memory access (`probe-rs read/write`) (#2916) by @glaeqen\n - `probe-rs` can now automatically detect XMC4xxx devices without `--chip` (#2608) by @bugadani\n - Added `--name` option to `target-gen test` (#2597) by @bugadani\n - arm: Add RAM boot feature which could also be extended to other architectures. This feature works\n   by detecting in whether the entry point of an application is located inside the RAM region. If it\n   is, it will execute a special ARM sequence to run the application directly. (#2680) by @robamu\n - arm: Added jtag_tap option to ARM core access options. (#2924) by @robamu\n - Added `Rtt::up_channel` and `Rtt::down_channel` (#2580) by @bugadani\n - Added support for the Vorago VA108xx family of MCUs by adding a chip description file for the\n   VA108xx family (#2673) by @robamu\n - The core is now halted when flashing the RAM (#2672) by @robamu\n - Added support for the MIMXRT118x (Cortex-M33 core only) (#2916) by @glaeqen\n - Added debug sequences for STM32H7S/STM32H7R (#2884) by @a6f\n - Add support for HPMicro's HPM5300 series of MCUs (#2575) by @andelf\n - Added support for Digilent HS1, HS2, and HS3 FTDI probes. (#2793) by @craigjb\n - Assign cores to NvmRegions created from flash algorithms (#2887) by @a6f\n - Added support for GigaDevice GD32C1x3 series (#2737) by @guineawheek\n - Added the option to register new debug sequences. To do this, users must implement `probe_rs::vendor::Vendor` and register it using `probe_rs::vendor::register_vendor()`. (#2471) by @bugadani\n - MIMXRT: reset the FlexRAM configuration to the boot fuses when resetting the MCU. (#2510) by @mciantyre\n - Add support for the MIMXRT685S series of chips. (#2560) by @felipebalbi\n - Added progress bars to `probe-rs erase`. (#2724) by @bugadani\n - Added the `Privileged` bit to APB4 and APB5 of the AMBA CSW register. (#2798) by @xobs\n - Added support for tunneled JTAG access to RISC-V targets configured with a `RiscvJtagTunnel` in `Chip::jtag`. (#2794) by @craigjb\n - target-gen: Added `reformat` command to reformat a YAML file or a directory of YAML files. (#2548) by @bugadani\n - Added support for new STM32H5 chips: STM32H523CCTx, STM32H523CCUx, STM32H523CETx, STM32H523CEUx, STM32H523HEYxT, STM32H523RCTx, STM32H523RETx, STM32H523VCIx, STM32H523VCTx, STM32H523VEIx, STM32H523VETx, STM32H523ZCJx, STM32H523ZCTx, STM32H523ZEJx, STM32H523ZETx, STM32H533CETx, STM32H533CEUx, STM32H533HEYxT, STM32H533RETx, STM32H533VEIx, STM32H533VETx, STM32H533ZEJx, STM32H533ZETx, STM32H562AGIx, STM32H562IGKx, STM32H562IGTx, STM32H562RGTx, STM32H562RGVx, STM32H562VGTx, STM32H562ZGTx, STM32H563AGIx, STM32H563AIIxQ, STM32H563IGKx, STM32H563IGTx, STM32H563IIKxQ, STM32H563IITxQ, STM32H563RGTx, STM32H563RGVx, STM32H563VGTx, STM32H563VITxQ, STM32H563ZGTx, STM32H563ZITxQ, STM32H573AIIxQ, STM32H573IIKxQ, STM32H573IITxQ, STM32H573VITxQ, STM32H573ZITxQ (#2641) by @bugadani\n - Added `AccessPort` a sum-type of all access port classes (#2683) by @ithinuel\n - Added STM32F205RGEx target information (#2570) by @bugadani\n - Added support to probe-rs-tools to print messages using `semihosting`. (#2740) by @bugadani\n - Added a warning when refusing to read an RTT channel name because of the target description. (#2867) by @nilfit\n - Added new `Error::CoreDisabled` variant. (#2713) by @bugadani\n - Added support for GD32F10x (#2611) by @AlksB\n - Added `MemoryAccess` attributes to `RamRegion`, `NvmRegion` and `GenericRegion` (#2581) by @bugadani\n - arm: Fall back on SWDv2 wake from dormant on SWDv1 failure (#2914) by @seanmlyons22\n - Add support for the Tiva-C series of chips. (#2792) by @BauerBank\n - cargo-embed: use `ctrl+tab` and `ctrl+shift+tab` to move to next/previous tab. Use `ctrl+number` to switch to the `number`th tab.\n   cargo-embed: `PageUp` and `PageDown` now scroll a half screen's worth of lines.\n   cargo-embed: handle `Up` and `Down` arrows to scroll the list one line at a time. (#2618) by @bugadani\n - Added API to disable PC sample in ARM (#2813) by @gdobato\n - Added ADuCM302x target information from pack file (#2721) by @IoTPanic\n - Added support for the Vorago VA416xx family of MCUs by adding a chip description file for the\n   VA416xx family and a VA416XX specific ARM debug sequence (#2601) by @robamu\n - `probe-rs` now has basic support to represent Access Port V2 address format. (#2600) by @ithinuel\n - `probe-rs` can now automatically detect nRF, ESP32 and certain ATSAM devices without `--chip` (#2475) by @bugadani\n - Added support for new STM32U5 chips: STM32U5F7VITx, STM32U5F7VITxQ, STM32U5F7VJTx, STM32U5F7VJTxQ, STM32U5F9BJYxQ, STM32U5F9NJHxQ, STM32U5F9VITxQ, STM32U5F9VJTxQ, STM32U5F9ZIJxQ, STM32U5F9ZITxQ, STM32U5F9ZJJxQ, STM32U5F9ZJTxQ, STM32U5G7VJTx, STM32U5G7VJTxQ, STM32U5G9BJYxQ, STM32U5G9NJHxQ, STM32U5G9VJTxQ, STM32U5G9ZJJxQ, STM32U5G9ZJTxQ (#2646) by @bugadani\n - Added support for cli interactive probe selection when multiple probes are found (#2490) by @teburd\n - Added support for new STM32F4 chips: STM32F401CCFx, STM32F412REYxP, STM32F412RGYxP, STM32F429ZGYx, STM32F439ZGYx, STM32F446ZCJx (#2629) by @bugadani\n - Added ARM debug sequence for stm32-armv8 (#2697) by @gdobato\n - Added `--path` option to cargo embed. (#2594) by @bugadani\n - TI: Added support for the cc13x4_cc26x4 family of devices (#2532) by @seanmlyons22\n - Added support for new STM32F7 chips: STM32F723VCTx, STM32F723VCYx, STM32F723VETx, STM32F733ZEIx, STM32F765VGHx, STM32F765VIHx, STM32F767VGHx, STM32F767VIHx, STM32F777VIHx (#2630) by @bugadani\n - `cargo embed` now takes an optional --config-file parameter (#2846) by @chrysn\n - Added initial support for the Black Magic Probe in bit-bang mode. (#2791) by @xobs\n - Added the Cortex-M VTOR vector table offset core register definition (#2664) by @robamu\n - Extended the ITM api to support configurable packet transmission settings.<br> (#2931) by @irina-nita\n - Added `--chip` to `target-gen test` (#2592) by @bugadani\n - Added support for STLink-V3PWR (#2719) by @trlim\n - Add types for each type of `MemoryAp`. (#2683) by @ithinuel\n - Add support for the LPC54102 family (only the primary Cortex-M4F is supported, not the secondary Cortex-M0+). (#2525) by @jfrimmel\n\n### Changed\n\n - The `Core::dump` function has been replaced by `CoreDump::dump_core`, to make the interaction with the `debug` feature clearer. (#2634) by @Tiwalun\n - Updated STM32L0 family information. (#2642) by @bugadani\n - Rename ArmProbe to ArmMemoryInterface (#2704) by @ithinuel\n - Reorganized exception handling code, introduce `debug` feature to allow\n     disabling debug functionality. (#2634) by @Tiwalun\n - Updated STM32L1 family information. Note that this changes the target names by adding a package-specific suffix (e.g. STM32L100RB became STM32L100RBTx) (#2644) by @bugadani\n - Rename the trait `AccessPort` to `AccessPortType` (#2683) by @ithinuel\n - Updated STM32WL family information. (#2647) by @bugadani\n - Debug sequences are now available at `probe_rs::vendor::<VENDOR>::sequences` (#2471) by @bugadani\n - Changed the type returned by `ArmCommunicationInterface` to a collection of addresses (#2683) by @ithinuel\n - Register names are now lower-case when gdb-debugging through gdbstub. This makes probe-rs compatible with lldb.  (#2879) by @danlehmann\n - The `semihosting` module is now public, and the reexports have been removed from `probe_rs`. (#2740) by @bugadani\n - Updated memory maps for most of STM32 chips. (#2556) by @bugadani\n - Derive `PartialOrd`/`Ord` & `Hash` on addresses (#2683) by @ithinuel\n - `Rtt::{up, down}_channels` now return an immutable slice of chanels. (#2580) by @bugadani\n - Removed the `memory_map` argument from `Rtt::attach` and `Rtt::attach_region`. (#2595) by @bugadani\n - Upgrade `defmt-decoder` to `v0.4.0` (#2809) by @Urhengulas\n - Increased the potential throughput of J-Link and FTDI probes when communicating with ARM chips using JTAG. (#2681) by @bugadani\n - `JtagCommandQueue::schedule` now takes a type that impls `Into<JtagCommand>`. (#2689) by @bugadani\n - Updated STM32L4 family information. (#2649) by @bugadani\n - arm: Use FullyQualifiedApAddress instead of MemoryAp and GenericAp in method (#2706) by @ithinuel\n - probe-rs no longer reserves all remaining memory for the flash algorithm's stack. (#2577) by @bugadani\n - Updated STM32H7 families. (#2643) by @bugadani\n - Updated STM32C0 family information. (#2894) by @a6f\n - Factorize the variants of `MemoryInterface` where only the return type changes into `MemoryInterface` with a generic type defaulting to `probe_rs::Error`. (#2705) by @ithinuel\n - Renamed the `esp32-3.3v` target to `esp32` (#2755) by @bugadani\n - Moved `RamRegion::is_boot_memory` to `MemoryAccess::boot` (#2581) by @bugadani\n - Updated STM32L5 family information. (#2645) by @bugadani\n - Added the option to refer to STM32 targets without their package suffix (#2754) by @bugadani\n\n### Fixed\n\n - Fixed RAM size of STM32F303VC chips (#2552) by @bugadani\n - Fixed error while trying to write to RTT on a RISC-V chip (#2622) by @bugadani\n - Fix broken timeout in `cortex_m_reset_system` (#2917) by @glaeqen\n - probe-rs now correctly disables all watchdogs of ESP32-S2 and ESP32-S3 (#2902) by @bugadani\n - Fixed file paths used for Rust's standard libraries by mapping the path to Rust's sysroot (#2635) by @staticintlucas\n - Fixed error of creating RTTControlBlockHeader from memory slice (#2610) by @AlksB\n - Fixed some cases where probe-rs would print \"RTT control block corrupted\". (#2547) by @bugadani\n - Fixed connection on TrustZone capable MCUs when HNONSEC is set incorrectly. (#2875) by @felipebalbi\n - Support swj_pins() when specifying --connect-under-reset (#2947) by @xobs\n - Fixed crashes when processing flash algorithm data of devices with small RAM. (#2832) by @bugadani\n - Fixed connecting to ESP32-C2 and C3 chips after flashing. (#2748) by @bugadani\n - Improved unwinding Xtensa stack traces (#2831) by @bugadani\n - Fixed detection of J-Link probes configured as CMSIS-DAP compatible probes, don't recognize them as J-Links. (#2954) by @Tiwalun\n - Fixed the installation of bash completions. (#2804) by @rmsc\n - Fixed ApType names & documentation (#2703) by @ithinuel\n - Shell completions: Use correct install method for Bash completions. (#2880) by @johkra\n - Improved ESP32, ESP32-S2 and ESP32-S3 support (#2738) by @bugadani\n - For Black Magic protocol, write in chunks of length multiple of the word size. (#2942) by @blinxe\n - Fixed progress bar display issues when programming multiple memory regions. (#2495) by @bugadani\n - MIMXRT10xx: when loading the flash programming algorithm, reserve space for boot ROM's memory requirements in OCRAM. (#2510) by @mciantyre\n - Fix excessive halting in `probe-rs attach` which may leave devices in a non-functional state (#2838) by @bugadani\n - MIMXRT10xx: Increase stack sizes for flashing algorithms. (#2621) by @mciantyre\n - Fixed warning printed for ESP32-C2/C3 devices when stopping `probe-rs run` (#2752) by @bugadani\n - Improved compatibility with certain J-Link clones (#2732) by @bugadani\n - Fixed a problem with semihosting on ARM targets affecting embedded-test. (#2604) by @t-moe\n - The debug stack unwind will continue attempting an unwind when encountering a 0(zero) value for the Link Register (LR). (#2509) by @noppej\n - Passing `--protocol jtag` when using an ST-Link probe will now actually use JTAG. (#2675) by @bugadani\n - Fixed probe-rs-tools compilation panicing when \"git\" is not installed. (#2492) by @newAM\n - Fixed a problem where CMSIS-DAP probes may cause a panic. (#2539) by @bugadani\n - Fixed writing short unaligned data using `MemoryInterface::write` (#2873) by @bugadani\n - Fixed an issue where some low-level JTAG commands may have been incorrectly rerun.\n   Fixed an issue with Xtensa instruction busy check.\n   Fixed an issue where probe-rs wasn't able to correctly read from the flash of ESP32-S3 devices. (#2841) by @bugadani\n - Use `RUST_LOG` as the log filter if `Embed.toml` does not specify a level. (#2528) by @bugadani\n - Improved unwinding RISC-V stack traces (#2829) by @bugadani\n - Fixed listing some CMSIS-DAP probes twice. (#2723) by @bugadani\n - Use `bool::is_some_and()` rather than an hand-crafted version with `bool::map_or(false, …)`. (#2853) by @samueltardieu\n - Fixed flashing AT32F4 devices (#2561) by @bugadani\n - Fixed an issue that could cause the chip to be erased in the middle of the flashing process. (#2495) by @bugadani\n - NRF91 and NRF52 debug sequence has been fixed for Black Magic Probe (#2948) by @mfiumara\n - Added guard to DPIDR read after reset to accomodate slow recovering chips. (#2900) by @mubes\n - Fixed an error where running a non-elf firmware results in a defmt parse error. (#2825) by @bugadani\n - Fixed an issue using JTAG with FTDI and J-Link probes (#2674) by @bugadani\n\n### Removed\n\n - Removed `rtt::Channels`, replaced with `Vec<T>` (#2580) by @bugadani\n - Removed the majority of `ARM_FLASH_BLOB_HEADER`, replaced with two arm thumb `brkpt` instructions (#2883) by @bobrippling\n - probe-rs should no longer emit `log` events via `tracing`. You can re-enable this by adding `tracing = { version = \"0.1\", features = [\"log\"] }` to your crate's Cargo.toml. (#2520) by @konkers\n - Removed `ScanRegion::Range` and added `ScanRegion::range()` (#2616) by @bugadani\n\n## [0.24.0]\n\nReleased 2024-05-22\n\n### Added\n\n - Added support to run embedded-test testcases (#2292) by @t-moe\n - Added support for STM32U0 devices (#2366) by @Dirbaio\n - Add support ELF64 to load programs for AArch64. (#2270) by @tnishinaga\n - Added SAM3X target (ATSAM3X4C, ATSAM3X4E, ATSAM3X8C, ATSAM3X8E and ATSAM3X8H). (#2293) by @BadyJoke\n - added enable/disable kickstart power for J-Link (#2163) by @zakimoo\n - Added `verify` and `disable_double_buffering` options to Embed.toml (#2419) by @bugadani\n - Added `SYS_EXIT_EXTENDED` and `SYS_GET_CMDLINE` semihosting operation decoding. (#2241) by @t-moe\n - Update the `STM32WB_Series.yaml` targets with `target-gen arm --filter STM32WBxx_DFP` (#2248) by @kquinsland\n - `cargo embed` and `cargo flash` now try to verify image compatibility (#2329) by @bugadani\n - Add support for the HK32F030M series of chips. (#2281) by @prosper00\n - probe-rs now has a machine interface (MI).<br>\n   The machine interface can be accessed via `probe-rs mi` and is intended to have a set of\n   machine operable & readable commands & responses.\n   This will allow for example a CI to use probe-rs in predictable fashion or allows auto-updaters to install the most current version.<br>\n   A separate crate with interface types called `probe-rs-mi` was added to let users easily parse the output of the MI. (#2459) by @Yatekii\n - Add the `list_break` command to `probe-rs debug` to list the set breakpoints. (#2385) by @mciantyre\n - Add support RTT for 64bit processor (#2296) by @tnishinaga\n - Expose all probe options as environment variables (#2232) by @korken89\n - Added autocompletion support for probe-rs<br>\n   For zsh and bash, connected debug probes and loaded chips are autocompleted too for the respective arguments. (#1299) by @Yatekii\n - Users can now specify IP address for dap-server to bind. (#2373) by @KOBA789\n - Added semihosting support for Xtensa Architecture (#2292) by @t-moe\n - Added `DebugProbeInfo::is_probe_type` to simplify filtering probe types (#2238) by @bugadani\n - Added support for Renesas RA0, RA2, RA4, RA6, RA8 series chips (#2473) by @pdh11\n - Users can now specify RTT channel operating mode for the debugger. (#2326) by @bugadani\n - Armv8a: add fast memory access functions for AArch64 (#2271) by @tnishinaga\n - Debug: When a \"Reset Handler\" is identifiable in the call stack, the stack unwind will include a handler frame, similar to those for other exception handlers. (#1935) by @noppej\n - Added support for SWM341 (#2424) by @hysonglet\n - Commands in the probe-rs util now have a `--report` flag which allows users to generate a ZIP with info about their error if the command leads to an error.<br>\n   The ZIP is NOT uploaded. It is saved to disk and can be inspected and manually uploaded to e.g. Github. (#2472) by @Yatekii\n - Report an error when the probe does not support the requested protocol (#2264) by @ithinuel\n - Error out when a DPv3 is detected (#2264) by @ithinuel\n - The MI now has a `meta` command that returns a bunch of meta info about the binary build, such as the version or the commit hash off which the binary was built. (#2459) by @Yatekii\n - Autodetect the core to attach the RTT server by looking at which core can access the RAM where the RTT control block is (#2297) by @guissalustiano\n - Added `into_iter()` to `rtt::Channels` (#2247) by @bugadani\n - Added support for the EFM32PG22 series of chips (#2408) by @sirhcel\n - Added the option to select which JTAG TAP a given RISC-V or Xtensa core belongs to. (#2386) by @bugadani\n - Added support for the STM32H7Rx/STM32H7Sx (STM32H7 \"bootflash line\") series of chips (#2469) by @Dirbaio\n - Support for Texas Instruments cc13x2_cc26x2 device family (#1729)<br>\n   - Made JTAG scanning optional during configuration (#2215) (#1771) by @seanmlyons22\n\n### Changed\n\n - `Rtt::up_channels` and `Rtt::down_channels` are now public (#2247) by @bugadani\n - * The `probe-rs dap-server` command now handles the `--log-to-folder` and `--log-file` CLI arguments.\n   * When neither option is supplied, the default behaviour is that logs are written to the DAP client's \"Debug Console\" window.\n     * In order to avoid adversely affecting the DAP client performance, we will disallow \"trace\" level logging when sending logs to the Debug Console. (#2457) by @noppej\n - Reworked the `rtt` section in `Embed.toml`. (#2249) by @bugadani\n - If no `RUST_LOG` environment variable is set, the probe-rs DAP server will now use a default logging configuration of `probe_rs=warn`. (#2457) by @noppej\n - The `Run` cmd has been refactored to allow multiple different run modes in the future. (#2295) by @t-moe\n - By default, `defmt` RTT channels are configured to `BlockIfFull`. (#2326) by @bugadani\n - Only enumerate alternate multi-drop addresses if the Default address failed (#2352) by @ithinuel\n - Renamed `--probe-selector` to `--probe` in `cargo embed` (#2262) by @bugadani\n - `DebugProbeInfo::probe_type` is no longer public. You can use `DebugProbeInfo::is_probe_type` to filter.\n   You no longer need to supply a `lister` to `DebugProbeInfo::open` (#2238) by @bugadani\n - Renamed the `--format` argument to `--binary-format` for upcoming embedded-test integration. (#2240) by @t-moe\n - The binaries `probe-rs`, `cargo embed` and `cargo flash` have been moved to a separate\n   `probe-rs-tools` crate. This means that the installation method has changed as well.<br>\n   See the probe-rs homepage at https://probe.rs or the README for the updated installation instructions. (#2364) by @Tiwalun\n - RTT: defmt location information is no longer displayed by default.\n   RTT: timestamps are now displayed by default, if available.\n   RTT: `show_timestamps` and `show_location` can now only be set in the up channel configuration.\n   RTT: channel names are no longer configurable. (#2377) by @bugadani\n - Changed how architecture-specific core interfaces are accessed:\n    - `probe::Probe::try_get_xtensa_interface` now takes an `XtensaDebugInterfaceState` object that should be saved and reused between interface accesses.\n    - `probe::Probe::try_get_riscv_interface` has been renamed to `try_get_riscv_interface_factory` and returns a builder object to create state objects, and to attach the probe using such a state object.\n    - The corresponding `DebugProbe` APIs have been changed. (#2386) by @bugadani\n\n### Fixed\n\n - Debug: During a stack unwind, incorrect processing of function identifiers, sometimes displayed incorrect function names and associated variable definitions in the stack. (#2302) by @noppej\n - Prevent duplicate inputs being registered in cargo-embed on Windows. (#2260) by @calebfletcher\n - * Fix breakpoint search for binaries using DWARF 4 debug information. (#2324) by @Tiwalun\n - Provide a helpful error message when invalid `connectUnderReset` is used. (#2219) by @noppej\n - Fix detection of the defmt timestamp functionality as reported by ELF symbols (#2267) by @Javier-varez\n - Do not 'silence' errors that need to be reported to the user. Specifically errors during the `attach` and `launch` requests, where flashing can fail, and the user needs to know about it. (#2439) by @noppej\n - Fix wlink detection fail. (#2273) by @andelf\n - RISC-V: fixed an issue that accidentally disabled the debug module during certain operations (#2224) by @bugadani\n - Fixed the most frequent `RTT: Control block corrupted` errors (#2340) by @bugadani\n - Improved error reporting for CMSIS-DAP probes. (#2479) by @gtsiam\n - * Add support for disabling debug power in the debug port when disconnecting. This fixes an issue with the RP2040 where it was stuck in reset, due to the Rescue DP. (#2282) by @Tiwalun\n - The process of finding function DIE's assigned the `low_pc` and `high_pc` values based on only the last processed `gimli::Range` for the funciton DIE.  (#2258) by @noppej\n - The debugger can now handle nested arrays in C code (#2268) by @bugadani\n - Fixed cargo-embed not processing defmt data correctly (#2323) by @bugadani\n - Fixed selecting one of multiple ESP USB JTAG probes (#2382) by @bugadani\n - Fixed flashing certain STM32F750 variants (#2312) by @bugadani\n - ARMv8A: Fix a problem that RTT Attach fails because the core is not halted during memory access. (#2269) by @tnishinaga\n - The debug unwind sometimes reported \"unknown\" for function names, when the DWARF encodes the name behind a `DW_AT_specification` reference. The fix will resolve any of the attributes, not just the name, which are in the DIE referenced by the `DW_AT_specification` tag. (#2291) by @noppej\n - Probe-rs should now succeed more at flashing RISC-V ESP32 devices (#2365) by @bugadani\n - fix `probe-rs attach` \"Timeout occurred during operation.\" error. (#2259) by @eZioPan\n - Fixed so that secure flash area on LPC55S69 can be loaded. (#2353) by @te-johan\n - It is now possible to `probe-rs erase` ESP32 chips (#2279) by @bugadani\n - ATSAMD devices should no longer fail to reset after a chip erase. (#2325) by @bugadani\n - Revise the MIMXRT1170 reset sequence to perform a system reset. Fixes #1971.<br>\n   Reserve space for the MIMXRT1170 boot ROM's memory in OCRAM. (#2387) by @mciantyre\n - Debug: When the stack unwind encounters stack frames with no return register (LR/RA) values, it will not try to unwind them. This happens when reset handler trampolines (e.g. cortex-m-rt) explicitly clears those values to prevent debuggers from unwinding past the `main_trampoline`. Attempting to unwind past these frames results in undefined behavior. (#1935) by @noppej\n\n### Removed\n\n - `target-gen` no longer generates `stack_size` for flash algorithms (#2307) by @bugadani\n - Removed `drain()` from `rtt::Channels` (#2247) by @bugadani\n - Removed `halt_afterwards` from Embed.toml (#2419) by @bugadani\n - The MIMXRT1170 target does not contain anything for a Cortex M4. The MIMXRT1170 target continues to only support the Cortex M7. (#2387) by @mciantyre\n - Removed the `rtt` cargo feature (#2348) by @bugadani\n\n## [0.23.0]\n\nReleased 2024-02-24\n\n### Added\n\n - Added option to specify load address for flash algorithm data pages (#2099) by @bugadani\n - Added multidrop support for J-Link probes (#2079) by @bugadani\n - Added support for 16bit reads and writes. (#2018) by @Dirbaio\n - probe-rs info now supports Xtensa devices (#2022) by @bugadani\n - Added `chipDescriptionPath` to debug server configuration\n   rtthost: Small refactor to reuse code (#2050) by @bugadani\n - It is now possible to configure the speed of FTDI probes (#2075) by @bugadani\n - Allow specifying a chip via environment variable (#1958) by @jessebraham\n - Add support for the esp32 targets (3.3V VDD_SDIO) (#2102) by @bugadani\n - Add support for AirMCU series. (#1974) by @HalfSweet\n - Added ARM interface support (JTAG only) to FTDI probes. (#2090) by @bugadani\n - Add support for using a hart other than hart 0 (#2080) by @bjoernQ\n - debug: Added `StackFrame::canonical_frame_address` and `StackFrameInfo` (#2134) by @bugadani\n - Exposed the internal probe implementations (#2027) by @bugadani\n - Support specifying a TARGETSEL value to the `probe-rs info` subcommand. This can be used to see information about a SWD multi-drop target. (#2092) by @Tiwalun\n - Added support to `cargo embed` for publishing raw RTT data for specific channels on a tcp socket. (#2126) by @ijager\n - Added limited C debugging capabilities (#2171) by @bugadani\n - probe-rs now supports flashing STM32WLE5CCUx MCUs (#2036) by @elpiel\n - Add support for the esp32s2 target (#2002) by @bugadani\n - probe-rs now supports flashing CH32V307 MCUs (#2136) by @Marcuss2\n\n### Changed\n\n - Ensure then when executing setup commands and sequences that the core is halted. (#2151) by @MabezDev\n - JLink: handle multiple JTAG TAPs (#2025) by @bugadani\n - `UnitInfo` is now public.\n   `VariableCache::new_dwarf_cache` and `VariableCache::create_variable` now take an `Option<&UnitInfo>`. (#2150) by @bugadani\n - The FTDI probe driver is now enabled unconditionally (#2077) by @bugadani\n - The following are now available under `probe_rs::probe`: `AttachMethod`, `DebugProbe`, `DebugProbeError`, `DebugProbeInfo`, `DebugProbeSelector`, `Probe`, `ProbeCreationError`, `ProbeFactory`, `WireProtocol`\n   `Lister` is now available under `probe_rs::probe::list` (#2027) by @bugadani\n - Moved `scan_chain` under `jtag` in target descriptions (#2082) by @bugadani\n - The scan chain information in target descriptions is now always used to validate the measured JTAG chain. (#2082) by @bugadani\n - Use the `nusb` crate for USB I/O. (pure-Rust replacement for `rusb`/`libusb`). (#1842) by @Dirbaio\n - Extract ProbeDriver from DebugProbe (#1996) by @bugadani\n\n### Fixed\n\n - Fixed `--speed` being ignored by J-Links (#2109) by @bugadani\n - Temporarily pin defmt-decoder version to deal with breaking change in 0.3.10 (#2156) by @tommy-gilligan\n - cmsis-dap: Increase USB timeout to 1s. (#2205) by @Tiwalun\n - jlink: Consider free memory size reported by J-Link when performing SWD transfers. (#2144) by @Tiwalun\n - Don't stop DAP debugger server when an error unwinding an exception occurs. (#2198) by @Tiwalun\n - Fix reading back an empty buffer from the espusbjtag probe on a cold boot. (#2173) by @MabezDev\n - Fixed logging causing multiple progress bars to appear in console output. (#2104) by @bugadani\n - Fixed flashing MIMXRT1060 devices (#2089) by @bugadani\n - Fixed STM32G431xB flashing, which was broken by adopting the [version 1.5.0](https://www.keil.arm.com/packs/stm32g4xx_dfp-keil/versions/) STM32G4 target pack from upstream. (#2061) by @dlaw\n - espusbjtag, ftdi: fix IR length measurement (#2024) by @bugadani\n - Fixed `probe-rs info` not recognising Xtensa chips if probe supports SWD (#2069) by @bugadani\n - Fixed cargo-embed not respecting the target's preferred image format. (#2104) by @bugadani\n - Do not print RTT error if there is nowhere to look for the control block (#2073) by @bugadani\n - Fixed a regression that made it impossible to select a chip target that was a substring of another chip (eg cortex-m3 is a substring of cortex-m33) (#2121) by @9names\n - Debug: Do not fail when encountering new `DW_AT_accessibility` attribute in debug info. (#2149) by @noppej\n\n### Removed\n\n - Removed the redundant `begin_data` field of `FlashAlgorithm` (#2095) by @bugadani\n - Removed `DebugProbeType` (#1996) by @bugadani\n - Removed the `ftdi` and `ftdi-vendored` features (#2077) by @bugadani\n - Removed (hidden) private Xtensa APIs (#2051) by @bugadani\n\n## [0.22.0]\n\nReleased 2024-01-03\n\n### Added\n\n - Add support for CH32V003 RV32EC RISC-V MCU (#1876) by @andelf\n - Add support for `SAMV71` series targets (#1861). (#1861) by @matteocarnelos\n - target-gen: Add support for Cortex-M55 and Cortex-M85 (#1959) by @Tiwalun\n - Add OpenTitan target file with description of the Earl Grey chip. (#1980) by @jwnrt\n - Added support for riscv semihosting SYS_EXIT syscall.<br>\n   Please note that probe-rs with espflash < 3.0 will probably fail to flash a binary containing semihosting calls due to https://github.com/esp-rs/espflash/issues/522 (#1901) by @t-moe\n - Add support for the esp32c2 target (#1869) (#1869) by @SergioGasquez\n - Add support for the esp32s3 target (#2003) by @bugadani\n - Auto-detect ESP32 flash size (#1952) by @bugadani\n - Added support for EFM32PG1B series microcontrollers. (#1845) by @BogdanOlar\n - Xtensa: Add flashing support for the esp32s3 (#1956) by @bugadani\n - The debugger REPL commands now have an implementation for `backtrace`. The stacktrace is serialized using the yaml format. (#1918) by @noppej\n - Allow specifying the default `Format` for a target<br>\n   Refactor the target definition to allow specifying the default Format\n   for a given target. By default all targets `default_target` is `Elf`,\n   except for the esp32* targets which are now `Idf`. (#1886) by @MabezDev\n - Added initial xtensa support. (#1928) by @MabezDev\n - Added support for LM3S series targets. (#1990) by @evanmcclure\n - Added the concept of transfer encoding that is applied during firmware download. Added the Miniz encoding. (#1947) by @bugadani\n - Added a new `dump` command for the CLI and vscode REPL to dump a full core state (#1783). (#1783) by @Yatekii\n - Handle the `DW_AT_specification` attribute when unwinding. (#1853) by @Tiwalun\n - Add `--catch-reset` & `--catch-hardfault` cli flags (#1899) by @MabezDev\n - Custom debug sequences for ATSAMD1x, D2x, DAx micros.  Enables DSU-based chip erase. (#1855) by @ianrrees\n - Add support for the esp32h2 target (#1862) (#1862) by @MabezDev\n - Add scan chain support for the esp32* targets and the espusbjtag driver. (#1878) by @MabezDev\n - The rtthost gets the ability to reset the targert after the RTT session is established. (#1900) by @Sh3Rm4n\n - Added support for PAC52XX series microcontroller. (#1868) by @liamkinne\n - Added experimental support for WCH-Link probe in RV mode. (#1437) by @andelf\n - Xtensa: detect flash size (#1976) by @bugadani\n\n### Changed\n\n - Continue running the core if an unsupported semihosting call occured.<br>\n   Previously, `probe-rs run` would exit with \"the CPU halted unexpectedly\", whenever an unknown semihosting operation occurred.\n   With this change, `probe-rs run` will print a warning and then automatically continue the core. (#1901) by @t-moe\n - `dap-server`: Move initial check of core state from `threads` request to `configuration_done` request. (#1903) by @Andrew-Collins\n - Renamed `JTAGAccess::get_idle_cycles` to `idle_cycles` and removed redundant inherent fns (#1924) by @bugadani\n - Reduced logging level for custom debug sequences (#1882) by @ianrrees\n - The `dump` command that is used by the VSCode REPL can now be used without specifying memory regions.<br>\n   The resulting coredump will include all the memory regions required to unwind the in-scope functions and variables. (#1930) by @noppej\n - For CLI builds, statically link to libusb to make installation of precompiled binaries easier. (#1830) by @Tiwalun\n - By default, `probe-rs run` and `probe-rs attach` will only scan the memory for the RTT control block if the `--rtt-scan-memory` flag is provided. It will still always look for a `_SEGGER_RTT` symbol in the ELF file and use that first in all circumstances. (#1919) by @ia0\n - Refactor unwinding code to improve testability, add tests for unwinding. (#1853) by @Tiwalun\n - The `ftdi-vendored` feature now enabled `ftdi` automatically (#1999) by @bugadani\n - Hide vector catch errors when it hasn't been implemented for the target. (#1885) by @MabezDev\n - Logging to file is now off by default. Use `--log-to-folder` or `--log-file` to enable. (#1946) by @bugadani\n - Improved RISC-V IO utilisation by batching more operations (#1932) by @bugadani\n - The read operations from the `MemoryInterface` trait are moved into a separte `ReadOnlyMemoryInterface` trait, so that it is clear which code actually changes memory. (#1853) by @Tiwalun\n - Updated ESP32 targets to tune flashing speed (#1936) by @bugadani\n - Move the stack refresh functionality to poll_cores, and trigger a refresh when the state changes from 'running' to 'halted'. (#1902) by @Andrew-Collins\n - Rewrote benchmark cli tool, removing report submission and adding multiple speed/size/stride options (#1837) by @9names\n - RP2040 memory map changed from three blocks (256K + 4K + 4K) to one block (264K). Allows ELF files to contain sections that go over the boundaries. (#1943) by @thejpster\n - espusbjtag: don't reset the chip on attach (#1915) by @MabezDev\n - espusbjtag: capture fewer bits (#1931) by @bugadani\n - Refactor esp-usbjtag to clean it up some (#1920) by @bugadani\n\n### Fixed\n\n - Disable the second core on LPC55S69 to fix #1802. (#1823) by @Tiwalun\n - Fix LPC55S69 reset sequence\n   Fix LPC55S69 attach without disturbing target (#1907) by @9names\n - * Improved handling of source file paths in debugger, don't assume paths in the debug information\n     are in the same format as the paths of the host OS. (#1857) by @Tiwalun\n - Updated the STM32G4 target yaml to [version 1.5.0](https://www.keil.arm.com/packs/stm32g4xx_dfp-keil/versions/). This fixes the stm32g4xx_256 flash algorithm. (#1896) by @dlaw\n - Set DbgSwEnable to 1 during memory access (#1841) by @pcc\n - Flasher: single buffer transfers are now done with u32 writes (#1944) by @bugadani\n - cli: Rename struct to avoid debug assert in `profile` subcommand. Fix #1808. (#1825) by @Tiwalun\n - Added missing reset and halt timeout handling for RV32 targets. (#1874) by @andelf\n - Also use serial number to distinguish CMSIS-DAP probes. Fix #1835. (#1835) by @pcc\n - Added missing SRAM entries for STM32L4 microcontrollers. (#1856) by @VilNeo\n - cli/run: Fix a bug where the last messages printed by the code before crashing (like a panic message) did not get printed. (#1890) by @Dirbaio\n - Fixed cases where probe attachment were inconsistent. (#1929) by @MabezDev\n - Fix minor bugs of WCH-Link implementation, add new probe varient. (#1875) by @andelf\n - Flash loader will now properly flash all bytes (#1951) by @bugadani\n - Update debug sequence for LPC55S69 with newest from pack, fixes an issue where the chip would not reset properly. (#1832) by @Tiwalun\n - Change from openSSL to rustls.<br>\n   The prebuilt binaries depended on the system openSSL installation on Linux.\n   This meant that they required openSSL1, which is not supported e.g. on Ubuntu 22.04.\n   Changing to rustls removes this dependency. (#1828) by @Tiwalun\n - Issue DAPABORT at startup and after receiving WAIT response from CMSIS-DAP (#1840) by @pcc\n - * Mark all ARM memory accesses as cacheable, to indicate they must not bypass\n     the cache and instead should see the same data as the CPU. Fixes #1715. (#1883) by @adamgreig\n - Fix the RAM address mapping for the esp32c3. (#1898) by @MabezDev\n - Fix core names and regions in LPC55S69 target description. (#1832) by @Tiwalun\n - dap-server: Return correct type for error response. (#1895) by @Tiwalun\n - `target-gen`: Fix incorrect URL formatting (#1860). (#1860) by @matteocarnelos\n - espusbjtag: Fixed a potential edge case that could lock up the interface. (#1933) by @bugadani\n - Unlock the OS Lock when starting an ARMv8 core (#1839) by @pcc\n - Correct esp-usbjtag reset assert/deassert levels. (#1922) by @bugadani\n - Prevent Debug Adapter Protocol workarounds for VSCode quirks from breaking other DAP clients. (#1872) by @linuxtim\n\n### Removed\n\n - Removed unused `--assert` from `probe-rs reset` (#1993) by @bugadani\n\n## [0.21.1]\n\nReleased 2023-10-12\n\n### Added\n\n - rtthost: Add --version\n\n### Changed\n\n - `cli`: Simplify `RttActiveChannel::get_rtt_data` (#1806)\n\n### Fixed\n- debug: Do not crash and, and improve error message when unwinding memory location for optimized binaries. (#1810)\n\n## [0.21.0]\n\nReleased 2023-10-04\n\n### Added\n\n- Added Target for MSPM0L (#1789)\n- Support for EFM32 Happy Gecko MCUs (#1747)\n- Added RA4M1 series target, R7FA4M1AB. (#1706)\n- Support for NXP i.MX RT500 series chips: MIMXRT595S, MIMXRT555S, MIMXRT533S (#1642)\n- Added --no-location option to the CLI run command, which suppresses the filename and line number\n  information from the rtt log (#1704)\n- target-gen: Add new `--test-address` option to the `target-gen test` subcommand. (#1708)\n- `cli`: Add `--verify` flag to `download`, `flash` and `run` (#1727)\n- `cli`: Add `read` and `write` commands to interact with target memory (8,32,64 bit words) (#1746)\n- Added STM32U5A and STM32U59 targets. (#1744)\n- Added AT32F4 series targets (#1759)\n- Allowed JTAG scan chain information to be encoded in targets (#1731)\n- Added support for IDF and BIN to cargo flash.  Added UF2 support to cargo\n  flash and probe-rs. (#1765)\n- Support for handling an Arm Cortex-M Semihosting 'Exit Success' or 'Exit Failure' command. (#1755)\n- Added getters to registry : `get_targets_by_family_name` & `get_target_and_family_by_name`, change `get_target_by_name`. (#1770)\n- Support for vector catch in Armv8-M targets (#1709)\n- Add log rotation to stop disks from filling. Currently a maximum of 20 logs is kept. (#1780)\n- Allow to customize the defmt log format with `--log-format`. (#1788)\n\n### Changed\n\n- `cli`: Allow to interrupt `probe-rs run` during RTT scan (#1705).\n- `cli`: Ignore errors from `enable_vector_catch` (#1714).\n- `cli`: Retry RTT attach before continuing (#1722).\n- `cli`: Clean clap attributes (#1730)\n- `target-gen`: (#1745)\n  - Memory regions in target.yaml are now sorted with lowest address first.\n  - Use `.pdsc` flash algorithm `RAMstart` field to calculate `load_address` for target yaml.\n- Target definitions can now constrain the RTT automatic scanning ranges to just a subset of all available RAM, to support targets that have large amounts of RAM that would take a long time to scan. (#1738, #1749)\n- `cli`: Output `defmt` logs as colored (#1752)\n\n### Fixed\n  - Handle non-secure RESET peripheral in nRF5340 `debug_core_unlock` sequence.\n\n### Removed\n- `cli`: `dump` subcommand, replaced by `read`.\n\n## [0.20.0]\n\nReleased 2023-07-19\n\n### Added\n\n- `dap-server`: In addition to `Elf` format, this adds support for binary formats `Bin`, `Hex`, and `Idf` (#1656).\n- Added PAC55XX series targets (#1655)\n- Added support for JTAG commands via CMSIS-DAP protocol (#1462)\n- `core`: Added PAC55XX series targets (#1655)\n- `core`: Stack unwinding can now unwind beyond (optionally nested) exception handlers (#1665).\n  - ARMv6-M: Report Exception / Fault description, and Unwind the registers and next frames.\n  - ARMv7-M: Also decodes details about HardFault, UsageFault, BusFault, and MemManageFault.\n  - ARMv7-A, Armv8-M, Armv8-A, RISC-V: Not implemented - requires architecture specific implementations.\n- `cli`: Added a simple profiler to the probe-rs cli toolkit (#1628)\n- `core`: Added MSP432E4 target (MSP432E401Y and MSP432E411Y). (#1139)\n- `core`: Added vector catch for ARMv6-M and ARMv7-M (#1592)\n  - Currently supported are HardFault and CoreReset.\n- `cli`: The run command now prints a stack trace on `HardFault` (#1592)\n- Added a simple profiler to the probe-rs cli toolkit (#1628)\n- Added MSP432E4 target (MSP432E401Y and MSP432E411Y). (#1139)\n- probe-rs-cli: added `attach` subcommand. (#1672, #1616)\n\n### Changed\n\n- `cli`: more descriptive error messages for ambigous chips (#1671).\n- `cli`: When using `memory` as the trace sink for an ITM trace, the trace is now read\n  out through the debug registers (#1688)\n- `target-gen`: RTT is enabled by default now in the `test` command (#1690).\n\n### Fixed\n\n- `core`: Added a missing reset catch clear that prevented the CPU from properly starting after flashing RTT from attaching (#1675).\n- `cli`: fixed `--base-address` having no effect (#1664).\n- `cli`: fixed `--skip` not accepting hexadecimal values (#1664).\n- `cli`: all the commands now load the chip description path and provide uniform config arguments (#1691).\n- `dap-server`: The VSCode extension reports all STDERR errors if process initialization fails (#1699).\n- `debug` : Consider `RegisterValue` byte size when doing arithmetic on register addresses. (#1701)\n- FTDI probe: Fixed dr_pre bits not being handled correctly during register operations.\n- ARMv7-A, ARMv8-A: Fixed incorrect addresses for registers.\n\n### Removed\n\n- cli: removed obsolete `--skip-bytes` (which had no effect), use `--skip` instead (#1664).\n\n## [0.19.0]\n\nReleased 2023-06-27\n\n### Changed\n\n- Merged `probe-rs-cli`, `probe-rs-debugger`, `cargo-embed`, `cargo-flash` binaries into the `probe-rs` crate.\n  - `probe-rs-cli` is now available in `probe-rs`.\n  - `probe-rs-debugger` is now available as `probe-rs dap-server`.\n  - `cargo-embed` and `cargo-flash` functionality is unchanged, but they are now small shim binaries that invoke `probe-rs`.\n  - Running `cargo install probe-rs` installs the `probe-rs`, `cargo-embed` and `cargo-flash` binaries.\n- Merged the `gdb-server` crate into `probe-rs`. It's now available under `probe_rs::gdb_server`, and requires enabling the `gdb-server` Cargo feature.\n\n### Fixed\n\n- probe-rs: recognize `CMSIS-DAP` probes with device strings containing `CMSIS_DAP`\n- probe-rs-debugger: Show errors that happen before VSCode/DAP Client session initializion has completed (#1581).\n- probe-rs-cli-util: replace unwanted instance of `println` with `eprintln` (#1595, fixes #1593).\n- stlink: exit JTAG mode on idle to tristate debug interface (#1615).\n- probe-rs-debugger: The MS DAP Request `setBreapoints` clears existing breakpoints for the specified `Source`, and not for all `Source`'s (#1630)\n- probe-rs/flashing: Inconsistent address formatting in the \"No flash memory contains the entire requested memory range\" (`FlashError::NoSuitableNvm`) error message (#1644)\n- probe-rs/flashing: For targets whose flash algorithms require a fixed load address, always select a RAM region containing that address. (#1646)\n- probe-rs: Add support for the esp-idf binary format (#1629)\n\n### Added\n\n- Added support for the Olimex ARM-USB-TINY-H JTAG device (#1586).\n- Added support for propagating `CoreStatus` to the probe in use (#1588).\n- Added PY32F0xx series targets (#1619).\n- Flashing process can now detect and report if the flashing algorithm locks up the core that it's running on. (#1645)\n\n### Removed\n\n- Removed Sentry integration in the CLI tools.\n\n## [0.18.0]\n\nReleased 2023-03-31\n\n### Fixed\n\n- Add reset catch sequence for Silicon Labs EFM32/EFR32 Series 2 chips.\n- Support for detecting WCH-Link as CMSIS-DAP v1 probe\n- target-gen: Use the correct flash base address when testing flash algorithm (#1542)\n- VSCode and probe-rs-debugger is very slow if `rttEnabled: true` and target application has no RTT initialized (#1497).\n- prober-rs-debugger: Using the readMemory request on RISC-V (ESP32C3 board) is slow (#1275).\n- probe-rs-debugger: Improve handling of `disconnect` and `terminate` requests. With support in DAP Client/VSCode for: (#1197)<br>\n  - `Disconnect` - will disconnect the debug session, without affecting the run status of the target application.\n  - `Disconnect and Suspend` - will halt the target application, before disconnecting the debug session.\n  - `Terminate` request is not supported, and DAP configuration is such that it won't be requested by the client.\n- probe-rs-debugger: Improve handling of `restart` request. With support in DAP Client/VSCode for: (#1507)\n  - `Restart` will now restart the debug session. Currently this is support for ARM targets only.\n  - If a newer binary is available, and flashing enabled, then the new binary will be flashed before starting the new debug session.\n- probe-rs-debugger: Ensure VSCode will halt on all configured breakpoints`, irrespective of flashing config. (#1529)\n- probe-rs-debugger: Fix issue where \"Watch\" variables were not found in the debug session. (#1552)\n\n### Changed\n\n- Update MS DAP protocol to v1.60.0. Documentation clarifications only. (#1458)\n- probe-rs-debugger: Cleaned up the timing of caching unwind information, based on new MS DAP protocol docs. (#1458)\n- probe-rs: Allows `add_target_from_yaml` function to accept multiple sources\n- probe-rs-debugger: Remove `restart-after-flashing` option, and make it the default behaviour. (#1550)\n- probe-rs: Trigger rebuild if changes in the `PROBE_RS_TARGETS_DIR` detected (#1562).\n- probe-rs: Set the flash range of RP2040 to the max supported size (#1567)\n- probe-rs-debugger: Slightly relax the RISC-V restriction when handling `restart` request. Allows restart, but does not re-flash. (#1569)\n\n### Added\n\n- Added EFM32TG11B family targets (#1420)\n- Added LPC55Sxx target (#1513)\n- Added STM32H5xx targets (#1575)\n- Added custom sequence support to STM32L0, L1, L4, G0, G4, F0, F3, WB, WL,\n  enabling debug clocks during sleep modes (#1521)\n- Add default sequence 'debug_core_stop', which disables debugging when disconneting from ARM cores by default. (#1525)\n- probe-rs-debugger: Initial support for 'gdb-like' commands to be typed into VSCode Debug Console REPL. (#1552)<br>\n  - The `help` command will list available commands, and arguments.\n  - Command completions are supported for the individual commands, but not for the arguments.\n  - Additional commands can be added in the future, as required, but will benefit from some refactoring to share code with functionality that is already implementated in `dap_adapter.rs` for MS DAP requests.\n- debug: Enable debug experimental support for binaries compiled from C files (GNU C99/11/17). (#1558)\n- Added support for `monitor reset` and `monitor reset halt` commands in `gdb-server` (#1565)\n\n## [0.17.0]\n\nReleased 2023-02-06\n\n### Added\n\n- st-link: Support reading banked DP registers if firmware is new enough to support it.\n- target-gen: Add support for STAR-MC1 by Arm China\n\n### Fixed\n\n- probe-rs: Emit chip erase started and finished/failed events correctly (#1470, #1496)<br>\n  The finished/failed event would only be emitted when a sectorwise erase would be performed.\n  Now the events are correctly emitted.\n- probe-rs: Fixed a race condition when reseting NXP chips under JTAG (#1482)<br>\n  As an example, this makes flashing the Teensy 4.1 (which has an i.MX RT1062) reliable.\n- probe-rs: jlink: fix WAIT retries on AP reads. Fixes flashing on nrf91. (#1489)\n- Add flashing and debugging support for the ESP32C6 (#1476)\n- Debug: Fixed a number of known issues, which included some code refactoring to avoid code duplication (#1484).<br>\n  - Unwind of variables that are in inlined subroutines now resolve correctly under all known conditions.\n  - Unwind of nested arrays now resolve, irrespective of the levels of nesting (#1404).\n  - Gracefully handle the unwind of arrays that are empty.\n  - Correctly unwind pointers/references that are nested as references in several layers of structs.\n  - Correctly unwind pointers/references to variants and enums.\n  - Fix an error that terminated the debug when new architecture error variants were introduced by a previous PR.\n  - Fix an error where unwind memory locations decoded memory values as integer addresses without accounting for endianness.\n- VSCode: Avoid sending extraneous `StoppedEvent` from probe-rs-debugger (#1485).\n- cmsis-dap: Avoid endless recursion when recovering from errors.<br>\n  When an error occurred, the cmsis-dap code tried to read the debug port CTRL register.\n  If that read failed, it would again try to read the same register, returning in an\n  endless recursion.\n\n## [0.16.0]\n\nReleased 2023-01-29\n\nprobe-rs library is unchanged, version number is increased to keep in sync with other\nprobe-rs packages.\n\n## [0.15.0]\n\nReleased 2023-01-28\n\n### Added\n\n- target-gen: Add new `--fixed-load-address` flag to the `target-gen elf` subcommand. (#1419)<br>\n  This can be used when the flash algorithm needs to be loaded at a specific address.\n  The address is determined automatically from the ELF file.\n- target-gen: Extract RTT control block address from flash algorithm. (#1427)<br>\n  Check if the flash algorithm supports RTT, and if it does, store the RTT control block\n  address in the target YAML file.\n- probe-rs: Read RTT during flashing procedures if the algorithm supports RTT.<br>\n  This enables better debugging for flash-algorithms and should encourage development of said algorithms.\n- Add support for FT4232HL probe.\n- probe-rs-cli: Add `--log-file` option to specify where the log file should be placed.\n- target-gen: Add a command which enables the easy development and debugging of a flash algorithm.<br>\n  `target-gen test` is a new command to automatically upload, run, print RTT messages and test\n  a flash algorithm. Have a look at the - Added a simple profiler to the probe-rs cli toolkit (#1628)[template](https://github.com/probe-rs/flash-algorithm-template)\n  to create a new flash algorithm.\n\n### Changed\n\n- cmsisdap: Increased read timeout from 100ms to 1000ms.\n- rtt: Moved RTT to the probe-rs library instead of having it in its own library. (#1411)\n- probe-rs: update probe-rs/targets/STM32F3_Series.yaml with `target-gen`\n\n### Fixed\n\n- probe-rs: Avoid nested calls to tracing macros, otherwise filtering doesn't work properly. (#1415)\n- probe-rs-cli: Reduce RTT polling frequency in run command to avoid USB instability issues.\n\n## [0.14.2]\n\nReleased 2023-01-18\n\n- Added STM32С0 target (STM32С011 and STM32С031). (#1403)\n\n### Fixed\n\n- stlink: fix retries on DP/AP WAIT errors. (#1406)\n\n## [0.14.1]\n\nReleased 2023-01-14\n\n## [0.14.0]\n\nReleased 2023-01-13\n\n### Added\n\n- Added PartialEq Trait to the struct DebugProbeInfo. (#1173)\n- Added support for configuring trace data destinations (#1177)\n  - Tracing on M4 architectures utilize the TPIU for all hardware tracing (#1182)\n- ITM tracing can now be completed using the probe-rs CLI (#1180)\n- Added support for MIMXRT10xx targets (#1174)\n- Added support for the Cortex M7 of MIMXRT11xx targets (#1250)\n- Added support for in-line (column specific) breakpoints where multiple statements (potential breakpoints) are on the same line of source code. (#1156)\n- Added support for MSP432P4XX targets (#1201)\n- Added support for Microchip SAMDA1\n- Added Probe re-attach handling when needed after `debug_device_unlock`\n- Added Custom ArmDebugSequence for ATSAM D5x/E5x devices\n- Added a `FlashLoader::data` method (#1254)\n- Added Support for STM32H735 family. (#913)\n- Added support for MAX32660 target (#1249)\n- Added support for W7500 target\n- Added an optional `stack_size` configuration to flash algorithms to control the stack size (#1260)\n- Added Support for Debug Erase Sequences that (if available) are used instead of the normal chip-erase logic\n- Added Support for GD32E50x targets (#1304)\n- Added support for the Infineon XMC4000 family\n- Added support for the Infineon XMC4000 family (#1301)\n- Added debug support for viewing function arguments (#1333)\n- Added support for the EFM32GG11B family (#1346)\n- Added support for finding targets externally (#1338)\n\n### Changed\n\n- SWV vendor configuration has been refactored into sequences and trace functions have been renamed:\n  - `Session::setup_swv` has been renamed to `Session::setup_tracing`\n  - `Session::read_swo` has been renamed to `Session::read_trace_data`\n- `probe-rs-debugger`: RISC-V `ebreak` instruction will enter Debug Mode (#1213)\n- RTT: When a channel format is `defmt`, automatically set the channel mode to `BlockingIfFull` on attach. (Enhancement request #1161)\n- RTT: Report data decode errors when channel format is `defmt`. (#1243)\n  - Note: This is a breaking API change for `probe_rs_cli::rtt::RttActiveChannel::get_rtt_data()`. To mitigate the impact of this change:\n    - `probe_rs_cli::rtt::RttActiveTarget::poll_rtt()` will maintain the original signature and behaviour of ignoring errors from `defmt` until deprecated in 0.14.0.\n    - The new `probe_rs_cli::rtt::RttActiveTarget::poll_rtt_fallible()` will propagate errors from `get_rtt_data()` on any of the active channels.\n- target-gen: Various changes and optimizations: (#1259)\n  - Memory addresses and sizes in YAML are generated in hex format, for improved readability.\n  - Remove `Option::is_none`, empty `Vec`, and `false` bool values, in generated YAML, for improved readability.\n  - Generate all pack file specified memory regions.\n  - Match memory regions to pack file specified core names.\n- `probe_rs_target::chip::Chip` has a new field `pack_file_release` which is populated by `target-gen`.(#1259)\n- Benchmarking code moved from an example to `probe-rs-cli` subcommand (#1296).\n- Replace `log` crate, with `tracing` in `probe-rs-debugger` executable, and in the `rtt` library. (#1297)\n- Improved formatting of `probe-rs-cli info` output. (#1305)\n- Refactor VSCode handling of logging and user messaging - see [VSCode PR #37](https://github.com/probe-rs/vscode/pull/37) (#1334)\n- Refactor error handling, split `crate::Error::ArchitectureSpecific` into two separate variants for RISC-V and ARM, and create a new `ArmError` enum for ARM specific errors. (#1344)\n\n### Fixed\n\n- (#1351) Warning messages about duplicate packages when using `probe-rs` as a library\n- (#1269) Error message in case of FTDI device access issues.\n- (#350) Flashing and debugging on STM32 chips using WFI instructions should now be stable (fixed in #1177)\n- Fixed rtthost --scan-region to properly support memory range scannig. (#1192)\n- Debug: Improve logic for halt locations used by breakpoints and stepping. (#1156)\n- Debug: Some in-scope variables are excluded from stack_trace. (#1156)\n- Debug: Ensure RTT buffer on target is reported to DAP client in 'timely' manner. (#1208)\n- Debug: Provide unique default names on DAP client, when multiple RTT Channels have no configured name. (#1208)\n- Added missing memory regions for ESP32.yaml file, to fix RTT Channel name issue. (#1209)\n- Fix maximum addressable Flash size in ESP32.yaml file, to be 16Mb (was 64Mb). (#1209)\n- Debug: Enable stepping or running past a BKPT (Arm Cortex-M) or EBREAK (RISC-V) instruction (#1211).\n- (#1058) Non-successful DAP Transfer requests no longer require response data to be present.\n- Debug: Gracefully handle stack unwind when CFA rule references a FP with value of zero. (#1226)\n- Debugger: Improve core status checking during launch.(#1228)\n- Debugger: Prevent stack overflows when expanding \"static\" section in probe-rs-debugger. (#1231)\n- RTT: Prevent panicking in `probe-rs-cli-util/src/rtt/rs` when defmt stream decoding provides invalid frame index. (#1236)\n- Fix: Attaching to LPC55S69 seems to stop code execution - incorrect values in target YAML. (#1220)\n- Debug: Fix `probe-rs-debugger` crashes when variable unwind fails with excessively long error messages. (#1252)\n- Fix: Dual core devices had incorrect 'core' names in `STM32H7_Series.yaml`, causing panic during flashing. (#1023)\n- Fix: Include all RAM regions in `STM32H7_Series.yaml` (#429)\n- Fix: Include all new STM32H7 variants from the latest CMSIS pack file (#913)\n- Fix: Update STM32G0_Series.yaml to include latest variants (STM32G050, STM32G051, STM32G061, STM32G0B0, STM32G0B1, STM32G0C1) (#1266)\n- Fix: Correct flash algorithm values in LPC55S69.yaml. (#1220)\n- Fix: Timeout during flashing when using connect under reset - regression from #1259. (#1286)\n- Fix: Validate RiscV CSR addresses to avoid unnecessary panics. (#1291)\n- Debugger: Fix unpredictable behaviour when breaking on, or stepping over macros. (#1230)\n- Fix: Extend fix for WFI instructions (#1177) to STM32F1\n- Debugger: RTT data from target is now polled/reported in a timely manner, during stepping, and after breakpoint halting. (#1341)\n\n## [0.13.0]\n\n### Added\n\n- Added an option to disable use of double-buffering when downloading flash (#1030, #883)\n- rtt::ChannelMode implements additional traits: Clone, Copy, serde's Serialize and Deserialize\n- Added a permissions system that allows the user to specify if a full chip erase is allowed (#918)\n- Added debug sequence for the nRF5340 that turns on the network core can unlock both cores by erasing them if that is permitted (#918)\n- Support for core registers `msp`, `psp` and `extra`, extra containing:\n  - Bits[31:24] CONTROL.\n  - Bits[23:16] FAULTMASK.\n  - Bits[15:8] BASEPRI.\n  - Bits[7:0] PRIMASK.\n- Debug port start sequence for LPC55S16. (#944)\n- Added a command to print the list of all supported chips. (#946)\n- Added a command to print info about a chip, such as RAM and the number of cores. (#946)\n- ARM:`Session::swo_reader` that returns a wrapping implementation of `std::io::Read` around `Session::read_swo`. (#916)\n- Added CortexM23 to Armv8m mapping for `target-gen`. (#966)\n- Added get_target_voltage to the Probe struct to access the inner DebugProbe method. (#991)\n- Debugger: Added support for showing multiple inlined functions in backtrace. (#1002)\n- Debugger: Add support LocLists (attribute value of DW_AT_location) (#1025)\n- Debugger: Add support for DAP Requests (ReadMemory, WriteMemory, Evaluate & SetVariable) (#1035)\n- Debugger: Add support for DAP Requests (Disassemble & SetInstructionBreakpoints) (#1049)\n- Debugger: Add support for stepping at 'statement' level, plus 'step in', 'step out' (#1056)\n- Debugger: Add support for navigating and monitoring SVD Peripheral Registers. (#1072)\n- Added GD32F3x0 series support (#1079)\n- Added support for connecting to ARM devices via JTAG to the JLink probe\n- Added preliminary support for ARM v7-A cores\n- Added preliminary support for ARM v8-A cores\n- CLI Debugger: Added 8-bit read / write memory commands\n- Added Arm Serial-Wire-View (SWV) support for more targets (e.g. STM32H7 families) (#1117)\n  - Support added for trace funnels and SWO peripherals\n  - Added custom sequencing for STM32H7 parts to configure debug system components on attach\n- Added support for ARMv8-A cores running in 64-bit mode (#1120)\n- Added FPU register reading support for cortex-m cores\n- Added support for Huada Semiconductor HC32F005 MCUs.\n- Added FPU register support for Cortex-A cores (#1154)\n- GDB now reports the core name in `info threads` (#1158)\n- Added a recover sequence for the nRF9160 (#1169)\n- Added support for `JTAGAccess::write_register_batch` the esp-serial-jtag probe (#1633)\n\n### Changed\n\n- ARM reset sequence now retries failed reads of DHCSR, fixes >500kHz SWD for ATSAMD21.\n- Chip names are now matched treating an 'x' as a wildcard. (#964)\n- GDB server is now available as a subcommand in the probe-rs-cli, not as a separate binary in the `gdb-server` package anymore. (#972)\n- `probe_rs::debug` and `probe-rs-debugger` changes/cleanup to the internals (#1013)\n  - Removed StackFrameIterator and incorporated its logic into DebugInfo::unwind()\n  - StackFrame now has VariableCache entries for locals, statics and registers\n  - Modify DebugSession and CoreData to handle multiple cores.\n  - Modify Variable::parent_key to be Option<i64> and use None rather than 0 values to control logic.\n  - Use the updated StackFrame, and new VariableNodeType to facilitate 'lazy' loading of variables during stack trace operations. VSCode and MS DAP will request one 'level' of variables at a time, and there is no need to resolve and cache variable data unless the user is going to view/use it.\n  - Improved `Variable` value formatting for complex variable types.\n- Updated STM32H7 series yaml to support newly released chips. (#1011)\n- Debugger: Removed the CLI mode, in favour of `probe-rs-cli` which has richer functionality. (#1041)\n- Renamed `Probe::speed` to `Probe::speed_khz`.\n- Debugger: Changes to DAP Client `launch.json` to prepare for WIP multi-core support. (#1072)\n- `ram_download` example now uses clap syntax.\n- Refactored `probe-rs/src/debug/mod.rs` into several smaller files. (#1082)\n- Update STM32L4 series yaml from Keil.STM32L4xx_DFP.2.5.0. (#1086)\n- Debugger: SVD uses new `expand` feature of `svd-parser` crate to expand arrays and clusters. (#1090)\n- Updated cmsis-pack dependency to version 0.6.0. (#1089)\n- Updated all parameters and fields that refer to memory addresses from u32 to u64 in preparation for 64-bit target support. (#1115)\n- Updated `Core::read_core_reg` and `Core::write_core_reg` to work with both 32 and 64-bit values (#1119)\n- Renamed `core::CoreRegisterAddress` to `core::RegisterId`, and `core::CoreRegister` to `core::MemoryMappedRegister`. (#1121)\n- Updated gdb-server to use gdbstub internally (#1125)\n- gdb-server now uses all cores on a target (#1125)\n- gdb-server now supports floating point registers (#1133)\n- Debug: Correctly handle compressed vs non-compressed instructions sets for RISC-V. (#1224)\n- The core now needs to be halted for core register access. (#1044)\n- The memory functions to do memory transfers have been standardized. This effectively means that `read_*` and `write_*` do what the name says unconditionally. E.g. `read_8` will always do 8 bit reads or `write_32` will always do 32 bit writes. New functions that are called `read` and `write` have been introduced. Those will try to maximize throughput. They mix transfer sizes however they see fit. If you need to use a feature of a chip that requires a specific transfer size, please resort to the `read_*` and `write_*` functions. (#1078)\n\n### Fixed\n\n- Fixed a panic when cmsisdap probes return more transfers than requested (#922, #923)\n- `probe-rs-debugger` Various fixes in PR. (#895)\n  - Fix stack overflow when unwinding circular references in data structures. (#894)\n  - Reworked the stack unwind in `StackFrameIterator::new()` and `StackFrameIterator::next()`\n    - More reliable backtrace and register values for previous frames in the stack.\n    - Lazy (on demand) load of &lt;statics&gt; variables to avoid overhead during debugging.\n    - More accurate breakpoint handling from VSCode extension.\n    - Virtual frames for `inlined` functions, that can step back to the call site.\n  - A fix to adapt to Rust 2021 encoding of Dwarf `DW_AT_discr_value` tags for variants.\n  - Updated MS DAP Protocol to 1.51.1.\n  - Adapt to `defmt` 0.3 'Rzcobs' encoding to fix [VSCode #26](https://github.com/probe-rs/vscode/issues/26).\n  - Support the new `defmt` 0.3 `DEFMT_LOG` environment variable.\n  - Requires `probe-rs/vscode` [PR #27](https://github.com/probe-rs/vscode/pull/27)\n  - Debugger: Improved RTT reliability between debug adapter and VSCode (#1035)\n  - Fixed missing `derive` feature for examples using `clap`.\n  - Increase SWD wait timeout (#994)\n  - Debugger: Fix `Source` breakpoints only worked for a single source file. (#1098)\n  - Debugger: Fix assumptions for ARM cores\n  - GDB: Fix assumptions for ARM cores\n- Fixed access to Arm CoreSight components being completed through the wrong AP (#1114)\n- Debug: Additions to complete RISC-V and 64-bit support. (#1129)\n  - probe_rs::debug::Registers uses new `core::RegisterId` and `core::RegisterValue` for consistent register handling.\n  - RISC-V `Disassembly` works correctly for 'compressed' (RV32C isa variants) instruction sets.\n  - RISC-V stack unwind improvements (stack frames and registers work, variables do not resolve correctly.)\n- Fixed a possible endless recursion in the J-Link code, when no chip is connected. (#1123)\n- Fixed an issue with ARMv7-a/v8-a where some register values might be corrupted. (#1131)\n- Fixed an issue where `probe-rs-cli`'s debug console didn't detect if the core is halted (#1131)\n- Fix GDB interface to require a Mutex to enable multi-threaded usage (#1144)\n- Debug: RISC-V improvements (#1147).\n  - Fix: Variable values now resolve correctly. This fix also fixes variables when using the rustc flag `-Cforce-frame-pointers=off` on ARM.\n  - Fix: Allow unwinding past frames with no debug information (See Issue [#896](https://github.com/probe-rs/probe-rs/issues/896))\n  - Fix: Using `restart` request from VSCode now works for both states of `halt_after_rest`.\n  - Partial Fix: Set breakpoints and step on RISC-V. Breakpoints work but stepping only works for some breakpoints. This will be addressed in a future PR.\n- Fix nrf9160 target file so it can erase UICR section (#1151)\n- Fix connect under reset for CMSIS-DAP probes(#1159)\n- Fix double default algorithms for the stm32f7x line with 1MB flash (#1171)\n- Fixed detecting CMSIS-DAP probes that only say \"CMSIS-DAP\" in interface strings, not the product string (#1142/#1135/#995)\n\n## [0.12.0]\n\n- Added support for `chip-erase` flag under the `probe-rs-cli download` command. (#898)\n- Added support for `disable-progressbars` flag under the `probe-rs-cli download` command. (#898)\n- Fixed bug in `FlashLoader` not emitting `ProgressEvent::FinishedErasing` when using `do_chip_erase`. (#898)\n\n### Added\n\n- Added initial multicore support. (#565)\n- probe-rs-cli-util: added common option structures and logic pertaining to probes and target attachment from cargo-flash. (#723)\n- probe-rs-cli-util: escape hatch via `--` for extra cargo options not declared by `common_options::CargoOptions`.\n- Added SWDv2 multidrop support for multi-DP chips. (#720)\n- Added The possibility to use `--connect-under-reset` for the `probe-rs-cli info` command. (#775)\n- Added support for flashing `bin` format binaries with the `probe-rs-cli download` command. (#774)\n- Improved number parsing on all the `probe-rs-cli` commands. They now all accept normal (`01234`), hex (`0x1234`), octal (`0o1234`) and binary (`0b1`) formats. (#774)\n- Added progress bars to the probe-rs-cli download command. (#776)\n- Improve reliability of communication with the RISC-V debug module by recovering from busy errors in batch operations. (#802)\n- Added optional ability to load fixed address flashing algorithms (non PIC). (#822)\n- Added target definition validation to make handling inside probe-rs easier by making some basic assumptions about the validity of the used `ChipFamily` without always checking again. (#848)\n- Added support for the built in JTAG on the ESP32C3 and other ESP32 devices (#863).\n- Added name field to memory regions. (#864)\n- debugger: Show progress notification while device is being flashed. (#871, #884)\n- Add optional ability to load fixed address flashing algorithms (non PIC). (#822)\n- Added `probe-rs-cli run` command, to flash and run a binary showing RTT output.\n- Added a new USB VID for ST-Link V3 without Mass Storage. (#1070)\n\n### Removed\n\n- probe-rs-cli-util: unused module `argument_handling`. (#760)\n\n### Changed\n\n- Enabled the generation of global timestamps and exception traces for ARM targets on `Session::setup_swv`.\n- Changed to `hidraw` for HID access on Linux. This should allow access to HID-based probes without udev rules (#737).\n- Support batching of FTDI commands and use it for RISC-V (#717)\n- Include the chip string for `NoRamDefined` in its error message\n- Improved handling of errors in CMSIS-DAP commands (#745).\n- Implemented RTT (String, BinaryLE, and Defmt) in `probe-rs-debugger` (#688).\n- `probe-rs-debugger` will use the VSCode Client `launch.json` configuration to set RUST_LOG levels and send output to the VSCode Debug Console (#688).\n- Bumped dependencies `bitvec 0.19.4`to `bitvec 0.22`, `nom 6.0.0` to `nom 7.0.0-alpha1`. (#756)\n- `DebugProbeError::CommandNotSupportedByProbe` now holds a name string of the unsupported command.\n- Target YAMLs: Renamed `core.type` values from `M0, M4, etc` to `armv6m`, `armv7m`, `armv8m`.\n- Breaking API: Modify `probe-rs-rtt` interfaces to use `probe_rs::Core` rather than `Arc<Mutex<probe_rs::Session>>`.\n- An opaque object is returned to represent a compiled artifact. This allows extra information to be provided\n  in future without a breaking change (#795).\n- Information on whether a rebuild was necessary is included in the artefact (nothing changed if\n  `fresh == true`) (#795).\n- `Debug` was reimplemented on `Session` (#795).\n- Target YAMLs: Changed `flash_algorithms` from a map to an array. (#813)\n- Reject ambiguous chip selection.\n- Prefer using `read` over `read_8` for better performance and compatibility. (#829)\n- Increased default RTT Timeout (retry waiting for RTT Control Block initialization) to 1000ms in `probe-rs-debugger`. (#847)\n- Improved when RTT is initialized/retried, and removed `rtt_timeout` from recognized options of `probe-rs-debugger`. (#850)\n- Refactor `probe-rs-debugger` code as per `launch` vs. `attach` changes documented in [VS Code extension PR # 12](https://github.com/probe-rs/vscode/pull/12) (#854)\n- Breaking change: `probe-rs-debugger` and the associated [VSCode extension PR #21](https://github.com/probe-rs/vscode/pull/21) now uses camelCase for all `launch.json` properties (#885)\n- Publicly export `core::RegisterFile` type.\n- The trait surface for DAP/AP/DP access was cleaned up and more clarity around the access level of the API was added by properly putting `Raw` or not in the name.\n- `target-gen` now deduplicates flash algorithms when generating target files. (#1010)\n\n### Fixed\n\n- Detect proper USB HID interface to use for CMSIS-DAP v1 probes. Without this, CMSIS-DAP probes with multiple HID interfaces, e.g. MCUlink, were not working properly on MacOS (#722).\n- When reading from a HID device, check number of bytes returned to detect USB HID timeouts.\n- Fix connecting to EDBG and similar probes on MacOS (#681, #721)\n- Fixed incorrect flash range in `fe310` causing flashing to fail (#732).\n- Multiple default algorithims would silently select the first, now errors intead (#744).\n- Fixed STM32WL targets getting a HardFault when flashing binaries larger than 64K (#762).\n- Use a more reliable JTAG IR length detection when there's only a single target in the chain. Fixes an issue with the esp32c3. (#796, #823).\n- Replaced `unreachable!` induced panic with logic to fix `probe-rs-debugger` failures. (#847)\n- Fixed logic errors and timing of RTT initialization in `probe-rs-debugger`. (#847)\n- Debugger: Do not crash the CLI when pressing enter without a command. (#875)\n- Fixed panic in CLI debugger when using a command without arguments. (#873)\n- Debugger: Reduce panics caused by `unwrap()` usage. (#886)\n- probe-rs: When unwinding, detect if the program counter does not change anymore and stop. (#893)\n\n### Target Support\n\n- Added LPC5516 targets. (#853)\n- Added LPC552x and LPC55S2x targets. (#742)\n- Added SAM3U targets. (#833)\n- Added RP2040 target (Raspberry Pi Pico). (#720)\n- Added STM32WL55JCIx target. (#835)\n- Add esp32.yaml with esp32c3 variant. (#846)\n- Added STM32U5 series target.\n- Added all RAM regions to most STM32H7 parts. (#864)\n\n## [0.11.0]\n\n### Added\n\n- Support for the `HNONSEC` bit in memory access. This now allows secure access on chips which support TrustZone (#465).\n- Support for RISC-V chips which use the System Bus Access method for memory access when debugging (#527).\n- Support for double buffering in the flash loader, which increased flashing speed (#107).\n- Determine location of debug components by parsing ROM table (#431).\n- Support for \"flashing\" data to RAM in the flash loader (#480).\n- Added FTDI C232HM-DDHSL-0 to comaptible USB list for FTDI backend (#485).\n- Added `--list-probes` and `-n`option to built-in GDB server binary (#486).\n- Added RISC-V support to GDB server (#493).\n- Added `Session::target()` to access the target of a session (#497).\n- Support for target description in the GDB server (#498).\n- Support for register write commands in the GDB server (#510).\n- Added `get_target_voltage()` function to `DebugProbe`, which can be used to read the target voltage if the probe supports it (#533).\n- Added `do_chip_erase` flag to `DownloadOptions`, to allow using chip erase when flashing (#537).\n- RISC-V: Support for memory access using system bus (#527).\n- Added a generic `read` function, which can be used for memory access with maximum speed, regardless of access width (#633).\n- Added an option to skip erasing the flash before programming (#628).\n- Added a new debugger for VS Code, using the [Debug Adapter Protocol](https://microsoft.github.io/debug-adapter-protocol/specification). The debugger can be found in the `probe-rs-debugger` crate (#620).\n- Additional datatype support for the debugger, plus easier to read display values (#631)\n- Added support for raw DAP register reads and writes, using `RawDpAccess`, `RawApAccess` trait (#669, #689, #700).\n- Added support for verify after flashing. (#671).\n- Handle inlined functions when getting a stack trace (#678).\n- Added 'Statics' (static variables) to the stackframe scopes. These are now visible in VSCode between 'Locals' and 'Registers'. This includes some additional datatypes and DWARF expression evaluation capabilities. (#683)\n- Added a function to mass erase all memory. (#672).\n- Handle Cortex `LOCKUP` status during debugging (#707)\n\n### Target Support\n\n- Added EEPROM region flashing support for STM32L071KBTx (#589).\n- Added support for Microchip/Atmel SAM4 (#590).\n- Added support for Microchip SAME5x and SAME70 (#596).\n- Added support for Microchip SAMD10 (#597).\n- Added support for Microchip SAMD11 (#444).\n- Fixed support for STM32WB55 (#466).\n- Updated target description for LPC55S69 to newest version (#481).\n- Use pyocd flash algorithm for NRF52 (#492).\n- Added support for flashing NRF52 UICR (#500).\n- Updated target description for SAMD21 (#542).\n- Support flashes bigger than 128 kBytes on STM32l4xx (#547).\n- Added support for LPC546xx (#560).\n- Added support for SiLabs EFR32 targets (#566, #567).\n- Added support for flashing Intel hex files using `probe-rs-cli` (#618).\n- Updated target description for NRF91 (#619).\n- Added a RAM benchmark script (#514).\n- Initial support for batched commands for J-Link (#515).\n- Added support for the STM32F2 family (#675).\n- Added support for FE310-G002 (HiFive1 Rev. B).\n- Added flash algorithm for GD32VF1 family (#830).\n\n### Changed\n\n- Renamed `MemoryRegion::Flash` to `MemoryRegion::Nvm` (#482).\n- Renamed `FlashInfo` to `NvmInfo`\n- Renamed `FlashRegion` to `NvmRegion` and its `flash_info()` method to `nvm_info()`\n- Renamed `FlashError::NoSuitableFlash` to `FlashError::NoSuitableNvm`\n- The `into_arm_interface` and `into_RISC-V_interface` functions are replaced by the `try_into_arm_interface` and\n  `try_into_RISC-V_interface` functions, which return the `Probe` struct in the case of an error. This improves the\n  auto detection process (#524).\n- Improved SWD protocol handling for J-Link (#443, #539, #619).\n- Improved error handling for batched CMSIS-DAP commands (#445).\n- Use sticky overrun behaviour for improved J-Link performance (#450).\n- Better error handling for flashing (#451).\n- gdb-server: Halt the chip when attaching (#461).\n- Better error messages in the ram_download example (#464).\n- Cache value of CSW register to reduce number of SWD transfers (#471).\n- Use `erased_byte_value` from target description as default value in the flash loader (#475).\n- Added retry functionality for CMSIS-DAP probes (#462).\n- RISC-V: Use abstract commands for CSR access for improved speed (#487).\n- The `download_file` and `download_file_with_options` functions now accept `AsRef<Path>` instead of `&Path`to be more convenient to use (#545, #579).\n- Use `itm-decode` to decode ITM packets instead of built-in decoder (#564).\n- Flash API Improvements: Data is now owned by the `FlashLoader`and `FlashBuilder` structs to simply the API, and the `FlashLoader::commit()` accepts the `DownloadOptions` struct instead of bool flags (#605).\n- Improve internal tracking of core status (#629).\n- Rework SWD sequence in J-Link (#513).\n- Print ST-Link version in name (#516).\n- Improve argument parsing in debugger, add speed option to probe-rs-cli (#523).\n- `probe_rs::flashing::DownloadOptions` is now marked `non_exhaustive`, to make it easier to add additional flags in the future.\n- Replace `lazy_static` with `once_cell::sync::Lazy` (#685).\n- Use new `SendError` instead of `anyhow::Error` in `cmsisdap` module (#687).\n\n### Fixed\n\n- Fixed `M33` breakpoints (#543).\n- Fixed a bug where ST-Link v3 is not able to read 8 bit data chunks with more than 255 bytes. Currently we set the chunking to 128 bytes. This might be a bug in the ST-Link v3 firmware and might change in the future (#553, #609).\n- Errors occuring while trying to open J-Link probes do not prevent other probes from working anymore (#401).\n- CMSIS-DAPv1 probes with a HID report size different than 64 bytes are now supported (fixes #282).\n- CMSIS-DAPv2 devices are now drained when attaching (fixes #424).\n- Improved SWO speed on CMSIS-DAPv2 (fix #448).\n- Session auto attach does no longer panic when no probes are connected (#442).\n- probe-rs-cli: Halt core before printing backtrace (#447).\n- gdb-server: Ensure registers are only read when core is halted (#455).\n- Fixed loading Hex files using the flash loader (#472).\n- Fixed off-by-one errors when flashing chip with contiguous memory ranges (#574).\n- Ensure only ELF segments with type `PT_LOAD` are flashed (#582).\n- Fixed overflow in hex file loading, and ensure addresses are calculated correctly (#604).\n- RISC-V: Fixed scanning for harts (#610).\n- RISC-V: Fixed abstract command handling (#611).\n- Fixed a bus congestion issue where the chip is polled too often, leading to problems while flashing (#613).\n- The breakpoint address is now verified to ensure a breakpoint at the given address is actually possible (#626).\n- RISC-V: Use correct address for access to `abstractauto`register (#511).\n- The `--chip` argument now works without specifying the `--elf` argument (fix #517).\n- Fixed: Invalid \"Unable to set hardware breakpoint\", by removing breakpoint caching, instead querying core directly (#632)\n- Fix crash on unknown AP class. (#662).\n- Fix too many chip erases in chips with multiple NvmRegions. (#670).\n- Added missing `skip_erase` setter function introduced in #677 (#679).\n- Fixed incorrect array size calculation (#683)\n- STLink: Removed unnecessary SELECT bank switching (#692)\n- STLink: chunk writes in `write_8` to avoid hitting limit (#697)\n- Partial fix for a bug where `probe-rs-debugger` does not set breakpoints when the target is in _sleep_ mode (#703)\n\n## [0.10.1]\n\n### Fixed\n\n- Replace calls to `unwrap()` in adi_v5_memory_interface.rs with proper error types (#440).\n- Correct URL for Sentry logging in probe-rs-cli-util (#439).\n\n## [0.10.0]\n\n### Added\n\n- Added support for the dedicated ST-Link API which doubles flash write speeds for ST-Link v2 (#369, #377, #397, #435).\n- Added support for the STM32WLE.\n- Added support for the ATSAMD21 & ATSAMD51.\n- Added support for the STM32L1.\n- Added support for the EFM32PG12.\n- Added support for the MAX32665 & MAX32666.\n- Building probe-rs now works without rustfmt being present too (#423).\n- Added support for implicit ebreak in RISC-V chips (#423, #430).\n\n### Changed\n\n- nRF devices now use the `SoftDevice Erase` algorithm for flashing which will also erase the flash if it contains the softdevice. The previous algorithm prevented users from flashing at all if a softdevice was present (#365, #366).\n- The names of probe interface methods were named more consistently (#375).\n- FTDI support is now opt in. Please use the `ftdi` feature for support (#378).\n\n### Fixed\n\n- ST-Links now retry the command if a wait was returned in during the SWD transmission (#370).\n- Fixed a bug where CMSIS-DAP would not be able to open a probe with a specific VID/PID but no SN specified (#387).\n- Fixed a bug where a CMSIS-DAP probe could not be opened if an USB descriptor did not contain any language. This was dominant on macOS (#389).\n- Fixed support for the nRF91 (#403).\n- Fixed a bug on Windows where paths were not canonicalized properly (#416).\n- Fixed a bug where a target fault during AP scans would not be cleared and result in failure on some cores even tho there was no actual issue other than the scan being aborted due to an AP not being present (which is perfectly okay) (#419).\n- Use the correct bit mask for the breakpoint comperator on Cortex-M0(+) devices (#434).\n- Fixed a bug where breakpoints on M0 would always match the full word even if half word would have been correct (#368).\n\n### Known issues\n\n- Flashing on some chips (known are SAMDx and rare STM32s) with the JLink or CMSIS-DAP probes can be slow. If you see an error involving th DRW or CSW registers, please try using a speed of 100kHz and file a report in #433.\n\n## [0.9.0]\n\n### Added\n\n- Added initial support for FTDI based probes.\n- Added support for the STM32L5 family.\n- Added support for the STM32G4 family.\n- Added support for ITM tracing over SWO in general and drivers for all probes.\n- The status LED on CMSIS-DAP probes is now used by probe-rs.\n\n### Changed\n\n- Renamed `ProgressEvent::StartFlashing` to `ProgressEvent::StartProgramming` and `ProgressEvent::PageFlashed` to `ProgressEvent::PageProgrammed` to make naming of events more consistent.\n\n### Fixed\n\n- Fixed a bug where a J-Link would only be opened if the VID, PID AND Serial No. would match. As the Serial is optional, only VID/PID have to match now.\n- Fixed a bug with the readout of the serial string that could fail for DAP devices and lead to weird behavior.\n- Fixed a bug where the serial number was not printed correctly for some ST-Links.\n\n## [0.8.0]\n\n### Added\n\n- Added support for new devices in the nRF52 family - nRF52805, nRF52820 and nRF52833.\n- Added support for the STM32F7 family.\n- The `Session` struct and dependants now implement `Debug`.\n- The J-Link driver now logs a warning if no proper target voltage is measured.\n- The J-Link driver now logs some more information about the connected probe on the `INFO` and `DEBUG` levels.\n\n### Changed\n\n- Improved error handling by a great deal. Errors now can be unwound properly and thus displayed nicely in UI tooling.\n- `Core::halt()` now requires a timeout to be specified. This ensures that procedures such as flashing wont time out when certain tasks (like erasing a sector) take longer.\n\n### Fixed\n\n- Fixed a bug where a probe-selector would not work for the JLink if only VID & PID were specified but no serial number.\n- Fixed a bug where chip descriptions would fail to parse because of a changed behavior in a newer version of serde_yaml.\n- Fixed the LPC55S66 and LPS55S69 targets.\n- CMSIS-DAPv1 read operations now properly time out instead of blocking forever, thus giving the user proper feedback.\n- Even if an ST-Link cannot be opened (for example on Windows due to a missing driver) it will now be listed properly, just without a serial number.\n- Fixed a bug where the J-Link would not be selected properly if no serial number was provided in the selector even if there was a VID:PID pair that matched.\n\n## [0.7.1]\n\n### Changed\n\n- `DebugProbeType` is now public.\n- Update LPC55S66/LPC55S69 targets.\n\n### Fixed\n\n- Add missing core value for LPC55S66 and LPC55S69.\n\n## [0.7.0]\n\n### Added\n\n- Added support for RISC-V flashloaders! An example how to write one can be found here: https://github.com/Tiwalun/hifive-flashloader.\n- Added support for LLDB (works better than GDB in most cases; try it!).\n- Added support for specifying a probe via VID, PID and serial number.\n\n### Changed\n\n- The probe-rs API was changed that no internal `Rc<RefCell<T>>`s are present anymore to enable multithreading and make the API cleaner (see https://github.com/probe-rs/probe-rs/pull/240 for the changes).\n- Cleaned up the gernal GDB server code.\n- Make some parts of the API public such that custom APs can be implemented and used for ARM targets (see https://github.com/probe-rs/probe-rs/pull/249, https://github.com/probe-rs/probe-rs/pull/253)\n- Removed a great deal of (non-panicking) unwraps inside the code.\n- Improved erroring by a great deal. Removed error stacking and started using anyhow for upper-level errors. This allows for nicer error printing!\n\n### Fixed\n\n- Fixed a bug where an empty DAP-Link batch would just crash without a proper error message.\n- Fixed a check where the serial number of the stlink which would be supported at a minimum was too low (off by one).\n- Fixed the broken vCont & memory-map commands in the GDB stub.\n- Fixed deserialization of flash algorithm descriptions which enables to load target descriptions during runtime.\n- Fixed an issue where the error message would say that more than one probe was found when no probe was detected at all.\n- Fixed a bug in the gdb-server that causes it to never halt after a continue.\n- Fixed an issue where the gdb-server would always use 100 % cpu time of the core it's running on.\n\n## [0.6.2]\n\n### Added\n\n- `WireProtocol` now implements `Serialize`.\n\n### Fixed\n\n- The GDB stub will no longer crash when GDB tries to access invalid memory.\n\n### Known issues\n\n- Some ST M3s such as the STM32F103 are known to have reset issues. See [#216](https://github.com/probe-rs/probe-rs/pull/216).\n\n## [0.6.1]\n\n### Added\n\n- Support for the STM32F3 family was added.\n- Added support for most Holtek ARM chips.\n- Added support for the STM32H7 and M7 cores.\n\n### Changed\n\n- DAPlink implementation now batches `read_register` and `write_register`\n  commands, executing the entire batch when either the batch is full or a\n  `read_register` is requested, returning the read result or an error which\n  may indicate an error with a batched command. As a consequence,\n  `write_register` calls may return `Ok(())` even if they have not been\n  submitted to the probe yet, but any read will immediately execute the batch.\n  Operations such as device flashing see around 350% speedup.\n- Improved error handling for STLinks that have an older firmware which doesn't support multiple APs.\n- The flash layout reporting struct is less verbose now.\n\n### Fixed\n\n- Fix a bug in the CLI where it would always be unable to attach to the probe.\n\n### Known issues\n\n- Some ST M3s such as the STM32F103 are known to have reset issues. See [#216](https://github.com/probe-rs/probe-rs/pull/216).\n\n## [0.6.0]\n\n### Added\n\n- Flashing support for the STM32L4 series.\n- Added the possibility to set the speed on DebugProbes and also implemented it for all three supported probes (CMSIS-DAP, ST-Link and J-Link).\n- Make M3 cores selectable from built in targets.\n- Make the filling of erased flash sectors with old contents possible. When flashing, the minimal erase unit is a sector. If the written contents do not span a sector, we would erase portions of the flash which are not written afterwards. Sometimes that is undesired and one wants to only replace relevant parts of the flash. Now the user can select whether they want to restore unwritten but erased parts to the previous contents. The flash builder now automatically reads to be erased and not written contents beforehand and adds them to the to be written contents.\n- Added a flash visualizer which can generate an SVG of the layouted flash contents.\n\n### Changed\n\n- Improved error handling for the flash download module.\n- Improved error messages for ARM register operations.\n- The `flash` module has been renamed to `flashing`.\n- Downloading a file now has the possibility to add options instead of multiple parameters to clean up the interface.\n- `read8`/`write8` implement true 8-bit accesses if they are supported by target.\n- Improved build times by changing code generation for targets. For more details, see [PR #191](https://github.com/probe-rs/probe-rs/pull/191).\n- Improved logging for ELF loading. If there was no loadable sections before, nothing would happen. Now it is properly reported, that there was no loadable sections.\n\n### Fixed\n\n- Fix the usage of ST-Link V3.\n- Removed an unwrap that could actually crash.\n- Fixed a bug where reading a chip definition from a YAML file would always fail because parsing a `ChipFamily` from YAML was broken.\n- Fixed a bug in the ST-Link support, where some writes were not completed. This lead to problems when flashing a device, as the\n  final reset request was not properly executed.\n- Refactored 8-bit memory access in ADIMemoryInterface, fixing some edge case crashes in the process. Also rewrote all tests to be more thorough.\n- Fixed 8/16-bit memory access processing in `MockMemoryAP`.\n- Protocol selection for JLink now will properly honor the actual capabilities of the JLink instead of crashing if the capability was missing.\n- Fix an issue where probes would double attach to a target, potentially leading to issues.\n\n## [0.5.1]\n\n### Fixed\n\n- Fix a bug where M3 targets would not be able to load the core.\n\n## [0.5.0]\n\n### Added\n\n- Flashing support for the STM32G0 series.\n- Flashing support for the STM32F0 series.\n- Flashing support for the STM32WB55 series.\n- Support for RISC-V debugging using a Jlink debug probe.\n- Support for SWD debugging using a Jlink debug probe.\n\n### Changed\n\n- The entire API was overhauled. The Probe, Session and Core structs have different interaction and APIs now.\n  Please have a look at the docs and examples to get an idea of the new interface.\n  The new API supports multiple architectures and makes the initialization process until the point where you can talk to a core easier.\n  The core methods don't need a passed probe anymore. Instead it stores an Rc to the Session object internally. The Probe object is taken by the Session which then can attach to multiple cores.\n  The modules have been cleaned up. Some heavily nested hierarchy has been flattened.\n- More consistent and clean naming and reporting of errors in the stlink and daplink modules. Also the errorhandling for the probe has been improved.\n\n### Fixed\n\n- Various fixes\n\n### Known issues\n\n- Some chips do not reset automatically after flashing\n- The STM32L0 cores have issues with flashing.\n\n## [0.4.0]\n\n### Added\n\n- A basic GDB server was added \\o/ You can either use the provided `gdb-server` binary or use `cargo flash --gdb` to first flash the target and then open a GDB session. There is many more new options which you can list with `cargo flash --help`.\n- Support for multiple breakpoints was added. Breakpoints can now conveniently be set and unset. probe-rs checks for you that there is a free breakpoint and complains if not.\n- A flag to disable progressbars was added. Error reporting was broken because of progressbar overdraw. Now one can disable progress bars to see errors. In the long run this has to be fixed.\n- Added an improved way to create a `Probe`.\n- Added an older USB PID to have probe-rs detect older STLinks with updated Firmware.\n- Added support for flashing with different sector properties. This fixed broken flashing on the STM M4s.\n\n### Changed\n\n- Code generation for built in targets was split off into a separate crate so probe-rs can be built without built in targets if one doesn't want them.\n\n### Fixed\n\n- Fixed setting and clearing breakpoints on M4 cores.\n\n## [0.3.0]\n\nImproved flashing for `cargo-flash` considering speed and useability.\n\n### Added\n\n- Increased the raw flashing speed by factor 10 and the actual flashing speed for small programs by factor 5. This is done using batched CMSIS-DAP transfers.\n- Added CMSIS-Pack powered flashing. This feature essentially enables to flash any ARM core which can also be flashed by ARM Keil.\n- Added progress bars for flash progress indication.\n- Added `nrf-recover` feature that unlocks nRF52 chips through Nordic's custom `AP`\n\n### Changed\n\n- Improved target autodetection with better error distinction.\n- Improved messaging overall.\n\n### Fixed\n\n- Various bugfixes\n- Binaries bigger than a sector can now be flashed.\n\n## [0.2.0]\n\nInitial release on crates.io\n\n- Added parsing of yaml (or anything else) config files for flash algorithm definitions, such that arbitrary chips can be added.\n- Modularized code to allow other cores than M0 and be able to dynamically load chip definitions.\n- Added target autodetection.\n- Added M4 targets.\n- Working basic flash downloader with nRF51.\n- Introduce cargo-flash which can automatically build & flash the target elf file.\n\n[unreleased]: https://github.com/probe-rs/probe-rs/compare/v0.25.0...master\n[0.25.0]: https://github.com/probe-rs/probe-rs/compare/v0.24.0...v0.25.0\n[0.24.0]: https://github.com/probe-rs/probe-rs/compare/v0.23.0...v0.24.0\n[0.23.0]: https://github.com/probe-rs/probe-rs/compare/v0.22.0...v0.23.0\n[0.22.0]: https://github.com/probe-rs/probe-rs/compare/v0.21.1...v0.22.0\n[0.21.1]: https://github.com/probe-rs/probe-rs/compare/v0.21.0...v0.21.1\n[0.21.0]: https://github.com/probe-rs/probe-rs/compare/v0.20.0...v0.21.0\n[0.20.0]: https://github.com/probe-rs/probe-rs/compare/v0.19.0...v0.20.0\n[0.19.0]: https://github.com/probe-rs/probe-rs/compare/v0.18.0...v0.19.0\n[0.18.0]: https://github.com/probe-rs/probe-rs/compare/v0.17.0...v0.18.0\n[0.17.0]: https://github.com/probe-rs/probe-rs/compare/v0.16.0...v0.17.0\n[0.16.0]: https://github.com/probe-rs/probe-rs/compare/v0.15.0...v0.16.0\n[0.15.0]: https://github.com/probe-rs/probe-rs/compare/v0.14.2...v0.15.0\n[0.14.2]: https://github.com/probe-rs/probe-rs/compare/v0.14.1...v0.14.2\n[0.14.1]: https://github.com/probe-rs/probe-rs/compare/v0.14.0...v0.14.1\n[0.14.0]: https://github.com/probe-rs/probe-rs/compare/v0.13.0...v0.14.0\n[0.13.0]: https://github.com/probe-rs/probe-rs/compare/v0.12.0...v0.13.0\n[0.12.0]: https://github.com/probe-rs/probe-rs/compare/v0.11.0...v0.12.0\n[0.11.0]: https://github.com/probe-rs/probe-rs/compare/v0.10.1...v0.11.0\n[0.10.1]: https://github.com/probe-rs/probe-rs/compare/v0.10.0...v0.10.1\n[0.10.0]: https://github.com/probe-rs/probe-rs/compare/v0.9.0...v0.10.0\n[0.9.0]: https://github.com/probe-rs/probe-rs/compare/v0.8.0...v0.9.0\n[0.8.0]: https://github.com/probe-rs/probe-rs/compare/v0.7.1...v0.8.0\n[0.7.1]: https://github.com/probe-rs/probe-rs/compare/v0.7.0...v0.7.1\n[0.7.0]: https://github.com/probe-rs/probe-rs/compare/v0.6.2...v0.7.0\n[0.6.2]: https://github.com/probe-rs/probe-rs/compare/v0.6.1...v0.6.2\n[0.6.1]: https://github.com/probe-rs/probe-rs/compare/v0.6.0...v0.6.1\n[0.6.0]: https://github.com/probe-rs/probe-rs/compare/v0.5.1...v0.6.0\n[0.5.1]: https://github.com/probe-rs/probe-rs/compare/v0.5.0...v0.5.1\n[0.5.0]: https://github.com/probe-rs/probe-rs/compare/v0.4.0...v0.5.0\n[0.4.0]: https://github.com/probe-rs/probe-rs/compare/v0.3.0...v0.4.0\n[0.3.0]: https://github.com/probe-rs/probe-rs/compare/v0.2.0...v0.3.0\n[0.2.0]: https://github.com/probe-rs/probe-rs/releases/tag/v0.2.0\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 2.001953125,
          "content": "# Contribution Guidelines\n\n- Add tests and docs for any new functionality\n- Format the code with [rustfmt](https://github.com/rust-lang/rustfmt)\n  (Install with `rustup component add rustfmt`, run with `cargo fmt`) or use equivalent manual formatting.\n- Use meaningful commit messages. You can follow the advice\n  in [this blogpost](http://tbaggery.com/2008/04/19/a-note-about-git-commit-messages.html).\n\nThanks for your contributions :)\n\n\n## Changelog entries\n\nTo avoid conflicts in the changelog file, the changelog is assembled out of fragments at release time. To describe the changes in a PR, add a new file in `changelog/`.\nThe filename should start with one of the following categories:\n\n- added\n- changed\n- fixed\n- removed\n\nFor example, `added-ultra-fast-flashing.md` would lead to an entry in the `## Added` section of the changelog. The content of the file should be a single line or paragraph describing your changes.\n\n## How to build cargo-embed/ cargo-flash from source\n\n`cargo-embed` is a so called [cargo subcommand](https://doc.rust-lang.org/book/ch14-05-extending-cargo.html). It is a program named `cargo-embed` which is installed in the users path. Thus when applying some small fixes to `cargo-embed` you can run `cargo build` and then use the executable in the target folder named cargo-embed directly. You can also use [cargo install --path probe-rs-tools](https://doc.rust-lang.org/cargo/commands/cargo-install.html) to install your current checkout locally overriding what you previously had installed using `cargo install cargo-embed`.\n\nThe steps are the same for cargo-embed or cargo-flash. Both use probe-rs inside and wrap it with a user friendly command line interface.\n\nIf you want to use a different version of probe-rs you can use [cargo patch](https://doc.rust-lang.org/edition-guide/rust-2018/cargo-and-crates-io/replacing-dependencies-with-patch.html) in your local clone of cargo-embed/ cargo-flash and set it to a specific version from Github or a local checkout of probe-rs. This is helpful for testing patches.\n"
        },
        {
          "name": "Cargo.lock",
          "type": "blob",
          "size": 114.8193359375,
          "content": "# This file is automatically @generated by Cargo.\n# It is not intended for manual editing.\nversion = 4\n\n[[package]]\nname = \"Inflector\"\nversion = \"0.11.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"fe438c63458706e03479442743baae6c88256498e6431708f6dfc520a26515d3\"\ndependencies = [\n \"lazy_static\",\n \"regex\",\n]\n\n[[package]]\nname = \"addr2line\"\nversion = \"0.24.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"dfbe277e56a376000877090da837660b4427aad530e3028d44e0bffe4f89a1c1\"\ndependencies = [\n \"cpp_demangle\",\n \"fallible-iterator\",\n \"gimli 0.31.1\",\n \"memmap2\",\n \"object 0.36.7\",\n \"rustc-demangle\",\n \"smallvec\",\n \"typed-arena\",\n]\n\n[[package]]\nname = \"adler2\"\nversion = \"2.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"512761e0bb2578dd7380c6baaa0f4ce03e84f95e960231d1dec8bf4d7d6e2627\"\n\n[[package]]\nname = \"aho-corasick\"\nversion = \"1.1.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8e60d3430d3a69478ad0993f19238d2df97c507009a52b3c10addcd7f6bcb916\"\ndependencies = [\n \"memchr\",\n]\n\n[[package]]\nname = \"allocator-api2\"\nversion = \"0.2.20\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"45862d1c77f2228b9e10bc609d5bc203d86ebc9b87ad8d5d5167a6c9abf739d9\"\n\n[[package]]\nname = \"alterable_logger\"\nversion = \"1.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"914a2c81a0e8d57d88d11554612d5e0afe5f942cecbcc239b10a394fd7ce404b\"\ndependencies = [\n \"arc-swap\",\n \"log\",\n \"once_cell\",\n]\n\n[[package]]\nname = \"ansi-parser\"\nversion = \"0.9.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"c43e7fd8284f025d0bd143c2855618ecdf697db55bde39211e5c9faec7669173\"\ndependencies = [\n \"heapless\",\n \"nom\",\n]\n\n[[package]]\nname = \"anstream\"\nversion = \"0.6.18\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8acc5369981196006228e28809f761875c0327210a891e941f4c683b3a99529b\"\ndependencies = [\n \"anstyle\",\n \"anstyle-parse\",\n \"anstyle-query\",\n \"anstyle-wincon\",\n \"colorchoice\",\n \"is_terminal_polyfill\",\n \"utf8parse\",\n]\n\n[[package]]\nname = \"anstyle\"\nversion = \"1.0.10\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"55cc3b69f167a1ef2e161439aa98aed94e6028e5f9a59be9a6ffb47aef1651f9\"\n\n[[package]]\nname = \"anstyle-parse\"\nversion = \"0.2.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3b2d16507662817a6a20a9ea92df6652ee4f94f914589377d69f3b21bc5798a9\"\ndependencies = [\n \"utf8parse\",\n]\n\n[[package]]\nname = \"anstyle-query\"\nversion = \"1.1.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"79947af37f4177cfead1110013d678905c37501914fba0efea834c3fe9a8d60c\"\ndependencies = [\n \"windows-sys 0.59.0\",\n]\n\n[[package]]\nname = \"anstyle-wincon\"\nversion = \"3.0.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"2109dbce0e72be3ec00bed26e6a7479ca384ad226efdd66db8fa2e3a38c83125\"\ndependencies = [\n \"anstyle\",\n \"windows-sys 0.59.0\",\n]\n\n[[package]]\nname = \"anyhow\"\nversion = \"1.0.95\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"34ac096ce696dc2fcabef30516bb13c0a68a11d30131d3df6f04711467681b04\"\n\n[[package]]\nname = \"arbitrary\"\nversion = \"1.4.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"dde20b3d026af13f561bdd0f15edf01fc734f0dafcedbaf42bba506a9517f223\"\ndependencies = [\n \"derive_arbitrary\",\n]\n\n[[package]]\nname = \"arc-swap\"\nversion = \"1.7.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"69f7f8c3906b62b754cd5326047894316021dcfe5a194c8ea52bdd94934a3457\"\n\n[[package]]\nname = \"arrayvec\"\nversion = \"0.5.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"23b62fc65de8e4e7f52534fb52b0f3ed04746ae267519eef2a83941e8085068b\"\n\n[[package]]\nname = \"async-io\"\nversion = \"2.4.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"43a2b323ccce0a1d90b449fd71f2a06ca7faa7c54c2751f06c9bd851fc061059\"\ndependencies = [\n \"async-lock\",\n \"cfg-if\",\n \"concurrent-queue\",\n \"futures-io\",\n \"futures-lite\",\n \"parking\",\n \"polling\",\n \"rustix\",\n \"slab\",\n \"tracing\",\n \"windows-sys 0.59.0\",\n]\n\n[[package]]\nname = \"async-lock\"\nversion = \"3.4.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ff6e472cdea888a4bd64f342f09b3f50e1886d32afe8df3d663c01140b811b18\"\ndependencies = [\n \"event-listener\",\n \"event-listener-strategy\",\n \"pin-project-lite\",\n]\n\n[[package]]\nname = \"atomic\"\nversion = \"0.6.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8d818003e740b63afc82337e3160717f4f63078720a810b7b903e70a5d1d2994\"\ndependencies = [\n \"bytemuck\",\n]\n\n[[package]]\nname = \"atomic-waker\"\nversion = \"1.1.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1505bd5d3d116872e7271a6d4e16d81d0c8570876c8de68093a09ac269d8aac0\"\n\n[[package]]\nname = \"autocfg\"\nversion = \"1.4.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ace50bade8e6234aa140d9a2f552bbee1db4d353f69b8217bc503490fc1a9f26\"\n\n[[package]]\nname = \"backtrace\"\nversion = \"0.3.74\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8d82cb332cdfaed17ae235a638438ac4d4839913cc2af585c3c6746e8f8bee1a\"\ndependencies = [\n \"addr2line\",\n \"cfg-if\",\n \"libc\",\n \"miniz_oxide\",\n \"object 0.36.7\",\n \"rustc-demangle\",\n \"windows-targets 0.52.6\",\n]\n\n[[package]]\nname = \"backtrace-ext\"\nversion = \"0.2.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"537beee3be4a18fb023b570f80e3ae28003db9167a751266b259926e25539d50\"\ndependencies = [\n \"backtrace\",\n]\n\n[[package]]\nname = \"base64\"\nversion = \"0.22.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"72b3254f16251a8381aa12e40e3c4d2f0199f8c6508fbecb9d91f575e0fbb8c6\"\n\n[[package]]\nname = \"bincode\"\nversion = \"1.3.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b1f45e9417d87227c7a56d22e471c6206462cba514c7590c09aff4cf6d1ddcad\"\ndependencies = [\n \"serde\",\n]\n\n[[package]]\nname = \"bitfield\"\nversion = \"0.17.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f798d2d157e547aa99aab0967df39edd0b70307312b6f8bd2848e6abe40896e0\"\n\n[[package]]\nname = \"bitflags\"\nversion = \"1.3.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"bef38d45163c2f1dde094a7dfd33ccf595c92905c8f8f4fdc18d06fb1037718a\"\n\n[[package]]\nname = \"bitflags\"\nversion = \"2.6.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b048fb63fd8b5923fc5aa7b340d8e156aec7ec02f0c78fa8a6ddc2613f6f71de\"\n\n[[package]]\nname = \"bitmatch\"\nversion = \"0.1.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"6a53e105d41966c9b4594b8e3b7cf8e81ae63cc83664880b049af8a11381a3ad\"\ndependencies = [\n \"boolean_expression\",\n \"proc-macro2\",\n \"quote\",\n \"syn 1.0.109\",\n]\n\n[[package]]\nname = \"bitvec\"\nversion = \"1.0.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1bc2832c24239b0141d5674bb9174f9d68a8b5b3f2753311927c172ca46f7e9c\"\ndependencies = [\n \"funty\",\n \"radium\",\n \"tap\",\n \"wyz\",\n]\n\n[[package]]\nname = \"block-buffer\"\nversion = \"0.10.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3078c7629b62d3f0439517fa394996acacc5cbc91c5a20d8c658e77abd503a71\"\ndependencies = [\n \"generic-array\",\n]\n\n[[package]]\nname = \"boolean_expression\"\nversion = \"0.3.11\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"7c33ef624481a2d2252fd352266c050e83203343d0884622f7ba09782abbfa83\"\ndependencies = [\n \"itertools 0.9.0\",\n \"smallvec\",\n]\n\n[[package]]\nname = \"bumpalo\"\nversion = \"3.16.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"79296716171880943b8470b5f8d03aa55eb2e645a4874bdbb28adb49162e012c\"\n\n[[package]]\nname = \"bytemuck\"\nversion = \"1.20.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8b37c88a63ffd85d15b406896cc343916d7cf57838a847b3a6f2ca5d39a5695a\"\ndependencies = [\n \"bytemuck_derive\",\n]\n\n[[package]]\nname = \"bytemuck_derive\"\nversion = \"1.8.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"bcfcc3cd946cb52f0bbfdbbcfa2f4e24f75ebb6c0e1002f7c25904fada18b9ec\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.89\",\n]\n\n[[package]]\nname = \"byteorder\"\nversion = \"1.5.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1fd0f2584146f6f2ef48085050886acf353beff7305ebd1ae69500e27c67f64b\"\n\n[[package]]\nname = \"bytes\"\nversion = \"1.8.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"9ac0150caa2ae65ca5bd83f25c7de183dea78d4d366469f148435e2acfbad0da\"\n\n[[package]]\nname = \"bytesize\"\nversion = \"1.3.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a3e368af43e418a04d52505cf3dbc23dda4e3407ae2fa99fd0e4f308ce546acc\"\n\n[[package]]\nname = \"camino\"\nversion = \"1.1.9\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8b96ec4966b5813e2c0507c1f86115c8c5abaadc3980879c3424042a02fd1ad3\"\ndependencies = [\n \"serde\",\n]\n\n[[package]]\nname = \"capstone\"\nversion = \"0.12.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b08ca438d9585a2b216b0c2e88ea51e096286c5f197f7be2526bb515ef775b6c\"\ndependencies = [\n \"capstone-sys\",\n \"libc\",\n]\n\n[[package]]\nname = \"capstone-sys\"\nversion = \"0.16.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"fe7183271711ffb7c63a6480e4baf480e0140da59eeba9b18fcc8bf3478950e3\"\ndependencies = [\n \"cc\",\n \"libc\",\n]\n\n[[package]]\nname = \"cargo-config2\"\nversion = \"0.1.32\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"6dc3749a36e0423c991f1e7a3e4ab0c36a1f489658313db4b187d401d79cc461\"\ndependencies = [\n \"serde\",\n \"serde_derive\",\n \"toml_edit 0.22.22\",\n \"windows-sys 0.59.0\",\n]\n\n[[package]]\nname = \"cargo-platform\"\nversion = \"0.1.8\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"24b1f0365a6c6bb4020cd05806fd0d33c44d38046b8bd7f0e40814b9763cabfc\"\ndependencies = [\n \"serde\",\n]\n\n[[package]]\nname = \"cargo_metadata\"\nversion = \"0.19.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8769706aad5d996120af43197bf46ef6ad0fda35216b4505f926a365a232d924\"\ndependencies = [\n \"camino\",\n \"cargo-platform\",\n \"semver\",\n \"serde\",\n \"serde_json\",\n \"thiserror 2.0.3\",\n]\n\n[[package]]\nname = \"cassowary\"\nversion = \"0.3.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"df8670b8c7b9dae1793364eafadf7239c40d669904660c5960d74cfd80b46a53\"\n\n[[package]]\nname = \"castaway\"\nversion = \"0.2.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"0abae9be0aaf9ea96a3b1b8b1b55c602ca751eba1b1500220cea4ecbafe7c0d5\"\ndependencies = [\n \"rustversion\",\n]\n\n[[package]]\nname = \"cc\"\nversion = \"1.2.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"fd9de9f2205d5ef3fd67e685b0df337994ddd4495e2a28d185500d0e1edfea47\"\ndependencies = [\n \"jobserver\",\n \"libc\",\n \"shlex\",\n]\n\n[[package]]\nname = \"cfg-if\"\nversion = \"1.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"baf1de4339761588bc0619e3cbc0120ee582ebb74b53b4efbf79117bd2da40fd\"\n\n[[package]]\nname = \"cfg_aliases\"\nversion = \"0.1.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"fd16c4719339c4530435d38e511904438d07cce7950afa3718a84ac36c10e89e\"\n\n[[package]]\nname = \"cfg_aliases\"\nversion = \"0.2.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"613afe47fcd5fac7ccf1db93babcb082c5994d996f20b8b159f2ad1658eb5724\"\n\n[[package]]\nname = \"chrono\"\nversion = \"0.4.38\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a21f936df1771bf62b77f047b726c4625ff2e8aa607c01ec06e5a05bd8463401\"\ndependencies = [\n \"num-traits\",\n \"serde\",\n]\n\n[[package]]\nname = \"clap\"\nversion = \"4.5.24\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"9560b07a799281c7e0958b9296854d6fafd4c5f31444a7e5bb1ad6dde5ccf1bd\"\ndependencies = [\n \"clap_builder\",\n \"clap_derive\",\n]\n\n[[package]]\nname = \"clap_builder\"\nversion = \"4.5.24\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"874e0dd3eb68bf99058751ac9712f622e61e6f393a94f7128fa26e3f02f5c7cd\"\ndependencies = [\n \"anstream\",\n \"anstyle\",\n \"clap_lex\",\n \"strsim 0.11.1\",\n]\n\n[[package]]\nname = \"clap_complete\"\nversion = \"4.5.41\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"942dc5991a34d8cf58937ec33201856feba9cbceeeab5adf04116ec7c763bff1\"\ndependencies = [\n \"clap\",\n]\n\n[[package]]\nname = \"clap_derive\"\nversion = \"4.5.24\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"54b755194d6389280185988721fffba69495eed5ee9feeee9a599b53db80318c\"\ndependencies = [\n \"heck\",\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.89\",\n]\n\n[[package]]\nname = \"clap_lex\"\nversion = \"0.7.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f46ad14479a25103f283c0f10005961cf086d8dc42205bb44c46ac563475dca6\"\n\n[[package]]\nname = \"clipboard-win\"\nversion = \"5.4.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"15efe7a882b08f34e38556b14f2fb3daa98769d06c7f0c1b076dfd0d983bc892\"\ndependencies = [\n \"error-code\",\n]\n\n[[package]]\nname = \"cmsis-pack\"\nversion = \"0.7.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"314f9ade9068e9491e92db7565582a77f3f810283683cf95ecd0dd3a8c2e9cd0\"\ndependencies = [\n \"anyhow\",\n \"bytes\",\n \"futures\",\n \"log\",\n \"minidom\",\n \"reqwest\",\n \"serde\",\n \"serde_json\",\n \"tokio\",\n]\n\n[[package]]\nname = \"colorchoice\"\nversion = \"1.0.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"5b63caa9aa9397e2d9480a9b13673856c78d8ac123288526c37d7839f2a86990\"\n\n[[package]]\nname = \"colored\"\nversion = \"2.2.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"117725a109d387c937a1533ce01b450cbde6b88abceea8473c4d7a85853cda3c\"\ndependencies = [\n \"lazy_static\",\n \"windows-sys 0.59.0\",\n]\n\n[[package]]\nname = \"compact_str\"\nversion = \"0.8.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"6050c3a16ddab2e412160b31f2c871015704239bca62f72f6e5f0be631d3f644\"\ndependencies = [\n \"castaway\",\n \"cfg-if\",\n \"itoa\",\n \"rustversion\",\n \"ryu\",\n \"static_assertions\",\n]\n\n[[package]]\nname = \"concurrent-queue\"\nversion = \"2.5.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"4ca0197aee26d1ae37445ee532fefce43251d24cc7c166799f4d46817f1d3973\"\ndependencies = [\n \"crossbeam-utils\",\n]\n\n[[package]]\nname = \"console\"\nversion = \"0.15.8\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"0e1f83fc076bd6dd27517eacdf25fef6c4dfe5f1d7448bafaaf3a26f13b5e4eb\"\ndependencies = [\n \"encode_unicode\",\n \"lazy_static\",\n \"libc\",\n \"unicode-width 0.1.14\",\n \"windows-sys 0.52.0\",\n]\n\n[[package]]\nname = \"core-foundation\"\nversion = \"0.9.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"91e195e091a93c46f7102ec7818a2aa394e1e1771c3ab4825963fa03e45afb8f\"\ndependencies = [\n \"core-foundation-sys\",\n \"libc\",\n]\n\n[[package]]\nname = \"core-foundation\"\nversion = \"0.10.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b55271e5c8c478ad3f38ad24ef34923091e0548492a266d19b3c0b4d82574c63\"\ndependencies = [\n \"core-foundation-sys\",\n \"libc\",\n]\n\n[[package]]\nname = \"core-foundation-sys\"\nversion = \"0.8.7\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"773648b94d0e5d620f64f280777445740e61fe701025087ec8b57f45c791888b\"\n\n[[package]]\nname = \"cpp_demangle\"\nversion = \"0.4.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"96e58d342ad113c2b878f16d5d034c03be492ae460cdbc02b7f0f2284d310c7d\"\ndependencies = [\n \"cfg-if\",\n]\n\n[[package]]\nname = \"cpufeatures\"\nversion = \"0.2.16\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"16b80225097f2e5ae4e7179dd2266824648f3e2f49d9134d584b76389d31c4c3\"\ndependencies = [\n \"libc\",\n]\n\n[[package]]\nname = \"crc\"\nversion = \"3.2.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"69e6e4d7b33a94f0991c26729976b10ebde1d34c3ee82408fb536164fa10d636\"\ndependencies = [\n \"crc-catalog\",\n]\n\n[[package]]\nname = \"crc-catalog\"\nversion = \"2.4.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"19d374276b40fb8bbdee95aef7c7fa6b5316ec764510eb64b8dd0e2ed0d7e7f5\"\n\n[[package]]\nname = \"crc32fast\"\nversion = \"1.4.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a97769d94ddab943e4510d138150169a2758b5ef3eb191a9ee688de3e23ef7b3\"\ndependencies = [\n \"cfg-if\",\n]\n\n[[package]]\nname = \"crossbeam-channel\"\nversion = \"0.5.13\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"33480d6946193aa8033910124896ca395333cae7e2d1113d1fef6c3272217df2\"\ndependencies = [\n \"crossbeam-utils\",\n]\n\n[[package]]\nname = \"crossbeam-utils\"\nversion = \"0.8.20\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"22ec99545bb0ed0ea7bb9b8e1e9122ea386ff8a48c0922e43f36d45ab09e0e80\"\n\n[[package]]\nname = \"crossterm\"\nversion = \"0.28.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"829d955a0bb380ef178a640b91779e3987da38c9aea133b20614cfed8cdea9c6\"\ndependencies = [\n \"bitflags 2.6.0\",\n \"crossterm_winapi\",\n \"mio\",\n \"parking_lot\",\n \"rustix\",\n \"signal-hook\",\n \"signal-hook-mio\",\n \"winapi\",\n]\n\n[[package]]\nname = \"crossterm_winapi\"\nversion = \"0.9.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"acdd7c62a3665c7f6830a51635d9ac9b23ed385797f70a83bb8bafe9c572ab2b\"\ndependencies = [\n \"winapi\",\n]\n\n[[package]]\nname = \"crypto-common\"\nversion = \"0.1.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1bfb12502f3fc46cca1bb51ac28df9d618d813cdc3d2f25b9fe775a34af26bb3\"\ndependencies = [\n \"generic-array\",\n \"typenum\",\n]\n\n[[package]]\nname = \"csv\"\nversion = \"1.3.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"acdc4883a9c96732e4733212c01447ebd805833b7275a73ca3ee080fd77afdaf\"\ndependencies = [\n \"csv-core\",\n \"itoa\",\n \"ryu\",\n \"serde\",\n]\n\n[[package]]\nname = \"csv-core\"\nversion = \"0.1.11\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"5efa2b3d7902f4b634a20cae3c9c4e6209dc4779feb6863329607560143efa70\"\ndependencies = [\n \"memchr\",\n]\n\n[[package]]\nname = \"darling\"\nversion = \"0.14.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"7b750cb3417fd1b327431a470f388520309479ab0bf5e323505daf0290cd3850\"\ndependencies = [\n \"darling_core 0.14.4\",\n \"darling_macro 0.14.4\",\n]\n\n[[package]]\nname = \"darling\"\nversion = \"0.20.10\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"6f63b86c8a8826a49b8c21f08a2d07338eec8d900540f8630dc76284be802989\"\ndependencies = [\n \"darling_core 0.20.10\",\n \"darling_macro 0.20.10\",\n]\n\n[[package]]\nname = \"darling_core\"\nversion = \"0.14.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"109c1ca6e6b7f82cc233a97004ea8ed7ca123a9af07a8230878fcfda9b158bf0\"\ndependencies = [\n \"fnv\",\n \"ident_case\",\n \"proc-macro2\",\n \"quote\",\n \"strsim 0.10.0\",\n \"syn 1.0.109\",\n]\n\n[[package]]\nname = \"darling_core\"\nversion = \"0.20.10\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"95133861a8032aaea082871032f5815eb9e98cef03fa916ab4500513994df9e5\"\ndependencies = [\n \"fnv\",\n \"ident_case\",\n \"proc-macro2\",\n \"quote\",\n \"strsim 0.11.1\",\n \"syn 2.0.89\",\n]\n\n[[package]]\nname = \"darling_macro\"\nversion = \"0.14.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a4aab4dbc9f7611d8b55048a3a16d2d010c2c8334e46304b40ac1cc14bf3b48e\"\ndependencies = [\n \"darling_core 0.14.4\",\n \"quote\",\n \"syn 1.0.109\",\n]\n\n[[package]]\nname = \"darling_macro\"\nversion = \"0.20.10\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d336a2a514f6ccccaa3e09b02d41d35330c07ddf03a62165fcec10bb561c7806\"\ndependencies = [\n \"darling_core 0.20.10\",\n \"quote\",\n \"syn 2.0.89\",\n]\n\n[[package]]\nname = \"deflate64\"\nversion = \"0.1.9\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"da692b8d1080ea3045efaab14434d40468c3d8657e42abddfffca87b428f4c1b\"\n\n[[package]]\nname = \"defmt-decoder\"\nversion = \"0.4.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b88b0957423a8e4f5af3fd9e5651fdec42a94f09a916d3d4d2efe8114759824a\"\ndependencies = [\n \"alterable_logger\",\n \"anyhow\",\n \"byteorder\",\n \"colored\",\n \"defmt-json-schema\",\n \"defmt-parser\",\n \"dissimilar\",\n \"gimli 0.29.0\",\n \"log\",\n \"nom\",\n \"object 0.35.0\",\n \"regex\",\n \"ryu\",\n \"serde\",\n \"serde_json\",\n \"time\",\n]\n\n[[package]]\nname = \"defmt-json-schema\"\nversion = \"0.1.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"96b04d228e57a61cf385d86bc8980bb41b47c6fc0eace90592668df97b2dad6a\"\ndependencies = [\n \"log\",\n \"serde\",\n]\n\n[[package]]\nname = \"defmt-parser\"\nversion = \"0.4.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3983b127f13995e68c1e29071e5d115cd96f215ccb5e6812e3728cd6f92653b3\"\ndependencies = [\n \"thiserror 2.0.3\",\n]\n\n[[package]]\nname = \"deku\"\nversion = \"0.16.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"819b87cc7a05b3abe3fc38e59b3980a5fd3162f25a247116441a9171d3e84481\"\ndependencies = [\n \"bitvec\",\n \"deku_derive\",\n]\n\n[[package]]\nname = \"deku_derive\"\nversion = \"0.16.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"4e2ca12572239215a352a74ad7c776d7e8a914f8a23511c6cbedddd887e5009e\"\ndependencies = [\n \"darling 0.14.4\",\n \"proc-macro-crate\",\n \"proc-macro2\",\n \"quote\",\n \"syn 1.0.109\",\n]\n\n[[package]]\nname = \"deranged\"\nversion = \"0.3.11\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b42b6fa04a440b495c8b04d0e71b707c585f83cb9cb28cf8cd0d976c315e31b4\"\ndependencies = [\n \"powerfmt\",\n]\n\n[[package]]\nname = \"derive_arbitrary\"\nversion = \"1.4.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"30542c1ad912e0e3d22a1935c290e12e8a29d704a420177a31faad4a601a0800\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.89\",\n]\n\n[[package]]\nname = \"diff\"\nversion = \"0.1.13\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"56254986775e3233ffa9c4d7d3faaf6d36a2c09d30b20687e9f88bc8bafc16c8\"\n\n[[package]]\nname = \"digest\"\nversion = \"0.10.7\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"9ed9a281f7bc9b7576e61468ba615a66a5c8cfdff42420a70aa82701a3b1e292\"\ndependencies = [\n \"block-buffer\",\n \"crypto-common\",\n]\n\n[[package]]\nname = \"directories\"\nversion = \"5.0.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"9a49173b84e034382284f27f1af4dcbbd231ffa358c0fe316541a7337f376a35\"\ndependencies = [\n \"dirs-sys\",\n]\n\n[[package]]\nname = \"dirs-sys\"\nversion = \"0.4.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"520f05a5cbd335fae5a99ff7a6ab8627577660ee5cfd6a94a6a929b52ff0321c\"\ndependencies = [\n \"libc\",\n \"option-ext\",\n \"redox_users\",\n \"windows-sys 0.48.0\",\n]\n\n[[package]]\nname = \"displaydoc\"\nversion = \"0.2.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"97369cbbc041bc366949bc74d34658d6cda5621039731c6310521892a3a20ae0\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.89\",\n]\n\n[[package]]\nname = \"dissimilar\"\nversion = \"1.0.9\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"59f8e79d1fbf76bdfbde321e902714bf6c49df88a7dda6fc682fc2979226962d\"\n\n[[package]]\nname = \"docsplay\"\nversion = \"0.1.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"21c64169ab69178537cce74424c550583a84f58bc62593ea6023c58886be69b4\"\ndependencies = [\n \"docsplay-macros\",\n]\n\n[[package]]\nname = \"docsplay-macros\"\nversion = \"0.1.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"4673f83edb6dfabfbc26704bd89ee95f4b164cd5db5fe8c88efda48fb0fca8d7\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.89\",\n]\n\n[[package]]\nname = \"dunce\"\nversion = \"1.0.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"92773504d58c093f6de2459af4af33faa518c13451eb8f2b5698ed3d36e7c813\"\n\n[[package]]\nname = \"either\"\nversion = \"1.13.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"60b1af1c220855b6ceac025d3f6ecdd2b7c4894bfe9cd9bda4fbb4bc7c0d4cf0\"\n\n[[package]]\nname = \"encode_unicode\"\nversion = \"0.3.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a357d28ed41a50f9c765dbfe56cbc04a64e53e5fc58ba79fbc34c10ef3df831f\"\n\n[[package]]\nname = \"env_filter\"\nversion = \"0.1.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"4f2c92ceda6ceec50f43169f9ee8424fe2db276791afde7b2cd8bc084cb376ab\"\ndependencies = [\n \"log\",\n]\n\n[[package]]\nname = \"env_logger\"\nversion = \"0.10.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"4cd405aab171cb85d6735e5c8d9db038c17d3ca007a4d2c25f337935c3d90580\"\ndependencies = [\n \"humantime\",\n \"is-terminal\",\n \"log\",\n \"regex\",\n \"termcolor\",\n]\n\n[[package]]\nname = \"env_logger\"\nversion = \"0.11.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e13fa619b91fb2381732789fc5de83b45675e882f66623b7d8cb4f643017018d\"\ndependencies = [\n \"anstream\",\n \"anstyle\",\n \"env_filter\",\n \"log\",\n]\n\n[[package]]\nname = \"equivalent\"\nversion = \"1.0.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"5443807d6dff69373d433ab9ef5378ad8df50ca6298caf15de6e52e24aaf54d5\"\n\n[[package]]\nname = \"errno\"\nversion = \"0.3.9\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"534c5cf6194dfab3db3242765c03bbe257cf92f22b38f6bc0c58d59108a820ba\"\ndependencies = [\n \"libc\",\n \"windows-sys 0.52.0\",\n]\n\n[[package]]\nname = \"error-code\"\nversion = \"3.3.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a5d9305ccc6942a704f4335694ecd3de2ea531b114ac2d51f5f843750787a92f\"\n\n[[package]]\nname = \"escape8259\"\nversion = \"0.5.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"5692dd7b5a1978a5aeb0ce83b7655c58ca8efdcb79d21036ea249da95afec2c6\"\n\n[[package]]\nname = \"esp-idf-part\"\nversion = \"0.5.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"59f50b6c32370067087b46087cd5333f2dfe678f0b01223fa70fde6f15449844\"\ndependencies = [\n \"csv\",\n \"deku\",\n \"heapless\",\n \"md5\",\n \"parse_int\",\n \"regex\",\n \"serde\",\n \"serde_plain\",\n \"strum\",\n \"thiserror 1.0.69\",\n]\n\n[[package]]\nname = \"espflash\"\nversion = \"3.2.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"5e2ac954ee494edf9b017f3dc26cee35290b9e650327901aa4adba193aa3ced4\"\ndependencies = [\n \"base64\",\n \"bytemuck\",\n \"esp-idf-part\",\n \"flate2\",\n \"libc\",\n \"log\",\n \"md-5\",\n \"miette\",\n \"serde\",\n \"sha2\",\n \"strum\",\n \"thiserror 1.0.69\",\n \"xmas-elf\",\n]\n\n[[package]]\nname = \"event-listener\"\nversion = \"5.3.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"6032be9bd27023a771701cc49f9f053c751055f71efb2e0ae5c15809093675ba\"\ndependencies = [\n \"concurrent-queue\",\n \"parking\",\n \"pin-project-lite\",\n]\n\n[[package]]\nname = \"event-listener-strategy\"\nversion = \"0.5.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"0f214dc438f977e6d4e3500aaa277f5ad94ca83fbbd9b1a15713ce2344ccc5a1\"\ndependencies = [\n \"event-listener\",\n \"pin-project-lite\",\n]\n\n[[package]]\nname = \"fallible-iterator\"\nversion = \"0.3.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"2acce4a10f12dc2fb14a218589d4f1f62ef011b2d0cc4b3cb1bba8e94da14649\"\n\n[[package]]\nname = \"fastrand\"\nversion = \"2.3.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"37909eebbb50d72f9059c3b6d82c0463f2ff062c9e95845c43a6c9c0355411be\"\n\n[[package]]\nname = \"fd-lock\"\nversion = \"4.0.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"7e5768da2206272c81ef0b5e951a41862938a6070da63bcea197899942d3b947\"\ndependencies = [\n \"cfg-if\",\n \"rustix\",\n \"windows-sys 0.52.0\",\n]\n\n[[package]]\nname = \"figment\"\nversion = \"0.10.19\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8cb01cd46b0cf372153850f4c6c272d9cbea2da513e07538405148f95bd789f3\"\ndependencies = [\n \"atomic\",\n \"pear\",\n \"serde\",\n \"serde_json\",\n \"serde_yaml\",\n \"toml\",\n \"uncased\",\n \"version_check\",\n]\n\n[[package]]\nname = \"flate2\"\nversion = \"1.0.35\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"c936bfdafb507ebbf50b8074c54fa31c5be9a1e7e5f467dd659697041407d07c\"\ndependencies = [\n \"crc32fast\",\n \"miniz_oxide\",\n]\n\n[[package]]\nname = \"fnv\"\nversion = \"1.0.7\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3f9eec918d3f24069decb9af1554cad7c880e2da24a9afd88aca000531ab82c1\"\n\n[[package]]\nname = \"foldhash\"\nversion = \"0.1.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f81ec6369c545a7d40e4589b5597581fa1c441fe1cce96dd1de43159910a36a2\"\n\n[[package]]\nname = \"form_urlencoded\"\nversion = \"1.2.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e13624c2627564efccf4934284bdd98cbaa14e79b0b5a141218e507b3a823456\"\ndependencies = [\n \"percent-encoding\",\n]\n\n[[package]]\nname = \"funty\"\nversion = \"2.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e6d5a32815ae3f33302d95fdcb2ce17862f8c65363dcfd29360480ba1001fc9c\"\n\n[[package]]\nname = \"futures\"\nversion = \"0.3.31\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"65bc07b1a8bc7c85c5f2e110c476c7389b4554ba72af57d8445ea63a576b0876\"\ndependencies = [\n \"futures-channel\",\n \"futures-core\",\n \"futures-executor\",\n \"futures-io\",\n \"futures-sink\",\n \"futures-task\",\n \"futures-util\",\n]\n\n[[package]]\nname = \"futures-channel\"\nversion = \"0.3.31\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"2dff15bf788c671c1934e366d07e30c1814a8ef514e1af724a602e8a2fbe1b10\"\ndependencies = [\n \"futures-core\",\n \"futures-sink\",\n]\n\n[[package]]\nname = \"futures-core\"\nversion = \"0.3.31\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"05f29059c0c2090612e8d742178b0580d2dc940c837851ad723096f87af6663e\"\n\n[[package]]\nname = \"futures-executor\"\nversion = \"0.3.31\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1e28d1d997f585e54aebc3f97d39e72338912123a67330d723fdbb564d646c9f\"\ndependencies = [\n \"futures-core\",\n \"futures-task\",\n \"futures-util\",\n]\n\n[[package]]\nname = \"futures-io\"\nversion = \"0.3.31\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"9e5c1b78ca4aae1ac06c48a526a655760685149f0d465d21f37abfe57ce075c6\"\n\n[[package]]\nname = \"futures-lite\"\nversion = \"2.5.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"cef40d21ae2c515b51041df9ed313ed21e572df340ea58a922a0aefe7e8891a1\"\ndependencies = [\n \"futures-core\",\n \"pin-project-lite\",\n]\n\n[[package]]\nname = \"futures-macro\"\nversion = \"0.3.31\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"162ee34ebcb7c64a8abebc059ce0fee27c2262618d7b60ed8faf72fef13c3650\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.89\",\n]\n\n[[package]]\nname = \"futures-sink\"\nversion = \"0.3.31\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e575fab7d1e0dcb8d0c7bcf9a63ee213816ab51902e6d244a95819acacf1d4f7\"\n\n[[package]]\nname = \"futures-task\"\nversion = \"0.3.31\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f90f7dce0722e95104fcb095585910c0977252f286e354b5e3bd38902cd99988\"\n\n[[package]]\nname = \"futures-util\"\nversion = \"0.3.31\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"9fa08315bb612088cc391249efdc3bc77536f16c91f6cf495e6fbe85b20a4a81\"\ndependencies = [\n \"futures-channel\",\n \"futures-core\",\n \"futures-io\",\n \"futures-macro\",\n \"futures-sink\",\n \"futures-task\",\n \"memchr\",\n \"pin-project-lite\",\n \"pin-utils\",\n \"slab\",\n]\n\n[[package]]\nname = \"gdbstub\"\nversion = \"0.7.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"31c683a9f13de31432e6097131d5f385898c7f0635c0f392b9d0fa165063c8ac\"\ndependencies = [\n \"bitflags 2.6.0\",\n \"cfg-if\",\n \"log\",\n \"managed\",\n \"num-traits\",\n \"paste\",\n]\n\n[[package]]\nname = \"generic-array\"\nversion = \"0.14.7\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"85649ca51fd72272d7821adaf274ad91c288277713d9c18820d8499a7ff69e9a\"\ndependencies = [\n \"typenum\",\n \"version_check\",\n]\n\n[[package]]\nname = \"getrandom\"\nversion = \"0.2.15\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"c4567c8db10ae91089c99af84c68c38da3ec2f087c3f82960bcdbf3656b6f4d7\"\ndependencies = [\n \"cfg-if\",\n \"js-sys\",\n \"libc\",\n \"wasi\",\n \"wasm-bindgen\",\n]\n\n[[package]]\nname = \"gimli\"\nversion = \"0.29.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"40ecd4077b5ae9fd2e9e169b102c6c330d0605168eb0e8bf79952b256dbefffd\"\ndependencies = [\n \"fallible-iterator\",\n \"stable_deref_trait\",\n]\n\n[[package]]\nname = \"gimli\"\nversion = \"0.31.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"07e28edb80900c19c28f1072f2e8aeca7fa06b23cd4169cefe1af5aa3260783f\"\ndependencies = [\n \"fallible-iterator\",\n \"indexmap\",\n \"stable_deref_trait\",\n]\n\n[[package]]\nname = \"git-version\"\nversion = \"0.3.9\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1ad568aa3db0fcbc81f2f116137f263d7304f512a1209b35b85150d3ef88ad19\"\ndependencies = [\n \"git-version-macro\",\n]\n\n[[package]]\nname = \"git-version-macro\"\nversion = \"0.3.9\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"53010ccb100b96a67bc32c0175f0ed1426b31b655d562898e57325f81c023ac0\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.89\",\n]\n\n[[package]]\nname = \"goblin\"\nversion = \"0.9.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"daa0a64d21a7eb230583b4c5f4e23b7e4e57974f96620f42a7e75e08ae66d745\"\ndependencies = [\n \"log\",\n \"plain\",\n \"scroll\",\n]\n\n[[package]]\nname = \"hash32\"\nversion = \"0.3.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"47d60b12902ba28e2730cd37e95b8c9223af2808df9e902d4df49588d1470606\"\ndependencies = [\n \"byteorder\",\n]\n\n[[package]]\nname = \"hashbrown\"\nversion = \"0.15.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3a9bfc1af68b1726ea47d3d5109de126281def866b33970e10fbab11b5dafab3\"\ndependencies = [\n \"allocator-api2\",\n \"equivalent\",\n \"foldhash\",\n]\n\n[[package]]\nname = \"heapless\"\nversion = \"0.8.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"0bfb9eb618601c89945a70e254898da93b13be0388091d42117462b265bb3fad\"\ndependencies = [\n \"hash32\",\n \"serde\",\n \"stable_deref_trait\",\n]\n\n[[package]]\nname = \"heck\"\nversion = \"0.5.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"2304e00983f87ffb38b55b444b5e3b60a884b5d30c0fca7d82fe33449bbe55ea\"\n\n[[package]]\nname = \"hermit-abi\"\nversion = \"0.3.9\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d231dfb89cfffdbc30e7fc41579ed6066ad03abda9e567ccafae602b97ec5024\"\n\n[[package]]\nname = \"hermit-abi\"\nversion = \"0.4.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"fbf6a919d6cf397374f7dfeeea91d974c7c0a7221d0d0f4f20d859d329e53fcc\"\n\n[[package]]\nname = \"hex\"\nversion = \"0.4.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"7f24254aa9a54b5c858eaee2f5bccdb46aaf0e486a595ed5fd8f86ba55232a70\"\n\n[[package]]\nname = \"hexdump\"\nversion = \"0.1.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"cf31ab66ed8145a1c7427bd8e9b42a6131bd74ccf444f69b9e620c2e73ded832\"\ndependencies = [\n \"arrayvec\",\n]\n\n[[package]]\nname = \"hidapi\"\nversion = \"2.6.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"03b876ecf37e86b359573c16c8366bc3eba52b689884a0fc42ba3f67203d2a8b\"\ndependencies = [\n \"cc\",\n \"cfg-if\",\n \"libc\",\n \"nix 0.27.1\",\n \"pkg-config\",\n \"udev\",\n \"windows-sys 0.48.0\",\n]\n\n[[package]]\nname = \"home\"\nversion = \"0.5.9\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e3d1354bf6b7235cb4a0576c2619fd4ed18183f689b12b006a0ee7329eeff9a5\"\ndependencies = [\n \"windows-sys 0.52.0\",\n]\n\n[[package]]\nname = \"http\"\nversion = \"1.1.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"21b9ddb458710bc376481b842f5da65cdf31522de232c1ca8146abce2a358258\"\ndependencies = [\n \"bytes\",\n \"fnv\",\n \"itoa\",\n]\n\n[[package]]\nname = \"http-body\"\nversion = \"1.0.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1efedce1fb8e6913f23e0c92de8e62cd5b772a67e7b3946df930a62566c93184\"\ndependencies = [\n \"bytes\",\n \"http\",\n]\n\n[[package]]\nname = \"http-body-util\"\nversion = \"0.1.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"793429d76616a256bcb62c2a2ec2bed781c8307e797e2598c50010f2bee2544f\"\ndependencies = [\n \"bytes\",\n \"futures-util\",\n \"http\",\n \"http-body\",\n \"pin-project-lite\",\n]\n\n[[package]]\nname = \"httparse\"\nversion = \"1.9.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"7d71d3574edd2771538b901e6549113b4006ece66150fb69c0fb6d9a2adae946\"\n\n[[package]]\nname = \"humantime\"\nversion = \"2.1.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"9a3a5bfb195931eeb336b2a7b4d761daec841b97f947d34394601737a7bba5e4\"\n\n[[package]]\nname = \"hyper\"\nversion = \"1.5.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"97818827ef4f364230e16705d4706e2897df2bb60617d6ca15d598025a3c481f\"\ndependencies = [\n \"bytes\",\n \"futures-channel\",\n \"futures-util\",\n \"http\",\n \"http-body\",\n \"httparse\",\n \"itoa\",\n \"pin-project-lite\",\n \"smallvec\",\n \"tokio\",\n \"want\",\n]\n\n[[package]]\nname = \"hyper-rustls\"\nversion = \"0.27.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"08afdbb5c31130e3034af566421053ab03787c640246a446327f550d11bcb333\"\ndependencies = [\n \"futures-util\",\n \"http\",\n \"hyper\",\n \"hyper-util\",\n \"rustls\",\n \"rustls-native-certs\",\n \"rustls-pki-types\",\n \"tokio\",\n \"tokio-rustls\",\n \"tower-service\",\n \"webpki-roots\",\n]\n\n[[package]]\nname = \"hyper-util\"\nversion = \"0.1.10\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"df2dcfbe0677734ab2f3ffa7fa7bfd4706bfdc1ef393f2ee30184aed67e631b4\"\ndependencies = [\n \"bytes\",\n \"futures-channel\",\n \"futures-util\",\n \"http\",\n \"http-body\",\n \"hyper\",\n \"pin-project-lite\",\n \"socket2\",\n \"tokio\",\n \"tower-service\",\n \"tracing\",\n]\n\n[[package]]\nname = \"icu_collections\"\nversion = \"1.5.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"db2fa452206ebee18c4b5c2274dbf1de17008e874b4dc4f0aea9d01ca79e4526\"\ndependencies = [\n \"displaydoc\",\n \"yoke\",\n \"zerofrom\",\n \"zerovec\",\n]\n\n[[package]]\nname = \"icu_locid\"\nversion = \"1.5.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"13acbb8371917fc971be86fc8057c41a64b521c184808a698c02acc242dbf637\"\ndependencies = [\n \"displaydoc\",\n \"litemap\",\n \"tinystr\",\n \"writeable\",\n \"zerovec\",\n]\n\n[[package]]\nname = \"icu_locid_transform\"\nversion = \"1.5.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"01d11ac35de8e40fdeda00d9e1e9d92525f3f9d887cdd7aa81d727596788b54e\"\ndependencies = [\n \"displaydoc\",\n \"icu_locid\",\n \"icu_locid_transform_data\",\n \"icu_provider\",\n \"tinystr\",\n \"zerovec\",\n]\n\n[[package]]\nname = \"icu_locid_transform_data\"\nversion = \"1.5.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"fdc8ff3388f852bede6b579ad4e978ab004f139284d7b28715f773507b946f6e\"\n\n[[package]]\nname = \"icu_normalizer\"\nversion = \"1.5.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"19ce3e0da2ec68599d193c93d088142efd7f9c5d6fc9b803774855747dc6a84f\"\ndependencies = [\n \"displaydoc\",\n \"icu_collections\",\n \"icu_normalizer_data\",\n \"icu_properties\",\n \"icu_provider\",\n \"smallvec\",\n \"utf16_iter\",\n \"utf8_iter\",\n \"write16\",\n \"zerovec\",\n]\n\n[[package]]\nname = \"icu_normalizer_data\"\nversion = \"1.5.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f8cafbf7aa791e9b22bec55a167906f9e1215fd475cd22adfcf660e03e989516\"\n\n[[package]]\nname = \"icu_properties\"\nversion = \"1.5.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"93d6020766cfc6302c15dbbc9c8778c37e62c14427cb7f6e601d849e092aeef5\"\ndependencies = [\n \"displaydoc\",\n \"icu_collections\",\n \"icu_locid_transform\",\n \"icu_properties_data\",\n \"icu_provider\",\n \"tinystr\",\n \"zerovec\",\n]\n\n[[package]]\nname = \"icu_properties_data\"\nversion = \"1.5.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"67a8effbc3dd3e4ba1afa8ad918d5684b8868b3b26500753effea8d2eed19569\"\n\n[[package]]\nname = \"icu_provider\"\nversion = \"1.5.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"6ed421c8a8ef78d3e2dbc98a973be2f3770cb42b606e3ab18d6237c4dfde68d9\"\ndependencies = [\n \"displaydoc\",\n \"icu_locid\",\n \"icu_provider_macros\",\n \"stable_deref_trait\",\n \"tinystr\",\n \"writeable\",\n \"yoke\",\n \"zerofrom\",\n \"zerovec\",\n]\n\n[[package]]\nname = \"icu_provider_macros\"\nversion = \"1.5.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1ec89e9337638ecdc08744df490b221a7399bf8d164eb52a665454e60e075ad6\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.89\",\n]\n\n[[package]]\nname = \"ident_case\"\nversion = \"1.0.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b9e0384b61958566e926dc50660321d12159025e767c18e043daf26b70104c39\"\n\n[[package]]\nname = \"idna\"\nversion = \"1.0.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"686f825264d630750a544639377bae737628043f20d38bbc029e8f29ea968a7e\"\ndependencies = [\n \"idna_adapter\",\n \"smallvec\",\n \"utf8_iter\",\n]\n\n[[package]]\nname = \"idna_adapter\"\nversion = \"1.2.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"daca1df1c957320b2cf139ac61e7bd64fed304c5040df000a745aa1de3b4ef71\"\ndependencies = [\n \"icu_normalizer\",\n \"icu_properties\",\n]\n\n[[package]]\nname = \"ihex\"\nversion = \"3.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"365a784774bb381e8c19edb91190a90d7f2625e057b55de2bc0f6b57bc779ff2\"\n\n[[package]]\nname = \"indexmap\"\nversion = \"2.7.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"62f822373a4fe84d4bb149bf54e584a7f4abec90e072ed49cda0edea5b95471f\"\ndependencies = [\n \"equivalent\",\n \"hashbrown\",\n \"serde\",\n]\n\n[[package]]\nname = \"indicatif\"\nversion = \"0.17.9\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"cbf675b85ed934d3c67b5c5469701eec7db22689d0a2139d856e0925fa28b281\"\ndependencies = [\n \"console\",\n \"number_prefix\",\n \"portable-atomic\",\n \"unicode-width 0.2.0\",\n \"web-time\",\n]\n\n[[package]]\nname = \"indoc\"\nversion = \"2.0.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b248f5224d1d606005e02c97f5aa4e88eeb230488bcc03bc9ca4d7991399f2b5\"\n\n[[package]]\nname = \"inlinable_string\"\nversion = \"0.1.15\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"c8fae54786f62fb2918dcfae3d568594e50eb9b5c25bf04371af6fe7516452fb\"\n\n[[package]]\nname = \"insta\"\nversion = \"1.42.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"6513e4067e16e69ed1db5ab56048ed65db32d10ba5fc1217f5393f8f17d8b5a5\"\ndependencies = [\n \"console\",\n \"linked-hash-map\",\n \"once_cell\",\n \"serde\",\n \"similar\",\n]\n\n[[package]]\nname = \"instability\"\nversion = \"0.3.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b829f37dead9dc39df40c2d3376c179fdfd2ac771f53f55d3c30dc096a3c0c6e\"\ndependencies = [\n \"darling 0.20.10\",\n \"indoc\",\n \"pretty_assertions\",\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.89\",\n]\n\n[[package]]\nname = \"io-kit-sys\"\nversion = \"0.4.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"617ee6cf8e3f66f3b4ea67a4058564628cde41901316e19f559e14c7c72c5e7b\"\ndependencies = [\n \"core-foundation-sys\",\n \"mach2\",\n]\n\n[[package]]\nname = \"io-lifetimes\"\nversion = \"1.0.11\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"eae7b9aee968036d54dce06cebaefd919e4472e753296daccd6d344e3e2df0c2\"\ndependencies = [\n \"hermit-abi 0.3.9\",\n \"libc\",\n \"windows-sys 0.48.0\",\n]\n\n[[package]]\nname = \"ipnet\"\nversion = \"2.10.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ddc24109865250148c2e0f3d25d4f0f479571723792d3802153c60922a4fb708\"\n\n[[package]]\nname = \"is-terminal\"\nversion = \"0.4.13\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"261f68e344040fbd0edea105bef17c66edf46f984ddb1115b775ce31be948f4b\"\ndependencies = [\n \"hermit-abi 0.4.0\",\n \"libc\",\n \"windows-sys 0.52.0\",\n]\n\n[[package]]\nname = \"is_ci\"\nversion = \"1.2.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"7655c9839580ee829dfacba1d1278c2b7883e50a277ff7541299489d6bdfdc45\"\n\n[[package]]\nname = \"is_terminal_polyfill\"\nversion = \"1.70.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"7943c866cc5cd64cbc25b2e01621d07fa8eb2a1a23160ee81ce38704e97b8ecf\"\n\n[[package]]\nname = \"itertools\"\nversion = \"0.9.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"284f18f85651fe11e8a991b2adb42cb078325c996ed026d994719efcfca1d54b\"\ndependencies = [\n \"either\",\n]\n\n[[package]]\nname = \"itertools\"\nversion = \"0.13.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"413ee7dfc52ee1a4949ceeb7dbc8a33f2d6c088194d9f922fb8318faf1f01186\"\ndependencies = [\n \"either\",\n]\n\n[[package]]\nname = \"itertools\"\nversion = \"0.14.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"2b192c782037fadd9cfa75548310488aabdbf3d2da73885b31bd0abd03351285\"\ndependencies = [\n \"either\",\n]\n\n[[package]]\nname = \"itm\"\nversion = \"0.9.0-rc.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"df09e08348b238ac7017cc6facd6c7799b5c593a1a501859570d0843d0cd4b11\"\ndependencies = [\n \"bitmatch\",\n \"bitvec\",\n \"thiserror 1.0.69\",\n]\n\n[[package]]\nname = \"itoa\"\nversion = \"1.0.13\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"540654e97a3f4470a492cd30ff187bc95d89557a903a2bbf112e2fae98104ef2\"\n\n[[package]]\nname = \"jep106\"\nversion = \"0.2.10\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"2c5995914d637fbd88c82bc73357c6c64417a12de380250df492e8e7c5f6d145\"\ndependencies = [\n \"serde\",\n]\n\n[[package]]\nname = \"jobserver\"\nversion = \"0.1.32\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"48d1dbcbbeb6a7fec7e059840aa538bd62aaccf972c7346c4d9d2059312853d0\"\ndependencies = [\n \"libc\",\n]\n\n[[package]]\nname = \"js-sys\"\nversion = \"0.3.72\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"6a88f1bda2bd75b0452a14784937d796722fdebfe50df998aeb3f0b7603019a9\"\ndependencies = [\n \"wasm-bindgen\",\n]\n\n[[package]]\nname = \"lazy_static\"\nversion = \"1.5.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"bbd2bcb4c963f2ddae06a2efc7e9f3591312473c50c6685e1f298068316e66fe\"\n\n[[package]]\nname = \"libc\"\nversion = \"0.2.164\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"433bfe06b8c75da9b2e3fbea6e5329ff87748f0b144ef75306e674c3f6f7c13f\"\n\n[[package]]\nname = \"libredox\"\nversion = \"0.1.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"c0ff37bd590ca25063e35af745c343cb7a0271906fb7b37e4813e8f79f00268d\"\ndependencies = [\n \"bitflags 2.6.0\",\n \"libc\",\n]\n\n[[package]]\nname = \"libtest-mimic\"\nversion = \"0.8.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"5297962ef19edda4ce33aaa484386e0a5b3d7f2f4e037cbeee00503ef6b29d33\"\ndependencies = [\n \"anstream\",\n \"anstyle\",\n \"clap\",\n \"escape8259\",\n]\n\n[[package]]\nname = \"libudev-sys\"\nversion = \"0.1.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3c8469b4a23b962c1396b9b451dda50ef5b283e8dd309d69033475fa9b334324\"\ndependencies = [\n \"libc\",\n \"pkg-config\",\n]\n\n[[package]]\nname = \"linked-hash-map\"\nversion = \"0.5.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"0717cef1bc8b636c6e1c1bbdefc09e6322da8a9321966e8928ef80d20f7f770f\"\n\n[[package]]\nname = \"linkme\"\nversion = \"0.3.31\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"566336154b9e58a4f055f6dd4cbab62c7dc0826ce3c0a04e63b2d2ecd784cdae\"\ndependencies = [\n \"linkme-impl\",\n]\n\n[[package]]\nname = \"linkme-impl\"\nversion = \"0.3.31\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"edbe595006d355eaf9ae11db92707d4338cd2384d16866131cc1afdbdd35d8d9\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.89\",\n]\n\n[[package]]\nname = \"linux-raw-sys\"\nversion = \"0.4.14\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"78b3ae25bc7c8c38cec158d1f2757ee79e9b3740fbc7ccf0e59e4b08d793fa89\"\n\n[[package]]\nname = \"litemap\"\nversion = \"0.7.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"4ee93343901ab17bd981295f2cf0026d4ad018c7c31ba84549a4ddbb47a45104\"\n\n[[package]]\nname = \"lock_api\"\nversion = \"0.4.12\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"07af8b9cdd281b7915f413fa73f29ebd5d55d0d3f0155584dade1ff18cea1b17\"\ndependencies = [\n \"autocfg\",\n \"scopeguard\",\n]\n\n[[package]]\nname = \"lockfree-object-pool\"\nversion = \"0.1.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"9374ef4228402d4b7e403e5838cb880d9ee663314b0a900d5a6aabf0c213552e\"\n\n[[package]]\nname = \"log\"\nversion = \"0.4.22\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a7a70ba024b9dc04c27ea2f0c0548feb474ec5c54bba33a7f72f873a39d07b24\"\ndependencies = [\n \"serde\",\n]\n\n[[package]]\nname = \"lru\"\nversion = \"0.12.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"234cf4f4a04dc1f57e24b96cc0cd600cf2af460d4161ac5ecdd0af8e1f3b2a38\"\ndependencies = [\n \"hashbrown\",\n]\n\n[[package]]\nname = \"lzma-rs\"\nversion = \"0.3.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"297e814c836ae64db86b36cf2a557ba54368d03f6afcd7d947c266692f71115e\"\ndependencies = [\n \"byteorder\",\n \"crc\",\n]\n\n[[package]]\nname = \"mach2\"\nversion = \"0.4.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"19b955cdeb2a02b9117f121ce63aa52d08ade45de53e48fe6a38b39c10f6f709\"\ndependencies = [\n \"libc\",\n]\n\n[[package]]\nname = \"managed\"\nversion = \"0.8.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"0ca88d725a0a943b096803bd34e73a4437208b6077654cc4ecb2947a5f91618d\"\n\n[[package]]\nname = \"matchers\"\nversion = \"0.1.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8263075bb86c5a1b1427b5ae862e8889656f126e9f77c484496e8b47cf5c5558\"\ndependencies = [\n \"regex-automata 0.1.10\",\n]\n\n[[package]]\nname = \"md-5\"\nversion = \"0.10.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d89e7ee0cfbedfc4da3340218492196241d89eefb6dab27de5df917a6d2e78cf\"\ndependencies = [\n \"cfg-if\",\n \"digest\",\n]\n\n[[package]]\nname = \"md5\"\nversion = \"0.7.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"490cc448043f947bae3cbee9c203358d62dbee0db12107a74be5c30ccfd09771\"\n\n[[package]]\nname = \"memchr\"\nversion = \"2.7.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"78ca9ab1a0babb1e7d5695e3530886289c18cf2f87ec19a575a0abdce112e3a3\"\n\n[[package]]\nname = \"memmap2\"\nversion = \"0.9.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"fd3f7eed9d3848f8b98834af67102b720745c4ec028fcd0aa0239277e7de374f\"\ndependencies = [\n \"libc\",\n]\n\n[[package]]\nname = \"miette\"\nversion = \"7.4.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"317f146e2eb7021892722af37cf1b971f0a70c8406f487e24952667616192c64\"\ndependencies = [\n \"backtrace\",\n \"backtrace-ext\",\n \"cfg-if\",\n \"miette-derive\",\n \"owo-colors\",\n \"supports-color\",\n \"supports-hyperlinks\",\n \"supports-unicode\",\n \"terminal_size\",\n \"textwrap\",\n \"thiserror 1.0.69\",\n \"unicode-width 0.1.14\",\n]\n\n[[package]]\nname = \"miette-derive\"\nversion = \"7.4.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"23c9b935fbe1d6cbd1dac857b54a688145e2d93f48db36010514d0f612d0ad67\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.89\",\n]\n\n[[package]]\nname = \"mime\"\nversion = \"0.3.17\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"6877bb514081ee2a7ff5ef9de3281f14a4dd4bceac4c09388074a6b5df8a139a\"\n\n[[package]]\nname = \"minidom\"\nversion = \"0.12.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"fe549115a674f5ec64c754d85e37d6f42664bd0ef4ffb62b619489ad99c6cb1a\"\ndependencies = [\n \"quick-xml\",\n]\n\n[[package]]\nname = \"minimal-lexical\"\nversion = \"0.2.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"68354c5c6bd36d73ff3feceb05efa59b6acb7626617f4962be322a825e61f79a\"\n\n[[package]]\nname = \"miniz_oxide\"\nversion = \"0.8.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e2d80299ef12ff69b16a84bb182e3b9df68b5a91574d3d4fa6e41b65deec4df1\"\ndependencies = [\n \"adler2\",\n]\n\n[[package]]\nname = \"mio\"\nversion = \"1.0.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"80e04d1dcff3aae0704555fe5fee3bcfaf3d1fdf8a7e521d5b9d2b42acb52cec\"\ndependencies = [\n \"hermit-abi 0.3.9\",\n \"libc\",\n \"log\",\n \"wasi\",\n \"windows-sys 0.52.0\",\n]\n\n[[package]]\nname = \"nix\"\nversion = \"0.26.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"598beaf3cc6fdd9a5dfb1630c2800c7acd31df7aaf0f565796fba2b53ca1af1b\"\ndependencies = [\n \"bitflags 1.3.2\",\n \"cfg-if\",\n \"libc\",\n]\n\n[[package]]\nname = \"nix\"\nversion = \"0.27.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"2eb04e9c688eff1c89d72b407f168cf79bb9e867a9d3323ed6c01519eb9cc053\"\ndependencies = [\n \"bitflags 2.6.0\",\n \"cfg-if\",\n \"libc\",\n]\n\n[[package]]\nname = \"nix\"\nversion = \"0.28.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ab2156c4fce2f8df6c499cc1c763e4394b7482525bf2a9701c9d79d215f519e4\"\ndependencies = [\n \"bitflags 2.6.0\",\n \"cfg-if\",\n \"cfg_aliases 0.1.1\",\n \"libc\",\n]\n\n[[package]]\nname = \"nom\"\nversion = \"7.1.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d273983c5a657a70a3e8f2a01329822f3b8c8172b73826411a55751e404a0a4a\"\ndependencies = [\n \"memchr\",\n \"minimal-lexical\",\n]\n\n[[package]]\nname = \"nu-ansi-term\"\nversion = \"0.46.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"77a8165726e8236064dbb45459242600304b42a5ea24ee2948e18e023bf7ba84\"\ndependencies = [\n \"overload\",\n \"winapi\",\n]\n\n[[package]]\nname = \"num-conv\"\nversion = \"0.1.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"51d515d32fb182ee37cda2ccdcb92950d6a3c2893aa280e540671c2cd0f3b1d9\"\n\n[[package]]\nname = \"num-traits\"\nversion = \"0.2.19\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"071dfc062690e90b734c0b2273ce72ad0ffa95f0c74596bc250dcfd960262841\"\ndependencies = [\n \"autocfg\",\n]\n\n[[package]]\nname = \"num_threads\"\nversion = \"0.1.7\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"5c7398b9c8b70908f6371f47ed36737907c87c52af34c268fed0bf0ceb92ead9\"\ndependencies = [\n \"libc\",\n]\n\n[[package]]\nname = \"number_prefix\"\nversion = \"0.4.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"830b246a0e5f20af87141b25c173cd1b609bd7779a4617d6ec582abaf90870f3\"\n\n[[package]]\nname = \"nusb\"\nversion = \"0.1.12\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e4e1996397b9a2af6390bb9ef0386c429de1a81da246fa7ae31dc922be4b670b\"\ndependencies = [\n \"atomic-waker\",\n \"core-foundation 0.9.4\",\n \"core-foundation-sys\",\n \"futures-core\",\n \"io-kit-sys\",\n \"libc\",\n \"log\",\n \"once_cell\",\n \"rustix\",\n \"slab\",\n \"windows-sys 0.48.0\",\n]\n\n[[package]]\nname = \"object\"\nversion = \"0.35.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b8ec7ab813848ba4522158d5517a6093db1ded27575b070f4177b8d12b41db5e\"\ndependencies = [\n \"memchr\",\n]\n\n[[package]]\nname = \"object\"\nversion = \"0.36.7\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"62948e14d923ea95ea2c7c86c71013138b66525b86bdc08d2dcc262bdb497b87\"\ndependencies = [\n \"flate2\",\n \"memchr\",\n \"ruzstd\",\n]\n\n[[package]]\nname = \"once_cell\"\nversion = \"1.20.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1261fe7e33c73b354eab43b1273a57c8f967d0391e80353e51f764ac02cf6775\"\n\n[[package]]\nname = \"openssl-probe\"\nversion = \"0.1.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ff011a302c396a5197692431fc1948019154afc178baf7d8e37367442a4601cf\"\n\n[[package]]\nname = \"option-ext\"\nversion = \"0.2.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"04744f49eae99ab78e0d5c0b603ab218f515ea8cfe5a456d7629ad883a3b6e7d\"\n\n[[package]]\nname = \"overload\"\nversion = \"0.1.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b15813163c1d831bf4a13c3610c05c0d03b39feb07f7e09fa234dac9b15aaf39\"\n\n[[package]]\nname = \"owo-colors\"\nversion = \"4.1.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"fb37767f6569cd834a413442455e0f066d0d522de8630436e2a1761d9726ba56\"\n\n[[package]]\nname = \"parking\"\nversion = \"2.2.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f38d5652c16fde515bb1ecef450ab0f6a219d619a7274976324d5e377f7dceba\"\n\n[[package]]\nname = \"parking_lot\"\nversion = \"0.12.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f1bf18183cf54e8d6059647fc3063646a1801cf30896933ec2311622cc4b9a27\"\ndependencies = [\n \"lock_api\",\n \"parking_lot_core\",\n]\n\n[[package]]\nname = \"parking_lot_core\"\nversion = \"0.9.10\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1e401f977ab385c9e4e3ab30627d6f26d00e2c73eef317493c4ec6d468726cf8\"\ndependencies = [\n \"cfg-if\",\n \"libc\",\n \"redox_syscall\",\n \"smallvec\",\n \"windows-targets 0.52.6\",\n]\n\n[[package]]\nname = \"parse_int\"\nversion = \"0.6.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"2d695b79916a2c08bcff7be7647ab60d1402885265005a6658ffe6d763553c5a\"\ndependencies = [\n \"num-traits\",\n]\n\n[[package]]\nname = \"paste\"\nversion = \"1.0.15\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"57c0d7b74b563b49d38dae00a0c37d4d6de9b432382b2892f0574ddcae73fd0a\"\n\n[[package]]\nname = \"pear\"\nversion = \"0.2.9\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"bdeeaa00ce488657faba8ebf44ab9361f9365a97bd39ffb8a60663f57ff4b467\"\ndependencies = [\n \"inlinable_string\",\n \"pear_codegen\",\n \"yansi\",\n]\n\n[[package]]\nname = \"pear_codegen\"\nversion = \"0.2.9\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"4bab5b985dc082b345f812b7df84e1bef27e7207b39e448439ba8bd69c93f147\"\ndependencies = [\n \"proc-macro2\",\n \"proc-macro2-diagnostics\",\n \"quote\",\n \"syn 2.0.89\",\n]\n\n[[package]]\nname = \"percent-encoding\"\nversion = \"2.3.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e3148f5046208a5d56bcfc03053e3ca6334e51da8dfb19b6cdc8b306fae3283e\"\n\n[[package]]\nname = \"pin-project-lite\"\nversion = \"0.2.15\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"915a1e146535de9163f3987b8944ed8cf49a18bb0056bcebcdcece385cece4ff\"\n\n[[package]]\nname = \"pin-utils\"\nversion = \"0.1.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8b870d8c151b6f2fb93e84a13146138f05d02ed11c7e7c54f8826aaaf7c9f184\"\n\n[[package]]\nname = \"pkg-config\"\nversion = \"0.3.31\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"953ec861398dccce10c670dfeaf3ec4911ca479e9c02154b3a215178c5f566f2\"\n\n[[package]]\nname = \"plain\"\nversion = \"0.2.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b4596b6d070b27117e987119b4dac604f3c58cfb0b191112e24771b2faeac1a6\"\n\n[[package]]\nname = \"polling\"\nversion = \"3.7.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a604568c3202727d1507653cb121dbd627a58684eb09a820fd746bee38b4442f\"\ndependencies = [\n \"cfg-if\",\n \"concurrent-queue\",\n \"hermit-abi 0.4.0\",\n \"pin-project-lite\",\n \"rustix\",\n \"tracing\",\n \"windows-sys 0.59.0\",\n]\n\n[[package]]\nname = \"portable-atomic\"\nversion = \"1.9.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"cc9c68a3f6da06753e9335d63e27f6b9754dd1920d941135b7ea8224f141adb2\"\n\n[[package]]\nname = \"powerfmt\"\nversion = \"0.2.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"439ee305def115ba05938db6eb1644ff94165c5ab5e9420d1c1bcedbba909391\"\n\n[[package]]\nname = \"ppv-lite86\"\nversion = \"0.2.20\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"77957b295656769bb8ad2b6a6b09d897d94f05c41b069aede1fcdaa675eaea04\"\ndependencies = [\n \"zerocopy 0.7.35\",\n]\n\n[[package]]\nname = \"pretty_assertions\"\nversion = \"1.4.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3ae130e2f271fbc2ac3a40fb1d07180839cdbbe443c7a27e1e3c13c5cac0116d\"\ndependencies = [\n \"diff\",\n \"yansi\",\n]\n\n[[package]]\nname = \"pretty_env_logger\"\nversion = \"0.5.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"865724d4dbe39d9f3dd3b52b88d859d66bcb2d6a0acfd5ea68a65fb66d4bdc1c\"\ndependencies = [\n \"env_logger 0.10.2\",\n \"log\",\n]\n\n[[package]]\nname = \"probe-rs\"\nversion = \"0.25.0\"\ndependencies = [\n \"anyhow\",\n \"async-io\",\n \"bincode\",\n \"bitfield\",\n \"bitvec\",\n \"clap\",\n \"docsplay\",\n \"dunce\",\n \"espflash\",\n \"fastrand\",\n \"flate2\",\n \"futures-lite\",\n \"gdbstub\",\n \"hexdump\",\n \"hidapi\",\n \"ihex\",\n \"insta\",\n \"itertools 0.14.0\",\n \"itm\",\n \"jep106\",\n \"nusb\",\n \"object 0.36.7\",\n \"parking_lot\",\n \"pretty_assertions\",\n \"pretty_env_logger\",\n \"probe-rs-target\",\n \"rmp-serde\",\n \"scroll\",\n \"serde\",\n \"serde_json\",\n \"serde_yaml\",\n \"serialport\",\n \"svg\",\n \"termtree\",\n \"test-case\",\n \"test-log\",\n \"thiserror 1.0.69\",\n \"tracing\",\n \"uf2-decode\",\n \"zerocopy 0.8.14\",\n]\n\n[[package]]\nname = \"probe-rs-debug\"\nversion = \"0.25.0\"\ndependencies = [\n \"bitfield\",\n \"gimli 0.31.1\",\n \"insta\",\n \"itertools 0.14.0\",\n \"object 0.36.7\",\n \"parse_int\",\n \"pretty_assertions\",\n \"probe-rs\",\n \"probe-rs-target\",\n \"serde\",\n \"termtree\",\n \"test-case\",\n \"thiserror 1.0.69\",\n \"tracing\",\n \"typed-path\",\n]\n\n[[package]]\nname = \"probe-rs-mi\"\nversion = \"0.1.0\"\ndependencies = [\n \"semver\",\n \"serde\",\n]\n\n[[package]]\nname = \"probe-rs-target\"\nversion = \"0.25.0\"\ndependencies = [\n \"base64\",\n \"indexmap\",\n \"jep106\",\n \"serde\",\n \"serde_with\",\n \"url\",\n]\n\n[[package]]\nname = \"probe-rs-tools\"\nversion = \"0.25.0\"\ndependencies = [\n \"addr2line\",\n \"ansi-parser\",\n \"anyhow\",\n \"base64\",\n \"bytesize\",\n \"capstone\",\n \"cargo-config2\",\n \"cargo_metadata\",\n \"clap\",\n \"clap_complete\",\n \"colored\",\n \"defmt-decoder\",\n \"directories\",\n \"docsplay\",\n \"dunce\",\n \"fastrand\",\n \"figment\",\n \"git-version\",\n \"goblin\",\n \"indicatif\",\n \"insta\",\n \"itertools 0.14.0\",\n \"itm\",\n \"jep106\",\n \"libtest-mimic\",\n \"num-traits\",\n \"parking_lot\",\n \"parse_int\",\n \"pretty_assertions\",\n \"probe-rs\",\n \"probe-rs-debug\",\n \"probe-rs-mi\",\n \"ratatui\",\n \"regex\",\n \"rustyline\",\n \"sanitize-filename\",\n \"schemafy\",\n \"scroll\",\n \"serde\",\n \"serde_json\",\n \"signal-hook\",\n \"svd-parser\",\n \"termtree\",\n \"test-case\",\n \"textwrap\",\n \"thiserror 1.0.69\",\n \"time\",\n \"tracing\",\n \"tracing-appender\",\n \"tracing-subscriber\",\n \"typed-path\",\n \"urlencoding\",\n \"zip\",\n]\n\n[[package]]\nname = \"proc-macro-crate\"\nversion = \"1.3.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"7f4c021e1093a56626774e81216a4ce732a735e5bad4868a03f3ed65ca0c3919\"\ndependencies = [\n \"once_cell\",\n \"toml_edit 0.19.15\",\n]\n\n[[package]]\nname = \"proc-macro2\"\nversion = \"1.0.92\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"37d3544b3f2748c54e147655edb5025752e2303145b5aefb3c3ea2c78b973bb0\"\ndependencies = [\n \"unicode-ident\",\n]\n\n[[package]]\nname = \"proc-macro2-diagnostics\"\nversion = \"0.10.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"af066a9c399a26e020ada66a034357a868728e72cd426f3adcd35f80d88d88c8\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.89\",\n \"version_check\",\n \"yansi\",\n]\n\n[[package]]\nname = \"quick-xml\"\nversion = \"0.17.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"fe1e430bdcf30c9fdc25053b9c459bb1a4672af4617b6c783d7d91dc17c6bbb0\"\ndependencies = [\n \"memchr\",\n]\n\n[[package]]\nname = \"quinn\"\nversion = \"0.11.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"62e96808277ec6f97351a2380e6c25114bc9e67037775464979f3037c92d05ef\"\ndependencies = [\n \"bytes\",\n \"pin-project-lite\",\n \"quinn-proto\",\n \"quinn-udp\",\n \"rustc-hash\",\n \"rustls\",\n \"socket2\",\n \"thiserror 2.0.3\",\n \"tokio\",\n \"tracing\",\n]\n\n[[package]]\nname = \"quinn-proto\"\nversion = \"0.11.9\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a2fe5ef3495d7d2e377ff17b1a8ce2ee2ec2a18cde8b6ad6619d65d0701c135d\"\ndependencies = [\n \"bytes\",\n \"getrandom\",\n \"rand\",\n \"ring\",\n \"rustc-hash\",\n \"rustls\",\n \"rustls-pki-types\",\n \"slab\",\n \"thiserror 2.0.3\",\n \"tinyvec\",\n \"tracing\",\n \"web-time\",\n]\n\n[[package]]\nname = \"quinn-udp\"\nversion = \"0.5.7\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"7d5a626c6807713b15cac82a6acaccd6043c9a5408c24baae07611fec3f243da\"\ndependencies = [\n \"cfg_aliases 0.2.1\",\n \"libc\",\n \"once_cell\",\n \"socket2\",\n \"tracing\",\n \"windows-sys 0.59.0\",\n]\n\n[[package]]\nname = \"quote\"\nversion = \"1.0.37\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b5b9d34b8991d19d98081b46eacdd8eb58c6f2b201139f7c5f643cc155a633af\"\ndependencies = [\n \"proc-macro2\",\n]\n\n[[package]]\nname = \"radium\"\nversion = \"0.7.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"dc33ff2d4973d518d823d61aa239014831e521c75da58e3df4840d3f47749d09\"\n\n[[package]]\nname = \"rand\"\nversion = \"0.8.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"34af8d1a0e25924bc5b7c43c079c942339d8f0a8b57c39049bef581b46327404\"\ndependencies = [\n \"libc\",\n \"rand_chacha\",\n \"rand_core\",\n]\n\n[[package]]\nname = \"rand_chacha\"\nversion = \"0.3.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e6c10a63a0fa32252be49d21e7709d4d4baf8d231c2dbce1eaa8141b9b127d88\"\ndependencies = [\n \"ppv-lite86\",\n \"rand_core\",\n]\n\n[[package]]\nname = \"rand_core\"\nversion = \"0.6.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ec0be4795e2f6a28069bec0b5ff3e2ac9bafc99e6a9a7dc3547996c5c816922c\"\ndependencies = [\n \"getrandom\",\n]\n\n[[package]]\nname = \"ratatui\"\nversion = \"0.29.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"eabd94c2f37801c20583fc49dd5cd6b0ba68c716787c2dd6ed18571e1e63117b\"\ndependencies = [\n \"bitflags 2.6.0\",\n \"cassowary\",\n \"compact_str\",\n \"crossterm\",\n \"indoc\",\n \"instability\",\n \"itertools 0.13.0\",\n \"lru\",\n \"paste\",\n \"strum\",\n \"unicode-segmentation\",\n \"unicode-truncate\",\n \"unicode-width 0.2.0\",\n]\n\n[[package]]\nname = \"redox_syscall\"\nversion = \"0.5.7\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"9b6dfecf2c74bce2466cabf93f6664d6998a69eb21e39f4207930065b27b771f\"\ndependencies = [\n \"bitflags 2.6.0\",\n]\n\n[[package]]\nname = \"redox_users\"\nversion = \"0.4.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ba009ff324d1fc1b900bd1fdb31564febe58a8ccc8a6fdbb93b543d33b13ca43\"\ndependencies = [\n \"getrandom\",\n \"libredox\",\n \"thiserror 1.0.69\",\n]\n\n[[package]]\nname = \"regex\"\nversion = \"1.11.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b544ef1b4eac5dc2db33ea63606ae9ffcfac26c1416a2806ae0bf5f56b201191\"\ndependencies = [\n \"aho-corasick\",\n \"memchr\",\n \"regex-automata 0.4.9\",\n \"regex-syntax 0.8.5\",\n]\n\n[[package]]\nname = \"regex-automata\"\nversion = \"0.1.10\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"6c230d73fb8d8c1b9c0b3135c5142a8acee3a0558fb8db5cf1cb65f8d7862132\"\ndependencies = [\n \"regex-syntax 0.6.29\",\n]\n\n[[package]]\nname = \"regex-automata\"\nversion = \"0.4.9\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"809e8dc61f6de73b46c85f4c96486310fe304c434cfa43669d7b40f711150908\"\ndependencies = [\n \"aho-corasick\",\n \"memchr\",\n \"regex-syntax 0.8.5\",\n]\n\n[[package]]\nname = \"regex-syntax\"\nversion = \"0.6.29\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f162c6dd7b008981e4d40210aca20b4bd0f9b60ca9271061b07f78537722f2e1\"\n\n[[package]]\nname = \"regex-syntax\"\nversion = \"0.8.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"2b15c43186be67a4fd63bee50d0303afffcef381492ebe2c5d87f324e1b8815c\"\n\n[[package]]\nname = \"reqwest\"\nversion = \"0.12.12\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"43e734407157c3c2034e0258f5e4473ddb361b1e85f95a66690d67264d7cd1da\"\ndependencies = [\n \"base64\",\n \"bytes\",\n \"futures-core\",\n \"futures-util\",\n \"http\",\n \"http-body\",\n \"http-body-util\",\n \"hyper\",\n \"hyper-rustls\",\n \"hyper-util\",\n \"ipnet\",\n \"js-sys\",\n \"log\",\n \"mime\",\n \"once_cell\",\n \"percent-encoding\",\n \"pin-project-lite\",\n \"quinn\",\n \"rustls\",\n \"rustls-native-certs\",\n \"rustls-pemfile\",\n \"rustls-pki-types\",\n \"serde\",\n \"serde_json\",\n \"serde_urlencoded\",\n \"sync_wrapper\",\n \"tokio\",\n \"tokio-rustls\",\n \"tokio-util\",\n \"tower\",\n \"tower-service\",\n \"url\",\n \"wasm-bindgen\",\n \"wasm-bindgen-futures\",\n \"wasm-streams\",\n \"web-sys\",\n \"webpki-roots\",\n \"windows-registry\",\n]\n\n[[package]]\nname = \"ring\"\nversion = \"0.17.8\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"c17fa4cb658e3583423e915b9f3acc01cceaee1860e33d59ebae66adc3a2dc0d\"\ndependencies = [\n \"cc\",\n \"cfg-if\",\n \"getrandom\",\n \"libc\",\n \"spin\",\n \"untrusted\",\n \"windows-sys 0.52.0\",\n]\n\n[[package]]\nname = \"rmp\"\nversion = \"0.8.14\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"228ed7c16fa39782c3b3468e974aec2795e9089153cd08ee2e9aefb3613334c4\"\ndependencies = [\n \"byteorder\",\n \"num-traits\",\n \"paste\",\n]\n\n[[package]]\nname = \"rmp-serde\"\nversion = \"1.3.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"52e599a477cf9840e92f2cde9a7189e67b42c57532749bf90aea6ec10facd4db\"\ndependencies = [\n \"byteorder\",\n \"rmp\",\n \"serde\",\n]\n\n[[package]]\nname = \"roxmltree\"\nversion = \"0.20.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"6c20b6793b5c2fa6553b250154b78d6d0db37e72700ae35fad9387a46f487c97\"\n\n[[package]]\nname = \"rtthost\"\nversion = \"0.25.0\"\ndependencies = [\n \"anyhow\",\n \"clap\",\n \"pretty_env_logger\",\n \"probe-rs\",\n]\n\n[[package]]\nname = \"rustc-demangle\"\nversion = \"0.1.24\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"719b953e2095829ee67db738b3bfa9fa368c94900df327b3f07fe6e794d2fe1f\"\n\n[[package]]\nname = \"rustc-hash\"\nversion = \"2.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"583034fd73374156e66797ed8e5b0d5690409c9226b22d87cb7f19821c05d152\"\n\n[[package]]\nname = \"rustix\"\nversion = \"0.38.41\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d7f649912bc1495e167a6edee79151c84b1bad49748cb4f1f1167f459f6224f6\"\ndependencies = [\n \"bitflags 2.6.0\",\n \"errno\",\n \"libc\",\n \"linux-raw-sys\",\n \"windows-sys 0.52.0\",\n]\n\n[[package]]\nname = \"rustls\"\nversion = \"0.23.18\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"9c9cc1d47e243d655ace55ed38201c19ae02c148ae56412ab8750e8f0166ab7f\"\ndependencies = [\n \"once_cell\",\n \"ring\",\n \"rustls-pki-types\",\n \"rustls-webpki\",\n \"subtle\",\n \"zeroize\",\n]\n\n[[package]]\nname = \"rustls-native-certs\"\nversion = \"0.8.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"7fcff2dd52b58a8d98a70243663a0d234c4e2b79235637849d15913394a247d3\"\ndependencies = [\n \"openssl-probe\",\n \"rustls-pki-types\",\n \"schannel\",\n \"security-framework\",\n]\n\n[[package]]\nname = \"rustls-pemfile\"\nversion = \"2.2.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"dce314e5fee3f39953d46bb63bb8a46d40c2f8fb7cc5a3b6cab2bde9721d6e50\"\ndependencies = [\n \"rustls-pki-types\",\n]\n\n[[package]]\nname = \"rustls-pki-types\"\nversion = \"1.10.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"16f1201b3c9a7ee8039bcadc17b7e605e2945b27eee7631788c1bd2b0643674b\"\ndependencies = [\n \"web-time\",\n]\n\n[[package]]\nname = \"rustls-webpki\"\nversion = \"0.102.8\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"64ca1bc8749bd4cf37b5ce386cc146580777b4e8572c7b97baf22c83f444bee9\"\ndependencies = [\n \"ring\",\n \"rustls-pki-types\",\n \"untrusted\",\n]\n\n[[package]]\nname = \"rustversion\"\nversion = \"1.0.18\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"0e819f2bc632f285be6d7cd36e25940d45b2391dd6d9b939e79de557f7014248\"\n\n[[package]]\nname = \"rustyline\"\nversion = \"14.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"7803e8936da37efd9b6d4478277f4b2b9bb5cdb37a113e8d63222e58da647e63\"\ndependencies = [\n \"bitflags 2.6.0\",\n \"cfg-if\",\n \"clipboard-win\",\n \"fd-lock\",\n \"home\",\n \"libc\",\n \"log\",\n \"memchr\",\n \"nix 0.28.0\",\n \"unicode-segmentation\",\n \"unicode-width 0.1.14\",\n \"utf8parse\",\n \"windows-sys 0.52.0\",\n]\n\n[[package]]\nname = \"ruzstd\"\nversion = \"0.7.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"fad02996bfc73da3e301efe90b1837be9ed8f4a462b6ed410aa35d00381de89f\"\ndependencies = [\n \"twox-hash\",\n]\n\n[[package]]\nname = \"ryu\"\nversion = \"1.0.18\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f3cb5ba0dc43242ce17de99c180e96db90b235b8a9fdc9543c96d2209116bd9f\"\n\n[[package]]\nname = \"sanitize-filename\"\nversion = \"0.6.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"bc984f4f9ceb736a7bb755c3e3bd17dc56370af2600c9780dcc48c66453da34d\"\ndependencies = [\n \"regex\",\n]\n\n[[package]]\nname = \"schannel\"\nversion = \"0.1.27\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1f29ebaa345f945cec9fbbc532eb307f0fdad8161f281b6369539c8d84876b3d\"\ndependencies = [\n \"windows-sys 0.59.0\",\n]\n\n[[package]]\nname = \"schemafy\"\nversion = \"0.6.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"9725c16a64e85972fcb3630677be83fef699a1cd8e4bfbdcf3b3c6675f838a19\"\ndependencies = [\n \"Inflector\",\n \"schemafy_core\",\n \"schemafy_lib\",\n \"serde\",\n \"serde_derive\",\n \"serde_json\",\n \"serde_repr\",\n \"syn 1.0.109\",\n]\n\n[[package]]\nname = \"schemafy_core\"\nversion = \"0.6.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"2bec29dddcfe60f92f3c0d422707b8b56473983ef0481df8d5236ed3ab8fdf24\"\ndependencies = [\n \"serde\",\n \"serde_json\",\n]\n\n[[package]]\nname = \"schemafy_lib\"\nversion = \"0.6.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"af3d87f1df246a9b7e2bfd1f4ee5f88e48b11ef9cfc62e63f0dead255b1a6f5f\"\ndependencies = [\n \"Inflector\",\n \"proc-macro2\",\n \"quote\",\n \"schemafy_core\",\n \"serde\",\n \"serde_derive\",\n \"serde_json\",\n \"syn 1.0.109\",\n \"uriparse\",\n]\n\n[[package]]\nname = \"scopeguard\"\nversion = \"1.2.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"94143f37725109f92c262ed2cf5e59bce7498c01bcc1502d7b9afe439a4e9f49\"\n\n[[package]]\nname = \"scroll\"\nversion = \"0.12.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"6ab8598aa408498679922eff7fa985c25d58a90771bd6be794434c5277eab1a6\"\ndependencies = [\n \"scroll_derive\",\n]\n\n[[package]]\nname = \"scroll_derive\"\nversion = \"0.12.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"7f81c2fde025af7e69b1d1420531c8a8811ca898919db177141a85313b1cb932\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.89\",\n]\n\n[[package]]\nname = \"security-framework\"\nversion = \"3.0.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e1415a607e92bec364ea2cf9264646dcce0f91e6d65281bd6f2819cca3bf39c8\"\ndependencies = [\n \"bitflags 2.6.0\",\n \"core-foundation 0.10.0\",\n \"core-foundation-sys\",\n \"libc\",\n \"security-framework-sys\",\n]\n\n[[package]]\nname = \"security-framework-sys\"\nversion = \"2.12.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"fa39c7303dc58b5543c94d22c1766b0d31f2ee58306363ea622b10bbc075eaa2\"\ndependencies = [\n \"core-foundation-sys\",\n \"libc\",\n]\n\n[[package]]\nname = \"semver\"\nversion = \"1.0.24\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3cb6eb87a131f756572d7fb904f6e7b68633f09cca868c5df1c4b8d1a694bbba\"\ndependencies = [\n \"serde\",\n]\n\n[[package]]\nname = \"serde\"\nversion = \"1.0.217\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"02fc4265df13d6fa1d00ecff087228cc0a2b5f3c0e87e258d8b94a156e984c70\"\ndependencies = [\n \"serde_derive\",\n]\n\n[[package]]\nname = \"serde_derive\"\nversion = \"1.0.217\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"5a9bf7cf98d04a2b28aead066b7496853d4779c9cc183c440dbac457641e19a0\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.89\",\n]\n\n[[package]]\nname = \"serde_json\"\nversion = \"1.0.135\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"2b0d7ba2887406110130a978386c4e1befb98c674b4fba677954e4db976630d9\"\ndependencies = [\n \"itoa\",\n \"memchr\",\n \"ryu\",\n \"serde\",\n]\n\n[[package]]\nname = \"serde_plain\"\nversion = \"1.0.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"9ce1fc6db65a611022b23a0dec6975d63fb80a302cb3388835ff02c097258d50\"\ndependencies = [\n \"serde\",\n]\n\n[[package]]\nname = \"serde_repr\"\nversion = \"0.1.19\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"6c64451ba24fc7a6a2d60fc75dd9c83c90903b19028d4eff35e88fc1e86564e9\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.89\",\n]\n\n[[package]]\nname = \"serde_spanned\"\nversion = \"0.6.8\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"87607cb1398ed59d48732e575a4c28a7a8ebf2454b964fe3f224f2afc07909e1\"\ndependencies = [\n \"serde\",\n]\n\n[[package]]\nname = \"serde_urlencoded\"\nversion = \"0.7.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d3491c14715ca2294c4d6a88f15e84739788c1d030eed8c110436aafdaa2f3fd\"\ndependencies = [\n \"form_urlencoded\",\n \"itoa\",\n \"ryu\",\n \"serde\",\n]\n\n[[package]]\nname = \"serde_with\"\nversion = \"3.12.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d6b6f7f2fcb69f747921f79f3926bd1e203fce4fef62c268dd3abfb6d86029aa\"\ndependencies = [\n \"base64\",\n \"chrono\",\n \"hex\",\n \"indexmap\",\n \"serde\",\n \"serde_derive\",\n \"serde_json\",\n \"time\",\n]\n\n[[package]]\nname = \"serde_yaml\"\nversion = \"0.9.34+deprecated\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"6a8b1a1a2ebf674015cc02edccce75287f1a0130d394307b36743c2f5d504b47\"\ndependencies = [\n \"indexmap\",\n \"itoa\",\n \"ryu\",\n \"serde\",\n \"unsafe-libyaml\",\n]\n\n[[package]]\nname = \"serialport\"\nversion = \"4.6.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"779e2977f0cc2ff39708fef48f96f3768ac8ddd8c6caaaab82e83bd240ef99b2\"\ndependencies = [\n \"bitflags 2.6.0\",\n \"cfg-if\",\n \"core-foundation 0.10.0\",\n \"core-foundation-sys\",\n \"io-kit-sys\",\n \"mach2\",\n \"nix 0.26.4\",\n \"scopeguard\",\n \"unescaper\",\n \"winapi\",\n]\n\n[[package]]\nname = \"sha2\"\nversion = \"0.10.8\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"793db75ad2bcafc3ffa7c68b215fee268f537982cd901d132f89c6343f3a3dc8\"\ndependencies = [\n \"cfg-if\",\n \"cpufeatures\",\n \"digest\",\n]\n\n[[package]]\nname = \"sharded-slab\"\nversion = \"0.1.7\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f40ca3c46823713e0d4209592e8d6e826aa57e928f09752619fc696c499637f6\"\ndependencies = [\n \"lazy_static\",\n]\n\n[[package]]\nname = \"shlex\"\nversion = \"1.3.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"0fda2ff0d084019ba4d7c6f371c95d8fd75ce3524c3cb8fb653a3023f6323e64\"\n\n[[package]]\nname = \"signal-hook\"\nversion = \"0.3.17\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8621587d4798caf8eb44879d42e56b9a93ea5dcd315a6487c357130095b62801\"\ndependencies = [\n \"libc\",\n \"signal-hook-registry\",\n]\n\n[[package]]\nname = \"signal-hook-mio\"\nversion = \"0.2.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"34db1a06d485c9142248b7a054f034b349b212551f3dfd19c94d45a754a217cd\"\ndependencies = [\n \"libc\",\n \"mio\",\n \"signal-hook\",\n]\n\n[[package]]\nname = \"signal-hook-registry\"\nversion = \"1.4.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a9e9e0b4211b72e7b8b6e85c807d36c212bdb33ea8587f7569562a84df5465b1\"\ndependencies = [\n \"libc\",\n]\n\n[[package]]\nname = \"simd-adler32\"\nversion = \"0.3.7\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d66dc143e6b11c1eddc06d5c423cfc97062865baf299914ab64caa38182078fe\"\n\n[[package]]\nname = \"similar\"\nversion = \"2.6.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1de1d4f81173b03af4c0cbed3c898f6bff5b870e4a7f5d6f4057d62a7a4b686e\"\n\n[[package]]\nname = \"slab\"\nversion = \"0.4.9\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8f92a496fb766b417c996b9c5e57daf2f7ad3b0bebe1ccfca4856390e3d3bb67\"\ndependencies = [\n \"autocfg\",\n]\n\n[[package]]\nname = \"smallvec\"\nversion = \"1.13.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3c5e1a9a646d36c3599cd173a41282daf47c44583ad367b8e6837255952e5c67\"\n\n[[package]]\nname = \"smoke_tester\"\nversion = \"0.25.0\"\ndependencies = [\n \"clap\",\n \"colored\",\n \"linkme\",\n \"log\",\n \"miette\",\n \"pretty_env_logger\",\n \"probe-rs\",\n \"serde\",\n \"thiserror 1.0.69\",\n \"toml\",\n]\n\n[[package]]\nname = \"socket2\"\nversion = \"0.5.7\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ce305eb0b4296696835b71df73eb912e0f1ffd2556a501fcede6e0c50349191c\"\ndependencies = [\n \"libc\",\n \"windows-sys 0.52.0\",\n]\n\n[[package]]\nname = \"spin\"\nversion = \"0.9.8\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"6980e8d7511241f8acf4aebddbb1ff938df5eebe98691418c4468d0b72a96a67\"\n\n[[package]]\nname = \"stable_deref_trait\"\nversion = \"1.2.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a8f112729512f8e442d81f95a8a7ddf2b7c6b8a1a6f509a95864142b30cab2d3\"\n\n[[package]]\nname = \"static_assertions\"\nversion = \"1.1.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a2eb9349b6444b326872e140eb1cf5e7c522154d69e7a0ffb0fb81c06b37543f\"\n\n[[package]]\nname = \"strsim\"\nversion = \"0.10.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"73473c0e59e6d5812c5dfe2a064a6444949f089e20eec9a2e5506596494e4623\"\n\n[[package]]\nname = \"strsim\"\nversion = \"0.11.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"7da8b5736845d9f2fcb837ea5d9e2628564b3b043a70948a3f0b778838c5fb4f\"\n\n[[package]]\nname = \"strum\"\nversion = \"0.26.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8fec0f0aef304996cf250b31b5a10dee7980c85da9d759361292b8bca5a18f06\"\ndependencies = [\n \"strum_macros\",\n]\n\n[[package]]\nname = \"strum_macros\"\nversion = \"0.26.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"4c6bee85a5a24955dc440386795aa378cd9cf82acd5f764469152d2270e581be\"\ndependencies = [\n \"heck\",\n \"proc-macro2\",\n \"quote\",\n \"rustversion\",\n \"syn 2.0.89\",\n]\n\n[[package]]\nname = \"subtle\"\nversion = \"2.6.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"13c2bddecc57b384dee18652358fb23172facb8a2c51ccc10d74c157bdea3292\"\n\n[[package]]\nname = \"supports-color\"\nversion = \"3.0.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8775305acf21c96926c900ad056abeef436701108518cf890020387236ac5a77\"\ndependencies = [\n \"is_ci\",\n]\n\n[[package]]\nname = \"supports-hyperlinks\"\nversion = \"3.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"2c0a1e5168041f5f3ff68ff7d95dcb9c8749df29f6e7e89ada40dd4c9de404ee\"\n\n[[package]]\nname = \"supports-unicode\"\nversion = \"3.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b7401a30af6cb5818bb64852270bb722533397edcfc7344954a38f420819ece2\"\n\n[[package]]\nname = \"svd-parser\"\nversion = \"0.14.7\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"39ba83b8a290ee3a180051e10a043691bb91d1b6be2053a570936fbdbec5ee2b\"\ndependencies = [\n \"anyhow\",\n \"roxmltree\",\n \"svd-rs\",\n \"thiserror 1.0.69\",\n]\n\n[[package]]\nname = \"svd-rs\"\nversion = \"0.14.9\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3e49a90f3c4d03d81687e81d41b00f349fd44ccf9c26e0185ee926968de093bb\"\ndependencies = [\n \"once_cell\",\n \"regex\",\n \"thiserror 1.0.69\",\n]\n\n[[package]]\nname = \"svg\"\nversion = \"0.18.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"94afda9cd163c04f6bee8b4bf2501c91548deae308373c436f36aeff3cf3c4a3\"\n\n[[package]]\nname = \"syn\"\nversion = \"1.0.109\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"72b64191b275b66ffe2469e8af2c1cfe3bafa67b529ead792a6d0160888b4237\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"unicode-ident\",\n]\n\n[[package]]\nname = \"syn\"\nversion = \"2.0.89\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"44d46482f1c1c87acd84dea20c1bf5ebff4c757009ed6bf19cfd36fb10e92c4e\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"unicode-ident\",\n]\n\n[[package]]\nname = \"sync_wrapper\"\nversion = \"1.0.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"0bf256ce5efdfa370213c1dabab5935a12e49f2c58d15e9eac2870d3b4f27263\"\ndependencies = [\n \"futures-core\",\n]\n\n[[package]]\nname = \"synstructure\"\nversion = \"0.13.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"c8af7666ab7b6390ab78131fb5b0fce11d6b7a6951602017c35fa82800708971\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.89\",\n]\n\n[[package]]\nname = \"tap\"\nversion = \"1.0.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"55937e1799185b12863d447f42597ed69d9928686b8d88a1df17376a097d8369\"\n\n[[package]]\nname = \"target-gen\"\nversion = \"0.25.0\"\ndependencies = [\n \"anyhow\",\n \"clap\",\n \"cmsis-pack\",\n \"colored\",\n \"futures\",\n \"goblin\",\n \"insta\",\n \"jep106\",\n \"log\",\n \"parse_int\",\n \"probe-rs\",\n \"probe-rs-target\",\n \"reqwest\",\n \"scroll\",\n \"serde_yaml\",\n \"tempfile\",\n \"tokio\",\n \"tracing-subscriber\",\n \"xshell\",\n \"zip\",\n]\n\n[[package]]\nname = \"tempfile\"\nversion = \"3.15.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"9a8a559c81686f576e8cd0290cd2a24a2a9ad80c98b3478856500fcbd7acd704\"\ndependencies = [\n \"cfg-if\",\n \"fastrand\",\n \"getrandom\",\n \"once_cell\",\n \"rustix\",\n \"windows-sys 0.59.0\",\n]\n\n[[package]]\nname = \"termcolor\"\nversion = \"1.4.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"06794f8f6c5c898b3275aebefa6b8a1cb24cd2c6c79397ab15774837a0bc5755\"\ndependencies = [\n \"winapi-util\",\n]\n\n[[package]]\nname = \"terminal_size\"\nversion = \"0.4.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"5352447f921fda68cf61b4101566c0bdb5104eff6804d0678e5227580ab6a4e9\"\ndependencies = [\n \"rustix\",\n \"windows-sys 0.59.0\",\n]\n\n[[package]]\nname = \"termtree\"\nversion = \"0.5.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8f50febec83f5ee1df3015341d8bd429f2d1cc62bcba7ea2076759d315084683\"\n\n[[package]]\nname = \"test-case\"\nversion = \"3.3.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"eb2550dd13afcd286853192af8601920d959b14c401fcece38071d53bf0768a8\"\ndependencies = [\n \"test-case-macros\",\n]\n\n[[package]]\nname = \"test-case-core\"\nversion = \"3.3.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"adcb7fd841cd518e279be3d5a3eb0636409487998a4aff22f3de87b81e88384f\"\ndependencies = [\n \"cfg-if\",\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.89\",\n]\n\n[[package]]\nname = \"test-case-macros\"\nversion = \"3.3.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"5c89e72a01ed4c579669add59014b9a524d609c0c88c6a585ce37485879f6ffb\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.89\",\n \"test-case-core\",\n]\n\n[[package]]\nname = \"test-log\"\nversion = \"0.2.16\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3dffced63c2b5c7be278154d76b479f9f9920ed34e7574201407f0b14e2bbb93\"\ndependencies = [\n \"env_logger 0.11.5\",\n \"test-log-macros\",\n \"tracing-subscriber\",\n]\n\n[[package]]\nname = \"test-log-macros\"\nversion = \"0.2.16\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"5999e24eaa32083191ba4e425deb75cdf25efefabe5aaccb7446dd0d4122a3f5\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.89\",\n]\n\n[[package]]\nname = \"textwrap\"\nversion = \"0.16.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"23d434d3f8967a09480fb04132ebe0a3e088c173e6d0ee7897abbdf4eab0f8b9\"\ndependencies = [\n \"unicode-linebreak\",\n \"unicode-width 0.1.14\",\n]\n\n[[package]]\nname = \"thiserror\"\nversion = \"1.0.69\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b6aaf5339b578ea85b50e080feb250a3e8ae8cfcdff9a461c9ec2904bc923f52\"\ndependencies = [\n \"thiserror-impl 1.0.69\",\n]\n\n[[package]]\nname = \"thiserror\"\nversion = \"2.0.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"c006c85c7651b3cf2ada4584faa36773bd07bac24acfb39f3c431b36d7e667aa\"\ndependencies = [\n \"thiserror-impl 2.0.3\",\n]\n\n[[package]]\nname = \"thiserror-impl\"\nversion = \"1.0.69\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"4fee6c4efc90059e10f81e6d42c60a18f76588c3d74cb83a0b242a2b6c7504c1\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.89\",\n]\n\n[[package]]\nname = \"thiserror-impl\"\nversion = \"2.0.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f077553d607adc1caf65430528a576c757a71ed73944b66ebb58ef2bbd243568\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.89\",\n]\n\n[[package]]\nname = \"thread_local\"\nversion = \"1.1.8\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8b9ef9bad013ada3808854ceac7b46812a6465ba368859a37e2100283d2d719c\"\ndependencies = [\n \"cfg-if\",\n \"once_cell\",\n]\n\n[[package]]\nname = \"time\"\nversion = \"0.3.37\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"35e7868883861bd0e56d9ac6efcaaca0d6d5d82a2a7ec8209ff492c07cf37b21\"\ndependencies = [\n \"deranged\",\n \"itoa\",\n \"libc\",\n \"num-conv\",\n \"num_threads\",\n \"powerfmt\",\n \"serde\",\n \"time-core\",\n \"time-macros\",\n]\n\n[[package]]\nname = \"time-core\"\nversion = \"0.1.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ef927ca75afb808a4d64dd374f00a2adf8d0fcff8e7b184af886c3c87ec4a3f3\"\n\n[[package]]\nname = \"time-macros\"\nversion = \"0.2.19\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"2834e6017e3e5e4b9834939793b282bc03b37a3336245fa820e35e233e2a85de\"\ndependencies = [\n \"num-conv\",\n \"time-core\",\n]\n\n[[package]]\nname = \"tinystr\"\nversion = \"0.7.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"9117f5d4db391c1cf6927e7bea3db74b9a1c1add8f7eda9ffd5364f40f57b82f\"\ndependencies = [\n \"displaydoc\",\n \"zerovec\",\n]\n\n[[package]]\nname = \"tinyvec\"\nversion = \"1.8.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"445e881f4f6d382d5f27c034e25eb92edd7c784ceab92a0937db7f2e9471b938\"\ndependencies = [\n \"tinyvec_macros\",\n]\n\n[[package]]\nname = \"tinyvec_macros\"\nversion = \"0.1.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1f3ccbac311fea05f86f61904b462b55fb3df8837a366dfc601a0161d0532f20\"\n\n[[package]]\nname = \"tokio\"\nversion = \"1.42.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"5cec9b21b0450273377fc97bd4c33a8acffc8c996c987a7c5b319a0083707551\"\ndependencies = [\n \"backtrace\",\n \"bytes\",\n \"libc\",\n \"mio\",\n \"pin-project-lite\",\n \"socket2\",\n \"tokio-macros\",\n \"windows-sys 0.52.0\",\n]\n\n[[package]]\nname = \"tokio-macros\"\nversion = \"2.4.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"693d596312e88961bc67d7f1f97af8a70227d9f90c31bba5806eec004978d752\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.89\",\n]\n\n[[package]]\nname = \"tokio-rustls\"\nversion = \"0.26.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"0c7bc40d0e5a97695bb96e27995cd3a08538541b0a846f65bba7a359f36700d4\"\ndependencies = [\n \"rustls\",\n \"rustls-pki-types\",\n \"tokio\",\n]\n\n[[package]]\nname = \"tokio-util\"\nversion = \"0.7.12\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"61e7c3654c13bcd040d4a03abee2c75b1d14a37b423cf5a813ceae1cc903ec6a\"\ndependencies = [\n \"bytes\",\n \"futures-core\",\n \"futures-sink\",\n \"pin-project-lite\",\n \"tokio\",\n]\n\n[[package]]\nname = \"toml\"\nversion = \"0.8.19\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a1ed1f98e3fdc28d6d910e6737ae6ab1a93bf1985935a1193e68f93eeb68d24e\"\ndependencies = [\n \"serde\",\n \"serde_spanned\",\n \"toml_datetime\",\n \"toml_edit 0.22.22\",\n]\n\n[[package]]\nname = \"toml_datetime\"\nversion = \"0.6.8\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"0dd7358ecb8fc2f8d014bf86f6f638ce72ba252a2c3a2572f2a795f1d23efb41\"\ndependencies = [\n \"serde\",\n]\n\n[[package]]\nname = \"toml_edit\"\nversion = \"0.19.15\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1b5bb770da30e5cbfde35a2d7b9b8a2c4b8ef89548a7a6aeab5c9a576e3e7421\"\ndependencies = [\n \"indexmap\",\n \"toml_datetime\",\n \"winnow 0.5.40\",\n]\n\n[[package]]\nname = \"toml_edit\"\nversion = \"0.22.22\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"4ae48d6208a266e853d946088ed816055e556cc6028c5e8e2b84d9fa5dd7c7f5\"\ndependencies = [\n \"indexmap\",\n \"serde\",\n \"serde_spanned\",\n \"toml_datetime\",\n \"winnow 0.6.20\",\n]\n\n[[package]]\nname = \"tower\"\nversion = \"0.5.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d039ad9159c98b70ecfd540b2573b97f7f52c3e8d9f8ad57a24b916a536975f9\"\ndependencies = [\n \"futures-core\",\n \"futures-util\",\n \"pin-project-lite\",\n \"sync_wrapper\",\n \"tokio\",\n \"tower-layer\",\n \"tower-service\",\n]\n\n[[package]]\nname = \"tower-layer\"\nversion = \"0.3.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"121c2a6cda46980bb0fcd1647ffaf6cd3fc79a013de288782836f6df9c48780e\"\n\n[[package]]\nname = \"tower-service\"\nversion = \"0.3.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8df9b6e13f2d32c91b9bd719c00d1958837bc7dec474d94952798cc8e69eeec3\"\n\n[[package]]\nname = \"tracing\"\nversion = \"0.1.41\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"784e0ac535deb450455cbfa28a6f0df145ea1bb7ae51b821cf5e7927fdcfbdd0\"\ndependencies = [\n \"pin-project-lite\",\n \"tracing-attributes\",\n \"tracing-core\",\n]\n\n[[package]]\nname = \"tracing-appender\"\nversion = \"0.2.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3566e8ce28cc0a3fe42519fc80e6b4c943cc4c8cef275620eb8dac2d3d4e06cf\"\ndependencies = [\n \"crossbeam-channel\",\n \"thiserror 1.0.69\",\n \"time\",\n \"tracing-subscriber\",\n]\n\n[[package]]\nname = \"tracing-attributes\"\nversion = \"0.1.28\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"395ae124c09f9e6918a2310af6038fba074bcf474ac352496d5910dd59a2226d\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.89\",\n]\n\n[[package]]\nname = \"tracing-core\"\nversion = \"0.1.33\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e672c95779cf947c5311f83787af4fa8fffd12fb27e4993211a84bdfd9610f9c\"\ndependencies = [\n \"once_cell\",\n \"valuable\",\n]\n\n[[package]]\nname = \"tracing-log\"\nversion = \"0.2.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ee855f1f400bd0e5c02d150ae5de3840039a3f54b025156404e34c23c03f47c3\"\ndependencies = [\n \"log\",\n \"once_cell\",\n \"tracing-core\",\n]\n\n[[package]]\nname = \"tracing-serde\"\nversion = \"0.2.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"704b1aeb7be0d0a84fc9828cae51dab5970fee5088f83d1dd7ee6f6246fc6ff1\"\ndependencies = [\n \"serde\",\n \"tracing-core\",\n]\n\n[[package]]\nname = \"tracing-subscriber\"\nversion = \"0.3.19\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e8189decb5ac0fa7bc8b96b7cb9b2701d60d48805aca84a238004d665fcc4008\"\ndependencies = [\n \"matchers\",\n \"nu-ansi-term\",\n \"once_cell\",\n \"regex\",\n \"serde\",\n \"serde_json\",\n \"sharded-slab\",\n \"smallvec\",\n \"thread_local\",\n \"tracing\",\n \"tracing-core\",\n \"tracing-log\",\n \"tracing-serde\",\n]\n\n[[package]]\nname = \"try-lock\"\nversion = \"0.2.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e421abadd41a4225275504ea4d6566923418b7f05506fbc9c0fe86ba7396114b\"\n\n[[package]]\nname = \"twox-hash\"\nversion = \"1.6.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"97fee6b57c6a41524a810daee9286c02d7752c4253064d0b05472833a438f675\"\ndependencies = [\n \"cfg-if\",\n \"static_assertions\",\n]\n\n[[package]]\nname = \"typed-arena\"\nversion = \"2.0.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"6af6ae20167a9ece4bcb41af5b80f8a1f1df981f6391189ce00fd257af04126a\"\n\n[[package]]\nname = \"typed-path\"\nversion = \"0.10.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"41713888c5ccfd99979fcd1afd47b71652e331b3d4a0e19d30769e80fec76cce\"\n\n[[package]]\nname = \"typenum\"\nversion = \"1.17.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"42ff0bf0c66b8238c6f3b578df37d0b7848e55df8577b3f74f92a69acceeb825\"\n\n[[package]]\nname = \"udev\"\nversion = \"0.8.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"50051c6e22be28ee6f217d50014f3bc29e81c20dc66ff7ca0d5c5226e1dcc5a1\"\ndependencies = [\n \"io-lifetimes\",\n \"libc\",\n \"libudev-sys\",\n \"pkg-config\",\n]\n\n[[package]]\nname = \"uf2-decode\"\nversion = \"0.2.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ca77d41ab27e3fa45df42043f96c79b80c6d8632eed906b54681d8d47ab00623\"\n\n[[package]]\nname = \"uncased\"\nversion = \"0.9.10\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e1b88fcfe09e89d3866a5c11019378088af2d24c3fbd4f0543f96b479ec90697\"\ndependencies = [\n \"version_check\",\n]\n\n[[package]]\nname = \"unescaper\"\nversion = \"0.1.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"c878a167baa8afd137494101a688ef8c67125089ff2249284bd2b5f9bfedb815\"\ndependencies = [\n \"thiserror 1.0.69\",\n]\n\n[[package]]\nname = \"unicode-ident\"\nversion = \"1.0.14\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"adb9e6ca4f869e1180728b7950e35922a7fc6397f7b641499e8f3ef06e50dc83\"\n\n[[package]]\nname = \"unicode-linebreak\"\nversion = \"0.1.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3b09c83c3c29d37506a3e260c08c03743a6bb66a9cd432c6934ab501a190571f\"\n\n[[package]]\nname = \"unicode-segmentation\"\nversion = \"1.12.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f6ccf251212114b54433ec949fd6a7841275f9ada20dddd2f29e9ceea4501493\"\n\n[[package]]\nname = \"unicode-truncate\"\nversion = \"1.1.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b3644627a5af5fa321c95b9b235a72fd24cd29c648c2c379431e6628655627bf\"\ndependencies = [\n \"itertools 0.13.0\",\n \"unicode-segmentation\",\n \"unicode-width 0.1.14\",\n]\n\n[[package]]\nname = \"unicode-width\"\nversion = \"0.1.14\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"7dd6e30e90baa6f72411720665d41d89b9a3d039dc45b8faea1ddd07f617f6af\"\n\n[[package]]\nname = \"unicode-width\"\nversion = \"0.2.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1fc81956842c57dac11422a97c3b8195a1ff727f06e85c84ed2e8aa277c9a0fd\"\n\n[[package]]\nname = \"unsafe-libyaml\"\nversion = \"0.2.11\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"673aac59facbab8a9007c7f6108d11f63b603f7cabff99fabf650fea5c32b861\"\n\n[[package]]\nname = \"untrusted\"\nversion = \"0.9.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8ecb6da28b8a351d773b68d5825ac39017e680750f980f3a1a85cd8dd28a47c1\"\n\n[[package]]\nname = \"uriparse\"\nversion = \"0.6.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"0200d0fc04d809396c2ad43f3c95da3582a2556eba8d453c1087f4120ee352ff\"\ndependencies = [\n \"fnv\",\n \"lazy_static\",\n]\n\n[[package]]\nname = \"url\"\nversion = \"2.5.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"32f8b686cadd1473f4bd0117a5d28d36b1ade384ea9b5069a1c40aefed7fda60\"\ndependencies = [\n \"form_urlencoded\",\n \"idna\",\n \"percent-encoding\",\n \"serde\",\n]\n\n[[package]]\nname = \"urlencoding\"\nversion = \"2.1.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"daf8dba3b7eb870caf1ddeed7bc9d2a049f3cfdfae7cb521b087cc33ae4c49da\"\n\n[[package]]\nname = \"utf16_iter\"\nversion = \"1.0.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"c8232dd3cdaed5356e0f716d285e4b40b932ac434100fe9b7e0e8e935b9e6246\"\n\n[[package]]\nname = \"utf8_iter\"\nversion = \"1.0.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b6c140620e7ffbb22c2dee59cafe6084a59b5ffc27a8859a5f0d494b5d52b6be\"\n\n[[package]]\nname = \"utf8parse\"\nversion = \"0.2.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"06abde3611657adf66d383f00b093d7faecc7fa57071cce2578660c9f1010821\"\n\n[[package]]\nname = \"valuable\"\nversion = \"0.1.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"830b7e5d4d90034032940e4ace0d9a9a057e7a45cd94e6c007832e39edb82f6d\"\n\n[[package]]\nname = \"version_check\"\nversion = \"0.9.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"0b928f33d975fc6ad9f86c8f283853ad26bdd5b10b7f1542aa2fa15e2289105a\"\n\n[[package]]\nname = \"want\"\nversion = \"0.3.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"bfa7760aed19e106de2c7c0b581b509f2f25d3dacaf737cb82ac61bc6d760b0e\"\ndependencies = [\n \"try-lock\",\n]\n\n[[package]]\nname = \"wasi\"\nversion = \"0.11.0+wasi-snapshot-preview1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"9c8d87e72b64a3b4db28d11ce29237c246188f4f51057d65a7eab63b7987e423\"\n\n[[package]]\nname = \"wasm-bindgen\"\nversion = \"0.2.95\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"128d1e363af62632b8eb57219c8fd7877144af57558fb2ef0368d0087bddeb2e\"\ndependencies = [\n \"cfg-if\",\n \"once_cell\",\n \"wasm-bindgen-macro\",\n]\n\n[[package]]\nname = \"wasm-bindgen-backend\"\nversion = \"0.2.95\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"cb6dd4d3ca0ddffd1dd1c9c04f94b868c37ff5fac97c30b97cff2d74fce3a358\"\ndependencies = [\n \"bumpalo\",\n \"log\",\n \"once_cell\",\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.89\",\n \"wasm-bindgen-shared\",\n]\n\n[[package]]\nname = \"wasm-bindgen-futures\"\nversion = \"0.4.45\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"cc7ec4f8827a71586374db3e87abdb5a2bb3a15afed140221307c3ec06b1f63b\"\ndependencies = [\n \"cfg-if\",\n \"js-sys\",\n \"wasm-bindgen\",\n \"web-sys\",\n]\n\n[[package]]\nname = \"wasm-bindgen-macro\"\nversion = \"0.2.95\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e79384be7f8f5a9dd5d7167216f022090cf1f9ec128e6e6a482a2cb5c5422c56\"\ndependencies = [\n \"quote\",\n \"wasm-bindgen-macro-support\",\n]\n\n[[package]]\nname = \"wasm-bindgen-macro-support\"\nversion = \"0.2.95\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"26c6ab57572f7a24a4985830b120de1594465e5d500f24afe89e16b4e833ef68\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.89\",\n \"wasm-bindgen-backend\",\n \"wasm-bindgen-shared\",\n]\n\n[[package]]\nname = \"wasm-bindgen-shared\"\nversion = \"0.2.95\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"65fc09f10666a9f147042251e0dda9c18f166ff7de300607007e96bdebc1068d\"\n\n[[package]]\nname = \"wasm-streams\"\nversion = \"0.4.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"15053d8d85c7eccdbefef60f06769760a563c7f0a9d6902a13d35c7800b0ad65\"\ndependencies = [\n \"futures-util\",\n \"js-sys\",\n \"wasm-bindgen\",\n \"wasm-bindgen-futures\",\n \"web-sys\",\n]\n\n[[package]]\nname = \"web-sys\"\nversion = \"0.3.72\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f6488b90108c040df0fe62fa815cbdee25124641df01814dd7282749234c6112\"\ndependencies = [\n \"js-sys\",\n \"wasm-bindgen\",\n]\n\n[[package]]\nname = \"web-time\"\nversion = \"1.1.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"5a6580f308b1fad9207618087a65c04e7a10bc77e02c8e84e9b00dd4b12fa0bb\"\ndependencies = [\n \"js-sys\",\n \"wasm-bindgen\",\n]\n\n[[package]]\nname = \"webpki-roots\"\nversion = \"0.26.7\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"5d642ff16b7e79272ae451b7322067cdc17cadf68c23264be9d94a32319efe7e\"\ndependencies = [\n \"rustls-pki-types\",\n]\n\n[[package]]\nname = \"winapi\"\nversion = \"0.3.9\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"5c839a674fcd7a98952e593242ea400abe93992746761e38641405d28b00f419\"\ndependencies = [\n \"winapi-i686-pc-windows-gnu\",\n \"winapi-x86_64-pc-windows-gnu\",\n]\n\n[[package]]\nname = \"winapi-i686-pc-windows-gnu\"\nversion = \"0.4.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ac3b87c63620426dd9b991e5ce0329eff545bccbbb34f3be09ff6fb6ab51b7b6\"\n\n[[package]]\nname = \"winapi-util\"\nversion = \"0.1.9\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"cf221c93e13a30d793f7645a0e7762c55d169dbb0a49671918a2319d289b10bb\"\ndependencies = [\n \"windows-sys 0.59.0\",\n]\n\n[[package]]\nname = \"winapi-x86_64-pc-windows-gnu\"\nversion = \"0.4.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"712e227841d057c1ee1cd2fb22fa7e5a5461ae8e48fa2ca79ec42cfc1931183f\"\n\n[[package]]\nname = \"windows-registry\"\nversion = \"0.2.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e400001bb720a623c1c69032f8e3e4cf09984deec740f007dd2b03ec864804b0\"\ndependencies = [\n \"windows-result\",\n \"windows-strings\",\n \"windows-targets 0.52.6\",\n]\n\n[[package]]\nname = \"windows-result\"\nversion = \"0.2.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1d1043d8214f791817bab27572aaa8af63732e11bf84aa21a45a78d6c317ae0e\"\ndependencies = [\n \"windows-targets 0.52.6\",\n]\n\n[[package]]\nname = \"windows-strings\"\nversion = \"0.1.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"4cd9b125c486025df0eabcb585e62173c6c9eddcec5d117d3b6e8c30e2ee4d10\"\ndependencies = [\n \"windows-result\",\n \"windows-targets 0.52.6\",\n]\n\n[[package]]\nname = \"windows-sys\"\nversion = \"0.48.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"677d2418bec65e3338edb076e806bc1ec15693c5d0104683f2efe857f61056a9\"\ndependencies = [\n \"windows-targets 0.48.5\",\n]\n\n[[package]]\nname = \"windows-sys\"\nversion = \"0.52.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"282be5f36a8ce781fad8c8ae18fa3f9beff57ec1b52cb3de0789201425d9a33d\"\ndependencies = [\n \"windows-targets 0.52.6\",\n]\n\n[[package]]\nname = \"windows-sys\"\nversion = \"0.59.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1e38bc4d79ed67fd075bcc251a1c39b32a1776bbe92e5bef1f0bf1f8c531853b\"\ndependencies = [\n \"windows-targets 0.52.6\",\n]\n\n[[package]]\nname = \"windows-targets\"\nversion = \"0.48.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"9a2fa6e2155d7247be68c096456083145c183cbbbc2764150dda45a87197940c\"\ndependencies = [\n \"windows_aarch64_gnullvm 0.48.5\",\n \"windows_aarch64_msvc 0.48.5\",\n \"windows_i686_gnu 0.48.5\",\n \"windows_i686_msvc 0.48.5\",\n \"windows_x86_64_gnu 0.48.5\",\n \"windows_x86_64_gnullvm 0.48.5\",\n \"windows_x86_64_msvc 0.48.5\",\n]\n\n[[package]]\nname = \"windows-targets\"\nversion = \"0.52.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"9b724f72796e036ab90c1021d4780d4d3d648aca59e491e6b98e725b84e99973\"\ndependencies = [\n \"windows_aarch64_gnullvm 0.52.6\",\n \"windows_aarch64_msvc 0.52.6\",\n \"windows_i686_gnu 0.52.6\",\n \"windows_i686_gnullvm\",\n \"windows_i686_msvc 0.52.6\",\n \"windows_x86_64_gnu 0.52.6\",\n \"windows_x86_64_gnullvm 0.52.6\",\n \"windows_x86_64_msvc 0.52.6\",\n]\n\n[[package]]\nname = \"windows_aarch64_gnullvm\"\nversion = \"0.48.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"2b38e32f0abccf9987a4e3079dfb67dcd799fb61361e53e2882c3cbaf0d905d8\"\n\n[[package]]\nname = \"windows_aarch64_gnullvm\"\nversion = \"0.52.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"32a4622180e7a0ec044bb555404c800bc9fd9ec262ec147edd5989ccd0c02cd3\"\n\n[[package]]\nname = \"windows_aarch64_msvc\"\nversion = \"0.48.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"dc35310971f3b2dbbf3f0690a219f40e2d9afcf64f9ab7cc1be722937c26b4bc\"\n\n[[package]]\nname = \"windows_aarch64_msvc\"\nversion = \"0.52.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"09ec2a7bb152e2252b53fa7803150007879548bc709c039df7627cabbd05d469\"\n\n[[package]]\nname = \"windows_i686_gnu\"\nversion = \"0.48.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a75915e7def60c94dcef72200b9a8e58e5091744960da64ec734a6c6e9b3743e\"\n\n[[package]]\nname = \"windows_i686_gnu\"\nversion = \"0.52.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8e9b5ad5ab802e97eb8e295ac6720e509ee4c243f69d781394014ebfe8bbfa0b\"\n\n[[package]]\nname = \"windows_i686_gnullvm\"\nversion = \"0.52.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"0eee52d38c090b3caa76c563b86c3a4bd71ef1a819287c19d586d7334ae8ed66\"\n\n[[package]]\nname = \"windows_i686_msvc\"\nversion = \"0.48.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8f55c233f70c4b27f66c523580f78f1004e8b5a8b659e05a4eb49d4166cca406\"\n\n[[package]]\nname = \"windows_i686_msvc\"\nversion = \"0.52.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"240948bc05c5e7c6dabba28bf89d89ffce3e303022809e73deaefe4f6ec56c66\"\n\n[[package]]\nname = \"windows_x86_64_gnu\"\nversion = \"0.48.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"53d40abd2583d23e4718fddf1ebec84dbff8381c07cae67ff7768bbf19c6718e\"\n\n[[package]]\nname = \"windows_x86_64_gnu\"\nversion = \"0.52.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"147a5c80aabfbf0c7d901cb5895d1de30ef2907eb21fbbab29ca94c5b08b1a78\"\n\n[[package]]\nname = \"windows_x86_64_gnullvm\"\nversion = \"0.48.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"0b7b52767868a23d5bab768e390dc5f5c55825b6d30b86c844ff2dc7414044cc\"\n\n[[package]]\nname = \"windows_x86_64_gnullvm\"\nversion = \"0.52.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"24d5b23dc417412679681396f2b49f3de8c1473deb516bd34410872eff51ed0d\"\n\n[[package]]\nname = \"windows_x86_64_msvc\"\nversion = \"0.48.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ed94fce61571a4006852b7389a063ab983c02eb1bb37b47f8272ce92d06d9538\"\n\n[[package]]\nname = \"windows_x86_64_msvc\"\nversion = \"0.52.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"589f6da84c646204747d1270a2a5661ea66ed1cced2631d546fdfb155959f9ec\"\n\n[[package]]\nname = \"winnow\"\nversion = \"0.5.40\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f593a95398737aeed53e489c785df13f3618e41dbcd6718c6addbf1395aa6876\"\ndependencies = [\n \"memchr\",\n]\n\n[[package]]\nname = \"winnow\"\nversion = \"0.6.20\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"36c1fec1a2bb5866f07c25f68c26e565c4c200aebb96d7e55710c19d3e8ac49b\"\ndependencies = [\n \"memchr\",\n]\n\n[[package]]\nname = \"write16\"\nversion = \"1.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d1890f4022759daae28ed4fe62859b1236caebfc61ede2f63ed4e695f3f6d936\"\n\n[[package]]\nname = \"writeable\"\nversion = \"0.5.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1e9df38ee2d2c3c5948ea468a8406ff0db0b29ae1ffde1bcf20ef305bcc95c51\"\n\n[[package]]\nname = \"wyz\"\nversion = \"0.5.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"05f360fc0b24296329c78fda852a1e9ae82de9cf7b27dae4b7f62f118f77b9ed\"\ndependencies = [\n \"tap\",\n]\n\n[[package]]\nname = \"xmas-elf\"\nversion = \"0.9.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"42c49817e78342f7f30a181573d82ff55b88a35f86ccaf07fc64b3008f56d1c6\"\ndependencies = [\n \"zero\",\n]\n\n[[package]]\nname = \"xshell\"\nversion = \"0.2.7\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"9e7290c623014758632efe00737145b6867b66292c42167f2ec381eb566a373d\"\ndependencies = [\n \"xshell-macros\",\n]\n\n[[package]]\nname = \"xshell-macros\"\nversion = \"0.2.7\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"32ac00cd3f8ec9c1d33fb3e7958a82df6989c42d747bd326c822b1d625283547\"\n\n[[package]]\nname = \"xtask\"\nversion = \"0.25.0\"\ndependencies = [\n \"anyhow\",\n \"clap\",\n \"serde\",\n \"serde_json\",\n \"xshell\",\n]\n\n[[package]]\nname = \"yansi\"\nversion = \"1.0.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"cfe53a6657fd280eaa890a3bc59152892ffa3e30101319d168b781ed6529b049\"\n\n[[package]]\nname = \"yoke\"\nversion = \"0.7.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"120e6aef9aa629e3d4f52dc8cc43a015c7724194c97dfaf45180d2daf2b77f40\"\ndependencies = [\n \"serde\",\n \"stable_deref_trait\",\n \"yoke-derive\",\n \"zerofrom\",\n]\n\n[[package]]\nname = \"yoke-derive\"\nversion = \"0.7.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"2380878cad4ac9aac1e2435f3eb4020e8374b5f13c296cb75b4620ff8e229154\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.89\",\n \"synstructure\",\n]\n\n[[package]]\nname = \"zero\"\nversion = \"0.1.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"2fe21bcc34ca7fe6dd56cc2cb1261ea59d6b93620215aefb5ea6032265527784\"\n\n[[package]]\nname = \"zerocopy\"\nversion = \"0.7.35\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1b9b4fd18abc82b8136838da5d50bae7bdea537c574d8dc1a34ed098d6c166f0\"\ndependencies = [\n \"byteorder\",\n \"zerocopy-derive 0.7.35\",\n]\n\n[[package]]\nname = \"zerocopy\"\nversion = \"0.8.14\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a367f292d93d4eab890745e75a778da40909cab4d6ff8173693812f79c4a2468\"\ndependencies = [\n \"zerocopy-derive 0.8.14\",\n]\n\n[[package]]\nname = \"zerocopy-derive\"\nversion = \"0.7.35\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"fa4f8080344d4671fb4e831a13ad1e68092748387dfc4f55e356242fae12ce3e\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.89\",\n]\n\n[[package]]\nname = \"zerocopy-derive\"\nversion = \"0.8.14\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d3931cb58c62c13adec22e38686b559c86a30565e16ad6e8510a337cedc611e1\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.89\",\n]\n\n[[package]]\nname = \"zerofrom\"\nversion = \"0.1.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"cff3ee08c995dee1859d998dea82f7374f2826091dd9cd47def953cae446cd2e\"\ndependencies = [\n \"zerofrom-derive\",\n]\n\n[[package]]\nname = \"zerofrom-derive\"\nversion = \"0.1.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"595eed982f7d355beb85837f651fa22e90b3c044842dc7f2c2842c086f295808\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.89\",\n \"synstructure\",\n]\n\n[[package]]\nname = \"zeroize\"\nversion = \"1.8.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ced3678a2879b30306d323f4542626697a464a97c0a07c9aebf7ebca65cd4dde\"\n\n[[package]]\nname = \"zerovec\"\nversion = \"0.10.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"aa2b893d79df23bfb12d5461018d408ea19dfafe76c2c7ef6d4eba614f8ff079\"\ndependencies = [\n \"yoke\",\n \"zerofrom\",\n \"zerovec-derive\",\n]\n\n[[package]]\nname = \"zerovec-derive\"\nversion = \"0.10.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"6eafa6dfb17584ea3e2bd6e76e0cc15ad7af12b09abdd1ca55961bed9b1063c6\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.89\",\n]\n\n[[package]]\nname = \"zip\"\nversion = \"2.2.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ae9c1ea7b3a5e1f4b922ff856a129881167511563dc219869afe3787fc0c1a45\"\ndependencies = [\n \"arbitrary\",\n \"crc32fast\",\n \"crossbeam-utils\",\n \"deflate64\",\n \"displaydoc\",\n \"flate2\",\n \"indexmap\",\n \"lzma-rs\",\n \"memchr\",\n \"thiserror 2.0.3\",\n \"time\",\n \"zopfli\",\n \"zstd\",\n]\n\n[[package]]\nname = \"zopfli\"\nversion = \"0.8.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e5019f391bac5cf252e93bbcc53d039ffd62c7bfb7c150414d61369afe57e946\"\ndependencies = [\n \"bumpalo\",\n \"crc32fast\",\n \"lockfree-object-pool\",\n \"log\",\n \"once_cell\",\n \"simd-adler32\",\n]\n\n[[package]]\nname = \"zstd\"\nversion = \"0.13.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"fcf2b778a664581e31e389454a7072dab1647606d44f7feea22cd5abb9c9f3f9\"\ndependencies = [\n \"zstd-safe\",\n]\n\n[[package]]\nname = \"zstd-safe\"\nversion = \"7.2.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"54a3ab4db68cea366acc5c897c7b4d4d1b8994a9cd6e6f841f8964566a419059\"\ndependencies = [\n \"zstd-sys\",\n]\n\n[[package]]\nname = \"zstd-sys\"\nversion = \"2.0.13+zstd.1.5.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"38ff0f21cfee8f97d94cef41359e0c89aa6113028ab0291aa8ca0038995a95aa\"\ndependencies = [\n \"cc\",\n \"pkg-config\",\n]\n"
        },
        {
          "name": "Cargo.toml",
          "type": "blob",
          "size": 1.1669921875,
          "content": "[workspace.package]\nversion = \"0.25.0\"\nedition = \"2021\"\n\ndocumentation = \"https://docs.rs/probe-rs/\"\nhomepage = \"https://github.com/probe-rs/probe-rs\"\nrepository = \"https://github.com/probe-rs/probe-rs\"\nreadme = \"README.md\"\nlicense = \"MIT OR Apache-2.0\"\n\n\n[workspace]\nresolver = \"2\"\nmembers = [\n    \"probe-rs\",\n    \"probe-rs-target\",\n    \"rtthost\",\n    \"smoke-tester\",\n    \"xtask\",\n    \"target-gen\",\n    \"probe-rs-tools\",\n    \"probe-rs-mi\",\n    \"probe-rs-debug\",\n]\nexclude = [\"probe-rs/tests/gpio-hal-blinky\"]\n\n[workspace.dependencies]\nprobe-rs = { path = \"probe-rs\", version = \"0.25.0\" }\nprobe-rs-target = { path = \"probe-rs-target\", version = \"0.25.0\" }\nprobe-rs-mi = { path = \"probe-rs-mi\", version = \"0.1.0\" }\n\ndocsplay = \"0.1.1\"\nthiserror = \"1.0.59\"\nanyhow = \"1.0.82\"\n\n[workspace.metadata.release]\nshared-version = true\ntag-name = \"v{{version}}\"\n\n[workspace.lints.clippy]\nunnecessary_self_imports = \"deny\"\nenum_glob_use = \"deny\"\nmacro_use_imports = \"deny\"\n\n# The profile that 'cargo dist' will build with\n[profile.dist]\ninherits = \"release\"\nlto = \"thin\"\n\n[profile.dev.package.zip]\n# Set the default for zip in development mode so the creation of the zip does not take forever\nopt-level = 3\n"
        },
        {
          "name": "Cross.toml",
          "type": "blob",
          "size": 0.9326171875,
          "content": "[target.armv7-unknown-linux-gnueabihf]\n# The following lines can be uncommented to use a native\n# ARM image when compiling on a ARM machine, like the new Apple devices.\n#\n# This needs the master version of cross (as of 2023-02-05).\n\n#image.name = \"ahuszagh/aarch64-cross:armv7-unknown-linux-gnueabihf\"\n#image.toolchain = [\"aarch64-unknown-linux-gnu\"]\npre-build = [\n    \"dpkg --add-architecture armhf\",\n    \"apt-get update\",\n    \"apt-get install --assume-yes libudev-dev:armhf\",\n]\n\n[target.aarch64-unknown-linux-gnu]\n# The following lines can be uncommented to use a native\n# ARM image when compiling on a ARM machine, like the new Apple devices.\n#\n# This needs the master version of cross (as of 2023-02-05).\n\n# image.name = \"ahuszagh/aarch64-cross:aarch64-unknown-linux-gnu\"\n# image.toolchain = [\"aarch64-unknown-linux-gnu\"]\npre-build = [\n    \"dpkg --add-architecture arm64\",\n    \"apt-get update\",\n    \"apt-get install --assume-yes libudev-dev:arm64\",\n]\n"
        },
        {
          "name": "LICENSE-APACHE",
          "type": "blob",
          "size": 11.0908203125,
          "content": "                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"[]\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright [yyyy] [name of copyright owner]\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n"
        },
        {
          "name": "LICENSE-MIT",
          "type": "blob",
          "size": 1.0400390625,
          "content": "MIT License\n\nCopyright (c) 2019 probe-rs\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 6.9833984375,
          "content": "# probe-rs\n\na modern, embedded debugging toolkit,\nwritten in Rust\n\n[![crates.io](https://img.shields.io/crates/v/probe-rs)](https://crates.io/crates/probe-rs) [![documentation](https://docs.rs/probe-rs/badge.svg)](https://docs.rs/probe-rs) [![Actions Status](https://img.shields.io/github/actions/workflow/status/probe-rs/probe-rs/ci.yml?branch=master)](https://github.com/probe-rs/probe-rs/actions) [![chat](https://img.shields.io/badge/chat-probe--rs%3Amatrix.org-brightgreen)](https://matrix.to/#/#probe-rs:matrix.org)\n\nThe goal of this library is to provide a toolset to interact with a variety of embedded MCUs and debug probes.\n\nSimilar projects like OpenOCD, PyOCD, Segger Toolset, ST Tooling, etc. exist.\nThey all implement the GDB protocol and their own protocol on top of it to enable GDB to communicate with the debug probe.\nOnly Segger provides a closed source DLL which you can use for talking to the JLink.\n\nThis project gets rid of the GDB layer and provides a direct interface to the debug probe,\nwhich then enables other software to use its debug functionality.\n\n**The end goal of this project is to have a complete library toolset to enable other tools to communicate with embedded targets.**\n\n## Functionality\n\nAs of version 0.10.0 this library can\n\n- connect to a DAPLink, STLink or JLink\n- talk to ARM and Risc-V cores via SWD or JTAG\n- read and write arbitrary memory of the target\n- halt, run, step, breakpoint and much more the core\n- download ELF, BIN and IHEX binaries using standard CMSIS-Pack flash algorithms to ARM cores\n- provide debug information about the target state (stacktrace, stackframe, etc.)\n\nTo see what new functionality was added have a look at the [CHANGELOG](CHANGELOG.md)\n\n## Support\n\nIf you think probe-rs makes your embedded journey more enjoyable or even earns you money, please consider supporting the project on [Github Sponsors](https://github.com/sponsors/probe-rs/) for better support and more features.\n\n## Tools\n\nIn addition to being a library, probe-rs also includes a suite of tools which can be used for flashing and debugging.\n\n### Installation\n\nThe recommended way to install the tools is to download a precompiled version, using one of the methods below.\nSee <https://probe.rs/docs/getting-started/installation/> for a more detailed guide.\n\n### cargo-flash\n\nThe `cargo-flash` utility can be used as a cargo subcommand to download a compiled Rust program onto a target device. It can also be used to download arbitrary ELF files that might come out of a C/C++ compiler. Have a look at [cargo-flash](https://probe.rs/docs/tools/cargo-flash/) for more information.\n\n### cargo-embed\n\nIf you are looking for a more extended debugging experience, please have a look at [cargo-embed](https://probe.rs/docs/tools/cargo-embed/) which provides support for GDB, RTT, and config files.\n\n### Editors and IDEs\n\nWe have implemented the [Microsoft Debug Adapter Protocol (DAP)](https://microsoft.github.io/debug-adapter-protocol/). This makes embedded debugging via probe-rs available in modern code editors implementing the standard, such as VSCode. The DAP website includes [a list of editors and IDEs which support DAP](https://microsoft.github.io/debug-adapter-protocol/implementors/tools/).\n\n#### VSCode\n\nThe probe-rs website includes [VSCode configuration instructions](https://probe.rs/docs/tools/debugger/).\n\n## Usage Examples\n\n### Halting the attached chip\n\n```rust,no_run\nuse probe_rs::probe::{list::Lister, Probe};\nuse probe_rs::Permissions;\n\nfn main() -> Result<(), probe_rs::Error> {\n    // Get a list of all available debug probes.\n    let lister = Lister::new();\n\n    let probes = lister.list_all();\n\n    // Use the first probe found.\n    let mut probe = probes[0].open()?;\n\n    // Attach to a chip.\n    let mut session = probe.attach(\"nRF52840_xxAA\", Permissions::default())?;\n\n    // Select a core.\n    let mut core = session.core(0)?;\n\n    // Halt the attached core.\n    core.halt(std::time::Duration::from_millis(10))?;\n\n    Ok(())\n}\n```\n\n### Reading from RAM\n\n```rust,no_run\nuse probe_rs::{MemoryInterface, Permissions, Session};\n\nfn main() -> Result<(), probe_rs::Error> {\n    // Attach to a chip.\n    let mut session = Session::auto_attach(\"nRF52840_xxAA\", Permissions::default())?;\n\n    // Select a core.\n    let mut core = session.core(0)?;\n\n    // Read a block of 50 32 bit words.\n    let mut buff = [0u32; 50];\n    core.read_32(0x2000_0000, &mut buff)?;\n\n    // Read a single 32 bit word.\n    let word = core.read_word_32(0x2000_0000)?;\n\n    // Writing is just as simple.\n    let buff = [0u32; 50];\n    core.write_32(0x2000_0000, &buff)?;\n\n    // of course we can also write 8bit words.\n    let buff = [0u8; 50];\n    core.write_8(0x2000_0000, &buff)?;\n\n    Ok(())\n}\n```\n\n## FAQ\n\n### I need help!\n\nDon't hesitate to [file an issue](https://github.com/probe-rs/probe-rs/issues/new), ask questions on [Matrix](https://matrix.to/#/#probe-rs:matrix.org), or contact [@Yatekii](https://github.com/Yatekii) via e-mail.\n\nThere is also a [troubleshooting section](https://probe.rs/docs/knowledge-base/troubleshooting/) on the [project page](https://probe.rs/).\n\n### How can I help?\n\nPlease have a look at the issues or open one if you feel that something is needed.\n\nAny contributions are very welcome!\n\nAlso have a look at [CONTRIBUTING.md](CONTRIBUTING.md).\n\n### Our company needs feature X and would pay for its development\n\nPlease reach out to [@Yatekii](https://github.com/Yatekii)\n\n### Building\n\nBuilding requires Rust and Cargo which can be installed [using rustup](https://rustup.rs/). On Linux these can be installed with your package manager:\n\n```console\n# Ubuntu\n> sudo apt install -y libudev-dev\n\n# Fedora\n> sudo dnf install -y libudev-devel\n```\n\n### Adding Targets\n\nTarget files are generated using [target-gen](https://github.com/probe-rs/probe-rs/tree/master/target-gen) from CMSIS packs provided [here](https://developer.arm.com/tools-and-software/embedded/cmsis/cmsis-search).\nGenerated files are then placed in `probe-rs/targets` for inclusion in the probe-rs project.\n\n### Writing new flash algorithms\n\nIf there is no CMSIS-Pack with a flash algorithm available, it is necessary to write a target definition and a flash algorithm by oneself.\nYou can use our [template](https://github.com/probe-rs/flash-algorithm-template) for writing an algorithm. Please follow the instructions in the `README.md` in that repo.\n\n## Acknowledgements\n\nIn early stages of this library, we profited invaluably from the pyOCD code to understand how flashing works. Also it's always a good reference to cross check how ARM specific things work. So, a big thank you to the team behind pyOCD!\n\n## License\n\nLicensed under either of\n\n- Apache License, Version 2.0 ([LICENSE-APACHE](LICENSE-APACHE) or\n  http://www.apache.org/licenses/LICENSE-2.0)\n- MIT license ([LICENSE-MIT](LICENSE-MIT) or\n  http://opensource.org/licenses/MIT) at your option.\n\n## Contributing\n\nUnless you explicitly state otherwise, any contribution intentionally submitted\nfor inclusion in the work by you, as defined in the Apache-2.0 license, shall\nbe dual licensed as above, without any additional terms or conditions.\n"
        },
        {
          "name": "RESOURCES.md",
          "type": "blob",
          "size": 2.69921875,
          "content": "# Resources\n\n[Microsoft DAP](https://microsoft.github.io/debug-adapter-protocol/overview)\n\n[JEDEC CODES](https://www.jedec.org/system/files/docs/JEP106AY.pdf)\n\n\n## Releated OSS projects\n\n[PyOCD](https://github.com/mbedmicro/pyOCD) Open source Python library for\nprogramming and debugging Arm Cortex-M microcontrollers using CMSIS-DAP.\n\n[stlink](https://github.com/texane/stlink) Programmer for STM32. Supporting\nSTLINKv1, v2 and v2-1. Written in C.\n\n## ARM\n\n[ARM Debug Interface Architecture Specification ADIv5.0 to ADIv5.2](https://developer.arm.com/docs/ihi0031/e) Have a look at Figure A1-2!\n\n[ARM CoreSight Architecture Specification v3.0](https://static.docs.arm.com/ihi0029/e/coresight_v3_0_architecture_specification_IHI0029E.pdf)\n\n[CoreSight Technical Introduction](http://infocenter.arm.com/help/topic/com.arm.doc.epm039795/coresight_technical_introduction_EPM_039795.pdf)\n[CMSIS Packs](https://developer.arm.com/tools-and-software/embedded/cmsis/cmsis-packs)\n\n[Semihosting Specification](https://github.com/ARM-software/abi-aa/blob/main/semihosting/semihosting.rst)\n\n### Armv6-M Architecture \n\n[Architecture Reference Manual](https://static.docs.arm.com/ddi0419/d/DDI0419D_armv6m_arm.pdf)\n\n#### Processors\n\n[Cortex-M0 Technical Reference Manual](http://infocenter.arm.com/help/topic/com.arm.doc.ddi0432c/DDI0432C_cortex_m0_r0p0_trm.pdf)\n\n[Cortex-M1 Technical Reference Manual](https://static.docs.arm.com/ddi0413/d/DDI0413D_cortexm1_r1p0_trm.pdf)\n\n### ARMv7(E)-M Architecture\n\n[Architecture Reference Manual](https://static.docs.arm.com/ddi0403/e/DDI0403E_d_armv7m_arm.pdf)\n\n#### Processors\n[Cortex-M3 Technical Reference Manual](https://static.docs.arm.com/100165/0201/arm_cortexm3_processor_trm_100165_0201_00_en.pdf)\n\n[Cortex-M4 Technical Reference Manual](https://static.docs.arm.com/100166/0001/arm_cortexm4_processor_trm_100166_0001_00_en.pdf)\n\n[Cortex-M7 Technical Reference Manual](https://static.docs.arm.com/ddi0489/f/DDI0489F_cortex_m7_trm.pdf)\n\n### ARMv8-M Architecture\n\n[Architecture Reference Manual](https://static.docs.arm.com/ddi0553/bf/DDI0553B_f_armv8m_arm.pdf)\n\n#### Processors\n[Cortex-M23 Technical Reference Manual](https://static.docs.arm.com/ddi0550/c/cortex_m23_r1p0_technical_reference_manual_DDI0550C_en.pdf)\n\n[Cortex-M33 Technical Reference Manual](https://static.docs.arm.com/100230/0004/cortex_m33_trm_100230_0004_00_en.pdf)\n\n### CMSIS-DAP\n[CMSIS-DAP Spec](https://arm-software.github.io/CMSIS_5/DAP/html/index.html)\n\n## RISC-V\n\n[RISC-V Debug Specification](https://github.com/riscv/riscv-debug-spec/blob/release/riscv-debug-release.pdf)\n\n\n## ELF\n[Program Header](https://docs.oracle.com/cd/E19683-01/816-1386/chapter6-83432/index.html)\n\n[Section Header](https://docs.oracle.com/cd/E19683-01/816-1386/6m7qcoblj/index.html)\n"
        },
        {
          "name": "changelog",
          "type": "tree",
          "content": null
        },
        {
          "name": "deny.toml",
          "type": "blob",
          "size": 11.05078125,
          "content": "# This template contains all of the possible sections and their default values\n\n# Note that all fields that take a lint level have these possible values:\n# * deny - An error will be produced and the check will fail\n# * warn - A warning will be produced, but the check will not fail\n# * allow - No warning or error will be produced, though in some cases a note\n# will be\n\n# The values provided in this template are the default values that will be used\n# when any section or field is not specified in your own configuration\n\n# Root options\n\n# The graph table configures how the dependency graph is constructed and thus\n# which crates the checks are performed against\n[graph]\n# If 1 or more target triples (and optionally, target_features) are specified,\n# only the specified targets will be checked when running `cargo deny check`.\n# This means, if a particular package is only ever used as a target specific\n# dependency, such as, for example, the `nix` crate only being used via the\n# `target_family = \"unix\"` configuration, that only having windows targets in\n# this list would mean the nix crate, as well as any of its exclusive\n# dependencies not shared by any other crates, would be ignored, as the target\n# list here is effectively saying which targets you are building for.\ntargets = [\n    # The triple can be any string, but only the target triples built in to\n    # rustc (as of 1.40) can be checked against actual config expressions\n    #{ triple = \"x86_64-unknown-linux-musl\" },\n    # You can also specify which target_features you promise are enabled for a\n    # particular target. target_features are currently not validated against\n    # the actual valid features supported by the target architecture.\n    #{ triple = \"wasm32-unknown-unknown\", features = [\"atomics\"] },\n]\n# When creating the dependency graph used as the source of truth when checks are\n# executed, this field can be used to prune crates from the graph, removing them\n# from the view of cargo-deny. This is an extremely heavy hammer, as if a crate\n# is pruned from the graph, all of its dependencies will also be pruned unless\n# they are connected to another crate in the graph that hasn't been pruned,\n# so it should be used with care. The identifiers are [Package ID Specifications]\n# (https://doc.rust-lang.org/cargo/reference/pkgid-spec.html)\n#exclude = []\n# If true, metadata will be collected with `--all-features`. Note that this can't\n# be toggled off if true, if you want to conditionally enable `--all-features` it\n# is recommended to pass `--all-features` on the cmd line instead\nall-features = true\n# If true, metadata will be collected with `--no-default-features`. The same\n# caveat with `all-features` applies\nno-default-features = false\n# If set, these feature will be enabled when collecting metadata. If `--features`\n# is specified on the cmd line they will take precedence over this option.\n#features = []\n\n# The output table provides options for how/if diagnostics are outputted\n[output]\n# When outputting inclusion graphs in diagnostics that include features, this\n# option can be used to specify the depth at which feature edges will be added.\n# This option is included since the graphs can be quite large and the addition\n# of features from the crate(s) to all of the graph roots can be far too verbose.\n# This option can be overridden via `--feature-depth` on the cmd line\nfeature-depth = 1\n\n# This section is considered when running `cargo deny check advisories`\n# More documentation for the advisories section can be found here:\n# https://embarkstudios.github.io/cargo-deny/checks/advisories/cfg.html\n[advisories]\n# New version of config format, silence deprecation warnings\nversion = 2\n\n# The path where the advisory database is cloned/fetched into\ndb-path = \"~/.cargo/advisory-db\"\n# The url(s) of the advisory databases to use\ndb-urls = [\"https://github.com/rustsec/advisory-db\"]\n# The lint level for crates that have been yanked from their source registry\nyanked = \"warn\"\n# A list of advisory IDs to ignore. Note that ignored advisories will still\n# output a note when they are encountered.\nignore = [\n    #\"RUSTSEC-0000-0000\",\n    #\"RUSTSEC-2020-0071\",\n    #\"RUSTSEC-2023-0052\",\n    #\"RUSTSEC-2023-0053\",\n]\n# Threshold for security vulnerabilities, any vulnerability with a CVSS score\n# lower than the range specified will be ignored. Note that ignored advisories\n# will still output a note when they are encountered.\n# * None - CVSS Score 0.0\n# * Low - CVSS Score 0.1 - 3.9\n# * Medium - CVSS Score 4.0 - 6.9\n# * High - CVSS Score 7.0 - 8.9\n# * Critical - CVSS Score 9.0 - 10.0\n#severity-threshold =\n\n# If this is true, then cargo deny will use the git executable to fetch advisory database.\n# If this is false, then it uses a built-in git library.\n# Setting this to true can be helpful if you have special authentication requirements that cargo-deny does not support.\n# See Git Authentication for more information about setting up git authentication.\n#git-fetch-with-cli = true\n\n# This section is considered when running `cargo deny check licenses`\n# More documentation for the licenses section can be found here:\n# https://embarkstudios.github.io/cargo-deny/checks/licenses/cfg.html\n[licenses]\n# New version of config format, silence deprecation warnings\nversion = 2\n\n# List of explicitly allowed licenses\n# See https://spdx.org/licenses/ for list of possible licenses\n# [possible values: any SPDX 3.11 short identifier (+ optional exception)].\nallow = [\n    \"0BSD\",\n    \"Apache-2.0\",\n    \"BSD-2-Clause\",\n    \"BSD-3-Clause\",\n    \"BSL-1.0\",\n    \"CC0-1.0\",\n    \"ISC\",\n    \"MIT\",\n    \"MIT-0\",\n    \"MPL-2.0\",\n    \"Zlib\",\n    \"Unicode-3.0\",\n    \"OpenSSL\",\n]\n# The confidence threshold for detecting a license from license text.\n# The higher the value, the more closely the license text must be to the\n# canonical license text of a valid SPDX license file.\n# [possible values: any between 0.0 and 1.0].\nconfidence-threshold = 0.8\n# Allow 1 or more licenses on a per-crate basis, so that particular licenses\n# aren't accepted for every possible crate as with the normal allow list\nexceptions = [\n    # Each entry is the crate and version constraint, and its specific allow\n    # list\n    #{ allow = [\"Zlib\"], name = \"adler32\", version = \"*\" },\n]\n\n# Some crates don't have (easily) machine readable licensing information,\n# adding a clarification entry for it allows you to manually specify the\n# licensing information\n[[licenses.clarify]]\n# The name of the crate the clarification applies to\nname = \"ring\"\n# The optional version constraint for the crate\nversion = \"*\"\n# The SPDX expression for the license requirements of the crate\nexpression = \"MIT AND ISC AND OpenSSL\"\n# One or more files in the crate's source used as the \"source of truth\" for\n# the license expression. If the contents match, the clarification will be used\n# when running the license check, otherwise the clarification will be ignored\n# and the crate will be checked normally, which may produce warnings or errors\n# depending on the rest of your configuration\nlicense-files = [\n    # Each entry is a crate relative path, and the (opaque) hash of its contents\n    { path = \"LICENSE\", hash = 0xbd0eed23 },\n]\n\n[licenses.private]\n# If true, ignores workspace crates that aren't published, or are only\n# published to private registries.\n# To see how to mark a crate as unpublished (to the official registry),\n# visit https://doc.rust-lang.org/cargo/reference/manifest.html#the-publish-field.\nignore = true\n# One or more private registries that you might publish crates to, if a crate\n# is only published to private registries, and ignore is true, the crate will\n# not have its license(s) checked\nregistries = [\n    #\"https://sekretz.com/registry\n]\n\n# This section is considered when running `cargo deny check bans`.\n# More documentation about the 'bans' section can be found here:\n# https://embarkstudios.github.io/cargo-deny/checks/bans/cfg.html\n[bans]\n# Lint level for when multiple versions of the same crate are detected\nmultiple-versions = \"allow\"\n# Lint level for when a crate version requirement is `*`\nwildcards = \"deny\"\n# The graph highlighting used when creating dotgraphs for crates\n# with multiple versions\n# * lowest-version - The path to the lowest versioned duplicate is highlighted\n# * simplest-path - The path to the version with the fewest edges is highlighted\n# * all - Both lowest-version and simplest-path are used\nhighlight = \"all\"\n# The default lint level for `default` features for crates that are members of\n# the workspace that is being checked. This can be overriden by allowing/denying\n# `default` on a crate-by-crate basis if desired.\nworkspace-default-features = \"allow\"\n# The default lint level for `default` features for external crates that are not\n# members of the workspace. This can be overriden by allowing/denying `default`\n# on a crate-by-crate basis if desired.\nexternal-default-features = \"allow\"\n# List of crates that are allowed. Use with care!\nallow = [\n    #{ name = \"ansi_term\", version = \"=0.11.0\" },\n]\n# List of crates to deny\ndeny = [\n    # Linking to openssl is painful\n    { name = \"openssl\" },\n    # Each entry the name of a crate and a version range. If version is\n    # not specified, all versions will be matched.\n    #{ name = \"ansi_term\", version = \"=0.11.0\" },\n    #\n    # Wrapper crates can optionally be specified to allow the crate when it\n    # is a direct dependency of the otherwise banned crate\n    #{ name = \"ansi_term\", version = \"=0.11.0\", wrappers = [] },\n]\n\n# List of features to allow/deny\n# Each entry the name of a crate and a version range. If version is\n# not specified, all versions will be matched.\n#[[bans.features]]\n#name = \"reqwest\"\n# Features to not allow\n#deny = [\"json\"]\n# Features to allow\n#allow = [\n#    \"rustls\",\n#    \"__rustls\",\n#    \"__tls\",\n#    \"hyper-rustls\",\n#    \"rustls\",\n#    \"rustls-pemfile\",\n#    \"rustls-tls-webpki-roots\",\n#    \"tokio-rustls\",\n#    \"webpki-roots\",\n#]\n# If true, the allowed features must exactly match the enabled feature set. If\n# this is set there is no point setting `deny`\n#exact = true\n\n# Certain crates/versions that will be skipped when doing duplicate detection.\nskip = [\n    #{ name = \"ansi_term\", version = \"=0.11.0\" },\n]\n# Similarly to `skip` allows you to skip certain crates during duplicate\n# detection. Unlike skip, it also includes the entire tree of transitive\n# dependencies starting at the specified crate, up to a certain depth, which is\n# by default infinite.\nskip-tree = [\n    #{ name = \"ansi_term\", version = \"=0.11.0\", depth = 20 },\n]\n\n# This section is considered when running `cargo deny check sources`.\n# More documentation about the 'sources' section can be found here:\n# https://embarkstudios.github.io/cargo-deny/checks/sources/cfg.html\n[sources]\n# Lint level for what to happen when a crate from a crate registry that is not\n# in the allow list is encountered\nunknown-registry = \"warn\"\n# Lint level for what to happen when a crate from a git repository that is not\n# in the allow list is encountered\nunknown-git = \"deny\"\n# List of URLs for allowed crate registries. Defaults to the crates.io index\n# if not specified. If it is specified but empty, no registries are allowed.\nallow-registry = [\"https://github.com/rust-lang/crates.io-index\"]\n# List of URLs for allowed Git repositories\nallow-git = []\n"
        },
        {
          "name": "dist-workspace.toml",
          "type": "blob",
          "size": 1.3828125,
          "content": "[workspace]\nmembers = [\"cargo:.\"]\n\n# Config for 'dist'\n[dist]\n# The preferred dist version to use in CI (Cargo.toml SemVer syntax)\ncargo-dist-version = \"0.26.1\"\n# CI backends to support\nci = \"github\"\n# Target platforms to build apps for (Rust target-triple syntax)\ntargets = [\"aarch64-apple-darwin\", \"aarch64-unknown-linux-gnu\", \"x86_64-apple-darwin\", \"x86_64-unknown-linux-gnu\", \"x86_64-pc-windows-msvc\"]\n# Build only the required packages, and individually\nprecise-builds = true\n# The archive format to use for non-windows builds (defaults .tar.xz)\nunix-archive = \".tar.xz\"\n# The installers to generate for each app\ninstallers = [\"shell\", \"powershell\", \"homebrew\"]\n# Which actions to run on pull requests\npr-run-mode = \"plan\"\n# A GitHub repo to push Homebrew formulas to\ntap = \"probe-rs/homebrew-probe-rs\"\n# A prefix git tags must include for dist to care about them\ntag-namespace = \"v\"\n# Publish jobs to run in CI\npublish-jobs = [\"homebrew\"]\n# Whether to install an updater program\ninstall-updater = false\n# Path that installers should place binaries in\ninstall-path = \"CARGO_HOME\"\n# Whether to enable GitHub Attestations\ngithub-attestations = true\n\n# Select custom runner for ARM Linux\n[dist.github-custom-runners]\naarch64-unknown-linux-gnu = \"buildjet-2vcpu-ubuntu-2204-arm\"\naarch64-unknown-linux-musl = \"buildjet-2vcpu-ubuntu-2204-arm\"\n\n[dist.dependencies.apt]\nlibudev-dev = '*'\nlibudev1 = { stage = [\"run\"] }\n"
        },
        {
          "name": "doc",
          "type": "tree",
          "content": null
        },
        {
          "name": "probe-rs-debug",
          "type": "tree",
          "content": null
        },
        {
          "name": "probe-rs-mi",
          "type": "tree",
          "content": null
        },
        {
          "name": "probe-rs-target",
          "type": "tree",
          "content": null
        },
        {
          "name": "probe-rs-tools",
          "type": "tree",
          "content": null
        },
        {
          "name": "probe-rs",
          "type": "tree",
          "content": null
        },
        {
          "name": "renovate.json",
          "type": "blob",
          "size": 0.2333984375,
          "content": "{\n  \"$schema\": \"https://docs.renovatebot.com/renovate-schema.json\",\n  \"extends\": [\"config:base\", \"group:allNonMajor\", \"schedule:weekly\"],\n  \"ignorePaths\": [\".github/workflows/release.yml\"],\n  \"labels\": [\"changelog:skip\", \"dependencies\"]\n}\n"
        },
        {
          "name": "rtthost",
          "type": "tree",
          "content": null
        },
        {
          "name": "rust-toolchain.toml",
          "type": "blob",
          "size": 0.12109375,
          "content": "[toolchain]\nchannel = \"1.84.0\"\n\ncomponents = [\"rustfmt\", \"clippy\"]\n# Target used for tests\ntargets = [\"thumbv7m-none-eabi\"]\n"
        },
        {
          "name": "smoke-tester",
          "type": "tree",
          "content": null
        },
        {
          "name": "target-gen",
          "type": "tree",
          "content": null
        },
        {
          "name": "xtask",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}