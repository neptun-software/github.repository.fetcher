{
  "metadata": {
    "timestamp": 1736709235805,
    "page": 543,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjU1MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "LukeMathWalker/pavex",
      "stars": 1813,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.314453125,
          "content": "/libs/ui_tests/target\n/libs/ui_tests/**/generated_app/\n/libs/ui_tests/Cargo.lock\n/libs/target\n/libs/vendor\n/ci_utils/target\n/doc_examples/tutorial_envs/\n/doc_examples/**/target\n/examples/**/vendor\n/examples/**/target\n/examples/**/.cargo\n/.cargo\n/vendor\n.DS_Store\n*.snap\ntrace-*.json\n/.cache/\n/docs/api_reference/\n.direnv/\n"
        },
        {
          "name": "ARCHITECTURE.md",
          "type": "blob",
          "size": 13.826171875,
          "content": "# Architecture\n\nThis document gives you a bird-eye view of Pavex's architecture.  \nThis is an ideal starting point if you want to contribute or gain a deeper understanding of its inner workings.\n\n> If you've never used Pavex before, we recommend going through the [user-facing guide](https://pavex.dev/docs/) first.\n> It'll be a lot easier to understand the terminology used in this document if you've used the framework first-hand.\n\n## How does Pavex work?\n\nA Pavex project goes through three stages to generate runnable application code:\n\n1. Define your request handlers, middlewares, constructors, error observers and error handlers\n2. Combine them into a `Blueprint`, a representation of the desired API behavior\n3. Generate the API server SDK via `pavex_cli`, using the `Blueprint` as input\n\nIn a diagram:\n\n```mermaid\nflowchart TB\n    app_rh[Request handlers] --> app_b\n    app_eh[Error handlers] --> app_b\n    app_c[Constructors] --> app_b\n\n    app_b[Blueprint] -->|Used by pavex_cli to generate| api_sdk[API server SDK]\n    api_sdk -->|Consumed by| api_binary[API binary]\n    api_sdk -->|Consumed by| tests[Black-box tests]\n```\n\nTo accomplish these tasks, users interact with two different components:\n\n- `pavex`, containing both the machinery to define a `Blueprint` and the \"typical\" web framework utilities (request, response, extractors, etc.);\n- `pavex`'s CLI, the transpiler.\n\n### `pavex`\n\nYou can put most of the machinery in the `pavex` crate in the same bucket of `axum` or `actix-web`: \nthe types and abstractions that are needed at runtime to handle incoming requests.\n\nYou will see `pavex` in two contexts:\n\n- in the signature and implementations of route handlers and type constructors, written by application developers;\n- in the source code generated by `pavex_cli`.\n\n```rust\nuse pavex::response::Response;\n\n// A request handler, returning a response as output.\n// The response type is defined in the `pavex` crate.\npub fn stream_file(\n    inner: std::path::PathBuf,\n    http_client: reqwest::Client,\n) -> Response { /* */ }\n```\n\n### `pavex::blueprint`\n\n`pavex::blueprint` is the module in the `pavex` crate containing the interface used to craft a `Blueprint`â€”a specification of \nhow the application is supposed to behave at runtime.\n\n```rust\nuse pavex::blueprint::{Blueprint, constructor::Lifecycle};\nuse pavex::blueprint::route::GET;\nuse pavex::f;\n\n/// The blueprint for our application.\n/// It lists all its routes and provides constructors for all the types\n/// that will be needed to invoke `stream_file`, our request handler.\n///\n/// This will be turned into a ready-to-run web server by `pavex_cli`.\npub fn blueprint() -> Blueprint {\n    let mut bp = Blueprint::new();\n    bp.constructor(f!(crate::load_configuration), Lifecycle::Singleton);\n    bp.constructor(f!(crate::http_client), Lifecycle::Singleton);\n    bp.constructor(f!(crate::extract_path), Lifecycle::RequestScoped);\n    bp.constructor(f!(crate::logger), Lifecycle::Transient);\n    bp.route(GET, \"/home\", f!(crate::stream_file));\n    bp\n}\n```\n\nA `Blueprint` captures information about **components**:\n\n- request handlers (e.g. use `my_handler` for all incoming `/home` requests);\n- type constructors (e.g. use `my_constructor` every time you need to build an instance of type `MyType`).\n- middlewares\n- error handlers\n- error observers\n\nFor each type constructor, the developer must specify the lifecycle of its output type:\n\n- _singleton_ - an instance is built once, before the application starts, and re-used for all incoming requests;\n- _request-scoped_ - a new instance is built for every incoming request and re-used throughout the handling of that\n  specific request;\n- _transient_ - a new instance is built every time the type is needed, potentially multiple times for each incoming\n  request.\n\nAll this information is encoded into the `Blueprint` and passed as input to `pavex`'s CLI to generate the API server SDK's\nsource code.\n\n### `pavex`'s CLI and Pavex\n\n`pavex`'s CLI is our transpiler, the component in charge of transforming a `Blueprint` into a ready-to-run web\nserver.  \nIt is packaged as a binary, a thin wrapper over the (internal) `pavexc`'s CLI.\n\nThe transpiler is where most of the complexity lives.  \nIt must generate:\n\n- a struct representing the application state;\n- a function to build an instance of the application state, ahead of launching the web server;\n- a function to build the HTTP router;\n- a dispatch function (built on top of the HTTP router) to dispatch incoming requests to the correct handlers;\n- for each route, a function that takes as input the server state and the incoming request while returning an HTTP\n  response as output.\n\nWhat is `pavex`'s CLI getting as input?  \nSomething that looks like this:\n\n```text\n(\n    constructors: [\n        (\n            registered_at: \"app\",\n            import_path: \"crate :: http_client\",\n        ),\n        (\n            registered_at: \"app\",\n            import_path: \"crate :: extract_path\",\n        ),\n        (\n            registered_at: \"app\",\n            import_path: \"crate :: logger\",\n        ),\n    ],\n    handlers: [\n        (\n            registered_at: \"app\",\n            import_path: \"crate :: stream_file\",\n        ),\n    ],\n    component_lifecycles: {\n        (\n            registered_at: \"app\",\n            import_path: \"crate :: http_client\",\n        ): Singleton,\n        (\n            registered_at: \"app\",\n            import_path: \"crate :: extract_path\",\n        ): RequestScoped,\n        (\n            registered_at: \"app\",\n            import_path: \"crate :: logger\",\n        ): Transient,\n    },\n    router: {\n        \"/home\": (\n            registered_at: \"app\",\n            import_path: \"crate :: stream_file\",\n        ),\n    },\n    handler_locations: { /* */ },\n    constructor_locations: { /* */ }\n)\n```\n\nWe have the raw path of the functions and methods registered by the developer. We need to turn this into working source\ncode!\n\nTo make this happen, we need to turn those strings into structured metadata.  \nFor each of those functions and methods, we want to know:\n\n- their input parameters;\n- their output type.\n\nBut Rust does not have reflection, nor at compile-time nor at runtime!  \nLuckily enough, there is a feature currently baking in `nightly` that, if you squint hard enough, looks like\nreflection: `rustdoc`'s JSON output.\n\nUsing\n\n```bash\ncargo +nightly rustdoc -p library_name --lib -- -Zunstable-options -wjson\n```\n\nYou can get a structured representation of all the types in `library_name`.  \nThis is what Pavex does: for each registered route handler and constructor, it builds the documentation for the crate\nit belongs to and extracts the relevant bits of information from `rustdoc`'s output.\n\nIf you are going through the source code, this is the process that converts a `RawCallableIdentifiers` into a `Callable`, \nwith `ResolvedPath` as an intermediate step.\n\n`Callable` looks like this:\n\n```rust\nstruct Callable {\n    pub output_fq_path: ResolvedType,\n    pub callable_fq_path: ResolvedPath,\n    pub inputs: Vec<ResolvedType>,\n}\n\npub struct ResolvedType {\n    pub package_id: PackageId,\n    pub base_type: Vec<String>,\n    pub generic_arguments: Vec<ResolvedType>,\n}\n```\n\nAfter this phase, we have a collection of `Callable` instances representing our constructors and handlers.  \nIt's a puzzle that we need to solve, starting from the handlers: how do we build instances of the types that they take\nas inputs?\n\nThe framework machinery, as we discussed before, provides the request processing pipeline with two types out of the box:\nthe incoming request and the application state.  \nThe constructors registered by the developer can then be used to _transform_ those types and/or _extract_ information\nout of them.\n\nFor each handler, we try to build a **dependency graph**: we go through the input types of the request handler function\nand check if we have a corresponding constructor that returns an instance of that type; if we do, we then recursively\nlook at the constructor signature to find out what types _the constructor_ needs as inputs; we recurse further, until we\nhave everything mapped out as a graph with graph edges used to keep track of the \"is needed to build\" relationship.\n\nTo put in an image, we want to build something like this for each route:\n\n```mermaid\nflowchart TB\n    handler[\"app::stream_file(std::path::Pathbuf, app::Logger, reqwest::Client)\"]\n    client[reqwest::Client]\n    logger[app::Logger]\n    config[app::Config]\n    path[std::path::PathBuf]\n    request[pavex::request::RequestHead]\n\n    config --> client\n    client --> handler\n    logger --> handler\n    path --> handler\n    request --> path\n```\n\nThis information is encoded in the `DependencyGraph` struct.  \nAt this point, we are only looking at types and signatures: we are not taking into account the _lifecycle_ of those\ntypes.  \nE.g. is `reqwest::Client` a singleton that needs to be built once and reused?\nOr a transient type, that must be built from scratch every time it is needed?\n\nBy taking into account these additional pieces of information, we build a `CallGraph` for each handler function.\nIt looks somewhat like this:\n\n```mermaid\nflowchart TB\n    handler[\"app::stream_file(std::path::Pathbuf, app::Logger, reqwest::Client)\"]\n    client[reqwest::Client]\n    logger[app::Logger]\n    state[ServerState]\n    path[std::path::PathBuf]\n    request[pavex::request::RequestHead]\n\n    state --> client\n    client --> handler\n    logger --> handler\n    path --> handler\n    request --> path\n```\n\nYou can spot how `reqwest::Client` is now fetched from `app::ServerState` instead of being built from scratch\nfrom `app::Config`.\n\nArmed with this representation, Pavex can now generate the source code for the server SDK crate.  \nUsing the same example, assuming the application has a single route, we get the following code:\n\n```rust\nuse pavex::routing::Router;\nuse pavex::hyper::server::{Builder, conn::AddrIncoming};\nuse pavex::request::RequestHead;\nuse pavex::response::Response;\n\nstruct ServerState {\n    router: Router<u32>,\n    application_state: ApplicationState,\n}\n\npub struct ApplicationState {\n    s0: app::HttpClient,\n}\n\n/// The entrypoint to build the application state, a pre-requisite to launching the web server.\npub fn build_application_state(v0: app::Config) -> crate::ApplicationState {\n    // [...]\n}\n\n/// The entrypoint to launch the web server.\npub async fn run(\n    server_builder: Builder<AddrIncoming>,\n    application_state: ApplicationState,\n) -> Result<(), anyhow::Error> {\n    // [...]\n}\n\nfn route_request(\n    request: &RequestHead,\n    server_state: std::sync::Arc<ServerState>,\n) -> Response {\n    let route_id = server_state\n        .router\n        .at(request.uri().path())\n        .expect(\"Failed to match incoming request path\");\n    match route_id.value {\n        0u32 => route_handler_0(server_state.application_state.s0.clone(), request),\n        _ => panic!(\"This is a bug, no route registered for a route id\"),\n    }\n}\n\npub fn route_handler_0(\n    v0: app::HttpClient,\n    v1: RequestHead,\n) -> Response {\n    let v2 = app::extract_path(v1);\n    let v3 = app::logger();\n    app::stream_file(v2, v3, v0)\n}\n```\n\n## Issues, limitations and risks\n\nThis section focuses on issues, limitations and risks that sit outside the Pavex project itself: obstacles that we\ncannot remove on our own, but require coordination/collaboration with other projects.\n\nEach risk is classified over two dimensions: impact and resolution likelihood.\n\nFor impact, we use the following emojis:\n\n- ðŸ˜­, severe impact on the developer experience/viability of the project;\n- ðŸ˜¢, medium impact on the developer experience/viability of the project.\n\nFor resolution likelihood, we use the following emojis:\n\n- ðŸ”´, unlikely to be remediated on a medium time-horizon (>6 months, <2 years);\n- ðŸŸ¡, likely to be remediated on a medium time-horizon.\n\nWe do not care about the short term since Pavex itself still requires tons of work to be viable and it's unlikely to\nbe ready for prime time in less than 6 months.\n\n### `rustdoc`'s JSON output is unstable (ðŸŸ¡ðŸ˜¢)\n\n`rustdoc`'s JSON output requires the `nightly` compiler.  \nThis is not a showstopper for production usage of Pavex since `nightly` is never used to compile\nany code that is actually run at runtime, it is only used by the \"reflection engine\". Nonetheless, `nightly` can cause\nbreakage and unnecessary disruption due to its instability. `rustdoc`'s JSON output itself is quickly evolving,\nincluding breaking changes that we must keep up with.\n\n_Plan_:\n\n- Sit and wait. `rustdoc`'s JSON output is likely to be stabilised, therefore we will be able to drop `nightly` not too\n  far into the future.\n\n### `rustdoc` is slow (ðŸ”´ðŸ˜¢)\n\nGenerating the JSON representation of `rustdoc`'s output takes time, especially if we need to generate it for several\ncrates in the dependency tree.\n\n_Current remediations_:\n\n- `rustdoc`'s JSON output for third-party dependencies is highly cacheable given the dependency version and the set of\n  activated features. `pavex_cli` uses SQLite to implement a per-user centralized cache of the JSON docs for all third-party crates that have been needed at least once.\n\n_Future avenues_:\n\n- The idea of hosting the JSON version of a crate's docs has\n  been [floated around](https://github.com/rust-lang/docs.rs/issues/1285). This would allow us to download the rendered\n  JSON instead of having to build it every time from scratch.\n\n### `pavex`'s CLI cannot be run from a build script (ðŸ”´ðŸ˜­)\n\nDue to `cargo`'s very coarse locking scheme, it is not possible to invoke `cargo` itself from a `build.rs` script (\nsee [tracking issue](https://github.com/rust-lang/cargo/issues/6412)).  \nPavex relies on `cargo` commands to:\n\n- build `rustdoc`'s JSON output for local and third-party crates;\n- analyze the dependency tree (via `guppy` which in turn relies on `cargo metadata`);\n- find the workspace root (via `guppy` which in turn relies on `cargo metadata`).\n\nThere seems to be no active effort to remove this limitation.\n\n_Current remediations_:\n\nPavex will rely on [`cargo-px`](https://github.com/LukeMathWalker/cargo-px) for code generation.\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 4.779296875,
          "content": "# Contributing\n\nIt's early days and the focus, right now, is on user documentation.  \nNonetheless, the instructions below should be enough to get you going if you choose to submit a pull request!  \nI suggest looking at [`ARCHITECTURE.md`](ARCHITECTURE.md) as well to get a sense of the overall project structure.\n\n## CONTRIBUTORS.md\n\nIf you choose to contribute to Pavex,\nyou must add yourself to the [CONTRIBUTORS.md](CONTRIBUTORS.md) file.\nIt is a lightweight alternative to a full-blown [contributor license agreement](https://www.djangoproject.com/foundation/cla/faq/).\n\n## Unsolicited contributions\n\nTypo in documentation? Open a PR straight-away!  \nSmall bug fix with a regression test? Open a PR straight-away!  \nAnything beyond 20 lines of code? **Open an issue first**.\n\n# Prerequisites\n\n- Rust's stable toolchain (`rustup toolchain install stable`);\n- Rust's nightly toolchain (`rustup toolchain install nightly`);\n- [`cargo-px`](https://lukemathwalker.github.io/cargo-px/)\n\n# Running tests\n\n```bash\ncargo test \n```\n\nWe primarily rely on end-to-end testing to check that Pavex's behaviour meets our expectations.  \nAll tests are located in `libs/pavex_cli/tests` and are launched using a custom test runner that you can find in `libs/pavex_test_runner`.\n\nIn a nutshell:\n\n- each test needs to live in its own folder;\n- each test must include a `test_config.toml` explaining what the test is about and/or configuring expectations;\n- all testing is snapshot-based and the expected outcomes must be provided in an `expectations` sub-folder;\n- if the test is expected to pass, we check the generated code and the graph diagnostics;\n- if the test is expected to fail, we check `stderr` to verify the quality of the error message returned to users.\n\n## Test runtime environment\n\nFor each test, a runtime environment is created as a sub-folder of `ui_test_envs`, which is in turn generated at the root of Pavex's workspace.  \nWe use a consistent folder to leverage `cargo` caching and speed up successive test runs. It also allows you to easily inspect the artifacts generated during the test run.  \nIf you suspect that something funny is going on due to cross-run contamination, delete the `ui_test_envs` folder to get a clean slate.\n\n## Updating saved snapshots\n\nThe generated code or the graph diagnostics may not match our expectations.  \nThe test runner will save the unexpected output in a file named like the expectation file with an additional `.snap` suffix. You can then choose to update the saved snapshot via our utility CLI:\n\n```bash\n# It must be run from the root folder of the libs workspace\ncargo r --bin snaps\n```\n\nIt will cycle through all `.snap` files and print the changeset with respect to our previous expectations.  \nYou will then be prompted to decide if you want to update the saved snapshot to match the new value or if you prefer to keep it as it.\n\n# Updating code examples in the documentation\n\nMost snippets in the documentation hosted on [pavex.dev](https://pavex.dev/docs) are **automatically generated**.  \n\nIn the documentation file, you'll see an include directive that looks like this:\n\n```markdown\n--8<-- \"doc_examples/quickstart/06-extract.snap\"\n```\n\nThe path is relative to the root of the repository.  \n**Do not modify `*.snap` files directly**. \nIf you do, the `is-up-to-date` CI check will fail when you open a pull request.\n\n## `tutorial_generator`\n\nAll snippets are extracted using the `tutorial_generator` binary, \ndefined in the [`doc_examples/tutorial_generator`](doc_examples/tutorial_generator) folder.  \nTo work on docs, start by installing it:\n\n```bash\ncargo install --path doc_examples/tutorial_generator\n```\n\nThen install the `pavexc` binary from path to make sure that any change you made locally is picked up:\n\n```bash\ncargo install --path libs/pavexc_cli\n```\n\nThen, to regenerate the snippets:\n\n```bash\ncd doc_examples\n# `PAVEX_PAVEXC` tells the generator to use the locally installed `pavexc` binary\n# rather than the one from crates.io\nPAVEX_PAVEXC=pavexc tutorial_generator\n```\n\nYou can also choose to regenerate the snippet for a subset of the documentation. E.g. to regenerate the snippets for the quickstart:\n\n```bash\ncd doc_examples/quickstart\nPAVEX_PAVEXC=pavexc tutorial_generator\n```\n\n## `tutorial.yml`\n\nEach \"group\" of documentation snippets is identified by a `tutorial.yml` file.  \nIt specifies:\n\n- the starter code for the group\n- `git` patches that should be applied on top of the starter code\n\nAt every stage of the commit history for the doc project, you can specify in `tutorial.yml`:\n\n- which snippets should be extracted\n- which commands should be run (and what their outcome should be)\n\nFor a comprehensive example,\ncheck out the [tutorial.yml](doc_examples/quickstart/tutorial.yml) for the quickstart guide.  \nFor a reference of the available commands, check out the source code of the `tutorial_generator` binary."
        },
        {
          "name": "CONTRIBUTORS.md",
          "type": "blob",
          "size": 0.662109375,
          "content": "# Contributors\n\nWe contributors to Pavex:\n\n* License all our contributions to the project under the Apache License, Version 2.0\n* Have the legal rights to license our contributions ourselves, or get permission to license them from our employers, clients, or others who may have them\n* Add our names and GitHub handles to this CONTRIBUTORS.md file to create a permanent record that users, distributors, and other contributors can all rely on\n\n-----------\n* Luca Palmieri (@LukeMathWalker)\n* Bozhidar Atanasov (@Bobby-Wan)\n* Karl Lindfors (@darkkeh)\n* Harry Barber (@hlbarber)\n* Jan Ehrhardt (@jehrhardt)\n* Lukas Slanius (@bosukas)\n* Ben Wishovich (@benwis)\n* Donmai (@donmai-me)\n"
        },
        {
          "name": "LICENSE-APACHE",
          "type": "blob",
          "size": 9.4951171875,
          "content": "                              Apache License\n                        Version 2.0, January 2004\n                     http://www.apache.org/licenses/\n\nTERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n1. Definitions.\n\n   \"License\" shall mean the terms and conditions for use, reproduction,\n   and distribution as defined by Sections 1 through 9 of this document.\n\n   \"Licensor\" shall mean the copyright owner or entity authorized by\n   the copyright owner that is granting the License.\n\n   \"Legal Entity\" shall mean the union of the acting entity and all\n   other entities that control, are controlled by, or are under common\n   control with that entity. For the purposes of this definition,\n   \"control\" means (i) the power, direct or indirect, to cause the\n   direction or management of such entity, whether by contract or\n   otherwise, or (ii) ownership of fifty percent (50%) or more of the\n   outstanding shares, or (iii) beneficial ownership of such entity.\n\n   \"You\" (or \"Your\") shall mean an individual or Legal Entity\n   exercising permissions granted by this License.\n\n   \"Source\" form shall mean the preferred form for making modifications,\n   including but not limited to software source code, documentation\n   source, and configuration files.\n\n   \"Object\" form shall mean any form resulting from mechanical\n   transformation or translation of a Source form, including but\n   not limited to compiled object code, generated documentation,\n   and conversions to other media types.\n\n   \"Work\" shall mean the work of authorship, whether in Source or\n   Object form, made available under the License, as indicated by a\n   copyright notice that is included in or attached to the work\n   (an example is provided in the Appendix below).\n\n   \"Derivative Works\" shall mean any work, whether in Source or Object\n   form, that is based on (or derived from) the Work and for which the\n   editorial revisions, annotations, elaborations, or other modifications\n   represent, as a whole, an original work of authorship. For the purposes\n   of this License, Derivative Works shall not include works that remain\n   separable from, or merely link (or bind by name) to the interfaces of,\n   the Work and Derivative Works thereof.\n\n   \"Contribution\" shall mean any work of authorship, including\n   the original version of the Work and any modifications or additions\n   to that Work or Derivative Works thereof, that is intentionally\n   submitted to Licensor for inclusion in the Work by the copyright owner\n   or by an individual or Legal Entity authorized to submit on behalf of\n   the copyright owner. For the purposes of this definition, \"submitted\"\n   means any form of electronic, verbal, or written communication sent\n   to the Licensor or its representatives, including but not limited to\n   communication on electronic mailing lists, source code control systems,\n   and issue tracking systems that are managed by, or on behalf of, the\n   Licensor for the purpose of discussing and improving the Work, but\n   excluding communication that is conspicuously marked or otherwise\n   designated in writing by the copyright owner as \"Not a Contribution.\"\n\n   \"Contributor\" shall mean Licensor and any individual or Legal Entity\n   on behalf of whom a Contribution has been received by Licensor and\n   subsequently incorporated within the Work.\n\n2. Grant of Copyright License. Subject to the terms and conditions of\n   this License, each Contributor hereby grants to You a perpetual,\n   worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n   copyright license to reproduce, prepare Derivative Works of,\n   publicly display, publicly perform, sublicense, and distribute the\n   Work and such Derivative Works in Source or Object form.\n\n3. Grant of Patent License. Subject to the terms and conditions of\n   this License, each Contributor hereby grants to You a perpetual,\n   worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n   (except as stated in this section) patent license to make, have made,\n   use, offer to sell, sell, import, and otherwise transfer the Work,\n   where such license applies only to those patent claims licensable\n   by such Contributor that are necessarily infringed by their\n   Contribution(s) alone or by combination of their Contribution(s)\n   with the Work to which such Contribution(s) was submitted. If You\n   institute patent litigation against any entity (including a\n   cross-claim or counterclaim in a lawsuit) alleging that the Work\n   or a Contribution incorporated within the Work constitutes direct\n   or contributory patent infringement, then any patent licenses\n   granted to You under this License for that Work shall terminate\n   as of the date such litigation is filed.\n\n4. Redistribution. You may reproduce and distribute copies of the\n   Work or Derivative Works thereof in any medium, with or without\n   modifications, and in Source or Object form, provided that You\n   meet the following conditions:\n\n   (a) You must give any other recipients of the Work or\n       Derivative Works a copy of this License; and\n\n   (b) You must cause any modified files to carry prominent notices\n       stating that You changed the files; and\n\n   (c) You must retain, in the Source form of any Derivative Works\n       that You distribute, all copyright, patent, trademark, and\n       attribution notices from the Source form of the Work,\n       excluding those notices that do not pertain to any part of\n       the Derivative Works; and\n\n   (d) If the Work includes a \"NOTICE\" text file as part of its\n       distribution, then any Derivative Works that You distribute must\n       include a readable copy of the attribution notices contained\n       within such NOTICE file, excluding those notices that do not\n       pertain to any part of the Derivative Works, in at least one\n       of the following places: within a NOTICE text file distributed\n       as part of the Derivative Works; within the Source form or\n       documentation, if provided along with the Derivative Works; or,\n       within a display generated by the Derivative Works, if and\n       wherever such third-party notices normally appear. The contents\n       of the NOTICE file are for informational purposes only and\n       do not modify the License. You may add Your own attribution\n       notices within Derivative Works that You distribute, alongside\n       or as an addendum to the NOTICE text from the Work, provided\n       that such additional attribution notices cannot be construed\n       as modifying the License.\n\n   You may add Your own copyright statement to Your modifications and\n   may provide additional or different license terms and conditions\n   for use, reproduction, or distribution of Your modifications, or\n   for any such Derivative Works as a whole, provided Your use,\n   reproduction, and distribution of the Work otherwise complies with\n   the conditions stated in this License.\n\n5. Submission of Contributions. Unless You explicitly state otherwise,\n   any Contribution intentionally submitted for inclusion in the Work\n   by You to the Licensor shall be under the terms and conditions of\n   this License, without any additional terms or conditions.\n   Notwithstanding the above, nothing herein shall supersede or modify\n   the terms of any separate license agreement you may have executed\n   with Licensor regarding such Contributions.\n\n6. Trademarks. This License does not grant permission to use the trade\n   names, trademarks, service marks, or product names of the Licensor,\n   except as required for reasonable and customary use in describing the\n   origin of the Work and reproducing the content of the NOTICE file.\n\n7. Disclaimer of Warranty. Unless required by applicable law or\n   agreed to in writing, Licensor provides the Work (and each\n   Contributor provides its Contributions) on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n   implied, including, without limitation, any warranties or conditions\n   of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n   PARTICULAR PURPOSE. You are solely responsible for determining the\n   appropriateness of using or redistributing the Work and assume any\n   risks associated with Your exercise of permissions under this License.\n\n8. Limitation of Liability. In no event and under no legal theory,\n   whether in tort (including negligence), contract, or otherwise,\n   unless required by applicable law (such as deliberate and grossly\n   negligent acts) or agreed to in writing, shall any Contributor be\n   liable to You for damages, including any direct, indirect, special,\n   incidental, or consequential damages of any character arising as a\n   result of this License or out of the use or inability to use the\n   Work (including but not limited to damages for loss of goodwill,\n   work stoppage, computer failure or malfunction, or any and all\n   other commercial damages or losses), even if such Contributor\n   has been advised of the possibility of such damages.\n\n9. Accepting Warranty or Additional Liability. While redistributing\n   the Work or Derivative Works thereof, You may choose to offer,\n   and charge a fee for, acceptance of support, warranty, indemnity,\n   or other liability obligations and/or rights consistent with this\n   License. However, in accepting such obligations, You may act only\n   on Your own behalf and on Your sole responsibility, not on behalf\n   of any other Contributor, and only if You agree to indemnify,\n   defend, and hold each Contributor harmless for any liability\n   incurred by, or claims asserted against, such Contributor by reason\n   of your accepting any such warranty or additional liability.\n\nEND OF TERMS AND CONDITIONS\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 2.990234375,
          "content": "<div align=\"center\">\n <img src=\"https://raw.githubusercontent.com/LukeMathWalker/pavex/main/logo-dark.webp#gh-dark-mode-only\" width=\"300\" alt=\"pavex\">\n <img src=\"https://raw.githubusercontent.com/LukeMathWalker/pavex/main/logo.webp#gh-light-mode-only\" width=\"300\" alt=\"pavex\" style=\"border-radius: 5%\">\n <br>\n <strong>\n   Re-imagining backend development in Rust\n </strong>\n</div>\n\n<br>\n\n## What is Pavex?\n\nPavex is a new framework to build APIs with Rust.  \n\nPavex aims to have it all: great ergonomics and high performance.   \nThe same **productivity boost** of Ruby on Rails, Spring or ASP.NET Core.  \nAs **fast** as a handwritten solution that strips away all abstractions.\n\nCheck out [Pavex's documentation](https://pavex.dev/docs/) for a thorough introduction to the framework\nand its design philosophy.\n\n## Project status\n\nPavex is currently in **closed beta**â€”you can sign up [here](https://pavex.dev) to get early access.\n\nWe regularly publish project updates.\n\nLast update: [This month in Pavex #10](https://www.lpalmieri.com/posts/this-month-in-pavex-10/) [April 2024]\n\n<details>\n<summary>Previous updates:</summary>\n\n- [This month in Pavex #9](https://www.lpalmieri.com/posts/this-month-in-pavex-09/) [February 2024]\n- [Rust web frameworks have subpar error reporting](https://www.lpalmieri.com/posts/rust-web-frameworks-have-subpar-error-reporting/) [February 2024]\n- [This month in Pavex #8](https://www.lpalmieri.com/posts/this-month-in-pavex-08/) [January 2024]\n- [Closed beta announcement](https://www.lpalmieri.com/posts/pavex-is-in-closed-beta/) [November 2023]\n- [Progress report #6](https://www.lpalmieri.com/posts/pavex-progress-report-06/) [August 2023]\n- [Progress report #5](https://www.lpalmieri.com/posts/pavex-progress-report-05/) [June 2023]\n- [Progress report #4](https://www.lpalmieri.com/posts/pavex-progress-report-04/) [May 2023]\n- [Progress report #3](https://www.lpalmieri.com/posts/pavex-progress-report-03/) [April 2023]\n- [Progress report #2](https://www.lpalmieri.com/posts/pavex-progress-report-02/) [March 2023]\n- [Progress report #1](https://www.lpalmieri.com/posts/pavex-progress-report-01/) [January 2023]\n- [Vision](https://www.lpalmieri.com/posts/a-taste-of-pavex-rust-web-framework/) [December 2022]\n\n</details>\n\n## Architectural Overview\n\nIf the section above was enough to get you intrigued, you can check out the architectural deep-dive\nin [`ARCHITECTURE.md`](ARCHITECTURE.md) to learn how Pavex works under the hood.\n\n## Contributing\n\nTypo in documentation? Open a PR straight-away!  \nSmall bug fix with a regression test? Open a PR straight-away!  \nAnything beyond 20 lines of code? **Open an issue first**.\n\nIf you are looking to contribute, you can find dedicated instructions in [`CONTRIBUTING.md`](CONTRIBUTING.md).\n\n## License\n\nLicensed under the Apache License, Version 2.0.\nUnless you explicitly state otherwise, any contribution intentionally submitted for inclusion in this crate by you, as\ndefined in the Apache-2.0 license, shall be licensed as above, without any additional terms or conditions.\n"
        },
        {
          "name": "ci.sh",
          "type": "blob",
          "size": 0.96484375,
          "content": "#!/bin/bash\n\n# Check that the first argument is not empty\nif [ -z \"$1\" ]; then\n    echo \"Usage: ./ci.sh <cargo command> [<cargo options>]\"\n    echo \"Runs a 'cargo' command on all Rust workspaces in the current directory and its subdirectories.\"\n    exit 1\nfi\n\n# Get the cargo command and options from the arguments\nCARGO_CMD=$1\nshift\nCARGO_OPTS=${*:-\"\"}\n\n# Find all directories that contain a Cargo.toml file and have a [workspace] section in the file\nWORKSPACES=$(find . -type f -name Cargo.toml -exec grep -q \"\\[workspace\\]\" {} \\; -print | xargs -n1 dirname | sort | uniq)\n\n# Exclude test directory \nTOP_WORKSPACES=()\nfor workspace in $WORKSPACES; do\n    if [[ ! \"$workspace\" =~ \"/ui_test_envs/\" ]]; then\n        TOP_WORKSPACES+=(\"$workspace\")\n    fi\ndone\n\n# Iterate over each workspace and run `cargo check`\nfor workspace in \"${TOP_WORKSPACES[@]}\"; do\n    echo \"Running 'cargo $CARGO_CMD $CARGO_OPTS' in workspace: $workspace\"\n    (cd \"$workspace\" && cargo $CARGO_CMD $CARGO_OPTS)\ndone"
        },
        {
          "name": "ci_utils",
          "type": "tree",
          "content": null
        },
        {
          "name": "doc_examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "libs",
          "type": "tree",
          "content": null
        },
        {
          "name": "logo-dark.webp",
          "type": "blob",
          "size": 100.908203125,
          "content": null
        },
        {
          "name": "logo.webp",
          "type": "blob",
          "size": 132.998046875,
          "content": null
        },
        {
          "name": "mkdocs.yml",
          "type": "blob",
          "size": 4.87890625,
          "content": "site_name: Pavex\nsite_url: \"https://pavex.dev/\"\nsite_description: \"The documentation for Pavex, a framework for building robust APIs in Rust.\"\nrepo_url: \"https://github.com/LukeMathWalker/pavex\"\nrepo_name: \"LukeMathWalker/pavex\"\nedit_uri: \"edit/main/docs/\"\nplugins:\n  #  - social\n  - search\n  - redirects:\n      redirect_maps:\n        \"index.md\": \"overview/index.md\"\nmarkdown_extensions:\n  - admonition\n  - pymdownx.details\n  - pymdownx.superfences:\n      custom_fences:\n        - name: mermaid\n          class: mermaid\n          format: !!python/name:pymdownx.superfences.fence_code_format\n  - pymdownx.inlinehilite\n  - pymdownx.snippets:\n      check_paths: true\n      dedent_subsections: true\n  - attr_list\n  - md_in_html\n  - footnotes\n  - pymdownx.tabbed:\n      alternate_style: true\n  - pymdownx.highlight:\n      anchor_linenums: true\n      line_spans: __span\n      pygments_lang_class: true\ntheme:\n  name: material\n  logo: assets/inverted_logo.png\n  favicon: assets/logo.ico\n  icon:\n    repo: fontawesome/brands/github\n    edit: material/pencil\n  features:\n    - content.action.edit\n    - content.code.copy\n    - content.code.annotate\n    - navigation.footer\n    - navigation.indexes\n    - navigation.sections\n    - navigation.tabs\n    - navigation.tabs.sticky\n    - navigation.top\n    - toc.follow\n  palette:\n    # Palette toggle for light mode\n    - scheme: default\n      primary: black\n      toggle:\n        icon: material/weather-night\n        name: Switch to dark mode\n    # Palette toggle for dark mode\n    - scheme: slate\n      primary: black\n      toggle:\n        icon: material/weather-sunny\n        name: Switch to light mode\nnav:\n  - \"Welcome\":\n      - overview/index.md\n      - overview/why_pavex.md\n  - \"Getting Started\":\n      - \"Installation\": getting_started/index.md\n      - getting_started/learning_paths.md\n      - \"Quickstart tutorial\":\n          - getting_started/quickstart/index.md\n          - getting_started/quickstart/blueprint.md\n          - getting_started/quickstart/routing.md\n          - getting_started/quickstart/dependency_injection.md\n          - getting_started/quickstart/error_handling.md\n          - getting_started/quickstart/testing.md\n          - getting_started/quickstart/going_further.md\n  - \"Guide\":\n      - guide/index.md\n      - \"Fundamentals\":\n          - \"Project structure\": guide/project_structure.md\n          - \"Routing\":\n              - guide/routing/index.md\n              - guide/routing/method_guards.md\n              - guide/routing/path_patterns.md\n              - guide/routing/request_handlers.md\n              - guide/routing/path_prefixes.md\n              - guide/routing/domain_guards.md\n          - \"Request data\":\n              - guide/request_data/index.md\n              - guide/request_data/wire_data.md\n              - guide/request_data/request_target.md\n              - \"Connection Info\": guide/request_data/connection_info.md\n              - \"Path\":\n                  - guide/request_data/path/index.md\n                  - guide/request_data/path/path_parameters.md\n                  - guide/request_data/path/raw_path_parameters.md\n              - \"Query\":\n                  - guide/request_data/query/index.md\n                  - guide/request_data/query/query_parameters.md\n              - \"Body\":\n                  - guide/request_data/body/index.md\n                  - \"Deserializers\":\n                      - guide/request_data/body/deserializers/index.md\n                      - guide/request_data/body/deserializers/json.md\n                      - guide/request_data/body/deserializers/url_encoded.md\n                  - guide/request_data/body/byte_wrappers.md\n          - \"Dependency injection\":\n              - guide/dependency_injection/index.md\n              - guide/dependency_injection/framework_primitives.md\n              - guide/dependency_injection/constructors.md\n              - guide/dependency_injection/prebuilt_types.md\n              - guide/dependency_injection/application_state.md\n              - guide/dependency_injection/kits.md\n              - guide/dependency_injection/cookbook.md\n              - guide/dependency_injection/limitations.md\n          - \"Middlewares\":\n              - guide/middleware/index.md\n              - guide/middleware/pre_processing.md\n              - guide/middleware/post_processing.md\n              - guide/middleware/wrapping.md\n              - guide/middleware/scoping.md\n              - guide/middleware/execution_order.md\n          - \"Errors\":\n              - guide/errors/index.md\n              - guide/errors/error_handlers.md\n              - guide/errors/error_observers.md\n      - \"Digging deeper\":\n          - \"Cookies\":\n              - guide/cookies/index.md\n              - guide/cookies/installation.md\n              - guide/cookies/request_cookies.md\n              - guide/cookies/response_cookies.md\n\n  - \"API Reference\": api_reference/pavex/\nexclude_docs: |\n  README.md\n  Dockerfile\nextra_css:\n  - ansi.css\n  - mermaid.css\n  - content_tab.css\n"
        }
      ]
    }
  ]
}