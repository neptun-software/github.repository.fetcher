{
  "metadata": {
    "timestamp": 1736709177406,
    "page": 413,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjQyMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "nkaz001/hftbacktest",
      "stars": 2124,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".cargo",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.044921875,
          "content": "* text=auto\n*.ipynb linguist-detectable=false\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.0947265625,
          "content": "dist\nbuild\n*.egg-info\n*.npz\n__pycache__\nvenv\ndocs/_build\n**/Cargo.lock\n**/target\n**/tmp_*\n**/*.so"
        },
        {
          "name": ".readthedocs.yml",
          "type": "blob",
          "size": 0.98046875,
          "content": "version: 2\n\nsphinx:\n  configuration: docs/conf.py\n\n#formats:\n#  - htmlzip\n\nbuild:\n  os: ubuntu-22.04\n  tools:\n    python: \"3.10\"\n  commands:\n    - asdf install rust 1.82.0\n    - asdf global rust 1.82.0\n    - cp examples/*.ipynb docs/tutorials\n    - python -mvirtualenv $READTHEDOCS_VIRTUALENV_PATH\n    - python -m pip install --upgrade --no-cache-dir pip setuptools\n    - python -m pip install --upgrade --no-cache-dir sphinx readthedocs-sphinx-ext\n    - python -m pip install --exists-action=w --no-cache-dir -r docs/requirements.txt\n    - python -m pip install --upgrade --upgrade-strategy only-if-needed --no-cache-dir ./py-hftbacktest\n    - cat docs/conf.py\n    - python -m sphinx -T -b html -d _build/doctrees -D language=en ./docs $READTHEDOCS_OUTPUT/html\n#    - python -m sphinx -T -b readthedocssinglehtmllocalmedia -d _build/doctrees -D language=en ./docs $READTHEDOCS_OUTPUT/htmlzip\n\n#python:\n#  install:\n#    - requirements: docs/requirements.txt\n#    - method: pip\n#      path: py-hftbacktest"
        },
        {
          "name": "CODE_OF_CONDUCT.md",
          "type": "blob",
          "size": 5.1015625,
          "content": "# Contributor Covenant Code of Conduct\n\n## Our Pledge\n\nWe as members, contributors, and leaders pledge to make participation in our\ncommunity a harassment-free experience for everyone, regardless of age, body\nsize, visible or invisible disability, ethnicity, sex characteristics, gender\nidentity and expression, level of experience, education, socio-economic status,\nnationality, personal appearance, race, religion, or sexual identity\nand orientation.\n\nWe pledge to act and interact in ways that contribute to an open, welcoming,\ndiverse, inclusive, and healthy community.\n\n## Our Standards\n\nExamples of behavior that contributes to a positive environment for our\ncommunity include:\n\n* Demonstrating empathy and kindness toward other people\n* Being respectful of differing opinions, viewpoints, and experiences\n* Giving and gracefully accepting constructive feedback\n* Accepting responsibility and apologizing to those affected by our mistakes,\n  and learning from the experience\n* Focusing on what is best not just for us as individuals, but for the\n  overall community\n\nExamples of unacceptable behavior include:\n\n* The use of sexualized language or imagery, and sexual attention or\n  advances of any kind\n* Trolling, insulting or derogatory comments, and personal or political attacks\n* Public or private harassment\n* Publishing others' private information, such as a physical or email\n  address, without their explicit permission\n* Other conduct which could reasonably be considered inappropriate in a\n  professional setting\n\n## Enforcement Responsibilities\n\nCommunity leaders are responsible for clarifying and enforcing our standards of\nacceptable behavior and will take appropriate and fair corrective action in\nresponse to any behavior that they deem inappropriate, threatening, offensive,\nor harmful.\n\nCommunity leaders have the right and responsibility to remove, edit, or reject\ncomments, commits, code, wiki edits, issues, and other contributions that are\nnot aligned to this Code of Conduct, and will communicate reasons for moderation\ndecisions when appropriate.\n\n## Scope\n\nThis Code of Conduct applies within all community spaces, and also applies when\nan individual is officially representing the community in public spaces.\nExamples of representing our community include using an official e-mail address,\nposting via an official social media account, or acting as an appointed\nrepresentative at an online or offline event.\n\n## Enforcement\n\nInstances of abusive, harassing, or otherwise unacceptable behavior may be\nreported to the community leaders responsible for enforcement at\nnkaz001@protonmail.com.\nAll complaints will be reviewed and investigated promptly and fairly.\n\nAll community leaders are obligated to respect the privacy and security of the\nreporter of any incident.\n\n## Enforcement Guidelines\n\nCommunity leaders will follow these Community Impact Guidelines in determining\nthe consequences for any action they deem in violation of this Code of Conduct:\n\n### 1. Correction\n\n**Community Impact**: Use of inappropriate language or other behavior deemed\nunprofessional or unwelcome in the community.\n\n**Consequence**: A private, written warning from community leaders, providing\nclarity around the nature of the violation and an explanation of why the\nbehavior was inappropriate. A public apology may be requested.\n\n### 2. Warning\n\n**Community Impact**: A violation through a single incident or series\nof actions.\n\n**Consequence**: A warning with consequences for continued behavior. No\ninteraction with the people involved, including unsolicited interaction with\nthose enforcing the Code of Conduct, for a specified period of time. This\nincludes avoiding interactions in community spaces as well as external channels\nlike social media. Violating these terms may lead to a temporary or\npermanent ban.\n\n### 3. Temporary Ban\n\n**Community Impact**: A serious violation of community standards, including\nsustained inappropriate behavior.\n\n**Consequence**: A temporary ban from any sort of interaction or public\ncommunication with the community for a specified period of time. No public or\nprivate interaction with the people involved, including unsolicited interaction\nwith those enforcing the Code of Conduct, is allowed during this period.\nViolating these terms may lead to a permanent ban.\n\n### 4. Permanent Ban\n\n**Community Impact**: Demonstrating a pattern of violation of community\nstandards, including sustained inappropriate behavior,  harassment of an\nindividual, or aggression toward or disparagement of classes of individuals.\n\n**Consequence**: A permanent ban from any sort of public interaction within\nthe community.\n\n## Attribution\n\nThis Code of Conduct is adapted from the [Contributor Covenant][homepage],\nversion 2.0, available at\nhttps://www.contributor-covenant.org/version/2/0/code_of_conduct.html.\n\nCommunity Impact Guidelines were inspired by [Mozilla's code of conduct\nenforcement ladder](https://github.com/mozilla/diversity).\n\n[homepage]: https://www.contributor-covenant.org\n\nFor answers to common questions about this code of conduct, see the FAQ at\nhttps://www.contributor-covenant.org/faq. Translations are available at\nhttps://www.contributor-covenant.org/translations.\n"
        },
        {
          "name": "Cargo.toml",
          "type": "blob",
          "size": 0.6826171875,
          "content": "[workspace]\nresolver = \"2\"\nmembers = [\n  \"hftbacktest\",\n  \"hftbacktest-derive\",\n  \"py-hftbacktest\",\n  \"collector\"\n, \"connector\"]\n\n[profile.dev]\nopt-level = 0\ndebug = true\ndebug-assertions = false\noverflow-checks = true\nlto = false\npanic = \"unwind\"\nincremental = true\ncodegen-units = 256\n\n[profile.test]\nopt-level = 0\ndebug = true\ndebug-assertions = true\noverflow-checks = true\nlto = false\nincremental = true\ncodegen-units = 256\n\n[profile.release]\nopt-level = 3\ndebug = false\ndebug-assertions = false\noverflow-checks = false\nlto = true\nstrip = true\npanic = \"abort\"\nincremental = false\ncodegen-units = 1\n\n[profile.release-with-debug]\ninherits = \"release\"\nincremental = true\ndebug = true\nstrip = false\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.0537109375,
          "content": "MIT License\n\nCopyright (c) 2022 nkaz001@protonmail.com\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "README.rst",
          "type": "blob",
          "size": 11.6376953125,
          "content": "===========\nHftBacktest\n===========\n\n|codeql| |python| |pypi| |downloads| |rustc| |crates| |license| |docs| |roadmap| |github|\n\nHigh-Frequency Trading Backtesting Tool\n=======================================\n\nThis framework is designed for developing high-frequency trading and market-making strategies. It focuses on accounting for both feed and order latencies, as well as the order queue position for order fill simulation. The framework aims to provide more accurate market replay-based backtesting, based on full order book and trade tick feed data.\n\nKey Features\n============\n\nThe experimental features are currently in the early stages of development, having been completely rewritten in Rust to\nsupport the following features.\n\n* Working in `Numba <https://numba.pydata.org/>`_ JIT function (Python).\n* Complete tick-by-tick simulation with a customizable time interval or based on the feed and order receipt.\n* Full order book reconstruction based on L2 Market-By-Price and L3 Market-By-Order feeds.\n* Backtest accounting for both feed and order latency, using provided models or your own custom model.\n* Order fill simulation that takes into account the order queue position, using provided models or your own custom model.\n* Backtesting of multi-asset and multi-exchange models\n* Deployment of a live trading bot using the same algorithm code: currently for Binance Futures and Bybit. (Rust-only)\n\nDocumentation\n=============\n\nSee `full document here <https://hftbacktest.readthedocs.io/>`_.\n\nGetting started\n===============\n\nInstallation\n------------\n\nhftbacktest supports Python 3.10+. You can install hftbacktest using ``pip``:\n\n.. code-block:: console\n\n pip install hftbacktest\n\nOr you can clone the latest development version from the Git repository with:\n\n.. code-block:: console\n\n git clone https://github.com/nkaz001/hftbacktest\n\nData Source & Format\n--------------------\n\nPlease see `Data <https://hftbacktest.readthedocs.io/en/latest/data.html>`_ or `Data Preparation <https://hftbacktest.readthedocs.io/en/latest/tutorials/Data%20Preparation.html>`_.\n\nYou can also find some data `here <https://reach.stratosphere.capital/data/usdm/>`_, hosted by the supporter.\n\nA Quick Example\n---------------\n\nGet a glimpse of what backtesting with hftbacktest looks like with these code snippets:\n\n.. code-block:: python\n\n    @njit\n    def market_making_algo(hbt):\n        asset_no = 0\n        tick_size = hbt.depth(asset_no).tick_size\n        lot_size = hbt.depth(asset_no).lot_size\n\n        # in nanoseconds\n        while hbt.elapse(10_000_000) == 0:\n            hbt.clear_inactive_orders(asset_no)\n\n            a = 1\n            b = 1\n            c = 1\n            hs = 1\n\n            # Alpha, it can be a combination of several indicators.\n            forecast = 0\n            # In HFT, it can be various measurements of short-term market movements,\n            # such as the high-low range in the last X minutes.\n            volatility = 0\n            # Delta risk, it can be a combination of several risks.\n            position = hbt.position(asset_no)\n            risk = (c + volatility) * position\n            half_spread = (c + volatility) * hs\n\n            max_notional_position = 1000\n            notional_qty = 100\n\n            depth = hbt.depth(asset_no)\n\n            mid_price = (depth.best_bid + depth.best_ask) / 2.0\n\n            # fair value pricing = mid_price + a * forecast\n            #                      or underlying(correlated asset) + adjustment(basis + cost + etc) + a * forecast\n            # risk skewing = -b * risk\n            reservation_price = mid_price + a * forecast - b * risk\n            new_bid = reservation_price - half_spread\n            new_ask = reservation_price + half_spread\n\n            new_bid_tick = min(np.round(new_bid / tick_size), depth.best_bid_tick)\n            new_ask_tick = max(np.round(new_ask / tick_size), depth.best_ask_tick)\n\n            order_qty = np.round(notional_qty / mid_price / lot_size) * lot_size\n\n            # Elapses a process time.\n            if not hbt.elapse(1_000_000) != 0:\n                return False\n\n            last_order_id = -1\n            update_bid = True\n            update_ask = True\n            buy_limit_exceeded = position * mid_price > max_notional_position\n            sell_limit_exceeded = position * mid_price < -max_notional_position\n            orders = hbt.orders(asset_no)\n            order_values = orders.values()\n            while order_values.has_next():\n                order = order_values.get()\n                if order.side == BUY:\n                    if order.price_tick == new_bid_tick or buy_limit_exceeded:\n                        update_bid = False\n                    if order.cancellable and (update_bid or buy_limit_exceeded):\n                        hbt.cancel(asset_no, order.order_id, False)\n                        last_order_id = order.order_id\n                elif order.side == SELL:\n                    if order.price_tick == new_ask_tick or sell_limit_exceeded:\n                        update_ask = False\n                    if order.cancellable and (update_ask or sell_limit_exceeded):\n                        hbt.cancel(asset_no, order.order_id, False)\n                        last_order_id = order.order_id\n\n            # It can be combined with a grid trading strategy by submitting multiple orders to capture better spreads and\n            # have queue position.\n            # This approach requires more sophisticated logic to efficiently manage resting orders in the order book.\n            if update_bid:\n                # There is only one order at a given price, with new_bid_tick used as the order ID.\n                order_id = new_bid_tick\n                hbt.submit_buy_order(asset_no, order_id, new_bid_tick * tick_size, order_qty, GTX, LIMIT, False)\n                last_order_id = order_id\n            if update_ask:\n                # There is only one order at a given price, with new_ask_tick used as the order ID.\n                order_id = new_ask_tick\n                hbt.submit_sell_order(asset_no, order_id, new_ask_tick * tick_size, order_qty, GTX, LIMIT, False)\n                last_order_id = order_id\n\n            # All order requests are considered to be requested at the same time.\n            # Waits until one of the order responses is received.\n            if last_order_id >= 0:\n                # Waits for the order response for a maximum of 5 seconds.\n                timeout = 5_000_000_000\n                if not hbt.wait_order_response(asset_no, last_order_id, timeout):\n                    return False\n\n        return True\n\n\nTutorials\n=========\n* `Data Preparation <https://hftbacktest.readthedocs.io/en/latest/tutorials/Data%20Preparation.html>`_\n* `Getting Started <https://hftbacktest.readthedocs.io/en/latest/tutorials/Getting%20Started.html>`_\n* `Working with Market Depth and Trades <https://hftbacktest.readthedocs.io/en/latest/tutorials/Working%20with%20Market%20Depth%20and%20Trades.html>`_\n* `Integrating Custom Data <https://hftbacktest.readthedocs.io/en/latest/tutorials/Integrating%20Custom%20Data.html>`_\n* `Making Multiple Markets - Introduction <https://hftbacktest.readthedocs.io/en/latest/tutorials/Making%20Multiple%20Markets%20-%20Introduction.html>`_\n* `High-Frequency Grid Trading <https://hftbacktest.readthedocs.io/en/latest/tutorials/High-Frequency%20Grid%20Trading.html>`_\n* `Impact of Order Latency <https://hftbacktest.readthedocs.io/en/latest/tutorials/Impact%20of%20Order%20Latency.html>`_\n* `Order Latency Data <https://hftbacktest.readthedocs.io/en/latest/tutorials/Order%20Latency%20Data.html>`_\n* `Guéant–Lehalle–Fernandez-Tapia Market Making Model and Grid Trading <https://hftbacktest.readthedocs.io/en/latest/tutorials/GLFT%20Market%20Making%20Model%20and%20Grid%20Trading.html>`_\n* `Making Multiple Markets <https://hftbacktest.readthedocs.io/en/latest/tutorials/Making%20Multiple%20Markets.html>`_\n* `Risk Mitigation through Price Protection in Extreme Market Conditions <https://hftbacktest.readthedocs.io/en/latest/tutorials/Risk%20Mitigation%20through%20Price%20Protection%20in%20Extreme%20Market%20Conditions.html>`_\n* `Level-3 Backtesting <https://hftbacktest.readthedocs.io/en/latest/tutorials/Level-3%20Backtesting.html>`_\n* `Market Making with Alpha - Order Book Imbalance <https://hftbacktest.readthedocs.io/en/latest/tutorials/Market%20Making%20with%20Alpha%20-%20Order%20Book%20Imbalance.html>`_\n* `Queue-Based Market Making in Large Tick Size Assets <https://hftbacktest.readthedocs.io/en/latest/tutorials/Queue-Based%20Market%20Making%20in%20Large%20Tick%20Size%20Assets.html>`_\n\nExamples\n========\n\nYou can find more examples in `examples <https://github.com/nkaz001/hftbacktest/tree/master/examples>`_ directory and `Rust examples <https://github.com/nkaz001/hftbacktest/blob/master/hftbacktest/examples/>`_.\n\nThe complete process of backtesting Binance Futures\n---------------------------------------------------\n`high-frequency gridtrading <https://github.com/nkaz001/hftbacktest/blob/master/hftbacktest/examples/gridtrading.ipynb>`_: The complete process of backtesting Binance Futures using a high-frequency grid trading strategy implemented in Rust.\n\nMigration to V2\n===============\nPlease see the `migration guide <https://hftbacktest.readthedocs.io/en/latest/migration2.html>`_.\n\nRoadmap\n=======\n\nCurrently, new features are being implemented in Rust due to the limitations of Numba, as performance is crucial given the size of the high-frequency data.\nThe imminent task is to integrate hftbacktest in Python with hftbacktest in Rust by using the Rust implementation as the backend.\nMeanwhile, the data format, which is currently different, needs to be unified.\nOn the pure Python side, the performance reporting tool should be improved to provide more performance metrics with increased speed.\n\nPlease see the `roadmap <https://github.com/nkaz001/hftbacktest/blob/master/ROADMAP.md>`_.\n\nContributing\n============\n\nThank you for considering contributing to hftbacktest! Welcome any and all help to improve the project. If you have an\nidea for an enhancement or a bug fix, please open an issue or discussion on GitHub to discuss it.\n\nThe following items are examples of contributions you can make to this project:\n\nPlease see the `roadmap <https://github.com/nkaz001/hftbacktest/blob/master/ROADMAP.md>`_.\n\n.. |python| image:: https://shields.io/badge/python-3.10-blue\n    :alt: Python Version\n    :target: https://www.python.org/\n\n.. |codeql| image:: https://github.com/nkaz001/hftbacktest/actions/workflows/codeql.yml/badge.svg?branch=master&event=push\n    :alt: CodeQL\n    :target: https://github.com/nkaz001/hftbacktest/actions/workflows/codeql.yml\n\n.. |pypi| image:: https://badge.fury.io/py/hftbacktest.svg\n    :alt: Package Version\n    :target: https://pypi.org/project/hftbacktest\n\n.. |downloads| image:: https://static.pepy.tech/badge/hftbacktest\n    :alt: Downloads\n    :target: https://pepy.tech/project/hftbacktest\n\n.. |crates| image:: https://img.shields.io/crates/v/hftbacktest.svg\n    :alt: Rust crates.io version\n    :target: https://crates.io/crates/hftbacktest\n\n.. |license| image:: https://img.shields.io/badge/License-MIT-green.svg\n    :alt: License\n    :target: https://github.com/nkaz001/hftbacktest/blob/master/LICENSE\n\n.. |docs| image:: https://readthedocs.org/projects/hftbacktest/badge/?version=latest\n    :target: https://hftbacktest.readthedocs.io/en/latest/?badge=latest\n    :alt: Documentation Status\n\n.. |roadmap| image:: https://img.shields.io/badge/Roadmap-gray\n    :target: https://github.com/nkaz001/hftbacktest/blob/master/ROADMAP.md\n    :alt: Roadmap\n\n.. |github| image:: https://img.shields.io/github/stars/nkaz001/hftbacktest?style=social\n    :target: https://github.com/nkaz001/hftbacktest\n    :alt: Github\n\n.. |rustc| image:: https://shields.io/badge/rustc-1.82-blue\n    :alt: Rust Version\n    :target: https://www.rust-lang.org/\n"
        },
        {
          "name": "ROADMAP.md",
          "type": "blob",
          "size": 3.2451171875,
          "content": "# Roadmap\n\n## Python\n* [X] Rust implementation as the backend.\n* [X] Improve performance reporting tools.\n  * https://github.com/ranaroussi/quantstats\n  * https://www.prestolabs.io/research/optimizing-risk-adjusted-return-in-constructing-portfolios-of-alphas\n* [ ] Add more performance metrics and visualization features to the reporting tool.\n* [ ] Add live trading support.\n\n## Rust\n\n### Backtesting\n* [X] Level 3 Market-By-Order backtesting.\n* [X] Data fusion to provide the most frequent and granular data using different streams with different update frequencies and market depth ranges. (WIP: ``feature: unstable_fuse``)\n* [X] Adjust feed and order latency for exchanges located in different regions if the original feed and order latency data was collected at a different site.\n* [ ] Additional queue position model or exchange model.\n* [X] A vector-based implementation for fast L2 market depth within the specified ROI (range of interest).\n* [X] Add fee model: fee per trading value (current), fee per trading quantity, fee per trade, and different fees based on the direction. (@roykim98)\n* [X] Parallel loading: Load the next data set while backtesting is in progress.\n* [ ] Add a modify order feature.\n\n### Live\n* [ ] Support Level 3 Market-By-Order for Live Bot.\n* [X] Support external connectors through IPC for multiple bots via a unified connection. (WIP: ``branch: ipc (PR-129)``)\n  [<img src=\"https://raw.githubusercontent.com/nkaz001/hftbacktest/master/docs/images/arch.png\">](https://github.com/nkaz001/hftbacktest/tree/master/docs/images/arch.png?raw=true)\n  * https://github.com/eclipse-iceoryx/iceoryx2\n\n### Connector\n* [ ] Implement Binance Futures Websocket Order APIs; currently, REST APIs are used for submitting orders.\n  * https://developers.binance.com/docs/derivatives/usds-margined-futures/websocket-api-general-info\n* [ ] Add Binance market depth management mode; currently, only natural refresh is supported.\n* [ ] Binance COIN-m Futures/Spot/Options\n  * https://developers.binance.com/docs/binance-spot-api-docs/README\n  * https://developers.binance.com/docs/derivatives/coin-margined-futures/general-info\n  * https://developers.binance.com/docs/derivatives/option/general-info\n* [X] Bybit ``MVP``\n  * https://bybit-exchange.github.io/docs/v5/intro\n* [ ] OKX\n  * https://www.okx.com/docs-v5/en/\n* [ ] Coinbase\n* [ ] Kraken\n* [ ] CDC\n* [ ] Databento for the data feed\n  * https://databento.com/docs/api-reference-live\n* [ ] Trad-fi\n\n### Others\n* [ ] Increase documentation and test coverage.\n* [ ] Github workflow: readthedocs, build, formatting, coverage, etc.\n\n### Orchestration\n* [ ] Implement interface for live bot orchestration\n* [ ] Develop central orchestration app\n* [ ] Integrate with Telegram\n\n## Examples\n* [ ] Market making example using ARMA, ARIMA, or GARCH on the underlying asset.\n* [ ] Example using different skew profiles for inventory management.\n* [ ] Example demonstrating latency-aware actions.\n* [ ] Example demonstrating the volume clock/event clock using `wait_next_feed`.\n* [ ] Example demonstrating the cross-market market-making.\n* [ ] Market making with alpha from the perspectives of statistical arbitrage and optimal execution.\n* [X] Queue-position-based market making for large-tick assets.\n* [X] Update the existing examples to align with version 2.0.0.\n"
        },
        {
          "name": "collector",
          "type": "tree",
          "content": null
        },
        {
          "name": "connector",
          "type": "tree",
          "content": null
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "hftbacktest-derive",
          "type": "tree",
          "content": null
        },
        {
          "name": "hftbacktest",
          "type": "tree",
          "content": null
        },
        {
          "name": "py-hftbacktest",
          "type": "tree",
          "content": null
        },
        {
          "name": "rustfmt.toml",
          "type": "blob",
          "size": 0.1220703125,
          "content": "imports_layout = \"HorizontalVertical\"\nimports_granularity = \"Crate\"\ngroup_imports = \"StdExternalCrate\"\nnewline_style = \"Unix\""
        }
      ]
    }
  ]
}