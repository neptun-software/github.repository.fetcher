{
  "metadata": {
    "timestamp": 1736709117270,
    "page": 291,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjMwMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "sagiegurari/cargo-make",
      "stars": 2631,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".buildnumber",
          "type": "blob",
          "size": 0.0029296875,
          "content": "278"
        },
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 0.169921875,
          "content": "\nroot = true\n\n[*]\ncharset = utf-8\nend_of_line = lf\ninsert_final_newline = true\ntrim_trailing_whitespace = true\nindent_style = space\nindent_size = 4\n\n[*.json]\nindent_size = 2\n"
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.0263671875,
          "content": "*.ico binary\n*.woff binary\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.13671875,
          "content": ".idea\n.c9\ntarget/\ntemp/\n**/*.rs.bk\n**/*.log\ndump.rdb\n/rs*.sh\n/docs/_site\n/core\n/src/**/Cargo.lock\n/examples/**/Cargo.lock\n*.rustc_info.json\n"
        },
        {
          "name": ".rusty-hook.toml",
          "type": "blob",
          "size": 0.0625,
          "content": "[hooks]\npre-push = \"cargo run --bin cargo-make -- make ci-flow\"\n"
        },
        {
          "name": ".typos.toml",
          "type": "blob",
          "size": 0.234375,
          "content": "# If there are words that you think should not be treated as typo.\n# Please list here along with a comment.\n[default.extend-words]\n\"MUTLI\" = \"MUTLI\"\n\"SPLITTED\" = \"SPLITTED\"\n\"ba\" = \"ba\"\n\"hel\" = \"hel\"\n\n[files]\nextend-exclude = [\"docs/api/*\"]\n"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 36.4375,
          "content": "## CHANGELOG\n\n### v0.37.23 (2024-10-19)\n\n* Enhancement: support relative keyword for makefile extending to enable easy git/crate/workspace root extending #1175\n* Maintenance: critical bug fix upgrade for duckscript\n\n### v0.37.22 (2024-10-12)\n\n* Fix: set env CARGO_MAKE_CURRENT_TASK_NAME before condition invocation #1173\n\n### v0.37.21 (2024-10-04)\n\n* Fix: Remove RUSTFLAGS from workaround of rustup env issue when setting toolchain #1169\n* Maintenance: upgrade duckscript\n\n### v0.37.20 (2024-10-03)\n\n* Maintenance: upgrade dependencies\n\n### v0.37.19 (2024-10-03)\n\n* Maintenance: upgrade duckscript\n\n### v0.37.18 (2024-09-29)\n\n* Enhancement: config to disable all installation steps #1147\n\n### v0.37.17 (2024-09-28)\n\n* Fix: support encrypted drives (shorten script file names) #1150\n* Fix: setup musl failing on open ssl binary redirects\n\n### v0.37.16 (2024-08-30)\n\n* Enhancement: Expand condition_script_runner_args #1132 (thanks @wmmc88)\n\n### v0.37.15 (2024-07-29)\n\n* Enhancement: Support env expansion for script runner #1125\n* Enhancement: Make LoggerOptions public + add name field #1124 (thanks @SamuelMarks)\n\n### v0.37.14 (2024-07-17)\n\n* Fix: fix the --skip-init-end-tasks argument #1108 (thanks @06393993)\n* Enhancement: Support using cargo make as library #1112 (thanks @SamuelMarks)\n\n### v0.37.13 (2024-07-07)\n\n* Enhancement: New condition_script_runner_args attribute #1081\n* Enhancement: Add workspace level package info to global environment variables #1092 (thanks @varphone)\n* Enhancement: New condition type: And, Or, GroupOr to enable to fine tune conditions #432\n\n### v0.37.12 (2024-05-04)\n\n* Enhancement: support crates with invalid structure (fallback of cargo-metadata) #1076\n* Maintenance: disable old legacy migration task #1101\n\n### v0.37.11 (2024-04-05)\n\n* Fix: reset CARGO env var to fix wrong CARGO in commands #1060 (thanks @wmmc88)\n\n### v0.37.10 (2024-02-23)\n\n* Enhancement: Prevent wasteful busy cpu spinning #1045 (thanks @permosegaard)\n* Enhancement: Enable multiple ignored watch patterns #1041 (thanks @Buzzec)\n\n### v0.37.9 (2024-02-02)\n\n* Fix: fix rust script invocation as load_script #1035\n\n### v0.37.8 (2024-01-24)\n\n* Enhancement: Support script runners and shebang in condition scripts #987\n* Enhancement: Support script runner args for rust scripts #1025\n* Enhancement: Support condition_script as string and not just vec (similar to script)\n\n### v0.37.7 (2024-01-14)\n\n* Fix: Detect crate installation fix for new cargo list format\n\n### v0.37.6 (2024-01-13)\n\n* Fix: Detect crate installation fix for new cargo list format\n* Enhancement: Add condition support for decode info #1020 (thanks @Bauke)\n* Enhancement: Remove format check from static lint checks profile\n* Maintenance: Update lint rules\n\n### v0.37.5 (2023-12-15)\n\n* Enhancement: Add OS condition #989\n* Enhancement: Enable setting default profile by env variable #996 (thanks @Johnabell)\n* Documentation: Add Fig Autocompletion to README.md #993 (thanks @beeinger)\n* Maintenance: update dependencies and build\n* Documentation: Add additional plugin env handling details #978\n\n### v0.37.4 (2023-10-31)\n\n* Fix: Enable latest rust-script installation by default #979 (thanks @wmmc88)\n\n### v0.37.3 (2023-10-28)\n\n* Fix: Fallback CARGO_MAKE_CRATE_CUSTOM_TRIPLE_TARGET_DIRECTORY to CARGO_MAKE_CRATE_TARGET_DIRECTORY #972\n* Enhancement: Improve rust based scripts performance by enabling script caching #968\n\n### v0.37.2 (2023-09-27)\n\n* Enhancement: improve support for shebang script file extensions #926\n\n### v0.37.1 (2023-09-17)\n\n* Fix: workspace dependencies outside workspace directory should not be detected as members #948\n* Enhancement: Move crate_target_dirs from RustInfo to CrateInfo for improved performance #941 (thanks @xxchan)\n* Maintenance: upgrade duckscript #945\n\n### v0.37.0 (2023-09-08)\n\n* Fix: env vars loading order is not consistent #934\n* \\[**backward compatibility break**\\] Maintenance: Upgrade duckscript runtime to 0.8\n* Maintenance: Upgrade cargo-watch to 8.4.1\n\n### v0.36.13 (2023-08-10)\n\n* Fix: External env vars are detected as cycles #911\n* Fix: Auto complete bash script #914 (thanks @gw31415)\n* Documentation: Arch Linux installation #880 (thanks @CosminGGeorgescu)\n* Documentation: Fix Readme about Binary Release Target #915 (thanks @Azuki-bar)\n* Maintenance: Replace unmaintained ansi_term with nu_ansi_term #913\n\n### v0.36.12 (2023-07-19)\n\n* Fix: Remove workspace members sorting #897 (thanks @pskrgag)\n\n### v0.36.11 (2023-06-15)\n\n* Maintenance: Upgrade dependencies\n\n### v0.36.10 (2023-06-10)\n\n* Enhancement: split function now allows to remove empty values via new third argument 'remove-empty' #863\n* Enhancement: list-steps command should group aliases with original commands #862 (thanks @xxchan)\n\n### v0.36.9 (2023-06-05)\n\n* Fix: '--hide-uninteresting'  cli flag #859 (thanks @xxchan)\n* Fix: cargo-watch option 'why' should remove '-q' #849\n\n### v0.36.8 (2023-05-27)\n\n* Enhancement: New precompiled target: x86_64-unknown-linux-gnu #853 (thanks @steverusso)\n* Enhancement: New log level 'off' and cli flag --silent #846\n* Enhancement: Upgrade cargo-watch to 8.4.0 and add new 'why' watch option #849\n* Enhancement: New cli flag '--hide-uninteresting' for list commands to reduce output and skip hooks #848\n\n### v0.36.7 (2023-04-23)\n\n* Fix: Clear did not remove parent task environment variables definitions #816\n* Enhancement: Add aarch64-apple-darwin binary release target #812 (thanks @dbanty)\n* Documentation: Add documentation link on README for watch attribute #829 (thanks @saona-raimundo)\n\n### v0.36.6 (2023-03-01)\n\n* Enhancement: Support environment expansion for files_modified condition #802 (thanks @stormshield-guillaumed)\n\n### v0.36.5 (2023-02-18)\n\n* Enhancement: Support workspace.dependencies setup to find workspace members #773\n* Enhancement: Performance improvement by reducing cargo-metadata calls #796\n* Enhancement: Added additional time summary breakdown for env setup #796\n* Documentation: Add documentation on multiple blocking watches #788\n* Documentation: Add documentation on cwd #787\n* Maintenance: Upgrade dependencies\n\n### v0.36.4 (2023-01-22)\n\n* Fix: relative path detection for workspace members defined in dependencies #773\n* Maintenance: Bump cargo-watch to 0.8.3 #771\n* Maintenance: Bump rust minimal version to 0.65 due to dependencies updates\n* Maintenance: Upgrade dependencies\n* Documentation: Update skip_core_tasks docs #752\n* Documentation: Update parallel attribute docs #751\n\n### v0.36.3 (2022-11-15)\n\n* Enhancement: Add new files_modified condition #741\n* Enhancement: Enable to set default toolchain for all core cargo tasks #743\n* Documentation: Add section on default task definition #745\n\n### v0.36.2 (2022-10-18)\n\n* Enhancement: Add env var support in env_files values #723\n* Enhancement: Support environment expansion for toolchain attribute\n* Fix: support shebang in scripts with spaces before shebang start #718\n* Documentation: small edits for spelling, grammar, formatting #721 (thanks @Zearin)\n\n### v0.36.1 (2022-09-27)\n\n* Enhancement: Support inherited package info #712\n* Enhancement: Add support for install_crate value without args (skipping current installation validation) #725\n* Enhancement: Added shell completion files in included crate #565\n* Enhancement: Add skipping task message for all actionable tasks that fail condition #708\n\n### v0.36.0 (2022-08-30)\n\n* \\[**backward compatibility break**\\] Enhancement: Environment variables now support the default syntax: ${name:default}\n* \\[**backward compatibility break**\\] Enhancement: Environment variables definition order is now more flexible to support variable to variable dependency more easily #688 (thanks @indietyp)\n* Enhancement: Workaround rustup env issue when setting toolchain #702\n\n### v0.35.16 (2022-08-08)\n\n* Enhancement: Create task definition in runtime and invoke it via plugin #677\n* Enhancement: Enable to remove force flag for custom install commands #674\n* Maintenance: Update dependencies #676\n\n### v0.35.15 (2022-07-21)\n\n* Fix: upgrade cliparser to support windows paths\n\n### v0.35.14 (2022-07-21)\n\n* Enhancement: CLI parsing now done by the cliparser crate instead of clap due to clap continued backward compatibility issues\n* Enhancement: Added support ${@} in Duckscript tasks #667\n* Enhancement: Check in Cargo.lock file to support linux package managers #670\n* Enhancement: Added new --quiet cli flag #668\n* Maintenance: Add scheduled CI github workflow\n\n### v0.35.13 (2022-06-11)\n\n* Enhancement: Define CARGO environment variable for tasks with toolchain and script #658\n* Enhancement: New CARGO_MAKE_DISABLE_UPDATE_CHECK environment variable to disable update checks #653\n* Fix: wrong update check days counting\n* Fix: New unstable feature CTRL_C_HANDLING to prevent zombie processes after cargo-make exits #374 (thanks @MartinKavik)\n\n### v0.35.12 (2022-05-05)\n\n* Fix: upgrade to cargo-watch 8.1.1 due to 8.1.0 being yanked #652\n\n### v0.35.11 (2022-04-22)\n\n* Fix: add workspace root member when both workspace members and package are defined #644\n* Fix: support partial semver values in rust version conditions #643\n* Enhancement: upgrade regex as per security advisory #638 (thanks @Dylan-DPC)\n* Enhancement: support condition in script based env value #648\n* Enhancement: enable to mark env files as 'defaults only' #647\n\n### v0.35.10 (2022-03-11)\n\n* Fix: detect workspace member for non virtual workspaces #636\n* Documentation: added docs for grcov usage #375\n\n### v0.35.9 (2022-02-24)\n\n* Fix: clap 3.1 is not backward compatible\n\n### v0.35.8 (2022-01-11)\n\n* Enhancement: New plugin system to enable custom task execution logic #620\n* Maintenance: upgrade to clap 3\n* Enhancement: Support new github auth token for github release task\n\n### v0.35.7 (2021-12-11)\n\n* Fix: crate installation version check now also supports running the binary with --version arg #612\n* Enhancement: support alternate cargo install commands #608\n* Documentation: VS code editor integration #604 (thanks @grbd)\n* Fix: Panic during crate installation in case args are empty #615\n* Enhancement: New list-category-steps command #603 (thanks @grbd)\n* Enhancement: New tls feature so tls can be disabled (by default enabled) #614\n* Fix: If rust-script is used and requires installation, install old 0.7.0 version due to rust-script bug\n\n### v0.35.6 (2021-11-01)\n\n* Fix: prebuilt binary release task\n* Enhancement: Duckscript upgrade\n\n### v0.35.5 (2021-10-22)\n\n* Enhancement: Add makers executable to prebuilt binary release #600\n\n### v0.35.4 (2021-10-22)\n\n* Fix: github publish flow broken\n\n### v0.35.3 (2021-10-22)\n\n* Enhancement: Task cli arguments matching cargo-make cli args can now be passed without -- character. Arguments for cargo-make itself **must** now be passed in before the task name. #585 (thanks @WorldSEnder)\n\n### v0.35.2 (2021-10-16)\n\n* Enhancement: Ability to specify min rust version in tasks via toolchain attribute #594 (thanks @WorldSEnder)\n\n### v0.35.1 (2021-10-02)\n\n* Fix: extend attribute didn't extend env variables #579\n* Enhancement: Limit search to one result when searching for updates #574 (thanks @jayvdb)\n* Fix: CARGO_MAKE_TASK_ARGS not set when using watch mode #586\n* Fix: Workspace members glob detection didn't validate Cargo.toml exists #591\n* Documentation: improve condition fail message documentation #583\n* Upgrade run_script #581\n* Add internal steps to time summary\n* Adding ability to disable git, rust and crate environment variables to speed up startup time\n* Documentation: zsh auto completion instructions for makers #590\n* Upgrade cargo-watch to 8.1.0\n\n### v0.35.0 (2021-07-10)\n\n* Enhancement: New bash auto completion script for makers #565\n* \\[**backward compatibility break**\\] Fix: environment variable typo in CARGO_MAKE_TEST_USE_MULTI_TEST_PHASES #566\n\n### v0.34.0 (2021-06-13)\n\n* Fix UNC prefix stripping inconsistency #562 (thanks @WilliamVenner)\n\n### v0.33.0 (2021-05-09)\n\n* Enhancement: Run kcov only on test executables #555 (thanks @elonca)\n* Enhancement: New CARGO_MAKE_CRATE_CUSTOM_TRIPLE_TARGET_DIRECTORY environment variable #554 (thanks @ark0f)\n* Fix: CARGO_MAKE_CRATE_TARGET_DIRECTORY does not respect workspace #557 (thanks @ark0f)\n\n### v0.32.17 (2021-04-15)\n\n* Enhancement: Support path glob (with optional gitignore support) environment variables #542\n* Enhancement: Support version specific installation for crates #544\n* Enhancement: Add CARGO_MAKE_CRATE_TARGET_DIRECTORY environment variable #548 (thanks @ark0f)\n* Enhancement: Support custom crate target triple #547 (thanks @ark0f)\n* Enhancement: Improve release upload flow with initial support for arm\n\n### v0.32.16 (2021-04-03)\n\n* Enable to skip tasks via command line regex flag (--skip-tasks flag) #538\n* Deprecate bintray tasks support as bintray is shutting down #539\n\n### v0.32.15 (2021-03-29)\n\n* Fix: makers color support on windows #535 (thanks @MartinKavik)\n* Enhancement: Allow leading hyphens for task arguments #535 (thanks @MartinKavik)\n\n### v0.32.14 (2021-03-10)\n\n* Fix: Keep env order for extended makefiles #523\n* Fix: Align new version notification #524 (thanks @gemmaro)\n* Upgrade dependencies\n\n### v0.32.13 (2021-03-05)\n\n* Enhancement: Support rust-script as an additional rust runner #516\n* Fix: cm_run_task now also invokes dependencies of the target task #519\n* Fix: Env vars provided on cli are not positioned first when evaluated #520\n\n### v0.32.12 (2021-01-29)\n\n* Fix: cli arguments lost when using on_error definition #511\n* Build time to be printed in sub second precision #510\n\n### v0.32.11 (2021-01-24)\n\n* Validate and warn of unknown keys found in makefiles #506\n\n### v0.32.10 (2020-12-20)\n\n* Task dependencies can now point to makefiles in other directories #497 (thanks @arlyon)\n* Adding async support for cm_run_task duckscript task #493\n* Allow \"=\" in ENV value from cli #502 (thanks @nacardin)\n* Migrate from dirs to dirs_next #491\n* Upgrade dependencies (duckscript runtime 0.6, duckscript SDK 0.7, ci_info, ...)\n\n### v0.32.9 (2020-11-07)\n\n* Add new toml formatting tasks.\n\n### v0.32.8 (2020-11-05)\n\n* Load cargo aliases as tasks #484\n* Support script content as a simple string instead of an array.\n* Support script content as fielded sections (pre/main/post) to enable sharing of common script content between tasks #473\n* The load_script and install_script attribute types supports all script input types (string/vec/file/sections).\n* Fixed invocation of cargo commands with flag arguments #476\n* Improved error message when failing to parse external descriptor #475 (thanks @mrmanne)\n* Fixed git add task description #477 (thanks @knutwalker)\n* Improve core task performance #487\n* Bump rust minimal version to 0.44 due to dependencies updates\n\n### v0.32.7 (2020-10-07)\n\n* Fix passing task args to workspace members #470\n* Update script_runner_args related documentation #471\n\n### v0.32.6 (2020-10-03)\n\n* New script_runner_args task attribute to enable custom cli arguments before the script file #461\n* Fix env_files loading #459 (thanks @wolf4ood)\n* Provide more detailed error message when env-script fails #463 (thanks @epontan)\n* Add example usage with cirrus CI #260 (thanks @fkorotkov and @mtmn)\n* Upgrade duckscript runtime to 0.5.1 and SDK to 0.6.8\n\n### v0.32.5 (2020-09-11)\n\n* Allow for explicit workspace flow in sub flows #455 (thanks @epontan)\n\n### v0.32.4 (2020-08-28)\n\n* Prevent multiple calls to cleanup task\n\n### v0.32.3 (2020-08-27)\n\n* Support cleanup task for forked sub flow #452\n* Upgrade duckscript SDK to 0.6.7\n\n### v0.32.2 (2020-08-20)\n\n* Fix watch invocation in case makefile file path contains spaces #445\n* Clear RUST_RECURSION_COUNT at start of flow #447\n* Fix do-copy-apidocs issue with triple folder #444 (thanks @haraldh)\n* Fix workspace detection for sub flows\n* Add task time summary via new cli flag **--time-summary** or config **time_summary=true** #446\n* Reduce console output for non CI environment (can be disabled via new reduce_output config attribute)\n* Workaround critical bug in rust nightly which breaks shebang based script invocations\n* Upgrade duckscript SDK to 0.6.6\n\n### v0.32.1 (2020-07-31)\n\n* Support numeric environment variables\n* Upgrade duckscript SDK to 0.6.5\n\n### v0.32.0 (2020-07-03)\n\n* Upgrade duckscript SDK to 0.6\n\n### v0.31.1 (2020-06-26)\n\n* Support CARGO_MAKE_WORKSPACE_WORKING_DIRECTORY in workspace emulation mode #434\n* New readme-include-files markdown-include-files tasks to modify markdown files based on content from other files #426\n\n### v0.31.0 (2020-06-06)\n\n* Upgrade duckscript to 0.5\n* Upgrade cargo-watch to 7.4.1\n\n### v0.30.8 (2020-05-25)\n\n* Fix rustfmt nightly installation issue due to rust env issue: rust-lang/rust#72423\n\n### v0.30.7 (2020-05-07)\n\n* New cm_run_task duckscript command which enables to run cargo-make tasks from within duckscript #417\n* New CARGO_MAKE_GIT_HEAD_LAST_COMMIT_HASH and CARGO_MAKE_GIT_HEAD_LAST_COMMIT_HASH_PREFIX environment variables.\n* Bug Fix - no need to define member task names in workspace makefile #420\n* rust_info upgrade.\n* duckscript 0.4 upgrade.\n\n### v0.30.6 (2020-04-24)\n\n* Workspace emulation support #415\n* Support array definition of environment variable values.\n* New wasm related tasks for built in wasm support.\n* Fixed env extension bug when extending a core task.\n* Enable adding custom hooks into print-env flow.\n\n### v0.30.5 (2020-04-15)\n\n* Fixed default core task init/end task names pickup #407\n* New readme-set-crate-version task which modifies README with crate version.\n* Enable to provide custom arguments to git-push task #408\n* build-publish flow will skip git hooks while publishing #408\n* Improve clippy installation flow\n\n### v0.30.4 (2020-04-07)\n\n* Added clippy pre/post flow hook tasks.\n* Added check format pre/post flow hook tasks.\n* clippy and check-format CI flow tasks will only run on nightly linux.\n\n### v0.30.3 (2020-04-04)\n\n* Fix linux release build.\n\n### v0.30.2 (2020-04-04)\n\n* New getat function #402\n* Update openssl version to 1.1.1f\n\n### v0.30.1 (2020-03-28)\n\n* New build-file-increment task and flow #399\n* Display recursion level like `make(1)` #389 (thanks @Ma27)\n* Document github actions CI instructions.\n* Migrate CI to github actions.\n\n### v0.30.0 (2020-03-23)\n\n* Ensure that the specified rustup toolchain exists before using it #388 (thanks @Ma27)\n* kcov coverage flow support for rustc >= 1.44 #393\n* Enable to timeout kcov test execution for each executable via new CARGO_MAKE_KCOV_TEST_TIMEOUT_VALUE environment variable #396\n* New multi-phase-tests profile to enable splitting the tests to multiple phases (thread safe, multi threaded, custom).\n* Ignoring non actionable tasks #390\n* Default build and test tasks support verbose flag on CI environment.\n* Pager disabled for diff command.\n* Split internal cargo-make tests to thread safe and single threaded to improve testing perf\n\n### v0.29.0 (2020-03-19)\n\n* Provide accurate CARGO_MAKE_WORKSPACE_WORKING_DIRECTORY when starting build from member crate #382\n* Support locked automatically for all crate installations via CARGO_MAKE_CRATE_INSTALLATION_LOCKED environment variable #381\n* Added ability to disable sudo invocation from cargo-make scripts via new environment variable CARGO_MAKE_SUDO_DISABLE #387\n* Improve toml loading performance.\n* Split core makefiles to multiple files.\n* Upgrade duckscript to 0.3\n\n### v0.28.0 (2020-02-21)\n\n* Added github hub cli support #376\n* Use fsio crate for file system apis.\n\n### v0.27.0 (2020-02-07)\n\n* Enable to pipe stdin for scripts #355 (thanks @dakom)\n* Upgrade to duckscript 0.2\n\n### v0.26.2 (2020-01-24)\n\n* Print duckscript version info env task #371\n* Duckscript upgrade\n* Migrate several task scripts from shell to duckscript to improve performance\n\n### v0.26.1 (2020-01-17)\n\n* Enable custom project binary executable name for binary release zip\n* Support kcov mac installation #340 (thanks @bluejekyll)\n* Migrate several task scripts from shell to duckscript to improve performance\n* duckscript should exit on any error like shell scripts\n* Update kcov to version 38 #367\n* New wait task to enable sleep as part of the flow\n* Add sleep before member publish during workspace publish flow #368\n\n### v0.26.0 (2020-01-10)\n\n* New env_scripts to enable custom environment setup #360\n* Added new CARGO_MAKE_RUST_TARGET_TRIPLE environment variable #356 (thanks @daxpedda)\n* Added new CARGO_MAKE_CRATE_TARGET_TRIPLE environment variable (get default build target including from '.cargo/Config.toml') #357 (thanks @daxpedda)\n* Enable custom scripts via shebang line for load and install scripts.\n* Enable @script type detection with shebang line #359\n* Upgraded duckscript version\n* Increased minimum rust version to 1.39.0\n* Added condition for build-publish-flow to restrict only to master branch #364\n\n### v0.25.1 (2020-01-03)\n\n* Bug Fix - Fixed CARGO_MAKE_PROJECT_VERSION when main_project_member is set\n* Ensure cargo-make working directory is not modified after duckscript execution.\n\n### v0.25.0 (2020-01-01)\n\n* \\[**backward compatibility break**\\] Ability to set multiple watch paths in watch options #354\n\n### v0.24.3 (2019-12-31)\n\n* Add support for duckscript #348\n* Add conditional validation support for environment variables #344\n* New CARGO_MAKE_PROJECT_NAME and CARGO_MAKE_PROJECT_VERSION environment variables #349\n* Ability to set watch path in watch options #350\n* New zip-release-ci-flow task to enable zip creation for binary release publishing\n* New workspace publish flow #347\n* Upgrading run_script crate\n\n### v0.24.2 (2019-12-13)\n\n* New env_contains condition #335\n* New custom condition failure message attribute: **fail_message** #332\n* New print-env-flow task which prints out entire env info (rust, git, cargo, crate, ci, ...) #333\n* New CARGO_MAKE_CI_BRANCH_NAME environment variable #334\n* New CARGO_MAKE_CI_VENDOR environment variable #337\n* Outdated dependencies validation as part of CI flow to be limited to CI master branch only #323\n\n### v0.24.1 (2019-12-06)\n\n* Support invocation of multiple tasks via run_task #324\n* Support invocation of multiple tasks in parallel via run_task #321\n* New CARGO_MAKE_CURRENT_TASK_NAME, CARGO_MAKE_CURRENT_TASK_INITIAL_MAKEFILE, CARGO_MAKE_CURRENT_TASK_INITIAL_MAKEFILE_DIRECTORY environment variables #322\n* Info printout to state if task is running or skipped #326\n* New CARGO_MAKE_CARGO_HOME environment variable #331 (thanks @daxpedda)\n* Generate task list documentation file via new cli argument (output-file) #325\n* Outdated dependencies validation as part of CI flow to be limited to master branch only #323\n* Use new git_info crate to fetch git info and setup environment #320\n\n### v0.24.0 (2019-11-22)\n\n* Support defining and loading env files in makefile via new env_files attribute #306\n* \\[**backward compatibility break**\\] Workspace profile now passed on to members #309 (thanks @daxpedda)\n* New CARGO_MAKE_WORKSPACE_WORKING_DIRECTORY environment variable #311 (thanks @daxpedda)\n* Fix CARGO_MAKE_TASK_ARGS not being passed down to workspace members #314 (thanks @daxpedda)\n* \\[**backward compatibility break**\\] Task cwd attribute supports environment variables expansion #318\n* Guard against self-referential aliases #305 (thanks @phi-gamma)\n* Migrate to envmnt::expand #308\n* New CARGO_MAKE_WORKSPACE_INCLUDE_MEMBERS environment variable #316\n\n### v0.23.0 (2019-10-16)\n\n* Enable/Disable color output child process support #299 (thanks @emakryo)\n* Main profile should override additional profiles env blocks #300\n* Print project name being built #301\n\n### v0.22.2 (2019-10-01)\n\n* Ability to unset environment variables #294\n* New environment variable to hold current workspace member name #285\n* Support script file path for task script attribute #286\n* New files_exist and files_not_exist conditions #287\n* Added new curl based github release task #293\n* Add cargo-udeps task #284\n* New CARGO_MAKE_PR environment variable #297\n* Add outdated check as part of CI flow\n\n### v0.22.1 (2019-08-20)\n\n* Support decoding ability for environment variables initialization #275 #277\n* Codecov and tarpaulin integration fix for CI flow #274 #275 (thanks @vtavernier)\n* New @@decode function for command arguments #278\n* Move link-dead-code definition to coverage task #279\n* Enable decode to mirror source value as default value #280\n* Add env mapping between cargo make profile and cargo.toml profile #281\n\n### v0.22.0 (2019-08-14)\n\n* Specify minimum version for tools/dependencies #265\n* Globally disable workspace support via makefile config #264\n* Support additional rust script runners #216\n* Ability to mark a task deprecated #270\n* \\[**backward compatibility break**\\] Use task cwd in condition and installation scripts #259\n* Check descriptor min_version before deserializing #268 (thanks @roblabla)\n* Profile name passed incorrectly via forked sub tasks #263\n* Add support for deleting lock file before publishing\n* Add support for dirty cargo publish\n\n### v0.21.0 (2019-06-26)\n\n* Add support for multiple test_args when checking for installed crate #252 (thanks @roblabla)\n* \\[**backward compatibility break**\\] Upgrade shell2batch for improved windows integration\n\n### v0.20.0 (2019-06-16)\n\n* Control kcov installation directory #98\n* Caching kcov documentation #238\n* Upgrade default kcov version to 36\n* \\[**backward compatibility break**\\] Rename KCOV_VERSION to CARGO_MAKE_KCOV_VERSION\n\n### v0.19.5 (2019-06-09)\n\n* Specify cargo-make minimal version #243\n* Add ability to remove --all-features flag from build/test/bench tasks #248\n* Add ability to modify clippy arguments #246\n* Documentation - installing `cargo-make` when caching `cargo` #249 (thanks @elpiel)\n\n### v0.19.4 (2019-06-01)\n\n* Support additional profiles env blocks #240\n* Prevent reinstallation of clippy on nightly #239\n* Upgrade cargo-watch #241 (thanks @David-OConnor)\n\n### v0.19.3 (2019-05-27)\n\n* Fix clippy installation on nightly #236\n\n### v0.19.2 (2019-05-25)\n\n* Allow to modify kcov include pattern #229\n* Improve kcov coverage binary filter pattern #230\n* Prevent init/end task invocations on forked run tasks #227\n* Migrate env file parsing and loading to envmnt\n\n### v0.19.1 (2019-05-10)\n\n* Support setting boolean environment variables #223\n* Added new env_true/env_false conditions #221\n* \\[**backward compatibility break**\\] Normalize boolean env vars #220\n\n### v0.18.0 (2019-04-30)\n\n* Allow run_task to invoke the task as a sub process #214\n* \\[**backward compatibility break**\\] Upgrade shell2batch to fix path separator issue\n\n### v0.17.1 (2019-04-04)\n\n* Fix broken workspace support #210\n\n### v0.17.0 (2019-04-03)\n\n* Add extend capability for tasks #206\n* Support internal core tasks modifications (private and namespacing) #201\n* Support splitting command line argument to multiple arguments using functions #202\n* New remove_empty function #205\n* New trim function #208\n* Add support for namespaces for workspace builds #204\n* Add kcov version validation #203\n\n### v0.16.10 (2019-03-01)\n\n* Fix docs\n\n### v0.16.9 (2019-03-01)\n\n* Colorful output and a new cli argument to disable color (--no-color) #191\n* Support multiple extend #192\n* Support optional extend #193\n* New test-with-args task to enable testing specific tests only\n* Support multi line environment variables from script output #196\n* Reducing cargo-make info level output #194\n* Locking default cargo watch version and supporting user defined version #195\n\n### v0.16.8 (2019-02-09)\n\n* Support additional watch options #188\n* Support glob paths in CARGO_MAKE_WORKSPACE_SKIP_MEMBERS #187\n* Add install-rust-src and install-rls to internal makefile #189\n* Renamed task 'force' attribute to 'ignore_errors' #120\n* Split CARGO_MAKE_TEST_COVERAGE_BINARY_FILTER to use CARGO_MAKE_TEST_COVERAGE_DEFAULT_BINARY_FILTER for easier customization\n\n### v0.16.7 (2019-01-25)\n\n* Shebang line support #130 (thanks @SamuelMarks)\n* Prevent multiple calls for init/end #184\n* Test internal makefile coverage tasks #183\n\n### v0.16.6 (2019-01-21)\n\n* Fix broken coverage task\n\n### v0.16.3 (2019-01-21)\n\n* Enable coverage implementation selection via env #180\n* Fix on error and watch proxy tasks #179\n\n### v0.16.2 (2019-01-20)\n\n* Profile support #174\n* Task routing #175\n* Set travis deploy overwrite=true\n* Fix broken links in documentation\n\n### v0.16.1 (2019-01-17)\n\n* Enable coverage for every Linux based CI system\n* Support task watch #118\n* Command --list-all-steps now supports markdown output format\n* New command --diff-steps to enable diff changes to flow based on custom makefile #121\n* Document Azure Pipelines config #161\n* New diff-files task which enables to diff 2 provided files\n\n### v0.16.0 (2019-01-04)\n\n* \\[**backward compatibility break**\\] Should abort on non existent makefile if provided on cli or on extends property #143\n* \\[**backward compatibility break**\\] Update format task for stable rust #160\n* Add format check and clippy to ci-flow #161 (thanks @D4nte)\n* Add new print steps output format 'short-description' #121\n* \\[**backward compatibility break**\\] Remove preview from clippy and rustfmt components #162\n* Add new CARGO_MAKE_CI environment variable\n\n### v0.15.3 (2018-12-07)\n\n* Package additional executable without cargo dependency #69\n* Add CircleCI docs #152\n* Delete merged branches as part of github release flow #154\n* Fixed uploading windows binaries to GitHub releases #157\n\n### v0.15.2 (2018-11-28)\n\n* Rustup integration for non-binary/non-cargo dependencies #139\n* Rust toolchain support #132\n* Add fmt check task #138\n* Support absolute path for CARGO_MAKE_WORKING_DIRECTORY on windows #142\n\n### v0.15.1 (2018-11-12)\n\n* Fix github release as part of travis build\n\n### v0.15.0 (2018-11-12)\n\n* rustup integration #122\n* add clippy rustup installation config #119\n* prevent script output if log level is error #117\n* Support uploading binaries to GitHub releases #127 (thanks @LegNeato)\n\n### v0.14.0 (2018-09-05)\n\n* Condition support for rust version (min,max,eq) #110\n* Upgrade dependencies with possible backward compatibility break\n\n### v0.13.0 (2018-08-10)\n\n* Upgrade rustfmt support\n\n### v0.12.1 (2018-08-09)\n\n* Support additional default coverage test patterns #107\n\n### v0.12.0 (2018-08-02)\n\n* Defining --no-workspace cli flag via task attribute #99\n* Support unsetting task attributes in extended Makefile #100\n* Support accepting arguments and passing them to commands and scripts #101\n* Follow XDG Base Directory Specification #105\n* Doc category for task list #102\n\n### v0.11.3 (2018-06-24)\n\n* Fix workspace coverage not being generated #97\n\n### v0.11.2 (2018-06-22)\n\n* Fix automatic workspace makefile extending #96\n\n### v0.11.1 (2018-06-06)\n\n* Support writing tasks in various scripting languages #90\n* Internal private tasks #94\n\n### v0.11.0 (2018-05-29)\n\n* Support environment variable substitution in commands and arguments #92\n\n### v0.10.8 (2018-05-18)\n\n* Add support for a catch/cleanup task in case of any errors #89\n* Load env vars from simple text files #88\n* Fix workspace member paths on windows #87\n\n### v0.10.7 (2018-05-11)\n\n* Support automatic workspace makefile extend #84\n* New task to rebuild lock file with most updated dependencies #83\n\n### v0.10.6 (2018-03-20)\n\n* Fix script issues due to file permissions (#81)\n\n### v0.10.5 (2018-02-27)\n\n* cargo make audit will only be invoked if a Cargo.lock file exists (#74)\n\n### v0.10.4 (2018-02-26)\n\n* Fix composite environment variables resolution order (#78)\n\n### v0.10.3 (2018-02-24)\n\n* update_check_minimum_interval default changed be weekly (#76)\n* Added test_ files to kcov test coverage invocation\n* Update dependencies documentation (#72)\n\n### v0.10.2 (2018-02-08)\n\n* Check for update minimum interval definition in global configuration (#68)\n\n### v0.10.0 (2018-02-02)\n\n* Search for makefile.toml in parent directories (#65)\n* Global configuration file to define default log level, task name (#64)\n* Reformat changelog (#66)\n\n### v0.9.5 (2018-01-22)\n\n* Fixed critical loading issue due to #56\n\n### v0.9.4 (2018-01-19)\n\n* Support new skip_core_tasks config flag (#56)\n\n### v0.9.3 (2018-01-05)\n\n* Coverage test files user level pattern (#59 and #60)\n\n### v0.9.2 (2017-12-29)\n\n* Coverage will execute all test files without any need for specific naming conventions or configuration (#50 and #51)\n\n### v0.9.1 (2017-12-28)\n\n* Bug fixes for git info loading and coverage on workspace level (#49 and #52)\n\n### v0.9.0 (2017-12-18)\n\n* Disabled tasks should be skipped including dependencies (#47)\n\n### v0.8.0 (2017-12-17)\n\n* Support multiple rustfmt versions (#45)\n\n### v0.7.11 (2017-12-14)\n\n* Fixed rustfmt backward compatibility break issue\n\n### v0.7.10 (2017-12-06)\n\n* Workspace support fixes for windows\n\n### v0.7.5 (2017-12-03)\n\n* Support conditional skipping of workspace members from flow (#42)\n\n### v0.7.4 (2017-10-25)\n\n* kcov support for excluding lines/blocks from coverage report\n\n### v0.7.2 (2017-10-23)\n\n* Added workspace level coverage task without the need to run full CI flow (workspace-coverage)\n\n### v0.7.1 (2017-10-21)\n\n* Added support for cross platform scripts using script runner @shell\n\n### v0.7.0 (2017-10-20)\n\n* Refactored how rust code based scripts are defined to enable future expansion of this feature.\n\n### v0.6.5 (2017-10-12)\n\n* ci-flow and build-flow will build/run benches and examples based on new environment variables: CARGO_MAKE_BUILD_EXAMPLES, CARGO_MAKE_BUILD_BENCH and CARGO_MAKE_RUN_BENCH\n\n### v0.6.1 (2017-10-08)\n\n* Tasks can now run rust code using rust_script attribute and tasks can no longer hold multiple different action definitions.\n\n### v0.5.3 (2017-09-29)\n\n* Added support to evaluate env var values from script output and define cwd on task level\n\n### v0.5.2 (2017-09-24)\n\n* Added various check and build tasks\n\n### v0.5.0 (2017-09-21)\n\n* Disable by default coverage flow on mac\n\n### v0.4.1 (2017-09-18)\n\n* Added watch-flow task\n\n### v0.3.77 (2017-09-17)\n\n* Automatically define install_crate and enable cargo install arguments via install_crate_args\n\n### v0.3.76 (2017-09-16)\n\n* Build failure will not cause panic but will exit\n\n### v0.3.75 (2017-09-12)\n\n* By default build and test should work with \"--all-features\" flag\n\n### v0.3.66 (2017-08-23)\n\n* Add support for workspace glob members\n\n### v0.3.64 (2017-08-22)\n\n* Cargo.toml parsing fix\n\n### v0.3.63 (2017-08-21)\n\n* Add support for Cargo.toml workspace.exclude\n\n### v0.3.62 (2017-08-21)\n\n* Add workspace member detection based on dependency paths\n\n### v0.3.59 (2017-08-20)\n\n* Support load_script platform overrides\n\n### v0.3.58 (2017-08-19)\n\n* Added load_script capability\n\n### v0.3.56 (2017-08-18)\n\n* Set environment variables during task invocation\n\n### v0.3.53 (2017-08-09)\n\n* Added new condition types: env, env_set and env_not_set\n\n### v0.3.51 (2017-08-09)\n\n* Added experimental cli arg to enable access unsupported experimental predefined tasks\n\n### v0.3.49 (2017-08-08)\n\n* Added condition attribute\n\n### v0.3.46 (2017-08-06)\n\n* Added bintray upload task\n\n### v0.3.43 (2017-08-02)\n\n* Added --env/-e cli args to set environment variables via command line\n\n### v0.3.41 (2017-08-01)\n\n* Added github-publish task\n\n### v0.3.38 (2017-07-28)\n\n* Added run_script which allows executing sub tasks\n\n### v0.3.37 (2017-07-25)\n\n* Added condition script capability for tasks\n\n### v0.3.36 (2017-07-22)\n\n* Added coverage-lcov task (not fully tested)\n\n### v0.3.34 (2017-07-21)\n\n* Added coverage-tarpaulin task\n\n### v0.3.33 (2017-07-21)\n\n* Added more environment variables for workspace support\n\n### v0.3.32 (2017-07-20)\n\n* Added --list-all-steps cli option\n\n### v0.3.28 (2017-07-17)\n\n* workspace level ci flow\n\n### v0.3.27 (2017-07-16)\n\n* cargo make ci-flow on travis now automatically runs code coverage and uploads to codecov\n\n### v0.3.25 (2017-07-16)\n\n* New --no-workspace cli arg\n\n### v0.3.24 (2017-07-15)\n\n* Workspace support\n\n### v0.3.23 (2017-07-14)\n\n* Added codecov task in default toml\n\n### v0.3.20 (2017-07-14)\n\n* Added coverage task in default toml\n\n### v0.3.16 (2017-07-14)\n\n* Added more environment variables based on target environment and rust compiler\n\n### v0.3.15 (2017-07-13)\n\n* Added common init and end tasks\n\n### v0.3.13 (2017-07-10)\n\n* cargo-make now defines rust version env vars\n\n### v0.3.11 (2017-07-09)\n\n* cargo-make now defines env vars based on project git repo information\n\n### v0.3.10 (2017-07-06)\n\n* cargo-make now defines env vars based on project Cargo.toml\n\n### v0.3.6 (2017-07-05)\n\n* Added --cwd cli arg to enable setting working directory\n\n### v0.3.5 (2017-07-04)\n\n* Added clippy task\n\n### v0.3.4 (2017-07-03)\n\n* Added --print-steps cli arg\n\n### v0.3.1 (2017-07-02)\n\n* Added CARGO_MAKE_TASK env var holding the main task name\n\n### v0.3.0 (2017-07-02)\n\n* Renamed few cli options\n\n### v0.2.20 (2017-07-02)\n\n* Added -v and --verbose cli arg\n\n### v0.2.19 (2017-07-01)\n\n* Added extend config level attribute\n\n### v0.2.17 (2017-06-30)\n\n* Added force task attribute\n\n### v0.2.12 (2017-06-28)\n\n* Published website\n\n### v0.2.8 (2017-06-28)\n\n* Platform specific task override\n\n### v0.2.7 (2017-06-26)\n\n* Platform specific alias\n\n### v0.2.6 (2017-06-26)\n\n* Enable task attributes override\n\n### v0.2.3 (2017-06-25)\n\n* Added disabled task attribute support\n\n### v0.2.0 (2017-06-24)\n\n* Internal fixes (renamed dependencies attribute)\n\n### v0.1.2 (2017-06-24)\n\n* Print build time, added internal docs, unit tests and coverage\n\n### v0.1.1 (2017-06-24)\n\n* Added support for env vars, task alias and crate installation\n\n### v0.1.0 (2017-06-23)\n\n* Initial release.\n\n"
        },
        {
          "name": "Cargo.lock",
          "type": "blob",
          "size": 51.25,
          "content": "# This file is automatically @generated by Cargo.\n# It is not intended for manual editing.\nversion = 3\n\n[[package]]\nname = \"adler2\"\nversion = \"2.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"512761e0bb2578dd7380c6baaa0f4ce03e84f95e960231d1dec8bf4d7d6e2627\"\n\n[[package]]\nname = \"aho-corasick\"\nversion = \"1.1.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8e60d3430d3a69478ad0993f19238d2df97c507009a52b3c10addcd7f6bcb916\"\ndependencies = [\n \"memchr\",\n]\n\n[[package]]\nname = \"android-tzdata\"\nversion = \"0.1.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e999941b234f3131b00bc13c22d06e8c5ff726d1b6318ac7eb276997bbb4fef0\"\n\n[[package]]\nname = \"android_system_properties\"\nversion = \"0.1.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"819e7219dbd41043ac279b19830f2efc897156490d7fd6ea916720117ee66311\"\ndependencies = [\n \"libc\",\n]\n\n[[package]]\nname = \"arbitrary\"\nversion = \"1.3.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"7d5a26814d8dcb93b0e5a0ff3c6d80a8843bafb21b39e8e18a6f05471870e110\"\ndependencies = [\n \"derive_arbitrary\",\n]\n\n[[package]]\nname = \"attohttpc\"\nversion = \"0.28.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"9a13149d0cf3f7f9b9261fad4ec63b2efbf9a80665f52def86282d26255e6331\"\ndependencies = [\n \"flate2\",\n \"http\",\n \"log\",\n \"native-tls\",\n \"rustls\",\n \"url\",\n \"webpki-roots\",\n]\n\n[[package]]\nname = \"autocfg\"\nversion = \"1.4.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ace50bade8e6234aa140d9a2f552bbee1db4d353f69b8217bc503490fc1a9f26\"\n\n[[package]]\nname = \"base64\"\nversion = \"0.22.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"72b3254f16251a8381aa12e40e3c4d2f0199f8c6508fbecb9d91f575e0fbb8c6\"\n\n[[package]]\nname = \"bitflags\"\nversion = \"2.6.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b048fb63fd8b5923fc5aa7b340d8e156aec7ec02f0c78fa8a6ddc2613f6f71de\"\n\n[[package]]\nname = \"block-buffer\"\nversion = \"0.10.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3078c7629b62d3f0439517fa394996acacc5cbc91c5a20d8c658e77abd503a71\"\ndependencies = [\n \"generic-array\",\n]\n\n[[package]]\nname = \"bstr\"\nversion = \"1.10.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"40723b8fb387abc38f4f4a37c09073622e41dd12327033091ef8950659e6dc0c\"\ndependencies = [\n \"memchr\",\n \"serde\",\n]\n\n[[package]]\nname = \"bumpalo\"\nversion = \"3.16.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"79296716171880943b8470b5f8d03aa55eb2e645a4874bdbb28adb49162e012c\"\n\n[[package]]\nname = \"byteorder\"\nversion = \"1.5.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1fd0f2584146f6f2ef48085050886acf353beff7305ebd1ae69500e27c67f64b\"\n\n[[package]]\nname = \"bytes\"\nversion = \"1.7.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"428d9aa8fbc0670b7b8d6030a7fadd0f86151cae55e4dbbece15f3780a3dfaf3\"\n\n[[package]]\nname = \"bzip2\"\nversion = \"0.4.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"bdb116a6ef3f6c3698828873ad02c3014b3c85cadb88496095628e3ef1e347f8\"\ndependencies = [\n \"bzip2-sys\",\n \"libc\",\n]\n\n[[package]]\nname = \"bzip2-sys\"\nversion = \"0.1.11+1.0.8\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"736a955f3fa7875102d57c82b8cac37ec45224a07fd32d58f9f7a186b6cd4cdc\"\ndependencies = [\n \"cc\",\n \"libc\",\n \"pkg-config\",\n]\n\n[[package]]\nname = \"camino\"\nversion = \"1.1.9\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8b96ec4966b5813e2c0507c1f86115c8c5abaadc3980879c3424042a02fd1ad3\"\ndependencies = [\n \"serde\",\n]\n\n[[package]]\nname = \"cargo-make\"\nversion = \"0.37.23\"\ndependencies = [\n \"cargo_metadata\",\n \"cfg-if\",\n \"ci_info\",\n \"cliparser\",\n \"colored\",\n \"ctrlc\",\n \"dirs-next\",\n \"duckscript\",\n \"duckscriptsdk\",\n \"envmnt\",\n \"expect-test\",\n \"fern\",\n \"fsio\",\n \"git_info\",\n \"glob\",\n \"home\",\n \"ignore\",\n \"indexmap 2.6.0\",\n \"itertools\",\n \"lenient_semver\",\n \"log\",\n \"md5\",\n \"nu-ansi-term\",\n \"once_cell\",\n \"petgraph\",\n \"regex\",\n \"run_script\",\n \"rust_info\",\n \"semver\",\n \"serde\",\n \"serde_derive\",\n \"serde_ignored\",\n \"serde_json\",\n \"shell2batch\",\n \"strip-ansi-escapes\",\n \"strum_macros\",\n \"toml\",\n]\n\n[[package]]\nname = \"cargo-platform\"\nversion = \"0.1.8\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"24b1f0365a6c6bb4020cd05806fd0d33c44d38046b8bd7f0e40814b9763cabfc\"\ndependencies = [\n \"serde\",\n]\n\n[[package]]\nname = \"cargo_metadata\"\nversion = \"0.18.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"2d886547e41f740c616ae73108f6eb70afe6d940c7bc697cb30f13daec073037\"\ndependencies = [\n \"camino\",\n \"cargo-platform\",\n \"semver\",\n \"serde\",\n \"serde_json\",\n \"thiserror\",\n]\n\n[[package]]\nname = \"cc\"\nversion = \"1.1.31\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"c2e7962b54006dcfcc61cb72735f4d89bb97061dd6a7ed882ec6b8ee53714c6f\"\ndependencies = [\n \"shlex\",\n]\n\n[[package]]\nname = \"cfg-if\"\nversion = \"1.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"baf1de4339761588bc0619e3cbc0120ee582ebb74b53b4efbf79117bd2da40fd\"\n\n[[package]]\nname = \"cfg_aliases\"\nversion = \"0.2.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"613afe47fcd5fac7ccf1db93babcb082c5994d996f20b8b159f2ad1658eb5724\"\n\n[[package]]\nname = \"chrono\"\nversion = \"0.4.38\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a21f936df1771bf62b77f047b726c4625ff2e8aa607c01ec06e5a05bd8463401\"\ndependencies = [\n \"android-tzdata\",\n \"iana-time-zone\",\n \"num-traits\",\n \"windows-targets 0.52.6\",\n]\n\n[[package]]\nname = \"ci_info\"\nversion = \"0.14.14\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"840dbb7bdd1f2c4d434d6b08420ef204e0bfad0ab31a07a80a1248d24cc6e38b\"\ndependencies = [\n \"envmnt\",\n]\n\n[[package]]\nname = \"cliparser\"\nversion = \"0.1.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"74bd707b71a46260ab2b8951748cae3010445aced1dc000ef90d4156bcfad5a2\"\n\n[[package]]\nname = \"colored\"\nversion = \"2.1.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"cbf2150cce219b664a8a70df7a1f933836724b503f8a413af9365b4dcc4d90b8\"\ndependencies = [\n \"lazy_static\",\n \"windows-sys 0.48.0\",\n]\n\n[[package]]\nname = \"core-foundation\"\nversion = \"0.9.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"91e195e091a93c46f7102ec7818a2aa394e1e1771c3ab4825963fa03e45afb8f\"\ndependencies = [\n \"core-foundation-sys\",\n \"libc\",\n]\n\n[[package]]\nname = \"core-foundation-sys\"\nversion = \"0.8.7\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"773648b94d0e5d620f64f280777445740e61fe701025087ec8b57f45c791888b\"\n\n[[package]]\nname = \"cpufeatures\"\nversion = \"0.2.14\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"608697df725056feaccfa42cffdaeeec3fccc4ffc38358ecd19b243e716a78e0\"\ndependencies = [\n \"libc\",\n]\n\n[[package]]\nname = \"crc32fast\"\nversion = \"1.4.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a97769d94ddab943e4510d138150169a2758b5ef3eb191a9ee688de3e23ef7b3\"\ndependencies = [\n \"cfg-if\",\n]\n\n[[package]]\nname = \"crossbeam-deque\"\nversion = \"0.8.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"613f8cc01fe9cf1a3eb3d7f488fd2fa8388403e97039e2f73692932e291a770d\"\ndependencies = [\n \"crossbeam-epoch\",\n \"crossbeam-utils\",\n]\n\n[[package]]\nname = \"crossbeam-epoch\"\nversion = \"0.9.18\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"5b82ac4a3c2ca9c3460964f020e1402edd5753411d7737aa39c3714ad1b5420e\"\ndependencies = [\n \"crossbeam-utils\",\n]\n\n[[package]]\nname = \"crossbeam-utils\"\nversion = \"0.8.20\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"22ec99545bb0ed0ea7bb9b8e1e9122ea386ff8a48c0922e43f36d45ab09e0e80\"\n\n[[package]]\nname = \"crypto-common\"\nversion = \"0.1.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1bfb12502f3fc46cca1bb51ac28df9d618d813cdc3d2f25b9fe775a34af26bb3\"\ndependencies = [\n \"generic-array\",\n \"typenum\",\n]\n\n[[package]]\nname = \"ctrlc\"\nversion = \"3.4.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"90eeab0aa92f3f9b4e87f258c72b139c207d251f9cbc1080a0086b86a8870dd3\"\ndependencies = [\n \"nix\",\n \"windows-sys 0.59.0\",\n]\n\n[[package]]\nname = \"deranged\"\nversion = \"0.3.11\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b42b6fa04a440b495c8b04d0e71b707c585f83cb9cb28cf8cd0d976c315e31b4\"\ndependencies = [\n \"powerfmt\",\n]\n\n[[package]]\nname = \"derive_arbitrary\"\nversion = \"1.3.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"67e77553c4162a157adbf834ebae5b415acbecbeafc7a74b0e886657506a7611\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn\",\n]\n\n[[package]]\nname = \"digest\"\nversion = \"0.10.7\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"9ed9a281f7bc9b7576e61468ba615a66a5c8cfdff42420a70aa82701a3b1e292\"\ndependencies = [\n \"block-buffer\",\n \"crypto-common\",\n]\n\n[[package]]\nname = \"dirs-next\"\nversion = \"2.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b98cf8ebf19c3d1b223e151f99a4f9f0690dca41414773390fc824184ac833e1\"\ndependencies = [\n \"cfg-if\",\n \"dirs-sys-next\",\n]\n\n[[package]]\nname = \"dirs-sys-next\"\nversion = \"0.1.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"4ebda144c4fe02d1f7ea1a7d9641b6fc6b580adcfa024ae48797ecdeb6825b4d\"\ndependencies = [\n \"libc\",\n \"redox_users\",\n \"winapi\",\n]\n\n[[package]]\nname = \"displaydoc\"\nversion = \"0.2.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"97369cbbc041bc366949bc74d34658d6cda5621039731c6310521892a3a20ae0\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn\",\n]\n\n[[package]]\nname = \"dissimilar\"\nversion = \"1.0.9\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"59f8e79d1fbf76bdfbde321e902714bf6c49df88a7dda6fc682fc2979226962d\"\n\n[[package]]\nname = \"duckscript\"\nversion = \"0.10.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"57cfc23abea2fe1fed7daab3cda7708a4cce9185794a2163a853c0d36a497e57\"\ndependencies = [\n \"fsio\",\n]\n\n[[package]]\nname = \"duckscriptsdk\"\nversion = \"0.11.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"29c5669655efc2ef2293344a52bf4254d66026d703f8d89224e32f3de7ab6b46\"\ndependencies = [\n \"attohttpc\",\n \"base64\",\n \"cfg-if\",\n \"colored\",\n \"duckscript\",\n \"evalexpr\",\n \"fs_extra\",\n \"fsio\",\n \"glob\",\n \"heck\",\n \"home\",\n \"ignore\",\n \"java-properties\",\n \"num_cpus\",\n \"rand\",\n \"semver\",\n \"serde_json\",\n \"sha2\",\n \"suppaftp\",\n \"uname\",\n \"walkdir\",\n \"which\",\n \"whoami\",\n \"zip\",\n]\n\n[[package]]\nname = \"dunce\"\nversion = \"1.0.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"92773504d58c093f6de2459af4af33faa518c13451eb8f2b5698ed3d36e7c813\"\n\n[[package]]\nname = \"either\"\nversion = \"1.13.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"60b1af1c220855b6ceac025d3f6ecdd2b7c4894bfe9cd9bda4fbb4bc7c0d4cf0\"\n\n[[package]]\nname = \"encoding_rs\"\nversion = \"0.8.34\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b45de904aa0b010bce2ab45264d0631681847fa7b6f2eaa7dab7619943bc4f59\"\ndependencies = [\n \"cfg-if\",\n]\n\n[[package]]\nname = \"envmnt\"\nversion = \"0.10.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d73999a2b8871e74c8b8bc23759ee9f3d85011b24fafc91a4b3b5c8cc8185501\"\ndependencies = [\n \"fsio\",\n \"indexmap 1.9.3\",\n]\n\n[[package]]\nname = \"equivalent\"\nversion = \"1.0.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"5443807d6dff69373d433ab9ef5378ad8df50ca6298caf15de6e52e24aaf54d5\"\n\n[[package]]\nname = \"errno\"\nversion = \"0.3.9\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"534c5cf6194dfab3db3242765c03bbe257cf92f22b38f6bc0c58d59108a820ba\"\ndependencies = [\n \"libc\",\n \"windows-sys 0.52.0\",\n]\n\n[[package]]\nname = \"evalexpr\"\nversion = \"11.3.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b6aff27af350e7b53e82aac3e5ab6389abd8f280640ac034508dff0608c4c7e5\"\n\n[[package]]\nname = \"expect-test\"\nversion = \"1.5.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"9e0be0a561335815e06dab7c62e50353134c796e7a6155402a64bcff66b6a5e0\"\ndependencies = [\n \"dissimilar\",\n \"once_cell\",\n]\n\n[[package]]\nname = \"fastrand\"\nversion = \"2.1.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e8c02a5121d4ea3eb16a80748c74f5549a5665e4c21333c6098f283870fbdea6\"\n\n[[package]]\nname = \"fern\"\nversion = \"0.7.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"69ff9c9d5fb3e6da8ac2f77ab76fe7e8087d512ce095200f8f29ac5b656cf6dc\"\ndependencies = [\n \"log\",\n]\n\n[[package]]\nname = \"fixedbitset\"\nversion = \"0.4.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"0ce7134b9999ecaf8bcd65542e436736ef32ddca1b3e06094cb6ec5755203b80\"\n\n[[package]]\nname = \"flate2\"\nversion = \"1.0.34\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a1b589b4dc103969ad3cf85c950899926ec64300a1a46d76c03a6072957036f0\"\ndependencies = [\n \"crc32fast\",\n \"miniz_oxide\",\n]\n\n[[package]]\nname = \"fnv\"\nversion = \"1.0.7\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3f9eec918d3f24069decb9af1554cad7c880e2da24a9afd88aca000531ab82c1\"\n\n[[package]]\nname = \"foreign-types\"\nversion = \"0.3.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f6f339eb8adc052cd2ca78910fda869aefa38d22d5cb648e6485e4d3fc06f3b1\"\ndependencies = [\n \"foreign-types-shared\",\n]\n\n[[package]]\nname = \"foreign-types-shared\"\nversion = \"0.1.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"00b0228411908ca8685dba7fc2cdd70ec9990a6e753e89b6ac91a84c40fbaf4b\"\n\n[[package]]\nname = \"form_urlencoded\"\nversion = \"1.2.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e13624c2627564efccf4934284bdd98cbaa14e79b0b5a141218e507b3a823456\"\ndependencies = [\n \"percent-encoding\",\n]\n\n[[package]]\nname = \"fs_extra\"\nversion = \"1.3.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"42703706b716c37f96a77aea830392ad231f44c9e9a67872fa5548707e11b11c\"\n\n[[package]]\nname = \"fsio\"\nversion = \"0.4.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"dad0ce30be0cc441b325c5d705c8b613a0ca0d92b6a8953d41bd236dc09a36d0\"\ndependencies = [\n \"dunce\",\n \"rand\",\n]\n\n[[package]]\nname = \"futures-core\"\nversion = \"0.3.31\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"05f29059c0c2090612e8d742178b0580d2dc940c837851ad723096f87af6663e\"\n\n[[package]]\nname = \"futures-io\"\nversion = \"0.3.31\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"9e5c1b78ca4aae1ac06c48a526a655760685149f0d465d21f37abfe57ce075c6\"\n\n[[package]]\nname = \"futures-lite\"\nversion = \"2.3.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"52527eb5074e35e9339c6b4e8d12600c7128b68fb25dcb9fa9dec18f7c25f3a5\"\ndependencies = [\n \"fastrand\",\n \"futures-core\",\n \"futures-io\",\n \"parking\",\n \"pin-project-lite\",\n]\n\n[[package]]\nname = \"generic-array\"\nversion = \"0.14.7\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"85649ca51fd72272d7821adaf274ad91c288277713d9c18820d8499a7ff69e9a\"\ndependencies = [\n \"typenum\",\n \"version_check\",\n]\n\n[[package]]\nname = \"getrandom\"\nversion = \"0.2.15\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"c4567c8db10ae91089c99af84c68c38da3ec2f087c3f82960bcdbf3656b6f4d7\"\ndependencies = [\n \"cfg-if\",\n \"libc\",\n \"wasi\",\n]\n\n[[package]]\nname = \"git_info\"\nversion = \"0.1.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"9525474359e360de19580a77590f3491c94d57b1ef2b8bd468877a83cbc7f4cb\"\n\n[[package]]\nname = \"glob\"\nversion = \"0.3.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d2fabcfbdc87f4758337ca535fb41a6d701b65693ce38287d856d1674551ec9b\"\n\n[[package]]\nname = \"globset\"\nversion = \"0.4.15\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"15f1ce686646e7f1e19bf7d5533fe443a45dbfb990e00629110797578b42fb19\"\ndependencies = [\n \"aho-corasick\",\n \"bstr\",\n \"log\",\n \"regex-automata\",\n \"regex-syntax\",\n]\n\n[[package]]\nname = \"hashbrown\"\nversion = \"0.12.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8a9ee70c43aaf417c914396645a0fa852624801b24ebb7ae78fe8272889ac888\"\n\n[[package]]\nname = \"hashbrown\"\nversion = \"0.15.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1e087f84d4f86bf4b218b927129862374b72199ae7d8657835f1e89000eea4fb\"\n\n[[package]]\nname = \"heck\"\nversion = \"0.5.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"2304e00983f87ffb38b55b444b5e3b60a884b5d30c0fca7d82fe33449bbe55ea\"\n\n[[package]]\nname = \"hermit-abi\"\nversion = \"0.3.9\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d231dfb89cfffdbc30e7fc41579ed6066ad03abda9e567ccafae602b97ec5024\"\n\n[[package]]\nname = \"home\"\nversion = \"0.5.9\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e3d1354bf6b7235cb4a0576c2619fd4ed18183f689b12b006a0ee7329eeff9a5\"\ndependencies = [\n \"windows-sys 0.52.0\",\n]\n\n[[package]]\nname = \"http\"\nversion = \"1.1.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"21b9ddb458710bc376481b842f5da65cdf31522de232c1ca8146abce2a358258\"\ndependencies = [\n \"bytes\",\n \"fnv\",\n \"itoa\",\n]\n\n[[package]]\nname = \"iana-time-zone\"\nversion = \"0.1.61\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"235e081f3925a06703c2d0117ea8b91f042756fd6e7a6e5d901e8ca1a996b220\"\ndependencies = [\n \"android_system_properties\",\n \"core-foundation-sys\",\n \"iana-time-zone-haiku\",\n \"js-sys\",\n \"wasm-bindgen\",\n \"windows-core\",\n]\n\n[[package]]\nname = \"iana-time-zone-haiku\"\nversion = \"0.1.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f31827a206f56af32e590ba56d5d2d085f558508192593743f16b2306495269f\"\ndependencies = [\n \"cc\",\n]\n\n[[package]]\nname = \"idna\"\nversion = \"0.5.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"634d9b1461af396cad843f47fdba5597a4f9e6ddd4bfb6ff5d85028c25cb12f6\"\ndependencies = [\n \"unicode-bidi\",\n \"unicode-normalization\",\n]\n\n[[package]]\nname = \"ignore\"\nversion = \"0.4.23\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"6d89fd380afde86567dfba715db065673989d6253f42b88179abd3eae47bda4b\"\ndependencies = [\n \"crossbeam-deque\",\n \"globset\",\n \"log\",\n \"memchr\",\n \"regex-automata\",\n \"same-file\",\n \"walkdir\",\n \"winapi-util\",\n]\n\n[[package]]\nname = \"indexmap\"\nversion = \"1.9.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"bd070e393353796e801d209ad339e89596eb4c8d430d18ede6a1cced8fafbd99\"\ndependencies = [\n \"autocfg\",\n \"hashbrown 0.12.3\",\n]\n\n[[package]]\nname = \"indexmap\"\nversion = \"2.6.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"707907fe3c25f5424cce2cb7e1cbcafee6bdbe735ca90ef77c29e84591e5b9da\"\ndependencies = [\n \"equivalent\",\n \"hashbrown 0.15.0\",\n \"serde\",\n]\n\n[[package]]\nname = \"itertools\"\nversion = \"0.13.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"413ee7dfc52ee1a4949ceeb7dbc8a33f2d6c088194d9f922fb8318faf1f01186\"\ndependencies = [\n \"either\",\n]\n\n[[package]]\nname = \"itoa\"\nversion = \"1.0.11\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"49f1f14873335454500d59611f1cf4a4b0f786f9ac11f4312a78e4cf2566695b\"\n\n[[package]]\nname = \"java-properties\"\nversion = \"2.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"37bf6f484471c451f2b51eabd9e66b3fa7274550c5ec4b6c3d6070840945117f\"\ndependencies = [\n \"encoding_rs\",\n \"lazy_static\",\n \"regex\",\n]\n\n[[package]]\nname = \"js-sys\"\nversion = \"0.3.72\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"6a88f1bda2bd75b0452a14784937d796722fdebfe50df998aeb3f0b7603019a9\"\ndependencies = [\n \"wasm-bindgen\",\n]\n\n[[package]]\nname = \"lazy-regex\"\nversion = \"3.3.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8d8e41c97e6bc7ecb552016274b99fbb5d035e8de288c582d9b933af6677bfda\"\ndependencies = [\n \"lazy-regex-proc_macros\",\n \"once_cell\",\n \"regex\",\n]\n\n[[package]]\nname = \"lazy-regex-proc_macros\"\nversion = \"3.3.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"76e1d8b05d672c53cb9c7b920bbba8783845ae4f0b076e02a3db1d02c81b4163\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"regex\",\n \"syn\",\n]\n\n[[package]]\nname = \"lazy_static\"\nversion = \"1.5.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"bbd2bcb4c963f2ddae06a2efc7e9f3591312473c50c6685e1f298068316e66fe\"\n\n[[package]]\nname = \"lenient_semver\"\nversion = \"0.4.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"de8de3f4f3754c280ce1c8c42ed8dd26a9c8385c2e5ad4ec5a77e774cea9c1ec\"\ndependencies = [\n \"lenient_semver_parser\",\n \"semver\",\n]\n\n[[package]]\nname = \"lenient_semver_parser\"\nversion = \"0.4.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"7f650c1d024ddc26b4bb79c3076b30030f2cf2b18292af698c81f7337a64d7d6\"\ndependencies = [\n \"lenient_semver_version_builder\",\n \"semver\",\n]\n\n[[package]]\nname = \"lenient_semver_version_builder\"\nversion = \"0.4.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"9049f8ff49f75b946f95557148e70230499c8a642bf2d6528246afc7d0282d17\"\ndependencies = [\n \"semver\",\n]\n\n[[package]]\nname = \"libc\"\nversion = \"0.2.161\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8e9489c2807c139ffd9c1794f4af0ebe86a828db53ecdc7fea2111d0fed085d1\"\n\n[[package]]\nname = \"libredox\"\nversion = \"0.1.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"c0ff37bd590ca25063e35af745c343cb7a0271906fb7b37e4813e8f79f00268d\"\ndependencies = [\n \"bitflags\",\n \"libc\",\n]\n\n[[package]]\nname = \"linux-raw-sys\"\nversion = \"0.4.14\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"78b3ae25bc7c8c38cec158d1f2757ee79e9b3740fbc7ccf0e59e4b08d793fa89\"\n\n[[package]]\nname = \"lockfree-object-pool\"\nversion = \"0.1.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"9374ef4228402d4b7e403e5838cb880d9ee663314b0a900d5a6aabf0c213552e\"\n\n[[package]]\nname = \"log\"\nversion = \"0.4.22\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a7a70ba024b9dc04c27ea2f0c0548feb474ec5c54bba33a7f72f873a39d07b24\"\n\n[[package]]\nname = \"md5\"\nversion = \"0.7.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"490cc448043f947bae3cbee9c203358d62dbee0db12107a74be5c30ccfd09771\"\n\n[[package]]\nname = \"memchr\"\nversion = \"2.7.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"78ca9ab1a0babb1e7d5695e3530886289c18cf2f87ec19a575a0abdce112e3a3\"\n\n[[package]]\nname = \"miniz_oxide\"\nversion = \"0.8.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e2d80299ef12ff69b16a84bb182e3b9df68b5a91574d3d4fa6e41b65deec4df1\"\ndependencies = [\n \"adler2\",\n]\n\n[[package]]\nname = \"native-tls\"\nversion = \"0.2.12\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a8614eb2c83d59d1c8cc974dd3f920198647674a0a035e1af1fa58707e317466\"\ndependencies = [\n \"libc\",\n \"log\",\n \"openssl\",\n \"openssl-probe\",\n \"openssl-sys\",\n \"schannel\",\n \"security-framework\",\n \"security-framework-sys\",\n \"tempfile\",\n]\n\n[[package]]\nname = \"nix\"\nversion = \"0.29.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"71e2746dc3a24dd78b3cfcb7be93368c6de9963d30f43a6a73998a9cf4b17b46\"\ndependencies = [\n \"bitflags\",\n \"cfg-if\",\n \"cfg_aliases\",\n \"libc\",\n]\n\n[[package]]\nname = \"nu-ansi-term\"\nversion = \"0.50.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d4a28e057d01f97e61255210fcff094d74ed0466038633e95017f5beb68e4399\"\ndependencies = [\n \"windows-sys 0.52.0\",\n]\n\n[[package]]\nname = \"num-conv\"\nversion = \"0.1.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"51d515d32fb182ee37cda2ccdcb92950d6a3c2893aa280e540671c2cd0f3b1d9\"\n\n[[package]]\nname = \"num-traits\"\nversion = \"0.2.19\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"071dfc062690e90b734c0b2273ce72ad0ffa95f0c74596bc250dcfd960262841\"\ndependencies = [\n \"autocfg\",\n]\n\n[[package]]\nname = \"num_cpus\"\nversion = \"1.16.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"4161fcb6d602d4d2081af7c3a45852d875a03dd337a6bfdd6e06407b61342a43\"\ndependencies = [\n \"hermit-abi\",\n \"libc\",\n]\n\n[[package]]\nname = \"once_cell\"\nversion = \"1.20.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1261fe7e33c73b354eab43b1273a57c8f967d0391e80353e51f764ac02cf6775\"\n\n[[package]]\nname = \"openssl\"\nversion = \"0.10.68\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"6174bc48f102d208783c2c84bf931bb75927a617866870de8a4ea85597f871f5\"\ndependencies = [\n \"bitflags\",\n \"cfg-if\",\n \"foreign-types\",\n \"libc\",\n \"once_cell\",\n \"openssl-macros\",\n \"openssl-sys\",\n]\n\n[[package]]\nname = \"openssl-macros\"\nversion = \"0.1.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a948666b637a0f465e8564c73e89d4dde00d72d4d473cc972f390fc3dcee7d9c\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn\",\n]\n\n[[package]]\nname = \"openssl-probe\"\nversion = \"0.1.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ff011a302c396a5197692431fc1948019154afc178baf7d8e37367442a4601cf\"\n\n[[package]]\nname = \"openssl-sys\"\nversion = \"0.9.104\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"45abf306cbf99debc8195b66b7346498d7b10c210de50418b5ccd7ceba08c741\"\ndependencies = [\n \"cc\",\n \"libc\",\n \"pkg-config\",\n \"vcpkg\",\n]\n\n[[package]]\nname = \"parking\"\nversion = \"2.2.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f38d5652c16fde515bb1ecef450ab0f6a219d619a7274976324d5e377f7dceba\"\n\n[[package]]\nname = \"percent-encoding\"\nversion = \"2.3.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e3148f5046208a5d56bcfc03053e3ca6334e51da8dfb19b6cdc8b306fae3283e\"\n\n[[package]]\nname = \"petgraph\"\nversion = \"0.6.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b4c5cc86750666a3ed20bdaf5ca2a0344f9c67674cae0515bec2da16fbaa47db\"\ndependencies = [\n \"fixedbitset\",\n \"indexmap 2.6.0\",\n]\n\n[[package]]\nname = \"pin-project-lite\"\nversion = \"0.2.14\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"bda66fc9667c18cb2758a2ac84d1167245054bcf85d5d1aaa6923f45801bdd02\"\n\n[[package]]\nname = \"pkg-config\"\nversion = \"0.3.31\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"953ec861398dccce10c670dfeaf3ec4911ca479e9c02154b3a215178c5f566f2\"\n\n[[package]]\nname = \"powerfmt\"\nversion = \"0.2.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"439ee305def115ba05938db6eb1644ff94165c5ab5e9420d1c1bcedbba909391\"\n\n[[package]]\nname = \"ppv-lite86\"\nversion = \"0.2.20\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"77957b295656769bb8ad2b6a6b09d897d94f05c41b069aede1fcdaa675eaea04\"\ndependencies = [\n \"zerocopy\",\n]\n\n[[package]]\nname = \"proc-macro2\"\nversion = \"1.0.88\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"7c3a7fc5db1e57d5a779a352c8cdb57b29aa4c40cc69c3a68a7fedc815fbf2f9\"\ndependencies = [\n \"unicode-ident\",\n]\n\n[[package]]\nname = \"quote\"\nversion = \"1.0.37\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b5b9d34b8991d19d98081b46eacdd8eb58c6f2b201139f7c5f643cc155a633af\"\ndependencies = [\n \"proc-macro2\",\n]\n\n[[package]]\nname = \"rand\"\nversion = \"0.8.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"34af8d1a0e25924bc5b7c43c079c942339d8f0a8b57c39049bef581b46327404\"\ndependencies = [\n \"libc\",\n \"rand_chacha\",\n \"rand_core\",\n]\n\n[[package]]\nname = \"rand_chacha\"\nversion = \"0.3.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e6c10a63a0fa32252be49d21e7709d4d4baf8d231c2dbce1eaa8141b9b127d88\"\ndependencies = [\n \"ppv-lite86\",\n \"rand_core\",\n]\n\n[[package]]\nname = \"rand_core\"\nversion = \"0.6.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ec0be4795e2f6a28069bec0b5ff3e2ac9bafc99e6a9a7dc3547996c5c816922c\"\ndependencies = [\n \"getrandom\",\n]\n\n[[package]]\nname = \"redox_syscall\"\nversion = \"0.5.7\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"9b6dfecf2c74bce2466cabf93f6664d6998a69eb21e39f4207930065b27b771f\"\ndependencies = [\n \"bitflags\",\n]\n\n[[package]]\nname = \"redox_users\"\nversion = \"0.4.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ba009ff324d1fc1b900bd1fdb31564febe58a8ccc8a6fdbb93b543d33b13ca43\"\ndependencies = [\n \"getrandom\",\n \"libredox\",\n \"thiserror\",\n]\n\n[[package]]\nname = \"regex\"\nversion = \"1.11.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b544ef1b4eac5dc2db33ea63606ae9ffcfac26c1416a2806ae0bf5f56b201191\"\ndependencies = [\n \"aho-corasick\",\n \"memchr\",\n \"regex-automata\",\n \"regex-syntax\",\n]\n\n[[package]]\nname = \"regex-automata\"\nversion = \"0.4.8\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"368758f23274712b504848e9d5a6f010445cc8b87a7cdb4d7cbee666c1288da3\"\ndependencies = [\n \"aho-corasick\",\n \"memchr\",\n \"regex-syntax\",\n]\n\n[[package]]\nname = \"regex-syntax\"\nversion = \"0.8.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"2b15c43186be67a4fd63bee50d0303afffcef381492ebe2c5d87f324e1b8815c\"\n\n[[package]]\nname = \"ring\"\nversion = \"0.17.8\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"c17fa4cb658e3583423e915b9f3acc01cceaee1860e33d59ebae66adc3a2dc0d\"\ndependencies = [\n \"cc\",\n \"cfg-if\",\n \"getrandom\",\n \"libc\",\n \"spin\",\n \"untrusted\",\n \"windows-sys 0.52.0\",\n]\n\n[[package]]\nname = \"run_script\"\nversion = \"0.11.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f20d7c40e6d6fc2ff69ad8e8bac4d39a5fc1874402647ac92b620954d56d5c3e\"\ndependencies = [\n \"fsio\",\n]\n\n[[package]]\nname = \"rust_info\"\nversion = \"0.3.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"99a6143e57e2d16a1dc652aa61664e8a1044d88e4b62470bde0a759800895c8d\"\n\n[[package]]\nname = \"rustix\"\nversion = \"0.38.37\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8acb788b847c24f28525660c4d7758620a7210875711f79e7f663cc152726811\"\ndependencies = [\n \"bitflags\",\n \"errno\",\n \"libc\",\n \"linux-raw-sys\",\n \"windows-sys 0.52.0\",\n]\n\n[[package]]\nname = \"rustls\"\nversion = \"0.22.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"bf4ef73721ac7bcd79b2b315da7779d8fc09718c6b3d2d1b2d94850eb8c18432\"\ndependencies = [\n \"log\",\n \"ring\",\n \"rustls-pki-types\",\n \"rustls-webpki\",\n \"subtle\",\n \"zeroize\",\n]\n\n[[package]]\nname = \"rustls-pki-types\"\nversion = \"1.10.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"16f1201b3c9a7ee8039bcadc17b7e605e2945b27eee7631788c1bd2b0643674b\"\n\n[[package]]\nname = \"rustls-webpki\"\nversion = \"0.102.8\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"64ca1bc8749bd4cf37b5ce386cc146580777b4e8572c7b97baf22c83f444bee9\"\ndependencies = [\n \"ring\",\n \"rustls-pki-types\",\n \"untrusted\",\n]\n\n[[package]]\nname = \"rustversion\"\nversion = \"1.0.18\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"0e819f2bc632f285be6d7cd36e25940d45b2391dd6d9b939e79de557f7014248\"\n\n[[package]]\nname = \"ryu\"\nversion = \"1.0.18\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f3cb5ba0dc43242ce17de99c180e96db90b235b8a9fdc9543c96d2209116bd9f\"\n\n[[package]]\nname = \"same-file\"\nversion = \"1.0.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"93fc1dc3aaa9bfed95e02e6eadabb4baf7e3078b0bd1b4d7b6b0b68378900502\"\ndependencies = [\n \"winapi-util\",\n]\n\n[[package]]\nname = \"schannel\"\nversion = \"0.1.26\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"01227be5826fa0690321a2ba6c5cd57a19cf3f6a09e76973b58e61de6ab9d1c1\"\ndependencies = [\n \"windows-sys 0.59.0\",\n]\n\n[[package]]\nname = \"security-framework\"\nversion = \"2.11.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"897b2245f0b511c87893af39b033e5ca9cce68824c4d7e7630b5a1d339658d02\"\ndependencies = [\n \"bitflags\",\n \"core-foundation\",\n \"core-foundation-sys\",\n \"libc\",\n \"security-framework-sys\",\n]\n\n[[package]]\nname = \"security-framework-sys\"\nversion = \"2.12.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ea4a292869320c0272d7bc55a5a6aafaff59b4f63404a003887b679a2e05b4b6\"\ndependencies = [\n \"core-foundation-sys\",\n \"libc\",\n]\n\n[[package]]\nname = \"semver\"\nversion = \"1.0.23\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"61697e0a1c7e512e84a621326239844a24d8207b4669b41bc18b32ea5cbf988b\"\ndependencies = [\n \"serde\",\n]\n\n[[package]]\nname = \"serde\"\nversion = \"1.0.215\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"6513c1ad0b11a9376da888e3e0baa0077f1aed55c17f50e7b2397136129fb88f\"\ndependencies = [\n \"serde_derive\",\n]\n\n[[package]]\nname = \"serde_derive\"\nversion = \"1.0.215\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ad1e866f866923f252f05c889987993144fb74e722403468a4ebd70c3cd756c0\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn\",\n]\n\n[[package]]\nname = \"serde_ignored\"\nversion = \"0.1.10\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a8e319a36d1b52126a0d608f24e93b2d81297091818cd70625fcf50a15d84ddf\"\ndependencies = [\n \"serde\",\n]\n\n[[package]]\nname = \"serde_json\"\nversion = \"1.0.132\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d726bfaff4b320266d395898905d0eba0345aae23b54aee3a737e260fd46db03\"\ndependencies = [\n \"itoa\",\n \"memchr\",\n \"ryu\",\n \"serde\",\n]\n\n[[package]]\nname = \"serde_spanned\"\nversion = \"0.6.8\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"87607cb1398ed59d48732e575a4c28a7a8ebf2454b964fe3f224f2afc07909e1\"\ndependencies = [\n \"serde\",\n]\n\n[[package]]\nname = \"sha2\"\nversion = \"0.10.8\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"793db75ad2bcafc3ffa7c68b215fee268f537982cd901d132f89c6343f3a3dc8\"\ndependencies = [\n \"cfg-if\",\n \"cpufeatures\",\n \"digest\",\n]\n\n[[package]]\nname = \"shell2batch\"\nversion = \"0.4.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3a0c7d0c8a1c5abed83821a6c803df835eadae0c12ccd02a4f8da3da94b6240e\"\ndependencies = [\n \"regex\",\n]\n\n[[package]]\nname = \"shlex\"\nversion = \"1.3.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"0fda2ff0d084019ba4d7c6f371c95d8fd75ce3524c3cb8fb653a3023f6323e64\"\n\n[[package]]\nname = \"simd-adler32\"\nversion = \"0.3.7\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d66dc143e6b11c1eddc06d5c423cfc97062865baf299914ab64caa38182078fe\"\n\n[[package]]\nname = \"spin\"\nversion = \"0.9.8\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"6980e8d7511241f8acf4aebddbb1ff938df5eebe98691418c4468d0b72a96a67\"\n\n[[package]]\nname = \"strip-ansi-escapes\"\nversion = \"0.2.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"55ff8ef943b384c414f54aefa961dd2bd853add74ec75e7ac74cf91dba62bcfa\"\ndependencies = [\n \"vte\",\n]\n\n[[package]]\nname = \"strum_macros\"\nversion = \"0.26.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"4c6bee85a5a24955dc440386795aa378cd9cf82acd5f764469152d2270e581be\"\ndependencies = [\n \"heck\",\n \"proc-macro2\",\n \"quote\",\n \"rustversion\",\n \"syn\",\n]\n\n[[package]]\nname = \"subtle\"\nversion = \"2.6.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"13c2bddecc57b384dee18652358fb23172facb8a2c51ccc10d74c157bdea3292\"\n\n[[package]]\nname = \"suppaftp\"\nversion = \"6.0.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"fb7ae9f63c90e21e0afaf56d63516d3db678e57bc4ad7919c7db7a9c32db539c\"\ndependencies = [\n \"chrono\",\n \"futures-lite\",\n \"lazy-regex\",\n \"log\",\n \"thiserror\",\n]\n\n[[package]]\nname = \"syn\"\nversion = \"2.0.82\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"83540f837a8afc019423a8edb95b52a8effe46957ee402287f4292fae35be021\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"unicode-ident\",\n]\n\n[[package]]\nname = \"tempfile\"\nversion = \"3.13.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f0f2c9fc62d0beef6951ccffd757e241266a2c833136efbe35af6cd2567dca5b\"\ndependencies = [\n \"cfg-if\",\n \"fastrand\",\n \"once_cell\",\n \"rustix\",\n \"windows-sys 0.59.0\",\n]\n\n[[package]]\nname = \"thiserror\"\nversion = \"1.0.64\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d50af8abc119fb8bb6dbabcfa89656f46f84aa0ac7688088608076ad2b459a84\"\ndependencies = [\n \"thiserror-impl\",\n]\n\n[[package]]\nname = \"thiserror-impl\"\nversion = \"1.0.64\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"08904e7672f5eb876eaaf87e0ce17857500934f4981c4a0ab2b4aa98baac7fc3\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn\",\n]\n\n[[package]]\nname = \"time\"\nversion = \"0.3.36\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"5dfd88e563464686c916c7e46e623e520ddc6d79fa6641390f2e3fa86e83e885\"\ndependencies = [\n \"deranged\",\n \"num-conv\",\n \"powerfmt\",\n \"serde\",\n \"time-core\",\n]\n\n[[package]]\nname = \"time-core\"\nversion = \"0.1.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ef927ca75afb808a4d64dd374f00a2adf8d0fcff8e7b184af886c3c87ec4a3f3\"\n\n[[package]]\nname = \"tinyvec\"\nversion = \"1.8.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"445e881f4f6d382d5f27c034e25eb92edd7c784ceab92a0937db7f2e9471b938\"\ndependencies = [\n \"tinyvec_macros\",\n]\n\n[[package]]\nname = \"tinyvec_macros\"\nversion = \"0.1.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1f3ccbac311fea05f86f61904b462b55fb3df8837a366dfc601a0161d0532f20\"\n\n[[package]]\nname = \"toml\"\nversion = \"0.8.19\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a1ed1f98e3fdc28d6d910e6737ae6ab1a93bf1985935a1193e68f93eeb68d24e\"\ndependencies = [\n \"serde\",\n \"serde_spanned\",\n \"toml_datetime\",\n \"toml_edit\",\n]\n\n[[package]]\nname = \"toml_datetime\"\nversion = \"0.6.8\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"0dd7358ecb8fc2f8d014bf86f6f638ce72ba252a2c3a2572f2a795f1d23efb41\"\ndependencies = [\n \"serde\",\n]\n\n[[package]]\nname = \"toml_edit\"\nversion = \"0.22.22\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"4ae48d6208a266e853d946088ed816055e556cc6028c5e8e2b84d9fa5dd7c7f5\"\ndependencies = [\n \"indexmap 2.6.0\",\n \"serde\",\n \"serde_spanned\",\n \"toml_datetime\",\n \"winnow\",\n]\n\n[[package]]\nname = \"typenum\"\nversion = \"1.17.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"42ff0bf0c66b8238c6f3b578df37d0b7848e55df8577b3f74f92a69acceeb825\"\n\n[[package]]\nname = \"uname\"\nversion = \"0.1.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b72f89f0ca32e4db1c04e2a72f5345d59796d4866a1ee0609084569f73683dc8\"\ndependencies = [\n \"libc\",\n]\n\n[[package]]\nname = \"unicode-bidi\"\nversion = \"0.3.17\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"5ab17db44d7388991a428b2ee655ce0c212e862eff1768a455c58f9aad6e7893\"\n\n[[package]]\nname = \"unicode-ident\"\nversion = \"1.0.13\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e91b56cd4cadaeb79bbf1a5645f6b4f8dc5bde8834ad5894a8db35fda9efa1fe\"\n\n[[package]]\nname = \"unicode-normalization\"\nversion = \"0.1.24\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"5033c97c4262335cded6d6fc3e5c18ab755e1a3dc96376350f3d8e9f009ad956\"\ndependencies = [\n \"tinyvec\",\n]\n\n[[package]]\nname = \"untrusted\"\nversion = \"0.9.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8ecb6da28b8a351d773b68d5825ac39017e680750f980f3a1a85cd8dd28a47c1\"\n\n[[package]]\nname = \"url\"\nversion = \"2.5.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"22784dbdf76fdde8af1aeda5622b546b422b6fc585325248a2bf9f5e41e94d6c\"\ndependencies = [\n \"form_urlencoded\",\n \"idna\",\n \"percent-encoding\",\n]\n\n[[package]]\nname = \"utf8parse\"\nversion = \"0.2.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"06abde3611657adf66d383f00b093d7faecc7fa57071cce2578660c9f1010821\"\n\n[[package]]\nname = \"vcpkg\"\nversion = \"0.2.15\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"accd4ea62f7bb7a82fe23066fb0957d48ef677f6eeb8215f372f52e48bb32426\"\n\n[[package]]\nname = \"version_check\"\nversion = \"0.9.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"0b928f33d975fc6ad9f86c8f283853ad26bdd5b10b7f1542aa2fa15e2289105a\"\n\n[[package]]\nname = \"vte\"\nversion = \"0.11.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f5022b5fbf9407086c180e9557be968742d839e68346af7792b8592489732197\"\ndependencies = [\n \"utf8parse\",\n \"vte_generate_state_changes\",\n]\n\n[[package]]\nname = \"vte_generate_state_changes\"\nversion = \"0.1.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"2e369bee1b05d510a7b4ed645f5faa90619e05437111783ea5848f28d97d3c2e\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n]\n\n[[package]]\nname = \"walkdir\"\nversion = \"2.5.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"29790946404f91d9c5d06f9874efddea1dc06c5efe94541a7d6863108e3a5e4b\"\ndependencies = [\n \"same-file\",\n \"winapi-util\",\n]\n\n[[package]]\nname = \"wasi\"\nversion = \"0.11.0+wasi-snapshot-preview1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"9c8d87e72b64a3b4db28d11ce29237c246188f4f51057d65a7eab63b7987e423\"\n\n[[package]]\nname = \"wasite\"\nversion = \"0.1.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b8dad83b4f25e74f184f64c43b150b91efe7647395b42289f38e50566d82855b\"\n\n[[package]]\nname = \"wasm-bindgen\"\nversion = \"0.2.95\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"128d1e363af62632b8eb57219c8fd7877144af57558fb2ef0368d0087bddeb2e\"\ndependencies = [\n \"cfg-if\",\n \"once_cell\",\n \"wasm-bindgen-macro\",\n]\n\n[[package]]\nname = \"wasm-bindgen-backend\"\nversion = \"0.2.95\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"cb6dd4d3ca0ddffd1dd1c9c04f94b868c37ff5fac97c30b97cff2d74fce3a358\"\ndependencies = [\n \"bumpalo\",\n \"log\",\n \"once_cell\",\n \"proc-macro2\",\n \"quote\",\n \"syn\",\n \"wasm-bindgen-shared\",\n]\n\n[[package]]\nname = \"wasm-bindgen-macro\"\nversion = \"0.2.95\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e79384be7f8f5a9dd5d7167216f022090cf1f9ec128e6e6a482a2cb5c5422c56\"\ndependencies = [\n \"quote\",\n \"wasm-bindgen-macro-support\",\n]\n\n[[package]]\nname = \"wasm-bindgen-macro-support\"\nversion = \"0.2.95\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"26c6ab57572f7a24a4985830b120de1594465e5d500f24afe89e16b4e833ef68\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn\",\n \"wasm-bindgen-backend\",\n \"wasm-bindgen-shared\",\n]\n\n[[package]]\nname = \"wasm-bindgen-shared\"\nversion = \"0.2.95\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"65fc09f10666a9f147042251e0dda9c18f166ff7de300607007e96bdebc1068d\"\n\n[[package]]\nname = \"web-sys\"\nversion = \"0.3.72\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f6488b90108c040df0fe62fa815cbdee25124641df01814dd7282749234c6112\"\ndependencies = [\n \"js-sys\",\n \"wasm-bindgen\",\n]\n\n[[package]]\nname = \"webpki-roots\"\nversion = \"0.26.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"841c67bff177718f1d4dfefde8d8f0e78f9b6589319ba88312f567fc5841a958\"\ndependencies = [\n \"rustls-pki-types\",\n]\n\n[[package]]\nname = \"which\"\nversion = \"6.0.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b4ee928febd44d98f2f459a4a79bd4d928591333a494a10a868418ac1b39cf1f\"\ndependencies = [\n \"either\",\n \"home\",\n \"rustix\",\n \"winsafe\",\n]\n\n[[package]]\nname = \"whoami\"\nversion = \"1.5.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"372d5b87f58ec45c384ba03563b03544dc5fadc3983e434b286913f5b4a9bb6d\"\ndependencies = [\n \"redox_syscall\",\n \"wasite\",\n \"web-sys\",\n]\n\n[[package]]\nname = \"winapi\"\nversion = \"0.3.9\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"5c839a674fcd7a98952e593242ea400abe93992746761e38641405d28b00f419\"\ndependencies = [\n \"winapi-i686-pc-windows-gnu\",\n \"winapi-x86_64-pc-windows-gnu\",\n]\n\n[[package]]\nname = \"winapi-i686-pc-windows-gnu\"\nversion = \"0.4.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ac3b87c63620426dd9b991e5ce0329eff545bccbbb34f3be09ff6fb6ab51b7b6\"\n\n[[package]]\nname = \"winapi-util\"\nversion = \"0.1.9\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"cf221c93e13a30d793f7645a0e7762c55d169dbb0a49671918a2319d289b10bb\"\ndependencies = [\n \"windows-sys 0.59.0\",\n]\n\n[[package]]\nname = \"winapi-x86_64-pc-windows-gnu\"\nversion = \"0.4.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"712e227841d057c1ee1cd2fb22fa7e5a5461ae8e48fa2ca79ec42cfc1931183f\"\n\n[[package]]\nname = \"windows-core\"\nversion = \"0.52.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"33ab640c8d7e35bf8ba19b884ba838ceb4fba93a4e8c65a9059d08afcfc683d9\"\ndependencies = [\n \"windows-targets 0.52.6\",\n]\n\n[[package]]\nname = \"windows-sys\"\nversion = \"0.48.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"677d2418bec65e3338edb076e806bc1ec15693c5d0104683f2efe857f61056a9\"\ndependencies = [\n \"windows-targets 0.48.5\",\n]\n\n[[package]]\nname = \"windows-sys\"\nversion = \"0.52.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"282be5f36a8ce781fad8c8ae18fa3f9beff57ec1b52cb3de0789201425d9a33d\"\ndependencies = [\n \"windows-targets 0.52.6\",\n]\n\n[[package]]\nname = \"windows-sys\"\nversion = \"0.59.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1e38bc4d79ed67fd075bcc251a1c39b32a1776bbe92e5bef1f0bf1f8c531853b\"\ndependencies = [\n \"windows-targets 0.52.6\",\n]\n\n[[package]]\nname = \"windows-targets\"\nversion = \"0.48.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"9a2fa6e2155d7247be68c096456083145c183cbbbc2764150dda45a87197940c\"\ndependencies = [\n \"windows_aarch64_gnullvm 0.48.5\",\n \"windows_aarch64_msvc 0.48.5\",\n \"windows_i686_gnu 0.48.5\",\n \"windows_i686_msvc 0.48.5\",\n \"windows_x86_64_gnu 0.48.5\",\n \"windows_x86_64_gnullvm 0.48.5\",\n \"windows_x86_64_msvc 0.48.5\",\n]\n\n[[package]]\nname = \"windows-targets\"\nversion = \"0.52.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"9b724f72796e036ab90c1021d4780d4d3d648aca59e491e6b98e725b84e99973\"\ndependencies = [\n \"windows_aarch64_gnullvm 0.52.6\",\n \"windows_aarch64_msvc 0.52.6\",\n \"windows_i686_gnu 0.52.6\",\n \"windows_i686_gnullvm\",\n \"windows_i686_msvc 0.52.6\",\n \"windows_x86_64_gnu 0.52.6\",\n \"windows_x86_64_gnullvm 0.52.6\",\n \"windows_x86_64_msvc 0.52.6\",\n]\n\n[[package]]\nname = \"windows_aarch64_gnullvm\"\nversion = \"0.48.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"2b38e32f0abccf9987a4e3079dfb67dcd799fb61361e53e2882c3cbaf0d905d8\"\n\n[[package]]\nname = \"windows_aarch64_gnullvm\"\nversion = \"0.52.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"32a4622180e7a0ec044bb555404c800bc9fd9ec262ec147edd5989ccd0c02cd3\"\n\n[[package]]\nname = \"windows_aarch64_msvc\"\nversion = \"0.48.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"dc35310971f3b2dbbf3f0690a219f40e2d9afcf64f9ab7cc1be722937c26b4bc\"\n\n[[package]]\nname = \"windows_aarch64_msvc\"\nversion = \"0.52.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"09ec2a7bb152e2252b53fa7803150007879548bc709c039df7627cabbd05d469\"\n\n[[package]]\nname = \"windows_i686_gnu\"\nversion = \"0.48.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a75915e7def60c94dcef72200b9a8e58e5091744960da64ec734a6c6e9b3743e\"\n\n[[package]]\nname = \"windows_i686_gnu\"\nversion = \"0.52.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8e9b5ad5ab802e97eb8e295ac6720e509ee4c243f69d781394014ebfe8bbfa0b\"\n\n[[package]]\nname = \"windows_i686_gnullvm\"\nversion = \"0.52.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"0eee52d38c090b3caa76c563b86c3a4bd71ef1a819287c19d586d7334ae8ed66\"\n\n[[package]]\nname = \"windows_i686_msvc\"\nversion = \"0.48.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8f55c233f70c4b27f66c523580f78f1004e8b5a8b659e05a4eb49d4166cca406\"\n\n[[package]]\nname = \"windows_i686_msvc\"\nversion = \"0.52.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"240948bc05c5e7c6dabba28bf89d89ffce3e303022809e73deaefe4f6ec56c66\"\n\n[[package]]\nname = \"windows_x86_64_gnu\"\nversion = \"0.48.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"53d40abd2583d23e4718fddf1ebec84dbff8381c07cae67ff7768bbf19c6718e\"\n\n[[package]]\nname = \"windows_x86_64_gnu\"\nversion = \"0.52.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"147a5c80aabfbf0c7d901cb5895d1de30ef2907eb21fbbab29ca94c5b08b1a78\"\n\n[[package]]\nname = \"windows_x86_64_gnullvm\"\nversion = \"0.48.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"0b7b52767868a23d5bab768e390dc5f5c55825b6d30b86c844ff2dc7414044cc\"\n\n[[package]]\nname = \"windows_x86_64_gnullvm\"\nversion = \"0.52.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"24d5b23dc417412679681396f2b49f3de8c1473deb516bd34410872eff51ed0d\"\n\n[[package]]\nname = \"windows_x86_64_msvc\"\nversion = \"0.48.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ed94fce61571a4006852b7389a063ab983c02eb1bb37b47f8272ce92d06d9538\"\n\n[[package]]\nname = \"windows_x86_64_msvc\"\nversion = \"0.52.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"589f6da84c646204747d1270a2a5661ea66ed1cced2631d546fdfb155959f9ec\"\n\n[[package]]\nname = \"winnow\"\nversion = \"0.6.20\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"36c1fec1a2bb5866f07c25f68c26e565c4c200aebb96d7e55710c19d3e8ac49b\"\ndependencies = [\n \"memchr\",\n]\n\n[[package]]\nname = \"winsafe\"\nversion = \"0.0.19\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d135d17ab770252ad95e9a872d365cf3090e3be864a34ab46f48555993efc904\"\n\n[[package]]\nname = \"zerocopy\"\nversion = \"0.7.35\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1b9b4fd18abc82b8136838da5d50bae7bdea537c574d8dc1a34ed098d6c166f0\"\ndependencies = [\n \"byteorder\",\n \"zerocopy-derive\",\n]\n\n[[package]]\nname = \"zerocopy-derive\"\nversion = \"0.7.35\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"fa4f8080344d4671fb4e831a13ad1e68092748387dfc4f55e356242fae12ce3e\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn\",\n]\n\n[[package]]\nname = \"zeroize\"\nversion = \"1.8.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ced3678a2879b30306d323f4542626697a464a97c0a07c9aebf7ebca65cd4dde\"\n\n[[package]]\nname = \"zip\"\nversion = \"2.2.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"dc5e4288ea4057ae23afc69a4472434a87a2495cafce6632fd1c4ec9f5cf3494\"\ndependencies = [\n \"arbitrary\",\n \"bzip2\",\n \"crc32fast\",\n \"crossbeam-utils\",\n \"displaydoc\",\n \"flate2\",\n \"indexmap 2.6.0\",\n \"memchr\",\n \"thiserror\",\n \"time\",\n \"zopfli\",\n]\n\n[[package]]\nname = \"zopfli\"\nversion = \"0.8.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e5019f391bac5cf252e93bbcc53d039ffd62c7bfb7c150414d61369afe57e946\"\ndependencies = [\n \"bumpalo\",\n \"crc32fast\",\n \"lockfree-object-pool\",\n \"log\",\n \"once_cell\",\n \"simd-adler32\",\n]\n"
        },
        {
          "name": "Cargo.toml",
          "type": "blob",
          "size": 1.9931640625,
          "content": "[package]\nname = \"cargo-make\"\nversion = \"0.37.23\"\nauthors = [\"Sagie Gur-Ari <sagiegurari@gmail.com>\"]\ndescription = \"Rust task runner and build tool.\"\nlicense = \"Apache-2.0\"\nedition = \"2021\"\ndocumentation = \"https://sagiegurari.github.io/cargo-make\"\nhomepage = \"https://sagiegurari.github.io/cargo-make\"\nrepository = \"https://github.com/sagiegurari/cargo-make.git\"\nreadme = \"README.md\"\nkeywords = [\"task\", \"build\", \"cargo\", \"plugin\", \"subcommand\"]\ncategories = [\n  \"command-line-utilities\",\n  \"development-tools\",\n  \"development-tools::cargo-plugins\",\n  \"development-tools::build-utils\",\n  \"development-tools::testing\",\n]\ninclude = [\n  \"/benches/*\",\n  \"/docs/*\",\n  \"/examples/*\",\n  \"/src/*\",\n  \"/tests/*\",\n  \"/Cargo.toml\",\n  \"/LICENSE\",\n  \"/README.md\",\n  \"/CHANGELOG.md\",\n  \"/Makefile.toml\",\n  \"/extra/shell/*\",\n]\n\n[lib]\nname = \"cli\"\npath = \"src/lib/mod.rs\"\n\n[[bin]]\nname = \"cargo-make\"\npath = \"src/main.rs\"\n\n[[bin]]\nname = \"makers\"\npath = \"src/makers.rs\"\n\n[dependencies]\ncargo_metadata = \"^0.18\"\nci_info = \"^0.14.14\"\ncliparser = \"^0.1.2\"\ncolored = \"^2\"\nctrlc = \"^3\"\ndirs-next = \"^2\"\nduckscript = \"^0.10\"\nduckscriptsdk = { version = \"^0.11.1\", default-features = false }\nenvmnt = \"^0.10.4\"\nfern = \"^0.7\"\nfsio = { version = \"^0.4\", features = [\"temp-path\"] }\ngit_info = \"^0.1.3\"\nglob = \"^0.3.1\"\nhome = \"^0.5\"\nignore = \"^0.4\"\nindexmap = { version = \"^2\", features = [\"serde\"] }\nitertools = \"^0.13\"\nlenient_semver = \"^0.4.2\"\nlog = \"^0.4\"\nmd5 = \"^0.7\"\nonce_cell = \"^1.20.2\"\npetgraph = \"^0.6.5\"\nregex = \"^1.11\"\nrun_script = \"^0.11\"\nrust_info = \"^0.3.3\"\nsemver = \"^1\"\nserde = \"^1\"\nserde_derive = \"^1\"\nserde_ignored = \"^0.1\"\nserde_json = \"^1\"\nshell2batch = \"^0.4.5\"\nstrip-ansi-escapes = \"^0.2\"\nstrum_macros = \"0.26.4\"\ntoml = \"^0.8\"\n\n[dev-dependencies]\ncfg-if = \"^1.0.0\"\nexpect-test = \"^1\"\n\n[target.'cfg(windows)'.dependencies]\nnu-ansi-term = \"^0.50\"\n\n[features]\ntls-rustls = [\"duckscriptsdk/tls-rustls\"]\ntls-native = [\"duckscriptsdk/tls-native\"]\ntls = [\"tls-rustls\"]                      # alias for backward compatibility\ndefault = [\"tls-rustls\"]\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 11.0595703125,
          "content": "Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"{}\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright {yyyy} {name of copyright owner}\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n\n"
        },
        {
          "name": "Makefile.toml",
          "type": "blob",
          "size": 2.7275390625,
          "content": "\n[config]\nadditional_profiles = [\n  \"all-default-tasks\",\n  \"multi-phase-tests\",\n  \"ci-coverage-tasks\",\n  \"ci-static-code-analysis-tasks\",\n  \"ci-all-build-tasks\",\n  \"publish-pre-cleanup\",\n]\n\n[env]\nCARGO_MAKE_SKIP_SLOW_SECONDARY_FLOWS = true\nCARGO_MAKE_ADDITIONAL_BINARY_EXECUTABLE_NAME = \"makers\"\nCARGO_MAKE_TEST_COVERAGE_BINARY_FILTER = \"cli-[a-z0-9]*$\\\\|makers-[a-z0-9]*$\\\\|${CARGO_MAKE_TEST_COVERAGE_DEFAULT_BINARY_FILTER}\"\nCARGO_MAKE_TEMP_UNSTABLE_KEY = \"${CARGO_MAKE_RUST_TARGET_OS}-${CARGO_MAKE_RUST_CHANNEL}-${CARGO_MAKE_CI}\"\nCARGO_MAKE_TEMP_UNSTABLE_TEST_ENV = { source = \"${CARGO_MAKE_TEMP_UNSTABLE_KEY}\", default_value = \"false\", mapping = { \"none\" = \"true\" } }\n\n[tasks.post-print-env]\ncategory = \"Tools\"\nscript = '''\n#!@duckscript\necho \"*************************************\"\necho \"Extended Info:\"\necho \"    Unstable Environment Key: ${CARGO_MAKE_TEMP_UNSTABLE_KEY}\"\necho \"    Unstable Test Environment: ${CARGO_MAKE_TEMP_UNSTABLE_TEST_ENV}\"\necho \"*************************************\"\n'''\n\n[tasks.test-multi-phases-cleanup]\nscript = '''\n#!@duckscript\n\nfn <scope> delete_all\n    files = set ${1}\n    for file in ${files}\n        echo Deleting lock file: ${file}\n        rm ${file}\n    end\n\n    release ${files}\nend\n\nhandle = glob_array ./src/**/Cargo.lock\ndelete_all ${handle}\nhandle = glob_array ./examples/**/Cargo.lock\ndelete_all ${handle}\n'''\n\n[tasks.test-multi-phases-flow]\ncondition = { env_false = [\"CARGO_MAKE_TEMP_UNSTABLE_TEST_ENV\"] }\n\n[tasks.audit]\nignore_errors = true\n\n[tasks.generate-readme]\nscript = '''\n#!@duckscript\necho Generating README\n\nrm ./README.md\n\n# concat templates\nreadme_text = readfile ./docs/_includes/README.md\ntext = readfile ./docs/_includes/nav.md\nreadme_text = set \"${readme_text}${text}\"\ntext = readfile ./docs/_includes/content.md\nreadme_text = set \"${readme_text}${text}\"\n\n# modify templates\ncrate_version = get_env CARGO_MAKE_CRATE_VERSION\nreadme_text = replace ${readme_text} https://github.com/sagiegurari/cargo-make/blob/master/.github .github\nreadme_text = replace ${readme_text} \"{{ site.version }}\" ${crate_version}\n\nwritefile ./README.md ${readme_text}\n'''\n\n[tasks.generate-task-list]\ncommand = \"cargo\"\nargs = [\n  \"run\",\n  \"--bin\",\n  \"cargo-make\",\n  \"--\",\n  \"make\",\n  \"--list-all-steps\",\n  \"--output-format\",\n  \"markdown-single-page\",\n  \"--output-file\",\n  \"${CARGO_MAKE_WORKING_DIRECTORY}/docs/cargo_make_task_list.md\",\n  \"--makefile\",\n  \"${CARGO_MAKE_WORKING_DIRECTORY}/src/lib/test/makefiles/empty.toml\",\n]\n\n[tasks.generate-docs]\ncondition = { env_false = [\"CARGO_MAKE_CI\"], platforms = [\"linux\"] }\nrun_task = { name = [\"generate-readme\", \"generate-task-list\"] }\n\n[tasks.post-docs]\nlinux_alias = \"generate-docs\"\n\n[tasks.pre-build-file-increment]\nenv = { CARGO_MAKE_BUILD_NUMBER_FILE = \"${CARGO_MAKE_WORKING_DIRECTORY}/.buildnumber\" }\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 159.0087890625,
          "content": "# cargo-make\n\n[![crates.io](https://img.shields.io/crates/v/cargo-make.svg)](https://crates.io/crates/cargo-make)\n[![CI](https://github.com/sagiegurari/cargo-make/workflows/CI/badge.svg?branch=master)](https://github.com/sagiegurari/cargo-make/actions)\n[![codecov](https://codecov.io/gh/sagiegurari/cargo-make/branch/master/graph/badge.svg)](https://codecov.io/gh/sagiegurari/cargo-make)\n[![license](https://img.shields.io/crates/l/cargo-make.svg)](https://github.com/sagiegurari/cargo-make/blob/master/LICENSE)\n[![Crates.io](https://img.shields.io/crates/d/cargo-make?label=cargo%20installs)](https://crates.io/crates/cargo-make)\n[![GitHub All Releases](https://img.shields.io/github/downloads/sagiegurari/cargo-make/total?label=binary%20downloads)](https://github.com/sagiegurari/cargo-make/releases)\n[![Built with cargo-make](https://sagiegurari.github.io/cargo-make/assets/badges/cargo-make.svg)](https://sagiegurari.github.io/cargo-make)\n\n> [Rust](https://www.rust-lang.org/) task runner and build tool.\n\n* [Overview](#overview)\n* [Installation](#installation)\n    * [Arch Linux](#installation-arch-linux)\n    * [Binary Release](#installation-binary-release)\n* [Usage](#usage)\n    * [Simple Example](#usage-simple)\n    * [Tasks, Dependencies, and Aliases](#usage-task-dependencies-alias)\n    * [Commands, Scripts, and Sub Tasks](#usage-task-command-script-task)\n        * [Sub Task](#usage-task-command-script-task-examplesubtask)\n        * [Command](#usage-task-command-script-task-examplecommand)\n        * [Script](#usage-task-command-script-task-examplescript)\n        * [Duckscript](#usage-task-command-script-task-exampleduckscript)\n        * [Rust Code](#usage-task-command-script-task-examplerust)\n        * [Cross Platform Shell](#usage-task-command-script-task-exampleshell2batch)\n        * [Other Programming Languages](#usage-task-command-script-task-examplegeneric)\n        * [Shebang Support](#usage-task-command-script-task-exampleshebang)\n    * [Default Tasks and Extending](#usage-default-tasks)\n        * [Extending External Makefiles](#usage-workspace-extending-external-makefile)\n        * [Automatically Extend Workspace Makefile](#usage-workspace-extend)\n        * [Load Scripts](#usage-load-scripts)\n        * [Predefined Makefiles](#usage-predefined-makefiles)\n        * [The Default Task](#usage-default-task)\n    * [Extending Tasks](#usage-extending-tasks)\n        * [Task Override](#usage-task-override)\n        * [Platform Override](#usage-platform-override)\n        * [Extend Attribute](#usage-task-extend-attribute)\n    * [Environment Variables](#usage-env)\n        * [Declaration](#env-declaration)\n        * [Global Configuration](#usage-env-config)\n        * [Task](#usage-env-task)\n        * [Command Line](#usage-env-cli)\n        * [Env File](#usage-env-file)\n        * [Env Setup Scripts](#usage-env-setup-scripts)\n        * [Loading Order](#usage-env-vars-loading-order)\n        * [Note about Ordering](#env-note-about-ordering)\n        * [Global](#usage-env-global)\n    * [Setting Up Working Directory](#usage-setting-up-working-directory)\n    * [Ignoring Errors](#usage-ignoring-errors)\n    * [Conditions](#usage-conditions)\n        * [Criteria](#usage-conditions-structure)\n        * [Scripts](#usage-conditions-script)\n        * [And/Or/Group Or](#usage-conditions-and-or)\n        * [Combining Conditions and Sub Tasks](#usage-conditions-and-subtasks)\n        * [Running Tasks Only If Sources Changed](#usage-running-tasks-only-if-sources-changed)\n    * [Installing Dependencies](#usage-installing-dependencies)\n        * [Cargo Plugins](#usage-installing-cargo-plugins)\n        * [Crates](#usage-installing-crates)\n        * [Rustup Components](#usage-installing-rustup-components)\n        * [Native Dependencies](#usage-installing-native-dependencies)\n        * [Defining Version](#usage-installing-version)\n        * [Global Lock Of Versions](#usage-installing-locked)\n        * [Alternate Cargo Install Commands](#usage-installing-alternate-cargo-install-commands)\n        * [Installation Priorities](#usage-installing-dependencies-priorities)\n        * [Multiple Installations](#usage-installing-dependencies-multiple)\n    * [Workspace Support](#usage-workspace-support)\n        * [Disabling Workspace Support](#usage-workspace-disabling-workspace-support)\n        * [Composite Flow](#usage-workspace-composite-flow)\n        * [Profiles](#usage-workspace-profiles)\n        * [Skipping/Including Specific Members](#usage-workspace-support-skip-include-members)\n        * [Workspace Emulation](#usage-workspace-emulation)\n    * [Toolchain](#usage-toolchain)\n    * [Init and End tasks](#usage-init-end-tasks)\n    * [Catching Errors](#usage-catching-errors)\n    * [Cargo Alias Tasks](#usage-cargo-alias-tasks)\n    * [Profiles](#usage-profiles)\n        * [Environment Variables](#usage-profiles-env)\n        * [Conditions](#usage-profiles-conditions)\n        * [Built In Profiles](#usage-profiles-built-in)\n    * [Private Tasks](#usage-private-tasks)\n    * [Deprecated Tasks](#usage-deprecated-tasks)\n    * [Watch](#usage-watch)\n        * [Running Multiple Blocking Watches](#usage-watch-running-multiple-blocking-watches)\n    * [Functions](#usage-functions)\n        * [Split](#usage-functions-split)\n        * [GetAt](#usage-functions-getat)\n        * [Remove Empty](#usage-functions-remove-empty)\n        * [Trim](#usage-functions-trim)\n        * [Decode](#usage-functions-decode)\n    * [Continuous Integration](#usage-ci)\n        * [Github Actions](#usage-ci-github-actions)\n        * [Travis](#usage-ci-travis)\n        * [AppVeyor](#usage-ci-appveyor)\n        * [GitLab](#usage-ci-gitlab)\n        * [CircleCI](#usage-ci-circleci)\n        * [Azure Pipelines](#usage-ci-azure-pipelines)\n        * [drone.io](#usage-ci-drone-io)\n        * [Cirrus CI](#usage-ci-cirrus)\n    * [Predefined Flows](#usage-predefined-flows)\n        * [Coverage](#usage-predefined-flows-coverage)\n        * [Full List](https://github.com/sagiegurari/cargo-make/blob/master/docs/cargo_make_task_list.md)\n        * [Disabling Predefined Tasks/Flows](#usage-predefined-flows-disable)\n        * [Modifying Predefined Tasks/Flows](#usage-predefined-flows-modify)\n    * [Minimal Version](#usage-min-version)\n    * [Performance Tuning](#usage-performance-tuning)\n    * [Command Groups (Subcommands)](#usage-command-groups)\n    * [Diff Changes](#usage-diff-changes)\n    * [Unstable Features](#usage-unstable-features)\n    * [CLI Options](#usage-cli)\n    * [Plugins](#usage-plugins)\n        * [Defining Plugins](#usage-plugins-defining-plugins)\n        * [Plugin SDK](#usage-plugins-plugin-sdk)\n        * [Plugin Example - Docker Integration](#usage-plugins-plugin-example-dockerize)\n        * [Plugin Example - Run workspace members in parallel](#usage-plugins-plugin-example-parallel-workspace-members)\n        * [Plugin Example - load Env From Rust Script](#usage-plugins-plugin-example-rustenv)\n        * [Plugin Example - Adding Simpler Windows Powershell Support](#usage-plugins-plugin-example-powershell)\n    * [Shell Completion](#usage-shell-completion)\n        * [Bash](#usage-shell-completion-bash)\n        * [zsh](#usage-shell-completion-zsh)\n        * [Fig / Amazon CodeWhisperer for command line](#usage-shell-completion-fig)\n    * [Global Configuration](#cargo-make-global-config)\n* [Makefile Definition](#descriptor-definition)\n* [Task Naming Conventions](#task-name-conventions)\n* [Articles](#articles)\n    * [Introduction and Basics](https://medium.com/@sagiegurari/automating-your-rust-workflows-with-cargo-make-part-1-of-5-introduction-and-basics-b19ced7e7057)\n    * [Extending Tasks, Platform Overrides, and Aliases](https://medium.com/@sagiegurari/automating-your-rust-workflows-with-cargo-make-part-2-of-5-extending-tasks-platform-overrides-1527386dcf87)\n    * [Environment Variables, Conditions, Sub Tasks, and Mixing](https://medium.com/@sagiegurari/automating-your-rust-workflows-with-cargo-make-part-3-of-5-environment-variables-conditions-3c740a837a01)\n    * [Workspace Support, Init/End Tasks, and Makefiles](https://medium.com/@sagiegurari/automating-your-rust-workflows-with-cargo-make-part-4-of-5-workspace-support-init-end-tasks-c3e738699421)\n    * [Predefined Tasks, CI Support, and Conventions](https://medium.com/@sagiegurari/automating-your-rust-workflows-with-cargo-make-part-5-final-predefined-tasks-ci-support-and-4594812e57da)\n* [Badge](#badge)\n* [Roadmap](#roadmap)\n* [Editor Support](#editor-support)\n    * [vim](#editor-support-vim)\n    * [vs-code](#editor-support-vs-code)\n* [Contributing](.github/CONTRIBUTING.md)\n* [Release History](https://github.com/sagiegurari/cargo-make/blob/master/CHANGELOG.md)\n* [License](#license)\n\n<a name=\"overview\"></a>\n## Overview\nThe cargo-make task runner enables to define and configure sets of tasks and run them as a flow.<br>\nA task is a command, script, rust code, or other sub tasks to execute.<br>\nTasks can have dependencies which are also tasks that will be executed before the task itself.<br>\nWith a simple toml based configuration file, you can define a multi platform build script that can run build, test, generate documentation, run bench tests, run security validations and more, executed by running a single command.\n\n<a name=\"installation\"></a>\n## Installation\nIn order to install, just run the following command\n\n```sh\ncargo install --force cargo-make\n```\n\nThis will install cargo-make in your `~/.cargo/bin`.<br>\nMake sure to add `~/.cargo/bin` directory to your `PATH` variable.<br>\n<br>\nYou will have two executables available: *`cargo-make`* and *`makers`*<br>\n\n* **cargo-make** - This is a cargo plugin invoked using **cargo make ...**\n* **makers** - A standalone executable which provides same features and cli arguments as cargo-make, but is invoked directly and not as a cargo plugin.\n\nSee [Cli Options](#usage-cli) section for full CLI instructions.\n\nIn order to install with minimal features (for example, no TLS support), run the following:\n\n```sh\ncargo install --no-default-features --force cargo-make\n```\n\n<a name=\"installation-arch-linux\"></a>\n### Arch Linux\n\n```sh\nsudo pacman -S cargo-make\n```\n\n<a name=\"installation-binary-release\"></a>\n### Binary Release\nBinary releases are available in the [github releases page](https://github.com/sagiegurari/cargo-make/releases).<br>\nThe following binaries are available for each release:\n\n* x86_64-unknown-linux-gnu\n* x86_64-unknown-linux-musl\n* x86_64-apple-darwin\n* x86_64-pc-windows-msvc\n* aarch64-apple-darwin\n\n<a name=\"usage\"></a>\n## Usage\nWhen using cargo-make, all tasks are defined and configured via toml files.<br>\nBelow are simple instructions to get you started off quickly.\n\n<a name=\"usage-simple\"></a>\n### Simple Example\nIn order to run a set of tasks, you first must define them in a toml file.<br>\nFor example, if we would like to have a script which:\n\n* Formats the code\n* Cleans old target directory\n* Runs build\n* Runs tests\n\nBy default, cargo-make reads tasks from `Makefile.toml` if it exists.\n\nWe will create a `Makefile.toml` file as follows:\n\n```toml\n[tasks.format]\ninstall_crate = \"rustfmt\"\ncommand = \"cargo\"\nargs = [\"fmt\", \"--\", \"--emit=files\"]\n\n[tasks.clean]\ncommand = \"cargo\"\nargs = [\"clean\"]\n\n[tasks.build]\ncommand = \"cargo\"\nargs = [\"build\"]\ndependencies = [\"clean\"]\n\n[tasks.test]\ncommand = \"cargo\"\nargs = [\"test\"]\ndependencies = [\"clean\"]\n\n[tasks.my-flow]\ndependencies = [\n    \"format\",\n    \"build\",\n    \"test\"\n]\n```\n\nWe would execute the flow with the following command:\n\n```sh\ncargo make my-flow\n```\n\nThe output would look something like this:\n\n```console\n[cargo-make] INFO - cargo make 0.37.23\n[cargo-make] INFO - Build File: Makefile.toml\n[cargo-make] INFO - Task: my-flow\n[cargo-make] INFO - Setting Up Env.\n[cargo-make] INFO - Running Task: format\n[cargo-make] INFO - Execute Command: \"cargo\" \"fmt\" \"--\" \"--emit=files\"\n[cargo-make] INFO - Running Task: clean\n[cargo-make] INFO - Execute Command: \"cargo\" \"clean\"\n[cargo-make] INFO - Running Task: build\n[cargo-make] INFO - Execute Command: \"cargo\" \"build\"\n   Compiling bitflags v0.9.1\n   Compiling unicode-width v0.1.4\n   Compiling quote v0.3.15\n   Compiling unicode-segmentation v1.1.0\n   Compiling strsim v0.6.0\n   Compiling libc v0.2.24\n   Compiling serde v1.0.8\n   Compiling vec_map v0.8.0\n   Compiling ansi_term v0.9.0\n   Compiling unicode-xid v0.0.4\n   Compiling synom v0.11.3\n   Compiling rand v0.3.15\n   Compiling term_size v0.3.0\n   Compiling atty v0.2.2\n   Compiling syn v0.11.11\n   Compiling textwrap v0.6.0\n   Compiling clap v2.25.0\n   Compiling serde_derive_internals v0.15.1\n   Compiling toml v0.4.2\n   Compiling serde_derive v1.0.8\n   Compiling cargo-make v0.1.2 (file:///home/ubuntu/workspace)\n    Finished dev [unoptimized + debuginfo] target(s) in 79.75 secs\n[cargo-make] INFO - Running Task: test\n[cargo-make] INFO - Execute Command: \"cargo\" \"test\"\n   Compiling cargo-make v0.1.2 (file:///home/ubuntu/workspace)\n    Finished dev [unoptimized + debuginfo] target(s) in 5.1 secs\n     Running target/debug/deps/cargo_make-d5f8d30d73043ede\n\nrunning 10 tests\ntest log::tests::create_info ... ok\ntest log::tests::get_level_error ... ok\ntest log::tests::create_verbose ... ok\ntest log::tests::get_level_info ... ok\ntest log::tests::get_level_other ... ok\ntest log::tests::get_level_verbose ... ok\ntest installer::tests::is_crate_installed_false ... ok\ntest installer::tests::is_crate_installed_true ... ok\ntest command::tests::validate_exit_code_error ... ok\ntest log::tests::create_error ... ok\n\ntest result: ok. 10 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out\n\n[cargo-make] INFO - Running Task: my-flow\n[cargo-make] INFO - Build done in 72 seconds.\n```\n\nWe now created a build script that can run on any platform.\n\nThe tasks can be stored in any toml file.  Invoke cargo-make with `--makefile other-filename.toml`\nto start processing using `other-filename.toml`.\n\n**cargo-make can be invoked as a cargo plugin via `cargo make` command, _or_ as a standalone executable via `makers` command.**<br>\n<br>\n**Important Note: if you are running this example in a cargo workspace, you will need to add the following to the top of the file:**<br>\n\n```toml\n[env]\nCARGO_MAKE_EXTEND_WORKSPACE_MAKEFILE = true\n```\n**More on workspace support in the relevant sections in this document.**\n\n<a name=\"usage-task-dependencies-alias\"></a>\n### Tasks, Dependencies, and Aliases\nIn many cases, certain tasks depend on other tasks.<br>\nFor example you would like to format the code before running build and run the build before running tests.<br>\nSuch flow can be defined as follows:\n\n```toml\n[tasks.format]\ninstall_crate = \"rustfmt\"\ncommand = \"cargo\"\nargs = [\"fmt\", \"--\", \"--emit=files\"]\n\n[tasks.build]\ncommand = \"cargo\"\nargs = [\"build\"]\ndependencies = [\"format\"]\n\n[tasks.test]\ncommand = \"cargo\"\nargs = [\"test\"]\ndependencies = [\"build\"]\n```\n\nWhen you run:\n\n```sh\ncargo make --makefile ./my_build.toml test\n```\n\nIt will try to run test, see that it has dependencies and those have other dependencies.<br>\nTherefore it will create an execution plan for the tasks based on the tasks and their dependencies.<br>\nIn our case it will invoke format -> build -> test.<br>\n\nThe same task will never be executed twice. So, if we have, for example:\n\n```toml\n[tasks.A]\ndependencies = [\"B\", \"C\"]\n\n[tasks.B]\ndependencies = [\"D\"]\n\n[tasks.C]\ndependencies = [\"D\"]\n\n[tasks.D]\nscript = \"echo hello\"\n```\n\nIn this example, A depends on B and C, and both B and C are dependent on D.<br>\nTask D, however, will not be invoked twice.<br>\nThe output of the execution will look something like this:\n\n```console\n[cargo-make] INFO - Task: A\n[cargo-make] INFO - Setting Up Env.\n[cargo-make] INFO - Running Task: D\n[cargo-make] INFO - Execute Command: \"sh\" \"/tmp/cargo-make/CNuU47tIix.sh\"\nhello\n[cargo-make] INFO - Running Task: B\n[cargo-make] INFO - Running Task: C\n[cargo-make] INFO - Running Task: A\n```\n\nAs you can see, 'hello' was printed once by task D as it was only invoked once.<br>\nBut what if we want to run D twice?<br>\nSimple answer would be to duplicate task D, have B depend on D, and C depend on D2, which is a copy of D.<br>\nBut duplicating can lead to bugs and to huge makefiles, so we have aliases for that.<br>\nAn alias task has its own name and points to another task.<br>\nAll of the definitions of the alias task are ignored.<br>\nSo now, if we want to have D execute twice, we can do the following:\n\n```toml\n[tasks.A]\ndependencies = [\"B\", \"C\"]\n\n[tasks.B]\ndependencies = [\"D\"]\n\n[tasks.C]\ndependencies = [\"D2\"]\n\n[tasks.D]\nscript = \"echo hello\"\n\n[tasks.D2]\nalias=\"D\"\n```\n\nNow C depends on D2, and D2 is an alias for D.<br>\nExecution output of such make file would like as follows:\n\n```console\n[cargo-make] INFO - Task: A\n[cargo-make] INFO - Setting Up Env.\n[cargo-make] INFO - Running Task: D\n[cargo-make] INFO - Execute Command: \"sh\" \"/tmp/cargo-make/HP0UD7pgoX.sh\"\nhello\n[cargo-make] INFO - Running Task: B\n[cargo-make] INFO - Running Task: D2\n[cargo-make] INFO - Execute Command: \"sh\" \"/tmp/cargo-make/TuuZJkqCE2.sh\"\nhello\n[cargo-make] INFO - Running Task: C\n[cargo-make] INFO - Running Task: A\n```\n\nNow you can see that 'hello' was printed twice.\n\nTasks may also depend on tasks in other files.\nTo do this, specify the dependency with the object format, providing the path.\ncargo-make will use this path as it would any other supplied on the command line:\nIf a filename is supplied, it searches that file.\nOtherwise it search for the default `Makefile.toml` on that path.\n\n```toml\n[tasks.install]\ncommand = \"mv\"\nargs = [\"src/B/out\", \"src/C/static\"]\ndependencies = [\n  { name = \"compile\", path = \"src/B\" },\n  { name = \"clean\", path = \"src/C/tasks.toml\" },\n]\n```\n\n*The run_task attribute will tell a task to invoke another task in a new execution plan. This will also result in dependencies being invoked multiple times.*\n\nIt is also possible to define platform specific aliases, for example:\n\n```toml\n[tasks.my_task]\nlinux_alias = \"linux_my_task\"\nwindows_alias = \"windows_my_task\"\nmac_alias = \"mac_my_task\"\n\n[tasks.linux_my_task]\n\n[tasks.mac_my_task]\n\n[tasks.windows_my_task]\n```\n\nIf platform specific alias is found and matches current platform it will take precedence over the non platform alias definition.<br>\nFor example:\n\n```toml\n[tasks.my_task]\nlinux_alias = \"run\"\nalias = \"do_nothing\"\n\n[tasks.run]\nscript = \"echo hello\"\n\n[tasks.do_nothing]\n```\n\nIf you run task **my_task** on windows or mac, it will invoke the **do_nothing** task.<br>\nHowever, if executed on a linux platform, it will invoke the **run** task.\n\n*As a side note, cargo-make will attempt to invoke the task dependencies in the order that they were defined, unless they are defined also as sub dependencies.*\n\n<a name=\"usage-task-command-script-task\"></a>\n### Commands, Scripts, and Sub Tasks\nThe actual operation that a task invokes can be defined in 3 ways.<br>\nThe below explains each one:\n\n* **run_task** - Invokes another task with the name defined in this attribute. Unlike dependencies which are invoked before the current task, the task defined in the **run_task** is invoked after the current task.\n* **command** - The command attribute defines what executable to invoke. You can use the **args** attribute to define what command line arguments to provide as part of the command.\n* **script** - Invokes the script. You can change the executable used to invoke the script using the **script_runner** attribute. If not defined, the default platform runner is used (`cmd` for Windows, `sh` for others).\n\nOnly one of the definitions will be used.<br>\nIf multiple attributes are defined (for example both command and script), the task will fail during invocation.\n\nThe script attribute may hold non OS scripts, for example rust code to be compiled and executed.<br>\nIn order to use non OS script runners, you must define the special script_runner with the **@** prefix.<br>\nThe following runners are currently supported:\n\n* **@duckscript** - Executes the defined duckscript code. See [example](#usage-task-command-script-task-exampleduckscript)\n* **@rust** - Compiles and executes the defined rust code. See [example](#usage-task-command-script-task-examplerust)\n* **@shell** - For Windows platforms, it will try to convert the shell commands to Windows batch commands (only basic scripts are supported) and execute the script; for other platforms, the script will be executed as-is. See [example](#usage-task-command-script-task-exampleshell2batch)\n\nBelow are some basic examples of each action type.\n\n<a name=\"usage-task-command-script-task-examplesubtask\"></a>\n#### Sub Task\nIn this example, if we execute the **flow** task, it will invoke the **echo** task defined in the **run_task** attribute.\n\n```toml\n[tasks.echo]\nscript = \"echo hello world\"\n\n[tasks.flow]\nrun_task = \"echo\"\n```\n\nA more complex example below demonstrates the ability to define multiple task names and optional conditions attached to each task.<br>\nThe **first** task for which the conditions are met (or if no conditions are defined at all), will be invoked.<br>\nIf no task conditions are met, no sub task will be invoked.<br>\nMore on conditions can be found the [conditions section](#usage-conditions)\n\n```toml\n[tasks.test1]\ncommand = \"echo\"\nargs = [\"running test1\"]\n\n[tasks.test2]\ncommand = \"echo\"\nargs = [\"running test2\"]\n\n[tasks.test3]\ncommand = \"echo\"\nargs = [\"running test3\"]\n\n[tasks.test-default]\ncommand = \"echo\"\nargs = [\"running test-default\"]\n\n[tasks.test-routing]\nrun_task = [\n    { name = \"test1\", condition = { platforms = [\"windows\", \"linux\"], channels = [\"beta\", \"stable\"] } },\n    { name = \"test2\", condition = { platforms = [\"mac\"], rust_version = { min = \"1.20.0\", max = \"1.30.0\" } } },\n    { name = \"test3\", condition_script = [ \"somecommand\" ] },\n    { name = \"test-default\" }\n]\n```\n\nIt is also possible to run the sub task as a forked sub process using the **fork** attribute.<br>\nThis prevents any environment changes done in the sub task to impact the rest of the flow in the parent process.<br>\nExample of invoking the sub task in a forked sub process:\n\n```toml\n[tasks.echo]\ncommand = \"echo\"\nargs = [\"hello world\"]\n\n[tasks.fork-example]\nrun_task = { name = \"echo\", fork = true }\n```\n\nThe **name** attribute can hold either a single task name or a list of tasks.<br>\nIn case of a list, the tasks would be invoked one after the other in sequence.<br>\nFor example, below **simple-multi** and **routing-multi** both demonstrate different ways to define multi task invocations via **run_task**:\n\n```toml\n[tasks.echo1]\ncommand = \"echo\"\nargs = [\"1\"]\n\n[tasks.echo2]\ncommand = \"echo\"\nargs = [\"2\"]\n\n[tasks.simple-multi]\nrun_task = { name = [\"echo1\", \"echo2\"] }\n\n[tasks.routing-multi]\nrun_task = [\n    { name = [\"echo1\", \"echo2\"] },\n]\n```\n\nYou can also setup a **cleanup** task to run after the sub task even if the sub task failed.<br>\nThis is only supported in combination with **fork=true** attribute.<br>\nFor example:<br>\n\n```toml\n[tasks.echo1]\ncommand = \"echo\"\nargs = [\"1\"]\n\n[tasks.echo2]\ncommand = \"echo\"\nargs = [\"2\"]\n\n[tasks.fail]\nscript =  \"exit 1\"\n\n[tasks.cleanup]\ncommand = \"echo\"\nargs = [\"cleanup\"]\n\n[tasks.cleanup-example]\nrun_task = { name = [\"echo1\", \"echo2\", \"fail\"], fork = true, cleanup_task = \"cleanup\" }\n```\n\nIn order to run multiple tasks in parallel, add **parallel = true** to the `run_task` object.<br>\nFor example:\n\n```toml\n[tasks.echo1]\ncommand = \"echo\"\nargs = [\"1\"]\n\n[tasks.echo2]\ncommand = \"echo\"\nargs = [\"2\"]\n\n[tasks.parallel-multi]\nrun_task = { name = [\"echo1\", \"echo2\"], parallel = true }\n```\n\nThis allows to run independent tasks in parallel and speed up the overall performance of the flow.<br>\nBe aware that parallel invocation of tasks will cause issues if the following feature are used:\n\n* Setting the task's current working directory via **cwd** attribute will result in all parallel tasks being affected.\n* Avoid using **`CARGO_MAKE_CURRENT_TASK_`** type environment variables as those may hold incorrect values.\n\nIn addition, in some scenarios, child processes may be left as zombie processes.<br>\nIt is possible to setup a manual cleanup task to resolve it.\n\n<a name=\"usage-task-command-script-task-examplecommand\"></a>\n#### Command\nWhen running commands, you can also define the command line arguments, as shown in the example below, to invoke the cargo command with the plugin name as a command line argument:\n\n```toml\n[tasks.build-with-verbose]\ncommand = \"cargo\"\nargs = [\"build\", \"--verbose\", \"--all-features\"]\n```\n\nIt is possible to provide environment variables as part of the command and arguments to be replaced in runtime with actual values, for example:\n\n```toml\n[env]\nSIMPLE = \"SIMPLE VALUE\"\nECHO_CMD = \"echo\"\n\n[tasks.expand]\ncommand = \"${ECHO_CMD}\"\nargs = [\n    \"VALUE: ${SIMPLE}\"\n]\n```\n\ncargo-make CLI also supports additional arguments which will be available to all tasks.<br>\nThe following example prints additional arguments:\n\n```toml\n[tasks.varargs]\ncommand = \"echo\"\nargs = [\n    \"args are:\", \"${@}\"\n]\n```\n\n*For native scripts, use that native script syntax.*<br>\n*For shell you can use ```${0}``` and for windows: ```%*```*\n\nInvoking cargo-make with additional arguments would result in the following:\n\n```console\n> cargo make varargs arg1 arg2 arg3\n\n[cargo-make] INFO - cargo make 0.37.23\n[cargo-make] INFO - Build File: Makefile.toml\n[cargo-make] INFO - Task: varargs\n[cargo-make] INFO - Setting Up Env.\n[cargo-make] INFO - Running Task: init\n[cargo-make] INFO - Running Task: varargs\n[cargo-make] INFO - Execute Command: \"echo\" \"args are:\" \"arg1\" \"arg2\" \"arg3\"\nargs are: arg1 arg2 arg3\n[cargo-make] INFO - Running Task: end\n[cargo-make] INFO - Build Done  in 0 seconds.\n```\n\nInvoking cargo-make without any additional arguments would result in the following:\n\n```console\n> cargo make varargs\n\n[cargo-make] INFO - cargo make 0.37.23\n[cargo-make] INFO - Build File: Makefile.toml\n[cargo-make] INFO - Task: varargs\n[cargo-make] INFO - Setting Up Env.\n[cargo-make] INFO - Running Task: init\n[cargo-make] INFO - Running Task: varargs\n[cargo-make] INFO - Execute Command: \"echo\" \"args are:\"\nargs are:\n[cargo-make] INFO - Running Task: end\n[cargo-make] INFO - Build Done  in 0 seconds.\n```\n\nThis can also be used for templating, for example:\n\n```toml\n[tasks.varargs]\ncommand = \"echo\"\nargs = [\n    \"args are:\", \"-o=${@}\"\n]\n```\n\nWould output:\n\n```console\n> cargo make varargs arg1 arg2 arg3\n\n[cargo-make] INFO - cargo make 0.37.23\n[cargo-make] INFO - Build File: Makefile.toml\n[cargo-make] INFO - Task: varargs\n[cargo-make] INFO - Setting Up Env.\n[cargo-make] INFO - Running Task: init\n[cargo-make] INFO - Running Task: varargs\n[cargo-make] INFO - Execute Command: \"echo\" \"args are:\" \"arg1\" \"arg2\" \"arg3\"\nargs are: -o=arg1 -o=arg2 -o=arg3\n[cargo-make] INFO - Running Task: end\n[cargo-make] INFO - Build Done  in 0 seconds.\n```\n\nCommand line arguments can also contain [built-in functions](#usage-functions) (see below).\n\n<a name=\"usage-task-command-script-task-examplescript\"></a>\n#### Script\nBelow is simple script which prints hello world.\n\n```toml\n[tasks.hello-world]\nscript = [\n    \"echo start...\",\n    \"echo \\\"Hello World From Script\\\"\",\n    \"echo end...\"\n]\n```\n\nYou can use multi-line toml string to make the script more readable as follows:\n\n```toml\n[tasks.hello-world]\nscript = '''\necho start...\necho \"Hello World From Script\"\necho end...\n'''\n```\n\ncargo-make CLI also supports additional arguments which will be available to all tasks.<br>\nThe following example prints additional arguments:\n\n```toml\n[tasks.cli-args]\nscript = \"echo args are: ${@}\"\n```\n\nInvoking cargo-make with additional arguments would result in the following:\n\n```console\n> cargo make cli-args arg1 arg2 arg3\n\n[cargo-make] INFO - cargo make 0.37.23\n[cargo-make] INFO - Build File: Makefile.toml\n[cargo-make] INFO - Task: cli-args\n[cargo-make] INFO - Setting Up Env.\n[cargo-make] INFO - Running Task: init\n[cargo-make] INFO - Running Task: cli-args\n+ cd /projects/rust/cargo-make/examples\n+ echo args are: arg1 arg2 arg3\nargs are: arg1 arg2 arg3\n[cargo-make] INFO - Running Task: end\n```\n\nInvoking cargo-make without any additional arguments would result in the following:\n\n```console\n> cargo make cli-args\n\n[cargo-make] INFO - cargo make 0.37.23\n[cargo-make] INFO - Build File: Makefile.toml\n[cargo-make] INFO - Task: cli-args\n[cargo-make] INFO - Setting Up Env.\n[cargo-make] INFO - Running Task: init\n[cargo-make] INFO - Running Task: cli-args\n+ cd /projects/rust/cargo-make/examples\n+ echo args are:\nargs are:\n[cargo-make] INFO - Running Task: end\n[cargo-make] INFO - Build Done  in 0 seconds.\n```\n\nIt is also possible to point to an existing script (instead of holding the script text inside the makefile) by using the **file** property as follows:\n\n```toml\n[tasks.hello-world-from-script-file]\nscript = { file = \"script.sh\" }\n```\n\nScript file paths are always relative to the current working directory, unless specified by the **absolute_path** attribute. For example:\n\n```toml\n[tasks.hello-world-from-script-file-absolute-path]\nscript = { file = \"${CARGO_MAKE_WORKING_DIRECTORY}/script.sh\", absolute_path = true }\n```\n\nFile paths support environment substitution.<br><br>\n**Favor commands over scripts, as commands support more features such as [automatic dependencies installation](#usage-installing-dependencies), [argument functions](#usage-functions), and more...**\n\nIn order to share common script content among multiple tasks, you can use the script pre/main/post form as follows:\n\n```toml\n[tasks.base-script]\nscript.pre = \"echo start\"\nscript.main = \"echo old\"\nscript.post = \"echo end\"\n\n[tasks.extended-script]\nextend = \"base-script\"\nscript.main = \"echo new\"\n```\n\nRunning extended-script task would print:\n\n```console\nstart\nnew\nend\n```\n\n<a name=\"usage-task-command-script-task-exampleduckscript\"></a>\n#### Duckscript\n[Duckscript](https://sagiegurari.github.io/duckscript/) is incredibly simple shell like language which provides cross platform shell scripting capability.<br>\n[Duckscript](https://sagiegurari.github.io/duckscript/) is embedded inside cargo-make so unlike other scripting solutions or commands, duckscript can change cargo-make environment variables from inside the script.<br>\nIn addition you can run cargo-make tasks from within duckscript script.<br>\nThis allows a really powerful two way integration with cargo-make.\n\n```toml\n[tasks.duckscript-example]\nscript_runner = \"@duckscript\"\nscript = '''\ntask_name = get_env CARGO_MAKE_CURRENT_TASK_NAME\necho The currently running cargo make task is: ${task_name}\n\n# since all env vars are auto loaded as duckscript variables by cargo-make\n# you can access them directly\necho The currently running cargo make task is: ${CARGO_MAKE_CURRENT_TASK_NAME}\n\ncd .. # this changes cargo-make current working directory (cargo-make will revert to original directory after script execution)\npwd\nset_env CARGO_MAKE_CURRENT_TASK_NAME tricking_cargo_make\n'''\n```\n\nThe next example shows how to invoke cargo-make tasks from duckscript:\n\n```toml\n[tasks.run-task-from-duckscript]\nscript_runner = \"@duckscript\"\nscript = '''\necho first invocation of echo1 task:\ncm_run_task echo1\necho second invocation of echo1 task:\ncm_run_task echo1\n\necho running task: echo2:\ncm_run_task echo2\n'''\n\n[tasks.echo1]\ncommand = \"echo\"\nargs = [\"1\"]\n\n[tasks.echo2]\ncommand = \"echo\"\nargs = [\"2\"]\n```\n\nSame as OS scripts, the @duckscript runner also supports the cargo-make CLI arguments access.<br>\nIn addition, all environment variables are preloaded as duckscript variables, and can be directly read from the script. (No need to invoke the **get_env** command!)\n\n<a name=\"usage-task-command-script-task-examplerust\"></a>\n#### Rust Code\nIn this example, when the **rust** task is invoked, the **script** content will be compiled and executed.\nYou can see how dependencies are defined in `Cargo.toml` format inside the code.\n\n```toml\n[tasks.rust]\nscript_runner = \"@rust\"\nscript = '''\n//! ```cargo\n//! [dependencies]\n//! envmnt = \"*\"\n//! ```\nfn main() {\n    let value = envmnt::get_or(\"PATH\", \"NO PATH VAR DEFINED\");\n    println!(\"Path Value: {}\", &value);\n}\n'''\n```\n\nSame as OS scripts, the @rust runner also supports the cargo-make CLI arguments access.<br>\nThere are several different rust script runners currently available:\n\n* [rust-script](https://crates.io/crates/rust-script)\n* [cargo-script](https://crates.io/crates/cargo-script)\n* [cargo-play](https://crates.io/crates/cargo-play)\n\nBy default, rust-script is used, however this can be changed via environment variable **`CARGO_MAKE_RUST_SCRIPT_PROVIDER`** which should hold the crate name.<br>\nThis enables to define a different runner for each task by setting it in the **env** block of the specific tasks.<br>\nFor example:\n\n```toml\n[tasks.rust-script]\nenv = { \"CARGO_MAKE_RUST_SCRIPT_PROVIDER\" = \"rust-script\" }\nscript_runner = \"@rust\"\nscript = '''\nfn main() {\n    println!(\"test\");\n}\n'''\n\n[tasks.cargo-script]\nenv = { \"CARGO_MAKE_RUST_SCRIPT_PROVIDER\" = \"cargo-script\" }\nscript_runner = \"@rust\"\nscript = '''\nfn main() {\n    println!(\"test\");\n}\n'''\n\n[tasks.cargo-play]\nenv = { \"CARGO_MAKE_RUST_SCRIPT_PROVIDER\" = \"cargo-play\" }\nscript_runner = \"@rust\"\nscript = '''\nfn main() {\n    println!(\"test\");\n}\n'''\n```\n\nKeep in mind that dependencies used by the rust script are defined differently for each runner.<br>\nPlease see the specific crate docs for learn more.\n\n<a name=\"usage-task-command-script-task-exampleshell2batch\"></a>\n#### Cross Platform Shell\nIn this example, when the **shell** task is invoked, the **script** content will be automatically converted to Windows batch commands (when running on a Windows platform) and invoked.\n\n```toml\n[tasks.shell]\nscript_runner = \"@shell\"\nscript = '''\nrm ./myfile.txt\n'''\n```\n\nSame as OS scripts, the @shell runner also supports the cargo-make CLI arguments access.<br>\n<br>\nSee [shell2batch](https://github.com/sagiegurari/shell2batch) project for complete set of features.\n\n<a name=\"usage-task-command-script-task-examplegeneric\"></a>\n#### Other Programming Languages\ncargo-make can also run scripts written in various scripting languages such as Python, Perl, Ruby, Javascript, and more...<br>\nAny runner which takes the form of **command file** (for example **`python ./program.py`**) is supported.\n\nBelow are few examples:\n\n```toml\n[tasks.python]\nscript_runner = \"python\"\nscript_extension = \"py\"\nscript = '''\nprint(\"Hello, World!\")\n'''\n\n[tasks.perl]\nscript_runner = \"perl\"\nscript_extension = \"pl\"\nscript = '''\nprint \"Hello, World!\\n\";\n'''\n\n[tasks.javascript]\nscript_runner = \"node\"\nscript_extension = \"js\"\nscript = '''\nconsole.log('Hello, World!');\n'''\n\n[tasks.php]\nscript_runner = \"php\"\nscript_extension = \"php\"\nscript = '''\n<?php\necho \"Hello, World!\\n\";\n'''\n\n[tasks.powershell]\nscript_runner = \"powershell\"\nscript_extension = \"ps1\"\nscript = '''\nWrite-Host \"Hello, World!\"\n'''\n```\n\nIn case you need to provider the script runner arguments before the script file, you can use the **script_runner_args** attribute.<br>\nFor example:\n\n```toml\n[tasks.php-with-args]\nscript_runner = \"php\"\nscript_runner_args = [\"-f\"]\nscript_extension = \"php\"\nscript = '''\n<?php\necho \"Hello, World!\\n\";\n'''\n```\n\n*script_runner_args requires script_extension defined as well.*\n\n<a name=\"usage-task-command-script-task-exampleshebang\"></a>\n#### Shebang Support\nInstead of defining custom runners via **script_runner** attribute, it's possible to define it in the script shebang line.\n\nIn case of Windows, make sure not to use a runner which doesn't have the **#** character defined as comment (for example, `cmd.exe` does not!), which would lead to an error.\n\nExample task using bash:\n\n```toml\n[tasks.shebang-sh]\nscript = '''\n#!/usr/bin/env bash\necho hello\n'''\n```\n\nOutput:\n\n```console\n> cargo make --cwd ./examples --makefile ./shebang.toml shebang-sh\n[cargo-make] INFO - cargo make 0.37.23\n[cargo-make] INFO - Build File: ./shebang.toml\n[cargo-make] INFO - Task: shebang-sh\n[cargo-make] INFO - Profile: development\n[cargo-make] INFO - Setting Up Env.\n[cargo-make] INFO - Running Task: init\n[cargo-make] INFO - Running Task: shebang-sh\n[cargo-make] INFO - Execute Command: \"/usr/bin/env\" \"bash\" \"/tmp/cargo-make/cJf6XEXrL9.sh\"\nhello\n[cargo-make] INFO - Running Task: end\n[cargo-make] INFO - Build Done  in 0 seconds.\n```\n\nExample task using Python:\n\n```toml\n[tasks.shebang-python]\nscript = '''\n#!/usr/bin/env python3\nprint(\"Hello, World!\")\n'''\n```\n\nOutput:\n\n```console\n> cargo make --cwd ./examples --makefile ./shebang.toml shebang-python\n[cargo-make] INFO - cargo make 0.37.23\n[cargo-make] INFO - Build File: ./shebang.toml\n[cargo-make] INFO - Task: shebang-python\n[cargo-make] INFO - Profile: development\n[cargo-make] INFO - Setting Up Env.\n[cargo-make] INFO - Running Task: init\n[cargo-make] INFO - Running Task: shebang-python\n[cargo-make] INFO - Execute Command: \"/usr/bin/env\" \"python3\" \"/tmp/cargo-make/Wy3QMJiQaS.sh\"\nHello, World!\n[cargo-make] INFO - Running Task: end\n[cargo-make] INFO - Build Done  in 0 seconds.\n```\n\nAnother trick you can do with shebangs is to define one of the special runners like @duckscript as follows:\n\n```toml\n[tasks.duckscript-shebang-example]\nscript = '''\n#!@duckscript\necho Running duckscript without runner attribute.\n'''\n```\n\nHowever that language must support comments starting with the **#** character.\n\n<a name=\"usage-default-tasks\"></a>\n### Default Tasks and Extending\nThere is no real need to define some of the basic **build**, **test**, ... tasks that were shown in the previous examples.<br>\ncargo-make comes with a built-in toml file that will serve as a base for every execution.<br>\nThe **optional** external toml file that is provided while running cargo-make will only extend and add or overwrite\ntasks that are defined in the [default makefiles](https://github.com/sagiegurari/cargo-make/blob/master/src/lib/descriptor/makefiles/).<br>\n\nLet's take the built-in **build** task, defined in the default toml:\n\n```toml\n[tasks.build]\ndescription = \"Runs the rust compiler.\"\ncategory = \"Build\"\ncommand = \"cargo\"\nargs = [\"build\", \"--all-features\"]\n```\n\nIf for example, you would like to add verbose output to it and remove the **--all-features** flag, you would just need to change the args and add the --verbose as follows:\n\n```toml\n[tasks.build]\nargs = [\"build\", \"--verbose\"]\n```\n\nIf you want to disable some existing task (will also disable its dependencies), you can do it as follows:\n\n```toml\n[tasks.build]\ndisabled = true\n```\n\nThere is no need to redefine existing properties of the task, only what needs to be added or overwritten.<br>\nThe default toml file comes with many steps and flows already built-in, so it is worth it to check it out first.<br>\n\nIn case you do want to delete all of the original task attributes in your extended task, you can use the **clear** attribute as follows:\n\n```toml\n[tasks.sometask]\nclear = true\ncommand = \"echo\"\nargs = [\n    \"extended task\"\n]\n```\n\nYou can also extend additional external files from your external makefile by using the **extend** attribute, for example:\n\n```toml\nextend = \"my_common_makefile.toml\"\n```\n\nThe file path in the **extend** attribute is always relative to the current toml file you are in, not to the process working directory.\n\nThe extend attribute can be very useful when you have a workspace with a `Makefile.toml` that contains all of the common custom tasks and in each project you can have a simple `Makefile.toml` which just has\nthe extend attribute pointing to the workspace makefile.\n\n<a name=\"usage-workspace-extending-external-makefile\"></a>\n#### Extending External Makefiles\nIn order for a makefile to extend additional external files from your external file by using the extend attribute, for example:\n\n```toml\nextend = \"my_common_makefile.toml\"\n```\n\nThe file path in the extend attribute is always relative to the current toml file you are in and not to the process working directory.<br>\nThe makefile pointed to in the extend attribute must exist or the build will fail.\n\nIn order to define optional extending makefiles, you will need to pass the optional flag in addition to the path as follows:\n\n```toml\nextend = { path = \"does_not_exist_makefile.toml\", optional = true }\n```\n\nYou can also define a list of makefiles to extend from.<br>\nAll will be loaded in the order you define.<br>\nFor example:\n\n```toml\nextend = [\n  { path = \"alias.toml\" },\n  { path = \"optional_makefile.toml\", optional = true },\n  { path = \"cwd.toml\" },\n]\n```\n\nYou can also change the relative path from the current makefile location to the git root folder, crate root folder or workspace root folder by adding the relative keyword as follows:\n\n```toml\nextend = { path = \"./examples/python.toml\", relative = \"crate\" }\n```\n\nWhere relative can have the following values:\n\n* git - For nearest (up) .git folder location.\n* crate - For crate root (based on first Cargo.toml file)\n* workspace - For workspace root (based on second top Cargo.toml file)\n\nAny other value defaults to the current makefile location.<br>\nImportant to mention, all paths are relative from the currently parsed makefile.\n\n<a name=\"usage-workspace-extend\"></a>\n#### Automatically Extend Workspace Makefile\nWhen running cargo make for modules which are part of a workspace, you can automatically have the member crates makefile (even if doesn't exist) extend the workspace level makefile.\n\nThe workspace level makefile **env** section must contain the following environment variable (you can also set it via CLI).\n\n```toml\n[env]\nCARGO_MAKE_EXTEND_WORKSPACE_MAKEFILE = true\n```\n\nThis allows you to maintaining a single makefile for the entire workspace but having access to those custom tasks in every member crate.\n<br>\n**This is only relevant for workspace builds which are triggered in the workspace root.<br>\nFlows that start directly in the member crate, must manually extend the workspace level makefile using the extend keyword.**\n\n<a name=\"usage-load-scripts\"></a>\n#### Load Scripts\nIn more complex scenarios, you may want multiple unrelated projects to share some common custom tasks. For example, you may wish to notify some internal company server of the build status.<br>\nInstead of redefining those tasks in each project, you can create a single toml file with those definitions and have all projects extend that file.<br>\nHowever, this “extend” functionality only knows to find the such files in the local file system. So, in order to pull some common toml from a remote server, (using `http` or `git clone` and so on...), you can use the load scripts.\n\nLoad scripts are defined in the config section using the **load_script** attribute and are invoked **before** the extend attribute is evaluated.<br>\nThis allows you to first pull the toml file from the remote server and put it in a location defined by the extend attribute.\n\nHere is an example of a load script which downloads the common toml from a remote server using HTTP:\n\n```toml\n[config]\nload_script = \"wget -O /home/myuser/common.toml companyserver.com/common.toml\"\n```\n\nHere is an example of pulling the common toml file from some git repo:\n\n```toml\n[config]\nload_script = \"git clone git@mygitserver:user/project.git /home/myuser/common\"\n```\n\nYou can run any command or set of commands you want. Therefore, you can build a more complex flow of how and from where to fetch the common toml file, and where to put it.<br>\nIf needed, you can override the load_script per platform using the **linux_load_script**, **windows_load_script** and **mac_load_script** attributes.\n\n<a name=\"usage-predefined-makefiles\"></a>\n#### Predefined Makefiles\n\nWhile cargo-make comes with many built in tasks, defined in the [default makefiles](https://github.com/sagiegurari/cargo-make/blob/master/src/lib/descriptor/makefiles/), they are not always relevant for every project.<br>\nThe [cargo-make-tasks](https://github.com/sagiegurari/cargo-make-tasks/) repository holds a collection of additional makefiles that can be loaded and provide replacement tasks for the built in cargo-make tasks.<br>\nFor example the cmake.toml provides cmake related tasks for projects using cmake.\n\nSee the [cargo-make-tasks](https://github.com/sagiegurari/cargo-make-tasks/) repository for more information and usage examples.\n\n<a name=\"usage-default-task\"></a>\n#### The Default Task\n\nWhen invoking the cargo make command without a task name, the default task is invoked.<br>\nThe default task is actually an alias to another task defined as follows:\n\n```toml\n[tasks.default]\nalias = \"dev-test-flow\"\n```\n\nThere are multiple ways to define the default task differently, for example:\n\n* Alias to another task in your custom makefile\n\n```toml\n[tasks.default]\nalias = \"my-custom-task\"\n```\n\n* Clear the alias and define the task actions\n\n```toml\n[tasks.default]\nclear = true # clears the alias\ncommand = \"echo\"\nargs = [\"custom!!!\"]\n```\n\n<a name=\"usage-extending-tasks\"></a>\n### Extending Tasks\n\nThere are multiple ways of extending tasks in the same or from extended makefiles.\n\n* [Task Override](#usage-task-override)\n* [Platform Override](#usage-platform-override)\n* [Extend Attribute](#usage-task-extend-attribute)\n\n<a name=\"usage-task-override\"></a>\n#### Task Override\ncargo-make comes with many predefined tasks and flows that can be used without redefining them in your project.<br>\nHowever in some cases, you would like to change them a bit to fit your needs without rewriting the entire task.<br>\nLet's take, for example, the **build** task which is predefined internally inside cargo-make as follows:\n\n```toml\n[tasks.build]\ndescription = \"Runs the rust compiler.\"\ncategory = \"Build\"\ncommand = \"cargo\"\nargs = [\"build\", \"--all-features\"]\n```\n\nIf you do not want to use the **--all-features** mode, you can just change the args of the task in your external `Makefile.toml` as follows:\n\n```toml\n[tasks.build]\nargs = [\"build\"]\n```\n\nWhen cargo-make starts up, it will load the external `Makefile.toml` and the internal makefile definitions and will merge them.<br>\nSince the external file overrides the internal definitions, only the args attribute for the **build** task which was redefined,\nwill override the args attribute which was defined internally, and the actual result would be:\n\n```toml\n[tasks.build]\ndescription = \"Runs the rust compiler.\"\ncategory = \"Build\"\ncommand = \"cargo\"\nargs = [\"build\"]\n```\n\nThe same process can be used to override tasks from other makefiles loaded using the extend keyword from [Extending External Makefiles](#usage-workspace-extending-external-makefile) section.\n\n<a name=\"usage-platform-override\"></a>\n#### Platform Override\nIf you want to override a task (or specific attributes in a task) for specific platforms, you can define an override task with the platform name (currently Linux, Windows, and macOS) under the specific task.<br>\nFor example:\n\n```toml\n[tasks.hello-world]\nscript = '''\necho \"Hello World From Unknown\"\n'''\n\n[tasks.hello-world.linux]\nscript = '''\necho \"Hello World From Linux\"\n'''\n```\n\nIf you run cargo make with task 'hello-world' on Linux, it would redirect to hello-world.linux while on other platforms it will execute the original hello-world.<br>\nIn Linux the output would be:\n\n```console\n[cargo-make] INFO - Task: hello-world\n[cargo-make] INFO - Setting Up Env.\n[cargo-make] INFO - Running Task: hello-world\n[cargo-make] INFO - Execute Command: \"sh\" \"/tmp/cargo-make/kOUJfw8Vfc.sh\"\nHello World From Linux\n[cargo-make] INFO - Build done in 0 seconds.\n```\n\nWhile on other platforms it would output:\n\n```console\n[cargo-make] INFO - Task: hello-world\n[cargo-make] INFO - Setting Up Env.\n[cargo-make] INFO - Running Task: hello-world\n[cargo-make] INFO - Execute Command: \"sh\" \"/tmp/cargo-make/2gYnulOJLP.sh\"\nHello World From Unknown\n[cargo-make] INFO - Build done in 0 seconds.\n```\n\nIn the override task, you can define any attribute that will override the attribute of the parent task, while undefined attributes will use the value from the parent task and will not be modified.<br>\nIf you need to delete attributes from the parent (for example, you have a command defined in the parent task, but you want to have a script defined in the override task), then you will\nhave to clear the parent task in the override task using the clear attribute as follows:\n\n```toml\n[tasks.hello-world.linux]\nclear = true\nscript = '''\necho \"Hello World From Linux\"\n'''\n```\n\nThis means, however, that you will have to redefine all attributes in the override task that you want to carry with you from the parent task.<br>\n**Important: alias comes before checking override task, so if the parent task has an alias, it will be redirected to that task instead of the override.**<br>\n**To have an alias redirect per-platform, use the linux_alias, windows_alias, mac_alias attributes.**<br>\n**In addition, aliases cannot be defined in platform override tasks, only in parent tasks.**\n\n<a name=\"usage-task-extend-attribute\"></a>\n#### Extend Attribute\nUntil now, the override capability enabled to override the task with the same name from different makefile or in different platforms.<br>\nHowever, the **extend** keyword is also available on the task level and enables you to override any task by name.<br>\nLet's look at the following example:\n\n```toml\n[tasks.1]\ncategory = \"1\"\ndescription = \"1\"\ncommand = \"echo\"\nargs = [\"1\"]\n\n[tasks.2]\nextend = \"1\"\ncategory = \"2\"\nargs = [\"2\"]\n\n[tasks.3]\nextend = \"2\"\nargs = [\"3\"]\n```\n\nWhen task **3** is loaded, it loads task **2** which loads task **1**.<br>\nThe final task **3** definition would be:\n\n```toml\n[tasks.3]\nextend = \"2\"\ncategory = \"2\"\ndescription = \"1\"\ncommand = \"echo\"\nargs = [\"3\"]\n```\n\nWe run task **3** the output would be:\n\n```console\n[cargo-make] INFO - cargo make 0.37.23\n[cargo-make] INFO - Build File: task_extend.toml\n[cargo-make] INFO - Task: 3\n[cargo-make] INFO - Profile: development\n[cargo-make] INFO - Running Task: init\n[cargo-make] INFO - Running Task: 3\n[cargo-make] INFO - Execute Command: \"echo\" \"3\"\n3\n[cargo-make] INFO - Running Task: end\n[cargo-make] INFO - Build Done  in 0 seconds.\n```\n\n\n<a name=\"usage-env\"></a>\n### Environment Variables\n`cargo-make` enabled the definition of environment variables in several ways, which can later be accessed throughout task execution.\n\nBecause environment variables play a significant role in `cargo-make`, it provides multiple declarative ways to provide them at different levels of granularity.\n\n* [Declaration](#env-declaration)\n* [Global Configuration](#usage-env-config)\n* [Task](#usage-env-task)\n* [Command Line](#usage-env-cli)\n* [Env File](#usage-env-file)\n* [Env Setup Scripts](#usage-env-setup-scripts)\n* [Loading Order](#usage-env-vars-loading-order)\n* [Note about Ordering](#env-note-about-ordering)\n* [Global](#usage-env-global)\n\n<a name=\"env-declaration\"></a>\n#### Declaration\n\nThere are multiple ways to declare environment variables, all of which are suited for specific suitcases.\n\n##### Simple\n\nThe most ordinary one is the definition of a simple `KEY=Value` pair, which is reminiscent of tools like [dotenv](https://www.npmjs.com/package/dotenv) and [bash scripts](https://www.gnu.org/software/bash/). Values can use other variables as values, which are interpolated at runtime, using the `${variable}` syntax.\n\n```toml\nSTRING = \"value\"\nRUST_BACKTRACE = 1\nBOOL_VALUE = true\nCOMPOSITE = \"${BOOL_VALUE} ${RUST_BACKTRACE}\"\n```\n\n##### List\n\n`cargo-make` also supports lists, which are joined using `;` at runtime.\n\n```toml\nLIST_VALUE = [ \"VALUE1\", \"VALUE2\", \"VALUE3\" ]\n```\n\n##### Script\n\n`cargo-make` supports the use of simple scripts. The output of the said script will then determine the value of the environment variable.\n\nThe script's object has two additional arguments: `multiline` and `depends_on`. If `multiple` is set to `true`, the supplied script will be evaluated as a script with multiple lines. `depends_on` is a list of environment variables this script depends on, which is taken into account during reordering if unset `cargo-make` will try to guess the variables used during reordering.\n\n> **Note:** This uses the default OS command runner (`cmd` on Windows, `sh` on UNIX systems), other runners like `duckscript`, `rust`, etc. are **not** supported.\n\n```toml\nEVALUATED_VAR = { script = [\"echo SOME VALUE\"] }\n```\n\n##### Decode Map\n\n`cargo-make` supports the use of mappings where a `source` is matched against a dictionary of possible `mapping`s, where each key of the `mapping` is compared against the evaluated `source` value. Should the key and `source` be the same, the corresponding value to the key will be the value of the environment variable. If no key is matched, the `default_value` is used if provided. Otherwise, it will default to an empty string instead.\n\n```toml\nLIBRARY_EXTENSION = { source = \"${CARGO_MAKE_RUST_TARGET_OS}\", default_value = \"unknown\", mapping = {\"linux\" = \"so\", \"macos\" = \"dylib\", \"windows\" = \"dll\", \"openbsd\" = \"so\" } }\n```\n\n##### Path\n\n`cargo-make` supports the use of glob syntax to find all files and directories in a given directory. The list of files will be joined using `;` during execution.\n\n```toml\nPATH_GLOB = { glob = \"./src/**/mod.rs\", include_files = true, include_dirs = false, ignore_type = \"git\" }\n```\n\n##### Conditional\n\n`cargo-make` supports conditional variables, which are set to the `value` specified if the `condition` evaluates to true. To learn more about conditions, refer to [this chapter](#usage-conditions)\n\n##### Unset\n\nVariables can be unset.\n\n```toml\nVARIABLE = {unset = true}\n```\n\n<a name=\"usage-env-config\"></a>\n#### Global Configuration\n\nEnvironmental variables can be set globally using the top level `[env]` key, with the ability to provide multiple profiles, which can be selected using `--profile <name>` when executing `cargo make`.\n\nEnvironment variables set in the global `[env]` block [and default `Makefile.toml`](https://github.com/sagiegurari/cargo-make/blob/master/src/lib/descriptor/makefiles/stable.toml) will be set before running any tasks.\n\n##### Example\n\n```toml\n[env]\nRUST_BACKTRACE = 1\nEVALUATED_VAR = { script = [\"echo SOME VALUE\"] }\nTEST1 = \"value1\"\nTEST2 = \"value2\"\nBOOL_VALUE = true\nDEV = false\nPROD = false\nCOMPOSITE = \"${TEST1} ${TEST2}\"\nMULTI_LINE_SCRIPT = { script = [\"echo 1\\necho 2\"], multi_line = true }\nCONDITIONAL_SCRIPT = { script = [\"echo conditional_script\"], condition = { env_not_set = [\"CONDITIONAL_SCRIPT\"] } }\nLIBRARY_EXTENSION = { source = \"${CARGO_MAKE_RUST_TARGET_OS}\", default_value = \"unknown\", mapping = {\"linux\" = \"so\", \"macos\" = \"dylib\", \"windows\" = \"dll\", \"openbsd\" = \"so\" } }\nTO_UNSET = { unset = true }\nPREFER_EXISTING = { value = \"new\", condition = { env_not_set = [\"PREFER_EXISTING\"] } }\nOVERWRITE_EXISTING = { value = \"new\", condition = { env_set = [\"OVERWRITE_EXISTING\"] } }\nENV_FROM_LIST = [\"ARG1\", \"${SIMPLE}\", \"simple value: ${SIMPLE} script value: ${SCRIPT}\"]\nPATH_GLOB = { glob = \"./src/**/mod.rs\", include_files = true, include_dirs = false, ignore_type = \"git\" }\n\n# profile based environment override\n[env.development]\nDEV = true\n\n[env.production]\nPROD = true\n```\n\n<a name=\"usage-env-task\"></a>\n#### Task\n\nEnvironmental variables can be set in a task's scope, and will be merged with the global environment when that task gets executed. This means that the evaluation of environment variables takes place after all dependencies have run, but _before_ the task itself runs.\n\n> **Note:** Reordering of task variables with global variables will **not** take place. Tasks simply overwrite previously declared variables.\n\n> **Note:** Variables are **not** cleaned up after execution, meaning that tasks following the executed task will inherit the variables set by the previous task.\n\n`cargo-make` supports the same capabilities outlined for global configuration on a individual task level.\n\n```toml\n[tasks.test-flow]\nenv = { \"SOME_ENV_VAR\" = \"value\" }\nrun_task = \"actual-task\"\n\n[tasks.actual-task]\ncondition = { env_set = [ \"SOME_ENV_VAR\" ] }\nscript = '''\necho var: ${SOME_ENV_VAR}\n'''\n```\n\n<a name=\"usage-env-cli\"></a>\n#### Command Line\nEnvironment variables can be defined in the command line using the `--env` / `-e` argument as follows:\n\n```console\ncargo make --env ENV1=VALUE1 --env ENV2=VALUE2 -e ENV3=VALUE3\n```\n\n<a name=\"usage-env-file\"></a>\n#### Env File\nIt is also possible to provide an env file path as part of the CLI args as follows:\n\n```console\ncargo make --env-file=./env/production.env\n```\n\nThis allows using the same `Makefile.toml`, but with a different set of environment variables loaded from the env file.\n\nThe env file is a simple `key=value`, which is similar to [dotenv](https://www.npmjs.com/package/dotenv), but only supports variable interpolation using the `${}` syntax.\n\n```properties\n#just a comment...\nENV1_TEST=TEST1\nENV2_TEST=TEST2\nENV3_TEST=VALUE OF ENV2 IS: ${ENV2_TEST}\n```\n\nPaths to environment files can also be defined globally in the `env_files` key of the `Makefile.toml`, which will be loaded in the order they are defined. All relative paths are relative to the directory containing the `Makefile.toml` they were defined in.\n\n> **Note:** `env_files` can also be used on a task level. Be aware that relative paths will instead be relative to the **current working directory**\n\n```toml\nenv_files = [\n    \"./env1.env\",\n    \"./env2.env\"\n]\n```\n\nTo only load environment variables whenever a variable hasn't been defined yet, use the `defaults_only` property.\n\n```toml\nenv_files = [\n    { path = \"./load_only_undefined.env\", defaults_only = true },\n    { path = \"./load_all.env\" }\n]\n```\n\nUse the `profile` property to only load environment variables whenever a specific profile is active.\n\n> To learn more about profiles, check the [profiles section](#usage-profiles).\n\n```toml\nenv_files = [\n    { path = \"./profile.env\", profile = \"development\" },\n    { path = \"./env.env\" }\n]\n```\n\n<a name=\"usage-env-setup-scripts\"></a>\n#### Env Setup Scripts\n\nEnvironment setup scripts are invoked after environment files and the env block. They are defined globally by the **env_scripts** attribute. These scripts can run anything needed before starting up the flow.\n\nIn the case of `duckscript` scripts invoked by the embedded runtime, it is possible to modify the `cargo-make` runtime environment variables directly.\n\nFor Example:\n\n```toml\nenv_scripts = [\n'''\n#!@duckscript\necho first env script...\n\ncomposite_env_value = get_env COMPOSITE\necho COMPOSITE = ${composite_env_value}\n\nset_env COMPOSITE_2 ${composite_env_value}\n''',\n'''\n#!@duckscript\necho second env script...\n\ncomposite_env_value = get_env COMPOSITE_2\necho COMPOSITE_2 = ${composite_env_value}\n'''\n]\n\n[env]\nSIMPLE = \"SIMPLE VALUE\"\nSCRIPT = { script = [\"echo SCRIPT VALUE\"] }\nCOMPOSITE = \"simple value: ${SIMPLE} script value: ${SCRIPT}\"\n```\n\nIn this example, since the **env** block is invoked before the env scripts, the `duckscript`s have access to the `COMPOSITE` environment variable.<br>\nThese scripts use that value to create a new environment variable **`COMPOSITE_2`**, and in the second script, we print it.\n\n<a name=\"usage-env-vars-loading-order\"></a>\n#### Loading Order\n\n`cargo-make` will load the environment variables in the following order\n\n* Load environment file provided on the command line\n* Setup internal environment variables (see [Global](#usage-env-global) section). **Does not per-task variables.**\n* Load global environment files defined in the **env_files** attribute.\n* Load global environment variables provided on the command line.\n* Load global environment variables defined in the **env** block and relevant sub env blocks based on profile/additional profiles.\n* Load global environment variables defined in the **env.\\[current profile\\]** block.\n* Load global environment setup scripts defined in the **env_scripts** attribute.\n* **Per Task**\n  * Setup **per task** internal environment variables (see [Global](#usage-env-global) section).\n  * Load environment files defined in the **env_files** attribute (relative paths are treated differently than global env_files).\n  * Load environment variables defined in the **env** block (same behavior as global env block).\n\nDuring each step, variables can be reordered to ensure all dependencies are specified. The environment variables will be interpolated before every task run.\n\n<a name=\"env-note-about-ordering\"></a>\n#### Note about Ordering\n\nThe ordering of environment variables in `cargo-make` is not necessarily the same between definition and evaluation. `cargo-make` instead looks at the values and reorders variables depending on the variables they mention.\n\nThis behavior has many benefits, like the ability to reference other variables freely or redefine them, in different scopes.\n\n```toml\n[env]\nVAR1=\"${VAR2}\"\nVAR2=2\n```\n\nA naive implementation would now result in `VAR1=\"\"`, `VAR2=2`, this behavior can be very unexpected, especially when extending existing declarations of environment variables. `cargo-make` is different and uses an approach that is similar to tools like [`terraform`](https://www.terraform.io), it will recognize that `VAR1` depends on `VAR2`, which will output `VAR1=2`, `VAR2=2`.\n\n```toml\n[env]\nVAR1=\"${VAR2}\"\n\n[env.prod]\nVAR2=2\n\n[env.devel]\nVAR2=3\n```\n\nThis is an extended example, which would not work using the naive implementation, because the different profiles are merged with the environment (basically appending them). This is not the case with `cargo-make`, which will recognize dependencies and correctly resolve all values.\n\n###### Naive Implementation\n\n```\n--release=test\n    VAR1=\"\"\n--release=prod\n    VAR1=\"\"\n    VAR2=2\n--release=devel\n    VAR1=\"\"\n    VAR2=3\n```\n\n###### `cargo-make` Implementation\n\n```\n--release=test\n    VAR1=\"\"\n--release=prod\n    VAR1=\"2\"\n    VAR2=2\n--release=devel\n    VAR1=\"3\"\n    VAR2=3\n```\n\n<a name=\"usage-env-global\"></a>\n#### Global\nIn addition to manually setting environment variables, cargo-make will also automatically add a few environment variables, which can be helpful when running task scripts, commands, conditions, and more.\n\n* **`CARGO_MAKE`** - Set to \"true\" to help sub-processes identify they are running from `cargo` make.\n* **`CARGO_MAKE_TASK`** - Holds the name of the main task being executed.\n* **`CARGO_MAKE_TASK_ARGS`** - A list of arguments provided to cargo-make after the task name, separated with a ';' character.\n* **`CARGO_MAKE_CURRENT_TASK_NAME`** - Holds the currently executed task name.\n* **`CARGO_MAKE_CURRENT_TASK_INITIAL_MAKEFILE`** - Holds the full path to the makefile, which **initially** defined the currently executed task (not available for internal core tasks).\n* **`CARGO_MAKE_CURRENT_TASK_INITIAL_MAKEFILE_DIRECTORY`** - Holds the full path to the directory containing the makefile **initially** defined the currently executed task (not available for internal core tasks).\n* **`CARGO_MAKE_COMMAND`** - The command used to invoke cargo-make (for example: *cargo make* and *makers*)\n* **`CARGO_MAKE_WORKING_DIRECTORY`** - The current working directory (can be defined by setting the `--cwd` CLI option)\n* **`CARGO_MAKE_WORKSPACE_WORKING_DIRECTORY`** - The original working directory of the workspace. Enables workspace members access to the workspace level `CARGO_MAKE_WORKING_DIRECTORY`.\n* **`CARGO_MAKE_PROFILE`** - The current profile name in lower case (should not be manually modified by global/task env blocks)\n* **`CARGO_MAKE_ADDITIONAL_PROFILES`** - The additional profile names in lower case, separated with a `;` character (should not be manually modified by global/task env blocks)\n* **`CARGO_MAKE_PROJECT_NAME`** - For standalone crates, this will be the same as `CARGO_MAKE_CRATE_NAME`, and for workspace, it will default to the working directory basename.\n* **`CARGO_MAKE_PROJECT_VERSION`** For standalone crates, this will be the same as `CARGO_MAKE_CRATE_VERSION`, and for workspaces, it will be the main crate version (main crate defined by the optional **main_project_member** attribute in the config section).\n* **`CARGO_MAKE_CARGO_HOME`** - The path to `CARGO_HOME` as described in the [cargo documentation](https://doc.rust-lang.org/cargo/guide/cargo-home.html)\n* **`CARGO_MAKE_CARGO_PROFILE`** - The [cargo profile](https://doc.rust-lang.org/cargo/reference/manifest.html#the-profile-sections) name mapped from the **`CARGO_MAKE_PROFILE`** (unmapped value will default to `CARGO_MAKE_PROFILE` value)\n* **`CARGO_MAKE_RUST_VERSION`** - The rust version (for example 1.20.0)\n* **`CARGO_MAKE_RUST_CHANNEL`** - Rust channel (stable, beta, nightly)\n* **`CARGO_MAKE_RUST_TARGET_ARCH`** - x86, x86_64, arm, etc ... (see rust cfg feature)\n* **`CARGO_MAKE_RUST_TARGET_ENV`** - gnu, msvc, etc ... (see rust cfg feature)\n* **`CARGO_MAKE_RUST_TARGET_OS`** - Windows, macOS, iOS, Linux, Android, etc. ... (see rust cfg feature)\n* **`CARGO_MAKE_RUST_TARGET_POINTER_WIDTH`** - 32, 64\n* **`CARGO_MAKE_RUST_TARGET_VENDOR`** - apple, pc, unknown\n* **`CARGO_MAKE_RUST_TARGET_TRIPLE`** - x86_64-unknown-linux-gnu, x86_64-apple-darwin, x86_64-pc-windows-msvc, etc ...\n* **`CARGO_MAKE_CRATE_TARGET_DIRECTORY`** - Gets target directory where cargo stores the output of a build, respects `${CARGO_TARGET_DIR}`, `.cargo/config.toml`'s and `${CARGO_HOME}/config.toml`, but not `--target-dir` command-line flag.\n* **`CARGO_MAKE_CRATE_CUSTOM_TRIPLE_TARGET_DIRECTORY`** - Like `CARGO_MAKE_CRATE_TARGET_DIRECTORY` but respects `build.target` in `.cargo/config.toml`.\n* **`CARGO_MAKE_CRATE_HAS_DEPENDENCIES`** - Holds `true`/`false` based if there are dependencies defined in the `Cargo.toml` or not (defined as *false* if no `Cargo.toml` is found)\n* **`CARGO_MAKE_CRATE_IS_WORKSPACE`** - Holds `true`/`false` based if this is a workspace crate or not (defined even if no `Cargo.toml` is found)\n* **`CARGO_MAKE_CRATE_WORKSPACE_MEMBERS`** - Holds a list of member paths (defined as empty value if no `Cargo.toml` is found)\n* **`CARGO_MAKE_CRATE_CURRENT_WORKSPACE_MEMBER`** - Holds the name of the current workspace member being built (only if flow started as a workspace level flow)\n* **`CARGO_MAKE_CRATE_LOCK_FILE_EXISTS`** - Holds `true`/`false` if a `Cargo.lock` file exists in the current working directory (in workspace projects, each member has a different working directory).\n* **`CARGO_MAKE_CRATE_TARGET_TRIPLE`** - Gets target triple that will be build with by default, respects `.cargo/config.toml` and `${CARGO_HOME}/config.toml`.\n* **`CARGO_MAKE_WORKSPACE_PACKAGE_NAME`** - Holds the root package name of the workspace from the `Cargo.toml` file in the current working directory.\n* **`CARGO_MAKE_WORKSPACE_PACKAGE_VERSION`** - Holds the root package version of the workspace from the `Cargo.toml` file in the current working directory.\n* **`CARGO_MAKE_WORKSPACE_PACKAGE_DESCRIPTION`** - Holds the root package description of the workspace from the `Cargo.toml` file in the current working directory.\n* **`CARGO_MAKE_WORKSPACE_PACKAGE_LICENSE`** - Holds the root package license of the workspace from the `Cargo.toml` file in the current working directory.\n* **`CARGO_MAKE_WORKSPACE_PACKAGE_DOCUMENTATION`** - Holds the root package documentation link of the workspace from the `Cargo.toml` file in the current working directory.\n* **`CARGO_MAKE_WORKSPACE_PACKAGE_HOMEPAGE`** - Holds the root package homepage link of the workspace from the `Cargo.toml` file in the current working directory.\n* **`CARGO_MAKE_WORKSPACE_PACKAGE_REPOSITORY`** - Holds the root package repository link of the workspace from the `Cargo.toml` file in the current working directory.\n* **`CARGO_MAKE_CI`** - Holds `true`/`false` if the task runs in a continuous integration system (such as Travis CI).\n* **`CARGO_MAKE_PR`** - Holds `true`/`false` if the task runs in a continuous integration system (such as Travis CI) as part of a pull request build (unknown is set as false).\n* **`CARGO_MAKE_CI_BRANCH_NAME`** - Holds the continuous integration branch name (if available).\n* **`CARGO_MAKE_CI_VENDOR`** - Holds the continuous integration vendor name (if available).\n* **`CARGO_MAKE_DUCKSCRIPT_VERSION`** - The embedded `duckscript` runtime version.\n* **`CARGO_MAKE_DUCKSCRIPT_SDK_VERSION`** - The embedded `duckscript` SDK version.\n\nThe following environment variables will be set by cargo-make if `Cargo.toml` file exists and the relevant value is defined:\n\n* **`CARGO_MAKE_CRATE_NAME`** - Holds the crate name from the `Cargo.toml` file in the current working directory.\n* **`CARGO_MAKE_CRATE_FS_NAME`** - Same as `CARGO_MAKE_CRATE_NAME` however some characters are replaced (for example '-' to '_').\n* **`CARGO_MAKE_CRATE_VERSION`** - Holds the crate version from the `Cargo.toml` file found in the current working directory.\n* **`CARGO_MAKE_CRATE_DESCRIPTION`** - Holds the crate description from the `Cargo.toml` file in the current working directory.\n* **`CARGO_MAKE_CRATE_LICENSE`** - Holds the crate license from the `Cargo.toml` file in the current working directory.\n* **`CARGO_MAKE_CRATE_DOCUMENTATION`** - Holds the crate documentation link from the `Cargo.toml` file in the current working directory.\n* **`CARGO_MAKE_CRATE_HOMEPAGE`** - Holds the crate homepage link from the `Cargo.toml` file in the current working directory.\n* **`CARGO_MAKE_CRATE_REPOSITORY`** - Holds the crate repository link from the `Cargo.toml` file in the current working directory.\n\nThe following environment variables will be set by cargo-make if the project is part of a git repo:\n\n* **`CARGO_MAKE_GIT_BRANCH`** - The current branch name.\n* **`CARGO_MAKE_GIT_USER_NAME`** - The user name pulled from the git config user.name key.\n* **`CARGO_MAKE_GIT_USER_EMAIL`** - The user email, which was taken from the git config `user.email` key.\n* **`CARGO_MAKE_GIT_HEAD_LAST_COMMIT_HASH`** - The last HEAD commit hash.\n* **`CARGO_MAKE_GIT_HEAD_LAST_COMMIT_HASH_PREFIX`** - The last HEAD commit hash prefix.\n\n<a name=\"usage-setting-up-working-directory\"></a>\n### Setting Up Working Directory\nTo modify the current working directory for a specific task (not entire run), use the **cwd** attribute.<br>\nFor example:\n\n```toml\n[tasks.move-dir]\ncwd = \"./mysubdir/\"\n```\n\n<a name=\"usage-ignoring-errors\"></a>\n### Ignoring Errors\nIn some cases you want to run optional tasks as part of a bigger flow, but do not want to break your entire build in case of any error in those optional tasks.<br>\nFor those tasks, you can add the **ignore_errors=true** attribute.\n\n```toml\n[tasks.unstable_task]\nignore_errors = true\n```\n\n<a name=\"usage-conditions\"></a>\n### Conditions\nConditions allow you to evaluate at runtime if to run a specific task or not.<br>\nThese conditions are evaluated before the task is running its installation and/or commands and if the condition is not fulfilled, the task will not be invoked.<br>\nThe task dependencies however are not affected by parent task condition outcome.\n\nThere are two types of conditions:\n\n* [Criteria](#usage-conditions-structure)\n* [Scripts](#usage-conditions-script)\n\nThe task runner will evaluate any condition defined and a task definition may contain both types at the same time.\n\n<a name=\"usage-conditions-structure\"></a>\n#### Criteria\nThe condition attribute may define multiple parameters to validate.<br>\nAll defined parameters must be valid for the condition as a whole to be true and enable the task to run.\n\nBelow is an example of a condition definition that checks that we are running on Windows or Linux (but not macOS) and that we are running on beta or nightly (but not stable):\n\n```toml\n[tasks.test-condition]\ncondition = { platforms = [\"windows\", \"linux\"], channels = [\"beta\", \"nightly\"] }\nscript = '''\necho \"condition was met\"\n'''\n```\n\nThe following condition types are available:\n\n* **profile** - See [profiles](#usage-profiles) for more info\n* **os** - List of OS names (Windows, macOS, iOS, Linux, Android, etc... as defined by cfg!(target_os))\n* **platforms** - List of platform names (windows, linux, mac)\n* **channels** - List of rust channels (stable, beta, nightly)\n* **env_set** - List of environment variables that must be defined\n* **env_not_set** - List of environment variables that must not be defined\n* **env_true** - List of environment variables that must be defined and must not be set to any of the following (case insensitive): false, no, 0 or empty\n* **env_false** - List of environment variables that must be defined and set to any of the following (case insensitive): false, no, 0 or empty\n* **env** - Map of environment variables that must be defined and equal to the provided values\n* **env_contains** - Map of environment variables that must be defined and contain (case insensitive) the provided values\n* **rust_version** - Optional definition of min, max, and/or specific rust version\n* **files_exist** - List of absolute path files to check they exist. Environment substitution is supported so you can define relative paths such as **`${CARGO_MAKE_WORKING_DIRECTORY}/Cargo.toml`**\n* **files_not_exist** - List of absolute path files to check they do not exist. Environment substitution is supported so you can define relative paths such as **`${CARGO_MAKE_WORKING_DIRECTORY}/Cargo.toml`**\n* **files_modified** - Lists input and output globs. If any input file is newer than all output files, the condition is met. Environment substitution is supported so you can define relative paths such as **`${CARGO_MAKE_WORKING_DIRECTORY}/Cargo.toml`**\n\nFew examples:\n\n```toml\n[tasks.test-condition]\ncondition = {\n    profiles = [\"development\", \"production\"],\n    platforms = [\"windows\", \"linux\"],\n    channels = [\"beta\", \"nightly\"],\n    env_set = [ \"CARGO_MAKE_KCOV_VERSION\" ],\n    env_not_set = [ \"CARGO_MAKE_SKIP_CODECOV\" ],\n    env = { \"CARGO_MAKE_CI\" = true, \"CARGO_MAKE_RUN_CODECOV\" = true },\n    rust_version = { min = \"1.20.0\", max = \"1.30.0\" },\n    files_exist = [\"${CARGO_MAKE_WORKING_DIRECTORY}/Cargo.toml\"],\n    files_not_exist = [\"${CARGO_MAKE_WORKING_DIRECTORY}/Cargo2.toml\"],\n    files_modified = { input = [\"${CARGO_MAKE_WORKING_DIRECTORY}/Cargo.toml\", \"./src/**/*.rs\"], output = [\"./target/**/myapp*\"] }\n}\n```\n\nTo setup a custom failure message, use the **fail_message** inside the condition object, for example:\n\n```toml\n[tasks.test-condition-with-message]\ncondition = { platforms = [\"windows\"], fail_message = \"Condition Failed.\" }\ncommand = \"echo\"\nargs = [\"condition was met\"]\n```\n\nFail messages are only printed if log level is verbose or reduce output flag is set to false in the config as follows:\n\n```toml\n[config]\nreduce_output = false\n```\n\n<a name=\"usage-conditions-script\"></a>\n#### Scripts\nThese script are invoked before the task is running its installation and/or commands and if the exit code of the condition script is non zero, the task will not be invoked.\n\nBelow is an example of a condition script that always returns a non zero value, in which case the command is never executed:\n\n```toml\n[tasks.never]\ncondition_script = \"\"\"\nexit 1\n\"\"\"\ncommand = \"cargo\"\nargs = [\"build\"]\n```\n\nCondition scripts can be used to ensure that the task is only invoked if a specific condition is met, for example if a specific 3rd party is installed.\n\nTo setup a custom failure message, use the **fail_message** inside the condition object, for example:\n\n```toml\n[tasks.test-condition-script-with-message]\ncondition = { fail_message = \"Condition Script Failed.\" }\ncondition_script = [\n    \"exit 1\"\n]\ncommand = \"echo\"\nargs = [\"condition was met\"]\n```\n\n<a name=\"usage-conditions-and-or\"></a>\n#### And/Or/Group Or\n\nBy default all conditions groups and all conditions inside each group are evaluated and an 'AND' is used to validate everything is as requested.<br>\nHowever, there are other condition types available:\n\n* Or - All groups and all conditions inside each group are searched for a single condition that is met\n* GroupOr - All conditions in each group are searched for a single condition that is met but all condition groups must pass.\n\nSimply add the condition_type with any of these values inside the condition object.<br>\nFor example:\n\n```\n[tasks.test-or-condition]\ncondition = { condition_type = \"Or\", env_true = [\n  \"TRUE_ENV\",\n  \"FALSE_ENV\",\n], env_false = [\n  \"TRUE_ENV\",\n  \"FALSE_ENV\",\n] }\nscript = '''\necho \"condition was met\"\n'''\n```\n\n<a name=\"usage-conditions-and-subtasks\"></a>\n#### Combining Conditions and Sub Tasks\n\nConditions and run_task combined can enable you to define a conditional sub flow.<br>\nFor example, if you have a coverage flow that should only be invoked on linux in a CI build, and only if the `CARGO_MAKE_RUN_CODECOV` environment variable is defined as \"true\":\n\n```toml\n[tasks.ci-coverage-flow]\ndescription = \"Runs the coverage flow and uploads the results to codecov.\"\ncondition = { platforms = [\"linux\"], env = { \"CARGO_MAKE_CI\" = true, \"CARGO_MAKE_RUN_CODECOV\" = true } }\nrun_task = \"codecov-flow\"\n\n[tasks.codecov-flow]\ndescription = \"Runs the full coverage flow and uploads the results to codecov.\"\nwindows_alias = \"empty\"\ndependencies = [\n    \"coverage-flow\",\n    \"codecov\"\n]\n```\n\nThe first task **ci-coverage-flow** defines the condition that checks we are on linux, running as part of a CI build and the `CARGO_MAKE_RUN_CODECOV` environment variable is set to \"true\".<br>\nOnly if all conditions are met, it will run the **codecov-flow** task.<br>\nWe can't define the condition directly on the **codecov-flow** task, as it will invoke the task dependencies before checking the condition.\n\n<a name=\"usage-running-tasks-only-if-sources-changed\"></a>\n#### Running Tasks Only If Sources Changed\n\nThe **files_modified** condition enables tasks to be skipped based on file modifications timestamp.<br>\nThe condition will cause the task to be skipped if no input file was found to be newer then any of the files in the output.<br>\nThe input and output are defined as arrays of **globs** (not regex) of files to check.<br>\nIn the below example, if the target binaries are newer then the Cargo.toml or any of the rust sources in the src directory, it will not run cargo build command.\n\n```toml\n[tasks.compile-if-modified]\ncondition = { files_modified = { input = [\"${CARGO_MAKE_WORKING_DIRECTORY}/Cargo.toml\", \"./src/**/*.rs\"], output = [\"./target/**/myapp*\"] } }\ncommand = \"cargo\"\nargs = [\"build\"]\n```\n\n<a name=\"usage-installing-dependencies\"></a>\n### Installing Dependencies\n\nSome tasks will require third party crates, rustup components, or other native tools.<br>\ncargo-make provides multiple ways to setup those dependencies before running the task.\n\n* [Cargo Plugins](#usage-installing-cargo-plugins)\n* [Crates](#usage-installing-crates)\n* [Rustup Components](#usage-installing-rustup-components)\n* [Native Dependencies](#usage-installing-native-dependencies)\n* [Defining Version](#usage-installing-version)\n* [Global Lock Of Versions](#usage-installing-locked)\n* [Installation Priorities](#usage-installing-dependencies-priorities)\n* [Multiple Installations](#usage-installing-dependencies-multiple)\n\n<a name=\"usage-installing-cargo-plugins\"></a>\n#### Cargo Plugins\n\nWhen a task invokes a cargo plugin using the **command** attribute, for example:\n\n```toml\n[tasks.audit]\ncommand = \"cargo\"\nargs = [\"audit\"]\n```\n\ncargo-make will first check the command is available.<br>\nOnly if the command is not available, it will attempt to install it by running **cargo install cargo-<first arg>**<br>\nIn case the cargo plugin has a different name, you can specify it manually via **install_crate** attribute.<br>\nYou can specify additional installation arguments using the **install_crate_args** attribute (for example: version).\n\nTo disable the automatic crate installation, you can set the **install_crate** attribute as false, for example:\n\n```toml\n[tasks.test]\ncommand = \"cargo\"\nargs = [\"test\"]\ninstall_crate = false\n```\n\n<a name=\"usage-installing-crates\"></a>\n#### Crates\n\ncargo-make can verify third party crates are installed if the relevant installation info is provided.<br>\nFirst it will check the crate is installed, and only if not available it will attempt to install it.<br>\nInstallation of third party crates is first done via rustup if the component name is provided.<br>\nIf rustup failed or component name is not provided, it will resort to using cargo install command.<br>\nFor example:\n\n```toml\n[tasks.rustfmt]\ninstall_crate = { crate_name = \"rustfmt-nightly\", rustup_component_name = \"rustfmt-preview\", binary = \"rustfmt\", test_arg = \"--help\" }\ncommand = \"rustfmt\"\n```\n\nIn this example, cargo will first test that the command **rustfmt --help** works well and only if fails, it will first attempt\nto install via rustup the component **rustfmt-preview** and if failed, it will try to run cargo install for the crate name **rustfmt-nightly**.\n\nIf passing multiple arguments is necessary, `test_arg` may contain an array of arguments. For example:\n\n```toml\n[tasks.doc-upload]\ninstall_crate = { crate_name = \"cargo-travis\", binary = \"cargo\", test_arg = [\"doc-upload\", \"--help\"] }\ncommand = \"cargo\"\nargs = [\"doc-upload\"]\n```\n\nIn this example, cargo-make will test the presence of cargo-travis by running the command `cargo doc-upload --help`, and\ninstall the crate only if this command fails.\n\n<a name=\"usage-installing-rustup-components\"></a>\n#### Rustup Components\n\nRustup components that are not deployed as crates or components which are pure sources (no executable binary), can also be installed via cargo-make.<br>\nThe following example show how to install a rustup component with binaries:\n\n```toml\n[tasks.install-rls]\ninstall_crate = { rustup_component_name = \"rls-preview\", binary = \"rls\", test_arg = \"--help\" }\n```\n\nIn this example, cargo-make will first check if **rls** binary is available and only if failed to execute it, it will\ninstall the **rls** component using rustup.<br>\n<br>\nSome rustup components are pure sources and therefore in those cases, cargo-make cannot verify that they are already installed, and\nwill attempt to install them every time.<br>\nExample:\n\n```toml\n[tasks.install-rust-src]\ninstall_crate = { rustup_component_name = \"rust-src\" }\n```\n\n<a name=\"usage-installing-native-dependencies\"></a>\n#### Native Dependencies\n\nNative dependencies can also be installed, however it is up to the Makefile author to write the script which checks the dependency exists and if\nnot, to install it correctly.<br>\nThis is done by setting up an installation script in the **install_script** attribute of the task.<br>\nIt is possible to use platform overrides to specify different installation scripts for Linux/macOS/Windows platforms.<br>\nFor example:\n\n```toml\n[tasks.coverage-kcov]\nwindows_alias = \"empty\"\ninstall_script = '''\nKCOV_INSTALLATION_DIRECTORY=\"\"\nKCOV_BINARY_DIRECTORY=\"\"\nif [ -n \"CARGO_MAKE_KCOV_INSTALLATION_DIRECTORY\" ]; then\n    mkdir -p ${CARGO_MAKE_KCOV_INSTALLATION_DIRECTORY}\n    cd ${CARGO_MAKE_KCOV_INSTALLATION_DIRECTORY}\n    KCOV_INSTALLATION_DIRECTORY=\"$(pwd)/\"\n    cd -\n    echo \"Kcov Installation Directory: ${KCOV_INSTALLATION_DIRECTORY}\"\n    KCOV_BINARY_DIRECTORY=\"${KCOV_INSTALLATION_DIRECTORY}/build/src/\"\n    echo \"Kcov Binary Directory: ${KCOV_BINARY_DIRECTORY}\"\nfi\n\n# get help info to fetch all supported command line arguments\nKCOV_HELP_INFO=`${KCOV_BINARY_DIRECTORY}kcov --help` || true\n\n# check needed arguments are supported, else install\nif [[ $KCOV_HELP_INFO != *\"--include-pattern\"* ]] || [[ $KCOV_HELP_INFO != *\"--exclude-line\"* ]] || [[ $KCOV_HELP_INFO != *\"--exclude-region\"* ]]; then\n    # check we are on a supported platform\n    if [ \"$(grep -Ei 'debian|buntu|mint' /etc/*release)\" ]; then\n        echo \"Installing/Upgrading kcov...\"\n        sudo apt-get update || true\n        sudo apt-get install -y libcurl4-openssl-dev libelf-dev libdw-dev cmake gcc binutils-dev\n\n        mkdir -p ${CARGO_MAKE_KCOV_DOWNLOAD_DIRECTORY}\n        cd ${CARGO_MAKE_KCOV_DOWNLOAD_DIRECTORY}\n        KCOV_DOWNLOAD_DIRECTORY=$(pwd)\n\n        wget https://github.com/SimonKagstrom/kcov/archive/v${CARGO_MAKE_KCOV_VERSION}.zip\n        unzip v${CARGO_MAKE_KCOV_VERSION}.zip\n        cd kcov-${CARGO_MAKE_KCOV_VERSION}\n        mkdir -p build\n        cd ./build\n        cmake ..\n        make\n\n        # if custom installation directory, leave kcov as local\n        if [ -n \"CARGO_MAKE_KCOV_INSTALLATION_DIRECTORY\" ]; then\n            cd ${KCOV_DOWNLOAD_DIRECTORY}/kcov-${CARGO_MAKE_KCOV_VERSION}\n            mv ./* ${KCOV_INSTALLATION_DIRECTORY}\n        else\n            sudo make install\n            cd ../..\n            rm -rf kcov-${CARGO_MAKE_KCOV_VERSION}\n        fi\n    fi\nfi\n'''\n```\n\nThis task checks if kcov is installed; if not, it will install it and any other dependency it requires.\n\n<a name=\"usage-installing-version\"></a>\n#### Defining Version\n\nIt is possible to define minimal version of depended crates, for example:\n\n```toml\n[tasks.simple-example]\ninstall_crate = { min_version = \"0.0.1\" }\ncommand = \"cargo\"\nargs = [\"make\", \"--version\"]\n\n[tasks.complex-example]\ninstall_crate = { crate_name = \"cargo-make\", binary = \"cargo\", test_arg = [\"make\", \"--version\"], min_version = \"0.0.1\" }\ncommand = \"cargo\"\nargs = [\"make\", \"--version\"]\n```\n\nThis ensures we are using a crate version that supports the feature we require for the build.<br>\nCurrently there are few limitations when defining **min_version**:\n\n* Specifying **toolchain** in the task or **rustup_component_name** in the install_crate structure, will make cargo-make ignore the min version value.\n* In case cargo-make is unable to detect the currently installed version due to any error, cargo-make will assume the version is valid and printout a warning.\n\nIf you want to ensure a specific version is used, you can define the **version** attribute instead, for example:\n\n```toml\n[tasks.complex-example]\ninstall_crate = { crate_name = \"cargo-make\", binary = \"cargo\", test_arg = [\"make\", \"--version\"], version = \"0.0.1\" }\ncommand = \"cargo\"\nargs = [\"make\", \"--version\"]\n```\n\n<a name=\"usage-installing-locked\"></a>\n#### Global Lock Of Versions\n\nIn case [min_version](#usage-installing-version) is defined,\nyou can have the **--locked** flag automatically added to the crate installation command\nby defining the **`CARGO_MAKE_CRATE_INSTALLATION_LOCKED`=true** environment variable.\nIf version is defined instead of min_version, this will automatically be set as true.\n\n<a name=\"usage-installing-alternate-cargo-install-commands\"></a>\n#### Alternate Cargo Install Commands\n\nYou can specify a different cargo install command in order to make the crate installation to use some custom cargo installer plugin.\nFor example, if you want to use instead of **install** a plugin such as **local-install** simply add the **install_command** attribute with the relevant value.<br>\nFor example:\n\n```toml\n[tasks.alt-command-example1]\ninstall_crate = { install_command = \"custom-install\" }\ncommand = \"cargo\"\nargs = [\"somecrate\"]\n\n[tasks.alt-command-example2]\ninstall_crate = { crate_name = \"somecrate\", install_command = \"custom-install\" }\n```\n\nBy default, the **--force** flag is added. In order to remove it, add the force=false to the install_crate definition as follows:\n\n```toml\n[tasks.alt-command-example2]\ninstall_crate = { crate_name = \"somecrate\", install_command = \"custom-install\", force = false }\n```\n\n<a name=\"usage-installing-dependencies-priorities\"></a>\n### Installation Priorities\n\nOnly one type of installation will be invoked per task.<br>\nThe following defines the installation types sorted by priority for which cargo-make uses to decide which installation flow to invoke:\n\n* **install_crate** - Enables to install crates and rustup components.\n* **install_script** - Custom script which can be used to install or run anything that is needed by the task command.\n* **automatic cargo plugin** - In case the command is **cargo**, cargo-make will check which cargo plugin to automatically install (if needed).\n\nIn case multiple installation types are defined (for example both install_crate and install_script), only one installation type will be invoked based on the above priority list.\n\n<a name=\"usage-installing-dependencies-multiple\"></a>\n### Multiple Installations\n\nIn some cases, tasks require multiple items installed in order to run properly.<br>\nFor example, you might need rustup component **rls** and **rust-src** and cargo plugin **cargo-xbuild** at the same task.<br>\nIn order to achieve this, you can split the task to invocation task and installation task and set the installation task as a dependency.<br>\nThe following example defines a flow of two similar tasks that have the same dependencies: cargo-xbuild crate, rls rustup binary component and rust-src rustup sources only component.<br>\nYou can have both rustup dependencies as an installation only tasks which are set as dependencies for the xbuild tasks.<br>\nSince dependencies are only invoked once, it will also ensure that those rustup components are not installed twice.\n\n```toml\n[tasks.install-rls]\n# install rls-preview only if needed\ninstall_crate = { rustup_component_name = \"rls-preview\", binary = \"rls\", test_arg = \"--help\" }\n\n[tasks.install-rust-src]\n# always install rust-src via rustup component add\ninstall_crate = { rustup_component_name = \"rust-src\" }\n\n[tasks.xbuild1]\n# run cargo xbuild, if xbuild is not installed, it will be automatically installed for you\ncommand = \"cargo\"\nargs = [ \"xbuild\", \"some arg\" ]\ndependencies = [ \"install-rls\", \"install-rust-src\" ]\n\n[tasks.xbuild2]\n# run cargo xbuild, if xbuild is not installed, it will be automatically installed for you\ncommand = \"cargo\"\nargs = [ \"xbuild\", \"another arg\" ]\ndependencies = [ \"install-rls\", \"install-rust-src\" ]\n\n[tasks.myflow]\ndependencies = [ \"xbuild1\", \"xbuild2\" ]\n```\n\n<a name=\"usage-workspace-support\"></a>\n### Workspace Support\nIn case cargo-make detects that the current working directory is a workspace root (A directory with `Cargo.toml` which defines a workspace and its members), it will not invoke the requested tasks in that directory.<br>\nInstead, it will generate a task definition in runtime which will go to each member directory and invoke the requested task on that member.<br>\nFor example if we have the following directory structure:\n\n```console\nworkspace\n├── Cargo.toml\n├── member1\n│   └── Cargo.toml\n└── member2\n    └── Cargo.toml\n```\n\nAnd we ran **cargo make mytask**, it will go to each workspace member directory and execute: **cargo make mytask** at that directory,\nwhere mytask is the original task that was requested on the workspace level.<br>\nThe order of the members is defined by the member attribute in the workspace `Cargo.toml`.\n\nThis flow is called a **workspace** flow, as it identifies the workspace and handles the request for each workspace member, while the root directory which defines the workspace structure is ignored.\n\nWe can use this capability to run same functionality on all workspace member crates, for example if we want to format all crates, we can run in the workspace directory: **cargo make format**.<br>\n\nMember crate makefiles can also automatically extend the workspace directory makefile.<br>\nSee more info at the [relevant section.](#usage-workspace-extend)\n\n<a name=\"usage-workspace-disabling-workspace-support\"></a>\n#### Disabling Workspace Support\nIn case you wish to run the tasks on the workspace root directory and not on the members (for example generating a workspace level README file), use the **`--no-workspace`** CLI flag when running cargo make.<br>\nFor example:\n\n```sh\ncargo make --no-workspace mytask\n```\n\nThis makes cargo-make ignore that this directory is a workspace root, and just runs a simple flow as if this was a simple directory with a makefile.\n\nAnother way to call a task on the workspace level (rather than for each member) is to define that task in the workspace `Makefile.toml` with **workspace** set to false as follows:\n\n```toml\n[tasks.ignore-members]\nworkspace = false\n```\n\nSetting **workspace=false** for the task requested on the cargo-make command line is equivalent to calling it with the **--no-workspace** flag.<br>\nThis flag is only checked for the task on the cargo-make command line and is completely ignored for all other tasks which are executed as part of the flow.<br>\nBy default, the workspace flag for all tasks is set to true, but that can be configured differently in the config section as follows:\n\n```toml\n[config]\ndefault_to_workspace = false\n```\n\nIn which case, workspace level support is **always** disabled unless a task defines **workspace=true**.\n\n<a name=\"usage-workspace-composite-flow\"></a>\n#### Composite Flow\n\nYou can define a composite flow that runs tasks on both the workspace root directory and member directories.<br>\nThis is an example of a workspace level `Makefile.toml` which enables to run such a flow:\n\n```toml\n[tasks.composite]\ndependencies = [\"member_flow\", \"workspace_flow\"]\n\n[tasks.member_flow]\n# by forking, cargo make starts and by default detects it is a workspace and runs the member_task for each member\nrun_task = { name = \"member_task\", fork = true }\n\n[tasks.workspace_flow]\n#run some workspace level command or flow\n```\n\nYou can start this composite flow as follows:\n\n```sh\ncargo make --no-workspace composite\n```\n\n<a name=\"usage-workspace-profiles\"></a>\n#### Profiles\n\nYou can prevent profiles from being passed down to workspace members by setting **`CARGO_MAKE_USE_WORKSPACE_PROFILE`** to false:\n\n```toml\n[env]\nCARGO_MAKE_USE_WORKSPACE_PROFILE = false\n```\n\nSee more on profiles in the [profile section](#usage-profiles).\n\n<a name=\"usage-workspace-support-skip-include-members\"></a>\n#### Skipping/Including Specific Members\n\nIn most cases you will want to run a specific flow on all members, but in rare cases you will want to skip specific members.\n\nBy setting the **`CARGO_MAKE_WORKSPACE_SKIP_MEMBERS`** environment variable to hold the member names to skip (as an array), you can define if you want those members not to participate in the flow.\n\nIn the below example we will skip member3 and member4 (should be defined in the workspace level `Makefile.toml`):\n\n```toml\n[env]\nCARGO_MAKE_WORKSPACE_SKIP_MEMBERS = [\"member3\", \"member4\"]\n```\n\nYou can also define glob paths, for example:\n\n```toml\n[env]\nCARGO_MAKE_WORKSPACE_SKIP_MEMBERS = \"tools/*\"\n```\n\nHowever there are some cases you will want to skip specific members only if a specific condition is met.<br>\nFor example, you want to build a member module only if we are running on a rust nightly compiler.<br>\nThis is a simple example of a conditioned skip for member3 and member4 (should be defined in the workspace level `Makefile.toml`):\n\n```toml\n[tasks.workspace-task]\ncondition = { channels = [\"beta\", \"stable\"] }\nenv = { \"CARGO_MAKE_WORKSPACE_SKIP_MEMBERS\" = [\"member3\", \"member4\"] }\nrun_task = { name = \"member-task\", fork = true }\n```\n\nYou will have to invoke this as a composite flow:\n\n```sh\ncargo make workspace-task --no-workspace\n```\n\nIn addition you can also state the opposite, meaning which members to include via **`CARGO_MAKE_WORKSPACE_INCLUDE_MEMBERS`** environment variable.<br>\nIt follows the same rules as the **`CARGO_MAKE_WORKSPACE_SKIP_MEMBERS`** environment variable.<br>\nIf you define both, the included members will be a subset of the non excluded members, meaning both filters will apply.\n\n<a name=\"usage-workspace-emulation\"></a>\n#### Workspace Emulation\nWorkspace emulation enables you to create a workspace like structure for your project without actually defining a rust workspace.<br>\nThis means you can have a project directory without a `Cargo.toml` and have many child crates.<br>\nThis enables to run cargo make on all **member** crates while on the root project folder without having the need of an actual cargo workspace which has some side effects (such as shared target folder and dependencies).\n\nIn order to setup the workspace emulation, you will need to define the following in your workspace level `Makefile.toml`:\n\n```toml\n[env]\n# this tells cargo-make that this directory acts as a workspace root\nCARGO_MAKE_WORKSPACE_EMULATION = true\n\n# a list of crate members. since we do not have a Cargo.toml, we will need to specify this in here.\nCARGO_MAKE_CRATE_WORKSPACE_MEMBERS = [\n    \"member1\",\n    \"member2\"\n]\n```\n\n<a name=\"usage-toolchain\"></a>\n### Toolchain\ncargo-make supports setting the toolchain to be used when invoking commands and installing rust dependencies by setting\nthe **toolchain** attribute as part of the task definition.<br>\nThe following example shows how to print both stable and nightly rustc versions currently installed:\n\n```toml\n[tasks.rustc-version-stable]\ntoolchain = \"stable\"\ncommand = \"rustc\"\nargs = [ \"--version\" ]\n\n[tasks.rustc-version-nightly]\ntoolchain = \"nightly\"\ncommand = \"rustc\"\nargs = [ \"--version\" ]\n\n[tasks.rustc-version-flow]\ndependencies = [\n    \"rustc-version-stable\",\n    \"rustc-version-nightly\"\n]\n```\n\nAn example output of the above **rustc-version-flow** is:\n\n```console\n[cargo-make] INFO - Task: rustc-version-flow\n[cargo-make] INFO - Setting Up Env.\n[cargo-make] INFO - Running Task: init\n[cargo-make] INFO - Running Task: rustc-version-stable\n[cargo-make] INFO - Execute Command: \"rustup\" \"run\" \"stable\" \"rustc\" \"--version\"\nrustc 1.30.1 (1433507eb 2018-11-07)\n[cargo-make] INFO - Running Task: rustc-version-nightly\n[cargo-make] INFO - Execute Command: \"rustup\" \"run\" \"nightly\" \"rustc\" \"--version\"\nrustc 1.32.0-nightly (451987d86 2018-11-01)\n[cargo-make] INFO - Running Task: rustc-version-flow\n[cargo-make] INFO - Running Task: end\n[cargo-make] INFO - Build Done  in 2 seconds.\n```\n\nWhen defined with scripts (as opposed to commands), the **`CARGO`** environment variable will be defined for the requested toolchain.<br>\nThe following example shows how to print both stable and nightly CARGO binary paths:\n\n```toml\n[tasks.echo-cargo-stable]\ntoolchain = \"stable\"\nscript = '''\necho ${CARGO}\n'''\n\n[tasks.echo-cargo-nightly]\ntoolchain = \"nightly\"\nscript = '''\necho ${CARGO}\n'''\n\n[tasks.echo-cargo-all]\ndependencies = [\"echo-cargo-stable\", \"echo-cargo-nightly\"]\n```\n\nAn example output of the above **echo-cargo-all** is:\n\n```console\n[cargo-make] INFO - Task: echo-cargo-all\n[cargo-make] INFO - Profile: development\n[cargo-make] INFO - Running Task: legacy-migration\n[cargo-make] INFO - Running Task: echo-cargo-stable\n/home/someuser/.rustup/toolchains/stable-armv7-unknown-linux-gnueabihf/bin/cargo\n[cargo-make] INFO - Running Task: echo-cargo-nightly\n/home/someuser/.rustup/toolchains/nightly-armv7-unknown-linux-gnueabihf/bin/cargo\n[cargo-make] INFO - Build Done in 4.44 seconds.\n```\n\nIt's also possible to assert a minimum required version of rustc with a channel. This can help\nto document required compiler features and to remind developers to upgrade their installation.\n\n```toml\n[tasks.requires-stable-edition-2021]\ntoolchain = { channel = \"stable\", min_version = \"1.56\" }\ncommand = \"rustc\"\nargs = [\"--version\"]\n```\n\nThe task will fail when the toolchain is either not installed or the existing version is smaller\nthan the specified **min_version**.\n\n<a name=\"usage-init-end-tasks\"></a>\n### Init and End tasks\nEvery task or flow that is executed by the cargo-make has additional 2 tasks.<br>\nAn init task that gets invoked at the start of all flows and end task that is invoked at the end of all flows.<br>\nThe names of the init and end tasks are defined in the config section in the toml file, the below shows the default settings:\n\n```toml\n[config]\ninit_task = \"init\"\nend_task = \"end\"\n\n[tasks.init]\n\n[tasks.end]\n```\n\nBy default the init and end tasks are empty and can be modified by external toml files or you can simply change the names of the init and end tasks in the external toml files to point to different tasks.<br>\nThese tasks allow common actions to be invoked no matter what flow you are running.\n\nImportant to mention that init and end tasks invocation is different than other tasks.\n\n* Aliases and dependencies are ignored\n* If the same task is defined in the executed flow, those tasks will be invoked multiple times\n\nTherefore it is not recommended to use the init/end tasks also inside your flows.\n\n<a name=\"usage-catching-errors\"></a>\n### Catching Errors\nBy default any error in any task that does not have **ignore_errors=true** set to it, will cause the entire flow to fail.<br>\nHowever, there are scenarios in which you would like to run some sort of cleanups before the failed flow finishes.<br>\ncargo make enables you to define an **on error** task which will only be invoked in case the flow failed.<br>\nIn order to define this special task you must add the **on_error_task** attribute in the **config** section in your Makefile and point it to your task, for example:\n\n```toml\n[config]\non_error_task = \"catch\"\n\n[tasks.catch]\nscript = '''\necho \"Doing cleanups in catch\"\n'''\n```\n\n<a name=\"usage-cargo-alias-tasks\"></a>\n### Cargo Alias Tasks\n\n[Cargo alias commands](https://doc.rust-lang.org/cargo/reference/config.html#alias) can be automatically loaded as cargo-make tasks.<br>\nTo automatically loading them, the following must be defined in the `Makefile.toml` config section:\n\n```toml\n[config]\nload_cargo_aliases = true\n```\n\nEach alias defined in the config.toml will be loaded as a task with the same name as the alias.<Br>\nIn case a task with that name already exists, it will be ignored.<br>\nThe task definition will simply call cargo and the alias value, therefore no automatic cargo plugin installation will be invoked.\n\n<a name=\"usage-profiles\"></a>\n### Profiles\n\nProfiles are a useful tool used to define custom behaviour.<br>\nIn order to set the execution profile, use the **`--profile`** or **`-p`** CLI argument and provide the profile name.<br>\nProfile names are automatically converted to underscores and are trimmed.<br>\nIf no profile name is provided, the profile will be defaulted to **development**.\n\nExample Setting Profile:\n\n```sh\ncargo make --profile production mytask\n```\n\nProfiles provide multiple capabilities:\n\n* [Environment variables](#usage-profiles-env) overrides\n* [Conditions by profiles](#usage-profiles-conditions), for example:\n```toml\ncondition = { profiles = [\"development\", \"production\"] }\n```\n* [New environment variable](#usage-env-global) **`CARGO_MAKE_PROFILE`** which holds the profile name and can be used by conditions, scripts and commands.\n\nIt is possible to activate multiple profiles simultaneously using **additional_profiles**, but these have limited support.<br>\nThe default profile (if not provided via command line) is `\"development\"`.<br>\nHowever, this can be overridden by setting the `CARGO_MAKE_DEFAULT_PROFILE` environment variable.\n\n```toml\n[config]\nadditional_profiles = [\"second_profile\", \"another_profile\"]\n```\n\nAdditional profiles can be used to define additional environment blocks and they will be defined in a new environment variable **`CARGO_MAKE_ADDITIONAL_PROFILES`**\n\n<a name=\"usage-profiles-env\"></a>\n#### Environment Variables\n\nProfiles enable you to define a new subset of environment variables that will only be set in runtime if the current profile matches the env profile.\n\n```toml\n[env]\nRUST_BACKTRACE = \"1\"\nEVALUATED_VAR = { script = [\"echo SOME VALUE\"] }\nTEST1 = \"value1\"\nTEST2 = \"value2\"\nCOMPOSITE = \"${TEST1} ${TEST2}\"\n\n# profile based environment override\n[env.development]\nDEV = true\n\n[env.production]\nPROD = true\n```\n\nFor example, given the following makefile with 2 profile-based env maps:\n\n```toml\n[env]\nCOMMON = \"COMMON\"\nPROFILE_NAME = \"${CARGO_MAKE_PROFILE}\"\n\n[env.development]\nIS_DEV = true\nIS_PROD = false\n\n[env.production]\nIS_DEV = false\nIS_PROD = true\n\n[tasks.echo]\nscript = [\n'''\necho COMMON: ${COMMON}\necho PROFILE_NAME: ${PROFILE_NAME}\necho IS_DEV: ${IS_DEV}\necho IS_PROD: ${IS_PROD}\n'''\n]\n```\n\nWe run the **echo** task with **production** profile as follows:\n\n```sh\ncargo make --cwd ./examples --makefile profile.toml --profile production echo\n```\n\nOutput:\n\n```console\n[cargo-make] INFO - cargo make 0.37.23\n[cargo-make] INFO - Build File: profile.toml\n[cargo-make] INFO - Task: echo\n[cargo-make] INFO - Profile: production\n[cargo-make] INFO - Setting Up Env.\n[cargo-make] INFO - Running Task: init\n[cargo-make] INFO - Running Task: echo\n+ cd /media/devhdd/projects/rust/cargo-make/examples\n+ echo COMMON: COMMON\nCOMMON: COMMON\n+ echo PROFILE_NAME: production\nPROFILE_NAME: production\n+ echo IS_DEV: FALSE\nIS_DEV: FALSE\n+ echo IS_PROD: TRUE\nIS_PROD: TRUE\n[cargo-make] INFO - Running Task: end\n[cargo-make] INFO - Build Done  in 0 seconds.\n```\n\nEnv files also can be filtered based on profile using the **profile** attribute as follows:\n\n```toml\nenv_files = [\n    { path = \"./development.env\", profile = \"development\" },\n    { path = \"./production.env\", profile = \"production\" },\n    { path = \"./env.env\" }\n]\n```\n\nAdditional profiles defined in the config section will also result in additional env blocks/files to be loaded, for example:\n\n```toml\nenv_files = [\n    { path = \"./second.env\", profile = \"second_profile\" },\n    { path = \"./another.env\", profile = \"another_profile\" }\n]\n\n[config]\nadditional_profiles = [\"second_profile\", \"another_profile\"]\n\n[env.second_profile]\nIS_SECOND_AVAILABLE = true\n\n[env.another_profile]\nIS_OTHER_AVAILABLE = true\n```\n\nThis could be quite handy in having environment variable blocks which will enable/disable specific tasks.\n\n<a name=\"usage-profiles-conditions\"></a>\n#### Conditions\n\n[Conditions](#usage-conditions) enable you to trigger/skip tasks.<br>\nConditions have built in support for profiles, so you can trigger/skip tasks based on the profile name.\n\nExample:\n\n```toml\n[tasks.echo-development]\ncondition = { profiles = [ \"development\" ] }\ncommand = \"echo\"\nargs = [ \"running in development profile\" ]\n\n[tasks.echo-production]\ncondition = { profiles = [ \"production\" ] }\ncommand = \"echo\"\nargs = [ \"running in production profile\" ]\n```\n\n<a name=\"usage-profiles-built-in\"></a>\n#### Built In Profiles\n\ncargo-make comes with few built in profiles to quickly enable additional conditional tasks.\n\n* **ci-coverage-tasks** - Will enable all code coverage tasks and setup rust compilation to remove dead code.\n* **none-thread-safe-tests** - Sets up rust test runner to a single thread\n* **multi-phase-tests** - Enable to split the tests to multiple phases (thread safe, multi threaded, custom)\n* **ci-static-code-analysis-tasks** - Will enable all static code analysis tasks such as format checking and clippy as part of the CI flow (see special note about backward compatibility below).\n* **ci-all-build-tasks** - Will enable all extra compilation tasks (i.e. bench and example code) as part of the CI flow (see special note about backward compatibility below).\n* **all-default-tasks** - Will enable extra tasks invoked while running the default task (such as toml formatting).\n\n*Some of these profiles may change in the future to enable more tasks which may break your build and by definition will never be backward compatible.*<br>\n*Use them with care.*\n\n<a name=\"usage-private-tasks\"></a>\n### Private Tasks\n\nPrivate tasks are tasks that should only be invoked by other tasks and not directly from the CLI.\n\nIn order to define a task as private, add the **private** attribute with value true as follows:\n\n```toml\n[tasks.internal-task]\nprivate = true\n```\n\n<a name=\"usage-deprecated-tasks\"></a>\n### Deprecated Tasks\n\nIt is possible to mark tasks as deprecated in order to warn users that they should no longer use this task and switch to a newer/different task instead.<br>\nOnce invoked, a warning message will be displayed with the deprecation information.<br>\nYou can define a task deprecated by setting the **deprecated** to true or by providing a relevant message.<br>\nFor example:\n\n```toml\n[tasks.legacy]\ndeprecated = \"Please use task OTHER instead\"\n\n[tasks.legacy-extended]\nextend = \"legacy\"\ndeprecated = false\n\n[tasks.legacy2]\ndeprecated = true\n```\n\nWhen invoking **legacy** task for example, the output is:\n\n```console\n[cargo-make] INFO - cargo make 0.37.23\n[cargo-make] INFO - Build File: deprecated.toml\n[cargo-make] INFO - Task: legacy\n[cargo-make] INFO - Profile: development\n[cargo-make] INFO - Running Task: empty\n[cargo-make] INFO - Running Task: legacy\n[cargo-make] WARN - Task: legacy is deprecated - Please use task OTHER instead\n[cargo-make] INFO - Running Task: empty\n[cargo-make] INFO - Build Done in 0 seconds.\n```\n\nWhen listing tasks, deprecated tasks will contain this information as well:\n\n```console\nNo Category\n----------\ndefault - Empty Task\nempty - Empty Task\nlegacy - No Description. (deprecated - Please use task OTHER instead)\nlegacy-extended - No Description.\nlegacy2 - No Description. (deprecated)\n```\n\n<a name=\"usage-watch\"></a>\n### Watch\nWatching for changes in your project and firing a task via cargo-make is very easy.<br>\nSimply add the **watch** attribute for the task and set it to true and once the task is triggered, it will run every time a file changes in the project.<br>\nThe process needs to be killed in order to stop the watch.\n\nExample:\n\n```toml\n[tasks.watch-example]\ncommand = \"echo\"\nargs = [ \"Triggered by watch\" ]\nwatch = true\n```\n\nBelow is a sample output of invoking the task:\n\n```console\n[cargo-make] INFO - cargo make 0.37.23\n[cargo-make] INFO - Build File: ./examples/watch.toml\n[cargo-make] INFO - Task: watch-example\n[cargo-make] INFO - Setting Up Env.\n[cargo-make] INFO - Running Task: init\n[cargo-make] INFO - Running Task: watch-example\n[cargo-make] INFO - Running Task: watch-example-watch\n[cargo-make] INFO - Execute Command: \"cargo\" \"watch\" \"-q\" \"-x\" \"make --disable-check-for-updates --no-on-error --loglevel=info --makefile=/projects/rust/cargo-make/examples/watch.toml watch-example\"\n[cargo-make] INFO - cargo make 0.37.23\n[cargo-make] INFO - Build File: /projects/rust/cargo-make/examples/watch.toml\n[cargo-make] INFO - Task: watch-example\n[cargo-make] INFO - Setting Up Env.\n[cargo-make] INFO - Running Task: init\n[cargo-make] INFO - Running Task: watch-example\n[cargo-make] INFO - Execute Command: \"echo\" \"Triggered by watch\"\nTriggered by watch\n[cargo-make] INFO - Running Task: end\n[cargo-make] INFO - Build Done  in 0 seconds.\n^C\n```\n\nYou can also fine tune the watch setup (which is based on **cargo-watch**) by providing an object to the **watch** attribute as follows:\n\n```toml\n[tasks.watch-args-example]\ncommand = \"echo\"\nargs = [ \"Triggered by watch\" ]\nwatch = { postpone = true, no_git_ignore = true, ignore_pattern = \"examples/files/*\", watch = [\"./docs/\"] }\n```\n\nSee [the documentation](https://sagiegurari.github.io/cargo-make/api/cli/types/struct.WatchOptions.html) for a description of all the options available.\n\n<a name=\"usage-watch-running-multiple-blocking-watches\"></a>\n#### Running Multiple Blocking Watches\n\nIn scenarios that you are required to run multiple blocking watches (for example running compilation + http server) you will need to run all such watches as parallel forked sub tasks.<br>\nIn order to implement that, you will need to use both fork=true and parallel=true attributes.<br>\nFor example:\n\n```toml\n[tasks.multiple-watches]\nrun_task = { name = [\"build\", \"http-server\", \"something-else\"], fork = true, parallel = true }\n```\n\n<a name=\"usage-functions\"></a>\n### Functions\n\ncargo-make comes with built in functions which help extend capabilities missing with environment variables.<br>\nFunctions are not supported everywhere in the makefile and are currently only supported in command arguments array structure.<br>\nIn order to define a function call, the following format is used **@@FUNCTION_NAME(ARG1,ARG2,ARG3,...)**<br>\nFor example:\n\n```toml\n[tasks.split-example]\ncommand = \"echo\"\nargs = [\"@@split(ENV_VAR,|)\"]\n```\n\nCurrently Supported Functions:\n\n* [Split](#usage-functions-split)\n* [GetAt](#usage-functions-getat)\n* [Remove Empty](#usage-functions-remove-empty)\n* [Trim](#usage-functions-trim)\n* [Decode](#usage-functions-decode)\n\n<a name=\"usage-functions-split\"></a>\n#### Split\n\nThe split function accepts two arguments:\n\n* environment variable name\n* split by character\n\nAnd returns an array of sub strings.<br>\nThis enables to split an environment variable to multiple command arguments, for example:\n\n```toml\n[env]\nMULTIPLE_VALUES=\"1 2 3 4\"\n\n[tasks.split]\ncommand = \"echo\"\nargs = [\"@@split(MULTIPLE_VALUES, )\"]\n\n[tasks.no-split]\ncommand = \"echo\"\nargs = [\"${MULTIPLE_VALUES}\"]\n```\n\n```console\n> cargo make --cwd ./examples --makefile functions.toml split\n[cargo-make] INFO - cargo make 0.37.23\n[cargo-make] INFO - Build File: functions.toml\n[cargo-make] INFO - Task: split\n[cargo-make] INFO - Profile: development\n[cargo-make] INFO - Running Task: init\n[cargo-make] INFO - Running Task: split\n[cargo-make] INFO - Execute Command: \"echo\" \"1\" \"2\" \"3\" \"4\"\n1 2 3 4\n[cargo-make] INFO - Running Task: end\n[cargo-make] INFO - Build Done  in 0 seconds.\n\n> cargo make --cwd ./examples --makefile functions.toml no-split\n[cargo-make] INFO - cargo make 0.37.23\n[cargo-make] INFO - Build File: functions.toml\n[cargo-make] INFO - Task: no-split\n[cargo-make] INFO - Profile: development\n[cargo-make] INFO - Running Task: init\n[cargo-make] INFO - Running Task: no-split\n[cargo-make] INFO - Execute Command: \"echo\" \"1 2 3 4\"\n1 2 3 4\n[cargo-make] INFO - Running Task: end\n[cargo-make] INFO - Build Done  in 0 seconds.\n```\n\nThe split function also supports optional third *mode* attribute.<br>\nIf mode: *remove-empty* the output will not include empty values.\n\n<a name=\"usage-functions-getat\"></a>\n#### GetAt\n\nThe getat function accepts three arguments:\n\n* environment variable name\n* split by character\n* index of the item to return\n\nAnd returns an array with a single value based on the given index.<br>\nThis enables to split an environment variable and extract only the needed param, for example:\n\n```toml\n[env]\nMULTIPLE_VALUES=\"1 2 3 4\"\n\n[tasks.getat]\ncommand = \"echo\"\nargs = [\"@@getat(MULTIPLE_VALUES,|,3)\"]\n```\n\n```console\n> cargo make --cwd ./examples --makefile functions.toml getat\n[cargo-make] INFO - cargo make 0.37.23\n[cargo-make] INFO - Build File: functions.toml\n[cargo-make] INFO - Task: getat\n[cargo-make] INFO - Profile: development\n[cargo-make] INFO - Running Task: getat\n[cargo-make] INFO - Execute Command: \"echo\" \"4\"\n4\n[cargo-make] INFO - Build Done in 0 seconds.\n```\n\n<a name=\"usage-functions-remove-empty\"></a>\n#### Remove Empty\n\nThe remove empty function accepts a single argument:\n\n* environment variable name\n\nIt will completely remove that command line argument in case the environment variable is not defined or is empty or it returns the actual environment variable value.\n\n```toml\n[tasks.remove-empty]\ncommand = \"echo\"\nargs = [\"1\", \"@@remove-empty(DOES_NOT_EXIST)\", \"2\"]\n```\n\n```console\n> cargo make --cwd ./examples --makefile functions.toml remove-empty\n[cargo-make] INFO - cargo make 0.37.23\n[cargo-make] INFO - Build File: functions.toml\n[cargo-make] INFO - Task: remove-empty\n[cargo-make] INFO - Profile: development\n[cargo-make] INFO - Running Task: init\n[cargo-make] INFO - Running Task: remove-empty\n[cargo-make] INFO - Execute Command: \"echo\" \"1\" \"2\"\n1 2\n[cargo-make] INFO - Running Task: end\n[cargo-make] INFO - Build Done  in 0 seconds.\n```\n\n<a name=\"usage-functions-trim\"></a>\n#### Trim\n\nThe trim function accepts the following arguments:\n\n* environment variable name\n* optionally a trim type: start/end (if not provided, it will trim both start and end)\n\nIt will completely remove that command line argument in case the environment variable is not defined or after it is trimmed, it is empty or it returns the actual environment variable value.\n\n```toml\n[env]\nTRIM_VALUE=\"   123    \"\n\n[tasks.trim]\ncommand = \"echo\"\nargs = [\"@@trim(TRIM_VALUE)\"]\n```\n\n```console\n> cargo make --cwd ./examples --makefile functions.toml remove-empty\n[cargo-make] INFO - cargo make 0.37.23\n[cargo-make] INFO - Build File: functions.toml\n[cargo-make] INFO - Task: trim\n[cargo-make] INFO - Profile: development\n[cargo-make] INFO - Running Task: init\n[cargo-make] INFO - Running Task: trim\n[cargo-make] INFO - Execute Command: \"echo\" \"123\"\n123\n[cargo-make] INFO - Running Task: end\n[cargo-make] INFO - Build Done  in 0 seconds.\n```\n\nBelow are examples when using the start/end attributes:\n\n```toml\n[env]\nTRIM_VALUE=\"   123    \"\n\n[tasks.trim-start]\ncommand = \"echo\"\nargs = [\"@@trim(TRIM_VALUE,start)\"]\n\n[tasks.trim-end]\ncommand = \"echo\"\nargs = [\"@@trim(TRIM_VALUE,end)\"]\n```\n\n```console\n> cargo make --cwd ./examples --makefile functions.toml trim-start\n[cargo-make] INFO - cargo make 0.37.23\n[cargo-make] INFO - Build File: functions.toml\n[cargo-make] INFO - Task: trim-start\n[cargo-make] INFO - Profile: development\n[cargo-make] INFO - Running Task: init\n[cargo-make] INFO - Running Task: trim-start\n[cargo-make] INFO - Execute Command: \"echo\" \"123    \"\n123\n[cargo-make] INFO - Running Task: end\n[cargo-make] INFO - Build Done  in 0 seconds.\n\n> cargo make --cwd ./examples --makefile functions.toml trim-end\n[cargo-make] INFO - cargo make 0.37.23\n[cargo-make] INFO - Build File: functions.toml\n[cargo-make] INFO - Task: trim-end\n[cargo-make] INFO - Profile: development\n[cargo-make] INFO - Running Task: init\n[cargo-make] INFO - Running Task: trim-end\n[cargo-make] INFO - Execute Command: \"echo\" \"   123\"\n   123\n[cargo-make] INFO - Running Task: end\n[cargo-make] INFO - Build Done  in 0 seconds.\n```\n\n<a name=\"usage-functions-decode\"></a>\n#### Decode\n\nThe decode function accepts the following arguments:\n\n* environment variable name\n* optional a list of mapping values (source/target)\n* optional default value\n\nIt will completely remove that command line argument in case the output it is empty.\n\nFor example:\n\n```toml\n[tasks.decode]\ncommand = \"echo\"\nargs = [\"Env:\", \"${CARGO_MAKE_PROFILE}\", \"Decoded:\", \"@@decode(CARGO_MAKE_PROFILE,development,dev,ci,test)\"]\n```\n\nWe check the `CARGO_MAKE_PROFILE` environment variable value and look for it in the mappings.<br>\nIf the value is **development** it will be mapped to **dev** while **ci** is mapped to **test**.<br>\nIn case no mapping is found, the original value is returned.<br>\nSample run for a mapping that was found:\n\n```console\ncargo make --cwd ./examples --makefile functions.toml -e DECODE_ENV_VAR=development decode\n[cargo-make] INFO - cargo make 0.37.23\n[cargo-make] INFO - Build File: functions.toml\n[cargo-make] INFO - Task: decode\n[cargo-make] INFO - Profile: development\n[cargo-make] INFO - Running Task: empty\n[cargo-make] INFO - Running Task: decode\n[cargo-make] INFO - Execute Command: \"echo\" \"Env:\" \"development\" \"Decoded:\" \"dev\"\nEnv: development Decoded: dev\n[cargo-make] INFO - Running Task: empty\n[cargo-make] INFO - Build Done in 0 seconds.\n```\n\nAnother sample run for a mapping that was not found:\n\n```console\ncargo make --cwd ./examples --makefile functions.toml -e DECODE_ENV_VAR=unmapped decode\n[cargo-make] INFO - cargo make 0.37.23\n[cargo-make] INFO - Build File: functions.toml\n[cargo-make] INFO - Task: decode\n[cargo-make] INFO - Profile: development\n[cargo-make] INFO - Running Task: empty\n[cargo-make] INFO - Running Task: decode\n[cargo-make] INFO - Execute Command: \"echo\" \"Env:\" \"unmapped\" \"Decoded:\" \"unmapped\"\nEnv: unmapped Decoded: unmapped\n[cargo-make] INFO - Running Task: empty\n[cargo-make] INFO - Build Done in 0 seconds.\n```\n\nAnother example:\n\n```toml\n[tasks.decode-with-default]\ncommand = \"echo\"\nargs = [\"Env:\", \"${DECODE_ENV_VAR}\", \"Decoded:\", \"@@decode(DECODE_ENV_VAR,development,dev,ci,test,unknown)\"]\n```\n\nSame as previous example, but the difference here is that if not mapping is found, the default value (last argument) is returned.<br>\nSample run:\n\n```console\ncargo make --cwd ./examples --makefile functions.toml -e DECODE_ENV_VAR=unmapped decode-with-default\n[cargo-make] INFO - cargo make 0.37.23\n[cargo-make] INFO - Build File: functions.toml\n[cargo-make] INFO - Task: decode-with-default\n[cargo-make] INFO - Profile: development\n[cargo-make] INFO - Running Task: empty\n[cargo-make] INFO - Running Task: decode-with-default\n[cargo-make] INFO - Execute Command: \"echo\" \"Env:\" \"unmapped\" \"Decoded:\" \"unknown\"\nEnv: unmapped Decoded: unknown\n[cargo-make] INFO - Running Task: empty\n[cargo-make] INFO - Build Done in 0 seconds.\n```\n\nMapped values can hold environment expressions, for example:\n\n```toml\n[tasks.decode-with-eval]\ncommand = \"echo\"\nargs = [\"Env:\", \"${DECODE_ENV_VAR}\", \"Decoded:\", \"@@decode(DECODE_ENV_VAR,test,The current profile is: ${CARGO_MAKE_PROFILE})\"]\n```\n\nSample run:\n\n```console\ncargo make --cwd ./examples --makefile functions.toml -e DECODE_ENV_VAR=test decode-with-eval\n[cargo-make] INFO - cargo make 0.37.23\n[cargo-make] INFO - Build File: functions.toml\n[cargo-make] INFO - Task: decode-with-eval\n[cargo-make] INFO - Profile: development\n[cargo-make] INFO - Running Task: empty\n[cargo-make] INFO - Running Task: decode-with-eval\n[cargo-make] INFO - Execute Command: \"echo\" \"Env:\" \"test\" \"Decoded:\" \"The current profile is: development\"\nEnv: test Decoded: The current profile is: development\n[cargo-make] INFO - Running Task: empty\n[cargo-make] INFO - Build Done in 0 seconds.\n```\n\n<a name=\"usage-ci\"></a>\n### Continuous Integration\ncargo-make comes with a predefined flow for continuous integration build executed by internal or online services such as travis-ci and appveyor.<br>\nIt is recommended to install cargo-make with the debug flag for faster installation.\n\n<a name=\"usage-ci-github-actions\"></a>\n#### Github Actions\nAdd the following to your workflow yml file:\n\n```yaml\n- name: Install cargo-make\n  uses: actions-rs/cargo@v1\n  with:\n    command: install\n    args: --debug cargo-make\n- name: Run CI\n  uses: actions-rs/cargo@v1\n  with:\n    command: make\n    args: ci-flow\n```\n\nThis will use the latest cargo-make with all latest features.\n\nYou can see full yaml file at: [ci.yml](https://github.com/sagiegurari/ci_info/blob/master/.github/workflows/ci.yml)\n\nIf you want to run code coverage and upload it to codecov, also define the following environment variable:\n\n```toml\nCARGO_MAKE_RUN_CODECOV=true\n```\n\nWhen working with workspaces, in order to run the ci-flow for each member and package all coverage data, use the following command:\n\n```yaml\n- name: Install cargo-make\n  uses: actions-rs/cargo@v1\n  with:\n    command: install\n    args: --debug cargo-make\n- name: Run CI\n  uses: actions-rs/cargo@v1\n  with:\n    command: make\n    args: --no-workspace workspace-ci-flow\n```\n\nTo speed up cargo-make installation during the build, you can use the [rust-cargo-make](https://github.com/marketplace/actions/rust-cargo-make) github action to download the prebuilt binary.\n\n<a name=\"usage-ci-travis\"></a>\n#### Travis\nAdd the following to `.travis.yml` file:\n\n```yaml\nscript:\n  - cargo install --debug cargo-make\n  - cargo make ci-flow\n```\n\nThis will use the latest cargo-make with all latest features.\n<br>\nWhen caching `cargo`:\n\n```yaml\ncache: cargo\nscript:\n  - which cargo-make || cargo install cargo-make\n  - cargo make ci-flow\n```\n\n*NOTE: While using cache, in order to update cargo-make, you will need to manually clear the travis cache*\n\nIf you want to run code coverage and upload it to codecov, also define the following environment variable:\n\n```yaml\nenv:\n  global:\n    - CARGO_MAKE_RUN_CODECOV=\"true\"\n```\n\n*NOTE: If you are using kcov coverage, you can cache the kcov installation by setting the `CARGO_MAKE_KCOV_INSTALLATION_DIRECTORY` environment variable to a location which is cached by travis.*\n\nWhen working with workspaces, in order to run the ci-flow for each member and package all coverage data, use the following command:\n\n```yaml\nscript:\n  - cargo install --debug cargo-make\n  - cargo make --no-workspace workspace-ci-flow\n```\n\n<a name=\"usage-ci-appveyor\"></a>\n#### AppVeyor\nAdd the following to the `appveyor.yml` file:\n\n```yaml\nbuild: false\n\ntest_script:\n  - cargo install --debug cargo-make\n  - cargo make ci-flow\n```\n\nWhen working with workspaces, in order to run the ci-flow for each member and package all coverage data, use the following command:\n\n```yaml\nbuild: false\n\ntest_script:\n  - cargo install --debug cargo-make\n  - cargo make --no-workspace workspace-ci-flow\n```\n\n<a name=\"usage-ci-gitlab\"></a>\n#### GitLab CI\nAdd the following to your `gitlab-ci.yml` file:\n\n```yaml\ntest:cargo:\n  script:\n  - cargo install --debug cargo-make\n  - cargo make ci-flow\n```\n\nWhen working with workspaces, in order to run the ci-flow for each member and package all coverage data, use the following command:\n\n```yaml\nbuild: false\n\ntest:cargo:\n  script:\n  - cargo install --debug cargo-make\n  - cargo make --no-workspace workspace-ci-flow\n```\n\nTo upload your coverage information to codecov, you'll need to go to repo settings for your GitLab repo,\n[and add a secret variable](https://docs.gitlab.com/ce/ci/variables/README.html#secret-variables) with your codecov token for that repository.\n\nThen you can add the following in your `gitlab-ci.yml` to enable coverage support:\n\n```yaml\nvariables:\n  CARGO_MAKE_RUN_CODECOV: \"true\"\n```\n\n<a name=\"usage-ci-circleci\"></a>\n#### CircleCI\nAdd the following to your `.circleci/config.yml` file:\n\n```yaml\n- run:\n    name: install cargo-make\n    command: cargo install --debug cargo-make\n- run:\n    name: ci flow\n    command: cargo make ci-flow\n```\n\nThis will use the latest cargo-make with all latest features.\n<br>\nWhen caching `cargo`:\n\n```yaml\n  - restore_cache:\n      key: project-cache\n  # ....\n  - run:\n      name: install cargo-make\n      command: which cargo-make || cargo install cargo-make\n  - run:\n      name: ci flow\n      command: cargo make ci-flow\n  # ....\n  - save_cache:\n      key: project-cache\n      paths:\n        - \"~/.cargo\"\n```\n\n*NOTE: While using cache, in order to update cargo-make, you will need to manually clear the CircleCI cache*\n\n*NOTE: If you are using kcov coverage, you can cache the kcov installation by setting the `CARGO_MAKE_KCOV_INSTALLATION_DIRECTORY` environment variable to a location which is cached by CircleCI.*\n\nWhen working with workspaces, in order to run the ci-flow for each member and package all coverage data, use the following command:\n\n```yaml\n- run:\n    name: install cargo-make\n    command: cargo install --debug cargo-make\n- run:\n    name: ci flow\n    command: cargo make --no-workspace workspace-ci-flow\n```\n\n<a name=\"usage-ci-azure-pipelines\"></a>\n#### Azure Pipelines\nAdd the following to your `azure-pipelines.yml` file:\n\n```yaml\n- script: cargo install --debug cargo-make\n  displayName: install cargo-make\n- script: cargo make ci-flow\n  displayName: ci flow\n```\n\nWhen working with workspaces, in order to run the ci-flow for each member and package all coverage data, use the following setup:\n\n```yaml\n- script: cargo install --debug cargo-make\n  displayName: install cargo-make\n- script: cargo make --no-workspace workspace-ci-flow\n  displayName: ci flow\n```\n\n<a name=\"usage-ci-drone-io\"></a>\n#### drone.io\nThis is a minimal `.drone.yml` example for running the ci-flow task with the docker runner:\n\n```yaml\npipeline:\n  ci-flow:\n    image: rust:1.38-slim\n    commands:\n    - cargo install --debug cargo-make\n    - cargo make ci-flow\n```\n\n<a name=\"usage-ci-cirrus\"></a>\n#### Cirrus CI\nThis is a minimal `.cirrus.yml` example for running the ci-flow task:\n\n```yaml\ncontainer:\n  image: rust:latest\n\ntask:\n  name: ci-flow\n  install_script: cargo install --debug cargo-make\n  flow_script: cargo make ci-flow\n```\n\n<a name=\"usage-predefined-flows\"></a>\n### Predefined Flows\nThe [default makefiles](https://github.com/sagiegurari/cargo-make/blob/master/src/lib/descriptor/makefiles/) file comes with many predefined tasks and flows.<br>\nThe following are some of the main flows that can be used without any need of an external `Makefile.toml` definition.\n\n* **default** - Can be executed without adding the task name, simply run `cargo make`. This task is an alias for dev-test-flow.\n* **dev-test-flow** - Also the default flow so it can be invoked without writing any task name (simply run **cargo make**).<br>This task runs formatting, cargo build and cargo test and will most likely be the set of tasks that you will run while developing and testing a rust project.\n* **watch-flow** - Watches for any file change and if any change is detected, it will invoke the test flow.\n* **ci-flow** - Should be used in CI builds (such as travis/appveyor) and it runs build and test with verbose level.\n* **workspace-ci-flow** - Should be used in CI builds (such as travis/appveyor) for workspace projects.\n* **publish-flow** - Cleans old target directory and publishes the project.\n* **build-flow** - Runs full cycle of build, tests, security checks, dependencies up to date validations, and documentation generation.<br>This flow can be used to make sure your project is fully tested and up to date.\n* **coverage-flow** - Creates coverage report from all unit and integration tests (not supported on windows). By default cargo-make uses kcov for code coverage; however, additional unsupported implementations are defined.\n* **codecov-flow** - Runs the coverage-flow and uploads the coverage results to codecov (not supported on windows).\n\n<a name=\"usage-predefined-flows-coverage\"></a>\n#### Coverage\ncargo-make has built in support for multiple coverage tasks.<br>\nSwitching between them without modifying the flows is done by setting the coverage provider name in the **`CARGO_MAKE_COVERAGE_PROVIDER`** environment variable as follows:\n\n```toml\n[env]\n# can be defined as kcov, tarpaulin, ...\nCARGO_MAKE_COVERAGE_PROVIDER = \"kcov\"\n```\n\nIn case you have a custom coverage task, it can be plugged into the coverage flow by changing the main coverage task alias, for example:\n\n```toml\n[tasks.coverage]\nalias = \"coverage-some-custom-provider\"\n```\n\nYou can run:\n\n```sh\ncargo make --list-all-steps | grep \"coverage-\"\n```\n\nTo view all currently supported providers. Example output:\n\n```console\nci-coverage-flow: No Description.\ncoverage-tarpaulin: Runs coverage using tarpaulin rust crate (linux only)\ncoverage-flow: Runs the full coverage flow.\ncoverage-kcov: Installs (if missing) and runs coverage using kcov (not supported on windows)\n```\n\nAll built in coverage providers are supported by their authors and not by cargo-make.\n\nBased on the above explanation, to generate a coverage report for a simple project, run the following command:\n\n```sh\ncargo make coverage\n```\n\nIn order to run coverage in a workspace project and package all member coverage reports in the workspace level, run the following command:\n\n```sh\ncargo make --no-workspace workspace-coverage\n```\n\nIf you are using **kcov**, you may declare the following environment variables in your Makefile.toml to customize the coverage task:\n\nSpecify lines or regions of code to ignore:\n\n```toml\n[env]\nCARGO_MAKE_KCOV_EXCLUDE_LINE = \"unreachable,kcov-ignore\"             # your choice of pattern(s)\nCARGO_MAKE_KCOV_EXCLUDE_REGION = \"kcov-ignore-start:kcov-ignore-end\" # your choice of markers\n```\n\nBy default, the binaries executed to collect coverage are filtered by a regular expression. You may override the following in case it does not match the binaries generated on your system:\n\n```toml\n[env]\n# for example: cargo make filter regex would be cargo_make-[a-z0-9]*$\nCARGO_MAKE_TEST_COVERAGE_BINARY_FILTER = \"${CARGO_MAKE_CRATE_FS_NAME}-[a-z0-9]*$\"\n```\n\n*For grcov support, checkout the following repo for instructions:*<br>\n*https://github.com/kazuk/cargo-make-coverage-grcov*\n\n<a name=\"usage-predefined-flows-full\"></a>\n#### Full List\n\nSee [full list of all predefined tasks](https://github.com/sagiegurari/cargo-make/blob/master/docs/cargo_make_task_list.md) (generated via **`cargo make --list-all-steps`**)\n\n<a name=\"usage-predefined-flows-disable\"></a>\n#### Disabling Predefined Tasks/Flows\n\nIn order to prevent loading of internal core tasks and flows, simply add the following configuration property in your external Makefile.toml:\n\n```toml\n[config]\nskip_core_tasks = true\n```\n\n*Few empty tasks would be loaded even with skipping core tasks to ensure cargo-make has a default task defined.*\n\n<a name=\"usage-predefined-flows-modify\"></a>\n#### Modifying Predefined Tasks/Flows\n\nIt is possible to modify the internal core tasks.<br>\nAll modifications are defines in the **config.modify_core_tasks** section.\n\n```toml\n[config.modify_core_tasks]\n# if true, all core tasks are set to private (default false)\nprivate = true\n\n# if set to some value, all core tasks are modified to: <namespace>::<name> for example default::build\nnamespace = \"default\"\n```\n\n<a name=\"usage-min-version\"></a>\n### Minimal Version\nIn case you are using cargo-make features that are only available from a specific version, you can ensure the build will fail if it is invoked by an older cargo-make version.<br>\nIn order to specify the minimal version, use the **min_version** in the config section as follows:\n\n```toml\n[config]\nmin_version = \"0.37.23\"\n```\n\n<a name=\"usage-performance-tuning\"></a>\n### Performance Tuning\nSome features of cargo-make can be disabled which can improve the startup time.<br>\nBelow is a list of all current features:\n\n```toml\n[config]\n# Skip loading of all core tasks which saves up a bit on toml parsing and task creation\nskip_core_tasks = true\n# Skips loading Git related environment variables\nskip_git_env_info = true\n# Skips loading rust related environment variables\nskip_rust_env_info = true\n# Skips loading the current crate related environment variables\nskip_crate_env_info = true\n```\n\nWhen running in a rust workspace, you can disable some of the features in the member makefiles.<br>\nFor example, if the members are in the same git repo as the entire project, you can add **skip_git_env_info** in the members\nmakefiles and they will still have the environment variables setup from the parent process.\n\nFor tasks that can be skipped in case no input file has been modified, see the [Running Tasks Only If Sources Changed](#usage-running-tasks-only-if-sources-changed) section.\n\n<a name=\"usage-command-groups\"></a>\n### Command Groups (Subcommands)\n\nYou can expose the tasks as *groups* by creating a top level task which will call other internal tasks.\n\nThere are two possible approaches for this.\n\n#### Local tasks\n\nUsing private tasks (private is not mandatory) are more suited for simple cases and redirect one command to another.\n\nThis approach has some limitations:\n- `--list-all-steps` will not list private tasks\n- the tasks required a specific naming pattern\n\nFor example, if you want to have server start/stop and client start/stop commands and execute them as follows:\n\n```sh\ncargo make server start\ncargo make server stop\ncargo make client start\ncargo make client stop\n```\n\nYou can define two top level tasks (server and client) that will invoke the internal ones.<br>\nExample implementation:\n\n```toml\n[tasks.server]\nprivate = false\nextend = \"subcommand\"\nenv = { \"SUBCOMMAND_PREFIX\" = \"server\" }\n\n[tasks.client]\nprivate = false\nextend = \"subcommand\"\nenv = { \"SUBCOMMAND_PREFIX\" = \"client\" }\n\n[tasks.subcommand]\nprivate = true\nscript = '''\n#!@duckscript\n\ncm_run_task ${SUBCOMMAND_PREFIX}_${1}\n'''\n\n[tasks.server_start]\nprivate = true\ncommand = \"echo\"\nargs = [\"starting server...\"]\n\n[tasks.server_stop]\nprivate = true\ncommand = \"echo\"\nargs = [\"stopping server...\"]\n\n[tasks.client_start]\nprivate = true\ncommand = \"echo\"\nargs = [\"starting client...\"]\n\n[tasks.client_stop]\nprivate = true\ncommand = \"echo\"\nargs = [\"stopping client...\"]\n```\n\n#### External subcommand file\n\nAnother approach is to use a different configuration file for the subcommands.\n\nThis allows using `--list-all-steps` for the subcommand and also set `[config]` options in the subcommand file.\n\nFor projects with subprojects in folders, a `Makefile.toml` can be created for each subproject and be reached as subcommands from the main folder.\n\nExample implementation of a `foo` sobcommand with a configuration file in the `foo/` folder.\n\n```toml\n[tasks.foo]\ndescription = \"Foo subcommands\"\ncategory = \"Subcommands\"\ncwd = \"foo/\"\ncommand = \"makers\"\nargs = [\"${@}\"]\n```\n\nExample implementation of a `foo` sobcommand with a `Makefile.foo.toml` configuration file in the same folder.\n\n```toml\n[tasks.foo]\ndescription = \"Foo subcommands\"\ncategory = \"Subcommands\"\ncommand = \"makers\"\nargs = [\"--makefile\", \"Makefile.foo.toml\", \"${@}\"]\n```\n\n<a name=\"usage-diff-changes\"></a>\n### Diff Changes\nUsing the **`--diff-steps`** CLI command flag, you can diff your correct overrides compared to the prebuilt internal makefile flow.\n\nExample Usage:\n\n```console\ncargo make --diff-steps --makefile ./examples/override_core.toml post-build\n[cargo-make] INFO - cargo make 0.37.23\n[cargo-make] INFO - Build File: ./examples/override_core.toml\n[cargo-make] INFO - Task: post-build\n[cargo-make] INFO - Setting Up Env.\n[cargo-make] INFO - Printing diff...\n[cargo-make] INFO - Execute Command: \"git\" \"diff\" \"--no-index\" \"/tmp/cargo-make/Lz7lFgjj0x.toml\" \"/tmp/cargo-make/uBpOa9THwD.toml\"\ndiff --git a/tmp/cargo-make/Lz7lFgjj0x.toml b/tmp/cargo-make/uBpOa9THwD.toml\nindex 5152290..ba0ef1d 100644\n--- a/tmp/cargo-make/Lz7lFgjj0x.toml\n+++ b/tmp/cargo-make/uBpOa9THwD.toml\n@@ -42,7 +42,9 @@\n         name: \"post-build\",\n         config: Task {\n             clear: None,\n-            description: None,\n+            description: Some(\n+                \"Override description\"\n+            ),\n             category: Some(\n                 \"Build\"\n             ),\n[cargo-make] INFO - Done\n```\n\n*Git is required to be available as it is used to diff the structures and output it to the console using standard git coloring scheme.*\n\n<a name=\"usage-unstable-features\"></a>\n### Unstable Features\nSome cargo-make capabilities, while working well, are not yet set as default behaviour.<br>\nTherefore they are gated using the **unstable_features** attribute.<br>\nIn order to enable such a feature, you need to define its name.<br>\nFor example, for the xxx feature would be defined as follows:<br>\n\n```toml\n[config]\nunstable_features = [\"CTRL_C_HANDLING\"]\n```\n\nBelow is a list of currently existing unstable features\n\n* **CTRL_C_HANDLING** - Adds <kbd>ctrl-c</kbd> handler, which will stop any currently running command invoked by the current task and exit cargo-make\n\n<a name=\"usage-cli\"></a>\n### CLI Options\nThese are the following options available while running cargo-make:\n\n```console\nUSAGE:\n    [makers | cargo make | cargo-make make] [OPTIONS] [--] [<TASK_CMD>...]\n\nARGS:\n    <TASK_CMD>    The task to execute, potentially including arguments which can be accessed in the task itself.\n\nOPTIONS:\n    --help, -h                           Print help information\n    --version, -V                        Print version information\n    --makefile <FILE>                    The optional toml file containing the tasks definitions\n    --task, -t <TASK>                    The task name to execute (can omit the flag if the task name is the last argument) [default: default]\n    --profile, -p <PROFILE>              The profile name (will be converted to lower case) [default: development]\n    --cwd <DIRECTORY>                    Will set the current working directory. The search for the makefile will be from this directory if defined.\n    --no-workspace                       Disable workspace support (tasks are triggered on workspace and not on members)\n    --no-on-error                        Disable on error flow even if defined in config sections\n    --allow-private                      Allow invocation of private tasks\n    --skip-init-end-tasks                If set, init and end tasks are skipped\n    --skip-tasks <SKIP_TASK_PATTERNS>    Skip all tasks that match the provided regex (example: pre.*|post.*)\n    --env-file <FILE>                    Set environment variables from provided file\n    --env, -e <ENV>                      Set environment variables\n    --loglevel, -l <LOG LEVEL>           The log level (verbose, info, error, off) [default: info]\n    --verbose, -v                        Sets the log level to verbose (shorthand for --loglevel verbose)\n    --quiet                              Sets the log level to error (shorthand for --loglevel error)\n    --silent                             Sets the log level to off (shorthand for --loglevel off)\n    --no-color                           Disables colorful output\n    --time-summary                       Print task level time summary at end of flow\n    --experimental                       Allows access unsupported experimental predefined tasks.\n    --disable-check-for-updates          Disables the update check during startup\n    --output-format <OUTPUT FORMAT>      The print/list steps format (some operations do not support all formats) (default, short-description, markdown, markdown-single-page, markdown-sub-section, autocomplete)\n    --output-file <OUTPUT_FILE>          The list steps output file name\n    --hide-uninteresting                 Hide any minor tasks such as pre/post hooks.\n    --print-steps                        Only prints the steps of the build in the order they will be invoked but without invoking them\n    --list-all-steps                     Lists all known steps\n    --list-category-steps <CATEGORY>     List steps for a given category\n    --diff-steps                         Runs diff between custom flow and prebuilt flow (requires git)\n```\n\n<a name=\"usage-plugins\"></a>\n### Plugins\n\nPlugins enable users to take full control of the task execution.<br>\ncargo-make would still create the execution plan based on the tasks and their dependencies, but would leave the individual task execution to the plugin code.<br>\n<br>\nPlugins are basically a single duckscript code block with access to the task and flow meta data and can invoke cargo-make specific commands or general duckscript commands.<br>\nFor example, if a task defined a command and arguments to execute and the plugin simply needs to invoke them, you can implement a simple plugin as follows:\n\n```sh\nargs_string = array_join ${task.args} \" \" # simple example which doesn't support args that contain spaces in them\nexec --fail-on-error ${task.command} %{args_string}\n```\n\nOnce a plugin is defined for a task, the task execution control moves to the plugin itself.<br>\nAll scripts, commands, conditions, env, etc... are ignored and should be handled by the plugin code itself.<br>\nAll specific task environment variables will not be defined globally (all CARGO_MAKE_CURRENT_TASK_ variables) and instead available in the task env block in the json string.\n\n<a name=\"usage-plugins-defining-plugins\"></a>\n### Defining Plugins\n\nPlugins are defined under the `plugin.impl` prefix, for example:\n\n```toml\n[plugins.impl.command-runner]\nscript = '''\necho task: ${task.name}\n\nargs_string = array_join ${task.args} \" \" # simple example which doesn't support args that contain spaces in them\nexec --fail-on-error ${task.command} %{args_string}\n'''\n```\n\nYou can defining as many plugins as needed.<br>\nIt is also possible to provide them aliases to map new names to existing plugins.<br>\nFor example:\n\n```toml\n[plugins.aliases]\noriginal = \"new\"\nthis = \"that\"\n```\n\nFor a task to pass the execution control to the plugin, simply put the plugin name in the **plugin** attribute.<br>\nFor example:\n\n```toml\n[tasks.my-task]\nplugin = \"my-plugin\"\n# other attributes as needed...\n```\n\n**You can create reusable plugins and load them using the [load scripts](#usage-load-scripts) built in capability.**\n\n<a name=\"usage-plugins-plugin-sdk\"></a>\n### Plugin SDK\n\nThe plugin SDK contains the following:\n\n* [Common Duckscript SDK](https://github.com/sagiegurari/duckscript/blob/master/docs/sdk.md)\n* Metadata variables\n    * flow.task.name - Holds the flow task (not current task) which triggered this task\n    * flow.cli.args - Array holding all the task arguments provided to cargo-make on the command line\n    * plugin.impl.name - The current plugin name (after aliases modifications)\n    * task.as_json - The entire task config as json string (can use json_parse to convert to duckscript variables).\n    * task.has_condition - true if the task has any condition definition (including empty one)\n    * task.has_env  - true if the task has any env definition (including empty one)\n    * task.has_install_instructions - true of the task has installation definition.\n    * task.has_command - true if the task has a command definition\n    * task.has_script - true if the task has a script definition\n    * task.has_run_task - true if the task has a run_task definition\n    * task.has_dependencies - true if the task has dependencies\n    * task.has_toolchain_specifier - true if the task has toolchain definition\n    * task.name - The task name\n    * task.description - The description\n    * task.category - The category\n    * task.disabled - true/false based on the disabled attributes\n    * task.private - true/false based on the private attributes\n    * task.deprecated - true/false based on the deprecated attributes\n    * task.workspace - true/false based on the workspace attributes\n    * task.plugin.name - The plugin name defined in the task (before aliases)\n    * task.watch - true/false based on the watch attributes\n    * task.ignore_errors - true/false based on the ignore_errors attributes\n    * task.cwd - The task's current working directory value\n    * task.command - The command\n    * task.args - Array of all the command arguments\n    * task.script_runner - The script runner value\n    * task.script_runner_args = Array of all the script runner arguments\n    * task.script_extension - The script file extension value\n* cargo-make task script specific commands\n    * ```cm_run_task [--async] takename``` - Runs a task and dependencies. Supports async execution (via --async flag). Must get the task name to invoke.\n* cargo-make plugin specific commands\n    * ```cm_plugin_run_task``` - Runs the current task that invoked the plugin (not including dependencies), including condition handling, env, cwd and all the logic that cargo-make has.\n    * ```cm_plugin_run_custom_task``` - Accepts a task json string and runs the task definition (not including dependencies), including condition handling, env, cwd and all the logic that cargo-make has.\n    * ```cm_plugin_check_task_condition``` - Returns true/false if the current task conditions are met\n    * ```cm_plugin_force_plugin_set``` - All tasks that are going to be invoked in the future will call the current plugin regardless of their config\n    * ```cm_plugin_force_plugin_clear``` - Undos the cm_plugin_force_plugin_set change and tasks will behave as before\n\n<a name=\"usage-plugins-plugin-example-dockerize\"></a>\n### Plugin Example - Docker Integration\n\nBelow is a simple example which runs a task (and the rest of the flow from that point) in a docker container.\n\n```toml\n[plugins.impl.dockerize]\nscript = '''\nplugin_force_set = get_env PLUGIN_FORCE_SET\nplugin_force_set = eq \"${plugin_force_set}\" 1\n\nif not ${plugin_force_set}\n    cm_plugin_force_plugin_set\n    set_env PLUGIN_FORCE_SET 1\n\n    dockerfile = set \"\"\n    fn add_docker\n        dockerfile = set \"${dockerfile}${1}\\n\"\n    end\n\n    taskjson = json_parse ${task.as_json}\n    makefile = basename ${taskjson.env.CARGO_MAKE_CURRENT_TASK_INITIAL_MAKEFILE}\n\n    add_docker \"FROM debian:stable\"\n    add_docker \"RUN mkdir /workdir/\"\n    add_docker \"RUN mkdir /workdir/project/\"\n    add_docker \"RUN apt-get update\"\n    add_docker \"RUN apt-get install -y curl build-essential libssl-dev pkg-config\"\n    add_docker \"ENV PATH=\\\"$PATH:$HOME/.cargo/bin\\\"\"\n    add_docker \"RUN curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y\"\n    add_docker \"RUN $HOME/.cargo/bin/cargo install cargo-make\"\n    add_docker \"RUN $HOME/.cargo/bin/cargo make --version\"\n    add_docker \"RUN echo \\\"cd ./workdir/project/ && ls -lsa && $HOME/.cargo/bin/cargo make --makefile ${makefile} --profile ${CARGO_MAKE_PROFILE} ${CARGO_MAKE_TASK}\\\" > ./run.sh\"\n    add_docker \"RUN chmod 777 ./run.sh\"\n    add_docker \"ADD . /workdir/project/\"\n    add_docker \"CMD [\\\"sh\\\", \\\"./run.sh\\\"]\"\n\n    writefile ./Dockerfile ${dockerfile}\n    exec --fail-on-error docker build --tag cmimg:build ./\n\n    exec --fail-on-error docker run cmimg:build\nend\n'''\n\n[tasks.default]\nalias = \"docker_flow\"\n\n[tasks.docker_flow]\ndependencies = [\"part1\", \"part2\", \"part3\"]\n\n[tasks.base-task]\ncommand = \"echo\"\nargs = [\"task\", \"${CARGO_MAKE_CURRENT_TASK_NAME}\"]\n\n[tasks.part1]\nplugin = \"dockerize\"\nextend = \"base-task\"\n\n[tasks.part2]\nextend = \"base-task\"\n\n[tasks.part3]\nextend = \"base-task\"\n```\n\nRunning:\n\n```sh\ncargo make docker_flow\n```\n\nWill result in creation of a new docker container that will run parts 1-3 inside it.<br>\n**The example works. However, it does not support several features like passing CLI args, etc....**\n\n<a name=\"usage-plugins-plugin-example-parallel-workspace-members\"></a>\n### Plugin Example - Run workspace members in parallel\n\nThe following example shows how to define a task on workspace level makefile to enable to invoke it on each member in parallel.\n\n```toml\n[plugins.impl.parallel-members]\nscript = '''\nplugin_used = get_env PLUGIN_USED\nplugin_used = eq \"${plugin_used}\" 1\n\nif not ${plugin_used}\n    set_env PLUGIN_USED 1\n    members = split ${CARGO_MAKE_CRATE_WORKSPACE_MEMBERS} ,\n\n    workspace_dir = pwd\n    for member in ${members}\n        cd ./${member}\n        spawn cargo make --disable-check-for-updates --allow-private --no-on-error ${flow.task.name} %{args}\n        cd ${workspace_dir}\n    end\n\n    release ${members}\nelse\n    task_definition = json_parse --collection ${task.as_json}\n    map_remove ${task_definition} workspace\n    task_json = json_encode --collection ${task_definition}\n    cm_plugin_run_custom_task ${task_json}\nend\n'''\n\n[tasks.sometask]\n# to make this task serial and not parallel, remove following 2 lines\nplugin = \"parallel-members\"\nworkspace = false\n```\n\n<a name=\"usage-plugins-plugin-example-rustenv\"></a>\n### Plugin Example - Load Env From Rust Script\n\nThe following example shows how to enable rust scripts invoked from cargo-make to update the main cargo-make process env.<br>\nIt assumes the task has a script line and that the script is rust. It will execute it (ignoring any rust script provider config for sake of simplicity) and load each output line as an env key/value pair.\n\n```toml\n[plugins.impl.rust-env]\nscript = '''\n# make sure the task has a script\nassert ${task.has_script}\n\ntaskjson = json_parse ${task.as_json}\nscript = set ${taskjson.script}\nwritefile ./target/_tempplugin/main.rs ${script}\n\nout = exec --fail-on-error rust-script ./target/_tempplugin/main.rs\n\noutput = trim ${out.stdout}\nlines = split ${output} \\n\nfor line in ${lines}\n    parts = split ${line} =\n    key = array_get ${parts} 0\n    value = array_get ${parts} 1\n    set_env ${key} ${value}\nend\n'''\n\n[tasks.default]\nalias = \"test\"\n\n[tasks.test]\ndependencies = [\"dorust\"]\ncommand = \"echo\"\nargs = [\"${ENV_FROM_RUST1}\", \"${ENV_FROM_RUST2}\"]\n\n[tasks.dorust]\nprivate = true\nplugin = \"rust-env\"\nscript = '''\nfn main() {\n    println!(\"ENV_FROM_RUST1=hello\");\n    println!(\"ENV_FROM_RUST2=world\");\n}\n'''\n```\n\n<a name=\"usage-plugins-plugin-example-powershell\"></a>\n### Plugin Example - Adding Simpler Windows Powershell Support\n\nIn the below example, we add the a simple powershell command support.<br>\nThis plugin will take an existing task, set its command to powershell and prepend the **`-C`** argument.<br>\nThis example also shows how to create new tasks in runtime and invoke them.\n\n```toml\n[plugins.impl.powershell]\nscript = '''\n# Adds simpler powershell integration\n\n# make sure we are on windows\nwindows = is_windows\nassert ${windows}\n\n# make sure the task has args\nargs_empty = array_is_empty ${task.args}\nassert_false ${args_empty}\n\ntask_definition = json_parse --collection ${task.as_json}\n\n# prepend powershell args to task args\npowershell_args = array -C\nall_args = array_concat ${powershell_args} ${task.args}\nargs = map_get ${task_definition} args\nrelease ${args}\nmap_put ${task_definition} args ${all_args}\n\n# set powershell command\nmap_put ${task_definition} command pwsh.exe\n\npowershell_task_json = json_encode --collection ${task_definition}\n\necho Custom Task:\\n${powershell_task_json}\ncm_plugin_run_custom_task ${powershell_task_json}\n'''\n\n[tasks.default]\nalias = \"test\"\n\n[tasks.test]\nplugin = \"powershell\"\nargs = [\"echo hello from windows powershell\"]\n```\n\n<a name=\"usage-shell-completion\"></a>\n### Shell Completion\n\ncargo-make comes with shell auto completion support, however in order to provide the exact task names that are\navailable in the current directory, it will run the `--list-all-steps` command which might take a bit to finish.\n\n<a name=\"usage-shell-completion-bash\"></a>\n#### Bash\nSource the `makers-completion.bash` file (found in `extra/shell` folder) at the start of your shell session.\nIt will enable auto completion for the **makers** executable.\n\n<a name=\"usage-shell-completion-zsh\"></a>\n#### zsh\nzsh supports bash auto completion. Therefore, the existing bash autocomplete can be used by running the following script:\n\n```\nautoload -U +X compinit && compinit\nautoload -U +X bashcompinit && bashcompinit\n\n# make sure to update the path based on your file system location\nsource ./extra/shell/makers-completion.bash\n```\n\nIt will enable auto completion for the **makers** executable.\n\n<a name=\"usage-shell-completion-fig\"></a>\n#### Fig / Amazon CodeWhisperer for command line\n\nFig supports cargo-make as of [this PR](https://github.com/withfig/autocomplete/pull/2180), no special configuration is needed, just download the latest version of [Fig](https://fig.io/) or [Amazon CodeWhisperer for command line](https://aws.amazon.com/blogs/devops/introducing-amazon-codewhisperer-for-command-line/).\n\nDouble check if `cargo-make` is globally installed by running:\n\n```bash\ncargo --list\n```\n\nIf you can see `make` on the list, Fig should work and load the completion automatically from `./Makefile.toml` or any directory you specify with `--makefile <path>`\n\n<a name=\"cargo-make-global-config\"></a>\n### Global Configuration\nSome of the default CLI values and cargo-make behaviour can be configured via optional global configuration file `config.toml` located in the cargo-make directory.\n\nThe cargo-make directory location can be defined via `CARGO_MAKE_HOME` environment variable value.<br>\nIf `CARGO_MAKE_HOME` has not been defined, the cargo-make default location is:\n\n| OS      | Location                          |\n| ------- | --------------------------------- |\n| Linux   | $XDG_CONFIG_HOME or $HOME/.config |\n| Windows | RoamingAppData                    |\n| Mac     | $HOME/Library/Preferences         |\n\nIf for any reason, the above paths are not valid for the given platform, it will default to `$HOME/.cargo-make`.\n\nThe following example `config.toml` shows all possible options with their default values:\n\n```toml\n# The default log level if not defined by the `--loglevel` CLI argument\nlog_level = \"info\"\n\n# The default configuration whether output coloring is disabled\ndisable_color = false\n\n# The default task name if no task was provided as part of the cargo-make invocation\ndefault_task_name = \"default\"\n\n# cargo-make checks for updates during invocation.\n# This configuration defines the minimum amount of time which must pass before cargo-make invocations will try to check for updates.\n# If the minimum amount of time did not pass, cargo-make will not check for updates (same as --disable-check-for-updates)\n# Valid values are: always, daily, weekly, monthly\n# If any other value is provided, it will be treated as weekly.\nupdate_check_minimum_interval = \"weekly\"\n\n# If set to true and cwd was not provided in the command line arguments and the current cwd is not the project root (Cargo.toml not present),\n# cargo make will attempt to find the project root by searching the parent directories, until a directory with a Cargo.toml is found.\n# cargo make will set the cwd to that directory and will use any Makefile.toml found at that location.\nsearch_project_root = false\n```\n\n<a name=\"descriptor-definition\"></a>\n## Makefile Definition\n\n[Config Section](https://sagiegurari.github.io/cargo-make/api/cli/types/struct.ConfigSection.html)\n\n[Task](https://sagiegurari.github.io/cargo-make/api/cli/types/struct.Task.html)\n\n[Platform Override](https://sagiegurari.github.io/cargo-make/api/cli/types/struct.PlatformOverrideTask.html)\n\n[Condition](https://sagiegurari.github.io/cargo-make/api/cli/types/struct.TaskCondition.html)\n\nMore info can be found in the [types](https://sagiegurari.github.io/cargo-make/api/cli/types/index.html) section of the API documentation.\n\n<a name=\"task-name-conventions\"></a>\n## Task Naming Conventions\nThis section explains the logic behind the default task names.<br>\nWhile the default names logic can be used as a convention for any new task defined in some project Makefile.toml, it is not required.\n\nThe [default makefiles](https://github.com/sagiegurari/cargo-make/blob/master/src/lib/descriptor/makefiles/) file comes with several types of tasks:\n\n* Single command or script task (for example **cargo build**)\n* Tasks that come before or after the single command tasks (hooks)\n* Tasks that define flows using dependencies\n* Tasks which only install some dependency\n\nSingle command tasks are named based on their command (in most cases), for example the task that runs cargo build is named build.\n\n```toml\n[tasks.build]\ncommand = \"cargo\"\nargs = [\"build\"]\n```\n\nThis allows to easily understand what this task does.\n\nTasks that are invoked before/after those tasks are named the same way as the original task but with the pre/post prefix.<br>\nFor example for task build the default toml also defines pre-build and post-build tasks.\n\n```toml\n[tasks.pre-build]\n\n[tasks.post-build]\n```\n\nIn the [default makefiles](https://github.com/sagiegurari/cargo-make/blob/master/src/lib/descriptor/makefiles/), all pre/post tasks are empty and are there as placeholders\nfor external `Makefile.toml` to override so custom functionality can be defined easily before/after running a specific task.\n\nFlows are named with the flow suffix.  For example, **ci-flow**:\n\n```toml\n[tasks.ci-flow]\n# CI task will run cargo build and cargo test with verbose output\ndependencies = [\n    \"pre-build\",\n    \"build-verbose\",\n    \"post-build\",\n    \"pre-test\",\n    \"test-verbose\",\n    \"post-test\"\n]\n```\n\nThis prevents flow task names to conflict with single command task names and quickly allow users to understand that this task is a flow definition.\n\nTasks which only install some dependency but do not invoke any command start with the **install-** prefix, for example:\n\n```toml\n[tasks.install-rust-src]\ninstall_crate = { rustup_component_name = \"rust-src\" }\n```\n\n<a name=\"error-codes\"></a>\n## Error Codes\n\n<a name=\"e001\"></a>\n### E001: Environment Variables Cycle Detected\n\nA cycle between different environment variables has been detected;\nThis can happen during the merging of environments (at every loading step).\nDue to reordering and to make sure that no circular references exist,\nthis error is emitted.\n\nYou can fix this issue, by looking at your env config, and seeing if at any point a circular reference could have occurred.\nThe error message mentions the environment variables that are likely candidates for the cause of the cycle.\n\nYour best bet is to try to break the cycle, by creating a new environment variable or use a static value multiple times.\nCycles are usually caused by rapidly changing configs, forgotten and unused env variables or design problems,\neven without cycle detection or no reordering this would likely cause hidden issues during\nexecution, as `cargo-make` would need to otherwise set instances to an empty value instead.\nThis way you are able to investigate and fix it yourself before it becomes an unexpected,\nhidden and hard to debug issue.\n\n> **Note:** Scripts are known to sometimes cause false-positives.\n> In that case use the `depends_on` property, to explicitly tell `cargo-make`, which\n> environment variables should be considered a dependency instead of trying to guess from the script.\n\n\n<a name=\"articles\"></a>\n## Articles\nBelow is a list of articles which explain most of the cargo-make features.\n\n* [Introduction and Basics](https://medium.com/@sagiegurari/automating-your-rust-workflows-with-cargo-make-part-1-of-5-introduction-and-basics-b19ced7e7057)\n* [Extending Tasks, Platform Overrides and Aliases](https://medium.com/@sagiegurari/automating-your-rust-workflows-with-cargo-make-part-2-of-5-extending-tasks-platform-overrides-1527386dcf87)\n* [Environment Variables, Conditions, Sub Tasks and Mixing](https://medium.com/@sagiegurari/automating-your-rust-workflows-with-cargo-make-part-3-of-5-environment-variables-conditions-3c740a837a01)\n* [Workspace Support, Init/End Tasks and Makefiles](https://medium.com/@sagiegurari/automating-your-rust-workflows-with-cargo-make-part-4-of-5-workspace-support-init-end-tasks-c3e738699421)\n* [Predefined Tasks, CI Support and Conventions](https://medium.com/@sagiegurari/automating-your-rust-workflows-with-cargo-make-part-5-final-predefined-tasks-ci-support-and-4594812e57da)\n\nThe articles are missing some of the new features which have been added after they were published, such as:\n\n* [Rust Task](#usage-task-command-script-task-examplerust)\n* [Cross Platform Shell](#usage-task-command-script-task-exampleshell2batch)\n* [Full List of Predefined Flows](#usage-predefined-flows)\n* [Global Configuration](#cargo-make-global-config)\n* [Catching Errors](#usage-catching-errors)\n* [Env File](#usage-env-file)\n* [Private Tasks](#usage-private-tasks)\n* [Other Programming Languages](#usage-task-command-script-task-examplegeneric)\n* [Rust Version Conditions](#usage-conditions-structure)\n* [Toolchain](#usage-toolchain)\n* [Watch](#usage-watch)\n* [Profiles](#usage-profiles)\n* [Functions](#usage-functions)\n* [Minimal Version](#usage-min-version)\n* [Deprecated Tasks](#usage-deprecated-tasks)\n\nAnd more...\n\n<a name=\"badge\"></a>\n## Badge\nIf you are using cargo-make in your project and want to display it in your project README or website, you can embed the \"Built with cargo-make\" badge.\n\n[![Built with cargo-make](https://sagiegurari.github.io/cargo-make/assets/badges/cargo-make.svg)](https://sagiegurari.github.io/cargo-make)\n\nHere are few snapshots:\n\n### Markdown\n\n\n```md\n[![Built with cargo-make](https://sagiegurari.github.io/cargo-make/assets/badges/cargo-make.svg)](https://sagiegurari.github.io/cargo-make)\n```\n\n### HTML\n\n```html\n<a href=\"https://sagiegurari.github.io/cargo-make\">\n  <img src=\"https://sagiegurari.github.io/cargo-make/assets/badges/cargo-make.svg\" alt=\"Built with cargo-make\">\n</a>\n```\n\n<a name=\"roadmap\"></a>\n## Roadmap\nWhile already feature rich, cargo-make is still under heavy development.<br>\nYou can view the future development items list in the [github project issues](https://github.com/sagiegurari/cargo-make/issues)\n\n<a name=\"editor-support\"></a>\n## Editor Support\n\n<a name=\"editor-support-vim\"></a>\n### Vim\n\n* [vim-cargo-make](https://github.com/nastevens/vim-cargo-make)\n* [vim-duckscript](https://github.com/nastevens/vim-duckscript)\n\n<a name=\"editor-support-vs-code\"></a>\n### VSCode\n\nFor debugging purposes there are some example .vscode files located within the [docs/vscode-example](./docs/vscode-example/) directory\n\nYou may also need:\n\n  * A local install of LLVM (For the LLDB Debugger) installed and reachable on the path\n  * VSCode Extension - CodeLLDB\n  * VSCode Extension - \"rust-analyser\" (not the \"rust\" one)\n  * VSCode Extension - \"Task Explorer\"\n  * VSCode Extension - \"crates\"\n\n## Contributing\nSee [contributing guide](.github/CONTRIBUTING.md)\n\n<a name=\"history\"></a>\n## Release History\n\nSee [Changelog](https://github.com/sagiegurari/cargo-make/blob/master/CHANGELOG.md)\n\n<a name=\"license\"></a>\n## License\nDeveloped by Sagie Gur-Ari and licensed under the Apache 2 open source license.\n"
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "extra",
          "type": "tree",
          "content": null
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}