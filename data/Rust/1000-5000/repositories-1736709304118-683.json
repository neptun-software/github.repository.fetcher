{
  "metadata": {
    "timestamp": 1736709304118,
    "page": 683,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjY5MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "rust-embedded/heapless",
      "stars": 1590,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.025390625,
          "content": "CHANGELOG.md merge=union\n\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.033203125,
          "content": "**/*.rs.bk\n.#*\nCargo.lock\ntarget/\n"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 20.0439453125,
          "content": "# Change Log\n\nAll notable changes to this project will be documented in this file.\n\nThe format is based on [Keep a Changelog](http://keepachangelog.com/)\nand this project adheres to [Semantic Versioning](http://semver.org/).\n\n## [Unreleased]\n\n### Added\n\n- Added `format` macro.\n- Added `String::from_utf16`.\n- Added `is_full`, `recent_index`, `oldest`, and `oldest_index` to `HistoryBuffer`\n- Added `is_full` to `BinaryHeap`\n- Added `is_full` to `IndexMap`\n- Added `is_full` to `IndexSet`\n- Added `is_full` to `LinearMap`\n- Added infallible conversions from arrays to `Vec`.\n- Added `Vec::spare_capacity_mut`.\n- Added `Extend` impls for `Deque`.\n- Added `Deque::make_contiguous`.\n- Added `VecView`, the `!Sized` version of `Vec`.\n- Added pool implementations for 64-bit architectures.\n- Added `IntoIterator` implementation for `LinearMap`\n- Added `Deque::{get, get_mut, get_unchecked, get_unchecked_mut}`.\n- Added `serde::Serialize` and `serde::Deserialize` implementations to `HistoryBuffer`.\n- Added `Vec::drain`.\n- Added `String::drain`.\n- Implemented `DoubleEndedIterator` for `OldestOrdered`.\n- Added std `Entry` methods to indexmap `Entry`.\n- Added `StringView`, the `!Sized` version of `String`.\n- Added `BinaryHeapView`, the `!Sized` version of `BinaryHeap`.\n- Added `MpMcQueueView`, the `!Sized` version of `MpMcQueue`.\n- Added `LinearMapView`, the `!Sized` version of `LinearMap`.\n- Added `HistoryBufferView`, the `!Sized` version of `HistoryBuffer`.\n- Added `DequeView`, the `!Sized` version of `Deque`.\n- Added `QueueView`, the `!Sized` version of `Queue`.\n- Added `SortedLinkedListView`, the `!Sized` version of `SortedLinkedList`.\n- Added implementation of `Borrow` and `BorrowMut` for `String` and `Vec`.\n- Added `Deque::{swap, swap_unchecked, swap_remove_front, swap_remove_back}`.\n\n### Changed\n\n- Changed `stable_deref_trait` to a platform-dependent dependency.\n\n### Fixed\n\n- Fixed clippy lints.\n- Fixed `{arc,box,object}_pool!` emitting clippy lints.\n- Fixed the list of implemented data structures in the crate docs, by adding `Deque`,\n  `HistoryBuffer` and `SortedLinkedList` to the list.\n- Fixed `MpMcQueue` with `mpmc_large` feature.\n- Fix missing `Drop` for `MpMcQueue`\n\n## [v0.8.0] - 2023-11-07\n\n### Added\n\n- Add `Clone` and `PartialEq` implementations to `HistoryBuffer`.\n- Added an object pool API. see the `pool::object` module level doc for details\n- Add `HistoryBuffer::as_slices()`\n- Implemented `retain` for `IndexMap` and `IndexSet`.\n- Recover `StableDeref` trait for `pool::object::Object` and `pool::boxed::Box`.\n- Add polyfills for ESP32S2\n- Added `String::from_utf8` and `String::from_utf8_unchecked`.\n\n### Changed\n\n- updated from edition 2018 to edition 2021\n- [breaking-change] `IndexMap` and `IndexSet` now require that keys implement the `core::hash::Hash`\n  trait instead of the `hash32::Hash` (v0.2.0) trait\n- move `pool::singleton::Box` to the `pool::box` module\n- renamed `pool::singleton::Pool` to `BoxPool` and moved it into the `pool::box` module\n- move `pool::singleton::arc::Arc` to the `pool::arc` module\n- renamed `pool::singleton::arc::Pool` to `ArcPool` and moved it into the `pool::arc` module\n- [breaking-change] changed the target support of memory pool API to only support 32-bit x86 and a\n  subset of ARM targets. See the module level documentation of the `pool` module for details\n- relax trait requirements on `IndexMap` and `IndexSet`.\n- export `IndexSet` and `IndexMap` iterator types.\n- [breaking-change] export `IndexMapKeys`, `IndexMapValues` and\n  `IndexMapValuesMut` iterator types.\n- [breaking-change] this crate now uses `portable-atomic` v1.0 instead of `atomic-polyfill` for emulating\n  CAS instructions on targets where they're not natively available.\n- [breaking-change] `From<&str>` for `String` was replaced with `TryFrom<&str>` because the `From` trait must not fail.\n- [breaking-change] Renamed Cargo features\n  - `defmt-impl` is now `defmt-03`\n  - `ufmt-impl` is now `ufmt`\n  - `cas` is removed, atomic polyfilling is now opt-in via the `portable-atomic` feature.\n- `Vec::as_mut_slice` is now a public method.\n\n### Fixed\n\n- Fixed a `dropping_references` warning in `LinearMap`.\n- Fixed IndexMap entry API returning wrong slot after an insert on vacant entry. (#360)\n\n### Removed\n\n- [breaking-change] this crate no longer has a Minimum Supported Rust Version (MSRV) guarantee and\n  should be used with the latest stable version of the Rust toolchain.\n\n- [breaking-change] removed the `Init` and `Uninint` type states from `pool::singleton::Box`\n- [breaking-change] removed the following `pool::singleton::Box` methods: `freeze`, `forget` and `init`\n- [breaking-change] removed the `pool::singleton::arc::ArcInner` type\n- [breaking-change] removed support for attributes from `pool!` and `arc_pool!`\n\n## [v0.7.16] - 2022-08-09\n\n### Added\n\n- add more `PartialEq` implementations to `Vec` where `Vec` is the RHS\n\n### Changed\n\n### Fixed\n\n- clarify in the docs that the capacity `heapless::String` is in bytes, not characters\n- Fixed some broken links in the documentation.\n\n## [v0.7.15] - 2022-07-05\n\n### Added\n\n- Added `Vec::insert(index, element)`\n- Added `Vec::remove(index)`\n- Added `Vec::retain(f)`\n- Added `Vec::retain_mut(f)`\n\n## [v0.7.14] - 2022-06-15\n\n### Added\n\n- Added support for AVR architecture.\n\n### Fixed\n\n- `IndexSet` and `IndexMap`'s `default` method now compile time checks that their capacity is a power of two.\n\n## [v0.7.13] - 2022-05-16\n\n### Added\n\n- Added `into_vec` to `BinaryHeap`\n\n## [v0.7.12] - 2022-05-12\n\n### Added\n\n- Added support for AVR architecture.\n- Add `entry` API to `IndexMap`\n- Implement `IntoIterator` trait for `Indexmap`\n- Implement `FromIterator` for `String`\n- Add `first` and `last` methods to `IndexMap` and `IndexSet`\n- Add `pop_{front_back}_unchecked` methods to `Deque`\n\n### Changed\n\n- Optimize the codegen of `Vec::clone`\n- `riscv32i` and `riscv32imc` targets unconditionally (e.g. `build --no-default-features`) depends on `atomic-polyfill`\n\n### Fixed\n\n- Inserting an item that replaces an already present item will no longer\n  fail with an error\n\n## [v0.7.11] - 2022-05-09\n\n### Fixed\n\n- Fixed `pool` example in docstring.\n- Fixed undefined behavior in `Vec::truncate()`, `Vec::swap_remove_unchecked()`,\n  and `Hole::move_to()` (internal to the binary heap implementation).\n- Fixed `BinaryHeap` elements are being dropped twice\n\n## [v0.7.10] - 2022-01-21\n\n### Fixed\n\n- `cargo test` can now run on non-`x86` hosts\n\n### Added\n\n- Added `OldestOrdered` iterator for `HistoryBuffer`\n\n### Changed\n\n- `atomic-polyfill` is now enabled and used for `cas` atomic emulation on `riscv` targets\n\n## [v0.7.9] - 2021-12-16\n\n### Fixed\n\n- Fix `IndexMap` and `IndexSet` bounds\n- Make `IndexSet::new()` a `const fn`\n\n## [v0.7.8] - 2021-11-11\n\n### Added\n\n- A span of `defmt` versions is now supported (`0.2` and `0.3`)\n\n## [v0.7.7] - 2021-09-22\n\n### Fixed\n\n- Fixed so `Pool` is `Sync` on ARMv6\n\n## [v0.7.6] - 2021-09-21\n\n### Added\n\n- Added `ArcPool`\n- Added `Debug` impl for `Deque`\n\n### Fixed\n\n- ZSTs in `Pool` now works correctly\n- Some MIRI errors were resolved\n- Allow `pool!` on thumbv6\n- Fixed possible UB in `Pool` on x86\n\n## [v0.7.5] - 2021-08-16\n\n### Added\n\n- Added `SortedLinkedList`\n- Added `Vec::is_empty`, one does not need to go through a slice anymore\n\n### Changed\n\n- `Vec::pop_unchecked` is now public\n\n## [v0.7.4] - 2021-08-06\n\n### Added\n\n- Implement `Default` for `MpMcQueue`, `Queue` and `HistoryBuffer`\n- Implement `PartialOrd` and `Ord` for `Vec` and `String`\n\n### Fixed\n\n- Fixed comments in SPSC\n\n## [v0.7.3] - 2021-07-01\n\n### Added\n\n- Added `Deque`\n\n### Changed\n\n- `Box::freeze` is deprecated due to possibility of undefined behavior.\n\n## [v0.7.2] - 2021-06-30\n\n### Added\n\n- Added new `Vec::into_array` method\n- Added const-asserts to all data structures\n\n## [v0.7.1] - 2021-05-23\n\n### Changed\n\n- MPMC is now more generic\n\n### Added\n\n- `defmt` for `Vec` and `String`\n\n## [v0.7.0] - 2021-04-23\n\n### Changed\n\n- [breaking-change] Converted all data structures to use the `const generics` MVP\n- [breaking-change] `HistoryBuffer` is now working with const constructors and non-`Copy` data\n- [breaking-change] `HistoryBuffer::as_slice` and others now only return initialized values\n- Added missing `Deref`, `AsRef` and `Debug` for `HistoryBuffer`\n- [breaking-change] `MultiCore`/`SingleCore` and `Uxx` is now removed from `spsc::Queue`\n- [breaking-change] `spsc::Queue` is now `usize` only\n- [breaking-change] `spsc::Queue` now sacrifices one element for correctness (see issue #207), i.e. it creates an `N - 1` sized queue instead of the old that generated an size `N` queue\n- [breaking-change] `String` has had `utf8` related methods removed as this can be done via `str`\n- [breaking-change] No data structures implement `AsSlice` traits any more, now using `AsRef` and `AsMut` as they work with any size of array now\n\n### Fixed\n\n- `Pool` and `MPMC` now works on `thumbv6m`\n- `IndexMap::new()` is now a `const-fn`\n\n## [v0.6.1] - 2021-03-02\n\n### Fixed\n\n- Security issue.\n\n## [v0.6.0] - 2021-02-02\n\n### Changed\n\n- [breaking-change] The version of the `generic-array` dependency has been\n  bumped to v0.14.2.\n\n## [v0.5.6] - 2020-09-18\n\n### Added\n\n- Added `as_mut_vec` for `String`\n- Added `set_len` for `Vec`\n- Performance improvements in `histbuf`\n\n### Fixed\n\n- `Producer` was made `Send` for single core applications\n\n## [v0.5.5] - 2020-05-04\n\n### Added\n\n- Added `HistoryBuffer`\n- Added extra methods to `Vec`: `from_slice`, `starts_with`, `ends_with`\n- Optional `ufmt` support for `String` and `Vec`\n- Added `pool` support for bare-metal `armebv7r-` targets\n- Added Sync to `pool` for `x86`\n\n## [v0.5.4] - 2020-04-06\n\n### Added\n\n- Added `StableDeref` implementation for `pool::Box` and `pool::singleton::Box`.\n\n## [v0.5.3] - 2020-01-27\n\n### Added\n\n- Extend the ARMv7-A `Pool` support to the bare-metal `armv7a-` targets.\n\n## [v0.5.2] - 2020-01-15\n\n### Fixed\n\n- Fixed incorrect overflow behavior in computation of capacities\n- Fixed edge case in `mpmc::Queue::dqueue` that led to an infinite loop\n- IndexMap and LinerMap are now deserialized as maps, rather than as sequences\n- Fixed compilation of this crates on built-in targets that don't have CAS instructions\n\n### Changed\n\n- `spsc::Queue` iterators now implement the double ended iterator trait\n\n### Added\n\n- opt-out `cas` feature to disable parts of the API that use CAS instructions.\n  Useful if using a custom (i.e. not built-in) rustc target that does not have CAS\n  instructions.\n\n- singleton `Pool` support on ARMv7-A devices\n\n## [v0.5.1] - 2019-08-29\n\n### Added\n\n- Added armv8 support\n- Added `Queue::peek`\n- Added `BinaryHeap::peek_mut`\n\n## [v0.5.0] - 2019-07-12\n\n### Added\n\n- `Pool` now implements the `Sync` trait when targeting ARMv7-R.\n\n- Most data structures can now be constructed in \"const context\" (e.g. `static\n[mut]` variables) using a newtype in `heapless::i`.\n\n- `Pool` has gained a `grow_exact` method to more efficiently use statically\n  allocated memory.\n\n- The `pool!` macro now accepts attributes.\n\n- `mpmc::Q*` a family of fixed capacity multiple-producer multiple-consumer\n  lock-free queues.\n\n### Changed\n\n- [breaking-change] `binary_heap::Kind` is now a sealed trait.\n\n### Removed\n\n- [breaking-change] The \"smaller-atomics\" feature has been removed. It is now\n  always enabled.\n\n- [breaking-change] The \"min-const-fn\" feature has been removed. It is now\n  always enabled.\n\n- [breaking-change] The MSRV has been bumped to Rust 1.36.0.\n\n- [breaking-change] The version of the `generic-array` dependency has been\n  bumped to v0.13.0.\n\n## [v0.4.4] - 2019-05-02\n\n### Added\n\n- Implemented `PartialEq`, `PartialOrd`, `Eq`, `Ord` and `Hash` for `pool::Box`\n  and `pool::singleton::Box`.\n\n### Fixed\n\n- Fixed UB in our internal, stable re-implementation of `core::mem::MaybeUninit`\n  that occurred when using some of our data structures with types that implement\n  `Drop`.\n\n## [v0.4.3] - 2019-04-22\n\n### Added\n\n- Added a memory pool that's lock-free and interrupt-safe on the ARMv7-M\n  architecture.\n\n- `IndexMap` have gained `Eq` and `PartialEq` implementations.\n\n## [v0.4.2] - 2019-02-12\n\n### Added\n\n- All containers now implement `Clone`\n\n- `spsc::Queue` now implements `Debug`, `Hash`, `PartialEq` and `Eq`\n\n- `LinearMap` now implements `Debug`, `FromIterator`, `IntoIter`, `PartialEq`,\n  `Eq` and `Default`\n\n- `BinaryHeap` now implements `Debug` and `Default`\n\n- `String` now implements `FromStr`, `Hash`, `From<uxx>` and `Default`\n\n- `Vec` now implements `Hash` and `Default`\n\n- A \"serde\" Cargo feature that when enabled adds a `serde::Serialize` and\n  `serde::Deserialize` implementations to each collection.\n\n## [v0.4.1] - 2018-12-16\n\n### Changed\n\n- Add a new type parameter to `spsc::Queue` that indicates whether the queue is\n  only single-core safe, or multi-core safe. By default the queue is multi-core\n  safe; this preserves the current semantics. New `unsafe` constructors have\n  been added to create the single-core variant.\n\n## [v0.4.0] - 2018-10-19\n\n### Changed\n\n- [breaking-change] All Cargo features are disabled by default. This crate now\n  compiles on stable by default.\n\n- [breaking-change] RingBuffer has been renamed to spsc::Queue. The ring_buffer\n  module has been renamed to spsc.\n\n- [breaking-change] The bounds on spsc::Queue have changed.\n\n### Removed\n\n- [breaking-change] The sealed `Uxx` trait has been removed from the public API.\n\n## [v0.3.7] - 2018-08-19\n\n### Added\n\n- Implemented `IntoIterator` and `FromIterator` for `Vec`\n- `ready` methods to `ring_buffer::{Consumer,Producer}`\n- An opt-out \"const-fn\" Cargo feature that turns `const` functions into normal functions when\n  disabled.\n- An opt-out \"smaller-atomics\" Cargo feature that removes the ability to shrink the size of\n  `RingBuffer` when disabled.\n\n### Changed\n\n- This crate now compiles on stable when both the \"const-fn\" and \"smaller-atomics\" features are\n  disabled.\n\n### Fixed\n\n- The `RingBuffer.len` function\n- Compilation on recent nightlies\n\n## [v0.3.6] - 2018-05-04\n\n### Fixed\n\n- The capacity of `RingBuffer`. It should be the requested capacity plus not twice that plus one.\n\n## [v0.3.5] - 2018-05-03\n\n### Added\n\n- `RingBuffer.enqueue_unchecked` an unchecked version of `RingBuffer.enqueue`\n\n## [v0.3.4] - 2018-04-28\n\n### Added\n\n- `BinaryHeap.pop_unchecked` an unchecked version of `BinaryHeap.pop`\n\n## [v0.3.3] - 2018-04-28\n\n### Added\n\n- `BinaryHeap.push_unchecked` an unchecked version of `BinaryHeap.push`\n\n## [v0.3.2] - 2018-04-27\n\n### Added\n\n- A re-export of `generic_array::ArrayLength`, for convenience.\n\n## [v0.3.1] - 2018-04-23\n\n### Added\n\n- Fixed capacity implementations of `IndexMap` and `IndexSet`.\n- A `Extend` implementation to `Vec`\n- More `PartialEq` implementations to `Vec`\n\n## [v0.3.0] - 2018-04-22\n\n### Changed\n\n- [breaking-change] The capacity of all data structures must now be specified using type level\n  integers (cf. `typenum`). See documentation for details.\n\n- [breaking-change] `BufferFullError` has been removed in favor of (a) returning ownership of the\n  item that couldn't be added to the collection (cf. `Vec.push`), or (b) returning the unit type\n  when the argument was not consumed (cf. `Vec.extend_from_slice`).\n\n## [v0.2.7] - 2018-04-20\n\n### Added\n\n- Unchecked methods to dequeue and enqueue items into a `RingBuffer` via the `Consumer` and\n  `Producer` end points.\n\n### Changed\n\n- `RingBuffer` now has a generic index type, which default to `usize` for backward compatibility.\n  Changing the index type to `u8` or `u16` reduces the footprint of the `RingBuffer` but limits its\n  maximum capacity (254 and 65534, respectively).\n\n## [v0.2.6] - 2018-04-18\n\n### Added\n\n- A `BinaryHeap` implementation. `BinaryHeap` is a priority queue implemented with a binary heap.\n\n## [v0.2.5] - 2018-04-13\n\n### Fixed\n\n- Dereferencing `heapless::Vec` no longer incurs in a bounds check.\n\n## [v0.2.4] - 2018-03-12\n\n### Fixed\n\n- `LinerMap::new` is now a const fn\n\n## [v0.2.3] - 2018-03-11\n\n### Added\n\n- A `swap_remove` method to `Vec`\n- A `LinearMap` implementation. `LinearMap` is a map / dict backed by an array and that performs\n  lookups via linear search.\n\n## [v0.2.2] - 2018-03-01\n\n### Added\n\n- Fixed size version of `std::String`\n\n## [v0.2.1] - 2017-12-21\n\n### Added\n\n- `Vec` now implements both `fmt::Debug`, `PartialEq` and `Eq`.\n\n- `resize` and `resize_default` methods to `Vec`.\n\n## [v0.2.0] - 2017-11-22\n\n### Added\n\n- A single producer single consumer mode to `RingBuffer`.\n\n- A `truncate` method to `Vec`.\n\n### Changed\n\n- [breaking-change] Both `Vec::new` and `RingBuffer::new` no longer require an initial value. The\n  signature of `new` is now `const fn() -> Self`.\n\n- [breaking-change] The error type of all operations that may fail has changed from `()` to\n  `BufferFullError`.\n\n- Both `RingBuffer` and `Vec` now support arrays of _any_ size for their backup storage.\n\n## [v0.1.0] - 2017-04-27\n\n- Initial release\n\n[Unreleased]: https://github.com/rust-embedded/heapless/compare/v0.8.0...HEAD\n[v0.8.0]: https://github.com/rust-embedded/heapless/compare/v0.7.16...v0.8.0\n[v0.7.16]: https://github.com/rust-embedded/heapless/compare/v0.7.15...v0.7.16\n[v0.7.15]: https://github.com/rust-embedded/heapless/compare/v0.7.14...v0.7.15\n[v0.7.14]: https://github.com/rust-embedded/heapless/compare/v0.7.13...v0.7.14\n[v0.7.13]: https://github.com/rust-embedded/heapless/compare/v0.7.12...v0.7.13\n[v0.7.12]: https://github.com/rust-embedded/heapless/compare/v0.7.11...v0.7.12\n[v0.7.11]: https://github.com/rust-embedded/heapless/compare/v0.7.10...v0.7.11\n[v0.7.10]: https://github.com/rust-embedded/heapless/compare/v0.7.9...v0.7.10\n[v0.7.9]: https://github.com/rust-embedded/heapless/compare/v0.7.8...v0.7.9\n[v0.7.8]: https://github.com/rust-embedded/heapless/compare/v0.7.7...v0.7.8\n[v0.7.7]: https://github.com/rust-embedded/heapless/compare/v0.7.6...v0.7.7\n[v0.7.6]: https://github.com/rust-embedded/heapless/compare/v0.7.5...v0.7.6\n[v0.7.5]: https://github.com/rust-embedded/heapless/compare/v0.7.4...v0.7.5\n[v0.7.4]: https://github.com/rust-embedded/heapless/compare/v0.7.3...v0.7.4\n[v0.7.3]: https://github.com/rust-embedded/heapless/compare/v0.7.2...v0.7.3\n[v0.7.2]: https://github.com/rust-embedded/heapless/compare/v0.7.1...v0.7.2\n[v0.7.1]: https://github.com/rust-embedded/heapless/compare/v0.7.0...v0.7.1\n[v0.7.0]: https://github.com/rust-embedded/heapless/compare/v0.6.1...v0.7.0\n[v0.6.1]: https://github.com/rust-embedded/heapless/compare/v0.6.0...v0.6.1\n[v0.6.0]: https://github.com/rust-embedded/heapless/compare/v0.5.5...v0.6.0\n[v0.5.5]: https://github.com/rust-embedded/heapless/compare/v0.5.4...v0.5.5\n[v0.5.4]: https://github.com/rust-embedded/heapless/compare/v0.5.3...v0.5.4\n[v0.5.3]: https://github.com/rust-embedded/heapless/compare/v0.5.2...v0.5.3\n[v0.5.2]: https://github.com/rust-embedded/heapless/compare/v0.5.1...v0.5.2\n[v0.5.1]: https://github.com/rust-embedded/heapless/compare/v0.5.0...v0.5.1\n[v0.5.0]: https://github.com/rust-embedded/heapless/compare/v0.4.4...v0.5.0\n[v0.4.4]: https://github.com/rust-embedded/heapless/compare/v0.4.3...v0.4.4\n[v0.4.3]: https://github.com/rust-embedded/heapless/compare/v0.4.2...v0.4.3\n[v0.4.2]: https://github.com/rust-embedded/heapless/compare/v0.4.1...v0.4.2\n[v0.4.1]: https://github.com/rust-embedded/heapless/compare/v0.4.0...v0.4.1\n[v0.4.0]: https://github.com/rust-embedded/heapless/compare/v0.3.7...v0.4.0\n[v0.3.7]: https://github.com/rust-embedded/heapless/compare/v0.3.6...v0.3.7\n[v0.3.6]: https://github.com/rust-embedded/heapless/compare/v0.3.5...v0.3.6\n[v0.3.5]: https://github.com/rust-embedded/heapless/compare/v0.3.4...v0.3.5\n[v0.3.4]: https://github.com/rust-embedded/heapless/compare/v0.3.3...v0.3.4\n[v0.3.3]: https://github.com/rust-embedded/heapless/compare/v0.3.2...v0.3.3\n[v0.3.2]: https://github.com/rust-embedded/heapless/compare/v0.3.1...v0.3.2\n[v0.3.1]: https://github.com/rust-embedded/heapless/compare/v0.3.0...v0.3.1\n[v0.3.0]: https://github.com/rust-embedded/heapless/compare/v0.2.7...v0.3.0\n[v0.2.7]: https://github.com/rust-embedded/heapless/compare/v0.2.6...v0.2.7\n[v0.2.6]: https://github.com/rust-embedded/heapless/compare/v0.2.5...v0.2.6\n[v0.2.5]: https://github.com/rust-embedded/heapless/compare/v0.2.4...v0.2.5\n[v0.2.4]: https://github.com/rust-embedded/heapless/compare/v0.2.3...v0.2.4\n[v0.2.3]: https://github.com/rust-embedded/heapless/compare/v0.2.2...v0.2.3\n[v0.2.2]: https://github.com/rust-embedded/heapless/compare/v0.2.1...v0.2.2\n[v0.2.1]: https://github.com/rust-embedded/heapless/compare/v0.2.0...v0.2.1\n[v0.2.0]: https://github.com/rust-embedded/heapless/compare/v0.1.0...v0.2.0\n"
        },
        {
          "name": "CODE_OF_CONDUCT.md",
          "type": "blob",
          "size": 4.482421875,
          "content": "# The Rust Code of Conduct\n\n## Conduct\n\n**Contact**: [Libs team](https://github.com/rust-embedded/wg#the-libs-team)\n\n* We are committed to providing a friendly, safe and welcoming environment for all, regardless of level of experience, gender identity and expression, sexual orientation, disability, personal appearance, body size, race, ethnicity, age, religion, nationality, or other similar characteristic.\n* On IRC, please avoid using overtly sexual nicknames or other nicknames that might detract from a friendly, safe and welcoming environment for all.\n* Please be kind and courteous. There's no need to be mean or rude.\n* Respect that people have differences of opinion and that every design or implementation choice carries a trade-off and numerous costs. There is seldom a right answer.\n* Please keep unstructured critique to a minimum. If you have solid ideas you want to experiment with, make a fork and see how it works.\n* We will exclude you from interaction if you insult, demean or harass anyone. That is not welcome behavior. We interpret the term \"harassment\" as including the definition in the [Citizen Code of Conduct](http://citizencodeofconduct.org/); if you have any lack of clarity about what might be included in that concept, please read their definition. In particular, we don't tolerate behavior that excludes people in socially marginalized groups.\n* Private harassment is also unacceptable. No matter who you are, if you feel you have been or are being harassed or made uncomfortable by a community member, please contact one of the channel ops or any of the [Libs team][team] immediately. Whether you're a regular contributor or a newcomer, we care about making this community a safe place for you and we've got your back.\n* Likewise any spamming, trolling, flaming, baiting or other attention-stealing behavior is not welcome.\n\n## Moderation\n\nThese are the policies for upholding our community's standards of conduct.\n\n1. Remarks that violate the Rust standards of conduct, including hateful, hurtful, oppressive, or exclusionary remarks, are not allowed. (Cursing is allowed, but never targeting another user, and never in a hateful manner.)\n2. Remarks that moderators find inappropriate, whether listed in the code of conduct or not, are also not allowed.\n3. Moderators will first respond to such remarks with a warning.\n4. If the warning is unheeded, the user will be \"kicked,\" i.e., kicked out of the communication channel to cool off.\n5. If the user comes back and continues to make trouble, they will be banned, i.e., indefinitely excluded.\n6. Moderators may choose at their discretion to un-ban the user if it was a first offense and they offer the offended party a genuine apology.\n7. If a moderator bans someone and you think it was unjustified, please take it up with that moderator, or with a different moderator, **in private**. Complaints about bans in-channel are not allowed.\n8. Moderators are held to a higher standard than other community members. If a moderator creates an inappropriate situation, they should expect less leeway than others.\n\nIn the Rust community we strive to go the extra step to look out for each other. Don't just aim to be technically unimpeachable, try to be your best self. In particular, avoid flirting with offensive or sensitive issues, particularly if they're off-topic; this all too often leads to unnecessary fights, hurt feelings, and damaged trust; worse, it can drive people away from the community entirely.\n\nAnd if someone takes issue with something you said or did, resist the urge to be defensive. Just stop doing what it was they complained about and apologize. Even if you feel you were misinterpreted or unfairly accused, chances are good there was something you could've communicated better — remember that it's your responsibility to make your fellow Rustaceans comfortable. Everyone wants to get along and we are all here first and foremost because we want to talk about cool technology. You will find that people will be eager to assume good intent and forgive as long as you earn their trust.\n\nThe enforcement policies listed above apply to all official embedded WG venues; including official IRC channels (#rust-embedded); GitHub repositories under rust-embedded; and all forums under rust-embedded.org (forum.rust-embedded.org).\n\n*Adapted from the [Node.js Policy on Trolling](http://blog.izs.me/post/30036893703/policy-on-trolling) as well as the [Contributor Covenant v1.3.0](https://www.contributor-covenant.org/version/1/3/0/).*\n\n[team]: https://github.com/rust-embedded/wg#the-libs-team\n"
        },
        {
          "name": "Cargo.toml",
          "type": "blob",
          "size": 2.224609375,
          "content": "[package]\nauthors = [\n  \"Jorge Aparicio <jorge@japaric.io>\",\n  \"Per Lindgren <per.lindgren@ltu.se>\",\n  \"Emil Fresk <emil.fresk@gmail.com>\",\n]\ncategories = [\"data-structures\", \"no-std\"]\ndescription = \"`static` friendly data structures that don't require dynamic memory allocation\"\ndocumentation = \"https://docs.rs/heapless\"\nedition = \"2021\"\nkeywords = [\"static\", \"no-heap\"]\nlicense = \"MIT OR Apache-2.0\"\nname = \"heapless\"\nrepository = \"https://github.com/rust-embedded/heapless\"\nversion = \"0.8.0\"\n\n[features]\n# Enable polyfilling of atomics via `portable-atomic`.\n# `portable-atomic` polyfills some functionality by default, but to get full atomics you must\n# enable one of its features to tell it how to do it. See `portable-atomic` documentation for details.\nportable-atomic = [\"dep:portable-atomic\"]\n\n# Enable polyfilling of atomics via portable-atomic, using critical section for locking\nportable-atomic-critical-section = [\"dep:portable-atomic\", \"portable-atomic\", \"portable-atomic?/critical-section\"]\n\n# Enable polyfilling of atomics via portable-atomic, using disabling interrupts for locking.\n# WARNING: this is only sound for single-core bare-metal privileged-mode targets!\nportable-atomic-unsafe-assume-single-core = [\"dep:portable-atomic\", \"portable-atomic\", \"portable-atomic?/unsafe-assume-single-core\"]\n\n# implement serde traits.\nserde = [\"dep:serde\"]\n\n# implement ufmt traits.\nufmt = [\"dep:ufmt-write\"]\n\n# Implement defmt::Format from defmt v0.3\ndefmt-03 = [\"dep:defmt\"]\n\n# Enable larger MPMC sizes.\nmpmc_large = []\n\nnightly = []\n\n[dependencies]\nportable-atomic = { version = \"1.0\", optional = true }\nhash32 = \"0.3.0\"\nserde = { version = \"1\", optional = true, default-features = false }\nufmt-write = { version = \"0.1\", optional = true }\ndefmt = { version = \">=0.2.0,<0.4\", optional = true }\n\n# for the pool module\n[target.'cfg(any(target_arch = \"arm\", target_pointer_width = \"32\", target_pointer_width = \"64\"))'.dependencies]\nstable_deref_trait = { version = \"1\", default-features = false }\n\n[dev-dependencies]\nufmt = \"0.2\"\nstatic_assertions = \"1.1.0\"\n\n[package.metadata.docs.rs]\nfeatures = [\"ufmt\", \"serde\", \"defmt-03\", \"mpmc_large\", \"portable-atomic-critical-section\"]\n# for the pool module\ntargets = [\"i686-unknown-linux-gnu\"]\nrustdoc-args = [\"--cfg\", \"docsrs\"]\n"
        },
        {
          "name": "LICENSE-APACHE",
          "type": "blob",
          "size": 10.5927734375,
          "content": "                              Apache License\n                        Version 2.0, January 2004\n                     http://www.apache.org/licenses/\n\nTERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n1. Definitions.\n\n   \"License\" shall mean the terms and conditions for use, reproduction,\n   and distribution as defined by Sections 1 through 9 of this document.\n\n   \"Licensor\" shall mean the copyright owner or entity authorized by\n   the copyright owner that is granting the License.\n\n   \"Legal Entity\" shall mean the union of the acting entity and all\n   other entities that control, are controlled by, or are under common\n   control with that entity. For the purposes of this definition,\n   \"control\" means (i) the power, direct or indirect, to cause the\n   direction or management of such entity, whether by contract or\n   otherwise, or (ii) ownership of fifty percent (50%) or more of the\n   outstanding shares, or (iii) beneficial ownership of such entity.\n\n   \"You\" (or \"Your\") shall mean an individual or Legal Entity\n   exercising permissions granted by this License.\n\n   \"Source\" form shall mean the preferred form for making modifications,\n   including but not limited to software source code, documentation\n   source, and configuration files.\n\n   \"Object\" form shall mean any form resulting from mechanical\n   transformation or translation of a Source form, including but\n   not limited to compiled object code, generated documentation,\n   and conversions to other media types.\n\n   \"Work\" shall mean the work of authorship, whether in Source or\n   Object form, made available under the License, as indicated by a\n   copyright notice that is included in or attached to the work\n   (an example is provided in the Appendix below).\n\n   \"Derivative Works\" shall mean any work, whether in Source or Object\n   form, that is based on (or derived from) the Work and for which the\n   editorial revisions, annotations, elaborations, or other modifications\n   represent, as a whole, an original work of authorship. For the purposes\n   of this License, Derivative Works shall not include works that remain\n   separable from, or merely link (or bind by name) to the interfaces of,\n   the Work and Derivative Works thereof.\n\n   \"Contribution\" shall mean any work of authorship, including\n   the original version of the Work and any modifications or additions\n   to that Work or Derivative Works thereof, that is intentionally\n   submitted to Licensor for inclusion in the Work by the copyright owner\n   or by an individual or Legal Entity authorized to submit on behalf of\n   the copyright owner. For the purposes of this definition, \"submitted\"\n   means any form of electronic, verbal, or written communication sent\n   to the Licensor or its representatives, including but not limited to\n   communication on electronic mailing lists, source code control systems,\n   and issue tracking systems that are managed by, or on behalf of, the\n   Licensor for the purpose of discussing and improving the Work, but\n   excluding communication that is conspicuously marked or otherwise\n   designated in writing by the copyright owner as \"Not a Contribution.\"\n\n   \"Contributor\" shall mean Licensor and any individual or Legal Entity\n   on behalf of whom a Contribution has been received by Licensor and\n   subsequently incorporated within the Work.\n\n2. Grant of Copyright License. Subject to the terms and conditions of\n   this License, each Contributor hereby grants to You a perpetual,\n   worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n   copyright license to reproduce, prepare Derivative Works of,\n   publicly display, publicly perform, sublicense, and distribute the\n   Work and such Derivative Works in Source or Object form.\n\n3. Grant of Patent License. Subject to the terms and conditions of\n   this License, each Contributor hereby grants to You a perpetual,\n   worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n   (except as stated in this section) patent license to make, have made,\n   use, offer to sell, sell, import, and otherwise transfer the Work,\n   where such license applies only to those patent claims licensable\n   by such Contributor that are necessarily infringed by their\n   Contribution(s) alone or by combination of their Contribution(s)\n   with the Work to which such Contribution(s) was submitted. If You\n   institute patent litigation against any entity (including a\n   cross-claim or counterclaim in a lawsuit) alleging that the Work\n   or a Contribution incorporated within the Work constitutes direct\n   or contributory patent infringement, then any patent licenses\n   granted to You under this License for that Work shall terminate\n   as of the date such litigation is filed.\n\n4. Redistribution. You may reproduce and distribute copies of the\n   Work or Derivative Works thereof in any medium, with or without\n   modifications, and in Source or Object form, provided that You\n   meet the following conditions:\n\n   (a) You must give any other recipients of the Work or\n       Derivative Works a copy of this License; and\n\n   (b) You must cause any modified files to carry prominent notices\n       stating that You changed the files; and\n\n   (c) You must retain, in the Source form of any Derivative Works\n       that You distribute, all copyright, patent, trademark, and\n       attribution notices from the Source form of the Work,\n       excluding those notices that do not pertain to any part of\n       the Derivative Works; and\n\n   (d) If the Work includes a \"NOTICE\" text file as part of its\n       distribution, then any Derivative Works that You distribute must\n       include a readable copy of the attribution notices contained\n       within such NOTICE file, excluding those notices that do not\n       pertain to any part of the Derivative Works, in at least one\n       of the following places: within a NOTICE text file distributed\n       as part of the Derivative Works; within the Source form or\n       documentation, if provided along with the Derivative Works; or,\n       within a display generated by the Derivative Works, if and\n       wherever such third-party notices normally appear. The contents\n       of the NOTICE file are for informational purposes only and\n       do not modify the License. You may add Your own attribution\n       notices within Derivative Works that You distribute, alongside\n       or as an addendum to the NOTICE text from the Work, provided\n       that such additional attribution notices cannot be construed\n       as modifying the License.\n\n   You may add Your own copyright statement to Your modifications and\n   may provide additional or different license terms and conditions\n   for use, reproduction, or distribution of Your modifications, or\n   for any such Derivative Works as a whole, provided Your use,\n   reproduction, and distribution of the Work otherwise complies with\n   the conditions stated in this License.\n\n5. Submission of Contributions. Unless You explicitly state otherwise,\n   any Contribution intentionally submitted for inclusion in the Work\n   by You to the Licensor shall be under the terms and conditions of\n   this License, without any additional terms or conditions.\n   Notwithstanding the above, nothing herein shall supersede or modify\n   the terms of any separate license agreement you may have executed\n   with Licensor regarding such Contributions.\n\n6. Trademarks. This License does not grant permission to use the trade\n   names, trademarks, service marks, or product names of the Licensor,\n   except as required for reasonable and customary use in describing the\n   origin of the Work and reproducing the content of the NOTICE file.\n\n7. Disclaimer of Warranty. Unless required by applicable law or\n   agreed to in writing, Licensor provides the Work (and each\n   Contributor provides its Contributions) on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n   implied, including, without limitation, any warranties or conditions\n   of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n   PARTICULAR PURPOSE. You are solely responsible for determining the\n   appropriateness of using or redistributing the Work and assume any\n   risks associated with Your exercise of permissions under this License.\n\n8. Limitation of Liability. In no event and under no legal theory,\n   whether in tort (including negligence), contract, or otherwise,\n   unless required by applicable law (such as deliberate and grossly\n   negligent acts) or agreed to in writing, shall any Contributor be\n   liable to You for damages, including any direct, indirect, special,\n   incidental, or consequential damages of any character arising as a\n   result of this License or out of the use or inability to use the\n   Work (including but not limited to damages for loss of goodwill,\n   work stoppage, computer failure or malfunction, or any and all\n   other commercial damages or losses), even if such Contributor\n   has been advised of the possibility of such damages.\n\n9. Accepting Warranty or Additional Liability. While redistributing\n   the Work or Derivative Works thereof, You may choose to offer,\n   and charge a fee for, acceptance of support, warranty, indemnity,\n   or other liability obligations and/or rights consistent with this\n   License. However, in accepting such obligations, You may act only\n   on Your own behalf and on Your sole responsibility, not on behalf\n   of any other Contributor, and only if You agree to indemnify,\n   defend, and hold each Contributor harmless for any liability\n   incurred by, or claims asserted against, such Contributor by reason\n   of your accepting any such warranty or additional liability.\n\nEND OF TERMS AND CONDITIONS\n\nAPPENDIX: How to apply the Apache License to your work.\n\n   To apply the Apache License to your work, attach the following\n   boilerplate notice, with the fields enclosed by brackets \"[]\"\n   replaced with your own identifying information. (Don't include\n   the brackets!)  The text should be enclosed in the appropriate\n   comment syntax for the file format. We also recommend that a\n   file or class name and description of purpose be included on the\n   same \"printed page\" as the copyright notice for easier\n   identification within third-party archives.\n\nCopyright [yyyy] [name of copyright owner]\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n\thttp://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n"
        },
        {
          "name": "LICENSE-MIT",
          "type": "blob",
          "size": 1.033203125,
          "content": "Copyright (c) 2017 Jorge Aparicio\n\nPermission is hereby granted, free of charge, to any\nperson obtaining a copy of this software and associated\ndocumentation files (the \"Software\"), to deal in the\nSoftware without restriction, including without\nlimitation the rights to use, copy, modify, merge,\npublish, distribute, sublicense, and/or sell copies of\nthe Software, and to permit persons to whom the Software\nis furnished to do so, subject to the following\nconditions:\n\nThe above copyright notice and this permission notice\nshall be included in all copies or substantial portions\nof the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF\nANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED\nTO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A\nPARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT\nSHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\nOF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR\nIN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\nDEALINGS IN THE SOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 1.125,
          "content": "[![crates.io](https://img.shields.io/crates/v/heapless.svg)](https://crates.io/crates/heapless)\n[![crates.io](https://img.shields.io/crates/d/heapless.svg)](https://crates.io/crates/heapless)\n\n# `heapless`\n\n> `static` friendly data structures that don't require dynamic memory allocation\n\nThis project is developed and maintained by the [libs team].\n\n## [Documentation](https://docs.rs/heapless/latest/heapless)\n\n## [Change log](CHANGELOG.md)\n\n## Tests\n\n``` console\n$ # run all\n$ cargo test --features serde\n\n$ # run only for example histbuf tests\n$ cargo test histbuf --features serde\n```\n\n## License\n\nLicensed under either of\n\n- Apache License, Version 2.0 ([LICENSE-APACHE](LICENSE-APACHE) or\n  http://www.apache.org/licenses/LICENSE-2.0)\n\n- MIT license ([LICENSE-MIT](LICENSE-MIT) or http://opensource.org/licenses/MIT)\n\nat your option.\n\n## Contribution\n\nUnless you explicitly state otherwise, any contribution intentionally submitted\nfor inclusion in the work by you, as defined in the Apache-2.0 license, shall be\ndual licensed as above, without any additional terms or conditions.\n\n[libs team]: https://github.com/rust-embedded/wg#the-libs-team\n"
        },
        {
          "name": "build.rs",
          "type": "blob",
          "size": 2.7109375,
          "content": "#![deny(warnings)]\n\nuse std::{\n    env,\n    error::Error,\n    fs,\n    path::Path,\n    process::{Command, ExitStatus, Stdio},\n};\n\nfn main() -> Result<(), Box<dyn Error>> {\n    println!(\"cargo::rustc-check-cfg=cfg(arm_llsc)\");\n    println!(\"cargo::rustc-check-cfg=cfg(has_atomic_load_store)\");\n\n    let target = env::var(\"TARGET\")?;\n\n    // Manually list targets that have atomic load/store, but no CAS.\n    // Remove when `cfg(target_has_atomic_load_store)` is stable.\n    // last updated nightly-2023-10-28\n    match &target[..] {\n        \"armv4t-none-eabi\"\n        | \"armv5te-none-eabi\"\n        | \"avr-unknown-gnu-atmega328\"\n        | \"bpfeb-unknown-none\"\n        | \"bpfel-unknown-none\"\n        | \"thumbv4t-none-eabi\"\n        | \"thumbv5te-none-eabi\"\n        | \"thumbv6m-none-eabi\" => println!(\"cargo:rustc-cfg=has_atomic_load_store\"),\n        _ => {}\n    };\n\n    // AArch64 instruction set contains `clrex` but not `ldrex` or `strex`; the\n    // probe will succeed when we already know to deny this target from LLSC.\n    if !target.starts_with(\"aarch64\") {\n        match compile_probe(ARM_LLSC_PROBE) {\n            Some(status) if status.success() => println!(\"cargo:rustc-cfg=arm_llsc\"),\n            _ => {}\n        }\n    }\n\n    Ok(())\n}\n\nconst ARM_LLSC_PROBE: &str = r#\"\n#![no_std]\n\n// `no_mangle` forces codegen, which makes llvm check the contents of the `asm!` macro\n#[no_mangle]\nunsafe fn asm() {\n    core::arch::asm!(\"clrex\");\n}\n\"#;\n\n// this function was taken from anyhow v1.0.63 build script\n// https://crates.io/crates/anyhow/1.0.63 (last visited 2022-09-02)\n// the code is licensed under 'MIT or APACHE-2.0'\nfn compile_probe(source: &str) -> Option<ExitStatus> {\n    let rustc = env::var_os(\"RUSTC\")?;\n    let out_dir = env::var_os(\"OUT_DIR\")?;\n    let probefile = Path::new(&out_dir).join(\"probe.rs\");\n    fs::write(&probefile, source).ok()?;\n\n    // Make sure to pick up Cargo rustc configuration.\n    let mut cmd = if let Some(wrapper) = env::var_os(\"RUSTC_WRAPPER\") {\n        let mut cmd = Command::new(wrapper);\n        // The wrapper's first argument is supposed to be the path to rustc.\n        cmd.arg(rustc);\n        cmd\n    } else {\n        Command::new(rustc)\n    };\n\n    cmd.stderr(Stdio::null())\n        .arg(\"--edition=2018\")\n        .arg(\"--crate-name=probe\")\n        .arg(\"--crate-type=lib\")\n        .arg(\"--out-dir\")\n        .arg(out_dir)\n        .arg(probefile);\n\n    if let Some(target) = env::var_os(\"TARGET\") {\n        cmd.arg(\"--target\").arg(target);\n    }\n\n    // If Cargo wants to set RUSTFLAGS, use that.\n    if let Ok(rustflags) = env::var(\"CARGO_ENCODED_RUSTFLAGS\") {\n        if !rustflags.is_empty() {\n            for arg in rustflags.split('\\x1f') {\n                cmd.arg(arg);\n            }\n        }\n    }\n\n    cmd.status().ok()\n}\n"
        },
        {
          "name": "cfail",
          "type": "tree",
          "content": null
        },
        {
          "name": "rustfmt.toml",
          "type": "blob",
          "size": 0.0341796875,
          "content": "format_code_in_doc_comments = true\n"
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "suppressions.txt",
          "type": "blob",
          "size": 0.2763671875,
          "content": "race:std::panic::catch_unwind\nrace:std::thread::scope\n\n# std::thread::spawn false positive; seen on Ubuntu 20.04 but not on Arch Linux (2022-04-29)\nrace:drop_in_place*JoinHandle\nrace:alloc::sync::Arc<*>::drop_slow\nrace:__call_tls_dtors\n\n# false positives in memcpy (?)\nrace:*memcpy*\n"
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}