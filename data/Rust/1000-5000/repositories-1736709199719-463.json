{
  "metadata": {
    "timestamp": 1736709199719,
    "page": 463,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjQ3MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "Smithay/smithay",
      "stars": 1985,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.037109375,
          "content": "target\nCargo.lock\n*.bk\n.vscode\n.vagga\n"
        },
        {
          "name": ".rustfmt.toml",
          "type": "blob",
          "size": 0.015625,
          "content": "max_width = 110\n"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 11.220703125,
          "content": "# Smithay Changelog\n\n## Unreleased\n\n### Breaking Changes\n\n**`wayland-server` was updated to 0.30:**\n- Most of the wayland frontend API is changed to follow the new request dispatching mechanism built around the `Dispatch` trait from `wayland-server`\n- Modules that provide handlers for Wayland globals now provide `DelegateDispatch` implementations, as well as macros to simplify the dispatching from your main state\n\n#### Clients & Protocols\n\n- Remove `xdg-shell-unstable-v6` backwards compatibility\n- `XdgPositionerState` moved to `XdgPopupState` and added to `XdgRequest::NewPopup`\n- `PopupSurface::send_configure` now checks the protocol version and returns an `Result`\n- `KeyboardHandle::input` filter closure now receives a `KeysymHandle` instead of a `Keysym` and returns a `FilterResult`.\n- `PointerButtonEvent::button` now returns an `Option<MouseButton>`.\n- `MouseButton` is now non-exhaustive.\n- Remove `Other` and add `Forward` and `Back` variants to `MouseButton`. Use the new `PointerButtonEvent::button_code` in place of `Other`.\n- `GrabStartData` has been renamed to `PointerGrabStartData`\n- The `slot` method on touch events no longer returns an `Option` and multi-touch capability is thus opaque to the compositor\n- `wayland::output::Output` now is created separately from it's `Global` as reflected by [`Output::new`] and the new [`Output::create_global] method.\n- `PointerHandle` no longer sends an implicit motion event when a grab is set, `time` has been replaced by an explicit `focus` parameter in [`PointerHandle::set_grab`]\n- `ToplevelSurface::send_configure`/`PopupSurface::send_configure`/`LayerSurface::send_configure` now always send a configure event regardless of changes and return\n  the serial of the configure event. `send_pending_configure` can be used to only send a configure event on pending changes.\n\n#### Backends\n\n- Rename `WinitInputBacked` to `WinitEventLoop`.\n- Rename `WinitInputError` to `WinitError`;\n- `WinitInputBackend` no longer implements `InputBackend`. Input events are now received from the `WinitEvent::Input` variant.\n- All winit backend internal event types now use `WinitInput` as the backend type.\n- `WinitEventLoop::dispatch_new_events` is now used to receive some `WinitEvent`s.\n- Added `TabletToolType::Unknown` as an option for tablet events\n- `render_texture` was removed from `Frame`, use `render_texture_at` or `render_texture_from_to` instead or use `Gles2Renderer::render_texture` as a direct replacement.\n- Remove `InputBackend::dispatch_new_events`, turning `InputBackend` into a definition of backend event types. Future input backends should be a `calloop::EventSource`.\n- Remove `InputBackend::EventError` associated type as it is unneeded since `dispatch_new_events` was removed.\n- `Swapchain` does not have a generic Userdata-parameter anymore, but utilizes `UserDataMap` instead\n- `GbmBufferedSurface::next_buffer` now additionally returns the age of the buffer\n- `Present` was merged into the `X11Surface`\n- `X11Surface::buffer` now additionally returns the age of the buffer\n- `X11Surface` now has an explicit `submit` function\n- `X11Surface` is now multi-window capable.\n- `Renderer::clear` now expects a second argument to optionally only clear parts of the buffer/surface\n- `Transform::transform_size` now takes a `Size` instead of two `u32`\n- `Gles2Renderer` now automatically flips the `render` result to account for OpenGLs coordinate system\n- `Frame::clear`, `Frame::render_texture_at` and `Frame::render_texture_from_to` now have an additional damage argument\n- `EGLNativeSurface` implementations overriding `swap_buffers` now receive and additional `damage` attribute to be used with `eglSwapBuffersWithDamageEXT` if desired\n- `EGLSurface::swap_buffers` now accepts an optional `damage` parameter\n- `WinitGraphicsBackend` does no longer provide a `render`-method and exposes its `Renderer` directly instead including new functions `bind` and `submit` to handle swapping buffers.\n- `ImportShm` was renamed to `ImportMem`\n- `ImportMem` and `ImportDma` were split and do now have accompanying traits `ImportMemWl` and `ImportDmaWl` to import wayland buffers.\n- Added `EGLSurface::get_size`\n- `EGLDisplay::get_extensions` was renamed to `extensions` and now returns a `&[String]`.\n- Added gesture input events, which are supported with the libinput backend.\n\n### Additions\n\n#### Clients & Protocols\n\n- `xdg_activation_v1` support\n- `wlr-layer-shell-unstable-v1` support\n- Added public api constants for the roles of `wl_shell_surface`, `zxdg_toplevel` and `xdg_toplevel`. See the\n  `shell::legacy` and `shell::xdg` modules for these constants.\n- Whether a surface is toplevel equivalent can be determined with the new function `shell::is_toplevel_equivalent`.\n- Setting the parent of a toplevel surface is now possible with the `xdg::ToplevelSurface::set_parent` function.\n- Add support for the zxdg-foreign-v2 protocol.\n- Support for `xdg_wm_base` protocol version 3\n- Added the option to initialize the dmabuf global with a client filter\n- `wayland::output::Output` now has user data attached to it and more functions to query its properties\n- Added a `KeyboardGrab` similar to the existing `PointerGrab`\n- `wayland::output::Output` now has a `current_scale` method to quickly retrieve its set scale.\n- `wayland::shell::wlr_layer::KeyboardInteractivity` now implements `PartialEq` and `Eq`.\n- Added `TouchHandle` for Wayland client touch support (see `Seat::get_touch`)\n- `wayland::output::Scale` was introduced to handle fractional scale values better\n- Support for `wl_output` global version 4\n- Support for `wl_seat` global version 7\n- Support for `wl_compositor` global version 5\n- Support for the `wp_viewporter` protocol\n- Support for the `zwp_input_method_v2` protocol\n- Support for the `zwp_text_input_v3` protocol\n\n#### Backends\n\n- New `x11` backend to run the compositor as an X11 client. Enabled through the `backend_x11` feature.\n- `x11rb` event source integration used in anvil's XWayland implementation is now part of smithay at `utils::x11rb`. Enabled through the `x11rb_event_source` feature.\n- `KeyState`, `MouseButton`, `ButtonState` and `Axis` in `backend::input` now derive `Hash`.\n- New `DrmNode` type in drm backend. This is primarily for use a backend which needs to run as client inside another session.\n- The button code for a `PointerButtonEvent` may now be obtained using `PointerButtonEvent::button_code`.\n- `Renderer` now allows texture filtering methods to be set.\n- `backend::renderer` has a new `utils`-module that can take care of client buffer management for you.\n- `EGLSurface::buffer_age` can be used to query the surface buffer age.\n- `GbmBufferedSurface::reset_buffers` can now be used to reset underlying buffers.\n- Added new `Offscreen` trait to create offscreen surfaces for `Renderer`s\n- Added functions to `ImportMem` to upload bitmaps from memory\n- Added `ExportDma` trait to export framebuffers and textures into dmabufs\n- Added `ExportMem` trait to copy framebuffers and textures into memory\n- Added `multigpu`-module to the renderer, which makes handling multi-gpu setups easier!\n- Added `backend::renderer::utils::import_surface_tree` to be able to import buffers before rendering\n- Added `EGLContext::display` to allow getting the underlying display of some context.\n- Make `EGLContext::dmabuf_render_formats` and `EGLContext::dmabuf_texture_formats` also accessible from `EGLDisplay`.\n\n#### Desktop\n\n- New `desktop` module to handle window placement, tracks popups, layer surface and various rendering helpers including automatic damage-tracking! (+so much more)\n\n#### Utils\n\n- `Rectangle` can now also be converted from f64 to i32 variants\n- `Rectangle::contains_rect` can be used to check if a rectangle is contained within another\n- `Coordinate` is now part of the public api, so it can be used for coordinate agnositic functions outside of the utils module or even out-of-tree\n\n### Bugfixes\n\n#### Clients & Protocols\n\n- `Multicache::has()` now correctly does what is expected of it\n- `xdg_shell` had an issue where it was possible that configured state gets overwritten before it was acked/committed.\n- `wl_keyboard` rewind the `keymap` file before passing it to the client\n- `wl_shm` properly validates parameters when creating a `wl_buffer`.\n- `ServerDnDGrab` and `DnDGrab` now correctly send data device `leave` event on button release\n- Client are now allowed to reassign the same role to a surface\n- `xdg_output` now applies the output transforms to the reported logical size\n\n#### Backends\n\n- EGLBufferReader now checks if buffers are alive before using them.\n- LibSeat no longer panics on seat disable event.\n- X11 backend will report an error when trying to present a dmabuf fails.\n\n### Anvil\n\n- Anvil now implements the x11 backend in smithay. Run by passing `--x11` into the arguments when launching.\n- Passing `ANVIL_MUTEX_LOG` in environment variables now uses the slower `Mutex` logging drain.\n- Only toplevel surfaces now get implicit keyboard focus\n- Fix popup drawing for fullscreen windows\n\n## version 0.3.0 (2021-07-25)\n\nLarge parts of Smithay were changed with numerous API changes. It is thus recommended to\napproach version 0.3 as if it was a new crate altogether compared to 0.2.\n\nThe most notable changes are:\n\n- Deep refactor of the graphics backends around a workflows centered on allocating graphics buffers,\n  and a Gles2-based renderer abstraction is provided.\n- Support for DRM atomic modesetting as well as client-provided DMABUF\n- Most backends are now `calloop` event sources generating events. The recommended organization for\n  your smithay-based compositor is thus to centralize most of your logic on a global state struct,\n  and delegate event handling to it via the shared data mechanism of `calloop`. Most of the callbacks\n  you provide to Smithay are given mutable access to this shared data.\n- The `wayland::compositor` handling logic now automatically handles state tracking and delayed commit\n  for wayland surfaces.\n\nMany thanks to the new contributors to Smithay, who contributed the following:\n\n- Support for [`libseat`](https://sr.ht/~kennylevinsen/seatd/) as a session backend, by\n  @PolyMeilex\n- Support for graphics tablets via the `tablet` protocol extension, by @PolyMeilex\n- Support for running Smithay on `aarch64` architectures, by @cmeissl\n- A rework of the `xdg-shell` handlers to better fit the protocol logic and correctly track configure\n  events, by @cmeissl\n- Basic Xwayland support, by @psychon\n\n## version 0.2.0 (2019-01-03)\n\n### General\n\n- **[Breaking]** Upgrade to wayland-rs 0.21\n- **[Breaking]** Moving the public dependencies to a `reexports` module\n- Migrate the codebase to Rust 2018\n\n### Backends\n\n- **[Breaking]** WinitBackend: Upgrade to winit 0.18\n- **[Breaking]** Global refactor of the DRM & Session backends\n- **[Breaking]** Restructuration of the backends around the `calloop` event-loop\n\n### Clients & Protocol\n\n- Basic XWayland support\n- Data device & Drag'n'Drop support\n- Custom client pointers support\n\n## version 0.1.0 (2017-10-01)\n\n### Protocol handling\n\n- Low-level handling routines for several wayland globals:\n  - `wayland::shm` handles `wl_shm`\n  - `wayland::compositor` handles `wl_compositor` and `wl_subcompositor`\n  - `wayland::shell` handles `wl_shell` and `xdg_shell`\n  - `wayland::seat` handles `wl_seat`\n  - `wayland::output` handles `wl_output`\n\n### Backend\n\n- Winit backend (EGL context & input)\n- DRM backend\n- libinput backend\n- glium integration\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 1.7509765625,
          "content": "# Contributing\n\nSmithay is open to contributions from anyone. Here are a few tips to get started if you want to participate.\n\n## Coordination\n\nMost discussion about features and their implementations takes place on github.\nIf you have questions, suggestions, ideas, you can open an issue to discuss it, or add your message in an already existing issue\nif it fits its scope.\n\nIf you want a more realtime discussion I (@vberger) have a Matrix room dedicated to Smithay and\nmy other wayland crates: [#smithay:matrix.org](https://matrix.to/#/#smithay:matrix.org). If you don't want to\nuse matrix, this room is also bridged to libera.chat IRC on #smithay.\n\n## Scope\n\nSmithay attempts to be as generic and un-opinionated as possible. As such, if you have an idea of a feature that would be usefull\nfor your compositor project and would like it to be integrated in Smithay, please consider whether it is in its scope:\n\n- If this is a very generic feature that probably many different projects would find useful, it can be integrated in Smithay\n- If it is a rather specific feature, but can be framed as a special case of a more general feature, this general feature is\n  likely worth adding to Smithay\n- If this feature is really specific to your use-case, it is out of scope for Smithay\n\n## Structure\n\nSmithay aims to be a modular hierarchical library:\n\n- Functionalities should be split into independent modules as much as possible\n- There can be dependencies in functionalities\n- Even if most people would directly use a high-level functionality, the lower level abstractions it is built on should\n  still be exposed independently if possible\n\nThe goal is for Smithay to be a \"use what you want\" library, and features that are not used should have no impact on the\napplication built with Smithay.\n"
        },
        {
          "name": "Cargo.toml",
          "type": "blob",
          "size": 5.2890625,
          "content": "[package]\nname = \"smithay\"\nversion = \"0.3.0\"\nauthors = [\"Victor Berger <victor.berger@m4x.org>\", \"Drakulix (Victoria Brekenfeld)\"]\nlicense = \"MIT\"\ndescription = \"Smithay is a library for writing wayland compositors.\"\nrepository = \"https://github.com/Smithay/smithay\"\nedition = \"2021\"\nreadme = \"README.md\"\nhomepage = \"https://smithay.github.io/\"\nkeywords = [\"wayland\", \"compositor\", \"graphics\", \"server\"]\ncategories = [\"gui\"]\nrust-version = \"1.80.1\"\n\n[package.metadata.docs.rs]\nfeatures = [\"test_all_features\"]\nrustdoc-args = [\"--cfg\", \"docsrs\"]\n\n[workspace]\nmembers = [\n    \"smithay-drm-extras\",\n    \"smallvil\",\n    \"anvil\",\n    \"wlcs_anvil\",\n    \"test_clients\",\n]\n\n[dependencies]\nappendlist = \"1.4\"\nash = { version = \"0.38.0\", optional = true }\nbitflags = \"2.2.1\"\ncalloop = \"0.14.0\"\ncursor-icon = \"1.0.0\"\ncgmath = \"0.18.0\"\ndowncast-rs = \"1.2.0\"\ndrm-fourcc = \"^2.2.0\"\ndrm = { version = \"0.14.0\", optional = true }\ndrm-ffi = { version = \"0.9.0\", optional = true }\nerrno = \"0.3.5\"\ngbm = { version = \"0.18.0\", optional = true, default-features = false, features = [\"drm-support\"] }\nglow = { version = \"0.14\", optional = true }\ninput = { version = \"0.9.0\", default-features = false, features=[\"libinput_1_19\"], optional = true }\nindexmap = \"2.0\"\nlibc = \"0.2.103\"\nlibseat = { version = \"0.2.1\", optional = true, default-features = false }\nlibloading = { version=\"0.8.0\", optional = true }\nrustix = { version = \"0.38.18\", features = [\"event\", \"fs\", \"mm\", \"net\", \"shm\", \"time\"] }\nrand = \"0.8.4\"\nscopeguard = { version = \"1.1.0\", optional = true }\ntracing = \"0.1.37\"\ntempfile = { version = \"3.0\", optional = true }\nthiserror = \"1.0.25\"\nudev = { version = \"0.9.0\", optional = true }\n# Require never `wayland-client`/`wayland-cursor` than winit uses to fix `-Z minimal-versions`\n# due to issue in older version.\nwayland-client = { version = \"0.31.3\", optional = true }\nwayland-cursor = { version = \"0.31.3\", optional = true }\nwayland-egl = { version = \"0.32.0\", optional = true }\nwayland-protocols = { version = \"0.32.5\", features = [\"unstable\", \"staging\", \"server\"], optional = true }\nwayland-protocols-wlr = { version = \"0.3.1\", features = [\"server\"], optional = true }\nwayland-protocols-misc = { version = \"0.3.1\", features = [\"server\"], optional = true }\nwayland-server = { version = \"0.31.0\", optional = true }\nwayland-sys = { version = \"0.31\", optional = true }\nwayland-backend = { version = \"0.3.5\", optional = true }\nwinit = { version = \"0.30.0\", default-features = false, features = [\"wayland\", \"wayland-dlopen\", \"x11\", \"rwh_06\"], optional = true }\nx11rb = { version = \"0.13.0\", optional = true }\nxkbcommon = { version = \"0.8.0\", features = [\"wayland\"]}\nencoding_rs = { version = \"0.8.33\", optional = true }\nprofiling = \"1.0.13\"\nsmallvec = \"1.11\"\npixman = { version = \"0.2.1\", features = [\"drm-fourcc\", \"sync\"], optional = true }\n\n\n[dev-dependencies]\nclap = { version = \"4\", features = [\"derive\"] }\ncriterion = { version = \"0.5\" }\nimage = \"0.25\"\ntracing-subscriber = { version = \"0.3.16\", features = [\"env-filter\"] }\n\n[build-dependencies]\ngl_generator = { version = \"0.14\", optional = true }\npkg-config = { version = \"0.3.17\", optional = true }\ncc = { version = \"1.0.79\", optional = true }\n\n[features]\ndefault = [\"backend_drm\", \"backend_gbm\", \"backend_libinput\", \"backend_udev\", \"backend_session_libseat\", \"backend_x11\", \"backend_winit\", \"desktop\", \"renderer_gl\", \"renderer_pixman\", \"renderer_multi\", \"xwayland\", \"wayland_frontend\", \"backend_vulkan\"]\nbackend_winit = [\"winit\", \"backend_egl\", \"wayland-client\", \"wayland-cursor\", \"wayland-egl\", \"renderer_gl\"]\nbackend_x11 = [\"x11rb\", \"x11rb/dri3\", \"x11rb/xfixes\", \"x11rb/xinput\", \"x11rb/present\", \"x11rb_event_source\", \"backend_gbm\", \"backend_drm\", \"backend_egl\"]\nbackend_drm = [\"drm\", \"drm-ffi\"]\nbackend_gbm = [\"gbm\", \"cc\", \"pkg-config\"]\nbackend_gbm_has_fd_for_plane = []\nbackend_gbm_has_create_with_modifiers2 = []\nbackend_egl = [\"gl_generator\", \"libloading\"]\nbackend_libinput = [\"input\"]\nbackend_session = []\nbackend_udev = [\"udev\", \"input/udev\"]\nbackend_vulkan = [\"ash\", \"scopeguard\"]\nbackend_session_libseat = [\"backend_session\", \"libseat\"]\ndesktop = []\nrenderer_gl = [\"gl_generator\", \"backend_egl\"]\nrenderer_glow = [\"renderer_gl\", \"glow\"]\nrenderer_multi = [\"backend_drm\"]\nrenderer_pixman = [\"pixman\"]\nrenderer_test = []\nuse_system_lib = [\"wayland_frontend\", \"wayland-backend/server_system\", \"wayland-sys\", \"gbm?/import-wayland\"]\nuse_bindgen = [\"drm-ffi/use_bindgen\", \"gbm/use_bindgen\", \"input/use_bindgen\"]\nwayland_frontend = [\"wayland-server\", \"wayland-protocols\", \"wayland-protocols-wlr\", \"wayland-protocols-misc\", \"tempfile\"]\nx11rb_event_source = [\"x11rb\"]\nxwayland = [\"encoding_rs\", \"wayland_frontend\", \"x11rb/composite\", \"x11rb/xfixes\", \"x11rb_event_source\", \"scopeguard\"]\ntest_all_features = [\"default\", \"use_system_lib\", \"renderer_glow\", \"renderer_test\"]\n\n[[example]]\nname = \"minimal\"\nrequired-features = [\"backend_winit\", \"renderer_gl\", \"wayland_frontend\"]\n\n[[example]]\nname = \"seat\"\nrequired-features = [\"wayland_frontend\"]\n\n[[example]]\nname = \"compositor\"\nrequired-features = [\"wayland_frontend\"]\n\n[[example]]\nname = \"vulkan\"\nrequired-features = [\"backend_vulkan\"]\n\n[[example]]\nname = \"buffer_test\"\nrequired-features = [\"backend_drm\", \"backend_gbm\", \"backend_egl\", \"backend_vulkan\", \"renderer_gl\"]\n\n[[bench]]\nname = \"benchmark\"\nharness = false\n\n[[bench]]\nname = \"geometry\"\nharness = false\n\n[profile.release-with-debug]\ninherits = \"release\"\ndebug = true\n"
        },
        {
          "name": "LICENSE.txt",
          "type": "blob",
          "size": 1.068359375,
          "content": "MIT License\n\nCopyright (c) 2017 Victor Berger and Victoria Brekenfeld\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 3.5556640625,
          "content": "<img align=\"right\" width=\"25%\" src=\"https://github.com/Smithay/smithay/assets/20758186/7a84ab10-e229-4823-bad8-9c647546407b\">\n\n# Smithay\n\n[![Crates.io](https://img.shields.io/crates/v/smithay.svg)](https://crates.io/crates/smithay)\n[![docs.rs](https://docs.rs/smithay/badge.svg)](https://docs.rs/smithay)\n[![Build Status](https://github.com/Smithay/smithay/workflows/Continuous%20Integration/badge.svg)](https://github.com/Smithay/smithay/actions)\n[![Join the chat on matrix at #smithay:matrix.org](https://img.shields.io/badge/%5Bm%5D-%23smithay%3Amatrix.org-blue.svg)](https://matrix.to/#/#smithay:matrix.org)\n![Join the chat via bridge on #smithay on libera.chat](https://img.shields.io/badge/IRC-%23Smithay-blue.svg)\n\nA smithy for rusty wayland compositors\n\n## Goals\n\nSmithay aims to provide building blocks to create wayland compositors in Rust. While not\nbeing a full-blown compositor, it'll provide objects and interfaces implementing common\nfunctionalities that pretty much any compositor will need, in a generic fashion.\n\nIt supports the [core Wayland protocols](https://gitlab.freedesktop.org/wayland/wayland), the official [protocol extensions](https://gitlab.freedesktop.org/wayland/wayland-protocols), and *some* external extensions, such as those made by and for [wlroots](https://gitlab.freedesktop.org/wlroots/wlr-protocols) and [KDE](https://invent.kde.org/libraries/plasma-wayland-protocols)\n<!-- https://github.com/Smithay/smithay/pull/779#discussion_r993640470 https://github.com/Smithay/smithay/issues/778 -->\n\nAlso:\n\n- **Documented:** Smithay strives to maintain a clear and detailed documentation of its API and its\n  functionalities. Compiled documentations are available on [docs.rs](https://docs.rs/smithay) for released\n  versions, and [here](https://smithay.github.io/smithay) for the master branch.\n- **Safety:** Smithay will target to be safe to use, because Rust.\n- **Modularity:** Smithay is not a framework, and will not be constraining. If there is a\n  part you don't want to use, you should not be forced to use it.\n- **High-level:** You should be able to not have to worry about gory low-level stuff (but \n  Smithay won't stop you if you really want to dive into it).\n\n\n## Anvil\n\nSmithay as a compositor library has its own sample compositor: anvil.\n\nTo get informations about it and how you can run it visit [anvil README](https://github.com/Smithay/smithay/blob/master/anvil/README.md)\n\n## Other compositors that use Smithay\n\n- [Cosmic](https://github.com/pop-os/cosmic-epoch): Next generation Cosmic desktop environment\n- [Catacomb](https://github.com/catacombing/catacomb): A Wayland Mobile Compositor\n- [MagmaWM](https://github.com/MagmaWM/MagmaWM): A versatile and customizable Wayland Compositor\n- [Niri](https://github.com/YaLTeR/niri): A scrollable-tiling Wayland compositor\n- [Strata](https://github.com/StrataWM/strata): A cutting-edge, robust and sleek Wayland compositor\n- [Pinnacle](https://github.com/Ottatop/pinnacle): A WIP Wayland compositor, inspired by AwesomeWM \n- [Sudbury](https://gitlab.freedesktop.org/bwidawsk/sudbury): Compositor designed for ChromeOS\n- [wprs](https://github.com/wayland-transpositor/wprs): Like [xpra](https://en.wikipedia.org/wiki/Xpra), but for Wayland, and written in\nRust.\n\n## System Dependencies\n\n(This list can depend on features you enable)\n\n- `libwayland`\n- `libxkbcommon`\n- `libudev`\n- `libinput`\n- `libgbm`\n- [`libseat`](https://git.sr.ht/~kennylevinsen/seatd)\n- `xwayland`\n\n## Contact us\n\nIf you have questions or want to discuss the project with us, our main chatroom is on Matrix: [`#smithay:matrix.org`](https://matrix.to/#/#smithay:matrix.org).\n"
        },
        {
          "name": "anvil",
          "type": "tree",
          "content": null
        },
        {
          "name": "benches",
          "type": "tree",
          "content": null
        },
        {
          "name": "build.rs",
          "type": "blob",
          "size": 4.6455078125,
          "content": "#![allow(clippy::disallowed_macros)]\n#[cfg(any(feature = \"backend_egl\", feature = \"renderer_gl\"))]\nfn gl_generate() {\n    use gl_generator::{Api, Fallbacks, Profile, Registry};\n    use std::{env, fs::File, path::PathBuf};\n\n    let dest = PathBuf::from(&env::var(\"OUT_DIR\").unwrap());\n\n    if env::var_os(\"CARGO_FEATURE_BACKEND_EGL\").is_some() {\n        let mut file = File::create(dest.join(\"egl_bindings.rs\")).unwrap();\n        Registry::new(\n            Api::Egl,\n            (1, 5),\n            Profile::Core,\n            Fallbacks::All,\n            [\n                \"EGL_KHR_create_context\",\n                \"EGL_EXT_create_context_robustness\",\n                \"EGL_KHR_create_context_no_error\",\n                \"EGL_KHR_no_config_context\",\n                \"EGL_EXT_pixel_format_float\",\n                \"EGL_EXT_device_base\",\n                \"EGL_EXT_device_enumeration\",\n                \"EGL_EXT_device_query\",\n                \"EGL_EXT_device_drm\",\n                \"EGL_EXT_device_drm_render_node\",\n                \"EGL_KHR_stream\",\n                \"EGL_KHR_stream_producer_eglsurface\",\n                \"EGL_EXT_platform_base\",\n                \"EGL_KHR_platform_x11\",\n                \"EGL_EXT_platform_x11\",\n                \"EGL_KHR_platform_wayland\",\n                \"EGL_EXT_platform_wayland\",\n                \"EGL_KHR_platform_gbm\",\n                \"EGL_MESA_platform_gbm\",\n                \"EGL_MESA_platform_surfaceless\",\n                \"EGL_EXT_platform_device\",\n                \"EGL_WL_bind_wayland_display\",\n                \"EGL_KHR_image_base\",\n                \"EGL_EXT_image_dma_buf_import\",\n                \"EGL_EXT_image_dma_buf_import_modifiers\",\n                \"EGL_MESA_image_dma_buf_export\",\n                \"EGL_KHR_gl_image\",\n                \"EGL_EXT_buffer_age\",\n                \"EGL_EXT_swap_buffers_with_damage\",\n                \"EGL_KHR_swap_buffers_with_damage\",\n                \"EGL_KHR_fence_sync\",\n                \"EGL_ANDROID_native_fence_sync\",\n                \"EGL_IMG_context_priority\",\n            ],\n        )\n        .write_bindings(gl_generator::GlobalGenerator, &mut file)\n        .unwrap();\n    }\n\n    if env::var_os(\"CARGO_FEATURE_RENDERER_GL\").is_some() {\n        let mut file = File::create(dest.join(\"gl_bindings.rs\")).unwrap();\n        Registry::new(\n            Api::Gles2,\n            (3, 2),\n            Profile::Compatibility,\n            Fallbacks::None,\n            [\n                \"GL_OES_EGL_image\",\n                \"GL_OES_EGL_image_external\",\n                \"GL_EXT_texture_format_BGRA8888\",\n                \"GL_EXT_unpack_subimage\",\n                \"GL_OES_EGL_sync\",\n            ],\n        )\n        .write_bindings(gl_generator::StructGenerator, &mut file)\n        .unwrap();\n    }\n}\n\n#[cfg(all(feature = \"backend_gbm\", not(feature = \"backend_gbm_has_fd_for_plane\")))]\nfn test_gbm_bo_fd_for_plane() {\n    let gbm = match pkg_config::probe_library(\"gbm\") {\n        Ok(lib) => lib,\n        Err(_) => {\n            println!(\"cargo:warning=failed to find gbm, assuming gbm_bo_get_fd_for_plane is unavailable\");\n            return;\n        }\n    };\n\n    let has_gbm_bo_get_fd_for_plane = cc::Build::new()\n        .file(\"test_gbm_bo_get_fd_for_plane.c\")\n        .includes(gbm.include_paths)\n        .warnings_into_errors(true)\n        .cargo_metadata(false)\n        .try_compile(\"test_gbm_bo_get_fd_for_plane\")\n        .is_ok();\n\n    if has_gbm_bo_get_fd_for_plane {\n        println!(\"cargo:rustc-cfg=feature=\\\"backend_gbm_has_fd_for_plane\\\"\");\n    }\n}\n\n#[cfg(all(\n    feature = \"backend_gbm\",\n    not(feature = \"backend_gbm_has_create_with_modifiers2\")\n))]\nfn test_gbm_bo_create_with_modifiers2() {\n    let gbm = match pkg_config::probe_library(\"gbm\") {\n        Ok(lib) => lib,\n        Err(_) => {\n            println!(\n                \"cargo:warning=failed to find gbm, assuming gbm_bo_create_with_modifiers2 is unavailable\"\n            );\n            return;\n        }\n    };\n\n    let has_gbm_bo_create_with_modifiers2 = cc::Build::new()\n        .file(\"test_gbm_bo_create_with_modifiers2.c\")\n        .includes(gbm.include_paths)\n        .warnings_into_errors(true)\n        .cargo_metadata(false)\n        .try_compile(\"test_gbm_bo_create_with_modifiers2\")\n        .is_ok();\n\n    if has_gbm_bo_create_with_modifiers2 {\n        println!(\"cargo:rustc-cfg=feature=\\\"backend_gbm_has_create_with_modifiers2\\\"\");\n    }\n}\n\nfn main() {\n    #[cfg(any(feature = \"backend_egl\", feature = \"renderer_gl\"))]\n    gl_generate();\n\n    #[cfg(all(feature = \"backend_gbm\", not(feature = \"backend_gbm_has_fd_for_plane\")))]\n    test_gbm_bo_fd_for_plane();\n    #[cfg(all(\n        feature = \"backend_gbm\",\n        not(feature = \"backend_gbm_has_create_with_modifiers2\")\n    ))]\n    test_gbm_bo_create_with_modifiers2();\n}\n"
        },
        {
          "name": "clippy.toml",
          "type": "blob",
          "size": 0.3427734375,
          "content": "msrv = \"1.80.1\"\ntype-complexity-threshold = 400\n\ndisallowed-macros = [\n    { path = \"std::print\", reason = \"We use tracing for logging\" },\n    { path = \"std::println\", reason = \"We use tracing for logging\" },\n    { path = \"std::eprint\", reason = \"We use tracing for logging\" },\n    { path = \"std::eprintln\", reason = \"We use tracing for logging\" },\n]\n"
        },
        {
          "name": "compile_wlcs.sh",
          "type": "blob",
          "size": 0.47265625,
          "content": "#!/bin/sh\n\nWLCS_SHA=12234affdc0a4cc104fbaf8a502efc5f822b973b\n\nif [ -f \"./wlcs/wlcs\" ] && [ \"$(cd wlcs; git rev-parse HEAD)\" = \"${WLCS_SHA}\" ] ; then\n    echo \"Using cached WLCS.\"\nelse\n    echo \"Compiling WLCS.\"\n    git clone https://github.com/MirServer/wlcs.git\n    cd wlcs || exit\n    # checkout a specific revision\n    git reset --hard \"${WLCS_SHA}\"\n    cmake -DWLCS_BUILD_ASAN=False -DWLCS_BUILD_TSAN=False -DWLCS_BUILD_UBSAN=False -DCMAKE_EXPORT_COMPILE_COMMANDS=1 .\n    make\nfi\n"
        },
        {
          "name": "doc_index.html",
          "type": "blob",
          "size": 0.1201171875,
          "content": "<!DOCTYPE html>\n<html>\n    <head>\n        <meta http-equiv=refresh content=0;url=smithay/index.html />\n    </head>\n</html>\n"
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "smallvil",
          "type": "tree",
          "content": null
        },
        {
          "name": "smithay-drm-extras",
          "type": "tree",
          "content": null
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "test_clients",
          "type": "tree",
          "content": null
        },
        {
          "name": "test_gbm_bo_create_with_modifiers2.c",
          "type": "blob",
          "size": 0.0927734375,
          "content": "#include <gbm.h>\n\nvoid test() {\n    gbm_bo_create_with_modifiers2(NULL, 0, 0, 0, NULL, 0, 0);\n}"
        },
        {
          "name": "test_gbm_bo_get_fd_for_plane.c",
          "type": "blob",
          "size": 0.0693359375,
          "content": "#include <gbm.h>\n\nvoid test() {\n    gbm_bo_get_fd_for_plane(NULL, 0);\n}"
        },
        {
          "name": "wlcs_anvil",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}