{
  "metadata": {
    "timestamp": 1736709310742,
    "page": 696,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjcwMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "stepchowfun/toast",
      "stars": 1572,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.072265625,
          "content": "# Keep this in sync with [ref:excluded_input_paths].\n/artifacts/\n/target/\n"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 10.376953125,
          "content": "# Changelog\n\nAll notable changes to this project will be documented in this file.\n\nThe format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/),\nand this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0.html).\n\n## [0.47.6] - 2024-02-21\n\n### Fixed\n- When a task fails due to `output_paths` not existing in the container, the `--shell` flag is no longer ignored.\n\n## [0.47.5] - 2023-06-18\n\n### Added\n- Toast supports a new platform: Windows on AArch64.\n\n## [0.47.4] - 2023-06-02\n\n### Added\n- Toast supports a new platform: musl Linux on AArch64.\n\n## [0.47.3] - 2023-05-23\n\n### Added\n- Toast supports a new platform: GNU Linux on AArch64.\n\n## [0.47.2] - 2023-05-13\n\n### Added\n- Toast supports a new platform: macOS on Apple silicon.\n\n## [0.47.1] - 2023-04-03\n\n### Added\n- Fixed a bug in `--force-image-pull` which would cause the flag to have no effect if the first task in the schedule is available in the local or remote cache. Also, the flag has been renamed to `--force-all`.\n\n## [0.47.0] - 2023-04-03\n\n### Added\n- Added support for `--force-image-pull` (thanks to @raennor).\n\n## [0.46.2] - 2023-03-08\n\n### Fixed\n- Various bugs related to paths on Windows have been fixed with the help of [`typed-path`](https://crates.io/crates/typed-path).\n\n## [0.46.1] - 2023-03-02\n\n### Fixed\n- `mount_paths` now works on Windows.\n\n## [0.46.0] - 2023-02-21\n\n### Added\n- Added support for `--output-dir`.\n\n## [0.45.5] - 2022-07-02\n\n### Fixed\n- Fixed a bug which would cause Toast to fail if `-s`/`--shell` is provided and `-f`/`--file` is set to a path with a single component (e.g., `toast.yml` rather than `./toast.yml`).\n\n## [0.45.4] - 2022-05-20\n\n### Fixed\n- Fixed a bug which would cause Toast to fail if the Docker image specifies a user other than `root`.\n\n## [0.45.3] - 2022-02-09\n\n### Fixed\n- Fixed a bug which would cause `input_paths` which correspond to files to be incorporated into the cache key even if they are denied by `excluded_input_paths`.\n\n## [0.45.2] - 2021-11-15\n\n### Fixed\n- Fixed a bug which could cause the cache key for a task to be computed incorrectly in rare situations.\n\n## [0.45.1] - 2021-11-05\n\n### Fixed\n- Added a workaround for the Docker limitation that bind mount paths must be absolute on the host. This would cause Toast to fail when using relative `mount_paths` in combination with the `-f`/`--file` flag.\n\n## [0.45.0] - 2021-09-23\n\n### Changed\n- `toast --list` now only includes tasks with a `description`. You can use this to control which tasks show up in the list.\n\n## [0.44.0] - 2021-09-23\n\n### Removed\n- Removed the deprecated `--repo` flag. Please use `--docker-repo` instead.\n\n## [0.43.0] - 2021-09-23\n\n### Added\n- Added support for `--docker-cli`. This enables users to switch from Docker to Podman, if they so choose.\n\n### Changed\n- `--repo` has been renamed to `--docker-repo`. `--repo` is still supported for now, but will be removed in a future release. Please use `--docker-repo` from now on. If you are using the `repo` option for the GitHub Action, please use `docker_repo` instead.\n\n## [0.42.1] - 2021-08-26\n\n### Fixed\n- Removed some debugging output that was mistakenly included in a previous release.\n\n## [0.42.0] - 2021-08-26\n\n### Changed\n- Toast no longer wastes time committing the container when a task is interrupted (e.g., by hitting CTRL+C).\n\n## [0.41.0] - 2021-08-21\n\n### Added\n- Added support for `command_prefix`.\n- Added 3 top-level fields to the toastfile format, which serve as defaults for the corresponding task-level fields: `location`, `user`, and `command_prefix`.\n\n## [0.40.0] - 2021-08-17\n\n### Added\n- Added support for `extra_docker_arguments`, thanks to Xiangru Lian.\n\n## [0.39.0] - 2021-08-08\n\n### Added\n- The `mount_paths` field now supports mounting a path on the host to a different path in the container, thanks to Xiangru Lian.\n\n## [0.38.0] - 2021-07-09\n\n### Changed\n- Toast now supports `input_paths` which are invalid UTF-8 on Windows.\n\n## [0.37.0] - 2021-07-07\n\n### Added\n- Added support for `--force TASK`.\n\n## [0.36.0] - 2021-07-06\n\n### Added\n- Added support for `excluded_input_paths`.\n\n### Fixed\n- Fixed a bug that would cause Docker images to be deleted prematurely.\n\n## [0.35.0] - 2021-07-06\n\n### Changed\n- When the final task being executed is not cached, Toast no longer commits the container to a temporary image and subsequently deletes it. This results in a significant performance boost in some situations.\n\n## [0.34.0] - 2021-07-06\n\n### Changed\n- The default location for the configuration file on macOS has been changed from `$HOME/Library/Preferences/toast/toast.yml` to `$HOME/Library/Application Support/toast/toast.yml`. See [this discussion](https://github.com/dirs-dev/directories-rs/issues/62) for details.\n\n## [0.33.0] - 2021-06-20\n\n### Added\n- Windows builds are now automated.\n\n## [0.32.0] - 2020-10-10\n\n### Added\n- Thanks to Mackenzie Clark, Toast now may support Windows. No stability guarantees are made regarding Windows support, but contributions that enhance or fix Windows support are welcome.\n\n## [0.31.0] - 2020-04-06\n\n### Added\n- Introduced `output_paths_on_failure`.\n\n## [0.30.0] - 2019-12-31\n\n### Fixed\n- Toast now decides whether to print colored output based on whether STDERR is connected to a TTY. Previously, this decision was based on whether STDOUT is connected to a TTY, even though Toast mostly prints colored output to STDERR.\n- When STDERR is not connected to a TTY, Toast now logs spinner messages. Previously, these messages were only displayed as part of a spinner animation when STDERR is connected to a TTY.\n\n## [0.29.0] - 2019-07-11\n\n### Changed\n- `mount_paths` are now allowed to be absolute. This is to support mounting the Docker IPC socket (usually located at `/var/run/docker.sock`) in the container for running Docker commands in tasks.\n\n## [0.28.0] - 2019-06-30\n\n### Changed\n- The container used for the `--shell` feature now uses the mount settings and ports from the last executed task, if any.\n\n## [0.27.0] - 2019-06-09\n\n### Fixed\n- Fixed a bug that would cause Toast to crash if the first task had no environment variables, no input paths, and no command to run.\n\n## [0.26.0] - 2019-06-09\n\n### Fixed\n- Fixed the way symlinks in `output_paths` are handled.\n\n## [0.25.0] - 2019-06-09\n\n### Fixed\n- Fixed the way symlinks in `input_paths` are handled.\n- Fix a bug that prevented the standard error output from being logged if a child process failed.\n\n## [0.24.0] - 2019-06-02\n\n### Changed\n- This release contains only internal improvements to the robustness of the code. Upgrading to this new version will invalidate existing cached tasks.\n\n## [0.23.0] - 2019-05-31\n\n### Fixed\n- Fixed a bug that would cause the `output_files` feature to fail if `/tmp` on the host is on a different mounted filesystem than the destination.\n\n## [0.22.0] - 2019-05-29\n\n### Added\n- Added the `--list` option to list all the tasks in the toastfile.\n- Added the `description` task field to be shown to the user when `--list` is used.\n\n## [0.21.0] - 2019-05-26\n\n### Added\n- Added the `mount_paths` feature.\n\n### Removed\n- Removed the `watch` feature in favor of `mount_paths`.\n\n## [0.20.0] - 2019-05-26\n\n### Changed\n- Toast now uses the environment, location, and user of the last task when running interactive shells for the `--shell` feature.\n- Toast no longer depends on `/bin/sh` existing in the containers it creates.\n\n## [0.19.0] - 2019-05-26\n\n### Fixed\n- Fix a bug that would cause failed tasks to be cached.\n\n### Changed\n- When using `--shell` with a failing task, the shell environment is now based on the container from when the task failed rather than the last succeeding task. This makes debugging failed tasks easier.\n\n## [0.18.0] - 2019-05-22\n\n### Fixed\n- Fixed a bug that would cause images to be far larger than necessary.\n\n## [0.17.0] - 2019-05-22\n\n### Added\n- Every release from this point forward will include checksums of the precompiled binaries.\n\n## [0.16.0] - 2019-05-21\n\n### Changed\n- Renamed the project from *Bake* to *Toast*.\n\n## [0.15.0] - 2019-05-20\n\n### Changed\n- Improved the performance of tasks that have no input paths and no command.\n- Revamped the filesystem watching feature.\n- Toast no longer depends on `chown` and `mkdir` in the container.\n- Toast now renders a spinner animation when reading files from the host.\n- Toast now requires that caching be disabled for tasks that expose ports or use filesystem watching.\n\n### Fixed\n- Fixed a bug that would cause the incorrect ports to be exposed in some situations.\n\n## [0.14.0] - 2019-05-19\n\n### Added\n- Added support for filesystem watching.\n\n### Changed\n- Changed the cache key format.\n\n## [0.13.0] - 2019-05-19\n\n### Added\n- Added support for port mapping.\n\n### Changed\n- The `--shell` option now applies even when there is a task failure.\n\n## [0.12.0] - 2019-05-18\n\n### Fixed\n- Fixed an issue that caused Toast to not work with Linux distributions which aren't based on GNU.\n\n### Changed\n- Optimized the spinner animation rendering.\n\n## [0.11.0] - 2019-05-18\n\n### Fixed\n- If the first task is a cache hit, Toast no longer pulls the base image.\n- Fixed a bug in which Toast would read from cache for tasks that have `cache: false`.\n\n## [0.10.0] - 2019-05-16\n\n### Changed\n- To match the way Toast runs tasks, the `--shell` feature no longer uses a login shell.\n\n## [0.9.0] - 2019-05-16\n\n### Fixed\n- Fixed a minor bug in the way Toast handles child processes that are killed by signals.\n\n## [0.8.0] - 2019-05-15\n\n### Fixed\n- Fixed a bug that would cause input paths to be read-only to non-root users in the container.\n\n## [0.7.0] - 2019-05-14\n\n### Added\n- Added helpful messages to the spinner animation.\n\n### Changed\n- Changed some log formatting to improve visual appeal.\n- Improved the performance of tasks which aren't cacheable.\n- Toast no longer respects filter files like `.gitignore`. Input paths are taken literally and match the behavior of output paths.\n\n### Fixed\n- Fixed a bug where Toast would try to copy an output file to a non-existent directory.\n- Fixed a bug in which Toast would incorrectly delete existing local cache entries when local cache writes are disabled.\n\n## [0.6.0] - 2019-05-09\n\n### Added\n- Added support for `output_paths`.\n\n### Changed\n- Renamed `paths` to `input_paths`.\n\n### Removed\n- Removed support for fancy word wrapping because it interacted poorly with ANSI color escape sequences.\n\n## [0.5.0] - 2019-05-08\n\n### Added\n- Added a spinner animation to entertain the user.\n- Added more colors and improved some log messages.\n\n### Fixed\n- Fixed some minor issues with signal handling.\n\n## [0.4.0] - 2019-05-07\n\n### Added\n- Added this changelog.\n"
        },
        {
          "name": "CODE_OF_CONDUCT.md",
          "type": "blob",
          "size": 3.40625,
          "content": "# Contributor Covenant Code of Conduct\n\n## Our pledge\n\nIn the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to making participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, sex characteristics, gender identity and expression, level of experience, education, socio-economic status, nationality, personal appearance, race, religion, or sexual identity and orientation.\n\n## Our standards\n\nExamples of behavior that contributes to creating a positive environment include:\n\n* Using welcoming and inclusive language\n* Being respectful of differing viewpoints and experiences\n* Gracefully accepting constructive criticism\n* Focusing on what is best for the community\n* Showing empathy towards other community members\n\nExamples of unacceptable behavior by participants include:\n\n* The use of sexualized language or imagery and unwelcome sexual attention or\n advances\n* Trolling, insulting/derogatory comments, and personal or political attacks\n* Public or private harassment\n* Publishing others' private information, such as a physical or electronic\n address, without explicit permission\n* Other conduct which could reasonably be considered inappropriate in a\n professional setting\n\n## Our responsibilities\n\nProject maintainers are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response to any instances of unacceptable behavior.\n\nProject maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful.\n\n## Scope\n\nThis Code of Conduct applies both within project spaces and in public spaces when an individual is representing the project or its community. Examples of representing a project or community include using an official project e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event. Representation of a project may be further defined and clarified by project maintainers.\n\n## Enforcement\n\nInstances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting the project team at [stephan@stephanboyer.com](mailto:stephan@stephanboyer.com). All complaints will be reviewed and investigated and will result in a response that is deemed necessary and appropriate to the circumstances. The project team is obligated to maintain confidentiality with regard to the reporter of an incident. Further details of specific enforcement policies may be posted separately.\n\nProject maintainers who do not follow or enforce the Code of Conduct in good faith may face temporary or permanent repercussions as determined by other members of the project's leadership.\n\n## Attribution\n\nThis Code of Conduct is adapted from the [Contributor Covenant](https://www.contributor-covenant.org), version 1.4, available at [https://www.contributor-covenant.org/version/1/4/code-of-conduct.html](https://www.contributor-covenant.org/version/1/4/code-of-conduct.html).\n\nFor answers to common questions about this code of conduct, see [https://www.contributor-covenant.org/faq](https://www.contributor-covenant.org/faq).\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 2.123046875,
          "content": "# Contributing\n\nThank you for your interest in contributing! You can contribute by filing [issues](https://github.com/stepchowfun/toast/issues) and submitting [pull requests](https://github.com/stepchowfun/toast/pulls). Please observe our [code of conduct](https://github.com/stepchowfun/toast/blob/main/CODE_OF_CONDUCT.md)<!-- [file:CODE_OF_CONDUCT.md] -->.\n\nIf you submit a pull request, please ensure your change passes the [GitHub Actions](https://github.com/stepchowfun/toast/actions) CI checks. This will be apparent from the required status check(s) in the pull request.\n\n## Rust style guide\n\nWe're fortunate to have good tooling around enforcing a consistent style throughout the codebase. If you have [Toast](https://github.com/stepchowfun/toast), you can run the various lint checks by running `toast lint`. Otherwise, you can rely on our CI to do it for you. Here, we make note of a few conventions which are not yet enforced automatically. Please adhere to these conventions when possible, and provide appropriate justification for deviations from this guide. If you notice any style violations which appear unintentional, we invite you to bring them to our attention.\n\n### Comments\n\n**Rule:** Comments should be written in American English.\n\n**Rule:** Comments should always be capitalized unless they start with a code-like expression (see below).\n\n**Rule:** Comments which are sentences should be punctuated appropriately. For example:\n\n```rust\n// The following logic implements beta reduction.\n```\n\n**Rule:** Comments which are not sentences should not have a trailing period. For example:\n\n```rust\n// Already normalized\n```\n\n**Rule:** Code-like expressions, such as variable names, should be surrounded by backticks. For example:\n\n```rust\n// `source_range` is a half-open interval, closed on the left and open on the right.\n```\n\n### Trailing commas\n\nThe linter enforces that items in multi-line sequences (e.g., function arguments and macro arguments) have trailing commas.\n\n**Rule:** Macros should be written to accept trailing commas as follows:\n\n```rust\nmacro_rules! my_macro {\n    ($foo:expr, $bar:expr, $baz:expr $(,)?) => {{\n        ...\n    }};\n}\n```\n"
        },
        {
          "name": "Cargo.lock",
          "type": "blob",
          "size": 23.4384765625,
          "content": "# This file is automatically @generated by Cargo.\n# It is not intended for manual editing.\nversion = 3\n\n[[package]]\nname = \"aho-corasick\"\nversion = \"1.1.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8e60d3430d3a69478ad0993f19238d2df97c507009a52b3c10addcd7f6bcb916\"\ndependencies = [\n \"memchr\",\n]\n\n[[package]]\nname = \"ansi_term\"\nversion = \"0.12.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d52a9bb7ec0cf484c551830a7ce27bd20d67eac647e1befb56b0be4ee39a55d2\"\ndependencies = [\n \"winapi\",\n]\n\n[[package]]\nname = \"atty\"\nversion = \"0.2.14\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d9b39be18770d11421cdb1b9947a45dd3f37e93092cbf377614828a319d5fee8\"\ndependencies = [\n \"hermit-abi\",\n \"libc\",\n \"winapi\",\n]\n\n[[package]]\nname = \"autocfg\"\nversion = \"1.3.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"0c4b4d0bd25bd0b74681c0ad21497610ce1b7c91b1022cd21c80c6fbdd9476b0\"\n\n[[package]]\nname = \"bitflags\"\nversion = \"1.3.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"bef38d45163c2f1dde094a7dfd33ccf595c92905c8f8f4fdc18d06fb1037718a\"\n\n[[package]]\nname = \"bitflags\"\nversion = \"2.6.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b048fb63fd8b5923fc5aa7b340d8e156aec7ec02f0c78fa8a6ddc2613f6f71de\"\n\n[[package]]\nname = \"block-buffer\"\nversion = \"0.9.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"4152116fd6e9dadb291ae18fc1ec3575ed6d84c29642d97890f4b4a3417297e4\"\ndependencies = [\n \"generic-array\",\n]\n\n[[package]]\nname = \"cfg-if\"\nversion = \"1.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"baf1de4339761588bc0619e3cbc0120ee582ebb74b53b4efbf79117bd2da40fd\"\n\n[[package]]\nname = \"cfg_aliases\"\nversion = \"0.1.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"fd16c4719339c4530435d38e511904438d07cce7950afa3718a84ac36c10e89e\"\n\n[[package]]\nname = \"clap\"\nversion = \"2.34.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a0610544180c38b88101fecf2dd634b174a62eef6946f84dfc6a7127512b381c\"\ndependencies = [\n \"ansi_term\",\n \"atty\",\n \"bitflags 1.3.2\",\n \"strsim\",\n \"term_size\",\n \"textwrap\",\n \"unicode-width\",\n \"vec_map\",\n]\n\n[[package]]\nname = \"colored\"\nversion = \"2.1.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"cbf2150cce219b664a8a70df7a1f933836724b503f8a413af9365b4dcc4d90b8\"\ndependencies = [\n \"lazy_static\",\n \"windows-sys 0.48.0\",\n]\n\n[[package]]\nname = \"console\"\nversion = \"0.15.8\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"0e1f83fc076bd6dd27517eacdf25fef6c4dfe5f1d7448bafaaf3a26f13b5e4eb\"\ndependencies = [\n \"encode_unicode\",\n \"lazy_static\",\n \"libc\",\n \"windows-sys 0.52.0\",\n]\n\n[[package]]\nname = \"cpufeatures\"\nversion = \"0.2.12\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"53fe5e26ff1b7aef8bca9c6080520cfb8d9333c7568e1829cef191a9723e5504\"\ndependencies = [\n \"libc\",\n]\n\n[[package]]\nname = \"crossbeam\"\nversion = \"0.8.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1137cd7e7fc0fb5d3c5a8678be38ec56e819125d8d7907411fe24ccb943faca8\"\ndependencies = [\n \"crossbeam-channel\",\n \"crossbeam-deque\",\n \"crossbeam-epoch\",\n \"crossbeam-queue\",\n \"crossbeam-utils\",\n]\n\n[[package]]\nname = \"crossbeam-channel\"\nversion = \"0.5.13\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"33480d6946193aa8033910124896ca395333cae7e2d1113d1fef6c3272217df2\"\ndependencies = [\n \"crossbeam-utils\",\n]\n\n[[package]]\nname = \"crossbeam-deque\"\nversion = \"0.8.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"613f8cc01fe9cf1a3eb3d7f488fd2fa8388403e97039e2f73692932e291a770d\"\ndependencies = [\n \"crossbeam-epoch\",\n \"crossbeam-utils\",\n]\n\n[[package]]\nname = \"crossbeam-epoch\"\nversion = \"0.9.18\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"5b82ac4a3c2ca9c3460964f020e1402edd5753411d7737aa39c3714ad1b5420e\"\ndependencies = [\n \"crossbeam-utils\",\n]\n\n[[package]]\nname = \"crossbeam-queue\"\nversion = \"0.3.11\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"df0346b5d5e76ac2fe4e327c5fd1118d6be7c51dfb18f9b7922923f287471e35\"\ndependencies = [\n \"crossbeam-utils\",\n]\n\n[[package]]\nname = \"crossbeam-utils\"\nversion = \"0.8.20\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"22ec99545bb0ed0ea7bb9b8e1e9122ea386ff8a48c0922e43f36d45ab09e0e80\"\n\n[[package]]\nname = \"ctrlc\"\nversion = \"3.4.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"672465ae37dc1bc6380a6547a8883d5dd397b0f1faaad4f265726cc7042a5345\"\ndependencies = [\n \"nix\",\n \"windows-sys 0.52.0\",\n]\n\n[[package]]\nname = \"digest\"\nversion = \"0.9.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d3dd60d1080a57a05ab032377049e0591415d2b31afd7028356dbf3cc6dcb066\"\ndependencies = [\n \"generic-array\",\n]\n\n[[package]]\nname = \"dirs\"\nversion = \"3.0.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"30baa043103c9d0c2a57cf537cc2f35623889dc0d405e6c3cccfadbc81c71309\"\ndependencies = [\n \"dirs-sys\",\n]\n\n[[package]]\nname = \"dirs-sys\"\nversion = \"0.3.7\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1b1d1d91c932ef41c0f2663aa8b0ca0342d444d842c06914aa0a7e352d0bada6\"\ndependencies = [\n \"libc\",\n \"redox_users\",\n \"winapi\",\n]\n\n[[package]]\nname = \"encode_unicode\"\nversion = \"0.3.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a357d28ed41a50f9c765dbfe56cbc04a64e53e5fc58ba79fbc34c10ef3df831f\"\n\n[[package]]\nname = \"env_logger\"\nversion = \"0.8.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a19187fea3ac7e84da7dacf48de0c45d63c6a76f9490dae389aead16c243fce3\"\ndependencies = [\n \"atty\",\n \"humantime\",\n \"log\",\n \"regex\",\n \"termcolor\",\n]\n\n[[package]]\nname = \"errno\"\nversion = \"0.3.9\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"534c5cf6194dfab3db3242765c03bbe257cf92f22b38f6bc0c58d59108a820ba\"\ndependencies = [\n \"libc\",\n \"windows-sys 0.52.0\",\n]\n\n[[package]]\nname = \"fastrand\"\nversion = \"2.1.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"9fc0510504f03c51ada170672ac806f1f105a88aa97a5281117e1ddc3368e51a\"\n\n[[package]]\nname = \"filetime\"\nversion = \"0.2.23\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1ee447700ac8aa0b2f2bd7bc4462ad686ba06baa6727ac149a2d6277f0d240fd\"\ndependencies = [\n \"cfg-if\",\n \"libc\",\n \"redox_syscall\",\n \"windows-sys 0.52.0\",\n]\n\n[[package]]\nname = \"generic-array\"\nversion = \"0.14.7\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"85649ca51fd72272d7821adaf274ad91c288277713d9c18820d8499a7ff69e9a\"\ndependencies = [\n \"typenum\",\n \"version_check\",\n]\n\n[[package]]\nname = \"getrandom\"\nversion = \"0.2.15\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"c4567c8db10ae91089c99af84c68c38da3ec2f087c3f82960bcdbf3656b6f4d7\"\ndependencies = [\n \"cfg-if\",\n \"libc\",\n \"wasi\",\n]\n\n[[package]]\nname = \"hashbrown\"\nversion = \"0.12.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8a9ee70c43aaf417c914396645a0fa852624801b24ebb7ae78fe8272889ac888\"\n\n[[package]]\nname = \"hermit-abi\"\nversion = \"0.1.19\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"62b467343b94ba476dcb2500d242dadbb39557df889310ac77c5d99100aaac33\"\ndependencies = [\n \"libc\",\n]\n\n[[package]]\nname = \"hex\"\nversion = \"0.4.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"7f24254aa9a54b5c858eaee2f5bccdb46aaf0e486a595ed5fd8f86ba55232a70\"\n\n[[package]]\nname = \"humantime\"\nversion = \"2.1.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"9a3a5bfb195931eeb336b2a7b4d761daec841b97f947d34394601737a7bba5e4\"\n\n[[package]]\nname = \"indexmap\"\nversion = \"1.9.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"bd070e393353796e801d209ad339e89596eb4c8d430d18ede6a1cced8fafbd99\"\ndependencies = [\n \"autocfg\",\n \"hashbrown\",\n]\n\n[[package]]\nname = \"indicatif\"\nversion = \"0.16.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"2d207dc617c7a380ab07ff572a6e52fa202a2a8f355860ac9c38e23f8196be1b\"\ndependencies = [\n \"console\",\n \"lazy_static\",\n \"number_prefix\",\n \"regex\",\n]\n\n[[package]]\nname = \"lazy_static\"\nversion = \"1.5.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"bbd2bcb4c963f2ddae06a2efc7e9f3591312473c50c6685e1f298068316e66fe\"\n\n[[package]]\nname = \"libc\"\nversion = \"0.2.155\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"97b3888a4aecf77e811145cadf6eef5901f4782c53886191b2f693f24761847c\"\n\n[[package]]\nname = \"libredox\"\nversion = \"0.1.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"c0ff37bd590ca25063e35af745c343cb7a0271906fb7b37e4813e8f79f00268d\"\ndependencies = [\n \"bitflags 2.6.0\",\n \"libc\",\n]\n\n[[package]]\nname = \"linked-hash-map\"\nversion = \"0.5.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"0717cef1bc8b636c6e1c1bbdefc09e6322da8a9321966e8928ef80d20f7f770f\"\n\n[[package]]\nname = \"linux-raw-sys\"\nversion = \"0.4.14\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"78b3ae25bc7c8c38cec158d1f2757ee79e9b3740fbc7ccf0e59e4b08d793fa89\"\n\n[[package]]\nname = \"log\"\nversion = \"0.4.22\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a7a70ba024b9dc04c27ea2f0c0548feb474ec5c54bba33a7f72f873a39d07b24\"\n\n[[package]]\nname = \"memchr\"\nversion = \"2.7.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"78ca9ab1a0babb1e7d5695e3530886289c18cf2f87ec19a575a0abdce112e3a3\"\n\n[[package]]\nname = \"nix\"\nversion = \"0.28.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ab2156c4fce2f8df6c499cc1c763e4394b7482525bf2a9701c9d79d215f519e4\"\ndependencies = [\n \"bitflags 2.6.0\",\n \"cfg-if\",\n \"cfg_aliases\",\n \"libc\",\n]\n\n[[package]]\nname = \"number_prefix\"\nversion = \"0.4.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"830b246a0e5f20af87141b25c173cd1b609bd7779a4617d6ec582abaf90870f3\"\n\n[[package]]\nname = \"opaque-debug\"\nversion = \"0.3.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"c08d65885ee38876c4f86fa503fb49d7b507c2b62552df7c70b2fce627e06381\"\n\n[[package]]\nname = \"proc-macro2\"\nversion = \"1.0.86\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"5e719e8df665df0d1c8fbfd238015744736151d4445ec0836b8e628aae103b77\"\ndependencies = [\n \"unicode-ident\",\n]\n\n[[package]]\nname = \"quote\"\nversion = \"1.0.36\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"0fa76aaf39101c457836aec0ce2316dbdc3ab723cdda1c6bd4e6ad4208acaca7\"\ndependencies = [\n \"proc-macro2\",\n]\n\n[[package]]\nname = \"redox_syscall\"\nversion = \"0.4.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"4722d768eff46b75989dd134e5c353f0d6296e5aaa3132e776cbdb56be7731aa\"\ndependencies = [\n \"bitflags 1.3.2\",\n]\n\n[[package]]\nname = \"redox_users\"\nversion = \"0.4.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"bd283d9651eeda4b2a83a43c1c91b266c40fd76ecd39a50a8c630ae69dc72891\"\ndependencies = [\n \"getrandom\",\n \"libredox\",\n \"thiserror\",\n]\n\n[[package]]\nname = \"regex\"\nversion = \"1.10.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b91213439dad192326a0d7c6ee3955910425f441d7038e0d6933b0aec5c4517f\"\ndependencies = [\n \"aho-corasick\",\n \"memchr\",\n \"regex-automata\",\n \"regex-syntax\",\n]\n\n[[package]]\nname = \"regex-automata\"\nversion = \"0.4.7\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"38caf58cc5ef2fed281f89292ef23f6365465ed9a41b7a7754eb4e26496c92df\"\ndependencies = [\n \"aho-corasick\",\n \"memchr\",\n \"regex-syntax\",\n]\n\n[[package]]\nname = \"regex-syntax\"\nversion = \"0.8.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"7a66a03ae7c801facd77a29370b4faec201768915ac14a721ba36f20bc9c209b\"\n\n[[package]]\nname = \"rustix\"\nversion = \"0.38.34\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"70dc5ec042f7a43c4a73241207cecc9873a06d45debb38b329f8541d85c2730f\"\ndependencies = [\n \"bitflags 2.6.0\",\n \"errno\",\n \"libc\",\n \"linux-raw-sys\",\n \"windows-sys 0.52.0\",\n]\n\n[[package]]\nname = \"ryu\"\nversion = \"1.0.18\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f3cb5ba0dc43242ce17de99c180e96db90b235b8a9fdc9543c96d2209116bd9f\"\n\n[[package]]\nname = \"same-file\"\nversion = \"1.0.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"93fc1dc3aaa9bfed95e02e6eadabb4baf7e3078b0bd1b4d7b6b0b68378900502\"\ndependencies = [\n \"winapi-util\",\n]\n\n[[package]]\nname = \"scopeguard\"\nversion = \"1.2.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"94143f37725109f92c262ed2cf5e59bce7498c01bcc1502d7b9afe439a4e9f49\"\n\n[[package]]\nname = \"serde\"\nversion = \"1.0.204\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"bc76f558e0cbb2a839d37354c575f1dc3fdc6546b5be373ba43d95f231bf7c12\"\ndependencies = [\n \"serde_derive\",\n]\n\n[[package]]\nname = \"serde_derive\"\nversion = \"1.0.204\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e0cd7e117be63d3c3678776753929474f3b04a43a080c744d6b0ae2a8c28e222\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn\",\n]\n\n[[package]]\nname = \"serde_yaml\"\nversion = \"0.8.26\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"578a7433b776b56a35785ed5ce9a7e777ac0598aac5a6dd1b4b18a307c7fc71b\"\ndependencies = [\n \"indexmap\",\n \"ryu\",\n \"serde\",\n \"yaml-rust\",\n]\n\n[[package]]\nname = \"sha2\"\nversion = \"0.9.9\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"4d58a1e1bf39749807d89cf2d98ac2dfa0ff1cb3faa38fbb64dd88ac8013d800\"\ndependencies = [\n \"block-buffer\",\n \"cfg-if\",\n \"cpufeatures\",\n \"digest\",\n \"opaque-debug\",\n]\n\n[[package]]\nname = \"strsim\"\nversion = \"0.8.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8ea5119cdb4c55b55d432abb513a0429384878c15dde60cc77b1c99de1a95a6a\"\n\n[[package]]\nname = \"syn\"\nversion = \"2.0.72\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"dc4b9b9bf2add8093d3f2c0204471e951b2285580335de42f9d2534f3ae7a8af\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"unicode-ident\",\n]\n\n[[package]]\nname = \"tar\"\nversion = \"0.4.41\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"cb797dad5fb5b76fcf519e702f4a589483b5ef06567f160c392832c1f5e44909\"\ndependencies = [\n \"filetime\",\n \"libc\",\n \"xattr\",\n]\n\n[[package]]\nname = \"tempfile\"\nversion = \"3.10.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"85b77fafb263dd9d05cbeac119526425676db3784113aa9295c88498cbf8bff1\"\ndependencies = [\n \"cfg-if\",\n \"fastrand\",\n \"rustix\",\n \"windows-sys 0.52.0\",\n]\n\n[[package]]\nname = \"term_size\"\nversion = \"0.3.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1e4129646ca0ed8f45d09b929036bafad5377103edd06e50bf574b353d2b08d9\"\ndependencies = [\n \"libc\",\n \"winapi\",\n]\n\n[[package]]\nname = \"termcolor\"\nversion = \"1.4.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"06794f8f6c5c898b3275aebefa6b8a1cb24cd2c6c79397ab15774837a0bc5755\"\ndependencies = [\n \"winapi-util\",\n]\n\n[[package]]\nname = \"textwrap\"\nversion = \"0.11.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d326610f408c7a4eb6f51c37c330e496b08506c9457c9d34287ecc38809fb060\"\ndependencies = [\n \"term_size\",\n \"unicode-width\",\n]\n\n[[package]]\nname = \"thiserror\"\nversion = \"1.0.63\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"c0342370b38b6a11b6cc11d6a805569958d54cfa061a29969c3b5ce2ea405724\"\ndependencies = [\n \"thiserror-impl\",\n]\n\n[[package]]\nname = \"thiserror-impl\"\nversion = \"1.0.63\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a4558b58466b9ad7ca0f102865eccc95938dca1a74a856f2b57b6629050da261\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn\",\n]\n\n[[package]]\nname = \"toast\"\nversion = \"0.47.6\"\ndependencies = [\n \"atty\",\n \"clap\",\n \"colored\",\n \"crossbeam\",\n \"ctrlc\",\n \"dirs\",\n \"env_logger\",\n \"hex\",\n \"indicatif\",\n \"lazy_static\",\n \"log\",\n \"scopeguard\",\n \"serde\",\n \"serde_yaml\",\n \"sha2\",\n \"tar\",\n \"tempfile\",\n \"typed-path\",\n \"walkdir\",\n]\n\n[[package]]\nname = \"typed-path\"\nversion = \"0.3.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"4b26db9a2991a51e1e805820c2cabfc974f625ad6457be8a3eaba4c78361484e\"\n\n[[package]]\nname = \"typenum\"\nversion = \"1.17.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"42ff0bf0c66b8238c6f3b578df37d0b7848e55df8577b3f74f92a69acceeb825\"\n\n[[package]]\nname = \"unicode-ident\"\nversion = \"1.0.12\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3354b9ac3fae1ff6755cb6db53683adb661634f67557942dea4facebec0fee4b\"\n\n[[package]]\nname = \"unicode-width\"\nversion = \"0.1.13\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"0336d538f7abc86d282a4189614dfaa90810dfc2c6f6427eaf88e16311dd225d\"\n\n[[package]]\nname = \"vec_map\"\nversion = \"0.8.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f1bddf1187be692e79c5ffeab891132dfb0f236ed36a43c7ed39f1165ee20191\"\n\n[[package]]\nname = \"version_check\"\nversion = \"0.9.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"0b928f33d975fc6ad9f86c8f283853ad26bdd5b10b7f1542aa2fa15e2289105a\"\n\n[[package]]\nname = \"walkdir\"\nversion = \"2.5.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"29790946404f91d9c5d06f9874efddea1dc06c5efe94541a7d6863108e3a5e4b\"\ndependencies = [\n \"same-file\",\n \"winapi-util\",\n]\n\n[[package]]\nname = \"wasi\"\nversion = \"0.11.0+wasi-snapshot-preview1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"9c8d87e72b64a3b4db28d11ce29237c246188f4f51057d65a7eab63b7987e423\"\n\n[[package]]\nname = \"winapi\"\nversion = \"0.3.9\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"5c839a674fcd7a98952e593242ea400abe93992746761e38641405d28b00f419\"\ndependencies = [\n \"winapi-i686-pc-windows-gnu\",\n \"winapi-x86_64-pc-windows-gnu\",\n]\n\n[[package]]\nname = \"winapi-i686-pc-windows-gnu\"\nversion = \"0.4.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ac3b87c63620426dd9b991e5ce0329eff545bccbbb34f3be09ff6fb6ab51b7b6\"\n\n[[package]]\nname = \"winapi-util\"\nversion = \"0.1.8\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"4d4cc384e1e73b93bafa6fb4f1df8c41695c8a91cf9c4c64358067d15a7b6c6b\"\ndependencies = [\n \"windows-sys 0.52.0\",\n]\n\n[[package]]\nname = \"winapi-x86_64-pc-windows-gnu\"\nversion = \"0.4.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"712e227841d057c1ee1cd2fb22fa7e5a5461ae8e48fa2ca79ec42cfc1931183f\"\n\n[[package]]\nname = \"windows-sys\"\nversion = \"0.48.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"677d2418bec65e3338edb076e806bc1ec15693c5d0104683f2efe857f61056a9\"\ndependencies = [\n \"windows-targets 0.48.5\",\n]\n\n[[package]]\nname = \"windows-sys\"\nversion = \"0.52.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"282be5f36a8ce781fad8c8ae18fa3f9beff57ec1b52cb3de0789201425d9a33d\"\ndependencies = [\n \"windows-targets 0.52.6\",\n]\n\n[[package]]\nname = \"windows-targets\"\nversion = \"0.48.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"9a2fa6e2155d7247be68c096456083145c183cbbbc2764150dda45a87197940c\"\ndependencies = [\n \"windows_aarch64_gnullvm 0.48.5\",\n \"windows_aarch64_msvc 0.48.5\",\n \"windows_i686_gnu 0.48.5\",\n \"windows_i686_msvc 0.48.5\",\n \"windows_x86_64_gnu 0.48.5\",\n \"windows_x86_64_gnullvm 0.48.5\",\n \"windows_x86_64_msvc 0.48.5\",\n]\n\n[[package]]\nname = \"windows-targets\"\nversion = \"0.52.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"9b724f72796e036ab90c1021d4780d4d3d648aca59e491e6b98e725b84e99973\"\ndependencies = [\n \"windows_aarch64_gnullvm 0.52.6\",\n \"windows_aarch64_msvc 0.52.6\",\n \"windows_i686_gnu 0.52.6\",\n \"windows_i686_gnullvm\",\n \"windows_i686_msvc 0.52.6\",\n \"windows_x86_64_gnu 0.52.6\",\n \"windows_x86_64_gnullvm 0.52.6\",\n \"windows_x86_64_msvc 0.52.6\",\n]\n\n[[package]]\nname = \"windows_aarch64_gnullvm\"\nversion = \"0.48.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"2b38e32f0abccf9987a4e3079dfb67dcd799fb61361e53e2882c3cbaf0d905d8\"\n\n[[package]]\nname = \"windows_aarch64_gnullvm\"\nversion = \"0.52.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"32a4622180e7a0ec044bb555404c800bc9fd9ec262ec147edd5989ccd0c02cd3\"\n\n[[package]]\nname = \"windows_aarch64_msvc\"\nversion = \"0.48.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"dc35310971f3b2dbbf3f0690a219f40e2d9afcf64f9ab7cc1be722937c26b4bc\"\n\n[[package]]\nname = \"windows_aarch64_msvc\"\nversion = \"0.52.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"09ec2a7bb152e2252b53fa7803150007879548bc709c039df7627cabbd05d469\"\n\n[[package]]\nname = \"windows_i686_gnu\"\nversion = \"0.48.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a75915e7def60c94dcef72200b9a8e58e5091744960da64ec734a6c6e9b3743e\"\n\n[[package]]\nname = \"windows_i686_gnu\"\nversion = \"0.52.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8e9b5ad5ab802e97eb8e295ac6720e509ee4c243f69d781394014ebfe8bbfa0b\"\n\n[[package]]\nname = \"windows_i686_gnullvm\"\nversion = \"0.52.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"0eee52d38c090b3caa76c563b86c3a4bd71ef1a819287c19d586d7334ae8ed66\"\n\n[[package]]\nname = \"windows_i686_msvc\"\nversion = \"0.48.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8f55c233f70c4b27f66c523580f78f1004e8b5a8b659e05a4eb49d4166cca406\"\n\n[[package]]\nname = \"windows_i686_msvc\"\nversion = \"0.52.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"240948bc05c5e7c6dabba28bf89d89ffce3e303022809e73deaefe4f6ec56c66\"\n\n[[package]]\nname = \"windows_x86_64_gnu\"\nversion = \"0.48.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"53d40abd2583d23e4718fddf1ebec84dbff8381c07cae67ff7768bbf19c6718e\"\n\n[[package]]\nname = \"windows_x86_64_gnu\"\nversion = \"0.52.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"147a5c80aabfbf0c7d901cb5895d1de30ef2907eb21fbbab29ca94c5b08b1a78\"\n\n[[package]]\nname = \"windows_x86_64_gnullvm\"\nversion = \"0.48.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"0b7b52767868a23d5bab768e390dc5f5c55825b6d30b86c844ff2dc7414044cc\"\n\n[[package]]\nname = \"windows_x86_64_gnullvm\"\nversion = \"0.52.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"24d5b23dc417412679681396f2b49f3de8c1473deb516bd34410872eff51ed0d\"\n\n[[package]]\nname = \"windows_x86_64_msvc\"\nversion = \"0.48.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ed94fce61571a4006852b7389a063ab983c02eb1bb37b47f8272ce92d06d9538\"\n\n[[package]]\nname = \"windows_x86_64_msvc\"\nversion = \"0.52.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"589f6da84c646204747d1270a2a5661ea66ed1cced2631d546fdfb155959f9ec\"\n\n[[package]]\nname = \"xattr\"\nversion = \"1.3.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8da84f1a25939b27f6820d92aed108f83ff920fdf11a7b19366c27c4cda81d4f\"\ndependencies = [\n \"libc\",\n \"linux-raw-sys\",\n \"rustix\",\n]\n\n[[package]]\nname = \"yaml-rust\"\nversion = \"0.4.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"56c1936c4cc7a1c9ab21a1ebb602eb942ba868cbd44a99cb7cdc5892335e1c85\"\ndependencies = [\n \"linked-hash-map\",\n]\n"
        },
        {
          "name": "Cargo.toml",
          "type": "blob",
          "size": 1.0078125,
          "content": "[package]\nname = \"toast\"\nversion = \"0.47.6\"\nauthors = [\"Stephan Boyer <stephan@stephanboyer.com>\"]\nedition = \"2021\"\ndescription = \"Containerize your development and continuous integration environments.\"\nlicense = \"MIT\"\ndocumentation = \"https://github.com/stepchowfun/toast\"\nhomepage = \"https://github.com/stepchowfun/toast\"\nrepository = \"https://github.com/stepchowfun/toast\"\nreadme = \"README.md\"\n\n[lints]\nclippy.all = { level = \"deny\", priority = -1 }\nclippy.default_numeric_fallback = \"deny\"\nclippy.pedantic = { level = \"deny\", priority = -1 }\nrust.warnings = \"deny\"\n\n[dependencies]\natty = \"0.2\"\ncolored = \"2\"\ncrossbeam = \"0.8\"\ndirs = \"3\"\nenv_logger = \"0.8\"\nhex = \"0.4\"\nindicatif = \"0.16\"\nlazy_static = \"1.4\"\nlog = \"0.4\"\nscopeguard = \"1\"\nserde_yaml = \"0.8\"\nsha2 = \"0.9\"\ntar = \"0.4\"\ntempfile = \"3\"\ntyped-path = \"0.3\"\nwalkdir = \"2\"\n\n[dependencies.clap]\nversion = \"2\"\nfeatures = [\"wrap_help\"]\n\n[dependencies.ctrlc]\nversion = \"3\"\nfeatures = [\"termination\"] # [tag:ctrlc_term]\n\n[dependencies.serde]\nversion = \"1\"\nfeatures = [\"derive\"]\n"
        },
        {
          "name": "FUNDING.yml",
          "type": "blob",
          "size": 0.01953125,
          "content": "github: stepchowfun\n"
        },
        {
          "name": "LICENSE.md",
          "type": "blob",
          "size": 1.0390625,
          "content": "# License\n\nCopyright 2025 Stephan Boyer\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n"
        },
        {
          "name": "MAINTAINERS.md",
          "type": "blob",
          "size": 2.013671875,
          "content": "# Maintainers\n\nThis document describes some instructions for maintainers. Other contributors and users need not be concerned with this material.\n\n### GitHub instructions\n\nWhen setting up the repository on GitHub, configure the following settings:\n\n- Under `Secrets`:\n  - Under `Actions`, add the following repository secrets with appropriate values:\n    - `CRATES_IO_TOKEN`\n    - `DOCKER_PASSWORD`\n  - Under `Dependabot`, add the `DOCKER_PASSWORD` repository secret with an appropriate value (e.g., that of the corresponding secret above).\n- Under `Branches`, add a branch protection rule for the `main` branch.\n  - Enable `Require status checks to pass before merging`.\n    - Enable `Require branches to be up to date before merging`.\n    - Add the following status checks:\n      - `Build for Linux`\n      - `Build for Windows`\n      - `Build for macOS`\n      - `Install on Ubuntu`\n      - `Install on macOS`\n      - `Publish a release if applicable`\n  - Enable `Include administrators`.\n- Under `Options`, enable `Automatically delete head branches`.\n\nThe GitHub workflow will fail initially because the jobs which test the installer script will not find any release to download. You'll need to bootstrap a release by temporarily removing those jobs or changing them to no-ops. Be aware that the `create-release` job is configured to only run on the `main` branch, so you may also need to temporarily change that depending on which branch you're working on.\n\n### Release instructions\n\nReleasing a new version is a three-step process:\n\n1. Bump the version in `[file:Cargo.toml]`, run `cargo build` to update `[file:Cargo.lock]`, and update `[file:CHANGELOG.md]` with information about the new version. Ship those changes as a single commit.\n2. Once the GitHub workflow has finished on the `main` branch, update the version in `[file:install.sh]` to point to the new release.\n3. Create a pull request in the `Homebrew/homebrew-core` repository on GitHub to bump the version in [this file](https://github.com/Homebrew/homebrew-core/blob/HEAD/Formula/t/toast.rb).\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 23.5537109375,
          "content": "# Toast 🥂\n\n[![Build status](https://github.com/stepchowfun/toast/actions/workflows/ci.yml/badge.svg?branch=main)](https://github.com/stepchowfun/toast/actions?query=branch%3Amain)\n\n*Toast* is a tool for containerizing your workflows such as building and testing a project. You define tasks in a YAML file called a *toastfile*, and Toast runs them in a container based on a Docker image of your choosing. What constitutes a \"task\" is up to you: tasks can install system packages, compile an application, run a test suite, or even serve web pages. Tasks can depend on other tasks, so Toast can be understood as a high-level containerized build system.\n\n![Welcome to Toast.](https://raw.githubusercontent.com/stepchowfun/toast/main/media/welcome-0.svg?sanitize=true)\n\nHere's the toastfile for the example shown above:\n\n```yaml\nimage: ubuntu\ntasks:\n  install_gcc:\n    command: |\n      apt-get update\n      apt-get install --yes gcc\n\n  build:\n    dependencies:\n      - install_gcc\n    input_paths:\n      - main.c\n    command: gcc main.c\n\n  run:\n    dependencies:\n      - build\n    command: ./a.out\n```\n\nToast caches each task by committing the container to an image. The image is tagged with a cryptographic hash of the shell command for the task, the contents of the files copied into the container, and all the other task inputs. This hash allows Toast to skip tasks that haven't changed since the last run.\n\nIn addition to local caching, Toast can use a Docker registry as a remote cache. You, your teammates, and your continuous integration (CI) system can all share the same remote cache. Used in this way, your CI system can do all the heavy lifting like building and installing dependencies so you and your team can focus on development.\n\nRelated tools:\n\n- [Docker Compose](https://docs.docker.com/compose/): Docker Compose is a convenient Docker-based development environment which shares many features with Toast. However, it doesn't support defining tasks (like `lint`, `test`, `run`, etc.) or remote caching.\n- [Nix](https://nixos.org/nix/): Nix achieves reproducible builds by leveraging ideas from functional programming rather than containerization. We're big fans of Nix. However, Nix requires a larger commitment compared to Toast because you have to use the Nix package manager or write your own Nix derivations. For better or worse, Toast allows you to use familiar idioms like `apt-get install ...`.\n\nTo prevent Docker images from accumulating on your machine when using Docker-related tools such as Toast or Docker Compose, we recommend using [Docuum](https://github.com/stepchowfun/docuum) to perform least recently used (LRU) image eviction.\n\n## Tutorial\n\n### Defining a simple task\n\nLet's create a toastfile. Create a file named `toast.yml` with the following contents:\n\n```yaml\nimage: ubuntu\ntasks:\n  greet:\n    command: echo 'Hello, World!' # Toast will run this in a container.\n```\n\nNow run `toast`. You should see the following:\n\n![Defining a simple task.](https://raw.githubusercontent.com/stepchowfun/toast/main/media/simple-task-0.svg?sanitize=true)\n\nIf you run it again, Toast will find that nothing has changed and skip the task:\n\n![Caching.](https://raw.githubusercontent.com/stepchowfun/toast/main/media/caching-0.svg?sanitize=true)\n\nToast caches tasks to save you time. For example, you don't want to reinstall your dependencies every time you run your tests. However, caching may not be appropriate for some tasks, like running a development server. You can disable caching for a specific task and all tasks that depend on it with the `cache` option:\n\n```yaml\nimage: ubuntu\ntasks:\n  greet:\n    cache: false # Don't cache this task.\n    command: echo 'Hello, World!'\n```\n\n### Adding a dependency\n\nLet's make the greeting more fun with a program called `figlet`. We'll add a task to install `figlet`, and we'll change the `greet` task to depend on it:\n\n```yaml\nimage: ubuntu\ntasks:\n  install_figlet:\n    command: |\n      apt-get update\n      apt-get install --yes figlet\n\n  greet:\n    dependencies:\n      - install_figlet # Toast will run this task first.\n    command: figlet 'Hello, World!'\n```\n\nRun `toast` to see a marvelous greeting:\n\n![Adding a dependency.](https://raw.githubusercontent.com/stepchowfun/toast/main/media/dependencies-0.svg?sanitize=true)\n\n### Importing files from the host\n\nHere's a more realistic example. Suppose you want to compile and run a simple C program. Create a file called `main.c`:\n\n```c\n#include <stdio.h>\n\nint main(void) {\n  printf(\"Hello, World!\\n\");\n  return 0;\n}\n```\n\nUpdate `toast.yml` to compile and run the program:\n\n```yaml\nimage: ubuntu\ntasks:\n  install_gcc:\n    command: |\n      apt-get update\n      apt-get install --yes gcc\n\n  build:\n    dependencies:\n      - install_gcc\n    input_paths:\n      - main.c # Toast will copy this file into the container before running the command.\n    command: gcc main.c\n\n  run:\n    dependencies:\n      - build\n    command: ./a.out\n```\n\nNotice the `input_paths` array in the `build` task. Here we're copying a single file into the container, but we could instead import the entire directory containing the toastfile with `.`. By default, the files will be copied into a directory called `/scratch` in the container. The commands will be run in that directory as well.\n\nNow if you run `toast`, you'll see this:\n\n![Importing files from the host.](https://raw.githubusercontent.com/stepchowfun/toast/main/media/input-paths-0.svg?sanitize=true)\n\nFor subsequent runs, Toast will skip the task if nothing has changed. But if you update the greeting in `main.c`, Toast will detect the change and rerun the `build` and `run` tasks on the next invocation.\n\n### Exporting files from the container\n\nA common use case for Toast is to build a project. Naturally, you might wonder how to access the build artifacts produced inside the container from the host machine. It's easy to do with `output_paths`:\n\n```yaml\nimage: ubuntu\ntasks:\n  install_gcc:\n    command: |\n      apt-get update\n      apt-get install --yes gcc\n\n  build:\n    dependencies:\n      - install_gcc\n    input_paths:\n      - main.c\n    output_paths:\n      - a.out # Toast will copy this file onto the host after running the command.\n    command: gcc main.c\n```\n\nWhen Toast runs the `build` task, it will copy the `a.out` file to the host.\n\n![Exporting files from the container.](https://raw.githubusercontent.com/stepchowfun/toast/main/media/output-paths-0.svg?sanitize=true)\n\n### Passing arguments to a task\n\nSometimes it's useful for tasks to take arguments. For example, a `deploy` task might want to know whether you want to deploy to the `staging` or `production` cluster. To do this, add an `environment` section to your task:\n\n```yaml\nimage: ubuntu\ntasks:\n  deploy:\n    cache: false\n    environment:\n      CLUSTER: staging # Deploy to staging by default.\n    command: echo \"Deploying to $CLUSTER...\"\n```\n\nWhen you run this task, Toast will read the value from the environment:\n\n![Passing arguments to a task.](https://raw.githubusercontent.com/stepchowfun/toast/main/media/arguments-explicit-0.svg?sanitize=true)\n\nIf the variable doesn't exist in the environment, Toast will use the default value:\n\n![Using argument defaults.](https://raw.githubusercontent.com/stepchowfun/toast/main/media/arguments-default-0.svg?sanitize=true)\n\nIf you don't want to have a default, set it to `null`:\n\n```yaml\nimage: ubuntu\ntasks:\n  deploy:\n    cache: false\n    environment:\n      CLUSTER: null # No default; this variable must be provided at runtime.\n    command: echo \"Deploying to $CLUSTER...\"\n```\n\nNow if you run `toast deploy` without specifying a `CLUSTER`, Toast will complain about the missing variable and refuse to run the task.\n\nEnvironment variables listed in a task are also set for any tasks that run after it.\n\n### Running a server and mounting paths into the container\n\nToast can be used for more than just building a project. Suppose you're developing a website. You can define a Toast task to run your web server! Create a file called `index.html` with the following contents:\n\n```html\n<!DOCTYPE html>\n<html>\n  <head>\n    <title>Welcome to Toast!</title>\n  </head>\n  <body>\n    <p>Hello, World!</p>\n  </body>\n</html>\n```\n\nWe can use a web server like [nginx](https://www.nginx.com/). The official `nginx` Docker image will do, but you could also use a more general image and define a Toast task to install nginx.\n\nIn our `toast.yml` file, we'll use the `ports` field to make the website accessible outside the container. We'll also use `mount_paths` rather than `input_paths` so we can edit the web page without having to restart the server.\n\n```yaml\nimage: nginx\ntasks:\n  serve:\n    cache: false # It doesn't make sense to cache this task.\n    mount_paths:\n      - index.html # Updates to this file will be visible inside the container.\n    ports:\n      - 3000:80 # Expose port 80 in the container as port 3000 on the host.\n    location: /usr/share/nginx/html/ # Nginx will serve the files in here.\n    command: nginx -g 'daemon off;' # Run in foreground mode.\n```\n\nNow you can use Toast to run the server:\n\n![Running a server.](https://raw.githubusercontent.com/stepchowfun/toast/main/media/server-1.svg?sanitize=true)\n\n### Configuring the shell\n\nIt's often desirable to configure the shell in some way before running any commands. Shells are typically configured with so-called \"startup files\" (e.g., `~/.bashrc`). However, many shells skip loading such configuration files when running in non-interactive, non-login mode, which is how the shell is invoked by Toast. Toast provides an alternative mechanism to configure the shell that doesn't require creating any special files or invoking the shell in a particular way.\n\nConsider the following toastfile which uses Bash as the shell, since that's the default preferred login shell in Ubuntu:\n\n```yaml\nimage: ubuntu\ntasks:\n  install_figlet:\n    command: |\n      apt-get update\n      apt-get install --yes figlet\n```\n\nWhat happens if `apt-get update` fails? Due to the way Bash works, the failure would be ignored and execution would continue to the subsequent line. You can fix this with `set -e` as follows:\n\n```yaml\nimage: ubuntu\ntasks:\n  install_figlet:\n    command: |\n      set -e # Make Bash fail fast.\n      apt-get update\n      apt-get install --yes figlet\n```\n\nHowever, it's tedious and error-prone to add that to each task separately. Instead, you can add it to every task at once by setting `command_prefix` as follows:\n\n```yaml\nimage: ubuntu\ncommand_prefix: set -e # Make Bash fail fast.\ntasks:\n  install_figlet:\n    command: |\n      apt-get update\n      apt-get install --yes figlet\n```\n\nFor Bash in particular, we recommend going even further and setting `set -euxo pipefail` instead of just `set -e`.\n\n### Dropping into an interactive shell\n\nIf you run Toast with `--shell`, Toast will drop you into an interactive shell inside the container when the requested tasks are finished, or if any of them fails. This feature is useful for debugging tasks or exploring what's in the container. Suppose you have the following toastfile:\n\n```yaml\nimage: ubuntu\ntasks:\n  install_figlet:\n    command: |\n      apt-get update\n      apt-get install --yes figlet\n```\n\nYou can run `toast --shell` to play with the `figlet` program:\n\n![Dropping into a shell.](https://raw.githubusercontent.com/stepchowfun/toast/main/media/shell-0.svg?sanitize=true)\n\nWhen you're done, the container is deleted automatically.\n\n## How Toast works\n\nGiven a set of tasks to run, Toast computes a [topological sort](https://en.wikipedia.org/wiki/Topological_sorting) of the dependency DAG to determine in what order to run the tasks. Toast then builds a Docker image for each task based on the image from the previous task in the topological sort, or the base image in the case of the first task.\n\nThe topological sort of an arbitrary DAG isn't necessarily unique. Toast uses an algorithm based on depth-first search, traversing children in lexicographical order. The algorithm is deterministic and invariant to the order in which tasks and dependencies are listed, so reordering tasks in a toastfile won't invalidate the cache. Furthermore, `toast foo bar` and `toast bar foo` are guaranteed to produce identical schedules to maximize cache utilization.\n\nFor each task in the schedule, Toast first computes a cache key based on a hash of the shell command, the contents of the `input_paths`, the cache key of the previous task in the schedule, etc. Toast will then look for a Docker image tagged with that cache key. If the image is found, Toast will skip the task. Otherwise, Toast will create a container, copy any `input_paths` into it, run the shell command, copy any `output_paths` from the container to the host, commit the container to an image, and delete the container. The image is tagged with the cache key so the task can be skipped for subsequent runs.\n\nToast aims to make as few assumptions about the container environment as possible. Toast only assumes there is a program at `/bin/su` which can be invoked as `su -c COMMAND USER`. This program is used to run commands for tasks in the container as the appropriate user with their preferred shell. Every popular Linux distribution has a `su` utility that supports this usage. Toast has integration tests to ensure it works with popular base images such as `debian`, `alpine`, `busybox`, etc.\n\n## Toastfile reference\n\nA *toastfile* is a YAML file (typically named `toast.yml`) that defines tasks and their dependencies. The schema contains the following top-level keys and defaults:\n\n```yaml\nimage: <required>   # Docker image name with optional tag or digest\ndefault: null       # Name of default task to run or `null` to run all tasks by default\nlocation: /scratch  # Path in the container for running tasks\nuser: root          # Name of the user in the container for running tasks\ncommand_prefix: ''  # A string to be prepended to all commands by default\ntasks: {}           # Map from task name to task\n```\n\nTasks have the following schema and defaults:\n\n```yaml\ndescription: null           # A description of the task for the `--list` option\ndependencies: []            # Names of dependencies\ncache: true                 # Whether a task can be cached\nenvironment: {}             # Map from environment variable to optional default\ninput_paths: []             # Paths to copy into the container\nexcluded_input_paths: []    # A denylist for `input_paths`\noutput_paths: []            # Paths to copy out of the container if the task succeeds\noutput_paths_on_failure: [] # Paths to copy out of the container if the task fails\nmount_paths: []             # Paths to mount into the container\nmount_readonly: false       # Whether to mount the `mount_paths` as readonly\nports: []                   # Port mappings to publish\nlocation: null              # Overrides the corresponding top-level value\nuser: null                  # Overrides the corresponding top-level value\ncommand: ''                 # Shell command to run in the container\ncommand_prefix: null        # Overrides the corresponding top-level value\nextra_docker_arguments: []  # Additional arguments for `docker container create`\n```\n\nThe [toastfile](https://github.com/stepchowfun/toast/blob/main/toast.yml) for Toast itself is a comprehensive real-world example.\n\n## Configuration\n\nToast can be customized with a YAML configuration file. The default location of the configuration file depends on the operating system:\n\n- For macOS, the default location is `$HOME/Library/Application Support/toast/toast.yml`.\n- For other Unix platforms, Toast follows the [XDG Base Directory Specification](https://specifications.freedesktop.org/basedir-spec/basedir-spec-latest.html). The default location is `$XDG_CONFIG_HOME/toast/toast.yml` or `$HOME/.config/toast/toast.yml` if `XDG_CONFIG_HOME` isn't set to an absolute path.\n- For Windows, the default location is `{FOLDERID_RoamingAppData}\\toast\\toast.yml`.\n\nThe schema of the configuration file is described in the subsections below.\n\n### Cache configuration\n\nToast supports local and remote caching. By default, only local caching is enabled. Remote caching requires that the Docker Engine is logged into a Docker registry (e.g., via `docker login`).\n\nThe cache-related fields and their default values are as follows:\n\n```yaml\ndocker_repo: toast        # Docker repository\nread_local_cache: true    # Whether Toast should read from local cache\nwrite_local_cache: true   # Whether Toast should write to local cache\nread_remote_cache: false  # Whether Toast should read from remote cache\nwrite_remote_cache: false # Whether Toast should write to remote cache\n```\n\nEach of these options can be overridden via command-line options (see [below](#command-line-options)).\n\nA typical configuration for a CI environment will enable all forms of caching, whereas for local development you may want to set `write_remote_cache: false` to avoid waiting for remote cache writes.\n\n### Docker CLI\n\nYou can configure the Docker CLI binary used by Toast. Toast uses the `PATH` environment variable to search for the specified binary. You can use this mechanism to switch to a drop-in replacement for the Docker CLI, such as Podman.\n\nThe relevant field and its default value are as follows:\n\n```yaml\ndocker_cli: docker\n```\n\n## Command-line options\n\nBy default, Toast looks for a toastfile called `toast.yml` in the working directory, then in the parent directory, and so on. Any paths in the toastfile are relative to where the toastfile lives, not the working directory. This means you can run Toast from anywhere in your project and get the same results.\n\nRun `toast` with no arguments to execute the default task, or all the tasks if the toastfile doesn't define a default. You can also execute specific tasks and their dependencies:\n\n```sh\ntoast task1 task2 task3…\n```\n\nHere are all the supported command-line options:\n\n```\nUSAGE:\n    toast [OPTIONS] [--] [TASKS]...\n\nOPTIONS:\n    -c, --config-file <PATH>\n            Sets the path of the config file\n\n        --docker-cli <CLI>\n            Sets the Docker CLI binary\n\n    -r, --docker-repo <REPO>\n            Sets the Docker repository for remote caching\n\n    -f, --file <PATH>\n            Sets the path to the toastfile\n\n        --force <TASK>...\n            Runs a task unconditionally, even if it’s cached\n\n        --force-all\n            Pulls the base image and runs all tasks unconditionally\n\n    -h, --help\n            Prints help information\n\n    -l, --list\n            Lists the tasks that have a description\n\n    -o, --output-dir <PATH>\n            Sets the output directory\n\n        --read-local-cache <BOOL>\n            Sets whether local cache reading is enabled\n\n        --read-remote-cache <BOOL>\n            Sets whether remote cache reading is enabled\n\n    -s, --shell\n            Drops you into a containerized shell after the tasks are finished\n\n    -v, --version\n            Prints version information\n\n        --write-local-cache <BOOL>\n            Sets whether local cache writing is enabled\n\n        --write-remote-cache <BOOL>\n            Sets whether remote cache writing is enabled\n\n\nARGS:\n    <TASKS>...\n            Sets the tasks to run\n```\n\n## Installation instructions\n\n### Installation on macOS or Linux (AArch64 or x86-64)\n\nIf you're running macOS or Linux (AArch64 or x86-64), you can install Toast with this command:\n\n\n```sh\ncurl https://raw.githubusercontent.com/stepchowfun/toast/main/install.sh -LSfs | sh\n```\n\nThe same command can be used again to update to the latest version.\n\nThe installation script supports the following optional environment variables:\n\n- `VERSION=x.y.z` (defaults to the latest version)\n- `PREFIX=/path/to/install` (defaults to `/usr/local/bin`)\n\nFor example, the following will install Toast into the working directory:\n\n```sh\ncurl https://raw.githubusercontent.com/stepchowfun/toast/main/install.sh -LSfs | PREFIX=. sh\n```\n\nIf you prefer not to use this installation method, you can download the binary from the [releases page](https://github.com/stepchowfun/toast/releases), make it executable (e.g., with `chmod`), and place it in some directory in your [`PATH`](https://en.wikipedia.org/wiki/PATH_\\(variable\\)) (e.g., `/usr/local/bin`).\n\n### Installation on Windows (AArch64 or x86-64)\n\nIf you're running Windows (AArch64 or x86-64), download the latest binary from the [releases page](https://github.com/stepchowfun/toast/releases) and rename it to `toast` (or `toast.exe` if you have file extensions visible). Create a directory called `Toast` in your `%PROGRAMFILES%` directory (e.g., `C:\\Program Files\\Toast`), and place the renamed binary in there. Then, in the \"Advanced\" tab of the \"System Properties\" section of Control Panel, click on \"Environment Variables...\" and add the full path to the new `Toast` directory to the `PATH` variable under \"System variables\". Note that the `Program Files` directory might have a different name if Windows is configured for a language other than English.\n\nTo update an existing installation, simply replace the existing binary.\n\n\n### Installation with Homebrew\n\nIf you have [Homebrew](https://brew.sh/), you can install Toast as follows:\n\n```sh\nbrew install toast\n```\n\nYou can update an existing installation with `brew upgrade toast`.\n\n### Installation with MacPorts\n\nOn macOS, you can also install Toast via [MacPorts](https://www.macports.org) as follows:\n\n```sh\nsudo port install toast\n```\n\nYou can update an existing installation via:\n\n```sh\nsudo port selfupdate\nsudo port upgrade toast\n```\n\n### Installation with Cargo\n\nIf you have [Cargo](https://doc.rust-lang.org/cargo/), you can install Toast as follows:\n\n```sh\ncargo install toast\n```\n\nYou can run that command with `--force` to update an existing installation.\n\n## Running Toast in CI\n\nThe easiest way to run Toast in CI is to use [GitHub Actions](https://help.github.com/en/actions). Toast provides a convenient GitHub action that you can use in your [workflows](https://help.github.com/en/actions/configuring-and-managing-workflows/configuring-and-managing-workflow-files-and-runs). Here's a simple workflow that runs Toast with no arguments:\n\n```yaml\n# .github/workflows/ci.yml\nname: Continuous integration\non:\n  pull_request:\n  push:\n    branches:\n    - main\njobs:\n  ci:\n    runs-on: ubuntu-latest\n    steps:\n    - uses: actions/checkout@v4\n    - uses: stepchowfun/toast/.github/actions/toast@main\n```\n\nHere's a more customized workflow that showcases all the options:\n\n```yaml\n# .github/workflows/ci.yml\nname: Continuous integration\non:\n  pull_request:\n  push:\n    branches:\n    - main\njobs:\n  ci:\n    runs-on: ubuntu-latest\n    steps:\n    - uses: actions/checkout@v4\n    - if: github.event_name == 'push'\n      uses: docker/login-action@v3\n      with:\n        username: DOCKER_USERNAME\n        password: ${{ secrets.DOCKER_PASSWORD }}\n    - uses: stepchowfun/toast/.github/actions/toast@main\n      with:\n        file: toastfiles/toast.yml\n        tasks: build lint test\n        docker_repo: DOCKER_USERNAME/DOCKER_REPO\n        read_remote_cache: true\n        write_remote_cache: ${{ github.event_name == 'push' }}\n```\n\n## Requirements\n\n- Toast requires [Docker Engine](https://www.docker.com/products/docker-engine) 17.06.0 or later.\n- Toast only works with Linux containers; Windows containers aren't currently supported. However, in addition to Linux hosts, Toast also supports macOS and Windows hosts with the appropriate virtualization capabilities thanks to [Docker Desktop](https://www.docker.com/products/docker-desktop).\n\n## Acknowledgements\n\nToast was inspired by an in-house tool used at Airbnb for CI jobs. The design was heavily influenced by the lessons I learned working on that tool and building out Airbnb's CI system with the fabulous CI Infrastructure Team.\n\nSpecial thanks to Julia Wang ([@juliahw](https://github.com/juliahw)) for valuable early feedback. Thanks to her and Mark Tai ([@marktai](https://github.com/marktai)) for coming up with the name *Toast*.\n\nThe terminal animations were produced with [asciinema](https://asciinema.org/) and [svg-term-cli](https://github.com/marionebl/svg-term-cli).\n"
        },
        {
          "name": "install.sh",
          "type": "blob",
          "size": 2.470703125,
          "content": "#!/usr/bin/env sh\n\n# This installer script supports Linux and macOS machines running on x86-64 only.\n\n# Usage examples:\n#   ./install.sh\n#   VERSION=x.y.z ./install.sh\n#   PREFIX=/usr/local/bin ./install.sh\n\n# We wrap everything in parentheses to prevent the shell from executing only a prefix of the script\n# if the download is interrupted.\n(\n  # Where the binary will be installed\n  DESTINATION=\"${PREFIX:-/usr/local/bin}/toast\"\n\n  # Which version to download\n  RELEASE=\"v${VERSION:-0.47.6}\"\n\n  # Determine which binary to download.\n  FILENAME=''\n  if uname -a | grep -qi 'x86_64.*GNU/Linux'; then\n    echo 'x86-64 GNU Linux detected.'\n    FILENAME=toast-x86_64-unknown-linux-gnu\n  elif uname -a | grep -qi 'x86_64.*Linux'; then\n    echo 'x86-64 non-GNU Linux detected.'\n    FILENAME=toast-x86_64-unknown-linux-musl\n  elif uname -a | grep -qi 'aarch64.*GNU/Linux'; then\n    echo 'AArch64 GNU Linux detected.'\n    FILENAME=toast-aarch64-unknown-linux-gnu\n  elif uname -a | grep -qi 'aarch64.*Linux'; then\n    echo 'AArch64 non-GNU Linux detected.'\n    FILENAME=toast-aarch64-unknown-linux-musl\n  elif uname -a | grep -qi 'Darwin.*x86_64'; then\n    echo 'x86-64 macOS detected.'\n    FILENAME=toast-x86_64-apple-darwin\n  elif uname -a | grep -qi 'Darwin.*arm64'; then\n    echo 'AArch64 macOS detected.'\n    FILENAME=toast-aarch64-apple-darwin\n  fi\n\n  # Find a temporary location for the binary.\n  TEMPDIR=$(mktemp -d /tmp/toast.XXXXXXXX)\n\n  # This is a helper function to clean up and fail.\n  fail() {\n    echo \"$1\" >&2\n    rm -rf \"$TEMPDIR\"\n    exit 1\n  }\n\n  # Fail if there is no pre-built binary for this platform.\n  if [ -z \"$FILENAME\" ]; then\n    fail 'Unfortunately, there is no pre-built binary for this platform.'\n  fi\n\n  # Compute the full file path.\n  SOURCE=\"$TEMPDIR/$FILENAME\"\n\n  # Download the binary.\n  curl \\\n    \"https://github.com/stepchowfun/toast/releases/download/$RELEASE/$FILENAME\" \\\n    -o \"$SOURCE\" -LSf || fail 'There was an error downloading the binary.'\n\n  # Make it executable.\n  chmod a+x \"$SOURCE\" || fail 'There was an error setting the permissions for the binary.'\n\n  # Install it at the requested destination.\n  # shellcheck disable=SC2024\n  mv -f \"$SOURCE\" \"$DESTINATION\" 2> /dev/null ||\n    sudo mv -f \"$SOURCE\" \"$DESTINATION\" < /dev/tty ||\n    fail \"Unable to install the binary at $DESTINATION.\"\n\n  # Remove the temporary directory.\n  rm -rf \"$TEMPDIR\"\n\n  # Let the user know if the installation was successful.\n  \"$DESTINATION\" --version || fail 'There was an error installing the binary.'\n)\n"
        },
        {
          "name": "integration-tests",
          "type": "tree",
          "content": null
        },
        {
          "name": "media",
          "type": "tree",
          "content": null
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "toast.yml",
          "type": "blob",
          "size": 10.4658203125,
          "content": "image: ubuntu:24.04\ndefault: build\nuser: user\ncommand_prefix: |\n  # Make not silently ignore errors.\n  set -euo pipefail\n\n  # Load the Rust startup file, if it exists.\n  if [ -f \"$HOME/.cargo/env\" ]; then\n    . \"$HOME/.cargo/env\"\n  fi\n\n  # Use this wrapper for `cargo` if network access is needed.\n  cargo-online () { cargo --locked \"$@\"; }\n\n  # Use this wrapper for `cargo` unless network access is needed.\n  cargo-offline () { cargo --frozen --offline \"$@\"; }\n\n  # Use this wrapper for formatting code or checking that code is formatted. We use a nightly Rust\n  # version for the `trailing_comma` formatting option [tag:rust_fmt_nightly_2024-11-28]. The\n  # nightly version was chosen as the latest available release with all components present\n  # according to this page:\n  #   https://rust-lang.github.io/rustup-components-history/x86_64-unknown-linux-gnu.html\n  cargo-fmt () { cargo +nightly-2024-11-28 --frozen --offline fmt --all -- \"$@\"; }\n\n  # Make Bash log commands.\n  set -x\ntasks:\n  install_packages:\n    description: Install system packages.\n    user: root\n    command: |\n      # Install the following packages:\n      #\n      # - build-essential       - Used to link some crates\n      # - ca-certificates       - Used for fetching Docker's GPG key\n      # - curl                  - Used for installing Docker, Tagref, and Rust\n      # - gcc-aarch64-linux-gnu - Used for linking the binary for AArch64\n      # - gcc-x86-64-linux-gnu  - Used for linking the binary for x86-64\n      # - gnupg                 - Used to install Docker's GPG key\n      # - lsb-release           - Used below to determine the Ubuntu release codename\n      # - ripgrep               - Used for various linting tasks\n      # - shellcheck            - Used for linting shell scripts\n      apt-get update\n      apt-get install --yes \\\n        build-essential \\\n        ca-certificates \\\n        curl \\\n        gcc-aarch64-linux-gnu \\\n        gcc-x86-64-linux-gnu \\\n        gnupg \\\n        lsb-release \\\n        ripgrep \\\n        shellcheck\n\n      # Download Docker's official GPG key.\n      install -m 0755 -d /etc/apt/keyrings\n      curl -fsSL https://download.docker.com/linux/ubuntu/gpg | \\\n        gpg --dearmor -o /etc/apt/keyrings/docker.gpg\n      chmod a+r /etc/apt/keyrings/docker.gpg\n\n      # Set up the Docker repository.\n      echo \\\n        \"deb [arch=\"$(dpkg --print-architecture)\" signed-by=/etc/apt/keyrings/docker.gpg] \\\n          https://download.docker.com/linux/ubuntu \\\n          \"$(. /etc/os-release && echo \"$VERSION_CODENAME\")\" stable\" | \\\n        tee /etc/apt/sources.list.d/docker.list > /dev/null\n\n      # Install the Docker CLI.\n      apt-get update\n      apt-get install --yes docker-ce-cli\n\n  install_tagref:\n    description: Install Tagref, a reference checking tool.\n    dependencies:\n      - install_packages\n    user: root\n    command: |\n      # Install Tagref using the official installer script.\n      curl https://raw.githubusercontent.com/stepchowfun/tagref/main/install.sh -LSfs | sh\n\n  create_user:\n    description: Create a user who doesn't have root privileges.\n    user: root\n    command: |\n      # Create a user named `user` with a home directory and with Bash as the login shell.\n      useradd user --create-home --shell /bin/bash\n\n  install_rust:\n    description: Install Rust, a systems programming language.\n    dependencies:\n      - install_packages\n      - create_user\n    command: |\n      # Install stable Rust [tag:rust_1.83.0].\n      curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- \\\n        -y \\\n        --default-toolchain 1.83.0 \\\n        --profile minimal \\\n        --component clippy\n\n      # Add Rust tools to `$PATH`.\n      . \"$HOME/.cargo/env\"\n\n      # Install nightly Rust [ref:rust_fmt_nightly_2024-11-28].\n      rustup toolchain install nightly-2024-11-28 --profile minimal --component rustfmt\n\n  install_tools:\n    description: Install the tools needed to build and validate the program.\n    dependencies:\n      - install_rust\n      - install_tagref\n\n  fetch_crates:\n    description: Download and build Rust packages used by the program.\n    dependencies:\n      - install_tools\n    input_paths:\n      - Cargo.lock\n      - Cargo.toml\n    command: |\n      # Create a \"hello world\" project with the dependencies we want to fetch.\n      mv Cargo.lock Cargo.lock.og\n      mv Cargo.toml Cargo.toml.og\n      cargo-offline init --vcs none\n      mv Cargo.lock.og Cargo.lock\n      mv Cargo.toml.og Cargo.toml\n\n      # Ask Cargo to build the project in order to fetch the dependencies.\n      cargo-online build\n      cargo-online build --release\n      cargo-online clippy --all-features --all-targets --workspace\n\n      # Delete the build artifacts.\n      cargo-offline clean --package toast\n      cargo-offline clean --release --package toast\n\n      # Delete the \"hello world\" code.\n      rm -rf src\n\n  build:\n    description: Build the binary in non-release mode.\n    dependencies:\n      - fetch_crates\n    input_paths:\n      - src\n    command: |\n      # Build the project with Cargo.\n      cargo-offline build\n\n  test:\n    description: Run the test suite.\n    dependencies:\n      - build\n    command: |\n      # Run the tests with Cargo. The `NO_COLOR` variable is used to disable colored output for\n      # tests that make assertions regarding the output [tag:colorless_tests].\n      NO_COLOR=true cargo-offline test\n\n  lint:\n    description: Run the linters.\n    dependencies:\n      - build\n    input_paths:\n      - .\n    excluded_input_paths:\n      - .git\n\n      # [tag:excluded_input_paths] Keep this in sync with [file:.gitignore].\n      - artifacts\n      - target\n    command: |\n      # Check references with Tagref.\n      tagref\n\n      # Lint shell files with ShellCheck.\n      find . -type f -name '*.sh' | xargs shellcheck\n\n      # Lint the code with Clippy.\n      cargo-offline clippy --all-features --all-targets --workspace\n\n      # Check code formatting with Rustfmt. See [ref:format_macros] for an explanation of the `rg`\n      # commands.\n      rg --type rust --files-with-matches '' src | xargs sed -i 's/!(/_(/g'\n      rg --type rust --files-with-matches '' src | xargs sed -i 's/^\\([^ (]*\\)_(/\\1!(/g'\n      if ! cargo-fmt --check; then\n        echo 'ERROR: Please correct the formatting errors above.' 1>&2\n        exit 1\n      fi\n      rg --type rust --files-with-matches '' src | xargs sed -i 's/_(/!(/g'\n\n      # Forbid unconsolidated `use` declarations.\n      if rg --line-number --type rust --multiline '}[[:space]]*;[[:space:]]*\\n[[:space:]]*use' src\n      then\n        echo 'Please consolidate these `use` declarations.' >&2\n        exit 1\n      fi\n\n      # Enforce that lines span no more than 100 columns.\n      if rg --line-number --type rust '.{101}' src; then\n        echo 'There are lines spanning more than 100 columns.' >&2\n        exit 1\n      fi\n\n  run:\n    description: Run the program.\n    dependencies:\n      - build\n    command: |\n      # Run the program with Cargo.\n      cargo-offline run -- --help\n\n  format:\n    description: Format the source code.\n    dependencies:\n      - fetch_crates\n    input_paths:\n      - src\n    output_paths:\n      - src\n    command: |\n      # Format the code with Rustfmt. We temporarily convert macro invocations into function calls\n      # so Rustfmt's `trailing_comma` feature applies to macro arguments [tag:format_macros].\n      rg --type rust --files-with-matches '' src | xargs sed -i 's/!(/_(/g'\n      rg --type rust --files-with-matches '' src | xargs sed -i 's/^\\([^ (]*\\)_(/\\1!(/g'\n      cargo-fmt\n      rg --type rust --files-with-matches '' src | xargs sed -i 's/_(/!(/g'\n\n  release:\n    description: Build and output the release binaries for Linux.\n    dependencies:\n      - fetch_crates\n    input_paths:\n      - src\n    output_paths:\n      - artifacts\n    command: |\n      # Add the targets.\n      rustup target add x86_64-unknown-linux-gnu\n      rustup target add x86_64-unknown-linux-musl\n      rustup target add aarch64-unknown-linux-gnu\n      rustup target add aarch64-unknown-linux-musl\n\n      # Set the linkers.\n      export CARGO_TARGET_X86_64_UNKNOWN_LINUX_GNU_LINKER=x86_64-linux-gnu-gcc\n      export CARGO_TARGET_X86_64_UNKNOWN_LINUX_MUSL_LINKER=x86_64-linux-gnu-gcc\n      export CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER=aarch64-linux-gnu-gcc\n      export CARGO_TARGET_AARCH64_UNKNOWN_LINUX_MUSL_LINKER=aarch64-linux-gnu-gcc\n\n      # Build the project with Cargo for each Linux target.\n      cargo-online build --release --target x86_64-unknown-linux-gnu\n      cargo-online build --release --target x86_64-unknown-linux-musl\n      cargo-online build --release --target aarch64-unknown-linux-gnu\n      cargo-online build --release --target aarch64-unknown-linux-musl\n\n      # Move the binaries to a more conveniennt location for exporting.\n      mkdir artifacts\n      cp \\\n        target/x86_64-unknown-linux-gnu/release/toast \\\n        artifacts/toast-x86_64-unknown-linux-gnu\n      cp \\\n        target/x86_64-unknown-linux-musl/release/toast \\\n        artifacts/toast-x86_64-unknown-linux-musl\n      cp \\\n        target/aarch64-unknown-linux-gnu/release/toast \\\n        artifacts/toast-aarch64-unknown-linux-gnu\n      cp \\\n        target/aarch64-unknown-linux-musl/release/toast \\\n        artifacts/toast-aarch64-unknown-linux-musl\n\n  validate_release:\n    description: Validate the release.\n    dependencies:\n      - release\n    input_paths:\n      - integration-tests\n    cache: false\n    mount_paths:\n      - /var/run/docker.sock\n    user: root\n    command: |\n      # Tell the integration tests where the Toast binary lives.\n      export TOAST=\"$(pwd)/artifacts/toast-x86_64-unknown-linux-gnu\"\n\n      # Run the integration tests.\n      while IFS= read -d '' -r TEST; do\n        # Log which integration test we're about to run.\n        echo \"Running integration test: $TEST\"\n\n        # Go into the test directory and run the test.\n        (\n          cd \"$(dirname \"$TEST\")\" > /dev/null\n          ./run.sh\n        )\n      done < <(find integration-tests -name run.sh -print0)\n\n  publish:\n    description: Publish the crate to crates.io.\n    dependencies:\n      - fetch_crates\n    environment:\n      CRATES_IO_TOKEN: null\n    input_paths:\n      - README.md\n      - src\n    command: |\n      # Fetch the program version.\n      VERSION=\"$(cargo-offline pkgid | grep --extended-regexp --only-matching '[0-9.]+$')\"\n\n      # If this version of the package already exists on crates.io, there's nothing more to do.\n      if cargo-online search toast | grep \"toast = \\\"$VERSION\\\"\" > /dev/null; then\n        echo \"Version $VERSION of crate already exists.\"\n        exit\n      fi\n\n      # Publish to crates.io.\n      cargo-online publish --token \"$CRATES_IO_TOKEN\"\n"
        }
      ]
    }
  ]
}