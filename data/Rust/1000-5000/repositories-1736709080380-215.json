{
  "metadata": {
    "timestamp": 1736709080380,
    "page": 215,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjIyMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "weld-project/weld",
      "stars": 2994,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".cargo",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.5869140625,
          "content": "target\nCargo.lock\n.DS_Store\n\\#*#\n.#*\n*~\n*.swp\n*.swo\n*.bc\n*.pyc\n*.o\n*.a\nrusty-tags.vi\nrun\nnotes\n*.dylib\n*.so\n*.dll\npython/build/\npython/dist\npython/grizzly.egg-info/\nexamples/python/grizzly/data\npython/pyweld/pyweld.egg-info/\npython/pyweld/build/\npython/pyweld/dist/\npython/grizzly/build\n*.egg-info/\n\n# Environments etc.\nweld-python/doc/build\nsite-packages/\nweld-dev/\nweldenv/\n\nllvmext/test\n\n# Ignore Weld, SIR, and assembly programs - force add these for special cases (e.g., tests).\n*.weld\n*.sir\n*.S\n\n# Ignore code generated by the REPL.\ncode-[0-9]*.ll\n\n# Ignore generated C Bindings\nweld-ffi/weld.h\n"
        },
        {
          "name": ".travis.yml",
          "type": "blob",
          "size": 0.4560546875,
          "content": "language: python\n\ndist: xenial\n\ncache:\n  pip: true\n  cargo: true\n\nenv:\n  global:\n    - RUST_BACKTRACE=1\n\naddons:\n  apt:\n    packages:\n      - libssl-dev\n      - lib32z1-dev\n      - gcc\n      - make\n\npython: \"3.7\"\n\nbefore_install:\n- sudo -E apt-get -yq update &>> ~/apt-get-update.log\n- source .travis/llvm.sh 6.0 xenial\n- source .travis/rust.sh\n\ninstall:\n  - pip install setuptools-rust numpy pandas pytest\n\nscript:\n- bash -e -x .travis/test_multi_version.sh 6.0 3.7\n"
        },
        {
          "name": ".travis",
          "type": "tree",
          "content": null
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 0.880859375,
          "content": "When you contribute code, you affirm that the contribution is your original work and that you license the work to the project under the project's open source license. Whether or not you state this explicitly, by submitting any copyrighted material via pull request, email, or other means you agree to license the material under the project's open source license and warrant that you have the legal authority to do so.\n\n## Tests\n\nWeld has several integration and doctests, controlled via `cargo`. Travis CI\nensures that new patches do not fail existing tests. To run these tests locally:\n\n```\ncargo test\n```\n\n## Formatting\n\nWeld uses `clippy` and `rustfmt` for lints and format checks respectively.\nTravis CI checks to ensure that all lints pass and that code is formatted in\naccordance with `rustfmt`. To check this before submitting code, run the\nfollowing:\n\n```\ncargo clippy\ncargo fmt -- --check\n```\n"
        },
        {
          "name": "Cargo.toml",
          "type": "blob",
          "size": 0.109375,
          "content": "[workspace]\nmembers = [\n  \"weld\",\n  \"weld-capi\",\n  \"weld-repl\",\n  \"weld-hdrgen\"\n]\nexclude = [\n  \"weld-python\"\n]\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.431640625,
          "content": "Copyright 2017 Stanford University\n\nRedistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:\n\n1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.\n\n2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.\n\n3. Neither the name of the copyright holder nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\n\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 6.0078125,
          "content": "# Weld\n\n[![Build Status](https://travis-ci.org/weld-project/weld.svg?branch=master)](https://travis-ci.org/weld-project/weld)\n\n[Documentation](https://www.weld.rs/docs/latest/weld/)\n\nWeld is a language and runtime for improving the performance of data-intensive applications. It optimizes across libraries and functions by expressing the core computations in libraries using a common intermediate representation, and optimizing across each framework.\n\nModern analytics applications combine multiple functions from different libraries and frameworks to build complex workflows. Even though individual functions can achieve high performance in isolation, the performance of the combined workflow is often an order of magnitude below hardware limits due to extensive data movement across the functions. Weldâ€™s take on solving this problem is to lazily build up a computation for the entire workflow, and then optimizing and evaluating it only when a result is needed.\n\nYou can join the discussion on Weld on our [Google Group](https://groups.google.com/forum/#!forum/weld-users) or post on the Weld mailing list at [weld-group@lists.stanford.edu](mailto:weld-group@lists.stanford.edu).\n\n## Contents\n\n  * [Building](#building)\n      - [MacOS LLVM Installation](#macos-llvm-installation)\n      - [Ubuntu LLVM Installation](#ubuntu-llvm-installation)\n      - [Building Weld](#building-weld)\n  * [Documentation](#documentation)\n  * [Grizzly (Pandas on Weld)](#grizzly)\n  * [Tools](#tools)\n\n## Building\n\nTo build Weld, you need [the latest stable version of Rust](http://rust-lang.org) and [LLVM/Clang++](http://llvm.org) 6.0.\n\nTo install Rust, follow the steps [here](https://rustup.rs). You can verify that Rust was installed correctly on your system by typing `rustc` into your shell. If you already have Rust and  `rustup` installed, you can upgrade to the latest stable version with:\n\n```bash\nrustup update stable\n```\n\n#### MacOS LLVM Installation\n\nTo install LLVM on macOS, first install [Homebrew](https://brew.sh/). Then:\n\n```bash\nbrew install llvm@6\n```\n\nWeld's dependencies require `llvm-config` on `$PATH`, so you may need to create a symbolic link so the correct `llvm-config` is picked up (note that you might need to add `sudo` at the start of this command):\n\n```bash\nln -sf `brew --prefix llvm@6`/bin/llvm-config /usr/local/bin/llvm-config\n```\n\nTo make sure this worked correctly, run `llvm-config --version`. You should see `6.0.x`.\n\n#### Ubuntu LLVM Installation\n\nTo install LLVM on Ubuntu, get the LLVM 6.0 sources and then `apt-get`:\n\nOn Ubuntu 16.04 (Xenial):\n```bash\nwget -O - https://apt.llvm.org/llvm-snapshot.gpg.key | sudo apt-key add -\nsudo apt-add-repository \"deb http://apt.llvm.org/xenial/ llvm-toolchain-xenial-6.0 main\"\nsudo apt-get update\nsudo apt-get install llvm-6.0-dev clang-6.0\n```\nOn Ubuntu 14.04 (Trusty):\n```bash\nwget -O - https://apt.llvm.org/llvm-snapshot.gpg.key | sudo apt-key add -\nsudo apt-add-repository \"deb http://apt.llvm.org/trusty/ llvm-toolchain-trusty-6.0 main\"\n\n# gcc backport is required on 14.04, for libstdc++. See https://apt.llvm.org/\nsudo apt-add-repository \"deb http://ppa.launchpad.net/ubuntu-toolchain-r/test/ubuntu trusty main\"\nsudo apt-get update\nsudo apt-get install llvm-6.0-dev clang-6.0\n```\n\nWeld's dependencies require `llvm-config`, so you may need to create a symbolic link so the correct `llvm-config` is picked up. `sudo` may be required:\n\n```bash\nln -s /usr/bin/llvm-config-6.0 /usr/local/bin/llvm-config\n```\n\nTo make sure this worked correctly, run `llvm-config --version`. You should see `6.0.x` or newer.\n\nYou will also need `zlib`:\n\n```bash\nsudo apt-get install zlib1g-dev\n```\n\n#### Building Weld\n\nWith LLVM and Rust installed, you can build Weld. Clone this repository, set the `WELD_HOME` environment variable, and build using `cargo`:\n\n```bash\ngit clone https://www.github.com/weld-project/weld\ncd weld/\nexport WELD_HOME=`pwd`\ncargo build --release\n```\nWeld builds two dynamically linked libraries (`.so` files on Linux and `.dylib` files on Mac): `libweld` and `libweldrt`.\n\nFinally, run the unit and integration tests:\n\n```bash\ncargo test\n```\n\n## Documentation\n\nThe [Rust Weld crate](https://crates.io/crates/weld) is documented [here](https://www.weld.rs/docs/latest/weld/).\n\nThe `docs/` directory contains documentation for the different components of Weld.\n\n* [language.md](https://github.com/weld-project/weld/blob/master/docs/language.md) describes the syntax of the Weld IR.\n* [api.md](https://github.com/weld-project/weld/blob/master/docs/api.md) describes the low-level C API for interfacing with Weld.\n* [python.md](https://github.com/weld-project/weld/blob/master/docs/python.md) gives an overview of the Python API.\n* [tutorial.md](https://github.com/weld-project/weld/blob/master/docs/tutorial.md) contains a tutorial for how to build a small vector library using Weld.\n\n## Python Bindings\n\nWeld's Python bindings are in [`python`](https://github.com/weld-project/weld/tree/master/python), with examples in [`examples/python`](https://github.com/weld-project/weld/tree/master/examples/python).\n\n## Grizzly\n\n**Grizzly** is a subset of [Pandas](http://pandas.pydata.org/) integrated with Weld. Details on how to use Grizzly are in\n[`python/grizzly`](https://github.com/weld-project/weld/tree/master/python/grizzly).\nSome example workloads that make use of Grizzly are in [`examples/python/grizzly`](https://github.com/weld-project/weld/tree/master/examples/python/grizzly).\nTo run Grizzly, you will also need the `WELD_HOME` environment variable to be set, because Grizzly needs to find its own native library through this variable.\n\n## Testing\n\n`cargo test` runs unit and integration tests. A test name substring filter can be used to run a subset of the tests:\n\n   ```\n   cargo test <substring to match in test name>\n   ```\n\n## Tools\n\nThis repository contains a number of useful command line tools which are built\nautomatically with the main Weld repository, including an interactive REPL for\ninspecting and debugging programs.  More information on those tools can be\nfound under [docs/tools.md](https://github.com/weld-project/weld/tree/master/docs/tools.md).\n"
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "python",
          "type": "tree",
          "content": null
        },
        {
          "name": "weld-capi",
          "type": "tree",
          "content": null
        },
        {
          "name": "weld-hdrgen",
          "type": "tree",
          "content": null
        },
        {
          "name": "weld-python",
          "type": "tree",
          "content": null
        },
        {
          "name": "weld-repl",
          "type": "tree",
          "content": null
        },
        {
          "name": "weld",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}