{
  "metadata": {
    "timestamp": 1736709039711,
    "page": 137,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjE0MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "glium/glium",
      "stars": 3533,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.0390625,
          "content": "/target\n/Cargo.lock\n/book/_book\n/.vscode"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 29.5400390625,
          "content": "# Changelog\n\n## Version 0.36.0 (2024-10-11)\n\n- Fix UB around FDs being closed\n- Fix static mut ref warnings in tests\n- Make `SimpleWindowBuilder` accept `ActiveEventLoop`\n\n## Version 0.35.0 (2024-08-04)\n\n- Updated glutin to version 0.32.0. See the glutin release notes [here](https://github.com/rust-windowing/glutin/blob/master/CHANGELOG.md#version-0320).\n\n## Version 0.34.0 (2024-01-03)\n\n- Updated glutin to version 0.31.0. See the glutin release notes [here](https://github.com/rust-windowing/glutin/blob/master/CHANGELOG.md#version-0310).\n\n## Version 0.33.0 (2023-11-01)\n\n- Add `read` methods for `Unsigned` textures\n- Add `gl::HALF_FLOAT` to `bind_attribute`\n- Lowered version check for `gl_PointSize` from 3.0 to 2.0\n- Added Dynamic Uniform based on `HashMap`.\n- Updated glutin to version 0.30.0. See the glutin release notes [here](https://github.com/rust-windowing/glutin/blob/master/CHANGELOG.md#version-0300).\n\n## Version 0.32.1 (2022-07-31)\n\n- Bugfix release to not panic when given multiple vertex attributes with unspecified location numbers.\n\n## Version 0.32.0 (2022-07-30)\n\n- Updated glutin to version 0.29.0. See the glutin release notes [here](https://github.com/rust-windowing/glutin/blob/master/CHANGELOG.md#version-0290-2022-07-30).\n- Support for location binding for Vertex attributes.\n\n## Version 0.31 (2021-12-11)\n\n- Updated glutin to version 0.28.0. See the glutin release notes [here](https://github.com/rust-windowing/glutin/blob/master/CHANGELOG.md#version-0280-2021-12-02).\n- Use mdbook for the book.\n\n## Version 0.30.2 (2021-09-06)\n\n- Added depth and stencil buffer blitting.\n- Added dual source blending.\n- Implemented AsUniformValue for Texture2d directly.\n\n## Version 0.30.1 (2021-07-12)\n\n- Added `ClientFormat::U1U5U5U5Reversed`.\n- Updated `ouroboros` to 0.10.\n\n## Version 0.30.0 (2021-06-23)\n\n- Updated glutin to version 0.27.0. See the glutin release notes [here](https://github.com/rust-windowing/glutin/blob/master/CHANGELOG.md#version-0270-2021-06-01).\n- Replaced unmaintained `rental` with `ouroboros`.\n- Allow instancing on GLES3 or later.\n- Support for importing and using Vulkan semaphores.\n- Made `Content::read` an unsafe API.\n- Modernized and fixed the third chapter of the tutorial.\n\n## Version 0.29.1 (2021-04-22)\n\n- Updated rand to 0.8.\n- Updated cgmath to 0.18.\n- Made `UniformsStorage` implement `Copy` and `Clone`.\n- Use `$crate::uniform!` internally.\n- Implemented `From` instead of `Into` for some conversions.\n\n## Version 0.29.0 (2020-12-15)\n\n- Updated glutin to version 0.26.0. See the glutin release notes [here](https://github.com/rust-windowing/glutin/blob/master/CHANGELOG.md#version-0260-2020-12-10).\n- Updated memoffset to 0.6.\n- Added support for `glPolygonOffset`.\n- Added support for loading SPIR-V shaders.\n- Switched to edition 2018.\n- Switched from Travis CI to Github Actions\n\n## Version 0.28.0 (2020-10-03)\n\n- Updated glutin to version 0.25.0. See the glutin release notes [here](https://github.com/rust-windowing/glutin/blob/master/CHANGELOG.md#version-0250-2020-10-02).\n- Implemented atomic counters.\n- Added `CubeMapArrays` support.\n\n## Version 0.27.0 (2020-03-26)\n\n- Updated glutin to version 0.24.0. See the glutin release notes [here](https://github.com/rust-windowing/glutin/blob/master/CHANGELOG.md#version-0240-2020-03-11).\n\n## Version 0.26.0 (2020-02-09)\n\n- Updated glutin to version 0.23.0. See the glutin release notes [here](https://github.com/rust-windowing/glutin/blob/master/CHANGELOG.md#version-0230-2020-02-06).\n- Removal of some unsound code that rustc warns about\n- Report the precise shader stage in which a shader failed compilation\n\n## Version 0.25.1 (2019-07-08)\n\n- Silenced deprecation warning when invoking `implement_vertex`.\n\n## Version 0.25.0 (2019-05-24)\n\n- Updated glutin to version 0.21.\n\n## Version 0.24.0 (2019-04-08)\n\n - Updated glutin to version 0.20. See the glutin release notes [here](https://github.com/rust-windowing/glutin/blob/master/CHANGELOG.md#version-0200-2019-03-09).\n - Depth comparison and shadow mapping ([#1679](https://github.com/glium/glium/pull/1679)).\n\n## Version 0.23.0 (2018-12-05)\n\n - Updated glutin to version 0.19. See the glutin release notes [here](https://github.com/rust-windowing/glutin/blob/master/CHANGELOG.md#version-0190-2018-11-09).\n\n## Version 0.22.0 (2018-07-02)\n\n - Updated glutin to version 0.17.\n - Updated glutin to version 0.16. Added 'icon_loading' feature.\n\n## Version 0.21.0 (2018-04-11)\n\n - Updated glutin to version 0.14. Fixes handling of HiDPI on macOS.\n - Updated gl_generator to version 0.9.\n\n## Version 0.20.0 (2018-01-22)\n\n - Updated glutin to version 0.12.\n - Updated smallvec from version 0.4 to 0.6.\n - Updated misc internal dependencies and dev-dependencies (lazy_static, cgmath, rand, image, gl_generator).\n - Replaced the `IntoVerticesSource` trait with `Into<VerticesSource>`.\n - Fixed [rendering bug](https://github.com/glium/glium/issues/1657) on high-DPI screens.\n - Added support for clipping via `gl_ClipDistance`.\n - Enabled [depth-stencil FBO attachments](https://github.com/glium/glium/issues/253).\n\n## Version 0.19.0 (2017-12-11)\n\n - Updated glutin to version 0.11. Notably includes the [winit 0.9 update](https://github.com/rust-windowing/winit/blob/master/CHANGELOG.md#version-090-2017-12-01).\n - Updated gl_generator to 0.7 (internal dependency).\n\n## Version 0.18.1 (2017-11-05)\n\n - Fixed links pointing to tomaka/glium instead of glium/glium\n - Various documentation updates, bugfixes, and dependency updates.\n\n## Version 0.18.0 (2017-10-15)\n\n - Updated glutin to version 0.10.\n - Added support for is_buffer_supported usage on all buffer types.\n - Various documentation updates and bugfixes.\n\n## Version 0.17.1 (2017-08-27)\n\n - Changed documentation to docs.rs.\n - Various bugfixes and updates to internal dependencies.\n\n## Version 0.17.0 (2017-07-12)\n\n - Updated glutin to version 0.9.\n - Redesigned API around EventsLoop to match updated winit design.\n - Added support for vector normalization.\n - Various bugfixes.\n\n## Version 0.16.0 (2017-01-07)\n\n - Added asynchronous screenshot example.\n - Updated tutorials to compile on Mac OS X.\n - Various tutorial documentation updates.\n - Fix buffer reads which could fail being safe.\n - Various bugfixes.\n\n## Version 0.15.0 (2016-07-03)\n\n - Updated glutin to version 0.6.1\n - Various internal dependency updates.\n\n## Version 0.14.0 (2016-04-11)\n\n - Updated glutin to version 0.5.\n - Various bugfixes.\n\n## Version 0.13.5 (2016-02-04)\n\n - Fixed integer textures using a forbidden filtering by default.\n - Better error report in case of a uniform block layout mismatch.\n\n## Version 0.13.4 (2016-01-21)\n\n - Added support for shader subroutines.\n - Added various functions to `Context` to retrieve information (like the content of `GL_VENDOR` or `GL_RENDERER` for example).\n - Added additional dimensions getters to the various texture types.\n\n## Version 0.13.3 (2016-01-08)\n\n - Added constructors to `SimpleFrameBuffer` for depth-only, depth-stencil-only, stencil-only and depth & stencil framebuffers.\n\n## Version 0.13.2 (2015-12-21)\n\n - Fixed compilation on ARM platform.\n - Added a hack to make screenshots and video taken with the FRAPS software work.\n\n## Version 0.13.1 (2015-12-15)\n\n - `raw_read_to_pixel_buffer` now accepts all pixel types.\n\n## Version 0.13.0 (2015-12-12)\n\n - Removed native support for cgmath and nalgebra in avoid to avoid dependency hell.\n - Reworked the layer-related, level-related functions and `into_image` from texture types where they are not relevant.\n - The `Backend::get_proc_address` function now takes a `*const std::os::raw::c_void` instead of a `*const ()`.\n\n## Version 0.12.4 (2015-12-12)\n\n - Added small hack to make glium work with WebGL.\n - Fixed blend color state not being always updated.\n\n## Version 0.12.3 (2015-12-04)\n\n - Added `raw_clear_buffer` to `TextureAnyImage`, which allows you to clear the content of any texture.\n - Added `TextureAny::from_id` to manipulate an unowned texture.\n\n## Version 0.12.2 (2015-11-25)\n\n - Fixed a bug when matching frag output locations with framebuffer attachments.\n\n## Version 0.12.1 (2015-11-25)\n\n - Added `MultiOutputFrameBuffer::with_stencil`, `with_depth_stencil` and `with_depth_and_stencil`.\n - Implemented the `ToColorAttachment` trait for unsigned and integral textures.\n - Implemented the `ToXAttachment` traits for the `XAttachment` types.\n - It is now possible to use another format than `(u8, u8, u8, u8)` with `raw_read` on a texture.\n\n## Version 0.12.0 (2015-11-21)\n\n - Removed the \"image\" feature and native support for the `image`. You now have to perform conversions yourself.\n - The `Backend::get_proc_address` function now takes a `*const ()` instead of a `*const libc::c_void`.\n - Creating a `MultiOutputFrameBuffer` now requires passing an iterator instead of a `Vec`.\n - When checking a uniform block's layout, `[f32; 4]` now matches both `vec4` and `float[4]` instead of just `vec4` before. Same for all other arrays between 1 and 4 elements.\n - `UniformBlock` is now implemented for `[T; N]` where N is between 5 and 32, plus 64, 128, 256, 512, 1024 and 2048.\n - When checking a uniform block's layout, arrays (sized and unsized) now match structs with a single member that is an array.\n\n## Version 0.11.1 (2015-11-10)\n\n - Fix broken compilation after libc 0.2.\n\n## Version 0.11.0 (2015-11-04)\n\n - Updated the versions of glutin, image and cgmath.\n - Improved performance of stencil-related state changes.\n - Fixed `glBufferData` being called to invalidate a buffer created with `glBufferStorage`.\n - Changed use of `Range` in buffer slice to `RangeArgument`.\n\n## Version 0.10.0 (2015-10-14)\n\n - Update glutin to 0.4, cgmath to 0.3 and nalgebra to 0.3.\n - Add the possibility to set the behavior of the debug callback in `Context::new`.\n - Add `build_glium_debug` and `build_glium_unchecked_debug` to set the behavior of the debug callback at initialization.\n - Rename `ClockWise` to `Clockwise`.\n - The `program!` macro now returns a `ProgramChooserCreationError` and no longer panics if no version is found.\n - Remove the `Texture` trait. All of its methods are already implemented on all texture types already.\n - Rename `UniformBlock::binding` to `id` and add `initial_binding`.\n\n## Version 0.9.3 (2015-10-13)\n\n - Fixed an invalid enum error during initialization.\n\n## Version 0.9.2 (2015-10-11)\n\n - Add `is_color_renderable` to the color image formats.\n - Fixed glium erroneously using a SSBO's and a uniform buffer's binding point instead of index.\n - Fixed `glInvalidateBuffer(Sub)Data` being called for persistent-mapped buffers.\n\n## Version 0.9.1 (2015-09-30)\n\n - Add `ComputeShader::execute_indirect`.\n - Add support for 64bits integer uniforms.\n - `copy_to` now takes a `Into<BufferSlice>` instead of a `BufferSlice`.\n - Glium no longer calls `glBlendColor` if the blending algorithm doesn't use it.\n - Deprecated `DrawParameters::validate`.\n\n## Version 0.9.0 (2015-09-15)\n\n - The blending, depth and stencil functions now use dedicated structs named `Blend`, `Depth` and `Stencil`.\n - `SimpleFrameBuffer` and `MultiOutputFrameBuffer`'s constructors now return a `Result`.\n - Creating a renderbuffer now returns a `Result`.\n - Add support for empty framebuffers with the `EmptyFrameBuffer` type.\n - Fix an OpenGL error when mapping a buffer with `map_read`.\n - Glium no longer panics in case of OpenGL error. It prints a message with backtrace on stdout instead.\n - Removed the `DrawParametersBuilder` struct.\n - Add `clear_color_srgb` and derivates. The `clear` method has an additional `color_srgb: bool` parameter.\n - Added some state changes when swapping buffers to adapt to the FRAPS software.\n - Removed `StencilTexture3d` are they are not supported by OpenGL.\n\n## Version 0.8.7 (2015-08-27)\n\n - Fix a panic when creating a stencil renderbuffer or texture.\n - Add support for `f64` uniforms.\n\n## Version 0.8.6 (2015-08-26)\n\n - Renamed `BufferView` to `Buffer`. `BufferView` still exists for backward compatibility.\n - Add a `copy_to` method to buffers.\n - Add support for the `GL_OES_element_index_uint` extension.\n - Fixed OpenGL ES 3.2 not working.\n - Add support for `IntVec{2|3|4}` and `UnsignedIntVec{2|3|4}` uniform types.\n - Add a work-around for Radeon drivers crashing with 32+ texture units.\n - Add support for `boolean` uniforms.\n - Add support for `BoolVec{2|3|4}` uniform types.\n\n## Version 0.8.5 (2015-08-12)\n\n - Added support for cubemaps and cubemap arrays. Not all operations are available yet.\n - `DrawParameters` no longer implements `Copy`.\n - Add support for OpenGL ES 3.2 for geometry shaders, tessellation shaders, robustness, debug output, buffer textures, stencil textures, base vertex.\n - Add support for `GL_OES_geometry_shader`, `GL_OES_tessellation_shader` `GL_OES_draw_elements_base_vertex`, `GL_OES_draw_elements_base_vertex`.\n - Add support for specifying the primitive bounding box as an optimization hint to the backend.\n - Added various `is_texture_*_supported` functions in the `texture` module to check whether a texture type is supported.\n\n## Version 0.8.4 (2015-08-10)\n\n - Added `#[inline]` attributes on many functions.\n - Added `slice_custom` and `slice_custom_mut` to buffers, which allow you to get slices over anything inside the buffer.\n - Added `Query::to_buffer_u32` to write the result of a query to a buffer.\n - Added `is_supported` functions for all the texture and renderbuffer formats.\n - Added missing `I16I16I16I16` and `U16U16U16` float formats. Renamed `U3U32U`to `U3U3U2`.\n - Various fixes and improvements when determining whether a format is supported.\n - Changed the `framebuffer::To*Attachment` traits with a lifetime parameter, and to take by value instead of by reference.\n - The `framebuffer::To*Attachment` traits are now implemented on `TextureLayerMipmap` structs.\n - Fixed `.layer()` function returning `None` when it shouldn't.\n - GLSL ES 3.2 is now recognized.\n\n## Version 0.8.3 (2015-08-04)\n\n - Textures are now inside submodules (for example `Texture2d` is in `texture::texture2d::Texture2d`) and reexported from `texture`.\n - Added `Context::flush()` and `Context::finish()`. Deprecated `Context::synchronize`.\n - Removed `Sized` constraint for `Surface` that was preventing one from using `&Surface` or `&mut Surface`.\n - Added `TextureAnyMipmap::raw_upload_from_pixel_buffer`.\n - Moved the `pixel_buffer` module to `texture::pixel_buffer` (the old module still exists for backward compatibility).\n\n## Version 0.8.2 (2015-07-29)\n\n - Added a `buffer_texture` module in `texture`.\n - Added `DrawParameters::depth_clamp` and `DrawError::DepthClampNotSupported`.\n\n## Version 0.8.1 (2015-07-27)\n\n - Added `DrawParameters::ProvokingVertex` and `DrawError::ProvokingVertexNotSupported`.\n - Added `DrawError::RasterizerDiscardNotSupported`.\n - `DrawParametersBuilder` is now deprecated.\n - `ProgramCreationInput` now has a `outputs_srgb` member.\n - Fixed a bug with offsets of members in arrays.\n - Added support for the `GL_EXT_geometry_shader` OpenGL ES extension.\n\n## Version 0.8.0 (2015-07-19)\n\n - Removed all Cargo features related to OpenGL compatibility.\n - Replaced all `new_if_supported` or `empty_if_supported` functions with `new` or `empty` and a proper error type.\n - All `new` and `empty` constructors now return an error if the operation is not supported.\n - `VertexBuffer` and `IndexBuffer` constructors now take a `&[T]`.\n - Updated glutin to version 0.3.\n - `BufferView`'s constructors now take a `BufferMode`.\n - Replaced `read` and `read_if_supported` with `read` that returns a `ReadError`.\n - Added `buffer::is_buffer_read_supported`.\n - Removed the deprecated `new_empty` function from textures.\n - Reworked `TextureCreationError` and removed `TextureMaybeSupportedCreationError`.\n - `new` and `dynamic` are now less specialized, which should fix some performance bottlenecks.\n - All buffer constructors now come in four variants: `new`, `dynamic`, `persistent`, `immutable`.\n - Add support for all missing vertex attributes.\n - Fixed stencil operations sometimes not working.\n\n## Version 0.7.1 (2015-07-14)\n\n - Glium now automatically calls `glDraw*BaseVertex` if it is supported.\n - Added the `CapabilitiesSource` trait implemented automatically on all types that implement `Facade`.\n - Added `is_supported` to `IndexType`, `Index`, `PrimitiveType`, `Attribute` and `AttributeType`.\n - Added `ComputeShader::is_supported`, `program::is_geometry_shader_supported` and `program::is_tessellation_shader_supported`.\n - The `implement_buffer_content!` and `implement_block_layout!` macros can now take a struct with a lifetime parameter by passing `Foo<'a>` instead of `Foo`.\n\n## Version 0.7.0 (2015-07-08)\n\n - Buffers now contain a single, possibly unsized, element. `BufferView<T>` is now `BufferView<[T]>`.\n - Creating an empty `BufferView<[T]>` now requires calling `empty_array` instead of `empty`.\n - `BufferView::write` now takes a `&T` instead of a `P where P: AsRef<[T]>`. This means that you can no longer pass `Vec`s by value for example.\n - Removed the mock methods from `UniformBuffer` as they are available through the `Deref` to `BufferView`.\n - The `UniformBlock` trait is now implemented on `DrawCommandNoIndices` and `DrawCommandIndices`.\n - Added the `implement_buffer_content!` macro to put on unsized struct so that you can put them inside buffers.\n - Added a `uniforms::LayoutMismatchError` as an additional field to `DrawError::UniformBlockLayoutMismatch`.\n - Changed `UniformBlock::matches` to return a `Result<(), UniformBlockLayoutMismatch>`.\n - Removed the `matches` function from the `AsUniformValue` trait.\n - Removed `TextureSurface` in favor of `SimpleFrameBuffer`.\n\n## Version 0.6.7 (2015-07-06)\n\n - Added `DrawCommandsIndicesBuffer` for multidraw elements indirect.\n - Added `ResidentTexture`, `TextureHandle` and `Texture::resident_if_supported()` for bindless textures.\n - Buffers no longer require their content to be `Send` or `'static` (except for types with the `Any` suffix).\n - Renamed `texture::TextureType` to `Dimensions`.\n - Added `Context::get_opengl_version()` and deprecated `get_version()`.\n\n## Version 0.6.6 (2015-07-03)\n\n - Buffers with persistent mapping now synchronize individual segments of the buffer instead of the buffer as a whole.\n - Dynamic sized arrays are now properly handled by the introspection system.\n - Added support for matrix shader attributes.\n - Fixed the value of `depth_write` being ignored if `depth_test` was `Overwrite`.\n\n## Version 0.6.5 (2015-06-29)\n\n - Renamed and changed `UniformBlockMember` to `BlockLayout`.\n - Added `map_read()` and `map_write()` to buffers.\n - Various bugfixes related to queries.\n - Added a `implement_uniform_block!` macro for uniform buffers and SSBOs similar to `implement_vertex!`.\n - Added `UniformBuffer::empty` and `UniformBuffer::empty_if_supported`.\n - Fixed sRGB being disabled when clearing before drawing for the first time.\n\n## Version 0.6.4\n\n - Fixed an OpenGL error if GL_ARB_robustness was present with OpenGL < 3.0.\n - Now using the `GL_APPLE_SYNC` extension if OpenGL ES 3.0 is not available.\n - Now using the `GL_EXT_buffer_storage` extension on OpenGL ES if it is available.\n - Slightly improved performances when using a dynamic buffer.\n - Added `GL_PROGRAM_POINT_SIZE` support to `Program`.\n\n## Version 0.6.3\n\n - Fixed the OpenGL compatibility check for SSBO reflection.\n - Fixed a potential OpenGL error if uniform buffer objects are not supported.\n - Fixed a potential OpenGL error if transform feedback buffers are not supported.\n\n## Version 0.6.2\n\n - Added `is_context_lost`, `is_robust` and `is_context_loss_possible` methods to `Context` (callable through the `Display` as well).\n - Fixed using a framebuffer with a depth or stencil attachment causing the wrong texture to be displayed.\n\n## Version 0.6.1\n\n - Fixed mipmaps generation with sRGB textures.\n\n## Version 0.6.0\n\n - `Frame::finish` now returns a `Result`. `Frame`'s destructor will panic if `finish` has not been called.\n - `with_compressed_data` and `with_compressed_data_if_supported` now have an additional parameter for mipmaps.\n - All the texture constructors that used to take a boolean as parameter for mipmaps now takes an enum.\n - `empty_with_format` and `empty_with_format_if_supported` are now allowed for compressed textures.\n - `write`, `write_compressed_data`, `write_compressed_data_if_supported` and `read_compressed_data` are now available for mipmap objects.\n - Removed the `is_closed()` function.\n - Removed the deprecated `render_buffer` module.\n - The `Backend::swap_buffers` function must now return a `Result`.\n\n## Version 0.5.6\n\n - The panic at initialization in case of OpenGL error has been replaced by a warning.\n\n## Version 0.5.5\n\n - Added `with_compressed_data`, `read_compressed_data` and `write_compressed_data` to compressed texture types.\n - Fixed a panic at initialization on OS/X.\n\n## Version 0.5.4\n\n - Added the `LineLoop` primitive type.\n - Added the `smooth` draw parameters.\n - Fixed a potential `GL_INVALID_ENUM` error generated at initialization.\n - Glium will now panic if an OpenGL error is triggered during initialization.\n - Fixed gamma correction with OpenGL ES.\n - Fixed `get_internal_format_if_supported()` sometimes panicking.\n - Fixed a panic with a tessellation evaluation shader that outputs quads.\n\n## Version 0.5.3\n\n - Added support for compute shaders with the `program::ComputeShader` struct.\n - Can now bind a uniform buffer as a shader storage buffer.\n - Added `Program::get_shader_storage_blocks()` to obtain the list of shader storage blocks.\n - The `Attribute` trait is now implemented on types from cgmath.\n - Now caching the actual format of a texture in case it is retrieved multiple times.\n\n## Version 0.5.2\n\n - Added `vertex::TransformFeedbackSession` and `transform_feedback` to the draw parameters.\n - Added `RenderBufferAny`. Render buffers now deref to `RenderBufferAny`.\n - Deprecated `.into_vertex_buffer_any()` in favor of `.into()`.\n - Added `.get_total_bits()` to `texture::InternalFormat`.\n - Fixed values in uniform blocks being required to implement the `Default` trait.\n - Fixed buffer sometimes not always correctly unbound.\n\n## Version 0.5.1 (2015-05-30)\n\n - Added `index::DrawCommandsNoIndicesBuffer` for multidraw indirect drawing.\n - Fixed a potential panic when using a buffer.\n\n## Version 0.5.0 (2015-05-27)\n\n - `IndexBuffer` now takes the type of indices as template parameter.\n - `IndexBuffer` now derefs to `BufferView`. Allows modifying the index buffer after it has been created.\n - Added `IndexBufferAny`.\n - Removed the `ToIndicesSource` and `IntoIndexBuffer` traits. The former is replaced with `Into<IndicesSource>`.\n - `PixelBuffer` now takes the type of pixels as template parameter.\n - Renamed `PixelBuffer::read` to `PixelBuffer::read_as_texture_2d`.\n - `PixelBuffer` now derefs to `BufferView`.\n - Added `BufferView::read_as_texture_1d` and `BufferView::read_as_texture_1d_if_supported`.\n - Reworked `TextureDataSink` traits to take a precise format.\n - Fixed a panic when destroying a buffer with persistent mapping.\n - Removed deprecated function `VertexBuffer::new_dynamic`.\n - It is now safe to call `mem::forget` on a `Mapping` object.\n\n## Version 0.4.2 (2015-05-25)\n\n - Removed the `buffer::Builder` type as it was proven unsound.\n - Renamed `SubBuffer` to `BufferView`.\n - `Display`/`GlutinFacade` now derefs to `Context`.\n - Mapping a buffer now simply calls `glMapBuffer` again, instead of writing to a temporary buffer.\n - `glutin` is now an optional dependency (enabled by default).\n - Creating an index buffer now correctly uses a `GL_ELEMENT_ARRAY_BUFFER`.\n\n## Version 0.4.1 (2015-05-22)\n\n - Added a `buffer::Builder` type to build multiple sub-buffers within the same buffer.\n - Added an `invalidate` method to buffers.\n - Updated glutin to 0.1.6.\n\n## Version 0.4.0 (2015-05-17)\n\n - Removed support for using indices in RAM.\n - `IndexBuffer`, `VertexBuffer` and `UniformBuffer` now deref to `SubBuffer`/`SubBufferAny`.\n - Added a `get_internal_format_if_supported` method to textures.\n - Replaced the `IntoProgramCreationInput` trait with `Into<ProgramCreationInput>`.\n - The `VertexFormat` type is now a `Cow<'static, []>` instead of a `Vec`.\n - Updated cgmath dependency to version 0.2.\n\n## Version 0.3.7 (2015-05-12)\n\n - Added `AnySamplesPassedQuery`, `PrimitivesGeneratedQuery` and `TransformFeedbackPrimitivesWrittenQuery`, and corresponding fields in `DrawParameters`.\n - The `samples_passed_query` draw parameter can now also take a `AnySamplesPassedQuery`.\n - Added a `condition` parameter to the draw parameters, allowing you to use conditional rendering.\n - Textures now have a `sampled()` method to make it easier to create a `Sampler`.\n - Added a `color_mask` member to the draw parameters.\n - Added `per_instance` and `per_instance_if_supported` to `VertexBufferAny`.\n\n## Version 0.3.6 (2015-05-09)\n\n - Added `SamplesPassedQuery` and `TimeElapsedQuery` types. They can be passed to the draw parameters.\n - Buffers are no longer mapped with `GL_MAP_COHERENT_BIT`. Flushing is handled by glium.\n - Changed `Surface::clear` to take an additional optional `Rect` parameter that specifies the rectangle to clear.\n - Fixed the `program!` macro not usable with version numbers >= 256.\n - Added support for `GL_OES_depth_texture` and `GL_OES_packed_depth_stencil`.\n - Moved the content of the `render_buffer` module to `framebuffer`. `render_buffer` still exists but is deprecated.\n\n## Version 0.3.5 (2015-05-02)\n\n - Glium now reexports glutin. You can access glutin with `glium::glutin`.\n - Fixed trying to retrieve uniform blocks on OpenGL ES 2.\n\n## Version 0.3.4 (2015-04-28)\n\n - Added caching some uniform values in the `Program` struct to avoid calls to `glUniform`.\n - `VertexBuffer::dynamic` and `write` can now take a  `&[T]` as well as a `Vec<T>`.\n - `assert_no_error` now takes an optional user-defined string.\n - Fixed triggering an OpenGL error on initialization with non-compatibility contexts.\n - Added a better texture units assignment system when drawing, in order to avoid some redundant state changes.\n\n## Version 0.3.3 (2015-04-24)\n\n - Removed the `gl_persistent_mapping` feature.\n - Creating a dynamic buffer now creates a persistent mapped buffer automatically if supported.\n - Creating a non-dynamic buffer now creates an immutable buffer. Modifying such a buffer is still possible but very expensive.\n - Deprecated the `new_dynamic` function in favor of `dynamic`.\n - Fixed zero-sized textures triggering OpenGL errors.\n - Added the possibility to add a debug string in the OpenGL commands queue.\n\n## Version 0.3.2 (2015-04-23)\n\n - Added `vertex::EmptyVertexAttributes` and `vertex::EmptyInstanceAttributes` markers in order to draw without a vertex source.\n - Added more formats in `CompressedFormats` and `CompressedSrgbFormats`.\n - Fixed the `Mapping` objects not implementing `Sync`.\n - Fixed rendering to an sRGB texture not possible.\n - `GliumCreationError` now has a template parameter indicating the backend creation error type.\n - The `DisplayBuild` trait has a new associated type indicating the error type.\n - Fixed the debug output callback not being disabled when compiling with --release.\n\n## Version 0.3.1 (2015-04-18)\n\n - Fixed lifetime-related issues when using the `uniform!` macro.\n\n## Version 0.3.0 (2015-04-16)\n\n - Changed the `slice()` functions to take a `Range` instead of two parameters.\n - Added `SrgbTexture` and `CompressedSrgbTexture` types.\n - Added `SrgbFormat` and `CompressedSrgbFormat` enums.\n - `GL_FRAMEBUFFER_SRGB` is now enabled by default.\n\n## Version 0.2.3 (2015-04-14)\n\n - Added a `program!` macro which builds a program. Glium chooses the right shaders depending on what the backend supports.\n - Added a `VertexBuffer::empty` method that creates a vertex buffer with uninitialized data.\n - Fixed drawing with offsets in vertex buffers different than 0 not permitted.\n - Changed transform feedback reflection API to be compatible with what OpenGL 4.4 or ARB_enhanced_layouts allow.\n - `VertexBuffer::new` can now take a slice as parameter.\n - Revert the fix for sRGB. `GL_FRAMEBUFFER_SRGB` is no longer enabled.\n\n## Version 0.2.2 (2015-04-10)\n\n - Added support for backends that don't have vertex array objects (like OpenGL ES 2/WebGL).\n - Glium now has basic support for OpenGL ES 2/WebGL.\n - Added stencil operations in `DrawParameters`.\n - Fixed `GL_FRAMEBUFFER_SRGB` not being enabled, leading to different brightness depending on the target.\n - Fixed trailing commas not working in `implement_vertex!` and `uniform!`.\n\n## Version 0.2.1 (2015-04-03)\n\n - Creating a texture with a specific format now properly checks for available extensions.\n\n## Version 0.2.0 (2015-03-30)\n\n - Removed `PerInstanceAttributesBuffer` and `PerInstanceAttributesBufferAny`.\n - Added `per_instance` and `per_instance_if_supported` to `VertexBuffer`.\n - Removed the deprecated `index_buffer` module. Use the `index` module instead.\n - Fixed viewport dimensions on retina screens.\n - The `Backend` trait is now marked unsafe.\n\n## Version 0.1.3 (2015-03-24) & 0.1.4 (2015-03-26)\n\n - Added the `Backend` and `Facade` traits. `Display` implements the `Facade` trait.\n - Changed all buffer/texture/etc. creation functions to take any type that implements `Facade` instead of a `Display`.\n - Added `GlutinWindowBackend` and `GlutinHeadlessBackend` that implement the `Backend` trait.\n - Changed the private `Context` struct to be public. This allows users to implement the `Facade` trait themselves.\n - Added an associated type to the `DisplayBuild` trait.\n - Fixed scissor boxing not being disabled before a blit.\n\n## Version 0.1.2 (2015-03-20)\n\n - Fixed a memory leak with vertex array objects.\n - Fixed an issue where you couldn't reuse the same uniform values created with `uniform!` multiple times.\n\n## Version 0.1.1 (2015-03-13)\n\n - Added `ToColorAttachment` trait implementation for `Texture2dMultisample`.\n - Added `Texture2dMultisample::as_surface` method.\n - Updated the crate for the new I/O.\n - Changed `VertexFormat` to take a `Cow<'static, str>` instead of a `String`.\n - Fixed a stack overflow in release mode.\n - Removed the `fence` argument from vertices, indices and uniforms sources. Fences are now directly gathered from buffers when drawing.\n"
        },
        {
          "name": "Cargo.toml",
          "type": "blob",
          "size": 2.2119140625,
          "content": "[package]\nname = \"glium\"\nversion = \"0.36.0\"\nauthors = [\"Pierre Krieger <pierre.krieger1708@gmail.com>\"]\ndescription = \"\"\"\nElegant and safe OpenGL wrapper.\n\nGlium is an intermediate layer between OpenGL and your application. You still need to manually handle\nthe graphics pipeline, but without having to use OpenGL's old and error-prone API.\n\nIts objectives:\n\n - Be safe to use. Many aspects of OpenGL that can trigger a crash if misused are automatically handled by glium.\n - Provide an API that enforces good pratices such as RAII or stateless function calls.\n - Be compatible with all OpenGL versions that support shaders, providing unified API when things diverge.\n - Avoid all OpenGL errors beforehand.\n - Produce optimized OpenGL function calls, and allow the user to easily use modern OpenGL techniques.\n\"\"\"\nkeywords = [\"opengl\", \"gamedev\"]\ncategories = [\"api-bindings\", \"rendering::graphics-api\"]\ndocumentation = \"https://docs.rs/glium\"\nrepository = \"https://github.com/glium/glium\"\nreadme = \"README.md\"\nlicense = \"Apache-2.0\"\nbuild = \"build/main.rs\"\nexclude = [\"doc\"]\nedition = \"2021\"\n\n[features]\ndefault = [\"glutin_backend\", \"simple_window_builder\", \"glutin/default\", \"winit/default\", \"glutin-winit/default\"]\nglutin_backend = [\"glutin\"]\nunstable = [] # used for benchmarks\nvk_interop = [] # used for texture import from Vulkan\nsimple_window_builder = [\"glutin\", \"glutin-winit\", \"winit\", \"raw-window-handle\"] # used in the tutorial\n\n[dependencies.glutin]\nversion = \"0.32\"\nfeatures = []\noptional = true\ndefault-features = false\n\n[dependencies.glutin-winit]\nversion = \"0.5\"\nfeatures = []\noptional = true\ndefault-features = false\n\n[dependencies.winit]\nversion = \"0.30\"\nfeatures = []\noptional = true\ndefault-features = false\n\n[dependencies.raw-window-handle]\nversion = \"0.6\"\nfeatures = []\noptional = true\ndefault-features = false\n\n[dependencies]\nmemoffset = \"0.9.0\"\nbacktrace = \"0.3.2\"\nsmallvec = \"1.0\"\nfnv = \"1.0.5\"\n\n[build-dependencies]\ngl_generator = \"0.14\"\n\n[dev-dependencies]\nouroboros = \"0.18\"\ncgmath = \"0.18\"\ngenmesh = \"0.6\"\nimage = \"0.25\"\nobj = { version = \"0.10\", features = [\"genmesh\"] }\nrand = \"0.8\"\nlibc = \"0.2.62\"\nwinit = \"0.30\"\nraw-window-handle = \"0.6\"\nglutin-winit = \"0.5\"\ntakeable-option = \"0.5\"\n\n[package.metadata.docs.rs]\nall-features = true\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 11.2529296875,
          "content": "Apache License\r\n                           Version 2.0, January 2004\r\n                        http://www.apache.org/licenses/\r\n\r\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\r\n\r\n   1. Definitions.\r\n\r\n      \"License\" shall mean the terms and conditions for use, reproduction,\r\n      and distribution as defined by Sections 1 through 9 of this document.\r\n\r\n      \"Licensor\" shall mean the copyright owner or entity authorized by\r\n      the copyright owner that is granting the License.\r\n\r\n      \"Legal Entity\" shall mean the union of the acting entity and all\r\n      other entities that control, are controlled by, or are under common\r\n      control with that entity. For the purposes of this definition,\r\n      \"control\" means (i) the power, direct or indirect, to cause the\r\n      direction or management of such entity, whether by contract or\r\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\r\n      outstanding shares, or (iii) beneficial ownership of such entity.\r\n\r\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\r\n      exercising permissions granted by this License.\r\n\r\n      \"Source\" form shall mean the preferred form for making modifications,\r\n      including but not limited to software source code, documentation\r\n      source, and configuration files.\r\n\r\n      \"Object\" form shall mean any form resulting from mechanical\r\n      transformation or translation of a Source form, including but\r\n      not limited to compiled object code, generated documentation,\r\n      and conversions to other media types.\r\n\r\n      \"Work\" shall mean the work of authorship, whether in Source or\r\n      Object form, made available under the License, as indicated by a\r\n      copyright notice that is included in or attached to the work\r\n      (an example is provided in the Appendix below).\r\n\r\n      \"Derivative Works\" shall mean any work, whether in Source or Object\r\n      form, that is based on (or derived from) the Work and for which the\r\n      editorial revisions, annotations, elaborations, or other modifications\r\n      represent, as a whole, an original work of authorship. For the purposes\r\n      of this License, Derivative Works shall not include works that remain\r\n      separable from, or merely link (or bind by name) to the interfaces of,\r\n      the Work and Derivative Works thereof.\r\n\r\n      \"Contribution\" shall mean any work of authorship, including\r\n      the original version of the Work and any modifications or additions\r\n      to that Work or Derivative Works thereof, that is intentionally\r\n      submitted to Licensor for inclusion in the Work by the copyright owner\r\n      or by an individual or Legal Entity authorized to submit on behalf of\r\n      the copyright owner. For the purposes of this definition, \"submitted\"\r\n      means any form of electronic, verbal, or written communication sent\r\n      to the Licensor or its representatives, including but not limited to\r\n      communication on electronic mailing lists, source code control systems,\r\n      and issue tracking systems that are managed by, or on behalf of, the\r\n      Licensor for the purpose of discussing and improving the Work, but\r\n      excluding communication that is conspicuously marked or otherwise\r\n      designated in writing by the copyright owner as \"Not a Contribution.\"\r\n\r\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\r\n      on behalf of whom a Contribution has been received by Licensor and\r\n      subsequently incorporated within the Work.\r\n\r\n   2. Grant of Copyright License. Subject to the terms and conditions of\r\n      this License, each Contributor hereby grants to You a perpetual,\r\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\r\n      copyright license to reproduce, prepare Derivative Works of,\r\n      publicly display, publicly perform, sublicense, and distribute the\r\n      Work and such Derivative Works in Source or Object form.\r\n\r\n   3. Grant of Patent License. Subject to the terms and conditions of\r\n      this License, each Contributor hereby grants to You a perpetual,\r\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\r\n      (except as stated in this section) patent license to make, have made,\r\n      use, offer to sell, sell, import, and otherwise transfer the Work,\r\n      where such license applies only to those patent claims licensable\r\n      by such Contributor that are necessarily infringed by their\r\n      Contribution(s) alone or by combination of their Contribution(s)\r\n      with the Work to which such Contribution(s) was submitted. If You\r\n      institute patent litigation against any entity (including a\r\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\r\n      or a Contribution incorporated within the Work constitutes direct\r\n      or contributory patent infringement, then any patent licenses\r\n      granted to You under this License for that Work shall terminate\r\n      as of the date such litigation is filed.\r\n\r\n   4. Redistribution. You may reproduce and distribute copies of the\r\n      Work or Derivative Works thereof in any medium, with or without\r\n      modifications, and in Source or Object form, provided that You\r\n      meet the following conditions:\r\n\r\n      (a) You must give any other recipients of the Work or\r\n          Derivative Works a copy of this License; and\r\n\r\n      (b) You must cause any modified files to carry prominent notices\r\n          stating that You changed the files; and\r\n\r\n      (c) You must retain, in the Source form of any Derivative Works\r\n          that You distribute, all copyright, patent, trademark, and\r\n          attribution notices from the Source form of the Work,\r\n          excluding those notices that do not pertain to any part of\r\n          the Derivative Works; and\r\n\r\n      (d) If the Work includes a \"NOTICE\" text file as part of its\r\n          distribution, then any Derivative Works that You distribute must\r\n          include a readable copy of the attribution notices contained\r\n          within such NOTICE file, excluding those notices that do not\r\n          pertain to any part of the Derivative Works, in at least one\r\n          of the following places: within a NOTICE text file distributed\r\n          as part of the Derivative Works; within the Source form or\r\n          documentation, if provided along with the Derivative Works; or,\r\n          within a display generated by the Derivative Works, if and\r\n          wherever such third-party notices normally appear. The contents\r\n          of the NOTICE file are for informational purposes only and\r\n          do not modify the License. You may add Your own attribution\r\n          notices within Derivative Works that You distribute, alongside\r\n          or as an addendum to the NOTICE text from the Work, provided\r\n          that such additional attribution notices cannot be construed\r\n          as modifying the License.\r\n\r\n      You may add Your own copyright statement to Your modifications and\r\n      may provide additional or different license terms and conditions\r\n      for use, reproduction, or distribution of Your modifications, or\r\n      for any such Derivative Works as a whole, provided Your use,\r\n      reproduction, and distribution of the Work otherwise complies with\r\n      the conditions stated in this License.\r\n\r\n   5. Submission of Contributions. Unless You explicitly state otherwise,\r\n      any Contribution intentionally submitted for inclusion in the Work\r\n      by You to the Licensor shall be under the terms and conditions of\r\n      this License, without any additional terms or conditions.\r\n      Notwithstanding the above, nothing herein shall supersede or modify\r\n      the terms of any separate license agreement you may have executed\r\n      with Licensor regarding such Contributions.\r\n\r\n   6. Trademarks. This License does not grant permission to use the trade\r\n      names, trademarks, service marks, or product names of the Licensor,\r\n      except as required for reasonable and customary use in describing the\r\n      origin of the Work and reproducing the content of the NOTICE file.\r\n\r\n   7. Disclaimer of Warranty. Unless required by applicable law or\r\n      agreed to in writing, Licensor provides the Work (and each\r\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\r\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\r\n      implied, including, without limitation, any warranties or conditions\r\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\r\n      PARTICULAR PURPOSE. You are solely responsible for determining the\r\n      appropriateness of using or redistributing the Work and assume any\r\n      risks associated with Your exercise of permissions under this License.\r\n\r\n   8. Limitation of Liability. In no event and under no legal theory,\r\n      whether in tort (including negligence), contract, or otherwise,\r\n      unless required by applicable law (such as deliberate and grossly\r\n      negligent acts) or agreed to in writing, shall any Contributor be\r\n      liable to You for damages, including any direct, indirect, special,\r\n      incidental, or consequential damages of any character arising as a\r\n      result of this License or out of the use or inability to use the\r\n      Work (including but not limited to damages for loss of goodwill,\r\n      work stoppage, computer failure or malfunction, or any and all\r\n      other commercial damages or losses), even if such Contributor\r\n      has been advised of the possibility of such damages.\r\n\r\n   9. Accepting Warranty or Additional Liability. While redistributing\r\n      the Work or Derivative Works thereof, You may choose to offer,\r\n      and charge a fee for, acceptance of support, warranty, indemnity,\r\n      or other liability obligations and/or rights consistent with this\r\n      License. However, in accepting such obligations, You may act only\r\n      on Your own behalf and on Your sole responsibility, not on behalf\r\n      of any other Contributor, and only if You agree to indemnify,\r\n      defend, and hold each Contributor harmless for any liability\r\n      incurred by, or claims asserted against, such Contributor by reason\r\n      of your accepting any such warranty or additional liability.\r\n\r\n   END OF TERMS AND CONDITIONS\r\n\r\n   APPENDIX: How to apply the Apache License to your work.\r\n\r\n      To apply the Apache License to your work, attach the following\r\n      boilerplate notice, with the fields enclosed by brackets \"{}\"\r\n      replaced with your own identifying information. (Don't include\r\n      the brackets!)  The text should be enclosed in the appropriate\r\n      comment syntax for the file format. We also recommend that a\r\n      file or class name and description of purpose be included on the\r\n      same \"printed page\" as the copyright notice for easier\r\n      identification within third-party archives.\r\n\r\n   Copyright {yyyy} {name of copyright owner}\r\n\r\n   Licensed under the Apache License, Version 2.0 (the \"License\");\r\n   you may not use this file except in compliance with the License.\r\n   You may obtain a copy of the License at\r\n\r\n       http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n   Unless required by applicable law or agreed to in writing, software\r\n   distributed under the License is distributed on an \"AS IS\" BASIS,\r\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n   See the License for the specific language governing permissions and\r\n   limitations under the License."
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 7.1298828125,
          "content": "# glium\n\n[![Build Status](https://github.com/glium/glium/actions/workflows/ci.yml/badge.svg)](https://github.com/glium/glium/actions/workflows/ci.yml)\n[![Coverage Status](https://coveralls.io/repos/tomaka/glium/badge.svg?branch=master&service=github)](https://coveralls.io/github/tomaka/glium?branch=master)\n\n[![crates.io page](https://img.shields.io/crates/v/glium.svg)](https://crates.io/crates/glium)\n\n## Note to current and future Glium users:\n\nGlium is [no longer actively developed by its original\nauthor](https://users.rust-lang.org/t/glium-post-mortem/7063). That said, PRs\nare still welcome and maintenance is continued by the surrounding community.\n\n##\n\nElegant and safe OpenGL wrapper.\n\nGlium is an intermediate layer between OpenGL and your application. You still need to manually handle\nthe graphics pipeline, but without having to use OpenGL's old and error-prone API.\n\n```toml\n[dependencies]\nglium = \"*\"\n```\n\nIts objectives:\n - Be safe to use. Many aspects of OpenGL that can trigger a crash if misused are automatically handled by glium.\n - Provide an API that enforces good practices such as RAII or stateless function calls.\n - Be compatible with all OpenGL versions that support shaders, providing a unified API when things diverge.\n - Avoid all OpenGL errors beforehand.\n - Produce optimized OpenGL function calls, and allow the user to easily use modern OpenGL techniques.\n\n## [Link to the documentation](https://docs.rs/glium)\n\nIf you have some knowledge of OpenGL, the documentation and the examples should get you easily started.\n\n## [Link to a work-in-progress tutorial](https://glium.github.io/glium/book/)\n\n## Why should I use Glium instead of raw OpenGL calls?\n\nEasy to use:\n\n - Functions are higher level in glium than in OpenGL. Glium's API tries to be as Rusty as\n   possible, and shouldn't be much different than using any other Rust library. Glium should\n   allow you to do everything that OpenGL allows you to do, just through high-level\n   functions. If something is missing, please open an issue.\n\n - You can directly pass vectors, matrices and images to glium instead of manipulating low-level\n   data.\n\n - Thanks to glutin, glium is very easy to setup compared to raw OpenGL.\n\n - Glium provides easier ways to do common tasks. For example the `VertexBuffer` struct\n   contains information about the vertex bindings, because you usually don't use several different\n   bindings with the same vertex buffer. This reduces the overall complexity of OpenGL.\n\n - Glium handles framebuffer objects, samplers, and vertex array objects for you. You no longer\n   need to create them explicitly as they are automatically created when needed and destroyed\n   when their corresponding object is destroyed.\n\n - Glium is stateless. There are no `set_something()` functions in the entire library, and\n   everything is done by parameter passing. The same set of function calls will always produce\n   the same results, which greatly reduces the number of potential problems.\n\nSafety:\n\n - Glium detects what would normally be errors or undefined behaviors in OpenGL, and panics,\n   without calling `glGetError` which would be too slow. Examples include requesting a depth test\n   when you don't have a depth buffer available, not binding any value to an attribute or uniform,\n   or binding multiple textures with different dimensions to the same framebuffer.\n\n - If the OpenGL context triggers an error, then you have found a bug in glium. Please open\n   an issue. Just like Rust does everything it can to avoid crashes, glium does everything\n   it can to avoid OpenGL errors.\n\n - The OpenGL context is automatically handled by glium. You don't need to worry about thread\n   safety, as it is forbidden to change the thread in which OpenGL objects operate. Glium also\n   allows you to safely replace the current OpenGL context with another one that shares the same\n   lists.\n\n - Glium enforces RAII. Creating a `Texture2d` struct creates a texture, and destroying the struct\n   destroys the texture. It also uses Rust's borrow system to ensure that objects are still\n   alive and in the right state when you use them. Glium provides the same guarantees with OpenGL\n   objects that you have with regular objects in Rust.\n\n - High-level functions are much easier to use and thus less error-prone. For example there is\n   no risk of making a mistake while specifying the names and offsets of your vertex attributes,\n   since Glium automatically generates this data for you.\n\n - Robustness is automatically handled. If the OpenGL context is lost (because of a crash in the\n   driver for example) then swapping buffers will return an error.\n\nCompatibility:\n\n - In its default mode, Glium should be compatible with both OpenGL and OpenGL ES. If something\n   doesn't work on OpenGL ES, please open an issue.\n\n - During initialization, Glium detects whether the context provides all the required\n   functionality, and returns an `Err` if the device is too old. Glium tries to be as tolerant\n   as possible, and should work with the majority of the OpenGL2-era devices.\n\n - Glium will attempt to use the latest, optimized versions of OpenGL functions. This includes\n   buffer and texture immutable storage and direct state access. It will automatically fall back\n   to older functions if they are not available.\n\n - Glium comes with a set of tests that you can run with `cargo test`. If your project/game\n   doesn't work on specific hardware, you can try running Glium's tests on it to see what is wrong.\n\nPerformances:\n\n - State changes are optimized. The OpenGL state is only modified if the state actually differs.\n   For example if you call `draw` with the `IfLess` depth test twice in a row, then\n   `glDepthFunc(GL_LESS)` and `glEnable(GL_DEPTH_TEST)` will only be called the first time. If\n   you then call `draw` with `IfGreater`, then only `glDepthFunc(GL_GREATER)` will be called.\n\n - Just like Rust is theoretically slower than C because of additional safety checks, glium is\n   theoretically slower than well-prepared and optimized raw OpenGL calls. However in practice\n   the difference is very low.\n\n - Fully optimized OpenGL code uses advanced techniques such as persistent mapping or bindless\n   textures. These are hard to do and error-prone, but trivially easy to do with glium. You can\n   easily get a huge performance boost just by doing the right function calls.\n\n - Since glium automatically avoids all OpenGL errors, you can safely use the `GL_KHR_no_error`\n   extension when it is available. Using this extension should provide a good performance boost\n   (but it is also very recent and not available anywhere for the moment).\n\nLimitations:\n\n - Robustness isn't supported everywhere yet, so you can still get crashes if you do incorrect\n   things in your shaders.\n\n - Glium gives you access to all the tools but doesn't prevent you from doing horribly slow\n   things. Some knowledge of modern techniques is required if you want to reach maximum\n   performances.\n\n - Glium pushes the Rust compiler to its limits. Stack overflows (inside the compiler),\n   internal compiler errors, one-hour compile time, etc. happen more often than in smaller\n   libraries.\n\n - Macros are yet work-in-progress; see\n  [`glium-derive`](https://github.com/glium/glium_derive) for details.\n"
        },
        {
          "name": "benches",
          "type": "tree",
          "content": null
        },
        {
          "name": "book",
          "type": "tree",
          "content": null
        },
        {
          "name": "build",
          "type": "tree",
          "content": null
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}