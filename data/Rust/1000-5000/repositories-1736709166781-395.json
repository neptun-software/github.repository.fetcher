{
  "metadata": {
    "timestamp": 1736709166781,
    "page": 395,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjQwMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "rust-bitcoin/rust-bitcoin",
      "stars": 2208,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".actrc",
          "type": "blob",
          "size": 0.025390625,
          "content": "-e contrib/act/event.json\n"
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.0146484375,
          "content": "*.rs\tdiff=rust\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.2822265625,
          "content": "# .gitignore for rust-bitcoin repository workspace.\n\n# Lock files\nCargo.lock\ninternals/Cargo.lock\nbitcoin/Cargo.lock\nhashes/Cargo.lock\n\n# Build artifacts\ntarget\ninternals/target\nbitcoin/target\nhashes/target\n\n# Test artifacts\nbitcoin/dep_test\n\n# Fuzz artifacts\nhfuzz_target\nhfuzz_workspace\n"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 0.3935546875,
          "content": "\nA changelog is kept per crate, see:\n\n- [`bitcoin` CHANGELOG](bitcoin/CHANGELOG.md)\n- [`addresses` CHANGELOG](addresses/CHANGELOG.md)\n- [`base58` CHANGELOG](base58/CHANGELOG.md)\n- [`hashes` CHANGELOG](hashes/CHANGELOG.md)\n- [`internals` CHANGELOG](internals/CHANGELOG.md)\n- [`io` CHANGELOG](io/CHANGELOG.md)\n- [`primitives` CHANGELOG](primitives/CHANGELOG.md)\n- [`units` CHANGELOG](units/CHANGELOG.md)\n\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 18.787109375,
          "content": "# Contributing to rust-bitcoin\n\n:+1::tada: First off, thanks for taking the time to contribute! :tada::+1:\n\nThe following is a set of guidelines for contributing to Rust Bitcoin\nimplementation and other Rust Bitcoin-related projects, which are hosted in the\n[Rust Bitcoin Community](https://github.com/rust-bitcoin) on GitHub. These are\nmostly guidelines, not rules. Use your best judgment, and feel free to propose\nchanges to this document in a pull request.\n\n#### Table Of Contents\n\n- [General](#general)\n- [Communication channels](#communication-channels)\n- [Asking questions](#asking-questions)\n- [Contribution workflow](#contribution-workflow)\n  * [Preparing PRs](#preparing-prs)\n  * [Peer review](#peer-review)\n  * [Repository maintainers](#repository-maintainers)\n- [Coding conventions](#coding-conventions)\n  * [Naming conventions](#naming-conventions)\n  * [Upgrading dependencies](#upgrading-dependencies)\n  * [Unsafe code](#unsafe-code)\n  * [Policy](#policy)\n- [Security](#security)\n- [Testing](#testing)\n- [Going further](#going-further)\n\n\n## General\n\nThe Rust Bitcoin project operates an open contributor model where anyone is\nwelcome to contribute towards development in the form of peer review,\ndocumentation, testing and patches.\n\nAnyone is invited to contribute without regard to technical experience,\n\"expertise\", OSS experience, age, or other concern. However, the development of\nstandards & reference implementations demands a high-level of rigor, adversarial\nthinking, thorough testing and risk-minimization. Any bug may cost users real\nmoney. That being said, we deeply welcome people contributing for the first time\nto an open source project or pick up Rust while contributing. Don't be shy,\nyou'll learn.\n\n\n## Communication channels\n\nCommunication about Rust Bitcoin happens primarily in\n[#bitcoin-rust](https://web.libera.chat/?channel=#bitcoin-rust) IRC chat on\n[Libera](https://libera.chat/) with the logs available at\n<https://gnusha.org/bitcoin-rust/> (starting from Jun 2021 and now on) and\n<https://gnusha.org/rust-bitcoin/> (historical archive before Jun 2021).\n\nDiscussion about code base improvements happens in GitHub issues and on pull\nrequests.\n\nMajor projects are tracked [here](https://github.com/orgs/rust-bitcoin/projects).\nMajor milestones are tracked [here](https://github.com/rust-bitcoin/rust-bitcoin/milestones).\n\n\n## Asking questions\n\n> **Note:** Please don't file an issue to ask a question. You'll get faster\n> results by using the resources below.\n\nWe have a dedicated developer channel on IRC, #bitcoin-rust@libera.chat where\nyou may get helpful advice if you have questions.\n\n\n## Contribution workflow\n\nThe codebase is maintained using the \"contributor workflow\" where everyone\nwithout exception contributes patch proposals using \"pull requests\". This\nfacilitates social contribution, easy testing and peer review.\n\nTo contribute a patch, the workflow is a as follows:\n\n1. Fork Repository\n2. Create topic branch\n3. Commit patches\n\nPlease keep commits atomic and diffs easy to read. For this reason\ndo not mix any formatting fixes or code moves with actual code changes.\nFurther, each commit, individually, should compile and pass tests, in order to\nensure git bisect and other automated tools function properly.\n\nPlease cover every new feature with unit tests.\n\nWhen refactoring, structure your PR to make it easy to review and don't hesitate\nto split it into multiple small, focused PRs.\n\nCommits should cover both the issue fixed and the solution's rationale.\nPlease keep these [guidelines](https://chris.beams.io/posts/git-commit/) in mind.\n\n\n## Preparing PRs\n\nThe main library development happens in the `master` branch. This branch must\nalways compile without errors (using GitHub CI). All external contributions are\nmade within PRs into this branch.\n\nPrerequisites that a PR must satisfy for merging into the `master` branch:\n* each commit within a PR must compile and pass unit tests with no errors, with\n  every feature combination (including compiling the fuzztests) on some\n  reasonably recent compiler (this is partially automated with CI, so the rule\n  is that we will not accept commits which do not pass GitHub CI);\n* the tip of any PR branch must also compile and pass tests with no errors on\n  MSRV (check [README.md] on current MSRV requirements) and pass fuzz tests on\n  nightly rust;\n* contain all necessary tests for the introduced functional (either as a part of\n  commits, or, more preferably, as separate commits, so that it's easy to\n  reorder them during review and check that the new tests fail without the new\n  code);\n* contain all inline docs for newly introduced API and pass doc tests including\n  running `just lint` without any errors or warnings;\n* be based on the recent `master` tip from the original repository at\n  <https://github.com/rust-bitcoin/rust-bitcoin>.\n\nNB: reviewers may run more complex test/CI scripts, thus, satisfying all the\nrequirements above is just a preliminary, but not necessary sufficient step for\ngetting the PR accepted as a valid candidate PR for the `master` branch.\n\nHigh quality commits help us review and merge you contributions. We attempt to\nadhere to the ideas presented in the following two blog posts:\n\n- [How to Write a Git Commit Message](https://cbea.ms/git-commit/)\n- [Write Better Commits, Build Better Projects](https://github.blog/2022-06-30-write-better-commits-build-better-projects/)\n\n### Deprecation and Versioning\n\nWhenever any part of your code wants to mention the version number the code will\nbe released in, primarily in deprecation notices, you should use the string\n`TBD` (verbatim), so that the release preparation script can detect the\nchange and the correct version number can be filled in in preparation of the\nrelease.\n\n```rust\n    #[deprecated(since = \"TBD\", note = \"use `alternative_method()` instead\")]\n```\n\n### Peer review\n\nAnyone may participate in peer review which is expressed by comments in the pull\nrequest. Typically, reviewers will review the code for obvious errors, as well as\ntest out the patch set and opine on the technical merits of the patch. Please,\nfirst review PR on the conceptual level before focusing on code style or\ngrammar fixes.\n\n### API changes\n\nThe API of the following crates is almost stable. Changing it is supposed to be non-trivial. To\nassist in this effort ll PRs that change the public API of any these crates must include a patch to\nthe `api/` text files. This should be a separate final patch to the PR that is the diff created by\nrunning `just check-api`.\n\n- `hashes`\n- `io`\n- `primitives`\n- `units`\n\nCheck the [API text files](api/README.md) for more information\non how to install the dependencies and create the text files.\n\n### Repository maintainers\n\nPull request merge requirements:\n- all CI test should pass,\n- at least one \"accepts\"/ACKs from the repository maintainers\n- no reasonable \"rejects\"/NACKs from anybody who reviewed the code.\n\nCurrent list of the project maintainers:\n\n- [Andrew Poelstra](https://github.com/apoelstra)\n- [Steven Roose](https://github.com/stevenroose)\n- [Matt Corallo](https://github.com/TheBlueMatt)\n- [Elichai Turkel](https://github.com/elichai)\n- [Sanket Kanjalkar](https://github.com/sanket1729)\n- [Martin Habov≈°tiak](https://github.com/Kixunil)\n- [Riccardo Casatta](https://github.com/RCasatta)\n- [Tobin Harding](https://github.com/tcharding)\n\n#### Backporting\n\nWe maintain release branches (e.g. `0.32.x` for the `v0.32` releases).\n\nIn order to backport changes to these branches the process we use is as follows:\n\n- PR change into `master`.\n- Mark the PR with the appropriate labels if backporting is needed (e.g. `port-0.32.x`).\n- Once PR merges create another PR that targets the appropriate branch.\n- If, and only if, the backport PR is identical to the original PR (i.e. created using\n  `git cherry-pick`) then the PR may be one-ACK merged.\n\nAny other changes to the release branches should follow the normal 2-ACK merge policy.\n\n## Coding conventions\n\nLibrary reflects Bitcoin Core approach whenever possible.\n\n### Naming conventions\n\nNaming of data structures/enums and their fields/variants must follow names used\nin Bitcoin Core, with the following exceptions:\n- The case should follow Rust standards (i.e. PascalCase for types and snake_case for fields and variants).\n- Omit `C`-prefixes.\n- If function `foo` needs a private helper function, use `foo_internal`.\n\n### Upgrading dependencies\n\nIf your change requires a dependency to be upgraded you must do the following:\n\n1. Modify `Cargo.toml`\n2. Copy `Cargo-minimal.lock` to `Cargo.lock`\n3. Trigger cargo to update the required entries in the lock file - use `--precise` using the minimum version number that works\n4. Test your change\n5. Copy `Cargo.lock` to `Cargo-minimal.lock`\n6. Update `Cargo-recent.lock` if it is also behind\n7. Commit both lock files together with `Cargo.toml` and your code changes\n\n### Unsafe code\n\nUse of `unsafe` code is prohibited unless there is a unanimous decision among\nlibrary maintainers on the exclusion from this rule. In such cases there is a\nrequirement to test unsafe code with sanitizers including Miri.\n\n### API changes\n\nAll PRs that change the public API of `rust-bitcoin` will be checked on CI for\nsemversioning compliance. This means that if the PR changes the public API in a\nway that is not backwards compatible, the PR will be flagged as a breaking change.\nPlease check the [`semver-checks` workflow](.github/workflows/semver-checks.yml).\nUnder the hood we use [`cargo-semver-checks`](https://github.com/obi1kenobi/cargo-semver-checks).\n\n\n### Policy\n\nWe have various `rust-bitcoin` specific coding styles and conventions that are\ngrouped here loosely under the term 'policy'. These are things we try to adhere\nto but that you should not need to worry too much about if you are a new\ncontributor. Think of this as a place to collect group knowledge that exists in\nthe various PRs over the last few years.\n\n#### Import statements\n\nWe use the following style for import statements, see\n(https://github.com/rust-bitcoin/rust-bitcoin/discussions/2088) for the discussion that led to this.\n\n```rust\n// Modules first, as they are part of the project's structure.\npub mod aa_this;\nmod bb_private;\npub mod cc_that;\n\n// Private imports, rustfmt will sort and merge them correctly.\nuse crate::aa_this::{This, That};\nuse crate::bb_that;\n\n// Public re-exports.\n#[rustfmt::skip] // Keeps public re-exports separate, because of this we have to sort manually.\npub use {\n    crate::aa_aa_this,\n    crate::bb_bb::That,\n}\n\n// Avoid wildcard imports, except for 3 rules:\n\n// Rule 1 - test modules.\n#[cfg(test)]\nmod tests {\n    use super::*; // OK\n}\n\n// Rule 2 - enum variants.\nuse LockTime::*; // OK\n\n// Rule 3 - opcodes.\nuse opcodes::all::*; // OK\n\n// Finally here is an example where we don't allow wildcard imports:\nuse crate::prelude::*; // *NOT* OK\nuse crate::prelude::{DisplayHex, String, Vec} // OK\n```\n\n#### Return `Self`\n\nUse `Self` as the return type instead of naming the type. When constructing the return value use\n`Self` or the type name, whichever you prefer.\n\n```rust\n/// A counter that is always smaller than 100.\npub struct Counter(u32);\n\nimpl Counter {\n    /// Constructs a new `Counter`.\n    pub fn new() -> Self { Self(0) }\n\n    /// Returns a counter if it is possible to create one from x.\n    pub fn maybe(x: u32) -> Option<Self> {\n        match x {\n            x if x >= 100 => None,\n            c => Some(Counter(c)),\n        }\n    }\n}\n\nimpl TryFrom<u32> for Counter {\n    type Error = TooBigError;\n\n    fn try_from(x: u32) -> Result<Self, Self::Error> {\n        if x >= 100 {\n            return Err(TooBigError);\n        }\n        Ok(Counter(x))\n    }\n}\n```\n\nWhen constructing the return value for error enums use `Self`.\n\n```rust\nimpl From<foo::Error> for LongDescriptiveError {\n    fn from(e: foo::Error) -> Self { Self::Foo(e) }\n}\n```\n\n\n#### Errors\n\nReturn as much context as possible with errors e.g., if an error was encountered parsing a string\ninclude the string in the returned error type. If a function consumes costly-to-compute input\n(allocations are also considered costly) it should return the input back in the error type.\n\nMore specifically an error should\n\n- be `non_exhaustive` unless we _really_ never want to change it.\n- have private fields unless we are very confident they won't change.\n- derive `Debug, Clone, PartialEq, Eq` (and `Copy` iff not `non_exhaustive`).\n- implement Display using `write_err!()` macro if a variant contains an inner error source.\n- have `Error` suffix on error types (structs and enums).\n- not have `Error` suffix on enum variants.\n- call `internals::impl_from_infallible!`.\n- implement `std::error::Error` if they are public (feature gated on \"std\").\n- have messages in lower case, except for proper nouns and variable names.\n\n```rust\n/// Documentation for the `Error` type.\n#[derive(Debug, Clone, PartialEq, Eq)]\n#[non_exhaustive]  // Add liberally; if the error type may ever have new variants added.\npub enum Error {\n    /// Documentation for variant A.\n    A,\n    /// Documentation for variant B.\n    B,\n}\n\ninternals::impl_from_infallible!(Error);\n\n```\n\nAll errors that live in an `error` module (eg, `foo/error.rs`) and appear in a public function in\n`foo` module should be available from `foo` i.e., should be re-exported from `foo/mod.rs`.\n\n##### `expect` messages\n\nWith respect to `expect` messages, they should follow the\n[Rust standard library guidelines](https://doc.rust-lang.org/std/option/enum.Option.html#recommended-message-style).\nMore specifically, `expect` messages should be used to to describe the reason\nyou expect the operation to succeed.\nFor example, this `expect` message clearly states why the operation should succeed:\n\n```rust\n/// Serializes the public key to bytes.\npub fn to_bytes(self) -> Vec<u8> {\n    let mut buf = Vec::new();\n    self.write_into(&mut buf).expect(\"vecs don't error\");\n    buf\n}\n```\n\nAlso note that `expect` messages, as with all error messages, should be lower\ncase, except for proper nouns and variable names.\n\n<details>\n<summary>The details on why we chose this style</summary>\n\nAccording to the [Rust standard library](https://doc.rust-lang.org/std/error/index.html#common-message-styles),\nthere are two common styles for how to write `expect` messages:\n\n- using the message to present information to users encountering a panic\n  (\"expect as error message\"); and\n- using the message to present information to developers debugging the panic\n  (\"expect as precondition\").\n\nWe opted to use the \"expect as precondition\" since it clearly states why the\noperation should succeed.\nThis may be better for communicating with developers, since they are the target\naudience for the error message and `rust-bitcoin`.\n\nIf you want to know more about the decision error messages and expect messages,\nplease check:\n\n- https://github.com/rust-bitcoin/rust-bitcoin/issues/2913\n- https://github.com/rust-bitcoin/rust-bitcoin/issues/3053\n- https://github.com/rust-bitcoin/rust-bitcoin/pull/3019\n</details>\n\n#### Rustdocs\n\nBe liberal with references to BIPs or other documentation; the aim is that devs can learn about\nBitcoin by hacking on this codebase as opposed to having to learn about Bitcoin first and then start\nhacking on this codebase. Consider the following format, not all sections will be required for all types.\n\n\n```rust\n/// The Bitcoin foobar.\n///\n/// Contains all the data used when passing a foobar around the Bitcoin network.\n///\n/// <details>\n/// <summary>FooBar Original Design</summary>\n///\n/// The foobar was introduced in Bitcoin x.y.z to increase the amount of foo in bar.\n///\n/// </details>\n///\n/// ### Relevant BIPs\n///\n/// * [BIP X - FooBar in Bitcoin](https://github.com/bitcoin/bips/blob/master/bip-0000.mediawiki)\npub struct FooBar {\n    /// The version in use.\n    pub version: Version\n}\n```\n\nDo use rustdoc subheadings. Do put an empty newline below each heading e.g.,\n\n```rust\nimpl FooBar {\n    /// Constructs a `FooBar` from a [`Baz`].\n    ///\n    /// # Errors\n    ///\n    /// Returns an error if `Baz` is not ...\n    ///\n    /// # Panics\n    ///\n    /// If the `Baz`, converted to a `usize`, is out of bounds.\n    pub fn from_baz(baz: Baz) -> Result<Self, Error> {\n        ...\n    }\n}\n```\n\nAdd Panics section if any input to the function can trigger a panic.\n\nGenerally we prefer to have non-panicking APIs but it is impractical in some cases. If you're not\nsure, feel free to ask. If we determine panicking is more practical it must be documented. Internal\npanics that could theoretically occur because of bugs in our code must not be documented.\n\nExample code within the rustdocs should compile and lint with `just lint` without any errors or\nwarnings.\n\n#### Derives\n\nWe try to use standard set of derives if it makes sense:\n\n```\n#[derive(Debug, Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash)]\nenum Foo {\n    Bar,\n    Baz,\n}\n```\n\nFor types that do should not form a total or partial order, or that technically do but it does not\nmake sense to compare them, we use the `Ordered` trait from the\n[`ordered`](https://crates.io/crates/ordered) crate. See `absolute::LockTime` for an example.\n\nFor error types you likely want to use `#[derive(Debug, Clone, PartialEq, Eq)]`.\n\nSee [Errors](#errors) section.\n\n\n#### Attributes\n\n- `#[track_caller]`: Used on functions that panic on invalid arguments\n  (see https://rustc-dev-guide.rust-lang.org/backend/implicit-caller-location.html)\n\n- `#[cfg(rust_v_1_60)]`: Used to guard code that should only be built in if the toolchain is\n  compatible. These configuration conditionals are set at build time in `bitcoin/build.rs`. New\n  version attributes may be added as needed.\n\n\n#### Licensing\n\nWe use SPDX license tags, all files should start with\n\n```\n// SPDX-License-Identifier: CC0-1.0\n```\n\n## Security\n\nSecurity is the primary focus for this library; disclosure of security\nvulnerabilities helps prevent user loss of funds. If you believe a vulnerability\nmay affect other implementations, please disclose this information according to\nthe [security guidelines](./SECURITY.md), work on which is currently in progress.\nBefore it is completed, feel free to send disclosure to Andrew Poelstra,\napoelstra@wpsoftware.net, encrypted with his public key from\n<https://www.wpsoftware.net/andrew/andrew.gpg>.\n\n\n## Testing\n\nRelated to the security aspect, rust bitcoin developers take testing very\nseriously. Due to the modular nature of the project, writing new test cases is\neasy and good test coverage of the codebase is an important goal. Refactoring\nthe project to enable fine-grained unit testing is also an ongoing effort.\n\nVarious methods of testing are in use (e.g. fuzzing, mutation), please see\nthe [readme](./README.md) for more information.\n\n\n## Going further\n\nYou may be interested in the guide by Jon Atack on\n[How to review Bitcoin Core PRs](https://github.com/jonatack/bitcoin-development/blob/master/how-to-review-bitcoin-core-prs.md)\nand [How to make Bitcoin Core PRs](https://github.com/jonatack/bitcoin-development/blob/master/how-to-make-bitcoin-core-prs.md).\nWhile there are differences between the projects in terms of context and\nmaturity, many of the suggestions offered apply to this project.\n\nOverall, have fun :)\n"
        },
        {
          "name": "Cargo-minimal.lock",
          "type": "blob",
          "size": 10.990234375,
          "content": "# This file is automatically @generated by Cargo.\n# It is not intended for manual editing.\nversion = 3\n\n[[package]]\nname = \"anyhow\"\nversion = \"1.0.57\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"08f9b8508dccb7687a1d6c4ce66b2b0ecef467c94667de27d8d7fe1f8d2a9cdc\"\n\n[[package]]\nname = \"arbitrary\"\nversion = \"1.4.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"dde20b3d026af13f561bdd0f15edf01fc734f0dafcedbaf42bba506a9517f223\"\n\n[[package]]\nname = \"arrayvec\"\nversion = \"0.7.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"96d30a06541fbafbc7f82ed10c06164cfbd2c401138f6addd8404629c4b16711\"\n\n[[package]]\nname = \"base58ck\"\nversion = \"0.2.0\"\ndependencies = [\n \"bitcoin-internals\",\n \"bitcoin_hashes 0.16.0\",\n \"hex-conservative 0.3.0\",\n]\n\n[[package]]\nname = \"base64\"\nversion = \"0.22.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"9475866fec1451be56a3c2400fd081ff546538961565ccb5b7142cbd22bc7a51\"\n\n[[package]]\nname = \"bech32\"\nversion = \"0.11.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d965446196e3b7decd44aa7ee49e31d630118f90ef12f97900f262eb915c951d\"\n\n[[package]]\nname = \"bincode\"\nversion = \"1.3.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f30d3a39baa26f9651f17b375061f3233dde33424a8b72b0dbe93a68a0bc896d\"\ndependencies = [\n \"byteorder\",\n \"serde\",\n]\n\n[[package]]\nname = \"bitcoin\"\nversion = \"0.33.0-alpha.0\"\ndependencies = [\n \"arbitrary\",\n \"base58ck\",\n \"base64\",\n \"bech32\",\n \"bincode\",\n \"bitcoin-internals\",\n \"bitcoin-io\",\n \"bitcoin-primitives\",\n \"bitcoin-units\",\n \"bitcoin_hashes 0.16.0\",\n \"bitcoinconsensus\",\n \"hex-conservative 0.3.0\",\n \"hex_lit\",\n \"mutagen\",\n \"ordered\",\n \"secp256k1\",\n \"serde\",\n \"serde_json\",\n \"serde_test\",\n]\n\n[[package]]\nname = \"bitcoin-addresses\"\nversion = \"0.0.0\"\n\n[[package]]\nname = \"bitcoin-fuzz\"\nversion = \"0.0.1\"\ndependencies = [\n \"bitcoin\",\n \"honggfuzz\",\n \"serde\",\n \"serde_json\",\n]\n\n[[package]]\nname = \"bitcoin-internals\"\nversion = \"0.4.0\"\ndependencies = [\n \"bincode\",\n \"hex-conservative 0.3.0\",\n \"serde\",\n \"serde_json\",\n]\n\n[[package]]\nname = \"bitcoin-io\"\nversion = \"0.2.0\"\ndependencies = [\n \"bitcoin-internals\",\n]\n\n[[package]]\nname = \"bitcoin-primitives\"\nversion = \"0.101.0\"\ndependencies = [\n \"arbitrary\",\n \"bincode\",\n \"bitcoin-internals\",\n \"bitcoin-io\",\n \"bitcoin-units\",\n \"bitcoin_hashes 0.16.0\",\n \"hex-conservative 0.3.0\",\n \"mutagen\",\n \"ordered\",\n \"serde\",\n \"serde_json\",\n]\n\n[[package]]\nname = \"bitcoin-units\"\nversion = \"0.2.0\"\ndependencies = [\n \"arbitrary\",\n \"bincode\",\n \"bitcoin-internals\",\n \"serde\",\n \"serde_json\",\n \"serde_test\",\n]\n\n[[package]]\nname = \"bitcoin_hashes\"\nversion = \"0.14.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"bb18c03d0db0247e147a21a6faafd5a7eb851c743db062de72018b6b7e8e4d16\"\ndependencies = [\n \"hex-conservative 0.2.0\",\n]\n\n[[package]]\nname = \"bitcoin_hashes\"\nversion = \"0.16.0\"\ndependencies = [\n \"bitcoin-io\",\n \"hex-conservative 0.3.0\",\n \"serde\",\n \"serde_json\",\n \"serde_test\",\n]\n\n[[package]]\nname = \"bitcoinconsensus\"\nversion = \"0.106.0+26.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e12cba9cce5043cdda968e07b9df6d05ec6b0b38aa27a9a40bb575cf3e521ae9\"\ndependencies = [\n \"cc\",\n]\n\n[[package]]\nname = \"byteorder\"\nversion = \"1.3.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"60f0b0d4c0a382d2734228fd12b5a6b5dac185c60e938026fd31b265b94f9bd2\"\n\n[[package]]\nname = \"cc\"\nversion = \"1.0.28\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"bb4a8b715cb4597106ea87c7c84b2f1d452c7492033765df7f32651e66fcf749\"\n\n[[package]]\nname = \"cfg-if\"\nversion = \"0.1.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d4c819a1287eb618df47cc647173c5c4c66ba19d888a6e50d605672aed3140de\"\n\n[[package]]\nname = \"chacha20-poly1305\"\nversion = \"0.1.1\"\ndependencies = [\n \"hex-conservative 0.3.0\",\n]\n\n[[package]]\nname = \"getrandom\"\nversion = \"0.2.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ee8025cf36f917e6a52cce185b7c7177689b838b7ec138364e50cc2277a56cf4\"\ndependencies = [\n \"cfg-if\",\n \"libc\",\n \"wasi\",\n]\n\n[[package]]\nname = \"hex-conservative\"\nversion = \"0.2.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e1aa273bf451e37ed35ced41c71a5e2a4e29064afb104158f2514bcd71c2c986\"\ndependencies = [\n \"arrayvec\",\n]\n\n[[package]]\nname = \"hex-conservative\"\nversion = \"0.3.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"4afe881d0527571892c4034822e59bb10c6c991cce6abe8199b6f5cf10766f55\"\ndependencies = [\n \"arrayvec\",\n]\n\n[[package]]\nname = \"hex_lit\"\nversion = \"0.1.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3011d1213f159867b13cfd6ac92d2cd5f1345762c63be3554e84092d85a50bbd\"\n\n[[package]]\nname = \"honggfuzz\"\nversion = \"0.5.56\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"7c76b6234c13c9ea73946d1379d33186151148e0da231506b964b44f3d023505\"\ndependencies = [\n \"lazy_static\",\n \"memmap2\",\n \"rustc_version\",\n]\n\n[[package]]\nname = \"itoa\"\nversion = \"0.4.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1306f3464951f30e30d12373d31c79fbd52d236e5e896fd92f96ec7babbbe60b\"\n\n[[package]]\nname = \"json\"\nversion = \"0.12.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"078e285eafdfb6c4b434e0d31e8cfcb5115b651496faca5749b88fafd4f23bfd\"\n\n[[package]]\nname = \"lazy_static\"\nversion = \"1.4.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e2abad23fbc42b3700f2f279844dc832adb2b2eb069b2df918f455c4e18cc646\"\n\n[[package]]\nname = \"libc\"\nversion = \"0.2.155\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"97b3888a4aecf77e811145cadf6eef5901f4782c53886191b2f693f24761847c\"\n\n[[package]]\nname = \"memmap2\"\nversion = \"0.9.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"fe751422e4a8caa417e13c3ea66452215d7d63e19e604f4980461212f3ae1322\"\ndependencies = [\n \"libc\",\n]\n\n[[package]]\nname = \"mutagen\"\nversion = \"0.2.0\"\nsource = \"git+https://github.com/llogiq/mutagen#a6377c4c3f360afeb7a287c1c17e4b69456d5f53\"\ndependencies = [\n \"mutagen-core\",\n \"mutagen-transform\",\n]\n\n[[package]]\nname = \"mutagen-core\"\nversion = \"0.2.0\"\nsource = \"git+https://github.com/llogiq/mutagen#a6377c4c3f360afeb7a287c1c17e4b69456d5f53\"\ndependencies = [\n \"anyhow\",\n \"json\",\n \"lazy_static\",\n \"proc-macro2\",\n \"quote\",\n \"serde\",\n \"serde_json\",\n \"syn\",\n]\n\n[[package]]\nname = \"mutagen-transform\"\nversion = \"0.2.0\"\nsource = \"git+https://github.com/llogiq/mutagen#a6377c4c3f360afeb7a287c1c17e4b69456d5f53\"\ndependencies = [\n \"mutagen-core\",\n \"proc-macro2\",\n]\n\n[[package]]\nname = \"ordered\"\nversion = \"0.4.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"79c12388aac4f817eae0359011d67d4072ed84cfc63b0d9a7958ef476fb74bec\"\n\n[[package]]\nname = \"ppv-lite86\"\nversion = \"0.2.8\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"237a5ed80e274dbc66f86bd59c1e25edc039660be53194b5fe0a482e0f2612ea\"\n\n[[package]]\nname = \"proc-macro2\"\nversion = \"1.0.63\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"7b368fba921b0dce7e60f5e04ec15e565b3303972b42bcfde1d0713b881959eb\"\ndependencies = [\n \"unicode-ident\",\n]\n\n[[package]]\nname = \"quote\"\nversion = \"1.0.9\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"c3d0b9745dc2debf507c8422de05d7226cc1f0644216dfdfead988f9b1ab32a7\"\ndependencies = [\n \"proc-macro2\",\n]\n\n[[package]]\nname = \"rand\"\nversion = \"0.8.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a76330fb486679b4ace3670f117bbc9e16204005c4bde9c4bd372f45bed34f12\"\ndependencies = [\n \"libc\",\n \"rand_chacha\",\n \"rand_core\",\n \"rand_hc\",\n]\n\n[[package]]\nname = \"rand_chacha\"\nversion = \"0.3.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e12735cf05c9e10bf21534da50a147b924d555dc7a547c42e6bb2d5b6017ae0d\"\ndependencies = [\n \"ppv-lite86\",\n \"rand_core\",\n]\n\n[[package]]\nname = \"rand_core\"\nversion = \"0.6.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"34cf66eb183df1c5876e2dcf6b13d57340741e8dc255b48e40a26de954d06ae7\"\ndependencies = [\n \"getrandom\",\n]\n\n[[package]]\nname = \"rand_hc\"\nversion = \"0.3.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3190ef7066a446f2e7f42e239d161e905420ccab01eb967c9eb27d21b2322a73\"\ndependencies = [\n \"rand_core\",\n]\n\n[[package]]\nname = \"rustc_version\"\nversion = \"0.4.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"bfa0f585226d2e68097d4f95d113b15b83a82e819ab25717ec0590d9584ef366\"\ndependencies = [\n \"semver\",\n]\n\n[[package]]\nname = \"ryu\"\nversion = \"1.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"c92464b447c0ee8c4fb3824ecc8383b81717b9f1e74ba2e72540aef7b9f82997\"\n\n[[package]]\nname = \"secp256k1\"\nversion = \"0.29.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"0e0cc0f1cf93f4969faf3ea1c7d8a9faed25918d96affa959720823dfe86d4f3\"\ndependencies = [\n \"bitcoin_hashes 0.14.0\",\n \"rand\",\n \"secp256k1-sys\",\n \"serde\",\n]\n\n[[package]]\nname = \"secp256k1-sys\"\nversion = \"0.10.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1433bd67156263443f14d603720b082dd3121779323fce20cba2aa07b874bc1b\"\ndependencies = [\n \"cc\",\n]\n\n[[package]]\nname = \"semver\"\nversion = \"1.0.17\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"bebd363326d05ec3e2f532ab7660680f3b02130d780c299bca73469d521bc0ed\"\n\n[[package]]\nname = \"serde\"\nversion = \"1.0.156\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"314b5b092c0ade17c00142951e50ced110ec27cea304b1037c6969246c2469a4\"\ndependencies = [\n \"serde_derive\",\n]\n\n[[package]]\nname = \"serde_derive\"\nversion = \"1.0.156\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d7e29c4601e36bcec74a223228dce795f4cd3616341a4af93520ca1a837c087d\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn\",\n]\n\n[[package]]\nname = \"serde_json\"\nversion = \"1.0.68\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"0f690853975602e1bfe1ccbf50504d67174e3bcf340f23b5ea9992e0587a52d8\"\ndependencies = [\n \"itoa\",\n \"ryu\",\n \"serde\",\n]\n\n[[package]]\nname = \"serde_test\"\nversion = \"1.0.19\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"482765e11e55174e2d74a611674d09ed96712c00e0777e305a0c416dfef5fa40\"\ndependencies = [\n \"serde\",\n]\n\n[[package]]\nname = \"syn\"\nversion = \"1.0.109\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"72b64191b275b66ffe2469e8af2c1cfe3bafa67b529ead792a6d0160888b4237\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"unicode-ident\",\n]\n\n[[package]]\nname = \"unicode-ident\"\nversion = \"1.0.8\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e5464a87b239f13a63a501f2701565754bae92d243d4bb7eb12f6d57d2269bf4\"\n\n[[package]]\nname = \"wasi\"\nversion = \"0.9.0+wasi-snapshot-preview1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"cccddf32554fecc6acb585f82a32a72e28b48f8c4c1883ddfeeeaa96f7d8e519\"\n"
        },
        {
          "name": "Cargo-recent.lock",
          "type": "blob",
          "size": 11.94921875,
          "content": "# This file is automatically @generated by Cargo.\n# It is not intended for manual editing.\nversion = 3\n\n[[package]]\nname = \"anyhow\"\nversion = \"1.0.89\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"86fdf8605db99b54d3cd748a44c6d04df638eb5dafb219b135d0149bd0db01f6\"\n\n[[package]]\nname = \"arbitrary\"\nversion = \"1.4.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"dde20b3d026af13f561bdd0f15edf01fc734f0dafcedbaf42bba506a9517f223\"\n\n[[package]]\nname = \"arrayvec\"\nversion = \"0.7.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"7c02d123df017efcdfbd739ef81735b36c5ba83ec3c59c80a9d7ecc718f92e50\"\n\n[[package]]\nname = \"base58ck\"\nversion = \"0.2.0\"\ndependencies = [\n \"bitcoin-internals\",\n \"bitcoin_hashes 0.16.0\",\n \"hex-conservative 0.3.0\",\n]\n\n[[package]]\nname = \"base64\"\nversion = \"0.22.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"72b3254f16251a8381aa12e40e3c4d2f0199f8c6508fbecb9d91f575e0fbb8c6\"\n\n[[package]]\nname = \"bech32\"\nversion = \"0.11.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d965446196e3b7decd44aa7ee49e31d630118f90ef12f97900f262eb915c951d\"\n\n[[package]]\nname = \"bincode\"\nversion = \"1.3.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b1f45e9417d87227c7a56d22e471c6206462cba514c7590c09aff4cf6d1ddcad\"\ndependencies = [\n \"serde\",\n]\n\n[[package]]\nname = \"bitcoin\"\nversion = \"0.33.0-alpha.0\"\ndependencies = [\n \"arbitrary\",\n \"base58ck\",\n \"base64\",\n \"bech32\",\n \"bincode\",\n \"bitcoin-internals\",\n \"bitcoin-io\",\n \"bitcoin-primitives\",\n \"bitcoin-units\",\n \"bitcoin_hashes 0.16.0\",\n \"bitcoinconsensus\",\n \"hex-conservative 0.3.0\",\n \"hex_lit\",\n \"mutagen\",\n \"ordered\",\n \"secp256k1\",\n \"serde\",\n \"serde_json\",\n \"serde_test\",\n]\n\n[[package]]\nname = \"bitcoin-addresses\"\nversion = \"0.0.0\"\n\n[[package]]\nname = \"bitcoin-fuzz\"\nversion = \"0.0.1\"\ndependencies = [\n \"bitcoin\",\n \"honggfuzz\",\n \"serde\",\n \"serde_json\",\n]\n\n[[package]]\nname = \"bitcoin-internals\"\nversion = \"0.4.0\"\ndependencies = [\n \"bincode\",\n \"hex-conservative 0.3.0\",\n \"serde\",\n \"serde_json\",\n]\n\n[[package]]\nname = \"bitcoin-io\"\nversion = \"0.2.0\"\ndependencies = [\n \"bitcoin-internals\",\n]\n\n[[package]]\nname = \"bitcoin-primitives\"\nversion = \"0.101.0\"\ndependencies = [\n \"arbitrary\",\n \"bincode\",\n \"bitcoin-internals\",\n \"bitcoin-io\",\n \"bitcoin-units\",\n \"bitcoin_hashes 0.16.0\",\n \"hex-conservative 0.3.0\",\n \"mutagen\",\n \"ordered\",\n \"serde\",\n \"serde_json\",\n]\n\n[[package]]\nname = \"bitcoin-units\"\nversion = \"0.2.0\"\ndependencies = [\n \"arbitrary\",\n \"bincode\",\n \"bitcoin-internals\",\n \"serde\",\n \"serde_json\",\n \"serde_test\",\n]\n\n[[package]]\nname = \"bitcoin_hashes\"\nversion = \"0.14.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"bb18c03d0db0247e147a21a6faafd5a7eb851c743db062de72018b6b7e8e4d16\"\ndependencies = [\n \"hex-conservative 0.2.1\",\n]\n\n[[package]]\nname = \"bitcoin_hashes\"\nversion = \"0.16.0\"\ndependencies = [\n \"bitcoin-io\",\n \"hex-conservative 0.3.0\",\n \"serde\",\n \"serde_json\",\n \"serde_test\",\n]\n\n[[package]]\nname = \"bitcoinconsensus\"\nversion = \"0.106.0+26.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e12cba9cce5043cdda968e07b9df6d05ec6b0b38aa27a9a40bb575cf3e521ae9\"\ndependencies = [\n \"cc\",\n]\n\n[[package]]\nname = \"byteorder\"\nversion = \"1.5.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1fd0f2584146f6f2ef48085050886acf353beff7305ebd1ae69500e27c67f64b\"\n\n[[package]]\nname = \"cc\"\nversion = \"1.1.22\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"9540e661f81799159abee814118cc139a2004b3a3aa3ea37724a1b66530b90e0\"\ndependencies = [\n \"shlex\",\n]\n\n[[package]]\nname = \"cfg-if\"\nversion = \"1.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"baf1de4339761588bc0619e3cbc0120ee582ebb74b53b4efbf79117bd2da40fd\"\n\n[[package]]\nname = \"chacha20-poly1305\"\nversion = \"0.1.1\"\ndependencies = [\n \"hex-conservative 0.3.0\",\n]\n\n[[package]]\nname = \"getrandom\"\nversion = \"0.2.15\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"c4567c8db10ae91089c99af84c68c38da3ec2f087c3f82960bcdbf3656b6f4d7\"\ndependencies = [\n \"cfg-if\",\n \"libc\",\n \"wasi\",\n]\n\n[[package]]\nname = \"hex-conservative\"\nversion = \"0.2.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"5313b072ce3c597065a808dbf612c4c8e8590bdbf8b579508bf7a762c5eae6cd\"\ndependencies = [\n \"arrayvec\",\n]\n\n[[package]]\nname = \"hex-conservative\"\nversion = \"0.3.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"4afe881d0527571892c4034822e59bb10c6c991cce6abe8199b6f5cf10766f55\"\ndependencies = [\n \"arrayvec\",\n]\n\n[[package]]\nname = \"hex_lit\"\nversion = \"0.1.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3011d1213f159867b13cfd6ac92d2cd5f1345762c63be3554e84092d85a50bbd\"\n\n[[package]]\nname = \"honggfuzz\"\nversion = \"0.5.56\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"7c76b6234c13c9ea73946d1379d33186151148e0da231506b964b44f3d023505\"\ndependencies = [\n \"lazy_static\",\n \"memmap2\",\n \"rustc_version\",\n]\n\n[[package]]\nname = \"itoa\"\nversion = \"1.0.11\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"49f1f14873335454500d59611f1cf4a4b0f786f9ac11f4312a78e4cf2566695b\"\n\n[[package]]\nname = \"json\"\nversion = \"0.12.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"078e285eafdfb6c4b434e0d31e8cfcb5115b651496faca5749b88fafd4f23bfd\"\n\n[[package]]\nname = \"lazy_static\"\nversion = \"1.5.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"bbd2bcb4c963f2ddae06a2efc7e9f3591312473c50c6685e1f298068316e66fe\"\n\n[[package]]\nname = \"libc\"\nversion = \"0.2.159\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"561d97a539a36e26a9a5fad1ea11a3039a67714694aaa379433e580854bc3dc5\"\n\n[[package]]\nname = \"memchr\"\nversion = \"2.7.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"78ca9ab1a0babb1e7d5695e3530886289c18cf2f87ec19a575a0abdce112e3a3\"\n\n[[package]]\nname = \"memmap2\"\nversion = \"0.9.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"fd3f7eed9d3848f8b98834af67102b720745c4ec028fcd0aa0239277e7de374f\"\ndependencies = [\n \"libc\",\n]\n\n[[package]]\nname = \"mutagen\"\nversion = \"0.2.0\"\nsource = \"git+https://github.com/llogiq/mutagen#a6377c4c3f360afeb7a287c1c17e4b69456d5f53\"\ndependencies = [\n \"mutagen-core\",\n \"mutagen-transform\",\n]\n\n[[package]]\nname = \"mutagen-core\"\nversion = \"0.2.0\"\nsource = \"git+https://github.com/llogiq/mutagen#a6377c4c3f360afeb7a287c1c17e4b69456d5f53\"\ndependencies = [\n \"anyhow\",\n \"json\",\n \"lazy_static\",\n \"proc-macro2\",\n \"quote\",\n \"serde\",\n \"serde_json\",\n \"syn 1.0.109\",\n]\n\n[[package]]\nname = \"mutagen-transform\"\nversion = \"0.2.0\"\nsource = \"git+https://github.com/llogiq/mutagen#a6377c4c3f360afeb7a287c1c17e4b69456d5f53\"\ndependencies = [\n \"mutagen-core\",\n \"proc-macro2\",\n]\n\n[[package]]\nname = \"ordered\"\nversion = \"0.4.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"79c12388aac4f817eae0359011d67d4072ed84cfc63b0d9a7958ef476fb74bec\"\n\n[[package]]\nname = \"ppv-lite86\"\nversion = \"0.2.20\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"77957b295656769bb8ad2b6a6b09d897d94f05c41b069aede1fcdaa675eaea04\"\ndependencies = [\n \"zerocopy\",\n]\n\n[[package]]\nname = \"proc-macro2\"\nversion = \"1.0.86\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"5e719e8df665df0d1c8fbfd238015744736151d4445ec0836b8e628aae103b77\"\ndependencies = [\n \"unicode-ident\",\n]\n\n[[package]]\nname = \"quote\"\nversion = \"1.0.37\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b5b9d34b8991d19d98081b46eacdd8eb58c6f2b201139f7c5f643cc155a633af\"\ndependencies = [\n \"proc-macro2\",\n]\n\n[[package]]\nname = \"rand\"\nversion = \"0.8.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"34af8d1a0e25924bc5b7c43c079c942339d8f0a8b57c39049bef581b46327404\"\ndependencies = [\n \"libc\",\n \"rand_chacha\",\n \"rand_core\",\n]\n\n[[package]]\nname = \"rand_chacha\"\nversion = \"0.3.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e6c10a63a0fa32252be49d21e7709d4d4baf8d231c2dbce1eaa8141b9b127d88\"\ndependencies = [\n \"ppv-lite86\",\n \"rand_core\",\n]\n\n[[package]]\nname = \"rand_core\"\nversion = \"0.6.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ec0be4795e2f6a28069bec0b5ff3e2ac9bafc99e6a9a7dc3547996c5c816922c\"\ndependencies = [\n \"getrandom\",\n]\n\n[[package]]\nname = \"rustc_version\"\nversion = \"0.4.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"cfcb3a22ef46e85b45de6ee7e79d063319ebb6594faafcf1c225ea92ab6e9b92\"\ndependencies = [\n \"semver\",\n]\n\n[[package]]\nname = \"ryu\"\nversion = \"1.0.18\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f3cb5ba0dc43242ce17de99c180e96db90b235b8a9fdc9543c96d2209116bd9f\"\n\n[[package]]\nname = \"secp256k1\"\nversion = \"0.29.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"9465315bc9d4566e1724f0fffcbcc446268cb522e60f9a27bcded6b19c108113\"\ndependencies = [\n \"bitcoin_hashes 0.14.0\",\n \"rand\",\n \"secp256k1-sys\",\n \"serde\",\n]\n\n[[package]]\nname = \"secp256k1-sys\"\nversion = \"0.10.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d4387882333d3aa8cb20530a17c69a3752e97837832f34f6dccc760e715001d9\"\ndependencies = [\n \"cc\",\n]\n\n[[package]]\nname = \"semver\"\nversion = \"1.0.23\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"61697e0a1c7e512e84a621326239844a24d8207b4669b41bc18b32ea5cbf988b\"\n\n[[package]]\nname = \"serde\"\nversion = \"1.0.210\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"c8e3592472072e6e22e0a54d5904d9febf8508f65fb8552499a1abc7d1078c3a\"\ndependencies = [\n \"serde_derive\",\n]\n\n[[package]]\nname = \"serde_derive\"\nversion = \"1.0.210\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"243902eda00fad750862fc144cea25caca5e20d615af0a81bee94ca738f1df1f\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.79\",\n]\n\n[[package]]\nname = \"serde_json\"\nversion = \"1.0.128\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"6ff5456707a1de34e7e37f2a6fd3d3f808c318259cbd01ab6377795054b483d8\"\ndependencies = [\n \"itoa\",\n \"memchr\",\n \"ryu\",\n \"serde\",\n]\n\n[[package]]\nname = \"serde_test\"\nversion = \"1.0.177\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"7f901ee573cab6b3060453d2d5f0bae4e6d628c23c0a962ff9b5f1d7c8d4f1ed\"\ndependencies = [\n \"serde\",\n]\n\n[[package]]\nname = \"shlex\"\nversion = \"1.3.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"0fda2ff0d084019ba4d7c6f371c95d8fd75ce3524c3cb8fb653a3023f6323e64\"\n\n[[package]]\nname = \"syn\"\nversion = \"1.0.109\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"72b64191b275b66ffe2469e8af2c1cfe3bafa67b529ead792a6d0160888b4237\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"unicode-ident\",\n]\n\n[[package]]\nname = \"syn\"\nversion = \"2.0.79\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"89132cd0bf050864e1d38dc3bbc07a0eb8e7530af26344d3d2bbbef83499f590\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"unicode-ident\",\n]\n\n[[package]]\nname = \"unicode-ident\"\nversion = \"1.0.13\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e91b56cd4cadaeb79bbf1a5645f6b4f8dc5bde8834ad5894a8db35fda9efa1fe\"\n\n[[package]]\nname = \"wasi\"\nversion = \"0.11.0+wasi-snapshot-preview1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"9c8d87e72b64a3b4db28d11ce29237c246188f4f51057d65a7eab63b7987e423\"\n\n[[package]]\nname = \"zerocopy\"\nversion = \"0.7.35\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1b9b4fd18abc82b8136838da5d50bae7bdea537c574d8dc1a34ed098d6c166f0\"\ndependencies = [\n \"byteorder\",\n \"zerocopy-derive\",\n]\n\n[[package]]\nname = \"zerocopy-derive\"\nversion = \"0.7.35\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"fa4f8080344d4671fb4e831a13ad1e68092748387dfc4f55e356242fae12ce3e\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.79\",\n]\n"
        },
        {
          "name": "Cargo.toml",
          "type": "blob",
          "size": 0.5380859375,
          "content": "[workspace]\nmembers = [\"addresses\", \"base58\", \"bitcoin\", \"chacha20_poly1305\", \"fuzz\", \"hashes\", \"internals\", \"io\", \"primitives\", \"units\"]\nresolver = \"2\"\n\n[patch.crates-io.bitcoin-addresses]\npath = \"addresses\"\n\n[patch.crates-io.base58ck]\npath = \"base58\"\n\n[patch.crates-io.bitcoin]\npath = \"bitcoin\"\n\n[patch.crates-io.bitcoin_hashes]\npath = \"hashes\"\n\n[patch.crates-io.bitcoin-internals]\npath = \"internals\"\n\n[patch.crates-io.bitcoin-io]\npath = \"io\"\n\n[patch.crates-io.bitcoin-primitives]\npath = \"primitives\"\n\n[patch.crates-io.bitcoin-units]\npath = \"units\"\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 6.8837890625,
          "content": "Creative Commons Legal Code\n\nCC0 1.0 Universal\n\n    CREATIVE COMMONS CORPORATION IS NOT A LAW FIRM AND DOES NOT PROVIDE\n    LEGAL SERVICES. DISTRIBUTION OF THIS DOCUMENT DOES NOT CREATE AN\n    ATTORNEY-CLIENT RELATIONSHIP. CREATIVE COMMONS PROVIDES THIS\n    INFORMATION ON AN \"AS-IS\" BASIS. CREATIVE COMMONS MAKES NO WARRANTIES\n    REGARDING THE USE OF THIS DOCUMENT OR THE INFORMATION OR WORKS\n    PROVIDED HEREUNDER, AND DISCLAIMS LIABILITY FOR DAMAGES RESULTING FROM\n    THE USE OF THIS DOCUMENT OR THE INFORMATION OR WORKS PROVIDED\n    HEREUNDER.\n\nStatement of Purpose\n\nThe laws of most jurisdictions throughout the world automatically confer\nexclusive Copyright and Related Rights (defined below) upon the creator\nand subsequent owner(s) (each and all, an \"owner\") of an original work of\nauthorship and/or a database (each, a \"Work\").\n\nCertain owners wish to permanently relinquish those rights to a Work for\nthe purpose of contributing to a commons of creative, cultural and\nscientific works (\"Commons\") that the public can reliably and without fear\nof later claims of infringement build upon, modify, incorporate in other\nworks, reuse and redistribute as freely as possible in any form whatsoever\nand for any purposes, including without limitation commercial purposes.\nThese owners may contribute to the Commons to promote the ideal of a free\nculture and the further production of creative, cultural and scientific\nworks, or to gain reputation or greater distribution for their Work in\npart through the use and efforts of others.\n\nFor these and/or other purposes and motivations, and without any\nexpectation of additional consideration or compensation, the person\nassociating CC0 with a Work (the \"Affirmer\"), to the extent that he or she\nis an owner of Copyright and Related Rights in the Work, voluntarily\nelects to apply CC0 to the Work and publicly distribute the Work under its\nterms, with knowledge of his or her Copyright and Related Rights in the\nWork and the meaning and intended legal effect of CC0 on those rights.\n\n1. Copyright and Related Rights. A Work made available under CC0 may be\nprotected by copyright and related or neighboring rights (\"Copyright and\nRelated Rights\"). Copyright and Related Rights include, but are not\nlimited to, the following:\n\n  i. the right to reproduce, adapt, distribute, perform, display,\n     communicate, and translate a Work;\n ii. moral rights retained by the original author(s) and/or performer(s);\niii. publicity and privacy rights pertaining to a person's image or\n     likeness depicted in a Work;\n iv. rights protecting against unfair competition in regards to a Work,\n     subject to the limitations in paragraph 4(a), below;\n  v. rights protecting the extraction, dissemination, use and reuse of data\n     in a Work;\n vi. database rights (such as those arising under Directive 96/9/EC of the\n     European Parliament and of the Council of 11 March 1996 on the legal\n     protection of databases, and under any national implementation\n     thereof, including any amended or successor version of such\n     directive); and\nvii. other similar, equivalent or corresponding rights throughout the\n     world based on applicable law or treaty, and any national\n     implementations thereof.\n\n2. Waiver. To the greatest extent permitted by, but not in contravention\nof, applicable law, Affirmer hereby overtly, fully, permanently,\nirrevocably and unconditionally waives, abandons, and surrenders all of\nAffirmer's Copyright and Related Rights and associated claims and causes\nof action, whether now known or unknown (including existing as well as\nfuture claims and causes of action), in the Work (i) in all territories\nworldwide, (ii) for the maximum duration provided by applicable law or\ntreaty (including future time extensions), (iii) in any current or future\nmedium and for any number of copies, and (iv) for any purpose whatsoever,\nincluding without limitation commercial, advertising or promotional\npurposes (the \"Waiver\"). Affirmer makes the Waiver for the benefit of each\nmember of the public at large and to the detriment of Affirmer's heirs and\nsuccessors, fully intending that such Waiver shall not be subject to\nrevocation, rescission, cancellation, termination, or any other legal or\nequitable action to disrupt the quiet enjoyment of the Work by the public\nas contemplated by Affirmer's express Statement of Purpose.\n\n3. Public License Fallback. Should any part of the Waiver for any reason\nbe judged legally invalid or ineffective under applicable law, then the\nWaiver shall be preserved to the maximum extent permitted taking into\naccount Affirmer's express Statement of Purpose. In addition, to the\nextent the Waiver is so judged Affirmer hereby grants to each affected\nperson a royalty-free, non transferable, non sublicensable, non exclusive,\nirrevocable and unconditional license to exercise Affirmer's Copyright and\nRelated Rights in the Work (i) in all territories worldwide, (ii) for the\nmaximum duration provided by applicable law or treaty (including future\ntime extensions), (iii) in any current or future medium and for any number\nof copies, and (iv) for any purpose whatsoever, including without\nlimitation commercial, advertising or promotional purposes (the\n\"License\"). The License shall be deemed effective as of the date CC0 was\napplied by Affirmer to the Work. Should any part of the License for any\nreason be judged legally invalid or ineffective under applicable law, such\npartial invalidity or ineffectiveness shall not invalidate the remainder\nof the License, and in such case Affirmer hereby affirms that he or she\nwill not (i) exercise any of his or her remaining Copyright and Related\nRights in the Work or (ii) assert any associated claims and causes of\naction with respect to the Work, in either case contrary to Affirmer's\nexpress Statement of Purpose.\n\n4. Limitations and Disclaimers.\n\n a. No trademark or patent rights held by Affirmer are waived, abandoned,\n    surrendered, licensed or otherwise affected by this document.\n b. Affirmer offers the Work as-is and makes no representations or\n    warranties of any kind concerning the Work, express, implied,\n    statutory or otherwise, including without limitation warranties of\n    title, merchantability, fitness for a particular purpose, non\n    infringement, or the absence of latent or other defects, accuracy, or\n    the present or absence of errors, whether or not discoverable, all to\n    the greatest extent permissible under applicable law.\n c. Affirmer disclaims responsibility for clearing rights of other persons\n    that may apply to the Work or any use thereof, including without\n    limitation any person's Copyright and Related Rights in the Work.\n    Further, Affirmer disclaims responsibility for obtaining any necessary\n    consents, permissions or other rights required for any use of the\n    Work.\n d. Affirmer understands and acknowledges that Creative Commons is not a\n    party to this document and has no duty or obligation with respect to\n    this CC0 or use of the Work.\n\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 10.001953125,
          "content": "<div align=\"center\">\n  <h1>Rust Bitcoin</h1>\n\n  <img alt=\"Rust Bitcoin logo by Hunter Trujillo, see license and source files under /logo\" src=\"./logo/rust-bitcoin.png\" width=\"300\" />\n\n  <p>Library with support for de/serialization, parsing and executing on data-structures\n    and network messages related to Bitcoin.\n  </p>\n\n  <p>\n    <a href=\"https://crates.io/crates/bitcoin\"><img alt=\"Crate Info\" src=\"https://img.shields.io/crates/v/bitcoin.svg\"/></a>\n    <a href=\"https://github.com/rust-bitcoin/rust-bitcoin/blob/master/LICENSE\"><img alt=\"CC0 1.0 Universal Licensed\" src=\"https://img.shields.io/badge/license-CC0--1.0-blue.svg\"/></a>\n    <a href=\"https://github.com/rust-bitcoin/rust-bitcoin/actions?query=workflow%3AContinuous%20integration\"><img alt=\"CI Status\" src=\"https://github.com/rust-bitcoin/rust-bitcoin/workflows/Continuous%20integration/badge.svg\"></a>\n    <a href=\"https://docs.rs/bitcoin\"><img alt=\"API Docs\" src=\"https://img.shields.io/badge/docs.rs-bitcoin-green\"/></a>\n    <a href=\"https://blog.rust-lang.org/2022/08/11/Rust-1.63.0.html\"><img alt=\"Rustc Version 1.63.0+\" src=\"https://img.shields.io/badge/rustc-1.63.0%2B-lightgrey.svg\"/></a>\n    <a href=\"https://gnusha.org/bitcoin-rust/\"><img alt=\"Chat on IRC\" src=\"https://img.shields.io/badge/irc-%23bitcoin--rust%20on%20libera.chat-blue\"></a>\n    <a href=\"https://github.com/model-checking/kani\"><img alt=\"kani\" src=\"https://github.com/rust-bitcoin/rust-bitcoin/workflows/Kani%20CI/badge.svg\"></a>\n  </p>\n</div>\n\n[Documentation](https://docs.rs/bitcoin/)\n\nSupports (or should support)\n\n* De/serialization of Bitcoin protocol network messages\n* De/serialization of blocks and transactions\n* Script de/serialization\n* Private keys and address creation, de/serialization and validation (including full BIP32 support)\n* PSBT v0 de/serialization and all but the Input Finalizer role. Use [rust-miniscript](https://docs.rs/miniscript/latest/miniscript/psbt/index.html) to finalize.\n\nFor JSONRPC interaction with Bitcoin Core, it is recommended to use\n[rust-bitcoincore-rpc](https://github.com/rust-bitcoin/rust-bitcoincore-rpc).\n\nIt is recommended to always use [cargo-crev](https://github.com/crev-dev/cargo-crev) to verify the\ntrustworthiness of each of your dependencies, including this one.\n\n## Known limitations\n\n### Consensus\n\nThis library **must not** be used for consensus code (i.e. fully validating blockchain data). It\ntechnically supports doing this, but doing so is very ill-advised because there are many deviations,\nknown and unknown, between this library and the Bitcoin Core reference implementation. In a\nconsensus based cryptocurrency such as Bitcoin it is critical that all parties are using the same\nrules to validate data, and this library is simply unable to implement the same rules as Core.\n\nGiven the complexity of both C++ and Rust, it is unlikely that this will ever be fixed, and there\nare no plans to do so. Of course, patches to fix specific consensus incompatibilities are welcome.\n\n### Support for 16-bit pointer sizes\n\n16-bit pointer sizes are not supported, and we can't promise they will be. If you care about them\nplease let us know, so we can know how large the interest is and possibly decide to support them.\n\n### Semver compliance\n\nWe try hard to maintain strict semver compliance with our releases. This codebase includes some\npublic functions marked unstable (e.g., `pub fn foo__unstable()`). These functions do not adhere to\nsemver rules; use them at your own discretion.\n\n\n## Documentation\n\nCurrently can be found on [docs.rs/bitcoin](https://docs.rs/bitcoin/). Patches to add usage examples\nand to expand on existing docs would be extremely appreciated.\n\n## Contributing\n\nContributions are generally welcome. If you intend to make larger changes please discuss them in an\nissue before PRing them to avoid duplicate work and architectural mismatches. If you have any\nquestions or ideas you want to discuss please join us in\n[#bitcoin-rust](https://web.libera.chat/?channel=#bitcoin-rust) on\n[libera.chat](https://libera.chat).\n\nFor more information please see [`CONTRIBUTING.md`](./CONTRIBUTING.md).\n\n## Minimum Supported Rust Version (MSRV)\n\nThis library should compile with any combination of features on **Rust 1.63.0**.\n\nUse `Cargo-minimal.lock` to build the MSRV by copying to `Cargo.lock` and building.\n\n## External dependencies\n\nWe integrate with a few external libraries, most notably `serde`. These\nare available via feature flags. To ensure compatibility and MSRV stability we\nprovide two lock files as a means of inspecting compatible versions:\n`Cargo-minimal.lock` containing minimal versions of dependencies and\n`Cargo-recent.lock` containing recent versions of dependencies tested in our CI.\n\nWe do not provide any guarantees about the content of these lock files outside\nof \"our CI didn't fail with these versions\". Specifically, we do not guarantee\nthat the committed hashes are free from malware. It is your responsibility to\nreview them.\n\n## Installing Rust\n\nRust can be installed using your package manager of choice or [rustup.rs](https://rustup.rs). The\nformer way is considered more secure since it typically doesn't involve trust in the CA system. But\nyou should be aware that the version of Rust shipped by your distribution might be out of date.\nGenerally this isn't a problem for `rust-bitcoin` since we support much older versions than the\ncurrent stable one (see MSRV section).\n\n## Building\n\nThe library can be built and tested using [`cargo`](https://github.com/rust-lang/cargo/):\n\n```\ngit clone git@github.com:rust-bitcoin/rust-bitcoin.git\ncd rust-bitcoin\ncargo build\n```\n\nYou can run tests with:\n\n```\ncargo test\n```\n\nPlease refer to the [`cargo` documentation](https://doc.rust-lang.org/stable/cargo/) for more\ndetailed instructions.\n\n### No-std support\n\nThe `std` cargo feature is enabled by default. To build this project without the Rust standard\nlibrary, use the `--no-default-features` flag or set `default-features = false` in your dependency\ndeclaration when adding it to your project.\n\nFor embedded device examples, see [`bitcoin/embedded`](https://github.com/rust-bitcoin/rust-bitcoin/tree/master/bitcoin/embedded)\nor [`hashes/embedded`](https://github.com/rust-bitcoin/rust-bitcoin/tree/master/hashes/embedded).\n\n### Just\n\nWe support [`just`](https://just.systems/man/en/) for running dev workflow commands. Run `just` from\nyour shell to see list available sub-commands.\n\n### Building the docs\n\nWe build docs with the nightly toolchain, you may wish to use the following shell alias to check\nyour documentation changes build correctly.\n\n```\nalias build-docs='RUSTDOCFLAGS=\"--cfg docsrs\" cargo +nightly rustdoc --features=\"$FEATURES\" -- -D rustdoc::broken-intra-doc-links'\n```\n\n## Testing\n\nUnit and integration tests are available for those interested, along with benchmarks. For project\ndevelopers, especially new contributors looking for something to work on, we do:\n\n- Fuzz testing with [`Hongfuzz`](https://github.com/rust-fuzz/honggfuzz-rs)\n- Mutation testing with [`Mutagen`](https://github.com/llogiq/mutagen)\n- Code verification with [`Kani`](https://github.com/model-checking/kani)\n\nThere are always more tests to write and more bugs to find, contributions to our testing efforts\nextremely welcomed. Please consider testing code a first class citizen, we definitely do take PRs\nimproving and cleaning up test code.\n\n### Unit/Integration tests\n\nRun as for any other Rust project `cargo test --all-features`.\n\n### Benchmarks\n\nWe use a custom Rust compiler configuration conditional to guard the bench mark code. To run the\nbench marks use: `RUSTFLAGS='--cfg=bench' cargo +nightly bench`.\n\n### Mutation tests\n\nWe have started doing mutation testing with [mutagen](https://github.com/llogiq/mutagen). To run\nthese tests first install the latest dev version with `cargo +nightly install --git https://github.com/llogiq/mutagen`\nthen run with `RUSTFLAGS='--cfg=mutate' cargo +nightly mutagen`.\n\n### Code verification\n\nWe have started using [kani](https://github.com/model-checking/kani), install with `cargo install --locked kani-verifier`\n (no need to run `cargo kani setup`). Run the tests with `cargo kani`.\n\n## Pull Requests\n\nEvery PR needs at least two reviews to get merged. During the review phase maintainers and\ncontributors are likely to leave comments and request changes. Please try to address them, otherwise\nyour PR might get closed without merging after a longer time of inactivity. If your PR isn't ready\nfor review yet please mark it by prefixing the title with `WIP: `.\n\n### CI Pipeline\n\nThe CI pipeline requires approval before being run on each MR.\n\nIn order to speed up the review process the CI pipeline can be run locally using\n[act](https://github.com/nektos/act). The `fuzz` and `Cross` jobs will be skipped when using `act`\ndue to caching being unsupported at this time. We do not *actively* support `act` but will merge PRs\nfixing `act` issues.\n\n### Githooks\n\nTo assist devs in catching errors _before_ running CI we provide some githooks. Copy the hooks in `githooks/`\nto your githooks folder or run `just githooks-install` to copy them all.\n\n## Policy on Altcoins/Altchains\n\nSince the altcoin landscape includes projects which [frequently appear and disappear, and are poorly\ndesigned anyway](https://download.wpsoftware.net/bitcoin/alts.pdf) we do not support any altcoins.\nSupporting Bitcoin properly is already difficult enough and we do not want to increase the\nmaintenance burden and decrease API stability by adding support for other coins.\n\nOur code is public domain so by all means fork it and go wild :)\n\n\n## Release Notes\n\nRelease notes are done per crate, see:\n\n- [`bitcoin` CHANGELOG](bitcoin/CHANGELOG.md)\n- [`addresses` CHANGELOG](addresses/CHANGELOG.md)\n- [`base58` CHANGELOG](base58/CHANGELOG.md)\n- [`hashes` CHANGELOG](hashes/CHANGELOG.md)\n- [`internals` CHANGELOG](internals/CHANGELOG.md)\n- [`io` CHANGELOG](io/CHANGELOG.md)\n- [`primitives` CHANGELOG](primitives/CHANGELOG.md)\n- [`units` CHANGELOG](units/CHANGELOG.md)\n\n\n## Licensing\n\nThe code in this project is licensed under the [Creative Commons CC0 1.0 Universal license](LICENSE).\nWe use the [SPDX license list](https://spdx.org/licenses/) and [SPDX IDs](https://spdx.dev/ids/).\n"
        },
        {
          "name": "SECURITY.md",
          "type": "blob",
          "size": 33.5302734375,
          "content": "# Security Policy\n\nThis security policy applies to the \"core\" crates in the rust-bitcoin ecosystem, which are\n`bitcoin`, `secp256k1`, `bitcoin_hashes` and `bitcoin-internals`. These crates deal with\ncryptography and cryptographic algorithms, and as such, are likely locations for security\nvulnerabilities to crop up.\n\nAs a general rule, an issue is a security vulnerability if it could lead to:\n\n* Loss of funds\n* Loss of privacy\n* Censorship (including e.g. by attaching an incorrectly low fee to a transaction)\n* Any \"ordinary\" security problem, such as remote code execution or invalid memory access\n\nIn general, use your best judgement in determining whether an issue is a security issue. If not,\ngo ahead and post it to the public issue tracker.\n\n**If you believe you are aware of a security issue**, please contact Andrew Poelstra at\n`rust-bitcoin-security@wpsoftware.net`. You may GPG-encrypt this email to his public key, which\n[can be downloaded from his website here](https://wpsoftware.net/andrew/andrew.gpg) or which is\nlisted in full below.\n\n# Andrew Poelstra's GPG Key\n\n-----BEGIN PGP PUBLIC KEY BLOCK-----\n\nmQENBFASGPEBCACwQgoZpLKmYtTFXQ+YAXIn8LtoLqom/eyJP6UbKQJoWPs9P79o\nCQpYy3Y6xx8JYKK556htGbi0OXIfqmDakBMG+yxs5fj6z2bTfLMJz6ej4AORC/aV\nJrlopIGE8/mhiQ+C1wX/3S3ueSFUmDOju4pucjzQTb3pL8ONob3kwWJAAXMP0SWy\naNQY/ZZQ8k2Q6joI0gd80LbM3tWUdX8ryLArfbE58CITiEgKPA1ghNGHCB78elrh\noMcmhoes+wTHN7Q7wSkoJdPFzAgIXIff/UpsDhm8EUjVAdgi0fo04vxxjdTF86M1\nKaoAYbxtSR5Rb+U101xd9Xsca+Gofm2KsAGLABEBAAG0NUFuZHJldyBQb2Vsc3Ry\nYSAoYW5keXRvc2hpKSA8YW5keXRvc2hpQGJpdGNvaW4ubmluamE+iQFWBBMBCABA\nAhsDBwsJCAcDAgEGFQgCCQoLBBYCAwECHgECF4AWIQRpmmPvwXrTqaNM/8B60Kkc\nQL0AkQUCYQMqwAUJGlcTTQAKCRB60KkcQL0AkQZ2B/9j9UhklerAYJBehQqKJixb\nJL6DPdEufL4+PnR51bXV3YRn2OH6Orhq/XXadjdbAcSz0nlGXyFBoPfzZfzZAeqy\njLbKsHCjPNST/K8whZMvUVgUk2kze8DOY2R6miNmQwEf1stMh5ZrTcsj4F1GHeS+\nx022NPvnT+V0A4t3I+/BqaKnQ92eu+l6RWQjde40Ti6COwozaaNjYuxUYiYUyHnJ\n3oC4UlVp0AnV/iUo4qVlhfDlrAEgQq+5wPKtvmYmgW8SmiCWDAdBn4r0VeFAPcB2\nogzM+UT6DWcf0z0upT1QtvcOBU9/DjwCLv1+HcYwRwMkYwFd3dG+XkgQ2uj5H4ZW\niQEcBBMBCAAGBQJV+wjiAAoJEE90TaH18VOBuSQIANeu+vh+7SCzhR1lRtiPlO9c\noDsQ/VXf1V0nLSEOIFphPy5exOeeb/1ReJLzLFEllVblmLm42wnWjrQVPVnRfBkQ\nxj8vt7SGlYH9QnvEDF/ewli1BKOZcaBlCDrYCa/MX3kwPl4H9K+JnwujgSQInYgG\nploXiimYqFlzxiGFCqfB02q2QvGDXxXxDkqeGIj/Ari9JYAPwtubUPnoWGPz/Mnb\nXBzGaesCFPo21us75cBHOdDQVFdbQy0ppBMK4PEdeN0JYksRex3hLbMSnHBdu0He\nNfgTPqqnD1TufBebz8pvNqP6EkvHud614bzTpvY2AYDjnQZIEjqr2bwJQJgJW7eJ\nASAEEAEIAAoFAlX7ED4DBQF4AAoJEHfoBoKoPbQOEQsH/jtK6ipNhgS9e0x2xwia\n/+refQMsbLdA/MEQzb6GRr67rXXu8btMWsXorL7/P82WB3OE2nZD0EpRGc5Gcvjj\nnMPSGvKMM0yhdELZm3uwAteR3bM0lCRApOcWMwtPjiJds3kZjCIDH0OEzr/fpRHR\n4jw9yWJi5mLdHrpC3ATssV1bumfOyQHUrZweZAiI9VkU3wO33epHD6m/uryttlqQ\n9nCsPnskEtle8NSbLTzNjNd16roXyQuZbHwxFBC5sDZHUi7LzJbfDwCBjmRLVRa9\nQHvOtCcb8sVXhqg0EdHORlc5wj+6TBjFJ57ISU0YUo/07AiUWyKwFrKHWaY0NyRF\nr9qJAhwEEAEIAAYFAlX9oZYACgkQibu4Zj4uZc6OZg/9F+iMKDjW1sSIS/mrU7M3\nUWerLdGRd0JVTuGluUpvyi4UPQwXbtPLi1r+yW1X+YuzvSEOZEQQgqpElFoixvzw\ndcdsbfIn40rn3vGW2dOOEMm3lemK3Y2eQSn+4sErW6gzu8uf2EgLHWrbrhOJbS9i\nlM22xyksmr3NnlY9Jemauhf7xX2S1xg6KsLCqGOqEn6jhRmLM+OYdYuSZ75t1MAk\ndheo08GbL1Jdu1RXw3DwS4soY/ujgbAFoGkVzNv5cEgZ1HnBMIVT7bFwbAWCP64L\nB8UToCoEWCB1eNKxDI44NHMbwIBu0JdhCM7iW0GwPOVaFjTlAXDIsgrqqWhr+GaI\nvgPnwi1xv45HpB/a+zh9neFqL7uZDocU3KXEUwVCkaP0t3h8/vN4J+QgfCVwWDRP\ngQtj9n2oDkM+DqbOSA73/O0O68oBAU2Sd1yJkRutJv5PjKUf6gcKeedtMrwWo7Vo\nQrPfEmgWvCoYXs38yLJu7xeKr0h5pAjUx5RhUngeHdkOwxPPOoC2Q8BON+xT0ZoI\nl+OO3imgIz0Bz7U4UUPADgCFw+GFc5tqPMj1OVDn9ysQYP7PfUUAwmHxJ6gvjUI9\nttHQH3ZK11RTLCCN/YQCwlSjUFbzeR1MvaSelrTnSypG/P3C76eDUT3J8FT7UKZw\nc9gsvZ633NTfRRIKh7FInMS0K0FuZHJldyBQb2Vsc3RyYSA8YXBvZWxzdHJhQGJs\nb2Nrc3RyZWFtLmNvbT6JAVYEEwEIAEACGwMHCwkIBwMCAQYVCAIJCgsEFgIDAQIe\nAQIXgBYhBGmaY+/BetOpo0z/wHrQqRxAvQCRBQJhAyq+BQkaVxNNAAoJEHrQqRxA\nvQCRYzEIAJNMMqFKAHCWi0npDNjaRypWT+zvfbXfnYEctdladHbrs0lGEHzMACeC\nJyBX9JOZbkp9AFNmLL7UvFlzLC1MOQ/tp3V8fip0S10lBUkWG1vtsgeM3N9ERFAz\n3brFtM+h3l9wohfVWwpY9sLzCWJ43QlBN22pjLcpVJGyv136M4dcfkXWA/csQsuq\nXjBt7P4QwmacISnL1KUIJMgWBl9CM1nxiANMQx8EyCINylEu/A9qNy5OApkRy33v\n+ww3kJ9PR4hzUDkd/s+R0PevlzYaw+rgdmKET4lh9J8EarSYu7RUG2NimKhzqweH\naLo0OYgwfNfpKiFKNNaZ07NN2MAo3ReJAhwEEAEIAAYFAlX9oiYACgkQibu4Zj4u\nZc4M2Q/7BvWr+ugC/ZJONikubDkn+nJ/TVxl1CBciMWsyJRI/RKLQQcEvY00xIdu\nCF2iPvaqlIifDo6suMTrAO0L6wIWlovICWYak9n2RrsN6w693ccj39MzAd3EwaC0\nVa0YlcNFz9pIyqQtRzyzEEXQeBti88RJvwlMOa+3hganU2NOFerFkpIJHBNYBKQR\nlnbqWo6fc9fWKCmQI3Chtkl9UtEslBziaEPILPsphfdW82iSgCEsKTN2zoliXZtl\n/P10J+2yS5dO7AjMHyVktS7+idR3Qdde3l0W/5uw9Af+DbBTQpsvwZPRhakWa98m\nnEiAdSWRwmtBSDxHQDqSdhtMq3NrwmD9qBpQphFfaGM+267wmkM2zEcM+Xc9EKEO\n6CnR+RBYEnmvSqZBiRPB8cN9UfhwGRXzXh+KoDyZCK3i245LBmA2du9SvLPlD5zs\n3WlYsYX4XsCDT/DPRGMkQmA1P582Ygw4s+GCJt59Ti1ELzGXiQbaN0C5hgkxk5Cy\nIXs9mv2YO9r9scw4zO9lgeTC4Y19C1h+XOTqvUHOfsjVjWr7KuSjtYhKk2PAkJCg\n1BO7vFqxTWF34X3h+CjPIYIyMVTQk71x7anLFQdqq1qekGCCJqPQ3XZKNH8nCo5M\nKxmHbWzXs+5GEuk9DAUIE8EMVY9dzdGD25gi9Oc3b8NqKgJOrhKJARwEEwEIAAYF\nAlX7CTAACgkQT3RNofXxU4FaWAgAiPzsB/nInalQQ2p3FrReO/AUELbjomoJoBIV\nQDcv5w7C5RtWvzgy1uJ+NLWlVO5zJKyRcDCllhaBWVpZjqRH6w+zjbTc6BXAMUe4\nda5T7Q2TJvun6oIDmobnySx1MBgvXrlAcxJV+kDWaIgUcdODhdg3ScI14BRoBsX7\nTccuTC3dJ/4DXO6cwE7476Nzt99m37AwV5/z9CvpKiHHzulpDSnvarPSXi/w4fun\n7YtzND85qfv1i/U+J4ueYRmPQVeuiAjHc3y+09SCWymwFz08o5qcMoZLdoPlFHCl\noTtxJqrY0PLWFikJlmukIRzmqbV3mt2vpTHGYCO92ty8qCzy0IkBIAQQAQgACgUC\nVfsQSwMFAXgACgkQd+gGgqg9tA5x1wf/RlDqaZIRlEIj46ZDPgQ4lGB6l3ycu1jl\nW8og2vkoSIuncZhzEasOhleqvngaF2zf5UD6FzTFci4pgNP/oCiuLE9x4yBKnawW\nghJTXsIZ/Jd2ZZkVzsjaI+qQ1XFJv+oL+0GVgJlqfZkunszIcx0uIuqKQVjVzK9b\nt4B48u/8Mc11xllDe0EuOoe5c5t++8NtFh3CumU52YfwJYCptaBfUY52yWj0syml\nHME8TDYClgMeJQia/6XB+t6XRWLrhY6ZsLHdk7rJHNCNZKUEW8GTv+MhaWh3DVXu\nK4DT3ApDtHKkRRFBrAnYrhCikRX5Uwz8hpODc2lPcT/az06MCVvaPLQeQW5kcmV3\nIFBvZWxzdHJhIDxhc3AxMUBzZnUuY2E+iQFVBBMBCAA/AhsDBgsJCAcDAgYVCAIJ\nCgsEFgIDAQIeAQIXgBYhBGmaY+/BetOpo0z/wHrQqRxAvQCRBQJhAyrABQkaVxNN\nAAoJEHrQqRxAvQCRjgQIAJad9AeZK4LcrUwlhFaWMDJ5UHVGkQQhwqN6X74vmRe9\nu4038wiWbhYiii352A0s2Pc3i1dqvclx4BZP4CPRJ22p+MnTY/jkiLUoO0+B6RlR\nABqGpDJBO9EL7hFCl+uIAXMC+8ydxgRj5Mf2TvH2ZEHIj6bdIC3qwFqoFe/aJcHf\nEuy3IDZf/oT+n7JLb6+FK5UTP8fNQVXlYPmuGejRFth/i7kq7IVCJioJ6nDbZBLL\nZxAkG2080MLcXqfci28miM6laIrTbMp/lvmmxAf58XRFVTXlPOfaI+LjW99KbR+4\nPuIvcQd5GdExwl86bARLAlgUjXhLEqelRtno3mtKj+KIRgQQEQIABgUCUPDl0wAK\nCRArUtddZVtI3frFAJwJT+mDI95JV97R+cBA9HtBtfxByQCffgr0OgSG46R6UbAi\noMWbYzYkMyuJARwEEAECAAYFAlDzG8gACgkQna7c7cP6Lei5vwgApA/2Eak5eXw2\nw1gj+iiPgviiJL9o+BbS110MR1cn/wEHdkMBjAPX59myWKlPWC64wIvt+MsMrCIN\nvT7QJUUBKzOcMH1xoRQ3tY0X+M7bLaD2M8+Kgw00D4eyC8aGtcFKauqWHsbxABc5\n18n8J3dP8oaf7UOqgsETfRJgnD3GZA1lhs8INwsuGVqp4+WoWlt5JTGsrMlDnm0r\ndWekcozSKzDZkxTkbcC8M5HEvZypmXRa5hVQ/TIICy1YMqULb7GVweZK7Ma7ZXK8\nAQm2OZ4Jjs6byQX3A9Z3PLJzmNQGdwJ/BSh3pET0YSPPcAPYM2E84PJhP6GqaRTN\n3yKcsn9pJYkBHAQQAQIABgUCUSPNYgAKCRBy2PuGax8742PBB/49Gfquv8xjz91x\nYPNMbXzWjxhkFaF9JEwnSiGq8AQAfotH0bYYHt4Y/vdukY9B4fnqj/U34aOLr5qK\nSkymKII3npVCV9bP5eXSAPbYoCy92jHW5RpnTeR4H3O4gn5ICTWfrdOYq/GH2I0E\nEei2nlW9SdgJRTq8AuN5bwtzaeS1gvAQqQeABq9yKUOImggHViigiL5K/55xDms/\nybgNIHgFA2yMuCTZztiyuVi8AiJHWreeoJW3Cyo4QYx67BOCIEgHYRnF+elbKbF5\nBBViG8tPwDo/QzASBeTwO3TbkMeZsBdw3QJ8jGgW2S5vbWyJcW/nFIdOVxr4I5B6\n98br0XQTiQE+BBMBAgAoBQJQ71MZAhsDBQkB4TOABgsJCAcDAgYVCAIJCgsEFgID\nAQIeAQIXgAAKCRB60KkcQL0AkadHB/9V9LW4i55Lu/GSeBiZjdOnkD2HKJSGbvFG\nmqT7UEPupBB07v8q9JOLyrDLrxZl/QvpDCTmrmi3NAPXnneILgzoiBJCCXdxM0n2\nWyJmRNl7pHIvGmjl4CDbZe0LnhIe66vam4v394CNsbl2M0I5TLzVmP9Pb+bGJ6cL\nM2zhTdCLwfG8IqqjaCf19S79DJwwfaKnnjkv4Sj9vCxKanOZKt9NsR74UIxTS3M7\nFLOK24IUW7uqkzZWsEyU37lVEWZw8i6ov/VbYphTsSwGZvrX5EhPhalQK306esJY\nucTQ+cuQ165QxZRISk1M/teoyhGJP5f+A3Ec0ctF0PO8fbBx1A7TiQF7BBIBCABl\nBQJS+Yo3XhSAAAAAABUAQGJsb2NraGFzaEBiaXRjb2luLm9yZzAwMDAwMDAwMDAw\nMDAwMDBjODRhMDRhNzAyMzI1Y2YzY2RmNGEzNDQzNjJlZDBjMTllYzgxN2E5MDE0\nZWVlYzcACgkQf6sRQmfk+gTeWAf+I/v9anL0GzK/MQ1v80qysizrbbfrab8vojLK\nn/vVqoX7B85uVE+B/Mp9FDAQ0mMnD1Yn1PsWwX3fr4du4Jr+jRXRqupF5GLU5LlW\nNfP1VwY/49zUpUx2ka+aGgOCNhsr0VZrqZPt8qjDSVlvX1twrc7P1bWk0Y/e4Y4z\nwhBDNZ3luge2fakVuxdk1eoLwrgHARCt2MnFkcNm4pZiNyeTnWlDgcKDFatRkXSE\nczC3jTC6cLBaOjR1p7lzXthAAlUPbOUcztNCOhjhoEQu05pQQB8yN9lChCachsc/\noKGEWkFgl4UsuYtBx8iJB8lYw3Yvl2gEOTA0oIyXzKnRLt6iiokCHAQQAQIABgUC\nVA9iQAAKCRBQfh+DfBT/qeW9EACWx2O20PEGQA3QpJfXR4ocJD4iXfYNYwu9Du26\n2RKwLLDpVxCgXDUIlH2EfVaQNQF/jatz78UnukPAbCmQz7n85lvlU64R1P1Mv1/W\n80f+211mb+K3V6mAE4vQtJTMis7vW+c4lv30QNwkQ9n4YFz9fqfRm3qacy1ydAdM\nwnigV/L+M10IRnYMB6A2Z2lYLmvvCtKWkBSXvl9r8LVJRsVT2DSzw4O762YcuVXN\nquLV1aGp5pe/8w0DKd+OYJrEyYi1Qj+Svod2J6OEobDTISqBdi0KGujelaDaCDwB\nteTZBdjBgWh+YG+cRBoq6jNPF4tiyU34kcVHsZflyNyCgUmJsSSgJW7D4KqXZoEy\nWpsIALAf9xCAh16Uj5zyci3Dyk61Gj9C9ykhdEHfONGVhNF9G8lmGc9SGz8lNoJd\nSMQ63TsWqxo62D1Ap+BIzr6EImets16gbRs5J4w1bV1g5Vb22SlpuFScE6wRO+S3\nW+onsr3xfj2Q1faUxmFjkcjAgBPMz2Q2RuV3+m3FusI8RgcpyNpCLr6cJD2JaKTR\n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\nphpfVPK3mthha1GaE5j3cYyuFGNViBAaEkPpBS0JOmt66+LIjx+tZ0t4rVHG/oIP\nGdD9QMvToWzxGqTI1zjQtcJpud84q0zTokdzKhfZMdc3fC8SJWKhrpUYHlC311Jj\nif5IU2TDfPWIQ1Oesz/OcfAxjf/WXBijYj0obbXNkYHqtXKmBg4NQn4yVF0OBpUk\n3MdbWAVsUH6mNiVTA16tLPekSr522u+pCo24zQF9RhNOvtrxRuyVjduzzYjFK+kG\n47UgZBqjg8gOZdFh2tdjeuevE4yuxAmzcNYhCYLE7czMz+7br3qozHKR7/PGfcqg\nWHy8x72OCoutpA1PMtHVydXHARAAAQEAAAAAAAAAAAAAAAD/2P/gABBKRklGAAEB\nAQBIAEgAAP/+ADtDUkVBVE9SOiBnZC1qcGVnIHYxLjAgKHVzaW5nIElKRyBKUEVH\nIHY2MiksIHF1YWxpdHkgPSA5MAr/2wBDABcQERQRDhcUEhQaGBcbIjklIh8fIkYy\nNSk5UkhXVVFIUE5bZoNvW2F8Yk5QcptzfIeLkpSSWG2grJ+OqoOPko3/2wBDARga\nGiIeIkMlJUONXlBejY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2N\njY2NjY2NjY2NjY2NjY3/wgARCAEYARgDAREAAhEBAxEB/8QAGQABAQEBAQEAAAAA\nAAAAAAAAAAECAwQF/8QAFwEBAQEBAAAAAAAAAAAAAAAAAAECA//aAAwDAQACEAMQ\nAAAB92NAAAAACFBBUiigAACFEKIlBGgAAACFAIQyQ80uztZDoWkKAEKCACLFoSLQ\ngKQGI5r41zAzbzTRQdz23PSgJACghSBqBBVliKARzXzZvmt50M2CWalhDR1j6Vzo\ntABCgECwAUECkeaXzzXIxoOdhFZSqKQ6S+mTsemyigAQoFzQQoIBlfJm+deenOwE\nErKaC0RpbHoPoXNoQpBCkDUoICkgMS/OmuOksynWahiyWalENEBo3H0LnrQQoIAV\nrNAAiAcpfnNYoUKklZs0qFAEyU9UnvuVoAQoI1KBCkBmPLLxWLo2QhDNQVUQqHCw\ndY+lc6oCgAGs0ACA4xwzeN13jsaMmQZrFQAEThXG52v02elICwJQNywFBAco8udc\nrfbHUVkzEJWahAkBivLYPoM96SBbQBG5QECCuceGai++NCsmYzUIQlQIIeWs2eyT\n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\ndpxrlOWOxI9jmzuQ75LO\n=WxeH\n-----END PGP PUBLIC KEY BLOCK-----\n\n"
        },
        {
          "name": "addresses",
          "type": "tree",
          "content": null
        },
        {
          "name": "api",
          "type": "tree",
          "content": null
        },
        {
          "name": "base58",
          "type": "tree",
          "content": null
        },
        {
          "name": "bitcoin",
          "type": "tree",
          "content": null
        },
        {
          "name": "chacha20_poly1305",
          "type": "tree",
          "content": null
        },
        {
          "name": "clippy.toml",
          "type": "blob",
          "size": 0.083984375,
          "content": "msrv = \"1.63.0\"\ntoo-many-arguments-threshold = 13\navoid-breaking-exported-api = false\n"
        },
        {
          "name": "contrib",
          "type": "tree",
          "content": null
        },
        {
          "name": "fuzz",
          "type": "tree",
          "content": null
        },
        {
          "name": "githooks",
          "type": "tree",
          "content": null
        },
        {
          "name": "hashes",
          "type": "tree",
          "content": null
        },
        {
          "name": "internals",
          "type": "tree",
          "content": null
        },
        {
          "name": "io",
          "type": "tree",
          "content": null
        },
        {
          "name": "justfile",
          "type": "blob",
          "size": 1.6025390625,
          "content": "set positional-arguments\n\ndefault:\n  @just --list\n\n# Cargo build everything.\nbuild:\n  cargo build --workspace --all-targets --all-features\n\n# Cargo check everything.\ncheck:\n  cargo check --workspace --all-targets --all-features\n\n# Lint everything.\nlint:\n  cargo +$(cat ./nightly-version) clippy --workspace --all-targets --all-features -- --deny warnings\n  # lint warnings get inhibited unless we use `--nocapture`\n  cargo test --quiet --workspace --doc -- --nocapture\n\n# Run cargo fmt\nfmt:\n  cargo +$(cat ./nightly-version) fmt --all\n\n# Check the formatting\nformat:\n  cargo +$(cat ./nightly-version) fmt --all --check\n\n# Generate documentation.\ndocsrs *flags:\n  RUSTDOCFLAGS=\"--cfg docsrs -D warnings -D rustdoc::broken-intra-doc-links\" cargo +$(cat ./nightly-version) doc --all-features {{flags}}\n\n# Quick and dirty CI useful for pre-push checks.\nsane: lint\n  cargo test --quiet --workspace --all-targets --no-default-features > /dev/null || exit 1\n  cargo test --quiet --workspace --all-targets > /dev/null || exit 1\n  cargo test --quiet --workspace --all-targets --all-features > /dev/null || exit 1\n\n  # Make an attempt to catch feature gate problems in doctests\n  cargo test --manifest-path bitcoin/Cargo.toml --doc --no-default-features > /dev/null || exit 1\n\n# Check for API changes.\ncheck-api:\n contrib/check-for-api-changes.sh\n\n# Query the current API.\n@query-api crate command:\n contrib/api.sh $1 $2\n\n# Update the recent and minimal lock files.\nupdate-lock-files:\n  contrib/update-lock-files.sh\n\n# Install githooks\ngithooks-install:\n  ./contrib/copy-githooks.sh\n\n# Remove githooks\ngithooks-remove:\n  ./contrib/copy-githooks.sh -r\n"
        },
        {
          "name": "logo",
          "type": "tree",
          "content": null
        },
        {
          "name": "nightly-version",
          "type": "blob",
          "size": 0.0185546875,
          "content": "nightly-2025-01-10\n"
        },
        {
          "name": "primitives",
          "type": "tree",
          "content": null
        },
        {
          "name": "rustfmt.toml",
          "type": "blob",
          "size": 2.271484375,
          "content": "ignore = []\nhard_tabs = false\ntab_spaces = 4\nnewline_style = \"Auto\"\nindent_style = \"Block\"\n\nmax_width = 100 # This is number of characters.\n# `use_small_heuristics` is ignored if the granular width config values are explicitly set.\nuse_small_heuristics = \"Max\"    # \"Max\" == All granular width settings same as `max_width`.\n# # Granular width configuration settings. These are percentages of `max_width`.\n# fn_call_width = 60\n# attr_fn_like_width = 70\n# struct_lit_width = 18\n# struct_variant_width = 35\n# array_width = 60\n# chain_width = 60\n# single_line_if_else_max_width = 50\n\nwrap_comments = false\nformat_code_in_doc_comments = false\ncomment_width = 100             # Default 80\nnormalize_comments = false\nnormalize_doc_attributes = false\nformat_strings = false\nformat_macro_matchers = false\nformat_macro_bodies = true\nhex_literal_case = \"Preserve\"\nempty_item_single_line = true\nstruct_lit_single_line = true\nfn_single_line = true           # Default false\nwhere_single_line = false\nimports_indent = \"Block\"\nimports_layout = \"Mixed\"\nimports_granularity = \"Module\"     # Default \"Preserve\"\ngroup_imports = \"StdExternalCrate\" # Default \"Preserve\"\nreorder_imports = true\nreorder_modules = true\nreorder_impl_items = false\ntype_punctuation_density = \"Wide\"\nspace_before_colon = false\nspace_after_colon = true\nspaces_around_ranges = false\nbinop_separator = \"Front\"\nremove_nested_parens = true\ncombine_control_expr = true\noverflow_delimited_expr = false\nstruct_field_align_threshold = 0\nenum_discrim_align_threshold = 0\nmatch_arm_blocks = false        # Default true\nmatch_arm_leading_pipes = \"Never\"\nforce_multiline_blocks = false\nfn_params_layout = \"Tall\"\nbrace_style = \"SameLineWhere\"\ncontrol_brace_style = \"AlwaysSameLine\"\ntrailing_semicolon = true\ntrailing_comma = \"Vertical\"\nmatch_block_trailing_comma = false\nblank_lines_upper_bound = 1\nblank_lines_lower_bound = 0\nedition = \"2021\"\nstyle_edition = \"2021\"\ninline_attribute_width = 0\nformat_generated_files = true\nmerge_derives = true\nuse_try_shorthand = false\nuse_field_init_shorthand = false\nforce_explicit_abi = true\ncondense_wildcard_suffixes = false\ncolor = \"Auto\"\nunstable_features = false\ndisable_all_formatting = false\nskip_children = false\nshow_parse_errors = true\nerror_on_line_overflow = false\nerror_on_unformatted = false\nemit_mode = \"Files\"\nmake_backup = false\n"
        },
        {
          "name": "units",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}