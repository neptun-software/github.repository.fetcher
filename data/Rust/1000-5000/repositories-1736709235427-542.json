{
  "metadata": {
    "timestamp": 1736709235427,
    "page": 542,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjU1MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "kcl-lang/kcl",
      "stars": 1813,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".devcontainer",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.091796875,
          "content": "*.css linguist-vendored\n*.html linguist-vendored\n*.js linguist-vendored\n*.py linguist-vendored"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.974609375,
          "content": "/build/\n.vs/\n.vscode/\n.idea/\n\n# kcl files\n.pytest_cache\n__pycache__\n__kclcache__/\nbuild-result/\ndist/\nkclvm.egg-info/\n.eggs/\n\n# Mac OS X files\n.DS_Store\n\n_python37_home_\n_site-packages\n\n__kcl_test_main.k\n\n# kclvm bundles\n/kclvm-*.zip\n/kcl-go*\n/_build_dist\n.kusion\n._target\n\n/venv/\n\n# Coverage\n.coverage\n.coverage.*\n/cover\n/scripts/cover\n\n/result\n\ncoverage.xml\nTEST-kclvm.xml\n\n/go-test-coverprofile.*\n\n# Benchmark\n.benchmarks\n\n# Code check\n.code_check\n\n/_output\n\n# Lark parser cache\nlark_parser.pickle\n\n/vendor\n/_build*\n/__build*\n/_3rdparty\n\n\t\n# Rust\n*.o\n*.a\n*.so\n*.orig\n/target\n/*/target\n/*/*/target\n/**/target\n\n/kclvm/vendor\n/scripts/docker/kclvm-builder/vendor*\n/scripts/docker/kclvm-builder/crates.io-index\n/scripts/docker/kclvm-builder-centos7/crates.io-index\n/scripts/docker/kclvm-builder-ubuntu/crates.io-index\n*.tar.gz\n\n# KCL cache and temp output\n.kclvm\n.kclvm_cov\n*.dylib\n*.so\n*.dll\n*.lock\n*.ll\n*.ll.lock\n_a.out.*\n_a.out_*.*\n\n# Compiler_base\n.compiler_base\n\n# KCL mod lock file\n!.mod.lock\n"
        },
        {
          "name": ".gitmodules",
          "type": "blob",
          "size": 0.1162109375,
          "content": "[submodule \"test/integration/konfig\"]\n\tpath = test/integration/konfig\n\turl = https://github.com/KusionStack/konfig.git\n"
        },
        {
          "name": "ADOPTERS.md",
          "type": "blob",
          "size": 0.49609375,
          "content": "# Adopters\n\nThis list shows non-exhaustive adopters of KCL. If you are using to KCL, then please add your team and use-case to this file.\n\n## Adopters list\n\n### Organizations\n\n+ *[Ant Group](https://www.antgroup.com/)* - Large scale Kubernetes configuration abstraction and management with GitOps.\n+ *[Youzan](https://www.youzan.com/)* - Large scale Kubernetes configuration abstraction and management with GitOps.\n+ *[Huawei](https://www.huawei.com/)* - Terraform resource model abstraction and management.\n"
        },
        {
          "name": "CODE_OF_CONDUCT.md",
          "type": "blob",
          "size": 5.0966796875,
          "content": "# Contributor Covenant Code of Conduct\n\n## Our Pledge\n\nWe as members, contributors, and leaders pledge to make participation in our\ncommunity a harassment-free experience for everyone, regardless of age, body\nsize, visible or invisible disability, ethnicity, sex characteristics, gender\nidentity and expression, level of experience, education, socio-economic status,\nnationality, personal appearance, race, religion, or sexual identity\nand orientation.\n\nWe pledge to act and interact in ways that contribute to an open, welcoming,\ndiverse, inclusive, and healthy community.\n\n## Our Standards\n\nExamples of behavior that contributes to a positive environment for our\ncommunity include:\n\n* Demonstrating empathy and kindness toward other people\n* Being respectful of differing opinions, viewpoints, and experiences\n* Giving and gracefully accepting constructive feedback\n* Accepting responsibility and apologizing to those affected by our mistakes,\n  and learning from the experience\n* Focusing on what is best not just for us as individuals, but for the\n  overall community\n\nExamples of unacceptable behavior include:\n\n* The use of sexualized language or imagery, and sexual attention or\n  advances of any kind\n* Trolling, insulting or derogatory comments, and personal or political attacks\n* Public or private harassment\n* Publishing others' private information, such as a physical or email\n  address, without their explicit permission\n* Other conduct which could reasonably be considered inappropriate in a\n  professional setting\n\n## Enforcement Responsibilities\n\nCommunity leaders are responsible for clarifying and enforcing our standards of\nacceptable behavior and will take appropriate and fair corrective action in\nresponse to any behavior that they deem inappropriate, threatening, offensive,\nor harmful.\n\nCommunity leaders have the right and responsibility to remove, edit, or reject\ncomments, commits, code, wiki edits, issues, and other contributions that are\nnot aligned to this Code of Conduct, and will communicate reasons for moderation\ndecisions when appropriate.\n\n## Scope\n\nThis Code of Conduct applies within all community spaces, and also applies when\nan individual is officially representing the community in public spaces.\nExamples of representing our community include using an official e-mail address,\nposting via an official social media account, or acting as an appointed\nrepresentative at an online or offline event.\n\n## Enforcement\n\nInstances of abusive, harassing, or otherwise unacceptable behavior may be\nreported to the community leaders responsible for enforcement at\nxpf6677@gmail.com.\nAll complaints will be reviewed and investigated promptly and fairly.\n\nAll community leaders are obligated to respect the privacy and security of the\nreporter of any incident.\n\n## Enforcement Guidelines\n\nCommunity leaders will follow these Community Impact Guidelines in determining\nthe consequences for any action they deem in violation of this Code of Conduct:\n\n### 1. Correction\n\n**Community Impact**: Use of inappropriate language or other behavior deemed\nunprofessional or unwelcome in the community.\n\n**Consequence**: A private, written warning from community leaders, providing\nclarity around the nature of the violation and an explanation of why the\nbehavior was inappropriate. A public apology may be requested.\n\n### 2. Warning\n\n**Community Impact**: A violation through a single incident or series\nof actions.\n\n**Consequence**: A warning with consequences for continued behavior. No\ninteraction with the people involved, including unsolicited interaction with\nthose enforcing the Code of Conduct, for a specified period of time. This\nincludes avoiding interactions in community spaces as well as external channels\nlike social media. Violating these terms may lead to a temporary or\npermanent ban.\n\n### 3. Temporary Ban\n\n**Community Impact**: A serious violation of community standards, including\nsustained inappropriate behavior.\n\n**Consequence**: A temporary ban from any sort of interaction or public\ncommunication with the community for a specified period of time. No public or\nprivate interaction with the people involved, including unsolicited interaction\nwith those enforcing the Code of Conduct, is allowed during this period.\nViolating these terms may lead to a permanent ban.\n\n### 4. Permanent Ban\n\n**Community Impact**: Demonstrating a pattern of violation of community\nstandards, including sustained inappropriate behavior,  harassment of an\nindividual, or aggression toward or disparagement of classes of individuals.\n\n**Consequence**: A permanent ban from any sort of public interaction within\nthe community.\n\n## Attribution\n\nThis Code of Conduct is adapted from the [Contributor Covenant][homepage],\nversion 2.0, available at\nhttps://www.contributor-covenant.org/version/2/0/code_of_conduct.html.\n\nCommunity Impact Guidelines were inspired by [Mozilla's code of conduct\nenforcement ladder](https://github.com/mozilla/diversity).\n\n[homepage]: https://www.contributor-covenant.org\n\nFor answers to common questions about this code of conduct, see the FAQ at\nhttps://www.contributor-covenant.org/faq. Translations are available at\nhttps://www.contributor-covenant.org/translations.\n"
        },
        {
          "name": "GOVERNANCE.md",
          "type": "blob",
          "size": 4.0537109375,
          "content": "# KCL Project Governance\n\nAs a CNCF sandbox project, the KCL project adheres to the [CNCF Code of Conduct](https://github.com/cncf/foundation/blob/master/code-of-conduct.md).\n\n## Overview\n\n- [KCL Project Governance](#kcl-project-governance)\n  - [Overview](#overview)\n  - [Maintainer Ship](#maintainer-ship)\n  - [Adding Maintainers](#adding-maintainers)\n  - [Removal of Inactive Maintainers](#removal-of-inactive-maintainers)\n  - [Decision-Making Process](#decision-making-process)\n  - [Updating Governance](#updating-governance)\n\n## Maintainer Ship\n\nMaintainers of the KCL project share the responsibility of its success. They have three main responsibilities:\n\n+ Share responsibility for the project's success.\n+ Make a long-term investment to improve the project.\n+ Spend time on tasks that may not be the most interesting, but are essential for the project's success.\n\nMaintainers often work tirelessly, but their contributions may not always be fully appreciated. While it may be easy to focus on the more exciting and technically advanced features, it is equally important to work on minor bug fixes, small improvements, long-term stability optimizations, and other essential aspects of the project.\n\n## Adding Maintainers\n\nMaintainers are individuals who have shown dedication to the long-term success of the project. Contributors wishing to become maintainers should have actively participated in tackling issues, contributing code, and reviewing proposals and code for a period of at least two months.\n\nMaintainer ship is built on trust, which extends beyond code contributions. It is important for potential maintainers to earn the trust of current maintainers by demonstrating their commitment to the best interests of the project.\n\nCurrent maintainers hold regular maintainer meetings to identify active contributors who have consistently invested time in the project over the prior months. From this list, if one or more individuals are deemed qualified candidates, a proposal to add them as maintainers can be submitted on GitHub via a pull request. If at least 50% of the maintainers agree with the proposal, the newly added maintainer(s) will be considered valid.\n\n## Removal of Inactive Maintainers\n\nSimilar to adding maintainers, existing maintainers can be removed from the active maintainer list. If an existing maintainer meets one of the following conditions, any other maintainer can propose their removal via a pull request:\n\n+ The maintainer has not participated in community activities for more than three months.\n+ The maintainer has violated the governance rules more than twice.\n\nOnce the above conditions are confirmed, the maintainer can be removed from the list, unless the original maintainer requests to remain and receives at least 50% of the votes from other maintainers.\n\nIf a maintainer is removed from the maintaining list, the other maintainers should acknowledge their contribution by adding their name to an alumni section.\n\n## Decision-Making Process\n\nThe KCL project is an open-source project that values openness. This means that the KCL repository is the source of truth for every aspect of the project, including values, design, documentation, roadmap, interfaces, etc. If it is part of the project, it should be in the repository.\n\nAll decisions, regardless of their size, should follow the following three steps to be considered an update to the project:\n\n1. Open a pull request.\n2. Discuss the changes under the pull request.\n3. Merge or reject the pull request.\n\nWhen the KCL project has less than seven maintainers, a pull request (except for adding maintainers) may be merged if it meets the following conditions:\n\n+ At least one maintainer comments \"LGTM\" (Looks Good To Me) on the pull request.\n+ No other maintainers have opposing opinions.\n\nWhen the KCL project has more than seven maintainers, a pull request (except for adding maintainers) may be merged if it meets the following conditions:\n\n+ At least two maintainers comment \"LGTM\" (Looks Good To Me) on the pull request.\n\n## Updating Governance\n\nAny substantive updates to the Governance require a supermajority vote from the maintainers.\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 11.0576171875,
          "content": "Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"[]\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright [yyyy] [name of copyright owner]\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License."
        },
        {
          "name": "MAINTAINERS",
          "type": "blob",
          "size": 0.5087890625,
          "content": "Pengfei Xu <xpf6677@gmail.com> Ant Group Peefy\nXiaodong Duo <xduorj@gmail.com> Ant Group ldxdl\nChaoqun Huang <huangch96@gmail.com> TuSimple ekkoful\nShushan Chai <shushan.css@antgroup.com> Ant Group chai2010\nRui Xia <xiarui1994@gmail.com> Ant Group amyXia1994\nZhe Zong <zongzhe1024@163.com> Ant Group zong-zhe\nXiangfei Chen <897013703@qq.com> Ant Group NeverRaR\nZheng Zhang <18012015693@163.com> Ant Group He1pa\nYi Zhen <soczhenyi@gmail.com> Ant Group i-zhen\nJunxing Zhu <jakezhu9@gmail.com> Southeast University jakezhu9\n"
        },
        {
          "name": "Makefile",
          "type": "blob",
          "size": 0.9365234375,
          "content": "# Copyright The KCL Authors. All rights reserved.\n\nPROJECT_NAME = kcl\n\nPWD:=$(shell pwd)\n\nVERSION := $(shell cat VERSION)\nBUILD_IMAGE:=kcllang/kcl-builder\n\n# export DOCKER_DEFAULT_PLATFORM=linux/amd64\n# or\n# --platform linux/amd64\n\nRUN_IN_DOCKER:=docker run -it --rm\nRUN_IN_DOCKER+=-v ~/.ssh:/root/.ssh\nRUN_IN_DOCKER+=-v ~/.gitconfig:/root/.gitconfig\nRUN_IN_DOCKER+=-v ${PWD}:/root/kclvm\nRUN_IN_DOCKER+=-w /root/kclvm ${BUILD_IMAGE}\n\n# ----------------\n# Build\n# ----------------\n\n.PHONY: build\nbuild:\n\t${PWD}/run.sh -a build\n\n.PHONY: build-lsp\nbuild-lsp:\n\tmake -C ./kclvm build-lsp\n\n.PHONY: release\nrelease:\n\t${PWD}/run.sh -a release\n\n.PHONY: check\ncheck:\n\tmake -C ./kclvm check\n\n.PHONY: test\ntest:\n\tmake -C ./kclvm test\n\n.PHONY: test-grammar\ntest-grammar:\n\tmake -C ./kclvm test-grammar\n\n.PHONY: fmt\nfmt:\n\tmake -C ./kclvm fmt\n\n.PHONY: tag\ntag:\n\tscripts/tag.sh v$(VERSION)\n\n# ----------------\n# Docker\n# ----------------\n\nsh-in-docker:\n\t${RUN_IN_DOCKER} bash\n"
        },
        {
          "name": "README-zh.md",
          "type": "blob",
          "size": 6.27734375,
          "content": "<h1 align=\"center\">KCL: 基于约束的记录及函数语言</h1>\n\n<p align=\"center\">\n<a href=\"./README.md\">English</a> | <a href=\"./README-zh.md\">简体中文</a>\n</p>\n<p align=\"center\">\n<a href=\"#介绍\">介绍</a> | <a href=\"#特性\">特性</a> | <a href=\"#场景\">场景</a> | <a href=\"#安装\">安装</a> | <a href=\"#文档\">文档</a> | <a href=\"#贡献\">贡献</a> | <a href=\"#路线规划\">路线规划</a>\n</p>\n\n<p align=\"center\">\n  <img src=\"https://github.com/kcl-lang/kcl/workflows/release/badge.svg\">\n  <img src=\"https://img.shields.io/badge/PRs-welcome-brightgreen.svg?style=flat-square\">\n  <img src=\"https://coveralls.io/repos/github/kcl-lang/kcl/badge.svg\">\n  <img src=\"https://img.shields.io/github/release/kcl-lang/kcl.svg\">\n  <img src=\"https://img.shields.io/github/license/kcl-lang/kcl.svg\">\n  <a href=\"https://www.bestpractices.dev/projects/7867\"><img src=\"https://www.bestpractices.dev/projects/7867/badge\"></a>\n  <img src=\"https://img.shields.io/github/downloads/kcl-lang/kcl/total?label=Github%20downloads&logo=github\">\n  <img src=\"https://app.fossa.com/api/projects/git%2Bgithub.com%2Fkcl-lang%2Fkcl.svg?type=shield\">\n</p>\n\n## 介绍\n\nKCL 是一个开源的基于约束的记录及函数语言并通过成熟的编程语言技术和实践来改进对大量繁杂配置比如云原生 Kubernetes 配置场景的编写，致力于构建围绕配置的更好的模块化、扩展性和稳定性，更简单的逻辑编写，以及更简单的自动化和生态工具集成。\n\n<p align=\"center\">\n  <img src=\"https://kcl-lang.io/img/registry-and-ide.png\">\n</p>\n\n## 场景\n\n您可以将 KCL 用于\n\n+ [生成静态配置数据](https://kcl-lang.io/docs/user_docs/guides/configuration)如 JSON, YAML 等，或者[与已有的数据进行集成](https://kcl-lang.io/docs/user_docs/guides/data-integration)\n+ [使用 Schema 对配置数据进行抽象建模](https://kcl-lang.io/docs/user_docs/guides/schema-definition)并减少配置数据中的样板文件\n+ [为配置数据定义带有规则约束](https://kcl-lang.io/docs/user_docs/guides/validation)的 Schema 并对数据进行自动验证\n+ [通过梯度自动化方案和 GitOps](https://kcl-lang.io/docs/user_docs/guides/automation)无副作用地组织、简化、统一和管理庞大的配置\n+ 通过[分块编写配置数据](https://kcl-lang.io/docs/reference/lang/tour#config-operations)为不同的环境可扩展地管理庞大的配置\n+ 通过与[云原生配置工具](https://www.kcl-lang.io/docs/user_docs/guides/working-with-k8s/mutate-manifests/kubectl-kcl-plugin)集成直接编辑或校验存量 Kubernetes 资源\n+ 与 [KusionStack](https://kusionstack.io) 一起，用作平台工程语言来交付现代应用程序\n\n## 特性\n\n+ **简单易用**：源于 Python、Golang 等高级语言，采纳函数式编程语言特性，低副作用\n+ **设计良好**：独立的规范驱动的语法、语义、运行时和系统库设计\n+ **快速建模**：[开箱即用的模型库](https://artifacthub.io/packages/search?org=kcl&sort=relevance&page=1)和以 [Schema](https://kcl-lang.io/docs/reference/lang/tour#schema) 为中心的配置类型及模块化抽象\n+ **功能完备**：基于 [Config](https://kcl-lang.io/docs/reference/lang/tour#config-operations)、[Schema](https://kcl-lang.io/docs/reference/lang/tour#schema)、[Lambda](https://kcl-lang.io/docs/reference/lang/tour#function)、[Rule](https://kcl-lang.io/docs/reference/lang/tour#rule) 的配置及其模型、逻辑和策略编写\n+ **可靠稳定**：依赖[静态类型系统](https://kcl-lang.io/docs/reference/lang/tour/#type-system)、[约束](https://kcl-lang.io/docs/reference/lang/tour/#validation)和[自定义规则](https://kcl-lang.io/docs/reference/lang/tour#rule)的配置稳定性\n+ **强可扩展**：通过独立配置块[自动合并机制](https://kcl-lang.io/docs/reference/lang/tour/#-operators-1)保证配置编写的高可扩展性\n+ **易自动化**：[CRUD APIs](https://kcl-lang.io/docs/reference/lang/tour/#kcl-cli-variable-override)，[多语言 SDK](https://kcl-lang.io/docs/reference/xlang-api/overview)，[语言插件](https://github.com/kcl-lang/kcl-plugin) 构成的梯度自动化方案\n+ **极致性能**：使用 Rust & C，[LLVM](https://llvm.org/) 实现，支持编译到本地代码和 [WASM](https://webassembly.org/) 的高性能编译时和运行时\n+ **API 亲和**：原生支持 [OpenAPI](https://github.com/kcl-lang/kcl-openapi)、 Kubernetes CRD， Kubernetes Resource Model (KRM) 等 API 生态规范\n+ **开发友好**：[语言工具](https://kcl-lang.io/docs/tools/cli/kcl/) (Format，Lint，Test，Vet，Doc, 包管理工具等) 和 [IDE 插件](https://kcl-lang.io/docs/tools/Ide/) 构建良好的研发体验\n+ **安全可控**：面向领域，不原生提供线程、IO 等系统级功能，低噪音，低安全风险，易维护，易治理\n+ **多语言 SDK**：Rust, Go, Python, .NET, Java 和 Node.js 等 SDK 满足不同场景和应用使用需求\n+ **生态集成**：通过 [Kubectl KCL 插件](https://github.com/kcl-lang/kubectl-kcl)、[Kustomize KCL 插件](https://github.com/kcl-lang/kustomize-kcl)、[Helm KCL 插件](https://github.com/kcl-lang/helm-kcl) 、[KPT KCL SDK](https://github.com/kcl-lang/kpt-kcl) 或者 [Crossplane KCL 函数](https://github.com/kcl-lang/crossplane-kcl) 直接编辑、校验或者抽象资源\n\n+ **生产可用**：广泛应用在蚂蚁集团平台工程及自动化的生产环境实践中\n\n## 如何选择\n\n详细的功能和场景对比参考[这里](https://kcl-lang.io/docs/user_docs/getting-started/intro)。\n\n## 安装\n\n有关安装的更多信息，请查看 KCL 官网的[安装指南](https://kcl-lang.io/docs/user_docs/getting-started/install/)\n\n## 文档\n\n更多文档请访问[KCL 网站](https://kcl-lang.io/)\n\n## 贡献\n\n参考[开发手册](./docs/dev_guide/1.about_this_guide.md)。您也可以直接在 GitHub Codespaces 中打开该项目开始贡献。\n\n[![用 GitHub Codespaces 打开](https://github.com/codespaces/badge.svg)](https://codespaces.new/kcl-lang/kcl)\n\n## 路线规划\n\n参考[KCL 路线规划](https://github.com/kcl-lang/kcl/issues/882)\n\n## 社区\n\n欢迎访问 [社区](https://github.com/kcl-lang/community) 加入我们。\n\n## License\n\n[![FOSSA Status](https://app.fossa.com/api/projects/git%2Bgithub.com%2Fkcl-lang%2Fkcl.svg?type=large)](https://app.fossa.com/projects/git%2Bgithub.com%2Fkcl-lang%2Fkcl?ref=badge_large)\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 6.859375,
          "content": "<h1 align=\"center\">KCL: Constraint-based Record & Functional Language</h1>\n\n<p align=\"center\">\n<a href=\"./README.md\">English</a> | <a href=\"./README-zh.md\">简体中文</a>\n</p>\n<p align=\"center\">\n<a href=\"#introduction\">Introduction</a> | <a href=\"#features\">Features</a> | <a href=\"#what-is-it-for\">What is it for</a> | <a href=\"#installation\">Installation</a> | <a href=\"#documentation\">Documentation</a> | <a href=\"#contributing\">Contributing</a> | <a href=\"#roadmap\">Roadmap</a>\n</p>\n\n<p align=\"center\">\n  <img src=\"https://github.com/kcl-lang/kcl/workflows/release/badge.svg\">\n  <img src=\"https://img.shields.io/badge/PRs-welcome-brightgreen.svg?style=flat-square\">\n  <img src=\"https://coveralls.io/repos/github/kcl-lang/kcl/badge.svg\">\n  <img src=\"https://img.shields.io/github/release/kcl-lang/kcl.svg\">\n  <img src=\"https://img.shields.io/github/license/kcl-lang/kcl.svg\">\n  <a href=\"https://www.bestpractices.dev/projects/7867\"><img src=\"https://www.bestpractices.dev/projects/7867/badge\"></a>\n  <img src=\"https://img.shields.io/github/downloads/kcl-lang/kcl/total?label=Github%20downloads&logo=github\">\n  <img src=\"https://app.fossa.com/api/projects/git%2Bgithub.com%2Fkcl-lang%2Fkcl.svg?type=shield\">\n</p>\n\n## Introduction\n\nKCL is an open-source, constraint-based record and functional language that enhances the writing of complex configurations, including those for cloud-native scenarios. With its advanced programming language technology and practices, KCL is dedicated to promoting better modularity, scalability, and stability for configurations. It enables simpler logic writing and offers ease of automation APIs and integration with homegrown systems.\n\n<p align=\"center\">\n  <img src=\"https://kcl-lang.io/img/registry-and-ide.png\">\n</p>\n\n## What is it for?\n\nYou can use KCL to\n\n+ [Generate low-level static configuration data](https://kcl-lang.io/docs/user_docs/guides/configuration) such as JSON, YAML, etc., or [integrate with existing data](https://kcl-lang.io/docs/user_docs/guides/data-integration).\n+ Reduce boilerplate in configuration data with the [schema modeling](https://kcl-lang.io/docs/user_docs/guides/schema-definition).\n+ Define schemas with [rule constraints for configuration data and validate](https://kcl-lang.io/docs/user_docs/guides/validation) them automatically.\n+ Organize, simplify, unify and manage large configurations without side effects through [gradient automation schemes and GitOps](https://kcl-lang.io/docs/user_docs/guides/automation).\n+ Manage large configurations in a scalable way for different environments with [isolated configuration blocks](https://kcl-lang.io/docs/reference/lang/tour#config-operations).\n+ Mutating or validating Kubernetes resources with [cloud-native configuration tool plugins](https://www.kcl-lang.io/docs/user_docs/guides/working-with-k8s/mutate-manifests/kubectl-kcl-plugin).\n+ Used as a platform engineering programming language to deliver modern applications with [KusionStack](https://kusionstack.io).\n\n## Features\n\n+ **Easy-to-use**: Originated from high-level languages ​​such as Python and Golang, incorporating functional language features with low side effects.\n+ **Well-designed**: Independent spec-driven syntax, semantics, runtime and system modules design.\n+ **Quick modeling**: [Out-of-the-box modules](https://artifacthub.io/packages/search?org=kcl&sort=relevance&page=1) and [Schema](https://kcl-lang.io/docs/reference/lang/tour#schema)-centric configuration types and modular abstraction.\n+ **Rich capabilities**: Configuration with type, logic and policy based on [Config](https://kcl-lang.io/docs/reference/lang/tour#config-operations), [Schema](https://kcl-lang.io/docs/reference/lang/tour#schema), [Lambda](https://kcl-lang.io/docs/reference/lang/tour#function), [Rule](https://kcl-lang.io/docs/reference/lang/tour#rule).\n+ **Stability**: Configuration stability is achieved through a [static type system](https://kcl-lang.io/docs/reference/lang/tour/#type-system), [constraints](https://kcl-lang.io/docs/reference/lang/tour/#validation), and [rules](https://kcl-lang.io/docs/reference/lang/tour#rule).\n+ **Scalability**: High scalability is assured with an [automatic merge mechanism](https://kcl-lang.io/docs/reference/lang/tour/#-operators-1) of isolated config blocks.\n+ **Fast automation**: Gradient automation scheme of [CRUD APIs](https://kcl-lang.io/docs/reference/lang/tour/#kcl-cli-variable-override), [multilingual SDKs](https://kcl-lang.io/docs/reference/xlang-api/overview), and [language plugin](https://github.com/kcl-lang/kcl-plugin)\n+ **High performance**: High compile-time and runtime performance using Rust & C and [LLVM](https://llvm.org/), and support compilation to native code and [WASM](https://webassembly.org/).\n+ **API affinity**: Native support for ecological API specifications such as [OpenAPI](https://github.com/kcl-lang/kcl-openapi), Kubernetes CRD, Kubernetes Resource Model (KRM) spec.\n+ **Developer-friendly**: Friendly development experiences with rich [language tools](https://kcl-lang.io/docs/tools/cli/kcl/) (Format, Lint, Test, Vet, Doc, package management tools etc.), and multiple [IDE extensions](https://kcl-lang.io/docs/tools/Ide/).\n+ **Safety & maintainable**: Domain-oriented, no system-level functions such as native threads and IO, low noise and security risk, easy maintenance and governance.\n+ **Rich multi-language SDK**: Rust, Go, Python, .NET, Java and Node.js SDKs meet different scenarios and application use prelude.\n+ **Integrations**: Abstract, mutate and validate manifests through [Kubectl KCL Plugin](https://github.com/kcl-lang/kubectl-kcl), [Kustomize KCL Plugin](https://github.com/kcl-lang/kustomize-kcl), [Helm KCL Plugin](https://github.com/kcl-lang/helm-kcl), [KPT KCL SDK](https://github.com/kcl-lang/kpt-kcl) or [Crossplane KCL Function](https://github.com/kcl-lang/crossplane-kcl).\n+ **Production-ready**: Widely used in production practices of platform engineering and automation at Ant Group.\n\n## How to choose?\n\nA detailed feature and scenario comparison is [here](https://kcl-lang.io/docs/user_docs/getting-started/intro).\n\n## Installation\n\nFor more information about installation, please check the [Installation Guide](https://kcl-lang.io/docs/user_docs/getting-started/install/) on the KCL official website.\n\n## Documentation\n\nDetailed documentation is available at [KCL Website](https://kcl-lang.io/)\n\n## Contributing\n\nSee [Developing Guide](./docs/dev_guide/1.about_this_guide.md). You can also get started by opening the project in GitHub Codespaces.\n\n[![Open in GitHub Codespaces](https://github.com/codespaces/badge.svg)](https://codespaces.new/kcl-lang/kcl)\n\n## Roadmap\n\nSee [KCL Roadmap](https://github.com/kcl-lang/kcl/issues/882).\n\n## Community\n\nSee the [community](https://github.com/kcl-lang/community) for ways to join us.\n\n## License\n\n[![FOSSA Status](https://app.fossa.com/api/projects/git%2Bgithub.com%2Fkcl-lang%2Fkcl.svg?type=large)](https://app.fossa.com/projects/git%2Bgithub.com%2Fkcl-lang%2Fkcl?ref=badge_large)\n"
        },
        {
          "name": "VERSION",
          "type": "blob",
          "size": 0.005859375,
          "content": "0.11.0"
        },
        {
          "name": "build.ps1",
          "type": "blob",
          "size": 0.45703125,
          "content": "Set-Location $PSScriptRoot\n. '.\\scripts\\build-windows\\build.ps1'\n$bin_path = Join-Path $PSScriptRoot 'scripts\\build-windows\\_output\\kclvm-windows\\bin'\n$env:Path += \";$bin_path\"\n# rust unit test\nSet-Location .\\kclvm\ncargo test --workspace -r -- --nocapture\nSet-Location $PSScriptRoot\n# rust runtime test\nSet-Location .\\kclvm\\tests\\test_units\npython3 -m pytest -vv\nSet-Location $PSScriptRoot\n# konfig test\nInvoke-Expression -Command '.\\test\\integration\\test_konfig.bat'\n"
        },
        {
          "name": "cli",
          "type": "tree",
          "content": null
        },
        {
          "name": "compiler_base",
          "type": "tree",
          "content": null
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "kclvm",
          "type": "tree",
          "content": null
        },
        {
          "name": "run.sh",
          "type": "blob",
          "size": 1.42578125,
          "content": "#!/usr/bin/env bash\n\n# Environment\ngetSystemInfo() {\n    arch=$(uname -m)\n    case $arch in\n        armv7*) arch=\"arm\";;\n        aarch64) arch=\"arm64\";;\n        x86_64) arch=\"amd64\";;\n    esac\n\n    os=$(echo `uname`|tr '[:upper:]' '[:lower:]')\n}\n\ngetSystemInfo\ntopdir=$PWD\nversion=v$(cat VERSION)\n\n# Options\nhelp_message=$(cat <<-END\n    Usage:\n        run.sh -h\n            Print this help message.\n        run.sh -a [action]\n            Perform an action.\n        run.sh\n            Perform an action interactively.\n    Available actions:\n        build\n            Build the KCL package.\n        release\n            Create a releasing for the KCL package.\nEND\n)\naction=\nwhile getopts \"a:h:s:\" opt; do\n    case $opt in\n        a)\n        action=\"$OPTARG\"\n        ;;\n        h)\n        echo \"$help_message\"\n        exit 1\n        ;;\n        s)\n        sslpath=\"$OPTARG\"\n        ;;\n        \\?) echo \"Invalid option -$OPTARG\"\n        ;;\n    esac\ndone\n\nif [ \"$action\" == \"\" ]; then\n    PS3='Please select the action: '\n    options=(\"build\" \"release\")\n    select action in \"${options[@]}\"\n    do\n        case $action in\n            \"build\")\n                break\n                ;;\n            \"release\")\n                break\n                ;;\n            *) echo \"Invalid action $REPLY:$action\"\n                exit 1\n                break\n                ;;\n        esac\n    done\nfi\n\ntopdir=$topdir version=$version sslpath=$sslpath $topdir/scripts/$action.sh\n"
        },
        {
          "name": "samples",
          "type": "tree",
          "content": null
        },
        {
          "name": "scripts",
          "type": "tree",
          "content": null
        },
        {
          "name": "test",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}