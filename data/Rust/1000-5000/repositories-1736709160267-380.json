{
  "metadata": {
    "timestamp": 1736709160267,
    "page": 380,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjM4MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "rust-lang/log",
      "stars": 2272,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.025390625,
          "content": "target/\nCargo.lock\n.idea/\n"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 17.5810546875,
          "content": "# Change Log\n\n## [Unreleased]\n\n## [0.4.24] - 2025-01-11\n\n## What's Changed\n* Fix up kv feature activation by @KodrAus in https://github.com/rust-lang/log/pull/659\n\n\n**Full Changelog**: https://github.com/rust-lang/log/compare/0.4.23...0.4.24\n\n## [0.4.23] - 2025-01-10 (yanked)\n\n## What's Changed\n* Fix some typos by @Kleinmarb in https://github.com/rust-lang/log/pull/637\n* Add logforth to implementation by @tisonkun in https://github.com/rust-lang/log/pull/638\n* Add `spdlog-rs` link to README by @SpriteOvO in https://github.com/rust-lang/log/pull/639\n* Add correct lifetime to kv::Value::to_borrowed_str by @stevenroose in https://github.com/rust-lang/log/pull/643\n* docs: Add logforth as an impl by @tisonkun in https://github.com/rust-lang/log/pull/642\n* Add clang_log implementation by @DDAN-17 in https://github.com/rust-lang/log/pull/646\n* Bind lifetimes of &str returned from Key by the lifetime of 'k rather than the lifetime of the Key struct by @gbbosak in https://github.com/rust-lang/log/pull/648\n* Fix up key lifetimes and add method to try get a borrowed key by @KodrAus in https://github.com/rust-lang/log/pull/653\n* Add Ftail implementation by @tjardoo in https://github.com/rust-lang/log/pull/652\n\n## New Contributors\n* @Kleinmarb made their first contribution in https://github.com/rust-lang/log/pull/637\n* @tisonkun made their first contribution in https://github.com/rust-lang/log/pull/638\n* @SpriteOvO made their first contribution in https://github.com/rust-lang/log/pull/639\n* @stevenroose made their first contribution in https://github.com/rust-lang/log/pull/643\n* @DDAN-17 made their first contribution in https://github.com/rust-lang/log/pull/646\n* @gbbosak made their first contribution in https://github.com/rust-lang/log/pull/648\n* @tjardoo made their first contribution in https://github.com/rust-lang/log/pull/652\n\n**Full Changelog**: https://github.com/rust-lang/log/compare/0.4.22...0.4.23\n\n## [0.4.22] - 2024-06-27\n\n## What's Changed\n* Add some clarifications to the library docs by @KodrAus in https://github.com/rust-lang/log/pull/620\n* Add links to `colog` crate by @chrivers in https://github.com/rust-lang/log/pull/621\n* adding line_number test + updating some testing infrastructure by @DIvkov575 in https://github.com/rust-lang/log/pull/619\n* Clarify the actual set of functions that can race in _racy variants by @KodrAus in https://github.com/rust-lang/log/pull/623\n* Replace deprecated std::sync::atomic::spin_loop_hint() by @Catamantaloedis in https://github.com/rust-lang/log/pull/625\n* Check usage of max_level features by @Thomasdezeeuw in https://github.com/rust-lang/log/pull/627\n* Remove unneeded import by @Thomasdezeeuw in https://github.com/rust-lang/log/pull/628\n* Loosen orderings for logger initialization in https://github.com/rust-lang/log/pull/632. Originally by @pwoolcoc in https://github.com/rust-lang/log/pull/599\n* Use Location::caller() for file and line info in https://github.com/rust-lang/log/pull/633. Originally by @Cassy343 in https://github.com/rust-lang/log/pull/520\n\n## New Contributors\n* @chrivers made their first contribution in https://github.com/rust-lang/log/pull/621\n* @DIvkov575 made their first contribution in https://github.com/rust-lang/log/pull/619\n* @Catamantaloedis made their first contribution in https://github.com/rust-lang/log/pull/625\n\n**Full Changelog**: https://github.com/rust-lang/log/compare/0.4.21...0.4.22\n\n## [0.4.21] - 2024-02-27\n\n## What's Changed\n* Minor clippy nits by @nyurik in https://github.com/rust-lang/log/pull/578\n* Simplify Display impl by @nyurik in https://github.com/rust-lang/log/pull/579\n* Set all crates to 2021 edition by @nyurik in https://github.com/rust-lang/log/pull/580\n* Various changes based on review by @Thomasdezeeuw in https://github.com/rust-lang/log/pull/583\n* Fix typo in file_static() method doc by @dimo414 in https://github.com/rust-lang/log/pull/590\n* Specialize empty key value pairs by @EFanZh in https://github.com/rust-lang/log/pull/576\n* Fix incorrect lifetime in Value::to_str() by @peterjoel in https://github.com/rust-lang/log/pull/587\n* Remove some API of the key-value feature by @Thomasdezeeuw in https://github.com/rust-lang/log/pull/585\n* Add logcontrol-log and log-reload by @swsnr in https://github.com/rust-lang/log/pull/595\n* Add Serialization section to kv::Value docs by @Thomasdezeeuw in https://github.com/rust-lang/log/pull/593\n* Rename Value::to_str to to_cow_str by @Thomasdezeeuw in https://github.com/rust-lang/log/pull/592\n* Clarify documentation and simplify initialization of `STATIC_MAX_LEVEL` by @ptosi in https://github.com/rust-lang/log/pull/594\n* Update docs to 2021 edition, test by @nyurik in https://github.com/rust-lang/log/pull/577\n* Add \"alterable_logger\" link to README.md by @brummer-simon in https://github.com/rust-lang/log/pull/589\n* Normalize line ending by @EFanZh in https://github.com/rust-lang/log/pull/602\n* Remove `ok_or` in favor of `Option::ok_or` by @AngelicosPhosphoros in https://github.com/rust-lang/log/pull/607\n* Use `Acquire` ordering for initialization check by @AngelicosPhosphoros in https://github.com/rust-lang/log/pull/610\n* Get structured logging API ready for stabilization by @KodrAus in https://github.com/rust-lang/log/pull/613\n\n## New Contributors\n* @nyurik made their first contribution in https://github.com/rust-lang/log/pull/578\n* @dimo414 made their first contribution in https://github.com/rust-lang/log/pull/590\n* @peterjoel made their first contribution in https://github.com/rust-lang/log/pull/587\n* @ptosi made their first contribution in https://github.com/rust-lang/log/pull/594\n* @brummer-simon made their first contribution in https://github.com/rust-lang/log/pull/589\n* @AngelicosPhosphoros made their first contribution in https://github.com/rust-lang/log/pull/607\n\n## [0.4.20] - 2023-07-11\n\n* Remove rustversion dev-dependency by @Thomasdezeeuw in https://github.com/rust-lang/log/pull/568\n* Remove `local_inner_macros` usage by @EFanZh in https://github.com/rust-lang/log/pull/570\n\n## [0.4.19] - 2023-06-10\n\n* Use target_has_atomic instead of the old atomic_cas cfg by @GuillaumeGomez in https://github.com/rust-lang/log/pull/555\n* Put MSRV into Cargo.toml by @est31 in https://github.com/rust-lang/log/pull/557\n\n## [0.4.18] - 2023-05-28\n\n* fix Markdown links (again) by @hellow554 in https://github.com/rust-lang/log/pull/513\n* add cargo doc to workflow by @hellow554 in https://github.com/rust-lang/log/pull/515\n* Apply Clippy lints by @hellow554 in https://github.com/rust-lang/log/pull/516\n* Replace ad-hoc eq_ignore_ascii_case with slice::eq_ignore_ascii_case by @glandium in https://github.com/rust-lang/log/pull/519\n* fix up windows targets by @KodrAus in https://github.com/rust-lang/log/pull/528\n* typo fix by @jiangying000 in https://github.com/rust-lang/log/pull/529\n* Remove dependency on cfg_if by @EriKWDev in https://github.com/rust-lang/log/pull/536\n* GitHub Workflows security hardening by @sashashura in https://github.com/rust-lang/log/pull/538\n* Fix build status badge by @atouchet in https://github.com/rust-lang/log/pull/539\n* Add call_logger to the documentation by @a1ecbr0wn in https://github.com/rust-lang/log/pull/547\n* Use stable internals for key-value API by @KodrAus in https://github.com/rust-lang/log/pull/550\n* Change wording of list of implementations by @Thomasdezeeuw in https://github.com/rust-lang/log/pull/553\n* Add std-logger to list of implementations by @Thomasdezeeuw in https://github.com/rust-lang/log/pull/554\n* Add `set_max_level_racy` and gate `set_max_level` by @djkoloski in https://github.com/rust-lang/log/pull/544\n* [doc] src/lib.rs : prefix an unused variable with an underscore by @OccupyMars2025 in https://github.com/rust-lang/log/pull/561\n* [doc] src/macros.rs :  correct  grammar errors of an example in lib documentation by @OccupyMars2025 in https://github.com/rust-lang/log/pull/562\n\n## [0.4.17] - 2022-04-29\n\n* Update `kv_unstable` internal dependencies.\n\n## [0.4.16] - 2022-03-22\n\n* Fix a conflict with unqualified `Option` use in macros.\n\n## [0.4.15] - 2022-02-23\n\n* Silence a warning about the deprecated `spin_loop_hint`.\n* Relax ordering in the atomic `set_max_level` call.\n* Add thumbv4t-none-eabi to targets that don't support atomics\n* Allow levels to be iterated over.\n* Implement `Log` on some common wrapper types.\n* Improvements to test coverage.\n* Improvements to documentation.\n* Add key-value support to the `log!` macros.\n* Tighten `kv_unstable` internal dependencies, so they don't bump past their current alpha.\n* Add a simple visit API to `kv_unstable`.\n* Support `NonZero*` integers as values in structured logging\n* Support static strings as keys in structured logging\n\n## [0.4.14] - 2021-01-27\n\n* Remove the `__private_api_log_lit` special case.\n* Fixed incorrect combination of `kv_unstable` and `std` features causing compile failures.\n* Remove unstable `Value::to_*` conversions that were incorrectly using `as`.\n* Rename unstable `Value::to_error` to `Value::to_borrowed_error`.\n\n## [0.4.13] - 2021-01-11\n\n* This is the same as `0.4.11`, except with a `kv_unstable_std` feature added to aid migrating current dependents to `0.4.14` (which was originally going to be `0.4.13` until it was decided to create a patch from `0.4.11` to minimize disruption).\n\n## [0.4.12] - 2020-12-24\n\n### New\n\n* Support platforms without atomics by racing instead of failing to compile\n* Implement `Log` for `Box<T: Log>`\n* Update `cfg-if` to `1.0`\n* Internal reworks of the structured logging API. Removed the `Fill` API\nand added `source::as_map` and `source::as_list` to easily serialize a `Source`\nas either a map of `{key: value, ..}` or as a list of `[(key, value), ..]`.\n\n### Fixed\n\n* Fixed deserialization of `LevelFilter` to use their `u64` index variants\n\n## [0.4.11] - 2020-07-09\n\n### New\n\n* Support coercing structured values into concrete types.\n* Reference the `win_dbg_logger` in the readme.\n\n### Fixed\n\n* Updates a few deprecated items used internally.\n* Fixed issues in docs and expands sections.\n* Show the correct build badge in the readme.\n* Fix up a possible inference breakage with structured value errors.\n* Respect formatting flags in structured value formatting.\n\n## [0.4.10] - 2019-12-16 (yanked)\n\n### Fixed\n\n* Fixed the `log!` macros, so they work in expression context (this regressed in `0.4.9`, which has been yanked).\n\n## [0.4.9] - 2019-12-12 (yanked)\n\n### Minimum Supported Rust Version\n\nThis release bumps the minimum compiler version to `1.31.0`. This was mainly needed for `cfg-if`,\nbut between `1.16.0` and `1.31.0` there are a lot of language and library improvements we now\ntake advantage of.\n\n### New\n\n* Unstable support for capturing key-value pairs in a record using the `log!` macros\n\n### Improved\n\n* Better documentation for max level filters.\n* Internal updates to line up with bumped MSRV\n\n## [0.4.8] - 2019-07-28\n\n### New\n\n* Support attempting to get `Record` fields as static strings.\n\n## [0.4.7] - 2019-07-06\n\n### New\n\n* Support for embedded environments with thread-unsafe initialization.\n* Initial unstable support for capturing structured data under the `kv_unstable`\nfeature gate. This new API doesn't affect existing users and may change in future\npatches (so those changes may not appear in the changelog until it stabilizes).\n\n### Improved\n\n* Docs for using `log` with the 2018 edition.\n* Error messages for macros missing arguments.\n\n## [0.4.6] - 2018-10-27\n\n### Improved\n\n* Support 2018-style macro import for the `log_enabled!` macro.\n\n## [0.4.5] - 2018-09-03\n\n### Improved\n\n* Make `log`'s internal helper macros less likely to conflict with user-defined\n  macros.\n\n## [0.4.4] - 2018-08-17\n\n### Improved\n\n* Support 2018-style imports of the log macros.\n\n## [0.4.3] - 2018-06-29\n\n### Improved\n\n* More code generation improvements.\n\n## [0.4.2] - 2018-06-05\n\n### Improved\n\n* Log invocations now generate less code.\n\n### Fixed\n\n* Example Logger implementations now properly set the max log level.\n\n## [0.4.1] - 2017-12-30\n\n### Fixed\n\n* Some doc links were fixed.\n\n## [0.4.0] - 2017-12-24\n\nThe changes in this release include cleanup of some obscure functionality and a more robust public\nAPI designed to support bridges to other logging systems, and provide more flexibility to new\nfeatures in the future.\n\n### Compatibility\n\nVast portions of the Rust ecosystem use the 0.3.x release series of log, and we don't want to force\nthe community to go through the pain of upgrading every crate to 0.4.x at the exact same time. Along\nwith 0.4.0, we've published a new 0.3.9 release which acts as a \"shim\" over 0.4.0. This will allow\ncrates using either version to coexist without losing messages from one side or the other.\n\nThere is one caveat - a log message generated by a crate using 0.4.x but consumed by a logging\nimplementation using 0.3.x will not have a file name or module path. Applications affected by this\ncan upgrade their logging implementations to one using 0.4.x to avoid losing this information. The\nother direction does not lose any information, fortunately!\n\n**TL;DR** Libraries should feel comfortable upgrading to 0.4.0 without treating that as a breaking\nchange. Applications may need to update their logging implementation (e.g. env-logger) to a newer\nversion using log 0.4.x to avoid losing module and file information.\n\n### New\n\n* The crate is now `no_std` by default.\n* `Level` and `LevelFilter` now implement `Serialize` and `Deserialize` when the `serde` feature is\n    enabled.\n* The `Record` and `Metadata` types can now be constructed by third-party code via a builder API.\n* The `logger` free function returns a reference to the logger implementation. This, along with the\n    ability to construct `Record`s, makes it possible to bridge from another logging framework to\n    this one without digging into the private internals of the crate. The standard `error!` `warn!`,\n    etc., macros now exclusively use the public API of the crate rather than \"secret\" internal APIs.\n* `Log::flush` has been added to allow crates to tell the logging implementation to ensure that all\n    \"in flight\" log events have been persisted. This can be used, for example, just before an\n    application exits to ensure that asynchronous log sinks finish their work.\n\n### Removed\n\n* The `shutdown` and `shutdown_raw` functions have been removed. Supporting shutdown significantly\n    complicated the implementation and imposed a performance cost on each logging operation.\n* The `log_panics` function and its associated `nightly` Cargo feature have been removed. Use the\n    [log-panics](https://crates.io/crates/log-panics) instead.\n\n### Changed\n\n* The `Log` prefix has been removed from type names. For example, `LogLevelFilter` is now\n    `LevelFilter`, and `LogRecord` is now `Record`.\n* The `MaxLogLevelFilter` object has been removed in favor of a `set_max_level` free function.\n* The `set_logger` free functions have been restructured. The logger is now directly passed to the\n    functions rather than a closure which returns the logger. `set_logger` now takes a `&'static\n    Log` and is usable in `no_std` contexts in place of the old `set_logger_raw`. `set_boxed_logger`\n    is a convenience function which takes a `Box<Log>` but otherwise acts like `set_logger`. It\n    requires the `std` feature.\n* The `file` and `module_path` values in `Record` no longer have the `'static` lifetime to support\n    integration with other logging frameworks that don't provide a `'static` lifetime for the\n    equivalent values.\n* The `file`, `line`, and `module_path` values in `Record` are now `Option`s to support integration\n    with other logging frameworks that don't provide those values.\n\n### In the Future\n\n* We're looking to add support for *structured* logging - the inclusion of extra key-value pairs of\n    information in a log event in addition to the normal string message. This should be able to be\n    added in a backwards compatible manner to the 0.4.x series when the design is worked out.\n\n## Older\n\nLook at the [release tags] for information about older releases.\n\n[Unreleased]: https://github.com/rust-lang-nursery/log/compare/0.4.24...HEAD\n[0.4.24]: https://github.com/rust-lang/log/compare/0.4.23...0.4.24\n[0.4.23]: https://github.com/rust-lang/log/compare/0.4.22...0.4.23\n[0.4.22]: https://github.com/rust-lang/log/compare/0.4.21...0.4.22\n[0.4.21]: https://github.com/rust-lang/log/compare/0.4.20...0.4.21\n[0.4.20]: https://github.com/rust-lang-nursery/log/compare/0.4.19...0.4.20\n[0.4.19]: https://github.com/rust-lang-nursery/log/compare/0.4.18...0.4.19\n[0.4.18]: https://github.com/rust-lang-nursery/log/compare/0.4.17...0.4.18\n[0.4.17]: https://github.com/rust-lang-nursery/log/compare/0.4.16...0.4.17\n[0.4.16]: https://github.com/rust-lang-nursery/log/compare/0.4.15...0.4.16\n[0.4.15]: https://github.com/rust-lang-nursery/log/compare/0.4.13...0.4.15\n[0.4.14]: https://github.com/rust-lang-nursery/log/compare/0.4.13...0.4.14\n[0.4.13]: https://github.com/rust-lang-nursery/log/compare/0.4.11...0.4.13\n[0.4.12]: https://github.com/rust-lang-nursery/log/compare/0.4.11...0.4.12\n[0.4.11]: https://github.com/rust-lang-nursery/log/compare/0.4.10...0.4.11\n[0.4.10]: https://github.com/rust-lang-nursery/log/compare/0.4.9...0.4.10\n[0.4.9]: https://github.com/rust-lang-nursery/log/compare/0.4.8...0.4.9\n[0.4.8]: https://github.com/rust-lang-nursery/log/compare/0.4.7...0.4.8\n[0.4.7]: https://github.com/rust-lang-nursery/log/compare/0.4.6...0.4.7\n[0.4.6]: https://github.com/rust-lang-nursery/log/compare/0.4.5...0.4.6\n[0.4.5]: https://github.com/rust-lang-nursery/log/compare/0.4.4...0.4.5\n[0.4.4]: https://github.com/rust-lang-nursery/log/compare/0.4.3...0.4.4\n[0.4.3]: https://github.com/rust-lang-nursery/log/compare/0.4.2...0.4.3\n[0.4.2]: https://github.com/rust-lang-nursery/log/compare/0.4.1...0.4.2\n[0.4.1]: https://github.com/rust-lang-nursery/log/compare/0.4.0...0.4.1\n[0.4.0]: https://github.com/rust-lang-nursery/log/compare/0.3.8...0.4.0\n[release tags]: https://github.com/rust-lang-nursery/log/releases\n"
        },
        {
          "name": "Cargo.toml",
          "type": "blob",
          "size": 2.443359375,
          "content": "[package]\n\nname = \"log\"\nversion = \"0.4.24\" # remember to update html_root_url\nauthors = [\"The Rust Project Developers\"]\nlicense = \"MIT OR Apache-2.0\"\nreadme = \"README.md\"\nrepository = \"https://github.com/rust-lang/log\"\ndocumentation = \"https://docs.rs/log\"\ndescription = \"\"\"\nA lightweight logging facade for Rust\n\"\"\"\ncategories = [\"development-tools::debugging\"]\nkeywords = [\"logging\"]\nexclude = [\"rfcs/**/*\"]\nrust-version = \"1.60.0\"\nedition = \"2021\"\n\n[package.metadata.docs.rs]\nfeatures = [\"std\", \"serde\", \"kv_std\", \"kv_sval\", \"kv_serde\"]\n\n[[test]]\nname = \"integration\"\npath = \"tests/integration.rs\"\nharness = false\n\n[[test]]\nname = \"macros\"\npath = \"tests/macros.rs\"\nharness = true\n\n[features]\nmax_level_off   = []\nmax_level_error = []\nmax_level_warn  = []\nmax_level_info  = []\nmax_level_debug = []\nmax_level_trace = []\n\nrelease_max_level_off   = []\nrelease_max_level_error = []\nrelease_max_level_warn  = []\nrelease_max_level_info  = []\nrelease_max_level_debug = []\nrelease_max_level_trace = []\n\nstd = [\"value-bag?/std\"]\n\nkv = []\nkv_sval = [\"kv\", \"value-bag/sval\", \"sval\", \"sval_ref\"]\nkv_std = [\"std\", \"kv\", \"value-bag/error\"]\nkv_serde = [\"kv_std\", \"value-bag/serde\", \"serde\"]\n\n# Deprecated: use `kv_*` instead\n# These `*_unstable` features will be removed in a future release\nkv_unstable = [\"kv\", \"value-bag\"]\nkv_unstable_sval = [\"kv_sval\", \"kv_unstable\"]\nkv_unstable_std = [\"kv_std\", \"kv_unstable\"]\nkv_unstable_serde = [\"kv_serde\", \"kv_unstable_std\"]\n\n[dependencies]\nserde = { version = \"1.0\", optional = true, default-features = false }\nsval = { version = \"2.1\", optional = true, default-features = false }\nsval_ref = { version = \"2.1\", optional = true, default-features = false }\nvalue-bag = { version = \"1.7\", optional = true, default-features = false, features = [\"inline-i128\"] }\n\n[dev-dependencies]\nserde = { version = \"1.0\", features = [\"derive\"] }\nserde_json = \"1.0\"\nserde_test = \"1.0\"\nsval = { version = \"2.1\" }\nsval_derive = { version = \"2.1\" }\nvalue-bag = { version = \"1.7\", features = [\"test\"] }\n\n# NOTE: log doesn't actually depent on this crate. However, our dependencies,\n# serde and sval, dependent on version 1.0 of the crate, which has problem fixed\n# in 1.0.60, specifically in the following commit\n# https://github.com/dtolnay/proc-macro2/commit/e31d61910049e097afdd3d27c37786309082bdcb.\n# By defining the crate as direct dependency we can increase its minimal\n# version making the minimal (crate) version CI happy.\nproc-macro2 = { version = \"1.0.63\", default-features = false }\n"
        },
        {
          "name": "LICENSE-APACHE",
          "type": "blob",
          "size": 10.5927734375,
          "content": "                              Apache License\n                        Version 2.0, January 2004\n                     http://www.apache.org/licenses/\n\nTERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n1. Definitions.\n\n   \"License\" shall mean the terms and conditions for use, reproduction,\n   and distribution as defined by Sections 1 through 9 of this document.\n\n   \"Licensor\" shall mean the copyright owner or entity authorized by\n   the copyright owner that is granting the License.\n\n   \"Legal Entity\" shall mean the union of the acting entity and all\n   other entities that control, are controlled by, or are under common\n   control with that entity. For the purposes of this definition,\n   \"control\" means (i) the power, direct or indirect, to cause the\n   direction or management of such entity, whether by contract or\n   otherwise, or (ii) ownership of fifty percent (50%) or more of the\n   outstanding shares, or (iii) beneficial ownership of such entity.\n\n   \"You\" (or \"Your\") shall mean an individual or Legal Entity\n   exercising permissions granted by this License.\n\n   \"Source\" form shall mean the preferred form for making modifications,\n   including but not limited to software source code, documentation\n   source, and configuration files.\n\n   \"Object\" form shall mean any form resulting from mechanical\n   transformation or translation of a Source form, including but\n   not limited to compiled object code, generated documentation,\n   and conversions to other media types.\n\n   \"Work\" shall mean the work of authorship, whether in Source or\n   Object form, made available under the License, as indicated by a\n   copyright notice that is included in or attached to the work\n   (an example is provided in the Appendix below).\n\n   \"Derivative Works\" shall mean any work, whether in Source or Object\n   form, that is based on (or derived from) the Work and for which the\n   editorial revisions, annotations, elaborations, or other modifications\n   represent, as a whole, an original work of authorship. For the purposes\n   of this License, Derivative Works shall not include works that remain\n   separable from, or merely link (or bind by name) to the interfaces of,\n   the Work and Derivative Works thereof.\n\n   \"Contribution\" shall mean any work of authorship, including\n   the original version of the Work and any modifications or additions\n   to that Work or Derivative Works thereof, that is intentionally\n   submitted to Licensor for inclusion in the Work by the copyright owner\n   or by an individual or Legal Entity authorized to submit on behalf of\n   the copyright owner. For the purposes of this definition, \"submitted\"\n   means any form of electronic, verbal, or written communication sent\n   to the Licensor or its representatives, including but not limited to\n   communication on electronic mailing lists, source code control systems,\n   and issue tracking systems that are managed by, or on behalf of, the\n   Licensor for the purpose of discussing and improving the Work, but\n   excluding communication that is conspicuously marked or otherwise\n   designated in writing by the copyright owner as \"Not a Contribution.\"\n\n   \"Contributor\" shall mean Licensor and any individual or Legal Entity\n   on behalf of whom a Contribution has been received by Licensor and\n   subsequently incorporated within the Work.\n\n2. Grant of Copyright License. Subject to the terms and conditions of\n   this License, each Contributor hereby grants to You a perpetual,\n   worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n   copyright license to reproduce, prepare Derivative Works of,\n   publicly display, publicly perform, sublicense, and distribute the\n   Work and such Derivative Works in Source or Object form.\n\n3. Grant of Patent License. Subject to the terms and conditions of\n   this License, each Contributor hereby grants to You a perpetual,\n   worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n   (except as stated in this section) patent license to make, have made,\n   use, offer to sell, sell, import, and otherwise transfer the Work,\n   where such license applies only to those patent claims licensable\n   by such Contributor that are necessarily infringed by their\n   Contribution(s) alone or by combination of their Contribution(s)\n   with the Work to which such Contribution(s) was submitted. If You\n   institute patent litigation against any entity (including a\n   cross-claim or counterclaim in a lawsuit) alleging that the Work\n   or a Contribution incorporated within the Work constitutes direct\n   or contributory patent infringement, then any patent licenses\n   granted to You under this License for that Work shall terminate\n   as of the date such litigation is filed.\n\n4. Redistribution. You may reproduce and distribute copies of the\n   Work or Derivative Works thereof in any medium, with or without\n   modifications, and in Source or Object form, provided that You\n   meet the following conditions:\n\n   (a) You must give any other recipients of the Work or\n       Derivative Works a copy of this License; and\n\n   (b) You must cause any modified files to carry prominent notices\n       stating that You changed the files; and\n\n   (c) You must retain, in the Source form of any Derivative Works\n       that You distribute, all copyright, patent, trademark, and\n       attribution notices from the Source form of the Work,\n       excluding those notices that do not pertain to any part of\n       the Derivative Works; and\n\n   (d) If the Work includes a \"NOTICE\" text file as part of its\n       distribution, then any Derivative Works that You distribute must\n       include a readable copy of the attribution notices contained\n       within such NOTICE file, excluding those notices that do not\n       pertain to any part of the Derivative Works, in at least one\n       of the following places: within a NOTICE text file distributed\n       as part of the Derivative Works; within the Source form or\n       documentation, if provided along with the Derivative Works; or,\n       within a display generated by the Derivative Works, if and\n       wherever such third-party notices normally appear. The contents\n       of the NOTICE file are for informational purposes only and\n       do not modify the License. You may add Your own attribution\n       notices within Derivative Works that You distribute, alongside\n       or as an addendum to the NOTICE text from the Work, provided\n       that such additional attribution notices cannot be construed\n       as modifying the License.\n\n   You may add Your own copyright statement to Your modifications and\n   may provide additional or different license terms and conditions\n   for use, reproduction, or distribution of Your modifications, or\n   for any such Derivative Works as a whole, provided Your use,\n   reproduction, and distribution of the Work otherwise complies with\n   the conditions stated in this License.\n\n5. Submission of Contributions. Unless You explicitly state otherwise,\n   any Contribution intentionally submitted for inclusion in the Work\n   by You to the Licensor shall be under the terms and conditions of\n   this License, without any additional terms or conditions.\n   Notwithstanding the above, nothing herein shall supersede or modify\n   the terms of any separate license agreement you may have executed\n   with Licensor regarding such Contributions.\n\n6. Trademarks. This License does not grant permission to use the trade\n   names, trademarks, service marks, or product names of the Licensor,\n   except as required for reasonable and customary use in describing the\n   origin of the Work and reproducing the content of the NOTICE file.\n\n7. Disclaimer of Warranty. Unless required by applicable law or\n   agreed to in writing, Licensor provides the Work (and each\n   Contributor provides its Contributions) on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n   implied, including, without limitation, any warranties or conditions\n   of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n   PARTICULAR PURPOSE. You are solely responsible for determining the\n   appropriateness of using or redistributing the Work and assume any\n   risks associated with Your exercise of permissions under this License.\n\n8. Limitation of Liability. In no event and under no legal theory,\n   whether in tort (including negligence), contract, or otherwise,\n   unless required by applicable law (such as deliberate and grossly\n   negligent acts) or agreed to in writing, shall any Contributor be\n   liable to You for damages, including any direct, indirect, special,\n   incidental, or consequential damages of any character arising as a\n   result of this License or out of the use or inability to use the\n   Work (including but not limited to damages for loss of goodwill,\n   work stoppage, computer failure or malfunction, or any and all\n   other commercial damages or losses), even if such Contributor\n   has been advised of the possibility of such damages.\n\n9. Accepting Warranty or Additional Liability. While redistributing\n   the Work or Derivative Works thereof, You may choose to offer,\n   and charge a fee for, acceptance of support, warranty, indemnity,\n   or other liability obligations and/or rights consistent with this\n   License. However, in accepting such obligations, You may act only\n   on Your own behalf and on Your sole responsibility, not on behalf\n   of any other Contributor, and only if You agree to indemnify,\n   defend, and hold each Contributor harmless for any liability\n   incurred by, or claims asserted against, such Contributor by reason\n   of your accepting any such warranty or additional liability.\n\nEND OF TERMS AND CONDITIONS\n\nAPPENDIX: How to apply the Apache License to your work.\n\n   To apply the Apache License to your work, attach the following\n   boilerplate notice, with the fields enclosed by brackets \"[]\"\n   replaced with your own identifying information. (Don't include\n   the brackets!)  The text should be enclosed in the appropriate\n   comment syntax for the file format. We also recommend that a\n   file or class name and description of purpose be included on the\n   same \"printed page\" as the copyright notice for easier\n   identification within third-party archives.\n\nCopyright [yyyy] [name of copyright owner]\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n\thttp://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n"
        },
        {
          "name": "LICENSE-MIT",
          "type": "blob",
          "size": 1.0458984375,
          "content": "Copyright (c) 2014 The Rust Project Developers\n\nPermission is hereby granted, free of charge, to any\nperson obtaining a copy of this software and associated\ndocumentation files (the \"Software\"), to deal in the\nSoftware without restriction, including without\nlimitation the rights to use, copy, modify, merge,\npublish, distribute, sublicense, and/or sell copies of\nthe Software, and to permit persons to whom the Software\nis furnished to do so, subject to the following\nconditions:\n\nThe above copyright notice and this permission notice\nshall be included in all copies or substantial portions\nof the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF\nANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED\nTO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A\nPARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT\nSHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\nOF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR\nIN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\nDEALINGS IN THE SOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 5.146484375,
          "content": "log\n===\n\nA Rust library providing a lightweight logging *facade*.\n\n[![Build status](https://img.shields.io/github/actions/workflow/status/rust-lang/log/main.yml?branch=master)](https://github.com/rust-lang/log/actions)\n[![Latest version](https://img.shields.io/crates/v/log.svg)](https://crates.io/crates/log)\n[![Documentation](https://docs.rs/log/badge.svg)](https://docs.rs/log)\n![License](https://img.shields.io/crates/l/log.svg)\n\n* [`log` documentation](https://docs.rs/log)\n\nA logging facade provides a single logging API that abstracts over the actual\nlogging implementation. Libraries can use the logging API provided by this\ncrate, and the consumer of those libraries can choose the logging\nimplementation that is most suitable for its use case.\n\n\n## Minimum supported `rustc`\n\n`1.60.0+`\n\nThis version is explicitly tested in CI and may be bumped in any release as needed. Maintaining compatibility with older compilers is a priority though, so the bar for bumping the minimum supported version is set very high. Any changes to the supported minimum version will be called out in the release notes.\n\n## Usage\n\n### In libraries\n\nLibraries should link only to the `log` crate, and use the provided macros to\nlog whatever information will be useful to downstream consumers:\n\n```toml\n[dependencies]\nlog = \"0.4\"\n```\n\n```rust\nuse log::{info, trace, warn};\n\npub fn shave_the_yak(yak: &mut Yak) {\n    trace!(\"Commencing yak shaving\");\n\n    loop {\n        match find_a_razor() {\n            Ok(razor) => {\n                info!(\"Razor located: {razor}\");\n                yak.shave(razor);\n                break;\n            }\n            Err(err) => {\n                warn!(\"Unable to locate a razor: {err}, retrying\");\n            }\n        }\n    }\n}\n```\n\n### In executables\n\nIn order to produce log output, executables have to use a logger implementation compatible with the facade.\nThere are many available implementations to choose from, here are some options:\n\n* Simple minimal loggers:\n    * [`env_logger`](https://docs.rs/env_logger/*/env_logger/)\n    * [`colog`](https://docs.rs/colog/*/colog/)\n    * [`simple_logger`](https://docs.rs/simple_logger/*/simple_logger/)\n    * [`simplelog`](https://docs.rs/simplelog/*/simplelog/)\n    * [`pretty_env_logger`](https://docs.rs/pretty_env_logger/*/pretty_env_logger/)\n    * [`stderrlog`](https://docs.rs/stderrlog/*/stderrlog/)\n    * [`flexi_logger`](https://docs.rs/flexi_logger/*/flexi_logger/)\n    * [`call_logger`](https://docs.rs/call_logger/*/call_logger/)\n    * [`std-logger`](https://docs.rs/std-logger/*/std_logger/)\n    * [`structured-logger`](https://docs.rs/structured-logger/latest/structured_logger/)\n    * [`clang_log`](https://docs.rs/clang_log/latest/clang_log)\n    * [`ftail`](https://docs.rs/ftail/latest/ftail/)\n* Complex configurable frameworks:\n    * [`log4rs`](https://docs.rs/log4rs/*/log4rs/)\n    * [`logforth`](https://docs.rs/logforth/*/logforth/)\n    * [`fern`](https://docs.rs/fern/*/fern/)\n    * [`spdlog-rs`](https://docs.rs/spdlog-rs/*/spdlog/)\n* Adaptors for other facilities:\n    * [`syslog`](https://docs.rs/syslog/*/syslog/)\n    * [`systemd-journal-logger`](https://docs.rs/systemd-journal-logger/*/systemd_journal_logger/)\n    * [`slog-stdlog`](https://docs.rs/slog-stdlog/*/slog_stdlog/)\n    * [`android_log`](https://docs.rs/android_log/*/android_log/)\n    * [`win_dbg_logger`](https://docs.rs/win_dbg_logger/*/win_dbg_logger/)\n    * [`db_logger`](https://docs.rs/db_logger/*/db_logger/)\n    * [`log-to-defmt`](https://docs.rs/log-to-defmt/*/log_to_defmt/)\n    * [`logcontrol-log`](https://docs.rs/logcontrol-log/*/logcontrol_log/)\n* For WebAssembly binaries:\n    * [`console_log`](https://docs.rs/console_log/*/console_log/)\n* For dynamic libraries:\n    * You may need to construct [an FFI-safe wrapper over `log`](https://github.com/rust-lang/log/issues/421) to initialize in your libraries.\n* Utilities:\n    * [`log_err`](https://docs.rs/log_err/*/log_err/)\n    * [`log-reload`](https://docs.rs/log-reload/*/log_reload/)\n    * [`alterable_logger`](https://docs.rs/alterable_logger/*/alterable_logger)\n\nExecutables should choose a logger implementation and initialize it early in the\nruntime of the program. Logger implementations will typically include a\nfunction to do this. Any log messages generated before the logger is\ninitialized will be ignored.\n\nThe executable itself may use the `log` crate to log as well.\n\n## Structured logging\n\nIf you enable the `kv` feature, you can associate structured data with your log records:\n\n```rust\nuse log::{info, trace, warn};\n\npub fn shave_the_yak(yak: &mut Yak) {\n    // `yak:serde` will capture `yak` using its `serde::Serialize` impl\n    //\n    // You could also use `:?` for `Debug`, or `:%` for `Display`. For a\n    // full list, see the `log` crate documentation\n    trace!(target = \"yak_events\", yak:serde; \"Commencing yak shaving\");\n\n    loop {\n        match find_a_razor() {\n            Ok(razor) => {\n                info!(razor; \"Razor located\");\n                yak.shave(razor);\n                break;\n            }\n            Err(e) => {\n                // `e:err` will capture `e` using its `std::error::Error` impl\n                warn!(e:err; \"Unable to locate a razor, retrying\");\n            }\n        }\n    }\n}\n```\n"
        },
        {
          "name": "benches",
          "type": "tree",
          "content": null
        },
        {
          "name": "rfcs",
          "type": "tree",
          "content": null
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "test_max_level_features",
          "type": "tree",
          "content": null
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        },
        {
          "name": "triagebot.toml",
          "type": "blob",
          "size": 0.0087890625,
          "content": "[assign]\n"
        }
      ]
    }
  ]
}