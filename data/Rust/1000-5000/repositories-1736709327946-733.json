{
  "metadata": {
    "timestamp": 1736709327946,
    "page": 733,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjc0MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "michaelb/sniprun",
      "stars": 1514,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".codecov.yml",
          "type": "blob",
          "size": 0.171875,
          "content": "coverage:\n  status:\n    patch:\n      default:\n        target: auto\n        threshold: 5\n        path: \"src\"\n\n    project:\n      default:\n        target: 50\n        path: \"src\"\n"
        },
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 3.716796875,
          "content": "\n# see https://github.com/CppCXY/EmmyLuaCodeStyle\n[*.lua]\n# [basic]\n\n# optional space/tab\nindent_style = space\n# if indent_style is space, this is valid\nindent_size = 4\n# if indent_style is tab, this is valid\ntab_width = 4\n# none/single/double\nquote_style = none\n\ncontinuation_indent = 4\n## extend option\n# continuation_indent.before_block = 4\n# continuation_indent.in_expr = 4\n# continuation_indent.in_table = 4\n\n# this mean utf8 length , if this is 'unset' then the line width is no longer checked\n# this option decides when to chopdown the code\nmax_line_length = 120\n\n# optional crlf/lf/cr/auto, if it is 'auto', in windows it is crlf other platforms are lf\n# in neovim the value 'auto' is not a valid option, please use 'unset' \nend_of_line = auto\n\n#  none/ comma / semicolon / only_kv_colon\ntable_separator_style = none\n\n#optional keep/never/always/smart\ntrailing_table_separator = keep\n\n# keep/remove/remove_table_only/remove_string_only\ncall_arg_parentheses = keep\n\ndetect_end_of_line = false\n\n# this will check text end with new line\ninsert_final_newline = true\n\n# [space]\nspace_around_table_field_list = true\n\nspace_before_attribute = true\n\nspace_before_function_open_parenthesis = false\n\nspace_before_function_call_open_parenthesis = false\n\nspace_before_closure_open_parenthesis = true\n\n# optional always/only_string/only_table/none\n# or true/false\nspace_before_function_call_single_arg = always\n## extend option\n## always/keep/none\n# space_before_function_call_single_arg.table = always\n## always/keep/none\n# space_before_function_call_single_arg.string = always\n\nspace_before_open_square_bracket = false\n\nspace_inside_function_call_parentheses = false\n\nspace_inside_function_param_list_parentheses = false\n\nspace_inside_square_brackets = false\n\n# like t[#t+1] = 1\nspace_around_table_append_operator = false\n\nignore_spaces_inside_function_call = false\n\n# detail number or 'keep'\nspace_before_inline_comment = 1\n\n# convert '---' to '--- ' or '--' to '-- '\nspace_after_comment_dash = false\n\n# [operator space]\nspace_around_math_operator = true\n# space_around_math_operator.exponent = false\n\nspace_after_comma = true\n\nspace_after_comma_in_for_statement = true\n\n# true/false or none/always/no_space_asym\nspace_around_concat_operator = true\n\nspace_around_logical_operator = true\n\n# true/false or none/always/no_space_asym\nspace_around_assign_operator = true\n\n# [align]\n\nalign_call_args = false\n\nalign_function_params = true\n\nalign_continuous_assign_statement = true\n\nalign_continuous_rect_table_field = true\n\nalign_continuous_line_space = 2\n\nalign_if_branch = false\n\n# option none / always / contain_curly/\nalign_array_table = true\n\nalign_continuous_similar_call_args = false\n\nalign_continuous_inline_comment = true\n# option none / always / only_call_stmt\nalign_chain_expr = none\n\n# [indent]\n\nnever_indent_before_if_condition = false\n\nnever_indent_comment_on_if_branch = false\n\nkeep_indents_on_empty_lines = false\n\nallow_non_indented_comments = false\n# [line space]\n\n# The following configuration supports four expressions\n# keep  \n# fixed(n)   \n# min(n)\n# max(n)\n# for eg. min(2)\n\nline_space_after_if_statement = keep\n\nline_space_after_do_statement = keep\n\nline_space_after_while_statement = keep\n\nline_space_after_repeat_statement = keep\n\nline_space_after_for_statement = keep\n\nline_space_after_local_or_assign_statement = keep\n\nline_space_after_function_statement = fixed(2)\n\nline_space_after_expression_statement = keep\n\nline_space_after_comment = keep\n\nline_space_around_block = fixed(1)\n# [line break]\nbreak_all_list_when_line_exceed = false\n\nauto_collapse_lines = false\n\nbreak_before_braces = false\n\n# [preference]\nignore_space_after_colon = false\n\nremove_call_expression_list_finish_comma = false\n# keep / always / same_line / replace_with_newline / never\nend_statement_with_semicolon = keep\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.1171875,
          "content": "src/interpreters/mod.rs\ntest/\ndownload_dir/\ntarget/\nressources/infofile.txt\ntest_sniprun.log\ndefault.profraw\ndoc/_build\n"
        },
        {
          "name": ".gitmodules",
          "type": "blob",
          "size": 0,
          "content": ""
        },
        {
          "name": "API.md",
          "type": "blob",
          "size": 2.0732421875,
          "content": "# Lua API to sniprun\n\nYou can use sniprun API from:\n\n```lua\n\nlocal sa = require('sniprun.api')\n\n```\n\nthen, some functions are accessible, such as\n\n```\nsa.run_range(r_start, r_end, <filetype>, <config>)\nsa.run_string(codestring, <filetype>, <config>)\n\n```\n\nranges are integers matching the (inclusive) line numbers\n\ncodestring must be a string\n\nfiletype (optional) must be a string such as 'python'\n\nconfig (optional) allows to override the default/user config. It's particularly interesting to provide the display type 'Api' in this field if you wish to retrieve sniprun's output without interference on the user UI.\n\n\nYou can register listeners that will be called upon (async) sniprun output:\n\n\n```\nsa.register_listener(custom_function)\n```\n\nwhere custom function is a function that take one unique argument: a table which contains at least two entries:\n\n - 'status' (a string that's either 'ok' or 'error' for now, but your function should accept & manage other values)\n - 'message' (also a string, maybe be mutliline)\n\n(Simply put, registered functions are callbacks)\n\n\n\n​\n​\n\nThus, an example of such a function (imitating the 'Classic' display with 'uwu' tendencies) would be\n\n```\nlocal api_listener = function (d)\n    if d.status == 'ok' then\n\tprint(\"Nice uwu: \", d.message)\n    elseif d.status == 'error' then\n\tprint(\"Oh nyow! Somethuwuing went wyong: \", d.message)\n    else \n\tprint(\"Whut is this myeow? I don't knyow this status type nyah\")\n    end\nend\n\nsa.register_listener(api_listener)\n```\n\n(You must also enable the 'Api' display option, and in this particular case where things are printed to the command line area, disabling 'Classic' is recommended)\n\n​\n\nIf your function requires to be manually closed (on `SnipClose`), you can register a closer the same way:\n\n```\nsa.register_closer(custom_function)\n```\n\n\n## Warnings\n\nBeware, sniprun is still thightly coupled to the current nvim buffer & instance, but there should not be dependencies for non-REPL, and interpreters running under Bloc-Level. \n\nREPL-capable and Import level (or more) interpreter may fetch information from the current buffer\n    \n\n\n"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 7.734375,
          "content": "## v1.3.16\n- Fix nvim-notify timeout and add render style option\n- Filter ANSI escape code by default\n\n## v1.3.15\n- Add PlantUML support (ascii output)\n- Basic user input support\n- SQL support\n\n## v1.3.14\n- Improve Lua\\_nvim's handling of 'local' requires in REPL mode\n\n## v1.3.13\n- Support Python import list syntax\n\n## v1.3.12\n- More universally-working shebang in scripts\n- Use Lua api to set highlights in a more extensible way (courtesy of @pwnalone)\n\n## v1.3.11\n- Support compiler flags for C++ (courtesy of @jonathanffon) and all other languages\n- Scripts use \\cat instead of /bin/cat (courtesy of @GaetanLepage)\n\n## v1.3.10\n- Fix missing documentation in the online wiki\n- Fix interpreters broken when they were not explicitely the default for their filetype\n- Remove buggy terminal_persistence option\n\n## v1.3.9\n- Support of \"interpreter\" and \"compiler\" key for every interpreter\n- Bun-based JS/TS intepreter (with REPL)\n\n## v1.3.8\n- Fix Python3_jupyter\n- Allow opening terminal in horizontal split\n- Compiles locally by default (when on dev branch)\n\n## v1.3.7\n- Fix issue in multiple languages when last line is a comment\n- Install instructions for lazy.nvim/Lunarvim\n- MSRV increase to 1.65\n- Bash interpreter fix + REPL feature removal\n- API's run_string function can display virtual text at current cursor position\n- HTTP support (using ureq)\n\n## v1.3.6\n- Ruby documentation\n- Fix deprecating checkhealth\n- Fix install script breaking under certain conditions\n\n## v1.3.5\n- MSRV increase to 1.60\n- Improve MacOS detection\n\n## v1.3.4\n- SnipInfo fixes\n\n## v1.3.3\n- POSIX-compliant install script\n- Install script does not hide stdout/err anymore\n\n## v1.3.2\n- Quality-of-life fixes courtesy of @zhengpd\n- Keep terminal display open by default\n\n## v1.3.1\n- Fix SnipInfo on some Mac\n- Fix :help sniprun\n\n## v1.3.0\n- Compatibility with virtually **any** language through a revamped generic interpreter\n- OCaml official support (bloc-level, REPL)\n- Misc coding style improvements\n\n## v1.2.13\n- Fix broken snipinfo on NixOS\n- Document install on NixOS\n\n## v1.2.12\n- Fix (broken) SnipLive\n\n## v1.2.11\n- Fix python3_fifo issue with try/catch\n- Fix deno's REPL ANSI color code appearing in result\n\n## v1.2.10\n- Neorg support\n- Support for named code blocs (neorg, orgmode)\n- Allow setting custom locations for the sniprun binary\n\n## v1.2.9\n- Elixir support (with REPL capabilities)\n- C# support\n- \"--project\"-aware Julia interpreter\n- Fixed Julia REPL capabilities (fifo in Julia_original, in addition to Julia_jupyter)\n\n## v1.2.8\n- Remove SnipTerminate\n- Python_fifo3 fixes for indentation issues\n- HTML doc deployed from github pages\n- Composable/filterable display options\n- Different display modes for live mode\n\n## v1.2.7\n- Fix bug where the display configuration was overwritten by live mode activation\n- Fix bug where REPL interpreter would get instantly stopped on MacOS\n- Mark SnipTerminate for deprecation, will be removed in a future release\n- Narrower and aligned SnipInfo\n\n## v1.2.6\n- Clojure support (REPL-capable)\n- Improved & simplified CI\n- \"Import\" support level for Go\n\n## v1.2.5\n- SnipInfo in floating windows and decently fast\n- Auto + configurable error truncation\n- Lua_nvim REPL/non-REPL modes\n\n## v1.2.4\n- Set Rust 1.55 as MSRV\n- Fix typo in documentation\n\n## v1.2.3\n- No signcolumn in Terminal display + fix line wrapping\n\n## v1.2.2\n- Run multiple code blocs at once in markup languages\n- Fix multiline display for nvim-notify\n\n## v1.2.1\n- F# support\n- Fix multiline display in floating windows\n- Deno brings REPL support for Javascript and TypeScript\n\n## v1.2\n- Live mode (a @ChristianChiarulli idea and partial realisation)\n- Lower ressources usage for REPL interpreters\n\n## v1.1.2\n- Auto detection of entry point for many languages\n- CFLAGS and other variables\n- Python3\\_fifo plots work\n\n## v1.1.1\n- Fix terminal display issues\n- Configurable display options\n\n## v1.1.0\n- TerminalWithCode display option (courtesy of @control13)\n- Fix default interpreter issue\n- Python3\\_fifo venv support + doc + fix indented bloc failure\n\n## v1.0.6\n- Fix output with escape sequences\n\n## v1.0.5\n- Fix issue with REPL interpreters staying active after nvim exit\n- Isolate backend REPL from different neovim instances\n\n## v1.0.4\n- Fix python3 fifo and sage interpreters empty line in indented bloc bug\n\n## v1.0.3\n- Configurable filetypes\n\n## v1.0.2\n- Fix issue with API functions & callbacks\n- Fix double checkhealt crash issue\n\n## v1.0.1\n- Fix issue when using sniprun with an empty config\n\n## v1.0.0\n- LCOV coverage\n- Many (non inherently REPL) interpreters accept cli arguments when invoked from `:%SnipRun <args>`\n- Deperecate vimscript configuration\n- Update documentation, README and example\n\n## v0.5.10-orgmodepatch\n- orgmode fixes (indented blocks)\n\n## v0.5.10 \n- SageMath & orgmode support\n- API\n- nvim-notify display method\n\n## v0.5.9\n- TypeScript support\n- Better README & example.rs\n- Import level for Python3\\_fifo\n\n\n## v0.5.8\n- Mathematica support\n- FIFO - based REPL works ok (Mathematica, Python)!\n- Better help/snipinfo formatting\n\n\n## v0.5.7\n- Julia jupyter interpreter is up (though a bit complicated to setup)\n- Configurable windows borders\n\n\n## v0.5.6\n- Automated publish system by github actions\n- Binary now compatible with pre-GLIBC 2.33 systems\n\n\n## v0.5.5\n- Configurable colors\n- Use current buffer instead of save files for import level\n\n\n## v0.5.4\n- Support configuring compiler, interpreter or venv (python)\n- Fine-tune display modes + highlight\n- Better namespace management for C++ (courtesy of Dan Green)\n- Ping binary to check compatibility\n- Fix major bug with download system\n\n\n## v0.5.3\n- Display results in \"Classic', \"VirtualText\", \"Floating Windows\", and \"Terminal\" mode\n- Checkhealth pings binary to check compatibility\n- Official Mac (incl. M1) support\n- Fix for the AUR packaged version\n\n\n## v0.5.2\n- Ada and Scala interpreters\n- Operator mode, courtesy of @DarwinSenior\n- Julia REPL via jupyter kernel\n- Compatibility fix for nvim 0.4.x (will miss out on features >= sniprun v0.4.9)\n\n\n## v0.5.1 \n- Markdown interpreter\n- Better :SnipInfo\n- SnipInfo \\<name> now display the help file in doc/\n\n## v0.5.0\n- Sniprun becomes a Lua (+Rust) plugin!!\n- Lua backend, config, and checkhealth\n- Fully backward compatible with old configs\n- Old 'vroom' framework deprecated\n\n\n## v0.4.9\n- inline_message functionnality\n\n\n## v0.4.8\n- More complete test pipeline\n- C++ & C upgrade to support level Import\n- Social preview and various assets\n- checkhealth\n\n\n## v0.4.7\n- the first useful vroom tests\n- Fix the bug where the channel would broke and the terminate function had a typo\n- Compilation error messages (nicely truncated) for C and Rust\n\n\n## v0.4.6\n- Remove 'cc' dependency which caused issues with precompiled GLIBC\n- a lot of unit tests, and complete CI pipeline\n- vroom framework for integration test ?\n\n\n## v0.4.5\n- Plug mappings + vim-repeat support\n- Trailing characters fix\n- SnipInfo centralize all the information, better help\n\n\n## v0.4.4\n- Jupyter kernel available in Python3_jupyter !\n- fixes a bug in Python3_original that imported too much modules\n- improved README\n- first tests in CI pipeline\n\n\n## v0.4.3\n- Rust interpreter and example now have tests\n- Julia interpreter\n- example.rs interpreter\n\n\n## v0.4.1\n- VimL config options\n- REPL for R and Bash\n\n\n## v0.4.2\n- Better release download system\n- More complete CONTRIBUTING.md & revamped README\n- Github Action & build passing badge\n\n\n## v0.4.0\n- Go, C++, Ruby, Haskell interpreter\n- REPL-like behavior for the first time (Python)\n\n\n## v0.3.1\n- First tag release / MVP\n- Lua, C, Python, Rust, Bash, Java, Javascript and many more languages are supported\n- Lua_nvim interpreter, courtesy of @vigoux, the first external contributor\n- Comprehensive doc and readme\n- First interpreter (Python) gets Import support level\n- Generic interpreter\n\n\n\n## Initial commit\n- Sniprun development started on 17 Aug 2020\n"
        },
        {
          "name": "CHECKLIST.md",
          "type": "blob",
          "size": 1.0888671875,
          "content": "# External contributions\n - only accept contributions to 'dev' branch OR release immediately after\n (doc contribution can be exempted)\n\n# Prepare the release\n\n## on dev branch\n - check compilation success\n - cargo fmt --all / cargo check / cargo clippy\n - update the changelog\n - remove the 'beta' from the version field in Cargo.toml\n - `cargo update --offline` # update sniprun's version in committed Cargo.lock\n\n## Merge process\n - create a PR dev -> master\n - merge\n\n## Post-merge (tag creation and push MUST be done one after the other!! DON'T add a commit in the meantime)\n\n - git pull the changes in master\n - create a new SIGNED tag vX.Y.Z on master: `git tag -s v8.9.5` (tag message should be equal to tag number, eg: v8.9.5)\n - verify the signed tag: `git tag -v v8.9.5`\n - git push origin vX.Y.Z\n\n - merge master in dev\n - Bump Cargo.toml to next version on dev, suffixed by 'beta'\n\n# When the tag gets pushed, the 'release' github action will automatically add the new tag to GitHub's 'Releases'\n\n# Check the release\n\n - Check CI status\n - Check Releases status\n - Edit release description if necessary\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 9.490234375,
          "content": "# Welcome to the contributing page\n\nEvery contribution is welcome, though please mind that Pull Requests should point to the `dev` branch, **not** the `master` branch, which ought to be as stable and synchronized with the released binary as possible.\n\n## Getting started\n\nJust in case: to compile `cargo build --release`, to create and show the documentation, `cargo doc --open` ( open target/doc/sniprun/index.html from your browser if not automatic).\n\n## Add support for a new language language\n\nFirst, you should try out to configure the [Generic interpreter](https://michaelb.github.io/sniprun/sources/interpreters/Generic.html#community-examples-for-non-officially-supported-languages). Someone may have figured it out already!\n\nIf you succeed in doing so yourself, please contribute to that page so other may benefit from it!\n\nOtherwise, carry on:\n\n### How hard it is?\n\nLemon squeezy easy. A developer midly familiar with Rust and the language to add support for can write a working bloc-support interpreter in 30min ( 13min is my best time, for C\\_original to 1h30. You can then submit your proposed changes as a PR to the master branch.\n\nHigher support levels gets exponentially harder (depends on the languages though), so you should start out with Bloc. You don't need to mind to support levels, actually.\n\n### Understanding the framework\n\nWhat do I write, and where?\n\n-> You only have to write a file in src/interpreters/ that has the name of the interpreter, by convention; \\<language\\_name\\>\\_\\<differentiator\\>.rs\n\n---\n\nYeah cool but what _code_ goes inside?\n\n-> Inside, you must define a struct that implement the **Interpreter** trait. Have a look at existing implementations to get the idea, though some current interpreters use pretty advanced features of Sniprun that you may not want to deal with. Prefer looking at 'Bloc' level support interpreters for a smooth start. Make sure to respect the [conventions](#conventions). The \"example.rs\" interpreter is a good starting point, with more comments to help you understand what's happening.\n\n---\nI just finished some changes, how do I test my code quickly?\n\n-> compile `cargo build --release` and run  `nvim --noplugin -c 'setlocal rtp+=.' <filename>`, then inside neovim `:lua require(\"sniprun\").setup()` from the sniprun project root. You may want to remove the 'release' sniprun from your plugin manager in case your runtimepath (rtp) still loads up the release version instead of your development version. Alternatively, point your plugin manager to your dev directory.\n\n---\n\nIs _my_ code running?\n\n-> Assert that the file type detected by Neovim is contained in your list of supported file types. If there is already a implementation for your filetype/language, set (temporarily) your max support level to \"Selected\", or run something like `:lua require'sniprun'.setup({selected_interpreters = {'<name>'}})` before `:SnipRun` . `SnipInfo` will then tell you what interpreter will be used on an opened file.\n\n---\n\nI need to debug, how ?\n\n-> Use the `info!(\"here\")` macro instead of `println!(\"here\")`. This writes to the log file you can find in ~/.cache/sniprun/sniprun.log (or ~/Library/Caches/sniprun/sniprun.log on Mac). Beware, if you panic, the logger will stop writing.\n\n---\n\nCan I panic!() ?\n\n-> Yes but preferably only when you encounter a fatal error (eg: you have to write a file, but there is no space left on the device).\nFailing user code compilation or incorrect user code panicking should be handled via the SniprunError enum.\n\n---\n\nMy interpreter does not produce any output..?!\n\n-> It's probably because your code is panicking. (unwrapping a `None` or these kind of things). Check the logs at ~/.cache/sniprun/sniprun.log for any interruption, and see where your code can panic! .\n\n---\n\nI need to import some external dependencies.\n\n-> Add what you need to the src/interpreters/import.rs file, and the Cargo.toml if necessary.\n\n---\n\nI need more than one file to write complicated code...\n\n-> You can have a subfolder alongside your file (same name to prevent confusion and conflicts) and put some other code inside as you see fit. As runtime/temporary files stands, see the example.rs file: inside your work\\_dir, you are free to do whatever you want\\*. (\\* don't be evil)\n\n---\n\nDo I need to manage async running and compiling?\n\n-> No, Sniprun takes care of that for you. You can implement a single-threaded synchronous code just like the D\\_original interpreter.\n\n---\n\nMy interpreter has some quirks that the end user should know\n\n-> Document limitations and features in doc/interpreter\\_name.md .\n\n---\n\nI lack the ReplLikeInterpreter trait implementation and don't want to do REPL-like behavior:\n\n-> You don't have to do it but the boilerplate `impl ReplLikeInterpreter for MyInterpreter {}` is required. You can overwrite the default implementation later if you wish to do some REPL-like functionality.\n\n\n---\nMy tests are inconsistent ..?!?\n\n-> Rust tests are run in parallel, and therefore a race condition may occur when writing to files and compiling.\nRun with `cargo test -- --test-threads=1` or use the #[serial] attribute which you will probably need to pass the CI pipeline anyway.\n\n---\nMy tests fail in the CI pipeline\n\n-> The CI has limited capabilities, especially about the REPL functionality. Tag your non-working-in-CI tests with '#[cfg\\_attr(feature = \"ignore\\_in\\_ci\", ignore)]'\n\n---\nI think I've done a good job, but am I ready to submit a PR?\n\n-> You should check beforehand that the output of `cargo test --release` and your own tests are satisfying. You've added the proper and necessary tests, and have documented any edge case in doc/.\n\n--- \nREPL - based ?\nPython3\\_fifo has a pipe (UNIX fifo) - based ReplLikeInterpreter implementation, that may be useful if your language has an interpreter with proper stdio support. See [CONTRIBUTING\\_REPL.md](ressources/CONTRIBUTING_REPL.md) for more info.\n\n### What's the deal with...\n\n- Support Levels? Those exists to document what the interpreter supports to the end user. They are also used for higher (file, project and system) levels as if an interpreter detects it does not need a support level that high, it can set down its own level and hopefully be faster [ since it won't need to open all files etc...]. **You don't have to worry about this too much if you are just getting started**.\n\n- Errors? When possible and sensible, functions like fetch(), build() and execute() should return either an Ok(\\_) variant or a Err(SniprunError). Choose the error that most closely describe whatever might cause your function to fail, and populate it with a String message if relevant.\n\n* The imposed names? To simplify contribution (you only have to write a interpreter), the main program fetch new files and run functions of your interpreter. This is only easily possible if you types names match your file name, as I can get those easily but i would have to read them, guess what struct is the correct one should you have many....no, I rather do the `use file_name::file_name;` trick that just works. Also helps future contributors/users.\n\n### Conventions\n\nA program (struct with methods) that can fetch code, execute it and return the result is called an interpreter.\n\n- The interpreter main file is named \\<Language\\_name\\>\\_\\<Differentiator\\>.rs; for example \"Python3\\_Lsp.rs\", case-independent.\n- The interpreter main file contains a struct has the **exact same name** as the file (minus the .rs extension).\n- Names for interpreters should be unique. Include filenames, and also the name returned by `get_name()` that should be identical (case difference is tolerated).\n- Extra files for the same interpreter go into a subdfolder alongside the interpreter's main file. The subfolder has the same name as the file, minus the extension.\n- The interpreter tries to follow (and create by itself) SupportLevel hints when possible; for example, will not try to parse an entire project into when it has been determined SupportLevel::Line is enough to run the submitted code. Don't worry if you don't get this yet for your first bloc-level contribution.\n- The interpreter should try not to panic, it'll be nicer if the various errors can be converted and returned as SniprunError as defined in src/error.rs and suggested by the Interpreter trait\n\n## Contribute to Sniprun itself\n\nWell you are welcome to submit a PR, as long as you mind those points:\n\n- Your changes do not break any interpreter, even partially.\n- If needed (eg for when your changes touches a core part of Sniprun such as the DataHolder), you have tested your changes with every interpreter (or the CI pipeline did).\n\n## Sniprun Mindset\n\nTo pay attention to, when writing an interpreter or changes:\n\n- **Minimum code retrieval** : Sniprun should only fetch from the buffer/file the bare minimum necessary to get working.\n- **Allow snips from incomplete files** : if you need to read a bigger part of the file than the data provided by sniprun (in DataHolder), you should NOT fail because the file miss a '}' 35 lines after the code snip.\n- **IO optimization** : it's OK if you write 3 files each time sniprun fires. It's not OK if you re-index a whole project and write a 50Mo file. Overall this is a pretty relaxed rule, as most code sent to sniprun (to then write etc...) is very short, a few lines at most.\n- **Code clarity** : at least comments for non-trivial parts, 'good code' is given value even if I get, and did that myself, than sometimes dirty hacks are necessary.\n- **Documentation** : not extensively required, but limitations and subtilities, if any, of your interpreter should be written a the doc/interpreter_name.md file: that will be accessible through :SnipInfo [name] this way!\n"
        },
        {
          "name": "Cargo.lock",
          "type": "blob",
          "size": 30.6279296875,
          "content": "# This file is automatically @generated by Cargo.\n# It is not intended for manual editing.\nversion = 3\n\n[[package]]\nname = \"addr2line\"\nversion = \"0.24.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f5fb1d8e4442bd405fdfd1dacb42792696b0cf9cb15882e5d097b742a676d375\"\ndependencies = [\n \"gimli\",\n]\n\n[[package]]\nname = \"adler2\"\nversion = \"2.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"512761e0bb2578dd7380c6baaa0f4ce03e84f95e960231d1dec8bf4d7d6e2627\"\n\n[[package]]\nname = \"aho-corasick\"\nversion = \"1.1.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8e60d3430d3a69478ad0993f19238d2df97c507009a52b3c10addcd7f6bcb916\"\ndependencies = [\n \"memchr\",\n]\n\n[[package]]\nname = \"autocfg\"\nversion = \"1.3.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"0c4b4d0bd25bd0b74681c0ad21497610ce1b7c91b1022cd21c80c6fbdd9476b0\"\n\n[[package]]\nname = \"backtrace\"\nversion = \"0.3.74\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8d82cb332cdfaed17ae235a638438ac4d4839913cc2af585c3c6746e8f8bee1a\"\ndependencies = [\n \"addr2line\",\n \"cfg-if 1.0.0\",\n \"libc\",\n \"miniz_oxide\",\n \"object\",\n \"rustc-demangle\",\n \"windows-targets 0.52.6\",\n]\n\n[[package]]\nname = \"base64\"\nversion = \"0.22.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"72b3254f16251a8381aa12e40e3c4d2f0199f8c6508fbecb9d91f575e0fbb8c6\"\n\n[[package]]\nname = \"bitflags\"\nversion = \"2.6.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b048fb63fd8b5923fc5aa7b340d8e156aec7ec02f0c78fa8a6ddc2613f6f71de\"\n\n[[package]]\nname = \"byteorder\"\nversion = \"1.5.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1fd0f2584146f6f2ef48085050886acf353beff7305ebd1ae69500e27c67f64b\"\n\n[[package]]\nname = \"bytes\"\nversion = \"1.7.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8318a53db07bb3f8dca91a600466bdb3f2eaadeedfdbcf02e1accbad9271ba50\"\n\n[[package]]\nname = \"cc\"\nversion = \"1.1.18\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b62ac837cdb5cb22e10a256099b4fc502b1dfe560cb282963a974d7abd80e476\"\ndependencies = [\n \"shlex\",\n]\n\n[[package]]\nname = \"cfg-if\"\nversion = \"0.1.10\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"4785bdd1c96b2a846b2bd7cc02e86b6b3dbf14e7e53446c4f54c92a361040822\"\n\n[[package]]\nname = \"cfg-if\"\nversion = \"1.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"baf1de4339761588bc0619e3cbc0120ee582ebb74b53b4efbf79117bd2da40fd\"\n\n[[package]]\nname = \"close_fds\"\nversion = \"0.3.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3bc416f33de9d59e79e57560f450d21ff8393adcf1cdfc3e6d8fb93d5f88a2ed\"\ndependencies = [\n \"cfg-if 1.0.0\",\n \"libc\",\n]\n\n[[package]]\nname = \"core-foundation\"\nversion = \"0.9.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"91e195e091a93c46f7102ec7818a2aa394e1e1771c3ab4825963fa03e45afb8f\"\ndependencies = [\n \"core-foundation-sys\",\n \"libc\",\n]\n\n[[package]]\nname = \"core-foundation-sys\"\nversion = \"0.8.7\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"773648b94d0e5d620f64f280777445740e61fe701025087ec8b57f45c791888b\"\n\n[[package]]\nname = \"crc32fast\"\nversion = \"1.4.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a97769d94ddab943e4510d138150169a2758b5ef3eb191a9ee688de3e23ef7b3\"\ndependencies = [\n \"cfg-if 1.0.0\",\n]\n\n[[package]]\nname = \"dashmap\"\nversion = \"5.5.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"978747c1d849a7d2ee5e8adc0159961c48fb7e5db2f06af6723b80123bb53856\"\ndependencies = [\n \"cfg-if 1.0.0\",\n \"hashbrown\",\n \"lock_api\",\n \"once_cell\",\n \"parking_lot_core\",\n]\n\n[[package]]\nname = \"dirs\"\nversion = \"5.0.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"44c45a9d03d6676652bcb5e724c7e988de1acad23a711b5217ab9cbecbec2225\"\ndependencies = [\n \"dirs-sys\",\n]\n\n[[package]]\nname = \"dirs-sys\"\nversion = \"0.4.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"520f05a5cbd335fae5a99ff7a6ab8627577660ee5cfd6a94a6a929b52ff0321c\"\ndependencies = [\n \"libc\",\n \"option-ext\",\n \"redox_users\",\n \"windows-sys 0.48.0\",\n]\n\n[[package]]\nname = \"flate2\"\nversion = \"1.0.33\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"324a1be68054ef05ad64b861cc9eaf1d623d2d8cb25b4bf2cb9cdd902b4bf253\"\ndependencies = [\n \"crc32fast\",\n \"miniz_oxide\",\n]\n\n[[package]]\nname = \"fnv\"\nversion = \"1.0.7\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3f9eec918d3f24069decb9af1554cad7c880e2da24a9afd88aca000531ab82c1\"\n\n[[package]]\nname = \"form_urlencoded\"\nversion = \"1.2.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e13624c2627564efccf4934284bdd98cbaa14e79b0b5a141218e507b3a823456\"\ndependencies = [\n \"percent-encoding\",\n]\n\n[[package]]\nname = \"futures\"\nversion = \"0.3.30\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"645c6916888f6cb6350d2550b80fb63e734897a8498abe35cfb732b6487804b0\"\ndependencies = [\n \"futures-channel\",\n \"futures-core\",\n \"futures-executor\",\n \"futures-io\",\n \"futures-sink\",\n \"futures-task\",\n \"futures-util\",\n]\n\n[[package]]\nname = \"futures-channel\"\nversion = \"0.3.30\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"eac8f7d7865dcb88bd4373ab671c8cf4508703796caa2b1985a9ca867b3fcb78\"\ndependencies = [\n \"futures-core\",\n \"futures-sink\",\n]\n\n[[package]]\nname = \"futures-core\"\nversion = \"0.3.30\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"dfc6580bb841c5a68e9ef15c77ccc837b40a7504914d52e47b8b0e9bbda25a1d\"\n\n[[package]]\nname = \"futures-executor\"\nversion = \"0.3.30\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a576fc72ae164fca6b9db127eaa9a9dda0d61316034f33a0a0d4eda41f02b01d\"\ndependencies = [\n \"futures-core\",\n \"futures-task\",\n \"futures-util\",\n]\n\n[[package]]\nname = \"futures-io\"\nversion = \"0.3.30\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a44623e20b9681a318efdd71c299b6b222ed6f231972bfe2f224ebad6311f0c1\"\n\n[[package]]\nname = \"futures-sink\"\nversion = \"0.3.30\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"9fb8e00e87438d937621c1c6269e53f536c14d3fbd6a042bb24879e57d474fb5\"\n\n[[package]]\nname = \"futures-task\"\nversion = \"0.3.30\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"38d84fa142264698cdce1a9f9172cf383a0c82de1bddcf3092901442c4097004\"\n\n[[package]]\nname = \"futures-util\"\nversion = \"0.3.30\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3d6401deb83407ab3da39eba7e33987a73c3df0c82b4bb5813ee871c19c41d48\"\ndependencies = [\n \"futures-channel\",\n \"futures-core\",\n \"futures-io\",\n \"futures-sink\",\n \"futures-task\",\n \"memchr\",\n \"pin-project-lite\",\n \"pin-utils\",\n \"slab\",\n]\n\n[[package]]\nname = \"getrandom\"\nversion = \"0.2.15\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"c4567c8db10ae91089c99af84c68c38da3ec2f087c3f82960bcdbf3656b6f4d7\"\ndependencies = [\n \"cfg-if 1.0.0\",\n \"libc\",\n \"wasi\",\n]\n\n[[package]]\nname = \"gimli\"\nversion = \"0.31.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"32085ea23f3234fc7846555e85283ba4de91e21016dc0455a16286d87a292d64\"\n\n[[package]]\nname = \"hashbrown\"\nversion = \"0.14.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e5274423e17b7c9fc20b6e7e208532f9b19825d82dfd615708b70edd83df41f1\"\n\n[[package]]\nname = \"http\"\nversion = \"0.2.12\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"601cbb57e577e2f5ef5be8e7b83f0f63994f25aa94d673e54a92d5c516d101f1\"\ndependencies = [\n \"bytes\",\n \"fnv\",\n \"itoa\",\n]\n\n[[package]]\nname = \"http-rest-file\"\nversion = \"0.5.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"92d2f9d7798b724494ce3c33694afb86fb67bc33bcd03877c6f38953a180c05f\"\ndependencies = [\n \"http\",\n \"regex\",\n \"serde\",\n \"serde_json\",\n \"thiserror\",\n \"url\",\n]\n\n[[package]]\nname = \"idna\"\nversion = \"0.5.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"634d9b1461af396cad843f47fdba5597a4f9e6ddd4bfb6ff5d85028c25cb12f6\"\ndependencies = [\n \"unicode-bidi\",\n \"unicode-normalization\",\n]\n\n[[package]]\nname = \"itoa\"\nversion = \"1.0.11\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"49f1f14873335454500d59611f1cf4a4b0f786f9ac11f4312a78e4cf2566695b\"\n\n[[package]]\nname = \"lazy_static\"\nversion = \"1.5.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"bbd2bcb4c963f2ddae06a2efc7e9f3591312473c50c6685e1f298068316e66fe\"\n\n[[package]]\nname = \"libc\"\nversion = \"0.2.158\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d8adc4bb1803a324070e64a98ae98f38934d91957a99cfb3a43dcbc01bc56439\"\n\n[[package]]\nname = \"libredox\"\nversion = \"0.1.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"c0ff37bd590ca25063e35af745c343cb7a0271906fb7b37e4813e8f79f00268d\"\ndependencies = [\n \"bitflags\",\n \"libc\",\n]\n\n[[package]]\nname = \"lock_api\"\nversion = \"0.4.12\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"07af8b9cdd281b7915f413fa73f29ebd5d55d0d3f0155584dade1ff18cea1b17\"\ndependencies = [\n \"autocfg\",\n \"scopeguard\",\n]\n\n[[package]]\nname = \"log\"\nversion = \"0.4.22\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a7a70ba024b9dc04c27ea2f0c0548feb474ec5c54bba33a7f72f873a39d07b24\"\n\n[[package]]\nname = \"log-panics\"\nversion = \"2.1.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"68f9dd8546191c1850ecf67d22f5ff00a935b890d0e84713159a55495cc2ac5f\"\ndependencies = [\n \"backtrace\",\n \"log\",\n]\n\n[[package]]\nname = \"memchr\"\nversion = \"2.7.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"78ca9ab1a0babb1e7d5695e3530886289c18cf2f87ec19a575a0abdce112e3a3\"\n\n[[package]]\nname = \"miniz_oxide\"\nversion = \"0.8.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e2d80299ef12ff69b16a84bb182e3b9df68b5a91574d3d4fa6e41b65deec4df1\"\ndependencies = [\n \"adler2\",\n]\n\n[[package]]\nname = \"neovim-lib\"\nversion = \"0.6.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d6a8f5a1e1be160ce2b669c2c495a34ade6f3a525d4afafd7370c1792070f587\"\ndependencies = [\n \"log\",\n \"rmp\",\n \"rmpv\",\n \"unix_socket\",\n]\n\n[[package]]\nname = \"num-traits\"\nversion = \"0.2.19\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"071dfc062690e90b734c0b2273ce72ad0ffa95f0c74596bc250dcfd960262841\"\ndependencies = [\n \"autocfg\",\n]\n\n[[package]]\nname = \"object\"\nversion = \"0.36.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"084f1a5821ac4c651660a94a7153d27ac9d8a53736203f58b31945ded098070a\"\ndependencies = [\n \"memchr\",\n]\n\n[[package]]\nname = \"once_cell\"\nversion = \"1.20.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"33ea5043e58958ee56f3e15a90aee535795cd7dfd319846288d93c5b57d85cbe\"\n\n[[package]]\nname = \"openssl-probe\"\nversion = \"0.1.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ff011a302c396a5197692431fc1948019154afc178baf7d8e37367442a4601cf\"\n\n[[package]]\nname = \"option-ext\"\nversion = \"0.2.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"04744f49eae99ab78e0d5c0b603ab218f515ea8cfe5a456d7629ad883a3b6e7d\"\n\n[[package]]\nname = \"parking_lot\"\nversion = \"0.12.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f1bf18183cf54e8d6059647fc3063646a1801cf30896933ec2311622cc4b9a27\"\ndependencies = [\n \"lock_api\",\n \"parking_lot_core\",\n]\n\n[[package]]\nname = \"parking_lot_core\"\nversion = \"0.9.10\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1e401f977ab385c9e4e3ab30627d6f26d00e2c73eef317493c4ec6d468726cf8\"\ndependencies = [\n \"cfg-if 1.0.0\",\n \"libc\",\n \"redox_syscall 0.5.4\",\n \"smallvec\",\n \"windows-targets 0.52.6\",\n]\n\n[[package]]\nname = \"percent-encoding\"\nversion = \"2.3.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e3148f5046208a5d56bcfc03053e3ca6334e51da8dfb19b6cdc8b306fae3283e\"\n\n[[package]]\nname = \"pin-project-lite\"\nversion = \"0.2.14\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"bda66fc9667c18cb2758a2ac84d1167245054bcf85d5d1aaa6923f45801bdd02\"\n\n[[package]]\nname = \"pin-utils\"\nversion = \"0.1.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8b870d8c151b6f2fb93e84a13146138f05d02ed11c7e7c54f8826aaaf7c9f184\"\n\n[[package]]\nname = \"proc-macro2\"\nversion = \"1.0.86\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"5e719e8df665df0d1c8fbfd238015744736151d4445ec0836b8e628aae103b77\"\ndependencies = [\n \"unicode-ident\",\n]\n\n[[package]]\nname = \"quote\"\nversion = \"1.0.37\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b5b9d34b8991d19d98081b46eacdd8eb58c6f2b201139f7c5f643cc155a633af\"\ndependencies = [\n \"proc-macro2\",\n]\n\n[[package]]\nname = \"redox_syscall\"\nversion = \"0.1.57\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"41cc0f7e4d5d4544e8861606a285bb08d3e70712ccc7d2b84d7c0ccfaf4b05ce\"\n\n[[package]]\nname = \"redox_syscall\"\nversion = \"0.5.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"0884ad60e090bf1345b93da0a5de8923c93884cd03f40dfcfddd3b4bee661853\"\ndependencies = [\n \"bitflags\",\n]\n\n[[package]]\nname = \"redox_users\"\nversion = \"0.4.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ba009ff324d1fc1b900bd1fdb31564febe58a8ccc8a6fdbb93b543d33b13ca43\"\ndependencies = [\n \"getrandom\",\n \"libredox\",\n \"thiserror\",\n]\n\n[[package]]\nname = \"regex\"\nversion = \"1.10.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"4219d74c6b67a3654a9fbebc4b419e22126d13d2f3c4a07ee0cb61ff79a79619\"\ndependencies = [\n \"aho-corasick\",\n \"memchr\",\n \"regex-automata\",\n \"regex-syntax\",\n]\n\n[[package]]\nname = \"regex-automata\"\nversion = \"0.4.7\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"38caf58cc5ef2fed281f89292ef23f6365465ed9a41b7a7754eb4e26496c92df\"\ndependencies = [\n \"aho-corasick\",\n \"memchr\",\n \"regex-syntax\",\n]\n\n[[package]]\nname = \"regex-syntax\"\nversion = \"0.8.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"7a66a03ae7c801facd77a29370b4faec201768915ac14a721ba36f20bc9c209b\"\n\n[[package]]\nname = \"ring\"\nversion = \"0.17.8\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"c17fa4cb658e3583423e915b9f3acc01cceaee1860e33d59ebae66adc3a2dc0d\"\ndependencies = [\n \"cc\",\n \"cfg-if 1.0.0\",\n \"getrandom\",\n \"libc\",\n \"spin\",\n \"untrusted\",\n \"windows-sys 0.52.0\",\n]\n\n[[package]]\nname = \"rmp\"\nversion = \"0.8.8\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"0f594cb7ff8f1c5a7907f6be91f15795c8301e0d5718eb007fb5832723dd716e\"\ndependencies = [\n \"byteorder\",\n \"num-traits\",\n]\n\n[[package]]\nname = \"rmpv\"\nversion = \"0.4.7\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"7c760afe11955e16121e36485b6b828326c3f0eaff1c31758d96dbeb5cf09fd5\"\ndependencies = [\n \"num-traits\",\n \"rmp\",\n \"serde\",\n \"serde_bytes\",\n]\n\n[[package]]\nname = \"rustc-demangle\"\nversion = \"0.1.24\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"719b953e2095829ee67db738b3bfa9fa368c94900df327b3f07fe6e794d2fe1f\"\n\n[[package]]\nname = \"rustls\"\nversion = \"0.23.13\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f2dabaac7466917e566adb06783a81ca48944c6898a1b08b9374106dd671f4c8\"\ndependencies = [\n \"log\",\n \"once_cell\",\n \"ring\",\n \"rustls-pki-types\",\n \"rustls-webpki\",\n \"subtle\",\n \"zeroize\",\n]\n\n[[package]]\nname = \"rustls-native-certs\"\nversion = \"0.7.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e5bfb394eeed242e909609f56089eecfe5fda225042e8b171791b9c95f5931e5\"\ndependencies = [\n \"openssl-probe\",\n \"rustls-pemfile\",\n \"rustls-pki-types\",\n \"schannel\",\n \"security-framework\",\n]\n\n[[package]]\nname = \"rustls-pemfile\"\nversion = \"2.1.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"196fe16b00e106300d3e45ecfcb764fa292a535d7326a29a5875c579c7417425\"\ndependencies = [\n \"base64\",\n \"rustls-pki-types\",\n]\n\n[[package]]\nname = \"rustls-pki-types\"\nversion = \"1.8.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"fc0a2ce646f8655401bb81e7927b812614bd5d91dbc968696be50603510fcaf0\"\n\n[[package]]\nname = \"rustls-webpki\"\nversion = \"0.102.8\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"64ca1bc8749bd4cf37b5ce386cc146580777b4e8572c7b97baf22c83f444bee9\"\ndependencies = [\n \"ring\",\n \"rustls-pki-types\",\n \"untrusted\",\n]\n\n[[package]]\nname = \"ryu\"\nversion = \"1.0.18\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f3cb5ba0dc43242ce17de99c180e96db90b235b8a9fdc9543c96d2209116bd9f\"\n\n[[package]]\nname = \"schannel\"\nversion = \"0.1.24\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e9aaafd5a2b6e3d657ff009d82fbd630b6bd54dd4eb06f21693925cdf80f9b8b\"\ndependencies = [\n \"windows-sys 0.59.0\",\n]\n\n[[package]]\nname = \"scopeguard\"\nversion = \"1.2.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"94143f37725109f92c262ed2cf5e59bce7498c01bcc1502d7b9afe439a4e9f49\"\n\n[[package]]\nname = \"security-framework\"\nversion = \"2.11.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"897b2245f0b511c87893af39b033e5ca9cce68824c4d7e7630b5a1d339658d02\"\ndependencies = [\n \"bitflags\",\n \"core-foundation\",\n \"core-foundation-sys\",\n \"libc\",\n \"security-framework-sys\",\n]\n\n[[package]]\nname = \"security-framework-sys\"\nversion = \"2.11.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"75da29fe9b9b08fe9d6b22b5b4bcbc75d8db3aa31e639aa56bb62e9d46bfceaf\"\ndependencies = [\n \"core-foundation-sys\",\n \"libc\",\n]\n\n[[package]]\nname = \"serde\"\nversion = \"1.0.210\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"c8e3592472072e6e22e0a54d5904d9febf8508f65fb8552499a1abc7d1078c3a\"\ndependencies = [\n \"serde_derive\",\n]\n\n[[package]]\nname = \"serde_bytes\"\nversion = \"0.11.14\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8b8497c313fd43ab992087548117643f6fcd935cbf36f176ffda0aacf9591734\"\ndependencies = [\n \"serde\",\n]\n\n[[package]]\nname = \"serde_derive\"\nversion = \"1.0.210\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"243902eda00fad750862fc144cea25caca5e20d615af0a81bee94ca738f1df1f\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn\",\n]\n\n[[package]]\nname = \"serde_json\"\nversion = \"1.0.128\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"6ff5456707a1de34e7e37f2a6fd3d3f808c318259cbd01ab6377795054b483d8\"\ndependencies = [\n \"itoa\",\n \"memchr\",\n \"ryu\",\n \"serde\",\n]\n\n[[package]]\nname = \"serial_test\"\nversion = \"2.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"0e56dd856803e253c8f298af3f4d7eb0ae5e23a737252cd90bb4f3b435033b2d\"\ndependencies = [\n \"dashmap\",\n \"futures\",\n \"lazy_static\",\n \"log\",\n \"parking_lot\",\n \"serial_test_derive\",\n]\n\n[[package]]\nname = \"serial_test_derive\"\nversion = \"2.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"91d129178576168c589c9ec973feedf7d3126c01ac2bf08795109aa35b69fb8f\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn\",\n]\n\n[[package]]\nname = \"shlex\"\nversion = \"1.3.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"0fda2ff0d084019ba4d7c6f371c95d8fd75ce3524c3cb8fb653a3023f6323e64\"\n\n[[package]]\nname = \"simple-logging\"\nversion = \"2.0.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b00d48e85675326bb182a2286ea7c1a0b264333ae10f27a937a72be08628b542\"\ndependencies = [\n \"lazy_static\",\n \"log\",\n \"thread-id\",\n]\n\n[[package]]\nname = \"slab\"\nversion = \"0.4.9\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8f92a496fb766b417c996b9c5e57daf2f7ad3b0bebe1ccfca4856390e3d3bb67\"\ndependencies = [\n \"autocfg\",\n]\n\n[[package]]\nname = \"smallvec\"\nversion = \"1.13.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3c5e1a9a646d36c3599cd173a41282daf47c44583ad367b8e6837255952e5c67\"\n\n[[package]]\nname = \"sniprun\"\nversion = \"1.3.16\"\ndependencies = [\n \"close_fds\",\n \"dirs\",\n \"http-rest-file\",\n \"libc\",\n \"log\",\n \"log-panics\",\n \"neovim-lib\",\n \"regex\",\n \"rmp\",\n \"serial_test\",\n \"simple-logging\",\n \"strip-ansi-escapes\",\n \"thiserror\",\n \"unindent\",\n \"ureq\",\n]\n\n[[package]]\nname = \"spin\"\nversion = \"0.9.8\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"6980e8d7511241f8acf4aebddbb1ff938df5eebe98691418c4468d0b72a96a67\"\n\n[[package]]\nname = \"strip-ansi-escapes\"\nversion = \"0.2.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"55ff8ef943b384c414f54aefa961dd2bd853add74ec75e7ac74cf91dba62bcfa\"\ndependencies = [\n \"vte\",\n]\n\n[[package]]\nname = \"subtle\"\nversion = \"2.6.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"13c2bddecc57b384dee18652358fb23172facb8a2c51ccc10d74c157bdea3292\"\n\n[[package]]\nname = \"syn\"\nversion = \"2.0.77\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"9f35bcdf61fd8e7be6caf75f429fdca8beb3ed76584befb503b1569faee373ed\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"unicode-ident\",\n]\n\n[[package]]\nname = \"thiserror\"\nversion = \"1.0.63\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"c0342370b38b6a11b6cc11d6a805569958d54cfa061a29969c3b5ce2ea405724\"\ndependencies = [\n \"thiserror-impl\",\n]\n\n[[package]]\nname = \"thiserror-impl\"\nversion = \"1.0.63\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a4558b58466b9ad7ca0f102865eccc95938dca1a74a856f2b57b6629050da261\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn\",\n]\n\n[[package]]\nname = \"thread-id\"\nversion = \"3.3.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"c7fbf4c9d56b320106cd64fd024dadfa0be7cb4706725fc44a7d7ce952d820c1\"\ndependencies = [\n \"libc\",\n \"redox_syscall 0.1.57\",\n \"winapi\",\n]\n\n[[package]]\nname = \"tinyvec\"\nversion = \"1.8.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"445e881f4f6d382d5f27c034e25eb92edd7c784ceab92a0937db7f2e9471b938\"\ndependencies = [\n \"tinyvec_macros\",\n]\n\n[[package]]\nname = \"tinyvec_macros\"\nversion = \"0.1.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1f3ccbac311fea05f86f61904b462b55fb3df8837a366dfc601a0161d0532f20\"\n\n[[package]]\nname = \"unicode-bidi\"\nversion = \"0.3.15\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"08f95100a766bf4f8f28f90d77e0a5461bbdb219042e7679bebe79004fed8d75\"\n\n[[package]]\nname = \"unicode-ident\"\nversion = \"1.0.13\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e91b56cd4cadaeb79bbf1a5645f6b4f8dc5bde8834ad5894a8db35fda9efa1fe\"\n\n[[package]]\nname = \"unicode-normalization\"\nversion = \"0.1.23\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a56d1686db2308d901306f92a263857ef59ea39678a5458e7cb17f01415101f5\"\ndependencies = [\n \"tinyvec\",\n]\n\n[[package]]\nname = \"unindent\"\nversion = \"0.2.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"c7de7d73e1754487cb58364ee906a499937a0dfabd86bcb980fa99ec8c8fa2ce\"\n\n[[package]]\nname = \"unix_socket\"\nversion = \"0.5.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"6aa2700417c405c38f5e6902d699345241c28c0b7ade4abaad71e35a87eb1564\"\ndependencies = [\n \"cfg-if 0.1.10\",\n \"libc\",\n]\n\n[[package]]\nname = \"untrusted\"\nversion = \"0.9.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8ecb6da28b8a351d773b68d5825ac39017e680750f980f3a1a85cd8dd28a47c1\"\n\n[[package]]\nname = \"ureq\"\nversion = \"2.10.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b74fc6b57825be3373f7054754755f03ac3a8f5d70015ccad699ba2029956f4a\"\ndependencies = [\n \"base64\",\n \"flate2\",\n \"log\",\n \"once_cell\",\n \"rustls\",\n \"rustls-native-certs\",\n \"rustls-pki-types\",\n \"serde\",\n \"serde_json\",\n \"url\",\n \"webpki-roots\",\n]\n\n[[package]]\nname = \"url\"\nversion = \"2.5.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"22784dbdf76fdde8af1aeda5622b546b422b6fc585325248a2bf9f5e41e94d6c\"\ndependencies = [\n \"form_urlencoded\",\n \"idna\",\n \"percent-encoding\",\n]\n\n[[package]]\nname = \"utf8parse\"\nversion = \"0.2.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"06abde3611657adf66d383f00b093d7faecc7fa57071cce2578660c9f1010821\"\n\n[[package]]\nname = \"vte\"\nversion = \"0.11.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f5022b5fbf9407086c180e9557be968742d839e68346af7792b8592489732197\"\ndependencies = [\n \"utf8parse\",\n \"vte_generate_state_changes\",\n]\n\n[[package]]\nname = \"vte_generate_state_changes\"\nversion = \"0.1.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d257817081c7dffcdbab24b9e62d2def62e2ff7d00b1c20062551e6cccc145ff\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n]\n\n[[package]]\nname = \"wasi\"\nversion = \"0.11.0+wasi-snapshot-preview1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"9c8d87e72b64a3b4db28d11ce29237c246188f4f51057d65a7eab63b7987e423\"\n\n[[package]]\nname = \"webpki-roots\"\nversion = \"0.26.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"0bd24728e5af82c6c4ec1b66ac4844bdf8156257fccda846ec58b42cd0cdbe6a\"\ndependencies = [\n \"rustls-pki-types\",\n]\n\n[[package]]\nname = \"winapi\"\nversion = \"0.3.9\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"5c839a674fcd7a98952e593242ea400abe93992746761e38641405d28b00f419\"\ndependencies = [\n \"winapi-i686-pc-windows-gnu\",\n \"winapi-x86_64-pc-windows-gnu\",\n]\n\n[[package]]\nname = \"winapi-i686-pc-windows-gnu\"\nversion = \"0.4.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ac3b87c63620426dd9b991e5ce0329eff545bccbbb34f3be09ff6fb6ab51b7b6\"\n\n[[package]]\nname = \"winapi-x86_64-pc-windows-gnu\"\nversion = \"0.4.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"712e227841d057c1ee1cd2fb22fa7e5a5461ae8e48fa2ca79ec42cfc1931183f\"\n\n[[package]]\nname = \"windows-sys\"\nversion = \"0.48.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"677d2418bec65e3338edb076e806bc1ec15693c5d0104683f2efe857f61056a9\"\ndependencies = [\n \"windows-targets 0.48.5\",\n]\n\n[[package]]\nname = \"windows-sys\"\nversion = \"0.52.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"282be5f36a8ce781fad8c8ae18fa3f9beff57ec1b52cb3de0789201425d9a33d\"\ndependencies = [\n \"windows-targets 0.52.6\",\n]\n\n[[package]]\nname = \"windows-sys\"\nversion = \"0.59.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1e38bc4d79ed67fd075bcc251a1c39b32a1776bbe92e5bef1f0bf1f8c531853b\"\ndependencies = [\n \"windows-targets 0.52.6\",\n]\n\n[[package]]\nname = \"windows-targets\"\nversion = \"0.48.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"9a2fa6e2155d7247be68c096456083145c183cbbbc2764150dda45a87197940c\"\ndependencies = [\n \"windows_aarch64_gnullvm 0.48.5\",\n \"windows_aarch64_msvc 0.48.5\",\n \"windows_i686_gnu 0.48.5\",\n \"windows_i686_msvc 0.48.5\",\n \"windows_x86_64_gnu 0.48.5\",\n \"windows_x86_64_gnullvm 0.48.5\",\n \"windows_x86_64_msvc 0.48.5\",\n]\n\n[[package]]\nname = \"windows-targets\"\nversion = \"0.52.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"9b724f72796e036ab90c1021d4780d4d3d648aca59e491e6b98e725b84e99973\"\ndependencies = [\n \"windows_aarch64_gnullvm 0.52.6\",\n \"windows_aarch64_msvc 0.52.6\",\n \"windows_i686_gnu 0.52.6\",\n \"windows_i686_gnullvm\",\n \"windows_i686_msvc 0.52.6\",\n \"windows_x86_64_gnu 0.52.6\",\n \"windows_x86_64_gnullvm 0.52.6\",\n \"windows_x86_64_msvc 0.52.6\",\n]\n\n[[package]]\nname = \"windows_aarch64_gnullvm\"\nversion = \"0.48.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"2b38e32f0abccf9987a4e3079dfb67dcd799fb61361e53e2882c3cbaf0d905d8\"\n\n[[package]]\nname = \"windows_aarch64_gnullvm\"\nversion = \"0.52.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"32a4622180e7a0ec044bb555404c800bc9fd9ec262ec147edd5989ccd0c02cd3\"\n\n[[package]]\nname = \"windows_aarch64_msvc\"\nversion = \"0.48.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"dc35310971f3b2dbbf3f0690a219f40e2d9afcf64f9ab7cc1be722937c26b4bc\"\n\n[[package]]\nname = \"windows_aarch64_msvc\"\nversion = \"0.52.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"09ec2a7bb152e2252b53fa7803150007879548bc709c039df7627cabbd05d469\"\n\n[[package]]\nname = \"windows_i686_gnu\"\nversion = \"0.48.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a75915e7def60c94dcef72200b9a8e58e5091744960da64ec734a6c6e9b3743e\"\n\n[[package]]\nname = \"windows_i686_gnu\"\nversion = \"0.52.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8e9b5ad5ab802e97eb8e295ac6720e509ee4c243f69d781394014ebfe8bbfa0b\"\n\n[[package]]\nname = \"windows_i686_gnullvm\"\nversion = \"0.52.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"0eee52d38c090b3caa76c563b86c3a4bd71ef1a819287c19d586d7334ae8ed66\"\n\n[[package]]\nname = \"windows_i686_msvc\"\nversion = \"0.48.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8f55c233f70c4b27f66c523580f78f1004e8b5a8b659e05a4eb49d4166cca406\"\n\n[[package]]\nname = \"windows_i686_msvc\"\nversion = \"0.52.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"240948bc05c5e7c6dabba28bf89d89ffce3e303022809e73deaefe4f6ec56c66\"\n\n[[package]]\nname = \"windows_x86_64_gnu\"\nversion = \"0.48.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"53d40abd2583d23e4718fddf1ebec84dbff8381c07cae67ff7768bbf19c6718e\"\n\n[[package]]\nname = \"windows_x86_64_gnu\"\nversion = \"0.52.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"147a5c80aabfbf0c7d901cb5895d1de30ef2907eb21fbbab29ca94c5b08b1a78\"\n\n[[package]]\nname = \"windows_x86_64_gnullvm\"\nversion = \"0.48.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"0b7b52767868a23d5bab768e390dc5f5c55825b6d30b86c844ff2dc7414044cc\"\n\n[[package]]\nname = \"windows_x86_64_gnullvm\"\nversion = \"0.52.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"24d5b23dc417412679681396f2b49f3de8c1473deb516bd34410872eff51ed0d\"\n\n[[package]]\nname = \"windows_x86_64_msvc\"\nversion = \"0.48.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ed94fce61571a4006852b7389a063ab983c02eb1bb37b47f8272ce92d06d9538\"\n\n[[package]]\nname = \"windows_x86_64_msvc\"\nversion = \"0.52.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"589f6da84c646204747d1270a2a5661ea66ed1cced2631d546fdfb155959f9ec\"\n\n[[package]]\nname = \"zeroize\"\nversion = \"1.8.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ced3678a2879b30306d323f4542626697a464a97c0a07c9aebf7ebca65cd4dde\"\n"
        },
        {
          "name": "Cargo.toml",
          "type": "blob",
          "size": 0.8349609375,
          "content": "[package]\nname = \"sniprun\"\nversion = \"1.3.16\"\nauthors = [\"michaelb <michael.bleuez2@gmail.com>\"]\nrust-version = \"1.65\"\nedition = \"2018\"\n\n[features]\nignore_in_ci = []\n\n[profile.release]\nstrip = true\n\n[build-dependencies]\n# cc=\"*\"\n\n[dependencies]\nneovim-lib = \"0.6.1\"\nlog = \"0.4.18\"\nlog-panics = { version = \"2\", features = [\"with-backtrace\"] }\nsimple-logging = \"2.0\"\nclose_fds = \"0.3\"\nthiserror = \"1.0\"\ndirs = \"5.0\"\nregex = \"1.0\"     # up-to-date-regex needs a more recent Rust version\nstrip-ansi-escapes = \"0.2\"\nlibc = \"0.2.79\"\nserial_test = \"2.0\"\n\n# jupyter-client = { git = \"https://gitlab.com/srwalker101/rust-jupyter-client.git\", branch = \"dev\" }\n\nrmp = \"=0.8.8\" # fix rmp version because it breaks MSRV\n\n# Python3 interpreter\nunindent = \"0.2\"\n\n# Http interpreter\nureq = { version = \"2\", features = [\"json\", \"native-certs\"] }\nhttp-rest-file = \"0.5.1\"\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.0458984375,
          "content": "MIT License\n\nCopyright (c) 2020 Michael Bleuez\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 5.6591796875,
          "content": "<div style=\"text-align:center\"><img src=\"ressources/visual_assets/Sniprun_transparent.png\" /></div>\n\n<div align=\"center\"><p>\n    <a href=\"https://github.com/michaelb/sniprun/releases/latest\">\n      <img alt=\"Latest release\" src=\"https://img.shields.io/github/v/release/michaelb/sniprun\" />\n    </a>\n     <a href=\"https://github.com/michaelb/sniprun/actions\">\n      <img alt=\"CI build\" src=\"https://github.com/michaelb/sniprun/workflows/Rust/badge.svg\" />\n    </a>\n    <a href=\"https://github.com/michaelb/sniprun/releases\">\n      <img alt=\"Total downloads\" src=\"https://img.shields.io/github/downloads/michaelb/sniprun/total\" />\n    </a>\n    <a href=\"https://github.com/michaelb/sniprun/pulse\">\n      <img alt=\"Last commit\" src=\"https://img.shields.io/github/last-commit/michaelb/sniprun\"/>\n    </a>\n</p>\n</div>\n\n# Introduction\n\nSniprun is a code runner plugin for neovim written in Lua and Rust.\nIt aims to provide stupidly fast partial code testing for interpreted\n**and compiled** [languages](https://michaelb.github.io/sniprun/sources/README.html#support-levels-and-languages)\n. Sniprun blurs the line between standard save/run workflow, jupyter-like\nnotebook, and REPL/interpreters.\n\n</br>\n\nTLDR: `Plug 'michaelb/sniprun', {'do': 'sh install.sh'}`, `:SnipRun`, `:'<,'>SnipRun`, `:SnipInfo`\n\n# Installation, configuration, ...\n\nSee [installation instructions](https://michaelb.github.io/sniprun/sources/README.html#installation)\n, [configuration tips](https://michaelb.github.io/sniprun/sources/README.html#configuration)\n, [usage explanations](https://michaelb.github.io/sniprun/sources/README.html#usage)\nand much more useful information on the\n[WIKI](https://michaelb.github.io/sniprun/).\n\n![spacer](ressources/visual_assets/760091.png)\n\n## Demos\n\n##### Send to Sniprun snippets of any language\nA very simple example (in C), play the .gif and look in the command area:\n\n![demo_c](ressources/visual_assets/demo_c.gif)\n\n##### The result can be returned in multiple (even at the same time) ways:\n\n[Classic](ressources/display_classic.md)|  [Virtual Text](ressources/display_virtualtext.md)\n:------------------------------------------:|:------------------:\n![](ressources/visual_assets/classic.png)   | ![](ressources/visual_assets/virtual_text.png)\n[**Temporary Floating Window**](ressources/display_floating_window.md)  |  [**Terminal**](ressources/display_terminal.md)\n![](ressources/visual_assets/floating_window.png) | ![](ressources/visual_assets/terminal.png)\n[**Notification**](ressources/display_notify.md) | [**API**](API.md)\n![](ressources/visual_assets/nvimnotify.png) | ![](ressources/visual_assets/api.png)\n\n\n##### REPL-like behavior is available for some languages\n\nPython, Julia, Lua, JavaScript & Typescript (via deno), Clojure, R, Mathematica,\nSage, coming soon for many other interpreted (and compiled) languages.\nWith [REPL-like behavior](https://michaelb.github.io/sniprun/sources/README.html#repl-like-behavior)\n,you can run code dependent on previously executed code, just like in\na REPL, from within your favorite editor.\n\n![spacer](ressources/visual_assets/760091.png)\n\n## Features\n\n**Sniprun is** a way to quickly run small snippets of code, on the fly, and\niterate very quickly and conveniently. To learn a language, to quickly\nexperiment with new features (not yet embedded in classes or a whole project\netc...), or to develop simple code pipelines (like a machine learning exercise)\nthat fit in a unique file, sniprun is probably _the_ best plugin out there.\n\nAs a matter of proof, Sniprun :\n\n- Officially supports [all these languages (compiled & interpreted)](https://michaelb.github.io/sniprun/sources/README.html#support-levels-and-languages),\n   and virtually [any language](https://michaelb.github.io/sniprun/sources/interpreters/Generic.html#community-examples-for-non-officially-supported-languages)\n- can create and connect to REPLs in order to present an interactive and\n  playful interface\n- can run things like GUI plots, networks requests or even Ansible playbooks\n- doesn't require even one line of configuration by default\n  (but can be customized up to the tiniest things)\n- can run code from a part of a file which isn't complete / contains errors\n- can automatically fetch (in some languages) the `imports`\n  necessary for your code snippet\n- can run [live](https://michaelb.github.io/sniprun/sources/README.html#live-mode)\n  (at every keystroke)\n- lends itself to easy [mappings](https://michaelb.github.io/sniprun/sources/README.html#mappings-recommandations)\n  and Vim motions\n- has an API (for running code, and displaying results)\n- has many result display modes that can be enabled at the same time,\n  and for different output status if wanted\n- supports literate programming in Markdown, Orgmode and Neorg\n\n## Known limitations\n\nDue to its nature, Sniprun may have trouble with programs that :\n\n- Mess with standard output / stderr\n- Need to read from stdin\n- Access files; sniprun does not run in a virtual environment, it accesses\n  files just like your own code do, but since it does not run the whole program\n  , something might go wrong. **Relative paths may cause issues**, as the\n  current working directory for sniprun will be somewhere in ~/.cache/sniprun,\n  and relative imports may miss.\n- No support for Windows\n- NixOS, MacOS users have to compile sniprun locally. Sniprun has not been\n  tested on other Unixes (besides Linux itself, of course)\n\n## Changelog\n\nIt's been quite a journey already! For history fans, see the [full changelog](CHANGELOG.md).\n\n## Contributing\n\nSniprun has been made contributor-friendly (see\n[CONTRIBUTING.md](CONTRIBUTING.md)), so it's relatively easy to create / fix\ninterpreters for any language. But any (constructive) issue, discussion, or\ndoc Pull Request is a welcome form of contribution !\n"
        },
        {
          "name": "autoload",
          "type": "tree",
          "content": null
        },
        {
          "name": "build.rs",
          "type": "blob",
          "size": 2.7197265625,
          "content": "use std::fs;\nuse std::path::Path;\n\n// fn build_tree_sitter(language_name: &str) {\n//     let dir: PathBuf = [\"ressources\", language_name, \"src\"].iter().collect();\n//\n//     cc::Build::new()\n//         .include(&dir)\n//         .file(dir.join(\"parser.c\"))\n//         .file(dir.join(\"scanner.c\"))\n//         .compile(language_name);\n// }\n\nfn main() -> Result<(), std::io::Error> {\n    // build_tree_sitter(\"tree-sitter-rust\");\n\n    //clarify this\n    let out_dir = \"src/interpreters\";\n    let dest_path = Path::new(&out_dir).join(\"mod.rs\");\n\n    let mut string_to_write = \"\".to_string();\n\n    string_to_write.push_str(\"#![allow(non_snake_case)]\\n\");\n    string_to_write.push_str(\"pub mod import;\\n\");\n\n    for path in fs::read_dir(out_dir).unwrap() {\n        let plugin = path.unwrap().file_name().into_string().unwrap();\n        if plugin == \"mod.rs\" || plugin == \"example.rs\" || plugin == \"import.rs\" {\n            continue;\n        }\n        if !plugin.ends_with(\".rs\") {\n            // not a rust file\n            continue;\n        }\n\n        let plugin = plugin[..plugin.len() - 3].to_string();\n        string_to_write.push_str(&format!(\n            \"pub mod {};\npub use {}::{} as {};\n\",\n            plugin.clone(),\n            plugin.clone(),\n            plugin.clone(),\n            plugin + \"_type\",\n        ));\n    }\n\n    string_to_write.push_str(\n        \"#[macro_export]\n    macro_rules! iter_types {\n    ($($code:tt)*) => {\n\",\n    );\n\n    for path in fs::read_dir(out_dir).unwrap() {\n        let mut plugin = path.unwrap().file_name().into_string().unwrap();\n        if plugin == \"mod.rs\" || plugin == \"import.rs\" || plugin == \"example.rs\" {\n            continue;\n        }\n        if !plugin.ends_with(\".rs\") {\n            // not a rust file\n            continue;\n        }\n        plugin = plugin[..plugin.len() - 3].to_string();\n\n        string_to_write.push('{');\n        string_to_write.push_str(&format!(\n            \"\n            type Current = interpreters::{}_type;\n                $(\n                    $code\n                 )*\n                \",\n            plugin,\n        ));\n        string_to_write.push_str(\"};\");\n    }\n    string_to_write.push_str(\n        \"\n     };\n}\n\",\n    );\n\n    // cargo stuff for rebuild\n\n    for path in fs::read_dir(out_dir).unwrap() {\n        let _plugin_path = path.unwrap().path().display();\n    }\n    println!(\n        \"cargo:rerun-if-changed=build.rs\n                             \"\n    );\n    println!(\n        \"cargo:rerun-if-changed={}\n                                      \",\n        out_dir\n    );\n    for path in fs::read_dir(out_dir).unwrap() {\n        println!(\n            \"cargo:rerun-if-changed={}\n            \",\n            path.unwrap().path().display()\n        );\n    }\n\n    fs::write(dest_path, string_to_write)\n}\n"
        },
        {
          "name": "doc",
          "type": "tree",
          "content": null
        },
        {
          "name": "install.sh",
          "type": "blob",
          "size": 2.23046875,
          "content": "#!/bin/sh\n\necho \"Runnning Sniprun Installer\"\nlocal_version=\"v$(grep ^version Cargo.toml | cut -d \"\\\"\" -f 2)\"\n\nforce_build=$1\ncurrent_branch=$(git rev-parse --abbrev-ref HEAD)\nif [ \"$current_branch\" = \"dev\" ]; then\n  force_build=1\nfi\n\narch=$(uname)\nif [ \"$arch\" != \"Linux\" ] && [ \"$force_build\" != 1 ]; then\n  echo \"Looks you are not running Linux: Mac users have to compile sniprun themselves and thus need the Rust toolchain\"\n  force_build=1\nfi\n\ncargo_build() {\n  if command -v cargo >/dev/null; then\n    echo \"Building sniprun from source...\"\n    cargo build --release 2>&1\n    echo \"Done (status: $?)\"\n    return 0\n  else\n    echo \"Could not find cargo in \\$PATH: the Rust toolchain is required to build Sniprun\"\n    return 1\n  fi\n}\n\nget_latest_release() {\n  curl --silent \"https://api.github.com/repos/michaelb/sniprun/releases/latest\" | LC_ALL=C tr -d \"\\n\" | sed -e 's|^.*\\(\"tag_name\"[^,]*\\).*|\\1|' | cut -d'\"' -f4 # sed keeps matchgroup \"tag_name\": \"vX.Z.Z\", cut -d '\"' does the rest\n}\n\n# download the sniprun binary (of the specified version) from Releases\ndownload() {\n  echo \"Downloading sniprun binary: $1\"\n  curl -fsSL \"https://github.com/michaelb/sniprun/releases/download/$1/sniprun\" --output sniprun\n  mkdir -p target/release/\n  mv -f sniprun target/release/\n}\n\n# call download, make executable, and return status\nfetch_prebuilt_binary() {\n  if (download \"$1\"); then\n    chmod a+x target/release/sniprun\n    echo \"Done\"\n    return 0\n  else\n    return 1\n  fi\n}\n\n\nremote_version=$(get_latest_release)\n\nif [ \"$force_build\" ]; then\n  echo \"Compiling sniprun locally:\"\n  neovim_version=$(nvim --version | head -n 1 | cut -d . -f 2) # 4 -> neovim 0.4.x\n  if [ \"$neovim_version\" = \"4\" ]; then\n    echo \"Sniprun 0.4.9 is the highest version supported on neovim 0.4.x\"\n    git reset --hard v0.4.9\n  fi\n  cargo_build\nelse\n\n  tag_to_fetch=$remote_version\n  neovim_version=$(nvim --version | head -n 1 | cut -d . -f 2) # 4 -> neovim 0.4.x\n  if [ \"$neovim_version\" = \"4\" ]; then\n    echo \"Sniprun 0.4.9 is the highest version supported on neovim 0.4.x\"\n    git reset --hard v0.4.9\n    tag_to_fetch=\"v0.4.9\"\n  fi\n\n  fetch_prebuilt_binary \"$tag_to_fetch\"\n\n  # if download failed\n  if [ $? = 1 ]; then\n    echo \"Failed to download sniprun, check your network or build locally?\"\n  fi\nfi\n"
        },
        {
          "name": "lua",
          "type": "tree",
          "content": null
        },
        {
          "name": "plugin",
          "type": "tree",
          "content": null
        },
        {
          "name": "ressources",
          "type": "tree",
          "content": null
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}