{
  "metadata": {
    "timestamp": 1736709140302,
    "page": 339,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjM0MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "Yamato-Security/hayabusa",
      "stars": 2399,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".cargo",
          "type": "tree",
          "content": null
        },
        {
          "name": ".codecov.yml",
          "type": "blob",
          "size": 0.126953125,
          "content": "coverage:\n  status:\n    patch:\n      default:\n        informational: true\n    project:\n      default:\n        informational: true\n"
        },
        {
          "name": ".env.example",
          "type": "blob",
          "size": 0.0224609375,
          "content": "WEBHOOK_URL=\nCHANNEL=#\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.1484375,
          "content": "/target\n/samples\n*.test\n/.vscode/\n.DS_Store\ntest_*\n.env\n/logs\n*.csv\n*.json\n*.jsonl\nhayabusa*\n*.html\n*.htm\n*.css\n*.txt\n!contributors.txt\n!LICENSE.txt\n.~*"
        },
        {
          "name": ".gitmodules",
          "type": "blob",
          "size": 0.0927734375,
          "content": "[submodule \"rules\"]\n\tpath = rules\n\turl = https://github.com/Yamato-Security/hayabusa-rules.git\n"
        },
        {
          "name": "CHANGELOG-Japanese.md",
          "type": "blob",
          "size": 64.85546875,
          "content": "# 変更点\n\n## 3.0.1 [2024/12/29] - 3rd Year Anniversary Release\n\n**バグ修正:**\n\n- Hayabusaはバックエンドで`expand`ルールのパースチェックに失敗していた。 (#1537) (@fukusuket)\n\n## 3.0.0 [2024/12/25] - 3rd Year Anniversary Release\n\n**新機能:**\n\n- Base64文字列を抽出して、デコードする`extract-base64`コマンドを追加した。(#1512) (@fukusuket)\n- `expand`修飾子が入っているルールで使用されるプレースホルダー名を出力する`expand-list`コマンドを追加した。(#1513) (@fukuseket)\n- `expand`フィールド修飾子に対応した。 (#1434) (@fukusuket)\n- Temporal Proximity（`temporal`）の相関ルールに対応した。 (#1446) (@fukusuket)\n- Temporal Ordered Proximity (`temporal_ordered`) の相関ルールに対応した。 (#1447) (@fukusuket)\n\n**改善:**\n\n- `log-metrics`コマンドにファイルサイズを追加した。 (#1528) (@fukusuket)\n\n**バグ修正:**\n\n- レコードIDが出力されるとき、`csv-timeline`によるソートが完璧に行われなかった。 (#1519) (@fukusuket)\n- `J, --JSON-input`は、`.json`ファイルしか対応していなかったので、`.jsonl`ファイルにも対応した。 (#1530) (@fukusuket)\n\n## 2.19.0 [2024/11/26] - \"Every Day Is A Good Day\" Release\n\n**新機能:**\n\n- `gt`、`gte`、`lt`、`lte`のフィールド修飾子に対応した。(#1433) (@fukusuket)\n- 新しい`log-metrics`コマンドで`.evtx`ファイルの情報を取得できるようになった。(コンピュータ名、イベント数、最初のタイムスタンプ、最後のタイムスタンプ、チャネル、プロバイダ) (#1474) (@fukusuket)\n- 以下のコマンドに`Channel`と`Provider`の略称を無効にする`-b, --disable-abbreviations`オプションを追加した。元の値を確認したい時に便利。 (#1485) (@fukusuket)\n  * `csv-timeline`\n  * `json-timeline`\n  * `eid-metrics`\n  * `log-metrics`\n  * `search`\n- `utf16/utf16be/utf16le/wide`フィールド修飾子が`base64offset|contains`フィールド修飾子と一緒に使えるようになった。 (#1432) (@fukusuket)\n  * `utf16|base64offset|contains`\n  * `utf16be|base64offset|contains`\n  * `utf16le|base64offset|contains`\n  * `wide|base64offset|contains`\n\n**改善:**\n\n- `yaml-rust`クレートを`yaml-rust2`に更新した。(#461) (@yamatosecurity)\n- `windash`文字が、`rules/config/windash_characters.txt`から動的に読み込まれるようになった。(#1440) (@fukusuket)\n- `logon-summary`コマンドがRDPイベントからのログオン情報を表示するようになった。注意: ファイルに保存する場合、Hayabusaはより詳細な情報を出力する。(#1468) (@fukusuket)\n- 見やすくなるように色を更新した。 (#1480) (@yamatosecurity)\n- 実行開始と終了のメッセージを出力するようにした。 (#1492) (@fukusuket)\n- 出力に新しい配色を追加した。 (#1491) (@fukusuket)\n- ファイルサイズがプログレスバーの下のファイル名の横に表示されるようになった。 (#1471) (@fukusuket)\n\n**バグ修正:**\n\n- logon-summary`コマンドが破損したログでクラッシュすることがあった。(#1477) (@fukusuket)\n- `csv-timeline`と`json-timeline`コマンドで、結果をターミナルに出力すると、プログレスバーの後にいくつかの結果が表示されていた。(#1459) (@fukusuket)\n- 集計ルールのアラートの詳細フィールド値の結果がソートされていないため、`csv-timeline`と`json-timeline`は、毎回完全に正確な結果を出力しなかった。 (#1466) (@fukusuket)\n- `hayabusa-evtx`クレートをバージョン`0.8.12`に更新した。(@yamatosecurity)\n  - JSONフィールドの出力順序が元のXMLに従って保持されるようになった。(omerbenamram/evtx #241)\n  - 属性と同じ名前を持つ複数のサブノードは上書きされ、最後の1つだけが出力されていた。(omerbenamram/evtx #245)\n- `logon-summary`と`eid-metrics`が複数のプログレスバーを出力することがあった。 #1479 (@fukusuket)\n- ターミナルに出力し、イベントをソートしない場合、プログレスバーは不要なため削除された。 #1508 (@fukusuket)\n\n**その他:**\n\n- `timeline-offset`オプションは、`--time-offset`に名前変更された。 (#1490) (@yamatosecurity)\n\n## 2.18.0 [2024/10/23] - SecTor Release\n\n**新機能:**\n\n- `fieldref`修飾子(`equalsfield`修飾子のエリアス)に対応した。(#1409) (@hitenkoku)\n- `fieldref|startswith`と`fieldref|contains`修飾子に対応した。 (#1439) (@fukusuket)\n- `fieldref|endswith`修飾子は、`endswithfield`をリプレースするためのエイリアスとして作成された。(#1437) (@fukusuket)\n- XORエンコードされたルールをサポートし、端末に置かれるファイルを最小限に抑えるとともに、ルールに過検知するアンチウイルス製品を回避する。(#1419) (@fukusuket)\n  - リリースページで、この機能を設定済みのパッケージを含める予定。手動で設定したい場合は、[encoded_rules.yml](https://github.com/Yamato-Security/hayabusa-encoded-rules/raw/refs/heads/main/encoded_rules.yml)をダウンロードして、Hayabusaのルートフォルダに置いてください。このファイルは、hayabusa-rulesリポジトリ内のルールから作成されており、ルールが更新されるたびに自動的にアップデートされる。configディレクトリ以外のrulesフォルダ内のファイルは、まだ単一ファイルに含まれていないので削除してください。\n  - 注意: -Hオプションで生成されるレポートは、ルールへのリンクを作成せず、ルール名だけが出力される。\n- `rules/config`の設定ファイルが単一のファイル[rules_config_files.txt](https://github.com/Yamato-Security/hayabusa-encoded-rules/raw/refs/heads/main/rules_config_files.txt)からロードされるようになり、ライブ調査のためにターゲットシステムに保存する必要があるファイル数が減った。(#1420) (@fukusuket)\n\n**バグ修正:**\n\n- `search`コマンドの`-o`オプションを使用した際に不要な改行が出力されていた。(#1425) (@fukusuket)\n- Sigma相関ルールの`group-by`フィールドは、必須だったが任意に変えた。(#1442) (@fukusuket)\n- Hayabusaは、相関ルールで参照されているルールが見つからない場合、エラーメッセージを表示するようにした。 (#1444) (@fukusuket)\n- `all-field-info`プロファイルを使用した場合、フィールド情報が出力されなかった。 (#1450) (@fukusuket)\n\n**その他:**\n\n- ライセンスをGPL-3.0からAGPL-3.0に変えた。(@yamatosecurity)\n\n## 2.17.0 [2024/08/23] \"HITCON Community Release\"\n\n**新機能:**\n\n- Sigma V2の`|re:`のサブ修飾子に対応した。 submodifers. (#1399) (@fukusuket)\n  - 参考: https://github.com/SigmaHQ/sigma-specification/blob/main/appendix/sigma-modifiers-appendix.md\n    * `|re|i:`: (insensitive) 大文字小文字を区別しないマッチングを無効にする。\n    * `|re|m:`: (multi-line) 複数行にまたがってマッチする。`^` /`$` は行頭/行末にマッチする。\n    * `|re|s:`: (single-line) ドット文字 (`.`) は改行文字を含むすべての文字にマッチする。\n- Sigma V2の`|exists:`修飾子に対応した。 (#1400) (@hitenkoku)\n- Sigma V2の`|cased:`修飾子に対応した。 (#1401) (@hitenkoku)\n\n**改善:**\n\n- `cidr-utils`クレートを新バージョン0.6.xに対応した。 (#1366) (@hitenkoku)\n- Sigma相関ルールの`name`ルックアップに対応した。 (#1363) (@fukusuket)\n- デフォルトで低メモリモードを有効にした。`-s, --low-memory-mode`は、`-s, --sort-events` - 出力/保存する前に結果をソートする。(注意: より多くのメモリを消費する。）(#1361) (@hitenkoku)\n  - 注意: `-R, --remove-duplicate-data`または`-X, --remove-duplicate-detections`を使用するには、ソートを有効にする必要がある。\n- Sigma相関ルールが参照しているルールは、デフォルトで結果を出力しないようにした。ルールに`generate: true`を指定すると、出力される。 (#1367) (@fukusuket)\n- `Data`フィールドは、すべて`Data`フィールドとして、またはJSONの配列としてではなく、インデックス化された文字列として表示されるようになった。(#1371) (@fukusuket)\n  - 前: `\"Data\": [\"17514\", \"Multiprocessor Free\", \"Service Pack 1\"]`\n  - 後: `\"Data[3]\": \"17514\", \"Data[4]\": \"Multiprocessor Free\", \"Data[5]\": \"Service Pack 1\"`\n- リリースパッケージのファイル数を減らすために、`config`フォルダ内の設定ファイルもバイナリに埋め込まれるようにした。 (#1370) (@hitenkoku)\n  - 注意: `set-default-profile`コマンドは、`config/default_profile.yaml`に依存しているので、`config`ディレクトリファイルがないと実行できない。\n- 集計ルールのアラートに、複数の結果がある場合でも`Channel`と`EventID`の情報が表示されるようにした。 (#1342) (@fukusuket)\n- JSONタイムラインで`Details`フィールドに情報がない場合、JSONがパースしやすくなるように、デフォルトで出力される`\"-\"`を`{}`に変更した。(#1386) (@hitenkoku)\n- シグネチャーバイパスを防ぐため、`-` (エンダッシュ)、`-` (エムダッシュ)、`―` (水平バー) 文字を `windash` 修飾子でサポートするようにした。(#1392) (@hitenkoku)\n- MITRE ATT&CKタグをSigmaバージョン2の形式に対応させた。(例: `defense_evasion` => `defense-evasion`) (@fukusuket)\n- `evtx`クレートを最新のものに更新し、機能改善とバグ修正を行った。\n\n**バグ修正:**\n- Sigmaの相関ルールのカウントが`Events with hits`に表示されていなかった。(#1373) (@fukusuket)\n- 相関ルールのカウントが`Events with hits`に表示されていなかった。(#1374) (@fukusuket)\n- 集計ルールのカウントが`Events with hits`に表示されていなかった。(#1375) (@fukusuket)\n- まれに、ルール作成者の一覧が表示されないことがあった。 (#1383) (@fukusuket)\n\n## 2.16.0 [2024/06/11]\n\n**新機能:**\n\n- デフォルトでは、`.evtx`ファイルに適用可能なルールのみ有効になる。これは、`.evtx`ファイルと`.yml`ルールの`Channel`フィールドに基づく。例えば、`Security.evtx`がスキャンされている場合、`Channel: Security`が定義されているルールのみがこのファイルに対して使用される。ベンチマークでは、単一の`evtx`ファイルをスキャンする場合、パフォーマンスが約20％向上される。1つの`.evtx`ファイルで複数のチャネルが使用されている場合や、チャネルが定義されていないルールを使用して、チャネルに関係なくすべての`.evtx`ファイルをスキャンしたい場合は、`csv-timeline` と `json-timeline` の `-A、--enable-all-rules` オプションでこのフィルタリングをオフにすることができる。（#1317）(@fukusuket)\n  - 現在のところ、`Channel`が定義されておらず、すべての`.evtx`ファイルをスキャンすることを意図している検知ルールは以下の2つだけ:\n    - [Possible Hidden Shellcode](https://github.com/Yamato-Security/hayabusa-rules/blob/main/hayabusa/builtin/UnkwnChannEID_Med_PossibleHiddenShellcode.yml)\n    - [Mimikatz Use](https://github.com/SigmaHQ/sigma/blob/master/rules/windows/builtin/win_alert_mimikatz_keywords.yml)\n- デフォルトでは、適用可能なルールを持つ`.evtx`ファイルのみ読み込む。たとえば、さまざまなイベントログのディレクトリをスキャンしている場合でも、 `Channel: Security` を探すルールのみを有効にした場合、Hayabusaは`Security`以外のすべてのイベントログを無視します。ベンチマークでは、通常のスキャンで約10％、単一のルールでスキャンする場合は最大60％以上のパフォーマンス向上が得られる。チャネルに関係なくすべての`.evtx`ファイルを読み込みたい場合は、`csv-timeline` と `json-timeline` の `-a、--scan-all-evtx-files` オプションでこのフィルタリングをオフにすることができる。(#1318) (@fukusuket)\n- 注意: チャンネルフィルタリングは .evtx ファイルにのみ適用され、`-J, --json-input`オプションを使用してイベントログをJSONファイルから読み込む際に`-A`または`-a`を指定するとエラーが発生する。(#1345) (@fukusuket)\n- Sigma相関ルールのEvent Countに対応した。 (#1337) (@fukusuket)\n- Sigma相関ルールのValue Countに対応した。 (#1338) (@fukusuket)\n\n**改善:**\n\n- `-d, --directory`オプションで複数のフォルダを指定できるようにした。 (#1335) (@hitenkoku)\n- REST APIからエクスポートされたSplunkログを分析できるようになった。 (#1083) (@hitenkoku)\n- `count`で複数のグループを指定できるようにした。例: `count() by IpAddress,SubStatus,LogonType >= 2`。また、出力される結果を更新した。例: `[condition] count(TargetUserName) by IpAddress > 3 in timeframe [result] count: 4 TargetUserName:tanaka/Administrator/adsyncadmin/suzuki IpAddress:- timeframe:5m` -> `Count: 4 ¦ TargetUserName: tanaka/Administrator/adsyncadmin/suzuki ¦ IpAddress: -` (#1339) (@fukusuket)\n- フィールドデータマッピングファイル(`rules/config/data_mapping/*.yaml`)で任意の`Provider_Name`フィールドを指定できるようにし、`Data[x]`表記に対応した。(#1350) (@fukusuket)\n- カウントルールのJSON出力で、フィールド情報が分離されるようになった。 (#1342) (@fukusuket)\n  - 以前: `\"Details\": \"[condition] count() by IpAddress >= 5 in timeframe [result] count:3558 IpAddress:192.168.198.149 timeframe:5m\"`\n  - 現在: `\"Details\": { \"Count\": 3558, \"IpAddress\": \"192.168.198.149\" }`\n\n## 2.15.0 [2024/04/20] \"Sonic Release\"\n\n**改善:**\n\n- Sigmaルールの `windash`フィールド修飾子 (例: `|contains|windash:`と`|contains|all|windash:`)に対応した。 (#1319) (@hitenkoku)\n  - https://sigmahq.io/docs/basics/modifiers.html#windash\n  - 注意: 現在、バックエンドでは、以前のバージョンのHayabusaと互換性があるようにルール内の`windash`の使用を変換しているが、5月末ごろには、`windash`の使用をそのままにする予定なので、それまでにこのバージョンにアップデートしてください。\n\n**バグ修正:**\n\n- バージョン2.14.0では、`-T`の検知頻度タイムライン出力は使用できなかった。 (#1322) (@fukusuket)\n- `windash` でワイルドカードが利用できない問題を修正した。 (#1327) (@hitenkoku)\n\n## 2.14.0 [2024/03/30] \"BSides Tokyo Release\"\n\n**新機能:**\n\n- 指定した`status`のルールのみを利用する`--include-status`オプションを追加した。 (#1193) (@hitenkoku)\n- メモリ使用量を最大95%削減する`-s, --low-memory-mode`(低メモリモード)オプションを追加した。ただし、そのためには結果をソートしたり、`-R, --remove-duplicate-data`または`-X, --remove-duplicate-detections`を併用したりすることはできない。(#1254) (@hach1yon @hitenkoku)\n\n**改善:**\n\n- 未使用のクレートを削除した。(@YamatoSecurity)\n- SplunkからエクスポートしたJSONファイルの入力に対応した。 (#1083) (@hitenkoku)\n- パフォーマンスの改善 (#1277, #1278) (@fukusuket)\n- `csv-timeline`コマンドの結果と同様になるようにするために、`search`コマンドの結果の表示順番を変更した。 (#1297) (@hitenkoku)\n- イースターエッグに最強のキャラクターを追加した。 (#1304) (@hitenkoku)\n- `computer-metrics`コマンドのhelpオプションの表示をほかのコマンドの形式に合わせた。 (#1314) (@hitenkoku)\n\n**バグ修正:**\n\n- `search` コマンドのJSON出力で`AllFieldInfo`フィールドの情報が出力されなくなっていたのを修正した。 (#1251) (@hitenkoku)\n- ウィザードのオプション選択の時間が処理時間の中に含まれていたため除外した。 (#1291) (@hitenkoku)\n- `-h, --help`オプションが重複して複数回表示されていた問題を修正した。 (#1309) (@hitenkoku)\n\n## 2.13.0 [2024/02/11] \"Year Of The Dragon Release\"\n\n**改善:**\n\n- `search` コマンドのフィルタオプションを完全一致にするようにした。加えてフィルタオプションはワイルドカード対応をするようにした。 (#1240) (@hitenkoku)\n- `update-rules`コマンドを実行したときに、検知ルールが変更された場合にルール名を出力するようにした。以前は`modified`フィールドを更新したルールだけが表示されていた。(#1243) (@hitenkoku)\n- `json-timeline`コマンドの標準出力でJSONフォーマットを出力するように修正した。 (#1197) (@hitenkoku)\n- JSON入力でデータが配列内にある場合に解析できるようにした。 (#1248) (@hitenkoku)\n- 古いターミナルでも正しく表示されるように、また読みやすくするために、`‖`区切り文字を`·`区切り文字に変更した。(#1258) (@YamatoSecurity)\n- General Optionsに`-h, --help`オプションを追加した。 (#1255) (@hitenkoku)\n- `json-timeline`コマンドの`Details`の出力で、要素がアルファベット順に並んでいたのをルールに記載されているオリジナルの順番に変更した。 (#1264) (@hitenkoku)\n- ルールをロードする必要のないコマンドを実行した場合、検出ルールのロードをスキップするようにした。 (#1263) (@hitenkoku)\n- `csv-timeline`コマンドの標準出力のカラー出力ルールを変更した。 (#1271) (@hitenkoku)\n- リファクタリングとパフォーマンスの改善。(#1268, #1260) (@hach1yon)\n\n**バグ修正:**\n\n- `search`コマンドの出力に入っている不要な改行文字を削除した。 (#1253) (@hitenkoku)\n- `no-color`オプション使用時のプログレスバーとウィザードのカラー出力を修正した。 (#1256) (@hitenkoku)\n- ローカルのタイムゾーンを特定できない場合にパニックが発生する問題を修正した。`chrono`クレートのバージョン0.4.32で修正された。(#1273)\n\n## 2.12.0 [2023/12/24] \"SECCON Christmas Release\"\n\n**改善:**\n\n- JSON出力において、MitreTactics、MitreTags, OtherTagsの出力を要素ごとに文字列で出力させるように修正した。 (#1230) (@hitenkoku)\n- 検知した端末に対してMITRE ATT&CKの戦術をHTMLレポートに出力できるようにした。この機能を利用するためには利用したプロファイルに`%MitreTactics%`が存在する必要がある。 (#1226) (@hitenkoku)\n- `csv-timeline`または`json-timeline`コマンドが利用されたときにissueやpull-requestの連絡先についてのメッセージを追加した。 (#1236) (@hitenkoku)\n\n**バグ修正:**\n\n- JSON出力において、同じ名前の複数のフィールド名が配列として出力されないため、`jq`でパースすると1つの結果しか返されなかった。同じフィールド名を持つ複数のフィールドデータを配列内に出力することで修正した。 (#1202) (@hitenkoku)\n- `csv-timeline`、`json-timeline`、`eid-metrics`、`logon-summary`、`pivot-keywords-list`、`search`コマンドで調査対象ファイルの指定オプション(`-l`、 `-f`、 `-d`)が存在しないときに処理が実行されないように修正した。 (#1235) (@hitenkoku)\n\n## 2.11.0 [2023/12/03] \"Nasi Lemak Release\"\n\n**新機能:**\n\n- PowerShell classicログのフィールドを抽出するようにした。(`--no-pwsh-field-extraction`で無効化できる) (#1220) (@fukusuket)\n\n**改善:**\n\n- スキャンウィザードにルール数を追加した. (#1206) (@hitenkoku)\n\n## 2.10.1 [2023/11/12] \"Kamemushi Release\"\n\n**改善:**\n\n- スキャンウィザードに質問を追加した。 (#1207) (@hitenkoku)\n\n**バグ修正:**\n\n- バージョン`2.10.0`の`update-rules`コマンドでは、新しいルールがダウンロードされても、`You currently have the latest rules`というメッセージを出力していた。 (#1209) (@fukusuket)\n- 正規表現が正しく処理されない場合があった。 (#1212) (@fukusuket)\n- JSON入力等に`Data`フィールドが存在しない場合、パニックが発生していた。(#1215) (@fukusuket)\n\n## 2.10.0 [2023/10/31] \"Halloween Release\"\n\n**改善:**\n\n- 初心者のユーザのために有効にしたいルールを選択するようにスキャンウィザードを追加した。`-w, --no-wizard`オプションを追加すると、従来の形式でHayabusaを実行できる。(すべてのイベントとアラートをスキャンし、オプションを手動でカスタマイズする） (#1188) (@hitenkoku)\n- `pivot-keywords-list`コマンドに`--include-tag`オプションを追加し、指定した`tags`フィールドを持つルールのみをロードするようにした。(#1195) (@hitenkoku)\n- `pivot-keywords-list`コマンドに`--exclude-tag`オプションを追加し、指定した`tags`フィールドを持つルールをロードしないようにした。(#1195) (@hitenkoku)\n\n**バグ修正:**\n\n- まれにJSONフィールドが正しくパースされない状態を修正した。(#1145) (@hitenkoku)\n- JSON出力で、`AllFieldInfo`は改行文字とタブ文字を除去していたが、出力するように修正した。 (#1189) (@hitenkoku)\n- 標準出力のいくつかのフィールドでスペースが削除されて見づらくなっていたのを修正した。 (#1192) (@hitenkoku)\n\n## 2.9.0 [2023/09/22] \"Autumn Rain Release\"\n\n**改善:**\n\n- ディレクトリパスの指定にバックスラッシュを使用すべきではないことを示すエラーメッセージを追加した。 (#1166) (@hitenkoku, 提案者: @joswr1ght)\n- 一度に読み込むレコード数の最適化。(#1175) (@yamatosecurity)\n- プログレスバー内にあるバックスラッシュの表示をスラッシュに変更した。 (#1172) (@hitenkoku)\n- JSON形式で出力する際に、`count`ルールの`Details`フィールドを文字列にし、パースしやすくした。(#1179) (@hitenkoku)\n- デフォルトのスレッド数をCPU数から、プログラムが使用すべきデフォルトの並列度の推定値(`std::thread::available_parallelism`)に変更した。(#1182) (@hitenkoku)\n\n**バグ修正:**\n\n- まれにJSONフィールドが正しくパースされない状態を修正した。(#1145) (@hitenkoku)\n\n**その他:**\n\n- CIを通すために`time`クレートを利用している更新されていない`hhmmss`クレートを除外した。 (#1181) (@hitenkoku)\n\n## 2.8.0 [2023/09/01] \"Double X Release\"\n\n**新機能:**\n\n- フィールドマッピング設定に16進数値を10進数に変換する`HexToDecimal`機能に対応した。 (元の16進数のプロセスIDを変換するのに便利。) (#1133) (@fukusuket)\n- `csv-timeline`と`json-timeline`に`-x, --recover-records`オプションを追加し、evtxのスラックスペースのファイルカービングによってevtxレコードを復元できるようにした。(#952) (@hitenkoku) (Evtxカービング機能は@forensicmattに実装された。)\n- `csv-timeline`と`json-timeline`に`-X, --remove-duplicate-detections`オプションを追加した。(`-x`を使用する場合、重複データのあるバックアップログを含める場合などに便利。) (#1157) (@fukusuket)\n- `csv-timeline`、`json-timeline`、`logon-summary`、`eid-metrics`、`pivot-keywords-list`、`search`コマンドに、直近のイベントだけをスキャンするための`--timeline-offset`オプションを追加した。 (#1159) (@hitenkoku)\n- `search`コマンドに`-a, --and-logic`オプションを追加し、複数のキーワードをAND条件で検索できるようにした。 (#1162) (@hitenkoku)\n\n**その他:**\n\n- 出力プロファイルに、回復されたかどうかを示す `%RecoveredRecord%` フィールドを追加した。 (#1170) (@hitenkoku)\n\n## 2.7.0 [2023/08/03] \"SANS DFIR Summit Release\"\n\n**新機能:**\n\n- `./rules/config/data_mapping`にある`.yaml`設定ファイルに基づいて、特定のコード番号が人間が読めるメッセージにマッピングされるようになった。(例:`%%2307`は、`ACCOUNT LOCKOUT`に変換される)。この動作は`-F, --no-field-data-mapping`オプションで無効にできる。(#177) (@fukusuket)\n- `csv-timeline`コマンドに`-R, --remove-duplicate-data`オプションを追加し、`%Details%`、`%AllFieldInfo%`、`%ExtraFieldInfo%`列の重複フィールドデータを`DUP`という文字列に変換し、ファイルサイズの削減を行う。(#1056) (@hitenkoku)\n- `csv-timeline`と`json-timeline`コマンドに`-P, --proven-rules`オプションを追加した。有効にすると、検知が証明されたルールしかロードされない。ロードされるルールは、`./rules/config/proven_rules.txt`の設定ファイルにルールIDで定義されている。 (#1115) (@hitenkoku)\n- `csv-timeline`と`json-timeline`コマンドに`--include-tag`オプションを追加し、指定した`tags`フィールドを持つルールのみをロードするようにした。(#1108) (@hitenkoku)\n- `csv-timeline`と`json-timeline`コマンドに`--exclude-tag`オプションを追加し、指定した`tags`フィールドを持つルールをロードしないようにした。(#1118) (@hitenkoku)\n- `csv-timeline`と`json-timeline`コマンドに`--include-category`と`--exclude-category`オプションを追加した。`include-category`は、指定された`category`フィールドのルールのみをロードする。`--exclude-category`は、指定された`category`フィールドを持つルールをロードしない。 (#1119) (@hitenkoku)\n- コンピュータ名に基づくイベント数をリストアップする`computer-metrics`コマンドを追加した。(#1116) (@hitenkoku)\n- `csv-timeline`、`json-timeline`、`metrics`、`logon-summary`、`pivot-keywords-list`コマンドに`--include-computer`と`--exclude-computer`オプションを追加した。`include-computer`は、指定された`computer`の検知のみを出力する。`--exclude-computer`は、指定された`computer`の検知を除外する。 (#1117) (@hitenkoku)\n- `csv-timeline`、`json-timeline`、`pivot-keywords-list`コマンドに`--include-eid`と`--exclude-eid`オプションを追加した。`include-eid`は、指定された`EventID`のみを検知対象とする。`--exclude-eid`は、指定された`EventID`を検知対象から除外する。 (#1130) (@hitenkoku)\n- `json-timeline`コマンドに`-R, --remove-duplicate-data`オプションを追加し、`%Details%`、`%AllFieldInfo%`、`%ExtraFieldInfo%`フィールドの重複フィールドデータを`DUP`という文字列に変換し、ファイルサイズの削減を行う。(#1134) (@hitenkoku)\n\n**改善:**\n\n- 新しいログ形式の`.evtx`を使用するWindows Vistaがリリースされた2007年1月31日以前のタイムスタンプを持つ破損されたイベントレコードを無視するようにした。(#1102) (@fukusuket)\n- `metrics`コマンドで`--output`オプションを指定した時に標準出力に結果を表示しないように変更した。 (#1099) (@hitenkoku)\n- `csv-timeline` コマンドと `json-timeline` コマンドに `--tags` オプションを追加し、指定した `tags` フィールドを持つルールのみでスキャンできるようにした。(#1108) (@hitenkoku)\n- `pivot-keywords-list`コマンドに対して、出力ファイルを上書きするための`-C, --clobber`オプションを追加した。 (#1125) (@hitenkoku)\n- `metrics`コマンドを`eid-metrics`に変更した。 (#1128) (@hitenkoku)\n- 端末の調整に余裕を持たせるため、プログレスバーの幅を減らした。 (#1135) (@hitenkoku)\n- `search`コマンドで出力時間フォーマットのオプションをサポートした。(`--European-time`, `--ISO-8601`, `--RFC-2822`, `--RFC-3339`, `--US-time`, `--US-military-time`, `-U, --UTC`) (#1040) (@hitenkoku)\n- プログレスバーのETA時間が正確でなかったため、経過時間に置き換えた。 (#1143) (@YamatoSecurity)\n- `logon-summary`コマンドで`--timeline-start`と`--timeline-end`オプションを追加した。 (#1152) (@hitenkoku)\n\n**バグ修正:**\n\n- `metrics`と`logon-summary`コマンドのレコード数の表示が`csv-timeline`のコマンドでのレコード数の表示と異なっている状態を修正した。 (#1105) (@hitenkoku)\n- パスの代わりにルールIDでルール数を数えるように変更した。 (#1113) (@hitenkoku)\n- JSON出力で`CommandLine`フィールド内で誤ったフィールドの分割が行われてしまう問題を修正した。 (#1145) (@hitenkoku)\n- `json-timeline`コマンドで`--timeline-start`と`--timeline-end`オプションが動作しなかったのを修正した。 (#1148) (@hitenkoku)\n- `pivot-keywords-list`コマンドで`--timeline-start`と`--timeline-end`オプションが動作しなかったのを修正した。 (#1150) (@hitenkoku)\n\n**その他:**\n\n- ルールのIDベースでユニークな検出数をカウントするように修正した。 (#1111) (@hitenkoku)\n- `--live_analysis`オプションを`--live-analysis`に変更した。 (#1139) (@hitenkoku)\n- `metrics`コマンドを`eid-metrics`に変更した。 (#1128) (@hitenkoku)\n\n## 2.6.0 [2023/06/16] \"Ajisai Release\"\n\n**新機能:**\n\n- Sigmaルールの`'|all':`キーワードに対応した。 (#1038) (@kazuminn)\n\n**改善:**\n\n- プロファイルに`%ExtraFieldInfo%`エイリアスを追加した。デフォルトの`standard`出力プロファイルに含まれるようになった。(#900) (@hitenkoku)\n- 互換性のない引数に対するエラーメッセージを追加した。 (#1054) (@YamatoSecurity)\n- 標準出力とHTML出力にプロファイル名を出力する機能を追加した。 (#1055) (@hitenkoku)\n- HTML出力のルールアラートにルール作者名を表示するように修正した。 (#1065) (@hitenkoku)\n- 端末サイズが小さくてもテーブルが壊れないように、テーブル幅を短くした。 (#1071) (@hitenkoku)\n- `csv-timeline`、`json-timeline`、`metrics`、`logon-summary`、`search`コマンドに対して、出力ファイルを上書きするための`-C, --clobber`オプションを追加した。 (#1063) (@YamatoSecurity, @hitenkoku)\n- HTML内にCSSと画像を組み込んだ。 (#1078) (@hitenkoku, 提案者: @joswr1ght)\n- 出力時の速度向上。 (#1088) (@hitenkoku, @fukusuket)\n- `metrics`コマンドは、テーブルが正しくレンダリングされるように、ワードラップを行うようになった。 (#1067) (@garigariganzy)\n- `search`コマンドでJSON/JSONLの出力できるようにした。 (#1041) (@hitenkoku)\n\n**バグ修正:**\n\n- `json-timeline`コマンドを利用した出力で、`MitreTactics`、`MitreTags`、`OtherTags`フィールドが出力されていない問題を修正した。 (#1062) (@hitenkoku)\n- `no-summary`オプションを使用した時にイベント頻度のタイムラインが出力されない問題を修正した。 (#1072) (@hitenkoku)\n- `json-timline`コマンドの出力に制御文字が含まれる問題を修正した。 (#1068) (@hitenkoku)\n- `metrics`コマンドでは、チャンネル名が小文字の場合、省略されなかった。 (#1066) (@garigariganzy)\n- JSON出力内でいくつかのフィールドがずれてしまっていた問題を修正した。 (#1086) (@hitenkoku)\n\n## 2.5.1 [2023/05/14] \"Mothers Day Release\"\n\n**改善:**\n\n- 新たに変換されたルールを使用する際のメモリ使用量を半分に削減した。(#1047) (@fukusuket)\n\n**バグ修正:**\n\n- `AccessMask`等のフィールド内の情報が空白で区切られていなかった状態を修正した。 (#1035) (@hitenkoku)\n- JSON形式に出力時に複数の空白が一つの空白に変換されていた。 (#1048) (@hitenkoku)\n- `pivot-keywords-list`コマンドで`--no-color`を使用した場合でも、結果がカラーで出力された。 (#1044) (@kazuminn)\n\n## 2.5.0 [2023/05/07] \"Golden Week Release\"\n\n**改善:**\n\n- `search`コマンドに`-M, --multiline`オプションを追加した。 (#1017) (@hitenkoku)\n- `search`コマンドの出力での不要な改行やタブを削除した。 (#1003) (@hitenkoku)\n- 正規表現の不要なエスケープを許容し、パースエラーを減らす`regex`クレートを1.8に更新した。(#1018) (@YamatoSecurity)\n- `csv-timeline`コマンドの出力で不要な空白文字の削除を行った。 (#1019) (@hitenkoku)\n- `update-rules`コマンド使用時にハヤブサのバージョン番号の詳細を確認するようにした (#1028) (@hitenkoku)\n- `search`コマンドの結果を時刻順にソートした。 (#1033) (@hitenkoku)\n- `pivot-keywords-list`のターミナル出力の改善。 (#1022) (@kazuminn)\n\n**バグ修正:**\n\n- ruleで指定された値で`\\`が最後の文字のときに、検知ができない問題を修正した。 (#1025) (@fukusuket)\n- results summary内のInformationalレベルアラートの結果が同じ内容が2つ表示されている状態を修正した。 (#1031) (@hitenkoku)\n\n## 2.4.0 [2023/04/19] \"SANS Secure Korea Release\"\n\n**新機能:**\n\n- 指定されたキーワードに合致したレコードを検索する`search`コマンドを追加した。 (#617) (@itiB, @hitenkoku)\n- 指定された正規表現に合致したレコードを検索する`-r, --regex`オプションを`search`コマンドに追加した。 (#992) (@itiB)\n- Aho-Corasickクレートをversino1.0に更新した。 (#1013) (@hitenkoku)\n\n**改善:**\n\n- コマンドの表示順を辞書順に並べ替えた。 (#991) (@hitenkoku)\n- `csv-timeline`, `json-timeline`, `search`コマンドの `AllFieldInfo`の出力に`Event.UserData`の属性情報を追加した。 (#1006) (@hitenkoku)\n\n**バグ修正:**\n\n- v2.3.3にて`-T, --visualize-timeline`データの中に存在していないタイムスタンプがイベント頻度のタイムラインに出力するバグを修正した。 (#977) (@hitenkoku)\n\n## 2.3.3 [2023/04/07] \"Sakura Release\"\n\n**改善:**\n\n- ファイル(CSV, JSON, JSONL)出力の際にルールの`level`の余分なスペースを削除した。 (#979) (@hitenkoku)\n- `-M, --multiline`オプション利用時にルール作者名の出力を複数行出力対応をした。 (#980) (@hitenkoku)\n- Stringの代わりにCoWを利用することで、約5%の速度向上を実現した。 (#984) (@hitenkoku)\n- Clapの新バージョンでロゴ後のメッセージとUsageテキストの出力色が緑にならないように修正した。 (#989) (@hitenkoku)\n\n**バグ修正:**\n\n- v2.3.0にて`level-tuning`コマンド実行時にクラッシュする問題を修正した。 (#977) (@hitenkoku)\n\n## 2.3.2 [2023/03/22] \"TMCIT Release-3\"\n\n**改善:**\n\n- `csv-timeline`コマンドに`-M, --multiline`オプションを追加した。 (#972) (@hitenkoku)\n\n## 2.3.1 [2023/03/18] \"TMCIT Release-2\"\n\n**改善:**\n\n- `csv-timeline`の出力のフィールドでダブルクォートを追加した。 (#965) (@hitenkoku)\n- `logon-summary`の見出しを更新した。 (#964) (@yamatosecurity)\n- `--enable-deprecated-rules`の`-D`ショートオプションと`--enable-unsupported-rules`の`-u`ショートオプションを追加した。(@yamatosecurity)\n- Filteringセクションのオプションの表示順とヘルプの表示内容を修正した。 (#969) (@hitenkoku)\n\n**バグ修正:**\n\n- v2.3.0にて`update-rules`コマンド実行時にクラッシュする問題を修正した。 (#965) (@hitenkoku)\n- コマンドプロンプトとPowerShellプロンプトではヘルプメニューのタイトルに長いアンダーバーが表示されていた問題が修正された。 (#911) (@yamatosecurity)\n\n## 2.3.0 [2023/03/16] \"TMCIT Release\"\n\n**新機能:**\n\n- 新たなパイプキーワードの`|cidr`に対応した。 (#961) (@fukusuket)\n- 新たなキーワードの`1 of selection*`と`all of selection*`に対応した。 (#957) (@fukusuket)\n- 新たなパイプキーワードの`|contains|all`に対応した。 (#945) (@hitenkoku)\n- ステータスが`unsupported`となっているルールの件数を表示した。ステータス`unsupported`のルールも検知対象とするオプションとして`--enable-supported-rules`オプションを追加した。 (#949) (@hitenkoku)\n\n**改善:**\n\n- 文字列が含まれているかの確認処理を改善することで約2-3%の速度改善をした。(#947) (@hitenkoku)\n\n**バグ修正:**\n\n- 一部のイベントタイトルが定義されていても、`metrics`コマンドで`Unknown`と表示されることがあった。 (#943) (@hitenkoku)\n\n## 2.2.2 [2023/2/22] \"Ninja Day Release\"\n\n**新機能:**\n\n- 新たなパイプキーワード(`|base64offset|contains`)に対応した。 (#705) (@hitenkoku)\n\n**改善:**\n\n- オプションのグループ分けを再修正した。(#918)(@hitenkoku)\n- JSONL形式のログを読み込む際のメモリ使用量を約75%削減した。 (#921) (@fukusuket)\n- `rules/config/generic_abbreviations.txt`によってチャンネル名の一般的な単語名を省略する機能をmetrics、json-timeline、csv-timelineに追加した。 (#923) (@hitenkoku)\n- evtxクレートを更新することにより、パースエラーを減少させた。 (@YamatoSecurity)\n- Provider名(`%Provider%`)のフィールドに対する出力文字の省略機能を追加した。 (#932) (@hitenkoku)\n- `metrics`コマンドで`-d`オプションが指定されたときに最初と最後のイベントのタイムスタンプを表示する機能を追加した。 (#935) (@hitenkoku)\n- 結果概要に最初と最後のイベントのタイムスタンプを表示した。 (#938) (@hitenkoku)\n- `logon-summary`と`metrics`コマンドに時刻表示のオプションを追加した. (#938) (@hitenkoku)\n- `json-output`コマンドで`--output`で出力される結果に`\\r`、`\\n`、`\\t`を出力するようにした。 (#940) (@hitenkoku)\n\n**バグ修正:**\n\n- `logon-summary`と`metrics`コマンドで、最初と最後のタイムスタンプが出力されない不具合を修正した。 (#920) (@hitenkoku)\n- `metrics`コマンドで全てのイベントのタイトルが表示されない問題を修正した。 (#933) (@hitenkoku)\n\n## 2.2.0 [2022/2/12] \"SECCON Release\"\n\n**新機能:**\n\n- JSON形式のイベントログファイルの入力(`-J, --JSON-input`)に対応した。 (#386) (@hitenkoku)\n- MaxMindのGeoIPデータベースに基づき、送信元および送信先IPアドレスのASN組織、都市、国を出力することによるログエンリッチメント(`-G, --GeoIP`)を実現した。 (#879) (@hitenkoku)\n- `-e, --exact-level`オプションで指定したレベルに対する結果のみを取得する機能を追加した。 (#899) (@hitenkoku)\n\n**改善:**\n\n- HTMLレポートの出力に実行したコマンドラインを追加した。 (#877) (@hitenkoku)\n- イベントIDの完全比較を行うことで、約3%の速度向上とメモリ使用量の削減を実現した。 (#882) (@fukusuket)\n- 正規表現使用前のフィルタリングにより、約14%の速度向上とメモリ使用量の削減を実現した。 (#883) (@fukusuket)\n- 正規表現ではなく大文字小文字を区別しない比較により、約8%の速度向上とメモリ使用量の削減を実現した。 (#884) (@fukusuket)\n- ワイルドカード表現における正規表現の使用量を削減することで、約5%の速度向上とメモリ使用量の削減を実現した。 (#890) (@fukusuket)\n- 正規表現の使用を避けることで、さらなる高速化とメモリ使用量の削減を実現した。 (#894) (@fukusuket)\n- 正規表現の使用量を減らすことで、約3%の速度向上と約10%のメモリ使用量削減を実現した。 (#898) (@fukuseket)\n- ライブラリの更新によって`-T, --visualize-timeline`の出力を複数行にするように変更した。 (#902) (@hitenkoku)\n- JSON/L形式のログを読み込む際のメモリ使用量を約50%削減した。 (#906) (@fukusuket)\n- Longオプションを基にしたオプションの並べ替えを行った。 (#904) (@hitenkoku)\n- `-J, --JSON-input`オプションを`logon-summary`, `metrics`, `pivot-keywords-list`コマンドに対応させた。 (#908) (@hitenkoku)\n\n**バグ修正:**\n\n- ルールの条件にバックスラッシュが4つある場合、ルールがマッチしない不具合を修正した。 (#897) (@fukuseket)\n- JSON出力では、PowerShell EID 4103をパースする際に`Payload`フィールドが複数のフィールドに分離されるバグを修正した。(#895) (@hitenkoku)\n- ファイルサイズ取得の際にpanicが発生するのを修正した。 (#914) (@hitenkoku)\n\n**脆弱性修正:**\n\n- ルールや設定ファイルを更新する際に起こりうるSSH MITM攻撃(CVE-2023-22742)を防ぐため、git2およびgitlib2クレートを更新した。 (#888) (@YamatoSecurity)\n\n## 2.1.0 [2023/01/10] \"Happy Year of the Rabbit Release\"\n\n**改善:**\n\n- 速度の改善。 (#847) (@hitenkoku)\n- 出力の改善を行うことによる速度の改善。 (#858) (@fukusuket)\n- 実行ごとに同じ時間の検知の出力の順番のソートを行っていないのを修正した。 (#827) (@hitenkoku)\n\n**バグ修正:**\n\n- ログオン情報の出力機能で`--output`を指定したときにログオン成功のcsv出力ができない問題を修正した。 (#849) (@hitenkoku)\n- `-J, --jsonl`を指定したときに不要な改行が含まれていたため修正した。 (#852) (@hitenkoku)\n\n## 2.0.0 [2022/12/24] \"Merry Christmas Release\"\n\n**新機能:**\n\n- コマンドの使用方法とヘルプメニューはサブコマンドで行うようにした。 (#656) (@hitenkoku)\n\n## 1.9.0 [2022/12/24] \"Merry Christmas Release\"\n\n**新機能:**\n\n- 新たなパイプキーワード(`|endswithfield`)に対応した。 (#740) (@hach1yon)\n- 実行時のメモリ利用率を表示する機能を追加した。`--debug`オプションで利用可能。 (#788) (@fukusuket)\n\n**改善:**\n\n- Clap Crateパッケージの更新。更新の関係で`--visualize-timeline` のショートオプションの`-V`を`-T`に変更した。 (#725) (@hitenkoku)\n- ログオン情報の出力でログオンタイプ、送信元の端末名とIPアドレス等を出力できるようにした。また、ログオンに失敗の一覧も出力するようにした。 (#835) (@garigariganzy @hitenkoku)\n- 速度とメモリ使用の最適化。 (#787) (@fukusuket)\n- イースターエッグのASCIIアートをカラー出力するようにした。 (#839) (@hitenkoku)\n- `--debug`オプションをオプションの一覧から非表示にした。 (#841) (@hitenkoku)\n\n**バグ修正:**\n\n- コマンドプロンプトで`-d`オプションを設定した際にダブルクォーテーションで囲んだときにevtxファイルの収集ができていないバグを修正した。 (#828) (@hitenkoku)\n- ルールのパースエラーが発生した際に不必要な改行が出力されていたのを修正した。 (#829) (@hitenkoku)\n\n## 1.8.1 [2022/11/21]\n\n**改善:**\n\n- インポートしているcrateのRustバージョンによるビルドエラーを回避するためにCargo.tomlに`rust-version`を追加した。(#802) (@hitenkoku)\n- メモリ使用の削減。 (#806) (@fukusuket)\n- WEC機能を利用したevtxファイルのレンダーされたメッセージを出力するための`%RenderedMessage%`フィールドを追加した。 (#760) (@hitenkoku)\n\n**バグ修正:**\n\n- `Data`フィールドを使ったルールが検知できていない問題を修正した。 (#775) (@hitenkoku)\n- プロファイルの出力で`%MitreTags%` と`%MitreTactics%` の出力が抜け落ちてしまう問題を修正した。 (#780) (@fukusuket)\n\n## 1.8.0 [2022/11/07]\n\n**新機能:**\n\n- 新たな時刻表示のオプションとして`--ISO-8601`を追加した。 (#574) (@hitenkoku)\n\n**改善:**\n\n- イベントIDによるフィルタリングをデフォルトでは動作しないようにした。イベントIDフィルタを利用するためのオプション`-e, --eid-filter`を追加した。 (#759) (@hitenkoku)\n- 異なるユーザアカウントで新しいルールをダウンロードしようとしたときに、分かりやすいエラーメッセージを表示する。 (#758) (@fukusuket)\n- 合計およびユニークな検知数の情報をHTMLレポートに追加した。 (#762) (@hitenkoku)\n- JSONの出力の中にある各検知内容のオブジェクトを持つ不要な配列の構造を削除した。 (#766)(@hitenkoku)\n- プロファイルで出力できる情報にルール作成者(`%RuleAuthor%`)、 ルール作成日(`%RuleCreationDate%`)、 ルール修正日(`%RuleModifiedDate%`)、ルールステータス(`%Status%`)を追加した。 (#761) (@hitenkoku)\n- JSON出力のDetailsフィールドをオブジェクト形式で出力するように変更した。 (#773) (@hitenkoku)\n- `build.rs`を削除し、メモリアロケータをmimallocに変更した。Intel系OSでは20-30%の速度向上が見込める。 (#657) (@fukusuket)\n- プロファイルの`%RecordInformation%` エイリアスを `%AllFieldInfo%` に変更した。 AllFieldInfoフィールドをJSONオブジェクト形式で出力するように変更した。 (#750) (@hitenkoku)\n- AllFieldInfoフィールドのJSONオブジェクト内で利用していたHBFI-プレフィックスを廃止した。 (#791) (@hitenkoku)\n- `--no-summary`  オプションを使用したときに、表示しないルール作者および検知回数の集計を省略した。(Velociraptorエージェントを利用するときに有用です。10%はこのオプションの付与により高速化します) (#780) (@hitenkoku)\n- メモリ使用量を少なくし、処理速度を改善した。 (#778 #790) (@hitenkoku)\n- 検知したルール作者のリストが空の時にルール作者のリストを表示しないように修正した。(#795) (@hitenkoku)\n- プロファイルで出力できる情報にルールID(`%RuleID%`)、プロバイダー名情報(`%Provider%`)を追加した。 (#794) (@hitenkoku)\n\n**バグ修正:**\n\n- ルール作者数の集計に誤りがあったのを修正した。 (#783) (@hitenkoku)\n\n## 1.7.2 [2022/10/17]\n\n**新機能:**\n\n- 利用可能な出力プロファイルの一覧を出力する`--list-profiles` オプションを追加した。 (#746) (@hitenkoku)\n\n**改善:**\n\n- 見やすくするためにファイル保存の出力をする位置とupdateオプションの出力を変更した。 (#754) (@YamatoSecurity)\n- 検知したルールの作者名の最大文字数を40文字にした。 (#751) (@hitenkoku)\n\n**バグ修正:**\n\n- フィールド内にドライブレター(ex c:)が入っていた場合JSON/JSONL出力機能のフィールドの値がずれてしまっていたバグを修正した。 (#748) (@hitenkoku)\n\n## 1.7.1 [2022/10/10]\n\n**改善:**\n\n- より正確な結果を出力するために、チャンネルとEIDの情報を`rules/config/channel_eid_info.txt`に基づいてチェックするようにした。 (#463) (@garigariganzy)\n- 検知ルールを利用しないオプション(`-M`と`-L`オプション)の時のメッセージの出力内容を修正した。 (#730) (@hitenkoku)\n- 検出したルールの作者名を標準出力に追加した。 (#724) (@hitenkoku)\n- チャンネル情報が`null`となっているレコード(ETWイベント)を検知およびmetricの対象から除外した。 (#727) (@hitenkoku)\n\n**バグ修正:**\n\n- mericオプションのEventIDのキー名の数え上げが原因となっていたイベント集計の誤りを修正した。 (#729) (@hitenkoku)\n\n## 1.7.0 [2022/09/29]\n\n**新機能:**\n\n- HTMLレポート機能 (`-H, --html-report`)の追加。 (#689) (@hitenkoku, @nishikawaakira)\n\n**改善:**\n\n- EventID解析のオプションをmetricsオプションに変更した。(旧: `-s, --statistics` -> 新: `-M, --metrics`) (#706) (@hitenkoku)\n- ルール更新オプション(`-u`)を利用したときにHayabusaの新バージョンがないかを確認し、表示するようにした。 (#710) (@hitenkoku)\n- HTMLレポート内にロゴを追加した。 (#714) (@hitenkoku)\n- メトリクスオプション(`-M --metrics`)もしくはログオン情報(`-L --logon-summary`)と`-d`オプションを利用した場合に1つのテーブルで表示されるように修正した。 (#707) (@hitenkoku)\n- メトリクスオプションの結果出力にチャンネル列を追加した。 (#707) (@hitenkoku)\n- メトリクスオプション(`-M --metrics`)もしくはログオン情報(`-L --logon-summary`)と`-d`オプションを利用した場合に「First Timestamp」と「Last Timestamp」の出力を行わないように修正した。 (#707) (@hitenkoku)\n- メトリクスオプションとログオン情報オプションに対してcsv出力機能(`-o --output`)を追加した。 (#707) (@hitenkoku)\n- メトリクスオプションの出力を検出回数と全体の割合が1つのセルで表示されていた箇所を2つの列に分けた。 (#707) (@hitenkoku)\n- メトリクスオプションとログオン情報の画面出力に利用していたprettytable-rsクレートをcomfy_tableクレートに修正した. (#707) (@hitenkoku)\n- HTMLレポート内にfavicon.pngを追加した。 (#722) (@hitenkoku)\n\n## v1.6.0 [2022/09/16]\n\n**新機能:**\n\n- 解析結果をJSONに出力する機能(`-j, --json-timeline`)を追加した。 (#654) (@hitenkoku)\n- 解析結果をJSONL形式で出力する機能 (`-J, --jsonl` )を追加した。 (#694) (@hitenkoku)\n\n**改善:**\n\n- 結果概要に各レベルで検知した上位5つのルールを表示するようにした。 (#667) (@hitenkoku)\n- 結果概要を出力しないようにするために `--no-summary` オプションを追加した。 (#672) (@hitenkoku)\n- 結果概要の表示を短縮させた。 (#675 #678) (@hitenkoku)\n- channel_abbreviations.txtによるChannelフィールドのチェックを大文字小文字の区別をなくした。 (#685) (@hitenkoku)\n- 出力結果の区切り文字を`|`から`‖`に変更した。 (#687) (@hitenkoku)\n- 結果概要の検知数と総イベント数の数に色付けを行い見やすくした。 (#690) (@hitenkoku)\n- evtxクレートを0.8.0にアップデート。(ヘッダーや日付の値が無効な場合の処理が改善された。)\n- 出力プロファイルの更新。（@YamatoSecurity)\n\n**バグ修正:**\n\n- ログオン情報の要約オプションを追加した場合に、Hayabusaがクラッシュしていたのを修正した。 (#674) (@hitenkoku)\n- configオプションで指定したルールコンフィグの読み込みができていない問題を修正した。 (#681) (@hitenkoku)\n- 結果概要のtotal eventsで読み込んだレコード数が出力されていたのを、検査対象にしているevtxファイルの実際のレコード数に修正した。 (#683) (@hitenkoku)\n\n## v1.5.1 [2022/08/20]\n\n**改善:**\n\n- TimesketchにインポートできるCSV形式を出力するプロファイルを追加して、v1.5.1を再リリースした。 (#668) (@YamatoSecurity)\n\n## v1.5.1 [2022/08/19]\n\n**バグ修正:**\n\n- Critical, medium、lowレベルのアラートはカラーで出力されていなかった。 (#663) (@fukusuket)\n- `-f`で存在しないevtxファイルが指定された場合は、Hayabusaがクラッシュしていた。 (#664) (@fukusuket)\n\n## v1.5.0 [2022/08/18]\n\n**新機能:**\n\n- `config/profiles.yaml`と`config/default_profile.yaml`の設定ファイルで、出力内容をカスタマイズできる。 (#165) (@hitenkoku)\n- 対象のフィールドがレコード内に存在しないことを確認する `null` キーワードに対応した。 (#643) (@hitenkoku)\n\n**改善:**\n\n- ルールのアップデート機能のルールパスの出力から./を削除した。 (#642) (@hitenkoku)\n- MITRE ATT&CK関連のタグとその他タグを出力するための出力用のエイリアスを追加した。 (#637) (@hitenkoku)\n- 結果概要の数値をカンマをつけて見やすくした。 (#649) (@hitenkoku)\n- `-h`オプションでメニューを使いやすいようにグループ化した。 (#651) (@YamatoSecurity and @hitenkoku)\n- 結果概要内の検知数にパーセント表示を追加した。 (#658) (@hitenkoku)\n\n**バグ修正:**\n\n- aggregation conditionのルール検知が原因で検知しなかったイベント数の集計に誤りがあったので修正した。 (#640) (@hitenkoku)\n- 一部のイベント（0.01%程度）が検出されないレースコンディションの不具合を修正した。 (#639 #660) (@fukusuket)\n\n## v1.4.3 [2022/08/03]\n\n**バグ修正:**\n\n- VC再頒布パッケージがインストールされていない環境でエラーが発生している状態を修正した。 (#635) (@fukusuket)\n\n## v1.4.2 [2022/07/24]\n\n**改善:**\n\n- `--update-rules` オプションを利用する時に、更新対象のレポジトリを`--rules`オプションで指定できるようにした。 (#615) (@hitenkoku)\n- 並列処理の改善による高速化。 (#479) (@kazuminn)\n- `--output`オプションを利用したときのRulePathをRuleFileに変更した。RuleFileは出力するファイルの容量を低減させるためにファイル名のみを出力するようにした。 (#623) (@hitenkoku)\n\n**バグ修正:**\n\n- `cargo run`コマンドでhayabusaを実行するとconfigフォルダの読み込みエラーが発生する問題を修正した。 (#618) (@hitenkoku)\n\n## v1.4.1 [2022/06/30]\n\n**改善:**\n\n- ルールや`./rules/config/default_details.txt` に対応する`details`の記載がない場合、すべてのフィールド情報を結果の``Details`列に出力するようにした (#606) (@hitenkoku)\n- `--deep-scan`オプションの追加。 このオプションがない場合、`config/target_event_ids.txt`で指定されたイベントIDのみをスキャン対象とします。 このオプションをつけることですべてのイベントIDをスキャン対象とします。(#608) (@hitenkoku)\n- `-U, --update-rules`オプションで`channel_abbreviations.txt`、`statistics_event_info.txt`、`target_event_IDs.txt`を更新できるように、`config`ディレクトリから`rules/config`ディレクトリに移動した。\n\n## v1.4.0 [2022/06/26]\n\n**新機能:**\n\n- `--target-file-ext` オプションの追加。evtx以外の拡張子を指定する事ができます。ただし、ファイルの中身の形式はevtxファイル形式である必要があります。 (#586) (@hitenkoku)\n- `--exclude-status` オプションの追加。ルール内の`status`フィールドをもとに、読み込み対象から除外するフィルタを利用することができます。 (#596) (@hitenkoku)\n\n**改善:**\n\n- ルール内に`details`フィールドがないときに、`rules/config/default_details.txt`に設定されたデフォルトの出力を行えるようにした。 (#359) (@hitenkoku)\n- Clap Crateパッケージの更新 (#413) (@hitenkoku)\n- オプションの指定がないときに、`--help`と同じ画面出力を行うように変更した。(#387) (@hitenkoku)\n- hayabusa.exeをカレントワーキングディレクトリ以外から動作できるようにした。 (#592) (@hitenkoku)\n- `output` オプションで指定されファイルのサイズを出力するようにした。 (#595) (@hitenkoku)\n\n**バグ修正:**\n\n- カラー出力で長い出力があった場合にエラーが出て終了する問題を修正した。 (#603) (@hitenkoku)\n- `Excluded rules`の合計で`rules/tools/sigmac/testfiles`配下のテストルールも入っていたので、無視するようにした。 (#602) (@hitenkoku)\n\n## v1.3.2 [2022/06/13]\n\n- evtxクレートを0.7.2から0.7.3に更新し、パッケージを全部更新した。 (@YamatoSecurity)\n\n## v1.3.1 [2022/06/13]\n\n**新機能:**\n\n- ルール内の`details`で複数の`Data`レコードから特定のデータを指定して出力できるようにした。 (#487) (@hitenkoku)\n- 読み込んだルールのステータス情報の要約を追加した。 (#583) (@hitenkoku)\n\n**改善:**\n\n- LinuxとmacOSのバイナリサイズをより小さくするために、デバッグシンボルをストリップします。(#568) (@YamatoSecurity)\n- Crateパッケージの更新 (@YamatoSecurity)\n- 新たな時刻表示のオプションとして`--US-time`、`--US-military-time`、`--European-time`の3つを追加した (#574) (@hitenkoku)\n- `--rfc-3339` オプションの時刻表示形式を変更した。 (#574) (@hitenkoku)\n- `-R/ --display-record-id`オプションを`-R/ --hide-record-id`に変更。レコードIDはデフォルトで出力するようにして`-R`オプションを付けた際に表示しないように変更した。(#579) (@hitenkoku)\n- ルール読み込み時のメッセージを追加した。 (#583) (@hitenkoku)\n- `rules/tools/sigmac/testfiles`内のテスト用のymlファイルを読み込まないようにした. (#602) (@hitenkoku)\n\n**バグ修正:**\n\n- 対応するオプションを付与していないときにもRecordIDとRecordInformationの列が出力されていたのを修正した。 (#577) (@hitenkoku)\n\n## v1.3.0 [2022/06/06]\n\n**新機能:**\n\n- `--visualize-timeline`オプションで検知されたイベントが5つ以上の時、イベント頻度のタイムラインを作成するようにした。 (#533, #566) (@hitenkoku)\n- `--all-tags`オプションでルールにある全てのtagsを、outputで指定したcsvのMitreAttackの列に出力するようにした。 (#525) (@hitenkoku)\n- `-R` / `--display-record-id` オプションの追加。evtx file内のレコードを特定するレコードID`<Event><System><EventRecordID>`が出力できるようになった。 (#548) (@hitenkoku)\n- レベルごとの検知数が最も多い日を表示するようにした。 (#550) (@hitenkoku)\n- レベルごとの検知数上位3つのコンピュータ名を表示するようにした。 (#557)(@hitenkoku)\n\n**改善:**\n\n- ルールの`details`でeventkey_alias.txtやEvent.EventData内に存在しない情報を`n/a` (not available)と表記するようにした。(#528) (@hitenkoku)\n- 読み込んだイベント数と検知しなかったイベント数を表示するようにした。 (#538) (@hitenkoku)\n- 新しいロゴに変更した。(#536) (@YamatoSecurity)\n- evtxファイルのファイルサイズの合計を出力するようにした。(#540) (@hitenkoku)\n- ロゴの色を変更した (#537) (@hitenkoku)\n- Channelの列にchannel_abbrevations.txtに記載されていないチャンネルも表示するようにした。(#553) (@hitenkoku)\n- `Ignored rules`として集計されていた`Exclude rules`、`Noisy rules`、`Deprecated rules`に分けて表示するようにした。 (#556) (@hitenkoku)\n- `output`オプションが指定されているときに、ファイル出力中のメッセージを表示するようにした。 (#561) (@hitenkoku)\n\n**バグ修正:**\n\n- `--start-timeline`、`--end-timeline`オプションが動かなかったのを修正した。 (#546) (@hitenkoku)\n- ルール内の`level`が正しくない場合に検知数が最も多い日の集計の際にcrashが起きるのを修正した。 (#560) (@hitenkoku)\n\n## v1.2.2 [2022/05/20]\n\n**新機能:**\n\n- ログオン情報の要約の機能の追加。 (`-L` / `--logon-summary`) (@garigariganzy)\n\n**改善:**\n\n- カラー出力はデフォルトで有効になって、コマンドプロンプトとPowerShellプロンプトに対応している。 (@hitenkoku)\n\n**バグ修正:**\n\n- `rules`フォルダが存在するが、レポジトリがダウンロードされていない場合は、ルール更新が失敗していたが、修正した。(#516) (@hitenkoku)\n- .gitフォルダ内にあるymlファイルが一部のWindows環境で読み込まれた際にエラーが発生していたが、修正した。(#524)(@hitenkoku)\n- 1.2.1バイナリで表示する誤ったバージョン番号の修正。\n\n## v1.2.1 [2022/04/20] Black Hat Asia Arsenal 2022 RC2\n\n**新機能:**\n\n- `./config/channel_abbreviations`の設定ファイルにより、`Channel`列も出力されるようになった。 (@hitenkoku)\n- ルールとルールの設定ファイルは強制的に上書きされる。 (@hitenkoku)\n\n**バグ修正:**\n\n- ルールがnoisyもしくはexcludedと設定された場合は、`--level-tuning`オプションで`level`が更新されなかったが、修正した。 (@hitenkoku)\n\n## v1.2.0 [2022/04/15] Black Hat Asia Arsenal 2022 RC1\n\n**新機能:**\n\n- `-C / --config` オプションの追加。検知ルールのコンフィグを指定することが可能。(Windowsでのライブ調査に便利) (@hitenkoku)\n- `|equalsfield` と記載することでルール内で二つのフィールドの値が一致するかを記載に対応。 (@hach1yon)\n- `-p / --pivot-keywords-list` オプションの追加。攻撃されたマシン名や疑わしいユーザ名などの情報をピボットキーワードリストとして出力する。 (@kazuminn)\n- `-F / --full-data`オプションの追加。ルールの`details`で指定されたフィールドだけではなく、全フィールド情報を出力する。(@hach1yon)\n- `--level-tuning` オプションの追加。ルールの検知ファイルを設定したコンフィグファイルに従って検知レベルをチューニングすることが可能(@itib、@hitenkoku)\n\n**改善:**\n\n- 検知ルールとドキュメントの更新。 (@YamatoSecurity)\n- MacとLinuxのバイナリに必要なOpenSSLライブラリを静的コンパイルした。 (@YamatoSecurity)\n- タブ等の文字が含まれたフィールドに対しての検知性能の改善。 (@hach1yon、@hitenkoku)\n- eventkey_alias.txt内に定義されていないフィールドをEvent.EventData内を自動で検索することが可能。 (@kazuminn、@hitenkoku)\n- 検知ルールの更新時、更新されたルールのファイル名が表示される。 (@hitenkoku)\n- ソースコードにあるClippyの警告を修正。 (@hitenkoku、@hach1yon)\n- イベントIDとタイトルが記載されたコンフィグファイルの名前を `timeline_event_info.txt` から `statistics_event_info.txt`に変更。 (@YamatoSecurity、 @garigariganzy)\n- 64bit Windowsで32bit版のバイナリを実行しないように修正(@hitenkoku)\n- MITRE ATT&CKのデータの出力を`output_tag.txt`で修正できるように修正(@hitenkoku)\n- 出力にChannel名のカラムを追加(@hitenkoku)\n\n**バグ修正:**\n\n- `.git` フォルダ内にある `.yml` ファイルがパースエラーを引き起こしていた問題の修正。 (@hitenkoku)\n- テスト用のルールファイルの読み込みエラーで不必要な改行が発生していた問題の修正。 (@hitenkoku)\n- Windows Terminalのバグで標準出力が途中で止まる場合がありましたが、Hayabusa側で解決しました。 (@hitenkoku)\n\n## v1.1.0 [2022/03/03]\n\n**新機能:**\n\n- `-r / --rules`オプションで一つのルール指定が可能。(ルールをテストする際に便利！) (@kazuminn)\n- ルール更新オプション (`-u / --update-rules`): [hayabusa-rules](https://github.com/Yamato-Security/hayabusa-rules)レポジトリにある最新のルールに更新できる。 (@hitenkoku)\n- ライブ調査オプション (`-l / --live-analysis`): Windowsイベントログディレクトリを指定しないで、楽にWindows端末でライブ調査ができる。(@hitenkoku)\n\n**改善:**\n\n- ドキュメンテーションの更新。 (@kazuminn、@itiB、@hitenkoku、@YamatoSecurity)\n- ルールの更新。(Hayabusaルール: 20個以上、Sigmaルール: 200個以上) (@YamatoSecurity)\n- Windowsバイナリは静的でコンパイルしているので、Visual C++ 再頒布可能パッケージをインストールする必要はない。(@hitenkoku)\n- カラー出力 (`-c / --color`) True Colorに対応しているターミナル(Windows Terminal、iTerm2等々)ではカラーで出力できる。(@hitenkoku)\n- MITRE ATT&CK戦略が出力される。(@hitenkoku)\n- パフォーマンスの改善。(@hitenkoku)\n- exclude_rules.txtとnoisy_rules.txtの設定ファイルのコメント対応。(@kazuminn)\n- より速いメモリアロケータの利用。 (Windowsの場合はrpmalloc、macOS/Linuxの場合は、jemalloc) (@kazuminn)\n- Cargo crateの更新。 (@YamatoSecurity)\n\n**バグ修正:**\n\n- `cargo update`がより安定するために、clapのバージョンを固定した。(@hitenkoku)\n- フィールドのタブや改行がある場合に、ルールが検知しなかったので、修正した。(@hitenkoku)\n\n## v1.0.0-Release 2 [2022/01/27]\n\n- アンチウィルスに誤検知されたExcelの結果ファイルの削除。(@YamatoSecurity)\n- Rustのevtxライブラリを0.7.2に更新。 (@YamatoSecurity)\n\n## v1.0.0 [2021/12/25]\n\n- 最初のリリース"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 53.673828125,
          "content": "# Changes\n\n## 3.0.1 [2024/12/29] - 3rd Year Anniversary Release\n\n**Bug Fixes:**\n\n- Hayabusa would fail in rule parse checking on the backend with `expand` rules. (#1537) (@fukusuket)\n\n## 3.0.0 [2024/12/25] - 3rd Year Anniversary Release\n\n**New Features:**\n\n- New `extract-base64` command to extract and decode base64 strings from events. (#1512) (@fukusuket)\n- New `expand-list` command to output placeholder names used for rules with the `expand` modifier. (#1513) (@fukuseket)\n- Support for `expand` field modifiers. (#1434) (@fukusuket)\n- Support for Temporal Proximity (`temporal`) correlation rules. (#1446) (@fukusuket)\n- Support for Temporal Ordered Proximity (`temporal_ordered`) correlation rules. (#1447) (@fukusuket)\n\n**Enhancements:**\n\n- Log file size added to `log-metrics` command. (#1528) (@fukusuket)\n\n**Bug Fixes:**\n\n- Sorting with `csv-timeline` was not done perfectly when record IDs were outputted. (#1519) (@fukusuket)\n- `-J, --JSON-input` would only accept `.json` files, not `.jsonl` files so now both are supported. (#1530) (@fukusuket)\n\n## 2.19.0 [2024/11/26] - \"Every Day Is A Good Day\" Release\n\n**New Features:**\n\n- Support for the `gt`, `gte`, `lt`, `lte` field modifiers. (#1433) (@fukusuket)\n- New `log-metrics` command to get information about `.evtx` files. (computer names, event count, first timestamp, last timestamp, channels, providers) (#1474) (@fukusuket)\n- New `-b, --disable-abbreviations` options for the following commands to disable `Channel` and `Provider` abbreviations for when you want to check the original values. (#1485) (@fukusuket)\n  * `csv-timeline`\n  * `json-timeline`\n  * `eid-metrics`\n  * `log-metrics`\n  * `search`\n- Support for `utf16/utf16be/utf16le/wide` field modifiers to be used with the `base64offset|contains` field modifier. (#1432) (@fukusuket)\n  * `utf16|base64offset|contains`\n  * `utf16be|base64offset|contains`\n  * `utf16le|base64offset|contains`\n  * `wide|base64offset|contains`\n\n**Enhancements:**\n\n- Updated the `yaml-rust` crate to `yaml-rust2`. (#461) (@yamatosecurity)\n- `windash` characters are now being dynamically read from `rules/config/windash_characters.txt`. (#1440) (@fukusuket)\n- `logon-summary` command now displays logon information from RDP events. Note: Hayabusa will output more detailed information when saving to a file. (#1468) (@fukusuket)\n- The colors were updated to make it easier to read. (#1480) (@yamatosecurity)\n- Added start and finish messages of the day. (#1492) (@fukusuket)\n- New color scheme added to output. (#1491) (@fukusuket)\n- File size is now displayed next to the file name under the progress bar. (#1471) (@fukusuket)\n\n**Bug Fixes:**\n\n- `logon-summary` command would sometimes crash with corrupted logs. (#1477) (@fukusuket)\n- Some results would be displayed after the progress bar when outputting results to the terminal with `csv-timeline` and `json-timeline`. (#1459) (@fukusuket)\n- The detailed field value results in aggregation rule alerts were not sorted so `csv-timeline` and `json-timeline` would not output completely exact results each time. (#1466) (@fukusuket)\n- Updated `hayabusa-evtx` crate to `0.8.12`. (@yamatosecurity)\n  - JSON field output order is now preserved according to the original XML. (omerbenamram/evtx #241)\n  - Multiple sub-nodes with attributes and the same name would be overwritten and only the last one kept. (omerbenamram/evtx #245)\n- `logon-summary` and `eid-metrics` would sometimes output multiple progress bars. #1479 (@fukusuket)\n- The progress bar has been removed when outputting to terminal and not sorting events as is unneeded. #1508 (@fukusuket)\n\n**Other:**\n\n- The `--timeline-offset` option has been renamed to `--time-offset`. (#1490) (@yamatosecurity)\n\n## 2.18.0 [2024/10/23] - SecTor Release\n\n**New Features:**\n\n- Support for the `fieldref` modifier (alias to the `equalsfield` modifier). (#1409) (@hitenkoku)\n- The `fieldref|endswith` modifier was created as an alias to `endswithfield` to replace it in the future. (#1437) (@fukusuket)\n- Support for `fieldref|startswith` and `fieldref|contains` modifiers. (#1439) (@fukusuket)\n- Support for XOR encoded rules to minimize files put on the system as well as bypass anti-virus products that give false positives on rules. (#1419) (@fukusuket)\n  - We will include packages in the Releases page that are already configured to use this. If you wanted to manually configure this though, download [encoded_rules.yml](https://github.com/Yamato-Security/hayabusa-encoded-rules/raw/refs/heads/main/encoded_rules.yml) and place it in the Hayabusa's root folder. This file is created from the rules in the hayabusa-rules repository and is automatically updated anytime there is a rule update. Delete all of the files inside the `rules` folder except for the `config` directory as those files are not yet contained in a single file.\n  - Note: The report generated by the `-H` option cannot create a link to the rule (only the rule name is outputted.) \n  - `rules/config` config files are now loaded from a single file [rules_config_files.txt](https://github.com/Yamato-Security/hayabusa-encoded-rules/raw/refs/heads/main/rules_config_files.txt) to reduce the number of files needed to be stored on a target system for live response. (#1420) (@fukusuket)\n\n**Bug Fixes:**\n\n- Unneeded line breaks when using `-o` in the `search` command. (#1425) (@fukusuket)\n- Sigma correlation rules required the `group-by` field but now it is optional. (#1442) (@fukusuket)\n- Hayabusa will give an error message if the rules referenced by a correlation rule are not found. (#1444) (@fukusuket)\n- Field information was not being outputted when the `all-field-info` profiles were used. (#1450) (@fukusuket)\n\n**Other:**\n\n- License is changed from GPL-3.0 to AGPL-3.0. (@yamatosecurity)\n\n## 2.17.0 [2024/08/23] \"HITCON Community Release\"\n\n**New Features:**\n\n- Support for the Sigma V2 `|re:` submodifers. (#1399) (@fukusuket)\n  - Reference: https://github.com/SigmaHQ/sigma-specification/blob/main/appendix/sigma-modifiers-appendix.md\n    * `|re|i:`: (insensitive) disable case-sensitive matching.\n    * `|re|m:`: (multi-line) match across multiple lines. `^` /`$` match the start/end of line.\n    * `|re|s:`: (single-line) the dot character (`.`) matches all characters, including the newline character.\n- Support for the Sigma V2 `|exists:` modifier. (#1400) (@hitenkoku)\n- Support for the Sigma V2 `|cased:` modifier. (#1401) (@hitenkoku)\n\n**Enhancements:**\n\n- Support for the newer version 0.6.x `cidr-utils` crate. (#1366) (@hitenkoku)\n- Added support for Sigma correlation rule's `name` lookup. (#1363) (@fukusuket)\n- Enabled low memory mode by default. `-s, --low-memory-mode` is now `-s, --sort-events` - Sort events before outputting results. (warning: this uses much more memory!). (#1361) (@hitenkoku)\n  - Note: you need to enable sorting in order to use  `-R, --remove-duplicate-data` and `-X, --remove-duplicate-detections`.\n- Sigma correlation reference rules now do not output alerts by default. You can enable them by adding `generate: true` to the rule. (#1367) (@fukusuket)\n- `Data` fields are now displayed as indexed strings instead of as all `Data` fields or in an array for JSON. (#1371) (@fukusuket)\n  - Before: `\"Data\": [\"17514\", \"Multiprocessor Free\", \"Service Pack 1\"]`\n  - After: `\"Data[3]\": \"17514\", \"Data[4]\": \"Multiprocessor Free\", \"Data[5]\": \"Service Pack 1\"`\n- The configuration files in the `config` folder are now also embedded in the binary to reduce the number of files in the release package. (#1370) (@hitenkoku)\n  - Note: you will not be able to run the `set-default-profile` command without the `config` directory files as it relies on `config/default_profile.yaml`.\n- Aggregation rule alerts now show `Channel` and `EventID` information even when there are multiple results. (#1342) (@fukusuket)\n- In the JSON timeline, when there is no information in the `Details` field, we changed the default output of `\"-\"` to `{}` in order to make parsing easier. (#1386) (@hitenkoku)\n- Added support for the `–` (en dash), `—` (em dash), and `―` (horizontal bar) characters for the `windash` modifier to prevent signature bypass. (#1392) (@hitenkoku)\n- Updated the MITRE ATT&CK tags to support Sigma version 2 format. (Ex: `defense_evasion` => `defense-evasion`) (@fukusuket)\n- Updated the `evtx` crate to the latest for enhancements and bug fixes.\n\n**Bug Fixes:**\n- Sigma correlation rule count was not showing up in `Events with hits`. (#1373) (@fukusuket)\n- Correlation rule count was not showing up in `Events with hits`. (#1374) (@fukusuket)\n- Aggregation condition rule count was not showing up in `Events with hits`. (#1375) (@fukusuket)\n- In rare cases, the list of rule authors would not be displayed to the terminal. (#1383) (@fukusuket)\n\n## 2.16.0 [2024/06/11] \"FIRSTCON24 Release\"\n\n**New Features:**\n\n- By default now, only rules that are applicable to loaded evtx files will be enabled. This is based on the `Channel` field in `.evtx` file and `.yml` rule. For example, if `Security.evtx` was being scanned, then only rules that have `Channel: Security` defined will be used against this file. In our benchmarks, this usually gives a speed benefit of around 20% when scanning single `evtx` files but can give up a 10x speed performance depending on the file. If you think there are multiple channels being used in a single `.evtx` file or you want to use rules that do not have the `Channel` field defined in order to scan all `.evtx` files regardless of the channel, then you can turn off this filtering with the `-A, --enable-all-rules` option in `csv-timeline` and `json-timeline`.  (#1317) (@fukusuket)\n  - Currently, the only two detection rules that do not have `Channel` defined and are intended to scan all `.evtx` files are the following:\n    - [Possible Hidden Shellcode](https://github.com/Yamato-Security/hayabusa-rules/blob/main/hayabusa/builtin/UnkwnChannEID_Med_PossibleHiddenShellcode.yml)\n    - [Mimikatz Use](https://github.com/SigmaHQ/sigma/blob/master/rules/windows/builtin/win_alert_mimikatz_keywords.yml)\n- By default now, `.evtx` files that have applicable rules will be loaded. So for example, if you are scanning a directory of various event logs but only enable a rule that is looking for `Channel: Security` then Hayabusa will ignore all non-security event logs. In our benchmarks, this gives a speed benefit of around 10% with normal scans and up to 60%+ performance increase when scanning with a single rule. If you want to load all `.evtx` files regardless of channel, then you can turn off this filtering with the `-a, --scan-all-evtx-files` option in `csv-timeline` and `json-timeline`. (#1318) (@fukusuket)\n- Note: Channel filtering only works with .evtx files and you will receive an error if you try to load event logs from a JSON file with `-J, --json-input` and also specify `-A` or `-a`. (#1345) (@fukusuket)\n- Support for Sigma Correlation's Event Count. (#1337) (@fukusuket)\n- Support for Sigma Correlation's Value Count. (#1338) (@fukusuket)\n\n**Enhancements:**\n\n- You can now specify multiple directories with the `-d, --directory` option. (#1335) (@hitenkoku)\n- You can now analyze Splunk logs exported from the REST API. (#1083) (@hitenkoku)\n- You can now specify multiple groups with `count`. Ex: `count() by IpAddress,SubStatus,LogonType >= 2` Also, the output has been updated. Ex: `[condition] count(TargetUserName) by IpAddress > 3 in timeframe [result] count: 4 TargetUserName:tanaka/Administrator/adsyncadmin/suzuki IpAddress:- timeframe:5m` -> `Count: 4 ¦ TargetUserName: tanaka/Administrator/adsyncadmin/suzuki ¦ IpAddress: -` (#1339) (@fukusuket)\n- Added support for specifying an optional `Provider_Name` field in field data mapping files (`rules/config/data_mapping/*.yaml`) as well as support for `Data[x]` notation. (#1350) (@fukusuket)\n- JSON output in count rules now separates field information. (#1342) (@fukusuket)\n  - Before: `\"Details\": \"[condition] count() by IpAddress >= 5 in timeframe [result] count:3558 IpAddress:192.168.198.149 timeframe:5m\"`\n  - After: `\"Details\": { \"Count\": 3558, \"IpAddress\": \"192.168.198.149\" }`\n\n## 2.15.0 [2024/04/20] \"Sonic Release\"\n\n**Enhancements:**\n\n- Added support for `windash` field modifier (ex. `|contains|windash:`, `|contains|all|windash:`) in sigma rules. (#1319) (@hitenkoku)\n  - https://sigmahq.io/docs/basics/modifiers.html#windash\n  - Note: currently on the backend we convert the use of `windash` in rules so they are compatibile with previous versions of Hayabusa, however, around the end of May we will start to keep the use of `windash` as-is so please update to this version before then or else you will recieve rule parsing errors if you update rules.\n\n**Bug Fixes:**\n\n- `-T` detection frequency timeline was not usable in version 2.14.0. (#1322) (@fukusuket)\n- Fixed `windash` not working when there is a wildcard. (#1327) (@hitenkoku)\n\n## 2.14.0 [2024/03/30] \"BSides Tokyo Release\"\n\n**New Features:**\n\n- Added `--include-status` option: You can specify rules based on their `status`. (#1193) (@hitenkoku)\n- Added a `-s, --low-memory-mode` option that uses up to 95% less memory. However, in order to do this, Hayabusa cannot sort results nor use `-R, --remove-duplicate-data` and/or `-X, --remove-duplicate-detections` in combination.  (#1254) (@hach1yon @hitenkoku)\n\n**Enhancements:**\n\n- Removed unused crates. (@YamatoSecurity)\n- JSON input now supports the format exported from Splunk. (#1083) (@hitenkoku)\n- Performance enchancements. (#1277, #1278) (@fukusuket)\n- Reordered `search` result fields to look similar to the `csv-timeline` command results. (#1297) (@hitenkoku)\n- Added master piece character in ascii art eggs. R.I.P. lovely master hidden behind the gas mask. (#1304) (@hitenkoku)\n- Unified help option format in `computer-metrics` command with other commands. (#1314) (@hitenkoku)\n\n**Bug Fixes:**\n\n- JSON output of the `search` command was missing the `AllFieldInfo` field. (#1251) (@hitenkoku)\n- The time the user took to choose options in the scan wizard was included in elapsed time so we now exclude that. (#1291) (@hitenkoku)\n- Fixed `-h, --help` option is being displayed multiple times. (#1309) (@hitenkoku)\n\n## 2.13.0 [2024/02/11] \"Year Of The Dragon Release\"\n\n**Enhancements:**\n\n- Adjusted the `search` command's Filter option to be an exact match and support wildcard characters. (#1240) (@hitenkoku)\n- Any time there is a change in a detection rule, it will be displayed when running the `update-rules` command. Previously, only rules that updated their `modified` field would be displayed. (#1243) (@hitenkoku)\n- The `json-timeline` command now outputs in JSON format when outputting to the terminal. (#1197) (@hitenkoku)\n- Added support for parsing JSON input when the data is inside an array. (#1248) (@hitenkoku)\n- Changed the `‖` separator into a `·` separator to make it easier to read and render properly on older terminals. (#1258) (@YamatoSecurity)\n- Added a `-h, --help` option to General Options for all commands. (#1255) (@hitenkoku)\n- Changed the `Details` output in the `json-timeline` command from alphabetical order to the original order.\n- Loading detection rules is now skipped when running commands that do not need them. (#1263) (@hitenkoku)\n- Improved the standard output colors in the `csv-timeline` command. (#1271) (@hitenkoku)\n- Refactoring and performance enhancements. (#1268, #1260) (@hach1yon)\n\n**Bug Fixes:**\n\n- Removed newline characters in the `search` command output. (#1253) (@hitenkoku)\n- Fixed the progress bar and wizard colored output when the `--no-color` option is used. (#1256) (@hitenkoku)\n- Fixed a panic when the local timezone was not able to be identified. This was fixed in the `chrono` crate version 0.4.32. (#1273)\n\n## 2.12.0 [2023/12/23] \"SECCON Christmas Release\"\n\n**Enhancements:**\n\n- `%MitreTactics%`, `%MitreTags%`, `%OtherTags%` fields are now outputted as an array of strings in JSON output. (#1230) (@hitenkoku)\n- Added a summary of MITRE ATT&CK tactics that were detected for each computer in the HTML report. In order to use this feature, you need to use a profile that includes the `%MitreTactics%` field. (#1226) (@hitenkoku)\n- Output messages about reporting issues and false positives when using `csv-timeline` or `json-timeline` commands. (#1236) (@hitenkoku)\n\n**Bug Fixes:**\n\n- In JSON output, multiple field names with the same names were not outputted as an array so only one result would be returned when parsing with `jq`. We fixed this by outputting multiple field data with the same field name inside an array. (#1202) (@hitenkoku)\n- Fixed a bug in the `csv-timeline`, `json-timeline`, `eid-metrics`, `logon-summary`, `pivot-keywords-list` and `search` commands so that Hayabusa will quit whenever no input option (`-l`, `-f` or `-d`) is specified. (#1235) (@hitenkoku)\n\n## 2.11.0 [2023/12/03] \"Nasi Lemak Release\"\n\n**New Features:**\n\n- Extraction of fields from PowerShell classic logs. (Can disable with `--no-pwsh-field-extraction`) (#1220) (@fukusuket)\n\n**Enhancements:**\n\n- Added rule count in the scan wizard. (#1206) (@hitenkoku)\n\n## 2.10.1 [2023/11/13] \"Kamemushi Release\"\n\n**Enhancements:**\n\n- Added questions to the scan wizard. (#1207) (@hitenkoku)\n\n**Bug Fixes:**\n\n- `update-rules` command would output `You currently have the latest rules` even if new rules were downloaded in version `2.10.0`. (#1209) (@fukusuket)\n- Regular expressions would sometimes be incorrectly handled. (#1212) (@fukusuket)\n- In the rare case that there is no `Data` field such as for JSON input, a panic would occur. (#1215) (@fukusuket)\n\n## 2.10.0 [2023/10/31] \"Halloween Release\"\n\n**Enhancements:**\n\n- Added a scan wizard to help new users choose which rules they want to enable. Add the `-w, --no-wizard` option to run Hayabusa in the traditional way. (Scan for all events and alerts, and customize options manually.) (#1188) (@hitenkoku)\n- Added the `--include-tag` option to the `pivot-keywords-list` command to only load rules with the specified `tags` field. (#1195) (@hitenkoku)\n- Added the `--exclude-tag` option to the `pivot-keywords-list` command to exclude rules with specific `tags` from being loaded. (#1195) (@hitenkoku)\n\n**Bug Fixes:**\n\n- Fixed that field information defined in `Details` was also output to `ExtraFieldInfo` in some cases. (#1145) (@hitenkoku)\n- Fixed output of newline and tab characters in `AllFieldInfo` in JSON output. (#1189) (@hitenkoku)\n- Fixed output of space characters in some fields in standard output. (#1192) (@hitenkoku)\n\n## 2.9.0 [2023/09/22] \"Autumn Rain Release\"\n\n**Enhancements:**\n\n- Added an error message to indicate that when you can't load evtx files in Windows due to specifying a directory path with spaces in it, you need to remove the trailing backslash. (#1166) (@hitenkoku, thanks for the suggestion from @joswr1ght)\n- Optimized the number of records to load at a time for performance. (#1175) (@yamatosecurity)\n- Replaced double backslashes in paths under the progress bar on Windows systems with single forward slashes. (#1172) (@hitenkoku)\n- Made the `Details` field for `count` rules a string in the JSON output for easier parsing. (#1179) (@hitenkoku)\n- Changed the default number of threads from number of CPUs to the estimate of the default amount of parallelism a program should use (`std::thread::available_parallelism`). (#1182) (@hitenkoku)\n\n**Bug Fixes:**\n\n- Fixed JSON fields would not be correctly parsed in rare cases. (#1145) (@hitenkoku)\n\n**Other:**\n\n- Removed the unmaintained `hhmmss` crate that uses an old `time` crate in order to pass the code coverage CI checks. (#1181) (@hitenkoku)\n\n## 2.8.0 [2023/09/01] \"Double X Release\"\n\n**New Features:**\n\n- Added support for `HexToDecimal` in the field mapping configuration files to convert hex values to decimal. (Useful for converting the original process IDs from hex to decimal.) (#1133) (@fukusuket)\n- Added `-x, --recover-records` option to `csv-timeline` and `json-timeline` to recover evtx records through file carving in evtx slack space. (#952) (@hitenkoku) (Evtx carving feature is thanks to @forensicmatt)\n- Added `-X, --remove-duplicate-detections` option to `csv-timeline` and `json-timeline` to not output any duplicate detection entries. (Useful when you use `-x`, include backup logs or logs extracted from VSS with duplicate data, etc...)\n- Added a `--timeline-offset` option to `csv-timeline`, `json-timeline`, `logon-summary`, `eid-metrics`, `pivot-keywords-list` and `search` commands to scan just recent events based on a offset of years, months, days, hours, etc... (#1159) (@hitenkoku)\n- Added a `-a, --and-logic` option in the `search` command to search keywords with AND logic. (#1162) (@hitenkoku)\n\n**Other:**\n\n- When using `-x, --recover-records`, an additional `%RecoveredRecord%` field will be added to the output profile and will output `Y` to indicate if a record was recovered. (#1160) (@hitenkoku)\n\n## 2.7.0 [2023/08/03] \"SANS DFIR Summit Release\"\n\n**New Features:**\n\n- Certain code numbers are now mapped to human-readable messages based on the `.yaml` config files in `./rules/config/data_mapping`. (Example: `%%2307` will be converted to `ACCOUNT LOCKOUT`). You can turn off this behavior with the `-F, --no-field-data-mapping` option. (#177) (@fukusuket)\n- Added the `-R, --remove-duplicate-data` option in the `csv-timeline` command to replace duplicate field data with the string `DUP` in the `%Details%`, `%AllFieldInfo%`, `%ExtraFieldInfo%` columns to reduce file size. (#1056) (@hitenkoku)\n- Added the `-P, --proven-rules` option in `csv-timeline` and `json-timeline` commands. When used, Hayabusa will only load rules that have been proven to work. These are defined by rule ID in the `./rules/config/proven_rules.txt` config file. (#1115) (@hitenkoku)\n- Added the `--include-tag` option to `csv-timeline` and `json-timeline` commands to only load rules with the specified `tags` field. (#1108) (@hitenkoku)\n- Added the `--exclude-tag` option to `csv-timeline` and `json-timeline` commands to exclude rules with specific `tags` from being loaded. (#1118) (@hitenkoku)\n- Added `--include-category` and `--exclude-category` options to `csv-timeline` and `json-timeline` commands. When using `--include-category`, only rules with the specified `category` field will be loaded. `--exclude-category` will exclude rules from being loaded based on `category`. (#1119) (@hitenkoku)\n- Added the `computer-metrics` command to list up how many events there are based on computer name. (#1116) (@hitenkoku)\n- Added `--include-computer` and `--exclude-computer` options to `csv-timeline`, `json-timeline`, `metrics`, `logon-summary` and `pivot-keywords-list` commands. The `--include-computer` option only scans the specified computer(s). `--exclude-computer` excludes them. (#1117) (@hitenkoku)\n- Added `--include-eid` and `--exclude-eid` options to `csv-timeline`, `json-timeline`, and `pivot-keywords-list` commands. The `--include-eid` option only scans the specified EventID(s). `--exclude-eid` excludes them. (#1130) (@hitenkoku)\n- Added the `-R, --remove-duplicate-data` option to the `json-timeline` command to replace duplicate field data with the string `DUP` in the `%Details%`, `%AllFieldInfo%`, `%ExtraFieldInfo%` fields to reduce file size. (#1134) (@hitenkoku)\n\n**Enhancements:**\n\n- Ignore corrupted event records with timestamps before 2007/1/31 when Windows Vista was released with the new `.evtx` log format. (#1102) (@fukusuket)\n- When `--output` is set in the `metrics` command, the results will not be displayed to screen. (#1099) (@hitenkoku)\n- Added the `-C, --clobber` option to overwrite existing output files in the `pivot-keywords-list` command. (#1125) (@hitenkoku)\n- Renamed the `metrics` command to `eid-metrics`. (#1128) (@hitenkoku)\n- Reduced progress bar width to leave room for adjustment of the terminal. (#1135) (@hitenkoku)\n- Added support for outputing timestamps in the following formats in the `search` command: `--European-time`, `--ISO-8601`, `--RFC-2822`, `--RFC-3339`, `--US-time`, `--US-military-time`, `-U, --UTC`. (#1040) (@hitenkoku)\n- Replaced the ETA time in the progress bar with elapsed time as the ETA time was not accurate. (#1143) (@YamatoSecurity)\n- Added `--timeline-start` and `--timeline-end` to the `logon-summary` command. (#1152) (@hitenkoku)\n\n**Bug Fixes:**\n\n- The total number of records being displayed in the `metrics` and `logon-summary` commands differed from the `csv-timeline` command. (#1105) (@hitenkoku)\n- Changed rule count by rule ID instead of path. (#1113) (@hitenkoku)\n- Fixed a problem with incorrect field splitting in the `CommandLine` field in JSON output. (#1145) (@hitenkoku)\n- `--timeline-start` and `--timeline-end` were not working correctly with the `json-timeline` command. (#1148) (@hitenkoku)\n- `--timeline-start` and `--timeline-end` were not working correctly with the `pivot-keywords-list` command. (#1150) (@hitenkoku)\n\n**Other:**\n\n- The total count of unique detections are now based on rule IDs instead of rule file paths. (#1111) (@hitenkoku)\n- Renamed the `--live_analysis` option to `--live-analysis`. (#1139) (@hitenkoku)\n- Renamed the `metrics` command to `eid-metrics`. (#1128) (@hitenkoku)\n\n## 2.6.0 [2023/06/16] \"Ajisai Release\"\n\n**New Features:**\n\n- Added support for `'|all':`  keyword in sigma rules. (#1038) (@kazuminn)\n\n**Enhancements:**\n\n- Added `%ExtraFieldInfo%` alias to output profiles which will output all of the other fields that do not get outputted in `Details`. This is now included in the default `standard` output profile. (#900) (@hitenkoku)\n- Added error messages for incompatible arguments. (#1054) (@YamatoSecurity)\n- The output profile name is now outputted to standard output and in the HTML report. (#1055) (@hitenkoku)\n- Added rule author names next to rule alerts in the HTML report. (#1065) (@hitenkoku)\n- Made the table width shorter to prevent tables breaking in smaller terminal sizes. (#1071) (@hitenkoku)\n- Added the `-C, --clobber` option to overwrite existing output files in `csv-timeline`, `json-timeline`, `metrics`, `logon-summary`, and `search` commands. (#1063) (@YamatoSecurity, @hitenkoku)\n- Made the HTML report portable by embedding the images and inlining CSS. (#1078) (@hitenkoku, thanks for the suggestion from @joswr1ght)\n- Speed improvements in the output. (#1088) (@hitenkoku, @fukusuket)\n- The `metrics` command now performs word wrapping to make sure the table gets rendered correctly. (#1067) (@garigariganzy)\n- `search` command results can now be outputted to JSON/JSONL. (#1041) (@hitenkoku)\n\n**Bug Fixes:**\n\n- `MitreTactics`, `MitreTags`, `OtherTags` fields were not being outputted in the `json-timeline` command. (#1062) (@hitenkoku)\n- The detection frequency timeline (`-T`) would not output when the `no-summary` option was also enabled. (#1072) (@hitenkoku)\n- Control characters would not be escaped in the `json-timeline` command causing a JSON parsing error. (#1068) (@hitenkoku)\n- In the `metrics` command, channels would not be abbreviated if they were lowercase. (#1066) (@garigariganzy)\n- Fixed an issue where some fields were misaligned in the JSON output. (#1086) (@hitenkoku)\n\n## 2.5.1 [2023/05/14] \"Mothers Day Release\"\n\n**Enhancements:**\n\n- Reduced memory usage by half when using newly converted rules. (#1047) (@fukusuket)\n\n**Bug Fixes:**\n\n- Data in certain fields such as `AccessMask` would not be separated by spaces when outputted from the `details` field. (#1035) (@hitenkoku)\n- Multiple spaces would be condensed to a single space when outputting to JSON. (#1048) (@hitenkoku)\n- Output would be in color even if `--no-color` was used in the `pivot-keywords-list` command. (#1044) (@kazuminn)\n\n## 2.5.0 [2023/05/07] \"Golden Week Release\"\n\n**Enhancements:**\n\n- Added `-M, --multiline` option to search command. (#1017) (@hitenkoku)\n- Deleted return characters in the output of the `search` command. (#1003) (@hitenkoku)\n- `regex` crate updated to 1.8 which allows unnecessary escapes in regular expressions reducing parsing errors. (#1018) (@YamatoSecurity)\n- Deleted return characters in output of the `csv-timeline` command. (#1019) (@hitenkoku)\n- Don't show new version information with the `update-rules` command when building a newer dev build. (#1028) (@hitenkoku)\n- Sorted `search` timeline order. (#1033) (@hitenkoku)\n- Enhanced `pivot-keywords-list` terminal output. (#1022) (@kazuminn)\n\n**Bug Fixes:**\n\n- Unconverted sigma rules that search for a string that end in a backslash would not be detected. Also `|contains` conditions would not match if the string was located in the beginning. (#1025) (@fukusuket)\n- In versions 2.3.3-2.4.0, informational level alerts in the Results Summary would show the top 5 events twice instead of the top 10 events. (#1031) (@hitenkoku)\n\n## 2.4.0 [2023/04/19] \"SANS Secure Korea Release\"\n\n**New Features:**\n\n- Added `search` command to search for specified keywords in records. (#617) (@itiB, @hitenkoku)\n- Added `-r, --regex` option in the `search` command to search for regular expressions. (#992) (@itiB)\n\n**Enhancements:**\n\n- Alphabetically sorted commands. (#991) (@hitenkoku)\n- Added attribute information of `Event.UserData` to the output of `AllFieldInfo` in `csv-timeline`, `json-timeline` and `search` commands. (#1006) (@hitenkoku)\n- Updated Aho-Corasick crate to 1.0. (#1013) (@hitenkoku)\n\n**Bug Fixes:**\n\n- Fixed timestamps that did not exist from being displayed in the event frequency timeline (`-T, --visualize-timeline`) in version 2.3.3. (#977) (@hitenkoku)\n\n## 2.3.3 [2023/04/07] \"Sakura Release\"\n\n**Enhancements:**\n\n- Removed an extra space when outputting the rule `level` to files (CSV, JSON, JSONL). (#979) (@hitenkoku)\n- Rule authors are now outputted in multiple lines with the `-M, --multiline` option. (#980) (@hitenkoku)\n- Approximately 3-5% speed increase by replacing String with CoW. (#984) (@hitenkoku)\n- Made sure text after the logo does not turn green with recent clap versions. (#989) (@hitenkoku)\n\n**Bug Fixes:**\n\n- Fixed a crash when the `level-tuning` command was executed on version 2.3.0. (#977) (@hitenkoku)\n\n## 2.3.2 [2023/03/22] \"TMCIT Release-3\"\n\n**Enhancements:**\n\n- Added `-M, --multiline` option in the `csv-timeline` command. (#972) (@hitenkoku)\n\n## 2.3.1 [2023/03/18] \"TMCIT Release-2\"\n\n**Enhancements:**\n\n- Added double quotes in CSV fields of `csv-timeline` output to support multiple lines in fields. (#965) (@hitenkoku)\n- Updated `logon-summary` headers. (#964) (@yamatosecurity)\n- Added short-hand option `-D` for `--enable-deprecated-rules` and `-u` for `--enable-unsupported-rules`. (@yamatosecurity)\n- Reordered option in Filtering and changed option help contents. (#969) (@hitenkoku)\n\n**Bug Fixes:**\n\n- Fixed a crash when the `update-rules` command was executed on version 2.3.0. (#965) (@hitenkoku)\n- Fixed long underlines displayed in the help menu in Command Prompt and PowerShell prompt. (#911) (@yamatosecurity)\n\n## 2.3.0 [2023/03/16] \"TMCIT Release\"\n\n**New Features:**\n\n- Added support for `|cidr`. (#961) (@fukusuket)\n- Added support for `1 of selection*` and `all of selection*`. (#957) (@fukusuket)\n- Added support for the `|contains|all` pipe keyword. (#945) (@hitenkoku)\n- Added the `--enable-unsupported-rules` option to enable rules marked as `unsupported`. (#949) (@hitenkoku)\n\n**Enhancements:**\n\n- Approximately 2-3% speed increase and memory usage reduction by improving string contains check. (#947) (@hitenkoku)\n\n**Bug Fixes:**\n\n- Some event titles would be displayed as `Unknown` in the `metrics` command even if they were defined. (#943) (@hitenkoku)\n\n## 2.2.2 [2023/2/22] \"Ninja Day Release\"\n\n**New Features:**\n\n- Added support for the `|base64offset|contains` pipe keyword. (#705) (@hitenkoku)\n\n**Enhancements:**\n\n- Reorganized the grouping of command line options. (#918) (@hitenkoku)\n- Reduced memory usage by approximately 75% when reading JSONL formatted logs. (#921) (@fukusuket)\n- Channel names are now further abbreviated in the metrics, json-timeline, csv-timeline commands according to `rules/config/generic_abbreviations.txt`. (#923) (@hitenkoku)\n- Reduced parsing errors by updating the evtx crate. (@YamatoSecurity)\n- Provider names (`%Provider%` field) are now abbreviated like channel names according to `rules/config/provider_abbreviations.txt` and `rules/config/generic_abbreviations.txt`. (#932) (@hitenkoku)\n- Print the first and last timestamps in the metrics command when the `-d` directory option is used. (#935) (@hitenkoku)\n- Added first and last timestamp to Results Summary. (#938) (@hitenkoku)\n- Added Time Format options for `logon-summary`, `metrics` commands. (#938) (@hitenkoku)\n- `\\r`, `\\n`, and `\\t` characters are preserved (not converted to spaces) when saving results with the `json-output` command. (#940) (@hitenkoku)\n\n**Bug Fixes:**\n\n- The first and last timestamps in the `logon-summary` and `metrics` commands were blank. (#920) (@hitenkoku)\n- Event titles stopped being shown in the `metrics` command during development of 2.2.2. (#933) (@hitenkoku)\n\n## 2.2.0 [2023/2/12] \"SECCON Release\"\n\n**New Features:**\n\n- Added support for input of JSON-formatted event logs (`-J, --JSON-input`). (#386) (@hitenkoku)\n- Log enrichment by outputting the ASN organization, city and country of source and destination IP addresses based on MaxMind GeoIP databases (`-G, --GeoIP`). (#879) (@hitenkoku)\n- Added the `-e, --exact-level` option to scan for only specific rule levels. (#899) (@hitenkoku)\n\n**Enhancements:**\n\n- Added the executed command line to the HTML report. (#877) (@hitenkoku)\n- Approximately 3% speed increase and memory usage reduction by performing exact string matching on Event IDs. (#882) (@fukusuket)\n- Approximately 14% speed increase and memory usage reduction by filtering before regex usage. (#883) (@fukusuket)\n- Approximately 8% speed increase and memory usage reduction by case-insensitive comparisons instead of regex usage. (#884) (@fukusuket)\n- Approximately 5% speed increase and memory usage reduction by reducing regex usage in wildcard expressions. (#890) (@fukusuket)\n- Further speed increase and memory usage reduction by removing unnecessary regex usage. (#894) (@fukusuket)\n- Approximately 3% speed increase and 10% memory usage reduction by reducing regex usage. (#898) (@fukuseket)\n- Improved `-T, --visualize-timeline` by increasing the height of the markers to make it easier to read. (#902) (@hitenkoku)\n- Reduced memory usage by approximately 50% when reading JSON/L formatted logs. (#906) (@fukusuket)\n- Alphabetically sorted options based on their long names. (#904) (@hitenkoku)\n- Added JSON input support (`-J, --JSON-input` option) for `logon-summary`, `metrics` and `pivot-keywords-list` commands. (#908) (@hitenkoku)\n\n**Bug Fixes:**\n\n- Fixed a bug when rules with 4 consecutive backslashes in their conditions would not be detected. (#897) (@fukusuket)\n- When parsing PowerShell EID 4103, the `Payload` field would be separated into multiple fields when outputting to JSON. (#895) (@hitenkoku)\n- Fixed a crash when looking up event log file size. (#914) (@hitenkoku)\n\n**Vulnerability Fixes:**\n\n- Updated the git2 and gitlib2 crates to prevent a possible SSH MITM attack (CVE-2023-22742) when updating rules and config files. (#888) (@YamatoSecurity)\n\n## 2.1.0 [2023/01/10] \"Happy Year of the Rabbit Release\"\n\n**Enhancements:**\n\n- Speed improvements. (#847) (@hitenkoku)\n- Improved speed by up to 20% by improving I/O processesing. (#858) (@fukusuket)\n- The timeline order of detections are now sorted to a fixed order even when the timestamp is identical. (#827) (@hitenkoku)\n\n**Bug Fixes:**\n\n- Successful login CSV results were not correctly being outputted when using the logon timeline function. (#849) (@hitenkoku)\n- Removed unnecessary line breaks that would occur when using the `-J, --jsonl` option. (#852) (@hitenkoku)\n\n## 2.0.0 [2022/12/24] \"Merry Christmas Release\"\n\n**New Features:**\n\n- Command usage and help menu are now done by subcommands. (#656) (@hitenkoku)\n\n## 1.9.0 [2022/12/24] \"Merry Christmas Release\"\n\n**New Features:**\n\n- Added a new pipe keyword. (`|endswithfield`) (#740) (@hach1yon)\n- Added `--debug` option to display memory utilization at runtime. (#788) (@fukusuket)\n\n**Enhancements:**\n\n- Updated clap crate package to version 4 and changed the `--visualize-timeline` short option `-V` to `-T`. (#725) (@hitenkoku)\n- Added output of logon types, source computer and source IP address in Logon Summary as well as failed logons. (#835) (@garigariganzy @hitenkoku)\n- Optimized speed and memory usage. (#787) (@fukusuket)\n- Changed output color in eggs ascii art.(#839) (@hitenkoku)\n- Made the `--debug` option hidden by default. (#841) (@hitenkoku)\n- Added color to the ascii art eggs. (#839) (@hitenkoku)\n\n**Bug Fixes:**\n\n- Fixed a bug where evtx files would not be loaded if run from a command prompt and the directory path was enclosed in double quotes. (#828) (@hitenkoku)\n- Fixed unneeded spaces outputted when there were rule parsing errors. (#829) (@hitenkoku)\n\n## 1.8.1 [2022/11/21]\n\n**Enhancements:**\n\n- Specified the minimum Rust version `rust-version` field in `Cargo.toml` to avoid build dependency errors. (#802) (@hitenkoku)\n- Reduced memory usage. (#806) (@fukusuket)\n- Added the support for the `%RenderedMessage%` field in output profiles which is the rendered message in logs forwarded by WEC. (#760) (@hitenkoku)\n\n**Bug Fixes:**\n\n- Fixed a problem where rules using the `Data` field were not being detected. (#775) (@hitenkoku)\n- Fixed a problem where the `%MitreTags%` and `%MitreTactics%` fields would randomly miss values. (#807) (@fukusuket)\n\n## 1.8.0 [2022/11/07]\n\n**New Features:**\n\n- Added the `--ISO-8601` output time format option. This good to use when importing to Elastic Stack. It is exactly the same as what is in the original log.  (#767) (@hitenkoku)\n\n**Enhancements:**\n\n- Event ID filtering is now turned off by default. Use the `-e, --eid-filter` option to filter by Event ID. (Will usually be 10%+ faster but with a small chance of false negatives.) (#759) (@hitenkoku)\n- Print an easy to understand error message when a user tries to download new rules with a different user account. (#758) (@fukusuket)\n- Added total and unique detecion count information in the HTML Report. (#762) (@hitenkoku)\n- Removed unnecessary array structure in the JSON output. (#766)(@hitenkoku)\n- Added rule authors (`%RuleAuthor%`), rule creation date (`%RuleCreationDate%`), rule modified date (`%RuleModifiedDate%`), and rule status (`%Status%`) fields to output profiles. (#761) (@hitenkoku)\n- Changed Details field in JSON output to an object. (#773) (@hitenkoku)\n- Removed `build.rs` and changed the memory allocator to mimalloc for a speed increase of 20-30% on Intel-based OSes. (#657) (@fukusuket)\n- Replaced `%RecordInformation%` alias in output profiles to `%AllFieldInfo%`, and changed the `AllFieldInfo` field in JSON output to an object. (#750) (@hitenkoku)\n- Removed `HBFI-` prefix in `AllFieldInfo` field of json output. (#791) (@hitenkoku)\n- Don't display result summary, etc... when `--no-summary` option is used. (This is good to use when using as a Velociraptor agent, etc... It will usually be 10% faster.) (#780) (@hitenkoku)\n- Reduced memory usage and improved speed performance. (#778 #790) (@hitenkoku)\n- Don't display Rule Authors list when authors list is empty. (#795) (@hitenkoku)\n- Added rule ID (`%RuleID%`) and Provider Name (`%Provider%`) fields to output profiles. (#794) (@hitenkoku)\n\n**Bug Fixes:**\n\n- Fixed rule author unique rule count. (It was displaying one extra.) (#783) (@hitenkoku)\n\n## 1.7.2 [2022/10/17]\n\n**New Features:**\n\n- Added `--list-profiles` option to print a list of output profiles. (#746) (@hitenkoku)\n\n**Enhancements:**\n\n- Moved the saved file line and shortened the update option output. (#754) (@YamatoSecurity)\n- Limited rule author names of detected alerts to 40 characters. (#751) (@hitenkoku)\n\n**Bug Fixes:**\n\n- Fixed a bug where field information would get moved over in JSON/JSONL output when a drive letter (ex: `c:`) was in the field. (#748) (@hitenkoku)\n\n## 1.7.1 [2022/10/10]\n\n**Enhancements:**\n\n- Hayabusa now checks Channel and EID information based on `rules/config/channel_eid_info.txt` to provide more accurate results. (#463) (@garigariganzy)\n- Do not display a message about loading detection rules when using the `-M` or `-L` options. (#730) (@hitenkoku)\n- Added a table of rule authors to standard output. (#724) (@hitenkoku)\n- Ignore event records when the channel name is `null` (ETW events) when scanning and showing EID metrics. (#727) (@hitenkoku)\n\n**Bug Fixes:**\n\n- Fixed a bug where the same Channel and EID would be counted separately with the `-M` option. (#729) (@hitenkoku)\n\n## 1.7.0 [2022/09/29]\n\n**New Features:**\n\n- Added a HTML summary report output option (`-H, --html-report`). (#689) (@hitenkoku, @nishikawaakira)\n\n**Enhancements:**\n\n- Changed Event ID Statistics option to Event ID Metrics option. (`-s, --statistics`  -> `-M, --metrics`) (#706) (@hitenkoku)\n  (Note: `statistics_event_info.txt` was changed to `event_id_info.txt`.)\n- Display new version of Hayabusa link when updating rules if there is a newer version. (#710) (@hitenkoku)\n- Added logo in HTML summary output. (#714) (@hitenkoku)\n- Unified output to one table when using `-M` or `-L` with the `-d` option. (#707) (@hitenkoku)\n- Added Channel column to metrics output. (#707) (@hitenkoku)\n- Removed First Timestamp and Last Timestamp of `-M` and `-L` option with the `-d` option. (#707) (@hitenkoku)\n- Added csv output option(`-o --output`) when `-M` or `-L` option is used. (#707) (@hitenkoku)\n- Separated Count and Percent columns in metric output. (#707) (@hitenkoku)\n- Changed output table format of the metric option and logon information crate from prettytable-rs to comfy_table. (#707) (@hitenkoku)\n- Added favicon.png in HTML summary output. (#722) (@hitenkoku)\n\n## v1.6.0 [2022/09/16]\n\n**New Features:**\n\n- You can now save the timeline to JSON files with the `-j, --json` option.  (#654) (@hitenkoku)\n- You can now save the timeline to JSONL files with the `-J, --jsonl` option.  (#694) (@hitenkoku)\n\n**Enhancements:**\n\n- Added top alerts to results summary. (#667) (@hitenkoku)\n- Added `--no-summary` option to not display the results summary. (#672) (@hitenkoku)\n- Made the results summary more compact. (#675 #678) (@hitenkoku)\n- Made Channel field in channel_abbreviations.txt case-insensitive. (#685) (@hitenkoku)\n- Changed pipe separator character in output from `|` to `‖`. (#687) (@hitenkoku)\n- Added color to Saved alerts and events / Total events analyzed. (#690) (@hitenkoku)\n- Updated evtx crate to 0.8.0. (better handling when headers or date values are invalid.)\n- Updated output profiles. (@YamatoSecurity)\n\n**Bug Fixes:**\n\n- Hayabusa would crash with `-L` option (logon summary option). (#674) (@hitenkoku)\n- Hayabusa would continue to scan without the correct config files but now will print and error and gracefully terminate. (#681) (@hitenkoku)\n- Fixed total events from the number of scanned events to actual events in evtx. (#683) (@hitenkoku)\n\n## v1.5.1 [2022/08/20]\n\n**Enhancements:**\n\n- Re-released v1.5.1 with an updated output profile that is compatible with Timesketch. (#668) (@YamatoSecurity)\n\n## v1.5.1 [2022/08/19]\n\n**Bug Fixes:**\n\n- Critical, medium and low level alerts were not being displayed in color. (#663) (@fukusuket)\n- Hayabusa would crash when an evtx file specified with `-f` did not exist. (#664) (@fukusuket)\n\n## v1.5.0 [2022/08/18]\n\n**New Features:**\n\n- Customizable output of fields defined at `config/profiles.yaml` and `config/default_profile.yaml`. (#165) (@hitenkoku)\n- Implemented the `null` keyword for rule detection. It is used to check if a target field exists or not. (#643) (@hitenkoku)\n- Added output to JSON option (`-j` and `--json-timeline` )  (#654) (@hitenkoku)\n\n**Enhancements:**\n\n- Trimmed `./` from the rule path when updating. (#642) (@hitenkoku)\n- Added new output aliases for MITRE ATT&CK tags and other tags. (#637) (@hitenkoku)\n- Organized the menu output when `-h` is used. (#651) (@YamatoSecurity and @hitenkoku)\n- Added commas to summary numbers to make them easier to read. (#649) (@hitenkoku)\n- Added output percentage of detections in Result Summary. (#658) (@hitenkoku)\n\n**Bug Fixes:**\n\n- Fixed miscalculation of Data Reduction due to aggregation condition rule detection. (#640) (@hitenkoku)\n- Fixed a race condition bug where a few events (around 0.01%) would not be detected. (#639 #660) (@fukusuket)\n\n## v1.4.3 [2022/08/03]\n\n**Bug Fixes:**\n\n- Hayabusa would not run on Windows 11 when the VC redistribute package was not installed but now everything is compiled statically. (#635) (@fukusuket)\n\n## v1.4.2 [2022/07/24]\n\n**Enhancements:**\n\n- You can now update rules to a custom directory by combining the `--update-rules` and `--rules` options. (#615) (@hitenkoku)\n- Improved speed with parallel processing by up to 20% with large files. (#479) (@kazuminn)\n- When saving files with `-o`, the `.yml` detection rule path column changed from `RulePath` to `RuleFile` and only the rule file name will be saved in order to decrease file size. (#623) (@hitenkoku)\n\n**Bug Fixes:**\n\n- Fixed a runtime error when hayabusa is run from a different path than the current directory. (#618) (@hitenkoku)\n\n## v1.4.1 [2022/06/30]\n\n**Enhancements:**\n\n- When no `details` field is defined in a rule nor in `./rules/config/default_details.txt`, all fields will be outputted to the `details` column. (#606) (@hitenkoku)\n- Added the `-D, --deep-scan` option. Now by default, events are filtered by Event IDs that there are detection rules for defined in `./rules/config/target_event_IDs.txt`. This should improve performance by 25~55% while still detecting almost everything. If you want to do a thorough scan on all events, you can disable the event ID filter with `-D, --deep-scan`. (#608) (@hitenkoku)\n- `channel_abbreviations.txt`, `statistics_event_info.txt` and `target_event_IDs.txt` have been moved from the `config` directory to the `rules/config` directory in order to provide updates with `-U, --update-rules`.\n\n## v1.4.0 [2022/06/26]\n\n**New Features:**\n\n- Added `--target-file-ext` option. You can specify additional file extensions to scan in addtition to the default `.evtx` files. For example, `--target-file-ext evtx_data` or multiple extensions with `--target-file-ext evtx1 evtx2`. (#586) (@hitenkoku)\n- Added `--exclude-status` option: You can ignore rules based on their `status`. (#596) (@hitenkoku)\n\n**Enhancements:**\n\n- Added default details output based on `rules/config/default_details.txt` when no `details` field in a rule is specified. (i.e. Sigma rules) (#359) (@hitenkoku)\n- Updated clap crate package to version 3. (#413) (@hitnekoku)\n- Updated the default usage and help menu. (#387) (@hitenkoku)\n- Hayabusa can be run from any directory, not just from the current directory. (#592) (@hitenkoku)\n- Added saved file size output when `output` is specified. (#595) (@hitenkoku)\n\n**Bug Fixes:**\n\n- Fixed output error and program termination when long output is displayed with color. (#603) (@hitenkoku)\n- Ignore loading yml files in `rules/tools/sigmac/testfiles` to fix `Excluded rules` count. (#602) (@hitenkoku)\n\n## v1.3.2 [2022/06/13]\n\n**Enhancements:**\n\n- Changed the evtx Rust crate from 0.7.2 to 0.7.3 with updated packages. (@YamatoSecurity)\n\n## v1.3.1 [2022/06/13]\n\n**New Features:**\n\n- You can now specify specific fields when there are multiple fields with the same name (Ex: `Data`). In the `details` line in a rule, specify a placeholder like `%Data[1]%` to display the first `Data` field. (#487) (@hitenkoku)\n- Added loaded rules status summary. (#583) (@hitenkoku)\n\n**Enhancements:**\n\n- Debug symbols are stripped by default for smaller Linux and macOS binaries. (#568) (@YamatoSecurity)\n- Updated crate packages (@YamatoSecurity)\n- Added new output time format options. (`--US-time`, `--US-military-time`, `--European-time`) (#574) (@hitenkoku)\n- Changed the output time format when `--rfc-3339` option is enabled. (#574) (@hitenkoku)\n- Changed the `-R / --display-record-id` option to `-R / --hide-record-id` and now by default the event record ID is displayed. You can hide the record ID with `-R / --hide-record-id`. (#579) (@hitenkoku)\n- Added rule loading message. (#583) (@hitenkoku)\n\n**Bug Fixes:**\n\n- The RecordID and RecordInformation column headers would be shown even if those options were not enabled. (#577) (@hitenkoku)\n\n## v1.3.0 [2022/06/06]\n\n**New Features:**\n\n- Added `-V / --visualize-timeline` option: Event Frequency Timeline feature to visualize the number of events. (Note: There needs to be more than 5 events and you need to use a terminal like Windows Terminal, iTerm2, etc... for it to properly render.) (#533, #566) (@hitenkoku)\n- Display all the `tags` defined in a rule to the `MitreAttack` column when saving to CSV file with the `--all-tags` option. (#525) (@hitenkoku)\n- Added the `-R / --display-record-id` option: Display the event record ID (`<Event><System><EventRecordID>`). (#548) (@hitenkoku)\n- Display dates with most detections. (#550) (@hitenkoku)\n- Display the top 5 computers with the most unique detections. (#557) (@hitenkoku)\n\n**Enhancements:**\n\n- In the `details` line in a rule, when a placeholder points to a field that does not exist or there is an incorrect alias mapping, it will be outputted as `n/a` (not available). (#528) (@hitenkoku)\n- Display total event and data reduction count. (How many and what percent of events were ignored.) (#538) (@hitenkoku)\n- New logo. (#536) (@YamatoSecurity)\n- Display total evtx file size. (#540) (@hitenkoku)\n- Changed logo color. (#537) (@hitenkoku)\n- Display the original `Channel` name when not specified in `channel_abbrevations.txt`. (#553) (@hitenkoku)\n- Display separately `Ignored rules` to `Exclude rules`, `Noisy rules`, and `Deprecated rules`. (#556) (@hitenkoku)\n- Display results messge when `output` option is set. (#561) (@hitenkoku)\n\n**Bug Fixes:**\n\n- Fixed the `--start-timeline` and `--end-timeline` options as they were not working. (#546) (@hitenkoku)\n- Fixed crash bug when level in rule is not valid. (#560) (@hitenkoku)\n\n## v1.2.2 [2022/05/20]\n\n**New Features:**\n\n- Added a logon summary feature. (`-L` / `--logon-summary`) (@garigariganzy)\n\n**Enhancements:**\n\n- Colored output is now on by default and supports Command and Powershell prompts. (@hitenkoku)\n\n**Bug Fixes:**\n\n- Fixed a bug in the update feature when the rules repository does not exist but the rules folder exists. (#516) (@hitenkoku)\n- Fixed a rule parsing error bug when there were .yml files in a .git folder. (#524) (@hitenkoku)\n- Fixed wrong version number in the 1.2.1 binary.\n\n## v1.2.1 [2022/04/20] Black Hat Asia Arsenal 2022 RC2\n\n**New Features:**\n\n- Added a `Channel` column to the output based on the `./config/channel_abbreviations.txt` config file. (@hitenkoku)\n- Rule and rule config files are now forcefully updated. (@hitenkoku)\n\n**Bug Fixes:**\n\n- Rules marked as noisy or excluded would not have their `level` changed with `--level-tuning` but now all rules will be checked. (@hitenkoku)\n\n## v1.2.0 [2022/04/15] Black Hat Asia Arsenal 2022 RC1\n\n**New Features:**\n\n- Specify config directory (`-C / --config`): When specifying a different rules directory, the rules config directory will still be the default `rules/config`, so this option is useful when you want to test rules and their config files in a different directory. (@hitenkoku)\n- `|equalsfield` aggregator: In order to write rules that compare if two fields are equal or not. (@hach1yon)\n- Pivot keyword list generator feature (`-p / --pivot-keywords-list`): Will generate a list of keywords to grep for to quickly identify compromised machines, suspicious usernames, files, etc... (@kazuminn)\n- `-F / --full-data` option: Will output all field information in addition to the fields defined in the rule’s `details`. (@hach1yon)\n- `--level-tuning` option: You can tune the risk `level` in hayabusa and sigma rules to your environment. (@itib and @hitenkoku)\n\n**Enhancements:**\n\n- Updated detection rules and documentation. (@YamatoSecurity)\n- Mac and Linux binaries now statically compile the OpenSSL libraries. (@YamatoSecurity)\n- Performance and accuracy improvement for fields with tabs, etc... in them. (@hach1yon and @hitenkoku)\n- Fields that are not defined in eventkey_alias.txt will automatically be searched in Event.EventData. (@kazuminn and @hitenkoku)\n- When updating rules, the names of new rules as well as the count will be displayed. (@hitenkoku)\n- Removed all Clippy warnings from the source code. (@hitenkoku and @hach1yon)\n- Updated the event ID and title config file (`timeline_event_info.txt`) and changed the name to `statistics_event_info.txt`. (@YamatoSecurity and @garigariganzy)\n- 32-bit Hayabusa Windows binaries are now prevented from running on 64-bit Windows as it would cause unexpected results. (@hitenkoku)\n- MITRE ATT&CK tag output can be customized in `output_tag.txt`. (@hitenkoku)\n- Added Channel column output. (@hitenkoku)\n\n**Bug Fixes:**\n\n- `.yml` files in the `.git` folder would cause parse errors so they are now ignored. (@hitenkoku)\n- Removed unnecessary newline due to loading test file rules. (@hitenkoku)\n- Fixed output stopping in Windows Terminal due a bug in Terminal itself. (@hitenkoku)\n\n## v1.1.0 [2022/03/03]\n\n**New Features:**\n\n- Can specify a single rule with the `-r / --rules` option. (Great for testing rules!) (@kazuminn)\n- Rule update option (`-u / --update-rules`): Update to the latest rules in the [hayabusa-rules](https://github.com/Yamato-Security/hayabusa-rules) repository. (@hitenkoku)\n- Live analysis option (`-l / --live-analysis`): Can easily perform live analysis on Windows machines without specifying the Windows event log directory. (@hitenkoku)\n\n**Enhancements:**\n\n- Updated documentation. (@kazuminn , @hitenkoku , @YamatoSecurity)\n- Updated rules. (20+ Hayabusa rules, 200+ Sigma rules) (@YamatoSecurity)\n- Windows binaries are now statically compiled so installing Visual C++ Redistributable is not required. (@hitenkoku)\n- Color output (`-c / --color`) for terminals that support True Color (Windows Terminal, iTerm2, etc...). (@hitenkoku)\n- MITRE ATT&CK tactics are included in the saved CSV output. (@hitenkoku)\n- Performance improvement. (@hitenkoku)\n- Comments added to exclusion and noisy config files. (@kazuminn)\n- Using faster memory allocators (rpmalloc for Windows, jemalloc for macOS and Linux.) (@kazuminn)\n- Updated cargo crates. (@YamatoSecurity)\n\n**Bug Fixes:**\n\n- Made the clap library version static to make `cargo update` more stable. (@hitenkoku)\n- Some rules were not alerting if there were tabs or carriage returns in the fields. (@hitenkoku)\n\n## v1.0.0-Release 2 [2022/01/27]\n\n- Removed Excel result sample files as they were being flagged by anti-virus. (@YamatoSecurity)\n- Updated the Rust evtx library to 0.7.2 (@YamatoSecurity)\n\n## v1.0.0 [2021/12/25]\n\n- Initial release.\n"
        },
        {
          "name": "Cargo.lock",
          "type": "blob",
          "size": 67.4453125,
          "content": "# This file is automatically @generated by Cargo.\n# It is not intended for manual editing.\nversion = 4\n\n[[package]]\nname = \"addr2line\"\nversion = \"0.24.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"dfbe277e56a376000877090da837660b4427aad530e3028d44e0bffe4f89a1c1\"\ndependencies = [\n \"gimli\",\n]\n\n[[package]]\nname = \"adler2\"\nversion = \"2.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"512761e0bb2578dd7380c6baaa0f4ce03e84f95e960231d1dec8bf4d7d6e2627\"\n\n[[package]]\nname = \"ahash\"\nversion = \"0.8.11\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e89da841a80418a9b391ebaea17f5c112ffaaa96f621d2c285b5174da76b9011\"\ndependencies = [\n \"cfg-if\",\n \"once_cell\",\n \"version_check\",\n \"zerocopy\",\n]\n\n[[package]]\nname = \"aho-corasick\"\nversion = \"1.1.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8e60d3430d3a69478ad0993f19238d2df97c507009a52b3c10addcd7f6bcb916\"\ndependencies = [\n \"memchr\",\n]\n\n[[package]]\nname = \"allocator-api2\"\nversion = \"0.2.21\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"683d7910e743518b0e34f1186f92494becacb047c7b6bf616c96772180fef923\"\n\n[[package]]\nname = \"android-tzdata\"\nversion = \"0.1.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e999941b234f3131b00bc13c22d06e8c5ff726d1b6318ac7eb276997bbb4fef0\"\n\n[[package]]\nname = \"android_system_properties\"\nversion = \"0.1.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"819e7219dbd41043ac279b19830f2efc897156490d7fd6ea916720117ee66311\"\ndependencies = [\n \"libc\",\n]\n\n[[package]]\nname = \"anstream\"\nversion = \"0.6.18\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8acc5369981196006228e28809f761875c0327210a891e941f4c683b3a99529b\"\ndependencies = [\n \"anstyle\",\n \"anstyle-parse\",\n \"anstyle-query\",\n \"anstyle-wincon\",\n \"colorchoice\",\n \"is_terminal_polyfill\",\n \"utf8parse\",\n]\n\n[[package]]\nname = \"anstyle\"\nversion = \"1.0.10\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"55cc3b69f167a1ef2e161439aa98aed94e6028e5f9a59be9a6ffb47aef1651f9\"\n\n[[package]]\nname = \"anstyle-parse\"\nversion = \"0.2.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3b2d16507662817a6a20a9ea92df6652ee4f94f914589377d69f3b21bc5798a9\"\ndependencies = [\n \"utf8parse\",\n]\n\n[[package]]\nname = \"anstyle-query\"\nversion = \"1.1.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"79947af37f4177cfead1110013d678905c37501914fba0efea834c3fe9a8d60c\"\ndependencies = [\n \"windows-sys 0.59.0\",\n]\n\n[[package]]\nname = \"anstyle-wincon\"\nversion = \"3.0.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"2109dbce0e72be3ec00bed26e6a7479ca384ad226efdd66db8fa2e3a38c83125\"\ndependencies = [\n \"anstyle\",\n \"windows-sys 0.59.0\",\n]\n\n[[package]]\nname = \"anyhow\"\nversion = \"1.0.95\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"34ac096ce696dc2fcabef30516bb13c0a68a11d30131d3df6f04711467681b04\"\n\n[[package]]\nname = \"arraydeque\"\nversion = \"0.5.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"7d902e3d592a523def97af8f317b08ce16b7ab854c1985a0c671e6f15cebc236\"\n\n[[package]]\nname = \"arrayvec\"\nversion = \"0.7.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"7c02d123df017efcdfbd739ef81735b36c5ba83ec3c59c80a9d7ecc718f92e50\"\n\n[[package]]\nname = \"autocfg\"\nversion = \"1.4.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ace50bade8e6234aa140d9a2f552bbee1db4d353f69b8217bc503490fc1a9f26\"\n\n[[package]]\nname = \"backtrace\"\nversion = \"0.3.74\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8d82cb332cdfaed17ae235a638438ac4d4839913cc2af585c3c6746e8f8bee1a\"\ndependencies = [\n \"addr2line\",\n \"cfg-if\",\n \"libc\",\n \"miniz_oxide\",\n \"object\",\n \"rustc-demangle\",\n \"windows-targets 0.52.6\",\n]\n\n[[package]]\nname = \"base64\"\nversion = \"0.22.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"72b3254f16251a8381aa12e40e3c4d2f0199f8c6508fbecb9d91f575e0fbb8c6\"\n\n[[package]]\nname = \"bitflags\"\nversion = \"1.3.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"bef38d45163c2f1dde094a7dfd33ccf595c92905c8f8f4fdc18d06fb1037718a\"\n\n[[package]]\nname = \"bitflags\"\nversion = \"2.6.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b048fb63fd8b5923fc5aa7b340d8e156aec7ec02f0c78fa8a6ddc2613f6f71de\"\n\n[[package]]\nname = \"block-buffer\"\nversion = \"0.10.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3078c7629b62d3f0439517fa394996acacc5cbc91c5a20d8c658e77abd503a71\"\ndependencies = [\n \"generic-array\",\n]\n\n[[package]]\nname = \"bstr\"\nversion = \"1.11.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"786a307d683a5bf92e6fd5fd69a7eb613751668d1d8d67d802846dfe367c62c8\"\ndependencies = [\n \"memchr\",\n \"serde\",\n]\n\n[[package]]\nname = \"bumpalo\"\nversion = \"3.16.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"79296716171880943b8470b5f8d03aa55eb2e645a4874bdbb28adb49162e012c\"\n\n[[package]]\nname = \"bytecount\"\nversion = \"0.6.8\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"5ce89b21cab1437276d2650d57e971f9d548a2d9037cc231abdc0562b97498ce\"\n\n[[package]]\nname = \"byteorder\"\nversion = \"1.5.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1fd0f2584146f6f2ef48085050886acf353beff7305ebd1ae69500e27c67f64b\"\n\n[[package]]\nname = \"bytes\"\nversion = \"1.9.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"325918d6fe32f23b19878fe4b34794ae41fc19ddbe53b10571a4874d44ffd39b\"\n\n[[package]]\nname = \"bytesize\"\nversion = \"1.3.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a3e368af43e418a04d52505cf3dbc23dda4e3407ae2fa99fd0e4f308ce546acc\"\n\n[[package]]\nname = \"camino\"\nversion = \"1.1.9\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8b96ec4966b5813e2c0507c1f86115c8c5abaadc3980879c3424042a02fd1ad3\"\ndependencies = [\n \"serde\",\n]\n\n[[package]]\nname = \"cargo-platform\"\nversion = \"0.1.9\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e35af189006b9c0f00a064685c727031e3ed2d8020f7ba284d78cc2671bd36ea\"\ndependencies = [\n \"serde\",\n]\n\n[[package]]\nname = \"cargo_metadata\"\nversion = \"0.14.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"4acbb09d9ee8e23699b9634375c72795d095bf268439da88562cf9b501f181fa\"\ndependencies = [\n \"camino\",\n \"cargo-platform\",\n \"semver\",\n \"serde\",\n \"serde_json\",\n]\n\n[[package]]\nname = \"castaway\"\nversion = \"0.2.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"0abae9be0aaf9ea96a3b1b8b1b55c602ca751eba1b1500220cea4ecbafe7c0d5\"\ndependencies = [\n \"rustversion\",\n]\n\n[[package]]\nname = \"cc\"\nversion = \"1.2.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8d6dbb628b8f8555f86d0323c2eb39e3ec81901f4b83e091db8a6a76d316a333\"\ndependencies = [\n \"jobserver\",\n \"libc\",\n \"shlex\",\n]\n\n[[package]]\nname = \"cfb\"\nversion = \"0.7.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d38f2da7a0a2c4ccf0065be06397cc26a81f4e528be095826eee9d4adbb8c60f\"\ndependencies = [\n \"byteorder\",\n \"fnv\",\n \"uuid\",\n]\n\n[[package]]\nname = \"cfg-if\"\nversion = \"1.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"baf1de4339761588bc0619e3cbc0120ee582ebb74b53b4efbf79117bd2da40fd\"\n\n[[package]]\nname = \"chrono\"\nversion = \"0.4.39\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"7e36cc9d416881d2e24f9a963be5fb1cd90966419ac844274161d10488b3e825\"\ndependencies = [\n \"android-tzdata\",\n \"iana-time-zone\",\n \"js-sys\",\n \"num-traits\",\n \"serde\",\n \"wasm-bindgen\",\n \"windows-targets 0.52.6\",\n]\n\n[[package]]\nname = \"cidr\"\nversion = \"0.2.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"6bdf600c45bd958cf2945c445264471cca8b6c8e67bc87b71affd6d7e5682621\"\n\n[[package]]\nname = \"cidr-utils\"\nversion = \"0.6.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"25c0a9fb70c2c2cc2a520aa259b1d1345650046a07df1b6da1d3cefcd327f43e\"\ndependencies = [\n \"cidr\",\n \"num-bigint\",\n \"num-traits\",\n]\n\n[[package]]\nname = \"clap\"\nversion = \"4.5.23\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3135e7ec2ef7b10c6ed8950f0f792ed96ee093fa088608f1c76e569722700c84\"\ndependencies = [\n \"clap_builder\",\n \"clap_derive\",\n]\n\n[[package]]\nname = \"clap_builder\"\nversion = \"4.5.23\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"30582fc632330df2bd26877bde0c1f4470d57c582bbc070376afcd04d8cb4838\"\ndependencies = [\n \"anstream\",\n \"anstyle\",\n \"clap_lex\",\n \"strsim\",\n]\n\n[[package]]\nname = \"clap_derive\"\nversion = \"4.5.18\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"4ac6a0c7b1a9e9a5186361f67dfa1b88213572f427fb9ab038efb2bd8c582dab\"\ndependencies = [\n \"heck\",\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.92\",\n]\n\n[[package]]\nname = \"clap_lex\"\nversion = \"0.7.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f46ad14479a25103f283c0f10005961cf086d8dc42205bb44c46ac563475dca6\"\n\n[[package]]\nname = \"colorchoice\"\nversion = \"1.0.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"5b63caa9aa9397e2d9480a9b13673856c78d8ac123288526c37d7839f2a86990\"\n\n[[package]]\nname = \"colored\"\nversion = \"2.2.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"117725a109d387c937a1533ce01b450cbde6b88abceea8473c4d7a85853cda3c\"\ndependencies = [\n \"lazy_static\",\n \"windows-sys 0.59.0\",\n]\n\n[[package]]\nname = \"comfy-table\"\nversion = \"7.1.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"24f165e7b643266ea80cb858aed492ad9280e3e05ce24d4a99d7d7b889b6a4d9\"\ndependencies = [\n \"crossterm\",\n \"strum\",\n \"strum_macros\",\n \"unicode-width\",\n]\n\n[[package]]\nname = \"compact_str\"\nversion = \"0.8.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"6050c3a16ddab2e412160b31f2c871015704239bca62f72f6e5f0be631d3f644\"\ndependencies = [\n \"castaway\",\n \"cfg-if\",\n \"itoa\",\n \"rustversion\",\n \"ryu\",\n \"static_assertions\",\n]\n\n[[package]]\nname = \"console\"\nversion = \"0.15.10\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ea3c6ecd8059b57859df5c69830340ed3c41d30e3da0c1cbed90a96ac853041b\"\ndependencies = [\n \"encode_unicode\",\n \"libc\",\n \"once_cell\",\n \"unicode-width\",\n \"windows-sys 0.59.0\",\n]\n\n[[package]]\nname = \"core-foundation-sys\"\nversion = \"0.8.7\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"773648b94d0e5d620f64f280777445740e61fe701025087ec8b57f45c791888b\"\n\n[[package]]\nname = \"cpufeatures\"\nversion = \"0.2.16\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"16b80225097f2e5ae4e7179dd2266824648f3e2f49d9134d584b76389d31c4c3\"\ndependencies = [\n \"libc\",\n]\n\n[[package]]\nname = \"crc32fast\"\nversion = \"1.4.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a97769d94ddab943e4510d138150169a2758b5ef3eb191a9ee688de3e23ef7b3\"\ndependencies = [\n \"cfg-if\",\n]\n\n[[package]]\nname = \"crossbeam-deque\"\nversion = \"0.8.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"9dd111b7b7f7d55b72c0a6ae361660ee5853c9af73f70c3c2ef6858b950e2e51\"\ndependencies = [\n \"crossbeam-epoch\",\n \"crossbeam-utils\",\n]\n\n[[package]]\nname = \"crossbeam-epoch\"\nversion = \"0.9.18\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"5b82ac4a3c2ca9c3460964f020e1402edd5753411d7737aa39c3714ad1b5420e\"\ndependencies = [\n \"crossbeam-utils\",\n]\n\n[[package]]\nname = \"crossbeam-utils\"\nversion = \"0.8.21\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d0a5c400df2834b80a4c3327b3aad3a4c4cd4de0629063962b03235697506a28\"\n\n[[package]]\nname = \"crossterm\"\nversion = \"0.28.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"829d955a0bb380ef178a640b91779e3987da38c9aea133b20614cfed8cdea9c6\"\ndependencies = [\n \"bitflags 2.6.0\",\n \"crossterm_winapi\",\n \"parking_lot\",\n \"rustix\",\n \"winapi\",\n]\n\n[[package]]\nname = \"crossterm_winapi\"\nversion = \"0.9.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"acdd7c62a3665c7f6830a51635d9ac9b23ed385797f70a83bb8bafe9c572ab2b\"\ndependencies = [\n \"winapi\",\n]\n\n[[package]]\nname = \"crypto-common\"\nversion = \"0.1.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1bfb12502f3fc46cca1bb51ac28df9d618d813cdc3d2f25b9fe775a34af26bb3\"\ndependencies = [\n \"generic-array\",\n \"typenum\",\n]\n\n[[package]]\nname = \"csv\"\nversion = \"1.3.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"acdc4883a9c96732e4733212c01447ebd805833b7275a73ca3ee080fd77afdaf\"\ndependencies = [\n \"csv-core\",\n \"itoa\",\n \"ryu\",\n \"serde\",\n]\n\n[[package]]\nname = \"csv-core\"\nversion = \"0.1.11\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"5efa2b3d7902f4b634a20cae3c9c4e6209dc4779feb6863329607560143efa70\"\ndependencies = [\n \"memchr\",\n]\n\n[[package]]\nname = \"cty\"\nversion = \"0.2.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b365fabc795046672053e29c954733ec3b05e4be654ab130fe8f1f94d7051f35\"\n\n[[package]]\nname = \"dashmap\"\nversion = \"6.1.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"5041cc499144891f3790297212f32a74fb938e5136a14943f338ef9e0ae276cf\"\ndependencies = [\n \"cfg-if\",\n \"crossbeam-utils\",\n \"hashbrown 0.14.5\",\n \"lock_api\",\n \"once_cell\",\n \"parking_lot_core\",\n]\n\n[[package]]\nname = \"dialoguer\"\nversion = \"0.11.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"658bce805d770f407bc62102fca7c2c64ceef2fbcb2b8bd19d2765ce093980de\"\ndependencies = [\n \"console\",\n \"shell-words\",\n \"tempfile\",\n \"thiserror\",\n \"zeroize\",\n]\n\n[[package]]\nname = \"digest\"\nversion = \"0.10.7\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"9ed9a281f7bc9b7576e61468ba615a66a5c8cfdff42420a70aa82701a3b1e292\"\ndependencies = [\n \"block-buffer\",\n \"crypto-common\",\n]\n\n[[package]]\nname = \"displaydoc\"\nversion = \"0.2.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"97369cbbc041bc366949bc74d34658d6cda5621039731c6310521892a3a20ae0\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.92\",\n]\n\n[[package]]\nname = \"downcast-rs\"\nversion = \"1.2.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"75b325c5dbd37f80359721ad39aca5a29fb04c89279657cffdda8736d0c0b9d2\"\n\n[[package]]\nname = \"either\"\nversion = \"1.13.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"60b1af1c220855b6ceac025d3f6ecdd2b7c4894bfe9cd9bda4fbb4bc7c0d4cf0\"\n\n[[package]]\nname = \"encode_unicode\"\nversion = \"1.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"34aa73646ffb006b8f5147f3dc182bd4bcb190227ce861fc4a4844bf8e3cb2c0\"\n\n[[package]]\nname = \"encoding\"\nversion = \"0.2.33\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"6b0d943856b990d12d3b55b359144ff341533e516d94098b1d3fc1ac666d36ec\"\ndependencies = [\n \"encoding-index-japanese\",\n \"encoding-index-korean\",\n \"encoding-index-simpchinese\",\n \"encoding-index-singlebyte\",\n \"encoding-index-tradchinese\",\n]\n\n[[package]]\nname = \"encoding-index-japanese\"\nversion = \"1.20141219.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"04e8b2ff42e9a05335dbf8b5c6f7567e5591d0d916ccef4e0b1710d32a0d0c91\"\ndependencies = [\n \"encoding_index_tests\",\n]\n\n[[package]]\nname = \"encoding-index-korean\"\nversion = \"1.20141219.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"4dc33fb8e6bcba213fe2f14275f0963fd16f0a02c878e3095ecfdf5bee529d81\"\ndependencies = [\n \"encoding_index_tests\",\n]\n\n[[package]]\nname = \"encoding-index-simpchinese\"\nversion = \"1.20141219.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d87a7194909b9118fc707194baa434a4e3b0fb6a5a757c73c3adb07aa25031f7\"\ndependencies = [\n \"encoding_index_tests\",\n]\n\n[[package]]\nname = \"encoding-index-singlebyte\"\nversion = \"1.20141219.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3351d5acffb224af9ca265f435b859c7c01537c0849754d3db3fdf2bfe2ae84a\"\ndependencies = [\n \"encoding_index_tests\",\n]\n\n[[package]]\nname = \"encoding-index-tradchinese\"\nversion = \"1.20141219.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"fd0e20d5688ce3cab59eb3ef3a2083a5c77bf496cb798dc6fcdb75f323890c18\"\ndependencies = [\n \"encoding_index_tests\",\n]\n\n[[package]]\nname = \"encoding_index_tests\"\nversion = \"0.1.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a246d82be1c9d791c5dfde9a2bd045fc3cbba3fa2b11ad558f27d01712f00569\"\n\n[[package]]\nname = \"encoding_rs\"\nversion = \"0.8.35\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"75030f3c4f45dafd7586dd6780965a8c7e8e285a5ecb86713e63a79c5b2766f3\"\ndependencies = [\n \"cfg-if\",\n]\n\n[[package]]\nname = \"equivalent\"\nversion = \"1.0.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"5443807d6dff69373d433ab9ef5378ad8df50ca6298caf15de6e52e24aaf54d5\"\n\n[[package]]\nname = \"errno\"\nversion = \"0.3.10\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"33d852cb9b869c2a9b3df2f71a3074817f01e1844f839a144f5fcef059a4eb5d\"\ndependencies = [\n \"libc\",\n \"windows-sys 0.59.0\",\n]\n\n[[package]]\nname = \"error-chain\"\nversion = \"0.12.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"2d2f06b9cac1506ece98fe3231e3cc9c4410ec3d5b1f24ae1c8946f0742cdefc\"\ndependencies = [\n \"version_check\",\n]\n\n[[package]]\nname = \"evtx\"\nversion = \"0.8.13\"\nsource = \"git+https://github.com/Yamato-Security/hayabusa-evtx.git?rev=cd33263#cd33263767db119bb9c5c1b2f29549580fdf812f\"\ndependencies = [\n \"anyhow\",\n \"bitflags 2.6.0\",\n \"byteorder\",\n \"chrono\",\n \"clap\",\n \"crc32fast\",\n \"dialoguer\",\n \"encoding\",\n \"hashbrown 0.15.2\",\n \"indoc\",\n \"jemallocator\",\n \"log\",\n \"memchr\",\n \"quick-xml\",\n \"rayon\",\n \"rpmalloc\",\n \"serde_json\",\n \"skeptic\",\n \"thiserror\",\n \"winstructs\",\n]\n\n[[package]]\nname = \"fastrand\"\nversion = \"2.3.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"37909eebbb50d72f9059c3b6d82c0463f2ff062c9e95845c43a6c9c0355411be\"\n\n[[package]]\nname = \"file-chunker\"\nversion = \"0.1.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"92828425bb36590609d28014a252d6f0f71b698875a2b131fae367c627b6c656\"\ndependencies = [\n \"anyhow\",\n \"memmap2 0.5.10\",\n]\n\n[[package]]\nname = \"flate2\"\nversion = \"1.0.35\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"c936bfdafb507ebbf50b8074c54fa31c5be9a1e7e5f467dd659697041407d07c\"\ndependencies = [\n \"crc32fast\",\n \"miniz_oxide\",\n]\n\n[[package]]\nname = \"fnv\"\nversion = \"1.0.7\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3f9eec918d3f24069decb9af1554cad7c880e2da24a9afd88aca000531ab82c1\"\n\n[[package]]\nname = \"foldhash\"\nversion = \"0.1.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a0d2fde1f7b3d48b8395d5f2de76c18a528bd6a9cdde438df747bfcba3e05d6f\"\n\n[[package]]\nname = \"foreign-types\"\nversion = \"0.3.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f6f339eb8adc052cd2ca78910fda869aefa38d22d5cb648e6485e4d3fc06f3b1\"\ndependencies = [\n \"foreign-types-shared\",\n]\n\n[[package]]\nname = \"foreign-types-shared\"\nversion = \"0.1.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"00b0228411908ca8685dba7fc2cdd70ec9990a6e753e89b6ac91a84c40fbaf4b\"\n\n[[package]]\nname = \"form_urlencoded\"\nversion = \"1.2.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e13624c2627564efccf4934284bdd98cbaa14e79b0b5a141218e507b3a823456\"\ndependencies = [\n \"percent-encoding\",\n]\n\n[[package]]\nname = \"generic-array\"\nversion = \"0.14.7\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"85649ca51fd72272d7821adaf274ad91c288277713d9c18820d8499a7ff69e9a\"\ndependencies = [\n \"typenum\",\n \"version_check\",\n]\n\n[[package]]\nname = \"getrandom\"\nversion = \"0.2.15\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"c4567c8db10ae91089c99af84c68c38da3ec2f087c3f82960bcdbf3656b6f4d7\"\ndependencies = [\n \"cfg-if\",\n \"libc\",\n \"wasi\",\n]\n\n[[package]]\nname = \"gimli\"\nversion = \"0.31.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"07e28edb80900c19c28f1072f2e8aeca7fa06b23cd4169cefe1af5aa3260783f\"\n\n[[package]]\nname = \"git2\"\nversion = \"0.19.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b903b73e45dc0c6c596f2d37eccece7c1c8bb6e4407b001096387c63d0d93724\"\ndependencies = [\n \"bitflags 2.6.0\",\n \"libc\",\n \"libgit2-sys\",\n \"log\",\n \"openssl-probe\",\n \"openssl-sys\",\n \"url\",\n]\n\n[[package]]\nname = \"glob\"\nversion = \"0.3.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d2fabcfbdc87f4758337ca535fb41a6d701b65693ce38287d856d1674551ec9b\"\n\n[[package]]\nname = \"globset\"\nversion = \"0.4.15\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"15f1ce686646e7f1e19bf7d5533fe443a45dbfb990e00629110797578b42fb19\"\ndependencies = [\n \"aho-corasick\",\n \"bstr\",\n \"log\",\n \"regex-automata\",\n \"regex-syntax\",\n]\n\n[[package]]\nname = \"hashbrown\"\nversion = \"0.14.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e5274423e17b7c9fc20b6e7e208532f9b19825d82dfd615708b70edd83df41f1\"\ndependencies = [\n \"ahash\",\n]\n\n[[package]]\nname = \"hashbrown\"\nversion = \"0.15.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"bf151400ff0baff5465007dd2f3e717f3fe502074ca563069ce3a6629d07b289\"\ndependencies = [\n \"allocator-api2\",\n \"equivalent\",\n \"foldhash\",\n]\n\n[[package]]\nname = \"hashlink\"\nversion = \"0.9.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"6ba4ff7128dee98c7dc9794b6a411377e1404dba1c97deb8d1a55297bd25d8af\"\ndependencies = [\n \"hashbrown 0.14.5\",\n]\n\n[[package]]\nname = \"hayabusa\"\nversion = \"3.0.1\"\ndependencies = [\n \"aho-corasick\",\n \"base64\",\n \"bytesize\",\n \"chrono\",\n \"cidr-utils\",\n \"clap\",\n \"colored\",\n \"comfy-table\",\n \"compact_str\",\n \"console\",\n \"csv\",\n \"dashmap\",\n \"dialoguer\",\n \"downcast-rs\",\n \"encoding_rs\",\n \"evtx\",\n \"git2\",\n \"hashbrown 0.15.2\",\n \"hex\",\n \"horrorshow\",\n \"indexmap\",\n \"indicatif\",\n \"infer\",\n \"is_elevated\",\n \"itertools\",\n \"krapslog\",\n \"lazy_static\",\n \"libmimalloc-sys\",\n \"maxminddb\",\n \"memchr\",\n \"mimalloc\",\n \"nested\",\n \"num\",\n \"num-format\",\n \"openssl\",\n \"pulldown-cmark\",\n \"rand\",\n \"regex\",\n \"rust-embed\",\n \"serde\",\n \"serde_derive\",\n \"serde_json\",\n \"termcolor\",\n \"terminal_size 0.4.1\",\n \"tokio\",\n \"ureq\",\n \"uuid\",\n \"walkdir\",\n \"wildmatch\",\n \"yaml-rust2\",\n]\n\n[[package]]\nname = \"heck\"\nversion = \"0.5.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"2304e00983f87ffb38b55b444b5e3b60a884b5d30c0fca7d82fe33449bbe55ea\"\n\n[[package]]\nname = \"hermit-abi\"\nversion = \"0.3.9\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d231dfb89cfffdbc30e7fc41579ed6066ad03abda9e567ccafae602b97ec5024\"\n\n[[package]]\nname = \"hex\"\nversion = \"0.4.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"7f24254aa9a54b5c858eaee2f5bccdb46aaf0e486a595ed5fd8f86ba55232a70\"\n\n[[package]]\nname = \"horrorshow\"\nversion = \"0.8.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8371fb981840150b1a54f7cb117bf6699f7466a1d4861daac33bc6fe2b5abea0\"\n\n[[package]]\nname = \"iana-time-zone\"\nversion = \"0.1.61\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"235e081f3925a06703c2d0117ea8b91f042756fd6e7a6e5d901e8ca1a996b220\"\ndependencies = [\n \"android_system_properties\",\n \"core-foundation-sys\",\n \"iana-time-zone-haiku\",\n \"js-sys\",\n \"wasm-bindgen\",\n \"windows-core\",\n]\n\n[[package]]\nname = \"iana-time-zone-haiku\"\nversion = \"0.1.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f31827a206f56af32e590ba56d5d2d085f558508192593743f16b2306495269f\"\ndependencies = [\n \"cc\",\n]\n\n[[package]]\nname = \"icu_collections\"\nversion = \"1.5.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"db2fa452206ebee18c4b5c2274dbf1de17008e874b4dc4f0aea9d01ca79e4526\"\ndependencies = [\n \"displaydoc\",\n \"yoke\",\n \"zerofrom\",\n \"zerovec\",\n]\n\n[[package]]\nname = \"icu_locid\"\nversion = \"1.5.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"13acbb8371917fc971be86fc8057c41a64b521c184808a698c02acc242dbf637\"\ndependencies = [\n \"displaydoc\",\n \"litemap\",\n \"tinystr\",\n \"writeable\",\n \"zerovec\",\n]\n\n[[package]]\nname = \"icu_locid_transform\"\nversion = \"1.5.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"01d11ac35de8e40fdeda00d9e1e9d92525f3f9d887cdd7aa81d727596788b54e\"\ndependencies = [\n \"displaydoc\",\n \"icu_locid\",\n \"icu_locid_transform_data\",\n \"icu_provider\",\n \"tinystr\",\n \"zerovec\",\n]\n\n[[package]]\nname = \"icu_locid_transform_data\"\nversion = \"1.5.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"fdc8ff3388f852bede6b579ad4e978ab004f139284d7b28715f773507b946f6e\"\n\n[[package]]\nname = \"icu_normalizer\"\nversion = \"1.5.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"19ce3e0da2ec68599d193c93d088142efd7f9c5d6fc9b803774855747dc6a84f\"\ndependencies = [\n \"displaydoc\",\n \"icu_collections\",\n \"icu_normalizer_data\",\n \"icu_properties\",\n \"icu_provider\",\n \"smallvec\",\n \"utf16_iter\",\n \"utf8_iter\",\n \"write16\",\n \"zerovec\",\n]\n\n[[package]]\nname = \"icu_normalizer_data\"\nversion = \"1.5.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f8cafbf7aa791e9b22bec55a167906f9e1215fd475cd22adfcf660e03e989516\"\n\n[[package]]\nname = \"icu_properties\"\nversion = \"1.5.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"93d6020766cfc6302c15dbbc9c8778c37e62c14427cb7f6e601d849e092aeef5\"\ndependencies = [\n \"displaydoc\",\n \"icu_collections\",\n \"icu_locid_transform\",\n \"icu_properties_data\",\n \"icu_provider\",\n \"tinystr\",\n \"zerovec\",\n]\n\n[[package]]\nname = \"icu_properties_data\"\nversion = \"1.5.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"67a8effbc3dd3e4ba1afa8ad918d5684b8868b3b26500753effea8d2eed19569\"\n\n[[package]]\nname = \"icu_provider\"\nversion = \"1.5.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"6ed421c8a8ef78d3e2dbc98a973be2f3770cb42b606e3ab18d6237c4dfde68d9\"\ndependencies = [\n \"displaydoc\",\n \"icu_locid\",\n \"icu_provider_macros\",\n \"stable_deref_trait\",\n \"tinystr\",\n \"writeable\",\n \"yoke\",\n \"zerofrom\",\n \"zerovec\",\n]\n\n[[package]]\nname = \"icu_provider_macros\"\nversion = \"1.5.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1ec89e9337638ecdc08744df490b221a7399bf8d164eb52a665454e60e075ad6\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.92\",\n]\n\n[[package]]\nname = \"idna\"\nversion = \"1.0.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"686f825264d630750a544639377bae737628043f20d38bbc029e8f29ea968a7e\"\ndependencies = [\n \"idna_adapter\",\n \"smallvec\",\n \"utf8_iter\",\n]\n\n[[package]]\nname = \"idna_adapter\"\nversion = \"1.2.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"daca1df1c957320b2cf139ac61e7bd64fed304c5040df000a745aa1de3b4ef71\"\ndependencies = [\n \"icu_normalizer\",\n \"icu_properties\",\n]\n\n[[package]]\nname = \"indexmap\"\nversion = \"2.7.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"62f822373a4fe84d4bb149bf54e584a7f4abec90e072ed49cda0edea5b95471f\"\ndependencies = [\n \"equivalent\",\n \"hashbrown 0.15.2\",\n]\n\n[[package]]\nname = \"indicatif\"\nversion = \"0.17.9\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"cbf675b85ed934d3c67b5c5469701eec7db22689d0a2139d856e0925fa28b281\"\ndependencies = [\n \"console\",\n \"number_prefix\",\n \"portable-atomic\",\n \"unicode-width\",\n \"web-time\",\n]\n\n[[package]]\nname = \"indoc\"\nversion = \"2.0.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b248f5224d1d606005e02c97f5aa4e88eeb230488bcc03bc9ca4d7991399f2b5\"\n\n[[package]]\nname = \"infer\"\nversion = \"0.16.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"bc150e5ce2330295b8616ce0e3f53250e53af31759a9dbedad1621ba29151847\"\ndependencies = [\n \"cfb\",\n]\n\n[[package]]\nname = \"ipnetwork\"\nversion = \"0.20.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"bf466541e9d546596ee94f9f69590f89473455f88372423e0008fc1a7daf100e\"\ndependencies = [\n \"serde\",\n]\n\n[[package]]\nname = \"is_elevated\"\nversion = \"0.1.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"5299060ff5db63e788015dcb9525ad9b84f4fd9717ed2cbdeba5018cbf42f9b5\"\ndependencies = [\n \"winapi\",\n]\n\n[[package]]\nname = \"is_terminal_polyfill\"\nversion = \"1.70.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"7943c866cc5cd64cbc25b2e01621d07fa8eb2a1a23160ee81ce38704e97b8ecf\"\n\n[[package]]\nname = \"itertools\"\nversion = \"0.13.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"413ee7dfc52ee1a4949ceeb7dbc8a33f2d6c088194d9f922fb8318faf1f01186\"\ndependencies = [\n \"either\",\n]\n\n[[package]]\nname = \"itoa\"\nversion = \"1.0.14\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d75a2a4b1b190afb6f5425f10f6a8f959d2ea0b9c2b1d79553551850539e4674\"\n\n[[package]]\nname = \"jemalloc-sys\"\nversion = \"0.5.4+5.3.0-patched\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ac6c1946e1cea1788cbfde01c993b52a10e2da07f4bac608228d1bed20bfebf2\"\ndependencies = [\n \"cc\",\n \"libc\",\n]\n\n[[package]]\nname = \"jemallocator\"\nversion = \"0.5.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a0de374a9f8e63150e6f5e8a60cc14c668226d7a347d8aee1a45766e3c4dd3bc\"\ndependencies = [\n \"jemalloc-sys\",\n \"libc\",\n]\n\n[[package]]\nname = \"jobserver\"\nversion = \"0.1.32\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"48d1dbcbbeb6a7fec7e059840aa538bd62aaccf972c7346c4d9d2059312853d0\"\ndependencies = [\n \"libc\",\n]\n\n[[package]]\nname = \"js-sys\"\nversion = \"0.3.76\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"6717b6b5b077764fb5966237269cb3c64edddde4b14ce42647430a78ced9e7b7\"\ndependencies = [\n \"once_cell\",\n \"wasm-bindgen\",\n]\n\n[[package]]\nname = \"krapslog\"\nversion = \"0.6.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"849426cbb9f0b6d82b9960675841718ba840243ceba751e195fe5df21fc9abdd\"\ndependencies = [\n \"anyhow\",\n \"chrono\",\n \"clap\",\n \"file-chunker\",\n \"memmap2 0.9.5\",\n \"num_cpus\",\n \"rayon\",\n \"regex\",\n \"tempfile\",\n \"terminal_size 0.3.0\",\n]\n\n[[package]]\nname = \"lazy_static\"\nversion = \"1.5.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"bbd2bcb4c963f2ddae06a2efc7e9f3591312473c50c6685e1f298068316e66fe\"\n\n[[package]]\nname = \"libc\"\nversion = \"0.2.169\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b5aba8db14291edd000dfcc4d620c7ebfb122c613afb886ca8803fa4e128a20a\"\n\n[[package]]\nname = \"libgit2-sys\"\nversion = \"0.17.0+1.8.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"10472326a8a6477c3c20a64547b0059e4b0d086869eee31e6d7da728a8eb7224\"\ndependencies = [\n \"cc\",\n \"libc\",\n \"libssh2-sys\",\n \"libz-sys\",\n \"openssl-sys\",\n \"pkg-config\",\n]\n\n[[package]]\nname = \"libmimalloc-sys\"\nversion = \"0.1.39\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"23aa6811d3bd4deb8a84dde645f943476d13b248d818edcf8ce0b2f37f036b44\"\ndependencies = [\n \"cc\",\n \"cty\",\n \"libc\",\n]\n\n[[package]]\nname = \"libssh2-sys\"\nversion = \"0.3.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"2dc8a030b787e2119a731f1951d6a773e2280c660f8ec4b0f5e1505a386e71ee\"\ndependencies = [\n \"cc\",\n \"libc\",\n \"libz-sys\",\n \"openssl-sys\",\n \"pkg-config\",\n \"vcpkg\",\n]\n\n[[package]]\nname = \"libz-sys\"\nversion = \"1.1.20\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d2d16453e800a8cf6dd2fc3eb4bc99b786a9b90c663b8559a5b1a041bf89e472\"\ndependencies = [\n \"cc\",\n \"libc\",\n \"pkg-config\",\n \"vcpkg\",\n]\n\n[[package]]\nname = \"linux-raw-sys\"\nversion = \"0.4.14\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"78b3ae25bc7c8c38cec158d1f2757ee79e9b3740fbc7ccf0e59e4b08d793fa89\"\n\n[[package]]\nname = \"litemap\"\nversion = \"0.7.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"4ee93343901ab17bd981295f2cf0026d4ad018c7c31ba84549a4ddbb47a45104\"\n\n[[package]]\nname = \"lock_api\"\nversion = \"0.4.12\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"07af8b9cdd281b7915f413fa73f29ebd5d55d0d3f0155584dade1ff18cea1b17\"\ndependencies = [\n \"autocfg\",\n \"scopeguard\",\n]\n\n[[package]]\nname = \"log\"\nversion = \"0.4.22\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a7a70ba024b9dc04c27ea2f0c0548feb474ec5c54bba33a7f72f873a39d07b24\"\n\n[[package]]\nname = \"maxminddb\"\nversion = \"0.24.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d6087e5d8ea14861bb7c7f573afbc7be3798d3ef0fae87ec4fd9a4de9a127c3c\"\ndependencies = [\n \"ipnetwork\",\n \"log\",\n \"memchr\",\n \"serde\",\n]\n\n[[package]]\nname = \"memchr\"\nversion = \"2.7.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"78ca9ab1a0babb1e7d5695e3530886289c18cf2f87ec19a575a0abdce112e3a3\"\n\n[[package]]\nname = \"memmap2\"\nversion = \"0.5.10\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"83faa42c0a078c393f6b29d5db232d8be22776a891f8f56e5284faee4a20b327\"\ndependencies = [\n \"libc\",\n]\n\n[[package]]\nname = \"memmap2\"\nversion = \"0.9.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"fd3f7eed9d3848f8b98834af67102b720745c4ec028fcd0aa0239277e7de374f\"\ndependencies = [\n \"libc\",\n]\n\n[[package]]\nname = \"mimalloc\"\nversion = \"0.1.43\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"68914350ae34959d83f732418d51e2427a794055d0b9529f48259ac07af65633\"\ndependencies = [\n \"libmimalloc-sys\",\n]\n\n[[package]]\nname = \"miniz_oxide\"\nversion = \"0.8.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"4ffbe83022cedc1d264172192511ae958937694cd57ce297164951b8b3568394\"\ndependencies = [\n \"adler2\",\n]\n\n[[package]]\nname = \"mio\"\nversion = \"1.0.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"2886843bf800fba2e3377cff24abf6379b4c4d5c6681eaf9ea5b0d15090450bd\"\ndependencies = [\n \"libc\",\n \"wasi\",\n \"windows-sys 0.52.0\",\n]\n\n[[package]]\nname = \"nested\"\nversion = \"0.1.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ca2b420f638f07fe83056b55ea190bb815f609ec5a35e7017884a10f78839c9e\"\n\n[[package]]\nname = \"num\"\nversion = \"0.4.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"35bd024e8b2ff75562e5f34e7f4905839deb4b22955ef5e73d2fea1b9813cb23\"\ndependencies = [\n \"num-bigint\",\n \"num-complex\",\n \"num-integer\",\n \"num-iter\",\n \"num-rational\",\n \"num-traits\",\n]\n\n[[package]]\nname = \"num-bigint\"\nversion = \"0.4.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a5e44f723f1133c9deac646763579fdb3ac745e418f2a7af9cd0c431da1f20b9\"\ndependencies = [\n \"num-integer\",\n \"num-traits\",\n]\n\n[[package]]\nname = \"num-complex\"\nversion = \"0.4.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"73f88a1307638156682bada9d7604135552957b7818057dcef22705b4d509495\"\ndependencies = [\n \"num-traits\",\n]\n\n[[package]]\nname = \"num-derive\"\nversion = \"0.3.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"876a53fff98e03a936a674b29568b0e605f06b29372c2489ff4de23f1949743d\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn 1.0.109\",\n]\n\n[[package]]\nname = \"num-format\"\nversion = \"0.4.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a652d9771a63711fd3c3deb670acfbe5c30a4072e664d7a3bf5a9e1056ac72c3\"\ndependencies = [\n \"arrayvec\",\n \"itoa\",\n]\n\n[[package]]\nname = \"num-integer\"\nversion = \"0.1.46\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"7969661fd2958a5cb096e56c8e1ad0444ac2bbcd0061bd28660485a44879858f\"\ndependencies = [\n \"num-traits\",\n]\n\n[[package]]\nname = \"num-iter\"\nversion = \"0.1.45\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1429034a0490724d0075ebb2bc9e875d6503c3cf69e235a8941aa757d83ef5bf\"\ndependencies = [\n \"autocfg\",\n \"num-integer\",\n \"num-traits\",\n]\n\n[[package]]\nname = \"num-rational\"\nversion = \"0.4.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f83d14da390562dca69fc84082e73e548e1ad308d24accdedd2720017cb37824\"\ndependencies = [\n \"num-bigint\",\n \"num-integer\",\n \"num-traits\",\n]\n\n[[package]]\nname = \"num-traits\"\nversion = \"0.2.19\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"071dfc062690e90b734c0b2273ce72ad0ffa95f0c74596bc250dcfd960262841\"\ndependencies = [\n \"autocfg\",\n]\n\n[[package]]\nname = \"num_cpus\"\nversion = \"1.16.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"4161fcb6d602d4d2081af7c3a45852d875a03dd337a6bfdd6e06407b61342a43\"\ndependencies = [\n \"hermit-abi\",\n \"libc\",\n]\n\n[[package]]\nname = \"number_prefix\"\nversion = \"0.4.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"830b246a0e5f20af87141b25c173cd1b609bd7779a4617d6ec582abaf90870f3\"\n\n[[package]]\nname = \"object\"\nversion = \"0.36.7\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"62948e14d923ea95ea2c7c86c71013138b66525b86bdc08d2dcc262bdb497b87\"\ndependencies = [\n \"memchr\",\n]\n\n[[package]]\nname = \"once_cell\"\nversion = \"1.20.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1261fe7e33c73b354eab43b1273a57c8f967d0391e80353e51f764ac02cf6775\"\n\n[[package]]\nname = \"openssl\"\nversion = \"0.10.68\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"6174bc48f102d208783c2c84bf931bb75927a617866870de8a4ea85597f871f5\"\ndependencies = [\n \"bitflags 2.6.0\",\n \"cfg-if\",\n \"foreign-types\",\n \"libc\",\n \"once_cell\",\n \"openssl-macros\",\n \"openssl-sys\",\n]\n\n[[package]]\nname = \"openssl-macros\"\nversion = \"0.1.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a948666b637a0f465e8564c73e89d4dde00d72d4d473cc972f390fc3dcee7d9c\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.92\",\n]\n\n[[package]]\nname = \"openssl-probe\"\nversion = \"0.1.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ff011a302c396a5197692431fc1948019154afc178baf7d8e37367442a4601cf\"\n\n[[package]]\nname = \"openssl-src\"\nversion = \"300.4.1+3.4.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"faa4eac4138c62414b5622d1b31c5c304f34b406b013c079c2bbc652fdd6678c\"\ndependencies = [\n \"cc\",\n]\n\n[[package]]\nname = \"openssl-sys\"\nversion = \"0.9.104\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"45abf306cbf99debc8195b66b7346498d7b10c210de50418b5ccd7ceba08c741\"\ndependencies = [\n \"cc\",\n \"libc\",\n \"openssl-src\",\n \"pkg-config\",\n \"vcpkg\",\n]\n\n[[package]]\nname = \"parking_lot\"\nversion = \"0.12.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f1bf18183cf54e8d6059647fc3063646a1801cf30896933ec2311622cc4b9a27\"\ndependencies = [\n \"lock_api\",\n \"parking_lot_core\",\n]\n\n[[package]]\nname = \"parking_lot_core\"\nversion = \"0.9.10\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1e401f977ab385c9e4e3ab30627d6f26d00e2c73eef317493c4ec6d468726cf8\"\ndependencies = [\n \"cfg-if\",\n \"libc\",\n \"redox_syscall\",\n \"smallvec\",\n \"windows-targets 0.52.6\",\n]\n\n[[package]]\nname = \"percent-encoding\"\nversion = \"2.3.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e3148f5046208a5d56bcfc03053e3ca6334e51da8dfb19b6cdc8b306fae3283e\"\n\n[[package]]\nname = \"pin-project-lite\"\nversion = \"0.2.15\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"915a1e146535de9163f3987b8944ed8cf49a18bb0056bcebcdcece385cece4ff\"\n\n[[package]]\nname = \"pkg-config\"\nversion = \"0.3.31\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"953ec861398dccce10c670dfeaf3ec4911ca479e9c02154b3a215178c5f566f2\"\n\n[[package]]\nname = \"portable-atomic\"\nversion = \"1.10.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"280dc24453071f1b63954171985a0b0d30058d287960968b9b2aca264c8d4ee6\"\n\n[[package]]\nname = \"ppv-lite86\"\nversion = \"0.2.20\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"77957b295656769bb8ad2b6a6b09d897d94f05c41b069aede1fcdaa675eaea04\"\ndependencies = [\n \"zerocopy\",\n]\n\n[[package]]\nname = \"proc-macro2\"\nversion = \"1.0.92\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"37d3544b3f2748c54e147655edb5025752e2303145b5aefb3c3ea2c78b973bb0\"\ndependencies = [\n \"unicode-ident\",\n]\n\n[[package]]\nname = \"pulldown-cmark\"\nversion = \"0.9.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"57206b407293d2bcd3af849ce869d52068623f19e1b5ff8e8778e3309439682b\"\ndependencies = [\n \"bitflags 2.6.0\",\n \"memchr\",\n \"unicase\",\n]\n\n[[package]]\nname = \"quick-xml\"\nversion = \"0.37.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f22f29bdff3987b4d8632ef95fd6424ec7e4e0a57e2f4fc63e489e75357f6a03\"\ndependencies = [\n \"memchr\",\n]\n\n[[package]]\nname = \"quote\"\nversion = \"1.0.38\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"0e4dccaaaf89514f546c693ddc140f729f958c247918a13380cccc6078391acc\"\ndependencies = [\n \"proc-macro2\",\n]\n\n[[package]]\nname = \"rand\"\nversion = \"0.8.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"34af8d1a0e25924bc5b7c43c079c942339d8f0a8b57c39049bef581b46327404\"\ndependencies = [\n \"libc\",\n \"rand_chacha\",\n \"rand_core\",\n]\n\n[[package]]\nname = \"rand_chacha\"\nversion = \"0.3.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e6c10a63a0fa32252be49d21e7709d4d4baf8d231c2dbce1eaa8141b9b127d88\"\ndependencies = [\n \"ppv-lite86\",\n \"rand_core\",\n]\n\n[[package]]\nname = \"rand_core\"\nversion = \"0.6.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ec0be4795e2f6a28069bec0b5ff3e2ac9bafc99e6a9a7dc3547996c5c816922c\"\ndependencies = [\n \"getrandom\",\n]\n\n[[package]]\nname = \"rayon\"\nversion = \"1.10.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b418a60154510ca1a002a752ca9714984e21e4241e804d32555251faf8b78ffa\"\ndependencies = [\n \"either\",\n \"rayon-core\",\n]\n\n[[package]]\nname = \"rayon-core\"\nversion = \"1.12.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1465873a3dfdaa8ae7cb14b4383657caab0b3e8a0aa9ae8e04b044854c8dfce2\"\ndependencies = [\n \"crossbeam-deque\",\n \"crossbeam-utils\",\n]\n\n[[package]]\nname = \"redox_syscall\"\nversion = \"0.5.8\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"03a862b389f93e68874fbf580b9de08dd02facb9a788ebadaf4a3fd33cf58834\"\ndependencies = [\n \"bitflags 2.6.0\",\n]\n\n[[package]]\nname = \"regex\"\nversion = \"1.11.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b544ef1b4eac5dc2db33ea63606ae9ffcfac26c1416a2806ae0bf5f56b201191\"\ndependencies = [\n \"aho-corasick\",\n \"memchr\",\n \"regex-automata\",\n \"regex-syntax\",\n]\n\n[[package]]\nname = \"regex-automata\"\nversion = \"0.4.9\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"809e8dc61f6de73b46c85f4c96486310fe304c434cfa43669d7b40f711150908\"\ndependencies = [\n \"aho-corasick\",\n \"memchr\",\n \"regex-syntax\",\n]\n\n[[package]]\nname = \"regex-syntax\"\nversion = \"0.8.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"2b15c43186be67a4fd63bee50d0303afffcef381492ebe2c5d87f324e1b8815c\"\n\n[[package]]\nname = \"ring\"\nversion = \"0.17.8\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"c17fa4cb658e3583423e915b9f3acc01cceaee1860e33d59ebae66adc3a2dc0d\"\ndependencies = [\n \"cc\",\n \"cfg-if\",\n \"getrandom\",\n \"libc\",\n \"spin\",\n \"untrusted\",\n \"windows-sys 0.52.0\",\n]\n\n[[package]]\nname = \"rpmalloc\"\nversion = \"0.2.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"86179c13cdc0bcedbb60e63c1aebe3bac82162ddfa746320de6dcea31ebe2b06\"\ndependencies = [\n \"rpmalloc-sys\",\n]\n\n[[package]]\nname = \"rpmalloc-sys\"\nversion = \"0.2.3+b097fd0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8d4b7d5e225a53887ee57fcec492eaf114b8e290f7072d035adc6ddd6810b67b\"\ndependencies = [\n \"cc\",\n \"libc\",\n \"pkg-config\",\n]\n\n[[package]]\nname = \"rust-embed\"\nversion = \"8.5.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"fa66af4a4fdd5e7ebc276f115e895611a34739a9c1c01028383d612d550953c0\"\ndependencies = [\n \"rust-embed-impl\",\n \"rust-embed-utils\",\n \"walkdir\",\n]\n\n[[package]]\nname = \"rust-embed-impl\"\nversion = \"8.5.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"6125dbc8867951125eec87294137f4e9c2c96566e61bf72c45095a7c77761478\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"rust-embed-utils\",\n \"syn 2.0.92\",\n \"walkdir\",\n]\n\n[[package]]\nname = \"rust-embed-utils\"\nversion = \"8.5.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"2e5347777e9aacb56039b0e1f28785929a8a3b709e87482e7442c72e7c12529d\"\ndependencies = [\n \"globset\",\n \"sha2\",\n \"walkdir\",\n]\n\n[[package]]\nname = \"rustc-demangle\"\nversion = \"0.1.24\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"719b953e2095829ee67db738b3bfa9fa368c94900df327b3f07fe6e794d2fe1f\"\n\n[[package]]\nname = \"rustix\"\nversion = \"0.38.42\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f93dc38ecbab2eb790ff964bb77fa94faf256fd3e73285fd7ba0903b76bedb85\"\ndependencies = [\n \"bitflags 2.6.0\",\n \"errno\",\n \"libc\",\n \"linux-raw-sys\",\n \"windows-sys 0.59.0\",\n]\n\n[[package]]\nname = \"rustls\"\nversion = \"0.23.20\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"5065c3f250cbd332cd894be57c40fa52387247659b14a2d6041d121547903b1b\"\ndependencies = [\n \"log\",\n \"once_cell\",\n \"ring\",\n \"rustls-pki-types\",\n \"rustls-webpki\",\n \"subtle\",\n \"zeroize\",\n]\n\n[[package]]\nname = \"rustls-pki-types\"\nversion = \"1.10.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d2bf47e6ff922db3825eb750c4e2ff784c6ff8fb9e13046ef6a1d1c5401b0b37\"\n\n[[package]]\nname = \"rustls-webpki\"\nversion = \"0.102.8\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"64ca1bc8749bd4cf37b5ce386cc146580777b4e8572c7b97baf22c83f444bee9\"\ndependencies = [\n \"ring\",\n \"rustls-pki-types\",\n \"untrusted\",\n]\n\n[[package]]\nname = \"rustversion\"\nversion = \"1.0.19\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f7c45b9784283f1b2e7fb61b42047c2fd678ef0960d4f6f1eba131594cc369d4\"\n\n[[package]]\nname = \"ryu\"\nversion = \"1.0.18\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f3cb5ba0dc43242ce17de99c180e96db90b235b8a9fdc9543c96d2209116bd9f\"\n\n[[package]]\nname = \"same-file\"\nversion = \"1.0.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"93fc1dc3aaa9bfed95e02e6eadabb4baf7e3078b0bd1b4d7b6b0b68378900502\"\ndependencies = [\n \"winapi-util\",\n]\n\n[[package]]\nname = \"scopeguard\"\nversion = \"1.2.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"94143f37725109f92c262ed2cf5e59bce7498c01bcc1502d7b9afe439a4e9f49\"\n\n[[package]]\nname = \"semver\"\nversion = \"1.0.24\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3cb6eb87a131f756572d7fb904f6e7b68633f09cca868c5df1c4b8d1a694bbba\"\ndependencies = [\n \"serde\",\n]\n\n[[package]]\nname = \"serde\"\nversion = \"1.0.217\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"02fc4265df13d6fa1d00ecff087228cc0a2b5f3c0e87e258d8b94a156e984c70\"\ndependencies = [\n \"serde_derive\",\n]\n\n[[package]]\nname = \"serde_derive\"\nversion = \"1.0.217\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"5a9bf7cf98d04a2b28aead066b7496853d4779c9cc183c440dbac457641e19a0\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.92\",\n]\n\n[[package]]\nname = \"serde_json\"\nversion = \"1.0.134\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d00f4175c42ee48b15416f6193a959ba3a0d67fc699a0db9ad12df9f83991c7d\"\ndependencies = [\n \"indexmap\",\n \"itoa\",\n \"memchr\",\n \"ryu\",\n \"serde\",\n]\n\n[[package]]\nname = \"sha2\"\nversion = \"0.10.8\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"793db75ad2bcafc3ffa7c68b215fee268f537982cd901d132f89c6343f3a3dc8\"\ndependencies = [\n \"cfg-if\",\n \"cpufeatures\",\n \"digest\",\n]\n\n[[package]]\nname = \"shell-words\"\nversion = \"1.1.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"24188a676b6ae68c3b2cb3a01be17fbf7240ce009799bb56d5b1409051e78fde\"\n\n[[package]]\nname = \"shlex\"\nversion = \"1.3.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"0fda2ff0d084019ba4d7c6f371c95d8fd75ce3524c3cb8fb653a3023f6323e64\"\n\n[[package]]\nname = \"signal-hook-registry\"\nversion = \"1.4.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a9e9e0b4211b72e7b8b6e85c807d36c212bdb33ea8587f7569562a84df5465b1\"\ndependencies = [\n \"libc\",\n]\n\n[[package]]\nname = \"skeptic\"\nversion = \"0.13.7\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"16d23b015676c90a0f01c197bfdc786c20342c73a0afdda9025adb0bc42940a8\"\ndependencies = [\n \"bytecount\",\n \"cargo_metadata\",\n \"error-chain\",\n \"glob\",\n \"pulldown-cmark\",\n \"tempfile\",\n \"walkdir\",\n]\n\n[[package]]\nname = \"smallvec\"\nversion = \"1.13.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3c5e1a9a646d36c3599cd173a41282daf47c44583ad367b8e6837255952e5c67\"\n\n[[package]]\nname = \"socket2\"\nversion = \"0.5.8\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"c970269d99b64e60ec3bd6ad27270092a5394c4e309314b18ae3fe575695fbe8\"\ndependencies = [\n \"libc\",\n \"windows-sys 0.52.0\",\n]\n\n[[package]]\nname = \"spin\"\nversion = \"0.9.8\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"6980e8d7511241f8acf4aebddbb1ff938df5eebe98691418c4468d0b72a96a67\"\n\n[[package]]\nname = \"stable_deref_trait\"\nversion = \"1.2.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a8f112729512f8e442d81f95a8a7ddf2b7c6b8a1a6f509a95864142b30cab2d3\"\n\n[[package]]\nname = \"static_assertions\"\nversion = \"1.1.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a2eb9349b6444b326872e140eb1cf5e7c522154d69e7a0ffb0fb81c06b37543f\"\n\n[[package]]\nname = \"strsim\"\nversion = \"0.11.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"7da8b5736845d9f2fcb837ea5d9e2628564b3b043a70948a3f0b778838c5fb4f\"\n\n[[package]]\nname = \"strum\"\nversion = \"0.26.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8fec0f0aef304996cf250b31b5a10dee7980c85da9d759361292b8bca5a18f06\"\n\n[[package]]\nname = \"strum_macros\"\nversion = \"0.26.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"4c6bee85a5a24955dc440386795aa378cd9cf82acd5f764469152d2270e581be\"\ndependencies = [\n \"heck\",\n \"proc-macro2\",\n \"quote\",\n \"rustversion\",\n \"syn 2.0.92\",\n]\n\n[[package]]\nname = \"subtle\"\nversion = \"2.6.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"13c2bddecc57b384dee18652358fb23172facb8a2c51ccc10d74c157bdea3292\"\n\n[[package]]\nname = \"syn\"\nversion = \"1.0.109\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"72b64191b275b66ffe2469e8af2c1cfe3bafa67b529ead792a6d0160888b4237\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"unicode-ident\",\n]\n\n[[package]]\nname = \"syn\"\nversion = \"2.0.92\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"70ae51629bf965c5c098cc9e87908a3df5301051a9e087d6f9bef5c9771ed126\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"unicode-ident\",\n]\n\n[[package]]\nname = \"synstructure\"\nversion = \"0.13.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"c8af7666ab7b6390ab78131fb5b0fce11d6b7a6951602017c35fa82800708971\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.92\",\n]\n\n[[package]]\nname = \"tempfile\"\nversion = \"3.14.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"28cce251fcbc87fac86a866eeb0d6c2d536fc16d06f184bb61aeae11aa4cee0c\"\ndependencies = [\n \"cfg-if\",\n \"fastrand\",\n \"once_cell\",\n \"rustix\",\n \"windows-sys 0.59.0\",\n]\n\n[[package]]\nname = \"termcolor\"\nversion = \"1.4.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"06794f8f6c5c898b3275aebefa6b8a1cb24cd2c6c79397ab15774837a0bc5755\"\ndependencies = [\n \"winapi-util\",\n]\n\n[[package]]\nname = \"terminal_size\"\nversion = \"0.3.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"21bebf2b7c9e0a515f6e0f8c51dc0f8e4696391e6f1ff30379559f8365fb0df7\"\ndependencies = [\n \"rustix\",\n \"windows-sys 0.48.0\",\n]\n\n[[package]]\nname = \"terminal_size\"\nversion = \"0.4.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"5352447f921fda68cf61b4101566c0bdb5104eff6804d0678e5227580ab6a4e9\"\ndependencies = [\n \"rustix\",\n \"windows-sys 0.59.0\",\n]\n\n[[package]]\nname = \"thiserror\"\nversion = \"1.0.69\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b6aaf5339b578ea85b50e080feb250a3e8ae8cfcdff9a461c9ec2904bc923f52\"\ndependencies = [\n \"thiserror-impl\",\n]\n\n[[package]]\nname = \"thiserror-impl\"\nversion = \"1.0.69\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"4fee6c4efc90059e10f81e6d42c60a18f76588c3d74cb83a0b242a2b6c7504c1\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.92\",\n]\n\n[[package]]\nname = \"tinystr\"\nversion = \"0.7.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"9117f5d4db391c1cf6927e7bea3db74b9a1c1add8f7eda9ffd5364f40f57b82f\"\ndependencies = [\n \"displaydoc\",\n \"zerovec\",\n]\n\n[[package]]\nname = \"tokio\"\nversion = \"1.42.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"5cec9b21b0450273377fc97bd4c33a8acffc8c996c987a7c5b319a0083707551\"\ndependencies = [\n \"backtrace\",\n \"bytes\",\n \"libc\",\n \"mio\",\n \"parking_lot\",\n \"pin-project-lite\",\n \"signal-hook-registry\",\n \"socket2\",\n \"tokio-macros\",\n \"windows-sys 0.52.0\",\n]\n\n[[package]]\nname = \"tokio-macros\"\nversion = \"2.4.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"693d596312e88961bc67d7f1f97af8a70227d9f90c31bba5806eec004978d752\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.92\",\n]\n\n[[package]]\nname = \"typenum\"\nversion = \"1.17.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"42ff0bf0c66b8238c6f3b578df37d0b7848e55df8577b3f74f92a69acceeb825\"\n\n[[package]]\nname = \"unicase\"\nversion = \"2.8.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"75b844d17643ee918803943289730bec8aac480150456169e647ed0b576ba539\"\n\n[[package]]\nname = \"unicode-ident\"\nversion = \"1.0.14\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"adb9e6ca4f869e1180728b7950e35922a7fc6397f7b641499e8f3ef06e50dc83\"\n\n[[package]]\nname = \"unicode-width\"\nversion = \"0.2.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1fc81956842c57dac11422a97c3b8195a1ff727f06e85c84ed2e8aa277c9a0fd\"\n\n[[package]]\nname = \"untrusted\"\nversion = \"0.9.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8ecb6da28b8a351d773b68d5825ac39017e680750f980f3a1a85cd8dd28a47c1\"\n\n[[package]]\nname = \"ureq\"\nversion = \"2.12.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"02d1a66277ed75f640d608235660df48c8e3c19f3b4edb6a263315626cc3c01d\"\ndependencies = [\n \"base64\",\n \"flate2\",\n \"log\",\n \"once_cell\",\n \"rustls\",\n \"rustls-pki-types\",\n \"url\",\n \"webpki-roots\",\n]\n\n[[package]]\nname = \"url\"\nversion = \"2.5.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"32f8b686cadd1473f4bd0117a5d28d36b1ade384ea9b5069a1c40aefed7fda60\"\ndependencies = [\n \"form_urlencoded\",\n \"idna\",\n \"percent-encoding\",\n]\n\n[[package]]\nname = \"utf16_iter\"\nversion = \"1.0.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"c8232dd3cdaed5356e0f716d285e4b40b932ac434100fe9b7e0e8e935b9e6246\"\n\n[[package]]\nname = \"utf8_iter\"\nversion = \"1.0.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b6c140620e7ffbb22c2dee59cafe6084a59b5ffc27a8859a5f0d494b5d52b6be\"\n\n[[package]]\nname = \"utf8parse\"\nversion = \"0.2.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"06abde3611657adf66d383f00b093d7faecc7fa57071cce2578660c9f1010821\"\n\n[[package]]\nname = \"uuid\"\nversion = \"1.11.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f8c5f0a0af699448548ad1a2fbf920fb4bee257eae39953ba95cb84891a0446a\"\ndependencies = [\n \"getrandom\",\n]\n\n[[package]]\nname = \"vcpkg\"\nversion = \"0.2.15\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"accd4ea62f7bb7a82fe23066fb0957d48ef677f6eeb8215f372f52e48bb32426\"\n\n[[package]]\nname = \"version_check\"\nversion = \"0.9.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"0b928f33d975fc6ad9f86c8f283853ad26bdd5b10b7f1542aa2fa15e2289105a\"\n\n[[package]]\nname = \"walkdir\"\nversion = \"2.5.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"29790946404f91d9c5d06f9874efddea1dc06c5efe94541a7d6863108e3a5e4b\"\ndependencies = [\n \"same-file\",\n \"winapi-util\",\n]\n\n[[package]]\nname = \"wasi\"\nversion = \"0.11.0+wasi-snapshot-preview1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"9c8d87e72b64a3b4db28d11ce29237c246188f4f51057d65a7eab63b7987e423\"\n\n[[package]]\nname = \"wasm-bindgen\"\nversion = \"0.2.99\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a474f6281d1d70c17ae7aa6a613c87fce69a127e2624002df63dcb39d6cf6396\"\ndependencies = [\n \"cfg-if\",\n \"once_cell\",\n \"wasm-bindgen-macro\",\n]\n\n[[package]]\nname = \"wasm-bindgen-backend\"\nversion = \"0.2.99\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"5f89bb38646b4f81674e8f5c3fb81b562be1fd936d84320f3264486418519c79\"\ndependencies = [\n \"bumpalo\",\n \"log\",\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.92\",\n \"wasm-bindgen-shared\",\n]\n\n[[package]]\nname = \"wasm-bindgen-macro\"\nversion = \"0.2.99\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"2cc6181fd9a7492eef6fef1f33961e3695e4579b9872a6f7c83aee556666d4fe\"\ndependencies = [\n \"quote\",\n \"wasm-bindgen-macro-support\",\n]\n\n[[package]]\nname = \"wasm-bindgen-macro-support\"\nversion = \"0.2.99\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"30d7a95b763d3c45903ed6c81f156801839e5ee968bb07e534c44df0fcd330c2\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.92\",\n \"wasm-bindgen-backend\",\n \"wasm-bindgen-shared\",\n]\n\n[[package]]\nname = \"wasm-bindgen-shared\"\nversion = \"0.2.99\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"943aab3fdaaa029a6e0271b35ea10b72b943135afe9bffca82384098ad0e06a6\"\n\n[[package]]\nname = \"web-time\"\nversion = \"1.1.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"5a6580f308b1fad9207618087a65c04e7a10bc77e02c8e84e9b00dd4b12fa0bb\"\ndependencies = [\n \"js-sys\",\n \"wasm-bindgen\",\n]\n\n[[package]]\nname = \"webpki-roots\"\nversion = \"0.26.7\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"5d642ff16b7e79272ae451b7322067cdc17cadf68c23264be9d94a32319efe7e\"\ndependencies = [\n \"rustls-pki-types\",\n]\n\n[[package]]\nname = \"wildmatch\"\nversion = \"2.4.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"68ce1ab1f8c62655ebe1350f589c61e505cf94d385bc6a12899442d9081e71fd\"\n\n[[package]]\nname = \"winapi\"\nversion = \"0.3.9\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"5c839a674fcd7a98952e593242ea400abe93992746761e38641405d28b00f419\"\ndependencies = [\n \"winapi-i686-pc-windows-gnu\",\n \"winapi-x86_64-pc-windows-gnu\",\n]\n\n[[package]]\nname = \"winapi-i686-pc-windows-gnu\"\nversion = \"0.4.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ac3b87c63620426dd9b991e5ce0329eff545bccbbb34f3be09ff6fb6ab51b7b6\"\n\n[[package]]\nname = \"winapi-util\"\nversion = \"0.1.9\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"cf221c93e13a30d793f7645a0e7762c55d169dbb0a49671918a2319d289b10bb\"\ndependencies = [\n \"windows-sys 0.59.0\",\n]\n\n[[package]]\nname = \"winapi-x86_64-pc-windows-gnu\"\nversion = \"0.4.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"712e227841d057c1ee1cd2fb22fa7e5a5461ae8e48fa2ca79ec42cfc1931183f\"\n\n[[package]]\nname = \"windows-core\"\nversion = \"0.52.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"33ab640c8d7e35bf8ba19b884ba838ceb4fba93a4e8c65a9059d08afcfc683d9\"\ndependencies = [\n \"windows-targets 0.52.6\",\n]\n\n[[package]]\nname = \"windows-sys\"\nversion = \"0.48.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"677d2418bec65e3338edb076e806bc1ec15693c5d0104683f2efe857f61056a9\"\ndependencies = [\n \"windows-targets 0.48.5\",\n]\n\n[[package]]\nname = \"windows-sys\"\nversion = \"0.52.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"282be5f36a8ce781fad8c8ae18fa3f9beff57ec1b52cb3de0789201425d9a33d\"\ndependencies = [\n \"windows-targets 0.52.6\",\n]\n\n[[package]]\nname = \"windows-sys\"\nversion = \"0.59.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1e38bc4d79ed67fd075bcc251a1c39b32a1776bbe92e5bef1f0bf1f8c531853b\"\ndependencies = [\n \"windows-targets 0.52.6\",\n]\n\n[[package]]\nname = \"windows-targets\"\nversion = \"0.48.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"9a2fa6e2155d7247be68c096456083145c183cbbbc2764150dda45a87197940c\"\ndependencies = [\n \"windows_aarch64_gnullvm 0.48.5\",\n \"windows_aarch64_msvc 0.48.5\",\n \"windows_i686_gnu 0.48.5\",\n \"windows_i686_msvc 0.48.5\",\n \"windows_x86_64_gnu 0.48.5\",\n \"windows_x86_64_gnullvm 0.48.5\",\n \"windows_x86_64_msvc 0.48.5\",\n]\n\n[[package]]\nname = \"windows-targets\"\nversion = \"0.52.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"9b724f72796e036ab90c1021d4780d4d3d648aca59e491e6b98e725b84e99973\"\ndependencies = [\n \"windows_aarch64_gnullvm 0.52.6\",\n \"windows_aarch64_msvc 0.52.6\",\n \"windows_i686_gnu 0.52.6\",\n \"windows_i686_gnullvm\",\n \"windows_i686_msvc 0.52.6\",\n \"windows_x86_64_gnu 0.52.6\",\n \"windows_x86_64_gnullvm 0.52.6\",\n \"windows_x86_64_msvc 0.52.6\",\n]\n\n[[package]]\nname = \"windows_aarch64_gnullvm\"\nversion = \"0.48.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"2b38e32f0abccf9987a4e3079dfb67dcd799fb61361e53e2882c3cbaf0d905d8\"\n\n[[package]]\nname = \"windows_aarch64_gnullvm\"\nversion = \"0.52.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"32a4622180e7a0ec044bb555404c800bc9fd9ec262ec147edd5989ccd0c02cd3\"\n\n[[package]]\nname = \"windows_aarch64_msvc\"\nversion = \"0.48.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"dc35310971f3b2dbbf3f0690a219f40e2d9afcf64f9ab7cc1be722937c26b4bc\"\n\n[[package]]\nname = \"windows_aarch64_msvc\"\nversion = \"0.52.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"09ec2a7bb152e2252b53fa7803150007879548bc709c039df7627cabbd05d469\"\n\n[[package]]\nname = \"windows_i686_gnu\"\nversion = \"0.48.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a75915e7def60c94dcef72200b9a8e58e5091744960da64ec734a6c6e9b3743e\"\n\n[[package]]\nname = \"windows_i686_gnu\"\nversion = \"0.52.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8e9b5ad5ab802e97eb8e295ac6720e509ee4c243f69d781394014ebfe8bbfa0b\"\n\n[[package]]\nname = \"windows_i686_gnullvm\"\nversion = \"0.52.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"0eee52d38c090b3caa76c563b86c3a4bd71ef1a819287c19d586d7334ae8ed66\"\n\n[[package]]\nname = \"windows_i686_msvc\"\nversion = \"0.48.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8f55c233f70c4b27f66c523580f78f1004e8b5a8b659e05a4eb49d4166cca406\"\n\n[[package]]\nname = \"windows_i686_msvc\"\nversion = \"0.52.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"240948bc05c5e7c6dabba28bf89d89ffce3e303022809e73deaefe4f6ec56c66\"\n\n[[package]]\nname = \"windows_x86_64_gnu\"\nversion = \"0.48.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"53d40abd2583d23e4718fddf1ebec84dbff8381c07cae67ff7768bbf19c6718e\"\n\n[[package]]\nname = \"windows_x86_64_gnu\"\nversion = \"0.52.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"147a5c80aabfbf0c7d901cb5895d1de30ef2907eb21fbbab29ca94c5b08b1a78\"\n\n[[package]]\nname = \"windows_x86_64_gnullvm\"\nversion = \"0.48.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"0b7b52767868a23d5bab768e390dc5f5c55825b6d30b86c844ff2dc7414044cc\"\n\n[[package]]\nname = \"windows_x86_64_gnullvm\"\nversion = \"0.52.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"24d5b23dc417412679681396f2b49f3de8c1473deb516bd34410872eff51ed0d\"\n\n[[package]]\nname = \"windows_x86_64_msvc\"\nversion = \"0.48.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ed94fce61571a4006852b7389a063ab983c02eb1bb37b47f8272ce92d06d9538\"\n\n[[package]]\nname = \"windows_x86_64_msvc\"\nversion = \"0.52.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"589f6da84c646204747d1270a2a5661ea66ed1cced2631d546fdfb155959f9ec\"\n\n[[package]]\nname = \"winstructs\"\nversion = \"0.3.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"6dc7406cd936173d9cc3a4fd5dc5b295bc59612439d72038e3d7ac4e5dd42de9\"\ndependencies = [\n \"bitflags 1.3.2\",\n \"byteorder\",\n \"chrono\",\n \"log\",\n \"num-derive\",\n \"num-traits\",\n \"serde\",\n \"serde_json\",\n \"thiserror\",\n]\n\n[[package]]\nname = \"write16\"\nversion = \"1.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d1890f4022759daae28ed4fe62859b1236caebfc61ede2f63ed4e695f3f6d936\"\n\n[[package]]\nname = \"writeable\"\nversion = \"0.5.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1e9df38ee2d2c3c5948ea468a8406ff0db0b29ae1ffde1bcf20ef305bcc95c51\"\n\n[[package]]\nname = \"yaml-rust2\"\nversion = \"0.9.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"2a1a1c0bc9823338a3bdf8c61f994f23ac004c6fa32c08cd152984499b445e8d\"\ndependencies = [\n \"arraydeque\",\n \"encoding_rs\",\n \"hashlink\",\n]\n\n[[package]]\nname = \"yoke\"\nversion = \"0.7.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"120e6aef9aa629e3d4f52dc8cc43a015c7724194c97dfaf45180d2daf2b77f40\"\ndependencies = [\n \"serde\",\n \"stable_deref_trait\",\n \"yoke-derive\",\n \"zerofrom\",\n]\n\n[[package]]\nname = \"yoke-derive\"\nversion = \"0.7.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"2380878cad4ac9aac1e2435f3eb4020e8374b5f13c296cb75b4620ff8e229154\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.92\",\n \"synstructure\",\n]\n\n[[package]]\nname = \"zerocopy\"\nversion = \"0.7.35\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1b9b4fd18abc82b8136838da5d50bae7bdea537c574d8dc1a34ed098d6c166f0\"\ndependencies = [\n \"byteorder\",\n \"zerocopy-derive\",\n]\n\n[[package]]\nname = \"zerocopy-derive\"\nversion = \"0.7.35\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"fa4f8080344d4671fb4e831a13ad1e68092748387dfc4f55e356242fae12ce3e\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.92\",\n]\n\n[[package]]\nname = \"zerofrom\"\nversion = \"0.1.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"cff3ee08c995dee1859d998dea82f7374f2826091dd9cd47def953cae446cd2e\"\ndependencies = [\n \"zerofrom-derive\",\n]\n\n[[package]]\nname = \"zerofrom-derive\"\nversion = \"0.1.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"595eed982f7d355beb85837f651fa22e90b3c044842dc7f2c2842c086f295808\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.92\",\n \"synstructure\",\n]\n\n[[package]]\nname = \"zeroize\"\nversion = \"1.8.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ced3678a2879b30306d323f4542626697a464a97c0a07c9aebf7ebca65cd4dde\"\n\n[[package]]\nname = \"zerovec\"\nversion = \"0.10.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"aa2b893d79df23bfb12d5461018d408ea19dfafe76c2c7ef6d4eba614f8ff079\"\ndependencies = [\n \"yoke\",\n \"zerofrom\",\n \"zerovec-derive\",\n]\n\n[[package]]\nname = \"zerovec-derive\"\nversion = \"0.10.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"6eafa6dfb17584ea3e2bd6e76e0cc15ad7af12b09abdd1ca55961bed9b1063c6\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.92\",\n]\n"
        },
        {
          "name": "Cargo.toml",
          "type": "blob",
          "size": 1.8740234375,
          "content": "[package]\nname = \"hayabusa\"\nversion = \"3.0.1\"\nrepository = \"https://github.com/Yamato-Security/hayabusa\"\nauthors = [\"Yamato Security @SecurityYamato\"]\nedition = \"2021\"\nrust-version = \"1.83.0\"\ninclude = [\"src/**/*\", \"LICENSE.txt\", \"README.md\", \"CHANGELOG.md\"]\n\n[dependencies]\naho-corasick = \"*\"\nbase64 = \"*\"\nbytesize = \"1.*\"\nchrono = \"0.4.*\"\ncidr-utils = \"0.6.*\"\nclap = { version = \"4.*\", features = [\"derive\", \"cargo\", \"color\"]}\ncolored = \"2\"\ncomfy-table = \"7.*\"\ncompact_str = \"0.8.*\"\nconsole = \"0.15.*\"\ncsv = \"1.3.*\"\ndashmap = \"*\"\ndialoguer = \"*\"\ndowncast-rs = \"1.*\"\nevtx = { git = \"https://github.com/Yamato-Security/hayabusa-evtx.git\" , features = [\"fast-alloc\"] , rev = \"cd33263\" } # 0.8.13 2024/12/23 update\ngit2 = \"0.*\"\nhashbrown = \"0.15.*\"\nhex = \"0.4.*\"\nhorrorshow = \"0.8.*\"\nindexmap = \"2.*\"\nindicatif = \"*\"\ninfer = \"*\"\nitertools = \"*\"\nkrapslog = \"0.6\"\nlazy_static = \"1.5.*\"\nlibmimalloc-sys = { version = \"*\",  features = [\"extended\"] }\nmaxminddb = \"0.*\"\nmemchr = \"2.*\"\nmimalloc = { version = \"*\", default-features = false }\nnested=\"*\"\nnum = \"0.4.0\"\nnum-format = \"*\"\npulldown-cmark = { version = \"0.9.*\", default-features = false, features = [\"simd\"] }\nrand = \"0.8.*\"\nregex = \"1\"\nserde = { version = \"1.*\", features = [\"derive\"] }\nserde_derive = \"1.*\"\nserde_json = { version = \"1.0\"}\ntermcolor = \"*\"\nterminal_size = \"*\"\ntokio = { version = \"1\", features = [\"full\"] }\nureq = \"*\"\nwildmatch = \"2.*\"\nyaml-rust2 = \"0.9\"\nrust-embed={version = \"8.5.0\", features = [\"include-exclude\", \"debug-embed\"]}\nencoding_rs = \"0.8.35\"\nwalkdir = \"2.5.0\"\nuuid = { version = \"1.11.0\", features = [\"v4\"] }\n\n[profile.dev]\ndebug-assertions = false\n\n[dev-dependencies]\nrand = \"0.8.*\"\n\n[target.'cfg(windows)'.dependencies]\nis_elevated = \"0.1.*\"\n\n[target.'cfg(unix)'.dependencies] #Mac and Linux\nopenssl = { version = \"*\", features = [\"vendored\"] }  #vendored is needed to compile statically.\n\n[profile.release]\nlto = true\nstrip = \"symbols\""
        },
        {
          "name": "LICENSE.txt",
          "type": "blob",
          "size": 33.5478515625,
          "content": "GNU Affero General Public License\n=================================\n\n_Version 3, 19 November 2007_\n_Copyright © 2007 Free Software Foundation, Inc. &lt;<http://fsf.org/>&gt;_\n\nEveryone is permitted to copy and distribute verbatim copies\nof this license document, but changing it is not allowed.\n\n## Preamble\n\nThe GNU Affero General Public License is a free, copyleft license for\nsoftware and other kinds of works, specifically designed to ensure\ncooperation with the community in the case of network server software.\n\nThe licenses for most software and other practical works are designed\nto take away your freedom to share and change the works.  By contrast,\nour General Public Licenses are intended to guarantee your freedom to\nshare and change all versions of a program--to make sure it remains free\nsoftware for all its users.\n\nWhen we speak of free software, we are referring to freedom, not\nprice.  Our General Public Licenses are designed to make sure that you\nhave the freedom to distribute copies of free software (and charge for\nthem if you wish), that you receive source code or can get it if you\nwant it, that you can change the software or use pieces of it in new\nfree programs, and that you know you can do these things.\n\nDevelopers that use our General Public Licenses protect your rights\nwith two steps: **(1)** assert copyright on the software, and **(2)** offer\nyou this License which gives you legal permission to copy, distribute\nand/or modify the software.\n\nA secondary benefit of defending all users' freedom is that\nimprovements made in alternate versions of the program, if they\nreceive widespread use, become available for other developers to\nincorporate.  Many developers of free software are heartened and\nencouraged by the resulting cooperation.  However, in the case of\nsoftware used on network servers, this result may fail to come about.\nThe GNU General Public License permits making a modified version and\nletting the public access it on a server without ever releasing its\nsource code to the public.\n\nThe GNU Affero General Public License is designed specifically to\nensure that, in such cases, the modified source code becomes available\nto the community.  It requires the operator of a network server to\nprovide the source code of the modified version running there to the\nusers of that server.  Therefore, public use of a modified version, on\na publicly accessible server, gives the public access to the source\ncode of the modified version.\n\nAn older license, called the Affero General Public License and\npublished by Affero, was designed to accomplish similar goals.  This is\na different license, not a version of the Affero GPL, but Affero has\nreleased a new version of the Affero GPL which permits relicensing under\nthis license.\n\nThe precise terms and conditions for copying, distribution and\nmodification follow.\n\n## TERMS AND CONDITIONS\n\n### 0. Definitions\n\n“This License” refers to version 3 of the GNU Affero General Public License.\n\n“Copyright” also means copyright-like laws that apply to other kinds of\nworks, such as semiconductor masks.\n\n“The Program” refers to any copyrightable work licensed under this\nLicense.  Each licensee is addressed as “you”.  “Licensees” and\n“recipients” may be individuals or organizations.\n\nTo “modify” a work means to copy from or adapt all or part of the work\nin a fashion requiring copyright permission, other than the making of an\nexact copy.  The resulting work is called a “modified version” of the\nearlier work or a work “based on” the earlier work.\n\nA “covered work” means either the unmodified Program or a work based\non the Program.\n\nTo “propagate” a work means to do anything with it that, without\npermission, would make you directly or secondarily liable for\ninfringement under applicable copyright law, except executing it on a\ncomputer or modifying a private copy.  Propagation includes copying,\ndistribution (with or without modification), making available to the\npublic, and in some countries other activities as well.\n\nTo “convey” a work means any kind of propagation that enables other\nparties to make or receive copies.  Mere interaction with a user through\na computer network, with no transfer of a copy, is not conveying.\n\nAn interactive user interface displays “Appropriate Legal Notices”\nto the extent that it includes a convenient and prominently visible\nfeature that **(1)** displays an appropriate copyright notice, and **(2)**\ntells the user that there is no warranty for the work (except to the\nextent that warranties are provided), that licensees may convey the\nwork under this License, and how to view a copy of this License.  If\nthe interface presents a list of user commands or options, such as a\nmenu, a prominent item in the list meets this criterion.\n\n### 1. Source Code\n\nThe “source code” for a work means the preferred form of the work\nfor making modifications to it.  “Object code” means any non-source\nform of a work.\n\nA “Standard Interface” means an interface that either is an official\nstandard defined by a recognized standards body, or, in the case of\ninterfaces specified for a particular programming language, one that\nis widely used among developers working in that language.\n\nThe “System Libraries” of an executable work include anything, other\nthan the work as a whole, that **(a)** is included in the normal form of\npackaging a Major Component, but which is not part of that Major\nComponent, and **(b)** serves only to enable use of the work with that\nMajor Component, or to implement a Standard Interface for which an\nimplementation is available to the public in source code form.  A\n“Major Component”, in this context, means a major essential component\n(kernel, window system, and so on) of the specific operating system\n(if any) on which the executable work runs, or a compiler used to\nproduce the work, or an object code interpreter used to run it.\n\nThe “Corresponding Source” for a work in object code form means all\nthe source code needed to generate, install, and (for an executable\nwork) run the object code and to modify the work, including scripts to\ncontrol those activities.  However, it does not include the work's\nSystem Libraries, or general-purpose tools or generally available free\nprograms which are used unmodified in performing those activities but\nwhich are not part of the work.  For example, Corresponding Source\nincludes interface definition files associated with source files for\nthe work, and the source code for shared libraries and dynamically\nlinked subprograms that the work is specifically designed to require,\nsuch as by intimate data communication or control flow between those\nsubprograms and other parts of the work.\n\nThe Corresponding Source need not include anything that users\ncan regenerate automatically from other parts of the Corresponding\nSource.\n\nThe Corresponding Source for a work in source code form is that\nsame work.\n\n### 2. Basic Permissions\n\nAll rights granted under this License are granted for the term of\ncopyright on the Program, and are irrevocable provided the stated\nconditions are met.  This License explicitly affirms your unlimited\npermission to run the unmodified Program.  The output from running a\ncovered work is covered by this License only if the output, given its\ncontent, constitutes a covered work.  This License acknowledges your\nrights of fair use or other equivalent, as provided by copyright law.\n\nYou may make, run and propagate covered works that you do not\nconvey, without conditions so long as your license otherwise remains\nin force.  You may convey covered works to others for the sole purpose\nof having them make modifications exclusively for you, or provide you\nwith facilities for running those works, provided that you comply with\nthe terms of this License in conveying all material for which you do\nnot control copyright.  Those thus making or running the covered works\nfor you must do so exclusively on your behalf, under your direction\nand control, on terms that prohibit them from making any copies of\nyour copyrighted material outside their relationship with you.\n\nConveying under any other circumstances is permitted solely under\nthe conditions stated below.  Sublicensing is not allowed; section 10\nmakes it unnecessary.\n\n### 3. Protecting Users' Legal Rights From Anti-Circumvention Law\n\nNo covered work shall be deemed part of an effective technological\nmeasure under any applicable law fulfilling obligations under article\n11 of the WIPO copyright treaty adopted on 20 December 1996, or\nsimilar laws prohibiting or restricting circumvention of such\nmeasures.\n\nWhen you convey a covered work, you waive any legal power to forbid\ncircumvention of technological measures to the extent such circumvention\nis effected by exercising rights under this License with respect to\nthe covered work, and you disclaim any intention to limit operation or\nmodification of the work as a means of enforcing, against the work's\nusers, your or third parties' legal rights to forbid circumvention of\ntechnological measures.\n\n### 4. Conveying Verbatim Copies\n\nYou may convey verbatim copies of the Program's source code as you\nreceive it, in any medium, provided that you conspicuously and\nappropriately publish on each copy an appropriate copyright notice;\nkeep intact all notices stating that this License and any\nnon-permissive terms added in accord with section 7 apply to the code;\nkeep intact all notices of the absence of any warranty; and give all\nrecipients a copy of this License along with the Program.\n\nYou may charge any price or no price for each copy that you convey,\nand you may offer support or warranty protection for a fee.\n\n### 5. Conveying Modified Source Versions\n\nYou may convey a work based on the Program, or the modifications to\nproduce it from the Program, in the form of source code under the\nterms of section 4, provided that you also meet all of these conditions:\n\n* **a)** The work must carry prominent notices stating that you modified\nit, and giving a relevant date.\n* **b)** The work must carry prominent notices stating that it is\nreleased under this License and any conditions added under section 7.\nThis requirement modifies the requirement in section 4 to\n“keep intact all notices”.\n* **c)** You must license the entire work, as a whole, under this\nLicense to anyone who comes into possession of a copy.  This\nLicense will therefore apply, along with any applicable section 7\nadditional terms, to the whole of the work, and all its parts,\nregardless of how they are packaged.  This License gives no\npermission to license the work in any other way, but it does not\ninvalidate such permission if you have separately received it.\n* **d)** If the work has interactive user interfaces, each must display\nAppropriate Legal Notices; however, if the Program has interactive\ninterfaces that do not display Appropriate Legal Notices, your\nwork need not make them do so.\n\nA compilation of a covered work with other separate and independent\nworks, which are not by their nature extensions of the covered work,\nand which are not combined with it such as to form a larger program,\nin or on a volume of a storage or distribution medium, is called an\n“aggregate” if the compilation and its resulting copyright are not\nused to limit the access or legal rights of the compilation's users\nbeyond what the individual works permit.  Inclusion of a covered work\nin an aggregate does not cause this License to apply to the other\nparts of the aggregate.\n\n### 6. Conveying Non-Source Forms\n\nYou may convey a covered work in object code form under the terms\nof sections 4 and 5, provided that you also convey the\nmachine-readable Corresponding Source under the terms of this License,\nin one of these ways:\n\n* **a)** Convey the object code in, or embodied in, a physical product\n(including a physical distribution medium), accompanied by the\nCorresponding Source fixed on a durable physical medium\ncustomarily used for software interchange.\n* **b)** Convey the object code in, or embodied in, a physical product\n(including a physical distribution medium), accompanied by a\nwritten offer, valid for at least three years and valid for as\nlong as you offer spare parts or customer support for that product\nmodel, to give anyone who possesses the object code either **(1)** a\ncopy of the Corresponding Source for all the software in the\nproduct that is covered by this License, on a durable physical\nmedium customarily used for software interchange, for a price no\nmore than your reasonable cost of physically performing this\nconveying of source, or **(2)** access to copy the\nCorresponding Source from a network server at no charge.\n* **c)** Convey individual copies of the object code with a copy of the\nwritten offer to provide the Corresponding Source.  This\nalternative is allowed only occasionally and noncommercially, and\nonly if you received the object code with such an offer, in accord\nwith subsection 6b.\n* **d)** Convey the object code by offering access from a designated\nplace (gratis or for a charge), and offer equivalent access to the\nCorresponding Source in the same way through the same place at no\nfurther charge.  You need not require recipients to copy the\nCorresponding Source along with the object code.  If the place to\ncopy the object code is a network server, the Corresponding Source\nmay be on a different server (operated by you or a third party)\nthat supports equivalent copying facilities, provided you maintain\nclear directions next to the object code saying where to find the\nCorresponding Source.  Regardless of what server hosts the\nCorresponding Source, you remain obligated to ensure that it is\navailable for as long as needed to satisfy these requirements.\n* **e)** Convey the object code using peer-to-peer transmission, provided\nyou inform other peers where the object code and Corresponding\nSource of the work are being offered to the general public at no\ncharge under subsection 6d.\n\nA separable portion of the object code, whose source code is excluded\nfrom the Corresponding Source as a System Library, need not be\nincluded in conveying the object code work.\n\nA “User Product” is either **(1)** a “consumer product”, which means any\ntangible personal property which is normally used for personal, family,\nor household purposes, or **(2)** anything designed or sold for incorporation\ninto a dwelling.  In determining whether a product is a consumer product,\ndoubtful cases shall be resolved in favor of coverage.  For a particular\nproduct received by a particular user, “normally used” refers to a\ntypical or common use of that class of product, regardless of the status\nof the particular user or of the way in which the particular user\nactually uses, or expects or is expected to use, the product.  A product\nis a consumer product regardless of whether the product has substantial\ncommercial, industrial or non-consumer uses, unless such uses represent\nthe only significant mode of use of the product.\n\n“Installation Information” for a User Product means any methods,\nprocedures, authorization keys, or other information required to install\nand execute modified versions of a covered work in that User Product from\na modified version of its Corresponding Source.  The information must\nsuffice to ensure that the continued functioning of the modified object\ncode is in no case prevented or interfered with solely because\nmodification has been made.\n\nIf you convey an object code work under this section in, or with, or\nspecifically for use in, a User Product, and the conveying occurs as\npart of a transaction in which the right of possession and use of the\nUser Product is transferred to the recipient in perpetuity or for a\nfixed term (regardless of how the transaction is characterized), the\nCorresponding Source conveyed under this section must be accompanied\nby the Installation Information.  But this requirement does not apply\nif neither you nor any third party retains the ability to install\nmodified object code on the User Product (for example, the work has\nbeen installed in ROM).\n\nThe requirement to provide Installation Information does not include a\nrequirement to continue to provide support service, warranty, or updates\nfor a work that has been modified or installed by the recipient, or for\nthe User Product in which it has been modified or installed.  Access to a\nnetwork may be denied when the modification itself materially and\nadversely affects the operation of the network or violates the rules and\nprotocols for communication across the network.\n\nCorresponding Source conveyed, and Installation Information provided,\nin accord with this section must be in a format that is publicly\ndocumented (and with an implementation available to the public in\nsource code form), and must require no special password or key for\nunpacking, reading or copying.\n\n### 7. Additional Terms\n\n“Additional permissions” are terms that supplement the terms of this\nLicense by making exceptions from one or more of its conditions.\nAdditional permissions that are applicable to the entire Program shall\nbe treated as though they were included in this License, to the extent\nthat they are valid under applicable law.  If additional permissions\napply only to part of the Program, that part may be used separately\nunder those permissions, but the entire Program remains governed by\nthis License without regard to the additional permissions.\n\nWhen you convey a copy of a covered work, you may at your option\nremove any additional permissions from that copy, or from any part of\nit.  (Additional permissions may be written to require their own\nremoval in certain cases when you modify the work.)  You may place\nadditional permissions on material, added by you to a covered work,\nfor which you have or can give appropriate copyright permission.\n\nNotwithstanding any other provision of this License, for material you\nadd to a covered work, you may (if authorized by the copyright holders of\nthat material) supplement the terms of this License with terms:\n\n* **a)** Disclaiming warranty or limiting liability differently from the\nterms of sections 15 and 16 of this License; or\n* **b)** Requiring preservation of specified reasonable legal notices or\nauthor attributions in that material or in the Appropriate Legal\nNotices displayed by works containing it; or\n* **c)** Prohibiting misrepresentation of the origin of that material, or\nrequiring that modified versions of such material be marked in\nreasonable ways as different from the original version; or\n* **d)** Limiting the use for publicity purposes of names of licensors or\nauthors of the material; or\n* **e)** Declining to grant rights under trademark law for use of some\ntrade names, trademarks, or service marks; or\n* **f)** Requiring indemnification of licensors and authors of that\nmaterial by anyone who conveys the material (or modified versions of\nit) with contractual assumptions of liability to the recipient, for\nany liability that these contractual assumptions directly impose on\nthose licensors and authors.\n\nAll other non-permissive additional terms are considered “further\nrestrictions” within the meaning of section 10.  If the Program as you\nreceived it, or any part of it, contains a notice stating that it is\ngoverned by this License along with a term that is a further\nrestriction, you may remove that term.  If a license document contains\na further restriction but permits relicensing or conveying under this\nLicense, you may add to a covered work material governed by the terms\nof that license document, provided that the further restriction does\nnot survive such relicensing or conveying.\n\nIf you add terms to a covered work in accord with this section, you\nmust place, in the relevant source files, a statement of the\nadditional terms that apply to those files, or a notice indicating\nwhere to find the applicable terms.\n\nAdditional terms, permissive or non-permissive, may be stated in the\nform of a separately written license, or stated as exceptions;\nthe above requirements apply either way.\n\n### 8. Termination\n\nYou may not propagate or modify a covered work except as expressly\nprovided under this License.  Any attempt otherwise to propagate or\nmodify it is void, and will automatically terminate your rights under\nthis License (including any patent licenses granted under the third\nparagraph of section 11).\n\nHowever, if you cease all violation of this License, then your\nlicense from a particular copyright holder is reinstated **(a)**\nprovisionally, unless and until the copyright holder explicitly and\nfinally terminates your license, and **(b)** permanently, if the copyright\nholder fails to notify you of the violation by some reasonable means\nprior to 60 days after the cessation.\n\nMoreover, your license from a particular copyright holder is\nreinstated permanently if the copyright holder notifies you of the\nviolation by some reasonable means, this is the first time you have\nreceived notice of violation of this License (for any work) from that\ncopyright holder, and you cure the violation prior to 30 days after\nyour receipt of the notice.\n\nTermination of your rights under this section does not terminate the\nlicenses of parties who have received copies or rights from you under\nthis License.  If your rights have been terminated and not permanently\nreinstated, you do not qualify to receive new licenses for the same\nmaterial under section 10.\n\n### 9. Acceptance Not Required for Having Copies\n\nYou are not required to accept this License in order to receive or\nrun a copy of the Program.  Ancillary propagation of a covered work\noccurring solely as a consequence of using peer-to-peer transmission\nto receive a copy likewise does not require acceptance.  However,\nnothing other than this License grants you permission to propagate or\nmodify any covered work.  These actions infringe copyright if you do\nnot accept this License.  Therefore, by modifying or propagating a\ncovered work, you indicate your acceptance of this License to do so.\n\n### 10. Automatic Licensing of Downstream Recipients\n\nEach time you convey a covered work, the recipient automatically\nreceives a license from the original licensors, to run, modify and\npropagate that work, subject to this License.  You are not responsible\nfor enforcing compliance by third parties with this License.\n\nAn “entity transaction” is a transaction transferring control of an\norganization, or substantially all assets of one, or subdividing an\norganization, or merging organizations.  If propagation of a covered\nwork results from an entity transaction, each party to that\ntransaction who receives a copy of the work also receives whatever\nlicenses to the work the party's predecessor in interest had or could\ngive under the previous paragraph, plus a right to possession of the\nCorresponding Source of the work from the predecessor in interest, if\nthe predecessor has it or can get it with reasonable efforts.\n\nYou may not impose any further restrictions on the exercise of the\nrights granted or affirmed under this License.  For example, you may\nnot impose a license fee, royalty, or other charge for exercise of\nrights granted under this License, and you may not initiate litigation\n(including a cross-claim or counterclaim in a lawsuit) alleging that\nany patent claim is infringed by making, using, selling, offering for\nsale, or importing the Program or any portion of it.\n\n### 11. Patents\n\nA “contributor” is a copyright holder who authorizes use under this\nLicense of the Program or a work on which the Program is based.  The\nwork thus licensed is called the contributor's “contributor version”.\n\nA contributor's “essential patent claims” are all patent claims\nowned or controlled by the contributor, whether already acquired or\nhereafter acquired, that would be infringed by some manner, permitted\nby this License, of making, using, or selling its contributor version,\nbut do not include claims that would be infringed only as a\nconsequence of further modification of the contributor version.  For\npurposes of this definition, “control” includes the right to grant\npatent sublicenses in a manner consistent with the requirements of\nthis License.\n\nEach contributor grants you a non-exclusive, worldwide, royalty-free\npatent license under the contributor's essential patent claims, to\nmake, use, sell, offer for sale, import and otherwise run, modify and\npropagate the contents of its contributor version.\n\nIn the following three paragraphs, a “patent license” is any express\nagreement or commitment, however denominated, not to enforce a patent\n(such as an express permission to practice a patent or covenant not to\nsue for patent infringement).  To “grant” such a patent license to a\nparty means to make such an agreement or commitment not to enforce a\npatent against the party.\n\nIf you convey a covered work, knowingly relying on a patent license,\nand the Corresponding Source of the work is not available for anyone\nto copy, free of charge and under the terms of this License, through a\npublicly available network server or other readily accessible means,\nthen you must either **(1)** cause the Corresponding Source to be so\navailable, or **(2)** arrange to deprive yourself of the benefit of the\npatent license for this particular work, or **(3)** arrange, in a manner\nconsistent with the requirements of this License, to extend the patent\nlicense to downstream recipients.  “Knowingly relying” means you have\nactual knowledge that, but for the patent license, your conveying the\ncovered work in a country, or your recipient's use of the covered work\nin a country, would infringe one or more identifiable patents in that\ncountry that you have reason to believe are valid.\n\nIf, pursuant to or in connection with a single transaction or\narrangement, you convey, or propagate by procuring conveyance of, a\ncovered work, and grant a patent license to some of the parties\nreceiving the covered work authorizing them to use, propagate, modify\nor convey a specific copy of the covered work, then the patent license\nyou grant is automatically extended to all recipients of the covered\nwork and works based on it.\n\nA patent license is “discriminatory” if it does not include within\nthe scope of its coverage, prohibits the exercise of, or is\nconditioned on the non-exercise of one or more of the rights that are\nspecifically granted under this License.  You may not convey a covered\nwork if you are a party to an arrangement with a third party that is\nin the business of distributing software, under which you make payment\nto the third party based on the extent of your activity of conveying\nthe work, and under which the third party grants, to any of the\nparties who would receive the covered work from you, a discriminatory\npatent license **(a)** in connection with copies of the covered work\nconveyed by you (or copies made from those copies), or **(b)** primarily\nfor and in connection with specific products or compilations that\ncontain the covered work, unless you entered into that arrangement,\nor that patent license was granted, prior to 28 March 2007.\n\nNothing in this License shall be construed as excluding or limiting\nany implied license or other defenses to infringement that may\notherwise be available to you under applicable patent law.\n\n### 12. No Surrender of Others' Freedom\n\nIf conditions are imposed on you (whether by court order, agreement or\notherwise) that contradict the conditions of this License, they do not\nexcuse you from the conditions of this License.  If you cannot convey a\ncovered work so as to satisfy simultaneously your obligations under this\nLicense and any other pertinent obligations, then as a consequence you may\nnot convey it at all.  For example, if you agree to terms that obligate you\nto collect a royalty for further conveying from those to whom you convey\nthe Program, the only way you could satisfy both those terms and this\nLicense would be to refrain entirely from conveying the Program.\n\n### 13. Remote Network Interaction; Use with the GNU General Public License\n\nNotwithstanding any other provision of this License, if you modify the\nProgram, your modified version must prominently offer all users\ninteracting with it remotely through a computer network (if your version\nsupports such interaction) an opportunity to receive the Corresponding\nSource of your version by providing access to the Corresponding Source\nfrom a network server at no charge, through some standard or customary\nmeans of facilitating copying of software.  This Corresponding Source\nshall include the Corresponding Source for any work covered by version 3\nof the GNU General Public License that is incorporated pursuant to the\nfollowing paragraph.\n\nNotwithstanding any other provision of this License, you have\npermission to link or combine any covered work with a work licensed\nunder version 3 of the GNU General Public License into a single\ncombined work, and to convey the resulting work.  The terms of this\nLicense will continue to apply to the part which is the covered work,\nbut the work with which it is combined will remain governed by version\n3 of the GNU General Public License.\n\n### 14. Revised Versions of this License\n\nThe Free Software Foundation may publish revised and/or new versions of\nthe GNU Affero General Public License from time to time.  Such new versions\nwill be similar in spirit to the present version, but may differ in detail to\naddress new problems or concerns.\n\nEach version is given a distinguishing version number.  If the\nProgram specifies that a certain numbered version of the GNU Affero General\nPublic License “or any later version” applies to it, you have the\noption of following the terms and conditions either of that numbered\nversion or of any later version published by the Free Software\nFoundation.  If the Program does not specify a version number of the\nGNU Affero General Public License, you may choose any version ever published\nby the Free Software Foundation.\n\nIf the Program specifies that a proxy can decide which future\nversions of the GNU Affero General Public License can be used, that proxy's\npublic statement of acceptance of a version permanently authorizes you\nto choose that version for the Program.\n\nLater license versions may give you additional or different\npermissions.  However, no additional obligations are imposed on any\nauthor or copyright holder as a result of your choosing to follow a\nlater version.\n\n### 15. Disclaimer of Warranty\n\nTHERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY\nAPPLICABLE LAW.  EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT\nHOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM “AS IS” WITHOUT WARRANTY\nOF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO,\nTHE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\nPURPOSE.  THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM\nIS WITH YOU.  SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF\nALL NECESSARY SERVICING, REPAIR OR CORRECTION.\n\n### 16. Limitation of Liability\n\nIN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING\nWILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MODIFIES AND/OR CONVEYS\nTHE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY\nGENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE\nUSE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF\nDATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD\nPARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS),\nEVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF\nSUCH DAMAGES.\n\n### 17. Interpretation of Sections 15 and 16\n\nIf the disclaimer of warranty and limitation of liability provided\nabove cannot be given local legal effect according to their terms,\nreviewing courts shall apply local law that most closely approximates\nan absolute waiver of all civil liability in connection with the\nProgram, unless a warranty or assumption of liability accompanies a\ncopy of the Program in return for a fee.\n\n_END OF TERMS AND CONDITIONS_\n\n## How to Apply These Terms to Your New Programs\n\nIf you develop a new program, and you want it to be of the greatest\npossible use to the public, the best way to achieve this is to make it\nfree software which everyone can redistribute and change under these terms.\n\nTo do so, attach the following notices to the program.  It is safest\nto attach them to the start of each source file to most effectively\nstate the exclusion of warranty; and each file should have at least\nthe “copyright” line and a pointer to where the full notice is found.\n\n    <one line to give the program's name and a brief idea of what it does.>\n    Copyright (C) <year>  <name of author>\n\n    This program is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Affero General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Affero General Public License for more details.\n\n    You should have received a copy of the GNU Affero General Public License\n    along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nAlso add information on how to contact you by electronic and paper mail.\n\nIf your software can interact with users remotely through a computer\nnetwork, you should also make sure that it provides a way for users to\nget its source.  For example, if your program is a web application, its\ninterface could display a “Source” link that leads users to an archive\nof the code.  There are many ways you could offer source, and different\nsolutions will be better for different programs; see section 13 for the\nspecific requirements.\n\nYou should also get your employer (if you work as a programmer) or school,\nif any, to sign a “copyright disclaimer” for the program, if necessary.\nFor more information on this, and how to apply and follow the GNU AGPL, see\n&lt;<http://www.gnu.org/licenses/>&gt;."
        },
        {
          "name": "README-Japanese.md",
          "type": "blob",
          "size": 133.1875,
          "content": "<div align=\"center\">\n <p>\n    <img alt=\"Hayabusa Logo\" src=\"logo.png\" width=\"60%\">\n </p>\n  [<a href=\"README.md\">English</a>] | [<b>日本語</b>]\n</div>\n\n---\n\n<p align=\"center\">\n    <a href=\"https://github.com/Yamato-Security/hayabusa/releases\"><img src=\"https://img.shields.io/github/v/release/Yamato-Security/hayabusa?color=blue&label=Stable%20Version&style=flat\"/></a>\n    <a href=\"https://github.com/Yamato-Security/hayabusa/releases\"><img src=\"https://img.shields.io/github/downloads/Yamato-Security/hayabusa/total?style=flat&label=GitHub%F0%9F%A6%85Downloads&color=blue\"/></a>\n    <a href=\"https://github.com/Yamato-Security/hayabusa/stargazers\"><img src=\"https://img.shields.io/github/stars/Yamato-Security/hayabusa?style=flat&label=GitHub%F0%9F%A6%85Stars\"/></a>\n    <a href=\"https://github.com/Yamato-Security/hayabusa/graphs/contributors\"><img src=\"https://img.shields.io/github/contributors/Yamato-Security/hayabusa?label=Contributors&color=blue&style=flat\"/></a>\n    <a href=\"https://www.blackhat.com/asia-22/arsenal/schedule/#hayabusa-26211\"><img src=\"https://raw.githubusercontent.com/toolswatch/badges/master/arsenal/asia/2022.svg\"></a>\n    <a href=\"https://codeblue.jp/2022/en/talks/?content=talks_24\"><img src=\"https://img.shields.io/badge/CODE%20BLUE%20Bluebox-2022-blue\"></a>\n    <a href=\"https://www.seccon.jp/2022/seccon_workshop/windows.html\"><img src=\"https://img.shields.io/badge/SECCON-2023-blue\"></a>\n    <a href=\"https://www.security-camp.or.jp/minicamp/tokyo2023.html\"><img src=\"https://img.shields.io/badge/Security%20MiniCamp%20Tokyo-2023-blue\"></a>\n    <a href=\"https://www.sans.org/cyber-security-training-events/digital-forensics-summit-2023/\"><img src=\"https://img.shields.io/badge/SANS%20DFIR%20Summit-2023-blue\"></a>\n    <a href=\"https://bsides.tokyo/2024/\"><img src=\"https://img.shields.io/badge/BSides%20Tokyo-2024-blue\"></a>\n    <a href=\"https://www.hacker.or.jp/hack-fes-2024/\"><img src=\"https://img.shields.io/badge/Hack%20Fes.-2024-blue\"></a>\n    <a href=\"https://hitcon.org/2024/CMT/\"><img src=\"https://img.shields.io/badge/HITCON-2024-blue\"></a>\n    <a href=\"https://www.blackhat.com/sector/2024/briefings/schedule/index.html#performing-dfir-and-threat-hunting-with-yamato-security-oss-tools-and-community-driven-knowledge-41347\"><img src=\"https://img.shields.io/badge/SecTor-2024-blue\"></a>\n    <a href=\"Maintenance Level\"><img src=\"https://img.shields.io/badge/Maintenance%20Level-Actively%20Developed-brightgreen.svg\" /></a>\n    <a href=\"Total Commits\"><img src=\"https://img.shields.io/github/commit-activity/t/Yamato-Security/hayabusa/main\" /></a>\n    <a href=\"https://rust-reportcard.xuri.me/report/github.com/Yamato-Security/hayabusa\"><img src=\"https://rust-reportcard.xuri.me/badge/github.com/Yamato-Security/hayabusa\" /></a>\n    <a href=\"https://codecov.io/gh/Yamato-Security/hayabusa\" ><img src=\"https://codecov.io/gh/Yamato-Security/hayabusa/branch/main/graph/badge.svg?token=WFN5XO9W8C\"/></a>\n    <a href=\"https://twitter.com/SecurityYamato\"><img src=\"https://img.shields.io/twitter/follow/SecurityYamato?style=social\"/></a>\n</p>\n\n# Hayabusa について\n\nHayabusaは、日本の[Yamato Security](https://yamatosecurity.connpass.com/)グループによって作られた**Windowsイベントログのファストフォレンジックタイムライン作成**および**脅威ハンティングツール**です。 \nHayabusaは日本語で[「ハヤブサ」](https://ja.wikipedia.org/wiki/%E3%83%8F%E3%83%A4%E3%83%96%E3%82%B5)を意味し、ハヤブサが世界で最も速く、狩猟(hunting)に優れ、とても訓練しやすい動物であることから選ばれました。\n[Rust](https://www.rust-lang.org/) で開発され、マルチスレッドに対応し、可能な限り高速に動作するよう配慮されています。\nHayabusaは[upstream Sigma](https://github.com/SigmaHQ/sigma) ルールの解析に対応しています。ただし、[hayabusa-rules repository](https://github.com/Yamato-Security/hayabusa-rules)で使用およびホストしているSigmaルールは、ルールの読み込みをより柔軟にし、誤検知を減らすために一部の変換が施されています。\n詳細については、[sigma-to-hayabusa-converter repository](https://github.com/Yamato-Security/sigma-to-hayabusa-converter) リポジトリのREADMEファイルをご参照ください。\n稼働中のシステムで実行してライブ調査することも、複数のシステムからログを収集してオフライン調査することも可能です。 また、 [Velociraptor](https://docs.velociraptor.app/)と[Hayabusa artifact](https://docs.velociraptor.app/exchange/artifacts/pages/windows.eventlogs.hayabusa/)を用いることで企業向けの広範囲なスレットハンティングとインシデントレスポンスにも活用できます。\n出力は一つのCSVタイムラインにまとめられ、[LibreOffice](https://www.libreoffice.org/)、[Timeline Explorer](https://ericzimmerman.github.io/#!index.md)、[Elastic Stack](doc/ElasticStackImport/ElasticStackImport-Japanese.md)、[Timesketch](https://timesketch.org/)等で簡単に分析できるようになります。\n\n# 関連プロジェクト\n\n* [EnableWindowsLogSettings](https://github.com/Yamato-Security/EnableWindowsLogSettings) - Sigmaベースの脅威ハンティングと、Windowsイベントログのファストフォレンジックタイムライン生成ツール。\n* [Hayabusa Encoded Rules](https://github.com/Yamato-Security/hayabusa-encoded-rules) - Hayabusa Rulesリポジトリと同じだが、ルールと設定ファイルは1つのファイルに保存され、アンチウイルスによる誤検知を防ぐためにXORされる。\n* [Hayabusa Rules](https://github.com/Yamato-Security/hayabusa-rules/blob/main/README-Japanese.md) - Hayabusaのための検知ルール。\n* [Hayabusa EVTX](https://github.com/Yamato-Security/hayabusa-evtx) - `evtxクレート`のよりメンテナンスされたフォーク。\n* [Hayabusa Sample EVTXs](https://github.com/Yamato-Security/hayabusa-sample-evtx) - Hayabusa/Sigma検出ルールをテストするためのサンプルevtxファイル。\n* [Presentations](https://github.com/Yamato-Security/Presentations) - ツールやリソースについて行った講演のプレゼンテーション。\n* [Sigma to Hayabusa Converter](https://github.com/Yamato-Security/sigma-to-hayabusa-converter) - 上流のWindowsイベントログベースのSigmaルールを使いやすい形式にキュレーションする。\n* [Takajo](https://github.com/Yamato-Security/takajo/blob/main/README-Japanese.md) - Hayabusa結果の解析ツール。\n* [WELA (Windows Event Log Analyzer)](https://github.com/Yamato-Security/WELA/blob/main/README-Japanese.md) - PowerShellで書かれたWindowsイベントログの解析ツール。(非推奨となり、Takajoに置き換えられた)\n\n# Hayabusaを利用したサードパーティプロジェクト\n\n* [AllthingsTimesketch](https://github.com/blueteam0ps/AllthingsTimesketch) - PlasoとHayabusaの結果をTimesketchにインポートするNodeREDワークフロー\n* [LimaCharlie](https://docs.limacharlie.io/docs/extensions-third-party-extensions-hayabusa) - ニーズに合わせたクラウドベースのセキュリティツールとインフラを提供\n* [OpenRelik](https://openrelik.org/) - デジタル・フォレンジックの共同調査を効率化するために設計されたオープンソース（Apache-2.0）のプラットフォーム\n* [Splunk4DFIR](https://github.com/mf1d3l/Splunk4DFIR) - Dockerでsplunkインスタンスを素早く立ち上げ、調査中に出力されるログやツールを閲覧するためのツール\n* [Velociraptor](https://github.com/Velocidex/velociraptor) - Velociraptor Query Language (VQL)クエリを使用したホストベースの収集ツール\n\n## 目次\n\n- [Hayabusa について](#hayabusa-について)\n- [関連プロジェクト](#関連プロジェクト)\n- [Hayabusaを利用したサードパーティプロジェクト](#hayabusaを利用したサードパーティプロジェクト)\n  - [目次](#目次)\n  - [主な目的](#主な目的)\n    - [スレット(脅威)ハンティングと企業向けの広範囲なDFIR](#スレット脅威ハンティングと企業向けの広範囲なdfir)\n    - [フォレンジックタイムラインの高速生成](#フォレンジックタイムラインの高速生成)\n- [スクリーンショット](#スクリーンショット)\n  - [起動](#起動)\n  - [DFIRタイムラインのターミナル出力](#dfirタイムラインのターミナル出力)\n  - [キーワード検索結果](#キーワード検索結果)\n  - [検知頻度タイムライン出力 (`-T`オプション)](#検知頻度タイムライン出力--tオプション)\n  - [結果サマリ (Results Summary)](#結果サマリ-results-summary)\n  - [HTMLの結果サマリ (`-H`オプション)](#htmlの結果サマリ--hオプション)\n  - [LibreOfficeでのDFIRタイムライン解析 (`-M` マルチライン出力)](#libreofficeでのdfirタイムライン解析--m-マルチライン出力)\n  - [Timeline ExplorerでのDFIRタイムライン解析](#timeline-explorerでのdfirタイムライン解析)\n  - [Criticalアラートのフィルタリングとコンピュータごとのグルーピング](#criticalアラートのフィルタリングとコンピュータごとのグルーピング)\n  - [Elastic Stackダッシュボードでの解析](#elastic-stackダッシュボードでの解析)\n  - [Timesketchでの解析](#timesketchでの解析)\n- [タイムライン結果のインポートと解析について](#タイムライン結果のインポートと解析について)\n- [jqによるJSON形式の結果の解析](#jqによるjson形式の結果の解析)\n- [特徴＆機能](#特徴機能)\n- [ダウンロード](#ダウンロード)\n  - [Windowsライブレスポンスパッケージ](#windowsライブレスポンスパッケージ)\n- [Gitクローン](#gitクローン)\n- [アドバンス: ソースコードからのコンパイル（任意）](#アドバンス-ソースコードからのコンパイル任意)\n  - [Rustパッケージの更新](#rustパッケージの更新)\n  - [32ビットWindowsバイナリのクロスコンパイル](#32ビットwindowsバイナリのクロスコンパイル)\n  - [macOSでのコンパイルの注意点](#macosでのコンパイルの注意点)\n  - [Linuxでのコンパイルの注意点](#linuxでのコンパイルの注意点)\n  - [LinuxのMUSLバイナリのクロスコンパイル](#linuxのmuslバイナリのクロスコンパイル)\n- [Hayabusaの実行](#hayabusaの実行)\n  - [注意: アンチウィルス/EDRの誤検知と遅い初回実行](#注意-アンチウィルスedrの誤検知と遅い初回実行)\n  - [Windows](#windows)\n    - [パスにスペースが含まれるファイルまたはディレクトリをスキャンしようとするとエラーが発生した場合](#パスにスペースが含まれるファイルまたはディレクトリをスキャンしようとするとエラーが発生した場合)\n    - [文字が正常に表示されない場合](#文字が正常に表示されない場合)\n  - [Linux](#linux)\n  - [macOS](#macos)\n- [コマンド一覧](#コマンド一覧)\n  - [分析コマンド:](#分析コマンド)\n  - [DFIRタイムライン作成のコマンド:](#dfirタイムライン作成のコマンド)\n  - [汎用コマンド:](#汎用コマンド)\n- [コマンド使用方法](#コマンド使用方法)\n  - [分析コマンド](#分析コマンド-1)\n    - [`computer-metrics`コマンド](#computer-metricsコマンド)\n      - [`computer-metrics`コマンドの使用例](#computer-metricsコマンドの使用例)\n      - [`computer-metrics`のスクリーンショット](#computer-metricsのスクリーンショット)\n    - [`eid-metrics`コマンド](#eid-metricsコマンド)\n      - [`eid-metrics`コマンドの使用例](#eid-metricsコマンドの使用例)\n      - [`eid-metrics`コマンドの設定ファイル](#eid-metricsコマンドの設定ファイル)\n      - [`eid-metrics`のスクリーンショット](#eid-metricsのスクリーンショット)\n    - [`expand-list`コマンド](#expand-listコマンド)\n      - [`expand-list`コマンドの使用例](#expand-listコマンドの使用例)\n      - [`expand-list`結果](#expand-list結果)\n    - [`extract-base64`コマンド](#extract-base64コマンド)\n      - [`extract-base64`コマンドの使用例](#extract-base64コマンドの使用例)\n      - [`extract-base64`の結果](#extract-base64の結果)\n    - [`log-metrics`コマンド](#log-metricsコマンド)\n      - [`log-metrics`コマンドの使用例](#log-metricsコマンドの使用例)\n      - [`log-metrics`のスクリーンショット](#log-metricsのスクリーンショット)\n    - [`logon-summary`コマンド](#logon-summaryコマンド)\n      - [`logon-summary`コマンドの使用例](#logon-summaryコマンドの使用例)\n      - [`logon-summary`のスクリーンショット](#logon-summaryのスクリーンショット)\n    - [`pivot-keywords-list`コマンド](#pivot-keywords-listコマンド)\n      - [`pivot-keywords-list`コマンドの使用例](#pivot-keywords-listコマンドの使用例)\n      - [`pivot-keywords-list`の設定ファイル](#pivot-keywords-listの設定ファイル)\n    - [`search`コマンド](#searchコマンド)\n      - [`search`コマンドの使用例](#searchコマンドの使用例)\n      - [`search`の設定ファイル](#searchの設定ファイル)\n  - [DFIRタイムラインコマンド](#dfirタイムラインコマンド)\n    - [スキャンウィザード](#スキャンウィザード)\n      - [Core ルール](#core-ルール)\n      - [Core+ ルール](#core-ルール-1)\n      - [Core++ ルール](#core-ルール-2)\n      - [Emerging Threats (ET) アドオンルール](#emerging-threats-et-アドオンルール)\n      - [Threat Hunting (TH) アドオンルール](#threat-hunting-th-アドオンルール)\n    - [Channelベースのイベントログとルールフィルタリング](#channelベースのイベントログとルールフィルタリング)\n    - [`csv-timeline`コマンド](#csv-timelineコマンド)\n      - [`csv-timeline`コマンドの使用例](#csv-timelineコマンドの使用例)\n      - [アドバンス - GeoIPのログエンリッチメント](#アドバンス---geoipのログエンリッチメント)\n        - [GeoIPの設定ファイル](#geoipの設定ファイル)\n        - [GeoIPデータベースの自動アップデート](#geoipデータベースの自動アップデート)\n      - [`csv-timeline`コマンドの設定ファイル](#csv-timelineコマンドの設定ファイル)\n    - [`json-timeline`コマンド](#json-timelineコマンド)\n      - [`json-timeline`コマンドの使用例と設定ファイル](#json-timelineコマンドの使用例と設定ファイル)\n    - [`level-tuning`コマンド](#level-tuningコマンド)\n      - [`level-tuning`コマンドの使用例](#level-tuningコマンドの使用例)\n      - [`level-tuning`の設定ファイル](#level-tuningの設定ファイル)\n    - [`list-profiles`コマンド](#list-profilesコマンド)\n    - [`set-default-profile`コマンド](#set-default-profileコマンド)\n      - [`set-default-profile`コマンドの使用例](#set-default-profileコマンドの使用例)\n  - [`update-rules`コマンド](#update-rulesコマンド)\n    - [`update-rules`コマンドの使用例](#update-rulesコマンドの使用例)\n- [タイムライン出力](#タイムライン出力)\n  - [出力プロファイル](#出力プロファイル)\n    - [1. `minimal`プロファイルの出力](#1-minimalプロファイルの出力)\n    - [2. `standard`プロファイルの出力](#2-standardプロファイルの出力)\n    - [3. `verbose`プロファイルの出力](#3-verboseプロファイルの出力)\n    - [4. `all-field-info`プロファイルの出力](#4-all-field-infoプロファイルの出力)\n    - [5. `all-field-info-verbose`プロファイルの出力](#5-all-field-info-verboseプロファイルの出力)\n    - [6. `super-verbose`プロファイルの出力](#6-super-verboseプロファイルの出力)\n    - [7. `timesketch-minimal`プロファイルの出力](#7-timesketch-minimalプロファイルの出力)\n    - [8. `timesketch-verbose`プロファイルの出力](#8-timesketch-verboseプロファイルの出力)\n    - [プロファイルの比較](#プロファイルの比較)\n    - [プロファイルのフィールドエイリアス](#プロファイルのフィールドエイリアス)\n      - [その他のプロファイルのフィールドエイリアス](#その他のプロファイルのフィールドエイリアス)\n  - [省略](#省略)\n    - [Levelの省略](#levelの省略)\n    - [MITRE ATT\\&CK戦術の省略](#mitre-attck戦術の省略)\n    - [Channel情報の省略](#channel情報の省略)\n    - [その他の省略](#その他の省略)\n  - [プログレスバー](#プログレスバー)\n  - [カラー出力](#カラー出力)\n  - [結果のサマリ (Results Summary)](#結果のサマリ-results-summary)\n    - [検知頻度タイムライン](#検知頻度タイムライン)\n- [Hayabusaルール](#hayabusaルール)\n  - [Sigma v.s. Hayabusa(ビルトインSigmaとの互換性のある)ルール](#sigma-vs-hayabusaビルトインsigmaとの互換性のあるルール)\n- [その他のWindowsイベントログ解析ツールおよび関連リソース](#その他のwindowsイベントログ解析ツールおよび関連リソース)\n- [Windowsイベントログ設定のススメ](#windowsイベントログ設定のススメ)\n- [Sysmon関係のプロジェクト](#sysmon関係のプロジェクト)\n- [コミュニティによるドキュメンテーション](#コミュニティによるドキュメンテーション)\n  - [英語](#英語)\n  - [日本語](#日本語)\n- [貢献](#貢献)\n- [バグの報告](#バグの報告)\n- [ライセンス](#ライセンス)\n- [Twitter](#twitter)\n\n## 主な目的\n\n### スレット(脅威)ハンティングと企業向けの広範囲なDFIR\n\nHayabusaには現在、4000以上のSigmaルールと170以上のHayabusa検知ルールがあり、定期的にルールが追加されています。\n[Velociraptor](https://docs.velociraptor.app/)の[Hayabusa artifact](https://docs.velociraptor.app/exchange/artifacts/pages/windows.eventlogs.hayabusa/)を用いることで企業向けの広範囲なスレットハンティングだけでなくDFIR(デジタルフォレンジックとインシデントレスポンス)にも無料で利用することが可能です。\nこの2つのオープンソースを組み合わせることで、SIEMが設定されていない環境でも実質的に遡及してSIEMを再現することができます。\n具体的な方法は[Eric Capuano](https://twitter.com/eric_capuano)の[こちら](https://www.youtube.com/watch?v=Q1IoGX--814)の動画で学ぶことができます。\n\n### フォレンジックタイムラインの高速生成\n\nWindowsのイベントログは、1）解析が困難なデータ形式であること、2）データの大半がノイズであり調査に有用でないことから、従来は非常に長い時間と手間がかかる解析作業となっていました。\nHayabusaは、有用なデータのみを抽出し、専門的なトレーニングを受けた分析者だけでなく、Windowsのシステム管理者であれば誰でも利用できる読みやすい形式で提示することを主な目的としています。\nHayabusaは従来のWindowsイベントログ分析解析と比較して、分析者が20%の時間で80%の作業を行えるようにすることを目指しています。\n\n![DFIR Timeline](doc/DFIR-TimelineCreation-JP.png)\n\n# スクリーンショット\n\n## 起動\n\n![Hayabusa 起動画面](screenshots/Startup.png)\n\n## DFIRタイムラインのターミナル出力\n\n![Hayabusa ターミナル出力画面](screenshots/Results.png)\n\n## キーワード検索結果\n\n![Hayabusa search results](screenshots/SearchResults.png)\n\n## 検知頻度タイムライン出力 (`-T`オプション)\n\n![Hayabusa 検知頻度タイムライン出力画面](screenshots/DetectionFrequencyTimeline.png)\n\n## 結果サマリ (Results Summary)\n\n![Hayabusa 結果サマリ画面](screenshots/ResultsSummary.png)\n\n## HTMLの結果サマリ (`-H`オプション)\n\n![Hayabusa results summary](screenshots/HTML-ResultsSummary-1.png)\n\n![Hayabusa results summary](screenshots/HTML-ResultsSummary-2.png)\n\n![Hayabusa results summary](screenshots/HTML-ResultsSummary-3.png)\n\n## LibreOfficeでのDFIRタイムライン解析 (`-M` マルチライン出力)\n\n![Hayabusa analysis in LibreOffice](screenshots/DFIR-TimelineLibreOfficeMultiline.jpeg)\n\n## Timeline ExplorerでのDFIRタイムライン解析\n\n![Hayabusa Timeline Explorerでの解析](screenshots/TimelineExplorer-ColoredTimeline.png)\n\n## Criticalアラートのフィルタリングとコンピュータごとのグルーピング\n\n![Timeline ExplorerでCriticalアラートのフィルタリングとコンピュータグルーピング](screenshots/TimelineExplorer-CriticalAlerts-ComputerGrouping.png)\n\n## Elastic Stackダッシュボードでの解析\n\n![Elastic Stack Dashboard 1](doc/ElasticStackImport/17-HayabusaDashboard-1.png)\n\n![Elastic Stack Dashboard 2](doc/ElasticStackImport/18-HayabusaDashboard-2.png)\n\n## Timesketchでの解析\n\n![Timesketch](screenshots/TimesketchAnalysis.png)\n\n# タイムライン結果のインポートと解析について\n\nCSVのタイムラインをExcelやTimeline Explorerで分析する方法は[こちら](doc/CSV-AnalysisWithExcelAndTimelineExplorer-Japanese.pdf)で紹介しています。\n\nCSVのタイムラインをElastic Stackにインポートする方法は[こちら](doc/ElasticStackImport/ElasticStackImport-Japanese.md)で紹介しています。\n\nCSVのタイムラインをTimesketchにインポートする方法は[こちら](doc/TimesketchImport/TimesketchImport-Japanese.md)で紹介しています。\n\n# jqによるJSON形式の結果の解析\n\nJSON形式の結果を`jq`で解析する方法については、[こちら](/doc/AnalysisWithJQ-Japanese.md)を参照してください。\n\n# 特徴＆機能\n\n* クロスプラットフォーム対応: Windows, Linux, macOS。\n* Rustで開発され、メモリセーフでハヤブサよりも高速です！\n* マルチスレッド対応により、最大5倍のスピードアップを実現。\n* フォレンジック調査やインシデントレスポンスのために、分析しやすいCSVタイムラインを作成します。\n* 読みやすい/作成/編集可能なYMLベースのHayabusaルールで作成されたIoCシグネチャに基づくスレットハンティング。\n* SigmaルールをHayabusaルールに変換するためのSigmaルールのサポートがされています。\n* 現在、他の類似ツールに比べ最も多くのSigmaルールをサポートしており、カウントルール、新しい機能の`|equalsfield`や`|endswithfield`等にも対応しています。\n* コンピュータ名の統計。(イベントの多い特定のコンピュータをフィルタリングするのに便利です。)\n* イベントログの統計。(どのような種類のイベントがあるのかを把握し、ログ設定のチューニングに有効です。)\n* 不良ルールやノイズの多いルールを除外するルールチューニング設定が可能です。\n* MITRE ATT&CKとのマッピング。\n* ルールレベルのチューニング。\n* イベントログから不審なユーザやファイルを素早く特定するためのピボットキーワードの一覧作成。\n* 詳細な調査のために全フィールド情報の出力。\n* 成功と失敗したユーザログオンの要約。\n* [Velociraptor](https://docs.velociraptor.app/)と組み合わせた企業向けの広範囲なすべてのエンドポイントに対するスレットハンティングとDFIR。\n* CSV、JSON、JSONL形式とHTML結果サマリの出力。\n* 毎日のSigmaルール更新。\n* JSON形式のログ入力にも対応。\n* ログフィールドの正規化\n* IPアドレスにGeoIP（ASN、都市、国）情報を付加することによるログエンリッチメント。\n* キーワードや正規表現で全イベントの検索。\n* フィールドデータのマッピング (例: `0xc0000234` -> `ACCOUNT LOCKED`)\n* 空領域からのEvtxレコードカービング。\n* 出力時のイベント重複排除。(レコード復元が有効になっている場合や、バックアップされたevtxファイル、VSSから抽出されたevtxファイルなどが含まれている場合に便利。)\n* スキャン設定ウィザードにより、有効にするルールの選択が容易に。(誤検出を減らすためなど。）\n* PowerShell classicログのフィールドパースと抽出。\n* 低メモリモード。(注意: 結果をソートしないことで可能。エージェントやビッグデータでの実行に適している。)\n* チャンネルとルールのフィルタリングによって最も効率的なパフォーマンスを達成する。\n* ログに含まれるBase64文字列を検出、抽出、デコードする。\n\n# ダウンロード\n\n[Releases](https://github.com/Yamato-Security/hayabusa/releases)ページからHayabusaの安定したバージョンでコンパイルされたバイナリが含まれている最新版もしくはソースコードをダウンロードできます。\n\n以下のアーキテクチャ用のバイナリを提供している：\n- Linux ARM 64-bit GNU (`hayabusa-x.x.x-lin-aarch64-gnu`)\n- Linux Intel 64-bit GNU (`hayabusa-x.x.x-lin-x64-gnu`)\n- Linux Intel 64-bit MUSL (`hayabusa-x.x.x-lin-x64-musl`)\n- macOS ARM 64-bit (`hayabusa-x.x.x-mac-aarch64`)\n- macOS Intel 64-bit (`hayabusa-x.x.x-mac-x64`)\n- Windows ARM 64-bit (`hayabusa-x.x.x-win-aarch64.exe`)\n- Windows Intel 64-bit (`hayabusa-x.x.x-win-x64.exe`)\n- Windows Intel 32-bit (`hayabusa-x.x.x-win-x86.exe`)\n\n> [Linux ARM MUSLバイナリが正常に動作しません](https://github.com/Yamato-Security/hayabusa/issues/1332) そのため、現時点ではそのバイナリを提供していません。これは我々の実装の範囲外の問題なので、修正され次第、将来的に提供する予定です。\n\n## Windowsライブレスポンスパッケージ\n\nv2.18.0から、1つのファイルにまとめたXORエンコードされたルールと、すべての設定ファイルを1つのファイルにまとめた特別なWindowsパッケージを提供しています（[hayabusa-encoded-rules repository](https://github.com/Yamato-Security/hayabusa-encoded-rules)にてホストされています）。\nlive-responseという名前がついたzipパッケージをダウンロードするだけです。\nzipファイルには、Hayabusaのバイナリ、XORエンコードされたルールファイル、設定ファイルの3つのファイルが含まれています。\nこれらのライブレスポンスパッケージの目的は、クライアントのエンドポイントでHayabusaを実行する際に、Windows Defenderのようなウイルス対策スキャナーが.ymlルールファイルに対して誤検知をしないようにするためです。\nまた、USNジャーナルなどのフォレンジックアーティファクトが上書きされないよう、システムに書き込まれるファイルの量を最小限に抑えることも目的としています。\n\n# Gitクローン\n\n以下の`git clone`コマンドでレポジトリをダウンロードし、ソースコードからコンパイルして使用することも可能です:\n\n> **注意：** `main`ブランチは開発中のバージョンです。まだ正式にリリースされていない新機能が使えるかもしれないが、バグがある可能性もあるので、テスト版だと思って下さい。\n\n```bash\ngit clone https://github.com/Yamato-Security/hayabusa.git --recursive\n```\n\n> ※ `--recursive`をつけ忘れた場合、サブモジュールとして管理されている`rules`フォルダ内のファイルはダウンロードされません。\n\n`git pull --recurse-submodules`コマンド、もしくは以下のコマンドで`rules`フォルダを同期し、Hayabusaの最新のルールを更新することができます:\n\n```bash\nhayabusa.exe update-rules\n```\n\nアップデートが失敗した場合は、`rules`フォルダの名前を変更してから、もう一回アップデートしてみて下さい。\n\n>> 注意: アップデートを実行する際に `rules` フォルダは [hayabusa-rules](https://github.com/Yamato-Security/hayabusa-rules) レポジトリの最新のルールとコンフィグファイルに置き換えられます\n>> 既存ファイルへの修正はすべて上書きされますので、アップデート実行前に編集したファイルのバックアップをおすすめします。\n>> もし、`level-tuning` を行っているのであれば、アップデート後にルールファイルの再調整をしてください\n>> `rules`フォルダ内に新しく追加したルールは、アップデート時に上書きもしくは削除は行われません。\n\n# アドバンス: ソースコードからのコンパイル（任意）\n\nRustがインストールされている場合、以下のコマンドでソースコードからコンパイルすることができます:\n\n注意: hayabusaをコンパイルするためにはRust(rustc)が最新版であることが必要です。\n\n```bash\ncargo build --release\n```\n\n最新のunstable版はmainブランチから、最新の安定版は[Releases](https://github.com/Yamato-Security/hayabusa/releases)ページからダウンロードできます。\n\n以下のコマンドで定期的にRustをアップデートしてください：\n\n```bash\nrustup update stable\n```\n\nコンパイルされたバイナリは`./target/release`フォルダ配下で作成されます。\n\n## Rustパッケージの更新\n\nコンパイル前に最新のRust crateにアップデートすることで、最新のライブラリを利用することができます:\n\n```bash\ncargo update\n```\n\n> アップデート後、何か不具合がありましたらお知らせください。\n\n## 32ビットWindowsバイナリのクロスコンパイル\n\n以下のコマンドで64ビットのWindows端末で32ビットのバイナリをクロスコンパイルできます:\n\n```bash\nrustup install stable-i686-pc-windows-msvc\nrustup target add i686-pc-windows-msvc\nrustup run stable-i686-pc-windows-msvc cargo build --release\n```\n\n> **注意: Rust の新しい安定版が出たときには必ず`rustup install stable-i686-pc-windows-msvc`を実行してください。`rustup update stable` はクロスコンパイル用のコンパイラを更新しないので、ビルドエラーが発生することがあります。**\n\n## macOSでのコンパイルの注意点\n\nopensslについてのコンパイルエラーが表示される場合は、[Homebrew](https://brew.sh/)をインストールしてから、以下のパッケージをインストールする必要があります：\n\n```bash\nbrew install pkg-config\nbrew install openssl\n```\n\n## Linuxでのコンパイルの注意点\n\nopensslについてのコンパイルエラーが表示される場合は、以下のパッケージをインストールする必要があります。\n\nUbuntu系のディストロ:\n\n```bash\nsudo apt install libssl-dev\n```\n\nFedora系のディストロ:\n\n```bash\nsudo yum install openssl-devel\n```\n\n## LinuxのMUSLバイナリのクロスコンパイル\n\nまず、Linux OSでターゲットをインストールします。\n\n```bash\nrustup install stable-x86_64-unknown-linux-musl\nrustup target add x86_64-unknown-linux-musl\n```\n\n以下のようにコンパイルします:\n\n```bash\ncargo build --release --target=x86_64-unknown-linux-musl\n```\n\n> **注意: Rust の新しい安定版が出たときには必ず`rustup install stable-x86_64-unknown-linux-musl`を実行してください。`rustup update stable` はクロスコンパイル用のコンパイラを更新しないので、ビルドエラーが発生することがあります。**\n\nMUSLバイナリは`./target/x86_64-unknown-linux-musl/release/`ディレクトリ配下に作成されます。\nMUSLバイナリはGNUバイナリより約15％遅いですが、より多くのLinuxバージョンとディストロで実行できます。\n\n# Hayabusaの実行\n\n## 注意: アンチウィルス/EDRの誤検知と遅い初回実行\n\nHayabusa実行する際や、`.yml`ルールのダウンロードや実行時にルール内でdetectionに不審なPowerShellコマンドや`mimikatz`のようなキーワードが書かれている際に、アンチウィルスやEDRにブロックされる可能性があります。\n誤検知のため、セキュリティ対策の製品がHayabusaを許可するように設定する必要があります。\nマルウェア感染が心配であれば、ソースコードを確認した上で、自分でバイナリをコンパイルして下さい。\n\nWindows PC起動後の初回実行時に時間がかかる場合があります。\nこれはWindows Defenderのリアルタイムスキャンが行われていることが原因です。\nリアルタイムスキャンを無効にするかHayabusaのディレクトリをアンチウィルススキャンから除外することでこの現象は解消しますが、設定を変える前にセキュリティリスクを十分ご考慮ください。\n\n## Windows\n\nコマンドプロンプトやWindows Terminalから32ビットもしくは64ビットのWindowsバイナリをHayabusaのルートディレクトリから実行します。\n\n### パスにスペースが含まれるファイルまたはディレクトリをスキャンしようとするとエラーが発生した場合\n\nWindowsに組み込まれているコマンドプロンプトまたはPowerShellプロンプトを使用する場合、ファイルまたはディレクトリのパスに空白があると、.evtxファイルをロードできないというエラーが表示されることがあります。\n.evtxファイルを正しくロードするために、以下のことを行ってください:\n1. ファイルまたはディレクトリのパスをダブルクォートで囲む。\n2. ディレクトリパスの場合は、最後の文字にバックスラッシュを入れない。\n\n### 文字が正常に表示されない場合\n\nデフォルトのフォントがWindowsの`Lucida Console`の場合、ロゴやテーブルに使用されているさまざまな文字が正しく表示されません。\nフォントを`Consolas`に変更することで、これを修正できます。\n\nこれにより、ほとんどのテキスト表示の問題は修正されますが、終了メッセージに含まれる日本語文字の表示は修正されません。\n\n![文字化け](screenshots/Mojibake.png)\n\n以下の4つのオプションのいずれかで修正できます：\n1. [Windows Terminal](https://learn.microsoft.com/en-us/windows/terminal/)をCommand PromptまたはPowerShellの代わりに使用する。（推奨）\n2. `MS Gothic`フォントを使用する。ただし、バックスラッシュが円記号（¥）に変わることに注意してください。\n   ![文字化けの修正](screenshots/MojibakeFix.png)\n3. [HackGen](https://github.com/yuru7/HackGen/releases)フォントをインストールし、`HackGen Console NF`を使用する。\n4. 日本語を含む終了メッセージを表示しないために、`-q, --quiet`オプションを使用する。\n\n## Linux\n\nまず、バイナリに実行権限を与える必要があります。\n\n```bash\nchmod +x ./hayabusa\n```\n\n次に、Hayabusaのルートディレクトリから実行します：\n\n```bash\n./hayabusa\n```\n\n## macOS\n\nまず、ターミナルやiTerm2からバイナリに実行権限を与える必要があります。\n\n```bash\nchmod +x ./hayabusa\n```\n\n次に、Hayabusaのルートディレクトリから実行してみてください：\n\n```bash\n./hayabusa\n```\n\nmacOSの最新版では、以下のセキュリティ警告が出る可能性があります：\n\n![Mac Error 1 JP](screenshots/MacOS-RunError-1-JP.png)\n\nmacOSの環境設定から「セキュリティとプライバシー」を開き、「一般」タブから「このまま許可」ボタンをクリックしてください。\n\n![Mac Error 2 JP](screenshots/MacOS-RunError-2-JP.png)\n\nその後、ターミナルからもう一回実行してみてください：\n\n```bash\n./hayabusa\n```\n\n以下の警告が出るので、「開く」をクリックしてください。\n\n![Mac Error 3 JP](screenshots/MacOS-RunError-3-JP.png)\n\nこれで実行できるようになります。\n\n# コマンド一覧\n\n## 分析コマンド:\n* `computer-metrics`: コンピュータ名に基づくイベントの合計を出力する。\n* `eid-metrics`: イベントIDに基づくイベントの合計と割合の集計を出力する。\n* `expand-list`: `expand`のプレースホルダを`rules`フォルダから取り出す。\n* `extract-base64`: イベントからbase64文字列を抽出し、デコードする。\n* `logon-summary`: ログオンイベントのサマリを出力する。\n* `log-metrics`: ログファイルの統計情報を出力する。\n* `pivot-keywords-list`: ピボットする不審なキーワードのリストを作成する。\n* `search`: キーワードや正規表現で全イベントの検索。\n\n## DFIRタイムライン作成のコマンド:\n* `csv-timeline`: CSV形式のタイムラインを出力する。\n* `json-timeline`: JSON/JSONL形式のタイムラインを出力する。\n* `level-tuning`: アラート`level`のカスタムチューニング。\n* `list-profiles`: 出力プロファイルの一覧表示。\n* `set-default-profile`: デフォルトプロファイルを変更する。\n* `update-rules`: GitHubの[hayabusa-rules](https://github.com/Yamato-Security/hayabusa-rules)リポジトリにある最新のルールに同期させる。\n\n## 汎用コマンド:\n* `help`: このメッセージまたは指定されたコマンドのヘルプを表示する。\n* `list-contributors`: コントリビュータ一覧の表示。\n\n# コマンド使用方法\n\n## 分析コマンド\n\n### `computer-metrics`コマンド\n\n`computer-metrics`コマンドを使うと、`<System><Computer>`フィールドで定義された各コンピュータに応じたイベントの数をチェックすることができます。\n`Computer`フィールドを完全に頼りにしてイベントを元のコンピュータ別に分けることはできないことに注意してください。\nWindows 11ではイベントログに保存するときにまったく異なる`Computer`の名前を使うことがあります。\nまた、Windows 10では`Computer`の名前がすべて小文字で記録されることもあります。\nこのコマンドは検知ルールを使わないので、すべてのイベントを分析します。\nこのコマンドは、どのコンピュータに最も多くのログが記録されているかを素早く確認するのに適しています。\nこの情報があれば、タイムラインを生成する際に`--include-computer`または`--exclude-computer`オプションを使い、コンピュータ別に複数のタイムラインを生成したり、特定のコンピュータからのイベントを除外したりすることで、タイムライン生成をより効率的にすることができます。\n\n```\nUsage: computer-metrics <INPUT> [OPTIONS]\n\nInput:\n  -d, --directory <DIR>  .evtxファイルを持つディレクトリのパス\n  -f, --file <FILE>      1つの.evtxファイルに対して解析を行う\n  -l, --live-analysis    ローカル端末のC:\\Windows\\System32\\winevt\\Logsフォルダを解析する\n\nGeneral Options:\n  -C, --clobber                        結果ファイルを上書きする\n  -h, --help                           ヘルプメニューを表示する\n  -J, --JSON-input                     .evtxファイルの代わりにJSON形式のログファイル(.jsonまたは.jsonl)をスキャンする\n  -Q, --quiet-errors                   Quiet errorsモード: エラーログを保存しない\n  -x, --recover-records                空ページからevtxレコードをカービングする (デフォルト: 無効)\n  -c, --rules-config <DIR>             ルールフォルダのコンフィグディレクトリ (デフォルト: ./rules/config)\n  -t, --threads <NUMBER>               スレッド数 (デフォルト: パフォーマンスに最適な数値)\n      --target-file-ext <FILE-EXT...>  evtx以外の拡張子を解析対象に追加する。 (例１: evtx_data 例２: evtx1,evtx2)\n\nFiltering:\n      --time-offset <OFFSET>      オフセットに基づく最近のイベントのスキャン (例: 1y, 3M, 30d, 24h, 30m)\n\nOutput:\n  -o, --output <FILE>  イベントIDに基づくイベントの合計と割合の集計を出力する (例: computer-metrics.csv)\n\nDisplay Settings:\n  -K, --no-color  カラーで出力しない\n  -q, --quiet     Quietモード: 起動バナーを表示しない\n  -v, --verbose   詳細な情報を出力する               \n```\n\n#### `computer-metrics`コマンドの使用例\n\n* ディレクトリに対してイベントIDの統計情報を出力する: `hayabusa.exe computer-metrics -d ../logs`\n* 結果をCSVファイルに保存する: `hayabusa.exe computer-metrics -d ../logs -o computer-metrics.csv`\n\n#### `computer-metrics`のスクリーンショット\n\n![computer-metrics screenshot](screenshots/ComputerMetrics.png)\n\n### `eid-metrics`コマンド\n\n`eid-metrics`コマンドを使用すると、イベントID(`<System><EventID>`フィールド)の総数や割合をチャンネルごとに分けて表示することができます。\nこのコマンドは検知ルールを使用しないので、すべてのイベントをスキャンします。\n\n```\nUsage: eid-metrics <INPUT> [OPTIONS]\n\nInput:\n  -d, --directory <DIR>        .evtxファイルを持つディレクトリのパス\n  -f, --file <FILE>            1つの.evtxファイルに対して解析を行う\n  -l, --live-analysis          ローカル端末のC:\\Windows\\System32\\winevt\\Logsフォルダを解析する\n\nGeneral Options:\n  -C, --clobber                        結果ファイルを上書きする\n  -h, --help                           ヘルプメニューを表示する\n  -J, --JSON-input                     .evtxファイルの代わりにJSON形式のログファイル(.jsonまたは.jsonl)をスキャンする\n  -Q, --quiet-errors                   Quiet errorsモード: エラーログを保存しない\n  -x, --recover-records                空ページからevtxレコードをカービングする (デフォルト: 無効)\n  -c, --rules-config <DIR>             ルールフォルダのコンフィグディレクトリ (デフォルト: ./rules/config)\n  -t, --threads <NUMBER>               スレッド数 (デフォルト: パフォーマンスに最適な数値)\n      --target-file-ext <FILE-EXT...>  evtx以外の拡張子を解析対象に追加する。 (例１: evtx_data 例２: evtx1,evtx2)\n\nFiltering:\n      --exclude-computer <COMPUTER...>  特定のコンピュータ名をスキャンしない (例: ComputerA) (例: ComputerA,ComputerB)\n      --include-computer <COMPUTER...>  特定のコンピュータ名のみをスキャンする (例: ComputerA) (例: ComputerA,ComputerB)\n      --time-offset <OFFSET>            オフセットに基づく最近のイベントのスキャン (例: 1y, 3M, 30d, 24h, 30m)\n\nOutput:\n  -b, --disable-abbreviations 省略機能を無効にする\n  -o, --output <FILE>  イベントIDに基づくイベントの合計と割合の集計を出力する (例: eid-metrics.csv)\n\nDisplay Settings:\n  -K, --no-color  カラーで出力しない\n  -q, --quiet     Quietモード: 起動バナーを表示しない\n  -v, --verbose   詳細な情報を出力する\n\nTime Format:\n      --European-time     ヨーロッパ形式で日付と時刻を出力する (例: 22-02-2022 22:00:00.123 +02:00)\n  -O, --ISO-8601          ISO-8601形式で日付と時刻を出力する (例: 2022-02-22T10:10:10.1234567Z) (UTC時刻)\n      --RFC-2822          RFC 2822形式で日付と時刻を出力する (例: Fri, 22 Feb 2022 22:00:00 -0600)\n      --RFC-3339          RFC 3339形式で日付と時刻を出力する (例: 2022-02-22 22:00:00.123456-06:00)\n      --US-military-time  24時間制(ミリタリータイム)のアメリカ形式で日付と時刻を出力する (例: 02-22-2022 22:00:00.123 -06:00)\n      --US-time           アメリカ形式で日付と時刻を出力する (例: 02-22-2022 10:00:00.123 PM -06:00)\n  -U, --UTC               UTC形式で日付と時刻を出力する (デフォルト: 現地時間)\n```\n\n#### `eid-metrics`コマンドの使用例\n\n* 一つのファイルに対してイベントIDの統計情報を出力する: `hayabusa.exe eid-metrics -f Security.evtx`\n* ディレクトリに対してイベントIDの統計情報を出力する: `hayabusa.exe eid-metrics -d ../logs`\n* 結果をCSVファイルに保存する: `hayabusa.exe eid-metrics -f Security.evtx -o eid-metrics.csv`\n\n#### `eid-metrics`コマンドの設定ファイル\n\nチャンネル名、イベントID、イベントのタイトルは、`rules/config/channel_eid_info.txt`で定義されています。\n\n例:\n```\nChannel,EventID,EventTitle\nMicrosoft-Windows-Sysmon/Operational,1,Process Creation.\nMicrosoft-Windows-Sysmon/Operational,2,File Creation Timestamp Changed. (Possible Timestomping)\nMicrosoft-Windows-Sysmon/Operational,3,Network Connection.\nMicrosoft-Windows-Sysmon/Operational,4,Sysmon Service State Changed.\n```\n\n#### `eid-metrics`のスクリーンショット\n\n![eid-metrics screenshot](screenshots/EID-Metrics.png)\n\n### `expand-list`コマンド\n\nルールフォルダから`expand`プレースホルダーを抽出します。\nこれは、`expand`フィールド修飾子を使用するルールで利用する設定ファイルを作成する際に役立ちます。\n`expand`ルールを使用するには、`./config/expand/`ディレクトリ内に`expand`フィールド修飾子の名前を持つ.txtファイルを作成し、そのファイル内に確認したい値をすべて入力するだけです。\n\n例えば、ルールの`detection`ロジックが次のような場合:\n```yaml\ndetection:\n    selection:\n        EventID: 5145\n        RelativeTargetName|contains: '\\winreg'\n    filter_main:\n        IpAddress|expand: '%Admins_Workstations%'\n    condition: selection and not filter_main\n```\n\nテキストファイル `./config/expand/Admins_Workstations.txt` を作成し、次のような値を入力します:\n```\nAdminWorkstation1\nAdminWorkstation2\nAdminWorkstation3\n```\n\nこれは本質的に次のロジックと同じ内容を確認します:\n```\n- IpAddress: 'AdminWorkstation1'\n- IpAddress: 'AdminWorkstation2'\n- IpAddress: 'AdminWorkstation3'\n```\n\n設定ファイルが存在しない場合でも、Hayabusaは`expand`ルールを読み込みますが、それを無視します。\n\n```\nUsage:  expand-list <INPUT> [OPTIONS]\n\nGeneral Options:\n  -h, --help              ヘルプメニューを表示する\n  -r, --rules <DIR/FILE>  ルールファイルまたはルールファイルを持つディレクトリ (デフォルト: ./rules)\n\nDisplay Settings:\n  -K, --no-color  カラーで出力しない\n  -q, --quiet     Quietモード: 起動バナーを表示しない\n```\n\n#### `expand-list`コマンドの使用例\n\n* デフォルトの`rules`ディレクトリから`expand`フィールド修飾子を抽出する：`hayabusa.exe expand-list`\n* `sigma`ディレクトリから`expand`フィールド修飾子を抽出する：`hayabusa.exe eid-metrics -r ../sigma`\n\n#### `expand-list`結果\n\n```\n5 unique expand placeholders found:\nAdmins_Workstations\nDC-MACHINE-NAME\nWorkstations\ninternal_domains\ndomain_controller_hostnames\n```\n\n### `extract-base64`コマンド\n\nこのコマンドは、次のイベントからBase64文字列を抽出し、それをデコードして、どのようなエンコードが使用されているかを判別します。\n* Security 4688 CommandLine\n* Sysmon 1 CommandLine, ParentCommandLine\n* PowerShell Operational 4104\n* PowerShell Operational 4103\n\n```\nUsage:  extract-base64 <INPUT> [OPTIONS]\n\nInput:\n  -d, --directory <DIR>  .evtxファイルを持つディレクトリのパス\n  -f, --file <FILE>      1つの.evtxファイルに対して解析を行う\n  -l, --live-analysis    ローカル端末のC:\\Windows\\System32\\winevt\\Logsフォルダを解析する\n\nGeneral Options:\n  -C, --clobber                        結果ファイルを上書きする\n  -h, --help                           ヘルプメニューを表示する\n  -J, --JSON-input                     .evtxファイルの代わりにJSON形式のログファイル(.jsonまたは.jsonl)をスキャンする\n  -Q, --quiet-errors                   Quiet errorsモード: エラーログを保存しない\n  -x, --recover-records                空ページからevtxレコードをカービングする (デフォルト: 無効)\n  -c, --rules-config <DIR>             ルールフォルダのコンフィグディレクトリ (デフォルト: ./rules/config)\n  -t, --threads <NUMBER>               スレッド数 (デフォルト: パフォーマンスに最適な数値)\n      --target-file-ext <FILE-EXT...>  evtx以外の拡張子を解析対象に追加する。 (例１: evtx_data 例２: evtx1,evtx2)\n\nFiltering:\n      --exclude-computer <COMPUTER...>  特定のコンピュータ名をスキャンしない (例: ComputerA) (例: ComputerA,ComputerB)\n      --include-computer <COMPUTER...>  特定のコンピュータ名のみをスキャンする (例: ComputerA) (例: ComputerA,ComputerB)\n      --time-offset <OFFSET>            オフセットに基づく最近のイベントのスキャン (例: 1y, 3M, 30d, 24h, 30m)\n\nOutput:\n  -o, --output <FILE>  Base64文字列を抽出する\n\nDisplay Settings:\n  -K, --no-color  カラーで出力しない\n  -q, --quiet     Quietモード: 起動バナーを表示しない\n  -v, --verbose   詳細な情報を出力する\n\nTime Format:\n      --European-time     ヨーロッパ形式で日付と時刻を出力する (例: 22-02-2022 22:00:00.123 +02:00)\n  -O, --ISO-8601          ISO-8601形式で日付と時刻を出力する (例: 2022-02-22T10:10:10.1234567Z) (UTC時刻)\n      --RFC-2822          RFC 2822形式で日付と時刻を出力する (例: Fri, 22 Feb 2022 22:00:00 -0600)\n      --RFC-3339          RFC 3339形式で日付と時刻を出力する (例: 2022-02-22 22:00:00.123456-06:00)\n      --US-military-time  24時間制(ミリタリータイム)のアメリカ形式で日付と時刻を出力する (例: 02-22-2022 22:00:00.123 -06:00)\n      --US-time           アメリカ形式で日付と時刻を出力する (例: 02-22-2022 10:00:00.123 PM -06:00)\n  -U, --UTC               UTC形式で日付と時刻を出力する (デフォルト: 現地時間)\n```\n\n#### `extract-base64`コマンドの使用例\n\n* ディレクトリをスキャンし、結果をターミナルに出力します: `hayabusa.exe  extract-base64 -d ../hayabusa-sample-evtx`\n* ディレクトリをスキャンし、結果をCSVファイルに出力します: `hayabusa.exe eid-metrics -r ../sigma -o base64-extracted.csv`\n\n#### `extract-base64`の結果\n\nターミナルに出力する際、スペースに制限があるため、次のフィールドのみが表示されます：\n  * Timestamp\n  * Computer\n  * Base64 String\n  * Decoded String (if not binary)\n\nCSVファイルに保存する際、次のフィールドが保存されます：\n  * Timestamp\n  * Computer\n  * Base64 String\n  * Decoded String (if not binary)\n  * Original Field\n  * Length\n  * Binary (`Y/N`)\n  * Double Encoding (`Y`の場合、それは通常悪意があります。)\n  * Encoding Type\n  * File Type\n  * Event\n  * Record ID\n  * File Name\n\n### `log-metrics`コマンド\n\n`log-metrics`コマンドを使うと、イベントログ内の以下のメタデータを出力することができる:\n* ファイル名\n* コンピュータ名\n* イベント数\n* 最初のタイムスタンプ\n* 最後のタイムスタンプ\n* チャネル\n* プロバイダー\n\nこのコマンドは検知ルールを使用しないので、すべてのイベントをスキャンする。\n\n```\nUsage: log-metrics <INPUT> [OPTIONS]\n\nInput:\n  -d, --directory <DIR>        .evtxファイルを持つディレクトリのパス\n  -f, --file <FILE>            1つの.evtxファイルに対して解析を行う\n  -l, --live-analysis          ローカル端末のC:\\Windows\\System32\\winevt\\Logsフォルダを解析する\n\nGeneral Options:\n  -C, --clobber                        結果ファイルを上書きする\n  -h, --help                           ヘルプメニューを表示する\n  -J, --JSON-input                     .evtxファイルの代わりにJSON形式のログファイル(.jsonまたは.jsonl)をスキャンする\n  -Q, --quiet-errors                   Quiet errorsモード: エラーログを保存しない\n  -x, --recover-records                空ページからevtxレコードをカービングする (デフォルト: 無効)\n  -c, --rules-config <DIR>             ルールフォルダのコンフィグディレクトリ (デフォルト: ./rules/config)\n  -t, --threads <NUMBER>               スレッド数 (デフォルト: パフォーマンスに最適な数値)\n      --target-file-ext <FILE-EXT...>  evtx以外の拡張子を解析対象に追加する。 (例１: evtx_data 例２: evtx1,evtx2)\n\nFiltering:\n      --exclude-computer <COMPUTER...>  特定のコンピュータ名をスキャンしない (例: ComputerA) (例: ComputerA,ComputerB)\n      --include-computer <COMPUTER...>  特定のコンピュータ名のみをスキャンする (例: ComputerA) (例: ComputerA,ComputerB)\n      --time-offset <OFFSET>            オフセットに基づく最近のイベントのスキャン (例: 1y, 3M, 30d, 24h, 30m)\n\nOutput:\n  -b, --disable-abbreviations  省略機能を無効にする\n  -M, --multiline              イベントフィールド情報を複数の行に出力する\n  -o, --output <FILE>          メトリクスをCSV形式で保存する (例: metrics.csv)\n\nDisplay Settings:\n  -K, --no-color  カラーで出力しない\n  -q, --quiet     Quietモード: 起動バナーを表示しない\n  -v, --verbose   詳細な情報を出力する\n\nTime Format:\n      --European-time     ヨーロッパ形式で日付と時刻を出力する (例: 22-02-2022 22:00:00.123 +02:00)\n  -O, --ISO-8601          ISO-8601形式で日付と時刻を出力する (例: 2022-02-22T10:10:10.1234567Z) (UTC時刻)\n      --RFC-2822          RFC 2822形式で日付と時刻を出力する (例: Fri, 22 Feb 2022 22:00:00 -0600)\n      --RFC-3339          RFC 3339形式で日付と時刻を出力する (例: 2022-02-22 22:00:00.123456-06:00)\n      --US-military-time  24時間制(ミリタリータイム)のアメリカ形式で日付と時刻を出力する (例: 02-22-2022 22:00:00.123 -06:00)\n      --US-time           アメリカ形式で日付と時刻を出力する (例: 02-22-2022 10:00:00.123 PM -06:00)\n  -U, --UTC               UTC形式で日付と時刻を出力する (デフォルト: 現地時間)\n```\n\n#### `log-metrics`コマンドの使用例\n\n* ファイルからログファイルのメトリクスを出力する: `hayabusa.exe log-metrics -f Security.evtx`\n* ディレクトリからログファイルのメトリクスを出力する: `hayabusa.exe log-metrics -d ../logs`\n* 結果をCSVファイルに保存: `hayabusa.exe log-metrics -d ../logs -o eid-metrics.csv`\n\n#### `log-metrics`のスクリーンショット\n\n![log-metricsスクリーンショット](screenshots/LogMetrics.png)\n\n### `logon-summary`コマンド\n\n`logon-summary`コマンドを使うことでログオン情報の要約(ユーザ名、ログイン成功数、ログイン失敗数)の画面出力ができます。\n単体のevtxファイルを解析したい場合は`-f`オプションを利用してください。複数のevtxファイルを対象としたい場合は`-d`オプションを合わせて使うことでevtxファイルごとのログイン情報の要約を出力できます。\n\nログオン成功は、以下のイベントから取得される:\n* `Security 4624` (ログオン成功)\n* `RDS-LSM 21` (リモートデスクトップサービス ローカルセッションマネージャーのログオン)\n* `RDS-GTW 302` (リモートデスクトップサービス ゲートウェイのログオン)\n\nログオン失敗は、`Security 4625`イベントから取得される\n\n```\nUsage: logon-summary <INPUT> [OPTIONS]\n\nInput:\n  -d, --directory <DIR>        .evtxファイルを持つディレクトリのパス\n  -f, --file <FILE>            1つの.evtxファイルに対して解析を行う\n  -l, --live-analysis          ローカル端末のC:\\Windows\\System32\\winevt\\Logsフォルダを解析する\n\nGeneral Options:\n  -C, --clobber                        結果ファイルを上書きする\n  -h, --help                           ヘルプメニューを表示する\n  -J, --JSON-input                     .evtxファイルの代わりにJSON形式のログファイル(.jsonまたは.jsonl)をスキャンする\n  -Q, --quiet-errors                   Quiet errorsモード: エラーログを保存しない\n  -x, --recover-records                空ページからevtxレコードをカービングする (デフォルト: 無効)\n  -c, --rules-config <DIR>             ルールフォルダのコンフィグディレクトリ (デフォルト: ./rules/config)\n  -t, --threads <NUMBER>               スレッド数 (デフォルト: パフォーマンスに最適な数値)\n      --target-file-ext <FILE-EXT...>  evtx以外の拡張子を解析対象に追加する (例１: evtx_data 例２:evtx1,evtx2)\n\nFiltering:\n      --exclude-computer <COMPUTER...>  特定のコンピュータ名をスキャンしない (例: ComputerA) (例: ComputerA,ComputerB)\n      --include-computer <COMPUTER...>  特定のコンピュータ名のみをスキャンする (例: ComputerA) (例: ComputerA,ComputerB)\n      --timeline-end <DATE>             解析対象とするイベントログの終了時刻 (例: \"2022-02-22 23:59:59 +09:00\")\n      --time-offset <OFFSET>            オフセットに基づく最近のイベントのスキャン (例: 1y, 3M, 30d, 24h, 30m)\n      --timeline-start <DATE>           解析対象とするイベントログの開始時刻 (例: \"2020-02-22 00:00:00 +09:00\")\n\nOutput:\n  -o, --output <FILENAME-PREFIX>  ログオンサマリをCSV形式で２つのファイルに保存する (例: -o logon-summary.csv)\n\nDisplay Settings:\n  -K, --no-color  カラーで出力しない\n  -q, --quiet     Quietモード: 起動バナーを表示しない\n  -v, --verbose   詳細な情報を出力する\n\nTime Format:\n      --European-time     ヨーロッパ形式で日付と時刻を出力する (例: 22-02-2022 22:00:00.123 +02:00)\n  -O, --ISO-8601          ISO-8601形式で日付と時刻を出力する (例: 2022-02-22T10:10:10.1234567Z) (UTC時刻)\n      --RFC-2822          RFC 2822形式で日付と時刻を出力する (例: Fri, 22 Feb 2022 22:00:00 -0600)\n      --RFC-3339          RFC 3339形式で日付と時刻を出力する (例: 2022-02-22 22:00:00.123456-06:00)\n      --US-military-time  24時間制(ミリタリータイム)のアメリカ形式で日付と時刻を出力する (例: 02-22-2022 22:00:00.123 -06:00)\n      --US-time           アメリカ形式で日付と時刻を出力する (例: 02-22-2022 10:00:00.123 PM -06:00)\n  -U, --UTC               UTC形式で日付と時刻を出力する (デフォルト: 現地時間)\n```\n\n#### `logon-summary`コマンドの使用例\n\n* ログオンサマリの出力: `hayabusa.exe logon-summary -f Security.evtx`\n* ログオンサマリ結果を保存する: `hayabusa.exe logon-summary -d ../logs -o logon-summary.csv`\n\n#### `logon-summary`のスクリーンショット\n\n![logon-summary successful logons screenshot](screenshots/LogonSummarySuccessfulLogons.png)\n\n![logon-summary failed logons screenshot](screenshots/LogonSummaryFailedLogons.png)\n\n### `pivot-keywords-list`コマンド\n\n`pivot-keywords-list`コマンドを使用すると、異常なユーザ、ホスト名、プロセスなどを迅速に特定し、イベントを関連付けるための固有のピボットキーワードのリストを作成することができます。\n\n重要：デフォルトでは、Hayabusaはすべてのイベント（informationalおよびそれ以上）から結果を返すので、`pivot-keywords-list`コマンドと`-m, --min-level`オプションを組み合わせることを強くお勧めします。\n例えば、まず`-m critical`で`critical`アラートのみのキーワードを作成し、次に`-m high`、`-m medium`等々と続けていきます。\n検索結果には、多くの通常のイベントと一致する共通のキーワードが含まれている可能性が高いので、検索結果を手動でチェックし、固有のキーワードのリストを1つのファイルに作成した後、`grep -f keywords.txt timeline.csv`といったコマンドで疑わしい活動のタイムラインを絞り込み作成することが可能です。\n\n```\nUsage: pivot-keywords-list <INPUT> [OPTIONS]\n\nInput:\n  -d, --directory <DIR>        .evtxファイルを持つディレクトリのパス\n  -f, --file <FILE>            1つの.evtxファイルに対して解析を行う\n  -l, --live-analysis          ローカル端末のC:\\Windows\\System32\\winevt\\Logsフォルダを解析する\n\nGeneral Options:\n  -C, --clobber                        結果ファイルを上書きする\n  -h, --help                           ヘルプメニューを表示する\n  -J, --JSON-input                     .evtxファイルの代わりにJSON形式のログファイル(.jsonまたは.jsonl)をスキャンする\n  -w, --no-wizard                      質問はしない。すべてのイベントとアラートをスキャンする\n  -Q, --quiet-errors                   Quiet errorsモード: エラーログを保存しない\n  -x, --recover-records                空ページからevtxレコードをカービングする (デフォルト: 無効)\n  -c, --rules-config <DIR>             ルールフォルダのコンフィグディレクトリ (デフォルト: ./rules/config)\n  -t, --threads <NUMBER>               スレッド数 (デフォルト: パフォーマンスに最適な数値)\n      --target-file-ext <FILE-EXT...>  evtx以外の拡張子を解析対象に追加する。 (例１: evtx_data 例２: evtx1,evtx2)\n\nFiltering:\n  -E, --EID-filter                      速度を上げるため主なEIDだけスキャンする (コンフィグファイル: ./rules/config/target_event_IDs.txt)\n  -D, --enable-deprecated-rules         ステータスがdeprecatedのルールを有効にする\n  -n, --enable-noisy-rules              Noisyルールを有効にする\n  -u, --enable-unsupported-rules        ステータスがunsupportedのルールを有効にする\n  -e, --exact-level <LEVEL>             特定のレベルだけスキャンする (informational, low, medium, high, critical)\n      --exclude-computer <COMPUTER...>  特定のコンピュータ名をスキャンしない (例: ComputerA) (例: ComputerA,ComputerB)\n      --exclude-eid <EID...>            高速化のために特定のEIDをスキャンしない (例: 1) (例: 1,4688)\n      --exclude-status <STATUS...>      読み込み対象外とするルール内でのステータス (例１: experimental) (例２: stable,test)\n      --include-computer <COMPUTER...>  特定のコンピュータ名のみをスキャンする (例: ComputerA) (例: ComputerA,ComputerB)\n      --exclude-tag <TAG...>            特定のタグを持つルールをロードしない (例: sysmon)\n      --include-eid <EID...>            指定したEIDのみをスキャンして高速化する (例 1) (例: 1,4688)\n      --include-status <STATUS...>      特定のステータスを持つルールのみをロードする (例: expermimental) (例: stable,test)\n      --include-tag <TAG...>            特定のタグを持つルールのみをロードする (例１: attack.execution,attack.discovery) (例２: wmi)\n  -m, --min-level <LEVEL>               結果出力をするルールの最低レベル (デフォルト: informational)\n      --timeline-end <DATE>             解析対象とするイベントログの終了時刻 (例: \"2022-02-22 23:59:59 +09:00\")\n      --time-offset <OFFSET>            オフセットに基づく最近のイベントのスキャン (例: 1y, 3M, 30d, 24h, 30m)\n      --timeline-start <DATE>           解析対象とするイベントログの開始時刻 (例: \"2020-02-22 00:00:00 +09:00\")\n\nOutput:\n  -o, --output <FILENAME-PREFIX>  ピボットキーワードの一覧を複数ファイルに出力する (例: PivotKeywords)\n\nDisplay Settings:\n  -K, --no-color  カラーで出力しない\n  -q, --quiet     Quietモード: 起動バナーを表示しない\n  -v, --verbose   詳細な情報を出力する               \n```\n\n#### `pivot-keywords-list`コマンドの使用例\n\n* ピボットキーワードを画面に出力します: `hayabusa.exe pivot-keywords-list -d ../logs -m critical`\n* 重要なアラートからピボットキーワードのリストを作成し、その結果を保存します。(結果は、`keywords-Ip Addresses.txt`、`keywords-Users.txt`等に保存されます):\n\n```\nhayabusa.exe pivot-keywords-list -d ../logs -m critical -o keywords\n```\n\n#### `pivot-keywords-list`の設定ファイル\n\n検索キーワードは、`./rules/config/pivot_keywords.txt`を編集することでカスタマイズすることができます。\nデフォルト設定は[こちらのページ](https://github.com/Yamato-Security/hayabusa-rules/blob/main/config/pivot_keywords.txt)です。\n\n\nフォーマットは、`キーワード名.フィールド名`です。例えば、`Users`のリストを作成する場合、Hayabusaは、`SubjectUserName`、`TargetUserName`、`User`フィールドにあるすべての値をリストアップします。\n\n\n### `search`コマンド\n\n`search`コマンドは、すべてのイベントのキーワード検索が可能です。\n(※Hayabusaの検知結果だけではありません。）\nHayabusaの検知ルールでなにかの痕跡を検知できなくても、検索機能で検知できる可能性があるので、便利です。\n\n```\nUsage: hayabusa.exe search <INPUT> <--keywords \"<KEYWORDS>\" OR --regex \"<REGEX>\"> [OPTIONS]\n\nDisplay Settings:\n  -K, --no-color  カラーで出力しない\n  -q, --quiet     Quietモード: 起動バナーを表示しない\n  -v, --verbose   詳細な情報を出力する\n\nGeneral Options:\n  -C, --clobber                          結果ファイルを上書きする\n  -h, --help                             ヘルプメニューを表示する\n  -Q, --quiet-errors                     Quiet errorsモード: エラーログを保存しない\n  -x, --recover-records                  空ページからevtxレコードをカービングする (デフォルト: 無効)\n  -c, --rules-config <DIR>               ルールフォルダのコンフィグディレクトリ (デフォルト: ./rules/config)\n  -t, --threads <NUMBER>                 スレッド数 (デフォルト: パフォーマンスに最適な数値)\n      --target-file-ext <FILE-EXT...>    evtx以外の拡張子を解析対象に追加する (例１: evtx_data 例２:evtx1,evtx2)\n\nInput:\n  -d, --directory <DIR>        .evtxファイルを持つディレクトリのパス\n  -f, --file <FILE>            1つの.evtxファイルに対して解析を行う\n  -l, --live-analysis          ローカル端末のC:\\Windows\\System32\\winevt\\Logsフォルダを解析する\n  \nFiltering:\n  -a, --and-logic                    ANDロジックでキーワード検索を行う (デフォルト: OR)\n  -F, --filter <FILTER...>           特定のフィールドでフィルタする\n  -i, --ignore-case                  大文字と小文字を区別しない\n  -k, --keywords <KEYWORD...>        キーワードでの検索\n  -r, --regex <REGEX>                正規表現での検索\n      --time-offset <OFFSET>         オフセットに基づく最近のイベントのスキャン (例: 1y, 3M, 30d, 24h, 30m)\n\nOutput:\n  -b, --disable-abbreviations        省略機能を無効にする\n  -J, --JSON-output                  JSON形式で検索結果を保存する (例: -J -o results.json)\n  -L, --JSONL-output                 JSONL形式で検索結果を保存 (例: -L -o results.jsonl)\n  -M, --multiline                    イベントフィールド情報を複数の行に出力する\n  -o, --output <FILE>                ログオンサマリをCSV形式で保存する (例: search.csv)\n\nTime Format:\n      --European-time     ヨーロッパ形式で日付と時刻を出力する (例: 22-02-2022 22:00:00.123 +02:00)\n  -O, --ISO-8601          ISO-8601形式で日付と時刻を出力する (例: 2022-02-22T10:10:10.1234567Z) (UTC時刻)\n      --RFC-2822          RFC 2822形式で日付と時刻を出力する (例: Fri, 22 Feb 2022 22:00:00 -0600)\n      --RFC-3339          RFC 3339形式で日付と時刻を出力する (例: 2022-02-22 22:00:00.123456-06:00)\n      --US-military-time  24時間制(ミリタリータイム)のアメリカ形式で日付と時刻を出力する (例: 02-22-2022 22:00:00.123 -06:00)\n      --US-time           アメリカ形式で日付と時刻を出力する (例: 02-22-2022 10:00:00.123 PM -06:00)\n  -U, --UTC               UTC形式で日付と時刻を出力する (デフォルト: 現地時間)\n```\n\n#### `search`コマンドの使用例\n\n* `../hayabusa-sample-evtx`ディレクトリで`mimikatz`のキーワードを検索する:\n\n```\nhayabusa.exe search -d ../hayabusa-sample-evtx -k \"mimikatz\"\n```\n\n> 注意: `mimikatz`のキーワードがデータ内のどこかに存在する場合にマッチする。完全一致しなくても良い。\n\n* `../hayabusa-sample-evtx`ディレクトリで`mimikatz`または`kali`のキーワードを検索する:\n\n```\nhayabusa.exe search -d ../hayabusa-sample-evtx -k \"mimikatz\" -k \"kali\"\n```\n\n* `../hayabusa-sample-evtx`ディレクトリで大文字小文字を区別せずに`mimikatz`のキーワードを検索する:\n\n```\nhayabusa.exe search -d ../hayabusa-sample-evtx -k \"mimikatz\" -i\n```\n\n* `../hayabusa-sample-evtx`ディレクトリで正規表現を使用し、IPアドレスを検索する:\n\n```\nhayabusa.exe search -d ../hayabusa-sample-evtx -r \"(?:[0-9]{1,3}\\.){3}[0-9]{1,3}\"\n```\n\n* `../hayabusa-sample-evtx`ディレクトリで`WorkstationName`フィールドが`kali`の条件で、全イベントを表示する:\n\n```\nhayabusa.exe search -d ../hayabusa-sample-evtx -r \".*\" -F WorkstationName:\"kali\"\n```\n\n> ※ `.*`の正規表現を使用すると、すべてのイベントが表示される。\n\n#### `search`の設定ファイル\n\n`./rules/config/channel_abbreviations.txt`: チャンネル名とその略称のマッピング。\n\n\n## DFIRタイムラインコマンド\n\n### スキャンウィザード\n\n`csv-timeline`や`json-timeline`などのコマンドは、デフォルトでスキャンウィザードが有効になりました。\nこれは、ユーザのニーズや好みに応じて、どの検知ルールを有効にするかを簡単に選択できるようにするためのものであります。\n読み込む検知ルールのセットは、Sigmaプロジェクトの公式リストに基づいています。\n詳細は[このブログ記事](https://blog.sigmahq.io/introducing-sigma-rule-packages-releases-76043ce42e81)で説明されています。\n`w, --no-wizard`オプションを追加することで、簡単にウィザードを無効にし、従来の方法でHayabusaを使用できます。\n\n#### Core ルール\n\n`core`ルールセットは、ステータスが`test`または`stable`かつ、レベルが`high`または`critical`のルールを有効にします。\nこれらは高品質のルールで、多くの誤検知は発生しないはずです。\nルールのステータスが`test`または`stable`であるため、6ヶ月以上の間に誤検知が報告されていません。\nルールは攻撃者の戦術、一般的な不審なアクティビティ、または悪意のある振る舞いに一致します。\nこれは`--exclude-status deprecated,unsupported,experimental --min-level high`オプションを使用した場合と同じです。\n\n#### Core+ ルール\n\n`core+`ルールセットは、ステータスが`test`または`stable`かつ、レベルが`medium`以上のルールを有効にします。\n`medium`ルールは、しばしば特定のアプリケーション、正当なユーザーの行動、または組織のスクリプトと一致するため、追加のチューニングが必要です。\nこれは`--exclude-status deprecated,unsupported,experimental --min-level medium`オプションを使用した場合と同じです。\n\n#### Core++ ルール\n\n`core++`ルールセットは、ステータスが`experimental`、`test`、`stable`のいずれかかつ、レベルが`medium`以上のルールを有効にします。\nこれらのルールは最先端のものです。\nこれらはSigmaHQプロジェクトで提供されているベースラインのevtxファイルに対して検証され、複数のエンジニアによってレビューされています。\nそれ以外最初は、ほとんどテストされていません。\nこれらは、できるだけ早く脅威を検出できる場合に使用しますが、誤検知のしきい値を高く保つのにコストがかかります。\nこれは`--exclude-status deprecated,unsupported --min-level medium`オプションを使用した場合と同じです。\n\n#### Emerging Threats (ET) アドオンルール\n\n`Emerging Threats (ET)`ルールセットは、`detection.emerging_threats`のタグを持つルールを有効にします。\nこれらのルールは特定の脅威を対象とし、情報がまだほとんど入手できていない現在の脅威に特に役立ちます。\nこれらのルールは多くの誤検知を生成しないはずですが、時間とともに関連性が低下します。\nこれらのルールが無効になっている場合、`--exclude-tag detection.emerging_threats`オプションを使用した場合と同じです。\nウィザードを無効にしてHayabusaを従来の方法で実行する場合、これらのルールはデフォルトで含まれます。\n\n#### Threat Hunting (TH) アドオンルール\n\n`Threat Hunting (TH)`ルールセットは、`detection.threat_hunting`のタグを持つルールを有効にします。\nこれらのルールは未知の悪意のあるアクティビティを検出するかもしれませんが、通常は誤検知が多くなります。\nこれらのルールが無効になっている場合、`--exclude-tag detection.threat_hunting`オプションを使用した場合と同じです。\nウィザードを無効にしてHayabusaを従来の方法で実行する場合、これらのルールはデフォルトで含まれます。\n\n### Channelベースのイベントログとルールフィルタリング\n\nHayabusa v2.16.0以降、`.evtx`ファイルと`.yml`ルールを読み込む際にチャンネルベースのフィルタを有効にしています。\nこれは、必要なものだけを読み込むことで、スキャンを可能な限り効率的に行うことを目的としています。\n単一のイベントログ内に複数のプロバイダが存在することはありますが、単一の.evtxファイル内に複数のチャンネルが含まれることは一般的ではありません。\n（これまで見かけた唯一の例は、異なる2つの.evtxファイルを人工的に結合した[sample-evtx](https://github.com/Yamato-Security/hayabusa-sample-evtx)プロジェクトです。）\nこの特性を利用して、スキャン対象のすべての`.evtx`ファイルの最初のレコードで`Channel`フィールドを確認します。\nまた、ルールの`Channel`フィールドに指定されたチャンネルを使用する`.yml`ルールも確認します。\nこの2つのリストを基に、実際に`.evtx`ファイル内に存在するチャンネルを使用するルールだけを読み込みます。\n\n例えば、ユーザーが`Security.evtx`をスキャンしたい場合、`Channel: Security`を指定しているルールのみが使用されます。\n他の検出ルール、例えば`Application`ログのイベントのみを検出するルールなどを読み込む意味はありません。\nなお、チャンネルフィールド（例: `Channel: Security`）は、元のSigmaルールには**明示的**に定義されていません。\nSigmaルールでは、`logsource`の`service`や`category`フィールドでチャンネルやイベントIDが**暗黙的**に定義されています（例: `service: security`）\n[hayabusa-rules](https://github.com/Yamato-Security/hayabusa-rules)リポジトリでSigmaルールを管理する際には、`logsource`フィールドを具体化し、チャンネルやイベントIDフィールドを明示的に定義しています。\nこれをどのように、そしてなぜ行うのかについては、[こちら](https://github.com/Yamato-Security/sigma-to-hayabusa-converter)で詳しく説明しています。\n\n現在、`Channel`が定義されておらず、すべての`.evtx`ファイルをスキャンするためのルールは以下の2つだけです：\n- [Possible Hidden Shellcode](https://github.com/Yamato-Security/hayabusa-rules/blob/main/hayabusa/builtin/UnkwnChannEID_Med_PossibleHiddenShellcode.yml)\n- [Mimikatz Use](https://github.com/SigmaHQ/sigma/blob/master/rules/windows/builtin/win_alert_mimikatz_keywords.yml)\n\nこれらの2つのルールを使用して、読み込んだすべての`.evtx`ファイルに対してルールをスキャンしたい場合は、`csv-timeline`および`json-timeline`コマンドで`-A, --enable-all-rules`オプションを追加する必要があります。\nベンチマークでは、ルールフィルタリングにより、スキャンするファイルに応じて、速度が20%から10倍に向上することが確認されています。\n\nチャンネルフィルタリングは、`.evtx`ファイルを読み込む際にも使用されます。\n例えば、`Security`チャンネルのイベントを探すルールを指定している場合、`Security`ログではない`.evtx`ファイルを読み込む意味はありません。\nベンチマークでは、通常のスキャンで約10%、単一のルールでスキャンする場合には最大60%以上の性能向上が見られました。\n1つの.evtxファイル内に複数のチャンネルが使用されている場合、例えば複数の`.evtx`ファイルがツールを使って結合された場合は、`csv-timeline`および`json-timeline`コマンドで`-a, --scan-all-evtx-files`オプションを使用してこのフィルタリングを無効にできます。\n\n> 注意: チャンネルフィルタリングは.evtxファイルでのみ動作します。-J, --json-inputでJSONファイルからイベントログを読み込み、さらに-Aや-aを指定した場合、エラーが発生します。\n\n### `csv-timeline`コマンド\n\n`csv-timeline`コマンドはイベントのフォレンジックタイムラインをCSV形式で作成します。\n\n```\nUsage: csv-timeline <INPUT> [OPTIONS]\n\nInput:\n  -d, --directory <DIR>    .evtxファイルを持つディレクトリのパス\n  -f, --file <FILE>        1つの.evtxファイルに対して解析を行う\n  -l, --live-analysis      ローカル端末のC:\\Windows\\System32\\winevt\\Logsフォルダを解析する\n\nGeneral Options:\n  -C, --clobber                          結果ファイルを上書きする\n  -h, --help                             ヘルプメニューを表示する\n  -J, --JSON-input                       .evtxファイルの代わりにJSON形式のログファイル(.jsonまたは.jsonl)をスキャンする\n  -s, --sort-events                      ファイル保存前にイベントをソートする (警告: これは多くのメモリを使用する!)\n  -w, --no-wizard                        質問はしない。すべてのイベントとアラートをスキャンする\n  -Q, --quiet-errors                     Quiet errorsモード: エラーログを保存しない\n  -x, --recover-records                  空ページからevtxレコードをカービングする (デフォルト: 無効)\n  -r, --rules <DIR/FILE>                 ルールファイルまたはルールファイルを持つディレクトリ (デフォルト: ./rules)\n  -c, --rules-config <DIR>               ルールフォルダのコンフィグディレクトリ (デフォルト: ./rules/config)\n  -t, --threads <NUMBER>                 スレッド数 (デフォルト: パフォーマンスに最適な数値)\n      --target-file-ext <FILE-EXT...>    evtx以外の拡張子を解析対象に追加する。 (例１: evtx_data 例２: evtx1,evtx2)\n\nFiltering:\n  -E, --EID-filter                      速度を上げるため主なEIDだけスキャンする (コンフィグファイル: ./rules/config/target_event_IDs.txt)\n  -A, --enable-all-rules                ロードされたevtxファイルに関係なく、すべてのルールを有効にする（ルールのチャネルフィルターを無効にする）\n  -D, --enable-deprecated-rules         ステータスがdeprecatedのルールを有効にする\n  -n, --enable-noisy-rules              Noisyルールを有効にする\n  -u, --enable-unsupported-rules        ステータスがunsupportedのルールを有効にする\n  -e, --exact-level <LEVEL>             特定のレベルだけスキャンする (informational, low, medium, high, critical)\n      --exclude-category <CATEGORY...>  特定のlogsourceカテゴリを持つルールをロードしない (例: process_creation,pipe_created)\n      --exclude-computer <COMPUTER...>  特定のコンピュータ名をスキャンしない (例: ComputerA) (例: ComputerA,ComputerB)\n      --exclude-eid <EID...>            高速化のために特定のEIDをスキャンしない (例: 1) (例: 1,4688)\n      --exclude-status <STATUS...>      読み込み対象外とするルール内でのステータス (例１: experimental) (例２: stable,test)\n      --exclude-tag <TAG...>            特定のタグを持つルールをロードしない (例: sysmon)\n      --include-category <CATEGORY...>  特定のlogsourceカテゴリを持つルールのみをロードする (例: process_creation,pipe_created)\n      --include-computer <COMPUTER...>  特定のコンピュータ名のみをスキャンする (例: ComputerA) (例: ComputerA,ComputerB)\n      --include-eid <EID...>            指定したEIDのみをスキャンして高速化する (例: 1) (例: 1,4688)\n      --include-status <STATUS...>      特定のステータスを持つルールのみをロードする (例: expermimental) (例: stable,test)\n      --include-tag <TAG...>            特定のタグを持つルールのみをロードする (例１: attack.execution,attack.discovery) (例２: wmi)\n  -m, --min-level <LEVEL>               結果出力をするルールの最低レベル (デフォルト: informational)\n  -P, --proven-rules                    実績のあるルールだけでスキャンし、高速化する (./rules/config/proven_rules.txt)\n  -a, --scan-all-evtx-files             ロードされたルールに関係なく、すべてのevtxファイルをスキャンする（evtxファイルのチャネルフィルターを無効にする）\n      --time-offset <OFFSET>            オフセットに基づく最近のイベントのスキャン (例: 1y, 3M, 30d, 24h, 30m)\n      --timeline-end <DATE>             解析対象とするイベントログの終了時刻 (例: \"2022-02-22 23:59:59 +09:00\")\n      --timeline-start <DATE>           解析対象とするイベントログの開始時刻 (例: \"2020-02-22 00:00:00 +09:00\")\n\nOutput:\n  -b, --disable-abbreviations        省略機能を無効にする\n  -G, --GeoIP <MAXMIND-DB-DIR>       IPアドレスのGeoIP(ASN、都市、国)情報を追加する\n  -H, --HTML-report <FILE>           HTML形式で詳細な結果を出力する (例: results.html)\n  -M, --multiline                    イベントフィールド情報を複数の行に出力する\n  -F, --no-field-data-mapping        フィールドデータのマッピングを無効にする\n      --no-pwsh-field-extraction     PowerShell Classicログフィールド抽出の無効化\n  -o, --output <FILE>                タイムラインを保存する (例: results.csv)\n  -p, --profile <PROFILE>            利用する出力プロファイル名を指定する\n  -R, --remove-duplicate-data        重複したフィールドデータは「DUP」に置き換えられる (ファイルサイズが約10〜15％削減される)\n  -X, --remove-duplicate-detections  重複した検知項目を削除する (デフォルト: 無効)\n\nDisplay Settings:\n  -K, --no-color            カラーで出力しない\n  -N, --no-summary          結果概要を出力しない (多少速くなる)\n  -q, --quiet               Quietモード: 起動バナーを表示しない\n  -v, --verbose             詳細な情報を出力する\n  -T, --visualize-timeline  検知頻度タイムラインを出力する（ターミナルはUnicodeに対応する必要がある）\n\nTime Format:\n      --European-time     ヨーロッパ形式で日付と時刻を出力する (例: 22-02-2022 22:00:00.123 +02:00)\n  -O, --ISO-8601          ISO-8601形式で日付と時刻を出力する (例: 2022-02-22T10:10:10.1234567Z) (UTC時刻)\n      --RFC-2822          RFC 2822形式で日付と時刻を出力する (例: Fri, 22 Feb 2022 22:00:00 -0600)\n      --RFC-3339          RFC 3339形式で日付と時刻を出力する (例: 2022-02-22 22:00:00.123456-06:00)\n      --US-military-time  24時間制(ミリタリータイム)のアメリカ形式で日付と時刻を出力する (例: 02-22-2022 22:00:00.123 -06:00)\n      --US-time           アメリカ形式で日付と時刻を出力する (例: 02-22-2022 10:00:00.123 PM -06:00)\n  -U, --UTC               UTC形式で日付と時刻を出力する (デフォルト: 現地時間)\n```\n\n#### `csv-timeline`コマンドの使用例\n\n* デフォルトの`standard`プロファイルで１つのWindowsイベントログファイルに対してHayabusaを実行する:\n\n```\nhayabusa.exe csv-timeline -f eventlog.evtx \n```\n\n* `verbose`プロファイルで複数のWindowsイベントログファイルのあるsample-evtxディレクトリに対して、Hayabusaを実行する:\n\n```\nhayabusa.exe csv-timeline -d .\\hayabusa-sample-evtx -p verbose\n```\n\n* 全てのフィールド情報も含めて１つのCSVファイルにエクスポートして、LibreOffice、Timeline Explorer、Elastic Stack等でさらに分析することができる(注意: `super-verbose`プロファイルを使すると、出力するファイルのサイズがとても大きくなる！):\n\n```\nhayabusa.exe csv-timeline -d .\\hayabusa-sample-evtx -o results.csv -p super-verbose\n```\n\n* EID(イベントID)フィルタを有効にし、タイムラインをJSON形式で保存する:\n\n> 注意: EIDフィルタを有効にすると、私達のテストでは処理時間が約10〜15%速くなりますが、アラートを見逃す可能性があります。\n\n```\nhayabusa.exe csv-timeline -E -d .\\hayabusa-sample-evtx -o results.csv\n```\n\n* Hayabusaルールのみを実行する（デフォルトでは`-r .\\rules`にあるすべてのルールが利用される）:\n\n```\nhayabusa.exe csv-timeline -d .\\hayabusa-sample-evtx -r .\\rules\\hayabusa -o results.csv -w\n```\n\n* Windowsでデフォルトで有効になっているログに対してのみ、Hayabusaルールを実行する:\n\n```\nhayabusa.exe csv-timeline -d .\\hayabusa-sample-evtx -r .\\rules\\hayabusa\\builtin -o results.csv -w\n```\n\n* Sysmonログに対してのみHayabusaルールを実行する:\n\n```\nhayabusa.exe csv-timeline -d .\\hayabusa-sample-evtx -r .\\rules\\hayabusa\\sysmon -o results.csv -w\n```\n\n* Sigmaルールのみを実行する:\n\n```\nhayabusa.exe csv-timeline -d .\\hayabusa-sample-evtx -r .\\rules\\sigma -o results.csv -w\n```\n\n* 廃棄(deprecated)されたルール(`status`が`deprecated`になっているルール)とノイジールール(`.\\rules\\config\\noisy_rules.txt`にルールIDが書かれているルール)を有効にする:\n\n> 注意: 最近、廃止されたルールはSigmaリポジトリで別のディレクトリに置かれるようになり、Hayabusaではもうデフォルトでは含まれないようになりました。\n> 従って、廃止されたルールを有効にする必要はないでしょう。\n\n```\nhayabusa.exe csv-timeline -d .\\hayabusa-sample-evtx --enable-noisy-rules --enable-deprecated-rules -o results.csv -w\n```\n\n* ログオン情報を分析するルールのみを実行し、UTCタイムゾーンで出力する:\n\n```\nhayabusa.exe csv-timeline -d .\\hayabusa-sample-evtx -r .\\rules\\hayabusa\\builtin\\Security\\LogonLogoff\\Logon -U -o results.csv -w\n```\n\n* 起動中のWindows端末上で実行し（Administrator権限が必要）、アラート（悪意のある可能性のある動作）のみを検知する:\n\n```\nhayabusa.exe csv-timeline -l -m low\n```\n\n* 詳細なメッセージを出力する(処理に時間がかかるファイル、パースエラー等を特定するのに便利):\n\n```\nhayabusa.exe csv-timeline -d .\\hayabusa-sample-evtx -v\n```\n\n* Verbose出力の例:\n\nルールファイルの読み込み:\n\n```\nLoaded rule: rules/sigma/builtin/deprecated/proc_creation_win_susp_run_folder.yml\nLoaded rule: rules/sigma/builtin/deprecated/proc_creation_win_execution_mssql_xp_cmdshell_stored_procedure.yml\nLoaded rule: rules/sigma/builtin/deprecated/proc_creation_win_susp_squirrel_lolbin.yml\nLoaded rule: rules/sigma/builtin/win_alert_mimikatz_keywords.yml\n```\n\nスキャン中のエラー:\n```\n[ERROR] Failed to parse event file.\nEventFile: ../logs/Microsoft-Rdms-UI%4Operational.evtx\nError: Failed to parse record number 58471\n\n[ERROR] Failed to parse event file.\nEventFile: ../logs/Microsoft-Rdms-UI%4Operational.evtx\nError: Failed to parse record number 58470\n\n[ERROR] Failed to parse event file.\nEventFile: ../logs/Microsoft-Windows-AppxPackaging%4Operational.evtx\nError: An error occurred while trying to serialize binary xml to output.\n```\n\n* 結果を[Timesketch](https://timesketch.org/)にインポートできるCSV形式に保存する:\n\n```\nhayabusa.exe csv-timeline -d ../hayabusa-sample-evtx --RFC-3339 -o timesketch-import.csv -p timesketch -U\n```\n\n* エラーログの出力をさせないようにする:\nデフォルトでは、Hayabusaはエラーメッセージをエラーログに保存します。\nエラーメッセージを保存したくない場合は、`-Q`を追加してください。\n\n#### アドバンス - GeoIPのログエンリッチメント\n\n無償のGeoLite2のジオロケーションデータで、SrcIP（ソースIPアドレス）フィールドとTgtIP（ターゲットIPアドレス）フィールドにGeoIP（ASN組織、都市、国）情報を追加することができます。\n\n手順:\n1. まずMaxMindのアカウントを[こちら](https://dev.maxmind.com/geoip/geolite2-free-geolocation-data)で登録してください。\n2. [ダウンロードページ](https://www.maxmind.com/en/accounts/current/geoip/downloads)から3つの`.mmdb`ファイルをダウンロードし、ディレクトリに保存してください。ファイル名は、`GeoLite2-ASN.mmdb`、`GeoLite2-City.mmdb`、`GeoLite2-Country.mmdb`であることをご確認ください。\n3. `csv-timeline`または`json-timeline`コマンドを実行する際には、`-G`オプションの後にMaxMindデータベースのあるディレクトリを追加してください。\n\n* `csv-timeline`を使用すると、次の6つのカラムが追加で出力されます: `SrcASN`、`SrcCity`、`SrcCountry`、`TgtASN`、`TgtCity`、`TgtCountry`\n* `json-timeline`を使用すると、同じ`SrcASN`、`SrcCity`、`SrcCountry`、`TgtASN`、`TgtCity`、`TgtCountry`フィールドが`Details`オブジェクトに追加されますが、情報を含む場合のみとなります。\n\n* `SrcIP`または`TgtIP`がlocalhost (`127.0.0.1`、`::1`等々)の場合、`SrcASN`または`TgtASN`は、`Local`として出力されます。\n* `SrcIP`または`TgtIP`がプライベートIPアドレス (`10.0.0.0/8`、`fe80::/10`等々)の場合、`SrcASN`または`TgtASN`は、`Private`として出力されます。\n\n##### GeoIPの設定ファイル\n\nGeoIPデータベースで検索される送信元と送信先のIPアドレスを含むフィールド名は、`rules/config/geoip_field_mapping.yaml`で定義されています。\n必要であれば、このリストに追加することができます。\nまた、このファイルには、どのイベントからIPアドレス情報を抽出するかを決定するフィルタセクションもあります。\n\n##### GeoIPデータベースの自動アップデート\n\nMaxMind GeoIP データベースは、2 週間ごとに更新されます。\nこれらのデータベースを自動的に更新するために、[こちら](https://github.com/maxmind/geoipupdate)からMaxMindの`geoipupdate`のツールをインストールすることができます。\n\nmacOSでの手順:\n1. `brew install geoipupdate`\n2. `/usr/local/etc/GeoIP.conf`を編集する: MaxMindのウェブサイトにログインした後に作成した`AccountID`と`LicenseKey`を入れる。`EditionIDs`の行に、`EditionIDs GeoLite2-ASN GeoLite2-City GeoLite2-Country`とあることを確認する。\n3. `geoipupdate`を実行する。\n4. GeoIP情報を追加する場合は、`-G /usr/local/var/GeoIP`を追加する。\n\nWindowsでの手順:\n1. [Releases](https://github.com/maxmind/geoipupdate/releases)ページからWindowsバイナリの最新版(例: `geoipupdate_4.10.0_windows_amd64.zip`)をダウンロードする。\n2. `\\ProgramData\\MaxMind/GeoIPUpdate\\GeoIP.conf`を編集する: MaxMindのウェブサイトにログインした後に作成した`AccountID`と`LicenseKey`を入れる。`EditionIDs`の行に、`EditionIDs GeoLite2-ASN GeoLite2-City GeoLite2-Country`とあることを確認する。\n3. `geoipupdate`を実行する。\n\n#### `csv-timeline`コマンドの設定ファイル\n\n`./rules/config/channel_abbreviations.txt`: チャンネル名とその略称のマッピング。\n\n`./rules/config/default_details.txt`: ルールに`details:`行が指定されていない場合に、どのようなデフォルトのフィールド情報 (`%Details%`フィールド)を出力するかを設定するファイルです。\nプロバイダー名とイベントIDを元に作成されます。\n\n`./rules/config/eventkey_alias.txt`: このファイルには、フィールドの短い名前のエイリアスと、元の長いフィールド名のマッピングがあります。\n\n例:\n```\nInstanceID,Event.UserData.UMDFHostDeviceArrivalBegin.InstanceId\nIntegrityLevel,Event.EventData.IntegrityLevel\nIpAddress,Event.EventData.IpAddress\n```\n\nここでフィールドが定義されていない場合、Hayabusaは自動的に`Event.EventData`にあるフィールドを使用してみます。\n\n`./rules/config/exclude_rules.txt`: このファイルには、使用から除外されるルールIDのリストがあります。\n通常は、あるルールが別のルールに置き換わったか、そもそもそのルールが使用できないことが原因です。\nファイアウォールやIDSと同様に、シグネチャベースのツールは、自身の環境に合わせてチューニングする必要があるため、特定のルールを恒久的または一時的に除外する必要があるかもしれません。\n`./rules/config/exclude_rules.txt`にルールID (例:`4fe151c2-ecf9-4fae-95ae-b88ec9c2fca6`)を追加すると、不要なルールや使用できないルールを無視できます。\n\n`./rules/config/noisy_rules.txt`: このファイルには、デフォルトでは無効になっているルールのIDが入っています。`-n, --enable-noisy-rules`オプションでノイジールールを有効にできます。\nこれらのルールは通常、性質上ノイズが多いか、誤検出があるためです。\n\n`./rules/config/target_event_IDs.txt`: EIDフィルターが有効な場合、このファイルで指定されたイベントIDのみがスキャンされます。\nデフォルトでは、Hayabusaはすべてのイベントをスキャンしますが、パフォーマンスを向上させたい場合は、`-E, --EID-filter`オプションを使用してください。\nこれにより、通常10〜25％の速度向上があります。\n\n\n### `json-timeline`コマンド\n\n`json-timeline`コマンドは、JSONまたはJSONL形式でイベントのフォレンジックタイムラインを作成します。\nJSONLへの出力は、JSONよりも高速でファイルサイズも小さいので、結果をElastic Stack等の他のツールにインポートするだけなら、JSONLが理想です。\nテキストエディタで手動で解析する場合は、JSONの方が良いでしょう。\nCSV出力は小さいタイムライン(通常2GB以下)をLibreOfficeやTimeline Explorerのようなツールにインポートするのに適しています。\nJSONは、`jq`等のツールでデータ(大きな結果ファイルを含む)をより詳細に分析する場合に最適です。`Details`フィールドが分離されているので、分析が容易になるからです。\n(CSV出力では、すべてのイベントログのフィールドが1つの大きな`Details`カラムに入っており、データのソートなどが難しくなっています。)\n\n```\nUsage: json-timeline <INPUT> [OPTIONS]\n\nInput:\n  -d, --directory <DIR>    .evtxファイルを持つディレクトリのパス\n  -f, --file <FILE>        1つの.evtxファイルに対して解析を行う\n  -l, --live-analysis      ローカル端末のC:\\Windows\\System32\\winevt\\Logsフォルダを解析する\n\nGeneral Options:\n  -C, --clobber                          結果ファイルを上書きする\n  -h, --help                             ヘルプメニューを表示する\n  -J, --JSON-input                       .evtxファイルの代わりにJSON形式のログファイル(.jsonまたは.jsonl)をスキャンする\n  -s, --sort-events                      ファイル保存前イベントをソートする (警告: これは多くのメモリを使用する!)\n  -w, --no-wizard                        質問はしない。すべてのイベントとアラートをスキャンする\n  -Q, --quiet-errors                     Quiet errorsモード: エラーログを保存しない\n  -x, --recover-records                  空ページからevtxレコードをカービングする (デフォルト: 無効)\n  -r, --rules <DIR/FILE>                 ルールファイルまたはルールファイルを持つディレクトリ (デフォルト: ./rules)\n  -c, --rules-config <DIR>               ルールフォルダのコンフィグディレクトリ (デフォルト: ./rules/config)\n  -t, --threads <NUMBER>                 スレッド数 (デフォルト: パフォーマンスに最適な数値)\n      --target-file-ext <FILE-EXT...>    evtx以外の拡張子を解析対象に追加する。 (例１: evtx_data 例２: evtx1,evtx2)\n\nFiltering:\n  -E, --EID-filter                      速度を上げるため主なEIDだけスキャンする (コンフィグファイル: ./rules/config/target_event_IDs.txt)\n  -A, --enable-all-rules                ロードされたevtxファイルに関係なく、すべてのルールを有効にする（ルールのチャネルフィルターを無効にする）\n  -D, --enable-deprecated-rules         ステータスがdeprecatedのルールを有効にする\n  -n, --enable-noisy-rules              Noisyルールを有効にする\n  -u, --enable-unsupported-rules        ステータスがunsupportedのルールを有効にする\n  -e, --exact-level <LEVEL>             特定のレベルだけスキャンする (informational, low, medium, high, critical)\n      --exclude-category <CATEGORY...>  特定のlogsourceカテゴリを持つルールをロードしない (例: process_creation,pipe_created)\n      --exclude-computer <COMPUTER...>  特定のコンピュータ名をスキャンしない (例: ComputerA) (例: ComputerA,ComputerB)\n      --exclude-eid <EID...>            高速化のために特定のEIDをスキャンしない (例: 1) (例: 1,4688)\n      --exclude-status <STATUS...>      読み込み対象外とするルール内でのステータス (例１: experimental) (例２: stable,test)\n      --exclude-tag <TAG...>            特定のタグを持つルールをロードしない (例: sysmon)\n      --include-category <CATEGORY...>  特定のlogsourceカテゴリを持つルールのみをロードする (例: process_creation,pipe_created)\n      --include-computer <COMPUTER...>  特定のコンピュータ名のみをスキャンする (例: ComputerA) (例: ComputerA,ComputerB)\n      --include-eid <EID...>            指定したEIDのみをスキャンして高速化する (例: 1) (例: 1,4688)\n      --include-status <STATUS...>      特定のステータスを持つルールのみをロードする (例: expermimental) (例: stable,test)\n      --include-tag <TAG...>            特定のタグを持つルールのみをロードする (例１: attack.execution,attack.discovery) (例２: wmi)\n  -m, --min-level <LEVEL>               結果出力をするルールの最低レベル (デフォルト: informational)\n  -P, --proven-rules                    実績のあるルールだけでスキャンし、高速化する (./rules/config/proven_rules.txt)\n  -a, --scan-all-evtx-files             ロードされたルールに関係なく、すべてのevtxファイルをスキャンする（evtxファイルのチャネルフィルターを無効にする）\n      --time-offset <OFFSET>            オフセットに基づく最近のイベントのスキャン (例: 1y, 3M, 30d, 24h, 30m)\n      --timeline-end <DATE>             解析対象とするイベントログの終了時刻 (例: \"2022-02-22 23:59:59 +09:00\")\n      --timeline-start <DATE>           解析対象とするイベントログの開始時刻 (例: \"2020-02-22 00:00:00 +09:00\")\n\nOutput:\n  -b, --disable-abbreviations        省略機能を無効にする\n  -G, --GeoIP <MAXMIND-DB-DIR>       IPアドレスのGeoIP(ASN、都市、国)情報を追加する\n  -H, --HTML-report <FILE>           HTML形式で詳細な結果を出力する (例: results.html)\n  -L, --JSONL-output                 タイムラインをJSONL形式で保存する (例: -L -o results.jsonl)\n  -F, --no-field-data-mapping        フィールドデータのマッピングを無効にする\n      --no-pwsh-field-extraction     PowerShell Classicログフィールド抽出の無効化\n  -o, --output <FILE>                タイムラインを保存する (例: results.csv)\n  -p, --profile <PROFILE>            利用する出力プロファイル名を指定する\n  -R, --remove-duplicate-data        重複したフィールドデータは「DUP」に置き換えられる (ファイルサイズが約10〜15％削減される)\n  -X, --remove-duplicate-detections  重複した検知項目を削除する (デフォルト: 無効)\n\nDisplay Settings:\n  -K, --no-color            カラーで出力しない\n  -N, --no-summary          結果概要を出力しない (多少速くなる)\n  -q, --quiet               Quietモード: 起動バナーを表示しない\n  -v, --verbose             詳細な情報を出力する\n  -T, --visualize-timeline  検知頻度タイムラインを出力する（ターミナルはUnicodeに対応する必要がある）\n\nTime Format:\n      --European-time     ヨーロッパ形式で日付と時刻を出力する (例: 22-02-2022 22:00:00.123 +02:00)\n  -O, --ISO-8601          ISO-8601形式で日付と時刻を出力する (例: 2022-02-22T10:10:10.1234567Z) (UTC時刻)\n      --RFC-2822          RFC 2822形式で日付と時刻を出力する (例: Fri, 22 Feb 2022 22:00:00 -0600)\n      --RFC-3339          RFC 3339形式で日付と時刻を出力する (例: 2022-02-22 22:00:00.123456-06:00)\n      --US-military-time  24時間制(ミリタリータイム)のアメリカ形式で日付と時刻を出力する (例: 02-22-2022 22:00:00.123 -06:00)\n      --US-time           アメリカ形式で日付と時刻を出力する (例: 02-22-2022 10:00:00.123 PM -06:00)\n  -U, --UTC               UTC形式で日付と時刻を出力する (デフォルト: 現地時間)\n```\n\n#### `json-timeline`コマンドの使用例と設定ファイル\n\n`json-timeline`のオプションと設定ファイルは、`csv-timeline`と同じですが、JSONL形式で出力するための`-L, --JSONL-output`オプションが1つ追加されています。\n\n### `level-tuning`コマンド\n\n`level-tuning`コマンドを使用すると、環境に応じてリスクレベルを上げたり下げたりして、ルールのアラートレベルを調整できます。\n\n```\nUsage: level-tuning [OPTIONS]\n\nDisplay Settings:\n  -K, --no-color      カラーで出力しない\n  -q, --quiet         Quietモード: 起動バナーを表示しない\n\nGeneral Options:\n  -f, --file <FILE>   ルールlevelのチューニング (デフォルト: ./rules/config/level_tuning.txt)\n  -h, --help          ヘルプメニューを表示する\n```\n\n#### `level-tuning`コマンドの使用例\n\n* 通常使用: `hayabusa.exe level-tuning`\n* カスタム設定ファイルに基づくルールのアラートレベルの調整: `hayabusa.exe level-tuning -f my_level_tuning.txt`\n\n#### `level-tuning`の設定ファイル\n\nHayabubsaとSigmaのルール作成者は、アラートのリスクレベルを判定してルールを作成します。\nしかし、実際のリスクレベルは環境に応じて異なる場合があります。\n`./rules/config/level_tuning.txt`にルールを追加して `hayabusa.exe level-tuning`を実行すると、ルールファイル内の`level`行が更新され、リスクレベルを調整することができます。\nルールファイルが直接更新されますので、ご注意ください。\n\n> 注意: `update-rules`を実行するたびに、アラートレベルが元の設定に上書きされるので、レベルを変更したい場合は、`update-rules`を実行した後に、`level-tuning`コマンドも実行する必要があります。\n\n`./rules/config/level_tuning.txt`の一例:\n\n```csv\nid,new_level\n00000000-0000-0000-0000-000000000000,informational # レベルチューニングのサンプル\n```\n\nこの場合、ルールディレクトリ内の`id`が`00000000-0000-0000000000`のルールのアラート`level`が、`informational`に書き換えられます。\n設定可能なレベルは、`critical`、`high`、`medium`、`low`、`informational`です。\n\n### `list-profiles`コマンド\n\n```\nUsage: list-profiles [OPTIONS]\n\nDisplay Settings:\n  -K, --no-color   カラーで出力しない\n  -q, --quiet      Quietモード: 起動バナーを表示しない\n  \nGeneral Options:\n  -h, --help       ヘルプメニューを表示する\n```\n\n### `set-default-profile`コマンド\n\n```\nUsage: set-default-profile [OPTIONS]\n\nDisplay Settings:\n  -K, --no-color           カラーで出力しない\n  -q, --quiet              Quietモード: 起動バナーを表示しない\n\nGeneral Options:\n  -h, --help               ヘルプメニューを表示する\n  -p, --profile <PROFILE>  利用する出力プロファイル名を指定する\n```\n\n#### `set-default-profile`コマンドの使用例\n\n* デフォルトプロファイルを`minimal`に設定する: `hayabusa.exe set-default-profile minimal`\n* デフォルトプロファイルを`super-verbose`に設定する: `hayabusa.exe set-default-profile super-verbose`\n\n## `update-rules`コマンド\n\n`update-rules`コマンドは、`rules`フォルダを[HayabusaルールのGitHubリポジトリ](https://github.com/Yamato-Security/hayabusa-rules)と同期し、ルールと設定ファイルを更新します。\n\n```\nUsage: update-rules [OPTIONS]\n\nDisplay Settings:\n  -K, --no-color  カラーで出力しない\n  -q, --quiet     Quietモード: 起動バナーを表示しない\n\nGeneral Options:\n  -h, --help              ヘルプメニューを表示する\n  -r, --rules <DIR/FILE>  ルールファイルまたはルールファイルを持つディレクトリ (デフォルト: ./rules)\n```\n\n### `update-rules`コマンドの使用例\n\n普段は次のように実行します: `hayabusa.exe update-rules`\n\n# タイムライン出力\n\n## 出力プロファイル\n\nHayabusaの`config/profiles.yaml`設定ファイルでは、５つのプロファイルが定義されています:\n\n1. `minimal`\n2. `standard` (デフォルト)\n3. `verbose`\n4. `all-field-info`\n5. `all-field-info-verbose`\n6. `super-verbose`\n7. `timesketch-minimal`\n8. `timesketch-verbose`\n\nこのファイルを編集することで、簡単に独自のプロファイルをカスタマイズしたり、追加したりすることができます。\n`set-default-profile --profile <profile>`コマンドでデフォルトのプロファイルを変更することもできます。\n利用可能なプロファイルとそのフィールド情報を表示するには、`list-profiles`コマンドを使用してください。\n\n### 1. `minimal`プロファイルの出力\n\n`%Timestamp%, %Computer%, %Channel%, %EventID%, %Level%, %RecordID%, %RuleTitle%, %Details%`\n\n### 2. `standard`プロファイルの出力\n\n`%Timestamp%, %Computer%, %Channel%, %EventID%, %Level%, %RecordID%, %RuleTitle%, %Details%, %ExtraFieldInfo%`\n\n### 3. `verbose`プロファイルの出力\n\n`%Timestamp%, %Computer%, %Channel%, %EventID%, %Level%, %MitreTactics%, %MitreTags%, %OtherTags%, %RecordID%, %RuleTitle%, %Details%, %ExtraFieldInfo%, %RuleFile%, %EvtxFile%`\n\n### 4. `all-field-info`プロファイルの出力\n\n最小限の`details`情報を出力する代わりに、イベントにあるすべての`EventData`フィールド情報(`%AllFieldInfo%`)が出力されます。フィールド名は元々のフィールド名になります。\n\n`%Timestamp%, %Computer%, %Channel%, %EventID%, %Level%, %RecordID%, %RuleTitle%, %AllFieldInfo%, %RuleFile%, %EvtxFile%`\n\n### 5. `all-field-info-verbose`プロファイルの出力\n\n`%Timestamp%, %Computer%, %Channel%, %EventID%, %Level%, %MitreTactics%, %MitreTags%, %OtherTags%, %RecordID%, %RuleTitle%, %AllFieldInfo%, %RuleFile%, %EvtxFile%`\n\n### 6. `super-verbose`プロファイルの出力\n\n`%Timestamp%, %Computer%, %Channel%, %EventID%, %Level%, %RuleTitle%, %RuleAuthor%, %RuleModifiedDate%, %Status%, %RecordID%, %Details%, %ExtraFieldInfo%, %MitreTactics%, %MitreTags%, %OtherTags%, %Provider%, %RuleCreationDate%, %RuleFile%, %EvtxFile%`\n\n### 7. `timesketch-minimal`プロファイルの出力\n\n[Timesketch](https://timesketch.org/)にインポートできるプロファイル。\n\n`%Timestamp%, hayabusa, %RuleTitle%, %Computer%, %Channel%, %EventID%, %Level%, %MitreTactics%, %MitreTags%, %OtherTags%, %RecordID%, %Details%, %RuleFile%, %EvtxFile%`\n\n### 8. `timesketch-verbose`プロファイルの出力\n\n`%Timestamp%, hayabusa, %RuleTitle%, %Computer%, %Channel%, %EventID%, %Level%, %MitreTactics%, %MitreTags%, %OtherTags%, %RecordID%, %Details%, %ExtraFieldInfo%, %RuleFile%, %EvtxFile%`\n\n### プロファイルの比較\n\n以下のベンチマークは、2018年製のLenovo P51 (CPU: Xeon 4コア / メモリ: 64GB)上で3GBのEVTXデータに対して3891件のルールを有効にして実施されました。(2023/06/01)\n\n| プロファイル | 処理時間 | 結果のファイルサイズ | ファイルサイズ増加 |\n| :---: | :---: | :---: | :---: |\n| minimal | 8分50秒 | 770 MB | -30% |\n| standard (デフォルト) | 9分00秒 | 1.1 GB | 無し |\n| verbose | 9分10秒 | 1.3 GB | +20% |\n| all-field-info | 9分3秒 | 1.2 GB | +10% |\n| all-field-info-verbose | 9分10秒 | 1.3 GB | +20% |\n| super-verbose | 9分12秒 | 1.5 GB | +35% |\n\n### プロファイルのフィールドエイリアス\n\nビルトインの出力プロファイルで出力できる情報は以下の通り:\n\n| エイリアス名 | Hayabusaの出力情報 |\n| :--- | :--- |\n|%AllFieldInfo% | すべてのフィールド情報。 |\n|%Channel% |  ログ名。イベントログの`<Event><System><EventID>`フィールド。 |\n|%Computer% | イベントログの`<Event><System><Computer>`フィールド。 |\n|%Details% | YML検知ルールの`details`フィールドから来ていますが、このフィールドはHayabusaルールにしかありません。このフィールドはアラートとイベントに関する追加情報を提供し、ログのフィールドから有用なデータを抽出することができます。イベントキーのマッピングが間違っている場合、もしくはフィールドが存在しない場合で抽出ができなかった箇所は`n/a` (not available)と記載されます。YML検知ルールに`details`フィールドが存在しない時のdetailsのメッセージを`./rules/config/default_details.txt`で設定できます。`default_details.txt`では`Provider Name`、`EventID`、`details`の組み合わせで設定することができます。default_details.txt`やYML検知ルールに対応するルールが記載されていない場合はすべてのフィールド情報を出力します。 |\n|%ExtraFieldInfo% | %Details%で出力されなかったフィールドデータを出力する。 |\n|%EventID% | イベントログの`<Event><System><EventID>`フィールド。 |\n|%EvtxFile% | アラートまたはイベントを起こしたevtxファイルへのパス。 |\n|%Level% | YML検知ルールの`level`フィールド。(例：`informational`、`low`、`medium`、`high`、`critical`) |\n|%MitreTactics% | MITRE ATT&CKの[戦術](https://attack.mitre.org/tactics/enterprise/) (例: Initial Access、Lateral Movement等々） |\n|%MitreTags% | MITRE ATT&CKの戦術以外の情報。attack.g(グループ)、attack.t(技術)、attack.s(ソフトウェア)の情報を出力する。 |\n|%OtherTags% | YML検知ルールの`tags`フィールドから`MitreTactics`、`MitreTags`以外のキーワードを出力する。|\n|%Provider% | `<Event><System><Provider>` フィールド内の`Name`属性。 |\n|%RecordID% | `<Event><System><EventRecordID>`フィールドのイベントレコードID。 |\n|%RuleAuthor% | YML検知ルールの `author` フィールド。 |\n|%RuleCreationDate% | YML検知ルールの `date` フィールド。 |\n|%RuleFile% | アラートまたはイベントを生成した検知ルールのファイル名。 |\n|%RuleModifiedDate% | YML検知ルールの `modified` フィールド。 |\n|%RuleTitle% | YML検知ルールの`title`フィールド。 |\n|%Status% | YML検知ルールの `status` フィールド。 |\n|%Timestamp% | デフォルトでは`YYYY-MM-DD HH:mm:ss.sss +hh:mm`形式になっている。イベントログの`<Event><System><TimeCreated SystemTime>`フィールドから来ている。デフォルトのタイムゾーンはローカルのタイムゾーンになるが、`--UTC`オプションでUTCに変更することができる。 |\n\n#### その他のプロファイルのフィールドエイリアス\n\n必要であれば、これらのエイリアスを出力プロファイルに追加することもできます:\n\n| エイリアス名 | Hayabusaの出力情報 |\n| :--- | :--- |\n|%RenderedMessage% | WEC機能で転送されたイベントログの`<Event><RenderingInfo><Message>`フィールド。 |\n|%RuleID% | YML検知ルールの`id`フィールド。 |\n\n注意: これらはビルトインプロファイルには**含まれていない**ので、手動で`config/default_profile.yaml`ファイルを編集し、以下の行を追加する必要があります:\n\n```\nMessage: \"%RenderedMessage%\"\nRuleID: \"%RuleID%\"\n```\n\nまた、[イベントキーエイリアス](https://github.com/Yamato-Security/hayabusa-rules/blob/main/README-Japanese.md#%E3%82%A4%E3%83%99%E3%83%B3%E3%83%88%E3%82%AD%E3%83%BC%E3%82%A8%E3%82%A4%E3%83%AA%E3%82%A2%E3%82%B9)を定義し、出力することもできます。\n\n## 省略\n\n結果をミニマルにするため、レベル、MITRE ATT&CK戦術、チャンネル、プロバイダ、フィールド名などを省略しています。\n\n`b, --disable-abbreviations`オプションで、これらの省略のいくつかを無効にして、元々のチャンネル名、プロバイダ名などを表示することができます。\n\n### Levelの省略\n\n簡潔に出力するために`level`を以下のように省略し出力しています。\n\n* `crit`: `critical`\n* `high`: `high`\n* `med `: `medium`\n* `low `: `low`\n* `info`: `informational`\n\n### MITRE ATT&CK戦術の省略\n\n簡潔に出力するためにMITRE ATT&CKの戦術を以下のように省略しています。\n`./config/mitre_tactics.txt`の設定ファイルで自由に編集できます。\n\n* `Recon` : Reconnaissance (偵察)\n* `ResDev` : Resource Development (リソース開発)\n* `InitAccess` : Initial Access (初期アクセス)\n* `Exec` : Execution (実行)\n* `Persis` : Persistence (永続化)\n* `PrivEsc` : Privilege Escalation (権限昇格)\n* `Evas` : Defense Evasion (防御回避)\n* `CredAccess` : Credential Access (認証情報アクセス)\n* `Disc` : Discovery (探索)\n* `LatMov` : Lateral Movement (横展開)\n* `Collect` : Collection (収集)\n* `C2` : Command and Control (遠隔操作)\n* `Exfil` : Exfiltration (持ち出し)\n* `Impact` : Impact (影響)\n\n### Channel情報の省略\n\n簡潔に出力するためにChannelの表示を以下のように省略しています。\n`./rules/config/channel_abbreviations.txt`の設定ファイルで自由に編集できます。\n\n* `App` : `Application`\n* `AppLocker` : `Microsoft-Windows-AppLocker/*`\n* `BitsCli` : `Microsoft-Windows-Bits-Client/Operational`\n* `CodeInteg` : `Microsoft-Windows-CodeIntegrity/Operational`\n* `Defender` : `Microsoft-Windows-Windows Defender/Operational`\n* `DHCP-Svr` : `Microsoft-Windows-DHCP-Server/Operational`\n* `DNS-Svr` : `DNS Server`\n* `DvrFmwk` : `Microsoft-Windows-DriverFrameworks-UserMode/Operational`\n* `Exchange` : `MSExchange Management`\n* `Firewall` : `Microsoft-Windows-Windows Firewall With Advanced Security/Firewall`\n* `KeyMgtSvc` : `Key Management Service`\n* `LDAP-Cli` : `Microsoft-Windows-LDAP-Client/Debug`\n* `NTLM` `Microsoft-Windows-NTLM/Operational`\n* `OpenSSH` : `OpenSSH/Operational`\n* `PrintAdm` : `Microsoft-Windows-PrintService/Admin`\n* `PrintOp` : `Microsoft-Windows-PrintService/Operational`\n* `PwSh` : `Microsoft-Windows-PowerShell/Operational`\n* `PwShClassic` : `Windows PowerShell`\n* `RDP-Client` : `Microsoft-Windows-TerminalServices-RDPClient/Operational`\n* `Sec` : `Security`\n* `SecMitig` : `Microsoft-Windows-Security-Mitigations/*`\n* `SmbCliSec` : `Microsoft-Windows-SmbClient/Security`\n* `SvcBusCli` : `Microsoft-ServiceBus-Client`\n* `Sys` : `System`\n* `Sysmon` : `Microsoft-Windows-Sysmon/Operational`\n* `TaskSch` : `Microsoft-Windows-TaskScheduler/Operational`\n* `WinRM` : `Microsoft-Windows-WinRM/Operational`\n* `WMI` : `Microsoft-Windows-WMI-Activity/Operational`\n\n### その他の省略\n\nできるだけ簡潔にするために、以下の略語を使用しています:\n\n* `Acct` -> Account\n* `Addr` -> Address\n* `Auth` -> Authentication\n* `Cli` -> Client\n* `Chan` -> Channel\n* `Cmd` -> Command\n* `Cnt` -> Count\n* `Comp` -> Computer\n* `Conn` -> Connection/Connected\n* `Creds` -> Credentials\n* `Crit` -> Critical\n* `Disconn` -> Disconnection/Disconnected\n* `Dir` -> Directory\n* `Drv` -> Driver\n* `Dst` -> Destination\n* `EID` -> Event ID\n* `Err` -> Error\n* `Exec` -> Execution\n* `FW` -> Firewall\n* `Grp` -> Group\n* `Img` -> Image\n* `Inj` -> Injection\n* `Krb` -> Kerberos\n* `LID` -> Logon ID\n* `Med` -> Medium\n* `Net` -> Network\n* `Obj` -> Object\n* `Op` -> Operational/Operation\n* `Proto` -> Protocol\n* `PW` -> Password\n* `Reconn` -> Reconnection\n* `Req` -> Request\n* `Rsp` -> Response\n* `Sess` -> Session\n* `Sig` -> Signature\n* `Susp` -> Suspicious\n* `Src` -> Source\n* `Svc` -> Service\n* `Svr` -> Server\n* `Temp` -> Temporary\n* `Term` -> Termination/Terminated\n* `Tkt` -> Ticket\n* `Tgt` -> Target\n* `Unkwn` -> Unknown\n* `Usr` -> User\n* `Perm` -> Permament\n* `Pkg` -> Package\n* `Priv` -> Privilege\n* `Proc` -> Process\n* `PID` -> Process ID\n* `PGUID` -> Process GUID (Global Unique ID)\n* `Ver` -> Version\n\n## プログレスバー\n\nプログレス・バーは、複数のevtxファイルに対してのみ機能します。\n解析したevtxファイルの数と割合をリアルタイムで表示します。\n\n## カラー出力\n\nHayabusaの結果は`level`毎に文字色が変わります。\n`./config/level_color.txt`の値を変更することで文字色を変えることができます。形式は`level名,(6桁のRGBのカラーhex)`です。\nカラー出力をしないようにしたい場合は`--no-color`オプションをご利用ください。\n\n## 結果のサマリ (Results Summary)\n\n元々のイベント数、検知したイベント数、データ削減の統計、検知数情報、最多検知日、最多検知端末名、最多アラート等の情報がスキャン後に出力されます。\n\n### 検知頻度タイムライン\n\n`-T, --visualize-timeline`オプションを使うことで、検知したイベントの数が5以上の時、頻度のタイムライン(スパークライン)を画面に出力します。\nマーカーの数は最大10個です。デフォルトのCommand PromptとPowerShell Promptでは文字化けがでるので、Windows TerminalやiTerm2等のターミナルをご利用ください。\n\n# Hayabusaルール\n\nHayabusa検知ルールはSigmaのようなYML形式で記述され、`rules`ディレクトリに入っています。\n[https://github.com/Yamato-Security/hayabusa-rules](https://github.com/Yamato-Security/hayabusa-rules)のレポジトリで管理しているので、ルールのissueやpull requestはhayabusaのレポジトリではなく、ルールレポジトリへお願いします。\n\nルールの作成方法については、[hayabusa-rulesレポジトリのREADME](https://github.com/Yamato-Security/hayabusa-rules/blob/main/README-Japanese.md) をお読みください。\n\n[hayabusa-rulesレポジトリ](https://github.com/Yamato-Security/hayabusa-rules)にあるすべてのルールは、`rules`フォルダに配置する必要があります。\n`level`がinformationのルールは`イベント`とみなされ、`low`以上は`アラート`とみなされます。\n\nHayabusaルールのディレクトリ構造は、2つのディレクトリに分かれています:\n\n* `builtin`: Windowsの組み込み機能で生成できるログ。\n* `sysmon`: [sysmon](https://docs.microsoft.com/en-us/sysinternals/downloads/sysmon)によって生成されるログ。\n\nルールはさらにログタイプ（例：Security、Systemなど）によってディレクトリに分けられ、次の形式で名前が付けられます。\n\n現在のルールをご確認いただき、新規作成時のテンプレートとして、また検知ロジックの確認用としてご利用ください。\n\n## Sigma v.s. Hayabusa(ビルトインSigmaとの互換性のある)ルール\n\nHayabusaは、`logsource`フィールドを内部で処理することを唯一の例外として、Sigmaルールをネイティブにサポートしています。\n過検知を減らすため、コンバータで変換した方が良いです。変換のやり方は[ここ](https://github.com/Yamato-Security/hayabusa-rules/tree/main/tools/sigmac/README-Japanese.md)で説明されています。\nこれにより、適切な`Channel`と`EventID`が追加され、`process_creation`のような特定のカテゴリに対してフィールドマッピングが行われます。\n\n殆どのルールはSigmaルールと互換性があるので、Sigmaルールのようにその他のSIEM形式に変換できます。\nHayabusaルールは、Windowsのイベントログ解析専用に設計されており、以下のような利点があります:\n\n1. ログの有用なフィールドのみから抽出された追加情報を表示するための`details`フィールドを追加しています。\n2. Hayabusaルールはすべてサンプルログに対してテストされ、検知することが確認されています。\n3. Sigmaルール仕様にない集計式(例：`|equalsfield`、`|endswithfield`)の利用。\n\n私たちの知る限り、HayabusaはオープンソースのWindowsイベントログ解析ツールの中でSigmaルールを最も多くサポートしています。\n\n# その他のWindowsイベントログ解析ツールおよび関連リソース\n\n* [APT-Hunter](https://github.com/ahmedkhlief/APT-Hunter) - Pythonで開発された攻撃検知ツール。\n* [Awesome Event IDs](https://github.com/stuhli/awesome-event-ids) -  フォレンジック調査とインシデント対応に役立つイベントIDのリソース。\n* [Chainsaw](https://github.com/countercept/chainsaw) - Rustで開発されたSigmaベースの攻撃検知ツール。\n* [DeepBlueCLI](https://github.com/sans-blue-team/DeepBlueCLI) - [Eric Conrad](https://twitter.com/eric_conrad) によってPowershellで開発された攻撃検知ツール。\n* [Epagneul](https://github.com/jurelou/epagneul) - Windowsイベントログの可視化ツール。\n* [EventList](https://github.com/miriamxyra/EventList/) - [Miriam Wiesner](https://github.com/miriamxyra)によるセキュリティベースラインの有効なイベントIDをMITRE ATT&CKにマッピングするPowerShellツール。\n* [MITRE ATT&CKとWindowイベントログIDのマッピング](https://www.socinvestigation.com/mapping-mitre-attck-with-window-event-log-ids/) - 作者：[Michel de CREVOISIER](https://twitter.com/mdecrevoisier)\n* [EvtxECmd](https://github.com/EricZimmerman/evtx) - [Eric Zimmerman](https://twitter.com/ericrzimmerman)によるEvtxパーサー。\n* [EVTXtract](https://github.com/williballenthin/EVTXtract) - 未使用領域やメモリダンプからEVTXファイルを復元するツール。\n* [EvtxToElk](https://www.dragos.com/blog/industry-news/evtxtoelk-a-python-module-to-load-windows-event-logs-into-elasticsearch/) - Elastic StackにEvtxデータを送信するPythonツール。\n* [EVTX ATTACK Samples](https://github.com/sbousseaden/EVTX-ATTACK-SAMPLES) - [SBousseaden](https://twitter.com/SBousseaden) によるEVTX攻撃サンプルイベントログファイル。\n* [EVTX-to-MITRE-Attack](https://github.com/mdecrevoisier/EVTX-to-MITRE-Attack) - [Michel de CREVOISIER](https://twitter.com/mdecrevoisier)によるATT&CKにマッピングされたEVTX攻撃サンプルログのレポジトリ。\n* [EVTX parser](https://github.com/omerbenamram/evtx) - [@OBenamram](https://twitter.com/obenamram) によって書かれた、Hayabusaが使用しているRustライブラリ。\n* [Grafiki](https://github.com/lucky-luk3/Grafiki) - SysmonとPowerShellログの可視化ツール。\n* [LogonTracer](https://github.com/JPCERTCC/LogonTracer) - [JPCERTCC](https://twitter.com/jpcert) による、横方向の動きを検知するためにログオンを視覚化するグラフィカルなインターフェース。\n* [NSA Windows Event Monitoring Guidance](https://github.com/nsacyber/Event-Forwarding-Guidance/tree/master/Events) - NSAのWindowsイベントログ監視ガイド。\n* [RustyBlue](https://github.com/Yamato-Security/RustyBlue) - 大和セキュリティによるDeepBlueCLIのRust版。\n* [Sigma](https://github.com/SigmaHQ/Sigma) - コミュニティベースの汎用SIEMルール。\n* [SOF-ELK](https://github.com/philhagen/sof-elk) - [Phil Hagen](https://twitter.com/philhagen) によるDFIR解析用のElastic Stack VM。\n* [so-import-evtx](https://docs.securityonion.net/en/2.3/so-import-evtx.html) - evtxファイルをSecurityOnionにインポートするツール。\n* [SysmonTools](https://github.com/nshalabi/SysmonTools) - Sysmonの設定とオフライン可視化ツール。\n* [Timeline Explorer](https://ericzimmerman.github.io/#!index.md) - [Eric Zimmerman](https://twitter.com/ericrzimmerman) による最高のCSVタイムラインアナライザ。\n* [Windows Event Log Analysis - Analyst Reference](https://www.forwarddefense.com/media/attachments/2021/05/15/windows-event-log-analyst-reference.pdf) - Forward DefenseのSteve AnsonによるWindowsイベントログ解析の参考資料。\n* [Zircolite](https://github.com/wagga40/Zircolite) - Pythonで書かれたSigmaベースの攻撃検知ツール。\n\n# Windowsイベントログ設定のススメ\n\nWindows機での悪性な活動を検知する為には、デフォルトのログ設定を改善することが必要です。\nどのようなログ設定を有効にする必要があるのか、また、自動的に適切な設定を有効にするためのスクリプトを、別のプロジェクトとして作成しました: [https://github.com/Yamato-Security/EnableWindowsLogSettings](https://github.com/Yamato-Security/EnableWindowsLogSettings)\n\n以下のサイトを閲覧することもおすすめします。:\n\n* [JSCU-NL (Joint Sigint Cyber Unit Netherlands) Logging Essentials](https://github.com/JSCU-NL/logging-essentials)\n* [ACSC (Australian Cyber Security Centre) Logging and Fowarding Guide](https://www.cyber.gov.au/acsc/view-all-content/publications/windows-event-logging-and-forwarding)\n* [Malware Archaeology Cheat Sheets](https://www.malwarearchaeology.com/cheat-sheets)\n\n# Sysmon関係のプロジェクト\n\nフォレンジックに有用な証拠を作り、高い精度で検知をさせるためには、sysmonをインストールする必要があります。以下のサイトを参考に設定することをおすすめします。:\n\n* [Sysmon Modular](https://github.com/olafhartong/sysmon-modular)\n* [TrustedSec Sysmon Community Guide](https://github.com/trustedsec/SysmonCommunityGuide)\n* [SwiftOnSecurityのSysmon設定ファイル](https://github.com/SwiftOnSecurity/sysmon-config)\n* [Neo23x0によるSwiftOnSecurityのSysmon設定ファイルのフォーク](https://github.com/Neo23x0/sysmon-config)\n* [ion-stormによるSwiftOnSecurityのSysmon設定ファイルのフォーク](https://github.com/ion-storm/sysmon-config)\n\n# コミュニティによるドキュメンテーション\n\n## 英語\n\n* 2023/12/11 Christian Henriksen氏による[Unleashing the Hayabusa Feathers: My Top Features Revealed!](https://detect.fyi/hunting-with-hayabusa-tool-showcase-aafef7434413)\n* 2023/10/16 Md. Mahim Bin Firoj氏による[Incident response and threat hunting using hayabusa tool](https://mahim-firoj.medium.com/incident-response-and-threat-hunting-using-hayabusa-tool-383da273183a)\n* 2023/03/21 [Eric Capuano](https://twitter.com/eric_capuano)氏による[Find Threats in Event Logs with Hayabusa](https://blog.ecapuano.com/p/find-threats-in-event-logs-with-hayabusa)\n* 2023/03/14 Fukusuke Takahashi氏による[Hayabusa開発者向けRustパフォーマンスガイド](doc/RustPerformance-English.md)\n* 2022/06/19 [Eric Capuano](https://twitter.com/eric_capuano)氏による[VelociraptorチュートリアルとHayabusaの統合方法](https://www.youtube.com/watch?v=Q1IoGX--814)\n* 2022/01/24 Matthew Seyer ([@forensic_matt](https://twitter.com/forensic_matt))氏による[Hayabusa結果をneo4jで可視化する方法](https://www.youtube.com/watch?v=7sQqz2ek-ko)\n\n## 日本語\n\n* 2024/01/24 NECセキュリティブログ: [LME × Hayabusa　－　Windowsイベントログの集約と解析の効率化](https://jpn.nec.com/cybersecurity/blog/240126/index.html)\n* 2023/09/29 NECセキュリティブログ: [HayabusaとSplunkによるファストフォレンジック効率化](https://jpn.nec.com/cybersecurity/blog/230929/index.html)\n* 2023/09/13 FFRIセキュリティブログ: [HayabusaによるWindowsイベントログ解析](https://engineers.ffri.jp/entry/2023/09/13/130750)\n* 2023/03/14 Fukusuke Takahashi氏による[Hayabusa開発者向けRustパフォーマンスガイド](doc/RustPerformance-Japanese.md)\n* 2022/01/22 [@kzzzzo2](https://qiita.com/kzzzzo2)氏による[Hayabusa結果をElastic Stackで可視化する方法](https://qiita.com/kzzzzo2/items/ead8ccc77b7609143749)\n* 2021/12/31 itiB ([@itiB_S144](https://twitter.com/itiB_S144))氏による[Windowsイベントログ解析ツール「Hayabusa」を使ってみる](https://itib.hatenablog.com/entry/2021/12/31/222946)\n* 2021/12/27 Kazuminn ([@k47_um1n](https://twitter.com/k47_um1n))氏による[Hayabusaの中身](https://kazuminkun.hatenablog.com/entry/2021/12/27/190535)\n\n# 貢献\n\nどのような形でも構いませんので、ご協力をお願いします。\nプルリクエスト、ルール作成、evtxログのサンプルなどがベストですが、機能リクエスト、バグの通知なども大歓迎です。\n\n少なくとも、私たちのツールを気に入っていただけたなら、GitHubで星を付けて、あなたのサポートを表明してください。\n\n# バグの報告\n\n見つけたバグを[こちら](https://github.com/Yamato-Security/hayabusa/issues/new?assignees=&labels=bug&template=bug_report.md&title=%5Bbug%5D)でご連絡ください。\n報告されたバグを喜んで修正します！\n\nHayabusaルールの問題点（誤検出、バグ等々）を発見された方は、hayabusa-rulesのGitHubの[Issues](https://github.com/Yamato-Security/hayabusa-rules/issues/new)ページにご報告ください。\n\nSigmaルールの問題点（誤検出、バグ等々）を発見された方は、上流のSigmaHQ GitHubの[Issues](https://github.com/SigmaHQ/sigma/issues)ページにご報告ください。\n\n# ライセンス\n\nHayabusaは[AGPLv3](https://gpl.mhatta.org/agpl.ja.html)で公開され、すべてのルールは[Detection Rule License (DRL) 1.1](https://github.com/SigmaHQ/sigma/blob/master/LICENSE.Detection.Rules.md)で公開されています。\nHayabusaの社内利用、SaaSソリューションの利用、コンサルティングの利用などは自由です。\nただし、SaaS型ソリューションでHayabusaを利用し、改良を加えた場合は、その改良をオープンソース化し、プロジェクトに還元してください。\n\nHayabusaは、MaxMind社が作成したGeoLite2データを使用しており、[https://www.maxmind.com](https://www.maxmind.com)から入手可能です。\n\n# Twitter\n\n[@SecurityYamato](https://twitter.com/SecurityYamato)でHayabusa、ルール更新、その他の大和セキュリティツール等々について情報を提供しています。"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 108.18359375,
          "content": "<div align=\"center\">\n <p>\n    <img alt=\"Hayabusa Logo\" src=\"logo.png\" width=\"60%\">\n </p>\n [ <b>English</b> ] | [<a href=\"README-Japanese.md\">日本語</a>]\n</div>\n\n---\n\n<p align=\"center\">\n    <a href=\"https://github.com/Yamato-Security/hayabusa/releases\"><img src=\"https://img.shields.io/github/v/release/Yamato-Security/hayabusa?color=blue&label=Stable%20Version&style=flat\"/></a>\n    <a href=\"https://github.com/Yamato-Security/hayabusa/releases\"><img src=\"https://img.shields.io/github/downloads/Yamato-Security/hayabusa/total?style=flat&label=GitHub%F0%9F%A6%85Downloads&color=blue\"/></a>\n    <a href=\"https://github.com/Yamato-Security/hayabusa/stargazers\"><img src=\"https://img.shields.io/github/stars/Yamato-Security/hayabusa?style=flat&label=GitHub%F0%9F%A6%85Stars\"/></a>\n    <a href=\"https://github.com/Yamato-Security/hayabusa/graphs/contributors\"><img src=\"https://img.shields.io/github/contributors/Yamato-Security/hayabusa?label=Contributors&color=blue&style=flat\"/></a>\n    <a href=\"https://www.blackhat.com/asia-22/arsenal/schedule/#hayabusa-26211\"><img src=\"https://raw.githubusercontent.com/toolswatch/badges/master/arsenal/asia/2022.svg\"></a>\n    <a href=\"https://codeblue.jp/2022/en/talks/?content=talks_24\"><img src=\"https://img.shields.io/badge/CODE%20BLUE%20Bluebox-2022-blue\"></a>\n    <a href=\"https://www.seccon.jp/2022/seccon_workshop/windows.html\"><img src=\"https://img.shields.io/badge/SECCON-2023-blue\"></a>\n    <a href=\"https://www.security-camp.or.jp/minicamp/tokyo2023.html\"><img src=\"https://img.shields.io/badge/Security%20MiniCamp%20Tokyo-2023-blue\"></a>\n    <a href=\"https://www.sans.org/cyber-security-training-events/digital-forensics-summit-2023/\"><img src=\"https://img.shields.io/badge/SANS%20DFIR%20Summit-2023-blue\"></a>\n    <a href=\"https://bsides.tokyo/2024/\"><img src=\"https://img.shields.io/badge/BSides%20Tokyo-2024-blue\"></a>\n    <a href=\"https://www.hacker.or.jp/hack-fes-2024/\"><img src=\"https://img.shields.io/badge/Hack%20Fes.-2024-blue\"></a>\n    <a href=\"https://hitcon.org/2024/CMT/\"><img src=\"https://img.shields.io/badge/HITCON-2024-blue\"></a>\n    <a href=\"https://www.blackhat.com/sector/2024/briefings/schedule/index.html#performing-dfir-and-threat-hunting-with-yamato-security-oss-tools-and-community-driven-knowledge-41347\"><img src=\"https://img.shields.io/badge/SecTor-2024-blue\"></a>\n    <a href=\"Maintenance Level\"><img src=\"https://img.shields.io/badge/Maintenance%20Level-Actively%20Developed-brightgreen.svg\" /></a>\n    <a href=\"Total Commits\"><img src=\"https://img.shields.io/github/commit-activity/t/Yamato-Security/hayabusa/main\" /></a>\n    <a href=\"https://rust-reportcard.xuri.me/report/github.com/Yamato-Security/hayabusa\"><img src=\"https://rust-reportcard.xuri.me/badge/github.com/Yamato-Security/hayabusa\" /></a>\n    <a href=\"https://codecov.io/gh/Yamato-Security/hayabusa\" ><img src=\"https://codecov.io/gh/Yamato-Security/hayabusa/branch/main/graph/badge.svg?token=WFN5XO9W8C\"/></a>\n    <a href=\"https://twitter.com/SecurityYamato\"><img src=\"https://img.shields.io/twitter/follow/SecurityYamato?style=social\"/></a>\n</p>\n\n# About Hayabusa\n\nHayabusa is a **Windows event log fast forensics timeline generator** and **threat hunting tool** created by the [Yamato Security](https://yamatosecurity.connpass.com/) group in Japan.\nHayabusa means [\"peregrine falcon\"](https://en.wikipedia.org/wiki/Peregrine_falcon) in Japanese and was chosen as peregrine falcons are the fastest animal in the world, great at hunting and highly trainable.\nIt is written in memory-safe [Rust](https://www.rust-lang.org/), supports multi-threading in order to be as fast as possible and is the only open-source tool that has full support for the Sigma specification including v2 correlation rules.\nHayabusa can handle parsing [upstream Sigma](https://github.com/SigmaHQ/sigma) rules, however, the Sigma rules that we use and host in the [hayabusa-rules repository](https://github.com/Yamato-Security/hayabusa-rules) have some conversion done to them in order to make rule loading more flexible and reduce false positives.\nYou can read the details about this at the [sigma-to-hayabusa-converter repository](https://github.com/Yamato-Security/sigma-to-hayabusa-converter) README file.\nHayabusa can be run either on single running systems for live analysis, by gathering logs from single or multiple systems for offline analysis, or by running the [Hayabusa artifact](https://docs.velociraptor.app/exchange/artifacts/pages/windows.eventlogs.hayabusa/) with [Velociraptor](https://docs.velociraptor.app/) for enterprise-wide threat hunting and incident response.\nThe output will be consolidated into a single CSV/JSON/JSONL timeline for easy analysis in [LibreOffice](https://www.libreoffice.org/), [Timeline Explorer](https://ericzimmerman.github.io/#!index.md) [Elastic Stack](doc/ElasticStackImport/ElasticStackImport-English.md), [Timesketch](https://timesketch.org/), etc...\n\n# Companion Projects\n\n* [EnableWindowsLogSettings](https://github.com/Yamato-Security/EnableWindowsLogSettings) - Documentation and scripts to properly enable Windows event logs.\n* [Hayabusa Encoded Rules](https://github.com/Yamato-Security/hayabusa-encoded-rules) - The same as Hayabusa Rules repository but the rules and config files are stored in one file and XORed to prevent false positives from anti-virus.\n* [Hayabusa Rules](https://github.com/Yamato-Security/hayabusa-rules) - Hayabusa and curated Sigma detection rules used Hayabusa.\n* [Hayabusa EVTX](https://github.com/Yamato-Security/hayabusa-evtx) - A more maintained fork of the `evtx` crate.\n* [Hayabusa Sample EVTXs](https://github.com/Yamato-Security/hayabusa-sample-evtx) - Sample evtx files to use for testing hayabusa/sigma detection rules.\n* [Presentations](https://github.com/Yamato-Security/Presentations) - Presentations from talks that we have given about our tools and resources.\n* [Sigma to Hayabusa Converter](https://github.com/Yamato-Security/sigma-to-hayabusa-converter) - Curates upstream Windows event log based Sigma rules into an easier to use form.\n* [Takajo](https://github.com/Yamato-Security/takajo) - An analyzer for hayabusa results.\n* [WELA (Windows Event Log Analyzer)](https://github.com/Yamato-Security/WELA) - An analyzer for Windows event logs written in PowerShell. (Deprecated and replaced by Takajo.)\n\n# Third-Party Projects That Use Hayabusa\n\n* [AllthingsTimesketch](https://github.com/blueteam0ps/AllthingsTimesketch) - A NodeRED workflow that imports Plaso and Hayabusa results into Timesketch.\n* [LimaCharlie](https://docs.limacharlie.io/docs/extensions-third-party-extensions-hayabusa) - Provides cloud-based security tools and infrastructure to fit your needs. \n* [OpenRelik](https://openrelik.org/) - An open-source (Apache-2.0) platform designed to streamline collaborative digital forensic investigations.\n* [Splunk4DFIR](https://github.com/mf1d3l/Splunk4DFIR) - Quickly spin up a splunk instance with Docker to browse through logs and tools output during your investigations.\n* [Velociraptor](https://github.com/Velocidex/velociraptor) - A tool for collecting host based state information using The Velociraptor Query Language (VQL) queries.\n\n## Table of Contents\n\n- [About Hayabusa](#about-hayabusa)\n- [Companion Projects](#companion-projects)\n- [Third-Party Projects That Use Hayabusa](#third-party-projects-that-use-hayabusa)\n  - [Table of Contents](#table-of-contents)\n  - [Main Goals](#main-goals)\n    - [Threat Hunting and Enterprise-wide DFIR](#threat-hunting-and-enterprise-wide-dfir)\n    - [Fast Forensics Timeline Generation](#fast-forensics-timeline-generation)\n- [Screenshots](#screenshots)\n  - [Startup](#startup)\n  - [DFIR Timeline Terminal Output](#dfir-timeline-terminal-output)\n  - [Keyword Search Results](#keyword-search-results)\n  - [Detection Fequency Timeline (`-T` option)](#detection-fequency-timeline--t-option)\n  - [Results Summary](#results-summary)\n  - [HTML Results Summary (`-H` option)](#html-results-summary--h-option)\n  - [DFIR Timeline Analysis in LibreOffice (`-M` Multiline Output)](#dfir-timeline-analysis-in-libreoffice--m-multiline-output)\n  - [DFIR Timeline Analysis in Timeline Explorer](#dfir-timeline-analysis-in-timeline-explorer)\n  - [Critical Alert Filtering and Computer Grouping in Timeline Explorer](#critical-alert-filtering-and-computer-grouping-in-timeline-explorer)\n  - [Analysis with the Elastic Stack Dashboard](#analysis-with-the-elastic-stack-dashboard)\n  - [Analysis in Timesketch](#analysis-in-timesketch)\n- [Importing and Analyzing Timeline Results](#importing-and-analyzing-timeline-results)\n- [Analyzing JSON-formatted results with JQ](#analyzing-json-formatted-results-with-jq)\n- [Features](#features)\n- [Downloads](#downloads)\n  - [Windows live response packages](#windows-live-response-packages)\n- [Git Cloning](#git-cloning)\n- [Advanced: Compiling From Source (Optional)](#advanced-compiling-from-source-optional)\n  - [Updating Rust Packages](#updating-rust-packages)\n  - [Cross-compiling 32-bit Windows Binaries](#cross-compiling-32-bit-windows-binaries)\n  - [macOS Compiling Notes](#macos-compiling-notes)\n  - [Linux Compiling Notes](#linux-compiling-notes)\n  - [Cross-compiling Linux MUSL Binaries](#cross-compiling-linux-musl-binaries)\n- [Running Hayabusa](#running-hayabusa)\n  - [Caution: Anti-Virus/EDR Warnings and Slow Runtimes](#caution-anti-virusedr-warnings-and-slow-runtimes)\n  - [Windows](#windows)\n    - [Error when trying to scan a file or directory with a space in the path](#error-when-trying-to-scan-a-file-or-directory-with-a-space-in-the-path)\n    - [Characters not being displayed correctly](#characters-not-being-displayed-correctly)\n  - [Linux](#linux)\n  - [macOS](#macos)\n- [Command List](#command-list)\n  - [Analysis Commands:](#analysis-commands)\n  - [DFIR Timeline Commands:](#dfir-timeline-commands)\n  - [General Commands:](#general-commands)\n- [Command Usage](#command-usage)\n  - [Analysis Commands](#analysis-commands-1)\n    - [`computer-metrics` command](#computer-metrics-command)\n      - [`computer-metrics` command examples](#computer-metrics-command-examples)\n      - [`computer-metrics` screenshot](#computer-metrics-screenshot)\n    - [`eid-metrics` command](#eid-metrics-command)\n      - [`eid-metrics` command examples](#eid-metrics-command-examples)\n      - [`eid-metrics` command config file](#eid-metrics-command-config-file)\n      - [`eid-metrics` screenshot](#eid-metrics-screenshot)\n    - [`expand-list` command](#expand-list-command)\n      - [`expand-list` command examples](#expand-list-command-examples)\n      - [`expand-list` results](#expand-list-results)\n    - [`extract-base64` command](#extract-base64-command)\n      - [`extract-base64` command examples](#extract-base64-command-examples)\n      - [`extract-base64` results](#extract-base64-results)\n    - [`log-metrics` command](#log-metrics-command)\n      - [`log-metrics` command examples](#log-metrics-command-examples)\n      - [`log-metrics` screenshot](#log-metrics-screenshot)\n    - [`logon-summary` command](#logon-summary-command)\n      - [`logon-summary` command examples](#logon-summary-command-examples)\n      - [`logon-summary` screenshots](#logon-summary-screenshots)\n    - [`pivot-keywords-list` command](#pivot-keywords-list-command)\n      - [`pivot-keywords-list` command examples](#pivot-keywords-list-command-examples)\n      - [`pivot-keywords-list` config file](#pivot-keywords-list-config-file)\n    - [`search` command](#search-command)\n      - [`search` command examples](#search-command-examples)\n      - [`search` command config files](#search-command-config-files)\n  - [DFIR Timeline Commands](#dfir-timeline-commands-1)\n    - [Scan Wizard](#scan-wizard)\n      - [Core Rules](#core-rules)\n      - [Core+ Rules](#core-rules-1)\n      - [Core++ Rules](#core-rules-2)\n      - [Emerging Threats (ET) Add-On Rules](#emerging-threats-et-add-on-rules)\n      - [Threat Hunting (TH) Add-On Rules](#threat-hunting-th-add-on-rules)\n    - [Channel-based event log and rules filtering](#channel-based-event-log-and-rules-filtering)\n    - [`csv-timeline` command](#csv-timeline-command)\n      - [`csv-timeline` command examples](#csv-timeline-command-examples)\n      - [Advanced - GeoIP Log Enrichment](#advanced---geoip-log-enrichment)\n        - [GeoIP config file](#geoip-config-file)\n        - [Automatic updates of GeoIP databases](#automatic-updates-of-geoip-databases)\n      - [`csv-timeline` command config files](#csv-timeline-command-config-files)\n    - [`json-timeline` command](#json-timeline-command)\n      - [`json-timeline` command examples and config files](#json-timeline-command-examples-and-config-files)\n    - [`level-tuning` command](#level-tuning-command)\n      - [`level-tuning` command examples](#level-tuning-command-examples)\n      - [`level-tuning` config file](#level-tuning-config-file)\n    - [`list-profiles` command](#list-profiles-command)\n    - [`set-default-profile` command](#set-default-profile-command)\n      - [`set-default-profile` command examples](#set-default-profile-command-examples)\n    - [`update-rules` command](#update-rules-command)\n      - [`update-rules` command example](#update-rules-command-example)\n- [Timeline Output](#timeline-output)\n  - [Output Profiles](#output-profiles)\n    - [1. `minimal` profile output](#1-minimal-profile-output)\n    - [2. `standard` profile output](#2-standard-profile-output)\n    - [3. `verbose` profile output](#3-verbose-profile-output)\n    - [4. `all-field-info` profile output](#4-all-field-info-profile-output)\n    - [5. `all-field-info-verbose` profile output](#5-all-field-info-verbose-profile-output)\n    - [6. `super-verbose` profile output](#6-super-verbose-profile-output)\n    - [7. `timesketch-minimal` profile output](#7-timesketch-minimal-profile-output)\n    - [8. `timesketch-verbose` profile output](#8-timesketch-verbose-profile-output)\n    - [Profile Comparison](#profile-comparison)\n    - [Profile Field Aliases](#profile-field-aliases)\n      - [Extra Profile Field Aliases](#extra-profile-field-aliases)\n  - [Abbreviations](#abbreviations)\n    - [Level Abbreviations](#level-abbreviations)\n    - [MITRE ATT\\&CK Tactics Abbreviations](#mitre-attck-tactics-abbreviations)\n    - [Channel Abbreviations](#channel-abbreviations)\n    - [Other Abbreviations](#other-abbreviations)\n  - [Progress Bar](#progress-bar)\n  - [Color Output](#color-output)\n  - [Results Summary](#results-summary-1)\n    - [Detection Fequency Timeline](#detection-fequency-timeline)\n- [Hayabusa Rules](#hayabusa-rules)\n  - [Sigma v.s. Hayabusa (Built-in Sigma Compatible) Rules](#sigma-vs-hayabusa-built-in-sigma-compatible-rules)\n- [Other Windows Event Log Analyzers and Related Resources](#other-windows-event-log-analyzers-and-related-resources)\n- [Windows Logging Recommendations](#windows-logging-recommendations)\n- [Sysmon Related Projects](#sysmon-related-projects)\n- [Community Documentation](#community-documentation)\n  - [English](#english)\n  - [Japanese](#japanese)\n- [Contribution](#contribution)\n- [Bug Submission](#bug-submission)\n- [License](#license)\n- [Twitter](#twitter)\n\n## Main Goals\n\n### Threat Hunting and Enterprise-wide DFIR\n\nHayabusa currently has over 4000 Sigma rules and over 170 Hayabusa built-in detection rules with more rules being added regularly.\nIt can be used for enterprise-wide proactive threat hunting as well as DFIR (Digital Forensics and Incident Response) for free with [Velociraptor](https://docs.velociraptor.app/)'s [Hayabusa artifact](https://docs.velociraptor.app/exchange/artifacts/pages/windows.eventlogs.hayabusa/).\nBy combining these two open-source tools, you can essentially retroactively reproduce a SIEM when there is no SIEM setup in the environment.\nYou can learn about how to do this by watching [Eric Capuano](https://twitter.com/eric_capuano)'s Velociraptor walkthrough [here](https://www.youtube.com/watch?v=Q1IoGX--814).\n\n### Fast Forensics Timeline Generation\n\nWindows event log analysis has traditionally been a very long and tedious process because Windows event logs are 1) in a data format that is hard to analyze and 2) the majority of data is noise and not useful for investigations.\nHayabusa's goal is to extract out only useful data and present it in a concise as possible easy-to-read format that is usable not only by professionally trained analysts but any Windows system administrator.\nHayabusa hopes to let analysts get 80% of their work done in 20% of the time when compared to traditional Windows event log analysis.\n\n![DFIR Timeline](doc/DFIR-TimelineCreation-EN.png)\n\n# Screenshots\n\n## Startup\n\n![Hayabusa Startup](screenshots/Startup.png)\n\n## DFIR Timeline Terminal Output\n\n![Hayabusa DFIR terminal output](screenshots/Results.png)\n\n## Keyword Search Results\n\n![Hayabusa search results](screenshots/SearchResults.png)\n\n## Detection Fequency Timeline (`-T` option)\n\n![Hayabusa Detection Frequency Timeline](screenshots/DetectionFrequencyTimeline.png)\n\n## Results Summary\n\n![Hayabusa results summary](screenshots/ResultsSummary.png)\n\n## HTML Results Summary (`-H` option)\n\n![Hayabusa results summary](screenshots/HTML-ResultsSummary-1.png)\n\n![Hayabusa results summary](screenshots/HTML-ResultsSummary-2.png)\n\n![Hayabusa results summary](screenshots/HTML-ResultsSummary-3.png)\n\n## DFIR Timeline Analysis in LibreOffice (`-M` Multiline Output)\n\n![Hayabusa analysis in LibreOffice](screenshots/DFIR-TimelineLibreOfficeMultiline.jpeg)\n\n## DFIR Timeline Analysis in Timeline Explorer\n\n![Hayabusa analysis in Timeline Explorer](screenshots/TimelineExplorer-ColoredTimeline.png)\n\n## Critical Alert Filtering and Computer Grouping in Timeline Explorer\n\n![Critical alert filtering and computer grouping in Timeline Explorer](screenshots/TimelineExplorer-CriticalAlerts-ComputerGrouping.png)\n\n## Analysis with the Elastic Stack Dashboard\n\n![Elastic Stack Dashboard 1](doc/ElasticStackImport/17-HayabusaDashboard-1.png)\n\n![Elastic Stack Dashboard 2](doc/ElasticStackImport/18-HayabusaDashboard-2.png)\n\n## Analysis in Timesketch\n\n![Timesketch](screenshots/TimesketchAnalysis.png)\n\n# Importing and Analyzing Timeline Results\n\nYou can learn how to analyze CSV timelines in Excel and Timeline Explorer [here](doc/CSV-AnalysisWithExcelAndTimelineExplorer-English.pdf).\n\nYou can learn how to import CSV files into Elastic Stack [here](doc/ElasticStackImport/ElasticStackImport-English.md).\n\nYou can learn how to import CSV files into Timesketch [here](doc/TimesketchImport/TimesketchImport-English.md).\n\n# Analyzing JSON-formatted results with JQ\n\nYou can learn how to analyze JSON-formatted results with `jq` [here](doc/AnalysisWithJQ-English.md).\n\n# Features\n\n* Cross-platform support: Windows, Linux, macOS.\n* Developed in Rust to be memory safe and fast.\n* Multi-thread support delivering up to a 5x speed improvement.\n* Creates single easy-to-analyze timelines for forensic investigations and incident response.\n* Threat hunting based on IoC signatures written in easy to read/create/edit YML based hayabusa rules.\n* Sigma rule support to convert sigma rules to hayabusa rules.\n* Currently it supports the most sigma rules compared to other similar tools and even supports count rules and new aggregators such as `|equalsfield` and `|endswithfield`.\n* Computer metrics. (Useful for filtering on/out certain computers with a large amount of events.)\n* Event ID metrics. (Useful for getting a picture of what types of events there are and for tuning your log settings.)\n* Rule tuning configuration by excluding unneeded or noisy rules.\n* MITRE ATT&CK mapping of tactics.\n* Rule level tuning.\n* Create a list of unique pivot keywords to quickly identify abnormal users, hostnames, processes, etc... as well as correlate events.\n* Output all fields for more thorough investigations.\n* Successful and failed logon summary.\n* Enterprise-wide threat hunting and DFIR on all endpoints with [Velociraptor](https://docs.velociraptor.app/).\n* Output to CSV, JSON/JSONL and HTML Summary Reports.\n* Daily Sigma rule updates.\n* Support for JSON-formatted log input.\n* Log field normalization. (Converting multiple fields with different naming conventions into the same field name.)\n* Log enrichment by adding GeoIP (ASN, city, country) information to IP addresses.\n* Search all events for keywords or regular expressions.\n* Field data mapping. (Ex: `0xc0000234` -> `ACCOUNT LOCKED`)\n* Evtx record carving from evtx slack space.\n* Event de-duplication when outputting. (Useful when recovery records is enabled or when you include backed up evtx files, evtx files from VSS, etc...)\n* Scan setting wizard to help choose which rules to enable easier. (In order to reduce false positives, etc...)\n* PowerShell classic log field parsing and extraction.\n* Low memory usage. (Note: this is possible by not sorting results. Best for running on agents or big data.)\n* Filtering on Channels and Rules for the most efficient performance.\n* Detect, extract and decode Base64 strings found in logs.\n\n# Downloads\n\nPlease download the latest stable version of Hayabusa with compiled binaries or compile the source code from the [Releases](https://github.com/Yamato-Security/hayabusa/releases) page.\n\nWe provide binaries for the following architectures:\n- Linux ARM 64-bit GNU (`hayabusa-x.x.x-lin-aarch64-gnu`)\n- Linux Intel 64-bit GNU (`hayabusa-x.x.x-lin-x64-gnu`)\n- Linux Intel 64-bit MUSL (`hayabusa-x.x.x-lin-x64-musl`)\n- macOS ARM 64-bit (`hayabusa-x.x.x-mac-aarch64`)\n- macOS Intel 64-bit (`hayabusa-x.x.x-mac-x64`)\n- Windows ARM 64-bit (`hayabusa-x.x.x-win-aarch64.exe`)\n- Windows Intel 64-bit (`hayabusa-x.x.x-win-x64.exe`)\n- Windows Intel 32-bit (`hayabusa-x.x.x-win-x86.exe`)\n\n> [For some reason the Linux ARM MUSL binary does not run properly](https://github.com/Yamato-Security/hayabusa/issues/1332) so we do not provide that binary. It is out of our control, so we plan on providing it in the future when it gets fixed.\n\n## Windows live response packages\n\nAs of v2.18.0, we are provide special Windows packages that use XOR-encoded rules provided in a single file as well as all of the config files combined into a single file (hosted at the [hayabusa-encoded-rules repository](https://github.com/Yamato-Security/hayabusa-encoded-rules)).\nJust download the zip packages with `live-response` in the name.\nThe zip files just include three files: the Hayabusa binary, XOR-encoded rules file and the config file.\nThe purpose of these live response packages are for when running Hayabusa on client endpoints, we want to make sure that anti-virus scanners like Windows Defender do not give false positives on `.yml` rule files.\nAlso, we want to minimize the amount of files being written to the system so that forensics artifacts like the USN Journal do not get overwritten.\n\n# Git Cloning\n\nYou can `git clone` the repository with the following command and compile binary from source code:\n\n**Warning:** The main branch of the repository is for development purposes so you may be able to access new features not yet officially released, however, there may be bugs so consider it unstable.\n\n```bash\ngit clone https://github.com/Yamato-Security/hayabusa.git --recursive\n```\n\n> **Note:** If you forget to use --recursive option, the `rules` folder, which is managed as a git submodule, will not be cloned.\n\nYou can sync the `rules` folder and get latest Hayabusa rules with `git pull --recurse-submodules` or use the following command:\n\n```bash\nhayabusa.exe update-rules\n```\n\nIf the update fails, you may need to rename the `rules` folder and try again.\n\n>> Caution: When updating, rules and config files in the `rules` folder are replaced with the latest rules and config files in the [hayabusa-rules](https://github.com/Yamato-Security/hayabusa-rules) repository.\n>> Any changes you make to existing files will be overwritten, so we recommend that you make backups of any files that you edit before updating.\n>> If you are performing level tuning with `level-tuning`, please re-tune your rule files after each update.\n>> If you add **new** rules inside of the `rules` folder, they will **not** be overwritten or deleted when updating.\n\n# Advanced: Compiling From Source (Optional)\n\nIf you have Rust installed, you can compile from source with the following command:\n\nNote: To compile, you usually need the latest version of Rust.\n\n```bash\ncargo build --release\n```\n\nYou can download the latest unstable version from the main branch or the latest stable version from the [Releases](https://github.com/Yamato-Security/hayabusa/releases) page.\n\nBe sure to periodically update Rust with:\n\n```bash\nrustup update stable\n```\n\nThe compiled binary will be outputted in the `./target/release` folder.\n\n## Updating Rust Packages\n\nYou can update to the latest Rust crates before compiling:\n\n```bash\ncargo update\n```\n\n> Please let us know if anything breaks after you update.\n\n## Cross-compiling 32-bit Windows Binaries\n\nYou can create 32-bit binaries on 64-bit Windows systems with the following:\n\n```bash\nrustup install stable-i686-pc-windows-msvc\nrustup target add i686-pc-windows-msvc\nrustup run stable-i686-pc-windows-msvc cargo build --release\n```\n\n> **Warning: Be sure to run `rustup install stable-i686-pc-windows-msvc` whenever there is a new stable version of Rust as `rustup update stable` will not update the compiler for cross compiling and you may receive build errors.**\n\n## macOS Compiling Notes\n\nIf you receive compile errors about openssl, you will need to install [Homebrew](https://brew.sh/) and then install the following packages:\n\n```bash\nbrew install pkg-config\nbrew install openssl\n```\n\n## Linux Compiling Notes\n\nIf you receive compile errors about openssl, you will need to install the following package.\n\nUbuntu-based distros:\n\n```bash\nsudo apt install libssl-dev\n```\n\nFedora-based distros:\n\n```bash\nsudo yum install openssl-devel\n```\n\n## Cross-compiling Linux MUSL Binaries\n\nOn a Linux OS, first install the target.\n\n```bash\nrustup install stable-x86_64-unknown-linux-musl\nrustup target add x86_64-unknown-linux-musl\n```\n\nCompile with:\n\n```bash\ncargo build --release --target=x86_64-unknown-linux-musl\n```\n\n> **Warning: Be sure to run `rustup install stable-x86_64-unknown-linux-musl` whenever there is a new stable version of Rust as `rustup update stable` will not update the compiler for cross compiling and you may receive build errors.**\n\nThe MUSL binary will be created in the `./target/x86_64-unknown-linux-musl/release/` directory.\nMUSL binaries are are about 15% slower than the GNU binaries, however, they are more portable accross different versions and distributions of linux.\n\n# Running Hayabusa\n\n## Caution: Anti-Virus/EDR Warnings and Slow Runtimes\n\nYou may receive an alert from anti-virus or EDR products when trying to run hayabusa or even just when downloading the `.yml` rules as there will be keywords like `mimikatz` and suspicious PowerShell commands in the detection signature.\nThese are false positives so will need to configure exclusions in your security products to allow hayabusa to run.\nIf you are worried about malware or supply chain attacks, please check the hayabusa source code and compile the binaries yourself.\n\nYou may experience slow runtime especially on the first run after a reboot due to the real-time protection of Windows Defender.\nYou can avoid this by temporarily turning real-time protection off or adding an exclusion to the hayabusa runtime directory.\n(Please take into consideration the security risks before doing these.)\n\n## Windows\n\nIn a Command/PowerShell Prompt or Windows Terminal, just run the appropriate 32-bit or 64-bit Windows binary.\n\n### Error when trying to scan a file or directory with a space in the path\n\nWhen using the built-in Command or PowerShell prompt in Windows, you may receive an error that Hayabusa was not able to load any .evtx files if there is a space in your file or directory path.\nIn order to load the .evtx files properly, be sure to do the following:\n1. Enclose the file or directory path with double quotes.\n2. If it is a directory path, make sure that you do not include a backslash for the last character.\n\n### Characters not being displayed correctly\n\nWith the default font `Lucida Console` on Windows, various characters used in the logo and tables will not be displayed properly.\nYou should change the font to `Consalas` to fix this.\n\nThis will fix most of the text rendering except for the display of Japanese characters in the closing messages:\n\n![Mojibake](screenshots/Mojibake.png)\n\nYou have four options to fix this:\n1. Use [Windows Terminal](https://learn.microsoft.com/en-us/windows/terminal/) instead of the Command or PowerShell prompt. (Recommended)\n2. Use the `MS Gothic` font. Note that backslashes will turn into Yen symbols.\n   ![MojibakeFix](screenshots/MojibakeFix.png)\n3. Install the [HackGen](https://github.com/yuru7/HackGen/releases) fonts and use `HackGen Console NF`.\n4. Use the `-q, --quiet` to not display the closing messages that contain Japanese.\n\n## Linux\n\nYou first need to make the binary executable.\n\n```bash\nchmod +x ./hayabusa\n```\n\nThen run it from the Hayabusa root directory:\n\n```bash\n./hayabusa\n```\n\n## macOS\n\nFrom Terminal or iTerm2, you first need to make the binary executable.\n\n```bash\nchmod +x ./hayabusa\n```\n\nThen, try to run it from the Hayabusa root directory:\n\n```bash\n./hayabusa\n```\n\nOn the latest version of macOS, you may receive the following security error when you try to run it:\n\n![Mac Error 1 EN](screenshots/MacOS-RunError-1-EN.png)\n\nClick \"Cancel\" and then from System Preferences, open \"Security & Privacy\" and from the General tab, click \"Allow Anyway\".\n\n![Mac Error 2 EN](screenshots/MacOS-RunError-2-EN.png)\n\nAfter that, try to run it again.\n\n```bash\n./hayabusa\n```\n\nThe following warning will pop up, so please click \"Open\".\n\n![Mac Error 3 EN](screenshots/MacOS-RunError-3-EN.png)\n\nYou should now be able to run hayabusa.\n\n# Command List\n\n## Analysis Commands:\n* `computer-metrics`: Print the number of events based on computer names.\n* `eid-metrics`: Print the number and percentage of events based on Event ID.\n* `expand-list`: Extract `expand` placeholders from the `rules` folder.\n* `extract-base64`: Extract and decode base64 strings from events.\n* `log-metrics`: Print log file metrics.\n* `logon-summary`: Print a summary of logon events.\n* `pivot-keywords-list`: Print a list of suspicious keywords to pivot on.\n* `search`: Search all events by keyword(s) or regular expressions\n\n## DFIR Timeline Commands:\n* `csv-timeline`: Save the timeline in CSV format.\n* `json-timeline`: Save the timeline in JSON/JSONL format.\n* `level-tuning`: Custom tune the alerts' `level`.\n* `list-profiles`: List the available output profiles.\n* `set-default-profile`: Change the default profile.\n* `update-rules`: Sync the rules to the latest rules in the [hayabusa-rules](https://github.com/Yamato-Security/hayabusa-rules) GitHub repository.\n\n## General Commands:\n* `help`: Print this message or the help of the given subcommand(s)\n* `list-contributors`: Print the list of contributors\n\n# Command Usage\n\n## Analysis Commands\n\n### `computer-metrics` command\n\nYou can use the `computer-metrics` command to check how many events there are according to each computer defined in the `<System><Computer>` field.\nBe aware that you cannot completely rely on the `Computer` field for separating events by their original computer.\nWindows 11 will sometimes use completely different `Computer` names when saving to event logs.\nAlso, Windows 10 will sometimes record the `Computer` name in all lowercase.\nThis command does not use any detection rules so will analyze all events.\nThis is a good command to run to quickly see which computers have the most logs.\nWith this information, you can then use the `--include-computer` or `--exclude-computer` options when creating your timelines to make your timeline generation more efficient by creating multiple timelines according to computer or exclude events from certain computers.\n\n```\nUsage: computer-metrics <INPUT> [OPTIONS]\n\nInput:\n  -d, --directory <DIR>  Directory of multiple .evtx files\n  -f, --file <FILE>      File path to one .evtx file\n  -l, --live-analysis    Analyze the local C:\\Windows\\System32\\winevt\\Logs folder\n\nGeneral Options:\n  -C, --clobber                        Overwrite files when saving\n  -h, --help                           Show the help menu\n  -J, --JSON-input                     Scan JSON formatted logs instead of .evtx (.json or .jsonl)\n  -Q, --quiet-errors                   Quiet errors mode: do not save error logs\n  -x, --recover-records                Carve evtx records from slack space (default: disabled)\n  -c, --rules-config <DIR>             Specify custom rule config directory (default: ./rules/config)\n      --target-file-ext <FILE-EXT...>  Specify additional evtx file extensions (ex: evtx_data)\n  -t, --threads <NUMBER>               Number of threads (default: optimal number for performance)\n\nFiltering:\n      --time-offset <OFFSET>  Scan recent events based on an offset (ex: 1y, 3M, 30d, 24h, 30m)\n\nOutput:\n  -o, --output <FILE>  Save the results in CSV format (ex: computer-metrics.csv)\n\nDisplay Settings:\n  -K, --no-color  Disable color output\n  -q, --quiet     Quiet mode: do not display the launch banner\n  -v, --verbose   Output verbose information\n```\n\n#### `computer-metrics` command examples\n\n* Print computer name metrics from a directory: `hayabusa.exe computer-metrics -d ../logs`\n* Save results to a CSV file: `hayabusa.exe computer-metrics -d ../logs -o computer-metrics.csv`\n\n#### `computer-metrics` screenshot\n\n![computer-metrics screenshot](screenshots/ComputerMetrics.png)\n\n### `eid-metrics` command\n\nYou can use the `eid-metrics` command to print out the total number and percentage of event IDs (`<System><EventID>` field) seperated by channels.\nThis command does not use any detection rules so will scan all events.\n\n```\nUsage: eid-metrics <INPUT> [OPTIONS]\n\nInput:\n  -d, --directory <DIR>  Directory of multiple .evtx files\n  -f, --file <FILE>      File path to one .evtx file\n  -l, --live-analysis    Analyze the local C:\\Windows\\System32\\winevt\\Logs folder\n\nGeneral Options:\n  -C, --clobber                        Overwrite files when saving\n  -h, --help                           Show the help menu\n  -J, --JSON-input                     Scan JSON formatted logs instead of .evtx (.json or .jsonl)\n  -Q, --quiet-errors                   Quiet errors mode: do not save error logs\n  -x, --recover-records                Carve evtx records from slack space (default: disabled)\n  -c, --rules-config <DIR>             Specify custom rule config directory (default: ./rules/config)\n  -t, --threads <NUMBER>               Number of threads (default: optimal number for performance)\n      --target-file-ext <FILE-EXT...>  Specify additional evtx file extensions (ex: evtx_data)\n\nFiltering:\n      --exclude-computer <COMPUTER...>  Do not scan specified computer names (ex: ComputerA) (ex: ComputerA,ComputerB)\n      --include-computer <COMPUTER...>  Scan only specified computer names (ex: ComputerA) (ex: ComputerA,ComputerB)\n      --time-offset <OFFSET>            Scan recent events based on an offset (ex: 1y, 3M, 30d, 24h, 30m)\n\nOutput:\n  -b, --disable-abbreviations  Disable abbreviations\n  -o, --output <FILE>          Save the Metrics in CSV format (ex: metrics.csv)\n\nDisplay Settings:\n  -K, --no-color  Disable color output\n  -q, --quiet     Quiet mode: do not display the launch banner\n  -v, --verbose   Output verbose information\n\nTime Format:\n      --European-time     Output timestamp in European time format (ex: 22-02-2022 22:00:00.123 +02:00)\n  -O, --ISO-8601          Output timestamp in original ISO-8601 format (ex: 2022-02-22T10:10:10.1234567Z) (Always UTC)\n      --RFC-2822          Output timestamp in RFC 2822 format (ex: Fri, 22 Feb 2022 22:00:00 -0600)\n      --RFC-3339          Output timestamp in RFC 3339 format (ex: 2022-02-22 22:00:00.123456-06:00)\n      --US-military-time  Output timestamp in US military time format (ex: 02-22-2022 22:00:00.123 -06:00)\n      --US-time           Output timestamp in US time format (ex: 02-22-2022 10:00:00.123 PM -06:00)\n  -U, --UTC               Output time in UTC format (default: local time)\n```\n\n#### `eid-metrics` command examples\n\n* Print Event ID metrics from a single file: `hayabusa.exe eid-metrics -f Security.evtx`\n* Print Event ID metrics from a directory: `hayabusa.exe eid-metrics -d ../logs`\n* Save results to a CSV file: `hayabusa.exe eid-metrics -f Security.evtx -o eid-metrics.csv`\n\n#### `eid-metrics` command config file\n\nThe channel, event IDs and titles of the events are defined in `rules/config/channel_eid_info.txt`.\n\nExample:\n```\nChannel,EventID,EventTitle\nMicrosoft-Windows-Sysmon/Operational,1,Process Creation.\nMicrosoft-Windows-Sysmon/Operational,2,File Creation Timestamp Changed. (Possible Timestomping)\nMicrosoft-Windows-Sysmon/Operational,3,Network Connection.\nMicrosoft-Windows-Sysmon/Operational,4,Sysmon Service State Changed.\n```\n\n#### `eid-metrics` screenshot\n\n![eid-metrics screenshot](screenshots/EID-Metrics.png)\n\n### `expand-list` command\n\nExtract `expand` placeholders from the rules folder.\nThis is useful when creating config files to use any rule that uses the `expand` field modifier.\nTo use `expand` rules, you just need to create a `.txt` file with the name of the `expand` field modifier under the `./config/expand/` directory, and put in all of the values you want to check inside the file.\n\nFor example, if the rule `detection` logic is:\n```yaml\ndetection:\n    selection:\n        EventID: 5145\n        RelativeTargetName|contains: '\\winreg'\n    filter_main:\n        IpAddress|expand: '%Admins_Workstations%'\n    condition: selection and not filter_main\n```\n\nyou would create the text file `./config/expand/Admins_Workstations.txt` and put in values like:\n```\nAdminWorkstation1\nAdminWorkstation2\nAdminWorkstation3\n```\n\nThis would essentially check the same logic as:\n```\n- IpAddress: 'AdminWorkstation1'\n- IpAddress: 'AdminWorkstation2'\n- IpAddress: 'AdminWorkstation3'\n```\n\nIf the config file does not exist, Hayabusa will still load the `expand` rule but ignore it.\n\n```\nUsage:  expand-list <INPUT> [OPTIONS]\n\nGeneral Options:\n  -h, --help              Show the help menu\n  -r, --rules <DIR/FILE>  Specify rule directory (default: ./rules)\n\nDisplay Settings:\n  -K, --no-color  Disable color output\n  -q, --quiet     Quiet mode: do not display the launch banner\n```\n\n#### `expand-list` command examples\n\n* Extract out `expand` field modifiers from the default `rules` directory: `hayabusa.exe expand-list`\n* Extract out `expand` field modifiers from the `sigma` directory: `hayabusa.exe eid-metrics -r ../sigma`\n\n#### `expand-list` results\n\n```\n5 unique expand placeholders found:\nAdmins_Workstations\nDC-MACHINE-NAME\nWorkstations\ninternal_domains\ndomain_controller_hostnames\n```\n\n### `extract-base64` command\n\nThis command will extract base64 strings from the following events, decode them and tell what kind of encoding is being used.\n  * Security 4688 CommandLine\n  * Sysmon 1 CommandLine, ParentCommandLine\n  * PowerShell Operational 4104\n  * PowerShell Operational 4103\n\n```\nUsage:  extract-base64 <INPUT> [OPTIONS]\n\nInput:\n  -d, --directory <DIR>  Directory of multiple .evtx files\n  -f, --file <FILE>      File path to one .evtx file\n  -l, --live-analysis    Analyze the local C:\\Windows\\System32\\winevt\\Logs folder\n\nGeneral Options:\n  -C, --clobber                        Overwrite files when saving\n  -h, --help                           Show the help menu\n  -J, --JSON-input                     Scan JSON formatted logs instead of .evtx (.json or .jsonl)\n  -Q, --quiet-errors                   Quiet errors mode: do not save error logs\n  -x, --recover-records                Carve evtx records from slack space (default: disabled)\n  -c, --rules-config <DIR>             Specify custom rule config directory (default: ./rules/config)\n  -t, --threads <NUMBER>               Number of threads (default: optimal number for performance)\n      --target-file-ext <FILE-EXT...>  Specify additional evtx file extensions (ex: evtx_data)\n\nFiltering:\n      --exclude-computer <COMPUTER...>  Do not scan specified computer names (ex: ComputerA) (ex: ComputerA,ComputerB)\n      --include-computer <COMPUTER...>  Scan only specified computer names (ex: ComputerA) (ex: ComputerA,ComputerB)\n      --time-offset <OFFSET>            Scan recent events based on an offset (ex: 1y, 3M, 30d, 24h, 30m)\n\nOutput:\n  -o, --output <FILE>  Extract Base64 strings\n\nDisplay Settings:\n  -K, --no-color  Disable color output\n  -q, --quiet     Quiet mode: do not display the launch banner\n  -v, --verbose   Output verbose information\n\nTime Format:\n      --European-time     Output timestamp in European time format (ex: 22-02-2022 22:00:00.123 +02:00)\n  -O, --ISO-8601          Output timestamp in original ISO-8601 format (ex: 2022-02-22T10:10:10.1234567Z) (Always UTC)\n      --RFC-2822          Output timestamp in RFC 2822 format (ex: Fri, 22 Feb 2022 22:00:00 -0600)\n      --RFC-3339          Output timestamp in RFC 3339 format (ex: 2022-02-22 22:00:00.123456-06:00)\n      --US-military-time  Output timestamp in US military time format (ex: 02-22-2022 22:00:00.123 -06:00)\n      --US-time           Output timestamp in US time format (ex: 02-22-2022 10:00:00.123 PM -06:00)\n  -U, --UTC               Output time in UTC format (default: local time)\n```\n\n#### `extract-base64` command examples\n\n* Scan a directory and output to the terminal: `hayabusa.exe  extract-base64 -d ../hayabusa-sample-evtx`\n* Scan a directory and output to a CSV file: `hayabusa.exe eid-metrics -r ../sigma -o base64-extracted.csv`\n\n#### `extract-base64` results\n\nWhen outputting to the terminal, because space is limited, only the following fields are displayed:\n  * Timestamp\n  * Computer\n  * Base64 String\n  * Decoded String (if not binary)\n\nWhen saving to a CSV file, the following fields are saved:\n  * Timestamp\n  * Computer\n  * Base64 String\n  * Decoded String (if not binary)\n  * Original Field\n  * Length\n  * Binary (`Y/N`)\n  * Double Encoding (when `Y`, it usually is malicious)\n  * Encoding Type\n  * File Type\n  * Event\n  * Record ID\n  * File Name\n\n### `log-metrics` command\n\nYou can use the `log-metrics` command to print out the following metadata inside event logs:\n  * Filename\n  * Computer names\n  * Number of events\n  * First timestamp\n  * Last timestamp\n  * Channels\n  * Providers\n\nThis command does not use any detection rules so will scan all events.\n\n```\nUsage: log-metrics <INPUT> [OPTIONS]\n\nInput:\n  -d, --directory <DIR>  Directory of multiple .evtx files\n  -f, --file <FILE>      File path to one .evtx file\n  -l, --live-analysis    Analyze the local C:\\Windows\\System32\\winevt\\Logs folder\n\nGeneral Options:\n  -C, --clobber                        Overwrite files when saving\n  -h, --help                           Show the help menu\n  -J, --JSON-input                     Scan JSON formatted logs instead of .evtx (.json or .jsonl)\n  -Q, --quiet-errors                   Quiet errors mode: do not save error logs\n  -x, --recover-records                Carve evtx records from slack space (default: disabled)\n  -c, --rules-config <DIR>             Specify custom rule config directory (default: ./rules/config)\n  -t, --threads <NUMBER>               Number of threads (default: optimal number for performance)\n      --target-file-ext <FILE-EXT...>  Specify additional evtx file extensions (ex: evtx_data)\n\nFiltering:\n      --exclude-computer <COMPUTER...>  Do not scan specified computer names (ex: ComputerA) (ex: ComputerA,ComputerB)\n      --include-computer <COMPUTER...>  Scan only specified computer names (ex: ComputerA) (ex: ComputerA,ComputerB)\n      --time-offset <OFFSET>            Scan recent events based on an offset (ex: 1y, 3M, 30d, 24h, 30m)\n\nOutput:\n  -b, --disable-abbreviations  Disable abbreviations\n  -M, --multiline              Output event field information in multiple rows for CSV output\n  -o, --output <FILE>          Save the Metrics in CSV format (ex: metrics.csv)\n\nDisplay Settings:\n  -K, --no-color  Disable color output\n  -q, --quiet     Quiet mode: do not display the launch banner\n  -v, --verbose   Output verbose information\n\nTime Format:\n      --European-time     Output timestamp in European time format (ex: 22-02-2022 22:00:00.123 +02:00)\n  -O, --ISO-8601          Output timestamp in original ISO-8601 format (ex: 2022-02-22T10:10:10.1234567Z) (Always UTC)\n      --RFC-2822          Output timestamp in RFC 2822 format (ex: Fri, 22 Feb 2022 22:00:00 -0600)\n      --RFC-3339          Output timestamp in RFC 3339 format (ex: 2022-02-22 22:00:00.123456-06:00)\n      --US-military-time  Output timestamp in US military time format (ex: 02-22-2022 22:00:00.123 -06:00)\n      --US-time           Output timestamp in US time format (ex: 02-22-2022 10:00:00.123 PM -06:00)\n  -U, --UTC               Output time in UTC format (default: local time)\n```\n\n#### `log-metrics` command examples\n\n* Print Event ID metrics from a single file: `hayabusa.exe log-metrics -f Security.evtx`\n* Print Event ID metrics from a directory: `hayabusa.exe log-metrics -d ../logs`\n* Save results to a CSV file: `hayabusa.exe log-metrics -d ../logs -o eid-metrics.csv`\n\n#### `log-metrics` screenshot\n\n![log-metrics screenshot](screenshots/LogMetrics.png)\n\n### `logon-summary` command\n\nYou can use the `logon-summary` command to output logon information summary (logon usernames and successful and failed logon count).\nYou can display the logon information for one evtx file with `-f` or multiple evtx files with the `-d` option.\n\nSuccessful logons are taken from the following events:\n  * `Security 4624` (Successful Logon)\n  * `RDS-LSM 21` (Remote Desktop Service Local Session Manager Logon)\n  * `RDS-GTW 302` (Remote Desktop Service Gateway Logon)\n  \nFailed logons are taken from `Security 4625` events.\n\n```\nUsage: logon-summary <INPUT> [OPTIONS]\n\nInput:\n  -d, --directory <DIR>  Directory of multiple .evtx files\n  -f, --file <FILE>      File path to one .evtx file\n  -l, --live-analysis    Analyze the local C:\\Windows\\System32\\winevt\\Logs folder\n\nGeneral Options:\n  -C, --clobber                        Overwrite files when saving\n  -h, --help                           Show the help menu\n  -J, --JSON-input                     Scan JSON formatted logs instead of .evtx (.json or .jsonl)\n  -Q, --quiet-errors                   Quiet errors mode: do not save error logs\n  -x, --recover-records                Carve evtx records from slack space (default: disabled)\n  -c, --rules-config <DIR>             Specify custom rule config directory (default: ./rules/config)\n  -t, --threads <NUMBER>               Number of threads (default: optimal number for performance)\n      --target-file-ext <FILE-EXT...>  Specify additional evtx file extensions (ex: evtx_data)\n\nFiltering:\n      --exclude-computer <COMPUTER...>  Do not scan specified computer names (ex: ComputerA) (ex: ComputerA,ComputerB)\n      --include-computer <COMPUTER...>  Scan only specified computer names (ex: ComputerA) (ex: ComputerA,ComputerB)\n      --time-offset <OFFSET>            Scan recent events based on an offset (ex: 1y, 3M, 30d, 24h, 30m)\n      --timeline-end <DATE>             End time of the event logs to load (ex: \"2022-02-22 23:59:59 +09:00\")\n      --timeline-start <DATE>           Start time of the event logs to load (ex: \"2020-02-22 00:00:00 +09:00\")\n\nOutput:\n  -o, --output <FILENAME-PREFIX>  Save the logon summary to two CSV files (ex: -o logon-summary)\n\nDisplay Settings:\n  -K, --no-color  Disable color output\n  -q, --quiet     Quiet mode: do not display the launch banner\n  -v, --verbose   Output verbose information\n\nTime Format:\n      --European-time     Output timestamp in European time format (ex: 22-02-2022 22:00:00.123 +02:00)\n  -O, --ISO-8601          Output timestamp in original ISO-8601 format (ex: 2022-02-22T10:10:10.1234567Z) (Always UTC)\n      --RFC-2822          Output timestamp in RFC 2822 format (ex: Fri, 22 Feb 2022 22:00:00 -0600)\n      --RFC-3339          Output timestamp in RFC 3339 format (ex: 2022-02-22 22:00:00.123456-06:00)\n      --US-military-time  Output timestamp in US military time format (ex: 02-22-2022 22:00:00.123 -06:00)\n      --US-time           Output timestamp in US time format (ex: 02-22-2022 10:00:00.123 PM -06:00)\n  -U, --UTC               Output time in UTC format (default: local time)\n```\n\n#### `logon-summary` command examples\n\n* Print logon summary: `hayabusa.exe logon-summary -f Security.evtx`\n* Save logon summary results: `hayabusa.exe logon-summary -d ../logs -o logon-summary.csv`\n\n#### `logon-summary` screenshots\n\n![logon-summary successful logons screenshot](screenshots/LogonSummarySuccessfulLogons.png)\n\n![logon-summary failed logons screenshot](screenshots/LogonSummaryFailedLogons.png)\n\n### `pivot-keywords-list` command\n\nYou can use the `pivot-keywords-list` command to create a list of unique pivot keywords to quickly identify abnormal users, hostnames, processes, etc... as well as correlate events.\n\nImportant: by default, hayabusa will return results from all events (informational and higher) so we highly recommend combining the `pivot-keywords-list` command with the `-m, --min-level` option.\nFor example, start off with only creating keywords from `critical` alerts with `-m critical` and then continue with `-m high`, `-m medium`, etc...\nThere will most likely be common keywords in your results that will match on many normal events, so after manually checking the results and creating a list of unique keywords in a single file, you can then create a narrowed down timeline of suspicious activity with a command like `grep -f keywords.txt timeline.csv`.\n\n```\nUsage: pivot-keywords-list <INPUT> [OPTIONS]\n\nInput:\n  -d, --directory <DIR>  Directory of multiple .evtx files\n  -f, --file <FILE>      File path to one .evtx file\n  -l, --live-analysis    Analyze the local C:\\Windows\\System32\\winevt\\Logs folder\n\nGeneral Options:\n  -C, --clobber                        Overwrite files when saving\n  -h, --help                           Show the help menu\n  -J, --JSON-input                     Scan JSON formatted logs instead of .evtx (.json or .jsonl)\n  -w, --no-wizard                      Do not ask questions. Scan for all events and alerts\n  -Q, --quiet-errors                   Quiet errors mode: do not save error logs\n  -x, --recover-records                Carve evtx records from slack space (default: disabled)\n  -c, --rules-config <DIR>             Specify custom rule config directory (default: ./rules/config)\n  -t, --threads <NUMBER>               Number of threads (default: optimal number for performance)\n      --target-file-ext <FILE-EXT...>  Specify additional evtx file extensions (ex: evtx_data)\n\nFiltering:\n  -E, --EID-filter                      Scan only common EIDs for faster speed (./rules/config/target_event_IDs.txt)\n  -D, --enable-deprecated-rules         Enable rules with a status of deprecated\n  -n, --enable-noisy-rules              Enable rules set to noisy (./rules/config/noisy_rules.txt)\n  -u, --enable-unsupported-rules        Enable rules with a status of unsupported\n  -e, --exact-level <LEVEL>             Only load rules with a specific level (informational, low, medium, high, critical)\n      --exclude-computer <COMPUTER...>  Do not scan specified computer names (ex: ComputerA) (ex: ComputerA,ComputerB)\n      --exclude-eid <EID...>            Do not scan specific EIDs for faster speed (ex: 1) (ex: 1,4688)\n      --exclude-status <STATUS...>      Do not load rules according to status (ex: experimental) (ex: stable,test)\n      --exclude-tag <TAG...>            Do not load rules with specific tags (ex: sysmon)\n      --include-computer <COMPUTER...>  Scan only specified computer names (ex: ComputerA) (ex: ComputerA,ComputerB)\n      --include-eid <EID...>            Scan only specified EIDs for faster speed (ex: 1) (ex: 1,4688)\n      --include-status <STATUS...>      Only load rules with specific status (ex: experimental) (ex: stable,test)\n      --include-tag <TAG...>            Only load rules with specific tags (ex: attack.execution,attack.discovery)\n  -m, --min-level <LEVEL>               Minimum level for rules to load (default: informational)\n      --time-offset <OFFSET>            Scan recent events based on an offset (ex: 1y, 3M, 30d, 24h, 30m)\n      --timeline-end <DATE>             End time of the event logs to load (ex: \"2022-02-22 23:59:59 +09:00\")\n      --timeline-start <DATE>           Start time of the event logs to load (ex: \"2020-02-22 00:00:00 +09:00\")\n\nOutput:\n  -o, --output <FILENAME-PREFIX>  Save pivot words to separate files (ex: PivotKeywords)\n\nDisplay Settings:\n  -K, --no-color  Disable color output\n  -q, --quiet     Quiet mode: do not display the launch banner\n  -v, --verbose   Output verbose information\n```\n\n#### `pivot-keywords-list` command examples\n\n* Output pivot keywords to screen: `hayabusa.exe pivot-keywords-list -d ../logs -m critical`\n* Create a list of pivot keywords from critical alerts and save the results. (Results will be saved to `keywords-Ip Addresses.txt`, `keywords-Users.txt`, etc...):\n\n```\nhayabusa.exe pivot-keywords-list -d ../logs -m critical -o keywords`\n```\n\n#### `pivot-keywords-list` config file\n\nYou can customize what keywords you want to search for by editing `./rules/config/pivot_keywords.txt`.\n[This page](https://github.com/Yamato-Security/hayabusa-rules/blob/main/config/pivot_keywords.txt) is the default setting.\n\n\nThe format is `KeywordName.FieldName`. For example, when creating the list of `Users`, hayabusa will list up all the values in the `SubjectUserName`, `TargetUserName` and `User` fields.\n\n\n### `search` command\n\nThe `search` command will let you keyword search on all events.\n(Not just Hayabusa detection results.)\nThis is useful to determine if there is any evidence in events that are not detected by Hayabusa.\n\n```\nUsage: hayabusa.exe search <INPUT> <--keywords \"<KEYWORDS>\" OR --regex \"<REGEX>\"> [OPTIONS]\n\nDisplay Settings:\n  -K, --no-color  Disable color output\n  -q, --quiet     Quiet mode: do not display the launch banner\n  -v, --verbose   Output verbose information\n\nGeneral Options:\n  -C, --clobber                        Overwrite files when saving\n  -h, --help                           Show the help menu\n  -Q, --quiet-errors                   Quiet errors mode: do not save error logs\n  -x, --recover-records                Carve evtx records from slack space (default: disabled)\n  -c, --rules-config <DIR>             Specify custom rule config directory (default: ./rules/config)\n  -t, --threads <NUMBER>               Number of threads (default: optimal number for performance)\n      --target-file-ext <FILE-EXT...>  Specify additional evtx file extensions (ex: evtx_data)\n\nInput:\n  -d, --directory <DIR>  Directory of multiple .evtx files\n  -f, --file <FILE>      File path to one .evtx file\n  -l, --live-analysis    Analyze the local C:\\Windows\\System32\\winevt\\Logs folder\n\nFiltering:\n  -a, --and-logic             Search keywords with AND logic (default: OR)\n  -F, --filter <FILTER...>    Filter by specific field(s)\n  -i, --ignore-case           Case-insensitive keyword search\n  -k, --keyword <KEYWORD...>  Search by keyword(s)\n  -r, --regex <REGEX>         Search by regular expression\n      --time-offset <OFFSET>  Scan recent events based on an offset (ex: 1y, 3M, 30d, 24h, 30m)\n\nOutput:\n  -b, --disable-abbreviations  Disable abbreviations\n  -J, --JSON-output            Save the search results in JSON format (ex: -J -o results.json)\n  -L, --JSONL-output           Save the search results in JSONL format (ex: -L -o results.jsonl)\n  -M, --multiline              Output event field information in multiple rows for CSV output\n  -o, --output <FILE>          Save the search results in CSV format (ex: search.csv)\n\nTime Format:\n      --European-time     Output timestamp in European time format (ex: 22-02-2022 22:00:00.123 +02:00)\n  -O, --ISO-8601          Output timestamp in original ISO-8601 format (ex: 2022-02-22T10:10:10.1234567Z) (Always UTC)\n      --RFC-2822          Output timestamp in RFC 2822 format (ex: Fri, 22 Feb 2022 22:00:00 -0600)\n      --RFC-3339          Output timestamp in RFC 3339 format (ex: 2022-02-22 22:00:00.123456-06:00)\n      --US-military-time  Output timestamp in US military time format (ex: 02-22-2022 22:00:00.123 -06:00)\n      --US-time           Output timestamp in US time format (ex: 02-22-2022 10:00:00.123 PM -06:00)\n  -U, --UTC               Output time in UTC format (default: local time)\n```\n\n#### `search` command examples\n\n* Search the `../hayabusa-sample-evtx` directory for the keyword `mimikatz`:\n\n```\nhayabusa.exe search -d ../hayabusa-sample-evtx -k \"mimikatz\"\n```\n\n> Note: The keyword will match if `mimikatz` is found anywhere in the data. It is not an exact match.\n\n* Search the `../hayabusa-sample-evtx` directory for the keywords `mimikatz` or `kali`:\n\n```\nhayabusa.exe search -d ../hayabusa-sample-evtx -k \"mimikatz\" -k \"kali\"\n```\n\n* Search the `../hayabusa-sample-evtx` directory for the keyword `mimikatz` and ignore case:\n\n```\nhayabusa.exe search -d ../hayabusa-sample-evtx -k \"mimikatz\" -i\n```\n\n* Search the `../hayabusa-sample-evtx` directory for IP addresses using regular expressions:\n\n```\nhayabusa.exe search -d ../hayabusa-sample-evtx -r \"(?:[0-9]{1,3}\\.){3}[0-9]{1,3}\"\n```\n\n* Search the `../hayabusa-sample-evtx` directory and show all events where the `WorkstationName` field is `kali`:\n\n```\nhayabusa.exe search -d ../hayabusa-sample-evtx -r \".*\" -F WorkstationName:\"kali\"\n```\n\n> Note: `.*` is the regular expression to match on every event.\n\n#### `search` command config files\n\n`./rules/config/channel_abbreviations.txt`: Mappings of channel names and their abbreviations.\n\n\n## DFIR Timeline Commands\n\n### Scan Wizard\n\nThe `csv-timeline` and `json-timeline` commands now have a scan wizard enabled by default.\nThis is intended to help users easily choose which detection rules they want to enable according to their needs and preferences.\nThe sets of detections rules to load are based off of the official lists in the Sigma project.\nDetails are explained in [this blog post](https://blog.sigmahq.io/introducing-sigma-rule-packages-releases-76043ce42e81).\nYou can easily turn off the wizard and use Hayabusa in its traditional way by adding the `-w, --no-wizard` option.\n\n#### Core Rules\n\nThe `core` rule set enables rules that have a status of `test` or `stable` and a level of `high` or `critical`.\nThese are high quality rules of high confidence and relevance and should not produce many false positives.\nThe rule status is `test` or `stable` which means no false positives were reported for over 6 months.\nRules will match on attacker techniques, generic suspicious activity, or malicious behavior.\nIt is the same as using the `--exclude-status deprecated,unsupported,experimental --min-level high` options.\n\n#### Core+ Rules\n\nThe `core+` rule set enables rules that have a status of `test` or `stable` and a level of `medium` or higher.\n`medium` rules most often need additional tuning as certain applications, legitimate user behavior or scripts of an organization might be matched.\nIt is the same as using the `--exclude-status deprecated,unsupported,experimental --min-level medium` options.\n\n#### Core++ Rules\n\nThe `core++` rule set enables rules that have a status of `experimental`, `test` or `stable` and a level of `medium` or higher.\nThese rules are bleeding edge.\nThey are validated against the baseline evtx files available at the SigmaHQ project and reviewed by multiple detection engineers.\nOther than that they are pretty much untested at first.\nUse these if you want to be able to detect threats as early as possible at the cost of managing a higher threshold of false positives.\nIt is the same as using the `--exclude-status deprecated,unsupported --min-level medium` options.\n\n#### Emerging Threats (ET) Add-On Rules\n\nThe `Emerging Threats (ET)` rule set enables rules that have a tag of `detection.emerging_threats`.\nThese rules target specific threats and are especially useful for current threats where not much information is available yet.\nThese rules should not have many false positives but will decrease in relevance over time.\nWhen these rules are not enabled, it is the same as using the `--exclude-tag detection.emerging_threats` option.\nWhen running Hayabusa traditionally without the wizard, these rules will be included by default.\n\n#### Threat Hunting (TH) Add-On Rules\n\nThe `Threat Hunting (TH)` rule set enables rules that have a tag of `detection.threat_hunting`.\nThese rules may detect unknown malicious activity, however, will typicially have more false positives.\nWhen these rules are not enabled, it is the same as using the `--exclude-tag detection.threat_hunting` option.\nWhen running Hayabusa traditionally without the wizard, these rules will be included by default.\n\n### Channel-based event log and rules filtering\n\nAs of Hayabusa v2.16.0, we enable a Channel-based filter when loading `.evtx` files and `.yml` rules.\nThe purpose is to make scanning as efficient as possible by only loading what is necessary.\nWhile it possible for there to be multiple providers in a single event log, it is not common to have multiple channels inside a single evtx file.\n(The only time we have seen this is when someone has artifically merged two different evtx files together for the [sample-evtx](https://github.com/Yamato-Security/hayabusa-sample-evtx) project.)\nWe can use this to our advantage by first checking the `Channel` field in the first record of every `.evtx` file specified to be scanned.\nWe also check which `.yml` rules use what channels specified in the `Channel` field of the rule.\nWith these two lists, we only load rules that use channels that are actually present inside the `.evtx` files.\n\nSo for example, if a user wants to scan `Security.evtx`, only rules that specify `Channel: Security` will be used.\nThere is no point in loading other detection rules, for example rules that only look for events in the `Application` log, etc...\nNote that channel fields (Ex: `Channel: Security`) are not **explicitly** defined inside original Sigma rules.\nFor Sigma rules, channel and event IDs fields are **implicitly** defined with `service` and `category` fields under `logsource`. (Ex: `service: security`)\nWhen curating Sigma rules in the [hayabusa-rules](https://github.com/Yamato-Security/hayabusa-rules) repository, we de-abstract the `logsource` field and explicitly define the channel and event ID fields.\nWe explain how and why we do this in-depth [here](https://github.com/Yamato-Security/sigma-to-hayabusa-converter).\n\nCurrently, there are only two detection rules that do not have `Channel` defined and are intended to scan all `.evtx` files are the following:\n- [Possible Hidden Shellcode](https://github.com/Yamato-Security/hayabusa-rules/blob/main/hayabusa/builtin/UnkwnChannEID_Med_PossibleHiddenShellcode.yml)\n- [Mimikatz Use](https://github.com/SigmaHQ/sigma/blob/master/rules/windows/builtin/win_alert_mimikatz_keywords.yml)\n\nIf you want to use these two rules and scan all rules against loaded `.evtx` files then you will need to add the `-A, --enable-all-rules` option in the `csv-timeline` and `json-timeline` commands.\nIn our benchmarks, the rules filtering usually gives a 20% to 10x speed improvement depending on what files are being scanned and of course uses less memory.\n\nChannel filtering is also used when loading `.evtx` files.\nFor example, if you specify a rule that looks for events with a channel of `Security`, then there is no point in loading `.evtx` files that are not from the `Security` log.\nIn our benchmarks, this gives a speed benefit of around 10% with normal scans and up to 60%+ performance increase when scanning with a single rule.\nIf you are sure that multiple channels are being used inside a single `.evtx` file, for example someone used a tool to merge multiple `.evtx` files together, then you disable this filtering with the `-a, --scan-all-evtx-files` option in `csv-timeline` and `json-timeline` commands.\n\n> Note: Channel filtering only works with `.evtx` files and you will receive an error if you try to load event logs from a JSON file with `-J, --json-input` and also specify `-A` or `-a`.\n\n### `csv-timeline` command\n\nThe `csv-timeline` command will create a forensics timeline of events in CSV format.\n\n```\nUsage: csv-timeline <INPUT> [OPTIONS]\n\nInput:\n  -d, --directory <DIR>  Directory of multiple .evtx files\n  -f, --file <FILE>      File path to one .evtx file\n  -l, --live-analysis    Analyze the local C:\\Windows\\System32\\winevt\\Logs folder\n\nGeneral Options:\n  -C, --clobber                        Overwrite files when saving\n  -h, --help                           Show the help menu\n  -J, --JSON-input                     Scan JSON formatted logs instead of .evtx (.json or .jsonl)\n  -w, --no-wizard                      Do not ask questions. Scan for all events and alerts\n  -Q, --quiet-errors                   Quiet errors mode: do not save error logs\n  -x, --recover-records                Carve evtx records from slack space (default: disabled)\n  -r, --rules <DIR/FILE>               Specify a custom rule directory or file (default: ./rules)\n  -c, --rules-config <DIR>             Specify custom rule config directory (default: ./rules/config)\n  -s, --sort-events                    Sort events before saving the file. (warning: this uses much more memory!)\n  -t, --threads <NUMBER>               Number of threads (default: optimal number for performance)\n      --target-file-ext <FILE-EXT...>  Specify additional evtx file extensions (ex: evtx_data)\n\nFiltering:\n  -E, --EID-filter                      Scan only common EIDs for faster speed (./rules/config/target_event_IDs.txt)\n  -A, --enable-all-rules                Enable all rules regardless of loaded evtx files (disable channel filter for rules)\n  -D, --enable-deprecated-rules         Enable rules with a status of deprecated\n  -n, --enable-noisy-rules              Enable rules set to noisy (./rules/config/noisy_rules.txt)\n  -u, --enable-unsupported-rules        Enable rules with a status of unsupported\n  -e, --exact-level <LEVEL>             Only load rules with a specific level (informational, low, medium, high, critical)\n      --exclude-category <CATEGORY...>  Do not load rules with specified logsource categories (ex: process_creation,pipe_created)\n      --exclude-computer <COMPUTER...>  Do not scan specified computer names (ex: ComputerA) (ex: ComputerA,ComputerB)\n      --exclude-eid <EID...>            Do not scan specific EIDs for faster speed (ex: 1) (ex: 1,4688)\n      --exclude-status <STATUS...>      Do not load rules according to status (ex: experimental) (ex: stable,test)\n      --exclude-tag <TAG...>            Do not load rules with specific tags (ex: sysmon)\n      --include-category <CATEGORY...>  Only load rules with specified logsource categories (ex: process_creation,pipe_created)\n      --include-computer <COMPUTER...>  Scan only specified computer names (ex: ComputerA) (ex: ComputerA,ComputerB)\n      --include-eid <EID...>            Scan only specified EIDs for faster speed (ex: 1) (ex: 1,4688)\n      --include-status <STATUS...>      Only load rules with specific status (ex: experimental) (ex: stable,test)\n      --include-tag <TAG...>            Only load rules with specific tags (ex: attack.execution,attack.discovery)\n  -m, --min-level <LEVEL>               Minimum level for rules to load (default: informational)\n  -P, --proven-rules                    Scan with only proven rules for faster speed (./rules/config/proven_rules.txt)\n  -a, --scan-all-evtx-files             Scan all evtx files regardless of loaded rules (disable channel filter for evtx files)\n      --time-offset <OFFSET>            Scan recent events based on an offset (ex: 1y, 3M, 30d, 24h, 30m)\n      --timeline-end <DATE>             End time of the event logs to load (ex: \"2022-02-22 23:59:59 +09:00\")\n      --timeline-start <DATE>           Start time of the event logs to load (ex: \"2020-02-22 00:00:00 +09:00\")\n\nOutput:\n  -b, --disable-abbreviations        Disable abbreviations\n  -G, --GeoIP <MAXMIND-DB-DIR>       Add GeoIP (ASN, city, country) info to IP addresses\n  -H, --HTML-report <FILE>           Save Results Summary details to an HTML report (ex: results.html)\n  -M, --multiline                    Output event field information in multiple rows\n  -F, --no-field-data-mapping        Disable field data mapping\n      --no-pwsh-field-extraction     Disable field extraction of PowerShell classic logs\n  -o, --output <FILE>                Save the timeline in CSV format (ex: results.csv)\n  -p, --profile <PROFILE>            Specify output profile\n  -R, --remove-duplicate-data        Duplicate field data will be replaced with \"DUP\"\n  -X, --remove-duplicate-detections  Remove duplicate detections (default: disabled)\n\nDisplay Settings:\n  -K, --no-color            Disable color output\n  -N, --no-summary          Do not display Results Summary for faster speed\n  -q, --quiet               Quiet mode: do not display the launch banner\n  -v, --verbose             Output verbose information\n  -T, --visualize-timeline  Output event frequency timeline (terminal needs to support unicode)\n\nTime Format:\n      --European-time     Output timestamp in European time format (ex: 22-02-2022 22:00:00.123 +02:00)\n  -O, --ISO-8601          Output timestamp in original ISO-8601 format (ex: 2022-02-22T10:10:10.1234567Z) (Always UTC)\n      --RFC-2822          Output timestamp in RFC 2822 format (ex: Fri, 22 Feb 2022 22:00:00 -0600)\n      --RFC-3339          Output timestamp in RFC 3339 format (ex: 2022-02-22 22:00:00.123456-06:00)\n      --US-military-time  Output timestamp in US military time format (ex: 02-22-2022 22:00:00.123 -06:00)\n      --US-time           Output timestamp in US time format (ex: 02-22-2022 10:00:00.123 PM -06:00)\n  -U, --UTC               Output time in UTC format (default: local time)\n```\n\n#### `csv-timeline` command examples\n\n* Run hayabusa against one Windows event log file with default `standard` profile:\n\n```\nhayabusa.exe csv-timeline -f eventlog.evtx\n```\n\n* Run hayabusa against the sample-evtx directory with multiple Windows event log files with the verbose profile:\n\n```\nhayabusa.exe csv-timeline -d .\\hayabusa-sample-evtx -p verbose\n```\n\n* Export to a single CSV file for further analysis with LibreOffice, Timeline Explorer, Elastic Stack, etc... and include all field information (Warning: your file output size will become much larger with the `super-verbose` profile!):\n\n```\nhayabusa.exe csv-timeline -d .\\hayabusa-sample-evtx -o results.csv -p super-verbose\n```\n\n* Enable the EID (Event ID) filter:\n\n> Note: Enabling the EID filter will speed up the analysis by about 10-15% in our tests but there is a possibility of missing alerts.\n\n```\nhayabusa.exe csv-timeline -E -d .\\hayabusa-sample-evtx -o results.csv\n```\n\n* Only run hayabusa rules (the default is to run all the rules in `-r .\\rules`):\n\n```\nhayabusa.exe csv-timeline -d .\\hayabusa-sample-evtx -r .\\rules\\hayabusa -o results.csv -w\n```\n\n* Only run hayabusa rules for logs that are enabled by default on Windows:\n\n```\nhayabusa.exe csv-timeline -d .\\hayabusa-sample-evtx -r .\\rules\\hayabusa\\builtin -o results.csv -w\n```\n\n* Only run hayabusa rules for sysmon logs:\n\n```\nhayabusa.exe csv-timeline -d .\\hayabusa-sample-evtx -r .\\rules\\hayabusa\\sysmon -o results.csv -w\n```\n\n* Only run sigma rules:\n\n```\nhayabusa.exe csv-timeline -d .\\hayabusa-sample-evtx -r .\\rules\\sigma -o results.csv -w\n```\n\n* Enable deprecated rules (those with `status` marked as `deprecated`) and noisy rules (those whose rule ID is listed in `.\\rules\\config\\noisy_rules.txt`):\n\n> Note: Recently, deprecated rules are now located in a separate directory in the sigma repository so are not included by default anymore in Hayabusa.\n> Therefore, you probably have no need to enable deprecated rules.\n\n```\nhayabusa.exe csv-timeline -d .\\hayabusa-sample-evtx --enable-noisy-rules --enable-deprecated-rules -o results.csv -w\n```\n\n* Only run rules to analyze logons and output in the UTC timezone:\n\n```\nhayabusa.exe csv-timeline -d .\\hayabusa-sample-evtx -r .\\rules\\hayabusa\\builtin\\Security\\LogonLogoff\\Logon -U -o results.csv -w\n```\n\n* Run on a live Windows machine (requires Administrator privileges) and only detect alerts (potentially malicious behavior):\n\n```\nhayabusa.exe csv-timeline -l -m low\n```\n\n* Print verbose information (useful for determining which files take long to process, parsing errors, etc...):\n\n```\nhayabusa.exe csv-timeline -d .\\hayabusa-sample-evtx -v\n```\n\n* Verbose output example:\n\nLoading rules:\n\n```\nLoaded rule: rules/sigma/builtin/deprecated/proc_creation_win_susp_run_folder.yml\nLoaded rule: rules/sigma/builtin/deprecated/proc_creation_win_execution_mssql_xp_cmdshell_stored_procedure.yml\nLoaded rule: rules/sigma/builtin/deprecated/proc_creation_win_susp_squirrel_lolbin.yml\nLoaded rule: rules/sigma/builtin/win_alert_mimikatz_keywords.yml\n```\n\nErrors during the scan:\n```\n[ERROR] Failed to parse event file.\nEventFile: ../logs/Microsoft-Rdms-UI%4Operational.evtx\nError: Failed to parse record number 58471\n\n[ERROR] Failed to parse event file.\nEventFile: ../logs/Microsoft-Rdms-UI%4Operational.evtx\nError: Failed to parse record number 58470\n\n[ERROR] Failed to parse event file.\nEventFile: ../logs/Microsoft-Windows-AppxPackaging%4Operational.evtx\nError: An error occurred while trying to serialize binary xml to output.\n```\n\n* Output to a CSV format compatible to import into [Timesketch](https://timesketch.org/):\n\n```\nhayabusa.exe csv-timeline -d ../hayabusa-sample-evtx --RFC-3339 -o timesketch-import.csv -p timesketch -U\n```\n\n* Quiet error mode:\nBy default, hayabusa will save error messages to error log files.\nIf you do not want to save error messages, please add `-Q`.\n\n#### Advanced - GeoIP Log Enrichment\n\nYou can add GeoIP (ASN organization, city and country) information to SrcIP (source IP) fields and TgtIP (target IP) fields with the free GeoLite2 geolocation data.\n\nSteps:\n1. First sign up for a MaxMind account [here](https://dev.maxmind.com/geoip/geolite2-free-geolocation-data).\n2. Download the three `.mmdb` files from the [download page](https://www.maxmind.com/en/accounts/current/geoip/downloads) and save them to a directory. The filenames should be called `GeoLite2-ASN.mmdb`,\t`GeoLite2-City.mmdb` and `GeoLite2-Country.mmdb`.\n3. When running the `csv-timeline` or `json-timeline` commands, add the `-G` option followed by the directory with the MaxMind databases.\n\n* When `csv-timeline` is used, the following 6 columns will be additionally outputted: `SrcASN`, `SrcCity`, `SrcCountry`, `TgtASN`, `TgtCity`, `TgtCountry`.\n* When `json-timeline` is used, the same `SrcASN`, `SrcCity`, `SrcCountry`, `TgtASN`, `TgtCity`, `TgtCountry` fields will be added to the `Details` object, but only if they contain information.\n\n* When `SrcIP` or `TgtIP` is localhost (`127.0.0.1`, `::1`, etc...), `SrcASN` or `TgtASN` will be outputted as `Local`.\n* When `SrcIP` or `TgtIP` is a private IP address (`10.0.0.0/8`, `fe80::/10`, etc...), `SrcASN` or `TgtASN` will be outputted as `Private`.\n\n##### GeoIP config file\n\nThe field names that contain source and target IP addresses that get looked up in the GeoIP databases are defined in `rules/config/geoip_field_mapping.yaml`.\nYou can add to this list if necessary.\nThere is also a filter section in this file that determines what events to extract IP address information from.\n\n##### Automatic updates of GeoIP databases\n\nMaxMind GeoIP databases are updated every 2 weeks.\nYou can install the MaxMind `geoipupdate` tool [here](https://github.com/maxmind/geoipupdate) in order to automatically update these databases.\n\nSteps on macOS:\n1. `brew install geoipupdate`\n2. Edit `/usr/local/etc/GeoIP.conf`: Put in your `AccountID` and `LicenseKey` you create after logging into the MaxMind website. Make sure the `EditionIDs` line says `EditionIDs GeoLite2-ASN GeoLite2-City GeoLite2-Country`.\n3. Run `geoipupdate`.\n4. Add `-G /usr/local/var/GeoIP` when you want to add GeoIP information.\n\nSteps on Windows:\n1. Download the latest Windows binary (Ex: `geoipupdate_4.10.0_windows_amd64.zip`) from the [Releases](https://github.com/maxmind/geoipupdate/releases) page.\n2. Edit `\\ProgramData\\MaxMind/GeoIPUpdate\\GeoIP.conf`: Put in your `AccountID` and `LicenseKey` you create after logging into the MaxMind website. Make sure the `EditionIDs` line says `EditionIDs GeoLite2-ASN GeoLite2-City GeoLite2-Country`.\n3. Run the `geoipupdate` executable.\n\n#### `csv-timeline` command config files\n\n`./rules/config/channel_abbreviations.txt`: Mappings of channel names and their abbreviations.\n\n`./rules/config/default_details.txt`: The configuration file for what default field information (`%Details%` field) should be outputted if no `details:` line is specified in a rule.\nThis is based on provider name and event IDs.\n\n`./rules/config/eventkey_alias.txt`: This file has the mappings of short name aliases for fields and their original longer field names.\n\nExample:\n```\nInstanceID,Event.UserData.UMDFHostDeviceArrivalBegin.InstanceId\nIntegrityLevel,Event.EventData.IntegrityLevel\nIpAddress,Event.EventData.IpAddress\n```\n\nIf a field is not defined here, Hayabusa will automatically check under `Event.EventData` for the field.\n\n`./rules/config/exclude_rules.txt`: This file has a list of rule IDs that will be excluded from use.\nUsually this is because one rule has replaced another or the rule cannot be used in the first place.\nLike firewalls and IDSes, any signature-based tool will require some tuning to fit your environment so you may need to permanently or temporarily exclude certain rules.\nYou can add a rule ID (Example: `4fe151c2-ecf9-4fae-95ae-b88ec9c2fca6`) to `./rules/config/exclude_rules.txt` in order to ignore any rule that you do not need or cannot be used.\n\n`./rules/config/noisy_rules.txt`: This file a list of rule IDs that are disabled by default but can be enabled by enabling noisy rules with the `-n, --enable-noisy-rules` option.\nThese rules are usually noisy by nature or due to false positives.\n\n`./rules/config/target_event_IDs.txt`: Only the event IDs specified in this file will be scanned if the EID filter is enabled.\nBy default, Hayabusa will scan all events, but if you want to improve performance, please use the `-E, --EID-filter` option.\nThis usually results in a 10~25% speed improvement.\n\n\n### `json-timeline` command\n\nThe `json-timeline` command will create a forensics timeline of events in JSON or JSONL format.\nOutputting to JSONL will be faster and smaller file size than JSON so is good if you are going to just import the results into another tool like Elastic Stack.\nJSON is better if you are going to manually analyze the results with a text editor.\nCSV output is good for importing smaller timelines (usually less than 2GB) into tools like LibreOffice or Timeline Explorer.\nJSON is best for more detailed analysis of data (including large results files) with tools like `jq` as the `Details` fields are separated for easier analysis.\n(In the CSV output, all of the event log fields are in one big `Details` column making sorting of data, etc... more difficult.)\n\n```\nUsage: json-timeline <INPUT> [OPTIONS]\n\nInput:\n  -d, --directory <DIR>  Directory of multiple .evtx files\n  -f, --file <FILE>      File path to one .evtx file\n  -l, --live-analysis    Analyze the local C:\\Windows\\System32\\winevt\\Logs folder\n\nGeneral Options:\n  -C, --clobber                        Overwrite files when saving\n  -h, --help                           Show the help menu\n  -J, --JSON-input                     Scan JSON formatted logs instead of .evtx (.json or .jsonl)\n  -w, --no-wizard                      Do not ask questions. Scan for all events and alerts\n  -Q, --quiet-errors                   Quiet errors mode: do not save error logs\n  -x, --recover-records                Carve evtx records from slack space (default: disabled)\n  -r, --rules <DIR/FILE>               Specify a custom rule directory or file (default: ./rules)\n  -c, --rules-config <DIR>             Specify custom rule config directory (default: ./rules/config)\n  -s, --sort-events                    Sort events before saving the file. (warning: this uses much more memory!)\n  -t, --threads <NUMBER>               Number of threads (default: optimal number for performance)\n      --target-file-ext <FILE-EXT...>  Specify additional evtx file extensions (ex: evtx_data)\n\nFiltering:\n  -E, --EID-filter                      Scan only common EIDs for faster speed (./rules/config/target_event_IDs.txt)\n  -A, --enable-all-rules                Enable all rules regardless of loaded evtx files (disable channel filter for rules)\n  -D, --enable-deprecated-rules         Enable rules with a status of deprecated\n  -n, --enable-noisy-rules              Enable rules set to noisy (./rules/config/noisy_rules.txt)\n  -u, --enable-unsupported-rules        Enable rules with a status of unsupported\n  -e, --exact-level <LEVEL>             Only load rules with a specific level (informational, low, medium, high, critical)\n      --exclude-category <CATEGORY...>  Do not load rules with specified logsource categories (ex: process_creation,pipe_created)\n      --exclude-computer <COMPUTER...>  Do not scan specified computer names (ex: ComputerA) (ex: ComputerA,ComputerB)\n      --exclude-eid <EID...>            Do not scan specific EIDs for faster speed (ex: 1) (ex: 1,4688)\n      --exclude-status <STATUS...>      Do not load rules according to status (ex: experimental) (ex: stable,test)\n      --exclude-tag <TAG...>            Do not load rules with specific tags (ex: sysmon)\n      --include-category <CATEGORY...>  Only load rules with specified logsource categories (ex: process_creation,pipe_created)\n      --include-computer <COMPUTER...>  Scan only specified computer names (ex: ComputerA) (ex: ComputerA,ComputerB)\n      --include-eid <EID...>            Scan only specified EIDs for faster speed (ex: 1) (ex: 1,4688)\n      --include-status <STATUS...>      Only load rules with specific status (ex: experimental) (ex: stable,test)\n      --include-tag <TAG...>            Only load rules with specific tags (ex: attack.execution,attack.discovery)\n  -m, --min-level <LEVEL>               Minimum level for rules to load (default: informational)\n  -P, --proven-rules                    Scan with only proven rules for faster speed (./rules/config/proven_rules.txt)\n  -a, --scan-all-evtx-files             Scan all evtx files regardless of loaded rules (disable channel filter for evtx files)\n      --time-offset <OFFSET>            Scan recent events based on an offset (ex: 1y, 3M, 30d, 24h, 30m)\n      --timeline-end <DATE>             End time of the event logs to load (ex: \"2022-02-22 23:59:59 +09:00\")\n      --timeline-start <DATE>           Start time of the event logs to load (ex: \"2020-02-22 00:00:00 +09:00\")\n\nOutput:\n  -b, --disable-abbreviations        Disable abbreviations\n  -G, --GeoIP <MAXMIND-DB-DIR>       Add GeoIP (ASN, city, country) info to IP addresses\n  -H, --HTML-report <FILE>           Save Results Summary details to an HTML report (ex: results.html)\n  -L, --JSONL-output                 Save the timeline in JSONL format (ex: -L -o results.jsonl)\n  -F, --no-field-data-mapping        Disable field data mapping\n      --no-pwsh-field-extraction     Disable field extraction of PowerShell classic logs\n  -o, --output <FILE>                Save the timeline in JSON format (ex: results.json)\n  -p, --profile <PROFILE>            Specify output profile\n  -R, --remove-duplicate-data        Duplicate field data will be replaced with \"DUP\"\n  -X, --remove-duplicate-detections  Remove duplicate detections (default: disabled)\n\nDisplay Settings:\n  -K, --no-color            Disable color output\n  -N, --no-summary          Do not display Results Summary for faster speed\n  -q, --quiet               Quiet mode: do not display the launch banner\n  -v, --verbose             Output verbose information\n  -T, --visualize-timeline  Output event frequency timeline (terminal needs to support unicode)\n\nTime Format:\n      --European-time     Output timestamp in European time format (ex: 22-02-2022 22:00:00.123 +02:00)\n  -O, --ISO-8601          Output timestamp in original ISO-8601 format (ex: 2022-02-22T10:10:10.1234567Z) (Always UTC)\n      --RFC-2822          Output timestamp in RFC 2822 format (ex: Fri, 22 Feb 2022 22:00:00 -0600)\n      --RFC-3339          Output timestamp in RFC 3339 format (ex: 2022-02-22 22:00:00.123456-06:00)\n      --US-military-time  Output timestamp in US military time format (ex: 02-22-2022 22:00:00.123 -06:00)\n      --US-time           Output timestamp in US time format (ex: 02-22-2022 10:00:00.123 PM -06:00)\n  -U, --UTC               Output time in UTC format (default: local time)\n```\n\n#### `json-timeline` command examples and config files\n\nThe options and config files for `json-timeline` are the same as `csv-timeline` but one extra option `-L, --JSONL-output` for outputting to JSONL format.\n\n### `level-tuning` command\n\nThe `level-tuning` command will let you tune the alert levels for rules, either raising or decreasing the risk level according to your environment.\n\n```\nUsage: level-tuning [OPTIONS]\n\nDisplay Settings:\n  -K, --no-color  Disable color output\n  -q, --quiet     Quiet mode: do not display the launch banner\n\nGeneral Options:\n  -f, --file <FILE>  Tune alert levels (default: ./rules/config/level_tuning.txt)\n  -h, --help         Show the help menu\n```\n\n#### `level-tuning` command examples\n\n* Normal usage: `hayabusa.exe level-tuning`\n* Tune rule alert levels based on your custom config file: `hayabusa.exe level-tuning -f my_level_tuning.txt`\n\n#### `level-tuning` config file\n\nHayabusa and Sigma rule authors will determine the risk level of the alert when writing their rules.\nHowever, the actual risk level may differ according to the environment.\nYou can tune the risk level of the rules by adding them to `./rules/config/level_tuning.txt` and executing `hayabusa.exe level-tuning` which will update the `level` line in the rule file.\nPlease note that the rule file will be updated directly.\n\n> Warning: Anytime you run `update-rules`, the original alert level will overwrite any settings you have changed, so you will need to run the `level-tuning` command after every time you run `update-rules` if you want to change the levels.\n\n`./rules/config/level_tuning.txt` sample line:\n\n```csv\nid,new_level\n00000000-0000-0000-0000-000000000000,informational # sample level tuning line\n```\n\nIn this case, the risk level of the rule with an `id` of `00000000-0000-0000-0000-000000000000` in the rules directory will have its `level` rewritten to `informational`.\nThe possible levels to set are `critical`, `high`, `medium`, `low` and `informational`.\n\n### `list-profiles` command\n\n```\nUsage: list-profiles [OPTIONS]\n\nDisplay Settings:\n  -K, --no-color  Disable color output\n  -q, --quiet     Quiet mode: do not display the launch banner\n\nGeneral Options:\n  -h, --help  Show the help menu\n```\n\n### `set-default-profile` command\n\n```\nUsage: set-default-profile [OPTIONS]\n\nDisplay Settings:\n  -K, --no-color  Disable color output\n  -q, --quiet     Quiet mode: do not display the launch banner\n\nGeneral Options:\n  -h, --help               Show the help menu\n  -p, --profile <PROFILE>  Specify output profile\n```\n\n#### `set-default-profile` command examples\n\n* Set the default profile to `minimal`: `hayabusa.exe set-default-profile minimal`\n* Set the default profile to `super-verbose`: `hayabusa.exe set-default-profile super-verbose`\n\n### `update-rules` command\n\nThe `update-rules` command will sync the `rules` folder with the [Hayabusa rules github repository](https://github.com/Yamato-Security/hayabusa-rules), updating the rules and config files.\n\n```\nUsage: update-rules [OPTIONS]\n\nDisplay Settings:\n  -K, --no-color  Disable color output\n  -q, --quiet     Quiet mode: do not display the launch banner\n\nGeneral Options:\n  -h, --help              Show the help menu\n  -r, --rules <DIR/FILE>  Specify a custom rule directory or file (default: ./rules)\n```\n\n#### `update-rules` command example\n\nYou will normally just execute this: `hayabusa.exe update-rules`\n\n# Timeline Output\n\n## Output Profiles\n\nHayabusa has 5 pre-defined output profiles to use in `config/profiles.yaml`:\n\n1. `minimal`\n2. `standard` (default)\n3. `verbose`\n4. `all-field-info`\n5. `all-field-info-verbose`\n6. `super-verbose`\n7. `timesketch-minimal`\n8. `timesketch-verbose`\n\nYou can easily customize or add your own profiles by editing this file.\nYou can also easily change the default profile with `set-default-profile --profile <profile>`.\nUse the `list-profiles` command to show the available profiles and their field information.\n\n### 1. `minimal` profile output\n\n`%Timestamp%, %Computer%, %Channel%, %EventID%, %Level%, %RecordID%, %RuleTitle%, %Details%`\n\n### 2. `standard` profile output\n\n`%Timestamp%, %Computer%, %Channel%, %EventID%, %Level%, %RecordID%, %RuleTitle%, %Details%, %ExtraFieldInfo%`\n\n### 3. `verbose` profile output\n\n`%Timestamp%, %Computer%, %Channel%, %EventID%, %Level%, %MitreTactics%, %MitreTags%, %OtherTags%, %RecordID%, %RuleTitle%, %Details%, %ExtraFieldInfo%, %RuleFile%, %EvtxFile%`\n\n### 4. `all-field-info` profile output\n\nInstead of outputting the minimal `details` information, all field information in the `EventData` and `UserData` sections will be outputted along with their original field names.\n\n`%Timestamp%, %Computer%, %Channel%, %EventID%, %Level%, %RecordID%, %RuleTitle%, %AllFieldInfo%, %RuleFile%, %EvtxFile%`\n\n### 5. `all-field-info-verbose` profile output\n\n`%Timestamp%, %Computer%, %Channel%, %EventID%, %Level%, %MitreTactics%, %MitreTags%, %OtherTags%, %RecordID%, %RuleTitle%, %AllFieldInfo%, %RuleFile%, %EvtxFile%`\n\n### 6. `super-verbose` profile output\n\n`%Timestamp%, %Computer%, %Channel%, %EventID%, %Level%, %RuleTitle%, %RuleAuthor%, %RuleModifiedDate%, %Status%, %RecordID%, %Details%, %ExtraFieldInfo%, %MitreTactics%, %MitreTags%, %OtherTags%, %Provider%, %RuleCreationDate%, %RuleFile%, %EvtxFile%`\n\n### 7. `timesketch-minimal` profile output\n\nOutput to a format compatible with importing into [Timesketch](https://timesketch.org/).\n\n`%Timestamp%, hayabusa, %RuleTitle%, %Computer%, %Channel%, %EventID%, %Level%, %MitreTactics%, %MitreTags%, %OtherTags%, %RecordID%, %Details%, %RuleFile%, %EvtxFile%`\n\n### 8. `timesketch-verbose` profile output\n\n`%Timestamp%, hayabusa, %RuleTitle%, %Computer%, %Channel%, %EventID%, %Level%, %MitreTactics%, %MitreTags%, %OtherTags%, %RecordID%, %Details%, %ExtraFieldInfo%, %RuleFile%, %EvtxFile%`\n\n### Profile Comparison\n\nThe following benchmarks were conducted on a 2018 Lenovo P51 (Xeon 4 Core CPU / 64GB RAM) with 3GB of evtx data and 3891 rules enabled. (2023/06/01)\n\n| Profile | Processing Time | Output Filesize | Filesize Increase |\n| :---: | :---: | :---: | :---: |\n| minimal | 8 minutes 50 seconds | 770 MB | -30% |\n| standard (default) | 9 minutes 00 seconds | 1.1 GB | None |\n| verbose | 9 minutes 10 seconds | 1.3 GB | +20% |\n| all-field-info | 9 minutes 3 seconds | 1.2 GB | +10% |\n| all-field-info-verbose | 9 minutes 10 seconds | 1.3 GB | +20% |\n| super-verbose | 9 minutes 12 seconds | 1.5 GB | +35% |\n\n### Profile Field Aliases\n\nThe following information can be outputted with built-in output profiles:\n\n| Alias name | Hayabusa output information|\n| :--- | :--- |\n|%AllFieldInfo% | All field information. |\n|%Channel% | The name of log. `<Event><System><Channel>` field. |\n|%Computer% | The `<Event><System><Computer>` field. |\n|%Details% | The `details` field in the YML detection rule, however, only hayabusa rules have this field. This field gives extra information about the alert or event and can extract useful data from the fields in event logs. For example, usernames, command line information, process information, etc... When a placeholder points to a field that does not exist or there is an incorrect alias mapping, it will be outputted as `n/a` (not available). If the `details` field is not specified (i.e. sigma rules), default `details` messages to extract fields defined in `./rules/config/default_details.txt` will be outputted. You can add more default `details` messages by adding the `Provider Name`, `EventID` and `details` message you want to output in `default_details.txt`. When no `details` field is defined in a rule nor in `default_details.txt`, all fields will be outputted to the `details` column. |\n|%ExtraFieldInfo% | Print the field information that was not outputted in %Details%. |\n|%EventID% | The `<Event><System><EventID>` field. |\n|%EvtxFile% | The evtx filename that caused the alert or event. |\n|%Level% | The `level` field in the YML detection rule. (`informational`, `low`, `medium`, `high`, `critical`) |\n|%MitreTactics% | MITRE ATT&CK [tactics](https://attack.mitre.org/tactics/enterprise/) (Ex: Initial Access, Lateral Movement, etc...). |\n|%MitreTags% | MITRE ATT&CK Group ID, Technique ID and Software ID. |\n|%OtherTags% | Any keyword in the `tags` field in a YML detection rule which is not included in `MitreTactics` or `MitreTags`. |\n|%Provider% | The `Name` attribute in `<Event><System><Provider>` field. |\n|%RecordID% | The Event Record ID from `<Event><System><EventRecordID>` field. |\n|%RuleAuthor% | The `author` field in the YML detection rule. |\n|%RuleCreationDate% | The `date` field in the YML detection rule. |\n|%RuleFile% | The filename of the detection rule that generated the alert or event. |\n|%RuleModifiedDate% | The `modified` field in the YML detection rule. |\n|%RuleTitle% | The `title` field in the YML detection rule. |\n|%Status% | The `status` field in the YML detection rule. |\n|%Timestamp% | Default is `YYYY-MM-DD HH:mm:ss.sss +hh:mm` format. `<Event><System><TimeCreated SystemTime>` field in the event log. The default timezone will be the local timezone but you can change the timezone to UTC with the `--UTC` option. |\n\n#### Extra Profile Field Aliases\n\nYou can also add these extra aliases to your output profile if you need them:\n\n| Alias name | Hayabusa output information|\n| :--- | :--- |\n|%RenderedMessage% | The `<Event><RenderingInfo><Message>` field in WEC forwarded logs. |\n|%RuleID% | The `id` field in the YML detection rule. |\n\nNote: these are **not** included in any built in profiles so you will need to manually edit the `config/default_profile.yaml` file and add the following lines:\n\n```\nMessage: \"%RenderedMessage%\"\nRuleID: \"%RuleID%\"\n```\n\nYou can also define [event key aliases](https://github.com/Yamato-Security/hayabusa-rules/blob/main/README.md#eventkey-aliases) to output other fields.\n\n## Abbreviations\n\nIn order to save space, we abbreviate levels, MITRE ATT&CK tactics, channels, providers, field names, etc...\n\nYou can turn off some of these abbreviations to see the original channel name, provider name, etc... with the `-b, --disable-abbreviations` option.\n\n### Level Abbreviations\n\nIn order to save space, we use the following abbrevations when displaying the alert `level`.\n\n* `crit`: `critical`\n* `high`: `high`\n* `med `: `medium`\n* `low `: `low`\n* `info`: `informational`\n\n### MITRE ATT&CK Tactics Abbreviations\n\nIn order to save space, we use the following abbreviations when displaying MITRE ATT&CK tactic tags.\nYou can freely edit these abbreviations in the `./config/mitre_tactics.txt` configuration file.\n\n* `Recon` : Reconnaissance\n* `ResDev` : Resource Development\n* `InitAccess` : Initial Access\n* `Exec` : Execution\n* `Persis` : Persistence\n* `PrivEsc` : Privilege Escalation\n* `Evas` : Defense Evasion\n* `CredAccess` : Credential Access\n* `Disc` : Discovery\n* `LatMov` : Lateral Movement\n* `Collect` : Collection\n* `C2` : Command and Control\n* `Exfil` : Exfiltration\n* `Impact` : Impact\n\n### Channel Abbreviations\n\nIn order to save space, we use the following abbreviations when displaying Channel.\nYou can freely edit these abbreviations in the `./rules/config/channel_abbreviations.txt` configuration file.\n\n* `App` : `Application`\n* `AppLocker` : `Microsoft-Windows-AppLocker/*`\n* `BitsCli` : `Microsoft-Windows-Bits-Client/Operational`\n* `CodeInteg` : `Microsoft-Windows-CodeIntegrity/Operational`\n* `Defender` : `Microsoft-Windows-Windows Defender/Operational`\n* `DHCP-Svr` : `Microsoft-Windows-DHCP-Server/Operational`\n* `DNS-Svr` : `DNS Server`\n* `DvrFmwk` : `Microsoft-Windows-DriverFrameworks-UserMode/Operational`\n* `Exchange` : `MSExchange Management`\n* `Firewall` : `Microsoft-Windows-Windows Firewall With Advanced Security/Firewall`\n* `KeyMgtSvc` : `Key Management Service`\n* `LDAP-Cli` : `Microsoft-Windows-LDAP-Client/Debug`\n* `NTLM` `Microsoft-Windows-NTLM/Operational`\n* `OpenSSH` : `OpenSSH/Operational`\n* `PrintAdm` : `Microsoft-Windows-PrintService/Admin`\n* `PrintOp` : `Microsoft-Windows-PrintService/Operational`\n* `PwSh` : `Microsoft-Windows-PowerShell/Operational`\n* `PwShClassic` : `Windows PowerShell`\n* `RDP-Client` : `Microsoft-Windows-TerminalServices-RDPClient/Operational`\n* `Sec` : `Security`\n* `SecMitig` : `Microsoft-Windows-Security-Mitigations/*`\n* `SmbCliSec` : `Microsoft-Windows-SmbClient/Security`\n* `SvcBusCli` : `Microsoft-ServiceBus-Client`\n* `Sys` : `System`\n* `Sysmon` : `Microsoft-Windows-Sysmon/Operational`\n* `TaskSch` : `Microsoft-Windows-TaskScheduler/Operational`\n* `WinRM` : `Microsoft-Windows-WinRM/Operational`\n* `WMI` : `Microsoft-Windows-WMI-Activity/Operational`\n\n### Other Abbreviations\n\nThe following abbreviations are used in rules in order to make the output as concise as possible:\n\n* `Acct` -> Account\n* `Addr` -> Address\n* `Auth` -> Authentication\n* `Cli` -> Client\n* `Chan` -> Channel\n* `Cmd` -> Command\n* `Cnt` -> Count\n* `Comp` -> Computer\n* `Conn` -> Connection/Connected\n* `Creds` -> Credentials\n* `Crit` -> Critical\n* `Disconn` -> Disconnection/Disconnected\n* `Dir` -> Directory\n* `Drv` -> Driver\n* `Dst` -> Destination\n* `EID` -> Event ID\n* `Err` -> Error\n* `Exec` -> Execution\n* `FW` -> Firewall\n* `Grp` -> Group\n* `Img` -> Image\n* `Inj` -> Injection\n* `Krb` -> Kerberos\n* `LID` -> Logon ID\n* `Med` -> Medium\n* `Net` -> Network\n* `Obj` -> Object\n* `Op` -> Operational/Operation\n* `Proto` -> Protocol\n* `PW` -> Password\n* `Reconn` -> Reconnection\n* `Req` -> Request\n* `Rsp` -> Response\n* `Sess` -> Session\n* `Sig` -> Signature\n* `Susp` -> Suspicious\n* `Src` -> Source\n* `Svc` -> Service\n* `Svr` -> Server\n* `Temp` -> Temporary\n* `Term` -> Termination/Terminated\n* `Tkt` -> Ticket\n* `Tgt` -> Target\n* `Unkwn` -> Unknown\n* `Usr` -> User\n* `Perm` -> Permament\n* `Pkg` -> Package\n* `Priv` -> Privilege\n* `Proc` -> Process\n* `PID` -> Process ID\n* `PGUID` -> Process GUID (Global Unique ID)\n* `Ver` -> Version\n\n## Progress Bar\n\nThe progress bar will only work with multiple evtx files.\nIt will display in real time the number and percent of evtx files that it has finished analyzing.\n\n## Color Output\n\nThe alerts will be outputted in color based on the alert `level`.\nYou can change the default colors in the config file at `./config/level_color.txt` in the format of `level,(RGB 6-digit ColorHex)`.\nIf you want to disable color output, you can use `-K, --no-color` option.\n\n## Results Summary\n\nTotal events, the number of events with hits, data reduction metrics, total and unique detections, dates with the most detections, top computers with detections and top alerts are displayed after every scan.\n\n### Detection Fequency Timeline\n\nIf you add the `-T, --visualize-timeline` option, the Event Frequency Timeline feature displays a sparkline frequency timeline of detected events.\nNote: There needs to be more than 5 events. Also, the characters will not render correctly on the default Command Prompt or PowerShell Prompt, so please use a terminal like Windows Terminal, iTerm2, etc...\n\n# Hayabusa Rules\n\nHayabusa detection rules are written in a sigma-like YML format and are located in the `rules` folder.\nThe rules are hosted at [https://github.com/Yamato-Security/hayabusa-rules](https://github.com/Yamato-Security/hayabusa-rules) so please send any issues and pull requests for rules there instead of the main Hayabusa repository.\n\nPlease read [the hayabusa-rules repository README](https://github.com/Yamato-Security/hayabusa-rules/blob/main/README.md) to understand about the rule format and how to create rules.\n\nAll of the rules from the hayabusa-rules repository should be placed in the `rules` folder.\n`informational` level rules are considered `events`, while anything with a `level` of `low` and higher are considered `alerts`.\n\nThe hayabusa rule directory structure is separated into 2 directories:\n\n* `builtin`: logs that can be generated by Windows built-in functionality.\n* `sysmon`: logs that are generated by [sysmon](https://docs.microsoft.com/en-us/sysinternals/downloads/sysmon).\n\nRules are further seperated into directories by log type (Example: Security, System, etc...) and are named in the following format:\n\nPlease check out the current rules to use as a template in creating new ones or for checking the detection logic.\n\n## Sigma v.s. Hayabusa (Built-in Sigma Compatible) Rules\n\nHayabusa supports Sigma rules natively with a single exception of handling the `logsource` fields internally.\nIn order to reduce false positives, , Sigma rules should be run through our convertor explained [here](https://github.com/Yamato-Security/hayabusa-rules/blob/main/tools/sigmac/README.md).\nThis will add the proper `Channel` and `EventID`, and perform field mapping for certain categories like `process_creation`.\n\nAlmost all Hayabusa rules are compatible with the Sigma format so you can use them just like Sigma rules to convert to other SIEM formats.\nHayabusa rules are designed solely for Windows event log analysis and have the following benefits:\n\n1. An extra `details` field to display additional information taken from only the useful fields in the log.\n2. They are all tested against sample logs and are known to work.\n3. Extra aggregators not found in sigma, such as `|equalsfield` and `|endswithfield`.\n\nTo our knowledge, hayabusa provides the greatest native support for sigma rules out of any open source Windows event log analysis tool.\n\n# Other Windows Event Log Analyzers and Related Resources\n\n* [APT-Hunter](https://github.com/ahmedkhlief/APT-Hunter) - Attack detection tool written in Python.\n* [Awesome Event IDs](https://github.com/stuhli/awesome-event-ids) -  Collection of Event ID resources useful for Digital Forensics and Incident Response\n* [Chainsaw](https://github.com/countercept/chainsaw) - Another sigma-based attack detection tool written in Rust.\n* [DeepBlueCLI](https://github.com/sans-blue-team/DeepBlueCLI) - Attack detection tool written in Powershell by [Eric Conrad](https://twitter.com/eric_conrad).\n* [Epagneul](https://github.com/jurelou/epagneul) - Graph visualization for Windows event logs.\n* [EventList](https://github.com/miriamxyra/EventList/) - Map security baseline event IDs to MITRE ATT&CK by [Miriam Wiesner](https://github.com/miriamxyra).\n* [Mapping MITRE ATT&CK with Window Event Log IDs](https://www.socinvestigation.com/mapping-mitre-attck-with-window-event-log-ids/) - by [Michel de CREVOISIER](https://twitter.com/mdecrevoisier)\n* [EvtxECmd](https://github.com/EricZimmerman/evtx) - Evtx parser by [Eric Zimmerman](https://twitter.com/ericrzimmerman).\n* [EVTXtract](https://github.com/williballenthin/EVTXtract) - Recover EVTX log files from unallocated space and memory images.\n* [EvtxToElk](https://www.dragos.com/blog/industry-news/evtxtoelk-a-python-module-to-load-windows-event-logs-into-elasticsearch/) - Python tool to send Evtx data to Elastic Stack.\n* [EVTX ATTACK Samples](https://github.com/sbousseaden/EVTX-ATTACK-SAMPLES) - EVTX attack sample event log files by [SBousseaden](https://twitter.com/SBousseaden).\n* [EVTX-to-MITRE-Attack](https://github.com/mdecrevoisier/EVTX-to-MITRE-Attack) - EVTX attack sample event log files mapped to ATT&CK by [Michel de CREVOISIER](https://twitter.com/mdecrevoisier)\n* [EVTX parser](https://github.com/omerbenamram/evtx) - the Rust evtx library we use written by [@OBenamram](https://twitter.com/obenamram).\n* [Grafiki](https://github.com/lucky-luk3/Grafiki) - Sysmon and PowerShell log visualizer.\n* [LogonTracer](https://github.com/JPCERTCC/LogonTracer) - A graphical interface to visualize logons to detect lateral movement by [JPCERTCC](https://twitter.com/jpcert_en).\n* [NSA Windows Event Monitoring Guidance](https://github.com/nsacyber/Event-Forwarding-Guidance/tree/master/Events) - NSA's guide on what to monitor for.\n* [RustyBlue](https://github.com/Yamato-Security/RustyBlue) - Rust port of DeepBlueCLI by Yamato Security.\n* [Sigma](https://github.com/SigmaHQ/sigma) - Community based generic SIEM rules.\n* [SOF-ELK](https://github.com/philhagen/sof-elk) - A pre-packaged VM with Elastic Stack to import data for DFIR analysis by [Phil Hagen](https://twitter.com/philhagen)\n* [so-import-evtx](https://docs.securityonion.net/en/2.3/so-import-evtx.html) - Import evtx files into Security Onion.\n* [SysmonTools](https://github.com/nshalabi/SysmonTools) - Configuration and off-line log visualization tool for Sysmon.\n* [Timeline Explorer](https://ericzimmerman.github.io/#!index.md) - The best CSV timeline analyzer by [Eric Zimmerman](https://twitter.com/ericrzimmerman).\n* [Windows Event Log Analysis - Analyst Reference](https://www.forwarddefense.com/media/attachments/2021/05/15/windows-event-log-analyst-reference.pdf) - by Forward Defense's Steve Anson.\n* [Zircolite](https://github.com/wagga40/Zircolite) - Sigma-based attack detection tool written in Python.\n\n# Windows Logging Recommendations\n\nIn order to properly detect malicious activity on Windows machines, you will need to improve the default log settings.\nWe have created a seperate project to document what log settings need to be enabled as well as scripts to automatically enable the proper settings at [https://github.com/Yamato-Security/EnableWindowsLogSettings](https://github.com/Yamato-Security/EnableWindowsLogSettings).\n\nWe also recommend the following sites for guidance:\n\n* [JSCU-NL (Joint Sigint Cyber Unit Netherlands) Logging Essentials](https://github.com/JSCU-NL/logging-essentials)\n* [ACSC (Australian Cyber Security Centre) Logging and Fowarding Guide](https://www.cyber.gov.au/acsc/view-all-content/publications/windows-event-logging-and-forwarding)\n* [Malware Archaeology Cheat Sheets](https://www.malwarearchaeology.com/cheat-sheets)\n\n# Sysmon Related Projects\n\nTo create the most forensic evidence and detect with the highest accuracy, you need to install sysmon. We recommend the following sites and config files:\n\n* [TrustedSec Sysmon Community Guide](https://github.com/trustedsec/SysmonCommunityGuide)\n* [Sysmon Modular](https://github.com/olafhartong/sysmon-modular)\n* [SwiftOnSecurity Sysmon Config](https://github.com/SwiftOnSecurity/sysmon-config)\n* [SwiftOnSecurity Sysmon Config fork by Neo23x0](https://github.com/Neo23x0/sysmon-config)\n* [SwiftOnSecurity Sysmon Config fork by ion-storm](https://github.com/ion-storm/sysmon-config)\n\n# Community Documentation\n\n## English\n\n* 2023/12/11 [Unleashing the Hayabusa Feathers: My Top Features Revealed!](https://detect.fyi/hunting-with-hayabusa-tool-showcase-aafef7434413) by Christian Henriksen\n* 2023/10/16 [Incident response and threat hunting using hayabusa tool](https://mahim-firoj.medium.com/incident-response-and-threat-hunting-using-hayabusa-tool-383da273183a) by Md. Mahim Bin Firoj\n* 2023/03/21 [Find Threats in Event Logs with Hayabusa](https://blog.ecapuano.com/p/find-threats-in-event-logs-with-hayabusa) by [Eric Capuano](https://twitter.com/eric_capuano)\n* 2023/03/14 [Rust Performance Guide for Hayabusa Developers](doc/RustPerformance-English.md) by Fukusuke Takahashi\n* 2022/06/19 [Velociraptor Walkthrough and Hayabusa Integration](https://www.youtube.com/watch?v=Q1IoGX--814) by [Eric Capuano](https://twitter.com/eric_capuano)\n* 2022/01/24 [Graphing Hayabusa results in neo4j](https://www.youtube.com/watch?v=7sQqz2ek-ko) by Matthew Seyer ([@forensic_matt](https://twitter.com/forensic_matt))\n\n## Japanese\n\n* 2024/01/24 [LME × Hayabusa　－　Windowsイベントログの集約と解析の効率化](https://jpn.nec.com/cybersecurity/blog/240126/index.html) by NEC Security Blog\n* 2023/09/29 [Fast Forensics with Hayabusa and Splunk](https://jpn.nec.com/cybersecurity/blog/230929/index.html) by NEC Security Blog\n* 2023/09/13 [Windows Event Log Analysis with Hayabusa](https://engineers.ffri.jp/entry/2023/09/13/130750) by FFRI\n* 2022/03/14 [Rust Performance Guide for Hayabusa Developers](doc/RustPerformance-Japanese.md) by Fukusuke Takahashi\n* 2022/01/22 [Visualizing Hayabusa results in Elastic Stack](https://qiita.com/kzzzzo2/items/ead8ccc77b7609143749) by [@kzzzzo2](https://qiita.com/kzzzzo2)\n* 2021/12/31 [Intro to Hayabusa](https://itib.hatenablog.com/entry/2021/12/31/222946) by itiB ([@itiB_S144](https://twitter.com/itiB_S144))\n* 2021/12/27 [Hayabusa internals](https://kazuminkun.hatenablog.com/entry/2021/12/27/190535) by Kazuminn ([@k47_um1n](https://twitter.com/k47_um1n))\n\n# Contribution\n\nWe would love any form of contribution.\nPull requests, rule creation and sample evtx logs are the best but feature requests, notifying us of bugs, etc... are also very welcome.\n\nAt the least, if you like our tool then please give us a star on GitHub and show your support!\n\n# Bug Submission\n\nPlease submit any bugs you find [here.](https://github.com/Yamato-Security/hayabusa/issues/new?assignees=&labels=bug&template=bug_report.md&title=%5Bbug%5D)\nThis project is currently actively maintained and we are happy to fix any bugs reported.\n\nIf you find any issues (false positives, bugs, etc...) with Hayabusa rules, please report them to the hayabusa-rules GitHub issues page [here](https://github.com/Yamato-Security/hayabusa-rules/issues/new).\n\nIf you find any issues (false positives, bugs, etc...) with Sigma rules, please report them to the upstream SigmaHQ GitHub issues page [here](https://github.com/SigmaHQ/sigma/issues).\n\n# License\n\nHayabusa is released under [AGPLv3](https://www.gnu.org/licenses/agpl-3.0.en.html) and all rules are released under the [Detection Rule License (DRL) 1.1](https://github.com/SigmaHQ/sigma/blob/master/LICENSE.Detection.Rules.md).\nYou may freely use Hayabusa internally, SaaS solutions, for consulting work, etc...\nHowever, if you use Hayabusa in a type of SaaS solution and make improvements to it, we ask you to open-source those improvements and give back to the project.\n\nHayabusa uses GeoLite2 data created by MaxMind, available from [https://www.maxmind.com](https://www.maxmind.com).\n\n# Twitter\n\nYou can recieve the latest news about Hayabusa, rule updates, other Yamato Security tools, etc... by following us on Twitter at [@SecurityYamato](https://twitter.com/SecurityYamato)."
        },
        {
          "name": "art",
          "type": "tree",
          "content": null
        },
        {
          "name": "config",
          "type": "tree",
          "content": null
        },
        {
          "name": "contributors.txt",
          "type": "blob",
          "size": 1.1943359375,
          "content": "Hayabusa was possible thanks to the following people (in alphabetical order):\n\nAkira Nishikawa (@nishikawaakira): First lead developer (core hayabusa rule support, etc...)\nFukusuke Takahashi (fukusuket): Core developer (Too many bug fixes to count, hayabusa converter upgrades, new features, etc...)\nGarigariganzy (@garigariganzy31): Developer (Event ID metrics implementation, etc...)\nItiB (@itiB_S144):  Core developer (sigmac hayabusa backend, search command, etc...)\nJames Takai / hachiyone(@hach1yon): Second lead developer (Tokio multi-threading, sigma aggregation logic, sigmac backend, rule creation, sigma count implementation etc…)\nKazuminn (@k47_um1n): Core Developer (Many features.)\nMatthew Seyer: Adding the ability to carve out records\nTsubokku (@ytsuboi0322): Translations\nYusuke Matsui (@apt773): AD hacking working group leader, rule testing, documentation, research, support, etc...\nZach Mathis (@yamatosecurity, Yamato Security Founder): Project leader, tool and concept design, rule creation and tuning, etc…\n\nAlso a big thanks to the following people for projects that make Hayabusa possible:\n\nOmer BenAmram for creating the Rust evtx crate.\nThe maintainers and contributors of the Sigma project.\n"
        },
        {
          "name": "doc",
          "type": "tree",
          "content": null
        },
        {
          "name": "logo.png",
          "type": "blob",
          "size": 163.90625,
          "content": null
        },
        {
          "name": "logs",
          "type": "tree",
          "content": null
        },
        {
          "name": "rules",
          "type": "commit",
          "content": null
        },
        {
          "name": "screenshots",
          "type": "tree",
          "content": null
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "test_files",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}