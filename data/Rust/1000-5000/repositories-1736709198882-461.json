{
  "metadata": {
    "timestamp": 1736709198882,
    "page": 461,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjQ3MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "gabdube/native-windows-gui",
      "stars": 1991,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.1181640625,
          "content": "**/target\n**/*.rs.bk\n**/examples/test.rs\nCargo.lock\ncode\ndocs/native-windows-docs/tmp.*\n.vs\n\n# Exclude intellijank\n.idea\n"
        },
        {
          "name": "Cargo.toml",
          "type": "blob",
          "size": 0.408203125,
          "content": "[workspace]\n\nmembers = [\n    \"native-windows-gui\",\n    \"native-windows-derive\",\n    \"native-windows-canvas\",\n    \"native-windows-gui/examples/opengl_canvas\",\n    \"native-windows-gui/examples/embed_resources\",\n    \"native-windows-gui/examples/sync-draw\",\n    \"native-windows-gui/examples/wgpu_canvas\",\n    \"native-windows-gui/examples/hdpi_plotting\",\n]\n\n[profile.dev]\npanic = 'abort'\n\n[profile.release]\npanic = 'abort'\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.0439453125,
          "content": "MIT License\n\nCopyright (c) 2019 Gabriel Dube\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "changelog.md",
          "type": "blob",
          "size": 3.7548828125,
          "content": "1.0.12\n* A new plotting control\n* Added support for system key events  (thanks to dnlmlr)\n* Replace target_arch with target_pointer_width (thanks to skyfloogle)\n* Minor improvements in the rich label control\n* Fix window centering with high dpi enabled\n* New release for native-windows-derive (1.0.4)\n  * Support for generics in native-windows-derive (thanks to RicoRodriges)\n  * Fix deriving partial into into other partials (thanks to yakov-bakhmatov)\n\n1.0.11\n* Double buffer option for ListView\n* Fix a treeview issue when building without the image-list feature\n* FIx dpi awareness with min/max functions\n* Deprecate `Timer`\n* Added `AnimationTimer`, a all around better timer component\n* Fix some resource leak\n* Added support for `raw-window-handle` ini Window and ExternCanvas\n* Fixed to panics warnings on rust 1.51.0\n\n1.0.10\n* Fixed a compiling bug when using `no-default-features`\n\n1.0.9\n* BREAKING CHANGE: File dialog `get_selected_item` & `get_selected_items` now return `OsString` instead of String to handle some exotic Windows path\n* Added vertical alignment  `v_align` to label (defaults to center)\n* Added vertical alignment `v_align` to combobox (defaults to center)\n* Fixed multi-line label alignment \n* Added helpers functions to Bitmap and Icons\n* Added the `Monitor` struct to query monitor and screen information\n* Added `center` to the window builder to center a window on screen\n* Fixed the text input refresh after calling `set_password_char`\n* `maximise`, `minimise`, `restore` for window control\n\n1.0.8\n\n* Added `Menu::popup_with_flags` to customize the display of popup menus\n* Added a way to specify the extended window flags to all controls\n* Added a new layout type `Dynamic Layout` (thanks to RicoRodriges)\n* Added a way to directly set the column width in a data grid view (thanks to RicoRodriges)\n* Some grammar and spelling fix (thanks to bingen13 and celialewis3)\n* Fix the derive macro so that it works with the rust 2018 module aliasing (native-windows-derive v 1.0.3)\n\n1.0.7\n\n* Fixed support for the GNU toolchain\n\n1.0.6\n\n* Added rich textbox feature\n* Added rich label control (a label using tich text box under the hood)\n* Fixed the headers of the list view and few other rendering bug (thanks to RicoRodriges)\n* New list view events (thanks to RicoRodriges)\n* Fixed a severe memory leak in image creation (thanks to RicoRodriges)\n* Fix a z order bug with the tab naviguation\n* Added `selected_item_count` and `selected_items` to Treeview.\n* Fixed `selected_item` in TreeView to support item set programatically\n\n1.0.5\n\n* Added placeholder for textinput\n* Fixed a crasher when resizing a tab container\n* Icon can now be loaded from memory\n* Bitmap can be converted to icons using `Bitmap::copy_as_icon`\n* Systray pop up menu now closes when you click outside of them\n* Embedded image loading functions (`EmbedResource::image`, `EmbedResource::icon`, etc) have a new `size` parameter\n* 2 new events for menus\n  * OnMenuEnter: Raised when a menu is shown on screen\n  * OnMenuExit: Raised when a menu is closed by the user. Either by selecting an item or by clicking outside of it.\n\n1.0.4\n\n* Documentation fixes\n* Get parent item in tree view\n* Load any image from embed source\n* Set/Get listview background color\n* always show selected items in listview and treeview (even if the control does not have focus)\n\n1.0.3\n\n* A few bug fixes\n* Add the ability to move controls in a grid layout\n* Added the `OnMinMaxInfo` event to handle the min/max size of a window\n* Fixed the tab header height\n\n1.0.2\n\n* Fix carriage return in multiline textbox. 100% sure it was working but heh\n* Clipboard internal APi improvement by @DoumanAsh\n* Update some progress bar flags at runtime with `add_flags` and `remove_flags` \n* Modal message boxes\n\n1.0.1\n\n* A quickfix for the docs.rs documentation.\n\n1.0.0\n\n* Initial release"
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "native-windows-canvas",
          "type": "tree",
          "content": null
        },
        {
          "name": "native-windows-derive",
          "type": "tree",
          "content": null
        },
        {
          "name": "native-windows-gui",
          "type": "tree",
          "content": null
        },
        {
          "name": "readme.md",
          "type": "blob",
          "size": 15.5087890625,
          "content": "# Native Windows GUI\n\nWelcome to Native Windows GUI (aka NWG). A rust library to develop native GUI applications on the desktop for Microsoft Windows.\n\nNWG is a very light wrapper over WINAPI. It allows you, the developer, to handle\nthe quirks and rough edges of the API by providing a simple, safe and rust-like interface.\n\nNative Windows GUI keeps things simple. This means small compile times, minimal resource usage,\nless time searching the documentation and more time for you to develop your application.\n\nOf course, you don't have to take my word for it, check out the [showcase](showcase) and the \n[examples](native-windows-gui/examples).\n\nThis is the 3rd and final version of NWG. It is considered \"mature\" or, as I would say\n\"the backlog is empty, and it will most likely stay that way\". This version implements pretty much\neverything required to develop applications on Windows. Don't bother using the older versions as they\nhave \"irreconcilable design decisions\" and cannot support some key features. Future development will be done\nin other libraries.\n\nIf you've managed to read through this introduction, you should know that my twitter handle\nis [#gdube_dev](https://twitter.com/gdube_dev) and you can support this project with [*GitHub Sponsors*](https://github.com/sponsors/gabdube).\n\nAny support is greatly appreciated.\n\n## Installation\n\nTo use NWG in your project add it to cargo.toml:\n\n```toml\n[dependencies]\nnative-windows-gui = \"1.0.12\"\nnative-windows-derive = \"1.0.3\" # Optional. Only if the derive macro is used.\n```\n\nAnd then, in main.rs or lib.rs :\n\n```rust\nextern crate native_windows_gui as nwg;\nextern crate native_windows_derive as nwd;  // Optional. Only if the derive macro is used.\n```\n\n### Rust 2018 aliasing\n\nYou can skip the `extern crate` define in your source code by adding the following code in `Cargo.toml`\nNote that procedural macros still require an `extern crate` definition, so this wont work with `native-windows-derive`\n\n```toml\n[dependencies]\nnwg = {version = \"^1.0.12\", package = \"native-windows-gui\"}\n```\n\n\n## Trying it out\n\nSee it for yourself. NWG has plenty of examples and a fully interactive test suite. The only thing you need to do is:\n\n```bash\ngit clone git@github.com:gabdube/native-windows-gui.git\n\ncd native-windows-gui/native-windows-gui # Running the tests from the workspace screws up the features\n\ncargo test everything --features \"all\"  # For the test suite\ncargo run --example basic\ncargo run --example calculator\ncargo run --example message_bank\ncargo run --example image_decoder_d --features \"extern-canvas\"\ncargo run --example partials --features \"listbox frame combobox\"\ncargo run --example system_tray --features \"tray-notification message-window menu cursor\"\ncargo run --example dialog_multithreading_d --features \"notice\"\ncargo run --example image_decoder_d --features \"image-decoder file-dialog\"\ncargo run --example month_name_d --features \"winnls textbox\"\ncargo run --example splash_screen_d --features \"image-decoder\"\ncargo run --example drop_files_d --features \"textbox\"\n\ncd examples/opengl_canvas\ncargo run\n\n# The closest thing to a real application in the examples\ncd ../examples/sync-draw\ncargo run\n\n# Requires the console to be run as Admin because of the embed resource\ncd ../examples/embed_resources\ncargo run\n```\n\n### Cross-compiling from Ubuntu\n\nRequirement: MinGW compiler\n\n    sudo apt install gcc-mingw-w64-x86-64\n\nRequirement: Rust support\n\n    rustup target add x86_64-pc-windows-gnu\n\nCompiling and running basic example:\n\n    cargo build --release --target=x86_64-pc-windows-gnu\n    cargo build --release --target=x86_64-pc-windows-gnu --example basic\n    wine target/x86_64-pc-windows-gnu/release/examples/basic.exe\n\n## Project structure\n\nThis is the main project git. It is separated in multiple sections\n\n- native-windows-gui\n  - The base library. Includes an interactive test suite and plenty of examples\n- native-windows-derive\n  - A procedural macro that generates the GUI application from rust structure (pretty cool stuff IMO)\n- docs/native-windows-docs [read it online](https://gabdube.github.io/native-windows-gui/native-windows-docs/index.html)\n  - Hefty documentation that goes over everything you need to know about NWG\n- [showcase](showcase)\n  - Images of the examples. If you've made an NWG application and want\n  to share it here, send me a message or open a PR. It's free real estate.\n\n## Supported features\n\n- The WHOLE winapi control library [(reference)](https://docs.microsoft.com/en-us/windows/win32/controls/individual-control-info)\n  - Some very niche controls are not supported: flat scroll bar, ip control, rebar, and pager.\n- Menus and menu bar\n- Image and font resource\n  - BMP\n  - ICO\n  - CUR\n  - PNG*\n  - GIF*\n  - JPG*\n  - TIFF*\n  - DDS*\n  - *: Extended image formats with the Windows Imaging Component (WIC).\n- Localization support\n  - Uses Windows National Language Support internally [(reference)](https://docs.microsoft.com/en-us/windows/win32/intl/national-language-support)\n- Tooltip\n- System tray notification\n- Cursor handling\n- A full clipboard wrapper\n- Partial templates support\n  - Split large application into chunks\n- Dynamic controls support\n  - Add/Remove controls at runtime\n  - Bind or unbind new events at runtime\n- Multithreaded application support\n  - Communicate to the GUI thread from another thread\n  - Run multiple windows on different threads\n- Simple layout configurations\n  - FlexboxLayout\n  - GridLayout\n- Drag and drop\n  - Drop files from the desktop to a window\n- The most common dialog boxes\n  - File dialog (save, open, open folder)\n  - Font dialog\n  - Color dialog\n- A canvas that can be used by external rendering APIs\n- High-DPI aware\n- Support for accessibility functions\n  - Tab navigation\n- Support for low level system message capture (HWND, MSG, WPARAM, LPARAM)\n- Cross compiling and testing from Linux to Windows with Wine and mingw.\n  - Not all features are supported (but the majority are, thanks WINE!)\n  - See `https://zork.net/~st/jottings/rust-windows-and-debian.html` for the steps to follow\n\n## Performance\n\nThis was measured on a `Intel(R) Core(TM) i7-3770 CPU @ 3.40GHz, 3401 Mhz, 4 Core(s), 8 Logical Processor(s)`\n\nIn release mode, the `basic` example weighs **163kb** on disk and takes **900kb** in memory. Launch time is instantaneous.\n\nThe interactive test suite (with every feature and 100s of tests) weighs **931 kb** on disk and takes **8MB** in memory. Launch time is still instantaneous.\n\nInitial build time takes around **22 seconds** for a basic application. This is mainly due to `winapi-rs` initial compile time. Subsequent compile time takes around **0.7 seconds**.\n\n## Development\n\nThe development of this library is considered \"done\". By that, I mean that\nthere won't be any change to the API. Issues can be raised if a bug is found or\nif some area in the documentation is unclear. If I overlooked a very important feature,\nit will most likely be added.\n\n## License\n\nNWG uses the MIT license\n\n## Code example\n\n### With native windows derive\n\n```rust\n#![windows_subsystem = \"windows\"]\n/*!\n    A very simple application that shows your name in a message box.\n    Unlike `basic_d`, this example uses layout to position the controls in the window\n*/\n\n\nextern crate native_windows_gui as nwg;\nextern crate native_windows_derive as nwd;\n\nuse nwd::NwgUi;\nuse nwg::NativeUi;\n\n\n#[derive(Default, NwgUi)]\npub struct BasicApp {\n    #[nwg_control(size: (300, 115), position: (300, 300), title: \"Basic example\", flags: \"WINDOW|VISIBLE\")]\n    #[nwg_events( OnWindowClose: [BasicApp::say_goodbye] )]\n    window: nwg::Window,\n\n    #[nwg_layout(parent: window, spacing: 1)]\n    grid: nwg::GridLayout,\n\n    #[nwg_control(text: \"Heisenberg\", focus: true)]\n    #[nwg_layout_item(layout: grid, row: 0, col: 0)]\n    name_edit: nwg::TextInput,\n\n    #[nwg_control(text: \"Say my name\")]\n    #[nwg_layout_item(layout: grid, col: 0, row: 1, row_span: 2)]\n    #[nwg_events( OnButtonClick: [BasicApp::say_hello] )]\n    hello_button: nwg::Button\n}\n\nimpl BasicApp {\n\n    fn say_hello(&self) {\n        nwg::modal_info_message(&self.window, \"Hello\", &format!(\"Hello {}\", self.name_edit.text()));\n    }\n    \n    fn say_goodbye(&self) {\n        nwg::modal_info_message(&self.window, \"Goodbye\", &format!(\"Goodbye {}\", self.name_edit.text()));\n        nwg::stop_thread_dispatch();\n    }\n\n}\n\nfn main() {\n    nwg::init().expect(\"Failed to init Native Windows GUI\");\n    nwg::Font::set_global_family(\"Segoe UI\").expect(\"Failed to set default font\");\n    let _app = BasicApp::build_ui(Default::default()).expect(\"Failed to build UI\");\n    nwg::dispatch_thread_events();\n}\n```\n\n### Barebone example. Suitable if you only need a simple static UI\n\n```rust\n#![windows_subsystem = \"windows\"]\n/**\n    A very simple application that show your name in a message box.\n\n    This demo shows how to use NWG without the NativeUi trait boilerplate.\n    Note that this way of doing things is alot less extensible and cannot make use of native windows derive.\n\n    See `basic` for the NativeUi version and `basic_d` for the derive version\n*/\nextern crate native_windows_gui as nwg;\nuse std::rc::Rc;\n\nfn main() {\n    nwg::init().expect(\"Failed to init Native Windows GUI\");\n    nwg::Font::set_global_family(\"Segoe UI\").expect(\"Failed to set default font\");\n\n    let mut window = Default::default();\n    let mut name_edit = Default::default();\n    let mut hello_button = Default::default();\n    let layout = Default::default();\n\n    nwg::Window::builder()\n        .size((300, 115))\n        .position((300, 300))\n        .title(\"Basic example\")\n        .build(&mut window)\n        .unwrap();\n\n    nwg::TextInput::builder()\n        .text(\"Heisenberg\")\n        .focus(true)\n        .parent(&window)\n        .build(&mut name_edit)\n        .unwrap();\n\n    nwg::Button::builder()\n        .text(\"Say my name\")\n        .parent(&window)\n        .build(&mut hello_button)\n        .unwrap();\n\n    nwg::GridLayout::builder()\n        .parent(&window)\n        .spacing(1)\n        .child(0, 0, &name_edit)\n        .child_item(nwg::GridLayoutItem::new(&hello_button, 0, 1, 1, 2))\n        .build(&layout)\n        .unwrap();\n\n    let window = Rc::new(window);\n    let events_window = window.clone();\n\n    let handler = nwg::full_bind_event_handler(&window.handle, move |evt, _evt_data, handle| {\n        use nwg::Event as E;\n\n        match evt {\n            E::OnWindowClose => \n                if &handle == &events_window as &nwg::Window {\n                    nwg::modal_info_message(&events_window.handle, \"Goodbye\", &format!(\"Goodbye {}\", name_edit.text()));\n                    nwg::stop_thread_dispatch();\n                },\n            E::OnButtonClick => \n                if &handle == &hello_button {\n                    nwg::modal_info_message(&events_window.handle, \"Hello\", &format!(\"Hello {}\", name_edit.text()));\n                },\n            _ => {}\n        }\n    });\n\n    nwg::dispatch_thread_events();\n    nwg::unbind_event_handler(&handler);\n}\n```\n\n### With the NativeUi boilerplate\n\n```rust\n#![windows_subsystem = \"windows\"]\n/*!\n    A very simple application that shows your name in a message box.\n    Uses layouts to position the controls in the window\n*/\n\nextern crate native_windows_gui as nwg;\nuse nwg::NativeUi;\n\n\n#[derive(Default)]\npub struct BasicApp {\n    window: nwg::Window,\n    layout: nwg::GridLayout,\n    name_edit: nwg::TextInput,\n    hello_button: nwg::Button\n}\n\nimpl BasicApp {\n\n    fn say_hello(&self) {\n        nwg::modal_info_message(&self.window, \"Hello\", &format!(\"Hello {}\", self.name_edit.text()));\n    }\n    \n    fn say_goodbye(&self) {\n        nwg::modal_info_message(&self.window, \"Goodbye\", &format!(\"Goodbye {}\", self.name_edit.text()));\n        nwg::stop_thread_dispatch();\n    }\n\n}\n\n//\n// ALL of this stuff is handled by native-windows-derive\n//\nmod basic_app_ui {\n    use native_windows_gui as nwg;\n    use super::*;\n    use std::rc::Rc;\n    use std::cell::RefCell;\n    use std::ops::Deref;\n\n    pub struct BasicAppUi {\n        inner: Rc<BasicApp>,\n        default_handler: RefCell<Option<nwg::EventHandler>>\n    }\n\n    impl nwg::NativeUi<BasicAppUi> for BasicApp {\n        fn build_ui(mut data: BasicApp) -> Result<BasicAppUi, nwg::NwgError> {\n            use nwg::Event as E;\n            \n            // Controls\n            nwg::Window::builder()\n                .flags(nwg::WindowFlags::WINDOW | nwg::WindowFlags::VISIBLE)\n                .size((300, 115))\n                .position((300, 300))\n                .title(\"Basic example\")\n                .build(&mut data.window)?;\n\n            nwg::TextInput::builder()\n                .text(\"Heisenberg\")\n                .parent(&data.window)\n                .focus(true)\n                .build(&mut data.name_edit)?;\n\n            nwg::Button::builder()\n                .text(\"Say my name\")\n                .parent(&data.window)\n                .build(&mut data.hello_button)?;\n\n            // Wrap-up\n            let ui = BasicAppUi {\n                inner: Rc::new(data),\n                default_handler: Default::default(),\n            };\n\n            // Events\n            let evt_ui = Rc::downgrade(&ui.inner);\n            let handle_events = move |evt, _evt_data, handle| {\n                if let Some(ui) = evt_ui.upgrade() {\n                    match evt {\n                        E::OnButtonClick => \n                            if &handle == &ui.hello_button {\n                                BasicApp::say_hello(&ui);\n                            },\n                        E::OnWindowClose => \n                            if &handle == &ui.window {\n                                BasicApp::say_goodbye(&ui);\n                            },\n                        _ => {}\n                    }\n                }\n            };\n\n           *ui.default_handler.borrow_mut() = Some(nwg::full_bind_event_handler(&ui.window.handle, handle_events));\n\n           // Layouts\n           nwg::GridLayout::builder()\n            .parent(&ui.window)\n            .spacing(1)\n            .child(0, 0, &ui.name_edit)\n            .child_item(nwg::GridLayoutItem::new(&ui.hello_button, 0, 1, 1, 2))\n            .build(&ui.layout)?;\n\n            return Ok(ui);\n        }\n    }\n\n    impl Drop for BasicAppUi {\n        /// To make sure that everything is freed without issues, the default handler must be unbound.\n        fn drop(&mut self) {\n            let handler = self.default_handler.borrow();\n            if handler.is_some() {\n                nwg::unbind_event_handler(handler.as_ref().unwrap());\n            }\n        }\n    }\n\n    impl Deref for BasicAppUi {\n        type Target = BasicApp;\n\n        fn deref(&self) -> &BasicApp {\n            &self.inner\n        }\n    }\n}\n\nfn main() {\n    nwg::init().expect(\"Failed to init Native Windows GUI\");\n    nwg::Font::set_global_family(\"Segoe UI\").expect(\"Failed to set default font\");\n    let _ui = BasicApp::build_ui(Default::default()).expect(\"Failed to build UI\");\n    nwg::dispatch_thread_events();\n}\n```\n\n## Attributions\n\nFor the icons used in the test suite (and only there):\n\n- **love.ico** is made by [Smashicons](https://smashicons.com/) from [www.flaticon.com](https://www.flaticon.com/)\n- **popcorn.bmp** is made by [Freepik](https://www.freepik.com) from [www.flaticon.com](https://www.flaticon.com/)\n- **ball.bmp** is made by [Freepik](https://www.freepik.com) from [www.flaticon.com](https://www.flaticon.com/)\n- **cat.jpg** is made by [Freepik](https://www.freepik.com) from [www.flaticon.com](https://www.flaticon.com/)\n- **weird_cat.png** is made by [Freepik](https://www.freepik.com) from [www.flaticon.com](https://www.flaticon.com/)\n- **list_0.png**, **list_1.png**, **list_2.png**, **list_3.png** are made by [Smashicons](https://smashicons.com/) from [www.flaticon.com](https://www.flaticon.com/)\n- **ice.cur** is made by nrox653 from [rw-designer](http://www.rw-designer.com/cursor-set/icepackpro)\n"
        },
        {
          "name": "showcase",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}