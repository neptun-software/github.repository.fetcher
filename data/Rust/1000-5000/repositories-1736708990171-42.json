{
  "metadata": {
    "timestamp": 1736708990171,
    "page": 42,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjUw",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "rusterlium/rustler",
      "stars": 4409,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".clippy.toml",
          "type": "blob",
          "size": 0.013671875,
          "content": "msrv = \"1.70\"\n"
        },
        {
          "name": ".formatter.exs",
          "type": "blob",
          "size": 0.0537109375,
          "content": "[\n  subdirectories: [\"rustler_tests\", \"rustler_mix\"]\n]\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.6025390625,
          "content": "# Created by https://www.gitignore.io/api/vim,rust\n\n### Vim ###\n[._]*.s[a-w][a-z]\n[._]s[a-w][a-z]\n*.un~\nSession.vim\n.netrwhist\n*~\n\n### IntelliJ ##\n/.idea\n/rustler.iml\n\n### Rust ###\n# Compiled files\n*.o\n*.so\n*.rlib\n*.dll\n\n# Executables\n*.exe\n\n# Generated by Cargo\n**/target/*\n/rustler/target/\n/rustler_tests/priv/native/*\n/rustler_tests/target/\n/rustler_tests/_build\n/rustler_tests/deps\n/rustler_tests/mix.lock\nCargo.lock\n\n/rustler_codegen/target/\n/rustler_codegen/test/target/\n/rustler_codegen/Cargo.lock\n\n/_build\n/cover\n/deps\nerl_crash.dump\n*.ez\n\n/installer/_build\n/installer/cover\n/installer/deps\n\n/rustler_mix/doc\n"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 14.1865234375,
          "content": "# Changelog\n\nAll notable changes to this project will be documented in this file.\n\nThe format is based on [Keep a Changelog](https://keepachangelog.com/en/1.1.0/),\nand this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0.html).\n\nSee [`UPGRADE.md`](./UPGRADE.md) for additional help when upgrading to newer\nversions.\n\n## unreleased\n\n### Added\n\n- Create a workplace `Cargo.toml` file with `mix rustler.new` (#672)\n\n### Fixed\n\n- Some derive macros failed when only `decode` was requested (#676)\n\n### Changed\n\n### Removed\n\n- The linkage override for macOS is not needed anymore and has been removed from\n  the template (#672)\n\n## [0.35.1] - 2024-12-18\n\n### Fixed\n\n- Fix clippy lints in `rustler_codegen` (#671)\n- Adjust `Rustler` macros to not produce warnings on Elixir 1.18 (#670)\n\n## [0.35.0] - 2024-10-15\n\n### Added\n\n- The resource type name can be overridden with\n  `#[register_impl(name = \"...\")]` (#638)\n- Floats can be decoded from integers (#641, fixes #603)\n- Resource types can implement and use dynamic calls on NIF version 2.16 (#635)\n- `Encoder` and `Decoder` implementations for `Box<T>` (#644)\n- `Reference` type and `env.make_ref()` function (#657)\n\n### Fixed\n\n- The optional `register` attribute on `#[register_impl]` works as advertised\n  now (#638)\n- API functions for Windows are correctly assigned for NIF version 2.15 and\n  above (#635)\n- Panics in encoding the result of NIF function are caught (#656)\n- Reverted change to \"recompile if the NIF library is changed/deleted\" (#654,\n  fixes #651)\n\n### Changed\n\n- The special ok/error handling for atoms in serde is now restricted to variant\n  names (#639)\n- `rustler_sys` as a separate library is merged into `rustler::sys` and will not\n  be released independently of `rustler` anymore (#653)\n\n## [0.34.0] - 2024-07-09\n\n### Added\n\n- Resource type registration has been refactored to eventually remove the\n  `rustler::resource!` macro (#617, necessary due to a pending deprecation of a\n  Rust feature, #606)\n- Resources can (and should) now explicitly implement the new `Resource` trait\n  and provide a custom `destructor` function that is run before `drop` and\n  receives an `Env` parameter (#617)\n- Process monitoring via resources can now be used on resource types that\n  implement the `Resource::down` callback (#617)\n- Resource implementation and registration helper attribute (#627)\n\n### Fixed\n\n- Unwinding in the `on_load` callback is now caught and leads to a panic (#617)\n\n### Changed\n\n- NIF implementations are now discovered automatically and the respective\n  argument of `rustler::init!` is ignored (#613)\n- The `derive` feature flag is now ignored and its functionality unconditionally\n  enabled (#621)\n\n## [0.33.0] - 2024-05-29\n\n### Added\n\n- Optional support for using Erlang's allocator as Rust's global allocator\n  (#580).\n- Comparison functions for PIDs (#611).\n- Conversions from and to Rust paths (`PathBuf` and `Path`) (#608).\n\n### Fixed\n\n- `mix compile` failing on path dependencies in the Rust library (#577, fixed in\n  #578 and #607)\n\n### Changed\n\n- Drop usage of `lazy_static` in favour of `std::sync::OnceLock`. This change\n  raises the minimal supported Rust version to 1.70.\n- Drop obsolete and incorrect `Rustler.nif_versions` function.\n\n### Removed\n\n- The old macros `rustler_export_nifs!`, `rustler::rustler_atoms!` and\n  `resource_struct_init!` have been removed (#604). They had been deprecated\n  since version 0.22.0.\n\n## [0.32.1] - 2024-03-21\n\n### Added\n\n- Map iterators are now [DoubleEndedIterators](https://doc.rust-lang.org/std/iter/trait.DoubleEndedIterator.html)\n  (#598), thus allowing being iterated in reverse using `.rev()`\n- `Env::is_process_alive` and `LocalPid::is_alive` (#599)\n- Encoding and decoding of 128 bit integers (#600)\n- Optional codec for `num_bigint::BigInt` using the `big_integer` feature (#601)\n- Add experimental `serde` support derived from `serde_rustler`\n\n### Changed\n\n- Adjust C char types to use the proper FFI type (#592)\n- Allow arbitrary (ASCII) NIF function names (#593, idea and initial\n  implementation by @KoviRobi)\n\n### Removed\n\n- `rustler_bigint` is replaced by a feature flag and the wrapper is not\n  necessary anymore (#601)\n\n## [0.32.0] - 2024-03-20\n\nYanked because it did not include all merged changes.\n\n## [0.31.0] - 2024-02-13\n\n### Added\n\n- Support for generic types in derive macros (#574)\n- New `is_float` and `is_integer` methods on terms (#581)\n\n### Fixed\n\n- Finalized making `:rustler` a compile-time-only dependency (#570)\n- Make `get_type` work as documented for 0.30 (#581)\n- Tests on ARM64 (#584)\n- Error messages in codegen (#579)\n\n### Changed\n\n- Use `impl Encoder` on more functions (in particular on `send`) (#572)\n- The generated atom modules for derived structs are now called\n  `rustler_atoms_{struct_name_in_snakecase}` to silence warnings (#585)\n\n### Removed\n\n- Support for `initmacro` in `rustler-sys` (v2.3.2, #589)\n\n## [0.30.0] - 2023-10-11\n\n### Added\n\n- Return `Result<(), SendError>` from all `send` functions (#239, #563)\n\n### Changed\n\n- Deprecate `:rustler_crates` project configuration\n- Mark `use Rustler` module configuration as compile-time\n- Bump Rust edition to 2021\n- Make `:rustler` a compile-time-only dependency (#516, #559)\n- Use `enif_term_type` to implement `Term::get_type` (#538). Please check the\n  `UPGRADE` documentation for necessary code changes.\n- Raise default NIF version to 2.15\n\n### Removed\n\n- Support for `RUSTLER_NIF_VERSION`, NIF version requirements have to be set via\n  features now\n\n## [0.29.1] - 2023-06-30\n\n### Fixed\n\n- Exclude directories from external resources for compatibility with Elixir 1.15\n  (#548, thanks @adrienmo)\n- Fix `NifTaggedEnum` derived `Encoder` impl for named-field variants (#547,\n  thanks @dylanburati)\n- Remove `cfg!` directives in build.rs causing cross-compilation to fail (#555,\n  thanks @fabriziosestito)\n\n## [0.29.0] - 2023-06-22\n\n### Added\n\n- `ErlOption<T>` to provide an ergonomic option type for Erlang (#507, thanks @tatsuya6502)\n\n### Changed\n\n- Use Cargo features to define the NIF version level (#537), deprecating\n  `RUSTLER_NIF_VERSION`\n\n## [0.28.0] - 2023-04-24\n\n### Added\n\n- Support OTP 26 (#526, thanks @philss)\n- Support tuples in NIF macro (#520, #527, thanks @denumerate and @philss)\n- Support for `load_data_fun` to compute `load_data` at runtime (#413, thanks\n  @kaaboaye)\n\n### Changed\n\n- Enhanced NIF macro error messages for invalid attributes (#525, thanks @philss)\n\n## [0.27.0] - 2023-01-17\n\n### Added\n\n- `ResourceArc::make_binary` for safe use of `enif_make_resource_binary` (#487)\n- `OwnedBinary` is now `Sync` (#493)\n- Specified MSRV to be 1.56.1.\n\n### Changed\n\n- `MIX_ENV` is no longer considered for determining the build profile. Now, the\n  profile defaults to `:release`. Use the `:mode` option to pick another\n  profile explicitly. (#496)\n- Edition 2021 for the rustler mix template (#512, thanks @ayrat555)\n\n### Fixed\n\n- Documentation for `load` (#501, thanks @ishitatsuyuki)\n\n## [0.26.0] - 2022-09-02\n\n### Highlight\n\n#### TaggedEnum\n\nWe added `TaggedEnum`, which is a generalized enum type (#440, thanks to\n@SeokminHong!). Example:\n\n```rust\n#[derive(NifTaggedEnum)]\npub enum TaggedEnum1 {\n    Named { x: i32, y: i32 },\n    String1(String),\n    String2(String),\n    Untagged,\n}\n```\n\nOn the Elixir side, the variants are represented as two-tuples `{tag::atom(),\ninner::term()} | atom()`, where the `inner` term is\n\n- a map for the variant `Named` in the example above\n- a binary for the `String1` and `String2` variants\n\nThe `Untagged` variant is represented as the atom `:untagged` in Elixir.\n\n### Added\n\n- Added `Clone` and `Copy` for `TermType` (#476, thanks @dvic)\n- Added `Env.whereis_pid()` (#456, thanks @Qqwy)\n\n### Changed\n\n- Use `&[impl Encoder]` for keys and values in `map_from_arrays()` to improve\n  ergonomics (#453, thanks @SeokminHong)\n- Improved encode/decode performance of TaggedEnum considerably (#482, thanks\n  @cleaton)\n- Test on OTP 25 (#455)\n\n### Fixed\n\n- Lifetime handling in `rustler_codegen` (#483, thanks @turion @SeokminHong and\n  @neosimsim)\n- Support multiple variants with same field names in TaggedEnum (#482, thanks\n  @cleaton)\n- Support .toml file extension for cargo config (#468, thanks @joshuataylor for\n  the report in #467)\n- Disambiguate `encode`/`decode` in generated code (#466, thanks @SeokminHong)\n- Migrate CI to `erlef/setup-beam` (#457, thanks @SeokminHong)\n- Documentation of the `schedule` flag for `nif` macro (#444)\n- Improve documentation (#429, thanks @turion)\n\n## [0.25.0] - 2022-04-11\n\n### Added\n\n- `NewBinary` now also available as `rustler::NewBinary` (thanks @ayrat555)\n- `Term::map_from_pairs()` to conveniently build a map from a list of pairs\n  (thanks @philss)\n- CI now also tests against macos\n\n### Fixed\n\n- Snake-case warening for auto-generated `RUSTLER_{}_field_{}` variables\n  (renamed to `rustler_{}_field_{}`)\n\n### Changed\n\n- Abort compilation on macos if macos target configuration is missing\n\n## [0.24.0] - 2022-02-24\n\n### Added\n\n- A `NewBinary` type to create binaries in Rust without going through\n  `OwnedBinary`. This can improve performance. Thanks @dlesl!\n- `TermType` derives `Eq` and `PartialEq`.\n\n### Fixed\n\n- Set library file extension based on the compile target, thanks @cocoa-xu!\n- Relaxed Jason version requirement to ~> 1.0\n- Various typos in the documentation, thanks @kianmeng!\n\n### Changed\n\n- Rustler supports the latest 3 versions of Elixir and OTP. Currently, those are\n  Elixir => 1.11 and OTP >= 22.\n- `rustler_mix`: Bumped required toml dependency to 0.6\n- Bumped `rustler_sys` dependency to `~2.2`\n\n## [0.23.0] - 2021-12-22\n\n### Added\n\n- `NifException` for using Elixir exception structs\n- Hashing for term\n- Hash and Equality for `Binary` and `OwnedBinary`\n\n### Fixed\n\n- `mix rustler.new` with Elixir v1.13\n- Template config for `macos`\n- Crash if metadata cannot be retrieved while compiling (#398)\n\n### Changed\n\n- Rustler changed its supported range of OTP and Elixir versions. We aim to\n  support the three newest versions of OTP and Elixir.\n- The decoder for `Range` requires that `:step` equals `1`. The `:step` field\n  was introduced with Elixir v1.12 and cannot be represented with Rust's\n  `RangeInclusive`.\n- NIF API bindings are generated using Rust\n\n## [0.22.2] - 2021-10-07\n\n### Fixed\n\n- Fixed a regression introduced with #386: `Rustler.Compiler.Config` called into\n  `cargo` when `skip_compilation?` was set, breaking setups where cargo is not\n  installed. Fixed with #389, thanks @karolsluszniak\n\n## [0.22.1] - 2021-10-05\n\n### Fixed\n\n- [Breaking change] codegen-generated decoders always raise an error instead of\n  causing the calling NIF to return an atom in some cases\n- Fix codegen problem for untagged enums (#370)\n- Fix handling local dependencies with `@external_resources` (#381)\n\n## [0.22.0] - 2021-06-22\n\n### Added\n\n- Simple `Debug` impl for `rustler::Error`\n- Support newtype and tuple structs for `NifTuple` and `NifRecord`\n- `rustler::Error::Term` encoding an arbitrary boxed encoder, returning\n  `{:error, term}`\n- Generic encoder/decoder for `HashMap<T, U>`, where `T: Decoder` and `U: Decoder`\n\n### Fixed\n\n- Compilation time of generated decoders has been reduced significantly.\n- Fixed a segfault caused by `OwnedEnv::send_and_clear`\n\n### Changed\n\n- Renamed `Pid` to `LocalPid` to clarify that it can't point to a remote process\n- Dependencies have been updated.\n- Derive macros have been refactored.\n- Macros have been renamed and old ones have been deprecated:\n  - `rustler_export_nifs!` is now `rustler::init!`\n  - `rustler_atoms!` is now `rustler::atoms!`\n  - `resource_struct_init!` is now `rustler::resource!`\n- New `rustler::atoms!` macro removed the `atom` prefix from the name:\n\n  ```rust\n  //\n  // Before\n  //\n  rustler::rustler_atoms! {\n      atom ok;\n      atom error;\n      atom renamed_atom = \"Renamed\";\n  }\n\n  //\n  // After\n  //\n  rustler::atoms! {\n      ok,\n      error,\n      renamed_atom = \"Renamed\",\n  }\n  ```\n\n- NIF functions can be initialized with a simplified syntax:\n\n  ```rust\n  //\n  // Before\n  //\n  rustler::rustler_export_nifs! {\n      \"Elixir.Math\",\n      [\n          (\"add\", 2, add)\n      ],\n      None\n  }\n\n  //\n  // After\n  //\n  rustler::init!(\"Elixir.Math\", [add]);\n  ```\n\n- NIFs can be derived from regular functions, if the arguments implement\n  `Decoder` and the return type implements `Encoder`:\n\n  ```rust\n  //\n  // Before\n  //\n  fn add<'a>(env: Env<'a>, args: &[Term<'a>]) -> Result<Term<'a>, Error> {\n      let num1: i64 = args[0].decode()?;\n      let num2: i64 = args[1].decode()?;\n\n      Ok((atoms::ok(), num1 + num2).encode(env))\n  }\n\n  //\n  // After\n  //\n  #[rustler::nif]\n  fn add(a: i64, b: i64) -> i64 {\n    a + b\n  }\n  ```\n\n- `rustler::nif` exposes more options to configure a NIF were the NIF is\n  defined:\n\n  ```rust\n\n  #[rustler::nif(schedule = \"DirtyCpu\")]\n  pub fn dirty_cpu() -> Atom {\n      let duration = Duration::from_millis(100);\n      std::thread::sleep(duration);\n\n      atoms::ok()\n  }\n\n  #[rustler::nif(name = \"my_add\")]\n  fn add(a: i64, b: i64) -> i64 {\n    a + b\n  }\n  ```\n\n### Deprecated\n\nThe rustler compiler has been deprecated and will be removed with v1.0. NIFs\nare no longer defined in `mix.exs`, but are configured with `use Rustler`.  See\nthe documentation for the `Rustler` module. To migrate to the new\nconfiguration:\n\n- Drop `:rustler` from the `:compilers` key in your `mix.exs` `project/0`\n  function\n- Drop `:rustler_crates` from `project/0` and move the configurations into the\n  `use Rustler` of your NIF module or application config:\n\n  ```elixir\n  # config/dev.exs\n  config :my_app, MyApp.Native,\n    mode: :debug\n  ```\n\nFor more information, see [the\ndocumentation](https://hexdocs.pm/rustler/0.22.0-rc.1/Rustler.html#module-configuration-options).\n\n## [0.21.0] - 2019-09-07\n\n### Added\n\n- Support for OTP22.\n- Rust linting with [clippy](https://github.com/rust-lang/rust-clippy).\n- Support for decoding IOLists as binaries, `Term::decode_as_binary`.\n\n### Changed\n\n- `rustler_codegen` is now reexported by the `rustler` crate. Depending on the\n  `rustler_codegen` crate is deprecated.\n- `erlang_nif-sys` has been renamed to `rustler_sys` and vendored into the\n  rustler repo.\n- Replaced the hand-rolled TOML parser in `rustler_mix` with the `toml-elixir` package.\n- Improve error messages for derived encoders/decoders.\n- Rust `bool` now corresponds only to booleans (`false`, `true`) in Elixir.\n  Previously, `nil` and `false` were both decodable to `bool`. To use the\n  previous behaviour, a `Truthy` newtype was introduced.\n"
        },
        {
          "name": "Cargo.toml",
          "type": "blob",
          "size": 0.529296875,
          "content": "[workspace]\nresolver = \"2\"\nmembers = [\n  \"rustler\",\n  \"rustler_codegen\",\n  \"rustler_tests/native/binary_example\",\n  \"rustler_tests/native/rustler_test\",\n  \"rustler_tests/native/rustler_bigint_test\",\n  \"rustler_tests/native/rustler_serde_test\",\n  \"rustler_tests/native/dynamic_load\",\n  \"rustler_tests/native/rustler_compile_tests\",\n  \"rustler_tests/native/resource_dyncall\",\n  \"rustler_benchmarks/native/benchmark\",\n]\ndefault-members = [\n  \"rustler\",\n  \"rustler_codegen\",\n]\n\n[profile.dev]\npanic = \"unwind\"\n\n[profile.release]\npanic = \"unwind\"\n\n"
        },
        {
          "name": "LICENSE-APACHE",
          "type": "blob",
          "size": 10.5927734375,
          "content": "                              Apache License\n                        Version 2.0, January 2004\n                     http://www.apache.org/licenses/\n\nTERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n1. Definitions.\n\n   \"License\" shall mean the terms and conditions for use, reproduction,\n   and distribution as defined by Sections 1 through 9 of this document.\n\n   \"Licensor\" shall mean the copyright owner or entity authorized by\n   the copyright owner that is granting the License.\n\n   \"Legal Entity\" shall mean the union of the acting entity and all\n   other entities that control, are controlled by, or are under common\n   control with that entity. For the purposes of this definition,\n   \"control\" means (i) the power, direct or indirect, to cause the\n   direction or management of such entity, whether by contract or\n   otherwise, or (ii) ownership of fifty percent (50%) or more of the\n   outstanding shares, or (iii) beneficial ownership of such entity.\n\n   \"You\" (or \"Your\") shall mean an individual or Legal Entity\n   exercising permissions granted by this License.\n\n   \"Source\" form shall mean the preferred form for making modifications,\n   including but not limited to software source code, documentation\n   source, and configuration files.\n\n   \"Object\" form shall mean any form resulting from mechanical\n   transformation or translation of a Source form, including but\n   not limited to compiled object code, generated documentation,\n   and conversions to other media types.\n\n   \"Work\" shall mean the work of authorship, whether in Source or\n   Object form, made available under the License, as indicated by a\n   copyright notice that is included in or attached to the work\n   (an example is provided in the Appendix below).\n\n   \"Derivative Works\" shall mean any work, whether in Source or Object\n   form, that is based on (or derived from) the Work and for which the\n   editorial revisions, annotations, elaborations, or other modifications\n   represent, as a whole, an original work of authorship. For the purposes\n   of this License, Derivative Works shall not include works that remain\n   separable from, or merely link (or bind by name) to the interfaces of,\n   the Work and Derivative Works thereof.\n\n   \"Contribution\" shall mean any work of authorship, including\n   the original version of the Work and any modifications or additions\n   to that Work or Derivative Works thereof, that is intentionally\n   submitted to Licensor for inclusion in the Work by the copyright owner\n   or by an individual or Legal Entity authorized to submit on behalf of\n   the copyright owner. For the purposes of this definition, \"submitted\"\n   means any form of electronic, verbal, or written communication sent\n   to the Licensor or its representatives, including but not limited to\n   communication on electronic mailing lists, source code control systems,\n   and issue tracking systems that are managed by, or on behalf of, the\n   Licensor for the purpose of discussing and improving the Work, but\n   excluding communication that is conspicuously marked or otherwise\n   designated in writing by the copyright owner as \"Not a Contribution.\"\n\n   \"Contributor\" shall mean Licensor and any individual or Legal Entity\n   on behalf of whom a Contribution has been received by Licensor and\n   subsequently incorporated within the Work.\n\n2. Grant of Copyright License. Subject to the terms and conditions of\n   this License, each Contributor hereby grants to You a perpetual,\n   worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n   copyright license to reproduce, prepare Derivative Works of,\n   publicly display, publicly perform, sublicense, and distribute the\n   Work and such Derivative Works in Source or Object form.\n\n3. Grant of Patent License. Subject to the terms and conditions of\n   this License, each Contributor hereby grants to You a perpetual,\n   worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n   (except as stated in this section) patent license to make, have made,\n   use, offer to sell, sell, import, and otherwise transfer the Work,\n   where such license applies only to those patent claims licensable\n   by such Contributor that are necessarily infringed by their\n   Contribution(s) alone or by combination of their Contribution(s)\n   with the Work to which such Contribution(s) was submitted. If You\n   institute patent litigation against any entity (including a\n   cross-claim or counterclaim in a lawsuit) alleging that the Work\n   or a Contribution incorporated within the Work constitutes direct\n   or contributory patent infringement, then any patent licenses\n   granted to You under this License for that Work shall terminate\n   as of the date such litigation is filed.\n\n4. Redistribution. You may reproduce and distribute copies of the\n   Work or Derivative Works thereof in any medium, with or without\n   modifications, and in Source or Object form, provided that You\n   meet the following conditions:\n\n   (a) You must give any other recipients of the Work or\n       Derivative Works a copy of this License; and\n\n   (b) You must cause any modified files to carry prominent notices\n       stating that You changed the files; and\n\n   (c) You must retain, in the Source form of any Derivative Works\n       that You distribute, all copyright, patent, trademark, and\n       attribution notices from the Source form of the Work,\n       excluding those notices that do not pertain to any part of\n       the Derivative Works; and\n\n   (d) If the Work includes a \"NOTICE\" text file as part of its\n       distribution, then any Derivative Works that You distribute must\n       include a readable copy of the attribution notices contained\n       within such NOTICE file, excluding those notices that do not\n       pertain to any part of the Derivative Works, in at least one\n       of the following places: within a NOTICE text file distributed\n       as part of the Derivative Works; within the Source form or\n       documentation, if provided along with the Derivative Works; or,\n       within a display generated by the Derivative Works, if and\n       wherever such third-party notices normally appear. The contents\n       of the NOTICE file are for informational purposes only and\n       do not modify the License. You may add Your own attribution\n       notices within Derivative Works that You distribute, alongside\n       or as an addendum to the NOTICE text from the Work, provided\n       that such additional attribution notices cannot be construed\n       as modifying the License.\n\n   You may add Your own copyright statement to Your modifications and\n   may provide additional or different license terms and conditions\n   for use, reproduction, or distribution of Your modifications, or\n   for any such Derivative Works as a whole, provided Your use,\n   reproduction, and distribution of the Work otherwise complies with\n   the conditions stated in this License.\n\n5. Submission of Contributions. Unless You explicitly state otherwise,\n   any Contribution intentionally submitted for inclusion in the Work\n   by You to the Licensor shall be under the terms and conditions of\n   this License, without any additional terms or conditions.\n   Notwithstanding the above, nothing herein shall supersede or modify\n   the terms of any separate license agreement you may have executed\n   with Licensor regarding such Contributions.\n\n6. Trademarks. This License does not grant permission to use the trade\n   names, trademarks, service marks, or product names of the Licensor,\n   except as required for reasonable and customary use in describing the\n   origin of the Work and reproducing the content of the NOTICE file.\n\n7. Disclaimer of Warranty. Unless required by applicable law or\n   agreed to in writing, Licensor provides the Work (and each\n   Contributor provides its Contributions) on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n   implied, including, without limitation, any warranties or conditions\n   of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n   PARTICULAR PURPOSE. You are solely responsible for determining the\n   appropriateness of using or redistributing the Work and assume any\n   risks associated with Your exercise of permissions under this License.\n\n8. Limitation of Liability. In no event and under no legal theory,\n   whether in tort (including negligence), contract, or otherwise,\n   unless required by applicable law (such as deliberate and grossly\n   negligent acts) or agreed to in writing, shall any Contributor be\n   liable to You for damages, including any direct, indirect, special,\n   incidental, or consequential damages of any character arising as a\n   result of this License or out of the use or inability to use the\n   Work (including but not limited to damages for loss of goodwill,\n   work stoppage, computer failure or malfunction, or any and all\n   other commercial damages or losses), even if such Contributor\n   has been advised of the possibility of such damages.\n\n9. Accepting Warranty or Additional Liability. While redistributing\n   the Work or Derivative Works thereof, You may choose to offer,\n   and charge a fee for, acceptance of support, warranty, indemnity,\n   or other liability obligations and/or rights consistent with this\n   License. However, in accepting such obligations, You may act only\n   on Your own behalf and on Your sole responsibility, not on behalf\n   of any other Contributor, and only if You agree to indemnify,\n   defend, and hold each Contributor harmless for any liability\n   incurred by, or claims asserted against, such Contributor by reason\n   of your accepting any such warranty or additional liability.\n\nEND OF TERMS AND CONDITIONS\n\nAPPENDIX: How to apply the Apache License to your work.\n\n   To apply the Apache License to your work, attach the following\n   boilerplate notice, with the fields enclosed by brackets \"[]\"\n   replaced with your own identifying information. (Don't include\n   the brackets!)  The text should be enclosed in the appropriate\n   comment syntax for the file format. We also recommend that a\n   file or class name and description of purpose be included on the\n   same \"printed page\" as the copyright notice for easier\n   identification within third-party archives.\n\nCopyright [yyyy] [name of copyright owner]\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n\thttp://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n"
        },
        {
          "name": "LICENSE-MIT",
          "type": "blob",
          "size": 1.17578125,
          "content": "Copyright (c) 2016 hansihe\nCopyright (c) 2016-2024 The Contributors of the Rustler Project\nSerde support derived from serde_rustler:\n    Copyright (c) 2019-2021 Sunny Gonnabathula\n\nPermission is hereby granted, free of charge, to any\nperson obtaining a copy of this software and associated\ndocumentation files (the \"Software\"), to deal in the\nSoftware without restriction, including without\nlimitation the rights to use, copy, modify, merge,\npublish, distribute, sublicense, and/or sell copies of\nthe Software, and to permit persons to whom the Software\nis furnished to do so, subject to the following\nconditions:\n\nThe above copyright notice and this permission notice\nshall be included in all copies or substantial portions\nof the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF\nANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED\nTO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A\nPARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT\nSHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\nOF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR\nIN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\nDEALINGS IN THE SOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 3.7177734375,
          "content": "# Rustler\n\n[Documentation](https://docs.rs/rustler/latest/rustler) | [Getting Started](https://github.com/rusterlium/rustler/blob/master/README.md#getting-started) | [Example](https://github.com/rusterlium/NifIo)\n\n[![Build Status](https://github.com/rusterlium/rustler/workflows/CI/badge.svg?branch=master)](https://github.com/rusterlium/rustler/actions/workflows/main.yml)\n[![Hex.pm package version](https://img.shields.io/hexpm/v/rustler.svg)](https://hex.pm/packages/rustler)\n[![Crates.io package version](https://img.shields.io/crates/v/rustler.svg)](https://crates.io/crates/rustler)\n[![Last Updated](https://img.shields.io/github/last-commit/rusterlium/rustler.svg)](https://github.com/rusterlium/rustler/commits/master)\n\nRustler is a library for writing Erlang NIFs in safe Rust code. That means\nthere should be no ways to crash the BEAM (Erlang VM). The library provides\nfacilities for generating the boilerplate for interacting with the BEAM,\nhandles encoding and decoding of Erlang terms, and catches rust panics before\nthey unwind into C.\n\nThe library provides functionality for both Erlang and Elixir, however Elixir\nis favored as of now.\n\n#### Features\n\nSafety\n: The code you write in a Rust NIF should never be able to crash the BEAM.\n\nInterop\n: Decoding and encoding rust values into Erlang terms is as easy as a function\n: call.\n\nType composition\n: Making a Rust struct encodable and decodable to Erlang or Elixir can be done\n: with a single attribute.\n\nResource objects\n: Enables you to safely pass a reference to a Rust struct into Erlang code. The\n: struct will be automatically dropped when it's no longer referenced.\n\n#### Getting started\n\nThe easiest way of getting started is the [rustler Elixir library](https://hex.pm/packages/rustler).\n\n- Add the [rustler Elixir library](https://hex.pm/packages/rustler) as a\n  dependency of your project.\n- Run `mix rustler.new` to generate a new NIF in your project. Follow the\n  instructions.\n- If you are already using [`serde`](https://serde.rs) and/or have been using\n  `serde_rustler` before, please enable the `serde` feature in your NIF crate's\n  `Cargo.toml` on the `rustler` dependency.\n\n#### What it looks like\n\nThis is the code for a minimal NIF that adds two numbers and returns the result.\n\n```rust\n#[rustler::nif]\nfn add(a: i64, b: i64) -> i64 {\n    a + b\n}\n\nrustler::init!(\"Elixir.Math\");\n```\n\n#### Minimal Supported Rust Version (MSRV)\n\nRustler currently has a minimal supported Rust version (MSRV) of 1.70. This\nis the configured version in `.clippy.toml`.\n\n#### Supported OTP and Elixir Versions\n\nRustler aims to support the newest three major OTP versions as well as newest three minor Elixir versions.\n\n#### Supported NIF version\n\nThe minimal supported NIF version for a library should be defined via Cargo\nfeatures. The default is currently `2.15` (Erlang/OTP 22). To use features from\nNIF version `2.16` (Erlang/OTP 24) or `2.17` (Erlang/OTP 26), the respective\nfeature flag has to be enabled on the dependency:\n\n```toml\n[dependencies]\nrustler = { version = \"...\", features = [\"nif_version_2_16\"] }\n```\n\n#### Community\n\nYou can find us in the `#rustler:matrix.org` channel on [Matrix](https://matrix.to/#/#rustler:matrix.org)\nor in the `#rustler` channel in [the Elixir lang Slack](https://elixir-slackin.herokuapp.com/).\n\n#### License\n\nLicensed under either of\n\n- Apache License, Version 2.0, ([LICENSE-APACHE](LICENSE-APACHE) or http://www.apache.org/licenses/LICENSE-2.0)\n- MIT license ([LICENSE-MIT](LICENSE-MIT) or http://opensource.org/licenses/MIT)\n\nat your option.\n\n##### Contribution\n\nUnless you explicitly state otherwise, any contribution intentionally submitted\nfor inclusion in the work by you, as defined in the Apache-2.0 license, shall be\ndual licensed as above, without any additional terms or conditions.\n"
        },
        {
          "name": "RELEASE_CHECKLIST.md",
          "type": "blob",
          "size": 0.1298828125,
          "content": "1. Update documentation (`CHANGELOG.md`, `UPGRADE.md`)\n2. Bump version with `prepare_release.sh`\n3. Publish crates and `rustler_mix`\n"
        },
        {
          "name": "UPGRADE.md",
          "type": "blob",
          "size": 8.865234375,
          "content": "# Upgrade\n\nThis document is intended to simplify upgrading to newer versions by extending the changelog.\n\n## 0.34 -> 0.35\n\n`rustler_sys` as a standalone library has been replaced by an embedded\n`rustler::sys` submodule. Due to how the `rustler_/::sys` initialisation works,\nit is not possible to use the new `rustler` in conjunction with `rustler_sys`. A\nsimple textual replacement is enough, though.\n\n## 0.33 -> 0.34\n\n1. NIF implementations are now discovered automatically, the respective argument\n   in the `rustler::init!` macro should be removed. If a NIF implementation\n   should not be exported, it must be disabled with a `#[cfg]` marker.\n2. The functionality related to the `derive` feature is now unconditionally\n   active. The feature flag is kept for compatibility for now but will be\n   removed in the future.\n3. To use a type as a resource, the `Resource` trait should now be implemented\n   on the type, which also allows for specifying a destructor (taking an `Env`\n   argument) or a `down` callback for process monitoring. If the recommended\n   `resource_impl` attribute is used on the `impl` block, the type will by\n   default be automatically registered and the `IMPLEMENTS_...` constants will\n   be set for implemented callbacks.\n\n## 0.32 -> 0.33\n\nThe macro changes that where already carried out in version `0.22` are now\nmandatory, the deprecated macros have been removed. Please see below for\ndocumentation on how to convert from the old to the new set of macros.\n\n## 0.31 -> 0.32\n\n1. The functionality of `rustler_bigint` has moved into `rustler`. The library\n   will still work, but it can now also be replaced by activating the new\n   `big_integer` feature on `rustler`. The new `rustler::BigInt` is a re-export\n   of `num_bigint::BigInt` in contrast to `rustler_bigint::BigInt`, which was a\n   wrapper. For most codebases, it will be enough to activate the feature and\n   replace all `rustler_bigint::BigInt` usages by `rustler::BigInt` (or\n   `num_bigint::BigInt`).\n2. `serde_rustler` has been integrated into `rustler` behind the feature flag\n   `serde`. Arbitrary, `serde`-compatible objects (i.e. with `Deserialize` or\n   `Serialize` `impl`s) can be wrapped in `SerdeTerm` to use them in place of\n   `Encoder` or `Decoder`. The API is for now considered experimental.\n\n## 0.29 -> 0.30\n\n1. `rustler_crates` configuration is deprecated in favor of explicitly passing\n   options on `use Rustler` or configuring the module in your `config/*.exs`\n   files.\n\n2. `Env::send` and `OwnedEnv::send_and_clear` will now return a `Result`.\n   Updating will thus introduce warnings about unused `Result`s. To remove the\n   warnings without changing behaviour, the `Result`s can be \"used\" as\n   ```rust\n   let _ = env.send(...)\n   ```\n   Neither the `Ok` nor the `Err` case carry additional information so far. An\n   error is returned if either the receiving or the sending process is dead.\n   See also\n   [enif\\_send](https://www.erlang.org/doc/man/erl_nif.html#enif_send).\n\n3. As `Term::get_type` is now implemented using `enif_get_type` on all\n   non-Windows systems, some cases of the `TermType` `enum` are changed,\n   removed, or added (on all systems):\n   1. `EmptyList` is dropped, `List` is returned for both empty and non-empty\n      lists\n   2. `Exception` is dropped\n   3. `Number` is split into `Integer` and `Float` (if NIF 2.14 support is\n      explicitly enforced, only `Float` is returned)\n\n4. The default NIF version is raised to 2.15 to make use of `enif_get_type`. To\n   use a compiled NIF with an older version than OTP22, disable the default\n   features and expliictly use the `nif_version_2_14` feature in the library's\n   `Cargo.toml`:\n   ```toml\n   rustler = { version = \"0.30\", default-features = false, features = [\"derive\", \"nif_version_2_14\"] }\n   ```\n\n5. As noted for the `0.28 -> 0.29` transition below, the environment variable\n   `RUSTLER_NIF_VERSION` will not be considered anymore from 0.30 onwards.\n\n## 0.28 -> 0.29\n\n`RUSTLER_NIF_VERSION` is deprecated and will not be considered anymore for 0.30.\nThe NIF version will also not be guessed anymore from a potentially available\ninstalled Erlang version. By default, NIF libraries will now be compiled against\nNIF version 2.14 which is compatible down to OTP21. The default will be adjusted\nalong with the supported OTP versions.\n\nIf additional features are required that use newer NIF versions, these can be\nincluded explicitly in the project's `Cargo.toml` as, e.g.\n\n```toml\n[dependencies]\nrustler = { version = \"0.30\", features = [\"nif_version_2_17\"] }\n```\n\nWith this configuration, the resulting NIF library will only work from OTP26\nonwards, but will also have access to the largest feature set.\n\n## 0.26 -> 0.27\n\n`MIX_ENV` is no longer considered for determining the build profile. Now, the\nprofile defaults to `:release`. Use the `:mode` option to pick another profile\nexplicitly. See #496.\n\n## 0.21 -> 0.22\n\n0.22 changes how to define NIFs. Users upgrading to 0.22 should to do these things:\n\n1. Replace `rustler_atoms!` with `rustler::atoms!`\n2. Replace `resource_struct_init!` with `rustler::resource!`\n3. Replace `rustler::rustler_export_nifs!` with `rustler::init!`\n4. Use the new `rustler::nif` proc_macro to declare NIFs\n\nReplacing `rustler_atoms!` with `rustler::atoms!` is fairly simple and already\nsufficiently described in [CHANGELOG.md](./CHANGELOG.md). Similarly, replacing\n`resource_struct_init!` with `rustler::resource!` is a simple rename, so this does\nnot need additional examples here.\n\n### Replace `rustler::rustler_export_nifs!` with `rustler::init!`\n\n`rustler::init!` in combination with the new `rustler::nif` proc_macro\nsimplifies exporting NIFs. Before, the NIFs and their arity needed to be specified\nusing tuple syntax:\n\n```rust\nrustler::rustler_export_nifs! {\n    \"Elixir.Math\",\n    [\n        (\"add\", 2, add),\n        (\"long_running_operation\", 0, long_running_operation, SchedulerFlags::DirtyCpu)\n    ],\n    None\n}\n```\n\nNow, listing the NIFs directly is sufficient:\n\n```rust\nrustler::init!(\"Elixir.Math\", [add, long_running_operation]);\n```\n\nWith this new macro, defining an `on_load` function (e.g. to set up a resource with\n`rustler::resource!`), is done like this:\n\n```rust\nrustler::init!(\"Elixir.Math\", [add, long_running_operation], load = a_function);\n```\n\nNote that NIF flags such as `SchedulerFlags::DirtyCpu` are not declared in `rustler::init!`, but\nusing the proc_macro `rustler::nif`. See further below for information on migration NIF flags.\n\n### Use the new `rustler::nif` proc_macro to declare NIFs\n\n0.22 introduces a new `proc_macro` allowing to spell out the parameter of a NIF\ndirectly instead of using an `args: &[Term<'a>]`. Lets consider an example `add()`,\nwhere the Elixir function looks like this:\n\n```elixir\ndef add(left, right), do: :erlang.nif_error(:not_loaded)\n```\n\nPreviously, the signature of the corresponding NIF might have looked like this:\n\n```rust\nfn add<'a>(env: Env<'a>, args: &[Term<'a>]) -> Result<Term<'a>, Error>\n```\n\nWhen calling the NIF from Elixir as `add(1, 2)`, `args` would then contain two\n`Term`, one for 1, and one for 2. With 0.22, this becomes more obvious, as the\nNIFs signature resembles the Elixir function's signature:\n\n```rust\n#[rustler::nif]\nfn add(a: i64, b: i64) -> i64\n```\n\nUnder the hood, this is implemented by the `rustler::nif` proc_macro. For the\nnew form to work, the parameters' types need to implement `Decoder`, and the\nreturn type needs to implement `Encoder`.\n\n#### What if `Env` is required in the function?\n\nSometimes, we still need the environment `Env` for the NIF. For example, if\nwork with `Binary` and `OwnedBinary`, the environment would be needed to create a `Binary`\nfrom an `OwnedBinary`. To allow this, `env: Env<'a>` can be added explicitly as well:\n\n```rust\n#[rustler::nif]\npub fn map_entries_sorted<'a>(env: Env<'a>, iter: MapIterator<'a>) -> NifResult<Vec<Term<'a>>>\n```\n\n`env` can then be used the same way as before.\n\n#### Migrating Flags and Rename\n\nThe `rustler::nif` proc_macro allows setting options directly on a NIF. Assume that we have a\nNIF called `_long_running_operation`, which used to be declared prior to Rustler v0.22 like this:\n\n```rust\n// Before\n\nrustler::rustler_export_nifs! {\n    \"Elixir.SomeNif\",\n    [\n        // Note that the function in Rust is long_running_operation, but the NIF is exported as\n        // _long_running_operation!\n        (\"_long_running_operation\", 0, long_running_operation, SchedulerFlags::DirtyCpu)\n    ],\n    None\n}\n\nfn long_running_operation<'a>(env: Env<'a>, _args: &[Term<'a>]) -> Result<Term<'a>, Error> {\n  // ...\n}\n```\n\nThis definition declares that a function `_long_running_operation` with arity\nzero is to be exported, and that this function should be schedules on the\n`DirtyCpu` scheduler. With the changes in Rustler v0.22, the function would be declared like\nthis:\n\n```rust\n// Now\n\nrustler::init!(\"Elixir.SomeNif\", [long_running_operation]);\n\n#[rustler::nif(\n    rename = \"_long_running_operation\",\n    schedule = \"DirtyCpu\"\n  )]\nfn long_running_operation() -> TheProperReturnType {\n // ..\n}\n```\n"
        },
        {
          "name": "justfile",
          "type": "blob",
          "size": 0.408203125,
          "content": "build:\n    cargo build\n    cd rustler_mix && mix deps.get && mix compile\n\ntest:\n    cargo test -q\n    cd rustler_mix && mix deps.get && mix test\n    cd rustler_tests && mix deps.get && mix test\n\ntest-all: test\n    cd rustler_mix && ./test.sh\n\ncheck-format:\n    cargo fmt --all -- --check\n    mix format --check-formatted\n\nformat:\n    cargo fmt --all\n    mix format\n\nlint:\n    cargo clippy --all-targets --all-features\n"
        },
        {
          "name": "prepare_release.sh",
          "type": "blob",
          "size": 2.201171875,
          "content": "#!/bin/bash\n#\n# Prepare releasing a new rustler version.\n#\n# Usage: ./prepare_release.sh 1.2.3\n#\nset -e\n\nVERSION=$1\n\n# Version format check\nSEMVER_REGEX=\"^(0|[1-9][0-9]*)\\\\.(0|[1-9][0-9]*)\\\\.(0|[1-9][0-9]*)(\\\\-[0-9A-Za-z-]+(\\\\.[0-9A-Za-z-]+)*)?(\\\\+[0-9A-Za-z-]+(\\\\.[0-9A-Za-z-]+)*)?$\"\n\nif ! [[ $VERSION =~ $SEMVER_REGEX ]]; then\n    echo \"Invalid version\"\n    exit -1\nfi\n\nTAG=\"rustler-$VERSION\"\n\n# Check version unpublished\n#CRATES_RET=`curl \"https://crates.io/api/v1/crates/rustler/$VERSION/dependencies\"`\n#if ! [[ $CRATES_RET =~ \"does not have a version\" ]]; then\n#    echo \"Version already published\"\n#    exit -1\n#fi\n\nif [ ! -z \"$(git status --untracked-files=no --porcelain)\" ]; then\n    echo \"Uncommitted changes present; aborting.\"\n    exit 1\nfi\n\nREVISION=$(git rev-parse --verify HEAD)\n\necho \"Bumping versions..\"\n\n# Update versions in manifests\nsed -i \"s/^version = \\\"[^\\\"]*\\\" # rustler version$/version = \\\"$VERSION\\\" # rustler version/\" rustler/Cargo.toml\nsed -i \"s/^rustler_codegen.*$/rustler_codegen = { path = \\\"..\\/rustler_codegen\\\", version = \\\"$VERSION\\\"}/\" rustler/Cargo.toml\nsed -i \"s/^version = \\\"[^\\\"]*\\\" # rustler_codegen version$/version = \\\"$VERSION\\\" # rustler_codegen version/\" rustler_codegen/Cargo.toml\nsed -i \"s/def rustler_version, do: \\\"[^\\\"]*\\\"$/def rustler_version, do: \\\"$VERSION\\\"/\" rustler_mix/mix.exs rustler_mix/lib/rustler.ex\nsed -i \"s/@version .*$/@version \\\"$VERSION\\\"/\" rustler_mix/mix.exs\nsed -i \"s/{:rustler, \\\".*\\\"/{:rustler, \\\"~> $VERSION\\\"/\" rustler_mix/README.md\n\necho \"Committing version..\"\ngit commit -m \"(release) $VERSION\" \\\n    rustler/Cargo.toml rustler_codegen/Cargo.toml rustler_mix/mix.exs rustler_mix/lib/rustler.ex rustler_mix/README.md\n\necho \"Tagging version..\"\ngit tag \"$TAG\"\n\ncleanup() {\n    if [[ -z $DONTREVERT ]]; then\n\techo \"Reverting changes..\"\n\tgit tag --delete \"$TAG\"\n\tgit reset --hard \"$REVISION\"\n    fi\n}\n\ntrap cleanup INT EXIT\n\n# Verify that everything is OK by compiling\n\ncargo build\npushd rustler_mix\nmix deps.get\nmix compile\npopd\n\nread -p \"Everything OK? [yN] \" -n 1 -r\n\ntrap \"\" EXIT\n\ncat <<_\n\nTo release, run the following manually:\n\ncd rustler_codegen; cargo publish; cd -\ncd rustler; cargo publish; cd -\ncd rustler_mix; mix hex.publish; cd -\n\ngit push\ngit push origin \"$TAG\"\n_\n"
        },
        {
          "name": "rustler",
          "type": "tree",
          "content": null
        },
        {
          "name": "rustler_benchmarks",
          "type": "tree",
          "content": null
        },
        {
          "name": "rustler_codegen",
          "type": "tree",
          "content": null
        },
        {
          "name": "rustler_mix",
          "type": "tree",
          "content": null
        },
        {
          "name": "rustler_tests",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}