{
  "metadata": {
    "timestamp": 1736709098125,
    "page": 249,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjI1MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "RustAudio/cpal",
      "stars": 2821,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.064453125,
          "content": "/target\r\n/Cargo.lock\r\n.cargo/\r\n.DS_Store\r\nrecorded.wav\r\nrls*.log\r\n"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 7.7431640625,
          "content": "# Unreleased\n\n- All error enums are now `Clone`.\n\n# Version 0.15.3 (2024-03-04)\n\n- Add `try_with_sample_rate`, a non-panicking variant of `with_sample_rate`.\n- struct `platform::Stream` is now #[must_use].\n- enum `SupportedBufferSize` and struct `SupportedStreamConfigRange` are now `Copy`.\n- `platform::Device` is now `Clone`.\n- Remove `parking_lot` dependency in favor of the std library.\n- Fix crash on web/wasm when `atomics` flag is enabled.\n- Improve Examples: Migrate wasm example to `trunk`, Improve syth-thones example.\n- Improve CI: Update actions, Use Android 30 API level in CI, Remove `asmjs-unknown-emscripten` target.\n- Update `windows` dependency to v0.54\n- Update `jni` dependency to 0.21\n- Update `alsa` dependency to 0.9\n- Update `oboe` dependency to 0.6\n- Update `ndk` dependency to 0.8 and disable `default-features`.\n- Update `wasm-bindgen` to 0.2.89\n\n# Version 0.15.2 (2023-03-30)\n\n- webaudio: support multichannel output streams\n- Update `windows` dependency\n- wasapi: fix some thread panics\n\n# Version 0.15.1 (2023-03-14)\n\n- Add feature `oboe-shared-stdcxx` to enable `shared-stdcxx` on `oboe` for Android support\n- Remove `thiserror` dependency\n- Swith `mach` dependency to `mach2`\n\n# Version 0.15.0 (2023-01-29)\n\n- Update `windows-rs`, `jack`, `coreaudio-sys`, `oboe`, `alsa` dependencies\n- Switch to the `dasp_sample` crate for the sample trait\n- Switch to `web-sys` on the emscripten target\n- Adopt edition 2021\n- Add disconnection detection on Mac OS\n\n# Version 0.14.1 (2022-10-23)\n\n- Support the 0.6.1 release of `alsa-rs`\n- Fix `asio` feature broken in 0.14.0\n- `NetBSD` support\n- CI improvements\n\n# Version 0.14.0 (2022-08-22)\n\n- Switch to `windows-rs` crate\n- Turn `ndk-glue` into a dev-dependency and use `ndk-context` instead\n- Update dependencies (ndk, ndk-glue, parking_lot, once_cell, jack)\n\n# Version 0.13.5 (2022-01-28)\n\n- Faster sample format conversion\n- Update dependencies (ndk, oboe, ndk-glue, jack, alsa, nix)\n\n# Version 0.13.4 (2021-08-08)\n\n- wasapi: Allow both threading models and switch the default to STA\n- Update dependencies (core-foundation-sys, jni, rust-jack)\n- Alsa: improve stream setup parameters\n\n# Version 0.13.3 (2021-03-29)\n\n- Give each thread a unique name\n- Fix distortion regression on some alsa configs\n\n# Version 0.13.2 (2021-03-16)\n\n- Update dependencies (ndk, nix, oboe, jni, etc)\n\n# Version 0.13.1 (2020-11-08)\n\n- Don't panic when device is plugged out on Windows\n- Update `parking_lot` dependency\n\n# Version 0.13.0 (2020-10-28)\n\n- Add Android support via `oboe-rs`.\n- Add Android APK build an CI job.\n\n# Version 0.12.1 (2020-07-23)\n\n- Bugfix release to get the asio feature working again.\n\n# Version 0.12.0 (2020-07-09)\n\n- Large refactor removing the blocking EventLoop API.\n- Rename many `Format` types to `StreamConfig`:\n  - `Format` type's `data_type` field renamed to `sample_format`.\n  - `Shape` -> `StreamConfig` - The configuration input required to build a stream.\n  - `Format` -> `SupportedStreamConfig` - Describes a single supported stream configuration.\n  - `SupportedFormat` -> `SupportedStreamConfigRange` - Describes a range of supported configurations.\n  - `Device::default_input/output_format` -> `Device::default_input/output_config`.\n  - `Device::supported_input/output_formats` -> `Device::supported_input/output_configs`.\n  - `Device::SupportedInput/OutputFormats` -> `Device::SupportedInput/OutputConfigs`.\n  - `SupportedFormatsError` -> `SupportedStreamConfigsError`\n  - `DefaultFormatError` -> `DefaultStreamConfigError`\n  - `BuildStreamError::FormatNotSupported` -> `BuildStreamError::StreamConfigNotSupported`\n- Address deprecated use of `mem::uninitialized` in WASAPI.\n- Removed `UnknownTypeBuffer` in favour of specifying sample type.\n- Added `build_input/output_stream_raw` methods allowing for dynamically\n  handling sample format type.\n- Added support for DragonFly platform.\n- Add `InputCallbackInfo` and `OutputCallbackInfo` types and update expected\n  user data callback function signature to provide these.\n\n# Version 0.11.0 (2019-12-11)\n\n- Fix some underruns that could occur in ALSA.\n- Add name to `HostId`.\n- Use `snd_pcm_hw_params_set_buffer_time_near` rather than `set_buffer_time_max`\n  in ALSA backend.\n- Remove many uses of `std::mem::uninitialized`.\n- Fix WASAPI capture logic.\n- Panic on stream ID overflow rather than returning an error.\n- Use `ringbuffer` crate in feedback example.\n- Move errors into a separate module.\n- Switch from `failure` to `thiserror` for error handling.\n- Add `winbase` winapi feature to solve windows compile error issues.\n- Lots of CI improvements.\n\n# Version 0.10.0 (2019-07-05)\n\n- core-foundation-sys and coreaudio-rs version bumps.\n- Add an ASIO host, available under Windows.\n- Introduce a new Host API, adding support for alternative audio APIs.\n- Remove sleep loop on macOS in favour of using a `Condvar`.\n- Allow users to handle stream callback errors with a new `StreamEvent` type.\n- Overhaul error handling throughout the crate.\n- Remove unnecessary Mutex from ALSA and WASAPI backends in favour of channels.\n- Remove `panic!` from OutputBuffer Deref impl as it is no longer necessary.\n\n# Version 0.9.0 (2019-06-06)\n\n- Better buffer handling\n- Fix logic error in frame/sample size\n- Added error handling for unknown ALSA device errors\n- Fix resuming a paused stream on Windows (wasapi).\n- Implement `default_output_format` for emscripten backend.\n\n# Version 0.8.1 (2018-03-18)\n\n- Fix the handling of non-default sample rates for coreaudio input streams.\n\n# Version 0.8.0 (2018-02-15)\n\n- Add `record_wav.rs` example. Records 3 seconds to\n  `$CARGO_MANIFEST_DIR/recorded.wav` using default input device.\n- Update `enumerate.rs` example to display default input/output devices and\n  formats.\n- Add input stream support to coreaudio, alsa and windows backends.\n- Introduce `StreamData` type for handling either input or output streams in\n  `EventLoop::run` callback.\n- Add `Device::supported_{input/output}_formats` methods.\n- Add `Device::default_{input/output}_format` methods.\n- Add `default_{input/output}_device` functions.\n- Replace usage of `Voice` with `Stream` throughout the crate.\n- Remove `Endpoint` in favour of `Device` for supporting both input and output\n  streams.\n\n# Version 0.7.0 (2018-02-04)\n\n- Rename `ChannelsCount` to `ChannelCount`.\n- Rename `SamplesRate` to `SampleRate`.\n- Rename the `min_samples_rate` field of `SupportedFormat` to `min_sample_rate`\n- Rename the `with_max_samples_rate()` method of`SupportedFormat` to `with_max_sample_rate()`\n- Rename the `samples_rate` field of `Format` to `sample_rate`\n- Changed the type of the `channels` field of the `SupportedFormat` struct from `Vec<ChannelPosition>` to `ChannelCount` (an alias to `u16`)\n- Remove unused ChannelPosition API.\n- Implement `Endpoint` and `Format` Enumeration for macOS.\n- Implement format handling for macos `build_voice` method.\n\n# Version 0.6.0 (2017-12-11)\n\n- Changed the emscripten backend to consume less CPU.\n- Added improvements to the crate documentation.\n- Implement `pause` and `play` for ALSA backend.\n- Reduced the number of allocations in the CoreAudio backend.\n- Fixes for macOS build (#186, #189).\n\n# Version 0.5.1 (2017-10-21)\n\n- Added `Sample::to_i16()`, `Sample::to_u16()` and `Sample::from`.\n\n# Version 0.5.0 (2017-10-21)\n\n- Removed the dependency on the `futures` library.\n- Removed the `Voice` and `SamplesStream` types.\n- Added `EventLoop::build_voice`, `EventLoop::destroy_voice`, `EventLoop::play`,\n  and `EventLoop::pause` that can be used to create, destroy, play and pause voices.\n- Added a `VoiceId` struct that is now used to identify a voice owned by an `EventLoop`.\n- Changed `EventLoop::run()` to take a callback that is called whenever a voice requires sound data.\n- Changed `supported_formats()` to produce a list of `SupportedFormat` instead of `Format`. A\n  `SupportedFormat` must then be turned into a `Format` in order to build a voice.\n"
        },
        {
          "name": "Cargo.toml",
          "type": "blob",
          "size": 3.125,
          "content": "[package]\nname = \"cpal\"\nversion = \"0.15.3\"\ndescription = \"Low-level cross-platform audio I/O library in pure Rust.\"\nrepository = \"https://github.com/rustaudio/cpal\"\ndocumentation = \"https://docs.rs/cpal\"\nlicense = \"Apache-2.0\"\nkeywords = [\"audio\", \"sound\"]\nedition = \"2021\"\nrust-version = \"1.70\"\n\n[features]\nasio = [\"asio-sys\", \"num-traits\"] # Only available on Windows. See README for setup instructions.\noboe-shared-stdcxx = [\"oboe/shared-stdcxx\"] # Only available on Android. See README for what it does.\n\n[dependencies]\ndasp_sample = \"0.11\"\n\n[dev-dependencies]\nanyhow = \"1.0\"\nhound = \"3.5\"\nringbuf = \"0.4.1\"\nclap = { version = \"4.0\", features = [\"derive\"] }\n\n[target.'cfg(target_os = \"android\")'.dev-dependencies]\nndk-glue = \"0.7\"\n\n[target.'cfg(target_os = \"windows\")'.dependencies]\nwindows = { version = \"0.54.0\", features = [\n    \"Win32_Media_Audio\",\n    \"Win32_Foundation\",\n    \"Win32_Devices_Properties\",\n    \"Win32_Media_KernelStreaming\",\n    \"Win32_System_Com_StructuredStorage\",\n    \"Win32_System_Threading\",\n    \"Win32_Security\",\n    \"Win32_System_SystemServices\",\n    \"Win32_System_Variant\",\n    \"Win32_Media_Multimedia\",\n    \"Win32_UI_Shell_PropertiesSystem\"\n]}\nasio-sys = { version = \"0.2\", path = \"asio-sys\", optional = true }\nnum-traits = { version = \"0.2.6\", optional = true }\n\n[target.'cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"netbsd\"))'.dependencies]\nalsa = \"0.9\"\nlibc = \"0.2\"\njack = { version = \"0.13.0\", optional = true }\n\n[target.'cfg(any(target_os = \"macos\", target_os = \"ios\"))'.dependencies]\ncore-foundation-sys = \"0.8.2\" # For linking to CoreFoundation.framework and handling device name `CFString`s.\nmach2 = \"0.4\" # For access to mach_timebase type.\n\n[target.'cfg(target_os = \"macos\")'.dependencies]\ncoreaudio-rs = { version = \"0.11\", default-features = false, features = [\"audio_unit\", \"core_audio\"] }\n\n[target.'cfg(target_os = \"ios\")'.dependencies]\ncoreaudio-rs = { version = \"0.11\", default-features = false, features = [\"audio_unit\", \"core_audio\", \"audio_toolbox\"] }\n\n[target.'cfg(target_os = \"emscripten\")'.dependencies]\nwasm-bindgen = { version = \"0.2.89\" }\nwasm-bindgen-futures = \"0.4.33\"\njs-sys = { version = \"0.3.35\" }\nweb-sys = { version = \"0.3.35\", features = [ \"AudioContext\", \"AudioContextOptions\", \"AudioBuffer\", \"AudioBufferSourceNode\", \"AudioNode\",  \"AudioDestinationNode\", \"Window\", \"AudioContextState\"] }\n\n[target.'cfg(all(target_arch = \"wasm32\", target_os = \"unknown\"))'.dependencies]\nwasm-bindgen = { version = \"0.2.58\", optional = true }\njs-sys = { version = \"0.3.35\" }\nweb-sys = { version = \"0.3.35\", features = [ \"AudioContext\", \"AudioContextOptions\", \"AudioBuffer\", \"AudioBufferSourceNode\", \"AudioNode\",  \"AudioDestinationNode\", \"Window\", \"AudioContextState\"] }\n\n[target.'cfg(target_os = \"android\")'.dependencies]\noboe = { version = \"0.6\", features = [ \"java-interface\" ] }\nndk = { version = \"0.8\", default-features = false }\nndk-context = \"0.1\"\njni = \"0.21\"\n\n[[example]]\nname = \"android\"\npath = \"examples/android.rs\"\ncrate-type = [\"cdylib\"]\n\n[[example]]\nname = \"beep\"\n\n[[example]]\nname = \"enumerate\"\n\n[[example]]\nname = \"feedback\"\n\n[[example]]\nname = \"record_wav\"\n\n[[example]]\nname = \"synth_tones\"\n"
        },
        {
          "name": "Cross.toml",
          "type": "blob",
          "size": 0.140625,
          "content": "[target.armv7-unknown-linux-gnueabihf]\ndockerfile = \"Dockerfile\"\n\n[target.armv7-unknown-linux-gnueabihf.env]\npassthrough = [\n    \"RUSTFLAGS\",\n]\n"
        },
        {
          "name": "Dockerfile",
          "type": "blob",
          "size": 0.3125,
          "content": "ARG CROSS_BASE_IMAGE\nFROM $CROSS_BASE_IMAGE\n\nENV PKG_CONFIG_ALLOW_CROSS 1\nENV PKG_CONFIG_PATH /usr/lib/arm-linux-gnueabihf/pkgconfig/\n\nRUN dpkg --add-architecture armhf && \\\n    apt-get update && \\\n    apt-get install libasound2-dev:armhf -y && \\\n    apt-get install libjack-jackd2-dev:armhf libjack-jackd2-0:armhf -y \\\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 11.0908203125,
          "content": "                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"[]\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright [yyyy] [name of copyright owner]\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 6.474609375,
          "content": "# CPAL - Cross-Platform Audio Library\n\n[![Actions Status](https://github.com/RustAudio/cpal/workflows/cpal/badge.svg)](https://github.com/RustAudio/cpal/actions)\n[![Crates.io](https://img.shields.io/crates/v/cpal.svg)](https://crates.io/crates/cpal) [![docs.rs](https://docs.rs/cpal/badge.svg)](https://docs.rs/cpal/)\n\nLow-level library for audio input and output in pure Rust.\n\nThis library currently supports the following:\n\n- Enumerate supported audio hosts.\n- Enumerate all available audio devices.\n- Get the current default input and output devices.\n- Enumerate known supported input and output stream formats for a device.\n- Get the current default input and output stream formats for a device.\n- Build and run input and output PCM streams on a chosen device with a given stream format.\n\nCurrently, supported hosts include:\n\n- Linux (via ALSA or JACK)\n- Windows (via WASAPI by default, see ASIO instructions below)\n- macOS (via CoreAudio)\n- iOS (via CoreAudio)\n- Android (via Oboe)\n- Emscripten\n\nNote that on Linux, the ALSA development files are required. These are provided\nas part of the `libasound2-dev` package on Debian and Ubuntu distributions and\n`alsa-lib-devel` on Fedora.\n\n## Compiling for Web Assembly\n\nIf you are interested in using CPAL with WASM, please see [this guide](https://github.com/RustAudio/cpal/wiki/Setting-up-a-new-CPAL-WASM-project) in our Wiki which walks through setting up a new project from scratch.\n\n## Feature flags for audio backends\n\nSome audio backends are optional and will only be compiled with a [feature flag](https://doc.rust-lang.org/cargo/reference/features.html).\n\n- JACK (on Linux): `jack`\n- ASIO (on Windows): `asio`\n\nOboe can either use a shared or static runtime. The static runtime is used by default, but activating the\n`oboe-shared-stdcxx` feature makes it use the shared runtime, which requires `libc++_shared.so` from the Android NDK to\nbe present during execution.\n\n## ASIO on Windows\n\n[ASIO](https://en.wikipedia.org/wiki/Audio_Stream_Input/Output) is an audio\ndriver protocol by Steinberg. While it is available on multiple operating\nsystems, it is most commonly used on Windows to work around limitations of\nWASAPI including access to large numbers of channels and lower-latency audio\nprocessing.\n\nCPAL allows for using the ASIO SDK as the audio host on Windows instead of\nWASAPI.\n\n### Locating the ASIO SDK\n\nThe location of ASIO SDK is exposed to CPAL by setting the `CPAL_ASIO_DIR` environment variable.\n\nThe build script will try to find the ASIO SDK by following these steps in order:\n\n1. Check if `CPAL_ASIO_DIR` is set and if so use the path to point to the SDK.\n2. Check if the ASIO SDK is already installed in the temporary directory, if so use that and set the path of `CPAL_ASIO_DIR` to the output of `std::env::temp_dir().join(\"asio_sdk\")`.\n3. If the ASIO SDK is not already installed, download it from <https://www.steinberg.net/asiosdk> and install it in the temporary directory. The path of `CPAL_ASIO_DIR` will be set to the output of `std::env::temp_dir().join(\"asio_sdk\")`.\n\nIn an ideal situation you don't need to worry about this step.\n\n### Preparing the build environment\n\n1. `bindgen`, the library used to generate bindings to the C++ SDK, requires\n   clang. **Download and install LLVM** from\n   [here](http://releases.llvm.org/download.html) under the \"Pre-Built Binaries\"\n   section. The version as of writing this is 17.0.1.\n2. Add the LLVM `bin` directory to a `LIBCLANG_PATH` environment variable. If\n   you installed LLVM to the default directory, this should work in the command\n   prompt:\n   ```\n   setx LIBCLANG_PATH \"C:\\Program Files\\LLVM\\bin\"\n   ```\n3. If you don't have any ASIO devices or drivers available, you can [**download\n   and install ASIO4ALL**](http://www.asio4all.org/). Be sure to enable the\n   \"offline\" feature during installation despite what the installer says about\n   it being useless.\n4. Our build script assumes that Microsoft Visual Studio is installed if the host OS for compilation is Windows. The script will try to find `vcvarsall.bat`\n   and execute it with the right host and target machine architecture regardless of the Microsoft Visual Studio version.\n   If there are any errors encountered in this process which is unlikely,\n   you may find the `vcvarsall.bat` manually and execute it with your machine architecture as an argument.\n   The script will detect this and skip the step.\n\n   A manually executed command example for 64 bit machines:\n\n   ```\n   \"C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Auxiliary\\Build\\vcvarsall.bat\" amd64\n   ```\n\n   For more information please refer to the documentation of [`vcvarsall.bat``](https://docs.microsoft.com/en-us/cpp/build/building-on-the-command-line?view=msvc-160#vcvarsall-syntax).\n\n5. Select the ASIO host at the start of our program with the following code:\n\n   ```rust\n   let host;\n   #[cfg(target_os = \"windows\")]\n   {\n      host = cpal::host_from_id(cpal::HostId::Asio).expect(\"failed to initialise ASIO host\");\n   }\n   ```\n\n   If you run into compilations errors produced by `asio-sys` or `bindgen`, make\n   sure that `CPAL_ASIO_DIR` is set correctly and try `cargo clean`.\n\n6. Make sure to enable the `asio` feature when building CPAL:\n\n   ```\n   cargo build --features \"asio\"\n   ```\n\n   or if you are using CPAL as a dependency in a downstream project, enable the\n   feature like this:\n\n   ```toml\n   cpal = { version = \"*\", features = [\"asio\"] }\n   ```\n\n_Updated as of ASIO version 2.3.3._\n\n### Cross compilation\n\nWhen Windows is the host and the target OS, the build script of `asio-sys` supports all cross compilation targets\nwhich are supported by the MSVC compiler. An exhaustive list of combinations could be found [here](https://docs.microsoft.com/en-us/cpp/build/building-on-the-command-line?view=msvc-160#vcvarsall-syntax) with the addition of undocumented `arm64`, `arm64_x86`, `arm64_amd64` and `arm64_arm` targets. (5.11.2023)\n\nIt is also possible to compile Windows applications with ASIO support on Linux and macOS.\n\nFor both platforms the common way to do this is to use the [MinGW-w64](https://www.mingw-w64.org/) toolchain.\n\nMake sure that you have included the `MinGW-w64` include directory in your `CPLUS_INCLUDE_PATH` environment variable.\nMake sure that LLVM is installed and include directory is also included in your `CPLUS_INCLUDE_PATH` environment variable.\n\nExample for macOS for the target of `x86_64-pc-windows-gnu` where `mingw-w64` is installed via brew:\n\n```\nexport CPLUS_INCLUDE_PATH=\"$CPLUS_INCLUDE_PATH:/opt/homebrew/Cellar/mingw-w64/11.0.1/toolchain-x86_64/x86_64-w64-mingw32/include\"\n```\n"
        },
        {
          "name": "asio-sys",
          "type": "tree",
          "content": null
        },
        {
          "name": "build.rs",
          "type": "blob",
          "size": 0.34375,
          "content": "use std::env;\n\nconst CPAL_ASIO_DIR: &str = \"CPAL_ASIO_DIR\";\n\nfn main() {\n    println!(\"cargo:rerun-if-env-changed={}\", CPAL_ASIO_DIR);\n\n    // If ASIO directory isn't set silently return early\n    // otherwise set the asio config flag\n    match env::var(CPAL_ASIO_DIR) {\n        Err(_) => {}\n        Ok(_) => println!(\"cargo:rustc-cfg=asio\"),\n    };\n}\n"
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}