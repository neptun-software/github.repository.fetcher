{
  "metadata": {
    "timestamp": 1736709086325,
    "page": 227,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjIzMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "theseus-os/Theseus",
      "stars": 2942,
      "defaultBranch": "theseus_main",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.4970703125,
          "content": "# Compiled files\n*.o\n*.so\n*.rlib\n*.dll\n*.fd\n\n# Executables\n*.exe\n\n# Generated by Cargo\ntarget/\n\n# Build directory\nbuild/\n\n# Generated documentation, used for GitHub Pages\ngithub_pages/book/\ngithub_pages/doc/\n\n# patched GDB directory\n/rust-os-gdb/\n\n# Theseus's local build server\n.theseus_build_server/\n\n# IDE files\n*.idea/\n*.vscode/\n*.code-workspace\n*.swp\n\n# log files\n*.pcap\n*.out\n\n# limine bootloader files\n/limine-prebuilt/\n\n# library lock files\n/libs/**/Cargo.lock\n\n# macOS directory stores\n/**/.DS_Store\n"
        },
        {
          "name": ".gitmodules",
          "type": "blob",
          "size": 0.6650390625,
          "content": "[submodule \"libs/dfqueue\"]\n\tpath = libs/dfqueue\n\turl = https://github.com/theseus-os/DFQueue\n\tshallow = true\n[submodule \"ports/wasmtime\"]\n\tpath = ports/wasmtime\n\turl = https://github.com/theseus-os/wasmtime.git\n\tshallow = true\n[submodule \"libs/indexmap\"]\n\tpath = libs/indexmap\n\turl = https://github.com/theseus-os/indexmap\n\tshallow = true\n[submodule \"ports/region\"]\n\tpath = ports/region\n\turl = https://github.com/theseus-os/region-rs\n\tshallow = true\n[submodule \"ports/backtrace\"]\n\tpath = ports/backtrace\n\turl = https://github.com/theseus-os/backtrace-rs.git\n\tshallow = true\n[submodule \"libs/core2\"]\n\tpath = libs/core2\n\turl = https://github.com/theseus-os/core2.git\n\tshallow = true\n"
        },
        {
          "name": "Cargo.lock",
          "type": "blob",
          "size": 78.2197265625,
          "content": "# This file is automatically @generated by Cargo.\n# It is not intended for manual editing.\nversion = 3\n\n[[package]]\nname = \"acpi\"\nversion = \"0.1.0\"\ndependencies = [\n \"acpi_table\",\n \"acpi_table_handler\",\n \"dmar\",\n \"fadt\",\n \"hpet\",\n \"iommu\",\n \"log\",\n \"madt\",\n \"memory\",\n \"rsdp\",\n \"rsdt\",\n \"spin 0.9.4\",\n \"time\",\n \"waet\",\n]\n\n[[package]]\nname = \"acpi_table\"\nversion = \"0.1.0\"\ndependencies = [\n \"log\",\n \"memory\",\n \"sdt\",\n \"zerocopy\",\n]\n\n[[package]]\nname = \"acpi_table_handler\"\nversion = \"0.1.0\"\ndependencies = [\n \"acpi_table\",\n \"dmar\",\n \"fadt\",\n \"hpet\",\n \"log\",\n \"madt\",\n \"memory\",\n \"rsdt\",\n \"waet\",\n]\n\n[[package]]\nname = \"addr2line\"\nversion = \"0.16.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3e61f2b7f93d2c7d2b08263acaa4a363b3e276806c68af6134c44f523bf1aacd\"\ndependencies = [\n \"gimli\",\n]\n\n[[package]]\nname = \"adler\"\nversion = \"1.0.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f26201604c87b1e01bd3d98f8d5d9a8fcbb815e8cedb41ffccbeb4bf593a35fe\"\n\n[[package]]\nname = \"ahash\"\nversion = \"0.7.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"fcb51a0695d8f838b1ee009b3fbf66bda078cd64590202a864a8f3e8c4315c47\"\ndependencies = [\n \"getrandom\",\n \"once_cell\",\n \"version_check\",\n]\n\n[[package]]\nname = \"aho-corasick\"\nversion = \"0.7.19\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b4f55bd91a0978cbfd91c457a164bab8b4001c833b7f323132c0a4e1922dd44e\"\ndependencies = [\n \"memchr\",\n]\n\n[[package]]\nname = \"anyhow\"\nversion = \"1.0.48\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"62e1f47f7dc0422027a4e370dd4548d4d66b26782e513e98dca1e689e058a80e\"\n\n[[package]]\nname = \"ap_start\"\nversion = \"0.1.0\"\ndependencies = [\n \"apic\",\n \"cls_allocator\",\n \"cpu\",\n \"early_tls\",\n \"interrupts\",\n \"irq_safety\",\n \"kernel_config\",\n \"log\",\n \"memory\",\n \"no_drop\",\n \"page_attribute_table\",\n \"scheduler\",\n \"spawn\",\n \"stack\",\n \"sync_irq\",\n]\n\n[[package]]\nname = \"apic\"\nversion = \"0.1.0\"\ndependencies = [\n \"atomic_linked_list\",\n \"bit_field 0.7.0\",\n \"crossbeam-utils\",\n \"derive_more\",\n \"kernel_config\",\n \"log\",\n \"memory\",\n \"msr\",\n \"pit_clock_basic\",\n \"raw-cpuid\",\n \"spin 0.9.4\",\n \"sync_irq\",\n \"volatile 0.2.7\",\n \"x86_64\",\n \"zerocopy\",\n]\n\n[[package]]\nname = \"app_io\"\nversion = \"0.1.0\"\ndependencies = [\n \"core2\",\n \"hashbrown\",\n \"lazy_static\",\n \"logger\",\n \"stdio\",\n \"sync_block\",\n \"task\",\n \"tty\",\n]\n\n[[package]]\nname = \"arm_boards\"\nversion = \"0.1.0\"\ndependencies = [\n \"cfg-if 1.0.0\",\n \"derive_more\",\n \"memory_structs\",\n]\n\n[[package]]\nname = \"arrayvec\"\nversion = \"0.5.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"23b62fc65de8e4e7f52534fb52b0f3ed04746ae267519eef2a83941e8085068b\"\n\n[[package]]\nname = \"ata\"\nversion = \"0.1.0\"\ndependencies = [\n \"bitflags 2.4.1\",\n \"interrupts\",\n \"io\",\n \"log\",\n \"pci\",\n \"port_io\",\n \"spin 0.9.4\",\n \"storage_device\",\n \"x86_64\",\n]\n\n[[package]]\nname = \"atomic-polyfill\"\nversion = \"0.1.10\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"9c041a8d9751a520ee19656232a18971f18946a7900f1520ee4400002244dd89\"\ndependencies = [\n \"critical-section\",\n]\n\n[[package]]\nname = \"atomic_linked_list\"\nversion = \"0.1.0\"\n\n[[package]]\nname = \"autocfg\"\nversion = \"1.1.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d468802bab17cbc0cc575e9b053f41e72aa36bfa6b7f55e3529ffa43161b97fa\"\n\n[[package]]\nname = \"backtrace\"\nversion = \"0.3.64\"\ndependencies = [\n \"addr2line\",\n \"cc\",\n \"cfg-if 1.0.0\",\n \"libc\",\n \"memory\",\n \"miniz_oxide\",\n \"object\",\n \"rustc-demangle\",\n \"spin 0.9.4\",\n \"stack_trace\",\n \"sync_block\",\n \"theseus_std\",\n \"thread_local_macro\",\n]\n\n[[package]]\nname = \"bare-metal\"\nversion = \"0.2.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"5deb64efa5bd81e31fcd1938615a6d98c82eafcbcd787162b6f63b91d6bac5b3\"\ndependencies = [\n \"rustc_version 0.2.3\",\n]\n\n[[package]]\nname = \"bare-metal\"\nversion = \"1.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f8fe8f5a8a398345e52358e18ff07cc17a568fbca5c6f73873d3a62056309603\"\n\n[[package]]\nname = \"bincode\"\nversion = \"2.0.0-rc.1\"\nsource = \"git+https://github.com/bincode-org/bincode#1ca82752cf8c0391a4d49b8f881b5257f8c81fe8\"\ndependencies = [\n \"bincode_derive\",\n \"serde\",\n]\n\n[[package]]\nname = \"bincode_derive\"\nversion = \"2.0.0-rc.1\"\nsource = \"git+https://github.com/bincode-org/bincode#1ca82752cf8c0391a4d49b8f881b5257f8c81fe8\"\ndependencies = [\n \"virtue\",\n]\n\n[[package]]\nname = \"bit_field\"\nversion = \"0.7.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ff91a64014e1bc53bf643920f2c9ab5f0980d92a0948295f3ee550e9266849ad\"\n\n[[package]]\nname = \"bit_field\"\nversion = \"0.10.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"dcb6dd1c2376d2e096796e234a70e17e94cc2d5d54ff8ce42b28cef1d0d359a4\"\n\n[[package]]\nname = \"bitfield\"\nversion = \"0.13.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"46afbd2983a5d5a7bd740ccb198caf5b82f45c40c09c0eed36052d91cb92e719\"\n\n[[package]]\nname = \"bitflags\"\nversion = \"1.3.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"bef38d45163c2f1dde094a7dfd33ccf595c92905c8f8f4fdc18d06fb1037718a\"\n\n[[package]]\nname = \"bitflags\"\nversion = \"2.4.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"327762f6e5a765692301e5bb513e0d9fef63be86bbc14528052b1cd3e6f03e07\"\n\n[[package]]\nname = \"block-buffer\"\nversion = \"0.10.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"69cce20737498f97b993470a6e536b8523f0af7892a4f928cceb1ac5e52ebe7e\"\ndependencies = [\n \"generic-array\",\n]\n\n[[package]]\nname = \"block_allocator\"\nversion = \"0.1.0\"\ndependencies = [\n \"linked_list_allocator\",\n]\n\n[[package]]\nname = \"block_cache\"\nversion = \"0.1.0\"\ndependencies = [\n \"hashbrown\",\n \"lazy_static\",\n \"log\",\n \"storage_device\",\n]\n\n[[package]]\nname = \"bm\"\nversion = \"0.1.0\"\ndependencies = [\n \"apic\",\n \"app_io\",\n \"cpu\",\n \"fs_node\",\n \"getopts\",\n \"heapfile\",\n \"hpet\",\n \"libtest\",\n \"log\",\n \"memory\",\n \"mod_mgmt\",\n \"path\",\n \"pmu_x86\",\n \"rendezvous\",\n \"scheduler\",\n \"simple_ipc\",\n \"spawn\",\n \"sync_channel\",\n \"task\",\n]\n\n[[package]]\nname = \"boot_info\"\nversion = \"0.1.0\"\ndependencies = [\n \"bitflags 2.4.1\",\n \"kernel_config\",\n \"memory_structs\",\n \"multiboot2\",\n \"uefi-bootloader-api\",\n]\n\n[[package]]\nname = \"bootloader_modules\"\nversion = \"0.1.0\"\ndependencies = [\n \"memory_structs\",\n]\n\n[[package]]\nname = \"by_address\"\nversion = \"1.0.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e245704f60eb4eb45810d65cf14eb54d2eb50a6f3715fe2d7cd01ee905c2944f\"\n\n[[package]]\nname = \"byteorder\"\nversion = \"1.4.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"14c189c53d098945499cdfa7ecc63567cf3886b3332b312a5b4585d8d3a6a610\"\n\n[[package]]\nname = \"captain\"\nversion = \"0.1.0\"\ndependencies = [\n \"acpi\",\n \"app_io\",\n \"cls_allocator\",\n \"console\",\n \"cpu\",\n \"device_manager\",\n \"dfqueue\",\n \"e1000\",\n \"early_printer\",\n \"exceptions_full\",\n \"first_application\",\n \"interrupt_controller\",\n \"interrupts\",\n \"irq_safety\",\n \"kernel_config\",\n \"log\",\n \"logger\",\n \"memory\",\n \"mod_mgmt\",\n \"multicore_bringup\",\n \"multiple_heaps\",\n \"no_drop\",\n \"ota_update_client\",\n \"page_attribute_table\",\n \"scheduler\",\n \"simd_personality\",\n \"spawn\",\n \"stack\",\n \"task\",\n \"task_fs\",\n \"time\",\n \"tlb_shootdown\",\n \"tsc\",\n \"window_manager\",\n]\n\n[[package]]\nname = \"cat\"\nversion = \"0.1.0\"\ndependencies = [\n \"app_io\",\n \"core2\",\n \"fs_node\",\n \"getopts\",\n \"log\",\n \"path\",\n \"task\",\n]\n\n[[package]]\nname = \"catch_unwind\"\nversion = \"0.1.0\"\ndependencies = [\n \"log\",\n \"task\",\n \"unwind\",\n]\n\n[[package]]\nname = \"cc\"\nversion = \"1.0.81\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"6c6b2562119bf28c3439f7f02db99faf0aa1a8cdfe5772a2ee155d32227239f0\"\ndependencies = [\n \"libc\",\n]\n\n[[package]]\nname = \"cd\"\nversion = \"0.1.0\"\ndependencies = [\n \"app_io\",\n \"environment\",\n \"fs_node\",\n \"getopts\",\n \"log\",\n \"path\",\n \"root\",\n \"task\",\n]\n\n[[package]]\nname = \"cfg-if\"\nversion = \"0.1.10\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"4785bdd1c96b2a846b2bd7cc02e86b6b3dbf14e7e53446c4f54c92a361040822\"\n\n[[package]]\nname = \"cfg-if\"\nversion = \"1.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"baf1de4339761588bc0619e3cbc0120ee582ebb74b53b4efbf79117bd2da40fd\"\n\n[[package]]\nname = \"channel_eval\"\nversion = \"0.1.0\"\ndependencies = [\n \"app_io\",\n \"cpu\",\n \"getopts\",\n \"log\",\n \"spawn\",\n \"task\",\n \"unified_channel\",\n]\n\n[[package]]\nname = \"cls\"\nversion = \"0.1.0\"\ndependencies = [\n \"cls_macros\",\n \"cortex-a\",\n \"irq_safety\",\n \"preemption\",\n \"tock-registers\",\n \"x86_64\",\n]\n\n[[package]]\nname = \"cls_allocator\"\nversion = \"0.1.0\"\ndependencies = [\n \"cpu\",\n \"crate_metadata\",\n \"irq_safety\",\n \"local_storage_initializer\",\n \"sync_spin\",\n]\n\n[[package]]\nname = \"cls_macros\"\nversion = \"0.1.0\"\ndependencies = [\n \"convert_case 0.6.0\",\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.26\",\n]\n\n[[package]]\nname = \"color\"\nversion = \"0.1.0\"\n\n[[package]]\nname = \"compositor\"\nversion = \"0.1.0\"\ndependencies = [\n \"framebuffer\",\n \"shapes\",\n]\n\n[[package]]\nname = \"console\"\nversion = \"0.1.0\"\ndependencies = [\n \"app_io\",\n \"core2\",\n \"hull\",\n \"io\",\n \"log\",\n \"mod_mgmt\",\n \"path\",\n \"serial_port\",\n \"spawn\",\n \"sync_channel\",\n \"sync_irq\",\n \"task\",\n \"tty\",\n]\n\n[[package]]\nname = \"const_format\"\nversion = \"0.2.22\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"22bc6cd49b0ec407b680c3e380182b6ac63b73991cb7602de350352fc309b614\"\ndependencies = [\n \"const_format_proc_macros\",\n]\n\n[[package]]\nname = \"const_format_proc_macros\"\nversion = \"0.2.22\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ef196d5d972878a48da7decb7686eded338b4858fbabeed513d63a7c98b2b82d\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"unicode-xid\",\n]\n\n[[package]]\nname = \"context_switch\"\nversion = \"0.1.0\"\ndependencies = [\n \"cfg-if 0.1.10\",\n \"context_switch_avx\",\n \"context_switch_regular\",\n \"context_switch_sse\",\n]\n\n[[package]]\nname = \"context_switch_avx\"\nversion = \"0.1.0\"\ndependencies = [\n \"context_switch_regular\",\n \"zerocopy\",\n]\n\n[[package]]\nname = \"context_switch_regular\"\nversion = \"0.1.0\"\ndependencies = [\n \"zerocopy\",\n]\n\n[[package]]\nname = \"context_switch_sse\"\nversion = \"0.1.0\"\ndependencies = [\n \"context_switch_regular\",\n \"zerocopy\",\n]\n\n[[package]]\nname = \"convert_case\"\nversion = \"0.4.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"6245d59a3e82a7fc217c5828a6692dbc6dfb63a0c8c90495621f7b9d79704a0e\"\n\n[[package]]\nname = \"convert_case\"\nversion = \"0.6.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ec182b0ca2f35d8fc196cf3404988fd8b8c739a4d270ff118a398feb0cbec1ca\"\ndependencies = [\n \"unicode-segmentation\",\n]\n\n[[package]]\nname = \"core2\"\nversion = \"0.4.0\"\ndependencies = [\n \"memchr\",\n]\n\n[[package]]\nname = \"core_simd\"\nversion = \"0.1.0\"\nsource = \"git+https://github.com/rust-lang/stdsimd#0711e11593e7d3ce7cffdb7bd966553e4a4f858f\"\n\n[[package]]\nname = \"cortex-a\"\nversion = \"7.5.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"bdecfbb28672ad3664e71ae05a398a52df430d86d660691501b28968cc4467e6\"\ndependencies = [\n \"tock-registers\",\n]\n\n[[package]]\nname = \"cortex-m\"\nversion = \"0.7.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"70858629a458fdfd39f9675c4dc309411f2a3f83bede76988d81bf1a0ecee9e0\"\ndependencies = [\n \"bare-metal 0.2.5\",\n \"bitfield\",\n \"embedded-hal\",\n \"volatile-register\",\n]\n\n[[package]]\nname = \"cow_arc\"\nversion = \"0.1.0\"\ndependencies = [\n \"dereffer\",\n \"spin 0.9.4\",\n]\n\n[[package]]\nname = \"cpio_reader\"\nversion = \"0.1.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"bd420c52d86c5b08c494e7e3d16bce23f08f3f6544cccce2d6cc986d3144dca1\"\ndependencies = [\n \"bitflags 1.3.2\",\n]\n\n[[package]]\nname = \"cpp_demangle\"\nversion = \"0.3.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"eeaa953eaad386a53111e47172c2fedba671e5684c8dd601a5f474f4f118710f\"\ndependencies = [\n \"cfg-if 1.0.0\",\n]\n\n[[package]]\nname = \"cpu\"\nversion = \"0.1.0\"\ndependencies = [\n \"apic\",\n \"arm_boards\",\n \"cortex-a\",\n \"derive_more\",\n \"sync_irq\",\n \"tock-registers\",\n]\n\n[[package]]\nname = \"cranelift-entity\"\nversion = \"0.77.0\"\ndependencies = [\n \"serde\",\n]\n\n[[package]]\nname = \"crate_metadata\"\nversion = \"0.1.0\"\ndependencies = [\n \"cow_arc\",\n \"crate_metadata_serde\",\n \"fs_node\",\n \"goblin\",\n \"hashbrown\",\n \"log\",\n \"memory\",\n \"qp-trie\",\n \"serde\",\n \"spin 0.9.4\",\n \"str_ref\",\n \"xmas-elf\",\n]\n\n[[package]]\nname = \"crate_metadata_serde\"\nversion = \"0.1.0\"\ndependencies = [\n \"hashbrown\",\n \"serde\",\n]\n\n[[package]]\nname = \"crate_name_utils\"\nversion = \"0.1.0\"\ndependencies = [\n \"crate_metadata\",\n \"itertools\",\n \"path\",\n]\n\n[[package]]\nname = \"crate_swap\"\nversion = \"0.1.0\"\ndependencies = [\n \"by_address\",\n \"fs_node\",\n \"hashbrown\",\n \"hpet\",\n \"lazy_static\",\n \"log\",\n \"memory\",\n \"mod_mgmt\",\n \"path\",\n \"qp-trie\",\n \"spin 0.9.4\",\n]\n\n[[package]]\nname = \"crc32fast\"\nversion = \"1.2.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3825b1e8580894917dc4468cb634a1b4e9745fddc854edad72d9c04644c0319f\"\ndependencies = [\n \"cfg-if 1.0.0\",\n]\n\n[[package]]\nname = \"critical-section\"\nversion = \"0.2.7\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"95da181745b56d4bd339530ec393508910c909c784e8962d15d722bacf0bcbcd\"\ndependencies = [\n \"bare-metal 1.0.0\",\n \"cfg-if 1.0.0\",\n \"cortex-m\",\n \"riscv\",\n]\n\n[[package]]\nname = \"crossbeam-utils\"\nversion = \"0.8.12\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"edbafec5fa1f196ca66527c1b12c2ec4745ca14b50f1ad8f9f6f720b55d11fac\"\ndependencies = [\n \"cfg-if 1.0.0\",\n]\n\n[[package]]\nname = \"crypto-common\"\nversion = \"0.1.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1bfb12502f3fc46cca1bb51ac28df9d618d813cdc3d2f25b9fe775a34af26bb3\"\ndependencies = [\n \"generic-array\",\n \"typenum\",\n]\n\n[[package]]\nname = \"cstr_core\"\nversion = \"0.2.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"2807c5e92588b6bf1c8c0354af2a4f079d0586c683df322aea719d5dc9b8d5bb\"\ndependencies = [\n \"cty\",\n \"memchr\",\n]\n\n[[package]]\nname = \"cty\"\nversion = \"0.2.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"7313c0d620d0cb4dbd9d019e461a4beb501071ff46ec0ab933efb4daa76d73e3\"\n\n[[package]]\nname = \"date\"\nversion = \"0.1.0\"\ndependencies = [\n \"app_io\",\n \"rtc\",\n]\n\n[[package]]\nname = \"debug_info\"\nversion = \"0.1.0\"\ndependencies = [\n \"by_address\",\n \"crate_metadata\",\n \"fs_node\",\n \"gimli\",\n \"goblin\",\n \"hashbrown\",\n \"log\",\n \"memory\",\n \"mod_mgmt\",\n \"rustc-demangle\",\n \"xmas-elf\",\n]\n\n[[package]]\nname = \"debugit\"\nversion = \"0.1.0\"\n\n[[package]]\nname = \"deferred_interrupt_tasks\"\nversion = \"0.1.0\"\ndependencies = [\n \"debugit\",\n \"interrupts\",\n \"log\",\n \"scheduler\",\n \"spawn\",\n \"task\",\n]\n\n[[package]]\nname = \"defmt\"\nversion = \"0.3.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d3a0ae7494d9bff013d7b89471f4c424356a71e9752e0c78abe7e6c608a16bb3\"\ndependencies = [\n \"bitflags 1.3.2\",\n \"defmt-macros\",\n]\n\n[[package]]\nname = \"defmt-macros\"\nversion = \"0.3.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"6d944432e281084511691b36e5e9c794c19c33675822c9019e3b64f5b89e10da\"\ndependencies = [\n \"defmt-parser\",\n \"proc-macro-error\",\n \"proc-macro2\",\n \"quote\",\n \"syn 1.0.98\",\n]\n\n[[package]]\nname = \"defmt-parser\"\nversion = \"0.3.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"0db23d29972d99baa3de2ee2ae3f104c10564a6d05a346eb3f4c4f2c0525a06e\"\n\n[[package]]\nname = \"delegate\"\nversion = \"0.6.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"7f76f9eae170d46f87b0c34cc3b29d411dbdef329e1afd85132cece3da62edd9\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn 1.0.98\",\n]\n\n[[package]]\nname = \"deps\"\nversion = \"0.1.0\"\ndependencies = [\n \"app_io\",\n \"crate_name_utils\",\n \"getopts\",\n \"itertools\",\n \"log\",\n \"memory\",\n \"mod_mgmt\",\n \"spin 0.9.4\",\n \"task\",\n]\n\n[[package]]\nname = \"dereffer\"\nversion = \"0.1.0\"\n\n[[package]]\nname = \"derive_more\"\nversion = \"0.99.14\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"5cc7b9cef1e351660e5443924e4f43ab25fbbed3e9a5f052df3677deb4d6b320\"\ndependencies = [\n \"convert_case 0.4.0\",\n \"proc-macro2\",\n \"quote\",\n \"syn 1.0.98\",\n]\n\n[[package]]\nname = \"device_manager\"\nversion = \"0.1.0\"\ndependencies = [\n \"acpi\",\n \"apic\",\n \"console\",\n \"core2\",\n \"derive_more\",\n \"e1000\",\n \"event_types\",\n \"fatfs\",\n \"io\",\n \"iommu\",\n \"ixgbe\",\n \"keyboard\",\n \"log\",\n \"logger\",\n \"memory\",\n \"mlx5\",\n \"mouse\",\n \"mpmc\",\n \"net\",\n \"pci\",\n \"ps2\",\n \"serial_port\",\n \"spin 0.9.4\",\n \"storage_manager\",\n]\n\n[[package]]\nname = \"dfqueue\"\nversion = \"0.1.0\"\n\n[[package]]\nname = \"digest\"\nversion = \"0.10.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"adfbc57365a37acbd2ebf2b64d7e69bb766e2fea813521ed536f5d0520dcf86c\"\ndependencies = [\n \"block-buffer\",\n \"crypto-common\",\n]\n\n[[package]]\nname = \"displayable\"\nversion = \"0.1.0\"\ndependencies = [\n \"color\",\n \"framebuffer\",\n \"shapes\",\n \"spin 0.9.4\",\n]\n\n[[package]]\nname = \"dmar\"\nversion = \"0.1.0\"\ndependencies = [\n \"acpi_table\",\n \"log\",\n \"memory\",\n \"sdt\",\n \"zerocopy\",\n]\n\n[[package]]\nname = \"downcast-rs\"\nversion = \"1.2.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"9ea835d29036a4087793836fa931b08837ad5e957da9e23886b29586fb9b6650\"\n\n[[package]]\nname = \"dreadnought\"\nversion = \"0.1.0\"\ndependencies = [\n \"futures\",\n \"sleep\",\n \"spawn\",\n \"task\",\n \"time\",\n \"waker\",\n]\n\n[[package]]\nname = \"e1000\"\nversion = \"0.1.0\"\ndependencies = [\n \"deferred_interrupt_tasks\",\n \"intel_ethernet\",\n \"interrupts\",\n \"kernel_config\",\n \"lazy_static\",\n \"log\",\n \"memory\",\n \"mpmc\",\n \"net\",\n \"nic_buffers\",\n \"nic_initialization\",\n \"nic_queues\",\n \"pci\",\n \"spin 0.9.4\",\n \"sync_irq\",\n \"task\",\n \"volatile 0.2.7\",\n \"x86_64\",\n \"zerocopy\",\n]\n\n[[package]]\nname = \"early_printer\"\nversion = \"0.1.0\"\ndependencies = [\n \"boot_info\",\n \"font\",\n \"log\",\n \"memory\",\n \"page_attribute_table\",\n \"spin 0.9.4\",\n \"vga_buffer\",\n \"volatile 0.2.7\",\n]\n\n[[package]]\nname = \"early_tls\"\nversion = \"0.1.0\"\ndependencies = [\n \"local_storage_initializer\",\n \"spin 0.9.4\",\n]\n\n[[package]]\nname = \"either\"\nversion = \"1.5.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3be565ca5c557d7f59e7cfcf1844f9e3033650c929c6566f511e8005f205c1d0\"\n\n[[package]]\nname = \"embedded-hal\"\nversion = \"0.2.7\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"35949884794ad573cf46071e41c9b60efb0cb311e3ca01f7af807af1debc66ff\"\ndependencies = [\n \"nb 0.1.3\",\n \"void\",\n]\n\n[[package]]\nname = \"environment\"\nversion = \"0.1.0\"\ndependencies = [\n \"fs_node\",\n \"hashbrown\",\n \"path\",\n \"root\",\n]\n\n[[package]]\nname = \"event_types\"\nversion = \"0.1.0\"\ndependencies = [\n \"keycodes_ascii\",\n \"mouse_data\",\n \"shapes\",\n]\n\n[[package]]\nname = \"example\"\nversion = \"0.1.0\"\ndependencies = [\n \"app_io\",\n \"getopts\",\n]\n\n[[package]]\nname = \"exceptions_early\"\nversion = \"0.1.0\"\ndependencies = [\n \"early_printer\",\n \"gdt\",\n \"locked_idt\",\n \"memory\",\n \"mod_mgmt\",\n \"spin 0.9.4\",\n \"tss\",\n \"x86_64\",\n]\n\n[[package]]\nname = \"exceptions_full\"\nversion = \"0.1.0\"\ndependencies = [\n \"app_io\",\n \"cpu\",\n \"debug_info\",\n \"early_printer\",\n \"fault_log\",\n \"locked_idt\",\n \"log\",\n \"memory\",\n \"pmu_x86\",\n \"signal_handler\",\n \"stack_trace\",\n \"task\",\n \"tlb_shootdown\",\n \"tss\",\n \"unwind\",\n \"x86_64\",\n]\n\n[[package]]\nname = \"external_unwind_info\"\nversion = \"0.1.0\"\ndependencies = [\n \"log\",\n \"memory\",\n \"spin 0.9.4\",\n]\n\n[[package]]\nname = \"fadt\"\nversion = \"0.1.0\"\ndependencies = [\n \"acpi_table\",\n \"memory\",\n \"sdt\",\n \"zerocopy\",\n]\n\n[[package]]\nname = \"fallible-iterator\"\nversion = \"0.2.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"4443176a9f2c162692bd3d352d745ef9413eec5782a80d8fd6f8a1ac692a07f7\"\n\n[[package]]\nname = \"fatfs\"\nversion = \"0.4.0\"\nsource = \"git+https://github.com/rafalh/rust-fatfs#87fc1ed5074a32b4e0344fcdde77359ef9e75432\"\ndependencies = [\n \"bitflags 1.3.2\",\n \"log\",\n]\n\n[[package]]\nname = \"fault_crate_swap\"\nversion = \"0.1.0\"\ndependencies = [\n \"crate_swap\",\n \"fault_log\",\n \"fs_node\",\n \"log\",\n \"memory\",\n \"mod_mgmt\",\n \"path\",\n \"task\",\n]\n\n[[package]]\nname = \"fault_log\"\nversion = \"0.1.0\"\ndependencies = [\n \"app_io\",\n \"cpu\",\n \"early_printer\",\n \"log\",\n \"memory\",\n \"sync_irq\",\n \"task\",\n]\n\n[[package]]\nname = \"first_application\"\nversion = \"0.1.0\"\ndependencies = [\n \"hello\",\n \"log\",\n \"mod_mgmt\",\n \"path\",\n \"qemu_test\",\n \"shell\",\n \"spawn\",\n]\n\n[[package]]\nname = \"font\"\nversion = \"0.1.0\"\ndependencies = [\n \"spin 0.9.4\",\n]\n\n[[package]]\nname = \"frame_allocator\"\nversion = \"0.1.0\"\ndependencies = [\n \"intrusive-collections\",\n \"kernel_config\",\n \"log\",\n \"memory_structs\",\n \"range_inclusive\",\n \"spin 0.9.4\",\n \"static_assertions\",\n]\n\n[[package]]\nname = \"framebuffer\"\nversion = \"0.1.0\"\ndependencies = [\n \"color\",\n \"early_printer\",\n \"log\",\n \"memory\",\n \"multicore_bringup\",\n \"page_attribute_table\",\n \"shapes\",\n \"zerocopy\",\n]\n\n[[package]]\nname = \"framebuffer_compositor\"\nversion = \"0.1.0\"\ndependencies = [\n \"compositor\",\n \"framebuffer\",\n \"hashbrown\",\n \"shapes\",\n \"spin 0.9.4\",\n]\n\n[[package]]\nname = \"framebuffer_drawer\"\nversion = \"0.1.0\"\ndependencies = [\n \"framebuffer\",\n \"shapes\",\n]\n\n[[package]]\nname = \"framebuffer_printer\"\nversion = \"0.1.0\"\ndependencies = [\n \"font\",\n \"framebuffer\",\n \"shapes\",\n]\n\n[[package]]\nname = \"fs_node\"\nversion = \"0.1.0\"\ndependencies = [\n \"io\",\n \"lazy_static\",\n \"log\",\n \"memory\",\n \"spin 0.9.4\",\n]\n\n[[package]]\nname = \"futures\"\nversion = \"0.3.25\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"38390104763dc37a5145a53c29c63c1290b5d316d6086ec32c293f6736051bb0\"\ndependencies = [\n \"futures-channel\",\n \"futures-core\",\n \"futures-io\",\n \"futures-sink\",\n \"futures-task\",\n \"futures-util\",\n]\n\n[[package]]\nname = \"futures-channel\"\nversion = \"0.3.25\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"52ba265a92256105f45b719605a571ffe2d1f0fea3807304b522c1d778f79eed\"\ndependencies = [\n \"futures-core\",\n \"futures-sink\",\n]\n\n[[package]]\nname = \"futures-core\"\nversion = \"0.3.25\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"04909a7a7e4633ae6c4a9ab280aeb86da1236243a77b694a49eacd659a4bd3ac\"\n\n[[package]]\nname = \"futures-io\"\nversion = \"0.3.25\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"00f5fb52a06bdcadeb54e8d3671f8888a39697dcb0b81b23b55174030427f4eb\"\n\n[[package]]\nname = \"futures-macro\"\nversion = \"0.3.25\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"bdfb8ce053d86b91919aad980c220b1fb8401a9394410e1c289ed7e66b61835d\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn 1.0.98\",\n]\n\n[[package]]\nname = \"futures-sink\"\nversion = \"0.3.25\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"39c15cf1a4aa79df40f1bb462fb39676d0ad9e366c2a33b590d7c66f4f81fcf9\"\n\n[[package]]\nname = \"futures-task\"\nversion = \"0.3.25\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"2ffb393ac5d9a6eaa9d3fdf37ae2776656b706e200c8e16b1bdb227f5198e6ea\"\n\n[[package]]\nname = \"futures-util\"\nversion = \"0.3.25\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"197676987abd2f9cadff84926f410af1c183608d36641465df73ae8211dc65d6\"\ndependencies = [\n \"futures-core\",\n \"futures-macro\",\n \"futures-sink\",\n \"futures-task\",\n \"pin-project-lite\",\n \"pin-utils\",\n]\n\n[[package]]\nname = \"gdt\"\nversion = \"0.1.0\"\ndependencies = [\n \"atomic_linked_list\",\n \"bit_field 0.7.0\",\n \"bitflags 2.4.1\",\n \"cpu\",\n \"log\",\n \"memory\",\n \"spin 0.9.4\",\n \"tss\",\n \"x86_64\",\n]\n\n[[package]]\nname = \"generic-array\"\nversion = \"0.14.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"bff49e947297f3312447abdca79f45f4738097cc82b06e72054d2223f601f1b9\"\ndependencies = [\n \"typenum\",\n \"version_check\",\n]\n\n[[package]]\nname = \"generic_timer_aarch64\"\nversion = \"0.1.0\"\ndependencies = [\n \"cortex-a\",\n \"derive_more\",\n \"log\",\n \"memory_structs\",\n \"time\",\n \"tock-registers\",\n]\n\n[[package]]\nname = \"getopts\"\nversion = \"0.2.21\"\nsource = \"git+https://github.com/theseus-os/getopts#da1e04828d3ecd6adc90e2da61e2e3cccc7ca97c\"\ndependencies = [\n \"unicode-width\",\n]\n\n[[package]]\nname = \"getrandom\"\nversion = \"0.2.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"418d37c8b1d42553c93648be529cb70f920d3baf8ef469b74b9638df426e0b4c\"\ndependencies = [\n \"cfg-if 1.0.0\",\n \"libc\",\n \"wasi 0.10.2+wasi-snapshot-preview1\",\n]\n\n[[package]]\nname = \"gic\"\nversion = \"0.1.0\"\ndependencies = [\n \"arm_boards\",\n \"cpu\",\n \"log\",\n \"memory\",\n \"spin 0.9.4\",\n \"volatile 0.2.7\",\n \"zerocopy\",\n]\n\n[[package]]\nname = \"gimli\"\nversion = \"0.25.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f0a01e0497841a3b2db4f8afa483cce65f7e96a3498bd6c541734792aeac8fe7\"\n\n[[package]]\nname = \"goblin\"\nversion = \"0.0.19\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"c65cd533b33e3d04c6e393225fa8919ddfcf5862ca8919c7f9a167c312ef41c2\"\ndependencies = [\n \"plain\",\n \"scroll\",\n]\n\n[[package]]\nname = \"hash32\"\nversion = \"0.2.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b0c35f58762feb77d74ebe43bdbc3210f09be9fe6742234d573bacc26ed92b67\"\ndependencies = [\n \"byteorder\",\n]\n\n[[package]]\nname = \"hashbrown\"\nversion = \"0.11.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ab5ef0d4909ef3724cc8cce6ccc8572c5c817592e9285f5464f8e86f8bd3726e\"\ndependencies = [\n \"ahash\",\n \"serde\",\n]\n\n[[package]]\nname = \"heap\"\nversion = \"0.1.0\"\ndependencies = [\n \"block_allocator\",\n \"kernel_config\",\n \"log\",\n \"memory\",\n \"spin 0.9.4\",\n \"sync_irq\",\n]\n\n[[package]]\nname = \"heap_eval\"\nversion = \"0.1.0\"\ndependencies = [\n \"apic\",\n \"app_io\",\n \"cpu\",\n \"getopts\",\n \"hashbrown\",\n \"heap\",\n \"hpet\",\n \"libtest\",\n \"log\",\n \"qp-trie\",\n \"spawn\",\n]\n\n[[package]]\nname = \"heapfile\"\nversion = \"0.1.0\"\ndependencies = [\n \"fs_node\",\n \"io\",\n \"irq_safety\",\n \"log\",\n \"memory\",\n \"spin 0.9.4\",\n]\n\n[[package]]\nname = \"heapless\"\nversion = \"0.7.16\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"db04bc24a18b9ea980628ecf00e6c0264f3c1426dac36c00cb49b6fbad8b0743\"\ndependencies = [\n \"atomic-polyfill\",\n \"hash32\",\n \"rustc_version 0.4.0\",\n \"spin 0.9.4\",\n \"stable_deref_trait\",\n]\n\n[[package]]\nname = \"hello\"\nversion = \"0.1.0\"\ndependencies = [\n \"log\",\n]\n\n[[package]]\nname = \"hpet\"\nversion = \"0.1.0\"\ndependencies = [\n \"acpi_table\",\n \"kernel_config\",\n \"log\",\n \"memory\",\n \"sdt\",\n \"spin 0.9.4\",\n \"time\",\n \"volatile 0.2.7\",\n \"zerocopy\",\n]\n\n[[package]]\nname = \"http_client\"\nversion = \"0.1.0\"\ndependencies = [\n \"httparse\",\n \"log\",\n \"net\",\n \"percent-encoding\",\n \"time\",\n]\n\n[[package]]\nname = \"httparse\"\nversion = \"1.3.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e8734b0cfd3bc3e101ec59100e101c2eecd19282202e87808b3037b442777a83\"\n\n[[package]]\nname = \"hull\"\nversion = \"0.1.0\"\ndependencies = [\n \"app_io\",\n \"core2\",\n \"embedded-hal\",\n \"hashbrown\",\n \"log\",\n \"mod_mgmt\",\n \"nb 1.0.0\",\n \"noline\",\n \"path\",\n \"root\",\n \"scheduler\",\n \"spawn\",\n \"stdio\",\n \"sync_block\",\n \"task\",\n \"tty\",\n]\n\n[[package]]\nname = \"idle\"\nversion = \"0.1.0\"\ndependencies = [\n \"cfg-if 1.0.0\",\n \"raw-cpuid\",\n]\n\n[[package]]\nname = \"indexmap\"\nversion = \"1.7.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"bc633605454125dec4b66843673f01c7df2b89479b32e0ed634e43a91cff62a5\"\ndependencies = [\n \"autocfg\",\n \"hashbrown\",\n \"serde\",\n]\n\n[[package]]\nname = \"intel_ethernet\"\nversion = \"0.1.0\"\ndependencies = [\n \"bit_field 0.7.0\",\n \"log\",\n \"memory\",\n \"volatile 0.2.7\",\n \"zerocopy\",\n]\n\n[[package]]\nname = \"interrupt_controller\"\nversion = \"0.1.0\"\ndependencies = [\n \"acpi\",\n \"apic\",\n \"arm_boards\",\n \"cpu\",\n \"generic_timer_aarch64\",\n \"gic\",\n \"ioapic\",\n \"log\",\n \"madt\",\n \"memory\",\n \"spin 0.9.4\",\n \"sync_irq\",\n]\n\n[[package]]\nname = \"interrupts\"\nversion = \"0.1.0\"\ndependencies = [\n \"apic\",\n \"arm_boards\",\n \"cortex-a\",\n \"cpu\",\n \"early_printer\",\n \"exceptions_early\",\n \"gdt\",\n \"generic_timer_aarch64\",\n \"gic\",\n \"interrupt_controller\",\n \"kernel_config\",\n \"locked_idt\",\n \"log\",\n \"memory\",\n \"pic\",\n \"spin 0.9.4\",\n \"sync_irq\",\n \"tock-registers\",\n \"tss\",\n \"x86_64\",\n]\n\n[[package]]\nname = \"intrusive-collections\"\nversion = \"0.9.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"4bca8c0bb831cd60d4dda79a58e3705ca6eb47efb65d665651a8d672213ec3db\"\ndependencies = [\n \"memoffset 0.5.6\",\n]\n\n[[package]]\nname = \"io\"\nversion = \"0.1.0\"\ndependencies = [\n \"core2\",\n \"delegate\",\n \"lazy_static\",\n \"lockable\",\n \"log\",\n \"spin 0.9.4\",\n]\n\n[[package]]\nname = \"ioapic\"\nversion = \"0.1.0\"\ndependencies = [\n \"apic\",\n \"atomic_linked_list\",\n \"log\",\n \"memory\",\n \"spin 0.9.4\",\n \"volatile 0.2.7\",\n \"zerocopy\",\n]\n\n[[package]]\nname = \"iommu\"\nversion = \"0.1.0\"\ndependencies = [\n \"bitflags 2.4.1\",\n \"log\",\n \"memory\",\n \"spin 0.9.4\",\n \"sync_irq\",\n \"volatile 0.2.7\",\n \"zerocopy\",\n]\n\n[[package]]\nname = \"irq_safety\"\nversion = \"0.1.1\"\nsource = \"git+https://github.com/theseus-os/irq_safety#11bfab9f410a898df1e42ad6213488612e20c926\"\ndependencies = [\n \"spin 0.9.4\",\n]\n\n[[package]]\nname = \"itertools\"\nversion = \"0.7.11\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"0d47946d458e94a1b7bcabbf6521ea7c037062c81f534615abcad76e84d4970d\"\ndependencies = [\n \"either\",\n]\n\n[[package]]\nname = \"ixgbe\"\nversion = \"0.1.0\"\ndependencies = [\n \"bit_field 0.7.0\",\n \"cpu\",\n \"hashbrown\",\n \"hpet\",\n \"intel_ethernet\",\n \"interrupts\",\n \"kernel_config\",\n \"lazy_static\",\n \"log\",\n \"memory\",\n \"mpmc\",\n \"net\",\n \"nic_buffers\",\n \"nic_initialization\",\n \"nic_queues\",\n \"pci\",\n \"physical_nic\",\n \"pic\",\n \"pit_clock_basic\",\n \"rand\",\n \"spin 0.9.4\",\n \"sync_irq\",\n \"virtual_nic\",\n \"volatile 0.2.7\",\n \"zerocopy\",\n]\n\n[[package]]\nname = \"keccak\"\nversion = \"0.1.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"67c21572b4949434e4fc1e1978b99c5f77064153c59d998bf13ecd96fb5ecba7\"\n\n[[package]]\nname = \"kernel_config\"\nversion = \"0.1.0\"\n\n[[package]]\nname = \"keyboard\"\nversion = \"0.1.0\"\ndependencies = [\n \"event_types\",\n \"interrupts\",\n \"keycodes_ascii\",\n \"log\",\n \"mpmc\",\n \"once_cell\",\n \"ps2\",\n \"spin 0.9.4\",\n \"x86_64\",\n]\n\n[[package]]\nname = \"keycodes_ascii\"\nversion = \"0.1.0\"\ndependencies = [\n \"bitflags 2.4.1\",\n \"num_enum\",\n]\n\n[[package]]\nname = \"kill\"\nversion = \"0.1.0\"\ndependencies = [\n \"app_io\",\n \"debugit\",\n \"getopts\",\n \"task\",\n]\n\n[[package]]\nname = \"lazy_static\"\nversion = \"1.4.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e2abad23fbc42b3700f2f279844dc832adb2b2eb069b2df918f455c4e18cc646\"\ndependencies = [\n \"spin 0.5.2\",\n]\n\n[[package]]\nname = \"less\"\nversion = \"0.1.0\"\ndependencies = [\n \"app_io\",\n \"core2\",\n \"fs_node\",\n \"getopts\",\n \"keycodes_ascii\",\n \"libterm\",\n \"log\",\n \"path\",\n \"spin 0.9.4\",\n \"stdio\",\n \"task\",\n]\n\n[[package]]\nname = \"libc\"\nversion = \"0.2.127\"\nsource = \"git+https://github.com/theseus-os/libc?branch=theseus#5e1da08f39d9b25c649f1152e0084585b0adf725\"\n\n[[package]]\nname = \"libm\"\nversion = \"0.2.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"c7d73b3f436185384286bd8098d17ec07c9a7d2388a6599f824d8502b529702a\"\n\n[[package]]\nname = \"libterm\"\nversion = \"0.1.0\"\ndependencies = [\n \"color\",\n \"dfqueue\",\n \"displayable\",\n \"environment\",\n \"event_types\",\n \"font\",\n \"framebuffer\",\n \"framebuffer_drawer\",\n \"framebuffer_printer\",\n \"log\",\n \"root\",\n \"shapes\",\n \"text_display\",\n \"time\",\n \"window\",\n \"window_manager\",\n]\n\n[[package]]\nname = \"libtest\"\nversion = \"0.1.0\"\ndependencies = [\n \"apic\",\n \"bit_field 0.10.1\",\n \"cpu\",\n \"hashbrown\",\n \"hpet\",\n \"libm\",\n \"log\",\n \"memory\",\n \"pmu_x86\",\n \"spin 0.9.4\",\n \"task\",\n]\n\n[[package]]\nname = \"linked_list_allocator\"\nversion = \"0.9.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"549ce1740e46b291953c4340adcd74c59bcf4308f4cac050fd33ba91b7168f4a\"\n\n[[package]]\nname = \"loadc\"\nversion = \"0.1.0\"\ndependencies = [\n \"app_io\",\n \"fs_node\",\n \"getopts\",\n \"libc\",\n \"log\",\n \"memory\",\n \"mod_mgmt\",\n \"path\",\n \"rustc-demangle\",\n \"task\",\n \"xmas-elf\",\n]\n\n[[package]]\nname = \"local_storage_initializer\"\nversion = \"0.1.0\"\ndependencies = [\n \"cortex-a\",\n \"crate_metadata\",\n \"log\",\n \"memory_structs\",\n \"rangemap\",\n \"spin 0.9.4\",\n \"tock-registers\",\n \"x86_64\",\n]\n\n[[package]]\nname = \"lock_api\"\nversion = \"0.4.9\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"435011366fe56583b16cf956f9df0095b405b82d76425bc8981c0e22e60ec4df\"\ndependencies = [\n \"autocfg\",\n \"scopeguard\",\n]\n\n[[package]]\nname = \"lockable\"\nversion = \"0.1.0\"\ndependencies = [\n \"spin 0.9.4\",\n \"sync_irq\",\n]\n\n[[package]]\nname = \"locked_idt\"\nversion = \"0.1.0\"\ndependencies = [\n \"sync_irq\",\n \"x86_64\",\n]\n\n[[package]]\nname = \"log\"\nversion = \"0.4.17\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"abb12e687cfb44aa40f41fc3978ef76448f9b6038cad6aef4259d3c095a2382e\"\ndependencies = [\n \"cfg-if 1.0.0\",\n]\n\n[[package]]\nname = \"logger\"\nversion = \"0.1.0\"\ndependencies = [\n \"crossbeam-utils\",\n \"log\",\n \"serial_port_basic\",\n \"sync_irq\",\n]\n\n[[package]]\nname = \"ls\"\nversion = \"0.1.0\"\ndependencies = [\n \"app_io\",\n \"fs_node\",\n \"getopts\",\n \"log\",\n \"path\",\n \"task\",\n]\n\n[[package]]\nname = \"lspci\"\nversion = \"0.1.0\"\ndependencies = [\n \"app_io\",\n \"getopts\",\n \"memory\",\n \"pci\",\n]\n\n[[package]]\nname = \"lz4_flex\"\nversion = \"0.9.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"74141c8af4bb8136dafb5705826bdd9dce823021db897c1129191804140ddf84\"\n\n[[package]]\nname = \"mach\"\nversion = \"0.3.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b823e83b2affd8f40a9ee8c29dbc56404c1e34cd2710921f2801e2cf29527afa\"\ndependencies = [\n \"libc\",\n]\n\n[[package]]\nname = \"madt\"\nversion = \"0.1.0\"\ndependencies = [\n \"acpi_table\",\n \"apic\",\n \"ioapic\",\n \"log\",\n \"memory\",\n \"pic\",\n \"sdt\",\n \"zerocopy\",\n]\n\n[[package]]\nname = \"managed\"\nversion = \"0.8.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"0ca88d725a0a943b096803bd34e73a4437208b6077654cc4ecb2947a5f91618d\"\n\n[[package]]\nname = \"memchr\"\nversion = \"2.4.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"308cc39be01b73d0d18f82a0e7b2a3df85245f84af96fdddc5d202d27e47b86a\"\n\n[[package]]\nname = \"memfs\"\nversion = \"0.1.0\"\ndependencies = [\n \"fs_node\",\n \"io\",\n \"irq_safety\",\n \"log\",\n \"memory\",\n \"spin 0.9.4\",\n]\n\n[[package]]\nname = \"memoffset\"\nversion = \"0.5.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"043175f069eda7b85febe4a74abbaeff828d9f8b448515d3151a14a3542811aa\"\ndependencies = [\n \"autocfg\",\n]\n\n[[package]]\nname = \"memoffset\"\nversion = \"0.6.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"5aa361d4faea93603064a027415f07bd8e1d5c88c9fbf68bf56a285428fd79ce\"\ndependencies = [\n \"autocfg\",\n]\n\n[[package]]\nname = \"memory\"\nversion = \"0.1.0\"\ndependencies = [\n \"atomic_linked_list\",\n \"bit_field 0.7.0\",\n \"bitflags 2.4.1\",\n \"boot_info\",\n \"frame_allocator\",\n \"kernel_config\",\n \"lazy_static\",\n \"log\",\n \"memory_aarch64\",\n \"memory_structs\",\n \"memory_x86_64\",\n \"no_drop\",\n \"owned_borrowed_trait\",\n \"page_allocator\",\n \"page_table_entry\",\n \"pte_flags\",\n \"spin 0.9.4\",\n \"static_assertions\",\n \"sync_irq\",\n \"x86_64\",\n \"xmas-elf\",\n \"zerocopy\",\n]\n\n[[package]]\nname = \"memory_aarch64\"\nversion = \"0.1.0\"\ndependencies = [\n \"boot_info\",\n \"cortex-a\",\n \"kernel_config\",\n \"log\",\n \"memory_structs\",\n \"pte_flags\",\n \"tock-registers\",\n]\n\n[[package]]\nname = \"memory_initialization\"\nversion = \"0.1.0\"\ndependencies = [\n \"boot_info\",\n \"bootloader_modules\",\n \"early_printer\",\n \"heap\",\n \"irq_safety\",\n \"kernel_config\",\n \"log\",\n \"memory\",\n \"no_drop\",\n \"stack\",\n]\n\n[[package]]\nname = \"memory_structs\"\nversion = \"0.1.0\"\ndependencies = [\n \"derive_more\",\n \"kernel_config\",\n \"paste\",\n \"range_inclusive\",\n \"zerocopy\",\n]\n\n[[package]]\nname = \"memory_units\"\nversion = \"0.3.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"71d96e3f3c0b6325d8ccd83c33b28acb183edcb6c67938ba104ec546854b0882\"\n\n[[package]]\nname = \"memory_x86_64\"\nversion = \"0.1.0\"\ndependencies = [\n \"boot_info\",\n \"kernel_config\",\n \"log\",\n \"memory_structs\",\n \"pte_flags\",\n \"x86_64\",\n]\n\n[[package]]\nname = \"miniz_oxide\"\nversion = \"0.4.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a92518e98c078586bc6c934028adcca4c92a53d6a958196de835170a01d84e4b\"\ndependencies = [\n \"adler\",\n \"autocfg\",\n]\n\n[[package]]\nname = \"mkdir\"\nversion = \"0.1.0\"\ndependencies = [\n \"app_io\",\n \"fs_node\",\n \"getopts\",\n \"task\",\n \"vfs_node\",\n]\n\n[[package]]\nname = \"mlx5\"\nversion = \"0.1.0\"\ndependencies = [\n \"kernel_config\",\n \"lazy_static\",\n \"libm\",\n \"log\",\n \"memory\",\n \"memory_structs\",\n \"mlx_ethernet\",\n \"mpmc\",\n \"nic_buffers\",\n \"nic_initialization\",\n \"pci\",\n \"spin 0.9.4\",\n \"sync_irq\",\n]\n\n[[package]]\nname = \"mlx_ethernet\"\nversion = \"0.1.0\"\ndependencies = [\n \"bit_field 0.7.0\",\n \"byteorder\",\n \"kernel_config\",\n \"libm\",\n \"log\",\n \"memory\",\n \"mpmc\",\n \"nic_buffers\",\n \"num_enum\",\n \"volatile 0.2.7\",\n \"zerocopy\",\n]\n\n[[package]]\nname = \"mod_mgmt\"\nversion = \"0.1.0\"\ndependencies = [\n \"bincode\",\n \"bootloader_modules\",\n \"cls_allocator\",\n \"const_format\",\n \"cow_arc\",\n \"cpio_reader\",\n \"crate_metadata\",\n \"crate_metadata_serde\",\n \"crate_name_utils\",\n \"cstr_core\",\n \"early_tls\",\n \"fs_node\",\n \"hashbrown\",\n \"kernel_config\",\n \"local_storage_initializer\",\n \"log\",\n \"lz4_flex\",\n \"memfs\",\n \"memory\",\n \"no_drop\",\n \"path\",\n \"qp-trie\",\n \"root\",\n \"rustc-demangle\",\n \"serde\",\n \"spin 0.9.4\",\n \"vfs_node\",\n \"xmas-elf\",\n]\n\n[[package]]\nname = \"modular-bitfield\"\nversion = \"0.11.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a53d79ba8304ac1c4f9eb3b9d281f21f7be9d4626f72ce7df4ad8fbde4f38a74\"\ndependencies = [\n \"modular-bitfield-impl\",\n \"static_assertions\",\n]\n\n[[package]]\nname = \"modular-bitfield-impl\"\nversion = \"0.11.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"5a7d5f7076603ebc68de2dc6a650ec331a062a13abaa346975be747bbfa4b789\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn 1.0.98\",\n]\n\n[[package]]\nname = \"more-asserts\"\nversion = \"0.2.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"7843ec2de400bcbc6a6328c958dc38e5359da6e93e72e37bc5246bf1ae776389\"\n\n[[package]]\nname = \"mouse\"\nversion = \"0.1.0\"\ndependencies = [\n \"event_types\",\n \"interrupts\",\n \"log\",\n \"mouse_data\",\n \"mpmc\",\n \"ps2\",\n \"spin 0.9.4\",\n \"x86_64\",\n]\n\n[[package]]\nname = \"mouse_data\"\nversion = \"0.1.0\"\ndependencies = [\n \"modular-bitfield\",\n]\n\n[[package]]\nname = \"mpmc\"\nversion = \"0.1.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"bf78b1242a953be96e01b5f8ed8ffdfc8055c0a2b779899b3835e5d27a69dced\"\n\n[[package]]\nname = \"mpmc_queue\"\nversion = \"0.1.0\"\ndependencies = [\n \"sync\",\n]\n\n[[package]]\nname = \"msr\"\nversion = \"0.1.0\"\n\n[[package]]\nname = \"multiboot2\"\nversion = \"0.14.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e6170b6f12ea75d8d0f5621e3ed780b041a666c4a5b904c77261fe343d0e798d\"\ndependencies = [\n \"bitflags 1.3.2\",\n]\n\n[[package]]\nname = \"multicore_bringup\"\nversion = \"0.1.0\"\ndependencies = [\n \"acpi\",\n \"ap_start\",\n \"apic\",\n \"arm_boards\",\n \"cpu\",\n \"kernel_config\",\n \"log\",\n \"madt\",\n \"memory\",\n \"memory_aarch64\",\n \"mod_mgmt\",\n \"pit_clock_basic\",\n \"psci\",\n \"spin 0.9.4\",\n \"stack\",\n \"volatile 0.2.7\",\n \"zerocopy\",\n]\n\n[[package]]\nname = \"multiple_heaps\"\nversion = \"0.1.0\"\ndependencies = [\n \"apic\",\n \"cfg-if 0.1.10\",\n \"hashbrown\",\n \"heap\",\n \"intrusive-collections\",\n \"kernel_config\",\n \"log\",\n \"memory\",\n \"page_allocator\",\n \"slabmalloc\",\n \"slabmalloc_safe\",\n \"slabmalloc_unsafe\",\n \"spin 0.9.4\",\n \"sync_irq\",\n]\n\n[[package]]\nname = \"nano_core\"\nversion = \"0.1.0\"\ndependencies = [\n \"boot_info\",\n \"captain\",\n \"cfg-if 1.0.0\",\n \"early_printer\",\n \"early_tls\",\n \"exceptions_early\",\n \"irq_safety\",\n \"kernel_config\",\n \"libm\",\n \"log\",\n \"logger\",\n \"memory\",\n \"memory_initialization\",\n \"mod_mgmt\",\n \"multiboot2\",\n \"no_drop\",\n \"panic_entry\",\n \"serial_port_basic\",\n \"stack\",\n \"state_store\",\n \"uefi-bootloader-api\",\n]\n\n[[package]]\nname = \"nb\"\nversion = \"0.1.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"801d31da0513b6ec5214e9bf433a77966320625a37860f910be265be6e18d06f\"\ndependencies = [\n \"nb 1.0.0\",\n]\n\n[[package]]\nname = \"nb\"\nversion = \"1.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"546c37ac5d9e56f55e73b677106873d9d9f5190605e41a856503623648488cae\"\n\n[[package]]\nname = \"net\"\nversion = \"0.1.0\"\ndependencies = [\n \"heapless\",\n \"log\",\n \"nic_buffers\",\n \"rand\",\n \"rand_chacha\",\n \"random\",\n \"smoltcp\",\n \"spin 0.9.4\",\n \"sync_block\",\n \"sync_irq\",\n]\n\n[[package]]\nname = \"new_debug_unreachable\"\nversion = \"1.0.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"0cdc457076c78ab54d5e0d6fa7c47981757f1e34dc39ff92787f217dede586c4\"\ndependencies = [\n \"unreachable\",\n]\n\n[[package]]\nname = \"nic_buffers\"\nversion = \"0.1.0\"\ndependencies = [\n \"log\",\n \"memory\",\n \"mpmc\",\n]\n\n[[package]]\nname = \"nic_initialization\"\nversion = \"0.1.0\"\ndependencies = [\n \"intel_ethernet\",\n \"log\",\n \"memory\",\n \"mpmc\",\n \"nic_buffers\",\n \"nic_queues\",\n \"volatile 0.2.7\",\n]\n\n[[package]]\nname = \"nic_queues\"\nversion = \"0.1.0\"\ndependencies = [\n \"cpu\",\n \"intel_ethernet\",\n \"log\",\n \"memory\",\n \"mpmc\",\n \"nic_buffers\",\n]\n\n[[package]]\nname = \"no_drop\"\nversion = \"0.1.0\"\n\n[[package]]\nname = \"noline\"\nversion = \"0.2.0\"\nsource = \"git+https://github.com/theseus-os/noline?branch=history-dedup#f5b6e4e1be89d1c13f5443b1bdc1fb6e1d17ccc7\"\ndependencies = [\n \"embedded-hal\",\n \"nb 1.0.0\",\n \"num_enum\",\n]\n\n[[package]]\nname = \"ns\"\nversion = \"0.1.0\"\ndependencies = [\n \"app_io\",\n \"fs_node\",\n \"getopts\",\n \"memory\",\n \"mod_mgmt\",\n \"path\",\n \"task\",\n]\n\n[[package]]\nname = \"num-integer\"\nversion = \"0.1.44\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d2cc698a63b549a70bc047073d2949cce27cd1c7b0a4a862d08a8031bc2801db\"\ndependencies = [\n \"autocfg\",\n \"num-traits\",\n]\n\n[[package]]\nname = \"num-rational\"\nversion = \"0.2.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"5c000134b5dbf44adc5cb772486d335293351644b801551abe8f75c84cfa4aef\"\ndependencies = [\n \"autocfg\",\n \"num-integer\",\n \"num-traits\",\n]\n\n[[package]]\nname = \"num-traits\"\nversion = \"0.2.14\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"9a64b1ec5cda2586e284722486d802acf1f7dbdc623e2bfc57e65ca1cd099290\"\ndependencies = [\n \"autocfg\",\n]\n\n[[package]]\nname = \"num_enum\"\nversion = \"0.5.7\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"cf5395665662ef45796a4ff5486c5d41d29e0c09640af4c5f17fd94ee2c119c9\"\ndependencies = [\n \"num_enum_derive\",\n]\n\n[[package]]\nname = \"num_enum_derive\"\nversion = \"0.5.7\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3b0498641e53dd6ac1a4f22547548caa6864cc4933784319cd1775271c5a46ce\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn 1.0.98\",\n]\n\n[[package]]\nname = \"object\"\nversion = \"0.28.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e42c982f2d955fac81dd7e1d0e1426a7d702acd9c98d19ab01083a6a0328c424\"\ndependencies = [\n \"crc32fast\",\n \"hashbrown\",\n \"indexmap\",\n \"memchr\",\n]\n\n[[package]]\nname = \"once_cell\"\nversion = \"1.9.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"da32515d9f6e6e489d7bc9d84c71b060db7247dc035bbe44eac88cf87486d8d5\"\n\n[[package]]\nname = \"ota_update_client\"\nversion = \"0.1.0\"\ndependencies = [\n \"http_client\",\n \"httparse\",\n \"irq_safety\",\n \"itertools\",\n \"log\",\n \"net\",\n \"percent-encoding\",\n \"sha3\",\n \"spawn\",\n \"task\",\n \"time\",\n]\n\n[[package]]\nname = \"owned_borrowed_trait\"\nversion = \"0.1.0\"\n\n[[package]]\nname = \"page_allocator\"\nversion = \"0.1.0\"\ndependencies = [\n \"intrusive-collections\",\n \"kernel_config\",\n \"log\",\n \"memory_structs\",\n \"spin 0.9.4\",\n \"static_assertions\",\n]\n\n[[package]]\nname = \"page_attribute_table\"\nversion = \"0.1.0\"\ndependencies = [\n \"log\",\n \"modular-bitfield\",\n \"msr\",\n \"raw-cpuid\",\n \"spin 0.9.4\",\n \"x86_64\",\n]\n\n[[package]]\nname = \"page_table_entry\"\nversion = \"0.1.0\"\ndependencies = [\n \"frame_allocator\",\n \"kernel_config\",\n \"memory_structs\",\n \"pte_flags\",\n \"zerocopy\",\n]\n\n[[package]]\nname = \"panic_entry\"\nversion = \"0.1.0\"\ndependencies = [\n \"early_printer\",\n \"log\",\n \"memory\",\n \"mod_mgmt\",\n \"panic_wrapper\",\n \"unwind\",\n]\n\n[[package]]\nname = \"panic_wrapper\"\nversion = \"0.1.0\"\ndependencies = [\n \"fault_log\",\n \"log\",\n \"memory\",\n \"mod_mgmt\",\n \"stack_trace\",\n \"stack_trace_frame_pointers\",\n \"task\",\n \"unwind\",\n]\n\n[[package]]\nname = \"parity-wasm\"\nversion = \"0.42.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"be5e13c266502aadf83426d87d81a0f5d1ef45b8027f5a471c360abfe4bfae92\"\n\n[[package]]\nname = \"paste\"\nversion = \"1.0.14\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"de3145af08024dea9fa9914f381a17b8fc6034dfb00f3a84013f7ff43f29ed4c\"\n\n[[package]]\nname = \"path\"\nversion = \"0.1.0\"\ndependencies = [\n \"fs_node\",\n \"root\",\n]\n\n[[package]]\nname = \"pci\"\nversion = \"0.1.0\"\ndependencies = [\n \"arm_boards\",\n \"bit_field 0.7.0\",\n \"cpu\",\n \"interrupt_controller\",\n \"interrupts\",\n \"log\",\n \"memory\",\n \"port_io\",\n \"spin 0.9.4\",\n \"volatile 0.2.7\",\n \"zerocopy\",\n]\n\n[[package]]\nname = \"percent-encoding\"\nversion = \"1.0.2\"\n\n[[package]]\nname = \"physical_nic\"\nversion = \"0.1.0\"\ndependencies = [\n \"intel_ethernet\",\n \"nic_buffers\",\n \"nic_queues\",\n]\n\n[[package]]\nname = \"pic\"\nversion = \"0.1.0\"\ndependencies = [\n \"log\",\n \"port_io\",\n]\n\n[[package]]\nname = \"pin-project-lite\"\nversion = \"0.2.9\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e0a7ae3ac2f1173085d398531c705756c94a4c56843785df85a60c1a0afac116\"\n\n[[package]]\nname = \"pin-utils\"\nversion = \"0.1.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8b870d8c151b6f2fb93e84a13146138f05d02ed11c7e7c54f8826aaaf7c9f184\"\n\n[[package]]\nname = \"ping\"\nversion = \"0.1.0\"\ndependencies = [\n \"app_io\",\n \"getopts\",\n \"net\",\n \"time\",\n]\n\n[[package]]\nname = \"pit_clock\"\nversion = \"0.1.0\"\ndependencies = [\n \"interrupts\",\n \"log\",\n \"pit_clock_basic\",\n \"port_io\",\n \"x86_64\",\n]\n\n[[package]]\nname = \"pit_clock_basic\"\nversion = \"0.1.0\"\ndependencies = [\n \"log\",\n \"port_io\",\n \"spin 0.9.4\",\n]\n\n[[package]]\nname = \"plain\"\nversion = \"0.2.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b4596b6d070b27117e987119b4dac604f3c58cfb0b191112e24771b2faeac1a6\"\n\n[[package]]\nname = \"pmu_sample_start\"\nversion = \"0.1.0\"\ndependencies = [\n \"app_io\",\n \"getopts\",\n \"pmu_x86\",\n \"spawn\",\n]\n\n[[package]]\nname = \"pmu_sample_stop\"\nversion = \"0.1.0\"\ndependencies = [\n \"app_io\",\n \"getopts\",\n \"pmu_x86\",\n]\n\n[[package]]\nname = \"pmu_x86\"\nversion = \"0.1.0\"\ndependencies = [\n \"apic\",\n \"bit_field 0.10.1\",\n \"cpu\",\n \"lazy_static\",\n \"log\",\n \"memory\",\n \"mod_mgmt\",\n \"msr\",\n \"pit_clock\",\n \"port_io\",\n \"raw-cpuid\",\n \"spin 0.9.4\",\n \"sync_irq\",\n \"task\",\n \"x86_64\",\n]\n\n[[package]]\nname = \"port_io\"\nversion = \"0.2.1\"\n\n[[package]]\nname = \"ppv-lite86\"\nversion = \"0.2.17\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"5b40af805b3121feab8a3c29f04d8ad262fa8e0561883e7653e024ae4479e6de\"\n\n[[package]]\nname = \"preemption\"\nversion = \"0.1.0\"\ndependencies = [\n \"apic\",\n \"cls_macros\",\n \"cpu\",\n]\n\n[[package]]\nname = \"print_fault_log\"\nversion = \"0.1.0\"\ndependencies = [\n \"fault_log\",\n]\n\n[[package]]\nname = \"proc-macro-error\"\nversion = \"1.0.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"da25490ff9892aab3fcf7c36f08cfb902dd3e71ca0f9f9517bea02a73a5ce38c\"\ndependencies = [\n \"proc-macro-error-attr\",\n \"proc-macro2\",\n \"quote\",\n \"syn 1.0.98\",\n \"version_check\",\n]\n\n[[package]]\nname = \"proc-macro-error-attr\"\nversion = \"1.0.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a1be40180e52ecc98ad80b184934baf3d0d29f979574e439af5a55274b35f869\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"version_check\",\n]\n\n[[package]]\nname = \"proc-macro2\"\nversion = \"1.0.66\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"18fb31db3f9bddb2ea821cde30a9f70117e3f119938b5ee630b7403aa6e2ead9\"\ndependencies = [\n \"unicode-ident\",\n]\n\n[[package]]\nname = \"ps\"\nversion = \"0.1.0\"\ndependencies = [\n \"app_io\",\n \"getopts\",\n \"scheduler\",\n \"task\",\n]\n\n[[package]]\nname = \"ps2\"\nversion = \"0.1.0\"\ndependencies = [\n \"acpi\",\n \"fadt\",\n \"log\",\n \"modular-bitfield\",\n \"num_enum\",\n \"port_io\",\n \"spin 0.9.4\",\n]\n\n[[package]]\nname = \"psci\"\nversion = \"0.1.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3374e3ae47f134467227a48be93b929e5d304efcd25ce5d176006403ca1d9bab\"\n\n[[package]]\nname = \"psm\"\nversion = \"0.1.18\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"871372391786ccec00d3c5d3d6608905b3d4db263639cfe075d3b60a736d115a\"\ndependencies = [\n \"cc\",\n]\n\n[[package]]\nname = \"pte_flags\"\nversion = \"0.1.0\"\ndependencies = [\n \"bitflags 2.4.1\",\n \"cfg-if 1.0.0\",\n]\n\n[[package]]\nname = \"pwd\"\nversion = \"0.1.0\"\ndependencies = [\n \"app_io\",\n \"getopts\",\n \"task\",\n]\n\n[[package]]\nname = \"qemu-exit\"\nversion = \"3.0.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8bb0fd6580eeed0103c054e3fba2c2618ff476943762f28a645b63b8692b21c9\"\n\n[[package]]\nname = \"qemu_test\"\nversion = \"0.1.0\"\ndependencies = [\n \"app_io\",\n \"path\",\n \"qemu-exit\",\n \"spawn\",\n \"task\",\n]\n\n[[package]]\nname = \"qp-trie\"\nversion = \"0.8.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"9569328cda9b68120dbbf855bac541eeb40c475d96a9a380cf8b5547bfe0c165\"\ndependencies = [\n \"new_debug_unreachable\",\n \"unreachable\",\n]\n\n[[package]]\nname = \"quote\"\nversion = \"1.0.31\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"5fe8a65d69dd0808184ebb5f836ab526bb259db23c657efa38711b1072ee47f0\"\ndependencies = [\n \"proc-macro2\",\n]\n\n[[package]]\nname = \"rand\"\nversion = \"0.8.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"34af8d1a0e25924bc5b7c43c079c942339d8f0a8b57c39049bef581b46327404\"\ndependencies = [\n \"rand_core\",\n]\n\n[[package]]\nname = \"rand_chacha\"\nversion = \"0.3.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e6c10a63a0fa32252be49d21e7709d4d4baf8d231c2dbce1eaa8141b9b127d88\"\ndependencies = [\n \"ppv-lite86\",\n \"rand_core\",\n]\n\n[[package]]\nname = \"rand_core\"\nversion = \"0.6.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d34f1408f55294453790c48b2f1ebbb1c5b4b7563eb1f418bcfcfdbb06ebb4e7\"\n\n[[package]]\nname = \"random\"\nversion = \"0.1.0\"\ndependencies = [\n \"lazy_static\",\n \"log\",\n \"rand_chacha\",\n \"rdrand\",\n \"spin 0.9.4\",\n \"tsc\",\n]\n\n[[package]]\nname = \"range_inclusive\"\nversion = \"0.1.0\"\n\n[[package]]\nname = \"rangemap\"\nversion = \"1.3.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8b9283c6b06096b47afc7109834fdedab891175bb5241ee5d4f7d2546549f263\"\n\n[[package]]\nname = \"raw-cpuid\"\nversion = \"10.6.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a6823ea29436221176fe662da99998ad3b4db2c7f31e7b6f5fe43adccd6320bb\"\ndependencies = [\n \"bitflags 1.3.2\",\n]\n\n[[package]]\nname = \"raw_mode\"\nversion = \"0.1.0\"\ndependencies = [\n \"app_io\",\n \"log\",\n]\n\n[[package]]\nname = \"rdrand\"\nversion = \"0.8.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e233b642160555c1aa1ff7a78443c6139342f411b6fa6602af2ebbfee9e166bb\"\ndependencies = [\n \"rand_core\",\n]\n\n[[package]]\nname = \"regex\"\nversion = \"1.6.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"4c4eb3267174b8c6c2f654116623910a0fef09c4753f8dd83db29c48a0df988b\"\ndependencies = [\n \"aho-corasick\",\n \"memchr\",\n \"regex-syntax\",\n]\n\n[[package]]\nname = \"regex-syntax\"\nversion = \"0.6.27\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a3f87b73ce11b1619a3c6332f45341e0047173771e8b8b73f87bfeefb7b56244\"\n\n[[package]]\nname = \"region\"\nversion = \"3.0.0\"\ndependencies = [\n \"bitflags 1.3.2\",\n \"core2\",\n \"libc\",\n \"mach\",\n \"memory\",\n \"winapi\",\n]\n\n[[package]]\nname = \"rendezvous\"\nversion = \"0.1.0\"\ndependencies = [\n \"debugit\",\n \"log\",\n \"scheduler\",\n \"spin 0.9.4\",\n \"sync\",\n \"sync_irq\",\n \"sync_spin\",\n \"task\",\n \"wait_guard\",\n \"wait_queue\",\n]\n\n[[package]]\nname = \"riscv\"\nversion = \"0.7.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"6907ccdd7a31012b70faf2af85cd9e5ba97657cc3987c4f13f8e4d2c2a088aba\"\ndependencies = [\n \"bare-metal 1.0.0\",\n \"bit_field 0.10.1\",\n \"riscv-target\",\n]\n\n[[package]]\nname = \"riscv-target\"\nversion = \"0.1.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"88aa938cda42a0cf62a20cfe8d139ff1af20c2e681212b5b34adb5a58333f222\"\ndependencies = [\n \"lazy_static\",\n \"regex\",\n]\n\n[[package]]\nname = \"rm\"\nversion = \"0.1.0\"\ndependencies = [\n \"app_io\",\n \"fs_node\",\n \"getopts\",\n \"log\",\n \"path\",\n \"root\",\n \"task\",\n]\n\n[[package]]\nname = \"root\"\nversion = \"0.1.0\"\ndependencies = [\n \"fs_node\",\n \"lazy_static\",\n \"log\",\n \"spin 0.9.4\",\n]\n\n[[package]]\nname = \"rq\"\nversion = \"0.1.0\"\ndependencies = [\n \"app_io\",\n \"cpu\",\n \"getopts\",\n \"task\",\n]\n\n[[package]]\nname = \"rq_eval\"\nversion = \"0.1.0\"\ndependencies = [\n \"app_io\",\n \"cpu\",\n \"getopts\",\n \"hpet\",\n \"libtest\",\n \"log\",\n \"spawn\",\n \"task\",\n]\n\n[[package]]\nname = \"rsdp\"\nversion = \"0.1.0\"\ndependencies = [\n \"memory\",\n \"zerocopy\",\n]\n\n[[package]]\nname = \"rsdt\"\nversion = \"0.1.0\"\ndependencies = [\n \"acpi_table\",\n \"memory\",\n \"sdt\",\n]\n\n[[package]]\nname = \"rtc\"\nversion = \"0.1.0\"\ndependencies = [\n \"irq_safety\",\n \"kernel_config\",\n \"lazy_static\",\n \"log\",\n \"port_io\",\n \"spin 0.9.4\",\n \"state_store\",\n \"x86_64\",\n]\n\n[[package]]\nname = \"rustc-demangle\"\nversion = \"0.1.19\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"410f7acf3cb3a44527c5d9546bad4bf4e6c460915d5f9f2fc524498bfe8f70ce\"\n\n[[package]]\nname = \"rustc_version\"\nversion = \"0.2.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"138e3e0acb6c9fb258b19b67cb8abd63c00679d2851805ea151465464fe9030a\"\ndependencies = [\n \"semver 0.9.0\",\n]\n\n[[package]]\nname = \"rustc_version\"\nversion = \"0.4.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"bfa0f585226d2e68097d4f95d113b15b83a82e819ab25717ec0590d9584ef366\"\ndependencies = [\n \"semver 1.0.14\",\n]\n\n[[package]]\nname = \"rustversion\"\nversion = \"1.0.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f2cc38e8fa666e2de3c4aba7edeb5ffc5246c1c2ed0e3d17e560aeeba736b23f\"\n\n[[package]]\nname = \"scheduler\"\nversion = \"0.1.0\"\ndependencies = [\n \"cfg-if 1.0.0\",\n \"cpu\",\n \"generic_timer_aarch64\",\n \"interrupts\",\n \"kernel_config\",\n \"log\",\n \"sleep\",\n \"spin 0.9.4\",\n \"task\",\n \"x86_64\",\n]\n\n[[package]]\nname = \"scheduler_epoch\"\nversion = \"0.1.0\"\ndependencies = [\n \"log\",\n \"spin 0.9.4\",\n \"task\",\n]\n\n[[package]]\nname = \"scheduler_eval\"\nversion = \"0.1.0\"\ndependencies = [\n \"app_io\",\n \"cpu\",\n \"getopts\",\n \"scheduler\",\n \"spawn\",\n \"time\",\n]\n\n[[package]]\nname = \"scheduler_priority\"\nversion = \"0.1.0\"\ndependencies = [\n \"log\",\n \"task\",\n \"time\",\n]\n\n[[package]]\nname = \"scheduler_round_robin\"\nversion = \"0.1.0\"\ndependencies = [\n \"log\",\n \"spin 0.9.4\",\n \"task\",\n]\n\n[[package]]\nname = \"scopeguard\"\nversion = \"1.1.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d29ab0c6d3fc0ee92fe66e2d99f700eab17a8d57d1c1d3b748380fb20baa78cd\"\n\n[[package]]\nname = \"scroll\"\nversion = \"0.9.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"2f84d114ef17fd144153d608fba7c446b0145d038985e7a8cc5d08bb0ce20383\"\ndependencies = [\n \"rustc_version 0.2.3\",\n]\n\n[[package]]\nname = \"sdt\"\nversion = \"0.1.0\"\ndependencies = [\n \"zerocopy\",\n]\n\n[[package]]\nname = \"seconds_counter\"\nversion = \"0.1.0\"\ndependencies = [\n \"app_io\",\n \"time\",\n]\n\n[[package]]\nname = \"semver\"\nversion = \"0.9.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1d7eb9ef2c18661902cc47e535f9bc51b78acd254da71d375c2f6720d9a40403\"\ndependencies = [\n \"semver-parser\",\n]\n\n[[package]]\nname = \"semver\"\nversion = \"1.0.14\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e25dfac463d778e353db5be2449d1cce89bd6fd23c9f1ea21310ce6e5a1b29c4\"\n\n[[package]]\nname = \"semver-parser\"\nversion = \"0.7.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"388a1df253eca08550bef6c72392cfe7c30914bf41df5269b68cbd6ff8f570a3\"\n\n[[package]]\nname = \"serde\"\nversion = \"1.0.138\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1578c6245786b9d168c5447eeacfb96856573ca56c9d68fdcf394be134882a47\"\ndependencies = [\n \"serde_derive\",\n]\n\n[[package]]\nname = \"serde_derive\"\nversion = \"1.0.138\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"023e9b1467aef8a10fb88f25611870ada9800ef7e22afce356bb0d2387b6f27c\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn 1.0.98\",\n]\n\n[[package]]\nname = \"serial_echo\"\nversion = \"0.1.0\"\ndependencies = [\n \"app_io\",\n \"core2\",\n \"io\",\n \"log\",\n \"serial_port\",\n \"sync_irq\",\n \"task\",\n]\n\n[[package]]\nname = \"serial_port\"\nversion = \"0.1.0\"\ndependencies = [\n \"core2\",\n \"deferred_interrupt_tasks\",\n \"interrupts\",\n \"log\",\n \"serial_port_basic\",\n \"spin 0.9.4\",\n \"sync_channel\",\n \"sync_irq\",\n]\n\n[[package]]\nname = \"serial_port_basic\"\nversion = \"0.1.0\"\ndependencies = [\n \"arm_boards\",\n \"port_io\",\n \"spin 0.9.4\",\n \"sync_irq\",\n \"uart_pl011\",\n]\n\n[[package]]\nname = \"sha3\"\nversion = \"0.10.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e2904bea16a1ae962b483322a1c7b81d976029203aea1f461e51cd7705db7ba9\"\ndependencies = [\n \"digest\",\n \"keccak\",\n]\n\n[[package]]\nname = \"shapes\"\nversion = \"0.1.0\"\n\n[[package]]\nname = \"shell\"\nversion = \"0.1.0\"\ndependencies = [\n \"app_io\",\n \"core2\",\n \"dfqueue\",\n \"environment\",\n \"event_types\",\n \"fs_node\",\n \"keycodes_ascii\",\n \"lazy_static\",\n \"libterm\",\n \"log\",\n \"path\",\n \"root\",\n \"scheduler\",\n \"spawn\",\n \"spin 0.9.4\",\n \"stdio\",\n \"task\",\n \"window_manager\",\n]\n\n[[package]]\nname = \"signal_handler\"\nversion = \"0.1.0\"\ndependencies = [\n \"log\",\n \"memory\",\n \"spin 0.9.4\",\n \"task\",\n \"thread_local_macro\",\n \"x86_64\",\n]\n\n[[package]]\nname = \"simd_personality\"\nversion = \"0.1.0\"\ndependencies = [\n \"cfg-if 0.1.10\",\n \"cpu\",\n \"fs_node\",\n \"log\",\n \"memory\",\n \"mod_mgmt\",\n \"pit_clock\",\n \"spawn\",\n \"task\",\n]\n\n[[package]]\nname = \"simd_test\"\nversion = \"0.1.0\"\ndependencies = [\n \"cfg-if 0.1.10\",\n \"core_simd\",\n \"log\",\n]\n\n[[package]]\nname = \"simple_ipc\"\nversion = \"0.1.0\"\ndependencies = [\n \"bit_field 0.7.0\",\n \"log\",\n]\n\n[[package]]\nname = \"single_simd_task_optimization\"\nversion = \"0.1.0\"\ndependencies = [\n \"cfg-if 0.1.10\",\n \"log\",\n \"task\",\n]\n\n[[package]]\nname = \"slabmalloc\"\nversion = \"0.7.0\"\ndependencies = [\n \"log\",\n \"memory\",\n]\n\n[[package]]\nname = \"slabmalloc_safe\"\nversion = \"0.7.0\"\ndependencies = [\n \"log\",\n \"memory\",\n]\n\n[[package]]\nname = \"slabmalloc_unsafe\"\nversion = \"0.7.0\"\ndependencies = [\n \"log\",\n]\n\n[[package]]\nname = \"sleep\"\nversion = \"0.1.0\"\ndependencies = [\n \"crossbeam-utils\",\n \"lazy_static\",\n \"sync_irq\",\n \"task\",\n \"time\",\n]\n\n[[package]]\nname = \"smoltcp\"\nversion = \"0.10.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8d2e3a36ac8fea7b94e666dfa3871063d6e0a5c9d5d4fec9a1a6b7b6760f0229\"\ndependencies = [\n \"bitflags 1.3.2\",\n \"byteorder\",\n \"cfg-if 1.0.0\",\n \"defmt\",\n \"heapless\",\n \"managed\",\n]\n\n[[package]]\nname = \"spawn\"\nversion = \"0.1.0\"\ndependencies = [\n \"catch_unwind\",\n \"cfg-if 1.0.0\",\n \"context_switch\",\n \"cpu\",\n \"debugit\",\n \"early_tls\",\n \"fault_crate_swap\",\n \"fault_log\",\n \"fs_node\",\n \"lazy_static\",\n \"log\",\n \"memory\",\n \"mod_mgmt\",\n \"no_drop\",\n \"path\",\n \"preemption\",\n \"scheduler\",\n \"scheduler_epoch\",\n \"scheduler_priority\",\n \"scheduler_round_robin\",\n \"spin 0.9.4\",\n \"stack\",\n \"task\",\n \"task_struct\",\n \"thread_local_macro\",\n]\n\n[[package]]\nname = \"spin\"\nversion = \"0.5.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"6e63cff320ae2c57904679ba7cb63280a3dc4613885beafb148ee7bf9aa9042d\"\n\n[[package]]\nname = \"spin\"\nversion = \"0.9.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"7f6002a767bff9e83f8eeecf883ecb8011875a21ae8da43bffb817a57e78cc09\"\ndependencies = [\n \"lock_api\",\n]\n\n[[package]]\nname = \"spin\"\nversion = \"0.9.8\"\nsource = \"git+https://github.com/theseus-os/spin-rs#5c4470db034ad11f6cc7a8a5c400607c024e9392\"\n\n[[package]]\nname = \"stable_deref_trait\"\nversion = \"1.2.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a8f112729512f8e442d81f95a8a7ddf2b7c6b8a1a6f509a95864142b30cab2d3\"\n\n[[package]]\nname = \"stack\"\nversion = \"0.1.0\"\ndependencies = [\n \"kernel_config\",\n \"log\",\n \"memory\",\n \"memory_structs\",\n \"page_allocator\",\n \"spin 0.9.4\",\n]\n\n[[package]]\nname = \"stack_trace\"\nversion = \"0.1.0\"\ndependencies = [\n \"fallible-iterator\",\n \"log\",\n \"mod_mgmt\",\n \"task\",\n \"unwind\",\n]\n\n[[package]]\nname = \"stack_trace_frame_pointers\"\nversion = \"0.1.0\"\ndependencies = [\n \"cfg-if 0.1.10\",\n \"memory\",\n]\n\n[[package]]\nname = \"state_store\"\nversion = \"0.1.0\"\ndependencies = [\n \"atomic_linked_list\",\n \"lazy_static\",\n \"spin 0.9.4\",\n]\n\n[[package]]\nname = \"static_assertions\"\nversion = \"1.1.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a2eb9349b6444b326872e140eb1cf5e7c522154d69e7a0ffb0fb81c06b37543f\"\n\n[[package]]\nname = \"stdio\"\nversion = \"0.1.0\"\ndependencies = [\n \"core2\",\n \"keycodes_ascii\",\n \"spin 0.9.4\",\n]\n\n[[package]]\nname = \"storage_device\"\nversion = \"0.1.0\"\ndependencies = [\n \"downcast-rs\",\n \"io\",\n \"lazy_static\",\n \"log\",\n \"spin 0.9.4\",\n]\n\n[[package]]\nname = \"storage_manager\"\nversion = \"0.1.0\"\ndependencies = [\n \"ata\",\n \"log\",\n \"pci\",\n \"spin 0.9.4\",\n \"storage_device\",\n]\n\n[[package]]\nname = \"str_ref\"\nversion = \"0.1.0\"\n\n[[package]]\nname = \"swap\"\nversion = \"0.1.0\"\ndependencies = [\n \"app_io\",\n \"crate_swap\",\n \"fs_node\",\n \"getopts\",\n \"hpet\",\n \"itertools\",\n \"memory\",\n \"mod_mgmt\",\n \"path\",\n \"task\",\n]\n\n[[package]]\nname = \"syn\"\nversion = \"1.0.98\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"c50aef8a904de4c23c788f104b7dddc7d6f79c647c7c8ce4cc8f73eb0ca773dd\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"unicode-ident\",\n]\n\n[[package]]\nname = \"syn\"\nversion = \"2.0.26\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"45c3457aacde3c65315de5031ec191ce46604304d2446e803d71ade03308d970\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"unicode-ident\",\n]\n\n[[package]]\nname = \"sync\"\nversion = \"0.1.0\"\ndependencies = [\n \"spin 0.9.8\",\n]\n\n[[package]]\nname = \"sync_block\"\nversion = \"0.1.0\"\ndependencies = [\n \"log\",\n \"mpmc_queue\",\n \"preemption\",\n \"scheduler\",\n \"sync\",\n \"sync_spin\",\n \"task\",\n \"wait_queue\",\n]\n\n[[package]]\nname = \"sync_channel\"\nversion = \"0.1.0\"\ndependencies = [\n \"core2\",\n \"crossbeam-utils\",\n \"debugit\",\n \"log\",\n \"mpmc\",\n \"sync\",\n \"sync_spin\",\n \"wait_queue\",\n]\n\n[[package]]\nname = \"sync_irq\"\nversion = \"0.1.0\"\ndependencies = [\n \"irq_safety\",\n \"sync\",\n]\n\n[[package]]\nname = \"sync_preemption\"\nversion = \"0.1.0\"\ndependencies = [\n \"preemption\",\n \"sync\",\n]\n\n[[package]]\nname = \"sync_spin\"\nversion = \"0.1.0\"\ndependencies = [\n \"sync\",\n]\n\n[[package]]\nname = \"synstructure\"\nversion = \"0.12.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b834f2d66f734cb897113e34aaff2f1ab4719ca946f9a7358dba8f8064148701\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn 1.0.98\",\n \"unicode-xid\",\n]\n\n[[package]]\nname = \"target-lexicon\"\nversion = \"0.12.5\"\nsource = \"git+https://github.com/theseus-os/target-lexicon?branch=theseus#75d36cc66df0ac4569df1b20a16ca914f417b85a\"\n\n[[package]]\nname = \"task\"\nversion = \"0.1.0\"\ndependencies = [\n \"cls\",\n \"context_switch\",\n \"cpu\",\n \"crossbeam-utils\",\n \"environment\",\n \"irq_safety\",\n \"log\",\n \"memory\",\n \"mod_mgmt\",\n \"no_drop\",\n \"preemption\",\n \"spin 0.9.4\",\n \"stack\",\n \"static_assertions\",\n \"sync_irq\",\n \"sync_preemption\",\n \"task_struct\",\n \"waker_generic\",\n]\n\n[[package]]\nname = \"task_fs\"\nversion = \"0.1.0\"\ndependencies = [\n \"fs_node\",\n \"io\",\n \"log\",\n \"memory\",\n \"path\",\n \"root\",\n \"spin 0.9.4\",\n \"task\",\n]\n\n[[package]]\nname = \"task_struct\"\nversion = \"0.1.0\"\ndependencies = [\n \"cpu\",\n \"crossbeam-utils\",\n \"environment\",\n \"kernel_config\",\n \"log\",\n \"memory\",\n \"mod_mgmt\",\n \"spin 0.9.4\",\n \"stack\",\n \"sync_irq\",\n]\n\n[[package]]\nname = \"test_aligned_page_allocation\"\nversion = \"0.1.0\"\ndependencies = [\n \"app_io\",\n \"log\",\n \"memory\",\n]\n\n[[package]]\nname = \"test_async\"\nversion = \"0.1.0\"\ndependencies = [\n \"app_io\",\n \"dreadnought\",\n]\n\n[[package]]\nname = \"test_backtrace\"\nversion = \"0.1.0\"\ndependencies = [\n \"app_io\",\n \"backtrace\",\n \"log\",\n \"task\",\n]\n\n[[package]]\nname = \"test_block_io\"\nversion = \"0.1.0\"\ndependencies = [\n \"app_io\",\n \"ata\",\n \"core2\",\n \"io\",\n \"log\",\n \"storage_manager\",\n \"task\",\n]\n\n[[package]]\nname = \"test_channel\"\nversion = \"0.1.0\"\ndependencies = [\n \"app_io\",\n \"cpu\",\n \"getopts\",\n \"log\",\n \"rendezvous\",\n \"scheduler\",\n \"spawn\",\n \"spin 0.9.4\",\n \"sync_channel\",\n \"task\",\n]\n\n[[package]]\nname = \"test_filerw\"\nversion = \"0.1.0\"\ndependencies = [\n \"app_io\",\n \"log\",\n \"memfs\",\n \"memory\",\n \"root\",\n]\n\n[[package]]\nname = \"test_identity_mapping\"\nversion = \"0.1.0\"\ndependencies = [\n \"app_io\",\n \"log\",\n \"memory\",\n]\n\n[[package]]\nname = \"test_ixgbe\"\nversion = \"0.1.0\"\ndependencies = [\n \"app_io\",\n \"getopts\",\n \"ixgbe\",\n \"log\",\n \"net\",\n \"spawn\",\n]\n\n[[package]]\nname = \"test_libc\"\nversion = \"0.1.0\"\ndependencies = [\n \"libc\",\n \"log\",\n]\n\n[[package]]\nname = \"test_mlx5\"\nversion = \"0.1.0\"\ndependencies = [\n \"app_io\",\n \"ixgbe\",\n \"log\",\n \"mlx5\",\n]\n\n[[package]]\nname = \"test_panic\"\nversion = \"0.1.0\"\ndependencies = [\n \"app_io\",\n \"log\",\n \"task\",\n]\n\n[[package]]\nname = \"test_preemption_counter\"\nversion = \"0.1.0\"\ndependencies = [\n \"app_io\",\n \"preemption\",\n]\n\n[[package]]\nname = \"test_restartable\"\nversion = \"0.1.0\"\ndependencies = [\n \"app_io\",\n \"getopts\",\n \"log\",\n \"spawn\",\n \"spin 0.9.4\",\n]\n\n[[package]]\nname = \"test_scheduler\"\nversion = \"0.1.0\"\ndependencies = [\n \"app_io\",\n \"cpu\",\n \"log\",\n \"rand\",\n \"random\",\n \"spawn\",\n \"sync_block\",\n \"task\",\n]\n\n[[package]]\nname = \"test_std_fs\"\nversion = \"0.1.0\"\ndependencies = [\n \"app_io\",\n \"core2\",\n \"log\",\n \"theseus_std\",\n]\n\n[[package]]\nname = \"test_sync_block\"\nversion = \"0.1.0\"\ndependencies = [\n \"cpu\",\n \"log\",\n \"scheduler\",\n \"spawn\",\n \"sync_block\",\n \"task\",\n]\n\n[[package]]\nname = \"test_task_cancel\"\nversion = \"0.1.0\"\ndependencies = [\n \"log\",\n \"spawn\",\n \"spin 0.9.4\",\n \"task\",\n]\n\n[[package]]\nname = \"test_thread_local\"\nversion = \"0.1.0\"\ndependencies = [\n \"log\",\n \"spawn\",\n \"task\",\n]\n\n[[package]]\nname = \"test_tls\"\nversion = \"0.1.0\"\ndependencies = [\n \"app_io\",\n \"log\",\n \"test_thread_local\",\n \"thread_local_macro\",\n]\n\n[[package]]\nname = \"test_wait_queue\"\nversion = \"0.1.0\"\ndependencies = [\n \"app_io\",\n \"cpu\",\n \"log\",\n \"scheduler\",\n \"spawn\",\n \"spin 0.9.4\",\n \"task\",\n \"wait_condition\",\n]\n\n[[package]]\nname = \"test_wasmtime\"\nversion = \"0.1.0\"\ndependencies = [\n \"anyhow\",\n \"app_io\",\n \"getopts\",\n \"log\",\n \"path\",\n \"task\",\n \"wasmtime\",\n]\n\n[[package]]\nname = \"text_display\"\nversion = \"0.1.0\"\ndependencies = [\n \"color\",\n \"displayable\",\n \"font\",\n \"framebuffer\",\n \"framebuffer_printer\",\n \"shapes\",\n \"spin 0.9.4\",\n]\n\n[[package]]\nname = \"text_terminal\"\nversion = \"0.1.0\"\ndependencies = [\n \"bitflags 2.4.1\",\n \"core2\",\n \"derive_more\",\n \"event_types\",\n \"log\",\n \"unicode-width\",\n \"vte\",\n]\n\n[[package]]\nname = \"theseus_features\"\nversion = \"0.1.0\"\ndependencies = [\n \"bm\",\n \"cat\",\n \"cd\",\n \"channel_eval\",\n \"date\",\n \"deps\",\n \"example\",\n \"first_application\",\n \"heap_eval\",\n \"hello\",\n \"hull\",\n \"kill\",\n \"libtest\",\n \"loadc\",\n \"ls\",\n \"mkdir\",\n \"ns\",\n \"ping\",\n \"pmu_sample_start\",\n \"pmu_sample_stop\",\n \"print_fault_log\",\n \"ps\",\n \"pwd\",\n \"qemu_test\",\n \"raw_mode\",\n \"rm\",\n \"rq\",\n \"rq_eval\",\n \"scheduler_eval\",\n \"seconds_counter\",\n \"serial_echo\",\n \"shell\",\n \"swap\",\n \"test_aligned_page_allocation\",\n \"test_async\",\n \"test_backtrace\",\n \"test_block_io\",\n \"test_channel\",\n \"test_filerw\",\n \"test_identity_mapping\",\n \"test_ixgbe\",\n \"test_libc\",\n \"test_mlx5\",\n \"test_panic\",\n \"test_preemption_counter\",\n \"test_restartable\",\n \"test_scheduler\",\n \"test_std_fs\",\n \"test_sync_block\",\n \"test_task_cancel\",\n \"test_thread_local\",\n \"test_tls\",\n \"test_wait_queue\",\n \"test_wasmtime\",\n \"theseus_std\",\n \"unified_channel\",\n \"unwind_test\",\n \"upd\",\n \"wasm\",\n]\n\n[[package]]\nname = \"theseus_std\"\nversion = \"0.1.0\"\ndependencies = [\n \"core2\",\n \"fs_node\",\n \"io\",\n \"lockable\",\n \"memfs\",\n \"path\",\n \"spin 0.9.4\",\n \"task\",\n]\n\n[[package]]\nname = \"thiserror_core2\"\nversion = \"2.0.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"39f6f9e5af7ca0861a5eae30fe6e95405338f0e92c54424bb66160b01e682243\"\ndependencies = [\n \"core2\",\n \"thiserror_core2-impl\",\n]\n\n[[package]]\nname = \"thiserror_core2-impl\"\nversion = \"2.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"9c64183aeaddf559344af98f444cd2ea6685ea0136a59c17587a2c759362e523\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn 1.0.98\",\n]\n\n[[package]]\nname = \"thread_local_macro\"\nversion = \"0.1.0\"\n\n[[package]]\nname = \"time\"\nversion = \"0.1.0\"\ndependencies = [\n \"crossbeam-utils\",\n \"log\",\n]\n\n[[package]]\nname = \"tlb_shootdown\"\nversion = \"0.1.0\"\ndependencies = [\n \"apic\",\n \"cpu\",\n \"interrupts\",\n \"irq_safety\",\n \"log\",\n \"memory\",\n \"memory_aarch64\",\n \"memory_x86_64\",\n \"sync_irq\",\n]\n\n[[package]]\nname = \"tock-registers\"\nversion = \"0.7.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"4ee8fba06c1f4d0b396ef61a54530bb6b28f0dc61c38bc8bc5a5a48161e6282e\"\n\n[[package]]\nname = \"tsc\"\nversion = \"0.1.0\"\ndependencies = [\n \"log\",\n \"pit_clock_basic\",\n \"time\",\n]\n\n[[package]]\nname = \"tss\"\nversion = \"0.1.0\"\ndependencies = [\n \"atomic_linked_list\",\n \"cpu\",\n \"log\",\n \"memory\",\n \"spin 0.9.4\",\n \"x86_64\",\n]\n\n[[package]]\nname = \"tty\"\nversion = \"0.1.0\"\ndependencies = [\n \"core2\",\n \"sync_block\",\n \"sync_channel\",\n]\n\n[[package]]\nname = \"typenum\"\nversion = \"1.15.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"dcf81ac59edc17cc8697ff311e8f5ef2d99fcbd9817b34cec66f90b6c3dfd987\"\n\n[[package]]\nname = \"uart_pl011\"\nversion = \"0.1.0\"\ndependencies = [\n \"log\",\n \"memory\",\n \"volatile 0.2.7\",\n \"zerocopy\",\n]\n\n[[package]]\nname = \"uefi-bootloader-api\"\nversion = \"0.1.0\"\nsource = \"git+https://github.com/theseus-os/uefi-bootloader#661ea6245885307a3988713eeebcb7de723b7583\"\n\n[[package]]\nname = \"unicode-ident\"\nversion = \"1.0.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"5bd2fe26506023ed7b5e1e315add59d6f584c621d037f9368fea9cfb988f368c\"\n\n[[package]]\nname = \"unicode-segmentation\"\nversion = \"1.10.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1dd624098567895118886609431a7c3b8f516e41d30e0643f03d94592a147e36\"\n\n[[package]]\nname = \"unicode-width\"\nversion = \"0.1.8\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"9337591893a19b88d8d87f2cec1e73fad5cdfd10e5a6f349f498ad6ea2ffb1e3\"\n\n[[package]]\nname = \"unicode-xid\"\nversion = \"0.2.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f7fe0bb3479651439c9112f72b6c505038574c9fbb575ed1bf3b797fa39dd564\"\n\n[[package]]\nname = \"unified_channel\"\nversion = \"0.1.0\"\ndependencies = [\n \"cfg-if 0.1.10\",\n \"rendezvous\",\n \"sync_channel\",\n]\n\n[[package]]\nname = \"unreachable\"\nversion = \"1.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"382810877fe448991dfc7f0dd6e3ae5d58088fd0ea5e35189655f84e6814fa56\"\ndependencies = [\n \"void\",\n]\n\n[[package]]\nname = \"unwind\"\nversion = \"0.1.0\"\ndependencies = [\n \"external_unwind_info\",\n \"fallible-iterator\",\n \"gimli\",\n \"interrupts\",\n \"log\",\n \"memory\",\n \"mod_mgmt\",\n \"task\",\n]\n\n[[package]]\nname = \"unwind_test\"\nversion = \"0.1.0\"\ndependencies = [\n \"app_io\",\n \"catch_unwind\",\n \"log\",\n \"task\",\n]\n\n[[package]]\nname = \"upd\"\nversion = \"0.1.0\"\ndependencies = [\n \"app_io\",\n \"crate_swap\",\n \"fs_node\",\n \"getopts\",\n \"itertools\",\n \"memfs\",\n \"memory\",\n \"mod_mgmt\",\n \"net\",\n \"ota_update_client\",\n \"path\",\n \"spin 0.9.4\",\n \"task\",\n \"vfs_node\",\n]\n\n[[package]]\nname = \"utf8parse\"\nversion = \"0.2.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"711b9620af191e0cdc7468a8d14e709c3dcdb115b36f838e601583af800a370a\"\n\n[[package]]\nname = \"vcell\"\nversion = \"0.1.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"77439c1b53d2303b20d9459b1ade71a83c716e3f9c34f3228c00e6f185d6c002\"\n\n[[package]]\nname = \"version_check\"\nversion = \"0.9.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"49874b5167b65d7193b8aba1567f5c7d93d001cafc34600cee003eda787e483f\"\n\n[[package]]\nname = \"vfs_node\"\nversion = \"0.1.0\"\ndependencies = [\n \"fs_node\",\n \"log\",\n \"memory\",\n \"spin 0.9.4\",\n]\n\n[[package]]\nname = \"vga_buffer\"\nversion = \"0.1.0\"\ndependencies = [\n \"volatile 0.2.7\",\n]\n\n[[package]]\nname = \"virtual_nic\"\nversion = \"0.1.0\"\ndependencies = [\n \"intel_ethernet\",\n \"net\",\n \"nic_buffers\",\n \"nic_queues\",\n \"physical_nic\",\n \"sync_irq\",\n]\n\n[[package]]\nname = \"virtue\"\nversion = \"0.0.8\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"7b60dcd6a64dd45abf9bd426970c9843726da7fc08f44cd6fcebf68c21220a63\"\n\n[[package]]\nname = \"void\"\nversion = \"1.0.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"6a02e4885ed3bc0f2de90ea6dd45ebcbb66dacffe03547fadbb0eeae2770887d\"\n\n[[package]]\nname = \"volatile\"\nversion = \"0.2.7\"\nsource = \"git+https://github.com/theseus-os/volatile#73a307a2906c9f67fa4b951ce858d642c2fa669b\"\ndependencies = [\n \"zerocopy\",\n]\n\n[[package]]\nname = \"volatile\"\nversion = \"0.4.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e4c2dbd44eb8b53973357e6e207e370f0c1059990df850aca1eca8947cf464f0\"\n\n[[package]]\nname = \"volatile-register\"\nversion = \"0.2.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"9ee8f19f9d74293faf70901bc20ad067dc1ad390d2cbf1e3f75f721ffee908b6\"\ndependencies = [\n \"vcell\",\n]\n\n[[package]]\nname = \"vte\"\nversion = \"0.10.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"6cbce692ab4ca2f1f3047fcf732430249c0e971bfdd2b234cf2c47ad93af5983\"\ndependencies = [\n \"arrayvec\",\n \"utf8parse\",\n \"vte_generate_state_changes\",\n]\n\n[[package]]\nname = \"vte_generate_state_changes\"\nversion = \"0.1.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d257817081c7dffcdbab24b9e62d2def62e2ff7d00b1c20062551e6cccc145ff\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n]\n\n[[package]]\nname = \"waet\"\nversion = \"0.1.0\"\ndependencies = [\n \"acpi_table\",\n \"memory\",\n \"sdt\",\n \"zerocopy\",\n]\n\n[[package]]\nname = \"wait_condition\"\nversion = \"0.1.0\"\ndependencies = [\n \"wait_queue\",\n]\n\n[[package]]\nname = \"wait_guard\"\nversion = \"0.1.0\"\ndependencies = [\n \"task\",\n]\n\n[[package]]\nname = \"wait_queue\"\nversion = \"0.1.0\"\ndependencies = [\n \"mpmc_queue\",\n \"preemption\",\n \"scheduler\",\n \"sync\",\n \"sync_spin\",\n \"task\",\n]\n\n[[package]]\nname = \"waker\"\nversion = \"0.1.0\"\ndependencies = [\n \"spin 0.9.4\",\n \"task\",\n \"waker_generic\",\n]\n\n[[package]]\nname = \"waker_generic\"\nversion = \"0.1.0\"\ndependencies = [\n \"preemption\",\n \"spin 0.9.4\",\n]\n\n[[package]]\nname = \"wasi\"\nversion = \"0.10.0+wasi-snapshot-preview1\"\nsource = \"git+https://github.com/bytecodealliance/wasi?rev=45536ac956a6211e3cff047f36cf19d6da82fd95#45536ac956a6211e3cff047f36cf19d6da82fd95\"\n\n[[package]]\nname = \"wasi\"\nversion = \"0.10.2+wasi-snapshot-preview1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"fd6fbd9a79829dd1ad0cc20627bf1ed606756a7f77edff7b66b7064f9cb327c6\"\n\n[[package]]\nname = \"wasi_interpreter\"\nversion = \"0.1.0\"\ndependencies = [\n \"app_io\",\n \"core2\",\n \"fs_node\",\n \"hashbrown\",\n \"memfs\",\n \"path\",\n \"root\",\n \"task\",\n \"wasi 0.10.0+wasi-snapshot-preview1\",\n \"wasmi\",\n]\n\n[[package]]\nname = \"wasm\"\nversion = \"0.1.0\"\ndependencies = [\n \"app_io\",\n \"fs_node\",\n \"getopts\",\n \"path\",\n \"task\",\n \"wasi_interpreter\",\n]\n\n[[package]]\nname = \"wasmi\"\nversion = \"0.9.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ca00c5147c319a8ec91ec1a0edbec31e566ce2c9cc93b3f9bb86a9efd0eb795d\"\ndependencies = [\n \"downcast-rs\",\n \"libm\",\n \"memory_units\",\n \"num-rational\",\n \"num-traits\",\n \"parity-wasm\",\n \"wasmi-validation\",\n]\n\n[[package]]\nname = \"wasmi-validation\"\nversion = \"0.4.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"165343ecd6c018fc09ebcae280752702c9a2ef3e6f8d02f1cfcbdb53ef6d7937\"\ndependencies = [\n \"parity-wasm\",\n]\n\n[[package]]\nname = \"wasmparser\"\nversion = \"0.81.0\"\nsource = \"git+https://github.com/theseus-os/wasm-tools?branch=no-std-wasmparser#7b0eb0d074606c8a49027e60e452862f5fe183b4\"\ndependencies = [\n \"hashbrown\",\n]\n\n[[package]]\nname = \"wasmtime\"\nversion = \"0.30.0\"\ndependencies = [\n \"anyhow\",\n \"backtrace\",\n \"bincode\",\n \"catch_unwind\",\n \"cfg-if 1.0.0\",\n \"core2\",\n \"cpp_demangle\",\n \"hashbrown\",\n \"indexmap\",\n \"lazy_static\",\n \"libc\",\n \"log\",\n \"object\",\n \"paste\",\n \"psm\",\n \"region\",\n \"rustc-demangle\",\n \"serde\",\n \"sync_block\",\n \"target-lexicon\",\n \"theseus_std\",\n \"wasmparser\",\n \"wasmtime-environ\",\n \"wasmtime-jit\",\n \"wasmtime-runtime\",\n \"winapi\",\n]\n\n[[package]]\nname = \"wasmtime-environ\"\nversion = \"0.30.0\"\ndependencies = [\n \"anyhow\",\n \"cfg-if 1.0.0\",\n \"core2\",\n \"cranelift-entity\",\n \"gimli\",\n \"hashbrown\",\n \"indexmap\",\n \"log\",\n \"more-asserts\",\n \"object\",\n \"serde\",\n \"target-lexicon\",\n \"thiserror_core2\",\n \"wasmparser\",\n \"wasmtime-types\",\n]\n\n[[package]]\nname = \"wasmtime-jit\"\nversion = \"0.30.0\"\ndependencies = [\n \"addr2line\",\n \"anyhow\",\n \"bincode\",\n \"cfg-if 1.0.0\",\n \"core2\",\n \"external_unwind_info\",\n \"gimli\",\n \"log\",\n \"more-asserts\",\n \"object\",\n \"region\",\n \"serde\",\n \"target-lexicon\",\n \"theseus_std\",\n \"thiserror_core2\",\n \"wasmparser\",\n \"wasmtime-environ\",\n \"wasmtime-runtime\",\n \"winapi\",\n]\n\n[[package]]\nname = \"wasmtime-runtime\"\nversion = \"0.30.0\"\ndependencies = [\n \"anyhow\",\n \"backtrace\",\n \"catch_unwind\",\n \"cc\",\n \"cfg-if 1.0.0\",\n \"core2\",\n \"hashbrown\",\n \"indexmap\",\n \"lazy_static\",\n \"libc\",\n \"log\",\n \"mach\",\n \"memoffset 0.6.5\",\n \"memory\",\n \"more-asserts\",\n \"rand\",\n \"region\",\n \"signal_handler\",\n \"spin 0.9.4\",\n \"sync_block\",\n \"task\",\n \"theseus_std\",\n \"thiserror_core2\",\n \"thread_local_macro\",\n \"wasmtime-environ\",\n \"winapi\",\n]\n\n[[package]]\nname = \"wasmtime-types\"\nversion = \"0.30.0\"\ndependencies = [\n \"core2\",\n \"cranelift-entity\",\n \"serde\",\n \"thiserror_core2\",\n \"wasmparser\",\n]\n\n[[package]]\nname = \"winapi\"\nversion = \"0.3.9\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"5c839a674fcd7a98952e593242ea400abe93992746761e38641405d28b00f419\"\ndependencies = [\n \"winapi-i686-pc-windows-gnu\",\n \"winapi-x86_64-pc-windows-gnu\",\n]\n\n[[package]]\nname = \"winapi-i686-pc-windows-gnu\"\nversion = \"0.4.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ac3b87c63620426dd9b991e5ce0329eff545bccbbb34f3be09ff6fb6ab51b7b6\"\n\n[[package]]\nname = \"winapi-x86_64-pc-windows-gnu\"\nversion = \"0.4.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"712e227841d057c1ee1cd2fb22fa7e5a5461ae8e48fa2ca79ec42cfc1931183f\"\n\n[[package]]\nname = \"window\"\nversion = \"0.1.0\"\ndependencies = [\n \"color\",\n \"dereffer\",\n \"event_types\",\n \"framebuffer\",\n \"framebuffer_drawer\",\n \"log\",\n \"mouse\",\n \"mpmc\",\n \"path\",\n \"shapes\",\n \"spawn\",\n \"spin 0.9.4\",\n \"window_inner\",\n \"window_manager\",\n]\n\n[[package]]\nname = \"window_inner\"\nversion = \"0.1.0\"\ndependencies = [\n \"event_types\",\n \"framebuffer\",\n \"mpmc\",\n \"shapes\",\n]\n\n[[package]]\nname = \"window_manager\"\nversion = \"0.1.0\"\ndependencies = [\n \"color\",\n \"compositor\",\n \"event_types\",\n \"font\",\n \"framebuffer\",\n \"framebuffer_compositor\",\n \"framebuffer_drawer\",\n \"keycodes_ascii\",\n \"lazy_static\",\n \"log\",\n \"mod_mgmt\",\n \"mouse_data\",\n \"mpmc\",\n \"path\",\n \"scheduler\",\n \"shapes\",\n \"spawn\",\n \"spin 0.9.4\",\n \"window_inner\",\n]\n\n[[package]]\nname = \"x86_64\"\nversion = \"0.14.9\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"958cd5cb28e720db2f59ee9dc4235b5f82a183d079fb0e6caf43ad074cfdc66a\"\ndependencies = [\n \"bit_field 0.10.1\",\n \"bitflags 1.3.2\",\n \"rustversion\",\n \"volatile 0.4.4\",\n]\n\n[[package]]\nname = \"xmas-elf\"\nversion = \"0.6.2\"\nsource = \"git+https://github.com/theseus-os/xmas-elf.git#635d55f6886ae3fe0ec8a78e0bcc1238224c903d\"\ndependencies = [\n \"zero\",\n]\n\n[[package]]\nname = \"zero\"\nversion = \"0.1.3\"\nsource = \"git+https://github.com/theseus-os/zero.git#9fc7ff523138a21f40359b706d2d6bf91deafc62\"\n\n[[package]]\nname = \"zerocopy\"\nversion = \"0.5.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"5e59ec1d2457bd6c0dd89b50e7d9d6b0b647809bf3f0a59ac85557046950b7b2\"\ndependencies = [\n \"byteorder\",\n \"zerocopy-derive\",\n]\n\n[[package]]\nname = \"zerocopy-derive\"\nversion = \"0.3.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"0af017aca1fa6181f5dd7a802456fe6f7666ecdcc18d0910431f0fc89d474e51\"\ndependencies = [\n \"proc-macro2\",\n \"syn 1.0.98\",\n \"synstructure\",\n]\n"
        },
        {
          "name": "Cargo.toml",
          "type": "blob",
          "size": 5.2900390625,
          "content": "[workspace]\nresolver = \"2\"\n\n\n## Here, we specify that all subdirectories in the kernel/ and applications/ directories should be built, \n## except for those starting with a \".\" So, we build all kernel and application crates except hidden directories.\n##\n## The `members` field of this workspace is used to specify all of the crates that are built\n## when the entire workspace is built, e.g., with `cargo build --workspace` or `cargo build --all`.\n##\n## Note that a full workspace build will *not* include crates that are explicitly excluded below.\nmembers = [\n\t\"theseus_features\",  ## Must be included to realize global Cargo features across Theseus.\n\t\"kernel/[!.]*/\",\n\t\"applications/[!.]*/\",\n]\n\n\n## Default members are the crates built by default if no specific packages (crates)\n## are specified when invoking `cargo build`.\n## Currently, this is only relevant when overriding the Makefile's default `FEATURES`,\n## which has the default value of `--workspace`, ensuring that all `members` above \n## are built even when `FEATURES` is explicitly set when invoking `make`.\n##\n## So far, this includes only the minimum crates required to allow Theseus to boot.\ndefault-members = [\n\t\"theseus_features\",  ## Must be included to realize global Cargo features across Theseus.\n\t\"kernel/nano_core\",\n]\n\n\nexclude = [\n\t## Exclude the build directories\n\t\"build\",\n\t\"target\",\n\n\t## Exclude configuration, tools, scripts, etc\n\t\"cfg\",\n\t\"compiler_plugins\",\n\t\"scripts\",\n\t\"tools\",\n\n\t## Exclude old components\n\t\"old_crates\",\n\n\t## Exclude third-party libs and ports for now.\n\t## This allows Theseus crates that *are* included in a build to pull these\n\t## third-party crates in only when needed to fulfill their dependencies.\n\t\"libs\",\n\t\"ports\",\n\n\t## Exclude tlibc and libtheseus, which are currently built separately.\n\t\"tlibc\",\n\t\"libtheseus\",\n\n\t########################################################################################\n\t## Below, we exclude things that should NEVER be considered part of Theseus's workspace.\n\t########################################################################################\n\t##\n\t## Note that if you simply need to exclude something from a custom build of Theseus,\n\t## it's best to add that crate as an optional dependency and then create a feature\n\t## to enable it in a non-workspace build (i.e., when not calling `cargo build --all`).\n\n\t## Exclude kernel crates that exist purely for testing or benchmarking purposes.\n\t\"kernel/libtest\",\n\t\"kernel/test_thread_local\",\n\t\"kernel/unified_channel\",\n\n\t## Exclude benchmark-related crates in all builds; they must be explicitly included via features.\n\t## TODO: move these to a specific \"benches\" folder so we can exclude that entire folder.\n\t\"applications/bm\",\n\t\"applications/channel_eval\",\n\t\"applications/heap_eval\",\n\t\"applications/rq_eval\",\n\t\"applications/scheduler_eval\",\n\n\t## Exclude application crates used for testing specific Theseus functionality.\n\t## TODO: move these to a specific \"tests\" folder so we can exclude that entire folder.\n\t\"applications/test_aligned_page_allocation\",\n\t\"applications/test_async\",\n\t\"applications/test_backtrace\",\n\t\"applications/test_block_io\",\n\t\"applications/test_channel\",\n\t\"applications/test_filerw\",\n\t\"applications/test_identity_mapping\",\n\t\"applications/test_ixgbe\",\n\t\"applications/test_libc\",\n\t\"applications/test_mlx5\",\n\t\"applications/test_panic\",\n\t\"applications/test_preemption_counter\",\n\t\"applications/test_restartable\",\n\t\"applications/test_scheduler\",\n\t\"applications/test_std_fs\",\n\t\"applications/test_sync_block\",\n\t\"applications/test_task_cancel\",\n\t\"applications/test_tls\",\n\t\"applications/test_wait_queue\",\n\t\"applications/test_wasmtime\",\n\t\"applications/unwind_test\",\n]\n\n\n[patch.crates-io]\n### use our own version of volatile which supports zerocopy\nvolatile = { git = \"https://github.com/theseus-os/volatile\" }\n### use our own no_std-compatilbe getopts\ngetopts = { git = \"https://github.com/theseus-os/getopts\" }\n\n### Patch `libc` so we can use libc-specific types when using `cfg(target_os = \"theseus\")`.\nlibc = { git = \"https://github.com/theseus-os/libc\", branch = \"theseus\" }\n### Patch `core2` with newer functions from `std::io`, e.g., additional `Seek` trait functions\ncore2 = { path = \"libs/core2\" }\n### Patch `bincode` because the version on crates.io doesn't handle no_std features correctly.\nbincode = { git = \"https://github.com/bincode-org/bincode\" }\n\n##############################################################################################\n#################### Below are patches for wasmtime-related crates. ##########################\n##############################################################################################\nwasmparser = { git = \"https://github.com/theseus-os/wasm-tools\", branch = \"no-std-wasmparser\" }\nbacktrace = { path = \"ports/backtrace\" }\nregion = { path = \"ports/region\" }\nnoline = { git = \"https://github.com/theseus-os/noline\", branch = \"history-dedup\" }\ntarget-lexicon = { git = \"https://github.com/theseus-os/target-lexicon\", branch = \"theseus\" }\n\n### These profiles fix the new rustc behavior of splitting one crate into many object files. \n### That messes up our module loading, which is bad!\n### See this link about profiles: https://doc.rust-lang.org/cargo/reference/manifest.html\n# workaround rust-lang/rust#47074\n[profile.dev]\ncodegen-units = 1\nincremental = false\n\n# workaround rust-lang/rust#47074\n[profile.release]\ncodegen-units = 1\nincremental = false\n"
        },
        {
          "name": "LICENSE-MIT",
          "type": "blob",
          "size": 1.0517578125,
          "content": "The MIT License (MIT)\n\nCopyright (c) 2017 Kevin Boos\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n"
        },
        {
          "name": "Makefile",
          "type": "blob",
          "size": 50.7509765625,
          "content": "### This makefile is the top-level build script that builds all the crates in subdirectories \n### and combines them into the final OS .iso image.\n### It also provides convenient targets for running and debugging Theseus and using GDB on your host computer.\nSHELL := /usr/bin/env bash\n\n## Disable parallelism for this Makefile since it breaks the build,\n## as our dependencies aren't perfectly specified for each target.\n## Cargo already handles build parallelism for us anyway.\n.NOTPARALLEL:\n\n## Override the locale as building on non-English systems may fail.\n## Or even worse: it might build, but not boot.\n## Overriding LC_ALL instead throws bash warnings.\n## C.UTF-8 should be available on all modern glibc systems.\nexport override LANG=\"C.UTF-8\"\n\n## most of the variables used below are defined in Config.mk\ninclude cfg/Config.mk\n\n## By default, we just build the standard OS image via the `iso` target.\n.DEFAULT_GOAL := iso\n\n## Default values for various configuration options.\ndebug ?= none\nnet ?= none\nmerge_sections ?= yes\nbootloader ?= grub\n\n## aarch64 only supports booting via UEFI\nifeq ($(ARCH),aarch64)\n\tboot_spec = uefi\nelse\n\tboot_spec ?= bios\nendif\n\n## Set up configuration based on the chosen bootloader specification (boot_spec).\nexport override FEATURES+=--features nano_core/$(boot_spec)\n\nifeq ($(boot_spec), bios)\n\tISO_EXTENSION := iso\nelse ifeq ($(boot_spec), uefi)\n\t## Disable the default \"bios\" feature of the nano_core\n\texport override FEATURES+=--no-default-features\n\tISO_EXTENSION := efi\nelse\n$(error Error:unsupported option \"boot_spec=$(boot_spec)\". Options are 'bios' or 'uefi')\nendif\n\n## test for Windows Subsystem for Linux (Linux on Windows)\nIS_WSL = $(shell grep -is 'microsoft' /proc/version)\n\n\n###################################################################################################\n### Basic directory/file path definitions used throughout the makefile.\n###################################################################################################\nBUILD_DIR               := $(ROOT_DIR)/build\nNANO_CORE_BUILD_DIR     := $(BUILD_DIR)/nano_core\niso                     := $(BUILD_DIR)/theseus-$(ARCH).$(ISO_EXTENSION)\nISOFILES                := $(BUILD_DIR)/isofiles\nOBJECT_FILES_BUILD_DIR  := $(ISOFILES)/modules\nDEBUG_SYMBOLS_DIR       := $(BUILD_DIR)/debug_symbols\nTARGET_DEPS_DIR         := $(ROOT_DIR)/target/$(TARGET)/$(BUILD_MODE)/deps\nDEPS_BUILD_DIR          := $(BUILD_DIR)/deps\nHOST_DEPS_DIR           := $(DEPS_BUILD_DIR)/host_deps\nDEPS_SYSROOT_DIR        := $(DEPS_BUILD_DIR)/sysroot\nTHESEUS_BUILD_TOML      := $(DEPS_BUILD_DIR)/TheseusBuild.toml\nTHESEUS_CARGO           := $(ROOT_DIR)/tools/theseus_cargo\nTHESEUS_CARGO_BIN       := $(THESEUS_CARGO)/bin/theseus_cargo\nEXTRA_FILES             := $(ROOT_DIR)/extra_files\nLIMINE_DIR              := $(ROOT_DIR)/limine-prebuilt\n\n\n### Set up tool names/locations for cross-compiling on a Mac OS / macOS host (Darwin).\nUNAME = $(shell uname -s)\nifeq ($(UNAME),Darwin)\n\tCROSS = $(ARCH)-elf-\n\t## macOS uses a different unmounting utility\n\tUNMOUNT = diskutil unmount\n\tUSB_DRIVES = $(shell diskutil list external | grep -s \"/dev/\" | awk '{print $$1}')\nelse ifeq ($(UNAME),FreeBSD)\n\tUNMOUNT = umount\n\tUSB_DRIVES = $(shell usbconfig list | awk -F':' '{print $$1}')\nelse\n\t## Handle building for aarch64 on x86_64 Linux/WSL\n\tifeq ($(ARCH),aarch64)\n\t\tCROSS = aarch64-linux-gnu-\n\tendif\n\t## Just use normal umount on Linux/WSL\n\tUNMOUNT = umount\n\tUSB_DRIVES = $(shell lsblk -O | grep -i usb | awk '{print $$2}' | grep --color=never '[^0-9]$$')\nendif\n\n### Handle multiple bootloader options and ensure the corresponding tools are installed.\nifeq ($(boot_spec),uefi)\n\t## A bootloader isn't required with UEFI.\nelse ifeq ($(bootloader),grub)\n\t## Look for `grub-mkrescue` (Debian-like distros) or `grub2-mkrescue` (Fedora)\n\tifneq (,$(shell command -v grub-mkrescue))\n\t\tGRUB_MKRESCUE = grub-mkrescue\n\telse ifneq (,$(shell command -v grub2-mkrescue))\n\t\tGRUB_MKRESCUE = grub2-mkrescue\n\telse\n$(error Error: could not find 'grub-mkrescue' or 'grub2-mkrescue', please install 'grub' or 'grub2')\n\tendif\nelse ifeq ($(bootloader),limine)\n\t## Check if the limine directory exists. \n\tifneq (,$(wildcard $(LIMINE_DIR)/.))\n\t\texport override FEATURES += --features extract_boot_modules\n\telse\n$(error Error: missing '$(LIMINE_DIR)' directory! Please follow the limine instructions in the README)\n\tendif\nelse\n$(error Error: unsupported option \"bootloader=$(bootloader)\". Options are 'grub' or 'limine')\nendif\n\n\n###################################################################################################\n### This section contains targets to actually build Theseus components and create an iso file.\n###################################################################################################\n\n## The linker script applied to each output file in $(OBJECT_FILES_BUILD_DIR).\npartial_relinking_script := cfg/partial_linking_combine_sections.ld\n## The default file path where cargo outputs the nano_core's static library.\nnano_core_static_lib := $(ROOT_DIR)/target/$(TARGET)/$(BUILD_MODE)/libnano_core.a\n## The output file path of the fully-linked nano_core kernel binary.\nnano_core_binary := $(NANO_CORE_BUILD_DIR)/nano_core-$(ARCH).bin\n## The linker script for linking the `nano_core_binary` with the compiled assembly files.\nlinker_script := $(ROOT_DIR)/kernel/nano_core/linker_higher_half-$(ARCH).ld\nefi_firmware := $(BUILD_DIR)/$(OVMF_FILE)\n\nifeq ($(ARCH),x86_64)\n## The assembly files compiled by the nano_core build script.\ncompiled_nano_core_asm := $(NANO_CORE_BUILD_DIR)/compiled_asm/$(boot_spec)/*.o\nendif\n\n## Specify which crates should be considered as application-level libraries. \n## These crates can be instantiated multiply (per-task, per-namespace) rather than once (system-wide);\n## they will only be multiply instantiated if they have data/bss sections.\n## Ideally we would do this with a script that analyzes dependencies to see if a crate is only used by application crates,\n## but I haven't had time yet to develop that script. It would be fairly straightforward using a tool like `cargo deps`. \n## So, for now, we just do it manually.\n## You can execute this to view dependencies to help you out:\n## `cd kernel/nano_core && cargo deps --include-orphans --no-transitive-deps | dot -Tpdf > /tmp/graph.pdf && xdg-open /tmp/graph.pdf`\nEXTRA_APP_CRATE_NAMES += getopts unicode_width\n\n# get all the subdirectories in applications/, i.e., the list of application crates\nAPP_CRATE_NAMES := $(notdir $(wildcard applications/*))\n# exclude the build directory \nAPP_CRATE_NAMES := $(filter-out build/. target/., $(APP_CRATE_NAMES))\n# exclude hidden directories starting with a \".\"\nAPP_CRATE_NAMES := $(filter-out .*/, $(APP_CRATE_NAMES))\n# remove the trailing /. on each name\nAPP_CRATE_NAMES := $(patsubst %/., %, $(APP_CRATE_NAMES))\nAPP_CRATE_NAMES += $(EXTRA_APP_CRATE_NAMES)\n\n\n### PHONY is the list of targets that *always* get rebuilt regardless of dependent files' modification timestamps.\n### Most targets are PHONY because cargo itself handles whether or not to rebuild the Rust code base.\n.PHONY: all full \\\n\t\tcheck-usb \\\n\t\tclean clean-doc clean-old-build \\\n\t\torun orun_pause run run_pause iso build cargo copy_kernel $(bootloader) extra_files \\\n\t\tlibtheseus \\\n\t\tsimd_personality_sse build_sse simd_personality_avx build_avx \\\n\t\tgdb gdb_aarch64 \\\n\t\tclippy doc docs view-doc view-docs book view-book\n\n\n### If we compile for SIMD targets newer than SSE (e.g., AVX or newer),\n### then we need to define a preprocessor variable \n### that will cause the AVX flag to be enabled in the boot-up assembly code. \nifneq (,$(findstring avx,$(TARGET)))\nexport override CFLAGS+=-DENABLE_AVX\nendif\n\n\n### Convert `THESEUS_CONFIG` values into `RUSTFLAGS` by prepending \"--cfg \" to each one.\n### Note: this change to RUSTFLAGS is exported as an external shell environment variable\n###       in order to make it easy to pass to sub-make invocations.\n###       However, this means we must not explicitly not use it for `cargo run` tool invocations,\n###       because those should be built as normal for the host OS environment.\nexport override RUSTFLAGS += $(patsubst %,--cfg %, $(THESEUS_CONFIG))\n\n\n### Convenience targets for building the entire Theseus workspace\n### with all optional components included. \n### See `theseus_features/src/lib.rs` for more details on what this includes.\nall: full\nfull : export override FEATURES += --features theseus_features/everything\nifeq (,$(findstring --workspace,$(FEATURES)))\nfull : export override FEATURES += --workspace\nendif\nfull: iso\n\n\n### Convenience target for building the ISO using the below $(iso) target\niso: $(iso)\n\n### This target builds an .iso OS image from all of the compiled crates.\n$(iso): clean-old-build build extra_files copy_kernel $(iso)-$(boot_spec)\n\n## This target is invoked by the '$(iso)' target when boot_spec = 'bios'.\n$(iso)-bios: $(bootloader)\n\n## This target is invoked by the '$(iso)' target when boot_spec = 'uefi'.\n$(iso)-uefi: $(efi_firmware)\n\t@cargo run \\\n\t\t--release \\\n\t\t-Z bindeps \\\n\t\t--manifest-path $(ROOT_DIR)/tools/uefi_builder/$(ARCH)/Cargo.toml -- \\\n\t\t--kernel $(nano_core_binary) \\\n\t\t--modules $(OBJECT_FILES_BUILD_DIR) \\\n\t\t--efi-image $(iso)\n\n## Copy the kernel boot image into the proper ISOFILES directory.\n## Should be invoked after building all Theseus kernel/application crates.\ncopy_kernel:\n\t@mkdir -p $(ISOFILES)/boot/\n\t@cp $(nano_core_binary) $(ISOFILES)/boot/kernel.bin\n\n\n## This first invokes the make target that runs the actual compiler, and then copies all object files into the build dir.\n## This also classifies crate object files into either \"application\" or \"kernel\" crates:\n## -- an application crate is any executable application in the `applications/` directory, or a library crate that is ONLY used by other applications,\n## -- a kernel crate is any crate in the `kernel/` directory, or any other crates that are used by kernel crates.\n## Obviously, if a crate is used by both other application crates and by kernel crates, it is still a kernel crate. \n## Then, we give all kernel crate object files the KERNEL_PREFIX and all application crate object files the APP_PREFIX.\nbuild: $(nano_core_binary)\n## Here, the main Rust build has just occurred.\n##\n## First, if an .rlib archive contains multiple object files, we need to extract them all out of the archive\n## and combine them into one object file using partial linking (`ld -r ...`), overwriting the rustc-emitted .o file.\n## Note: we skip \"normal\" .rlib archives that have 2 members: a single .o object file and a single .rmeta file.\n## Note: the below line with `cut` simply removes the `lib` prefix and the `.rlib` suffix from the file name.\n\t@for f in $(shell find $(TARGET_DEPS_DIR)/ -name \"*.rlib\"); do                                          \\\n\t\tif [ `$(CROSS)ar -t $${f} | wc -l` != \"2\" ]; then                                                   \\\n\t\t\techo -e \"\\033[1;34mUnarchiving multi-file rlib: \\033[0m $${f}\"                                  \\\n\t\t\t\t&& mkdir -p \"$(BUILD_DIR)/extracted_rlibs/`basename $${f}`-unpacked/\"                       \\\n\t\t\t\t&& $(CROSS)ar -xo --output \"$(BUILD_DIR)/extracted_rlibs/`basename $${f}`-unpacked/\" $${f}  \\\n\t\t\t\t&& $(CROSS)ld -r                                                                            \\\n\t\t\t\t\t--output \"$(TARGET_DEPS_DIR)/`basename $${f} | cut -c 4- | rev | cut -c 6- | rev`.o\"    \\\n\t\t\t\t\t$$(find $(BUILD_DIR)/extracted_rlibs/$$(basename $${f})-unpacked/ -name \"*.o\")        ; \\\n\t\tfi  &                                                                                               \\\n\tdone; wait\n\n## Second, copy all object files into the main build directory and prepend the kernel or app prefix appropriately. \n\t@RUSTFLAGS=\"\" cargo run --release --manifest-path $(ROOT_DIR)/tools/copy_latest_crate_objects/Cargo.toml -- \\\n\t\t-i \"$(TARGET_DEPS_DIR)\" \\\n\t\t--output-objects $(OBJECT_FILES_BUILD_DIR) \\\n\t\t--output-deps $(DEPS_BUILD_DIR) \\\n\t\t--output-sysroot $(DEPS_SYSROOT_DIR)/lib/rustlib/$(TARGET)/lib \\\n\t\t-k ./kernel \\\n\t\t-a ./applications \\\n\t\t--kernel-prefix $(KERNEL_PREFIX) \\\n\t\t--app-prefix $(APP_PREFIX) \\\n\t\t-e \"$(EXTRA_APP_CRATE_NAMES) libtheseus\"\n\n## Third, perform partial linking on each object file, which shrinks their size \n## and most importantly, accelerates their loading and linking at runtime.\n## We also remove the unnecessary GCC_except_table* symbols from the symbol tables.\nifeq ($(merge_sections),yes)\n\t@for f in $(OBJECT_FILES_BUILD_DIR)/*.o ; do                                  \\\n\t\t$(CROSS)ld -r -T $(partial_relinking_script) $${f} -o $${f}_relinked      \\\n\t\t\t&& mv $${f}_relinked $${f}                                            \\\n\t\t\t&& $(CROSS)strip --wildcard --strip-symbol=GCC_except_table* $${f}  & \\\n\tdone; wait\nelse ifeq ($(merge_sections),no)\n# do nothing, leave the object files as is, with separate function/data sections\nelse\n$(error Error: unsupported option \"merge_sections=$(merge_sections)\". Options are 'yes' or 'no')\nendif\n\n## Fourth, create the items needed for future out-of-tree builds that depend upon the parameters of this current build. \n## This includes the target file, host OS dependencies (proc macros, etc)., \n## and most importantly, a TOML file to describe these and other config variables.\n\t@rm -rf $(THESEUS_BUILD_TOML)\n\t@cp -f $(CFG_DIR)/$(TARGET).json  $(DEPS_BUILD_DIR)/\n\t@mkdir -p $(HOST_DEPS_DIR)\n\t@cp -rf ./target/$(BUILD_MODE)/deps/*  $(HOST_DEPS_DIR)/\n\t@echo -e 'target = \"$(TARGET)\"' >> $(THESEUS_BUILD_TOML)\n\t@echo -e 'sysroot = \"./sysroot\"' >> $(THESEUS_BUILD_TOML)\n\t@echo -e 'rustflags = \"$(RUSTFLAGS)\"' >> $(THESEUS_BUILD_TOML)\n\t@echo -e 'cargoflags = \"$(CARGOFLAGS)\"' >> $(THESEUS_BUILD_TOML)\n\t@echo -e 'features = \"$(FEATURES)\"' >> $(THESEUS_BUILD_TOML)\n\t@echo -e 'host_deps = \"./host_deps\"' >> $(THESEUS_BUILD_TOML)\n\n## Fifth, strip debug information if requested. This reduces object file size, improving load times and reducing memory usage.\n\t@mkdir -p $(DEBUG_SYMBOLS_DIR)\nifeq ($(debug),full)\n# don't strip any files\nelse ifeq ($(debug),none)\n# strip all files\n\t@for f in $(OBJECT_FILES_BUILD_DIR)/*.o $(nano_core_binary) ; do \\\n\t\tdbg_file=$(DEBUG_SYMBOLS_DIR)/`basename $${f}`.dbg           \\\n\t\t\t&& cp $${f} $${dbg_file}                                 \\\n\t\t\t&& $(CROSS)strip  --only-keep-debug  $${dbg_file}        \\\n\t\t\t&& $(CROSS)strip  --strip-debug      $${f}             & \\\n\tdone; wait\nelse ifeq ($(debug),base)\n# strip all object files but the base kernel\n\t@for f in $(OBJECT_FILES_BUILD_DIR)/*.o ; do                     \\\n\t\tdbg_file=$(DEBUG_SYMBOLS_DIR)/`basename $${f}`.dbg           \\\n\t\t\t&& cp $${f} $${dbg_file}                                 \\\n\t\t\t&& $(CROSS)strip  --only-keep-debug  $${dbg_file}        \\\n\t\t\t&& $(CROSS)strip  --strip-debug      $${f}             & \\\n\tdone; wait\nelse\n$(error Error: unsupported option \"debug=$(debug)\". Options are 'full', 'none', or 'base')\nendif\n\n## Sixth, fix up CPU local sections.\n\t@echo -e \"Parsing CPU local sections\"\n\t@cargo run --release --manifest-path $(ROOT_DIR)/tools/elf_cls/Cargo.toml -- $(ARCH) --dir $(OBJECT_FILES_BUILD_DIR)\n\n#############################\n### end of \"build\" target ###\n#############################\n\n\n\n## This target invokes the actual Rust build process via `cargo`.\ncargo:\n\t@mkdir -p $(BUILD_DIR)\n\t@mkdir -p $(NANO_CORE_BUILD_DIR)\n\t@mkdir -p $(OBJECT_FILES_BUILD_DIR)\n\t@mkdir -p $(DEPS_BUILD_DIR)\n\nifneq (,$(findstring vga_text_mode, $(THESEUS_CONFIG)))\n\t$(eval CFLAGS += -DVGA_TEXT_MODE)\nendif\n\n\t@echo -e \"\\n=================== BUILDING ALL CRATES ===================\"\n\t@echo -e \"\\t TARGET: \\\"$(TARGET)\\\"\"\n\t@echo -e \"\\t KERNEL_PREFIX: \\\"$(KERNEL_PREFIX)\\\"\"\n\t@echo -e \"\\t APP_PREFIX: \\\"$(APP_PREFIX)\\\"\"\n\t@echo -e \"\\t CFLAGS: \\\"$(CFLAGS)\\\"\"\n\t@echo -e \"\\t THESEUS_CONFIG (before build.rs script): \\\"$(THESEUS_CONFIG)\\\"\"\n\tTHESEUS_CFLAGS='$(CFLAGS)' THESEUS_NANO_CORE_BUILD_DIR='$(NANO_CORE_BUILD_DIR)' RUST_TARGET_PATH='$(CFG_DIR)' RUSTFLAGS='$(RUSTFLAGS)' cargo build $(CARGOFLAGS) $(FEATURES) $(BUILD_STD_CARGOFLAGS) --target $(TARGET)\n\n## We tried using the \"cargo rustc\" command here instead of \"cargo build\" to avoid cargo unnecessarily rebuilding core/alloc crates,\n## But it doesn't really seem to work (it's not the cause of cargo rebuilding everything).\n## For the \"cargo rustc\" command below, all of the arguments to cargo come before the \"--\",\n## whereas all of the arguments to rustc come after the \"--\".\n# \tfor kd in $(KERNEL_CRATE_NAMES) ; do  \\\n# \t\tcd $${kd} ; \\\n# \t\techo -e \"\\n========= BUILDING KERNEL CRATE $${kd} ==========\\n\" ; \\\n# \t\tRUST_TARGET_PATH='$(CFG_DIR)' RUSTFLAGS='$(RUSTFLAGS)' \\\n# \t\t\tcargo rustc \\\n# \t\t\t$(CARGOFLAGS) \\\n# \t\t\t$(RUST_FEATURES) \\\n# \t\t\t--target $(TARGET) ; \\\n# \t\tcd .. ; \\\n# \tdone\n# for app in $(APP_CRATE_NAMES) ; do  \\\n# \tcd $${app} ; \\\n# \tRUST_TARGET_PATH='$(CFG_DIR)' RUSTFLAGS='$(RUSTFLAGS)' \\\n# \t\tcargo rustc \\\n# \t\t$(CARGOFLAGS) \\\n# \t\t--target $(TARGET) \\\n# \t\t-- \\\n# \t\t$(COMPILER_LINTS) ; \\\n# \tcd .. ; \\\n# done\n\n\n## This builds the nano_core binary itself, which is the fully-linked code that first runs right after the bootloader\n$(nano_core_binary): cargo $(nano_core_static_lib) $(linker_script)\n\t$(CROSS)ld -n -T $(linker_script) -o $(nano_core_binary) $(compiled_nano_core_asm) $(nano_core_static_lib)\n## Fix up CLS sections.\n\tcargo run --release --manifest-path $(ROOT_DIR)/tools/elf_cls/Cargo.toml -- $(ARCH) --file $(nano_core_binary)\n## Dump readelf output for verification. See pull request #542 for more details:\n##\t@RUSTFLAGS=\"\" cargo run --release --manifest-path $(ROOT_DIR)/tools/demangle_readelf_file/Cargo.toml \\\n##\t\t<($(CROSS)readelf -s -W $(nano_core_binary) | sed '/OBJECT  LOCAL .* str\\./d;/NOTYPE  LOCAL  /d;/FILE    LOCAL  /d;/SECTION LOCAL  /d;') \\\n## \t\t>  $(ROOT_DIR)/readelf_output\n## run \"readelf\" on the nano_core binary, remove irrelevant LOCAL symbols from the ELF file, demangle it, serialize it, and then output to a serde file\n\t@RUSTFLAGS=\"\" cargo run --release --manifest-path $(ROOT_DIR)/tools/serialize_nano_core/Cargo.toml \\\n\t\t<(RUSTFLAGS=\"\" cargo run --release --manifest-path $(ROOT_DIR)/tools/demangle_readelf_file/Cargo.toml \\\n\t\t<($(CROSS)readelf -S -s -W $(nano_core_binary) \\\n\t\t| sed '/OBJECT  LOCAL .* str\\./d;/NOTYPE  LOCAL  /d;/FILE    LOCAL  /d;/SECTION LOCAL  /d;')) \\\n\t\t> $(OBJECT_FILES_BUILD_DIR)/$(KERNEL_PREFIX)nano_core.serde\n## `.sym`: this doesn't parse the object file at compile time, instead including the modified output of \"readelf\" as a boot module so it can then\n## be parsed during boot. See pull request #542 for more details.\n##\t@RUSTFLAGS=\"\" cargo run --release --manifest-path $(ROOT_DIR)/tools/demangle_readelf_file/Cargo.toml \\\n##\t\t<($(CROSS)readelf -S -s -W $(nano_core_binary) | sed '/OBJECT  LOCAL .* str\\./d;/NOTYPE  LOCAL  /d;/FILE    LOCAL  /d;/SECTION LOCAL  /d;') \\\n##\t\t>  $(OBJECT_FILES_BUILD_DIR)/$(KERNEL_PREFIX)nano_core.sym\n##\t@echo -n -e '\\0' >> $(OBJECT_FILES_BUILD_DIR)/$(KERNEL_PREFIX)nano_core.sym\n## `.bin`: this doesn't parse the object file at compile time, instead including the nano_core binary as a boot module so it can then be parsed during\n## boot. See pull request #542 for more details. \n##\t@cp $(nano_core_binary) $(OBJECT_FILES_BUILD_DIR)/$(KERNEL_PREFIX)nano_core.bin\n\n\n### This target auto-generates a new grub.cfg file and uses grub to build a bootable ISO.\n### This target should be invoked when all of contents of `ISOFILES` are ready to be packaged into an ISO.\ngrub:\n\t@mkdir -p $(ISOFILES)/boot/grub\n\t@RUSTFLAGS=\"\" cargo run --release --manifest-path $(ROOT_DIR)/tools/grub_cfg_generation/Cargo.toml -- $(ISOFILES)/modules/ -o $(ISOFILES)/boot/grub/grub.cfg\n\t@$(GRUB_MKRESCUE) -o $(iso) $(ISOFILES)  2> /dev/null\n\n\n### This target uses limine to build a bootable ISO.\n### This target should be invoked when all of contents of `ISOFILES` are ready to be packaged into an ISO.\nlimine:\n\t@cd $(OBJECT_FILES_BUILD_DIR)/ && ls | cpio --no-absolute-filenames -o > $(ISOFILES)/modules.cpio\n\t@RUSTFLAGS=\"\" cargo run -r --manifest-path $(ROOT_DIR)/tools/limine_compress_modules/Cargo.toml -- -i $(ISOFILES)/modules.cpio -o $(ISOFILES)/modules.cpio.lz4\n\t@rm $(ISOFILES)/modules.cpio\n\t@cp cfg/limine.cfg $(LIMINE_DIR)/limine-cd.bin $(LIMINE_DIR)/limine-cd-efi.bin $(LIMINE_DIR)/limine.sys $(ISOFILES)/\n\t@rm -f $(iso)\n\t@xorriso -as mkisofs \\\n\t\t-b limine-cd.bin -no-emul-boot -boot-load-size 4 \\\n\t\t-boot-info-table --efi-boot limine-cd-efi.bin \\\n\t\t-efi-boot-part --efi-boot-image --protective-msdos-label \\\n\t\t$(ISOFILES)/ -o $(iso)\n\t@$(MAKE) -C $(LIMINE_DIR)\n\t@$(LIMINE_DIR)/limine-deploy $(iso)\n\n\n## This downloads the OVMF EFI firmware, needed by QEMU to boot an EFI app.\n##\n## These binary files are built by Github user retrage at:\n## https://github.com/retrage/edk2-nightly.\n$(efi_firmware):\n\t@echo -e \"\\033[1;34m\\nDownloading prebuilt EFI firmware from GitHub...\\033[0m\"\n\t@wget -nv --show-progress https://raw.githubusercontent.com/retrage/edk2-nightly/$(OVMF_COMMIT)/bin/$(OVMF_FILE) -O $(efi_firmware)\n\n\n### This target copies all extra files into the `ISOFILES` directory,\n### collapsing their directory structure into a single file name with `!` as the directory delimiter.\n### The contents of the EXTRA_FILES directory will be available at runtime within Theseus's root fs, too.\n### See the `README.md` in the `extra_files` directory for more info.\nextra_files:\n\t@mkdir -p $(OBJECT_FILES_BUILD_DIR)\n\t@for f in $(shell cd $(EXTRA_FILES) && find * -type f); do \\\n\t\tln -f  $(EXTRA_FILES)/$${f}  $(OBJECT_FILES_BUILD_DIR)/`echo -n $${f} | sed 's/\\//!/g'`  & \\\n\tdone; wait\n\n\n### Target for building tlibc, Theseus's libc.\n### This should be run after `make iso` has completed.\n### It builds a new .iso that includes tlibc, which can be run using `make orun`.\n### Currently we can manually load tlibc within Theseus for testing purposes by running `ns --load path/to/tlibc_file`.\n.PHONY: tlibc\nTLIBC_OBJ_FILE := tlibc/target/$(TARGET)/$(BUILD_MODE)/tlibc.o\ntlibc:\n# $(MAKE) -C tlibc\n\t( cd ./tlibc; sh build.sh )\n\n\t@for f in $(TLIBC_OBJ_FILE); do \\\n\t\t$(CROSS)strip  --strip-debug  $${f} ; \\\n\t\tcp -vf  $${f}  $(OBJECT_FILES_BUILD_DIR)/`basename $${f} | sed -n -e 's/\\(.*\\)/$(APP_PREFIX)\\1/p'`   2> /dev/null ; \\\n\tdone\n\t$(MAKE) bootloader=$(bootloader) $(bootloader)\n\t@echo -e \"\\n\\033[1;32m The build of tlibc finished successfully and was packaged into the Theseus ISO.\\033[0m\"\n\t@echo -e \"    --> Use 'make orun' to run it now (don't use 'make run', that will overwrite tlibc)\"\n\t@echo -e \"    --> In Theseus, run 'ns --load /namespaces/_applications/tlibc.o' to load tlibc.\"\n\n\n\n### Target for building a test C language executable.\n### This should be run after `make iso` and then `make tlibc` have both completed.\n.PHONY: c_test\n# C_TEST_TARGET := dummy_works\nC_TEST_TARGET := print_test\nc_test:\n\t$(MAKE) -C c_test $(C_TEST_TARGET)\n\t@for f in c_test/$(C_TEST_TARGET); do \\\n\t\t$(CROSS)strip  --strip-debug  $${f} ; \\\n\t\tcp -vf  $${f}  $(OBJECT_FILES_BUILD_DIR)/`basename $${f} | sed -n -e 's/\\(.*\\)/$(EXECUTABLE_PREFIX)\\1/p'`   2> /dev/null ; \\\n\tdone\n\t$(MAKE) bootloader=$(bootloader) $(bootloader)\n\t@echo -e \"\\n\\033[1;32m The build of $(C_TEST_TARGET) finished successfully and was packaged into the Theseus ISO.\\033[0m\"\n\t@echo -e \"    --> Use 'make orun' to run it now (don't use 'make run')\"\n\t@echo -e \"    --> In Theseus, run 'loadc /namespaces/_executables/$(C_TEST_TARGET)' to load and run the C program.\"\n\n\n\n### Demo/test target for building libtheseus\nlibtheseus: theseus_cargo $(ROOT_DIR)/libtheseus/Cargo.* $(ROOT_DIR)/libtheseus/src/*\n\t@( \\\n\t\tcd $(ROOT_DIR)/libtheseus && \\\n\t\t$(THESEUS_CARGO_BIN) --input $(DEPS_BUILD_DIR) build; \\\n\t)\n\n\n### This target builds the `theseus_cargo` tool as a dedicated binary.\ntheseus_cargo: $(wildcard $(THESEUS_CARGO)/Cargo.*)  $(wildcard$(THESEUS_CARGO)/src/*)\n\t@echo -e \"\\n=================== Building the theseus_cargo tool ===================\"\n\tcargo install --locked --force --path=$(THESEUS_CARGO) --root=$(THESEUS_CARGO)\n\n\n\n### Removes the build directory and all compiled Rust objects.\nclean:\n\t@rm -rf $(BUILD_DIR)\n\tcargo clean\n\t\n\n### Removes only the old files that were copied into the build directory from a previous build.\n### This is necessary to avoid lingering build files that aren't relevant to a new build,\n### and would thus cause incremental re-builds to not work correctly.\n### All other build files are left intact.\nclean-old-build:\n\t@rm -rf $(OBJECT_FILES_BUILD_DIR)\n\t@rm -rf $(DEPS_BUILD_DIR)\n\t@rm -rf $(DEBUG_SYMBOLS_DIR)\n\n\n# ## (This is currently not used in Theseus, since we don't run anything in userspace)\n# ## This builds all userspace programs\n# userspace: \n# \t@echo -e \"\\n======== BUILDING USERSPACE ========\"\n# \t@$(MAKE) -C old_crates/userspace all\n# ## copy userspace binary files and add the __u_ prefix\n# \t@mkdir -p $(ISOFILES)/modules\n# \t@for f in `find $(ROOT_DIR)/old_crates/userspace/build -type f` ; do \\\n# \t\tcp -vf $${f}  $(ISOFILES)/modules/`basename $${f} | sed -n -e 's/\\(.*\\)/__u_\\1/p'` 2> /dev/null ; \\\n# \tdone\n\n\n\n## TODO FIXME: fix up the applications build procedure so we can use lints for them, such as disabling unsafe code.\n# ## The directory where we store custom lints (compiler plugins)\n# COMPILER_PLUGINS_DIR = $(ROOT_DIR)/compiler_plugins\n# ## Applications are forbidden from using unsafe code\n# COMPILER_LINTS += -D unsafe-code\n# ## Applications must have a main function\n# COMPILER_LINTS += --extern application_main_fn=$(COMPILER_PLUGINS_DIR)/target/$(BUILD_MODE)/libapplication_main_fn.so  \\\n# \t\t\t\t  -Z extra-plugins=application_main_fn \\\n# \t\t\t\t  -D application_main_fn\n#\n# ## Builds our custom lints in the compiler plugins directory so we can use them here\n# compiler_plugins:\n# \t@cd $(COMPILER_PLUGINS_DIR) && cargo build $(CARGOFLAGS)\n\n\n\n\n## This is a special target that enables SIMD personalities.\n## It builds everything with the SIMD-enabled x86_64-unknown-theseus-sse target,\n## and then builds everything again with the regular x86_64-unknown-theseus target. \n## The \"normal\" target must come last ('build_sse', THEN the regular 'build') to ensure that the final nano_core_binary is non-SIMD.\nsimd_personality_sse : export TARGET := x86_64-unknown-theseus\nsimd_personality_sse : export BUILD_MODE = release\nsimd_personality_sse : export override THESEUS_CONFIG += simd_personality simd_personality_sse\nsimd_personality_sse: clean-old-build build_sse build\n## after building all the modules, copy the kernel boot image files\n\t@echo -e \"********* AT THE END OF SIMD_BUILD: TARGET = $(TARGET), KERNEL_PREFIX = $(KERNEL_PREFIX), APP_PREFIX = $(APP_PREFIX)\"\n\t$(MAKE) bootloader=$(bootloader) copy_kernel $(bootloader)\n## run it in QEMU\n\t$(QEMU_BIN) $(QEMU_FLAGS)\n\n\n\n## This target is like \"simd_personality_sse\", but uses AVX instead of SSE.\n## It builds everything with the SIMD-enabled x86_64-unknown-theseus-avx target,\n## and then builds everything again with the regular x86_64-unknown-theseus target. \n## The \"normal\" target must come last ('build_avx', THEN the regular 'build') to ensure that the final nano_core_binary is non-SIMD.\nsimd_personality_avx : export TARGET := x86_64-unknown-theseus\nsimd_personality_avx : export BUILD_MODE = release\nsimd_personality_avx : export override THESEUS_CONFIG += simd_personality simd_personality_avx\nsimd_personality_avx : export override CFLAGS += -DENABLE_AVX\nsimd_personality_avx: clean-old-build build_avx build\n## after building all the modules, copy the kernel boot image files\n\t@echo -e \"********* AT THE END OF SIMD_BUILD: TARGET = $(TARGET), KERNEL_PREFIX = $(KERNEL_PREFIX), APP_PREFIX = $(APP_PREFIX)\"\n\t$(MAKE) bootloader=$(bootloader) copy_kernel $(bootloader)\n## run it in QEMU\n\t$(QEMU_BIN) $(QEMU_FLAGS)\n\n\n\n### build_sse builds the kernel and applications with the x86_64-unknown-theseus-sse target.\n### It can serve as part of the simd_personality_sse target.\nbuild_sse : export override TARGET := x86_64-unknown-theseus-sse\nbuild_sse : export override RUSTFLAGS += -C no-vectorize-loops\nbuild_sse : export override RUSTFLAGS += -C no-vectorize-slp\nbuild_sse : export KERNEL_PREFIX := ksse\\#\nbuild_sse : export APP_PREFIX := asse\\#\nbuild_sse:\n\t$(MAKE) build\n\n\n### build_avx builds the kernel and applications with the x86_64-unknown-theseus-avx target.\n### It can serve as part of the simd_personality_avx target.\nbuild_avx : export override TARGET := x86_64-unknown-theseus-avx\nbuild_avx : export override RUSTFLAGS += -C no-vectorize-loops\nbuild_avx : export override RUSTFLAGS += -C no-vectorize-slp\nbuild_avx : export KERNEL_PREFIX := kavx\\#\nbuild_avx : export APP_PREFIX := aavx\\#\nbuild_avx:\n\t$(MAKE) build\n\n\n### build_server is a target that builds Theseus into a regular ISO\n### and then sets up an HTTP server that provides module object files \n### for a running instance of Theseus to download for OTA live updates.\nbuild_server: preserve_old_modules iso\n\tOLD_MODULES_DIR=$(OBJECT_FILES_BUILD_DIR)_old \\\n\t\tNEW_MODULES_DIR=$(OBJECT_FILES_BUILD_DIR) \\\n\t\tNEW_DIR_NAME=$(UPDATE_DIR) \\\n\t\tbash scripts/build_server.sh\n\npreserve_old_modules:\n\t@mv $(OBJECT_FILES_BUILD_DIR) $(OBJECT_FILES_BUILD_DIR)_old\n\tcargo clean\n\n\n###################################################################################################\n########################### Targets for clippy and documentation ##################################\n###################################################################################################\n\n## Runs clippy on a full build of Theseus, with all crates included.\n## Note that this does not cover all combinations of features or cfg values.\n##\n## We allow building with THESEUS_CONFIG options, but not with any other RUSTFLAGS,\n## because the default RUSTFLAGS used to build Theseus aren't compatible with clippy.\nifeq ($(ARCH),x86_64)\nclippy : export override FEATURES += --features theseus_features/everything\nelse ifeq ($(ARCH),aarch64)\nclippy : export override FEATURES := $(subst --workspace,,$(FEATURES))\nendif\nclippy : export override RUSTFLAGS = $(patsubst %,--cfg %, $(THESEUS_CONFIG))\nclippy:\n\tRUST_TARGET_PATH='$(CFG_DIR)' RUSTFLAGS='$(RUSTFLAGS)' \\\n\t\tcargo clippy \\\n\t\t$(BUILD_STD_CARGOFLAGS) $(FEATURES) \\\n\t\t--target $(TARGET) \\\n\t\t-- -D clippy::all\n\n\n## The output directory for source-level documentation.\nRUSTDOC_OUT      := $(BUILD_DIR)/doc\nRUSTDOC_OUT_FILE := $(RUSTDOC_OUT)/___Theseus_Crates___/index.html\n\n## Builds Theseus's source-level documentation for all Rust crates except applications.\n## The entire project is built as normal using the `cargo doc` command (`rustdoc` under the hood).\ndocs: doc\ndoc : export override RUSTDOCFLAGS += -A rustdoc::private_intra_doc_links\ndoc : export override RUSTFLAGS=\ndoc : export override CARGOFLAGS=\ndoc:\n## Build the docs for select library crates, namely those not hosted online.\n## We do this first such that the main `cargo doc` invocation below can see and link to them.\n\t@cargo doc --no-deps \\\n\t\t--package atomic_linked_list \\\n\t\t--package cow_arc \\\n\t\t--package debugit \\\n\t\t--package dereffer \\\n\t\t--package dfqueue \\\n\t\t--package irq_safety \\\n\t\t--package keycodes_ascii \\\n\t\t--package lockable \\\n\t\t--package locked_idt \\\n\t\t--package mouse_data \\\n\t\t--package owned_borrowed_trait \\\n\t\t--package percent-encoding \\\n\t\t--package port_io \\\n\t\t--package range_inclusive \\\n\t\t--package stdio \\\n\t\t--package str_ref\n## Now, build the docs for all of Theseus's main kernel crates.\n\t@cargo doc --workspace --no-deps $(addprefix --exclude , $(APP_CRATE_NAMES)) --features nano_core/bios\n\t@rustdoc --output target/doc --crate-name \"___Theseus_Crates___\" $(ROOT_DIR)/kernel/_doc_root.rs\n\t@rm -rf $(RUSTDOC_OUT)\n\t@mkdir -p $(RUSTDOC_OUT)\n\t@cp -rf target/doc/. $(RUSTDOC_OUT)\n\t@echo -e \"\\nTheseus source docs are now available at: \\\"$(RUSTDOC_OUT_FILE)\\\".\"\n\n\n## Opens the documentation root in the system's default browser. \n## the \"powershell\" command is used on Windows Subsystem for Linux\nview-docs: view-doc\nview-doc: doc\n\t@echo -e \"Opening documentation index file in your browser...\"\nifneq ($(IS_WSL), )\n\twslview \"$(shell realpath --relative-to=\"$(ROOT_DIR)\" \"$(RUSTDOC_OUT_FILE)\")\" &\nelse\n\t@xdg-open $(RUSTDOC_OUT_FILE) > /dev/null 2>&1 || open $(RUSTDOC_OUT_FILE) &\nendif\n\n\n### The locations of Theseus's book-style documentation.\nBOOK_SRC      := $(ROOT_DIR)/book\nBOOK_OUT      := $(BUILD_DIR)/book\nBOOK_OUT_FILE := $(BOOK_OUT)/html/index.html\n\n### Builds the Theseus book-style documentation using `mdbook`.\nbook: $(wildcard $(BOOK_SRC)/src/*) $(BOOK_SRC)/book.toml\nifneq ($(shell mdbook --version > /dev/null 2>&1 && echo $$?), 0)\n\t@echo -e \"\\nError: please install mdbook:\"\n\t@echo -e \"    cargo +stable install mdbook --force\"\n\t@echo -e \"You can optionally install linkcheck too:\"\n\t@echo -e \"    cargo +stable install mdbook-linkcheck --force\"\n\t@exit 1\nendif\n\t@mdbook build $(MDBOOK_ARGS) $(BOOK_SRC) -d $(BOOK_OUT)\n\t@echo -e \"\\nThe Theseus Book is now available at \\\"$(BOOK_OUT_FILE)\\\".\"\n\n\n### Opens the Theseus book.\nexport override MDBOOK_ARGS+=--open\nview-book: book\n\t@echo -e \"Opened the Theseus book in your browser.\"\n\n\n### Removes all built documentation\nclean-doc:\n\t@cargo clean --doc\n\t@rm -rf $(RUSTDOC_OUT) $(BOOK_OUT)\n\t\n\n### The primary documentation for this makefile itself.\nhelp: \n\t@echo -e \"\\nThe following make targets are available:\"\n\t@echo -e \"   iso:\"\n\t@echo -e \"\\t The default and most basic target. Builds Theseus OS with the default feature set and creates a bootable ISO image.\"\n\n\t@echo -e \"   all:\"\n\t@echo -e \"   full:\"\n\t@echo -e \"\\t Same as 'iso', but builds all Theseus OS crates by enabling the 'theseus_features/everything' feature.\"\n\n\t@echo -e \"   run:\"\n\t@echo -e \"\\t Builds Theseus (via the 'iso' target) and runs it using QEMU.\"\n\n\t@echo -e \"   run_pause:\"\n\t@echo -e \"\\t Same as 'run', but pauses QEMU at its GDB stub entry point,\"\n\t@echo -e \"\\t which waits for you to connect a GDB debugger using 'make gdb'.\"\n\n\t@echo -e \"   orun:\"\n\t@echo -e \"\\t Runs the existing build of Theseus using QEMU, without building Theseus first.\"\n\n\t@echo -e \"   orun_pause:\"\n\t@echo -e \"\\t Same as 'orun', but pauses QEMU at its GDB stub entry point,\"\n\t@echo -e \"\\t which waits for you to connect a GDB debugger using 'make gdb'.\"\n\n\t@echo -e \"   loadable:\"\n\t@echo -e \"\\t Same as 'run', but enables the 'loadable' configuration so that all crates are dynamically loaded.\"\n\n\t@echo -e \"   wasmtime:\"\n\t@echo -e \"\\t Same as 'run', but includes the 'wasmtime' crates in the build.\"\n\n\t@echo -e \"   gdb:\"\n\t@echo -e \"\\t Runs a new instance of GDB that connects to an already-running x86_64 QEMU instance.\"\n\t@echo -e \"\\t You must run an instance of Theseus on x86_64 in QEMU beforehand in a separate terminal.\"\n\n\t@echo -e \"   gdb_aarch64:\"\n\t@echo -e \"\\t Runs a new instance of GDB multiarch that connects to an already-running aarch64 QEMU instance.\"\n\t@echo -e \"\\t You must run an instance of Theseus on aarch64 in QEMU beforehand in a separate terminal.\"\n\n\t@echo -e \"   bochs:\"\n\t@echo -e \"\\t Same as 'make run', but runs Theseus in the Bochs emulator instead of QEMU.\"\n\n\t@echo -e \"   usb:\"\n\t@echo -e \"\\t Builds Theseus as a bootable .iso and writes it to the specified USB drive.\"\n\t@echo -e \"\\t The USB drive is specified as drive=<dev-name>, e.g., 'make usb drive=sdc',\"\n\t@echo -e \"\\t in which the USB drive is connected as /dev/sdc. This target requires sudo.\"\n\n\t@echo -e \"   pxe:\"\n\t@echo -e \"\\t Builds Theseus as a bootable .iso and copies it to the tftpboot folder for network booting over PXE.\"\n\t@echo -e \"\\t You can specify a new network device with netdev=<interface-name>, e.g., 'make pxe netdev=eth0'.\"\n\t@echo -e \"\\t You can also specify the IP address with 'ip=<addr>'. This target requires sudo.\"\n\n\t@echo -e \"   simd_personality_[sse|avx]:\"\n\t@echo -e \"\\t Builds Theseus with a regular personality and a SIMD-enabled personality (either SSE or AVX),\"\n\t@echo -e \"\\t then runs it just like the 'make run' target.\"\n\n\t@echo -e \"   build_server:\"\n\t@echo -e \"\\t Builds Theseus (as with the 'iso' target) and then runs a build server hosted on this machine\"\n\t@echo -e \"\\t that can be used for over-the-air live evolution.\"\n\t@echo -e \"\\t You can specify the name of the directory of newly-built modules by setting the 'UPDATE_DIR' environment variable.\"\n\t@echo -e \"\\t This target should be invoked as an incremental build after a prior build has already completed.\"\n\t@echo -e \"\\t For example, first checkout version 1 (e.g., a specific git commit), build it as normal,\"\n\t@echo -e \"\\t then checkout version 2 (or otherwise make some changes) and run 'make build_server'.\"\n\t@echo -e \"\\t Then, a running instance of Theseus version 1 can contact this machine's build_server to update itself to version 2.\"\n\t\n\t@echo -e \"\\nThe following key-value options are available to select a bootloader:\"\n\t@echo -e \"   bootloader=grub|limine\"\n\t@echo -e \"\\t Configure which bootloader to pack into the final \\\".iso\\\" file.\"\n\t@echo -e \"\\t    'grub':    Use the GRUB bootloader. Default value.\"\n\t@echo -e \"\\t    'limine':  Use the Limine bootloader. See setup instructions in the README.\"\n\n\t@echo -e \"\\nThe following key-value options are available to customize the build process:\"\n\t@echo -e \"   merge_sections=yes|no\"\n\t@echo -e \"\\t Choose whether sections in crate object files are merged together.\"\n\t@echo -e \"\\t This *significantly* improves crate load times and reduces memory usage,\"\n\t@echo -e \"\\t though it may present problems for crate swapping for evolution and fault recovery.\"\n\t@echo -e \"\\t This is strictly a post-compilation action, it doesn't affect how code is compiled.\"\n\t@echo -e \"   debug=full|base|none\"\n\t@echo -e \"\\t Configure which debug symbols are stripped from the build artifacts.\"\n\t@echo -e \"\\t Stripped symbols are placed into files ending with \\\".dbg\\\" in \\\"$(DEBUG_SYMBOLS_DIR)\\\".\"\n\t@echo -e \"\\t This is strictly a post-compilation action, it doesn't affect how code is compiled.\"\n\t@echo -e \"\\t    'full':   Keep debug symbols in all files, including the base kernel image and all crate object files.\"\n\t@echo -e \"\\t    'base':   Keep debug symbols in only the base kernel image; strip debug symbols from crate object files.\"\n\t@echo -e \"\\t    'none':   Strip debug symbols from both the base kernel image and all crate object files.\"\n\t@echo -e \"\\t              This is the default option, because it is the fastest to boot.\"\n\n\t@echo -e \"\\nThe following key-value options are available for QEMU targets, like 'run':\"\n\t@echo -e \"   net=user|tap|none\"\n\t@echo -e \"\\t Configure networking in the QEMU guest:\"\n\t@echo -e \"\\t    'user':  Enable networking with an e1000 NIC in the guest and a userspace SLIRP-based interface in the host (QEMU default).\"\n\t@echo -e \"\\t    'tap' :  Enable networking with an e1000 NIC in the guest and a TAP interface in the host.\"\n\t@echo -e \"\\t    'none':  Disable all networking in the QEMU guest. This is the default behavior if no other 'net' option is provided.\"\n# @echo -e \"   kvm=yes:\"\n# @echo -e \"\\t Enable KVM acceleration (the host computer must support it).\"\n\t@echo -e \"   host=yes\"\n\t@echo -e \"\\t Enable KVM and use the host CPU model. This is required for using certain x86 hardware not supported by QEMU, e.g., PMU, AVX.\"\n\t@echo -e \"   int=yes\"\n\t@echo -e \"\\t Enable interrupt logging in QEMU console (-d int). This is VERY verbose and slow.\"\n\t@echo -e \"   vfio=<PCI_DEVICE_SLOT>\"\n\t@echo -e \"\\t Use VFIO-based PCI device assignment (passthrough) in QEMU for the given device slot, e.g 'vfio=59:00.0'\"\n\t@echo -e \"   SERIAL<N>=<BACKEND>\"\n\t@echo -e \"\\t Connect a guest OS serial port (e.g., 'SERIAL1' or 'SERIAL2') to a QEMU-supported backend.\"\n\t@echo -e \"\\t For example, 'SERIAL2=pty' will connect the second serial port for the given architecture\"\n\t@echo -e \"\\t ('COM2 on x86) to a newly-allocated pseudo-terminal on Linux, e.g., '/dev/pts/6'.\"\n\t@echo -e \"\\t For the 'pty' option, QEMU will print a statement like so:\"\n\t@echo -e \"\\t     char device redirected to /dev/pts/6 (label serial1)\"\n\t@echo -e \"\\t Note that QEMU uses 0-based indexing for serial ports, so its 'serial1' label refers to the second serial port, our 'SERIAL2'.\"\n\t@echo -e \"\\t You can then connect to this using something like 'screen /dev/pts/6' or 'picocom /dev/pts/6',\"\n\t@echo -e \"\\t or use the below 'terminal=' option to auto-launch a new terminal.\"\n\t@echo -e \"\\t Other options include 'stdio' (the default for 'SERIAL1'), 'file', 'pipe', etc.\"\n\t@echo -e \"\\t For more details, search the QEMU manual for '-serial dev'.\"\n\t@echo -e \"   terminal=\\\"TERMINAL_COMMAND\\\"\"\n\t@echo -e \"\\t Auto-launch a new terminal window connected to the specified SERIAL<N> TTY/PTY backend\"\n\t@echo -e \"\\t that QEMU created for us, as described above.\"\n\t@echo -e \"\\t The TERMINAL_COMMAND is specific to your system's terminal emulator and available binaries,\"\n\t@echo -e \"\\t and will be invoked by our makefile with one argument: the PTY device file created by QEMU.\"\n\t@echo -e \"\\t For example, on a default GNOME-based Linux distro with 'screen' installed, you can run:\"\n\t@echo -e \"\\t     make run terminal=\\\"gnome-terminal -- screen\\\"\"\n\t@echo -e \"\\t On a system with 'alacritty' installed, you can just run:\"\n\t@echo -e \"\\t     make run terminal=alacritty\"\n\t@echo -e \"\\t The specific syntax of TERMINAL_COMMAND depends on your host system and chosen terminal emulator.\"\n\t@echo -e \"   graphic=no\"\n\t@echo -e \"\\t Disable the graphical QEMU window, which reroutes the VGA text mode output to stdio.\"\n\t@echo -e \"\\t -- Note: the VGA device will still exist and be used by Theseus, it just will not be displayed.\"\n\n\n\t@echo -e \"\\nThe following make targets exist for building documentation:\"\n\t@echo -e \"   doc:\"\n\t@echo -e \"\\t Builds Theseus documentation from its Rust source code (rustdoc).\"\n\t@echo -e \"   view-doc:\"\n\t@echo -e \"\\t Builds Theseus documentation and then opens it in your default browser.\"\n\t@echo -e \"   book:\"\n\t@echo -e \"\\t Builds the Theseus book using the mdbook Markdown tool.\"\n\t@echo -e \"   view-book:\"\n\t@echo -e \"\\t Builds the Theseus book and then opens it in your default browser.\"\n\t@echo -e \"\\t If the book doesn't open in your browser, install the latest version of mdbook.\"\n\t@echo -e \"   clean-doc:\"\n\t@echo -e \"\\t Remove all generated documentation files.\"\n\t@echo \"\"\n\n\n\n\n###################################################################################################\n##################### This section has QEMU arguments and configuration ###########################\n###################################################################################################\n\nQEMU_FLAGS ?= \nQEMU_EXTRA ?= \nSERIAL1 ?= stdio\nSERIAL2 ?= pty\n\nifdef IOMMU\n## Currently only the `q35` machine model supports a virtual IOMMU: <https://wiki.qemu.org/Features/VT-d>\n\tQEMU_FLAGS += -machine q35,kernel-irqchip=split\n\tQEMU_FLAGS += -device intel-iommu,intremap=on,caching-mode=on\nendif\n\n## Boot from the cd-rom drive\nifeq ($(boot_spec), bios)\n\tQEMU_FLAGS += -cdrom $(iso) -boot d\nelse ifeq ($(boot_spec), uefi)\n\t## We use `-bios` instead of `-pflash` because `-pflash` requires the file to be exactly 64MB.\n\t## See:\n\t## - https://wiki.qemu.org/Features/PC_System_Flash\n\t## - https://github.com/tianocore/edk2/blob/316e6df/OvmfPkg/README#L68\n\tQEMU_FLAGS += -bios $(efi_firmware)\n\tQEMU_FLAGS += -drive format=raw,file=$(iso)\nendif\n## Don't reboot or shutdown upon failure or a triple reset\nQEMU_FLAGS += -no-reboot -no-shutdown\n## Enable a GDB stub so we can connect GDB to the QEMU instance \nQEMU_FLAGS += -s\n\n## Enable the first serial port (the default log) to be redirected to the host terminal's stdio.\n## Optionally, use the below `mon:` prefix to have the host terminal forward escape/control sequences to this serial port.\n# QEMU_FLAGS += -serial $(SERIAL1)\nQEMU_FLAGS += -serial mon:$(SERIAL1)\n\n## Attach a second serial port to QEMU, which can be used for a separate headless shell/terminal.\n## For example, if this is `pty`, and QEMU chooses to allocate a new pseudo-terminal at /dev/pts/6,\n## then you can connect to this serial port by running a tty connector application in a new window:\n## -- `screen /dev/pts/6`\n## -- `picocom /dev/pts/6`\nQEMU_FLAGS += -serial mon:$(SERIAL2)\n\n## Disable the graphical display (for running in \"headless\" mode)\n## `-vga none`:      removes the VGA card\n## `-display none`:  disables QEMU's graphical display\n## `-nographic`:     disables QEMU's graphical display and redirects VGA text mode output to serial.\nifeq ($(graphic), no)\n\tQEMU_FLAGS += -nographic\nendif\n\n## Set the amount of system memory (RAM) provided to the QEMU guest OS\nQEMU_MEMORY ?= 512M\nQEMU_FLAGS += -m $(QEMU_MEMORY) \n\n## Enable multicore CPUs, i.e., SMP (Symmetric Multi-Processor)\nQEMU_CPUS ?= 4\nQEMU_FLAGS += -smp $(QEMU_CPUS)\n\n## Add a disk drive, a PATA drive over an IDE controller interface.\n## Currently this is only supported on x86_64.\nDISK_IMAGE ?= fat32.img\nifeq ($(ARCH),x86_64)\nifneq ($(wildcard $(DISK_IMAGE)),) \n\tQEMU_FLAGS += -drive format=raw,file=fat32.img,if=ide\nendif\nendif\n\n## We don't yet support SATA in Theseus, but this is how to add a SATA drive over the AHCI interface.\n# QEMU_FLAGS += -drive id=my_disk,file=$(DISK_IMAGE),if=none  -device ahci,id=ahci  -device ide-drive,drive=my_disk,bus=ahci.0\n\n## QEMU's OUI dictates that the MAC addr start with \"52:54:00:\"\nMAC_ADDR ?= 52:54:00:d1:55:01\n\n## Read about QEMU networking options here: https://www.qemu.org/2018/05/31/nic-parameter/\nifeq ($(net),user)\n\t## user-based networking setup with standard e1000 ethernet NIC\n\tQEMU_FLAGS += -device e1000,netdev=network0,mac=$(MAC_ADDR) -netdev user,id=network0\n\t## Dump network activity to a pcap file\n\tQEMU_FLAGS += -object filter-dump,id=f1,netdev=network0,file=netdump.pcap\nelse ifeq ($(net),tap)\n\t## TAP-based networking setup with a standard e1000 ethernet NIC frontent (in the guest) and the TAP backend (in the host)\n\tQEMU_FLAGS += -device e1000,netdev=network0,mac=$(MAC_ADDR) -netdev tap,id=network0,ifname=tap0,script=no,downscript=no\n\t## Dump network activity to a pcap file\n\tQEMU_FLAGS += -object filter-dump,id=f1,netdev=network0,file=netdump.pcap\nelse ifeq ($(net),none)\n\tQEMU_FLAGS += -net none\nelse ifneq (,$(net)) \n$(error Error: unsupported option \"net=$(net)\")\nendif\n\n## Dump interrupts to the serial port log\nifeq ($(int),yes)\n\tQEMU_FLAGS += -d int\nendif\n\nifeq ($(host),yes)\n\t## KVM acceleration is required when using the host cpu model\n\tQEMU_FLAGS += -cpu host -accel kvm\nelse ifeq ($(ARCH),aarch64)\n\tQEMU_FLAGS += -machine virt,gic-version=3\n\tQEMU_FLAGS += -device ramfb\n\tQEMU_FLAGS += -cpu cortex-a72\n\tQEMU_FLAGS += -usb\n\tQEMU_FLAGS += -device usb-ehci,id=ehci\n\tQEMU_FLAGS += -device usb-kbd\nelse\n\tQEMU_FLAGS += -cpu Broadwell\nendif\n\n## Currently, kvm by itself can cause problems, but it works with the \"host\" option (above).\nifeq ($(kvm),yes)\n$(error Error: the 'kvm=yes' option is currently broken. Use 'host=yes' instead\")\n\t# QEMU_FLAGS += -accel kvm\nendif\n\n## Enable passthrough of a PCI device in QEMU by passing its slot information to VFIO.\n## Slot information is its bus, device, and function number assigned by the host OS, e.g., 'vfio=59:00.0'.\nifdef vfio\n\tQEMU_FLAGS += -device vfio-pci,host=$(vfio)\nendif\n\nQEMU_FLAGS += $(QEMU_EXTRA)\n\n\n\n###################################################################################################\n########################## Targets for running and debugging Theseus ##############################\n###################################################################################################\n\n### `qemu`/`orun` (old run): runs the most recent build without rebuilding.\n### This is the base-level target responsible for actually invoking QEMU;\n### all other targets that want to invoke QEMU should depend on this target to do so.\nqemu: orun\norun:\nifdef terminal\n## Check which PTY/TTY the OS would give to the next process that requests one,\n## which is the best way to guess which PTY QEMU will use for redirected serial I/O.\n\t$(eval temp_tty += $(shell cargo run --release --quiet --manifest-path $(ROOT_DIR)/tools/get_tty/Cargo.toml))\n## If another process obtains that TTY here before we can run QEMU,\n## the 'terminal' command below will connect to the wrong TTY, but there's nothing we can do.\n##\n## Sleep for 2 seconds to allow QEMU enough time to start and request the TTY.\n\t(sleep 2 && $(terminal) $(temp_tty)) & $(QEMU_BIN) $(QEMU_FLAGS)\nelse\n\t$(QEMU_BIN) $(QEMU_FLAGS)\nendif\n\n\n### Old Run Pause: runs the most recent build without rebuilding, but pauses QEMU until GDB is connected.\norun_pause : export override QEMU_FLAGS += -S\norun_pause: orun\n\n\n### builds and runs Theseus in loadable mode, where all crates are dynamically loaded.\nloadable : export override THESEUS_CONFIG += loadable\nloadable: run\n\n\n### builds and runs Theseus with wasmtime enabled.\nwasmtime : export override FEATURES += --features wasmtime\nwasmtime: run\n\n\n### builds and runs Theseus in QEMU\nrun: $(iso) orun\n\n\n### builds and runs Theseus in QEMU, but pauses execution until a GDB instance is connected.\nrun_pause: $(iso) orun_pause\n\n\n### Runs a gdb instance on the host machine. \n### Run this after invoking another QEMU target in a different terminal.\ngdb:\n\t@rust-os-gdb/bin/rust-gdb \"$(nano_core_binary)\" \\\n\t\t-ex \"symbol-file $(DEBUG_SYMBOLS_DIR)/`basename $(nano_core_binary)`.dbg\" \\\n\t\t-ex \"target remote :1234\"\n\ngdb_aarch64 : override nano_core_binary=$(NANO_CORE_BUILD_DIR)/nano_core-aarch64.bin\ngdb_aarch64:\n\t@gdb-multiarch \"$(nano_core_binary)\" \\\n\t\t-ex \"symbol-file $(DEBUG_SYMBOLS_DIR)/`basename $(nano_core_binary)`.dbg\" \\\n\t\t-ex \"target remote :1234\"\n\n\n### builds and runs Theseus in Bochs\nbochs : export override THESEUS_CONFIG += apic_timer_fixed\nbochs: $(iso) \n\tbochs -f bochsrc.txt -q\n\n\n\n\n### Checks that the supplied usb device (for usage with the boot/pxe targets).\n### Note: this is bypassed on WSL, because WSL doesn't support raw device files yet.\ncheck-usb:\n## on WSL, we bypass the check for USB, because burning the ISO to USB must be done with a Windows app.\nifeq ($(IS_WSL), ) ## if we're not on WSL...\n## now we need to check that the user has specified a USB drive that actually exists, not a partition of a USB drive.\nifeq (,$(findstring $(drive),$(USB_DRIVES)))\n\t@echo -e \"\\nError: please specify a USB drive that exists, e.g., \\\"sdc\\\" (not a partition like \\\"sdc1\\\").\"\n\t@echo -e \"For example, run the following command:\"\n\t@echo -e \"   make boot drive=sdc\\n\"\n\t@echo -e \"The following USB drives are currently attached to this system:\\n$(USB_DRIVES)\"\n\t@echo \"\"\n\t@exit 1\nendif  ## end of checking that the 'drive' variable is a USB drive that exists\nendif  ## end of checking for WSL\n\n\n### Creates a bootable USB drive that can be inserted into a real PC based on the compiled .iso. \nusb : export override THESEUS_CONFIG += mirror_log_to_vga\nusb: check-usb $(iso)\nifneq ($(IS_WSL), )\n## building on WSL\n\t@echo -e \"\\n\\033[1;32mThe build finished successfully\\033[0m, but WSL is unable to access raw USB devices. Instead, you must burn the ISO to a USB drive yourself.\"\n\t@echo -e \"The ISO file is available at \\\"$(iso)\\\".\"\nelse\n## building on Linux or macOS\n\t@echo -e \"\\n\\033[1;32mThe build finished successfully.\\033[0m Writing Theseus OS ISO to /dev/$(drive)...\"\n\t@$(UNMOUNT) /dev/$(drive)* 2> /dev/null  |  true  ## force it to return true\n\t@sudo dd bs=4194304 if=$(iso) of=/dev/$(drive)    ## use 4194304 instead of 4M because macOS doesn't support 4M\n\t@sync\nendif\n\t\n\n### this builds an ISO and copies it into the theseus tftpboot folder as described in the REAEDME \npxe : export override THESEUS_CONFIG += mirror_log_to_vga\npxe: $(iso)\nifdef $(netdev)\nifdef $(ip)\n\t@sudo ifconfig $(netdev) $(ip)\nendif\n\t@sudo sudo ifconfig $(netdev) 192.168.1.105\nendif\n\t@sudo cp -vf $(iso) /var/lib/tftpboot/theseus/\n\t@sudo systemctl restart isc-dhcp-server \n\t@sudo systemctl restart tftpd-hpa\n\ntest: export override QEMU_FLAGS += -device isa-debug-exit,iobase=0xf4,iosize=0x04\ntest: export override QEMU_FLAGS += -nographic\ntest: export override FEATURES =--features theseus_tests --features first_application/qemu_test\ntest: $(iso)\n\t# We exit with an exit code of 0 if QEMU's exit code is 17, and 2 otherwise.\n\t# This is because `qemu_test` uses a value of 0x11 to indicate success.\n\t$(QEMU_BIN) $(QEMU_FLAGS); \\\n\tEXIT_CODE=$$?; \\\n\ttest $$EXIT_CODE -eq 17 && exit 0; \\\n\texit 2\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 15.1064453125,
          "content": "# Theseus OS\n\n[![Documentation](https://img.shields.io/badge/view-docs-blue)](https://theseus-os.github.io/Theseus/doc/___Theseus_Crates___/index.html)\n[![Book](https://img.shields.io/badge/view-book-blueviolet)](https://theseus-os.github.io/Theseus/book/index.html)\n[![Blog](https://img.shields.io/badge/view-blog-orange)](https://theseus-os.com)\n[![Discord](https://img.shields.io/badge/Discord-%235865F2.svg?style=flat&logo=discord&logoColor=white)](https://discord.gg/NuUnqeYT8R)\n<br>\n[![Build Action](https://img.shields.io/github/actions/workflow/status/theseus-os/Theseus/docs.yaml?label=build)](https://github.com/theseus-os/Theseus/actions/workflows/docs.yaml)\n[![Clippy Action](https://img.shields.io/github/actions/workflow/status/theseus-os/Theseus/check-clippy.yaml?label=clippy)](https://github.com/theseus-os/Theseus/actions/workflows/check-clippy.yaml)\n[![QEMU tests](https://img.shields.io/github/actions/workflow/status/theseus-os/Theseus/test.yaml?label=QEMU%20tests)](https://github.com/theseus-os/Theseus/actions/workflows/test.yaml)\n\n\nTheseus is a new OS written from scratch in [Rust](https://www.rust-lang.org/) to experiment with novel OS structure, better state management, and how to leverage **intralingual design** principles to shift OS responsibilities like resource management into the compiler.\n\nFor more info, check out Theseus's [documentation](#Documentation) or our [published academic papers](https://theseus-os.github.io/Theseus/book/misc/papers_presentations.html), which describe Theseus's design and implementation. \n\nTheseus is under active development, and although it is not yet mature, we envision that Theseus will be useful in high-end embedded systems or edge datacenter environments. \nWe are continually working to improve the OS, including its fault recovery abilities for higher system availability without redundancy, as well as easier and more arbitrary live evolution and runtime flexibility.\n\n\n# Quick start\nOn Linux (Debian-like distros), do the following:\n 1. Obtain the Theseus repository (with all submodules):    \n    ```\n    git clone --recurse-submodules --depth 1 https://github.com/theseus-os/Theseus.git\n    ```\n 2. Install Rust:\n    ```\n    curl https://sh.rustup.rs -sSf | sh\n    ```\n 3. Install dependencies:\n    ```\n    sudo apt-get install make gcc nasm pkg-config grub-pc-bin mtools xorriso qemu qemu-kvm wget\n    ```\n 4. Build and run (in QEMU):\n    ```sh\n    cd Theseus\n    make run\n    ```\n    To exit QEMU, press <kbd>Ctrl</kbd> + <kbd>A</kbd>, then <kbd>X</kbd>.\n\nSee below for more detailed instructions.\n\n\n# Building and Running Theseus\n**Note:** when you first check out the project, be sure to get all the submodule repositories too:\n```\ngit submodule update --init --recursive\n```\n\nCurrently, we support building Theseus on the following platforms:\n * Linux, 64-bit Debian-based distributions like Ubuntu, tested on Ubuntu 16.04, 18.04, 20.04. \n   - Arch Linux and Fedora have also been reported to work correctly. \n * Windows, using the Windows Subsystem for Linux (WSL), tested on the Ubuntu version of WSL and WSL2.\n * MacOS, tested on versions High Sierra (v10.13), Catalina (v10.15), and Ventura (v13.5).\n * Docker, atop any host OS that can run a Docker container.\n\n\n## Setting up the build environment\n\nFirst, install Rust by following the [setup instructions here](https://www.rust-lang.org/en-US/install.html). On Linux, just run:\n```sh\ncurl https://sh.rustup.rs -sSf | sh\n```\n\n### Building on Linux or WSL (Windows Subsystem for Linux)\nInstall the following dependencies using your package manager:\n```bash\nsudo apt-get install make gcc nasm pkg-config grub-pc-bin mtools xorriso qemu qemu-kvm wget\n```\n\n  * Or:\n    ```bash\n    # Arch Linux\n    sudo pacman -S make gcc nasm pkg-config grub mtools xorriso qemu wget\n\n    # Fedora\n    sudo dnf install make gcc nasm pkg-config grub2 mtools xorriso qemu wget\n    ```\n\nIf you're on WSL, also do the following steps:\n  * Install an X Server for Windows; we suggest using [Xming](https://sourceforge.net/projects/xming/) or [VcXsvr](https://sourceforge.net/projects/vcxsrv/).\n    * You'll likely need to invoke those X servers with the `-ac` argument (or use the GUI to disable access control). \n  * Setup an X display as follows:\n    * on original WSL (version 1), run:\n      ```sh\n      export DISPLAY=:0\n      ```\n    * on WSL2 (version 2), run:\n      ```sh\n      export DISPLAY=$(cat /etc/resolv.conf | grep nameserver | awk '{print $2}'):0\n      ```\n\n    You'll need to do this each time you open up a new WSL terminal, so it's best to add it to the end of your `.bashrc` or `.profile` file in your `$HOME` directory.\n  * If you get an error like `Could not initialize SDL (No available video device) ...` or any type of GTK or video device error, then make sure that your X Server is running and that you have set the `DISPLAY` environment variable above.\n  * **NOTE**: WSL and WSL2 do not currently support using KVM.\n\n### Building on MacOS\n  * Install [HomeBrew](https://brew.sh/), then run the MacOS build setup script:\n    ```sh\n    sh ./scripts/mac_os_build_setup.sh\n    ```\n    If things go wrong, remove the following build directories and try to run the script again.\n    ```sh\n    rm -rf /tmp/theseus_tools_src\n    ```\n  * **NOTE**: on MacOS, you need to run `gmake` instead of `make` for build commands (or you can simply create a shell alias).\n    * This is because HomeBrew installs its binaries in a way that doesn't conflict with built-in versions of system utilities.\n  \n  * *(This is typically not necessary)*: if you're building Theseus on older Apple Silicon (M1 chips), you may need to use `bash` with x86 emulation:\n    ```sh\n    arch -x86_64 bash   # or another shell of your choice\n    ```\n    and possibly adjust your system `PATH` if both x86 and ARM homebrew binaries are installed:\n    ```sh\n    export PATH=/usr/local/Homebrew/bin:$PATH\n    ```\n\n### Building using Docker\nNote: building and running Theseus within a Docker container may be slower than on a native host OS.\n 1. Ensure docker scripts are executable:\n    ```\n    chmod +x docker/*.sh\n    ```   \n 2. *(Skip if docker is already installed.)*  Install [Docker Engine](https://docs.docker.com/engine/install/). We provide a convenience script for this on Ubuntu:\n    ```\n    ./docker/install_docker_ubuntu.sh\n    ``` \n    * After docker installs, enable your user account to run docker without root privileges:   \n      `sudo groupadd docker; sudo usermod -aG docker $USER`    \n      Then, **log out and log back in** (or restart your computer) for the user/group changes to take effect.\n \n 3. Build the docker image:     \n    ```\n    ./docker/build_docker.sh\n    ```    \n    This does not build Theseus, but rather only creates a docker image that contains all the necessary dependencies to build and run Theseus. \n 4. Run the new docker image locally as a container:    \n    ```\n    ./docker/run_docker.sh\n    ```   \n    Now you can run `make run` or other Theseus-specific build/run commands from within the docker container's shell.\n\nNotes on Docker usage:    \n  * The docker-based workflow should only require you to re-run the `run_docker.sh` script multiple times when re-building or running Theseus after modifying its code. You shouldn't need to re-run `build_docker.sh` multiple times, though it won't hurt.\n  * KVM doesn't currently work in docker. To run Theseus in QEMU using KVM, you can build Theseus within docker, exit the container (via <kbd>Ctrl</kbd> + <kbd>D</kbd>`), and then run `make orun host=yes` on your host machine.\n\n\n## Building and Running\nBuild the default Theseus OS image and run it in QEMU:   \n```sh\nmake run\n```\n\nOr, build a full Theseus OS image with all features and crates enabled:\n```sh\nmake full   ## or `make all`\n```\n\nRun `make help` to see other make targets and the various command-line options.\n\n\n## Using the Limine bootloader instead of GRUB\nTo use Limine instead of GRUB, clone pre-built limine and pass `bootloader=limine` to make:\n```sh\ngit clone https://github.com/limine-bootloader/limine.git limine-prebuilt\ngit -C limine-prebuilt reset --hard 3f6a330\nmake run bootloader=limine\n```\nFeel free to try newer versions, however they may not work.\n\n\n## Targeting ARMv8 (aarch64)\nSupport for Theseus on aarch64 is an ongoing effort, but most of the core subsystems are complete.\n\nTo build and run Theseus on aarch64, first install the required dependencies:\n* On Debian-like Linux (Ubuntu, etc):\n  ```bash\n  sudo apt-get install qemu-system-arm gcc-aarch64-linux-gnu\n  ```\n* On Arch Linux:\n  ```bash\n  sudo pacman -S aarch64-linux-gnu-gcc qemu-system-aarch64\n  ```\n* On macOS, the `mac_os_build_setup` script should have already installed this for you, but if not:\n  ```zsh\n  brew install aarch64-elf-gcc aarch64-elf-binutils\n\n  ```\n\nThen, build Theseus and run it in QEMU:\n```bash\nmake ARCH=aarch64 run\n```\n\nDoing a \"full\" build of all Theseus crates isn't yet supported on aarch64,\nas our aarch64 support in Theseus doesn't yet cover *all* crates in the entire repo.\n\n\n## Using QEMU\nQEMU allows us to run Theseus quickly and easily in its own virtual machine.\nTo release your keyboard and mouse focus from the QEMU window, press <kbd>Ctrl</kbd> + <kbd>Alt</kbd> + <kbd>G</kbd>, or <kbd>Ctrl</kbd> + <kbd>Alt</kbd> on some systems, or just <kbd>Cmd</kbd> + <kbd>Tab</kbd> out to another app on macOS.\nTo exit QEMU, in the terminal window that you originally ran `make run`, press <kbd>Ctrl</kbd> + <kbd>A</kbd> then <kbd>X</kbd>, or you can also click the GUI `ⓧ` button on the title bar if running QEMU in graphical mode.\n\nTo investigate the hardware/machine state of the running QEMU VM, you can switch to the QEMU console by pressing <kbd>Ctrl</kbd> + <kbd>Alt</kbd> + <kbd>2</kbd>.\nSwitch back to the main window with <kbd>Ctrl</kbd> + <kbd>Alt</kbd> + <kbd>1</kbd>.\nOn Mac, manually select `VGA` or `compact_monitor0` under `View` from the QEMU menu bar.\n\nTo access/expose a PCI device in QEMU using PCI passthrough via VFIO, see [these instructions](https://theseus-os.github.io/Theseus/book/running/virtual_machine/pci_passthrough.html).\n\nLinux does not support the ICMP protocol (for `ping`) for guest OSes in QEMU by default, so to allow `ping` to work on Theseus, you may need to run the following in your Linux host machine:\n```sh\nsudo sh -c \"echo \\\"0 2147483647\\\" > /proc/sys/net/ipv4/ping_group_range\"\n```\n\n### KVM Support\nWhile not strictly required, KVM will speed up the execution of QEMU.\nTo install KVM, run the following command:    \n```sh\nsudo apt-get install kvm\n```  \nTo enable KVM support, add `host=yes` to your make command, e.g.,    \n```\nmake run host=yes\n```\n\nNote that KVM acceleration is only supported on native Linux hosts.\n\n\n# Documentation\nTheseus includes two forms of documentation:\n1. The [source-level documentation](https://theseus-os.github.io/Theseus/doc/___Theseus_Crates___/index.html), generated from code and inline comments (via *rustdoc*).\n    * Intended for Theseus developers and contributors, or those who want low-level details.\n2. The [book-style documentation](https://theseus-os.github.io/Theseus/book/index.html), written in Markdown.\n    * Useful for high-level descriptions of design concepts and key components.\n\nTo build the documentation yourself, set up your local build environment and then run the following:\n```sh\nmake view-doc   ## for the source-level docs\nmake view-book  ## for the Theseus book\n```\n\n# Other\n\n## Booting on Real Hardware\nWe have tested Theseus on a variety of real machines, including Intel NUC devices, various Thinkpad laptops, and Supermicro servers. \nCurrently, we have only tested booting Theseus via USB or PXE using a traditional BIOS bootloader rather than UEFI, but UEFI is fully supported so it should work.\n\nTo boot over USB, simply run `make usb drive=sdc`, in which `sdc` is the device node for the USB disk itself *(**not a partition** like sdc2)* to which you want to write the OS image.\nOn WSL or other host environments where `/dev` device nodes don't exist, you can simply run `make iso` and burn the `.iso` file in the `build/` directory to a USB, e.g., using [Rufus](https://rufus.ie/) on Windows.\n\nTo boot Theseus over PXE (network boot), see [this set of separate instructions](https://theseus-os.github.io/Theseus/book/running/pxe.html).\n\n\n## Debugging Theseus on QEMU\nGDB has built-in support for QEMU, but it doesn't play nicely with OSes that run in 64-bit long mode. In order to get it working properly with our OS in Rust, we need to patch it and build it locally. The hard part has already been done for us ([details here](https://os.phil-opp.com/set-up-gdb/)), so we can just quickly set it up with the following commands.  \n\n1. Install the following packages:\n    ```\n    sudo apt-get install texinfo flex bison python-dev ncurses-dev\n    ```\n\n2. From the base Theseus directory, run this script to download and build GDB from an existing patched repo:\n    ```\n    curl -sf https://raw.githubusercontent.com/phil-opp/binutils-gdb/rust-os/build-rust-os-gdb.sh | sh\n    ```\n    After that, you should have a `rust-os-gdb` directory that contains the `gdb` executables and scripts. \n\n3. Run Theseus in QEMU using `make run` (or `make run_pause` to pause QEMU until we attach GDB).\n\n4. In another terminal window, run the following to start GDB and attach it to the running QEMU instance:\n    ```\n    make gdb \n    ```\n    QEMU will be paused until we move the debugger forward, with standard GDB commands like `n` to step through the next instruction or `c` to continue execution. Any standard GDB commands will now work.\n\n### Connecting GDB to aarch64 Theseus on QEMU\nWe don't yet have a patched version of GDB for aarch64 targets, but we can use the existing `gdb-multiarch` package to \n\n1. Install the required package:\n    ```sh\n    sudo apt-get install gdb-multiarch\n    ```\n\n2. Build Theseus for aarch64 and run it in QEMU:\n    ```sh\n    make ARCH=aarch64 run ## or use `run_pause`\n    ```\n3. In another terminal window, run the following to start GDB and attach it to the running QEMU instance:\n    ```sh\n    gdb-multiarch -ex \"target remote :1234\"\n    ```\n\n4. Within GDB, symbols aren't yet supported, but you can view assembly code with `layout asm` and set breakpoints on virtual addresses.\n\n## IDE Setup  \nOur personal preference is to use VS Code, which has excellent cross-platform support for Rust. Other options are available [here](https://areweideyet.com/).\n\nFor VS Code, recommended plugins are:\n * **rust-analyzer**, by matklad\n * **Better TOML**, by bungcip\n * **x86 and x86_64 Assembly**, by 13xforever\n \n\n## Acknowledgements\nWe would like to express our thanks to the [OS Dev wiki](https://wiki.osdev.org/) and its community and to Philipp Oppermann's [blog_os](https://os.phil-opp.com/) for serving as excellent starting points for Theseus. The early days of Theseus's development progress are indebted to these resources. \n\n\n## License\nTheseus's source code is licensed under the MIT License. See the [LICENSE-MIT](LICENSE-MIT) file for more. \n\n\n## Contributing\nWe adhere to similar development and code style guidelines as the core Rust language project. See more [here](https://theseus-os.github.io/Theseus/book/contribute/contribute.html).\n\nPRs and issues are welcome from anyone; because Theseus is an experimental OS, certain features may be deprioritized or excluded from the main branch. Don't hesitate to ask or mention something though! :smile:\n"
        },
        {
          "name": "applications",
          "type": "tree",
          "content": null
        },
        {
          "name": "bochsrc.txt",
          "type": "blob",
          "size": 2.0908203125,
          "content": "# configuration file generated by Bochs\nplugin_ctrl: unmapped=1, biosdev=1, speaker=1, extfpuirq=1, parallel=1, serial=1, gameport=0, iodebug=1, e1000=1\nconfig_interface: textconfig\ndisplay_library: x\nmemory: host=256, guest=256\nboot: cdrom\nfloppy_bootsig_check: disabled=0\n# no floppya\n# no floppyb\nata0: enabled=1, ioaddr1=0x1f0, ioaddr2=0x3f0, irq=14\nata0-master: type=cdrom, path=\"build/theseus-x86_64.iso\", status=inserted\nata1: enabled=0, ioaddr1=0x170, ioaddr2=0x370, irq=15\nata2: enabled=0\nata3: enabled=0\npci: enabled=1, chipset=i440fx\nvga: extension=vbe, update_freq=5\n\ncpu: count=4, ips=40000000, model=bx_generic, reset_on_triple_fault=1, cpuid_limit_winnt=0, ignore_bad_msrs=1, mwait_is_nop=0\n#cpu: count=1, ips=4000000, model=corei7_sandy_bridge_2600k, reset_on_triple_fault=1, cpuid_limit_winnt=0, ignore_bad_msrs=1, mwait_is_nop=0\n#cpuid: family=6, model=0x03, stepping=3, mmx=1, apic=xapic, sse=sse2, sse4a=0, sep=1, aes=0, xsave=0, xsaveopt=0, movbe=0, adx=0, smep=0, avx=0, avx_f16c=0, avx_fma=0, bmi=0, xop=0, tbm=0, fma4=0, vmx=1, x86_64=1, 1g_pages=0, pcid=0, fsgsbase=0, mwait=1\ncpuid: apic=x2apic\ncpuid: vendor_string=\"GenuineIntel\"\ncpuid: brand_string=\"              Intel(R) Pentium(R) 4 CPU        \"\n\nprint_timestamps: enabled=0\ndebugger_log: -\nmagic_break: enabled=1\nprivate_colormap: enabled=0\nclock: sync=none, time0=local, rtc_sync=0\n# no cmosimage\n# no loader\nlog: -\nlogprefix: %t%e%d\n\n\npanic: action=ask\nerror: action=report\ninfo: action=ignore\ndebug: action=ignore\n#debug: action=ignore, cpu0=report\n#debug: action=ignore, cpu1=report\n\n\n## e1000 settings to match QEMU\n#e1000: enabled=1, mac=52:54:00:12:34:56, ethmod=slirp, script=slirp.conf\n#e1000: enabled=1, mac=52:54:00:12:34:56, ethmod=linux, ethdev=eth0\ne1000: enabled=1, mac=52:54:00:12:34:56, ethmod=vnet, ethdev=./temp\n\n\nkeyboard: type=mf, serial_delay=250, paste_delay=100000, keymap=\n#user_shortcut: keys=none\nmouse: enabled=0, type=ps2, toggle=ctrl+mbutton\n#parport1: enabled=1, file=\"\"\nparport1: enabled=0\nparport2: enabled=0\ncom1: enabled=1, mode=file, dev=\"serial.out\"\ncom2: enabled=0\ncom3: enabled=0\ncom4: enabled=0\nport_e9_hack: enabled=1\n"
        },
        {
          "name": "book",
          "type": "tree",
          "content": null
        },
        {
          "name": "c_test",
          "type": "tree",
          "content": null
        },
        {
          "name": "cfg",
          "type": "tree",
          "content": null
        },
        {
          "name": "compiler_plugins",
          "type": "tree",
          "content": null
        },
        {
          "name": "docker",
          "type": "tree",
          "content": null
        },
        {
          "name": "extra_files",
          "type": "tree",
          "content": null
        },
        {
          "name": "github_pages",
          "type": "tree",
          "content": null
        },
        {
          "name": "kernel",
          "type": "tree",
          "content": null
        },
        {
          "name": "libs",
          "type": "tree",
          "content": null
        },
        {
          "name": "libtheseus",
          "type": "tree",
          "content": null
        },
        {
          "name": "old_crates",
          "type": "tree",
          "content": null
        },
        {
          "name": "ports",
          "type": "tree",
          "content": null
        },
        {
          "name": "rust-toolchain.toml",
          "type": "blob",
          "size": 0.3271484375,
          "content": "[toolchain]\nchannel = \"nightly-2023-10-27\"\ncomponents = [ \"rust-src\", \"clippy\" ]\n## Rustup always installs the host target by default, so we don't need to specify it here.\n## All we need to specify is the uefi targets used to build our `uefi-bootloader`.\ntargets = [ \"x86_64-unknown-uefi\", \"aarch64-unknown-uefi\" ]\nprofile = \"default\"\n"
        },
        {
          "name": "rustfmt.toml",
          "type": "blob",
          "size": 0.1865234375,
          "content": "ignore = [\n    \"/applications\",\n    \"/compiler_plugins\",\n    \"/kernel\",\n    \"/libs\",\n    \"/libtheseus\",\n    \"/old_crates\",\n    \"/ports\",\n    \"/theseus_features\",\n    \"/tlibc\",\n    \"/tools\"\n]\n"
        },
        {
          "name": "scripts",
          "type": "tree",
          "content": null
        },
        {
          "name": "slirp.conf",
          "type": "blob",
          "size": 1.2783203125,
          "content": "# slirp config\n# The line above is mandatory\n\n# Supported options:\n#\n# RESTRICTED  if set to 1, only built-in services are available\n# NET         base IP address of the virtual network\n# MASK        netmask of the virtual network\n# HOST        IP address of the DHCP and TFTP server\n# HOSTNAME    DHCP client hostname\n# DHCPSTART   start address of DHCP pool\n# DNS         IP address of the virtual DNS server\n# BOOTFILE    boot filename returned by DHCP\n# DNSSEARCH   comma-separated list of DNS suffixes to search (DHCP extension)\n# SMB_EXPORT  absolute path to the shared folder (non-Windows SMB support)\n# SMB_SRV     alternative IP address of the SMB server (default is 10.0.2.4)\n# HOSTFWD     map guest port to host port for host-to-guest access\n#             (format: protocol:hostaddr:hostport-guestaddr:guestport)\n\n# This is the default (classic slirp) setup\nrestricted = 0\nnet        = 10.0.2.0\nmask       = 255.255.255.0\nhost       = 10.0.2.2\ndhcpstart  = 10.0.2.15\ndns        = 10.0.2.2\n\n# This is the vnet setup\n# restricted = 1\n# net        = 192.168.10.0\n# mask       = 255.255.255.0\n# host       = 192.168.10.1\n# dhcpstart  = 192.168.10.2\n# dns        = 0.0.0.0\n# bootfile   = pxelinux.0\n\n# Host forwarding example (access guest SSH server from host port 12345)\n# hostfwd    = tcp::12345-:22\n"
        },
        {
          "name": "theseus_features",
          "type": "tree",
          "content": null
        },
        {
          "name": "tlibc",
          "type": "tree",
          "content": null
        },
        {
          "name": "tools",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}