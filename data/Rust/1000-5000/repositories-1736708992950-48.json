{
  "metadata": {
    "timestamp": 1736708992950,
    "page": 48,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjUw",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "dtolnay/proc-macro-workshop",
      "stars": 4310,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.021484375,
          "content": "Cargo.lock\ntarget\nwip\n"
        },
        {
          "name": ".template",
          "type": "tree",
          "content": null
        },
        {
          "name": "Cargo.toml",
          "type": "blob",
          "size": 0.3125,
          "content": "[package]\nname = \"proc-macro-workshop\"\nversion = \"0.0.0\"\nedition = \"2021\"\npublish = false\n\n[workspace]\n\n[[bin]]\nname = \"workshop\"\npath = \"main.rs\"\n\n[dependencies]\nbitfield = { path = \"bitfield\" }\nderive_builder = { path = \"builder\" }\nderive_debug = { path = \"debug\" }\nseq = { path = \"seq\" }\nsorted = { path = \"sorted\" }\n"
        },
        {
          "name": "LICENSE-APACHE",
          "type": "blob",
          "size": 9.4951171875,
          "content": "                              Apache License\n                        Version 2.0, January 2004\n                     http://www.apache.org/licenses/\n\nTERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n1. Definitions.\n\n   \"License\" shall mean the terms and conditions for use, reproduction,\n   and distribution as defined by Sections 1 through 9 of this document.\n\n   \"Licensor\" shall mean the copyright owner or entity authorized by\n   the copyright owner that is granting the License.\n\n   \"Legal Entity\" shall mean the union of the acting entity and all\n   other entities that control, are controlled by, or are under common\n   control with that entity. For the purposes of this definition,\n   \"control\" means (i) the power, direct or indirect, to cause the\n   direction or management of such entity, whether by contract or\n   otherwise, or (ii) ownership of fifty percent (50%) or more of the\n   outstanding shares, or (iii) beneficial ownership of such entity.\n\n   \"You\" (or \"Your\") shall mean an individual or Legal Entity\n   exercising permissions granted by this License.\n\n   \"Source\" form shall mean the preferred form for making modifications,\n   including but not limited to software source code, documentation\n   source, and configuration files.\n\n   \"Object\" form shall mean any form resulting from mechanical\n   transformation or translation of a Source form, including but\n   not limited to compiled object code, generated documentation,\n   and conversions to other media types.\n\n   \"Work\" shall mean the work of authorship, whether in Source or\n   Object form, made available under the License, as indicated by a\n   copyright notice that is included in or attached to the work\n   (an example is provided in the Appendix below).\n\n   \"Derivative Works\" shall mean any work, whether in Source or Object\n   form, that is based on (or derived from) the Work and for which the\n   editorial revisions, annotations, elaborations, or other modifications\n   represent, as a whole, an original work of authorship. For the purposes\n   of this License, Derivative Works shall not include works that remain\n   separable from, or merely link (or bind by name) to the interfaces of,\n   the Work and Derivative Works thereof.\n\n   \"Contribution\" shall mean any work of authorship, including\n   the original version of the Work and any modifications or additions\n   to that Work or Derivative Works thereof, that is intentionally\n   submitted to Licensor for inclusion in the Work by the copyright owner\n   or by an individual or Legal Entity authorized to submit on behalf of\n   the copyright owner. For the purposes of this definition, \"submitted\"\n   means any form of electronic, verbal, or written communication sent\n   to the Licensor or its representatives, including but not limited to\n   communication on electronic mailing lists, source code control systems,\n   and issue tracking systems that are managed by, or on behalf of, the\n   Licensor for the purpose of discussing and improving the Work, but\n   excluding communication that is conspicuously marked or otherwise\n   designated in writing by the copyright owner as \"Not a Contribution.\"\n\n   \"Contributor\" shall mean Licensor and any individual or Legal Entity\n   on behalf of whom a Contribution has been received by Licensor and\n   subsequently incorporated within the Work.\n\n2. Grant of Copyright License. Subject to the terms and conditions of\n   this License, each Contributor hereby grants to You a perpetual,\n   worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n   copyright license to reproduce, prepare Derivative Works of,\n   publicly display, publicly perform, sublicense, and distribute the\n   Work and such Derivative Works in Source or Object form.\n\n3. Grant of Patent License. Subject to the terms and conditions of\n   this License, each Contributor hereby grants to You a perpetual,\n   worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n   (except as stated in this section) patent license to make, have made,\n   use, offer to sell, sell, import, and otherwise transfer the Work,\n   where such license applies only to those patent claims licensable\n   by such Contributor that are necessarily infringed by their\n   Contribution(s) alone or by combination of their Contribution(s)\n   with the Work to which such Contribution(s) was submitted. If You\n   institute patent litigation against any entity (including a\n   cross-claim or counterclaim in a lawsuit) alleging that the Work\n   or a Contribution incorporated within the Work constitutes direct\n   or contributory patent infringement, then any patent licenses\n   granted to You under this License for that Work shall terminate\n   as of the date such litigation is filed.\n\n4. Redistribution. You may reproduce and distribute copies of the\n   Work or Derivative Works thereof in any medium, with or without\n   modifications, and in Source or Object form, provided that You\n   meet the following conditions:\n\n   (a) You must give any other recipients of the Work or\n       Derivative Works a copy of this License; and\n\n   (b) You must cause any modified files to carry prominent notices\n       stating that You changed the files; and\n\n   (c) You must retain, in the Source form of any Derivative Works\n       that You distribute, all copyright, patent, trademark, and\n       attribution notices from the Source form of the Work,\n       excluding those notices that do not pertain to any part of\n       the Derivative Works; and\n\n   (d) If the Work includes a \"NOTICE\" text file as part of its\n       distribution, then any Derivative Works that You distribute must\n       include a readable copy of the attribution notices contained\n       within such NOTICE file, excluding those notices that do not\n       pertain to any part of the Derivative Works, in at least one\n       of the following places: within a NOTICE text file distributed\n       as part of the Derivative Works; within the Source form or\n       documentation, if provided along with the Derivative Works; or,\n       within a display generated by the Derivative Works, if and\n       wherever such third-party notices normally appear. The contents\n       of the NOTICE file are for informational purposes only and\n       do not modify the License. You may add Your own attribution\n       notices within Derivative Works that You distribute, alongside\n       or as an addendum to the NOTICE text from the Work, provided\n       that such additional attribution notices cannot be construed\n       as modifying the License.\n\n   You may add Your own copyright statement to Your modifications and\n   may provide additional or different license terms and conditions\n   for use, reproduction, or distribution of Your modifications, or\n   for any such Derivative Works as a whole, provided Your use,\n   reproduction, and distribution of the Work otherwise complies with\n   the conditions stated in this License.\n\n5. Submission of Contributions. Unless You explicitly state otherwise,\n   any Contribution intentionally submitted for inclusion in the Work\n   by You to the Licensor shall be under the terms and conditions of\n   this License, without any additional terms or conditions.\n   Notwithstanding the above, nothing herein shall supersede or modify\n   the terms of any separate license agreement you may have executed\n   with Licensor regarding such Contributions.\n\n6. Trademarks. This License does not grant permission to use the trade\n   names, trademarks, service marks, or product names of the Licensor,\n   except as required for reasonable and customary use in describing the\n   origin of the Work and reproducing the content of the NOTICE file.\n\n7. Disclaimer of Warranty. Unless required by applicable law or\n   agreed to in writing, Licensor provides the Work (and each\n   Contributor provides its Contributions) on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n   implied, including, without limitation, any warranties or conditions\n   of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n   PARTICULAR PURPOSE. You are solely responsible for determining the\n   appropriateness of using or redistributing the Work and assume any\n   risks associated with Your exercise of permissions under this License.\n\n8. Limitation of Liability. In no event and under no legal theory,\n   whether in tort (including negligence), contract, or otherwise,\n   unless required by applicable law (such as deliberate and grossly\n   negligent acts) or agreed to in writing, shall any Contributor be\n   liable to You for damages, including any direct, indirect, special,\n   incidental, or consequential damages of any character arising as a\n   result of this License or out of the use or inability to use the\n   Work (including but not limited to damages for loss of goodwill,\n   work stoppage, computer failure or malfunction, or any and all\n   other commercial damages or losses), even if such Contributor\n   has been advised of the possibility of such damages.\n\n9. Accepting Warranty or Additional Liability. While redistributing\n   the Work or Derivative Works thereof, You may choose to offer,\n   and charge a fee for, acceptance of support, warranty, indemnity,\n   or other liability obligations and/or rights consistent with this\n   License. However, in accepting such obligations, You may act only\n   on Your own behalf and on Your sole responsibility, not on behalf\n   of any other Contributor, and only if You agree to indemnify,\n   defend, and hold each Contributor harmless for any liability\n   incurred by, or claims asserted against, such Contributor by reason\n   of your accepting any such warranty or additional liability.\n\nEND OF TERMS AND CONDITIONS\n"
        },
        {
          "name": "LICENSE-MIT",
          "type": "blob",
          "size": 0.9990234375,
          "content": "Permission is hereby granted, free of charge, to any\nperson obtaining a copy of this software and associated\ndocumentation files (the \"Software\"), to deal in the\nSoftware without restriction, including without\nlimitation the rights to use, copy, modify, merge,\npublish, distribute, sublicense, and/or sell copies of\nthe Software, and to permit persons to whom the Software\nis furnished to do so, subject to the following\nconditions:\n\nThe above copyright notice and this permission notice\nshall be included in all copies or substantial portions\nof the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF\nANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED\nTO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A\nPARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT\nSHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\nOF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR\nIN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\nDEALINGS IN THE SOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 16.66796875,
          "content": "# Rust Latam: procedural macros workshop\n\n*This repo contains a selection of projects designed to learn to write Rust\nprocedural macros &mdash; Rust code that generates Rust code.*\n\n*Each of these projects is drawn closely from a compelling real use case. Out of\nthe 5 projects here, 3 are macros that I have personally implemented in\nindustrial codebases for work, and the other 2 exist as libraries on crates.io\nby other authors.*\n\n<br>\n\n## Contents\n\n- [**Suggested prerequisites**](#suggested-prerequisites)\n- [**Projects**](#projects) — Introduction to each of the projects\n  - [**Derive macro:** `derive(Builder)`](#derive-macro-derivebuilder)\n  - [**Derive macro:** `derive(CustomDebug)`](#derive-macro-derivecustomdebug)\n  - [**Function-like macro:** `seq!`](#function-like-macro-seq)\n  - [**Attribute macro:** `#[sorted]`](#attribute-macro-sorted)\n  - [**Attribute macro:** `#[bitfield]`](#attribute-macro-bitfield)\n  - [**Project recommendations**](#project-recommendations) — What to work on\n    depending on your interests\n- [**Test harness**](#test-harness) — Explanation of how testing is set up\n- [**Workflow**](#workflow) — Recommended way to work through the workshop\n- [**Debugging tips**](#debugging-tips)\n\n<br>\n\n## Suggested prerequisites\n\nThis workshop covers attribute macros, derive macros, and function-like\nprocedural macros.\n\nBe aware that the content of the workshop and the explanations in this repo will\nassume a working understanding of structs, enums, traits, trait impls, generic\nparameters, and trait bounds. You are welcome to dive into the workshop with any\nlevel of experience with Rust, but you may find that these basics are far easier\nto learn for the first time outside of the context of macros.\n\n<br>\n\n## Projects\n\nHere is an introduction to each of the projects. At the bottom, I give\nrecommendations for what order to tackle them based on your interests. Note that\neach of these projects goes into more depth than what is described in the\nintroduction here.\n\n### Derive macro: `derive(Builder)`\n\nThis macro generates the boilerplate code involved in implementing the [builder\npattern] in Rust. Builders are a mechanism for instantiating structs, especially\nstructs with many fields, and especially if many of those fields are optional or\nthe set of fields may need to grow backward compatibly over time.\n\n[builder pattern]: https://en.wikipedia.org/wiki/Builder_pattern\n\nThere are a few different possibilities for expressing builders in Rust. Unless\nyou have a strong pre-existing preference, to keep things simple for this\nproject I would recommend following the example of the standard library's\n[`std::process::Command`] builder in which the setter methods each receive and\nreturn `&mut self` to allow chained method calls.\n\n[`std::process::Command`]: https://doc.rust-lang.org/std/process/struct.Command.html\n\nCallers will invoke the macro as follows.\n\n```rust\nuse derive_builder::Builder;\n\n#[derive(Builder)]\npub struct Command {\n    executable: String,\n    #[builder(each = \"arg\")]\n    args: Vec<String>,\n    current_dir: Option<String>,\n}\n\nfn main() {\n    let command = Command::builder()\n        .executable(\"cargo\".to_owned())\n        .arg(\"build\".to_owned())\n        .arg(\"--release\".to_owned())\n        .build()\n        .unwrap();\n\n    assert_eq!(command.executable, \"cargo\");\n}\n```\n\nThis project covers:\n\n- traversing syntax trees;\n- constructing output source code;\n- processing helper attributes to customize the generated code.\n\n*Project skeleton is located under the <kbd>builder</kbd> directory.*\n\n### Derive macro: `derive(CustomDebug)`\n\nThis macro implements a derive for the standard library [`std::fmt::Debug`]\ntrait that is more customizable than the similar `Debug` derive macro exposed by\nthe standard library.\n\n[`std::fmt::Debug`]: https://doc.rust-lang.org/std/fmt/trait.Debug.html\n\nIn particular, we'd like to be able to select the formatting used for individual\nstruct fields by providing a format string in the style expected by Rust string\nformatting macros like `format!` and `println!`.\n\n```rust\nuse derive_debug::CustomDebug;\n\n#[derive(CustomDebug)]\npub struct Field {\n    name: String,\n    #[debug = \"0b{:08b}\"]\n    bitmask: u8,\n}\n```\n\nHere, one possible instance of the struct above might be printed by its\ngenerated `Debug` impl like this:\n\n```console\nField { name: \"st0\", bitmask: 0b00011100 }\n```\n\nThis project covers:\n\n- traversing syntax trees;\n- constructing output source code;\n- processing helper attributes;\n- dealing with lifetime parameters and type parameters;\n- inferring trait bounds on generic parameters of trait impls;\n- limitations of derive's ability to emit universally correct trait bounds.\n\n*Project skeleton is located under the <kbd>debug</kbd> directory.*\n\n### Function-like macro: `seq!`\n\nThis macro provides a syntax for stamping out sequentially indexed copies of an\narbitrary chunk of code.\n\nFor example our application may require an enum with sequentially numbered\nvariants like `Cpu0` `Cpu1` `Cpu2` ... `Cpu511`. But note that the same `seq!`\nmacro should work for any sort of compile-time loop; there is nothing specific\nto emitting enum variants. A different caller might use it for generating an\nexpression like `tuple.0 + tuple.1 + ... + tuple.511`.\n\n```rust\nuse seq::seq;\n\nseq!(N in 0..512 {\n    #[derive(Copy, Clone, PartialEq, Debug)]\n    pub enum Processor {\n        #(\n            Cpu~N,\n        )*\n    }\n});\n\nfn main() {\n    let cpu = Processor::Cpu8;\n\n    assert_eq!(cpu as u8, 8);\n    assert_eq!(cpu, Processor::Cpu8);\n}\n```\n\nThis project covers:\n\n- parsing custom syntax;\n- low-level representation of token streams;\n- constructing output source code.\n\n*Project skeleton is located under the <kbd>seq</kbd> directory.*\n\n### Attribute macro: `#[sorted]`\n\nA macro for when your coworkers (or you yourself) cannot seem to keep enum\nvariants in sorted order when adding variants or refactoring. The macro will\ndetect unsorted variants at compile time and emit an error pointing out which\nvariants are out of order.\n\n```rust\n#[sorted]\n#[derive(Debug)]\npub enum Error {\n    BlockSignal(signal::Error),\n    CreateCrasClient(libcras::Error),\n    CreateEventFd(sys_util::Error),\n    CreateSignalFd(sys_util::SignalFdError),\n    CreateSocket(io::Error),\n    DetectImageType(qcow::Error),\n    DeviceJail(io_jail::Error),\n    NetDeviceNew(virtio::NetError),\n    SpawnVcpu(io::Error),\n}\n```\n\nThis project covers:\n\n- compile-time error reporting;\n- application of visitor pattern to traverse a syntax tree;\n- limitations of the currently stable macro API and some ways to work around\n  them.\n\n*Project skeleton is located under the <kbd>sorted</kbd> directory.*\n\n### Attribute macro: `#[bitfield]`\n\nThis macro provides a mechanism for defining structs in a packed binary\nrepresentation with access to ranges of bits, similar to the language-level\nsupport for [bit fields in C].\n\n[bit fields in C]: https://en.cppreference.com/w/cpp/language/bit_field\n\nThe macro will conceptualize one of these structs as a sequence of bits 0..N.\nThe bits are grouped into fields in the order specified by a struct written by\nthe caller. The `#[bitfield]` attribute rewrites the caller's struct into a\nprivate byte array representation with public getter and setter methods for each\nfield.\n\nThe total number of bits N is required to be a multiple of 8 (this will be\nchecked at compile time).\n\nFor example, the following invocation builds a struct with a total size of 32\nbits or 4 bytes. It places field `a` in the least significant bit of the first\nbyte, field `b` in the next three least significant bits, field `c` in the\nremaining four most significant bits of the first byte, and field `d` spanning\nthe next three bytes.\n\n```rust\nuse bitfield::*;\n\n#[bitfield]\npub struct MyFourBytes {\n    a: B1,\n    b: B3,\n    c: B4,\n    d: B24,\n}\n```\n\n```text\n                               least significant bit of third byte\n                                 ┊           most significant\n                                 ┊             ┊\n                                 ┊             ┊\n║  first byte   ║  second byte  ║  third byte   ║  fourth byte  ║\n╟───────────────╫───────────────╫───────────────╫───────────────╢\n║▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒║\n╟─╫─────╫───────╫───────────────────────────────────────────────╢\n║a║  b  ║   c   ║                       d                       ║\n                 ┊                                             ┊\n                 ┊                                             ┊\n               least significant bit of d         most significant\n```\n\nThe code emitted by the `#[bitfield]` macro for this struct would be as follows.\nNote that the field getters and setters use whichever of `u8`, `u16`, `u32`,\n`u64` is the smallest while being at least as large as the number of bits in\nthe field.\n\n```rust\nimpl MyFourBytes {\n    // Initializes all fields to 0.\n    pub fn new() -> Self;\n\n    // Field getters and setters:\n    pub fn get_a(&self) -> u8;\n    pub fn set_a(&mut self, val: u8);\n    pub fn get_b(&self) -> u8;\n    pub fn set_b(&mut self, val: u8);\n    pub fn get_c(&self) -> u8;\n    pub fn set_c(&mut self, val: u8);\n    pub fn get_d(&self) -> u32;\n    pub fn set_d(&mut self, val: u32);\n}\n```\n\nThis project covers:\n\n- traversing syntax trees;\n- processing helper attributes;\n- constructing output source code;\n- interacting with traits and structs other than from the standard library;\n- techniques for compile-time assertions that require type information, by\n  leveraging the trait system in interesting ways from generated code;\n- tricky code.\n\n*Project skeleton is located under the <kbd>bitfield</kbd> directory.*\n\n### Project recommendations\n\nIf this is your first time working with procedural macros, I would recommend\nstarting with the `derive(Builder)` project. This will get you comfortable with\ntraversing syntax trees and constructing output source code. These are the two\nfundamental components of a procedural macro.\n\nAfter that, it would be equally reasonable to jump to any of\n`derive(CustomDebug)`, `seq!`, or `#[sorted]`.\n\n- Go for `derive(CustomDebug)` if you are interested in exploring how macros\n  manipulate trait bounds, which is one of the most complicated aspects of\n  code generation in Rust involving generic code like [Serde]. This project\n  provides an approachable introduction to trait bounds and digs into many of\n  the challenging aspects.\n\n- Go for `seq!` if you are interested in parsing a custom input syntax yourself.\n  The other projects will all mostly rely on parsers that have already been\n  written and distributed as a library, since their input is ordinary Rust\n  syntax.\n\n- Go for `#[sorted]` if you are interested in generating diagnostics (custom\n  errors) via a macro. Part of this project also covers a different way of\n  processing input syntax trees; the other projects will do most things through\n  `if let`. The visitor approach is better suited to certain types of macros\n  involving statements or expressions as we'll see here when checking that\n  `match` arms are sorted.\n\n[Serde]: https://serde.rs/\n\nI would recommend starting on `#[bitfield]` only after you feel you have a\nstrong grasp on at least two of the other projects. Note that completing the\nfull intended design will involve writing at least one of all three types of\nprocedural macros and substantially more code than the other projects.\n\n<br>\n\n## Test harness\n\nTesting macros thoroughly tends to be tricky. Rust and Cargo have a built-in\ntesting framework via `cargo test` which can work for testing the success cases,\nbut we also really care that our macros produce good error message when they\ndetect a problem at compile time; Cargo isn't able to say that failing to\ncompile is considered a success, and isn't able to compare that the error\nmessage produced by the compiler is exactly what we expect.\n\nThe project skeletons in this repository use an alternative test harness called\n[trybuild].\n\n[trybuild]: https://github.com/dtolnay/trybuild\n\n<p align=\"center\">\n<a href=\"#test-harness\">\n<img src=\"https://user-images.githubusercontent.com/1940490/55197640-eb390080-5191-11e9-8c1f-1183935c0c26.png\" width=\"600\">\n</a>\n</p>\n\nThe test harness is geared toward iterating on the implementation of a\nprocedural macro, observing the errors emitted by failed executions of the\nmacro, and testing that those errors are as expected.\n\n<br>\n\n## Workflow\n\nEvery project has a test suite already written under its <kbd>tests</kbd>\ndirectory. (But feel free to add more tests, remove tests for functionality you\ndon't want to implement, or modify tests as you see fit to align with your\nimplementation.)\n\nRun `cargo test` inside any of the 5 top-level project directories to run the\ntest suite for that project.\n\nInitially every projects starts with all of its tests disabled. Open up the\nproject's *tests/progress.rs* file and enable tests one at a time as you work\nthrough the implementation. **The test files (for example *tests/01-parse.rs*)\neach contain a comment explaining what functionality is tested and giving some\ntips for how to implement it.** I recommend working through tests in numbered\norder, each time enabling one more test and getting it passing before moving on.\n\nTests come in two flavors: tests that should compile+run successfully, and tests\nthat should fail to compile with a specific error message.\n\nIf a test should compile and run successfully, but fails, the test runner will\nsurface the compiler error or runtime error output.\n\n<p align=\"center\">\n<a href=\"#workflow\">\n<img src=\"https://user-images.githubusercontent.com/1940490/55197637-eb390080-5191-11e9-9197-5832071639ea.png\" width=\"600\">\n</a>\n</p>\n\nFor tests that should fail to compile, we compare the compilation output against\na file of expected errors for that test. If those errors match, the test is\nconsidered to pass. If they do not match, the test runner will surface the\nexpected and actual output.\n\nExpected output goes in a file with the same name as the test except with an\nextension of _*.stderr_ instead of _*.rs_.\n\n<p align=\"center\">\n<a href=\"#workflow\">\n<img src=\"https://user-images.githubusercontent.com/1940490/55197639-eb390080-5191-11e9-9c8f-a47cab89652d.png\" width=\"600\">\n</a>\n</p>\n\nIf there is no _*.stderr_ file for a test that is supposed to fail to compile,\nthe test runner will save the compiler's output into a directory called\n<kbd>wip</kbd> adjacent to the <kbd>tests</kbd> directory. So the way to update\nthe \"expected\" output is to delete the existing _*.stderr_ file, run the tests\nagain so that the output is written to *wip*, and then move the new output from\n*wip* to *tests*.\n\n<p align=\"center\">\n<a href=\"#workflow\">\n<img src=\"https://user-images.githubusercontent.com/1940490/55197642-ebd19700-5191-11e9-8f00-2d7c5f4be1a9.png\" width=\"600\">\n</a>\n</p>\n\n<br>\n\n## Debugging tips\n\nTo look at what code a macro is expanding into, install the [cargo expand] Cargo\nsubcommand and then run `cargo expand` in the repository root (outside of any of\nthe project directories) to expand the main.rs file in that directory. You can\ncopy any of the test cases into this main.rs and tweak it as you iterate on the\nmacro.\n\n[cargo expand]: https://github.com/dtolnay/cargo-expand\n\nIf a macro is emitting syntactically invalid code (not just code that fails\ntype-checking) then cargo expand will not be able to show it. Instead have the\nmacro print its generated TokenStream to stderr before returning the tokens.\n\n```rust\neprintln!(\"TOKENS: {}\", tokens);\n```\n\nThen a `cargo check` in the repository root (if you are iterating using main.rs)\nor `cargo test` in the corresponding project directory will display this output\nduring macro expansion.\n\nStderr is also a helpful way to see the structure of the syntax tree that gets\nparsed from the input of the macro.\n\n```rust\neprintln!(\"INPUT: {:#?}\", syntax_tree);\n```\n\nNote that in order for Syn's syntax tree types to provide Debug impls, you will\nneed to set `features = [\"extra-traits\"]` on the dependency on Syn. This is\nbecause adding hundreds of Debug impls adds an appreciable amount of compile\ntime to Syn, and we really only need this enabled while doing development on a\nmacro rather than when the finished macro is published to users.\n\n<br>\n\n### License\n\n<sup>\nLicensed under either of <a href=\"LICENSE-APACHE\">Apache License, Version\n2.0</a> or <a href=\"LICENSE-MIT\">MIT license</a> at your option.\n</sup>\n\n<br>\n\n<sub>\nUnless you explicitly state otherwise, any contribution intentionally submitted\nfor inclusion in this codebase by you, as defined in the Apache-2.0 license,\nshall be dual licensed as above, without any additional terms or conditions.\n</sub>\n"
        },
        {
          "name": "bitfield",
          "type": "tree",
          "content": null
        },
        {
          "name": "builder",
          "type": "tree",
          "content": null
        },
        {
          "name": "debug",
          "type": "tree",
          "content": null
        },
        {
          "name": "main.rs",
          "type": "blob",
          "size": 0.1552734375,
          "content": "// Write code here.\n//\n// To see what the code looks like after macro expansion:\n//     $ cargo expand\n//\n// To run the code:\n//     $ cargo run\n\nfn main() {}\n"
        },
        {
          "name": "seq",
          "type": "tree",
          "content": null
        },
        {
          "name": "sorted",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}