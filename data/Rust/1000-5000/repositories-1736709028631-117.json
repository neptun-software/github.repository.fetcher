{
  "metadata": {
    "timestamp": 1736709028631,
    "page": 117,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjEyMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "rust-ndarray/ndarray",
      "stars": 3694,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".git-blame-ignore-revs",
          "type": "blob",
          "size": 0.068359375,
          "content": "# rustfmt codebase (gh-1375)\nd07f5f33800e5240e7edb02bdbc4815ab30ef37e\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.0634765625,
          "content": "# Rust items\nCargo.lock\ntarget/\n\n# Editor settings\n.vscode\n.idea\n"
        },
        {
          "name": "Cargo.toml",
          "type": "blob",
          "size": 3.2939453125,
          "content": "[package]\n\nname = \"ndarray\"\nversion = \"0.16.1\"\nedition = \"2018\"\nrust-version = \"1.64\"\nauthors = [\n  \"Ulrik Sverdrup \\\"bluss\\\"\",\n  \"Jim Turner\"\n]\nlicense = \"MIT OR Apache-2.0\"\nreadme = \"README-crates.io.md\"\n\nrepository = \"https://github.com/rust-ndarray/ndarray\"\ndocumentation = \"https://docs.rs/ndarray/\"\n\ndescription = \"An n-dimensional array for general elements and for numerics. Lightweight array views and slicing; views support chunking and splitting.\"\n\nkeywords = [\"array\", \"data-structure\", \"multidimensional\", \"matrix\", \"blas\"]\ncategories = [\"data-structures\", \"science\"]\n\nexclude = [\"docgen/images/*\"]\nresolver = \"2\"\n\n[lib]\nname = \"ndarray\"\nbench = false\ntest = true\n\n[dependencies]\nnum-integer = { workspace = true }\nnum-traits = { workspace = true }\nnum-complex = { workspace = true }\n\napprox = { workspace = true, optional = true }\nrayon = { version = \"1.10.0\", optional = true }\n\n# Use via the `blas` crate feature\ncblas-sys = { workspace = true, optional = true }\nlibc = { version = \"0.2.82\", optional = true }\n\nmatrixmultiply = { version = \"0.3.2\", default-features = false, features=[\"cgemm\"] }\n\nserde = { version = \"1.0\", optional = true, default-features = false, features = [\"alloc\"] }\nrawpointer = { version = \"0.2\" }\n\n[dev-dependencies]\ndefmac = \"0.2\"\nquickcheck = { workspace = true }\napprox = { workspace = true, default-features = true }\nitertools = { workspace = true }\nndarray-gen = { workspace = true }\n\n[features]\ndefault = [\"std\"]\n\n# Enable blas usage\n# See README for more instructions\nblas = [\"dep:cblas-sys\", \"dep:libc\"]\n\nserde = [\"dep:serde\"]\n# Old name for the serde feature\nserde-1 = [\"dep:serde\"]\n\n# These features are used for testing\ntest = []\n\n# This feature is used for docs\ndocs = [\"approx\", \"serde\", \"rayon\"]\n\nstd = [\"num-traits/std\", \"matrixmultiply/std\"]\nrayon = [\"dep:rayon\", \"std\"]\n\nmatrixmultiply-threading = [\"matrixmultiply/threading\"]\n\nportable-atomic-critical-section = [\"portable-atomic/critical-section\"]\n\n\n[target.'cfg(not(target_has_atomic = \"ptr\"))'.dependencies]\nportable-atomic = { version = \"1.6.0\" }\nportable-atomic-util = { version = \"0.2.0\", features = [ \"alloc\" ] }\n\n[workspace]\nmembers = [\n    \"ndarray-rand\",\n    \"crates/*\",\n]\ndefault-members = [\n    \".\",\n    \"ndarray-rand\",\n    \"crates/ndarray-gen\",\n    \"crates/numeric-tests\",\n    \"crates/serialization-tests\",\n    # exclude blas-tests and blas-mock-tests that activate \"blas\" feature\n]\n\n[workspace.dependencies]\nndarray = { version = \"0.16\", path = \".\", default-features = false }\nndarray-rand = { path = \"ndarray-rand\" }\nndarray-gen = { path = \"crates/ndarray-gen\" }\n\nnum-integer = { version = \"0.1.39\", default-features = false }\nnum-traits = { version = \"0.2\", default-features = false }\nnum-complex = { version = \"0.4\", default-features = false }\napprox = { version = \"0.5\", default-features = false }\nquickcheck = { version = \"1.0\", default-features = false }\nrand = { version = \"0.8.0\", features = [\"small_rng\"] }\nrand_distr = { version = \"0.4.0\" }\nitertools = { version = \"0.13.0\", default-features = false, features = [\"use_std\"] }\ncblas-sys = { version = \"0.1.4\", default-features = false }\n\n[profile.bench]\ndebug = true\n\n[profile.test.package.numeric-tests]\nopt-level = 2\n[profile.test.package.blas-tests]\nopt-level = 2\n\n[package.metadata.release]\nno-dev-version = true\ntag-name = \"{{version}}\"\n\n[package.metadata.docs.rs]\nfeatures = [\"docs\"]\n"
        },
        {
          "name": "LICENSE-APACHE",
          "type": "blob",
          "size": 10.5927734375,
          "content": "                              Apache License\n                        Version 2.0, January 2004\n                     http://www.apache.org/licenses/\n\nTERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n1. Definitions.\n\n   \"License\" shall mean the terms and conditions for use, reproduction,\n   and distribution as defined by Sections 1 through 9 of this document.\n\n   \"Licensor\" shall mean the copyright owner or entity authorized by\n   the copyright owner that is granting the License.\n\n   \"Legal Entity\" shall mean the union of the acting entity and all\n   other entities that control, are controlled by, or are under common\n   control with that entity. For the purposes of this definition,\n   \"control\" means (i) the power, direct or indirect, to cause the\n   direction or management of such entity, whether by contract or\n   otherwise, or (ii) ownership of fifty percent (50%) or more of the\n   outstanding shares, or (iii) beneficial ownership of such entity.\n\n   \"You\" (or \"Your\") shall mean an individual or Legal Entity\n   exercising permissions granted by this License.\n\n   \"Source\" form shall mean the preferred form for making modifications,\n   including but not limited to software source code, documentation\n   source, and configuration files.\n\n   \"Object\" form shall mean any form resulting from mechanical\n   transformation or translation of a Source form, including but\n   not limited to compiled object code, generated documentation,\n   and conversions to other media types.\n\n   \"Work\" shall mean the work of authorship, whether in Source or\n   Object form, made available under the License, as indicated by a\n   copyright notice that is included in or attached to the work\n   (an example is provided in the Appendix below).\n\n   \"Derivative Works\" shall mean any work, whether in Source or Object\n   form, that is based on (or derived from) the Work and for which the\n   editorial revisions, annotations, elaborations, or other modifications\n   represent, as a whole, an original work of authorship. For the purposes\n   of this License, Derivative Works shall not include works that remain\n   separable from, or merely link (or bind by name) to the interfaces of,\n   the Work and Derivative Works thereof.\n\n   \"Contribution\" shall mean any work of authorship, including\n   the original version of the Work and any modifications or additions\n   to that Work or Derivative Works thereof, that is intentionally\n   submitted to Licensor for inclusion in the Work by the copyright owner\n   or by an individual or Legal Entity authorized to submit on behalf of\n   the copyright owner. For the purposes of this definition, \"submitted\"\n   means any form of electronic, verbal, or written communication sent\n   to the Licensor or its representatives, including but not limited to\n   communication on electronic mailing lists, source code control systems,\n   and issue tracking systems that are managed by, or on behalf of, the\n   Licensor for the purpose of discussing and improving the Work, but\n   excluding communication that is conspicuously marked or otherwise\n   designated in writing by the copyright owner as \"Not a Contribution.\"\n\n   \"Contributor\" shall mean Licensor and any individual or Legal Entity\n   on behalf of whom a Contribution has been received by Licensor and\n   subsequently incorporated within the Work.\n\n2. Grant of Copyright License. Subject to the terms and conditions of\n   this License, each Contributor hereby grants to You a perpetual,\n   worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n   copyright license to reproduce, prepare Derivative Works of,\n   publicly display, publicly perform, sublicense, and distribute the\n   Work and such Derivative Works in Source or Object form.\n\n3. Grant of Patent License. Subject to the terms and conditions of\n   this License, each Contributor hereby grants to You a perpetual,\n   worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n   (except as stated in this section) patent license to make, have made,\n   use, offer to sell, sell, import, and otherwise transfer the Work,\n   where such license applies only to those patent claims licensable\n   by such Contributor that are necessarily infringed by their\n   Contribution(s) alone or by combination of their Contribution(s)\n   with the Work to which such Contribution(s) was submitted. If You\n   institute patent litigation against any entity (including a\n   cross-claim or counterclaim in a lawsuit) alleging that the Work\n   or a Contribution incorporated within the Work constitutes direct\n   or contributory patent infringement, then any patent licenses\n   granted to You under this License for that Work shall terminate\n   as of the date such litigation is filed.\n\n4. Redistribution. You may reproduce and distribute copies of the\n   Work or Derivative Works thereof in any medium, with or without\n   modifications, and in Source or Object form, provided that You\n   meet the following conditions:\n\n   (a) You must give any other recipients of the Work or\n       Derivative Works a copy of this License; and\n\n   (b) You must cause any modified files to carry prominent notices\n       stating that You changed the files; and\n\n   (c) You must retain, in the Source form of any Derivative Works\n       that You distribute, all copyright, patent, trademark, and\n       attribution notices from the Source form of the Work,\n       excluding those notices that do not pertain to any part of\n       the Derivative Works; and\n\n   (d) If the Work includes a \"NOTICE\" text file as part of its\n       distribution, then any Derivative Works that You distribute must\n       include a readable copy of the attribution notices contained\n       within such NOTICE file, excluding those notices that do not\n       pertain to any part of the Derivative Works, in at least one\n       of the following places: within a NOTICE text file distributed\n       as part of the Derivative Works; within the Source form or\n       documentation, if provided along with the Derivative Works; or,\n       within a display generated by the Derivative Works, if and\n       wherever such third-party notices normally appear. The contents\n       of the NOTICE file are for informational purposes only and\n       do not modify the License. You may add Your own attribution\n       notices within Derivative Works that You distribute, alongside\n       or as an addendum to the NOTICE text from the Work, provided\n       that such additional attribution notices cannot be construed\n       as modifying the License.\n\n   You may add Your own copyright statement to Your modifications and\n   may provide additional or different license terms and conditions\n   for use, reproduction, or distribution of Your modifications, or\n   for any such Derivative Works as a whole, provided Your use,\n   reproduction, and distribution of the Work otherwise complies with\n   the conditions stated in this License.\n\n5. Submission of Contributions. Unless You explicitly state otherwise,\n   any Contribution intentionally submitted for inclusion in the Work\n   by You to the Licensor shall be under the terms and conditions of\n   this License, without any additional terms or conditions.\n   Notwithstanding the above, nothing herein shall supersede or modify\n   the terms of any separate license agreement you may have executed\n   with Licensor regarding such Contributions.\n\n6. Trademarks. This License does not grant permission to use the trade\n   names, trademarks, service marks, or product names of the Licensor,\n   except as required for reasonable and customary use in describing the\n   origin of the Work and reproducing the content of the NOTICE file.\n\n7. Disclaimer of Warranty. Unless required by applicable law or\n   agreed to in writing, Licensor provides the Work (and each\n   Contributor provides its Contributions) on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n   implied, including, without limitation, any warranties or conditions\n   of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n   PARTICULAR PURPOSE. You are solely responsible for determining the\n   appropriateness of using or redistributing the Work and assume any\n   risks associated with Your exercise of permissions under this License.\n\n8. Limitation of Liability. In no event and under no legal theory,\n   whether in tort (including negligence), contract, or otherwise,\n   unless required by applicable law (such as deliberate and grossly\n   negligent acts) or agreed to in writing, shall any Contributor be\n   liable to You for damages, including any direct, indirect, special,\n   incidental, or consequential damages of any character arising as a\n   result of this License or out of the use or inability to use the\n   Work (including but not limited to damages for loss of goodwill,\n   work stoppage, computer failure or malfunction, or any and all\n   other commercial damages or losses), even if such Contributor\n   has been advised of the possibility of such damages.\n\n9. Accepting Warranty or Additional Liability. While redistributing\n   the Work or Derivative Works thereof, You may choose to offer,\n   and charge a fee for, acceptance of support, warranty, indemnity,\n   or other liability obligations and/or rights consistent with this\n   License. However, in accepting such obligations, You may act only\n   on Your own behalf and on Your sole responsibility, not on behalf\n   of any other Contributor, and only if You agree to indemnify,\n   defend, and hold each Contributor harmless for any liability\n   incurred by, or claims asserted against, such Contributor by reason\n   of your accepting any such warranty or additional liability.\n\nEND OF TERMS AND CONDITIONS\n\nAPPENDIX: How to apply the Apache License to your work.\n\n   To apply the Apache License to your work, attach the following\n   boilerplate notice, with the fields enclosed by brackets \"[]\"\n   replaced with your own identifying information. (Don't include\n   the brackets!)  The text should be enclosed in the appropriate\n   comment syntax for the file format. We also recommend that a\n   file or class name and description of purpose be included on the\n   same \"printed page\" as the copyright notice for easier\n   identification within third-party archives.\n\nCopyright [yyyy] [name of copyright owner]\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n\thttp://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n"
        },
        {
          "name": "LICENSE-MIT",
          "type": "blob",
          "size": 1.0927734375,
          "content": "Copyright (c) 2015 - 2021 Ulrik Sverdrup \"bluss\",\n\t\t\t  Jim Turner,\n\t\t\t  and ndarray developers\n\nPermission is hereby granted, free of charge, to any\nperson obtaining a copy of this software and associated\ndocumentation files (the \"Software\"), to deal in the\nSoftware without restriction, including without\nlimitation the rights to use, copy, modify, merge,\npublish, distribute, sublicense, and/or sell copies of\nthe Software, and to permit persons to whom the Software\nis furnished to do so, subject to the following\nconditions:\n\nThe above copyright notice and this permission notice\nshall be included in all copies or substantial portions\nof the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF\nANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED\nTO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A\nPARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT\nSHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\nOF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR\nIN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\nDEALINGS IN THE SOFTWARE.\n"
        },
        {
          "name": "README-crates.io.md",
          "type": "blob",
          "size": 0.8466796875,
          "content": "\n`ndarray` implements an *n*-dimensional container for general elements and for\nnumerics.\n\nIn *n*-dimensional we include for example 1-dimensional rows or columns,\n2-dimensional matrices, and higher dimensional arrays. If the array has *n*\ndimensions, then an element in the array is accessed by using that many indices.\nEach dimension is also called an *axis*.\n\n## Highlights\n\n- Generic *n*-dimensional array\n- Slicing, also with arbitrary step size, and negative indices to mean\n  elements from the end of the axis.\n- Views and subviews of arrays; iterators that yield subviews.\n- Higher order operations and arithmetic are performant\n- Array views can be used to slice and mutate any `[T]` data using\n  `ArrayView::from` and `ArrayViewMut::from`.\n- `Zip` for lock step function application across two or more arrays or other\n  item producers (`NdProducer` trait).\n"
        },
        {
          "name": "README-quick-start.md",
          "type": "blob",
          "size": 16.39453125,
          "content": "# Quickstart tutorial\n\nIf you are familiar with Python Numpy, do check out this [For Numpy User Doc](https://docs.rs/ndarray/0.13.0/ndarray/doc/ndarray_for_numpy_users/index.html)\nafter you go through this tutorial. \n\nYou can use [play.integer32.com](https://play.integer32.com/) to immediately try out the examples.\n\n## The Basics\n\nYou can create your first 2x3 floating-point ndarray as such: \n```rust\nuse ndarray::prelude::*;\n\nfn main() {\n    let a = array![\n                [1.,2.,3.], \n                [4.,5.,6.],\n            ]; \n    assert_eq!(a.ndim(), 2);         // get the number of dimensions of array a\n    assert_eq!(a.len(), 6);          // get the number of elements in array a\n    assert_eq!(a.shape(), [2, 3]);   // get the shape of array a\n    assert_eq!(a.is_empty(), false); // check if the array has zero elements\n\n    println!(\"{:?}\", a);\n}\n```\nThis code will create a simple array, then print it to stdout as such:\n```\n[[1.0, 2.0, 3.0],\n [4.0, 5.0, 6.0]], shape=[2, 3], strides=[3, 1], layout=C (0x1), const ndim=2\n```\n\n## Array Creation\n\n### Element type and dimensionality\n\nNow let's create more arrays. A common operation on matrices is to create a matrix full of 0's of certain dimensions. Let's try to do that with dimensions (3, 2, 4) using the `Array::zeros` function:\n```rust\nuse ndarray::prelude::*;\nuse ndarray::Array;\nfn main() {\n    let a = Array::zeros((3, 2, 4).f());\n    println!(\"{:?}\", a);\n}\n```\nUnfortunately, this code does not compile.\n```\n|    let a = Array::zeros((3, 2, 4).f());\n|        -   ^^^^^^^^^^^^ cannot infer type for type parameter `A`\n```\nIndeed, note that the compiler needs to infer the element type and dimensionality from context only. In this \ncase the compiler does not have enough information. To fix the code, we can explicitly give the element type through turbofish syntax, and let it infer the dimensionality type:\n\n```rust\nuse ndarray::prelude::*;\nuse ndarray::Array;\nfn main() {\n  let a = Array::<f64, _>::zeros((3, 2, 4).f());\n  println!(\"{:?}\", a);\n}\n```\nThis code now compiles to what we wanted:\n```\n[[[0.0, 0.0, 0.0, 0.0],\n  [0.0, 0.0, 0.0, 0.0]],\n\n [[0.0, 0.0, 0.0, 0.0],\n  [0.0, 0.0, 0.0, 0.0]],\n\n [[0.0, 0.0, 0.0, 0.0],\n  [0.0, 0.0, 0.0, 0.0]]], shape=[3, 2, 4], strides=[1, 3, 6], layout=F (0x2), const ndim=3\n```\n\nWe could also specify its dimensionality explicitly `Array::<f64, Ix3>::zeros(...)`, with`Ix3` standing for 3D array type. Phew! We achieved type safety. If you tried changing the code above to `Array::<f64, Ix3>::zeros((3, 2, 4, 5).f());`, which is not of dimension 3 anymore, Rust's type system would gracefully prevent you from compiling the code.\n\n### Creating arrays with different initial values and/or different types\n\nThe [`from_elem`](http://docs.rs/ndarray/latest/ndarray/struct.ArrayBase.html#method.from_elem) method allows initializing an array of given dimension to a specific value of any type:\n\n```rust\nuse ndarray::{Array, Ix3};\nfn main() {\n  let a = Array::<bool, Ix3>::from_elem((3, 2, 4), false);\n  println!(\"{:?}\", a);\n}\n```\n\n### Some common array initializing helper functions\n`linspace` - Create a 1-D array with 11 elements with values 0., …, 5.\n```rust\nuse ndarray::prelude::*;\nuse ndarray::{Array, Ix3};\nfn main() {\n  let a = Array::<f64, _>::linspace(0., 5., 11);\n  println!(\"{:?}\", a);\n}\n```\nThe output is:\n```\n[0.0, 0.5, 1.0, 1.5, 2.0, 2.5, 3.0, 3.5, 4.0, 4.5, 5.0], shape=[11], strides=[1], layout=C | F (0x3), const ndim=1\n```\n\nCommon array initializing methods include [`range`](https://docs.rs/ndarray/0.13.0/ndarray/struct.ArrayBase.html#method.range), [`logspace`](https://docs.rs/ndarray/0.13.0/ndarray/struct.ArrayBase.html#method.logspace), [`eye`](https://docs.rs/ndarray/0.13.0/ndarray/struct.ArrayBase.html#method.eye), [`ones`](https://docs.rs/ndarray/0.13.0/ndarray/struct.ArrayBase.html#method.ones)...\n\n## Basic operations\n\nBasic operations on arrays are all element-wise; you need to use specific methods for operations such as matrix multiplication (see later section).\n```rust\nuse ndarray::prelude::*;\nuse ndarray::Array;\nuse std::f64::INFINITY as inf;\n\nfn main() {\n    let a = array![\n                [10.,20.,30., 40.,], \n            ];\n    let b = Array::range(0., 4., 1.);  // [0., 1., 2., 3, ]\n\n    assert_eq!(&a + &b, array![[10., 21., 32., 43.,]]);  // Allocates a new array. Note the explicit `&`.\n    assert_eq!(&a - &b, array![[10., 19., 28., 37.,]]);\n    assert_eq!(&a * &b, array![[0., 20., 60., 120.,]]);\n    assert_eq!(&a / &b, array![[inf, 20., 15., 13.333333333333334,]]);\n}\n```\n\n\nNote that (for any binary operator `@`):\n* `&A @ &A` produces a new `Array`\n* `B @ A` consumes `B`, updates it with the result, and returns it\n* `B @ &A` consumes `B`, updates it with the result, and returns it\n* `C @= &A` performs an arithmetic operation in place\n\nTry removing all the `&` sign in front of `a` and `b` in the last example: it will not compile anymore because of those rules.\n\nFor more info checkout https://docs.rs/ndarray/latest/ndarray/struct.ArrayBase.html#arithmetic-operations\n\n\n\nSome operations have `_axis` appended to the function name: they generally take in a parameter of type `Axis` as one of their inputs,\nsuch as `sum_axis`:\n\n```rust\nuse ndarray::{aview0, aview1, arr2, Axis};\n\nfn main() {\n    let a = arr2(&[[1., 2., 3.],\n                   [4., 5., 6.]]);\n    assert!(\n        a.sum_axis(Axis(0)) == aview1(&[5., 7., 9.]) &&\n        a.sum_axis(Axis(1)) == aview1(&[6., 15.]) &&\n\n        a.sum_axis(Axis(0)).sum_axis(Axis(0)) == aview0(&21.) &&\n        a.sum_axis(Axis(0)).sum_axis(Axis(0)) == aview0(&a.sum())\n    );\n}\n```\n\n### Matrix product\n\n```rust\nuse ndarray::prelude::*;\nuse ndarray::Array;\n\nfn main() {\n    let a = array![\n                [10.,20.,30., 40.,], \n            ];\n    let b = Array::range(0., 4., 1.);     // b = [0., 1., 2., 3, ]\n    println!(\"a shape {:?}\", &a.shape());\n    println!(\"b shape {:?}\", &b.shape());\n    \n    let b = b.into_shape_with_order((4,1)).unwrap(); // reshape b to shape [4, 1]\n    println!(\"b shape after reshape {:?}\", &b.shape());\n    \n    println!(\"{}\", a.dot(&b));            // [1, 4] x [4, 1] -> [1, 1] \n    println!(\"{}\", a.t().dot(&b.t()));    // [4, 1] x [1, 4] -> [4, 4]\n}\n```\nThe output is:\n```\na shape [1, 4]\nb shape [4]\nb shape after reshape [4, 1]\n[[200]]\n[[0, 10, 20, 30],\n [0, 20, 40, 60],\n [0, 30, 60, 90],\n [0, 40, 80, 120]]\n```\n\n## Indexing, Slicing and Iterating\nOne-dimensional arrays can be indexed, sliced and iterated over, much like `numpy` arrays\n\n```rust\nuse ndarray::prelude::*;\nuse ndarray::Array;\n\nfn main() {\n    let a = Array::range(0., 10., 1.);\n\n    let mut a = a.mapv(|a: f64| a.powi(3));  // numpy equivlant of `a ** 3`; https://doc.rust-lang.org/nightly/std/primitive.f64.html#method.powi\n\n    println!(\"{}\", a);\n\n    println!(\"{}\", a[[2]]);\n    println!(\"{}\", a.slice(s![2]));\n\n    println!(\"{}\", a.slice(s![2..5]));\n\n    a.slice_mut(s![..6;2]).fill(1000.);  // numpy equivlant of `a[:6:2] = 1000`\n    println!(\"{}\", a);\n\n    for i in a.iter() {\n        print!(\"{}, \", i.powf(1./3.))\n    }\n}\n```\nThe output is:\n```\n[0, 1, 8, 27, 64, 125, 216, 343, 512, 729]\n8\n8\n[8, 27, 64]\n[1000, 1, 1000, 27, 1000, 125, 216, 343, 512, 729]\n9.999999999999998, 1, 9.999999999999998, 3, 9.999999999999998, 4.999999999999999, 5.999999999999999, 6.999999999999999, 7.999999999999999, 8.999999999999998,\n```\n\nFor more info about iteration see [Loops, Producers, and Iterators](https://docs.rs/ndarray/0.13.0/ndarray/struct.ArrayBase.html#loops-producers-and-iterators)\n\nLet's try a iterating over a 3D array with elements of type `isize`. This is how you index it: \n```rust\nuse ndarray::prelude::*;\n\nfn main() {\n    let a = array![\n                    [[  0,  1,  2],         // a 3D array  2 x 2 x 3\n                     [ 10, 12, 13]],\n\n                    [[100,101,102],\n                     [110,112,113]]\n                ];\n\n    let a = a.mapv(|a: isize| a.pow(1));  // numpy equivalent of `a ** 1`; \n                                          // This line does nothing except illustrating mapv with isize type \n    println!(\"a -> \\n{}\\n\", a);\n\n    println!(\"`a.slice(s![1, .., ..])` -> \\n{}\\n\", a.slice(s![1, .., ..]));\n\n    println!(\"`a.slice(s![.., .., 2])` -> \\n{}\\n\", a.slice(s![.., .., 2]));\n\n    println!(\"`a.slice(s![.., 1, 0..2])` -> \\n{}\\n\", a.slice(s![.., 1, 0..2]));\n\n    println!(\"`a.iter()` ->\");\n    for i in a.iter() {\n        print!(\"{}, \", i)  // flat out to every element\n    }\n\n    println!(\"\\n\\n`a.outer_iter()` ->\");\n    for i in a.outer_iter() {\n        print!(\"row: {}, \\n\", i)  // iterate through first dimension\n    }\n}\n```\nThe output is:\n```\na -> \n[[[0, 1, 2],\n  [10, 12, 13]],\n\n [[100, 101, 102],\n  [110, 112, 113]]]\n\n`a.slice(s![1, .., ..])` -> \n[[100, 101, 102],\n [110, 112, 113]]\n\n`a.slice(s![.., .., 2])` -> \n[[2, 13],\n [102, 113]]\n\n`a.slice(s![.., 1, 0..2])` -> \n[[10, 12],\n [110, 112]]\n\n`a.iter()` ->\n0, 1, 2, 10, 12, 13, 100, 101, 102, 110, 112, 113, \n\n`a.outer_iter()` ->\nrow: [[0, 1, 2],\n [10, 12, 13]], \nrow: [[100, 101, 102],\n [110, 112, 113]], \n```\n\n## Shape Manipulation\n\n### Changing the shape of an array\nThe shape of an array can be changed with the `into_shape_with_order` or `to_shape` method.\n\n````rust\nuse ndarray::prelude::*;\nuse ndarray::Array;\nuse std::iter::FromIterator;\n// use ndarray_rand::RandomExt;\n// use ndarray_rand::rand_distr::Uniform;\n\nfn main() {\n    // Or you may use ndarray_rand crate to generate random arrays\n    // let a = Array::random((2, 5), Uniform::new(0., 10.));\n    \n    let a = array![\n        [3., 7., 3., 4.],\n        [1., 4., 2., 2.],\n        [7., 2., 4., 9.]];\n        \n    println!(\"a = \\n{:?}\\n\", a);\n    \n    // use trait FromIterator to flatten a matrix to a vector\n    let b = Array::from_iter(a.iter());\n    println!(\"b = \\n{:?}\\n\", b);\n    \n    let c = b.into_shape_with_order([6, 2]).unwrap(); // consume b and generate c with new shape\n    println!(\"c = \\n{:?}\", c);\n}\n````\nThe output is:\n```\na = \n[[3.0, 7.0, 3.0, 4.0],\n [1.0, 4.0, 2.0, 2.0],\n [7.0, 2.0, 4.0, 9.0]], shape=[3, 4], strides=[4, 1], layout=C (0x1), const ndim=2\n\nb = \n[3.0, 7.0, 3.0, 4.0, 1.0, 4.0, 2.0, 2.0, 7.0, 2.0, 4.0, 9.0], shape=[12], strides=[1], layout=C | F (0x3), const ndim=1\n\nc = \n[[3.0, 7.0],\n [3.0, 4.0],\n [1.0, 4.0],\n [2.0, 2.0],\n [7.0, 2.0],\n [4.0, 9.0]], shape=[6, 2], strides=[2, 1], layout=C (0x1), const ndim=2\n```\n\n### Stacking/concatenating together different arrays\n\nThe `stack!` and `concatenate!` macros are helpful for stacking/concatenating\narrays. The `stack!` macro stacks arrays along a new axis, while the\n`concatenate!` macro concatenates arrays along an existing axis:\n\n```rust\nuse ndarray::prelude::*;\nuse ndarray::{concatenate, stack, Axis};\n\nfn main() {\n    let a = array![\n        [3., 7., 8.],\n        [5., 2., 4.],\n    ];\n\n    let b = array![\n        [1., 9., 0.],\n        [5., 4., 1.],\n    ];\n\n    println!(\"stack, axis 0:\\n{:?}\\n\", stack![Axis(0), a, b]);\n    println!(\"stack, axis 1:\\n{:?}\\n\", stack![Axis(1), a, b]);\n    println!(\"stack, axis 2:\\n{:?}\\n\", stack![Axis(2), a, b]);\n    println!(\"concatenate, axis 0:\\n{:?}\\n\", concatenate![Axis(0), a, b]);\n    println!(\"concatenate, axis 1:\\n{:?}\\n\", concatenate![Axis(1), a, b]);\n}\n```\nThe output is:\n```\nstack, axis 0:\n[[[3.0, 7.0, 8.0],\n  [5.0, 2.0, 4.0]],\n\n [[1.0, 9.0, 0.0],\n  [5.0, 4.0, 1.0]]], shape=[2, 2, 3], strides=[6, 3, 1], layout=Cc (0x5), const ndim=3\n\nstack, axis 1:\n[[[3.0, 7.0, 8.0],\n  [1.0, 9.0, 0.0]],\n\n [[5.0, 2.0, 4.0],\n  [5.0, 4.0, 1.0]]], shape=[2, 2, 3], strides=[3, 6, 1], layout=c (0x4), const ndim=3\n\nstack, axis 2:\n[[[3.0, 1.0],\n  [7.0, 9.0],\n  [8.0, 0.0]],\n\n [[5.0, 5.0],\n  [2.0, 4.0],\n  [4.0, 1.0]]], shape=[2, 3, 2], strides=[1, 2, 6], layout=Ff (0xa), const ndim=3\n\nconcatenate, axis 0:\n[[3.0, 7.0, 8.0],\n [5.0, 2.0, 4.0],\n [1.0, 9.0, 0.0],\n [5.0, 4.0, 1.0]], shape=[4, 3], strides=[3, 1], layout=Cc (0x5), const ndim=2\n\nconcatenate, axis 1:\n[[3.0, 7.0, 8.0, 1.0, 9.0, 0.0],\n [5.0, 2.0, 4.0, 5.0, 4.0, 1.0]], shape=[2, 6], strides=[1, 2], layout=Ff (0xa), const ndim=2\n```\n\n### Splitting one array into several smaller ones\n\nMore to see here [ArrayView::split_at](https://docs.rs/ndarray/latest/ndarray/type.ArrayView.html#method.split_at)\n```rust\nuse ndarray::prelude::*;\nuse ndarray::Axis;\n\nfn main() {\n\n    let a = array![\n        [6., 7., 6., 9., 0., 5., 4., 0., 6., 8., 5., 2.],\n        [8., 5., 5., 7., 1., 8., 6., 7., 1., 8., 1., 0.]];\n    \n    let (s1, s2) = a.view().split_at(Axis(0), 1);\n    println!(\"Split a from Axis(0), at index 1:\");\n    println!(\"s1  = \\n{}\", s1);\n    println!(\"s2  = \\n{}\\n\", s2);\n    \n    \n    let (s1, s2) = a.view().split_at(Axis(1), 4);\n    println!(\"Split a from Axis(1), at index 4:\");\n    println!(\"s1  = \\n{}\", s1);\n    println!(\"s2  = \\n{}\\n\", s2);\n}\n```\nThe output is:\n```\nSplit a from Axis(0), at index 1:\ns1  = \n[[6, 7, 6, 9, 0, 5, 4, 0, 6, 8, 5, 2]]\ns2  = \n[[8, 5, 5, 7, 1, 8, 6, 7, 1, 8, 1, 0]]\n\nSplit a from Axis(1), at index 4:\ns1  = \n[[6, 7, 6, 9],\n [8, 5, 5, 7]]\ns2  = \n[[0, 5, 4, 0, 6, 8, 5, 2],\n [1, 8, 6, 7, 1, 8, 1, 0]]\n\n```\n\n## Copies and Views\n### View, Ref or Shallow Copy\n\nRust has ownership, so we cannot simply update an element of an array while we have a shared view of it. This brings guarantees & helps having more robust code.\n```rust\nuse ndarray::prelude::*;\nuse ndarray::{Array, Axis};\n\nfn main() {\n\n    let mut a = Array::range(0., 12., 1.).into_shape_with_order([3 ,4]).unwrap();\n    println!(\"a = \\n{}\\n\", a);\n    \n    {\n        let (s1, s2) = a.view().split_at(Axis(1), 2);\n        \n        // with s as a view sharing the ref of a, we cannot update a here\n        // a.slice_mut(s![1, 1]).fill(1234.);\n        \n        println!(\"Split a from Axis(0), at index 1:\");\n        println!(\"s1  = \\n{}\", s1);\n        println!(\"s2  = \\n{}\\n\", s2);\n    }\n    \n    // now we can update a again here, as views of s1, s2 are dropped already\n    a.slice_mut(s![1, 1]).fill(1234.);\n    \n    let (s1, s2) = a.view().split_at(Axis(1), 2);\n    println!(\"Split a from Axis(0), at index 1:\");\n    println!(\"s1  = \\n{}\", s1);\n    println!(\"s2  = \\n{}\\n\", s2);\n}\n```\nThe output is:\n```\na = \n[[0, 1, 2, 3],\n [4, 5, 6, 7],\n [8, 9, 10, 11]]\n\nSplit a from Axis(0), at index 1:\ns1  = \n[[0, 1],\n [4, 5],\n [8, 9]]\ns2  = \n[[2, 3],\n [6, 7],\n [10, 11]]\n\nSplit a from Axis(0), at index 1:\ns1  = \n[[0, 1],\n [4, 1234],\n [8, 9]]\ns2  = \n[[2, 3],\n [6, 7],\n [10, 11]]\n```\n\n### Deep Copy\nAs the usual way in Rust, a `clone()` call will\nmake a copy of your array:\n```rust\nuse ndarray::prelude::*;\nuse ndarray::Array;\n\nfn main() {\n\n    let mut a = Array::range(0., 4., 1.).into_shape_with_order([2 ,2]).unwrap();\n    let b = a.clone();\n    \n    println!(\"a = \\n{}\\n\", a);\n    println!(\"b clone of a = \\n{}\\n\", a);\n    \n    a.slice_mut(s![1, 1]).fill(1234.);\n    \n    println!(\"a updated...\");\n    println!(\"a = \\n{}\\n\", a);\n    println!(\"b clone of a = \\n{}\\n\", b);\n}\n```\n\nThe output is:\n```\na = \n[[0, 1],\n [2, 3]]\n\nb clone of a = \n[[0, 1],\n [2, 3]]\n\na updated...\na = \n[[0, 1],\n [2, 1234]]\n\nb clone of a = \n[[0, 1],\n [2, 3]]\n```\n\nNotice that using `clone()` (or cloning) an `Array` type also copies the array's elements. It creates an independently owned array of the same type.\n\nCloning an `ArrayView` does not clone or copy the underlying elements - it only clones the view reference (as it happens in Rust when cloning a `&` reference).\n\n## Broadcasting\n\nArrays support limited broadcasting, where arithmetic operations with array operands of different sizes can be carried out by repeating the elements of the smaller dimension array. \n\n```rust\nuse ndarray::prelude::*;\n\nfn main() {\n    let a = array![\n        [1., 1.], \n        [1., 2.], \n        [0., 3.], \n        [0., 4.]];\n\n    let b = array![[0., 1.]];\n\n    let c = array![\n        [1., 2.], \n        [1., 3.], \n        [0., 4.], \n        [0., 5.]];\n    \n    // We can add because the shapes are compatible even if not equal.\n    // The `b` array is shape 1 × 2 but acts like a 4 × 2 array.\n    assert!(c == a + b);\n}\n```\n\nSee [.broadcast()](https://docs.rs/ndarray/latest/ndarray/struct.ArrayBase.html#method.broadcast) for a more detailed description.\n\nAnd here is a short example of it:\n```rust\nuse ndarray::prelude::*;\n\nfn main() {\n    let a = array![\n        [1., 2.],\n        [3., 4.],\n    ];\n    \n    let b =  a.broadcast((3, 2, 2)).unwrap();\n    println!(\"shape of a is {:?}\", a.shape());\n    println!(\"a is broadcased to 3x2x2 = \\n{}\", b);\n}\n```\nThe output is:\n```\nshape of a is [2, 2]\na is broadcased to 3x2x2 = \n[[[1, 2],\n  [3, 4]],\n\n [[1, 2],\n  [3, 4]],\n\n [[1, 2],\n  [3, 4]]]\n```\n\n## Want to learn more?\nPlease checkout these docs for more information\n* [`ArrayBase` doc page](https://docs.rs/ndarray/latest/ndarray/struct.ArrayBase.html)\n* [`ndarray` for `numpy` user doc page](https://docs.rs/ndarray/latest/ndarray/doc/ndarray_for_numpy_users/index.html)\n"
        },
        {
          "name": "README.rst",
          "type": "blob",
          "size": 5.900390625,
          "content": "ndarray\n=========\n\nThe ``ndarray`` crate provides an *n*-dimensional container for general elements\nand for numerics.\n\nPlease read the `API documentation on docs.rs`__\nor take a look at the `quickstart tutorial <./README-quick-start.md>`_.\n\n__ https://docs.rs/ndarray/\n\n|build_status|_ |crates|_ |matrix-chat|_ |irc|_\n\n.. |build_status| image:: https://github.com/rust-ndarray/ndarray/actions/workflows/ci.yaml/badge.svg\n   :alt: CI build status\n.. _build_status: https://github.com/rust-ndarray/ndarray/actions\n\n.. |crates| image:: https://img.shields.io/crates/v/ndarray.svg\n   :alt: ndarray at crates.io\n.. _crates: https://crates.io/crates/ndarray\n\n.. |matrix-chat| image:: https://img.shields.io/badge/Matrix-%23rust--sci%3Amatrix.org-lightgrey\n   :alt: Matrix chat at #rust-sci:matrix.org\n.. _matrix-chat: https://matrix.to/#/#rust-sci:matrix.org\n\n.. |irc| image:: https://img.shields.io/badge/IRC-%23rust--sci%20on%20OFTC-lightgrey\n   :alt: IRC at #rust-sci on OFTC\n.. _irc: https://webchat.oftc.net/?channels=rust-sci\n\nHighlights\n----------\n\n- Generic 1, 2, ..., *n*-dimensional arrays\n- Owned arrays and array views\n- Slicing, also with arbitrary step size, and negative indices to mean\n  elements from the end of the axis.\n- Views and subviews of arrays; iterators that yield subviews.\n\nStatus and Lookout\n------------------\n\n- Still iterating on and evolving the crate\n\n  + The crate is continuously developing, and breaking changes are expected\n    during evolution from version to version. We adopt the newest stable\n    rust features if we need them.\n\n- Performance:\n\n  + Prefer higher order methods and arithmetic operations on arrays first,\n    then iteration, and as a last priority using indexed algorithms.\n  + Efficient floating point matrix multiplication even for very large\n    matrices; can optionally use BLAS to improve it further.\n\nCrate Feature Flags\n-------------------\n\nThe following crate feature flags are available. They are configured in\nyour `Cargo.toml`.\n\n- ``std``\n\n  - Rust standard library (enabled by default)\n\n  - This crate can be used without the standard library by disabling the\n    default `std` feature. To do so, use this in your `Cargo.toml`:\n\n    ::\n      \n      [dependencies]\n      ndarray = { version = \"0.x.y\", default-features = false }\n    \n\n  - The `geomspace` `linspace` `logspace` `range` `std` `var` `var_axis` and `std_axis`\n    methods are only available when `std` is enabled.\n\n- ``serde``\n\n  - Enables serialization support for serde 1.x\n\n- ``rayon``\n\n  - Enables parallel iterators, parallelized methods and ``par_azip!``.\n  - Implies std\n\n- ``approx``\n\n  - Implementations of traits from version 0.5 of the [`approx`] crate.\n\n- ``blas``\n\n  - Enable transparent BLAS support for matrix multiplication.\n    Uses ``blas-src`` for pluggable backend, which needs to be configured\n    separately (see below).\n\n- ``matrixmultiply-threading``\n\n  - Enable the ``threading`` feature in the matrixmultiply package\n\n- ``portable-atomic-critical-section``\n\n  - Whether ``portable-atomic`` should use ``critical-section``\n\nHow to use with cargo\n---------------------\n\n::\n\n    [dependencies]\n    ndarray = \"0.16.0\"\n\nHow to enable BLAS integration\n------------------------------\n\nBlas integration is an optional add-on. Without BLAS, ndarray uses the\n``matrixmultiply`` crate for matrix multiplication for ``f64`` and ``f32``\narrays (and it's always enabled as a fallback since it supports matrices of\narbitrary strides in both dimensions).\n\nDepend and link to ``blas-src`` directly to pick a blas provider. Ndarray\npresently requires a blas provider that provides the ``cblas-sys`` interface.  If\nfurther feature selection is wanted or needed then you might need to depend directly on\nthe backend crate's source too.  The backend version **must** be the one that\n``blas-src`` also depends on.\n\nAn example configuration using system openblas is shown below. Note that only\nend-user projects (not libraries) should select provider::\n\n    [dependencies]\n    ndarray = { version = \"0.16.0\", features = [\"blas\"] }\n    blas-src = { version = \"0.10\", features = [\"openblas\"] }\n    openblas-src = { version = \"0.10\", features = [\"cblas\", \"system\"] }\n\nUsing system-installed dependencies can save a long time building dependencies.\nAn example configuration using (compiled) netlib is shown below anyway::\n\n    [dependencies]\n    ndarray = { version = \"0.16.0\", features = [\"blas\"] }\n    blas-src = { version = \"0.10.0\", default-features = false, features = [\"netlib\"] }\n\nWhen this is done, your program must also link to ``blas_src`` by using it or\nexplicitly including it in your code::\n\n    extern crate blas_src;\n\nThe following versions have been verified to work together. For ndarray 0.15 or later,\nthere is no tight coupling to the ``blas-src`` version, so version selection is more flexible.\n\n=========== ============ ================ ==============\n``ndarray`` ``blas-src`` ``openblas-src`` ``netlib-src``\n=========== ============ ================ ==============\n0.16        0.10         0.10             0.8\n0.15        0.8          0.10             0.8\n0.15        0.7          0.9              0.8\n0.14        0.6.1        0.9.0\n0.13        0.2.0        0.6.0\n=========== ============ ================ ==============\n\n------------\nBLAS on MSRV\n------------\n\nAlthough ``ndarray`` currently maintains an MSRV of 1.64.0, this is separate from the MSRV (either stated or real) of the various BLAS providers.\nAs of the time of writing, ``openblas`` currently supports MSRV of 1.71.1.\nSo, while ``ndarray`` and ``openblas-src`` are compatible, they can only work together with toolchains 1.71.1 or above.\n\nRecent Changes\n--------------\n\nSee `RELEASES.md <./RELEASES.md>`_.\n\nLicense\n=======\n\nDual-licensed to be compatible with the Rust project.\n\nLicensed under the Apache License, Version 2.0\nhttp://www.apache.org/licenses/LICENSE-2.0 or the MIT license\nhttp://opensource.org/licenses/MIT, at your\noption. This file may not be copied, modified, or distributed\nexcept according to those terms.\n\n"
        },
        {
          "name": "RELEASES.md",
          "type": "blob",
          "size": 71.205078125,
          "content": "Version 0.16.1 (2024-08-14)\n===========================\n\n- Refactor and simplify BLAS gemm call further by [@bluss](https://github.com/bluss) [#1421](https://github.com/rust-ndarray/ndarray/pull/1421)\n- Fix infinite recursion and off-by-one error in triu/tril by [@akern40](https://github.com/akern40) [#1418](https://github.com/rust-ndarray/ndarray/pull/1418)\n- Fix using BLAS for all compatible cases of memory layout by [@bluss](https://github.com/bluss) [#1419](https://github.com/rust-ndarray/ndarray/pull/1419)\n- Use PR check instead of Merge Queue, and check rustdoc by [@bluss](https://github.com/bluss) [#1420](https://github.com/rust-ndarray/ndarray/pull/1420)\n- Make iterators covariant in element type by [@bluss](https://github.com/bluss) [#1417](https://github.com/rust-ndarray/ndarray/pull/1417)\n\nVersion 0.16.0 (2024-08-03)\n===========================\n\nFeatured Changes\n----------------\n\n- Better shape: Deprecate reshape, into_shape by [@bluss](https://github.com/bluss) [#1310](https://github.com/rust-ndarray/ndarray/pull/1310)<br>\n  `.into_shape()` **is now deprecated**.\n  Use `.into_shape_with_order()` or `.to_shape()` instead, which don't have `into_shape`'s drawbacks.\n\nNew Features and Improvements\n-----------------------------\n\n- Check for aliasing in `RawViewMut::from_shape_ptr` with a debug assertion by [@bluss](https://github.com/bluss) [#1413](https://github.com/rust-ndarray/ndarray/pull/1413)\n- Allow aliasing in ArrayView::from_shape by [@bluss](https://github.com/bluss) [#1410](https://github.com/rust-ndarray/ndarray/pull/1410)\n- Remove deprecations from 0.15.x by [@bluss](https://github.com/bluss) [#1409](https://github.com/rust-ndarray/ndarray/pull/1409)\n- Make `CowArray` an owned storage array, require Clone bound for `into_shared` by [@jturner314](https://github.com/jturner314) [#1028](https://github.com/rust-ndarray/ndarray/pull/1028)\n- Change `NdProducer::Dim` of `axis_windows()` to `Ix1` by [@jonasBoss](https://github.com/jonasBoss) [#1305](https://github.com/rust-ndarray/ndarray/pull/1305)\n- Add `squeeze()` to dynamic dimension arrays by [@barakugav](https://github.com/barakugav) [#1396](https://github.com/rust-ndarray/ndarray/pull/1396)\n- Add `flatten`, `flatten_with_order` and `into_flat` to arrays by [@barakugav](https://github.com/barakugav) [#1397](https://github.com/rust-ndarray/ndarray/pull/1397)\n- Make compatible with thumbv6m-none-eabi by [@BjornTheProgrammer](https://github.com/BjornTheProgrammer) [#1384](https://github.com/rust-ndarray/ndarray/pull/1384)\n- `is_unique` for `ArcArray` by [@daniellga](https://github.com/daniellga) [#1399](https://github.com/rust-ndarray/ndarray/pull/1399)\n- Add `triu` and `tril` methods directly to ArrayBase by [@akern40](https://github.com/akern40) [#1386](https://github.com/rust-ndarray/ndarray/pull/1386)\n- Fix styling of the BLAS integration heading. by [@adamreichold](https://github.com/adamreichold) [#1390](https://github.com/rust-ndarray/ndarray/pull/1390)\n- Implement `product_axis` by [@akern40](https://github.com/akern40) [#1387](https://github.com/rust-ndarray/ndarray/pull/1387)\n- Add reserve method for owned arrays by [@ssande7](https://github.com/ssande7) [#1268](https://github.com/rust-ndarray/ndarray/pull/1268)\n- Use inline on spit_at and smaller methods by [@bluss](https://github.com/bluss) [#1381](https://github.com/rust-ndarray/ndarray/pull/1381)\n- Update to Approx 0.5 by [@bluss](https://github.com/bluss) [#1380](https://github.com/rust-ndarray/ndarray/pull/1380)\n- Add .into_raw_vec_with_offset() and deprecate .into_raw_vec() by [@bluss](https://github.com/bluss) [#1379](https://github.com/rust-ndarray/ndarray/pull/1379)\n- Add additional array -> array view conversions by [@bluss](https://github.com/bluss) [#1130](https://github.com/rust-ndarray/ndarray/pull/1130)\n- implement DoubleEndedIterator for 1d `LanesIter` by [@Muthsera](https://github.com/Muthsera) [#1237](https://github.com/rust-ndarray/ndarray/pull/1237)\n- Add Zip::any by [@nilgoyette](https://github.com/nilgoyette) [#1228](https://github.com/rust-ndarray/ndarray/pull/1228)\n- Make the aview0, aview1, and aview2 free functions be const fns by [@jturner314](https://github.com/jturner314) [#1132](https://github.com/rust-ndarray/ndarray/pull/1132)\n- Add missing safety checks to `From<&[[A; N]]> for ArrayView` and `From<&mut [[A; N]]> for ArrayViewMut` by [@jturner314](https://github.com/jturner314) [#1131](https://github.com/rust-ndarray/ndarray/pull/1131)\n- derived Debug for Iter and IterMut by [@biskwikman](https://github.com/biskwikman) [#1353](https://github.com/rust-ndarray/ndarray/pull/1353)\n- Fix Miri errors for WindowsIter and ExactChunksIter/Mut by [@jturner314](https://github.com/jturner314) [#1142](https://github.com/rust-ndarray/ndarray/pull/1142)\n- Fix Miri failure with -Zmiri-tag-raw-pointers by [@jturner314](https://github.com/jturner314) [#1138](https://github.com/rust-ndarray/ndarray/pull/1138)\n- Track-caller panics by [@xd009642](https://github.com/xd009642) [#975](https://github.com/rust-ndarray/ndarray/pull/975)\n- Add slice_axis_move method by [@jturner314](https://github.com/jturner314) [#1211](https://github.com/rust-ndarray/ndarray/pull/1211)\n- iterators: Re-export IntoIter by [@bluss](https://github.com/bluss) [#1370](https://github.com/rust-ndarray/ndarray/pull/1370)\n- Fix unsafe blocks in `s![]` macro by [@jturner314](https://github.com/jturner314) [#1196](https://github.com/rust-ndarray/ndarray/pull/1196)\n- Fix comparison with NumPy of slicing with negative step by [@venkat0791](https://github.com/venkat0791) [#1319](https://github.com/rust-ndarray/ndarray/pull/1319)\n- Updated Windows `base` Computations to be Safer by [@LazaroHurtado](https://github.com/LazaroHurtado) [#1297](https://github.com/rust-ndarray/ndarray/pull/1297)\n- Update README-quick-start.md by [@fumseckk](https://github.com/fumseckk) [#1246](https://github.com/rust-ndarray/ndarray/pull/1246)\n- Added stride support to `Windows` by [@LazaroHurtado](https://github.com/LazaroHurtado) [#1249](https://github.com/rust-ndarray/ndarray/pull/1249)\n- Added select example to numpy user docs by [@WillAyd](https://github.com/WillAyd) [#1294](https://github.com/rust-ndarray/ndarray/pull/1294)\n- Add both approx features to the readme by [@nilgoyette](https://github.com/nilgoyette) [#1289](https://github.com/rust-ndarray/ndarray/pull/1289)\n- Add NumPy examples combining slicing and assignment by [@jturner314](https://github.com/jturner314) [#1210](https://github.com/rust-ndarray/ndarray/pull/1210)\n- Fix contig check for single element arrays by [@bluss](https://github.com/bluss) [#1362](https://github.com/rust-ndarray/ndarray/pull/1362)\n- Export Linspace and Logspace iterators by [@johann-cm](https://github.com/johann-cm) [#1348](https://github.com/rust-ndarray/ndarray/pull/1348)\n- Use `clone_from()` in two places by [@ChayimFriedman2](https://github.com/ChayimFriedman2) [#1347](https://github.com/rust-ndarray/ndarray/pull/1347)\n- Update README-quick-start.md by [@joelchen](https://github.com/joelchen) [#1344](https://github.com/rust-ndarray/ndarray/pull/1344)\n- Provide element-wise math functions for floats by [@KmolYuan](https://github.com/KmolYuan) [#1042](https://github.com/rust-ndarray/ndarray/pull/1042)\n- Improve example in doc for columns method by [@gkobeaga](https://github.com/gkobeaga) [#1221](https://github.com/rust-ndarray/ndarray/pull/1221)\n- Fix description of stack! in quick start by [@jturner314](https://github.com/jturner314) [#1156](https://github.com/rust-ndarray/ndarray/pull/1156)\n\nTests, CI and Maintainer tasks\n------------------------------\n\n- CI: require rustfmt, nostd by [@bluss](https://github.com/bluss) [#1411](https://github.com/rust-ndarray/ndarray/pull/1411)\n- Prepare changelog for 0.16.0 by [@bluss](https://github.com/bluss) [#1401](https://github.com/rust-ndarray/ndarray/pull/1401)\n- Organize dependencies with workspace = true (cont.) by [@bluss](https://github.com/bluss) [#1407](https://github.com/rust-ndarray/ndarray/pull/1407)\n- Update to use dep: for features by [@bluss](https://github.com/bluss) [#1406](https://github.com/rust-ndarray/ndarray/pull/1406)\n- Organize the workspace of test crates a bit better by [@bluss](https://github.com/bluss) [#1405](https://github.com/rust-ndarray/ndarray/pull/1405)\n- Add rustfmt commit to ignored revisions for git blame by [@lucascolley](https://github.com/lucascolley) [#1376](https://github.com/rust-ndarray/ndarray/pull/1376)\n- The minimum amount of work required to fix our CI by [@adamreichold](https://github.com/adamreichold) [#1388](https://github.com/rust-ndarray/ndarray/pull/1388)\n- Fixed broke continuous integration badge by [@juhotuho10](https://github.com/juhotuho10) [#1382](https://github.com/rust-ndarray/ndarray/pull/1382)\n- Use mold linker to speed up ci by [@bluss](https://github.com/bluss) [#1378](https://github.com/rust-ndarray/ndarray/pull/1378)\n- Add rustformat config and CI by [@bluss](https://github.com/bluss) [#1375](https://github.com/rust-ndarray/ndarray/pull/1375)\n- Add docs to CI by [@jturner314](https://github.com/jturner314) [#925](https://github.com/rust-ndarray/ndarray/pull/925)\n- Test using cargo-careful by [@bluss](https://github.com/bluss) [#1371](https://github.com/rust-ndarray/ndarray/pull/1371)\n- Further ci updates - numeric tests, and run all tests on PRs by [@bluss](https://github.com/bluss) [#1369](https://github.com/rust-ndarray/ndarray/pull/1369)\n- Setup ci so that most checks run in merge queue only by [@bluss](https://github.com/bluss) [#1368](https://github.com/rust-ndarray/ndarray/pull/1368)\n- Use merge queue by [@bluss](https://github.com/bluss) [#1367](https://github.com/rust-ndarray/ndarray/pull/1367)\n- Try to make the master branch shipshape by [@adamreichold](https://github.com/adamreichold) [#1286](https://github.com/rust-ndarray/ndarray/pull/1286)\n- Update ci - run cross tests only on master by [@bluss](https://github.com/bluss) [#1366](https://github.com/rust-ndarray/ndarray/pull/1366)\n- ndarray_for_numpy_users some example to code not pointed out to clippy by [@higumachan](https://github.com/higumachan) [#1360](https://github.com/rust-ndarray/ndarray/pull/1360)\n- Fix minimum rust version mismatch in lib.rs by [@HoKim98](https://github.com/HoKim98) [#1352](https://github.com/rust-ndarray/ndarray/pull/1352)\n- Fix MSRV build by pinning crossbeam crates. by [@adamreichold](https://github.com/adamreichold) [#1345](https://github.com/rust-ndarray/ndarray/pull/1345)\n- Fix new rustc lints to make the CI pass. by [@adamreichold](https://github.com/adamreichold) [#1337](https://github.com/rust-ndarray/ndarray/pull/1337)\n- Make Clippy happy and fix MSRV build by [@adamreichold](https://github.com/adamreichold) [#1320](https://github.com/rust-ndarray/ndarray/pull/1320)\n- small formatting fix in README.rst by [@podusowski](https://github.com/podusowski) [#1199](https://github.com/rust-ndarray/ndarray/pull/1199)\n- Fix CI failures (mostly linting with clippy) by [@aganders3](https://github.com/aganders3) [#1171](https://github.com/rust-ndarray/ndarray/pull/1171)\n- Remove doc(hidden) attr from items in trait impls by [@jturner314](https://github.com/jturner314) [#1165](https://github.com/rust-ndarray/ndarray/pull/1165)\n\n\nVersion 0.15.6 (2022-07-30)\n===========================\n\nNew features\n------------\n\n- Add `get_ptr` and `get_mut_ptr` methods for getting an element's pointer from\n  an index, by [@adamreichold].\n\n  https://github.com/rust-ndarray/ndarray/pull/1151\n\nOther changes\n-------------\n\n- Various fixes to resolve compiler and Clippy warnings/errors, by [@aganders3]\n  and [@jturner314].\n\n  https://github.com/rust-ndarray/ndarray/pull/1171\n\n- Fix description of `stack!` in quick start docs, by [@jturner314]. Thanks to\n  [@HyeokSuLee] for pointing out the issue.\n\n  https://github.com/rust-ndarray/ndarray/pull/1156\n\n- Add MSRV to `Cargo.toml`.\n\n  https://github.com/rust-ndarray/ndarray/pull/1191\n\n\nVersion 0.15.5 (2022-07-30)\n===========================\n\nEnhancements\n------------\n\n- The `s!` macro now works in `no_std` environments, by [@makotokato].\n\n  https://github.com/rust-ndarray/ndarray/pull/1154\n\nOther changes\n-------------\n\n- Improve docs and fix typos, by [@steffahn] and [@Rikorose].\n\n  https://github.com/rust-ndarray/ndarray/pull/1134 <br>\n  https://github.com/rust-ndarray/ndarray/pull/1164\n\n\nVersion 0.15.4 (2021-11-23)\n===========================\n\nThe Dr. Turner release 🚀\n\nNew features\n------------\n\n- Complex matrix multiplication now uses BLAS ``cgemm``/``zgemm`` when\n  enabled (and matrix layout allows), by [@ethanhs].\n\n  https://github.com/rust-ndarray/ndarray/pull/1106\n\n- Use `matrixmultiply` as fallback for complex matrix multiplication\n  when BLAS is not available or the matrix layout requires it by [@bluss]\n\n  https://github.com/rust-ndarray/ndarray/pull/1118\n\n- Add ``into/to_slice_memory_order`` methods for views, lifetime-preserving\n  versions of existing similar methods by [@jturner314]\n\n  https://github.com/rust-ndarray/ndarray/pull/1015\n\n- ``kron`` function for Kronecker product by [@ethanhs].\n\n  https://github.com/rust-ndarray/ndarray/pull/1105\n\n- ``split_complex`` method for splitting complex arrays into separate\n  real and imag view parts by [@jturner314] and [@ethanhs].\n\n  https://github.com/rust-ndarray/ndarray/pull/1107\n\n- New method ``try_into_owned_nocopy`` by [@jturner314]\n\n  https://github.com/rust-ndarray/ndarray/pull/1022\n\n- New producer and iterable ``axis_windows`` by [@VasanthakumarV]\n  and [@jturner314].\n\n  https://github.com/rust-ndarray/ndarray/pull/1022\n\n- New method ``Zip::par_fold`` by [@adamreichold]\n\n  https://github.com/rust-ndarray/ndarray/pull/1095\n\n- New constructor ``from_diag_elem`` by [@jturner314]\n\n  https://github.com/rust-ndarray/ndarray/pull/1076\n\n- ``Parallel::with_min_len`` method for parallel iterators by [@adamreichold]\n\n  https://github.com/rust-ndarray/ndarray/pull/1081\n\n- Allocation-preserving map function ``.mapv_into_any()`` added by [@benkay86]\n\nEnhancements\n------------\n\n- Improve performance of ``.sum_axis()`` for some cases by [@jturner314]\n\n  https://github.com/rust-ndarray/ndarray/pull/1061\n\nBug fixes\n---------\n\n- Fix error in calling dgemv (matrix-vector multiplication) with BLAS and\n  broadcasted arrays, by [@jturner314].\n\n  https://github.com/rust-ndarray/ndarray/pull/1088\n\nAPI changes\n-----------\n\n- Support approx 0.5 partially alongside the already existing approx 0.4 support.\n  New feature flag is `approx-0_5`, by [@jturner314]\n\n  https://github.com/rust-ndarray/ndarray/pull/1025\n\n- Slice and reference-to-array conversions to CowArray added for by [@jturner314].\n\n  https://github.com/rust-ndarray/ndarray/pull/1038\n\n- Allow trailing comma in stack and concatenate macros by [@jturner314]\n\n  https://github.com/rust-ndarray/ndarray/pull/1044\n\n- ``Zip`` now has a ``must_use`` marker to help users by [@adamreichold]\n\n  https://github.com/rust-ndarray/ndarray/pull/1082\n\nOther changes\n-------------\n\n- Fixing the crates.io badge on github by [@atouchet]\n\n  https://github.com/rust-ndarray/ndarray/pull/1104\n\n- Use intra-doc links in docs by [@LeSeulArtichaut]\n\n  https://github.com/rust-ndarray/ndarray/pull/1033\n\n- Clippy fixes by [@adamreichold]\n\n  https://github.com/rust-ndarray/ndarray/pull/1092 <br>\n  https://github.com/rust-ndarray/ndarray/pull/1091\n\n- Minor fixes in links and punctuation in docs by [@jimblandy]\n\n  https://github.com/rust-ndarray/ndarray/pull/1056\n\n- Minor fixes in docs by [@chohner]\n\n  https://github.com/rust-ndarray/ndarray/pull/1119\n\n- Update tests to quickcheck 1.0 by [@bluss]\n\n  https://github.com/rust-ndarray/ndarray/pull/1114\n\n\nVersion 0.15.3 (2021-06-05)\n===========================\n\nNew features\n------------\n\n- New methods `.last/_mut()` for arrays and array views by [@jturner314]\n\n  https://github.com/rust-ndarray/ndarray/pull/1013\n\nBug fixes\n---------\n\n- Fix `as_slice_memory_order_mut()` so that it never changes strides (the\n  memory layout) of the array when called.\n\n  This was a bug that impacted `ArcArray` (and for example not `Array` or `ArrayView/Mut`),\n  and multiple methods on `ArcArray` that use `as_slice_memory_order_mut` (for example `map_mut`).\n  Fix by [@jturner314].\n\n  https://github.com/rust-ndarray/ndarray/pull/1019\n\nAPI changes\n-----------\n\n- Array1 now implements `From<Box<[T]>>` by [@jturner314]\n\n  https://github.com/rust-ndarray/ndarray/pull/1016\n\n- ArcArray now implements `From<Array<...>>` by [@jturner314]\n\n  https://github.com/rust-ndarray/ndarray/pull/1021\n\n- CowArray now implements RawDataSubst by [@jturner314]\n\n  https://github.com/rust-ndarray/ndarray/pull/1020\n\nOther changes\n-------------\n\n- Mention unsharing in `.as_mut_ptr` docs by [@jturner314]\n\n  https://github.com/rust-ndarray/ndarray/pull/1017\n\n- Clarify and fix minor errors in push/append method docs by [@bluss] f21c668a\n\n- Fix several warnings in doc example code by [@bluss]\n\n  https://github.com/rust-ndarray/ndarray/pull/1009\n\n\nVersion 0.15.2 (2021-05-17 🇳🇴)\n================================\n\nNew features\n------------\n\n- New methods for growing/appending to owned `Array`s. These methods allow\n  building an array efficiently chunk by chunk. By [@bluss].\n\n  - `.push_row()`, `.push_column()`\n  - `.push(axis, array)`, `.append(axis, array)`\n\n  `stack`, `concatenate` and `.select()` now support all `Clone`-able elements\n  as a result.\n\n  https://github.com/rust-ndarray/ndarray/pull/932 <br>\n  https://github.com/rust-ndarray/ndarray/pull/990\n\n- New reshaping method `.to_shape(...)`, called with new shape and optional\n  ordering parameter, this is the first improvement for reshaping in terms of\n  added features and increased consistency, with more to come. By [@bluss].\n\n  https://github.com/rust-ndarray/ndarray/pull/982\n\n- `Array` now implements a by-value iterator, by [@bluss].\n\n  https://github.com/rust-ndarray/ndarray/pull/986\n\n- New methods `.move_into()` and `.move_into_uninit()` which allow assigning\n  into an array by moving values from an array into another, by [@bluss].\n\n  https://github.com/rust-ndarray/ndarray/pull/932 <br>\n  https://github.com/rust-ndarray/ndarray/pull/997\n\n- New method `.remove_index()` for owned arrays by [@bluss]\n\n  https://github.com/rust-ndarray/ndarray/pull/967\n\n- New constructor `build_uninit` which makes it easier to initialize\n  uninitialized arrays in a way that's generic over all owned array kinds.\n  By [@bluss].\n\n  https://github.com/rust-ndarray/ndarray/pull/1001\n\nEnhancements\n------------\n\n- Preserve the allocation of the input array in some more cases for arithmetic ops by [@SparrowLii]\n\n  https://github.com/rust-ndarray/ndarray/pull/963\n\n- Improve broadcasting performance for &array + &array arithmetic ops by [@SparrowLii]\n\n  https://github.com/rust-ndarray/ndarray/pull/965\n\nBug fixes\n---------\n\n- Fix an error in construction of empty array with negative strides, by [@jturner314].\n\n  https://github.com/rust-ndarray/ndarray/pull/998\n\n- Fix minor performance bug with loop order selection in Zip by [@bluss]\n\n  https://github.com/rust-ndarray/ndarray/pull/977\n\nAPI changes\n-----------\n\n- Add dimension getters to `Shape` and `StrideShape` by [@stokhos]\n\n  https://github.com/rust-ndarray/ndarray/pull/978\n\nOther changes\n-------------\n\n- Rustdoc now uses the ndarray logo that [@jturner314] created previously\n\n  https://github.com/rust-ndarray/ndarray/pull/981\n\n- Minor doc changes by [@stokhos], [@cassiersg] and [@jturner314]\n\n  https://github.com/rust-ndarray/ndarray/pull/968 <br>\n  https://github.com/rust-ndarray/ndarray/pull/971 <br>\n  https://github.com/rust-ndarray/ndarray/pull/974\n\n- A little refactoring to reduce generics bloat in a few places by [@bluss].\n\n  https://github.com/rust-ndarray/ndarray/pull/1004\n\n\nVersion 0.15.1 (2021-03-29)\n===========================\n\nEnhancements\n------------\n\n- Arrays and views now have additional PartialEq impls so that it's possible to\n  compare arrays with references to arrays and vice versa by [@bluss]\n\n  https://github.com/rust-ndarray/ndarray/pull/958\n\nBug fixes\n---------\n\n- Fix panic in creation of `.windows()` producer from negative stride array by\n  [@bluss]\n\n  https://github.com/rust-ndarray/ndarray/pull/957\n\nOther changes\n-------------\n\n- Update BLAS documentation further by @bluss\n\n  https://github.com/rust-ndarray/ndarray/pull/955 <br>\n  https://github.com/rust-ndarray/ndarray/pull/959\n\n\nVersion 0.15.0 (2021-03-25)\n===========================\n\nNew features\n------------\n\n- Support inserting new axes while slicing by [@jturner314]. This is an example:\n\n  ```rust\n  let view = arr.slice(s![.., -1, 2..;-1, NewAxis]);\n  ```\n\n  https://github.com/rust-ndarray/ndarray/pull/570\n\n- Support two-sided broadcasting in arithmetic operations with arrays by [@SparrowLii]\n\n  This now allows, for example, addition of a 3 x 1 with a 1 x 3 array; the\n  operands are in this case broadcast to 3 x 3 which is the shape of the result.\n\n  Note that this means that a new trait bound is required in some places when\n  mixing dimensionality types of arrays in arithmetic operations.\n\n  https://github.com/rust-ndarray/ndarray/pull/898\n\n- Support for compiling ndarray as `no_std` (using core and alloc) by\n  [@xd009642] and [@bluss]\n\n  https://github.com/rust-ndarray/ndarray/pull/861 <br>\n  https://github.com/rust-ndarray/ndarray/pull/889\n\n- New methods `.cell_view()` and `ArrayViewMut::into_cell_view` that enable\n  new ways of working with array elements as if they were in Cells - setting\n  elements through shared views and broadcast views, by [@bluss].\n\n  https://github.com/rust-ndarray/ndarray/pull/877\n\n- New methods `slice_each_axis/_mut/_inplace` that make it easier to slice\n  a dynamic number of axes in some situations, by [@jturner314]\n\n  https://github.com/rust-ndarray/ndarray/pull/913\n\n- New method `a.assign_to(b)` with the inverse argument order compared to the\n  existing `b.assign(a)` and some extra features like assigning into\n  uninitialized arrays, By [@bluss].\n\n  https://github.com/rust-ndarray/ndarray/pull/947\n\n- New methods `.std()` and `.var()` for standard deviation and variance by\n  [@kdubovikov]\n\n  https://github.com/rust-ndarray/ndarray/pull/790\n\nEnhancements\n------------\n\n- Ndarray can now correctly determine that arrays can be contiguous, even if\n  they have negative strides, by [@SparrowLii]\n\n  https://github.com/rust-ndarray/ndarray/pull/885 <br>\n  https://github.com/rust-ndarray/ndarray/pull/948\n\n- Improvements to `map_inplace` by [@jturner314]\n\n  https://github.com/rust-ndarray/ndarray/pull/911\n\n- `.into_dimensionality` performance was improved for the `IxDyn` to `IxDyn`\n  case by [@bluss]\n\n  https://github.com/rust-ndarray/ndarray/pull/906\n\n- Improved performance for scalar + &array and &array + scalar operations by\n  [@jturner314]\n\n  https://github.com/rust-ndarray/ndarray/pull/890\n\nAPI changes\n-----------\n\n- New constructors `Array::from_iter` and `Array::from_vec` by [@bluss].\n  No new functionality, just that these constructors are available without trait\n  imports.\n\n  https://github.com/rust-ndarray/ndarray/pull/921\n\n- `NdProducer::raw_dim` is now a documented method by [@jturner314]\n\n  https://github.com/rust-ndarray/ndarray/pull/918\n\n- `AxisDescription` is now a struct with field names, not a tuple struct by\n  [@jturner314]. Its accessor methods are now deprecated.\n\n  https://github.com/rust-ndarray/ndarray/pull/915\n\n- Methods for array comparison `abs_diff_eq` and `relative_eq` are now\n  exposed as inherent methods too (no trait import needed), still under the approx\n  feature flag by [@bluss]\n\n  https://github.com/rust-ndarray/ndarray/pull/946\n\n- Changes to the slicing-related types and macro by [@jturner314] and [@bluss]:\n\n  - Remove the `Dimension::SliceArg` associated type, and add a new `SliceArg`\n    trait for this purpose.\n  - Change the return type of the `s![]` macro to an owned `SliceInfo` rather\n    than a reference.\n  - Replace the `SliceOrIndex` enum with `SliceInfoElem`, which has an\n    additional `NewAxis` variant and does not have a `step_by` method.\n  - Change the type parameters of `SliceInfo` in order to support the `NewAxis`\n    functionality and remove some tricky `unsafe` code.\n  - Mark the `SliceInfo::new` method as `unsafe`. The new implementations of\n    `TryFrom` can be used as a safe alternative.\n  - Remove the `AsRef<SliceInfo<[SliceOrIndex], D>> for SliceInfo<T, D>`\n    implementation. Add the similar `From<&'a SliceInfo<T, Din, Dout>> for\n    SliceInfo<&'a [SliceInfoElem], Din, Dout>` conversion as an alternative.\n  - Change the *expr* `;` *step* case in the `s![]` macro to error at compile\n    time if an unsupported type for *expr* is used, instead of panicking at\n    runtime.\n\n  https://github.com/rust-ndarray/ndarray/pull/570 <br>\n  https://github.com/rust-ndarray/ndarray/pull/940 <br>\n  https://github.com/rust-ndarray/ndarray/pull/943 <br>\n  https://github.com/rust-ndarray/ndarray/pull/945 <br>\n\n- Removed already deprecated methods by [@bluss]:\n\n  - Remove deprecated `.all_close()` - use approx feature and methods like  `.abs_diff_eq` instead\n  - Mark `.scalar_sum()` as deprecated - use `.sum()` instead\n  - Remove deprecated `DataClone` - use `Data + RawDataClone` instead\n  - Remove deprecated `ArrayView::into_slice` - use `to_slice()` instead.\n\n  https://github.com/rust-ndarray/ndarray/pull/874\n\n- Remove already deprecated methods: rows, cols (for row and column count; the\n  new names are nrows and ncols) by [@bluss]\n\n  https://github.com/rust-ndarray/ndarray/pull/872\n\n- Renamed `Zip` methods by [@bluss] and [@SparrowLii]:\n\n  - `apply` -> `for_each` \n  - `apply_collect` -> `map_collect`\n  - `apply_collect_into` -> `map_collect_into`\n  - (`par_` prefixed methods renamed accordingly)\n\n  https://github.com/rust-ndarray/ndarray/pull/894 <br>\n  https://github.com/rust-ndarray/ndarray/pull/904 <br>\n\n- Deprecate `Array::uninitialized` and revamped its replacement by [@bluss]\n\n  Please use new new `Array::uninit` which is based on `MaybeUninit` (renamed\n  from `Array::maybe_uninit`, the old name is also deprecated).\n\n  https://github.com/rust-ndarray/ndarray/pull/902 <br>\n  https://github.com/rust-ndarray/ndarray/pull/876\n\n- Renamed methods (old names are now deprecated) by [@bluss] and [@jturner314]\n\n  - `genrows/_mut` -> `rows/_mut`\n  - `gencolumns/_mut` -> `columns/_mut`\n  - `stack_new_axis` -> `stack` (the new name already existed)\n  - `visit` -> `for_each`\n\n  https://github.com/rust-ndarray/ndarray/pull/872 <br>\n  https://github.com/rust-ndarray/ndarray/pull/937 <br>\n  https://github.com/rust-ndarray/ndarray/pull/907 <br>\n\n- Updated `matrixmultiply` dependency to 0.3.0 by [@bluss]\n  and adding new feature flag `matrixmultiply-threading` to enable its threading\n\n  https://github.com/rust-ndarray/ndarray/pull/888 <br>\n  https://github.com/rust-ndarray/ndarray/pull/938 <br>\n \n- Updated `num-complex` dependency to 0.4.0 by [@bluss]\n\n  https://github.com/rust-ndarray/ndarray/pull/952\n\nBug fixes\n---------\n\n- Fix `Zip::indexed` for the 0-dimensional case by [@jturner314]\n\n  https://github.com/rust-ndarray/ndarray/pull/862\n\n- Fix bug in layout computation that broke parallel collect to f-order\n  array in some circumstances by [@bluss]\n\n  https://github.com/rust-ndarray/ndarray/pull/900\n\n- Fix an unwanted panic in shape overflow checking by [@bluss]\n\n  https://github.com/rust-ndarray/ndarray/pull/855\n\n- Mark the `SliceInfo::new` method as `unsafe` due to the requirement that\n  `indices.as_ref()` always return the same value when called multiple times,\n  by [@bluss] and [@jturner314]\n\n  https://github.com/rust-ndarray/ndarray/pull/570\n\nOther changes\n-------------\n\n- It was changed how we integrate with BLAS and `blas-src`. Users of BLAS need\n  to read the README for the updated instructions. Ndarray itself no longer\n  has public dependency on `blas-src`. Changes by [@bluss].\n\n  https://github.com/rust-ndarray/ndarray/pull/891 <br>\n  https://github.com/rust-ndarray/ndarray/pull/951\n\n- Various improvements to tests and CI by [@jturner314]\n\n  https://github.com/rust-ndarray/ndarray/pull/934 <br>\n  https://github.com/rust-ndarray/ndarray/pull/924 <br>\n\n- The `sort-axis.rs` example file's implementation of sort was bugfixed and now\n  has tests, by [@dam5h] and [@bluss]\n\n  https://github.com/rust-ndarray/ndarray/pull/916 <br>\n  https://github.com/rust-ndarray/ndarray/pull/930\n\n- We now link to the #rust-sci room on matrix in the readme by [@jturner314]\n\n  https://github.com/rust-ndarray/ndarray/pull/619\n\n- Internal cleanup with builder-like methods for creating arrays by [@bluss]\n\n  https://github.com/rust-ndarray/ndarray/pull/908\n\n- Implementation fix of `.swap(i, j)` by [@bluss]\n\n  https://github.com/rust-ndarray/ndarray/pull/903\n\n- Minimum supported Rust version (MSRV) is Rust 1.49.\n\n  https://github.com/rust-ndarray/ndarray/pull/902\n\n- Minor improvements to docs by [@insideoutclub]\n\n  https://github.com/rust-ndarray/ndarray/pull/887\n\n\nVersion 0.14.0 (2020-11-28)\n===========================\n\nNew features\n------------\n\n- `Zip::apply_collect` and `Zip::par_apply_collect` now support all\n  elements (not just `Copy` elements) by [@bluss]\n  https://github.com/rust-ndarray/ndarray/pull/814  \n  https://github.com/rust-ndarray/ndarray/pull/817\n\n- New function `stack` by [@andrei-papou]  \n  https://github.com/rust-ndarray/ndarray/pull/844  \n  https://github.com/rust-ndarray/ndarray/pull/850\n\nEnhancements\n------------\n\n- Handle inhomogeneous shape inputs better in Zip, in practice: guess better whether\n  to prefer c- or f-order for the inner loop by [@bluss]\n  https://github.com/rust-ndarray/ndarray/pull/809\n\n- Improve code sharing in some commonly used code by [@bluss]\n  https://github.com/rust-ndarray/ndarray/pull/819\n\nAPI changes\n-----------\n\n- The **old function** `stack` has been renamed to `concatenate`.\n  A new function `stack` with numpy-like semantics have taken its place.\n  Old usages of `stack` should change to use `concatenate`.\n  \n  `concatenate` produces an array with the same number of axes as the inputs.  \n  `stack` produces an array that has one more axis than the inputs.\n\n  This change was unfortunately done without a deprecation period, due to the long period between releases.\n\n  https://github.com/rust-ndarray/ndarray/pull/844  \n  https://github.com/rust-ndarray/ndarray/pull/850\n\n- Enum ErrorKind is now properly non-exhaustive and has lost its old placeholder invalid variant. By [@Zuse64]\n  https://github.com/rust-ndarray/ndarray/pull/848\n\n- Remove deprecated items:\n\n  - RcArray (deprecated alias for ArcArray)\n  - Removed `subview_inplace` use `collapse_axis`\n  - Removed `subview_mut` use `index_axis_mut`\n  - Removed `into_subview` use `index_axis_move`\n  - Removed `subview` use `index_axis`\n  - Removed `slice_inplace` use `slice_collapse`\n\n- Undeprecated `remove_axis` because its replacement is hard to find out on your own.\n\n- Update public external dependencies to new versions by [@Eijebong] and [@bluss]\n\n  - num-complex 0.3\n  - approx 0.4 (optional)\n  - blas-src 0.6.1 and openblas-src 0.9.0 (optional)\n\n  https://github.com/rust-ndarray/ndarray/pull/810  \n  https://github.com/rust-ndarray/ndarray/pull/851  \n\n\nOther changes\n-------------\n\n- Minor doc fixes by [@acj]\n  https://github.com/rust-ndarray/ndarray/pull/834\n\n- Minor doc fixes by [@xd009642]\n  https://github.com/rust-ndarray/ndarray/pull/847\n\n- The minimum required rust version is Rust 1.42.\n\n- Release management by [@bluss]\n\nVersion 0.13.1 (2020-04-21)\n===========================\n\nNew features\n------------\n\n- New *amazing* slicing methods `multi_slice_*` by [@jturner314]\n  https://github.com/rust-ndarray/ndarray/pull/717\n- New method `.cast()` for raw views by [@bluss]\n  https://github.com/rust-ndarray/ndarray/pull/734\n- New aliases `ArcArray1`, `ArcArray2` by [@d-dorazio]\n  https://github.com/rust-ndarray/ndarray/pull/741\n- New array constructor `from_shape_simple_fn` by [@bluss]\n  https://github.com/rust-ndarray/ndarray/pull/728\n- `Dimension::Larger` now requires `RemoveAxis` by [@TheLortex]\n  https://github.com/rust-ndarray/ndarray/pull/792\n- New methods for collecting Zip into an array by [@bluss]\n  https://github.com/rust-ndarray/ndarray/pull/797\n- New `Array::maybe_uninit` and `.assume_init()` by [@bluss]\n  https://github.com/rust-ndarray/ndarray/pull/803\n\nEnhancements\n------------\n\n- Remove itertools as dependency by [@bluss]\n  https://github.com/rust-ndarray/ndarray/pull/730\n- Improve `zip_mut_with` (and thus arithmetic ops) for f-order arrays by [@nilgoyette]\n  https://github.com/rust-ndarray/ndarray/pull/754\n- Implement `fold` for `IndicesIter` by [@jturner314]\n  https://github.com/rust-ndarray/ndarray/pull/733\n- New Quick Start readme by [@lifuyang]\n  https://github.com/rust-ndarray/ndarray/pull/785\n\nAPI changes\n-----------\n\n- Remove alignment restriction on raw views by [@jturner314]\n  https://github.com/rust-ndarray/ndarray/pull/738\n\nOther changes\n-------------\n\n- Fix documentation in ndarray for numpy users by [@jturner314]\n- Improve blas version documentation by [@jturner314]\n- Doc improvements by [@mockersf] https://github.com/rust-ndarray/ndarray/pull/751\n- Doc and lint related improvements by [@viniciusd] https://github.com/rust-ndarray/ndarray/pull/750\n- Minor fixes related to best practices for unsafe code by [@bluss]\n  https://github.com/rust-ndarray/ndarray/pull/799\n  https://github.com/rust-ndarray/ndarray/pull/802\n- Release management by [@bluss]\n\n\nVersion 0.13.0 (2019-09-23)\n===========================\n\nNew features\n------------\n\n - `ndarray-parallel` is merged into `ndarray`. Use the `rayon` feature-flag to get access to parallel iterators and\n   other parallelized methods.\n   ([#563](https://github.com/rust-ndarray/ndarray/pull/563/files) by [@bluss])\n - Add `logspace` and `geomspace` constructors\n   ([#617](https://github.com/rust-ndarray/ndarray/pull/617) by [@JP-Ellis])\n - Implement approx traits for `ArrayBase`. They can be enabled using the `approx` feature-flag.\n   ([#581](https://github.com/rust-ndarray/ndarray/pull/581) by [@jturner314])\n - Add `mean` method\n   ([#580](https://github.com/rust-ndarray/ndarray/pull/580) by [@LukeMathWalker])\n - Add `Zip::all` to check if all elements satisfy a predicate\n   ([#615](https://github.com/rust-ndarray/ndarray/pull/615) by [@mneumann])\n - Add `RawArrayView` and `RawArrayViewMut` types and `RawData`, `RawDataMut`, and `RawDataClone` traits\n   ([#496](https://github.com/rust-ndarray/ndarray/pull/496) by [@jturner314])\n - Add `CowArray`, `C`lone `o`n `write` array\n   ([#632](https://github.com/rust-ndarray/ndarray/pull/632) by [@jturner314] and [@andrei-papou])\n - Add `as_standard_layout` to `ArrayBase`: it takes an array by reference and returns a `CoWArray` in standard layout\n   ([#616](https://github.com/rust-ndarray/ndarray/pull/616) by [@jturner314] and [@andrei-papou])\n - Add `Array2::from_diag` method to create 2D arrays from a diagonal\n   ([#673](https://github.com/rust-ndarray/ndarray/pull/673) by [@rth])\n - Add `fold` method to `Zip`\n   ([#684](https://github.com/rust-ndarray/ndarray/pull/684) by [@jturner314])\n - Add `split_at` method to `AxisChunksIter/Mut`\n   ([#691](https://github.com/rust-ndarray/ndarray/pull/691) by [@jturner314])\n - Implement parallel iteration for `AxisChunksIter/Mut`\n   ([#639](https://github.com/rust-ndarray/ndarray/pull/639) by [@nitsky])\n - Add `into_scalar` method to `ArrayView0` and `ArrayViewMut0`\n   ([#700](https://github.com/rust-ndarray/ndarray/pull/700) by [@LukeMathWalker])\n - Add `accumulate_axis_inplace` method to `ArrayBase`\n   ([#611](https://github.com/rust-ndarray/ndarray/pull/611) by [@jturner314] and [@bluss])\n - Add the `array!`, `azip!`, and `s!` macros to `ndarray::prelude`\n   ([#517](https://github.com/rust-ndarray/ndarray/pull/517) by [@jturner314])\n\nEnhancements\n------------\n - Improve performance for matrix multiplications when using the pure-Rust backend thanks to `matrix-multiply:v0.2` \n   (leverage SIMD instructions on x86-64 with runtime feature detection)\n   ([#556](https://github.com/rust-ndarray/ndarray/pull/556) by [@bluss])\n - Improve performance of `fold` for iterators\n   ([#574](https://github.com/rust-ndarray/ndarray/pull/574) by [@jturner314])\n - Improve performance of `nth_back` for iterators\n   ([#686](https://github.com/rust-ndarray/ndarray/pull/686) by [@jturner314])\n - Improve performance of iterators for 1-d arrays\n   ([#614](https://github.com/rust-ndarray/ndarray/pull/614) by [@andrei-papou])\n - Improve formatting for large arrays\n   ([#606](https://github.com/rust-ndarray/ndarray/pull/606) by [@andrei-papou] and [@LukeMathWalker],\n   [#633](https://github.com/rust-ndarray/ndarray/pull/633) and [#707](https://github.com/rust-ndarray/ndarray/pull/707) by [@jturner314],\n   and [#713](https://github.com/rust-ndarray/ndarray/pull/713) by [@bluss])\n - Arithmetic operations between arrays with different element types are now allowed when there is a scalar equivalent\n   ([#588](https://github.com/rust-ndarray/ndarray/pull/588) by [@jturner314])\n - `.map_axis/_mut` won't panic on 0-length `axis`\n   ([#579](https://github.com/rust-ndarray/ndarray/pull/612) by [@andrei-papou])\n - Various documentation improvements (by [@jturner314], [@JP-Ellis], [@LukeMathWalker], [@bluss])\n\nAPI changes\n-----------\n - The `into_slice` method on ArrayView is deprecated and renamed to `to_slice`\n   ([#646](https://github.com/rust-ndarray/ndarray/pull/646) by [@max-sixty])\n - `RcArray` is deprecated in favour of `ArcArray` \n   ([#560](https://github.com/rust-ndarray/ndarray/pull/560) by [@bluss])\n - `into_slice` is renamed to `to_slice`. `into_slice` is now deprecated\n   ([#646](https://github.com/rust-ndarray/ndarray/pull/646) by [@max-sixty])\n - `from_vec` is deprecated in favour of using the `From` to convert a `Vec` into an `Array`\n   ([#648](https://github.com/rust-ndarray/ndarray/pull/648) by [@max-sixty])\n - `mean_axis` returns `Option<A>` instead of `A`, to avoid panicking when invoked on a 0-length axis \n   ([#580](https://github.com/rust-ndarray/ndarray/pull/580) by [@LukeMathWalker])\n - Remove `rustc-serialize` feature-flag. `serde` is the recommended feature-flag for serialization\n   ([#557](https://github.com/rust-ndarray/ndarray/pull/557) by [@bluss])\n - `rows`/`cols` are renamed to `nrows`/`ncols`. `rows`/`cols` are now deprecated\n   ([#701](https://github.com/rust-ndarray/ndarray/pull/701) by [@bluss])\n - The usage of the `azip!` macro has changed to be more similar to `for` loops\n   ([#626](https://github.com/rust-ndarray/ndarray/pull/626) by [@jturner314])\n - For `var_axis` and `std_axis`, the constraints on `ddof` and the trait bounds on `A` have been made more strict\n   ([#515](https://github.com/rust-ndarray/ndarray/pull/515) by [@jturner314])\n - For `mean_axis`, the constraints on `A` have changed\n   ([#518](https://github.com/rust-ndarray/ndarray/pull/518) by [@jturner314])\n - `DataClone` is deprecated in favor of using `Data + RawDataClone`\n   ([#496](https://github.com/rust-ndarray/ndarray/pull/496) by [@jturner314])\n - The `Dimension::Pattern` associated type now has more trait bounds\n   ([#634](https://github.com/rust-ndarray/ndarray/pull/634) by [@termoshtt])\n - `Axis::index()` now takes `self` instead of `&self`\n   ([#642](https://github.com/rust-ndarray/ndarray/pull/642) by [@max-sixty])\n - The bounds on the implementation of `Hash` for `Dim` have changed\n   ([#642](https://github.com/rust-ndarray/ndarray/pull/642) by [@max-sixty])\n\nBug fixes\n---------\n - Prevent overflow when computing strides in `do_slice`\n   ([#575](https://github.com/rust-ndarray/ndarray/pull/575) by [@jturner314])\n - Fix issue with BLAS matrix-vector multiplication for array with only 1 non-trivial dimension\n   ([#585](https://github.com/rust-ndarray/ndarray/pull/585) by [@sebasv])\n - Fix offset computation to avoid UB/panic when slicing in some edge cases\n   ([#636](https://github.com/rust-ndarray/ndarray/pull/636) by [@jturner314])\n - Fix issues with axis iterators\n   ([#669](https://github.com/rust-ndarray/ndarray/pull/669) by [@jturner314])\n - Fix handling of empty input to `s!` macro\n   ([#714](https://github.com/rust-ndarray/ndarray/pull/714) by [@bluss] and [#715](https://github.com/rust-ndarray/ndarray/pull/715) by [@jturner314])\n\nOther changes\n-------------\n - Various improvements to `ndarray`'s CI pipeline (`clippy`, `cargo fmt`, etc. by [@max-sixty] and [@termoshtt])\n - Bump minimum required Rust version to 1.37.\n\n\nVersion 0.12.1 (2018-11-21)\n===========================\n\n  - Add `std_axis` method for computing standard deviation by @LukeMathWalker.\n  - Add `product` method for computing product of elements in an array by @sebasv.\n  - Add `first` and `first_mut` methods for getting the first element of an array.\n  - Add `into_scalar` method for converting an `Array0` into its element.\n  - Add `insert_axis_inplace` and `index_axis_inplace` methods for inserting and\n    removing axes in dynamic-dimensional (`IxDyn`) arrays without taking ownership.\n  - Add `stride_of` method for getting the stride of an axis.\n  - Add public `ndim` and `zeros` methods to `Dimension` trait.\n  - Rename `scalar_sum` to `sum`, `subview` to `index_axis`,\n    `subview_mut` to `index_axis_mut`, `subview_inplace` to\n    `collapse_axis`, `into_subview` to `index_axis_move`, and\n    `slice_inplace` to `slice_collapse` (deprecating the old names,\n    except for `scalar_sum` which will be in 0.13).\n  - Deprecate `remove_axis` and fix soundness hole when removing a zero-length axis.\n  - Implement `Clone` for `LanesIter`.\n  - Implement `Debug`, `Copy`, and `Clone` for `FoldWhile`.\n  - Relax constraints on `sum_axis`, `mean_axis`, and `into_owned`.\n  - Add number of dimensions (and whether it's const or dynamic) to array `Debug` format.\n  - Allow merging axes with `merge_axes` when either axis length is ≤ 1.\n  - Clarify and check more precise safety requirements for constructing arrays.\n    This fixes undefined behavior in some edge cases.\n    (See [#543](https://github.com/rust-ndarray/ndarray/pull/543).)\n  - Fix `is_standard_layout` in some edge cases.\n    (See [#543](https://github.com/rust-ndarray/ndarray/pull/543).)\n  - Fix chunk sizes in `axis_chunks_iter` and `axis_chunks_iter_mut` when\n    the stride is zero or the array element type is zero-sized by @bluss.\n  - Improve documentation by @jturner314, @bluss, and @paulkernfeld.\n  - Improve element iterators with implementations of `Iterator::rfold`.\n  - Miscellaneous internal implementation improvements by @jturner314 and @bluss.\n\n\nVersion 0.12.0 (2018-09-01)\n===========================\n\n  - Add `var_axis` method for computing variance by @LukeMathWalker.\n  - Add `map_mut` and `map_axis_mut` methods (mutable variants of `map` and `map_axis`) by @LukeMathWalker.\n  - Add support for 128-bit integer scalars (`i128` and `u128`).\n  - Add support for slicing with inclusive ranges (`start..=end` and `..=end`).\n  - Relax constraint on closure from `Fn` to `FnMut` for `mapv`, `mapv_into`, `map_inplace` and `mapv_inplace`.\n  - Implement `TrustedIterator` for `IterMut`.\n  - Bump `num-traits` and `num-complex` to version `0.2`.\n  - Bump `blas-src` to version `0.2`.\n  - Bump minimum required Rust version to 1.27.\n  - Additional contributors to this release: @ExpHP, @jturner314, @alexbool, @messense, @danmack, @nbro\n\nVersion 0.11.2 (2018-03-21)\n===========================\n\n  - New documentation; @jturner314 has written a large “ndarray for NumPy users”\n    document, which we include in rustdoc.\n    [Read it here](https://docs.rs/ndarray/0.11/ndarray/doc/ndarray_for_numpy_users/)\n    a useful quick guide for any user, and in particular if you are familiar\n    with numpy.\n  - Add `ArcArray`. `RcArray` has become `ArcArray`; it is now using thread\n    safe reference counting just like `Arc`; this means that shared ownership\n    arrays are now `Send/Sync` if the corresponding element type is `Send\n    + Sync`.\n  - Add array method `.permute_axes()` by @jturner314\n  - Add array constructor `Array::ones` by @ehsanmok\n  - Add the method `.reborrow()` to `ArrayView/Mut`, which can be used\n    to shorten the lifetime of an array view; in a reference-like type this\n    normally happens implicitly but for technical reasons the views have\n    an invariant lifetime parameter.\n  - Fix an issue with type inference, the dimensionality of an array\n    should not infer correctly in more cases when using slicing. By @jturner314.\n\n\nVersion 0.11.1 (2018-01-21)\n===========================\n\n  - Dimension types (`Ix1, Ix2, .., IxDyn`) now implement `Hash` by\n    @jturner314\n  - Blas integration can now use *gemv* for matrix-vector multiplication also\n    when the matrix is f-order by @maciejkula\n  - Encapsulated `unsafe` code blocks in the `s![]` macro are now exempted\n    from the `unsafe_code` lint by @jturner314\n\nVersion 0.11.0 (2017-12-29)\n===========================\n\n[Release announcement](https://jim.turner.link/pages/ndarray-0.11/)\n\n  - Allow combined slicing and subviews in a single operation by @jturner314 and\n    @bluss\n\n    * Add support for individual indices (to indicate subviews) to the `s![]`\n      macro, and change the return type to\n      `&SliceInfo<[SliceOrIndex; n], Do>`.\n    * Change the argument type of the slicing methods to correspond to the new\n      `s![]` macro.\n    * Replace the `Si` type with `SliceOrIndex`.\n    * Add a new `Slice` type that is similar to the old `Si` type.\n\n  - Add support for more index types (e.g. `usize`) to the `s![]` macro by\n    @jturner314\n  - Rename `.islice()` to `.slice_inplace()` by @jturner314\n  - Rename `.isubview()` to `.subview_inplace()` by @jturner314\n  - Add `.slice_move()`, `.slice_axis()`, `.slice_axis_mut()`, and\n    `.slice_axis_inplace()` methods by @jturner314\n  - Add `Dimension::NDIM` associated constant by @jturner314\n  - Change trait bounds for arithmetic ops between an array (by value) and\n    a reference to an array or array view (“array1 (op) &array2”); before,\n    an `ArrayViewMut` was supported on the left hand side, now, the left\n    hand side must not be a view.\n    ([#380](https://github.com/rust-ndarray/ndarray/pull/380)) by @jturner314\n  - Remove deprecated methods (`.whole_chunks()`, `.whole_chunks_mut()`,\n    `.sum()`, and `.mean()`; replaced by `.exact_chunks()`,\n    `.exact_chunks_mut()`, `.sum_axis()`, and `.mean_axis()`,\n    respectively) by @bluss\n  - Updated to the latest blas (optional) dependencies. See instructions in the\n    README.\n  - Minimum required Rust version is 1.22.\n\n\nEarlier releases\n================\n\n- 0.10.13\n\n  - Add an extension trait for longer-life indexing methods for array views\n    (`IndexLonger`) by @termoshtt and @bluss\n  - The `a.dot(b)` method now supports a vector times matrix multiplication\n    by @jturner314\n  - More general `.into_owned()` method by @jturner314\n\n- 0.10.12\n\n  - Implement serde serialization for `IxDyn`, so that arrays and array views\n    using it are serializable as well.\n\n- 0.10.11\n\n  - Add method `.uswap(a, b)` for unchecked swap by @jturner314\n  - Bump private dependencies (itertools 0.7)\n\n- 0.10.10\n\n  - Fix crash with zero size arrays in the fallback matrix multiplication code\n    (#365) by @jturner314\n\n- 0.10.9\n\n  - Fix crash in `Array::from_shape_fn` when creating an f-order array\n    with zero elements (#361) by @jturner314\n\n- 0.10.8\n\n  - Add method `.insert_axis()` to arrays and array views by @jturner314\n\n- 0.10.7\n\n  - Add method `.is_empty()` to arrays and array views by @iamed2\n  - Support optional trailing commas in the `array![]` macro by Alex Burka\n  - Added an example of permuting/sorting along an axis to the sources\n\n- 0.10.6\n\n  - Tweak the implementation for (bounds checked) indexing of arrays\n    ([] operator). The new code will have the optimizer elide the bounds checks\n    in more situations.\n\n- 0.10.5\n\n  - Add method `.into_dimensionality::<D>()` for dimensionality conversion\n    (From `IxDyn` to fixed size and back).\n  - New names `.sum_axis` and `.mean_axis` for sum and mean functions.\n    Old names deprecated to make room for scalar-returning methods, making\n    a proper convention.\n  - Fix deserialization using ron (#345) by @Libbum\n\n- 0.10.4\n\n  - Fix unused mut warnings in `azip!()` macro\n  - Fix bug #340 by @lloydmeta; uses blas gemm for more memory layouts\n    of column matrices. Only relevant if using blas.\n\n- 0.10.3\n\n  - Fix docs.rs doc build\n\n- 0.10.2\n\n  - Support trailing commas in the `s![]` macro\n  - Some documentation improvements for the introduction, for `azip!()` and\n    other places.\n  - Added two more examples in the source\n\n- 0.10.1\n\n  - Add method `.into_dyn()` to convert to a dynamic dimensionality array\n    or array view. By @bobogei81123\n  - Edit docs for the fact that type alias pages now show methods.\n    See the doc pages for `Array` and `ArrayView` and the other aliases.\n  - Edit docs for `Zip`\n\n- 0.10.0\n\n  - Upgrade to Serde 1.0. Crate feature name is `serde-1`.\n  - Require Rust 1.18. The `pub(crate)` feature is that important.\n\n\n- 0.9.1\n\n  - Fix `Array::from_shape_fn` to give correct indices for f-order shapes\n  - Fix `Array::from_shape_fn` to panic correctly on shape size overflow\n\n- 0.9.0 [Release Announcement](https://bluss.github.io//rust/2017/04/09/ndarray-0.9/)\n\n  - Add `Zip::indexed`\n  - New methods `genrows/_mut, gencolumns/_mut, lanes/_mut` that\n    return iterable producers (producer means `Zip` compatible).\n  - New method `.windows()` by @Robbepop, returns an iterable producer\n  - New function `general_mat_vec_mul` (with fast default and blas acceleration)\n  - `Zip::apply` and `fold_while` now take `self` as the first argument\n  - `indices/_of` now return iterable producers (not iterator)\n  - No allocation for short `IxDyn`.\n  - Remove `Ix, Ixs` from the prelude\n  - Remove deprecated `Axis::axis` method (use `.index()`)\n  - Rename `.whole_chunks` to `.exact_chunks`.\n  - Remove `.inner_iter` in favour of the new `.genrows()` method.\n  - Iterators and similar structs are now scoped under `ndarray::iter`\n  - `IntoNdProducer` now has the `Item` associated type\n  - Owned array storage types are now encapsulated in newtypes\n  - `FoldWhile` got the method `is_done`.\n  - Arrays now implement formatting trait `Binary` if elements do\n  - Internal changes. `NdProducer` generalized. `Dimension` gets\n    the `Smaller` type parameter. Internal traits have the private marker now.\n  - `#` (alternate) in formatting does nothing now.\n  - Require Rust 1.15\n\n- 0.8.4\n\n  - Use `Zip` in `.all_close()` (performance improvement)\n  - Use `#[inline]` on a function used for higher dimensional checked\n    indexing (performance improvement for arrays of ndim >= 3)\n  - `.subview()` has a more elaborate panic message\n\n- 0.8.3\n\n  - Fix a bug in `Zip` / `NdProducer` if an array of at least 3 dimensions\n    was contig but not c- nor f-contig.\n  - `WholeChunksIter/Mut` now impl `Send/Sync` as appropriate\n  - Misc cleanup and using dimension-reducing versions of inner_iter\n    internally. Remove a special case in `zip_mut_with` that only made it\n    slower (1D not-contig arrays).\n\n- 0.8.2\n\n  - Add more documentation and an example for dynamic dimensions: see\n    [`IxDyn`](https://docs.rs/ndarray/0.8.2/ndarray/type.IxDyn.html).\n    `IxDyn` will have a representation change next incompatible\n    version. Use it as a type alias for best forward compatibility.\n  - Add iterable and producer `.whole_chunks_mut(size)`.\n  - Fix a bug in `whole_chunks`: it didn't check the dimensionality of the\n    requested chunk size properly (an `IxDyn`-only bug).\n  - Improve performance of `zip_mut_with` (and thus all binary operators) for\n    block slices of row major arrays.\n  - `AxisChunksIter` creation sped up and it implements `Clone`.\n  - Dimension mismatch in `Zip` has a better panic message.\n\n\n- 0.8.1\n\n  - Add `Zip` and macro `azip!()` which implement lock step function\n    application across elements from one up to six arrays (or in general\n    producers)\n\n    + Apart from array views, axis iterators and the whole chunks iterable are\n      also producers\n\n  - Add constructor `Array::uninitialized`\n  - Add iterable and producer `.whole_chunks(size)`\n  - Implement a prettier `Debug` for `Si`.\n  - Fix `Array::default` so that it panics as documented if the size of the\n    array would wrap around integer type limits.\n  - Output more verbose panics for errors when slicing arrays (only in debug\n    mode).\n\n- 0.8.0\n\n  - Update serde dependency to 0.9\n  - Remove deprecated type alias `OwnedArray` (use `Array`)\n  - Remove deprecated `.assign_scalar()` (use `fill`)\n\n- 0.7.3\n\n  - Add macro `array![]` for creating one-, two-, or three-dimensional arrays\n    (with ownership semantics like `vec![]`)\n  - `Array` now implements `Clone::clone_from()` specifically, so that its\n    allocation is (possibly) reused.\n  - Add `.to_vec()` for one-dimensional arrays\n  - Add `RcArray::into_owned(self) -> Array`.\n  - Add crate categories\n\n- 0.7.2\n\n  - Add array methods `.remove_axis()`, `.merge_axes()` and `.invert_axis()`\n  - Rename `Axis`’ accessor `axis` to `index`, old name is deprecated.\n\n- 0.7.1\n\n  - Fix two bugs in `Array::clone()`; it did not support zero-size elements\n    like `()`, and for some negatively strided arrays it did not update the\n    first element offset correctly.\n  - Add `.axes()` which is an iterator over the axes of an array, yielding\n    its index, length and stride.\n  - Add method `.max_stride_axis()`.\n\n- 0.6.10\n\n  - Fix two bugs in `Array::clone()`; it did not support zero-size elements\n    like `()`, and for some negatively strided arrays it did not update the\n    first element offset correctly.\n\n- 0.7.0\n\n  - Big overhaul of dimensions: Add type `Dim` with aliases\n    `Ix1, Ix2, Ix3, ...` etc for specific dimensionalities.\n    Instead of `Ix` for dimension use `Ix1`, instead of `(Ix, Ix)` use\n    `Ix2`, and so on.\n  - The dimension type `Dim` supports indexing and arithmetic. See\n    `Dimension` trait for new methods and inherited traits.\n  - Constructors and methods that take tuples for array sizes, like `Array::zeros,`\n    `Array::from_shape_vec`, `.into_shape()` and so on will continue to work\n    with tuples.\n  - The array method `.raw_dim()` returns the shape description\n    `D` as it is. `.dim()` continues to return the dimension as a tuple.\n  - Renamed iterators for consistency (each iterator is named for the\n    method that creates it, for example `.iter()` returns `Iter`).\n  - The index iterator is now created with free functions `indices` or\n    `indices_of`.\n  - Expanded the `ndarray::prelude` module with the dimensionality-specific\n    type aliases, and some other items\n  - `LinalgScalar` and related features no longer need to use `Any` for\n    static type dispatch.\n  - Serialization with `serde` now supports binary encoders like bincode\n    and others.\n  - `.assign_scalar()` was deprecated and replaced by `.fill()`, which\n    takes an element by value.\n  - Require Rust 1.13\n\n- 0.6.9\n\n  - Implement `ExactSizeIterator` for the indexed iterators\n\n- 0.6.8\n\n  - Fix a bug in a partially consumed elements iterator's `.fold()`.\n    (**Note** that users are recommended to not use the elements iterator,\n    but the higher level functions which are the maps, folds and other methods\n    of the array types themselves.)\n\n- 0.6.7\n\n  - Improve performance of a lot of basic operations for arrays where\n    the innermost dimension is not contiguous (`.fold(), .map(),\n    .to_owned()`, arithmetic operations with scalars).\n  - Require Rust 1.11\n\n- 0.6.6\n\n  - Add dimensionality specific type aliases: `Array0, Array1, Array2, ...`\n    and so on (there are many), also `Ix0, Ix1, Ix2, ...`.\n  - Add constructor `Array::from_shape_fn(D, |D| -> A)`.\n  - Improve performance of `Array::default`, and `.fold()` for noncontiguous\n    array iterators.\n\n- 0.6.5\n\n  - Add method `.into_raw_vec()` to turn an `Array` into the its\n    underlying element storage vector, in whatever element order it is using.\n\n- 0.6.4\n\n  - Add method `.map_axis()` which is used to flatten an array along\n    one axis by mapping it to a scalar.\n\n- 0.6.3\n\n  - Work around compilation issues in nightly (issue #217)\n  - Add `Default` implementations for owned arrays\n\n- 0.6.2\n\n  - Add serialization support for serde 0.8, under the crate feature name `serde`\n\n- 0.6.1\n\n  - Add `unsafe` array view constructors `ArrayView::from_shape_ptr`\n    for read-only and read-write array views. These make it easier to\n    create views from raw pointers.\n\n- 0.6.0\n\n  - Rename `OwnedArray` to `Array`. The old name is deprecated.\n  - Remove deprecated constructor methods. Use zeros, from_elem, from_shape_vec\n    or from_shape_vec_unchecked instead.\n  - Remove deprecated in place arithmetic methods like iadd et.c. Use += et.c.\n    instead.\n  - Remove deprecated method mat_mul, use dot instead.\n  - Require Rust 1.9\n\n- 0.5.2\n\n  - Use num-traits, num-complex instead of num.\n\n- 0.5.1\n\n  - Fix theoretical well-formedness issue with Data trait\n\n- 0.5.0\n\n  - Require Rust 1.8 and enable +=, -=, and the other assign operators.\n    All `iadd, iadd_scalar` and similar methods are now deprecated.\n  - ndarray now has a prelude: `use ndarray::prelude::*;`.\n  - Constructors from_elem, zeros, from_shape_vec now all support passing a custom\n    memory layout. A lot of specific constructors were deprecated.\n  - Add method `.select(Axis, &[Ix]) -> OwnedArray`, to create an array\n    from a non-contiguous pick of subviews along an axis.\n  - Rename `.mat_mul()` to just `.dot()` and add a function `general_mat_mul`\n    for matrix multiplication with scaling into an existing array.\n  - **Change .fold() to use arbitrary order.**\n  - See below for more details\n\n- 0.5.0-alpha.2\n\n  - Fix a namespace bug in the stack![] macro.\n  - Add method .select() that can pick an arbitrary set of rows (for example)\n    into a new array.\n\n- 0.4.9\n\n  - Fix a namespace bug in the stack![] macro.\n  - Add deprecation messages to .iadd() and similar methods (use += instead).\n\n- 0.5.0-alpha.1\n\n  - Add .swap(i, j) for swapping two elements\n  - Add a prelude module `use ndarray::prelude::*;`\n  - Add ndarray::linalg::general_mat_mul which computes *C ← α A B + β C*,\n    i.e matrix multiplication into an existing array, with optional scaling.\n  - Add .fold_axis(Axis, folder)\n  - Implement .into_shape() for f-order arrays\n\n- 0.5.0-alpha.0\n\n  - Requires Rust 1.8. Compound assignment operators are now enabled by default.\n  - Rename `.mat_mul()` to `.dot()`. The same method name now handles\n    dot product and matrix multiplication.\n  - Remove deprecated items: raw_data, raw_data_mut, allclose, zeros, Array.\n    Docs for 0.4. lists the replacements.\n  - Remove deprecated crate features: rblas, assign_ops\n  - A few consuming arithmetic ops with ArrayViewMut were removed (this\n    was missed in the last version).\n  - **Change .fold() to use arbitrary order.** Its specification and\n    implementation has changed, to pick the most appropriate element traversal\n    order depending on memory layout.\n\n- 0.4.8\n\n  - Fix an error in `.dot()` when using BLAS and arrays with negative stride.\n\n- 0.4.7\n\n  - Add dependency matrixmultiply to handle matrix multiplication\n    for floating point elements. It supports matrices of general stride\n    and is a great improvement for performance. See PR #175.\n\n- 0.4.6\n\n  - Fix bug with crate feature blas; it would not compute matrix\n    multiplication correctly for arrays with negative or zero stride.\n  - Update blas-sys version (optional dependency).\n\n- 0.4.5\n\n  - Add `.all_close()` which replaces the now deprecated `.allclose()`.\n    The new method has a stricter protocol: it panics if the array\n    shapes are not compatible. We don't want errors to pass silently.\n  - Add a new illustration to the doc for `.axis_iter()`.\n  - Rename `OuterIter, OuterIterMut` to `AxisIter, AxisIterMut`.\n    The old name is now deprecated.\n\n- 0.4.4\n\n  - Add mapping methods `.mapv(), .mapv_into(), .map_inplace(),`\n    `.mapv_inplace(), .visit()`. The `mapv` versions\n    have the transformation function receive the element by value (hence *v*).\n  - Add method `.scaled_add()` (a.k.a axpy) and constructor `from_vec_dim_f`.\n  - Add 2d array methods `.rows(), .cols()`.\n  - Deprecate method `.fold()` because it dictates a specific visit order.\n\n- 0.4.3\n\n  - Add array method `.t()` as a shorthand to create a transposed view.\n  - Fix `mat_mul` so that it accepts arguments of different array kind\n  - Fix a bug in `mat_mul` when using BLAS and multiplying with a column\n    matrix (#154)\n\n- 0.4.2\n\n  - Add new BLAS integration used by matrix multiplication\n    (selected with crate feature `blas`). Uses pluggable backend.\n  - Deprecate module `ndarray::blas` and crate feature `rblas`. This module\n    was moved to the crate `ndarray-rblas`.\n  - Add array methods `as_slice_memory_order, as_slice_memory_order_mut, as_ptr,\n    as_mut_ptr`.\n  - Deprecate `raw_data, raw_data_mut`.\n  - Add `Send + Sync` to `NdFloat`.\n  - Arrays now show shape & stride in their debug formatter.\n  - Fix a bug where `from_vec_dim_stride` did not accept arrays with unitary axes.\n  - Performance improvements for contiguous arrays in non-c order when using\n    methods `to_owned, map, scalar_sum, assign_scalar`,\n    and arithmetic operations between array and scalar.\n  - Some methods now return arrays in the same memory order of the input\n    if the input is contiguous: `to_owned, map, mat_mul` (matrix multiplication\n    only if both inputs are the same memory order), and arithmetic operations\n    that allocate a new result.\n  - Slight performance improvements in `dot, mat_mul` due to more efficient\n    glue code for calling BLAS.\n  - Performance improvements in `.assign_scalar`.\n\n- 0.4.1\n\n  - Mark iterators `Send + Sync` when possible.\n\n- **0.4.0** [Release Announcement](http://bluss.github.io/rust/2016/03/06/ndarray-0.4/)\n\n  - New array splitting via `.split_at(Axis, Ix)` and `.axis_chunks_iter()`\n  - Added traits `NdFloat`, `AsArray` and `From for ArrayView` which\n    improve generic programming.\n  - Array constructors panic when attempting to create an array whose element\n    count overflows `usize`. (Would be a debug assertion for overflow before.)\n  - Performance improvements for `.map()`.\n  - Added `stack` and macro `stack![axis, arrays..]` to concatenate arrays.\n  - Added constructor `OwnedArray::range(start, end, step)`.\n  - The type alias `Array` was renamed to `RcArray` (and the old name deprecated).\n  - Binary operators are not defined when consuming a mutable array view as\n    the left hand side argument anymore.\n  - Remove methods and items deprecated since 0.3 or earlier; deprecated methods\n    have notes about replacements in 0.3 docs.\n  - See below for full changelog through alphas.\n\n- 0.4.0-alpha.8\n\n  - In debug mode, indexing an array out of bounds now has a detailed\n    message about index and shape. (In release mode it does not.)\n  - Enable assign_ops feature automatically when it is supported (Rust 1.8 beta\n    or later).\n  - Add trait `NdFloat` which makes it easy to be generic over `f32, f64`.\n  - Add `From` implementations that convert slices or references to arrays\n    into array views. This replaces `from_slice` from a previous alpha.\n  - Add `AsArray` trait, which is simply based on those `From` implementations.\n  - Improve `.map()` so that it can autovectorize.\n  - Use `Axis` argument in `RemoveAxis` too.\n  - Require `DataOwned` in the raw data methods.\n  - Merged error types into a single `ShapeError`, which uses no allocated data.\n\n- 0.4.0-alpha.7\n\n  - Fix too strict lifetime bound in arithmetic operations like `&a @ &b`.\n  - Rename trait Scalar to ScalarOperand (and improve its docs).\n  - Implement <<= and >>= for arrays.\n\n- 0.4.0-alpha.6\n\n  - All axis arguments must now be wrapped in newtype `Axis`.\n  - Add method `.split_at(Axis, Ix)` to read-only and read-write array views.\n  - Add constructors `ArrayView{,Mut}::from_slice` and array view methods\n    are now visible in the docs.\n\n- 0.4.0-alpha.5\n\n  - Use new trait `LinalgScalar` for operations where we want type-based specialization.\n    This shrinks the set of types that allow dot product, matrix multiply, mean.\n  - Use BLAS acceleration transparently in `.dot()` (this is the first step).\n  - Only OwnedArray and RcArray and not ArrayViewMut can now be used as consumed\n    left hand operand for arithmetic operators. [See arithmetic operations docs!](\n    https://docs.rs/ndarray/0.4.0-alpha.5/ndarray/struct.ArrayBase.html#arithmetic-operations)\n  - Remove deprecated module `linalg` (it was already mostly empty)\n  - Deprecate free function `zeros` in favour of static method `zeros`.\n\n- 0.4.0-alpha.4\n\n  - Rename `Array` to `RcArray`. Old name is deprecated.\n  - Add methods `OuterIter::split_at`, `OuterIterMut::split_at`\n  - Change `arr0, arr1, arr2, arr3` to return `OwnedArray`.\n    Add `rcarr1, rcarr2, rcarr3` that return `RcArray`.\n\n- 0.4.0-alpha.3\n\n  - Improve arithmetic operations where the RHS is a broadcast 0-dimensional\n    array.\n  - Add read-only and read-write array views to the `rblas` integration.\n    Added methods `AsBlas::{blas_view_checked, blas_view_mut_checked, bv, bvm}`.\n  - Use hash_slice in `Hash` impl for arrays.\n\n- 0.4.0-alpha.2\n\n  - Add `ArrayBase::reversed_axes` which transposes an array.\n\n- 0.4.0-alpha.1\n\n  - Add checked and unchecked constructor methods for creating arrays\n    from a vector and explicit dimension and stride, or with\n    fortran (column major) memory order (marked `f`):\n    \n    + `ArrayBase::from_vec_dim`, `from_vec_dim_stride`,\n      `from_vec_dim_stride_unchecked`,\n    + `from_vec_dim_unchecked_f`, `from_elem_f`, `zeros_f`\n    + View constructors `ArrayView::from_slice_dim_stride`,\n      `ArrayViewMut::from_slice_dim_stride`.\n    + Rename old `ArrayBase::from_vec_dim` to `from_vec_dim_unchecked`.\n\n  - Check better for wraparound when computing the number of elements in a shape;\n    this adds error cases that **panic** in `from_elem`, `zeros` etc,\n    however *the new check will only ever panic in cases that would\n    trigger debug assertions for overflow in the previous versions*!.\n  - Add an array chunks iterator `.axis_chunks_iter()` and mutable version;\n    it allows traversing the array in for example chunks of *n* rows at a time.\n  - Remove methods and items deprecated since 0.3 or earlier; deprecated methods\n    have notes about replacements in 0.3 docs.\n\n- 0.3.1\n\n  - Add `.row_mut()`, `.column_mut()`\n  - Add `.axis_iter()`, `.axis_iter_mut()`\n\n- **0.3.0**\n\n  - Second round of API & consistency update is done\n  - 0.3.0 highlight: **Index type** `Ix` **changed to** `usize`.\n  - 0.3.0 highlight: Operator overloading for scalar and array arithmetic.\n  - 0.3.0 highlight: Indexing with `a[[i, j, k]]` syntax.\n  - Add `ArrayBase::eye(n)`\n  - See below for more info\n\n- 0.3.0-alpha.4\n\n  - Shrink array view structs by removing their redundant slice field (see #45).\n    Changed the definition of the view `type` aliases.\n  - `.mat_mul()` and `.mat_mul_col()` now return `OwnedArray`.\n    Use `.into_shared()` if you need an `Array`.\n  - impl ExactSizeIterator where possible for iterators.\n  - impl DoubleEndedIterator for `.outer_iter()` (and _mut).\n\n- 0.3.0-alpha.3\n\n  - `.subview()` changed to return an array view, also added `into_subview()`.\n  - Add `.outer_iter()` and `.outer_iter_mut()` for iteration along the\n    greatest axis of the array. Views also implement `into_outer_iter()` for\n    “lifetime preserving” iterators.\n\n- 0.3.0-alpha.2\n\n  - Improve the strided last dimension case in `zip_mut_with` slightly\n    (affects all binary operations).\n  - Add `.row(i), .column(i)` for 2D arrays.\n  - Deprecate `.row_iter(), .col_iter()`.\n  - Add method `.dot()` for computing the dot product between two 1D arrays.\n\n\n- 0.3.0-alpha.1\n\n  - **Index type** `Ix` **changed to** `usize` (#9). Gives better iterator codegen\n    and 64-bit size arrays.\n  - Support scalar operands with arithmetic operators.\n  - Change `.slice()` and `.diag()` to return array views, add `.into_diag()`.\n  - Add ability to use fixed size arrays for array indexing, enabling syntax\n    like `a[[i, j]]` for indexing.\n  - Add `.ndim()`\n\n- **0.2.0**\n\n  - First chapter of API and performance evolution is done \\\\o/\n  - 0.2.0 highlight: Vectorized (efficient) arithmetic operations\n  - 0.2.0 highlight: Easier slicing using `s![]`\n  - 0.2.0 highlight: Nicer API using views\n  - 0.2.0 highlight: Bridging to BLAS functions.\n  - See below for more info\n\n- 0.2.0-alpha.9\n\n  - Support strided matrices in `rblas` bridge, and fix a bug with\n    non square matrices.\n  - Deprecated all of module `linalg`.\n\n- 0.2.0-alpha.8\n\n  - **Note:** PACKAGE NAME CHANGED TO `ndarray`. Having package != crate ran\n    into many quirks of various tools. Changing the package name is easier for\n    everyone involved!\n  - Optimized `scalar_sum()` so that it will vectorize for the floating point\n    element case too.\n\n- 0.2.0-alpha.7\n\n  - Optimized arithmetic operations!\n\n    - For c-contiguous arrays or arrays with c-contiguous lowest dimension\n      they optimize very well, and can vectorize!\n\n  - Add `.inner_iter()`, `.inner_iter_mut()`\n  - Add `.fold()`, `.zip_mut_with()`\n  - Add `.scalar_sum()`\n  - Add example `examples/life.rs`\n\n- 0.2.0-alpha.6\n\n  - Add `#[deprecated]` attributes (enabled with new enough nightly)\n  - Add `ArrayBase::linspace`, deprecate constructor `range`.\n\n- 0.2.0-alpha.5\n\n  - Add `s![...]`, a slice argument macro.\n  - Add `aview_mut1()`, `zeros()`\n  - Add `.diag_mut()` and deprecate `.diag_iter_mut()`, `.sub_iter_mut()`\n  - Add `.uget()`, `.uget_mut()` for unchecked indexing and deprecate the\n    old names.\n  - Improve `ArrayBase::from_elem`\n  - Removed `SliceRange`, replaced by `From` impls for `Si`.\n\n- 0.2.0-alpha.4\n\n  - Slicing methods like `.slice()` now take a fixed size array of `Si`\n    as the slice description. This allows more type checking to verify that the\n    number of axes is correct.\n  - Add experimental `rblas` integration.\n  - Add `into_shape()` which allows reshaping any array or view kind.\n\n- 0.2.0-alpha.3\n\n  - Add and edit a lot of documentation\n\n- 0.2.0-alpha.2\n\n  - Improve performance for iterators when the array data is in the default\n    memory layout. The iterator then wraps the default slice iterator and\n    loops will autovectorize.\n  - Remove method `.indexed()` on iterators. Changed `Indexed` and added\n    `ÌndexedMut`.\n  - Added `.as_slice(), .as_mut_slice()`\n  - Support rustc-serialize\n\n\n- 0.2.0-alpha\n\n  - Alpha release!\n  - Introduce `ArrayBase`, `OwnedArray`, `ArrayView`, `ArrayViewMut`\n  - All arithmetic operations should accept any array type\n  - `Array` continues to refer to the default reference counted copy on write\n    array\n  - Add `.view()`, `.view_mut()`, `.to_owned()`, `.into_shared()`\n  - Add `.slice_mut()`, `.subview_mut()`\n  - Some operations now return `OwnedArray`:\n\n    - `.map()`\n    - `.sum()`\n    - `.mean()`\n\n  - Add `get`, `get_mut` to replace the now deprecated `at`, `at_mut`.\n  - Fix bug in assign_scalar\n\n- 0.1.1\n\n  - Add Array::default\n  - Fix bug in raw_data_mut\n\n- 0.1.0\n\n  - First release on crates.io\n  - Starting point for evolution to come\n \n\n[@adamreichold]: https://github.com/adamreichold\n[@aganders3]: https://github.com/aganders3\n[@bluss]: https://github.com/bluss\n[@jturner314]: https://github.com/jturner314\n[@LukeMathWalker]: https://github.com/LukeMathWalker\n[@acj]: https://github.com/acj\n[@adamreichold]: https://github.com/adamreichold\n[@atouchet]: https://github.com/atouchet\n[@andrei-papou]: https://github.com/andrei-papou\n[@benkay]: https://github.com/benkay\n[@cassiersg]: https://github.com/cassiersg\n[@chohner]: https://github.com/chohner\n[@dam5h]: https://github.com/dam5h\n[@ethanhs]: https://github.com/ethanhs\n[@d-dorazio]: https://github.com/d-dorazio\n[@Eijebong]: https://github.com/Eijebong\n[@HyeokSuLee]: https://github.com/HyeokSuLee\n[@insideoutclub]: https://github.com/insideoutclub\n[@JP-Ellis]: https://github.com/JP-Ellis\n[@jimblandy]: https://github.com/jimblandy\n[@LeSeulArtichaut]: https://github.com/LeSeulArtichaut\n[@lifuyang]: https://github.com/liufuyang\n[@kdubovikov]: https://github.com/kdubovikov\n[@makotokato]: https://github.com/makotokato\n[@max-sixty]: https://github.com/max-sixty\n[@mneumann]: https://github.com/mneumann\n[@mockersf]: https://github.com/mockersf\n[@nilgoyette]: https://github.com/nilgoyette\n[@nitsky]: https://github.com/nitsky\n[@Rikorose]: https://github.com/Rikorose\n[@rth]: https://github.com/rth\n[@sebasv]: https://github.com/sebasv\n[@SparrowLii]: https://github.com/SparrowLii\n[@steffahn]: https://github.com/steffahn\n[@stokhos]: https://github.com/stokhos\n[@termoshtt]: https://github.com/termoshtt\n[@TheLortex]: https://github.com/TheLortex\n[@viniciusd]: https://github.com/viniciusd\n[@VasanthakumarV]: https://github.com/VasanthakumarV\n[@xd009642]: https://github.com/xd009642\n[@Zuse64]: https://github.com/Zuse64\n"
        },
        {
          "name": "benches",
          "type": "tree",
          "content": null
        },
        {
          "name": "clippy.toml",
          "type": "blob",
          "size": 0.0419921875,
          "content": "single-char-binding-names-threshold = 1000\n"
        },
        {
          "name": "crates",
          "type": "tree",
          "content": null
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "misc",
          "type": "tree",
          "content": null
        },
        {
          "name": "ndarray-rand",
          "type": "tree",
          "content": null
        },
        {
          "name": "rustfmt.toml",
          "type": "blob",
          "size": 0.6669921875,
          "content": "edition = \"2018\"\narray_width = 100\nchain_width = 60\nfn_call_width = 100\nmax_width = 120\nbrace_style = \"AlwaysNextLine\"\ncontrol_brace_style = \"AlwaysSameLine\"\nfn_params_layout = \"Compressed\" # ?\nformat_macro_bodies = false\nimports_granularity = \"Preserve\"\nimports_indent = \"Block\"\nimports_layout = \"HorizontalVertical\"\ninline_attribute_width = 0\nindent_style = \"Block\"\nmatch_arm_blocks = false\nmatch_arm_leading_pipes = \"Preserve\"\nmerge_derives = false\noverflow_delimited_expr = true\nreorder_modules = false  # impacts rustdoc order\nshort_array_element_width_threshold = 32\nskip_macro_invocations = [\"*\"]\nunstable_features = true\nwhere_single_line = true\n\n# ignored files\nignore = []\n"
        },
        {
          "name": "scripts",
          "type": "tree",
          "content": null
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}