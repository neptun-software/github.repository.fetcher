{
  "metadata": {
    "timestamp": 1736709217727,
    "page": 505,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjUxMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "mlua-rs/mlua",
      "stars": 1886,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.05859375,
          "content": "target/\n**/*.rs.bk\nCargo.lock\n\n.vscode/\n.DS_Store\n.stignore\n"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 21.7275390625,
          "content": "## v0.10.2 (Dec 1st, 2024)\n\n- Switch proc-macro-error to proc-macro-error2 (#493)\n- Do not allow Lua to run GC finalizers on ref thread (#491)\n- Fix chunks loading in Luau when memory limit is enforced (#488)\n- Added `String::wrap` method to wrap arbitrary `AsRef<[u8]>` into `impl IntoLua`\n- Better FreeBSD/OpenBSD support (thanks to cos)\n- Delay \"any\" userdata metatable creation until first instance is created (#482)\n- Reduce amount of generated code for `UserData` (less generics)\n\n## v0.10.1 (Nov 9th, 2024)\n\n- Minimal Luau updated to 0.650\n- Added Luau native vector library support (this can change behavior if you use `vector` function!)\n- Added Lua `String::display` method\n- Improved pretty-printing for Lua tables (#478)\n- Added `Scope::create_any_userdata` to create Lua objects from any non-`'static` Rust types\n- Added `AnyUserData::destroy` method\n- New `userdata-wrappers` feature to `impl UserData` for `Rc<T>`/`Arc<T>`/`Rc<RefCell<T>>`/`Arc<Mutex<T>>` (similar to v0.9)\n- `UserDataRef` in `send` mode now uses shared lock if `T: Sync` (and exclusive lock otherwise)\n- Added `Scope::add_destructor` to attach custom destructors\n- Added `Lua::try_app_data_ref` and `Lua::try_app_data_mut` methods\n- Added `From<Vec>` and `Into<Vec>` support to `MultiValue` and `Variadic` types\n- Bug fixes and improvements (#477 #479)\n\n## v0.10.0 (Oct 25th, 2024)\n\nChanges since v0.10.0-rc.1\n\n- Added `error-send` feature flag (disabled by default) to require `Send + Sync` for `Error`\n- Some performance improvements\n\n## v0.10.0-rc.1\n\n- `Lua::scope` is back\n- Support yielding from hooks for Lua 5.3+\n- Support setting metatable for Lua builtin types (number/string/function/etc)\n- Added `LuaNativeFn`/`LuaNativeFnMut`/`LuaNativeAsyncFn` traits for using in `Function::wrap`\n- Added `Error::chain` method to return iterator over nested errors\n- Added `Lua::exec_raw` helper to execute low-level Lua C API code\n- Added `Either<L, R>` enum to combine two types into a single one\n- Added a new `Buffer` type for Luau\n- Added `Value::is_error` and `Value::as_error` helpers\n- Added `Value::Other` variant to represent unknown Lua types (eg LuaJIT CDATA)\n- Added (optional) `anyhow` feature to implement `IntoLua` for `anyhow::Error`\n- Added `IntoLua`/`FromLua` for `OsString`/`OsStr` and `PathBuf`/`Path`\n\n## v0.10.0-beta.2\n\n- Updated `ThreadStatus` enum to include `Running` and `Finished` variants.\n- `Error::CoroutineInactive` renamed to `Error::CoroutineUnresumable`.\n- `IntoLua`/`IntoLuaMulti` now uses `impl trait` syntax for args (shorten from `a.get::<_, T>` to `a.get::<T>`).\n- Removed undocumented `Lua::into_static`/`from_static` methods.\n- Futures now require `Send` bound if `send` feature is enabled.\n- Dropped lifetime from `UserDataMethods` and `UserDataFields` traits.\n- `Compiler::compile()` now returns `Result` (Luau).\n- Removed `Clone` requirement from `UserDataFields::add_field()`.\n- `TableExt` and `AnyUserDataExt` traits were combined into `ObjectLike` trait.\n- Disabled `send` feature in module mode (since we don't have exclusive access to Lua).\n- `Chunk::set_environment()` takes `Table` instead of `IntoLua` type.\n- Reduced the compile time contribution of `next_key_seed` and `next_value_seed`.\n- Reduced the compile time contribution of `serde_userdata`.\n- Performance improvements.\n\n## v0.10.0-beta.1\n\n- Dropped `'lua` lifetime (subtypes now store a weak reference to Lua)\n- Removed (experimental) owned types (they no longer needed)\n- Make Lua types truly `Send` and `Sync` (when enabling `send` feature flag)\n- Removed `UserData` impl for Rc/Arc types (\"any\" userdata functions can be used instead)\n- `Lua::replace_registry_value` takes `&mut RegistryKey`\n- `Lua::scope` temporary disabled (will be re-added in the next release)\n\n## v0.9.9\n\n- Minimal Luau updated to 0.629\n- Fixed bug when attempting to reset or resume already running coroutines (#416).\n- Added `RegistryKey::id()` method to get the underlying Lua registry key id.\n\n## v0.9.8\n\n- Fixed serializing same table multiple times (#408)\n- Use `mlua-sys` v0.6 (to support Luau 0.624+)\n- Fixed cross compilation of windows dlls from unix (#394)\n\n## v0.9.7\n\n- Implemented `IntoLua` for `RegistryKey`\n- Mark `__idiv` metamethod as available for luau\n- Added `Function::deep_clone()` method (Luau)\n- Added `SerializeOptions::detect_serde_json_arbitrary_precision` option\n- Added `Lua::create_buffer()` method (Luau)\n- Support serializing buffer type as a byte slice (Luau)\n- Perf: Implemented `push_into_stack`/`from_stack` for `Option<T>`\n- Added `Lua::create_ser_any_userdata()` method\n\n## v0.9.6\n\n- Added `to_pointer` function to `Function`/`Table`/`Thread`\n- Implemented `IntoLua` for `&Value`\n- Implemented `FromLua` for `RegistryKey`\n- Faster (~5%) table array traversal during serialization\n- Some performance improvements for bool/int types\n\n## v0.9.5\n\n- Minimal Luau updated to 0.609\n- Luau max stack size increased to 1M (from 100K)\n- Implemented `IntoLua` for refs to `String`/`Table`/`Function`/`AnyUserData`/`Thread` + `RegistryKey`\n- Implemented `IntoLua` and `FromLua` for `OwnedThread`/`OwnedString`\n- Fixed `FromLua` derive proc macro to cover more cases\n\n## v0.9.4\n\n- Fixed loading all-in-one modules under mixed states (eg. main state and coroutines)\n\n## v0.9.3\n\n- WebAssembly support (`wasm32-unknown-emscripten` target)\n- Performance improvements (faster Lua function calls for lua51/jit/luau)\n\n## v0.9.2\n\n- Added binary modules support to Luau\n- Added Luau package module (uses `StdLib::PACKAGE`) with loaders (follows lua5.1 interface)\n- Added support of Luau 0.601+ buffer type (represented as userdata in Rust)\n- LuaJIT `cdata` type is also represented as userdata in Rust (instead of panic)\n- Vendored LuaJIT switched to rolling vanilla (from openresty)\n- Added `Table::for_each` method for fast table pairs traversal (faster than `pairs`)\n- Performance improvements around table traversal (and faster serialization)\n- Bug fixes and improvements\n\n## v0.9.1\n\n- impl Default for Lua\n- impl IntoLuaMulti for `std::result::Result<(), E>`\n- Fix using wrong userdata index after processing Variadic args (#311)\n\n## v0.9.0\n\nChanges since v0.9.0-rc.3\n\n- Improved non-static (scoped) userdata support\n- Added `Scope::create_any_userdata()` method\n- Added `Lua::set_vector_metatable()` method (`unstable` feature flag)\n- Added `OwnedThread` type (`unstable` feature flag)\n- Minimal Luau updated to 0.590\n- Added new option `sort_keys` to `DeserializeOptions` (`Lua::from_value()` method)\n- Changed `Table::raw_len()` output type to `usize`\n- Helper functions for `Value` (eg: `Value::as_number()`/`Value::as_string`/etc)\n- Performance improvements\n\n## v0.9.0-rc.3\n\n- Minimal Luau updated to 0.588\n\n## v0.9.0-rc.2\n\n- Added `#[derive(FromLua)]` macro to opt-in into `FromLua<T> where T: 'static + Clone` (userdata type).\n- Support vendored module mode for windows (raw-dylib linking, Rust 1.71+)\n- `module` and `vendored` features are now mutually exclusive\n- Use `C-unwind` ABI (Rust 1.71+)\n- Changed `AsChunk` trait to support capturing wrapped Lua types\n\n## v0.9.0-rc.1\n\n- `UserDataMethods::add_async_method()` takes `&T` instead of cloning `T`\n- Implemented `PartialEq<[T]>` for tables\n- Added Luau 4-dimensional vectors support (`luau-vector4` feature)\n- `Table::sequence_values()` iterator no longer uses any metamethods (`Table::raw_sequence_values()` is deprecated)\n- Added `Table:is_empty()` function that checks both hash and array parts\n- Refactored Debug interface\n- Re-exported `ffi` (`mlua-sys`) crate for easier writing of unsafe code\n- Refactored Lua 5.4 warnings interface\n- Take `&str` as function name in `TableExt` and `AnyUserDataExt` traits\n- Added module attribule `skip_memory_check` to improve performance\n- Added `AnyUserData::wrap()` to provide more easy way of creating _any_ userdata in Lua\n\n## v0.9.0-beta.3\n\n- Added `OwnedAnyUserData::take()`\n- Switch to `DeserializeOwned`\n- Overwrite error context when called multiple times\n- New feature flag `luau-jit` to enable (experimental) Luau codegen backend\n- Set `__name` field in userdata metatable\n- Added `Value::to_string()` method similar to `luaL_tolstring`\n- Lua 5.4.6\n- Application data container now allows to mutably and immutably borrow different types at the same time\n- Performance optimizations\n- Support getting and setting environment for Lua functions.\n- Added `UserDataFields::add_field()` method to add static fields to UserData\n\nBreaking changes:\n- Require environment to be a `Table` instead of `Value` in Chunks.\n- `AsChunk::env()` renamed to `AsChunk::environment()`\n\n## v0.9.0-beta.2\n\nNew features:\n- Added `Thread::set_hook()` function to set hook on threads\n- Added pretty print to the Debug formatting to Lua `Value` and `Table`\n- ffi layer moved to `mlua-sys` crate\n- Added OwnedString (unstable)\n\nBreaking changes:\n- Refactor `HookTriggers` (make it const)\n\n## v0.9.0-beta.1\n\nNew features:\n- Owned Lua types (unstable feature flag)\n- New functions `Function::wrap`/`Function::wrap_mut`/`Function::wrap_async`\n- `Lua::register_userdata_type()` to register a custom userdata types (without requiring `UserData` trait)\n- `Lua::create_any_userdata()`\n- Added `create_userdata_ref`/`create_userdata_ref_mut` for scopes\n- Added `AnyUserDataExt` trait with auxiliary functions for `AnyUserData`\n- Added `UserDataRef` and `UserDataRefMut` type wrapped that implement `FromLua`\n- Improved error handling:\n  * Improved error reporting when calling Rust functions from Lua.\n  * Added `Error::BadArgument` to help identify bad argument position or name\n  * Added `ErrorContext` extension trait to attach additional context to `Error`\n\nBreaking changes:\n- Refactored `AsChunk` trait\n- `ToLua`/`ToLuaMulti` renamed to `IntoLua`/`IntoLuaMulti`\n- Renamed `to_lua_err` to `into_lua_err`\n- Removed `FromLua` impl for `T: UserData+Clone`\n- Removed `Lua::async_scope`\n- Added `&Lua` arg to Luau interrupt callback\n\nOther:\n- Better Debug for String\n- Allow deserializing values from serializable UserData using `Lua::from_value()` method\n- Added `Table::clear()` method\n- Added `Error::downcast_ref()` method\n- Support setting memory limit for Lua 5.1/JIT/Luau\n- Support setting module name in `#[lua_module(name = \"...\")]` macro\n- Minor fixes and improvements\n\n## v0.8.10\n\n- Update to Luau 0.590 (luau0-src to 0.7.x)\n- Fix loading luau code starting with \\t\n- Pin lua-src and luajit-src versions\n\n## v0.8.9\n\n- Update minimal (vendored) Lua 5.4 to 5.4.6\n- Use `lua_closethread` instead of `lua_resetthread` in vendored mode (Lua 5.4.6)\n- Allow deserializing Lua null into unit (`()`) or unit struct.\n\n## v0.8.8\n\n- Fix potential deadlock when trying to reuse dropped registry keys.\n- Optimize userdata methods call when __index and fields_getters are nil\n\n## v0.8.7\n\n- Minimum Luau updated to 0.555 (`LUAI_MAXCSTACK` limit increased to 100000)\n- `_VERSION` in Luau now includes version number\n- Fixed lifetime of `DebugNames` in `Debug::names()` and `DebugSource` in `Debug::source()`\n- Fixed subtraction overflow when calculating index for `MultiValue::get()`\n\n## v0.8.6\n\n- Fixed bug when recycled Registry slot can be set to Nil\n\n## v0.8.5\n\n- Fixed potential unsoundness when using `Layout::from_size_align_unchecked` and Rust 1.65+\n- Performance optimizations around string and table creation in standalone mode\n- Added fast track path to Table `get`/`set`/`len` methods without metatable\n- Added new methods `push`/`pop`/`raw_push`/`raw_pop` to Table\n- Fix getting caller information from `Lua::load`\n- Better checks and tests when trying to modify a Luau readonly table\n\n## v0.8.4\n\n- Minimal Luau updated to 0.548\n\n## v0.8.3\n\n- Close to-be-closed variables for Lua 5.4 when using call_async functions (#192)\n- Fixed Lua assertion when inspecting another thread stack. (#195)\n- Use more reliable way to create LuaJIT VM (which can fail if use Rust allocator on non-x86 platforms)\n\n## v0.8.2\n\n- Performance optimizations in handling UserData\n- Minimal Luau updated to 0.536\n- Fixed bug in `Function::bind` when passing empty binds and no arguments (#189)\n\n## v0.8.1\n\n- Added `Lua::create_proxy` for accessing to UserData static fields and functions without instance\n- Added `Table::to_pointer()` and `String::to_pointer()` functions\n- Bugfixes and improvements (#176 #179)\n\n## v0.8.0\nChanges since 0.7.4\n- Roblox Luau support\n- Removed C glue\n- Added async support to `__index` and `__newindex` metamethods\n- Added `Function::info()` to get information about functions (#149).\n- Added `parking_lot` dependency under feature flag (for `UserData`)\n- `Hash` implementation for Lua String\n- Added `Value::to_pointer()` function\n- Performance improvements\n\nBreaking changes:\n- Refactored `AsChunk` trait (added implementation for `Path` and `PathBuf`).\n\n## v0.8.0-beta.5\n\n- Lua sources no longer needed to build modules\n- Added `__iter` metamethod for Luau\n- Added `Value::to_pointer()` function\n- Added `Function::coverage` for Luau to obtain coverage report\n- Bugfixes and improvements (#153 #161 #168)\n\n## v0.8.0-beta.4\n\n- Removed `&Lua` from `Lua::set_interrupt` as it's not safe (introduced in v0.8.0-beta.3)\n- Enabled `Lua::gc_inc` for Luau\n- Luau `debug` module marked as safe (enabled by default)\n- Implemented `Hash` for Lua String\n- Support mode options in `collectgarbage` for Luau\n- Added ability to set global Luau compiler (used for loading all chunks).\n- Refactored `AsChunk` trait (breaking changes).\n  `AsChunk` now implemented for `Path` and `PathBuf` to load lua files from fs.\n- Added `parking_lot` dependency and feature flag (for `UserData`)\n- Added `Function::info()` to get information about functions (#149).\n- Bugfixes and improvements (#104 #142)\n\n## v0.8.0-beta.3\n\n- Luau vector constructor\n- Luau sandboxing support\n- Luau interrupts (yieldable)\n- More Luau compiler options (mutable globals)\n- Other performance improvements\n\n## v0.8.0-beta.2\n\n- Luau vector datatype support\n- Luau readonly table attribute\n- Other Luau improvements\n\n## v0.8.0-beta.1\n\n- Roblox Luau support\n- Refactored ffi module. C glue is no longer required\n- Added async support to `__index` and `__newindex` metamethods\n\n## v0.7.4\n\n- Improved `Lua::create_registry_value` to reuse previously expired registry keys.\n  No need to call `Lua::expire_registry_values` when creating/dropping registry values.\n- Added `Lua::replace_registry_value` to change value of an existing Registry Key\n- Async calls optimization\n\n## v0.7.3\n\n- Fixed cross-compilation issue (introduced in 84a174c)\n\n## v0.7.2\n\n- Allow `pkg-config` to omit include paths if they equals to standard (#114).\n- Various bugfixes (eg. #121)\n\n## v0.7.1\n\n- Fixed traceback generation for errors (#112)\n- `Lua::into_static/from_static` methods have been removed from the docs and are discouraged for use\n\n## v0.7.0\n\n- New \"application data\" api to store arbitrary objects inside Lua\n- New feature flag `luajit52` to build/support LuaJIT with partial compatibility with Lua 5.2\n- Added async meta methods for all Lua (except 5.1)\n- Added `AnyUserData::take()` to take UserData objects from Lua\n- Added `set_nth_user_value`/`get_nth_user_value` to `AnyUserData` for all Lua versions\n- Added `set_named_user_value`/`get_named_user_value` to `AnyUserData` for all Lua versions\n- Added `Lua::inspect_stack()` to get information about the interpreter runtime stack\n- Added `set_warning_function`/`remove_warning_function`/`warning` functions to `Lua` for 5.4\n- Added `TableExt::call()` to call tables with `__call` metamethod as functions\n- Added `Lua::unload()` to unload modules\n- `ToLua` implementation for arrays changed to const generics\n- Added thread (coroutine) cache for async execution (disabled by default and works for Lua 5.4/JIT)\n- LuaOptions and (De)SerializeOptions marked as const\n- Fixed recursive tables serialization when using `serde::Serialize` for Lua Tables\n- Improved errors reporting. Now source included to `fmt::Display` implementation for `Error::CallbackError`\n- Major performance improvements\n\n## v0.6.6\n\n- Fixed calculating `LUA_REGISTRYINDEX` when cross-compiling for lua51/jit (#82)\n- Updated documentation & examples\n\n## v0.6.5\n\n- Fixed bug when polling async futures (#77)\n- Refactor Waker handling in async code (+10% performance gain when calling async functions)\n- Added `Location::caller()` information to `Lua::load()` if chunk's name is None (Rust 1.46+)\n- Added serialization of i128/u128 types (serde)\n\n## v0.6.4\n\n- Performance optimizations\n- Fixed table traversal used in recursion detection in deserializer\n\n## v0.6.3\n\n- Disabled catching Rust panics in userdata finalizers on drop. It also has positive performance impact.\n- Added `Debug::event()` to the hook's Debug structure\n- Simplified interface of `hook::HookTriggers`\n- Added finalizer to `ExtraData` in module mode. This helps avoiding memory leak on closing state when Lua unloads modules and frees memory.\n- Added `DeserializeOptions` struct to control deserializer behavior (`from_value_with` function).\n\n## v0.6.2\n\n- New functionality: `Lua::load_from_function()` and `Lua::create_c_function()`\n- Many optimizations in callbacks/userdata creation and methods execution\n\n## v0.6.1\n\n- Update `chunk!` documentation (stable Rust limitations)\n- Fixed Lua sequence table conversion to HashSet/BTreeSet\n- `once_cell` dependency lowered to 1.0\n\n## v0.6.0\nChanges since 0.5.4\n- New `UserDataFields` API\n- Full access to `UserData` metatables with support of setting arbitrary fields.\n- Implement `UserData` for `Rc<RefCell<T>>`/`Arc<Mutex<T>>`/`Arc<RwLock<T>>` where `T: UserData`.\n- Added `SerializeOptions` to to change default Lua serializer behaviour (eg. `nil/null/array` serialization)\n- Added `LuaOptions` to customize Lua/Rust behaviour (currently panic handling)\n- Added `ToLua`/`FromLua` implementation for `Box<str>` and `Box<[T]>`.\n- Added `Thread::reset()` for luajit/lua54 to recycle threads (coroutines) with attaching a new function.\n- Added `chunk!` macro support to load chunks of Lua code using the Rust tokenizer and optionally capturing Rust variables.\n- Improved errors reporting (`Error`'s `__tostring` method formats full stacktraces). This is useful in a module mode.\n- Added `String::to_string_lossy`\n- Various bugfixes and improvements\n\nBreaking changes:\n- Errors are always `Send + Sync` to be compatible with the anyhow crate.\n- Removed `Result` from `LuaSerdeExt::null()` and `LuaSerdeExt::array_metatable()` (never fails)\n- Removed `Result` from `Function::dump()` (never fails)\n- Removed `AnyUserData::has_metamethod()` (in favour of full access to metatables)\n\n## v0.6.0-beta.3\n\n- Errors are always `Send + Sync` to be compatible with anyhow crate\n- Implement `UserData` for `Rc<RefCell>`/`Arc<Mutex>`/`Arc<RwLock>`\n- Added `__ipairs` metamethod for Lua 5.2\n- Added `String::to_string_lossy`\n- Various bugfixes and improvements\n\n## v0.6.0-beta.2\n\n- [**Breaking**] Removed `AnyUserData::has_metamethod()`\n- Added `Thread::reset()` for luajit/lua54 to recycle threads.\n  It's possible to attach a new function to a thread (coroutine).\n- Added `chunk!` macro support to load chunks of Lua code using the Rust tokenizer and optinally capturing Rust variables.\n- Improved error reporting (`Error`'s `__tostring` method formats full stacktraces). This is useful in the module mode.\n\n## v0.6.0-beta.1\n\n- New `UserDataFields` API\n- Allow to define arbitrary MetaMethods\n- `MetaMethods::name()` is public\n- Do not trigger longjmp in Rust to prevent unwinding across FFI boundaries. See https://github.com/rust-lang/rust/issues/83541\n- Added `SerializeOptions` to to change default Lua serializer behaviour (eg. nil/null/array serialization)\n- [**Breaking**] Removed `Result` from `LuaSerdeExt::null()` and `LuaSerdeExt::array_metatable()` (never fails)\n- [**Breaking**] Removed `Result` from `Function::dump()` (never fails)\n- `ToLua`/`FromLua` implementation for `Box<str>` and `Box<[T]>`\n- [**Breaking**] Added `LuaOptions` to customize Lua/Rust behaviour (currently panic handling)\n- Various bugfixes and performance improvements\n\n## v0.5.4\n\n- Build script improvements\n- Improvements in panic handling (resume panic on value popping)\n- Fixed bug serializing 3rd party userdata (causes segfault)\n- Make error::Error non exhaustive\n\n## v0.5.3\n\n- Fixed bug when returning nil-prefixed multi values from async function (+ test)\n- Performance optimisation for async callbacks (polling)\n\n## v0.5.2\n\n- Some performance optimisations (callbacks)\n- `ToLua` implementation for `Cow<str>` and `Cow<CStr>`\n- Fixed bug with `Scope` destruction of partially polled futures\n\n## v0.5.1\n\n- Support cross compilation that should work well for vendored builds (including LuaJIT with some restrictions)\n- Fix numeric types conversion for 32bit Lua\n- Update tokio to 1.0 for async examples\n\n## v0.5.0\n\n- Serde support under `serialize` feature flag.\n- Re-export `mlua_derive`.\n- impl `ToLua` and `FromLua` for `HashSet` and `BTreeSet`\n\n## v0.4.2\n\n- Added `Function::dump()` to dump lua function to a binary chunk\n- Added `ChunkMode` enum to mark chunks as text or binary\n- Updated `set_memory_limit` doc\n\n## v0.4.0\n\n- Lua 5.4 support with `MetaMethod::Close`.\n- `lua53` feature is disabled by default. Now preferred Lua version have to be chosen explicitly.\n- Provide safety guaraness for Lua state, which means that potenially unsafe operations, like loading C modules (using `require` or `package.loadlib`) are disabled. Equalient for the previous `Lua::new()` function is `Lua::unsafe_new()`.\n- New `send` feature to require `Send`.\n- New `module` feature, that disables linking to Lua Core Libraries. Required for modules.\n- Don't allow `'callback` outlive `'lua` in `Lua::create_function()` to fix [the unsoundness](tests/compile/static_callback_args.rs).\n- Added `Lua::into_static()` to make `'static` Lua state. This is useful to spawn async Lua threads that requires `'static`.\n- New function `Lua::set_memory_limit()` (similar to `rlua`) to enable memory restrictions in Lua VM (requires Lua >= 5.2).\n- `Scope`, temporary removed in v0.3, is back with async support.\n- Removed deprecated `Table::call()` function.\n- Added hooks support (backported from rlua 0.17).\n- New `AnyUserData::has_metamethod()` function.\n- LuaJIT 2.0.5 (the latest stable) support.\n- Various bug fixes and improvements.\n"
        },
        {
          "name": "Cargo.toml",
          "type": "blob",
          "size": 3.4970703125,
          "content": "[package]\nname = \"mlua\"\nversion = \"0.10.2\" # remember to update mlua_derive\nauthors = [\"Aleksandr Orlenko <zxteam@pm.me>\", \"kyren <catherine@kyju.org>\"]\nrust-version = \"1.79.0\"\nedition = \"2021\"\nrepository = \"https://github.com/khvzak/mlua\"\ndocumentation = \"https://docs.rs/mlua\"\nreadme = \"README.md\"\nkeywords = [\"lua\", \"luajit\", \"luau\", \"async\", \"scripting\"]\ncategories = [\"api-bindings\", \"asynchronous\"]\nlicense = \"MIT\"\ndescription = \"\"\"\nHigh level bindings to Lua 5.4/5.3/5.2/5.1 (including LuaJIT) and Roblox Luau\nwith async/await features and support of writing native Lua modules in Rust.\n\"\"\"\n\n[package.metadata.docs.rs]\nfeatures = [\"lua54\", \"vendored\", \"async\", \"send\", \"serialize\", \"macros\"]\nrustdoc-args = [\"--cfg\", \"docsrs\"]\n\n[workspace]\nmembers = [\n    \"mlua_derive\",\n    \"mlua-sys\",\n]\n\n[features]\nlua54 = [\"ffi/lua54\"]\nlua53 = [\"ffi/lua53\"]\nlua52 = [\"ffi/lua52\"]\nlua51 = [\"ffi/lua51\"]\nluajit = [\"ffi/luajit\"]\nluajit52 = [\"luajit\", \"ffi/luajit52\"]\nluau = [\"ffi/luau\", \"dep:libloading\"]\nluau-jit = [\"luau\", \"ffi/luau-codegen\"]\nluau-vector4 = [\"luau\", \"ffi/luau-vector4\"]\nvendored = [\"ffi/vendored\"]\nmodule = [\"dep:mlua_derive\", \"ffi/module\"]\nasync = [\"dep:futures-util\"]\nsend = [\"parking_lot/send_guard\", \"error-send\"]\nerror-send = []\nserialize = [\"dep:serde\", \"dep:erased-serde\", \"dep:serde-value\"]\nmacros = [\"mlua_derive/macros\"]\nanyhow = [\"dep:anyhow\", \"error-send\"]\nuserdata-wrappers = []\n\n[dependencies]\nmlua_derive = { version = \"=0.10.1\", optional = true, path = \"mlua_derive\" }\nbstr = { version = \"1.0\", features = [\"std\"], default-features = false }\neither = \"1.0\"\nnum-traits = { version = \"0.2.14\" }\nrustc-hash = \"2.0\"\nfutures-util = { version = \"0.3\", optional = true, default-features = false, features = [\"std\"] }\nserde = { version = \"1.0\", optional = true }\nerased-serde = { version = \"0.4\", optional = true }\nserde-value = { version = \"0.7\", optional = true }\nparking_lot = { version = \"0.12\", features = [\"arc_lock\"] }\nanyhow = { version = \"1.0\", optional = true }\n\nffi = { package = \"mlua-sys\", version = \"0.6.6\", path = \"mlua-sys\" }\n\n[target.'cfg(unix)'.dependencies]\nlibloading = { version = \"0.8\", optional = true }\n\n[dev-dependencies]\ntrybuild = \"1.0\"\nhyper = { version = \"1.2\", features = [\"full\"] }\nhyper-util = { version = \"0.1.3\", features = [\"full\"] }\nhttp-body-util = \"0.1.1\"\nreqwest = { version = \"0.12\", features = [\"json\"] }\ntokio = { version = \"1.0\", features = [\"macros\", \"rt\", \"time\"] }\nserde = { version = \"1.0\", features = [\"derive\"] }\nserde_json = { version = \"1.0\", features = [\"arbitrary_precision\"] }\nmaplit = \"1.0\"\ntempfile = \"3\"\nstatic_assertions = \"1.0\"\n\n[target.'cfg(not(target_arch = \"wasm32\"))'.dev-dependencies]\ncriterion = { version = \"0.5\", features = [\"async_tokio\"] }\nrustyline = \"14.0\"\ntokio = { version = \"1.0\", features = [\"full\"] }\n\n[lints.rust]\nunexpected_cfgs = { level = \"allow\", check-cfg = ['cfg(tarpaulin_include)'] }\n\n[[bench]]\nname = \"benchmark\"\nharness = false\nrequired-features = [\"async\"]\n\n[[bench]]\nname = \"serde\"\nharness = false\nrequired-features = [\"serialize\"]\n\n[[example]]\nname = \"async_http_client\"\nrequired-features = [\"async\", \"macros\"]\n\n[[example]]\nname = \"async_http_reqwest\"\nrequired-features = [\"async\", \"serialize\", \"macros\"]\n\n[[example]]\nname = \"async_http_server\"\nrequired-features = [\"async\", \"macros\", \"send\"]\n\n[[example]]\nname = \"async_tcp_server\"\nrequired-features = [\"async\", \"macros\", \"send\"]\n\n[[example]]\nname = \"guided_tour\"\nrequired-features = [\"macros\"]\n\n[[example]]\nname = \"serialize\"\nrequired-features = [\"serialize\"]\n\n[[example]]\nname = \"userdata\"\nrequired-features = [\"macros\"]\n"
        },
        {
          "name": "FAQ.md",
          "type": "blob",
          "size": 0.76953125,
          "content": "# mlua FAQ\n\nThis file is for general questions that don't fit into the README or crate docs.\n\n## Loading a C module fails with error `undefined symbol: lua_xxx`. How to fix?\n\nAdd the following rustflags to your [.cargo/config](http://doc.crates.io/config.html) in order to properly export Lua symbols:\n\n```toml\n[target.x86_64-unknown-linux-gnu]\nrustflags = [\"-C\", \"link-args=-rdynamic\"]\n\n[target.x86_64-apple-darwin]\nrustflags = [\"-C\", \"link-args=-rdynamic\"]\n```\n\n## I want to add support for a Lua VM fork to mlua. Do you accept pull requests?\n\nAdding new feature flag to support a Lua VM fork is a major step that requires huge effort to maintain it.\nRegular updates, testing, checking compatibility, etc.\nThat's why I don't plan to support new Lua VM forks or other languages in mlua.\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.154296875,
          "content": "Both mlua and rlua are distributed under the MIT license, which is reproduced\nbelow:\n\nMIT License\n\nCopyright (c) 2019-2021 A. Orlenko\nCopyright (c) 2017 rlua\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 12.2314453125,
          "content": "# mlua\n[![Build Status]][github-actions] [![Latest Version]][crates.io] [![API Documentation]][docs.rs] [![Coverage Status]][codecov.io] ![MSRV]\n\n[Build Status]: https://github.com/khvzak/mlua/workflows/CI/badge.svg\n[github-actions]: https://github.com/khvzak/mlua/actions\n[Latest Version]: https://img.shields.io/crates/v/mlua.svg\n[crates.io]: https://crates.io/crates/mlua\n[API Documentation]: https://docs.rs/mlua/badge.svg\n[docs.rs]: https://docs.rs/mlua\n[Coverage Status]: https://codecov.io/gh/mlua-rs/mlua/branch/main/graph/badge.svg?token=99339FS1CG\n[codecov.io]: https://codecov.io/gh/mlua-rs/mlua\n[MSRV]: https://img.shields.io/badge/rust-1.79+-brightgreen.svg?&logo=rust\n\n[Guided Tour] | [Benchmarks] | [FAQ]\n\n[Guided Tour]: examples/guided_tour.rs\n[Benchmarks]: https://github.com/khvzak/script-bench-rs\n[FAQ]: FAQ.md\n\n> **Note**\n>\n> See v0.10 [release notes](https://github.com/khvzak/mlua/blob/main/docs/release_notes/v0.10.md).\n\n`mlua` is bindings to [Lua](https://www.lua.org) programming language for Rust with a goal to provide\n_safe_ (as far as it's possible), high level, easy to use, practical and flexible API.\n\nStarted as `rlua` fork, `mlua` supports Lua 5.4, 5.3, 5.2, 5.1 (including LuaJIT) and [Roblox Luau] and allows to write native Lua modules in Rust as well as use Lua in a standalone mode.\n\n`mlua` tested on Windows/macOS/Linux including module mode in [GitHub Actions] on `x86_64` platform and cross-compilation to `aarch64` (other targets are also supported).\n\nWebAssembly (WASM) is supported through `wasm32-unknown-emscripten` target for all Lua versions excluding JIT.\n\n[GitHub Actions]: https://github.com/khvzak/mlua/actions\n[Roblox Luau]: https://luau.org\n\n## Usage\n\n### Feature flags\n\n`mlua` uses feature flags to reduce the amount of dependencies, compiled code and allow to choose only required set of features.\nBelow is a list of the available feature flags. By default `mlua` does not enable any features.\n\n* `lua54`: enable Lua [5.4] support\n* `lua53`: enable Lua [5.3] support\n* `lua52`: enable Lua [5.2] support\n* `lua51`: enable Lua [5.1] support\n* `luajit`: enable [LuaJIT] support\n* `luajit52`: enable [LuaJIT] support with partial compatibility with Lua 5.2\n* `luau`: enable [Luau] support (auto vendored mode)\n* `luau-jit`: enable [Luau] support with JIT backend.\n* `luau-vector4`: enable [Luau] support with 4-dimensional vector.\n* `vendored`: build static Lua(JIT) library from sources during `mlua` compilation using [lua-src] or [luajit-src] crates\n* `module`: enable module mode (building loadable `cdylib` library for Lua)\n* `async`: enable async/await support (any executor can be used, eg. [tokio] or [async-std])\n* `send`: make `mlua::Lua: Send + Sync` (adds [`Send`] requirement to `mlua::Function` and `mlua::UserData`)\n* `error-send`: make `mlua:Error: Send + Sync`\n* `serialize`: add serialization and deserialization support to `mlua` types using [serde] framework\n* `macros`: enable procedural macros (such as `chunk!`)\n* `anyhow`: enable `anyhow::Error` conversion into Lua\n* `userdata-wrappers`: opt into `impl UserData` for `Rc<T>`/`Arc<T>`/`Rc<RefCell<T>>`/`Arc<Mutex<T>>` where `T: UserData`\n\n[5.4]: https://www.lua.org/manual/5.4/manual.html\n[5.3]: https://www.lua.org/manual/5.3/manual.html\n[5.2]: https://www.lua.org/manual/5.2/manual.html\n[5.1]: https://www.lua.org/manual/5.1/manual.html\n[LuaJIT]: https://luajit.org/\n[Luau]: https://github.com/Roblox/luau\n[lua-src]: https://github.com/khvzak/lua-src-rs\n[luajit-src]: https://github.com/khvzak/luajit-src-rs\n[tokio]: https://github.com/tokio-rs/tokio\n[async-std]: https://github.com/async-rs/async-std\n[`Send`]: https://doc.rust-lang.org/std/marker/trait.Send.html\n[serde]: https://github.com/serde-rs/serde\n\n### Async/await support\n\n`mlua` supports async/await for all Lua versions including Luau.\n\nThis works using Lua [coroutines](https://www.lua.org/manual/5.3/manual.html#2.6) and require running [Thread](https://docs.rs/mlua/latest/mlua/struct.Thread.html) along with enabling `feature = \"async\"` in `Cargo.toml`.\n\n**Examples**:\n- [HTTP Client](examples/async_http_client.rs)\n- [HTTP Client (json)](examples/async_http_reqwest.rs)\n- [HTTP Server](examples/async_http_server.rs)\n- [TCP Server](examples/async_tcp_server.rs)\n\n\n**shell command examples**:\n```shell\n# async http client (hyper)\ncargo run --example async_http_client --features=lua54,async,macros\n\n# async http client (reqwest)\ncargo run --example async_http_reqwest --features=lua54,async,macros,serialize\n\n# async http server\ncargo run --example async_http_server --features=lua54,async,macros,send\ncurl -v http://localhost:3000\n```\n\n### Serialization (serde) support\n\nWith `serialize` feature flag enabled, `mlua` allows you to serialize/deserialize any type that implements [`serde::Serialize`] and [`serde::Deserialize`] into/from [`mlua::Value`]. In addition `mlua` provides [`serde::Serialize`] trait implementation for it (including `UserData` support).\n\n[Example](examples/serialize.rs)\n\n[`serde::Serialize`]: https://docs.serde.rs/serde/ser/trait.Serialize.html\n[`serde::Deserialize`]: https://docs.serde.rs/serde/de/trait.Deserialize.html\n[`mlua::Value`]: https://docs.rs/mlua/latest/mlua/enum.Value.html\n\n### Compiling\n\nYou have to enable one of the features: `lua54`, `lua53`, `lua52`, `lua51`, `luajit(52)` or `luau`, according to the chosen Lua version.\n\nBy default `mlua` uses `pkg-config` tool to find lua includes and libraries for the chosen Lua version.\nIn most cases it works as desired, although sometimes could be more preferable to use a custom lua library.\nTo achieve this, mlua supports `LUA_LIB`, `LUA_LIB_NAME` and `LUA_LINK` environment variables.\n`LUA_LINK` is optional and may be `dylib` (a dynamic library) or `static` (a static library, `.a` archive).\n\nAn example how to use them:\n``` sh\nmy_project $ LUA_LIB=$HOME/tmp/lua-5.2.4/src LUA_LIB_NAME=lua LUA_LINK=static cargo build\n```\n\n`mlua` also supports vendored lua/luajit using the auxiliary crates [lua-src](https://crates.io/crates/lua-src) and\n[luajit-src](https://crates.io/crates/luajit-src).\nJust enable the `vendored` feature and cargo will automatically build and link specified lua/luajit version. This is the easiest way to get started with `mlua`.\n\n### Standalone mode\nIn a standalone mode `mlua` allows to add to your application scripting support with a gently configured Lua runtime to ensure  safety and soundness.\n\nAdd to `Cargo.toml` :\n\n``` toml\n[dependencies]\nmlua = { version = \"0.10.2\", features = [\"lua54\", \"vendored\"] }\n```\n\n`main.rs`\n\n``` rust\nuse mlua::prelude::*;\n\nfn main() -> LuaResult<()> {\n    let lua = Lua::new();\n\n    let map_table = lua.create_table()?;\n    map_table.set(1, \"one\")?;\n    map_table.set(\"two\", 2)?;\n\n    lua.globals().set(\"map_table\", map_table)?;\n\n    lua.load(\"for k,v in pairs(map_table) do print(k,v) end\").exec()?;\n\n    Ok(())\n}\n```\n\n### Module mode\nIn a module mode `mlua` allows to create a compiled Lua module that can be loaded from Lua code using [`require`](https://www.lua.org/manual/5.4/manual.html#pdf-require). In this case `mlua` uses an external Lua runtime which could lead to potential unsafety due to unpredictability of the Lua environment and usage of libraries such as [`debug`](https://www.lua.org/manual/5.4/manual.html#6.10).\n\n[Example](examples/module)\n\nAdd to `Cargo.toml` :\n\n``` toml\n[lib]\ncrate-type = [\"cdylib\"]\n\n[dependencies]\nmlua = { version = \"0.10.2\", features = [\"lua54\", \"module\"] }\n```\n\n`lib.rs` :\n\n``` rust\nuse mlua::prelude::*;\n\nfn hello(_: &Lua, name: String) -> LuaResult<()> {\n    println!(\"hello, {}!\", name);\n    Ok(())\n}\n\n#[mlua::lua_module]\nfn my_module(lua: &Lua) -> LuaResult<LuaTable> {\n    let exports = lua.create_table()?;\n    exports.set(\"hello\", lua.create_function(hello)?)?;\n    Ok(exports)\n}\n```\n\nAnd then (**macOS** example):\n\n``` sh\n$ cargo rustc -- -C link-arg=-undefined -C link-arg=dynamic_lookup\n$ ln -s ./target/debug/libmy_module.dylib ./my_module.so\n$ lua5.4 -e 'require(\"my_module\").hello(\"world\")'\nhello, world!\n```\n\nOn macOS, you need to set additional linker arguments. One option is to compile with `cargo rustc --release -- -C link-arg=-undefined -C link-arg=dynamic_lookup`, the other is to create a `.cargo/config.toml` with the following content:\n``` toml\n[target.x86_64-apple-darwin]\nrustflags = [\n  \"-C\", \"link-arg=-undefined\",\n  \"-C\", \"link-arg=dynamic_lookup\",\n]\n\n[target.aarch64-apple-darwin]\nrustflags = [\n  \"-C\", \"link-arg=-undefined\",\n  \"-C\", \"link-arg=dynamic_lookup\",\n]\n```\nOn Linux you can build modules normally with `cargo build --release`.\n\nOn Windows the target module will be linked with `lua5x.dll` library (depending on your feature flags).\nYour main application should provide this library.\n\nModule builds don't require Lua lib or headers to be installed on the system.\n\n### Publishing to luarocks.org\n\nThere is a LuaRocks build backend for mlua modules [`luarocks-build-rust-mlua`].\n\nModules written in Rust and published to luarocks:\n- [`decasify`](https://github.com/alerque/decasify)\n- [`lua-ryaml`](https://github.com/khvzak/lua-ryaml)\n- [`tiktoken_core`](https://github.com/gptlang/lua-tiktoken)\n- [`toml-edit`](https://github.com/vhyrro/toml-edit.lua)\n- [`typst-lua`](https://github.com/rousbound/typst-lua)\n\n[`luarocks-build-rust-mlua`]: https://luarocks.org/modules/khvzak/luarocks-build-rust-mlua\n\n## Safety\n\nOne of the `mlua` goals is to provide *safe* API between Rust and Lua.\nEvery place where the Lua C API may trigger an error longjmp in any way is protected by `lua_pcall`,\nand the user of the library is protected from directly interacting with unsafe things like the Lua stack,\nand there is overhead associated with this safety.\n\nUnfortunately, `mlua` does not provide absolute safety even without using `unsafe` .\nThis library contains a huge amount of unsafe code. There are almost certainly bugs still lurking in this library!\nIt is surprisingly, fiendishly difficult to use the Lua C API without the potential for unsafety.\n\n## Panic handling\n\n`mlua` wraps panics that are generated inside Rust callbacks in a regular Lua error. Panics could be\nresumed then by returning or propagating the Lua error to Rust code.\n\nFor example:\n``` rust\nlet lua = Lua::new();\nlet f = lua.create_function(|_, ()| -> LuaResult<()> {\n    panic!(\"test panic\");\n})?;\nlua.globals().set(\"rust_func\", f)?;\n\nlet _ = lua.load(r#\"\n    local status, err = pcall(rust_func)\n    print(err) -- prints: test panic\n    error(err) -- propagate panic\n\"#).exec();\n\nunreachable!()\n```\n\nOptionally `mlua` can disable Rust panics catching in Lua via `pcall`/`xpcall` and automatically resume\nthem across the Lua API boundary. This is controlled via `LuaOptions` and done by wrapping the Lua `pcall`/`xpcall`\nfunctions on a way to prevent catching errors that are wrapped Rust panics.\n\n`mlua` should also be panic safe in another way as well, which is that any `Lua` instances or handles\nremains usable after a user generated panic, and such panics should not break internal invariants or\nleak Lua stack space. This is mostly important to safely use `mlua` types in Drop impls, as you should not be\nusing panics for general error handling.\n\nBelow is a list of `mlua` behaviors that should be considered a bug.\nIf you encounter them, a bug report would be very welcome:\n\n  + If you can cause UB with `mlua` without typing the word \"unsafe\", this is a bug.\n\n  + If your program panics with a message that contains the string \"mlua internal error\", this is a bug.\n\n  + Lua C API errors are handled by longjmp. All instances where the Lua C API would otherwise longjmp over calling stack frames should be guarded against, except in internal callbacks where this is intentional. If you detect that `mlua` is triggering a longjmp over your Rust stack frames, this is a bug!\n\n  + If you detect that, after catching a panic or during a Drop triggered from a panic, a `Lua` or handle method is triggering other bugs or there is a Lua stack space leak, this is a bug. `mlua` instances are supposed to remain fully usable in the face of user generated panics. This guarantee does not extend to panics marked with \"mlua internal error\" simply because that is already indicative of a separate bug.\n\n## Sandboxing\n\nPlease check the [Luau Sandboxing] page if you are interested in running untrusted Lua scripts in controlled environment.\n\n`mlua` provides `Lua::sandbox` method for enabling sandbox mode (Luau only).\n\n[Luau Sandboxing]: https://luau.org/sandbox\n\n## License\n\nThis project is licensed under the [MIT license](LICENSE)\n"
        },
        {
          "name": "benches",
          "type": "tree",
          "content": null
        },
        {
          "name": "codecov.yml",
          "type": "blob",
          "size": 0.12109375,
          "content": "coverage:\n  status:\n    patch:\n      default:\n        only_pulls: true\n    project:\n      default:\n        only_pulls: true\n"
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "mlua-sys",
          "type": "tree",
          "content": null
        },
        {
          "name": "mlua_derive",
          "type": "tree",
          "content": null
        },
        {
          "name": "rustfmt.toml",
          "type": "blob",
          "size": 0.0859375,
          "content": "imports_granularity = \"Module\"\nmax_width = 110\ncomment_width = 100\nwrap_comments = true\n"
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "tarpaulin.toml",
          "type": "blob",
          "size": 0.666015625,
          "content": "[lua54]\nfeatures = \"lua54,vendored,async,send,serialize,macros,anyhow,userdata-wrappers\"\n\n[lua54_non_send]\nfeatures = \"lua54,vendored,async,serialize,macros,anyhow,userdata-wrappers\"\n\n[lua54_with_memory_limit]\nfeatures = \"lua54,vendored,async,send,serialize,macros,anyhow,userdata-wrappers\"\nrustflags = \"--cfg force_memory_limit\"\n\n[lua51]\nfeatures = \"lua51,vendored,async,send,serialize,macros\"\n\n[lua51_with_memory_limit]\nfeatures = \"lua51,vendored,async,send,serialize,macros\"\nrustflags = \"--cfg force_memory_limit\"\n\n[luau]\nfeatures = \"luau,async,send,serialize,macros\"\n\n[luau_with_memory_limit]\nfeatures = \"luau,async,send,serialize,macros\"\nrustflags = \"--cfg force_memory_limit\"\n"
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}