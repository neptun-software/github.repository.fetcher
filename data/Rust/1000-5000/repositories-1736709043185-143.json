{
  "metadata": {
    "timestamp": 1736709043185,
    "page": 143,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjE1MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "rust-lang/rls",
      "stars": 3511,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.0986328125,
          "content": "rls-analysis/test_data/rls-analysis/*.json binary\nrls-analysis/test_data/rust-analysis/*.json binary\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.021484375,
          "content": ".vscode\n.idea\n\ntarget\n"
        },
        {
          "name": "COPYRIGHT",
          "type": "blob",
          "size": 1.3916015625,
          "content": "Short version for non-lawyers:\n\nThe Rust Project is dual-licensed under Apache 2.0 and MIT\nterms.\n\n\nLonger version:\n\nThe Rust Project is copyright 2010, The Rust Project\nDevelopers.\n\nLicensed under the Apache License, Version 2.0\n<LICENSE-APACHE or\nhttp://www.apache.org/licenses/LICENSE-2.0> or the MIT\nlicense <LICENSE-MIT or http://opensource.org/licenses/MIT>,\nat your option. All files in the project carrying such\nnotice may not be copied, modified, or distributed except\naccording to those terms.\n\n* Additional copyright may be retained by contributors other\n  than Mozilla, the Rust Project Developers, or the parties\n  enumerated in this file. Such copyright can be determined\n  on a case-by-case basis by examining the author of each\n  portion of a file in the revision-control commit records\n  of the project, or by consulting representative comments\n  claiming copyright ownership for a file.\n\n  For example, the text:\n\n      \"Copyright (c) 2011 Google Inc.\"\n\n  appears in some files, and these files thereby denote\n  that their author and copyright-holder is Google Inc.\n\n  In all such cases, the absence of explicit licensing text\n  indicates that the contributor chose to license their work\n  for distribution under identical terms to those Mozilla\n  has chosen for the collective work, enumerated at the top\n  of this file. The only difference is the retention of\n  copyright itself, held by the contributor.\n"
        },
        {
          "name": "Cargo.lock",
          "type": "blob",
          "size": 58.7158203125,
          "content": "# This file is automatically @generated by Cargo.\n# It is not intended for manual editing.\nversion = 3\n\n[[package]]\nname = \"adler\"\nversion = \"1.0.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f26201604c87b1e01bd3d98f8d5d9a8fcbb815e8cedb41ffccbeb4bf593a35fe\"\n\n[[package]]\nname = \"aho-corasick\"\nversion = \"0.7.18\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1e37cfd5e7657ada45f742d6e99ca5788580b5c529dc78faf11ece6dc702656f\"\ndependencies = [\n \"memchr\",\n]\n\n[[package]]\nname = \"annotate-snippets\"\nversion = \"0.9.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"c3b9d411ecbaf79885c6df4d75fff75858d5995ff25385657a28af47e82f9c36\"\ndependencies = [\n \"unicode-width\",\n \"yansi-term\",\n]\n\n[[package]]\nname = \"anyhow\"\nversion = \"1.0.48\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"62e1f47f7dc0422027a4e370dd4548d4d66b26782e513e98dca1e689e058a80e\"\n\n[[package]]\nname = \"arrayvec\"\nversion = \"0.5.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"23b62fc65de8e4e7f52534fb52b0f3ed04746ae267519eef2a83941e8085068b\"\n\n[[package]]\nname = \"arrayvec\"\nversion = \"0.7.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8da52d66c7071e2e3fa2a1e5c6d088fec47b593032b254f5e980de8ea54454d6\"\n\n[[package]]\nname = \"atty\"\nversion = \"0.2.14\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d9b39be18770d11421cdb1b9947a45dd3f37e93092cbf377614828a319d5fee8\"\ndependencies = [\n \"hermit-abi\",\n \"libc\",\n \"winapi\",\n]\n\n[[package]]\nname = \"autocfg\"\nversion = \"1.0.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"cdb031dd78e28731d87d56cc8ffef4a8f36ca26c38fe2de700543e627f8a464a\"\n\n[[package]]\nname = \"bitflags\"\nversion = \"1.3.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"bef38d45163c2f1dde094a7dfd33ccf595c92905c8f8f4fdc18d06fb1037718a\"\n\n[[package]]\nname = \"bitmaps\"\nversion = \"2.1.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"031043d04099746d8db04daf1fa424b2bc8bd69d92b25962dcde24da39ab64a2\"\ndependencies = [\n \"typenum\",\n]\n\n[[package]]\nname = \"bstr\"\nversion = \"0.2.17\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ba3569f383e8f1598449f1a423e72e99569137b47740b1da11ef19af3d5c3223\"\ndependencies = [\n \"lazy_static\",\n \"memchr\",\n \"regex-automata\",\n]\n\n[[package]]\nname = \"bytecount\"\nversion = \"0.6.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"72feb31ffc86498dacdbd0fcebb56138e7177a8cc5cea4516031d15ae85a742e\"\n\n[[package]]\nname = \"bytes\"\nversion = \"1.1.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"c4872d67bab6358e59559027aa3b9157c53d9358c51423c17554809a8858e0f8\"\n\n[[package]]\nname = \"bytesize\"\nversion = \"1.1.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"6c58ec36aac5066d5ca17df51b3e70279f5670a72102f5752cb7e7c856adfc70\"\n\n[[package]]\nname = \"camino\"\nversion = \"1.0.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"52d74260d9bf6944e2208aa46841b4b8f0d7ffc0849a06837b2f510337f86b2b\"\ndependencies = [\n \"serde\",\n]\n\n[[package]]\nname = \"cargo\"\nversion = \"0.65.0\"\nsource = \"git+https://github.com/rust-lang/cargo?rev=5514f1e0e1b3650ed8a78306198e90b66b292693#5514f1e0e1b3650ed8a78306198e90b66b292693\"\ndependencies = [\n \"anyhow\",\n \"atty\",\n \"bytesize\",\n \"cargo-platform 0.1.2 (git+https://github.com/rust-lang/cargo?rev=5514f1e0e1b3650ed8a78306198e90b66b292693)\",\n \"cargo-util\",\n \"clap\",\n \"crates-io\",\n \"crossbeam-utils\",\n \"curl\",\n \"curl-sys\",\n \"env_logger 0.9.0\",\n \"filetime\",\n \"flate2\",\n \"fwdansi\",\n \"git2\",\n \"git2-curl\",\n \"glob\",\n \"hex 0.4.3\",\n \"home\",\n \"humantime 2.1.0\",\n \"ignore\",\n \"im-rc\",\n \"indexmap\",\n \"itertools\",\n \"jobserver\",\n \"lazy_static\",\n \"lazycell\",\n \"libc\",\n \"libgit2-sys\",\n \"log\",\n \"memchr\",\n \"num_cpus\",\n \"opener\",\n \"os_info\",\n \"pathdiff\",\n \"percent-encoding 2.1.0\",\n \"rustc-workspace-hack\",\n \"rustfix\",\n \"semver 1.0.4\",\n \"serde\",\n \"serde_ignored\",\n \"serde_json\",\n \"shell-escape\",\n \"strip-ansi-escapes\",\n \"tar\",\n \"tempfile\",\n \"termcolor\",\n \"toml_edit\",\n \"unicode-width\",\n \"unicode-xid\",\n \"url 2.2.2\",\n \"walkdir\",\n \"winapi\",\n]\n\n[[package]]\nname = \"cargo-platform\"\nversion = \"0.1.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"cbdb825da8a5df079a43676dbe042702f1707b1109f713a01420fbb4cc71fa27\"\ndependencies = [\n \"serde\",\n]\n\n[[package]]\nname = \"cargo-platform\"\nversion = \"0.1.2\"\nsource = \"git+https://github.com/rust-lang/cargo?rev=5514f1e0e1b3650ed8a78306198e90b66b292693#5514f1e0e1b3650ed8a78306198e90b66b292693\"\ndependencies = [\n \"serde\",\n]\n\n[[package]]\nname = \"cargo-util\"\nversion = \"0.2.1\"\nsource = \"git+https://github.com/rust-lang/cargo?rev=5514f1e0e1b3650ed8a78306198e90b66b292693#5514f1e0e1b3650ed8a78306198e90b66b292693\"\ndependencies = [\n \"anyhow\",\n \"core-foundation\",\n \"crypto-hash\",\n \"filetime\",\n \"hex 0.4.3\",\n \"jobserver\",\n \"libc\",\n \"log\",\n \"miow\",\n \"same-file\",\n \"shell-escape\",\n \"tempfile\",\n \"walkdir\",\n \"winapi\",\n]\n\n[[package]]\nname = \"cargo_metadata\"\nversion = \"0.14.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ba2ae6de944143141f6155a473a6b02f66c7c3f9f47316f802f80204ebfe6e12\"\ndependencies = [\n \"camino\",\n \"cargo-platform 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n \"semver 1.0.4\",\n \"serde\",\n \"serde_json\",\n]\n\n[[package]]\nname = \"cc\"\nversion = \"1.0.72\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"22a9137b95ea06864e018375b72adfb7db6e6f68cfc8df5a04d00288050485ee\"\ndependencies = [\n \"jobserver\",\n]\n\n[[package]]\nname = \"cfg-if\"\nversion = \"1.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"baf1de4339761588bc0619e3cbc0120ee582ebb74b53b4efbf79117bd2da40fd\"\n\n[[package]]\nname = \"clap\"\nversion = \"3.2.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8e538f9ee5aa3b3963f09a997035f883677966ed50fce0292611927ce6f6d8c6\"\ndependencies = [\n \"atty\",\n \"bitflags\",\n \"clap_derive\",\n \"clap_lex\",\n \"indexmap\",\n \"lazy_static\",\n \"strsim\",\n \"termcolor\",\n \"textwrap\",\n]\n\n[[package]]\nname = \"clap_derive\"\nversion = \"3.2.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a7f98063cac4652f23ccda556b8d04347a7fc4b2cff1f7577cc8c6546e0d8078\"\ndependencies = [\n \"heck\",\n \"proc-macro-error\",\n \"proc-macro2\",\n \"quote\",\n \"syn\",\n]\n\n[[package]]\nname = \"clap_lex\"\nversion = \"0.2.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"2850f2f5a82cbf437dd5af4d49848fbdfc27c157c3d010345776f952765261c5\"\ndependencies = [\n \"os_str_bytes\",\n]\n\n[[package]]\nname = \"clippy_lints\"\nversion = \"0.1.60\"\nsource = \"git+https://github.com/rust-lang/rust-clippy#496f26c2297c0117a24c3d26172fd72b5f9ad927\"\ndependencies = [\n \"cargo_metadata\",\n \"clippy_utils\",\n \"if_chain\",\n \"itertools\",\n \"pulldown-cmark\",\n \"quine-mc_cluskey\",\n \"regex-syntax\",\n \"rustc-semver\",\n \"semver 1.0.4\",\n \"serde\",\n \"toml\",\n \"unicode-normalization\",\n \"unicode-script\",\n \"url 2.2.2\",\n]\n\n[[package]]\nname = \"clippy_utils\"\nversion = \"0.1.60\"\nsource = \"git+https://github.com/rust-lang/rust-clippy#496f26c2297c0117a24c3d26172fd72b5f9ad927\"\ndependencies = [\n \"arrayvec 0.7.2\",\n \"if_chain\",\n \"rustc-semver\",\n]\n\n[[package]]\nname = \"combine\"\nversion = \"4.6.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"50b727aacc797f9fc28e355d21f34709ac4fc9adecfe470ad07b8f4464f53062\"\ndependencies = [\n \"bytes\",\n \"memchr\",\n]\n\n[[package]]\nname = \"commoncrypto\"\nversion = \"0.2.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d056a8586ba25a1e4d61cb090900e495952c7886786fc55f909ab2f819b69007\"\ndependencies = [\n \"commoncrypto-sys\",\n]\n\n[[package]]\nname = \"commoncrypto-sys\"\nversion = \"0.2.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1fed34f46747aa73dfaa578069fd8279d2818ade2b55f38f22a9401c7f4083e2\"\ndependencies = [\n \"libc\",\n]\n\n[[package]]\nname = \"convert_case\"\nversion = \"0.4.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"6245d59a3e82a7fc217c5828a6692dbc6dfb63a0c8c90495621f7b9d79704a0e\"\n\n[[package]]\nname = \"core-foundation\"\nversion = \"0.9.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"6888e10551bb93e424d8df1d07f1a8b4fceb0001a3a4b048bfc47554946f47b3\"\ndependencies = [\n \"core-foundation-sys\",\n \"libc\",\n]\n\n[[package]]\nname = \"core-foundation-sys\"\nversion = \"0.8.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"5827cebf4670468b8772dd191856768aedcb1b0278a04f989f7766351917b9dc\"\n\n[[package]]\nname = \"crates-io\"\nversion = \"0.34.0\"\nsource = \"git+https://github.com/rust-lang/cargo?rev=5514f1e0e1b3650ed8a78306198e90b66b292693#5514f1e0e1b3650ed8a78306198e90b66b292693\"\ndependencies = [\n \"anyhow\",\n \"curl\",\n \"percent-encoding 2.1.0\",\n \"serde\",\n \"serde_json\",\n \"url 2.2.2\",\n]\n\n[[package]]\nname = \"crc32fast\"\nversion = \"1.2.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3825b1e8580894917dc4468cb634a1b4e9745fddc854edad72d9c04644c0319f\"\ndependencies = [\n \"cfg-if\",\n]\n\n[[package]]\nname = \"crossbeam-channel\"\nversion = \"0.5.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"06ed27e177f16d65f0f0c22a213e17c696ace5dd64b14258b52f9417ccb52db4\"\ndependencies = [\n \"cfg-if\",\n \"crossbeam-utils\",\n]\n\n[[package]]\nname = \"crossbeam-deque\"\nversion = \"0.8.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"6455c0ca19f0d2fbf751b908d5c55c1f5cbc65e03c4225427254b46890bdde1e\"\ndependencies = [\n \"cfg-if\",\n \"crossbeam-epoch\",\n \"crossbeam-utils\",\n]\n\n[[package]]\nname = \"crossbeam-epoch\"\nversion = \"0.9.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"4ec02e091aa634e2c3ada4a392989e7c3116673ef0ac5b72232439094d73b7fd\"\ndependencies = [\n \"cfg-if\",\n \"crossbeam-utils\",\n \"lazy_static\",\n \"memoffset\",\n \"scopeguard\",\n]\n\n[[package]]\nname = \"crossbeam-utils\"\nversion = \"0.8.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d82cfc11ce7f2c3faef78d8a684447b40d503d9681acebed6cb728d45940c4db\"\ndependencies = [\n \"cfg-if\",\n \"lazy_static\",\n]\n\n[[package]]\nname = \"crypto-hash\"\nversion = \"0.3.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8a77162240fd97248d19a564a565eb563a3f592b386e4136fb300909e67dddca\"\ndependencies = [\n \"commoncrypto\",\n \"hex 0.3.2\",\n \"openssl\",\n \"winapi\",\n]\n\n[[package]]\nname = \"curl\"\nversion = \"0.4.44\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"509bd11746c7ac09ebd19f0b17782eae80aadee26237658a6b4808afb5c11a22\"\ndependencies = [\n \"curl-sys\",\n \"libc\",\n \"openssl-probe\",\n \"openssl-sys\",\n \"schannel\",\n \"socket2\",\n \"winapi\",\n]\n\n[[package]]\nname = \"curl-sys\"\nversion = \"0.4.56+curl-7.83.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"6093e169dd4de29e468fa649fbae11cdcd5551c81fe5bf1b0677adad7ef3d26f\"\ndependencies = [\n \"cc\",\n \"libc\",\n \"libnghttp2-sys\",\n \"libz-sys\",\n \"openssl-sys\",\n \"pkg-config\",\n \"vcpkg\",\n \"winapi\",\n]\n\n[[package]]\nname = \"derive-new\"\nversion = \"0.5.9\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3418329ca0ad70234b9735dc4ceed10af4df60eff9c8e7b06cb5e520d92c3535\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn\",\n]\n\n[[package]]\nname = \"derive_more\"\nversion = \"0.99.16\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"40eebddd2156ce1bb37b20bbe5151340a31828b1f2d22ba4141f3531710e38df\"\ndependencies = [\n \"convert_case\",\n \"proc-macro2\",\n \"quote\",\n \"rustc_version\",\n \"syn\",\n]\n\n[[package]]\nname = \"diff\"\nversion = \"0.1.12\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"0e25ea47919b1560c4e3b7fe0aaab9becf5b84a10325ddf7db0f0ba5e1026499\"\n\n[[package]]\nname = \"difference\"\nversion = \"2.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"524cbf6897b527295dff137cec09ecf3a05f4fddffd7dfcd1585403449e74198\"\n\n[[package]]\nname = \"dirs\"\nversion = \"4.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ca3aa72a6f96ea37bbc5aa912f6788242832f75369bdfdadcb0e38423f100059\"\ndependencies = [\n \"dirs-sys\",\n]\n\n[[package]]\nname = \"dirs-next\"\nversion = \"2.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b98cf8ebf19c3d1b223e151f99a4f9f0690dca41414773390fc824184ac833e1\"\ndependencies = [\n \"cfg-if\",\n \"dirs-sys-next\",\n]\n\n[[package]]\nname = \"dirs-sys\"\nversion = \"0.3.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"03d86534ed367a67548dc68113a0f5db55432fdfbb6e6f9d77704397d95d5780\"\ndependencies = [\n \"libc\",\n \"redox_users\",\n \"winapi\",\n]\n\n[[package]]\nname = \"dirs-sys-next\"\nversion = \"0.1.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"4ebda144c4fe02d1f7ea1a7d9641b6fc6b580adcfa024ae48797ecdeb6825b4d\"\ndependencies = [\n \"libc\",\n \"redox_users\",\n \"winapi\",\n]\n\n[[package]]\nname = \"either\"\nversion = \"1.6.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e78d4f1cc4ae33bbfc157ed5d5a5ef3bc29227303d595861deb238fcec4e9457\"\n\n[[package]]\nname = \"env_logger\"\nversion = \"0.7.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"44533bbbb3bb3c1fa17d9f2e4e38bbbaf8396ba82193c4cb1b6445d711445d36\"\ndependencies = [\n \"atty\",\n \"humantime 1.3.0\",\n \"log\",\n \"regex\",\n \"termcolor\",\n]\n\n[[package]]\nname = \"env_logger\"\nversion = \"0.9.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"0b2cf0344971ee6c64c31be0d530793fba457d322dfec2810c453d0ef228f9c3\"\ndependencies = [\n \"atty\",\n \"humantime 2.1.0\",\n \"log\",\n \"regex\",\n \"termcolor\",\n]\n\n[[package]]\nname = \"filetime\"\nversion = \"0.2.15\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"975ccf83d8d9d0d84682850a38c8169027be83368805971cc4f238c2b245bc98\"\ndependencies = [\n \"cfg-if\",\n \"libc\",\n \"redox_syscall\",\n \"winapi\",\n]\n\n[[package]]\nname = \"flate2\"\nversion = \"1.0.22\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1e6988e897c1c9c485f43b47a529cef42fde0547f9d8d41a7062518f1d8fc53f\"\ndependencies = [\n \"cfg-if\",\n \"crc32fast\",\n \"libc\",\n \"libz-sys\",\n \"miniz_oxide\",\n]\n\n[[package]]\nname = \"fnv\"\nversion = \"1.0.7\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3f9eec918d3f24069decb9af1554cad7c880e2da24a9afd88aca000531ab82c1\"\n\n[[package]]\nname = \"foreign-types\"\nversion = \"0.3.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f6f339eb8adc052cd2ca78910fda869aefa38d22d5cb648e6485e4d3fc06f3b1\"\ndependencies = [\n \"foreign-types-shared\",\n]\n\n[[package]]\nname = \"foreign-types-shared\"\nversion = \"0.1.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"00b0228411908ca8685dba7fc2cdd70ec9990a6e753e89b6ac91a84c40fbaf4b\"\n\n[[package]]\nname = \"form_urlencoded\"\nversion = \"1.0.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"5fc25a87fa4fd2094bffb06925852034d90a17f0d1e05197d4956d3555752191\"\ndependencies = [\n \"matches\",\n \"percent-encoding 2.1.0\",\n]\n\n[[package]]\nname = \"fst\"\nversion = \"0.4.7\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"7ab85b9b05e3978cc9a9cf8fea7f01b494e1a09ed3037e16ba39edc7a29eb61a\"\n\n[[package]]\nname = \"futures\"\nversion = \"0.1.31\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3a471a38ef8ed83cd6e40aa59c1ffe17db6855c18e3604d9c4ed8c08ebc28678\"\n\n[[package]]\nname = \"futures\"\nversion = \"0.3.18\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8cd0210d8c325c245ff06fd95a3b13689a1a276ac8cfa8e8720cb840bfb84b9e\"\ndependencies = [\n \"futures-channel\",\n \"futures-core\",\n \"futures-executor\",\n \"futures-io\",\n \"futures-sink\",\n \"futures-task\",\n \"futures-util\",\n]\n\n[[package]]\nname = \"futures-channel\"\nversion = \"0.3.18\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"7fc8cd39e3dbf865f7340dce6a2d401d24fd37c6fe6c4f0ee0de8bfca2252d27\"\ndependencies = [\n \"futures-core\",\n \"futures-sink\",\n]\n\n[[package]]\nname = \"futures-core\"\nversion = \"0.3.18\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"629316e42fe7c2a0b9a65b47d159ceaa5453ab14e8f0a3c5eedbb8cd55b4a445\"\n\n[[package]]\nname = \"futures-executor\"\nversion = \"0.3.18\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"7b808bf53348a36cab739d7e04755909b9fcaaa69b7d7e588b37b6ec62704c97\"\ndependencies = [\n \"futures-core\",\n \"futures-task\",\n \"futures-util\",\n \"num_cpus\",\n]\n\n[[package]]\nname = \"futures-io\"\nversion = \"0.3.18\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e481354db6b5c353246ccf6a728b0c5511d752c08da7260546fc0933869daa11\"\n\n[[package]]\nname = \"futures-macro\"\nversion = \"0.3.18\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a89f17b21645bc4ed773c69af9c9a0effd4a3f1a3876eadd453469f8854e7fdd\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn\",\n]\n\n[[package]]\nname = \"futures-sink\"\nversion = \"0.3.18\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"996c6442437b62d21a32cd9906f9c41e7dc1e19a9579843fad948696769305af\"\n\n[[package]]\nname = \"futures-task\"\nversion = \"0.3.18\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"dabf1872aaab32c886832f2276d2f5399887e2bd613698a02359e4ea83f8de12\"\n\n[[package]]\nname = \"futures-util\"\nversion = \"0.3.18\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"41d22213122356472061ac0f1ab2cee28d2bac8491410fd68c2af53d1cedb83e\"\ndependencies = [\n \"futures 0.1.31\",\n \"futures-channel\",\n \"futures-core\",\n \"futures-io\",\n \"futures-macro\",\n \"futures-sink\",\n \"futures-task\",\n \"memchr\",\n \"pin-project-lite\",\n \"pin-utils\",\n \"slab\",\n]\n\n[[package]]\nname = \"fwdansi\"\nversion = \"1.1.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"08c1f5787fe85505d1f7777268db5103d80a7a374d2316a7ce262e57baf8f208\"\ndependencies = [\n \"memchr\",\n \"termcolor\",\n]\n\n[[package]]\nname = \"getopts\"\nversion = \"0.2.21\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"14dbbfd5c71d70241ecf9e6f13737f7b5ce823821063188d7e46c41d371eebd5\"\ndependencies = [\n \"unicode-width\",\n]\n\n[[package]]\nname = \"getrandom\"\nversion = \"0.1.16\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8fc3cb4d91f53b50155bdcfd23f6a4c39ae1969c2ae85982b135750cccaf5fce\"\ndependencies = [\n \"cfg-if\",\n \"libc\",\n \"wasi 0.9.0+wasi-snapshot-preview1\",\n]\n\n[[package]]\nname = \"getrandom\"\nversion = \"0.2.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"7fcd999463524c52659517fe2cea98493cfe485d10565e7b0fb07dbba7ad2753\"\ndependencies = [\n \"cfg-if\",\n \"libc\",\n \"wasi 0.10.2+wasi-snapshot-preview1\",\n]\n\n[[package]]\nname = \"git2\"\nversion = \"0.14.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3826a6e0e2215d7a41c2bfc7c9244123969273f3476b939a226aac0ab56e9e3c\"\ndependencies = [\n \"bitflags\",\n \"libc\",\n \"libgit2-sys\",\n \"log\",\n \"openssl-probe\",\n \"openssl-sys\",\n \"url 2.2.2\",\n]\n\n[[package]]\nname = \"git2-curl\"\nversion = \"0.15.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1ee51709364c341fbb6fe2a385a290fb9196753bdde2fc45447d27cd31b11b13\"\ndependencies = [\n \"curl\",\n \"git2\",\n \"log\",\n \"url 2.2.2\",\n]\n\n[[package]]\nname = \"glob\"\nversion = \"0.3.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"9b919933a397b79c37e33b77bb2aa3dc8eb6e165ad809e58ff75bc7db2e34574\"\n\n[[package]]\nname = \"globset\"\nversion = \"0.4.8\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"10463d9ff00a2a068db14231982f5132edebad0d7660cd956a1c30292dbcbfbd\"\ndependencies = [\n \"aho-corasick\",\n \"bstr\",\n \"fnv\",\n \"log\",\n \"regex\",\n]\n\n[[package]]\nname = \"hashbrown\"\nversion = \"0.11.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ab5ef0d4909ef3724cc8cce6ccc8572c5c817592e9285f5464f8e86f8bd3726e\"\n\n[[package]]\nname = \"heck\"\nversion = \"0.4.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"2540771e65fc8cb83cd6e8a237f70c319bd5c29f78ed1084ba5d50eeac86f7f9\"\n\n[[package]]\nname = \"hermit-abi\"\nversion = \"0.1.19\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"62b467343b94ba476dcb2500d242dadbb39557df889310ac77c5d99100aaac33\"\ndependencies = [\n \"libc\",\n]\n\n[[package]]\nname = \"hex\"\nversion = \"0.3.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"805026a5d0141ffc30abb3be3173848ad46a1b1664fe632428479619a3644d77\"\n\n[[package]]\nname = \"hex\"\nversion = \"0.4.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"7f24254aa9a54b5c858eaee2f5bccdb46aaf0e486a595ed5fd8f86ba55232a70\"\n\n[[package]]\nname = \"home\"\nversion = \"0.5.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"2456aef2e6b6a9784192ae780c0f15bc57df0e918585282325e8c8ac27737654\"\ndependencies = [\n \"winapi\",\n]\n\n[[package]]\nname = \"humantime\"\nversion = \"1.3.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"df004cfca50ef23c36850aaaa59ad52cc70d0e90243c3c7737a4dd32dc7a3c4f\"\ndependencies = [\n \"quick-error\",\n]\n\n[[package]]\nname = \"humantime\"\nversion = \"2.1.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"9a3a5bfb195931eeb336b2a7b4d761daec841b97f947d34394601737a7bba5e4\"\n\n[[package]]\nname = \"idna\"\nversion = \"0.1.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"38f09e0f0b1fb55fdee1f17470ad800da77af5186a1a76c026b679358b7e844e\"\ndependencies = [\n \"matches\",\n \"unicode-bidi\",\n \"unicode-normalization\",\n]\n\n[[package]]\nname = \"idna\"\nversion = \"0.2.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"418a0a6fab821475f634efe3ccc45c013f742efe03d853e8d3355d5cb850ecf8\"\ndependencies = [\n \"matches\",\n \"unicode-bidi\",\n \"unicode-normalization\",\n]\n\n[[package]]\nname = \"if_chain\"\nversion = \"1.0.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"cb56e1aa765b4b4f3aadfab769793b7087bb03a4ea4920644a6d238e2df5b9ed\"\n\n[[package]]\nname = \"ignore\"\nversion = \"0.4.18\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"713f1b139373f96a2e0ce3ac931cd01ee973c3c5dd7c40c0c2efe96ad2b6751d\"\ndependencies = [\n \"crossbeam-utils\",\n \"globset\",\n \"lazy_static\",\n \"log\",\n \"memchr\",\n \"regex\",\n \"same-file\",\n \"thread_local\",\n \"walkdir\",\n \"winapi-util\",\n]\n\n[[package]]\nname = \"im-rc\"\nversion = \"15.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3ca8957e71f04a205cb162508f9326aea04676c8dfd0711220190d6b83664f3f\"\ndependencies = [\n \"bitmaps\",\n \"rand_core 0.5.1\",\n \"rand_xoshiro\",\n \"sized-chunks\",\n \"typenum\",\n \"version_check\",\n]\n\n[[package]]\nname = \"indexmap\"\nversion = \"1.8.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"282a6247722caba404c065016bbfa522806e51714c34f5dfc3e4a3a46fcb4223\"\ndependencies = [\n \"autocfg\",\n \"hashbrown\",\n]\n\n[[package]]\nname = \"instant\"\nversion = \"0.1.12\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"7a5bbe824c507c5da5956355e86a746d82e0e1464f65d862cc5e71da70e94b2c\"\ndependencies = [\n \"cfg-if\",\n]\n\n[[package]]\nname = \"itertools\"\nversion = \"0.10.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"69ddb889f9d0d08a67338271fa9b62996bc788c7796a5c18cf057420aaed5eaf\"\ndependencies = [\n \"either\",\n]\n\n[[package]]\nname = \"itoa\"\nversion = \"0.4.8\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b71991ff56294aa922b450139ee08b3bfc70982c6b2c7562771375cf73542dd4\"\n\n[[package]]\nname = \"jobserver\"\nversion = \"0.1.24\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"af25a77299a7f711a01975c35a6a424eb6862092cc2d6c72c4ed6cbc56dfc1fa\"\ndependencies = [\n \"libc\",\n]\n\n[[package]]\nname = \"json\"\nversion = \"0.12.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"078e285eafdfb6c4b434e0d31e8cfcb5115b651496faca5749b88fafd4f23bfd\"\n\n[[package]]\nname = \"jsonrpc-client-transports\"\nversion = \"18.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d2b99d4207e2a04fb4581746903c2bb7eb376f88de9c699d0f3e10feeac0cd3a\"\ndependencies = [\n \"derive_more\",\n \"futures 0.3.18\",\n \"jsonrpc-core\",\n \"jsonrpc-pubsub\",\n \"jsonrpc-server-utils\",\n \"log\",\n \"parity-tokio-ipc\",\n \"serde\",\n \"serde_json\",\n \"tokio\",\n \"url 1.7.2\",\n]\n\n[[package]]\nname = \"jsonrpc-core\"\nversion = \"18.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"14f7f76aef2d054868398427f6c54943cf3d1caa9a7ec7d0c38d69df97a965eb\"\ndependencies = [\n \"futures 0.3.18\",\n \"futures-executor\",\n \"futures-util\",\n \"log\",\n \"serde\",\n \"serde_derive\",\n \"serde_json\",\n]\n\n[[package]]\nname = \"jsonrpc-core-client\"\nversion = \"18.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b51da17abecbdab3e3d4f26b01c5ec075e88d3abe3ab3b05dc9aa69392764ec0\"\ndependencies = [\n \"futures 0.3.18\",\n \"jsonrpc-client-transports\",\n]\n\n[[package]]\nname = \"jsonrpc-derive\"\nversion = \"18.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"5b939a78fa820cdfcb7ee7484466746a7377760970f6f9c6fe19f9edcc8a38d2\"\ndependencies = [\n \"proc-macro-crate\",\n \"proc-macro2\",\n \"quote\",\n \"syn\",\n]\n\n[[package]]\nname = \"jsonrpc-ipc-server\"\nversion = \"18.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"382bb0206323ca7cda3dcd7e245cea86d37d02457a02a975e3378fb149a48845\"\ndependencies = [\n \"futures 0.3.18\",\n \"jsonrpc-core\",\n \"jsonrpc-server-utils\",\n \"log\",\n \"parity-tokio-ipc\",\n \"parking_lot\",\n \"tower-service\",\n]\n\n[[package]]\nname = \"jsonrpc-pubsub\"\nversion = \"18.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"240f87695e6c6f62fb37f05c02c04953cf68d6408b8c1c89de85c7a0125b1011\"\ndependencies = [\n \"futures 0.3.18\",\n \"jsonrpc-core\",\n \"lazy_static\",\n \"log\",\n \"parking_lot\",\n \"rand 0.7.3\",\n \"serde\",\n]\n\n[[package]]\nname = \"jsonrpc-server-utils\"\nversion = \"18.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"fa4fdea130485b572c39a460d50888beb00afb3e35de23ccd7fad8ff19f0e0d4\"\ndependencies = [\n \"bytes\",\n \"futures 0.3.18\",\n \"globset\",\n \"jsonrpc-core\",\n \"lazy_static\",\n \"log\",\n \"tokio\",\n \"tokio-stream\",\n \"tokio-util\",\n \"unicase\",\n]\n\n[[package]]\nname = \"kstring\"\nversion = \"2.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ec3066350882a1cd6d950d055997f379ac37fd39f81cd4d8ed186032eb3c5747\"\ndependencies = [\n \"static_assertions\",\n]\n\n[[package]]\nname = \"lazy_static\"\nversion = \"1.4.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e2abad23fbc42b3700f2f279844dc832adb2b2eb069b2df918f455c4e18cc646\"\n\n[[package]]\nname = \"lazycell\"\nversion = \"1.3.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"830d08ce1d1d941e6b30645f1a0eb5643013d835ce3779a5fc208261dbe10f55\"\n\n[[package]]\nname = \"libc\"\nversion = \"0.2.108\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8521a1b57e76b1ec69af7599e75e38e7b7fad6610f037db8c79b127201b5d119\"\n\n[[package]]\nname = \"libgit2-sys\"\nversion = \"0.13.2+1.4.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3a42de9a51a5c12e00fc0e4ca6bc2ea43582fc6418488e8f615e905d886f258b\"\ndependencies = [\n \"cc\",\n \"libc\",\n \"libssh2-sys\",\n \"libz-sys\",\n \"openssl-sys\",\n \"pkg-config\",\n]\n\n[[package]]\nname = \"libnghttp2-sys\"\nversion = \"0.1.7+1.45.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"57ed28aba195b38d5ff02b9170cbff627e336a20925e43b4945390401c5dc93f\"\ndependencies = [\n \"cc\",\n \"libc\",\n]\n\n[[package]]\nname = \"libssh2-sys\"\nversion = \"0.2.23\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b094a36eb4b8b8c8a7b4b8ae43b2944502be3e59cd87687595cf6b0a71b3f4ca\"\ndependencies = [\n \"cc\",\n \"libc\",\n \"libz-sys\",\n \"openssl-sys\",\n \"pkg-config\",\n \"vcpkg\",\n]\n\n[[package]]\nname = \"libz-sys\"\nversion = \"1.1.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"de5435b8549c16d423ed0c03dbaafe57cf6c3344744f1242520d59c9d8ecec66\"\ndependencies = [\n \"cc\",\n \"libc\",\n \"pkg-config\",\n \"vcpkg\",\n]\n\n[[package]]\nname = \"lock_api\"\nversion = \"0.4.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"712a4d093c9976e24e7dbca41db895dabcbac38eb5f4045393d17a95bdfb1109\"\ndependencies = [\n \"scopeguard\",\n]\n\n[[package]]\nname = \"log\"\nversion = \"0.4.14\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"51b9bbe6c47d51fc3e1a9b945965946b4c44142ab8792c50835a980d362c2710\"\ndependencies = [\n \"cfg-if\",\n]\n\n[[package]]\nname = \"lsp-codec\"\nversion = \"0.3.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"aa939d0b62476a5a19fb7fcb423a5c6ce8c7e09b851d37531e2fe3e0e6d9d257\"\ndependencies = [\n \"bytes\",\n \"serde_json\",\n \"tokio-util\",\n]\n\n[[package]]\nname = \"lsp-types\"\nversion = \"0.60.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"fe3edefcd66dde1f7f1df706f46520a3c93adc5ca4bc5747da6621195e894efd\"\ndependencies = [\n \"bitflags\",\n \"serde\",\n \"serde_json\",\n \"serde_repr\",\n \"url 2.2.2\",\n]\n\n[[package]]\nname = \"matches\"\nversion = \"0.1.9\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a3e378b66a060d48947b590737b30a1be76706c8dd7b8ba0f2fe3989c68a853f\"\n\n[[package]]\nname = \"memchr\"\nversion = \"2.4.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"308cc39be01b73d0d18f82a0e7b2a3df85245f84af96fdddc5d202d27e47b86a\"\n\n[[package]]\nname = \"memoffset\"\nversion = \"0.6.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"59accc507f1338036a0477ef61afdae33cde60840f4dfe481319ce3ad116ddf9\"\ndependencies = [\n \"autocfg\",\n]\n\n[[package]]\nname = \"miniz_oxide\"\nversion = \"0.4.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a92518e98c078586bc6c934028adcca4c92a53d6a958196de835170a01d84e4b\"\ndependencies = [\n \"adler\",\n \"autocfg\",\n]\n\n[[package]]\nname = \"mio\"\nversion = \"0.7.14\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8067b404fe97c70829f082dec8bcf4f71225d7eaea1d8645349cb76fa06205cc\"\ndependencies = [\n \"libc\",\n \"log\",\n \"miow\",\n \"ntapi\",\n \"winapi\",\n]\n\n[[package]]\nname = \"miow\"\nversion = \"0.3.7\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b9f1c5b025cda876f66ef43a113f91ebc9f4ccef34843000e0adf6ebbab84e21\"\ndependencies = [\n \"winapi\",\n]\n\n[[package]]\nname = \"ntapi\"\nversion = \"0.3.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3f6bb902e437b6d86e03cce10a7e2af662292c5dfef23b65899ea3ac9354ad44\"\ndependencies = [\n \"winapi\",\n]\n\n[[package]]\nname = \"num_cpus\"\nversion = \"1.13.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"05499f3756671c15885fee9034446956fff3f243d6077b91e5767df161f766b3\"\ndependencies = [\n \"hermit-abi\",\n \"libc\",\n]\n\n[[package]]\nname = \"once_cell\"\nversion = \"1.8.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"692fcb63b64b1758029e0a96ee63e049ce8c5948587f2f7208df04625e5f6b56\"\n\n[[package]]\nname = \"opener\"\nversion = \"0.5.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"4ea3ebcd72a54701f56345f16785a6d3ac2df7e986d273eb4395c0b01db17952\"\ndependencies = [\n \"bstr\",\n \"winapi\",\n]\n\n[[package]]\nname = \"openssl\"\nversion = \"0.10.38\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"0c7ae222234c30df141154f159066c5093ff73b63204dcda7121eb082fc56a95\"\ndependencies = [\n \"bitflags\",\n \"cfg-if\",\n \"foreign-types\",\n \"libc\",\n \"once_cell\",\n \"openssl-sys\",\n]\n\n[[package]]\nname = \"openssl-probe\"\nversion = \"0.1.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"28988d872ab76095a6e6ac88d99b54fd267702734fd7ffe610ca27f533ddb95a\"\n\n[[package]]\nname = \"openssl-sys\"\nversion = \"0.9.71\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"7df13d165e607909b363a4757a6f133f8a818a74e9d3a98d09c6128e15fa4c73\"\ndependencies = [\n \"autocfg\",\n \"cc\",\n \"libc\",\n \"pkg-config\",\n \"vcpkg\",\n]\n\n[[package]]\nname = \"ordslice\"\nversion = \"0.3.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"dd20eec3dbe4376829cb7d80ae6ac45e0a766831dca50202ff2d40db46a8a024\"\n\n[[package]]\nname = \"os_info\"\nversion = \"3.5.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"5209b2162b2c140df493a93689e04f8deab3a67634f5bc7a553c0a98e5b8d399\"\ndependencies = [\n \"log\",\n \"serde\",\n \"winapi\",\n]\n\n[[package]]\nname = \"os_str_bytes\"\nversion = \"6.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8e22443d1643a904602595ba1cd8f7d896afe56d26712531c5ff73a15b2fbf64\"\n\n[[package]]\nname = \"parity-tokio-ipc\"\nversion = \"0.9.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"9981e32fb75e004cc148f5fb70342f393830e0a4aa62e3cc93b50976218d42b6\"\ndependencies = [\n \"futures 0.3.18\",\n \"libc\",\n \"log\",\n \"rand 0.7.3\",\n \"tokio\",\n \"winapi\",\n]\n\n[[package]]\nname = \"parking_lot\"\nversion = \"0.11.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"7d17b78036a60663b797adeaee46f5c9dfebb86948d1255007a1d6be0271ff99\"\ndependencies = [\n \"instant\",\n \"lock_api\",\n \"parking_lot_core\",\n]\n\n[[package]]\nname = \"parking_lot_core\"\nversion = \"0.8.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d76e8e1493bcac0d2766c42737f34458f1c8c50c0d23bcb24ea953affb273216\"\ndependencies = [\n \"cfg-if\",\n \"instant\",\n \"libc\",\n \"redox_syscall\",\n \"smallvec\",\n \"winapi\",\n]\n\n[[package]]\nname = \"pathdiff\"\nversion = \"0.2.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8835116a5c179084a830efb3adc117ab007512b535bc1a21c991d3b32a6b44dd\"\n\n[[package]]\nname = \"percent-encoding\"\nversion = \"1.0.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"31010dd2e1ac33d5b46a5b413495239882813e0369f8ed8a5e266f173602f831\"\n\n[[package]]\nname = \"percent-encoding\"\nversion = \"2.1.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d4fd5641d01c8f18a23da7b6fe29298ff4b55afcccdf78973b24cf3175fee32e\"\n\n[[package]]\nname = \"pest\"\nversion = \"2.1.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"10f4872ae94d7b90ae48754df22fd42ad52ce740b8f370b03da4835417403e53\"\ndependencies = [\n \"ucd-trie\",\n]\n\n[[package]]\nname = \"pin-project-lite\"\nversion = \"0.2.7\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8d31d11c69a6b52a174b42bdc0c30e5e11670f90788b2c471c31c1d17d449443\"\n\n[[package]]\nname = \"pin-utils\"\nversion = \"0.1.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8b870d8c151b6f2fb93e84a13146138f05d02ed11c7e7c54f8826aaaf7c9f184\"\n\n[[package]]\nname = \"pkg-config\"\nversion = \"0.3.22\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"12295df4f294471248581bc09bef3c38a5e46f1e36d6a37353621a0c6c357e1f\"\n\n[[package]]\nname = \"ppv-lite86\"\nversion = \"0.2.15\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ed0cfbc8191465bed66e1718596ee0b0b35d5ee1f41c5df2189d0fe8bde535ba\"\n\n[[package]]\nname = \"proc-macro-crate\"\nversion = \"0.1.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1d6ea3c4595b96363c13943497db34af4460fb474a95c43f4446ad341b8c9785\"\ndependencies = [\n \"toml\",\n]\n\n[[package]]\nname = \"proc-macro-error\"\nversion = \"1.0.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"da25490ff9892aab3fcf7c36f08cfb902dd3e71ca0f9f9517bea02a73a5ce38c\"\ndependencies = [\n \"proc-macro-error-attr\",\n \"proc-macro2\",\n \"quote\",\n \"syn\",\n \"version_check\",\n]\n\n[[package]]\nname = \"proc-macro-error-attr\"\nversion = \"1.0.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a1be40180e52ecc98ad80b184934baf3d0d29f979574e439af5a55274b35f869\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"version_check\",\n]\n\n[[package]]\nname = \"proc-macro2\"\nversion = \"1.0.32\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ba508cc11742c0dc5c1659771673afbab7a0efab23aa17e854cbab0837ed0b43\"\ndependencies = [\n \"unicode-xid\",\n]\n\n[[package]]\nname = \"pulldown-cmark\"\nversion = \"0.9.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"acd16514d1af5f7a71f909a44ef253cdb712a376d7ebc8ae4a471a9be9743548\"\ndependencies = [\n \"bitflags\",\n \"memchr\",\n \"unicase\",\n]\n\n[[package]]\nname = \"quick-error\"\nversion = \"1.2.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a1d01941d82fa2ab50be1e79e6714289dd7cde78eba4c074bc5a4374f650dfe0\"\n\n[[package]]\nname = \"quine-mc_cluskey\"\nversion = \"0.2.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"07589615d719a60c8dd8a4622e7946465dfef20d1a428f969e3443e7386d5f45\"\n\n[[package]]\nname = \"quote\"\nversion = \"1.0.10\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"38bc8cc6a5f2e3655e0899c1b848643b2562f853f114bfec7be120678e3ace05\"\ndependencies = [\n \"proc-macro2\",\n]\n\n[[package]]\nname = \"racer\"\nversion = \"2.2.2\"\ndependencies = [\n \"bitflags\",\n \"derive_more\",\n \"env_logger 0.7.1\",\n \"humantime 2.1.0\",\n \"lazy_static\",\n \"lazycell\",\n \"log\",\n \"racer-cargo-metadata\",\n \"rls-span\",\n]\n\n[[package]]\nname = \"racer-cargo-metadata\"\nversion = \"0.1.2\"\ndependencies = [\n \"racer-interner\",\n \"serde\",\n \"serde_json\",\n]\n\n[[package]]\nname = \"racer-interner\"\nversion = \"0.1.0\"\ndependencies = [\n \"serde\",\n]\n\n[[package]]\nname = \"rand\"\nversion = \"0.7.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"6a6b1679d49b24bbfe0c803429aa1874472f50d9b363131f0e89fc356b544d03\"\ndependencies = [\n \"getrandom 0.1.16\",\n \"libc\",\n \"rand_chacha 0.2.2\",\n \"rand_core 0.5.1\",\n \"rand_hc 0.2.0\",\n]\n\n[[package]]\nname = \"rand\"\nversion = \"0.8.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"2e7573632e6454cf6b99d7aac4ccca54be06da05aca2ef7423d22d27d4d4bcd8\"\ndependencies = [\n \"libc\",\n \"rand_chacha 0.3.1\",\n \"rand_core 0.6.3\",\n \"rand_hc 0.3.1\",\n]\n\n[[package]]\nname = \"rand_chacha\"\nversion = \"0.2.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f4c8ed856279c9737206bf725bf36935d8666ead7aa69b52be55af369d193402\"\ndependencies = [\n \"ppv-lite86\",\n \"rand_core 0.5.1\",\n]\n\n[[package]]\nname = \"rand_chacha\"\nversion = \"0.3.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e6c10a63a0fa32252be49d21e7709d4d4baf8d231c2dbce1eaa8141b9b127d88\"\ndependencies = [\n \"ppv-lite86\",\n \"rand_core 0.6.3\",\n]\n\n[[package]]\nname = \"rand_core\"\nversion = \"0.5.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"90bde5296fc891b0cef12a6d03ddccc162ce7b2aff54160af9338f8d40df6d19\"\ndependencies = [\n \"getrandom 0.1.16\",\n]\n\n[[package]]\nname = \"rand_core\"\nversion = \"0.6.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d34f1408f55294453790c48b2f1ebbb1c5b4b7563eb1f418bcfcfdbb06ebb4e7\"\ndependencies = [\n \"getrandom 0.2.3\",\n]\n\n[[package]]\nname = \"rand_hc\"\nversion = \"0.2.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ca3129af7b92a17112d59ad498c6f81eaf463253766b90396d39ea7a39d6613c\"\ndependencies = [\n \"rand_core 0.5.1\",\n]\n\n[[package]]\nname = \"rand_hc\"\nversion = \"0.3.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d51e9f596de227fda2ea6c84607f5558e196eeaf43c986b724ba4fb8fdf497e7\"\ndependencies = [\n \"rand_core 0.6.3\",\n]\n\n[[package]]\nname = \"rand_xoshiro\"\nversion = \"0.4.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a9fcdd2e881d02f1d9390ae47ad8e5696a9e4be7b547a1da2afbc61973217004\"\ndependencies = [\n \"rand_core 0.5.1\",\n]\n\n[[package]]\nname = \"rayon\"\nversion = \"1.5.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"c06aca804d41dbc8ba42dfd964f0d01334eceb64314b9ecf7c5fad5188a06d90\"\ndependencies = [\n \"autocfg\",\n \"crossbeam-deque\",\n \"either\",\n \"rayon-core\",\n]\n\n[[package]]\nname = \"rayon-core\"\nversion = \"1.9.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d78120e2c850279833f1dd3582f730c4ab53ed95aeaaaa862a2a5c71b1656d8e\"\ndependencies = [\n \"crossbeam-channel\",\n \"crossbeam-deque\",\n \"crossbeam-utils\",\n \"lazy_static\",\n \"num_cpus\",\n]\n\n[[package]]\nname = \"redox_syscall\"\nversion = \"0.2.10\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8383f39639269cde97d255a32bdb68c047337295414940c68bdd30c2e13203ff\"\ndependencies = [\n \"bitflags\",\n]\n\n[[package]]\nname = \"redox_users\"\nversion = \"0.4.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"528532f3d801c87aec9def2add9ca802fe569e44a544afe633765267840abe64\"\ndependencies = [\n \"getrandom 0.2.3\",\n \"redox_syscall\",\n]\n\n[[package]]\nname = \"regex\"\nversion = \"1.5.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d07a8629359eb56f1e2fb1652bb04212c072a87ba68546a04065d525673ac461\"\ndependencies = [\n \"aho-corasick\",\n \"memchr\",\n \"regex-syntax\",\n]\n\n[[package]]\nname = \"regex-automata\"\nversion = \"0.1.10\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"6c230d73fb8d8c1b9c0b3135c5142a8acee3a0558fb8db5cf1cb65f8d7862132\"\n\n[[package]]\nname = \"regex-syntax\"\nversion = \"0.6.25\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f497285884f3fcff424ffc933e56d7cbca511def0c9831a7f9b5f6153e3cc89b\"\n\n[[package]]\nname = \"remove_dir_all\"\nversion = \"0.5.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3acd125665422973a33ac9d3dd2df85edad0f4ae9b00dafb1a05e43a9f5ef8e7\"\ndependencies = [\n \"winapi\",\n]\n\n[[package]]\nname = \"rls\"\nversion = \"1.41.0\"\ndependencies = [\n \"anyhow\",\n \"cargo\",\n \"cargo-util\",\n \"cargo_metadata\",\n \"clippy_lints\",\n \"crossbeam-channel\",\n \"difference\",\n \"env_logger 0.9.0\",\n \"futures 0.3.18\",\n \"heck\",\n \"home\",\n \"itertools\",\n \"jsonrpc-core\",\n \"lazy_static\",\n \"log\",\n \"lsp-codec\",\n \"lsp-types\",\n \"num_cpus\",\n \"ordslice\",\n \"racer\",\n \"rand 0.8.4\",\n \"rayon\",\n \"regex\",\n \"rls-analysis\",\n \"rls-data\",\n \"rls-ipc\",\n \"rls-rustc\",\n \"rls-span\",\n \"rls-vfs\",\n \"rustc-workspace-hack\",\n \"rustc_tools_util\",\n \"rustfmt-nightly\",\n \"serde\",\n \"serde_derive\",\n \"serde_ignored\",\n \"serde_json\",\n \"tempfile\",\n \"tokio\",\n \"tokio-stream\",\n \"tokio-util\",\n \"toml\",\n \"toml_edit\",\n \"url 2.2.2\",\n \"walkdir\",\n]\n\n[[package]]\nname = \"rls-analysis\"\nversion = \"0.18.3\"\ndependencies = [\n \"derive-new\",\n \"fst\",\n \"itertools\",\n \"json\",\n \"log\",\n \"rls-data\",\n \"rls-span\",\n \"serde\",\n \"serde_json\",\n]\n\n[[package]]\nname = \"rls-data\"\nversion = \"0.19.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a58135eb039f3a3279a33779192f0ee78b56f57ae636e25cec83530e41debb99\"\ndependencies = [\n \"rls-span\",\n \"serde\",\n]\n\n[[package]]\nname = \"rls-ipc\"\nversion = \"0.1.0\"\ndependencies = [\n \"jsonrpc-core\",\n \"jsonrpc-core-client\",\n \"jsonrpc-derive\",\n \"jsonrpc-ipc-server\",\n \"rls-data\",\n \"serde\",\n]\n\n[[package]]\nname = \"rls-rustc\"\nversion = \"0.6.0\"\ndependencies = [\n \"clippy_lints\",\n \"env_logger 0.9.0\",\n \"futures 0.3.18\",\n \"log\",\n \"rand 0.8.4\",\n \"rls-data\",\n \"rls-ipc\",\n \"serde\",\n \"tokio\",\n]\n\n[[package]]\nname = \"rls-span\"\nversion = \"0.5.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b6e80f614ad4b37910bfe9b029af19c6f92612bb8e1af66e37d35829bf4ef6d1\"\ndependencies = [\n \"serde\",\n]\n\n[[package]]\nname = \"rls-vfs\"\nversion = \"0.8.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ce4b57b25b4330ed5ec14028fc02141e083ddafda327e7eb598dc0569c8c83c9\"\ndependencies = [\n \"log\",\n \"rls-span\",\n]\n\n[[package]]\nname = \"rustc-semver\"\nversion = \"1.1.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"5be1bdc7edf596692617627bbfeaba522131b18e06ca4df2b6b689e3c5d5ce84\"\n\n[[package]]\nname = \"rustc-workspace-hack\"\nversion = \"1.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"fc71d2faa173b74b232dedc235e3ee1696581bb132fc116fa3626d6151a1a8fb\"\n\n[[package]]\nname = \"rustc_tools_util\"\nversion = \"0.2.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b725dadae9fabc488df69a287f5a99c5eaf5d10853842a8a3dfac52476f544ee\"\n\n[[package]]\nname = \"rustc_version\"\nversion = \"0.3.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f0dfe2087c51c460008730de8b57e6a320782fbfb312e1f4d520e6c6fae155ee\"\ndependencies = [\n \"semver 0.11.0\",\n]\n\n[[package]]\nname = \"rustfix\"\nversion = \"0.6.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"6f0be05fc0675ef4f47119dc39cfc46636bb77d4fc4ef1bd851b9c3f7697f32a\"\ndependencies = [\n \"anyhow\",\n \"log\",\n \"serde\",\n \"serde_json\",\n]\n\n[[package]]\nname = \"rustfmt-config_proc_macro\"\nversion = \"0.2.0\"\nsource = \"git+https://github.com/rust-lang/rustfmt?rev=5fa2727ddeef534a7cd437f9e288c221a2cf0b6a#5fa2727ddeef534a7cd437f9e288c221a2cf0b6a\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn\",\n]\n\n[[package]]\nname = \"rustfmt-nightly\"\nversion = \"1.4.38\"\nsource = \"git+https://github.com/rust-lang/rustfmt?rev=5fa2727ddeef534a7cd437f9e288c221a2cf0b6a#5fa2727ddeef534a7cd437f9e288c221a2cf0b6a\"\ndependencies = [\n \"annotate-snippets\",\n \"anyhow\",\n \"bytecount\",\n \"cargo_metadata\",\n \"clap\",\n \"derive-new\",\n \"diff\",\n \"dirs\",\n \"env_logger 0.9.0\",\n \"getopts\",\n \"ignore\",\n \"itertools\",\n \"lazy_static\",\n \"log\",\n \"regex\",\n \"rustc-workspace-hack\",\n \"rustfmt-config_proc_macro\",\n \"serde\",\n \"serde_json\",\n \"term\",\n \"thiserror\",\n \"toml\",\n \"unicode-segmentation\",\n \"unicode-width\",\n \"unicode_categories\",\n]\n\n[[package]]\nname = \"rustversion\"\nversion = \"1.0.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f2cc38e8fa666e2de3c4aba7edeb5ffc5246c1c2ed0e3d17e560aeeba736b23f\"\n\n[[package]]\nname = \"ryu\"\nversion = \"1.0.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"71d301d4193d031abdd79ff7e3dd721168a9572ef3fe51a1517aba235bd8f86e\"\n\n[[package]]\nname = \"same-file\"\nversion = \"1.0.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"93fc1dc3aaa9bfed95e02e6eadabb4baf7e3078b0bd1b4d7b6b0b68378900502\"\ndependencies = [\n \"winapi-util\",\n]\n\n[[package]]\nname = \"schannel\"\nversion = \"0.1.19\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8f05ba609c234e60bee0d547fe94a4c7e9da733d1c962cf6e59efa4cd9c8bc75\"\ndependencies = [\n \"lazy_static\",\n \"winapi\",\n]\n\n[[package]]\nname = \"scopeguard\"\nversion = \"1.1.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d29ab0c6d3fc0ee92fe66e2d99f700eab17a8d57d1c1d3b748380fb20baa78cd\"\n\n[[package]]\nname = \"semver\"\nversion = \"0.11.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f301af10236f6df4160f7c3f04eec6dbc70ace82d23326abad5edee88801c6b6\"\ndependencies = [\n \"semver-parser\",\n]\n\n[[package]]\nname = \"semver\"\nversion = \"1.0.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"568a8e6258aa33c13358f81fd834adb854c6f7c9468520910a9b1e8fac068012\"\ndependencies = [\n \"serde\",\n]\n\n[[package]]\nname = \"semver-parser\"\nversion = \"0.10.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"00b0bef5b7f9e0df16536d3961cfb6e84331c065b4066afb39768d0e319411f7\"\ndependencies = [\n \"pest\",\n]\n\n[[package]]\nname = \"serde\"\nversion = \"1.0.130\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f12d06de37cf59146fbdecab66aa99f9fe4f78722e3607577a5375d66bd0c913\"\ndependencies = [\n \"serde_derive\",\n]\n\n[[package]]\nname = \"serde_derive\"\nversion = \"1.0.130\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d7bc1a1ab1961464eae040d96713baa5a724a8152c1222492465b54322ec508b\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn\",\n]\n\n[[package]]\nname = \"serde_ignored\"\nversion = \"0.1.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1c2c7d39d14f2f2ea82239de71594782f186fd03501ac81f0ce08e674819ff2f\"\ndependencies = [\n \"serde\",\n]\n\n[[package]]\nname = \"serde_json\"\nversion = \"1.0.71\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"063bf466a64011ac24040a49009724ee60a57da1b437617ceb32e53ad61bfb19\"\ndependencies = [\n \"itoa\",\n \"ryu\",\n \"serde\",\n]\n\n[[package]]\nname = \"serde_repr\"\nversion = \"0.1.7\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"98d0516900518c29efa217c298fa1f4e6c6ffc85ae29fd7f4ee48f176e1a9ed5\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn\",\n]\n\n[[package]]\nname = \"shell-escape\"\nversion = \"0.1.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"45bb67a18fa91266cc7807181f62f9178a6873bfad7dc788c42e6430db40184f\"\n\n[[package]]\nname = \"signal-hook-registry\"\nversion = \"1.4.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e51e73328dc4ac0c7ccbda3a494dfa03df1de2f46018127f60c693f2648455b0\"\ndependencies = [\n \"libc\",\n]\n\n[[package]]\nname = \"sized-chunks\"\nversion = \"0.6.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"16d69225bde7a69b235da73377861095455d298f2b970996eec25ddbb42b3d1e\"\ndependencies = [\n \"bitmaps\",\n \"typenum\",\n]\n\n[[package]]\nname = \"slab\"\nversion = \"0.4.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"9def91fd1e018fe007022791f865d0ccc9b3a0d5001e01aabb8b40e46000afb5\"\n\n[[package]]\nname = \"smallvec\"\nversion = \"1.7.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1ecab6c735a6bb4139c0caafd0cc3635748bbb3acf4550e8138122099251f309\"\n\n[[package]]\nname = \"socket2\"\nversion = \"0.4.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"5dc90fe6c7be1a323296982db1836d1ea9e47b6839496dde9a541bc496df3516\"\ndependencies = [\n \"libc\",\n \"winapi\",\n]\n\n[[package]]\nname = \"static_assertions\"\nversion = \"1.1.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a2eb9349b6444b326872e140eb1cf5e7c522154d69e7a0ffb0fb81c06b37543f\"\n\n[[package]]\nname = \"strip-ansi-escapes\"\nversion = \"0.1.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"011cbb39cf7c1f62871aea3cc46e5817b0937b49e9447370c93cacbe93a766d8\"\ndependencies = [\n \"vte\",\n]\n\n[[package]]\nname = \"strsim\"\nversion = \"0.10.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"73473c0e59e6d5812c5dfe2a064a6444949f089e20eec9a2e5506596494e4623\"\n\n[[package]]\nname = \"syn\"\nversion = \"1.0.81\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f2afee18b8beb5a596ecb4a2dce128c719b4ba399d34126b9e4396e3f9860966\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"unicode-xid\",\n]\n\n[[package]]\nname = \"tar\"\nversion = \"0.4.38\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"4b55807c0344e1e6c04d7c965f5289c39a8d94ae23ed5c0b57aabac549f871c6\"\ndependencies = [\n \"filetime\",\n \"libc\",\n]\n\n[[package]]\nname = \"tempfile\"\nversion = \"3.2.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"dac1c663cfc93810f88aed9b8941d48cabf856a1b111c29a40439018d870eb22\"\ndependencies = [\n \"cfg-if\",\n \"libc\",\n \"rand 0.8.4\",\n \"redox_syscall\",\n \"remove_dir_all\",\n \"winapi\",\n]\n\n[[package]]\nname = \"term\"\nversion = \"0.7.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"c59df8ac95d96ff9bede18eb7300b0fda5e5d8d90960e76f8e14ae765eedbf1f\"\ndependencies = [\n \"dirs-next\",\n \"rustversion\",\n \"winapi\",\n]\n\n[[package]]\nname = \"termcolor\"\nversion = \"1.1.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"2dfed899f0eb03f32ee8c6a0aabdb8a7949659e3466561fc0adf54e26d88c5f4\"\ndependencies = [\n \"winapi-util\",\n]\n\n[[package]]\nname = \"textwrap\"\nversion = \"0.15.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b1141d4d61095b28419e22cb0bbf02755f5e54e0526f97f1e3d1d160e60885fb\"\n\n[[package]]\nname = \"thiserror\"\nversion = \"1.0.30\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"854babe52e4df1653706b98fcfc05843010039b406875930a70e4d9644e5c417\"\ndependencies = [\n \"thiserror-impl\",\n]\n\n[[package]]\nname = \"thiserror-impl\"\nversion = \"1.0.30\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"aa32fd3f627f367fe16f893e2597ae3c05020f8bba2666a4e6ea73d377e5714b\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn\",\n]\n\n[[package]]\nname = \"thread_local\"\nversion = \"1.1.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8018d24e04c95ac8790716a5987d0fec4f8b27249ffa0f7d33f1369bdfb88cbd\"\ndependencies = [\n \"once_cell\",\n]\n\n[[package]]\nname = \"tinyvec\"\nversion = \"1.5.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"2c1c1d5a42b6245520c249549ec267180beaffcc0615401ac8e31853d4b6d8d2\"\ndependencies = [\n \"tinyvec_macros\",\n]\n\n[[package]]\nname = \"tinyvec_macros\"\nversion = \"0.1.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"cda74da7e1a664f795bb1f8a87ec406fb89a02522cf6e50620d016add6dbbf5c\"\n\n[[package]]\nname = \"tokio\"\nversion = \"1.14.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"70e992e41e0d2fb9f755b37446f20900f64446ef54874f40a60c78f021ac6144\"\ndependencies = [\n \"autocfg\",\n \"bytes\",\n \"libc\",\n \"memchr\",\n \"mio\",\n \"num_cpus\",\n \"once_cell\",\n \"pin-project-lite\",\n \"signal-hook-registry\",\n \"winapi\",\n]\n\n[[package]]\nname = \"tokio-stream\"\nversion = \"0.1.8\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"50145484efff8818b5ccd256697f36863f587da82cf8b409c53adf1e840798e3\"\ndependencies = [\n \"futures-core\",\n \"pin-project-lite\",\n \"tokio\",\n]\n\n[[package]]\nname = \"tokio-util\"\nversion = \"0.6.9\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"9e99e1983e5d376cd8eb4b66604d2e99e79f5bd988c3055891dcd8c9e2604cc0\"\ndependencies = [\n \"bytes\",\n \"futures-core\",\n \"futures-sink\",\n \"log\",\n \"pin-project-lite\",\n \"tokio\",\n]\n\n[[package]]\nname = \"toml\"\nversion = \"0.5.8\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a31142970826733df8241ef35dc040ef98c679ab14d7c3e54d827099b3acecaa\"\ndependencies = [\n \"serde\",\n]\n\n[[package]]\nname = \"toml_edit\"\nversion = \"0.14.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"5376256e44f2443f8896ac012507c19a012df0fe8758b55246ae51a2279db51f\"\ndependencies = [\n \"combine\",\n \"indexmap\",\n \"itertools\",\n \"kstring\",\n \"serde\",\n]\n\n[[package]]\nname = \"tower-service\"\nversion = \"0.3.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"360dfd1d6d30e05fda32ace2c8c70e9c0a9da713275777f5a4dbb8a1893930c6\"\n\n[[package]]\nname = \"typenum\"\nversion = \"1.14.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b63708a265f51345575b27fe43f9500ad611579e764c79edbc2037b1121959ec\"\n\n[[package]]\nname = \"ucd-trie\"\nversion = \"0.1.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"56dee185309b50d1f11bfedef0fe6d036842e3fb77413abef29f8f8d1c5d4c1c\"\n\n[[package]]\nname = \"unicase\"\nversion = \"2.6.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"50f37be617794602aabbeee0be4f259dc1778fabe05e2d67ee8f79326d5cb4f6\"\ndependencies = [\n \"version_check\",\n]\n\n[[package]]\nname = \"unicode-bidi\"\nversion = \"0.3.7\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1a01404663e3db436ed2746d9fefef640d868edae3cceb81c3b8d5732fda678f\"\n\n[[package]]\nname = \"unicode-normalization\"\nversion = \"0.1.19\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d54590932941a9e9266f0832deed84ebe1bf2e4c9e4a3554d393d18f5e854bf9\"\ndependencies = [\n \"tinyvec\",\n]\n\n[[package]]\nname = \"unicode-script\"\nversion = \"0.5.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"58dd944fd05f2f0b5c674917aea8a4df6af84f2d8de3fe8d988b95d28fb8fb09\"\n\n[[package]]\nname = \"unicode-segmentation\"\nversion = \"1.9.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"7e8820f5d777f6224dc4be3632222971ac30164d4a258d595640799554ebfd99\"\n\n[[package]]\nname = \"unicode-width\"\nversion = \"0.1.9\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3ed742d4ea2bd1176e236172c8429aaf54486e7ac098db29ffe6529e0ce50973\"\n\n[[package]]\nname = \"unicode-xid\"\nversion = \"0.2.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8ccb82d61f80a663efe1f787a51b16b5a51e3314d6ac365b08639f52387b33f3\"\n\n[[package]]\nname = \"unicode_categories\"\nversion = \"0.1.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"39ec24b3121d976906ece63c9daad25b85969647682eee313cb5779fdd69e14e\"\n\n[[package]]\nname = \"url\"\nversion = \"1.7.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"dd4e7c0d531266369519a4aa4f399d748bd37043b00bde1e4ff1f60a120b355a\"\ndependencies = [\n \"idna 0.1.5\",\n \"matches\",\n \"percent-encoding 1.0.1\",\n]\n\n[[package]]\nname = \"url\"\nversion = \"2.2.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a507c383b2d33b5fc35d1861e77e6b383d158b2da5e14fe51b83dfedf6fd578c\"\ndependencies = [\n \"form_urlencoded\",\n \"idna 0.2.3\",\n \"matches\",\n \"percent-encoding 2.1.0\",\n \"serde\",\n]\n\n[[package]]\nname = \"utf8parse\"\nversion = \"0.2.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"936e4b492acfd135421d8dca4b1aa80a7bfc26e702ef3af710e0752684df5372\"\n\n[[package]]\nname = \"vcpkg\"\nversion = \"0.2.15\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"accd4ea62f7bb7a82fe23066fb0957d48ef677f6eeb8215f372f52e48bb32426\"\n\n[[package]]\nname = \"version_check\"\nversion = \"0.9.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"5fecdca9a5291cc2b8dcf7dc02453fee791a280f3743cb0905f8822ae463b3fe\"\n\n[[package]]\nname = \"vte\"\nversion = \"0.10.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"6cbce692ab4ca2f1f3047fcf732430249c0e971bfdd2b234cf2c47ad93af5983\"\ndependencies = [\n \"arrayvec 0.5.2\",\n \"utf8parse\",\n \"vte_generate_state_changes\",\n]\n\n[[package]]\nname = \"vte_generate_state_changes\"\nversion = \"0.1.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d257817081c7dffcdbab24b9e62d2def62e2ff7d00b1c20062551e6cccc145ff\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n]\n\n[[package]]\nname = \"walkdir\"\nversion = \"2.3.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"808cf2735cd4b6866113f648b791c6adc5714537bc222d9347bb203386ffda56\"\ndependencies = [\n \"same-file\",\n \"winapi\",\n \"winapi-util\",\n]\n\n[[package]]\nname = \"wasi\"\nversion = \"0.9.0+wasi-snapshot-preview1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"cccddf32554fecc6acb585f82a32a72e28b48f8c4c1883ddfeeeaa96f7d8e519\"\n\n[[package]]\nname = \"wasi\"\nversion = \"0.10.2+wasi-snapshot-preview1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"fd6fbd9a79829dd1ad0cc20627bf1ed606756a7f77edff7b66b7064f9cb327c6\"\n\n[[package]]\nname = \"winapi\"\nversion = \"0.3.9\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"5c839a674fcd7a98952e593242ea400abe93992746761e38641405d28b00f419\"\ndependencies = [\n \"winapi-i686-pc-windows-gnu\",\n \"winapi-x86_64-pc-windows-gnu\",\n]\n\n[[package]]\nname = \"winapi-i686-pc-windows-gnu\"\nversion = \"0.4.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ac3b87c63620426dd9b991e5ce0329eff545bccbbb34f3be09ff6fb6ab51b7b6\"\n\n[[package]]\nname = \"winapi-util\"\nversion = \"0.1.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"70ec6ce85bb158151cae5e5c87f95a8e97d2c0c4b001223f33a334e3ce5de178\"\ndependencies = [\n \"winapi\",\n]\n\n[[package]]\nname = \"winapi-x86_64-pc-windows-gnu\"\nversion = \"0.4.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"712e227841d057c1ee1cd2fb22fa7e5a5461ae8e48fa2ca79ec42cfc1931183f\"\n\n[[package]]\nname = \"yansi-term\"\nversion = \"0.1.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"fe5c30ade05e61656247b2e334a031dfd0cc466fadef865bdcdea8d537951bf1\"\ndependencies = [\n \"winapi\",\n]\n"
        },
        {
          "name": "Cargo.toml",
          "type": "blob",
          "size": 2.4091796875,
          "content": "[package]\nname = \"rls\"\nversion = \"1.41.0\"\nedition = \"2018\"\nauthors = [\"Nick Cameron <ncameron@mozilla.com>\", \"The RLS developers\"]\ndescription = \"Rust Language Server - provides information about Rust programs to IDEs and other tools\"\nlicense = \"Apache-2.0/MIT\"\nrepository = \"https://github.com/rust-lang/rls\"\ncategories = [\"development-tools\"]\n\nbuild = \"build.rs\"\n\n[lib]\nname = \"rls\"\ndoctest = false\npath = \"rls/src/lib.rs\"\n\n[[bin]]\nname = \"rls\"\ntest = false\npath = \"rls/src/main.rs\"\n\n[dependencies]\n# FIXME: Release rls-analysis 0.18.2 to crates.io\nrls-analysis = { version = \"0.18.2\", path = \"rls-analysis\" }\nrls-data = \"0.19\"\n# FIXME: Release rls-rustc 0.6.0 to crates.io\nrls-rustc = { version = \"0.6.0\", path = \"rls-rustc\" }\nrls-span = \"0.5\"\nrls-vfs = \"0.8\"\nrls-ipc = { version = \"0.1.0\", path = \"rls-ipc\", optional = true }\n\nanyhow = \"1.0.26\"\ncargo = { git = \"https://github.com/rust-lang/cargo\", rev = \"5514f1e0e1b3650ed8a78306198e90b66b292693\" }\ncargo-util = { git = \"https://github.com/rust-lang/cargo\", rev = \"5514f1e0e1b3650ed8a78306198e90b66b292693\" }\ncargo_metadata = \"0.14\"\nclippy_lints = { git = \"https://github.com/rust-lang/rust-clippy\", version = \"0.1.60\", optional = true }\nenv_logger = \"0.9\"\nhome = \"0.5.1\"\nitertools = \"0.10\"\njsonrpc-core = \"18\"\nlsp-types = { version = \"0.60\", features = [\"proposed\"] }\nlazy_static = \"1\"\nlog = \"0.4\"\nnum_cpus = \"1\"\nracer = { path = \"racer\" }\nrand = \"0.8\"\nrayon = \"1\"\nrustc_tools_util = \"0.2\"\nrustfmt-nightly = { git = \"https://github.com/rust-lang/rustfmt\", rev = \"5fa2727ddeef534a7cd437f9e288c221a2cf0b6a\" }\nserde = \"1.0\"\nserde_json = \"1.0\"\nserde_derive = \"1.0\"\nserde_ignored = \"0.1\"\nurl = \"2\"\nwalkdir = \"2\"\nregex = \"1\"\nordslice = \"0.3\"\ncrossbeam-channel = \"0.5\"\ntoml = \"0.5\"\ntoml_edit = { version = \"0.14.3\", features = [\"easy\"] }\nheck = \"0.4\"\n\n# A noop dependency that changes in the Rust repository, it's a bit of a hack.\n# See the `src/tools/rustc-workspace-hack/README.md` file in `rust-lang/rust`\n# for more information.\nrustc-workspace-hack = \"1.0.0\"\n\n[dev-dependencies]\ndifference = \"2\"\ntempfile = \"3\"\nlsp-codec = \"0.3\"\ntokio = { version = \"1\", default-features = false, features = [\"rt\", \"time\", \"io-util\", \"process\"] }\ntokio-util = { version = \"0.6\", default-features = false, features = [\"codec\"] }\ntokio-stream = \"0.1\"\nfutures = \"0.3\"\n\n[build-dependencies]\nrustc_tools_util = \"0.2\"\n\n[features]\nclippy = [\"clippy_lints\", \"rls-rustc/clippy\"]\nipc = [\"rls-rustc/ipc\", \"rls-ipc/server\"]\ndefault = [\"ipc\"]\n"
        },
        {
          "name": "LICENSE-APACHE",
          "type": "blob",
          "size": 10.5927734375,
          "content": "                              Apache License\n                        Version 2.0, January 2004\n                     http://www.apache.org/licenses/\n\nTERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n1. Definitions.\n\n   \"License\" shall mean the terms and conditions for use, reproduction,\n   and distribution as defined by Sections 1 through 9 of this document.\n\n   \"Licensor\" shall mean the copyright owner or entity authorized by\n   the copyright owner that is granting the License.\n\n   \"Legal Entity\" shall mean the union of the acting entity and all\n   other entities that control, are controlled by, or are under common\n   control with that entity. For the purposes of this definition,\n   \"control\" means (i) the power, direct or indirect, to cause the\n   direction or management of such entity, whether by contract or\n   otherwise, or (ii) ownership of fifty percent (50%) or more of the\n   outstanding shares, or (iii) beneficial ownership of such entity.\n\n   \"You\" (or \"Your\") shall mean an individual or Legal Entity\n   exercising permissions granted by this License.\n\n   \"Source\" form shall mean the preferred form for making modifications,\n   including but not limited to software source code, documentation\n   source, and configuration files.\n\n   \"Object\" form shall mean any form resulting from mechanical\n   transformation or translation of a Source form, including but\n   not limited to compiled object code, generated documentation,\n   and conversions to other media types.\n\n   \"Work\" shall mean the work of authorship, whether in Source or\n   Object form, made available under the License, as indicated by a\n   copyright notice that is included in or attached to the work\n   (an example is provided in the Appendix below).\n\n   \"Derivative Works\" shall mean any work, whether in Source or Object\n   form, that is based on (or derived from) the Work and for which the\n   editorial revisions, annotations, elaborations, or other modifications\n   represent, as a whole, an original work of authorship. For the purposes\n   of this License, Derivative Works shall not include works that remain\n   separable from, or merely link (or bind by name) to the interfaces of,\n   the Work and Derivative Works thereof.\n\n   \"Contribution\" shall mean any work of authorship, including\n   the original version of the Work and any modifications or additions\n   to that Work or Derivative Works thereof, that is intentionally\n   submitted to Licensor for inclusion in the Work by the copyright owner\n   or by an individual or Legal Entity authorized to submit on behalf of\n   the copyright owner. For the purposes of this definition, \"submitted\"\n   means any form of electronic, verbal, or written communication sent\n   to the Licensor or its representatives, including but not limited to\n   communication on electronic mailing lists, source code control systems,\n   and issue tracking systems that are managed by, or on behalf of, the\n   Licensor for the purpose of discussing and improving the Work, but\n   excluding communication that is conspicuously marked or otherwise\n   designated in writing by the copyright owner as \"Not a Contribution.\"\n\n   \"Contributor\" shall mean Licensor and any individual or Legal Entity\n   on behalf of whom a Contribution has been received by Licensor and\n   subsequently incorporated within the Work.\n\n2. Grant of Copyright License. Subject to the terms and conditions of\n   this License, each Contributor hereby grants to You a perpetual,\n   worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n   copyright license to reproduce, prepare Derivative Works of,\n   publicly display, publicly perform, sublicense, and distribute the\n   Work and such Derivative Works in Source or Object form.\n\n3. Grant of Patent License. Subject to the terms and conditions of\n   this License, each Contributor hereby grants to You a perpetual,\n   worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n   (except as stated in this section) patent license to make, have made,\n   use, offer to sell, sell, import, and otherwise transfer the Work,\n   where such license applies only to those patent claims licensable\n   by such Contributor that are necessarily infringed by their\n   Contribution(s) alone or by combination of their Contribution(s)\n   with the Work to which such Contribution(s) was submitted. If You\n   institute patent litigation against any entity (including a\n   cross-claim or counterclaim in a lawsuit) alleging that the Work\n   or a Contribution incorporated within the Work constitutes direct\n   or contributory patent infringement, then any patent licenses\n   granted to You under this License for that Work shall terminate\n   as of the date such litigation is filed.\n\n4. Redistribution. You may reproduce and distribute copies of the\n   Work or Derivative Works thereof in any medium, with or without\n   modifications, and in Source or Object form, provided that You\n   meet the following conditions:\n\n   (a) You must give any other recipients of the Work or\n       Derivative Works a copy of this License; and\n\n   (b) You must cause any modified files to carry prominent notices\n       stating that You changed the files; and\n\n   (c) You must retain, in the Source form of any Derivative Works\n       that You distribute, all copyright, patent, trademark, and\n       attribution notices from the Source form of the Work,\n       excluding those notices that do not pertain to any part of\n       the Derivative Works; and\n\n   (d) If the Work includes a \"NOTICE\" text file as part of its\n       distribution, then any Derivative Works that You distribute must\n       include a readable copy of the attribution notices contained\n       within such NOTICE file, excluding those notices that do not\n       pertain to any part of the Derivative Works, in at least one\n       of the following places: within a NOTICE text file distributed\n       as part of the Derivative Works; within the Source form or\n       documentation, if provided along with the Derivative Works; or,\n       within a display generated by the Derivative Works, if and\n       wherever such third-party notices normally appear. The contents\n       of the NOTICE file are for informational purposes only and\n       do not modify the License. You may add Your own attribution\n       notices within Derivative Works that You distribute, alongside\n       or as an addendum to the NOTICE text from the Work, provided\n       that such additional attribution notices cannot be construed\n       as modifying the License.\n\n   You may add Your own copyright statement to Your modifications and\n   may provide additional or different license terms and conditions\n   for use, reproduction, or distribution of Your modifications, or\n   for any such Derivative Works as a whole, provided Your use,\n   reproduction, and distribution of the Work otherwise complies with\n   the conditions stated in this License.\n\n5. Submission of Contributions. Unless You explicitly state otherwise,\n   any Contribution intentionally submitted for inclusion in the Work\n   by You to the Licensor shall be under the terms and conditions of\n   this License, without any additional terms or conditions.\n   Notwithstanding the above, nothing herein shall supersede or modify\n   the terms of any separate license agreement you may have executed\n   with Licensor regarding such Contributions.\n\n6. Trademarks. This License does not grant permission to use the trade\n   names, trademarks, service marks, or product names of the Licensor,\n   except as required for reasonable and customary use in describing the\n   origin of the Work and reproducing the content of the NOTICE file.\n\n7. Disclaimer of Warranty. Unless required by applicable law or\n   agreed to in writing, Licensor provides the Work (and each\n   Contributor provides its Contributions) on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n   implied, including, without limitation, any warranties or conditions\n   of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n   PARTICULAR PURPOSE. You are solely responsible for determining the\n   appropriateness of using or redistributing the Work and assume any\n   risks associated with Your exercise of permissions under this License.\n\n8. Limitation of Liability. In no event and under no legal theory,\n   whether in tort (including negligence), contract, or otherwise,\n   unless required by applicable law (such as deliberate and grossly\n   negligent acts) or agreed to in writing, shall any Contributor be\n   liable to You for damages, including any direct, indirect, special,\n   incidental, or consequential damages of any character arising as a\n   result of this License or out of the use or inability to use the\n   Work (including but not limited to damages for loss of goodwill,\n   work stoppage, computer failure or malfunction, or any and all\n   other commercial damages or losses), even if such Contributor\n   has been advised of the possibility of such damages.\n\n9. Accepting Warranty or Additional Liability. While redistributing\n   the Work or Derivative Works thereof, You may choose to offer,\n   and charge a fee for, acceptance of support, warranty, indemnity,\n   or other liability obligations and/or rights consistent with this\n   License. However, in accepting such obligations, You may act only\n   on Your own behalf and on Your sole responsibility, not on behalf\n   of any other Contributor, and only if You agree to indemnify,\n   defend, and hold each Contributor harmless for any liability\n   incurred by, or claims asserted against, such Contributor by reason\n   of your accepting any such warranty or additional liability.\n\nEND OF TERMS AND CONDITIONS\n\nAPPENDIX: How to apply the Apache License to your work.\n\n   To apply the Apache License to your work, attach the following\n   boilerplate notice, with the fields enclosed by brackets \"[]\"\n   replaced with your own identifying information. (Don't include\n   the brackets!)  The text should be enclosed in the appropriate\n   comment syntax for the file format. We also recommend that a\n   file or class name and description of purpose be included on the\n   same \"printed page\" as the copyright notice for easier\n   identification within third-party archives.\n\nCopyright [yyyy] [name of copyright owner]\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n\thttp://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n"
        },
        {
          "name": "LICENSE-MIT",
          "type": "blob",
          "size": 1.0458984375,
          "content": "Copyright (c) 2016 The Rust Project Developers\n\nPermission is hereby granted, free of charge, to any\nperson obtaining a copy of this software and associated\ndocumentation files (the \"Software\"), to deal in the\nSoftware without restriction, including without\nlimitation the rights to use, copy, modify, merge,\npublish, distribute, sublicense, and/or sell copies of\nthe Software, and to permit persons to whom the Software\nis furnished to do so, subject to the following\nconditions:\n\nThe above copyright notice and this permission notice\nshall be included in all copies or substantial portions\nof the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF\nANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED\nTO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A\nPARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT\nSHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\nOF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR\nIN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\nDEALINGS IN THE SOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 8.169921875,
          "content": "# ⚠️ RLS is no longer supported\n\nRLS has been deprecated and is no longer supported.\nIt has been replaced with [rust-analyzer](https://rust-analyzer.github.io/).\nUsers are encouraged to uninstall RLS and follow the instructions in the\nrust-analyzer manual to install it for your editor.\n\n----\n\n# Rust Language Server (RLS)\n\nThe RLS provides a server that runs in the background, providing IDEs,\neditors, and other tools with information about Rust programs. It supports\nfunctionality such as 'goto definition', symbol search, reformatting, and code\ncompletion, and enables renaming and refactorings.\n\nA high-level overview of the architecture can be found [here](architecture.md).\n\nThe RLS gets its source data from the compiler and from\n[Racer](https://github.com/racer-rust/racer). Where possible it uses data from\nthe compiler which is precise and complete. Where it is not possible, (for example\nfor code completion and where building is too slow), it uses Racer.\n\nSince the Rust compiler does not yet support end-to-end incremental compilation,\nwe can't offer a perfect experience. However, by optimising our use of the\ncompiler and falling back to Racer, we can offer a pretty good experience for\nsmall to medium sized crates. As the RLS and compiler evolve, we'll offer a\nbetter experience for larger and larger crates.\n\nThe RLS is designed to be frontend-independent. We hope it will be widely\nadopted by different editors and IDEs. To seed development, we provide a\n[reference implementation of an RLS frontend](https://github.com/rust-lang/rls-vscode)\nfor [Visual Studio Code](https://code.visualstudio.com/).\n\n\n## Setup\n\n### Step 1: Install rustup\n\nYou can install [rustup](http://rustup.rs/) on many platforms. This will help us quickly install the\nRLS and its dependencies.\n\nIf you already have rustup installed, update to ensure you have the latest\nrustup and compiler:\n\n```\nrustup update\n```\n\n\nIf you're going to use the VSCode extension, you can skip step 2.\n\n\n### Step 2: Install the RLS\n\nOnce you have rustup installed, run the following commands:\n\n```\nrustup component add rls rust-analysis rust-src\n```\n\n### error: component 'rls' is unavailable for download (nightly)\nThe development of rustc's internals is quite fast paced. Downstream projects that rely on nightly internals, particularly clippy, can break fairly often because of this.\n\nWhen such breakages occur the nightly release will be missing rls. This is a trade-off compared with the other option of just not publishing the night's release, but does avoid blocking the rust nightly releases for people that don't need clippy/rls.\n\nTo mitigate the issues we have:\n* rustup will warn if the update is missing any components you currently have. This means you can no longer accidentally update to a no-rls release. Once rls is available again it'll update.\n* rls, clippy are available on the stable channel. Meaning most developers installing for the first time should use stable.\n* However, if you need latest nightly rls you can use https://rust-lang.github.io/rustup-components-history/ to find and install a dated nightly release ie `rustup install nightly-2018-12-06`.\n\nAlso see [#641](https://github.com/rust-lang/rls/issues/641).\n\n## Running\n\nThe RLS is built to work with many IDEs and editors, we mostly use\nVSCode to test the RLS. The easiest way is to use the [published extension](https://github.com/rust-lang/rls-vscode).\n\nYou'll know it's working when you see this in the status bar at the bottom, with\na spinning indicator:\n\n`RLS: working ◐`\n\nOnce you see:\n\n`RLS`\n\nThen you have the full set of capabilities available to you.  You can goto def,\nfind all refs, rename, goto type, etc.  Completions are also available using the\nheuristics that Racer provides.  As you type, your code will be checked and\nerror squiggles will be reported when errors occur.  You can hover these\nsquiggles to see the text of the error.\n\n## Configuration\n\nThe RLS can be configured on a per-project basis; using the Visual\nStudio Code extension this will be done via the workspace settings file\n`settings.json`.\n\nOther editors will have their own way of sending the\n[workspace/DidChangeConfiguration](https://microsoft.github.io/language-server-protocol/specification#workspace_didChangeConfiguration)\nmethod. Options are nested in the `rust` object, so your LSP client might send\n`{\"settings\":{\"rust\":{\"unstable_features\":true}}}` as parameters.\n\nEntries in this file will affect how the RLS operates and how it builds your\nproject.\n\nCurrently we accept the following options:\n\n* `unstable_features` (`bool`, defaults to `false`) enables unstable features.\n  Currently no option requires this flag.\n* `sysroot` (`String`, defaults to `\"\"`) if the given string is not empty, use\n  the given path as the sysroot for all rustc invocations instead of trying to\n  detect the sysroot automatically\n* `target` (`String`, defaults to `\"\"`) if the given string is not empty, use\n  the given target triple for all rustc invocations\n* `wait_to_build` (`u64`) overrides build debounce duration (ms). This is otherwise automatically\n  inferred by the latest build duration.\n* `all_targets` (`bool`, defaults to `true`) checks the project as if you were\n  running `cargo check --all-targets`. I.e., check all targets and integration\n  tests too\n* `crate_blacklist` (`[String]`, defaults to [this list](https://github.com/rust-dev-tools/rls-blacklist/blob/master/src/lib.rs))\n  allows to specify which crates should be skipped by the RLS.\n  By default skips libraries that are of considerable size but which the user\n  often may not be directly interested in, thus reducing the build latency.\n* `build_on_save` (`bool`, defaults to `false`) toggles whether the RLS should\n  perform continuous analysis or only after a file is saved\n* `features` (`[String]`, defaults to empty) list of Cargo features to enable\n* `all_features` (`bool`, defaults to `false`) enables all Cargo features\n* `no_default_features` (`bool`, defaults to `false`) disables default Cargo\n  features\n* `racer_completion` (`bool`, defaults to `true`) enables code completion using\n  racer (which is, at the moment, our only code completion backend). Also enables\n  hover tooltips & go-to-definition to fall back to racer when save-analysis data is unavailable.\n* `clippy_preference` (`String`, defaults to `\"opt-in\"`) controls eagerness of clippy\n  diagnostics when available. Valid values are _(case-insensitive)_:\n  - `\"off\"` Disable clippy lints.\n  - `\"on\"` Display the same diagnostics as command-line clippy invoked with no arguments (`clippy::all` unless overridden).\n  - `\"opt-in\"` Only display the lints [explicitly enabled in the code](https://github.com/rust-lang/rust-clippy#allowingdenying-lints). Start by adding `#![warn(clippy::all)]` to the root of each crate you want linted.\n\nand the following unstable options:\n\n* `build_lib` (`bool`, defaults to `false`) checks the project as if you passed\n  the `--lib` argument to cargo. Mutually exclusive with, and preferred over,\n  `build_bin`.\n* `build_bin` (`String`, defaults to `\"\"`) checks the project as if you passed\n  `-- bin <build_bin>` argument to cargo. Mutually exclusive with `build_lib`.\n* `cfg_test` (`bool`, defaults to `false`) checks the project as if you were\n  running `cargo test` rather than `cargo build`. I.e., compiles (but does not\n  run) test code.\n* `full_docs` (`bool`, defaults to `false`) instructs rustc to populate the\n  save-analysis data with full source documentation. When set to `false`, only the\n  first paragraph is recorded. This option _currently_ has little to no effect on\n  hover tooltips. The save-analysis docs are only used if source extraction fails.\n  This option has no effect on the standard library.\n* `show_hover_context` (`bool`, defaults to `true`) show additional context in\n  hover tooltips when available. This is often the local variable declaration.\n  When set to false the content is only available when holding the `ctrl` key in\n  some editors.\n\n\n## Troubleshooting\n\nFor tips on debugging and troubleshooting, see [debugging.md](debugging.md).\n\n\n## Contributing\n\nYou can look in the [contributing.md](https://github.com/rust-lang/rls/blob/master/contributing.md)\nin this repo to learn more about contributing to this project.\n\nIf you want to implement RLS support in an editor, see [clients.md](clients.md).\n"
        },
        {
          "name": "architecture.md",
          "type": "blob",
          "size": 11.8427734375,
          "content": "# Rust Language Server (RLS) - Architecture\n\n## Preface\nIn addition to the document below, an architecture overview can be found at @nrc's blog post [How the RLS works](https://www.ncameron.org/blog/how-the-rls-works/) (2017). While some bits have changed, the gist of it stays the same.\n\nHere we aim to explain in-depth how RLS obtains the underlying data to drive its indexing features as the context for the upcoming IDE planning and discussion at the 2019 Rust All-Hands.\n\nAlso the [rust-analyzer](https://github.com/rust-analyzer/rust-analyzer/blob/1d53f695f0408f47c5cce5cefa471eb0e86b0db7/docs/dev/guide.md) guide is a great resource as it covers a lot of common ground.\n\n## High-level overview\n\nAt the time of writing, at the highest level RLS compiles your package/workspace (similar to `cargo check`) and reuses resulting internal data structures of the Rust compiler to power its indexing features.\n\nWhen initialized, (unless overriden by custom build command) RLS `cargo check`s the current project and collects inter-crate [1] dependency graph along with exact crate compilation invocations, which is used later to run the compiler again itself (but in-process).\n\nIn-process compilation runs return populated internal data structures (`rls_data::Analysis`), which are further lowered and cross-referenced to expose a low-level indexing API (`rls_analysis::Analysis`) to finally be consumed by the Rust Language Server in order to answer relevant LSP [2] queries.\n\nThe main reason we execute the compilation in-process is to optimize the\nlatency - we pass the resulting data structures in-memory. For dependencies that\ndon't change often (non-primary/path dependencies) we perform the compilation out of process\nonce, where we dump and cache the resulting data into a JSON file, which only needs to be read once at the start of indexing.\n\n[1] *crate* is a single unit of compilation as compiled by `rustc`. For example, Cargo package with bin+lib has *two* crates (sometimes called *targets* by Cargo).\n\n[2] [*Language Server Protocol*](https://microsoft.github.io/language-server-protocol/specification) is a language-agnostic JSON-RPC protocol which serves to expose common language \"smartness\" operations via standardized interface, regardless of the IDE/editor used.\n\n## Information flow (in-depth)\nThe current flow is as follows:\n```\nrustc -> rustc_save_analysis -> rls_data -> rls_analysis -> rls\n```\n\n### [rustc_save_analysis](https://github.com/rust-lang/rust/tree/master/compiler/rustc_save_analysis)\n\nThe Rust compiler includes the [`rustc_save_analysis`](https://github.com/rust-lang/rust/tree/master/compiler/rustc_save_analysis) crate, which allows to dump the knowledge about the currently compiled crate. The main entry point is [`process_crate`](https://github.com/rust-lang/rust/blob/e08d5693609a659e45025b8ea4dbd9efa342fa68/compiler/rustc_save_analysis/src/lib.rs#L978), which walks the post-macro-expansion AST and [saves](https://github.com/rust-lang/rust/blob/e08d5693609a659e45025b8ea4dbd9efa342fa68/compiler/rustc_save_analysis/src/lib.rs#L1011) the collected knowledge either by [dumping to a JSON file](https://github.com/rust-lang/rust/blob/e08d5693609a659e45025b8ea4dbd9efa342fa68/compiler/rustc_save_analysis/src/lib.rs#L953-L965) or by [calling back with resulting data structure](https://github.com/rust-lang/rust/blob/e08d5693609a659e45025b8ea4dbd9efa342fa68/compiler/rustc_save_analysis/src/lib.rs#L967-L976).\n\n### [rls_data](https://github.com/rust-lang/rls/tree/master/rls-data)\n\nAs mentioned previously, the returned data structure is [`rls_data::Analysis`](https://github.com/rust-lang/rls/blob/3df74381f37617ec800537c11fb0c3130f5f3616/rls-data/src/lib.rs#L11-L26) inside the [`rls_data`](https://github.com/rust-lang/rls/tree/master/rls-data) crate:\n\n```rust\n/// Basically a type alias, we refer to nodes with HIR ids.\n/// All of the below nodes are either identified by or refer to those IDs.\ntype Id = rustc::hir::def_id::DefId;\n\npub struct Analysis {\n    ...\n    /// Contains rustc invocation producing this save-analysis data. Currently\n    /// used to support RLS in custom build system context, namely Buck).\n    pub compilation: Option<CompilationOptions>,\n    /// Path to current crate root file and current crate `GlobalCrateId`. Also\n    /// includes externally referred crates' `GlobalCrateId` and their local\n    /// `CrateNum` index as stored by rustc from this crate compilation PoV.\n    pub prelude: Option<CratePreludeData>,\n    /// Nodes of use tree forests, incl. relation, span, optional alias value\n    /// and kind (extern crate, simple use or glob).\n    pub imports: Vec<Import>,\n    /// Main data nodes. Roughly correspond to post-expansion AST nodes, incl.\n    /// span, qualified name, relations, optional signature (if a function),\n    /// docs and attributes.\n    pub defs: Vec<Def>,\n    /// Nodes for `impl` items, incl. kind (inherent, trait impl, ...), span,\n    /// children ids, docs, attributes and signature.\n    pub impls: Vec<Impl>,\n    /// Span which refers an `Id` of function/module/type/variable kind.\n    pub refs: Vec<Ref>,\n    /// Contains callsite and callee span along with macro qualified name.\n    pub macro_refs: Vec<MacroRef>,\n    /// Impl/SuperTrait relation between `Id`s with an associated span.\n    pub relations: Vec<Relation>,\n}\n```\n\n### [rls_analysis](https://github.com/rust-lang/rls/tree/master/rls-analysis)\n\nThis [crate](https://github.com/rust-lang/rls/tree/master/rls-analysis) is responsible for loading and stitching multiple of\nthe `rls_data::Analysis` data structures into a single, coherent interface.\n\nWhereas `rls_data` format can be considered an implementation detail that might\nchange, this crate aims to provide a 'stable' API.\n\nAnother reason behind that is that each of those structures contains data centric\nto the crate that was being compiled - this [lowering](https://github.com/rust-lang/rls/blob/3df74381f37617ec800537c11fb0c3130f5f3616/rls-analysis/src/lowering.rs#L161)\ncross-references the data\nand indexes it, resulting in a database spanning multiple crates that can be\nqueried like 'across known crates, find all references to a definition at a\ngiven span' or similarly.\n\nWe are capable of updating the index with new crate data. Whenever we encounter\na new crate, we [record and translate](https://github.com/rust-lang/rls/blob/3df74381f37617ec800537c11fb0c3130f5f3616/rls-analysis/src/lowering.rs#L122-L144)\nthe crate id into our database-wide crate id mapping.\n\nHowever, if data for an already lowered crate is loaded again, we simply\nreplace the definitions for a given crate and re-index.\n\nOne interesting edge case is when we lower data for crates having the same name, such\nas binary and `#[cfg(test)]`-compiled version of it. We need to ensure we lower a given definition\n[only once](https://github.com/rust-lang/rls/blob/3df74381f37617ec800537c11fb0c3130f5f3616/rls-analysis/src/lowering.rs#L271-L276)\n, even if it technically is repeated across multiple crates.\n\n### rls\n\nWith all the data lowering logic in place, all we have to do is actually fetch\nthe data - that happens inside the RLS.\n\nIn general, apart from being an LSP server, the RLS is also concerned with\nbuild orchestration, and coordination of other components, such as\n\n* Racer for autocompletion\n* Cargo for project layout detection and initial build coordination\n* internal virtual file system (VFS) for handling in-memory text buffers,\n* rls-analysis serving as our knowledge database\n* Clippy performing additional lints\n* Rustfmt driving our formatting capabilities\n\nAfter doing initial compilation with Cargo, we cache a subgraph of the inter-crate\ndependency graph along with compilation invocations and input files for the\ncrates we're interested in (inside the [primary or path-based packages](https://github.com/rust-lang/rls/blob/3df74381f37617ec800537c11fb0c3130f5f3616/rls/src/build/cargo.rs#L358-L363))\nwhich we later rerun manually.\n\nIn our case Cargo is configured to use a separate target directory\n(`$target-dir/rls`) so the analysis does not interfere with regular builds.\n\nWe hijack the Cargo build process not only to record the build orchestration\ndata mentioned above but also to inject additional compiler flags forcing the compiler\nto dump the JSON save-analysis files for each dependency. This serves as an\noptimization so that we don't have to re-check dependencies in a fresh run.\n\nBecause RLS aims to provide a truthful view of the compilation and to maintain\nparity with regular `cargo check` flow, our Cargo runs also run `build.rs` and\nproc macros initially and when needed (e.g. by modifying a file causing\n`build.rs` to be rerun).\n\n## Build scheduling\n\nOn every relevant file change we [mark files as dirty](https://github.com/rust-lang/rls/blob/3df74381f37617ec800537c11fb0c3130f5f3616/rls/src/actions/notifications.rs#L113) and schedule a normal build.\n\nWe currently discern two [build priorities](https://github.com/rust-lang/rls/blob/3df74381f37617ec800537c11fb0c3130f5f3616/rls/src/build/mod.rs#L114-L124):\n\n* Normal\n* Cargo\n\nThe latter is scheduled whenever a change happened that can impact entire\nproject. This includes:\n\n* [initial build](https://github.com/rust-lang/rls/blob/3df74381f37617ec800537c11fb0c3130f5f3616/rls/src/actions/mod.rs#L328)\n* [configuration change](https://github.com/rust-lang/rls/blob/3df74381f37617ec800537c11fb0c3130f5f3616/rls/src/actions/notifications.rs#L116)\n(can potentially build different set of packages)\n* [Cargo.toml change](https://github.com/rust-lang/rls/blob/3df74381f37617ec800537c11fb0c3130f5f3616/rls/src/actions/notifications.rs#L264)\n(ditto)\n* [build directory](https://github.com/rust-lang/rls/blob/3df74381f37617ec800537c11fb0c3130f5f3616/rls/src/build/mod.rs#L468-L472) changed\n* [modified file](https://github.com/rust-lang/rls/blob/3df74381f37617ec800537c11fb0c3130f5f3616/rls/src/build/cargo_plan.rs#L350-L354) in a package we didn't build\n* [build.rs](https://github.com/rust-lang/rls/blob/3df74381f37617ec800537c11fb0c3130f5f3616/rls/src/build/cargo_plan.rs#L359-L360) modification\n\nOn a normal build, we map from dirty files to dirty crates, sort those\ntopologically and run rustc in-process for each crate ourselves.\nWith each compilation in-process we directly\n[receive `rls_data::Analysis`](https://github.com/rust-lang/rls/blob/3df74381f37617ec800537c11fb0c3130f5f3616/rls/src/build/rustc.rs#L293-L305)\nin a callback,\n[mark corresponding files as built](https://github.com/rust-lang/rls/blob/3df74381f37617ec800537c11fb0c3130f5f3616/rls/src/build/mod.rs#L478-L490)\nand finally\n[update our analysis database](https://github.com/rust-lang/rls/blob/3df74381f37617ec800537c11fb0c3130f5f3616/rls/src/actions/post_build.rs#L180-L184)\nwith currently built data for each rebuilt crate.\n\nIf there are still files that are modified after we scheduled a build (user kept\ntyping), we don't mark it as done yet and schedule a regular build again).\nIt's worth noting that we squash builds whenever user happened to type before\na build kicked off (we buffer build requests not to waste work on something we\nmight potentially invalidate).\n\n## I/O\n\nAs mentioned previously, we run Cargo using a separate target directory so we\ndo the same kind of work that Cargo does, in addition to also saving\nJSON save-analysis files for our non-path dependencies.\n\n### VFS\n\nTo allow running analysis on unsaved in-memory text buffers, we use the\n[`rls-vfs`](https://github.com/rust-lang/rls/tree/master/rls-vfs)\ncrate to act as our virtual file system.\n\nThe Rust compiler supports using custom file providers via [`FileLoader`](https://github.com/rust-lang/rust/blame/f19851069efd6ee1fe899a469f08ad2d66e76050/compiler/rustc_span/src/source_map.rs#L98-L105) trait, which [we use](https://github.com/rust-lang/rls/blob/3df74381f37617ec800537c11fb0c3130f5f3616/rls/src/build/rustc.rs#L355-L367).\n\nIt delegates to the real file system\nwhenever there are no buffered changes to a file but serves the unsaved buffers [from the VFS](https://github.com/rust-lang/rls/blob/3df74381f37617ec800537c11fb0c3130f5f3616/rls/src/build/rustc.rs#L54) otherwise.\n"
        },
        {
          "name": "build.rs",
          "type": "blob",
          "size": 0.6044921875,
          "content": "use std::env;\nuse std::path::Path;\n\nfn main() {\n    println!(\"cargo:rerun-if-changed=build.rs\");\n    println!(\"cargo:rerun-if-env-changed=CFG_RELEASE_CHANNEL\");\n\n    println!(\n        \"cargo:rustc-env=GIT_HASH={}\",\n        rustc_tools_util::get_commit_hash().unwrap_or_default()\n    );\n    println!(\n        \"cargo:rustc-env=COMMIT_DATE={}\",\n        rustc_tools_util::get_commit_date().unwrap_or_default()\n    );\n    println!(\n        \"cargo:rustc-env=FIXTURES_DIR={}\",\n        Path::new(&env::var(\"CARGO_MANIFEST_DIR\").unwrap())\n            .join(\"tests\")\n            .join(\"fixtures\")\n            .display()\n    );\n}\n"
        },
        {
          "name": "changelog.md",
          "type": "blob",
          "size": 1.5986328125,
          "content": "# Changelog\n\n## [Unreleased]\n### Added\n- Allow to override or disable default crate blacklist via new `crate_blacklist` setting\n- Support both owned and borrowed blacklisted crate names in `rls-analysis`\n- Publicly re-export `rls_analysis::raw::Crate`\n### Changed\n- Formatting project files now only needs project to parse and expand macros (and not type-check)\n- Converted remaining crates `rls-*` to 2018 edition\n### Removed\n- Removed `use_crate_blacklist` setting in favour of `crate_blacklist`\n## [Beta]\n### Changed\n- Fix spurious tests on slow disks by clearing `CARGO_TARGET_DIR` for tests\n- Document `RUSTC_SHIM_ENV_VAR_NAME` purpose\n- Disable `clear_env_rust_log` in CLI mode\n\n### Fixed\n- Fixed passing `--file-lines` to external Rustfmt for whole-file formatting requests ([#1497](https://github.com/rust-lang/rls/pull/1497))\n- Fixed RLS when used together with Cargo pipelined build feature ([#1500](https://github.com/rust-lang/rls/pull/1500))\n\n## [1.36.0]\n\n### Changed\n- Cleaned up and converted `rls-{analysis, span}` to 2018 edition\n- Made `rls-{analysis, span}` use `serde` instead of `rustc_serialize ` by default\n- Clarified how `clippy_preference` setting works in README\n\n### Removed\n- Removed support for obsolete `rustDocument/{beginBuild,diagnostics{Begin,End}}` LSP messages\n\n### Fixed\n- Fixed destructive formatting edits due to miscalculated newlines in diffs ([#1455](https://github.com/rust-lang/rls/pull/1455))\n\n[Unreleased]: https://github.com/rust-lang/rls/compare/beta...HEAD\n[Beta]: https://github.com/rust-lang/rls/compare/1.36.0...beta\n[1.36.0]: https://github.com/rust-lang/rls/compare/1.35.0...1.36.0\n"
        },
        {
          "name": "ci",
          "type": "tree",
          "content": null
        },
        {
          "name": "clients.md",
          "type": "blob",
          "size": 5.4453125,
          "content": "# Implementing clients\n\nA short guide to implementing RLS support in your favourite editor.\n\nTypically you will need to implement an extension or plugin in whatever format\nand language your editor requires. There are two main cases - where there is\nexisting LSP support and where there is not. The former case is much easier,\nluckily many editors now support the LSP either natively or with an extension.\n\nIf there is LSP support then you can get a pretty good 'out of the box' experience with the RLS - you'll get key features like code completion and renaming. However, it is a sub-optimal user experience. Compared to full support in an editor, you miss out on:\n\n* discoverability and ease of setup\n  - no easy to install Rust extension\n  - nowhere to track bugs\n  - user has to manage the RLS (installation, update, location, etc.)\n* UX rough edges\n  - e.g., no spinner to indicate RLS is working\n* bugs\n  - there are likely bugs in both the editor's client implementation and the RLS which are not found in other use cases\n  - or mismatches in under-specified parts of the LSP\n  - testing is required to find such issues\n* extensions to the basic LSP protocol\n  - the RLS supports additional refactorings and searches as extensions to the base LSP\n\n\n## Preliminaries\n\nCheck the [tracking issue](https://github.com/rust-lang/rls/issues/87)\nto see if support already exists or is in development. If not, comment there to\nlet us know you are starting work. If you would like, open an issue dedicated to\nyour editor, if one doesn't exist already. You should glance at\n[issues with the clients label](https://github.com/rust-lang/rls/issues?q=is%3Aopen+is%3Aissue+label%3Aclients).\n\nIf there are things that can be fixed on the RLS side, please submit a PR or\nfile an issue.\n\nFind out about the editor's extension ecosystem - get in touch with the\ncommunity, find out if there is LSP support, find support channels, etc.\n\n\n## Where there is existing LSP support\n\nIf your editor has LSP support, then getting up and running is pretty easy. You\nneed a way to run the RLS and point the editor's LSP client at it. Hopefully\nthat is only a few lines of code. The next step is to ensure that the RLS gets\nre-started after a crash - the LSP client may or may not do this automatically\n(VSCode will do this five times before stopping).\n\nOnce you have this basic support in place, the hard work begins:\n\n* Implement [extensions to the protocol](https://github.com/rust-lang/rls/blob/master/contributing.md#extensions-to-the-language-server-protocol)\n* Client-side configuration.\n  - You'll need to send the `workspace/didChangeConfiguration` notification when\n    configuration changes.\n  - For the config options, see [config.rs](https://github.com/rust-lang/rls/blob/master/src/config.rs#L99-L117)\n* Check for and install the RLS\n  - you should use Rustup\n  - you should check if the RLS (`rls`) is installed, and if not, install it and the `rust-analysis` and `rust-src` components\n  - you should provide a way to update the RLS component\n* Client-side features\n  - e.g., code snippets, build tasks, syntax highlighting\n* Testing\n* Ensure integration with existing Rust features\n  - e.g., syntax highlighting\n  - ideally users should only need one extension\n* 'Marketing'\n  - because we want people to actually use the extension\n  - documentation - users need to know how to install and use the extension\n  - keep us informed about status so we can advertise it appropriately\n  - keep the RLS website updated\n  - submit the extension to the editor package manager or marketplace\n\n\n## Where there is no LSP support\n\nIf your editor has no existing LSP support, you'll need to do all the above plus\nimplement (parts of) the LSP. This is a fair amount of work, but probably not as\nbad as it sounds. The LSP is a fairly simple JSON over stdio protocol. The\ninteresting bit is tying the client end of the protocol to functionality in your\neditor.\n\n\n### Required message support\n\nThe RLS currently requires support for the following messages. Note that we\noften don't use anywhere near all the options, so even with this subset, you\ndon't need to implement everything.\n\nNotifications:\n\n* `exit`\n* `initialized`\n* `textDocument/didOpen`\n* `textDocument/didChange`\n* `textDocument/didSave`\n* `workspace/didChangeConfiguration`\n* `workspace/didChangeWatchedFiles`\n* `cancel`\n\nRequests:\n\n* `shutdown`\n* `initialize`\n* `textDocument/definition`\n* `textDocument/references`\n* `textDocument/completion`\n* `completionItem/resolve`\n* `textDocument/rename`\n* `textDocument/documentHighlight`\n* `workspace/executeCommand`\n* `textDocument/codeAction`\n* `textDocument/documentSymbol`\n* `textDocument/formatting`\n* `textDocument/rangeFormatting`\n* `textDocument/hover`\n* `workspace/symbol`\n\nFrom Server to client:\n\n* `workspace/applyEdit`\n* `client/registerCapability`\n* `client/unregisterCapability`\n\nThe RLS also uses some [custom messages](https://github.com/rust-lang/rls/blob/master/contributing.md#extensions-to-the-language-server-protocol).\n\n\n## Resources\n\n* [LSP spec](https://microsoft.github.io/language-server-protocol/specification)\n* [contributing.md](contributing.md) - overview of the RLS and how to build, test, etc.\n* [VSCode reference implementation](https://github.com/rust-lang/rls-vscode) - an example of what client support looks like\n* [Tracking issue](https://github.com/rust-lang/rls/issues/87)\n\n\n## Getting help\n\nWe're happy to help however we can. The best way to get help is either to\nleave a comment on an issue in this repo, or to ping me (nrc) in #rust-dev-tools\non IRC.\n"
        },
        {
          "name": "contributing.md",
          "type": "blob",
          "size": 14.2880859375,
          "content": "# Contributing\n\nThis document provides information for developers who want to contribute to the\nRLS or run it in a heavily customised configuration.\n\nThe RLS is open source and we'd love you to contribute to the project. Testing,\nreporting issues, writing documentation, writing tests, writing code, and\nimplementing clients are all extremely valuable.\n\nHere is the list of known [issues](https://github.com/rust-lang/rls/issues).\nThese are [good issues to start on](https://github.com/rust-lang/rls/issues?q=is%3Aissue+is%3Aopen+label%3A%22good+first+issue%22).\n\nA good resource on how RLS works can be found [here](architecture.md).\n\nWe're happy to help however we can. The best way to get help is either to\nleave a comment on an issue in this repo, or to ping us (nrc) in #rust-dev-tools\non IRC.\n\nWe'd love for existing and new tools to use the RLS. If that sounds interesting\nplease get in touch by filing an issue or on IRC.\n\nIf you want to implement RLS support in an editor, see [clients.md](clients.md).\n\n## Building\n\nNote, you don't need to build the `rls` to use it. Instead, you can install\nvia `rustup`, which is the currently preferred method. See the\n[readme](README.md) for more information.\n\n### Step 1: Install build dependencies\n\nOn Linux, you will need [cmake](https://cmake.org/), [pkg-config](https://www.freedesktop.org/wiki/Software/pkg-config/)\nand [zlib](http://zlib.net/):\n\n- On Ubuntu run: `sudo apt-get install cmake pkg-config zlib1g-dev libssl-dev`\n- On Fedora run: `sudo dnf install cmake pkgconfig zlib-devel openssl-devel`\n\nOn Windows, you will need to have [cmake](https://cmake.org/) installed.\n\n### Step 2: Clone and build the RLS\n\nSince the RLS is closely linked to the compiler and is in active development,\nyou'll need a recent nightly compiler to build it.\n\n```\ngit clone https://github.com/rust-lang/rls.git\ncd rls\ncargo build --release\n```\n\n#### If RLS couldn't be built with clippy\n\nSometimes nightly toolchain changes break the `clippy_lints` dependency.\nSince RLS depends on `clippy_lints` by default, those changes can also break RLS itself.\nIn this case, you can build RLS like this:\n\n`cargo build --no-default-features` (disabling the clippy feature)\n\nAnd sometimes git revision of `clippy` submodule in the Rust repo (https://github.com/rust-lang/rust/tree/master/src/tools) and `clippy_lints` dependency of RLS is different.\nIn this case, submit a PR here updating the `clippy_lints` dependency to the git revision pulled from the Rust tree.\n\n### Step 3: Connect the RLS to your compiler\n\nIf you're using recent versions of rustup, you will also need to make sure that\nthe compiler's dynamic libraries are available for the RLS to load. You can see\nwhere they  are using:\n\n```\nrustc --print sysroot\n```\n\nThis will show you where the compiler keeps the dynamic libs. In Windows, this\nwill be  in the `bin` directory under this path. On other platforms, it will be\nin the `lib` directory.\n\nNext, you'll make the compiler available to the RLS:\n\n#### Windows\n\nOn Windows, make sure this path (plus `bin`) is in your PATH.  For example:\n\n```\nset PATH=%PATH%;C:\\Users\\appveyor\\.multirust\\toolchains\\nightly-i686-pc-windows-gnu\\bin\n```\n\n#### Mac\n\nFor Mac, you need to set the DYLD_LIBRARY_PATH.  For example:\n\n```\nexport DYLD_LIBRARY_PATH=$(rustc --print sysroot)/lib\n```\n\n#### Linux\n\nFor Linux, this path is called LD_LIBRARY_PATH.\n\n```\nexport LD_LIBRARY_PATH=$(rustc --print sysroot)/lib\n```\n\n### Step 4: Download standard library metadata\n\nFinally, we need to get the metadata for the standard library.  This lets\nus get additional docs and types for all of `std`.  The command is currently only\nsupported on the nightly compilers, though we hope to remove this restriction in\nthe future.\n\n```\nrustup component add rust-analysis\n```\n\nIf you've never set up Racer before, you may also need to follow the\n[Racer configuration steps](https://github.com/racer-rust/racer#configuration)\n\n## Running and testing\n\nYou can run the rls by hand with:\n\n```\ncargo run\n```\n\nThough more commonly, you'll use an IDE plugin to invoke it for you\n(see [README.md](README.md) for details).\n\nWe recommend using https://github.com/rust-lang/rls-vscode in VSCode.\nYou can configure `rls-vscode` to use custom built binary by changing the\n`rust-client.rlsPath` setting to a full path to the binary you want to use.\n\nAnything the RLS writes to stderr is redirected to the output pane in\nVSCode - select \"Rust Language Server\" from the drop down box (\"Rust Language\nServer\" will only show up if there is any debugging output from RLS). Do not\nwrite to stdout, that will cause LSP errors (this means you cannot\n`println`). You can enable logging using\n[RUST_LOG](https://docs.rs/env_logger/) environment variable\n(e.g. `RUST_LOG=rls=debug code`). For adding your own, temporary logging you may\nfind the `eprintln` macro useful.\n\nTest using `cargo test`.\n\nTesting is unfortunately minimal. There is support for regression tests, but not\nmany actual tests exists yet. There is significant [work to do](https://github.com/rust-lang/rls/issues/12)\nbefore we have a comprehensive testing story.\n\n### CLI\n\nYou can run RLS in the command line mode which is useful for debugging and\ntesting, especially to narrow down a bug to either the RLS or a client.\n\nYou need to run it in the root directory of the project to be analyzed with the\n`--cli` flag, e.g., `cargo run -- --cli`. This should initialize the RLS (which\nwill take some time for large projects) and then give you a `>` prompt. During\ninitialization RLS will print out a number of progress messages to the console\n(that might hide the prompt) during which some of the commands may not work\nproperly. Look for the final message that will signal the end of the\ninitialization phase which will look something like:\n\n```\n{\"jsonrpc\":\"2.0\",\"method\":\"window/progress\",\"params\":{\"done\":true,\"id\":\"progress_0\",\"message\":null,\"percentage\":null,\"title\":\"Indexing\"}}\n```\n\nType `help` (or just `h`) to see the [commands available][CLI_COMMANDS]. Note\nthat the [positions][LSP_POSITION] in the requests and the responses are\n_zero-based_ (contrary to what you'll normally see in the IDE line numbers).\n\n[LSP_POSITION]: https://github.com/Microsoft/language-server-protocol/blob/gh-pages/specification.md#position\n\n[CLI_COMMANDS]: https://github.com/rust-lang/rls/blob/6d99a32d888a427250ff06229b6030b7dc276eac/rls/src/cmd.rs#L390-L424\n\n## Standard library support\n\nThe way it works is that when the libraries are built, the compiler can emit all\nthe data that the RLS needs. This can be read by the RLS on startup and used to\nprovide things like type on hover without having access to the source code for\nthe libraries.\n\nThe compiler gives every definition an id, and the RLS matches up these ids. In\norder for the RLS to work, the id of a identifier used in the IDE and the id of\nits declaration in a library must match exactly. Since ids are very unstable,\nthe data used by the RLS for libraries must match exactly with the crate that\nyour source code links with.\n\nYou need a version of the above data which exactly matches the standard\nlibraries you will use with your project. Rustup takes care of this for you and\nis the preferred (and easiest) method for installing this data. If you want to\nuse the RLS with a Rust compiler/libraries you have built yourself, then you'll\nneed to take some extra steps.\n\n\n### Install with rustup\n\nYou'll need to be using [rustup](https://www.rustup.rs/) to manage your Rust\ncompiler toolchains. The RLS does not yet support cross-compilation - your\ncompiler host and target must be exactly the same.\n\nYou must be using nightly (you need to be using nightly for the RLS to work at\nthe moment in any case). To install a nightly toolchain use `rustup install\nnightly`. To switch to using that nightly toolchain by default use `rustup\ndefault nightly`.\n\nAdd the RLS data component using `rustup component add rust-analysis`.\n\nEverything should now work! You may need to restart the RLS.\n\n\n### Build it yourself\n\nWhen you build Rust, run it with a `RUSTC_SAVE_ANALYSIS=api` environment variable, e.g. with:\n\n```\nRUSTC_SAVE_ANALYSIS=api ./x.py build\n```\n\nWhen the build has finished, you should have a bunch of JSON data in a directory like\n`~/rust1/build/x86_64-unknown-linux-gnu/stage1-std/x86_64-unknown-linux-gnu/release/deps/save-analysis`.\n\nYou need to copy all those files (should be around 16) into a new directory:\n`~/rust1/build/x86_64-unknown-linux-gnu/stage2/lib/rustlib/x86_64-unknown-linux-gnu/analysis`\n(assuming you are running the stage 2 compiler you just built. You'll need to\nmodify the root directory (`~/rust1` here) and the host triple\n(`x86_64-unknown-linux-gnu` in both places)).\n\n\nFinally, to run the RLS you'll need to set things up to use the newly built\ncompiler, something like:\n\n```\nexport RUSTC=\"~/rust1/build/x86_64-unknown-linux-gnu/stage2/bin/rustc\"\n```\n\nEither before you run the RLS, or before you run the IDE which will start the\nRLS.\n\n\n### Details\n\nRustup (or you, manually) will install the rls data (which is a bunch of json\nfiles) into `$SYSROOT/lib/rustlib/$TARGET_TRIPLE/analysis`, where `$SYSROOT` is\nyour Rust sysroot, this can be found using `rustc --print=sysroot`.\n`$TARGET_TRIPLE` is the triple which defines the compilation target. Since the\nRLS currently does not support cross-compilation, this must match your host\ntriple. It will look something like `x86_64-unknown-linux-gnu`.\n\nFor example, on my system RLS data is installed at:\n\n```\n/home/ncameron/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/x86_64-unknown-linux-gnu/analysis\n```\n\nThis data is only for the standard libraries, project-specific data is stored\ninside your project's target directory.\n\n\n## Implementation overview\n\nThe goal of the RLS project is to provide an awesome IDE experience *now*. That\nmeans not waiting for incremental compilation support in the compiler. However,\nRust is a somewhat complex language to analyze and providing precise and\ncomplete information about programs requires using the compiler.\n\nThe RLS has two data sources - the compiler and Racer. The compiler is always\nright, and always precise. But can sometimes be too slow for IDEs. Racer is\nnearly always fast, but can't handle some constructs (e.g., macros) or can only\nhandle them with limited precision (e.g., complex generic types).\n\nThe RLS tries to provide data using the compiler. It sets a time budget and\nqueries both the compiler and Racer. If the compiler completes within the time\nbudget, we use that data. If not, we use Racer's data.\n\nWe link both Racer and the compiler into the RLS, so we don't need to shell out\nto either (though see notes on the build process below). We also customise our\nuse of the compiler (via standard APIs) so that we can read modified files\ndirectly from memory without saving them to disk.\n\n### Building\n\nThe RLS tracks changes to files, and keeps the changed file in memory (i.e., the\nRLS does not need the IDE to save a file before providing data). These changed\nfiles are tracked by the 'Virtual File System' (which is a bit of a grandiose\nname for a pretty simple file cache at the moment, but I expect this area to\ngrow significantly in the future). The VFS is in a [separate\n-crate](https://github.com/nrc/rls-vfs).\n\nWe want to start building before the user needs information (it would be too\nslow to start a build when data is requested). However, we don't want to start a\nbuild on every keystroke (this would be too heavy on user resources). Nor is\nthere any point starting multiple builds when we would throw away the data from\nsome of them. We therefore try to queue up and coalesce builds. This is further\ndocumented in [src/build.rs](src/build.rs).\n\nWhen we do start a build, we may also need to build dependent crates. We\ntherefore do a full `cargo build`. However, we do not compile the last crate\n(the one the user is editing in the IDE). We only run Cargo to get a command\nline to build that crate. Furthermore, we cache that command line, so for most\nbuilds (where we don't need to build dependent crates, and where we can be\nreasonably sure they haven't changed since a previous build) we don't run Cargo\nat all.\n\nThe command line we got from Cargo, we chop up and feed to the in-process\ncompiler. We then collect error messages and analysis data in JSON format\n(although this is inefficient and [should\nchange](https://github.com/rust-lang/rls/issues/25)).\n\n### Analysis data\n\nFrom the compiler, we get a serialized dump of its analysis data (from name\nresolution and type checking). We combine data from all crates and the standard\nlibraries and combine this into an index for the whole project. We cross-\nreference and store this data in HashMaps and use it to look up data for the\nIDE.\n\nReading, processing, and storing the analysis data is handled by the\n[rls-analysis crate](https://github.com/nrc/rls-analysis)\n\n### Communicating with IDEs\n\nThe RLS communicates with IDEs via\nthe [Language Server protocol](https://github.com/Microsoft/language-server-protocol/blob/master/protocol.md).\n\nThe LS protocol uses JSON sent over stdin/stdout. The JSON is rather dynamic -\nwe can't make structs to easily map to many of the protocol objects. The client\nsends commands and notifications to the RLS. Commands must get a reply,\nnotifications do not. Usually the structure of the reply is dictated by the\nprotocol spec. The RLS can also send notifications to the client. So for a long\nrunning task (such as a build), the RLS will reply quickly to acknowledge the\nrequest, then send a message later with the result of the task.\n\nAssociating requests with replies is done using an id which must be handled by\nthe RLS.\n\n\n### Extensions to the Language Server Protocol\n\nThe RLS uses some custom extensions to the Language Server Protocol.\nThese are all sent from the RLS to an LSP client and are only used to\nimprove the user experience by showing progress indicators.\n\n* `window/progress`: notification, `title: \"Building\"`. Sent before build starts.\n* `window/progress`: notification with `title: \"Building\"`, repeated for each compile target.\n  * When total amount of work is not known, has field `message` set to the current crate name.\n  * When total amount of work is known, has field `percentage` set to how much of build has started.\n* `window/progress`: notification, `title: \"Building\"`, `\"done\": true`. Sent when build ends.\n* `window/progress`: notification, `title: \"Indexing\"`. Sent before analysis of build starts.\n* ... standard LSP `publishDiagnostics`\n* `window/progress`: notification, `title: \"Indexing\"`, `\"done\": true`. Sent when analysis ends.\n"
        },
        {
          "name": "debugging.md",
          "type": "blob",
          "size": 9.19921875,
          "content": "# Debugging and Troubleshooting\n\nSome tips and advice for debugging issues with the RLS. Many of these issues are\nspecific to the Visual Studio Code extension.\n\nWhere we mention settings, below, we usually mean Visual Studio Code's settings.\nThese can be set per-user and per-project, and can be found in the `File >\nPreferences > Settings` menu.\n\n\n## Common problems\n\n### Missing Rustup\n\nThe only external component that the VSCode extension requires is Rustup. It\nwill install everything else (RLS, even Rust) itself.\n\nYou can install Rustup from [rustup.rs](https://www.rustup.rs/). The extension\nshould warn you if it is not present. See the extension section below for more\nissues.\n\n\n### Missing RLS component\n\n### stable, beta toolchains\n\nYou might see an error like `toolchain 'stable-x86_64-unknown-linux-gnu' does not contain component 'rls' for target 'x86_64-unknown-linux-gnu'`,\nhowever we guarantee for stable and beta toolchains to contain the `rls` component.\nThis might be [rustup.rs issue](https://github.com/rust-lang/rustup.rs/issues/1626).\nPlese submit additional information to above issue if you'd like.\nIf you face this case, you may have to reinstall the toolchain.\n\n```\n$ rustup uninstall stable\n$ rustup install stable\n$ rustup component add rls\n```\n\n### nightly toolchain\n\nYou might see an error like `toolchain 'nightly-x86_64-unknown-linux-gnu' does not contain component 'rls' for target 'x86_64-unknown-linux-gnu'`.\n\nThis is due to a nightly release missing the RLS component. That\nhappens occasionally when the RLS cannot be built with the current compiler. To\nwork around this issue you can use an RLS from the beta or stable channels, wait\nfor a new nightly which does contain the RLS component, or use an older nightly\nwhich includes the RLS component. To do the latter follow [these\ninstructions](https://github.com/rust-lang/rls-vscode/issues/181#issue-269383659),\nthen avoid `rustup update`.\n\n### Out of date components\n\nRun `rustup update` from the command line to make sure Rust, the RLS, and\nassociated data are all up to date.\n\n\n### Project has both a library and a binary\n\nThe RLS can currently only work with one target at a time. By default, the RLS\nworks with the binary, if there is only one. You can build the library by\nsetting `rust.build_lib` to `true` (this is often most useful). If you have\nmultiple binaries, you can specify one to work with using `rust.build_bin`.\n\nAuto-detection for some of this should be in the next release.\n\n\n### Opening a Rust file outside of a project\n\nBefore opening a Rust file, the RLS needs to be aware of the whole crate. That\nmeans you need to have opened the folder containing `Cargo.toml` in VSCode\nbefore opening a Rust file (which triggers loading the Rust extension).\n\n\n### Information for paths\n\nIf you have a path such as `foo::bar::baz`, the RLS only has information for the\nlast segment of the path. That means you can only 'goto def' or get type\ninformation on hover for `baz`, not for `foo` or `bar`. This is a limitation in\nthe Rust compiler, but should be addressed at some point.\n\n\n### Tests, examples\n\nThe RLS currently only works with the main part of a crate. It does not work\nwith the tests or examples folders.\n\nThe RLS can give information about unit tests, you need to set `rust.cfg_test`\nto `true` (note that this will cause a lot of 'unused code' warnings, which is\nwhy it is off by default).\n\n\n### Stale data\n\nStale data can often trip up or slow down the RLS. It can be  worth running `cargo\nclean` and/or deleting the entire `target` directory for your crate. You'll need\nto restart the extension after doing this to get a proper rebuild.\n\nIt is also possible (but rarer) that Rustup gets into a bad place with stale\ndata. You can reinstall rustup and/or delete its cache (in `~/.rustup`) to try\nand solve this.\n\n\n### Deprecated environment variables\n\nIf you were using early versions of the RLS and extension, you might have used\n`RLS_PATH` or `RLS_ROOT` env vars. These can cause issues now, so remove them\nfrom your environment (this won't be necessary with the next release of the\nextension).\n\n\n## Extension issues\n\nWe recommend using our [VSCode extension](https://marketplace.visualstudio.com/items?itemName=rust-lang.rust).\nNote that there are other VSCode extensions.\n\nEnsure the extension and VSCode is up to date. You can check the latest version\nof VSCode on [their website](https://code.visualstudio.com/). You can see your\nversion in the `Help > About` menu item. VSCode should tell you if it or your\nextension are not up to date.\n\nThe extension must be able to run Rustup. If Rustup is installed, it must be in\nyour PATH. Note that if you run VSCode from an icon or launcher, the PATH may\nnot be the same as from a terminal. You can check this issue by running VSCode\nfrom your terminal (`code` should work).\n\n\n## Project issues\n\nIt can be useful to determine if a problem is with your environment or with a\nproject. Try running the VSCode extension with a very simple project. Use `cargo\nnew foo --bin` to create a new project called `foo`, open the `foo` folder in\nVSCode. Add a local variable and a use of it, see if the RLS gives you the type\nof the variable on hover and if you can jump to its definition.\n\nIf the above works, then you probably have project issues. If it\ndoesn't, then there is a problem with the environment.\n\nIf a project has a lot of dependencies, initial indexing might take a long time.\nIn general, initial indexing should take about the same time as a full compile of\nthe project (usually a little less time, but that depends).\n\nIf the primary crate of a project is large, it probably won't work well with the\nRLS (too slow). Exactly what 'large' means here will depend on how fast your\nmachine is and how tolerant of latency you are.\n\nProjects with Cargo workspaces will not work (for now).\n\nProjects with non-Cargo build systems will not work (you *might* be able to make\nthis work with some effort, talk to nrc on Discord).\n\nRarely, there are problems with the RLS's build model. You can try running\n`cargo check` on the command line to emulate the build model outside of the IDE.\n\n\n### Crates with large data files\n\nSome crates can have surprisingly large data files. Large data files can slow\ndown the RLS to the point of crashing (or appearing to crash). Check the json\nfiles in the `target/rls/deps/save-analysis` directory. Anything over 1mb is\nsuspicious. You can test if this is important by deleting the json file(s) and\nrestarting the extension (you'd have to do this every time you do a full build,\nfor example after `cargo clean` or updating the toolchain).\n\nIf you find such large data files, please report an issue on this repo. We can\ntry to optimise the data, or blacklist the crate.\n\n\n## Racer vs compiler issues\n\nThe RLS uses Racer for code completion, and the compiler for everything else\n(such as type on hover). If you are getting code completion options but not type\non hover, etc., then there is probably an issue with the RLS getting data from\nthe compiler. If you have type on hover, but poor code completion, then it is\nprobably a Racer issue.\n\nRacer and the rest of the RLS use different data sources for indexing the\nstandard libraries. If you have Racer problems with the standard libraries, then\nit is worth checking the `rust-source` component. If Racer is working, but other\nthings are not, it is worth checking the `rust-analysis` component (both\ncomponents are delivered by Rustup).\n\n\n## Logging\n\nWhen using VSCode extension, you can view error messages and logging in the\nOutput window, under View > Output, in the 'Rust Language Server' channel\nthat can be selected in the dropdown menu on the right of the panel.\n\nTo see more info in the logs, set `RUST_LOG=rls=debug` in your environment. You\ncan also set `RUST_LOG=rls_analysis=debug` to see logging specific to the\ndata analysis. In general, these will be printed to the standard error stream\nof the server.\n\nIf you are seeing crashes in the logs, you can get a backtrace by setting\n`RUST_BACKTRACE=1`.\n\nYou can also dump to a file by setting `rust-client.logToFile` to `true` in the\nVSCode extension. The file will be in the project root; each time you start the\nextension, you'll get a new file.\n\nYou can get more info about VSCode and the extension itself by running VSCode\nwith `--verbose`. However, I have only rarely found this to be useful. You can\nalso use VSCode's debugger to debug the extension. This can be useful if the\nextension hangs.\n\nIt might be useful to find the `rls` process and attach a debugger to it.\nHowever, with an optimised build and no debug symbols, this is not likely to be\nuseful.\n\n\n## Library issues\n\nIf you get an error like `error while loading shared libraries` while starting\nup the RLS, you should try the following:\n\nOn Linux:\n\n```\nexport LD_LIBRARY_PATH=$(rustc --print sysroot)/lib:$LD_LIBRARY_PATH\n```\n\nOn MacOS (this might only work if SIP is disabled (depending on how you run the\nRLS), you could modify the environment in the client):\n\n```\nexport DYLD_LIBRARY_PATH=$(rustc --print sysroot)/lib:$DYLD_LIBRARY_PATH\n```\n\n(This should not happen if you are using Rustup, only if building and running\nfrom source).\n\n\n## Getting more help\n\nPlease feel free to [open an issue](https://github.com/rust-lang/rls/issues/new)\nto discuss any problem.\n\nIf you use Discord, you can ask in #dev-tools on the Rust lang server. You can\nping nrc.\n"
        },
        {
          "name": "racer",
          "type": "tree",
          "content": null
        },
        {
          "name": "rls-analysis",
          "type": "tree",
          "content": null
        },
        {
          "name": "rls-data",
          "type": "tree",
          "content": null
        },
        {
          "name": "rls-ipc",
          "type": "tree",
          "content": null
        },
        {
          "name": "rls-rustc",
          "type": "tree",
          "content": null
        },
        {
          "name": "rls-span",
          "type": "tree",
          "content": null
        },
        {
          "name": "rls-vfs",
          "type": "tree",
          "content": null
        },
        {
          "name": "rls",
          "type": "tree",
          "content": null
        },
        {
          "name": "rust-toolchain",
          "type": "blob",
          "size": 0.1015625,
          "content": "[toolchain]\nchannel = \"nightly-2022-06-06\"\ncomponents = [\"rust-src\", \"rustc-dev\", \"llvm-tools-preview\"]\n"
        },
        {
          "name": "rustfmt.toml",
          "type": "blob",
          "size": 0.0595703125,
          "content": "use_field_init_shorthand = true\nuse_small_heuristics = \"Max\"\n"
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}