{
  "metadata": {
    "timestamp": 1736709048187,
    "page": 152,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjE2MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "koute/stdweb",
      "stars": 3449,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.0751953125,
          "content": "target\nCargo.lock\nnode_modules\n\n.cache\nexamples/hasher-parcel/dist\n*.swp\nrls\n"
        },
        {
          "name": ".travis.yml",
          "type": "blob",
          "size": 0.634765625,
          "content": "language: rust\n\ndist: trusty\nsudo: false\n\ncustom:\n  test: &test\n    stage: test\n    cache:\n      cargo: true\n      directories:\n        - /home/travis/.local/share/cargo-web/emscripten\n    addons:\n      chrome: stable\n    script:\n      - nvm install 9\n      - ./ci/install_cargo_web.sh\n      - ./ci/install_wasm_bindgen.sh\n      - ./ci/install_wasm_pack.sh\n      - ./ci/run_tests.sh\n\njobs:\n  include:\n    - <<: *test\n      os: linux\n      rust: nightly\n    - <<: *test\n      os: linux\n      rust: stable\n    - <<: *test\n      os: linux\n      rust: beta\n    - <<: *test\n      os: linux\n      rust: 1.33.0\n      env: SKIP_RUNTIME_COMPATIBILITY_CHECK=1\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 2.24609375,
          "content": "Unless you explicitly state otherwise, any contribution intentionally submitted\nfor inclusion in the work by you, as defined in the Apache-2.0 license, shall be\ndual licensed as above, without any additional terms or conditions.\n\n# Contributing to Web APIs\n\n1. **When implementing properties and methods, follow the HTML spec**\n\n    * A helpful resource for translating types from the HTML spec to Rust can be found in the `TypedArray objects` table [here](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray#TypedArray_objects)\n\n    * Try to stay as close as possible to the original JS name while maintaining Rust naming conventions\n\n2. **You can run `stdweb`'s tests with `cargo web test --features web_test`**\n    \n     This will run them under headless Chromium\n\n3. **For concrete Javascript types, define a struct as an `instance_of` the concrete Js type**\n\n    eg:\n    ```rust\n    #[derive(Clone, Debug, Eq, PartialEq, ReferenceType)]\n    #[reference(instance_of = \"CanvasGradient\")]\n    pub struct CanvasGradient(Reference);\n    ```\n\n4. **Make sure to document the struct according to the documentation in MDN and provide a link**\n\n    eg:\n    ```rust\n    /// The CanvasGradient struct represents an opaque object describing a gradient. \n    /// It is returned by the methods CanvasRenderingContext2D.createLinearGradient() or \n    /// CanvasRenderingContext2D.createRadialGradient().\n    /// \n    /// [(JavaScript docs)](https://developer.mozilla.org/en-US/docs/Web/API/CanvasGradient)\n    ```\n\n    Remember these are Rust docs so certain keywords such as `DOMString` and `Interface` need to be \"translated\" into Rust equivalents\n\n    eg: \n\n        `DOMString` -> `String`/`Enum` (whichever is more appropriate)\n        `Interface` -> `trait`\n        \n    Also add a comment linking the actual HTML spec for that particular object\n\n    eg:\n\n    `// https://html.spec.whatwg.org/#canvasgradient`\n\n\n5. **For functions that can't be overloaded properly with traits, define multiple functions with a suffix to specify their use**\n    \n     Try to find one \"general\" or \"basic\" function that can take the original non-suffixed name\n\n6. **You can export structs and enums by adding them to [lib.rs](https://github.com/koute/stdweb/blob/master/src/lib.rs)**\n"
        },
        {
          "name": "Cargo.toml",
          "type": "blob",
          "size": 1.9873046875,
          "content": "[package]\nname = \"stdweb\"\nversion = \"0.4.20\"\nauthors = [\"Jan Bujak <j@exia.io>\"]\nrepository = \"https://github.com/koute/stdweb\"\nhomepage = \"https://github.com/koute/stdweb\"\ndocumentation = \"https://docs.rs/stdweb/*/stdweb/\"\nlicense = \"MIT/Apache-2.0\"\nreadme = \"README.md\"\nkeywords = [\"web\", \"asmjs\", \"webasm\", \"javascript\"]\ncategories = [\"api-bindings\", \"gui\", \"web-programming\"]\ndescription = \"A standard library for the client-side Web\"\n\nbuild = \"build.rs\"\n\n[dependencies]\ndiscard = \"1.0.3\"\nserde = { version = \"1\", optional = true }\nserde_json = { version = \"1\", optional = true }\nfutures-core-preview = { version = \"0.3.0-alpha.15\", optional = true }\nfutures-channel-preview = { version = \"0.3.0-alpha.15\", optional = true }\nfutures-util-preview = { version = \"0.3.0-alpha.15\", optional = true }\nfutures-executor-preview = { version = \"0.3.0-alpha.15\", optional = true }\n\nstdweb-derive = { version = \"= 0.5.3\", path = \"stdweb-derive\" }\nstdweb-internal-macros = { version = \"= 0.2.9\", path = \"stdweb-internal-macros\" }\nstdweb-internal-runtime = { version = \"0.1\", path = \"stdweb-internal-runtime\" }\n\n[target.'cfg(all(target_arch = \"wasm32\", target_vendor = \"unknown\", target_os = \"unknown\", not(cargo_web)))'.dependencies]\nwasm-bindgen = { version = \"0.2\" }\n\n[dev-dependencies]\nserde_json = \"1\"\nserde_derive = \"1\"\n\n[target.'cfg(all(target_arch = \"wasm32\", target_vendor = \"unknown\", target_os = \"unknown\", not(cargo_web)))'.dev-dependencies]\nwasm-bindgen-test = \"0.2\"\nstdweb-internal-test-macro = { version = \"0.1\", path = \"stdweb-internal-test-macro\" }\n\n[build-dependencies]\nrustc_version = \"0.2\"\n\n[features]\ndefault = [\"serde\", \"serde_json\"]\nnightly = []\nweb_test = []\nfutures-support = [\"futures-core-preview\", \"futures-channel-preview\", \"futures-util-preview\", \"futures-executor-preview\"]\nexperimental_features_which_may_break_on_minor_version_bumps = [\"futures-support\"]\n\"docs-rs\" = []\n\n[package.metadata.docs.rs]\nfeatures = [\"serde\", \"serde_json\", \"futures-support\", \"docs-rs\"]\nall-features = false\nno-default-features = true\n"
        },
        {
          "name": "LICENSE-APACHE",
          "type": "blob",
          "size": 10.5751953125,
          "content": "                              Apache License\n                        Version 2.0, January 2004\n                     http://www.apache.org/licenses/\n\nTERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n1. Definitions.\n\n   \"License\" shall mean the terms and conditions for use, reproduction,\n   and distribution as defined by Sections 1 through 9 of this document.\n\n   \"Licensor\" shall mean the copyright owner or entity authorized by\n   the copyright owner that is granting the License.\n\n   \"Legal Entity\" shall mean the union of the acting entity and all\n   other entities that control, are controlled by, or are under common\n   control with that entity. For the purposes of this definition,\n   \"control\" means (i) the power, direct or indirect, to cause the\n   direction or management of such entity, whether by contract or\n   otherwise, or (ii) ownership of fifty percent (50%) or more of the\n   outstanding shares, or (iii) beneficial ownership of such entity.\n\n   \"You\" (or \"Your\") shall mean an individual or Legal Entity\n   exercising permissions granted by this License.\n\n   \"Source\" form shall mean the preferred form for making modifications,\n   including but not limited to software source code, documentation\n   source, and configuration files.\n\n   \"Object\" form shall mean any form resulting from mechanical\n   transformation or translation of a Source form, including but\n   not limited to compiled object code, generated documentation,\n   and conversions to other media types.\n\n   \"Work\" shall mean the work of authorship, whether in Source or\n   Object form, made available under the License, as indicated by a\n   copyright notice that is included in or attached to the work\n   (an example is provided in the Appendix below).\n\n   \"Derivative Works\" shall mean any work, whether in Source or Object\n   form, that is based on (or derived from) the Work and for which the\n   editorial revisions, annotations, elaborations, or other modifications\n   represent, as a whole, an original work of authorship. For the purposes\n   of this License, Derivative Works shall not include works that remain\n   separable from, or merely link (or bind by name) to the interfaces of,\n   the Work and Derivative Works thereof.\n\n   \"Contribution\" shall mean any work of authorship, including\n   the original version of the Work and any modifications or additions\n   to that Work or Derivative Works thereof, that is intentionally\n   submitted to Licensor for inclusion in the Work by the copyright owner\n   or by an individual or Legal Entity authorized to submit on behalf of\n   the copyright owner. For the purposes of this definition, \"submitted\"\n   means any form of electronic, verbal, or written communication sent\n   to the Licensor or its representatives, including but not limited to\n   communication on electronic mailing lists, source code control systems,\n   and issue tracking systems that are managed by, or on behalf of, the\n   Licensor for the purpose of discussing and improving the Work, but\n   excluding communication that is conspicuously marked or otherwise\n   designated in writing by the copyright owner as \"Not a Contribution.\"\n\n   \"Contributor\" shall mean Licensor and any individual or Legal Entity\n   on behalf of whom a Contribution has been received by Licensor and\n   subsequently incorporated within the Work.\n\n2. Grant of Copyright License. Subject to the terms and conditions of\n   this License, each Contributor hereby grants to You a perpetual,\n   worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n   copyright license to reproduce, prepare Derivative Works of,\n   publicly display, publicly perform, sublicense, and distribute the\n   Work and such Derivative Works in Source or Object form.\n\n3. Grant of Patent License. Subject to the terms and conditions of\n   this License, each Contributor hereby grants to You a perpetual,\n   worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n   (except as stated in this section) patent license to make, have made,\n   use, offer to sell, sell, import, and otherwise transfer the Work,\n   where such license applies only to those patent claims licensable\n   by such Contributor that are necessarily infringed by their\n   Contribution(s) alone or by combination of their Contribution(s)\n   with the Work to which such Contribution(s) was submitted. If You\n   institute patent litigation against any entity (including a\n   cross-claim or counterclaim in a lawsuit) alleging that the Work\n   or a Contribution incorporated within the Work constitutes direct\n   or contributory patent infringement, then any patent licenses\n   granted to You under this License for that Work shall terminate\n   as of the date such litigation is filed.\n\n4. Redistribution. You may reproduce and distribute copies of the\n   Work or Derivative Works thereof in any medium, with or without\n   modifications, and in Source or Object form, provided that You\n   meet the following conditions:\n\n   (a) You must give any other recipients of the Work or\n       Derivative Works a copy of this License; and\n\n   (b) You must cause any modified files to carry prominent notices\n       stating that You changed the files; and\n\n   (c) You must retain, in the Source form of any Derivative Works\n       that You distribute, all copyright, patent, trademark, and\n       attribution notices from the Source form of the Work,\n       excluding those notices that do not pertain to any part of\n       the Derivative Works; and\n\n   (d) If the Work includes a \"NOTICE\" text file as part of its\n       distribution, then any Derivative Works that You distribute must\n       include a readable copy of the attribution notices contained\n       within such NOTICE file, excluding those notices that do not\n       pertain to any part of the Derivative Works, in at least one\n       of the following places: within a NOTICE text file distributed\n       as part of the Derivative Works; within the Source form or\n       documentation, if provided along with the Derivative Works; or,\n       within a display generated by the Derivative Works, if and\n       wherever such third-party notices normally appear. The contents\n       of the NOTICE file are for informational purposes only and\n       do not modify the License. You may add Your own attribution\n       notices within Derivative Works that You distribute, alongside\n       or as an addendum to the NOTICE text from the Work, provided\n       that such additional attribution notices cannot be construed\n       as modifying the License.\n\n   You may add Your own copyright statement to Your modifications and\n   may provide additional or different license terms and conditions\n   for use, reproduction, or distribution of Your modifications, or\n   for any such Derivative Works as a whole, provided Your use,\n   reproduction, and distribution of the Work otherwise complies with\n   the conditions stated in this License.\n\n5. Submission of Contributions. Unless You explicitly state otherwise,\n   any Contribution intentionally submitted for inclusion in the Work\n   by You to the Licensor shall be under the terms and conditions of\n   this License, without any additional terms or conditions.\n   Notwithstanding the above, nothing herein shall supersede or modify\n   the terms of any separate license agreement you may have executed\n   with Licensor regarding such Contributions.\n\n6. Trademarks. This License does not grant permission to use the trade\n   names, trademarks, service marks, or product names of the Licensor,\n   except as required for reasonable and customary use in describing the\n   origin of the Work and reproducing the content of the NOTICE file.\n\n7. Disclaimer of Warranty. Unless required by applicable law or\n   agreed to in writing, Licensor provides the Work (and each\n   Contributor provides its Contributions) on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n   implied, including, without limitation, any warranties or conditions\n   of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n   PARTICULAR PURPOSE. You are solely responsible for determining the\n   appropriateness of using or redistributing the Work and assume any\n   risks associated with Your exercise of permissions under this License.\n\n8. Limitation of Liability. In no event and under no legal theory,\n   whether in tort (including negligence), contract, or otherwise,\n   unless required by applicable law (such as deliberate and grossly\n   negligent acts) or agreed to in writing, shall any Contributor be\n   liable to You for damages, including any direct, indirect, special,\n   incidental, or consequential damages of any character arising as a\n   result of this License or out of the use or inability to use the\n   Work (including but not limited to damages for loss of goodwill,\n   work stoppage, computer failure or malfunction, or any and all\n   other commercial damages or losses), even if such Contributor\n   has been advised of the possibility of such damages.\n\n9. Accepting Warranty or Additional Liability. While redistributing\n   the Work or Derivative Works thereof, You may choose to offer,\n   and charge a fee for, acceptance of support, warranty, indemnity,\n   or other liability obligations and/or rights consistent with this\n   License. However, in accepting such obligations, You may act only\n   on Your own behalf and on Your sole responsibility, not on behalf\n   of any other Contributor, and only if You agree to indemnify,\n   defend, and hold each Contributor harmless for any liability\n   incurred by, or claims asserted against, such Contributor by reason\n   of your accepting any such warranty or additional liability.\n\nEND OF TERMS AND CONDITIONS\n\nAPPENDIX: How to apply the Apache License to your work.\n\n   To apply the Apache License to your work, attach the following\n   boilerplate notice, with the fields enclosed by brackets \"[]\"\n   replaced with your own identifying information. (Don't include\n   the brackets!)  The text should be enclosed in the appropriate\n   comment syntax for the file format. We also recommend that a\n   file or class name and description of purpose be included on the\n   same \"printed page\" as the copyright notice for easier\n   identification within third-party archives.\n\nCopyright 2017 Jan Bujak\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n\thttp://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n"
        },
        {
          "name": "LICENSE-MIT",
          "type": "blob",
          "size": 1.0283203125,
          "content": "Copyright (c) 2017 Jan Bujak\n\nPermission is hereby granted, free of charge, to any\nperson obtaining a copy of this software and associated\ndocumentation files (the \"Software\"), to deal in the\nSoftware without restriction, including without\nlimitation the rights to use, copy, modify, merge,\npublish, distribute, sublicense, and/or sell copies of\nthe Software, and to permit persons to whom the Software\nis furnished to do so, subject to the following\nconditions:\n\nThe above copyright notice and this permission notice\nshall be included in all copies or substantial portions\nof the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF\nANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED\nTO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A\nPARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT\nSHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\nOF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR\nIN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\nDEALINGS IN THE SOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 20.642578125,
          "content": "<p align=\"center\">\n    <img src=\"info/logo.png\">\n</p>\n\n[![Build Status](https://api.travis-ci.org/koute/stdweb.svg)](https://travis-ci.org/koute/stdweb)\n[![Join the chat at https://gitter.im/stdweb-rs/stdweb](https://badges.gitter.im/Join%20Chat.svg)](https://gitter.im/stdweb-rs/stdweb?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)\n\n# A standard library for the client-side Web\n\n[![Documentation](https://docs.rs/stdweb/badge.svg)](https://docs.rs/stdweb/*/stdweb/)\n\nThe goal of this crate is to provide Rust bindings to the Web APIs and to allow\na high degree of interoperability between Rust and JavaScript.\n\n## Donate\n\n[![Become a patron](https://koute.github.io/img/become_a_patron_button.png)](https://www.patreon.com/koute)\n\n## Patrons\n\nThis software was brought to you thanks to these wonderful people:\n  * Embark Studios\n  * Joe Narvaez\n  * Eduard Knyshov\n  * Anselm Eickhoff\n  * Johan Andersson\n  * Stephen Sugden\n  * is8ac\n\nThank you!\n\n## Examples\n\nYou can directly embed JavaScript code into Rust:\n\n```rust\nlet message = \"Hello, 世界!\";\nlet result = js! {\n    alert( @{message} );\n    return 2 + 2 * 2;\n};\n\nprintln!( \"2 + 2 * 2 = {:?}\", result );\n```\n\nClosures are also supported:\n\n```rust\nlet print_hello = |name: String| {\n    println!( \"Hello, {}!\", name );\n};\n\njs! {\n    var print_hello = @{print_hello};\n    print_hello( \"Bob\" );\n    print_hello.drop(); // Necessary to clean up the closure on Rust's side.\n}\n```\n\nYou can also pass arbitrary structures thanks to [serde]:\n\n```rust\n#[derive(Serialize)]\nstruct Person {\n    name: String,\n    age: i32\n}\n\njs_serializable!( Person );\n\njs! {\n    var person = @{person};\n    console.log( person.name + \" is \" + person.age + \" years old.\" );\n};\n```\n\n[serde]: https://serde.rs/\n\nThis crate also exposes a number of Web APIs, for example:\n\n```rust\nlet button = document().query_selector( \"#hide-button\" ).unwrap().unwrap();\nbutton.add_event_listener( move |_: ClickEvent| {\n    for anchor in document().query_selector_all( \"#main a\" ) {\n        js!( @{anchor}.style = \"display: none;\"; );\n    }\n});\n```\n\nExposing Rust functions to JavaScript is supported too:\n\n```rust\n#[js_export]\nfn hash( string: String ) -> String {\n    let mut hasher = Sha1::new();\n    hasher.update( string.as_bytes() );\n    hasher.digest().to_string()\n}\n```\n\nThen you can do this from Node.js:\n\n```js\nvar hasher = require( \"hasher.js\" ); // Where `hasher.js` is generated from Rust code.\nconsole.log( hasher.hash( \"Hello world!\" ) );\n```\n\nOr you can take the same `.js` file and use it in a web browser:\n\n```html\n<script src=\"hasher.js\"></script>\n<script>\n    Rust.hasher.then( function( hasher ) {\n        console.log( hasher.hash( \"Hello world!\" ) );\n    });\n</script>\n```\n\nIf you're using [Parcel] you can also use our [experimental Parcel plugin];\nfirst do this in your existing Parcel project:\n\n    $ npm install --save parcel-plugin-cargo-web\n\nAnd then simply:\n\n```js\nimport hasher from \"./hasher/Cargo.toml\";\nconsole.log( hasher.hash( \"Hello world!\" ) );\n```\n\n[Parcel]: https://parceljs.org/\n[experimental Parcel plugin]: https://github.com/koute/parcel-plugin-cargo-web\n\n## Design goals\n\n  * Expose a full suite of Web APIs as exposed by web browsers.\n  * Try to follow the original JavaScript conventions and structure as much as possible,\n    except in cases where doing otherwise results in a clearly superior design.\n  * Be a building block from which higher level frameworks and libraries\n    can be built.\n  * Make it convenient and easy to embed JavaScript code directly into Rust\n    and to marshal data between the two.\n  * Integrate with the wider Rust ecosystem, e.g. support marshaling of structs\n    which implement serde's Serializable.\n  * Put Rust in the driver's seat where a non-trivial Web application can be\n    written without touching JavaScript at all.\n  * Allow Rust to take part in the upcoming WebAssembly (re)volution.\n  * Make it possible to trivially create standalone libraries which are\n    easily callable from JavaScript.\n\n## Getting started\n\nTake a look at some of the examples:\n\n  * `examples/minimal` - a totally minimal example which calls [alert]\n  * `examples/todomvc` - a naively implemented [TodoMVC] application; shows how to call into the DOM\n  * `examples/hasher` - shows how to export Rust functions to JavaScript and how to call them from\n                        a vanilla web browser environment or from Nodejs\n  * `examples/hasher-parcel` - shows how to import and call exported Rust functions in a [Parcel] project\n  * [`pinky-web`] - an NES emulator; you can play with the [precompiled version here](http://koute.github.io/pinky-web/)\n\n[The API documentation](https://docs.rs/stdweb/*/stdweb/) is also available for you to look at.\n\n[alert]: https://developer.mozilla.org/en-US/docs/Web/API/Window/alert\n[TodoMVC]: http://todomvc.com/\n[`pinky-web`]: https://github.com/koute/pinky/tree/master/pinky-web\n\n## Running the examples\n\n1. Install [cargo-web]:\n\n       $ cargo install -f cargo-web\n\n3. Go into `examples/todomvc` and start the example using one of these commands:\n\n    * Compile to [WebAssembly] using Rust's native WebAssembly backend:\n\n          $ cargo web start --target=wasm32-unknown-unknown\n\n    * Compile to [asm.js] using Emscripten:\n\n          $ cargo web start --target=asmjs-unknown-emscripten\n\n    * Compile to [WebAssembly] using Emscripten:\n\n          $ cargo web start --target=wasm32-unknown-emscripten\n\n4. Visit `http://localhost:8000` with your browser.\n\nFor the `*-emscripten` targets `cargo-web` is not necessary, however\nthe native `wasm32-unknown-unknown` which doesn't need Emscripten\n**requires** `cargo-web` to work!\n\n[cargo-web]: https://github.com/koute/cargo-web\n[asm.js]: https://en.wikipedia.org/wiki/Asm.js\n[WebAssembly]: https://en.wikipedia.org/wiki/WebAssembly\n\n## Changelog\n   * `stdweb 0.4.20`\n      * Compatibility with the newest `wasm-bindgen`\n      * New events:\n         * `FullscreenChangeEvent`\n   * `stdweb 0.4.19`\n      * New methods:\n         * `Document::fullscreen_enabled`\n         * `Document::fullscreen_element`\n         * `InputElement::selection_start`\n         * `InputElement::selection_end`\n         * `InputElement::set_selection_start`\n         * `InputElement::set_selection_end`\n         * `Object::to_iter`\n         * `Window::confirm`\n      * `&Array`s can now be converted to `Vec`s through `TryFrom`\n      * The runtime should now be compatible with newer versions of Emscripten\n      * The unstable `futures`-related APIs were updated to work with the latest nightlies\n      * The `syn` dependency was updated to version 1\n   * `stdweb 0.4.18`\n      * The `js!` macro can now be imported with an `use`\n      * New events:\n         * `BeforeUnloadEvent`\n         * `UnloadEvent`\n      * New methods:\n         * `IBlob::slice`\n         * `IBlob::slice_with_content_type`\n         * `IWindowOrWorker::set_clearable_timeout`\n   * `stdweb 0.4.17`\n      * The unstable `futures`-related APIs were updated to work with the latest nightlies\n   * `stdweb 0.4.16`\n      * Initial `wasm-bindgen` compatibility; you can now use `stdweb` in projects\n        using `wasm-bindgen`\n      * Minimum supported Rust version is now 1.33.0\n      * Minimum required `cargo-web` version is now 0.6.24\n   * `stdweb 0.4.15`\n      * The unstable `futures`-related APIs were updated to work with the latest nightlies\n      * New types:\n         * `FormData`\n         * `FormDataEntry`\n         * `MouseButtonsState`\n      * New methods:\n         * `Blob::new`\n   * `stdweb 0.4.14`\n      * The `js!` macro now generates slightly more efficient code\n        if you're not returning anything from your JS snippet. This makes\n        it unnecessary to add the `@(no_return)` annotation in the vast\n        majority of cases.\n      * New types:\n         * `File`\n   * `stdweb 0.4.13`\n      * Fixed the procedural `js!` macro's whitespace handling\n      * New types:\n         * `ITouchEvent`\n         * `Touch`\n         * `TouchType`\n      * New events:\n         * `TouchEvent`\n         * `TouchMove`\n         * `TouchLeave`\n         * `TouchEnter`\n         * `TouchEnd`\n         * `TouchCancel`\n         * `TouchStart`\n      * New methods:\n         * `XmlHttpRequest::set_response_type`\n   * `stdweb 0.4.12`\n      * Improved diagnostics when trying to compile for the `wasm32-unknown-unknown` target without `cargo-web`\n   * `stdweb 0.4.11`\n      * The minimum required Rust version is now 1.30.1\n      * The minimum required `cargo-web` version is now 0.6.22\n      * `wasm32-unknown-unknown` is now officially supported on stable Rust\n      * Debug builds on `wasm32-unknown-unknown` are now supported\n      * The `js!` macro is now partially implemented using a procedural macro\n      * String decoding/encoding is now a lot faster due to the use of native codec APIs\n      * New methods:\n        * `Document::import_node`\n        * `IElement::slot`\n        * `IElement::attach_shadow`\n        * `IElement::shadow_root`\n      * New types:\n        * `ISlotable`\n        * `ShadowRoot`\n        * `ShadowRootMode`\n        * `TemplateElement`\n        * `SlotElement`\n      * New events:\n        * `SlotChangeEvent`\n      * `IParentNode::query_selector` and `IParentNode::query_selector_all` now return a proper error type\n   * `stdweb 0.4.10`, `stdweb-derive 0.5.1`\n      * New methods:\n        * `IElement::insert_adjacent_html`\n        * `IElement::insert_html_before`\n        * `IElement::insert_html_after`\n        * `IElement::prepend_html`\n        * `IElement::append_html`\n        * `IElement::namespace_uri`\n        * `IElement::closest`\n        * `Document::create_element_ns`\n        * `Window::get_selection`\n      * New types:\n        * `AbortError`\n        * `SelectionType`\n        * `Selection`\n        * `Range`\n      * The error messages for failed type conversions are now improved\n      * The error type of failed conversions (when using `.try_into()`/`.try_from()`) is now convertible into a `TypeError`\n      * Aggregate error types (like, e.g. `DrawImageError`) are now serializable through the `js!` macro\n      * `TypeError` is now fixed (it was incorrectly treated as a `DOMException`)\n      * `Number` can now be converted into `f64` with `.into()`/`.from()`\n      * Added `Mut`, which is a new wrapper type for safely passing `FnMut` closures into the `js!` macro;\n        it is optional for now, however the usage of this wrapper type **will be mandatory** in the future!\n      * `FnMut` closures cannot be called recursively anymore\n      * `#[derive(ReferenceType)]` now supports a limited subset of generic types\n      * Asynchronous unit tests are now supported with a new `#[async_test]` attribute macro (nightly only)\n      * Updated to `futures 0.3` (nightly only)\n   * `stdweb 0.4.9`, `stdweb-derive 0.5.0`\n      * Performance improvements; serialization through serde is now twice as fast\n      * New events:\n        * `ScrollEvent`\n        * `DragRelatedEvent`\n        * `DragEvent`\n        * `DragStartEvent`\n        * `DragEndEvent`\n        * `DragEnterEvent`\n        * `DragLeaveEvent`\n        * `DragOverEvent`\n        * `DragExitEvent`\n        * `DragDropEvent`\n      * New types:\n        * `DataTransfer`\n        * `EffectAllowed`\n        * `DropEffect`\n        * `DataTransferItemList`\n        * `DataTransferItem`\n        * `DataTransferItemKind`\n        * `IDragEvent`\n      * `Value`s can now be converted to `Option< Serde< T > >` with `try_into`\n      * Deserialization of numbers through serde now works in the majority of cases\n        allowing types other than `i32` and `f64` to be used\n      * All of the events are now more strongly-typed\n          * Previously in was possible to deserialize e.g. a `keyup` event\n            as a `KeyDownEvent` since only the event's JS type was checked\n            and both `keyup` and `keydown` share the same JS type (`KeyboardEvent`).\n            From now on the `type` field of the event is also checked, so\n            such conversions are not allowed anymore.\n   * `0.4.8`\n      * Fixed compilation on the newest nightly when targeting `wasm32-unknown-unknown`\n      * New events:\n        * `PointerLockChangeEvent`\n        * `PointerLockErrorEvent`\n        * `MouseWheelEvent`\n      * New types:\n        * `MouseWheelDeltaMode`\n        * `XhrResponseType`\n      * New methods:\n        * `XmlHttpRequest::raw_response`\n        * `Window::device_pixel_ratio`\n        * `Document::pointer_lock_element`\n        * `Document::exit_pointer_lock`\n   * `0.4.7`\n      * New events:\n         * `AuxClickEvent`\n         * `MouseEnterEvent`\n         * `MouseLeaveEvent`\n         * `ContextMenuEvent`\n         * `SelectionChangeEvent`\n      * New types:\n        * `FileList`\n        * `FileReaderReadyState`\n      * Implement gamepad APIs:\n         * `Gamepad`\n         * `GamepadButton`\n         * `GamepadButtonMapping`\n         * `GamepadEvent`\n      * Fixed `CanvasRenderingContext2d::clear_rect`\n      * Fixed a leak when creating `TypedArray`s from\n        `Vec`s and `ArrayBuffer`s.\n   * `0.4.6`\n      * Fix `docs.rs` again\n      * New types:\n         * `SubmitEvent`\n         * `IChildNode`\n      * Fix `CanvasElement::to_data_url`\n   * `0.4.5`\n      * New types:\n         * `DocumentFragment`\n         * `SelectElement`\n         * `OptionElement`\n         * `HtmlCollection`\n      * New methods:\n         * `Node::from_html`\n         * `Value::is_null`\n      * Expose enums:\n         * `SocketMessageData`\n         * `NodeType`\n      * Update to `futures` 0.2\n   * `0.4.4`\n      * Fix `docs.rs` (hopefully).\n      * New methods:\n         * `Location::origin`\n         * `Location::protocol`\n         * `Location::host`\n         * `Location::hostname`\n         * `Location::port`\n         * `Location::pathname`\n         * `Location::search`\n      * These now return `SecurityError` in the error case:\n         * `Location::hash`\n         * `Location::href`\n   * `0.4.3`\n      * Objects which cannot be used as keys in a `WeakMap`\n        should be supported now (e.g. some of the WebGL-related objects under Firefox)\n      * New methods:\n         * `Element::get_bounding_client_rect`\n         * `Element::scroll_top`\n         * `Element::scroll_left`\n         * `Window::page_x_offset`\n         * `Window::page_y_offset`\n         * `NodeList::item`\n         * `Document::body`\n         * `Document::head`\n         * `Document::title`\n         * `Document::set_title`\n         * `IMouseEvent::offset_x`\n         * `IMouseEvent::offset_y`\n      * Expose more canvas related types:\n         * `CompositeOperation`\n         * `LineCap`\n         * `LineJoin`\n         * `Repetition`\n         * `TextAlign`\n         * `TextBaseline`\n      * Expose canvas related error types: `AddColorStopError`, `DrawImageError`, `GetImageDataError`\n      * New events:\n         * `MouseOverEvent`\n         * `MouseOutEvent`\n         * `PointerOverEvent`\n         * `PointerEnterEvent`\n         * `PointerDownEvent`\n         * `PointerMoveEvent`\n         * `PointerUpEvent`\n         * `PointerCancelEvent`\n         * `PointerOutEvent`\n         * `PointerLeaveEvent`\n         * `GotPointerCaptureEvent`\n         * `LostPointerCaptureEvent`\n      * New interface for pointer events: `IPointerEvent`\n   * `0.4.2`\n      * Fixed a leak when deserializing references\n      * Fixed `CanvasRenderingContext2d::get_canvas`\n      * Exposed `FillRule` and `SocketReadyState`\n      * New attribute related methods added to `IElement`\n      * New `Date` bindings\n   * `0.4.1`\n      * Support for newest nightly Rust on `wasm32-unknown-unknown`\n      * Exposed `SocketBinaryType` enum\n      * New canvas APIs:\n         * Numerous new methods for `CanvasRenderingContext2d`\n         * New types: `CanvasGradient`, `CanvasPattern`, `CanvasStyle`, `ImageData`, `TextMetrics`\n      * New error types: `IndexSizeError`, `NotSupportedError`, `TypeError`\n   * `0.4`\n      * (breaking change) Removed `Array` and `Object` variants from `Value`; these are now treated as `Reference`s\n      * (breaking change) The `Value` has an extra variant: `Symbol`\n      * (breaking change) Removed:\n         * `InputElement::set_kind`\n         * `InputElement::files`\n      * (breaking change) Renamed:\n         * `KeydownEvent` -> `KeyDownEvent`\n         * `KeyupEvent` -> `KeyUpEvent`\n         * `KeypressEvent` -> `KeyPressEvent`\n         * `ReadyState` -> `FileReaderReadyState`\n         * `InputElement::value` -> `InputElement::raw_value`\n         * `InputElement::set_value` -> `InputElement::set_raw_value`\n      * (breaking change) `ArrayBuffer::new` now takes an `u64` argument\n      * (breaking change) `InputElement::set_raw_value` now takes `&str` instead of `Into< Value >`\n      * (breaking change) Changed return types:\n         * Every method which returned `usize` now returns `u32`\n         * `INode::remove_child` now returns `Node` in the `Ok` case\n         * The following now return an `u64`:\n            * `ArrayBuffer::len`\n         * The following now return an `i32` instead of `f64`:\n            * `IMouseEvent::client_x`\n            * `IMouseEvent::client_y`\n            * `IMouseEvent::movement_x`\n            * `IMouseEvent::movement_y`\n            * `IMouseEvent::screen_x`\n            * `IMouseEvent::screen_y`\n         * The following now return a `Result`:\n            * `INode::insert_before`\n            * `INode::replace_child`\n            * `INode::clone_node`\n            * `StringMap::insert`\n            * `TokenList::add`\n            * `TokenList::remove`\n            * `Document::create_element`\n            * `IEventTarget::dispatch_event`\n            * `FileReader::read_as_text`\n            * `FileReader::read_as_array_buffer`\n            * `FileReader::read_as_text`\n            * `History::replace_state`\n            * `History::go`\n            * `History::back`\n            * `History::forward`\n            * `Location::href`\n            * `Location::hash`\n            * `CanvasElement::to_data_url`\n            * `CanvasElement::to_blob`\n            * `ArrayBuffer::new`\n        * `INode::base_uri` now returns a `String` instead of `Option< String >`\n        * `InputElement::raw_value` now returns a `String` instead of `Value`\n      * (breaking change) `INode::inner_text` was moved to `IHtmlElement::inner_text`\n      * (breaking change) `Document::query_selector` and `Document::query_selector_all` were moved to `IParentNode`\n      * (breaking change) `IElement::query_selector` and `IElement::query_selector_all` were moved to `IParentNode`\n      * (breaking change) `Document::get_element_by_id` was moved to `INonElementParentNode`\n      * (breaking change) A blanket impl for converting between arbitrary reference-like objects using\n        `TryFrom`/`TryInto` has been removed\n      * When building using a recent `cargo-web` it's not necessary to call\n        `stdweb::initialize` nor `stdweb::event_loop` anymore\n      * Support for `cdylib` crates on `wasm32-unknown-unknown`\n      * New bindings:\n         * `XmlHttpRequest`\n         * `WebSocket`\n         * `MutationObserver`\n         * `History`\n         * `TextAreaElement`\n         * `CanvasElement`\n      * New event types:\n         * `MouseDownEvent`\n         * `MouseUpEvent`\n         * `MouseMoveEvent`\n         * `PopStateEvent`\n         * `ResizeEvent`\n         * `ReadyStateChange`\n         * `SocketCloseEvent`\n         * `SocketErrorEvent`\n         * `SocketOpenEvent`\n         * `SocketMessageEvent`\n      * Initial support for the Canvas APIs\n      * New traits: `ReferenceType` and `InstanceOf`\n      * Add `#[derive(ReferenceType)]` in `stdweb-derive` crate; it's now possible\n        to define custom API bindings outside of `stdweb`\n      * Add `#[js_export]` procedural attribute (`wasm32-unknown-unknown` only)\n      * Add `DomException` and subtypes for passing around JavaScript exceptions\n      * `IElement` now inherits from `INode`\n      * Every interface now inherits from `ReferenceType`\n      * Add `stdweb::traits` module to act as a prelude for `use`-ing all of our interface traits\n      * Add `console!` macro\n      * Most types now implement `PartialEq` and `Eq`\n\n   * `0.3`\n      * (breaking change) Deleted `ErrorEvent` methods\n      * (breaking change) Renamed:\n         * `LoadEvent` -> `ResourceLoadEvent`\n         * `AbortEvent` -> `ResourceAbortEvent`\n         * `ErrorEvent` -> `ResourceErrorEvent`\n      * Add `UnsafeTypedArray` for zero cost slice passing to `js!`\n      * Add `Once` for passing `FnOnce` closures to `js!`\n\n## License\n\nLicensed under either of\n\n  * Apache License, Version 2.0, ([LICENSE-APACHE](LICENSE-APACHE) or http://www.apache.org/licenses/LICENSE-2.0)\n  * MIT license ([LICENSE-MIT](LICENSE-MIT) or http://opensource.org/licenses/MIT)\n\nat your option.\n\nSnippets of documentation which come from [Mozilla Developer Network] are covered under the [CC-BY-SA, version 2.5] or later.\n\n[Mozilla Developer Network]: https://developer.mozilla.org/en-US/\n[CC-BY-SA, version 2.5]: https://developer.mozilla.org/en-US/docs/MDN/About#Copyrights_and_licenses\n\n### Contributing\n\nSee [CONTRIBUTING.md](https://github.com/koute/stdweb/blob/master/CONTRIBUTING.md)\n"
        },
        {
          "name": "Web.toml",
          "type": "blob",
          "size": 0.0380859375,
          "content": "[cargo-web]\nminimum-version = \"0.6.24\"\n"
        },
        {
          "name": "benchmarks",
          "type": "tree",
          "content": null
        },
        {
          "name": "build.rs",
          "type": "blob",
          "size": 0.28125,
          "content": "extern crate rustc_version;\nuse rustc_version::{version, version_meta, Channel};\n\nfn main() {\n    let mut current = version().unwrap();\n    current.pre = Vec::new();\n\n    if version_meta().unwrap().channel == Channel::Nightly {\n        println!( \"cargo:rustc-cfg=rust_nightly\" );\n    }\n}\n"
        },
        {
          "name": "ci",
          "type": "tree",
          "content": null
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "info",
          "type": "tree",
          "content": null
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "standalone-tests",
          "type": "tree",
          "content": null
        },
        {
          "name": "stdweb-derive",
          "type": "tree",
          "content": null
        },
        {
          "name": "stdweb-internal-macros",
          "type": "tree",
          "content": null
        },
        {
          "name": "stdweb-internal-runtime",
          "type": "tree",
          "content": null
        },
        {
          "name": "stdweb-internal-test-macro",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}