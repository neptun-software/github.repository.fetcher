{
  "metadata": {
    "timestamp": 1736709264560,
    "page": 603,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjYxMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "foniod/redbpf",
      "stars": 1711,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".envrc",
          "type": "blob",
          "size": 0.009765625,
          "content": "use flake\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.068359375,
          "content": "**/target/\nCargo.lock\nGPATH\n*TAGS*\ncscope*\nlsp-target\n.direnv\n/result\n"
        },
        {
          "name": ".gitmodules",
          "type": "blob",
          "size": 0.09375,
          "content": "[submodule \"bpf-sys/libbpf\"]\n\tpath = bpf-sys/libbpf\n\turl = https://github.com/libbpf/libbpf.git\n"
        },
        {
          "name": "Cargo.lock",
          "type": "blob",
          "size": 31.27734375,
          "content": "# This file is automatically @generated by Cargo.\n# It is not intended for manual editing.\nversion = 3\n\n[[package]]\nname = \"aho-corasick\"\nversion = \"0.7.18\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1e37cfd5e7657ada45f742d6e99ca5788580b5c529dc78faf11ece6dc702656f\"\ndependencies = [\n \"memchr\",\n]\n\n[[package]]\nname = \"ansi_term\"\nversion = \"0.12.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d52a9bb7ec0cf484c551830a7ce27bd20d67eac647e1befb56b0be4ee39a55d2\"\ndependencies = [\n \"winapi\",\n]\n\n[[package]]\nname = \"anyhow\"\nversion = \"1.0.56\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"4361135be9122e0870de935d7c439aef945b9f9ddd4199a553b5270b49c82a27\"\n\n[[package]]\nname = \"arrayvec\"\nversion = \"0.5.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"23b62fc65de8e4e7f52534fb52b0f3ed04746ae267519eef2a83941e8085068b\"\n\n[[package]]\nname = \"atty\"\nversion = \"0.2.14\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d9b39be18770d11421cdb1b9947a45dd3f37e93092cbf377614828a319d5fee8\"\ndependencies = [\n \"hermit-abi\",\n \"libc\",\n \"winapi\",\n]\n\n[[package]]\nname = \"autocfg\"\nversion = \"1.1.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d468802bab17cbc0cc575e9b053f41e72aa36bfa6b7f55e3529ffa43161b97fa\"\n\n[[package]]\nname = \"bindgen\"\nversion = \"0.59.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"2bd2a9a458e8f4304c52c43ebb0cfbd520289f8379a52e329a38afda99bf8eb8\"\ndependencies = [\n \"bitflags\",\n \"cexpr\",\n \"clang-sys\",\n \"lazy_static\",\n \"lazycell\",\n \"peeking_take_while\",\n \"proc-macro2\",\n \"quote\",\n \"regex\",\n \"rustc-hash\",\n \"shlex\",\n]\n\n[[package]]\nname = \"bitflags\"\nversion = \"1.3.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"bef38d45163c2f1dde094a7dfd33ccf595c92905c8f8f4fdc18d06fb1037718a\"\n\n[[package]]\nname = \"bpf-sys\"\nversion = \"2.3.0\"\ndependencies = [\n \"bindgen\",\n \"cc\",\n \"glob\",\n \"libbpf-sys\",\n \"libc\",\n \"regex\",\n \"zero\",\n]\n\n[[package]]\nname = \"bumpalo\"\nversion = \"3.9.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a4a45a46ab1f2412e53d3a0ade76ffad2025804294569aae387231a0cd6e0899\"\n\n[[package]]\nname = \"byteorder\"\nversion = \"1.4.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"14c189c53d098945499cdfa7ecc63567cf3886b3332b312a5b4585d8d3a6a610\"\n\n[[package]]\nname = \"bytes\"\nversion = \"1.1.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"c4872d67bab6358e59559027aa3b9157c53d9358c51423c17554809a8858e0f8\"\n\n[[package]]\nname = \"cargo-bpf\"\nversion = \"2.3.0\"\ndependencies = [\n \"anyhow\",\n \"bindgen\",\n \"bpf-sys\",\n \"cfg-if\",\n \"clap\",\n \"futures\",\n \"glob\",\n \"goblin\",\n \"hexdump\",\n \"lazy_static\",\n \"libbpf-sys\",\n \"libc\",\n \"llvm-sys\",\n \"proc-macro2\",\n \"quote\",\n \"redbpf\",\n \"regex\",\n \"rustc_version 0.4.0\",\n \"rustversion\",\n \"semver 1.0.7\",\n \"syn\",\n \"tempfile\",\n \"tokio\",\n \"toml_edit\",\n]\n\n[[package]]\nname = \"cc\"\nversion = \"1.0.73\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"2fff2a6927b3bb87f9595d67196a70493f627687a71d87a0d692242c33f58c11\"\n\n[[package]]\nname = \"cexpr\"\nversion = \"0.6.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"6fac387a98bb7c37292057cffc56d62ecb629900026402633ae9160df93a8766\"\ndependencies = [\n \"nom\",\n]\n\n[[package]]\nname = \"cfg-if\"\nversion = \"1.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"baf1de4339761588bc0619e3cbc0120ee582ebb74b53b4efbf79117bd2da40fd\"\n\n[[package]]\nname = \"chrono\"\nversion = \"0.4.19\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"670ad68c9088c2a963aaa298cb369688cf3f9465ce5e2d4ca10e6e0098a1ce73\"\ndependencies = [\n \"libc\",\n \"num-integer\",\n \"num-traits\",\n \"time\",\n \"winapi\",\n]\n\n[[package]]\nname = \"clang-sys\"\nversion = \"1.3.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"4cc00842eed744b858222c4c9faf7243aafc6d33f92f96935263ef4d8a41ce21\"\ndependencies = [\n \"glob\",\n \"libc\",\n \"libloading\",\n]\n\n[[package]]\nname = \"clap\"\nversion = \"2.34.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a0610544180c38b88101fecf2dd634b174a62eef6946f84dfc6a7127512b381c\"\ndependencies = [\n \"ansi_term\",\n \"atty\",\n \"bitflags\",\n \"strsim\",\n \"textwrap\",\n \"unicode-width\",\n \"vec_map\",\n]\n\n[[package]]\nname = \"combine\"\nversion = \"4.6.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"50b727aacc797f9fc28e355d21f34709ac4fc9adecfe470ad07b8f4464f53062\"\ndependencies = [\n \"bytes\",\n \"memchr\",\n]\n\n[[package]]\nname = \"cty\"\nversion = \"0.2.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b365fabc795046672053e29c954733ec3b05e4be654ab130fe8f1f94d7051f35\"\n\n[[package]]\nname = \"example-probes\"\nversion = \"0.1.0\"\ndependencies = [\n \"bpf-sys\",\n \"cargo-bpf\",\n \"cty\",\n \"memoffset\",\n \"redbpf-macros\",\n \"redbpf-probes\",\n \"tracing\",\n \"tracing-subscriber 0.2.25\",\n]\n\n[[package]]\nname = \"example-userspace\"\nversion = \"0.1.0\"\ndependencies = [\n \"cargo-bpf\",\n \"example-probes\",\n \"futures\",\n \"libc\",\n \"redbpf\",\n \"tokio\",\n \"tracing\",\n \"tracing-subscriber 0.3.10\",\n]\n\n[[package]]\nname = \"fastrand\"\nversion = \"1.7.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"c3fcf0cee53519c866c09b5de1f6c56ff9d647101f81c1964fa632e148896cdf\"\ndependencies = [\n \"instant\",\n]\n\n[[package]]\nname = \"futures\"\nversion = \"0.3.21\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f73fe65f54d1e12b726f517d3e2135ca3125a437b6d998caf1962961f7172d9e\"\ndependencies = [\n \"futures-channel\",\n \"futures-core\",\n \"futures-executor\",\n \"futures-io\",\n \"futures-sink\",\n \"futures-task\",\n \"futures-util\",\n]\n\n[[package]]\nname = \"futures-channel\"\nversion = \"0.3.21\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"c3083ce4b914124575708913bca19bfe887522d6e2e6d0952943f5eac4a74010\"\ndependencies = [\n \"futures-core\",\n \"futures-sink\",\n]\n\n[[package]]\nname = \"futures-core\"\nversion = \"0.3.21\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"0c09fd04b7e4073ac7156a9539b57a484a8ea920f79c7c675d05d289ab6110d3\"\n\n[[package]]\nname = \"futures-executor\"\nversion = \"0.3.21\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"9420b90cfa29e327d0429f19be13e7ddb68fa1cccb09d65e5706b8c7a749b8a6\"\ndependencies = [\n \"futures-core\",\n \"futures-task\",\n \"futures-util\",\n]\n\n[[package]]\nname = \"futures-io\"\nversion = \"0.3.21\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"fc4045962a5a5e935ee2fdedaa4e08284547402885ab326734432bed5d12966b\"\n\n[[package]]\nname = \"futures-macro\"\nversion = \"0.3.21\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"33c1e13800337f4d4d7a316bf45a567dbcb6ffe087f16424852d97e97a91f512\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn\",\n]\n\n[[package]]\nname = \"futures-sink\"\nversion = \"0.3.21\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"21163e139fa306126e6eedaf49ecdb4588f939600f0b1e770f4205ee4b7fa868\"\n\n[[package]]\nname = \"futures-task\"\nversion = \"0.3.21\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"57c66a976bf5909d801bbef33416c41372779507e7a6b3a5e25e4749c58f776a\"\n\n[[package]]\nname = \"futures-util\"\nversion = \"0.3.21\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d8b7abd5d659d9b90c8cba917f6ec750a74e2dc23902ef9cd4cc8c8b22e6036a\"\ndependencies = [\n \"futures-channel\",\n \"futures-core\",\n \"futures-io\",\n \"futures-macro\",\n \"futures-sink\",\n \"futures-task\",\n \"memchr\",\n \"pin-project-lite\",\n \"pin-utils\",\n \"slab\",\n]\n\n[[package]]\nname = \"getopts\"\nversion = \"0.2.21\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"14dbbfd5c71d70241ecf9e6f13737f7b5ce823821063188d7e46c41d371eebd5\"\ndependencies = [\n \"unicode-width\",\n]\n\n[[package]]\nname = \"getrandom\"\nversion = \"0.2.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"9be70c98951c83b8d2f8f60d7065fa6d5146873094452a1008da8c2f1e4205ad\"\ndependencies = [\n \"cfg-if\",\n \"libc\",\n \"wasi 0.10.2+wasi-snapshot-preview1\",\n]\n\n[[package]]\nname = \"glob\"\nversion = \"0.3.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"9b919933a397b79c37e33b77bb2aa3dc8eb6e165ad809e58ff75bc7db2e34574\"\n\n[[package]]\nname = \"goblin\"\nversion = \"0.4.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"32401e89c6446dcd28185931a01b1093726d0356820ac744023e6850689bf926\"\ndependencies = [\n \"log\",\n \"plain\",\n \"scroll\",\n]\n\n[[package]]\nname = \"hermit-abi\"\nversion = \"0.1.19\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"62b467343b94ba476dcb2500d242dadbb39557df889310ac77c5d99100aaac33\"\ndependencies = [\n \"libc\",\n]\n\n[[package]]\nname = \"hexdump\"\nversion = \"0.1.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e40283dadb02f3af778878be1d717b17b4e4ab92e1d935ab03a730b0542905f2\"\ndependencies = [\n \"arrayvec\",\n \"itertools\",\n]\n\n[[package]]\nname = \"instant\"\nversion = \"0.1.12\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"7a5bbe824c507c5da5956355e86a746d82e0e1464f65d862cc5e71da70e94b2c\"\ndependencies = [\n \"cfg-if\",\n]\n\n[[package]]\nname = \"itertools\"\nversion = \"0.4.19\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"c4a9b56eb56058f43dc66e58f40a214b2ccbc9f3df51861b63d51dec7b65bc3f\"\n\n[[package]]\nname = \"itoa\"\nversion = \"1.0.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1aab8fc367588b89dcee83ab0fd66b72b50b72fa1904d7095045ace2b0c81c35\"\n\n[[package]]\nname = \"js-sys\"\nversion = \"0.3.56\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a38fc24e30fd564ce974c02bf1d337caddff65be6cc4735a1f7eab22a7440f04\"\ndependencies = [\n \"wasm-bindgen\",\n]\n\n[[package]]\nname = \"lazy_static\"\nversion = \"1.4.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e2abad23fbc42b3700f2f279844dc832adb2b2eb069b2df918f455c4e18cc646\"\n\n[[package]]\nname = \"lazycell\"\nversion = \"1.3.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"830d08ce1d1d941e6b30645f1a0eb5643013d835ce3779a5fc208261dbe10f55\"\n\n[[package]]\nname = \"libbpf-sys\"\nversion = \"0.6.2+v0.6.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1c2c15bbeae2b87e3a63feea85a579272ed082f0f4d8f0e7968cc9a17e1b4d69\"\ndependencies = [\n \"cc\",\n \"pkg-config\",\n]\n\n[[package]]\nname = \"libc\"\nversion = \"0.2.121\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"efaa7b300f3b5fe8eb6bf21ce3895e1751d9665086af2d64b42f19701015ff4f\"\n\n[[package]]\nname = \"libloading\"\nversion = \"0.7.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"efbc0f03f9a775e9f6aed295c6a1ba2253c5757a9e03d55c6caa46a681abcddd\"\ndependencies = [\n \"cfg-if\",\n \"winapi\",\n]\n\n[[package]]\nname = \"linked-hash-map\"\nversion = \"0.5.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"7fb9b38af92608140b86b693604b9ffcc5824240a484d1ecd4795bacb2fe88f3\"\n\n[[package]]\nname = \"llvm-sys\"\nversion = \"130.0.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"95eb03b4f7ae21f48ef7c565a3e3aa22c50616aea64645fb1fd7f6f56b51c274\"\ndependencies = [\n \"cc\",\n \"lazy_static\",\n \"libc\",\n \"regex\",\n \"semver 0.11.0\",\n]\n\n[[package]]\nname = \"log\"\nversion = \"0.4.16\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"6389c490849ff5bc16be905ae24bc913a9c8892e19b2341dbc175e14c341c2b8\"\ndependencies = [\n \"cfg-if\",\n]\n\n[[package]]\nname = \"matchers\"\nversion = \"0.0.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f099785f7595cc4b4553a174ce30dd7589ef93391ff414dbb67f62392b9e0ce1\"\ndependencies = [\n \"regex-automata\",\n]\n\n[[package]]\nname = \"memchr\"\nversion = \"2.4.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"308cc39be01b73d0d18f82a0e7b2a3df85245f84af96fdddc5d202d27e47b86a\"\n\n[[package]]\nname = \"memoffset\"\nversion = \"0.6.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"5aa361d4faea93603064a027415f07bd8e1d5c88c9fbf68bf56a285428fd79ce\"\ndependencies = [\n \"autocfg\",\n]\n\n[[package]]\nname = \"minimal-lexical\"\nversion = \"0.2.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"68354c5c6bd36d73ff3feceb05efa59b6acb7626617f4962be322a825e61f79a\"\n\n[[package]]\nname = \"mio\"\nversion = \"0.8.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"52da4364ffb0e4fe33a9841a98a3f3014fb964045ce4f7a45a398243c8d6b0c9\"\ndependencies = [\n \"libc\",\n \"log\",\n \"miow\",\n \"ntapi\",\n \"wasi 0.11.0+wasi-snapshot-preview1\",\n \"winapi\",\n]\n\n[[package]]\nname = \"miow\"\nversion = \"0.3.7\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b9f1c5b025cda876f66ef43a113f91ebc9f4ccef34843000e0adf6ebbab84e21\"\ndependencies = [\n \"winapi\",\n]\n\n[[package]]\nname = \"nom\"\nversion = \"7.1.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a8903e5a29a317527874d0402f867152a3d21c908bb0b933e416c65e301d4c36\"\ndependencies = [\n \"memchr\",\n \"minimal-lexical\",\n]\n\n[[package]]\nname = \"ntapi\"\nversion = \"0.3.7\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"c28774a7fd2fbb4f0babd8237ce554b73af68021b5f695a3cebd6c59bac0980f\"\ndependencies = [\n \"winapi\",\n]\n\n[[package]]\nname = \"num-integer\"\nversion = \"0.1.44\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d2cc698a63b549a70bc047073d2949cce27cd1c7b0a4a862d08a8031bc2801db\"\ndependencies = [\n \"autocfg\",\n \"num-traits\",\n]\n\n[[package]]\nname = \"num-traits\"\nversion = \"0.2.14\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"9a64b1ec5cda2586e284722486d802acf1f7dbdc623e2bfc57e65ca1cd099290\"\ndependencies = [\n \"autocfg\",\n]\n\n[[package]]\nname = \"once_cell\"\nversion = \"1.10.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"87f3e037eac156d1775da914196f0f37741a274155e34a0b7e427c35d2a2ecb9\"\n\n[[package]]\nname = \"peeking_take_while\"\nversion = \"0.1.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"19b17cddbe7ec3f8bc800887bab5e717348c95ea2ca0b1bf0837fb964dc67099\"\n\n[[package]]\nname = \"pest\"\nversion = \"2.1.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"10f4872ae94d7b90ae48754df22fd42ad52ce740b8f370b03da4835417403e53\"\ndependencies = [\n \"ucd-trie\",\n]\n\n[[package]]\nname = \"pin-project-lite\"\nversion = \"0.2.8\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e280fbe77cc62c91527259e9442153f4688736748d24660126286329742b4c6c\"\n\n[[package]]\nname = \"pin-utils\"\nversion = \"0.1.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8b870d8c151b6f2fb93e84a13146138f05d02ed11c7e7c54f8826aaaf7c9f184\"\n\n[[package]]\nname = \"pkg-config\"\nversion = \"0.3.25\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1df8c4ec4b0627e53bdf214615ad287367e482558cf84b109250b37464dc03ae\"\n\n[[package]]\nname = \"plain\"\nversion = \"0.2.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b4596b6d070b27117e987119b4dac604f3c58cfb0b191112e24771b2faeac1a6\"\n\n[[package]]\nname = \"probes\"\nversion = \"0.1.0\"\ndependencies = [\n \"bpf-sys\",\n \"cargo-bpf\",\n \"cty\",\n \"glob\",\n \"redbpf-macros\",\n \"redbpf-probes\",\n \"tracing\",\n \"tracing-subscriber 0.2.25\",\n]\n\n[[package]]\nname = \"proc-macro-hack\"\nversion = \"0.5.19\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"dbf0c48bc1d91375ae5c3cd81e3722dff1abcf81a30960240640d223f59fe0e5\"\n\n[[package]]\nname = \"proc-macro2\"\nversion = \"1.0.37\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ec757218438d5fda206afc041538b2f6d889286160d649a86a24d37e1235afd1\"\ndependencies = [\n \"unicode-xid\",\n]\n\n[[package]]\nname = \"quote\"\nversion = \"1.0.17\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"632d02bff7f874a36f33ea8bb416cd484b90cc66c1194b1a1110d067a7013f58\"\ndependencies = [\n \"proc-macro2\",\n]\n\n[[package]]\nname = \"redbpf\"\nversion = \"2.3.0\"\ndependencies = [\n \"bindgen\",\n \"bpf-sys\",\n \"byteorder\",\n \"futures\",\n \"goblin\",\n \"lazy_static\",\n \"libbpf-sys\",\n \"libc\",\n \"regex\",\n \"ring\",\n \"serde_derive\",\n \"serde_json\",\n \"tokio\",\n \"tracing\",\n \"zero\",\n]\n\n[[package]]\nname = \"redbpf-macros\"\nversion = \"2.3.0\"\ndependencies = [\n \"memoffset\",\n \"proc-macro2\",\n \"quote\",\n \"redbpf-probes\",\n \"rustc_version 0.3.3\",\n \"syn\",\n \"uuid\",\n]\n\n[[package]]\nname = \"redbpf-probes\"\nversion = \"2.3.0\"\ndependencies = [\n \"anyhow\",\n \"bindgen\",\n \"bpf-sys\",\n \"cargo-bpf\",\n \"cty\",\n \"glob\",\n \"libbpf-sys\",\n \"memoffset\",\n \"quote\",\n \"redbpf-macros\",\n \"syn\",\n \"tracing\",\n \"tracing-subscriber 0.2.25\",\n \"ufmt\",\n]\n\n[[package]]\nname = \"redbpf-tools\"\nversion = \"0.1.0\"\ndependencies = [\n \"cargo-bpf\",\n \"futures\",\n \"getopts\",\n \"libc\",\n \"probes\",\n \"redbpf\",\n \"tokio\",\n]\n\n[[package]]\nname = \"redox_syscall\"\nversion = \"0.2.13\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"62f25bc4c7e55e0b0b7a1d43fb893f4fa1361d0abe38b9ce4f323c2adfe6ef42\"\ndependencies = [\n \"bitflags\",\n]\n\n[[package]]\nname = \"regex\"\nversion = \"1.5.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1a11647b6b25ff05a515cb92c365cec08801e83423a235b51e231e1808747286\"\ndependencies = [\n \"aho-corasick\",\n \"memchr\",\n \"regex-syntax\",\n]\n\n[[package]]\nname = \"regex-automata\"\nversion = \"0.1.10\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"6c230d73fb8d8c1b9c0b3135c5142a8acee3a0558fb8db5cf1cb65f8d7862132\"\ndependencies = [\n \"regex-syntax\",\n]\n\n[[package]]\nname = \"regex-syntax\"\nversion = \"0.6.25\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f497285884f3fcff424ffc933e56d7cbca511def0c9831a7f9b5f6153e3cc89b\"\n\n[[package]]\nname = \"remove_dir_all\"\nversion = \"0.5.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3acd125665422973a33ac9d3dd2df85edad0f4ae9b00dafb1a05e43a9f5ef8e7\"\ndependencies = [\n \"winapi\",\n]\n\n[[package]]\nname = \"ring\"\nversion = \"0.16.20\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3053cf52e236a3ed746dfc745aa9cacf1b791d846bdaf412f60a8d7d6e17c8fc\"\ndependencies = [\n \"cc\",\n \"libc\",\n \"once_cell\",\n \"spin\",\n \"untrusted\",\n \"web-sys\",\n \"winapi\",\n]\n\n[[package]]\nname = \"rustc-hash\"\nversion = \"1.1.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"08d43f7aa6b08d49f382cde6a7982047c3426db949b1424bc4b7ec9ae12c6ce2\"\n\n[[package]]\nname = \"rustc_version\"\nversion = \"0.3.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f0dfe2087c51c460008730de8b57e6a320782fbfb312e1f4d520e6c6fae155ee\"\ndependencies = [\n \"semver 0.11.0\",\n]\n\n[[package]]\nname = \"rustc_version\"\nversion = \"0.4.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"bfa0f585226d2e68097d4f95d113b15b83a82e819ab25717ec0590d9584ef366\"\ndependencies = [\n \"semver 1.0.7\",\n]\n\n[[package]]\nname = \"rustversion\"\nversion = \"1.0.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f2cc38e8fa666e2de3c4aba7edeb5ffc5246c1c2ed0e3d17e560aeeba736b23f\"\n\n[[package]]\nname = \"ryu\"\nversion = \"1.0.9\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"73b4b750c782965c211b42f022f59af1fbceabdd026623714f104152f1ec149f\"\n\n[[package]]\nname = \"scroll\"\nversion = \"0.10.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"fda28d4b4830b807a8b43f7b0e6b5df875311b3e7621d84577188c175b6ec1ec\"\ndependencies = [\n \"scroll_derive\",\n]\n\n[[package]]\nname = \"scroll_derive\"\nversion = \"0.10.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"aaaae8f38bb311444cfb7f1979af0bc9240d95795f75f9ceddf6a59b79ceffa0\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn\",\n]\n\n[[package]]\nname = \"semver\"\nversion = \"0.11.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f301af10236f6df4160f7c3f04eec6dbc70ace82d23326abad5edee88801c6b6\"\ndependencies = [\n \"semver-parser\",\n]\n\n[[package]]\nname = \"semver\"\nversion = \"1.0.7\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d65bd28f48be7196d222d95b9243287f48d27aca604e08497513019ff0502cc4\"\n\n[[package]]\nname = \"semver-parser\"\nversion = \"0.10.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"00b0bef5b7f9e0df16536d3961cfb6e84331c065b4066afb39768d0e319411f7\"\ndependencies = [\n \"pest\",\n]\n\n[[package]]\nname = \"serde\"\nversion = \"1.0.136\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ce31e24b01e1e524df96f1c2fdd054405f8d7376249a5110886fb4b658484789\"\n\n[[package]]\nname = \"serde_derive\"\nversion = \"1.0.136\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"08597e7152fcd306f41838ed3e37be9eaeed2b61c42e2117266a554fab4662f9\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn\",\n]\n\n[[package]]\nname = \"serde_json\"\nversion = \"1.0.79\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8e8d9fa5c3b304765ce1fd9c4c8a3de2c8db365a5b91be52f186efc675681d95\"\ndependencies = [\n \"itoa\",\n \"ryu\",\n \"serde\",\n]\n\n[[package]]\nname = \"sharded-slab\"\nversion = \"0.1.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"900fba806f70c630b0a382d0d825e17a0f19fcd059a2ade1ff237bcddf446b31\"\ndependencies = [\n \"lazy_static\",\n]\n\n[[package]]\nname = \"shlex\"\nversion = \"1.1.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"43b2853a4d09f215c24cc5489c992ce46052d359b5109343cbafbf26bc62f8a3\"\n\n[[package]]\nname = \"signal-hook-registry\"\nversion = \"1.4.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e51e73328dc4ac0c7ccbda3a494dfa03df1de2f46018127f60c693f2648455b0\"\ndependencies = [\n \"libc\",\n]\n\n[[package]]\nname = \"slab\"\nversion = \"0.4.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"eb703cfe953bccee95685111adeedb76fabe4e97549a58d16f03ea7b9367bb32\"\n\n[[package]]\nname = \"smallvec\"\nversion = \"1.8.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f2dd574626839106c320a323308629dcb1acfc96e32a8cba364ddc61ac23ee83\"\n\n[[package]]\nname = \"socket2\"\nversion = \"0.4.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"66d72b759436ae32898a2af0a14218dbf55efde3feeb170eb623637db85ee1e0\"\ndependencies = [\n \"libc\",\n \"winapi\",\n]\n\n[[package]]\nname = \"spin\"\nversion = \"0.5.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"6e63cff320ae2c57904679ba7cb63280a3dc4613885beafb148ee7bf9aa9042d\"\n\n[[package]]\nname = \"strsim\"\nversion = \"0.8.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8ea5119cdb4c55b55d432abb513a0429384878c15dde60cc77b1c99de1a95a6a\"\n\n[[package]]\nname = \"syn\"\nversion = \"1.0.91\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b683b2b825c8eef438b77c36a06dc262294da3d5a5813fac20da149241dcd44d\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"unicode-xid\",\n]\n\n[[package]]\nname = \"tempfile\"\nversion = \"3.3.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"5cdb1ef4eaeeaddc8fbd371e5017057064af0911902ef36b39801f67cc6d79e4\"\ndependencies = [\n \"cfg-if\",\n \"fastrand\",\n \"libc\",\n \"redox_syscall\",\n \"remove_dir_all\",\n \"winapi\",\n]\n\n[[package]]\nname = \"textwrap\"\nversion = \"0.11.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d326610f408c7a4eb6f51c37c330e496b08506c9457c9d34287ecc38809fb060\"\ndependencies = [\n \"unicode-width\",\n]\n\n[[package]]\nname = \"thread_local\"\nversion = \"1.1.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"5516c27b78311c50bf42c071425c560ac799b11c30b31f87e3081965fe5e0180\"\ndependencies = [\n \"once_cell\",\n]\n\n[[package]]\nname = \"time\"\nversion = \"0.1.43\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ca8a50ef2360fbd1eeb0ecd46795a87a19024eb4b53c5dc916ca1fd95fe62438\"\ndependencies = [\n \"libc\",\n \"winapi\",\n]\n\n[[package]]\nname = \"tokio\"\nversion = \"1.17.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"2af73ac49756f3f7c01172e34a23e5d0216f6c32333757c2c61feb2bbff5a5ee\"\ndependencies = [\n \"bytes\",\n \"libc\",\n \"memchr\",\n \"mio\",\n \"once_cell\",\n \"pin-project-lite\",\n \"signal-hook-registry\",\n \"socket2\",\n \"tokio-macros\",\n \"winapi\",\n]\n\n[[package]]\nname = \"tokio-macros\"\nversion = \"1.7.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b557f72f448c511a979e2564e55d74e6c4432fc96ff4f6241bc6bded342643b7\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn\",\n]\n\n[[package]]\nname = \"toml_edit\"\nversion = \"0.2.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"dbbdcf4f749dd33b1f1ea19b547bf789d87442ec40767d6015e5e2d39158d69a\"\ndependencies = [\n \"chrono\",\n \"combine\",\n \"linked-hash-map\",\n]\n\n[[package]]\nname = \"tracing\"\nversion = \"0.1.32\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"4a1bdf54a7c28a2bbf701e1d2233f6c77f473486b94bee4f9678da5a148dca7f\"\ndependencies = [\n \"cfg-if\",\n \"pin-project-lite\",\n \"tracing-attributes\",\n \"tracing-core\",\n]\n\n[[package]]\nname = \"tracing-attributes\"\nversion = \"0.1.20\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"2e65ce065b4b5c53e73bb28912318cb8c9e9ad3921f1d669eb0e68b4c8143a2b\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn\",\n]\n\n[[package]]\nname = \"tracing-core\"\nversion = \"0.1.24\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"90442985ee2f57c9e1b548ee72ae842f4a9a20e3f417cc38dbc5dc684d9bb4ee\"\ndependencies = [\n \"lazy_static\",\n \"valuable\",\n]\n\n[[package]]\nname = \"tracing-log\"\nversion = \"0.1.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a6923477a48e41c1951f1999ef8bb5a3023eb723ceadafe78ffb65dc366761e3\"\ndependencies = [\n \"lazy_static\",\n \"log\",\n \"tracing-core\",\n]\n\n[[package]]\nname = \"tracing-serde\"\nversion = \"0.1.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"bc6b213177105856957181934e4920de57730fc69bf42c37ee5bb664d406d9e1\"\ndependencies = [\n \"serde\",\n \"tracing-core\",\n]\n\n[[package]]\nname = \"tracing-subscriber\"\nversion = \"0.2.25\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"0e0d2eaa99c3c2e41547cfa109e910a68ea03823cccad4a0525dcbc9b01e8c71\"\ndependencies = [\n \"ansi_term\",\n \"chrono\",\n \"lazy_static\",\n \"matchers\",\n \"regex\",\n \"serde\",\n \"serde_json\",\n \"sharded-slab\",\n \"smallvec\",\n \"thread_local\",\n \"tracing\",\n \"tracing-core\",\n \"tracing-log\",\n \"tracing-serde\",\n]\n\n[[package]]\nname = \"tracing-subscriber\"\nversion = \"0.3.10\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b9df98b037d039d03400d9dd06b0f8ce05486b5f25e9a2d7d36196e142ebbc52\"\ndependencies = [\n \"ansi_term\",\n \"sharded-slab\",\n \"smallvec\",\n \"thread_local\",\n \"tracing-core\",\n \"tracing-log\",\n]\n\n[[package]]\nname = \"ucd-trie\"\nversion = \"0.1.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"56dee185309b50d1f11bfedef0fe6d036842e3fb77413abef29f8f8d1c5d4c1c\"\n\n[[package]]\nname = \"ufmt\"\nversion = \"0.1.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"2e7ecea7ef79d3f8f878eee614afdf5256475c63ad76139d4da6125617c784a0\"\ndependencies = [\n \"proc-macro-hack\",\n \"ufmt-macros\",\n \"ufmt-write\",\n]\n\n[[package]]\nname = \"ufmt-macros\"\nversion = \"0.1.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ed813e34a2bfa9dc58ee2ed8c8314d25e6d70c911486d64b8085cb695cfac069\"\ndependencies = [\n \"proc-macro-hack\",\n \"proc-macro2\",\n \"quote\",\n \"syn\",\n]\n\n[[package]]\nname = \"ufmt-write\"\nversion = \"0.1.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e87a2ed6b42ec5e28cc3b94c09982969e9227600b2e3dcbc1db927a84c06bd69\"\n\n[[package]]\nname = \"unicode-width\"\nversion = \"0.1.9\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3ed742d4ea2bd1176e236172c8429aaf54486e7ac098db29ffe6529e0ce50973\"\n\n[[package]]\nname = \"unicode-xid\"\nversion = \"0.2.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8ccb82d61f80a663efe1f787a51b16b5a51e3314d6ac365b08639f52387b33f3\"\n\n[[package]]\nname = \"untrusted\"\nversion = \"0.7.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a156c684c91ea7d62626509bce3cb4e1d9ed5c4d978f7b4352658f96a4c26b4a\"\n\n[[package]]\nname = \"uuid\"\nversion = \"0.8.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"bc5cf98d8186244414c848017f0e2676b3fcb46807f6668a97dfe67359a3c4b7\"\ndependencies = [\n \"getrandom\",\n]\n\n[[package]]\nname = \"valuable\"\nversion = \"0.1.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"830b7e5d4d90034032940e4ace0d9a9a057e7a45cd94e6c007832e39edb82f6d\"\n\n[[package]]\nname = \"vec_map\"\nversion = \"0.8.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f1bddf1187be692e79c5ffeab891132dfb0f236ed36a43c7ed39f1165ee20191\"\n\n[[package]]\nname = \"wasi\"\nversion = \"0.10.2+wasi-snapshot-preview1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"fd6fbd9a79829dd1ad0cc20627bf1ed606756a7f77edff7b66b7064f9cb327c6\"\n\n[[package]]\nname = \"wasi\"\nversion = \"0.11.0+wasi-snapshot-preview1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"9c8d87e72b64a3b4db28d11ce29237c246188f4f51057d65a7eab63b7987e423\"\n\n[[package]]\nname = \"wasm-bindgen\"\nversion = \"0.2.79\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"25f1af7423d8588a3d840681122e72e6a24ddbcb3f0ec385cac0d12d24256c06\"\ndependencies = [\n \"cfg-if\",\n \"wasm-bindgen-macro\",\n]\n\n[[package]]\nname = \"wasm-bindgen-backend\"\nversion = \"0.2.79\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8b21c0df030f5a177f3cba22e9bc4322695ec43e7257d865302900290bcdedca\"\ndependencies = [\n \"bumpalo\",\n \"lazy_static\",\n \"log\",\n \"proc-macro2\",\n \"quote\",\n \"syn\",\n \"wasm-bindgen-shared\",\n]\n\n[[package]]\nname = \"wasm-bindgen-macro\"\nversion = \"0.2.79\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"2f4203d69e40a52ee523b2529a773d5ffc1dc0071801c87b3d270b471b80ed01\"\ndependencies = [\n \"quote\",\n \"wasm-bindgen-macro-support\",\n]\n\n[[package]]\nname = \"wasm-bindgen-macro-support\"\nversion = \"0.2.79\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"bfa8a30d46208db204854cadbb5d4baf5fcf8071ba5bf48190c3e59937962ebc\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn\",\n \"wasm-bindgen-backend\",\n \"wasm-bindgen-shared\",\n]\n\n[[package]]\nname = \"wasm-bindgen-shared\"\nversion = \"0.2.79\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3d958d035c4438e28c70e4321a2911302f10135ce78a9c7834c0cab4123d06a2\"\n\n[[package]]\nname = \"web-sys\"\nversion = \"0.3.56\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"c060b319f29dd25724f09a2ba1418f142f539b2be99fbf4d2d5a8f7330afb8eb\"\ndependencies = [\n \"js-sys\",\n \"wasm-bindgen\",\n]\n\n[[package]]\nname = \"winapi\"\nversion = \"0.3.9\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"5c839a674fcd7a98952e593242ea400abe93992746761e38641405d28b00f419\"\ndependencies = [\n \"winapi-i686-pc-windows-gnu\",\n \"winapi-x86_64-pc-windows-gnu\",\n]\n\n[[package]]\nname = \"winapi-i686-pc-windows-gnu\"\nversion = \"0.4.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ac3b87c63620426dd9b991e5ce0329eff545bccbbb34f3be09ff6fb6ab51b7b6\"\n\n[[package]]\nname = \"winapi-x86_64-pc-windows-gnu\"\nversion = \"0.4.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"712e227841d057c1ee1cd2fb22fa7e5a5461ae8e48fa2ca79ec42cfc1931183f\"\n\n[[package]]\nname = \"zero\"\nversion = \"0.1.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"5f1bc8a6b2005884962297587045002d8cfb8dcec9db332f4ca216ddc5de82c5\"\n"
        },
        {
          "name": "Cargo.toml",
          "type": "blob",
          "size": 0.1826171875,
          "content": "[workspace]\nmembers = [\"bpf-sys\", \"redbpf\", \"redbpf-probes\", \"redbpf-macros\", \"cargo-bpf\", \"redbpf-tools\",\"redbpf-tools/probes\",  \"examples/example-probes\", \"examples/example-userspace\"]\n"
        },
        {
          "name": "LICENSE-APACHE",
          "type": "blob",
          "size": 10.599609375,
          "content": "                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\nTERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n1. Definitions.\n\n   \"License\" shall mean the terms and conditions for use, reproduction,\n   and distribution as defined by Sections 1 through 9 of this document.\n\n   \"Licensor\" shall mean the copyright owner or entity authorized by\n   the copyright owner that is granting the License.\n\n   \"Legal Entity\" shall mean the union of the acting entity and all\n   other entities that control, are controlled by, or are under common\n   control with that entity. For the purposes of this definition,\n   \"control\" means (i) the power, direct or indirect, to cause the\n   direction or management of such entity, whether by contract or\n   otherwise, or (ii) ownership of fifty percent (50%) or more of the\n   outstanding shares, or (iii) beneficial ownership of such entity.\n\n   \"You\" (or \"Your\") shall mean an individual or Legal Entity\n   exercising permissions granted by this License.\n\n   \"Source\" form shall mean the preferred form for making modifications,\n   including but not limited to software source code, documentation\n   source, and configuration files.\n\n   \"Object\" form shall mean any form resulting from mechanical\n   transformation or translation of a Source form, including but\n   not limited to compiled object code, generated documentation,\n   and conversions to other media types.\n\n   \"Work\" shall mean the work of authorship, whether in Source or\n   Object form, made available under the License, as indicated by a\n   copyright notice that is included in or attached to the work\n   (an example is provided in the Appendix below).\n\n   \"Derivative Works\" shall mean any work, whether in Source or Object\n   form, that is based on (or derived from) the Work and for which the\n   editorial revisions, annotations, elaborations, or other modifications\n   represent, as a whole, an original work of authorship. For the purposes\n   of this License, Derivative Works shall not include works that remain\n   separable from, or merely link (or bind by name) to the interfaces of,\n   the Work and Derivative Works thereof.\n\n   \"Contribution\" shall mean any work of authorship, including\n   the original version of the Work and any modifications or additions\n   to that Work or Derivative Works thereof, that is intentionally\n   submitted to Licensor for inclusion in the Work by the copyright owner\n   or by an individual or Legal Entity authorized to submit on behalf of\n   the copyright owner. For the purposes of this definition, \"submitted\"\n   means any form of electronic, verbal, or written communication sent\n   to the Licensor or its representatives, including but not limited to\n   communication on electronic mailing lists, source code control systems,\n   and issue tracking systems that are managed by, or on behalf of, the\n   Licensor for the purpose of discussing and improving the Work, but\n   excluding communication that is conspicuously marked or otherwise\n   designated in writing by the copyright owner as \"Not a Contribution.\"\n\n   \"Contributor\" shall mean Licensor and any individual or Legal Entity\n   on behalf of whom a Contribution has been received by Licensor and\n   subsequently incorporated within the Work.\n\n2. Grant of Copyright License. Subject to the terms and conditions of\n   this License, each Contributor hereby grants to You a perpetual,\n   worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n   copyright license to reproduce, prepare Derivative Works of,\n   publicly display, publicly perform, sublicense, and distribute the\n   Work and such Derivative Works in Source or Object form.\n\n3. Grant of Patent License. Subject to the terms and conditions of\n   this License, each Contributor hereby grants to You a perpetual,\n   worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n   (except as stated in this section) patent license to make, have made,\n   use, offer to sell, sell, import, and otherwise transfer the Work,\n   where such license applies only to those patent claims licensable\n   by such Contributor that are necessarily infringed by their\n   Contribution(s) alone or by combination of their Contribution(s)\n   with the Work to which such Contribution(s) was submitted. If You\n   institute patent litigation against any entity (including a\n   cross-claim or counterclaim in a lawsuit) alleging that the Work\n   or a Contribution incorporated within the Work constitutes direct\n   or contributory patent infringement, then any patent licenses\n   granted to You under this License for that Work shall terminate\n   as of the date such litigation is filed.\n\n4. Redistribution. You may reproduce and distribute copies of the\n   Work or Derivative Works thereof in any medium, with or without\n   modifications, and in Source or Object form, provided that You\n   meet the following conditions:\n\n   (a) You must give any other recipients of the Work or\n       Derivative Works a copy of this License; and\n\n   (b) You must cause any modified files to carry prominent notices\n       stating that You changed the files; and\n\n   (c) You must retain, in the Source form of any Derivative Works\n       that You distribute, all copyright, patent, trademark, and\n       attribution notices from the Source form of the Work,\n       excluding those notices that do not pertain to any part of\n       the Derivative Works; and\n\n   (d) If the Work includes a \"NOTICE\" text file as part of its\n       distribution, then any Derivative Works that You distribute must\n       include a readable copy of the attribution notices contained\n       within such NOTICE file, excluding those notices that do not\n       pertain to any part of the Derivative Works, in at least one\n       of the following places: within a NOTICE text file distributed\n       as part of the Derivative Works; within the Source form or\n       documentation, if provided along with the Derivative Works; or,\n       within a display generated by the Derivative Works, if and\n       wherever such third-party notices normally appear. The contents\n       of the NOTICE file are for informational purposes only and\n       do not modify the License. You may add Your own attribution\n       notices within Derivative Works that You distribute, alongside\n       or as an addendum to the NOTICE text from the Work, provided\n       that such additional attribution notices cannot be construed\n       as modifying the License.\n\n   You may add Your own copyright statement to Your modifications and\n   may provide additional or different license terms and conditions\n   for use, reproduction, or distribution of Your modifications, or\n   for any such Derivative Works as a whole, provided Your use,\n   reproduction, and distribution of the Work otherwise complies with\n   the conditions stated in this License.\n\n5. Submission of Contributions. Unless You explicitly state otherwise,\n   any Contribution intentionally submitted for inclusion in the Work\n   by You to the Licensor shall be under the terms and conditions of\n   this License, without any additional terms or conditions.\n   Notwithstanding the above, nothing herein shall supersede or modify\n   the terms of any separate license agreement you may have executed\n   with Licensor regarding such Contributions.\n\n6. Trademarks. This License does not grant permission to use the trade\n   names, trademarks, service marks, or product names of the Licensor,\n   except as required for reasonable and customary use in describing the\n   origin of the Work and reproducing the content of the NOTICE file.\n\n7. Disclaimer of Warranty. Unless required by applicable law or\n   agreed to in writing, Licensor provides the Work (and each\n   Contributor provides its Contributions) on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n   implied, including, without limitation, any warranties or conditions\n   of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n   PARTICULAR PURPOSE. You are solely responsible for determining the\n   appropriateness of using or redistributing the Work and assume any\n   risks associated with Your exercise of permissions under this License.\n\n8. Limitation of Liability. In no event and under no legal theory,\n   whether in tort (including negligence), contract, or otherwise,\n   unless required by applicable law (such as deliberate and grossly\n   negligent acts) or agreed to in writing, shall any Contributor be\n   liable to You for damages, including any direct, indirect, special,\n   incidental, or consequential damages of any character arising as a\n   result of this License or out of the use or inability to use the\n   Work (including but not limited to damages for loss of goodwill,\n   work stoppage, computer failure or malfunction, or any and all\n   other commercial damages or losses), even if such Contributor\n   has been advised of the possibility of such damages.\n\n9. Accepting Warranty or Additional Liability. While redistributing\n   the Work or Derivative Works thereof, You may choose to offer,\n   and charge a fee for, acceptance of support, warranty, indemnity,\n   or other liability obligations and/or rights consistent with this\n   License. However, in accepting such obligations, You may act only\n   on Your own behalf and on Your sole responsibility, not on behalf\n   of any other Contributor, and only if You agree to indemnify,\n   defend, and hold each Contributor harmless for any liability\n   incurred by, or claims asserted against, such Contributor by reason\n   of your accepting any such warranty or additional liability.\n\nEND OF TERMS AND CONDITIONS\n\nAPPENDIX: How to apply the Apache License to your work.\n\n   To apply the Apache License to your work, attach the following\n   boilerplate notice, with the fields enclosed by brackets \"[]\"\n   replaced with your own identifying information. (Don't include\n   the brackets!)  The text should be enclosed in the appropriate\n   comment syntax for the file format. We also recommend that a\n   file or class name and description of purpose be included on the\n   same \"printed page\" as the copyright notice for easier\n   identification within third-party archives.\n\nCopyright 2019 Authors of Red Sift\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\n   limitations under the License.\n"
        },
        {
          "name": "LICENSE-MIT",
          "type": "blob",
          "size": 1.0400390625,
          "content": "Copyright (c) 2019, Authors of Red Sift\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n\"Software\"), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\nNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\nLIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\nOF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\nWITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n"
        },
        {
          "name": "PREAMBLE",
          "type": "blob",
          "size": 0.328125,
          "content": "// Copyright 2019 Authors of Red Sift\n//\n// Licensed under the Apache License, Version 2.0, <LICENSE-APACHE or\n// http://apache.org/licenses/LICENSE-2.0> or the MIT license <LICENSE-MIT or\n// http://opensource.org/licenses/MIT>, at your option. This file may not be\n// copied, modified, or distributed except according to those terms.\n\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 11.361328125,
          "content": "RedBPF\n======\n\n![LICENSE](https://img.shields.io/badge/license-MIT%2FApache--2.0-blue.svg)\n[![element](https://img.shields.io/matrix/redbpf:rustch.at?server_fqdn=rustch.at)](https://app.element.io/#/room/!vCJcBZDeGUXaqSvPpL:rustch.at?via=rustch.at)\n\nA Rust eBPF toolchain.\n\n# Overview\n\nThe redbpf project is a collection of tools and libraries to build eBPF\nprograms using Rust. It includes:\n\n- [redbpf](https://docs.rs/redbpf/latest/redbpf/) - a user space library that can be\n  used to load eBPF programs or access eBPF maps.\n\n- [redbpf-probes](https://docs.rs/redbpf-probes/latest/redbpf_probes/) - an idiomatic Rust\n  API to write eBPF programs that can be loaded by the linux kernel\n\n- [redbpf-macros](https://docs.rs/redbpf-macros/latest/redbpf_macros/) - companion crate to\n  `redbpf-probes` which provides convenient procedural macros useful when\n  writing eBPF programs. For example, `#[map]` for defining a map, `#[kprobe]`\n  for defining a BPF program that can be attached to kernel functions.\n\n- [cargo-bpf](./cargo-bpf/src/main.rs) - a cargo subcommand for creating,\n  building and debugging eBPF programs\n\n# Features\n\n- Allows users to write both BPF programs and userspace programs in Rust\n- Offers many BPF map types\n  1. `HashMap`, `PerCpuHashMap`, `LruHashMap`, `LruPerCpuHashMap`, `Array`,\n     `PerCpuArray`, `PerfMap`, `TcHashMap`, `StackTrace`, `ProgramArray`,\n     `SockMap`, `DevMap`, `RingBuf`\n- Offers several BPF program types\n  1. `KProbe`, `KRetProbe`, `UProbe`, `URetProbe`, `SocketFilter`, `XDP`,\n     `StreamParser`, `StreamVerdict`, `TaskIter`, `SkLookup`, `Tracepoint`\n- Provides attribute macros that define various kind of BPF programs and BPF\n  maps in a declarative way.\n  1. `#[kprobe]`, `#[kretprobe]`, `#[uprobe]`, `#[uretprobe]`, `#[xdp]`,\n     `#[tc_action]`, `#[socket_filter]`, `#[stream_parser]`,\n     `#[stream_verdict]`, `#[task_iter]`, `#[tracepoint]`\n  2. `#[map]`\n- Can generate Rust bindings from the Linux kernel headers or from the BTF of\n  `vmlinux`\n- Provides API for both BPF programs and userspace programs to help users write\n  Rust idiomatic code\n- Supports BTF for maps\n- Supports pinning maps and loading maps from pins\n- Supports BPF iterator for `task`\n- Enables users to write BPF programs for `tc` action and RedBPF compiles the\n  programs into the ELF object file that is compatible with `tc` command\n- Provides wrappers of BPF helper functions\n- Offers asynchronous stream of `perf events` for userspace programs\n- Supports multiple versions of LLVM\n- Shows BPF verifier logs when loading BPF programs, BPF maps or BTF fails\n- Has several example programs that are separated into two parts: BPF programs\n  and userspace programs\n\n# Install\n\n## Requirements\n\n`LLVM` is required in your build system to compile BPF bytecode using RedBPF.\n\n- **LLVM 13**  \n  It is needed to compile BPF bytecode.\n\n- One of the followings:\n  1. The Linux kernel headers\n  2. `vmlinux`, the Linux kernel image that contains `.BTF` section\n  3. Raw BTF data i.e. `/sys/kernel/btf/vmlinux`  \n  These are needed to generate Rust bindings of the data structures of the Linux kernel.\n\n### On Ubuntu 20.04 LTS\n\nInstall LLVM 13 and the Linux kernel headers\n```console\n# apt-get update \\\n  && apt-get -y install \\\n       wget \\\n       build-essential \\\n       software-properties-common \\\n       lsb-release \\\n       libelf-dev \\\n       linux-headers-generic \\\n       pkg-config \\\n  && wget https://apt.llvm.org/llvm.sh && chmod +x llvm.sh && ./llvm.sh 13 && rm -f ./llvm.sh\n# llvm-config-13 --version | grep 13\n```\n\n### On Fedora 35\n\nInstall LLVM 13 and the Linux kernel headers\n```console\n# dnf install -y \\\n    clang-13.0.0 \\\n\tllvm-13.0.0 \\\n\tllvm-libs-13.0.0 \\\n\tllvm-devel-13.0.0 \\\n\tllvm-static-13.0.0 \\\n\tkernel \\\n\tkernel-devel \\\n\telfutils-libelf-devel \\\n\tmake \\\n    pkg-config \\\n    zstd\n# llvm-config --version | grep 13\n```\n\n### On Arch Linux\n\nInstall LLVM 13 and the Linux kernel headers\n\n```console\n# pacman --noconfirm -Syu \\\n  && pacman -S --noconfirm \\\n       llvm \\\n       llvm-libs \\\n       libffi \\\n       clang \\\n       make \\\n       pkg-config \\\n       linux-headers \\\n       linux\n# llvm-config --version | grep -q '^13'\n```\n\n### Building LLVM from source\n\nIf your Linux distro does not support the latest LLVM as pre-built packages\nyet, you may build LLVM from the LLVM source code.\n\n```console\n$ tar -xaf llvm-13.0.0.src.tar.xz\n$ mkdir -p llvm-13.0.0.src/build\n$ cd llvm-13.0.0.src/build\n$ cmake .. -DCMAKE_INSTALL_PREFIX=$HOME/llvm-13-release -DCMAKE_BUILD_TYPE=Release -DLLVM_BUILD_LLVM_DYLIB=1\n$ cmake --build . --target install\n```\n\nThen you can use your LLVM by specifying the custom installation path when\ninstalling `cargo-bpf` or building RedBPF like this:\n\n```console\n$ LLVM_SYS_130_PREFIX=$HOME/llvm-13-release/ cargo install cargo-bpf\n$ LLVM_SYS_130_PREFIX=$HOME/llvm-13-release/ cargo build\n```\n\nMake sure correct `-DCMAKE_BUILD_TYPE` is specified. Typically `Debug` type is\nnot recommended if you are not going to debug LLVM itself.\n\n\n## Installing `cargo-bpf`\n\n`cargo-bpf` is a command line tool for compiling BPF program written in Rust\ninto BPF bytecode.\n\n```console\n$ cargo install cargo-bpf\n$ cargo bpf --version\n```\n\nYou can learn how to use this from [tutorial](TUTORIAL.md).\n\n## Building RedBPF from source\n\nIf you want to build RedBPF from source to fix something, you can do as follows:\n\n```console\n$ git clone https://github.com/foniod/redbpf.git\n$ cd redbpf\n$ git submodule sync\n$ git submodule update --init\n$ cargo build\n$ cargo build --examples\n```\n\n# Getting started\n\nThe easiest way to get started is reading a [basic tutorial](TUTORIAL.md).\n\nYou can find several examples in this [directory](examples/). All example\nprograms are splitted into two parts: `example-probes` and\n`example-userspace`. `example-probes` contains BPF programs that execute in\nkernel context. `example-userspace` includes userspace programs that load BPF\nprograms into kernel space and communicate with BPF programs through BPF maps.\n\nSee also [documentation](./cargo-bpf/src/main.rs) of `cargo-bpf`. It provides a\nCLI tool for compiling BPF programs easily.\n\n[redbpf-tools](https://github.com/foniod/redbpf/tree/master/redbpf-tools) is a\n`cargo-bpf` generated crate that includes simple examples you can use to\nunderstand how to structure your programs.\n\nFinally, check the [foniod project](https://github.com/foniod/foniod) that\nincludes more advanced, concrete production ready examples of redbpf programs.\n\n## Valid combinations of Rust and LLVM versions\n\n`rustc` is linked to its own bundled version of LLVM. And `cargo-bpf` also uses\nits own version of LLVM that is statically linked into `cargo-bpf` itself. But\nnote that users can control the LLVM version of `cargo-bpf` by providing other\nversions of LLVM in their system when building `cargo-bpf`.\n\nWhy do we care about two LLVM versions?  \nBecause both two versions of LLVMs are all participating in the process of\ncompiling BPF programs.\n\n1. RedBPF executes `rustc` to compile BPF programs. And `rustc` calls LLVM\n   functions to emit LLVM bitcode.\n2. And then RedBPF parses the emitted LLVM bitcode to convert it into BPF\n   bytecode. To do so, it calls LLVM functions that are statically linked into\n   `cargo-bpf`.\n\nWhat happens if LLVM of `rustc` is newer than the LLVM of `cargo-bpf`? You\nalready feel it. BAM!  Typically older version of LLVM can not properly handle\nthe bitcode that is generated by newer version of LLVM. i.e., `cargo-bpf` with\nolder LLVM can not properly handle what `rustc` with newer LLVM emits.\n\nWhat happens if LLVM of `rustc` is older than the LLVM of `cargo-bpf`? Normally\nLLVM is likely to support backward compatibility for intermediate\nrepresentation.\n\nLet's put things together.\n\nThere are two LLVM versions involved in compiling BPF programs:\n\n1. the version of LLVM**(1)** that `cargo-bpf` is statically linked to when\n   `cargo-bpf` is built.\n2. the version of LLVM**(2)** that `rustc` is linked to.\n\n*And*, **(1)** should be greater than or equal to **(2)**.  \n*It is the best case if `(1) == (2)` but `(1) > (2)` is also okay.*\n\n| Rust version | LLVM version of the rustc | Valid LLVM version of system |\n|:-------------|:-------------------------:|:-----------------------------|\n| 1.56 ~       | LLVM 13                   | LLVM 13 and newer            |\n\n## Docker images for RedBPF build test\n\nYou can refer to various `Dockerfile`s that contain minimal necessary packages\nto build `RedBPF` properly: [Dockerfiles for\nRedBPF](https://github.com/foniod/build-images/redbpf)\n\nThese docker images are pushed to ghcr.io:\n\nx86_64\n- `ghcr.io/foniod/redbpf-build:latest-x86_64-ubuntu21.04`\n- `ghcr.io/foniod/redbpf-build:latest-x86_64-fedora35`\n- `ghcr.io/foniod/redbpf-build:latest-x86_64-alpine3.15`\n- `ghcr.io/foniod/redbpf-build:latest-x86_64-debian11`\n- `ghcr.io/foniod/redbpf-build:latest-x86_64-archlinux`\n\nARM64\n- `ghcr.io/foniod/redbpf-build:latest-aarch64-ubuntu21.04`\n- `ghcr.io/foniod/redbpf-build:latest-aarch64-fedora35`\n- `ghcr.io/foniod/redbpf-build:latest-aarch64-alpine3.15`\n- `ghcr.io/foniod/redbpf-build:latest-aarch64-debian11`\n\nSee [build-test.yml](.github/workflows/build-test.yml) for more information.\nIt describes build tests of RedBPF that run inside docker containers.\n\nIf you want docker images that are prepared to build `foniod` then refer to\nthis: [Dockerfiles for foniod](https://github.com/foniod/build-images)\n\n## Note for building RedBPF inside docker containers\n\nYou need to specify `KERNEL_SOURCE` or `KERNEL_VERSION` environment variables\nthat indicate kernel headers. The headers should be found inside the\ncontainer. For example, inside the Ubuntu 21.04 container that contains the\nLinux `5.11.0-25-generic` kernel headers, you should specify `KERNEL_VERSION`\nenvironment variable as follows:\n\n```console\n# KERNEL_VERSION=5.11.0-25-generic cargo build --examples\n```\n\nIf your container has `vmlinux`, the Linux kernel image that contains `.BTF`\nsection in it, you can specify it instead of the Linux kernel headers.\n\n```console\n# REDBPF_VMLINUX=/boot/vmlinux cargo build --examples\n```\n\nSee [build-test.yml](.github/workflows/build-test.yml) for more information.\nIt describes build tests of RedBPF that run inside docker containers.\n\n## Supported Architectures\n\nCurrently, `x86-64` and `aarch64` architectures are supported.\n\n\n# License\n\nThis repository contains code from other software in the following\ndirectories, licensed under their own particular licenses:\n\n * `bpf-sys/libbpf`: LGPL2 + BSD-2\n\nWhere '+' means they are dual licensed.\n\nRedBPF and its components, unless otherwise stated, are licensed under either of\n\n * Apache License, Version 2.0, ([LICENSE-APACHE](LICENSE-APACHE) or\n\thttp://www.apache.org/licenses/LICENSE-2.0)\n * MIT license ([LICENSE-MIT](LICENSE-MIT) or http://opensource.org/licenses/MIT)\n\nat your option.\n\n# Contribution\n\nThis project is for everyone. We ask that our users and contributors\ntake a few minutes to review our [code of conduct](https://github.com/foniod/project/blob/main/CODE_OF_CONDUCT.md).\n\nUnless you explicitly state otherwise, any contribution intentionally submitted\nfor inclusion in the work by you, as defined in the Apache-2.0 license, shall\nbe dual licensed as above, without any additional terms or conditions.\n\nFor further advice on getting started, please consult the [Contributor's\nGuide](https://github.com/foniod/project/blob/main/CONTRIBUTING.md). Please\nnote that all contributions MUST contain a [Developer Certificate of\nOrigin](https://github.com/foniod/project/blob/developer-certificate-of-origin/CONTRIBUTING.md#developer-certificate-of-origin)\nsign-off line.\n"
        },
        {
          "name": "TUTORIAL.md",
          "type": "blob",
          "size": 19.25,
          "content": "RedBPF Basic Tutorial\n====\n\n<!-- markdown-toc start - Don't edit this section. Run M-x markdown-toc-refresh-toc -->\n**Table of Contents**\n\n- [RedBPF Basic Tutorial](#redbpf-basic-tutorial)\n    - [Small background](#small-background)\n    - [Let's make our first program using RedBPF](#lets-make-our-first-program-using-redbpf)\n        - [Step 1. Generate scaffolds](#step-1-generate-scaffolds)\n        - [Step 2. Add a new BPF program](#step-2-add-a-new-bpf-program)\n        - [Step 3. Write the BPF program](#step-3-write-the-bpf-program)\n        - [Step 4. Compile the BPF program](#step-4-compile-the-bpf-program)\n        - [Step 5. Write a userspace program](#step-5-write-a-userspace-program)\n        - [Step 6. Compile the userspace program](#step-6-compile-the-userspace-program)\n        - [Step 7. Run](#step-7-run)\n\n<!-- markdown-toc end -->\n\nSmall background\n----\n\n* A **BPF program** is defined by a single rust function and it can be attached\n  to instrumentation points. There are many kinds of BPF programs such as\n  kprobe, xdp, tracepoint, socket filter and so on. And also there are many\n  mechanisms that attach those different kinds of BPF programs to\n  instrumentation points. In this tutorial, we are going to define a kprobe BPF\n  program and attach it to a kernel function.\n* A **BPF maps** is used by both BPF programs and userspace programs to\n  communicate with each other. There are many kinds of BPF maps such as\n  hashmap, array, perf event array, sockmap and so forth.\n* `redbpf-macros` provides attribute macros for defining BPF programs and BPF\n  maps.\n* `redbpf-probes` provides API for BPF programs that execute in kernel context.\n* `redbpf` provides API for userspace programs. Userspace programs load BPF\n  programs and BPF maps to kernel space and communicate with BPF programs\n  through BPF maps.\n\n### Building LLVM from source\n\n*If you already installed LLVM with a package manager you can skip this this\nsection. Installing LLVM by a package manager is a simple and preferred way.*\n\nFor some reasons, you may want to build LLVM from source code.\n\nWhen you build LLVM, consider building LLVM with `Release` build mode.\n\nFor example, when you build LLVM13 from source code, you can pass\n`-DCMAKE_BUILD_TYPE=Release` to the `cmake` command as below:\n\n```console\n$ tar -xaf llvm-13.0.0.src.tar.xz\n$ mkdir -p llvm-13.0.0.src/build\n$ cd llvm-13.0.0.src/build\n$ cmake .. -DCMAKE_INSTALL_PREFIX=$HOME/llvm-13-release -DCMAKE_BUILD_TYPE=Release\n$ cmake --build . --target install\n```\n\nUnless you plan to debug LLVM itself, `Release` or `MinSizeRel` is a good\nchoice.\n\nIf you try compiling BPF programs with a `Debug` LLVM, the memory consumption\ncan be increased over 20GB! And also it takes more time to finish. See [this\nissue](https://github.com/foniod/redbpf/issues/194#issuecomment-940964881) for\nmore information.\n\nLet's make our first program using RedBPF\n----\n\nWe are going to make our first BPF program and its corresponding userspace\nprogram. The BPF program will be attached to a `do_sys_open` kernel function\nand it will generate a perf event delivering an open filename to userspace\nwhenever the kernel function is invoked. And its corresponding userspace\nprogram will listen to the perf events and print the filename to stdout\nwhenever the event occurs.\n\n\n### Step 1. Generate scaffolds\n\nInstall `cargo-bpf` command:\n```console\n$ cargo install cargo-bpf\n```\n\nThis command is working as a cargo sub-command: `cargo bpf`.\n\nLet's create a normal cargo project, `redbpf-tutorial`:\n```console\n$ cargo new redbpf-tutorial\n$ cd redbpf-tutorial\n$ ls\nCargo.toml  src/\n```\n\nCreate `probes` sub cargo project directory to contain BPF programs:\n```console\n$ cargo bpf new probes\n$ ls\nCargo.toml  probes/  src/\n```\n\nNow you have two cargo project directories: `redbpf-tutorial` and\n`redbpf-tutorial/probes`. The former directory is for redbpf userspace programs and\nthe latter directory is for BPF programs.\n\n\n### Step 2. Add a new BPF program\n\nIn this tutorial, you are going to write a simple BPF program that will be\nattached to the `do_sys_open` kernel function. And that program generates\nperf events whenever `do_sys_open` is called.\n\nCreate a template of a new BPF program by executing this command:\n```console\n$ cd probes\n$ cargo bpf add openmonitor\n$ ls src/\nlib.rs  openmonitor/\n$ cat Cargo.toml\n\n... omitted ...\n\n[[bin]]\nname = \"openmonitor\"\npath = \"src/openmonitor/main.rs\"\nrequired-features = [\"probes\"]\n```\n\n↑ I picked a name `openmonitor` but you may choose another elegant one. As you\ncan see, `src/openmonitor` directory is just created and it's a new room for\nyour first BPF program. And also a few lines of configuration are appended to\n`Cargo.toml`. It makes the first BPF program get compiled.\n\n\n### Step 3. Write the BPF program\n\nOpen `src/openmonitor/main.rs` with your favorite editor.\n\n```rust\n#![no_std]\n#![no_main]\n```\n\n↑ These two macro attributes are required. Because BPF programs are executed in\nkernel context, rust `std` library can not be used. So `#![no_std]` should be\napplied.\n\nAnd `#![no_main]` is applied because a main function is unnecessary. Regard\nthat a BPF program is just single function that are attached to some\ninstrumentation point and executed whenever that point is invoked. So the main\nfunction is not used here.\n\n```rust\nuse redbpf_probes::kprobe::prelude::*;\n```\n\n↑ Include necessary symbols by using a kprobe prelude module.\n\nThis brings symbols listed below to the current namespace:\n\n- BPF helper functions\n- macro attributes like `kprobe`, `kretprobe`, `map` and `program` macro.\n- maps API such as `redbpf_probes::maps::HashMap`,\n  `redbpf_probes::maps::PerfMap`\n- rust bindings for common kernel structures like `struct sock`, `struct file`\n\n```rust\nprogram!(0xFFFFFFFE, \"GPL\");\n```\n\n↑ This macro sets version and license of BPF programs. The license must be GPL\ncompatible to use GPL-ed functions that the Linux kernel provides. And version\nis passed to the Linux kernel when loading the BPF program but it is not used\ninside the kernel. Also this macro sets `panic_handler` for BPF programs.\n\n```rust\n#[map]\nstatic mut OPEN_PATHS: PerfMap<OpenPath> = PerfMap::with_max_entries(1024);\n```\n\n↑ `PerfMap` is a kind of BPF maps and it is used to pass perf events to\nuserspace program. This statement defines a static mutable `PerfMap` that\nhandles a `OpenPath` structure. And `#[map]` macro attribute is applied to the\n`OPEN_PATHS` static item to indicate that the item is a BPF map.\n\n```rust\n#[kprobe]\nfn do_sys_open(regs: Registers) {\n    let mut path = OpenPath::default();\n    unsafe {\n        let filename = regs.parm2() as *const u8;\n        if bpf_probe_read_user_str(\n            path.filename.as_mut_ptr() as *mut _,\n            path.filename.len() as u32,\n            filename as *const _,\n        ) <= 0\n        {\n            bpf_trace_printk(b\"error on bpf_probe_read_user_str\\0\");\n            return;\n        }\n        OPEN_PATHS.insert(regs.ctx, &path);\n    }\n}\n```\n\n↑ This is the main logic of the BPF program. `#[kprobe]` macro attribute\nindicates that this item is a BPF program, and this can be attached to entry\npoints of kernel functions using kprobe. The name of a function is merely a\nhint. The function name, `do_sys_open`, implies that this function is\nintended to be attached to do_sys_open kernel function. Determining where\n`do_sys_open` will be attached to is up to userspace program. We will make\nuserspace part soon.\n\nWhen you define a function that will be attached to kernel functions using\nkprobe, a parameter of the function is always `Registers`. And parameters of\nthe kernel function can be accessed through it. The signature of the Linux\nkernel function do_sys_open is `long do_sys_open(int dfd, const char __user \n*filename, int flags, umode_t mode)` so we can get the `filename` by\ncalling `Registers::parm2()`.\n\n`bpf_probe_read_user_str` BPF helper function copies a string to a buffer and\nreturns a copied length including a terminal NUL byte. And `OPEN_PATHS.insert`\ninserts `OpenPath` to the perf event array.\n\nIf `bpf_probe_read_user_str` returns a negative integer, it means an error. In\nthis case, this BPF program prints error message to a file\n`/sys/kernel/debug/tracing/trace_pipe` by using `bpf_trace_printk`. Note that\nthe **bytes passed to `bpf_trace_printk` should include terminal `NUL` byte**.\n\n> **NOTE:** Your Linux kernel may not provide `bpf_probe_read_user_str` BPF\n> helper function. This function is introduced by the Linux v5.5 so if your\n> kernel is older than that, the BPF verifier would complain *\"invalid func\n> unknown#114\"*.\n>\n> In this situation, you can use `bpf_probe_read_str` instead. It is the old\n> version of `bpf_probe_read_user_str`.\n\nThe **full source code** of `src/openmonitor/main.rs` is here:\n\n```rust\n#![no_std]\n#![no_main]\n\nuse probes::openmonitor::*;\nuse redbpf_probes::kprobe::prelude::*;\n\nprogram!(0xFFFFFFFE, \"GPL\");\n\n#[map]\nstatic mut OPEN_PATHS: PerfMap<OpenPath> = PerfMap::with_max_entries(1024);\n\n#[kprobe]\nfn do_sys_open(regs: Registers) {\n    let mut path = OpenPath::default();\n    unsafe {\n        let filename = regs.parm2() as *const u8;\n        if bpf_probe_read_user_str(\n            path.filename.as_mut_ptr() as *mut _,\n            path.filename.len() as u32,\n            filename as *const _,\n        ) <= 0\n        {\n            bpf_trace_printk(b\"error on bpf_probe_read_user_str\\0\");\n            return;\n        }\n        OPEN_PATHS.insert(regs.ctx, &path);\n    }\n}\n```\n\nThere's one thing to finish before compiling the first BPF program.\n\nOpen `src/openmonitor/mod.rs` with your editor and define the `OpenPath`\nstructure.\n\n```rust\npub const PATHLEN: usize = 256;\n\n#[repr(C)]\n#[derive(Debug, Clone)]\npub struct OpenPath {\n    pub filename: [u8; PATHLEN],\n}\n\nimpl Default for OpenPath {\n    fn default() -> OpenPath {\n        OpenPath {\n            filename: [0; PATHLEN],\n        }\n    }\n}\n```\n\n↑ `OpenPath` is a structure with C representation and it holds a `filename`\narray. This structure is passed to perf event array and it delivers a filename\nbetween a BPF program and a userspace program.\n\nYou just completed the first BPF program! Let's go compile it now.\n\n\n### Step 4. Compile the BPF program\n\nCompile the BPF program by running this command in the `probes` directory:\n\n```console\n$ cargo bpf build --target-dir=../target\n\n... omitted ...\n\nFinished release [optimized] target(s) in 1m 05s\n$ ls ../target/bpf/programs/openmonitor/openmonitor.elf\n```\n\n↑ By running `cargo bpf build` command, the `openmonitor.elf` file is just\ncreated. It is ELF relocatable file so it's not possible to execute this file\ndirectly. Instead we can parse the BPF program and the BPF map defined in this\nfile and load them to the Linux kernel by calling redbpf userspace API.\n\n`--target-dir=../target` option is specified here to make redbpf userspace\nprogram readily locate the ELF relocatable file under its default target\ndirectory.\n\n\n### Step 5. Write a userspace program\n\nLet's go develop a program that utilizes redbpf userspace API.\n\n```console\n$ cd ..\n$ ls\nCargo.toml  probes/  src/  target/\n```\n\nOpen `Cargo.toml` with your favorite editor and add dependencies:\n\n```toml\nredbpf = { version = \"2.3.0\", features = [\"load\"] }\ntokio = { version = \"1.0\", features = [\"rt\", \"signal\", \"time\", \"io-util\", \"net\", \"sync\"] }\ntracing-subscriber = \"0.2\"\ntracing = \"0.1\"\nfutures = \"0.3\"\n\nprobes = { path = \"./probes\" }\n```\n\n↑ Dependencies to use redbpf:\n\n* `redbpf`: The `load` feature of `redbpf` is optional but it is recommended\n  because it helps you load ELF relocatable file (the `openmonitor.elf` file)\n  easily. `redbpf` crate is responsible for userspace part.\n...* `redbpf-probes` and `redbpf-macros` crates are responsible for BPF\n  programs running in kernel context. Check your `probes/Cargo.toml` then you\n  will see these crates are listed in dependencies.\n* `tokio`: `redbpf` is running in the context of `tokio` run-time, so `tokio`\n  is required.\n* `futures`: `futures::stream::StreamExt` trait is needed to utilize\n  asynchronous tasks.\n* `probes`: `probes` is listed here because we need the definition of the\n  `OpenPath` structure in `probes/src/openmonitor/mod.rs`. If a BPF program and\n  a userspace program communicate with only primitive types so that there are\n  no custom structures, then you don't need `probes` dependency here.\n* *(optional)* `tracing-subscriber` + `tracing`: `redbpf` records its error\n  logs using `tracing` crate. So it is recommended for users to subscribe to\n  the error logs of `redbpf`. If you don't subscribe to the error logs, then\n  they will be silently discarded.\n\nOpen `src/main.rs` with your editor and write a userspace program:\n\n```rust\nfn probe_code() -> &'static [u8] {\n    include_bytes!(concat!(\n        env!(\"CARGO_MANIFEST_DIR\"),\n        \"/target/bpf/programs/openmonitor/openmonitor.elf\"\n    ))\n}\n```\n\n↑ This includes binary of ELF relocatable file into an executable file of the\nuserspace program so that you only need the executable file at run-time. The\nELF relocatable file is needless at run-time.\n\n```rust\n#[tokio::main(flavor = \"current_thread\")]\nasync fn main() {}\n```\n\n↑ `redbpf` works in the context of `tokio` run-time so `redbpf` should be called\ninside async functions.\n\n```rust\nuse tracing::Level;\nuse tracing_subscriber::FmtSubscriber;\n\n// ... omitted ...\nasync fn main() {\n    let subscriber = FmtSubscriber::builder()\n        .with_max_level(Level::WARN)\n        .finish();\n    tracing::subscriber::set_global_default(subscriber).unwrap();\n}\n```\n\n↑ It is recommended to subscribe the error logs of `redbpf` for debugging\nerrors while developing a `redbpf` userspace program. But subscribing to error\nlogs is entirely optional. You may skip this code. It is up to you.\n\n```rust\nuse redbpf::load::Loader;\n\n// ... omitted ...\n\n    let mut loaded = Loader::load(probe_code()).expect(\"error on Loader::load\");\n\n    let probe = loaded\n        .kprobe_mut(\"do_sys_open\")\n        .expect(\"error on Loaded::kprobe_mut\");\n    probe\n        .attach_kprobe(\"do_sys_open\", 0)\n        .expect(\"error on KProbe::attach_kprobe\");\n    probe\n        .attach_kprobe(\"do_sys_openat2\", 0)\n        .expect(\"error on KProbe::attach_kprobe\");\n```\n\n↑ `Loader::load` parses an ELF relocatable file and loads all BPF maps and BPF\nprograms into the Linux kernel automatically. The remainder of the work is to\nattach the BPF programs to instrumentation points that you want.\n\nIn case of `openmonitor`, we wrote the BPF program that is designed to attached\nto do_sys_open kernel function. `Loaded::kprobe_mut` gets a BPF program\nwhose name is `do_sys_open`. Do you remember that you defined a function of\nwhich name is `do_sys_open` in the previous step? `#[kprobe]` attribute can\nassign a name of a BPF program like this: `#[kprobe(\"CUSTOM_NAME_HERE\")]`. If\nno custom name is specified explicitly, the function's name is used as a kprobe\nBPF program's name instead. So you can get the BPF program by calling\n`loaded.kprobe_mut(\"do_sys_open\")`. On some systems, attaching to `do_sys_open`\nmay not result in any output. Instead, you can attach to do_sys_openat2.\nYou can also attach to both kernel functions, because the second param for\ndo_sys_openat2 is the same.\n\n`KProbe::attach_kprobe` attaches a kprobe BPF program to a specified kernel\nfunction.  So `attach_kprobe(\"do_sys_open\", 0)` attaches the kprobe BPF\nprogram to the `do_sys_open` kernel function entry at the offset 0 byte.\n\n```rust\nuse futures::stream::StreamExt;\nuse std::{ffi::CStr, ptr};\n\nuse probes::openmonitor::OpenPath;\n\n// ... omitted ...\n\n    while let Some((map_name, events)) = loaded.events.next().await {\n        if map_name == \"OPEN_PATHS\" {\n            for event in events {\n                let open_path = unsafe { ptr::read(event.as_ptr() as *const OpenPath) };\n                unsafe {\n                    let cfilename = CStr::from_ptr(open_path.filename.as_ptr() as *const _);\n                    println!(\"{}\", cfilename.to_string_lossy());\n                };\n            }\n        }\n    }\n```\n\n↑ A type of `loaded.events` is a\n`futures::channel::mpsc::UnboundedReceiver<(String, Vec<Box<[u8]>>)>`. In order\nto specify the `next()` method, `futures::stream::StreamExt` trait is imported\nhere.\n\nIn the `while` loop, `loaded.events.next().await` returns `(String,\nVec<Box<[u8]>>)`.\n\nThe first element is the name of the `PerfMap`. Do you remember the `PerfMap`\nin the BPF program code?\n\n```rust\n// This is the PerfMap you defined in the BPF program code\n#[map]\nstatic mut OPEN_PATHS: PerfMap<OpenPath> = PerfMap::with_max_entries(1024);\n```\n\nLike `#[kprobe]`, users can specify a custom name of a map like this:\n`#[map(link_section = \"maps/<MAP_NAME_HERE>\")]`. If a custom name is not\nspecified, then item's name is used as a name of a map. In our program's case,\n`OPEN_PATHS` is the map's name.\n\nThe second element, `Vec<Box<[u8]>>` is a vector for raw data. You should read\nit by a pointer of the `OpenPath` structure.\n\nThis is a **complete source code** of the userspace program code, `src/main.rs`:\n\n```rust\nuse futures::stream::StreamExt;\nuse std::{ffi::CStr, ptr};\nuse tracing::Level;\nuse tracing_subscriber::FmtSubscriber;\n\nuse redbpf::load::Loader;\n\nuse probes::openmonitor::OpenPath;\n\nfn probe_code() -> &'static [u8] {\n    include_bytes!(concat!(\n        env!(\"CARGO_MANIFEST_DIR\"),\n        \"/target/bpf/programs/openmonitor/openmonitor.elf\"\n    ))\n}\n\n#[tokio::main(flavor = \"current_thread\")]\nasync fn main() {\n    let subscriber = FmtSubscriber::builder()\n        .with_max_level(Level::WARN)\n        .finish();\n    tracing::subscriber::set_global_default(subscriber).unwrap();\n\n    let mut loaded = Loader::load(probe_code()).expect(\"error on Loader::load\");\n\n    let probe = loaded\n        .kprobe_mut(\"do_sys_open\")\n        .expect(\"error on Loaded::kprobe_mut\");\n    probe\n        .attach_kprobe(\"do_sys_open\", 0)\n        .expect(\"error on KProbe::attach_kprobe\");\n    probe\n        .attach_kprobe(\"do_sys_openat2\", 0)\n        .expect(\"error on KProbe::attach_kprobe\");\n\n    while let Some((map_name, events)) = loaded.events.next().await {\n        if map_name == \"OPEN_PATHS\" {\n            for event in events {\n                let open_path = unsafe { ptr::read(event.as_ptr() as *const OpenPath) };\n                unsafe {\n                    let cfilename = CStr::from_ptr(open_path.filename.as_ptr() as *const _);\n                    println!(\"{}\", cfilename.to_string_lossy());\n                };\n            }\n        }\n    }\n}\n```\n\n### Step 6. Compile the userspace program\n\nTo compile the userspace program, just run this command:\n\n```console\n$ ls\nCargo.toml  probes/  src/  target/\n$ cargo build\n```\n\n### Step 7. Run\n\nMost features of BPF require **root privileges**. So run the program by root.\n\n```console\n# cargo run\n/proc/driver/nvidia/params\n/dev/nvidia0\n/proc/driver/nvidia/params\n/dev/nvidia0\n/proc/driver/nvidia/params\n/dev/nvidia0\n/etc/localtime\n/lib/x86_64-linux-gnu/libcuda.so.1\n/lib/x86_64-linux-gnu/libm.so.6\n/etc/netconfig\n/sys/fs/cgroup/unified/system.slice/systemd-udevd.service/cgroup.procs\n/sys/fs/cgroup/unified/system.slice/systemd-udevd.service/cgroup.threads\n/proc/3084/cmdline\n/proc/3729/cmdline\n/proc/3994/cmdline\n/proc/8823/cmdline\n/proc/2231364/cmdline\n/proc/2431788/cmdline\n/proc/2560949/cmdline\n/sys/class/hwmon\n/sys/class/hwmon/hwmon6\n/sys/class/hwmon/hwmon4\n/sys/class/hwmon/hwmon2\n/sys/class/hwmon/hwmon0\n/sys/class/hwmon/hwmon7\n/sys/class/hwmon/hwmon5\n\n... omitted ...\n```\n\n↑ The output shows filenames that are currently open by any processes in the\nsystem wide. Your output will be totally different from mine.\n\nYes! You just completed the first BPF program and its userspace program using\nRedBPF.\n"
        },
        {
          "name": "bpf-sys",
          "type": "tree",
          "content": null
        },
        {
          "name": "cargo-bpf",
          "type": "tree",
          "content": null
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "flake.lock",
          "type": "blob",
          "size": 2.263671875,
          "content": "{\n  \"nodes\": {\n    \"flake-compat\": {\n      \"flake\": false,\n      \"locked\": {\n        \"lastModified\": 1650374568,\n        \"narHash\": \"sha256-Z+s0J8/r907g149rllvwhb4pKi8Wam5ij0st8PwAh+E=\",\n        \"owner\": \"edolstra\",\n        \"repo\": \"flake-compat\",\n        \"rev\": \"b4a34015c698c7793d592d66adbab377907a2be8\",\n        \"type\": \"github\"\n      },\n      \"original\": {\n        \"owner\": \"edolstra\",\n        \"repo\": \"flake-compat\",\n        \"type\": \"github\"\n      }\n    },\n    \"naersk\": {\n      \"inputs\": {\n        \"nixpkgs\": \"nixpkgs\"\n      },\n      \"locked\": {\n        \"lastModified\": 1650265945,\n        \"narHash\": \"sha256-SO8+1db4jTOjnwP++29vVgImLIfETSXyoz0FuLkiikE=\",\n        \"owner\": \"nix-community\",\n        \"repo\": \"naersk\",\n        \"rev\": \"e8f9f8d037774becd82fce2781e1abdb7836d7df\",\n        \"type\": \"github\"\n      },\n      \"original\": {\n        \"owner\": \"nix-community\",\n        \"repo\": \"naersk\",\n        \"type\": \"github\"\n      }\n    },\n    \"nixpkgs\": {\n      \"locked\": {\n        \"lastModified\": 1650726686,\n        \"narHash\": \"sha256-hE5PCqQlsdgWH3AUTwesvjZWs5ZUZ8SjMS5cnFB6W54=\",\n        \"owner\": \"NixOS\",\n        \"repo\": \"nixpkgs\",\n        \"rev\": \"3c0f57e36ed0cf9947281e3b31f1bebb7ce5d4a1\",\n        \"type\": \"github\"\n      },\n      \"original\": {\n        \"id\": \"nixpkgs\",\n        \"type\": \"indirect\"\n      }\n    },\n    \"nixpkgs_2\": {\n      \"locked\": {\n        \"lastModified\": 1650726686,\n        \"narHash\": \"sha256-hE5PCqQlsdgWH3AUTwesvjZWs5ZUZ8SjMS5cnFB6W54=\",\n        \"owner\": \"NixOS\",\n        \"repo\": \"nixpkgs\",\n        \"rev\": \"3c0f57e36ed0cf9947281e3b31f1bebb7ce5d4a1\",\n        \"type\": \"github\"\n      },\n      \"original\": {\n        \"id\": \"nixpkgs\",\n        \"type\": \"indirect\"\n      }\n    },\n    \"root\": {\n      \"inputs\": {\n        \"flake-compat\": \"flake-compat\",\n        \"naersk\": \"naersk\",\n        \"nixpkgs\": \"nixpkgs_2\",\n        \"utils\": \"utils\"\n      }\n    },\n    \"utils\": {\n      \"locked\": {\n        \"lastModified\": 1649676176,\n        \"narHash\": \"sha256-OWKJratjt2RW151VUlJPRALb7OU2S5s+f0vLj4o1bHM=\",\n        \"owner\": \"numtide\",\n        \"repo\": \"flake-utils\",\n        \"rev\": \"a4b154ebbdc88c8498a5c7b01589addc9e9cb678\",\n        \"type\": \"github\"\n      },\n      \"original\": {\n        \"owner\": \"numtide\",\n        \"repo\": \"flake-utils\",\n        \"type\": \"github\"\n      }\n    }\n  },\n  \"root\": \"root\",\n  \"version\": 7\n}\n"
        },
        {
          "name": "flake.nix",
          "type": "blob",
          "size": 2.03515625,
          "content": "{\n  inputs = {\n    nixpkgs.url = \"nixpkgs\";\n    utils.url = \"github:numtide/flake-utils\";\n    naersk.url = \"github:nix-community/naersk\";\n    flake-compat = {\n      url = \"github:edolstra/flake-compat\";\n      flake = false;\n    };\n  };\n\n  outputs = { self, nixpkgs, utils, naersk, ... }:\n    utils.lib.eachDefaultSystem (system:\n      let\n        pkgs = import nixpkgs { inherit system; };\n        naersk-lib = naersk.lib.\"${system}\";\n      in\n      rec {\n        # `nix build`\n        packages.cargo-bpf = naersk-lib.buildPackage {\n          meta = with pkgs.lib; {\n            description = \"Rust eBPF tooling\";\n            homepage = \"https://foniod.org\";\n            license = licenses.mit;\n            platforms = [ \"x86_64-linux\" \"aarch64-linux\" ];\n          };\n\n          name = \"cargo-bpf\";\n          version = \"3.0.0\";\n\n          src = ./.;\n          root = ./.;\n          gitSubmodules = true;\n\n          LIBCLANG_PATH = \"${pkgs.llvmPackages_14.libclang.lib}/lib\";\n          KERNEL_SOURCE = \"${pkgs.linuxPackages.kernel.dev}/lib/modules/${pkgs.linuxPackages.kernel.version}\";\n\n          nativeBuildInputs = with pkgs; [\n            pkgconfig\n            llvm_14\n            clang_14\n          ];\n          buildInputs = with pkgs; [\n            openssl\n            zlib\n            libxml2\n            libelf\n            llvm_13.dev\n            clang_13\n            linuxPackages.kernel.dev\n            linuxHeaders\n            glibc.dev\n          ];\n        };\n        defaultPackage = packages.cargo-bpf;\n\n        defaultApp = apps.cargo-bpf;\n        apps.cargo-bpf = {\n          type = \"app\";\n          program = \"${self.defaultPackage.\"${system}\"}/bin/cargo-bpf\";\n        };\n\n        # `nix develop`\n        devShell = pkgs.mkShell {\n          inputsFrom = [ self.packages.${system}.cargo-bpf ];\n          nativeBuildInputs = with pkgs; [\n            cargo\n            pkg-config\n            rustc\n            rust-analyzer\n            rustfmt\n            clippy\n          ];\n\n          LIBCLANG_PATH = \"${pkgs.llvmPackages_14.libclang.lib}/lib\";\n        };\n      });\n}\n"
        },
        {
          "name": "redbpf-macros",
          "type": "tree",
          "content": null
        },
        {
          "name": "redbpf-probes",
          "type": "tree",
          "content": null
        },
        {
          "name": "redbpf-tools",
          "type": "tree",
          "content": null
        },
        {
          "name": "redbpf",
          "type": "tree",
          "content": null
        },
        {
          "name": "scripts",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}