{
  "metadata": {
    "timestamp": 1736709214594,
    "page": 497,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjUwMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "rust-rocksdb/rust-rocksdb",
      "stars": 1908,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.07421875,
          "content": "*.swo\ntarget\nCargo.lock\n*.orig\n*.bk\n*rlib\ntags\npath\n.DS_Store\n.idea\n.vscode\n"
        },
        {
          "name": ".gitmodules",
          "type": "blob",
          "size": 0.2138671875,
          "content": "[submodule \"rocksdb_sys/snappy\"]\n\tpath = librocksdb-sys/snappy\n\turl = https://github.com/google/snappy.git\n[submodule \"rocksdb_sys/rocksdb\"]\n\tpath = librocksdb-sys/rocksdb\n\turl = https://github.com/facebook/rocksdb.git\n"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 21.669921875,
          "content": "# Changelog\n\n## 0.23.0 (2024-12-23)\n\n* Build status badge and other bits in README.md (jdanford)\n* Adds `crt_static` method (spector-9)\n* Fix `ptr::copy` requires both ptrs to be non-null (ruanpetterson)\n* Add portable feature for RocksDB build (sujayakar)\n* Update README.md with a new section for the portable feature (sujayakar)\n* Update to RocksDB 9.0.0 (Dirreke)\n* Add readme for mt_static feature (spector-9)\n* Make `BackupEngine` Send (widagdos)\n* Add linking `libatomic` command to `build.rs` to allow building (willemolding)\n* Revert portable feature as it doesn't do anything (zaidoon1)\n* Add delete_range to `OptimisticTransactionDB` (vadim-su)\n* Update rust toolchain to 1.70.0 (widagdos)\n* Bump snappy to 1.2.0 (aleksuss)\n* Document that `default` column family doesn't inherit open options of db (0xdeafbeef)\n* Toolchain: pin toolchain to rust 1.70.0 (cratelyn)\n* Add clippy MSRV and some clippy fixes (Congyuwang)\n* Port all value of `ReadTier` (w41ter)\n* Update src/db_options.rs (w41ter)\n* Add option `set_avoid_unnecessary_blocking_io` (w41ter)\n* Add option to enable autotuned ratelimiter (w41ter)\n* Add support for enabling blob cache (exabytes18)\n* Fix: android build in 32-bit devices (LucasXu0)\n* Support user defined timestamp in rust bindings (siyuan0322)\n* Bump lz4 1.10 (agourlay)\n* Properties for the `TransactionDB` (4TT1L4)\n* Improvements to user defined timestamp (larry0x)\n* Implement Sync for `{Bound}ColumnFamily` (jhpratt)\n* Use the provided system rocksdb prebuilt on FreeBSD (girlbossceo)\n* Deprecated Node version and outdated GitHub Actions (4TT1L4)\n* Fix cargo audit check in GitHub Actions CI (aleksuss)\n* RUSTSEC-2023-0020: `const-cstr` is Unmaintained (4TT1L4)\n* TransactionDB support in MemoryUsageBuilder (4TT1L4)\n* Bump `tikv-jemalloc-sys` to 0.6 (0xdeafbeef)\n* Improve statistics by auto gen enum Ticker & enum Histogram (rockeet)\n* Expose LRU cache options (athre0z)\n* Add `Env::from_raw` constructor (jgraettinger)\n* Fix unsoundness via impure `AsRef` (niklasf)\n* Fix two tests that want to write to the current working directory (mr-c)\n* Add missing supported BSD OSes (drizzt)\n* Fix column family creation race (stuhood)\n* Allow using static feature for the `bindgen` (Congyuwang)\n* Use `tempfile` instead of the current working directory (mr-c)\n* Update to RocksDB 9.7.4 (niklasf)\n* Add `with_capacity_bytes` to `WriteBatch` (0xdeafbeef)\n* ci: make most directories read-only before running the tests (mr-c)\n* Add `ROCKSDB_SCHED_GETCPU_PRESENT` for Linux build config (popcnt1)\n* Add `set_compaction_pri` to `Options` (0xdeafbeef)\n* Implement get_db_identity using rocksdb_get_db_identity (evanj)\n* Add `lto` feature to enable link-time optimization using `linker-plugin-lto` (0xdeafbeef)\n* Add `set_track_and_verify_wals_in_manifest` (evanj)\n* Fix some typos (DeVikingMark)\n* Fix multiple typos of different importance (crStiv)\n* Bump rust version for cargo audit job (aleksuss)\n* Update to RocksDB 9.9.3 (niklasf)\n* Allow to specify ttl per column family (0xdeafbeef)\n\n## 0.22.0 (2024-02-13)\n\n* Free memory on writebatch index and avoid unnecessary clones (jkurian)\n* Update snappy to 1.1.10 (timsueberkrueb)\n* Prefer rocksdb_free to free for RocksDB memory (niklasf)\n* Expose flush_cfs_opt to flush multiple column families (lizhanhui)\n* Update to RocksDB 8.3.2 (niklasf)\n* Remove temporary boxed keys in batched_multi_get (axnsan12)\n* Convert properties to `&PropName` which can be converted at no cost to `&CStr` and `&str` (mina86)\n* Bump MSRV to 1.63.0 (mina86)\n* Add allow_ingest_behind ffi call for DB Options (siyuan0322)\n* Remove wrong outlive requirements for cache in docs (zheland)\n* Feat: support `column_family_metadata` and `column_family_metadata_cf` (ovr)\n* Update RocksDB to 8.5.3 (niklasf)\n* Expose ReadTier publicly (tinct-martini)\n* Update RocksDB to 8.6.7 (aleksuss)\n* Feat: expose `set_optimize_filters_for_memory` (zaidoon1)\n* Feat: expose compression option parallel_threads (zaidoon1)\n* Fix: add raw iterator validation before calling next method (aleksuss)\n* Fix typo in documentation (jazarine)\n* Feat: Expose `set_wal_compression_type` (ovr)\n* Update RocksDB to 8.8.1 (zaidoon1)\n* Feat: Expose `compact_on_deletion_collector_factory` (zaidoon1)\n* Fix bug in DBWALIterator that would return updates before the given sequence (schmidek)\n* Feat: Expose wait_for_compact (zaidoon1)\n* Feat: Expose `set_auto_readahead_size` (niklasf)\n* Update RocksDB to 8.9.1 (zaidoon1)\n* Feat: Expose `set_periodic_compaction_seconds` (zaidoon1)\n* Update hash commit of the rocksdb submodule to corresponding v8.9.1 (aleksuss)\n* Make CompactOptions Send and Sync (GodTamIt)\n* Update to RocksDB 8.10.0 (zaidoon1)\n* Add WriteBufferManager support (benoitmeriaux)\n* Update doc and parameter name for `optimize_for_point_lookup` (XiangpengHao)\n* Expose rocksdb cumulative statistics and histograms (AhmedSoliman)\n* Make FlushOptions Send and Sync (jansegre)\n* Export memory usage builder and MemoryUsage structs to users (AhmedSoliman)\n\n## 0.21.0 (2023-05-09)\n\n* Add doc-check to CI with fix warnings in docs (YuraKotov)\n* Fix rustdoc::broken-intra-doc-links errors (YuraKotov)\n* Fix 32-bit ARM build (EyeOfPython)\n* Allow specifying checksum type (romanz)\n* Enable librocksdb-sys to be built by rustc_codegen_cranelift (ZePedroResende)\n* Update to RocksDB 8.0.0 (niklasf)\n* Block cache creation failure is not recoverable (niklasf)\n* Update iOS min version to 12 in the build script (mighty840)\n* Actually enable `io-uring` (niklasf)\n* Update to RocksDB 8.1.1 (niklasf)\n* Add `Cache::new_hyper_clock_cache()` (niklasf)\n* Retrieve Value from KeyMayExist if value found in Cache or Memory (Congyuwang)\n* Support for comparators as closures (pegesund)\n* Fix bug in DBWALIterator that would miss updates (Zagitta)\n\n## 0.20.1 (2023-02-10)\n\n* Fix supporting MSRV 1.60.0 (aleksuss)\n\n## 0.20.0 (2023-02-09)\n\n* Support RocksDB 7.x `BackupEngineOptions` (exabytes18)\n* Fix `int128` compatibility check (Dirreke)\n* Add `Options::load_latest` method to load the latest options from RockDB (Congyuwang)\n* Bump bindgen to 0.64.0 (cwlittle)\n* Bump rocksdb to 7.9.2 (kwek20)\n* Make `set_snapshot` method public (a14e)\n* Add `drop_cf` function to `TransactionDB` (bothra90)\n* Bump rocksdb to 7.8.3 (aleksuss)\n* Add doc for `set_cache_index_and_filter_blocks` (guerinoni)\n* Re-run `build.rs` if env vars change (drahnr)\n* Add `WriteBatch::data` method (w41ter)\n* Add `DB::open_cf_with_opts` method (w41ter)\n* Use lz4-sys crate rather then submodule (niklasf)\n* Make create_new_backup_flush generic (minshao)\n\n## 0.19.0 (2022-08-05)\n\n* Add support for building with `io_uring` on Linux (parazyd)\n* Change iterators to return Result (mina86)\n* Support RocksDB transaction (yiyuanliu)\n* Avoid pulling in dependencies via static feature flag (niklasf)\n* Bump `rocksdb` to 7.4.4 (niklasf)\n* Bump `tikv-jemalloc-sys` to 0.5 (niklasf)\n* Update `set_use_fsync` comment (nazar-pc)\n* Introduce ReadOptions::set_iterate_range and PrefixRange (mina86)\n* Bump `rocksdb` to 7.4.3 (aleksuss)\n* Donâ€™t hold onto ReadOptions.inner when iterating (mina86)\n* Bump `zstd-sys` from 1.6 to 2.0 (slightknack)\n* Enable a building on the iOS platform (dignifiedquire)\n* Add DBRawIteratorWithThreadMode::item method (mina86)\n* Use NonNull in DBRawIteratorWithThreadMode (mina86)\n* Tiny refactoring including fix for UB (niklasf)\n* Add batched version MultiGet API (yhchiang-sol)\n* Upgrade to rocksdb v7.3.1 (yhchiang-sol)\n* Consistently use `ffi_util::to_cpath` to convert `Path` to `CString` (mina86)\n* Convert properties to `&CStr` (mina86)\n* Allow passing `&CStr` arguments (mina86)\n* Fix memory leak when reading properties and avoid memory allocation (mina86)\n* Fix Windows UTF-8 build flag (rajivshah3)\n* Use more target features to build librocksdb-sys (niklasf)\n* Fix `bz_internal_error` symbol multiply defined (nanpuyue)\n* Bump rocksdb to 7.1.2 (dignifiedquire)\n* Add BlobDB options (dignifiedquire)\n* Add snapshot `PinnableSlice` based API (zheland)\n\n## 0.18.0 (2022-02-03)\n\n* Add open_cf_descriptor methods for Secondary and ReadOnly AccessType (steviez)\n* Make Ribbon filters available (niklasf)\n* Change versioning scheme of `librocksdb-sys` crate (aleksuss)\n* Upgrade to RocksDB 6.28.2 (akrylysov)\n* Fix theoretical UB while transmuting Arc (niklasf)\n* Support configuring bottom-most compression level (mina86)\n* Add BlockBasedOptions::set_whole_key_filtering (niklasf)\n* Add constants for all supported properties (steviez)\n* Make CacheWrapper and EnvWrapper Send and Sync (aleksuss)\n* Replace mem::transmute with narrower conversions (niklasf)\n* Optimize non-overlapping copy in raw_data (niklasf)\n* Support multi_get_* methods (olegnn)\n* Optimize multi_get_cf_opt() to use size hint (niklasf)\n* Fix typo in set_background_purge_on_iterator_cleanup method (Congyuwang)\n* Use external compression crates where possible (Dr-Emann)\n* Update compression dependencies (akrylysov)\n* Add method for opening DB with ro access and cf descriptors (nikurt)\n* Support restoring from a specified backup (GoldenLeaves)\n* Add merge operands iterator (0xdeafbeef)\n* Derive serde::{Serialize, Deserialize} for configuration enums (thibault-martinez)\n* Add feature flag for runtime type information and metadata (jgraettinger)\n* Add set_info_log_level to control log verbosity (tkintscher)\n* Replace jemalloc-sys for tikv-jemalloc-sys (Rexagon)\n* Support UTF-8 file paths on Windows (rajivshah3)\n* Support building RocksDB with jemalloc (akrylysov)\n* Add rocksdb WAL flush api (duarten)\n* Update rocksdb to v6.22.1 (duarten)\n\n## 0.17.0 (2021-07-22)\n\n* Fix `multi_get` method (mikhailOK)\n* Bump `librocksdb-sys` up to 6.19.3 (olegnn)\n* Add support for the cuckoo table format (rbost)\n* RocksDB is not compiled with SSE4 instructions anymore unless the corresponding features are enabled in rustc (mbargull)\n* Bump `librocksdb-sys` up to 6.20.3 (olegnn, akrylysov)\n* Add `DB::key_may_exist_cf_opt` method (stanislav-tkach)\n* Add `Options::set_zstd_max_train_bytes` method (stanislav-tkach)\n* Mark Cache and Env as Send and Sync (akrylysov)\n* Allow cloning the Cache and Env (duarten)\n* Make SSE inclusion conditional for target features (mbargull)\n* Use Self where possible (adamnemecek)\n* Don't leak dropped column families (ryoqun)\n\n## 0.16.0 (2021-04-18)\n\n* Add `DB::cancel_all_background_work` method (stanislav-tkach)\n* Bump `librocksdb-sys` up to 6.13.3 (aleksuss)\n* Add `multi_get`, `multi_get_opt`, `multi_get_cf` and `multi_get_cf_opt` `DB` methods (stanislav-tkach)\n* Allow setting options on a ColumnFamily (romanz)\n* Fix logic related to merge operator settings (BoOTheFurious)\n* Export persist_period_sec option and background_threads (developerfred)\n* Remove unneeded bindgen features (Kixunil)\n* Add merge delete_callback omitted by mistake (zhangsoledad)\n* Bump `librocksdb-sys` up to 6.17.3 (ordian)\n* Remove the need for `&mut self` in `create_cf` and `drop_cf` (v2) (ryoqun)\n* Keep Cache and Env alive with Rc (acrrd)\n* Add `DB::open_cf_with_ttl` method (fdeantoni)\n\n## 0.15.0 (2020-08-25)\n\n* Fix building rocksdb library on windows host (aleksuss)\n* Add github actions CI for windows build (aleksuss)\n* Update doc for `Options::set_compression_type` (wqfish)\n* Add clippy linter in CI (aleksuss)\n* Use DBPath for backup_restore test (wqfish)\n* Allow to build RocksDB with a different stdlib (calavera)\n* Add some doc-comments and tiny refactoring (aleksuss)\n* Expose `open_with_ttl`. (calavera)\n* Fixed build for `x86_64-linux-android` that doesn't support PCLMUL (vimmerru)\n* Add support for `SstFileWriter` and `DB::ingest_external_file` (methyl)\n* Add set_max_log_file_size and set_recycle_log_file_num to the Options (stanislav-tkach)\n* Export the `DEFAULT_COLUMN_FAMILY_NAME` constant (stanislav-tkach)\n* Fix slice transformers with no in_domain callback (nelhage)\n* Don't segfault on failed a merge operator (nelhage)\n* Adding read/write/db/compaction options (linxGnu)\n* Add dbpath and env options (linxGnu)\n* Add compaction filter factory API (unrealhoang)\n* Add link stdlib when linking prebuilt rocksdb (unrealhoang)\n* Support fetching sst files metadata, delete files in range, get mem usage (linxGnu)\n* Do not set rerun-if-changed=build.rs (xu-cheng)\n* Use pretty_assertions in tests (stanislav-tkach)\n* librocksdb-sys: update rocksdb to 6.11.4 (ordian)\n* Adding backup engine info (linxGnu)\n* Implement `Clone` trait for `Options` (stanislav-tkach)\n* Added `Send` implementation to `WriteBatch` (stanislav-tkach)\n* Extend github actions (stanislav-tkach)\n* Avoid copy for merge operator result using delete_callback (xuchen-plus)\n\n## 0.14.0 (2020-04-22)\n\n* Updated lz4 to v1.9.2 (ordian)\n* BlockBasedOptions: expose `format_version`, `[index_]block_restart_interval` (ordian)\n* Improve `ffi_try` macro to make trailing comma optional (wqfish)\n* Add `set_ratelimiter` to the `Options` (PatrickNicholas)\n* Add `set_max_total_wal_size` to the `Options` (wqfish)\n* Simplify conversion on iterator item (zhangsoledad)\n* Add `flush_cf` method to the `DB` (wqfish)\n* Fix potential segfault when calling `next` on the `DBIterator` that is at the end of the range (wqfish)\n* Move to Rust 2018 (wqfish)\n* Fix doc for `WriteBatch::delete` (wqfish)\n* Bump `uuid` and `bindgen` dependencies (jonhoo)\n* Change APIs that never return error to not return `Result` (wqfish)\n* Fix lifetime parameter for iterators (wqfish)\n* Add a doc for `optimize_level_style_compaction` method (NikVolf)\n* Make `DBPath` use `tempfile` (jder)\n* Refactor `db.rs` and `lib.rs` into smaller pieces (jder)\n* Check if we're on a big endian system and act upon it (knarz)\n* Bump internal snappy version up to 1.1.8 (aleksuss)\n* Bump rocksdb version up to 6.7.3 (aleksuss)\n* Atomic flush option (mappum)\n* Make `set_iterate_upper_bound` method safe (wqfish)\n* Add support for data block hash index (dvdplm)\n* Add some extra config options (casualjim)\n* Add support for range delete APIs (wqfish)\n* Improve building `librocksdb-sys` with system libraries (basvandijk)\n* Add support for `open_for_read_only` APIs (wqfish)\n* Fix doc for `DBRawIterator::prev` and `next` methods (wqfish)\n* Add support for `open_as_secondary` APIs (calavera)\n\n## 0.13.0 (2019-11-12)\n\n### Changes\n\n* Added `ReadOptions::set_verify_checksums` and\n  `Options::set_level_compaction_dynamic_level_bytes` methods (ordian)\n* Array of bytes has been changed for pinnable slice for get operations (nbdd0121)\n* Implemented `Sync` for `DBRawIterator` (nbdd0121)\n* Removed extra copy in DBRawIterator (nbdd0121)\n* Added `Options::max_dict_bytes` and `Options::zstd_max_training_bytes` methods(methyl)\n* Added Android support (rtsisyk)\n* Added lifetimes for `DBIterator` return types (ngotchac)\n* Bumped rocksdb up to 6.2.4 (aleksuss)\n* Disabled trait derivation for librocksdb-sys (EyeOfPython)\n* Added `DB::get_updates_since()` to iterate write batches in a given sequence (nlfiedler)\n* Added `ReadOptions::set_tailing()` to create a tailing iterator that continues to\n  iterate over the database as new records are added (cjbradfield)\n* Changed column families storing (aleksuss)\n* Exposed the `status` method on iterators (rnarubin)\n\n## 0.12.3 (2019-07-19)\n\n### Changes\n\n* Enabled sse4.2/pclmul for accelerated crc32c (yjh0502)\n* Added `set_db_write_buffer_size` to the Options API (rnarubin)\n* Bumped RocksDB to 6.1.2 (lispy)\n* Added `Sync` and `Send` implementations to `Snapshot` (pavel-mukhanov)\n* Added `raw_iterator_cf_opt` to the DB API (rnarubin)\n* Added `DB::latest_sequence_number` method (vitvakatu)\n\n## 0.12.2 (2019-05-03)\n\n### Changes\n\n* Updated `compact_range_cf` to use generic arguments (romanz)\n* Removed allocations from `SliceTransform` implementation (ekmartin)\n* Bumped RocksDB to 5.18.3 (baptistejamin)\n* Implemented `delete_range` and `delete_range_cf` (baptistejamin)\n* Added contribution guide (rhurkes)\n* Cleaned up documentation for `ReadOptions.set_iterate_upper_bound` method (xiaobogaga)\n* Added `flush` and `flush_opt` operations (valeriansaliou)\n\n## 0.12.1 (2019-03-27)\n\n### Changes\n\n* Added `iterator_cf_opt` function to `DB` (elichai)\n* Added `set_allow_mmap_writes` and `set_allow_mmap_reads` functions to `Options` (aleksuss)\n\n\n## 0.12.0 (2019-03-10)\n\n### Changes\n\n* Added support for PlainTable factories (ekmartin)\n* Added ability to restore latest backup (rohitjoshi)\n* Added support for pinnable slices (xxuejie)\n* Added ability to get property values (ekmartin)\n* Simplified opening database when using non-default column families (iSynaptic)\n* `ColumnFamily`, `DBIterator` and `DBRawIterator` now have lifetime parameters to prevent using them after the `DB` has been dropped (iSynaptic)\n* Creating `DBIterator` and `DBRawIterator` now accept `ReadOptions` (iSynaptic)\n* All database operations that accepted byte slices, `&[u8]`, are now generic and accept anything that implements `AsRef<[u8]>` (iSynaptic)\n* Bumped RocksDB to version 5.17.2 (aleksuss)\n* Added `set_readahead_size` to `ReadOptions` (iSynaptic)\n* Updated main example in doc tests (mohanson)\n* Updated requirements documentation (jamesray1)\n* Implemented `AsRef<[u8]>` for `DBVector` (iSynaptic)\n\n\n## 0.11.0 (2019-01-10)\n\n### Announcements\n\n* This is the first release under the new [Maintainership](MAINTAINERSHIP.md) model.\n  Three contributors have been selected to help maintain this library -- Oleksandr Anyshchenko ([@aleksuss](https://github.com/aleksuss)), Jordan Terrell ([@iSynaptic](https://github.com/iSynaptic)), and Ilya Bogdanov ([@vitvakatu](https://github.com/vitvakatu)). Many thanks to Tyler Neely ([@spacejam](https://github.com/spacejam)) for your support while taking on this new role.\n\n* A [gitter.im chat room](https://gitter.im/rust-rocksdb/Lobby) has been created. Although it's not guaranteed to be \"staffed\", it may help to collaborate on changes to `rust-rocksdb`.\n\n### Changes\n\n* added LZ4, ZSTD, ZLIB, and BZIP2 compression support (iSynaptic)\n* added support for `Checkpoint` (aleksuss)\n* added support for `SliceTransform` (spacejam)\n* added `DBPath` struct to ensure test databases are cleaned up (ekmartin, iSynaptic)\n* fixed `rustfmt.toml` to work with newer `rustfmt` version (ekmartin, iSynaptic)\n* bindgen bumped up to 0.43 (s-panferov)\n* made `ColumnFamily` struct `Send` (Tpt)\n* made `DBIterator` struct `Send` (Elzor)\n* `create_cf` and `drop_cf` methods on `DB` now work with immutable references (aleksuss)\n* fixed crash in `test_column_family` test on macOS (aleksuss)\n* fixed/implemented CI builds for macOS and Windows (aleksuss, iSynaptic)\n* exposed `set_skip_stats_update_on_db_open` option (romanz)\n* exposed `keep_log_file_num` option (romanz)\n* added ability to retrieve `WriteBatch` serialized size (romanz)\n* added `set_options` method to `DB` to allow changing options without closing and re-opening the database (romanz)\n\n\n## 0.10.1 (2018-07-17)\n\n* bump bindgen to 0.37 (ekmartin)\n* bump rocksdb to 5.14.2 (ekmartin)\n* add disable_cache to block-based options (ekmartin)\n* add set_wal_dir (ekmartin)\n* add set_memtable_prefix_bloom_ratio (ekmartin)\n* add MemtableFactory support (ekmartin)\n* add full_iterator (ekmartin)\n* allow index type specification on block options (ekmartin)\n* fix windows build (iSynaptic)\n\n## 0.10.0 (2018-03-17)\n\n* Bump rocksdb to 5.11.3 (spacejam)\n\n### New Features\n\n* Link with system rocksdb and snappy libs through envvars (ozkriff)\n\n### Breaking Changes\n\n* Fix reverse iteration from a given key (ongardie)\n\n## 0.9.1 (2018-02-10)\n\n### New Features\n\n* SliceTransform support (spacejam)\n\n## 0.9.0 (2018-02-10)\n\n### New Features\n\n* Allow creating iterators over prefixes (glittershark)\n\n### Breaking Changes\n\n* Open cfs with options (garyttierney, rrichardson)\n* Non-Associative merge ops (rrichardson)\n\n## 0.8.3 (2018-02-10)\n\n* Bump rocksdb to 5.10.2 (ongardie)\n* Add Send marker to Options (iSynaptic)\n* Expose advise_random_on_open option (ongardie)\n\n## 0.8.2 (2017-12-28)\n\n* Bump rocksdb to 5.7.1 (jquesnelle)\n\n## 0.8.1 (2017-09-08)\n\n* Added list_cf (jeizsm)\n\n## 0.8.0 (2017-09-02)\n\n* Removed set_disable_data_sync (glittershark)\n\n## 0.7.2 (2017-09-02)\n\n* Bumped rocksdb to 5.6.2 (spacejam)\n\n## 0.7.1 (2017-08-29)\n\n* Bumped rocksdb to 5.6.1 (vmx)\n\n## 0.7 (2017-07-26)\n\n### Breaking Changes\n\n* Bumped rocksdb to 5.4.6 (derekdreery)\n* Remove `use_direct_writes` now that `use_direct_io_for_flush_and_compaction` exists (derekdreery)\n\n### New Features\n\n* ReadOptions is now public (rschmukler)\n* Implement Clone and AsRef<str> for Error (daboross)\n* Support for `seek_for_prev` (kaedroho)\n* Support for DirectIO (kaedroho)\n\n### Internal Cleanups\n\n* Fixed race condition in tests (debris)\n* Move tests to the default `tests` directory (vmx)\n\n## 0.6.1 (2017-03-13)\n\n### New Features\n\n* Support for raw iterator access (kaedroho)\n\n## 0.6 (2016-12-18)\n\n### Breaking Changes\n\n* Comparator function now returns an Ordering (alexreg)\n\n### New Features\n\n* Compaction filter (tmccombs)\n* Support for backups (alexreg)\n\n0.5 (2016-11-20)\n\n### Breaking changes\n\n* No more Writable trait, as WriteBatch is not thread-safe as a DB (spacejam)\n* All imports of `rocksdb::rocksdb::*` should now be simply `rocksdb::*` (alexreg)\n* All errors changed to use a new `rocksdb::Error` type (kaedroho, alexreg)\n* Removed `Options.set_filter_deletes` as it was removed in RocksDB (kaedroho)\n* Renamed `add_merge_operator` to `set_merge_operator` and `add_comparator` to `set_comparator` (kaedroho)\n\n### New Features\n\n* Windows support (development by jsgf and arkpar. ported by kaedroho)\n* The RocksDB library is now built at crate compile-time and statically linked with the resulting binary (development by jsgf and arkpar. ported by kaedroho)\n* Cleaned up and improved coverage and tests of the ffi module (alexreg)\n* Added many new methods to the `Options` type (development by ngaut, BusyJay, zhangjinpeng1987, siddontang and hhkbp2. ported by kaedroho)\n* Added `len` and `is_empty` methods to `WriteBatch` (development by siddontang. ported by kaedroho)\n* Added `path` method to `DB` (development by siddontang. ported by kaedroho)\n* `DB::open` now accepts any type that implements `Into<Path>` as the path argument (kaedroho)\n* `DB` now implements the `Debug` trait (kaedroho)\n* Add iterator_cf to snapshot (jezell)\n* Changelog started\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 3.51171875,
          "content": "# Contributing to rust-rocksdb\nThank you for taking an interest in the project, and contributing to it - it's appreciated! There are several ways you can contribute:\n- [Bug Reports](#bug-reports)\n- [Feature Requests](#feature-requests)\n- [Documentation](#documentation)\n- [Discussion](#discussion)\n- [Pull Requests](#pull-requests)\n\n**Please note all contributors must adhere to the [code of conduct](code-of-conduct.md).**\n\n## Bug Reports\n[bug-reports]: #bug-reports\n- **Ensure the bug has not already been reported** - this can be done with a quick search of the [existing open issues](https://github.com/rust-rocksdb/rust-rocksdb/issues?q=is%3Aissue+is%3Aopen+).\n- **Ensure the bug applies to the Rust wrapper, and not the underlying library** - bugs in the RocksDB library should be [reported upstream](https://github.com/facebook/rocksdb/issues).\n- When [creating an issue](https://github.com/rust-rocksdb/rust-rocksdb/issues/new) please try to:\n    - **Use a clear and descriptive title** to identify the issue\n    - **Provide enough context** to accurately summarize the issue. Not every issue will need detailed steps to recreate, example code, stack traces, etc. - use your own judgment on what information would be helpful to anyone working on the issue. It's easier for someone to skim over too much context, than stop and wait for a response when context is missing.\n\n## Feature Requests\n[feature-requests]: #feature-requests\nFeature requests will primarily come in the form of ergonomics involving the Rust language, or in bringing the wrapper into parity with the library's API. Please create an issue with any relevant information.\n\n## Documentation\n[documentation]: #documentation\nMuch of the documentation should mirror or reference the library's [documentation](https://github.com/facebook/rocksdb/wiki). If the wrapper or its exposed functions are missing documentation or contain inaccurate information please submit a pull request.\n\n## Discussion\n[discussion]: #discussion\nDiscussion around design and development of the wrapper primarily occurs within issues and pull requests. Don't be afraid to participate if you have questions, concerns, insight, or advice.\n\n## Pull Requests\n[pull-requests]: #pull-requests\nPull requests are welcome, and when contributing code, the author agrees to do so under the project's [licensing](https://github.com/rust-rocksdb/rust-rocksdb/blob/master/LICENSE) - Apache 2.0 as of the time of this writing. The maintainers greatly appreciate PRs that follow open-source contribution best practices:\n1. Fork this repository to your personal GitHub account.\n1. Create a branch that includes your changes, **keep changes isolated and granular**.\n1. Include any relevant documentation and/or tests. Write [documentation tests](https://doc.rust-lang.org/rustdoc/documentation-tests.html) when relevant.\n1. Apply `cargo fmt` to ensure consistent formatting.\n1. [Create a pull request](https://help.github.com/en/articles/about-pull-requests) against this repository.\n\nFor pull requests that would benefit from discussion and review earlier in the development process, use a [Draft Pull Request](https://help.github.com/en/articles/about-pull-requests#draft-pull-requests).\n\n## Additional Resources\nSome useful information for working with RocksDB in Rust:\n- [RocksDB library primary site](https://rocksdb.org)\n- [RocksDB library GitHub repository](https://github.com/facebook/rocksdb)\n- [RocksDB library documentation](https://github.com/facebook/rocksdb/wiki)\n- [Rust's Foreign Function Interface (ffi)](https://doc.rust-lang.org/nomicon/ffi.html)\n\n"
        },
        {
          "name": "Cargo.toml",
          "type": "blob",
          "size": 1.49609375,
          "content": "[package]\nname = \"rocksdb\"\ndescription = \"Rust wrapper for Facebook's RocksDB embeddable database\"\nversion = \"0.23.0\"\nedition = \"2021\"\nrust-version = \"1.71.1\"\nauthors = [\n    \"Tyler Neely <t@jujit.su>\",\n    \"David Greenberg <dsg123456789@gmail.com>\",\n]\nrepository = \"https://github.com/rust-rocksdb/rust-rocksdb\"\nlicense = \"Apache-2.0\"\ncategories = [\"database\"]\nkeywords = [\"database\", \"embedded\", \"LSM-tree\", \"persistence\"]\nhomepage = \"https://github.com/rust-rocksdb/rust-rocksdb\"\nexclude = [\".gitignore\", \".travis.yml\", \"deploy.sh\", \"test/**/*\"]\n\n[workspace]\nmembers = [\"librocksdb-sys\"]\n\n[features]\ndefault = [\"snappy\", \"lz4\", \"zstd\", \"zlib\", \"bzip2\", \"bindgen-runtime\"]\njemalloc = [\"librocksdb-sys/jemalloc\"]\nio-uring = [\"librocksdb-sys/io-uring\"]\nvalgrind = []\nmt_static = [\"librocksdb-sys/mt_static\"]\nsnappy = [\"librocksdb-sys/snappy\"]\nlz4 = [\"librocksdb-sys/lz4\"]\nzstd = [\"librocksdb-sys/zstd\"]\nzlib = [\"librocksdb-sys/zlib\"]\nbzip2 = [\"librocksdb-sys/bzip2\"]\nrtti = [\"librocksdb-sys/rtti\"]\nmulti-threaded-cf = []\nserde1 = [\"serde\"]\nbindgen-runtime = [\"librocksdb-sys/bindgen-runtime\"]\nbindgen-static = [\"librocksdb-sys/bindgen-static\"]\nlto = [\"librocksdb-sys/lto\"]\n\n[dependencies]\nlibc = \"0.2\"\nlibrocksdb-sys = { path = \"librocksdb-sys\", version = \"0.17.1\", default-features = false, features = [\n    \"static\",\n] }\nserde = { version = \"1\", features = [\"derive\"], optional = true }\n\n[dev-dependencies]\ntrybuild = \"1\"\ntempfile = \"3.1\"\npretty_assertions = \"1.0\"\nbincode = \"1.3\"\nserde = { version = \"1\", features = [\"derive\"] }\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 11.091796875,
          "content": "\n                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"[]\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright [yyyy] [name of copyright owner]\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n"
        },
        {
          "name": "MAINTAINERSHIP.md",
          "type": "blob",
          "size": 3.0576171875,
          "content": "Maintainers agree to operate under this set of guidelines:\n\n#### Authority\n\nMaintainers are trusted to close issues, merge pull requests, and publish crates to cargo.\n\n#### Categories of Work\n\n0. Minor\n    * updating the changelog\n    * requires no approval\n1. Normal\n    * librocksdb-sys updates\n    * API tracking code in the rocksdb crate that does not change control flow\n    * breaking changes due to removed functionality in rocksdb\n    * require 1 approval from another maintainer. if no maintainer is able to be reached for 2 weeks, then progress may be made anyway\n    * patch (and post-1.0, minor) releases to crates.io that contain only the above work\n    * on each update of submodule rocksdb, run `make -C librocksdb-sys gen_statistics`\n2. Major\n    * breaking API changes that are not direct consequences of underlying rocksdb changes\n    * refactoring, which should generally only be done for clearly functional reasons like to aid in the completion of a specific task\n    * require consensus among all maintainers unless 2 weeks have gone by without full participation\n    * if 2 weeks have gone by after seeking feedback, and at least one other maintainer has participated, and all participating maintainers are in agreement, then progress may be made anyway\n    * if action is absolutely urgent, an organization owner may act as a tiebreaker if specifically requested to do so and they agree that making a controversial decision is worth the risk. This should hopefully never occur.\n  \nIf any maintainer thinks an issue is major, it is major.\n\n#### Changelog Maintenance\n\n* If you are the one who merges a PR that includes an externally-visible change, please describe the change in the changelog and merge it in.\n\n#### Releasing, Publishing\n\n* Releases adhere to [semver](https://semver.org/)\n* To cut a release, an issue should be opened for it and reach the required approval based on the above `Categories of Work` section above\n* When progress is possible, the issue may be closed and the proposer may publish to crates.io. This is controlled by those in the [crate publishers organization-level team](https://github.com/orgs/rust-rocksdb/teams/crate-publishers).\n* Releases should have an associated tag pushed to this repo. I recommend doing this after the publish to crates.io succeeds to prevent any mishaps around pushing a tag for something that can't actually be published.\n* The changelog serves as a sort of logical staging area for releases\n* If a breaking API change happens, and the changelog has not advanced to a new major version, we roll the changelog to a new major version and open an issue to release the previous patch (and post-1.0, minor) version.\n* Before rolling to a new major version, it would be nice to release a non-breaking point release to let current users silently take advantage of any improvements\n\n#### Becoming a Maintainer\n\n* If you have a history of participation in this repo, agree to these rules, and wish to take on maintainership responsibilities, you may open an issue. If an owner agrees, they will add you to the maintainer group and the crate publishers team.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 3.970703125,
          "content": "# rust-rocksdb\n\n[![RocksDB build](https://github.com/rust-rocksdb/rust-rocksdb/actions/workflows/rust.yml/badge.svg?branch=master)](https://github.com/rust-rocksdb/rust-rocksdb/actions/workflows/rust.yml)\n[![crates.io](https://img.shields.io/crates/v/rocksdb.svg)](https://crates.io/crates/rocksdb)\n[![documentation](https://docs.rs/rocksdb/badge.svg)](https://docs.rs/rocksdb)\n[![license](https://img.shields.io/crates/l/rocksdb.svg)](https://github.com/rust-rocksdb/rust-rocksdb/blob/master/LICENSE)\n[![Gitter chat](https://badges.gitter.im/rust-rocksdb/gitter.svg)](https://gitter.im/rust-rocksdb/lobby)\n![rust 1.71.1 required](https://img.shields.io/badge/rust-1.71.1-blue.svg?label=MSRV)\n\n![GitHub commits (since latest release)](https://img.shields.io/github/commits-since/rust-rocksdb/rust-rocksdb/latest.svg)\n\n## Requirements\n\n- Clang and LLVM\n\n## Contributing\n\nFeedback and pull requests welcome! If a particular feature of RocksDB is\nimportant to you, please let me know by opening an issue, and I'll\nprioritize it.\n\n## Usage\n\nThis binding is statically linked with a specific version of RocksDB. If you\nwant to build it yourself, make sure you've also cloned the RocksDB and\ncompression submodules:\n\n```shell\ngit submodule update --init --recursive\n```\n\n## Compression Support\n\nBy default, support for [Snappy](https://github.com/google/snappy),\n[LZ4](https://github.com/lz4/lz4), [Zstd](https://github.com/facebook/zstd),\n[Zlib](https://zlib.net), and [Bzip2](http://www.bzip.org) compression\nis enabled through crate features. If support for all of these compression\nalgorithms is not needed, default features can be disabled and specific\ncompression algorithms can be enabled. For example, to enable only LZ4\ncompression support, make these changes to your Cargo.toml:\n\n```toml\n[dependencies.rocksdb]\ndefault-features = false\nfeatures = [\"lz4\"]\n```\n\n## Multithreaded ColumnFamily alternation\n\nRocksDB allows column families to be created and dropped\nfrom multiple threads concurrently, but this crate doesn't allow it by default\nfor compatibility. If you need to modify column families concurrently, enable\nthe crate feature `multi-threaded-cf`, which makes this binding's\ndata structures use `RwLock` by default. Alternatively, you can directly create\n`DBWithThreadMode<MultiThreaded>` without enabling the crate feature.\n\n## Switch between /MT or /MD run time library (Only for Windows)\n\nThe feature `mt_static` will request the library to be built with [/MT](https://learn.microsoft.com/en-us/cpp/build/reference/md-mt-ld-use-run-time-library?view=msvc-170)\nflag, which results in library using the static version of the run-time library.\n*This can be useful in case there's a conflict in the dependency tree between different\nrun-time versions.*\n\n## Switch between static and dynamic linking for bindgen (features `bindgen-static` and `bindgen-runtime`)\n\nThe feature `bindgen-runtime` will enable the `runtime` feature of bindgen, which dynamically\nlinks to libclang. This is suitable for most platforms, and is enabled by default.\n\nThe feature `bindgen-static` will enable the `static` feature of bindgen, which statically\nlinks to libclang. This is suitable for musllinux platforms, such as Alpine linux.\nTo build on Alpine linux for example, make these changes to your Cargo.toml:\n\n```toml\n[dependencies.rocksdb]\ndefault-features = false\nfeatures = [\"bindgen-static\", \"snappy\", \"lz4\", \"zstd\", \"zlib\", \"bzip2\"]\n```\n\nNotice that `runtime` and `static` features are mutually exclusive, and won't compile if both enabled.\n\n## LTO\nEnable the `lto` feature to enable link-time optimization. It will compile rocksdb with `-flto` flag. This feature is disabled by default.\n\n> [!IMPORTANT]\n> You must use clang as `CC`. Eg. `CC=/usr/bin/clang CXX=/usr/bin/clang++`. Clang llvm version must be the same as the one used by rust compiler.\n> On the rust side you should use `RUSTFLAGS=\"-Clinker-plugin-lto -Clinker=clang -Clink-arg=-fuse-ld=lld\"`.\n\nCheck the [Rust documentation](https://doc.rust-lang.org/rustc/linker-plugin-lto.html) for more information.\n"
        },
        {
          "name": "code-of-conduct.md",
          "type": "blob",
          "size": 3.2666015625,
          "content": "# Contributor Covenant Code of Conduct\n\n## Our Pledge\n\nIn the interest of fostering an open and welcoming environment, we as\ncontributors and maintainers pledge to making participation in our project and\nour community a harassment-free experience for everyone, regardless of age, body\nsize, disability, ethnicity, sex characteristics, gender identity and expression,\nlevel of experience, education, socio-economic status, nationality, personal\nappearance, race, religion, or sexual identity and orientation.\n\n## Our Standards\n\nExamples of behavior that contributes to creating a positive environment\ninclude:\n\n* Using welcoming and inclusive language\n* Being respectful of differing viewpoints and experiences\n* Gracefully accepting constructive criticism\n* Focusing on what is best for the community\n* Showing empathy towards other community members\n\nExamples of unacceptable behavior by participants include:\n\n* The use of sexualized language or imagery and unwelcome sexual attention or\n  advances\n* Trolling, insulting/derogatory comments, and personal or political attacks\n* Public or private harassment\n* Publishing others' private information, such as a physical or electronic\n  address, without explicit permission\n* Other conduct which could reasonably be considered inappropriate in a\n  professional setting\n\n## Our Responsibilities\n\nProject maintainers are responsible for clarifying the standards of acceptable\nbehavior and are expected to take appropriate and fair corrective action in\nresponse to any instances of unacceptable behavior.\n\nProject maintainers have the right and responsibility to remove, edit, or\nreject comments, commits, code, wiki edits, issues, and other contributions\nthat are not aligned to this Code of Conduct, or to ban temporarily or\npermanently any contributor for other behaviors that they deem inappropriate,\nthreatening, offensive, or harmful.\n\n## Scope\n\nThis Code of Conduct applies both within project spaces and in public spaces\nwhen an individual is representing the project or its community. Examples of\nrepresenting a project or community include using an official project e-mail\naddress, posting via an official social media account, or acting as an appointed\nrepresentative at an online or offline event. Representation of a project may be\nfurther defined and clarified by project maintainers.\n\n## Enforcement\n\nInstances of abusive, harassing, or otherwise unacceptable behavior may be\nreported by contacting the project team at t@jujit.su. All\ncomplaints will be reviewed and investigated and will result in a response that\nis deemed necessary and appropriate to the circumstances. The project team is\nobligated to maintain confidentiality with regard to the reporter of an incident.\nFurther details of specific enforcement policies may be posted separately.\n\nProject maintainers who do not follow or enforce the Code of Conduct in good\nfaith may face temporary or permanent repercussions as determined by other\nmembers of the project's leadership.\n\n## Attribution\n\nThis Code of Conduct is adapted from the [Contributor Covenant][homepage], version 1.4,\navailable at https://www.contributor-covenant.org/version/1/4/code-of-conduct.html\n\n[homepage]: https://www.contributor-covenant.org\n\nFor answers to common questions about this code of conduct, see\nhttps://www.contributor-covenant.org/faq\n"
        },
        {
          "name": "librocksdb-sys",
          "type": "tree",
          "content": null
        },
        {
          "name": "rust-toolchain.toml",
          "type": "blob",
          "size": 0.0302734375,
          "content": "[toolchain]\nchannel = \"1.71.1\"\n"
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}