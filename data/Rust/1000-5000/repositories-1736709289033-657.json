{
  "metadata": {
    "timestamp": 1736709289033,
    "page": 657,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjY2MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "jaemk/cached",
      "stars": 1623,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.025390625,
          "content": "target\nCargo.lock\n\n.idea/\n"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 15.421875,
          "content": "# Changelog\n\n## [Unreleased]\n## Added\n## Changed\n## Removed\n\n## [0.54.0]\n## Added\n- Add `Cached::cache_try_get_or_set_with` for parity with async trait\n## Changed\n- Remove unnecessary string clones in redis cache store\n- Update cargo default features manifest key\n## Removed\n\n## [0.53.1 / [cached_proc_macro[0.23.0]]]\n## Added\n## Changed\n- Replace `instant` with `web_time` in proc macro, update cached_proc_macro version\n## Removed\n\n## [0.53.0]\n## Added\n## Changed\n- Replace unmaintained `instant` crate with `web_time`\n## Removed\n\n## [0.52.0 / [cached_proc_macro[0.22.0]] ]\n## Added\n## Changed\n- Propagate function generics to generated inner cache function \n## Removed\n\n\n## [0.51.4]\n## Added\n## Changed\n- Update `DiskCache` to require `ToString` instead of `Display`\n## Removed\n\n## [0.51.3]\n## Added\n- `ExpiringSizedCache`: Allow specifying explicit TTL when inserting\n## Changed\n- Refactor `ExpiringSizedCache` internals to not require tombstones\n- `ExpiringSizedCache` keys must impl `Ord`\n- `ExpiringSizedCache` `remove` and `insert` updated to return only unexpired values\n## Removed\n\n## [0.51.2]\n## Added\n- Add `get_borrowed` methods to `ExpiringSizedCache` to support cache retrieval using `&str` / `&[T]`\n  when the key types are `String` / `Vec<T>`. This is a workaround for issues implementing `Borrow`\n  for a generic wrapper type.\n## Changed\n## Removed\n\n## [0.51.1]\n## Added\n- Update documentation and add missing methods to `ExpiringSizedCache` (clear, configuration methods)\n## Changed\n- `ExpiringSizedCache`: When allocating using `with_capacity`, allocate enough space to account for\n  the default max number of tombstone entries\n## Removed\n\n## [0.51.0]\n## Added\n- Add `ExpiringSizedCache` intended for high read scenarios. Currently incompatible with the cached trait and macros.\n## Changed\n## Removed\n\n## [0.50.0 / [cached_proc_macro[0.21.0]] ]\n## Added\n- Add `DiskCacheBuilder::set_sync_to_disk_on_cache_change` to specify that the cache changes should be written to disk on every cache change.\n- Add `sync_to_disk_on_cache_change` to `#[io_cached]` to allow setting `DiskCacheBuilder::set_sync_to_disk_on_cache_change` from the proc macro.\n- Add `DiskCacheBuilder::set_connection_config` to give more control over the sled connection.\n- Add `connection_config` to `#[io_cached]` to allow setting `DiskCacheBuilder::set_connection_config` from the proc macro.\n- Add `DiskCache::connection()` and `DiskCache::connection_mut()` to give access to the underlying sled connection.\n- Add `cache_unset_lifespan` to cached traits for un-setting expiration on types that support it\n## Changed\n- [Breaking] `type` attribute is now `ty`\n- Upgrade to syn2 \n- Corrected a typo in DiskCacheError (de)serialization variants\n- Signature or `DiskCache::remove_expired_entries`: this now returns `Result<(), DiskCacheError>` instead of `()`, returning an `Err(sled::Error)` on removing and flushing from the connection.\n## Removed\n\n## [0.49.3]\n## Added\n## Changed\n- Fix `DiskCache` expired value logic\n## Removed\n\n## [0.49.2]\n## Added\n## Changed\n- While handling cache refreshes in `DiskCache::cache_get`, treat deserialization failures as non-existent values\n## Removed\n\n## [0.49.1]\n## Added\n## Changed\n- Fix `DiskCache::remove_expired_entries` signature\n## Removed\n\n## [0.49.0 / [cached_proc_macro[0.20.0]] ]\n## Added\n- Add DiskCache store\n- Add `disk=true` (and company) flags to `#[io_cached]`\n## Changed\n## Removed\n\n## [0.48.1 / [cached_proc_macro[0.19.1]] / [cached_proc_macro_types[0.1.1]]]\n## Added\n- Include LICENSE file in `cached_proc_macro` and `cached_proc_macro_types`\n## Changed\n## Removed\n\n## [0.48.0 / [cached_proc_macro[0.19.0]]]\n## Added\n- Add `CloneCached` trait with additional methods when the cache value type implements `Clone`\n- Add `result_fallback` option to `cached` proc_macro to support re-using expired cache values\n  when utilizing an expiring cache store and a fallible function.\n## Changed\n## Removed\n\n## [0.47.0]\n## Added\n## Changed\n- Update redis `0.23.0` -> `0.24.0`\n## Removed\n\n## [0.46.1 / [cached_proc_macro[0.18.1]]\n## Added\n## Changed\n- Fix #once sync_writes bug causing a deadlock after ttl expiry, https://github.com/jaemk/cached/issues/174\n## Removed\n\n## [0.46.0]\n## Added\n- Add `ahash` feature to use the faster [ahash](https://github.com/tkaitchuck/aHash) algorithm.\n- Set `ahash` as a default feature.\n- Update hashbrown `0.13.0` -> `0.14.0`\n## Changed\n## Removed\n\n## [0.45.1] / [cached_proc_macro[0.18.0]]\n## Added\n## Changed\n- Release `*_no_cache` changes from `0.45.0`. The change is in the proc macro crate which\n  I forgot to release a new version of.\n## Removed\n\n## [0.45.0]\n## Added\n- Generate `*_no_cache` function for every cached function to allow calling the original function\n  without caching. **This is backwards incompatible if you have a function with the same name**.\n## Changed\n- `tokio` dependency has been removed from `proc_macro` feature (originally unecessarily included).\n- `async` feature has been removed from the `default` feature. **This is a backwards incompatible change.**\n  If you want to use `async` features, you need to enable `async` explicitly.\n- remove accidental `#[doc(hidden)]` on the `stores` module\n## Removed\n\n## [0.44.0] / [cached_proc_macro[0.17.0]]\n## Added\n- Option to enable redis multiplex-connection manager on `AsyncRedisCache`\n## Changed\n- Show proc-macro documentation on docs.rs\n- Document needed feature flags\n- Hide implementation details in documentation\n- Relax `Cached` trait's `cache_get`, `cache_get_mut` and `cache_remove` key parameter. Allow `K: Borrow<Q>`\n  like `std::collections::HashMap` and friends. Avoids copies particularly on `Cached<String, _>` where now\n  you can do `cache.cache_get(\"key\")` and before you had to `cache.cache_get(\"key\".to_string())`.\n\n  Note: This is a minor breaking change for anyone manually implementing the `Cached` trait.\n  The signatures of `cache_get`, `cache_get_mut`, and `cache_remove` must be updated to include the\n  additional trait bound on the `key` type:\n  ```rust\n    fn cache_get<Q>(&mut self, key: &Q) -> Option<&V>\n    where\n        K: std::borrow::Borrow<Q>,\n        Q: std::hash::Hash + Eq + ?Sized,\n    {\n  ```\n## Removed\n- Dependency to `lazy_static` and `async_once` are removed.\n\n## [0.43.0]\n## Added\n## Changed\n- Update redis `0.22.0` -> `0.23.0`\n- Update serial_test `0.10.0` -> `2.0.0`\n## Removed\n\n## [0.42.0] / [cached_proc_macro[0.16.0]]\n## Added\n## Changed\n- Better code generation for `#[cached]` when the `sync_writes` flag is true.\n## Removed\n\n## [0.41.0]\n## Added\n## Changed\n- Fix \"sized\" cache types (`SizedCache`, `TimedSizedCache`) to check capacity and evict members after insertion.\n- Fixes bug where continuously inserting a key present in the cache would incorrectly evict the oldest cache member\n  even though the cache size was not increasing.\n## Removed\n\n## [0.40.0]\n## Added\n- Add optional feature flag `redis_ahash` to enable `redis`'s optional `ahash` feature\n## Changed\n- Update `redis` to `0.22.0`\n- Move `tokio`'s `rt-multi-thread` feature from being a default to being optionally enabled by `async_tokio_rt_multi_thread`\n- Fix makefile's doc target to match documentation, changed from `make sync` to `make docs`\n## Removed\n\n## [0.39.0]\n## Added\n- Add flush method to ExpiringValueCache\n## Changed\n## Removed\n\n## [0.38.0] / [cached_proc_macro[0.15.0]]\n## Added\n## Changed\n- Fix proc macro argument documentation\n- Disable futures `default-features`\n- Add cache-remove to redis example\n## Removed\n\n## [0.37.0] / [cached_proc_macro[0.14.0]]\n## Added\n## Changed\n- Mark the auto-generated \"priming\" functions with `#[allow(dead_code)]`\n- Fix documentation typos\n- Replace dev/build scripts with a Makefile\n## Removed\n\n## [0.36.0] / [cached_proc_macro[0.13.0]]\n## Added\n- wasm support for non-io macros and stores\n## Changed\n- Use `instant` crate for wasm compatible time\n## Removed\n\n## [0.35.0]\n## Added\n- Added `ExpiringValueCache` for caching values that can themselves expire.\n- Added COPYRIGHT file\n## Changed\n## Removed\n\n## [0.34.1]\n## Added\n- Make sure `AsyncRedisCacheBuilder`, `RedisCacheBuilder`, and `RedisCacheBuildError` publicly visible\n## Changed\n## Removed\n\n## [0.34.0] / [cached_proc_macro[0.12.0]]\n## Added\n## Changed\n- Replace `async-mutex` and `async-rwlock` used by proc-macros with `tokio::sync` versions\n- Add optional `version` field to `CachedRedisValue` struct\n- Cleanup feature flags so async redis features include `redis_store` and `async` features automatically\n## Removed\n\n## [0.33.0]\n## Added\n- Allow specifying the namespace added to cache keys generated by redis stores\n## Changed\n- Bump hashbrown 0.11.2 -> 0.12: https://github.com/rust-lang/hashbrown/blob/master/CHANGELOG.md#v0120---2022-01-17\n- Bump smartstring 0.2 -> 1: https://github.com/bodil/smartstring/blob/master/CHANGELOG.md#100---2022-02-24\n## Removed\n\n## [0.32.1]\n## Added\n## Changed\n- Fix redis features so `redis/aio` is only included when async redis\n  features (`redis_tokio` / `redis_async_std`) are enabled\n## Removed\n\n## [0.32.0] / [cached_proc_macro[0.11.0]]\n## Added\n- Fix how doc strings are handled by proc-macros. Capture all documentation on the\n  cached function definitions and add them to the function definitions generated\n  by the proc-macros. Add doc strings to generated static caches. Link to relevant static\n  caches in generated function definitions. Add documentation to the generated\n  cache-priming function.\n## Changed\n## Removed\n\n## [0.31.0] / [cached_proc_macro[0.10.0]]\n## Added\n- `IOCached` and `IOCachedAsync` traits\n- `RedisCache` and `AsyncRedisCache` store types\n- Add `#[io_cached]` proc macro for defining cached functions backed\n  by stores that implement `IOCached`/`IOCachedAsync`\n## Changed\n- Convert from travis-ci to github actions\n- Update build status badge to link to github actions\n## Removed\n\n## [0.30.0]\n## Added\n- Add flush method to TimedSize and TimedSized caches\n## Changed\n- Fix timed/timed-sized cache-get/insert/remove to remove and not\n  return expired values\n## Removed\n\n## [0.29.0] / [cached_proc_macro[0.9.0]]\n## Added\n- proc-macro: support arguments of the wrapped function being prefixed with `mut`\n## Changed\n## Removed\n\n## [0.28.0]\n## Added\n- Add failable TimedSize and SizeCached constructors\n## Changed\n## Removed\n\n## [0.27.0] / [cached_proc_macro[0.8.0]]\n## Added\n- Add `time_refresh` option to `#[cached]` to refresh TTLs on cache hits\n- Generate `*_prime_cache` functions for every `#[cached]` and `#[once]` function\n  to allow priming caches.\n## Changed\n## Removed\n\n## [0.26.1] / [cached_proc_macro[0.7.1]]\n## Added\n- Add `sync_writes` option to `#[cached]` macro to synchronize\n  concurrent function calls of duplicate arguments. For ex, if\n  a long running `#[cached(sync_writes = true)]` function is called\n  several times concurrently, the actual function is only executed\n  once while all other calls block and return the newly cached value.\n## Changed\n## Removed\n\n## [0.26.0] / [cached_proc_macro[0.7.0]]\n## Added\n- Add `#[once]` macro for create a `RwLock` cache wrapping a single value\n- For all caches, add a function to get an immutable reference to their\n  contents. This makes it possible to manually dump a cache, so its contents\n  can be saved and restored later.\n## Changed\n## Removed\n\n## [0.25.1]\n## Added\n## Changed\n- Update deps hashbrown and darling, remove async-mutex from cached-proc-macro crate\n## Removed\n\n## [0.25.0]\n## Added\n- Add option to \"timed\" caches to refresh the ttl of entries on cache hits\n## Changed\n## Removed\n\n## [0.24.1] / [cached_proc_macro[0.6.1]]\n## Added\n- Add docs strings to the items generated by the `#cached` proc macro\n## Changed\n## Removed\n\n## [0.24.0]\n## Added\n- `cache_reset_metrics` trait method to reset hits/misses\n## Changed\n## Removed\n\n## [0.23.0]\n## Added\n## Changed\n- Refactor cache store types to separate modules\n## Removed\n\n## cached[0.22.0] / cached_proc_macro[0.6.0] / cached_proc_macro_types[0.1.0]\n## Added\n- Add support for returning a `cached::Return` wrapper type that\n  indicates whether the result came from the function's cache.\n## Changed\n## Removed\n\n## [0.21.1] / [0.5.0]\n## Added\n- Support mutual `size` & `time` args in the cached proc macro.\n  Added when TimedSizedCache was added, but forgot to release\n  the cached_proc_macro crate update.\n## Changed\n## Removed\n\n## [0.21.0]\n## Added\n- Add a TimedSizedCache combining LRU and timed/ttl logic\n## Changed\n## Removed\n\n## [0.20.0]\n## Added\n- Add new CachedAsync trait. Only present with async feature. Adds two async function in the entry API style of HashMap\n## Changed\n## Removed\n\n## [0.19.0] / [0.4.0]\n## Added\n## Changed\n- Add type hint `_result!` macros\n- remove unnecessary transmute in cache reset\n- remove unnecessary clones in proc macro\n## Removed\n\n## [0.18.0] / [0.3.0]\n## Added\n## Changed\n- use `async-mutex` instead of full `async-std`\n## Removed\n\n## [0.17.0]\n## Added\n## Changed\n- Store inner values when `result=true` or `option=true`. The `Error` type in the\n`Result` now no longer needs to implement `Clone`.\n## Removed\n\n## [0.16.0]\n## Added\n- add `cache_set_lifespan` to change the cache lifespace, old value returned.\n## Changed\n## Removed\n\n## [0.15.1]\n## Added\n## Changed\n- fix proc macro when result=true, regression from changing `cache_set` to return the previous value\n## Removed\n\n## [0.15.0]\n## Added\n- add `Cached` implementation for std `HashMap`\n## Changed\n- trait `Cached` has a new method `cache_get_or_set_with`\n- `cache_set` now returns the previous value if any\n## Removed\n\n## [0.14.0]\n## Added\n- add Clone, Debug trait derives on pub types\n\n## Changed\n\n## Removed\n\n## [0.13.1]\n## Added\n\n## Changed\n- fix proc macro documentation\n\n## Removed\n\n## [0.13.0]\n## Added\n- proc macro version\n- async support when using the new proc macro version\n\n## Changed\n\n## Removed\n\n## [0.12.0]\n## Added\n- Add `cache_get_mut` to `Cached` trait, to allow mutable access for values in the cache.\n- Change the type of `hits` and `misses` to be `u64`.\n\n## Changed\n\n## Removed\n\n## [0.11.0]\n## Added\n- Add `value_order` method to SizedCache, similar to `key_order`\n\n## Changed\n\n## Removed\n\n## [0.10.0]\n## Added\n- add `cache_reset` trait method for resetting cache collections to\n  their initial state\n\n## Changed\n- Update `once_cell` to 1.x\n\n## Removed\n\n## [0.9.0]\n## Added\n\n## Changed\n- Replace SizedCache implementation to avoid O(n) lookup on cache-get\n- Update to Rust-2018 edition\n- cargo fmt everything\n\n## Removed\n\n\n## [0.8.1]\n## Added\n\n## Changed\n- Replace inner cache when \"clearing\" unbounded cache\n\n## Removed\n\n\n## [0.8.0]\n## Added\n\n## Changed\n- Switch to `once_cell`. Library users no longer need to import `lazy_static`\n\n## Removed\n\n## [0.7.0]\n## Added\n- Add `cache_clear` and `cache_result` to `Cached` trait\n  - Allows for defeating cache entries if desired\n\n## Changed\n\n## Removed\n\n## [0.6.2]\n## Added\n\n## Changed\n- Update documentation\n  - Note the in-memory nature of cache stores\n  - Note the behavior of memoized functions under concurrent access\n\n## Removed\n\n## [0.6.1]\n## Added\n\n## Changed\n- Fixed duplicate key eviction in `SizedCache::cache_set`. This would manifest when\n  `cached` functions called with duplicate keys would race set an uncached key,\n  or if `SizedCache` was used directly.\n\n## Removed\n\n## [0.6.0]\n## Added\n- Add `cached_result` and `cached_key_result` to allow the caching of success for a function that returns `Result`.\n- Add `cached_control` macro to allow specifying functionality\n  at key points of the macro\n\n## [0.5.0]\n## Added\n- Add `cached_key` macro to allow defining the caching key\n\n## Changed\n- Tweak `cached` macro syntax\n- Update readme\n\n## Removed\n\n\n## [0.4.4]\n## Added\n\n## Changed\n- Update trait docs\n\n## Removed\n\n\n## [0.4.3]\n## Added\n\n## Changed\n- Update readme\n- Update examples\n- Update crate documentation and examples\n\n## Removed\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 1.4873046875,
          "content": "# Contributing\n\nThanks for contributing!\n\n## Getting Started\n\n### Required software\n\n- [Rust toolchain](https://www.rust-lang.org/en-US/install.html)\n- [`cargo-readme`](https://github.com/livioribeiro/cargo-readme) (`cargo install\n  cargo-readme`)\n- [GNU Make](https://www.gnu.org/software/make/)\n- [Docker](https://www.docker.com/) or another Docker-compatible container\n  engine\n  - The docker command used by the Makefile can be specified with `DOCKER_COMMAND`, e.g.\n    ```\n    make DOCKER_COMMAND=containerd docker/redis\n    ```\n\n## Making Changes\n\n- Before committing changes, make sure to run `make fmt` to format the changes\n- Add an entry to the `CHANGELOG.md` file\n- The `README.md` is generated using `cargo-readme` from the crate level\n  documentation in `src/lib.rs`. This means the `README.md` should never be\n  modified by hand. To sync changes made to `src/lib.rs`, run `make docs`\n- The CI system will run all tests using `make ci`. Make sure to run all tests\n  before submitting your pull request\n\n## Make goals overview\n\n```bash\n# The goal used by the CI system\nmake ci\n# Runs all examples\nmake examples\n# Runs all tests\nmake tests\n# Syncs all docs\nmake sync\n# Formats the source code\nmake fmt\n# Performs multiple checks (formatting, clippy and documentation sync)\nmake check\n# Removes all generated artifacts, including docker containers\nmake clean\n```\n\n## Submitting Changes\n\nPull Requests should be made against master.\nTravis CI will run the test suite on all PRs.\nRemember to update the changelog!\n\n"
        },
        {
          "name": "COPYRIGHT",
          "type": "blob",
          "size": 0.3251953125,
          "content": "Copyrights in the \"cached\" project are retained by their contributors. No\ncopyright assignment is required to contribute to the \"cached\" project.\n\nCopyright attributions may be noted at the top of individual files.\nFor full authorship information, see the version control history.\nhttps://github.com/jaemk/cached/graphs/contributors\n"
        },
        {
          "name": "Cargo.toml",
          "type": "blob",
          "size": 3.060546875,
          "content": "[package]\nname = \"cached\"\nversion = \"0.54.0\"\nauthors = [\"James Kominick <james@kominick.com>\"]\ndescription = \"Generic cache implementations and simplified function memoization\"\nrepository = \"https://github.com/jaemk/cached\"\ndocumentation = \"https://docs.rs/cached\"\nreadme = \"README.md\"\ncategories = [\"caching\", \"data-structures\"]\nkeywords = [\"cache\", \"memoize\", \"lru\", \"redis\", \"disk\"]\nlicense = \"MIT\"\nedition = \"2018\"\n\n[package.metadata.docs.rs]\nall-features = true\nrustdoc-args = [\"--cfg\", \"docsrs\"]\n\n[features]\ndefault = [\"proc_macro\", \"ahash\"]\nproc_macro = [\"cached_proc_macro\", \"cached_proc_macro_types\"]\nahash = [\"dep:ahash\", \"hashbrown/default\"]\nasync = [\"futures\", \"tokio\", \"async-trait\"]\nasync_tokio_rt_multi_thread = [\"async\", \"tokio/rt-multi-thread\"]\nredis_store = [\"redis\", \"r2d2\", \"serde\", \"serde_json\"]\nredis_connection_manager = [\"redis_store\", \"redis/connection-manager\"]\nredis_async_std = [\"redis_store\", \"async\", \"redis/aio\", \"redis/async-std-comp\", \"redis/tls\", \"redis/async-std-tls-comp\"]\nredis_tokio = [\"redis_store\", \"async\", \"redis/aio\", \"redis/tokio-comp\", \"redis/tls\", \"redis/tokio-native-tls-comp\"]\nredis_ahash = [\"redis_store\", \"redis/ahash\"]\ndisk_store = [\"sled\", \"serde\", \"rmp-serde\", \"directories\"]\nwasm = []\n\n[dependencies.cached_proc_macro]\nversion = \"0.23.0\"\npath = \"cached_proc_macro\"\noptional = true\n\n[dependencies.cached_proc_macro_types]\nversion = \"0.1.1\"\npath = \"cached_proc_macro_types\"\noptional = true\n\n[dependencies.hashbrown]\nversion = \"0.14\"\ndefault-features = false\nfeatures = [\"raw\", \"inline-more\"]\n\n[dependencies.once_cell]\nversion = \"1\"\n\n[dependencies.thiserror]\nversion = \"1\"\n\n[dependencies.ahash]\nversion = \"0.8\"\ndefault-features = false\noptional = true\n\n[dependencies.futures]\nversion = \"0.3\"\ndefault-features = false\noptional = true\n\n[dependencies.async-trait]\nversion = \"0.1\"\noptional = true\n\n[dependencies.redis]\nversion = \"0.27\"\nfeatures = [\"r2d2\"]\noptional = true\n\n[dependencies.sled]\nversion = \"0.34\"\noptional = true\n\n[dependencies.rmp-serde]\nversion = \"1.1\"\noptional = true\n\n[dependencies.directories]\nversion = \"5.0\"\noptional = true\n\n[dependencies.r2d2]\nversion = \"0.8\"\noptional = true\n\n[dependencies.serde]\nversion = \"1.0\"\nfeatures = [\"derive\"]\noptional = true\n\n[dependencies.serde_json]\nversion = \"1.0\"\noptional = true\n\n[dependencies.tokio]\nversion = \"1\"\nfeatures = [\"macros\", \"time\", \"sync\", \"parking_lot\"]\noptional = true\n\n[dependencies.web-time]\nversion = \"^1.1.0\"\n\n[dev-dependencies]\ncopy_dir = \"0.1.3\"\ngoogletest = \"0.11.0\"\ntempfile = \"3.10.1\"\n\n[dev-dependencies.async-std]\nversion = \"1.6\"\nfeatures = [\"attributes\"]\n\n[dev-dependencies.smartstring]\nversion = \"1\"\n\n[dev-dependencies.serial_test]\nversion = \"3\"\n\n[workspace]\nmembers = [\"cached_proc_macro\", \"examples/wasm\"]\n\n[[example]]\nname = \"redis\"\nrequired-features = [\"redis_store\", \"proc_macro\"]\n\n[[example]]\nname = \"redis-async\"\nrequired-features = [\"async\", \"proc_macro\"]\n\n[[example]]\nname = \"tokio\"\nrequired-features = [\"async\", \"proc_macro\"]\n\n[[example]]\nname = \"async_std\"\nrequired-features = [\"async\", \"proc_macro\"]\n\n[[example]]\nname = \"expiring_sized_cache\"\nrequired-features = [\"async_tokio_rt_multi_thread\"]\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.0458984375,
          "content": "MIT License\n\nCopyright (c) 2017 James Kominick\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "Makefile",
          "type": "blob",
          "size": 5.7783203125,
          "content": "################################################################################\n# Author: Altair Bueno <business.altair.bueno@outlook.com>\n# Date: 22/06/2022\n# Source: https://github.com/jaemk/cached\n# Copyright: MIT License (see LICENSE)\n# Description: GNU Makefile for `cached`\n################################################################################\n# Configuration variables\n\n# List with all basic examples. An example is considered basic if it can be\n# run using `cargo run --example=$EXAMPLE` and run standalone. All features are\n# **enabled**\nCACHED_BASIC_EXAMPLES = async_std \\\n                        basic \\\n                        basic_proc_macro \\\n                        kitchen_sink \\\n                        kitchen_sink_proc_macro \\\n                        tokio \\\n                        expiring_sized_cache\n# Same as `CACHED_BASIC_EXAMPLES`, but these examples require the `docker/redis`\n# goal\nCACHED_REDIS_EXAMPLES = redis \\\n                        redis-async\n# Custom commands. NOTE: You'll need to specify the goal manually. See\n# `examples/cargo/wasm` for an example\nCACHED_CARGO_EXAMPLES = wasm\n\n# Cargo command used to run `run`, `build`, `test`... Useful if you keep\n# multiple cargo versions installed on your machine\nCARGO_COMMAND         = cargo\n\n# Compiler program and flags used to generate README.md\nREADME_CC             = $(CARGO_COMMAND) readme\nREADME_CCFLAGS        = --no-indent-headings\n\n# Compiler program and flags used to generate format the crate\nFMT_CC                = $(CARGO_COMMAND) fmt\nFMT_CCFLAGS           =\n\n# Docker configuration. Set DOCKER_COMMAND on your shell to override the\n# container engine used\n#\n# ```sh\n# # Using containerd to run `docker/redis`\n# make DOCKER_COMMAND=containerd docker/redis\n# ```\nDOCKER_COMMAND                        = docker\nDOCKER_REDIS_CONTAINER_NAME           = cached-tests\nDOCKER_REDIS_CONTAINER_LOCAL_PORT     = 6399\n\n################################################################################\n# Exported variables\nexport CACHED_REDIS_CONNECTION_STRING = redis://127.0.0.1:$(DOCKER_REDIS_CONTAINER_LOCAL_PORT)\nexport RUST_BACKTRACE                 = 1\n\n################################################################################\n# GitHub Actions goal. Run this to test your changes before summiting your final\n# pull request\nci: check tests examples\n\n################################################################################\n# Runs all examples\nexamples: examples/basic examples/cargo examples/redis\n# Runs all basic examples\nexamples/basic: $(addprefix examples/basic/, $(CACHED_BASIC_EXAMPLES))\n# Runs all the project based examples\nexamples/cargo: $(addprefix examples/cargo/, $(CACHED_CARGO_EXAMPLES))\n# Runs `redis` related examples. NOTE: depends on `docker/redis`\nexamples/redis: $(addprefix examples/redis/, $(CACHED_REDIS_EXAMPLES))\n\nexamples/basic/%:\n\t@echo [$@]: Running example $*...\n\t$(CARGO_COMMAND) run --example $* --all-features\n\n# Only builds the `wasm` example. Running this example requires a browser\nexamples/cargo/wasm:\n\t@echo [$@]: Building example $*...\n\tcd examples/wasm ; $(CARGO_COMMAND) build --target=wasm32-unknown-unknown\n\nexamples/redis/%: docker/redis\n\t@echo [$@]: Running example $*...\n\t$(CARGO_COMMAND) run --example $* --all-features\n\n################################################################################\n# Runs `cached` tests. NOTE: Depends on `docker/redis`\ntests: docker/redis\n\t@echo [$@]: Running tests...\n\t$(CARGO_COMMAND) test --all-features -- --nocapture\n\n################################################################################\n# Starts a Redis server using `DOCKER_COMMAND`\ndocker/redis: docker/status\n\t@echo [$@]: Starting Redis container...\n\t-$(DOCKER_COMMAND) run --rm --name $(DOCKER_REDIS_CONTAINER_NAME) \\\n \t\t-p $(DOCKER_REDIS_CONTAINER_LOCAL_PORT):6379 -d redis\n\ndocker/status:\n\t@echo [$@]: Checking the Docker engine\n\t@docker info > /dev/null || (>&2 echo 'Is the Docker engine running?' && exit 42)\n\n################################################################################\n# Syncs all docs\ndocs: docs/readme\n\n# Updates README.md using `README_CC`\ndocs/readme: README.md\n\nREADME.md: src/lib.rs\n\t@echo [$@]: Updating $@...\n\t$(README_CC) $(README_CCFLAGS) > $@\n\n################################################################################\n# Formats `cached` crate\nfmt:\n\t@echo [$@]: Formatting code...\n\t$(FMT_CC) $(FMT_CCFLAGS)\n\n################################################################################\n# Runs all checks\ncheck: check/fmt check/readme check/clippy\n\n# Checks if `cached` crate is well formatted\ncheck/fmt: FMT_CCFLAGS += --check\ncheck/fmt:\n\t@echo [$@]: Checking code format...\n\t$(FMT_CC) $(FMT_CCFLAGS)\n\n# Checks if the README.md file is up-to-date\ncheck/readme:\n\t@echo [$@]: Checking README.md...\n\t$(README_CC) $(README_CCFLAGS) | cmp README.md\n\n# Runs clippy linter on `cached` crate\ncheck/clippy:\n\t@echo [$@]: Running clippy...\n\t$(CARGO_COMMAND) clippy --all-features --all-targets --examples --tests\n\n################################################################################\n# Cleans all generated artifacts and deletes all docker containers\nclean: clean/docker clean/cargo\n\n# Runs `cargo clean`\nclean/cargo:\n\t@echo [$@]: Removing cargo artifacts...\n\t$(CARGO_COMMAND) clean\n\n# Removes all docker containers\nclean/docker: clean/docker/$(DOCKER_REDIS_CONTAINER_NAME)\n\n# Removes a docker container with the given name\nclean/docker/%:\n\t@echo [$@]: Removing container called $*...\n\t$(DOCKER_COMMAND) rm -f $*\n\n################################################################################\n# Special targets.\n\n.PHONY: ci \\\n\t\t$(filter examples%, $(MAKECMDGOALS)) \\\n\t\t$(filter tests%, $(MAKECMDGOALS)) \\\n\t\t$(filter docker%, $(MAKECMDGOALS)) \\\n\t\t$(filter docs%, $(MAKECMDGOALS)) \\\n\t\t$(filter fmt%, $(MAKECMDGOALS)) \\\n\t\t$(filter check%, $(MAKECMDGOALS)) \\\n\t\t$(filter clean%, $(MAKECMDGOALS))\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 8.537109375,
          "content": "# cached\n\n[![Build Status](https://github.com/jaemk/cached/actions/workflows/build.yml/badge.svg)](https://github.com/jaemk/cached/actions/workflows/build.yml)\n[![crates.io](https://img.shields.io/crates/v/cached.svg)](https://crates.io/crates/cached)\n[![docs](https://docs.rs/cached/badge.svg)](https://docs.rs/cached)\n\n> Caching structures and simplified function memoization\n\n`cached` provides implementations of several caching structures as well as a handy macros\nfor defining memoized functions.\n\nMemoized functions defined using [`#[cached]`](proc_macro::cached)/[`#[once]`](proc_macro::once)/[`#[io_cached]`](proc_macro::io_cached)/[`cached!`](crate::macros) macros are thread-safe with the backing\nfunction-cache wrapped in a mutex/rwlock, or externally synchronized in the case of `#[io_cached]`.\nBy default, the function-cache is **not** locked for the duration of the function's execution, so initial (on an empty cache)\nconcurrent calls of long-running functions with the same arguments will each execute fully and each overwrite\nthe memoized value as they complete. This mirrors the behavior of Python's `functools.lru_cache`. To synchronize the execution and caching\nof un-cached arguments, specify `#[cached(sync_writes = true)]` / `#[once(sync_writes = true)]` (not supported by `#[io_cached]`.\n\n- See [`cached::stores` docs](https://docs.rs/cached/latest/cached/stores/index.html) cache stores available.\n- See [`proc_macro`](https://docs.rs/cached/latest/cached/proc_macro/index.html) for more procedural macro examples.\n- See [`macros`](https://docs.rs/cached/latest/cached/macros/index.html) for more declarative macro examples.\n\n**Features**\n\n- `default`: Include `proc_macro` and `ahash` features\n- `proc_macro`: Include proc macros\n- `ahash`: Enable the optional `ahash` hasher as default hashing algorithm.\n- `async`: Include support for async functions and async cache stores\n- `async_tokio_rt_multi_thread`: Enable `tokio`'s optional `rt-multi-thread` feature.\n- `redis_store`: Include Redis cache store\n- `redis_async_std`: Include async Redis support using `async-std` and `async-std` tls support, implies `redis_store` and `async`\n- `redis_tokio`: Include async Redis support using `tokio` and `tokio` tls support, implies `redis_store` and `async`\n- `redis_connection_manager`: Enable the optional `connection-manager` feature of `redis`. Any async redis caches created\n                              will use a connection manager instead of a `MultiplexedConnection`\n- `redis_ahash`: Enable the optional `ahash` feature of `redis`\n- `disk_store`: Include disk cache store\n- `wasm`: Enable WASM support. Note that this feature is incompatible with `tokio`'s multi-thread\n   runtime (`async_tokio_rt_multi_thread`) and all Redis features (`redis_store`, `redis_async_std`, `redis_tokio`, `redis_ahash`)\n\nThe procedural macros (`#[cached]`, `#[once]`, `#[io_cached]`) offer more features, including async support.\nSee the [`proc_macro`](crate::proc_macro) and [`macros`](crate::macros) modules for more samples, and the\n[`examples`](https://github.com/jaemk/cached/tree/master/examples) directory for runnable snippets.\n\nAny custom cache that implements `cached::Cached`/`cached::CachedAsync` can be used with the `#[cached]`/`#[once]`/`cached!` macros in place of the built-ins.\nAny custom cache that implements `cached::IOCached`/`cached::IOCachedAsync` can be used with the `#[io_cached]` macro.\n\n----\n\nThe basic usage looks like:\n\n```rust\nuse cached::proc_macro::cached;\n\n/// Defines a function named `fib` that uses a cache implicitly named `FIB`.\n/// By default, the cache will be the function's name in all caps.\n/// The following line is equivalent to #[cached(name = \"FIB\", unbound)]\n#[cached]\nfn fib(n: u64) -> u64 {\n    if n == 0 || n == 1 { return n }\n    fib(n-1) + fib(n-2)\n}\n```\n\n----\n\n```rust\nuse std::thread::sleep;\nuse std::time::Duration;\nuse cached::proc_macro::cached;\nuse cached::SizedCache;\n\n/// Use an explicit cache-type with a custom creation block and custom cache-key generating block\n#[cached(\n    ty = \"SizedCache<String, usize>\",\n    create = \"{ SizedCache::with_size(100) }\",\n    convert = r#\"{ format!(\"{}{}\", a, b) }\"#\n)]\nfn keyed(a: &str, b: &str) -> usize {\n    let size = a.len() + b.len();\n    sleep(Duration::new(size as u64, 0));\n    size\n}\n```\n\n----\n\n```rust\nuse cached::proc_macro::once;\n\n/// Only cache the initial function call.\n/// Function will be re-executed after the cache\n/// expires (according to `time` seconds).\n/// When no (or expired) cache, concurrent calls\n/// will synchronize (`sync_writes`) so the function\n/// is only executed once.\n#[once(time=10, option = true, sync_writes = true)]\nfn keyed(a: String) -> Option<usize> {\n    if a == \"a\" {\n        Some(a.len())\n    } else {\n        None\n    }\n}\n```\n\n----\n\n```compile_fail\nuse cached::proc_macro::cached;\n\n/// Cannot use sync_writes and result_fallback together\n#[cached(\n    result = true,\n    time = 1,\n    sync_writes = true,\n    result_fallback = true\n)]\nfn doesnt_compile() -> Result<String, ()> {\n    Ok(\"a\".to_string())\n}\n```\n----\n\n```rust,no_run,ignore\nuse cached::proc_macro::io_cached;\nuse cached::AsyncRedisCache;\nuse thiserror::Error;\n\n#[derive(Error, Debug, PartialEq, Clone)]\nenum ExampleError {\n    #[error(\"error with redis cache `{0}`\")]\n    RedisError(String),\n}\n\n/// Cache the results of an async function in redis. Cache\n/// keys will be prefixed with `cache_redis_prefix`.\n/// A `map_error` closure must be specified to convert any\n/// redis cache errors into the same type of error returned\n/// by your function. All `io_cached` functions must return `Result`s.\n#[io_cached(\n    map_error = r##\"|e| ExampleError::RedisError(format!(\"{:?}\", e))\"##,\n    ty = \"AsyncRedisCache<u64, String>\",\n    create = r##\" {\n        AsyncRedisCache::new(\"cached_redis_prefix\", 1)\n            .set_refresh(true)\n            .build()\n            .await\n            .expect(\"error building example redis cache\")\n    } \"##\n)]\nasync fn async_cached_sleep_secs(secs: u64) -> Result<String, ExampleError> {\n    std::thread::sleep(std::time::Duration::from_secs(secs));\n    Ok(secs.to_string())\n}\n```\n\n----\n\n```rust,no_run,ignore\nuse cached::proc_macro::io_cached;\nuse cached::DiskCache;\nuse thiserror::Error;\n\n#[derive(Error, Debug, PartialEq, Clone)]\nenum ExampleError {\n    #[error(\"error with disk cache `{0}`\")]\n    DiskError(String),\n}\n\n/// Cache the results of a function on disk.\n/// Cache files will be stored under the system cache dir\n/// unless otherwise specified with `disk_dir` or the `create` argument.\n/// A `map_error` closure must be specified to convert any\n/// disk cache errors into the same type of error returned\n/// by your function. All `io_cached` functions must return `Result`s.\n#[io_cached(\n    map_error = r##\"|e| ExampleError::DiskError(format!(\"{:?}\", e))\"##,\n    disk = true\n)]\nfn cached_sleep_secs(secs: u64) -> Result<String, ExampleError> {\n    std::thread::sleep(std::time::Duration::from_secs(secs));\n    Ok(secs.to_string())\n}\n```\n\n\nFunctions defined via macros will have their results cached using the\nfunction's arguments as a key, a `convert` expression specified on a procedural macros,\nor a `Key` block specified on a `cached_key!` declarative macro.\n\nWhen a macro-defined function is called, the function's cache is first checked for an already\ncomputed (and still valid) value before evaluating the function body.\n\nDue to the requirements of storing arguments and return values in a global cache:\n\n- Function return types:\n  - For all store types, except Redis, must be owned and implement `Clone`\n  - For the Redis store type, must be owned and implement `serde::Serialize + serde::DeserializeOwned`\n- Function arguments:\n  - For all store types, except Redis, must either be owned and implement `Hash + Eq + Clone`,\n    the `cached_key!` macro is used with a `Key` block specifying key construction, or\n    a `convert` expression is specified on a procedural macro to specify how to construct a key\n    of a `Hash + Eq + Clone` type.\n  - For the Redis store type, must either be owned and implement `Display`, or the `cached_key!` & `Key`\n    or procedural macro & `convert` expression used to specify how to construct a key of a `Display` type.\n- Arguments and return values will be `cloned` in the process of insertion and retrieval. Except for Redis\n  where arguments are formatted into `Strings` and values are de/serialized.\n- Macro-defined functions should not be used to produce side-effectual results!\n- Macro-defined functions cannot live directly under `impl` blocks since macros expand to a\n  `once_cell` initialization and one or more function definitions.\n- Macro-defined functions cannot accept `Self` types as a parameter.\n\n\n\nLicense: MIT\n"
        },
        {
          "name": "bin",
          "type": "tree",
          "content": null
        },
        {
          "name": "cached_proc_macro",
          "type": "tree",
          "content": null
        },
        {
          "name": "cached_proc_macro_types",
          "type": "tree",
          "content": null
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}