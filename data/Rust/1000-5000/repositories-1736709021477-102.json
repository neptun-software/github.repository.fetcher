{
  "metadata": {
    "timestamp": 1736709021477,
    "page": 102,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjExMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "EbTech/rust-algorithms",
      "stars": 3802,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.060546875,
          "content": "target/\n**/*.rs.bk\nCargo.lock\n.idea/\n.vscode/\n*.code-workspace"
        },
        {
          "name": ".travis.yml",
          "type": "blob",
          "size": 0.2802734375,
          "content": "language: rust\nrust:\n  #- 1.58.0 # Version currently supported by Codeforces\n  - stable\n  - beta\n  - nightly\nbefore_script:\n  - rustup component add clippy\nscript:\n  - cargo test --verbose\n  - cargo clippy -- -D warnings\nmatrix:\n  allow_failures:\n    - rust: nightly\n  fast_finish: true\n"
        },
        {
          "name": "Cargo.toml",
          "type": "blob",
          "size": 0.45703125,
          "content": "[package]\nname = \"contest-algorithms\"\nversion = \"0.3.1-alpha.0\"\nauthors = [\"Aram Ebtekar\"]\nedition = \"2021\"\n\ndescription = \"Common algorithms and data structures for programming contests\"\nrepository = \"https://github.com/EbTech/rust-algorithms\"\nreadme = \"README.md\"\nkeywords = [\"competitive\", \"programming\", \"codeforces\"]\ncategories = [\"algorithms\", \"data-structures\"]\nlicense = \"MIT\"\n\n[badges]\ntravis-ci = { repository = \"EbTech/rust-algorithms\", branch = \"master\" }\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.0439453125,
          "content": "MIT License\n\nCopyright (c) 2017 Aram Ebtekar\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 5.708984375,
          "content": "# Contest Algorithms in Rust\n\n[![Crates.io Version](https://img.shields.io/crates/v/contest-algorithms.svg)](https://crates.io/crates/contest-algorithms)\n[![Documentation](https://docs.rs/contest-algorithms/badge.svg)](https://docs.rs/contest-algorithms)\n[![license](https://img.shields.io/badge/license-MIT-blue.svg)](https://github.com/bevyengine/bevy/blob/master/LICENSE)\n[![Crates.io Downloads](https://img.shields.io/crates/d/contest-algorithms.svg)](https://crates.io/crates/contest-algorithms)\n[![Build Status](https://travis-ci.org/EbTech/rust-algorithms.svg?branch=master)](https://travis-ci.org/EbTech/rust-algorithms)\n[![Gitter](https://badges.gitter.im/rust-algos/community.svg)](https://gitter.im/rust-algos/community?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge)\n\nA collection of classic data structures and algorithms, emphasizing usability, beauty and clarity over full generality. As such, this should be viewed not as a blackbox *library*, but as a whitebox *cookbook* demonstrating the design and implementation of algorithms. I hope it will be useful to students and educators, as well as fans of algorithmic programming contests.\n\nThis repository is distributed under the [MIT License](LICENSE). Contest submissions need not include the license text. Enjoy!\n\n## For Students and Educators\n\nWhen learning a new algorithm or data structure, it's often helpful to see or play with a concrete implementation. As such, this repository catalogues several classic algorithms in their simplest forms.\n\nIn addition, the Rust language has outstanding pedagogical attributes. Its compiler acts as a teacher, enforcing strict discipline while pointing to clearer ways to structure one's logic.\n\n## For Programming Contests\n\nThe original intent of this project was to build a reference for use in programming contests. As a result, it contains algorithms that are frequently useful to have in one's toolkit, with an emphasis on code that is concise and easy to modify under time pressure.\n\nMost competitive programmers rely on C++ for its fast execution time. However, it's notoriously unsafe, diverting a considerable share of the contestant's time and attention on mistake prevention and debugging. Java is the next most popular choice, offering a little safety at some expense to speed of coding and execution.\n\nTo my delight, I found that Rust eliminates entire classes of bugs, while reducing visual clutter to make the rest easier to spot. And, it's *fast*. There's a learning curve, to be sure. However, a proficient Rust programmer stands to gain a competitive advantage as well as a more pleasant experience!\n\nSome contest sites and online judges that support Rust:\n- [Codeforces](https://codeforces.com)\n- [CodeChef](https://www.codechef.com)\n- [AtCoder](https://atcoder.jp)\n- [Kattis](https://open.kattis.com/help/rust)\n- [SPOJ](https://www.spoj.com/)\n- [LeetCode](https://leetcode.com/contest)\n- [HackerRank](https://www.hackerrank.com/contests)\n- [Timus](http://acm.timus.ru/help.aspx?topic=rust)\n\nThe following support pre-2018 versions of Rust:\n- [Google Kick Start and Code Jam](https://codingcompetitions.withgoogle.com)\n\nFor help in getting started, you may check out [some of my past submissions](https://codeforces.com/contest/1168/submission/55200038).\n\n## Programming Language Advocacy\n\nMy other goal is to appeal to developers who feel limited by ancient (yet still mainstream) programming languages, by demonstrating the power of modern techniques.\n\nRather than try to persuade you with words, this repository aims to show by example. If you'd like to learn the language, I recommend [the official book](https://doc.rust-lang.org/book/) or [Programming Rust](https://www.amazon.com/Programming-Rust-Fast-Systems-Development-dp-1492052590/dp/1492052590).\n\n# Contents\n\n## [Graphs](src/graph/)\n\n### [Graph representations](src/graph/mod.rs)\n\n- Integer index-based adjacency list representation\n- Disjoint set union\n\n### [Elementary graph algorithms](src/graph/util.rs)\n\n- Euler path and tour\n- Kruskal's minimum spanning tree \n- Dijkstra's single-source shortest paths\n- DFS pre-order traversal\n\n### [Connected components](src/graph/connectivity.rs)\n\n- Connected components\n- Strongly connected components\n- Bridges and 2-edge-connected components\n- Articulation points and 2-vertex-connected components\n- Topological sort\n- 2-SAT solver\n\n### [Network flows](src/graph/flow.rs)\n\n- Dinic's blocking maximum flow\n- Minimum cut\n- Hopcroft-Karp bipartite matching\n- Minimum cost maximum flow\n\n## [Math](src/math/)\n\n### [Number theory](src/math/mod.rs)\n\n- Greatest common divisor\n- Canonical solution to Bezout's identity\n- Miller's primality test\n\n### [Generic FFT](src/math/fft.rs)\n\n- Fast Fourier transform\n- Number theoretic transform\n- Convolution\n\n### [Arithmetic](src/math/num.rs)\n\n- Rational numbers\n- Complex numbers\n- Linear algebra\n- Safe modular arithmetic\n\n## [Ordering and search](src/order.rs)\n\n- Comparator for `PartialOrd`\n- Binary search: drop-in replacements for C++ `lower_bound()`/`upper_bound()`\n- Merge and mergesort\n- Coordinate compression\n- Online convex hull trick (update and query the upper envelope of a set of lines)\n\n## [Associative range query](src/range_query)\n\n- Statically allocated binary indexed ARQ tree (a.k.a. generic segtree with lazy propagation)\n- Dynamically allocated ARQ tree, optionally sparse and persistent\n- Mo's algorithm (a.k.a. query square root decomposition)\n\n## [Scanner](src/scanner.rs)\n\n- Utility for reading input data ergonomically\n- File and standard I/O examples\n\n## [String processing](src/string_proc.rs)\n\n- Generic trie\n- Knuth-Morris-Pratt single-pattern string matching\n- Aho-Corasick multi-pattern string matching\n- Suffix array: O(n log n) construction using counting sort\n- Longest common prefix\n- Manacher's linear-time palindrome search\n\n"
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}