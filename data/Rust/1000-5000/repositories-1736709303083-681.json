{
  "metadata": {
    "timestamp": 1736709303083,
    "page": 681,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjY5MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "kkawakam/rustyline",
      "stars": 1595,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.09765625,
          "content": "# Generated by Cargo\n/target/\nCargo.lock\n\n# vim swap file\n*.swp\n\n# default history file\nhistory.txt\n"
        },
        {
          "name": "Ansi.md",
          "type": "blob",
          "size": 2.1015625,
          "content": "# Output\n\n| Seq       | Terminfo                   | Comment                                                  |\n| --------- | -------------------------- | -------------------------------------------------------- |\n| \\E[H      | cursor_home, home, ho      |                                                          |\n| \\E[K      | clr_eol, el, ce            |                                                          |\n| \\E[H\\E[J  | clear_screen, clear, cl    |                                                          |\n| \\E[6n     | user7, u7, u7              | cursor position report                                   |\n| ^M        | carriage_return, cr, cr    | move cursor to bol                                       |\n| \\E[B      | cursor_down, cud1, do      | ^J                                                       |\n| \\E[%p1%dB | parm_down_cursor, cud, DO  |                                                          |\n| \\E[A      | cursor_up, cuu1, up        |                                                          |\n| \\E[%p1%dA | parm_up_cursor, cuu, UP    |                                                          |\n| \\E[C      | cursor_right, cuf1, nd     |                                                          |\n| \\E[%p1%dC | parm_right_cursor, cuf, RI |                                                          |\n| \\E[D      | cursor_left, cub1, le      | ^H                                                       |\n| \\E[%p1%dD | parm_left_cursor, cub, LE  |                                                          |\n| ^G        | bell, bel, bl              |                                                          |\n| \\E[?2004h |                            | bracketed paste on                                       |\n| \\E[?2004l |                            | bracketed paste off                                      |\n| \\E[?1000h |                            | X11 mouse reporting, reports on button press and release |\n| \\E[?1015h |                            | Enable urxvt Mouse mode                                  |\n| \\E[?1006h |                            | Enable Xterm SGR mouse mode                              |\n"
        },
        {
          "name": "BUGS.md",
          "type": "blob",
          "size": 1.9326171875,
          "content": "Know issues\n\n## Document / Syntax\n\nWe would like to introduce an incremental parsing phase (see `tree-sitter`).\nBecause, when you have tokens (which may be as simple as words) or an AST,\ncompletion / suggestion / highlighting / validation become easy.\nSo we need to send events to a lexer/parser, update `Document` accordingly.\nAnd fix `Completer` / `Hinter` / `Highlighter` API such as they have access to `Document`.\n\nSee [lex_document](https://python-prompt-toolkit.readthedocs.io/en/master/pages/advanced_topics/rendering_flow.html#the-rendering-flow).\n\n## Repaint / Refresh\n\nCurrently, performance is poor because, most of the time, we refresh the whole line (and prompt).\nWe would like to transform events on prompt/line/hint into partial repaint.\n\nSee `termwiz` design (`Surface`).\nSee `replxx` refresh delay (`_lastRefreshTime`) or `python-prompt-toolkit` max_render_postpone_time.\nhttps://docs.rs/xi-unicode/0.3.0/xi_unicode/struct.LineBreakIterator.html\nhttps://github.com/xi-editor/xi-editor/blob/master/rust/core-lib/src/linewrap.rs\n[vt100](https://docs.rs/vt100/0.12.0/vt100/struct.Screen.html#method.contents_diff)\n\n## Action / Command\n\nWe would like to support user defined actions that interact nicely with undo manager and kill-ring.\nTo do so, we need to refactor current key event dispatch.\n\nSee `replxx` design (`ACTION_RESULT`, `action_trait_t`).\n\n## Line wrapping (should be fixed with versions >= 6.1.2)\n\nOn Unix platform, we assume that `auto_right_margin` (`am`) is enabled.\nAnd on Windows, we activate `ENABLE_WRAP_AT_EOL_OUTPUT`.\nBut on Windows 10, `ENABLE_WRAP_AT_EOL_OUTPUT` and `ENABLE_VIRTUAL_TERMINAL_PROCESSING` seems to be incompatible.\n\n## Colors\n\nWe assume that ANSI colors are supported.\nWhich is not the case on Windows (except on Windows 10)!\n\n## Emoji\n\nhttps://github.com/kkawakam/rustyline/issues/184\nhttps://docs.rs/xi-unicode/0.3.0/xi_unicode/trait.EmojiExt.html\nhttps://docs.rs/termwiz/0.11.0/termwiz/cell/fn.grapheme_column_width.html\n"
        },
        {
          "name": "Cargo.toml",
          "type": "blob",
          "size": 3.123046875,
          "content": "[package]\nname = \"rustyline\"\nversion = \"15.0.0\"\nauthors = [\"Katsu Kawakami <kkawa1570@gmail.com>\"]\nedition = \"2021\"\ndescription = \"Rustyline, a readline implementation based on Antirez's Linenoise\"\ndocumentation = \"https://docs.rs/rustyline\"\nrepository = \"https://github.com/kkawakam/rustyline\"\nreadme = \"README.md\"\nkeywords = [\"readline\"]\nlicense = \"MIT\"\ncategories = [\"command-line-interface\"]\n\nexclude = [\"/.github/*\", \"/rustfmt.toml\"]\n\n[badges]\nmaintenance = { status = \"actively-developed\" }\n\n[workspace]\nmembers = [\"rustyline-derive\"]\n\n[dependencies]\nbitflags = \"2.6\"\ncfg-if = \"1.0\"\n# For file completion\nhome = { version = \"0.5.4\", optional = true }\n# For History\nfd-lock = { version = \"4.0.0\", optional = true }\nrusqlite = { version = \"0.32.0\", optional = true, default-features = false, features = [\n    \"bundled\",\n    \"backup\",\n] }\nlibc = \"0.2.155\"\nlog = \"0.4.22\"\nunicode-width = \"0.2.0\"\nunicode-segmentation = \"1.0\"\nmemchr = \"2.7\"\n# For custom bindings\nradix_trie = { version = \"0.2\", optional = true }\nregex = { version = \"1.10\", optional = true }\n# For derive\nrustyline-derive = { version = \"0.11.0\", optional = true, path = \"rustyline-derive\" }\n\n[target.'cfg(unix)'.dependencies]\nnix = { version = \"0.29\", default-features = false, features = [\n    \"fs\",\n    \"ioctl\",\n    \"poll\",\n    \"signal\",\n    \"term\",\n] }\nutf8parse = \"0.2\"\nskim = { version = \"0.10\", optional = true, default-features = false }\nsignal-hook = { version = \"0.3\", optional = true, default-features = false }\ntermios = { version = \"0.3.3\", optional = true }\nbuffer-redux = { version = \"1.0\", optional = true, default-features = false }\n\n[target.'cfg(windows)'.dependencies]\nwindows-sys = { version = \"0.59.0\", features = [\n    \"Win32_Foundation\",\n    \"Win32_System_Console\",\n    \"Win32_Security\",\n    \"Win32_System_Threading\",\n    \"Win32_UI_Input_KeyboardAndMouse\",\n] }\nclipboard-win = \"5.0\"\n\n[dev-dependencies]\ndoc-comment = \"0.3\"\nenv_logger = { version = \"0.11\", default-features = false }\ntempfile = \"3.1.0\"\nrand = \"0.8\"\nassert_matches = \"1.2\"\n\n[features]\ndefault = [\"custom-bindings\", \"with-dirs\", \"with-file-history\"]\ncustom-bindings = [\"radix_trie\"]\nderive = [\"rustyline-derive\"]\nwith-dirs = [\"home\"]\nwith-file-history = [\"fd-lock\"]\nwith-sqlite-history = [\"rusqlite\"]\nwith-fuzzy = [\"skim\"]\ncase_insensitive_history_search = [\"regex\"]\n\n[[example]]\nname = \"custom_key_bindings\"\nrequired-features = [\"custom-bindings\", \"derive\"]\n[[example]]\nname = \"diy_hints\"\nrequired-features = [\"derive\"]\n[[example]]\nname = \"example\"\nrequired-features = [\"custom-bindings\", \"derive\"]\n[[example]]\nname = \"input_multiline\"\nrequired-features = [\"custom-bindings\", \"derive\"]\n[[example]]\nname = \"input_validation\"\nrequired-features = [\"derive\"]\n[[example]]\nname = \"numeric_input\"\nrequired-features = [\"custom-bindings\"]\n[[example]]\nname = \"read_password\"\nrequired-features = [\"derive\"]\n[[example]]\nname = \"sqlite_history\"\nrequired-features = [\"with-sqlite-history\"]\n\n[package.metadata.docs.rs]\nfeatures = [\n    \"custom-bindings\",\n    \"derive\",\n    \"with-dirs\",\n    \"with-file-history\",\n    \"with-fuzzy\",\n]\nall-features = false\nno-default-features = true\ndefault-target = \"x86_64-unknown-linux-gnu\"\nrustdoc-args = [\"--cfg\", \"docsrs\"]\n"
        },
        {
          "name": "CustomBinding.md",
          "type": "blob",
          "size": 2.6767578125,
          "content": "## Related topics\n\n- [Multiple commands for a keybinding](https://github.com/kkawakam/rustyline/issues/306) and\n  [Conditional Bind Sequences](https://github.com/kkawakam/rustyline/issues/269) : original issues\n- [Conditional Bind Sequences](https://github.com/kkawakam/rustyline/pull/293) : incomplete proposal\n- [Add `Cmd::Yield` for complex custom bindings](https://github.com/kkawakam/rustyline/pull/342) : another proposal\n- [Initial invoke trait and auto-indent example](https://github.com/kkawakam/rustyline/pull/466) : a validator is like a custom action triggered indirectly.\n\nAnd other issues that should be solved if our design is good:\n\n- [Extend Meta-F,Alt+Right feature for hint partial completion](https://github.com/kkawakam/rustyline/pull/430)\n- [Use Arrow-Up to search history with prefix](https://github.com/kkawakam/rustyline/issues/423)\n- [Execute Arbitrary Command Via Keybinding](https://github.com/kkawakam/rustyline/issues/418)\n- [Use Ctrl-E for hint completion](https://github.com/kkawakam/rustyline/pull/407)\n- [Add History Search Behaviour](https://github.com/kkawakam/rustyline/pull/424)\n- ...\n\n## Conditions / Filters\n\nSee https://python-prompt-toolkit.readthedocs.io/en/master/pages/advanced_topics/key_bindings.html?highlight=filter#attaching-a-filter-condition\n\nSome keys/commands may behave differently depending on:\n\n- edit mode (emacs vs vi)\n- vi input mode (insert vs replace vs command modes)\n- empty line\n- cursor position\n- repeat count\n- original key pressed (when same command is bound to different key)\n- hint\n- ...\n\n## More input\n\nSome keys/commands may ask for more input.\nI am not sure if this point should be tackled here.\n\n## Multiple / complex actions\n\nFor one key/command, we may want to perform multiple actions.\nWe should ask the undo manager to start a \"transaction\" before first action and commit it after the last action.\nShould we do something specific with the kill ring ?\nWe should refresh / repaint only when all actions are performed (or if ask explicitly?) depending on cumulated action impacts.\n...\n\n## Misc\n\n```rust\n/// Command / action result\n#[derive(Debug, Clone, PartialEq, Copy)]\n#[non_exhaustive]\npub enum ActionResult {\n    // Interrupt / reject user input\n    // => Err should be fine\n    //Bail,\n    ///\n    Continue,\n    /// Accept user input (except if `Validator` disagrees)\n    Return,\n}\n```\n\n```rust\nbitflags::bitflags! {\n    #[doc = \"Action invocation impacts\"]\n    pub struct Impacts: u8 {\n        const PUSH_CHAR = 0b0000_0001;\n        const BEEP = 0b0000_0010;\n        const MOVE_CURSOR = 0b0000_0100; // State::move_cursor\n        const REFRESH = 0b0000_1000; // State::refresh_line\n        const CLEAR_SREEN = 0b0001_0000; // State::clear_screen\n    }\n}\n```\n"
        },
        {
          "name": "Features.md",
          "type": "blob",
          "size": 2.138671875,
          "content": "# Extra features\n\n| Alt            | Scroll | Continuation prompt | Right prompt | Suspend |\n| -------------- | ------ | ------------------- | ------------ | ------- |\n| isocline       | X      | X                   |              |         |\n| linefeed       |        |                     |              | Unix    |\n| liner          |        |                     |              |         |\n| prompt-toolkit | X      | X                   | X            | Unix    |\n| reedline       |        | X                   | X            |         |\n| replxx         |        |                     |              | Unix    |\n| rustyline      |        |                     |              | Unix    |\n| termwiz        |        |                     |              |         |\n\nScroll: for very long line (longer than screen cols\\*rows), scrolls from start to end.\\\nContinuation prompt: for multiline input, display a different prompt\\\nSuspend: Control-Z\n\n| Alt            | Editable History | Custom history backend | History timestamp |\n| -------------- | ---------------- | ---------------------- | ----------------- |\n| isocline       |                  |                        |                   |\n| linefeed       | X                |                        |                   |\n| liner          |                  |                        |                   |\n| prompt-toolkit |                  | X                      |                   |\n| reedline       |                  | X                      |                   |\n| replxx         | X                |                        | X                 |\n| rustyline      |                  | X                      |                   |\n| termwiz        |                  | X                      | \\*                |\n\nEditable History: any history entry can be edited and saved\\\nCustom history backend: history persistence can be customized\\\nHistory timestamp: history entries are timestamped\n\nMouse support\n\nText selection\n\nCompletion candidates display\n\nMultiple commands for a keybinding\n\nAuto indent\n\nMinimal repaint\n\nOverwrite mode\n\nLexer / Parser\n\nConfiguration file (inputrc)\n\nDynamic prompt (editing mode)\n\nExternal print\n"
        },
        {
          "name": "History.md",
          "type": "blob",
          "size": 1.0849609375,
          "content": "# Config\n\nmax_history_size\n\n# Current session\n\n- we should remember (index) of the first line inserted by this session.\n  - if no line has been inserted => do nothing on save\n  - reset this index after saving successfully.\n- we should remember (path and timestamp) of the file used to initialize/`load` history.\n  - if path used to save history is the same:\n    - if timestamp is still the same => we can append only new lines if history has not been truncated.\n    - update timestamp after saving successfully.\n- we should remember (path and timestamp) of the file used to persist/`save` history.\n  - reset them if `load` is then called with a different path\n  - update them if `load` is then called with same path.\n  - update them after saving successfully\n  - if path used to save history is the same:\n    - if timestamp is still the same => we can append only new lines if history has not been truncated.\n\n```\nHistoryInfo\n  first_add_index: Option<usize>, // first line inserted by this session\n  truncated: bool //\n  path_info: Option<PathInfo>,\n```\n\n```\nPathInfo\n  path: Path,\n  modified: SystemTime,\n```\n"
        },
        {
          "name": "Incremental.md",
          "type": "blob",
          "size": 1.7802734375,
          "content": "## Incremental computation\n\nWe would like to avoid redrawing all row(s) when an event occurs.\nCurrently, we redraw all row(s) except when:\n\n- a character is inserted at the end of input (and there is no hint and no `highlight_char`),\n- only the cursor is moved (input is not touched and no `highlight_char`).\n\nIdeally, we would like to redraw only impacted row(s) / cell(s).\n\n### Observable values\n\nCurrently, we assume that highlighting does not impact layout / rendered text size.\nSo only the following observables impact layout:\n\n- prompt (interactive search, [input mode indicator](https://github.com/kkawakam/rustyline/pull/369)),\n- [input mode](https://github.com/kkawakam/rustyline/pull/369),\n- line(s) buffer,\n- cursor position,\n- hint / input validation message,\n- screen size (line wrapping),\n- [prompt continuation](https://github.com/kkawakam/rustyline/pull/372)s,\n- row/wrap count.\n\nSome other values may impact layout but they are/should be constant:\n\n- tab stop,\n\n### Line wrapping and highlighting\n\nCurrently, there is no word wrapping (only grapheme wrapping).\nBut we highlight the whole input at once.\nSo there is no issue: for example, even if a keyword is wrapped, style is preserved.\n\nWith [prompt continuation](https://github.com/kkawakam/rustyline/pull/372)s,\nwe (will) interleave user input with continuations.\nSo we need to preserve style.\n\nTODO How prompt_toolkit handle this problem ?\nMaybe using ANSI sequence directly was a bad idea. If `Highlighter` returns style ranges,\napplying style on input slice is easy (and also supporting styles on Windows < 10).\n\n### Impacts\n\nCurrent granularity:\n\n- PUSH_CHAR at end of input\n- BEEP\n- MOVE_CURSOR\n- REFRESH whole input / rows\n- CLEAR_SCREEN (+REFRESH)\n\nWanted additional granularity:\n\n- PUSH_STRING at end of input\n- REFRESH_DIRTY only rows / cells\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.076171875,
          "content": "The MIT License (MIT)\n\nCopyright (c) 2015 Katsu Kawakami & Rustyline authors\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 15.66015625,
          "content": "# RustyLine\n\n[![Build Status](https://github.com/kkawakam/rustyline/workflows/Rust/badge.svg)](https://github.com/kkawakam/rustyline/actions)\n[![dependency status](https://deps.rs/repo/github/kkawakam/rustyline/status.svg)](https://deps.rs/repo/github/kkawakam/rustyline)\n[![](https://img.shields.io/crates/v/rustyline.svg)](https://crates.io/crates/rustyline)\n[![Docs](https://docs.rs/rustyline/badge.svg)](https://docs.rs/rustyline)\n\nReadline implementation in Rust that is based on [Antirez' Linenoise](https://github.com/antirez/linenoise)\n\n**Supported Platforms**\n\n- Unix (tested on FreeBSD, Linux and macOS)\n- Windows\n  - cmd.exe\n  - Powershell\n\n**Note**:\n\n- Powershell ISE is not supported, check [issue #56](https://github.com/kkawakam/rustyline/issues/56)\n- Mintty (Cygwin/MinGW) is not supported\n- Highlighting / Colors are not supported on Windows < Windows 10 except with ConEmu and `ColorMode::Forced`.\n\n## Example\n\n```rust\nuse rustyline::error::ReadlineError;\nuse rustyline::{DefaultEditor, Result};\n\nfn main() -> Result<()> {\n    // `()` can be used when no completer is required\n    let mut rl = DefaultEditor::new()?;\n    #[cfg(feature = \"with-file-history\")]\n    if rl.load_history(\"history.txt\").is_err() {\n        println!(\"No previous history.\");\n    }\n    loop {\n        let readline = rl.readline(\">> \");\n        match readline {\n            Ok(line) => {\n                rl.add_history_entry(line.as_str());\n                println!(\"Line: {}\", line);\n            },\n            Err(ReadlineError::Interrupted) => {\n                println!(\"CTRL-C\");\n                break\n            },\n            Err(ReadlineError::Eof) => {\n                println!(\"CTRL-D\");\n                break\n            },\n            Err(err) => {\n                println!(\"Error: {:?}\", err);\n                break\n            }\n        }\n    }\n    #[cfg(feature = \"with-file-history\")]\n    rl.save_history(\"history.txt\");\n    Ok(())\n}\n```\n\n## crates.io\n\nYou can use this package in your project by adding the following\nto your `Cargo.toml`:\n\n```toml\n[dependencies]\nrustyline = \"15.0.0\"\n```\n\n## Features\n\n- Unicode (UTF-8) (linenoise supports only ASCII)\n- Word completion (linenoise supports only line completion)\n- Filename completion\n- History search ([Searching for Commands in the History](http://tiswww.case.edu/php/chet/readline/readline.html#SEC8))\n- Kill ring ([Killing Commands](http://tiswww.case.edu/php/chet/readline/readline.html#IDX3))\n- Multi line support (line wrapping)\n- Word commands\n- Hints\n\n## Actions\n\nFor all modes:\n\n| Keystroke             | Action                                                                      |\n| --------------------- | --------------------------------------------------------------------------- |\n| Home                  | Move cursor to the beginning of line                                        |\n| End                   | Move cursor to end of line                                                  |\n| Left                  | Move cursor one character left                                              |\n| Right                 | Move cursor one character right                                             |\n| Ctrl-C                | Interrupt/Cancel edition                                                    |\n| Ctrl-D, Del           | (if line is _not_ empty) Delete character under cursor                      |\n| Ctrl-D                | (if line _is_ empty) End of File                                            |\n| Ctrl-J, Ctrl-M, Enter | Finish the line entry                                                       |\n| Ctrl-R                | Reverse Search history (Ctrl-S forward, Ctrl-G cancel)                      |\n| Ctrl-T                | Transpose previous character with current character                         |\n| Ctrl-U                | Delete from start of line to cursor                                         |\n| Ctrl-V                | Insert any special character without performing its associated action (#65) |\n| Ctrl-W                | Delete word leading up to cursor (using white space as a word boundary)     |\n| Ctrl-Y                | Paste from Yank buffer                                                      |\n| Ctrl-Z                | Suspend (Unix only)                                                         |\n| Ctrl-\\_               | Undo                                                                        |\n\n### Emacs mode (default mode)\n\n| Keystroke         | Action                                                                                           |\n| ----------------- | ------------------------------------------------------------------------------------------------ |\n| Ctrl-A, Home      | Move cursor to the beginning of line                                                             |\n| Ctrl-B, Left      | Move cursor one character left                                                                   |\n| Ctrl-E, End       | Move cursor to end of line                                                                       |\n| Ctrl-F, Right     | Move cursor one character right                                                                  |\n| Ctrl-H, Backspace | Delete character before cursor                                                                   |\n| Ctrl-I, Tab       | Next completion                                                                                  |\n| Ctrl-K            | Delete from cursor to end of line                                                                |\n| Ctrl-L            | Clear screen                                                                                     |\n| Ctrl-N, Down      | Next match from history                                                                          |\n| Ctrl-P, Up        | Previous match from history                                                                      |\n| Ctrl-X Ctrl-U     | Undo                                                                                             |\n| Ctrl-Y            | Paste from Yank buffer (Meta-Y to paste next yank instead)                                       |\n| Meta-<            | Move to first entry in history                                                                   |\n| Meta->            | Move to last entry in history                                                                    |\n| Meta-B, Alt-Left  | Move cursor to previous word                                                                     |\n| Meta-C            | Capitalize the current word                                                                      |\n| Meta-D            | Delete forwards one word                                                                         |\n| Meta-F, Alt-Right | Move cursor to next word                                                                         |\n| Meta-L            | Lower-case the next word                                                                         |\n| Meta-T            | Transpose words                                                                                  |\n| Meta-U            | Upper-case the next word                                                                         |\n| Meta-Y            | See Ctrl-Y                                                                                       |\n| Meta-Backspace    | Kill from the start of the current word, or, if between words, to the start of the previous word |\n| Meta-0, 1, ..., - | Specify the digit to the argument. `–` starts a negative argument.                               |\n\n[Readline Emacs Editing Mode Cheat Sheet](http://www.catonmat.net/download/readline-emacs-editing-mode-cheat-sheet.pdf)\n\n### vi command mode\n\n| Keystroke            | Action                                                                      |\n| -------------------- | --------------------------------------------------------------------------- |\n| $, End               | Move cursor to end of line                                                  |\n| .                    | Redo the last text modification                                             |\n| ;                    | Redo the last character finding command                                     |\n| ,                    | Redo the last character finding command in opposite direction               |\n| 0, Home              | Move cursor to the beginning of line                                        |\n| ^                    | Move to the first non-blank character of line                               |\n| a                    | Insert after cursor                                                         |\n| A                    | Insert at the end of line                                                   |\n| b                    | Move one word or token left                                                 |\n| B                    | Move one non-blank word left                                                |\n| c<movement>          | Change text of a movement command                                           |\n| C                    | Change text to the end of line (equivalent to c$)                           |\n| d<movement>          | Delete text of a movement command                                           |\n| D, Ctrl-K            | Delete to the end of the line                                               |\n| e                    | Move to the end of the current word                                         |\n| E                    | Move to the end of the current non-blank word                               |\n| f<char>              | Move right to the next occurrence of `char`                                 |\n| F<char>              | Move left to the previous occurrence of `char`                              |\n| h, Ctrl-H, Backspace | Move one character left                                                     |\n| l, Space             | Move one character right                                                    |\n| Ctrl-L               | Clear screen                                                                |\n| i                    | Insert before cursor                                                        |\n| I                    | Insert at the beginning of line                                             |\n| +, j, Ctrl-N         | Move forward one command in history                                         |\n| -, k, Ctrl-P         | Move backward one command in history                                        |\n| p                    | Insert the yanked text at the cursor (paste)                                |\n| P                    | Insert the yanked text before the cursor                                    |\n| r                    | Replaces a single character under the cursor (without leaving command mode) |\n| s                    | Delete a single character under the cursor and enter input mode             |\n| S                    | Change current line (equivalent to 0c$)                                     |\n| t<char>              | Move right to the next occurrence of `char`, then one char backward         |\n| T<char>              | Move left to the previous occurrence of `char`, then one char forward       |\n| u                    | Undo                                                                        |\n| w                    | Move one word or token right                                                |\n| W                    | Move one non-blank word right                                               |\n| x                    | Delete a single character under the cursor                                  |\n| X                    | Delete a character before the cursor                                        |\n| y<movement>          | Yank a movement into buffer (copy)                                          |\n\n### vi insert mode\n\n| Keystroke         | Action                         |\n| ----------------- | ------------------------------ |\n| Ctrl-H, Backspace | Delete character before cursor |\n| Ctrl-I, Tab       | Next completion                |\n| Esc               | Switch to command mode         |\n\n[Readline vi Editing Mode Cheat Sheet](http://www.catonmat.net/download/bash-vi-editing-mode-cheat-sheet.pdf)\n\n[ANSI escape code](https://en.wikipedia.org/wiki/ANSI_escape_code)\n\n## Wine\n\n```sh\n$ cargo run --example example --target 'x86_64-pc-windows-gnu'\n...\nError: Io(Error { repr: Os { code: 6, message: \"Invalid handle.\" } })\n$ wineconsole --backend=curses target/x86_64-pc-windows-gnu/debug/examples/example.exe\n...\n```\n\n## Terminal checks\n\n```sh\n$ # current settings of all terminal attributes:\n$ stty -a\n$ # key bindings:\n$ bind -p\n$ # print out a terminfo description:\n$ infocmp\n```\n\n## Similar projects\n\n| Library            | Lang    | OS     | Term | Unicode | History       | Completion | Keymap        | Kill Ring | Undo | Colors     | Hint/Auto suggest |\n| ------------------ | ------- | ------ | ---- | ------- | ------------- | ---------- | ------------- | --------- | ---- | ---------- | ----------------- |\n| [go-prompt][]      | Go      | Ux/win | ANSI | Yes     | Yes           | any        | Emacs/prog    | No        | No   | Yes        | Yes               |\n| [Haskeline][]      | Haskell | Ux/Win | Any  | Yes     | Yes           | any        | Emacs/vi/conf | Yes       | Yes  | ?          | ?                 |\n| [isocline][]       | C       | Ux/Win | ANSI | Yes     | Yes           | any        | Emacs         | No        | Yes  | Yes        | Yes               |\n| [linefeed][]       | Rust    | Ux/Win | Any  |         | Yes           | any        | Emacs/conf    | Yes       | No   | ?          | No                |\n| [linenoise][]      | C       | Ux     | ANSI | No      | Yes           | only line  | Emacs         | No        | No   | Ux         | Yes               |\n| [Liner][]          | Rust    | Ux     | ANSI |         | No inc search | only word  | Emacs/vi/prog | No        | Yes  | Ux         | History based     |\n| [prompt_toolkit][] | Python  | Ux/Win | ANSI | Yes     | Yes           | any        | Emacs/vi/conf | Yes       | Yes  | Ux/Win     | Yes               |\n| [reedline][]       | Rust    | Ux/Win | ANSI | Yes     | Yes           | any        | Emacs/vi/bind | No        | Yes  | Ux/Win     | Yes               |\n| [replxx][]         | C/C++   | Ux/Win | ANSI | Yes     | Yes           | only line  | Emacs         | Yes       | No   | Ux/Win     | Yes               |\n| Rustyline          | Rust    | Ux/Win | ANSI | Yes     | Yes           | any        | Emacs/vi/bind | Yes       | Yes  | Ux/Win 10+ | Yes               |\n| [termwiz][]        | Rust    | Ux/Win | Any  | ?       | Yes           | any        | Emacs         | No        | No   | Ux/Win     | No                |\n\n[go-prompt]: https://github.com/c-bata/go-prompt\n[haskeline]: https://github.com/judah/haskeline\n[isocline]: https://github.com/daanx/isocline\n[linefeed]: https://github.com/murarth/linefeed\n[linenoise]: https://github.com/antirez/linenoise\n[liner]: https://github.com/redox-os/liner\n[prompt_toolkit]: https://github.com/jonathanslenders/python-prompt-toolkit\n[reedline]: https://github.com/nushell/reedline\n[replxx]: https://github.com/AmokHuginnsson/replxx\n[termwiz]: https://github.com/wez/wezterm/tree/main/termwiz\n\n## Multi line support\n\nThis is a very simple feature that simply causes lines that are longer\nthan the current terminal width to be displayed on the next visual\nline instead of horizontally scrolling as more characters are\ntyped. Currently, this feature is always enabled and there is no\nconfiguration option to disable it.\n\nThis feature does not allow the end user to hit a special key\nsequence and enter a mode where hitting the return key will cause a\nliteral newline to be added to the input buffer.\n\nThe way to achieve multi-line editing is to implement the `Validator`\ntrait.\n\n## Minimum supported Rust version (MSRV)\n\nLatest stable Rust version at the time of release. It might compile with older versions.\n"
        },
        {
          "name": "TODO.md",
          "type": "blob",
          "size": 2.9150390625,
          "content": "API\n\n- [ ] expose an API callable from C\n\nAsync (#126)\n\nBell\n\n- [x] bell-style\n\nColor\n\n- [x] ANSI Colors & Windows 10+\n- [ ] ANSI Colors & Windows <10 (https://docs.rs/console/0.6.1/console/fn.strip_ansi_codes.html ?\n      https://github.com/mattn/go-colorable/blob/master/colorable_windows.go,\n      https://github.com/mattn/ansicolor-w32.c)\n- [ ] Syntax highlighting (https://github.com/trishume/syntect/)\n- [ ] clicolors spec (https://docs.rs/console/0.6.1/console/fn.colors_enabled.html)\n\nCompletion\n\n- [x] Quoted path\n- [x] Windows escape/unescape space in path\n- [ ] file completion & escape/unescape (#106)\n- [ ] file completion & tilde (#62)\n- [x] display versus replacement\n- [ ] composite/alternate completer (if the current completer returns nothing, try the next one)\n\nConfig\n\n- [ ] Maximum buffer size for the line read\n\nCursor\n\n- [ ] insert versus overwrite versus command mode\n- [ ] In vi command mode, prevent user from going to end of line. (#94)\n\nGrapheme\n\n- [ ] grapheme & input auto-wrap are buggy\n\nHints Callback\n\n- [x] Not implemented on Windows\n- [x] Do an implementation based on previous history\n\nHistory\n\n- [ ] Move to the history line n\n- [ ] historyFile: Where to read/write the history at the start and end of\n      each line input session.\n- [x] append_history\n- [ ] history_truncate_file\n- [X] custom persistent storage\n\nInput\n\n- [ ] Password input (#58) (https://github.com/conradkdotcom/rpassword) (https://github.com/antirez/linenoise/issues/125)\n- [x] quoted insert (#65)\n- [ ] Overwrite mode (em-toggle-overwrite, vi-replace-mode, rl_insert_mode)\n- [ ] Encoding\n- [x] \\[Ctrl-]\\[Alt-]\\[Shift-]<Key> (#121)\n\nLayout\n\n- [ ] Scroll\n- [ ] Redraw perf (https://crates.io/crates/cassowary)\n\nMisc\n\n- [ ] fallible iterator (https://docs.rs/fallible-iterator/0.2.1/fallible_iterator/)\n\nMouse\n\n- [ ] Mouse support\n\nMovement\n\n- [ ] Move to the corresponding opening/closing bracket\n\nRedo\n\n- [x] redo substitute\n\nRepeat\n\n- [x] dynamic prompt (arg: ?)\n- [ ] transpose chars\n\nSyntax\n\n- [ ] syntax specific tokenizer/parser\n- [ ] highlighting\n\nUndo\n\n- [ ] Merge consecutive Replace\n- [x] Undo group\n- [ ] Undo all changes made to this line.\n- [x] Kill+Insert (substitute/replace)\n- [x] Repeated undo `Undo(RepeatCount)`\n\nUnix\n\n- [ ] Terminfo (https://github.com/Stebalien/term)\n- [ ] [ncurses](https://crates.io/crates/ncurses) alternative backend ?\n- [x] [bracketed paste mode](https://cirw.in/blog/bracketed-paste)\n- [ ] async stdin (https://github.com/Rufflewind/tokio-file-unix)\n\nWindows\n\n- [ ] is_atty is not working with Cygwin/MSYS (https://github.com/softprops/atty works but then how to make `enable_raw_mode` works ?)\n      (https://github.com/mitsuhiko/console/blob/master/src/windows_term.rs#L285)\n      (https://github.com/mattn/go-isatty/blob/master/isatty_windows.go, https://github.com/mattn/go-tty/blob/master/tty_windows.go#L143)\n- [x] UTF-16 surrogate pair\n- [ ] handle ANSI escape code (#61) (https://github.com/DanielKeep/rust-ansi-interpreter)\n"
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "linenoise.md",
          "type": "blob",
          "size": 2.2626953125,
          "content": "Mapping between linenoise API and rustyline API\n\n| linenoise                      | rustyline                    | Remarks                   |\n|--------------------------------|------------------------------|---------------------------|\n| linenoiseState                 | State                        |                           |\n| *Blocking API*                 |\n| linenoise                      | Editor::readline             |\n| linenoiseFree                  | _                            | RAII                      |\n| *Non blocking API*             |                              |\n| linenoiseEditStart             | _                            |\n| linenoiseEditFeed              | _                            |\n| linenoiseEditStop              | _                            |\n| linenoiseHide                  | Renderer::clear_rows         |\n| linenoiseShow                  | State::refresh_line          |\n| *Completion API*               |\n| linenoiseCompletions           | Vec<Candidate>               |\n| linenoiseCompletionCallback    | Completer                    |\n| linenoiseAddCompletion         | _                            | std Vec::add              |\n| linenoiseSetCompletionCallback | Editor::set_helper           |\n| linenoiseHintsCallback         | Hinter                       |\n| linenoiseSetHintsCallback      | Editor::set_helper           |\n| linenoiseFreeHintsCallback     | _                            | RAII                      |\n| linenoiseSetFreeHintsCallback  | _                            | RAII                      |\n| *History API*                  |\n| linenoiseHistoryAdd            | Editor::add_history_entry    |\n| linenoiseHistorySetMaxLen      | Editor::set_max_history_size |\n| linenoiseHistorySave           | Editor::save_history         |\n| linenoiseHistoryLoad           | Editor::load_history         |\n| *Other utilities*              |\n| linenoiseClearScreen           | Editor::clear_screen         |\n| linenoiseSetMultiLine          | _                            | Always activated          |\n| linenoisePrintKeyCodes         | _                            | debug logs                |\n| linenoiseMaskModeEnable        | _                            | see read_password example |\n| linenoiseMaskModeDisable       | _                            |\n"
        },
        {
          "name": "rustfmt.toml",
          "type": "blob",
          "size": 0.326171875,
          "content": "wrap_comments = true\nformat_strings = true\nerror_on_unformatted = false\nreorder_impl_items = true\n\ncondense_wildcard_suffixes = true\nformat_code_in_doc_comments = true\nformat_macro_matchers = true\nformat_macro_bodies = true\n#merge_imports = true\nnormalize_doc_attributes = true\nuse_field_init_shorthand = true\nuse_try_shorthand = true"
        },
        {
          "name": "rustyline-derive",
          "type": "tree",
          "content": null
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}