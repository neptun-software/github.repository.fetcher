{
  "metadata": {
    "timestamp": 1736709084220,
    "page": 222,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjIzMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "dtolnay/syn",
      "stars": 2964,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.09375,
          "content": "src/gen/** linguist-generated\nsyn.json linguist-generated\ntests/debug/gen.rs linguist-generated\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.0537109375,
          "content": "target/\nCargo.lock\n/tests/rust/*\n/tests/*.pending-snap\n"
        },
        {
          "name": "Cargo.toml",
          "type": "blob",
          "size": 2.1015625,
          "content": "[package]\nname = \"syn\"\nversion = \"2.0.96\"\nauthors = [\"David Tolnay <dtolnay@gmail.com>\"]\ncategories = [\"development-tools::procedural-macro-helpers\", \"parser-implementations\"]\ndescription = \"Parser for Rust source code\"\ndocumentation = \"https://docs.rs/syn\"\nedition = \"2021\"\ninclude = [\n    \"/benches/**\",\n    \"/Cargo.toml\",\n    \"/LICENSE-APACHE\",\n    \"/LICENSE-MIT\",\n    \"/README.md\",\n    \"/src/**\",\n    \"/tests/**\",\n]\nkeywords = [\"macros\", \"syn\"]\nlicense = \"MIT OR Apache-2.0\"\nrepository = \"https://github.com/dtolnay/syn\"\nrust-version = \"1.61\"\n\n[features]\ndefault = [\"derive\", \"parsing\", \"printing\", \"clone-impls\", \"proc-macro\"]\nderive = []\nfull = []\nparsing = []\nprinting = [\"dep:quote\"]\nvisit = []\nvisit-mut = []\nfold = []\nclone-impls = []\nextra-traits = []\nproc-macro = [\"proc-macro2/proc-macro\", \"quote?/proc-macro\"]\ntest = [\"syn-test-suite/all-features\"]\n\n[dependencies]\nproc-macro2 = { version = \"1.0.91\", default-features = false }\nquote = { version = \"1.0.35\", optional = true, default-features = false }\nunicode-ident = \"1\"\n\n[dev-dependencies]\nanyhow = \"1\"\nautomod = \"1\"\ninsta = \"1\"\nref-cast = \"1\"\nrustversion = \"1\"\nsyn-test-suite = { version = \"0\", path = \"tests/features\" }\ntermcolor = \"1\"\n\n[target.'cfg(not(miri))'.dev-dependencies]\nflate2 = \"1\"\nrayon = \"1\"\nreqwest = { version = \"0.12\", features = [\"blocking\"] }\ntar = \"0.4.16\"\nwalkdir = \"2.3.2\"\n\n[lib]\ndoc-scrape-examples = false\n\n[[bench]]\nname = \"rust\"\nharness = false\nrequired-features = [\"full\", \"parsing\"]\n\n[[bench]]\nname = \"file\"\nrequired-features = [\"full\", \"parsing\"]\n\n[package.metadata.docs.rs]\nall-features = true\ntargets = [\"x86_64-unknown-linux-gnu\"]\nrustdoc-args = [\"--generate-link-to-definition\", \"--extend-css=src/gen/token.css\"]\n\n[package.metadata.playground]\nfeatures = [\"full\", \"visit\", \"visit-mut\", \"fold\", \"extra-traits\"]\n\n[workspace]\nmembers = [\n    \"dev\",\n    \"examples/dump-syntax\",\n    \"examples/heapsize/example\",\n    \"examples/heapsize/heapsize\",\n    \"examples/heapsize/heapsize_derive\",\n    \"examples/lazy-static/example\",\n    \"examples/lazy-static/lazy-static\",\n    \"examples/trace-var/example\",\n    \"examples/trace-var/trace-var\",\n    \"tests/features\",\n]\n"
        },
        {
          "name": "LICENSE-APACHE",
          "type": "blob",
          "size": 9.4951171875,
          "content": "                              Apache License\n                        Version 2.0, January 2004\n                     http://www.apache.org/licenses/\n\nTERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n1. Definitions.\n\n   \"License\" shall mean the terms and conditions for use, reproduction,\n   and distribution as defined by Sections 1 through 9 of this document.\n\n   \"Licensor\" shall mean the copyright owner or entity authorized by\n   the copyright owner that is granting the License.\n\n   \"Legal Entity\" shall mean the union of the acting entity and all\n   other entities that control, are controlled by, or are under common\n   control with that entity. For the purposes of this definition,\n   \"control\" means (i) the power, direct or indirect, to cause the\n   direction or management of such entity, whether by contract or\n   otherwise, or (ii) ownership of fifty percent (50%) or more of the\n   outstanding shares, or (iii) beneficial ownership of such entity.\n\n   \"You\" (or \"Your\") shall mean an individual or Legal Entity\n   exercising permissions granted by this License.\n\n   \"Source\" form shall mean the preferred form for making modifications,\n   including but not limited to software source code, documentation\n   source, and configuration files.\n\n   \"Object\" form shall mean any form resulting from mechanical\n   transformation or translation of a Source form, including but\n   not limited to compiled object code, generated documentation,\n   and conversions to other media types.\n\n   \"Work\" shall mean the work of authorship, whether in Source or\n   Object form, made available under the License, as indicated by a\n   copyright notice that is included in or attached to the work\n   (an example is provided in the Appendix below).\n\n   \"Derivative Works\" shall mean any work, whether in Source or Object\n   form, that is based on (or derived from) the Work and for which the\n   editorial revisions, annotations, elaborations, or other modifications\n   represent, as a whole, an original work of authorship. For the purposes\n   of this License, Derivative Works shall not include works that remain\n   separable from, or merely link (or bind by name) to the interfaces of,\n   the Work and Derivative Works thereof.\n\n   \"Contribution\" shall mean any work of authorship, including\n   the original version of the Work and any modifications or additions\n   to that Work or Derivative Works thereof, that is intentionally\n   submitted to Licensor for inclusion in the Work by the copyright owner\n   or by an individual or Legal Entity authorized to submit on behalf of\n   the copyright owner. For the purposes of this definition, \"submitted\"\n   means any form of electronic, verbal, or written communication sent\n   to the Licensor or its representatives, including but not limited to\n   communication on electronic mailing lists, source code control systems,\n   and issue tracking systems that are managed by, or on behalf of, the\n   Licensor for the purpose of discussing and improving the Work, but\n   excluding communication that is conspicuously marked or otherwise\n   designated in writing by the copyright owner as \"Not a Contribution.\"\n\n   \"Contributor\" shall mean Licensor and any individual or Legal Entity\n   on behalf of whom a Contribution has been received by Licensor and\n   subsequently incorporated within the Work.\n\n2. Grant of Copyright License. Subject to the terms and conditions of\n   this License, each Contributor hereby grants to You a perpetual,\n   worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n   copyright license to reproduce, prepare Derivative Works of,\n   publicly display, publicly perform, sublicense, and distribute the\n   Work and such Derivative Works in Source or Object form.\n\n3. Grant of Patent License. Subject to the terms and conditions of\n   this License, each Contributor hereby grants to You a perpetual,\n   worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n   (except as stated in this section) patent license to make, have made,\n   use, offer to sell, sell, import, and otherwise transfer the Work,\n   where such license applies only to those patent claims licensable\n   by such Contributor that are necessarily infringed by their\n   Contribution(s) alone or by combination of their Contribution(s)\n   with the Work to which such Contribution(s) was submitted. If You\n   institute patent litigation against any entity (including a\n   cross-claim or counterclaim in a lawsuit) alleging that the Work\n   or a Contribution incorporated within the Work constitutes direct\n   or contributory patent infringement, then any patent licenses\n   granted to You under this License for that Work shall terminate\n   as of the date such litigation is filed.\n\n4. Redistribution. You may reproduce and distribute copies of the\n   Work or Derivative Works thereof in any medium, with or without\n   modifications, and in Source or Object form, provided that You\n   meet the following conditions:\n\n   (a) You must give any other recipients of the Work or\n       Derivative Works a copy of this License; and\n\n   (b) You must cause any modified files to carry prominent notices\n       stating that You changed the files; and\n\n   (c) You must retain, in the Source form of any Derivative Works\n       that You distribute, all copyright, patent, trademark, and\n       attribution notices from the Source form of the Work,\n       excluding those notices that do not pertain to any part of\n       the Derivative Works; and\n\n   (d) If the Work includes a \"NOTICE\" text file as part of its\n       distribution, then any Derivative Works that You distribute must\n       include a readable copy of the attribution notices contained\n       within such NOTICE file, excluding those notices that do not\n       pertain to any part of the Derivative Works, in at least one\n       of the following places: within a NOTICE text file distributed\n       as part of the Derivative Works; within the Source form or\n       documentation, if provided along with the Derivative Works; or,\n       within a display generated by the Derivative Works, if and\n       wherever such third-party notices normally appear. The contents\n       of the NOTICE file are for informational purposes only and\n       do not modify the License. You may add Your own attribution\n       notices within Derivative Works that You distribute, alongside\n       or as an addendum to the NOTICE text from the Work, provided\n       that such additional attribution notices cannot be construed\n       as modifying the License.\n\n   You may add Your own copyright statement to Your modifications and\n   may provide additional or different license terms and conditions\n   for use, reproduction, or distribution of Your modifications, or\n   for any such Derivative Works as a whole, provided Your use,\n   reproduction, and distribution of the Work otherwise complies with\n   the conditions stated in this License.\n\n5. Submission of Contributions. Unless You explicitly state otherwise,\n   any Contribution intentionally submitted for inclusion in the Work\n   by You to the Licensor shall be under the terms and conditions of\n   this License, without any additional terms or conditions.\n   Notwithstanding the above, nothing herein shall supersede or modify\n   the terms of any separate license agreement you may have executed\n   with Licensor regarding such Contributions.\n\n6. Trademarks. This License does not grant permission to use the trade\n   names, trademarks, service marks, or product names of the Licensor,\n   except as required for reasonable and customary use in describing the\n   origin of the Work and reproducing the content of the NOTICE file.\n\n7. Disclaimer of Warranty. Unless required by applicable law or\n   agreed to in writing, Licensor provides the Work (and each\n   Contributor provides its Contributions) on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n   implied, including, without limitation, any warranties or conditions\n   of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n   PARTICULAR PURPOSE. You are solely responsible for determining the\n   appropriateness of using or redistributing the Work and assume any\n   risks associated with Your exercise of permissions under this License.\n\n8. Limitation of Liability. In no event and under no legal theory,\n   whether in tort (including negligence), contract, or otherwise,\n   unless required by applicable law (such as deliberate and grossly\n   negligent acts) or agreed to in writing, shall any Contributor be\n   liable to You for damages, including any direct, indirect, special,\n   incidental, or consequential damages of any character arising as a\n   result of this License or out of the use or inability to use the\n   Work (including but not limited to damages for loss of goodwill,\n   work stoppage, computer failure or malfunction, or any and all\n   other commercial damages or losses), even if such Contributor\n   has been advised of the possibility of such damages.\n\n9. Accepting Warranty or Additional Liability. While redistributing\n   the Work or Derivative Works thereof, You may choose to offer,\n   and charge a fee for, acceptance of support, warranty, indemnity,\n   or other liability obligations and/or rights consistent with this\n   License. However, in accepting such obligations, You may act only\n   on Your own behalf and on Your sole responsibility, not on behalf\n   of any other Contributor, and only if You agree to indemnify,\n   defend, and hold each Contributor harmless for any liability\n   incurred by, or claims asserted against, such Contributor by reason\n   of your accepting any such warranty or additional liability.\n\nEND OF TERMS AND CONDITIONS\n"
        },
        {
          "name": "LICENSE-MIT",
          "type": "blob",
          "size": 0.9990234375,
          "content": "Permission is hereby granted, free of charge, to any\nperson obtaining a copy of this software and associated\ndocumentation files (the \"Software\"), to deal in the\nSoftware without restriction, including without\nlimitation the rights to use, copy, modify, merge,\npublish, distribute, sublicense, and/or sell copies of\nthe Software, and to permit persons to whom the Software\nis furnished to do so, subject to the following\nconditions:\n\nThe above copyright notice and this permission notice\nshall be included in all copies or substantial portions\nof the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF\nANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED\nTO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A\nPARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT\nSHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\nOF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR\nIN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\nDEALINGS IN THE SOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 10.15234375,
          "content": "Parser for Rust source code\n===========================\n\n[<img alt=\"github\" src=\"https://img.shields.io/badge/github-dtolnay/syn-8da0cb?style=for-the-badge&labelColor=555555&logo=github\" height=\"20\">](https://github.com/dtolnay/syn)\n[<img alt=\"crates.io\" src=\"https://img.shields.io/crates/v/syn.svg?style=for-the-badge&color=fc8d62&logo=rust\" height=\"20\">](https://crates.io/crates/syn)\n[<img alt=\"docs.rs\" src=\"https://img.shields.io/badge/docs.rs-syn-66c2a5?style=for-the-badge&labelColor=555555&logo=docs.rs\" height=\"20\">](https://docs.rs/syn)\n[<img alt=\"build status\" src=\"https://img.shields.io/github/actions/workflow/status/dtolnay/syn/ci.yml?branch=master&style=for-the-badge\" height=\"20\">](https://github.com/dtolnay/syn/actions?query=branch%3Amaster)\n\nSyn is a parsing library for parsing a stream of Rust tokens into a syntax tree\nof Rust source code.\n\nCurrently this library is geared toward use in Rust procedural macros, but\ncontains some APIs that may be useful more generally.\n\n- **Data structures** — Syn provides a complete syntax tree that can represent\n  any valid Rust source code. The syntax tree is rooted at [`syn::File`] which\n  represents a full source file, but there are other entry points that may be\n  useful to procedural macros including [`syn::Item`], [`syn::Expr`] and\n  [`syn::Type`].\n\n- **Derives** — Of particular interest to derive macros is [`syn::DeriveInput`]\n  which is any of the three legal input items to a derive macro. An example\n  below shows using this type in a library that can derive implementations of a\n  user-defined trait.\n\n- **Parsing** — Parsing in Syn is built around [parser functions] with the\n  signature `fn(ParseStream) -> Result<T>`. Every syntax tree node defined by\n  Syn is individually parsable and may be used as a building block for custom\n  syntaxes, or you may dream up your own brand new syntax without involving any\n  of our syntax tree types.\n\n- **Location information** — Every token parsed by Syn is associated with a\n  `Span` that tracks line and column information back to the source of that\n  token. These spans allow a procedural macro to display detailed error messages\n  pointing to all the right places in the user's code. There is an example of\n  this below.\n\n- **Feature flags** — Functionality is aggressively feature gated so your\n  procedural macros enable only what they need, and do not pay in compile time\n  for all the rest.\n\n[`syn::File`]: https://docs.rs/syn/2.0/syn/struct.File.html\n[`syn::Item`]: https://docs.rs/syn/2.0/syn/enum.Item.html\n[`syn::Expr`]: https://docs.rs/syn/2.0/syn/enum.Expr.html\n[`syn::Type`]: https://docs.rs/syn/2.0/syn/enum.Type.html\n[`syn::DeriveInput`]: https://docs.rs/syn/2.0/syn/struct.DeriveInput.html\n[parser functions]: https://docs.rs/syn/2.0/syn/parse/index.html\n\n*Version requirement: Syn supports rustc 1.61 and up.*\n\n[*Release notes*](https://github.com/dtolnay/syn/releases)\n\n<br>\n\n## Resources\n\nThe best way to learn about procedural macros is by writing some. Consider\nworking through [this procedural macro workshop][workshop] to get familiar with\nthe different types of procedural macros. The workshop contains relevant links\ninto the Syn documentation as you work through each project.\n\n[workshop]: https://github.com/dtolnay/proc-macro-workshop\n\n<br>\n\n## Example of a derive macro\n\nThe canonical derive macro using Syn looks like this. We write an ordinary Rust\nfunction tagged with a `proc_macro_derive` attribute and the name of the trait\nwe are deriving. Any time that derive appears in the user's code, the Rust\ncompiler passes their data structure as tokens into our macro. We get to execute\narbitrary Rust code to figure out what to do with those tokens, then hand some\ntokens back to the compiler to compile into the user's crate.\n\n[`TokenStream`]: https://doc.rust-lang.org/proc_macro/struct.TokenStream.html\n\n```toml\n[dependencies]\nsyn = \"2.0\"\nquote = \"1.0\"\n\n[lib]\nproc-macro = true\n```\n\n```rust\nuse proc_macro::TokenStream;\nuse quote::quote;\nuse syn::{parse_macro_input, DeriveInput};\n\n#[proc_macro_derive(MyMacro)]\npub fn my_macro(input: TokenStream) -> TokenStream {\n    // Parse the input tokens into a syntax tree\n    let input = parse_macro_input!(input as DeriveInput);\n\n    // Build the output, possibly using quasi-quotation\n    let expanded = quote! {\n        // ...\n    };\n\n    // Hand the output tokens back to the compiler\n    TokenStream::from(expanded)\n}\n```\n\nThe [`heapsize`] example directory shows a complete working implementation of a\nderive macro. The example derives a `HeapSize` trait which computes an estimate\nof the amount of heap memory owned by a value.\n\n[`heapsize`]: examples/heapsize\n\n```rust\npub trait HeapSize {\n    /// Total number of bytes of heap memory owned by `self`.\n    fn heap_size_of_children(&self) -> usize;\n}\n```\n\nThe derive macro allows users to write `#[derive(HeapSize)]` on data structures\nin their program.\n\n```rust\n#[derive(HeapSize)]\nstruct Demo<'a, T: ?Sized> {\n    a: Box<T>,\n    b: u8,\n    c: &'a str,\n    d: String,\n}\n```\n\n<br>\n\n## Spans and error reporting\n\nThe token-based procedural macro API provides great control over where the\ncompiler's error messages are displayed in user code. Consider the error the\nuser sees if one of their field types does not implement `HeapSize`.\n\n```rust\n#[derive(HeapSize)]\nstruct Broken {\n    ok: String,\n    bad: std::thread::Thread,\n}\n```\n\nBy tracking span information all the way through the expansion of a procedural\nmacro as shown in the `heapsize` example, token-based macros in Syn are able to\ntrigger errors that directly pinpoint the source of the problem.\n\n```console\nerror[E0277]: the trait bound `std::thread::Thread: HeapSize` is not satisfied\n --> src/main.rs:7:5\n  |\n7 |     bad: std::thread::Thread,\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^ the trait `HeapSize` is not implemented for `std::thread::Thread`\n```\n\n<br>\n\n## Parsing a custom syntax\n\nThe [`lazy-static`] example directory shows the implementation of a\n`functionlike!(...)` procedural macro in which the input tokens are parsed using\nSyn's parsing API.\n\n[`lazy-static`]: examples/lazy-static\n\nThe example reimplements the popular `lazy_static` crate from crates.io as a\nprocedural macro.\n\n```rust\nlazy_static! {\n    static ref USERNAME: Regex = Regex::new(\"^[a-z0-9_-]{3,16}$\").unwrap();\n}\n```\n\nThe implementation shows how to trigger custom warnings and error messages on\nthe macro input.\n\n```console\nwarning: come on, pick a more creative name\n  --> src/main.rs:10:16\n   |\n10 |     static ref FOO: String = \"lazy_static\".to_owned();\n   |                ^^^\n```\n\n<br>\n\n## Testing\n\nWhen testing macros, we often care not just that the macro can be used\nsuccessfully but also that when the macro is provided with invalid input it\nproduces maximally helpful error messages. Consider using the [`trybuild`] crate\nto write tests for errors that are emitted by your macro or errors detected by\nthe Rust compiler in the expanded code following misuse of the macro. Such tests\nhelp avoid regressions from later refactors that mistakenly make an error no\nlonger trigger or be less helpful than it used to be.\n\n[`trybuild`]: https://github.com/dtolnay/trybuild\n\n<br>\n\n## Debugging\n\nWhen developing a procedural macro it can be helpful to look at what the\ngenerated code looks like. Use `cargo rustc -- -Zunstable-options\n--pretty=expanded` or the [`cargo expand`] subcommand.\n\n[`cargo expand`]: https://github.com/dtolnay/cargo-expand\n\nTo show the expanded code for some crate that uses your procedural macro, run\n`cargo expand` from that crate. To show the expanded code for one of your own\ntest cases, run `cargo expand --test the_test_case` where the last argument is\nthe name of the test file without the `.rs` extension.\n\nThis write-up by Brandon W Maister discusses debugging in more detail:\n[Debugging Rust's new Custom Derive system][debugging].\n\n[debugging]: https://quodlibetor.github.io/posts/debugging-rusts-new-custom-derive-system/\n\n<br>\n\n## Optional features\n\nSyn puts a lot of functionality behind optional features in order to optimize\ncompile time for the most common use cases. The following features are\navailable.\n\n- **`derive`** *(enabled by default)* — Data structures for representing the\n  possible input to a derive macro, including structs and enums and types.\n- **`full`** — Data structures for representing the syntax tree of all valid\n  Rust source code, including items and expressions.\n- **`parsing`** *(enabled by default)* — Ability to parse input tokens into a\n  syntax tree node of a chosen type.\n- **`printing`** *(enabled by default)* — Ability to print a syntax tree node as\n  tokens of Rust source code.\n- **`visit`** — Trait for traversing a syntax tree.\n- **`visit-mut`** — Trait for traversing and mutating in place a syntax tree.\n- **`fold`** — Trait for transforming an owned syntax tree.\n- **`clone-impls`** *(enabled by default)* — Clone impls for all syntax tree\n  types.\n- **`extra-traits`** — Debug, Eq, PartialEq, Hash impls for all syntax tree\n  types.\n- **`proc-macro`** *(enabled by default)* — Runtime dependency on the dynamic\n  library libproc_macro from rustc toolchain.\n\n<br>\n\n## Proc macro shim\n\nSyn operates on the token representation provided by the [proc-macro2] crate\nfrom crates.io rather than using the compiler's built in proc-macro crate\ndirectly. This enables code using Syn to execute outside of the context of a\nprocedural macro, such as in unit tests or build.rs, and we avoid needing\nincompatible ecosystems for proc macros vs non-macro use cases.\n\nIn general all of your code should be written against proc-macro2 rather than\nproc-macro. The one exception is in the signatures of procedural macro entry\npoints, which are required by the language to use `proc_macro::TokenStream`.\n\nThe proc-macro2 crate will automatically detect and use the compiler's data\nstructures when a procedural macro is active.\n\n[proc-macro2]: https://docs.rs/proc-macro2/1.0/proc_macro2/\n\n<br>\n\n#### License\n\n<sup>\nLicensed under either of <a href=\"LICENSE-APACHE\">Apache License, Version\n2.0</a> or <a href=\"LICENSE-MIT\">MIT license</a> at your option.\n</sup>\n\n<br>\n\n<sub>\nUnless you explicitly state otherwise, any contribution intentionally submitted\nfor inclusion in this crate by you, as defined in the Apache-2.0 license, shall\nbe dual licensed as above, without any additional terms or conditions.\n</sub>\n"
        },
        {
          "name": "benches",
          "type": "tree",
          "content": null
        },
        {
          "name": "build.rs",
          "type": "blob",
          "size": 2.599609375,
          "content": "#![allow(clippy::uninlined_format_args)]\n\nuse std::env;\nuse std::ffi::OsString;\nuse std::iter;\nuse std::process::{self, Command, Stdio};\n\nfn main() {\n    println!(\"cargo:rerun-if-changed=build.rs\");\n\n    // Note: add \"/build.rs\" to package.include in Cargo.toml if adding any\n    // conditional compilation within the library.\n\n    println!(\"cargo:rustc-cfg=check_cfg\");\n    println!(\"cargo:rustc-check-cfg=cfg(check_cfg)\");\n    println!(\"cargo:rustc-check-cfg=cfg(syn_disable_nightly_tests)\");\n    println!(\"cargo:rustc-check-cfg=cfg(syn_only)\");\n\n    if !unstable() {\n        println!(\"cargo:rustc-cfg=syn_disable_nightly_tests\");\n    }\n}\n\nfn unstable() -> bool {\n    let rustc = cargo_env_var(\"RUSTC\");\n    let rustc_wrapper = env::var_os(\"RUSTC_WRAPPER\").filter(|wrapper| !wrapper.is_empty());\n    let rustc_workspace_wrapper =\n        env::var_os(\"RUSTC_WORKSPACE_WRAPPER\").filter(|wrapper| !wrapper.is_empty());\n    let mut rustc = rustc_wrapper\n        .into_iter()\n        .chain(rustc_workspace_wrapper)\n        .chain(iter::once(rustc));\n    let mut cmd = Command::new(rustc.next().unwrap());\n    cmd.args(rustc);\n\n    cmd.stdin(Stdio::null());\n    cmd.stdout(Stdio::null());\n    cmd.stderr(Stdio::null());\n    cmd.arg(\"-\");\n\n    // Find out whether this is a nightly or dev build.\n    cmd.env_remove(\"RUSTC_BOOTSTRAP\");\n    cmd.arg(\"-Zcrate-attr=feature(rustc_private)\");\n\n    // Pass `-Zunpretty` to terminate earlier without writing out any \"emit\"\n    // files. Use `expanded` to proceed far enough to actually apply crate\n    // attrs. With `unpretty=normal` or `--print`, not enough compilation\n    // happens to recognize that the feature attribute is unstable.\n    cmd.arg(\"-Zunpretty=expanded\");\n\n    // Set #![no_std] to bypass loading libstd.rlib. This is a 7.5% speedup.\n    cmd.arg(\"-Zcrate-attr=no_std\");\n\n    cmd.arg(\"--crate-type=lib\");\n    cmd.arg(\"--edition=2021\");\n\n    if let Some(target) = env::var_os(\"TARGET\") {\n        cmd.arg(\"--target\").arg(target);\n    }\n\n    // If Cargo wants to set RUSTFLAGS, use that.\n    if let Ok(rustflags) = env::var(\"CARGO_ENCODED_RUSTFLAGS\") {\n        if !rustflags.is_empty() {\n            for arg in rustflags.split('\\x1f') {\n                cmd.arg(arg);\n            }\n        }\n    }\n\n    // This rustc invocation should take around 0.03 seconds.\n    match cmd.status() {\n        Ok(status) => status.success(),\n        Err(_) => false,\n    }\n}\n\nfn cargo_env_var(key: &str) -> OsString {\n    env::var_os(key).unwrap_or_else(|| {\n        eprintln!(\n            \"Environment variable ${} is not set during execution of build script\",\n            key,\n        );\n        process::exit(1);\n    })\n}\n"
        },
        {
          "name": "codegen",
          "type": "tree",
          "content": null
        },
        {
          "name": "dev",
          "type": "tree",
          "content": null
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "fuzz",
          "type": "tree",
          "content": null
        },
        {
          "name": "json",
          "type": "tree",
          "content": null
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "syn.json",
          "type": "blob",
          "size": 96.326171875,
          "content": "{\n  \"version\": \"2.0.96\",\n  \"types\": [\n    {\n      \"ident\": \"Abi\",\n      \"features\": {\n        \"any\": [\n          \"derive\",\n          \"full\"\n        ]\n      },\n      \"fields\": {\n        \"extern_token\": {\n          \"token\": \"Extern\"\n        },\n        \"name\": {\n          \"option\": {\n            \"syn\": \"LitStr\"\n          }\n        }\n      }\n    },\n    {\n      \"ident\": \"AngleBracketedGenericArguments\",\n      \"features\": {\n        \"any\": [\n          \"derive\",\n          \"full\"\n        ]\n      },\n      \"fields\": {\n        \"colon2_token\": {\n          \"option\": {\n            \"token\": \"PathSep\"\n          }\n        },\n        \"lt_token\": {\n          \"token\": \"Lt\"\n        },\n        \"args\": {\n          \"punctuated\": {\n            \"element\": {\n              \"syn\": \"GenericArgument\"\n            },\n            \"punct\": \"Comma\"\n          }\n        },\n        \"gt_token\": {\n          \"token\": \"Gt\"\n        }\n      }\n    },\n    {\n      \"ident\": \"Arm\",\n      \"features\": {\n        \"any\": [\n          \"full\"\n        ]\n      },\n      \"fields\": {\n        \"attrs\": {\n          \"vec\": {\n            \"syn\": \"Attribute\"\n          }\n        },\n        \"pat\": {\n          \"syn\": \"Pat\"\n        },\n        \"guard\": {\n          \"option\": {\n            \"tuple\": [\n              {\n                \"token\": \"If\"\n              },\n              {\n                \"box\": {\n                  \"syn\": \"Expr\"\n                }\n              }\n            ]\n          }\n        },\n        \"fat_arrow_token\": {\n          \"token\": \"FatArrow\"\n        },\n        \"body\": {\n          \"box\": {\n            \"syn\": \"Expr\"\n          }\n        },\n        \"comma\": {\n          \"option\": {\n            \"token\": \"Comma\"\n          }\n        }\n      }\n    },\n    {\n      \"ident\": \"AssocConst\",\n      \"features\": {\n        \"any\": [\n          \"derive\",\n          \"full\"\n        ]\n      },\n      \"fields\": {\n        \"ident\": {\n          \"proc_macro2\": \"Ident\"\n        },\n        \"generics\": {\n          \"option\": {\n            \"syn\": \"AngleBracketedGenericArguments\"\n          }\n        },\n        \"eq_token\": {\n          \"token\": \"Eq\"\n        },\n        \"value\": {\n          \"syn\": \"Expr\"\n        }\n      }\n    },\n    {\n      \"ident\": \"AssocType\",\n      \"features\": {\n        \"any\": [\n          \"derive\",\n          \"full\"\n        ]\n      },\n      \"fields\": {\n        \"ident\": {\n          \"proc_macro2\": \"Ident\"\n        },\n        \"generics\": {\n          \"option\": {\n            \"syn\": \"AngleBracketedGenericArguments\"\n          }\n        },\n        \"eq_token\": {\n          \"token\": \"Eq\"\n        },\n        \"ty\": {\n          \"syn\": \"Type\"\n        }\n      }\n    },\n    {\n      \"ident\": \"AttrStyle\",\n      \"features\": {\n        \"any\": [\n          \"derive\",\n          \"full\"\n        ]\n      },\n      \"variants\": {\n        \"Outer\": [],\n        \"Inner\": [\n          {\n            \"token\": \"Not\"\n          }\n        ]\n      }\n    },\n    {\n      \"ident\": \"Attribute\",\n      \"features\": {\n        \"any\": [\n          \"derive\",\n          \"full\"\n        ]\n      },\n      \"fields\": {\n        \"pound_token\": {\n          \"token\": \"Pound\"\n        },\n        \"style\": {\n          \"syn\": \"AttrStyle\"\n        },\n        \"bracket_token\": {\n          \"group\": \"Bracket\"\n        },\n        \"meta\": {\n          \"syn\": \"Meta\"\n        }\n      }\n    },\n    {\n      \"ident\": \"BareFnArg\",\n      \"features\": {\n        \"any\": [\n          \"derive\",\n          \"full\"\n        ]\n      },\n      \"fields\": {\n        \"attrs\": {\n          \"vec\": {\n            \"syn\": \"Attribute\"\n          }\n        },\n        \"name\": {\n          \"option\": {\n            \"tuple\": [\n              {\n                \"proc_macro2\": \"Ident\"\n              },\n              {\n                \"token\": \"Colon\"\n              }\n            ]\n          }\n        },\n        \"ty\": {\n          \"syn\": \"Type\"\n        }\n      }\n    },\n    {\n      \"ident\": \"BareVariadic\",\n      \"features\": {\n        \"any\": [\n          \"derive\",\n          \"full\"\n        ]\n      },\n      \"fields\": {\n        \"attrs\": {\n          \"vec\": {\n            \"syn\": \"Attribute\"\n          }\n        },\n        \"name\": {\n          \"option\": {\n            \"tuple\": [\n              {\n                \"proc_macro2\": \"Ident\"\n              },\n              {\n                \"token\": \"Colon\"\n              }\n            ]\n          }\n        },\n        \"dots\": {\n          \"token\": \"DotDotDot\"\n        },\n        \"comma\": {\n          \"option\": {\n            \"token\": \"Comma\"\n          }\n        }\n      }\n    },\n    {\n      \"ident\": \"BinOp\",\n      \"features\": {\n        \"any\": [\n          \"derive\",\n          \"full\"\n        ]\n      },\n      \"variants\": {\n        \"Add\": [\n          {\n            \"token\": \"Plus\"\n          }\n        ],\n        \"Sub\": [\n          {\n            \"token\": \"Minus\"\n          }\n        ],\n        \"Mul\": [\n          {\n            \"token\": \"Star\"\n          }\n        ],\n        \"Div\": [\n          {\n            \"token\": \"Slash\"\n          }\n        ],\n        \"Rem\": [\n          {\n            \"token\": \"Percent\"\n          }\n        ],\n        \"And\": [\n          {\n            \"token\": \"AndAnd\"\n          }\n        ],\n        \"Or\": [\n          {\n            \"token\": \"OrOr\"\n          }\n        ],\n        \"BitXor\": [\n          {\n            \"token\": \"Caret\"\n          }\n        ],\n        \"BitAnd\": [\n          {\n            \"token\": \"And\"\n          }\n        ],\n        \"BitOr\": [\n          {\n            \"token\": \"Or\"\n          }\n        ],\n        \"Shl\": [\n          {\n            \"token\": \"Shl\"\n          }\n        ],\n        \"Shr\": [\n          {\n            \"token\": \"Shr\"\n          }\n        ],\n        \"Eq\": [\n          {\n            \"token\": \"EqEq\"\n          }\n        ],\n        \"Lt\": [\n          {\n            \"token\": \"Lt\"\n          }\n        ],\n        \"Le\": [\n          {\n            \"token\": \"Le\"\n          }\n        ],\n        \"Ne\": [\n          {\n            \"token\": \"Ne\"\n          }\n        ],\n        \"Ge\": [\n          {\n            \"token\": \"Ge\"\n          }\n        ],\n        \"Gt\": [\n          {\n            \"token\": \"Gt\"\n          }\n        ],\n        \"AddAssign\": [\n          {\n            \"token\": \"PlusEq\"\n          }\n        ],\n        \"SubAssign\": [\n          {\n            \"token\": \"MinusEq\"\n          }\n        ],\n        \"MulAssign\": [\n          {\n            \"token\": \"StarEq\"\n          }\n        ],\n        \"DivAssign\": [\n          {\n            \"token\": \"SlashEq\"\n          }\n        ],\n        \"RemAssign\": [\n          {\n            \"token\": \"PercentEq\"\n          }\n        ],\n        \"BitXorAssign\": [\n          {\n            \"token\": \"CaretEq\"\n          }\n        ],\n        \"BitAndAssign\": [\n          {\n            \"token\": \"AndEq\"\n          }\n        ],\n        \"BitOrAssign\": [\n          {\n            \"token\": \"OrEq\"\n          }\n        ],\n        \"ShlAssign\": [\n          {\n            \"token\": \"ShlEq\"\n          }\n        ],\n        \"ShrAssign\": [\n          {\n            \"token\": \"ShrEq\"\n          }\n        ]\n      },\n      \"exhaustive\": false\n    },\n    {\n      \"ident\": \"Block\",\n      \"features\": {\n        \"any\": [\n          \"full\"\n        ]\n      },\n      \"fields\": {\n        \"brace_token\": {\n          \"group\": \"Brace\"\n        },\n        \"stmts\": {\n          \"vec\": {\n            \"syn\": \"Stmt\"\n          }\n        }\n      }\n    },\n    {\n      \"ident\": \"BoundLifetimes\",\n      \"features\": {\n        \"any\": [\n          \"derive\",\n          \"full\"\n        ]\n      },\n      \"fields\": {\n        \"for_token\": {\n          \"token\": \"For\"\n        },\n        \"lt_token\": {\n          \"token\": \"Lt\"\n        },\n        \"lifetimes\": {\n          \"punctuated\": {\n            \"element\": {\n              \"syn\": \"GenericParam\"\n            },\n            \"punct\": \"Comma\"\n          }\n        },\n        \"gt_token\": {\n          \"token\": \"Gt\"\n        }\n      }\n    },\n    {\n      \"ident\": \"CapturedParam\",\n      \"features\": {\n        \"any\": [\n          \"full\"\n        ]\n      },\n      \"variants\": {\n        \"Lifetime\": [\n          {\n            \"syn\": \"Lifetime\"\n          }\n        ],\n        \"Ident\": [\n          {\n            \"proc_macro2\": \"Ident\"\n          }\n        ]\n      },\n      \"exhaustive\": false\n    },\n    {\n      \"ident\": \"ConstParam\",\n      \"features\": {\n        \"any\": [\n          \"derive\",\n          \"full\"\n        ]\n      },\n      \"fields\": {\n        \"attrs\": {\n          \"vec\": {\n            \"syn\": \"Attribute\"\n          }\n        },\n        \"const_token\": {\n          \"token\": \"Const\"\n        },\n        \"ident\": {\n          \"proc_macro2\": \"Ident\"\n        },\n        \"colon_token\": {\n          \"token\": \"Colon\"\n        },\n        \"ty\": {\n          \"syn\": \"Type\"\n        },\n        \"eq_token\": {\n          \"option\": {\n            \"token\": \"Eq\"\n          }\n        },\n        \"default\": {\n          \"option\": {\n            \"syn\": \"Expr\"\n          }\n        }\n      }\n    },\n    {\n      \"ident\": \"Constraint\",\n      \"features\": {\n        \"any\": [\n          \"derive\",\n          \"full\"\n        ]\n      },\n      \"fields\": {\n        \"ident\": {\n          \"proc_macro2\": \"Ident\"\n        },\n        \"generics\": {\n          \"option\": {\n            \"syn\": \"AngleBracketedGenericArguments\"\n          }\n        },\n        \"colon_token\": {\n          \"token\": \"Colon\"\n        },\n        \"bounds\": {\n          \"punctuated\": {\n            \"element\": {\n              \"syn\": \"TypeParamBound\"\n            },\n            \"punct\": \"Plus\"\n          }\n        }\n      }\n    },\n    {\n      \"ident\": \"Data\",\n      \"features\": {\n        \"any\": [\n          \"derive\"\n        ]\n      },\n      \"variants\": {\n        \"Struct\": [\n          {\n            \"syn\": \"DataStruct\"\n          }\n        ],\n        \"Enum\": [\n          {\n            \"syn\": \"DataEnum\"\n          }\n        ],\n        \"Union\": [\n          {\n            \"syn\": \"DataUnion\"\n          }\n        ]\n      }\n    },\n    {\n      \"ident\": \"DataEnum\",\n      \"features\": {\n        \"any\": [\n          \"derive\"\n        ]\n      },\n      \"fields\": {\n        \"enum_token\": {\n          \"token\": \"Enum\"\n        },\n        \"brace_token\": {\n          \"group\": \"Brace\"\n        },\n        \"variants\": {\n          \"punctuated\": {\n            \"element\": {\n              \"syn\": \"Variant\"\n            },\n            \"punct\": \"Comma\"\n          }\n        }\n      }\n    },\n    {\n      \"ident\": \"DataStruct\",\n      \"features\": {\n        \"any\": [\n          \"derive\"\n        ]\n      },\n      \"fields\": {\n        \"struct_token\": {\n          \"token\": \"Struct\"\n        },\n        \"fields\": {\n          \"syn\": \"Fields\"\n        },\n        \"semi_token\": {\n          \"option\": {\n            \"token\": \"Semi\"\n          }\n        }\n      }\n    },\n    {\n      \"ident\": \"DataUnion\",\n      \"features\": {\n        \"any\": [\n          \"derive\"\n        ]\n      },\n      \"fields\": {\n        \"union_token\": {\n          \"token\": \"Union\"\n        },\n        \"fields\": {\n          \"syn\": \"FieldsNamed\"\n        }\n      }\n    },\n    {\n      \"ident\": \"DeriveInput\",\n      \"features\": {\n        \"any\": [\n          \"derive\"\n        ]\n      },\n      \"fields\": {\n        \"attrs\": {\n          \"vec\": {\n            \"syn\": \"Attribute\"\n          }\n        },\n        \"vis\": {\n          \"syn\": \"Visibility\"\n        },\n        \"ident\": {\n          \"proc_macro2\": \"Ident\"\n        },\n        \"generics\": {\n          \"syn\": \"Generics\"\n        },\n        \"data\": {\n          \"syn\": \"Data\"\n        }\n      }\n    },\n    {\n      \"ident\": \"Expr\",\n      \"features\": {\n        \"any\": [\n          \"derive\",\n          \"full\"\n        ]\n      },\n      \"variants\": {\n        \"Array\": [\n          {\n            \"syn\": \"ExprArray\"\n          }\n        ],\n        \"Assign\": [\n          {\n            \"syn\": \"ExprAssign\"\n          }\n        ],\n        \"Async\": [\n          {\n            \"syn\": \"ExprAsync\"\n          }\n        ],\n        \"Await\": [\n          {\n            \"syn\": \"ExprAwait\"\n          }\n        ],\n        \"Binary\": [\n          {\n            \"syn\": \"ExprBinary\"\n          }\n        ],\n        \"Block\": [\n          {\n            \"syn\": \"ExprBlock\"\n          }\n        ],\n        \"Break\": [\n          {\n            \"syn\": \"ExprBreak\"\n          }\n        ],\n        \"Call\": [\n          {\n            \"syn\": \"ExprCall\"\n          }\n        ],\n        \"Cast\": [\n          {\n            \"syn\": \"ExprCast\"\n          }\n        ],\n        \"Closure\": [\n          {\n            \"syn\": \"ExprClosure\"\n          }\n        ],\n        \"Const\": [\n          {\n            \"syn\": \"ExprConst\"\n          }\n        ],\n        \"Continue\": [\n          {\n            \"syn\": \"ExprContinue\"\n          }\n        ],\n        \"Field\": [\n          {\n            \"syn\": \"ExprField\"\n          }\n        ],\n        \"ForLoop\": [\n          {\n            \"syn\": \"ExprForLoop\"\n          }\n        ],\n        \"Group\": [\n          {\n            \"syn\": \"ExprGroup\"\n          }\n        ],\n        \"If\": [\n          {\n            \"syn\": \"ExprIf\"\n          }\n        ],\n        \"Index\": [\n          {\n            \"syn\": \"ExprIndex\"\n          }\n        ],\n        \"Infer\": [\n          {\n            \"syn\": \"ExprInfer\"\n          }\n        ],\n        \"Let\": [\n          {\n            \"syn\": \"ExprLet\"\n          }\n        ],\n        \"Lit\": [\n          {\n            \"syn\": \"ExprLit\"\n          }\n        ],\n        \"Loop\": [\n          {\n            \"syn\": \"ExprLoop\"\n          }\n        ],\n        \"Macro\": [\n          {\n            \"syn\": \"ExprMacro\"\n          }\n        ],\n        \"Match\": [\n          {\n            \"syn\": \"ExprMatch\"\n          }\n        ],\n        \"MethodCall\": [\n          {\n            \"syn\": \"ExprMethodCall\"\n          }\n        ],\n        \"Paren\": [\n          {\n            \"syn\": \"ExprParen\"\n          }\n        ],\n        \"Path\": [\n          {\n            \"syn\": \"ExprPath\"\n          }\n        ],\n        \"Range\": [\n          {\n            \"syn\": \"ExprRange\"\n          }\n        ],\n        \"RawAddr\": [\n          {\n            \"syn\": \"ExprRawAddr\"\n          }\n        ],\n        \"Reference\": [\n          {\n            \"syn\": \"ExprReference\"\n          }\n        ],\n        \"Repeat\": [\n          {\n            \"syn\": \"ExprRepeat\"\n          }\n        ],\n        \"Return\": [\n          {\n            \"syn\": \"ExprReturn\"\n          }\n        ],\n        \"Struct\": [\n          {\n            \"syn\": \"ExprStruct\"\n          }\n        ],\n        \"Try\": [\n          {\n            \"syn\": \"ExprTry\"\n          }\n        ],\n        \"TryBlock\": [\n          {\n            \"syn\": \"ExprTryBlock\"\n          }\n        ],\n        \"Tuple\": [\n          {\n            \"syn\": \"ExprTuple\"\n          }\n        ],\n        \"Unary\": [\n          {\n            \"syn\": \"ExprUnary\"\n          }\n        ],\n        \"Unsafe\": [\n          {\n            \"syn\": \"ExprUnsafe\"\n          }\n        ],\n        \"Verbatim\": [\n          {\n            \"proc_macro2\": \"TokenStream\"\n          }\n        ],\n        \"While\": [\n          {\n            \"syn\": \"ExprWhile\"\n          }\n        ],\n        \"Yield\": [\n          {\n            \"syn\": \"ExprYield\"\n          }\n        ]\n      },\n      \"exhaustive\": false\n    },\n    {\n      \"ident\": \"ExprArray\",\n      \"features\": {\n        \"any\": [\n          \"full\"\n        ]\n      },\n      \"fields\": {\n        \"attrs\": {\n          \"vec\": {\n            \"syn\": \"Attribute\"\n          }\n        },\n        \"bracket_token\": {\n          \"group\": \"Bracket\"\n        },\n        \"elems\": {\n          \"punctuated\": {\n            \"element\": {\n              \"syn\": \"Expr\"\n            },\n            \"punct\": \"Comma\"\n          }\n        }\n      }\n    },\n    {\n      \"ident\": \"ExprAssign\",\n      \"features\": {\n        \"any\": [\n          \"full\"\n        ]\n      },\n      \"fields\": {\n        \"attrs\": {\n          \"vec\": {\n            \"syn\": \"Attribute\"\n          }\n        },\n        \"left\": {\n          \"box\": {\n            \"syn\": \"Expr\"\n          }\n        },\n        \"eq_token\": {\n          \"token\": \"Eq\"\n        },\n        \"right\": {\n          \"box\": {\n            \"syn\": \"Expr\"\n          }\n        }\n      }\n    },\n    {\n      \"ident\": \"ExprAsync\",\n      \"features\": {\n        \"any\": [\n          \"full\"\n        ]\n      },\n      \"fields\": {\n        \"attrs\": {\n          \"vec\": {\n            \"syn\": \"Attribute\"\n          }\n        },\n        \"async_token\": {\n          \"token\": \"Async\"\n        },\n        \"capture\": {\n          \"option\": {\n            \"token\": \"Move\"\n          }\n        },\n        \"block\": {\n          \"syn\": \"Block\"\n        }\n      }\n    },\n    {\n      \"ident\": \"ExprAwait\",\n      \"features\": {\n        \"any\": [\n          \"full\"\n        ]\n      },\n      \"fields\": {\n        \"attrs\": {\n          \"vec\": {\n            \"syn\": \"Attribute\"\n          }\n        },\n        \"base\": {\n          \"box\": {\n            \"syn\": \"Expr\"\n          }\n        },\n        \"dot_token\": {\n          \"token\": \"Dot\"\n        },\n        \"await_token\": {\n          \"token\": \"Await\"\n        }\n      }\n    },\n    {\n      \"ident\": \"ExprBinary\",\n      \"features\": {\n        \"any\": [\n          \"derive\",\n          \"full\"\n        ]\n      },\n      \"fields\": {\n        \"attrs\": {\n          \"vec\": {\n            \"syn\": \"Attribute\"\n          }\n        },\n        \"left\": {\n          \"box\": {\n            \"syn\": \"Expr\"\n          }\n        },\n        \"op\": {\n          \"syn\": \"BinOp\"\n        },\n        \"right\": {\n          \"box\": {\n            \"syn\": \"Expr\"\n          }\n        }\n      }\n    },\n    {\n      \"ident\": \"ExprBlock\",\n      \"features\": {\n        \"any\": [\n          \"full\"\n        ]\n      },\n      \"fields\": {\n        \"attrs\": {\n          \"vec\": {\n            \"syn\": \"Attribute\"\n          }\n        },\n        \"label\": {\n          \"option\": {\n            \"syn\": \"Label\"\n          }\n        },\n        \"block\": {\n          \"syn\": \"Block\"\n        }\n      }\n    },\n    {\n      \"ident\": \"ExprBreak\",\n      \"features\": {\n        \"any\": [\n          \"full\"\n        ]\n      },\n      \"fields\": {\n        \"attrs\": {\n          \"vec\": {\n            \"syn\": \"Attribute\"\n          }\n        },\n        \"break_token\": {\n          \"token\": \"Break\"\n        },\n        \"label\": {\n          \"option\": {\n            \"syn\": \"Lifetime\"\n          }\n        },\n        \"expr\": {\n          \"option\": {\n            \"box\": {\n              \"syn\": \"Expr\"\n            }\n          }\n        }\n      }\n    },\n    {\n      \"ident\": \"ExprCall\",\n      \"features\": {\n        \"any\": [\n          \"derive\",\n          \"full\"\n        ]\n      },\n      \"fields\": {\n        \"attrs\": {\n          \"vec\": {\n            \"syn\": \"Attribute\"\n          }\n        },\n        \"func\": {\n          \"box\": {\n            \"syn\": \"Expr\"\n          }\n        },\n        \"paren_token\": {\n          \"group\": \"Paren\"\n        },\n        \"args\": {\n          \"punctuated\": {\n            \"element\": {\n              \"syn\": \"Expr\"\n            },\n            \"punct\": \"Comma\"\n          }\n        }\n      }\n    },\n    {\n      \"ident\": \"ExprCast\",\n      \"features\": {\n        \"any\": [\n          \"derive\",\n          \"full\"\n        ]\n      },\n      \"fields\": {\n        \"attrs\": {\n          \"vec\": {\n            \"syn\": \"Attribute\"\n          }\n        },\n        \"expr\": {\n          \"box\": {\n            \"syn\": \"Expr\"\n          }\n        },\n        \"as_token\": {\n          \"token\": \"As\"\n        },\n        \"ty\": {\n          \"box\": {\n            \"syn\": \"Type\"\n          }\n        }\n      }\n    },\n    {\n      \"ident\": \"ExprClosure\",\n      \"features\": {\n        \"any\": [\n          \"full\"\n        ]\n      },\n      \"fields\": {\n        \"attrs\": {\n          \"vec\": {\n            \"syn\": \"Attribute\"\n          }\n        },\n        \"lifetimes\": {\n          \"option\": {\n            \"syn\": \"BoundLifetimes\"\n          }\n        },\n        \"constness\": {\n          \"option\": {\n            \"token\": \"Const\"\n          }\n        },\n        \"movability\": {\n          \"option\": {\n            \"token\": \"Static\"\n          }\n        },\n        \"asyncness\": {\n          \"option\": {\n            \"token\": \"Async\"\n          }\n        },\n        \"capture\": {\n          \"option\": {\n            \"token\": \"Move\"\n          }\n        },\n        \"or1_token\": {\n          \"token\": \"Or\"\n        },\n        \"inputs\": {\n          \"punctuated\": {\n            \"element\": {\n              \"syn\": \"Pat\"\n            },\n            \"punct\": \"Comma\"\n          }\n        },\n        \"or2_token\": {\n          \"token\": \"Or\"\n        },\n        \"output\": {\n          \"syn\": \"ReturnType\"\n        },\n        \"body\": {\n          \"box\": {\n            \"syn\": \"Expr\"\n          }\n        }\n      }\n    },\n    {\n      \"ident\": \"ExprConst\",\n      \"features\": {\n        \"any\": [\n          \"full\"\n        ]\n      },\n      \"fields\": {\n        \"attrs\": {\n          \"vec\": {\n            \"syn\": \"Attribute\"\n          }\n        },\n        \"const_token\": {\n          \"token\": \"Const\"\n        },\n        \"block\": {\n          \"syn\": \"Block\"\n        }\n      }\n    },\n    {\n      \"ident\": \"ExprContinue\",\n      \"features\": {\n        \"any\": [\n          \"full\"\n        ]\n      },\n      \"fields\": {\n        \"attrs\": {\n          \"vec\": {\n            \"syn\": \"Attribute\"\n          }\n        },\n        \"continue_token\": {\n          \"token\": \"Continue\"\n        },\n        \"label\": {\n          \"option\": {\n            \"syn\": \"Lifetime\"\n          }\n        }\n      }\n    },\n    {\n      \"ident\": \"ExprField\",\n      \"features\": {\n        \"any\": [\n          \"derive\",\n          \"full\"\n        ]\n      },\n      \"fields\": {\n        \"attrs\": {\n          \"vec\": {\n            \"syn\": \"Attribute\"\n          }\n        },\n        \"base\": {\n          \"box\": {\n            \"syn\": \"Expr\"\n          }\n        },\n        \"dot_token\": {\n          \"token\": \"Dot\"\n        },\n        \"member\": {\n          \"syn\": \"Member\"\n        }\n      }\n    },\n    {\n      \"ident\": \"ExprForLoop\",\n      \"features\": {\n        \"any\": [\n          \"full\"\n        ]\n      },\n      \"fields\": {\n        \"attrs\": {\n          \"vec\": {\n            \"syn\": \"Attribute\"\n          }\n        },\n        \"label\": {\n          \"option\": {\n            \"syn\": \"Label\"\n          }\n        },\n        \"for_token\": {\n          \"token\": \"For\"\n        },\n        \"pat\": {\n          \"box\": {\n            \"syn\": \"Pat\"\n          }\n        },\n        \"in_token\": {\n          \"token\": \"In\"\n        },\n        \"expr\": {\n          \"box\": {\n            \"syn\": \"Expr\"\n          }\n        },\n        \"body\": {\n          \"syn\": \"Block\"\n        }\n      }\n    },\n    {\n      \"ident\": \"ExprGroup\",\n      \"features\": {\n        \"any\": [\n          \"derive\",\n          \"full\"\n        ]\n      },\n      \"fields\": {\n        \"attrs\": {\n          \"vec\": {\n            \"syn\": \"Attribute\"\n          }\n        },\n        \"group_token\": {\n          \"group\": \"Group\"\n        },\n        \"expr\": {\n          \"box\": {\n            \"syn\": \"Expr\"\n          }\n        }\n      }\n    },\n    {\n      \"ident\": \"ExprIf\",\n      \"features\": {\n        \"any\": [\n          \"full\"\n        ]\n      },\n      \"fields\": {\n        \"attrs\": {\n          \"vec\": {\n            \"syn\": \"Attribute\"\n          }\n        },\n        \"if_token\": {\n          \"token\": \"If\"\n        },\n        \"cond\": {\n          \"box\": {\n            \"syn\": \"Expr\"\n          }\n        },\n        \"then_branch\": {\n          \"syn\": \"Block\"\n        },\n        \"else_branch\": {\n          \"option\": {\n            \"tuple\": [\n              {\n                \"token\": \"Else\"\n              },\n              {\n                \"box\": {\n                  \"syn\": \"Expr\"\n                }\n              }\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"ident\": \"ExprIndex\",\n      \"features\": {\n        \"any\": [\n          \"derive\",\n          \"full\"\n        ]\n      },\n      \"fields\": {\n        \"attrs\": {\n          \"vec\": {\n            \"syn\": \"Attribute\"\n          }\n        },\n        \"expr\": {\n          \"box\": {\n            \"syn\": \"Expr\"\n          }\n        },\n        \"bracket_token\": {\n          \"group\": \"Bracket\"\n        },\n        \"index\": {\n          \"box\": {\n            \"syn\": \"Expr\"\n          }\n        }\n      }\n    },\n    {\n      \"ident\": \"ExprInfer\",\n      \"features\": {\n        \"any\": [\n          \"full\"\n        ]\n      },\n      \"fields\": {\n        \"attrs\": {\n          \"vec\": {\n            \"syn\": \"Attribute\"\n          }\n        },\n        \"underscore_token\": {\n          \"token\": \"Underscore\"\n        }\n      }\n    },\n    {\n      \"ident\": \"ExprLet\",\n      \"features\": {\n        \"any\": [\n          \"full\"\n        ]\n      },\n      \"fields\": {\n        \"attrs\": {\n          \"vec\": {\n            \"syn\": \"Attribute\"\n          }\n        },\n        \"let_token\": {\n          \"token\": \"Let\"\n        },\n        \"pat\": {\n          \"box\": {\n            \"syn\": \"Pat\"\n          }\n        },\n        \"eq_token\": {\n          \"token\": \"Eq\"\n        },\n        \"expr\": {\n          \"box\": {\n            \"syn\": \"Expr\"\n          }\n        }\n      }\n    },\n    {\n      \"ident\": \"ExprLit\",\n      \"features\": {\n        \"any\": [\n          \"derive\",\n          \"full\"\n        ]\n      },\n      \"fields\": {\n        \"attrs\": {\n          \"vec\": {\n            \"syn\": \"Attribute\"\n          }\n        },\n        \"lit\": {\n          \"syn\": \"Lit\"\n        }\n      }\n    },\n    {\n      \"ident\": \"ExprLoop\",\n      \"features\": {\n        \"any\": [\n          \"full\"\n        ]\n      },\n      \"fields\": {\n        \"attrs\": {\n          \"vec\": {\n            \"syn\": \"Attribute\"\n          }\n        },\n        \"label\": {\n          \"option\": {\n            \"syn\": \"Label\"\n          }\n        },\n        \"loop_token\": {\n          \"token\": \"Loop\"\n        },\n        \"body\": {\n          \"syn\": \"Block\"\n        }\n      }\n    },\n    {\n      \"ident\": \"ExprMacro\",\n      \"features\": {\n        \"any\": [\n          \"derive\",\n          \"full\"\n        ]\n      },\n      \"fields\": {\n        \"attrs\": {\n          \"vec\": {\n            \"syn\": \"Attribute\"\n          }\n        },\n        \"mac\": {\n          \"syn\": \"Macro\"\n        }\n      }\n    },\n    {\n      \"ident\": \"ExprMatch\",\n      \"features\": {\n        \"any\": [\n          \"full\"\n        ]\n      },\n      \"fields\": {\n        \"attrs\": {\n          \"vec\": {\n            \"syn\": \"Attribute\"\n          }\n        },\n        \"match_token\": {\n          \"token\": \"Match\"\n        },\n        \"expr\": {\n          \"box\": {\n            \"syn\": \"Expr\"\n          }\n        },\n        \"brace_token\": {\n          \"group\": \"Brace\"\n        },\n        \"arms\": {\n          \"vec\": {\n            \"syn\": \"Arm\"\n          }\n        }\n      }\n    },\n    {\n      \"ident\": \"ExprMethodCall\",\n      \"features\": {\n        \"any\": [\n          \"derive\",\n          \"full\"\n        ]\n      },\n      \"fields\": {\n        \"attrs\": {\n          \"vec\": {\n            \"syn\": \"Attribute\"\n          }\n        },\n        \"receiver\": {\n          \"box\": {\n            \"syn\": \"Expr\"\n          }\n        },\n        \"dot_token\": {\n          \"token\": \"Dot\"\n        },\n        \"method\": {\n          \"proc_macro2\": \"Ident\"\n        },\n        \"turbofish\": {\n          \"option\": {\n            \"syn\": \"AngleBracketedGenericArguments\"\n          }\n        },\n        \"paren_token\": {\n          \"group\": \"Paren\"\n        },\n        \"args\": {\n          \"punctuated\": {\n            \"element\": {\n              \"syn\": \"Expr\"\n            },\n            \"punct\": \"Comma\"\n          }\n        }\n      }\n    },\n    {\n      \"ident\": \"ExprParen\",\n      \"features\": {\n        \"any\": [\n          \"derive\",\n          \"full\"\n        ]\n      },\n      \"fields\": {\n        \"attrs\": {\n          \"vec\": {\n            \"syn\": \"Attribute\"\n          }\n        },\n        \"paren_token\": {\n          \"group\": \"Paren\"\n        },\n        \"expr\": {\n          \"box\": {\n            \"syn\": \"Expr\"\n          }\n        }\n      }\n    },\n    {\n      \"ident\": \"ExprPath\",\n      \"features\": {\n        \"any\": [\n          \"derive\",\n          \"full\"\n        ]\n      },\n      \"fields\": {\n        \"attrs\": {\n          \"vec\": {\n            \"syn\": \"Attribute\"\n          }\n        },\n        \"qself\": {\n          \"option\": {\n            \"syn\": \"QSelf\"\n          }\n        },\n        \"path\": {\n          \"syn\": \"Path\"\n        }\n      }\n    },\n    {\n      \"ident\": \"ExprRange\",\n      \"features\": {\n        \"any\": [\n          \"full\"\n        ]\n      },\n      \"fields\": {\n        \"attrs\": {\n          \"vec\": {\n            \"syn\": \"Attribute\"\n          }\n        },\n        \"start\": {\n          \"option\": {\n            \"box\": {\n              \"syn\": \"Expr\"\n            }\n          }\n        },\n        \"limits\": {\n          \"syn\": \"RangeLimits\"\n        },\n        \"end\": {\n          \"option\": {\n            \"box\": {\n              \"syn\": \"Expr\"\n            }\n          }\n        }\n      }\n    },\n    {\n      \"ident\": \"ExprRawAddr\",\n      \"features\": {\n        \"any\": [\n          \"full\"\n        ]\n      },\n      \"fields\": {\n        \"attrs\": {\n          \"vec\": {\n            \"syn\": \"Attribute\"\n          }\n        },\n        \"and_token\": {\n          \"token\": \"And\"\n        },\n        \"raw\": {\n          \"token\": \"Raw\"\n        },\n        \"mutability\": {\n          \"syn\": \"PointerMutability\"\n        },\n        \"expr\": {\n          \"box\": {\n            \"syn\": \"Expr\"\n          }\n        }\n      }\n    },\n    {\n      \"ident\": \"ExprReference\",\n      \"features\": {\n        \"any\": [\n          \"derive\",\n          \"full\"\n        ]\n      },\n      \"fields\": {\n        \"attrs\": {\n          \"vec\": {\n            \"syn\": \"Attribute\"\n          }\n        },\n        \"and_token\": {\n          \"token\": \"And\"\n        },\n        \"mutability\": {\n          \"option\": {\n            \"token\": \"Mut\"\n          }\n        },\n        \"expr\": {\n          \"box\": {\n            \"syn\": \"Expr\"\n          }\n        }\n      }\n    },\n    {\n      \"ident\": \"ExprRepeat\",\n      \"features\": {\n        \"any\": [\n          \"full\"\n        ]\n      },\n      \"fields\": {\n        \"attrs\": {\n          \"vec\": {\n            \"syn\": \"Attribute\"\n          }\n        },\n        \"bracket_token\": {\n          \"group\": \"Bracket\"\n        },\n        \"expr\": {\n          \"box\": {\n            \"syn\": \"Expr\"\n          }\n        },\n        \"semi_token\": {\n          \"token\": \"Semi\"\n        },\n        \"len\": {\n          \"box\": {\n            \"syn\": \"Expr\"\n          }\n        }\n      }\n    },\n    {\n      \"ident\": \"ExprReturn\",\n      \"features\": {\n        \"any\": [\n          \"full\"\n        ]\n      },\n      \"fields\": {\n        \"attrs\": {\n          \"vec\": {\n            \"syn\": \"Attribute\"\n          }\n        },\n        \"return_token\": {\n          \"token\": \"Return\"\n        },\n        \"expr\": {\n          \"option\": {\n            \"box\": {\n              \"syn\": \"Expr\"\n            }\n          }\n        }\n      }\n    },\n    {\n      \"ident\": \"ExprStruct\",\n      \"features\": {\n        \"any\": [\n          \"derive\",\n          \"full\"\n        ]\n      },\n      \"fields\": {\n        \"attrs\": {\n          \"vec\": {\n            \"syn\": \"Attribute\"\n          }\n        },\n        \"qself\": {\n          \"option\": {\n            \"syn\": \"QSelf\"\n          }\n        },\n        \"path\": {\n          \"syn\": \"Path\"\n        },\n        \"brace_token\": {\n          \"group\": \"Brace\"\n        },\n        \"fields\": {\n          \"punctuated\": {\n            \"element\": {\n              \"syn\": \"FieldValue\"\n            },\n            \"punct\": \"Comma\"\n          }\n        },\n        \"dot2_token\": {\n          \"option\": {\n            \"token\": \"DotDot\"\n          }\n        },\n        \"rest\": {\n          \"option\": {\n            \"box\": {\n              \"syn\": \"Expr\"\n            }\n          }\n        }\n      }\n    },\n    {\n      \"ident\": \"ExprTry\",\n      \"features\": {\n        \"any\": [\n          \"full\"\n        ]\n      },\n      \"fields\": {\n        \"attrs\": {\n          \"vec\": {\n            \"syn\": \"Attribute\"\n          }\n        },\n        \"expr\": {\n          \"box\": {\n            \"syn\": \"Expr\"\n          }\n        },\n        \"question_token\": {\n          \"token\": \"Question\"\n        }\n      }\n    },\n    {\n      \"ident\": \"ExprTryBlock\",\n      \"features\": {\n        \"any\": [\n          \"full\"\n        ]\n      },\n      \"fields\": {\n        \"attrs\": {\n          \"vec\": {\n            \"syn\": \"Attribute\"\n          }\n        },\n        \"try_token\": {\n          \"token\": \"Try\"\n        },\n        \"block\": {\n          \"syn\": \"Block\"\n        }\n      }\n    },\n    {\n      \"ident\": \"ExprTuple\",\n      \"features\": {\n        \"any\": [\n          \"derive\",\n          \"full\"\n        ]\n      },\n      \"fields\": {\n        \"attrs\": {\n          \"vec\": {\n            \"syn\": \"Attribute\"\n          }\n        },\n        \"paren_token\": {\n          \"group\": \"Paren\"\n        },\n        \"elems\": {\n          \"punctuated\": {\n            \"element\": {\n              \"syn\": \"Expr\"\n            },\n            \"punct\": \"Comma\"\n          }\n        }\n      }\n    },\n    {\n      \"ident\": \"ExprUnary\",\n      \"features\": {\n        \"any\": [\n          \"derive\",\n          \"full\"\n        ]\n      },\n      \"fields\": {\n        \"attrs\": {\n          \"vec\": {\n            \"syn\": \"Attribute\"\n          }\n        },\n        \"op\": {\n          \"syn\": \"UnOp\"\n        },\n        \"expr\": {\n          \"box\": {\n            \"syn\": \"Expr\"\n          }\n        }\n      }\n    },\n    {\n      \"ident\": \"ExprUnsafe\",\n      \"features\": {\n        \"any\": [\n          \"full\"\n        ]\n      },\n      \"fields\": {\n        \"attrs\": {\n          \"vec\": {\n            \"syn\": \"Attribute\"\n          }\n        },\n        \"unsafe_token\": {\n          \"token\": \"Unsafe\"\n        },\n        \"block\": {\n          \"syn\": \"Block\"\n        }\n      }\n    },\n    {\n      \"ident\": \"ExprWhile\",\n      \"features\": {\n        \"any\": [\n          \"full\"\n        ]\n      },\n      \"fields\": {\n        \"attrs\": {\n          \"vec\": {\n            \"syn\": \"Attribute\"\n          }\n        },\n        \"label\": {\n          \"option\": {\n            \"syn\": \"Label\"\n          }\n        },\n        \"while_token\": {\n          \"token\": \"While\"\n        },\n        \"cond\": {\n          \"box\": {\n            \"syn\": \"Expr\"\n          }\n        },\n        \"body\": {\n          \"syn\": \"Block\"\n        }\n      }\n    },\n    {\n      \"ident\": \"ExprYield\",\n      \"features\": {\n        \"any\": [\n          \"full\"\n        ]\n      },\n      \"fields\": {\n        \"attrs\": {\n          \"vec\": {\n            \"syn\": \"Attribute\"\n          }\n        },\n        \"yield_token\": {\n          \"token\": \"Yield\"\n        },\n        \"expr\": {\n          \"option\": {\n            \"box\": {\n              \"syn\": \"Expr\"\n            }\n          }\n        }\n      }\n    },\n    {\n      \"ident\": \"Field\",\n      \"features\": {\n        \"any\": [\n          \"derive\",\n          \"full\"\n        ]\n      },\n      \"fields\": {\n        \"attrs\": {\n          \"vec\": {\n            \"syn\": \"Attribute\"\n          }\n        },\n        \"vis\": {\n          \"syn\": \"Visibility\"\n        },\n        \"mutability\": {\n          \"syn\": \"FieldMutability\"\n        },\n        \"ident\": {\n          \"option\": {\n            \"proc_macro2\": \"Ident\"\n          }\n        },\n        \"colon_token\": {\n          \"option\": {\n            \"token\": \"Colon\"\n          }\n        },\n        \"ty\": {\n          \"syn\": \"Type\"\n        }\n      }\n    },\n    {\n      \"ident\": \"FieldMutability\",\n      \"features\": {\n        \"any\": [\n          \"derive\",\n          \"full\"\n        ]\n      },\n      \"variants\": {\n        \"None\": []\n      },\n      \"exhaustive\": false\n    },\n    {\n      \"ident\": \"FieldPat\",\n      \"features\": {\n        \"any\": [\n          \"full\"\n        ]\n      },\n      \"fields\": {\n        \"attrs\": {\n          \"vec\": {\n            \"syn\": \"Attribute\"\n          }\n        },\n        \"member\": {\n          \"syn\": \"Member\"\n        },\n        \"colon_token\": {\n          \"option\": {\n            \"token\": \"Colon\"\n          }\n        },\n        \"pat\": {\n          \"box\": {\n            \"syn\": \"Pat\"\n          }\n        }\n      }\n    },\n    {\n      \"ident\": \"FieldValue\",\n      \"features\": {\n        \"any\": [\n          \"derive\",\n          \"full\"\n        ]\n      },\n      \"fields\": {\n        \"attrs\": {\n          \"vec\": {\n            \"syn\": \"Attribute\"\n          }\n        },\n        \"member\": {\n          \"syn\": \"Member\"\n        },\n        \"colon_token\": {\n          \"option\": {\n            \"token\": \"Colon\"\n          }\n        },\n        \"expr\": {\n          \"syn\": \"Expr\"\n        }\n      }\n    },\n    {\n      \"ident\": \"Fields\",\n      \"features\": {\n        \"any\": [\n          \"derive\",\n          \"full\"\n        ]\n      },\n      \"variants\": {\n        \"Named\": [\n          {\n            \"syn\": \"FieldsNamed\"\n          }\n        ],\n        \"Unnamed\": [\n          {\n            \"syn\": \"FieldsUnnamed\"\n          }\n        ],\n        \"Unit\": []\n      }\n    },\n    {\n      \"ident\": \"FieldsNamed\",\n      \"features\": {\n        \"any\": [\n          \"derive\",\n          \"full\"\n        ]\n      },\n      \"fields\": {\n        \"brace_token\": {\n          \"group\": \"Brace\"\n        },\n        \"named\": {\n          \"punctuated\": {\n            \"element\": {\n              \"syn\": \"Field\"\n            },\n            \"punct\": \"Comma\"\n          }\n        }\n      }\n    },\n    {\n      \"ident\": \"FieldsUnnamed\",\n      \"features\": {\n        \"any\": [\n          \"derive\",\n          \"full\"\n        ]\n      },\n      \"fields\": {\n        \"paren_token\": {\n          \"group\": \"Paren\"\n        },\n        \"unnamed\": {\n          \"punctuated\": {\n            \"element\": {\n              \"syn\": \"Field\"\n            },\n            \"punct\": \"Comma\"\n          }\n        }\n      }\n    },\n    {\n      \"ident\": \"File\",\n      \"features\": {\n        \"any\": [\n          \"full\"\n        ]\n      },\n      \"fields\": {\n        \"shebang\": {\n          \"option\": {\n            \"std\": \"String\"\n          }\n        },\n        \"attrs\": {\n          \"vec\": {\n            \"syn\": \"Attribute\"\n          }\n        },\n        \"items\": {\n          \"vec\": {\n            \"syn\": \"Item\"\n          }\n        }\n      }\n    },\n    {\n      \"ident\": \"FnArg\",\n      \"features\": {\n        \"any\": [\n          \"full\"\n        ]\n      },\n      \"variants\": {\n        \"Receiver\": [\n          {\n            \"syn\": \"Receiver\"\n          }\n        ],\n        \"Typed\": [\n          {\n            \"syn\": \"PatType\"\n          }\n        ]\n      }\n    },\n    {\n      \"ident\": \"ForeignItem\",\n      \"features\": {\n        \"any\": [\n          \"full\"\n        ]\n      },\n      \"variants\": {\n        \"Fn\": [\n          {\n            \"syn\": \"ForeignItemFn\"\n          }\n        ],\n        \"Static\": [\n          {\n            \"syn\": \"ForeignItemStatic\"\n          }\n        ],\n        \"Type\": [\n          {\n            \"syn\": \"ForeignItemType\"\n          }\n        ],\n        \"Macro\": [\n          {\n            \"syn\": \"ForeignItemMacro\"\n          }\n        ],\n        \"Verbatim\": [\n          {\n            \"proc_macro2\": \"TokenStream\"\n          }\n        ]\n      },\n      \"exhaustive\": false\n    },\n    {\n      \"ident\": \"ForeignItemFn\",\n      \"features\": {\n        \"any\": [\n          \"full\"\n        ]\n      },\n      \"fields\": {\n        \"attrs\": {\n          \"vec\": {\n            \"syn\": \"Attribute\"\n          }\n        },\n        \"vis\": {\n          \"syn\": \"Visibility\"\n        },\n        \"sig\": {\n          \"syn\": \"Signature\"\n        },\n        \"semi_token\": {\n          \"token\": \"Semi\"\n        }\n      }\n    },\n    {\n      \"ident\": \"ForeignItemMacro\",\n      \"features\": {\n        \"any\": [\n          \"full\"\n        ]\n      },\n      \"fields\": {\n        \"attrs\": {\n          \"vec\": {\n            \"syn\": \"Attribute\"\n          }\n        },\n        \"mac\": {\n          \"syn\": \"Macro\"\n        },\n        \"semi_token\": {\n          \"option\": {\n            \"token\": \"Semi\"\n          }\n        }\n      }\n    },\n    {\n      \"ident\": \"ForeignItemStatic\",\n      \"features\": {\n        \"any\": [\n          \"full\"\n        ]\n      },\n      \"fields\": {\n        \"attrs\": {\n          \"vec\": {\n            \"syn\": \"Attribute\"\n          }\n        },\n        \"vis\": {\n          \"syn\": \"Visibility\"\n        },\n        \"static_token\": {\n          \"token\": \"Static\"\n        },\n        \"mutability\": {\n          \"syn\": \"StaticMutability\"\n        },\n        \"ident\": {\n          \"proc_macro2\": \"Ident\"\n        },\n        \"colon_token\": {\n          \"token\": \"Colon\"\n        },\n        \"ty\": {\n          \"box\": {\n            \"syn\": \"Type\"\n          }\n        },\n        \"semi_token\": {\n          \"token\": \"Semi\"\n        }\n      }\n    },\n    {\n      \"ident\": \"ForeignItemType\",\n      \"features\": {\n        \"any\": [\n          \"full\"\n        ]\n      },\n      \"fields\": {\n        \"attrs\": {\n          \"vec\": {\n            \"syn\": \"Attribute\"\n          }\n        },\n        \"vis\": {\n          \"syn\": \"Visibility\"\n        },\n        \"type_token\": {\n          \"token\": \"Type\"\n        },\n        \"ident\": {\n          \"proc_macro2\": \"Ident\"\n        },\n        \"generics\": {\n          \"syn\": \"Generics\"\n        },\n        \"semi_token\": {\n          \"token\": \"Semi\"\n        }\n      }\n    },\n    {\n      \"ident\": \"GenericArgument\",\n      \"features\": {\n        \"any\": [\n          \"derive\",\n          \"full\"\n        ]\n      },\n      \"variants\": {\n        \"Lifetime\": [\n          {\n            \"syn\": \"Lifetime\"\n          }\n        ],\n        \"Type\": [\n          {\n            \"syn\": \"Type\"\n          }\n        ],\n        \"Const\": [\n          {\n            \"syn\": \"Expr\"\n          }\n        ],\n        \"AssocType\": [\n          {\n            \"syn\": \"AssocType\"\n          }\n        ],\n        \"AssocConst\": [\n          {\n            \"syn\": \"AssocConst\"\n          }\n        ],\n        \"Constraint\": [\n          {\n            \"syn\": \"Constraint\"\n          }\n        ]\n      },\n      \"exhaustive\": false\n    },\n    {\n      \"ident\": \"GenericParam\",\n      \"features\": {\n        \"any\": [\n          \"derive\",\n          \"full\"\n        ]\n      },\n      \"variants\": {\n        \"Lifetime\": [\n          {\n            \"syn\": \"LifetimeParam\"\n          }\n        ],\n        \"Type\": [\n          {\n            \"syn\": \"TypeParam\"\n          }\n        ],\n        \"Const\": [\n          {\n            \"syn\": \"ConstParam\"\n          }\n        ]\n      }\n    },\n    {\n      \"ident\": \"Generics\",\n      \"features\": {\n        \"any\": [\n          \"derive\",\n          \"full\"\n        ]\n      },\n      \"fields\": {\n        \"lt_token\": {\n          \"option\": {\n            \"token\": \"Lt\"\n          }\n        },\n        \"params\": {\n          \"punctuated\": {\n            \"element\": {\n              \"syn\": \"GenericParam\"\n            },\n            \"punct\": \"Comma\"\n          }\n        },\n        \"gt_token\": {\n          \"option\": {\n            \"token\": \"Gt\"\n          }\n        },\n        \"where_clause\": {\n          \"option\": {\n            \"syn\": \"WhereClause\"\n          }\n        }\n      }\n    },\n    {\n      \"ident\": \"ImplItem\",\n      \"features\": {\n        \"any\": [\n          \"full\"\n        ]\n      },\n      \"variants\": {\n        \"Const\": [\n          {\n            \"syn\": \"ImplItemConst\"\n          }\n        ],\n        \"Fn\": [\n          {\n            \"syn\": \"ImplItemFn\"\n          }\n        ],\n        \"Type\": [\n          {\n            \"syn\": \"ImplItemType\"\n          }\n        ],\n        \"Macro\": [\n          {\n            \"syn\": \"ImplItemMacro\"\n          }\n        ],\n        \"Verbatim\": [\n          {\n            \"proc_macro2\": \"TokenStream\"\n          }\n        ]\n      },\n      \"exhaustive\": false\n    },\n    {\n      \"ident\": \"ImplItemConst\",\n      \"features\": {\n        \"any\": [\n          \"full\"\n        ]\n      },\n      \"fields\": {\n        \"attrs\": {\n          \"vec\": {\n            \"syn\": \"Attribute\"\n          }\n        },\n        \"vis\": {\n          \"syn\": \"Visibility\"\n        },\n        \"defaultness\": {\n          \"option\": {\n            \"token\": \"Default\"\n          }\n        },\n        \"const_token\": {\n          \"token\": \"Const\"\n        },\n        \"ident\": {\n          \"proc_macro2\": \"Ident\"\n        },\n        \"generics\": {\n          \"syn\": \"Generics\"\n        },\n        \"colon_token\": {\n          \"token\": \"Colon\"\n        },\n        \"ty\": {\n          \"syn\": \"Type\"\n        },\n        \"eq_token\": {\n          \"token\": \"Eq\"\n        },\n        \"expr\": {\n          \"syn\": \"Expr\"\n        },\n        \"semi_token\": {\n          \"token\": \"Semi\"\n        }\n      }\n    },\n    {\n      \"ident\": \"ImplItemFn\",\n      \"features\": {\n        \"any\": [\n          \"full\"\n        ]\n      },\n      \"fields\": {\n        \"attrs\": {\n          \"vec\": {\n            \"syn\": \"Attribute\"\n          }\n        },\n        \"vis\": {\n          \"syn\": \"Visibility\"\n        },\n        \"defaultness\": {\n          \"option\": {\n            \"token\": \"Default\"\n          }\n        },\n        \"sig\": {\n          \"syn\": \"Signature\"\n        },\n        \"block\": {\n          \"syn\": \"Block\"\n        }\n      }\n    },\n    {\n      \"ident\": \"ImplItemMacro\",\n      \"features\": {\n        \"any\": [\n          \"full\"\n        ]\n      },\n      \"fields\": {\n        \"attrs\": {\n          \"vec\": {\n            \"syn\": \"Attribute\"\n          }\n        },\n        \"mac\": {\n          \"syn\": \"Macro\"\n        },\n        \"semi_token\": {\n          \"option\": {\n            \"token\": \"Semi\"\n          }\n        }\n      }\n    },\n    {\n      \"ident\": \"ImplItemType\",\n      \"features\": {\n        \"any\": [\n          \"full\"\n        ]\n      },\n      \"fields\": {\n        \"attrs\": {\n          \"vec\": {\n            \"syn\": \"Attribute\"\n          }\n        },\n        \"vis\": {\n          \"syn\": \"Visibility\"\n        },\n        \"defaultness\": {\n          \"option\": {\n            \"token\": \"Default\"\n          }\n        },\n        \"type_token\": {\n          \"token\": \"Type\"\n        },\n        \"ident\": {\n          \"proc_macro2\": \"Ident\"\n        },\n        \"generics\": {\n          \"syn\": \"Generics\"\n        },\n        \"eq_token\": {\n          \"token\": \"Eq\"\n        },\n        \"ty\": {\n          \"syn\": \"Type\"\n        },\n        \"semi_token\": {\n          \"token\": \"Semi\"\n        }\n      }\n    },\n    {\n      \"ident\": \"ImplRestriction\",\n      \"features\": {\n        \"any\": [\n          \"full\"\n        ]\n      },\n      \"variants\": {},\n      \"exhaustive\": false\n    },\n    {\n      \"ident\": \"Index\",\n      \"features\": {\n        \"any\": [\n          \"derive\",\n          \"full\"\n        ]\n      },\n      \"fields\": {\n        \"index\": {\n          \"std\": \"u32\"\n        },\n        \"span\": {\n          \"proc_macro2\": \"Span\"\n        }\n      }\n    },\n    {\n      \"ident\": \"Item\",\n      \"features\": {\n        \"any\": [\n          \"full\"\n        ]\n      },\n      \"variants\": {\n        \"Const\": [\n          {\n            \"syn\": \"ItemConst\"\n          }\n        ],\n        \"Enum\": [\n          {\n            \"syn\": \"ItemEnum\"\n          }\n        ],\n        \"ExternCrate\": [\n          {\n            \"syn\": \"ItemExternCrate\"\n          }\n        ],\n        \"Fn\": [\n          {\n            \"syn\": \"ItemFn\"\n          }\n        ],\n        \"ForeignMod\": [\n          {\n            \"syn\": \"ItemForeignMod\"\n          }\n        ],\n        \"Impl\": [\n          {\n            \"syn\": \"ItemImpl\"\n          }\n        ],\n        \"Macro\": [\n          {\n            \"syn\": \"ItemMacro\"\n          }\n        ],\n        \"Mod\": [\n          {\n            \"syn\": \"ItemMod\"\n          }\n        ],\n        \"Static\": [\n          {\n            \"syn\": \"ItemStatic\"\n          }\n        ],\n        \"Struct\": [\n          {\n            \"syn\": \"ItemStruct\"\n          }\n        ],\n        \"Trait\": [\n          {\n            \"syn\": \"ItemTrait\"\n          }\n        ],\n        \"TraitAlias\": [\n          {\n            \"syn\": \"ItemTraitAlias\"\n          }\n        ],\n        \"Type\": [\n          {\n            \"syn\": \"ItemType\"\n          }\n        ],\n        \"Union\": [\n          {\n            \"syn\": \"ItemUnion\"\n          }\n        ],\n        \"Use\": [\n          {\n            \"syn\": \"ItemUse\"\n          }\n        ],\n        \"Verbatim\": [\n          {\n            \"proc_macro2\": \"TokenStream\"\n          }\n        ]\n      },\n      \"exhaustive\": false\n    },\n    {\n      \"ident\": \"ItemConst\",\n      \"features\": {\n        \"any\": [\n          \"full\"\n        ]\n      },\n      \"fields\": {\n        \"attrs\": {\n          \"vec\": {\n            \"syn\": \"Attribute\"\n          }\n        },\n        \"vis\": {\n          \"syn\": \"Visibility\"\n        },\n        \"const_token\": {\n          \"token\": \"Const\"\n        },\n        \"ident\": {\n          \"proc_macro2\": \"Ident\"\n        },\n        \"generics\": {\n          \"syn\": \"Generics\"\n        },\n        \"colon_token\": {\n          \"token\": \"Colon\"\n        },\n        \"ty\": {\n          \"box\": {\n            \"syn\": \"Type\"\n          }\n        },\n        \"eq_token\": {\n          \"token\": \"Eq\"\n        },\n        \"expr\": {\n          \"box\": {\n            \"syn\": \"Expr\"\n          }\n        },\n        \"semi_token\": {\n          \"token\": \"Semi\"\n        }\n      }\n    },\n    {\n      \"ident\": \"ItemEnum\",\n      \"features\": {\n        \"any\": [\n          \"full\"\n        ]\n      },\n      \"fields\": {\n        \"attrs\": {\n          \"vec\": {\n            \"syn\": \"Attribute\"\n          }\n        },\n        \"vis\": {\n          \"syn\": \"Visibility\"\n        },\n        \"enum_token\": {\n          \"token\": \"Enum\"\n        },\n        \"ident\": {\n          \"proc_macro2\": \"Ident\"\n        },\n        \"generics\": {\n          \"syn\": \"Generics\"\n        },\n        \"brace_token\": {\n          \"group\": \"Brace\"\n        },\n        \"variants\": {\n          \"punctuated\": {\n            \"element\": {\n              \"syn\": \"Variant\"\n            },\n            \"punct\": \"Comma\"\n          }\n        }\n      }\n    },\n    {\n      \"ident\": \"ItemExternCrate\",\n      \"features\": {\n        \"any\": [\n          \"full\"\n        ]\n      },\n      \"fields\": {\n        \"attrs\": {\n          \"vec\": {\n            \"syn\": \"Attribute\"\n          }\n        },\n        \"vis\": {\n          \"syn\": \"Visibility\"\n        },\n        \"extern_token\": {\n          \"token\": \"Extern\"\n        },\n        \"crate_token\": {\n          \"token\": \"Crate\"\n        },\n        \"ident\": {\n          \"proc_macro2\": \"Ident\"\n        },\n        \"rename\": {\n          \"option\": {\n            \"tuple\": [\n              {\n                \"token\": \"As\"\n              },\n              {\n                \"proc_macro2\": \"Ident\"\n              }\n            ]\n          }\n        },\n        \"semi_token\": {\n          \"token\": \"Semi\"\n        }\n      }\n    },\n    {\n      \"ident\": \"ItemFn\",\n      \"features\": {\n        \"any\": [\n          \"full\"\n        ]\n      },\n      \"fields\": {\n        \"attrs\": {\n          \"vec\": {\n            \"syn\": \"Attribute\"\n          }\n        },\n        \"vis\": {\n          \"syn\": \"Visibility\"\n        },\n        \"sig\": {\n          \"syn\": \"Signature\"\n        },\n        \"block\": {\n          \"box\": {\n            \"syn\": \"Block\"\n          }\n        }\n      }\n    },\n    {\n      \"ident\": \"ItemForeignMod\",\n      \"features\": {\n        \"any\": [\n          \"full\"\n        ]\n      },\n      \"fields\": {\n        \"attrs\": {\n          \"vec\": {\n            \"syn\": \"Attribute\"\n          }\n        },\n        \"unsafety\": {\n          \"option\": {\n            \"token\": \"Unsafe\"\n          }\n        },\n        \"abi\": {\n          \"syn\": \"Abi\"\n        },\n        \"brace_token\": {\n          \"group\": \"Brace\"\n        },\n        \"items\": {\n          \"vec\": {\n            \"syn\": \"ForeignItem\"\n          }\n        }\n      }\n    },\n    {\n      \"ident\": \"ItemImpl\",\n      \"features\": {\n        \"any\": [\n          \"full\"\n        ]\n      },\n      \"fields\": {\n        \"attrs\": {\n          \"vec\": {\n            \"syn\": \"Attribute\"\n          }\n        },\n        \"defaultness\": {\n          \"option\": {\n            \"token\": \"Default\"\n          }\n        },\n        \"unsafety\": {\n          \"option\": {\n            \"token\": \"Unsafe\"\n          }\n        },\n        \"impl_token\": {\n          \"token\": \"Impl\"\n        },\n        \"generics\": {\n          \"syn\": \"Generics\"\n        },\n        \"trait_\": {\n          \"option\": {\n            \"tuple\": [\n              {\n                \"option\": {\n                  \"token\": \"Not\"\n                }\n              },\n              {\n                \"syn\": \"Path\"\n              },\n              {\n                \"token\": \"For\"\n              }\n            ]\n          }\n        },\n        \"self_ty\": {\n          \"box\": {\n            \"syn\": \"Type\"\n          }\n        },\n        \"brace_token\": {\n          \"group\": \"Brace\"\n        },\n        \"items\": {\n          \"vec\": {\n            \"syn\": \"ImplItem\"\n          }\n        }\n      }\n    },\n    {\n      \"ident\": \"ItemMacro\",\n      \"features\": {\n        \"any\": [\n          \"full\"\n        ]\n      },\n      \"fields\": {\n        \"attrs\": {\n          \"vec\": {\n            \"syn\": \"Attribute\"\n          }\n        },\n        \"ident\": {\n          \"option\": {\n            \"proc_macro2\": \"Ident\"\n          }\n        },\n        \"mac\": {\n          \"syn\": \"Macro\"\n        },\n        \"semi_token\": {\n          \"option\": {\n            \"token\": \"Semi\"\n          }\n        }\n      }\n    },\n    {\n      \"ident\": \"ItemMod\",\n      \"features\": {\n        \"any\": [\n          \"full\"\n        ]\n      },\n      \"fields\": {\n        \"attrs\": {\n          \"vec\": {\n            \"syn\": \"Attribute\"\n          }\n        },\n        \"vis\": {\n          \"syn\": \"Visibility\"\n        },\n        \"unsafety\": {\n          \"option\": {\n            \"token\": \"Unsafe\"\n          }\n        },\n        \"mod_token\": {\n          \"token\": \"Mod\"\n        },\n        \"ident\": {\n          \"proc_macro2\": \"Ident\"\n        },\n        \"content\": {\n          \"option\": {\n            \"tuple\": [\n              {\n                \"group\": \"Brace\"\n              },\n              {\n                \"vec\": {\n                  \"syn\": \"Item\"\n                }\n              }\n            ]\n          }\n        },\n        \"semi\": {\n          \"option\": {\n            \"token\": \"Semi\"\n          }\n        }\n      }\n    },\n    {\n      \"ident\": \"ItemStatic\",\n      \"features\": {\n        \"any\": [\n          \"full\"\n        ]\n      },\n      \"fields\": {\n        \"attrs\": {\n          \"vec\": {\n            \"syn\": \"Attribute\"\n          }\n        },\n        \"vis\": {\n          \"syn\": \"Visibility\"\n        },\n        \"static_token\": {\n          \"token\": \"Static\"\n        },\n        \"mutability\": {\n          \"syn\": \"StaticMutability\"\n        },\n        \"ident\": {\n          \"proc_macro2\": \"Ident\"\n        },\n        \"colon_token\": {\n          \"token\": \"Colon\"\n        },\n        \"ty\": {\n          \"box\": {\n            \"syn\": \"Type\"\n          }\n        },\n        \"eq_token\": {\n          \"token\": \"Eq\"\n        },\n        \"expr\": {\n          \"box\": {\n            \"syn\": \"Expr\"\n          }\n        },\n        \"semi_token\": {\n          \"token\": \"Semi\"\n        }\n      }\n    },\n    {\n      \"ident\": \"ItemStruct\",\n      \"features\": {\n        \"any\": [\n          \"full\"\n        ]\n      },\n      \"fields\": {\n        \"attrs\": {\n          \"vec\": {\n            \"syn\": \"Attribute\"\n          }\n        },\n        \"vis\": {\n          \"syn\": \"Visibility\"\n        },\n        \"struct_token\": {\n          \"token\": \"Struct\"\n        },\n        \"ident\": {\n          \"proc_macro2\": \"Ident\"\n        },\n        \"generics\": {\n          \"syn\": \"Generics\"\n        },\n        \"fields\": {\n          \"syn\": \"Fields\"\n        },\n        \"semi_token\": {\n          \"option\": {\n            \"token\": \"Semi\"\n          }\n        }\n      }\n    },\n    {\n      \"ident\": \"ItemTrait\",\n      \"features\": {\n        \"any\": [\n          \"full\"\n        ]\n      },\n      \"fields\": {\n        \"attrs\": {\n          \"vec\": {\n            \"syn\": \"Attribute\"\n          }\n        },\n        \"vis\": {\n          \"syn\": \"Visibility\"\n        },\n        \"unsafety\": {\n          \"option\": {\n            \"token\": \"Unsafe\"\n          }\n        },\n        \"auto_token\": {\n          \"option\": {\n            \"token\": \"Auto\"\n          }\n        },\n        \"restriction\": {\n          \"option\": {\n            \"syn\": \"ImplRestriction\"\n          }\n        },\n        \"trait_token\": {\n          \"token\": \"Trait\"\n        },\n        \"ident\": {\n          \"proc_macro2\": \"Ident\"\n        },\n        \"generics\": {\n          \"syn\": \"Generics\"\n        },\n        \"colon_token\": {\n          \"option\": {\n            \"token\": \"Colon\"\n          }\n        },\n        \"supertraits\": {\n          \"punctuated\": {\n            \"element\": {\n              \"syn\": \"TypeParamBound\"\n            },\n            \"punct\": \"Plus\"\n          }\n        },\n        \"brace_token\": {\n          \"group\": \"Brace\"\n        },\n        \"items\": {\n          \"vec\": {\n            \"syn\": \"TraitItem\"\n          }\n        }\n      }\n    },\n    {\n      \"ident\": \"ItemTraitAlias\",\n      \"features\": {\n        \"any\": [\n          \"full\"\n        ]\n      },\n      \"fields\": {\n        \"attrs\": {\n          \"vec\": {\n            \"syn\": \"Attribute\"\n          }\n        },\n        \"vis\": {\n          \"syn\": \"Visibility\"\n        },\n        \"trait_token\": {\n          \"token\": \"Trait\"\n        },\n        \"ident\": {\n          \"proc_macro2\": \"Ident\"\n        },\n        \"generics\": {\n          \"syn\": \"Generics\"\n        },\n        \"eq_token\": {\n          \"token\": \"Eq\"\n        },\n        \"bounds\": {\n          \"punctuated\": {\n            \"element\": {\n              \"syn\": \"TypeParamBound\"\n            },\n            \"punct\": \"Plus\"\n          }\n        },\n        \"semi_token\": {\n          \"token\": \"Semi\"\n        }\n      }\n    },\n    {\n      \"ident\": \"ItemType\",\n      \"features\": {\n        \"any\": [\n          \"full\"\n        ]\n      },\n      \"fields\": {\n        \"attrs\": {\n          \"vec\": {\n            \"syn\": \"Attribute\"\n          }\n        },\n        \"vis\": {\n          \"syn\": \"Visibility\"\n        },\n        \"type_token\": {\n          \"token\": \"Type\"\n        },\n        \"ident\": {\n          \"proc_macro2\": \"Ident\"\n        },\n        \"generics\": {\n          \"syn\": \"Generics\"\n        },\n        \"eq_token\": {\n          \"token\": \"Eq\"\n        },\n        \"ty\": {\n          \"box\": {\n            \"syn\": \"Type\"\n          }\n        },\n        \"semi_token\": {\n          \"token\": \"Semi\"\n        }\n      }\n    },\n    {\n      \"ident\": \"ItemUnion\",\n      \"features\": {\n        \"any\": [\n          \"full\"\n        ]\n      },\n      \"fields\": {\n        \"attrs\": {\n          \"vec\": {\n            \"syn\": \"Attribute\"\n          }\n        },\n        \"vis\": {\n          \"syn\": \"Visibility\"\n        },\n        \"union_token\": {\n          \"token\": \"Union\"\n        },\n        \"ident\": {\n          \"proc_macro2\": \"Ident\"\n        },\n        \"generics\": {\n          \"syn\": \"Generics\"\n        },\n        \"fields\": {\n          \"syn\": \"FieldsNamed\"\n        }\n      }\n    },\n    {\n      \"ident\": \"ItemUse\",\n      \"features\": {\n        \"any\": [\n          \"full\"\n        ]\n      },\n      \"fields\": {\n        \"attrs\": {\n          \"vec\": {\n            \"syn\": \"Attribute\"\n          }\n        },\n        \"vis\": {\n          \"syn\": \"Visibility\"\n        },\n        \"use_token\": {\n          \"token\": \"Use\"\n        },\n        \"leading_colon\": {\n          \"option\": {\n            \"token\": \"PathSep\"\n          }\n        },\n        \"tree\": {\n          \"syn\": \"UseTree\"\n        },\n        \"semi_token\": {\n          \"token\": \"Semi\"\n        }\n      }\n    },\n    {\n      \"ident\": \"Label\",\n      \"features\": {\n        \"any\": [\n          \"full\"\n        ]\n      },\n      \"fields\": {\n        \"name\": {\n          \"syn\": \"Lifetime\"\n        },\n        \"colon_token\": {\n          \"token\": \"Colon\"\n        }\n      }\n    },\n    {\n      \"ident\": \"Lifetime\",\n      \"features\": {\n        \"any\": []\n      },\n      \"fields\": {\n        \"apostrophe\": {\n          \"proc_macro2\": \"Span\"\n        },\n        \"ident\": {\n          \"proc_macro2\": \"Ident\"\n        }\n      }\n    },\n    {\n      \"ident\": \"LifetimeParam\",\n      \"features\": {\n        \"any\": [\n          \"derive\",\n          \"full\"\n        ]\n      },\n      \"fields\": {\n        \"attrs\": {\n          \"vec\": {\n            \"syn\": \"Attribute\"\n          }\n        },\n        \"lifetime\": {\n          \"syn\": \"Lifetime\"\n        },\n        \"colon_token\": {\n          \"option\": {\n            \"token\": \"Colon\"\n          }\n        },\n        \"bounds\": {\n          \"punctuated\": {\n            \"element\": {\n              \"syn\": \"Lifetime\"\n            },\n            \"punct\": \"Plus\"\n          }\n        }\n      }\n    },\n    {\n      \"ident\": \"Lit\",\n      \"features\": {\n        \"any\": []\n      },\n      \"variants\": {\n        \"Str\": [\n          {\n            \"syn\": \"LitStr\"\n          }\n        ],\n        \"ByteStr\": [\n          {\n            \"syn\": \"LitByteStr\"\n          }\n        ],\n        \"CStr\": [\n          {\n            \"syn\": \"LitCStr\"\n          }\n        ],\n        \"Byte\": [\n          {\n            \"syn\": \"LitByte\"\n          }\n        ],\n        \"Char\": [\n          {\n            \"syn\": \"LitChar\"\n          }\n        ],\n        \"Int\": [\n          {\n            \"syn\": \"LitInt\"\n          }\n        ],\n        \"Float\": [\n          {\n            \"syn\": \"LitFloat\"\n          }\n        ],\n        \"Bool\": [\n          {\n            \"syn\": \"LitBool\"\n          }\n        ],\n        \"Verbatim\": [\n          {\n            \"proc_macro2\": \"Literal\"\n          }\n        ]\n      },\n      \"exhaustive\": false\n    },\n    {\n      \"ident\": \"LitBool\",\n      \"features\": {\n        \"any\": []\n      },\n      \"fields\": {\n        \"value\": {\n          \"std\": \"bool\"\n        },\n        \"span\": {\n          \"proc_macro2\": \"Span\"\n        }\n      }\n    },\n    {\n      \"ident\": \"LitByte\",\n      \"features\": {\n        \"any\": []\n      }\n    },\n    {\n      \"ident\": \"LitByteStr\",\n      \"features\": {\n        \"any\": []\n      }\n    },\n    {\n      \"ident\": \"LitCStr\",\n      \"features\": {\n        \"any\": []\n      }\n    },\n    {\n      \"ident\": \"LitChar\",\n      \"features\": {\n        \"any\": []\n      }\n    },\n    {\n      \"ident\": \"LitFloat\",\n      \"features\": {\n        \"any\": []\n      }\n    },\n    {\n      \"ident\": \"LitInt\",\n      \"features\": {\n        \"any\": []\n      }\n    },\n    {\n      \"ident\": \"LitStr\",\n      \"features\": {\n        \"any\": []\n      }\n    },\n    {\n      \"ident\": \"Local\",\n      \"features\": {\n        \"any\": [\n          \"full\"\n        ]\n      },\n      \"fields\": {\n        \"attrs\": {\n          \"vec\": {\n            \"syn\": \"Attribute\"\n          }\n        },\n        \"let_token\": {\n          \"token\": \"Let\"\n        },\n        \"pat\": {\n          \"syn\": \"Pat\"\n        },\n        \"init\": {\n          \"option\": {\n            \"syn\": \"LocalInit\"\n          }\n        },\n        \"semi_token\": {\n          \"token\": \"Semi\"\n        }\n      }\n    },\n    {\n      \"ident\": \"LocalInit\",\n      \"features\": {\n        \"any\": [\n          \"full\"\n        ]\n      },\n      \"fields\": {\n        \"eq_token\": {\n          \"token\": \"Eq\"\n        },\n        \"expr\": {\n          \"box\": {\n            \"syn\": \"Expr\"\n          }\n        },\n        \"diverge\": {\n          \"option\": {\n            \"tuple\": [\n              {\n                \"token\": \"Else\"\n              },\n              {\n                \"box\": {\n                  \"syn\": \"Expr\"\n                }\n              }\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"ident\": \"Macro\",\n      \"features\": {\n        \"any\": [\n          \"derive\",\n          \"full\"\n        ]\n      },\n      \"fields\": {\n        \"path\": {\n          \"syn\": \"Path\"\n        },\n        \"bang_token\": {\n          \"token\": \"Not\"\n        },\n        \"delimiter\": {\n          \"syn\": \"MacroDelimiter\"\n        },\n        \"tokens\": {\n          \"proc_macro2\": \"TokenStream\"\n        }\n      }\n    },\n    {\n      \"ident\": \"MacroDelimiter\",\n      \"features\": {\n        \"any\": [\n          \"derive\",\n          \"full\"\n        ]\n      },\n      \"variants\": {\n        \"Paren\": [\n          {\n            \"group\": \"Paren\"\n          }\n        ],\n        \"Brace\": [\n          {\n            \"group\": \"Brace\"\n          }\n        ],\n        \"Bracket\": [\n          {\n            \"group\": \"Bracket\"\n          }\n        ]\n      }\n    },\n    {\n      \"ident\": \"Member\",\n      \"features\": {\n        \"any\": [\n          \"derive\",\n          \"full\"\n        ]\n      },\n      \"variants\": {\n        \"Named\": [\n          {\n            \"proc_macro2\": \"Ident\"\n          }\n        ],\n        \"Unnamed\": [\n          {\n            \"syn\": \"Index\"\n          }\n        ]\n      }\n    },\n    {\n      \"ident\": \"Meta\",\n      \"features\": {\n        \"any\": [\n          \"derive\",\n          \"full\"\n        ]\n      },\n      \"variants\": {\n        \"Path\": [\n          {\n            \"syn\": \"Path\"\n          }\n        ],\n        \"List\": [\n          {\n            \"syn\": \"MetaList\"\n          }\n        ],\n        \"NameValue\": [\n          {\n            \"syn\": \"MetaNameValue\"\n          }\n        ]\n      }\n    },\n    {\n      \"ident\": \"MetaList\",\n      \"features\": {\n        \"any\": [\n          \"derive\",\n          \"full\"\n        ]\n      },\n      \"fields\": {\n        \"path\": {\n          \"syn\": \"Path\"\n        },\n        \"delimiter\": {\n          \"syn\": \"MacroDelimiter\"\n        },\n        \"tokens\": {\n          \"proc_macro2\": \"TokenStream\"\n        }\n      }\n    },\n    {\n      \"ident\": \"MetaNameValue\",\n      \"features\": {\n        \"any\": [\n          \"derive\",\n          \"full\"\n        ]\n      },\n      \"fields\": {\n        \"path\": {\n          \"syn\": \"Path\"\n        },\n        \"eq_token\": {\n          \"token\": \"Eq\"\n        },\n        \"value\": {\n          \"syn\": \"Expr\"\n        }\n      }\n    },\n    {\n      \"ident\": \"ParenthesizedGenericArguments\",\n      \"features\": {\n        \"any\": [\n          \"derive\",\n          \"full\"\n        ]\n      },\n      \"fields\": {\n        \"paren_token\": {\n          \"group\": \"Paren\"\n        },\n        \"inputs\": {\n          \"punctuated\": {\n            \"element\": {\n              \"syn\": \"Type\"\n            },\n            \"punct\": \"Comma\"\n          }\n        },\n        \"output\": {\n          \"syn\": \"ReturnType\"\n        }\n      }\n    },\n    {\n      \"ident\": \"Pat\",\n      \"features\": {\n        \"any\": [\n          \"full\"\n        ]\n      },\n      \"variants\": {\n        \"Const\": [\n          {\n            \"syn\": \"ExprConst\"\n          }\n        ],\n        \"Ident\": [\n          {\n            \"syn\": \"PatIdent\"\n          }\n        ],\n        \"Lit\": [\n          {\n            \"syn\": \"ExprLit\"\n          }\n        ],\n        \"Macro\": [\n          {\n            \"syn\": \"ExprMacro\"\n          }\n        ],\n        \"Or\": [\n          {\n            \"syn\": \"PatOr\"\n          }\n        ],\n        \"Paren\": [\n          {\n            \"syn\": \"PatParen\"\n          }\n        ],\n        \"Path\": [\n          {\n            \"syn\": \"ExprPath\"\n          }\n        ],\n        \"Range\": [\n          {\n            \"syn\": \"ExprRange\"\n          }\n        ],\n        \"Reference\": [\n          {\n            \"syn\": \"PatReference\"\n          }\n        ],\n        \"Rest\": [\n          {\n            \"syn\": \"PatRest\"\n          }\n        ],\n        \"Slice\": [\n          {\n            \"syn\": \"PatSlice\"\n          }\n        ],\n        \"Struct\": [\n          {\n            \"syn\": \"PatStruct\"\n          }\n        ],\n        \"Tuple\": [\n          {\n            \"syn\": \"PatTuple\"\n          }\n        ],\n        \"TupleStruct\": [\n          {\n            \"syn\": \"PatTupleStruct\"\n          }\n        ],\n        \"Type\": [\n          {\n            \"syn\": \"PatType\"\n          }\n        ],\n        \"Verbatim\": [\n          {\n            \"proc_macro2\": \"TokenStream\"\n          }\n        ],\n        \"Wild\": [\n          {\n            \"syn\": \"PatWild\"\n          }\n        ]\n      },\n      \"exhaustive\": false\n    },\n    {\n      \"ident\": \"PatIdent\",\n      \"features\": {\n        \"any\": [\n          \"full\"\n        ]\n      },\n      \"fields\": {\n        \"attrs\": {\n          \"vec\": {\n            \"syn\": \"Attribute\"\n          }\n        },\n        \"by_ref\": {\n          \"option\": {\n            \"token\": \"Ref\"\n          }\n        },\n        \"mutability\": {\n          \"option\": {\n            \"token\": \"Mut\"\n          }\n        },\n        \"ident\": {\n          \"proc_macro2\": \"Ident\"\n        },\n        \"subpat\": {\n          \"option\": {\n            \"tuple\": [\n              {\n                \"token\": \"At\"\n              },\n              {\n                \"box\": {\n                  \"syn\": \"Pat\"\n                }\n              }\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"ident\": \"PatOr\",\n      \"features\": {\n        \"any\": [\n          \"full\"\n        ]\n      },\n      \"fields\": {\n        \"attrs\": {\n          \"vec\": {\n            \"syn\": \"Attribute\"\n          }\n        },\n        \"leading_vert\": {\n          \"option\": {\n            \"token\": \"Or\"\n          }\n        },\n        \"cases\": {\n          \"punctuated\": {\n            \"element\": {\n              \"syn\": \"Pat\"\n            },\n            \"punct\": \"Or\"\n          }\n        }\n      }\n    },\n    {\n      \"ident\": \"PatParen\",\n      \"features\": {\n        \"any\": [\n          \"full\"\n        ]\n      },\n      \"fields\": {\n        \"attrs\": {\n          \"vec\": {\n            \"syn\": \"Attribute\"\n          }\n        },\n        \"paren_token\": {\n          \"group\": \"Paren\"\n        },\n        \"pat\": {\n          \"box\": {\n            \"syn\": \"Pat\"\n          }\n        }\n      }\n    },\n    {\n      \"ident\": \"PatReference\",\n      \"features\": {\n        \"any\": [\n          \"full\"\n        ]\n      },\n      \"fields\": {\n        \"attrs\": {\n          \"vec\": {\n            \"syn\": \"Attribute\"\n          }\n        },\n        \"and_token\": {\n          \"token\": \"And\"\n        },\n        \"mutability\": {\n          \"option\": {\n            \"token\": \"Mut\"\n          }\n        },\n        \"pat\": {\n          \"box\": {\n            \"syn\": \"Pat\"\n          }\n        }\n      }\n    },\n    {\n      \"ident\": \"PatRest\",\n      \"features\": {\n        \"any\": [\n          \"full\"\n        ]\n      },\n      \"fields\": {\n        \"attrs\": {\n          \"vec\": {\n            \"syn\": \"Attribute\"\n          }\n        },\n        \"dot2_token\": {\n          \"token\": \"DotDot\"\n        }\n      }\n    },\n    {\n      \"ident\": \"PatSlice\",\n      \"features\": {\n        \"any\": [\n          \"full\"\n        ]\n      },\n      \"fields\": {\n        \"attrs\": {\n          \"vec\": {\n            \"syn\": \"Attribute\"\n          }\n        },\n        \"bracket_token\": {\n          \"group\": \"Bracket\"\n        },\n        \"elems\": {\n          \"punctuated\": {\n            \"element\": {\n              \"syn\": \"Pat\"\n            },\n            \"punct\": \"Comma\"\n          }\n        }\n      }\n    },\n    {\n      \"ident\": \"PatStruct\",\n      \"features\": {\n        \"any\": [\n          \"full\"\n        ]\n      },\n      \"fields\": {\n        \"attrs\": {\n          \"vec\": {\n            \"syn\": \"Attribute\"\n          }\n        },\n        \"qself\": {\n          \"option\": {\n            \"syn\": \"QSelf\"\n          }\n        },\n        \"path\": {\n          \"syn\": \"Path\"\n        },\n        \"brace_token\": {\n          \"group\": \"Brace\"\n        },\n        \"fields\": {\n          \"punctuated\": {\n            \"element\": {\n              \"syn\": \"FieldPat\"\n            },\n            \"punct\": \"Comma\"\n          }\n        },\n        \"rest\": {\n          \"option\": {\n            \"syn\": \"PatRest\"\n          }\n        }\n      }\n    },\n    {\n      \"ident\": \"PatTuple\",\n      \"features\": {\n        \"any\": [\n          \"full\"\n        ]\n      },\n      \"fields\": {\n        \"attrs\": {\n          \"vec\": {\n            \"syn\": \"Attribute\"\n          }\n        },\n        \"paren_token\": {\n          \"group\": \"Paren\"\n        },\n        \"elems\": {\n          \"punctuated\": {\n            \"element\": {\n              \"syn\": \"Pat\"\n            },\n            \"punct\": \"Comma\"\n          }\n        }\n      }\n    },\n    {\n      \"ident\": \"PatTupleStruct\",\n      \"features\": {\n        \"any\": [\n          \"full\"\n        ]\n      },\n      \"fields\": {\n        \"attrs\": {\n          \"vec\": {\n            \"syn\": \"Attribute\"\n          }\n        },\n        \"qself\": {\n          \"option\": {\n            \"syn\": \"QSelf\"\n          }\n        },\n        \"path\": {\n          \"syn\": \"Path\"\n        },\n        \"paren_token\": {\n          \"group\": \"Paren\"\n        },\n        \"elems\": {\n          \"punctuated\": {\n            \"element\": {\n              \"syn\": \"Pat\"\n            },\n            \"punct\": \"Comma\"\n          }\n        }\n      }\n    },\n    {\n      \"ident\": \"PatType\",\n      \"features\": {\n        \"any\": [\n          \"full\"\n        ]\n      },\n      \"fields\": {\n        \"attrs\": {\n          \"vec\": {\n            \"syn\": \"Attribute\"\n          }\n        },\n        \"pat\": {\n          \"box\": {\n            \"syn\": \"Pat\"\n          }\n        },\n        \"colon_token\": {\n          \"token\": \"Colon\"\n        },\n        \"ty\": {\n          \"box\": {\n            \"syn\": \"Type\"\n          }\n        }\n      }\n    },\n    {\n      \"ident\": \"PatWild\",\n      \"features\": {\n        \"any\": [\n          \"full\"\n        ]\n      },\n      \"fields\": {\n        \"attrs\": {\n          \"vec\": {\n            \"syn\": \"Attribute\"\n          }\n        },\n        \"underscore_token\": {\n          \"token\": \"Underscore\"\n        }\n      }\n    },\n    {\n      \"ident\": \"Path\",\n      \"features\": {\n        \"any\": [\n          \"derive\",\n          \"full\"\n        ]\n      },\n      \"fields\": {\n        \"leading_colon\": {\n          \"option\": {\n            \"token\": \"PathSep\"\n          }\n        },\n        \"segments\": {\n          \"punctuated\": {\n            \"element\": {\n              \"syn\": \"PathSegment\"\n            },\n            \"punct\": \"PathSep\"\n          }\n        }\n      }\n    },\n    {\n      \"ident\": \"PathArguments\",\n      \"features\": {\n        \"any\": [\n          \"derive\",\n          \"full\"\n        ]\n      },\n      \"variants\": {\n        \"None\": [],\n        \"AngleBracketed\": [\n          {\n            \"syn\": \"AngleBracketedGenericArguments\"\n          }\n        ],\n        \"Parenthesized\": [\n          {\n            \"syn\": \"ParenthesizedGenericArguments\"\n          }\n        ]\n      }\n    },\n    {\n      \"ident\": \"PathSegment\",\n      \"features\": {\n        \"any\": [\n          \"derive\",\n          \"full\"\n        ]\n      },\n      \"fields\": {\n        \"ident\": {\n          \"proc_macro2\": \"Ident\"\n        },\n        \"arguments\": {\n          \"syn\": \"PathArguments\"\n        }\n      }\n    },\n    {\n      \"ident\": \"PointerMutability\",\n      \"features\": {\n        \"any\": [\n          \"full\"\n        ]\n      },\n      \"variants\": {\n        \"Const\": [\n          {\n            \"token\": \"Const\"\n          }\n        ],\n        \"Mut\": [\n          {\n            \"token\": \"Mut\"\n          }\n        ]\n      }\n    },\n    {\n      \"ident\": \"PreciseCapture\",\n      \"features\": {\n        \"any\": [\n          \"full\"\n        ]\n      },\n      \"fields\": {\n        \"use_token\": {\n          \"token\": \"Use\"\n        },\n        \"lt_token\": {\n          \"token\": \"Lt\"\n        },\n        \"params\": {\n          \"punctuated\": {\n            \"element\": {\n              \"syn\": \"CapturedParam\"\n            },\n            \"punct\": \"Comma\"\n          }\n        },\n        \"gt_token\": {\n          \"token\": \"Gt\"\n        }\n      }\n    },\n    {\n      \"ident\": \"PredicateLifetime\",\n      \"features\": {\n        \"any\": [\n          \"derive\",\n          \"full\"\n        ]\n      },\n      \"fields\": {\n        \"lifetime\": {\n          \"syn\": \"Lifetime\"\n        },\n        \"colon_token\": {\n          \"token\": \"Colon\"\n        },\n        \"bounds\": {\n          \"punctuated\": {\n            \"element\": {\n              \"syn\": \"Lifetime\"\n            },\n            \"punct\": \"Plus\"\n          }\n        }\n      }\n    },\n    {\n      \"ident\": \"PredicateType\",\n      \"features\": {\n        \"any\": [\n          \"derive\",\n          \"full\"\n        ]\n      },\n      \"fields\": {\n        \"lifetimes\": {\n          \"option\": {\n            \"syn\": \"BoundLifetimes\"\n          }\n        },\n        \"bounded_ty\": {\n          \"syn\": \"Type\"\n        },\n        \"colon_token\": {\n          \"token\": \"Colon\"\n        },\n        \"bounds\": {\n          \"punctuated\": {\n            \"element\": {\n              \"syn\": \"TypeParamBound\"\n            },\n            \"punct\": \"Plus\"\n          }\n        }\n      }\n    },\n    {\n      \"ident\": \"QSelf\",\n      \"features\": {\n        \"any\": [\n          \"derive\",\n          \"full\"\n        ]\n      },\n      \"fields\": {\n        \"lt_token\": {\n          \"token\": \"Lt\"\n        },\n        \"ty\": {\n          \"box\": {\n            \"syn\": \"Type\"\n          }\n        },\n        \"position\": {\n          \"std\": \"usize\"\n        },\n        \"as_token\": {\n          \"option\": {\n            \"token\": \"As\"\n          }\n        },\n        \"gt_token\": {\n          \"token\": \"Gt\"\n        }\n      }\n    },\n    {\n      \"ident\": \"RangeLimits\",\n      \"features\": {\n        \"any\": [\n          \"full\"\n        ]\n      },\n      \"variants\": {\n        \"HalfOpen\": [\n          {\n            \"token\": \"DotDot\"\n          }\n        ],\n        \"Closed\": [\n          {\n            \"token\": \"DotDotEq\"\n          }\n        ]\n      }\n    },\n    {\n      \"ident\": \"Receiver\",\n      \"features\": {\n        \"any\": [\n          \"full\"\n        ]\n      },\n      \"fields\": {\n        \"attrs\": {\n          \"vec\": {\n            \"syn\": \"Attribute\"\n          }\n        },\n        \"reference\": {\n          \"option\": {\n            \"tuple\": [\n              {\n                \"token\": \"And\"\n              },\n              {\n                \"option\": {\n                  \"syn\": \"Lifetime\"\n                }\n              }\n            ]\n          }\n        },\n        \"mutability\": {\n          \"option\": {\n            \"token\": \"Mut\"\n          }\n        },\n        \"self_token\": {\n          \"token\": \"SelfValue\"\n        },\n        \"colon_token\": {\n          \"option\": {\n            \"token\": \"Colon\"\n          }\n        },\n        \"ty\": {\n          \"box\": {\n            \"syn\": \"Type\"\n          }\n        }\n      }\n    },\n    {\n      \"ident\": \"ReturnType\",\n      \"features\": {\n        \"any\": [\n          \"derive\",\n          \"full\"\n        ]\n      },\n      \"variants\": {\n        \"Default\": [],\n        \"Type\": [\n          {\n            \"token\": \"RArrow\"\n          },\n          {\n            \"box\": {\n              \"syn\": \"Type\"\n            }\n          }\n        ]\n      }\n    },\n    {\n      \"ident\": \"Signature\",\n      \"features\": {\n        \"any\": [\n          \"full\"\n        ]\n      },\n      \"fields\": {\n        \"constness\": {\n          \"option\": {\n            \"token\": \"Const\"\n          }\n        },\n        \"asyncness\": {\n          \"option\": {\n            \"token\": \"Async\"\n          }\n        },\n        \"unsafety\": {\n          \"option\": {\n            \"token\": \"Unsafe\"\n          }\n        },\n        \"abi\": {\n          \"option\": {\n            \"syn\": \"Abi\"\n          }\n        },\n        \"fn_token\": {\n          \"token\": \"Fn\"\n        },\n        \"ident\": {\n          \"proc_macro2\": \"Ident\"\n        },\n        \"generics\": {\n          \"syn\": \"Generics\"\n        },\n        \"paren_token\": {\n          \"group\": \"Paren\"\n        },\n        \"inputs\": {\n          \"punctuated\": {\n            \"element\": {\n              \"syn\": \"FnArg\"\n            },\n            \"punct\": \"Comma\"\n          }\n        },\n        \"variadic\": {\n          \"option\": {\n            \"syn\": \"Variadic\"\n          }\n        },\n        \"output\": {\n          \"syn\": \"ReturnType\"\n        }\n      }\n    },\n    {\n      \"ident\": \"StaticMutability\",\n      \"features\": {\n        \"any\": [\n          \"full\"\n        ]\n      },\n      \"variants\": {\n        \"Mut\": [\n          {\n            \"token\": \"Mut\"\n          }\n        ],\n        \"None\": []\n      },\n      \"exhaustive\": false\n    },\n    {\n      \"ident\": \"Stmt\",\n      \"features\": {\n        \"any\": [\n          \"full\"\n        ]\n      },\n      \"variants\": {\n        \"Local\": [\n          {\n            \"syn\": \"Local\"\n          }\n        ],\n        \"Item\": [\n          {\n            \"syn\": \"Item\"\n          }\n        ],\n        \"Expr\": [\n          {\n            \"syn\": \"Expr\"\n          },\n          {\n            \"option\": {\n              \"token\": \"Semi\"\n            }\n          }\n        ],\n        \"Macro\": [\n          {\n            \"syn\": \"StmtMacro\"\n          }\n        ]\n      }\n    },\n    {\n      \"ident\": \"StmtMacro\",\n      \"features\": {\n        \"any\": [\n          \"full\"\n        ]\n      },\n      \"fields\": {\n        \"attrs\": {\n          \"vec\": {\n            \"syn\": \"Attribute\"\n          }\n        },\n        \"mac\": {\n          \"syn\": \"Macro\"\n        },\n        \"semi_token\": {\n          \"option\": {\n            \"token\": \"Semi\"\n          }\n        }\n      }\n    },\n    {\n      \"ident\": \"TraitBound\",\n      \"features\": {\n        \"any\": [\n          \"derive\",\n          \"full\"\n        ]\n      },\n      \"fields\": {\n        \"paren_token\": {\n          \"option\": {\n            \"group\": \"Paren\"\n          }\n        },\n        \"modifier\": {\n          \"syn\": \"TraitBoundModifier\"\n        },\n        \"lifetimes\": {\n          \"option\": {\n            \"syn\": \"BoundLifetimes\"\n          }\n        },\n        \"path\": {\n          \"syn\": \"Path\"\n        }\n      }\n    },\n    {\n      \"ident\": \"TraitBoundModifier\",\n      \"features\": {\n        \"any\": [\n          \"derive\",\n          \"full\"\n        ]\n      },\n      \"variants\": {\n        \"None\": [],\n        \"Maybe\": [\n          {\n            \"token\": \"Question\"\n          }\n        ]\n      }\n    },\n    {\n      \"ident\": \"TraitItem\",\n      \"features\": {\n        \"any\": [\n          \"full\"\n        ]\n      },\n      \"variants\": {\n        \"Const\": [\n          {\n            \"syn\": \"TraitItemConst\"\n          }\n        ],\n        \"Fn\": [\n          {\n            \"syn\": \"TraitItemFn\"\n          }\n        ],\n        \"Type\": [\n          {\n            \"syn\": \"TraitItemType\"\n          }\n        ],\n        \"Macro\": [\n          {\n            \"syn\": \"TraitItemMacro\"\n          }\n        ],\n        \"Verbatim\": [\n          {\n            \"proc_macro2\": \"TokenStream\"\n          }\n        ]\n      },\n      \"exhaustive\": false\n    },\n    {\n      \"ident\": \"TraitItemConst\",\n      \"features\": {\n        \"any\": [\n          \"full\"\n        ]\n      },\n      \"fields\": {\n        \"attrs\": {\n          \"vec\": {\n            \"syn\": \"Attribute\"\n          }\n        },\n        \"const_token\": {\n          \"token\": \"Const\"\n        },\n        \"ident\": {\n          \"proc_macro2\": \"Ident\"\n        },\n        \"generics\": {\n          \"syn\": \"Generics\"\n        },\n        \"colon_token\": {\n          \"token\": \"Colon\"\n        },\n        \"ty\": {\n          \"syn\": \"Type\"\n        },\n        \"default\": {\n          \"option\": {\n            \"tuple\": [\n              {\n                \"token\": \"Eq\"\n              },\n              {\n                \"syn\": \"Expr\"\n              }\n            ]\n          }\n        },\n        \"semi_token\": {\n          \"token\": \"Semi\"\n        }\n      }\n    },\n    {\n      \"ident\": \"TraitItemFn\",\n      \"features\": {\n        \"any\": [\n          \"full\"\n        ]\n      },\n      \"fields\": {\n        \"attrs\": {\n          \"vec\": {\n            \"syn\": \"Attribute\"\n          }\n        },\n        \"sig\": {\n          \"syn\": \"Signature\"\n        },\n        \"default\": {\n          \"option\": {\n            \"syn\": \"Block\"\n          }\n        },\n        \"semi_token\": {\n          \"option\": {\n            \"token\": \"Semi\"\n          }\n        }\n      }\n    },\n    {\n      \"ident\": \"TraitItemMacro\",\n      \"features\": {\n        \"any\": [\n          \"full\"\n        ]\n      },\n      \"fields\": {\n        \"attrs\": {\n          \"vec\": {\n            \"syn\": \"Attribute\"\n          }\n        },\n        \"mac\": {\n          \"syn\": \"Macro\"\n        },\n        \"semi_token\": {\n          \"option\": {\n            \"token\": \"Semi\"\n          }\n        }\n      }\n    },\n    {\n      \"ident\": \"TraitItemType\",\n      \"features\": {\n        \"any\": [\n          \"full\"\n        ]\n      },\n      \"fields\": {\n        \"attrs\": {\n          \"vec\": {\n            \"syn\": \"Attribute\"\n          }\n        },\n        \"type_token\": {\n          \"token\": \"Type\"\n        },\n        \"ident\": {\n          \"proc_macro2\": \"Ident\"\n        },\n        \"generics\": {\n          \"syn\": \"Generics\"\n        },\n        \"colon_token\": {\n          \"option\": {\n            \"token\": \"Colon\"\n          }\n        },\n        \"bounds\": {\n          \"punctuated\": {\n            \"element\": {\n              \"syn\": \"TypeParamBound\"\n            },\n            \"punct\": \"Plus\"\n          }\n        },\n        \"default\": {\n          \"option\": {\n            \"tuple\": [\n              {\n                \"token\": \"Eq\"\n              },\n              {\n                \"syn\": \"Type\"\n              }\n            ]\n          }\n        },\n        \"semi_token\": {\n          \"token\": \"Semi\"\n        }\n      }\n    },\n    {\n      \"ident\": \"Type\",\n      \"features\": {\n        \"any\": [\n          \"derive\",\n          \"full\"\n        ]\n      },\n      \"variants\": {\n        \"Array\": [\n          {\n            \"syn\": \"TypeArray\"\n          }\n        ],\n        \"BareFn\": [\n          {\n            \"syn\": \"TypeBareFn\"\n          }\n        ],\n        \"Group\": [\n          {\n            \"syn\": \"TypeGroup\"\n          }\n        ],\n        \"ImplTrait\": [\n          {\n            \"syn\": \"TypeImplTrait\"\n          }\n        ],\n        \"Infer\": [\n          {\n            \"syn\": \"TypeInfer\"\n          }\n        ],\n        \"Macro\": [\n          {\n            \"syn\": \"TypeMacro\"\n          }\n        ],\n        \"Never\": [\n          {\n            \"syn\": \"TypeNever\"\n          }\n        ],\n        \"Paren\": [\n          {\n            \"syn\": \"TypeParen\"\n          }\n        ],\n        \"Path\": [\n          {\n            \"syn\": \"TypePath\"\n          }\n        ],\n        \"Ptr\": [\n          {\n            \"syn\": \"TypePtr\"\n          }\n        ],\n        \"Reference\": [\n          {\n            \"syn\": \"TypeReference\"\n          }\n        ],\n        \"Slice\": [\n          {\n            \"syn\": \"TypeSlice\"\n          }\n        ],\n        \"TraitObject\": [\n          {\n            \"syn\": \"TypeTraitObject\"\n          }\n        ],\n        \"Tuple\": [\n          {\n            \"syn\": \"TypeTuple\"\n          }\n        ],\n        \"Verbatim\": [\n          {\n            \"proc_macro2\": \"TokenStream\"\n          }\n        ]\n      },\n      \"exhaustive\": false\n    },\n    {\n      \"ident\": \"TypeArray\",\n      \"features\": {\n        \"any\": [\n          \"derive\",\n          \"full\"\n        ]\n      },\n      \"fields\": {\n        \"bracket_token\": {\n          \"group\": \"Bracket\"\n        },\n        \"elem\": {\n          \"box\": {\n            \"syn\": \"Type\"\n          }\n        },\n        \"semi_token\": {\n          \"token\": \"Semi\"\n        },\n        \"len\": {\n          \"syn\": \"Expr\"\n        }\n      }\n    },\n    {\n      \"ident\": \"TypeBareFn\",\n      \"features\": {\n        \"any\": [\n          \"derive\",\n          \"full\"\n        ]\n      },\n      \"fields\": {\n        \"lifetimes\": {\n          \"option\": {\n            \"syn\": \"BoundLifetimes\"\n          }\n        },\n        \"unsafety\": {\n          \"option\": {\n            \"token\": \"Unsafe\"\n          }\n        },\n        \"abi\": {\n          \"option\": {\n            \"syn\": \"Abi\"\n          }\n        },\n        \"fn_token\": {\n          \"token\": \"Fn\"\n        },\n        \"paren_token\": {\n          \"group\": \"Paren\"\n        },\n        \"inputs\": {\n          \"punctuated\": {\n            \"element\": {\n              \"syn\": \"BareFnArg\"\n            },\n            \"punct\": \"Comma\"\n          }\n        },\n        \"variadic\": {\n          \"option\": {\n            \"syn\": \"BareVariadic\"\n          }\n        },\n        \"output\": {\n          \"syn\": \"ReturnType\"\n        }\n      }\n    },\n    {\n      \"ident\": \"TypeGroup\",\n      \"features\": {\n        \"any\": [\n          \"derive\",\n          \"full\"\n        ]\n      },\n      \"fields\": {\n        \"group_token\": {\n          \"group\": \"Group\"\n        },\n        \"elem\": {\n          \"box\": {\n            \"syn\": \"Type\"\n          }\n        }\n      }\n    },\n    {\n      \"ident\": \"TypeImplTrait\",\n      \"features\": {\n        \"any\": [\n          \"derive\",\n          \"full\"\n        ]\n      },\n      \"fields\": {\n        \"impl_token\": {\n          \"token\": \"Impl\"\n        },\n        \"bounds\": {\n          \"punctuated\": {\n            \"element\": {\n              \"syn\": \"TypeParamBound\"\n            },\n            \"punct\": \"Plus\"\n          }\n        }\n      }\n    },\n    {\n      \"ident\": \"TypeInfer\",\n      \"features\": {\n        \"any\": [\n          \"derive\",\n          \"full\"\n        ]\n      },\n      \"fields\": {\n        \"underscore_token\": {\n          \"token\": \"Underscore\"\n        }\n      }\n    },\n    {\n      \"ident\": \"TypeMacro\",\n      \"features\": {\n        \"any\": [\n          \"derive\",\n          \"full\"\n        ]\n      },\n      \"fields\": {\n        \"mac\": {\n          \"syn\": \"Macro\"\n        }\n      }\n    },\n    {\n      \"ident\": \"TypeNever\",\n      \"features\": {\n        \"any\": [\n          \"derive\",\n          \"full\"\n        ]\n      },\n      \"fields\": {\n        \"bang_token\": {\n          \"token\": \"Not\"\n        }\n      }\n    },\n    {\n      \"ident\": \"TypeParam\",\n      \"features\": {\n        \"any\": [\n          \"derive\",\n          \"full\"\n        ]\n      },\n      \"fields\": {\n        \"attrs\": {\n          \"vec\": {\n            \"syn\": \"Attribute\"\n          }\n        },\n        \"ident\": {\n          \"proc_macro2\": \"Ident\"\n        },\n        \"colon_token\": {\n          \"option\": {\n            \"token\": \"Colon\"\n          }\n        },\n        \"bounds\": {\n          \"punctuated\": {\n            \"element\": {\n              \"syn\": \"TypeParamBound\"\n            },\n            \"punct\": \"Plus\"\n          }\n        },\n        \"eq_token\": {\n          \"option\": {\n            \"token\": \"Eq\"\n          }\n        },\n        \"default\": {\n          \"option\": {\n            \"syn\": \"Type\"\n          }\n        }\n      }\n    },\n    {\n      \"ident\": \"TypeParamBound\",\n      \"features\": {\n        \"any\": [\n          \"derive\",\n          \"full\"\n        ]\n      },\n      \"variants\": {\n        \"Trait\": [\n          {\n            \"syn\": \"TraitBound\"\n          }\n        ],\n        \"Lifetime\": [\n          {\n            \"syn\": \"Lifetime\"\n          }\n        ],\n        \"PreciseCapture\": [\n          {\n            \"syn\": \"PreciseCapture\"\n          }\n        ],\n        \"Verbatim\": [\n          {\n            \"proc_macro2\": \"TokenStream\"\n          }\n        ]\n      },\n      \"exhaustive\": false\n    },\n    {\n      \"ident\": \"TypeParen\",\n      \"features\": {\n        \"any\": [\n          \"derive\",\n          \"full\"\n        ]\n      },\n      \"fields\": {\n        \"paren_token\": {\n          \"group\": \"Paren\"\n        },\n        \"elem\": {\n          \"box\": {\n            \"syn\": \"Type\"\n          }\n        }\n      }\n    },\n    {\n      \"ident\": \"TypePath\",\n      \"features\": {\n        \"any\": [\n          \"derive\",\n          \"full\"\n        ]\n      },\n      \"fields\": {\n        \"qself\": {\n          \"option\": {\n            \"syn\": \"QSelf\"\n          }\n        },\n        \"path\": {\n          \"syn\": \"Path\"\n        }\n      }\n    },\n    {\n      \"ident\": \"TypePtr\",\n      \"features\": {\n        \"any\": [\n          \"derive\",\n          \"full\"\n        ]\n      },\n      \"fields\": {\n        \"star_token\": {\n          \"token\": \"Star\"\n        },\n        \"const_token\": {\n          \"option\": {\n            \"token\": \"Const\"\n          }\n        },\n        \"mutability\": {\n          \"option\": {\n            \"token\": \"Mut\"\n          }\n        },\n        \"elem\": {\n          \"box\": {\n            \"syn\": \"Type\"\n          }\n        }\n      }\n    },\n    {\n      \"ident\": \"TypeReference\",\n      \"features\": {\n        \"any\": [\n          \"derive\",\n          \"full\"\n        ]\n      },\n      \"fields\": {\n        \"and_token\": {\n          \"token\": \"And\"\n        },\n        \"lifetime\": {\n          \"option\": {\n            \"syn\": \"Lifetime\"\n          }\n        },\n        \"mutability\": {\n          \"option\": {\n            \"token\": \"Mut\"\n          }\n        },\n        \"elem\": {\n          \"box\": {\n            \"syn\": \"Type\"\n          }\n        }\n      }\n    },\n    {\n      \"ident\": \"TypeSlice\",\n      \"features\": {\n        \"any\": [\n          \"derive\",\n          \"full\"\n        ]\n      },\n      \"fields\": {\n        \"bracket_token\": {\n          \"group\": \"Bracket\"\n        },\n        \"elem\": {\n          \"box\": {\n            \"syn\": \"Type\"\n          }\n        }\n      }\n    },\n    {\n      \"ident\": \"TypeTraitObject\",\n      \"features\": {\n        \"any\": [\n          \"derive\",\n          \"full\"\n        ]\n      },\n      \"fields\": {\n        \"dyn_token\": {\n          \"option\": {\n            \"token\": \"Dyn\"\n          }\n        },\n        \"bounds\": {\n          \"punctuated\": {\n            \"element\": {\n              \"syn\": \"TypeParamBound\"\n            },\n            \"punct\": \"Plus\"\n          }\n        }\n      }\n    },\n    {\n      \"ident\": \"TypeTuple\",\n      \"features\": {\n        \"any\": [\n          \"derive\",\n          \"full\"\n        ]\n      },\n      \"fields\": {\n        \"paren_token\": {\n          \"group\": \"Paren\"\n        },\n        \"elems\": {\n          \"punctuated\": {\n            \"element\": {\n              \"syn\": \"Type\"\n            },\n            \"punct\": \"Comma\"\n          }\n        }\n      }\n    },\n    {\n      \"ident\": \"UnOp\",\n      \"features\": {\n        \"any\": [\n          \"derive\",\n          \"full\"\n        ]\n      },\n      \"variants\": {\n        \"Deref\": [\n          {\n            \"token\": \"Star\"\n          }\n        ],\n        \"Not\": [\n          {\n            \"token\": \"Not\"\n          }\n        ],\n        \"Neg\": [\n          {\n            \"token\": \"Minus\"\n          }\n        ]\n      },\n      \"exhaustive\": false\n    },\n    {\n      \"ident\": \"UseGlob\",\n      \"features\": {\n        \"any\": [\n          \"full\"\n        ]\n      },\n      \"fields\": {\n        \"star_token\": {\n          \"token\": \"Star\"\n        }\n      }\n    },\n    {\n      \"ident\": \"UseGroup\",\n      \"features\": {\n        \"any\": [\n          \"full\"\n        ]\n      },\n      \"fields\": {\n        \"brace_token\": {\n          \"group\": \"Brace\"\n        },\n        \"items\": {\n          \"punctuated\": {\n            \"element\": {\n              \"syn\": \"UseTree\"\n            },\n            \"punct\": \"Comma\"\n          }\n        }\n      }\n    },\n    {\n      \"ident\": \"UseName\",\n      \"features\": {\n        \"any\": [\n          \"full\"\n        ]\n      },\n      \"fields\": {\n        \"ident\": {\n          \"proc_macro2\": \"Ident\"\n        }\n      }\n    },\n    {\n      \"ident\": \"UsePath\",\n      \"features\": {\n        \"any\": [\n          \"full\"\n        ]\n      },\n      \"fields\": {\n        \"ident\": {\n          \"proc_macro2\": \"Ident\"\n        },\n        \"colon2_token\": {\n          \"token\": \"PathSep\"\n        },\n        \"tree\": {\n          \"box\": {\n            \"syn\": \"UseTree\"\n          }\n        }\n      }\n    },\n    {\n      \"ident\": \"UseRename\",\n      \"features\": {\n        \"any\": [\n          \"full\"\n        ]\n      },\n      \"fields\": {\n        \"ident\": {\n          \"proc_macro2\": \"Ident\"\n        },\n        \"as_token\": {\n          \"token\": \"As\"\n        },\n        \"rename\": {\n          \"proc_macro2\": \"Ident\"\n        }\n      }\n    },\n    {\n      \"ident\": \"UseTree\",\n      \"features\": {\n        \"any\": [\n          \"full\"\n        ]\n      },\n      \"variants\": {\n        \"Path\": [\n          {\n            \"syn\": \"UsePath\"\n          }\n        ],\n        \"Name\": [\n          {\n            \"syn\": \"UseName\"\n          }\n        ],\n        \"Rename\": [\n          {\n            \"syn\": \"UseRename\"\n          }\n        ],\n        \"Glob\": [\n          {\n            \"syn\": \"UseGlob\"\n          }\n        ],\n        \"Group\": [\n          {\n            \"syn\": \"UseGroup\"\n          }\n        ]\n      }\n    },\n    {\n      \"ident\": \"Variadic\",\n      \"features\": {\n        \"any\": [\n          \"full\"\n        ]\n      },\n      \"fields\": {\n        \"attrs\": {\n          \"vec\": {\n            \"syn\": \"Attribute\"\n          }\n        },\n        \"pat\": {\n          \"option\": {\n            \"tuple\": [\n              {\n                \"box\": {\n                  \"syn\": \"Pat\"\n                }\n              },\n              {\n                \"token\": \"Colon\"\n              }\n            ]\n          }\n        },\n        \"dots\": {\n          \"token\": \"DotDotDot\"\n        },\n        \"comma\": {\n          \"option\": {\n            \"token\": \"Comma\"\n          }\n        }\n      }\n    },\n    {\n      \"ident\": \"Variant\",\n      \"features\": {\n        \"any\": [\n          \"derive\",\n          \"full\"\n        ]\n      },\n      \"fields\": {\n        \"attrs\": {\n          \"vec\": {\n            \"syn\": \"Attribute\"\n          }\n        },\n        \"ident\": {\n          \"proc_macro2\": \"Ident\"\n        },\n        \"fields\": {\n          \"syn\": \"Fields\"\n        },\n        \"discriminant\": {\n          \"option\": {\n            \"tuple\": [\n              {\n                \"token\": \"Eq\"\n              },\n              {\n                \"syn\": \"Expr\"\n              }\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"ident\": \"VisRestricted\",\n      \"features\": {\n        \"any\": [\n          \"derive\",\n          \"full\"\n        ]\n      },\n      \"fields\": {\n        \"pub_token\": {\n          \"token\": \"Pub\"\n        },\n        \"paren_token\": {\n          \"group\": \"Paren\"\n        },\n        \"in_token\": {\n          \"option\": {\n            \"token\": \"In\"\n          }\n        },\n        \"path\": {\n          \"box\": {\n            \"syn\": \"Path\"\n          }\n        }\n      }\n    },\n    {\n      \"ident\": \"Visibility\",\n      \"features\": {\n        \"any\": [\n          \"derive\",\n          \"full\"\n        ]\n      },\n      \"variants\": {\n        \"Public\": [\n          {\n            \"token\": \"Pub\"\n          }\n        ],\n        \"Restricted\": [\n          {\n            \"syn\": \"VisRestricted\"\n          }\n        ],\n        \"Inherited\": []\n      }\n    },\n    {\n      \"ident\": \"WhereClause\",\n      \"features\": {\n        \"any\": [\n          \"derive\",\n          \"full\"\n        ]\n      },\n      \"fields\": {\n        \"where_token\": {\n          \"token\": \"Where\"\n        },\n        \"predicates\": {\n          \"punctuated\": {\n            \"element\": {\n              \"syn\": \"WherePredicate\"\n            },\n            \"punct\": \"Comma\"\n          }\n        }\n      }\n    },\n    {\n      \"ident\": \"WherePredicate\",\n      \"features\": {\n        \"any\": [\n          \"derive\",\n          \"full\"\n        ]\n      },\n      \"variants\": {\n        \"Lifetime\": [\n          {\n            \"syn\": \"PredicateLifetime\"\n          }\n        ],\n        \"Type\": [\n          {\n            \"syn\": \"PredicateType\"\n          }\n        ]\n      },\n      \"exhaustive\": false\n    }\n  ],\n  \"tokens\": {\n    \"Abstract\": \"abstract\",\n    \"And\": \"&\",\n    \"AndAnd\": \"&&\",\n    \"AndEq\": \"&=\",\n    \"As\": \"as\",\n    \"Async\": \"async\",\n    \"At\": \"@\",\n    \"Auto\": \"auto\",\n    \"Await\": \"await\",\n    \"Become\": \"become\",\n    \"Box\": \"box\",\n    \"Break\": \"break\",\n    \"Caret\": \"^\",\n    \"CaretEq\": \"^=\",\n    \"Colon\": \":\",\n    \"Comma\": \",\",\n    \"Const\": \"const\",\n    \"Continue\": \"continue\",\n    \"Crate\": \"crate\",\n    \"Default\": \"default\",\n    \"Do\": \"do\",\n    \"Dollar\": \"$\",\n    \"Dot\": \".\",\n    \"DotDot\": \"..\",\n    \"DotDotDot\": \"...\",\n    \"DotDotEq\": \"..=\",\n    \"Dyn\": \"dyn\",\n    \"Else\": \"else\",\n    \"Enum\": \"enum\",\n    \"Eq\": \"=\",\n    \"EqEq\": \"==\",\n    \"Extern\": \"extern\",\n    \"FatArrow\": \"=>\",\n    \"Final\": \"final\",\n    \"Fn\": \"fn\",\n    \"For\": \"for\",\n    \"Ge\": \">=\",\n    \"Gt\": \">\",\n    \"If\": \"if\",\n    \"Impl\": \"impl\",\n    \"In\": \"in\",\n    \"LArrow\": \"<-\",\n    \"Le\": \"<=\",\n    \"Let\": \"let\",\n    \"Loop\": \"loop\",\n    \"Lt\": \"<\",\n    \"Macro\": \"macro\",\n    \"Match\": \"match\",\n    \"Minus\": \"-\",\n    \"MinusEq\": \"-=\",\n    \"Mod\": \"mod\",\n    \"Move\": \"move\",\n    \"Mut\": \"mut\",\n    \"Ne\": \"!=\",\n    \"Not\": \"!\",\n    \"Or\": \"|\",\n    \"OrEq\": \"|=\",\n    \"OrOr\": \"||\",\n    \"Override\": \"override\",\n    \"PathSep\": \"::\",\n    \"Percent\": \"%\",\n    \"PercentEq\": \"%=\",\n    \"Plus\": \"+\",\n    \"PlusEq\": \"+=\",\n    \"Pound\": \"#\",\n    \"Priv\": \"priv\",\n    \"Pub\": \"pub\",\n    \"Question\": \"?\",\n    \"RArrow\": \"->\",\n    \"Raw\": \"raw\",\n    \"Ref\": \"ref\",\n    \"Return\": \"return\",\n    \"SelfType\": \"Self\",\n    \"SelfValue\": \"self\",\n    \"Semi\": \";\",\n    \"Shl\": \"<<\",\n    \"ShlEq\": \"<<=\",\n    \"Shr\": \">>\",\n    \"ShrEq\": \">>=\",\n    \"Slash\": \"/\",\n    \"SlashEq\": \"/=\",\n    \"Star\": \"*\",\n    \"StarEq\": \"*=\",\n    \"Static\": \"static\",\n    \"Struct\": \"struct\",\n    \"Super\": \"super\",\n    \"Tilde\": \"~\",\n    \"Trait\": \"trait\",\n    \"Try\": \"try\",\n    \"Type\": \"type\",\n    \"Typeof\": \"typeof\",\n    \"Underscore\": \"_\",\n    \"Union\": \"union\",\n    \"Unsafe\": \"unsafe\",\n    \"Unsized\": \"unsized\",\n    \"Use\": \"use\",\n    \"Virtual\": \"virtual\",\n    \"Where\": \"where\",\n    \"While\": \"while\",\n    \"Yield\": \"yield\"\n  }\n}\n"
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}