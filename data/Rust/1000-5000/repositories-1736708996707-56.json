{
  "metadata": {
    "timestamp": 1736708996707,
    "page": 56,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjYw",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "dimforge/rapier",
      "stars": 4212,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.099609375,
          "content": "**/*.rs.bk\nCargo.lock\nnode_modules\ntarget\n.idea\n.DS_Store\npackage-lock.json\n**/*.csv\n.history\n.vscode/"
        },
        {
          "name": ".typos.toml",
          "type": "blob",
          "size": 0.5791015625,
          "content": "# Corrections take the form of a key/value pair. The key is the incorrect word\n# and the value is the correct word. If the key and value are the same, the\n# word is treated as always correct. If the value is an empty string, the word\n# is treated as always incorrect.\n\n[files]\nextend-exclude = [\n    \".git/\",\n]\nignore-hidden = false\n\n[default]\nextend-ignore-re = [\n    \"\\\\bPolygon::PN\\\\b\",\n]\n\n# Case sensitive, matches entire word.\n[default.extend-identifiers]\nanc_color = \"anc_color\"\nrady = \"rady\"\n\n# Case insensitive, matches inside word.\n[default.extend-words]\nbellow = \"below\"\ntoi = \"toi\"\n"
        },
        {
          "name": "ARCHITECTURE.md",
          "type": "blob",
          "size": 1.2509765625,
          "content": "## Repository architecture\n\nThe architecture of this repository is a bit unusual because we are using some tricks to have both\nthe 2D and 3D version of Rapier share the same code-base. Here are the main folders:\n- **`build/`**: contains one folder per Rapier crate (for the 2D, 3D, `f32`, and `f64` versions). Each\n  crate has its own `Cargo.toml` file that adjusts some cargo features, and reference the `src` folder.\n- **`src/`**: contains the actual `.rs` source code of the Rapier physics engine.\n- **`src_testbed/`**: contains the `.rs` source code of the Rapier testbed (which our examples are based on).\n- **`examples2d/`**: simple 2D scenes showcasing some of Rapier's capabilities.\n  Run them with `cargo run --release --bin all_examples2`.\n- **`examples3d/`**: simple 3D scenes showcasing some of Rapier's capabilities.\n  Run them with `cargo run --release --bin all_examples3`.\n- **`benchmarks2d/`**: a set of 2D stress-tests, to see how Rapier performs when it has lots of elements\n  to simulate.\n- **`benchmarks3d/`**: a set of 3D stress-tests, to see how Rapier performs when it has lots of elements\n  to simulate. We use the these benchmarks to track the performances of Rapier after some changes,\n  and spot unexpected regressions: https://www.rapier.rs/benchmarks/"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 46.5068359375,
          "content": "## v0.23.0 (08 Jan 2025)\n\n### Fix\n\n- The broad-phase region key has been replaced by an i64 in the f64 version of rapier, increasing the range before panics occur.\n- Fix `BroadphaseMultiSap` not being able to serialize correctly with serde_json.\n- Fix `KinematicCharacterController::move_shape` not respecting parameters `max_slope_climb_angle` and `min_slope_slide_angle`.\n- Improve ground detection reliability for `KinematicCharacterController`. (#715)\n- Fix wasm32 default values for physics hooks filter to be consistent with native: `COMPUTE_IMPULSES`.\n\n### Added\n\n- `RigidBodySet` and `ColliderSet` have a new constructor `with_capacity`.\n- Use `profiling` crate to provide helpful profiling information in different tools.\n  - The testbeds have been updated to use `puffin_egui`\n\n### Modified\n\n- `InteractionGroups` default value for `memberships` is now `GROUP_1` (#706)\n- `ImpulseJointSet::get_mut` has a new parameter `wake_up: bool`, to wake up connected bodies.\n- Removed unmaintained `instant` in favor of `web-time`. This effectively removes the `wasm-bindgen` transitive dependency as it's no longer needed.\n- Significantly improve performances of `QueryPipeline::intersection_with_shape`.\n\n## v0.22.0 (20 July 2024)\n\n### Fix\n\n- Fix crash when removing a multibody joint, or a rigid-body with a multipody-joint attached to it.\n- Fix crash when inserting multibody joints in an arbitrary order (instead of incrementally from root to leaf).\n- Fix `BroadphaseMultiSap` not being able to serialize a field with serde_json.\n\n### Added\n\n- Implement rotation gizmo for Ball 2D shape (as radius line) in Debug renderer if `DebugRenderMode::COLLIDER_SHAPES`\n  enabled\n- Implement `Debug` for `ColliderSet`, `InteractionGraph`,\n  `MultibodyLink`, `MultibodyJointSet`, `Multibody`, `ImpulseJointSet`\n\n### Modified\n\n- Update parry to v0.17. Refer to [its changelog](https://github.com/dimforge/parry/blob/master/CHANGELOG.md#v0170) for\n  further details.\n- Divided by two the value of each `QueryFilterFlags` variant so that\n  the smallest one is 1 instead of 2 (fixes a bug in rapier.js).\n- `BroadphaseMultiSap` now serializes its `colliders_proxy_ids` as `Vec[(ColliderHandle, BroadPhaseProxyIndex)]`.\n\n## v0.21.0 (23 June 2024)\n\n### Fix\n\n- Fix `NaN` values appearing in bodies translation and rotation after a simulation step with a delta time equal to\n  0 ([#660](https://github.com/dimforge/rapier/pull/660)).\n- Fix crash in the SAP broad-phase when teleporting an object.\n\n### Modified\n\n- Update to `nalgebra` 0.33 and `parry` 0.16.\n- `solve_character_collision_impulses` collisions parameter is now an iterator over references.\n\n## v0.20.0 (9 June 2024)\n\nThis release introduces two new crates:\n\n- `rapier3d-urdf` for loading URDF files into rapier3d. This will load the rigid-bodies,\n  colliders, and joints.\n- `rapier3d-stl` for loading an STL file as a collision shape.\n\n### Added\n\n- Add `Multibody::inverse_kinematics`, `Multibody::inverse_kinematics_delta`,\n  and `::inverse_kinematics_delta_with_jacobian`\n  for running inverse kinematics on a multibody to align one its links pose to the given prescribed pose.\n- Add `InverseKinematicsOption` to customize some behaviors of the inverse-kinematics solver.\n- Add `Multibody::body_jacobian` to get the jacobian of a specific link.\n- Add `Multibody::update_rigid_bodies` to update rigid-bodies based on the multibody links poses.\n- Add `Multibody::forward_kinematics_single_link` to run forward-kinematics to compute the new pose and jacobian of a\n  single link without mutating the multibody. This can take an optional displacement on generalized coordinates that are\n  taken into account during transform propagation.\n- Implement `Debug` for `ColliderBuilder`.\n- Add `Collider::converted_trimesh` and `MeshConverter` for building a collider with a shape computed from a mesh’s\n  index and vertex buffers. That computed shape can currently be a `TriMesh`, a `Cuboid` (covering the mesh’s AABB or\n  OBB), a convex hull, or a convex decomposition.\n- Implement `Default` for `RigidBodyBuilder`. This is equivalent to `RigidBodyBuilder::dynamic()`.\n- Implement `Default` for `ColliderBuilder`. This is equivalent to `ColliderBuilder::ball(0.5)`.\n- Add `RevoluteJoint::angle` to compute the joint’s angle given the rotation of its attached rigid-bodies.\n\n### Modified\n\n- Renamed `JointAxesMask::X/Y/Z` to `::LIN_X/LIN_Y/LIN_Z`; and renamed `JointAxisMask::X/Y/Z` to `::LinX/LinY/LynZ` to\n  make it clear it is not to be used as angular axes (the angular axis are `JointAxesMask::ANG_X/ANG_Y/AngZ` and\n  `JointAxisMask::AngX/AngY/AngZ`).\n- The contact constraints regularization parameters have been changed from `erp/damping_ratio` to\n  `natural_frequency/damping_ratio`. This helps define them in a timestep-length independent way. The new variables\n  are named `IntegrationParameters::contact_natural_frequency` and `IntegrationParameters::contact_damping_ratio`.\n- The `IntegrationParameters::normalized_max_penetration_correction` has been replaced\n  by `::normalized_max_corrective_velocity`\n  to make the parameter more timestep-length independent. It is now set to a non-infinite value to eliminate aggressive\n  \"popping effects\".\n- The `Multibody::forward_kinematics` method will no longer automatically update the poses of the `RigidBody` associated\n  to each joint. Instead `Multibody::update_rigid_bodies` has to be called explicitly.\n- The `Multibody::forward_kinematics` method will automatically adjust the multibody’s degrees of freedom if the root\n  rigid-body changed type (between dynamic and non-dynamic). It can also optionally apply the root’s rigid-body pose\n  instead of the root link’s pose (useful for example if you modified the root rigid-body pose externally and wanted\n  to propagate it to the multibody).\n- Remove an internal special-case for contact constraints on fast contacts. The doesn’t seem necessary with the substep\n  solver.\n- Remove `RigidBody::add_collider`. This was an implementation detail previously needed by `bevy_rapier`. To attach\n  a collider to a rigid-body, use `ColliderSet::insert_with_parent` or `ColliderSet::set_parent`.\n- Rename `JointAxis::X/Y/Z` to `::LinX/LinY/LinZ` to avoid confusing it with `::AngX/AngY/AngZ`.\n- Rename `JointAxesMask::X/Y/Z` to `::LIN_X/LIN_Y/LIN_Z` to avoid confusing it with `::ANG_X/ANG_Y/ANG_Z`.\n- The function `RigidBody::add_collider` is now private. It was only public because it was needed for some internal\n  `bevy_rapier` plumbings, but it is no longer useful. Adding a collider must always go through the `ColliderSet`.\n- `CharacterController::solve_character_collision_impulses` now takes multiple `CharacterCollision` as parameter:\n  this change will allow further internal optimizations.\n- `QueryPipeline::update` now doesn't need the `RigidBodySet` as parameter.\n- Removed `QueryPipelineMode`.\n- `QueryPipeline::update_with_mode` was renamed to `::update_with_generator` and now takes\n  `impl QbvhDataGenerator<ColliderHandle>` as parameter see [`QueryPipeline::updaters`] module for more information.\n\n## v0.19.0 (05 May 2024)\n\n### Fix\n\n- Fix crash when simulating a spring joint between two dynamic bodies.\n- Fix kinematic bodies not being affected by gravity after being switched back to dynamic.\n- Fix regression on contact force reporting from contact force events.\n- Fix kinematic character controller getting stuck against vertical walls.\n- Fix joint limits/motors occasionally not being applied properly when one of the attached\n  rigid-bodies is fixed.\n- Fix an issue where contacts would be completely ignored between two convex shapes.\n\n### Added\n\n**Many stability improvements were added as part of this release. To see illustrations of some of these\nchanges, see [#625](https://github.com/dimforge/rapier/pull/625).**\n\n- Add `RigidBody::predict_position_using_velocity` to predict the next position of the rigid-body\n  based only on its current velocity.\n- Add `Collider::copy_from` to copy most collider attributes to an existing collider.\n- Add `RigidBody::copy_from` to copy most rigid-body attributes to an existing rigid-body.\n- Add the `BroadPhase` trait and expect an implementor of this trait as input to `PhysicsPipeline::step`.\n- Implement a 2D block-solver as well as warmstarting. Significantly improves stacking capabilities. Generally reduces\n  the \"pop\" effect that can happen due to penetration corrections.\n- Add `RigidBodyBuilder::soft_ccd_prediction` and `RigidBody::set_soft_ccd_prediction` to enable `soft-ccd`: a form of\n  CCD based on predictive contacts. This is helpful for objects moving moderately fast. This form of CCD is generally\n  cheaper than the normal (time-dropping) CCD implemented so far. It is possible to combine both soft-ccd and\n  time-dropping ccd.\n- Add a `ColliderBuilder::contact_skin`, `Collider::set_contact_skin`, and `Collider::contact_skin`. This forces the\n  solver te maintain a gap between colliders with non-zero contact skin, as if they had a slight margin around them.\n  This helps performance and stability for thin objects (like triangle meshes).\n- Internal edges were reworked to avoid dropping contacts that would help with stability, and improve stability of\n  collisions between two triangle meshes. The `TriMeshFlags::FIX_INTERNAL_EDGES` and\n  `HeightFieldFlags::FIX_INTERNAL_EDGES` flags were added to enable internal edges handling.\n- Add `IntegrationParameters::length_units` to automatically adjust internal thresholds when the user relies on custom\n  length units (e.g. pixels in 2D).\n\n### Modified\n\n**Many shape-casting related functions/structs were renamed. Check out the CHANGELOG for parry 0.15.0 for\nadditional details.**\n\n- Renamed `BroadPhase` to `BroadPhaseMultiSap`. The `BroadPhase` is now a trait that can be\n  implemented for providing a custom broad-phase to rapier. Equivalently, the `DefaultBroadPhase` type\n  alias can be used in place of `BroadPhaseMultiSap`.\n- The kinematic character controller autostepping is now disabled by default.\n- Add `KinematicCharacterController::normal_nudge_factor` used to help getting the character unstuck\n  due to rounding errors.\n- Rename `TOI` to `ShapeCastHit`.\n- Rename many fields from `toi` to `time_of_impact`.\n- The `QueryPipeline::cast_shape` method now takes a `ShapeCastOptions` instead of the `max_toi`\n  and `stop_at_penetration` parameters. This allows a couple of extra configurations, including the\n  ability to have the shape-cast target a specific distance instead of actual shape overlap.\n\n## v0.18.0 (24 Jan. 2024)\n\nThe main highlight of this release is the implementation of a new non-linear constraints solver for better stability\nand increased convergence rates. See [#579](https://github.com/dimforge/rapier/pull/579) for additional information.\n\nIn order to adjust the number of iterations of the new solver, simply\nadjust `IntegrationParameters::num_solver_iterations`.\nIf recovering the old solver behavior is useful to you, call `IntegrationParameters::switch_to_standard_pgs_solver()`.\n\nIt is now possible to specify some additional solver iteration for specific rigid-bodies (and everything interacting\nwith it directly or indirectly through contacts and joints): `RigidBodyBuilder::additional_solver_iterations` and\n`RigidBodyBuilder::set_additional_solver_iterations`. This allows for higher-accuracy on subsets of the physics scene\nwithout affecting performance of the other parts of the simulation.\n\n### Fix\n\n- Fix bug causing angular joint limits and motor to sometimes only take into account half of the angles specified by the\n  user.\n- Fix bug where collisions would not be re-computed after a collider was re-enabled.\n\n### Added\n\n- Add a `SpringJoint` and `SpringJointBuilder` for simulating springs with customizable stiffness and damping\n  coefficients.\n- Add `SphericalJoint::local_frame1/2`, `::set_local_frame1/2`, and `SphericalJointBuilder::local_frame1/2` to set both\n  the joint’s anchor and reference orientation.\n- Add `EffectiveCharacterMovement::is_sliding_down_slope` to indicate if the character controlled by the kinematic\n  character controller is sliding on a slope that is too steep.\n- Add `Wheel::side_friction_stiffness` to customize the side friction applied to the vehicle controller’s wheel.\n- Add `Wheel::raycast_info` to access more wheel information relative to the ground.\n- Add `DebugRenderStyle::disabled_color_multiplier` to make the debug-renderer color disabled object differently.\n- Fix incorrect update of angular degrees-of-freedoms on spherical multibody joints.\n- Fix debug-renderer showing moved kinematic rigid-bodies only at their initial position.\n\n### Modified\n\n- Make `Wheel::friction_slip` public to customize the front friction applied to the vehicle controller’s wheels.\n- Add the `DebugRenderBackend::filter_object` predicate that can be implemented to apply custom filtering rules\n  on the objects being rendered.\n- Switch the testbed to `bevy 0.12` and use its new Gizmos API for rendering lines.\n- Rename `NarrowPhase::contacts_with` to `NarrowPhase::contact_pairs_with`.\n- Rename `NarrowPhase::intersections_with` to `NarrowPhase::intersection_pairs_with`.\n\n## v0.17.2 (26 Feb. 2023)\n\n### Fix\n\n- Fix issue with convex polyhedron jitter due to missing contacts.\n- Fix character controller getting stuck against vertical walls.\n- Fix character controller’s snapping to ground not triggering sometimes.\n- Fix character controller’s horizontal offset being mostly ignored and some instances of vertical offset being ignored.\n\n## v0.17.1 (22 Jan. 2023)\n\n### Fix\n\n- Fix bug resulting in dynamic rigid-bodies acting as kinematic bodies after being disabled and then re-enabled.\n\n## v0.17.0 (15 Jan. 2023)\n\n### Added\n\n- Add `RigidBody::set_enabled`, `RigidBody::is_enabled`, `RigidBodyBuilder::enabled` to enable/disable a rigid-body\n  without having to delete it. Disabling a rigid-body attached to a multibody joint isn’t supported yet.\n- Add `Collider::set_enabled`, `Collider::is_enabled`, `ColliderBuilder::enabled` to enable/disable a collider\n  without having to delete it.\n- Add `GenericJoint::set_enabled`, `GenericJoint::is_enabled` to enable/disable a joint without having to delete it.\n  Disabling a multibody joint isn’t supported yet.\n- Add `DynamicRayCastVehicleController`, a vehicle controller based on ray-casting and dynamic rigid-bodies (mostly\n  a port of the vehicle controller from Bullet physics).\n- Add `RigidBody::user_force` and `RigidBody::user_torque` to read the forces or torques added by the user to a\n  dynamic rigid-body.\n- Add `RigidBody::locked_axes` to get the rigid-body axes that were locked by the user.\n\n### Modified\n\n- Add the `QueryPipeline` as an optional argument to `PhysicsPipeline::step` and `CollisionPipeline::step`. If this\n  argument is specified, then the query pipeline will be incrementally (i.e. more efficiently) update at the same time\n  as\n  these other pipelines. In that case, calling `QueryPipeline::update` a `PhysicsPipeline::step` isn’t needed.\n- `RigidBody::set_body_type` now takes an extra boolean argument indicating if the rigid-body should be woken-up\n  (if it becomes dynamic).\n- `RigidBody::mass_properties` now also returns the world-space mass-properties of the rigid-body.\n\n### Fix\n\n- Fix bug resulting in rigid-bodies being awakened after they are created, even if they are created sleeping.\n\n## v0.16.1 (10 Nov. 2022)\n\n### Fix\n\n- Fixed docs build on `docs.rs`.\n\n## v0.16.0 (30 Oct. 2022)\n\n### Added\n\n- Implement `Copy` for `CharacterCollision`.\n- Implement conversion (`From` trait) between `Group` and `u32`.\n- Add `ColliderBuilder::trimesh_with_flags` to build a triangle mesh with specific flags controlling\n  its initialization.\n\n### Modified\n\n- Rename `AABB` to `Aabb` to comply with Rust’s style guide.\n- Switch to `parry 0.11`.\n\n### Fix\n\n- Fix internal edges of 3D triangle meshes or 3D heightfields generating invalid contacts preventing\n  balls from moving straight.\n\n## v0.15.0 (02 Oct. 2022)\n\n### Added\n\n- Add a **kinematic character** controller implementation. See the `control` module. The character controller currently\n  supports the following features:\n    - Slide on uneven terrains\n    - Interaction with dynamic bodies.\n    - Climb stairs automatically.\n    - Automatically snap the body to the floor when going downstairs.\n    - Prevent sliding up slopes that are too steep\n    - Prevent sliding down slopes that are not steep enough\n    - Interactions with moving platforms.\n    - Report information on the obstacles it hit on its path.\n- Implement `serde` serialization/deserialization for `CollisionEvents` when the `serde-serialize` feature is enabled\n\n### Modified\n\n- The methods `Collider::set_rotation`, `RigidBody::set_rotation`, and `RigidBody::set_next_kinematic_rotation` now\n  take a rotation (`UnitQuaternion` or `UnitComplex`) instead of a vector/angle.\n- The method `QueryFilter::exclude_dynamic` is now a static method (the `self` argument was removed).\n- The `QueryPipeline::cast_shape` method has a new argument `stop_at_penertation`. If set to `false`, the linear\n  shape-cast won’t immediately stop if the shape is penetrating another shape at its starting point **and** its\n  trajectory is such that it’s on a path to exit that penetration state.\n- The `InteractionGroups` is now a set of explicit bit flags instead of a raw `u32`.\n- The world-space mass properties of rigid-bodies are now updated automatically whenever the user changes their\n  position.\n\n## v0.14.0 (09 July 2022)\n\n### Fixed\n\n- Fix unpredictable broad-phase panic when using small colliders in the simulation.\n- Fix collision events being incorrectly generated for any shape that produces multiple\n  contact manifolds (like triangle meshes).\n- Fix panic in the `CollisionPipeline` if a collider is both added and removed before a call\n  to `CollisionPipeline::step`.\n\n### Modified\n\n- The `RigidBodyBuilder::additional_mass` method will now result in the additional angular inertia\n  being automatically computed based on the shapes of the colliders attached to the rigid-body.\n- Remove the deprecated methods `RigidBodyBuilder::mass`, `::principal_angular_inertia`, `::principal_inertia`.\n- Remove the methods `RigidBodyBuilder::additional_principal_angular_inertia`. Use\n  `RigidBodyBuilder::additional_mass_properties` instead.\n- The `Collider::density` method now always returns a `Real` (instead of an `Option<Real>`).\n- Rename `RigidBody::restrict_rotations` and `RigidBody::restrict_translations` to\n  `RigidBody::set_enabled_rotations` and `RigidBody::set_enabled_translations`.\n- Rename `RigidBodyBuilder::restrict_rotations` and `RigidBodyBuilder::restrict_translations` to\n  `RigidBodyBuilder::enabled_rotations` and `RigidBodyBuilder::enabled_translations`.\n\n### Added\n\n- Add `RigidBody::recompute_mass_properties_from_colliders` to force the immediate computation\n  of a rigid-body’s mass properties (instead of waiting for them to be recomputed during the next\n  timestep). This is useful to be able to read immediately the result of a change of a rigid-body\n  additional mass-properties or a change of one of its collider’s mass-properties.\n- Add `RigidBody::set_additional_mass` to set the additional mass for the collider. The additional\n  angular inertia is automatically computed based on the attached colliders shapes.\n- Add `Collider::set_density`, `::set_mass`, `set_mass_properties`, to alter a collider’s mass\n  properties. Note that `::set_mass` will result in the collider’s angular inertia being automatically\n  computed based on this mass and on its shape.\n- Add `ColliderBuilder::mass` to set the mass of the collider instead of its density. Its angular\n  inertia tensor will be automatically computed based on this mass and its shape.\n- Add `Collider::mass` and `Collider::volume` to retrieve the mass or volume of a collider.\n- Add the `QueryFilter` that is now used by all the scene queries instead of the `CollisionGroups`\n  and `Fn(ColliderHandle) -> bool`\n  closure. This `QueryFilter` provides easy access to most common filtering strategies (e.g. dynamic bodies only,\n  excluding one particular collider, etc.) for scene queries.\n- Add force reporting based on contact force events. The `EventHandler` trait has been modified to include\n  the method `EventHandler::handle_contact_force_event`. Contact force events are generated whenever the sum of the\n  magnitudes of all the forces between two colliders is greater than any of their\n  `Collider::contact_force_event_threshold` values (only the colliders wit the  `ActiveEvents::CONTACT_FORCE_EVENT` flag\n  set are taken into account for this threshold).\n- Add the `ContactForceEvent` struct that is generated by the `ChannelEventCollector` to report\n  contact force events.\n\n## v0.13.0 (31 May 2022)\n\n### Fixed\n\n- Fix incorrect sensor events being generated after collider removal.\n- Fix bug where the CCD thickness wasn’t initialized properly.\n- Fix bug where the contact compliance would result in undesired tunneling, despite CCD being enabled.\n\n### Modified\n\n- Add a `wake_up: bool` argument to the `ImpulseJointSet::insert` and `MultibodyJointSet::insert` to\n  automatically wake-up the rigid-bodies attached to the inserted joint.\n- The methods `ImpulseJointSet::remove/remove_joints_attached_to_rigid_body`,\n  `MultibodyJointSet::remove/remove_joints_attached_to_rigid_body` and\n  `MultibodyjointSet::remove_multibody_articulations` no longer require the `bodies`\n  and `islands` arguments.\n- Make the `instant` dependency optional, behind a `profiler` cargo feature.\n- Rename STATIC to FIXED in the `ActiveCollisionTypes` flags.\n- Rename `ImpulseJointSet::joints_with` to `::attached_joints`. Add the joint’s handle to the closure arguments.\n- Make the default debug-render less noisy out-of-the-box by only rendering joints, rigid-bodies, and colliders\n  by default.\n\n### Added\n\n- Debug-renderer: add rendering of contacts, solver contacts, and collider Aabbs\n- Add `MultibodyJointSet::attached_joints` to return all the multibody joints attached to a given rigid-body.\n\n## v0.12.0 (30 Apr. 2022)\n\n### Fixed\n\n- Fix the simulation when the `parallel` feature is enabled.\n- Fix bug where damping would not be applied properly to some bodies.\n- Fix panics caused by various situations (contact or joints) involving rigid-bodies with locked translations/rotations.\n- Fix bug where collider modifications (like changes of collision groups, or shape) would not wake-up their attached\n  rigid-body, or would not have any effect on pre-existing contacts.\n- Fix the automatic update of a rigid-body’s mass properties after changing one of its attached colliders.\n- Fix the broad-phase becoming potentially invalid after a change of collision groups.\n\n### Modified\n\n- Switch to `nalgebra` 0.31.\n- Switch to `parry` 0.9.\n- Rename `JointHandle` to `ImpulseJointHandle`.\n- Rename `RigidBodyMassPropsFlags` to `LockedAxes`.\n- Rename `RigidBody::apply_force`, `::apply_torque`, `::apply_force_at_point` to `::add_force`,\n  `::add_torque`, and `::add_force_at_point` to better reflect the fact that they are not cleared at the end\n  of the timestep.\n- Rename `RigidBodyType::Static` to `RigidBodyType::Fixed` to avoid confusion with the `static` keyword.\n- All method referring to `static` rigid-bodies now use `fixed` instead of `static`.\n- Rename `RigidBodyBuilder::new_static, new_kinematic_velocity_based, new_kinematic_velocity_based` to\n  `RigidBodyBuilder::fixed, kinematic_velocity_based, kinematic_velocity_based`.\n- The `ContactEvent` and `IntersectionEvent` have been replaced by a single enum `CollisionEvent` in order\n  to simplify the user’s event handling.\n- The `ActiveEvents::CONTACT_EVENTS` and `ActiveEvents::INTERSECTION_EVENTS` flags have been replaced by a single\n  flag `ActiveEvents::COLLISION_EVENTS`.\n- Joint motors no longer have a `VelocityBased` model. The new choices are `AccelerationBased` and `ForceBased`\n  which are more stable.\n- Calling the `.build()` function from builders (`RigidBodyBuilder`, `ColliderBuilder`, etc.) is no longer necessary\n  when adding them to sets. It is automatically called thanks to `Into<_>` implementations.\n- The `ComponentSet` abstractions (and related `_generic` methods like `PhysicsPipeline::step_generic`) have been\n  removed. Custom storage for colliders and rigid-bodies are no longer possible: use the built-in `RigidBodySet` and\n  `ColliderSet` instead.\n\n### Semantic modifications\n\nThese are changes in the behavior of the physics engine that are not necessarily\nreflected by an API change. See [#304](https://github.com/dimforge/rapier/pull/304) for extensive details.\n\n- `RigidBody::set_linvel` and `RigidBody::set_angvel` no longer modify the velocity of static bodies.\n- `RigidBody::set_body_type` will reset the velocity of a rigid-body to zero if it is static.\n- Don’t automatically clear forces at the end of a timestep.\n- Don’t reset the velocity of kinematic bodies to zero at the end of the timestep.\n- Events `CollisionEvent::Stopped` are now generated after a collider is removed.\n\n### Added\n\n- Significantly improve the API of joints by adding:\n    * Builders based on the builder pattern.\n    * Getters and setters for all joints.\n    * Method to convert a `GenericJoint` to one of the more specific joint type.\n- Improve stability of joint motors.\n- Adds a `bool` argument to `RigidBodySet::remove`. If set to `false`, the colliders attached to the rigid-body\n  won’t be automatically deleted (they will only be detached from the deleted rigid-body instead).\n- Add `RigidBody::reset_forces` and `RigidBody::reset_torques` to reset all the forces and torques added to the\n  rigid-body by the user.\n- Add the `debug-render` cargo feature that enables the `DebugRenderPipeline`: a line-based backend-agnostic\n  renderer to debug the state of the physics engine.\n\n## v0.12.0-alpha.0 (2 Jan. 2022)\n\n### Fixed\n\n- Fixed `RigidBody::restrict_rotations` to properly take into account the axes to lock.\n\n### Modified\n\n- All the impulse-based joints have been replaced by a single generic 6-Dofs joint in 3D\n  (or 3-Dofs joint in 2D) named `ImpulseJoint`. The `RevoluteJoint, PrismaticJoint, FixedJoint`,\n  and `SphericalJoint` (formerly named `BallJoint`) structures still exist but are just convenient\n  ways to initialize the generic `ImpulseJoint`.\n- Our constraints solver has been modified. Before we used one velocity-based resolution followed\n  by one position-based resolution. We are now using two velocity-based resolution: the first one\n  includes constraints regularization whereas the second one doesn’t. This simplifies the resolution\n  code significantly while offering stiffer results.\n\n### Added\n\n- Added multibody joints: joints based on the reduced-coordinates modeling. These joints can’t\n  violate their positional constraint.\n- Implement `Default` for most of the struct that supports it.\n\n## v0.11.1\n\n### Fixed\n\n- Fix a bug causing large moving colliders to miss some collisions after some time.\n- Fix invalid forces generated by contacts with position-based kinematic bodies.\n- Fix a bug where two colliders without parent would not have their collision computed even if the\n  appropriate flags were set.\n\n## v0.11.0\n\nCheck out the user-guide for the JS/Typescript bindings for rapier. It has been fully rewritten and is now exhaustive!\nCheck it out on [rapier.rs](https://www.rapier.rs/docs/user_guides/javascript/getting_started_js)\n\n### Added\n\n- Joint limits are now implemented for all joints that can support them (prismatic, revolute, and ball joints).\n\n### Modified\n\n- Switch to  `nalgebra 0.29`.\n\n### Fixed\n\n- Fix the build of Rapier when targeting emscripten.\n\n## v0.10.1\n\n### Added\n\n- Add `Collider::set_translation_wrt_parent` to change the translation of a collider with respect to its parent\n  rigid-body.\n- Add `Collider::set_rotation_wrt_parent` to change the translation of a collider with respect to its parent rigid-body.\n\n## v0.10.0\n\n### Added\n\n- Implement `Clone` for `IslandManager`.\n\n### Modified\n\n- `JointSet::insert` no longer takes the rigid-body set in its arguments.\n- Modify the testbed's plugin system to let plugins interact with the rendering.\n- Implement `PartialEq` for most collider and rigid-body components.\n\n## v0.9.2\n\n### Added\n\n- Make the method JointSet::remove_joints_attached_to_rigid_body public so that it can can be called externally for\n  letting component-based Rapier integration call it to cleanup joints after a rigid-body removal.\n\n### Fixed\n\n- Fix a panic that could happen when the same collider is listed twice in the removed_colliders array.\n\n## v0.9.1\n\n### Added\n\n- Add `rapier::prelude::nalgebra` so that the `vector!` and `point!` macros work out-of-the-box after importing\n  the prelude: `use rapier::prelude::*`\n\n## v0.9.0\n\nThe user-guide has been fully rewritten and is now exhaustive! Check it out on [rapier.rs](https://rapier.rs/)\n\n### Added\n\n- A prelude has been added in order to simplify the most common imports. For example: `use rapier3d::prelude::*`\n- Add `RigidBody::set_translation` and `RigidBody.translation()`.\n- Add `RigidBody::set_rotation` and `RigidBody.rotation()`.\n- Add `RigidBody::set_next_translation` for setting the next translation of a position-based kinematic body.\n- Add `RigidBody::set_next_rotation` for setting the next rotation of a position-based kinematic body.\n- Add kinematic bodies controlled at the velocity level: use `RigidBodyBuilder::new_kinematic_velocity_based` or\n  `RigidBodyType::KinematicVelocityBased`.\n- Add the cargo feature `debug-disable-legitimate-fe-exceptions` that can be enabled for debugging purpose. This will\n  disable floating point exceptions whenever they happen at places where we do expect them to happen (for example\n  some SIMD code do generate NaNs which are filtered out by lane-wise selection).\n\n### Modified\n\nThe use of `RigidBodySet, ColliderSet, RigidBody, Collider` is no longer mandatory. Rigid-bodies and colliders have\nbeen split into multiple components that can be stored in a user-defined set. This is useful for integrating Rapier\nwith other engines (for example this allows us to use Bevy's Query as our rigid-body/collider sets).\n\nThe `RigidBodySet, ColliderSet, RigidBody, Collider` are still the best option for whoever doesn't want to\nprovide their own component sets.\n\n#### Rigid-bodies\n\n- Renamed `BodyStatus` to `RigidBodyType`.\n- `RigidBodyBuilder::translation` now takes a vector instead of individual components.\n- `RigidBodyBuilder::linvel` now takes a vector instead of individual components.\n- The `RigidBodyBuilder::new_kinematic` has be replaced by the `RigidBodyBuilder::new_kinematic_position_based` and\n  `RigidBodyBuilder::new_kinematic_velocity_based` constructors.\n- The `RigidBodyType::Kinematic` variant has been replaced by two variants: `RigidBodyType::KinematicVelocityBased` and\n  `RigidBodyType::KinematicPositionBased`.\n\n#### Colliders\n\n- `Colliderbuilder::translation` now takes a vector instead of individual components.\n- The way `PhysicsHooks` are enabled changed. Now, a physics hooks is executed if any of the two\n  colliders involved in the contact/intersection pair contains the related `PhysicsHooksFlag`.\n  These flags are configured on each collider with `ColliderBuilder::active_hooks`. As a result,\n  there is no `PhysicsHooks::active_hooks` method any more.\n- All events are now disabled for all colliders by default. Enable events for specific colliders by setting its\n  `active_events` bit mask to `ActiveEvents::CONTACT_EVENTS` and/or `ActiveEvents::PROXIMITY_EVENTS`.\n- Add a simpler way of enabling collision-detection between colliders attached to two non-dynamic rigid-bodies: see\n  `ColliderBuilder::active_collision_types`.\n- The `InteractionGroups` is now a structures with two `u32` integers: one integers for the groups\n  membership and one for the group filter mask. (Before, both were only 16-bits wide, and were\n  packed into a single `u32`).\n- Before, sensor colliders had a default density set to 0.0 whereas non-sensor colliders had a\n  default density of 1.0. This has been unified by setting the default density to 1.0 for both\n  sensor and non-sensor colliders.\n- Colliders are no longer required to be attached to a rigid-body. Therefore, `ColliderSet::insert`\n  only takes the collider as argument now. In order to attach the collider to a rigid-body,\n  (i.e., the old behavior of `ColliderSet::insert`), use `ColliderSet::insert_with_parent`.\n- Fixed a bug where collision groups were ignored by CCD.\n\n#### Joints\n\n- The fields `FixedJoint::local_anchor1` and `FixedJoint::local_anchor2` have been renamed to\n  `FixedJoint::local_frame1` and `FixedJoint::local_frame2`.\n\n#### Pipelines and others\n\n- The field `ContactPair::pair` (which contained two collider handles) has been replaced by two\n  fields: `ContactPair::collider1` and `ContactPair::collider2`.\n- The list of active dynamic bodies is now retrieved with `IslandManager::active_dynamic_bodies`\n  instead of `RigidBodySet::iter_active_dynamic`.\n- The list of active kinematic bodies is now retrieved with `IslandManager::active_kinematic_bodies`\n  instead of `RigidBodySet::iter_active_kinematic`.\n- `NarrowPhase::contacts_with` now returns an `impl Iterator<Item = &ContactPair>` instead of\n  an `Option<impl Iterator<Item = (ColliderHandle, ColliderHandle, &ContactPair)>>`. The colliders\n  handles can be read from the contact-pair itself.\n- `NarrowPhase::intersections_with` now returns an iterator directly instead of an `Option<impl Iterator>`.\n- Rename `PhysicsHooksFlags` to `ActiveHooks`.\n- Add the contact pair as an argument to `EventHandler::handle_contact_event`\n\n## v0.8.0\n\n### Modified\n\n- Switch to nalgebra 0.26.\n\n## v0.7.2\n\n### Added\n\n- Implement `Serialize` and `Deserialize` for the `CCDSolver`.\n\n### Fixed\n\n- Fix a crash that could happen after adding and then removing a collider right away,\n  before stepping the simulation.\n\n## v0.7.1\n\n### Fixed\n\n- Fixed a bug in the broad-phase that could cause non-determinism after snapshot restoration.\n\n## v0.7.0\n\n### Added\n\n- Add the support of **Continuous Collision Detection** (CCD) to\n  make sure that some fast-moving objects (chosen by the user) don't miss any contacts.\n  This is done by using motion-clamping, i.e., each fast-moving rigid-body with CCD enabled will\n  be stopped at the time where their first contact happen. This will result in some \"time loss\" for that\n  rigid-body. This loss of time can be reduced by increasing the maximum number of CCD substeps executed\n  (the default being 1).\n- Add the support of **collider modification**. Now, most of the characteristics of a collider can be\n  modified after the collider has been created.\n- We now use an **implicit friction cone** for handling friction, instead of a pyramidal approximation\n  of the friction cone. This means that friction will now behave in a more isotropic way (i.e. more realistic\n  Coulomb friction).\n- Add the support of **custom filters** for the `QueryPipeline`. So far, interaction groups (bit masks)\n  had to be used to exclude from colliders from a query made with the `QueryPipeline`. Now it is also\n  possible to provide a custom closures to apply arbitrary user-defined filters.\n- It is now possible to solve penetrations using the velocity solver instead of (or alongside) the\n  position solver (this is disabled by default, set `IntegrationParameters::velocity_based_erp` to\n  a value `> 0.0` to enable.).\n\nAdded the methods:\n\n- `ColliderBuilder::halfspace` to create a collider with an unbounded plane shape.\n- `Collider::shape_mut` to get a mutable reference to its shape.\n- `Collider::set_shape`, `::set_restitution_combine_rule`, `::set_position_wrt_parent`, `::set_collision_groups`\n  `::set_solver_groups` to change various properties of a collider after its creation.\n- `RigidBodyBuilder::ccd_enabled` to enable CCD for a rigid-body.\n\n### Modified\n\n- The `target_dist` argument of `QueryPipeline::cast_shape` was removed.\n- `RigidBodyBuilder::mass_properties` has been deprecated, replaced by `::additional_mass_properties`.\n- `RigidBodyBuilder::mass` has been deprecated, replaced by `::additional_mass`.\n- `RigidBodyBuilder::principal_angular_inertia` has been deprecated, replaced\n  by `::additional_principal_angular_inertia`.\n- The field `SolveContact::data` has been replaced by the fields `SolverContact::warmstart_impulse`,\n  `SolverContact::warmstart_tangent_impulse`, and `SolverContact::prev_rhs`.\n- All the fields of `IntegrationParameters` that we don't use have been removed.\n- `NarrowPhase::maintain` has been renamed to `NarrowPhase::handle_user_changes`.\n- `BroadPhase::maintain` has been removed. Use ` BroadPhase::update` directly.\n\n### Fixed\n\n- The Broad-Phase algorithm has been completely reworked to support large colliders properly (until now\n  they could result in very large memory and CPU usage).\n\n## v0.6.1\n\n### Fixed\n\n- Fix a determinism problem that may happen after snapshot restoration, if a rigid-body is sleeping at\n  the time the snapshot is taken.\n\n## v0.6.0\n\n### Added\n\n- The support of **dominance groups** have been added. Each rigid-body is part of a dominance group in [-127; 127]\n  (the default is 0). If two rigid-body are in contact, the one with the highest dominance will act as if it has\n  an infinite mass, making it immune to the forces the other body would apply on it.\n  See [#122](https://github.com/dimforge/rapier/pull/122)\n  for further details.\n- The support for **contact modification** has been added. This can bee used to simulate conveyor belts,\n  one-way platforms and other non-physical effects. It can also be used to simulate materials with\n  variable friction and restitution coefficient on a single collider.\n  See [#120](https://github.com/dimforge/rapier/pull/120)\n  for further details.\n- The support for **joint motors** have been added. This can be used to control the position and/or\n  velocity of a joint based on a spring-like equation. See [#119](https://github.com/dimforge/rapier/pull/119)\n  for further details.\n\n### Removed\n\n- The `ContactPairFilter` and `IntersectionPairFilter` traits have been removed. They are both\n  combined in a single new trait: `PhysicsHooks`.\n\n## v0.5.0\n\nIn this release we are dropping `ncollide` and use our new crate [`parry`](https://parry.rs)\ninstead! This comes with a lot of new features, as well as two new crates: `rapier2d-f64` and\n`rapier3d-f64` for physics simulation with 64-bits floats.\n\n### Added\n\n- Added a `RAPIER.version()` function at the root of the package to retrieve the version of Rapier\n  as a string.\n\nSeveral geometric queries have been added to the `QueryPipeline`:\n\n- `QueryPipeline::intersections_with_ray`: get all colliders intersecting a ray.\n- `QueryPipeline::intersection_with_shape`: get one collider intersecting a shape.\n- `QueryPipeline::project_point`: get the projection of a point on the closest collider.\n- `QueryPipeline::intersections_with_point`: get all the colliders containing a point.\n- `QueryPipeline::cast_shape`: get the first collider intersecting a shape moving linearly\n  (aka. sweep test).\n- `QueryPipeline::intersections_with_shape`: get all the colliders intersecting a shape.\n\nSeveral new shape types are now supported:\n\n- `RoundCuboid`, `Segment`, `Triangle`, `RoundTriangle`, `Polyline`, `ConvexPolygon` (2D only),\n  `RoundConvexPolygon` (2D only), `ConvexPolyhedron` (3D only), `RoundConvexPolyhedron` (3D only),\n  `RoundCone` (3D only).\n\nIt is possible to build `ColliderDesc` using these new shapes:\n\n- `ColliderBuilder::round_cuboid`, `ColliderBuilder::segment`, `ColliderBuilder::triangle`, `ColliderBuilder::round_triangle`,\n  `ColliderBuilder::convex_hull`, `ColliderBuilder::round_convex_hull`, `ColliderBuilder::polyline`,\n  `ColliderBuilder::convex_decomposition`, `ColliderBuilder::round_convex_decomposition`,\n  `ColliderBuilder::convex_polyline` (2D only), `ColliderBuilder::round_convex_polyline` (2D only),\n  `ColliderBuilder::convex_mesh` (3D only),`ColliderBuilder::round_convex_mesh` (3D\n  only), `ColliderBuilder::round_cone` (3D only).\n\nIt is possible to specify different rules for combining friction and restitution coefficients\nof the two colliders involved in a contact with:\n\n- `ColliderDesc::friction_combine_rule`, and `ColliderDesc::restitution_combine_rule`.\n\nVarious RigidBody-related getter and setters have been added:\n\n- `RigidBodyBuilder::gravity_scale`, `RigidBody::gravity_scale`, `RigidBody::set_gravity_scale` to get/set the scale\n  factor applied to the gravity affecting a rigid-body. Setting this to 0.0 will make the rigid-body ignore gravity.\n- `RigidBody::set_linear_damping` and `RigidBody::set_angular_damping` to set the linear and angular damping of\n  the rigid-body.\n- `RigidBodyBuilder::restrict_rotations` to prevent rotations along specific coordinate axes. This replaces the three\n  boolean arguments previously passed to `.set_principal_angular_inertia`.\n\n### Breaking changes\n\nBreaking changes related to contacts:\n\n- The way contacts are represented changed. Refer to the documentation\n  of `parry::query::ContactManifold`, `parry::query::TrackedContact`\n  and `rapier::geometry::ContactManifoldData` and `rapier::geometry::ContactData` for details.\n\nBreaking changes related to rigid-bodies:\n\n- The `RigidBodyDesc.setMass` takes only one argument now. Use `RigidBodyDesc.lockTranslations` to lock the\n  translational\n  motion of the rigid-body.\n- The `RigidBodyDesc.setPrincipalAngularInertia` no longer have boolean parameters to lock rotations.\n  Use `RigidBodyDesc.lockRotations` or `RigidBodyDesc.restrictRotations` to lock the rotational motion of the\n  rigid-body.\n\nBreaking changes related to colliders:\n\n- The collider shape type has been renamed from `ColliderShape` to `SharedShape` (now part of the Parry crate).\n- The `Polygon` shape no longer exists. For a 2D convex polygon, use a `ConvexPolygon` instead.\n- All occurrences of `Trimesh` have been replaced by `TriMesh` (note the change in case).\n\nBreaking changes related to events:\n\n- Rename all occurrences of `Proximity` to `Intersection`.\n- The `Proximity` enum has been removed, it's replaced by a boolean.\n\n## v0.4.2\n\n- Fix a bug in angular inertia tensor computation that could cause rotations not to\n  work properly.\n- Add `RigidBody::set_mass_properties` to set the mass properties of an already-constructed\n  rigid-body.\n\n## v0.4.1\n\n- The `RigidBodyBuilder::principal_inertia` method has been deprecated and renamed to\n  `principal_angular_inertia` for clarity.\n\n## v0.4.0\n\n- The rigid-body `linvel`, `angvel`, and `position` fields are no longer public. Access using\n  their corresponding getters/setters. For example: `rb.linvel()`, `rb.set_linvel(vel, true)`.\n- Add `RigidBodyBuilder::sleeping(true)` to allow the creation of a rigid-body that is asleep\n  at initialization-time.\n\n#### Locking translation and rotations of a rigid-body\n\n- Add `RigidBodyBuilder::lock_rotations` to prevent a rigid-body from rotating because of forces.\n- Add `RigidBodyBuilder::lock_translations` to prevent a rigid-body from translating because of forces.\n- Add `RigidBodyBuilder::principal_inertia` for setting the principal inertia of a rigid-body, and/or\n  preventing the rigid-body from rotating along a specific axis.\n- Change `RigidBodyBuilder::mass` by adding a bool parameter indicating whether or not the collider\n  contributions should be taken into account in the future too.\n\n#### Reading contact and proximity information\n\n- Add `NarrowPhase::contacts_with` and `NarrowPhase::proximities_with` to retrieve all the contact\n  pairs and proximity pairs involving a specific collider.\n- Add `NarrowPhase::contact_pair` and `NarrowPhase::proximity_pair` to retrieve one specific contact\n  pair or proximity pair if it exists.\n- Add `NarrowPhase::contact_pairs`, and `NarrowPhase::proximity_pairs` to retrieve all the contact or\n  proximity pairs detected by the narrow-phase.\n\n## v0.3.2\n\n- Add linear and angular damping. The damping factor can be set with `RigidBodyBuilder::linear_damping` and\n  `RigidBodyBuilder::angular_damping`.\n- Implement `Clone` for almost everything that can be worth cloning.\n- Allow setting the initial mass and mass properties of a rigid-bodies using `RigidBodyBuilder::mass` and\n  `RigidBodyBuilder::mass_properties`.\n- The restitution coefficient of colliders is now taken into account by the physics solver.\n\n## v0.3.1\n\n- Fix non-determinism problem when using triangle-meshes, cone, cylinders, or capsules.\n- Add `JointSet::remove(...)` to remove a joint from the `JointSet`.\n\n## v0.3.0\n\n- Collider shapes are now trait-objects instead of a `Shape` enum.\n- Add a user-defined `u128` to each colliders and rigid-bodies for storing user data.\n- Add the support for `Cylinder`, `RoundCylinder`, and `Cone` shapes.\n- Added the support for collision filtering based on bit masks (often known as collision groups, collision masks, or\n  collision layers in other physics engines). Each collider has two groups. Their `collision_groups` is used for\n  filtering\n  what pair of colliders should have their contacts computed by the narrow-phase. Their `solver_groups` is used for\n  filtering\n  what pair of colliders should have their contact forces computed by the constraints solver.\n- Collision groups can also be used to filter what collider should be hit by a ray-cast performed by\n  the `QueryPipeline`.\n- Added collision filters based on user-defined trait-objects. This adds two traits `ContactPairFilter` and\n  `ProximityPairFilter` that allows user-defined logic for determining if two colliders/sensors are allowed to interact.\n- The `PhysicsPipeline::step` method now takes two additional arguments: the optional `&ContactPairFilter`\n  and `&ProximityPairFilter`\n  for filtering contact and proximity pairs.\n\n## v0.2.1\n\n- Fix panic in TriMesh construction and QueryPipeline update caused by a stack overflow or a subtraction underflow.\n\n## v0.2.0\n\nThe most significant change on this version is the addition of the `QueryPipeline` responsible for performing\nscene-wide queries. So far only ray-casting has been implemented.\n\n- Add `ColliderSet::remove(...)` to remove a collider from the `ColliderSet`.\n- Replace `PhysicsPipeline::remove_rigid_body` by `RigidBodySet::remove`.\n- The `JointSet.iter()` now returns an iterator yielding `(JointHandle, &Joint)` instead of just `&Joint`.\n- Add `ColliderDesc::translation(...)` to set the translation of a collider relative to the rigid-body it is attached\n  to.\n- Add `ColliderDesc::rotation(...)` to set the rotation of a collider relative to the rigid-body it is attached to.\n- Add `ColliderDesc::position(...)` to set the position of a collider relative to the rigid-body it is attached to.\n- Add `Collider::position_wrt_parent()` to get the position of a collider relative to the rigid-body it is attached to.\n- Modify `RigidBody::set_position(...)` so it also resets the next kinematic position to the same value.\n- Deprecate `Collider::delta()` in favor of the new `Collider::position_wrt_parent()`.\n- Fix multiple issues occurring when having colliders resulting in a non-zero center-of-mass.\n- Fix a crash happening when removing a rigid-body with a collider, stepping the simulation, adding another rigid-body\n  with a collider, and stepping the simulation again.\n- Fix NaN when detection contacts between two polygonal faces where one has a normal perfectly perpendicular to the\n  separating vector.\n- Fix bug collision detection between trimeshes and other shapes. The bug appeared depending on whether the trimesh\n  collider was added before the other shape's collider or after.\n"
        },
        {
          "name": "CODE_OF_CONDUCT.md",
          "type": "blob",
          "size": 4.3759765625,
          "content": "# The Dimforge Code of Conduct\n\n## Conduct\n\n- We are committed to providing a friendly, safe and welcoming environment for all, regardless of level of experience, gender identity and expression, sexual orientation, disability, personal appearance, body size, race, ethnicity, age, religion, nationality, or other similar characteristic.\n- On Discord, the forums, IRC, GitHub, or any other community area, please avoid using overtly sexual nicknames or other nicknames that might detract from a friendly, safe and welcoming environment for all.\n- Please be kind and courteous. There's no need to be mean or rude.\n- Respect that people have differences of opinion and that every design or implementation choice carries a trade-off and numerous costs. There is seldom a right answer.\n- Please keep unstructured critique to a minimum. If you have solid ideas you want to experiment with, make a fork and see how it works.\n- We will exclude you from interaction if you insult, demean or harass anyone. That is not welcome behavior; we strive to be inclusive. In particular, we don't tolerate behavior that excludes people in socially marginalized groups.\n- Private harassment is also unacceptable. No matter who you are, if you feel you have been or are being harassed or made uncomfortable by a community member, please contact one of the channel ops or any of the [Dimforge moderation team][mods] immediately. Whether you're a regular contributor or a newcomer, we care about making this community a safe place for you and we've got your back.\n- Likewise any spamming, trolling, flaming, baiting or other attention-stealing behavior is not welcome.\n- Keep political and religious discussions out of the public Dimforge spaces.\n\n## Moderation\n\nThese are the policies for upholding our community's standards of conduct. If you feel that a thread needs moderation, please contact the [Dimforge moderation team][mods].\n\n1. Remarks that violate the Dimforge standards of conduct, including hateful, hurtful, oppressive, or exclusionary remarks, are not allowed. (Cursing in general is discouraged, and never tolerated if targeting another user, and never in a hateful manner.)\n1. Remarks that moderators find inappropriate, whether listed in the code of conduct or not, are also not allowed.\n1. Moderators will first respond to such remarks with a warning.\n1. If the warning is unheeded, the user will be \"kicked,\" i.e., kicked out of the communication channel to cool off.\n1. If the user comes back and continues to make trouble, they will be banned, i.e., indefinitely excluded.\n1. Moderators may choose at their discretion to un-ban the user if it was a first offense and they offer the offended party a genuine apology.\n1. If a moderator bans someone and you think it was unjustified, please take it up with that moderator, or with a different moderator, **in private**. Complaints about bans in-channel are not allowed.\n1. Moderators, organization members, and anyone closely involved with the Dimforge projects are held to a higher standard than other community members. If a moderator creates an inappropriate situation, they should expect less leeway than others.\n\nIn the Dimforge community we strive to go the extra step to look out for each other. Don't just aim to be technically unimpeachable, try to be your best self. In particular, avoid flirting with offensive or sensitive issues, particularly if they're off-topic; this all too often leads to unnecessary fights, hurt feelings, and damaged trust; worse, it can drive people away from the community entirely.\n\nAnd if someone takes issue with something you said or d resist the urge to be defensive. Just stop doing what it was they complained about and apologize. Even if you feel you were misinterpreted or unfairly accused, chances are good there was something you could've communicated better — remember that it's your responsibility to make your fellow Dimforge community members comfortable. Everyone wants to get along and we are all here first and foremost because we want to talk about making games. You will find that people will be eager to assume good intent and forgive as long as you earn their trust.\n\nThe enforcement policies listed above apply to all official Dimforge venues; including all Dimforge Discord channels; GitHub repositories under Dimforge.\n\n_This Code of Conduct is based on the Rust Code of Conduct, available here: https://www.rust-lang.org/conduct.html_\n\n[mods]: mailto:mods@dimforge.com"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 4.861328125,
          "content": "# Contributing to Rapier\n\nThank you for wanting to contribute! Contribution can take many forms, including:\n- Reporting a bug.\n- Submitting a fix.\n- Fixing typos.\n- Improving the docs.\n- [Donations on GitHub Sponsors](https://github.com/sponsors/dimforge).\n\nIt is strongly recommended to [open an issue](https://github.com/dimforge/rapier/issues) or to discuss\nwith us [on Discord][discord] before fixing complicated issues, or implementing new\nfeatures.\n\n\n## Contributing to the Rust code\nThe Rust source code of the Rapier physics engines is available  on our `rapier` repository\n[on GitHub](https://github.com/dimforge/rapier.rs).\n\n1. Fork our `rapier` repository [on GitHub](https://github.com/dimforge/rapier).\n2. Clone the repository and make the necessary changes.\n3. In order to debug your changes and check that it works, do the following:\n   - Run the tests `cargo test`\n   - Run the 2D examples and see if they behave as expected: `cargo run --release --bin all_examples2`\n   - Run the 3D examples and see if they behave as expected: `cargo run --release --bin all_examples3`\n   - Run the 2D examples with the `parallel` and `simd-stable` features enabled: `cargo run --release --bin all_examples2 --features parallel,simd-stable`\n   - Run the 3D examples with the `parallel` and `simd-stable` features enabled: `cargo run --release --bin all_examples3 --features parallel,simd-stable`\n4. Once you are satisfied with your changes, submit them by [opening a Pull Request](https://github.com/dimforge/rapier/pulls) on GitHub.\n5. If that Pull Request does something you need urgently, or if you think it has been forgotten, don't hesitate\n   to ask **@sebcrozet** directly [on Discord][discord] for a review.\n6. Iterate with the reviewer until the PR gets merged.\n\n## Contributing to the user-guide [rapier](https://rapier.rs)\nThe [official website](https://rapier.rs) for Rapier is built with [Docusaurus 2](https://docusaurus.io/).\nIts source code can be found on our `rapier.rs` repository [on GitHub](https://github.com/dimforge/rapier.rs).\nIf you  find a typo or some outdated information on the website, please don't hesitate to reach\nout! We can't stress enough how helpful it is for you to report (or fix) typo errors.\n\nIf you would like to fix it yourself, here is the procedure:\n\n1. Fork our `rapier.rs` repository [on GitHub](https://github.com/dimforge/rapier.rs).\n2. Clone the repository and make the necessary changes.\n3. In order to debug your changes and check that it works, do the following:\n    - `cd website; yarn install; yarn start;` This will open the website on your browser locally.\n      The default local address is http://localhost:3000 .\n4. Once you are satisfied with your changes, submit them by [opening a Pull Request](https://github.com/dimforge/rapier.rs/pulls) on GitHub.\n5. If that Pull Request does something you need urgently, or if you think it has been forgotten, don't hesitate\n   to ask **@sebcrozet** directly [on Discord][discord] for a review.\n6. Iterate with the reviewer until the PR gets merged.\n\n## Contributing to the JavaScript/TypeScript bindings\nThe source code of the official JavaScript/TypeScript bindings for Rapier are available\non our `rapier.js` repository [on GitHub](https://github.com/dimforge/rapier.js).\n\nYou will have to make sure that you have [wasm-pack](https://github.com/rustwasm/wasm-pack) installed because\nit is responsible for generating the low-level bindings. In order to modify the bindings and test your\nchanges you may:\n\n1. Fork our `rapier.js` repository [on GitHub](https://github.com/dimforge/rapier.js).\n2. Clone the repository and make the necessary changes.\n3. In order to debug your changes and check that it works, do the following for the 3D version of rapier (the procedure\n   for the 2D version is similar):\n   - `cd rapier3d; npm install; ./build_all.sh`. This will build the JS bindings, TS type definitions, and generate\n      the documentation. This will take several minutes to complete.\n   - After making changes to the Rust code on that repository, you need to run `./build_rust.sh`.\n   - After making changes to the TypeScript code on that repository, you need to run `./build_typescript.sh`.\n   - To test your changes, go back to the repository's root directory, and do: `cd testbed3d; npm install; npm link ../rapier3d/pkg; npm run start`.\n     This will open the 3D examples on your browser.\n   - Our build system for these JS bindings is still a bit messy right now. If you have any trouble, don't\n     hesitate to contact us [on Discord][discord].\n4. Once you are satisfied with your changes, submit them by [opening a Pull Request](https://github.com/dimforge/rapier.js/pulls) on GitHub.\n5. If that Pull Request does something you need urgently, or if you think it has been forgotten, don't hesitate\n   to ask **@sebcrozet** directly [on Discord][discord] for a review.\n6. Iterate with the reviewer until the PR gets merged.\n\n[discord]: https://discord.gg/vt9DJSW\n"
        },
        {
          "name": "Cargo.toml",
          "type": "blob",
          "size": 2.041015625,
          "content": "[workspace]\nmembers = [\n    \"crates/rapier2d\",\n    \"crates/rapier2d-f64\",\n    \"crates/rapier_testbed2d\",\n    \"crates/rapier_testbed2d-f64\",\n    \"examples2d\",\n    \"benchmarks2d\",\n    \"crates/rapier3d\",\n    \"crates/rapier3d-f64\",\n    \"crates/rapier_testbed3d\",\n    \"crates/rapier_testbed3d-f64\",\n    \"examples3d\",\n    \"examples3d-f64\",\n    \"benchmarks3d\",\n    \"crates/rapier3d-urdf\",\n    \"crates/rapier3d-meshloader\",\n]\nresolver = \"2\"\n\n[workspace.lints.clippy]\nneedless_lifetimes = \"allow\"\n\n[patch.crates-io]\n#wrapped2d = { git = \"https://github.com/Bastacyclop/rust_box2d.git\" }\n#xurdf = { path = \"../xurdf/xurdf\" }\n\n#simba = { path = \"../simba\" }\n#kiss3d = { path = \"../kiss3d\" }\n#parry2d = { path = \"../parry/crates/parry2d\" }\n#parry3d = { path = \"../parry/crates/parry3d\" }\n#parry2d-f64 = { path = \"../parry/crates/parry2d-f64\" }\n#parry3d-f64 = { path = \"../parry/crates/parry3d-f64\" }\n#nalgebra = { path = \"../nalgebra\" }\n\n\n#kiss3d = { git = \"https://github.com/sebcrozet/kiss3d\" }\n#nalgebra = { git = \"https://github.com/dimforge/nalgebra\", branch = \"dev\" }\n#parry2d = { git = \"https://github.com/dimforge/parry\", branch = \"master\" }\n#parry3d = { git = \"https://github.com/dimforge/parry\", branch = \"master\" }\n#parry2d-f64 = { git = \"https://github.com/dimforge/parry\", branch = \"master\" }\n#parry3d-f64 = { git = \"https://github.com/dimforge/parry\", branch = \"master\" }\n\n# See https://github.com/EmbarkStudios/puffin/pull/234\npuffin_egui = { git = \"https://github.com/tedsteen/puffin.git\", rev = \"11771ebe00fd257aedbb545df3339ad597b1cc34\" }\n\n\n# # For feature unstable-puffin-pr-235\n# # See https://github.com/dimforge/rapier/issues/760.\n# puffin_egui = { version = \"0.29\", optional = true, git = \"https://github.com/Vrixyz/puffin.git\", branch = \"expose_ui_options\" }\n# puffin = { version = \"0.19\", optional = true, git = \"https://github.com/Vrixyz/puffin.git\", branch = \"expose_ui_options\" }\n# # \n\n[profile.release]\n#debug = true\n#codegen-units = 1\n#lto = true\n\n[profile.dev]\nopt-level = 1\n\n\n#[profile.dev.package.rapier3d]\n#opt-level = 3\n#\n#[profile.dev.package.kiss3d]\n#opt-level = 3\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 11.0810546875,
          "content": "                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"[]\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright 2020 Sébastien Crozet\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 2.677734375,
          "content": "<p align=\"center\">\n  <img src=\"https://www.rapier.rs/img/rapier_logo_color_textpath_dark.svg\" alt=\"crates.io\">\n</p>\n<p align=\"center\">\n    <a href=\"https://discord.gg/vt9DJSW\">\n        <img src=\"https://img.shields.io/discord/507548572338880513.svg?logo=discord&colorB=7289DA\">\n    </a>\n    <a href=\"https://github.com/dimforge/rapier/actions\">\n        <img src=\"https://github.com/dimforge/rapier/workflows/Rapier%20CI%20build/badge.svg\" alt=\"Build status\">\n    </a>\n    <a href=\"https://crates.io/crates/rapier2d\">\n         <img src=\"https://img.shields.io/crates/v/rapier2d.svg?style=flat-square\" alt=\"crates.io\">\n    </a>\n    <a href=\"https://crates.io/crates/rapier3d\">\n         <img src=\"https://img.shields.io/crates/v/rapier3d.svg?style=flat-square\" alt=\"crates.io\">\n    </a>\n    <a href=\"https://opensource.org/licenses/Apache-2.0\">\n        <img src=\"https://img.shields.io/badge/License-Apache%202.0-blue.svg\">\n    </a>\n</p>\n<p align = \"center\">\n    <strong>\n        <a href=\"https://rapier.rs\">Website</a> | <a href=\"https://rapier.rs/docs/\">Documentation</a>\n    </strong>\n</p>\n\n-----\n\n<p align = \"center\">\n<b>2D and 3D physics engines</b>\n<i>for the Rust programming language.</i>\n</p>\n\n-----\n\n## What is Rapier?\n\nRapier is a set of 2D and 3D physics engines for games, animation, and robotics. These crates\nare `rapier2d`, `rapier3d`, `rapier2d-f64`, and `rapier3d-f64`. They are written with the Rust\nprogramming language, by the [Dimforge](https://dimforge.com) organization. It is forever free\nand open-source!\n\n## Getting started\n\nThe easiest way to get started with Rapier is to:\n\n1. Read the [user-guides](https://www.rapier.rs/docs/).\n2. Play with the examples: `cargo run --release --bin all_examples2` and `cargo run --release --bin all_examples3`.\n   Their source code are available on the `examples2d/` and `examples3d/` directory.\n3. Don't hesitate to ask for help on [Discord](https://discord.gg/vt9DJSW), or by opening an issue on GitHub.\n\n## Resources and discussions\n\n- [Dimforge](https://dimforge.com): See all the open-source projects we are working on! Follow our announcements\n  on our [blog](https://www.dimforge.com/blog).\n- [User guide](https://www.rapier.rs/docs/): Learn to use Rapier in your project by reading the official User Guides.\n- [Discord](https://discord.gg/vt9DJSW): Come chat with us, get help, suggest features, on Discord!\n- [NPM packages](https://www.npmjs.com/search?q=%40dimforge): Check out our NPM packages for Rapier, if you need to\n  use it with JavaScript/Typescript.\n\nPlease make sure to familiarize yourself with our [Code of Conduct](CODE_OF_CONDUCT.md)\nand our [Contribution Guidelines](CONTRIBUTING.md) before contributing or participating in\ndiscussions with the community.\n"
        },
        {
          "name": "assets",
          "type": "tree",
          "content": null
        },
        {
          "name": "benchmarks2d",
          "type": "tree",
          "content": null
        },
        {
          "name": "benchmarks3d",
          "type": "tree",
          "content": null
        },
        {
          "name": "crates",
          "type": "tree",
          "content": null
        },
        {
          "name": "examples2d",
          "type": "tree",
          "content": null
        },
        {
          "name": "examples3d-f64",
          "type": "tree",
          "content": null
        },
        {
          "name": "examples3d",
          "type": "tree",
          "content": null
        },
        {
          "name": "publish-all.sh",
          "type": "blob",
          "size": 0.427734375,
          "content": "#! /bin/bash\n\nif [[ \"$PUBLISH_MODE\" == 1 ]]\nthen\n    ./scripts/publish-rapier.sh &&\n    ./scripts/publish-testbeds.sh &&\n    ./scripts/publish-extra-formats.sh\nelse\n    echo \"Running in dry mode, re-run with \\`PUBLISH_MODE=1 publish-all.sh\\` to actually publish.\"\n\n    DRY_RUN=\"--dry-run\" ./scripts/publish-rapier.sh &&\n    DRY_RUN=\"--dry-run\" ./scripts/publish-testbeds.sh &&\n    DRY_RUN=\"--dry-run\" ./scripts/publish-extra-formats.sh\nfi"
        },
        {
          "name": "rustfmt.toml",
          "type": "blob",
          "size": 0.0791015625,
          "content": "#indent_style = \"Block\"\n#where_single_line = true\n#brace_style = \"PreferSameLine\""
        },
        {
          "name": "scripts",
          "type": "tree",
          "content": null
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "src_testbed",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}