{
  "metadata": {
    "timestamp": 1736709207970,
    "page": 482,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjQ5MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "nullpo-head/wsl-distrod",
      "stars": 1928,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 6.7158203125,
          "content": "# Generated by Cargo\n# will have compiled files and executables\ndebug/\ntarget/\n\n# These are backup files generated by rustfmt\n**/*.rs.bk\n\n# MSVC Windows builds of rustc generate these, which store debugging information\n*.pdb\n\n## Ignore Visual Studio temporary files, build results, and\n## files generated by popular Visual Studio add-ons.\n##\n## Get latest from https://github.com/github/gitignore/blob/master/VisualStudio.gitignore\n\n# User-specific files\n*.rsuser\n*.suo\n*.user\n*.userosscache\n*.sln.docstates\n\n# User-specific files (MonoDevelop/Xamarin Studio)\n*.userprefs\n\n# Mono auto generated files\nmono_crash.*\n\n# Build results\n[Dd]ebug/\n[Dd]ebugPublic/\n[Rr]elease/\n[Rr]eleases/\nx64/\nx86/\n[Ww][Ii][Nn]32/\n[Aa][Rr][Mm]/\n[Aa][Rr][Mm]64/\nbld/\n[Bb]in/\n[Oo]bj/\n[Ll]og/\n[Ll]ogs/\n\n# Visual Studio 2015/2017 cache/options directory\n.vs/\n# Uncomment if you have tasks that create the project's static files in wwwroot\n#wwwroot/\n\n# Visual Studio 2017 auto generated files\nGenerated\\ Files/\n\n# MSTest test Results\n[Tt]est[Rr]esult*/\n[Bb]uild[Ll]og.*\n\n# NUnit\n*.VisualState.xml\nTestResult.xml\nnunit-*.xml\n\n# Build Results of an ATL Project\n[Dd]ebugPS/\n[Rr]eleasePS/\ndlldata.c\n\n# Benchmark Results\nBenchmarkDotNet.Artifacts/\n\n# .NET Core\nproject.lock.json\nproject.fragment.lock.json\nartifacts/\n\n# ASP.NET Scaffolding\nScaffoldingReadMe.txt\n\n# StyleCop\nStyleCopReport.xml\n\n# Files built by Visual Studio\n*_i.c\n*_p.c\n*_h.h\n*.ilk\n*.meta\n*.obj\n*.iobj\n*.pch\n*.pdb\n*.ipdb\n*.pgc\n*.pgd\n*.rsp\n*.sbr\n*.tlb\n*.tli\n*.tlh\n*.tmp\n*.tmp_proj\n*_wpftmp.csproj\n*.log\n*.tlog\n*.vspscc\n*.vssscc\n.builds\n*.pidb\n*.svclog\n*.scc\n\n# Chutzpah Test files\n_Chutzpah*\n\n# Visual C++ cache files\nipch/\n*.aps\n*.ncb\n*.opendb\n*.opensdf\n*.sdf\n*.cachefile\n*.VC.db\n*.VC.VC.opendb\n\n# Visual Studio profiler\n*.psess\n*.vsp\n*.vspx\n*.sap\n\n# Visual Studio Trace Files\n*.e2e\n\n# TFS 2012 Local Workspace\n$tf/\n\n# Guidance Automation Toolkit\n*.gpState\n\n# ReSharper is a .NET coding add-in\n_ReSharper*/\n*.[Rr]e[Ss]harper\n*.DotSettings.user\n\n# TeamCity is a build add-in\n_TeamCity*\n\n# DotCover is a Code Coverage Tool\n*.dotCover\n\n# AxoCover is a Code Coverage Tool\n.axoCover/*\n!.axoCover/settings.json\n\n# Coverlet is a free, cross platform Code Coverage Tool\ncoverage*.json\ncoverage*.xml\ncoverage*.info\n\n# Visual Studio code coverage results\n*.coverage\n*.coveragexml\n\n# NCrunch\n_NCrunch_*\n.*crunch*.local.xml\nnCrunchTemp_*\n\n# MightyMoose\n*.mm.*\nAutoTest.Net/\n\n# Web workbench (sass)\n.sass-cache/\n\n# Installshield output folder\n[Ee]xpress/\n\n# DocProject is a documentation generator add-in\nDocProject/buildhelp/\nDocProject/Help/*.HxT\nDocProject/Help/*.HxC\nDocProject/Help/*.hhc\nDocProject/Help/*.hhk\nDocProject/Help/*.hhp\nDocProject/Help/Html2\nDocProject/Help/html\n\n# Click-Once directory\npublish/\n\n# Publish Web Output\n*.[Pp]ublish.xml\n*.azurePubxml\n# Note: Comment the next line if you want to checkin your web deploy settings,\n# but database connection strings (with potential passwords) will be unencrypted\n*.pubxml\n*.publishproj\n\n# Microsoft Azure Web App publish settings. Comment the next line if you want to\n# checkin your Azure Web App publish settings, but sensitive information contained\n# in these scripts will be unencrypted\nPublishScripts/\n\n# NuGet Packages\n*.nupkg\n# NuGet Symbol Packages\n*.snupkg\n# The packages folder can be ignored because of Package Restore\n**/[Pp]ackages/*\n# except build/, which is used as an MSBuild target.\n!**/[Pp]ackages/build/\n# Uncomment if necessary however generally it will be regenerated when needed\n#!**/[Pp]ackages/repositories.config\n# NuGet v3's project.json files produces more ignorable files\n*.nuget.props\n*.nuget.targets\n\n# Nuget personal access tokens and Credentials\nnuget.config\n\n# Microsoft Azure Build Output\ncsx/\n*.build.csdef\n\n# Microsoft Azure Emulator\necf/\nrcf/\n\n# Windows Store app package directories and files\nAppPackages/\nBundleArtifacts/\nPackage.StoreAssociation.xml\n_pkginfo.txt\n*.appx\n*.appxbundle\n*.appxupload\n\n# Visual Studio cache files\n# files ending in .cache can be ignored\n*.[Cc]ache\n# but keep track of directories ending in .cache\n!?*.[Cc]ache/\n\n# Others\nClientBin/\n~$*\n*~\n*.dbmdl\n*.dbproj.schemaview\n*.jfm\n*.pfx\n*.publishsettings\norleans.codegen.cs\n\n# Including strong name files can present a security risk\n# (https://github.com/github/gitignore/pull/2483#issue-259490424)\n#*.snk\n\n# Since there are multiple workflows, uncomment next line to ignore bower_components\n# (https://github.com/github/gitignore/pull/1529#issuecomment-104372622)\n#bower_components/\n\n# RIA/Silverlight projects\nGenerated_Code/\n\n# Backup & report files from converting an old project file\n# to a newer Visual Studio version. Backup files are not needed,\n# because we have git ;-)\n_UpgradeReport_Files/\nBackup*/\nUpgradeLog*.XML\nUpgradeLog*.htm\nServiceFabricBackup/\n*.rptproj.bak\n\n# SQL Server files\n*.mdf\n*.ldf\n*.ndf\n\n# Business Intelligence projects\n*.rdl.data\n*.bim.layout\n*.bim_*.settings\n*.rptproj.rsuser\n*- [Bb]ackup.rdl\n*- [Bb]ackup ([0-9]).rdl\n*- [Bb]ackup ([0-9][0-9]).rdl\n\n# Microsoft Fakes\nFakesAssemblies/\n\n# GhostDoc plugin setting file\n*.GhostDoc.xml\n\n# Node.js Tools for Visual Studio\n.ntvs_analysis.dat\nnode_modules/\n\n# Visual Studio 6 build log\n*.plg\n\n# Visual Studio 6 workspace options file\n*.opt\n\n# Visual Studio 6 auto-generated workspace file (contains which files were open etc.)\n*.vbw\n\n# Visual Studio LightSwitch build output\n**/*.HTMLClient/GeneratedArtifacts\n**/*.DesktopClient/GeneratedArtifacts\n**/*.DesktopClient/ModelManifest.xml\n**/*.Server/GeneratedArtifacts\n**/*.Server/ModelManifest.xml\n_Pvt_Extensions\n\n# Paket dependency manager\n.paket/paket.exe\npaket-files/\n\n# FAKE - F# Make\n.fake/\n\n# CodeRush personal settings\n.cr/personal\n\n# Python Tools for Visual Studio (PTVS)\n__pycache__/\n*.pyc\n\n# Cake - Uncomment if you are using it\n# tools/**\n# !tools/packages.config\n\n# Tabs Studio\n*.tss\n\n# Telerik's JustMock configuration file\n*.jmconfig\n\n# BizTalk build output\n*.btp.cs\n*.btm.cs\n*.odx.cs\n*.xsd.cs\n\n# OpenCover UI analysis results\nOpenCover/\n\n# Azure Stream Analytics local run output\nASALocalRun/\n\n# MSBuild Binary and Structured Log\n*.binlog\n\n# NVidia Nsight GPU debugger configuration file\n*.nvuser\n\n# MFractors (Xamarin productivity tool) working folder\n.mfractor/\n\n# Local History for Visual Studio\n.localhistory/\n\n# BeatPulse healthcheck temp database\nhealthchecksdb\n\n# Backup folder for Package Reference Convert tool in Visual Studio 2017\nMigrationBackup/\n\n# Ionide (cross platform F# VS Code tools) working folder\n.ionide/\n\n# Fody - auto-generated XML schema\nFodyWeavers.xsd\n\n# VS Code files for those working on multiple tools\n.vscode/*\n!.vscode/settings.json\n!.vscode/tasks.json\n!.vscode/launch.json\n!.vscode/extensions.json\n*.code-workspace\n\n# Local History for Visual Studio Code\n.history/\n\n# Windows Installer files from build outputs\n*.cab\n*.msi\n*.msix\n*.msm\n*.msp\n\n# JetBrains Rider\n.idea/\n*.sln.iml\n\n\n## Distrod\n\nrootfs\nrootfs.tar.gz\n"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 4.8359375,
          "content": "## [0.1.7](https://github.com/nullpo-head/wsl-distrod/compare/v0.1.6...v0.1.7) (2022-07-07)\n\n\n### Bug Fixes\n\n* Bind mount `/tmp/.X11-unix` for newer version of WSL2 ([#57](https://github.com/nullpo-head/wsl-distrod/issues/57)) ([921bc3c](https://github.com/nullpo-head/wsl-distrod/commit/921bc3c2262aae4cd4656be800371bbbde5770eb)), closes [#56](https://github.com/nullpo-head/wsl-distrod/issues/56)\n\n\n\n## [0.1.6](https://github.com/nullpo-head/wsl-distrod/compare/v0.1.5...v0.1.6) (2022-07-06)\n\n\n### Bug Fixes\n\n* ci: Fix version command reported wrong version ([#58](https://github.com/nullpo-head/wsl-distrod/issues/58)) ([fd9bbdc](https://github.com/nullpo-head/wsl-distrod/commit/fd9bbdcce953b2660207aad2b59ec91ab210a621))\n\n\n\n## [0.1.5](https://github.com/nullpo-head/wsl-distrod/compare/v0.1.4...v0.1.5) (2022-01-17)\n\n\n### Bug Fixes\n\n* Clean up /etc/environment when distrod is disabled. ([#32](https://github.com/nullpo-head/wsl-distrod/issues/32)) ([fc28178](https://github.com/nullpo-head/wsl-distrod/commit/fc281789900c561eb933d460e6b39483191fbca2))\n* Fix SystemdUnitDisabler followed absolute symbolic links ([#34](https://github.com/nullpo-head/wsl-distrod/issues/34)) ([533ee3f](https://github.com/nullpo-head/wsl-distrod/commit/533ee3f942d31f205755c65f6ca934b2086f66c3))\n* Update hostname in hosts ([#33](https://github.com/nullpo-head/wsl-distrod/issues/33)) ([973f9e9](https://github.com/nullpo-head/wsl-distrod/commit/973f9e9406de7d84e6aa763e7fa7f367c9f282f0))\n\n\n\n## [0.1.4](https://github.com/nullpo-head/wsl-distrod/compare/v0.1.3...v0.1.4) (2021-11-20)\n\n\n### Bug Fixes\n\n* Fix mount argument, which caused undocumented behavior ([b59c6f6](https://github.com/nullpo-head/wsl-distrod/commit/b59c6f698e5310e7361402a37fce0c8f9f369f57))\n\n\n\n## [0.1.3](https://github.com/nullpo-head/wsl-distrod/compare/v0.1.2...v0.1.3) (2021-11-14)\n\n\n### Bug Fixes\n\n* Fix a tar archive containing files with log path/linkname was not handled correctly (Fix [#6](https://github.com/nullpo-head/wsl-distrod/issues/6)) ([aeb96fd](https://github.com/nullpo-head/wsl-distrod/commit/aeb96fd3fc5a01eac88ca858d3c246ee13cf0e18))\n\n\n\n## [0.1.2](https://github.com/nullpo-head/wsl-distrod/compare/v0.1.1...v0.1.2) (2021-11-09)\n\n\n### Bug Fixes\n\n* Fix scheduling task was not working on Windows of non-English locale. (Fix [#4](https://github.com/nullpo-head/wsl-distrod/issues/4)) ([b5ded6f](https://github.com/nullpo-head/wsl-distrod/commit/b5ded6fba0e6d43fd0f719efa9ed7e314dd178d7))\n\n\n\n## [0.1.1](https://github.com/nullpo-head/wsl-distrod/compare/v0.1.0-pre13...v0.1.1) (2021-11-08)\n\n\n### Bug Fixes\n\n* Fix autostart was failing for light-weight images from linuxcontainers.org ([6e73743](https://github.com/nullpo-head/wsl-distrod/commit/6e73743efa723fbe4e03cc6b1fb2758a5702b531))\n* Fix set_default_user was not working on Win11 with distros with custom names ([765fc9f](https://github.com/nullpo-head/wsl-distrod/commit/765fc9f3bf329350f025b86c41e55a99d6bd6735))\n* Fix WSL's correct resolv.conf was removed during installation on Windows ([3a029e4](https://github.com/nullpo-head/wsl-distrod/commit/3a029e44c3e13bc8910dd33828ddfc659ca53ed2))\n* Network services are now completely disabled for robustness rather than tweaked ([806073b](https://github.com/nullpo-head/wsl-distrod/commit/806073b25453137e2db4127a1c66c6ecbb47a0cf))\n\n\n\n# [0.1.0-pre13](https://github.com/nullpo-head/wsl-distrod/compare/v0.1.0-pre12...v0.1.0-pre13) (2021-11-07)\n\n\n\n# [0.1.0-pre12](https://github.com/nullpo-head/wsl-distrod/compare/v0.1.0-pre11...v0.1.0-pre12) (2021-11-06)\n\n\n\n# [0.1.0-pre11](https://github.com/nullpo-head/wsl-distrod/compare/v0.1.0-pre10...v0.1.0-pre11) (2021-10-30)\n\n\n\n# [0.1.0-pre10](https://github.com/nullpo-head/wsl-distrod/compare/v0.1.0-pre9...v0.1.0-pre10) (2021-10-30)\n\n\n### Reverts\n\n* Revert \"Testing adding a after the first distrod launch\" ([78b2bb3](https://github.com/nullpo-head/wsl-distrod/commit/78b2bb326abd95a7d22d67ffc86efe9c1553c3d4))\n\n\n\n# [0.1.0-pre9](https://github.com/nullpo-head/wsl-distrod/compare/v0.1.0-pre8...v0.1.0-pre9) (2021-10-28)\n\n\n\n# [0.1.0-pre8](https://github.com/nullpo-head/wsl-distrod/compare/v0.1.0-pre7...v0.1.0-pre8) (2021-10-27)\n\n\n\n# [0.1.0-pre7](https://github.com/nullpo-head/wsl-distrod/compare/v0.1.0-pre6...v0.1.0-pre7) (2021-10-27)\n\n\n\n# [0.1.0-pre6](https://github.com/nullpo-head/wsl-distrod/compare/v0.1.0-pre5...v0.1.0-pre6) (2021-10-26)\n\n\n\n# [0.1.0-pre5](https://github.com/nullpo-head/wsl-distrod/compare/v0.1.0-pre4...v0.1.0-pre5) (2021-10-23)\n\n\n\n# [0.1.0-pre4](https://github.com/nullpo-head/wsl-distrod/compare/v0.1.0-pre3...v0.1.0-pre4) (2021-08-22)\n\n\n\n# [0.1.0-pre3](https://github.com/nullpo-head/wsl-distrod/compare/v0.1.0-pre2...v0.1.0-pre3) (2021-08-17)\n\n\n\n# [0.1.0-pre2](https://github.com/nullpo-head/wsl-distrod/compare/v0.1.0-pre1...v0.1.0-pre2) (2021-08-16)\n\n\n\n# [0.1.0-pre1](https://github.com/nullpo-head/wsl-distrod/compare/v0.1.0-pre0...v0.1.0-pre1) (2021-08-10)\n\n\n\n# 0.1.0-pre0 (2021-08-09)\n\n\n\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.0439453125,
          "content": "MIT License\n\nCopyright (c) 2021 Takaya Saeki\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "Makefile",
          "type": "blob",
          "size": 1.62890625,
          "content": "OUTPUT_ROOTFS_PATH ?= distrod/distrod_wsl_launcher/resources/distrod_root.tar.gz\n\nbuild: distrod-release\n\nrootfs: distrod-bins distrod/target/release/portproxy.exe\n\t./distrod_packer/distrod_packer ./distrod $(OUTPUT_ROOTFS_PATH)\n\ndistrod-release: distrod-bins distrod/target/release/portproxy.exe\n\t./distrod_packer/distrod_packer ./distrod opt_distrod.tar.gz --pack-distrod-opt-dir\n\ndistrod-bins:\n\tcd distrod; cargo build --release -p distrod -p distrod-exec -p portproxy\n\nunit-test-linux:\n\tcd distrod; cargo test --verbose -p libs -p portproxy -p distrod-exec ${TEST_TARGETS}\n\nintegration-test-linux:\n\tcd distrod/distrod/tests; ./test_runner.sh run\n\nenter-integration-test-env:\n\t@echo Run 'cargo test -p distrod'.\n\tcd distrod/distrod/tests; ./test_runner.sh enter\n\nALL_DISTROS_IN_TESTING=ubuntu debian archlinux fedora centos almalinux rockylinux kali mint opensuse amazonlinux oracle gentoo\nintegration-test-linux-all-distros:\n\tcd distrod/distrod/tests; \\\n    for distro in $(ALL_DISTROS_IN_TESTING); do \\\n\t\t DISTRO_TO_TEST=$${distro} ./test_runner.sh run; \\\n\tdone\n\ntest-linux: lint unit-test-linux integration-test-linux\n\nlint:\n\tshellcheck install.sh\n\nclean:\n\tcd distrod; cargo clean; cargo.exe clean\n\nifneq ($(shell uname -a | grep microsoft),)  # This is a WSL environment, which means you can run .exe\nROOTFS_PATH = $(OUTPUT_ROOTFS_PATH)\nOUTPUT_PORT_PROXY_EXE_PATH = distrod/target/release/portproxy.exe\n\n$(ROOTFS_PATH): rootfs\ninclude windows.mk\n\n.PHONY: $(ROOTFS_PATH)\nendif\n\n.PHONY: build rootfs distrod-release distrod-bins lint clean\\\n        unit-test-linux enter-integration-test-linux integration-test-linux integration-test-linux-all-distros test-linux\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 7.4150390625,
          "content": "# Distrod - WSL2 Distros with Systemd!\n\n[![CI](https://github.com/nullpo-head/wsl-distrod/actions/workflows/ci.yaml/badge.svg)](https://github.com/nullpo-head/wsl-distrod/actions)\n\nDistrod is a systemd-based meta-distro for WSL2 that allows you to install Ubuntu, Arch Linux, Gentoo and many other distros\nwith systemd in a minute, or make your current distro run systemd.\n\nDistrod also provides built-in auto-start feature and port forwarding service.\nThis allows you to start systemd-managed services, such as `ssh`, on Windows startup and make it accessible from outside Windows.\n\n![Arch, Debian, and Gentoo are running on WSL 2 with systemd running](docs/distrod_shot1.png)\n![Demo gif](docs/distrod_demo.gif)\n\nWith Distrod, you can\n\n1. **Run systemd in WSL 2**  \n   You can do the both of the following\n\n   - Install a new distro with systemd running\n   - Make your current WSL 2 distro run systemd\n\n2. **Install any image available from [linuxcontainers.org](https://linuxcontainers.org) as a WSL 2 distro in 1 minute[^1].**\n\n   - The following distros are continuously tested\n     - Ubuntu, Debian, Arch Linux, Fedora, CentOS, AlmaLinux,\n       Rocky Linux, Kali Linux, Linux Mint, openSUSE, Amazon Linux,\n       Oracle Linux, Gentoo Linux  \n       [![CI](https://github.com/nullpo-head/wsl-distrod/actions/workflows/ci.yaml/badge.svg)](https://github.com/nullpo-head/wsl-distrod/actions) (See `Integration test on Linux (distro_name)`)\n   - Other distros may or may not work\n\n   \\* [linuxcontainers.org](https://linuxcontainers.org) is a vendor-neutral project that offers distro images for\n   containers, which is unrelated to Distrod. LXC/LXD is one of its projects.\n   Systemd runs in the installed distro, so you can also try LXC/LXD in WSL!\n\n3. **Start WSL on Windows Startup.**  \n   This means that you can manage your ssh server and other services with systemd and start them automatically without any hassle!\n   - Distrod also provides a port proxy service managed by systemd,\n     allowing you to expose your Linux server to the outside world of Windows easily.\n\nFeature under development\n\n1. **Make your dual-booted physical Linux distro on a separate disk run as a WSL instance.**\n\n[^1]: as long as your network connection is fast enough :)\n\n## Install\n\n### Option 1: Install a New Distro.\n\n0. Make sure that your default WSL version is 2.\n\n   ```console\n   > wsl --set-default-version 2\n   ```\n\n1. Download and unzip [the latest `distrod_wsl_launcher-x86_64.zip` from release](https://github.com/nullpo-head/wsl-distrod/releases/latest/download/distrod_wsl_launcher-x86_64.zip), and double-click the extracted `.exe` file.\n\n2. Follow the wizard to install a new distro.\n\n3. \\[Optional\\] To make your distro start on Windows startup, run the following command.\n\n   ```bash\n   sudo /opt/distrod/bin/distrod enable --start-on-windows-boot\n   ```\n\n   You also might want to forward ports of services such as `ssh` to the outside of Windows.\n   In that case, you can enable the built-in port proxy service provided by Distrod.\n\n   **NOTE**: On Windows 11, `portproxy.service` doesn't work on Windows startup, which should be fixed soon. See [Known bus](docs/references.md#know-bugs).\n\n   ```bash\n   echo 22 | sudo tee /opt/distrod/conf/tcp4_ports  # update the portproxy.service's configuration\n   sudo systemctl enable --now portproxy.service  # enable and start it\n   ```\n\n   For more detailed instruction, see [Forward Ports to outside of Windows](docs/references.md#forward-ports-to-outside-of-windows).\n\n#### See also\n\n- [Launch WSL 2 on Windows Startup](docs/references.md#launch-wsl-2-on-windows-startup)\n- [Forward Ports to outside of Windows](docs/references.md#forward-ports-to-outside-of-windows)\n- [Troubleshoot WSL Network Down](docs/references.md#troubleshoot-wsl-network-down)\n- [Install and Run Multiple Distros at the same time](docs/references.md#install-and-run-multiple-distros-at-the-same-time)\n\n### Option 2: Make your Current Distro Run Systemd\n\nBy this installation, systemd is enabled in your WSL 2 distro.\n\n1. Download and run the latest installer script.\n\n   ```bash\n   curl -L -O \"https://raw.githubusercontent.com/nullpo-head/wsl-distrod/main/install.sh\"\n   chmod +x install.sh\n   sudo ./install.sh install\n   ```\n\n   This script installs distrod, but doesn't enable it yet.\n\n2. Enable distrod in your distro\n\n   You have two options.\n   If you want to automatically start your distro on Windows startup, enable distrod by the following command\n\n   ```bash\n   /opt/distrod/bin/distrod enable --start-on-windows-boot\n   ```\n\n   Otherwise,\n\n   ```bash\n   /opt/distrod/bin/distrod enable\n   ```\n\n   You can run `enable` with `--start-on-windows-boot` again if you want to enable autostart later.\n\n3. Restart your distro\n\n   Close your WSL's terminal.\n   Open a new Command Prompt window, and run the following command.\n\n   ```bat\n   wsl --terminate Distrod\n   ```\n\n   After re-opening a new WSL window, your shell runs in a systemd session.\n\n#### See also\n\n- [Launch WSL 2 on Windows Startup](docs/references.md#launch-wsl-2-on-windows-startup)\n- [Forward Ports to outside of Windows](docs/references.md#forward-ports-to-outside-of-windows)\n- [Troubleshoot WSL Network Down](docs/references.md#troubleshoot-wsl-network-down)\n- [Open a Shell Session outside the Container for Systemd](docs/references.md#open-a-shell-session-outside-the-container-for-systemd)\n- [Disable Systemd / Distrod](docs/references.md#disable-systemd--distrod)\n\n## Usage\n\nIf you are using [Windows Terminal](https://github.com/microsoft/terminal),\nWindows Terminal will automatically find and register Distrod for you.\nJust open the tab named \"Distrod\".\n\nIf you are using other terminals, please update your terminal settings to launch the Distrod.\nFor reference, the following command launches a distro by name in WSL\n\n```console\n> wsl --distribution Distrod\n```\n\n## Update Distrod\n\n1. Inside a Distrod session, download and run the latest installer script.\n\n   ```bash\n   curl -L -O \"https://raw.githubusercontent.com/nullpo-head/wsl-distrod/main/install.sh\"\n   chmod +x install.sh\n   sudo ./install.sh update\n   ```\n\n## How Distrod Works\n\nIn a nutshell, Distrod is a binary that creates a simple container that runs systemd as an init process,\nand starts your WSL sessions within that container. To realize that, Distrod does the following things.\n\n- Modify the rootfs of the concrete distro you chose so that it is compatible with both WSL and systemd.\n  - Modify systemd services so that they are compatible with WSL\n  - Configure networks for WSL\n  - Put `/opt/distrod/bin/distrod` and other resources in the rootfs.\n  - Register the Distrod's binary as the login shell\n- When Distrod is launched by WSL's init as a login shell, Distrod\n  1.  Starts systemd in a simple container\n  2.  Launches your actual shell within that container\n  3.  Bridges between the systemd sessions and the WSL interop environment.\n\n## Other Notes\n\n1. Does WSLg works on Distrod?\n\n   Yes! Distrod doesn't prevent anything about WSLg. Distrod sets up sockets for X11 and environment variables properly.\n\n   However, WSLg itself has some quirks even on non-Distrod WSL2 distros. Try many things until a GUI app runs.\n   For example, to run `xeyes` without failure, I had to run it three times on the non-Distrod official Ubuntu 20.04.\n\n### See also\n\n- [References.md](docs/references.md)\n- [Open a Shell Session outside the Container for Systemd](docs/references.md#open-a-shell-session-outside-the-container-for-systemd)\n- [Disable Systemd / Distrod](docs/references.md#disable-systemd--distrod)\n"
        },
        {
          "name": "assets",
          "type": "tree",
          "content": null
        },
        {
          "name": "distrod",
          "type": "tree",
          "content": null
        },
        {
          "name": "distrod_packer",
          "type": "tree",
          "content": null
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "install.sh",
          "type": "blob",
          "size": 2.818359375,
          "content": "#!/bin/sh\n\nset -e\n\nLATEST_RELEASE_URL=\"https://github.com/nullpo-head/wsl-distrod/releases/latest/download/opt_distrod.tar.gz\"\n\nHELP_STR=\"Usage: $0 <command>\n\ncommand:\n    - install\n    - update\n    - uninstall\"\n\nhelp () {\n    echo \"$HELP_STR\"\n}\n\nerror_help () {\n    error \"$HELP_STR\"\n}\n\ninstall () {\n    mkdir /opt/distrod || error \"Failed to create /opt/distrod.\"\n    cd /opt/distrod || error \"Could not change directory to /opt/distrod\"\n    get_release_file\n    tar xvf opt_distrod.tar.gz\n    rm opt_distrod.tar.gz\n    echo \"Installation is complete!\"\n}\n\nuninstall () {\n    if grep -o systemd /proc/1/status > /dev/null; then\n        error \"This uninstall command cannot run inside a running Distrod distro.\"\n        error \"To uninstall it, do the following first.\"\n        error \"1. /opt/distrod/bin/distrod disable  # Stop systemd from starting as init\"\n        error \"2. wsl.exe --shutdown  # Terminate WSL2\"\n        error \"After that, Systemd will not run as the init and you can run uninstall.\"\n        exit 1\n    fi\n    rm -rf /opt/distrod\n    echo \"Distrod has been uninstalled!\"\n}\n\nupdate () {\n    cd /opt/distrod || error \"Could not change directory to /opt/distrod\"\n    get_release_file\n    EXCLUDE=\"\"\n    for FILE in /opt/distrod/conf/*; do\n        FILE=${FILE#/opt/distrod/}\n        if printf \"%s\" \"$FILE\" | grep -E ' '; then\n            error \"Found a file with a name containing spaces. Please remove it. Aborting update command.\"\n            exit 1\n        fi\n        EXCLUDE=\"$EXCLUDE --exclude $FILE\"\n    done\n    # shellcheck disable=SC2086\n    tar xvf opt_distrod.tar.gz $EXCLUDE\n    echo \"Ruuning post-update actions...\"\n    POST_UPDATE=\"/opt/distrod/misc/distrod-post-update\"\n    if [ -e \"${POST_UPDATE}\" ]; then\n        \"${POST_UPDATE}\"\n    fi\n    echo \"Distrod has been updated!\"\n}\n\nget_release_file() {\n    if [ -n \"$RELEASE_FILE\" ]; then\n        if [ \"$(realpath \"$RELEASE_FILE\")\" != \"$(realpath opt_distrod.tar.gz)\" ]; then\n            cp \"$RELEASE_FILE\" opt_distrod.tar.gz\n        fi\n    else\n        curl -L -O \"${LATEST_RELEASE_URL}\"\n    fi\n}\n\nerror () {\n    echo \"$@\" >&2\n}\n\n\nif [ -z \"$1\" ]; then\n    error_help\n    exit 1\nfi\n\nif [ \"$(whoami)\" != \"root\" ]; then\n    error \"You must be root to run this script, please use sudo ./install.sh\"\n    exit 1\nfi\n\nCOMMAND=\nwhile [ -n \"$1\" ]; do\n    case \"$1\" in\n    -h|--help)\n        echo \"$HELP_STR\"\n        exit 0\n        ;;\n    install)\n        COMMAND=install\n        shift\n        ;;\n    uninstall)\n        COMMAND=uninstall\n        shift\n        ;;\n    update)\n        COMMAND=update\n        shift\n        ;;\n    -r|--release-file)\n        RELEASE_FILE=\"$(realpath \"$2\")\"\n        shift 2\n        ;;\n    -*)\n        error \"Error: Unknown flag $1\"\n        exit 1\n        ;;\n    *) # preserve positional arguments\n        error \"Error: Unknown command $1\"\n        exit 1\n        ;;\n    esac\ndone\n\n\"$COMMAND\"\n"
        },
        {
          "name": "storeapp",
          "type": "tree",
          "content": null
        },
        {
          "name": "windows.mk",
          "type": "blob",
          "size": 1.4208984375,
          "content": "ROOTFS_PATH ?= distrod/distrod_wsl_launcher/resources/distrod_root.tar.gz\nOUTPUT_PORT_PROXY_EXE_PATH ?= distrod/target/release/portproxy.exe\n\nbuild: distro_launcher/x64/distrod_wsl_launcher.exe\n\ndistro_launcher: distro_launcher/x64/Release/DistroLauncher-Appx/DistroLauncher-Appx_1.0.0.0_x64.appx\n\ndistro_launcher/x64/Release/DistroLauncher-Appx/DistroLauncher-Appx_1.0.0.0_x64.appx: distro_launcher/x64/distrod_wsl_launcher.exe\n\tcd distro_launcher; cmd.exe /C \"build.bat rel\"\n\ndistro_launcher/x64/distrod_wsl_launcher.exe: distrod_wsl_launcher\n\ndistrod/distrod_wsl_launcher/resources/distrod_root.tar.gz: $(ROOTFS_PATH)\n\tif [ \"$$(realpath \"$(ROOTFS_PATH)\" )\" != \"$$(realpath distrod/distrod_wsl_launcher/resources/distrod_root.tar.gz)\" ]; then \\\n\t\tcp $(ROOTFS_PATH) $@; \\\n\tfi\n\ndistrod_wsl_launcher: distrod/distrod_wsl_launcher/resources/distrod_root.tar.gz\n\tcd distrod; cargo.exe build --release -p distrod_wsl_launcher\n\ndistrod/target/release/portproxy.exe: portproxy.exe\nportproxy.exe:\n\tcd distrod; cargo.exe build --release -p portproxy\n\tif [ \"$$(realpath \"$(OUTPUT_PORT_PROXY_EXE_PATH)\" )\" != \"$$(realpath ./distrod/target/release/portproxy.exe)\" ]; then \\\n\t\tcp target/release/port_proxy.exe $(OUTPUT_PORT_PROXY_EXE_PATH); \\\n\tfi\n\ntest-win: distrod/distrod_wsl_launcher/resources/distrod_root.tar.gz\n\tcd distrod; cargo test --verbose -p libs -p portproxy -p distrod_wsl_launcher\n\n.PHONY: build distro_launcher distrod_wsl_launcher portproxy.exe test\n"
        }
      ]
    }
  ]
}