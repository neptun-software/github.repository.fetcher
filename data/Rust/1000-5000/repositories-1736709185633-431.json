{
  "metadata": {
    "timestamp": 1736709185633,
    "page": 431,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjQ0MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "AFLplusplus/LibAFL",
      "stars": 2084,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".clang-format",
          "type": "blob",
          "size": 3.916015625,
          "content": "---\nLanguage:        Cpp\n# BasedOnStyle:  Google\nAccessModifierOffset: -1\nAlignAfterOpenBracket: Align\nAlignConsecutiveAssignments: false\nAlignConsecutiveDeclarations: true\nAlignEscapedNewlines: Left\nAlignOperands:   true\nAlignTrailingComments: true\nAllowAllParametersOfDeclarationOnNextLine: true\nAllowShortBlocksOnASingleLine: true\nAllowShortCaseLabelsOnASingleLine: false\nAllowShortFunctionsOnASingleLine: false\nAllowShortIfStatementsOnASingleLine: true\nAllowShortLoopsOnASingleLine: false\nAlwaysBreakAfterDefinitionReturnType: None\nAlwaysBreakAfterReturnType: None\nAlwaysBreakBeforeMultilineStrings: true\nAlwaysBreakTemplateDeclarations: Yes\nBinPackArguments: true\nBinPackParameters: true\nBraceWrapping:   \n  AfterClass:      false\n  AfterControlStatement: false\n  AfterEnum:       false\n  AfterFunction:   false\n  AfterNamespace:  false\n  AfterObjCDeclaration: false\n  AfterStruct:     false\n  AfterUnion:      false\n  AfterExternBlock: false\n  BeforeCatch:     false\n  BeforeElse:      false\n  IndentBraces:    false\n  SplitEmptyFunction: true\n  SplitEmptyRecord: true\n  SplitEmptyNamespace: true\nBreakBeforeBinaryOperators: None\nBreakBeforeBraces: Attach\nBreakBeforeInheritanceComma: false\nBreakInheritanceList: BeforeColon\nBreakBeforeTernaryOperators: true\nBreakConstructorInitializersBeforeComma: false\nBreakConstructorInitializers: BeforeColon\nBreakAfterJavaFieldAnnotations: false\nBreakStringLiterals: true\nColumnLimit:     80\nCommentPragmas:  '^ IWYU pragma:'\nCompactNamespaces: false\nConstructorInitializerAllOnOneLineOrOnePerLine: true\nConstructorInitializerIndentWidth: 4\nContinuationIndentWidth: 4\nCpp11BracedListStyle: true\nDerivePointerAlignment: false\nDisableFormat:   false\nExperimentalAutoDetectBinPacking: false\nFixNamespaceComments: true\nForEachMacros:   \n  - foreach\n  - Q_FOREACH\n  - BOOST_FOREACH\nIncludeBlocks:   Preserve\nIncludeCategories: \n  - Regex:           '^<ext/.*\\.h>'\n    Priority:        2\n  - Regex:           '^<.*\\.h>'\n    Priority:        1\n  - Regex:           '^<.*'\n    Priority:        2\n  - Regex:           '.*'\n    Priority:        3\nIncludeIsMainRegex: '([-_](test|unittest))?$'\nIndentCaseLabels: true\nIndentPPDirectives: BeforeHash\nIndentWidth:     2\nIndentWrappedFunctionNames: false\nJavaScriptQuotes: Leave\nJavaScriptWrapImports: true\nKeepEmptyLinesAtTheStartOfBlocks: false\nMacroBlockBegin: ''\nMacroBlockEnd:   ''\nMaxEmptyLinesToKeep: 1\nNamespaceIndentation: None\nObjCBinPackProtocolList: Never\nObjCBlockIndentWidth: 2\nObjCSpaceAfterProperty: false\nObjCSpaceBeforeProtocolList: true\nPenaltyBreakAssignment: 2\nPenaltyBreakBeforeFirstCallParameter: 1\nPenaltyBreakComment: 300\nPenaltyBreakFirstLessLess: 120\nPenaltyBreakString: 1000\nPenaltyBreakTemplateDeclaration: 10\nPenaltyExcessCharacter: 1000000\nPenaltyReturnTypeOnItsOwnLine: 200\nPointerAlignment: Right\nRawStringFormats: \n  - Language:        Cpp\n    Delimiters:      \n      - cc\n      - CC\n      - cpp\n      - Cpp\n      - CPP\n      - 'c++'\n      - 'C++'\n    CanonicalDelimiter: ''\n    BasedOnStyle:    google\n  - Language:        TextProto\n    Delimiters:      \n      - pb\n      - PB\n      - proto\n      - PROTO\n    EnclosingFunctions: \n      - EqualsProto\n      - EquivToProto\n      - PARSE_PARTIAL_TEXT_PROTO\n      - PARSE_TEST_PROTO\n      - PARSE_TEXT_PROTO\n      - ParseTextOrDie\n      - ParseTextProtoOrDie\n    CanonicalDelimiter: ''\n    BasedOnStyle:    google\nReflowComments:  true\nSortIncludes:    false\nSortUsingDeclarations: true\nSpaceAfterCStyleCast: false\nSpaceAfterTemplateKeyword: true\nSpaceBeforeAssignmentOperators: true\nSpaceBeforeCpp11BracedList: false\nSpaceBeforeCtorInitializerColon: true\nSpaceBeforeInheritanceColon: true\nSpaceBeforeParens: ControlStatements\nSpaceBeforeRangeBasedForLoopColon: true\nSpaceInEmptyParentheses: false\nSpacesBeforeTrailingComments: 2\nSpacesInAngles:  false\nSpacesInContainerLiterals: true\nSpacesInCStyleCastParentheses: false\nSpacesInParentheses: false\nSpacesInSquareBrackets: false\nStandard:        Auto\nTabWidth:        8\nUseTab:          Never\n...\n\n"
        },
        {
          "name": ".devcontainer",
          "type": "tree",
          "content": null
        },
        {
          "name": ".dockerignore",
          "type": "blob",
          "size": 0.2998046875,
          "content": "**/target\n**/.git\nCargo.lock\n\n*.o\n*.a\n*.so\n*.out\n*.elf\n*.bin\n*.dll\n*.exe\n*.dSYM\n\n.cur_input\n\ncrashes\n\ncallgrind.out.*\nperf.data\nperf.data.old\n\n.vscode\ntest.dict\n\n# Ignore all built fuzzers\nfuzzer_*\nAFLplusplus\n\n# Ignore common dummy and logfiles\n*.log\na\n\n# ignore files from concolic tests\nsymcc_build\nsymcc"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.673828125,
          "content": "target\ntarget-bin\nout\nCargo.lock\nvendor\n\n.DS_Store\n.env\n.vscode\n\n*.test\n*.tmp\n*.swp\n*.o\n*.a\n*.so\n*.out\n*.elf\n*.bin\n*.dll\n*.exe\n*.dylib\n*.dSYM\n*.obj\n\n.cur_input\n.cur_input_*\ncur_input\n.venv\n\ncrashes\n\ncallgrind.out.*\nperf.data\nperf.data.old\n\n.vscode/settings.json\ntest.dict\n\n.idea/\n\n# Ignore all built fuzzers\nAFLplusplus\ntest_*\n*_fuzzer\n\n# Ignore common dummy and logfiles\n*.log\na\n\nforkserver_test\n__pycache__\n*.lafl_lock\n*.metadata\n\n*atomic_file_testfile*\n**/libxml2\n**/corpus_discovered\n**/libxml2-*.tar.gz\n\nlibafl_nyx/QEMU-Nyx\nlibafl_nyx/packer\n\n.z3-trace\n\n# No gdb history\n.gdb_history\n# No llvm IR\n*.ll\n\n*.tar.gz\n\n# common harness names\nharness\nprogram\nfuzzer_libpng*\nforkserver_simple\n"
        },
        {
          "name": ".pre-commit-config.yaml",
          "type": "blob",
          "size": 0.3271484375,
          "content": "# See https://pre-commit.com for more information\n# See https://pre-commit.com/hooks.html for more hooks\nrepos:\n-   repo: local\n    hooks:\n      - id: fmt\n        name: fmt\n        entry: scripts/fmt_all.sh check\n        language: script\n- repo: https://github.com/ComPWA/taplo-pre-commit\n  rev: v0.9.3\n  hooks:\n    - id: taplo-format\n"
        },
        {
          "name": ".vscode",
          "type": "tree",
          "content": null
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 3.529296875,
          "content": "# How to Contribute to LibAFL\n\nFor bugs, feel free to open issues or contact us directly. Thank you for your support. <3\n\n## Pull Request guideline\n\nEven though we will gladly assist you in finishing up your PR, try to:\n\n- keep all the crates compiling with *stable* rust (hide the eventual non-stable code under [`cfg`s](https://github.com/AFLplusplus/LibAFL/blob/main/libafl/build.rs#L26))\n- run `cargo +nightly fmt` on your code before pushing\n- check the output of `cargo clippy --all` or `./scripts/clippy.sh` (On windows use `.\\scripts\\clippy.ps1`)\n- run `cargo build --no-default-features` to check for `no_std` compatibility (and possibly add `#[cfg(feature = \"std\")]`) to hide parts of your code.\n- Please add and describe your changes to MIGRATION.md if you change the APIs.\n\nSome of the parts in this list may be hard, don't be afraid to open a PR if you cannot fix them by yourself, so we can help.\n\n### Pre-commit hooks\n\nSome of these checks can be performed automatically during commit using [pre-commit](https://pre-commit.com/).\nOnce the package is installed, simply run `pre-commit install` to enable the hooks, the checks will run automatically before the commit becomes effective.\n\n## LibAFL Code Rules\n\nBefore making your pull requests, try to see if your code follows these rules.\n\n- Wherever possible, use `Cow<'static, str>` instead of String.\n- `PhantomData` should have the smallest set of types needed. Try not adding `PhantomData` to your struct unless it is really necessary. Also even when you really need `PhantomData`, try to keep the types `T` used in `PhantomData` as smallest as possible \n- Wherever possible, trait implementations with lifetime specifiers should use '_ lifetime elision.\n- Complex constructors should be replaced with `typed_builder`, or write code in the builder pattern for yourself.\n- Remove generic restrictions at the definitions (e.g., we do not need to specify that types impl `Serialize`, `Deserialize`, or `Debug` anymore at the struct definitions). Therefore, try avoiding code like this unless the contraint is really necessary.\n```rust\npub struct X<A> \n    where\n        A: P // <- Do not add contraints here\n{\n    fn ...\n}\n\n```\n- Reduce generics to the least restrictive necessary. __Never overspecify the contraints__. There's no automated tool to check the useless constraints, so you have to verify this manually.\n```rust\npub struct X<A> \n    where\n        A: P + Q // <- Try to use the as smallest set of constraints as possible. If the code still compiles after deleting Q, then remove it. \n{\n    fn ...\n}\n\n```\n- Traits which have an associated type should refer to the associated type, not the concrete/generic. In other words, you should only have the associated type when you can define a getter to it. For example, in the following code, you can define a associate type.\n```rust\npub trait X \n{\n    type A; // <- You should(can) define it as long as you have a getter to it.\n    fn a(&self) -> A;\n}\n\n```\n- __Ideally__ the types used in the the arguments of methods in traits should have the same as the types defined on the traits.\n```rust\npub trait X<A, B, C> // <- this trait have 3 generics, A, B, and C\n{\n    fn do_stuff(&self, a: A, b: B, c: C); // <- this is good because it uses all A, B, and C.\n    \n    fn do_other_stuff(&self, a: A, b: B); // <- this is not ideal because it does not have C.\n}\n```\n- Always alphabetically order the type generics. Therefore,\n```rust\npub struct X<E, EM, OT, S, Z> {}; // <- Generics are alphabetically ordered\n```\nBut not,\n```rust\npub struct X<S, OT, Z, EM, E> {}; // <- Generics are not ordered\n```"
        },
        {
          "name": "Cargo.toml",
          "type": "blob",
          "size": 6.224609375,
          "content": "[workspace]\nresolver = \"2\"\nmembers = [\n  \"libafl\",\n  \"libafl_bolts\",\n  \"libafl_cc\",\n  \"libafl_concolic/symcc_runtime\",\n  \"libafl_concolic/symcc_libafl\",\n  \"libafl_derive\",\n  \"libafl_frida\",\n  \"libafl_intelpt\",\n  \"libafl_libfuzzer\",\n  \"libafl_nyx\",\n  \"libafl_targets\",\n  \"libafl_tinyinst\",\n  \"libafl_qemu\",\n  \"libafl_qemu/libafl_qemu_build\",\n  \"libafl_qemu/libafl_qemu_sys\",\n  \"libafl_sugar\",\n  \"libafl_concolic/test/dump_constraints\",\n  \"libafl_concolic/test/runtime_test\",\n  \"utils/build_and_test_fuzzers\",\n  \"utils/deexit\",\n  \"utils/drcov_utils\",\n  \"utils/gramatron/construct_automata\",\n  \"utils/libafl_benches\",\n  \"utils/libafl_jumper\",\n  \"bindings/pylibafl\",\n]\ndefault-members = [\n  \"libafl\",\n  \"libafl_bolts\",\n  \"libafl_cc\",\n  \"libafl_derive\",\n  \"libafl_targets\",\n]\n\nexclude = [\n  \"fuzzers\",\n  \"libafl_libfuzzer_runtime\",\n  \"utils/noaslr\",\n  \"utils/gdb_qemu\",\n  \"utils/libafl_fmt\",\n  \"utils/desyscall\",\n  \"utils/multi_machine_generator\",\n  \"scripts\",\n  # additional crates\n  \"libafl_concolic/test/symcc/util/symcc_fuzzing_helper\",\n]\n\n[workspace.package]\nversion = \"0.14.1\"\nlicense = \"MIT OR Apache-2.0\"\n\n[workspace.dependencies]\n# Internal deps\nlibafl = { path = \"./libafl\", version = \"0.14.1\", default-features = false }\nlibafl_bolts = { path = \"./libafl_bolts\", version = \"0.14.1\", default-features = false }\nlibafl_cc = { path = \"./libafl_cc\", version = \"0.14.1\", default-features = false }\nsymcc_runtime = { path = \"./libafl_concolic/symcc_runtime\", version = \"0.14.1\", default-features = false }\nsymcc_libafl = { path = \"./libafl_concolic/symcc_libafl\", version = \"0.14.1\", default-features = false }\nlibafl_derive = { path = \"./libafl_derive\", version = \"0.14.1\", default-features = false }\nlibafl_frida = { path = \"./libafl_frida\", version = \"0.14.1\", default-features = false }\nlibafl_intelpt = { path = \"./libafl_intelpt\", version = \"0.14.1\", default-features = false }\nlibafl_libfuzzer = { path = \"./libafl_libfuzzer\", version = \"0.14.1\", default-features = false }\nlibafl_nyx = { path = \"./libafl_nyx\", version = \"0.14.1\", default-features = false }\nlibafl_targets = { path = \"./libafl_targets\", version = \"0.14.1\", default-features = false }\nlibafl_tinyinst = { path = \"./libafl_tinyinst\", version = \"0.14.1\", default-features = false }\nlibafl_qemu = { path = \"./libafl_qemu\", version = \"0.14.1\", default-features = false }\nlibafl_qemu_build = { path = \"./libafl_qemu/libafl_qemu_build\", version = \"0.14.1\", default-features = false }\nlibafl_qemu_sys = { path = \"./libafl_qemu/libafl_qemu_sys\", version = \"0.14.1\", default-features = false }\nlibafl_sugar = { path = \"./libafl_sugar\", version = \"0.14.1\", default-features = false }\ndump_constraints = { path = \"./libafl_concolic/test/dump_constraints\", version = \"0.14.1\", default-features = false }\nruntime_test = { path = \"./libafl_concolic/test/runtime_test\", version = \"0.14.1\", default-features = false }\nbuild_and_test_fuzzers = { path = \"./utils/build_and_test_fuzzers\", version = \"0.14.1\", default-features = false }\ndeexit = { path = \"./utils/deexit\", version = \"0.14.1\", default-features = false }\ndrcov_utils = { path = \"./utils/drcov_utils\", version = \"0.14.1\", default-features = false }\nconstruct_automata = { path = \"./utils/gramatron/construct_automata\", version = \"0.14.1\", default-features = false }\nlibafl_benches = { path = \"./utils/libafl_benches\", version = \"0.14.1\", default-features = false }\nlibafl_jumper = { path = \"./utils/libafl_jumper\", version = \"0.14.1\", default-features = false }\n\n# External deps\nahash = { version = \"0.8.11\", default-features = false }     # The hash function already used in hashbrown\narbitrary-int = \"1.2.7\"                                      # arbitrary sized integers, useful in combination with bitfields (bitbybit crate)\nbacktrace = { version = \"0.3.74\", default-features = false } # Used to get the stacktrace in StacktraceObserver\nbindgen = \"0.71.1\"\n# 2024-12-16: bitbybit 1.3.3 is leading CI to fail due to missing docs.\n# fixme: Change this to 1.3.3 when the issue https://github.com/danlehmann/bitfield/issues/66 is resolved.\nbitbybit = \"=1.3.2\" # bitfields, use this for bit fields and bit enums\nclap = \"4.5.18\"\ncc = \"1.1.21\"\ncmake = \"0.1.51\"\ndocument-features = \"0.2.10\"\nfastbloom = { version = \"0.8.0\", default-features = false }\nhashbrown = { version = \"0.14.5\", default-features = false } # A faster hashmap, nostd compatible\nlibc = \"0.2.159\" # For (*nix) libc\nlibipt = \"0.2.0\"\nlog = \"0.4.22\"\nmeminterval = \"0.4.1\"\nmimalloc = { version = \"0.1.43\", default-features = false }\nnix = { version = \"0.29.0\", default-features = false }\nnum_enum = { version = \"0.7.3\", default-features = false }\nnum-traits = { version = \"0.2.19\", default-features = false }\npaste = \"1.0.15\"\npostcard = { version = \"1.0.10\", features = [\n  \"alloc\",\n], default-features = false } # no_std compatible serde serialization format\npyo3 = \"0.23.2\"\npyo3-build-config = \"0.23.2\"\nrangemap = \"1.5.1\"\nregex = \"1.10.6\"\nrustversion = \"1.0.17\"\nserde = { version = \"1.0.210\", default-features = false } # serialization lib\nserial_test = { version = \"3.1.1\", default-features = false }\nserde_json = { version = \"1.0.128\", default-features = false }\nserde_yaml = { version = \"0.9.34\" } # For parsing the injections yaml file\nstatic_assertions = \"1.1.0\"\nstrum = \"0.26.3\"\nstrum_macros = \"0.26.4\"\ntoml = \"0.8.19\" # For parsing the injections toml file\ntyped-builder = \"0.20.0\" # Implement the builder pattern at compiletime\nuuid = { version = \"1.10.0\", features = [\"serde\", \"v4\"] }\nwhich = \"6.0.3\"\nwindows = \"0.59.0\"\nz3 = \"0.12.1\"\n\n\n[workspace.lints.rust]\n# Forbid\nunexpected_cfgs = \"forbid\"\n\n# Allow\nincomplete_features = \"allow\"\nambiguous_glob_reexports = \"allow\"\n\n\n[workspace.lints.clippy]\n# Deny\nall = { level = \"deny\", priority = -1 }\npedantic = { level = \"deny\", priority = -1 }\ncargo_common_metadata = \"deny\"\n\n# Warn\ncargo = { level = \"warn\", priority = -1 }\nnegative_feature_names = \"warn\"\n\n# Allow\nunreadable_literal = \"allow\"\ntype_repetition_in_bounds = \"allow\"\nmissing_errors_doc = \"allow\"\ncast_possible_truncation = \"allow\"\nused_underscore_binding = \"allow\"\nptr_as_ptr = \"allow\"\nmissing_panics_doc = \"allow\"\nmodule_name_repetitions = \"allow\"\nunsafe_derive_deserialize = \"allow\"\nsimilar_names = \"allow\"\ntoo_many_lines = \"allow\"\n\n\n[workspace.lints.rustdoc]\n# Deny\nbroken_intra_doc_links = \"deny\"\n\n\n[profile.release]\nlto = true\ncodegen-units = 1\nopt-level = 3\ndebug = true\n"
        },
        {
          "name": "Dockerfile",
          "type": "blob",
          "size": 5.9306640625,
          "content": "# syntax=docker/dockerfile:1.2\nFROM rust:1.76.0 AS libafl\nLABEL \"maintainer\"=\"afl++ team <afl@aflplus.plus>\"\nLABEL \"about\"=\"LibAFL Docker image\"\n\n# Install cargo-binstall to download the sccache build\nRUN curl -L --proto '=https' --tlsv1.2 -sSf https://raw.githubusercontent.com/cargo-bins/cargo-binstall/main/install-from-binstall-release.sh | bash\n# install sccache to cache subsequent builds of dependencies\nRUN cargo binstall --no-confirm sccache\n\nENV HOME=/root\nENV SCCACHE_CACHE_SIZE=\"1G\"\nENV SCCACHE_DIR=$HOME/.cache/sccache\nENV RUSTC_WRAPPER=\"/usr/local/cargo/bin/sccache\"\nENV IS_DOCKER=\"1\"\nRUN sh -c 'echo set encoding=utf-8 > /root/.vimrc' \\\n    echo \"export PS1='\"'[LibAFL \\h] \\w$(__git_ps1) \\$ '\"'\" >> ~/.bashrc && \\\n    mkdir ~/.cargo && \\\n    echo \"[build]\\nrustc-wrapper = \\\"${RUSTC_WRAPPER}\\\"\" >> ~/.cargo/config\n\nRUN rustup default nightly\nRUN rustup component add rustfmt clippy\n\n# Install clang 18, common build tools\nENV LLVM_VERSION=18\nRUN apt update && apt install -y build-essential gdb git wget python3-venv ninja-build lsb-release software-properties-common gnupg cmake\nRUN set -ex &&\\\n    wget https://apt.llvm.org/llvm.sh &&\\\n    chmod +x llvm.sh &&\\\n    ./llvm.sh ${LLVM_VERSION}\n\n\n# Copy a dummy.rs and Cargo.toml first, so that dependencies are cached\nWORKDIR /libafl\nCOPY Cargo.toml README.md ./\n\nCOPY libafl_derive/Cargo.toml libafl_derive/Cargo.toml\nCOPY scripts/dummy.rs libafl_derive/src/lib.rs\n\nCOPY libafl/Cargo.toml libafl/build.rs libafl/README.md libafl/\nCOPY scripts/dummy.rs libafl/src/lib.rs\n\n# Set up LLVM aliases\nCOPY scripts/createAliases.sh libafl/\nRUN bash libafl/createAliases.sh ${LLVM_VERSION}\n\nCOPY libafl_bolts/Cargo.toml libafl_bolts/build.rs libafl_bolts/README.md libafl_bolts/\nCOPY libafl_bolts/examples libafl_bolts/examples\nCOPY scripts/dummy.rs libafl_bolts/src/lib.rs\n\nCOPY libafl_frida/Cargo.toml libafl_frida/build.rs libafl_frida/\nCOPY scripts/dummy.rs libafl_frida/src/lib.rs\nCOPY libafl_frida/src/gettls.c libafl_frida/src/gettls.c\n\nCOPY libafl_intelpt/Cargo.toml libafl_intelpt/README.md libafl_intelpt/\nCOPY scripts/dummy.rs libafl_intelpt/src/lib.rs\n\nCOPY libafl_qemu/Cargo.toml libafl_qemu/build.rs libafl_qemu/build_linux.rs libafl_qemu/\nCOPY scripts/dummy.rs libafl_qemu/src/lib.rs\n\nCOPY libafl_qemu/libafl_qemu_build/Cargo.toml libafl_qemu/libafl_qemu_build/\nCOPY scripts/dummy.rs libafl_qemu/libafl_qemu_build/src/lib.rs\n\nCOPY libafl_qemu/libafl_qemu_sys/Cargo.toml libafl_qemu/libafl_qemu_sys/build.rs libafl_qemu/libafl_qemu_sys/build_linux.rs libafl_qemu/libafl_qemu_sys/\nCOPY scripts/dummy.rs libafl_qemu/libafl_qemu_sys/src/lib.rs\n\nCOPY libafl_sugar/Cargo.toml libafl_sugar/\nCOPY scripts/dummy.rs libafl_sugar/src/lib.rs\n\nCOPY bindings/pylibafl/Cargo.toml bindings/pylibafl/Cargo.toml\nCOPY bindings/pylibafl/src bindings/pylibafl/src\n\nCOPY libafl_cc/Cargo.toml libafl_cc/Cargo.toml\nCOPY libafl_cc/build.rs libafl_cc/build.rs\nCOPY libafl_cc/src libafl_cc/src\nCOPY scripts/dummy.rs libafl_cc/src/lib.rs\n\nCOPY libafl_targets/Cargo.toml libafl_targets/build.rs libafl_targets/\nCOPY libafl_targets/src libafl_targets/src\nCOPY scripts/dummy.rs libafl_targets/src/lib.rs\n\nCOPY libafl_concolic/test/dump_constraints/Cargo.toml libafl_concolic/test/dump_constraints/\nCOPY scripts/dummy.rs libafl_concolic/test/dump_constraints/src/lib.rs\n\nCOPY libafl_concolic/test/runtime_test/Cargo.toml libafl_concolic/test/runtime_test/\nCOPY scripts/dummy.rs libafl_concolic/test/runtime_test/src/lib.rs\n\nCOPY libafl_concolic/symcc_runtime/Cargo.toml libafl_concolic/symcc_runtime/build.rs libafl_concolic/symcc_runtime/\nCOPY scripts/dummy.rs libafl_concolic/symcc_runtime/src/lib.rs\n\nCOPY libafl_concolic/symcc_libafl/Cargo.toml libafl_concolic/symcc_libafl/\nCOPY scripts/dummy.rs libafl_concolic/symcc_libafl/src/lib.rs\n\nCOPY libafl_nyx/Cargo.toml libafl_nyx/build.rs libafl_nyx/build_nyx_support.sh libafl_nyx/\nCOPY scripts/dummy.rs libafl_nyx/src/lib.rs\n\nCOPY libafl_tinyinst/Cargo.toml libafl_tinyinst/\nCOPY scripts/dummy.rs libafl_tinyinst/src/lib.rs\n\n# avoid pulling in the runtime, as this is quite an expensive build, until later\nCOPY libafl_libfuzzer/Cargo.toml libafl_libfuzzer/\nCOPY scripts/dummy.rs libafl_libfuzzer/src/lib.rs\n\nCOPY utils utils\n\nRUN cargo build && cargo build --release\n\nCOPY scripts scripts\nCOPY docs docs\n\n# Pre-build dependencies for a few common fuzzers\n\n# Dep chain:\n# libafl_cc (independent)\n# libafl_derive -> libafl\n# libafl -> libafl_targets\n# libafl_targets -> libafl_frida\n\n# Build once without source\nCOPY libafl_cc/src libafl_cc/src\nRUN touch libafl_cc/src/lib.rs\nCOPY libafl_derive/src libafl_derive/src\nRUN touch libafl_derive/src/lib.rs\nCOPY libafl_bolts/src libafl_bolts/src\nRUN touch libafl_bolts/src/lib.rs\nCOPY libafl/src libafl/src\nRUN touch libafl/src/lib.rs\nCOPY libafl_targets/src libafl_targets/src\nRUN touch libafl_targets/src/lib.rs\nCOPY libafl_frida/src libafl_frida/src\nRUN touch libafl_qemu/libafl_qemu_build/src/lib.rs\nCOPY libafl_qemu/libafl_qemu_build/src libafl_qemu/libafl_qemu_build/src\nRUN touch libafl_qemu/libafl_qemu_sys/src/lib.rs\nCOPY libafl_qemu/libafl_qemu_sys/src libafl_qemu/libafl_qemu_sys/src\nCOPY libafl_qemu/runtime libafl_qemu/runtime\nCOPY libafl_qemu/libqasan libafl_qemu/libqasan\nRUN touch libafl_qemu/src/lib.rs\nCOPY libafl_qemu/src libafl_qemu/src\nRUN touch libafl_frida/src/lib.rs\nCOPY libafl_concolic/symcc_libafl libafl_concolic/symcc_libafl\nCOPY libafl_concolic/symcc_runtime libafl_concolic/symcc_runtime\nCOPY libafl_concolic/test libafl_concolic/test\nCOPY libafl_nyx/src libafl_nyx/src\nRUN touch libafl_nyx/src/lib.rs\nCOPY libafl_libfuzzer_runtime libafl_libfuzzer_runtime\nCOPY libafl_libfuzzer/src libafl_libfuzzer/src\nCOPY libafl_libfuzzer/runtime libafl_libfuzzer/runtime\nCOPY libafl_libfuzzer/build.rs libafl_libfuzzer/build.rs\nRUN touch libafl_libfuzzer/src/lib.rs\nCOPY libafl_intelpt/src libafl_intelpt/src\nRUN touch libafl_intelpt/src/lib.rs\nRUN cargo build && cargo build --release\n\n# Copy fuzzers over\nCOPY fuzzers fuzzers\n\n# RUN ./scripts/test_fuzzer.sh --no-fmt\n\nENTRYPOINT [ \"/bin/bash\", \"-c\" ]\nCMD [\"/bin/bash\"]\n"
        },
        {
          "name": "LICENSE-APACHE",
          "type": "blob",
          "size": 11.08984375,
          "content": "                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"[]\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright [yyyy] [name of copyright owner]\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License."
        },
        {
          "name": "LICENSE-MIT",
          "type": "blob",
          "size": 0.998046875,
          "content": "Permission is hereby granted, free of charge, to any\nperson obtaining a copy of this software and associated\ndocumentation files (the \"Software\"), to deal in the\nSoftware without restriction, including without\nlimitation the rights to use, copy, modify, merge,\npublish, distribute, sublicense, and/or sell copies of\nthe Software, and to permit persons to whom the Software\nis furnished to do so, subject to the following\nconditions:\n\nThe above copyright notice and this permission notice\nshall be included in all copies or substantial portions\nof the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF\nANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED\nTO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A\nPARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT\nSHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\nOF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR\nIN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\nDEALINGS IN THE SOFTWARE."
        },
        {
          "name": "MIGRATION.md",
          "type": "blob",
          "size": 1.892578125,
          "content": "\n# 0.14.1 -> 0.15.0\n- `MmapShMem::new` and `MmapShMemProvider::new_shmem_with_id` now take `AsRef<Path>` instead of a byte array for the filename/id.\n- The closure passed to a `DumpToDiskStage` now provides the `Testcase` instead of just the `Input`.\n- `StatsStage` is deleted, and it is superceded by `AflStatsStage`\n- Renamed and changed mapping mutators to take borrows directly instead of `MappedInput`s. See `baby_fuzzer_custom_input` for example usage\n  - Related: `MutVecInput` is deprecated in favor of directly using `&mut Vec<u8>`\n  - Related: `MappedInputFunctionMappingMutator` and `ToMappedInputFunctionMappingMutatorMapper` have been removed as now duplicates of `MappingMutator` (previously `FunctionMappingMutator`) and `ToMappingMutator` (previously `ToFunctionMappingMutatorMapper`)\n  - Related: `ToOptionMappingMutatorMapper` and `ToFunctionMappingMutatorMapper` have been renamed to `ToOptionalMutator` and `ToMappingMutator` respectively\n- `Qemu` cannot be used to initialize `Emulator` directly anymore. Instead, `Qemu` should be initialized through `Emulator` systematically if `Emulator` should be used.\n  - Related: `EmulatorBuilder` uses a single function to provide a `Qemu` initializer: `EmulatorBuilder::qemu_parameters`. For now, it can be either a `Vec<String>` or a `QemuConfig` instance.\n  - Related: Qemu's `AsanModule` does not need any special call to `Qemu` init methods anymore. It is now possible to simply initialize `AsanModule` (or `AsanGuestModule`) with a reference to the environment as parameter.\n\n# 0.14.0 -> 0.14.1\n- Removed `with_observers` from `Executor` trait.\n- `MmapShMemProvider::new_shmem_persistent` has been removed in favour of `MmapShMem::persist`. You probably want to do something like this: `let shmem = MmapShMemProvider::new()?.new_shmem(size)?.persist()?;`\n\n# Pre 0.9 -> 0.9\n- [Migrating from LibAFL <0.9 to 0.9](https://aflplus.plus/libafl-book/design/migration-0.9.html)"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 6.392578125,
          "content": "# LibAFL, the fuzzer library.\n\n <img align=\"right\" src=\"https://raw.githubusercontent.com/AFLplusplus/Website/main/static/libafl_logo.svg\" alt=\"LibAFL logo\" width=\"250\" heigh=\"250\">\n\nAdvanced Fuzzing Library - Slot your own fuzzers together and extend their features using Rust.\n\nLibAFL is a collection of reusable pieces of fuzzers, written in Rust, it gives you many of the benefits of an off-the-shelf fuzzer, while being completely customizable.\nSome highlight features currently include:\n- `fast`: We do everything we can at compile time, keeping runtime overhead minimal. Users reach 120k execs/sec in frida-mode on a phone (using all cores).\n- `scalable`: `Low Level Message Passing`, `LLMP` for short, allows LibAFL to scale almost linearly over cores, and via TCP to multiple machines.\n- `adaptable`: You can replace each part of LibAFL. For example, `BytesInput` is just one potential form input:\nfeel free to add an AST-based input for structured fuzzing, and more.\n- `multi platform`: LibAFL was confirmed to work on *Windows*, *MacOS*, *Linux*, and *Android* on *x86_64* and *aarch64*. `LibAFL` can be built in `no_std` mode to inject LibAFL into obscure targets like embedded devices and hypervisors.\n- `bring your own target`: We support binary-only modes, like Frida-Mode, as well as multiple compilation passes for sourced-based instrumentation. Of course it's easy to add custom instrumentation backends.\n\n## Core concepts\n\nLibAFL is fast, multi-platform, no_std compatible, and scales over cores and machines. It offers a main crate that provide building blocks for custom fuzzers, [libafl](./libafl), a library containing common code that can be used for targets instrumentation, [libafl_targets](./libafl_targets), and a library providing facilities to wrap compilers, [libafl_cc](./libafl_cc). It offers integrations with popular instrumentation frameworks. At the moment, the supported backends are:\n+ `SanitizerCoverage`, in [libafl_targets](./libafl_targets)\n+ `Frida`, in [libafl_frida](./libafl_frida)\n+ `QEMU` user-mode and system mode, including hooks for emulation, in [libafl_qemu](./libafl_qemu)\n+ `TinyInst`, in [libafl_tinyinst](./libafl_tinyinst) by [elbiazo](https://github.com/elbiazo)\n\n## Building and installing\n\n#### Install the Dependencies\n- **The Rust development language**\n    - We highly recommend *not* to use e.g. your Linux distribution package as this is likely outdated. So rather install Rust directly, instructions can be found [here](https://www.rust-lang.org/tools/install).\n- **LLVM tools**\n    - The LLVM tools (including clang, clang++) are needed (newer than LLVM 15.0.0 up to LLVM 18.1.3) If you are using Debian/Ubuntu, again, we highly recommmend that you install the package from [here](https://apt.llvm.org/)\n    - (In `libafl_concolic`, we only support LLVM version newer than 18)\n- Cargo-make:\n    - We use cargo-make to build the fuzzers in `fuzzers/` directory. You can install it with `cargo install cargo-make`\n \n#### Clone the LibAFL repository with\n```sh\ngit clone https://github.com/AFLplusplus/LibAFL\n```\n#### Build the library using\n```sh\ncargo build --release\n```\n#### Build the API documentation with\n```sh\ncargo doc\n```\n#### Browse the LibAFL book (WIP!) with (requires [mdbook](https://rust-lang.github.io/mdBook/index.html))\n```sh\ncd docs && mdbook serve\n```\n## Getting started \nWe collect all example fuzzers in [`./fuzzers`](./fuzzers/).\nBe sure to read their documentation (and source), this is *the natural way to get started!*\n```sh\ncargo make run\n```\nYou can run each example fuzzer with this following command, as long as the fuzzer directory has `Makefile.toml` file. The best-tested fuzzer is [`./fuzzers/inprocess/libfuzzer_libpng`](./fuzzers/inprocess/libfuzzer_libpng), a multicore libfuzzer-like fuzzer using LibAFL for a libpng harness.\n\n### Resources \n- [Installation guide](./docs/src/getting_started/setup.md)\n- [Online API documentation](https://docs.rs/libafl/)\n- The LibAFL book (WIP) [online](https://aflplus.plus/libafl-book) or in the [repo](./docs/src/)\n- Our research [paper](https://www.s3.eurecom.fr/docs/ccs22_fioraldi.pdf)\n- Our RC3 [talk](http://www.youtube.com/watch?v=3RWkT1Q5IV0 \"Fuzzers Like LEGO\") explaining the core concepts\n- Our Fuzzcon Europe [talk](https://www.youtube.com/watch?v=PWB8GIhFAaI \"LibAFL: The Advanced Fuzzing Library\") with a (a bit but not so much outdated) step-by-step discussion on how to build some example fuzzers\n- The Fuzzing101 [solutions](https://github.com/epi052/fuzzing-101-solutions) & series of [blog posts](https://epi052.gitlab.io/notes-to-self/blog/2021-11-01-fuzzing-101-with-libafl/) by [epi](https://github.com/epi052)\n- Blogpost on binary-only fuzzing lib libaf_qemu, [Hacking TMNF - Fuzzing the game server](https://blog.bricked.tech/posts/tmnf/part1/), by [RickdeJager](https://github.com/RickdeJager).\n- [A LibAFL Introductory Workshop](https://www.atredis.com/blog/2023/12/4/a-libafl-introductory-workshop), by [Jordan Whitehead](https://github.com/jordan9001)\n\n## Contributors\n\nLibAFL is written and maintained by\n\n * [Andrea Fioraldi](https://twitter.com/andreafioraldi) <andrea@aflplus.plus>\n * [Dominik Maier](https://twitter.com/domenuk) <dominik@aflplus.plus>\n * [s1341](https://twitter.com/srubenst1341) <github@shmarya.net>\n * [Dongjia Zhang](https://github.com/tokatoka) <toka@aflplus.plus>\n * [Addison Crump](https://github.com/addisoncrump) <me@addisoncrump.info>\n * [Romain Malmain](https://github.com/rmalmain) <rmalmain@pm.me>\n\nPlease check out [CONTRIBUTING.md](CONTRIBUTING.md) for the contributing guideline.\n\n## Cite\nIf you use LibAFL for your academic work, please cite the following paper:\n\n```bibtex\n@inproceedings{libafl,\n author       = {Andrea Fioraldi and Dominik Maier and Dongjia Zhang and Davide Balzarotti},\n title        = {{LibAFL: A Framework to Build Modular and Reusable Fuzzers}},\n booktitle    = {Proceedings of the 29th ACM conference on Computer and communications security (CCS)},\n series       = {CCS '22},\n year         = {2022},\n month        = {November},\n location     = {Los Angeles, U.S.A.},\n publisher    = {ACM},\n}\n```\n\n#### License\n\n<sup>\nLicensed under either of <a href=\"LICENSE-APACHE\">Apache License, Version\n2.0</a> or <a href=\"LICENSE-MIT\">MIT license</a> at your option.\n</sup>\n\n<br>\n\n<sub>\nUnless you explicitly state otherwise, any contribution intentionally submitted\nfor inclusion in this crate by you, as defined in the Apache-2.0 license, shall\nbe dual licensed as above, without any additional terms or conditions.\n</sub>\n"
        },
        {
          "name": "TROPHIES.md",
          "type": "blob",
          "size": 0.58203125,
          "content": "# Bugs found by `libafl` and `libafl_libfuzzer`\n\n* pdf-rs\n    * <https://github.com/pdf-rs/pdf/issues/183>\n    * <https://github.com/pdf-rs/pdf/issues/184>\n    * <https://github.com/pdf-rs/pdf/issues/185>\n    * <https://github.com/pdf-rs/pdf/issues/186>\n    * <https://github.com/pdf-rs/pdf/issues/187>\n    * <https://github.com/pdf-rs/pdf/issues/189>\n* nu-shell\n    * https://github.com/nushell/nushell/issues/10365\n    * https://github.com/nushell/nushell/issues/9417\n* exrs\n    * https://github.com/johannesvollmer/exrs/pull/221\n* pcre2\n    * https://github.com/PCRE2Project/pcre2/issues/275\n\n"
        },
        {
          "name": "bindings",
          "type": "tree",
          "content": null
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "fuzzers",
          "type": "tree",
          "content": null
        },
        {
          "name": "libafl",
          "type": "tree",
          "content": null
        },
        {
          "name": "libafl_bolts",
          "type": "tree",
          "content": null
        },
        {
          "name": "libafl_cc",
          "type": "tree",
          "content": null
        },
        {
          "name": "libafl_concolic",
          "type": "tree",
          "content": null
        },
        {
          "name": "libafl_derive",
          "type": "tree",
          "content": null
        },
        {
          "name": "libafl_frida",
          "type": "tree",
          "content": null
        },
        {
          "name": "libafl_intelpt",
          "type": "tree",
          "content": null
        },
        {
          "name": "libafl_libfuzzer",
          "type": "tree",
          "content": null
        },
        {
          "name": "libafl_libfuzzer_runtime",
          "type": "tree",
          "content": null
        },
        {
          "name": "libafl_nyx",
          "type": "tree",
          "content": null
        },
        {
          "name": "libafl_qemu",
          "type": "tree",
          "content": null
        },
        {
          "name": "libafl_sugar",
          "type": "tree",
          "content": null
        },
        {
          "name": "libafl_targets",
          "type": "tree",
          "content": null
        },
        {
          "name": "libafl_tinyinst",
          "type": "tree",
          "content": null
        },
        {
          "name": "rustfmt.toml",
          "type": "blob",
          "size": 0.0634765625,
          "content": "group_imports = \"StdExternalCrate\"\nimports_granularity = \"Crate\"\n"
        },
        {
          "name": "scripts",
          "type": "tree",
          "content": null
        },
        {
          "name": "utils",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}