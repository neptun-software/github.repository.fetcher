{
  "metadata": {
    "timestamp": 1736709052923,
    "page": 162,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjE3MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "racer-rust/racer",
      "stars": 3358,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.0810546875,
          "content": "\\#*\nsrc/scopes\n!.travis.yml\n*tmpfile*\n*.racertmp\ntarget/\n*.py[cod]\n.vscode/**\n*.log"
        },
        {
          "name": ".rustfmt.toml",
          "type": "blob",
          "size": 0,
          "content": ""
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 5.654296875,
          "content": "Change Log\n==========\n\nAll notable changes to this project will be documented in this file. This\nproject adheres to [Semantic Versioning](https://semver.org/).\n\n# 2.1.37\n- Bump rustc-ap-* version to 677.0\n- Account for new standard library source directory layout\n\n# 2.1.37\n- Bump rustc-ap-* version to 671.0\n\n# 2.1.36\n- Bump rustc-ap-* version to 669.0\n\n# 2.1.35\n- Bump rustc-ap-* version to 664.0\n\n# 2.1.34\n- Bump rustc-ap-* version to 659.0\n- Fix submodule search (#1107)\n\n# 2.1.33\n- Bump rustc-ap-* version to 654.0\n\n# 2.1.32\n- Bump rustc-ap-* version to 651.0\n\n# 2.1.31\n- Bump rustc-ap-* version to 642.0\n\n# 2.1.30\n- Support for union(#1086)\n\n# 2.1.29\n- Support async/await syntax(#1083, #1085)\n\n# 2.1.28\n- Update the version of rustc-ap-syntax\n\n# 2.1.27\n- Update the version of rustc-ap-syntax\n\n# 2.1.26\n- Update the version of rustc-ap-syntax\n\n# 2.1.25\n- Update the version of rustc-ap-syntax\n\n# 2.1.24\n- Rust 2018 (#1051)\n- Update the version of rustc-ap-syntax\n\n# 2.1.22\n- Fix completion for `super::super::...`(#1053)\n\n# 2.1.20, 2.1.21\n- Fix completion in testdir for Rust 2018(#1022)\n- Fix enum variant completion for pub(crate) enum(#1025)\n\n# 2.1.18, 2.1.19\n- Update rustc-ap-syntax\n\n# 2.1.17, 2.1.18\n- Fix doc comment parsing(#1010)\n\n# 2.1.15. 2.1.16\n- Handle CRLF correctly(#1007)\n\n# 2.1.14\n- Completion for binary operation(#976)\n\n# 2.1.10, 2.1.11, 2.1.12, 2.1.13\n- Completion for impl trait(#985, #986)\n- Completion for use as(#988)\n\n# 2.1.8, 2.1.9\n- Completion for trait objects(#972)\n- Completion for simple closure return types(#973)\n\n# 2.1.7\n- Lots of refactoring(#961, #963, #965)\n- Add `is_use_statement` for RLS(#965)\n\n# 2.1.6\n- Completion based on impl<T: Bound> #948\n- Fix for argument completion #943\n- Trait bound in where clause #937\n\n# 2.1.5\n- migrate to cargo metadata #930\n\n# 2.1.3\n- Make cargo optional for RLS #910\n\n## 2.1.2\n- Fix bug around getting `use` context #906\n- Update rustc-ap-syntax to fix build in current nightly #911\n\n## 2.1.1\n- Fix coordinate bug\n- Get doc string for macro #905\n\n## 2.1.0\n- Support completions for stdlib macros #902\n- Support extern \"~\"  block #895\n- Support `crate_in_paths` #891\n- Fix bug of getting completion context from `use` statement #886\n- Handle const unsafe fn #879\n- Limit recursion depth through glob imports #875\n- Enable completion based on trait bound for function args #871\n- Fix bug in search_closure_args #862\n- Replace cargo.rs with cargo crate #855\n- Migrate over to rustc_ap_syntax #854\n- Make RUST_SRC_PATH optional #808\n- Refactor based on clippy #860\n\n## 2.0.14\n- Cache generic impls #839\n- Cache parsed TOML file and cargo crate roots #838\n- Skip `pub` keyword as a temporary fix for #624 #850\n- Remove complex generic type by impl trait #848\n- Fix bug for array expression #841\n- Support completion for enum variants without type annotation #825\n- Fix bug for raw string #822\n\n## 2.0.13\n- Fix bug for finding the start of match statement #819\n\n## 2.0.12\n- Fix bug that broke completions in previous release #807\n\n## 2.0.11\n\n- Use `rustup` to find libstd path even when used as library #799\n\n## 2.0.10\n\n- Support resolving `use as` aliases declared in multi-element `use` statements #753\n- Provide suggestions for global paths in more cases #765\n- Suggestions imported via `use as` statements now return their in-scope alias as the match string #767\n- Add new commands for converting between points and coordinates in files #776\n- Return fewer duplicate suggestions #778\n- Handle cases where mod names and trait methods collide, such as `fmt` #781\n\n## 2.0.9\n\n- Support completion after using try operator `?` #726\n- Find methods on cooked string literals #728\n- Fix bug caused by closure completions feature #734\n- Find static methods on enums #737\n- Find doc comments on named and indexed struct fields #739\n- Find `pub(restricted)` items #748\n\n## 2.0.8\n\n- Fix bug finding definitions where impl contains bang #717\n- Find definition for closures #697\n- Resolve types for tuple struct fields #722\n- Resolve types for let patterns #724\n- Fix completions for reference fields #723\n\n## 2.0.7\n\n- Fix panic with macros called `impl*` #701\n- Relax semver specs\n\n## 2.0.6\n\n- resolve Self (e.g. in-impl function calls like Self::myfunction())\n- Fix stack overflow issue on unresolvable imports :tada: #698\n\n## 2.0.5\n\n- Chained completions on separate lines now work #686\n\n## 2.0.4\n\n- Fix for find-doc not always returning full doc string #675\n\n## 2.0.3\n\n- Fix for recursion in certain `use foo::{self, ..}` cases #669\n\n## 2.0.2\n\n- Internal fixes so we can publish on crates.io\n\n## 2.0.1\n\n- Syntex 0.52 #643\n\n- Fix `racer --help` bug from 2.0 refactor #662\n\n- Support short revision identifiers for git checkout paths #664\n\n- Handle self resolution when using `use mymod::{self, Thing}` #665\n\n- Fix type alias resolution #666\n\n## 2.0\n\n- Rework public API to hide many implementation details and allow the project to\n  move forward without breaking changes.\n\n- Many fixes that didn't make it into the changelog, but we're going to work on\n  that in the future!\n\n## 1.2\n\n- Added basic 'daemon' mode, racer process can be kept running between\n  invocations\n\n- now uses clap to parse command line options\n\n- Adds caching of file source and code indices\n\n- Adds an alternative 'tabbed' mode where inputs and outputs can be tab\n  separated for easier parsing\n\n- emacs and vim support split out into their own git projects [emacs-racer] and\n  [vim-racer], respectively.\n\n- Fix issue resolving some `std::*` modules in latest rust source: (rust std lib\n  implicitly imports core with `#![no_std]`)\n\n- Searches multirust overrides when locating cargo src directories\n\n## 1.0.0 2015-07-29\n\n- First release\n\n[vim-racer]: https://github.com/racer-rust/vim-racer\n[emacs-racer]: https://github.com/racer-rust/emacs-racer\n"
        },
        {
          "name": "Cargo.lock",
          "type": "blob",
          "size": 10.57421875,
          "content": "# This file is automatically @generated by Cargo.\n# It is not intended for manual editing.\nversion = 3\n\n[[package]]\nname = \"aho-corasick\"\nversion = \"0.7.18\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1e37cfd5e7657ada45f742d6e99ca5788580b5c529dc78faf11ece6dc702656f\"\ndependencies = [\n \"memchr\",\n]\n\n[[package]]\nname = \"ansi_term\"\nversion = \"0.12.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d52a9bb7ec0cf484c551830a7ce27bd20d67eac647e1befb56b0be4ee39a55d2\"\ndependencies = [\n \"winapi\",\n]\n\n[[package]]\nname = \"atty\"\nversion = \"0.2.14\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d9b39be18770d11421cdb1b9947a45dd3f37e93092cbf377614828a319d5fee8\"\ndependencies = [\n \"hermit-abi\",\n \"libc\",\n \"winapi\",\n]\n\n[[package]]\nname = \"bitflags\"\nversion = \"1.3.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"bef38d45163c2f1dde094a7dfd33ccf595c92905c8f8f4fdc18d06fb1037718a\"\n\n[[package]]\nname = \"cfg-if\"\nversion = \"1.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"baf1de4339761588bc0619e3cbc0120ee582ebb74b53b4efbf79117bd2da40fd\"\n\n[[package]]\nname = \"clap\"\nversion = \"2.34.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a0610544180c38b88101fecf2dd634b174a62eef6946f84dfc6a7127512b381c\"\ndependencies = [\n \"ansi_term\",\n \"atty\",\n \"bitflags\",\n \"strsim\",\n \"textwrap\",\n \"unicode-width\",\n \"vec_map\",\n]\n\n[[package]]\nname = \"convert_case\"\nversion = \"0.4.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"6245d59a3e82a7fc217c5828a6692dbc6dfb63a0c8c90495621f7b9d79704a0e\"\n\n[[package]]\nname = \"derive_more\"\nversion = \"0.99.17\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"4fb810d30a7c1953f91334de7244731fc3f3c10d7fe163338a35b9f640960321\"\ndependencies = [\n \"convert_case\",\n \"proc-macro2\",\n \"quote\",\n \"rustc_version\",\n \"syn\",\n]\n\n[[package]]\nname = \"env_logger\"\nversion = \"0.7.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"44533bbbb3bb3c1fa17d9f2e4e38bbbaf8396ba82193c4cb1b6445d711445d36\"\ndependencies = [\n \"atty\",\n \"humantime 1.3.0\",\n \"log\",\n \"regex\",\n \"termcolor\",\n]\n\n[[package]]\nname = \"fastrand\"\nversion = \"1.6.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"779d043b6a0b90cc4c0ed7ee380a6504394cee7efd7db050e3774eee387324b2\"\ndependencies = [\n \"instant\",\n]\n\n[[package]]\nname = \"hermit-abi\"\nversion = \"0.1.19\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"62b467343b94ba476dcb2500d242dadbb39557df889310ac77c5d99100aaac33\"\ndependencies = [\n \"libc\",\n]\n\n[[package]]\nname = \"humantime\"\nversion = \"1.3.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"df004cfca50ef23c36850aaaa59ad52cc70d0e90243c3c7737a4dd32dc7a3c4f\"\ndependencies = [\n \"quick-error\",\n]\n\n[[package]]\nname = \"humantime\"\nversion = \"2.1.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"9a3a5bfb195931eeb336b2a7b4d761daec841b97f947d34394601737a7bba5e4\"\n\n[[package]]\nname = \"instant\"\nversion = \"0.1.12\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"7a5bbe824c507c5da5956355e86a746d82e0e1464f65d862cc5e71da70e94b2c\"\ndependencies = [\n \"cfg-if\",\n]\n\n[[package]]\nname = \"itoa\"\nversion = \"1.0.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1aab8fc367588b89dcee83ab0fd66b72b50b72fa1904d7095045ace2b0c81c35\"\n\n[[package]]\nname = \"lazy_static\"\nversion = \"1.4.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e2abad23fbc42b3700f2f279844dc832adb2b2eb069b2df918f455c4e18cc646\"\n\n[[package]]\nname = \"lazycell\"\nversion = \"1.3.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"830d08ce1d1d941e6b30645f1a0eb5643013d835ce3779a5fc208261dbe10f55\"\n\n[[package]]\nname = \"libc\"\nversion = \"0.2.112\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1b03d17f364a3a042d5e5d46b053bbbf82c92c9430c592dd4c064dc6ee997125\"\n\n[[package]]\nname = \"log\"\nversion = \"0.4.14\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"51b9bbe6c47d51fc3e1a9b945965946b4c44142ab8792c50835a980d362c2710\"\ndependencies = [\n \"cfg-if\",\n]\n\n[[package]]\nname = \"memchr\"\nversion = \"2.4.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"308cc39be01b73d0d18f82a0e7b2a3df85245f84af96fdddc5d202d27e47b86a\"\n\n[[package]]\nname = \"proc-macro2\"\nversion = \"1.0.36\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"c7342d5883fbccae1cc37a2353b09c87c9b0f3afd73f5fb9bba687a1f733b029\"\ndependencies = [\n \"unicode-xid\",\n]\n\n[[package]]\nname = \"quick-error\"\nversion = \"1.2.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a1d01941d82fa2ab50be1e79e6714289dd7cde78eba4c074bc5a4374f650dfe0\"\n\n[[package]]\nname = \"quote\"\nversion = \"1.0.14\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"47aa80447ce4daf1717500037052af176af5d38cc3e571d9ec1c7353fc10c87d\"\ndependencies = [\n \"proc-macro2\",\n]\n\n[[package]]\nname = \"racer\"\nversion = \"2.2.2\"\ndependencies = [\n \"bitflags\",\n \"clap\",\n \"derive_more\",\n \"env_logger\",\n \"humantime 2.1.0\",\n \"lazy_static\",\n \"lazycell\",\n \"log\",\n \"racer-cargo-metadata\",\n \"racer-testutils\",\n \"rls-span\",\n]\n\n[[package]]\nname = \"racer-cargo-metadata\"\nversion = \"0.1.2\"\ndependencies = [\n \"racer-interner\",\n \"serde\",\n \"serde_json\",\n]\n\n[[package]]\nname = \"racer-interner\"\nversion = \"0.1.0\"\ndependencies = [\n \"serde\",\n]\n\n[[package]]\nname = \"racer-testutils\"\nversion = \"0.1.0\"\ndependencies = [\n \"racer\",\n \"tempfile\",\n]\n\n[[package]]\nname = \"redox_syscall\"\nversion = \"0.2.10\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8383f39639269cde97d255a32bdb68c047337295414940c68bdd30c2e13203ff\"\ndependencies = [\n \"bitflags\",\n]\n\n[[package]]\nname = \"regex\"\nversion = \"1.5.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d07a8629359eb56f1e2fb1652bb04212c072a87ba68546a04065d525673ac461\"\ndependencies = [\n \"aho-corasick\",\n \"memchr\",\n \"regex-syntax\",\n]\n\n[[package]]\nname = \"regex-syntax\"\nversion = \"0.6.25\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f497285884f3fcff424ffc933e56d7cbca511def0c9831a7f9b5f6153e3cc89b\"\n\n[[package]]\nname = \"remove_dir_all\"\nversion = \"0.5.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3acd125665422973a33ac9d3dd2df85edad0f4ae9b00dafb1a05e43a9f5ef8e7\"\ndependencies = [\n \"winapi\",\n]\n\n[[package]]\nname = \"rls-span\"\nversion = \"0.5.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b6e80f614ad4b37910bfe9b029af19c6f92612bb8e1af66e37d35829bf4ef6d1\"\ndependencies = [\n \"serde\",\n]\n\n[[package]]\nname = \"rustc_version\"\nversion = \"0.4.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"bfa0f585226d2e68097d4f95d113b15b83a82e819ab25717ec0590d9584ef366\"\ndependencies = [\n \"semver\",\n]\n\n[[package]]\nname = \"ryu\"\nversion = \"1.0.9\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"73b4b750c782965c211b42f022f59af1fbceabdd026623714f104152f1ec149f\"\n\n[[package]]\nname = \"semver\"\nversion = \"1.0.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"568a8e6258aa33c13358f81fd834adb854c6f7c9468520910a9b1e8fac068012\"\n\n[[package]]\nname = \"serde\"\nversion = \"1.0.133\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"97565067517b60e2d1ea8b268e59ce036de907ac523ad83a0475da04e818989a\"\ndependencies = [\n \"serde_derive\",\n]\n\n[[package]]\nname = \"serde_derive\"\nversion = \"1.0.133\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ed201699328568d8d08208fdd080e3ff594e6c422e438b6705905da01005d537\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn\",\n]\n\n[[package]]\nname = \"serde_json\"\nversion = \"1.0.74\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ee2bb9cd061c5865d345bb02ca49fcef1391741b672b54a0bf7b679badec3142\"\ndependencies = [\n \"itoa\",\n \"ryu\",\n \"serde\",\n]\n\n[[package]]\nname = \"strsim\"\nversion = \"0.8.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8ea5119cdb4c55b55d432abb513a0429384878c15dde60cc77b1c99de1a95a6a\"\n\n[[package]]\nname = \"syn\"\nversion = \"1.0.85\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a684ac3dcd8913827e18cd09a68384ee66c1de24157e3c556c9ab16d85695fb7\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"unicode-xid\",\n]\n\n[[package]]\nname = \"tempfile\"\nversion = \"3.3.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"5cdb1ef4eaeeaddc8fbd371e5017057064af0911902ef36b39801f67cc6d79e4\"\ndependencies = [\n \"cfg-if\",\n \"fastrand\",\n \"libc\",\n \"redox_syscall\",\n \"remove_dir_all\",\n \"winapi\",\n]\n\n[[package]]\nname = \"termcolor\"\nversion = \"1.1.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"2dfed899f0eb03f32ee8c6a0aabdb8a7949659e3466561fc0adf54e26d88c5f4\"\ndependencies = [\n \"winapi-util\",\n]\n\n[[package]]\nname = \"textwrap\"\nversion = \"0.11.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d326610f408c7a4eb6f51c37c330e496b08506c9457c9d34287ecc38809fb060\"\ndependencies = [\n \"unicode-width\",\n]\n\n[[package]]\nname = \"unicode-width\"\nversion = \"0.1.9\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3ed742d4ea2bd1176e236172c8429aaf54486e7ac098db29ffe6529e0ce50973\"\n\n[[package]]\nname = \"unicode-xid\"\nversion = \"0.2.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8ccb82d61f80a663efe1f787a51b16b5a51e3314d6ac365b08639f52387b33f3\"\n\n[[package]]\nname = \"vec_map\"\nversion = \"0.8.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f1bddf1187be692e79c5ffeab891132dfb0f236ed36a43c7ed39f1165ee20191\"\n\n[[package]]\nname = \"winapi\"\nversion = \"0.3.9\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"5c839a674fcd7a98952e593242ea400abe93992746761e38641405d28b00f419\"\ndependencies = [\n \"winapi-i686-pc-windows-gnu\",\n \"winapi-x86_64-pc-windows-gnu\",\n]\n\n[[package]]\nname = \"winapi-i686-pc-windows-gnu\"\nversion = \"0.4.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ac3b87c63620426dd9b991e5ce0329eff545bccbbb34f3be09ff6fb6ab51b7b6\"\n\n[[package]]\nname = \"winapi-util\"\nversion = \"0.1.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"70ec6ce85bb158151cae5e5c87f95a8e97d2c0c4b001223f33a334e3ce5de178\"\ndependencies = [\n \"winapi\",\n]\n\n[[package]]\nname = \"winapi-x86_64-pc-windows-gnu\"\nversion = \"0.4.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"712e227841d057c1ee1cd2fb22fa7e5a5461ae8e48fa2ca79ec42cfc1931183f\"\n"
        },
        {
          "name": "Cargo.toml",
          "type": "blob",
          "size": 1.08203125,
          "content": "[package]\nname = \"racer\"\nversion = \"2.2.2\"\nlicense = \"MIT\"\ndescription = \"Code completion for Rust\"\nauthors = [\"Phil Dawes <phil@phildawes.net>\", \"The Racer developers\"]\nhomepage = \"https://github.com/racer-rust/racer\"\nrepository = \"https://github.com/racer-rust/racer\"\nedition = \"2018\"\n\n[lib]\nname = \"racer\"\npath = \"src/racer/lib.rs\"\n\n[[bin]]\nname = \"racer\"\npath = \"src/bin/main.rs\"\ndoc = false\nrequired-features = [\"metadata\"]\n\n[profile.release]\ndebug = false # because of #1005\n\n[dependencies]\nbitflags = \"1.0\"\nlog = \"0.4\"\nenv_logger = \"0.7.1\"\nclap = \"2.32\"\nlazy_static = \"1.2\"\nhumantime = \"2.0.0\"\nderive_more = \"0.99.2\"\nrls-span = \"0.5.1\"\nlazycell = { version = \"1.2\", optional = true }\n\n[dependencies.racer-cargo-metadata]\nversion = \"0.1\"\noptional = true\npath = \"metadata\"\n\n[dev-dependencies.racer-testutils]\nversion = \"0.1\"\npath = \"testutils\"\n\n\n[features]\ndefault = [\"metadata\"]\nmetadata = [\"lazycell\", \"racer-cargo-metadata\"]\nnightly = []\n\n[workspace]\nmembers = [\"interner\", \"metadata\", \"testutils\"]\n\n[package.metadata.rust-analyzer]\n# This package uses #[feature(rustc_private)]\nrustc_private = true\n"
        },
        {
          "name": "LICENSE-MIT",
          "type": "blob",
          "size": 1.029296875,
          "content": "Copyright (c) 2014 Phil Dawes\n\nPermission is hereby granted, free of charge, to any\nperson obtaining a copy of this software and associated\ndocumentation files (the \"Software\"), to deal in the\nSoftware without restriction, including without\nlimitation the rights to use, copy, modify, merge,\npublish, distribute, sublicense, and/or sell copies of\nthe Software, and to permit persons to whom the Software\nis furnished to do so, subject to the following\nconditions:\n\nThe above copyright notice and this permission notice\nshall be included in all copies or substantial portions\nof the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF\nANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED\nTO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A\nPARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT\nSHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\nOF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR\nIN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\nDEALINGS IN THE SOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 5.3115234375,
          "content": "# *Racer* - code completion for [Rust](https://www.rust-lang.org/)\n\n[![Build Status](https://github.com/racer-rust/racer/workflows/CI/badge.svg?branch=master)](https://github.com/racer-rust/racer/actions?query=workflow%3ACI+branch%3Amaster)\n\n\n![racer completion screenshot](images/racer_completion.png)\n\n![racer eldoc screenshot](images/racer_eldoc.png)\n\n*RACER* = *R*ust *A*uto-*C*omplete-*er*. A utility intended to provide Rust code completion for editors and IDEs. Maybe one day the 'er' bit will be exploring + refactoring or something.\n\n## **DISCLAIMER**\nRacer is **not** actively developped now.\nPlease consider using newer software such as\n[rust-analyzer](https://rust-analyzer.github.io/).\n\n## Installation\n\n**NOTE**\nFrom 2.1, racer needs **nightly rust**\n\n### Requirements\n\n#### Current nightly Rust\n\nIf you're using rustup, run\n```\nrustup toolchain install nightly\nrustup component add rustc-dev --toolchain=nightly\n```\n\n_Note: The second command adds the `rustc-dev` component to the nightly\ntoolchain, which is necessary to compile Racer._\n\n#### Cargo\nInternally, racer calls cargo as a CLI tool, so please make sure cargo is installed\n\n### With `cargo install`\n\nSimply run:\n\n```cargo +nightly install racer```\n\nAs mentioned in the command output, don't forget to add the installation directory to your `PATH`.\n\n### From sources\n\n1. Clone the repository: ```git clone https://github.com/racer-rust/racer.git```\n\n2. ```cd racer; cargo +nightly build --release```.  The binary will now be in ```./target/release/racer```\n\n3. Add the binary to your `PATH`. This can be done by moving it to a directory already in your `PATH` (i.e. `/usr/local/bin`) or by adding the `./target/release/` directory to your `PATH`\n\n## Configuration\n\n1. Fetch the Rust sourcecode\n\n    1. automatically via [rustup](https://www.rustup.rs/) and run `rustup component add rust-src` in order to install the source to `$(rustc --print sysroot)/lib/rustlib/src/rust/library` (or `$(rustc --print sysroot)/lib/rustlib/src/rust/src` in older toolchains). Rustup will keep the sources in sync with the toolchain if you run `rustup update`.\n\n    2. manually from git: https://github.com/rust-lang/rust\n\n    **Note**\n\n     If you want to use `racer` with multiple release channels (Rust has 3 release channels: `stable`, `beta` and `nightly`), you have to also download Rust source code for each release channel you install.\n\n    e.g. (rustup case) Add a nightly toolchain build and install nightly sources too\n\n    `rustup toolchain add nightly`\n\n    `rustup component add rust-src`\n\n2. (Optional) Set `RUST_SRC_PATH` environment variable to point to the 'src' dir in the Rust source installation\n   e.g. `% export RUST_SRC_PATH=$(rustc --print sysroot)/lib/rustlib/src/rust/library` or `% export RUST_SRC_PATH=\"$(rustc --print sysroot)/lib/rustlib/src/rust/src\"` (older)\n\n   It's recommended to set `RUST_SRC_PATH` for speed up, but racer detects it automatically if you don't set it.\n\n3. Test on the command line:\n\n   `racer complete std::io::B `  (should show some completions)\n\n**Note**\n\nTo complete names in external crates, Racer needs `Cargo.lock`.\nSo, when you add a dependency in your `Cargo.toml`, you have to run a build command\nsuch as `cargo build` or `cargo test`, to get completions.\n\n## Editors/IDEs Supported\n\n### RLS\n\nRacer is used as a static library in [RLS](https://github.com/rust-lang-nursery/rls)\n\n### Eclipse integration\n\nRacer can be used with Eclipse through the use of [RustDT](https://github.com/RustDT/RustDT). (User guide is [linked](https://rustdt.github.io/) in repo description)\n\n### Emacs integration\n\nEmacs integration has been moved to a separate project: [emacs-racer](https://github.com/racer-rust/emacs-racer).\n\n### Gedit integration\n\nGedit integration can be found [here](https://github.com/isamert/gracer).\n\n### Builder integration\n\nGnome Builder integration can be found [here](https://github.com/deikatsuo/bracer)\n\n### Kate integration\n\nThe Kate community maintains a [plugin](https://cgit.kde.org/kate.git/tree/addons/rustcompletion). It is bundled with recent releases of Kate (tested with 16.08 - read more [here](https://blogs.kde.org/2015/05/22/updates-kates-rust-plugin-syntax-highlighting-and-rust-source-mime-type)).\n\n1. Enable 'Rust code completion' in the plugin list in the Kate config dialog;\n\n2. On the new 'Rust code completion' dialog page, make sure 'Racer command' and 'Rust source tree location' are set correctly.\n\n### Sublime Text integration\n\nThe Sublime Text community maintains some packages that integrates Racer\n* [RustAutoComplete](https://github.com/defuz/RustAutoComplete) that offers auto completion and goto definition.\n* [AnacondaRUST](https://github.com/DamnWidget/anaconda_rust) from the [anaconda](https://github.com/DamnWidget/anaconda) plugins family that offers auto completion, goto definition and show documentation\n\n### Vim integration\n\nVim integration has been moved to a separate project: [vim-racer](https://github.com/racer-rust/vim-racer).\n\n### Visual Studio Code extension\n\nRacer recommends the official [`Rust (rls)` extension](https://github.com/rust-lang-nursery/rls-vscode) based on RLS, which uses Racer for completion.\n\n### Atom integration\n\nYou can find the racer package for Atom [here](https://atom.io/packages/autocomplete-racer)\n\n### Kakoune integration\n\n[Kakoune](https://github.com/mawww/kakoune) comes with a builtin integration for racer auto completion.\n"
        },
        {
          "name": "benches",
          "type": "tree",
          "content": null
        },
        {
          "name": "fixtures",
          "type": "tree",
          "content": null
        },
        {
          "name": "images",
          "type": "tree",
          "content": null
        },
        {
          "name": "interner",
          "type": "tree",
          "content": null
        },
        {
          "name": "metadata",
          "type": "tree",
          "content": null
        },
        {
          "name": "rust-toolchain.toml",
          "type": "blob",
          "size": 0.080078125,
          "content": "[toolchain]\nchannel = \"nightly-2022-04-06\"\ncomponents = [\"rust-src\", \"rustc-dev\"]\n"
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "test_project",
          "type": "tree",
          "content": null
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        },
        {
          "name": "testutils",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}