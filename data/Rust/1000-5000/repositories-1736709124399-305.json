{
  "metadata": {
    "timestamp": 1736709124399,
    "page": 305,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjMxMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "amethyst/specs",
      "stars": 2535,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".config",
          "type": "tree",
          "content": null
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.1728515625,
          "content": "# Generated by Cargo\n/target/\nCargo.lock\n.criterion\n\n# Generated by mdbook\n/book/book/\n\n# Generated by rustfmt\n*.bk\n\n# IDEs / Editor\n*.iml\n.idea\n\n# Website content\n/bin\n/public\n"
        },
        {
          "name": ".rustfmt.toml",
          "type": "blob",
          "size": 0.185546875,
          "content": "hard_tabs = false\nreorder_impl_items = true\nuse_field_init_shorthand = true\nuse_try_shorthand = true\nformat_code_in_doc_comments = true\nwrap_comments = true\nedition = \"2021\"\nversion = \"Two\"\n"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 14.5400390625,
          "content": "# Unreleased\n\n# 0.20.0 (2023-09-24)\n\n* MSRV to 1.70.0 ([#765])\n* Significant refactor of `Join` and related traits to alleviate soundness\n  issues. Includes introduction of a lending/streaming join via the `LendJoin`\n  trait which is the new common denominator implemented by joinable types.\n  ([#765])\n\n[#765]: https://github.com/amethyst/specs/pull/765\n\n# 0.19.0 (2023-06-10)\n\n* Bump MSRV to 1.65.0 ([#766])\n* Added index where entity deletion stopped to the error returned from `WorldExt::delete_entities` ([#766])\n* Fix bug where deleting an entity with the wrong generation could clear the components of an existing entity. ([#766])\n* Bump shred to version `0.14.1`, MSRV to 1.60.0 ([shred changelog][shred_changelog], [#756])\n\n[shred_changelog]: https://github.com/amethyst/shred/blob/master/CHANGELOG.md#0141-2022-07-14\n[#756]: https://github.com/amethyst/specs/pull/756\n[#766]: https://github.com/amethyst/specs/pull/766\n\n# 0.18.0 (2022-07-02)\n\n* Increase minumum rustc version to 1.56.1 because of shred and hashbrown dependencies ([#748])\n\n[#748]: https://github.com/amethyst/specs/pull/748\n\nFull changelog: https://github.com/amethyst/specs/compare/v0.17.0...v0.18.0\n\n# 0.17.0 (2021-06-08)\n\n* Deprecate `error::NoError` in favor of `std::convert::Infallible` ([#688])\n* Use `#[non_exhaustive]` for `error::Error`. Note this bumps the minimum supported rust version to 1.40 ([#688]).\n* Add the `derive` feature that enables all derive-related smaller features\n  (`specs-derive` and `shred-derive` currently). ([#687])\n\n[#687]: https://github.com/amethyst/specs/pull/687\n[#688]: https://github.com/amethyst/specs/pull/688\n\n# 0.16.1 (2020-02-18)\n\n* `JoinIter` now implements `Clone` when inner types are `Clone` -- usually for immutable `join()`s. ([#620])\n* Bump `hibitset` to `0.6.3`. ([#620])\n* `StorageEntry::replace` replaces a component, returning the previous value if any. ([#622])\n\n[#620]: https://github.com/slide-rs/specs/pull/620\n[#622]: https://github.com/slide-rs/specs/pull/622\n\n# 0.16.0 (2020-02-13)\n\n* Update `syn`, `quote` and `proc-macro2` to `1.0`. ([#648])\n* Implement `ParJoin` for `MaybeJoin` if the inner type is `ParJoin`. ([#655])\n* Remove `\"nightly\"` feature -- improved panic messages are available on stable. ([#671])\n* Bump `shred` to `0.10.2`. ([#671], [#674], [#683])\n* Components and resources no longer need to be `Send + Sync` if parallel feature is disabled ([#673], [#674])\n* Bump `uuid` to `0.8.1`. ([#683])\n* Bump `rayon` to `1.3.0`. ([#683])\n\n[#648]: https://github.com/amethyst/specs/pull/648\n[#655]: https://github.com/amethyst/specs/pull/655\n[#671]: https://github.com/slide-rs/specs/pull/671\n[#673]: https://github.com/slide-rs/specs/issues/673\n[#674]: https://github.com/slide-rs/specs/pull/674\n[#683]: https://github.com/slide-rs/specs/pull/683\n\n# 0.15.1 (2019-09-16)\n\n* Benchmark uses `nalgebra` instead of `cgmath`. ([#619])\n* Bumped `shrev` from `1.0` to `1.1`. ([#619]).\n* Update hashbrown to 0.6.0, criterion to 0.3 ([#627], [#632])\n* Remove `mopa` in favour of `std::any::Any` ([#631])\n\n[#619]: https://github.com/slide-rs/specs/pull/619\n[#627]: https://github.com/slide-rs/specs/pull/627\n[#631]: https://github.com/slide-rs/specs/pull/631\n[#632]: https://github.com/slide-rs/specs/pull/632\n\n# 0.15.0 (2019-06-30)\n\n* Removed `common` and `RudyStorage` ([#542])\n* Moved `World` to `shred`, added `WorldExt` trait for Specs functionality ([#550])\n* Add `UuidMarker` for UUID <-> `Entity` mappings ([#584])\n* Implement `Join` on `BitSetLike` trait object ([#599])\n* Expose inner field of `AntiStorage` ([#603])\n* Remove `fnv` in favour of `hashbrown` ([#606])\n* Reexport `hibitset`, `rayon`, `shred` and `shrev` ([#606])\n* Reexport `shred_derive::SystemData` when `shred-derive` feature is enabled ([#606])\n* Reexport `specs_derive::{Component, ConvertSaveload}` when `specs-derive` feature is enabled\n([#606])\n\n[#542]: https://github.com/slide-rs/specs/pull/542\n[#550]: https://github.com/slide-rs/specs/pull/550\n[#584]: https://github.com/slide-rs/specs/pull/584\n[#599]: https://github.com/slide-rs/specs/pull/599\n[#603]: https://github.com/slide-rs/specs/pull/603\n[#606]: https://github.com/slide-rs/specs/pull/606\n\n# 0.14.2 (2019-01-04)\n\n* Add `Join`-able entries API to `Storage` ([#518])\n* Several docs / meta improvements ([#526], [#527], [#528], [#530], [#531])\n* Fix bug when re-killing Entity after atomic killing followed by alloc ([#533])\n* Add `Storage::count` and `Storage::is_empty` ([#534])\n\n[#518]: https://github.com/slide-rs/specs/pull/518\n[#526]: https://github.com/slide-rs/specs/pull/526\n[#527]: https://github.com/slide-rs/specs/pull/527\n[#528]: https://github.com/slide-rs/specs/pull/528\n[#530]: https://github.com/slide-rs/specs/pull/530\n[#531]: https://github.com/slide-rs/specs/pull/531\n[#533]: https://github.com/slide-rs/specs/pull/533\n[#534]: https://github.com/slide-rs/specs/pull/534\n\n# 0.14.1 (2018-11-23)\n\n* Allow accessing the `EntitiesRes` fetched by a `Storage` ([#515])\n* Book / API doc improvements ([#496], [#507], [#511])\n\n[#496]: https://github.com/slide-rs/specs/pull/496\n[#507]: https://github.com/slide-rs/specs/pull/507\n[#511]: https://github.com/slide-rs/specs/pull/511\n[#515]: https://github.com/slide-rs/specs/pull/515\n\n# 0.14.0 (2018-10-28)\n\n* Changed `ConvertSaveload::convert_into` and `ConvertSaveload::convert_from` ([#504])\n\n[#504]: https://github.com/slide-rs/specs/pull/504\n\n# 0.13.0 (2018-10-28)\n\nThis release can be skipped; please use `0.14` instead.\n\n* Generation now internally uses the new `NonZeroI32` from `nonzero_signed`, meaning `Option<Entity>` is the same\n  size as `Entity`. Note this bumps the minimum supported rust version to 1.28.0 ([#447]).\n* Improved `saveload` and added custom derive for components with `Entity` ([#460])\n* Removed `world::Bundle` ([#486], [#505])\n* Updated Chapter 7: Setup to be more explicit, updated examples to follow that methodology ([#487])\n* Added some comments to the `saveload` example ([#492])\n* Updated dependency versions ([#494])\n* FlaggedStorage rewrite with single event channel instead of multiple for ordering. ([#489])\n* Make it possible to run on wasm ([#495])\n\n[#447]: https://github.com/slide-rs/specs/pull/447\n[#460]: https://github.com/slide-rs/specs/pull/460\n[#486]: https://github.com/slide-rs/specs/pull/486\n[#487]: https://github.com/slide-rs/specs/pull/487\n[#489]: https://github.com/slide-rs/specs/pull/489\n[#492]: https://github.com/slide-rs/specs/pull/492\n[#494]: https://github.com/slide-rs/specs/pull/494\n[#495]: https://github.com/slide-rs/specs/pull/495\n[#505]: https://github.com/slide-rs/specs/pull/505\n\n# 0.12.3 (2018-09-21)\n\n* Add `MaybeJoin` to iterate over components without filtering the joint set ([#455])\n* Implement `Join` on `Fetch`/`Read`/`Write`/etc. to eliminate unnecessary dereference ([#472])\n\n[#455]: https://github.com/slide-rs/specs/pull/455\n[#472]: https://github.com/slide-rs/specs/pull/472\n\n# 0.12.2 (2018-09-09)\n\n* Fix `Allocator::kill` in the case of atomically created entities. ([#454])\n\n[#454]: https://github.com/slide-rs/specs/pull/454\n\n# 0.12.1 (2018-08-09)\n\n* Add `#[must_use]` to entity builders to avoid people forgetting to call `.build()`. ([#443])\n\n[#443]: https://github.com/slide-rs/specs/pull/443\n\n# 0.12.0 (2018-06-26)\n\n* `Join::open()` and `Storage::unprotected_storage_mut()` have been marked unsafe.\nThanks to [@andrewhickman](https://github.com/andrewhickman) for discovering this\nunsoundness!\n* Add common `Builder` trait to `EntityBuilder` and `LazyBuilder` ([#426])\n* Add common `MarkedBuilder` trait to `EntityBuilder` and `LazyBuilder` ([#426])\n* Add `LazyUpdate::exec_mut` which allows adding a resource from a system ([#433])\n* Add `build_entity()` to `EntitiesRes` so you can use builder syntax in a system.\n* Add `marked()` to LazyBuilder to keep parity with EntityBuilder ([#420])\n* Fix `U64MarkerAllocator`'s internal index not being updated on `saveload::DeserializeComponents` ([#420])\n\n[#426]: https://github.com/slide-rs/specs/pull/426\n[#420]: https://github.com/slide-rs/specs/pull/420\n[#433]: https://github.com/slide-rs/specs/pull/433\n\n# 0.11.2 (2018-05-20)\n\n* Add `unprotected_storage()` and `unprotected_storage_mut()` methods to `Storage` ([#419])\n\n[#419]: https://github.com/slide-rs/specs/pull/419\n\n## 0.11.1 (2018-05-18)\n\n* Add diagrams to book, small code fixes in the book ([#412], [#416], [#417])\n* Increase tuple size for `SerializeComponents` / `DeserializeComponents` ([#415])\n\n[#412]: https://github.com/slide-rs/specs/pull/412\n[#415]: https://github.com/slide-rs/specs/pull/415\n[#416]: https://github.com/slide-rs/specs/pull/416\n[#417]: https://github.com/slide-rs/specs/pull/417\n\n## 0.11.0 (2018-05-14)\n\n* Improve docs, book and examples ([#278], [#281], [#283], [#285], [#296], [#313], [#316], [#322], [#350], [#356], [#363])\n* Add `StorageEntry` for easier handling of inserting/removing component ([#274])\n* Add `EntityBuilder::marked` convenience method ([#287])\n* Add `saveload` module for easy entity serialization ([#275], [#337])\n* Add `nightly` feature flag for unstable features. ([#290])\n* Add `TrackedStorage`, a more ergonomic variant to `FlaggedStorage` ([#291])\n* Exclusive/mutable aliasing for getting an `EntityBuilder` to prevent unsafety. ([#294])\n* Add `Bundle` for registering multiple resources and components at once. ([#296])\n* Add `get()` method to `Join` for retrieving a single entities component in bulk. ([#299])\n* Implementations of `Join` for owned `BitSet`s, including `AtomicBitset`. ([#303])\n* Remove `FlaggedStorage` (new storage uses the same name) and `TrackedStorage` in favor of the new `Tracked` api. ([#305])\n* Add `prelude` module for commonly used structures and traits. ([#305])\n* Add `LazyBuilder` for easier entity construction in systems. ([#320])\n* Replace `Entry` with `PairedStorage` to prevent runtime checks for `RestrictedStorage`. ([#324])\n* Deprecate `check()` which hides a possibly expensive clone. ([#326])\n* Add `ChangeSet` for easy application to components. ([#344])\n* Use criterion.rs for benchmarks ([#348])\n* Update to rayon 1.0 ([#352])\n* Add `World::system_data` method ([#369])\n* BREAKING: Change the way resources are handled (see below) ([shred#77])\n* Export all items currently in prelude in the root of the crate ([#394])\n* If an EntityBuilder drops before being built the entity will now be deleted on maintain ([#394])\n* Removed some redundancy in documentation ([#394])\n\nThere is one bigger breaking change in this release. Almost all`Fetch` / `FetchMut` types need to be replaced\nwith `Read` / `Write`. Both require the resource to implement `Default`, because now the resources can be\nadded to the world automatically. If you want to make the resource optional and you don't have a sensible\ndefault, `Option<Read>` / `Option<Write>` can be used. If you absolutely need the resource and it doesn't\nwork without, use `ReadExpect` which will panic in case the resource does not exist (that's the same\nbehavior as before).\n\n[#274]: https://github.com/slide-rs/specs/pull/274\n[#275]: https://github.com/slide-rs/specs/pull/275\n[#278]: https://github.com/slide-rs/specs/pull/278\n[#281]: https://github.com/slide-rs/specs/pull/281\n[#283]: https://github.com/slide-rs/specs/pull/283\n[#285]: https://github.com/slide-rs/specs/pull/285\n[#287]: https://github.com/slide-rs/specs/pull/287\n[#290]: https://github.com/slide-rs/specs/pull/290\n[#291]: https://github.com/slide-rs/specs/pull/291\n[#294]: https://github.com/slide-rs/specs/pull/294\n[#296]: https://github.com/slide-rs/specs/pull/296\n[#297]: https://github.com/slide-rs/specs/pull/297\n[#299]: https://github.com/slide-rs/specs/pull/299\n[#303]: https://github.com/slide-rs/specs/pull/303\n[#305]: https://github.com/slide-rs/specs/pull/305\n[#313]: https://github.com/slide-rs/specs/pull/313\n[#316]: https://github.com/slide-rs/specs/pull/316\n[#320]: https://github.com/slide-rs/specs/pull/320\n[#322]: https://github.com/slide-rs/specs/pull/322\n[#324]: https://github.com/slide-rs/specs/pull/324\n[#326]: https://github.com/slide-rs/specs/pull/326\n[#337]: https://github.com/slide-rs/specs/pull/337\n[#344]: https://github.com/slide-rs/specs/pull/344\n[#348]: https://github.com/slide-rs/specs/pull/348\n[#350]: https://github.com/slide-rs/specs/pull/350\n[#352]: https://github.com/slide-rs/specs/pull/352\n[#356]: https://github.com/slide-rs/specs/pull/356\n[#363]: https://github.com/slide-rs/specs/pull/363\n[#369]: https://github.com/slide-rs/specs/pull/369\n[#394]: https://github.com/slide-rs/specs/pull/394\n\n[shred#77]: https://github.com/slide-rs/shred/pull/77\n\n## 0.10.0 (2017-10-04)\n\n* Separate `CheckStorage` into two variants and fix soundness issues ([#203])\n* Fix `Merge` system and add test for it ([#243], [#248])\n* Add more examples, docs, tests, benchmarks ([#249], [#251], [#254], [#256], [#258])\n* Use `Result`s to make Specs more robust ([#260])\n* Check code coverage with cargo-travis ([#265])\n* Make `common::Errors` atomic and more convenient ([#255], [#262])\n* Add `World::delete_all` to clear the world ([#257])\n* Fix insertion into occupied `NullStorage` entry ([#269])\n* Add `Storage::drain` method ([#273])\n\n[#203]: https://github.com/slide-rs/specs/pull/203\n[#243]: https://github.com/slide-rs/specs/pull/243\n[#248]: https://github.com/slide-rs/specs/pull/248\n[#249]: https://github.com/slide-rs/specs/pull/249\n[#251]: https://github.com/slide-rs/specs/pull/251\n[#254]: https://github.com/slide-rs/specs/pull/254\n[#255]: https://github.com/slide-rs/specs/pull/255\n[#256]: https://github.com/slide-rs/specs/pull/256\n[#257]: https://github.com/slide-rs/specs/pull/257\n[#258]: https://github.com/slide-rs/specs/pull/258\n[#260]: https://github.com/slide-rs/specs/pull/260\n[#262]: https://github.com/slide-rs/specs/pull/262\n[#265]: https://github.com/slide-rs/specs/pull/265\n[#273]: https://github.com/slide-rs/specs/pull/273\n\n## 0.9.3 (2017-07-22)\n\n* Add `specs-derive` crate, custom `#[derive]` for components ([#192])\n* Add lazy updates: insert and remove components, execute closures on world ([#214], [#221])\n\n[#192]: https://github.com/slide-rs/specs/pull/192\n[#214]: https://github.com/slide-rs/specs/pull/214\n[#221]: https://github.com/slide-rs/specs/pull/221\n\n## 0.9.2 (2017-07-02)\n\n* Fixed grammar in book ([#198])\n* Better docs for `World` and better panic message ([#199])\n* Add support for Emscripten ([#205])\n* Change examples to use `FooStorage<Self>` and destructure system data in method head ([#206])\n* `AntiStorage` for `CheckStorage` ([#208])\n* Integrate futures by introducing a `common` module ([#209])\n\n[#198]: https://github.com/slide-rs/specs/pull/198\n[#199]: https://github.com/slide-rs/specs/pull/199\n[#205]: https://github.com/slide-rs/specs/pull/205\n[#206]: https://github.com/slide-rs/specs/pull/206\n[#208]: https://github.com/slide-rs/specs/pull/208\n[#209]: https://github.com/slide-rs/specs/pull/209\n[#214]: https://github.com/slide-rs/specs/pull/214\n"
        },
        {
          "name": "CODE_OF_CONDUCT.md",
          "type": "blob",
          "size": 3.271484375,
          "content": "# Contributor Covenant Code of Conduct\n\n## Our Pledge\n\nIn the interest of fostering an open and welcoming environment, we as\ncontributors and maintainers pledge to making participation in our project and\nour community a harassment-free experience for everyone, regardless of age, body\nsize, disability, ethnicity, sex characteristics, gender identity and expression,\nlevel of experience, education, socio-economic status, nationality, personal\nappearance, race, religion, or sexual identity and orientation.\n\n## Our Standards\n\nExamples of behavior that contributes to creating a positive environment\ninclude:\n\n* Using welcoming and inclusive language\n* Being respectful of differing viewpoints and experiences\n* Gracefully accepting constructive criticism\n* Focusing on what is best for the community\n* Showing empathy towards other community members\n\nExamples of unacceptable behavior by participants include:\n\n* The use of sexualized language or imagery and unwelcome sexual attention or\n advances\n* Trolling, insulting/derogatory comments, and personal or political attacks\n* Public or private harassment\n* Publishing others' private information, such as a physical or electronic\n address, without explicit permission\n* Other conduct which could reasonably be considered inappropriate in a\n professional setting\n\n## Our Responsibilities\n\nProject maintainers are responsible for clarifying the standards of acceptable\nbehavior and are expected to take appropriate and fair corrective action in\nresponse to any instances of unacceptable behavior.\n\nProject maintainers have the right and responsibility to remove, edit, or\nreject comments, commits, code, wiki edits, issues, and other contributions\nthat are not aligned to this Code of Conduct, or to ban temporarily or\npermanently any contributor for other behaviors that they deem inappropriate,\nthreatening, offensive, or harmful.\n\n## Scope\n\nThis Code of Conduct applies both within project spaces and in public spaces\nwhen an individual is representing the project or its community. Examples of\nrepresenting a project or community include using an official project e-mail\naddress, posting via an official social media account, or acting as an appointed\nrepresentative at an online or offline event. Representation of a project may be\nfurther defined and clarified by project maintainers.\n\n## Enforcement\n\nInstances of abusive, harassing, or otherwise unacceptable behavior may be\nreported by contacting the project team at torkleyy@gmail.com. All\ncomplaints will be reviewed and investigated and will result in a response that\nis deemed necessary and appropriate to the circumstances. The project team is\nobligated to maintain confidentiality with regard to the reporter of an incident.\nFurther details of specific enforcement policies may be posted separately.\n\nProject maintainers who do not follow or enforce the Code of Conduct in good\nfaith may face temporary or permanent repercussions as determined by other\nmembers of the project's leadership.\n\n## Attribution\n\nThis Code of Conduct is adapted from the [Contributor Covenant][homepage], version 1.4,\navailable at https://www.contributor-covenant.org/version/1/4/code-of-conduct.html\n\n[homepage]: https://www.contributor-covenant.org\n\nFor answers to common questions about this code of conduct, see\nhttps://www.contributor-covenant.org/faq\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 4.8154296875,
          "content": "# Contributing\n\nFirst of all, thank you for your interest in contributing.\n\n## Bug reports / feature requests\n\nIf you experience any bugs or have feature requests, please [file an issue].\n\n[file an issue]: https://github.com/amethyst/specs/issues/new/choose\n\n## Getting started\n\nIf you want to contribute code, please read the following sections.\n\nThere are couple of recommended step before you start working on a ticket:\n\n1. If you haven't already, please read [the Specs book](https://specs.amethyst.rs/docs/tutorials/)\n2. Please make sure you read our [Code of Conduct](CODE_OF_CONDUCT.md)\n3. Refer to the [architecture section](#architecture) below to gain some overview\n4. Please continue with the next section (Creating Pull Requests)\n\n## Creating Pull Requests\n\nOnce you worked through the [Getting started](#getting-started) section, congrutalations! You can\nnow start working on [a ticket from the issue tracker][tick]. If there's no ticket yet, please\ncreate one in advance, except your PR provides\n\n* more documentation / minor fixes to existing documentation,\n* more tests or\n* more benchmarks.\n\n[tick]: https://github.com/amethyst/specs/issues?q=is%3Aissue+is%3Aopen+sort%3Aupdated-desc\n\nPlease leave a comment on the respective issue that you're working on it, so we don't end up\nwith two PRs for the same ticket. While working on a branch, you can refer to the [basic guides]\nbelow in case you are not experienced with Git.\n\n[basic guides]: #git\n\nOnce you've made the changes you want to make, or in case you want early feedback / help,\nplease create a PR. The PR template provides more detail on the last steps required.\n\n## Architecture\n\nSpecs exposes an interface for working with the ECS pattern, and it makes heavy use of other\nRust projects to accomplish that.\n\nSpecs can be divided into two big parts:\n\n1. execution of code\n2. managing data\n\nNumber 1 is served by [`shred`](https://github.com/amethyst/shred); it provides the following pieces:\n\n* `System`; this is the central interface for defining logic\n* `Dispatcher` and `DispatcherBuilder` - these are responsible for building a plan for how to run systems\n  (in parallel & sequentially)\n\nAdditionally, `shred` also provides the central piece for number 2:\n\n* `World`; everything that a `System` can access is stored inside.\n\nSpecs itself defines component storages (which are also stored inside the `World`).\nFor those, [`hibitset`](https://github.com/amethyst/hibitset/) is used to:\n\n* store the indices (= entity ids) with an existing component\n* allow efficient joining over sparse component storages\n\nMore details for the individual components can be found in the respective API documentation.\n\n## Git\n\nThis project has some basic guidelines for working with git commits:\n\n* Merge commits are only created by bors; PRs should rebase onto master\n  (see the [rebasing section](#dealing-with-upstream-changes) below)\n\n### Cloning the repository\n\nThe following sections assume you have cloned the repository as follows:\n\n```sh\ngit clone https://github.com/amethyst/specs\n```\n\n(if you're using SSH, you need to use `git@github.com:amethyst/specs`)\n\nGit by default sets the remote branch you cloned from to `origin`. That's what\nis usually used for the fork, so let's change that:\n\n```sh\ngit remote rename origin upstream\ngit remote add origin https://github.com/my_user_name/specs\n```\n\n(if you're using SSH, you need to use `git@github.com:my_user_name/specs`)\n\n### Starting a new branch\n\n```sh\ngit fetch upstream && git checkout -b foo upstream/master\n```\n\n### Dealing with upstream changes\n\nPlease use rebase over merge, since the latter is bad for the commit history.\nIf you're new to git, here's how to do that:\n\n```sh\ngit fetch upstream\n```\n\nAssuming `upstream` is the upstream repo, this will fetch the latest changes.\n\nUse the following with care if you're new to Git; better make a backup!\n\n```sh\ngit rebase upstream/master\n```\n\nThis will try to re-apply your commits on top of the upstream changes. If there\nare conflicts, you'll be asked to fix them; once done, add the changes with\n`git add -A` and use `git rebase --continue`. Repeat until there are no more\nconflicts.\n\nThat should be it. Note that you'll have to force-push to your branch in case\nyou have pushed before.\n\n### Squashing commits\n\nIf you created more commits than intended, it can be a good idea to combine some\nof your commits. Note that this, again, should be used with care if you don't\nknow what you're doing; better create a backup before!\n\n```sh\ngit rebase --interactive HEAD~$num_commits # replace this\n```\n\nYou just need to replace `num_commits` with the number of commits you want to\nedit (use `git log` if unsure).\n\nNow you can simply change some commits to `s` or `f` to merge them into the\nabove commits. Once done, you'll be asked for the new commit messages.\n\nThat should be it. Note that you'll have to force-push to your branch in case\nyou have pushed before.\n"
        },
        {
          "name": "Cargo.toml",
          "type": "blob",
          "size": 2.357421875,
          "content": "[package]\nname = \"specs\"\nversion = \"0.20.0\"\ndescription = \"\"\"\nSpecs is an Entity-Component-System library written in Rust.\n\"\"\"\ndocumentation = \"https://docs.rs/specs/\"\nrepository = \"https://github.com/amethyst/specs\"\nhomepage = \"https://amethyst.github.io/specs\"\nreadme = \"README.md\"\nkeywords = [\"gamedev\", \"ecs\", \"entity\", \"component\"]\ncategories = [\"concurrency\", \"game-engines\"]\nlicense = \"MIT OR Apache-2.0\"\nauthors = [\"slide-rs hackers\"]\ninclude = [\"/src\", \"/examples\", \"/benches\", \"/README.md\", \"/LICENSE-MIT\", \"/LICENSE-APACHE\"]\nedition = \"2021\"\nrust-version = \"1.70.0\"\n\n# the `storage_cmp` and `storage_sparse` benches are called from `benches_main`\nautobenches = false\n\n[dependencies]\nahash = \"0.8.6\"\ncrossbeam-queue = \"0.3\"\nhibitset = { version = \"0.6.4\", default-features = false }\nlog = \"0.4.8\"\nshred = { version = \"0.16.0\", default-features = false }\nshrev = \"1.1.1\"\ntuple_utils = \"0.4.0\"\nnougat = \"0.2.3\"\n\nrayon = { version = \"1.5.1\", optional = true }\nserde = { version = \"1.0.104\", optional = true, features = [\"serde_derive\"] }\nspecs-derive = { version = \"0.4.1\", path = \"specs-derive\", optional = true }\nuuid = { version = \"1.0\", optional = true, features = [\"v4\", \"serde\"] }\n\n[features]\ndefault = [\"parallel\"]\nparallel = [\"dep:rayon\", \"shred/parallel\", \"hibitset/parallel\"]\nuuid_entity = [\"dep:uuid\", \"serde\"]\nstdweb = [\"dep:uuid\", \"uuid?/js\"]\nstorage-event-control = []\nderive = [\"shred-derive\", \"specs-derive\"]\nnightly = [\"shred/nightly\"]\n\nshred-derive = [\"shred/shred-derive\"]\n\n[package.metadata.docs.rs]\nfeatures = [\"parallel\", \"serde\", \"shred-derive\", \"specs-derive\", \"uuid_entity\", \"storage-event-control\"]\n\n[dev-dependencies]\nnalgebra = \"0.32\"\ncriterion = \"0.3.1\"\nron = \"0.8.1\"\nrand = \"0.8\"\nserde_json = \"1.0.48\"\nshred = { version = \"0.16.0\", default-features = false, features = [\"shred-derive\"] }\nspecs-derive = { path = \"specs-derive\", version = \"0.4.1\" }\n\n[[example]]\nname = \"async\"\n[[example]]\nname = \"basic\"\n[[example]]\nname = \"bitset\"\n[[example]]\nname = \"cluster_bomb\"\n[[example]]\nname = \"full\"\n[[example]]\nname = \"lend_join\"\ntest = true\n[[example]]\nname = \"ordered_track\"\n[[example]]\nname = \"saveload\"\nrequired-features = [\"serde\"]\n[[example]]\nname = \"slices\"\n[[example]]\nname = \"track\"\n\n[[bench]]\nname = \"benches_main\"\nharness = false\n\n[[bench]]\nname = \"parallel\"\n\n[[bench]]\nname = \"world\"\nharness = false\n\n[[bench]]\nname = \"big_or_small\"\n\n[workspace]\nmembers = [\"specs-derive\"]\n"
        },
        {
          "name": "LICENSE-APACHE",
          "type": "blob",
          "size": 11.0908203125,
          "content": "                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"{}\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright {yyyy} {name of copyright owner}\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n"
        },
        {
          "name": "LICENSE-MIT",
          "type": "blob",
          "size": 1.046875,
          "content": "Copyright (c) 2017 The Specs Project Developers\n\nPermission is hereby granted, free of charge, to any\nperson obtaining a copy of this software and associated\ndocumentation files (the \"Software\"), to deal in the\nSoftware without restriction, including without\nlimitation the rights to use, copy, modify, merge,\npublish, distribute, sublicense, and/or sell copies of\nthe Software, and to permit persons to whom the Software\nis furnished to do so, subject to the following\nconditions:\n\nThe above copyright notice and this permission notice\nshall be included in all copies or substantial portions\nof the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF\nANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED\nTO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A\nPARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT\nSHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\nOF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR\nIN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\nDEALINGS IN THE SOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 4.2392578125,
          "content": "# Specs\n\n> **S**pecs **P**arallel **ECS**\n\n[![Build Status][bi]][bl] [![Crates.io][ci]][cl] [![Gitter][gi]][gl] ![MIT/Apache][li] [![Docs.rs][di]][dl]\n\n[bi]: https://github.com/amethyst/specs/actions/workflows/ci.yml/badge.svg?branch=master\n[bl]: https://github.com/amethyst/specs/actions/workflows/ci.yml\n\n[ci]: https://img.shields.io/crates/v/specs.svg\n[cl]: https://crates.io/crates/specs/\n\n[gi]: https://badges.gitter.im/slide-rs/specs.svg\n[gl]: https://gitter.im/slide-rs/specs\n\n[li]: https://img.shields.io/crates/l/specs.svg?maxAge=2592000\n\n[di]: https://docs.rs/specs/badge.svg\n[dl]: https://docs.rs/specs/\n\n\nSpecs is an Entity-Component System written in Rust.\nUnlike most other ECS libraries out there, it provides\n\n* easy parallelism\n* high flexibility\n    * contains 5 different storages for components, which can be extended by the user\n    * its types are mostly not coupled, so you can easily write some part yourself and\n      still use Specs\n    * `System`s may read from and write to components and resources, can depend on each\n      other and you can use barriers to force several stages in system execution\n* high performance for real-world applications\n\nMinimum Rust version: 1.70\n\n## [Link to the book][book]\n\n[book]: https://amethyst.github.io/specs/docs/tutorials/\n\n## Example\n\n```rust\nuse specs::prelude::*;\n\n// A component contains data\n// which is associated with an entity.\n#[derive(Debug)]\nstruct Vel(f32);\n\nimpl Component for Vel {\n    type Storage = VecStorage<Self>;\n}\n\n#[derive(Debug)]\nstruct Pos(f32);\n\nimpl Component for Pos {\n    type Storage = VecStorage<Self>;\n}\n\nstruct SysA;\n\nimpl<'a> System<'a> for SysA {\n    // These are the resources required for execution.\n    // You can also define a struct and `#[derive(SystemData)]`,\n    // see the `full` example.\n    type SystemData = (WriteStorage<'a, Pos>, ReadStorage<'a, Vel>);\n\n    fn run(&mut self, (mut pos, vel): Self::SystemData) {\n        // The `.join()` combines multiple component storages,\n        // so we get access to all entities which have\n        // both a position and a velocity.\n        for (pos, vel) in (&mut pos, &vel).join() {\n            pos.0 += vel.0;\n        }\n    }\n}\n\nfn main() {\n    // The `World` is our\n    // container for components\n    // and other resources.\n    let mut world = World::new();\n    world.register::<Pos>();\n    world.register::<Vel>();\n\n    // An entity may or may not contain some component.\n\n    world.create_entity().with(Vel(2.0)).with(Pos(0.0)).build();\n    world.create_entity().with(Vel(4.0)).with(Pos(1.6)).build();\n    world.create_entity().with(Vel(1.5)).with(Pos(5.4)).build();\n\n    // This entity does not have `Vel`, so it won't be dispatched.\n    world.create_entity().with(Pos(2.0)).build();\n\n    // This builds a dispatcher.\n    // The third parameter of `with` specifies\n    // logical dependencies on other systems.\n    // Since we only have one, we don't depend on anything.\n    // See the `full` example for dependencies.\n    let mut dispatcher = DispatcherBuilder::new().with(SysA, \"sys_a\", &[]).build();\n    // This will call the `setup` function of every system.\n    // In this example this has no effect since we already registered our components.\n    dispatcher.setup(&mut world);\n\n    // This dispatches all the systems in parallel (but blocking).\n    dispatcher.dispatch(&mut world);\n}\n```\n\nPlease look into [the examples directory](examples) for more.\n\n## Public dependencies\n\n| crate    | version                                                                                        |\n|----------|------------------------------------------------------------------------------------------------|\n| hibitset | [![hibitset](https://img.shields.io/crates/v/hibitset.svg)](https://crates.io/crates/hibitset) |\n| rayon    | [![rayon](https://img.shields.io/crates/v/rayon.svg)](https://crates.io/crates/rayon)          |\n| shred    | [![shred](https://img.shields.io/crates/v/shred.svg)](https://crates.io/crates/shred)          |\n| shrev    | [![shrev](https://img.shields.io/crates/v/shrev.svg)](https://crates.io/crates/shrev)          |\n\n## Contribution\n\nContribution is very welcome! If you didn't contribute before,\njust filter for issues with \"easy\" or \"good first issue\" label.\nPlease note that your contributions are assumed to be dual-licensed under Apache-2.0/MIT.\n"
        },
        {
          "name": "benches",
          "type": "tree",
          "content": null
        },
        {
          "name": "clippy.toml",
          "type": "blob",
          "size": 0.046875,
          "content": "disallowed-types = [\"std::collections::HashMap\"]"
        },
        {
          "name": "deny.toml",
          "type": "blob",
          "size": 0.7529296875,
          "content": "# See docs: https://embarkstudios.github.io/cargo-deny/checks/index.html\n\n[advisories]\nunmaintained = \"warn\"\nvulnerability = \"warn\"\nyanked = \"deny\"\nnotice = \"deny\"\n\n[bans]\nmultiple-versions = \"warn\"\nwildcards = \"deny\"\nskip = [\n    { name = \"itertools\", version = \"0.9.0\" }, # criterion brings in two versions\n]\n\n[sources]\nunknown-registry = \"deny\"\nunknown-git = \"deny\"\nrequired-git-spec = \"rev\"\n\n[licenses]\ncopyleft = \"deny\"\n\n# Run `cargo deny list` to see which crates use which license\n# and add them to this array if we accept them\n\nallow = [\"MIT\", \"Apache-2.0\", \"Unlicense\", \"BSD-3-Clause\"]\n\n# We want really high confidence when inferring licenses from text\nconfidence-threshold = 0.93\n\nexceptions = [\n    { allow = [\"Unicode-DFS-2016\"], name = \"unicode-ident\" },\n]\n"
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "miri.sh",
          "type": "blob",
          "size": 1.31640625,
          "content": "#!/bin/bash\n#\n# Convenience script for running Miri, also the same one that the CI runs!\n\nset -e\n\n# use half the available threads since miri can be a bit memory hungry\ntest_threads=$((($(nproc) - 1) / 2 + 1))\necho using $test_threads threads\n\n# filters out long running tests\nfilter='not (test(100k) | test(map_test::wrap) | test(map_test::insert_same_key) | test(=mixed_create_merge)| test(=par_join_many_entities_and_systems) | test(=stillborn_entities))'\necho \"using filter: \\\"$filter\\\"\"\n\n# Miri currently reports leaks in some tests so we disable that check\n# here (might be due to ptr-int-ptr in crossbeam-epoch so might be\n# resolved in future versions of that crate).\n#\n# crossbeam-epoch doesn't pass with stacked borrows so we need to use tree-borrows\n# https://github.com/crossbeam-rs/crossbeam/issues/545\nMIRIFLAGS=\"-Zmiri-disable-isolation -Zmiri-ignore-leaks -Zmiri-tree-borrows\" \\\n    cargo +nightly miri nextest run \\\n    -E \"$filter\" \\\n    --test-threads=\"$test_threads\" \\\n    # use nocapture or run miri directly to see warnings from miri\n    #--nocapture\n\n# Run tests only available when parallel feature is disabled.\nMIRIFLAGS=\"-Zmiri-disable-isolation -Zmiri-ignore-leaks -Zmiri-tree-borrows\" \\\n    cargo +nightly miri nextest run \\\n    --no-default-features \\\n    -E \"binary(no_parallel)\" \\\n    --test-threads=\"$test_threads\"\n\n"
        },
        {
          "name": "specs-derive",
          "type": "tree",
          "content": null
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}