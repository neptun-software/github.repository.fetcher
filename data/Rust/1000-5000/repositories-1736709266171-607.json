{
  "metadata": {
    "timestamp": 1736709266171,
    "page": 607,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjYxMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "rust-random/rand",
      "stars": 1707,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.0751953125,
          "content": "target\nCargo.lock\nrand_wasm_bindgen_test*.[tj]s\nrand_wasm_bindgen_test*.wasm\n"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 29.05859375,
          "content": "# Changelog\nAll notable changes to this project will be documented in this file.\n\nThe format is based on [Keep a Changelog](http://keepachangelog.com/en/1.0.0/)\nand this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0.html).\n\nA [separate changelog is kept for rand_core](rand_core/CHANGELOG.md).\n\nYou may also find the [Upgrade Guide](https://rust-random.github.io/book/update.html) useful.\n\n## [0.9.0-beta.3] - 2025-01-03\n- Add feature `thread_rng` (#1547)\n\n## [0.9.0-beta.1] - 2024-11-30\n- Bump `rand_core` version\n\n## [0.9.0-beta.0] - 2024-11-25\nThis is a pre-release. To depend on this version, use `rand = \"=0.9.0-beta.0\"` to prevent automatic updates (which can be expected to include breaking changes).\n\n### Security and unsafe\n- Policy: \"rand is not a crypto library\" (#1514)\n- Remove fork-protection from `ReseedingRng` and `ThreadRng`. Instead, it is recommended to call `ThreadRng::reseed` on fork. (#1379)\n- Use `zerocopy` to replace some `unsafe` code (#1349, #1393, #1446, #1502)\n\n### Compilation options\n- Bump the MSRV to 1.63.0 (#1207, #1246, #1269, #1341, #1416, #1536); note that 1.60.0 may work for dependents when using `--ignore-rust-version`\n- Support `std` feature without `getrandom` or `rand_chacha` (#1354)\n- Improve `thread_rng` related docs (#1257)\n- The `serde1` feature has been renamed `serde` (#1477)\n- The implicit feature `rand_chacha` has been removed. This is enabled by `std_rng`. (#1473)\n- Enable feature `small_rng` by default (#1455)\n- Rename feature `getrandom` to `os_rng` (#1537)\n\n### Inherited changes from `rand_core`\n- Add fn `RngCore::read_adapter` implementing `std::io::Read` (#1267)\n- Add trait `CryptoBlockRng: BlockRngCore`; make `trait CryptoRng: RngCore` (#1273)\n- Add traits `TryRngCore`, `TryCryptoRng` (#1424, #1499)\n- Add bounds `Clone` and `AsRef` to associated type `SeedableRng::Seed` (#1491)\n\n### Rng trait and top-level fns\n- Rename fn `rand::thread_rng()` to `rand::rng()`, and remove from the prelude (#1506)\n- Add top-level fns `random_iter`, `random_range`, `random_bool`, `random_ratio`, `fill` (#1488)\n- Remove fn `rand::random()` from the prelude (#1506)\n- Re-introduce fn `Rng::gen_iter` as `random_iter` (#1305, #1500)\n- Rename fn `Rng::gen` to `random` to avoid conflict with the new `gen` keyword in Rust 2024 (#1438)\n- Rename fns `Rng::gen_range` to `random_range`, `gen_bool` to `random_bool`, `gen_ratio` to `random_ratio` (#1505)\n- Annotate panicking methods with `#[track_caller]` (#1442, #1447)\n\n### RNGs\n- Make `ReseedingRng::reseed` discard remaining data from the last block generated (#1379)\n- Change fn `SmallRng::seed_from_u64` implementation (#1203)\n- Fix `<SmallRng as SeedableRng>::Seed` size to 256 bits (#1455)\n- Remove first parameter (`rng`) of `ReseedingRng::new` (#1533)\n- Improve SmallRng initialization performance (#1482)\n\n### Sequences\n- Optimize fn `sample_floyd`, affecting output of `rand::seq::index::sample` and `rand::seq::SliceRandom::choose_multiple` (#1277)\n- New, faster algorithms for `IteratorRandom::choose` and `choose_stable` (#1268)\n- New, faster algorithms for `SliceRandom::shuffle` and `partial_shuffle` (#1272)\n- Split trait `SliceRandom` into `IndexedRandom`, `IndexedMutRandom`, `SliceRandom` (#1382)\n- Add `IndexedRandom::choose_multiple_array`, `index::sample_array` (#1453, #1469)\n- Fix `IndexdRandom::choose_multiple_weighted` for very small seeds and optimize for large input length / low memory (#1530)\n\n### Distributions\n- Rename module `rand::distributions` to `rand::distr` (#1470)\n- Relax `Sized` bound on `Distribution<T> for &D` (#1278)\n- Rename distribution `Standard` to `StandardUniform` (#1526)\n- Remove impl of `Distribution<Option<T>>` for `StandardUniform` (#1526)\n- Let distribution `StandardUniform` support all `NonZero*` types (#1332)\n- Fns `{Uniform, UniformSampler}::{new, new_inclusive}` return a `Result` (instead of potentially panicking) (#1229)\n- Distribution `Uniform` implements `TryFrom` instead of `From` for ranges (#1229)\n- Optimize distribution `Uniform`: use Canon's method (single sampling) / Lemire's method (distribution sampling) for faster sampling (breaks value stability; #1287)\n- Add `UniformUsize` and use to make `Uniform` for `usize` portable (#1487)\n- Remove support for generating `isize` and `usize` values with `Standard`, `Uniform` (except via `UniformUsize`) and `Fill` and usage as a `WeightedAliasIndex` weight (#1487)\n- Optimize fn `sample_single_inclusive` for floats (+~20% perf) (#1289)\n- Allow `UniformFloat::new` samples and `UniformFloat::sample_single` to yield `high` (#1462)\n- Add impl `DistString` for distributions `Slice<char>` and `Uniform<char>` (#1315)\n- Add fn `Slice::num_choices` (#1402)\n- Fix portability of distribution `Slice` (#1469)\n- Add trait `Weight`, allowing `WeightedIndex` to trap overflow (#1353)\n- Add fns `weight, weights, total_weight` to distribution `WeightedIndex` (#1420)\n- Rename enum `WeightedError` to `WeightError`, revising variants (#1382) and mark as `#[non_exhaustive]` (#1480)\n- Add fn `p()` for distribution `Bernoulli` to access probability (#1481)\n\n### SIMD\n- Switch to `std::simd`, expand SIMD & docs (#1239)\n- Optimise SIMD widening multiply (#1247)\n\n### Documentation\n- Add `Cargo.lock.msrv` file (#1275)\n- Docs: enable experimental `--generate-link-to-definition` feature (#1327)\n- Better doc of crate features, use `doc_auto_cfg` (#1411, #1450)\n\n### Other\n- Reformat with `rustfmt` and enforce (#1448)\n- Apply Clippy suggestions and enforce (#1448, #1474)\n- Move all benchmarks to new `benches` crate (#1329, #1439) and migrate to Criterion (#1490)\n\n## [0.8.5] - 2021-08-20\n### Fixes\n- Fix build on non-32/64-bit architectures (#1144)\n- Fix \"min_const_gen\" feature for `no_std` (#1173)\n- Check `libc::pthread_atfork` return value with panic on error (#1178)\n- More robust reseeding in case `ReseedingRng` is used from a fork handler (#1178)\n- Fix nightly: remove unused `slice_partition_at_index` feature (#1215)\n- Fix nightly + `simd_support`: update `packed_simd` (#1216)\n\n### Rngs\n- `StdRng`: Switch from HC128 to ChaCha12 on emscripten (#1142).\n  We now use ChaCha12 on all platforms.\n\n### Documentation\n- Added docs about rand's use of const generics (#1150)\n- Better random chars example (#1157)\n\n\n## [0.8.4] - 2021-06-15\n### Additions\n- Use const-generics to support arrays of all sizes (#1104)\n- Implement `Clone` and `Copy` for `Alphanumeric` (#1126)\n- Add `Distribution::map` to derive a distribution using a closure (#1129)\n- Add `Slice` distribution (#1107)\n- Add `DistString` trait with impls for `Standard` and `Alphanumeric` (#1133)\n\n### Other\n- Reorder asserts in `Uniform` float distributions for easier debugging of non-finite arguments\n  (#1094, #1108)\n- Add range overflow check in `Uniform` float distributions (#1108)\n- Deprecate `rngs::adapter::ReadRng` (#1130)\n\n## [0.8.3] - 2021-01-25\n### Fixes\n- Fix `no-std` + `alloc` build by gating `choose_multiple_weighted` on `std` (#1088)\n\n## [0.8.2] - 2021-01-12\n### Fixes\n- Fix panic in `UniformInt::sample_single_inclusive` and `Rng::gen_range` when\n  providing a full integer range (eg `0..=MAX`) (#1087)\n\n## [0.8.1] - 2020-12-31\n### Other\n- Enable all stable features in the playground (#1081)\n\n## [0.8.0] - 2020-12-18\n### Platform support\n- The minimum supported Rust version is now 1.36 (#1011)\n- `getrandom` updated to v0.2 (#1041)\n- Remove `wasm-bindgen` and `stdweb` feature flags. For details of WASM support,\n  see the [getrandom documentation](https://docs.rs/getrandom/latest). (#948)\n- `ReadRng::next_u32` and `next_u64` now use little-Endian conversion instead\n  of native-Endian, affecting results on Big-Endian platforms (#1061)\n- The `nightly` feature no longer implies the `simd_support` feature (#1048)\n- Fix `simd_support` feature to work on current nightlies (#1056)\n\n### Rngs\n- `ThreadRng` is no longer `Copy` to enable safe usage within thread-local destructors (#1035)\n- `gen_range(a, b)` was replaced with `gen_range(a..b)`. `gen_range(a..=b)` is\n  also supported. Note that `a` and `b` can no longer be references or SIMD types. (#744, #1003)\n- Replace `AsByteSliceMut` with `Fill` and add support for `[bool], [char], [f32], [f64]` (#940)\n- Restrict `rand::rngs::adapter` to `std` (#1027; see also #928)\n- `StdRng`: add new `std_rng` feature flag (enabled by default, but might need\n  to be used if disabling default crate features) (#948)\n- `StdRng`: Switch from ChaCha20 to ChaCha12 for better performance (#1028)\n- `SmallRng`: Replace PCG algorithm with xoshiro{128,256}++ (#1038)\n\n### Sequences\n- Add `IteratorRandom::choose_stable` as an alternative to `choose` which does\n  not depend on size hints (#1057)\n- Improve accuracy and performance of `IteratorRandom::choose` (#1059)\n- Implement `IntoIterator` for `IndexVec`, replacing the `into_iter` method (#1007)\n- Add value stability tests for `seq` module (#933)\n\n### Misc\n- Support `PartialEq` and `Eq` for `StdRng`, `SmallRng` and `StepRng` (#979)\n- Added a `serde1` feature and added Serialize/Deserialize to `UniformInt` and `WeightedIndex` (#974)\n- Drop some unsafe code (#962, #963, #1011)\n- Reduce packaged crate size (#983)\n- Migrate to GitHub Actions from Travis+AppVeyor (#1073)\n\n### Distributions\n- `Alphanumeric` samples bytes instead of chars (#935)\n- `Uniform` now supports `char`, enabling `rng.gen_range('A'..='Z')` (#1068)\n- Add `UniformSampler::sample_single_inclusive` (#1003)\n\n#### Weighted sampling\n- Implement weighted sampling without replacement (#976, #1013)\n- `rand::distributions::alias_method::WeightedIndex` was moved to `rand_distr::WeightedAliasIndex`.\n  The simpler alternative `rand::distribution::WeightedIndex` remains. (#945)\n- Improve treatment of rounding errors in `WeightedIndex::update_weights` (#956)\n- `WeightedIndex`: return error on NaN instead of panic (#1005)\n\n### Documentation\n- Document types supported by `random` (#994)\n- Document notes on password generation (#995)\n- Note that `SmallRng` may not be the best choice for performance and in some\n  other cases (#1038)\n- Use `doc(cfg)` to annotate feature-gated items (#1019)\n- Adjust README (#1065)\n\n## [0.7.3] - 2020-01-10\n### Fixes\n- The `Bernoulli` distribution constructors now reports an error on NaN and on\n  `denominator == 0`. (#925)\n- Use `std::sync::Once` to register fork handler, avoiding possible atomicity violation (#928)\n- Fix documentation on the precision of generated floating-point values\n\n### Changes\n- Unix: make libc dependency optional; only use fork protection with std feature (#928)\n\n### Additions\n- Implement `std::error::Error` for `BernoulliError` (#919)\n\n## [0.7.2] - 2019-09-16\n### Fixes\n- Fix dependency on `rand_core` 0.5.1 (#890)\n\n### Additions\n- Unit tests for value stability of distributions added (#888)\n\n## [0.7.1] - 2019-09-13\n### Yanked\nThis release was yanked since it depends on `rand_core::OsRng` added in 0.5.1\nbut specifies a dependency on version 0.5.0 (#890), causing a broken builds\nwhen updating from `rand 0.7.0` without also updating `rand_core`.\n\n### Fixes\n- Fix `no_std` behaviour, appropriately enable c2-chacha's `std` feature (#844)\n- `alloc` feature in `no_std` is available since Rust 1.36 (#856)\n- Fix or squelch issues from Clippy lints (#840)\n\n### Additions\n- Add a `no_std` target to CI to continuously evaluate `no_std` status (#844)\n- `WeightedIndex`: allow adjusting a sub-set of weights (#866)\n\n## [0.7.0] - 2019-06-28\n\n### Fixes\n- Fix incorrect pointer usages revealed by Miri testing (#780, #781)\n- Fix (tiny!) bias in `Uniform` for 8- and 16-bit ints (#809)\n\n### Crate\n- Bumped MSRV (min supported Rust version) to 1.32.0\n- Updated to Rust Edition 2018  (#823, #824)\n- Removed dependence on `rand_xorshift`, `rand_isaac`, `rand_jitter` crates (#759, #765)\n- Remove dependency on `winapi` (#724)\n- Removed all `build.rs` files (#824)\n- Removed code already deprecated in version 0.6 (#757)\n- Removed the serde1 feature (It's still available for backwards compatibility, but it does not do anything. #830)\n- Many documentation changes\n\n### rand_core\n- Updated to `rand_core` 0.5.0\n- `Error` type redesigned with new API (#800)\n- Move `from_entropy` method to `SeedableRng` and remove `FromEntropy` (#800)\n- `SeedableRng::from_rng` is now expected to be value-stable (#815)\n\n### Standard RNGs\n- OS interface moved from `rand_os` to new `getrandom` crate (#765, [getrandom](https://github.com/rust-random/getrandom))\n- Use ChaCha for `StdRng` and `ThreadRng` (#792)\n- Feature-gate `SmallRng` (#792)\n- `ThreadRng` now supports `Copy` (#758)\n- Deprecated `EntropyRng` (#765)\n- Enable fork protection of ReseedingRng without `std` (#724)\n\n### Distributions\n- Many distributions have been moved to `rand_distr` (#761)\n- `Bernoulli::new` constructor now returns a `Result` (#803)\n- `Distribution::sample_iter` adjusted for more flexibility (#758)\n- Added `distributions::weighted::alias_method::WeightedIndex` for `O(1)` sampling (#692)\n- Support sampling `NonZeroU*` types with the `Standard` distribution (#728)\n- Optimised `Binomial` distribution sampling (#735, #740, #752)\n- Optimised SIMD float sampling (#739)\n\n### Sequences\n- Make results portable across 32- and 64-bit by using `u32` samples for `usize` where possible (#809)\n\n## [0.6.5] - 2019-01-28\n### Crates\n- Update `rand_core` to 0.4 (#703)\n- Move `JitterRng` to its own crate (#685)\n- Add a wasm-bindgen test crate (#696)\n\n### Platforms\n- Fuchsia: Replaced fuchsia-zircon with fuchsia-cprng\n\n### Doc\n- Use RFC 1946 for doc links (#691)\n- Fix some doc links and notes (#711)\n\n## [0.6.4] - 2019-01-08\n### Fixes\n- Move wasm-bindgen shims to correct crate (#686)\n- Make `wasm32-unknown-unknown` compile but fail at run-time if missing bindingsg (#686)\n\n## [0.6.3] - 2019-01-04\n### Fixes\n- Make the `std` feature require the optional `rand_os` dependency (#675)\n- Re-export the optional WASM dependencies of `rand_os` from `rand` to avoid breakage (#674)\n\n## [0.6.2] - 2019-01-04\n### Additions\n- Add `Default` for `ThreadRng` (#657)\n- Move `rngs::OsRng` to `rand_os` sub-crate; clean up code; use as dependency (#643) ##BLOCKER##\n- Add `rand_xoshiro` sub-crate, plus benchmarks (#642, #668)\n\n### Fixes\n- Fix bias in `UniformInt::sample_single` (#662)\n- Use `autocfg` instead of `rustc_version` for rustc version detection (#664)\n- Disable `i128` and `u128` if the `target_os` is `emscripten` (#671: work-around Emscripten limitation)\n- CI fixes (#660, #671)\n\n### Optimisations\n- Optimise memory usage of `UnitCircle` and `UnitSphereSurface` distributions (no PR)\n\n## [0.6.1] - 2018-11-22\n- Support sampling `Duration` also for `no_std` (only since Rust 1.25) (#649)\n- Disable default features of `libc` (#647)\n\n## [0.6.0] - 2018-11-14\n\n### Project organisation\n- Rand has moved from [rust-lang-nursery](https://github.com/rust-lang-nursery/rand)\n  to [rust-random](https://github.com/rust-random/rand)! (#578)\n- Created [The Rust Random Book](https://rust-random.github.io/book/)\n  ([source](https://github.com/rust-random/book))\n- Update copyright and licence notices (#591, #611)\n- Migrate policy documentation from the wiki (#544)\n\n### Platforms\n- Add fork protection on Unix (#466)\n- Added support for wasm-bindgen. (#541, #559, #562, #600)\n- Enable `OsRng` for powerpc64, sparc and sparc64 (#609)\n- Use `syscall` from `libc` on Linux instead of redefining it (#629)\n\n### RNGs\n- Switch `SmallRng` to use PCG (#623)\n- Implement `Pcg32` and `Pcg64Mcg` generators (#632)\n- Move ISAAC RNGs to a dedicated crate (#551)\n- Move Xorshift RNG to its own crate (#557)\n- Move ChaCha and HC128 RNGs to dedicated crates (#607, #636)\n- Remove usage of `Rc` from `ThreadRng` (#615)\n\n### Sampling and distributions\n- Implement `Rng.gen_ratio()` and `Bernoulli::new_ratio()` (#491)\n- Make `Uniform` strictly respect `f32` / `f64` high/low bounds (#477)\n- Allow `gen_range` and `Uniform` to work on non-`Copy` types (#506)\n- `Uniform` supports inclusive ranges: `Uniform::from(a..=b)`. This is\n  automatically enabled for Rust >= 1.27. (#566)\n- Implement `TrustedLen` and `FusedIterator` for `DistIter` (#620)\n\n#### New distributions\n- Add the `Dirichlet` distribution (#485)\n- Added sampling from the unit sphere and circle. (#567)\n- Implement the triangular distribution (#575)\n- Implement the Weibull distribution (#576)\n- Implement the Beta distribution (#574)\n\n#### Optimisations\n\n- Optimise `Bernoulli::new` (#500)\n- Optimise `char` sampling (#519)\n- Optimise sampling of `std::time::Duration` (#583)\n\n### Sequences\n- Redesign the `seq` module (#483, #515)\n- Add `WeightedIndex` and `choose_weighted` (#518, #547)\n- Optimised and changed return type of the `sample_indices` function. (#479)\n- Use `Iterator::size_hint()` to speed up `IteratorRandom::choose` (#593)\n\n### SIMD\n- Support for generating SIMD types (#523, #542, #561, #630)\n\n### Other\n- Revise CI scripts (#632, #635)\n- Remove functionality already deprecated in 0.5 (#499)\n- Support for `i128` and `u128` is automatically enabled for Rust >= 1.26. This\n  renders the `i128_support` feature obsolete. It still exists for backwards\n  compatibility but does not have any effect. This breaks programs using Rand\n  with `i128_support` on nightlies older than Rust 1.26. (#571)\n\n\n## [0.5.5] - 2018-08-07\n### Documentation\n- Fix links in documentation (#582)\n\n\n## [0.5.4] - 2018-07-11\n### Platform support\n- Make `OsRng` work via WASM/stdweb for WebWorkers\n\n\n## [0.5.3] - 2018-06-26\n### Platform support\n- OpenBSD, Bitrig: fix compilation (broken in 0.5.1) (#530)\n\n\n## [0.5.2] - 2018-06-18\n### Platform support\n- Hide `OsRng` and `JitterRng` on unsupported platforms (#512; fixes #503).\n\n\n## [0.5.1] - 2018-06-08\n\n### New distributions\n- Added Cauchy distribution. (#474, #486)\n- Added Pareto distribution. (#495)\n\n### Platform support and `OsRng`\n- Remove blanket Unix implementation. (#484)\n- Remove Wasm unimplemented stub. (#484)\n- Dragonfly BSD: read from `/dev/random`. (#484)\n- Bitrig: use `getentropy` like OpenBSD. (#484)\n- Solaris: (untested) use `getrandom` if available, otherwise `/dev/random`. (#484)\n- Emscripten, `stdweb`: split the read up in chunks. (#484)\n- Emscripten, Haiku: don't do an extra blocking read from `/dev/random`. (#484)\n- Linux, NetBSD, Solaris: read in blocking mode on first use in `fill_bytes`. (#484)\n- Fuchsia, CloudABI: fix compilation (broken in Rand 0.5). (#484)\n\n\n## [0.5.0] - 2018-05-21\n\n### Crate features and organisation\n- Minimum Rust version update: 1.22.0. (#239)\n- Create a separate `rand_core` crate. (#288)\n- Deprecate `rand_derive`. (#256)\n- Add `prelude` (and module reorganisation). (#435)\n- Add `log` feature. Logging is now available in `JitterRng`, `OsRng`, `EntropyRng` and `ReseedingRng`. (#246)\n- Add `serde1` feature for some PRNGs. (#189)\n- `stdweb` feature for `OsRng` support on WASM via stdweb. (#272, #336)\n\n### `Rng` trait\n- Split `Rng` in `RngCore` and `Rng` extension trait.\n  `next_u32`, `next_u64` and `fill_bytes` are now part of `RngCore`. (#265)\n- Add `Rng::sample`. (#256)\n- Deprecate `Rng::gen_weighted_bool`. (#308)\n- Add `Rng::gen_bool`. (#308)\n- Remove `Rng::next_f32` and `Rng::next_f64`. (#273)\n- Add optimized `Rng::fill` and `Rng::try_fill` methods. (#247)\n- Deprecate `Rng::gen_iter`. (#286)\n- Deprecate `Rng::gen_ascii_chars`. (#279)\n\n### `rand_core` crate\n- `rand` now depends on new `rand_core` crate (#288)\n- `RngCore` and `SeedableRng` are now part of `rand_core`. (#288)\n- Add modules to help implementing RNGs `impl` and `le`. (#209, #228)\n- Add `Error` and `ErrorKind`. (#225)\n- Add `CryptoRng` marker trait. (#273)\n- Add `BlockRngCore` trait. (#281)\n- Add `BlockRng` and `BlockRng64` wrappers to help implementations. (#281, #325)\n- Revise the `SeedableRng` trait. (#233)\n- Remove default implementations for `RngCore::next_u64` and `RngCore::fill_bytes`. (#288)\n- Add `RngCore::try_fill_bytes`. (#225)\n\n### Other traits and types\n- Add `FromEntropy` trait. (#233, #375)\n- Add `SmallRng` wrapper. (#296)\n- Rewrite `ReseedingRng` to only work with `BlockRngCore` (substantial performance improvement). (#281)\n- Deprecate `weak_rng`. Use `SmallRng` instead. (#296)\n- Deprecate `AsciiGenerator`. (#279)\n\n### Random number generators\n- Switch `StdRng` and `thread_rng` to HC-128. (#277)\n- `StdRng` must now be created with `from_entropy` instead of `new`\n- Change `thread_rng` reseeding threshold to 32 MiB. (#277)\n- PRNGs no longer implement `Copy`. (#209)\n- `Debug` implementations no longer show internals. (#209)\n- Implement `Clone` for `ReseedingRng`, `JitterRng`, OsRng`. (#383, #384)\n- Implement serialization for `XorShiftRng`, `IsaacRng` and `Isaac64Rng` under the `serde1` feature. (#189)\n- Implement `BlockRngCore` for `ChaChaCore` and `Hc128Core`. (#281)\n- All PRNGs are now portable across big- and little-endian architectures. (#209)\n- `Isaac64Rng::next_u32` no longer throws away half the results. (#209)\n- Add `IsaacRng::new_from_u64` and `Isaac64Rng::new_from_u64`. (#209)\n- Add the HC-128 CSPRNG `Hc128Rng`. (#210)\n- Change ChaCha20 to have 64-bit counter and 64-bit stream. (#349)\n- Changes to `JitterRng` to get its size down from 2112 to 24 bytes. (#251)\n- Various performance improvements to all PRNGs.\n\n### Platform support and `OsRng`\n- Add support for CloudABI. (#224)\n- Remove support for NaCl. (#225)\n- WASM support for `OsRng` via stdweb, behind the `stdweb` feature. (#272, #336)\n- Use `getrandom` on more platforms for Linux, and on Android. (#338)\n- Use the `SecRandomCopyBytes` interface on macOS. (#322)\n- On systems that do not have a syscall interface, only keep a single file descriptor open for `OsRng`. (#239)\n- On Unix, first try a single read from `/dev/random`, then `/dev/urandom`. (#338)\n- Better error handling and reporting in `OsRng` (using new error type). (#225)\n- `OsRng` now uses non-blocking when available. (#225)\n- Add `EntropyRng`, which provides `OsRng`, but has `JitterRng` as a fallback. (#235)\n\n### Distributions\n- New `Distribution` trait. (#256)\n- Add `Distribution::sample_iter` and `Rng::::sample_iter`. (#361)\n- Deprecate `Rand`, `Sample` and `IndependentSample` traits. (#256)\n- Add a `Standard` distribution (replaces most `Rand` implementations). (#256)\n- Add `Binomial` and `Poisson` distributions. (#96)\n- Add `Bernoulli` dsitribution. (#411)\n- Add `Alphanumeric` distribution. (#279)\n- Remove `Closed01` distribution, add `OpenClosed01`. (#274, #420)\n- Rework `Range` type, making it possible to implement it for user types. (#274)\n- Rename `Range` to `Uniform`. (#395)\n- Add `Uniform::new_inclusive` for inclusive ranges. (#274)\n- Use widening multiply method for much faster integer range reduction. (#274)\n- `Standard` distribution for `char` uses `Uniform` internally. (#274)\n- `Standard` distribution for `bool` uses sign test. (#274)\n- Implement `Standard` distribution for `Wrapping<T>`. (#436)\n- Implement `Uniform` distribution for `Duration`. (#427)\n\n\n## [0.4.3] - 2018-08-16\n### Fixed\n- Use correct syscall number for PowerPC (#589)\n\n\n## [0.4.2] - 2018-01-06\n### Changed\n- Use `winapi` on Windows\n- Update for Fuchsia OS\n- Remove dev-dependency on `log`\n\n\n## [0.4.1] - 2017-12-17\n### Added\n- `no_std` support\n\n\n## [0.4.0-pre.0] - 2017-12-11\n### Added\n- `JitterRng` added as a high-quality alternative entropy source using the\n  system timer\n- new `seq` module with `sample_iter`, `sample_slice`, etc.\n- WASM support via dummy implementations (fail at run-time)\n- Additional benchmarks, covering generators and new seq code\n\n### Changed\n- `thread_rng` uses `JitterRng` if seeding from system time fails\n  (slower but more secure than previous method)\n\n### Deprecated\n  - `sample` function deprecated (replaced by `sample_iter`)\n\n\n## [0.3.20] - 2018-01-06\n### Changed\n- Remove dev-dependency on `log`\n- Update `fuchsia-zircon` dependency to 0.3.2\n\n\n## [0.3.19] - 2017-12-27\n### Changed\n- Require `log <= 0.3.8` for dev builds\n- Update `fuchsia-zircon` dependency to 0.3\n- Fix broken links in docs (to unblock compiler docs testing CI)\n\n\n## [0.3.18] - 2017-11-06\n### Changed\n- `thread_rng` is seeded from the system time if `OsRng` fails\n- `weak_rng` now uses `thread_rng` internally\n\n\n## [0.3.17] - 2017-10-07\n### Changed\n - Fuchsia: Magenta was renamed Zircon\n\n## [0.3.16] - 2017-07-27\n### Added\n- Implement Debug for mote non-public types\n- implement `Rand` for (i|u)i128\n- Support for Fuchsia\n\n### Changed\n- Add inline attribute to SampleRange::construct_range.\n  This improves the benchmark for sample in 11% and for shuffle in 16%.\n- Use `RtlGenRandom` instead of `CryptGenRandom`\n\n\n## [0.3.15] - 2016-11-26\n### Added\n- Add `Rng` trait method `choose_mut`\n- Redox support\n\n### Changed\n- Use `arc4rand` for `OsRng` on FreeBSD.\n- Use `arc4random(3)` for `OsRng` on OpenBSD.\n\n### Fixed\n- Fix filling buffers 4 GiB or larger with `OsRng::fill_bytes` on Windows\n\n\n## [0.3.14] - 2016-02-13\n### Fixed\n- Inline definitions from winapi/advapi32, which decreases build times\n\n\n## [0.3.13] - 2016-01-09\n### Fixed\n- Compatible with Rust 1.7.0-nightly (needed some extra type annotations)\n\n\n## [0.3.12] - 2015-11-09\n### Changed\n- Replaced the methods in `next_f32` and `next_f64` with the technique described\n  Saito & Matsumoto at MCQMC'08. The new method should exhibit a slightly more\n  uniform distribution.\n- Depend on libc 0.2\n\n### Fixed\n- Fix iterator protocol issue in `rand::sample`\n\n\n## [0.3.11] - 2015-08-31\n### Added\n- Implement `Rand` for arrays with n <= 32\n\n\n## [0.3.10] - 2015-08-17\n### Added\n- Support for NaCl platforms\n\n### Changed\n- Allow `Rng` to be `?Sized`, impl for `&mut R` and `Box<R>` where `R: ?Sized + Rng`\n\n\n## [0.3.9] - 2015-06-18\n### Changed\n- Use `winapi` for Windows API things\n\n### Fixed\n- Fixed test on stable/nightly\n- Fix `getrandom` syscall number for aarch64-unknown-linux-gnu\n\n\n## [0.3.8] - 2015-04-23\n### Changed\n- `log` is a dev dependency\n\n### Fixed\n- Fix race condition of atomics in `is_getrandom_available`\n\n\n## [0.3.7] - 2015-04-03\n### Fixed\n- Derive Copy/Clone changes\n\n\n## [0.3.6] - 2015-04-02\n### Changed\n- Move to stable Rust!\n\n\n## [0.3.5] - 2015-04-01\n### Fixed\n- Compatible with Rust master\n\n\n## [0.3.4] - 2015-03-31\n### Added\n- Implement Clone for `Weighted`\n\n### Fixed\n- Compatible with Rust master\n\n\n## [0.3.3] - 2015-03-26\n### Fixed\n- Fix compile on Windows\n\n\n## [0.3.2] - 2015-03-26\n\n\n## [0.3.1] - 2015-03-26\n### Fixed\n- Fix compile on Windows\n\n\n## [0.3.0] - 2015-03-25\n### Changed\n- Update to use log version 0.3.x\n\n\n## [0.2.1] - 2015-03-22\n### Fixed\n- Compatible with Rust master\n- Fixed iOS compilation\n\n\n## [0.2.0] - 2015-03-06\n### Fixed\n- Compatible with Rust master (move from `old_io` to `std::io`)\n\n\n## [0.1.4] - 2015-03-04\n### Fixed\n- Compatible with Rust master (use wrapping ops)\n\n\n## [0.1.3] - 2015-02-20\n### Fixed\n- Compatible with Rust master\n\n### Removed\n- Removed Copy implementations from RNGs\n\n\n## [0.1.2] - 2015-02-03\n### Added\n- Imported functionality from `std::rand`, including:\n  - `StdRng`, `SeedableRng`, `TreadRng`, `weak_rng()`\n  - `ReaderRng`: A wrapper around any Reader to treat it as an RNG.\n- Imported documentation from `std::rand`\n- Imported tests from `std::rand`\n\n\n## [0.1.1] - 2015-02-03\n### Added\n- Migrate to a cargo-compatible directory structure.\n\n### Fixed\n- Do not use entropy during `gen_weighted_bool(1)`\n\n\n## [Rust 0.12.0] - 2014-10-09\n### Added\n- Impl Rand for tuples of arity 11 and 12\n- Include ChaCha pseudorandom generator\n- Add `next_f64` and `next_f32` to Rng\n- Implement Clone for PRNGs\n\n### Changed\n- Rename `TaskRng` to `ThreadRng` and `task_rng` to `thread_rng` (since a\n  runtime is removed from Rust).\n\n### Fixed\n- Improved performance of ISAAC and ISAAC64 by 30% and 12 % respectively, by\n  informing the optimiser that indexing is never out-of-bounds.\n\n### Removed\n- Removed the Deprecated `choose_option`\n\n\n## [Rust 0.11.0] - 2014-07-02\n### Added\n- document when to use `OSRng` in cryptographic context, and explain why we use `/dev/urandom` instead of `/dev/random`\n- `Rng::gen_iter()` which will return an infinite stream of random values\n- `Rng::gen_ascii_chars()` which will return an infinite stream of random ascii characters\n\n### Changed\n- Now only depends on libcore!\n- Remove `Rng.choose()`, rename `Rng.choose_option()` to `.choose()`\n- Rename OSRng to OsRng\n- The WeightedChoice structure is no longer built with a `Vec<Weighted<T>>`,\n  but rather a `&mut [Weighted<T>]`. This means that the WeightedChoice\n  structure now has a lifetime associated with it.\n- The `sample` method on `Rng` has been moved to a top-level function in the\n  `rand` module due to its dependence on `Vec`.\n\n### Removed\n- `Rng::gen_vec()` was removed. Previous behavior can be regained with\n  `rng.gen_iter().take(n).collect()`\n- `Rng::gen_ascii_str()` was removed. Previous behavior can be regained with\n  `rng.gen_ascii_chars().take(n).collect()`\n- {IsaacRng, Isaac64Rng, XorShiftRng}::new() have all been removed. These all\n  relied on being able to use an OSRng for seeding, but this is no longer\n  available in librand (where these types are defined). To retain the same\n  functionality, these types now implement the `Rand` trait so they can be\n  generated with a random seed from another random number generator. This allows\n  the stdlib to use an OSRng to create seeded instances of these RNGs.\n- Rand implementations for `Box<T>` and `@T` were removed. These seemed to be\n  pretty rare in the codebase, and it allows for librand to not depend on\n  liballoc.  Additionally, other pointer types like Rc<T> and Arc<T> were not\n  supported.\n- Remove a slew of old deprecated functions\n\n\n## [Rust 0.10] - 2014-04-03\n### Changed\n- replace `Rng.shuffle's` functionality with `.shuffle_mut`\n- bubble up IO errors when creating an OSRng\n\n### Fixed\n- Use `fill()` instead of `read()`\n- Rewrite OsRng in Rust for windows\n\n## [0.10-pre] - 2014-03-02\n### Added\n- Separate `rand` out of the standard library\n"
        },
        {
          "name": "COPYRIGHT",
          "type": "blob",
          "size": 0.5556640625,
          "content": "Copyrights in the Rand project are retained by their contributors. No\ncopyright assignment is required to contribute to the Rand project.\n\nFor full authorship information, see the version control history.\n\nExcept as otherwise noted (below and/or in individual files), Rand is\nlicensed under the Apache License, Version 2.0 <LICENSE-APACHE> or\n<http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n<LICENSE-MIT> or <http://opensource.org/licenses/MIT>, at your option.\n\nThe Rand project includes code from the Rust project\npublished under these same licenses.\n"
        },
        {
          "name": "Cargo.lock.msrv",
          "type": "blob",
          "size": 18.154296875,
          "content": "# This file is automatically @generated by Cargo.\n# It is not intended for manual editing.\nversion = 3\n\n[[package]]\nname = \"android-tzdata\"\nversion = \"0.1.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e999941b234f3131b00bc13c22d06e8c5ff726d1b6318ac7eb276997bbb4fef0\"\n\n[[package]]\nname = \"android_system_properties\"\nversion = \"0.1.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"819e7219dbd41043ac279b19830f2efc897156490d7fd6ea916720117ee66311\"\ndependencies = [\n \"libc\",\n]\n\n[[package]]\nname = \"autocfg\"\nversion = \"1.1.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d468802bab17cbc0cc575e9b053f41e72aa36bfa6b7f55e3529ffa43161b97fa\"\n\n[[package]]\nname = \"average\"\nversion = \"0.15.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3a237a6822e1c3c98e700b6db5b293eb341b7524dcb8d227941245702b7431dc\"\ndependencies = [\n \"easy-cast\",\n \"float-ord\",\n \"num-traits\",\n]\n\n[[package]]\nname = \"base64\"\nversion = \"0.21.7\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"9d297deb1925b89f2ccc13d7635fa0714f12c87adce1c75356b39ca9b7178567\"\n\n[[package]]\nname = \"bincode\"\nversion = \"1.3.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b1f45e9417d87227c7a56d22e471c6206462cba514c7590c09aff4cf6d1ddcad\"\ndependencies = [\n \"serde\",\n]\n\n[[package]]\nname = \"bumpalo\"\nversion = \"3.15.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"7ff69b9dd49fd426c69a0db9fc04dd934cdb6645ff000864d98f7e2af8830eaa\"\n\n[[package]]\nname = \"cc\"\nversion = \"1.0.90\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8cd6604a82acf3039f1144f54b8eb34e91ffba622051189e71b781822d5ee1f5\"\n\n[[package]]\nname = \"cfg-if\"\nversion = \"1.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"baf1de4339761588bc0619e3cbc0120ee582ebb74b53b4efbf79117bd2da40fd\"\n\n[[package]]\nname = \"chrono\"\nversion = \"0.4.35\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8eaf5903dcbc0a39312feb77df2ff4c76387d591b9fc7b04a238dcf8bb62639a\"\ndependencies = [\n \"android-tzdata\",\n \"iana-time-zone\",\n \"num-traits\",\n \"serde\",\n \"windows-targets\",\n]\n\n[[package]]\nname = \"core-foundation-sys\"\nversion = \"0.8.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"06ea2b9bc92be3c2baa9334a323ebca2d6f074ff852cd1d7b11064035cd3868f\"\n\n[[package]]\nname = \"crossbeam-channel\"\nversion = \"0.5.12\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ab3db02a9c5b5121e1e42fbdb1aeb65f5e02624cc58c43f2884c6ccac0b82f95\"\ndependencies = [\n \"crossbeam-utils\",\n]\n\n[[package]]\nname = \"crossbeam-deque\"\nversion = \"0.8.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"613f8cc01fe9cf1a3eb3d7f488fd2fa8388403e97039e2f73692932e291a770d\"\ndependencies = [\n \"crossbeam-epoch\",\n \"crossbeam-utils\",\n]\n\n[[package]]\nname = \"crossbeam-epoch\"\nversion = \"0.9.18\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"5b82ac4a3c2ca9c3460964f020e1402edd5753411d7737aa39c3714ad1b5420e\"\ndependencies = [\n \"crossbeam-utils\",\n]\n\n[[package]]\nname = \"crossbeam-utils\"\nversion = \"0.8.19\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"248e3bacc7dc6baa3b21e405ee045c3047101a49145e7e9eca583ab4c2ca5345\"\n\n[[package]]\nname = \"darling\"\nversion = \"0.20.8\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"54e36fcd13ed84ffdfda6f5be89b31287cbb80c439841fe69e04841435464391\"\ndependencies = [\n \"darling_core\",\n \"darling_macro\",\n]\n\n[[package]]\nname = \"darling_core\"\nversion = \"0.20.8\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"9c2cf1c23a687a1feeb728783b993c4e1ad83d99f351801977dd809b48d0a70f\"\ndependencies = [\n \"fnv\",\n \"ident_case\",\n \"proc-macro2\",\n \"quote\",\n \"strsim\",\n \"syn\",\n]\n\n[[package]]\nname = \"darling_macro\"\nversion = \"0.20.8\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a668eda54683121533a393014d8692171709ff57a7d61f187b6e782719f8933f\"\ndependencies = [\n \"darling_core\",\n \"quote\",\n \"syn\",\n]\n\n[[package]]\nname = \"deranged\"\nversion = \"0.3.11\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b42b6fa04a440b495c8b04d0e71b707c585f83cb9cb28cf8cd0d976c315e31b4\"\ndependencies = [\n \"powerfmt\",\n \"serde\",\n]\n\n[[package]]\nname = \"easy-cast\"\nversion = \"0.5.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"10936778145f3bea71fd9bf61332cce28c28e96a380714f7ab34838b80733fd6\"\ndependencies = [\n \"libm\",\n]\n\n[[package]]\nname = \"either\"\nversion = \"1.10.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"11157ac094ffbdde99aa67b23417ebdd801842852b500e395a45a9c0aac03e4a\"\n\n[[package]]\nname = \"fast_polynomial\"\nversion = \"0.3.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"62eea6ee590b08a5f8b1139f4d6caee195b646d0c07e4b1808fbd5c4dea4829a\"\ndependencies = [\n \"num-traits\",\n]\n\n[[package]]\nname = \"float-ord\"\nversion = \"0.3.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8ce81f49ae8a0482e4c55ea62ebbd7e5a686af544c00b9d090bba3ff9be97b3d\"\n\n[[package]]\nname = \"fnv\"\nversion = \"1.0.7\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3f9eec918d3f24069decb9af1554cad7c880e2da24a9afd88aca000531ab82c1\"\n\n[[package]]\nname = \"getrandom\"\nversion = \"0.2.12\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"190092ea657667030ac6a35e305e62fc4dd69fd98ac98631e5d3a2b1575a12b5\"\ndependencies = [\n \"cfg-if\",\n \"libc\",\n \"wasi\",\n]\n\n[[package]]\nname = \"hashbrown\"\nversion = \"0.12.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8a9ee70c43aaf417c914396645a0fa852624801b24ebb7ae78fe8272889ac888\"\n\n[[package]]\nname = \"hermit-abi\"\nversion = \"0.3.9\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d231dfb89cfffdbc30e7fc41579ed6066ad03abda9e567ccafae602b97ec5024\"\n\n[[package]]\nname = \"hex\"\nversion = \"0.4.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"7f24254aa9a54b5c858eaee2f5bccdb46aaf0e486a595ed5fd8f86ba55232a70\"\n\n[[package]]\nname = \"iana-time-zone\"\nversion = \"0.1.60\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e7ffbb5a1b541ea2561f8c41c087286cc091e21e556a4f09a8f6cbf17b69b141\"\ndependencies = [\n \"android_system_properties\",\n \"core-foundation-sys\",\n \"iana-time-zone-haiku\",\n \"js-sys\",\n \"wasm-bindgen\",\n \"windows-core\",\n]\n\n[[package]]\nname = \"iana-time-zone-haiku\"\nversion = \"0.1.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f31827a206f56af32e590ba56d5d2d085f558508192593743f16b2306495269f\"\ndependencies = [\n \"cc\",\n]\n\n[[package]]\nname = \"ident_case\"\nversion = \"1.0.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b9e0384b61958566e926dc50660321d12159025e767c18e043daf26b70104c39\"\n\n[[package]]\nname = \"indexmap\"\nversion = \"1.9.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"bd070e393353796e801d209ad339e89596eb4c8d430d18ede6a1cced8fafbd99\"\ndependencies = [\n \"autocfg\",\n \"hashbrown\",\n \"serde\",\n]\n\n[[package]]\nname = \"itoa\"\nversion = \"1.0.10\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b1a46d1a171d865aa5f83f92695765caa047a9b4cbae2cbf37dbd613a793fd4c\"\n\n[[package]]\nname = \"js-sys\"\nversion = \"0.3.69\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"29c15563dc2726973df627357ce0c9ddddbea194836909d655df6a75d2cf296d\"\ndependencies = [\n \"wasm-bindgen\",\n]\n\n[[package]]\nname = \"lambert_w\"\nversion = \"0.5.9\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"dd8852c2190439a46c77861aca230080cc9db4064be7f9de8ee81816d6c72c25\"\ndependencies = [\n \"fast_polynomial\",\n \"libm\",\n]\n\n[[package]]\nname = \"libc\"\nversion = \"0.2.153\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"9c198f91728a82281a64e1f4f9eeb25d82cb32a5de251c6bd1b5154d63a8e7bd\"\n\n[[package]]\nname = \"libm\"\nversion = \"0.2.8\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"4ec2a862134d2a7d32d7983ddcdd1c4923530833c9f2ea1a44fc5fa473989058\"\n\n[[package]]\nname = \"log\"\nversion = \"0.4.21\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"90ed8c1e510134f979dbc4f070f87d4313098b704861a105fe34231c70a3901c\"\n\n[[package]]\nname = \"num-conv\"\nversion = \"0.1.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"51d515d32fb182ee37cda2ccdcb92950d6a3c2893aa280e540671c2cd0f3b1d9\"\n\n[[package]]\nname = \"num-traits\"\nversion = \"0.2.18\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"da0df0e5185db44f69b44f26786fe401b6c293d1907744beaa7fa62b2e5a517a\"\ndependencies = [\n \"autocfg\",\n \"libm\",\n]\n\n[[package]]\nname = \"num_cpus\"\nversion = \"1.16.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"4161fcb6d602d4d2081af7c3a45852d875a03dd337a6bfdd6e06407b61342a43\"\ndependencies = [\n \"hermit-abi\",\n \"libc\",\n]\n\n[[package]]\nname = \"once_cell\"\nversion = \"1.19.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3fdb12b2476b595f9358c5161aa467c2438859caa136dec86c26fdd2efe17b92\"\n\n[[package]]\nname = \"powerfmt\"\nversion = \"0.2.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"439ee305def115ba05938db6eb1644ff94165c5ab5e9420d1c1bcedbba909391\"\n\n[[package]]\nname = \"ppv-lite86\"\nversion = \"0.2.17\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"5b40af805b3121feab8a3c29f04d8ad262fa8e0561883e7653e024ae4479e6de\"\n\n[[package]]\nname = \"proc-macro2\"\nversion = \"1.0.79\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e835ff2298f5721608eb1a980ecaee1aef2c132bf95ecc026a11b7bf3c01c02e\"\ndependencies = [\n \"unicode-ident\",\n]\n\n[[package]]\nname = \"quote\"\nversion = \"1.0.35\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"291ec9ab5efd934aaf503a6466c5d5251535d108ee747472c3977cc5acc868ef\"\ndependencies = [\n \"proc-macro2\",\n]\n\n[[package]]\nname = \"rand\"\nversion = \"0.9.0-beta.0\"\ndependencies = [\n \"bincode\",\n \"log\",\n \"rand_chacha\",\n \"rand_core\",\n \"rand_pcg\",\n \"rayon\",\n \"serde\",\n \"zerocopy\",\n]\n\n[[package]]\nname = \"rand_chacha\"\nversion = \"0.9.0-beta.0\"\ndependencies = [\n \"ppv-lite86\",\n \"rand_core\",\n \"serde\",\n \"serde_json\",\n]\n\n[[package]]\nname = \"rand_core\"\nversion = \"0.9.0-beta.0\"\ndependencies = [\n \"getrandom\",\n \"serde\",\n \"zerocopy\",\n]\n\n[[package]]\nname = \"rand_distr\"\nversion = \"0.5.0-beta.0\"\ndependencies = [\n \"average\",\n \"num-traits\",\n \"rand\",\n \"rand_pcg\",\n \"serde\",\n \"serde_with\",\n \"special\",\n]\n\n[[package]]\nname = \"rand_pcg\"\nversion = \"0.9.0-beta.0\"\ndependencies = [\n \"bincode\",\n \"rand_core\",\n \"serde\",\n]\n\n[[package]]\nname = \"rayon\"\nversion = \"1.7.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1d2df5196e37bcc87abebc0053e20787d73847bb33134a69841207dd0a47f03b\"\ndependencies = [\n \"either\",\n \"rayon-core\",\n]\n\n[[package]]\nname = \"rayon-core\"\nversion = \"1.11.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"4b8f95bd6966f5c87776639160a66bd8ab9895d9d4ab01ddba9fc60661aebe8d\"\ndependencies = [\n \"crossbeam-channel\",\n \"crossbeam-deque\",\n \"crossbeam-utils\",\n \"num_cpus\",\n]\n\n[[package]]\nname = \"ryu\"\nversion = \"1.0.17\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e86697c916019a8588c99b5fac3cead74ec0b4b819707a682fd4d23fa0ce1ba1\"\n\n[[package]]\nname = \"serde\"\nversion = \"1.0.197\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3fb1c873e1b9b056a4dc4c0c198b24c3ffa059243875552b2bd0933b1aee4ce2\"\ndependencies = [\n \"serde_derive\",\n]\n\n[[package]]\nname = \"serde_derive\"\nversion = \"1.0.197\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"7eb0b34b42edc17f6b7cac84a52a1c5f0e1bb2227e997ca9011ea3dd34e8610b\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn\",\n]\n\n[[package]]\nname = \"serde_json\"\nversion = \"1.0.114\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"c5f09b1bd632ef549eaa9f60a1f8de742bdbc698e6cee2095fc84dde5f549ae0\"\ndependencies = [\n \"itoa\",\n \"ryu\",\n \"serde\",\n]\n\n[[package]]\nname = \"serde_with\"\nversion = \"3.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"9f02d8aa6e3c385bf084924f660ce2a3a6bd333ba55b35e8590b321f35d88513\"\ndependencies = [\n \"base64\",\n \"chrono\",\n \"hex\",\n \"indexmap\",\n \"serde\",\n \"serde_json\",\n \"serde_with_macros\",\n \"time\",\n]\n\n[[package]]\nname = \"serde_with_macros\"\nversion = \"3.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"edc7d5d3932fb12ce722ee5e64dd38c504efba37567f0c402f6ca728c3b8b070\"\ndependencies = [\n \"darling\",\n \"proc-macro2\",\n \"quote\",\n \"syn\",\n]\n\n[[package]]\nname = \"special\"\nversion = \"0.11.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"98d279079c3ddec4e7851337070c1055a18b8f606bba0b1aeb054bc059fc2e27\"\ndependencies = [\n \"lambert_w\",\n \"libm\",\n]\n\n[[package]]\nname = \"strsim\"\nversion = \"0.10.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"73473c0e59e6d5812c5dfe2a064a6444949f089e20eec9a2e5506596494e4623\"\n\n[[package]]\nname = \"syn\"\nversion = \"2.0.53\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"7383cd0e49fff4b6b90ca5670bfd3e9d6a733b3f90c686605aa7eec8c4996032\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"unicode-ident\",\n]\n\n[[package]]\nname = \"time\"\nversion = \"0.3.34\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"c8248b6521bb14bc45b4067159b9b6ad792e2d6d754d6c41fb50e29fefe38749\"\ndependencies = [\n \"deranged\",\n \"itoa\",\n \"num-conv\",\n \"powerfmt\",\n \"serde\",\n \"time-core\",\n \"time-macros\",\n]\n\n[[package]]\nname = \"time-core\"\nversion = \"0.1.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ef927ca75afb808a4d64dd374f00a2adf8d0fcff8e7b184af886c3c87ec4a3f3\"\n\n[[package]]\nname = \"time-macros\"\nversion = \"0.2.17\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"7ba3a3ef41e6672a2f0f001392bb5dcd3ff0a9992d618ca761a11c3121547774\"\ndependencies = [\n \"num-conv\",\n \"time-core\",\n]\n\n[[package]]\nname = \"unicode-ident\"\nversion = \"1.0.12\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3354b9ac3fae1ff6755cb6db53683adb661634f67557942dea4facebec0fee4b\"\n\n[[package]]\nname = \"wasi\"\nversion = \"0.11.0+wasi-snapshot-preview1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"9c8d87e72b64a3b4db28d11ce29237c246188f4f51057d65a7eab63b7987e423\"\n\n[[package]]\nname = \"wasm-bindgen\"\nversion = \"0.2.92\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"4be2531df63900aeb2bca0daaaddec08491ee64ceecbee5076636a3b026795a8\"\ndependencies = [\n \"cfg-if\",\n \"wasm-bindgen-macro\",\n]\n\n[[package]]\nname = \"wasm-bindgen-backend\"\nversion = \"0.2.92\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"614d787b966d3989fa7bb98a654e369c762374fd3213d212cfc0251257e747da\"\ndependencies = [\n \"bumpalo\",\n \"log\",\n \"once_cell\",\n \"proc-macro2\",\n \"quote\",\n \"syn\",\n \"wasm-bindgen-shared\",\n]\n\n[[package]]\nname = \"wasm-bindgen-macro\"\nversion = \"0.2.92\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a1f8823de937b71b9460c0c34e25f3da88250760bec0ebac694b49997550d726\"\ndependencies = [\n \"quote\",\n \"wasm-bindgen-macro-support\",\n]\n\n[[package]]\nname = \"wasm-bindgen-macro-support\"\nversion = \"0.2.92\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e94f17b526d0a461a191c78ea52bbce64071ed5c04c9ffe424dcb38f74171bb7\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn\",\n \"wasm-bindgen-backend\",\n \"wasm-bindgen-shared\",\n]\n\n[[package]]\nname = \"wasm-bindgen-shared\"\nversion = \"0.2.92\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"af190c94f2773fdb3729c55b007a722abb5384da03bc0986df4c289bf5567e96\"\n\n[[package]]\nname = \"windows-core\"\nversion = \"0.52.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"33ab640c8d7e35bf8ba19b884ba838ceb4fba93a4e8c65a9059d08afcfc683d9\"\ndependencies = [\n \"windows-targets\",\n]\n\n[[package]]\nname = \"windows-targets\"\nversion = \"0.52.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"7dd37b7e5ab9018759f893a1952c9420d060016fc19a472b4bb20d1bdd694d1b\"\ndependencies = [\n \"windows_aarch64_gnullvm\",\n \"windows_aarch64_msvc\",\n \"windows_i686_gnu\",\n \"windows_i686_msvc\",\n \"windows_x86_64_gnu\",\n \"windows_x86_64_gnullvm\",\n \"windows_x86_64_msvc\",\n]\n\n[[package]]\nname = \"windows_aarch64_gnullvm\"\nversion = \"0.52.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"bcf46cf4c365c6f2d1cc93ce535f2c8b244591df96ceee75d8e83deb70a9cac9\"\n\n[[package]]\nname = \"windows_aarch64_msvc\"\nversion = \"0.52.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"da9f259dd3bcf6990b55bffd094c4f7235817ba4ceebde8e6d11cd0c5633b675\"\n\n[[package]]\nname = \"windows_i686_gnu\"\nversion = \"0.52.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b474d8268f99e0995f25b9f095bc7434632601028cf86590aea5c8a5cb7801d3\"\n\n[[package]]\nname = \"windows_i686_msvc\"\nversion = \"0.52.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1515e9a29e5bed743cb4415a9ecf5dfca648ce85ee42e15873c3cd8610ff8e02\"\n\n[[package]]\nname = \"windows_x86_64_gnu\"\nversion = \"0.52.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"5eee091590e89cc02ad514ffe3ead9eb6b660aedca2183455434b93546371a03\"\n\n[[package]]\nname = \"windows_x86_64_gnullvm\"\nversion = \"0.52.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"77ca79f2451b49fa9e2af39f0747fe999fcda4f5e241b2898624dca97a1f2177\"\n\n[[package]]\nname = \"windows_x86_64_msvc\"\nversion = \"0.52.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"32b752e52a2da0ddfbdbcc6fceadfeede4c939ed16d13e648833a61dfb611ed8\"\n\n[[package]]\nname = \"zerocopy\"\nversion = \"0.8.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a65238aacd5fb83fb03fcaf94823e71643e937000ec03c46e7da94234b10c870\"\ndependencies = [\n \"zerocopy-derive\",\n]\n\n[[package]]\nname = \"zerocopy-derive\"\nversion = \"0.8.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3ca22c4ad176b37bd81a565f66635bde3d654fe6832730c3e52e1018ae1655ee\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn\",\n]\n"
        },
        {
          "name": "Cargo.toml",
          "type": "blob",
          "size": 2.6591796875,
          "content": "[package]\nname = \"rand\"\nversion = \"0.9.0-beta.3\"\nauthors = [\"The Rand Project Developers\", \"The Rust Project Developers\"]\nlicense = \"MIT OR Apache-2.0\"\nreadme = \"README.md\"\nrepository = \"https://github.com/rust-random/rand\"\ndocumentation = \"https://docs.rs/rand\"\nhomepage = \"https://rust-random.github.io/book\"\ndescription = \"\"\"\nRandom number generators and other randomness functionality.\n\"\"\"\nkeywords = [\"random\", \"rng\"]\ncategories = [\"algorithms\", \"no-std\"]\nautobenches = true\nedition = \"2021\"\nrust-version = \"1.63\"\ninclude = [\"src/\", \"LICENSE-*\", \"README.md\", \"CHANGELOG.md\", \"COPYRIGHT\"]\n\n[package.metadata.docs.rs]\n# To build locally:\n# RUSTDOCFLAGS=\"--cfg docsrs -Zunstable-options --generate-link-to-definition\" cargo +nightly doc --all --all-features --no-deps --open\nall-features = true\nrustdoc-args = [\"--generate-link-to-definition\"]\n\n[package.metadata.playground]\nfeatures = [\"small_rng\", \"serde\"]\n\n[features]\n# Meta-features:\ndefault = [\"std\", \"std_rng\", \"os_rng\", \"small_rng\", \"thread_rng\"]\nnightly = [] # some additions requiring nightly Rust\nserde = [\"dep:serde\", \"rand_core/serde\"]\n\n# Option (enabled by default): without \"std\" rand uses libcore; this option\n# enables functionality expected to be available on a standard platform.\nstd = [\"rand_core/std\", \"rand_chacha?/std\", \"alloc\"]\n\n# Option: \"alloc\" enables support for Vec and Box when not using \"std\"\nalloc = []\n\n# Option: enable OsRng\nos_rng = [\"rand_core/os_rng\"]\n\n# Option (requires nightly Rust): experimental SIMD support\nsimd_support = [\"zerocopy/simd-nightly\"]\n\n# Option (enabled by default): enable StdRng\nstd_rng = [\"dep:rand_chacha\"]\n\n# Option: enable SmallRng\nsmall_rng = []\n\n# Option: enable ThreadRng and rng()\nthread_rng = [\"std\", \"std_rng\", \"os_rng\"]\n\n# Option: use unbiased sampling for algorithms supporting this option: Uniform distribution.\n# By default, bias affecting no more than one in  2^48 samples is accepted.\n# Note: enabling this option is expected to affect reproducibility of results.\nunbiased = []\n\n# Option: enable logging\nlog = [\"dep:log\"]\n\n[workspace]\nmembers = [\n    \"rand_core\",\n    \"rand_distr\",\n    \"rand_chacha\",\n    \"rand_pcg\",\n]\nexclude = [\"benches\", \"distr_test\"]\n\n[dependencies]\nrand_core = { path = \"rand_core\", version = \"=0.9.0-beta.1\", default-features = false }\nlog = { version = \"0.4.4\", optional = true }\nserde = { version = \"1.0.103\", features = [\"derive\"], optional = true }\nrand_chacha = { path = \"rand_chacha\", version = \"=0.9.0-beta.1\", default-features = false, optional = true }\nzerocopy = { version = \"0.8.0\", default-features = false, features = [\"simd\"] }\n\n[dev-dependencies]\nrand_pcg = { path = \"rand_pcg\", version = \"=0.9.0-beta.1\" }\n# Only to test serde\nbincode = \"1.2.1\"\nrayon = \"1.7\"\n"
        },
        {
          "name": "LICENSE-APACHE",
          "type": "blob",
          "size": 9.49609375,
          "content": "                              Apache License\n                        Version 2.0, January 2004\n                     https://www.apache.org/licenses/\n\nTERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n1. Definitions.\n\n   \"License\" shall mean the terms and conditions for use, reproduction,\n   and distribution as defined by Sections 1 through 9 of this document.\n\n   \"Licensor\" shall mean the copyright owner or entity authorized by\n   the copyright owner that is granting the License.\n\n   \"Legal Entity\" shall mean the union of the acting entity and all\n   other entities that control, are controlled by, or are under common\n   control with that entity. For the purposes of this definition,\n   \"control\" means (i) the power, direct or indirect, to cause the\n   direction or management of such entity, whether by contract or\n   otherwise, or (ii) ownership of fifty percent (50%) or more of the\n   outstanding shares, or (iii) beneficial ownership of such entity.\n\n   \"You\" (or \"Your\") shall mean an individual or Legal Entity\n   exercising permissions granted by this License.\n\n   \"Source\" form shall mean the preferred form for making modifications,\n   including but not limited to software source code, documentation\n   source, and configuration files.\n\n   \"Object\" form shall mean any form resulting from mechanical\n   transformation or translation of a Source form, including but\n   not limited to compiled object code, generated documentation,\n   and conversions to other media types.\n\n   \"Work\" shall mean the work of authorship, whether in Source or\n   Object form, made available under the License, as indicated by a\n   copyright notice that is included in or attached to the work\n   (an example is provided in the Appendix below).\n\n   \"Derivative Works\" shall mean any work, whether in Source or Object\n   form, that is based on (or derived from) the Work and for which the\n   editorial revisions, annotations, elaborations, or other modifications\n   represent, as a whole, an original work of authorship. For the purposes\n   of this License, Derivative Works shall not include works that remain\n   separable from, or merely link (or bind by name) to the interfaces of,\n   the Work and Derivative Works thereof.\n\n   \"Contribution\" shall mean any work of authorship, including\n   the original version of the Work and any modifications or additions\n   to that Work or Derivative Works thereof, that is intentionally\n   submitted to Licensor for inclusion in the Work by the copyright owner\n   or by an individual or Legal Entity authorized to submit on behalf of\n   the copyright owner. For the purposes of this definition, \"submitted\"\n   means any form of electronic, verbal, or written communication sent\n   to the Licensor or its representatives, including but not limited to\n   communication on electronic mailing lists, source code control systems,\n   and issue tracking systems that are managed by, or on behalf of, the\n   Licensor for the purpose of discussing and improving the Work, but\n   excluding communication that is conspicuously marked or otherwise\n   designated in writing by the copyright owner as \"Not a Contribution.\"\n\n   \"Contributor\" shall mean Licensor and any individual or Legal Entity\n   on behalf of whom a Contribution has been received by Licensor and\n   subsequently incorporated within the Work.\n\n2. Grant of Copyright License. Subject to the terms and conditions of\n   this License, each Contributor hereby grants to You a perpetual,\n   worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n   copyright license to reproduce, prepare Derivative Works of,\n   publicly display, publicly perform, sublicense, and distribute the\n   Work and such Derivative Works in Source or Object form.\n\n3. Grant of Patent License. Subject to the terms and conditions of\n   this License, each Contributor hereby grants to You a perpetual,\n   worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n   (except as stated in this section) patent license to make, have made,\n   use, offer to sell, sell, import, and otherwise transfer the Work,\n   where such license applies only to those patent claims licensable\n   by such Contributor that are necessarily infringed by their\n   Contribution(s) alone or by combination of their Contribution(s)\n   with the Work to which such Contribution(s) was submitted. If You\n   institute patent litigation against any entity (including a\n   cross-claim or counterclaim in a lawsuit) alleging that the Work\n   or a Contribution incorporated within the Work constitutes direct\n   or contributory patent infringement, then any patent licenses\n   granted to You under this License for that Work shall terminate\n   as of the date such litigation is filed.\n\n4. Redistribution. You may reproduce and distribute copies of the\n   Work or Derivative Works thereof in any medium, with or without\n   modifications, and in Source or Object form, provided that You\n   meet the following conditions:\n\n   (a) You must give any other recipients of the Work or\n       Derivative Works a copy of this License; and\n\n   (b) You must cause any modified files to carry prominent notices\n       stating that You changed the files; and\n\n   (c) You must retain, in the Source form of any Derivative Works\n       that You distribute, all copyright, patent, trademark, and\n       attribution notices from the Source form of the Work,\n       excluding those notices that do not pertain to any part of\n       the Derivative Works; and\n\n   (d) If the Work includes a \"NOTICE\" text file as part of its\n       distribution, then any Derivative Works that You distribute must\n       include a readable copy of the attribution notices contained\n       within such NOTICE file, excluding those notices that do not\n       pertain to any part of the Derivative Works, in at least one\n       of the following places: within a NOTICE text file distributed\n       as part of the Derivative Works; within the Source form or\n       documentation, if provided along with the Derivative Works; or,\n       within a display generated by the Derivative Works, if and\n       wherever such third-party notices normally appear. The contents\n       of the NOTICE file are for informational purposes only and\n       do not modify the License. You may add Your own attribution\n       notices within Derivative Works that You distribute, alongside\n       or as an addendum to the NOTICE text from the Work, provided\n       that such additional attribution notices cannot be construed\n       as modifying the License.\n\n   You may add Your own copyright statement to Your modifications and\n   may provide additional or different license terms and conditions\n   for use, reproduction, or distribution of Your modifications, or\n   for any such Derivative Works as a whole, provided Your use,\n   reproduction, and distribution of the Work otherwise complies with\n   the conditions stated in this License.\n\n5. Submission of Contributions. Unless You explicitly state otherwise,\n   any Contribution intentionally submitted for inclusion in the Work\n   by You to the Licensor shall be under the terms and conditions of\n   this License, without any additional terms or conditions.\n   Notwithstanding the above, nothing herein shall supersede or modify\n   the terms of any separate license agreement you may have executed\n   with Licensor regarding such Contributions.\n\n6. Trademarks. This License does not grant permission to use the trade\n   names, trademarks, service marks, or product names of the Licensor,\n   except as required for reasonable and customary use in describing the\n   origin of the Work and reproducing the content of the NOTICE file.\n\n7. Disclaimer of Warranty. Unless required by applicable law or\n   agreed to in writing, Licensor provides the Work (and each\n   Contributor provides its Contributions) on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n   implied, including, without limitation, any warranties or conditions\n   of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n   PARTICULAR PURPOSE. You are solely responsible for determining the\n   appropriateness of using or redistributing the Work and assume any\n   risks associated with Your exercise of permissions under this License.\n\n8. Limitation of Liability. In no event and under no legal theory,\n   whether in tort (including negligence), contract, or otherwise,\n   unless required by applicable law (such as deliberate and grossly\n   negligent acts) or agreed to in writing, shall any Contributor be\n   liable to You for damages, including any direct, indirect, special,\n   incidental, or consequential damages of any character arising as a\n   result of this License or out of the use or inability to use the\n   Work (including but not limited to damages for loss of goodwill,\n   work stoppage, computer failure or malfunction, or any and all\n   other commercial damages or losses), even if such Contributor\n   has been advised of the possibility of such damages.\n\n9. Accepting Warranty or Additional Liability. While redistributing\n   the Work or Derivative Works thereof, You may choose to offer,\n   and charge a fee for, acceptance of support, warranty, indemnity,\n   or other liability obligations and/or rights consistent with this\n   License. However, in accepting such obligations, You may act only\n   on Your own behalf and on Your sole responsibility, not on behalf\n   of any other Contributor, and only if You agree to indemnify,\n   defend, and hold each Contributor harmless for any liability\n   incurred by, or claims asserted against, such Contributor by reason\n   of your accepting any such warranty or additional liability.\n\nEND OF TERMS AND CONDITIONS\n"
        },
        {
          "name": "LICENSE-MIT",
          "type": "blob",
          "size": 1.0908203125,
          "content": "Copyright 2018 Developers of the Rand project\nCopyright (c) 2014 The Rust Project Developers\n\nPermission is hereby granted, free of charge, to any\nperson obtaining a copy of this software and associated\ndocumentation files (the \"Software\"), to deal in the\nSoftware without restriction, including without\nlimitation the rights to use, copy, modify, merge,\npublish, distribute, sublicense, and/or sell copies of\nthe Software, and to permit persons to whom the Software\nis furnished to do so, subject to the following\nconditions:\n\nThe above copyright notice and this permission notice\nshall be included in all copies or substantial portions\nof the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF\nANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED\nTO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A\nPARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT\nSHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\nOF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR\nIN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\nDEALINGS IN THE SOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 6.26171875,
          "content": "# Rand\n\n[![Test Status](https://github.com/rust-random/rand/actions/workflows/test.yml/badge.svg?event=push)](https://github.com/rust-random/rand/actions)\n[![Crate](https://img.shields.io/crates/v/rand.svg)](https://crates.io/crates/rand)\n[![Book](https://img.shields.io/badge/book-master-yellow.svg)](https://rust-random.github.io/book/)\n[![API](https://img.shields.io/badge/api-master-yellow.svg)](https://rust-random.github.io/rand/rand)\n[![API](https://docs.rs/rand/badge.svg)](https://docs.rs/rand)\n\nRand is a set of crates supporting (pseudo-)random generators:\n\n-   Built over a standard RNG trait: [`rand_core::RngCore`](https://docs.rs/rand_core/latest/rand_core/trait.RngCore.html)\n-   With fast implementations of both [strong](https://rust-random.github.io/book/guide-rngs.html#cryptographically-secure-pseudo-random-number-generators-csprngs) and\n    [small](https://rust-random.github.io/book/guide-rngs.html#basic-pseudo-random-number-generators-prngs) generators: [`rand::rngs`](https://docs.rs/rand/latest/rand/rngs/index.html), and more RNGs: [`rand_chacha`](https://docs.rs/rand_chacha), [`rand_xoshiro`](https://docs.rs/rand_xoshiro/), [`rand_pcg`](https://docs.rs/rand_pcg/), [rngs repo](https://github.com/rust-random/rngs/)\n-   [`rand::rng`](https://docs.rs/rand/latest/rand/fn.rng.html) is an asymptotically-fast, automatically-seeded and reasonably strong generator available on all `std` targets\n-   Direct support for seeding generators from the [getrandom] crate\n\nWith broad support for random value generation and random processes:\n\n-   [`StandardUniform`](https://docs.rs/rand/latest/rand/distributions/struct.StandardUniform.html) random value sampling,\n    [`Uniform`](https://docs.rs/rand/latest/rand/distributions/struct.Uniform.html)-ranged value sampling\n    and [more](https://docs.rs/rand/latest/rand/distr/index.html)\n-   Samplers for a large number of non-uniform random number distributions via our own\n    [`rand_distr`](https://docs.rs/rand_distr) and via\n    the [`statrs`](https://docs.rs/statrs/0.13.0/statrs/)\n-   Random processes (mostly choose and shuffle) via [`rand::seq`](https://docs.rs/rand/latest/rand/seq/index.html) traits\n\nAll with:\n\n-   [Portably reproducible output](https://rust-random.github.io/book/portability.html)\n-   `#[no_std]` compatibility (partial)\n-   *Many* performance optimisations thanks to contributions from the wide\n    user-base\n\nRand **is not**:\n\n-   Small (LOC). Most low-level crates are small, but the higher-level `rand`\n    and `rand_distr` each contain a lot of functionality.\n-   Simple (implementation). We have a strong focus on correctness, speed and flexibility, but\n    not simplicity. If you prefer a small-and-simple library, there are\n    alternatives including [fastrand](https://crates.io/crates/fastrand)\n    and [oorandom](https://crates.io/crates/oorandom).\n-   A cryptography library. Rand provides functionality for generating\n    unpredictable random data (potentially applicable depending on requirements)\n    but does not provide high-level cryptography functionality.\n\nRand is a community project and cannot provide legally-binding guarantees of\nsecurity.\n\nDocumentation:\n\n-   [The Rust Rand Book](https://rust-random.github.io/book)\n-   [API reference (master branch)](https://rust-random.github.io/rand)\n-   [API reference (docs.rs)](https://docs.rs/rand)\n\n\n## Usage\n\nAdd this to your `Cargo.toml`:\n```toml\n[dependencies]\nrand = \"0.8.5\"\n```\n\nOr, to try the 0.9.0 beta release:\n```toml\n[dependencies]\nrand = \"=0.9.0-beta.3\"\n```\n\nTo get started using Rand, see [The Book](https://rust-random.github.io/book).\n\n## Versions\n\nRand is *mature* (suitable for general usage, with infrequent breaking releases\nwhich minimise breakage) but not yet at 1.0. Current versions are:\n\n-   Version 0.8 was released in December 2020 with many small changes.\n-   Version 0.9 is in development with many small changes.\n\nSee the [CHANGELOG](CHANGELOG.md) or [Upgrade Guide](https://rust-random.github.io/book/update.html) for more details.\n\n## Crate Features\n\nRand is built with these features enabled by default:\n\n-   `std` enables functionality dependent on the `std` lib\n-   `alloc` (implied by `std`) enables functionality requiring an allocator\n-   `os_rng` (implied by `std`) enables `rngs::OsRng`, using the [getrandom] crate\n-   `std_rng` enables inclusion of `StdRng`, `ThreadRng`\n\nOptionally, the following dependencies can be enabled:\n\n-   `log` enables logging via [log](https://crates.io/crates/log)\n\nAdditionally, these features configure Rand:\n\n-   `small_rng` enables inclusion of the `SmallRng` PRNG\n-   `nightly` includes some additions requiring nightly Rust\n-   `simd_support` (experimental) enables sampling of SIMD values\n    (uniformly random SIMD integers and floats), requiring nightly Rust\n\nNote that nightly features are not stable and therefore not all library and\ncompiler versions will be compatible. This is especially true of Rand's\nexperimental `simd_support` feature.\n\nRand supports limited functionality in `no_std` mode (enabled via\n`default-features = false`). In this case, `OsRng` and `from_os_rng` are\nunavailable (unless `os_rng` is enabled), large parts of `seq` are\nunavailable (unless `alloc` is enabled), and `ThreadRng` is unavailable.\n\n## Portability and platform support\n\nMany (but not all) algorithms are intended to have reproducible output. Read more in the book: [Portability](https://rust-random.github.io/book/portability.html).\n\nThe Rand library supports a variety of CPU architectures. Platform integration is outsourced to [getrandom].\n\n### WASM support\n\nSeeding entropy from OS on WASM target `wasm32-unknown-unknown` is not\n*automatically* supported by `rand` or `getrandom`. If you are fine with\nseeding the generator manually, you can disable the `os_rng` feature\nand use the methods on the `SeedableRng` trait. To enable seeding from OS,\neither use a different target such as `wasm32-wasi` or add a direct\ndependency on [getrandom] with the `js` feature (if the target supports\nJavaScript). See\n[getrandom#WebAssembly support](https://docs.rs/getrandom/latest/getrandom/#webassembly-support).\n\n# License\n\nRand is distributed under the terms of both the MIT license and the\nApache License (Version 2.0).\n\nSee [LICENSE-APACHE](LICENSE-APACHE) and [LICENSE-MIT](LICENSE-MIT), and\n[COPYRIGHT](COPYRIGHT) for details.\n\n[getrandom]: https://crates.io/crates/getrandom\n"
        },
        {
          "name": "SECURITY.md",
          "type": "blob",
          "size": 3.076171875,
          "content": "# Security Policy\n\n## Disclaimer\n\nRand is a community project and cannot provide legally-binding guarantees of\nsecurity.\n\n## Security premises\n\n### Marker traits\n\nRand provides the marker traits `CryptoRng`, `TryCryptoRng` and\n`CryptoBlockRng`. Generators implementing one of these traits and used in a way\nwhich meets the following additional constraints:\n\n-   Instances of seedable RNGs (those implementing `SeedableRng`) are\n    constructed with cryptographically secure seed values\n-   The state (memory) of the RNG and its seed value are not exposed\n\nare expected to provide the following:\n\n-   An attacker cannot predict the output with more accuracy than what would be\n    expected through pure chance since each possible output value of any method\n    under the above traits which generates output bytes (including\n    `RngCore::next_u32`, `RngCore::next_u64`, `RngCore::fill_bytes`,\n    `TryRngCore::try_next_u32`, `TryRngCore::try_next_u64`,\n    `TryRngCore::try_fill_bytes` and `BlockRngCore::generate`) should be equally\n    likely\n-   Knowledge of prior outputs from the generator does not aid an attacker in\n    predicting future outputs\n\n### Specific generators\n\n`OsRng` is a stateless \"generator\" implemented via [getrandom]. As such, it has\nno possible state to leak and cannot be improperly seeded.\n\n`ThreadRng` will periodically reseed itself, thus placing an upper bound on the\nnumber of bits of output from an instance before any advantage an attacker may\nhave gained through state-compromising side-channel attacks is lost.\n\n[getrandom]: https://crates.io/crates/getrandom\n\n### Distributions\n\nAdditionally, derivations from such an RNG (including the `Rng` trait,\nimplementations of the `Distribution` trait, and `seq` algorithms) should not\nintroduce significant bias other than that expected from the operation in\nquestion (e.g. bias from a weighted distribution).\n\n## Supported Versions\n\nWe will attempt to uphold these premises in the following crate versions,\nprovided that only the latest patch version is used, and with potential\nexceptions for theoretical issues without a known exploit:\n\n| Crate | Versions | Exceptions |\n| ----- | -------- | ---------- |\n| `rand` | 0.8 |  |\n| `rand` | 0.7 |  |\n| `rand` | 0.5, 0.6 | Jitter |\n| `rand` | 0.4 | Jitter, ISAAC |\n| `rand_core` | 0.2 - 0.6 | |\n| `rand_chacha` | 0.1 - 0.3 | |\n\nExplanation of exceptions:\n\n-   Jitter: `JitterRng` is used as an entropy source when the primary source\n    fails; this source may not be secure against side-channel attacks, see #699.\n-   ISAAC: the [ISAAC](https://burtleburtle.net/bob/rand/isaacafa.html) RNG used\n    to implement `ThreadRng` is difficult to analyse and thus cannot provide\n    strong assertions of security.\n\n## Known issues\n\nIn `rand` version 0.3 (0.3.18 and later), if `OsRng` fails, `ThreadRng` is\nseeded from the system time in an insecure manner.\n\n## Reporting a Vulnerability\n\nTo report a vulnerability, [open a new issue](https://github.com/rust-random/rand/issues/new).\nOnce the issue is resolved, the vulnerability should be [reported to RustSec](https://github.com/RustSec/advisory-db/blob/master/CONTRIBUTING.md).\n"
        },
        {
          "name": "benches",
          "type": "tree",
          "content": null
        },
        {
          "name": "clippy.toml",
          "type": "blob",
          "size": 0.1357421875,
          "content": "# Don't warn about these identifiers when using clippy::doc_markdown.\ndoc-valid-idents = [\"ChaCha\", \"ChaCha12\", \"SplitMix64\", \"ZiB\", \"..\"]\n"
        },
        {
          "name": "distr_test",
          "type": "tree",
          "content": null
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "rand_chacha",
          "type": "tree",
          "content": null
        },
        {
          "name": "rand_core",
          "type": "tree",
          "content": null
        },
        {
          "name": "rand_distr",
          "type": "tree",
          "content": null
        },
        {
          "name": "rand_pcg",
          "type": "tree",
          "content": null
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "utils",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}