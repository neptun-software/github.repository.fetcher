{
  "metadata": {
    "timestamp": 1736709187855,
    "page": 436,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjQ0MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "twistedfall/opencv-rust",
      "stars": 2065,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 0.0712890625,
          "content": "root = true\n\n[*.{cpp,hpp,rs,sh,toml}]\nindent_style = tab\nindent_size = 3\n"
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.05078125,
          "content": "*.hpp linguist-vendored\n*.rs linguist-language=Rust\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.017578125,
          "content": "Cargo.lock\ntarget\n"
        },
        {
          "name": "CHANGES.md",
          "type": "blob",
          "size": 35.646484375,
          "content": "* 0.94.1\n  * Add workaround for building on Windows with clang-19 and `clang-runtime` feature enabled (fixes https://github.com/twistedfall/opencv-rust/issues/628).\n\n* 0.94.0\n  * Add support for the upcoming OpenCV 5.0.0 (based on the current alpha) and completely drop support for OpenCV 3.2.\n  * Bump the minimum Rust version to 1.77.0.\n  * Drop deprecated type aliases like `VectorOf...`.\n  * Add support for `f16` half precision floating point numbers via the `f16` crate feature.\n  * Multiple internal improvements that led to some minor function name changes.\n  * Add missing `CV_depthC(chan)` functions (e.g. `CV_8UC`) to construct OpenCV types with more than 4 channels.\n\n* 0.93.7\n  * Fix building on windows with the latest vcpkg git version (fixes https://github.com/twistedfall/opencv-rust/issues/640\n    and https://github.com/twistedfall/opencv-rust/issues/641).\n\n* 0.93.6\n  * Adjust the CI, examples and docs to OpenCV 4.11.0.\n  * Add the `signal` module support.\n\n* 0.93.5\n  * Fix the `jobserver` minimum version (fixes https://github.com/twistedfall/opencv-rust/issues/639)\n\n* 0.93.4\n  * Various documentation, callback handling and other internal improvements.\n\n* 0.93.3\n  * Fix issue with using `Option<Ptr>`, now behaves as expected and doesn't segfault.\n  * Introduce `Mat::get_data_dump()` to get the dump of the Mat data, it's also included in the `Debug` output.\n  * Improve formatting of the generated bindings.\n\n* 0.93.2\n  * Fix binding generation using clang-19.\n\n* 0.93.1\n  * Fix 0.93.0 regression: https://github.com/twistedfall/opencv-rust/issues/620.\n  * Allow combining several versions of the crate as dependencies, fixes https://github.com/twistedfall/opencv-rust/issues/597.\n\n* 0.93.0\n  * Improve automatic slice detection, e.g. `CommandParser::new()` now calculates `argc` automatically.\n  * `find_circles_grid` now can take `None` the `blob_detector` argument.\n  * Rework the handling of static library linkage.\n  * Allow passing custom clang args via `OPENCV_CLANG_ARGS` environment variable.\n\n* 0.92.3\n  * Add an irreversible conversion from `BoxedRefMut` to `BoxedMut`.\n  * Fix handling of arrays of strings, fixes `CommandLineParser` (kudos to niemeyer).\n\n* 0.92.2\n  * Fix new warnings with Rust 1.80\n  * Don't export `ocvrs_create_string` and `ocvrs_create_byte_string` from the rlib to allow combining multiple `opencv` create versions as dependencies.\n\n* 0.92.1\n  * Implement `Send` and `Sync` where applicable for `Mat`, `Ptr` and `Tuple`.\n  * Introduce new `Mat` constructors that take byte slices: `from_bytes`/`_mut` and `new_rows_cols_with_bytes`/`_mut`\n  * Add missing `Mat_::at_row`/`_mut` methods.\n\n* 0.92.0\n  * Add `DoubleEndedIterator` impl for `Vector` and simplify trait bounds.\n  * Type aliases for `Vector` (`VectorOf...`), `Ptr` and `Tuple` are now deprecated.\n  * Add missing `Mat_` methods, speed up `Mat::at*()` and `Mat_::at*()` methods slightly. Allow calling `at()` method on a `Mat`\n    with more than 2 dimensions.\n  * Improved typedef generation that led to changing of some typedef names, e.g. `va_display` â†’ `VADisplay`. Typedefed types are\n    now also preserved in function signatures.\n  * Fix several cases where returned objects were not usable and led to a segfault, e.g. `SparseMap::hdr()`.\n  * Add a helper to accommodate calling OpenCV functions that can modify a `Mat` in place, use `modify_inplace()` method.\n\n* 0.91.3\n  * Add workaround for https://github.com/twistedfall/opencv-rust/issues/548.\n\n* 0.91.2\n  * Generate functions for converting DirectX objects to OpenCL.\n  * Allow creation of `Vector<BoxedRef<T>>` and using it as `ToInputArray` (fixes https://github.com/twistedfall/opencv-rust/issues/555).\n\n* 0.91.1\n  * Add `TryFrom<i32>` impls for enums to allow easy fallible conversions from `i32`.\n\n* 0.91.0\n  * Multiple improvements for `InputArray`/`OutputArray`/`InputOutputArray` handling:\n    * It's now possible to use the following types as `InputArray`: `&[u8]`/`[u8; N]`, `Vector<bool>` `Vector<GpuMat>` and the\n      following as `InputArray`, `OutputArray` or `InputOutputArray`: `Vector<Mat>` and `Vector<UMat>`.\n    * `InputArray`/`OutputArray`/`InputOutputArray` constructors now return `BoxedRef`/`BoxedRefMut` to express the borrowing\n      semantics.\n    * Some constructors have received `_mut` suffix where appropriate.\n  * Unsafe `Mat` constructors (`*_with_data`) have received `_unsafe` suffix and safe versions have been introduced that return\n    `BoxedRef`/`BoxedRefMut`. Consequently, `Mat::from_slice_rows_cols` was replaced by `Mat::new_rows_cols_with_data`, note the\n    different order and types of the arguments.\n  * `MatSize::new` is now unsafe and accepts a pointer.\n\n* 0.90.0\n  * Automatically generate default constructors for classes where possible.\n  * Backwards-incompatible changes:\n    * `LayerParams::default()` can no longer fail, so it returns `Self` without `Result`.\n    * `GpuMat::default()` is now `GpuMat::new_def()`.\n    * Automatically named functions (*_1) in `features2d` module were given proper names.\n    * Generate bindings to `float16_t` and `hfloat` types to fix the build with the current OpenCV master.\n\n* 0.89.0\n  * All functions accepting classes now take `impl ClassTrait` instead of `Class` directly. This allows passing other objects\n    that implement the same trait. This change should be backwards compatible.\n  * Some functions, notably `Mat::roi()`, now return a `BoxedRef<Mat>` wrapper instead of seemingly independent `Mat`. This fixes\n    old soundness hole because the returned `Mat` was actually a view into the source `Mat` and you could easily end up with 2\n    mutable references to the same memory. An additional `*_mut()` is generated for each of such function to return a\n    mutable `BoxedRefMut<Mat>`. To get 2 mutable references to the same `Mat` for the non-intersecting regions use the\n    new `Mat::roi_2_mut()` function.\n  * Slice detection improved, slice arguments in more functions are now generated automatically.\n  * Some slices in function arguments are now references to arrays of particular size. To migrate call `.try_into()` to convert\n    the slice to the array.\n  * The error message for the unspecified error (should never actually be visible) is changed to \"Unspecified error, neither from\n    OpenCV nor from std\".\n  * Function signature changes:\n    * A group of functions for `Mat`, `UMat`, `GpuMat` and `GpuMatND` have been given proper\n      names (`rowscols`, `roi`, `ranges`, `col_bounds`). Consequently, e.g. `roi` function can now be called on the `Mat`\n      instance (`mat.roi()`) instead of requiring a fully qualified call (`Mat::roi(&mat)`).\n    * `MatConstIterator::pos_to()` is now unsafe and takes a pointer instead of a reference.\n\n* 0.88.9\n  * Fix building on macOS with vcpkg (fixes https://github.com/twistedfall/opencv-rust/issues/549).\n\n* 0.88.8\n  * Fix the build hang with the latest version of `cc` (fixes https://github.com/twistedfall/opencv-rust/issues/480).\n  * Minimum supported Rust version is now 1.66.0.\n\n* 0.88.7\n  * Improve handling of input strings (fixes https://github.com/twistedfall/opencv-rust/issues/534).\n\n* 0.88.6\n  * Regenerate documentation with OpenCV 4.9.0.\n\n* 0.88.5\n  * Adjust to the upcoming changes in OpenCV (fixes https://github.com/twistedfall/opencv-rust/issues/518).\n\n* 0.88.4\n  * More fixes for clang 17 (kudos to PaulWagener).\n\n* 0.88.3\n  * Add `Mat::iter_mut()` and improve `Mat` iteration performance.\n\n* 0.88.2\n  * Fix build with clang 17 (fixes https://github.com/twistedfall/opencv-rust/issues/519).\n\n* 0.88.1\n  * Generate `Vector<Vector<Point2d>>` bindings for `ccalib` module.\n\n* 0.88.0\n  * Detect more cases where a Rust slice can be passed to an OpenCV function.\n  * Generate both const and mut property readers where possible. Previously only mut readers were generated.\n  * Rename some more automatically named functions.\n  * Add conversion from an enum into a `i32`.\n  * Bump minimum supported Rust version to 1.65.\n  * Generate additional `Vector` bindings for `ccalib` module.\n\n* 0.87.0\n  * This version is skipped due to the release process gone wrong.\n\n* 0.86.1\n  * Provide a clearer message for the case when `libclang` can't be loaded.\n\n* 0.86.0\n  * Add support for `operator =` via `set` method.\n  * Improve documentation generation.\n  * Fix several automatically functions.\n\n* 0.85.3\n  * Fix https://github.com/twistedfall/opencv-rust/issues/506, https://github.com/twistedfall/opencv-rust/issues/505 and\n    https://github.com/twistedfall/opencv-rust/issues/479\n\n* 0.85.2\n  * Fix binding generation using clang-6 (fixes https://github.com/twistedfall/opencv-rust/issues/496).\n  * Add more `From` implementations for `Scalar` to improve API usability.\n\n* 0.85.1\n  * Add workaround when building with rustc version before 1.66.\n\n* 0.85.0\n  * Generate companion functions `*_def()` that allow skipping the default arguments to improve API usability.\n  * Remove bindings to `SparseMatIterator--` and change `OutputArray::from_gpu_mat_vec()` to take mutable argument (instead of\n    `OutputArray::from_gpu_mat_vec_mut()` which is now removed). Those functions were often missing in the OpenCV shared\n    libraries causing linking errors.\n  * Update automatic case conversion algorithm to increase performance and improve correctness. Some function names are now\n    slightly different. Especially those containing `2d` and `3d`.\n  * Improve documentation generation.\n\n* 0.84.5\n  * Improve parallel build performance (more noticeable on lower thread count).\n  * Take `VCPKGRS_TRIPLET` environment var into account for crate rebuild.\n  * Add a way to select MSVC CRT library with `OPENCV_MSVC_CRT` environment variable.\n  * Make sure to always generate bindings for `Ptr<float>` (fixes https://github.com/twistedfall/opencv-rust/issues/487).\n\n* 0.84.4\n  * Workaround for a build hang due to `cc` dependency\n\n* 0.84.3\n  * Update docs\n\n* 0.84.2\n  * Fix build targeting Android even more (definitely fixes https://github.com/twistedfall/opencv-rust/issues/477).\n  * Fix double-free crash and linker errors when using CUDA (fixes https://github.com/twistedfall/opencv-rust/issues/478 and\n    https://github.com/twistedfall/opencv-rust/issues/470).\n  * Add `CommandLineParser::get()` function.\n  * Improve examples.\n\n* 0.84.1\n  * Fix build targeting Android (fixes https://github.com/twistedfall/opencv-rust/issues/477).\n\n* 0.84.0\n  * Detect more cases where a Rust `char` can be used.\n  * Remove deprecated `DataType::depth()`, `DataType::channels()` and `DataType::typ()` functions.\n  * Speed up binding generation by reducing number of passes (3 â†’ 2) and removing the usage of `ocvrs_ephemeral.hpp`.\n  * Generate more casts (to base and to decendants) for `Ptr`s and classes.\n\n* 0.83.0\n  * Add support for OpenCV 4.8.\n  * Tune naming for classes in `rapid` and CUDA modules.\n  * Add a `Debug` implementation for all classes and smart pointers.\n\n* 0.82.1\n  * Fix generation issue with specific module setup involving `dnn` module.\n\n* 0.82.0\n  * Change the handling of abstract C++ classes, they are no longer exposed as `dyn Class` but a struct is generated for\n    them making them easier to use from Rust. One notable change is calling static methods on those classes no longer\n    requires UCS. So `<dyn ORB>::default()` becomes just `ORB::default()`. You might also need to adjust your imports\n    because while traits are imported as part of the prelude, the structs need to be imported explicitly.\n  * Functions that take `Input/OutputArray` now take them by `&impl` instead of `&dyn` making those calls faster because\n    they don't use dynamic dispatch anymore.\n\n* 0.81.5\n  * Bring back the `clang-runtime` feature to improve cooperation with other crates.\n\n* 0.81.4\n  * Change the way the binding generator is run decreasing the complexity and improving the compatibility with vendored builds.\n\n* 0.81.3\n  * Don't require `runtime` feature of `clang`.\n\n* 0.81.2\n  * Fix building when crosscompiling with target-specific RUSTFLAGS.\n\n* 0.81.1\n  * Fix building on macOS (fixes https://github.com/twistedfall/opencv-rust/issues/460).\n\n* 0.81.0\n  * Fix compilation when using clang-6.\n  * Add hough_lines example.\n  * Add `Scalar::is_real()`.\n  * Apply proper naming to some methods from RNG.\n\n* 0.80.0\n  * Generate default constructors for some classes that were missing any form of construction.\n\n* 0.79.0\n  * `DataType` can now be implemented by downstream types that will allow storage of some custom types inside `Mat`.\n    Previously this trait was sealed, now it's an unsafe trait because types must guarantee the memory layout.0\n  * Calling `.iter()` on an empty `Mat` no longer returns an error, but an empty iterator.\n  * Some functions like `Point_::new()` or `Size_::new()` are now `const`.\n  * Minor documentation updates.\n\n* 0.78.2\n  * Fix compilation with clang 16\n\n* 0.78.1\n  * Automatically implement `Clone` for those classes that are constructor-copiable in C++, e.g. `KeyPoint`.\n  * Fixes for crosscompiling (kudos to icedrocket).\n\n* 0.78.0\n  * Don't strip \"lib\" prefix from linked libraries when building with MSVC (kudos to icedrocket)\n  * Fix newline handling on Windows (kudos to grindvoll)\n  * Fix for the build failure against the upcoming OpenCV version.\n\n* 0.77.0\n  * Rename `typ()`, `channels()`, `depth()` to `opencv_type()`, `opencv_channels()`, `opencv_depth()`. The old functions are\n    scheduled for removal mid-2023.\n  * Generate `DrawLinesMatchesFlags` enum correctly.\n  * Make sure to generate `Vector<Point2d>` for `calib3d` module (fixes https://github.com/twistedfall/opencv-rust/issues/422).\n\n* 0.76.4\n  * Fix autocomplete and documentation for rust-analyzer based IDEs.\n\n* 0.76.3\n  * Introduce `Mat::from_slice_rows_cols()` function to simplify creation of 2d matrices from byte buffers.\n  * Improve documentation.\n\n* 0.76.2\n  * Fix incorrect display of macros in documentation, some internal macros were showing up, but some usable were not.\n\n* 0.76.1\n  * Fix build failure.\n\n* 0.76.0\n  * Change the way the generated bindings are stored. They are no longer generated under `src/`, but stored in the output\n    directory and included dynamically. Previously it didn't work very well with IDEs which resulted in missing autocomplete and\n    documentation. This looks to be working correctly now at least in `rust-analyzer` and `intellij-rust`.\n  * Bump crate edition to 2021 (from 2018) and require at least Rust 1.59.0 (the MSRV check is now included in CI).\n  * Start phasing out OpenCV 3.2 support. This does not mean immediate breakage, but it's no longer going to be tested and\n    problems in generation for that outdated and unsupported version will no longer be addressed.\n\n* 0.75.0\n  * Add support for OpenCV 4.7.0.\n  * Add support for C++ function call operator: `operator ()`.\n\n* 0.74.2\n  * Adjust dependencies to ensure that `jobserver` is the appropriate version\n    (fixes https://github.com/twistedfall/opencv-rust/issues/400).\n\n* 0.74.1\n  * Fix building when `-j1` cargo option is specified (fixes https://github.com/twistedfall/opencv-rust/issues/380).\n\n* 0.74.0\n  * Add support aruco_detector module present in the future opencv_contrib.\n\n* 0.73.0\n  * Add basic support for the Graph-API (gapi) module.\n  * Generate bindings for `std::tuple` and `std::pair`.\n  * Add support for the following operators: `!=`, `>`, `>=`, `<`, `<=`, `&`, `|`, `^`, `~`.\n  * Correctly handle rvalue reference (`&&`) as move operation.\n  * Due to multiple internal improvements some functions have slightly changed names.\n\n* 0.72.0/0.72.1\n  * Make `lower_bound` argument of `imgproc::emd()` optional.\n  * Fix semantics of `VectorIterator::nth` to follow the documentation for `Iterator`.\n  * Fix Android build failure ([#392](https://github.com/twistedfall/opencv-rust/issues/392))\n  * Fix constant crate recompilation ([#390](https://github.com/twistedfall/opencv-rust/issues/390))\n\n* 0.71.0\n  * Multiple improvements to the `Vector` type:\n    * `VectorRefIterator` is now cloneable.\n    * Better performance and correctness for `Vector` iterators.\n    * Implement `Vector::from_elem()`.\n    * Make sure that `Vector<T: Send + Sync>` is also `Send + Sync`.\n  * Fix building on platforms where `c_char` â‰  `u8`.\n\n* 0.70.0\n  * Internal improvements and reorganization\n\n* 0.69.0\n  * Fix building with clang-15.\n  * Rename `distort_points` to `fisheye_distort_points` for consistency.\n\n* 0.68.0\n  * Make sure that `howToGetFeatures` argument of the `createStructuredEdgeDetection()` is nullable.\n  * Add `OutputArray` and `InputOutputArray` implementations for `Mat_`.\n\n* 0.67.0\n  * Change `fourcc` method to accept `char`s instead of `i8`s.\n  * Remove `gapi` feature as this module is not supported at the moment.\n\n* 0.66.0\n  * Generate `valid_pix_roi` argument of `get_optimal_new_camera_matrix` as optional argument\n    (fixes [#349](https://github.com/twistedfall/opencv-rust/issues/349)).\n  * `clang-runtime` feature has been dropped and the associated behavior is now the default. It's caused by the changed API of\n    the `clang` crate.\n\n* 0.65.0\n  * Improve generation for OpenCV 4.6.0.\n\n* 0.64.1\n  * Improve function documentation generation (fixes [#266](https://github.com/twistedfall/opencv-rust/issues/266)).\n\n* 0.64.0\n  * Fix documentation for conditional compilation macros.\n  * Make sure to generate `VectorOfPoint3f` and `VectorOfVectorOfPoint3f` for `calib3d` module.\n  * Disable generation of `merge_slice` function because it's not usable from Rust.\n\n* 0.63.2\n  * Introduce macros that allow external crates to conditionally include code based on the OpenCV branch (3.2, 3.4 or 4).\n\n* 0.63.1\n  * Provide `From` implementations from tuples and similar C++ conversions for `Point`, `Size`, `Rect` and `Point3`.\n\n* 0.63.0\n  * Provide bindings for `++` and `--` operators (fixes [#319](https://github.com/twistedfall/opencv-rust/issues/319))\n  * Drop type restrictions for `Rect_`, `Point_`, `Size_`, `Point3_`, `VecN` (and related structs)\n    (fixes [#316](https://github.com/twistedfall/opencv-rust/issues/316))\n  * Make sure that `VectorOfVectorOff64` is generated for calib3d module\n    (fixes [#321](https://github.com/twistedfall/opencv-rust/issues/321))\n\n* 0.62.0\n  * Fixed a segfault when using functions that return small structures (like Point2f) with some C++ compiler combinations, e.g.\n    when using repository OpenCV with the default compiler in Ubuntu 20.04.\n  * Fix segfault and error handling while casting to descendant classes.\n  * Test with OpenCV 4.5.5 and 3.4.17.\n\n* 0.61.3\n  * Implement `ToInput/OutputArray` for `Scalar` and all other often used combinations of `VecN`.\n  * Fix building on macOS with OpenCV as framework.\n\n* 0.61.2\n  * Add support for parsing `CV_NODISCARD` attributes, they are converted to `#[must_use]`.\n\n* 0.61.1\n  * Make sure that `VectorOfVectorOfPoint` type is generated for the `imgproc` module.\n\n* 0.61.0\n  * The QR code decoding function in `objdetect` module are now returning `Vec<u8>` instead of `String` because the codes can\n    contain binary raw binary data and are not always UTF-8.\n  * You can now iterate over `Mat` using `for` loop. The iterator will yield elements of type `(Point, T)`, a position and an\n    element.\n\n* 0.60.0\n  * The features for OpenCV module selections now have inter-dependencies so that you can't exclude a module that's needed for\n    some other one.\n  * Infallible functions returning references should be faster now due to the streamlined error handling.\n  * More simple functions are marked as infallible (e.g. `Mat::total()`, `Mat::depth()`).\n  * Functions that returned references to some internal data (e.g. `Mat::ptr()`, `Mat::data_mut()`) now return raw pointers, it\n    makes more sense and allows checking for null pointer outside of call. The corresponding property setters also accept\n    pointers.\n  * Functions that accept raw pointers are now marked as unsafe.\n\n* 0.59.0\n  * You can now select which OpenCV modules you want to include in generation using the crate features, there is a feature for\n    every OpenCV module except core. This supersedes the old system with environment variables `OPENCV_MODULE_WHITELIST` and\n    `OPENCV_MODULE_BLACKLIST`, they are no longer supported (kudos to nsabovic).\n  * You can now use the `rgb` crate types as elements of `Mat`, just enable the `rgb` feature (kudos to fzyzcjy).\n  * You can now use `Vector::from_slice()` for a faster construction of `Vector` from a slice. This only works for simple types\n    like `u8` or `Point`.\n\n* 0.58.0\n  * Infallible functions are no longer using exception handling internally so they should be faster.\n  * `core::Vec` is renamed to `core::VecN` to avoid name conflict with std's `Vec`.\n  * The `dnn::TextDetectionModel` struct is now generated correctly for newer OpenCV's.\n\n* 0.57.0\n  * Add support for mathematical operations on `Mat` (kudos to fzyzcjy).\n  * `VecNT` (e.g. `Vec3b`) are now rewritten using const generics which makes them more flexible. That raises the minimum Rust\n    version requirement to 1.51. Also be mindful of the name clash between `opencv::core::Vec` and `std::vec::Vec`.\n  * Added mathematical operations on `Vec` that are available in the OpenCV library.\n  * Added support for generating bindings for the `==` operator.\n\n* 0.56.1\n  * Structs that have infallible default constructors (e.g. `Mat`) now implement `Default` trait.\n  * Make sure to generate `std::vector<cv::Vec[23][fd]>` bindings for `imgproc::HoughLines` function.\n\n* 0.56.0\n  * Mark most exported functions as `#[inline]` to facilitate inter-crate inlining. Those function calls are just wrappers around\n    the corresponding FFI function.\n  * Adjust the code to support OpenCV 4.5.4 better.\n  * Allow passing `None` to `minMaxLoc` and `minMaxIdx` functions.\n\n* 0.55.0\n  * add `Mat::data_bytes[_mut]()` methods to access byte data inside `Mat` as slice, `Mat::data()` now returns\n    raw pointer instead of reference.\n\n* 0.54.0\n  * highgui::create_trackbar now takes `Option<&mut i32>` for `value` to fix the deprecation warning\n    (fixes [#261](https://github.com/twistedfall/opencv-rust/issues/261)).\n  * Class traits are now split into const and mut variants. So what previously was `MatTrait` is now\n    `MatTraitConst` with only const methods and `MatTrait` with only mut methods.\n\n* 0.53.2\n  * Fix building with cmake versions below 3.15.\n\n* 0.53.1\n  * Add support for casting classes to their bases. You can now call `.into()` on the descendant class to cast\n    it to the parent.\n  * Add support for newly released OpenCV 4.5.3 and 3.4.15.\n  * Minor improvements in the `vcpkg` support.\n\n* 0.53.0\n  * This release removes some features and environment variables to make the crate easier to use:\n    * `buildtime-bindgen` is removed. With all the possible OpenCV configurations out there it was practically\n      impossible to build the crate without regenerating bindings to fit your exact installation.\n    * `opencv-32`, `opencv-34` and `opencv-4` branch selection features are removed too. Version selection is\n      now performed in build-time. If you were using those features in your `Cargo.toml` then just remove them\n      (and `default-features = false` can probably go too).\n    * Support for `OPENCV_CLANG_STDLIB_PATH` environment variable is removed. If you were using it, then you\n      can add that directory as part of `OPENCV_INCLUDE_PATHS`. E.g.:\n      ```\n      OPENCV_INCLUDE_PATHS=\"<path_to_clang_stdlib_path>,+\"\n      ```\n    * Support for `OPENCV_HEADER_DIR` is also removed. It was meant to be development-only environment variable,\n      and it's no longer needed in the development process.\n  * The crate is now smaller due to dropping of the bundled headers and bindings.\n  * Fixes for building with older OpenCV versions (fixes [#227](https://github.com/twistedfall/opencv-rust/issues/227))\n\n* 0.52.0\n  * Add support for OpenCV 4.5.2 and 3.4.14\n  * In those new OpenCV versions some methods are now marked NOEXCEPT which makes them return result directly,\n    without the wrapping Result. Most notable of those new methods is `Mat::default`, which now returns a `Mat`\n    directly. To keep the examples and tests running those methods are also manually marked as NOEXCEPT for previous\n    versions of OpenCV.\n  * The \"contrib\" feature flag is there no more, the crate now uses build-time module set detection, so just drop\n    it from your `Cargo.toml` if you've been using it.\n\n* 0.51.0\n  * Make sure that casts to Ptr<Feature2D> are also generated\n    (fixes [#218](https://github.com/twistedfall/opencv-rust/issues/218))\n  * Port text detection example (requires OpenCV 4.5.1)\n  * Adjust some function names\n\n* 0.50.0\n  * Improve smart pointer handling (`Ptr`), deeper analysis now generates more necessary `Ptr<T>` bindings and\n    all `Ptr<Child>` types are now castable to `Ptr<Parent>` when it's required by the OpenCV API\n    (fixes [#217](https://github.com/twistedfall/opencv-rust/issues/217))\n  * Module-level documentation generation for `tracking` module is now fixed\n\n* 0.49.1\n  * Improved processing of environment variables\n\n* 0.49.0\n  * Fix conversion of slice arguments, allow nullable slices\n    (fixes [#201](https://github.com/twistedfall/opencv-rust/issues/201))\n\n* 0.48.0\n  * Fix binding-generator build in cross-compilation environment (kudos to tylerhawkes)\n  * Using `dnn_superres` now requires `contrib` feature enabled, it was incorrectly marked as core module\n\n* 0.47.0\n  * Fix building with OpenCV 4.5.1 and 3.4.13\n  * Due to the code adjustments, some `VectorOf...` types are no longer generated (e.g. `VectorOfPoint3i`)\n  * The documentation for `tracking` module is now a copy of `imgproc`, which is a bug\n\n* 0.46.3\n  * Specify minimum required vcpkg version\n\n* 0.46.2\n  * Bring back deprecated cmake find-package discovery as a fallback, it's still useful\n    in [some cases](https://github.com/twistedfall/opencv-rust/issues/177)\n\n* 0.46.1\n  * Improve cmake package detection (and remove deprecated find-package)\n  * Re-enable parallel building with `clang-runtime` feature enabled\n  * Add support for appending user values to detected OpenCV build configurations like include paths or link paths\n  * Fix generation with OpenCV 4.5.0\n  * Minimal required rust version is now 1.45.0 due to usage of `str::strip_prefix`\n\n* 0.46.0\n  * Fix linking in some configurations (https://github.com/twistedfall/opencv-rust/issues/164)\n  * Fix argument name clashing in external functions\n\n* 0.45.1\n  * Internal improvements in const handling\n  * Fix warnings in beta\n  * Misc CI improvements\n\n* 0.45.0\n  * Add implementation of `From<Vec<T>>` for `Vector<T>` + misc vector improvements\n  * Enable OpenGL functions and classes from the `core` module\n\n* 0.44.2\n  * Fix building with Apple clang\n  * Show libclang diagnostics during binding generation\n\n* 0.44.1\n  * Fix docs.rs build\n\n* 0.44.0\n  * Add support for ovis module\n  * Add implementation of Ptr::new for non-abstract types\n  * Rework string handling, that fixed core::convert_type_str() function which was handling memory very unsafely before\n  * Internal refactor of cpp const handling, that changed the internal function identifiers\n\n* 0.43.3\n  * Test with the newly released OpenCV 3.4.11 and 4.4.0\n  * Internal cleanups and CI fixes\n\n* 0.43.2\n  * Fix build on RPi (fixes #157)\n\n* 0.43.1\n  * Fix docs.rs build\n\n* 0.43.0\n  * Add `Clone` implementation (that panics on error) for `Mat`, `SparseMat`, `UMat`, `GpuMat` and `HostMem`.\n  * Add `Vector::as_mut_slice()` for copy types.\n  * Add `Vector::clone()` for types with `Clone` implementation (based on work of carbotaniuman).\n\n* 0.42.0\n  * Enable CUDA support, check `examples/cuda.rs` for a bootstrap.\n  * `buildtime-bindgen` is now enabled by default, compilation without it enabled rarely worked in reality.\n    You can still disable it by disabling default features.\n  * `Vector` now implements `Into<Vec>`, `Debug`, `AsRef`, `Borrow`, `Default`, `Extend` and `FromIterator`,\n    `Vector::to_slice` was renamed to `Vector::as_slice` (kudos to jerry73204 and carbotaniuman).\n  * Improve tests and examples.\n  * Internal reorganization for better logic separation.\n\n* 0.41.1\n  * Revert the parallelization of the build when `clang-runtime` is enabled, it led to #145\n\n* 0.41.0\n  * Enable parallel build even if `clang-runtime` is enabled (it uses helper generator binary in multiple threads)\n  * Enable most of the remaining contrib modules, namely: quality, saliency, stereo, ximgproc, tracking, rgbd,\n    hfs and optflow.\n  * Move all the remaining methods from `VectorTrait` to `Vector` struct and remove `VectorTrait`.\n  * Improve `Mat_` usability.\n  * Enable class constant generations (these were previously methods).\n  * Fix the issue where functions accepting strings will not reject strings with null characters in them, but\n    silently truncate them.\n\n* 0.40.1\n  * Fix parsing of cmake output during package discovery (fixes #136)\n  * Prefer vcpkg over cmake when building on Windows (fixes #137)\n\n* 0.40.0\n  * Optimized dependencies, the crate has now 19 (including transitional) dependencies less.\n  * Fixed pre-generated bindings for version 3.4 that got left out in the previous release.\n\n* 0.39.0\n  * Iterators for `Vector` now correctly return remaining length in `size_hint` and `len` methods.\n  * Internal improvements and cleanups\n\n* 0.38.0\n  * Fix crosscompilation when targeting Windows platform.\n  * Fix generation of bigger binaries\n\n* 0.37.0\n  * Add `clang-runtime` feature for compatiblity with dependencies that require `clang` or `clang-sys` that\n    enable its `runtime` feature unconditionally (like `bindgen`).\n  * Add `OPENCV_CLANG_STDLIB_PATH` environment variable to allow working around header detection of libclang\n    when it fails (should fix #125).\n  * Stop using synchronization primitives for callback handling.\n  * Improve cmake based library discovery.\n\n* 0.36.0\n  * Large internal rework of `Matx`, `PtrOfâ€¦` and `VectorOfâ€¦` structs. They have been made generic and their\n    code generation have been mostly moved to Rust macros. This change should have no user facing consequences,\n    type aliases with the old names are kept for backwards compatibility and code brevity.\n  * Methods for accessing raw pointers for boxed classes have been moved into a common `Boxed` trait.\n    Additionally, `from_raw_ptr()` is now `from_raw()`, `as_raw()` is now returning `*const c_void` (as\n    opposed to `mut`) and new methods have been added: `as_raw_mut()`, `into_raw()`. This applies to all\n    structs that are allocated by C++ side (e.g. Mat), `Ptr<T>` and `Vector<T>`.\n  * `TermCriteria` is now a simple class so you can write and read its properties directly without using\n    accessor methods, APIs involving this class have also been updated.\n  * C++ operators * (multiplication, dereferencing), / (division), + (addition) and - (subtraction) are now\n    also exposed to Rust under function names `mul_*`/`try_deref`, `div_*`, `add_*` and `sub_*`.\n\n\n* 0.35.0\n  * Add beta-level support for doing OpenCV library discovery using cmake, which is now a recommended method\n    by the upstream.\n  * Add ability to override `OPENCV_LINK_LIBS`, `OPENCV_LINK_PATHS` and `OPENCV_INCLUDE_PATHS` in case of\n    library auto-discovery. This doesn't work for vcpkg yet.\n  * Add ability to introduce to specify package names separately for different auto-discovery systems using\n    `OPENCV_PKGCONFIG_NAME`, `OPENCV_CMAKE_NAME` and `OPENCV_VCPKG_NAME`.\n\n* 0.34.0\n  * Bump bindings to OpenCV version 4.3.0 and 3.4.10\n  * Mark `Mat::new_*_with_data` functions unsafe because they allow passing arbitrary data pointer\n  * Sort out internal generation of string return type wrappers, should help on some platforms in avoiding\n    `buildtime-bindgen`, see https://github.com/twistedfall/opencv-rust/issues/110\n  * Fix examples\n\n* 0.33.1\n  * Internal rework of `VectorOfâ€¦` generation logic, fix https://github.com/twistedfall/opencv-rust/issues/109\n\n* 0.33.0\n  * Basic support for building against OpenCV.framework on macOS, for details see\n    [ci files](https://github.com/twistedfall/opencv-rust/blob/v0.33.0/ci/script.sh#L34)\n  * Fix internals of `PtrOff32`\n  * Big internal refactoring getting rid of most instances of type casting and `void*`\n\n* 0.32.0\n  * Improve Matx: better api ergonomics, add PartialEq, add ToInput/OutputArray implementations, add tests\n  * 'u_mat' the method names is now 'umat' (underscore removed)\n\n* 0.31.1\n  * Fix passing bigger simple classes as arguments\n\n* 0.31.0\n  * Add from/to_vec method to `Point_` and `Point3_`\n  * Add basic implementations of `Mat_`, `Matx` and `Affine3` generic types, and OpenCV methods that use them\n  * Rename `Mat::*_mut_unchecked` methods to `*_unchecked_mut` for consistency with std library\n\n* 0.30.1\n  * Dummy version to fix docs.rs build\n\n* 0.30\n  * Total rewrite of the binding generator in Rust. It no longer relies on Python, but instead uses libclang\n    to parse the C++ code. Please be sure to install clang/llvm in your system if you're going to regenerate\n    bindings (mostly macOS and Windows users). You can expect all of the previous functionality to be there\n    (sans name changes) and a lot of new functions and classes. Binding generation is now more precise and\n    quick.\n\n  * While most of the crate interface remain the same there are some quite changes in the API:\n    * Some functions have changed name to the one hinted in the OpenCV headers, e.g. `core::sum()` is now\n      `core::sum_elems()`.\n    * Some functions got renamed for more consistency (e.g. `VideoCapture` constructors) or to avoid the name\n      clash with the newly generated functions (like `MatConstIterator::get` â†’ `current`). Please use the\n      documentation to discover the new name.\n    * A bunch of functions got renamed from their _1 automatic names.\n    * Names that coincide with Rust keywords now get underscore at the end, not the beginning, e.g. `_ref`\n      becomes `ref_`. Moreover `type_` is now `typ`.\n    * Vector types now receive their Rust type suffix, so `VectorOfuchar` gets renamed to `VectorOfu8`.\n\n  * `FileStorage`/`FileNode` API is now usable.\n\n  * Some methods (like `Mat::new_nd_with_default`) now accept slices instead of `Vector`s. The length of the\n    Rust slice is passed down to the OpenCV.\n\n  * Traits are now used way more through the API, importing prelude is a must (```use opencv::prelude::*;```).\n    There are also separate preludes per module should you want to use that (```use opencv::imgproc::*;```).\n\n  * All enums are now generated.\n\n  * Full property access, you can now read and write all public properties of the OpenCV classes through\n    getters and setters.\n\n  * You can now access properties for `PtrOf...` objects directly without the need to go through `get()` and\n    `get_mut()` (those methods are now dropped, they were unsound).\n\n  * All property setters and getters are now infallible so they don't return `Result`, but a value directly.\n\n  * `_OutputArray` and `_InputOutputArray` have received a second set of constructors `from_*_mut`, so if you\n    use those manually you most probably want to use `*_mut` version instead of the const one.\n\n  * New modules: face, surface_matching, text\n\n  * Calling `Mat::data_typed()` and `Mat::data_typed_mut()` will now do `is_continuous()` check and return an\n    error if it's false.\n\n* 0.29.2\n  * add ability to get reference to the inner value of non-trait `PtrOf*` types (kudos to jerry73204)\n\n* 0.29.1\n  * fix generation of setters for properties (kudos to jerry73204)\n\n* 0.29\n  * default features now target OpenCV 4.2.0 (instead of OpenCV 3.4.x). Feature `opencv-42` was renamed to\n    `opencv-4`. Bindings were bumped to OpenCV 4.2.0 and 3.4.9.\n\n  * core::MAKETYPE was renamed to CV_MAKETYPE, core::MAT_DEPTH was renamed to CV_MAT_DEPTH\n\n* 0.28\n  * dnn::BackendNode constructor as well as stitching::createStitcher and stitching::createStitcherScans are no\n    longer generated for the OpenCV version where they are not available, fixing the linking issues\n\n* 0.27.0\n  * add support for `vcpkg` when building for windows, it's being used by default in the absence of\n    environment variables\n\n  * with `buildtime-bidngen` feature enabled the crate no longer uses bundled source files for code\n    generation by default, but the ones installed with OpenCV library detected by `pkg_config`, `vcpkg` or\n    environment; set `OPENCV_HEADER_DIR` environment variable to override this behavior\n\n* 0.26.6\n  * Ancient history\n"
        },
        {
          "name": "Cargo.toml",
          "type": "blob",
          "size": 4.345703125,
          "content": "[package]\nname = \"opencv\"\ndescription = \"Rust bindings for OpenCV\"\ndocumentation = \"https://docs.rs/opencv\"\nrepository = \"https://github.com/twistedfall/opencv-rust\"\nreadme = \"README.md\"\nkeywords = [\"opencv\", \"vision\"]\nlicense = \"MIT\"\nversion = \"0.94.1\"\nedition = \"2021\"\nrust-version = \"1.77.0\"\nauthors = [\"Pro <twisted.fall@gmail.com>\", \"Mathieu Poumeyrol <kali@zoy.org>\"]\nexclude = [\"/.github\", \"/ci\", \"/tools\", \".editorconfig\", \".gitattributes\", \".gitignore\", \"release.toml\", \"rustfmt.toml\"]\n\n[lib]\ndoctest = false\n\n[badges]\nmaintenance = { status = \"actively-developed\" }\n\n[workspace]\nmembers = [\"binding-generator\"]\n\n[dependencies]\nhalf = { version = \"2\", optional = true }\nlibc = \"0.2\"\nnum-traits = \"0.2\"\nonce_cell = \"1\"\n# version 0.8.20 doesn't contain the deficiency mentioned in https://deps.rs/crate/opencv/0.59.0#vulnerabilities\nrgb = { version = \"0.8.20\", features = [\"argb\"], optional = true }\n\n[target.'cfg(target_os = \"windows\")'.dependencies]\nwindows = { version = \"0.59\", features = [\"Win32_Graphics_Direct3D9\", \"Win32_Graphics_Direct3D10\", \"Win32_Graphics_Direct3D11\"] }\n\n[build-dependencies]\nopencv-binding-generator = { version = \"0.94.1\", path = \"binding-generator\" }\ncc = { version = \"1.0.83\", features = [\"parallel\"] }\ndunce = \"1\"\n# jobserver-0.1.25 is the first one that has Client::available() method\njobserver = \"0.1.25\"\nonce_cell = \"1\"\npkg-config = \"0.3\"\nsemver = \"1\"\nshlex = { version = \"1.3\", default-features = false }\n# vcpkg-0.2.9 is the first one that has accessible find_vcpkg_root()\nvcpkg = \"0.2.9\"\n\n[dev-dependencies]\nmatches = \"0.1\"\n# copy of build-dependencies because we need to test methods of the build script\nopencv-binding-generator = { version = \"0.94.1\", path = \"binding-generator\" }\ncc = { version = \"1.0.83\", features = [\"parallel\"] }\ndunce = \"1\"\n# jobserver-0.1.25 is the first one that has Client::available() method\njobserver = \"0.1.25\"\nonce_cell = \"1\"\npkg-config = \"0.3\"\nsemver = \"1\"\nshlex = { version = \"1.3\", default-features = false }\n# vcpkg-0.2.9 is the first one that has accessible find_vcpkg_root()\nvcpkg = \"0.2.9\"\n\n[features]\ndefault = [\n\t\"3d\",\n\t\"alphamat\",\n\t\"aruco\",\n\t\"aruco_detector\",\n\t\"barcode\",\n\t\"bgsegm\",\n\t\"bioinspired\",\n\t\"calib\",\n\t\"calib3d\",\n\t#\"cannops\",\n\t\"ccalib\",\n\t\"cudaarithm\",\n\t\"cudabgsegm\",\n\t\"cudacodec\",\n\t\"cudafeatures2d\",\n\t\"cudafilters\",\n\t\"cudaimgproc\",\n\t\"cudalegacy\",\n\t\"cudaobjdetect\",\n\t\"cudaoptflow\",\n\t\"cudastereo\",\n\t\"cudawarping\",\n\t#\"cudev\",\n\t\"cvv\",\n\t\"dnn\",\n\t\"dnn_superres\",\n\t\"dpm\",\n\t\"face\",\n\t\"features\",\n\t\"features2d\",\n\t\"flann\",\n\t\"freetype\",\n\t\"fuzzy\",\n\t\"gapi\",\n\t\"hdf\",\n\t\"hfs\",\n\t\"highgui\",\n\t\"img_hash\",\n\t\"imgcodecs\",\n\t\"imgproc\",\n\t\"intensity_transform\",\n\t\"line_descriptor\",\n\t\"mcc\",\n\t\"ml\",\n\t\"objdetect\",\n\t\"optflow\",\n\t\"ovis\",\n\t\"phase_unwrapping\",\n\t\"photo\",\n\t\"plot\",\n\t\"quality\",\n\t\"rapid\",\n\t\"rgbd\",\n\t\"saliency\",\n\t\"sfm\",\n\t\"shape\",\n\t\"signal\",\n\t\"stereo\",\n\t\"stitching\",\n\t\"structured_light\",\n\t\"superres\",\n\t\"surface_matching\",\n\t\"text\",\n\t\"tracking\",\n\t\"video\",\n\t\"videoio\",\n\t\"videostab\",\n\t\"viz\",\n\t\"wechat_qrcode\",\n\t\"xfeatures2d\",\n\t\"ximgproc\",\n\t\"xobjdetect\",\n\t\"xphoto\",\n\t\"xstereo\",\n]\n\n# OpenCV module features\n3d = []\nalphamat = []\naruco = []\naruco_detector = [\"aruco\"]\nbarcode = []\nbgsegm = [\"video\"]\nbioinspired = []\ncalib = [\"features\"]\ncalib3d = [\"features2d\"]\n#cannops = []\nccalib = [\"features2d\"]\ncudaarithm = []\ncudabgsegm = [\"video\"]\ncudacodec = []\ncudafeatures2d = [\"features2d\"]\ncudafilters = []\ncudaimgproc = [\"imgproc\"]\ncudalegacy = []\ncudaobjdetect = [\"objdetect\"]\ncudaoptflow = []\ncudastereo = [\"calib3d\"]\ncudawarping = []\n#cudev = []\ncvv = []\ndnn = []\ndnn_superres = []\ndpm = []\nface = [\"objdetect\"]\nfeatures = [\"flann\"]\nfeatures2d = [\"flann\"]\nflann = []\nfreetype = []\nfuzzy = []\ngapi = []\nhdf = []\nhfs = []\nhighgui = []\nimg_hash = []\nimgcodecs = []\nimgproc = []\nintensity_transform = []\nline_descriptor = []\nmcc = [\"dnn\"]\nml = []\nobjdetect = []\noptflow = [\"video\"]\novis = []\nphase_unwrapping = []\nphoto = []\nplot = []\nquality = [\"ml\"]\nrapid = []\nrgbd = []\nsaliency = []\nsfm = []\nshape = []\nsignal = []\nstereo = []\nstitching = [\"features2d\", \"imgproc\"]\nstructured_light = []\nsuperres = []\nsurface_matching = []\ntext = []\ntracking = [\"video\"]\nvideo = []\nvideoio = []\nvideostab = [\"features2d\"]\nviz = []\nwechat_qrcode = []\nxfeatures2d = [\"features2d\"]\nximgproc = [\"calib3d\"]\nxobjdetect = []\nxphoto = [\"photo\"]\nxstereo = []\n\n# General features\nclang-runtime = [\"opencv-binding-generator/clang-runtime\"]\nf16 = [\"dep:half\"]\n\n[package.metadata.docs.rs]\nno-default-features = true\n"
        },
        {
          "name": "INSTALL.md",
          "type": "blob",
          "size": 5.5869140625,
          "content": "## Getting OpenCV\n\nThis crates requires OpenCV system library to be present in your system. See below for some of the more common\nsetups:\n\n### Linux\n\n#### Arch Linux:\n\nOpenCV package in Arch is suitable for this:\n\n`pacman -S clang qt6-base opencv`\n\nand additionally to support more OpenCV modules:\n\n`pacman -S vtk glew fmt openmpi`\n\n#### Ubuntu:\n\n`apt install libopencv-dev clang libclang-dev`\n\n#### Opensuse:\n\n`zypper install opencv-devel clang-devel gcc-c++`\n\n#### Other Linux:\nYou have several options of getting the OpenCV library:\n\n* install it from the repository, make sure to install `-dev` packages because they contain headers necessary\n  for the crate build (also check that your package contains `pkg_config` or `cmake` files).\n\n* build OpenCV manually and set up the following environment variables prior to building the project with\n  `opencv` crate:\n  * `PKG_CONFIG_PATH` for the location of `*.pc` files or `OpenCV_DIR` for the location of `*.cmake` files\n  * `LD_LIBRARY_PATH` for where to look for the installed `*.so` files during runtime\n\nAdditionally, please make sure to install `clang` package or its derivative that contains `libclang.so` and\n`clang` binary.\n  * Gentoo, Fedora: `clang`\n  * Debian, Ubuntu: `clang` and `libclang-dev`\n\n### Windows package\n\nInstalling OpenCV is easy through the following sources:\n\n* from [chocolatey](https://chocolatey.org), also install `llvm` package, it's required for building:\n  ```shell script\n  choco install llvm opencv\n  ```\n  also set `OPENCV_LINK_LIBS`, `OPENCV_LINK_PATHS` and `OPENCV_INCLUDE_PATHS` environment variables (see below\n  for details).\n\n  Also, check the user guides [here](https://github.com/twistedfall/opencv-rust/issues/118#issuecomment-619608278)\n  and [here](https://github.com/twistedfall/opencv-rust/issues/113#issue-596076777).\n\n* from [vcpkg](https://docs.microsoft.com/en-us/cpp/build/vcpkg), also install `llvm` package,\n  necessary for building:\n  ```shell script\n  vcpkg install llvm opencv4[contrib,nonfree,opencl]\n  ```\n  You most probably want to set environment variable `VCPKGRS_DYNAMIC` to \"1\" unless you're specifically\n  targeting a static build.\n\n### macOS package\n\nGet OpenCV from homebrew:\n\n* [homebrew](https://brew.sh):\n  ```shell script\n  brew install opencv\n  ```\n  You will also need a working C++ compiler and libclang, you can install Command Line Tools (`xcode-select\n  --install`), XCode (from App Store) or `llvm` (from Brew). You most probably need to also check the item 7 of the\n  [troubleshooting](https://github.com/twistedfall/opencv-rust/blob/master/TROUBLESHOOTING.md).\n\n  If using system LLVM doesn't work for you, you can get it from homebrew:\n  ```shell script\n  brew install llvm\n  ```\n\n  If you have already installed OpenCV via Homebrew, there is no need to configure any environment variables specifically for OpenCV on macOS. The OpenCV installation can be automatically detected if it was installed through Homebrew.\n\n  To take advantage of this automatic detection, refrain from setting the following environment variables:\n\n  `OPENCV_LINK_LIBS`, `OPENCV_LINK_PATHS`, and `OPENCV_INCLUDE_PATHS`.\n\n  However, make sure you have configured the following environment variables:\n\n  `DYLD_FALLBACK_LIBRARY_PATH`, `LDFLAGS` and `LD_LIBRARY_PATH`.\n\n  If you have not made any custom changes to your installation, the following settings should work for your setup:\n\n  ```\n  export DYLD_FALLBACK_LIBRARY_PATH=\"$(xcode-select --print-path)/Toolchains/XcodeDefault.xctoolchain/usr/lib/\"\n  export LDFLAGS=-L/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/lib\n  export LD_LIBRARY_PATH=${LD_LIBRARY_PATH}:/usr/local/lib  \n  ```\n\n### Manual build\n\nYou can of course always compile OpenCV of the version you prefer manually. This is also supported, but it\nrequires some additional configuration.\n\nYou need to set up the following environment variables to point to the installed files of your OpenCV build:\n`OPENCV_LINK_LIBS`, `OPENCV_LINK_PATHS` and `OPENCV_INCLUDE_PATHS` (see below for details).\n\n### Static build\n\nStatic linking to OpenCV is supported and tested at least on Linux. For some hints on building OpenCV statically\nplease check this [comment](https://github.com/twistedfall/opencv-rust/issues/364#issuecomment-1308794985). Also,\nyou can get some information on how to perform the build in CI scripts:\n[install-ubuntu.sh](https://github.com/twistedfall/opencv-rust/blob/master/ci/install-ubuntu.sh) and\n[script.sh](https://github.com/twistedfall/opencv-rust/blob/master/ci/script.sh), search for `\"static\"` string.\n\n### Crosscompilation\n\nCross-compilation is supported to at least some extent. The ability to crosscompile projects using `opencv` from x86-64\nLinux host machine to Raspberry Pi is tested regularly. Cross-compilation is notoriously difficult to set up, so you can\nuse this example [rpi-xcompile.Dockerfile](https://github.com/twistedfall/opencv-rust/blob/master/tools/docker/rpi-xcompile.Dockerfile).\n\n```shell\ndocker build -t rpi-xcompile -f tools/docker/rpi-xcompile.Dockerfile tools\n```\n\nBuilding this image requries `qemu-arm` to be present on the host system and the corresponding `binfmt-misc` set up \n- see e.g. https://wiki.debian.org/QemuUserEmulation, only `Installing packages` should be enough for debian-based distros,\n- for opensuse, install `qemu-linux-user` via zypper to set up the host correctly.\n\nAfter the successful build you will have an image configured for cross-compilation to Raspberry Pi. It will contain the\nsample build script `/usr/local/bin/cargo-xbuild` that you can check for the correct environment setup and the specific\ncommand line arguments to use when crosscompiling the project inside the container created from that image.\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.0810546875,
          "content": "The MIT License (MIT)\n\nCopyright 2016-2018 â€” The OpenCV-Rust binding developpers\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 14.5390625,
          "content": "# Rust OpenCV bindings\n\n[![Build status](https://github.com/twistedfall/opencv-rust/workflows/opencv-rust/badge.svg)](https://github.com/twistedfall/opencv-rust/actions/workflows/opencv-rust.yml)\n[![Documentation](https://docs.rs/opencv/badge.svg)](https://docs.rs/opencv)\n[![Package](https://img.shields.io/crates/v/opencv.svg)](https://crates.io/crates/opencv)\n\nRust bindings for the popular [OpenCV](https://opencv.org/) computer vision library.\n\nThe API is usable, but unstable and not very battle-tested; use at your own risk.\n\n[Changelog](https://github.com/twistedfall/opencv-rust/blob/master/CHANGES.md) |\n[Troubleshooting](https://github.com/twistedfall/opencv-rust/blob/master/TROUBLESHOOTING.md) |\n[Support the project](https://github.com/sponsors/twistedfall)\n\n## Quickstart\n\nMake sure the supported OpenCV version (3.4, 4.x or 5.x) and Clang (part of LLVM, needed for automatic binding\ngeneration) are installed in your system.\n\nUpdate your Cargo.toml\n\n```toml\nopencv = \"0.94.1\"\n```\n\nImport prelude\n\n```rust\nuse opencv::prelude::*;\n```\n\n## Getting OpenCV\n\nSee [INSTALL.md](https://github.com/twistedfall/opencv-rust/blob/master/INSTALL.md) for instructions on how to install required\nsystem dependencies.\n\n## Troubleshooting\n\nSee [TROUBLESHOOTING.md](https://github.com/twistedfall/opencv-rust/blob/master/TROUBLESHOOTING.md) for some common issues and\ntheir solutions.\n\n## Environment variables\n\nThe following variables must be set when building without `pkg_config`, `cmake` or `vcpkg`. You can set them\non any platform, the specified values will override those automatically discovered.\n\n* `OPENCV_LINK_LIBS`\n  Comma separated list of library names to link to. `.lib`, `.so` or `.dylib` extension is optional. For every\n  library you can specify optional \"dylib=\", \"static=\" or \"framework=\" prefix to indicate the specific type.\n  E.g. \"opencv_world411\", \"framework=OpenCL\".\n\n  If this list starts with '+' (plus sign) then the specified items will be appended to whatever the system\n  probe returned. E.g. a value of \"+dc1394\" will do a system discovery of the OpenCV library and its linked\n  libraries and then will additionally link `dc1394` library at the end. Can be useful if the system probe\n  produces a mostly working setup, but has incomplete link list, or the order is wrong (especially important\n  during static linking).\n\n* `OPENCV_LINK_PATHS`\n  Comma separated list of paths to search for libraries to link. E.g. \"C:\\tools\\opencv\\build\\x64\\vc15\\lib\".\n  The path list can start with '+', see `OPENCV_LINK_LIBS` for a detailed explanation (e.g.\n  \"+/usr/local/lib\").\n\n* `OPENCV_INCLUDE_PATHS`\n  Comma separated list of paths to search for system include files during compilation. E.g.\n  \"C:\\tools\\opencv\\build\\include\". One of the directories specified therein must contain\n  \"opencv2/core/version.hpp\" or \"core/version.hpp\" file, it's used to detect the version of the headers.\n  The path list can start with '+', see `OPENCV_LINK_LIBS` for a detailed explanation (e.g.\n  \"+/opt/cuda/targets/x86_64-linux/include/\").\n\nThe following variables are rarely used, but you might need them under some circumstances:\n\n* `OPENCV_PACKAGE_NAME`\n  In some cases you might want to override the pkg-config, cmake or vcpkg package name, you can use this\n  environment variable for that. If you set it pkg-config will expect to find the file with that name and `.pc`\n  extension in the package directory. Cmake will look for that file with `.cmake` extension. And vcpkg will use\n  that name to try to find package in `packages` directory under `VCPKG_ROOT`. You can also use separate\n  environment variables to set different package names for different package systems:\n\t* `OPENCV_PKGCONFIG_NAME`\n\t* `OPENCV_CMAKE_NAME`\n\t* `OPENCV_VCPKG_NAME`\n\n* `OPENCV_CMAKE_BIN`\n  Path to cmake binary (used in OpenCV discovery process using cmake). If not set then just \"cmake\" will be\n  used. For example, you can set something like \"/usr/local/bin/cmake\" here.\n\n* `OPENCV_DISABLE_PROBES`\n  Comma separated list of OpenCV package auto-discovery systems to exclude from running. Might be useful if\n  one of the higher priority systems is producing incorrect results. Can contain the following values:\n\t* environment - reads data only from the `OPENCV_LINK_LIBS`, `OPENCV_LINK_PATHS` and `OPENCV_INCLUDE_PATHS`\n\t  environment variables\n\t* pkg_config\n\t* cmake\n\t* vcpkg_cmake - like vcpkg, but only uses vcpkg for path discovery, the actual OpenCV probe is done using\n\t  cmake (cmake related environment variables are applicable with this probe)\n\t* vcpkg\n\n* `OPENCV_MSVC_CRT`\n  Allows selecting the CRT library when building with MSVC for Windows. Allowed values are `\"static\"` for `/MT`\n  and `\"dynamic\"` for `/MD`.\n\nThe following variables affect the building the of the `opencv` crate, but belong to external components:\n\n* `PKG_CONFIG_PATH`\n  Where to look for `*.pc` files see the [man pkg-config](https://linux.die.net/man/1/pkg-config)\n  Path specified here must contain `opencv.pc` (pre OpenCV 4) or `opencv4.pc` (OpenCV 4 and later).\n\n* `VCPKG_ROOT`, `VCPKGRS_DYNAMIC` and `VCPKGRS_TRIPLET`\n  The root of `vcpkg` installation, flag allowing use of `*.dll` libraries and selected `vcpkg` triplet, see the\n  [documentation for `vcpkg` crate](https://docs.rs/vcpkg)\n\n* `OpenCV_DIR`\n  The directory that contains OpenCV package cmake files. Usually there are `OpenCVConfig.cmake`,\n  `OpenCVConfig-version.cmake` and `OpenCVModules.cmake` in it.\n\n* `LD_LIBRARY_PATH`\n  On Linux it sets the list of directories to look for the installed `*.so` files during runtime.\n  [Linux documentation](https://tldp.org/HOWTO/Program-Library-HOWTO/shared-libraries.html) has more info.\n  Path specified here must contain `libopencv_*.so` files.\n\n* `DYLD_LIBRARY_PATH` and `DYLD_FALLBACK_LIBRARY_PATH`\n  Similar to `LD_LIBRARY_PATH`, but for loading `*.dylib` files on macOS, see [man dyld](https://man.cx/dyld(1))\n  and [this SO answer](https://stackoverflow.com/a/3172515) for more info. Path specified here must contain\n  `*.dylib` files.\n\n* `PATH`\n  Windows searches for `*.dll`s in `PATH` among other places, be sure to set it up, or copy required OpenCV\n  `*.dll`s next to your binary. Be sure to specify paths in UNIX style (/C/Program Files/Dir) because colon\n  in `PATH` might be interpreted as the entry separator. Summary [here](https://stackoverflow.com/a/6546427).\n\n* `OPENCV_CLANG_ARGS`\n  Allow custom arguments for generating and parsing code with clang, see\n  the [documentation for clang arguments](https://docs.rs/clang/latest/clang/struct.Parser.html#method.arguments).\n\n* clang crate environment variables\n  See crate's [README](https://github.com/KyleMayes/clang-sys/blob/master/README.md#environment-variables)\n\n## Cargo features\n\n* There is a feature named after each OpenCV module (e.g. `imgproc`, `highgui`, etc.). They are all enabled by\n  default, but if a corresponding module is not found then it will silently be ignored. If you need to select a\n  specific set of modules be sure to disable the default features and provide the required feature set:\n  ```\n  opencv = { version = ..., default-features = false, features = [\"calib3d\", \"features2d\", \"flann\"]}\n  ```\n* `clang-runtime` - enables the runtime detection of libclang (`runtime` feature of `clang-sys`). Useful as a\n  workaround for when your dependencies (like `bindgen`) pull in `clang-sys` with hard `runtime` feature.\n* `rgb` - allow using [`rgb`](https://crates.io/crates/rgb) crate types as `Mat` elements\n* `f16` - add intergration with `f16` type from the `half` crate\n\n## API details\n\n[API Documentation](https://docs.rs/opencv) is automatically translated from OpenCV's doxygen docs. Most\nlikely you'll still want to refer to the official [OpenCV C++ documentation](https://docs.opencv.org/master)\nas well.\n\n### OpenCV version support\n\nThe following OpenCV versions are supported at the moment:\n\n* 3.4\n* 4.x\n* 5.x (preliminary)\n\n### Minimum rustc version (MSRV)\n\nCurrently, Rust version 1.77.0 or later is required. General policy is that rust version from 1 year ago is supported.\nBumping versions older than that is not considered a breaking change.\n\n### Platform support\n\nCurrently, the main development and testing of the crate is performed on Linux, but other major platforms are\nalso supported: macOS and Windows.\n\nFor some more details please refer to the CI build scripts:\n[Linux OpenCV install](https://github.com/twistedfall/opencv-rust/blob/master/ci/install-ubuntu.sh),\n[macOS OpenCV install as framework](https://github.com/twistedfall/opencv-rust/blob/master/ci/install-macos-framework.sh),\n[macOS OpenCV install via brew](https://github.com/twistedfall/opencv-rust/blob/master/ci/install-macos-brew.sh),\n[Windows OpenCV install via Chocolatey](https://github.com/twistedfall/opencv-rust/blob/master/ci/install-windows-chocolatey.sh),\n[Windows OpenCV install via vcpkg](https://github.com/twistedfall/opencv-rust/blob/master/ci/install-windows-vcpkg.sh),\n[Test runner script](https://github.com/twistedfall/opencv-rust/blob/master/ci/script.sh).\n\n### Functionality\n\nGenerally the crate tries to only wrap OpenCV API and provide some convenience functions\nto be able to use it in Rust easier. We try to avoid adding any functionality besides\nthat.\n\n### Errors\n\nMost functions return a `Result` to expose a potential C++ exception. Although some methods like property reads\nor functions that are marked CV_NOEXCEPT in the OpenCV headers are infallible and return a naked value.\n\n### CV_MAKETYPE\n\n`CV_MAKETYPE` and related `CV_MAT_DEPTH` constant functions are available to replace the corresponding OpenCV macros.\nYet it's usually easier to call `::opencv_type()` function on the corresponding Rust type. E.g.:\n\n```rust\nlet t = u16::opencv_type(); // equivalent to CV_MAKETYPE(CV_16U, 1)\nlet t = Vec2f::opencv_type(); // equivalent to CV_MAKETYPE(CV_32F, 2)\n```\n\n### C++ operators\n\nSome C++ operators are supported, they are converted to the corresponding functions on Rust side. Here is the\nlist with the corresponding function name:\n\n* `[]` â†’ `get()` or `get_mut()`\n* `+`, `-` â†’ `add()`, `sub()`\n* `*`, `/` â†’ `mul()`, `div()`\n* `()` (function call) â†’ `apply()`\n* `=` â†’ `set()`\n* `*` (deref) â†’ `try_deref()` or `try_deref_mut()`\n* `==`, `!=` â†’ `equals()`, `not_equals()`\n* `>`, `>=` â†’ `greater_than()`, `greater_than_or_equal()`\n* `<`, `<=` â†’ `less_than()`, `less_than_or_equal()`\n* `++`, `--` â†’ `incr()`, `decr()`\n* `&`, `|`, `^` â†’ `and()`, `or()`, `xor()`\n* `!` â†’ `negate()`\n\n### Class fields\n\nFields of OpenCV classes are accessible through setters and getters. Those functions are infallible, they\nreturn the value directly instead of `Result`.\n\n### Infallible functions\n\nFor infallible functions (like setters) that accept `&str` values the following logic applies: if a Rust\nstring passed as argument contains null byte then this string will be truncated up to that null byte. So if\nfor example you pass \"123\\0456\" to the setter, the property will be set to \"123\".\n\n### Callbacks\n\nSome API functions accept callbacks, e.g. `set_mouse_callback`. While currently it's possible to successfully\nuse those functions there are some limitations to keep in mind. Current implementation of callback handling\nleaks the passed callback argument. That means that the closure used as a callback will never be freed during\nthe lifetime of a program and moreover Drop will not be called for it. There is a plan to implement possibility\nto be able to free at least some closures.\n\n### Unsafety\n\nAlthough the crate tries to provide an ergonomic Rust interface for OpenCV, don't expect\nRust safety guarantees at this stage. It's especially true for the borrow-checking and the\nshared mutable ownership. Notable example would be `Mat` which is a reference counted\nobject in its essence. You can own a seemingly separate `Mat` in Rust terms, but\nit's going to be a mutable reference to the other `Mat` under the hood. Treat safety\nof the crate's API as you would treat one of C++, use `clone()` when needed.\n\n## Contrib modules\n\nTo be able to use some modules you need to have [`opencv_contrib`](https://github.com/opencv/opencv_contrib)\ninstalled. You can find the full list of contrib modules [here](https://github.com/opencv/opencv_contrib/tree/master/modules).\n\n## Missing modules and functions\n\nWhile most of the API is covered, for various reasons (that might no longer hold) there are modules and\nfunctions that are not yet implemented. If a missing module/function is near and dear to you, please file an\nissue (or better, open a pull request!).\n\n## The binding strategy\n\nThis crate works similar to the model of python and java's OpenCV wrappers - it uses libclang to parse the\nOpenCV C++ headers, generates a C interface to the C++ API, and wraps the C interface in Rust.\n\nAll the major modules in the C++ API are merged together in a huge `cv::` namespace. We instead made one rust\nmodule for each major OpenCV module. So, for example, C++ `cv::Mat` is `opencv::core::Mat` in this crate.\n\nThe methods and field names have been snake_cased. Methods arguments with default value lose these default\nvalues, but they are reported in the API documentation.\n\nOverloaded methods have been mostly manually given different names or automatically renamed to *_1, *_2, etc.\n\n## Older OpenCV branches support\n\n### OpenCV 2\n\nIf you can't use OpenCV 3.x or higher, the (no longer maintained) `0.2.4` version of this crate is known to\nwork with OpenCV `2.4.7.13` (and probably other 2.4 versions). Please refer to the README.md file for that\nversion because the crate has gone through the considerable rewrite since.\n\n### OpenCV 3.2\n\nThe last version with confirmed OpenCV 3.2 support is 0.75.0, after that this branch of OpenCV is no longer\ntested and supported. Since version 0.94.0 the support of OpenCV 3.2 is removed from the codebase.\n\n## Contributor's Guide\n\nThe binding generator code lives in a separate crate under [binding-generator](binding-generator). During the\nbuild phase it creates bindings from the header files and puts them into [bindings](bindings) directory. Those\nare then transferred to [src](src) for the consumption by the crate users.\n\nThe crate itself, as imported by users, consists of generated rust code in [src](src) committed to the repo.\nThis way, users don't have to handle the code generation overhead in their builds. When developing this crate,\nyou can test changes to the binding generation using `cargo build -vv`. When changing the `binding-generator`,\nbe sure to push changes to the generated code!\n\nIf you're looking for things to improve be sure to search for `todo` and `fixme` labels in the project\nsource, those usually carry the comment of what exactly needs to be fixed.\n\nThe license for the original work is [MIT](https://opensource.org/licenses/MIT).\n\nSpecial thanks to [ttacon](https://github.com/ttacon) for yielding the crate name.\n"
        },
        {
          "name": "TROUBLESHOOTING.md",
          "type": "blob",
          "size": 5.4931640625,
          "content": "## Troubleshooting\n\n1. One of the common problems is link errors in the end of the build.\n\n   Be sure to set up the relevant environment variables that will allow the linker to find the libraries it\n   needs (see below).\n\n2. You're getting runtime errors like:\n   ```\n   thread 'main' panicked at 'called `Result::unwrap()` on an `Err` value: Error { code: -215, message: \"OpenCV(4.2.0) /build/opencv/src/opencv-4.2.0/modules/highgui/src/window.cpp:384: error: (-215:Assertion failed) size.width>0 && size.height>0 in function \\'imshow\\'\\n\" }', src/libcore/result.rs:1188:5\n   ```\n   ```\n   thread 'extraction::tests::test_contour_matching' panicked at 'called `Result::unwrap()` on an `Err` value: Error { code: -215, message: \"OpenCV(4.1.1) /tmp/opencv-20190908-41416-17rm3ol/opencv-4.1.1/modules/core/src/matrix_wrap.cpp:79: error: (-215:Assertion failed) 0 <= i && i < (int)vv.size() in function \\'getMat_\\'\\n\" }', src/libcore/result.rs:1165:5\n   ```\n\n   These errors (note the .cpp source file and `Error` return value) are coming from OpenCV itself, not from\n   the crate. It means that you're using the OpenCV API incorrectly, e.g. passing incompatible or unexpected\n   arguments. Please refer to the OpenCV documentation for details.\n\n3. You're getting errors that methods don't exist or not implemented for specific `struct`s, but you can see\n   them in the documentation and in the crate source.\n\n   Be sure to import ```use opencv::prelude::*;```. The crate contains a lot of traits that need to be imported\n   first.\n\n4. On Windows, you're getting the `(exit code: 0xc0000135, STATUS_DLL_NOT_FOUND)` error when running the\n   compiled binary.\n\n   That often means that Windows can't find the OpenCV or Clang library dll. Be sure to set up `PATH` environment\n   variable correctly or copy the dll next to the binary you're trying to run (e.g. \"C:\\tools\\opencv\\build\\x64\\vc16\\bin\" and\n   \"C:\\Program Files\\LLVM\\bin\"). Check [that](https://github.com/twistedfall/opencv-rust/issues/118#issuecomment-619608278) guide\n   too.\n\n5. On Windows with VCPKG you're getting a lot of linking errors in multiple files like in\n   [this issue](https://github.com/twistedfall/opencv-rust/issues/340).\n\n   Make sure to add missing linked libs to `OPENCV_LINK_LIBS` environment variable prepended by `+`, e.g.:\n   ```\n   OPENCV_LINK_LIBS=\"+user32,gdi32,comdlg32\"\n   ```\n\n   Alternatively, switch to the dynamic linking mode by having environment variable `VCPKGRS_DYNAMIC` set to \"1\".\n\n6. On Windows with OpenCV 4.6.0 you're getting linking errors related to `img_hash` module like in\n   [this issue](https://github.com/twistedfall/opencv-rust/issues/360).\n\n   Be sure to add `opencv_img_hash460` to your `OPENCV_LINK_LIBS` environment variable because it's being built as a separate\n   file.\n\n7. On macOS you're getting the `dyld: Library not loaded: @rpath/libclang.dylib` error during the build process.\n\n   OS can't find `libclang.dylib` dynamic library because it resides in a non-standard path, set up\n   the `DYLD_FALLBACK_LIBRARY_PATH` environment variable to point to the path where libclang.dylib can be\n   found, e.g. for Command Line Tools:\n   ```\n   export DYLD_FALLBACK_LIBRARY_PATH=\"$(xcode-select --print-path)/usr/lib/\"\n   ```\n\n   or XCode:\n   ```\n   export DYLD_FALLBACK_LIBRARY_PATH=\"$(xcode-select --print-path)/Toolchains/XcodeDefault.xctoolchain/usr/lib/\"\n   ```\n\n   You might be running into the issue on the recent macOS versions where this environment variable remains empty after setting,\n   please check [this issue](https://github.com/twistedfall/opencv-rust/issues/343) for some workarounds.\n\n8. You're getting the ```a `libclang` shared library is not loaded on this thread``` error during crate build.\n\n   Enable the `clang-runtime` feature. The reason for the issue is that some `clang-sys` crate can either link to the\n   corresponding dynamic library statically or load it at runtime based on whether its feature `runtime` is enabled.\n   If enabled this crate feature applies to all crates that depend on `clang-sys` even if they didn't explicitly enable that\n   feature themselves (at least with Rust `edition` before 2021 and Cargo `resolver` before 2).\n\n9. You're getting `'limits' file not found` error during crate build.\n\n   This error is caused by the missing/invalid installation of C++ standard library (e.g. libstdc++ for GCC). To fix this make\n   sure that the toolchain you're using has the corresponding C++ standard library. The toolchain is used through `libclang`, so\n   to get useful diagnostic info run:\n   ```shell\n   clang -E -x c++ - -v\n   ```\n   Look for `Selected GCC installation` and `#include <...> search starts here` to get the sense of what system toolchain is used\n   by clang. Refer to this [issue](https://github.com/twistedfall/opencv-rust/issues/322) for more fixes and workarounds.\n\n10. Using a language server IDE on macOS you're getting `dyld: Library not loaded` error from `rust-analyzer`\n\n    Check this [issue](https://github.com/twistedfall/opencv-rust/issues/592) for some ready-made configurations\n    for VSCode and Zed.\n\n## Reporting issues\n\nIf you still have trouble using the crate after going through the Troubleshooting steps please fill free to\nreport it to the [bugtracker](https://github.com/twistedfall/opencv-rust/issues).\n\nWhen reporting an issue please state:\n\n1. Operating system\n2. The way you installed OpenCV: package, official binary distribution, manual compilation, etc.\n3. OpenCV version\n4. Attach the full output of the following command from your project directory:\n   ```shell script\n   RUST_BACKTRACE=full cargo build -vv\n   ```\n"
        },
        {
          "name": "binding-generator-bench",
          "type": "tree",
          "content": null
        },
        {
          "name": "binding-generator",
          "type": "tree",
          "content": null
        },
        {
          "name": "build.rs",
          "type": "blob",
          "size": 14.427734375,
          "content": "use std::collections::{HashMap, HashSet};\nuse std::env;\nuse std::ffi::OsStr;\nuse std::fs::File;\nuse std::io::{BufRead, BufReader};\nuse std::path::{Path, PathBuf};\nuse std::time::Instant;\n\nuse binding_generator::handle_running_binding_generator;\nuse docs::handle_running_in_docsrs;\nuse generator::BindingGenerator;\nuse library::Library;\nuse once_cell::sync::Lazy;\nuse semver::{Version, VersionReq};\n\n#[path = \"build/binding-generator.rs\"]\nmod binding_generator;\n#[path = \"build/cmake_probe.rs\"]\npub mod cmake_probe;\n#[path = \"build/docs.rs\"]\nmod docs;\n#[path = \"build/generator.rs\"]\nmod generator;\n#[path = \"build/library.rs\"]\npub mod library;\n\ntype Result<T, E = Box<dyn std::error::Error>> = std::result::Result<T, E>;\n\n// replace `Lazy` with `LazyLock` when MSRV is 1.80.0\nstatic OUT_DIR: Lazy<PathBuf> = Lazy::new(|| PathBuf::from(env::var_os(\"OUT_DIR\").expect(\"Can't read OUT_DIR env var\")));\nstatic MANIFEST_DIR: Lazy<PathBuf> =\n\tLazy::new(|| PathBuf::from(env::var_os(\"CARGO_MANIFEST_DIR\").expect(\"Can't read CARGO_MANIFEST_DIR env var\")));\nstatic SRC_DIR: Lazy<PathBuf> = Lazy::new(|| MANIFEST_DIR.join(\"src\"));\nstatic SRC_CPP_DIR: Lazy<PathBuf> = Lazy::new(|| MANIFEST_DIR.join(\"src_cpp\"));\nstatic TARGET_ENV_MSVC: Lazy<bool> = Lazy::new(|| env::var(\"CARGO_CFG_TARGET_ENV\").is_ok_and(|target_env| target_env == \"msvc\"));\nstatic TARGET_VENDOR_APPLE: Lazy<bool> =\n\tLazy::new(|| env::var(\"CARGO_CFG_TARGET_VENDOR\").is_ok_and(|target_vendor| target_vendor == \"apple\"));\n\nstatic OPENCV_BRANCH_34: Lazy<VersionReq> =\n\tLazy::new(|| VersionReq::parse(\"~3.4\").expect(\"Can't parse OpenCV 3.4 version requirement\"));\nstatic OPENCV_BRANCH_4: Lazy<VersionReq> =\n\tLazy::new(|| VersionReq::parse(\"~4\").expect(\"Can't parse OpenCV 4 version requirement\"));\nstatic OPENCV_BRANCH_5: Lazy<VersionReq> =\n\tLazy::new(|| VersionReq::parse(\"~5\").expect(\"Can't parse OpenCV 5 version requirement\"));\n\n/// Environment vars that affect the build, the source will be rebuilt if those change, the contents of those vars will also\n/// be present in the debug log\nstatic AFFECTING_ENV_VARS: [&str; 18] = [\n\t\"OPENCV_PACKAGE_NAME\",\n\t\"OPENCV_PKGCONFIG_NAME\",\n\t\"OPENCV_CMAKE_NAME\",\n\t\"OPENCV_CMAKE_BIN\",\n\t\"OPENCV_VCPKG_NAME\",\n\t\"OPENCV_LINK_LIBS\",\n\t\"OPENCV_LINK_PATHS\",\n\t\"OPENCV_INCLUDE_PATHS\",\n\t\"OPENCV_DISABLE_PROBES\",\n\t\"OPENCV_MSVC_CRT\",\n\t\"CMAKE_PREFIX_PATH\",\n\t\"OpenCV_DIR\",\n\t\"PKG_CONFIG_PATH\",\n\t\"VCPKG_ROOT\",\n\t\"VCPKGRS_DYNAMIC\",\n\t\"VCPKGRS_TRIPLET\",\n\t\"OCVRS_DOCS_GENERATE_DIR\",\n\t\"DOCS_RS\",\n];\n\nstatic SUPPORTED_MODULES: [&str; 73] = [\n\t\"3d\",\n\t\"alphamat\",\n\t\"aruco\",\n\t\"aruco_detector\",\n\t\"barcode\",\n\t\"bgsegm\",\n\t\"bioinspired\",\n\t\"calib\",\n\t\"calib3d\",\n\t// \"cannops\",\n\t\"ccalib\",\n\t\"core\",\n\t\"cudaarithm\",\n\t\"cudabgsegm\",\n\t\"cudacodec\",\n\t\"cudafeatures2d\",\n\t\"cudafilters\",\n\t\"cudaimgproc\",\n\t\"cudalegacy\",\n\t\"cudaobjdetect\",\n\t\"cudaoptflow\",\n\t\"cudastereo\",\n\t\"cudawarping\",\n\t// \"cudev\",\n\t\"cvv\",\n\t\"dnn\",\n\t\"dnn_superres\",\n\t\"dpm\",\n\t\"face\",\n\t\"features\",\n\t\"features2d\",\n\t\"flann\",\n\t\"freetype\",\n\t\"fuzzy\",\n\t\"gapi\",\n\t\"hdf\",\n\t\"hfs\",\n\t\"highgui\",\n\t\"img_hash\",\n\t\"imgcodecs\",\n\t\"imgproc\",\n\t\"intensity_transform\",\n\t\"line_descriptor\",\n\t\"mcc\",\n\t\"ml\",\n\t\"objdetect\",\n\t\"optflow\",\n\t\"ovis\",\n\t\"phase_unwrapping\",\n\t\"photo\",\n\t\"plot\",\n\t\"quality\",\n\t\"rapid\",\n\t\"rgbd\",\n\t\"saliency\",\n\t\"sfm\",\n\t\"shape\",\n\t\"signal\",\n\t\"stereo\",\n\t\"stitching\",\n\t\"structured_light\",\n\t\"superres\",\n\t\"surface_matching\",\n\t\"text\",\n\t\"tracking\",\n\t\"video\",\n\t\"videoio\",\n\t\"videostab\",\n\t\"viz\",\n\t\"wechat_qrcode\",\n\t\"xfeatures2d\",\n\t\"ximgproc\",\n\t\"xobjdetect\",\n\t\"xphoto\",\n\t\"xstereo\",\n];\n\n/// The contents of these vars will be present in the debug log, but will not cause the source rebuild\nstatic DEBUG_ENV_VARS: [&str; 1] = [\"PATH\"];\n\npub enum GenerateFullBindings {\n\tStop,\n\tProceed,\n}\n\nfn files_with_predicate<'p>(\n\tdir: &Path,\n\tmut predicate: impl FnMut(&Path) -> bool + 'p,\n) -> Result<impl Iterator<Item = PathBuf> + 'p> {\n\tOk(dir\n\t\t.read_dir()?\n\t\t.flatten()\n\t\t.filter_map(|e| e.file_type().is_ok_and(|typ| typ.is_file()).then(|| e.path()))\n\t\t.filter(move |p| predicate(p)))\n}\n\nfn files_with_extension<'e>(dir: &Path, extension: impl AsRef<OsStr> + 'e) -> Result<impl Iterator<Item = PathBuf> + 'e> {\n\tfiles_with_predicate(dir, move |p| {\n\t\tp.extension().is_some_and(|e| e.eq_ignore_ascii_case(extension.as_ref()))\n\t})\n}\n\nfn get_module_header_dir(header_dir: &Path) -> Option<PathBuf> {\n\tlet mut out = header_dir.join(\"opencv2.framework/Headers\");\n\tif out.exists() {\n\t\treturn Some(out);\n\t}\n\tout = header_dir.join(\"opencv2\");\n\tif out.exists() {\n\t\treturn Some(out);\n\t}\n\tNone\n}\n\nfn get_version_header(header_dir: &Path) -> Option<PathBuf> {\n\tget_module_header_dir(header_dir)\n\t\t.map(|dir| dir.join(\"core/version.hpp\"))\n\t\t.filter(|dir| dir.is_file())\n}\n\nfn get_version_from_headers(header_dir: &Path) -> Option<Version> {\n\tlet version_hpp = get_version_header(header_dir)?;\n\tlet mut major = None;\n\tlet mut minor = None;\n\tlet mut revision = None;\n\tlet mut line = String::with_capacity(256);\n\tlet mut reader = BufReader::new(File::open(version_hpp).ok()?);\n\twhile let Ok(bytes_read) = reader.read_line(&mut line) {\n\t\tif bytes_read == 0 {\n\t\t\tbreak;\n\t\t}\n\t\tif let Some(line) = line.strip_prefix(\"#define CV_VERSION_\") {\n\t\t\tlet mut parts = line.split_whitespace();\n\t\t\tif let (Some(ver_spec), Some(version)) = (parts.next(), parts.next()) {\n\t\t\t\tmatch ver_spec {\n\t\t\t\t\t\"MAJOR\" => {\n\t\t\t\t\t\tmajor = Some(version.parse().ok()?);\n\t\t\t\t\t}\n\t\t\t\t\t\"MINOR\" => {\n\t\t\t\t\t\tminor = Some(version.parse().ok()?);\n\t\t\t\t\t}\n\t\t\t\t\t\"REVISION\" => {\n\t\t\t\t\t\trevision = Some(version.parse().ok()?);\n\t\t\t\t\t}\n\t\t\t\t\t_ => {}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif major.is_some() && minor.is_some() && revision.is_some() {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tline.clear();\n\t}\n\tif let (Some(major), Some(minor), Some(revision)) = (major, minor, revision) {\n\t\tSome(Version::new(major, minor, revision))\n\t} else {\n\t\tNone\n\t}\n}\n\nfn make_modules_and_alises(\n\topencv_dir: &Path,\n\topencv_version: &Version,\n) -> Result<(Vec<String>, HashMap<&'static str, &'static str>)> {\n\tlet enable_modules = [\"core\".to_string()]\n\t\t.into_iter()\n\t\t.chain(env::vars_os().filter_map(|(k, _)| {\n\t\t\tk.to_str()\n\t\t\t\t.and_then(|s| s.strip_prefix(\"CARGO_FEATURE_\"))\n\t\t\t\t.map(str::to_lowercase)\n\t\t}))\n\t\t.collect::<HashSet<_>>();\n\n\tlet mut modules = files_with_extension(opencv_dir, \"hpp\")?\n\t\t.filter_map(|entry| {\n\t\t\tentry\n\t\t\t\t.file_stem()\n\t\t\t\t.and_then(OsStr::to_str)\n\t\t\t\t.filter(|&m| enable_modules.contains(m))\n\t\t\t\t.map(str::to_string)\n\t\t})\n\t\t.collect::<Vec<_>>();\n\n\tlet aliases = if OPENCV_BRANCH_5.matches(opencv_version)\n\t\t&& modules.iter().any(|x| x == \"features2d\")\n\t\t&& modules.iter().any(|x| x == \"features\")\n\t{\n\t\t// In OpenCV 5 `features2d` is a compatibility header that just includes `features.hpp`, and they don't work together\n\t\tHashMap::from([(\"features2d\", \"features\")])\n\t} else {\n\t\tHashMap::new()\n\t};\n\n\tmodules.sort_unstable();\n\tOk((modules, aliases))\n}\n\nfn emit_inherent_features(opencv_version: &Version) {\n\tif VersionReq::parse(\">=4.10\")\n\t\t.expect(\"Static version requirement\")\n\t\t.matches(opencv_version)\n\t{\n\t\tprintln!(\"cargo::rustc-cfg=ocvrs_has_inherent_feature_hfloat\");\n\t}\n}\n\nfn make_compiler(opencv: &Library, ffi_export_suffix: &str) -> cc::Build {\n\tlet mut out = cc::Build::new();\n\tout.cpp(true)\n\t\t.std(\"c++17\") // clang says error: 'auto' return without trailing return type; deduced return types are a C++14 extension\n\t\t.include(&*SRC_CPP_DIR)\n\t\t.include(&*OUT_DIR)\n\t\t.include(\".\")\n\t\t// OpenCV warnings\n\t\t.flag_if_supported(\"-Wno-deprecated-declarations\") // declarations marked as CV_DEPRECATED\n\t\t.flag_if_supported(\"-Wno-deprecated-copy\") // implicitly-declared â€˜constexpr cv::MatStep::MatStep(const cv::MatStep&)â€™ is deprecated\n\t\t.flag_if_supported(\"-Wno-unused-parameter\") // unused parameter â€˜srcâ€™ in virtual void cv::dnn::dnn4_v20211004::ActivationLayer::forwardSlice(const float*, float*, int, size_t, int, int) const\n\t\t.flag_if_supported(\"-Wno-sign-compare\") // comparison of integer expressions of different signedness: â€˜size_tâ€™ {aka â€˜long unsigned intâ€™} and â€˜intâ€™ in bool cv::dnn::dnn4_v20211004::isAllOnes(const MatShape&, int, int)\n\t\t.flag_if_supported(\"-Wno-comment\") // multi-line comment in include/opencv4/opencv2/mcc/ccm.hpp:73:25\n\t\t.flag_if_supported(\"-Wunused-but-set-variable\") // /usr/local/Cellar/opencv@3/3.4.16_10.reinstall/include/opencv2/flann/index_testing.h:249:11: warning: variable 'p1' set but not used\n\t\t// crate warnings\n\t\t.flag_if_supported(\"-Wno-unused-variable\") // â€˜cv::CV_VERSION_OCVRS_OVERRIDEâ€™ defined but not used\n\t\t.flag_if_supported(\"-Wno-ignored-qualifiers\") // type qualifiers ignored on function return type in const size_t cv_MatStep_operator___const_int(const cv::MatStep* instance, int i)\n\t\t.flag_if_supported(\"-Wno-return-type-c-linkage\") // warning: 'cv_aruco_CharucoBoard_getChessboardSize_const' has C-linkage specified, but returns user-defined type 'Result<cv::Size>' (aka 'Result<Size_<int> >') which is incompatible with C\n\t\t.flag_if_supported(\"-Wno-overloaded-virtual\");\n\n\topencv.include_paths.iter().for_each(|p| {\n\t\tout.include(p);\n\t\tif *TARGET_VENDOR_APPLE {\n\t\t\t// Weirdly causes issues on macOS: https://github.com/twistedfall/opencv-rust/issues/620\n\t\t\t// MSRV: replace with `reason` when MSRV is 1.81.0\n\t\t\t#[allow(clippy::needless_borrows_for_generic_args)]\n\t\t\tout.flag_if_supported(&format!(\"-F{}\", p.to_str().expect(\"Can't convert path to str\")));\n\t\t}\n\t});\n\n\tif out.get_compiler().is_like_msvc() {\n\t\tif let Ok(crt) = env::var(\"OPENCV_MSVC_CRT\") {\n\t\t\tif crt.trim().to_lowercase() == \"dynamic\" {\n\t\t\t\tout.static_crt(false);\n\t\t\t} else if crt.trim().to_lowercase() == \"static\" {\n\t\t\t\tout.static_crt(true);\n\t\t\t} else {\n\t\t\t\tpanic!(\"Invalid value of OPENCV_MSVC_CRT var, expected \\\"static\\\" or \\\"dynamic\\\"\");\n\t\t\t}\n\t\t}\n\t\tout.flag(\"-EHsc\")\n\t\t\t.flag(\"-bigobj\")\n\t\t\t.flag(\"-utf-8\")\n\t\t\t.flag(\"-wd4996\")\n\t\t\t.flag(\"-wd5054\") // deprecated between enumerations of different types\n\t\t\t.flag(\"-wd4190\") // has C-linkage specified, but returns UDT 'Result<cv::Rect_<int>>' which is incompatible with C\n\t\t\t.flag(\"-wd4702\") // core.cpp(386) : unreachable code\n\t\t\t.flag(\"-wd4100\") // unreferenced formal parameter\n\t\t\t.flag(\"-wd4127\") // conditional expression is constant\n\t\t\t.pic(false);\n\t} else {\n\t\tout.flag_if_supported(\"-Wa,-mbig-obj\");\n\t}\n\tout.define(\"OCVRS_FFI_EXPORT_SUFFIX\", ffi_export_suffix);\n\tout\n}\n\nfn setup_rerun() -> Result<()> {\n\tfor &v in AFFECTING_ENV_VARS.iter() {\n\t\tprintln!(\"cargo::rerun-if-env-changed={v}\");\n\t}\n\n\tlet include_exts = &[OsStr::new(\"cpp\"), OsStr::new(\"hpp\")];\n\tlet files_with_include_exts =\n\t\tfiles_with_predicate(&SRC_CPP_DIR, |p| p.extension().is_some_and(|e| include_exts.contains(&e)))?;\n\tfor path in files_with_include_exts {\n\t\tif let Some(path) = path.to_str() {\n\t\t\tprintln!(\"cargo::rerun-if-changed={path}\");\n\t\t}\n\t}\n\tprintln!(\"cargo::rerun-if-changed=Cargo.toml\");\n\tOk(())\n}\n\nfn build_wrapper(mut cc: cc::Build, modules: &[String], module_aliases: &HashMap<&str, &str>) {\n\teprintln!(\"=== Compiler information: {:#?}\", cc.get_compiler());\n\tfor module in modules.iter().filter(|m| !module_aliases.contains_key(m.as_str())) {\n\t\tcc.file(OUT_DIR.join(format!(\"{module}.cpp\")));\n\t\tlet manual_cpp = SRC_CPP_DIR.join(format!(\"manual-{module}.cpp\"));\n\t\tif manual_cpp.exists() {\n\t\t\tcc.file(manual_cpp);\n\t\t}\n\t}\n\tlet start = Instant::now();\n\tcc.compile(\"ocvrs\");\n\teprintln!(\"=== Total cpp build time: {:?}\", start.elapsed());\n}\n\nfn main() -> Result<()> {\n\tlet args = env::args_os().skip(1).peekable();\n\tif matches!(handle_running_binding_generator(args)?, GenerateFullBindings::Stop) {\n\t\treturn Ok(());\n\t}\n\n\tfor branch in [\"34\", \"4\", \"5\"] {\n\t\tprintln!(\"cargo::rustc-check-cfg=cfg(ocvrs_opencv_branch_{branch})\");\n\t}\n\tfor module in SUPPORTED_MODULES {\n\t\tprintln!(\"cargo::rustc-check-cfg=cfg(ocvrs_has_module_{module})\");\n\t}\n\t// MSRV: switch to #[expect] when MSRV is 1.81\n\t#[allow(clippy::single_element_loop)]\n\tfor inherent_feature in [\"hfloat\"] {\n\t\tprintln!(\"cargo::rustc-check-cfg=cfg(ocvrs_has_inherent_feature_{inherent_feature})\");\n\t}\n\n\tif matches!(handle_running_in_docsrs(), GenerateFullBindings::Stop) {\n\t\treturn Ok(());\n\t}\n\n\tlet pkg_version = env::var(\"CARGO_PKG_VERSION\").unwrap_or_else(|_| \"unknown_crate_version\".to_string());\n\teprintln!(\"=== Crate version: {pkg_version}\");\n\teprintln!(\"=== Environment configuration:\");\n\tfor v in AFFECTING_ENV_VARS.into_iter().chain(DEBUG_ENV_VARS) {\n\t\teprintln!(\"===   {v} = {:?}\", env::var_os(v));\n\t}\n\teprintln!(\"=== Enabled features:\");\n\tfor (mut name, val) in env::vars() {\n\t\tif val == \"1\" {\n\t\t\tconst PREFIX: &str = \"CARGO_FEATURE_\";\n\t\t\tif name.starts_with(PREFIX) {\n\t\t\t\tname.drain(..PREFIX.len());\n\t\t\t\teprintln!(\"===   {name}\");\n\t\t\t}\n\t\t}\n\t}\n\n\tlet opencv = Library::probe()?;\n\teprintln!(\"=== OpenCV library configuration: {opencv:#?}\");\n\tif OPENCV_BRANCH_5.matches(&opencv.version) {\n\t\tprintln!(\"cargo::rustc-cfg=ocvrs_opencv_branch_5\");\n\t} else if OPENCV_BRANCH_4.matches(&opencv.version) {\n\t\tprintln!(\"cargo::rustc-cfg=ocvrs_opencv_branch_4\");\n\t} else if OPENCV_BRANCH_34.matches(&opencv.version) {\n\t\tprintln!(\"cargo::rustc-cfg=ocvrs_opencv_branch_34\");\n\t} else {\n\t\tpanic!(\n\t\t\t\"Unsupported OpenCV version: {}, must be from 3.4, 4.x or 5.x branch\",\n\t\t\topencv.version\n\t\t);\n\t}\n\n\tlet opencv_header_dir = opencv\n\t\t.include_paths\n\t\t.iter()\n\t\t.find(|p| get_version_header(p).is_some())\n\t\t.expect(\"Discovered OpenCV include paths is empty or contains non-existent paths\");\n\n\tif let Some(header_version) = get_version_from_headers(opencv_header_dir) {\n\t\tif header_version != opencv.version {\n\t\t\tpanic!(\n\t\t\t\t\"OpenCV version from the headers: {header_version} (at {}) must match version of the OpenCV library: {} (include paths: {:?})\",\n\t\t\t\topencv_header_dir.display(),\n\t\t\t\topencv.version,\n\t\t\t\topencv.include_paths,\n\t\t\t);\n\t\t}\n\t\teprintln!(\n\t\t\t\"=== Found OpenCV version: {header_version} in headers located at: {}\",\n\t\t\topencv_header_dir.display()\n\t\t);\n\t} else {\n\t\tpanic!(\n\t\t\t\"Unable to find OpenCV version in headers located at: {}\",\n\t\t\topencv_header_dir.display()\n\t\t)\n\t}\n\n\tlet opencv_module_header_dir = get_module_header_dir(opencv_header_dir).expect(\"Can't find OpenCV module header dir\");\n\teprintln!(\n\t\t\"=== Detected OpenCV module header dir at: {}\",\n\t\topencv_module_header_dir.display()\n\t);\n\tlet (modules, module_aliases) = make_modules_and_alises(&opencv_module_header_dir, &opencv.version)?;\n\tfor module in &modules {\n\t\tprintln!(\"cargo::rustc-cfg=ocvrs_has_module_{module}\");\n\t}\n\n\temit_inherent_features(&opencv.version);\n\n\tsetup_rerun()?;\n\n\tlet ffi_export_suffix = format!(\"_{}\", pkg_version.replace(\".\", \"_\"));\n\tlet build_script_path = env::current_exe()?;\n\tlet binding_generator = BindingGenerator::new(&build_script_path, &modules, &module_aliases);\n\tbinding_generator.generate_wrapper(opencv_header_dir, &opencv, &ffi_export_suffix)?;\n\tlet cc = make_compiler(&opencv, &ffi_export_suffix);\n\tbuild_wrapper(cc, &modules, &module_aliases);\n\t// -l linker args should be emitted after -l static\n\topencv.emit_cargo_metadata();\n\tOk(())\n}\n"
        },
        {
          "name": "build",
          "type": "tree",
          "content": null
        },
        {
          "name": "ci",
          "type": "tree",
          "content": null
        },
        {
          "name": "cmake",
          "type": "tree",
          "content": null
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "release.toml",
          "type": "blob",
          "size": 0.212890625,
          "content": "allow-branch = [\"master\"]\ntag-name = \"v{{version}}\"\npre-release-replacements = [\n\t{ file = \"README.md\", search = \"opencv = \\\".*?\\\"\", replace = \"opencv = \\\"{{version}}\\\"\" },\n]\npre-release-hook = [\"tools/regen-docs.sh\"]\n"
        },
        {
          "name": "rustfmt.toml",
          "type": "blob",
          "size": 0.541015625,
          "content": "edition = \"2021\"\nfn_params_layout = \"Tall\"\nforce_explicit_abi = true\nhard_tabs = true\nmatch_arm_leading_pipes = \"Never\"\nmatch_block_trailing_comma = false\nmax_width = 130\nmerge_derives = true\nnewline_style = \"Unix\"\nremove_nested_parens = true\nreorder_imports = true\nreorder_modules = true\nsingle_line_if_else_max_width = 0\nshort_array_element_width_threshold = 10\ntab_spaces = 3\nuse_field_init_shorthand = true\nuse_small_heuristics = \"Default\"\nuse_try_shorthand = true\n\n# nightly options\nimports_granularity = \"Module\"\ngroup_imports = \"StdExternalCrate\"\n"
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "src_cpp",
          "type": "tree",
          "content": null
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        },
        {
          "name": "tools",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}