{
  "metadata": {
    "timestamp": 1736709132719,
    "page": 322,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjMzMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "eycorsican/leaf",
      "stars": 2467,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.9677734375,
          "content": "/target\n# Generated by Cargo\n# will have compiled files and executables\n/target/\n\n# Remove Cargo.lock from gitignore if creating an executable, leave it for libraries\n# More information here https://doc.rust-lang.org/cargo/guide/cargo-toml-vs-cargo-lock.html\nCargo.lock\n\n# These are backup files generated by rustfmt\n**/*.rs.bk\n# Swap\n[._]*.s[a-v][a-z]\n!*.svg  # comment out if you don't need vector files\n[._]*.sw[a-p]\n[._]s[a-rt-v][a-z]\n[._]ss[a-gi-z]\n[._]sw[a-p]\n\n# Session\nSession.vim\nSessionx.vim\n\n# Temporary\n.netrwhist\n*~\n# Auto-generated tag files\ntags\n# Persistent undo\n[._]*.un~\n# General\n.DS_Store\n.AppleDouble\n.LSOverride\n\n# Icon must end with two \\r\nIcon\r\r\n\n# Thumbnails\n._*\n\n# Files that might appear in the root of a volume\n.DocumentRevisions-V100\n.fseventsd\n.Spotlight-V100\n.TemporaryItems\n.Trashes\n.VolumeIcon.icns\n.com.apple.timemachine.donotpresent\n\n# Directories potentially created on remote AFP share\n.AppleDB\n.AppleDesktop\nNetwork Trash Folder\nTemporary Items\n.apdisk\n"
        },
        {
          "name": ".gitmodules",
          "type": "blob",
          "size": 0,
          "content": ""
        },
        {
          "name": "Cargo.toml",
          "type": "blob",
          "size": 0.28125,
          "content": "[workspace]\nmembers = [\n    \"leaf\",\n    \"leaf-cli\",\n    \"leaf-ffi\",\n    \"leaf-plugins/shadowsocks\",\n]\ndefault-members = [\"leaf-cli\"]\nresolver = \"2\"\n\n[profile.release]\nopt-level = 3\nlto = true\n# codegen-units = 1\npanic = \"abort\"\nstrip = \"symbols\"\n\n[profile.dev]\nopt-level = 0\ndebug = true\n"
        },
        {
          "name": "Cross.toml",
          "type": "blob",
          "size": 0.07421875,
          "content": "[build.env]\npassthrough = [\n    \"CFG_COMMIT_HASH\",\n    \"CFG_COMMIT_DATE\",\n]\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 11.0908203125,
          "content": "                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"[]\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright [yyyy] [name of copyright owner]\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n"
        },
        {
          "name": "Makefile",
          "type": "blob",
          "size": 0.3994140625,
          "content": ".PHONY: cli cli-dev test proto-gen\n\nCFG_COMMIT_HASH := $(shell git rev-parse HEAD | cut -c 1-7)\nexport CFG_COMMIT_HASH := $(CFG_COMMIT_HASH)\nCFG_COMMIT_DATE := $(shell git log --format=\"%ci\" -n 1)\nexport CFG_COMMIT_DATE := $(CFG_COMMIT_DATE)\n\ncli:\n\tcargo build -p leaf-cli --release\n\ncli-dev:\n\tcargo build -p leaf-cli\n\ntest:\n\tcargo test -p leaf -- --nocapture\n\nproto-gen:\n\t./scripts/regenerate_proto_files.sh\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 3.1162109375,
          "content": "![releases](https://github.com/eycorsican/leaf/workflows/releases/badge.svg)\n![ci](https://github.com/eycorsican/leaf/workflows/ci/badge.svg)\n\n# Leaf\n\nA versatile and efficient proxy framework with nice features suitable for various use cases.\n\n### Multiplexing\n\nThere are 2 transports for traffic multiplexing:\n\n* AMux: A multiplexd transport based on reliable streams suitable for TCP-based protocols and transports\n* QUIC: A UDP-based, multiplexed and secure transport\n\nThe benefit of `amux` is that we can reuse connections to reduce handshake overhead, it's not designed to be memory efficient because it focus only on reusing connections and not reducing the number of connections. While `quic` can reduce both handshake overhead and memory usage without suffering the head-of-line blocking issue.\n\n### Transparent Proxying\n\nThere's the TUN inbound for this purpose, which is also of fundamental importance for VPN-like proxying use cases such as VPN apps on iOS and Android.\n\n### High Availability\n\nOutbounds such as `failover`, `tryall`, `retry`, `random` and their combinations are able to flexibly deliver reqeusts to other outbounds based on their own metrics to achieve high availability or load balancing behaviors.\n\n### Request Routing\n\nRule-based request routing is also supported. Requests can be routed to different outbounds based on domain, IP, GEOIP and port rules.\n\n## Getting Started\n\n```ini\n[General]\ndns-server = 223.5.5.5\nsocks-interface = 127.0.0.1\nsocks-port = 1080\n\n[Proxy]\nDirect = direct\n```\n\nMore configuration examples can be found [here](https://github.com/eycorsican/leaf/blob/master/README.zh.md). If you want more flexible control on the config options, the JSON format should be used, up-to-date examples for the JSON format could be found in the [tests](https://github.com/eycorsican/leaf/blob/master/leaf/tests), both client-side and server-side config examples are presented there.\n\n## TUN Mode and Gateway Mode\n\n### TUN Mode\n\nThis syntax (`tun = auto`) is supported on macOS and Linux.\n\n```ini\n[General]\ndns-server = 223.5.5.5\ntun = auto\n\n[Proxy]\nDirect = direct\n```\n\n### Gateway Mode\n\nRunning in gateway mode requires a configuration with TUN mode enabled. Gateway mode can be enabled by an environment variable.\n\n```sh\nGATEWAY_MODE=true leaf -c config.conf\n```\n\n## Windows\n\n* [Maple](https://github.com/YtFlow/Maple): A lightweight Universal Windows proxy app based on leaf\n\n## iOS & Android\n\n<a href=\"https://play.google.com/store/apps/details?id=com.leaf.and.aleaf\"><img src=\"https://upload.wikimedia.org/wikipedia/commons/7/78/Google_Play_Store_badge_EN.svg\" height=\"70\"></a>\n\n<a href=\"https://apps.apple.com/us/app/leaf-lightweight-proxy/id1534109007\"><img src=\"https://upload.wikimedia.org/wikipedia/commons/3/3c/Download_on_the_App_Store_Badge.svg\" height=\"70\"></a>\n\n## Build\n\nInstall Rust: https://www.rust-lang.org/tools/install\n\nInstall GCC or Clang.\n\nClone & Build:\n```sh\ngit clone --recursive https://github.com/eycorsican/leaf.git\ncd leaf\ncargo build -p leaf-cli\n```\n\nRun:\n```sh\n./target/debug/leaf --help\n```\n\n## License\n\nThis project is licensed under the [Apache License 2.0](https://github.com/eycorsican/leaf/blob/master/LICENSE).\n"
        },
        {
          "name": "README.zh.md",
          "type": "blob",
          "size": 23.57421875,
          "content": "# Leaf\n\nLeaf 是一个轻量且快速的代理工具。\n\n## 目录\n\n- [Downloads](#downloads)\n- [iOS TestFlight](#ios-testflight)\n- [conf](#conf)\n- [json](#json)\n- [Log](#log)\n- [DNS](#dns)\n- [inbounds](#inbounds)\n  * [http](#http)\n  * [socks](#socks)\n  * [trojan](#trojan)\n  * [ws](#ws)\n  * [amux](#amux)\n  * [chain](#chain)\n- [outbounds](#outbounds)\n  * [direct](#direct)\n  * [drop](#drop)\n  * [tls](#tls)\n  * [ws](#ws-1)\n  * [amux](#amux-1)\n  * [h2](#h2)\n  * [shadowsocks](#shadowsocks)\n  * [vmess](#vmess)\n  * [trojan](#trojan)\n  * [socks](#socks-1)\n  * [chain](#chain)\n  * [failover](#failover)\n  * [tryall](#tryall)\n  * [random](#random)\n  * [retry](#retry)\n- [Rules](#rules)\n  * [domain](#domain)\n  * [domainSuffix](#domainsuffix)\n  * [domainKeyword](#domainkeyword)\n  * [ip](#ip)\n  * [geoip](#geoip)\n  * [external](#external)\n    + [mmdb](#mmdb)\n    + [site](#site)\n- [Advanced Features](#advanced-features)\n  * [TUN inbound](#tun-inbound)\n\n## Downloads\n\nhttps://github.com/eycorsican/leaf/releases\n\n## iOS TestFlight\niOS TF 测试公开链接：https://testflight.apple.com/join/std0FFCS\n\n## conf\n\n```ini\n[General]\nloglevel = info\ndns-server = 114.114.114.114, 223.5.5.5\nalways-real-ip = tracker, apple.com\n\n# Local HTTP CONNECT proxy\ninterface = 127.0.0.1\nport = 1087\n\n# Local SOCKS5 proxy with UDP Associate support\nsocks-interface = 127.0.0.1\nsocks-port = 1086\n\n[Proxy]\nDirect = direct\nReject = reject\n\n# Shadowsocks\nSS = ss, 1.2.3.4, 8485, encrypt-method=chacha20-ietf-poly1305, password=123456\n\n# VMess\nVMess = vmess, my.domain.com, 8001, username=0eb5486e-e1b5-49c5-aa75-d15e54dfac9d\n\n# VMess over WebSocket over TLS (TLS + WebSocket + VMess)\nVMessWSS = vmess, my.domain.com, 443, username=0eb5486e-e1b5-49c5-aa75-d15e54dfac9d, ws=true, tls=true, ws-path=/v2\n\n# Trojan (with TLS)\nTrojan = trojan, 4.3.2.1, 443, password=123456, sni=www.domain.com\n\n# Trojan over WebSocket over TLS (TLS + WebSocket + Trojan)\nTrojanWS = trojan, 4.3.2.1, 443, password=123456, sni=www.domain.com, ws=true, ws-path=/abc\n\n# Trojan over amux streams which use WebSocket over TLS as the underlying connection (TLS + WebSocket + amux + Trojan)\ntls-ws-amux-trojan = trojan, www.domain.com, 443, password=112358, tls=true, ws=true, ws-path=/amux, amux=true\ntls-ws-amux-trojan2 = trojan, 1.0.0.1, 443, password=123456, sni=www.domain.com, ws=true, ws-path=/amux, ws-host=www.domain.com, amux=true, amux-max=16, amux-con=1\n\n[Proxy Group]\n# fallback 等效于 failover\nFallback = fallback, Trojan, VMessWSS, SS, interval=600, timeout=5\n\n# url-test 等效于 failover=false 的 failover\nUrlTest = url-test, Trojan, VMessWSS, SS, interval=600, timeout=5\n\nFailover = failover, Trojan, VMessWSS, SS, health-check=true, check-interval=600, fail-timeout=5, failover=true\nTryall = tryall, Trojan, VMessWSS, delay-base=0\nRandom = random, Trojan, VMessWSS\n\n[Rule]\n# 执行文件目录当中必需有 `site.dat` 文件\nEXTERNAL, site:category-ads-all, Reject\n\n# 也可以指定 `dat` 文件所在绝对路径，不支持相对路径\nEXTERNAL, site:/tmp/geosite.dat:category-ads-all, Reject\n\nIP-CIDR, 8.8.8.8/32, Fallback\nDOMAIN, www.google.com, Fallback\nDOMAIN-SUFFIX, google.com, Fallback\nDOMAIN-KEYWORD, google, Fallback\n\n# 等效于 EXTERNAL, mmdb:us, Fallback\nGEOIP, us, Fallback\n\nEXTERNAL, site:geolocation-!cn, Fallback\n\n# 执行文件目录当中必需有 `geo.mmdb` 文件\nEXTERNAL, mmdb:us, Fallback\n\nFINAL, Direct\n\n[Host]\n# 对指定域名返回一个或多个静态 IP\nexample.com = 192.168.0.1, 192.168.0.2\n```\n\n在 [AppStore](https://apps.apple.com/us/app/leaf-lightweight-proxy/id1534109007) 或 [TestFlight](https://testflight.apple.com/join/std0FFCS) （都可以免费下载到）上的 Leaf 中，版本 `1.1 (8)` 及以上，`conf` 格式除了以上设置以外还支持一个 `[On Demand]` 配置，这是完全是一个 iOS 方面的功能，跟本 leaf 项目关系不大，它不涉及任何 Rust 代码，但为了方便查看也在这写下。\n\n下面规则表示连接 `OpenWrt` WiFi 信号时断开 VPN，其它任何情况都连着 VPN，典型的使用场景是 OpenWrt 是一个有透明代理的无线信号：\n\n```ini\n[On Demand]\n# 表示如果当前连接到 wifi 且 ssid 名为 OpenWrt，则断开 VPN\nDISCONNECT, ssid=OpenWrt, interface-type=wifi\n# 无条件地连接 VPN\nCONNECT\n```\n\n规则有两种 `CONNECT` 和 `DISCONNECT` ，匹配条件支持两种 `ssid` 和 `interface-type`，`ssid` 可以是以 `:` 分隔的 ssid 名称列表，`interface-type` 只能是以下 3 个值中的一个：`wifi`, `cellular`, `any`。规则不带任何匹配条件表示无条件执行。\n\n## json\n\nJSON 配置文件目前不考虑兼容性，每个版本都可能会变。\n\n```json\n{\n    \"log\": {\n        \"level\": \"info\"\n    },\n    \"dns\": {\n        \"servers\": [\n            \"1.1.1.1\",\n            \"8.8.8.8\"\n        ],\n        \"hosts\": {\n            \"example.com\": [\n                \"192.168.0.1\",\n                \"192.168.0.2\"\n            ],\n            \"server.com\": [\n                \"192.168.0.3\"\n            ]\n        }\n    },\n    \"inbounds\": [\n        {\n            \"address\": \"127.0.0.1\",\n            \"port\": 1087,\n            \"protocol\": \"http\"\n        },\n        {\n            \"address\": \"127.0.0.1\",\n            \"port\": 1086,\n            \"protocol\": \"socks\"\n        }\n    ],\n    \"outbounds\": [\n        {\n            \"protocol\": \"failover\",\n            \"settings\": {\n                \"actors\": [\n                    \"vmess_out\",\n                    \"trojan_out\"\n                ]\n            },\n            \"tag\": \"failover_out\"\n        },\n        {\n            \"protocol\": \"chain\",\n            \"settings\": {\n                \"actors\": [\n                    \"vmess_tls\",\n                    \"vmess_ws\",\n                    \"vmess\"\n                ]\n            },\n            \"tag\": \"vmess_out\"\n        },\n        {\n            \"protocol\": \"tls\",\n            \"tag\": \"vmess_tls\"\n        },\n        {\n            \"protocol\": \"ws\",\n            \"settings\": {\n                \"path\": \"/v2\"\n            },\n            \"tag\": \"vmess_ws\"\n        },\n        {\n            \"protocol\": \"vmess\",\n            \"settings\": {\n                \"address\": \"server.com\",\n                \"port\": 443,\n                \"uuid\": \"89ee4e17-aaad-49f6-91c4-6ea5990206bd\"\n            },\n            \"tag\": \"vmess\"\n        },\n        {\n            \"protocol\": \"chain\",\n            \"settings\": {\n                \"actors\": [\n                    \"trojan_tls\",\n                    \"trojan\"\n                ]\n            },\n            \"tag\": \"trojan_out\"\n        },\n        {\n            \"protocol\": \"tls\",\n            \"tag\": \"trojan_tls\"\n        },\n        {\n            \"protocol\": \"trojan\",\n            \"settings\": {\n                \"address\": \"server.com\",\n                \"password\": \"112358\",\n                \"port\": 443\n            },\n            \"tag\": \"trojan\"\n        },\n        {\n            \"protocol\": \"shadowsocks\",\n            \"settings\": {\n                \"address\": \"x.x.x.x\",\n                \"method\": \"chacha20-ietf-poly1305\",\n                \"password\": \"123456\",\n                \"port\": 8389\n            },\n            \"tag\": \"shadowsocks_out\"\n        },\n        {\n            \"protocol\": \"socks\",\n            \"settings\": {\n                \"address\": \"x.x.x.x\",\n                \"port\": 1080\n            },\n            \"tag\": \"socks_out\"\n        },\n        {\n            \"protocol\": \"direct\",\n            \"tag\": \"direct_out\"\n        },\n        {\n            \"protocol\": \"drop\",\n            \"tag\": \"drop_out\"\n        }\n    ],\n    \"rules\": [\n        {\n            \"ip\": [\n                \"8.8.8.8\",\n                \"8.8.4.4\"\n            ],\n            \"target\": \"failover_out\"\n        },\n        {\n            \"domain\": [\n                \"www.google.com\"\n            ],\n            \"target\": \"failover_out\"\n        },\n        {\n            \"domainSuffix\": [\n                \"google.com\"\n            ],\n            \"target\": \"failover_out\"\n        },\n        {\n            \"domainKeyword\": [\n                \"google\"\n            ],\n            \"target\": \"failover_out\"\n        },\n        {\n            \"external\": [\n                \"site:cn\"\n            ],\n            \"target\": \"direct_out\"\n        },\n        {\n            \"external\": [\n                \"mmdb:cn\"\n            ],\n            \"target\": \"direct_out\"\n        }\n    ]\n}\n```\n\n## Log\n\n```json\n\"log\": {\n    \"level\": \"info\"\n}\n```\n\nlevel 可以是 trace, debug, info, warn, error\n\n## DNS\n\n```json\n\"dns\": {\n    \"servers\": [\n        \"114.114.114.114\",\n        \"1.1.1.1\"\n    ],\n    \"hosts\": {\n        \"example.com\": [\n            \"192.168.0.1\",\n            \"192.168.0.2\"\n        ],\n        \"server.com\": [\n            \"192.168.0.3\"\n        ]\n    }\n}\n```\n\nDNS 用于 `direct` outbound 请求的域名解析，以及其它 outbound 中代理服务器地址的解析（如果代理服务器地址是 IP，则不需要解析）。`servers` 是 DNS 服务器列表，`hosts` 是静态 IP。\n\n\n作为 `hosts` 的使用例子，以下两个配置在效果上是相同的（因为用 json 配置会很长，这里用 conf 表达）：\n\n```ini\n[Proxy]\nProxy = trojan, www.domain.com, 443, password=123456, ws=true, ws-path=/abc\n[Host]\nwww.domain.com = 1.2.3.4\n```\n\n```ini\n[Proxy]\nProxy = trojan, 1.2.3.4, 443, password=123456, ws=true, ws-path=/abc, sni=www.domain.com\n```\n\n而 `hosts` 还可以指定多个 IP：\n\n```ini\n[Host]\nwww.domain.com = 1.2.3.4, 5.6.7.8\n```\n\n## inbounds\n\n```json\n\"inbounds\": [\n    {\n        ...\n    },\n    {\n        ...\n    }\n]\n```\n\ninbounds 是一个数组，每一项可以是以下：\n\n### http\n\n```json\n{\n    \"protocol\": \"http\",\n    \"address\": \"127.0.0.1\",\n    \"port\": 1087\n}\n```\n\n支持 HTTP Connect。\n\n### socks\n\n```json\n{\n    \"protocol\": \"socks\",\n    \"address\": \"127.0.0.1\",\n    \"port\": 1086\n}\n```\n\n默认支持 UDP。\n\n### trojan\n\n```json\n{\n    \"protocol\": \"trojan\",\n    \"address\": \"127.0.0.1\",\n    \"port\": 10086,\n    \"settings\": {\n        \"password\": \"123456\"\n    }\n}\n```\n\n### ws\n\nWebSocket 传输，一般在 `chain` 叠加到其它代理协议上。\n\n```json\n{\n    \"protocol\": \"ws\",\n    \"settings\": {\n        \"path\": \"/abc\"\n    }\n}\n```\n\n### amux\n\n`amux` 多路复用传输，可以在一个可靠的连接上建立多个可靠流传输。\n\n**`amux` 目前不提供版本间兼容。**\n\n```json\n{\n    \"protocol\": \"amux\",\n    \"settings\": {\n        \"actors\": [\n             \"tls\",\n             \"ws\"\n        ]\n    }\n}\n```\n\n- `actors` 指定底层传输，空值表示用 TCP\n\n### chain\n\n`chain` 可以对多个协议进行叠加。\n\n```json\n{\n    \"protocol\": \"chain\",\n    \"address\": \"127.0.0.1\",\n    \"port\": 10086,\n    \"settings\": {\n        \"actors\": [\n            \"ws_out\",\n            \"trojan_out\"\n        ]\n    }\n}\n```\n\n例如这是一个 WebSocket + Trojan 配置：\n\n```json\n\"inbounds\": [\n    {\n        \"protocol\": \"chain\",\n        \"tag\": \"ws_trojan_in\",\n        \"address\": \"127.0.0.1\",\n        \"port\": 4003,\n        \"settings\": {\n            \"actors\": [\n                \"ws_in\",\n                \"trojan_in\"\n            ]\n        }\n    },\n    {\n        \"protocol\": \"ws\",\n        \"tag\": \"ws_in\",\n        \"settings\": {\n            \"path\": \"/abc\"\n        }\n    },\n    {\n        \"protocol\": \"trojan\",\n        \"tag\": \"trojan_in\",\n        \"settings\": {\n            \"password\": \"12345\"\n        }\n    }\n]\n```\n\n注意上面配置示例没有 TLS，一般可以交给 nginx 来处理。\n\n## outbounds\n\n支持常见的代理协议比如 Shadowsocks、VMess、Trojan，以及 TLS 和 WebSocket 传输，另外有四个组合类型的 outbound，其中 `chain` 可以对各种代理和传输协议进行任意组合。\n\n```json\n\"outbounds\": [\n    {\n        ...\n    },\n    {\n        ...\n    }\n]\n```\n\noutbounds 是一个数组，每一项可以是以下：\n\n### direct\n\n直连出口，请求将从本机直接发往目标，不经任何代理。\n\n```json\n{\n    \"protocol\": \"direct\",\n    \"tag\": \"direct_out\"\n}\n```\n\n### drop\n\n拦截请求。\n\n```json\n{\n    \"protocol\": \"drop\",\n    \"tag\": \"drop_out\"\n}\n```\n\n### tls\n\nTLS 传输，一般用来叠加到其它代理或传输协议上。\n\n```json\n{\n    \"protocol\": \"tls\",\n    \"settings\": {\n        \"serverName\": \"server.com\",\n        \"alpn\": [\"http/1.1\"]\n    },\n    \"tag\": \"tls_out\"\n}\n```\n\n如果 `serverName` 为空，会尝试从下层协议获取。\n\n### ws\n\nWebSocket 传输，一般用来叠加到其它代理或传输协议上。\n\n```json\n{\n    \"protocol\": \"ws\",\n    \"settings\": {\n        \"path\": \"/v2\",\n        \"headers\": {\n            \"Host\": \"server.com\"\n        }\n    },\n    \"tag\": \"ws_out\"\n}\n```\n\n`headers` 是一个字典，可以包含任意数量的 KV 对。`Host` 不指定的话会尝试从下层协议获取。\n\n### amux\n\n`amux` 多路复用传输，可以在一个可靠的连接上建立多个可靠流传输。\n\n**`amux` 目前不提供版本间兼容。**\n\n```json\n{\n    \"protocol\": \"amux\",\n    \"settings\": {\n        \"actors\": [\n             \"tls\",\n             \"ws\"\n        ],\n        \"address\": \"tls.server.com\",\n        \"port\": 443,\n        \"maxAccepts\": 8,\n        \"concurrency\": 2\n    }\n}\n```\n\n- `actors` 指定底层传输，空值表示用 TCP\n- `address` 底层传输的连接地址\n- `port` 端口\n- `maxAccepts` 指定单个底层连接最多可建立流的数量\n- `concurrency` 指定单个底层连接并发流数量\n\n`amux` 是一个非常简单的多路复用传输协议，所有流数量的传输都是以 FIFO 方式进行，设计上依赖 `maxAccepts` 和 `concurrency` 两个参数对传输性能进行控制。\n\n### h2\n\nHTTP2 传输，一般需要配合 tls 一起使用，tls 需要配置 h2 作为 alpn。\n\n```json\n\"outbounds\": [\n    {\n        \"protocol\": \"chain\",\n        \"settings\": {\n            \"actors\": [\n                \"vmess_tls\",\n                \"vmess_h2\",\n                \"vmess\"\n            ]\n        },\n        \"tag\": \"vmess_out\"\n    },\n    {\n        \"protocol\": \"tls\",\n        \"settings\": {\n            \"serverName\": \"server.com\",\n            \"alpn\": [\"h2\"]\n        },\n        \"tag\": \"vmess_tls\"\n    },\n    {\n        \"protocol\": \"h2\",\n        \"settings\": {\n            \"host\": \"server.com\",\n            \"path\": \"/v2\"\n        },\n        \"tag\": \"vmess_h2\"\n    },\n    {\n        \"protocol\": \"vmess\",\n        \"settings\": {\n            \"address\": \"server.com\",\n            \"port\": 443,\n            \"uuid\": \"89ee4e17-aaad-49f6-91c4-6ea5990206bd\"\n        },\n        \"tag\": \"vmess\"\n    }\n]\n```\n\n### shadowsocks\n\n```json\n{\n    \"protocol\": \"shadowsocks\",\n    \"settings\": {\n        \"address\": \"x.x.x.x\",\n        \"method\": \"chacha20-ietf-poly1305\",\n        \"password\": \"123456\",\n        \"port\": 8389\n    },\n    \"tag\": \"shadowsocks_out\"\n}\n```\n\n`method`：\n- chacha20-ietf-poly1305\n- aes-128-gcm\n- aes-256-gcm\n\n### vmess\n\n```json\n{\n    \"protocol\": \"vmess\",\n    \"settings\": {\n        \"address\": \"server.com\",\n        \"port\": 10086,\n        \"uuid\": \"89ee4e17-aaad-49f6-91c4-6ea5990206bd\",\n        \"security\": \"chacha20-ietf-poly1305\"\n    },\n    \"tag\": \"vmess\"\n}\n```\n\n`security`：\n- chacha20-ietf-poly1305\n- aes-128-gcm\n\n### trojan\n\n`trojan` outbound 只包含未经 TLS 加密的代理协议，通常还需要利用 `chain` 对其叠加一层 `tls` 才能和正常的 trojan 服务器通讯。\n\n```json\n{\n    \"protocol\": \"trojan\",\n    \"settings\": {\n        \"address\": \"server.com\",\n        \"password\": \"112358\",\n        \"port\": 443\n    },\n    \"tag\": \"trojan_out\"\n}\n```\n\n### socks\n\n```json\n{\n    \"protocol\": \"socks\",\n    \"settings\": {\n        \"address\": \"1.2.3.4\",\n        \"port\": 1080\n    },\n    \"tag\": \"socks_out\"\n}\n```\n\n`socks` 不支持用户密码认证。\n\n### chain\n\n`chain` outbound 可以对任意协议进行叠加，主要用途是在某个代理协议上叠加 tls、ws 等传输，以及配置代理链。\n\n这是一个典型的 TLS + WebSocket + VMess 配置：\n\n```json\n\"outbounds\": [\n    {\n        \"protocol\": \"chain\",\n        \"settings\": {\n            \"actors\": [\n                \"vmess_tls\",\n                \"vmess_ws\",\n                \"vmess\"\n            ]\n        },\n        \"tag\": \"vmess_out\"\n    },\n    {\n        \"protocol\": \"tls\",\n        \"tag\": \"vmess_tls\"\n    },\n    {\n        \"protocol\": \"ws\",\n        \"settings\": {\n            \"path\": \"/v2\"\n        },\n        \"tag\": \"vmess_ws\"\n    },\n    {\n        \"protocol\": \"vmess\",\n        \"settings\": {\n            \"address\": \"server.com\",\n            \"port\": 443,\n            \"uuid\": \"89ee4e17-aaad-49f6-91c4-6ea5990206bd\"\n        },\n        \"tag\": \"vmess\"\n    }\n]\n```\n\n如果有多个服务器，可以配置一个代理链，请求将沿着代理链传输后到达目标：\n\n> 客户端 -> ss1 -> ss2 -> 目标\n\n```json\n\"outbounds\": [\n    {\n        \"protocol\": \"chain\",\n        \"settings\": {\n            \"actors\": [\n                \"ss1\",\n                \"ss2\"\n            ]\n        },\n        \"tag\": \"ss_chain_out\"\n    },\n    {\n        \"protocol\": \"shadowsocks\",\n        \"settings\": {\n            \"address\": \"1.1.1.1\",\n            \"method\": \"chacha20-ietf-poly1305\",\n            \"password\": \"123456\",\n            \"port\": 1111\n        },\n        \"tag\": \"ss1\"\n    },\n    {\n        \"protocol\": \"shadowsocks\",\n        \"settings\": {\n            \"address\": \"2.2.2.2\",\n            \"method\": \"chacha20-ietf-poly1305\",\n            \"password\": \"123456\",\n            \"port\": 2222\n        },\n        \"tag\": \"ss2\"\n    }\n]\n```\n\n### failover\n\n```json\n{\n    \"protocol\": \"failover\",\n    \"settings\": {\n        \"actors\": [\n            \"vmess_out\",\n            \"trojan_out\"\n        ],\n        \"failTimeout\": 4,\n        \"healthCheck\": true,\n        \"checkInterval\": 300,\n        \"failover\": true,\n        \"fallbackCache\": false,\n        \"cacheSize\": 256,\n        \"cacheTimeout\": 60\n    },\n    \"tag\": \"failover_out\"\n}\n```\n\n向列表中的 outbound 逐个发送请求，直到找到一个可用的 outbound，可选参数有\n\n- `failTimeout` 握手超时，包括 TCP 握手及相应代理协议握手的时间\n- `healthCheck` 如果为 `true`，则对列表中的 outbound 定时做健康检查，并按延迟重新排序\n- `checkInterval` 健康检查间隔\n- `failover` 如果为 `false`，则只取一个 outbound 发送请求，失败也不会尝试其它 outbound\n- `fallbackCache` 如果为 `true`，则对 fallback outbound 的成功请求作记录缓存，后续同样请求直接使用已缓存的 outbound\n- `cacheSize` fallback cache 大小\n- `cacheTimeout` fallback cache 缓存时间，单位分钟\n\n`failover` 的 actors 里面可以包含另一个 `failover` outbound，可以实现非常灵活的多级负载分配机制。\n\n`fallbackCache` 功能的初衷是让 `failover` 能够实现自动检测需要代理请求的机制，把一个 `direct` 和任意数量的其它 outbound 放到 `failover` 中，`direct` 放第一位，并禁用 `healthCheck`，启用 `fallbackCache`，那 `failover` 就会先尝试 `direct`，如果失败，自动切换使用其它 outbound，并且记录缓存下来，下一个同样请求直接跳过 `direct` 使用对应 outbound，但有个缺陷是它只能检测 TCP 连接超时或连接错误的请求。所谓 fallback outbound 就是 `failover` actors 里面第一个 outbound 失败后，所用到的后续任意成功的某个 outbound。\n\n### tryall\n\n```json\n{\n    \"protocol\": \"tryall\",\n    \"settings\": {\n        \"actors\": [\n            \"trojan_out\",\n            \"vmess_out\"\n        ],\n        \"delayBase\": 0\n    },\n    \"tag\": \"tryall_out\"\n}\n```\n\n向列表中的所有 outbound 同时发起代理请求，选取握手成功最快的 outbound，可选参数有\n\n- `delayBase` 延时基数，如果大于 0，则代理请求会延迟 delayBase * index 毫秒，index 从 0 起，每个 outbound 递增 1\n\n### random\n\n```json\n{\n    \"protocol\": \"random\",\n    \"settings\": {\n        \"actors\": [\n            \"trojan_out\",\n            \"vmess_out\"\n        ]\n    },\n    \"tag\": \"random\"\n}\n```\n\n从列表中随机选一个 outbound 发送请求。\n\n### retry\n\n```json\n{\n    \"protocol\": \"retry\",\n    \"settings\": {\n        \"actors\": [\n            \"trojan_out\",\n            \"vmess_out\"\n        ],\n        \"attempts\": 2,\n    },\n    \"tag\": \"retry\"\n}\n```\n\n可以对 outbound 列表进行多次重试。\n\n## Rules\n\n规则方面跟 V2Ray 差不多，只是把域名规则展开成 `domain`, `domainSuffix`, `domainKeyword`。\n\n```json\n\"rules\": [\n    {\n        ...\n    },\n    {\n        ...\n    }\n]\n```\n\n`rules` 是一个数组，每一项可以是以下：\n\n### domain\n\n匹配整个域名。\n\n```json\n{\n    \"domain\": [\n        \"www.google.com\"\n    ],\n    \"target\": \"failover_out\"\n}\n```\n\n### domainSuffix\n\n匹配子域名，虽然名字是 `Suffix`，但只匹配子域名，即 `google.com` 匹配 `www.google.com`，但不匹配 `wwwgoogle.com`。\n\n```json\n{\n    \"domainSuffix\": [\n        \"google.com\"\n    ],\n    \"target\": \"failover_out\"\n}\n```\n\n### domainKeyword\n\n匹配域名关键字。\n\n```json\n{\n    \"domainKeyword\": [\n        \"google\"\n    ],\n    \"target\": \"failover_out\"\n}\n```\n\n### ip\n\n匹配 IP 或 IP-CIDR。\n\n```json\n{\n    \"ip\": [\n        \"8.8.8.8/32\",\n        \"8.8.4.4\"\n    ],\n    \"target\": \"failover_out\"\n}\n```\n\n### geoip\n\n可执行文件目录中必需有 `geo.mmdb` 文件存在。\n\n```json\n{\n    \"geoip\": [\n        \"us\",\n        \"jp\"\n    ],\n    \"target\": \"failover_out\"\n}\n```\n\n### external\n\n`external` 规则可以从外部文件加载规则，支持两种格式\n\n```json\n{\n    \"external\": [\n        \"mmdb:us\",\n    ],\n    \"target\": \"failover_out\"\n}\n```\n\n```json\n{\n    \"external\": [\n        \"site:cn\",\n    ],\n    \"target\": \"direct_out\"\n}\n```\n\n#### mmdb\n\nMaxMind 的 mmdb 格式，可以有如下形式：\n\n- `mmdb:TAG` 假设 mmdb 文件存在于可执行文件目录，并且文件名为 `geo.mmdb`\n- `mmdb:FILENAME:TAG` 假设 mmdb 文件存在于可执行文件目录，文件名为 `FILENAME`，文件名包含后缀。\n- `mmdb:PATH:TAG` 指写 mmdb 文件的绝对路径为 `PATH`，文件名包含后缀。\n\n#### site\n\nV2Ray 的 `dat` 文件格式，可以有如下形式：\n\n- `site:TAG` 同 mmdb，文件名为 `site.dat`\n- `site:FILENAME:TAG` 同 mmdb\n- `site:PATH:TAG` 同 mmdb\n\n## Advanced Features\n\n### TUN inbound\n\n在 macOS 和 Linux 上还支持 TUN inbound\n\n```json\n\"inbounds\": [\n    {\n        \"protocol\": \"tun\",\n        \"settings\": {\n            \"name\": \"utun8\",\n            \"address\": \"10.10.0.2\",\n            \"netmask\": \"255.255.255.0\",\n            \"gateway\": \"10.10.0.1\",\n            \"mtu\": 1500,\n            \"fakeDnsInclude\": [\n                \"google\"\n            ]\n        },\n        \"tag\": \"tun_in\"\n    }\n]\n```\n\n参数\n\n- `name` 在 macOS 上必须是 `utun` 开头后加一个数字，在 Linux 上必须是 `tun` 开头后加一个数字\n- `address` `netmask` `gateway` `mtu` TUN 接口的一些参数\n- `fakeDnsInclude` 使用 TUN inbound 将默认使用 `FakeDNS` 功能，这个列表可以指定哪些域名会返回伪造 IP，以关键字方式匹配，未指定的域名将不受影响。\n- `fakeDnsExclude` 使用 TUN inbound 将默认使用 `FakeDNS` 功能，这个列表可以将某些域名排除在外，以关键字方式匹配，未指定的域名将会返回伪造的 IP。\n\n`fakeDnsInclude` 和 `fakeDnsExclude` 只能二选一，这个配置方式将来大概率会改。\n\n在 macOS 上还不能自动配置地址需要手动：sudo ifconfig utun7 10.10.0.2 netmask 255.255.255.0 10.10.0.1\n\n还需要手动配置路由表，具体可以参考 Mellow ：[macOS](https://github.com/mellow-io/mellow/blob/f71f6e54768ded3cfcc46bebb706d46cb8baac08/src/main.js#L702) [Linux](https://github.com/mellow-io/mellow/blob/f71f6e54768ded3cfcc46bebb706d46cb8baac08/src/helper/linux/config_route#L1)\n\n此外所有非组合类型的 outbound 必须正确配置一个 `bind` 地址，这是连接原网关的网卡的地址，即未连接 VPN 前网卡的 IP 地址：\n```json\n\"outbounds\": [\n    {\n        \"bind\": \"192.168.0.99\",\n        \"protocol\": \"shadowsocks\",\n        \"settings\": {\n            \"address\": \"x.x.x.x\",\n            \"method\": \"chacha20-ietf-poly1305\",\n            \"password\": \"123456\",\n            \"port\": 8389\n        },\n        \"tag\": \"shadowsocks_out\"\n    },\n    {\n        \"bind\": \"192.168.0.99\",\n        \"protocol\": \"direct\",\n        \"tag\": \"direct\"\n    }\n]\n```\n\n```json\n\"dns\": {\n    \"bind\": \"192.168.0.99\",\n    \"servers\": [\"1.1.1.1\"]\n}\n```\n"
        },
        {
          "name": "leaf-cli",
          "type": "tree",
          "content": null
        },
        {
          "name": "leaf-ffi",
          "type": "tree",
          "content": null
        },
        {
          "name": "leaf-plugins",
          "type": "tree",
          "content": null
        },
        {
          "name": "leaf",
          "type": "tree",
          "content": null
        },
        {
          "name": "scripts",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}