{
  "metadata": {
    "timestamp": 1736708974838,
    "page": 17,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjIw",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "bheisler/criterion.rs",
      "stars": 4754,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 0.1279296875,
          "content": "root = true\n\n[*]\nend_of_line = lf\ninsert_final_newline = true\ntrim_trailing_whitespace = true\ncharset = utf-8\nindent_style = space\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.0390625,
          "content": ".criterion\nCargo.lock\ntarget\n\n**/.*.sw*\n"
        },
        {
          "name": ".typos.toml",
          "type": "blob",
          "size": 0.69140625,
          "content": "# See the configuration reference at\n# https://github.com/crate-ci/typos/blob/master/docs/reference.md\n\n# Corrections take the form of a key/value pair. The key is the incorrect word\n# and the value is the correct word. If the key and value are the same, the\n# word is treated as always correct. If the value is an empty string, the word\n# is treated as always incorrect.\n\n# Match Identifier - Case Sensitive\n[default.extend-identifiers]\nNd = \"Nd\"\nthr = \"thr\"\n\n# Match Inside a Word - Case Insensitive\n[default.extend-words]\n\n[files]\n# Include .github, .cargo, etc.\nignore-hidden = false\n# /.git isn't in .gitignore, because git never tracks it.\n# Typos doesn't know that, though.\nextend-exclude = [\"/.git\"]\n"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 24.3369140625,
          "content": "# Changelog\n\nAll notable changes to this project will be documented in this file.\n\nThe format is based on [Keep a Changelog](http://keepachangelog.com/en/1.0.0/)\nand this project adheres to [Semantic Versioning](http://semver.org/spec/v2.0.0.html).\n\n## [Unreleased]\n- MSRV bumped to 1.70\n\n### Changed\n- The `real_blackbox` feature no longer has any impact. Criterion always uses `std::hint::black_box()` now.\n  Users of `criterion::black_box()` should switch to `std::hint::black_box()`.\n\n### Fixed\n\n- gnuplot version is now correctly detected when using certain Windows binaries/configurations that used to fail\n\n### Added\n\n- Async benchmarking with Tokio may be done via a `tokio::runtime::Handle`, not only a `tokio::runtime::Runtime`\n\n## [0.5.1] - 2023-05-26\n\n### Fixed\n - Quick mode (--quick) no longer crashes with measured times over 5 seconds when --noplot is not active\n\n## [0.5.0] - 2023-05-23\n\n### Changed\n- Replaced lazy_static dependency with once_cell\n- Improved documentation of the `html_reports` feature\n- Replaced atty dependency with is-terminal\n- MSRV bumped to 1.64\n- Upgraded clap dependency to v4\n- Upgraded tempfile dependency to v3.5.0\n\n### Fixed\n- Quick mode (`--quick`) no longer outputs 1ms for measured times over 5 seconds\n- Documentation updates\n\n## [0.4.0] - 2022-09-10\n\n### Removed\n\n- The `Criterion::can_plot` function has been removed.\n- The `Criterion::bench_function_over_inputs` function has been removed.\n- The `Criterion::bench_functions` function has been removed.\n- The `Criterion::bench` function has been removed.\n\n### Changed\n\n- HTML report hidden behind non-default feature flag: 'html_reports'\n- Standalone support (ie without cargo-criterion) feature flag: 'cargo_bench_support'\n- MSRV bumped to 1.57\n- `rayon` and `plotters` are optional (and default) dependencies.\n- Status messages ('warming up', 'analyzing', etc) are printed to stderr, benchmark results are printed to stdout.\n- Accept subsecond durations for `--warm-up-time`, `--measurement-time` and `--profile-time`.\n- Replaced serde_cbor with ciborium because the former is no longer maintained.\n- Upgrade clap to v3 and regex to v1.5.\n\n### Added\n\n- A `--discard-baseline` flag for discarding rather than saving benchmark results.\n- Formal support for benchmarking code compiled to web-assembly.\n- A `--quiet` flag for printing just a single line per benchmark.\n- A `Throughput::BytesDecimal` option for measuring throughput in bytes but printing them using\n  decimal units like kilobytes instead of binary units like kibibytes.\n\n### Fixed\n- When using `bench_with_input`, the input parameter will now be passed through `black_box` before\n  passing it to the benchmark.\n\n## [0.3.6] - 2022-07-06\n### Changed\n- MSRV bumped to 1.49\n- Symbol for microseconds changed from ASCII 'us' to unicode 'Âµs'\n- Documentation fixes\n- Clippy fixes\n\n## [0.3.5] - 2021-07-26\n\n### Fixed\n\n- Corrected `Criterion.toml` in the book.\n- Corrected configuration typo in the book.\n\n### Changed\n\n- Bump plotters dependency to always include a bug-fix.\n- MSRV bumped to 1.46.\n\n## [0.3.4] - 2021-01-24\n\n### Added\n\n- Added support for benchmarking async functions\n- Added `with_output_color` for enabling or disabling CLI output coloring programmatically.\n\n### Fixed\n\n- Criterion.rs will now give a clear error message in case of benchmarks that take zero time.\n- Added some extra code to ensure that every sample has at least one iteration.\n- Added a notice to the `--help` output regarding \"unrecognized option\" errors.\n- Increased opacity on violin charts.\n- Fixed violin chart X axis not starting at zero in the plotters backend.\n- Criterion.rs will now automatically detect the right output directory.\n\n### Deprecated\n\n- `Criterion::can_plot` is no longer useful and is deprecated pending deletion in 0.4.0.\n- `Benchmark` and `ParameterizedBenchmark` were already hidden from documentation, but are now\n  formally deprecated pending deletion in 0.4.0. Callers should use `BenchmarkGroup` instead.\n- `Criterion::bench_function_over_inputs`, `Criterion::bench_functions`, and `Criterion::bench` were\n  already hidden from documentation, but are now formally deprecated pending deletion in 0.4.0.\n  Callers should use `BenchmarkGroup` instead.\n- Three new optional features have been added; \"html_reports\", \"csv_output\" and\n  \"cargo_bench_support\". These features currently do nothing except disable a warning message at\n  runtime, but in version 0.4.0 they will be used to enable HTML report generation, CSV file\n  generation, and the ability to run in cargo-bench (as opposed to [cargo-criterion]).\n  \"cargo_bench_support\" is enabled by default, but \"html_reports\" and \"csv_output\"\n  are not. If you use Criterion.rs' HTML reports, it is recommended to switch to [cargo-criterion].\n  If you use CSV output, it is recommended to switch to [cargo-criterion] and use the\n  `--message-format=json` option for machine-readable output instead. A warning message will be\n  printed at the start of benchmark runs which do not have \"html_reports\" or \"cargo_bench_support\"\n  enabled, but because CSV output is not widely used it has no warning.\n\n[cargo-criterion]: https://github.com/bheisler/cargo-criterion\n\n## [0.3.3] - 2020-06-29\n\n### Added\n\n- Added `CRITERION_HOME` environment variable to set the directory for Criterion to store\n  its results and charts in.\n- Added support for [cargo-criterion]. The long-term goal here is to remove code from Criterion-rs\n  itself to improve compile times, as well as to add features to `cargo-criterion` that are\n  difficult to implement in Criterion-rs.\n- Add sampling mode option for benchmarks. This allows the user to change how Criterion.rs chooses\n  the iteration counts in each sample. By default, nothing will change for most benchmarks, but\n  very slow benchmarks will now run fewer iterations to fit in the desired number of samples.\n  This affects the statistics and plots generated.\n\n### Changed\n\n- The serialization format for some of the files has changed. This may cause your first benchmark\n  run after updating to produce errors, but they're harmless and will go away after running the\n  benchmarks once.\n\n### Fixed\n\n- Fixed a bug where the current measurement was not shown on the relative regression plot.\n- Fixed rare panic in the plotters backend.\n- Panic with a clear error message (rather than panicking messily later on) when the user sets the\n  group or function name to the empty string.\n- Escape single quotes in benchmark names when generating Gnuplot scripts.\n\n## [0.3.2] - 2020-04-26\n\n### Added\n\n- Added `?Sized` bound to benchmark parameter types, which allows dynamically sized types like\n  `&str` and `&[T]` to be used as benchmark parameters.\n- Added the `--output-format <format>` command-line option. If `--output-format bencher` is passed,\n  Criterion.rs will print its measurements in a format similar to that used by the `bencher` crate\n  or unstable `libtest` benchmarks, and using similar statistical measurements as well. Though this\n  provides less information than the default format, it may be useful for supporting tools which\n  parse this output format.\n- Added `--nocapture` argument. This argument does nothing, but prevents Criterion.rs from exiting\n  when running tests or benchmarks and allowing stdout output from other tests.\n\n### Fixed\n\n- Fixed panic when environment variables contains non-UTF8 characters.\n- Fixed panic when `CRITERION_DEBUG` or `CRITERION_TARGET_DIR` environment variables contain\n  non-UTF8 characters.\n\n## [0.3.1] - 2020-01-25\n\n### Added\n\n- Added new plotting backend using the `plotters` crate. Implementation generously provided by Hao\n  Hou, author of the `plotters` crate.\n- Added `--plotting-backend` command-line option to select the plotting backend. The existing\n  gnuplot backend will be used by default when available, and the plotters backend will be used when\n  gnuplot is not available or when requested.\n- Added `Criterion::plotting_backend()` function to configure the plotting backend in code.\n- Added `--load-baseline` command-line option to load a baseline for comparison\n  rather than measuring the current code\n- Benchmark filters can now be regular expressions.\n\n### Fixed\n\n- Fixed `fibonacci` functions.\n- Fixed `#[criterion]` benchmarks ignoring the command-line options.\n- Fixed incorrect scaling of the violin plots.\n- Don't print the recommended sample count if it's the same as the configured\n  sample count.\n- Fix potential panic when `nresamples` is set too low. Also added a warning\n  against setting `nresamples` too low.\n- Fixed issue where a slow outer closure would cause Criterion.rs to calculate\n  the wrong estimated time and number of iterations in the warm-up phase.\n\n## [0.3.0] - 2019-08-25\n\n### Added\n\n- Added support for plugging in custom measurements (eg. processor counters)\n  into Criterion.rs' measurement and analysis.\n- Added support for plugging in instrumentation for internal profilers such as\n  `cpuprofiler` which must be explicitly started and stopped within the profiled\n  process.\n- Added the `BenchmarkGroup` type, which supersedes `ParameterizedBenchmark`, `Benchmark`,\n  `Criterion::bench_functions`, `Criterion::bench_function_over_inputs`, and `Criterion::bench`.\n  `BenchmarkGroup` performs the same function as all of the above, but is cleaner to use and more\n  powerful and flexible. All of these types/functions are now soft-deprecated (meaning they're\n  hidden from the documentation and should not be used in new code). They will be fully deprecated\n  at some point in the 0.3.\\* series and removed in 0.4.0.\n- `iter_custom` - a \"timing loop\" that allows the caller to perform their own measurements. This is\n  useful for complex measurements that don't fit into the usual mode of calling a lambda in a loop.\n- If the benchmark cannot be completed in approximately the requested measurement time,\n  Criterion.rs will now print a suggested measurement time and sample size that would work.\n- Two new fields, `throughput_num` and `throughput_type` have been added to the `raw.csv` file.\n- Added command-line options to set the defaults for warm-up time, measurement-time, etc.\n\n### Changed\n\n- The `raw.csv` file format has been changed slightly. The `sample_time_nanos` field has been split\n  into `sample_measured_value` and `unit` fields to accommodate custom measurements.\n- Throughput has been expanded from u32 to u64 to accommodate very large input sizes.\n\n### Fixed\n\n- Fixed possible invalid file name error on Windows\n- Fixed potential case where data for two different benchmarks would be stored in the same directory.\n\n### Removed\n\n- Removed the `--measure-only` command-line argument; it was deprecated in favor of `--profile-time`\n  in 0.2.6.\n- External program benchmarks have been removed; they were deprecated in 0.2.6. The new\n  `iter_custom` timing loop can be used as a substitute; see `benches/external_process.rs` for an\n  example of this.\n\n### Deprecated\n\n- The `--test` argument is now deprecated. To test benchmarks, use `cargo test --benches`.\n\n## [0.2.11] - 2019-04-08\n\n### Added\n\n- Enabled automatic text-coloring on Windows.\n\n### Fixed\n\n- Fixed panic caused by outdated files after benchmark names or types were changed.\n- Reduced timing overhead of `Criterion::iter_batched/iter_batched_ref`.\n\n## [0.2.10] - 2019-02-09\n\n### Added\n\n- Added `iter_batched/iter_batched_ref` timing loops, which allow for setup (like\n  `iter_with_setup/iter_with_large_setup`) and exclude drop (like `iter_with_large_drop`) but\n  measure the runtime more accurately, use less memory and are more flexible.\n\n### Deprecated\n\n- `iter_with_setup/iter_with_large_setup` are now deprecated in favor of `iter_batched`.\n\n## [0.2.9] - 2019-01-24\n\n### Changed\n\n- Criterion.rs no longer depends on the default features of the `rand-core` crate. This fixes some\n  downstream crates which use `rand` in a `no_std` context.\n\n## [0.2.8] - 2019-01-20\n\n### Changed\n\n- Criterion.rs now uses `rayon` internally instead of manual `unsafe` code built with thread-scoped.\n- Replaced handlebars templates with [TinyTemplate](https://github.com/bheisler/TinyTemplate)\n- Merged `criterion-stats` crate into `criterion` crate. `criterion-stats` will no longer receive\n  updates.\n- Replaced or removed various other dependencies to reduce the size of Criterion.rs' dependency\n  tree.\n\n## [0.2.7] - 2018-12-29\n\n### Fixed\n\n- Fixed version numbers to prevent incompatibilities between `criterion` and `criterion-stats`\n  crates.\n\n## [0.2.6] - 2018-12-27 - Yanked\n\n### Added\n\n- Added `--list` command line option, which lists the benchmarks but does not run them, to match\n  `cargo test -- --list`.\n- Added README/CONTRIBUTING/LICENSE files to sub-crates.\n- Displays change in throughput in the command-line and HTML output as well as change in iteration\n  time.\n- Benchmarks with multiple functions and multiple values will now generate a per-value summary\n  report file in addition to the existing per-function one.\n- Added a `--profile-time` command-line argument which disables reporting and analysis and instead\n  simply iterates each benchmark for approximately the given number of seconds. This supersedes the\n  (now-deprecated) `--measure-only` argument.\n\n### Fixed\n\n- Functions passed to `Bencher::iter_with_large_setup` can now return output. This is necessary to\n  prevent the compiler from optimizing away the benchmark. This is technically a breaking change -\n  that function requires a new type parameter. It's so unlikely to break existing code that I\n  decided not to delay this for a breaking-change release.\n- Reduced measurement overhead for the `iter_with_large_setup` and `iter_with_drop` methods.\n- `criterion_group` and `criterion_main` macros no longer require the `Criterion` struct to be\n  explicitly imported.\n- Don't panic when `gnuplot --version` fails.\n- Criterion.rs macros no longer require user to `use criterion::Criterion;`\n- Criterion.rs no longer initializes a logger, meaning that it will no longer conflict with user\n  code which does.\n- Criterion.rs no longer fails to parse gnuplot version numbers like\n  `gnuplot 5.2 patchlevel 5a (Gentoo revision r0)`\n- Criterion.rs no longer prints an error message that gnuplot couldn't be found when chart\n  generation is disabled (either by `Criterion::without_plots`, `--noplot` or disabling the\n  HTML reports feature)\n- Benchmark names are now automatically truncated to 100 characters and a number may be added to\n  make them unique. This fixes a problem where gnuplot would crash if the title was extremely long,\n  and also improves the general usability of Criterion.rs.\n\n### Changed\n\n- Changed timing model of `iter_with_large_setup` to exclude time spent dropping values returned\n  by the routine. Time measurements taken with 0.2.6 using these methods may differ from those taken\n  with 0.2.5.\n- Benchmarks with multiple functions and multiple values will now appear as a table rather than a\n  tree in the benchmark index. This is to accommodate the new per-value summary reports.\n\n### Deprecated\n\n- Deprecated the `--measure-only` command-line-argument in favor of `--profile-time`. This will be\n  removed in 0.3.0.\n- External-program benchmarks are now deprecated. They will be removed in 0.3.0.\n- The `html_reports` cargo feature is now deprecated. This feature will become non-optional in 0.3.0.\n- Sample sizes less than 10 are deprecated and will be disallowed in 0.3.0.\n- This is not an exhaustive list - the full scope of changes in 0.3.0 is not yet determined. There\n  may be breaking changes that are not listed here.\n\n## [0.2.5] - 2018-08-27\n\n### Fixed\n\n- Fixed links from generated report files to documentation.\n- Fixed formatting for very large percentage changes (>1000%)\n- Sorted the benchmarks in the index report by name\n- Fixed case where benchmark ID with special characters would cause Criterion.rs to open the wrong\n  file and log an error message.\n- Fixed case where running `cargo clean; cargo bench -- <filter>` would cause Criterion.rs to log\n  an error message.\n- Fixed a GNUplot error message when sample size is very small.\n- Fixed several cases where Criterion.rs would generate invalid path names.\n- Fixed a bug where Criterion.rs would print an error if run with a filter that allowed no benchmarks and a clean target directory.\n- Fixed bug where some benchmarks didn't appear in the benchmark index report.\n- Criterion.rs now honors the `CARGO_TARGET_DIR` environment variable.\n\n### Added\n\n- Criterion.rs will generate a chart showing the effects of changes in input (or input size) for all\n  benchmarks with numeric inputs or throughput, not just for those which compare multiple functions.\n\n## [0.2.4] 2018-07-08\n\n### Added\n\n- Added a pair of flags, `--save-baseline` and `--baseline`, which change\n  how benchmark results are stored and compared. This is useful for\n  working against a fixed baseline(eg. comparing progress on an\n  optimization feature branch to the commit it forked from).\n  Default behavior of Criterion.rs is now `--save-baseline base`\n  which emulates the previous, user facing behavior.\n  - `--save-baseline` saves the benchmark results under the provided name.\n  - `--baseline` compares the results to a saved baseline.\n    If the baseline does not exist for a benchmark, an error is given.\n- Added user-guide documentation for baselines, throughput measurements and\n  plot configuration.\n- Added a flag, `--test`, which causes Criterion to execute the benchmarks once\n  without measuring or reporting the results. This is useful for checking that the\n  benchmarks run successfully in a CI setting.\n- Added a `raw.csv` file to the output which contains a stable, machine-readable\n  representation of the measurements taken by benchmarks. This enables users to\n  perform their own analysis or keep historical information without depending on\n  private implementation details.\n\n### Fixed\n\n- The `sample_size` method on the `Criterion`, `Benchmark` and\n  `ParameterizedBenchmark` structs has been changed to panic if the sample size\n  is less than 2. Other parts of the code require this and will panic if the\n  sample size is 1, so this is not considered to be a breaking change.\n- API documentation has been updated to show more-complete examples.\n- Certain characters will now be replaced with underscores when creating benchmark\n  directory paths, to avoid generating invalid or unexpected paths.\n\n## [0.2.3] - 2018-04-14\n\n### Fixed\n\n- Criterion.rs will now panic with a clear error message if the user attempts to run\n  a benchmark which doesn't call the `Bencher::iter` function or a related function,\n  rather than failing in an uncontrolled manner later.\n- Fixed broken links in some more summary reports.\n\n### Added\n\n- Added a `--measure-only` argument which causes the benchmark executable to run the\n  warmup and measurement and then move on to the next benchmark without analyzing or\n  saving data. This is useful to prevent Criterion.rs' analysis code from appearing\n  in profile data when profiling benchmarks.\n- Added an index report file at \"target/criterion/report/index.html\" which links to\n  the other reports for easy navigation.\n\n## [0.2.2] - 2018-03-25\n\n### Fixed\n\n- Fixed broken links in some summary reports.\n- Work around apparent rustc bug in >= 1.24.0.\n\n## [0.2.1] - 2018-02-24\n\n### Added\n\n- HTML reports are now a default Cargo feature. If you wish to disable HTML reports,\n  disable Criterion.rs' default features. Doing so will allow compatibility with\n  older Rust versions such as 1.20. If you wish to continue using HTML reports, you\n  don't need to do anything.\n- Added a summary report for benchmarks that compare multiple functions or different\n  inputs.\n\n### Changed\n\n- The plots and HTML reports are now generated in a `report` folder.\n\n### Fixed\n\n- Underscores in benchmark names will no longer cause subscripted characters to\n  appear in generated plots.\n\n## [0.2.0] - 2018-02-05\n\n### Added\n\n- Added `Criterion.bench` function, which accepts either a `Benchmark` or\n  `ParameterizedBenchmark`. These new structures allow for custom per-benchmark\n  configuration as well as more complex benchmark grouping (eg. comparing a Rust\n  function against an external program over a range of inputs) which was not\n  possible previously.\n- Criterion.rs can now report the throughput of the benchmarked code in units of\n  bytes or elements per second. See the `Benchmark.throughput` and\n  `ParameterizedBenchmark.throughput` functions for further details.\n- Criterion.rs now generates a basic HTML report for each benchmark.\n- Added `--noplot` command line option to disable plot generation.\n\n### Changed\n\n- The builder methods on the Criterion struct now take and return self by value\n  for easier chaining. Functions which configure a Criterion structure will need\n  to be updated accordingly, or will need to be changed to work with the\n  `Benchmark` or `ParameterizedBenchmark` types to do per-benchmark configuration\n  instead.\n- The closures taken by `Criterion.bench_*` must now have a `'static` lifetime.\n  This means that you may need to change your closures from `|bencher| {...}`\n  to `move |bencher| {...}`.\n- `Criterion.bench_functions` now takes `I` as an input parameter, not `&I`.\n- Input values must now implement `Debug` rather than `Display`.\n- The generated plots are stored in `target/criterion` rather than `.criterion`.\n\n### Removed\n\n- The hidden `criterion::ConfidenceInterval` and`criterion::Estimate` types are\n  no longer publicly accessible.\n- The `Criterion.summarize` function has been removed.\n\n### Fixed\n\n- Fixed the relative mean and median reports.\n- Fixed panic while summarizing benchmarks.\n\n## [0.1.2] - 2018-01-12\n\n### Changed\n\n- Criterion.rs is now stable-compatible!\n- Criterion.rs now includes its own stable-compatible `black_box` function.\n  Some benchmarks may now be affected by dead-code-elimination where they\n  previously weren't and may have to be updated.\n- Criterion.rs now uses `serde` to save results. Existing results files will\n  be automatically removed when benchmarks are run.\n- Redesigned the command-line output to highlight the important information\n  and reduce noise.\n\n### Added\n\n- Running benchmarks with the variable \"CRITERION_DEBUG\" in the environment will\n  cause Criterion.rs to generate extra debug output and save the gnuplot scripts\n  alongside the generated plots.\n\n### Fixed\n\n- Don't panic on IO errors or gnuplot failures\n- Fix generation of invalid gnuplot scripts when benchmarking over inputs and inputs include values <= 0.\n- Bug where benchmarks would run one sample fewer than was configured.\n\n### Removed\n\n- Generated plots will no longer use log-scale.\n\n## [0.1.1] - 2017-12-12\n\n### Added\n\n- A changelog file.\n- Added a chapter to the book on how Criterion.rs collects and analyzes data.\n- Added macro rules to generate a test harness for use with `cargo bench`.\n  Benchmarks defined without these macros should continue to work.\n- New contribution guidelines\n- Criterion.rs can selectively run benchmarks. See the Command-line page for\n  more details\n\n## 0.1.0 - 2017-12-02\n\n### Added\n\n- Initial release on Crates.io.\n\n[Unreleased]: https://github.com/bheisler/criterion.rs/compare/0.4.0...HEAD\n[0.1.1]: https://github.com/bheisler/criterion.rs/compare/0.1.0...0.1.1\n[0.1.2]: https://github.com/bheisler/criterion.rs/compare/0.1.1...0.1.2\n[0.2.0]: https://github.com/bheisler/criterion.rs/compare/0.1.2...0.2.0\n[0.2.1]: https://github.com/bheisler/criterion.rs/compare/0.2.0...0.2.1\n[0.2.2]: https://github.com/bheisler/criterion.rs/compare/0.2.1...0.2.2\n[0.2.3]: https://github.com/bheisler/criterion.rs/compare/0.2.2...0.2.3\n[0.2.4]: https://github.com/bheisler/criterion.rs/compare/0.2.3...0.2.4\n[0.2.5]: https://github.com/bheisler/criterion.rs/compare/0.2.4...0.2.5\n[0.2.6]: https://github.com/bheisler/criterion.rs/compare/0.2.5...0.2.6\n[0.2.7]: https://github.com/bheisler/criterion.rs/compare/0.2.6...0.2.7\n[0.2.8]: https://github.com/bheisler/criterion.rs/compare/0.2.7...0.2.8\n[0.2.9]: https://github.com/bheisler/criterion.rs/compare/0.2.8...0.2.9\n[0.2.10]: https://github.com/bheisler/criterion.rs/compare/0.2.9...0.2.10\n[0.2.11]: https://github.com/bheisler/criterion.rs/compare/0.2.10...0.2.11\n[0.3.0]: https://github.com/bheisler/criterion.rs/compare/0.2.11...0.3.0\n[0.3.1]: https://github.com/bheisler/criterion.rs/compare/0.3.0...0.3.1\n[0.3.2]: https://github.com/bheisler/criterion.rs/compare/0.3.1...0.3.2\n[0.3.3]: https://github.com/bheisler/criterion.rs/compare/0.3.2...0.3.3\n[0.3.4]: https://github.com/bheisler/criterion.rs/compare/0.3.3...0.3.4\n[0.3.5]: https://github.com/bheisler/criterion.rs/compare/0.3.4...0.3.5\n[0.3.6]: https://github.com/bheisler/criterion.rs/compare/0.3.5...0.3.6\n[0.4.0]: https://github.com/bheisler/criterion.rs/compare/0.3.6...0.4.0\n[0.5.0]: https://github.com/bheisler/criterion.rs/compare/0.4.0...0.5.0\n[0.5.1]: https://github.com/bheisler/criterion.rs/compare/0.5.0...0.5.1\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 3.3056640625,
          "content": "# Contributing to Criterion.<span></span>rs\n\n## Ideas, Experiences and Questions\n\nThe easiest way to contribute to Criterion.<span></span>rs is to use it and report your experiences, ask questions and contribute ideas. We'd love to hear your thoughts on how to make Criterion.<span></span>rs better, or your comments on why you are or are not currently using it.\n\nIssues, ideas, requests and questions should be posted on the issue tracker at:\n\nhttps://github.com/bheisler/criterion.rs/issues\n\n## A Note on Dependency Updates\n\nCriterion.<span></span>rs does not accept pull requests to update dependencies unless specifically\nrequested by the maintainer(s). Dependencies are updated manually by the maintainer(s) before each\nnew release.\n\n## Code\n\nPull requests are welcome, though please raise an issue for discussion first if none exists. We're happy to assist new contributors.\n\nIf you're not sure what to work on, try checking the [Beginner label](https://github.com/bheisler/criterion.rs/issues?q=is%3Aissue+is%3Aopen+label%3ABeginner)\n\nTo make changes to the code, fork the repo and clone it:\n\n`git clone git@github.com:your-username/criterion.rs.git`\n\nYou'll probably want to install [gnuplot](http://www.gnuplot.info/) as well. See the gnuplot website for installation instructions.\n\nThen make your changes to the code. When you're done, run the tests:\n\n```\ncargo test --all\ncargo bench\n```\n\nIt's a good idea to run `clippy` and fix any warnings as well:\n\n```\nrustup component add clippy\ncargo clippy --workspace --all-targets\n```\n\nFinally, run Rustfmt to maintain a common code style:\n\n```\nrustup component add rustfmt-preview\ncargo fmt --all\n```\n\nDon't forget to update the CHANGELOG.md file and any appropriate documentation. Once you're finished, push to your fork and submit a pull request. We try to respond to new issues and pull requests quickly, so if there hasn't been any response for more than a few days feel free to ping @bheisler.\n\nSome things that will increase the chance that your pull request is accepted:\n\n* Write tests\n* Clearly document public methods\n* Write a good commit message\n\n## Branches\n\n*   PRs with breaking changes are made against the unreleased branch. e.g. branch version-0.4\n*   PRs without breaking changes are made against the master branch.\n\nIf you're not sure which branch to use just start with master, as this can be changed during review.\n\nWhen it is time to release the unreleased branch, a PR is made from the unreleased branch to master. e.g. https://github.com/bheisler/criterion.rs/pull/496\n\n## Github Labels\n\nCriterion.<span></span>rs uses a simple set of labels to track issues. Most important are the \ndifficulty labels:\n\n* Beginner - Suitable for people new to Criterion.rs, or even new to Rust in general\n* Intermediate - More challenging, likely involves some non-trivial design decisions and/or knowledge\n  of Criterion.<span></span>rs' internals\n* Bigger Project - Large and/or complex project such as designing a complex new feature\n\nAdditionally, there are a few other noteworthy labels:\n\n* Breaking Change - Fixing this will have to wait until the next breaking-change release\n* Bug - Something isn't working right\n* Enhancement - Request to add a new feature or otherwise improve Criterion.<span></span>rs in some way\n\n## Code of Conduct\n\nWe follow the [Rust Code of Conduct](http://www.rust-lang.org/conduct.html).\n"
        },
        {
          "name": "Cargo.toml",
          "type": "blob",
          "size": 3.263671875,
          "content": "[package]\nauthors = [\n  \"Jorge Aparicio <japaricious@gmail.com>\",\n  \"Brook Heisler <brookheisler@gmail.com>\",\n]\nname = \"criterion\"\n# When bumping:\n#\n# * Update version numbers in the book;\nversion = \"0.5.1\"\nedition = \"2021\"\nrust-version = \"1.70\"\n\ndescription = \"Statistics-driven micro-benchmarking library\"\nhomepage    = \"https://bheisler.github.io/criterion.rs/book/index.html\"\nrepository  = \"https://github.com/bheisler/criterion.rs\"\nreadme      = \"README.md\"\nkeywords    = [\"criterion\", \"benchmark\"]\ncategories  = [\"development-tools::profiling\"]\nlicense     = \"Apache-2.0 OR MIT\"\nexclude     = [\"book/*\"]\n\n[dependencies]\nanes           = \"0.1.4\"\ncriterion-plot = { path = \"plot\", version = \"0.5.0\" }\nitertools      = \"0.13\"\nserde          = { version = \"1.0.100\", features = [\"derive\"] }\nserde_json     = \"1.0.100\"\nciborium       = \"0.2.0\"\nclap           = { version = \"=4.4.9\", default-features = false, features = [\"std\", \"help\"] }\nwalkdir        = \"2.3\"\ntinytemplate   = \"1.1\"\ncast           = \"0.3\"\nnum-traits     = { version = \"0.2\", default-features = false, features = [\"std\"] }\noorandom       = \"11.1\"\nregex          = { version = \"1.5.1\", default-features = false, features = [\"std\"] }\n\n# Optional dependencies\nrayon = { version = \"1.3\", optional = true }\ncsv = { version = \"1.1\", optional = true }\nfutures = { version = \"0.3\", default-features = false, features = [\"executor\"], optional = true }\nsmol = { version = \"2.0\", default-features = false, optional = true }\ntokio = { version = \"1.0\", default-features = false, features = [\n  \"rt\",\n], optional = true }\nasync-std = { version = \"1.13\", optional = true }\n\n[dependencies.plotters]\nversion          = \"^0.3.2\"\noptional         = true\ndefault-features = false\nfeatures         = [\"svg_backend\", \"area_series\", \"line_series\"]\n\n[dev-dependencies]\ntempfile   = \"3.5.0\"\napprox     = \"0.5.0\"\nquickcheck = { version = \"1.0\", default-features = false }\nrand       = \"0.8\"\nfutures    = \"0.3\"\n\n[badges]\nmaintenance = { status = \"passively-maintained\" }\n\n[features]\nstable = [\n  \"csv_output\",\n  \"html_reports\",\n  \"async_futures\",\n  \"async_smol\",\n  \"async_tokio\",\n  \"async_std\",\n]\ndefault = [\"rayon\", \"plotters\", \"cargo_bench_support\"]\n\n# This is a legacy feature that no longer does anything, but removing it would be a semver break.\nreal_blackbox = []\n\n# Enable rayon support\nrayon = [\"dep:rayon\"]\n\n# Enable plotters support\nplotters = [\"dep:plotters\"]\n\n# Enable async/await support\nasync = []\n\n# These features enable built-in support for running async benchmarks on each different async\n# runtime.\nasync_futures = [\"dep:futures\", \"async\"]\nasync_smol    = [\"dep:smol\", \"async\"]\nasync_tokio   = [\"dep:tokio\", \"async\"]\nasync_std     = [\"dep:async-std\", \"async\"]\n\n# Make Criterion.rs generate its own plots (as opposed to using cargo-criterion)\nhtml_reports = []\n\n# Make Criterion.rs usable outside of cargo-criterion.\ncargo_bench_support = []\n\n# Make Criterion.rs generate CSV files. This feature is deprecated in favor of\n# cargo-criterion's --message-format=json option.\ncsv_output = [\"dep:csv\"]\n\n[workspace]\nexclude = [\"cargo-criterion\"]\nresolver = \"2\"\n\n[[bench]]\nname    = \"bench_main\"\nharness = false\n\n[lib]\nbench = false\n\n# Enable all of the async runtimes for the docs.rs output\n[package.metadata.docs.rs]\nfeatures = [\"async_futures\", \"async_smol\", \"async_std\", \"async_tokio\"]\n"
        },
        {
          "name": "LICENSE-APACHE",
          "type": "blob",
          "size": 10.5927734375,
          "content": "                              Apache License\n                        Version 2.0, January 2004\n                     http://www.apache.org/licenses/\n\nTERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n1. Definitions.\n\n   \"License\" shall mean the terms and conditions for use, reproduction,\n   and distribution as defined by Sections 1 through 9 of this document.\n\n   \"Licensor\" shall mean the copyright owner or entity authorized by\n   the copyright owner that is granting the License.\n\n   \"Legal Entity\" shall mean the union of the acting entity and all\n   other entities that control, are controlled by, or are under common\n   control with that entity. For the purposes of this definition,\n   \"control\" means (i) the power, direct or indirect, to cause the\n   direction or management of such entity, whether by contract or\n   otherwise, or (ii) ownership of fifty percent (50%) or more of the\n   outstanding shares, or (iii) beneficial ownership of such entity.\n\n   \"You\" (or \"Your\") shall mean an individual or Legal Entity\n   exercising permissions granted by this License.\n\n   \"Source\" form shall mean the preferred form for making modifications,\n   including but not limited to software source code, documentation\n   source, and configuration files.\n\n   \"Object\" form shall mean any form resulting from mechanical\n   transformation or translation of a Source form, including but\n   not limited to compiled object code, generated documentation,\n   and conversions to other media types.\n\n   \"Work\" shall mean the work of authorship, whether in Source or\n   Object form, made available under the License, as indicated by a\n   copyright notice that is included in or attached to the work\n   (an example is provided in the Appendix below).\n\n   \"Derivative Works\" shall mean any work, whether in Source or Object\n   form, that is based on (or derived from) the Work and for which the\n   editorial revisions, annotations, elaborations, or other modifications\n   represent, as a whole, an original work of authorship. For the purposes\n   of this License, Derivative Works shall not include works that remain\n   separable from, or merely link (or bind by name) to the interfaces of,\n   the Work and Derivative Works thereof.\n\n   \"Contribution\" shall mean any work of authorship, including\n   the original version of the Work and any modifications or additions\n   to that Work or Derivative Works thereof, that is intentionally\n   submitted to Licensor for inclusion in the Work by the copyright owner\n   or by an individual or Legal Entity authorized to submit on behalf of\n   the copyright owner. For the purposes of this definition, \"submitted\"\n   means any form of electronic, verbal, or written communication sent\n   to the Licensor or its representatives, including but not limited to\n   communication on electronic mailing lists, source code control systems,\n   and issue tracking systems that are managed by, or on behalf of, the\n   Licensor for the purpose of discussing and improving the Work, but\n   excluding communication that is conspicuously marked or otherwise\n   designated in writing by the copyright owner as \"Not a Contribution.\"\n\n   \"Contributor\" shall mean Licensor and any individual or Legal Entity\n   on behalf of whom a Contribution has been received by Licensor and\n   subsequently incorporated within the Work.\n\n2. Grant of Copyright License. Subject to the terms and conditions of\n   this License, each Contributor hereby grants to You a perpetual,\n   worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n   copyright license to reproduce, prepare Derivative Works of,\n   publicly display, publicly perform, sublicense, and distribute the\n   Work and such Derivative Works in Source or Object form.\n\n3. Grant of Patent License. Subject to the terms and conditions of\n   this License, each Contributor hereby grants to You a perpetual,\n   worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n   (except as stated in this section) patent license to make, have made,\n   use, offer to sell, sell, import, and otherwise transfer the Work,\n   where such license applies only to those patent claims licensable\n   by such Contributor that are necessarily infringed by their\n   Contribution(s) alone or by combination of their Contribution(s)\n   with the Work to which such Contribution(s) was submitted. If You\n   institute patent litigation against any entity (including a\n   cross-claim or counterclaim in a lawsuit) alleging that the Work\n   or a Contribution incorporated within the Work constitutes direct\n   or contributory patent infringement, then any patent licenses\n   granted to You under this License for that Work shall terminate\n   as of the date such litigation is filed.\n\n4. Redistribution. You may reproduce and distribute copies of the\n   Work or Derivative Works thereof in any medium, with or without\n   modifications, and in Source or Object form, provided that You\n   meet the following conditions:\n\n   (a) You must give any other recipients of the Work or\n       Derivative Works a copy of this License; and\n\n   (b) You must cause any modified files to carry prominent notices\n       stating that You changed the files; and\n\n   (c) You must retain, in the Source form of any Derivative Works\n       that You distribute, all copyright, patent, trademark, and\n       attribution notices from the Source form of the Work,\n       excluding those notices that do not pertain to any part of\n       the Derivative Works; and\n\n   (d) If the Work includes a \"NOTICE\" text file as part of its\n       distribution, then any Derivative Works that You distribute must\n       include a readable copy of the attribution notices contained\n       within such NOTICE file, excluding those notices that do not\n       pertain to any part of the Derivative Works, in at least one\n       of the following places: within a NOTICE text file distributed\n       as part of the Derivative Works; within the Source form or\n       documentation, if provided along with the Derivative Works; or,\n       within a display generated by the Derivative Works, if and\n       wherever such third-party notices normally appear. The contents\n       of the NOTICE file are for informational purposes only and\n       do not modify the License. You may add Your own attribution\n       notices within Derivative Works that You distribute, alongside\n       or as an addendum to the NOTICE text from the Work, provided\n       that such additional attribution notices cannot be construed\n       as modifying the License.\n\n   You may add Your own copyright statement to Your modifications and\n   may provide additional or different license terms and conditions\n   for use, reproduction, or distribution of Your modifications, or\n   for any such Derivative Works as a whole, provided Your use,\n   reproduction, and distribution of the Work otherwise complies with\n   the conditions stated in this License.\n\n5. Submission of Contributions. Unless You explicitly state otherwise,\n   any Contribution intentionally submitted for inclusion in the Work\n   by You to the Licensor shall be under the terms and conditions of\n   this License, without any additional terms or conditions.\n   Notwithstanding the above, nothing herein shall supersede or modify\n   the terms of any separate license agreement you may have executed\n   with Licensor regarding such Contributions.\n\n6. Trademarks. This License does not grant permission to use the trade\n   names, trademarks, service marks, or product names of the Licensor,\n   except as required for reasonable and customary use in describing the\n   origin of the Work and reproducing the content of the NOTICE file.\n\n7. Disclaimer of Warranty. Unless required by applicable law or\n   agreed to in writing, Licensor provides the Work (and each\n   Contributor provides its Contributions) on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n   implied, including, without limitation, any warranties or conditions\n   of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n   PARTICULAR PURPOSE. You are solely responsible for determining the\n   appropriateness of using or redistributing the Work and assume any\n   risks associated with Your exercise of permissions under this License.\n\n8. Limitation of Liability. In no event and under no legal theory,\n   whether in tort (including negligence), contract, or otherwise,\n   unless required by applicable law (such as deliberate and grossly\n   negligent acts) or agreed to in writing, shall any Contributor be\n   liable to You for damages, including any direct, indirect, special,\n   incidental, or consequential damages of any character arising as a\n   result of this License or out of the use or inability to use the\n   Work (including but not limited to damages for loss of goodwill,\n   work stoppage, computer failure or malfunction, or any and all\n   other commercial damages or losses), even if such Contributor\n   has been advised of the possibility of such damages.\n\n9. Accepting Warranty or Additional Liability. While redistributing\n   the Work or Derivative Works thereof, You may choose to offer,\n   and charge a fee for, acceptance of support, warranty, indemnity,\n   or other liability obligations and/or rights consistent with this\n   License. However, in accepting such obligations, You may act only\n   on Your own behalf and on Your sole responsibility, not on behalf\n   of any other Contributor, and only if You agree to indemnify,\n   defend, and hold each Contributor harmless for any liability\n   incurred by, or claims asserted against, such Contributor by reason\n   of your accepting any such warranty or additional liability.\n\nEND OF TERMS AND CONDITIONS\n\nAPPENDIX: How to apply the Apache License to your work.\n\n   To apply the Apache License to your work, attach the following\n   boilerplate notice, with the fields enclosed by brackets \"[]\"\n   replaced with your own identifying information. (Don't include\n   the brackets!)  The text should be enclosed in the appropriate\n   comment syntax for the file format. We also recommend that a\n   file or class name and description of purpose be included on the\n   same \"printed page\" as the copyright notice for easier\n   identification within third-party archives.\n\nCopyright [yyyy] [name of copyright owner]\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n\thttp://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n"
        },
        {
          "name": "LICENSE-MIT",
          "type": "blob",
          "size": 1.033203125,
          "content": "Copyright (c) 2014 Jorge Aparicio\n\nPermission is hereby granted, free of charge, to any\nperson obtaining a copy of this software and associated\ndocumentation files (the \"Software\"), to deal in the\nSoftware without restriction, including without\nlimitation the rights to use, copy, modify, merge,\npublish, distribute, sublicense, and/or sell copies of\nthe Software, and to permit persons to whom the Software\nis furnished to do so, subject to the following\nconditions:\n\nThe above copyright notice and this permission notice\nshall be included in all copies or substantial portions\nof the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF\nANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED\nTO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A\nPARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT\nSHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\nOF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR\nIN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\nDEALINGS IN THE SOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 6.17578125,
          "content": "<h1 align=\"center\">Criterion.<span></span>rs</h1>\n\n<div align=\"center\">Statistics-driven Microbenchmarking in Rust</div>\n\n<div align=\"center\">\n <a href=\"https://bheisler.github.io/criterion.rs/book/getting_started.html\">Getting Started</a>\n    |\n    <a href=\"https://bheisler.github.io/criterion.rs/book/index.html\">User Guide</a>\n    |\n    <a href=\"https://bheisler.github.io/criterion.rs/criterion/\">Master API Docs</a>\n    |\n    <a href=\"https://docs.rs/crate/criterion/\">Released API Docs</a>\n    |\n    <a href=\"https://github.com/bheisler/criterion.rs/blob/master/CHANGELOG.md\">Changelog</a>\n</div>\n\n<div align=\"center\">\n <a href=\"https://github.com/bheisler/criterion.rs/actions/workflows/ci.yaml\">\n        <img src=\"https://img.shields.io/github/checks-status/rgeometry/rgeometry/main?label=tests&logo=github\" alt=\"GitHub branch checks state\">\n    </a>\n    |\n    <a href=\"https://crates.io/crates/criterion\">\n        <img src=\"https://img.shields.io/crates/v/criterion.svg\" alt=\"Crates.io\">\n    </a>\n</div>\n\nCriterion.<span></span>rs helps you write fast code by detecting and measuring performance improvements or regressions, even small ones, quickly and accurately. You can optimize with confidence, knowing how each change affects the performance of your code.\n\n## Table of Contents\n\n- [Table of Contents](#table-of-contents)\n  - [Features](#features)\n  - [Quickstart](#quickstart)\n  - [Goals](#goals)\n  - [Contributing](#contributing)\n  - [Compatibility Policy](#compatibility-policy)\n  - [Maintenance](#maintenance)\n  - [License](#license)\n  - [Related Projects](#related-projects)\n  - [Criterion.rs Extensions](#criterionrs-extensions)\n\n### Features\n\n- __Statistics__: Statistical analysis detects if, and by how much, performance has changed since the last benchmark run\n- __Charts__: Uses [gnuplot](http://www.gnuplot.info/) to generate detailed graphs of benchmark results\n- __Stable-compatible__: Benchmark your code without installing nightly Rust\n\n### Quickstart\n\nIn order to generate plots, you must have [gnuplot](http://www.gnuplot.info/) installed. See the gnuplot website for installation instructions. See [Compatibility Policy](#compatibility-policy) for details on the minimum supported Rust version.\n\nTo start with Criterion.<span></span>rs, add the following to your `Cargo.toml` file:\n\n```toml\n[dev-dependencies]\ncriterion = { version = \"0.5\", features = [\"html_reports\"] }\n\n[[bench]]\nname = \"my_benchmark\"\nharness = false\n```\n\nNext, define a benchmark by creating a file at `$PROJECT/benches/my_benchmark.rs` with the following contents:\n\n```rust\nuse std::hint::black_box;\nuse criterion::{criterion_group, criterion_main, Criterion};\n\nfn fibonacci(n: u64) -> u64 {\n    match n {\n        0 => 1,\n        1 => 1,\n        n => fibonacci(n-1) + fibonacci(n-2),\n    }\n}\n\nfn criterion_benchmark(c: &mut Criterion) {\n    c.bench_function(\"fib 20\", |b| b.iter(|| fibonacci(black_box(20))));\n}\n\ncriterion_group!(benches, criterion_benchmark);\ncriterion_main!(benches);\n```\n\nFinally, run this benchmark with `cargo bench`. You should see output similar to the following:\n\n```\n     Running target/release/deps/example-423eedc43b2b3a93\nfib 20                  time:   [26.029 us 26.251 us 26.505 us]\nFound 11 outliers among 99 measurements (11.11%)\n  6 (6.06%) high mild\n  5 (5.05%) high severe\n```\n\nSee the [Getting Started](https://bheisler.github.io/criterion.rs/book/getting_started.html) guide for more details.\n\n### Goals\n\nThe primary goal of Criterion.<span></span>rs is to provide a powerful and statistically rigorous tool for measuring the performance of code, preventing performance regressions and accurately measuring optimizations. Additionally, it should be as programmer-friendly as possible and make it easy to create reliable, useful benchmarks, even for programmers without an advanced background in statistics.\n\n### Contributing\n\nFirst, thank you for contributing.\n\nOne great way to contribute to Criterion.<span></span>rs is to use it for your own benchmarking needs and report your experiences, file and comment on issues, etc.\n\nCode or documentation improvements in the form of pull requests are also welcome. If you're not\nsure what to work on, try checking the\n[Beginner label](https://github.com/bheisler/criterion.rs/issues?q=is%3Aissue+is%3Aopen+label%3ABeginner).\n\nIf your issues or pull requests have no response after a few days, feel free to ping me (@bheisler).\n\nFor more details, see the [CONTRIBUTING.md file](https://github.com/bheisler/criterion.rs/blob/master/CONTRIBUTING.md).\n\n### Compatibility Policy\n\nCriterion.<span></span>rs supports the last three stable minor releases of Rust. At time of\nwriting, this means Rust 1.59 or later. Older versions may work, but are not guaranteed.\n\nCurrently, the oldest version of Rust believed to work is 1.57. Future versions of Criterion.<span></span>rs may\nbreak support for such old versions, and this will not be considered a breaking change. If you\nrequire Criterion.<span></span>rs to work on old versions of Rust, you will need to stick to a\nspecific patch version of Criterion.<span></span>rs.\n\n### Maintenance\n\nCriterion.<span></span>rs was originally created by Jorge Aparicio [(@japaric)](https://github.com/japaric) and is currently being maintained by Brook Heisler [(@bheisler)](https://github.com/bheisler).\n\n### License\n\nCriterion.<span></span>rs is dual licensed under the Apache 2.0 license and the MIT license.\n\n### Related Projects\n\n- [bencher](https://github.com/bluss/bencher) - A port of the libtest benchmark runner to stable Rust\n- [criterion](http://www.serpentine.com/criterion/) - The Haskell microbenchmarking library that inspired Criterion.<span></span>rs\n- [cargo-benchcmp](https://github.com/BurntSushi/cargo-benchcmp) - Cargo subcommand to compare the output of two libtest or bencher benchmark runs\n- [cargo-flamegraph](https://github.com/ferrous-systems/flamegraph) - Cargo subcommand to profile an executable and produce a flamegraph\n\n### Criterion.rs Extensions\n\n- [criterion-cycles-per-byte](https://crates.io/crates/criterion-cycles-per-byte) - A custom-measurement plugin that counts the number of CPU cycles used by the benchmark\n- [criterion-perf-events](https://crates.io/crates/criterion-perf-events) - A custom-measurement plugin that counts perf events created by the benchmark\n"
        },
        {
          "name": "bencher_compat",
          "type": "tree",
          "content": null
        },
        {
          "name": "benches",
          "type": "tree",
          "content": null
        },
        {
          "name": "book",
          "type": "tree",
          "content": null
        },
        {
          "name": "ci",
          "type": "tree",
          "content": null
        },
        {
          "name": "macro",
          "type": "tree",
          "content": null
        },
        {
          "name": "plot",
          "type": "tree",
          "content": null
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}