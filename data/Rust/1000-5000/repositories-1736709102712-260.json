{
  "metadata": {
    "timestamp": 1736709102712,
    "page": 260,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjI2MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "bincode-org/bincode",
      "stars": 2775,
      "defaultBranch": "trunk",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.08203125,
          "content": "/target\n/Cargo.lock\n*.swp\n*.swo\n.cargo\n.vscode\n.idea\nrls*.log\ntarpaulin-report.html\n"
        },
        {
          "name": ".mailmap",
          "type": "blob",
          "size": 0.1396484375,
          "content": "Ty Overby <ty@pre-alpha.com>\nTy Overby <ty@pre-alpha.com> <tyoverby@abelay.cs.washington.edu>\nZoey Riordan <zoey@dos.cafe> <daniel@griffen.io>\n"
        },
        {
          "name": ".rustfmt.toml",
          "type": "blob",
          "size": 0.0224609375,
          "content": "newline_style = \"Unix\"\n"
        },
        {
          "name": "CODE_OF_CONDUCT.md",
          "type": "blob",
          "size": 5.09375,
          "content": "# Contributor Covenant Code of Conduct\n\n## Our Pledge\n\nWe as members, contributors, and leaders pledge to make participation in our\ncommunity a harassment-free experience for everyone, regardless of age, body\nsize, visible or invisible disability, ethnicity, sex characteristics, gender\nidentity and expression, level of experience, education, socio-economic status,\nnationality, personal appearance, race, religion, or sexual identity\nand orientation.\n\nWe pledge to act and interact in ways that contribute to an open, welcoming,\ndiverse, inclusive, and healthy community.\n\n## Our Standards\n\nExamples of behavior that contributes to a positive environment for our\ncommunity include:\n\n* Demonstrating empathy and kindness toward other people\n* Being respectful of differing opinions, viewpoints, and experiences\n* Giving and gracefully accepting constructive feedback\n* Accepting responsibility and apologizing to those affected by our mistakes,\n  and learning from the experience\n* Focusing on what is best not just for us as individuals, but for the\n  overall community\n\nExamples of unacceptable behavior include:\n\n* The use of sexualized language or imagery, and sexual attention or\n  advances of any kind\n* Trolling, insulting or derogatory comments, and personal or political attacks\n* Public or private harassment\n* Publishing others' private information, such as a physical or email\n  address, without their explicit permission\n* Other conduct which could reasonably be considered inappropriate in a\n  professional setting\n\n## Enforcement Responsibilities\n\nCommunity leaders are responsible for clarifying and enforcing our standards of\nacceptable behavior and will take appropriate and fair corrective action in\nresponse to any behavior that they deem inappropriate, threatening, offensive,\nor harmful.\n\nCommunity leaders have the right and responsibility to remove, edit, or reject\ncomments, commits, code, wiki edits, issues, and other contributions that are\nnot aligned to this Code of Conduct, and will communicate reasons for moderation\ndecisions when appropriate.\n\n## Scope\n\nThis Code of Conduct applies within all community spaces, and also applies when\nan individual is officially representing the community in public spaces.\nExamples of representing our community include using an official e-mail address,\nposting via an official social media account, or acting as an appointed\nrepresentative at an online or offline event.\n\n## Enforcement\n\nInstances of abusive, harassing, or otherwise unacceptable behavior may be\nreported to the community leaders responsible for enforcement at\nabuse@dos.cafe.\nAll complaints will be reviewed and investigated promptly and fairly.\n\nAll community leaders are obligated to respect the privacy and security of the\nreporter of any incident.\n\n## Enforcement Guidelines\n\nCommunity leaders will follow these Community Impact Guidelines in determining\nthe consequences for any action they deem in violation of this Code of Conduct:\n\n### 1. Correction\n\n**Community Impact**: Use of inappropriate language or other behavior deemed\nunprofessional or unwelcome in the community.\n\n**Consequence**: A private, written warning from community leaders, providing\nclarity around the nature of the violation and an explanation of why the\nbehavior was inappropriate. A public apology may be requested.\n\n### 2. Warning\n\n**Community Impact**: A violation through a single incident or series\nof actions.\n\n**Consequence**: A warning with consequences for continued behavior. No\ninteraction with the people involved, including unsolicited interaction with\nthose enforcing the Code of Conduct, for a specified period of time. This\nincludes avoiding interactions in community spaces as well as external channels\nlike social media. Violating these terms may lead to a temporary or\npermanent ban.\n\n### 3. Temporary Ban\n\n**Community Impact**: A serious violation of community standards, including\nsustained inappropriate behavior.\n\n**Consequence**: A temporary ban from any sort of interaction or public\ncommunication with the community for a specified period of time. No public or\nprivate interaction with the people involved, including unsolicited interaction\nwith those enforcing the Code of Conduct, is allowed during this period.\nViolating these terms may lead to a permanent ban.\n\n### 4. Permanent Ban\n\n**Community Impact**: Demonstrating a pattern of violation of community\nstandards, including sustained inappropriate behavior,  harassment of an\nindividual, or aggression toward or disparagement of classes of individuals.\n\n**Consequence**: A permanent ban from any sort of public interaction within\nthe community.\n\n## Attribution\n\nThis Code of Conduct is adapted from the [Contributor Covenant][homepage],\nversion 2.0, available at\nhttps://www.contributor-covenant.org/version/2/0/code_of_conduct.html.\n\nCommunity Impact Guidelines were inspired by [Mozilla's code of conduct\nenforcement ladder](https://github.com/mozilla/diversity).\n\n[homepage]: https://www.contributor-covenant.org\n\nFor answers to common questions about this code of conduct, see the FAQ at\nhttps://www.contributor-covenant.org/faq. Translations are available at\nhttps://www.contributor-covenant.org/translations.\n"
        },
        {
          "name": "Cargo.toml",
          "type": "blob",
          "size": 1.7060546875,
          "content": "[workspace]\nmembers = [\"derive\", \"compatibility\"]\n\n[package]\nname = \"bincode\"\nversion = \"2.0.0-rc.3\" # remember to update html_root_url and bincode_derive\nauthors = [\n    \"Ty Overby <ty@pre-alpha.com>\",\n    \"Zoey Riordan <zoey@dos.cafe>\",\n    \"Victor Koenders <bincode@trangar.com>\",\n]\nexclude = [\"logo.svg\", \"examples/*\", \".gitignore\", \".github/\"]\n\npublish = true\n\nrepository = \"https://github.com/bincode-org/bincode\"\ndocumentation = \"https://docs.rs/bincode\"\nreadme = \"./readme.md\"\ncategories = [\"encoding\", \"network-programming\"]\nkeywords = [\"binary\", \"encode\", \"decode\", \"serialize\", \"deserialize\"]\n\nlicense = \"MIT\"\ndescription = \"A binary serialization / deserialization strategy for transforming structs into bytes and vice versa!\"\n\nedition = \"2021\"\n\n[features]\ndefault = [\"std\", \"derive\"]\nstd = [\"alloc\", \"serde?/std\"]\nalloc = [\"serde?/alloc\"]\nderive = [\"bincode_derive\"]\n\n[dependencies]\nbincode_derive = { path = \"derive\", version = \"2.0.0-rc.3\", optional = true }\nserde = { version = \"1.0\", default-features = false, optional = true }\nunty = \"0.0.3\"\n\n# Used for tests\n[dev-dependencies]\nserde_derive = \"1.0\"\nserde_json = { version = \"1.0\", default-features = false }\ntempfile = \"3.2\"\ncriterion = \"0.5\"\nrand = \"0.8\"\nuuid = { version = \"1.1\", features = [\"serde\"] }\nchrono = { version = \"0.4\", features = [\"serde\"] }\nglam = { version = \"0.25\", features = [\"serde\"] }\nbincode_1 = { version = \"1.3\", package = \"bincode\" }\nserde = { version = \"1.0\", features = [\"derive\"] }\n\n[[bench]]\nname = \"varint\"\nharness = false\n\n[[bench]]\nname = \"inline\"\nharness = false\n\n[[bench]]\nname = \"string\"\nharness = false\n\n[profile.bench]\ncodegen-units = 1\ndebug = 1\nlto = true\n\n[package.metadata.docs.rs]\nall-features = true\nrustdoc-args = [\"--cfg\", \"docsrs\"]\n"
        },
        {
          "name": "LICENSE.md",
          "type": "blob",
          "size": 1.05078125,
          "content": "The MIT License (MIT)\n\nCopyright (c) 2014 Ty Overby\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "benches",
          "type": "tree",
          "content": null
        },
        {
          "name": "compatibility",
          "type": "tree",
          "content": null
        },
        {
          "name": "derive",
          "type": "tree",
          "content": null
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "fuzz",
          "type": "tree",
          "content": null
        },
        {
          "name": "logo.svg",
          "type": "blob",
          "size": 1.80078125,
          "content": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<svg width=\"37.239mm\" height=\"45mm\" version=\"1.1\" viewBox=\"0 0 37.239 45\" xmlns=\"http://www.w3.org/2000/svg\">\n<g transform=\"translate(-82.272 -105)\">\n<path d=\"m103.92 150-21.651-12.5v-27l9.5263-5.5h24.249l3.4641 2v34z\" fill=\"#fff\"/>\n<g transform=\"skewY(-30)\" stroke-width=\".26458\" aria-label=\"1\">\n<path d=\"m115.85 204.23q0 1.0273-0.59267 1.62-0.59267 0.55316-1.5804 0.55316h-2.3707q-1.0273 0-1.62-0.55316-0.55316-0.59266-0.55316-1.62v-21.692q0-0.7112 0.47413-1.1458 0.47414-0.43462 0.86925-0.39511 0.39511 0 0.43462 0 0 0 0.31609 0 0.31609-0.0395 0.79022 0.39511 0.47413 0.43463 0.47413 1.1063v7.3096q0 2.0151 0.19756 2.5682 0.19755 0.55315 0.94827 1.3434l0.94826 0.90875q0.79022 0.7112 1.0273 1.3039 0.23707 0.59266 0.23707 2.6472z\"/>\n</g>\n<g transform=\"skewY(30)\" fill=\"#010101\" stroke-width=\".26458\" aria-label=\"0\">\n<path d=\"m92.053 83.506q0.63218 0 1.0273 0 0.43462 0 0.63218 0 1.1458 0 1.3829-0.19756 0.27658-0.23707 0.27658-1.3039v-14.501q0-0.63218 0-1.0273 0-0.43462 0-0.63218 0-1.1853-0.23707-1.4224-0.19756-0.27658-1.2644-0.27658h-3.5165q-0.63218 0-1.0668 0-0.39511 0-0.59267 0-1.2248 0-1.4619 0.27658-0.23707 0.27658-0.23707 1.5804v14.145q0 0.43462 0 0.86924t0 0.67169q0 1.2644 0.23707 1.5409 0.23707 0.27658 1.4224 0.27658zm-8.3764 0.86924v-21.138q0-0.86924 0.63218-1.5014 0.67169-0.67169 1.5014-0.67169h10.787q0.79022 0 1.4619 0.63218 0.67169 0.63218 0.67169 1.5409v21.138q0 2.1731-2.1731 2.1731h-10.747q-2.1336 0-2.1336-2.1731z\" fill=\"#010101\"/>\n</g>\n<path d=\"m93.531 106 10.392 6 10.392-6 3.4641 2v8l-3.4641-2-6.9282 4v24l3.4641 2-6.9282 4-6.9282-4 3.4641-2v-24l-6.9282-4-3.4641 2v-8z\" fill=\"#7137c8\"/>\n<path d=\"m103.92 116 13.856-8v8l-3.4641-2-6.9282 4v24l3.4641 2-6.9282 4z\" fill=\"#442178\"/>\n<path d=\"m103.92 116 13.856-8-3.4641-2-10.392 6-10.392-6-3.4641 2z\" fill=\"#8d5fd3\"/>\n</g>\n</svg>\n"
        },
        {
          "name": "readme.md",
          "type": "blob",
          "size": 5.6162109375,
          "content": "# Bincode\n### The following information is for the prerelease 2.x versions of this library. The stable branch can be found [here](https://github.com/bincode-org/bincode/tree/v1.x).\n<img align=\"right\" src=\"./logo.svg\" />\n\n[![CI](https://github.com/bincode-org/bincode/workflows/CI/badge.svg)](https://github.com/bincode-org/bincode/actions)\n[![](https://img.shields.io/crates/v/bincode.svg)](https://crates.io/crates/bincode)\n[![](https://img.shields.io/badge/license-MIT-blue.svg)](https://opensource.org/licenses/MIT)\n<!-- [![](https://img.shields.io/badge/bincode-rustc_1.41.1+-lightgray.svg)](https://blog.rust-lang.org/2020/02/27/Rust-1.41.1.html) -->\n[![Matrix](https://img.shields.io/matrix/bincode:matrix.org?label=Matrix%20Chat)](https://matrix.to/#/#bincode:matrix.org)\n\nA compact encoder / decoder pair that uses a binary zero-fluff encoding scheme.\nThe size of the encoded object will be the same or smaller than the size that\nthe object takes up in memory in a running Rust program.\n\nIn addition to exposing two simple functions\n(one that encodes to `Vec<u8>`, and one that decodes from `&[u8]`),\nbinary-encode exposes a Reader/Writer API that makes it work\nperfectly with other stream-based APIs such as Rust files, network streams,\nand the [flate2-rs](https://github.com/rust-lang/flate2-rs) compression\nlibrary.\n\n## [API Documentation](https://docs.rs/bincode/)\n\n## Bincode in the Wild\n\n* [google/tarpc](https://github.com/google/tarpc): Bincode is used to serialize and deserialize networked RPC messages.\n* [servo/webrender](https://github.com/servo/webrender): Bincode records WebRender API calls for record/replay-style graphics debugging.\n* [servo/ipc-channel](https://github.com/servo/ipc-channel): IPC-Channel uses Bincode to send structs between processes using a channel-like API.\n* [ajeetdsouza/zoxide](https://github.com/ajeetdsouza/zoxide): zoxide uses Bincode to store a database of directories and their access frequencies on disk.\n\n## Example\n\n```rust\nuse bincode::{config, Decode, Encode};\n\n#[derive(Encode, Decode, PartialEq, Debug)]\nstruct Entity {\n    x: f32,\n    y: f32,\n}\n\n#[derive(Encode, Decode, PartialEq, Debug)]\nstruct World(Vec<Entity>);\n\nfn main() {\n    let config = config::standard();\n\n    let world = World(vec![Entity { x: 0.0, y: 4.0 }, Entity { x: 10.0, y: 20.5 }]);\n\n    let encoded: Vec<u8> = bincode::encode_to_vec(&world, config).unwrap();\n\n    // The length of the vector is encoded as a varint u64, which in this case gets collapsed to a single byte\n    // See the documentation on varint for more info for that.\n    // The 4 floats are encoded in 4 bytes each.\n    assert_eq!(encoded.len(), 1 + 4 * 4);\n\n    let (decoded, len): (World, usize) = bincode::decode_from_slice(&encoded[..], config).unwrap();\n\n    assert_eq!(world, decoded);\n    assert_eq!(len, encoded.len()); // read all bytes\n}\n```\n\n## Specification\n\nBincode's format is specified in [docs/spec.md](https://github.com/bincode-org/bincode/blob/trunk/docs/spec.md).\n\n## FAQ\n\n### Is Bincode suitable for storage?\n\nThe encoding format is stable, provided the same configuration is used.\nThis should ensure that later versions can still read data produced by a previous versions of the library if no major version change\nhas occurred.\n\nBincode 1 and 2 are completely compatible if the same configuration is used.\n\nBincode is invariant over byte-order, making an exchange between different\narchitectures possible. It is also rather space efficient, as it stores no\nmetadata like struct field names in the output format and writes long streams of\nbinary data without needing any potentially size-increasing encoding.\n\nAs a result, Bincode is suitable for storing data. Be aware that it does not\nimplement any sort of data versioning scheme or file headers, as these\nfeatures are outside the scope of this crate.\n\n### Is Bincode suitable for untrusted inputs?\n\nBincode attempts to protect against hostile data. There is a maximum size\nconfiguration available (`Configuration::with_limit`), but not enabled in the\ndefault configuration. Enabling it causes pre-allocation size to be limited to\nprevent against memory exhaustion attacks.\n\nDeserializing any incoming data will not cause undefined behavior or memory\nissues, assuming that the deserialization code for the struct is safe itself.\n\nBincode can be used for untrusted inputs in the sense that it will not create a\nsecurity issues in your application, provided the configuration is changed to enable a\nmaximum size limit. Malicious inputs will fail upon deserialization.\n\n### What is Bincode's MSRV (minimum supported Rust version)?\n\nBincode 2.0 is still in development and does not yet have a targeted MSRV. Once 2.0 is fully released the MSRV will be locked. After this point any changes to the MSRV are considered a breaking change for semver purposes.\n\n### Why does bincode not respect `#[repr(u8)]`?\n\nBincode will encode enum variants as a `u32`. If you're worried about storage size, we can recommend enabling `Configuration::with_variable_int_encoding()`. This option is enabled by default with the `standard` configuration. In this case enum variants will almost always be encoded as a `u8`.\n\nCurrently we have not found a compelling case to respect `#[repr(...)]`. You're most likely trying to interop with a format that is similar-but-not-quite-bincode. We only support our own protocol ([spec](https://github.com/bincode-org/bincode/blob/trunk/docs/spec.md)).\n\nIf you really want to use bincode to encode/decode a different protocol, consider implementing `Encode` and `Decode` yourself. `bincode-derive` will output the generated implementation in `target/generated/bincode/<name>_Encode.rs` and `target/generated/bincode/<name>_Decode.rs` which should get you started.\n"
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}