{
  "metadata": {
    "timestamp": 1736709052469,
    "page": 161,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjE3MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "nuta/kerla",
      "stars": 3370,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 0.2109375,
          "content": "root = true\n\n[*]\nend_of_line = lf\ninsert_final_newline = true\ntrim_trailing_whitespace = true\n\n[{**.rs,**.toml,**.S,**.py,**.json}]\nindent_style = space\nindent_size = 4\n\n[Makefile]\nindent_style = tab\nindent_size = 8\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.2470703125,
          "content": "/target\n/build\n/isofiles\n*.elf\n*.bin\n*.pyc\n*.iso\n*.symbols\n*.log\n*.map\n*.pcap\n\n# A temporary file created by the linker. Ignore them not to notify cargo-watch.\n*.map*\n*.elf*\n\n/.vscode\n!/.vscode/launch.json\n!/.vscode/tasks.json\n!/.vscode/extensions.json\n"
        },
        {
          "name": ".vscode",
          "type": "tree",
          "content": null
        },
        {
          "name": "CODE_OF_CONDUCT.md",
          "type": "blob",
          "size": 2.513671875,
          "content": "# Code of Conduct\nKerla's Code of Conduct is based on and almost identical with [Rust's Code of Conduct](https://www.rust-lang.org/policies/code-of-conduct):\n\n## Rules\n- We are committed to providing a friendly, safe and welcoming environment for all, regardless of level of experience, gender identity and expression, sexual orientation, disability, personal appearance, body size, race, ethnicity, age, religion, nationality, or other similar characteristics.\n- Please avoid using overtly sexual aliases or other nicknames that might detract from a friendly, safe and welcoming environment for all.\n- **Please be kind and courteous.** There’s no need to be mean or rude.\n- **Respect that people have differences of opinion** and that every design or implementation choice carries a trade-off and numerous costs. There is seldom a right answer.\n- Please keep unstructured critique to a minimum. If you have solid ideas you want to experiment with, make a fork and see how it works.\n- We will exclude you from interaction if you insult, demean or harass anyone. That is not welcome behavior. We interpret the term “harassment” as including the definition in the [Citizen Code of Conduct](https://github.com/stumpsyn/policies/blob/master/citizen_code_of_conduct.md); if you have any lack of clarity about what might be included in that concept, please read their definition. In particular, we don’t tolerate behavior that excludes people in socially marginalized groups.\n- Private harassment is also unacceptable. No matter who you are, if you feel you have been or are being harassed or made uncomfortable by a community member, please contact one of the channel ops or any of the moderators (see below) immediately. Whether you’re a regular contributor or a newcomer, we care about making this community a safe place for you and we’ve got your back.\n- Likewise any spamming, trolling, flaming, baiting or other attention-stealing behavior is not welcome.\n\n## Moderation\nIf you feel that a thread in a community space (see below) needs moderation, please contact the moderators list below.\n\nModerators will check the report and if they consider it inappropriate in respect to the code of conduct, they will:\n\n1. Warn the person in the (public) thread.\n2. If an unacceptable behavior still happens, they will ban temporarily or permanently from the community.\n\n### Moderators\n- Seiya Nuta (nuta@seiya.me)\n\n### Spaces\nModerators are responsible for managing the following spaces:\n\n- GitHub (https://github.com/nuta/kerla)\n- Discord (https://discord.gg/6Pu4ujpp6h)\n"
        },
        {
          "name": "Cargo.lock",
          "type": "blob",
          "size": 10.6953125,
          "content": "# This file is automatically @generated by Cargo.\n# It is not intended for manual editing.\nversion = 3\n\n[[package]]\nname = \"ahash\"\nversion = \"0.7.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"fcb51a0695d8f838b1ee009b3fbf66bda078cd64590202a864a8f3e8c4315c47\"\ndependencies = [\n \"getrandom\",\n \"once_cell\",\n \"version_check\",\n]\n\n[[package]]\nname = \"arrayvec\"\nversion = \"0.5.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"23b62fc65de8e4e7f52534fb52b0f3ed04746ae267519eef2a83941e8085068b\"\n\n[[package]]\nname = \"arrayvec\"\nversion = \"0.7.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8da52d66c7071e2e3fa2a1e5c6d088fec47b593032b254f5e980de8ea54454d6\"\n\n[[package]]\nname = \"atomic_refcell\"\nversion = \"0.1.8\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"73b5e5f48b927f04e952dedc932f31995a65a0bf65ec971c74436e51bf6e970d\"\n\n[[package]]\nname = \"autocfg\"\nversion = \"1.0.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"cdb031dd78e28731d87d56cc8ffef4a8f36ca26c38fe2de700543e627f8a464a\"\n\n[[package]]\nname = \"bit_field\"\nversion = \"0.10.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"dcb6dd1c2376d2e096796e234a70e17e94cc2d5d54ff8ce42b28cef1d0d359a4\"\n\n[[package]]\nname = \"bitflags\"\nversion = \"1.3.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"bef38d45163c2f1dde094a7dfd33ccf595c92905c8f8f4fdc18d06fb1037718a\"\n\n[[package]]\nname = \"bitvec\"\nversion = \"1.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1489fcb93a5bb47da0462ca93ad252ad6af2145cce58d10d46a83931ba9f016b\"\ndependencies = [\n \"funty\",\n \"radium\",\n \"tap\",\n \"wyz\",\n]\n\n[[package]]\nname = \"boot2dump\"\nversion = \"0.0.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"225c5460e6cda737adafc046c6106ca1769963bce43261b8a38a18dfcc2efa50\"\n\n[[package]]\nname = \"buddy_system_allocator\"\nversion = \"0.8.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"55703ac5f02c246ce6158eff6ae2dd9e9069917969682b6831f8a5123abb8a48\"\ndependencies = [\n \"spin 0.7.1\",\n]\n\n[[package]]\nname = \"byteorder\"\nversion = \"1.4.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"14c189c53d098945499cdfa7ecc63567cf3886b3332b312a5b4585d8d3a6a610\"\n\n[[package]]\nname = \"cfg-if\"\nversion = \"1.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"baf1de4339761588bc0619e3cbc0120ee582ebb74b53b4efbf79117bd2da40fd\"\n\n[[package]]\nname = \"crossbeam\"\nversion = \"0.8.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"4ae5588f6b3c3cb05239e90bd110f257254aecd01e4635400391aeae07497845\"\ndependencies = [\n \"cfg-if\",\n \"crossbeam-epoch\",\n \"crossbeam-queue\",\n \"crossbeam-utils\",\n]\n\n[[package]]\nname = \"crossbeam-epoch\"\nversion = \"0.9.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"4ec02e091aa634e2c3ada4a392989e7c3116673ef0ac5b72232439094d73b7fd\"\ndependencies = [\n \"cfg-if\",\n \"crossbeam-utils\",\n \"memoffset\",\n \"scopeguard\",\n]\n\n[[package]]\nname = \"crossbeam-queue\"\nversion = \"0.3.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"9b10ddc024425c88c2ad148c1b0fd53f4c6d38db9697c9f1588381212fa657c9\"\ndependencies = [\n \"cfg-if\",\n \"crossbeam-utils\",\n]\n\n[[package]]\nname = \"crossbeam-utils\"\nversion = \"0.8.8\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"0bf124c720b7686e3c2663cf54062ab0f68a88af2fb6a030e87e30bf721fcb38\"\ndependencies = [\n \"cfg-if\",\n]\n\n[[package]]\nname = \"funty\"\nversion = \"2.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e6d5a32815ae3f33302d95fdcb2ce17862f8c65363dcfd29360480ba1001fc9c\"\n\n[[package]]\nname = \"getrandom\"\nversion = \"0.2.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"7fcd999463524c52659517fe2cea98493cfe485d10565e7b0fb07dbba7ad2753\"\ndependencies = [\n \"cfg-if\",\n \"libc\",\n \"wasi\",\n]\n\n[[package]]\nname = \"goblin\"\nversion = \"0.5.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"c955ab4e0ad8c843ea653a3d143048b87490d9be56bd7132a435c2407846ac8f\"\ndependencies = [\n \"plain\",\n \"scroll\",\n]\n\n[[package]]\nname = \"hashbrown\"\nversion = \"0.12.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8c21d40587b92fa6a6c6e3c1bdbf87d75511db5672f9c93175574b3a00df1758\"\ndependencies = [\n \"ahash\",\n]\n\n[[package]]\nname = \"kerla_api\"\nversion = \"0.1.0\"\ndependencies = [\n \"arrayvec 0.7.2\",\n \"kerla_runtime\",\n \"kerla_utils\",\n \"log\",\n \"memoffset\",\n \"x86\",\n]\n\n[[package]]\nname = \"kerla_kernel\"\nversion = \"0.1.0\"\ndependencies = [\n \"arrayvec 0.7.2\",\n \"atomic_refcell\",\n \"bitflags\",\n \"bitvec\",\n \"boot2dump\",\n \"crossbeam\",\n \"goblin\",\n \"hashbrown\",\n \"kerla_api\",\n \"kerla_runtime\",\n \"kerla_utils\",\n \"log\",\n \"smoltcp\",\n \"spin 0.9.2\",\n \"virtio_net\",\n \"x86\",\n]\n\n[[package]]\nname = \"kerla_runtime\"\nversion = \"0.1.0\"\ndependencies = [\n \"arrayvec 0.7.2\",\n \"atomic_refcell\",\n \"bitflags\",\n \"buddy_system_allocator\",\n \"cfg-if\",\n \"kerla_utils\",\n \"log\",\n \"log_filter\",\n \"spin 0.9.2\",\n \"vte\",\n \"x86\",\n]\n\n[[package]]\nname = \"kerla_utils\"\nversion = \"0.1.0\"\ndependencies = [\n \"bitvec\",\n \"crossbeam\",\n \"log\",\n \"spin 0.9.2\",\n]\n\n[[package]]\nname = \"libc\"\nversion = \"0.2.105\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"869d572136620d55835903746bcb5cdc54cb2851fd0aeec53220b4bb65ef3013\"\n\n[[package]]\nname = \"lock_api\"\nversion = \"0.4.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"712a4d093c9976e24e7dbca41db895dabcbac38eb5f4045393d17a95bdfb1109\"\ndependencies = [\n \"scopeguard\",\n]\n\n[[package]]\nname = \"log\"\nversion = \"0.4.14\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"51b9bbe6c47d51fc3e1a9b945965946b4c44142ab8792c50835a980d362c2710\"\ndependencies = [\n \"cfg-if\",\n]\n\n[[package]]\nname = \"log_filter\"\nversion = \"0.1.0\"\ndependencies = [\n \"log\",\n]\n\n[[package]]\nname = \"managed\"\nversion = \"0.7.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"c75de51135344a4f8ed3cfe2720dc27736f7711989703a0b43aadf3753c55577\"\n\n[[package]]\nname = \"memoffset\"\nversion = \"0.6.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"5aa361d4faea93603064a027415f07bd8e1d5c88c9fbf68bf56a285428fd79ce\"\ndependencies = [\n \"autocfg\",\n]\n\n[[package]]\nname = \"once_cell\"\nversion = \"1.8.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"692fcb63b64b1758029e0a96ee63e049ce8c5948587f2f7208df04625e5f6b56\"\n\n[[package]]\nname = \"plain\"\nversion = \"0.2.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b4596b6d070b27117e987119b4dac604f3c58cfb0b191112e24771b2faeac1a6\"\n\n[[package]]\nname = \"proc-macro2\"\nversion = \"1.0.32\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ba508cc11742c0dc5c1659771673afbab7a0efab23aa17e854cbab0837ed0b43\"\ndependencies = [\n \"unicode-xid\",\n]\n\n[[package]]\nname = \"quote\"\nversion = \"1.0.10\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"38bc8cc6a5f2e3655e0899c1b848643b2562f853f114bfec7be120678e3ace05\"\ndependencies = [\n \"proc-macro2\",\n]\n\n[[package]]\nname = \"radium\"\nversion = \"0.7.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"dc33ff2d4973d518d823d61aa239014831e521c75da58e3df4840d3f47749d09\"\n\n[[package]]\nname = \"raw-cpuid\"\nversion = \"10.2.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"929f54e29691d4e6a9cc558479de70db7aa3d98cd6fe7ab86d7507aa2886b9d2\"\ndependencies = [\n \"bitflags\",\n]\n\n[[package]]\nname = \"scopeguard\"\nversion = \"1.1.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d29ab0c6d3fc0ee92fe66e2d99f700eab17a8d57d1c1d3b748380fb20baa78cd\"\n\n[[package]]\nname = \"scroll\"\nversion = \"0.11.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"04c565b551bafbef4157586fa379538366e4385d42082f255bfd96e4fe8519da\"\n\n[[package]]\nname = \"smoltcp\"\nversion = \"0.7.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3e4a069bef843d170df47e7c0a8bf8d037f217d9f5b325865acc3e466ffe40d3\"\ndependencies = [\n \"bitflags\",\n \"byteorder\",\n \"managed\",\n]\n\n[[package]]\nname = \"spin\"\nversion = \"0.7.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"13287b4da9d1207a4f4929ac390916d64eacfe236a487e9a9f5b3be392be5162\"\n\n[[package]]\nname = \"spin\"\nversion = \"0.9.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"511254be0c5bcf062b019a6c89c01a664aa359ded62f78aa72c6fc137c0590e5\"\ndependencies = [\n \"lock_api\",\n]\n\n[[package]]\nname = \"tap\"\nversion = \"1.0.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"55937e1799185b12863d447f42597ed69d9928686b8d88a1df17376a097d8369\"\n\n[[package]]\nname = \"unicode-xid\"\nversion = \"0.2.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8ccb82d61f80a663efe1f787a51b16b5a51e3314d6ac365b08639f52387b33f3\"\n\n[[package]]\nname = \"utf8parse\"\nversion = \"0.2.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"936e4b492acfd135421d8dca4b1aa80a7bfc26e702ef3af710e0752684df5372\"\n\n[[package]]\nname = \"version_check\"\nversion = \"0.9.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"5fecdca9a5291cc2b8dcf7dc02453fee791a280f3743cb0905f8822ae463b3fe\"\n\n[[package]]\nname = \"virtio\"\nversion = \"0.1.0\"\ndependencies = [\n \"bitflags\",\n \"kerla_api\",\n \"kerla_utils\",\n \"memoffset\",\n]\n\n[[package]]\nname = \"virtio_net\"\nversion = \"0.1.0\"\ndependencies = [\n \"bitflags\",\n \"kerla_api\",\n \"kerla_utils\",\n \"memoffset\",\n \"virtio\",\n]\n\n[[package]]\nname = \"vte\"\nversion = \"0.10.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"6cbce692ab4ca2f1f3047fcf732430249c0e971bfdd2b234cf2c47ad93af5983\"\ndependencies = [\n \"arrayvec 0.5.2\",\n \"utf8parse\",\n \"vte_generate_state_changes\",\n]\n\n[[package]]\nname = \"vte_generate_state_changes\"\nversion = \"0.1.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d257817081c7dffcdbab24b9e62d2def62e2ff7d00b1c20062551e6cccc145ff\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n]\n\n[[package]]\nname = \"wasi\"\nversion = \"0.10.2+wasi-snapshot-preview1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"fd6fbd9a79829dd1ad0cc20627bf1ed606756a7f77edff7b66b7064f9cb327c6\"\n\n[[package]]\nname = \"wyz\"\nversion = \"0.5.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"30b31594f29d27036c383b53b59ed3476874d518f0efb151b27a4c275141390e\"\ndependencies = [\n \"tap\",\n]\n\n[[package]]\nname = \"x86\"\nversion = \"0.47.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"55b5be8cc34d017d8aabec95bc45a43d0f20e8b2a31a453cabc804fe996f8dca\"\ndependencies = [\n \"bit_field\",\n \"bitflags\",\n \"raw-cpuid\",\n]\n"
        },
        {
          "name": "Cargo.toml",
          "type": "blob",
          "size": 0.21875,
          "content": "[workspace]\nmembers = [\n    \"runtime\",\n    \"kernel\",\n    \"libs/*\",\n    \"exts/*\",\n]\n\n[profile.release]\nopt-level = 3\ncodegen-units = 1\nlto = true\ndebug = 1\nincremental = false\ndebug-assertions = false\noverflow-checks = false\n"
        },
        {
          "name": "Documentation",
          "type": "tree",
          "content": null
        },
        {
          "name": "LICENSE.md",
          "type": "blob",
          "size": 10.6787109375,
          "content": "# License\n\nThis software is dual-licensed: MIT license and/or Apache license version 2.0 .\n\n\n## MIT license\n\n```\nPermission is hereby granted, free of charge, to any\nperson obtaining a copy of this software and associated\ndocumentation files (the \"Software\"), to deal in the\nSoftware without restriction, including without\nlimitation the rights to use, copy, modify, merge,\npublish, distribute, sublicense, and/or sell copies of\nthe Software, and to permit persons to whom the Software\nis furnished to do so, subject to the following\nconditions:\n\nThe above copyright notice and this permission notice\nshall be included in all copies or substantial portions\nof the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF\nANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED\nTO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A\nPARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT\nSHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\nOF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR\nIN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\nDEALINGS IN THE SOFTWARE.\n```\n\n\n###### **_and/or_** \n\n\n\n## Apache license version 2.0\n\n```\n                              Apache License\n                        Version 2.0, January 2004\n                     http://www.apache.org/licenses/\n\nTERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n1. Definitions.\n\n   \"License\" shall mean the terms and conditions for use, reproduction,\n   and distribution as defined by Sections 1 through 9 of this document.\n\n   \"Licensor\" shall mean the copyright owner or entity authorized by\n   the copyright owner that is granting the License.\n\n   \"Legal Entity\" shall mean the union of the acting entity and all\n   other entities that control, are controlled by, or are under common\n   control with that entity. For the purposes of this definition,\n   \"control\" means (i) the power, direct or indirect, to cause the\n   direction or management of such entity, whether by contract or\n   otherwise, or (ii) ownership of fifty percent (50%) or more of the\n   outstanding shares, or (iii) beneficial ownership of such entity.\n\n   \"You\" (or \"Your\") shall mean an individual or Legal Entity\n   exercising permissions granted by this License.\n\n   \"Source\" form shall mean the preferred form for making modifications,\n   including but not limited to software source code, documentation\n   source, and configuration files.\n\n   \"Object\" form shall mean any form resulting from mechanical\n   transformation or translation of a Source form, including but\n   not limited to compiled object code, generated documentation,\n   and conversions to other media types.\n\n   \"Work\" shall mean the work of authorship, whether in Source or\n   Object form, made available under the License, as indicated by a\n   copyright notice that is included in or attached to the work\n   (an example is provided in the Appendix below).\n\n   \"Derivative Works\" shall mean any work, whether in Source or Object\n   form, that is based on (or derived from) the Work and for which the\n   editorial revisions, annotations, elaborations, or other modifications\n   represent, as a whole, an original work of authorship. For the purposes\n   of this License, Derivative Works shall not include works that remain\n   separable from, or merely link (or bind by name) to the interfaces of,\n   the Work and Derivative Works thereof.\n\n   \"Contribution\" shall mean any work of authorship, including\n   the original version of the Work and any modifications or additions\n   to that Work or Derivative Works thereof, that is intentionally\n   submitted to Licensor for inclusion in the Work by the copyright owner\n   or by an individual or Legal Entity authorized to submit on behalf of\n   the copyright owner. For the purposes of this definition, \"submitted\"\n   means any form of electronic, verbal, or written communication sent\n   to the Licensor or its representatives, including but not limited to\n   communication on electronic mailing lists, source code control systems,\n   and issue tracking systems that are managed by, or on behalf of, the\n   Licensor for the purpose of discussing and improving the Work, but\n   excluding communication that is conspicuously marked or otherwise\n   designated in writing by the copyright owner as \"Not a Contribution.\"\n\n   \"Contributor\" shall mean Licensor and any individual or Legal Entity\n   on behalf of whom a Contribution has been received by Licensor and\n   subsequently incorporated within the Work.\n\n2. Grant of Copyright License. Subject to the terms and conditions of\n   this License, each Contributor hereby grants to You a perpetual,\n   worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n   copyright license to reproduce, prepare Derivative Works of,\n   publicly display, publicly perform, sublicense, and distribute the\n   Work and such Derivative Works in Source or Object form.\n\n3. Grant of Patent License. Subject to the terms and conditions of\n   this License, each Contributor hereby grants to You a perpetual,\n   worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n   (except as stated in this section) patent license to make, have made,\n   use, offer to sell, sell, import, and otherwise transfer the Work,\n   where such license applies only to those patent claims licensable\n   by such Contributor that are necessarily infringed by their\n   Contribution(s) alone or by combination of their Contribution(s)\n   with the Work to which such Contribution(s) was submitted. If You\n   institute patent litigation against any entity (including a\n   cross-claim or counterclaim in a lawsuit) alleging that the Work\n   or a Contribution incorporated within the Work constitutes direct\n   or contributory patent infringement, then any patent licenses\n   granted to You under this License for that Work shall terminate\n   as of the date such litigation is filed.\n\n4. Redistribution. You may reproduce and distribute copies of the\n   Work or Derivative Works thereof in any medium, with or without\n   modifications, and in Source or Object form, provided that You\n   meet the following conditions:\n\n   (a) You must give any other recipients of the Work or\n       Derivative Works a copy of this License; and\n\n   (b) You must cause any modified files to carry prominent notices\n       stating that You changed the files; and\n\n   (c) You must retain, in the Source form of any Derivative Works\n       that You distribute, all copyright, patent, trademark, and\n       attribution notices from the Source form of the Work,\n       excluding those notices that do not pertain to any part of\n       the Derivative Works; and\n\n   (d) If the Work includes a \"NOTICE\" text file as part of its\n       distribution, then any Derivative Works that You distribute must\n       include a readable copy of the attribution notices contained\n       within such NOTICE file, excluding those notices that do not\n       pertain to any part of the Derivative Works, in at least one\n       of the following places: within a NOTICE text file distributed\n       as part of the Derivative Works; within the Source form or\n       documentation, if provided along with the Derivative Works; or,\n       within a display generated by the Derivative Works, if and\n       wherever such third-party notices normally appear. The contents\n       of the NOTICE file are for informational purposes only and\n       do not modify the License. You may add Your own attribution\n       notices within Derivative Works that You distribute, alongside\n       or as an addendum to the NOTICE text from the Work, provided\n       that such additional attribution notices cannot be construed\n       as modifying the License.\n\n   You may add Your own copyright statement to Your modifications and\n   may provide additional or different license terms and conditions\n   for use, reproduction, or distribution of Your modifications, or\n   for any such Derivative Works as a whole, provided Your use,\n   reproduction, and distribution of the Work otherwise complies with\n   the conditions stated in this License.\n\n5. Submission of Contributions. Unless You explicitly state otherwise,\n   any Contribution intentionally submitted for inclusion in the Work\n   by You to the Licensor shall be under the terms and conditions of\n   this License, without any additional terms or conditions.\n   Notwithstanding the above, nothing herein shall supersede or modify\n   the terms of any separate license agreement you may have executed\n   with Licensor regarding such Contributions.\n\n6. Trademarks. This License does not grant permission to use the trade\n   names, trademarks, service marks, or product names of the Licensor,\n   except as required for reasonable and customary use in describing the\n   origin of the Work and reproducing the content of the NOTICE file.\n\n7. Disclaimer of Warranty. Unless required by applicable law or\n   agreed to in writing, Licensor provides the Work (and each\n   Contributor provides its Contributions) on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n   implied, including, without limitation, any warranties or conditions\n   of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n   PARTICULAR PURPOSE. You are solely responsible for determining the\n   appropriateness of using or redistributing the Work and assume any\n   risks associated with Your exercise of permissions under this License.\n\n8. Limitation of Liability. In no event and under no legal theory,\n   whether in tort (including negligence), contract, or otherwise,\n   unless required by applicable law (such as deliberate and grossly\n   negligent acts) or agreed to in writing, shall any Contributor be\n   liable to You for damages, including any direct, indirect, special,\n   incidental, or consequential damages of any character arising as a\n   result of this License or out of the use or inability to use the\n   Work (including but not limited to damages for loss of goodwill,\n   work stoppage, computer failure or malfunction, or any and all\n   other commercial damages or losses), even if such Contributor\n   has been advised of the possibility of such damages.\n\n9. Accepting Warranty or Additional Liability. While redistributing\n   the Work or Derivative Works thereof, You may choose to offer,\n   and charge a fee for, acceptance of support, warranty, indemnity,\n   or other liability obligations and/or rights consistent with this\n   License. However, in accepting such obligations, You may act only\n   on Your own behalf and on Your sole responsibility, not on behalf\n   of any other Contributor, and only if You agree to indemnify,\n   defend, and hold each Contributor harmless for any liability\n   incurred by, or claims asserted against, such Contributor by reason\n   of your accepting any such warranty or additional liability.\n\nEND OF TERMS AND CONDITIONS\n```\n--- \n \n"
        },
        {
          "name": "Makefile",
          "type": "blob",
          "size": 5.6162109375,
          "content": "# Default values for build system.\nexport V          ?=\nexport GUI        ?=\nexport RELEASE    ?=\nexport ARCH       ?= x64\nexport LOG        ?=\nexport LOG_SERIAL ?=\nexport CMDLINE    ?=\nexport QEMU_ARGS  ?=\n\n# The default build target.\n.PHONY: default\ndefault: build\n\n# Disable builtin implicit rules and variables.\nMAKEFLAGS += --no-builtin-rules --no-builtin-variables\n.SUFFIXES:\n\n# Enable verbose output if $(V) is set.\nifeq ($(V),)\n.SILENT:\nendif\n\n# $(IMAGE): Use a Docker image for initramfs.\nifeq ($(IMAGE),)\nINITRAMFS_PATH := build/testing.initramfs\nexport INIT_SCRIPT := /bin/sh\nelse\nIMAGE_FILENAME := $(subst /,.s,$(IMAGE))\nINITRAMFS_PATH := build/$(IMAGE_FILENAME).initramfs\nexport INIT_SCRIPT := $(shell tools/inspect-init-in-docker-image.py $(IMAGE))\nendif\n\nDUMMY_INITRAMFS_PATH := build/dummy-for-lint.initramfs\n\n# Set the platform name for docker image cross compiling.\nifeq ($(ARCH),x64)\ndocker_platform = linux/amd64\nendif\n\nifeq ($(docker_platform),)\n$(error \"docker_platform is not set for $(ARCH)!\")\nendif\n\ntopdir      := $(PWD)\nbuild_mode  := $(if $(RELEASE),release,debug)\ntarget_json := kernel/arch/$(ARCH)/$(ARCH).json\nkernel_elf := kerla.$(ARCH).elf\nstripped_kernel_elf := kerla.$(ARCH).stripped.elf\nkernel_symbols := $(kernel_elf:.elf=.symbols)\n\nPROGRESS   := printf \"  \\\\033[1;96m%8s\\\\033[0m  \\\\033[1;m%s\\\\033[0m\\\\n\"\nPYTHON3    ?= python3\nCARGO      ?= cargo\nBOCHS      ?= bochs\nNM         ?= rust-nm\nREADELF    ?= readelf\nSTRIP      ?= rust-strip\nDRAWIO     ?= /Applications/draw.io.app/Contents/MacOS/draw.io\n\nexport RUSTFLAGS = -Z emit-stack-sizes\nCARGOFLAGS += -Z build-std=core,alloc -Z build-std-features=compiler-builtins-mem\nCARGOFLAGS += --target $(target_json)\nCARGOFLAGS += $(if $(RELEASE),--release,)\nTESTCARGOFLAGS += --package kerla_kernel -Z unstable-options\nTESTCARGOFLAGS += --config \"target.$(ARCH).runner = './tools/run-unittests.sh'\"\nWATCHFLAGS += --clear\n\nexport CARGO_FROM_MAKE=1\nexport INITRAMFS_PATH\nexport ARCH\nexport PYTHON3\nexport NM\n\n#\n#  Build Commands\n#\n.PHONY: build\nbuild:\n\t$(MAKE) build-crate\n\tcp target/$(ARCH)/$(build_mode)/kerla_kernel $(kernel_elf)\n\n\t$(PROGRESS) \"NM\" $(kernel_symbols)\n\t$(NM) $(kernel_elf) | rustfilt | awk '{ $$2=\"\"; print $$0 }' > $(kernel_symbols)\n\n\t$(PROGRESS) \"SYMBOLS\" $(kernel_elf)\n\t$(PYTHON3) tools/embed-symbol-table.py $(kernel_symbols) $(kernel_elf)\n\n\t$(PROGRESS) \"STRIP\" $(stripped_kernel_elf)\n\t$(STRIP) $(kernel_elf) -o $(stripped_kernel_elf)\n\n.PHONY: build-crate\nbuild-crate:\n\t$(MAKE) initramfs\n\n\t$(PROGRESS) \"CARGO\" \"kernel\"\n\t$(CARGO) build $(CARGOFLAGS) --manifest-path kernel/Cargo.toml\n\n.PHONY: initramfs\ninitramfs: $(INITRAMFS_PATH)\n\n.PHONY: buildw\nbuildw:\n\t$(CARGO) watch $(WATCHFLAGS) -s \"$(MAKE) build-crate\"\n\n.PHONY: iso\niso: build\n\t$(PROGRESS) MKISO kerla.iso\n\tmkdir -p isofiles/boot/grub\n\tcp boot/grub.cfg isofiles/boot/grub/grub.cfg\n\tcp $(stripped_kernel_elf) isofiles/kerla.elf\n\tgrub-mkrescue -o kerla.iso isofiles\n\n.PHONY: run\nrun: build\n\t$(PYTHON3) tools/run-qemu.py                                           \\\n\t\t--arch $(ARCH)                                                 \\\n\t\t$(if $(GUI),--gui,)                                            \\\n\t\t$(if $(KVM),--kvm,)                                            \\\n\t\t$(if $(GDB),--gdb,)                                            \\\n\t\t$(if $(LOG),--append-cmdline \"log=$(LOG)\",)                    \\\n\t\t$(if $(CMDLINE),--append-cmdline \"$(CMDLINE)\",)                \\\n\t\t$(if $(LOG_SERIAL),--log-serial \"$(LOG_SERIAL)\",)              \\\n\t\t$(if $(QEMU),--qemu $(QEMU),)                                  \\\n\t\t$(kernel_elf) -- $(QEMU_ARGS)\n\n.PHONY: bochs\nbochs: iso\n\t$(BOCHS) -qf boot/bochsrc\n\n.PHONY: test\ntest:\n\t$(MAKE) initramfs\n\t$(CARGO) test $(CARGOFLAGS) $(TESTCARGOFLAGS)\n\n.PHONY: testw\ntestw:\n\t$(CARGO) watch $(WATCHFLAGS) -s \"$(MAKE) test\"\n\n.PHONY: check\ncheck:\n\t$(MAKE) $(DUMMY_INITRAMFS_PATH)\n\tINITRAMFS_PATH=$(DUMMY_INITRAMFS_PATH) $(CARGO) check $(CARGOFLAGS)\n\n.PHONY: checkw\ncheckw:\n\t$(CARGO) watch $(WATCHFLAGS) -s \"$(MAKE) check\"\n\n.PHONY: docs\ndocs:\n\t$(PROGRESS) \"MDBOOK\" build/docs\n\tmkdir -p build\n\tmake doc-images\n\tmdbook build -d $(topdir)/build/docs Documentation\n\n.PHONY: doc-images\ndoc-images: $(patsubst %.drawio, %.svg, $(wildcard Documentation/*.drawio))\n\n.PHONY: docsw\ndocsw:\n\tmkdir -p build\n\tmdbook serve -d $(topdir)/build/docs Documentation\n\n.PHONY: src-docs\nsrc-docs:\n\tRUSTFLAGS=\"-C panic=abort -Z panic_abort_tests\" $(CARGO) doc\n\n.PHONY: lint\nlint:\n\t$(MAKE) $(DUMMY_INITRAMFS_PATH)\n\tINITRAMFS_PATH=$(DUMMY_INITRAMFS_PATH) RUSTFLAGS=\"-C panic=abort -Z panic_abort_tests\" $(CARGO) clippy\n\n.PHONY: strict-lint\nstrict-lint:\n\t$(MAKE) $(DUMMY_INITRAMFS_PATH)\n\tINITRAMFS_PATH=$(DUMMY_INITRAMFS_PATH) RUSTFLAGS=\"-C panic=abort -Z panic_abort_tests\" $(CARGO) clippy -- -D warnings\n\n.PHONY: lint-and-fix\nlint-and-fix:\n\t$(MAKE) $(DUMMY_INITRAMFS_PATH)\n\tINITRAMFS_PATH=$(DUMMY_INITRAMFS_PATH) RUSTFLAGS=\"-C panic=abort -Z panic_abort_tests\" $(CARGO) clippy --fix -Z unstable-options\n\n.PHONY: print-stack-sizes\nprint-stack-sizes: build\n\t$(READELF) --stack-sizes $(kernel_elf) | sort -n | rustfilt\n\n.PHONY: clean\nclean:\n\t$(CARGO) clean\n\trm -rf *.elf *.iso *.bin *.symbols isofiles\n\n#\n#  Build Rules\n#\nbuild/testing.initramfs: $(wildcard testing/*) $(wildcard testing/*/*) Makefile\n\t$(PROGRESS) \"BUILD\" testing\n\tcd testing && docker buildx build --platform $(docker_platform) -t kerla-testing .\n\t$(PROGRESS) \"EXPORT\" testing\n\tmkdir -p build\n\t$(PYTHON3) tools/docker2initramfs.py $@ kerla-testing\n\nbuild/$(IMAGE_FILENAME).initramfs: tools/docker2initramfs.py Makefile\n\t$(PROGRESS) \"EXPORT\" $(IMAGE)\n\tmkdir -p build\n\t$(PYTHON3) tools/docker2initramfs.py $@ $(IMAGE)\n\n$(DUMMY_INITRAMFS_PATH):\n\tmkdir -p $(@D)\n\ttouch $@\n\n%.svg: %.drawio\n\t$(PROGRESS) \"DRAWIO\" $@\n\t$(DRAWIO) -x -f svg -o $@ $<\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 4.634765625,
          "content": "# Kerla\n\n![screenshot](screenshot.png)\n\nKerla is a monolithic operating system kernel written from scratch in Rust which aims to be\ncompatible with the Linux ABI, that is, it runs Linux binaries without any modifications.\n\n- Implements *NIX process concepts: context switching, signals, `fork(2)`, `execve(2)`, `wait4(2)`, etc.\n- Supports commonly used system calls like `write(2)`, `stat(2)`, `mmap(2)`, `pipe(2)`, `poll(2)`, ...\n- No disk support for now: initramfs is mounted as the root file system.\n- Pseudo file systems: tmpfs and devfs.\n- [smoltcp](https://github.com/smoltcp-rs/smoltcp)-based TCP/IP support.\n- Implements tty and pseudo terminal (pty).\n- Supports QEMU and Firecracker (with virtio-net device driver).\n- Supports x86_64.\n- Docker-based initramfs build system.\n\n***Check out [my blog post](https://seiya.me/writing-linux-clone-in-rust) for motivation and my thoughts on writing an OS kernel in Rust.***\n\n> [!IMPORTANT]\n> \n> This software is no longer maintained. If you are interested in a modern OS written in Rust, check out my new project **[Starina](https://starina.dev)**.\n\n## Demo: SSH into Kerla!\n\nYou can play with Kerla over ssh. Your login is not visible from others (except\nme): we automatically launch a dedicated microVM on Firecracker for each TCP\nconnection.\n\n```\n$ ssh root@demo.kerla.dev\n```\n\nIf you found bugs or missing features, let me know on GitHub issues :)\n\n## Running a Docker Image (experimental)\n\nYou can run a Docker image as a root file system (not as a container!) on Kerla Kernel instead of our initramfs built from `initramfs` directory.\n\nFor example, to run [nuta/helloworld](https://hub.docker.com/r/nuta/helloworld) image ([Dockerfile](https://gist.github.com/nuta/4c9ecd0d1a401dc5be88095bea5a991a)), try the following command:\n\n```\n$ make IMAGE=nuta/helloworld run\n...\n[   0.029] syscall: execve(439398, 4393b8, 4393c8, 8, 2f2f2f2f2f2f2f2f, 8080808080808080)\n[   0.030] syscall: arch_prctl(1002, 4055d8, 0, 20000, 0, ff)\n[   0.031] syscall: set_tid_address(4057f0, 4055d8, 0, 20000, 0, ff)\n[   0.033] syscall: ioctl(1, 5413, 9ffffeed0, 1, 405040, 9ffffeef7)\n\n _          _ _                            _     _ _\n| |__   ___| | | ___   __      _____  _ __| | __| | |\n| '_ \\ / _ \\ | |/ _ \\  \\ \\ /\\ / / _ \\| '__| |/ _` | |\n| | | |  __/ | | (_) |  \\ V  V / (_) | |  | | (_| |_|\n|_| |_|\\___|_|_|\\___/    \\_/\\_/ \\___/|_|  |_|\\__,_(_)\n```\n\nThis feature is in a very early stage and I guess **almost all images out there won't work** because:\n\n- They tend to be too large to be embedded into the kernel image.\n- They might use unimplemented features (e.g. position-independent executables used in Alpine Linux).\n\n## Building and Running the OS\n\nSee [Quickstart](https://kerla.dev/docs/quickstart.html) for instructions on building from source, running on emulators, etc.\n\n## Current Roadmap\n[Roadmap - Run a Node.js Web Application on Kerla on Firecracker on AWS](https://github.com/nuta/kerla/projects/1)\n\n## Compatibility\n\nSee [here](https://github.com/nuta/kerla/blob/main/Documentation/compatibility.md) for the current status.\n\n## Contributing\n\nSend me bug reports, feature requests, and patches on [GitHub](https://github.com/nuta/kerla) for example:\n\n- **Implementing missing features:** majority of existing Linux applications won't work due to the lack of features.\n- **Writing documentation:** I think Kerla could be good material to learn how an operating system kernel works.\n- **Trying to experiment with Rust-y ideas:** for example currently I'm interested in [GhostCell](http://plv.mpi-sws.org/rustbelt/ghostcell/).\n\n## License\n\nSee [LICENSE.md](https://github.com/nuta/kerla/blob/main/LICENSE.md).\n\n## Related Work\n\nEmulating Linux ABI is not a novel work. Some UNIX-like kernels like [FreeBSD](https://docs.freebsd.org/en_US.ISO8859-1/articles/linux-emulation/article.html) and [NetBSD](https://www.netbsd.org/docs/guide/en/chap-linux.html) already have their own Linux emulation layers. Windows has a well-known feature called [Windows Subsystem for Linux (WSL)](https://github.com/microsoft/WSL) which enables running Linux binaries seamlessly. WSL 1 implements the feature by ABI emulation. WSL 2 runs the real Linux kernel using the hardware-accelerated virtualization (Hyper-V).\n\nAside from general-purpose operating systems, there're some attractive projects related to the Linux ABI emualtion. [OSv](https://github.com/cloudius-systems/osv/wiki/OSv-Linux-ABI-Compatibility) is a unikernel which runs unmodified Linux binaries. [rCore](https://github.com/rcore-os/rCore) is a teaching operating system which implements the Linux ABI in Rust. [Noah](https://dl.acm.org/doi/10.1145/3381052.3381327) suggests an intriguing approach to run unmodified Linux binaries on macOS.\n"
        },
        {
          "name": "boot",
          "type": "tree",
          "content": null
        },
        {
          "name": "boot2dump",
          "type": "tree",
          "content": null
        },
        {
          "name": "demo",
          "type": "tree",
          "content": null
        },
        {
          "name": "exts",
          "type": "tree",
          "content": null
        },
        {
          "name": "kerla.dev",
          "type": "tree",
          "content": null
        },
        {
          "name": "kernel",
          "type": "tree",
          "content": null
        },
        {
          "name": "libs",
          "type": "tree",
          "content": null
        },
        {
          "name": "runtime",
          "type": "tree",
          "content": null
        },
        {
          "name": "rust-toolchain.toml",
          "type": "blob",
          "size": 0.111328125,
          "content": "[toolchain]\nchannel = \"nightly-2024-01-01\"\ncomponents = [ \"rustfmt\", \"clippy\", \"llvm-tools-preview\", \"rust-src\" ]\n"
        },
        {
          "name": "screenshot.png",
          "type": "blob",
          "size": 68.7685546875,
          "content": null
        },
        {
          "name": "testing",
          "type": "tree",
          "content": null
        },
        {
          "name": "tools",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}