{
  "metadata": {
    "timestamp": 1736709319576,
    "page": 714,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjcyMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "zboxfs/zbox",
      "stars": 1544,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.5751953125,
          "content": "# Generated by Cargo\n# will have compiled files and executables\n/target/\n\n# Fuzz test directory\n/fuzz_test/\n\n# Remove Cargo.lock from gitignore if creating an executable, leave it for libraries\n# More information here http://doc.crates.io/guide.html#cargotoml-vs-cargolock\nCargo.lock\n\n# Object files\n*.o\n*.ko\n*.obj\n*.elf\n\n# Precompiled Headers\n*.gch\n*.pch\n\n# Libraries\n*.lib\n*.a\n*.la\n*.lo\n\n# Shared objects (inc. Windows DLLs)\n*.dll\n*.so\n*.so.*\n*.dylib\n\n# Executables\n*.exe\n*.out\n*.app\n*.i*86\n*.x86_64\n*.hex\n\n# Misc files\n*.log\n.DS_Store\n\n# Debug symbols\n**/*.dSYM/*\n\n# Build files\n/build\n"
        },
        {
          "name": "CODE_OF_CONDUCT.md",
          "type": "blob",
          "size": 3.1376953125,
          "content": "# Contributor Covenant Code of Conduct\n\n## Our Pledge\n\nIn the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to making participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, gender identity and expression, level of experience, nationality, personal appearance, race, religion, or sexual identity and orientation.\n\n## Our Standards\n\nExamples of behavior that contributes to creating a positive environment include:\n\n* Using welcoming and inclusive language\n* Being respectful of differing viewpoints and experiences\n* Gracefully accepting constructive criticism\n* Focusing on what is best for the community\n* Showing empathy towards other community members\n\nExamples of unacceptable behavior by participants include:\n\n* The use of sexualized language or imagery and unwelcome sexual attention or advances\n* Trolling, insulting/derogatory comments, and personal or political attacks\n* Public or private harassment\n* Publishing others' private information, such as a physical or electronic address, without explicit permission\n* Other conduct which could reasonably be considered inappropriate in a professional setting\n\n## Our Responsibilities\n\nProject maintainers are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response to any instances of unacceptable behavior.\n\nProject maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful.\n\n## Scope\n\nThis Code of Conduct applies both within project spaces and in public spaces when an individual is representing the project or its community. Examples of representing a project or community include using an official project e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event. Representation of a project may be further defined and clarified by project maintainers.\n\n## Enforcement\n\nInstances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting the project team at support@zbox.io. The project team will review and investigate all complaints, and will respond in a way that it deems appropriate to the circumstances. The project team is obligated to maintain confidentiality with regard to the reporter of an incident. Further details of specific enforcement policies may be posted separately.\n\nProject maintainers who do not follow or enforce the Code of Conduct in good faith may face temporary or permanent repercussions as determined by other members of the project's leadership.\n\n## Attribution\n\nThis Code of Conduct is adapted from the [Contributor Covenant][homepage], version 1.4, available at [http://contributor-covenant.org/version/1/4][version]\n\n[homepage]: http://contributor-covenant.org\n[version]: http://contributor-covenant.org/version/1/4/\n\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 4.6591796875,
          "content": "# Contributing to ZboxFS\n\nZboxFS welcomes contribution from everyone in the form of suggestions, bug\nreports, pull requests, and feedback. This document gives some guidance if you\nare thinking of helping us.\n\nPlease reach out here in a GitHub issue if we can do anything to help you\ncontribute.\n\n## Submitting bug reports and feature requests\n\nWhen reporting a bug or asking for help, please include enough details so that\nthe people helping you can reproduce the behavior you are seeing. For some tips\non how to approach this, read about how to produce a [Minimal, Complete, and\nVerifiable example].\n\n[Minimal, Complete, and Verifiable example]: https://stackoverflow.com/help/mcve\n\nWhen making a feature request, please make it clear what problem you intend to\nsolve with the feature, any ideas for how ZboxFS could support solving that\nproblem, any possible alternatives, and any disadvantages.\n\n## Formatting code\n\nWe are using [rustfmt](https://github.com/rust-lang-nursery/rustfmt) to format\nsource code. The Formatting rules are defined in `rustfmt.toml` file. Please\nmake sure you have run `cargo fmt` before submitting code.\n\nYou can also use some IDEs, such as Vim, which support `rustfmt` to\nautomatically format code while you're editing.\n\n## Branching\n\nZboxFS has two main branches, both branches should always be compilable and\npassed all the unit and integration tests before pushed to GitHub.\n\n- [master](https://github.com/zboxfs/zbox/tree/master)\n\n  This branch contains latest development code, pull request should be merged\n  to this branch.\n\n- [stable](https://github.com/zboxfs/zbox/tree/stable)\n\n  This branch always contains stable code and is mainly for releasing. Release\n  tags are applied to this branch.\n\nThere are some other short-lifetime branches, such as release branch and bug\nfix branch. Those branches should based on `master` branch, and will be\neventually merged back to `master`. Those branches should also regularly use\n`rebase` to sync latest commits from `master`.\n\n## Debugging\n\nZboxFS uses [env_logger](https://crates.io/crates/env_logger) to output debug\ninformation. You can use the below environment variable to enable debug log\noutput.\n\n```bash\nexport RUST_LOG=zbox=debug\n```\n\nAlso, this `RUST_BACKTRACE` variable could be helpful when debugging.\n\n```bash\nexport RUST_BACKTRACE=full\n```\n\n## Running the test suite\n\nWe encourage you to check that the test suite passes locally before submitting a\npull request with your changes. If anything does not pass, typically it will be\neasier to iterate and fix it locally than waiting for the CI servers to run\ntests for you.\n\nIn the `zbox` directory, you can run different test suites. To see more\ndetails, please check [cargo manual](http://doc.crates.io/guide.html).\n\n### Run unit test suite\n\n```bash\ncargo test --lib\n```\n\n### Run integration test suite\n\n```bash\ncargo test --tests\n```\n\n### Run documentation test suite\n\n```bash\ncargo test --doc\n```\n\n### Run fuzz test\n\nZboxFS contains fuzz test, which is included in the integration test suite.\nTo save test time, the default number of fuzz test iteration is very low.\nYou can increase the number of batch and round by modifing the\n[fuzz.rs](tests/fuzz.rs) file to perform intensive fuzz test.\n\nThe fuzz test will save test cases in `fuzz_test` folder under current\ndirectory. Each fuzz test batch will be assigned a unique number which will be\nshown on screen during the test. In case of failure, you can use that number to\nreproduce the failed test case. Please check more details in the\n[fuzz.rs](tests/fuzz.rs) file.\n\nRun the fuzz test separately:\n\n ```bash\n cargo test --tests fuzz_test --features storage-file -- --nocapture\n ```\n\n### Run random IO error test\n\nFor file system test, we need to simulate many IO error scenerios which is\nhard because OS file system IO errors are very rare. To solve this problem,\nZboxFS uses a special storage `faulty` to simulate random IO errors. This storage\nis based on memory storage, but can generate random IO error deterministically.\nThe generator can be switched on and off on the fly, and the error probability\nis also adjustable.\n\nRun random IO error test, we need to turn on `storage-faulty` feature:\n\n```bash\ncargo test --tests fuzz_test --features storage-faulty -- --nocapture\n```\n\n### Run performance test\n\nTo run performance test cases, we need to turn on the feature `test-perf`. And\nthe performance test should be run under `release` mode otherwise the result\nwill not be accurate.\n\nRun performance test:\n\n```bash\ncargo test --tests perf_test --release --features test-perf -- --nocapture\n```\n\n## Code of Conduct\n\nIn all ZboxFS-related forums, we follow the [Code of Conduct](CODE_OF_CONDUCT.md).\nFor escalation or moderation issues please contact us (support@zbox.io).\n\n"
        },
        {
          "name": "Cargo.toml",
          "type": "blob",
          "size": 2.974609375,
          "content": "[package]\nname = \"zbox\"\nversion = \"0.9.2\"\nauthors = [\"Bo Lu\"]\ndescription = \"ZboxFS is a zero-details, privacy-focused in-app file system.\"\ndocumentation = \"https://docs.rs/zbox\"\nhomepage = \"https://github.com/zboxfs/zbox\"\nrepository = \"https://github.com/zboxfs/zbox\"\nreadme = \"README.md\"\nkeywords = [\"filesystem\", \"crypto\", \"security\", \"privacy\", \"storage\"]\ncategories = [\"filesystem\", \"cryptography\"]\nlicense = \"Apache-2.0\"\nbuild = \"build.rs\"\nedition = \"2018\"\n\n# This feature will be enabled during the docs.rs build\n[package.metadata.docs.rs]\nfeatures = [\"docs-rs\"]\n\n[badges]\ntravis-ci = { repository = \"zboxfs/zbox\" }\n\n[lib]\nname = \"zbox\"\ncrate-type = [\"rlib\", \"cdylib\", \"staticlib\"]\n\n[profile.release]\nlto = true\nopt-level = 's'\n\n[features]\ndefault = [\"storage-mem\"]\n\n# performance test compilation flag\ntest-perf = [\"storage-file\"]\n\n# memory storage\nstorage-mem = []\n\n# file storage\nstorage-file = []\n\n# faulty storage for random io error test\nstorage-faulty = [\"storage-file\"]\n\n# sqlite storage\nstorage-sqlite = [\"libsqlite3-sys\"]\n\n# redis storage\nstorage-redis = [\"redis\"]\n\n# zbox storage base dependencies\nstorage-zbox = [\"http\", \"serde_json\"]\n\n# zbox storage with faulty transport, for test only\nstorage-zbox-faulty = [\"storage-zbox\"]\n\n# zbox storage with native transport\nstorage-zbox-native = [\"storage-zbox\", \"reqwest\", \"futures\", \"bytes\"]\n\n# zbox storage with android storage as local cache backend\nstorage-zbox-android = [\"storage-zbox\"]\n\n# build-in libsodium dependency\nlibsodium-bundled = []\n\n# feature for documentation build on docs.rs\ndocs-rs = []\n\n[dependencies]\ncfg-if = \"1.0.0\"\nenv_logger = \"0.9.0\"\nlog = \"0.4.14\"\nrmp-serde = \"0.15.5\"\nserde = { version = \"1.0.130\", features = [\"derive\"] }\nlazy_static = \"1.4.0\"\nlibsqlite3-sys = { version = \"0.22.2\", optional = true }\nredis = { version = \"0.21.2\", optional = true }\nhttp  = { version = \"0.2.5\", optional = true }\nserde_json = { version = \"1.0.68\", optional = true }\nreqwest = { version = \"0.11.4\", default-features = false, features = [\"rustls-tls\"], optional = true }\nfutures = { version = \"0.3.17\", features = [\"executor\"], optional = true }\nbytes = { version = \"1.1.0\", optional = true }\n\n[dependencies.linked-hash-map]\nversion = \"0.5.4\"\nfeatures = [\"serde_impl\"]\n\n[target.'cfg(target_os = \"android\")'.dependencies]\njni = \"0.19.0\"\n\n[target.'cfg(target_arch = \"wasm32\")'.dependencies]\nwasm-bindgen = { version = \"0.2.50\", features = [\"serde-serialize\"] }\njs-sys = { version = \"0.3.27\" }\nweb-sys = { version = \"0.3.27\", features = [\"Crypto\", \"WorkerGlobalScope\", \"XmlHttpRequest\", \"XmlHttpRequestResponseType\", \"Blob\"] }\n\n[dev-dependencies]\nbytes = \"1.1.0\"\ntempdir = \"0.3.7\"\nrand = \"0.8.4\"\nrand_xorshift = \"0.3.0\"\ntokio = { version = \"1.12.0\", features = [\"rt\", \"net\", \"macros\", \"rt-multi-thread\"] }\n\n[build-dependencies]\npkg-config = \"0.3.20\"\ncc = \"1.0.70\"\n\n[target.'cfg(target_os = \"windows\")'.build-dependencies]\nlibflate = \"1.1.1\"\nreqwest = { version = \"0.11.4\", default-features = false, features = [\"rustls-tls\"] }\ntar = \"0.4.37\"\ntempfile = \"3.2.0\"\nzip = \"0.5.13\"\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 11.08203125,
          "content": "                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"{}\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright 2017 - present, ZboxFS.\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 15.1845703125,
          "content": "<img src=\"https://zboxfs.github.io/zbox/images/logo.svg\" alt=\"ZboxFS Logo\" height=\"96\" /> ZboxFS\n======\n[![GitHub action](https://github.com/zboxfs/zbox/workflows/build/badge.svg)](https://github.com/zboxfs/zbox/actions)\n[![Crates.io](https://img.shields.io/crates/d/zbox.svg)](https://crates.io/crates/zbox)\n[![Crates.io](https://img.shields.io/crates/v/zbox.svg)](https://crates.io/crates/zbox)\n[![GitHub last commit](https://img.shields.io/github/last-commit/zboxfs/zbox.svg)](https://github.com/zboxfs/zbox)\n[![license](https://img.shields.io/github/license/zboxfs/zbox.svg)](https://github.com/zboxfs/zbox)\n[![GitHub stars](https://img.shields.io/github/stars/zboxfs/zbox.svg?style=social&label=Stars)](https://github.com/zboxfs/zbox)\n\nZboxFS is a zero-details, privacy-focused in-app file system. Its goal is\nto help application store files securely, privately and reliably. By\nencapsulating files and directories into an encrypted repository, it provides\na virtual file system and exclusive access to authorised application.\n\nUnlike other system-level file systems, such as [ext4], [XFS] and [Btrfs], which\nprovide shared access to multiple processes, ZboxFS is a file system that runs\nin the same memory space as the application. It provides access to only one\nprocess at a time.\n\nBy abstracting IO access, ZboxFS supports a variety of underlying storage layers,\nincluding memory, OS file system, RDBMS and key-value object store.\n\n## Disclaimer\n\nZboxFS is under active development, we are not responsible for any data loss\nor leak caused by using it. Always back up your files and use at your own risk!\n\nFeatures\n========\n- Everything is encrypted :lock:, including metadata and directory structure,\n  no knowledge can be leaked to underlying storage\n- State-of-the-art cryptography: AES-256-GCM (hardware), XChaCha20-Poly1305,\n  Argon2 password hashing and etc., powered by [libsodium]\n- Support varieties of underlying storages, including memory, OS file system,\n  RDBMS, Key-value object store and more\n- Files and directories are packed into same-sized blocks to eliminate metadata\n  leakage\n- Content-based data chunk deduplication and file-based deduplication\n- Data compression using [LZ4] in fast mode, optional\n- Data integrity is guaranteed by authenticated encryption primitives (AEAD\n  crypto)\n- File contents versioning\n- Copy-on-write (COW :cow:) semantics\n- ACID transactional operations\n- Built with [Rust] :hearts:\n\n## Comparison\n\nMany OS-level file systems support encryption, such as [EncFS], [APFS] and\n[ZFS]. Some disk encryption tools also provide virtual file system, such as\n[TrueCrypt], [LUKS] and [VeraCrypt].\n\nThis diagram shows the difference between ZboxFS and them.\n\n![Comparison](https://zboxfs.github.io/zbox/images/zbox-compare.svg)\n\nBelow is the feature comparison list.\n\n|                             | ZboxFS                   | OS-level File Systems    | Disk Encryption Tools    |\n| --------------------------- | ------------------------ | ------------------------ | ------------------------ |\n| Encrypts file contents      | :heavy_check_mark:       | partial                  | :heavy_check_mark:       |\n| Encrypts file metadata      | :heavy_check_mark:       | partial                  | :heavy_check_mark:       |\n| Encrypts directory          | :heavy_check_mark:       | partial                  | :heavy_check_mark:       |\n| Data integrity              | :heavy_check_mark:       | partial                  | :heavy_multiplication_x: |\n| Shared access for processes | :heavy_multiplication_x: | :heavy_check_mark:       | :heavy_check_mark:       |\n| Deduplication               | :heavy_check_mark:       | :heavy_multiplication_x: | :heavy_multiplication_x: |\n| Compression                 | :heavy_check_mark:       | partial                  | :heavy_multiplication_x: |\n| Content versioning          | :heavy_check_mark:       | :heavy_multiplication_x: | :heavy_multiplication_x: |\n| COW semantics               | :heavy_check_mark:       | partial                  | :heavy_multiplication_x: |\n| ACID Transaction            | :heavy_check_mark:       | :heavy_multiplication_x: | :heavy_multiplication_x: |\n| Varieties of storages           | :heavy_check_mark:       | :heavy_multiplication_x: | :heavy_multiplication_x: |\n| API access                  | :heavy_check_mark:       | through VFS              | through VFS              |\n| Symbolic links              | :heavy_multiplication_x: | :heavy_check_mark:       | depends on inner FS      |\n| Users and permissions       | :heavy_multiplication_x: | :heavy_check_mark:       | :heavy_check_mark:       |\n| FUSE support                | :heavy_multiplication_x: | :heavy_check_mark:       | :heavy_check_mark:       |\n| Linux and macOS support     | :heavy_check_mark:       | :heavy_check_mark:       | :heavy_check_mark:       |\n| Windows support             | :heavy_check_mark:       | partial                  | :heavy_check_mark:       |\n\n## Supported Storage\n\nZboxFS supports a variety of underlying storages. Memory storage is enabled by\ndefault. All the other storages can be enabled individually by specifying its\ncorresponding Cargo feature when building ZboxFS.\n\n| Storage            | URI identifier  | Cargo Feature       |\n| ------------------ | --------------- | ------------------- |\n| Memory             | \"mem://\"        | N/A                 |\n| OS file system     | \"file://\"       | storage-file        |\n| SQLite             | \"sqlite://\"     | storage-sqlite      |\n| Redis              | \"redis://\"      | storage-redis       |\n| Zbox Cloud Storage | \"zbox://\"       | storage-zbox-native |\n\n\\* Visit [zbox.io](https://zbox.io) to learn more about Zbox Cloud Storage.\n\n## Specs\n\n| Algorithm and data structure         | Value                             |\n| ------------------------------------ | --------------------------------- |\n| Authenticated encryption             | AES-256-GCM or XChaCha20-Poly1305 |\n| Password hashing                     | Argon2                            |\n| Key derivation                       | BLAKE2B                           |\n| Content dedup                        | Rabin rolling hash                |\n| File dedup                           | Merkle tree                       |\n| Index structure                      | Log-structured merge-tree         |\n| Compression                          | LZ4 in fast mode                  |\n\n### Limits\n\n| Limit                                     | Value                        |\n| ----------------------------------------- | ---------------------------- |\n| Data block size                           | 8 KiB                        |\n| Maximum encryption frame size             | 128 KiB                      |\n| Super block size                          | 8 KiB                        |\n| Maximum filename length                   | No limit                     |\n| Allowable characters in directory entries | Any UTF-8 character except / |\n| Maximum pathname length                   | No limit                     |\n| Maximum file size                         | 16 EiB                       |\n| Maximum repo size                         | 16 EiB                       |\n| Max number of files                       | No limit                     |\n\n### Metadata\n\n| Metadata                                  | Value                        |\n| ----------------------------------------- | ---------------------------- |\n| Stores file owner                         | No                           |\n| POSIX file permissions                    | No                           |\n| Creation timestamps                       | Yes                          |\n| Last access / read timestamps             | No                           |\n| Last change timestamps                    | Yes                          |\n| Access control lists                      | No                           |\n| Security                                  | Integrated with crypto       |\n| Extended attributes                       | No                           |\n\n### Capabilities\n\n| Capability                                | Value                        |\n| ----------------------------------------- | ---------------------------- |\n| Hard links                                | No                           |\n| Symbolic links                            | No                           |\n| Case-sensitive                            | Yes                          |\n| Case-preserving                           | Yes                          |\n| File Change Log                           | By content versioning        |\n| Filesystem-level encryption               | Yes                          |\n| Data deduplication                        | Yes                          |\n| Data checksums                            | Integrated with crypto       |\n| Offline grow                              | No                           |\n| Online grow                               | Auto                         |\n| Offline shrink                            | No                           |\n| Online shrink                             | Auto                         |\n\n### Allocation and layout policies\n\n| Feature                     | Value                             |\n| --------------------------- | --------------------------------- |\n| Address allocation scheme   | Append-only, linear address space |\n| Sparse files                | No                                |\n| Transparent compression     | Yes                               |\n| Extents                     | No                                |\n| Copy on write               | Yes                               |\n\n### Storage fragmentation\n\n| Fragmentation                | Value                        |\n| ---------------------------- | ---------------------------- |\n| Memory storage               | No                           |\n| File storage                 | fragment unit size < 32 MiB  |\n| RDBMS storage                | No                           |\n| Key-value storage            | No                           |\n| Zbox cloud storage           | fragment unit size < 128 KiB |\n\nHow to use\n==========\nFor reference documentation, please visit [documentation](https://docs.rs/zbox).\n\n## Requirements\n\n- [Rust] stable >= 1.38\n- [libsodium] >= 1.0.17\n\n## Supported Platforms\n\n- 64-bit Debian-based Linux, such as Ubuntu\n- 64-bit macOS\n- 64-bit Windows\n- 64-bit Android, API level >= 21\n\n32-bit and other OS are `NOT` supported yet.\n\n## Usage\n\nAdd the following dependency to your `Cargo.toml`:\n\n```toml\n[dependencies]\nzbox = \"0.9.2\"\n```\n\nIf you don't want to install libsodium by yourself, simply specify\n`libsodium-bundled` feature in dependency, which will automatically download,\nverify and build libsodium.\n\n```toml\n[dependencies]\nzbox = { version = \"0.9.2\", features = [\"libsodium-bundled\"] }\n```\n\n## Example\n\n```rust\nextern crate zbox;\n\nuse std::io::{Read, Write, Seek, SeekFrom};\nuse zbox::{init_env, RepoOpener, OpenOptions};\n\nfn main() {\n    // initialise zbox environment, called first\n    init_env();\n\n    // create and open a repository in current OS directory\n    let mut repo = RepoOpener::new()\n        .create(true)\n        .open(\"file://./my_repo\", \"your password\")\n        .unwrap();\n\n    // create and open a file in repository for writing\n    let mut file = OpenOptions::new()\n        .create(true)\n        .open(&mut repo, \"/my_file.txt\")\n        .unwrap();\n\n    // use std::io::Write trait to write data into it\n    file.write_all(b\"Hello, World!\").unwrap();\n\n    // finish writing to make a permanent content version\n    file.finish().unwrap();\n\n    // read file content using std::io::Read trait\n    let mut content = String::new();\n    file.seek(SeekFrom::Start(0)).unwrap();\n    file.read_to_string(&mut content).unwrap();\n    assert_eq!(content, \"Hello, World!\");\n}\n```\n\n## Build with Docker\n\nZboxFS comes with [Docker] support, which made building ZboxFS easier. Check\neach repo for more details.\n\n- [zboxfs/base]\n  Base image for building ZboxFS on Linux\n\n- [zboxfs/wasm]\n  Docker image for building WebAssembly binding\n\n- [zboxfs/nodejs]\n  Docker image for building Node.js binding\n\n- [zboxfs/android]\n  Docker image for building Android Java binding\n\n## Static linking with libsodium\n\nBy default, ZboxFS uses dynamic linking when it is linked with libsodium. If you\nwant to change this behavior and use static linking, you can enable below two\nenvironment variables.\n\nOn Linux/macOS,\n\n```bash\nexport SODIUM_LIB_DIR=/path/to/your/libsodium/lib\nexport SODIUM_STATIC=true\n```\n\nOn Windows,\n\n```bash\nset SODIUM_LIB_DIR=C:\\path\\to\\your\\libsodium\\lib\nset SODIUM_STATIC=true\n```\n\nAnd then re-build the code.\n\n```bash\ncargo build\n```\n\nPerformance\n============\n\nThe performance test is run on a Macbook Pro 2017 laptop with spec as below.\n\n| Spec                    | Value                       |\n| ----------------------- | --------------------------- |\n| Processor Name:         | Intel Core i7               |\n| Processor Speed:        | 3.5 GHz                     |\n| Number of Processors:   | 1                           |\n| Total Number of Cores:  | 2                           |\n| L2 Cache (per Core):    | 256 KB                      |\n| L3 Cache:               | 4 MB                        |\n| Memory:                 | 16 GB                       |\n| OS Version:             | macOS High Sierra 10.13.6   |\n\nTest result:\n\n|                               | Read            | Write          | TPS          |\n| ----------------------------- | --------------- | -------------- | ------------ |\n| Baseline (memcpy):            | 3658.23 MB/s    | 3658.23 MB/s   | N/A          |\n| Baseline (file):              | 1307.97 MB/s    | 2206.30 MB/s   | N/A          |\n| Memory storage (no compress): | 605.01 MB/s     | 186.20 MB/s    | 1783 tx/s    |\n| Memory storage (compress):    | 505.04 MB/s     | 161.11 MB/s    | 1180 tx/s    |\n| File storage (no compress):   | 445.28 MB/s     | 177.39 MB/s    | 313 tx/s     |\n| File storage (compress):      | 415.85 MB/s     | 158.22 MB/s    | 325 tx/s     |\n\nTo run the performance test on your own computer, please follow the\ninstructions in [CONTRIBUTING.md](CONTRIBUTING.md#run-performance-test).\n\nContribution\n============\n\nUnless you explicitly state otherwise, any contribution intentionally submitted\nfor inclusion in the work by you, as defined in the Apache-2.0 license, shall\nbe licensed as above, without any additional terms of conditions.\n\nPlease read [CONTRIBUTING.md](CONTRIBUTING.md) for details on our code of\nconduct, and the process for submitting pull requests to us.\n\nCommunity\n=========\n\n- [Twitter](https://twitter.com/ZboxFS)\n\nLicense\n=======\n`ZboxFS` is licensed under the Apache 2.0 License - see the [LICENSE](LICENSE)\nfile for details.\n\n[ext4]: https://en.wikipedia.org/wiki/Ext4\n[xfs]: http://xfs.org\n[btrfs]: https://btrfs.wiki.kernel.org\n[Rust]: https://www.rust-lang.org\n[libsodium]: https://libsodium.org\n[LZ4]: http://www.lz4.org\n[EncFS]: https://vgough.github.io/encfs/\n[APFS]: https://en.wikipedia.org/wiki/Apple_File_System\n[ZFS]: https://en.wikipedia.org/wiki/ZFS\n[TrueCrypt]: http://truecrypt.sourceforge.net\n[LUKS]: https://gitlab.com/cryptsetup/cryptsetup/\n[VeraCrypt]: https://veracrypt.codeplex.com\n[Docker]: https://www.docker.com\n[zboxfs/base]: https://github.com/zboxfs/zbox-docker-base\n[zboxfs/wasm]: https://github.com/zboxfs/zbox-docker-wasm\n[zboxfs/nodejs]: https://github.com/zboxfs/zbox-docker-nodejs\n[zboxfs/android]: https://github.com/zboxfs/zbox-android\n"
        },
        {
          "name": "build.rs",
          "type": "blob",
          "size": 10.517578125,
          "content": "use std::env;\nuse std::path::PathBuf;\n#[cfg(feature = \"libsodium-bundled\")]\nuse std::process::Command;\n\n#[cfg(all(feature = \"libsodium-bundled\", not(target_os = \"windows\")))]\nconst LIBSODIUM_NAME: &'static str = \"libsodium-1.0.18\";\n#[cfg(all(feature = \"libsodium-bundled\", not(target_os = \"windows\")))]\nconst LIBSODIUM_URL: &'static str =\n    \"https://download.libsodium.org/libsodium/releases/libsodium-1.0.18.tar.gz\";\n\n// skip the build script when building doc on docs.rs\n#[cfg(feature = \"docs-rs\")]\nfn main() {}\n\n#[cfg(not(feature = \"docs-rs\"))]\nfn main() {\n    #[cfg(feature = \"libsodium-bundled\")]\n    download_and_install_libsodium();\n\n    #[cfg(not(feature = \"libsodium-bundled\"))]\n    {\n        println!(\"cargo:rerun-if-env-changed=SODIUM_LIB_DIR\");\n        println!(\"cargo:rerun-if-env-changed=SODIUM_STATIC\");\n    }\n\n    // add libsodium link options\n    if let Ok(lib_dir) = env::var(\"SODIUM_LIB_DIR\") {\n        println!(\"cargo:rustc-link-search=native={}\", lib_dir);\n        let mode = match env::var_os(\"SODIUM_STATIC\") {\n            Some(_) => \"static\",\n            None => \"dylib\",\n        };\n        if cfg!(target_os = \"windows\") {\n            println!(\"cargo:rustc-link-lib={0}=libsodium\", mode);\n        } else {\n            println!(\"cargo:rustc-link-lib={0}=sodium\", mode);\n        }\n    } else {\n        // the static linking doesn't work if libsodium is installed\n        // under '/usr' dir, in that case use the environment variables\n        // mentioned above\n        pkg_config::Config::new()\n            .atleast_version(\"1.0.18\")\n            .statik(true)\n            .probe(\"libsodium\")\n            .unwrap();\n    }\n\n    // add liblz4 link options\n    if let Ok(lib_dir) = env::var(\"LZ4_LIB_DIR\") {\n        println!(\"cargo:rustc-link-search=native={}\", lib_dir);\n        if cfg!(target_os = \"windows\") {\n            println!(\"cargo:rustc-link-lib=static=liblz4\");\n        } else {\n            println!(\"cargo:rustc-link-lib=static=lz4\");\n        }\n    } else {\n        // build lz4 static library\n        let out_dir = PathBuf::from(env::var(\"OUT_DIR\").unwrap());\n        if !out_dir.join(\"liblz4.a\").exists() {\n            let mut compiler = cc::Build::new();\n            compiler\n                .file(\"vendor/lz4/lz4.c\")\n                .file(\"vendor/lz4/lz4frame.c\")\n                .file(\"vendor/lz4/lz4hc.c\")\n                .file(\"vendor/lz4/xxhash.c\")\n                .define(\"XXH_NAMESPACE\", \"LZ4_\")\n                .opt_level(3)\n                .debug(false)\n                .pic(true)\n                .shared_flag(false);\n            if !cfg!(windows) {\n                compiler.static_flag(true);\n            }\n            compiler.compile(\"liblz4.a\");\n        }\n    }\n}\n\n// This downloads function and builds the libsodium from source for linux and\n// unix targets.\n// The steps are taken from the libsodium installation instructions:\n// https://libsodium.gitbook.io/doc/installation\n// effectively:\n// $ ./configure\n// $ make && make check\n// $ sudo make install\n#[cfg(all(feature = \"libsodium-bundled\", not(target_os = \"windows\")))]\nfn download_and_install_libsodium() {\n    let out_dir = PathBuf::from(env::var(\"OUT_DIR\").unwrap());\n    let source_dir = out_dir.join(LIBSODIUM_NAME);\n    let prefix_dir = out_dir.join(\"libsodium\");\n    let sodium_lib_dir = prefix_dir.join(\"lib\");\n    let src_file_name = format!(\"{}.tar.gz\", LIBSODIUM_NAME);\n\n    // check if command tools exist\n    Command::new(\"curl\")\n        .arg(\"--version\")\n        .output()\n        .expect(\"curl not found\");\n    Command::new(\"tar\")\n        .arg(\"--version\")\n        .output()\n        .expect(\"tar not found\");\n    Command::new(\"gpg\")\n        .arg(\"--version\")\n        .output()\n        .expect(\"gpg not found\");\n    Command::new(\"make\")\n        .arg(\"--version\")\n        .output()\n        .expect(\"make not found\");\n\n    if !source_dir.exists() {\n        // download source code file\n        let output = Command::new(\"curl\")\n            .current_dir(&out_dir)\n            .args(&[LIBSODIUM_URL, \"-sSfL\", \"-o\", &src_file_name])\n            .output()\n            .expect(\"failed to download libsodium\");\n        assert!(output.status.success());\n\n        // download signature file\n        let sig_file_name = format!(\"{}.sig\", src_file_name);\n        let sig_url = format!(\"{}.sig\", LIBSODIUM_URL);\n        let output = Command::new(\"curl\")\n            .current_dir(&out_dir)\n            .args(&[&sig_url, \"-sSfL\", \"-o\", &sig_file_name])\n            .output()\n            .expect(\"failed to download libsodium signature file\");\n        assert!(output.status.success());\n\n        // import libsodium author's public key\n        let output = Command::new(\"gpg\")\n            .arg(\"--import\")\n            .arg(\"libsodium.gpg.key\")\n            .output()\n            .expect(\"failed to import libsodium author's gpg key\");\n        assert!(output.status.success());\n\n        // verify signature\n        let output = Command::new(\"gpg\")\n            .current_dir(&out_dir)\n            .arg(\"--verify\")\n            .arg(&sig_file_name)\n            .output()\n            .expect(\"failed to verify libsodium file\");\n        assert!(output.status.success());\n\n        // unpack source code files\n        let output = Command::new(\"tar\")\n            .current_dir(&out_dir)\n            .args(&[\"zxf\", &src_file_name])\n            .output()\n            .expect(\"failed to unpack libsodium\");\n        assert!(output.status.success());\n    }\n\n    if !sodium_lib_dir.exists() {\n        let configure = source_dir.join(\"./configure\");\n        let output = Command::new(&configure)\n            .current_dir(&source_dir)\n            .args(&[std::path::Path::new(\"--prefix\"), &prefix_dir])\n            .output()\n            .expect(\"failed to execute configure\");\n        assert!(output.status.success());\n\n        let output = Command::new(\"make\")\n            .current_dir(&source_dir)\n            .output()\n            .expect(\"failed to execute make\");\n        assert!(output.status.success());\n\n        let output = Command::new(\"make\")\n            .current_dir(&source_dir)\n            .arg(\"install\")\n            .output()\n            .expect(\"failed to execute make install\");\n        assert!(output.status.success());\n    }\n\n    assert!(\n        &sodium_lib_dir.exists(),\n        \"libsodium lib directory was not created.\"\n    );\n\n    env::set_var(\"SODIUM_LIB_DIR\", &sodium_lib_dir);\n    env::set_var(\"SODIUM_STATIC\", \"true\");\n}\n\n// This downloads function and builds the libsodium from source for windows msvc target.\n// The binaries are pre-compiled, so we simply download and link.\n// The binary is compressed in zip format.\n#[cfg(all(\n    feature = \"libsodium-bundled\",\n    target_os = \"windows\",\n    target_env = \"msvc\"\n))]\nfn download_and_install_libsodium() {\n    use std::fs;\n    use std::fs::OpenOptions;\n    use std::io;\n    use std::path::PathBuf;\n    #[cfg(target_env = \"msvc\")]\n    static LIBSODIUM_ZIP: &'static str = \"https://download.libsodium.org/libsodium/releases/libsodium-1.0.18-msvc.zip\";\n    #[cfg(target_env = \"mingw\")]\n    static LIBSODIUM_ZIP: &'static str = \"https://download.libsodium.org/libsodium/releases/libsodium-1.0.18-mingw.tar.gz\";\n    let out_dir = PathBuf::from(env::var(\"OUT_DIR\").unwrap());\n    let sodium_lib_dir = out_dir.join(\"libsodium\");\n    if !sodium_lib_dir.exists() {\n        fs::create_dir(&sodium_lib_dir).unwrap();\n    }\n    let sodium_lib_file_path = sodium_lib_dir.join(\"libsodium.lib\");\n    if !sodium_lib_file_path.exists() {\n        let mut tmpfile = tempfile::tempfile().unwrap();\n        reqwest::get(LIBSODIUM_ZIP)\n            .unwrap()\n            .copy_to(&mut tmpfile)\n            .unwrap();\n        let mut zip = zip::ZipArchive::new(tmpfile).unwrap();\n        #[cfg(target_arch = \"x86_64\")]\n        let mut lib = zip\n            .by_name(\"x64/Release/v142/static/libsodium.lib\")\n            .unwrap();\n        #[cfg(target_arch = \"x86\")]\n        let mut lib = zip\n            .by_name(\"Win32/Release/v142/static/libsodium.lib\")\n            .unwrap();\n        #[cfg(not(any(target_arch = \"x86_64\", target_arch = \"x86\")))]\n        compile_error!(\"Bundled libsodium is only supported on x86 or x86_64 target architecture.\");\n        let mut libsodium_file = OpenOptions::new()\n            .create(true)\n            .write(true)\n            .open(&sodium_lib_file_path)\n            .unwrap();\n        io::copy(&mut lib, &mut libsodium_file).unwrap();\n    }\n    assert!(\n        &sodium_lib_dir.exists(),\n        \"libsodium lib directory was not created.\"\n    );\n    env::set_var(\"SODIUM_LIB_DIR\", &sodium_lib_dir);\n    env::set_var(\"SODIUM_STATIC\", \"true\");\n}\n\n// This downloads function and builds the libsodium from source for windows mingw target.\n// The binaries are pre-compiled, so we simply download and link.\n// The binary is compressed in tar.gz format.\n#[cfg(all(\n    feature = \"libsodium-bundled\",\n    target_os = \"windows\",\n    target_env = \"gnu\"\n))]\nfn download_and_install_libsodium() {\n    use libflate::non_blocking::gzip::Decoder;\n    use std::fs;\n    use std::fs::OpenOptions;\n    use std::io;\n    use std::path::PathBuf;\n    use tar::Archive;\n    static LIBSODIUM_ZIP: &'static str = \"https://download.libsodium.org/libsodium/releases/libsodium-1.0.18-mingw.tar.gz\";\n    let out_dir = PathBuf::from(env::var(\"OUT_DIR\").unwrap());\n    let sodium_lib_dir = out_dir.join(\"libsodium\");\n    if !sodium_lib_dir.exists() {\n        fs::create_dir(&sodium_lib_dir).unwrap();\n    }\n    let sodium_lib_file_path = sodium_lib_dir.join(\"libsodium.lib\");\n    if !sodium_lib_file_path.exists() {\n        let response = reqwest::get(LIBSODIUM_ZIP).unwrap();\n        let decoder = Decoder::new(response);\n        let mut ar = Archive::new(decoder);\n        #[cfg(target_arch = \"x86_64\")]\n        let filename = PathBuf::from(\"libsodium-win64/lib/libsodium.a\");\n        #[cfg(target_arch = \"x86\")]\n        let filename = PathBuf::from(\"libsodium-win32/lib/libsodium.a\");\n        #[cfg(not(any(target_arch = \"x86_64\", target_arch = \"x86\")))]\n        compile_error!(\"Bundled libsodium is only supported on x86 or x86_64 target architecture.\");\n        for file in ar.entries().unwrap() {\n            let mut f = file.unwrap();\n            if f.path().unwrap() == *filename {\n                let mut libsodium_file = OpenOptions::new()\n                    .create(true)\n                    .write(true)\n                    .open(&sodium_lib_file_path)\n                    .unwrap();\n                io::copy(&mut f, &mut libsodium_file).unwrap();\n                break;\n            }\n        }\n    }\n    assert!(\n        &sodium_lib_dir.exists(),\n        \"libsodium lib directory was not created.\"\n    );\n    env::set_var(\"SODIUM_LIB_DIR\", &sodium_lib_dir);\n    env::set_var(\"SODIUM_STATIC\", \"true\");\n}\n"
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "libsodium.gpg.key",
          "type": "blob",
          "size": 7.896484375,
          "content": "-----BEGIN PGP PUBLIC KEY BLOCK-----\nVersion: GnuPG v1 (OpenBSD)\n\n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 =Hkmu\n-----END PGP PUBLIC KEY BLOCK-----\n"
        },
        {
          "name": "rustfmt.toml",
          "type": "blob",
          "size": 0.0146484375,
          "content": "max_width = 80\n"
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        },
        {
          "name": "vendor",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}