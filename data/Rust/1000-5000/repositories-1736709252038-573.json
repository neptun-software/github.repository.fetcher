{
  "metadata": {
    "timestamp": 1736709252038,
    "page": 573,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjU4MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "Jondolf/avian",
      "stars": 1752,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.1083984375,
          "content": "/target\ncrates/*/target\n**/*.rs.bk\nCargo.lock\n.cargo/config\n.cargo/config.toml\n/.idea\n/.vscode\n/benches/target\n"
        },
        {
          "name": "Cargo.toml",
          "type": "blob",
          "size": 0.15234375,
          "content": "[workspace]\nmembers = [\"crates/avian2d\", \"crates/avian3d\"]\nresolver = \"2\"\n\n[profile.dev]\nopt-level = 1 # Use slightly better optimization, so examples work\n"
        },
        {
          "name": "LICENSE-APACHE",
          "type": "blob",
          "size": 9.93359375,
          "content": "                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS"
        },
        {
          "name": "LICENSE-MIT",
          "type": "blob",
          "size": 1.0380859375,
          "content": "MIT License\n\nCopyright (c) 2022 Jondolf\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE."
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 8.25390625,
          "content": "# ![Avian Physics](https://raw.githubusercontent.com/Jondolf/avian/avian/assets/branding/logo.svg)\n\n[![MIT/Apache 2.0](https://img.shields.io/badge/license-MIT%2FApache-blue.svg)](https://github.com/Jondolf/avian#license)\n[![ci](https://github.com/Jondolf/avian/actions/workflows/ci.yml/badge.svg?branch=main)](https://github.com/Jondolf/avian/actions/workflows/ci.yml)\n[![2D crates.io](https://img.shields.io/crates/v/avian2d?label=2D%20crates.io)](https://crates.io/crates/avian2d)\n[![2D docs.rs](https://img.shields.io/docsrs/avian2d?label=2D%20docs.rs)](https://docs.rs/avian2d)\n[![3D crates.io](https://img.shields.io/crates/v/avian3d?label=3D%20crates.io)](https://crates.io/crates/avian3d)\n[![3D docs.rs](https://img.shields.io/docsrs/avian3d?label=3D%20docs.rs)](https://docs.rs/avian3d)\n\n**Avian** is an ECS-driven 2D and 3D physics engine for the [Bevy game engine](https://bevyengine.org/).\n\n---\n\n## Design\n\nBelow are some of the core design principles used in Avian.\n\n- **Made with Bevy, for Bevy.** No wrappers around existing engines.\n- **Provide an ergonomic and familiar API.** Ergonomics is key for a good experience.\n- **Utilize the ECS as much as possible.** The engine should feel like a part of Bevy, and it shouldn't\n    need to maintain a separate physics world.\n- **Use a highly modular plugin architecture.** Users should be able to replace parts of the engine\n    with their own implementations.\n- **Have good documentation.** A physics engine is pointless if you don't know how to use it.\n\n## Features\n\nBelow are some of the current features of Avian.\n\n- Dynamic, kinematic and static rigid bodies\n  - Linear and angular velocity\n  - External forces, torque and impulses\n  - Gravity and gravity scale\n  - Linear and angular damping\n  - Locking translational and rotational axes\n  - Rigid body dominance\n  - Continuous Collision Detection (CCD)\n  - Automatic deactivation with sleeping\n- Collision detection powered by [Parry](https://parry.rs)\n  - Colliders with configurable collision layers, density, material properties and more\n  - Collider generation for meshes and entire scenes\n  - Collision events\n  - Access to colliding entities\n  - Filtering and modifying collisions with custom systems\n  - Manual contact queries and intersection tests\n- Constraints and joints\n  - Several built-in joint types: fixed, distance, prismatic, revolute, spherical\n  - Support for custom joints and other constraints using XPBD\n- Spatial queries\n  - Raycasting, shapecasting, point projection and intersection tests\n  - Ergonomic component-based API for raycasts and shapecasts\n  - Flexible `SpatialQuery` system parameter\n  - Spatial query filters\n- `Transform` interpolation and extrapolation for fixed timesteps\n- Debug rendering for colliders, AABBs, contacts, joints, sleeping, axes and spatial queries\n- Configurable scheduling and high customizability\n- Highly modular plugin architecture, freely extend and replace parts of the engine\n- Support for custom collision backends\n- `f32`/`f64` precision (`f32` by default)\n\nYou can find a more complete list along with documentation in the\n[Table of Contents](https://docs.rs/avian3d/latest/avian3d/#table-of-contents)\non docs.rs.\n\n## Documentation\n\n- [2D documentation](https://docs.rs/avian2d)\n- [3D documentation](https://docs.rs/avian3d)\n\n## Usage Example\n\nFirst, add `avian2d` or `avian3d` to your dependencies in `Cargo.toml`:\n\n```toml\n# For 2D applications:\n[dependencies]\navian2d = \"0.2\"\n\n# For 3D applications:\n[dependencies]\navian3d = \"0.2\"\n\n# If you want to use the most up-to-date version, you can follow the main branch:\n[dependencies]\navian3d = { git = \"https://github.com/Jondolf/avian\", branch = \"main\" }\n```\n\nBelow is a very simple example where a cube with initial angular velocity falls onto a circular platform.\nThis is a modified version of Bevy's [`3d_scene`](https://bevyengine.org/examples/3d-rendering/3d-scene/) example.\n\n```rust\nuse avian3d::prelude::*;\nuse bevy::prelude::*;\n\nfn main() {\n    App::new()\n        // Enable physics\n        .add_plugins((DefaultPlugins, PhysicsPlugins::default()))\n        .add_systems(Startup, setup)\n        .run();\n}\n\nfn setup(\n    mut commands: Commands,\n    mut meshes: ResMut<Assets<Mesh>>,\n    mut materials: ResMut<Assets<StandardMaterial>>,\n) {\n    // Static physics object with a collision shape\n    commands.spawn((\n        RigidBody::Static,\n        Collider::cylinder(4.0, 0.1),\n        Mesh3d(meshes.add(Cylinder::new(4.0, 0.1))),\n        MeshMaterial3d(materials.add(Color::WHITE)),\n    ));\n\n    // Dynamic physics object with a collision shape and initial angular velocity\n    commands.spawn((\n        RigidBody::Dynamic,\n        Collider::cuboid(1.0, 1.0, 1.0),\n        AngularVelocity(Vec3::new(2.5, 3.5, 1.5)),\n        Mesh3d(meshes.add(Cuboid::from_length(1.0))),\n        MeshMaterial3d(materials.add(Color::srgb_u8(124, 144, 255))),\n        Transform::from_xyz(0.0, 4.0, 0.0),\n    ));\n\n    // Light\n    commands.spawn((\n        PointLight {\n            shadows_enabled: true,\n            ..default()\n        },\n        Transform::from_xyz(4.0, 8.0, 4.0),\n    ));\n\n    // Camera\n    commands.spawn((\n        Camera3d::default(),\n        Transform::from_xyz(-2.5, 4.5, 9.0).looking_at(Vec3::ZERO, Dir3::Y),\n    ));\n}\n```\n\n![A spinning cube falling onto a circular platform](https://github.com/user-attachments/assets/14d25e7e-9d46-467c-9fe6-dc408cd23398)\n\n## More Examples\n\nYou can find lots of 2D and 3D examples in [/crates/avian2d/examples](/crates/avian2d/examples) and [/crates/avian3d/examples](/crates/avian3d/examples) respectively.\n\nThe examples support both `f32` and `f64` precisions, so the code contains some feature-dependent types like `Scalar` and `Vector`.\nIn actual usage these are not needed, so you can just use `f32` or `f64` types depending on the features you have chosen.\n\nBy default the examples use `f32`. To run the `f64` versions, you need to disable default features and manually choose the dimension\nand precision:\n\n```shell\n# Manually specify dimension and precision. `parry-f64` enables collision detection using Parry.\ncargo run --example cubes --no-default-features --features \"3d f64 parry-f64\"\n```\n\n## Supported Bevy Versions\n\n| Bevy    | Avian |\n| ------- | ----- |\n| 0.15    | 0.2   |\n| 0.14    | 0.1   |\n\n<details>\n  <summary>Bevy XPBD versions (the predecessor of Avian)</summary>\n\n  | Bevy | Bevy XPBD |\n  | ---- | --------- |\n  | 0.14 | 0.5       |\n  | 0.13 | 0.4       |\n  | 0.12 | 0.3       |\n  | 0.11 | 0.2       |\n  | 0.10 | 0.1       |\n\n</details>\n\n## Future Features\n\n- Per-entity collision hooks or callbacks\n- Flags for what types of collisions are active, like collisions against specific rigid body types, sensors or parents\n- Performance optimization (better broad phase, parallel solver, proper SIMD...)\n- Joint motors\n- Articulations, aka. multibody joints\n- Proper cross-platform determinism\n- Soft bodies (cloth and deformable solids)\n- Maybe fluid simulation\n\n## Contributing\n\nIf you encounter any problems, feel free to open issues or create pull requests.\nFor larger changes and additions, it's better to open an issue or ask me for input\nbefore making a pull request.\n\nYou can also ask for help or ask questions on the [Bevy Discord](https://discord.com/invite/gMUk5Ph)\nserver's Avian Physics topic in `#ecosystem-crates`. My username on the Discord is `Jondolf` (`@jondolfdev`).\n\n## Acknowledgements\n\nHuge thanks to the entire Bevy community for the incredible support!\nAll of your contributions, insight and requests are a massive help\nin driving the state of physics in Bevy forward, and it's what\nkeeps me motivated to build the best engine I can.\n\nI would also like to give a special thanks to [Johan Helsing][johan-helsing]\nfor inspiring this project and helping me significantly in the early stages.\nHis original [tutorial series][johan-xpbd-tutorial] is the reason `avian`\nexists in the first place, and without his support and contributions,\nthe project wouldn't be anywhere near where it is today.\n\n[johan-helsing]: https://github.com/johanhelsing\n[johan-xpbd-tutorial]: https://johanhelsing.studio/posts/bevy-xpbd\n\n## License\n\nAvian is free and open source. All code in this repository is dual-licensed under either:\n\n- MIT License ([LICENSE-MIT](/LICENSE-MIT) or <http://opensource.org/licenses/MIT>)\n- Apache License, Version 2.0 ([LICENSE-APACHE](/LICENSE-APACHE) or <http://www.apache.org/licenses/LICENSE-2.0>)\n\nat your option.\n"
        },
        {
          "name": "assets",
          "type": "tree",
          "content": null
        },
        {
          "name": "crates",
          "type": "tree",
          "content": null
        },
        {
          "name": "publish.sh",
          "type": "blob",
          "size": 0.626953125,
          "content": "#! /bin/bash\n\ntmp=$(mktemp -d)\n\necho \"$tmp\"\ncurrdir=$(pwd)\n\ncp -r src \"$tmp\"/.\ncp -r LICENSE-MIT LICENSE-APACHE README.md \"$tmp\"/.\n\n### Publish avian2d\nsed 's#\\.\\./\\.\\./src#src#g' crates/avian2d/Cargo.toml > \"$tmp\"/Cargo.toml\ncp -r crates/avian2d/examples \"$tmp\"/.\ncp -r crates/avian2d/benches \"$tmp\"/.\ncd \"$tmp\" && cargo publish\n\n### Remove the 2D examples and return to previous directory\nrm -rf examples\ncd \"$currdir\" || exit\n\n### Publish avian3d\nsed 's#\\.\\./\\.\\./src#src#g' crates/avian3d/Cargo.toml > \"$tmp\"/Cargo.toml\ncp -r crates/avian3d/examples \"$tmp\"/.\ncp -r crates/avian3d/benches \"$tmp\"/.\ncd \"$tmp\" && cargo publish\n\nrm -rf \"$tmp\""
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}