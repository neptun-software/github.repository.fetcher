{
  "metadata": {
    "timestamp": 1736709172082,
    "page": 407,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjQxMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "rust-lang/libc",
      "stars": 2147,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".cirrus.yml",
          "type": "blob",
          "size": 1.09375,
          "content": "task:\n  only_if: $CIRRUS_BRANCH == 'main' || $CIRRUS_BASE_BRANCH == 'libc-0.2' ||  $CIRRUS_BASE_BRANCH == 'main'\n  env:\n    HOME: /tmp  # cargo cache needs it\n    TARGET: x86_64-unknown-freebsd\n  matrix:\n    - name: nightly freebsd-13 i686\n      # Test i686 FreeBSD in 32-bit emulation on a 64-bit host.\n      env:\n        TARGET: i686-unknown-freebsd\n      freebsd_instance:\n        image_family: freebsd-13-3\n    - name: nightly freebsd-13 x86_64\n      freebsd_instance:\n        image_family: freebsd-13-3\n    - name: nightly freebsd-14 x86_64\n      freebsd_instance:\n        image: freebsd-14-1-release-amd64-ufs\n    - name: nightly freebsd-15 x86_64\n      freebsd_instance:\n       image_family: freebsd-15-0-snap\n  setup_script:\n    - pkg install -y libnghttp2 curl\n    - curl https://sh.rustup.rs -sSf --output rustup.sh\n    - sh rustup.sh -y --default-toolchain nightly --profile=minimal\n    - . $HOME/.cargo/env\n    - if [ \"$TARGET\" = \"i686-unknown-freebsd\" ]; then rustup target add i686-unknown-freebsd; fi\n  test_script:\n    - . $HOME/.cargo/env\n    - LIBC_CI=1 sh ci/run.sh $TARGET\n    - sh ci/run.sh $TARGET\n"
        },
        {
          "name": ".git-blame-ignore-revs",
          "type": "blob",
          "size": 0.197265625,
          "content": "# Format macro bodies\na0c7f8017b964a2de8bc3aabebdabd4a8f2c0905\n\n# Automated changes related to the 2021 edition upgrade\n20f6aa4c8135ba5e2c079ff21b20f0a1be87e1c4\nf8a018a8e3efaf8cc4fbad84974255b0fa899fc2\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.0263671875,
          "content": "target\nCargo.lock\n*~\nstyle\n"
        },
        {
          "name": ".release-plz.toml",
          "type": "blob",
          "size": 0.076171875,
          "content": "[workspace]\ngit_release_name = \"{{ version }}\"\ngit_tag_name = \"{{ version }}\"\n"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 11.763671875,
          "content": "# Changelog\n\n## [Unreleased]\n\n## [0.2.164](https://github.com/rust-lang/libc/compare/0.2.163...0.2.164) - 2024-11-16\n\n### MSRV\n\nThis release increases the MSRV of `libc` to 1.63.\n\n### Other\n\n- CI: remove tests with rust < 1.63 <https://github.com/rust-lang/libc/pull/4051>\n- MSRV: document the MSRV of the stable channel to be 1.63 <https://github.com/rust-lang/libc/pull/4040>\n- MacOS: move ifconf to s_no_extra_traits <https://github.com/rust-lang/libc/pull/4051>\n\n## [0.2.163](https://github.com/rust-lang/libc/compare/0.2.162...0.2.163) - 2024-11-16\n\n### Added\n\n- Aix: add more `dlopen` flags <https://github.com/rust-lang/libc/pull/4044>\n- Android: add group calls <https://github.com/rust-lang/libc/pull/3499>\n- FreeBSD: add `TCP_FUNCTION_BLK` and `TCP_FUNCTION_ALIAS` <https://github.com/rust-lang/libc/pull/4047>\n- Linux: add `confstr` <https://github.com/rust-lang/libc/pull/3612>\n- Solarish: add `aio` <https://github.com/rust-lang/libc/pull/4033>\n- Solarish: add `arc4random*` <https://github.com/rust-lang/libc/pull/3944>\n\n### Changed\n\n- Emscripten: upgrade emsdk to 3.1.68 <https://github.com/rust-lang/libc/pull/3962>\n- Hurd: use more standard types <https://github.com/rust-lang/libc/pull/3733>\n- Hurd: use the standard `ssize_t = isize` <https://github.com/rust-lang/libc/pull/4029>\n- Solaris: fix `confstr` and `ucontext_t` <https://github.com/rust-lang/libc/pull/4035>\n\n### Other\n\n- CI: add Solaris <https://github.com/rust-lang/libc/pull/4035>\n- CI: add `i686-unknown-freebsd` <https://github.com/rust-lang/libc/pull/3997>\n- CI: ensure that calls to `sort` do not depend on locale <https://github.com/rust-lang/libc/pull/4026>\n- Specify `rust-version` in `Cargo.toml` <https://github.com/rust-lang/libc/pull/4041>\n\n## [0.2.162](https://github.com/rust-lang/libc/compare/0.2.161...0.2.162) - 2024-11-07\n\n### Added\n\n- Android: fix the alignment of `uc_mcontext` on arm64 <https://github.com/rust-lang/libc/pull/3894>\n- Apple: add `host_cpu_load_info` <https://github.com/rust-lang/libc/pull/3916>\n- ESP-IDF: add a time flag <https://github.com/rust-lang/libc/pull/3993>\n- FreeBSD: add the `CLOSE_RANGE_CLOEXEC` flag<https://github.com/rust-lang/libc/pull/3996>\n- FreeBSD: fix test errors regarding `__gregset_t` <https://github.com/rust-lang/libc/pull/3995>\n- FreeBSD: fix tests on x86 FreeBSD 15 <https://github.com/rust-lang/libc/pull/3948>\n- FreeBSD: make `ucontext_t` and `mcontext_t` available on all architectures  <https://github.com/rust-lang/libc/pull/3848>\n- Haiku: add `getentropy` <https://github.com/rust-lang/libc/pull/3991>\n- Illumos: add `syncfs` <https://github.com/rust-lang/libc/pull/3990>\n- Illumos: add some recently-added constants <https://github.com/rust-lang/libc/pull/3999>\n- Linux: add `ioctl` flags <https://github.com/rust-lang/libc/pull/3960>\n- Linux: add epoll busy polling parameters <https://github.com/rust-lang/libc/pull/3922>\n- NuttX: add `pthread_[get/set]name_np` <https://github.com/rust-lang/libc/pull/4003>\n- RTEMS: add `arc4random_buf` <https://github.com/rust-lang/libc/pull/3989>\n- Trusty OS: add initial support <https://github.com/rust-lang/libc/pull/3942>\n- WASIp2: expand socket support <https://github.com/rust-lang/libc/pull/3981>\n\n### Fixed\n\n- Emscripten: don't pass `-lc` <https://github.com/rust-lang/libc/pull/4002>\n- Hurd: change `st_fsid` field to `st_dev` <https://github.com/rust-lang/libc/pull/3785>\n- Hurd: fix the definition of `utsname` <https://github.com/rust-lang/libc/pull/3992>\n- Illumos/Solaris: fix `FNM_CASEFOLD` definition <https://github.com/rust-lang/libc/pull/4004>\n- Solaris: fix all tests <https://github.com/rust-lang/libc/pull/3864>\n\n### Other\n\n- CI: Add loongarch64 <https://github.com/rust-lang/libc/pull/4000>\n- CI: Check that semver files are sorted <https://github.com/rust-lang/libc/pull/4018>\n- CI: Re-enable the FreeBSD 15 job <https://github.com/rust-lang/libc/pull/3988>\n- Clean up imports and `extern crate` usage <https://github.com/rust-lang/libc/pull/3897>\n- Convert `mode_t` constants to octal <https://github.com/rust-lang/libc/pull/3634>\n- Remove the `wasm32-wasi` target that has been deleted upstream <https://github.com/rust-lang/libc/pull/4013>\n\n## [0.2.161](https://github.com/rust-lang/libc/compare/0.2.160...0.2.161) - 2024-10-17\n\n### Fixed\n\n- OpenBSD: fix `FNM_PATHNAME` and `FNM_NOESCAPE` values <https://github.com/rust-lang/libc/pull/3983>\n\n## [0.2.160](https://github.com/rust-lang/libc/compare/0.2.159...0.2.160) - 2024-10-17\n\n### Added\n\n- Android: add `PR_GET_NAME` and `PR_SET_NAME` <https://github.com/rust-lang/libc/pull/3941>\n- Apple: add `F_TRANSFEREXTENTS` <https://github.com/rust-lang/libc/pull/3925>\n- Apple: add `mach_error_string` <https://github.com/rust-lang/libc/pull/3913>\n- Apple: add additional `pthread` APIs <https://github.com/rust-lang/libc/pull/3846>\n- Apple: add the `LOCAL_PEERTOKEN` socket option <https://github.com/rust-lang/libc/pull/3929>\n- BSD: add `RTF_*`, `RTA_*`, `RTAX_*`, and `RTM_*` definitions <https://github.com/rust-lang/libc/pull/3714>\n- Emscripten: add `AT_EACCESS` <https://github.com/rust-lang/libc/pull/3911>\n- Emscripten: add `getgrgid`, `getgrnam`, `getgrnam_r` and `getgrgid_r` <https://github.com/rust-lang/libc/pull/3912>\n- Emscripten: add `getpwnam_r` and `getpwuid_r` <https://github.com/rust-lang/libc/pull/3906>\n- FreeBSD: add `POLLRDHUP` <https://github.com/rust-lang/libc/pull/3936>\n- Haiku: add `arc4random` <https://github.com/rust-lang/libc/pull/3945>\n- Illumos: add `ptsname_r` <https://github.com/rust-lang/libc/pull/3867>\n- Linux: add `fanotify` interfaces <https://github.com/rust-lang/libc/pull/3695>\n- Linux: add `tcp_info` <https://github.com/rust-lang/libc/pull/3480>\n- Linux: add additional AF_PACKET options <https://github.com/rust-lang/libc/pull/3540>\n- Linux: make Elf constants always available <https://github.com/rust-lang/libc/pull/3938>\n- Musl x86: add `iopl` and `ioperm` <https://github.com/rust-lang/libc/pull/3720>\n- Musl: add `posix_spawn` chdir functions <https://github.com/rust-lang/libc/pull/3949>\n- Musl: add `utmpx.h` constants <https://github.com/rust-lang/libc/pull/3908>\n- NetBSD: add `sysctlnametomib`, `CLOCK_THREAD_CPUTIME_ID` and `CLOCK_PROCESS_CPUTIME_ID` <https://github.com/rust-lang/libc/pull/3927>\n- Nuttx: initial support <https://github.com/rust-lang/libc/pull/3909>\n- RTEMS: add `getentropy` <https://github.com/rust-lang/libc/pull/3973>\n- RTEMS: initial support <https://github.com/rust-lang/libc/pull/3866>\n- Solarish: add `POLLRDHUP`, `POSIX_FADV_*`, `O_RSYNC`, and `posix_fallocate` <https://github.com/rust-lang/libc/pull/3936>\n- Unix: add `fnmatch.h` <https://github.com/rust-lang/libc/pull/3937>\n- VxWorks: add riscv64 support <https://github.com/rust-lang/libc/pull/3935>\n- VxWorks: update constants related to the scheduler  <https://github.com/rust-lang/libc/pull/3963>\n\n### Changed\n\n- Redox: change `ino_t` to be `c_ulonglong` <https://github.com/rust-lang/libc/pull/3919>\n\n### Fixed\n\n- ESP-IDF: fix mismatched constants and structs <https://github.com/rust-lang/libc/pull/3920>\n- FreeBSD: fix `struct stat` on FreeBSD 12+ <https://github.com/rust-lang/libc/pull/3946>\n\n### Other\n\n- CI: Fix CI for FreeBSD 15 <https://github.com/rust-lang/libc/pull/3950>\n- Docs: link to `windows-sys` <https://github.com/rust-lang/libc/pull/3915>\n\n## [0.2.159](https://github.com/rust-lang/libc/compare/0.2.158...0.2.159) - 2024-09-24\n\n### Added\n\n- Android: add more `AT_*` constants in <https://github.com/rust-lang/libc/pull/3779>\n- Apple: add missing `NOTE_*` constants in <https://github.com/rust-lang/libc/pull/3883>\n- Hermit: add missing error numbers in <https://github.com/rust-lang/libc/pull/3858>\n- Hurd: add `__timeval` for 64-bit support in <https://github.com/rust-lang/libc/pull/3786>\n- Linux: add `epoll_pwait2` in <https://github.com/rust-lang/libc/pull/3868>\n- Linux: add `mq_notify` in <https://github.com/rust-lang/libc/pull/3849>\n- Linux: add missing `NFT_CT_*` constants in <https://github.com/rust-lang/libc/pull/3844>\n- Linux: add the `fchmodat2` syscall in <https://github.com/rust-lang/libc/pull/3588>\n- Linux: add the `mseal` syscall in <https://github.com/rust-lang/libc/pull/3798>\n- OpenBSD: add `sendmmsg` and `recvmmsg` in <https://github.com/rust-lang/libc/pull/3831>\n- Unix: add `IN6ADDR_ANY_INIT` and `IN6ADDR_LOOPBACK_INIT` in <https://github.com/rust-lang/libc/pull/3693>\n- VxWorks: add `S_ISVTX` in <https://github.com/rust-lang/libc/pull/3768>\n- VxWorks: add `vxCpuLib` and `taskLib` functions <https://github.com/rust-lang/libc/pull/3861>\n- WASIp2: add definitions for `std::net` support in <https://github.com/rust-lang/libc/pull/3892>\n\n### Fixed\n\n- Correctly handle version checks when `clippy-driver` is used <https://github.com/rust-lang/libc/pull/3893>\n\n### Changed\n\n- EspIdf: change signal constants to c_int in <https://github.com/rust-lang/libc/pull/3895>\n- HorizonOS: update network definitions in <https://github.com/rust-lang/libc/pull/3863>\n- Linux: combine `ioctl` APIs in <https://github.com/rust-lang/libc/pull/3722>\n- WASI: enable CI testing in <https://github.com/rust-lang/libc/pull/3869>\n- WASIp2: enable CI testing in <https://github.com/rust-lang/libc/pull/3870>\n\n## [0.2.158](https://github.com/rust-lang/libc/compare/0.2.157...0.2.158) - 2024-08-19\n\n### Other\n- WASI: fix missing `Iterator` with `rustc-dep-of-std` in <https://github.com/rust-lang/libc/pull/3856#event-13924913068>\n\n## [0.2.157](https://github.com/rust-lang/libc/compare/0.2.156...0.2.157) - 2024-08-17\n\n### Added\n\n- Apple: add `_NSGetArgv`, `_NSGetArgc` and `_NSGetProgname` in <https://github.com/rust-lang/libc/pull/3702>\n- Build: add `RUSTC_WRAPPER` support in <https://github.com/rust-lang/libc/pull/3845>\n- FreeBSD: add `execvpe` support from 14.1 release in <https://github.com/rust-lang/libc/pull/3745>\n- Fuchsia: add `SO_BINDTOIFINDEX`\n- Linux: add `klogctl` in <https://github.com/rust-lang/libc/pull/3777>\n- MacOS: add `fcntl` OFD commands in <https://github.com/rust-lang/libc/pull/3563>\n- NetBSD: add `_lwp_park` in <https://github.com/rust-lang/libc/pull/3721>\n- Solaris: add missing networking support in <https://github.com/rust-lang/libc/pull/3717>\n- Unix: add `pthread_equal` in <https://github.com/rust-lang/libc/pull/3773>\n- WASI: add `select`, `FD_SET`, `FD_ZERO`, `FD_ISSET ` in <https://github.com/rust-lang/libc/pull/3681>\n\n### Fixed\n- TEEOS: fix octal notation for `O_*` constants in <https://github.com/rust-lang/libc/pull/3841>\n\n### Changed\n- FreeBSD: always use freebsd12 when `rustc_dep_of_std` is set in <https://github.com/rust-lang/libc/pull/3723>\n\n## [0.2.156](https://github.com/rust-lang/libc/compare/v0.2.155...v0.2.156) - 2024-08-15\n\n### Added\n- Apple: add `F_ALLOCATEPERSIST` in <https://github.com/rust-lang/libc/pull/3712>\n- Apple: add `os_sync_wait_on_address` and related definitions in <https://github.com/rust-lang/libc/pull/3769>\n- BSD: generalise `IPV6_DONTFRAG` to all BSD targets in <https://github.com/rust-lang/libc/pull/3716>\n- FreeBSD/DragonFly: add `IP_RECVTTL`/`IPV6_RECVHOPLIMIT` in <https://github.com/rust-lang/libc/pull/3751>\n- Hurd: add `XATTR_CREATE`, `XATTR_REPLACE` in <https://github.com/rust-lang/libc/pull/3739>\n- Linux GNU: `confstr` API and `_CS_*` in <https://github.com/rust-lang/libc/pull/3771>\n- Linux musl: add `preadv2` and `pwritev2` (1.2.5 min.) in <https://github.com/rust-lang/libc/pull/3762>\n- VxWorks: add the constant `SOMAXCONN` in <https://github.com/rust-lang/libc/pull/3761>\n- VxWorks: add a few errnoLib related constants in <https://github.com/rust-lang/libc/pull/3780>\n\n### Fixed\n- Solaris/illumos: Change `ifa_flags` type to u64 in <https://github.com/rust-lang/libc/pull/3729>\n- QNX 7.0: Disable `libregex` in <https://github.com/rust-lang/libc/pull/3775>\n\n### Changed\n- QNX NTO: update platform support in <https://github.com/rust-lang/libc/pull/3815>\n- `addr_of!(EXTERN_STATIC)` is now considered safe in <https://github.com/rust-lang/libc/pull/3776>\n\n### Removed\n- Apple: remove `rmx_state` in <https://github.com/rust-lang/libc/pull/3776>\n\n### Other\n- Update or remove CI tests that have been failing\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 5.4716796875,
          "content": "# Contributing to `libc`\n\nWelcome! If you are reading this document, it means you are interested in\ncontributing to the `libc` crate.\n\n## v1.0 Roadmap\n\n`libc` has two active branches: `main` and `libc-0.2`. `main` is for active\ndevelopment of the upcoming v1.0 release, and should be the target of all pull\nrequests. `libc-0.2` is for updates to the currently released version.\n\nIf a pull request to `main` is a good candidate for inclusion in an `0.2.x`\nrelease, include `@rustbot label stable-nominated` in a comment to propose this.\nGood candidates will usually meet the following:\n\n1. The included changes are non-breaking.\n2. The change applies cleanly to both branches.\n3. There is a usecase that justifies inclusion in a stable release (all\n   additions should always have a usecase, hopefully).\n\nOnce a `stable-nominated` PR targeting `main` has merged, it can be cherry\npicked to the `libc-0.2` branch. A maintainer will likely do these cherry picks\nin a batch.\n\nAlternatively, you can start this process yourself by creating a new branch\nbased on `libc-0.2` and running `git cherry-pick -xe commit-sha-on-main`\n(`git\ncherry-pick -xe start-sha^..end-sha` if a range of commits is needed).\n`git` will automatically add the \"cherry picked from commit\" note, but try to\nadd a backport note so the original PR gets crosslinked:\n\n```\n# ... original commit message ...\n\n(backport <https://github.com/rust-lang/libc/pull/1234>)             # add manually\n(cherry picked from commit 104b6a4ae31c726814c36318dc718470cc96e167) # added by git\n```\n\nOnce the cherry-pick is complete, open a PR targeting `libc-0.2`.\n\nSee the [tracking issue](https://github.com/rust-lang/libc/issues/3248) for\ndetails.\n\n## Adding an API\n\nWant to use an API which currently isn't bound in `libc`? It's quite easy to add\none!\n\nThe internal structure of this crate is designed to minimize the number of\n`#[cfg]` attributes in order to easily be able to add new items which apply to\nall platforms in the future. As a result, the crate is organized hierarchically\nbased on platform. Each module has a number of `#[cfg]`'d children, but only one\nis ever actually compiled. Each module then reexports all the contents of its\nchildren.\n\nThis means that for each platform that libc supports, the path from a leaf\nmodule to the root will contain all bindings for the platform in question.\nConsequently, this indicates where an API should be added! Adding an API at a\nparticular level in the hierarchy means that it is supported on all the child\nplatforms of that level. For example, when adding a Unix API it should be added\nto `src/unix/mod.rs`, but when adding a Linux-only API it should be added to\n`src/unix/linux_like/linux/mod.rs`.\n\nIf you're not 100% sure at what level of the hierarchy an API should be added\nat, fear not! This crate has CI support which tests any binding against all\nplatforms supported, so you'll see failures if an API is added at the wrong\nlevel or has different signatures across platforms.\n\nNew symbol(s) (i.e. functions, constants etc.) should also be added to the\nsymbols list(s) found in the `libc-test/semver` directory. These lists keep\ntrack of what symbols are public in the libc crate and ensures they remain\navailable between changes to the crate. If the new symbol(s) are available on\nall supported Unixes it should be added to `unix.txt` list<sup>1</sup>,\notherwise they should be added to the OS specific list(s).\n\nWith that in mind, the steps for adding a new API are:\n\n1. Determine where in the module hierarchy your API should be added.\n2. Add the API, including adding new symbol(s) to the semver lists.\n3. Send a PR to this repo.\n4. Wait for CI to pass, fixing errors.\n5. Wait for a merge!\n\n<sup>1</sup>: Note that this list has nothing to do with any Unix or Posix\nstandard, it's just a list shared among all OSs that declare `#[cfg(unix)]`.\n\n## Test before you commit\n\nWe have two automated tests running on\n[GitHub Actions](https://github.com/rust-lang/libc/actions):\n\n1. [`libc-test`](https://github.com/gnzlbg/ctest)\n  - `cd libc-test && cargo test`\n  - Use the `skip_*()` functions in `build.rs` if you really need a workaround.\n2. Style checker\n  - [`./ci/style.sh`](https://github.com/rust-lang/libc/blob/main/ci/style.sh)\n\n## Breaking change policy\n\nSometimes an upstream adds a breaking change to their API e.g. removing outdated\nitems, changing the type signature, etc. And we probably should follow that\nchange to build the `libc` crate successfully. It's annoying to do the\nequivalent of semver-major versioning for each such change. Instead, we mark the\nitem as deprecated and do the actual change after a certain period. The steps\nare:\n\n1. Add `#[deprecated(since = \"\", note=\"\")]` attribute to the item.\n  - The `since` field should have a next version of `libc` (e.g., if the current\n    version is `0.2.1`, it should be `0.2.2`).\n  - The `note` field should have a reason to deprecate and a tracking issue to\n    call for comments (e.g., \"We consider removing this as the upstream removed\n    it. If you're using it, please comment on #XXX\").\n2. If we don't see any concerns for a while, do the change actually.\n\n## Supported target policy\n\nWhen Rust removes a support for a target, the libc crate also may remove the\nsupport at any time.\n\n## Releasing your change to crates.io\n\nThis repository uses [release-plz] to handle releases. Once your pull request\nhas been merged, a maintainer just needs to verify the generated changelog, then\nmerge the bot's release PR. This will automatically publish to crates.io!\n\n[release-plz]: https://github.com/MarcoIeni/release-plz\n"
        },
        {
          "name": "Cargo.toml",
          "type": "blob",
          "size": 4.2841796875,
          "content": "[package]\nname = \"libc\"\nversion = \"1.0.0-alpha.1\"\nauthors = [\"The Rust Project Developers\"]\nlicense = \"MIT OR Apache-2.0\"\nreadme = \"README.md\"\nedition = \"2021\"\nrepository = \"https://github.com/rust-lang/libc\"\nhomepage = \"https://github.com/rust-lang/libc\"\ndocumentation = \"https://docs.rs/libc/\"\nkeywords = [\"libc\", \"ffi\", \"bindings\", \"operating\", \"system\"]\ncategories = [\"external-ffi-bindings\", \"no-std\", \"os\"]\nbuild = \"build.rs\"\nexclude = [\"/ci/*\", \"/.github/*\", \"/.cirrus.yml\", \"/triagebot.toml\"]\nrust-version = \"1.63\"\ndescription = \"Raw FFI bindings to platform libraries like libc.\"\n\n[package.metadata.docs.rs]\nfeatures = [\"extra_traits\"]\ndefault-target = \"x86_64-unknown-linux-gnu\"\ntargets = [\n    \"aarch64-apple-darwin\",\n    \"aarch64-apple-ios\",\n    \"aarch64-linux-android\",\n    \"aarch64-pc-windows-msvc\",\n    \"aarch64-unknown-freebsd\",\n    \"aarch64-unknown-fuchsia\",\n    \"aarch64-unknown-hermit\",\n    \"aarch64-unknown-linux-gnu\",\n    \"aarch64-unknown-linux-musl\",\n    \"aarch64-unknown-netbsd\",\n    \"aarch64-unknown-openbsd\",\n    \"aarch64-wrs-vxworks\",\n    \"arm-linux-androideabi\",\n    \"arm-unknown-linux-gnueabi\",\n    \"arm-unknown-linux-gnueabihf\",\n    \"arm-unknown-linux-musleabi\",\n    \"arm-unknown-linux-musleabihf\",\n    \"armebv7r-none-eabi\",\n    \"armebv7r-none-eabihf\",\n    \"armv5te-unknown-linux-gnueabi\",\n    \"armv5te-unknown-linux-musleabi\",\n    \"armv7-linux-androideabi\",\n    \"armv7-unknown-linux-gnueabihf\",\n    \"armv7-unknown-linux-musleabihf\",\n    \"armv7-wrs-vxworks-eabihf\",\n    \"armv7r-none-eabi\",\n    \"armv7r-none-eabihf\",\n    # FIXME(hexagon): excluded due to duplicate symbol errors\n    # \"hexagon-unknown-linux-musl\",\n    \"i586-pc-windows-msvc\",\n    \"i586-unknown-linux-gnu\",\n    \"i586-unknown-linux-musl\",\n    \"i686-linux-android\",\n    \"i686-pc-windows-gnu\",\n    \"i686-pc-windows-msvc\",\n    \"i686-pc-windows-msvc\",\n    \"i686-unknown-freebsd\",\n    \"i686-unknown-haiku\",\n    \"i686-unknown-linux-gnu\",\n    \"i686-unknown-linux-musl\",\n    \"i686-unknown-netbsd\",\n    \"i686-unknown-openbsd\",\n    \"i686-wrs-vxworks\",\n    \"loongarch64-unknown-linux-gnu\",\n    \"mips-unknown-linux-gnu\",\n    \"mips-unknown-linux-musl\",\n    \"mips64-unknown-linux-gnuabi64\",\n    \"mips64-unknown-linux-muslabi64\",\n    \"mips64el-unknown-linux-gnuabi64\",\n    \"mips64el-unknown-linux-muslabi64\",\n    \"mipsel-unknown-linux-gnu\",\n    \"mipsel-unknown-linux-musl\",\n    \"nvptx64-nvidia-cuda\",\n    \"powerpc-unknown-linux-gnu\",\n    \"powerpc-unknown-linux-gnuspe\",\n    \"powerpc-unknown-netbsd\",\n    \"powerpc-wrs-vxworks\",\n    \"powerpc-wrs-vxworks-spe\",\n    \"powerpc64-unknown-freebsd\",\n    \"powerpc64-unknown-linux-gnu\",\n    \"powerpc64-wrs-vxworks\",\n    \"powerpc64le-unknown-linux-gnu\",\n    \"riscv32gc-unknown-linux-gnu\",\n    \"riscv32i-unknown-none-elf\",\n    \"riscv32imac-unknown-none-elf\",\n    \"riscv32imc-unknown-none-elf\",\n    \"riscv32-wrs-vxworks\",\n    \"riscv64gc-unknown-freebsd\",\n    \"riscv64gc-unknown-hermit\",\n    \"riscv64gc-unknown-linux-gnu\",\n    \"riscv64gc-unknown-linux-musl\",\n    \"riscv64gc-unknown-none-elf\",\n    \"riscv64imac-unknown-none-elf\",\n    \"riscv64-wrs-vxworks\",\n    \"s390x-unknown-linux-gnu\",\n    \"s390x-unknown-linux-musl\",\n    \"sparc-unknown-linux-gnu\",\n    \"sparc64-unknown-linux-gnu\",\n    \"sparc64-unknown-netbsd\",\n    \"sparcv9-sun-solaris\",\n    \"thumbv6m-none-eabi\",\n    \"thumbv7em-none-eabi\",\n    \"thumbv7em-none-eabihf\",\n    \"thumbv7m-none-eabi\",\n    \"thumbv7neon-linux-androideabi\",\n    \"thumbv7neon-unknown-linux-gnueabihf\",\n    \"wasm32-unknown-emscripten\",\n    \"wasm32-unknown-unknown\",\n    \"x86_64-apple-darwin\",\n    \"x86_64-apple-ios\",\n    \"x86_64-fortanix-unknown-sgx\",\n    \"x86_64-linux-android\",\n    \"x86_64-pc-solaris\",\n    \"x86_64-pc-windows-gnu\",\n    \"x86_64-pc-windows-msvc\",\n    \"x86_64-unknown-dragonfly\",\n    \"x86_64-unknown-freebsd\",\n    \"x86_64-unknown-fuchsia\",\n    \"x86_64-unknown-haiku\",\n    \"x86_64-unknown-hermit\",\n    \"x86_64-unknown-illumos\",\n    \"x86_64-unknown-l4re-uclibc\",\n    \"x86_64-unknown-linux-gnu\",\n    \"x86_64-unknown-linux-gnux32\",\n    \"x86_64-unknown-linux-musl\",\n    \"x86_64-unknown-netbsd\",\n    \"x86_64-unknown-openbsd\",\n    \"x86_64-unknown-redox\",\n    \"x86_64-wrs-vxworks\"\n]\ncargo-args = [\"-Zbuild-std=core\"]\n\n[dependencies]\nrustc-std-workspace-core = { version = \"1.0.0\", optional = true }\n\n[features]\ndefault = [\"std\"]\nstd = []\nrustc-dep-of-std = [\"rustc-std-workspace-core\"]\nextra_traits = []\n\n[workspace]\nmembers = [\"libc-test\"]\n"
        },
        {
          "name": "LICENSE-APACHE",
          "type": "blob",
          "size": 9.4951171875,
          "content": "                              Apache License\n                        Version 2.0, January 2004\n                     http://www.apache.org/licenses/\n\nTERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n1. Definitions.\n\n   \"License\" shall mean the terms and conditions for use, reproduction,\n   and distribution as defined by Sections 1 through 9 of this document.\n\n   \"Licensor\" shall mean the copyright owner or entity authorized by\n   the copyright owner that is granting the License.\n\n   \"Legal Entity\" shall mean the union of the acting entity and all\n   other entities that control, are controlled by, or are under common\n   control with that entity. For the purposes of this definition,\n   \"control\" means (i) the power, direct or indirect, to cause the\n   direction or management of such entity, whether by contract or\n   otherwise, or (ii) ownership of fifty percent (50%) or more of the\n   outstanding shares, or (iii) beneficial ownership of such entity.\n\n   \"You\" (or \"Your\") shall mean an individual or Legal Entity\n   exercising permissions granted by this License.\n\n   \"Source\" form shall mean the preferred form for making modifications,\n   including but not limited to software source code, documentation\n   source, and configuration files.\n\n   \"Object\" form shall mean any form resulting from mechanical\n   transformation or translation of a Source form, including but\n   not limited to compiled object code, generated documentation,\n   and conversions to other media types.\n\n   \"Work\" shall mean the work of authorship, whether in Source or\n   Object form, made available under the License, as indicated by a\n   copyright notice that is included in or attached to the work\n   (an example is provided in the Appendix below).\n\n   \"Derivative Works\" shall mean any work, whether in Source or Object\n   form, that is based on (or derived from) the Work and for which the\n   editorial revisions, annotations, elaborations, or other modifications\n   represent, as a whole, an original work of authorship. For the purposes\n   of this License, Derivative Works shall not include works that remain\n   separable from, or merely link (or bind by name) to the interfaces of,\n   the Work and Derivative Works thereof.\n\n   \"Contribution\" shall mean any work of authorship, including\n   the original version of the Work and any modifications or additions\n   to that Work or Derivative Works thereof, that is intentionally\n   submitted to Licensor for inclusion in the Work by the copyright owner\n   or by an individual or Legal Entity authorized to submit on behalf of\n   the copyright owner. For the purposes of this definition, \"submitted\"\n   means any form of electronic, verbal, or written communication sent\n   to the Licensor or its representatives, including but not limited to\n   communication on electronic mailing lists, source code control systems,\n   and issue tracking systems that are managed by, or on behalf of, the\n   Licensor for the purpose of discussing and improving the Work, but\n   excluding communication that is conspicuously marked or otherwise\n   designated in writing by the copyright owner as \"Not a Contribution.\"\n\n   \"Contributor\" shall mean Licensor and any individual or Legal Entity\n   on behalf of whom a Contribution has been received by Licensor and\n   subsequently incorporated within the Work.\n\n2. Grant of Copyright License. Subject to the terms and conditions of\n   this License, each Contributor hereby grants to You a perpetual,\n   worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n   copyright license to reproduce, prepare Derivative Works of,\n   publicly display, publicly perform, sublicense, and distribute the\n   Work and such Derivative Works in Source or Object form.\n\n3. Grant of Patent License. Subject to the terms and conditions of\n   this License, each Contributor hereby grants to You a perpetual,\n   worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n   (except as stated in this section) patent license to make, have made,\n   use, offer to sell, sell, import, and otherwise transfer the Work,\n   where such license applies only to those patent claims licensable\n   by such Contributor that are necessarily infringed by their\n   Contribution(s) alone or by combination of their Contribution(s)\n   with the Work to which such Contribution(s) was submitted. If You\n   institute patent litigation against any entity (including a\n   cross-claim or counterclaim in a lawsuit) alleging that the Work\n   or a Contribution incorporated within the Work constitutes direct\n   or contributory patent infringement, then any patent licenses\n   granted to You under this License for that Work shall terminate\n   as of the date such litigation is filed.\n\n4. Redistribution. You may reproduce and distribute copies of the\n   Work or Derivative Works thereof in any medium, with or without\n   modifications, and in Source or Object form, provided that You\n   meet the following conditions:\n\n   (a) You must give any other recipients of the Work or\n       Derivative Works a copy of this License; and\n\n   (b) You must cause any modified files to carry prominent notices\n       stating that You changed the files; and\n\n   (c) You must retain, in the Source form of any Derivative Works\n       that You distribute, all copyright, patent, trademark, and\n       attribution notices from the Source form of the Work,\n       excluding those notices that do not pertain to any part of\n       the Derivative Works; and\n\n   (d) If the Work includes a \"NOTICE\" text file as part of its\n       distribution, then any Derivative Works that You distribute must\n       include a readable copy of the attribution notices contained\n       within such NOTICE file, excluding those notices that do not\n       pertain to any part of the Derivative Works, in at least one\n       of the following places: within a NOTICE text file distributed\n       as part of the Derivative Works; within the Source form or\n       documentation, if provided along with the Derivative Works; or,\n       within a display generated by the Derivative Works, if and\n       wherever such third-party notices normally appear. The contents\n       of the NOTICE file are for informational purposes only and\n       do not modify the License. You may add Your own attribution\n       notices within Derivative Works that You distribute, alongside\n       or as an addendum to the NOTICE text from the Work, provided\n       that such additional attribution notices cannot be construed\n       as modifying the License.\n\n   You may add Your own copyright statement to Your modifications and\n   may provide additional or different license terms and conditions\n   for use, reproduction, or distribution of Your modifications, or\n   for any such Derivative Works as a whole, provided Your use,\n   reproduction, and distribution of the Work otherwise complies with\n   the conditions stated in this License.\n\n5. Submission of Contributions. Unless You explicitly state otherwise,\n   any Contribution intentionally submitted for inclusion in the Work\n   by You to the Licensor shall be under the terms and conditions of\n   this License, without any additional terms or conditions.\n   Notwithstanding the above, nothing herein shall supersede or modify\n   the terms of any separate license agreement you may have executed\n   with Licensor regarding such Contributions.\n\n6. Trademarks. This License does not grant permission to use the trade\n   names, trademarks, service marks, or product names of the Licensor,\n   except as required for reasonable and customary use in describing the\n   origin of the Work and reproducing the content of the NOTICE file.\n\n7. Disclaimer of Warranty. Unless required by applicable law or\n   agreed to in writing, Licensor provides the Work (and each\n   Contributor provides its Contributions) on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n   implied, including, without limitation, any warranties or conditions\n   of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n   PARTICULAR PURPOSE. You are solely responsible for determining the\n   appropriateness of using or redistributing the Work and assume any\n   risks associated with Your exercise of permissions under this License.\n\n8. Limitation of Liability. In no event and under no legal theory,\n   whether in tort (including negligence), contract, or otherwise,\n   unless required by applicable law (such as deliberate and grossly\n   negligent acts) or agreed to in writing, shall any Contributor be\n   liable to You for damages, including any direct, indirect, special,\n   incidental, or consequential damages of any character arising as a\n   result of this License or out of the use or inability to use the\n   Work (including but not limited to damages for loss of goodwill,\n   work stoppage, computer failure or malfunction, or any and all\n   other commercial damages or losses), even if such Contributor\n   has been advised of the possibility of such damages.\n\n9. Accepting Warranty or Additional Liability. While redistributing\n   the Work or Derivative Works thereof, You may choose to offer,\n   and charge a fee for, acceptance of support, warranty, indemnity,\n   or other liability obligations and/or rights consistent with this\n   License. However, in accepting such obligations, You may act only\n   on Your own behalf and on Your sole responsibility, not on behalf\n   of any other Contributor, and only if You agree to indemnify,\n   defend, and hold each Contributor harmless for any liability\n   incurred by, or claims asserted against, such Contributor by reason\n   of your accepting any such warranty or additional liability.\n\nEND OF TERMS AND CONDITIONS\n"
        },
        {
          "name": "LICENSE-MIT",
          "type": "blob",
          "size": 1.05078125,
          "content": "Copyright (c) 2014-2020 The Rust Project Developers\n\nPermission is hereby granted, free of charge, to any\nperson obtaining a copy of this software and associated\ndocumentation files (the \"Software\"), to deal in the\nSoftware without restriction, including without\nlimitation the rights to use, copy, modify, merge,\npublish, distribute, sublicense, and/or sell copies of\nthe Software, and to permit persons to whom the Software\nis furnished to do so, subject to the following\nconditions:\n\nThe above copyright notice and this permission notice\nshall be included in all copies or substantial portions\nof the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF\nANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED\nTO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A\nPARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT\nSHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\nOF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR\nIN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\nDEALINGS IN THE SOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 4.095703125,
          "content": "# libc - Raw FFI bindings to platforms' system libraries\n\n[![GHA Status]][GitHub Actions] [![Cirrus CI Status]][Cirrus CI] [![Latest Version]][crates.io] [![Documentation]][docs.rs] ![License]\n\n`libc` provides all of the definitions necessary to easily interoperate with C\ncode (or \"C-like\" code) on each of the platforms that Rust supports. This\nincludes type definitions (e.g. `c_int`), constants (e.g. `EINVAL`) as well as\nfunction headers (e.g. `malloc`).\n\nThis crate exports all underlying platform types, functions, and constants under\nthe crate root, so all items are accessible as `libc::foo`. The types and values\nof all the exported APIs match the platform that libc is compiled for.\n\nWindows API bindings are not included in this crate. If you are looking for\nWinAPI bindings, consider using crates like [windows-sys].\n\nMore detailed information about the design of this library can be found in its\n[associated RFC][rfc].\n\n[rfc]: https://github.com/rust-lang/rfcs/blob/HEAD/text/1291-promote-libc.md\n[windows-sys]: https://docs.rs/windows-sys\n\n## v1.0 Roadmap\n\nCurrently, `libc` has two active branches: `main` for the upcoming v1.0 release,\nand `libc-0.2` for the currently published version. By default all pull requests\nshould target `main`; once reviewed, they can be cherry picked to the `libc-0.2`\nbranch if needed.\n\nWe will stop making new v0.2 releases once v1.0 is released.\n\nSee the section in [CONTRIBUTING.md](CONTRIBUTING.md#v10-roadmap) for more\ndetails.\n\n## Usage\n\nAdd the following to your `Cargo.toml`:\n\n```toml\n[dependencies]\nlibc = \"0.2\"\n```\n\n## Features\n\n* `std`: by default `libc` links to the standard library. Disable this feature\n  to remove this dependency and be able to use `libc` in `#![no_std]` crates.\n\n* `extra_traits`: all `struct`s implemented in `libc` are `Copy` and `Clone`.\n  This feature derives `Debug`, `Eq`, `Hash`, and `PartialEq`.\n\n## Rust version support\n\nThe minimum supported Rust toolchain version is currently **Rust 1.63**.\n\nIncreases to the MSRV are allowed to change without a major (i.e. semver-\nbreaking) release in order to avoid a ripple effect in the ecosystem. A policy\nfor when this may change is a work in progress.\n\n`libc` may continue to compile with Rust versions older than the current MSRV\nbut this is not guaranteed.\n\n## Platform support\n\nYou can see the platform(target)-specific docs on [docs.rs], select a platform\nyou want to see.\n\nSee [`ci/build.sh`](https://github.com/rust-lang/libc/blob/HEAD/ci/build.sh) for\nthe platforms on which `libc` is guaranteed to build for each Rust toolchain.\nThe test-matrix at [GitHub Actions] and [Cirrus CI] show the platforms in which\n`libc` tests are run.\n\n<div class=\"platform_docs\"></div>\n\n## License\n\nThis project is licensed under either of\n\n* [Apache License, Version 2.0](https://www.apache.org/licenses/LICENSE-2.0)\n  ([LICENSE-APACHE](https://github.com/rust-lang/libc/blob/HEAD/LICENSE-APACHE))\n\n* [MIT License](https://opensource.org/licenses/MIT)\n  ([LICENSE-MIT](https://github.com/rust-lang/libc/blob/HEAD/LICENSE-MIT))\n\nat your option.\n\n## Contributing\n\nWe welcome all people who want to contribute. Please see the\n[contributing instructions] for more information.\n\n[contributing instructions]: https://github.com/rust-lang/libc/blob/HEAD/CONTRIBUTING.md\n\nContributions in any form (issues, pull requests, etc.) to this project must\nadhere to Rust's [Code of Conduct].\n\n[Code of Conduct]: https://www.rust-lang.org/policies/code-of-conduct\n\nUnless you explicitly state otherwise, any contribution intentionally submitted\nfor inclusion in `libc` by you, as defined in the Apache-2.0 license, shall be\ndual licensed as above, without any additional terms or conditions.\n\n[GitHub Actions]: https://github.com/rust-lang/libc/actions\n[GHA Status]: https://github.com/rust-lang/libc/workflows/CI/badge.svg\n[Cirrus CI]: https://cirrus-ci.com/github/rust-lang/libc\n[Cirrus CI Status]: https://api.cirrus-ci.com/github/rust-lang/libc.svg\n[crates.io]: https://crates.io/crates/libc\n[Latest Version]: https://img.shields.io/crates/v/libc.svg\n[Documentation]: https://docs.rs/libc/badge.svg\n[docs.rs]: https://docs.rs/libc\n[License]: https://img.shields.io/crates/l/libc.svg\n"
        },
        {
          "name": "build.rs",
          "type": "blob",
          "size": 7.6240234375,
          "content": "use std::process::{Command, Output};\nuse std::{env, str};\n\n// List of cfgs this build script is allowed to set. The list is needed to support check-cfg, as we\n// need to know all the possible cfgs that this script will set. If you need to set another cfg\n// make sure to add it to this list as well.\nconst ALLOWED_CFGS: &'static [&'static str] = &[\n    \"emscripten_new_stat_abi\",\n    \"espidf_time32\",\n    \"freebsd10\",\n    \"freebsd11\",\n    \"freebsd12\",\n    \"freebsd13\",\n    \"freebsd14\",\n    \"freebsd15\",\n    // FIXME(ctest): this config shouldn't be needed but ctest can't parse `const extern fn`\n    \"libc_const_extern_fn\",\n    \"libc_deny_warnings\",\n    \"libc_ctest\",\n    // Corresponds to `__USE_TIME_BITS64` in UAPI\n    \"linux_time_bits64\",\n];\n\n// Extra values to allow for check-cfg.\nconst CHECK_CFG_EXTRA: &'static [(&'static str, &'static [&'static str])] = &[\n    (\n        \"target_os\",\n        &[\n            \"switch\", \"aix\", \"ohos\", \"hurd\", \"rtems\", \"visionos\", \"nuttx\",\n        ],\n    ),\n    (\"target_env\", &[\"illumos\", \"wasi\", \"aix\", \"ohos\"]),\n    (\n        \"target_arch\",\n        &[\"loongarch64\", \"mips32r6\", \"mips64r6\", \"csky\"],\n    ),\n];\n\nfn main() {\n    // Avoid unnecessary re-building.\n    println!(\"cargo:rerun-if-changed=build.rs\");\n\n    let (rustc_minor_ver, _is_nightly) = rustc_minor_nightly();\n    let rustc_dep_of_std = env::var(\"CARGO_FEATURE_RUSTC_DEP_OF_STD\").is_ok();\n    let libc_ci = env::var(\"LIBC_CI\").is_ok();\n    let libc_check_cfg = env::var(\"LIBC_CHECK_CFG\").is_ok() || rustc_minor_ver >= 80;\n    let linux_time_bits64 = env::var(\"RUST_LIBC_UNSTABLE_LINUX_TIME_BITS64\").is_ok();\n\n    // The ABI of libc used by std is backward compatible with FreeBSD 12.\n    // The ABI of libc from crates.io is backward compatible with FreeBSD 12.\n    //\n    // On CI, we detect the actual FreeBSD version and match its ABI exactly,\n    // running tests to ensure that the ABI is correct.\n    println!(\"cargo:rerun-if-env-changed=RUST_LIBC_UNSTABLE_FREEBSD_VERSION\");\n    // Allow overriding the default version for testing\n    let which_freebsd = if let Ok(version) = env::var(\"RUST_LIBC_UNSTABLE_FREEBSD_VERSION\") {\n        let vers = version.parse().unwrap();\n        println!(\"cargo:warning=setting FreeBSD version to {vers}\");\n        vers\n    } else if libc_ci {\n        which_freebsd().unwrap_or(12)\n    } else if rustc_dep_of_std {\n        12\n    } else {\n        12\n    };\n\n    match which_freebsd {\n        x if x < 10 => panic!(\"FreeBSD older than 10 is not supported\"),\n        10 => set_cfg(\"freebsd10\"),\n        11 => set_cfg(\"freebsd11\"),\n        12 => set_cfg(\"freebsd12\"),\n        13 => set_cfg(\"freebsd13\"),\n        14 => set_cfg(\"freebsd14\"),\n        _ => set_cfg(\"freebsd15\"),\n    }\n\n    match emcc_version_code() {\n        Some(v) if (v >= 30142) => set_cfg(\"emscripten_new_stat_abi\"),\n        // Non-Emscripten or version < 3.1.42.\n        Some(_) | None => (),\n    }\n\n    if linux_time_bits64 {\n        set_cfg(\"linux_time_bits64\");\n    }\n\n    // On CI: deny all warnings\n    if libc_ci {\n        set_cfg(\"libc_deny_warnings\");\n    }\n\n    // Set unconditionally when ctest is not being invoked.\n    set_cfg(\"libc_const_extern_fn\");\n\n    // check-cfg is a nightly cargo/rustc feature to warn when unknown cfgs are used across the\n    // codebase. libc can configure it if the appropriate environment variable is passed. Since\n    // rust-lang/rust enforces it, this is useful when using a custom libc fork there.\n    //\n    // https://doc.rust-lang.org/nightly/cargo/reference/unstable.html#check-cfg\n    if libc_check_cfg {\n        for cfg in ALLOWED_CFGS {\n            if rustc_minor_ver >= 75 {\n                println!(\"cargo:rustc-check-cfg=cfg({})\", cfg);\n            } else {\n                println!(\"cargo:rustc-check-cfg=values({})\", cfg);\n            }\n        }\n        for &(name, values) in CHECK_CFG_EXTRA {\n            let values = values.join(\"\\\",\\\"\");\n            if rustc_minor_ver >= 75 {\n                println!(\"cargo:rustc-check-cfg=cfg({},values(\\\"{}\\\"))\", name, values);\n            } else {\n                println!(\"cargo:rustc-check-cfg=values({},\\\"{}\\\")\", name, values);\n            }\n        }\n    }\n}\n\n/// Run `rustc --version` and capture the output, adjusting arguments as needed if `clippy-driver`\n/// is used instead.\nfn rustc_version_cmd(is_clippy_driver: bool) -> Output {\n    let rustc = env::var_os(\"RUSTC\").expect(\"Failed to get rustc version: missing RUSTC env\");\n\n    let mut cmd = match env::var_os(\"RUSTC_WRAPPER\") {\n        Some(ref wrapper) if wrapper.is_empty() => Command::new(rustc),\n        Some(wrapper) => {\n            let mut cmd = Command::new(wrapper);\n            cmd.arg(rustc);\n            if is_clippy_driver {\n                cmd.arg(\"--rustc\");\n            }\n\n            cmd\n        }\n        None => Command::new(rustc),\n    };\n\n    cmd.arg(\"--version\");\n\n    let output = cmd.output().expect(\"Failed to get rustc version\");\n\n    if !output.status.success() {\n        panic!(\n            \"failed to run rustc: {}\",\n            String::from_utf8_lossy(output.stderr.as_slice())\n        );\n    }\n\n    output\n}\n\n/// Return the minor version of `rustc`, as well as a bool indicating whether or not the version\n/// is a nightly.\nfn rustc_minor_nightly() -> (u32, bool) {\n    macro_rules! otry {\n        ($e:expr) => {\n            match $e {\n                Some(e) => e,\n                None => panic!(\"Failed to get rustc version\"),\n            }\n        };\n    }\n\n    let mut output = rustc_version_cmd(false);\n\n    if otry!(str::from_utf8(&output.stdout).ok()).starts_with(\"clippy\") {\n        output = rustc_version_cmd(true);\n    }\n\n    let version = otry!(str::from_utf8(&output.stdout).ok());\n\n    let mut pieces = version.split('.');\n\n    if pieces.next() != Some(\"rustc 1\") {\n        panic!(\"Failed to get rustc version\");\n    }\n\n    let minor = pieces.next();\n\n    // If `rustc` was built from a tarball, its version string\n    // will have neither a git hash nor a commit date\n    // (e.g. \"rustc 1.39.0\"). Treat this case as non-nightly,\n    // since a nightly build should either come from CI\n    // or a git checkout\n    let nightly_raw = otry!(pieces.next()).split('-').nth(1);\n    let nightly = nightly_raw\n        .map(|raw| raw.starts_with(\"dev\") || raw.starts_with(\"nightly\"))\n        .unwrap_or(false);\n    let minor = otry!(otry!(minor).parse().ok());\n\n    (minor, nightly)\n}\n\nfn which_freebsd() -> Option<i32> {\n    let output = Command::new(\"freebsd-version\").output().ok()?;\n    if !output.status.success() {\n        return None;\n    }\n\n    let stdout = String::from_utf8(output.stdout).ok()?;\n\n    match &stdout {\n        s if s.starts_with(\"10\") => Some(10),\n        s if s.starts_with(\"11\") => Some(11),\n        s if s.starts_with(\"12\") => Some(12),\n        s if s.starts_with(\"13\") => Some(13),\n        s if s.starts_with(\"14\") => Some(14),\n        s if s.starts_with(\"15\") => Some(15),\n        _ => None,\n    }\n}\n\nfn emcc_version_code() -> Option<u64> {\n    let output = Command::new(\"emcc\").arg(\"-dumpversion\").output().ok()?;\n    if !output.status.success() {\n        return None;\n    }\n\n    let version = String::from_utf8(output.stdout).ok()?;\n\n    // Some Emscripten versions come with `-git` attached, so split the\n    // version string also on the `-` char.\n    let mut pieces = version.trim().split(['.', '-']);\n\n    let major = pieces.next().and_then(|x| x.parse().ok()).unwrap_or(0);\n    let minor = pieces.next().and_then(|x| x.parse().ok()).unwrap_or(0);\n    let patch = pieces.next().and_then(|x| x.parse().ok()).unwrap_or(0);\n\n    Some(major * 10000 + minor * 100 + patch)\n}\n\nfn set_cfg(cfg: &str) {\n    if !ALLOWED_CFGS.contains(&cfg) {\n        panic!(\"trying to set cfg {}, but it is not in ALLOWED_CFGS\", cfg);\n    }\n    println!(\"cargo:rustc-cfg={}\", cfg);\n}\n"
        },
        {
          "name": "ci",
          "type": "tree",
          "content": null
        },
        {
          "name": "libc-test",
          "type": "tree",
          "content": null
        },
        {
          "name": "rustfmt.toml",
          "type": "blob",
          "size": 0.1103515625,
          "content": "edition = \"2021\"\nerror_on_line_overflow = true\ngroup_imports = \"StdExternalCrate\"\nimports_granularity = \"Module\"\n"
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        },
        {
          "name": "triagebot.toml",
          "type": "blob",
          "size": 5.029296875,
          "content": "[relabel]\nallow-unauthenticated = [\n    \"C-*\",\n    \"O-*\",\n    \"S-*\",\n    \"stable-nominated\",\n]\n\n[assign]\ncontributing_url = \"https://github.com/rust-lang/libc/blob/HEAD/CONTRIBUTING.md\"\n\n[assign.owners]\n\"*\" = [\n    \"@tgross35\",\n]\n\n[autolabel.\"A-CI\"]\ntrigger_files = [\n    \".cirrus.yml\",\n    \".github\",\n    \"src/ci\",\n]\n\n[autolabel.\"S-waiting-on-review\"]\nnew_pr = true\n\n[autolabel.\"O-android\"]\ntrigger_files = [\"src/unix/linux_like/android\"]\n\n[autolabel.\"O-arm\"]\ntrigger_files = [\n    \"src/solid/arm.rs\",\n    \"src/unix/bsd/freebsdlike/freebsd/arm.rs\",\n    \"src/unix/bsd/netbsdlike/netbsd/arm.rs\",\n    \"src/unix/bsd/netbsdlike/openbsd/arm.rs\",\n    \"src/unix/linux_like/android/b32/arm.rs\",\n    \"src/unix/linux_like/linux/gnu/b32/arm/\",\n    \"src/unix/linux_like/linux/musl/b32/arm/\",\n    \"src/unix/linux_like/linux/uclibc/arm/\",\n    \"src/unix/newlib/arm/\",\n    \"src/vxworks/arm.rs\",\n]\n\n[autolabel.\"O-bsd\"]\ntrigger_files = [\"src/unix/bsd/mod.rs\"]\n\n[autolabel.\"O-dragonfly\"]\ntrigger_files = [\"src/unix/bsd/freebsdlike/dragonfly\"]\n\n[autolabel.\"O-gnu\"]\ntrigger_files = [\n    \"src/unix/linux_like/linux/gnu\",\n    \"src/windows/gnu\",\n]\n\n[autolabel.\"O-illumos\"]\ntrigger_files = [\"src/unix/solarish/illumos.rs\"]\n\n[autolabel.\"O-linux\"]\ntrigger_files = [\"src/unix/linux_like/linux\"]\n\n[autolabel.\"O-linux-like\"]\ntrigger_files = [\"src/unix/linux_like/mod.rs\"]\n\n[autolabel.\"O-macos\"]\ntrigger_files = [\"src/unix/bsd/apple\"]\n\n[autolabel.\"O-mips\"]\ntrigger_files = [\n    \"src/unix/bsd/netbsdlike/netbsd/mips.rs\",\n    \"src/unix/bsd/netbsdlike/openbsd/mips64.rs\",\n    \"src/unix/linux_like/linux/arch/mips\",\n    \"src/unix/linux_like/linux/gnu/b32/mips\",\n    \"src/unix/linux_like/linux/gnu/b64/mips64\",\n    \"src/unix/linux_like/linux/musl/b32/mips\",\n    \"src/unix/linux_like/linux/musl/b64/mips64.rs\",\n    \"src/unix/linux_like/linux/uclibc/mips\",\n]\n\n[autolabel.\"O-musl\"]\ntrigger_files = [\"src/unix/linux_like/linux/musl\"]\n\n[autolabel.\"O-newlib\"]\ntrigger_files = [\"src/unix/newlib\"]\n\n[autolabel.\"O-redox\"]\ntrigger_files = [\"src/unix/redox\"]\n\n[autolabel.\"O-riscv\"]\ntrigger_files = [\n    \"src/fuchsia/riscv64.rs\",\n    \"src/unix/bsd/freebsdlike/freebsd/riscv64.rs\",\n    \"src/unix/bsd/netbsdlike/netbsd/riscv64.rs\",\n    \"src/unix/bsd/netbsdlike/openbsd/riscv64.rs\",\n    \"src/unix/linux_like/android/b64/riscv64\",\n    \"src/unix/linux_like/linux/gnu/b32/riscv32\",\n    \"src/unix/linux_like/linux/gnu/b64/riscv64\",\n    \"src/unix/linux_like/linux/musl/b32/riscv32\",\n    \"src/unix/linux_like/linux/musl/b64/riscv64\",\n    \"src/vxworks/riscv32.rs\",\n    \"src/vxworks/riscv64.rs\",\n]\n\n[autolabel.\"O-solarish\"]\ntrigger_files = [\"src/unix/solarish\"]\n\n[autolabel.\"O-sparc\"]\ntrigger_files = [\n    \"src/unix/bsd/netbsdlike/netbsd/sparc64.rs\",\n    \"src/unix/bsd/netbsdlike/openbsd/sparc64.rs\",\n    \"src/unix/linux_like/linux/arch/sparc\",\n    \"src/unix/linux_like/linux/gnu/b32/sparc\",\n    \"src/unix/linux_like/linux/gnu/b64/sparc64\",\n]\n\n[autolabel.\"O-unix\"]\ntrigger_files = [\"src/unix\"]\n\n[autolabel.\"O-wasi\"]\ntrigger_files = [\"src/wasi\"]\n\n[autolabel.\"O-windows\"]\ntrigger_files = [\"src/windows\"]\n\n[autolabel.\"O-x86\"]\ntrigger_files = [\n    \"src/fuchsia/x86_64.rs\",\n    \"src/unix/bsd/apple/b64/x86_64\",\n    \"src/unix/bsd/freebsdlike/freebsd/freebsd12/x86_64.rs\",\n    \"src/unix/bsd/freebsdlike/freebsd/freebsd13/x86_64.rs\",\n    \"src/unix/bsd/freebsdlike/freebsd/freebsd14/x86_64.rs\",\n    \"src/unix/bsd/freebsdlike/freebsd/freebsd15/x86_64.rs\",\n    \"src/unix/bsd/freebsdlike/freebsd/x86.rs\",\n    \"src/unix/bsd/freebsdlike/freebsd/x86_64\",\n    \"src/unix/bsd/netbsdlike/netbsd/x86.rs\",\n    \"src/unix/bsd/netbsdlike/netbsd/x86_64.rs\",\n    \"src/unix/bsd/netbsdlike/openbsd/x86.rs\",\n    \"src/unix/bsd/netbsdlike/openbsd/x86_64.rs\",\n    \"src/unix/haiku/x86_64.rs\",\n    \"src/unix/linux_like/android/b32/x86\",\n    \"src/unix/linux_like/android/b64/x86_64\",\n    \"src/unix/linux_like/linux/gnu/b32/x86\",\n    \"src/unix/linux_like/linux/gnu/b64/x86_64\",\n    \"src/unix/linux_like/linux/musl/b32/x86\",\n    \"src/unix/linux_like/linux/musl/b64/x86_64\",\n    \"src/unix/linux_like/linux/uclibc/x86_64\",\n    \"src/unix/nto/x86_64.rs\",\n    \"src/unix/solarish/x86.rs\",\n    \"src/unix/solarish/x86_64.rs\",\n    \"src/unix/solarish/x86_common.rs\",\n    \"src/vxworks/x86.rs\",\n    \"src/vxworks/x86_64.rs\",\n]\n\n[review-submitted]\n# These labels are removed when a review is submitted.\nreview_labels = [\"S-waiting-on-review\"]\n# This label is added when a review is submitted.\nreviewed_label = \"S-waiting-on-author\"\n\n[review-requested]\n# Those labels are removed when PR author requests a review from an assignee\nremove_labels = [\"S-waiting-on-author\"]\n# Those labels are added when PR author requests a review from an assignee\nadd_labels = [\"S-waiting-on-review\"]\n\n[shortcut]\n\n[mentions.\"src/unix/bsd/netbsdlike/openbsd\"]\nmessage = \"Some changes occurred in OpenBSD module\"\ncc = [\"@semarie\"]\n\n[mentions.\"src/unix/bsd/netbsdlike/mod.rs\"]\nmessage = \"Some changes occurred in OpenBSD module\"\ncc = [\"@semarie\"]\n\n[mentions.\"src/unix/solarish\"]\nmessage = \"Some changes occurred in solarish module\"\ncc = [\"@jclulow\", \"@pfmooney\"]\n\n[mentions.\"src/unix/linux_like/android\"]\nmessage = \"Some changes occurred in the Android module\"\ncc = [\"@maurer\"]\n"
        }
      ]
    }
  ]
}