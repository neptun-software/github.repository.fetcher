{
  "metadata": {
    "timestamp": 1736709295158,
    "page": 668,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjY3MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "FractalFir/rustc_codegen_clr",
      "stars": 1611,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.1865234375,
          "content": ".idea/\n*.rlib\n*.il\n*.o\n*.d\n*.rmeta\n*.lock\ntest/out\n/target\n/Cargo.lock\n.vscode/\n*.bc\n*log.txt\n*.a\n*.c\n*.mdb\n*.pdb\n*.out\n*.cilly\n*.cilly2\n.cargo/\nconfig.toml\nrust/\ncargo_tests/spinacz/target/\n"
        },
        {
          "name": "AssemblyUtilis",
          "type": "tree",
          "content": null
        },
        {
          "name": "BROKEN_TESTS.md",
          "type": "blob",
          "size": 5.8251953125,
          "content": "# How to find the source code of a broken test?\n1. Download the rust compiler source\n`git clone https://github.com/rust-lang/rust.git --depth 1000`\n2. Go into the library directory\n3. Serach for the name of your test `grep -r \"broken_test\"`\n# How to minimze a broken test?\n1. After finding a broken test, extract it into a spearte crate.\n2. Build the crate into native Rust using `cargo test` and check that it behaves as expcted. \n3. IMPORTANT! Clean the build cache using `cargo clean`. NEVER skip this step, beacause it can lead to suprising results which may hide the real issue.\n4. Build the crate using `rustc_codegen_clr` and observe the incorrect results. \n5. Make a small change by removing \\ simplifing some code in your example.\n6. Clean the build cache using `cargo clean` again before rebuilding to prevent issues. DO NOT SKIP THS STEP.\n7. Repeat steps 2-7 untill the test program can no longer be simplified.\n8. Create an issue with your simplified broken test.\n# List of broken core test:\n## Did not compleate:\n```\natomic::atomic_access_bool\natomic::bool_\natomic::int_max\natomic::int_min\natomic::int_nand\natomic::int_xor\natomic::ptr_bitops\natomic::uint_max\natomic::uint_min\natomic::uint_nand\natomic::uint_xor\ncell::refcell_ref_coercion\nfuture::test_join\nhash::test_writer_hasher\niter::adapters::step_by::test_iterator_step_by_nth_try_fold\niter::range::test_range_advance_by\niter::test_monad_laws_left_identity\nmanually_drop::smoke\nnum::flt2dec::random::shortest_f32_exhaustive_equivalence_test\nnum::flt2dec::random::shortest_f64_hard_random_equivalence_test\nnum::i128::tests::test_saturating_abs\nnum::i128::tests::test_saturating_neg\nnum::int_log::checked_ilog\nptr::ptr_metadata\nptr::test_ptr_metadata_in_const\nptr::test_variadic_fnptr\nresult::result_try_trait_v2_branch\nsimd::testing\nslice::select_nth_unstable\nslice::take_in_bounds_max_range_from\nslice::take_in_bounds_max_range_to\nslice::take_mut_in_bounds_max_range_from\nslice::take_mut_in_bounds_max_range_to\nslice::take_mut_oob_max_range_to_inclusive\nslice::take_oob_max_range_to_inclusive\n```\n## Failed\n```\nnum::i8::tests::test_pow\niter::adapters::flat_map::test_flat_map_try_folds\nnum::bignum::test_add_small_overflow\nnum::i16::tests::test_checked_next_multiple_of\nslice::swap_panics::index_b_equals_len\nnum::bignum::test_mul_small_overflow\nmem::uninit_fill_clone_panic_drop\nnum::i128::tests::test_lots_of_isqrt\niter::adapters::peekable::test_peek_try_folds\nnum::bignum::test_mul_digits_overflow_1\nnum::i8::tests::test_from_str_radix\nnet::ip_addr::ipv6_properties\nnum::test_int_from_str_overflow\niter::traits::double_ended::test_rev_try_folds\nascii::test_is_ascii_align_size_thoroughly\nnum::i16::tests::test_pow\nslice::swap_panics::index_a_equals_len\nnet::ip_addr::ipv6_addr_to_string\niter::adapters::flatten::test_flatten_try_folds\nnum::bignum::test_get_bit_out_of_range\nslice::take_last_nonempty\nnum::bignum::test_add_overflow_1\niter::adapters::skip::test_skip_try_folds\nnum::i16::tests::test_from_str\nnet::socket_addr::ipv6_socket_addr_to_string\niter::adapters::map::test_map_try_folds\ncell::refcell_unsized\nnum::f32::min\niter::adapters::cloned::test_cloned_try_folds\nnum::bignum::test_from_u64_overflow\niter::adapters::flatten::test_flatten_one_shot\nslice::take_first_nonempty\nnum::i16::tests::test_from_str_radix\nnum::f32::max\noption::as_slice\nnum::u16::tests::test_rotate\niter::adapters::step_by::test_iterator_step_by_nth_try_rfold\niter::range::test_range_inclusive_folds\niter::adapters::take_while::test_take_while_folds\niter::adapters::take::test_take_try_folds\nnum::u16::tests::test_leading_trailing_ones\nslice::swap_panics::index_b_greater_than_len\niter::adapters::skip_while::test_skip_while_try_fold\nslice::take_first_mut_nonempty\nnum::f64::max\nnet::socket_addr::socket_v6_to_str\nnum::i16::tests::test_rotate\nslice::swap_panics::index_a_greater_than_len\nnum::i8::tests::test_checked_next_multiple_of\nnum::bignum::test_mul_digits_overflow_2\nnum::f64::min\nnum::i8::tests::test_from_str\nslice::take_last_mut_nonempty\niter::adapters::filter_map::test_filter_map_try_folds\nptr::from_raw_parts\nnum::u8::tests::test_leading_trailing_ones\nnum::i16::tests::test_leading_trailing_ones\nnum::i8::tests::test_leading_trailing_ones\niter::adapters::flatten::test_flatten_one_shot_rev\nnum::bignum::test_mul_pow5_overflow_2\nnum::bignum::test_add_overflow_2\nnum::u128::tests::test_pow\nresult::result_const\niter::adapters::filter::test_filter_try_folds\nnum::bignum::test_mul_pow2_overflow_2\nnum::i128::tests::test_pow\n```\n# List of broken alloc tests:\n## Did not compleate:\n```\narc::make_mut_unsized\narc::shared_from_iter_normal\narc::shared_from_iter_trustedlen_no_fuse\narc::shared_from_iter_trustedlen_normal\narc::shared_from_iter_trustedlen_panic\narc::slice\narc::trait_object\narc::uninhabited\nautotraits::test_binary_heap\nautotraits::test_btree_map\nautotraits::test_btree_set\nautotraits::test_linked_list\nautotraits::test_vec_deque\nborrow::test_from_cow_c_str\nborrow::test_from_cow_os_str\nborrow::test_from_cow_path\nborrow::test_from_cow_slice\nborrow::test_from_cow_str\nheap::alloc_system_overaligned_request\nrc::shared_from_iter_normal\nrc::shared_from_iter_trustedlen_no_fuse\nrc::shared_from_iter_trustedlen_normal\nrc::shared_from_iter_trustedlen_panic\nrc::slice\nrc::trait_object\nrc::uninhabited\nslice::subslice_patterns\nslice::test_split_last\nstring::test_try_reserve\ntask::test_local_waker_will_wake_clone\ntask::test_waker_will_wake_clone\nthin_box::align1zst\nthin_box::align2zst\nthin_box::align64_size_not_pow2\nthin_box::align64big\nthin_box::align64med\nthin_box::align64small\nthin_box::align64zst\nvec::test_try_reserve\nvec_deque::test_try_reserve\n```\n## Failed:\n```\nslice::test_split_first_mut\nvec::test_index_out_of_bounds\nvec::vec_macro_repeating_null_raw_fat_pointer\nslice::test_split_first\nvec::extract_if_unconsumed_panic\nvec::extract_if_consumed_panic\nvec_deque::test_try_rfold_moves_iter\nvec_deque::test_try_fold_moves_iter\nstr::const_str_ptr\nvec::test_collect_after_iterator_clone\n```\n"
        },
        {
          "name": "CODE_OF_CONDUCT.md",
          "type": "blob",
          "size": 5.1025390625,
          "content": "# Contributor Covenant Code of Conduct\n\n## Our Pledge\n\nWe as members, contributors, and leaders pledge to make participation in our\ncommunity a harassment-free experience for everyone, regardless of age, body\nsize, visible or invisible disability, ethnicity, sex characteristics, gender\nidentity and expression, level of experience, education, socio-economic status,\nnationality, personal appearance, race, religion, or sexual identity\nand orientation.\n\nWe pledge to act and interact in ways that contribute to an open, welcoming,\ndiverse, inclusive, and healthy community.\n\n## Our Standards\n\nExamples of behavior that contributes to a positive environment for our\ncommunity include:\n\n* Demonstrating empathy and kindness toward other people\n* Being respectful of differing opinions, viewpoints, and experiences\n* Giving and gracefully accepting constructive feedback\n* Accepting responsibility and apologizing to those affected by our mistakes,\n  and learning from the experience\n* Focusing on what is best not just for us as individuals, but for the\n  overall community\n\nExamples of unacceptable behavior include:\n\n* The use of sexualized language or imagery, and sexual attention or\n  advances of any kind\n* Trolling, insulting or derogatory comments, and personal or political attacks\n* Public or private harassment\n* Publishing others' private information, such as a physical or email\n  address, without their explicit permission\n* Other conduct which could reasonably be considered inappropriate in a\n  professional setting\n\n## Enforcement Responsibilities\n\nCommunity leaders are responsible for clarifying and enforcing our standards of\nacceptable behavior and will take appropriate and fair corrective action in\nresponse to any behavior that they deem inappropriate, threatening, offensive,\nor harmful.\n\nCommunity leaders have the right and responsibility to remove, edit, or reject\ncomments, commits, code, wiki edits, issues, and other contributions that are\nnot aligned to this Code of Conduct, and will communicate reasons for moderation\ndecisions when appropriate.\n\n## Scope\n\nThis Code of Conduct applies within all community spaces, and also applies when\nan individual is officially representing the community in public spaces.\nExamples of representing our community include using an official e-mail address,\nposting via an official social media account, or acting as an appointed\nrepresentative at an online or offline event.\n\n## Enforcement\n\nInstances of abusive, harassing, or otherwise unacceptable behavior may be\nreported to the community leaders responsible for enforcement at\nfractalfirdev@gmail.com.\nAll complaints will be reviewed and investigated promptly and fairly.\n\nAll community leaders are obligated to respect the privacy and security of the\nreporter of any incident.\n\n## Enforcement Guidelines\n\nCommunity leaders will follow these Community Impact Guidelines in determining\nthe consequences for any action they deem in violation of this Code of Conduct:\n\n### 1. Correction\n\n**Community Impact**: Use of inappropriate language or other behavior deemed\nunprofessional or unwelcome in the community.\n\n**Consequence**: A private, written warning from community leaders, providing\nclarity around the nature of the violation and an explanation of why the\nbehavior was inappropriate. A public apology may be requested.\n\n### 2. Warning\n\n**Community Impact**: A violation through a single incident or series\nof actions.\n\n**Consequence**: A warning with consequences for continued behavior. No\ninteraction with the people involved, including unsolicited interaction with\nthose enforcing the Code of Conduct, for a specified period of time. This\nincludes avoiding interactions in community spaces as well as external channels\nlike social media. Violating these terms may lead to a temporary or\npermanent ban.\n\n### 3. Temporary Ban\n\n**Community Impact**: A serious violation of community standards, including\nsustained inappropriate behavior.\n\n**Consequence**: A temporary ban from any sort of interaction or public\ncommunication with the community for a specified period of time. No public or\nprivate interaction with the people involved, including unsolicited interaction\nwith those enforcing the Code of Conduct, is allowed during this period.\nViolating these terms may lead to a permanent ban.\n\n### 4. Permanent Ban\n\n**Community Impact**: Demonstrating a pattern of violation of community\nstandards, including sustained inappropriate behavior,  harassment of an\nindividual, or aggression toward or disparagement of classes of individuals.\n\n**Consequence**: A permanent ban from any sort of public interaction within\nthe community.\n\n## Attribution\n\nThis Code of Conduct is adapted from the [Contributor Covenant][homepage],\nversion 2.0, available at\nhttps://www.contributor-covenant.org/version/2/0/code_of_conduct.html.\n\nCommunity Impact Guidelines were inspired by [Mozilla's code of conduct\nenforcement ladder](https://github.com/mozilla/diversity).\n\n[homepage]: https://www.contributor-covenant.org\n\nFor answers to common questions about this code of conduct, see the FAQ at\nhttps://www.contributor-covenant.org/faq. Translations are available at\nhttps://www.contributor-covenant.org/translations.\n"
        },
        {
          "name": "Cargo.toml",
          "type": "blob",
          "size": 0.7060546875,
          "content": "[package]\nname = \"rustc_codegen_clr\"\nversion = \"0.1.0\"\nedition = \"2021\"\n\n# See more keys and their definitions at https://doc.rust-lang.org/cargo/reference/manifest.html\nlicense = \"MIT OR Apache-2.0\"\nrepository = \"https://github.com/FractalFir/rustc_codegen_clr\"\n[dependencies]\nar = \"0.9.0\"\nbytecount = \"0.6.8\"\nlibc = \"0.2.153\"\nlibloading = \"0.8.1\"\n\npostcard = { version = \"1.0.8\", features = [\"use-std\"] }\n\nrustc-demangle = \"0.1.23\"\ncilly = {path = \"./cilly\"}\nserde = { version = \"1.0.183\", features = [\"derive\"] }\n\n[profile.dev.package.fxhash]\nopt-level = 3\n[lib]\ncrate-type = [\"dylib\"]\n\n[workspace]\nmembers = [ \"cilly\", \"dotnet_aot\",\n    \"mycorrhiza\", \n]\nexclude = [\"rust/src/bootstrap\"]\n[profile.release]\ndebug = true\n\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.0419921875,
          "content": "MIT License\n\nCopyright (c) 2023 FractalFir\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "LICENSE-Apache",
          "type": "blob",
          "size": 11.0927734375,
          "content": "\n                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"[]\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright [yyyy] [name of copyright owner]\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n\n"
        },
        {
          "name": "QUICKSTART.md",
          "type": "blob",
          "size": 3.6103515625,
          "content": "# Building the project\n## Download the project\nClone the repo using this command:\n```\ngit clone git@github.com:FractalFir/rustc_codegen_clr.git\n```\n## Instal the newest nightly rust\n```\nrustup install nightly\n```\n## Check that the project is complatible with the version of Rust you installed. \n```\ncargo check\n```\nIf the project does not compile due to error messages, try updating your rust version.\n```\nrustup update\n```\n\nIf this does not solve the problem, open an issue. The project is only compatible with a narrow set of `rustc` versions, and tries to always use the newest nigthly build.\n## Install the .NET runtime\n\nThis project requires the .NET runtime to be used. You can find [instalation instructions here](https://dotnet.microsoft.com/en-us/download).\n\nAfter installing .NET, run ` dotnet --info` to confoirm it is installed propely.\n\n## Install `ilasm`\n\n### Windows\n\n`ilasm` comes [installed with Visual Studio](https://learn.microsoft.com/en-us/dotnet/framework/tools/ilasm-exe-il-assembler). So, you propably already have it. If not, install visual stuido. \n\n### Linux or MacOS\n\nThis tool supports both the \"Core\" and \"Mono\" flavours of ILASM. While you *can* install / build `ilasm` separeately, installing the [mono runtime](https://www.mono-project.com/download/stable/) is the easiest option.\n\n### Checking the dependencies \n\nAfter you installed `dotnet` and `ilasm`, run `./bin/rustflags.rs` to check if you installed `ilasm` and `dotnet` correctly. \n\nThis script uses the experimental `cargo-script` feaure to will check your enviroment, build the project, and print the flags you need to use it.\n\n### Running tests\n\nAs one last step, you can run `cargo test ::stable` to check if the codegen runs as expected. This can take a minute or two, but it should ensure the project is working as expected.\n\n# Using the project \n\nThe project is *relatively* simple to use. You will still have to do some setup to get `core` and `std` working, but it is a straigtforward process. \n\nAt the root of your crate, create a directory named `.cargo`. In this directory, create a file named `config.toml`, with the following contents.\n\n```\n[build] \ntarget = \"x86_64-unknown-linux-gnu\" # Change to the host target.\n[unstable]\nbuild-std = [\"core\",\"alloc\",\"std\",\"panic_abort\"]\n```\n\nThen, run the codegen utility `rustflags` again, by running `cargo --bin rustflags --release` **in the directory `rustc_codegen_clr`**.\n\nIt should provide you with the commands necesary for enabling the codegen. They should look something like this:\n\nOn Linux:\n```bash\nexport RUSTFLAGS=\"-Z codegen-backend=/home/USER/rustc_codegen_clr/target/release/librustc_codegen_clr.so -C linker=/home/USER/rustc_codegen_clr/target/release/linker -C link-args=--cargo-support \"\n```\nOn Windows:\n```powershell\n$Env:RUSTFLAGS = '-Z codegen-backend=C:\\Users\\USER\\rustc_codegen_clr\\target\\release\\librustc_codegen_clr.dll -C linker=\\Users\\USER\\rustc_codegen_clr\\target\\release\\linker.exe -C link-args=--cargo-support '\n```\n\nYou can then run this command in your shell session (aka. command prompt window). This command will enable the codegen for that session(command prompt window) only! \nThe project makes **no pernament changes** to your instaltation, and simply closing the shell session(command prompt window) will disable it. \n\nAfter this, simply run `cargo run` to compile & run your app inside the .NET runtime. Other cargo commands should work to. There may be quite a few error / warning messages dispalyed, but they will not stop compilation.\n\nNOTE: the project currently does not support any `proc-macros`, due to techincal liminations. Supporting them is possible, but it is currently more effort than it is worth.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 6.2373046875,
          "content": "# rustc_codegen_clr \n\n> [!WARNING]\n> This project is still early in its developement. Bugs, crashes and miscompilations are expected. DO NOT USE IT FOR ANYTHING SERIOUS.\n\n`rustc_codegen_clr` is an experimental Rust compiler backend(plugin), which allows you to transpile Rust into .NET assebmlies, or C source files. \n\nThe end goal of the project is allowing Rust to be used in places where it could not be used before. \n\n## .NET Interop layer\n\nThe project aims to provide a way to easily use Rust libraries in .NET. It comes with a Rust/.NET interop layer, which allows you to easily interact with .NET code from Rust:\n\n```\nuse mychorizza::*;\nfn main(){\n    // Alocate a new GC-managed string builder\n    let stringBuilder = StringBuilder::empty();\n    // You can easily operate on GC-managed types\n    mstring.AppendChar('H');\n    mstring.AppendChar('i');\n    mstring.AppendChar('.');\n}\n```\nThis should allow you to integrate Rust code with exisitng .NET codebases, and should allow you to use .NET-specific libraries or APIs from Rust.\n\nThe project will also include support for defining .NET classes from Rust, allowing .NET code to easily call Rust.\nThis is currently heavily WIP, and any feedback is appreciated.\n```\n// Early WIP syntax, subject to change.\ndotnet_typedef! {\n  class MyClass inherits [Some::External::Assebmly]SomeNamespace::SomeClass{\n    virtual fn ToString(_this:MyClass)->MString{\n      \"I am a class defined in Rust!\".into_managed()\n    },\n  }\n}\n```\n\nWith this approach, the classes and APIs exposed to .NET can be easily used from other .NET languages, like F# or C#. The safety of this glue layer can be checked by the Rust compiler, which should make interop issues much less likely.\n## C support\n\nWhile .NET is the main foccus of my work, this project can also be used to compile Rust to C, by setting the `C_MODE` enviroment flag to `1`.\n\nThis may seem like a strange and unrelated feature, but the project was written in such a way that this is not only possible, but relatively easy.\n\nMy representation of .NETs IR maps nicely to C, which means that I was able to add support for compiling Rust to C in 2-3K LOC. Almost all of the codebase is reused, with the C and .NET specific code only \npresent in the very last stage of compilation.\n\nThis means that, instead of having to maintain 2 separate projects, I can maintian one project. Bug fixes to the .NET side of things also fix C bugs. \nBecause of that, the support for C  in the project is almost as good as support for .NET\n\n## Current state of the project\n\nThe project currently supports most Rust features (except proc macros), but it is not bug-free. It can compile a mostly working version of Rust std, but there are many minor bugs make such `std` not 100% functional.\n\nMost components of `std` are about 95% working in .NET, and 80% working in C.\n\nCurrently, the GCC and clang C compilers are supported, with plans to add support\nfor `tcc`, and maybe even `sdcc`.\n\nSo, you *can* compile a lot of existing Rust code, but it may not necessarily *work*.\n### core, std, and alloc uint tests.\n.NET\n\n| Name | Pass\t| Faliure\t| Crash \\ Timeout| OK precentage\n|--------------------|--------|-------|-------|------|\n| Core tests |\t1662\t| 39\t| 12\t| 97.02% |\n| Alloc tests | \t616\t|8 |\t40 |\t92.77% |\n| Alloc benches\t| 464\t| 0\t| 0 |\t100.00% |\n| Test Harness tests |\t57 |\t0\t| 100.00% |\n| std tests\t| 931 | 43 | 64 |\t89.69% |\n| Core benches\t| 491 | 1| | 98.99% |\n\nC\n\n| Name | Pass\t| Faliure\t| OK precentage\n|--------------------|--------|-------|------|\n| Core tests |\t1419\t| 294\t| 82.83% |\n## FAQ\n\n### Q: What is it?\n\n**A**: *This is a compiler backend for rustc, which targets the `.NET` platform and runtime; this would enable you to use some Rust libraries from C#/F#, with little effort.*\n\n### Q: Is Rust's memory management useless in .NET?\n\n**A**: *Rust code typically uses the stack more than the heap, which can speed up code running within the CLR runtime. Heap-allocated objects are allocated from unmanaged (non-GC) memory and are allocated and freed in the same way as in Rust.*\n\n### Q: Is this useless since I can already load shared libraries from C#?\n\n**A**: *The Rust APIs this codegen exposes to C#/F# code are only slightly easier to use than those exposed by a .so or .dll Rust library. Interop still requires some effort, but the Rust code is bundled with everything else. Types used from C# are guaranteed to be the same as those in C#, preventing mismatch issues. All types can be safely sent between Rust and C#, with exactly the same layout. Additionally, since all Rust code compiled with this codegen can be bundled with C#/F# code, you no longer need to ship different versions of the library for different architectures. Any architecture supported by CLR works out of the box, using the exact same assembly.*\n\n*You can also avoid the cost of switching between code running within and outside the runtime. This cost is not unbearable, but it is not easily eliminated, and reducing it can have safety penalties. In this case, all code runs within the runtime, meaning there is no transition between code running inside and outside the runtime.*\n\n*Compiling Rust to CLR can potentially improve JIT optimization. Since the CLR's JIT now sees all the code, it can make better decisions about optimization, resulting in faster code.*\n\n### Q: Compatibility?\n\n**A**: *`rustc_codegen_clr` is only tested on Linux x86_64, with the CoreCLR runtime (more commonly known as simply the .NET runtime), on .NET 8. It should work on other platforms, but it is not guaranteed.*\n\n### Q: Whata about Mono?\n**A** *The support for the Mono runtime is not as good as it could be. Due to not supported features and differences, 128-bit integers and checked 64-bit integer arithmetic are not supported on Mono.*\n*Aligned allocators(__rust_alloc) and certain intrinsics are also not supported. I plan to expand support for Mono, but my resources are limited.*\n\n### Q: Are there any issues?\n\n**A**: *While the backend is extensively tested, it is still far from perfect, and there are still many edge cases that may break this backend.*\n**A**: *Currently, there are no .NET-specific versions of `std` or .NET specific target triples. This means that you will need separate .NET assemblies for each OS.*\n\n\n## Licensing\n\n`rustc_codegen_clr` is dual licensed under MIT license or Apache License, Version 2.0.\n"
        },
        {
          "name": "bin",
          "type": "tree",
          "content": null
        },
        {
          "name": "build_all.sh",
          "type": "blob",
          "size": 0.1181640625,
          "content": "#!/bin/sh\ncd cilly && cargo build --all --release && cargo build --all && cd .. && cargo build && cargo build --release \n"
        },
        {
          "name": "cargo_tests",
          "type": "tree",
          "content": null
        },
        {
          "name": "cilly",
          "type": "tree",
          "content": null
        },
        {
          "name": "clr64-unknown-mono.json",
          "type": "blob",
          "size": 0.306640625,
          "content": "{\n  \"llvm-target\": \"clr64-unknown-mono\",\n  \"data-layout\": \"e-m:e-i64:64-f80:128-n8:16:32:64-S128\",\n  \"panic-strategy\": \"abort\",\n  \"linker-flavor\": \"gcc\",\n  \"linker\": \"arm-none-eabi-gcc\",\n  \"target-endian\": \"little\",\n  \"target-pointer-width\": \"64\",\n  \"target-c-int-width\": \"32\",\n  \"arch\": \"clr64\",\n  \"os\": \"mono\"\n}\n"
        },
        {
          "name": "dotnet_aot",
          "type": "tree",
          "content": null
        },
        {
          "name": "latest_benchmarks.txt",
          "type": "blob",
          "size": 61.37890625,
          "content": "running 517 tests\ntest any::bench_downcast_ref                                          ... bench:           7.26 ns/iter (+/- 0.09)\ntest array::map_8byte_256byte_256                                     ... bench:      22,362.00 ns/iter (+/- 408.57)\ntest array::map_8byte_8byte_256                                       ... bench:       6,461.13 ns/iter (+/- 30.71)\ntest array::map_8byte_8byte_64                                        ... bench:       1,320.23 ns/iter (+/- 4.34)\ntest array::map_8byte_8byte_8                                         ... bench:         187.54 ns/iter (+/- 3.22)\ntest ascii::bench_ascii_escape_display_mixed                          ... bench:      14,000.85 ns/iter (+/- 580.36)\ntest ascii::bench_ascii_escape_display_no_escape                      ... bench:         394.93 ns/iter (+/- 29.74)\ntest ascii::is_ascii::long::case00_libcore                            ... bench:          19.17 ns/iter (+/- 1.09) = 367894 MB/s\ntest ascii::is_ascii::long::case01_iter_all                           ... bench:         582.04 ns/iter (+/- 6.25) = 12010 MB/s\ntest ascii::is_ascii::long::case02_align_to                           ... bench:          71.20 ns/iter (+/- 1.82) = 98450 MB/s\ntest ascii::is_ascii::long::case03_align_to_unrolled                  ... bench:         110.24 ns/iter (+/- 14.90) = 63545 MB/s\ntest ascii::is_ascii::long::case04_while_loop                         ... bench:         187.58 ns/iter (+/- 7.09) = 37379 MB/s\ntest ascii::is_ascii::medium::case00_libcore                          ... bench:           5.81 ns/iter (+/- 0.53) = 6400 MB/s\ntest ascii::is_ascii::medium::case01_iter_all                         ... bench:          55.29 ns/iter (+/- 1.42) = 581 MB/s\ntest ascii::is_ascii::medium::case02_align_to                         ... bench:          21.41 ns/iter (+/- 0.59) = 1523 MB/s\ntest ascii::is_ascii::medium::case03_align_to_unrolled                ... bench:          24.15 ns/iter (+/- 0.65) = 1333 MB/s\ntest ascii::is_ascii::medium::case04_while_loop                       ... bench:          16.49 ns/iter (+/- 0.63) = 2000 MB/s\ntest ascii::is_ascii::short::case00_libcore                           ... bench:           7.05 ns/iter (+/- 0.21) = 1000 MB/s\ntest ascii::is_ascii::short::case01_iter_all                          ... bench:          14.96 ns/iter (+/- 0.20) = 500 MB/s\ntest ascii::is_ascii::short::case02_align_to                          ... bench:          16.14 ns/iter (+/- 0.22) = 437 MB/s\ntest ascii::is_ascii::short::case03_align_to_unrolled                 ... bench:          16.15 ns/iter (+/- 0.21) = 437 MB/s\ntest ascii::is_ascii::short::case04_while_loop                        ... bench:           5.30 ns/iter (+/- 0.88) = 1400 MB/s\ntest ascii::is_ascii::unaligned_both_long::case00_libcore             ... bench:          24.62 ns/iter (+/- 2.49) = 291166 MB/s\ntest ascii::is_ascii::unaligned_both_long::case01_iter_all            ... bench:         588.32 ns/iter (+/- 4.51) = 11884 MB/s\ntest ascii::is_ascii::unaligned_both_long::case02_align_to            ... bench:          83.54 ns/iter (+/- 3.67) = 84192 MB/s\ntest ascii::is_ascii::unaligned_both_long::case03_align_to_unrolled   ... bench:         129.78 ns/iter (+/- 4.40) = 54170 MB/s\ntest ascii::is_ascii::unaligned_both_long::case04_while_loop          ... bench:         190.85 ns/iter (+/- 2.82) = 36778 MB/s\ntest ascii::is_ascii::unaligned_both_medium::case00_libcore           ... bench:           7.71 ns/iter (+/- 0.86) = 4285 MB/s\ntest ascii::is_ascii::unaligned_both_medium::case01_iter_all          ... bench:          54.04 ns/iter (+/- 0.41) = 555 MB/s\ntest ascii::is_ascii::unaligned_both_medium::case02_align_to          ... bench:          53.91 ns/iter (+/- 1.22) = 566 MB/s\ntest ascii::is_ascii::unaligned_both_medium::case03_align_to_unrolled ... bench:          56.55 ns/iter (+/- 1.87) = 535 MB/s\ntest ascii::is_ascii::unaligned_both_medium::case04_while_loop        ... bench:          15.83 ns/iter (+/- 0.21) = 2000 MB/s\ntest ascii::is_ascii::unaligned_head_long::case00_libcore             ... bench:          20.87 ns/iter (+/- 1.79) = 349450 MB/s\ntest ascii::is_ascii::unaligned_head_long::case01_iter_all            ... bench:         501.27 ns/iter (+/- 10.29) = 13950 MB/s\ntest ascii::is_ascii::unaligned_head_long::case02_align_to            ... bench:          84.38 ns/iter (+/- 1.94) = 83202 MB/s\ntest ascii::is_ascii::unaligned_head_long::case03_align_to_unrolled   ... bench:         130.58 ns/iter (+/- 3.95) = 53761 MB/s\ntest ascii::is_ascii::unaligned_head_long::case04_while_loop          ... bench:         186.75 ns/iter (+/- 1.98) = 37575 MB/s\ntest ascii::is_ascii::unaligned_head_medium::case00_libcore           ... bench:           8.39 ns/iter (+/- 0.77) = 3875 MB/s\ntest ascii::is_ascii::unaligned_head_medium::case01_iter_all          ... bench:          56.31 ns/iter (+/- 0.49) = 553 MB/s\ntest ascii::is_ascii::unaligned_head_medium::case02_align_to          ... bench:          35.99 ns/iter (+/- 1.16) = 885 MB/s\ntest ascii::is_ascii::unaligned_head_medium::case03_align_to_unrolled ... bench:          61.58 ns/iter (+/- 3.42) = 508 MB/s\ntest ascii::is_ascii::unaligned_head_medium::case04_while_loop        ... bench:          16.70 ns/iter (+/- 0.20) = 1937 MB/s\ntest ascii::is_ascii::unaligned_tail_long::case00_libcore             ... bench:          21.33 ns/iter (+/- 0.81) = 332809 MB/s\ntest ascii::is_ascii::unaligned_tail_long::case01_iter_all            ... bench:         607.31 ns/iter (+/- 23.29) = 11514 MB/s\ntest ascii::is_ascii::unaligned_tail_long::case02_align_to            ... bench:          77.54 ns/iter (+/- 6.00) = 90766 MB/s\ntest ascii::is_ascii::unaligned_tail_long::case03_align_to_unrolled   ... bench:         115.58 ns/iter (+/- 7.63) = 60773 MB/s\ntest ascii::is_ascii::unaligned_tail_long::case04_while_loop          ... bench:         193.07 ns/iter (+/- 3.34) = 36212 MB/s\ntest ascii::is_ascii::unaligned_tail_medium::case00_libcore           ... bench:          11.53 ns/iter (+/- 3.31) = 2818 MB/s\ntest ascii::is_ascii::unaligned_tail_medium::case01_iter_all          ... bench:          56.19 ns/iter (+/- 2.12) = 553 MB/s\ntest ascii::is_ascii::unaligned_tail_medium::case02_align_to          ... bench:          40.53 ns/iter (+/- 1.38) = 775 MB/s\ntest ascii::is_ascii::unaligned_tail_medium::case03_align_to_unrolled ... bench:          57.64 ns/iter (+/- 4.18) = 543 MB/s\ntest ascii::is_ascii::unaligned_tail_medium::case04_while_loop        ... bench:          16.68 ns/iter (+/- 0.21) = 1937 MB/s\ntest ascii::long::case00_alloc_only                                   ... bench:         146.22 ns/iter (+/- 1.02) = 47876 MB/s\ntest ascii::long::case01_black_box_read_each_byte                     ... bench:      11,333.81 ns/iter (+/- 465.17) = 616 MB/s\ntest ascii::long::case02_lookup_table                                 ... bench:      35,209.05 ns/iter (+/- 5,982.72) = 198 MB/s\ntest ascii::long::case03_branch_and_subtract                          ... bench:      14,768.86 ns/iter (+/- 142.44) = 473 MB/s\ntest ascii::long::case04_branch_and_mask                              ... bench:      14,773.47 ns/iter (+/- 362.09) = 473 MB/s\ntest ascii::long::case05_branchless                                   ... bench:      11,542.99 ns/iter (+/- 458.97) = 605 MB/s\ntest ascii::long::case06_libcore                                      ... bench:       7,889.44 ns/iter (+/- 151.71) = 886 MB/s\ntest ascii::long::case07_fake_simd_u32                                ... bench:       3,023.28 ns/iter (+/- 408.76) = 2312 MB/s\ntest ascii::long::case08_fake_simd_u64                                ... bench:       1,756.34 ns/iter (+/- 70.55) = 3980 MB/s\ntest ascii::long::case09_mask_mult_bool_branchy_lookup_table          ... bench:      22,347.89 ns/iter (+/- 547.06) = 312 MB/s\ntest ascii::long::case10_mask_mult_bool_lookup_table                  ... bench:      29,360.60 ns/iter (+/- 741.41) = 238 MB/s\ntest ascii::long::case11_mask_mult_bool_match_range                   ... bench:      19,833.87 ns/iter (+/- 860.07) = 352 MB/s\ntest ascii::long::case12_mask_shifted_bool_match_range                ... bench:      20,064.57 ns/iter (+/- 891.13) = 348 MB/s\ntest ascii::long::case13_subtract_shifted_bool_match_range            ... bench:      20,124.98 ns/iter (+/- 1,799.16) = 347 MB/s\ntest ascii::long::case14_subtract_multiplied_bool_match_range         ... bench:      20,434.76 ns/iter (+/- 346.51) = 342 MB/s\ntest ascii::long::is_ascii                                            ... bench:         714.51 ns/iter (+/- 17.95) = 9789 MB/s\ntest ascii::long::is_ascii_alphabetic                                 ... bench:         140.62 ns/iter (+/- 1.10) = 49928 MB/s\ntest ascii::long::is_ascii_alphanumeric                               ... bench:         140.59 ns/iter (+/- 2.68) = 49928 MB/s\ntest ascii::long::is_ascii_control                                    ... bench:         140.73 ns/iter (+/- 3.39) = 49928 MB/s\ntest ascii::long::is_ascii_digit                                      ... bench:         140.58 ns/iter (+/- 0.59) = 49928 MB/s\ntest ascii::long::is_ascii_graphic                                    ... bench:         175.86 ns/iter (+/- 27.36) = 39942 MB/s\ntest ascii::long::is_ascii_hexdigit                                   ... bench:         172.87 ns/iter (+/- 23.91) = 40639 MB/s\ntest ascii::long::is_ascii_lowercase                                  ... bench:         140.72 ns/iter (+/- 0.86) = 49928 MB/s\ntest ascii::long::is_ascii_punctuation                                ... bench:         140.63 ns/iter (+/- 0.65) = 49928 MB/s\ntest ascii::long::is_ascii_uppercase                                  ... bench:         140.64 ns/iter (+/- 0.57) = 49928 MB/s\ntest ascii::long::is_ascii_whitespace                                 ... bench:         142.89 ns/iter (+/- 0.62) = 49225 MB/s\ntest ascii::medium::case00_alloc_only                                 ... bench:          66.24 ns/iter (+/- 0.42) = 484 MB/s\ntest ascii::medium::case01_black_box_read_each_byte                   ... bench:          94.18 ns/iter (+/- 2.48) = 340 MB/s\ntest ascii::medium::case02_lookup_table                               ... bench:         197.75 ns/iter (+/- 4.82) = 162 MB/s\ntest ascii::medium::case03_branch_and_subtract                        ... bench:         104.98 ns/iter (+/- 2.98) = 307 MB/s\ntest ascii::medium::case04_branch_and_mask                            ... bench:         104.59 ns/iter (+/- 1.14) = 307 MB/s\ntest ascii::medium::case05_branchless                                 ... bench:         107.78 ns/iter (+/- 3.41) = 299 MB/s\ntest ascii::medium::case06_libcore                                    ... bench:          81.34 ns/iter (+/- 0.67) = 395 MB/s\ntest ascii::medium::case07_fake_simd_u32                              ... bench:          76.21 ns/iter (+/- 1.98) = 421 MB/s\ntest ascii::medium::case08_fake_simd_u64                              ... bench:          71.33 ns/iter (+/- 0.64) = 450 MB/s\ntest ascii::medium::case09_mask_mult_bool_branchy_lookup_table        ... bench:         339.24 ns/iter (+/- 201.56) = 94 MB/s\ntest ascii::medium::case10_mask_mult_bool_lookup_table                ... bench:         138.67 ns/iter (+/- 6.02) = 231 MB/s\ntest ascii::medium::case11_mask_mult_bool_match_range                 ... bench:         105.72 ns/iter (+/- 1.22) = 304 MB/s\ntest ascii::medium::case12_mask_shifted_bool_match_range              ... bench:         107.79 ns/iter (+/- 3.22) = 299 MB/s\ntest ascii::medium::case13_subtract_shifted_bool_match_range          ... bench:         104.46 ns/iter (+/- 3.49) = 307 MB/s\ntest ascii::medium::case14_subtract_multiplied_bool_match_range       ... bench:         104.98 ns/iter (+/- 2.25) = 307 MB/s\ntest ascii::medium::is_ascii                                          ... bench:          95.34 ns/iter (+/- 3.18) = 336 MB/s\ntest ascii::medium::is_ascii_alphabetic                               ... bench:          69.13 ns/iter (+/- 0.95) = 463 MB/s\ntest ascii::medium::is_ascii_alphanumeric                             ... bench:          70.94 ns/iter (+/- 0.78) = 457 MB/s\ntest ascii::medium::is_ascii_control                                  ... bench:          65.18 ns/iter (+/- 3.57) = 492 MB/s\ntest ascii::medium::is_ascii_digit                                    ... bench:          83.62 ns/iter (+/- 17.68) = 385 MB/s\ntest ascii::medium::is_ascii_graphic                                  ... bench:          71.14 ns/iter (+/- 2.00) = 450 MB/s\ntest ascii::medium::is_ascii_hexdigit                                 ... bench:          65.12 ns/iter (+/- 1.77) = 492 MB/s\ntest ascii::medium::is_ascii_lowercase                                ... bench:          81.79 ns/iter (+/- 17.94) = 395 MB/s\ntest ascii::medium::is_ascii_punctuation                              ... bench:          64.89 ns/iter (+/- 2.17) = 500 MB/s\ntest ascii::medium::is_ascii_uppercase                                ... bench:          67.46 ns/iter (+/- 2.07) = 477 MB/s\ntest ascii::medium::is_ascii_whitespace                               ... bench:          81.31 ns/iter (+/- 17.54) = 395 MB/s\ntest ascii::short::case00_alloc_only                                  ... bench:          66.18 ns/iter (+/- 0.81) = 106 MB/s\ntest ascii::short::case01_black_box_read_each_byte                    ... bench:         120.89 ns/iter (+/- 56.51) = 58 MB/s\ntest ascii::short::case02_lookup_table                                ... bench:          91.64 ns/iter (+/- 2.98) = 76 MB/s\ntest ascii::short::case03_branch_and_subtract                         ... bench:          68.43 ns/iter (+/- 1.19) = 102 MB/s\ntest ascii::short::case04_branch_and_mask                             ... bench:          71.47 ns/iter (+/- 4.30) = 98 MB/s\ntest ascii::short::case05_branchless                                  ... bench:          72.70 ns/iter (+/- 2.30) = 97 MB/s\ntest ascii::short::case06_libcore                                     ... bench:         101.11 ns/iter (+/- 47.03) = 69 MB/s\ntest ascii::short::case07_fake_simd_u32                               ... bench:          71.71 ns/iter (+/- 1.10) = 98 MB/s\ntest ascii::short::case08_fake_simd_u64                               ... bench:          74.79 ns/iter (+/- 4.03) = 94 MB/s\ntest ascii::short::case09_mask_mult_bool_branchy_lookup_table         ... bench:          75.99 ns/iter (+/- 2.21) = 93 MB/s\ntest ascii::short::case10_mask_mult_bool_lookup_table                 ... bench:          72.86 ns/iter (+/- 2.27) = 97 MB/s\ntest ascii::short::case11_mask_mult_bool_match_range                  ... bench:          68.32 ns/iter (+/- 0.97) = 102 MB/s\ntest ascii::short::case12_mask_shifted_bool_match_range               ... bench:          69.49 ns/iter (+/- 2.08) = 101 MB/s\ntest ascii::short::case13_subtract_shifted_bool_match_range           ... bench:          69.87 ns/iter (+/- 1.99) = 101 MB/s\ntest ascii::short::case14_subtract_multiplied_bool_match_range        ... bench:          68.33 ns/iter (+/- 2.33) = 102 MB/s\ntest ascii::short::is_ascii                                           ... bench:          87.56 ns/iter (+/- 21.82) = 80 MB/s\ntest ascii::short::is_ascii_alphabetic                                ... bench:          68.31 ns/iter (+/- 2.54) = 102 MB/s\ntest ascii::short::is_ascii_alphanumeric                              ... bench:          91.06 ns/iter (+/- 21.10) = 76 MB/s\ntest ascii::short::is_ascii_control                                   ... bench:          81.76 ns/iter (+/- 18.10) = 86 MB/s\ntest ascii::short::is_ascii_digit                                     ... bench:          81.97 ns/iter (+/- 18.41) = 86 MB/s\ntest ascii::short::is_ascii_graphic                                   ... bench:          70.65 ns/iter (+/- 0.78) = 100 MB/s\ntest ascii::short::is_ascii_hexdigit                                  ... bench:          66.12 ns/iter (+/- 3.42) = 106 MB/s\ntest ascii::short::is_ascii_lowercase                                 ... bench:          81.93 ns/iter (+/- 18.25) = 86 MB/s\ntest ascii::short::is_ascii_punctuation                               ... bench:          65.30 ns/iter (+/- 1.91) = 107 MB/s\ntest ascii::short::is_ascii_uppercase                                 ... bench:          65.84 ns/iter (+/- 1.69) = 107 MB/s\ntest ascii::short::is_ascii_whitespace                                ... bench:          64.95 ns/iter (+/- 0.75) = 109 MB/s\ntest char::methods::bench_ascii_char_to_lowercase                     ... bench:     240,392.25 ns/iter (+/- 8,325.35)\ntest char::methods::bench_ascii_char_to_uppercase                     ... bench:     240,475.72 ns/iter (+/- 8,150.79)\ntest char::methods::bench_ascii_mix_to_lowercase                      ... bench:     300,277.95 ns/iter (+/- 1,875.21)\ntest char::methods::bench_ascii_mix_to_uppercase                      ... bench:     300,923.00 ns/iter (+/- 2,677.50)\ntest char::methods::bench_non_ascii_char_to_lowercase                 ... bench:     358,216.30 ns/iter (+/- 2,241.63)\ntest char::methods::bench_non_ascii_char_to_uppercase                 ... bench:     359,268.90 ns/iter (+/- 5,807.99)\ntest char::methods::bench_to_ascii_lowercase                          ... bench:     101,044.40 ns/iter (+/- 1,429.02)\ntest char::methods::bench_to_ascii_uppercase                          ... bench:     103,158.55 ns/iter (+/- 7,649.80)\ntest char::methods::bench_to_digit_radix_10                           ... bench:     235,862.52 ns/iter (+/- 8,225.95)\ntest char::methods::bench_to_digit_radix_16                           ... bench:     243,519.10 ns/iter (+/- 4,201.75)\ntest char::methods::bench_to_digit_radix_2                            ... bench:     210,402.67 ns/iter (+/- 5,094.99)\ntest char::methods::bench_to_digit_radix_36                           ... bench:     256,559.42 ns/iter (+/- 3,892.32)\ntest char::methods::bench_to_digit_radix_var                          ... bench:     252,755.80 ns/iter (+/- 2,795.18)\ntest fmt::write_str_macro1                                            ... bench:      51,358.14 ns/iter (+/- 8,721.75)\ntest fmt::write_str_macro2                                            ... bench:      43,414.08 ns/iter (+/- 145.21)\ntest fmt::write_str_macro_debug                                       ... bench:   1,486,781.70 ns/iter (+/- 39,492.70)\ntest fmt::write_str_macro_debug_ascii                                 ... bench:     137,319.25 ns/iter (+/- 2,709.03)\ntest fmt::write_str_ref                                               ... bench:      11,332.12 ns/iter (+/- 599.77)\ntest fmt::write_str_value                                             ... bench:      10,574.88 ns/iter (+/- 105.23)\ntest fmt::write_u128_max                                              ... bench:         184.19 ns/iter (+/- 1.10)\ntest fmt::write_u128_min                                              ... bench:          69.51 ns/iter (+/- 0.60)\ntest fmt::write_u64_max                                               ... bench:         143.63 ns/iter (+/- 2.30)\ntest fmt::write_u64_min                                               ... bench:          69.59 ns/iter (+/- 0.62)\ntest fmt::write_u8_max                                                ... bench:         140.79 ns/iter (+/- 2.70)\ntest fmt::write_u8_min                                                ... bench:          69.66 ns/iter (+/- 0.56)\ntest fmt::write_vec_macro1                                            ... bench:      83,549.88 ns/iter (+/- 1,013.68)\ntest fmt::write_vec_macro2                                            ... bench:      43,369.57 ns/iter (+/- 368.65)\ntest fmt::write_vec_macro_debug                                       ... bench:   1,490,262.40 ns/iter (+/- 86,848.14)\ntest fmt::write_vec_ref                                               ... bench:      18,630.65 ns/iter (+/- 307.54)\ntest fmt::write_vec_value                                             ... bench:      11,071.02 ns/iter (+/- 118.13)\ntest hash::sip::bench_bytes_4                                         ... bench:          27.72 ns/iter (+/- 0.75) = 148 MB/s\ntest hash::sip::bench_bytes_7                                         ... bench:          28.04 ns/iter (+/- 0.76) = 250 MB/s\ntest hash::sip::bench_bytes_8                                         ... bench:          33.95 ns/iter (+/- 1.40) = 242 MB/s\ntest hash::sip::bench_bytes_a_16                                      ... bench:          41.69 ns/iter (+/- 1.47) = 390 MB/s\ntest hash::sip::bench_bytes_b_32                                      ... bench:          59.27 ns/iter (+/- 2.06) = 542 MB/s\ntest hash::sip::bench_bytes_c_128                                     ... bench:         201.82 ns/iter (+/- 47.91) = 636 MB/s\ntest hash::sip::bench_long_str                                        ... bench:         486.42 ns/iter (+/- 86.45)\ntest hash::sip::bench_str_of_8_bytes                                  ... bench:          41.49 ns/iter (+/- 2.51)\ntest hash::sip::bench_str_over_8_bytes                                ... bench:          41.96 ns/iter (+/- 2.21)\ntest hash::sip::bench_str_under_8_bytes                               ... bench:          33.30 ns/iter (+/- 1.64)\ntest hash::sip::bench_u32                                             ... bench:          28.07 ns/iter (+/- 0.91) = 285 MB/s\ntest hash::sip::bench_u32_keyed                                       ... bench:          28.14 ns/iter (+/- 0.89) = 285 MB/s\ntest hash::sip::bench_u64                                             ... bench:          34.21 ns/iter (+/- 1.18) = 235 MB/s\ntest iter::bench_chain_partial_cmp                                    ... bench:   2,293,624.15 ns/iter (+/- 62,483.29)\ntest iter::bench_cycle_skip_take_ref_sum                              ... bench:   8,243,627.60 ns/iter (+/- 187,364.67)\ntest iter::bench_cycle_skip_take_sum                                  ... bench:   8,042,150.50 ns/iter (+/- 41,173.83)\ntest iter::bench_cycle_take_ref_sum                                   ... bench:   8,065,774.25 ns/iter (+/- 193,353.69)\ntest iter::bench_cycle_take_skip_ref_sum                              ... bench:   7,284,583.10 ns/iter (+/- 170,764.80)\ntest iter::bench_cycle_take_skip_sum                                  ... bench:   7,207,932.05 ns/iter (+/- 166,261.70)\ntest iter::bench_cycle_take_sum                                       ... bench:   8,230,466.20 ns/iter (+/- 190,001.97)\ntest iter::bench_enumerate_chain_ref_sum                              ... bench:  15,817,281.10 ns/iter (+/- 1,099,421.63)\ntest iter::bench_enumerate_chain_sum                                  ... bench:  14,977,293.80 ns/iter (+/- 348,975.71)\ntest iter::bench_enumerate_ref_sum                                    ... bench:   7,775,036.80 ns/iter (+/- 179,594.25)\ntest iter::bench_enumerate_sum                                        ... bench:   7,156,533.80 ns/iter (+/- 162,969.50)\ntest iter::bench_filter_chain_count                                   ... bench:  14,761,976.80 ns/iter (+/- 340,127.87)\ntest iter::bench_filter_chain_ref_count                               ... bench:  14,763,454.00 ns/iter (+/- 300,003.97)\ntest iter::bench_filter_chain_ref_sum                                 ... bench:  14,738,455.80 ns/iter (+/- 677,860.61)\ntest iter::bench_filter_chain_sum                                     ... bench:  14,858,749.60 ns/iter (+/- 418,935.31)\ntest iter::bench_filter_count                                         ... bench:   7,161,088.35 ns/iter (+/- 13,133.86)\ntest iter::bench_filter_map_chain_ref_sum                             ... bench:  27,741,810.40 ns/iter (+/- 185,999.23)\ntest iter::bench_filter_map_chain_sum                                 ... bench:  27,534,999.90 ns/iter (+/- 124,531.98)\ntest iter::bench_filter_map_ref_sum                                   ... bench:  12,992,867.90 ns/iter (+/- 209,417.79)\ntest iter::bench_filter_map_sum                                       ... bench:  12,974,866.60 ns/iter (+/- 235,634.76)\ntest iter::bench_filter_ref_count                                     ... bench:   7,162,278.45 ns/iter (+/- 81,970.71)\ntest iter::bench_filter_ref_sum                                       ... bench:   6,956,509.85 ns/iter (+/- 9,427.41)\ntest iter::bench_filter_sum                                           ... bench:   6,963,396.00 ns/iter (+/- 289,352.24)\ntest iter::bench_flat_map_chain_ref_sum                               ... bench:  27,621,878.30 ns/iter (+/- 1,265,490.43)\ntest iter::bench_flat_map_chain_sum                                   ... bench:  19,127,858.60 ns/iter (+/- 373,860.56)\ntest iter::bench_flat_map_ref_sum                                     ... bench:   7,123,908.45 ns/iter (+/- 133,808.06)\ntest iter::bench_flat_map_sum                                         ... bench:   7,102,322.00 ns/iter (+/- 343,139.15)\ntest iter::bench_for_each_chain_fold                                  ... bench:  13,412,201.40 ns/iter (+/- 140,313.09)\ntest iter::bench_for_each_chain_loop                                  ... bench:  17,892,479.00 ns/iter (+/- 29,214.99)\ntest iter::bench_for_each_chain_ref_fold                              ... bench:  13,416,535.30 ns/iter (+/- 140,411.23)\ntest iter::bench_fuse_chain_ref_sum                                   ... bench:  13,641,072.00 ns/iter (+/- 847,426.30)\ntest iter::bench_fuse_chain_sum                                       ... bench:  13,407,280.40 ns/iter (+/- 327,714.96)\ntest iter::bench_fuse_ref_sum                                         ... bench:   6,703,993.10 ns/iter (+/- 28,625.93)\ntest iter::bench_fuse_sum                                             ... bench:   6,479,957.25 ns/iter (+/- 46,597.22)\ntest iter::bench_inspect_chain_ref_sum                                ... bench:  14,079,148.10 ns/iter (+/- 91,100.43)\ntest iter::bench_inspect_chain_sum                                    ... bench:  13,636,188.50 ns/iter (+/- 579,876.57)\ntest iter::bench_inspect_ref_sum                                      ... bench:   6,702,429.45 ns/iter (+/- 19,107.86)\ntest iter::bench_inspect_sum                                          ... bench:   6,484,293.00 ns/iter (+/- 189,303.39)\ntest iter::bench_lt                                                   ... bench:   2,269,055.10 ns/iter (+/- 118,087.50)\ntest iter::bench_max                                                  ... bench:         823.78 ns/iter (+/- 6.77)\ntest iter::bench_max_by_key                                           ... bench:       1,685.79 ns/iter (+/- 45.09)\ntest iter::bench_max_by_key2                                          ... bench:      46,658.39 ns/iter (+/- 22,166.23)\ntest iter::bench_multiple_take                                        ... bench:       2,028.56 ns/iter (+/- 75.56)\ntest iter::bench_next_chunk_copied                                    ... bench:       1,842.97 ns/iter (+/- 38.88)\ntest iter::bench_next_chunk_filter_even                               ... bench:         166.20 ns/iter (+/- 8.95)\ntest iter::bench_next_chunk_filter_map_even                           ... bench:         220.53 ns/iter (+/- 11.29)\ntest iter::bench_next_chunk_filter_map_mostly_false                   ... bench:       2,610.71 ns/iter (+/- 74.52)\ntest iter::bench_next_chunk_filter_map_predictably_true               ... bench:         121.77 ns/iter (+/- 8.47)\ntest iter::bench_next_chunk_filter_mostly_false                       ... bench:       2,324.45 ns/iter (+/- 13.42)\ntest iter::bench_next_chunk_filter_predictably_true                   ... bench:          90.05 ns/iter (+/- 3.43)\ntest iter::bench_next_chunk_trusted_random_access                     ... bench:       2,615.89 ns/iter (+/- 77.15)\ntest iter::bench_partial_cmp                                          ... bench:   2,276,822.40 ns/iter (+/- 57,324.17)\ntest iter::bench_peekable_chain_ref_sum                               ... bench:  13,659,192.90 ns/iter (+/- 57,000.58)\ntest iter::bench_peekable_chain_sum                                   ... bench:  13,414,201.20 ns/iter (+/- 304,607.71)\ntest iter::bench_peekable_ref_sum                                     ... bench:   6,736,286.80 ns/iter (+/- 49,821.15)\ntest iter::bench_peekable_sum                                         ... bench:   6,483,087.65 ns/iter (+/- 36,547.01)\ntest iter::bench_range_step_by_fold_u16                               ... bench:         961.87 ns/iter (+/- 24.63)\ntest iter::bench_range_step_by_fold_usize                             ... bench:         309.62 ns/iter (+/- 4.14)\ntest iter::bench_range_step_by_loop_u32                               ... bench:      13,122.06 ns/iter (+/- 6,551.69)\ntest iter::bench_range_step_by_sum_reducible                          ... bench:       1,024.87 ns/iter (+/- 221.75)\ntest iter::bench_rposition                                            ... bench:         212.50 ns/iter (+/- 8.07)\ntest iter::bench_skip_chain_ref_sum                                   ... bench:  13,632,704.50 ns/iter (+/- 98,691.25)\ntest iter::bench_skip_chain_sum                                       ... bench:  13,438,822.60 ns/iter (+/- 320,558.41)\ntest iter::bench_skip_cycle_skip_zip_add_ref_sum                      ... bench:  18,205,442.90 ns/iter (+/- 160,081.16)\ntest iter::bench_skip_cycle_skip_zip_add_sum                          ... bench:  18,190,542.50 ns/iter (+/- 273,743.00)\ntest iter::bench_skip_ref_sum                                         ... bench:   6,696,248.00 ns/iter (+/- 22,765.74)\ntest iter::bench_skip_sum                                             ... bench:   6,476,112.10 ns/iter (+/- 29,899.03)\ntest iter::bench_skip_then_zip                                        ... bench:         325.20 ns/iter (+/- 8.33)\ntest iter::bench_skip_trusted_random_access                           ... bench:      46,280.10 ns/iter (+/- 6,592.22)\ntest iter::bench_skip_while                                           ... bench:         725.78 ns/iter (+/- 9.32)\ntest iter::bench_skip_while_chain_ref_sum                             ... bench:  13,656,787.90 ns/iter (+/- 200,946.51)\ntest iter::bench_skip_while_chain_sum                                 ... bench:  13,419,209.60 ns/iter (+/- 366,167.49)\ntest iter::bench_skip_while_ref_sum                                   ... bench:   6,703,549.80 ns/iter (+/- 38,134.62)\ntest iter::bench_skip_while_sum                                       ... bench:   6,482,962.35 ns/iter (+/- 22,428.46)\ntest iter::bench_take_while_chain_ref_sum                             ... bench:   8,000,225.60 ns/iter (+/- 59,646.00)\ntest iter::bench_take_while_chain_sum                                 ... bench:   7,996,429.30 ns/iter (+/- 46,967.42)\ntest iter::bench_trusted_random_access_adapters                       ... bench:     313,247.18 ns/iter (+/- 20,154.20)\ntest iter::bench_zip_add                                              ... bench:      12,764.64 ns/iter (+/- 572.24)\ntest iter::bench_zip_copy                                             ... bench:      10,201.83 ns/iter (+/- 317.29)\ntest iter::bench_zip_then_skip                                        ... bench:       2,429.17 ns/iter (+/- 87.20)\ntest net::addr_parser::bench_parse_ipaddr_v4                          ... bench:         192.46 ns/iter (+/- 2.46)\ntest net::addr_parser::bench_parse_ipaddr_v6_compress                 ... bench:         600.59 ns/iter (+/- 18.92)\ntest net::addr_parser::bench_parse_ipaddr_v6_full                     ... bench:         849.55 ns/iter (+/- 12.08)\ntest net::addr_parser::bench_parse_ipaddr_v6_v4                       ... bench:         586.38 ns/iter (+/- 9.36)\ntest net::addr_parser::bench_parse_ipv4                               ... bench:         188.05 ns/iter (+/- 2.42)\ntest net::addr_parser::bench_parse_ipv6_compress                      ... bench:         541.47 ns/iter (+/- 29.68)\ntest net::addr_parser::bench_parse_ipv6_full                          ... bench:         779.80 ns/iter (+/- 31.44)\ntest net::addr_parser::bench_parse_ipv6_v4                            ... bench:         517.04 ns/iter (+/- 17.21)\ntest net::addr_parser::bench_parse_socket_v4                          ... bench:         310.57 ns/iter (+/- 6.13)\ntest net::addr_parser::bench_parse_socket_v6                          ... bench:         679.78 ns/iter (+/- 7.98)\ntest net::addr_parser::bench_parse_socket_v6_scope_id                 ... bench:         787.07 ns/iter (+/- 11.53)\ntest net::addr_parser::bench_parse_socketaddr_v4                      ... bench:         323.59 ns/iter (+/- 1.94)\ntest net::addr_parser::bench_parse_socketaddr_v6                      ... bench:         736.43 ns/iter (+/- 15.10)\ntest num::bench_i16_from_str                                          ... bench:     258,258.85 ns/iter (+/- 8,062.73)\ntest num::bench_i16_from_str_radix_10                                 ... bench:     258,689.33 ns/iter (+/- 3,587.37)\ntest num::bench_i16_from_str_radix_16                                 ... bench:     288,190.82 ns/iter (+/- 3,124.19)\ntest num::bench_i16_from_str_radix_2                                  ... bench:     105,995.64 ns/iter (+/- 3,925.40)\ntest num::bench_i16_from_str_radix_36                                 ... bench:     316,090.90 ns/iter (+/- 2,590.64)\ntest num::bench_i32_from_str                                          ... bench:     222,442.20 ns/iter (+/- 9,123.80)\ntest num::bench_i32_from_str_radix_10                                 ... bench:     222,819.47 ns/iter (+/- 2,814.06)\ntest num::bench_i32_from_str_radix_16                                 ... bench:     244,061.42 ns/iter (+/- 3,536.66)\ntest num::bench_i32_from_str_radix_2                                  ... bench:     183,030.80 ns/iter (+/- 5,842.23)\ntest num::bench_i32_from_str_radix_36                                 ... bench:     423,482.80 ns/iter (+/- 3,164.58)\ntest num::bench_i64_from_str                                          ... bench:     124,664.80 ns/iter (+/- 4,231.28)\ntest num::bench_i64_from_str_radix_10                                 ... bench:     125,182.57 ns/iter (+/- 3,399.37)\ntest num::bench_i64_from_str_radix_16                                 ... bench:     149,883.42 ns/iter (+/- 3,650.00)\ntest num::bench_i64_from_str_radix_2                                  ... bench:     240,542.10 ns/iter (+/- 189,115.64)\ntest num::bench_i64_from_str_radix_36                                 ... bench:     501,827.88 ns/iter (+/- 1,121.13)\ntest num::bench_i8_from_str                                           ... bench:     145,182.36 ns/iter (+/- 1,787.51)\ntest num::bench_i8_from_str_radix_10                                  ... bench:     262,840.80 ns/iter (+/- 124,558.76)\ntest num::bench_i8_from_str_radix_16                                  ... bench:     269,396.05 ns/iter (+/- 124,699.38)\ntest num::bench_i8_from_str_radix_2                                   ... bench:      91,049.34 ns/iter (+/- 2,436.20)\ntest num::bench_i8_from_str_radix_36                                  ... bench:     141,917.30 ns/iter (+/- 2,075.39)\ntest num::bench_u16_from_str                                          ... bench:     194,767.03 ns/iter (+/- 2,890.22)\ntest num::bench_u16_from_str_radix_10                                 ... bench:     290,905.50 ns/iter (+/- 100,880.77)\ntest num::bench_u16_from_str_radix_16                                 ... bench:     220,257.72 ns/iter (+/- 2,654.73)\ntest num::bench_u16_from_str_radix_2                                  ... bench:     193,421.15 ns/iter (+/- 4,140.23)\ntest num::bench_u16_from_str_radix_36                                 ... bench:     229,950.33 ns/iter (+/- 2,336.02)\ntest num::bench_u32_from_str                                          ... bench:     169,075.40 ns/iter (+/- 3,949.67)\ntest num::bench_u32_from_str_radix_10                                 ... bench:     267,150.25 ns/iter (+/- 101,585.47)\ntest num::bench_u32_from_str_radix_16                                 ... bench:     291,829.75 ns/iter (+/- 102,904.87)\ntest num::bench_u32_from_str_radix_2                                  ... bench:     172,579.95 ns/iter (+/- 7,272.04)\ntest num::bench_u32_from_str_radix_36                                 ... bench:     281,734.18 ns/iter (+/- 2,762.99)\ntest num::bench_u64_from_str                                          ... bench:     120,815.45 ns/iter (+/- 5,976.80)\ntest num::bench_u64_from_str_radix_10                                 ... bench:     120,828.90 ns/iter (+/- 4,840.17)\ntest num::bench_u64_from_str_radix_16                                 ... bench:     140,409.35 ns/iter (+/- 5,225.46)\ntest num::bench_u64_from_str_radix_2                                  ... bench:     240,076.30 ns/iter (+/- 188,923.01)\ntest num::bench_u64_from_str_radix_36                                 ... bench:     274,365.32 ns/iter (+/- 7,201.17)\ntest num::bench_u8_from_str                                           ... bench:     126,439.77 ns/iter (+/- 2,603.76)\ntest num::bench_u8_from_str_radix_10                                  ... bench:     246,530.25 ns/iter (+/- 121,958.12)\ntest num::bench_u8_from_str_radix_16                                  ... bench:     254,334.90 ns/iter (+/- 120,386.76)\ntest num::bench_u8_from_str_radix_2                                   ... bench:      83,749.94 ns/iter (+/- 1,914.70)\ntest num::bench_u8_from_str_radix_36                                  ... bench:     127,475.05 ns/iter (+/- 1,406.42)\ntest num::dec2flt::bench_0                                            ... bench:          47.79 ns/iter (+/- 0.15)\ntest num::dec2flt::bench_1e150                                        ... bench:          50.18 ns/iter (+/- 0.83)\ntest num::dec2flt::bench_42                                           ... bench:          40.09 ns/iter (+/- 0.57)\ntest num::dec2flt::bench_huge_int                                     ... bench:          85.79 ns/iter (+/- 4.06)\ntest num::dec2flt::bench_long_decimal_and_exp                         ... bench:         101.94 ns/iter (+/- 5.56)\ntest num::dec2flt::bench_max                                          ... bench:          69.74 ns/iter (+/- 1.18)\ntest num::dec2flt::bench_min_normal                                   ... bench:          69.86 ns/iter (+/- 0.82)\ntest num::dec2flt::bench_min_subnormal                                ... bench:          51.89 ns/iter (+/- 1.18)\ntest num::dec2flt::bench_pi_long                                      ... bench:          93.45 ns/iter (+/- 0.77)\ntest num::dec2flt::bench_pi_short                                     ... bench:          66.38 ns/iter (+/- 2.60)\ntest num::dec2flt::bench_short_decimal                                ... bench:          56.05 ns/iter (+/- 4.02)\ntest num::flt2dec::bench_big_shortest                                 ... bench:         227.80 ns/iter (+/- 0.92)\ntest num::flt2dec::bench_small_shortest                               ... bench:         178.41 ns/iter (+/- 1.86)\ntest num::flt2dec::strategy::dragon::bench_big_exact_12               ... bench:      13,702.69 ns/iter (+/- 840.38)\ntest num::flt2dec::strategy::dragon::bench_big_exact_3                ... bench:       5,366.37 ns/iter (+/- 209.29)\ntest num::flt2dec::strategy::dragon::bench_big_exact_inf              ... bench:     289,350.69 ns/iter (+/- 712.99)\ntest num::flt2dec::strategy::dragon::bench_big_shortest               ... bench:      26,956.02 ns/iter (+/- 121.16)\ntest num::flt2dec::strategy::dragon::bench_small_exact_12             ... bench:       2,649.97 ns/iter (+/- 59.33)\ntest num::flt2dec::strategy::dragon::bench_small_exact_3              ... bench:         848.24 ns/iter (+/- 14.58)\ntest num::flt2dec::strategy::dragon::bench_small_exact_inf            ... bench:      16,322.16 ns/iter (+/- 250.62)\ntest num::flt2dec::strategy::dragon::bench_small_shortest             ... bench:       2,625.24 ns/iter (+/- 38.19)\ntest num::flt2dec::strategy::grisu::bench_big_exact_12                ... bench:          87.54 ns/iter (+/- 1.37)\ntest num::flt2dec::strategy::grisu::bench_big_exact_3                 ... bench:          63.01 ns/iter (+/- 0.74)\ntest num::flt2dec::strategy::grisu::bench_big_exact_inf               ... bench:     289,805.57 ns/iter (+/- 1,353.41)\ntest num::flt2dec::strategy::grisu::bench_big_shortest                ... bench:          96.52 ns/iter (+/- 1.54)\ntest num::flt2dec::strategy::grisu::bench_halfway_point_exact_inf     ... bench:       5,569.04 ns/iter (+/- 111.08)\ntest num::flt2dec::strategy::grisu::bench_one_exact_inf               ... bench:       5,584.49 ns/iter (+/- 129.63)\ntest num::flt2dec::strategy::grisu::bench_small_exact_12              ... bench:          70.54 ns/iter (+/- 1.46)\ntest num::flt2dec::strategy::grisu::bench_small_exact_3               ... bench:          57.48 ns/iter (+/- 0.75)\ntest num::flt2dec::strategy::grisu::bench_small_exact_inf             ... bench:      16,375.26 ns/iter (+/- 221.56)\ntest num::flt2dec::strategy::grisu::bench_small_shortest              ... bench:          73.58 ns/iter (+/- 3.32)\ntest num::flt2dec::strategy::grisu::bench_trailing_zero_exact_inf     ... bench:       5,813.18 ns/iter (+/- 101.06)\ntest num::int_log::u128_log10_predictable                             ... bench:      40,906.46 ns/iter (+/- 532.64)\ntest num::int_log::u128_log10_random                                  ... bench:      10,432.04 ns/iter (+/- 144.71)\ntest num::int_log::u128_log10_random_small                            ... bench:       1,227.03 ns/iter (+/- 26.46)\ntest num::int_log::u128_log_random                                    ... bench:   6,037,833.25 ns/iter (+/- 39,859.36)\ntest num::int_log::u128_log_random_small                              ... bench:   3,806,303.15 ns/iter (+/- 11,048.34)\ntest num::int_log::u16_log10_predictable                              ... bench:       1,524.17 ns/iter (+/- 21.18)\ntest num::int_log::u16_log10_random                                   ... bench:         424.68 ns/iter (+/- 11.14)\ntest num::int_log::u16_log10_random_small                             ... bench:         423.75 ns/iter (+/- 27.95)\ntest num::int_log::u16_log_geometric                                  ... bench:         482.48 ns/iter (+/- 15.22)\ntest num::int_log::u16_log_random                                     ... bench:     290,750.05 ns/iter (+/- 22,665.65)\ntest num::int_log::u16_log_random_small                               ... bench:     246,410.50 ns/iter (+/- 2,290.93)\ntest num::int_log::u32_log10_predictable                              ... bench:       5,005.76 ns/iter (+/- 112.59)\ntest num::int_log::u32_log10_random                                   ... bench:       1,503.80 ns/iter (+/- 20.01)\ntest num::int_log::u32_log10_random_small                             ... bench:       2,213.98 ns/iter (+/- 757.87)\ntest num::int_log::u32_log_geometric                                  ... bench:         926.37 ns/iter (+/- 9.82)\ntest num::int_log::u32_log_random                                     ... bench:     330,393.50 ns/iter (+/- 8,473.07)\ntest num::int_log::u32_log_random_small                               ... bench:     228,788.65 ns/iter (+/- 5,528.83)\ntest num::int_log::u64_log10_predictable                              ... bench:       2,180.28 ns/iter (+/- 77.28)\ntest num::int_log::u64_log10_random                                   ... bench:         866.15 ns/iter (+/- 9.32)\ntest num::int_log::u64_log10_random_small                             ... bench:         696.14 ns/iter (+/- 4.44)\ntest num::int_log::u64_log_geometric                                  ... bench:       2,911.44 ns/iter (+/- 48.18)\ntest num::int_log::u64_log_random                                     ... bench:     396,697.33 ns/iter (+/- 4,672.25)\ntest num::int_log::u64_log_random_small                               ... bench:     233,909.95 ns/iter (+/- 4,909.33)\ntest num::int_log::u8_log10_predictable                               ... bench:         656.48 ns/iter (+/- 25.74)\ntest num::int_log::u8_log10_random                                    ... bench:         615.14 ns/iter (+/- 158.43)\ntest num::int_log::u8_log10_random_small                              ... bench:         481.11 ns/iter (+/- 41.78)\ntest num::int_log::u8_log_geometric                                   ... bench:         253.74 ns/iter (+/- 12.81)\ntest num::int_log::u8_log_random                                      ... bench:     232,747.20 ns/iter (+/- 5,129.08)\ntest num::int_log::u8_log_random_small                                ... bench:     236,770.40 ns/iter (+/- 2,614.20)\ntest num::int_pow::checked_pow_variable                               ... FAILED\ntest num::int_pow::overflowing_pow_variable                           ... bench:      11,553.20 ns/iter (+/- 268.95)\ntest num::int_pow::pow_m7                                             ... bench:       5,195.68 ns/iter (+/- 117.42)\ntest num::int_pow::pow_m8                                             ... bench:       5,322.09 ns/iter (+/- 236.64)\ntest num::int_pow::pow_variable                                       ... bench:       5,259.34 ns/iter (+/- 197.70)\ntest num::int_pow::saturating_pow_variable                            ... bench:       2,852.50 ns/iter (+/- 79.42)\ntest num::int_pow::wrapping_pow_variable                              ... bench:       1,966.30 ns/iter (+/- 102.42)\ntest num::int_sqrt::u128_sqrt_predictable                             ... bench:     110,016.45 ns/iter (+/- 20,507.41)\ntest num::int_sqrt::u128_sqrt_random                                  ... bench:      13,171.68 ns/iter (+/- 2,202.05)\ntest num::int_sqrt::u128_sqrt_random_small                            ... bench:       3,729.63 ns/iter (+/- 34.63)\ntest num::int_sqrt::u128_sqrt_uniform                                 ... bench:      16,169.14 ns/iter (+/- 51.32)\ntest num::int_sqrt::u16_sqrt_predictable                              ... bench:       3,336.58 ns/iter (+/- 22.34)\ntest num::int_sqrt::u16_sqrt_random                                   ... bench:       3,766.29 ns/iter (+/- 1,423.37)\ntest num::int_sqrt::u16_sqrt_random_small                             ... bench:       1,794.96 ns/iter (+/- 22.84)\ntest num::int_sqrt::u16_sqrt_uniform                                  ... bench:       4,323.18 ns/iter (+/- 973.43)\ntest num::int_sqrt::u32_sqrt_predictable                              ... bench:       8,830.77 ns/iter (+/- 125.80)\ntest num::int_sqrt::u32_sqrt_random                                   ... bench:       4,102.70 ns/iter (+/- 538.95)\ntest num::int_sqrt::u32_sqrt_random_small                             ... bench:       2,076.14 ns/iter (+/- 91.61)\ntest num::int_sqrt::u32_sqrt_uniform                                  ... bench:       4,611.28 ns/iter (+/- 12.96)\ntest num::int_sqrt::u64_sqrt_predictable                              ... bench:      15,990.84 ns/iter (+/- 71.91)\ntest num::int_sqrt::u64_sqrt_random                                   ... bench:       4,780.35 ns/iter (+/- 102.29)\ntest num::int_sqrt::u64_sqrt_random_small                             ... bench:       2,402.21 ns/iter (+/- 94.88)\ntest num::int_sqrt::u64_sqrt_uniform                                  ... bench:       6,246.48 ns/iter (+/- 10.08)\ntest num::int_sqrt::u8_sqrt_predictable                               ... bench:       1,313.31 ns/iter (+/- 36.24)\ntest num::int_sqrt::u8_sqrt_random                                    ... bench:       1,445.32 ns/iter (+/- 17.32)\ntest num::int_sqrt::u8_sqrt_random_small                              ... bench:       1,448.49 ns/iter (+/- 48.50)\ntest num::int_sqrt::u8_sqrt_uniform                                   ... bench:       1,444.25 ns/iter (+/- 35.61)\ntest ops::alloc_obj_with_dtor                                         ... bench:           0.90 ns/iter (+/- 0.01)\ntest pattern::ends_with_char                                          ... bench:      13,046.24 ns/iter (+/- 48.15)\ntest pattern::ends_with_str                                           ... bench:      24,765.35 ns/iter (+/- 13,556.76)\ntest pattern::starts_with_char                                        ... bench:      43,171.91 ns/iter (+/- 313.76)\ntest pattern::starts_with_str                                         ... bench:      11,685.12 ns/iter (+/- 121.78)\ntest slice::binary_search_l1                                          ... bench:          59.57 ns/iter (+/- 0.99)\ntest slice::binary_search_l1_with_dups                                ... bench:          51.54 ns/iter (+/- 1.24)\ntest slice::binary_search_l1_worst_case                               ... bench:          11.83 ns/iter (+/- 0.78)\ntest slice::binary_search_l2                                          ... bench:          81.26 ns/iter (+/- 1.56)\ntest slice::binary_search_l2_with_dups                                ... bench:          79.05 ns/iter (+/- 1.29)\ntest slice::binary_search_l2_worst_case                               ... bench:          14.39 ns/iter (+/- 0.88)\ntest slice::binary_search_l3                                          ... bench:         145.16 ns/iter (+/- 4.39)\ntest slice::binary_search_l3_with_dups                                ... bench:         151.22 ns/iter (+/- 15.07)\ntest slice::binary_search_l3_worst_case                               ... bench:          25.13 ns/iter (+/- 4.76)\ntest slice::fill_byte_sized                                           ... bench:       1,629.45 ns/iter (+/- 73.95)\ntest slice::fold_to_last                                              ... bench:         292.41 ns/iter (+/- 4.28)\ntest slice::rotate_16_usize_4                                         ... bench:         412.47 ns/iter (+/- 1.68)\ntest slice::rotate_16_usize_5                                         ... bench:         485.20 ns/iter (+/- 3.96)\ntest slice::rotate_64_usize_4                                         ... bench:       5,679.30 ns/iter (+/- 161.64)\ntest slice::rotate_64_usize_5                                         ... bench:       8,540.08 ns/iter (+/- 108.81)\ntest slice::rotate_rgb                                                ... bench:         429.98 ns/iter (+/- 12.55)\ntest slice::rotate_u8                                                 ... bench:         450.96 ns/iter (+/- 15.42)\ntest slice::rotate_usize                                              ... bench:         413.71 ns/iter (+/- 4.80)\ntest slice::swap_with_slice_4x_usize_30                               ... bench:       2,801.89 ns/iter (+/- 1,002.04)\ntest slice::swap_with_slice_4x_usize_3000                             ... bench:     193,170.90 ns/iter (+/- 285.94)\ntest slice::swap_with_slice_5x_usize_30                               ... bench:       2,196.64 ns/iter (+/- 3.22)\ntest slice::swap_with_slice_5x_usize_3000                             ... bench:     241,320.19 ns/iter (+/- 365.07)\ntest slice::swap_with_slice_rgb_30                                    ... bench:       1,436.45 ns/iter (+/- 8.26)\ntest slice::swap_with_slice_rgb_3000                                  ... bench:     129,351.57 ns/iter (+/- 740.69)\ntest slice::swap_with_slice_u8_30                                     ... bench:         679.27 ns/iter (+/- 12.83)\ntest slice::swap_with_slice_u8_3000                                   ... bench:      43,842.12 ns/iter (+/- 439.73)\ntest slice::swap_with_slice_usize_30                                  ... bench:         678.35 ns/iter (+/- 11.99)\ntest slice::swap_with_slice_usize_3000                                ... bench:      45,510.47 ns/iter (+/- 1,634.16)\ntest str::char_count::emoji_huge::case00_libcore                      ... bench:     110,683.35 ns/iter (+/- 1,397.32) = 3275 MB/s\ntest str::char_count::emoji_huge::case01_filter_count_cont_bytes      ... bench:     325,476.95 ns/iter (+/- 2,457.50) = 1113 MB/s\ntest str::char_count::emoji_huge::case02_iter_increment               ... bench:     818,369.40 ns/iter (+/- 20,080.14) = 442 MB/s\ntest str::char_count::emoji_huge::case03_manual_char_len              ... bench:      45,344.46 ns/iter (+/- 2,219.51) = 7994 MB/s\ntest str::char_count::emoji_large::case00_libcore                     ... bench:       1,771.38 ns/iter (+/- 30.92) = 3198 MB/s\ntest str::char_count::emoji_large::case01_filter_count_cont_bytes     ... bench:       5,079.62 ns/iter (+/- 24.40) = 1115 MB/s\ntest str::char_count::emoji_large::case02_iter_increment              ... bench:      12,732.04 ns/iter (+/- 1,253.76) = 444 MB/s\ntest str::char_count::emoji_large::case03_manual_char_len             ... bench:         730.47 ns/iter (+/- 11.30) = 7758 MB/s\ntest str::char_count::emoji_medium::case00_libcore                    ... bench:         246.47 ns/iter (+/- 3.39) = 2878 MB/s\ntest str::char_count::emoji_medium::case01_filter_count_cont_bytes    ... bench:         647.66 ns/iter (+/- 5.80) = 1094 MB/s\ntest str::char_count::emoji_medium::case02_iter_increment             ... bench:       1,598.80 ns/iter (+/- 191.78) = 443 MB/s\ntest str::char_count::emoji_medium::case03_manual_char_len            ... bench:          92.90 ns/iter (+/- 1.38) = 7695 MB/s\ntest str::char_count::emoji_small::case00_libcore                     ... bench:          51.59 ns/iter (+/- 1.21) = 1333 MB/s\ntest str::char_count::emoji_small::case01_filter_count_cont_bytes     ... bench:          70.54 ns/iter (+/- 2.50) = 971 MB/s\ntest str::char_count::emoji_small::case02_iter_increment              ... bench:         152.57 ns/iter (+/- 7.54) = 447 MB/s\ntest str::char_count::emoji_small::case03_manual_char_len             ... bench:           8.79 ns/iter (+/- 0.12) = 8500 MB/s\ntest str::char_count::emoji_tiny::case00_libcore                      ... bench:          13.44 ns/iter (+/- 0.17) = 615 MB/s\ntest str::char_count::emoji_tiny::case01_filter_count_cont_bytes      ... bench:          11.45 ns/iter (+/- 0.51) = 727 MB/s\ntest str::char_count::emoji_tiny::case02_iter_increment               ... bench:          21.10 ns/iter (+/- 1.24) = 380 MB/s\ntest str::char_count::emoji_tiny::case03_manual_char_len              ... bench:           3.11 ns/iter (+/- 0.27) = 2666 MB/s\ntest str::char_count::en_huge::case00_libcore                         ... bench:     106,046.77 ns/iter (+/- 2,611.49) = 3249 MB/s\ntest str::char_count::en_huge::case01_filter_count_cont_bytes         ... bench:     310,881.60 ns/iter (+/- 4,907.69) = 1108 MB/s\ntest str::char_count::en_huge::case02_iter_increment                  ... bench:   2,072,524.80 ns/iter (+/- 50,383.87) = 166 MB/s\ntest str::char_count::en_huge::case03_manual_char_len                 ... bench:     128,231.35 ns/iter (+/- 18,526.13) = 2687 MB/s\ntest str::char_count::en_large::case00_libcore                        ... bench:       1,677.30 ns/iter (+/- 55.35) = 3210 MB/s\ntest str::char_count::en_large::case01_filter_count_cont_bytes        ... bench:       4,838.85 ns/iter (+/- 40.46) = 1112 MB/s\ntest str::char_count::en_large::case02_iter_increment                 ... bench:      32,314.88 ns/iter (+/- 1,158.54) = 166 MB/s\ntest str::char_count::en_large::case03_manual_char_len                ... bench:       2,059.50 ns/iter (+/- 179.67) = 2614 MB/s\ntest str::char_count::en_medium::case00_libcore                       ... bench:         235.26 ns/iter (+/- 8.99) = 2863 MB/s\ntest str::char_count::en_medium::case01_filter_count_cont_bytes       ... bench:         615.83 ns/iter (+/- 9.26) = 1094 MB/s\ntest str::char_count::en_medium::case02_iter_increment                ... bench:       4,049.05 ns/iter (+/- 186.83) = 166 MB/s\ntest str::char_count::en_medium::case03_manual_char_len               ... bench:         266.14 ns/iter (+/- 45.21) = 2530 MB/s\ntest str::char_count::en_small::case00_libcore                        ... bench:          41.21 ns/iter (+/- 0.97) = 853 MB/s\ntest str::char_count::en_small::case01_filter_count_cont_bytes        ... bench:          37.00 ns/iter (+/- 2.86) = 972 MB/s\ntest str::char_count::en_small::case02_iter_increment                 ... bench:         217.24 ns/iter (+/- 7.73) = 161 MB/s\ntest str::char_count::en_small::case03_manual_char_len                ... bench:          26.60 ns/iter (+/- 7.56) = 1346 MB/s\ntest str::char_count::en_tiny::case00_libcore                         ... bench:          13.44 ns/iter (+/- 0.18) = 615 MB/s\ntest str::char_count::en_tiny::case01_filter_count_cont_bytes         ... bench:          11.51 ns/iter (+/- 0.57) = 727 MB/s\ntest str::char_count::en_tiny::case02_iter_increment                  ... bench:          51.78 ns/iter (+/- 0.80) = 156 MB/s\ntest str::char_count::en_tiny::case03_manual_char_len                 ... bench:           8.91 ns/iter (+/- 3.52) = 1000 MB/s\ntest str::char_count::ru_huge::case00_libcore                         ... bench:      99,955.88 ns/iter (+/- 2,265.02) = 3252 MB/s\ntest str::char_count::ru_huge::case01_filter_count_cont_bytes         ... bench:     292,885.45 ns/iter (+/- 4,476.88) = 1110 MB/s\ntest str::char_count::ru_huge::case02_iter_increment                  ... bench:   1,272,827.20 ns/iter (+/- 33,962.39) = 255 MB/s\ntest str::char_count::ru_huge::case03_manual_char_len                 ... bench:     133,931.58 ns/iter (+/- 46,850.77) = 2427 MB/s\ntest str::char_count::ru_large::case00_libcore                        ... bench:       1,591.78 ns/iter (+/- 28.02) = 3192 MB/s\ntest str::char_count::ru_large::case01_filter_count_cont_bytes        ... bench:       4,571.24 ns/iter (+/- 148.72) = 1111 MB/s\ntest str::char_count::ru_large::case02_iter_increment                 ... bench:      20,040.10 ns/iter (+/- 1,425.78) = 253 MB/s\ntest str::char_count::ru_large::case03_manual_char_len                ... bench:       2,210.11 ns/iter (+/- 1,009.89) = 2298 MB/s\ntest str::char_count::ru_medium::case00_libcore                       ... bench:         224.49 ns/iter (+/- 8.47) = 2834 MB/s\ntest str::char_count::ru_medium::case01_filter_count_cont_bytes       ... bench:         583.07 ns/iter (+/- 24.55) = 1089 MB/s\ntest str::char_count::ru_medium::case02_iter_increment                ... bench:       2,485.42 ns/iter (+/- 109.61) = 255 MB/s\ntest str::char_count::ru_medium::case03_manual_char_len               ... bench:         266.30 ns/iter (+/- 67.65) = 2387 MB/s\ntest str::char_count::ru_small::case00_libcore                        ... bench:          37.18 ns/iter (+/- 1.18) = 864 MB/s\ntest str::char_count::ru_small::case01_filter_count_cont_bytes        ... bench:          35.27 ns/iter (+/- 2.96) = 914 MB/s\ntest str::char_count::ru_small::case02_iter_increment                 ... bench:         120.21 ns/iter (+/- 6.70) = 266 MB/s\ntest str::char_count::ru_small::case03_manual_char_len                ... bench:          15.99 ns/iter (+/- 5.33) = 2133 MB/s\ntest str::char_count::ru_tiny::case00_libcore                         ... bench:          15.31 ns/iter (+/- 0.37) = 666 MB/s\ntest str::char_count::ru_tiny::case01_filter_count_cont_bytes         ... bench:          13.33 ns/iter (+/- 0.82) = 769 MB/s\ntest str::char_count::ru_tiny::case02_iter_increment                  ... bench:          38.08 ns/iter (+/- 1.95) = 263 MB/s\ntest str::char_count::ru_tiny::case03_manual_char_len                 ... bench:          10.36 ns/iter (+/- 4.81) = 1000 MB/s\ntest str::char_count::zh_huge::case00_libcore                         ... bench:      93,031.57 ns/iter (+/- 2,425.23) = 3247 MB/s\ntest str::char_count::zh_huge::case01_filter_count_cont_bytes         ... bench:     271,937.47 ns/iter (+/- 3,008.31) = 1110 MB/s\ntest str::char_count::zh_huge::case02_iter_increment                  ... bench:     836,338.60 ns/iter (+/- 22,474.94) = 361 MB/s\ntest str::char_count::zh_huge::case03_manual_char_len                 ... bench:      91,593.89 ns/iter (+/- 1,825.37) = 3298 MB/s\ntest str::char_count::zh_large::case00_libcore                        ... bench:       1,479.15 ns/iter (+/- 28.55) = 3191 MB/s\ntest str::char_count::zh_large::case01_filter_count_cont_bytes        ... bench:       4,243.28 ns/iter (+/- 81.22) = 1112 MB/s\ntest str::char_count::zh_large::case02_iter_increment                 ... bench:      12,977.54 ns/iter (+/- 767.69) = 363 MB/s\ntest str::char_count::zh_large::case03_manual_char_len                ... bench:       1,429.76 ns/iter (+/- 134.76) = 3303 MB/s\ntest str::char_count::zh_medium::case00_libcore                       ... bench:         213.52 ns/iter (+/- 6.65) = 2769 MB/s\ntest str::char_count::zh_medium::case01_filter_count_cont_bytes       ... bench:         541.20 ns/iter (+/- 5.95) = 1090 MB/s\ntest str::char_count::zh_medium::case02_iter_increment                ... bench:       1,625.53 ns/iter (+/- 96.66) = 363 MB/s\ntest str::char_count::zh_medium::case03_manual_char_len               ... bench:         175.33 ns/iter (+/- 9.57) = 3371 MB/s\ntest str::char_count::zh_small::case00_libcore                        ... bench:          42.56 ns/iter (+/- 1.82) = 857 MB/s\ntest str::char_count::zh_small::case01_filter_count_cont_bytes        ... bench:          38.72 ns/iter (+/- 3.12) = 947 MB/s\ntest str::char_count::zh_small::case02_iter_increment                 ... bench:          97.67 ns/iter (+/- 1.44) = 371 MB/s\ntest str::char_count::zh_small::case03_manual_char_len                ... bench:          16.39 ns/iter (+/- 2.75) = 2250 MB/s\ntest str::char_count::zh_tiny::case00_libcore                         ... bench:          14.34 ns/iter (+/- 0.34) = 642 MB/s\ntest str::char_count::zh_tiny::case01_filter_count_cont_bytes         ... bench:          12.47 ns/iter (+/- 0.87) = 750 MB/s\ntest str::char_count::zh_tiny::case02_iter_increment                  ... bench:          27.04 ns/iter (+/- 2.90) = 333 MB/s\ntest str::char_count::zh_tiny::case03_manual_char_len                 ... bench:           6.36 ns/iter (+/- 0.41) = 1500 MB/s\ntest str::debug::ascii_escapes                                        ... bench:       1,004.73 ns/iter (+/- 25.66)\ntest str::debug::ascii_only                                           ... bench:         674.24 ns/iter (+/- 5.46)\ntest str::debug::mixed                                                ... bench:       4,158.15 ns/iter (+/- 133.42)\ntest str::debug::mostly_unicode                                       ... bench:       3,352.13 ns/iter (+/- 146.97)\ntest str::debug::some_unicode                                         ... bench:         912.07 ns/iter (+/- 10.57)\ntest str::iter::chars_advance_by_0001                                 ... bench:          15.14 ns/iter (+/- 0.55)\ntest str::iter::chars_advance_by_0010                                 ... bench:         114.16 ns/iter (+/- 2.21)\ntest str::iter::chars_advance_by_1000                                 ... bench:       6,728.16 ns/iter (+/- 213.86)\ntest str::str_validate_emoji                                          ... bench:       2,716.51 ns/iter (+/- 378.12)\ntest tuple::bench_tuple_comparison                                    ... bench:          68.28 ns/iter (+/- 2.90)"
        },
        {
          "name": "mycorrhiza",
          "type": "tree",
          "content": null
        },
        {
          "name": "native_benchmark.txt",
          "type": "blob",
          "size": 54.876953125,
          "content": "running 476 tests\ntest any::bench_downcast_ref                                       ... bench:           1.01 ns/iter (+/- 0.02)\ntest array::map_256byte_8byte_256                                  ... bench:       3,206.04 ns/iter (+/- 19.04)\ntest array::map_8byte_256byte_256                                  ... bench:       5,494.49 ns/iter (+/- 10.82)\ntest array::map_8byte_8byte_256                                    ... bench:       2,240.10 ns/iter (+/- 3.02)\ntest array::map_8byte_8byte_64                                     ... bench:         327.53 ns/iter (+/- 2.39)\ntest array::map_8byte_8byte_8                                      ... bench:          44.44 ns/iter (+/- 0.24)\ntest ascii::bench_ascii_escape_display_mixed                       ... bench:       2,950.28 ns/iter (+/- 83.38)\ntest ascii::bench_ascii_escape_display_no_escape                   ... bench:          59.66 ns/iter (+/- 1.01)\ntest ascii::is_ascii::long::case00_libcore                         ... bench:          10.99 ns/iter (+/- 0.35) = 699000 MB/s\ntest ascii::is_ascii::long::case01_iter_all                        ... bench:          97.35 ns/iter (+/- 1.07) = 72061 MB/s\ntest ascii::is_ascii::long::case02_align_to                        ... bench:          11.58 ns/iter (+/- 9.20) = 635454 MB/s\ntest ascii::is_ascii::long::case03_align_to_unrolled               ... bench:           6.24 ns/iter (+/- 0.73) = 1165000 MB/s\ntest ascii::is_ascii::medium::case00_libcore                       ... bench:           1.15 ns/iter (+/- 0.07) = 32000 MB/s\ntest ascii::is_ascii::medium::case01_iter_all                      ... bench:           7.75 ns/iter (+/- 0.02) = 4571 MB/s\ntest ascii::is_ascii::medium::case02_align_to                      ... bench:           1.92 ns/iter (+/- 0.03) = 32000 MB/s\ntest ascii::is_ascii::medium::case03_align_to_unrolled             ... bench:           1.61 ns/iter (+/- 0.08) = 32000 MB/s\ntest ascii::is_ascii::short::case00_libcore                        ... bench:           2.00 ns/iter (+/- 0.20) = 3500 MB/s\ntest ascii::is_ascii::short::case01_iter_all                       ... bench:           2.38 ns/iter (+/- 0.07) = 3500 MB/s\ntest ascii::is_ascii::short::case02_align_to                       ... bench:           1.81 ns/iter (+/- 0.04) = 7000 MB/s\ntest ascii::is_ascii::short::case03_align_to_unrolled              ... bench:           2.60 ns/iter (+/- 0.04) = 3500 MB/s\ntest ascii::is_ascii::unaligned_both::case00_libcore               ... bench:           0.86 ns/iter (+/- 0.02) = 30000 MB/s\ntest ascii::is_ascii::unaligned_both::case01_iter_all              ... bench:           3.91 ns/iter (+/- 0.07) = 10000 MB/s\ntest ascii::is_ascii::unaligned_both::case02_align_to              ... bench:           4.64 ns/iter (+/- 0.26) = 7500 MB/s\ntest ascii::is_ascii::unaligned_both::case03_align_to_unrolled     ... bench:           3.88 ns/iter (+/- 0.07) = 10000 MB/s\ntest ascii::is_ascii::unaligned_head::case00_libcore               ... bench:           1.21 ns/iter (+/- 0.02) = 31000 MB/s\ntest ascii::is_ascii::unaligned_head::case01_iter_all              ... bench:           7.95 ns/iter (+/- 0.47) = 4428 MB/s\ntest ascii::is_ascii::unaligned_head::case02_align_to              ... bench:           3.67 ns/iter (+/- 1.40) = 10333 MB/s\ntest ascii::is_ascii::unaligned_head::case03_align_to_unrolled     ... bench:           4.80 ns/iter (+/- 0.18) = 7750 MB/s\ntest ascii::is_ascii::unaligned_tail::case00_libcore               ... bench:           0.88 ns/iter (+/- 0.02) = 31000 MB/s\ntest ascii::is_ascii::unaligned_tail::case01_iter_all              ... bench:           3.96 ns/iter (+/- 0.22) = 10333 MB/s\ntest ascii::is_ascii::unaligned_tail::case02_align_to              ... bench:           2.35 ns/iter (+/- 0.01) = 15500 MB/s\ntest ascii::is_ascii::unaligned_tail::case03_align_to_unrolled     ... bench:           4.16 ns/iter (+/- 0.21) = 7750 MB/s\ntest ascii::long::case00_alloc_only                                ... bench:          64.53 ns/iter (+/- 0.68) = 109218 MB/s\ntest ascii::long::case01_black_box_read_each_byte                  ... bench:       1,185.57 ns/iter (+/- 120.22) = 5898 MB/s\ntest ascii::long::case02_lookup_table                              ... bench:       1,106.83 ns/iter (+/- 31.86) = 6320 MB/s\ntest ascii::long::case03_branch_and_subtract                       ... bench:         230.31 ns/iter (+/- 16.54) = 30391 MB/s\ntest ascii::long::case04_branch_and_mask                           ... bench:         287.90 ns/iter (+/- 1.68) = 24355 MB/s\ntest ascii::long::case05_branchless                                ... bench:         255.60 ns/iter (+/- 2.36) = 27411 MB/s\ntest ascii::long::case06_libcore                                   ... bench:         226.31 ns/iter (+/- 5.62) = 30929 MB/s\ntest ascii::long::case07_fake_simd_u32                             ... bench:         257.01 ns/iter (+/- 4.18) = 27198 MB/s\ntest ascii::long::case08_fake_simd_u64                             ... bench:         256.53 ns/iter (+/- 5.92) = 27304 MB/s\ntest ascii::long::case09_mask_mult_bool_branchy_lookup_table       ... bench:       3,389.98 ns/iter (+/- 48.12) = 2062 MB/s\ntest ascii::long::case10_mask_mult_bool_lookup_table               ... bench:       2,565.79 ns/iter (+/- 17.20) = 2725 MB/s\ntest ascii::long::case11_mask_mult_bool_match_range                ... bench:         227.35 ns/iter (+/- 5.02) = 30792 MB/s\ntest ascii::long::case12_mask_shifted_bool_match_range             ... bench:         227.42 ns/iter (+/- 5.11) = 30792 MB/s\ntest ascii::long::case13_subtract_shifted_bool_match_range         ... bench:         225.49 ns/iter (+/- 4.92) = 31066 MB/s\ntest ascii::long::case14_subtract_multiplied_bool_match_range      ... bench:         226.05 ns/iter (+/- 6.45) = 30929 MB/s\ntest ascii::long::is_ascii                                         ... bench:         130.55 ns/iter (+/- 1.47) = 53769 MB/s\ntest ascii::long::is_ascii_alphabetic                              ... bench:          64.69 ns/iter (+/- 0.63) = 109218 MB/s\ntest ascii::long::is_ascii_alphanumeric                            ... bench:          64.62 ns/iter (+/- 0.60) = 109218 MB/s\ntest ascii::long::is_ascii_control                                 ... bench:          64.81 ns/iter (+/- 0.71) = 109218 MB/s\ntest ascii::long::is_ascii_digit                                   ... bench:          64.64 ns/iter (+/- 0.75) = 109218 MB/s\ntest ascii::long::is_ascii_graphic                                 ... bench:          64.57 ns/iter (+/- 0.54) = 109218 MB/s\ntest ascii::long::is_ascii_hexdigit                                ... bench:          64.76 ns/iter (+/- 0.73) = 109218 MB/s\ntest ascii::long::is_ascii_lowercase                               ... bench:          63.00 ns/iter (+/- 0.93) = 112741 MB/s\ntest ascii::long::is_ascii_punctuation                             ... bench:          64.86 ns/iter (+/- 0.84) = 109218 MB/s\ntest ascii::long::is_ascii_uppercase                               ... bench:          65.45 ns/iter (+/- 1.05) = 107538 MB/s\ntest ascii::long::is_ascii_whitespace                              ... bench:          64.73 ns/iter (+/- 0.97) = 109218 MB/s\ntest ascii::medium::case00_alloc_only                              ... bench:           5.97 ns/iter (+/- 0.11) = 6400 MB/s\ntest ascii::medium::case01_black_box_read_each_byte                ... bench:          13.36 ns/iter (+/- 0.57) = 2461 MB/s\ntest ascii::medium::case02_lookup_table                            ... bench:          13.63 ns/iter (+/- 0.36) = 2461 MB/s\ntest ascii::medium::case03_branch_and_subtract                     ... bench:           6.30 ns/iter (+/- 0.09) = 5333 MB/s\ntest ascii::medium::case04_branch_and_mask                         ... bench:           6.54 ns/iter (+/- 0.14) = 5333 MB/s\ntest ascii::medium::case05_branchless                              ... bench:           6.41 ns/iter (+/- 0.12) = 5333 MB/s\ntest ascii::medium::case06_libcore                                 ... bench:           6.34 ns/iter (+/- 0.12) = 5333 MB/s\ntest ascii::medium::case07_fake_simd_u32                           ... bench:           7.50 ns/iter (+/- 0.09) = 4571 MB/s\ntest ascii::medium::case08_fake_simd_u64                           ... bench:           7.57 ns/iter (+/- 0.09) = 4571 MB/s\ntest ascii::medium::case09_mask_mult_bool_branchy_lookup_table     ... bench:          21.81 ns/iter (+/- 0.38) = 1523 MB/s\ntest ascii::medium::case10_mask_mult_bool_lookup_table             ... bench:          19.45 ns/iter (+/- 0.52) = 1684 MB/s\ntest ascii::medium::case11_mask_mult_bool_match_range              ... bench:           6.34 ns/iter (+/- 0.18) = 5333 MB/s\ntest ascii::medium::case12_mask_shifted_bool_match_range           ... bench:           6.35 ns/iter (+/- 0.13) = 5333 MB/s\ntest ascii::medium::case13_subtract_shifted_bool_match_range       ... bench:           6.32 ns/iter (+/- 0.16) = 5333 MB/s\ntest ascii::medium::case14_subtract_multiplied_bool_match_range    ... bench:           6.34 ns/iter (+/- 0.15) = 5333 MB/s\ntest ascii::medium::is_ascii                                       ... bench:           5.99 ns/iter (+/- 0.12) = 6400 MB/s\ntest ascii::medium::is_ascii_alphabetic                            ... bench:           7.29 ns/iter (+/- 0.18) = 4571 MB/s\ntest ascii::medium::is_ascii_alphanumeric                          ... bench:           7.82 ns/iter (+/- 0.39) = 4571 MB/s\ntest ascii::medium::is_ascii_control                               ... bench:           6.38 ns/iter (+/- 0.23) = 5333 MB/s\ntest ascii::medium::is_ascii_digit                                 ... bench:           6.30 ns/iter (+/- 0.57) = 5333 MB/s\ntest ascii::medium::is_ascii_graphic                               ... bench:           7.69 ns/iter (+/- 0.27) = 4571 MB/s\ntest ascii::medium::is_ascii_hexdigit                              ... bench:          12.09 ns/iter (+/- 10.58) = 2666 MB/s\ntest ascii::medium::is_ascii_lowercase                             ... bench:           6.19 ns/iter (+/- 0.35) = 5333 MB/s\ntest ascii::medium::is_ascii_punctuation                           ... bench:           6.98 ns/iter (+/- 0.11) = 5333 MB/s\ntest ascii::medium::is_ascii_uppercase                             ... bench:           6.38 ns/iter (+/- 0.28) = 5333 MB/s\ntest ascii::medium::is_ascii_whitespace                            ... bench:           6.00 ns/iter (+/- 0.21) = 5333 MB/s\ntest ascii::short::case00_alloc_only                               ... bench:           6.14 ns/iter (+/- 0.28) = 1166 MB/s\ntest ascii::short::case01_black_box_read_each_byte                 ... bench:           6.36 ns/iter (+/- 0.54) = 1166 MB/s\ntest ascii::short::case02_lookup_table                             ... bench:           6.11 ns/iter (+/- 0.28) = 1166 MB/s\ntest ascii::short::case03_branch_and_subtract                      ... bench:           6.10 ns/iter (+/- 0.28) = 1166 MB/s\ntest ascii::short::case04_branch_and_mask                          ... bench:           6.23 ns/iter (+/- 0.19) = 1166 MB/s\ntest ascii::short::case05_branchless                               ... bench:           6.20 ns/iter (+/- 0.27) = 1166 MB/s\ntest ascii::short::case06_libcore                                  ... bench:           6.20 ns/iter (+/- 0.25) = 1166 MB/s\ntest ascii::short::case07_fake_simd_u32                            ... bench:           7.48 ns/iter (+/- 0.17) = 1000 MB/s\ntest ascii::short::case08_fake_simd_u64                            ... bench:           8.21 ns/iter (+/- 0.10) = 875 MB/s\ntest ascii::short::case09_mask_mult_bool_branchy_lookup_table      ... bench:           6.16 ns/iter (+/- 0.26) = 1166 MB/s\ntest ascii::short::case10_mask_mult_bool_lookup_table              ... bench:           6.15 ns/iter (+/- 0.21) = 1166 MB/s\ntest ascii::short::case11_mask_mult_bool_match_range               ... bench:           6.16 ns/iter (+/- 0.20) = 1166 MB/s\ntest ascii::short::case12_mask_shifted_bool_match_range            ... bench:           6.16 ns/iter (+/- 0.30) = 1166 MB/s\ntest ascii::short::case13_subtract_shifted_bool_match_range        ... bench:           6.17 ns/iter (+/- 0.21) = 1166 MB/s\ntest ascii::short::case14_subtract_multiplied_bool_match_range     ... bench:           6.19 ns/iter (+/- 0.31) = 1166 MB/s\ntest ascii::short::is_ascii                                        ... bench:           6.30 ns/iter (+/- 0.13) = 1166 MB/s\ntest ascii::short::is_ascii_alphabetic                             ... bench:           6.35 ns/iter (+/- 0.32) = 1166 MB/s\ntest ascii::short::is_ascii_alphanumeric                           ... bench:           6.25 ns/iter (+/- 0.07) = 1166 MB/s\ntest ascii::short::is_ascii_control                                ... bench:           6.32 ns/iter (+/- 0.24) = 1166 MB/s\ntest ascii::short::is_ascii_digit                                  ... bench:           6.29 ns/iter (+/- 0.28) = 1166 MB/s\ntest ascii::short::is_ascii_graphic                                ... bench:           6.33 ns/iter (+/- 0.39) = 1166 MB/s\ntest ascii::short::is_ascii_hexdigit                               ... bench:           6.36 ns/iter (+/- 0.24) = 1166 MB/s\ntest ascii::short::is_ascii_lowercase                              ... bench:           6.26 ns/iter (+/- 0.21) = 1166 MB/s\ntest ascii::short::is_ascii_punctuation                            ... bench:           7.14 ns/iter (+/- 0.27) = 1000 MB/s\ntest ascii::short::is_ascii_uppercase                              ... bench:           6.26 ns/iter (+/- 0.11) = 1166 MB/s\ntest ascii::short::is_ascii_whitespace                             ... bench:           6.33 ns/iter (+/- 0.21) = 1166 MB/s\ntest char::methods::bench_ascii_char_to_lowercase                  ... bench:      11,312.93 ns/iter (+/- 150.81)\ntest char::methods::bench_ascii_char_to_uppercase                  ... bench:      13,298.69 ns/iter (+/- 217.22)\ntest char::methods::bench_ascii_mix_to_lowercase                   ... bench:      31,329.65 ns/iter (+/- 429.82)\ntest char::methods::bench_ascii_mix_to_uppercase                   ... bench:      31,695.76 ns/iter (+/- 470.68)\ntest char::methods::bench_non_ascii_char_to_lowercase              ... bench:      51,472.71 ns/iter (+/- 512.91)\ntest char::methods::bench_non_ascii_char_to_uppercase              ... bench:      52,540.23 ns/iter (+/- 593.48)\ntest char::methods::bench_to_ascii_lowercase                       ... bench:       5,079.62 ns/iter (+/- 77.97)\ntest char::methods::bench_to_ascii_uppercase                       ... bench:       5,073.40 ns/iter (+/- 51.57)\ntest char::methods::bench_to_digit_radix_10                        ... bench:       3,359.35 ns/iter (+/- 22.00)\ntest char::methods::bench_to_digit_radix_16                        ... bench:       9,085.89 ns/iter (+/- 229.68)\ntest char::methods::bench_to_digit_radix_2                         ... bench:       3,396.54 ns/iter (+/- 141.49)\ntest char::methods::bench_to_digit_radix_36                        ... bench:      13,703.55 ns/iter (+/- 315.41)\ntest char::methods::bench_to_digit_radix_var                       ... bench:      16,752.42 ns/iter (+/- 101.78)\ntest fmt::write_str_macro1                                         ... bench:       7,760.55 ns/iter (+/- 137.81)\ntest fmt::write_str_macro2                                         ... bench:       7,723.07 ns/iter (+/- 125.74)\ntest fmt::write_str_macro_debug                                    ... bench:     117,978.57 ns/iter (+/- 5,630.22)\ntest fmt::write_str_macro_debug_ascii                              ... bench:      14,746.18 ns/iter (+/- 298.78)\ntest fmt::write_str_ref                                            ... bench:       1,715.02 ns/iter (+/- 14.23)\ntest fmt::write_str_value                                          ... bench:       1,706.59 ns/iter (+/- 19.54)\ntest fmt::write_u128_max                                           ... bench:          33.66 ns/iter (+/- 1.14)\ntest fmt::write_u128_min                                           ... bench:           6.15 ns/iter (+/- 0.14)\ntest fmt::write_u64_max                                            ... bench:          23.19 ns/iter (+/- 0.68)\ntest fmt::write_u64_min                                            ... bench:           6.07 ns/iter (+/- 0.19)\ntest fmt::write_vec_macro1                                         ... bench:       9,109.33 ns/iter (+/- 179.80)\ntest fmt::write_vec_macro2                                         ... bench:       9,046.36 ns/iter (+/- 251.54)\ntest fmt::write_vec_macro_debug                                    ... bench:     122,249.35 ns/iter (+/- 9,406.43)\ntest fmt::write_vec_ref                                            ... bench:       1,708.98 ns/iter (+/- 25.06)\ntest fmt::write_vec_value                                          ... bench:       1,715.64 ns/iter (+/- 19.03)\ntest hash::sip::bench_bytes_4                                      ... bench:           6.25 ns/iter (+/- 0.24) = 666 MB/s\ntest hash::sip::bench_bytes_7                                      ... bench:           7.00 ns/iter (+/- 0.45) = 1000 MB/s\ntest hash::sip::bench_bytes_8                                      ... bench:           8.21 ns/iter (+/- 0.17) = 1000 MB/s\ntest hash::sip::bench_bytes_a_16                                   ... bench:          10.43 ns/iter (+/- 0.59) = 1600 MB/s\ntest hash::sip::bench_bytes_b_32                                   ... bench:          14.57 ns/iter (+/- 0.27) = 2285 MB/s\ntest hash::sip::bench_bytes_c_128                                  ... bench:          41.39 ns/iter (+/- 0.47) = 3121 MB/s\ntest hash::sip::bench_long_str                                     ... bench:         130.21 ns/iter (+/- 2.86)\ntest hash::sip::bench_str_of_8_bytes                               ... bench:           9.04 ns/iter (+/- 0.25)\ntest hash::sip::bench_str_over_8_bytes                             ... bench:           9.54 ns/iter (+/- 0.24)\ntest hash::sip::bench_str_under_8_bytes                            ... bench:           8.26 ns/iter (+/- 0.40)\ntest hash::sip::bench_u32                                          ... bench:           6.46 ns/iter (+/- 0.20) = 1333 MB/s\ntest hash::sip::bench_u32_keyed                                    ... bench:           6.79 ns/iter (+/- 0.09) = 1333 MB/s\ntest hash::sip::bench_u64                                          ... bench:           8.31 ns/iter (+/- 0.13) = 1000 MB/s\ntest iter::bench_chain_partial_cmp                                 ... bench:      75,358.32 ns/iter (+/- 945.71)\ntest iter::bench_cycle_skip_take_ref_sum                           ... bench:     441,084.40 ns/iter (+/- 3,223.93)\ntest iter::bench_cycle_skip_take_sum                               ... bench:     442,516.90 ns/iter (+/- 10,864.75)\ntest iter::bench_cycle_take_ref_sum                                ... bench:     459,411.00 ns/iter (+/- 1,937.65)\ntest iter::bench_cycle_take_skip_ref_sum                           ... bench:     394,099.05 ns/iter (+/- 5,505.22)\ntest iter::bench_cycle_take_skip_sum                               ... bench:     394,426.60 ns/iter (+/- 4,772.96)\ntest iter::bench_cycle_take_sum                                    ... bench:     462,110.35 ns/iter (+/- 4,428.07)\ntest iter::bench_enumerate_chain_ref_sum                           ... bench:     593,977.66 ns/iter (+/- 62,323.53)\ntest iter::bench_enumerate_chain_sum                               ... bench:     570,116.11 ns/iter (+/- 47,921.10)\ntest iter::bench_enumerate_ref_sum                                 ... bench:     250,504.71 ns/iter (+/- 19,598.82)\ntest iter::bench_enumerate_sum                                     ... bench:     272,405.66 ns/iter (+/- 13,359.64)\ntest iter::bench_filter_chain_count                                ... bench:     637,202.90 ns/iter (+/- 62,404.36)\ntest iter::bench_filter_chain_ref_count                            ... bench:     576,151.97 ns/iter (+/- 3,457.31)\ntest iter::bench_filter_chain_ref_sum                              ... bench:     718,038.80 ns/iter (+/- 6,321.33)\ntest iter::bench_filter_chain_sum                                  ... bench:     721,293.40 ns/iter (+/- 40,739.17)\ntest iter::bench_filter_count                                      ... bench:     394,196.20 ns/iter (+/- 81,838.92)\ntest iter::bench_filter_map_chain_ref_sum                          ... bench:     580,798.83 ns/iter (+/- 8,252.68)\ntest iter::bench_filter_map_chain_sum                              ... bench:     583,301.61 ns/iter (+/- 8,745.36)\ntest iter::bench_filter_map_ref_sum                                ... bench:     286,916.30 ns/iter (+/- 2,482.73)\ntest iter::bench_filter_map_sum                                    ... bench:     248,622.46 ns/iter (+/- 18,576.61)\ntest iter::bench_filter_ref_count                                  ... bench:     397,686.20 ns/iter (+/- 61,700.12)\ntest iter::bench_filter_ref_sum                                    ... bench:     349,492.40 ns/iter (+/- 10,832.04)\ntest iter::bench_filter_sum                                        ... bench:     364,411.47 ns/iter (+/- 11,596.27)\ntest iter::bench_flat_map_chain_ref_sum                            ... bench:     429,838.50 ns/iter (+/- 3,338.18)\ntest iter::bench_flat_map_chain_sum                                ... bench:     431,041.90 ns/iter (+/- 4,604.68)\ntest iter::bench_flat_map_ref_sum                                  ... bench:     216,140.73 ns/iter (+/- 3,572.75)\ntest iter::bench_flat_map_sum                                      ... bench:     216,061.07 ns/iter (+/- 2,021.07)\ntest iter::bench_for_each_chain_fold                               ... bench:     428,566.92 ns/iter (+/- 3,233.42)\ntest iter::bench_for_each_chain_loop                               ... bench:     904,839.57 ns/iter (+/- 62,111.59)\ntest iter::bench_for_each_chain_ref_fold                           ... bench:     429,882.25 ns/iter (+/- 3,576.21)\ntest iter::bench_fuse_chain_ref_sum                                ... bench:     429,595.05 ns/iter (+/- 5,210.45)\ntest iter::bench_fuse_chain_sum                                    ... bench:     430,110.00 ns/iter (+/- 5,403.46)\ntest iter::bench_fuse_ref_sum                                      ... bench:     216,089.43 ns/iter (+/- 908.47)\ntest iter::bench_fuse_sum                                          ... bench:     215,783.17 ns/iter (+/- 10,697.27)\ntest iter::bench_inspect_chain_ref_sum                             ... bench:     429,876.25 ns/iter (+/- 3,871.20)\ntest iter::bench_inspect_chain_sum                                 ... bench:     429,833.85 ns/iter (+/- 7,311.01)\ntest iter::bench_inspect_ref_sum                                   ... bench:     215,576.30 ns/iter (+/- 6,548.63)\ntest iter::bench_inspect_sum                                       ... bench:     214,837.12 ns/iter (+/- 4,011.95)\ntest iter::bench_lt                                                ... bench:      27,593.14 ns/iter (+/- 45.65)\ntest iter::bench_max                                               ... bench:          90.10 ns/iter (+/- 3.40)\ntest iter::bench_max_by_key                                        ... bench:          93.99 ns/iter (+/- 2.55)\ntest iter::bench_max_by_key2                                       ... bench:         814.02 ns/iter (+/- 4.26)\ntest iter::bench_multiple_take                                     ... bench:          47.66 ns/iter (+/- 0.33)\ntest iter::bench_next_chunk_copied                                 ... bench:          24.40 ns/iter (+/- 0.23)\ntest iter::bench_next_chunk_filter_even                            ... bench:          22.85 ns/iter (+/- 2.58)\ntest iter::bench_next_chunk_filter_map_even                        ... bench:          24.98 ns/iter (+/- 0.16)\ntest iter::bench_next_chunk_filter_map_mostly_false                ... bench:         311.99 ns/iter (+/- 3.74)\ntest iter::bench_next_chunk_filter_map_predictably_true            ... bench:          17.50 ns/iter (+/- 0.11)\ntest iter::bench_next_chunk_filter_mostly_false                    ... bench:         284.02 ns/iter (+/- 7.02)\ntest iter::bench_next_chunk_filter_predictably_true                ... bench:          12.23 ns/iter (+/- 0.92)\ntest iter::bench_next_chunk_trusted_random_access                  ... bench:          24.30 ns/iter (+/- 0.20)\ntest iter::bench_partial_cmp                                       ... bench:      42,848.48 ns/iter (+/- 468.11)\ntest iter::bench_peekable_chain_ref_sum                            ... bench:     430,270.15 ns/iter (+/- 4,293.38)\ntest iter::bench_peekable_chain_sum                                ... bench:     429,414.50 ns/iter (+/- 3,485.86)\ntest iter::bench_peekable_ref_sum                                  ... bench:     215,085.42 ns/iter (+/- 2,301.43)\ntest iter::bench_peekable_sum                                      ... bench:     215,313.58 ns/iter (+/- 14,070.17)\ntest iter::bench_range_step_by_fold_u16                            ... bench:          44.92 ns/iter (+/- 0.63)\ntest iter::bench_range_step_by_fold_usize                          ... bench:         164.62 ns/iter (+/- 11.79)\ntest iter::bench_range_step_by_loop_u32                            ... bench:          82.63 ns/iter (+/- 6.71)\ntest iter::bench_range_step_by_sum_reducible                       ... bench:           0.86 ns/iter (+/- 0.00)\ntest iter::bench_rposition                                         ... bench:          44.86 ns/iter (+/- 0.69)\ntest iter::bench_skip_chain_ref_sum                                ... bench:     429,816.15 ns/iter (+/- 4,754.12)\ntest iter::bench_skip_chain_sum                                    ... bench:     427,295.94 ns/iter (+/- 1,078.28)\ntest iter::bench_skip_cycle_skip_zip_add_ref_sum                   ... bench:   1,859,368.10 ns/iter (+/- 11,614.42)\ntest iter::bench_skip_cycle_skip_zip_add_sum                       ... bench:   1,859,030.30 ns/iter (+/- 5,697.08)\ntest iter::bench_skip_ref_sum                                      ... bench:     214,781.42 ns/iter (+/- 1,842.57)\ntest iter::bench_skip_sum                                          ... bench:     213,771.42 ns/iter (+/- 1,177.65)\ntest iter::bench_skip_then_zip                                     ... bench:          37.93 ns/iter (+/- 0.91)\ntest iter::bench_skip_trusted_random_access                        ... bench:       2,753.41 ns/iter (+/- 8.62)\ntest iter::bench_skip_while                                        ... bench:           0.21 ns/iter (+/- 0.00)\ntest iter::bench_skip_while_chain_ref_sum                          ... bench:     429,969.05 ns/iter (+/- 20,225.97)\ntest iter::bench_skip_while_chain_sum                              ... bench:     441,990.30 ns/iter (+/- 32,521.10)\ntest iter::bench_skip_while_ref_sum                                ... bench:     214,333.90 ns/iter (+/- 2,353.29)\ntest iter::bench_skip_while_sum                                    ... bench:     215,689.27 ns/iter (+/- 1,487.38)\ntest iter::bench_take_while_chain_ref_sum                          ... bench:     239,918.93 ns/iter (+/- 2,637.31)\ntest iter::bench_take_while_chain_sum                              ... bench:     240,065.33 ns/iter (+/- 4,402.37)\ntest iter::bench_trusted_random_access_adapters                    ... bench:      21,806.52 ns/iter (+/- 531.40)\ntest iter::bench_zip_add                                           ... bench:       1,244.25 ns/iter (+/- 18.58)\ntest iter::bench_zip_copy                                          ... bench:         108.87 ns/iter (+/- 0.77)\ntest iter::bench_zip_then_skip                                     ... bench:          36.69 ns/iter (+/- 0.42)\ntest net::addr_parser::bench_parse_ipaddr_v4                       ... bench:           9.01 ns/iter (+/- 0.20)\ntest net::addr_parser::bench_parse_ipaddr_v6_compress              ... bench:          35.41 ns/iter (+/- 0.98)\ntest net::addr_parser::bench_parse_ipaddr_v6_full                  ... bench:          38.31 ns/iter (+/- 1.14)\ntest net::addr_parser::bench_parse_ipaddr_v6_v4                    ... bench:          33.94 ns/iter (+/- 0.81)\ntest net::addr_parser::bench_parse_ipv4                            ... bench:           6.69 ns/iter (+/- 0.34)\ntest net::addr_parser::bench_parse_ipv6_compress                   ... bench:          31.56 ns/iter (+/- 0.71)\ntest net::addr_parser::bench_parse_ipv6_full                       ... bench:          34.31 ns/iter (+/- 0.58)\ntest net::addr_parser::bench_parse_ipv6_v4                         ... bench:          29.46 ns/iter (+/- 0.78)\ntest net::addr_parser::bench_parse_socket_v4                       ... bench:          11.10 ns/iter (+/- 0.70)\ntest net::addr_parser::bench_parse_socket_v6                       ... bench:          39.74 ns/iter (+/- 1.12)\ntest net::addr_parser::bench_parse_socket_v6_scope_id              ... bench:          42.36 ns/iter (+/- 1.19)\ntest net::addr_parser::bench_parse_socketaddr_v4                   ... bench:          12.38 ns/iter (+/- 0.29)\ntest net::addr_parser::bench_parse_socketaddr_v6                   ... bench:          44.13 ns/iter (+/- 1.15)\ntest num::bench_i16_from_str                                       ... bench:      21,111.16 ns/iter (+/- 676.96)\ntest num::bench_i16_from_str_radix_10                              ... bench:      18,477.67 ns/iter (+/- 604.00)\ntest num::bench_i16_from_str_radix_16                              ... bench:      23,309.26 ns/iter (+/- 533.38)\ntest num::bench_i16_from_str_radix_2                               ... bench:      15,163.34 ns/iter (+/- 245.56)\ntest num::bench_i16_from_str_radix_36                              ... bench:      22,232.01 ns/iter (+/- 742.67)\ntest num::bench_i32_from_str                                       ... bench:      23,131.27 ns/iter (+/- 1,353.14)\ntest num::bench_i32_from_str_radix_10                              ... bench:      19,787.94 ns/iter (+/- 434.85)\ntest num::bench_i32_from_str_radix_16                              ... bench:      23,074.23 ns/iter (+/- 766.94)\ntest num::bench_i32_from_str_radix_2                               ... bench:      14,665.28 ns/iter (+/- 466.48)\ntest num::bench_i32_from_str_radix_36                              ... bench:      27,124.01 ns/iter (+/- 677.99)\ntest num::bench_i64_from_str                                       ... bench:      26,645.19 ns/iter (+/- 1,194.19)\ntest num::bench_i64_from_str_radix_10                              ... bench:      24,562.53 ns/iter (+/- 982.87)\ntest num::bench_i64_from_str_radix_16                              ... bench:      24,838.69 ns/iter (+/- 837.24)\ntest num::bench_i64_from_str_radix_2                               ... bench:      16,406.11 ns/iter (+/- 252.59)\ntest num::bench_i64_from_str_radix_36                              ... bench:      25,029.35 ns/iter (+/- 568.17)\ntest num::bench_i8_from_str                                        ... bench:      21,815.16 ns/iter (+/- 494.27)\ntest num::bench_i8_from_str_radix_10                               ... bench:      20,844.14 ns/iter (+/- 680.15)\ntest num::bench_i8_from_str_radix_16                               ... bench:      20,244.94 ns/iter (+/- 696.42)\ntest num::bench_i8_from_str_radix_2                                ... bench:      15,339.66 ns/iter (+/- 126.65)\ntest num::bench_i8_from_str_radix_36                               ... bench:      21,406.20 ns/iter (+/- 421.30)\ntest num::bench_u16_from_str                                       ... bench:      17,256.52 ns/iter (+/- 826.37)\ntest num::bench_u16_from_str_radix_10                              ... bench:      20,297.73 ns/iter (+/- 456.31)\ntest num::bench_u16_from_str_radix_16                              ... bench:      22,513.93 ns/iter (+/- 337.28)\ntest num::bench_u16_from_str_radix_2                               ... bench:      15,057.38 ns/iter (+/- 195.89)\ntest num::bench_u16_from_str_radix_36                              ... bench:      21,748.76 ns/iter (+/- 677.24)\ntest num::bench_u32_from_str                                       ... bench:      14,993.70 ns/iter (+/- 891.26)\ntest num::bench_u32_from_str_radix_10                              ... bench:      18,472.33 ns/iter (+/- 538.09)\ntest num::bench_u32_from_str_radix_16                              ... bench:      21,865.45 ns/iter (+/- 452.24)\ntest num::bench_u32_from_str_radix_2                               ... bench:      14,039.62 ns/iter (+/- 854.46)\ntest num::bench_u32_from_str_radix_36                              ... bench:      24,101.02 ns/iter (+/- 369.01)\ntest num::bench_u64_from_str                                       ... bench:      17,091.90 ns/iter (+/- 485.40)\ntest num::bench_u64_from_str_radix_10                              ... bench:      20,431.57 ns/iter (+/- 264.97)\ntest num::bench_u64_from_str_radix_16                              ... bench:      28,248.75 ns/iter (+/- 1,985.68)\ntest num::bench_u64_from_str_radix_2                               ... bench:      14,691.18 ns/iter (+/- 241.42)\ntest num::bench_u64_from_str_radix_36                              ... bench:      28,121.56 ns/iter (+/- 512.70)\ntest num::bench_u8_from_str                                        ... bench:      16,479.08 ns/iter (+/- 503.56)\ntest num::bench_u8_from_str_radix_10                               ... bench:      15,622.71 ns/iter (+/- 820.28)\ntest num::bench_u8_from_str_radix_16                               ... bench:      16,376.51 ns/iter (+/- 529.44)\ntest num::bench_u8_from_str_radix_2                                ... bench:      11,445.08 ns/iter (+/- 367.30)\ntest num::bench_u8_from_str_radix_36                               ... bench:      15,950.49 ns/iter (+/- 202.81)\ntest num::dec2flt::bench_0                                         ... bench:           7.91 ns/iter (+/- 0.02)\ntest num::dec2flt::bench_1e150                                     ... bench:          11.50 ns/iter (+/- 0.40)\ntest num::dec2flt::bench_42                                        ... bench:           7.05 ns/iter (+/- 0.08)\ntest num::dec2flt::bench_huge_int                                  ... bench:          33.39 ns/iter (+/- 0.47)\ntest num::dec2flt::bench_long_decimal_and_exp                      ... bench:          38.56 ns/iter (+/- 0.82)\ntest num::dec2flt::bench_max                                       ... bench:          13.99 ns/iter (+/- 0.41)\ntest num::dec2flt::bench_min_normal                                ... bench:          14.18 ns/iter (+/- 0.45)\ntest num::dec2flt::bench_min_subnormal                             ... bench:          11.24 ns/iter (+/- 0.66)\ntest num::dec2flt::bench_pi_long                                   ... bench:          34.49 ns/iter (+/- 0.59)\ntest num::dec2flt::bench_pi_short                                  ... bench:          10.37 ns/iter (+/- 0.32)\ntest num::dec2flt::bench_short_decimal                             ... bench:           9.95 ns/iter (+/- 0.32)\ntest num::flt2dec::bench_big_shortest                              ... bench:          77.37 ns/iter (+/- 1.35)\ntest num::flt2dec::bench_small_shortest                            ... bench:          58.95 ns/iter (+/- 0.99)\ntest num::flt2dec::strategy::dragon::bench_big_exact_12            ... bench:       1,260.16 ns/iter (+/- 9.04)\ntest num::flt2dec::strategy::dragon::bench_big_exact_3             ... bench:         593.45 ns/iter (+/- 7.88)\ntest num::flt2dec::strategy::dragon::bench_big_exact_inf           ... bench:      25,551.41 ns/iter (+/- 70.04)\ntest num::flt2dec::strategy::dragon::bench_big_shortest            ... bench:       2,385.55 ns/iter (+/- 7.78)\ntest num::flt2dec::strategy::dragon::bench_small_exact_12          ... bench:         120.27 ns/iter (+/- 2.43)\ntest num::flt2dec::strategy::dragon::bench_small_exact_3           ... bench:          59.93 ns/iter (+/- 1.66)\ntest num::flt2dec::strategy::dragon::bench_small_exact_inf         ... bench:         701.37 ns/iter (+/- 4.58)\ntest num::flt2dec::strategy::dragon::bench_small_shortest          ... bench:         137.65 ns/iter (+/- 0.49)\ntest num::flt2dec::strategy::grisu::bench_big_exact_12             ... bench:          31.61 ns/iter (+/- 0.53)\ntest num::flt2dec::strategy::grisu::bench_big_exact_3              ... bench:          18.22 ns/iter (+/- 0.14)\ntest num::flt2dec::strategy::grisu::bench_big_exact_inf            ... bench:      25,587.51 ns/iter (+/- 88.22)\ntest num::flt2dec::strategy::grisu::bench_big_shortest             ... bench:          38.53 ns/iter (+/- 0.46)\ntest num::flt2dec::strategy::grisu::bench_halfway_point_exact_inf  ... bench:         348.08 ns/iter (+/- 1.03)\ntest num::flt2dec::strategy::grisu::bench_one_exact_inf            ... bench:         348.16 ns/iter (+/- 1.32)\ntest num::flt2dec::strategy::grisu::bench_small_exact_12           ... bench:          25.86 ns/iter (+/- 0.42)\ntest num::flt2dec::strategy::grisu::bench_small_exact_3            ... bench:          16.31 ns/iter (+/- 0.26)\ntest num::flt2dec::strategy::grisu::bench_small_exact_inf          ... bench:         736.10 ns/iter (+/- 3.93)\ntest num::flt2dec::strategy::grisu::bench_small_shortest           ... bench:          25.17 ns/iter (+/- 0.92)\ntest num::flt2dec::strategy::grisu::bench_trailing_zero_exact_inf  ... bench:         357.39 ns/iter (+/- 0.85)\ntest num::int_log::u128_log10_predictable                          ... bench:       6,922.88 ns/iter (+/- 142.72)\ntest num::int_log::u128_log10_random                               ... bench:         828.02 ns/iter (+/- 15.00)\ntest num::int_log::u128_log10_random_small                         ... bench:         671.04 ns/iter (+/- 10.00)\ntest num::int_log::u128_log_geometric                              ... bench:      12,698.12 ns/iter (+/- 201.04)\ntest num::int_log::u128_log_random                                 ... bench:     499,418.88 ns/iter (+/- 5,324.36)\ntest num::int_log::u128_log_random_small                           ... bench:     224,372.25 ns/iter (+/- 6,173.90)\ntest num::int_log::u16_log10_predictable                           ... bench:         147.70 ns/iter (+/- 6.17)\ntest num::int_log::u16_log10_random                                ... bench:         149.45 ns/iter (+/- 2.22)\ntest num::int_log::u16_log10_random_small                          ... bench:         149.62 ns/iter (+/- 1.97)\ntest num::int_log::u16_log_geometric                               ... bench:         182.89 ns/iter (+/- 9.83)\ntest num::int_log::u16_log_random                                  ... bench:     112,988.73 ns/iter (+/- 1,784.03)\ntest num::int_log::u16_log_random_small                            ... bench:      79,234.58 ns/iter (+/- 1,033.69)\ntest num::int_log::u32_log10_predictable                           ... bench:         408.45 ns/iter (+/- 8.17)\ntest num::int_log::u32_log10_random                                ... bench:         258.00 ns/iter (+/- 3.02)\ntest num::int_log::u32_log10_random_small                          ... bench:         258.08 ns/iter (+/- 2.73)\ntest num::int_log::u32_log_geometric                               ... bench:         432.60 ns/iter (+/- 6.50)\ntest num::int_log::u32_log_random                                  ... bench:     153,163.48 ns/iter (+/- 1,904.44)\ntest num::int_log::u32_log_random_small                            ... bench:      62,923.86 ns/iter (+/- 1,176.30)\ntest num::int_log::u64_log10_predictable                           ... bench:       1,199.33 ns/iter (+/- 18.72)\ntest num::int_log::u64_log10_random                                ... bench:         294.53 ns/iter (+/- 4.26)\ntest num::int_log::u64_log10_random_small                          ... bench:         264.75 ns/iter (+/- 5.24)\ntest num::int_log::u64_log_geometric                               ... bench:       2,024.27 ns/iter (+/- 33.59)\ntest num::int_log::u64_log_random                                  ... bench:     250,562.71 ns/iter (+/- 3,378.39)\ntest num::int_log::u64_log_random_small                            ... bench:      70,755.16 ns/iter (+/- 3,202.19)\ntest num::int_log::u8_log10_predictable                            ... bench:          49.83 ns/iter (+/- 1.97)\ntest num::int_log::u8_log10_random                                 ... bench:         117.41 ns/iter (+/- 2.21)\ntest num::int_log::u8_log10_random_small                           ... bench:         117.29 ns/iter (+/- 1.73)\ntest num::int_log::u8_log_geometric                                ... bench:          53.57 ns/iter (+/- 2.81)\ntest num::int_log::u8_log_random                                   ... bench:      59,928.51 ns/iter (+/- 2,173.04)\ntest num::int_log::u8_log_random_small                             ... bench:      59,857.68 ns/iter (+/- 1,917.00)\ntest num::int_pow::checked_pow_variable                            ... bench:       1,584.00 ns/iter (+/- 13.01)\ntest num::int_pow::overflowing_pow_variable                        ... bench:       1,768.47 ns/iter (+/- 67.95)\ntest num::int_pow::pow_m7                                          ... bench:         515.48 ns/iter (+/- 3.94)\ntest num::int_pow::pow_m8                                          ... bench:         514.90 ns/iter (+/- 2.93)\ntest num::int_pow::pow_variable                                    ... bench:         555.18 ns/iter (+/- 4.41)\ntest num::int_pow::saturating_pow_variable                         ... bench:       1,602.17 ns/iter (+/- 13.20)\ntest num::int_pow::wrapping_pow_variable                           ... bench:         554.27 ns/iter (+/- 6.85)\ntest ops::alloc_obj_with_dtor                                      ... bench:           0.22 ns/iter (+/- 0.00)\ntest pattern::ends_with_char                                       ... bench:         337.72 ns/iter (+/- 4.86)\ntest pattern::ends_with_str                                        ... bench:         335.77 ns/iter (+/- 2.37)\ntest pattern::starts_with_char                                     ... bench:         340.58 ns/iter (+/- 3.58)\ntest pattern::starts_with_str                                      ... bench:         340.41 ns/iter (+/- 5.11)\ntest slice::binary_search_l1                                       ... bench:           8.13 ns/iter (+/- 0.05)\ntest slice::binary_search_l1_with_dups                             ... bench:           8.19 ns/iter (+/- 0.17)\ntest slice::binary_search_l1_worst_case                            ... bench:           5.86 ns/iter (+/- 0.14)\ntest slice::binary_search_l2                                       ... bench:          13.60 ns/iter (+/- 0.12)\ntest slice::binary_search_l2_with_dups                             ... bench:          13.67 ns/iter (+/- 0.19)\ntest slice::binary_search_l2_worst_case                            ... bench:           9.10 ns/iter (+/- 0.05)\ntest slice::binary_search_l3                                       ... bench:          46.48 ns/iter (+/- 0.86)\ntest slice::binary_search_l3_with_dups                             ... bench:          46.83 ns/iter (+/- 2.65)\ntest slice::binary_search_l3_worst_case                            ... bench:          15.00 ns/iter (+/- 0.07)\ntest slice::fill_byte_sized                                        ... bench:           5.98 ns/iter (+/- 0.02)\ntest slice::fold_to_last                                           ... bench:           0.43 ns/iter (+/- 0.06)\ntest slice::rotate_16_usize_4                                      ... bench:         236.62 ns/iter (+/- 4.25)\ntest slice::rotate_16_usize_5                                      ... bench:         276.86 ns/iter (+/- 6.65)\ntest slice::rotate_64_usize_4                                      ... bench:       2,284.30 ns/iter (+/- 16.19)\ntest slice::rotate_64_usize_5                                      ... bench:       4,797.20 ns/iter (+/- 95.77)\ntest slice::rotate_rgb                                             ... bench:         197.79 ns/iter (+/- 3.45)\ntest slice::rotate_u8                                              ... bench:         183.93 ns/iter (+/- 8.69)\ntest slice::rotate_usize                                           ... bench:         315.71 ns/iter (+/- 4.53)\ntest slice::swap_with_slice_4x_usize_30                            ... bench:         475.22 ns/iter (+/- 9.60)\ntest slice::swap_with_slice_4x_usize_3000                          ... bench:      77,052.84 ns/iter (+/- 805.76)\ntest slice::swap_with_slice_5x_usize_30                            ... bench:         714.18 ns/iter (+/- 9.50)\ntest slice::swap_with_slice_5x_usize_3000                          ... bench:     101,651.01 ns/iter (+/- 1,685.08)\ntest slice::swap_with_slice_rgb_30                                 ... bench:         156.55 ns/iter (+/- 3.06)\ntest slice::swap_with_slice_rgb_3000                               ... bench:       6,118.77 ns/iter (+/- 166.99)\ntest slice::swap_with_slice_u8_30                                  ... bench:         141.74 ns/iter (+/- 3.26)\ntest slice::swap_with_slice_u8_3000                                ... bench:       2,427.10 ns/iter (+/- 20.27)\ntest slice::swap_with_slice_usize_30                               ... bench:         183.12 ns/iter (+/- 2.09)\ntest slice::swap_with_slice_usize_3000                             ... bench:      14,362.99 ns/iter (+/- 424.28)\ntest str::char_count::emoji_huge::case00_libcore                   ... bench:      11,518.18 ns/iter (+/- 146.16) = 31472 MB/s\ntest str::char_count::emoji_huge::case01_filter_count_cont_bytes   ... bench:      99,862.34 ns/iter (+/- 982.74) = 3629 MB/s\ntest str::char_count::emoji_huge::case02_iter_increment            ... bench:     141,290.90 ns/iter (+/- 1,029.58) = 2565 MB/s\ntest str::char_count::emoji_huge::case03_manual_char_len           ... bench:     161,385.16 ns/iter (+/- 1,278.57) = 2246 MB/s\ntest str::char_count::emoji_large::case00_libcore                  ... bench:         179.79 ns/iter (+/- 0.50) = 31642 MB/s\ntest str::char_count::emoji_large::case01_filter_count_cont_bytes  ... bench:       1,559.99 ns/iter (+/- 19.27) = 3633 MB/s\ntest str::char_count::emoji_large::case02_iter_increment           ... bench:       2,210.17 ns/iter (+/- 15.30) = 2562 MB/s\ntest str::char_count::emoji_large::case03_manual_char_len          ... bench:       2,527.05 ns/iter (+/- 33.40) = 2241 MB/s\ntest str::char_count::emoji_medium::case00_libcore                 ... bench:          25.21 ns/iter (+/- 0.33) = 28320 MB/s\ntest str::char_count::emoji_medium::case01_filter_count_cont_bytes ... bench:         194.75 ns/iter (+/- 2.45) = 3649 MB/s\ntest str::char_count::emoji_medium::case02_iter_increment          ... bench:         281.13 ns/iter (+/- 2.44) = 2519 MB/s\ntest str::char_count::emoji_medium::case03_manual_char_len         ... bench:         320.95 ns/iter (+/- 2.71) = 2212 MB/s\ntest str::char_count::emoji_small::case00_libcore                  ... bench:           6.47 ns/iter (+/- 0.05) = 11333 MB/s\ntest str::char_count::emoji_small::case01_filter_count_cont_bytes  ... bench:          19.10 ns/iter (+/- 0.25) = 3578 MB/s\ntest str::char_count::emoji_small::case02_iter_increment           ... bench:          11.91 ns/iter (+/- 0.10) = 6181 MB/s\ntest str::char_count::emoji_small::case03_manual_char_len          ... bench:          14.19 ns/iter (+/- 0.17) = 4857 MB/s\ntest str::char_count::emoji_tiny::case00_libcore                   ... bench:           2.61 ns/iter (+/- 0.02) = 4000 MB/s\ntest str::char_count::emoji_tiny::case01_filter_count_cont_bytes   ... bench:           2.53 ns/iter (+/- 0.06) = 4000 MB/s\ntest str::char_count::emoji_tiny::case02_iter_increment            ... bench:           1.19 ns/iter (+/- 0.01) = 8000 MB/s\ntest str::char_count::emoji_tiny::case03_manual_char_len           ... bench:           1.40 ns/iter (+/- 0.03) = 8000 MB/s\ntest str::char_count::en_huge::case00_libcore                      ... bench:      10,942.61 ns/iter (+/- 256.86) = 31491 MB/s\ntest str::char_count::en_huge::case01_filter_count_cont_bytes      ... bench:      95,034.78 ns/iter (+/- 1,130.73) = 3625 MB/s\ntest str::char_count::en_huge::case02_iter_increment               ... bench:      84,219.55 ns/iter (+/- 756.14) = 4091 MB/s\ntest str::char_count::en_huge::case03_manual_char_len              ... bench:      85,664.74 ns/iter (+/- 225.80) = 4022 MB/s\ntest str::char_count::en_large::case00_libcore                     ... bench:         171.04 ns/iter (+/- 0.73) = 31485 MB/s\ntest str::char_count::en_large::case01_filter_count_cont_bytes     ... bench:       1,483.58 ns/iter (+/- 16.87) = 3630 MB/s\ntest str::char_count::en_large::case02_iter_increment              ... bench:       1,319.36 ns/iter (+/- 14.10) = 4081 MB/s\ntest str::char_count::en_large::case03_manual_char_len             ... bench:       1,339.91 ns/iter (+/- 10.84) = 4020 MB/s\ntest str::char_count::en_medium::case00_libcore                    ... bench:          22.41 ns/iter (+/- 0.38) = 30590 MB/s\ntest str::char_count::en_medium::case01_filter_count_cont_bytes    ... bench:         185.68 ns/iter (+/- 1.60) = 3637 MB/s\ntest str::char_count::en_medium::case02_iter_increment             ... bench:         172.97 ns/iter (+/- 2.05) = 3912 MB/s\ntest str::char_count::en_medium::case03_manual_char_len            ... bench:         175.07 ns/iter (+/- 1.83) = 3845 MB/s\ntest str::char_count::en_small::case00_libcore                     ... bench:           4.94 ns/iter (+/- 0.05) = 8750 MB/s\ntest str::char_count::en_small::case01_filter_count_cont_bytes     ... bench:           9.28 ns/iter (+/- 0.12) = 3888 MB/s\ntest str::char_count::en_small::case02_iter_increment              ... bench:           8.71 ns/iter (+/- 0.14) = 4375 MB/s\ntest str::char_count::en_small::case03_manual_char_len             ... bench:           8.61 ns/iter (+/- 0.03) = 4375 MB/s\ntest str::char_count::en_tiny::case00_libcore                      ... bench:           2.61 ns/iter (+/- 0.06) = 4000 MB/s\ntest str::char_count::en_tiny::case01_filter_count_cont_bytes      ... bench:           2.53 ns/iter (+/- 0.09) = 4000 MB/s\ntest str::char_count::en_tiny::case02_iter_increment               ... bench:           1.92 ns/iter (+/- 0.00) = 8000 MB/s\ntest str::char_count::en_tiny::case03_manual_char_len              ... bench:           2.37 ns/iter (+/- 0.01) = 4000 MB/s\ntest str::char_count::ru_huge::case00_libcore                      ... bench:      10,312.60 ns/iter (+/- 137.30) = 31528 MB/s\ntest str::char_count::ru_huge::case01_filter_count_cont_bytes      ... bench:      89,441.26 ns/iter (+/- 1,173.73) = 3635 MB/s\ntest str::char_count::ru_huge::case02_iter_increment               ... bench:      92,129.03 ns/iter (+/- 918.08) = 3528 MB/s\ntest str::char_count::ru_huge::case03_manual_char_len              ... bench:      77,763.15 ns/iter (+/- 9,964.11) = 4180 MB/s\ntest str::char_count::ru_large::case00_libcore                     ... bench:         163.21 ns/iter (+/- 0.78) = 31165 MB/s\ntest str::char_count::ru_large::case01_filter_count_cont_bytes     ... bench:       1,397.99 ns/iter (+/- 12.38) = 3636 MB/s\ntest str::char_count::ru_large::case02_iter_increment              ... bench:       1,452.17 ns/iter (+/- 16.18) = 3498 MB/s\ntest str::char_count::ru_large::case03_manual_char_len             ... bench:       1,321.72 ns/iter (+/- 80.57) = 3845 MB/s\ntest str::char_count::ru_medium::case00_libcore                    ... bench:          23.38 ns/iter (+/- 0.12) = 27608 MB/s\ntest str::char_count::ru_medium::case01_filter_count_cont_bytes    ... bench:         177.77 ns/iter (+/- 2.31) = 3587 MB/s\ntest str::char_count::ru_medium::case02_iter_increment             ... bench:         182.11 ns/iter (+/- 2.29) = 3489 MB/s\ntest str::char_count::ru_medium::case03_manual_char_len            ... bench:         148.21 ns/iter (+/- 39.46) = 4290 MB/s\ntest str::char_count::ru_small::case00_libcore                     ... bench:           4.53 ns/iter (+/- 0.44) = 8000 MB/s\ntest str::char_count::ru_small::case01_filter_count_cont_bytes     ... bench:           9.10 ns/iter (+/- 0.11) = 3555 MB/s\ntest str::char_count::ru_small::case02_iter_increment              ... bench:           5.50 ns/iter (+/- 0.06) = 6400 MB/s\ntest str::char_count::ru_small::case03_manual_char_len             ... bench:           8.44 ns/iter (+/- 0.50) = 4000 MB/s\ntest str::char_count::ru_tiny::case00_libcore                      ... bench:           3.00 ns/iter (+/- 0.02) = 5000 MB/s\ntest str::char_count::ru_tiny::case01_filter_count_cont_bytes      ... bench:           2.79 ns/iter (+/- 0.01) = 5000 MB/s\ntest str::char_count::ru_tiny::case02_iter_increment               ... bench:           1.92 ns/iter (+/- 0.02) = 10000 MB/s\ntest str::char_count::ru_tiny::case03_manual_char_len              ... bench:           1.92 ns/iter (+/- 0.00) = 10000 MB/s\ntest str::char_count::zh_huge::case00_libcore                      ... bench:       9,556.05 ns/iter (+/- 115.93) = 31611 MB/s\ntest str::char_count::zh_huge::case01_filter_count_cont_bytes      ... bench:      83,202.73 ns/iter (+/- 882.70) = 3630 MB/s\ntest str::char_count::zh_huge::case02_iter_increment               ... bench:     148,973.90 ns/iter (+/- 1,331.11) = 2027 MB/s\ntest str::char_count::zh_huge::case03_manual_char_len              ... bench:     171,059.75 ns/iter (+/- 1,714.55) = 1765 MB/s\ntest str::char_count::zh_large::case00_libcore                     ... bench:         152.12 ns/iter (+/- 0.64) = 31052 MB/s\ntest str::char_count::zh_large::case01_filter_count_cont_bytes     ... bench:       1,300.31 ns/iter (+/- 14.73) = 3630 MB/s\ntest str::char_count::zh_large::case02_iter_increment              ... bench:       2,337.98 ns/iter (+/- 14.09) = 2019 MB/s\ntest str::char_count::zh_large::case03_manual_char_len             ... bench:       2,679.92 ns/iter (+/- 23.63) = 1761 MB/s\ntest str::char_count::zh_medium::case00_libcore                    ... bench:          22.54 ns/iter (+/- 0.53) = 26818 MB/s\ntest str::char_count::zh_medium::case01_filter_count_cont_bytes    ... bench:         165.78 ns/iter (+/- 2.52) = 3575 MB/s\ntest str::char_count::zh_medium::case02_iter_increment             ... bench:         270.46 ns/iter (+/- 2.36) = 2185 MB/s\ntest str::char_count::zh_medium::case03_manual_char_len            ... bench:         313.59 ns/iter (+/- 3.27) = 1884 MB/s\ntest str::char_count::zh_small::case00_libcore                     ... bench:           5.14 ns/iter (+/- 0.05) = 7200 MB/s\ntest str::char_count::zh_small::case01_filter_count_cont_bytes     ... bench:          10.21 ns/iter (+/- 0.11) = 3600 MB/s\ntest str::char_count::zh_small::case02_iter_increment              ... bench:           7.39 ns/iter (+/- 0.14) = 5142 MB/s\ntest str::char_count::zh_small::case03_manual_char_len             ... bench:           9.48 ns/iter (+/- 0.10) = 4000 MB/s\ntest str::char_count::zh_tiny::case00_libcore                      ... bench:           2.78 ns/iter (+/- 0.01) = 4500 MB/s\ntest str::char_count::zh_tiny::case01_filter_count_cont_bytes      ... bench:           2.65 ns/iter (+/- 0.04) = 4500 MB/s\ntest str::char_count::zh_tiny::case02_iter_increment               ... bench:           1.51 ns/iter (+/- 0.01) = 9000 MB/s\ntest str::char_count::zh_tiny::case03_manual_char_len              ... bench:           1.92 ns/iter (+/- 0.09) = 9000 MB/s\ntest str::debug::ascii_escapes                                     ... bench:         171.63 ns/iter (+/- 5.56)\ntest str::debug::ascii_only                                        ... bench:          94.82 ns/iter (+/- 2.21)\ntest str::debug::mixed                                             ... bench:         596.61 ns/iter (+/- 13.97)\ntest str::debug::mostly_unicode                                    ... bench:         529.78 ns/iter (+/- 12.88)\ntest str::debug::some_unicode                                      ... bench:         124.52 ns/iter (+/- 2.22)\ntest str::iter::chars_advance_by_0001                              ... bench:           0.37 ns/iter (+/- 0.04)\ntest str::iter::chars_advance_by_0010                              ... bench:           4.01 ns/iter (+/- 0.05)\ntest str::iter::chars_advance_by_1000                              ... bench:         245.26 ns/iter (+/- 11.04)\ntest str::str_validate_emoji                                       ... bench:       1,915.55 ns/iter (+/- 70.30)\ntest tuple::bench_tuple_comparison                                 ... bench:          10.96 ns/iter (+/- 0.38)\n"
        },
        {
          "name": "rust-toolchain.toml",
          "type": "blob",
          "size": 0.111328125,
          "content": "[toolchain]\nchannel = \"nightly\"\ncomponents = [\"rustfmt\", \"clippy\", \"rust-src\", \"rustc-dev\", \"llvm-tools-preview\"]\n"
        },
        {
          "name": "setup_rustc_fork.sh",
          "type": "blob",
          "size": 1.1728515625,
          "content": "#!/usr/bin/env bash\n\n# Scrpit adapted from: https://github.com/rust-lang/rustc_codegen_cranelift \n\nset -e\n\ncargo build && cargo build --release \n\necho \"[SETUP] Downloading the Rust compiler\"\ntest -e \"rust\" || git clone https://github.com/rust-lang/rust.git --filter=tree:0 --quiet  --depth 500 || true\npushd rust\necho \"[SETUP] Finished donwloading the Rust compiler\"\ngit fetch\ngit checkout --no-progress -- .\ngit checkout --no-progress \"$(rustc -V | cut -d' ' -f3 | tr -d '(')\"\necho \"[SETUP] Updating git submodules\"\ngit submodule update --quiet --init src/tools/cargo library/backtrace library/stdarch\necho \"[SETUP] Finished updating git submodules\"\n#git -c user.name=Dummy -c user.email=dummy@example.com -c commit.gpgSign=false \\\n #   am ../patches/*-stdlib-*.patch\necho \"[SETUP] Writing config\"\ncat > config.toml <<EOF\nchange-id = 999999\n\n[build]\nrustc = \"$(rustup which rustc)\"\ncargo = \"$(rustup which cargo)\"\nfull-bootstrap = false\nlocal-rebuild = true\n\n[rust]\n\ndeny-warnings = false\nverbose-tests = false\nEOF\npopd\n\n# Allow the testsuite to use llvm tools\nhost_triple=$(rustc -vV | grep host | cut -d: -f2 | tr -d \" \")\nexport LLVM_BIN_DIR=\"$(rustc --print sysroot)/lib/rustlib/$host_triple/bin\"\n"
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "target.md",
          "type": "blob",
          "size": 3.9375,
          "content": "Hello! \n\nI have a few questions about the process of adding some support for another target / target_os. \n\nI am currently working on a Rust-to-.NET compiler backend, and I am coming closer and closre to a point at which the project will need some target specific std patches to progress.\n\nCurrently, I build a \"suroggate\" std, which \"thinks\" it is being built for x86_64 Linux GNU. \n\nHowever,  there are a few ugly issues caused by this proccess: \n1. Errno is a bit wonky in .NET: calling any extern function can change the value of errno, even when that function succeds\n2. Some libc functions (like fork or pthreads) cause issues(like crashes) in .NET\n3. A \"surogte\" version of std only works on the platform it was designed for, and is not cross platform. If I used .NET APIs, then it could be cross platform. \n4. Each extern function used by a .NET assembly needs some additional data to work(info about how it interacts with errno, and sometimes the signature). So, for each OS I would like to support, I need to input quite a bit of additonal information.\n5. Supproting POSIX-stlye enviroment variables(environ) in .NET requires some emulation and a few wierd tricks. \nKeeping those emulated enviroment variables in sync is a bit of a headache, so functions like `set_env` do not always work as expected(the changes are only visible in specific circumstances)\n6. Rust uses a bit of a linker hack to get the command line arguments on GNU linux. Emulating this hack requires quite a bit of effort, and compicates the codebase singificantly. \n7. Supporting thread local destructors would, once again, require emulating yet another POSIX APIs. If `std` .NET specific APIs(and .NET threads), I could make the process singificantly easier. \n8. Supporting certain mutithreading APIs(particulary around thread names) is also currently a bit dificult, since I have to emulate the POSIX APIs.\n\nThere are also some more issues steming from the lack of a proper .NET target. For example:\n\n.NET does not support 8 and 16 bit atomics yet, so they have to be emulated in a non-compilant way(by using locks). Defining a target would allow me to just tell the compiler that those are not supported.\n\nWhile I can define a new target withou the upstream support, I can't add .NET support to `std` without copperating with the upstream, so I have been looking at my options.\n\nI have read the [Rust target tier policy](https://doc.rust-lang.org/rustc/target-tier-policy.html) - in particular, the section about tier 3 targets.\n\nGoing through all the requirements, I have a few questions regarding them.\n\n1. A tier 3 target must have a designated developer - No problem here, I assume I can just be the designated maintainer\n2. Targets must use naming consistent with any existing targets - I have a rough idea about how to name my target `dotnet-core` or `dotnet-core-core9`, altough I am not sure if those are fully consitent?\n3. Tier 3 targets may have unusual requirements to build or use - I am not sure about everyting in this point\n    3.1. The target must not introduce license incompatibilities - I don't know what exactly does this mean. \n    3.2 Anything added to the Rust repository must be under the standard Rust license (MIT OR Apache-2.0). - No problem here, I my repo is licensed under `MIT OR Apache-2.0`.\n    3.3 The target must not cause the Rust tools or libraries built for any other host (even when supporting cross-compilation to the target) to depend on any new dependency less permissive than the Rust licensing policy. -\n        my backend depeds on the IL assembler, which is licensed under MIT, and running a compiled assembly requires a .NET runtime(also licensed under MIT). Is MIT alone(so no Apache) considered less premisive than \"the Rust licensing policy\"?\n    3.4 Compiling, linking, and emitting functional binaries, libraries, or other code for the target (whether hosted on the target itself or cross-compiling from another target) must not depend on proprietary (non-FOSS) libraries. - \n        Once again, "
        },
        {
          "name": "test",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}