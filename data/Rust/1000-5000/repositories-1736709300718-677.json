{
  "metadata": {
    "timestamp": 1736709300718,
    "page": 677,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjY4MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "zetzit/zz",
      "stars": 1599,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.0263671875,
          "content": "*.zz linguist-language=C++\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.0078125,
          "content": "/target\n"
        },
        {
          "name": ".gitmodules",
          "type": "blob",
          "size": 0.0751953125,
          "content": "[submodule \"zz.vim\"]\n\tpath = zz.vim\n\turl = https://github.com/zetzit/vim.git\n"
        },
        {
          "name": "Cargo.lock",
          "type": "blob",
          "size": 24.0068359375,
          "content": "# This file is automatically @generated by Cargo.\n# It is not intended for manual editing.\nversion = 3\n\n[[package]]\nname = \"aho-corasick\"\nversion = \"0.7.10\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8716408b8bc624ed7f65d223ddb9ac2d044c0547b6fa4b0d554f3a9540496ada\"\ndependencies = [\n \"memchr\",\n]\n\n[[package]]\nname = \"ansi_term\"\nversion = \"0.11.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ee49baf6cb617b853aa8d93bf420db2383fab46d314482ca2803b40d5fde979b\"\ndependencies = [\n \"winapi\",\n]\n\n[[package]]\nname = \"askama\"\nversion = \"0.9.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"10a1fb9e41eb366cbcd267da2094be5b7e62fdbca9f82091e7503e80f885050d\"\ndependencies = [\n \"askama_derive\",\n \"askama_escape\",\n \"askama_shared\",\n]\n\n[[package]]\nname = \"askama_derive\"\nversion = \"0.9.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e1012c270085fa35ece6a48a569544fde85b6d9ee41074c7b706cc912a03f939\"\ndependencies = [\n \"askama_shared\",\n \"nom\",\n \"proc-macro2\",\n \"quote\",\n \"syn\",\n]\n\n[[package]]\nname = \"askama_escape\"\nversion = \"0.3.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"7a577aeba5fec1aafb9f195d98cfcc38a78b588e4ebf9b15f62ca1c7aa33795a\"\n\n[[package]]\nname = \"askama_shared\"\nversion = \"0.9.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8ee517f4e33c27b129928e71d8a044d54c513e72e0b72ec5c4f5f1823e9de353\"\ndependencies = [\n \"askama_escape\",\n \"humansize\",\n \"num-traits\",\n \"serde\",\n \"toml\",\n]\n\n[[package]]\nname = \"atty\"\nversion = \"0.2.14\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d9b39be18770d11421cdb1b9947a45dd3f37e93092cbf377614828a319d5fee8\"\ndependencies = [\n \"hermit-abi\",\n \"libc\",\n \"winapi\",\n]\n\n[[package]]\nname = \"autocfg\"\nversion = \"1.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f8aac770f1885fd7e387acedd76065302551364496e46b3dd00860b2f8359b9d\"\n\n[[package]]\nname = \"backtrace\"\nversion = \"0.3.46\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b1e692897359247cc6bb902933361652380af0f1b7651ae5c5013407f30e109e\"\ndependencies = [\n \"backtrace-sys\",\n \"cfg-if\",\n \"libc\",\n \"rustc-demangle\",\n]\n\n[[package]]\nname = \"backtrace-sys\"\nversion = \"0.1.37\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"18fbebbe1c9d1f383a9cc7e8ccdb471b91c8d024ee9c2ca5b5346121fe8b4399\"\ndependencies = [\n \"cc\",\n \"libc\",\n]\n\n[[package]]\nname = \"bitflags\"\nversion = \"1.2.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"cf1de2fe8c75bc145a2f577add951f8134889b4795d47466a54a5c846d691693\"\n\n[[package]]\nname = \"block-buffer\"\nversion = \"0.7.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"c0940dc441f31689269e10ac70eb1002a3a1d3ad1390e030043662eb7fe4688b\"\ndependencies = [\n \"block-padding\",\n \"byte-tools\",\n \"byteorder\",\n \"generic-array\",\n]\n\n[[package]]\nname = \"block-padding\"\nversion = \"0.1.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"fa79dedbb091f449f1f39e53edf88d5dbe95f895dae6135a8d7b881fb5af73f5\"\ndependencies = [\n \"byte-tools\",\n]\n\n[[package]]\nname = \"byte-tools\"\nversion = \"0.3.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e3b5ca7a04898ad4bcd41c90c5285445ff5b791899bb1b0abdd2a2aa791211d7\"\n\n[[package]]\nname = \"byteorder\"\nversion = \"1.3.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"08c48aae112d48ed9f069b33538ea9e3e90aa263cfa3d1c24309612b1f7472de\"\n\n[[package]]\nname = \"cc\"\nversion = \"1.0.52\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"c3d87b23d6a92cd03af510a5ade527033f6aa6fa92161e2d5863a907d4c5e31d\"\n\n[[package]]\nname = \"cfg-if\"\nversion = \"0.1.10\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"4785bdd1c96b2a846b2bd7cc02e86b6b3dbf14e7e53446c4f54c92a361040822\"\n\n[[package]]\nname = \"clap\"\nversion = \"2.33.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"5067f5bb2d80ef5d68b4c87db81601f0b75bca627bc2ef76b141d7b846a3c6d9\"\ndependencies = [\n \"ansi_term\",\n \"atty\",\n \"bitflags\",\n \"strsim\",\n \"textwrap\",\n \"unicode-width\",\n \"vec_map\",\n]\n\n[[package]]\nname = \"crossbeam-deque\"\nversion = \"0.7.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"9f02af974daeee82218205558e51ec8768b48cf524bd01d550abe5573a608285\"\ndependencies = [\n \"crossbeam-epoch\",\n \"crossbeam-utils\",\n \"maybe-uninit\",\n]\n\n[[package]]\nname = \"crossbeam-epoch\"\nversion = \"0.8.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"058ed274caafc1f60c4997b5fc07bf7dc7cca454af7c6e81edffe5f33f70dace\"\ndependencies = [\n \"autocfg\",\n \"cfg-if\",\n \"crossbeam-utils\",\n \"lazy_static\",\n \"maybe-uninit\",\n \"memoffset\",\n \"scopeguard\",\n]\n\n[[package]]\nname = \"crossbeam-queue\"\nversion = \"0.2.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"c695eeca1e7173472a32221542ae469b3e9aac3a4fc81f7696bcad82029493db\"\ndependencies = [\n \"cfg-if\",\n \"crossbeam-utils\",\n]\n\n[[package]]\nname = \"crossbeam-utils\"\nversion = \"0.7.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"c3c7c73a2d1e9fc0886a08b93e98eb643461230d5f1925e4036204d5f2e261a8\"\ndependencies = [\n \"autocfg\",\n \"cfg-if\",\n \"lazy_static\",\n]\n\n[[package]]\nname = \"digest\"\nversion = \"0.8.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f3d0c8c8752312f9713efd397ff63acb9f85585afbf179282e720e7704954dd5\"\ndependencies = [\n \"generic-array\",\n]\n\n[[package]]\nname = \"either\"\nversion = \"1.5.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"bb1f6b1ce1c140482ea30ddd3335fc0024ac7ee112895426e0a629a6c20adfe3\"\n\n[[package]]\nname = \"env_logger\"\nversion = \"0.6.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"aafcde04e90a5226a6443b7aabdb016ba2f8307c847d524724bd9b346dd1a2d3\"\ndependencies = [\n \"atty\",\n \"humantime\",\n \"log\",\n \"regex\",\n \"termcolor\",\n]\n\n[[package]]\nname = \"error-chain\"\nversion = \"0.12.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d371106cc88ffdfb1eabd7111e432da544f16f3e2d7bf1dfe8bf575f1df045cd\"\ndependencies = [\n \"backtrace\",\n \"version_check\",\n]\n\n[[package]]\nname = \"failure\"\nversion = \"0.1.8\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d32e9bd16cc02eae7db7ef620b392808b89f6a5e16bb3497d159c6b92a0f4f86\"\ndependencies = [\n \"backtrace\",\n]\n\n[[package]]\nname = \"fake-simd\"\nversion = \"0.1.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e88a8acf291dafb59c2d96e8f59828f3838bb1a70398823ade51a84de6a6deed\"\n\n[[package]]\nname = \"fuchsia-cprng\"\nversion = \"0.1.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a06f77d526c1a601b7c4cdd98f54b5eaabffc14d5f2f0296febdc7f357c6d3ba\"\n\n[[package]]\nname = \"generic-array\"\nversion = \"0.12.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"c68f0274ae0e023facc3c97b2e00f076be70e254bc851d972503b328db79b2ec\"\ndependencies = [\n \"typenum\",\n]\n\n[[package]]\nname = \"getrandom\"\nversion = \"0.1.14\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"7abc8dd8451921606d809ba32e95b6111925cd2906060d2dcc29c070220503eb\"\ndependencies = [\n \"cfg-if\",\n \"libc\",\n \"wasi\",\n]\n\n[[package]]\nname = \"hermit-abi\"\nversion = \"0.1.12\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"61565ff7aaace3525556587bd2dc31d4a07071957be715e63ce7b1eccf51a8f4\"\ndependencies = [\n \"libc\",\n]\n\n[[package]]\nname = \"humansize\"\nversion = \"1.1.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b6cab2627acfc432780848602f3f558f7e9dd427352224b0d9324025796d2a5e\"\n\n[[package]]\nname = \"humantime\"\nversion = \"1.3.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"df004cfca50ef23c36850aaaa59ad52cc70d0e90243c3c7737a4dd32dc7a3c4f\"\ndependencies = [\n \"quick-error\",\n]\n\n[[package]]\nname = \"idna\"\nversion = \"0.2.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"02e2673c30ee86b5b96a9cb52ad15718aa1f966f5ab9ad54a8b95d5ca33120a9\"\ndependencies = [\n \"matches\",\n \"unicode-bidi\",\n \"unicode-normalization\",\n]\n\n[[package]]\nname = \"itoa\"\nversion = \"0.4.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b8b7a7c0c47db5545ed3fef7468ee7bb5b74691498139e4b3f6a20685dc6dd8e\"\n\n[[package]]\nname = \"lazy_static\"\nversion = \"1.4.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e2abad23fbc42b3700f2f279844dc832adb2b2eb069b2df918f455c4e18cc646\"\n\n[[package]]\nname = \"libc\"\nversion = \"0.2.69\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"99e85c08494b21a9054e7fe1374a732aeadaff3980b6990b94bfd3a70f690005\"\n\n[[package]]\nname = \"log\"\nversion = \"0.4.8\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"14b6052be84e6b71ab17edffc2eeabf5c2c3ae1fdb464aae35ac50c67a44e1f7\"\ndependencies = [\n \"cfg-if\",\n]\n\n[[package]]\nname = \"maplit\"\nversion = \"1.0.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3e2e65a1a2e43cfcb47a895c4c8b10d1f4a61097f9f254f183aee60cad9c651d\"\n\n[[package]]\nname = \"matches\"\nversion = \"0.1.8\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"7ffc5c5338469d4d3ea17d269fa8ea3512ad247247c30bd2df69e68309ed0a08\"\n\n[[package]]\nname = \"maybe-uninit\"\nversion = \"2.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"60302e4db3a61da70c0cb7991976248362f30319e88850c487b9b95bbf059e00\"\n\n[[package]]\nname = \"memchr\"\nversion = \"2.3.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3728d817d99e5ac407411fa471ff9800a778d88a24685968b36824eaf4bee400\"\n\n[[package]]\nname = \"memoffset\"\nversion = \"0.5.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b4fc2c02a7e374099d4ee95a193111f72d2110197fe200272371758f6c3643d8\"\ndependencies = [\n \"autocfg\",\n]\n\n[[package]]\nname = \"metrohash\"\nversion = \"1.0.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3ba553cb19e2acbc54baa16faef215126243fe45e53357a3b2e9f4ebc7b0506c\"\n\n[[package]]\nname = \"nom\"\nversion = \"5.1.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"0b471253da97532da4b61552249c521e01e736071f71c1a4f7ebbfbf0a06aad6\"\ndependencies = [\n \"memchr\",\n \"version_check\",\n]\n\n[[package]]\nname = \"num-traits\"\nversion = \"0.2.11\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"c62be47e61d1842b9170f0fdeec8eba98e60e90e5446449a0545e5152acd7096\"\ndependencies = [\n \"autocfg\",\n]\n\n[[package]]\nname = \"num_cpus\"\nversion = \"1.13.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"05499f3756671c15885fee9034446956fff3f243d6077b91e5767df161f766b3\"\ndependencies = [\n \"hermit-abi\",\n \"libc\",\n]\n\n[[package]]\nname = \"numtoa\"\nversion = \"0.1.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b8f8bdf33df195859076e54ab11ee78a1b208382d3a26ec40d142ffc1ecc49ef\"\n\n[[package]]\nname = \"opaque-debug\"\nversion = \"0.2.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"2839e79665f131bdb5782e51f2c6c9599c133c6098982a54c794358bf432529c\"\n\n[[package]]\nname = \"pathdiff\"\nversion = \"0.2.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"877630b3de15c0b64cc52f659345724fbf6bdad9bd9566699fc53688f3c34a34\"\n\n[[package]]\nname = \"pbr\"\nversion = \"1.0.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"4403eb718d70c03ee279e51737782902c68cca01e870a33b6a2f9dfb50b9cd83\"\ndependencies = [\n \"libc\",\n \"termion\",\n \"time\",\n \"winapi\",\n]\n\n[[package]]\nname = \"percent-encoding\"\nversion = \"2.1.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d4fd5641d01c8f18a23da7b6fe29298ff4b55afcccdf78973b24cf3175fee32e\"\n\n[[package]]\nname = \"pest\"\nversion = \"2.1.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"10f4872ae94d7b90ae48754df22fd42ad52ce740b8f370b03da4835417403e53\"\ndependencies = [\n \"ucd-trie\",\n]\n\n[[package]]\nname = \"pest_derive\"\nversion = \"2.1.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"833d1ae558dc601e9a60366421196a8d94bc0ac980476d0b67e1d0988d72b2d0\"\ndependencies = [\n \"pest\",\n \"pest_generator\",\n]\n\n[[package]]\nname = \"pest_generator\"\nversion = \"2.1.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"99b8db626e31e5b81787b9783425769681b347011cc59471e33ea46d2ea0cf55\"\ndependencies = [\n \"pest\",\n \"pest_meta\",\n \"proc-macro2\",\n \"quote\",\n \"syn\",\n]\n\n[[package]]\nname = \"pest_meta\"\nversion = \"2.1.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"54be6e404f5317079812fc8f9f5279de376d8856929e21c184ecf6bbd692a11d\"\ndependencies = [\n \"maplit\",\n \"pest\",\n \"sha-1\",\n]\n\n[[package]]\nname = \"proc-macro2\"\nversion = \"1.0.12\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8872cf6f48eee44265156c111456a700ab3483686b3f96df4cf5481c89157319\"\ndependencies = [\n \"unicode-xid\",\n]\n\n[[package]]\nname = \"quick-error\"\nversion = \"1.2.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a1d01941d82fa2ab50be1e79e6714289dd7cde78eba4c074bc5a4374f650dfe0\"\n\n[[package]]\nname = \"quote\"\nversion = \"1.0.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"4c1f4b0efa5fc5e8ceb705136bfee52cfdb6a4e3509f770b478cd6ed434232a7\"\ndependencies = [\n \"proc-macro2\",\n]\n\n[[package]]\nname = \"rand\"\nversion = \"0.4.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"552840b97013b1a26992c11eac34bdd778e464601a4c2054b5f0bff7c6761293\"\ndependencies = [\n \"fuchsia-cprng\",\n \"libc\",\n \"rand_core 0.3.1\",\n \"rdrand\",\n \"winapi\",\n]\n\n[[package]]\nname = \"rand_core\"\nversion = \"0.3.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"7a6fdeb83b075e8266dcc8762c22776f6877a63111121f5f8c7411e5be7eed4b\"\ndependencies = [\n \"rand_core 0.4.2\",\n]\n\n[[package]]\nname = \"rand_core\"\nversion = \"0.4.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"9c33a3c44ca05fa6f1807d8e6743f3824e8509beca625669633be0acbdf509dc\"\n\n[[package]]\nname = \"rayon\"\nversion = \"1.3.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"db6ce3297f9c85e16621bb8cca38a06779ffc31bb8184e1be4bed2be4678a098\"\ndependencies = [\n \"crossbeam-deque\",\n \"either\",\n \"rayon-core\",\n]\n\n[[package]]\nname = \"rayon-core\"\nversion = \"1.7.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"08a89b46efaf957e52b18062fb2f4660f8b8a4dde1807ca002690868ef2c85a9\"\ndependencies = [\n \"crossbeam-deque\",\n \"crossbeam-queue\",\n \"crossbeam-utils\",\n \"lazy_static\",\n \"num_cpus\",\n]\n\n[[package]]\nname = \"rdrand\"\nversion = \"0.4.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"678054eb77286b51581ba43620cc911abf02758c91f93f479767aed0f90458b2\"\ndependencies = [\n \"rand_core 0.3.1\",\n]\n\n[[package]]\nname = \"redox_syscall\"\nversion = \"0.1.56\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"2439c63f3f6139d1b57529d16bc3b8bb855230c8efcc5d3a896c8bea7c3b1e84\"\n\n[[package]]\nname = \"redox_termios\"\nversion = \"0.1.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"7e891cfe48e9100a70a3b6eb652fef28920c117d366339687bd5576160db0f76\"\ndependencies = [\n \"redox_syscall\",\n]\n\n[[package]]\nname = \"regex\"\nversion = \"1.3.7\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a6020f034922e3194c711b82a627453881bc4682166cabb07134a10c26ba7692\"\ndependencies = [\n \"aho-corasick\",\n \"memchr\",\n \"regex-syntax\",\n \"thread_local\",\n]\n\n[[package]]\nname = \"regex-syntax\"\nversion = \"0.6.17\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"7fe5bd57d1d7414c6b5ed48563a2c855d995ff777729dcd91c369ec7fea395ae\"\n\n[[package]]\nname = \"remove_dir_all\"\nversion = \"0.5.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"4a83fa3702a688b9359eccba92d153ac33fd2e8462f9e0e3fdf155239ea7792e\"\ndependencies = [\n \"winapi\",\n]\n\n[[package]]\nname = \"rmp\"\nversion = \"0.8.9\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"0f10b46df14cf1ee1ac7baa4d2fbc2c52c0622a4b82fa8740e37bc452ac0184f\"\ndependencies = [\n \"byteorder\",\n \"num-traits\",\n]\n\n[[package]]\nname = \"rmp-serde\"\nversion = \"0.14.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"4c1ee98f14fe8b8e9c5ea13d25da7b2a1796169202c57a09d7288de90d56222b\"\ndependencies = [\n \"byteorder\",\n \"rmp\",\n \"serde\",\n]\n\n[[package]]\nname = \"rsmt2\"\nversion = \"0.14.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"4affc8a99241732d2e214728974bd002bf3aa1d114760cf5c3ac6c1fd5650c7d\"\ndependencies = [\n \"error-chain\",\n]\n\n[[package]]\nname = \"rustc-demangle\"\nversion = \"0.1.16\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"4c691c0e608126e00913e33f0ccf3727d5fc84573623b8d65b2df340b5201783\"\n\n[[package]]\nname = \"ryu\"\nversion = \"1.0.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ed3d612bc64430efeb3f7ee6ef26d590dce0c43249217bddc62112540c7941e1\"\n\n[[package]]\nname = \"scopeguard\"\nversion = \"1.1.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d29ab0c6d3fc0ee92fe66e2d99f700eab17a8d57d1c1d3b748380fb20baa78cd\"\n\n[[package]]\nname = \"serde\"\nversion = \"1.0.106\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"36df6ac6412072f67cf767ebbde4133a5b2e88e76dc6187fa7104cd16f783399\"\ndependencies = [\n \"serde_derive\",\n]\n\n[[package]]\nname = \"serde_derive\"\nversion = \"1.0.106\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"9e549e3abf4fb8621bd1609f11dfc9f5e50320802273b12f3811a67e6716ea6c\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn\",\n]\n\n[[package]]\nname = \"serde_json\"\nversion = \"1.0.52\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a7894c8ed05b7a3a279aeb79025fdec1d3158080b75b98a08faf2806bb799edd\"\ndependencies = [\n \"itoa\",\n \"ryu\",\n \"serde\",\n]\n\n[[package]]\nname = \"sha-1\"\nversion = \"0.8.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f7d94d0bede923b3cea61f3f1ff57ff8cdfd77b400fb8f9998949e0cf04163df\"\ndependencies = [\n \"block-buffer\",\n \"digest\",\n \"fake-simd\",\n \"opaque-debug\",\n]\n\n[[package]]\nname = \"sha2\"\nversion = \"0.8.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"27044adfd2e1f077f649f59deb9490d3941d674002f7d062870a60ebe9bd47a0\"\ndependencies = [\n \"block-buffer\",\n \"digest\",\n \"fake-simd\",\n \"opaque-debug\",\n]\n\n[[package]]\nname = \"smallvec\"\nversion = \"1.4.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"c7cb5678e1615754284ec264d9bb5b4c27d2018577fd90ac0ceb578591ed5ee4\"\n\n[[package]]\nname = \"strsim\"\nversion = \"0.8.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8ea5119cdb4c55b55d432abb513a0429384878c15dde60cc77b1c99de1a95a6a\"\n\n[[package]]\nname = \"syn\"\nversion = \"1.0.18\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"410a7488c0a728c7ceb4ad59b9567eb4053d02e8cc7f5c0e0eeeb39518369213\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"unicode-xid\",\n]\n\n[[package]]\nname = \"tempdir\"\nversion = \"0.3.7\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"15f2b5fb00ccdf689e0149d1b1b3c03fead81c2b37735d812fa8bddbbf41b6d8\"\ndependencies = [\n \"rand\",\n \"remove_dir_all\",\n]\n\n[[package]]\nname = \"termcolor\"\nversion = \"1.1.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"bb6bfa289a4d7c5766392812c0a1f4c1ba45afa1ad47803c11e1f407d846d75f\"\ndependencies = [\n \"winapi-util\",\n]\n\n[[package]]\nname = \"termion\"\nversion = \"1.5.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"c22cec9d8978d906be5ac94bceb5a010d885c626c4c8855721a4dbd20e3ac905\"\ndependencies = [\n \"libc\",\n \"numtoa\",\n \"redox_syscall\",\n \"redox_termios\",\n]\n\n[[package]]\nname = \"textwrap\"\nversion = \"0.11.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d326610f408c7a4eb6f51c37c330e496b08506c9457c9d34287ecc38809fb060\"\ndependencies = [\n \"unicode-width\",\n]\n\n[[package]]\nname = \"thread_local\"\nversion = \"1.0.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d40c6d1b69745a6ec6fb1ca717914848da4b44ae29d9b3080cbee91d72a69b14\"\ndependencies = [\n \"lazy_static\",\n]\n\n[[package]]\nname = \"time\"\nversion = \"0.1.43\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ca8a50ef2360fbd1eeb0ecd46795a87a19024eb4b53c5dc916ca1fd95fe62438\"\ndependencies = [\n \"libc\",\n \"winapi\",\n]\n\n[[package]]\nname = \"toml\"\nversion = \"0.5.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ffc92d160b1eef40665be3a05630d003936a3bc7da7421277846c2613e92c71a\"\ndependencies = [\n \"serde\",\n]\n\n[[package]]\nname = \"typenum\"\nversion = \"1.12.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"373c8a200f9e67a0c95e62a4f52fbf80c23b4381c05a17845531982fa99e6b33\"\n\n[[package]]\nname = \"ucd-trie\"\nversion = \"0.1.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"56dee185309b50d1f11bfedef0fe6d036842e3fb77413abef29f8f8d1c5d4c1c\"\n\n[[package]]\nname = \"unicode-bidi\"\nversion = \"0.3.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"49f2bd0c6468a8230e1db229cff8029217cf623c767ea5d60bfbd42729ea54d5\"\ndependencies = [\n \"matches\",\n]\n\n[[package]]\nname = \"unicode-normalization\"\nversion = \"0.1.12\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"5479532badd04e128284890390c1e876ef7a993d0570b3597ae43dfa1d59afa4\"\ndependencies = [\n \"smallvec\",\n]\n\n[[package]]\nname = \"unicode-width\"\nversion = \"0.1.7\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"caaa9d531767d1ff2150b9332433f32a24622147e5ebb1f26409d5da67afd479\"\n\n[[package]]\nname = \"unicode-xid\"\nversion = \"0.2.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"826e7639553986605ec5979c7dd957c7895e93eabed50ab2ffa7f6128a75097c\"\n\n[[package]]\nname = \"url\"\nversion = \"2.1.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"829d4a8476c35c9bf0bbce5a3b23f4106f79728039b726d292bb93bc106787cb\"\ndependencies = [\n \"idna\",\n \"matches\",\n \"percent-encoding\",\n]\n\n[[package]]\nname = \"vec_map\"\nversion = \"0.8.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"05c78687fb1a80548ae3250346c3db86a80a7cdd77bda190189f2d0a0987c81a\"\n\n[[package]]\nname = \"version_check\"\nversion = \"0.9.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"078775d0255232fb988e6fccf26ddc9d1ac274299aaedcedce21c6f72cc533ce\"\n\n[[package]]\nname = \"wasi\"\nversion = \"0.9.0+wasi-snapshot-preview1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"cccddf32554fecc6acb585f82a32a72e28b48f8c4c1883ddfeeeaa96f7d8e519\"\n\n[[package]]\nname = \"which\"\nversion = \"3.1.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d011071ae14a2f6671d0b74080ae0cd8ebf3a6f8c9589a2cd45f23126fe29724\"\ndependencies = [\n \"failure\",\n \"libc\",\n]\n\n[[package]]\nname = \"winapi\"\nversion = \"0.3.8\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8093091eeb260906a183e6ae1abdba2ef5ef2257a21801128899c3fc699229c6\"\ndependencies = [\n \"winapi-i686-pc-windows-gnu\",\n \"winapi-x86_64-pc-windows-gnu\",\n]\n\n[[package]]\nname = \"winapi-i686-pc-windows-gnu\"\nversion = \"0.4.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ac3b87c63620426dd9b991e5ce0329eff545bccbbb34f3be09ff6fb6ab51b7b6\"\n\n[[package]]\nname = \"winapi-util\"\nversion = \"0.1.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"70ec6ce85bb158151cae5e5c87f95a8e97d2c0c4b001223f33a334e3ce5de178\"\ndependencies = [\n \"winapi\",\n]\n\n[[package]]\nname = \"winapi-x86_64-pc-windows-gnu\"\nversion = \"0.4.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"712e227841d057c1ee1cd2fb22fa7e5a5461ae8e48fa2ca79ec42cfc1931183f\"\n\n[[package]]\nname = \"zz\"\nversion = \"0.1.1\"\ndependencies = [\n \"askama\",\n \"clap\",\n \"env_logger\",\n \"getrandom\",\n \"lazy_static\",\n \"log\",\n \"metrohash\",\n \"pathdiff\",\n \"pbr\",\n \"pest\",\n \"pest_derive\",\n \"rayon\",\n \"rmp-serde\",\n \"rsmt2\",\n \"serde\",\n \"serde_json\",\n \"sha2\",\n \"tempdir\",\n \"toml\",\n \"url\",\n \"which\",\n]\n"
        },
        {
          "name": "Cargo.toml",
          "type": "blob",
          "size": 0.6884765625,
          "content": "[package]\nname = \"zz\"\nversion = \"0.1.1\"\nauthors = [\"Arvid E. Picciani <aep@exys.org>\"]\nedition = '2018'\nlicense = \"MIT/Apache-2.0\"\ndescription = \"the zz language\"\nrepository = \"https://github.com/aep/zz\"\nreadme = \"README.md\"\n\n\n[[bin]]\nname = \"zz\"\npath = \"src/main.rs\"\n\n\n[lib]\nname = \"zz\"\npath = \"src/lib.rs\"\n\n[dependencies]\npest = \"2.1\"\npest_derive = \"2.1\"\nserde = { version = \"1.0\", features = [\"derive\"] }\nserde_json = \"1.0\"\ntoml  = \"0.5\"\nmetrohash = \"1.0.6\"\nclap = \"2\"\nlog = \"0.4\"\nenv_logger = \"0.6\"\npbr = \"1.0.1\"\nrayon = \"1.1.0\"\ntempdir = \"0.3\"\nwhich = \"3.1.0\"\naskama = \"0.9\"\ngetrandom = \"0.1.14\"\nlazy_static = \"1.4.0\"\nrmp-serde = \"0.14.3\"\nsha2 = \"0.8\"\nurl = \"2.1.1\"\nrsmt2 = \"0.14.1\"\npathdiff = \"0.2\"\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.033203125,
          "content": "Copyright 2020 Arvid E. Picciani\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 15.498046875,
          "content": "![logo](logo2.png?raw=true)\n\n\nZetZ is for systems without dynamic memory, where C is and will remain the defacto standard system interface.<br>\nTarget bare metal MCUs, embedded linux, WASM, and embed it in other languages.<br>\n\nYou can also use it to build cross platform libraries, with a clean portable C-standard api. <br>\nZetz plays nice with others and does not require rewriting everything in zetz to be useful in large projects.\n\nA major innovative feature is that all code is formally verified by symbolic execution in a virtual machine,\nat compile time.\n\n### quick quick start\n\n1. Install https://github.com/Z3Prover/z3 usually through a distro package \n2. Get the latest binary from http://bin.zetz.it\n\n## Discord Community\n\nhttps://discord.gg/EsMxjWtcf5\n\n## editor support\n\n- Emacs: [zetz-mode](https://github.com/damon-kwok/zetz-mode)\n- Vim: [zz.vim](https://github.com/zetzit/vim)\n\n\n### how it looks\n\nZZ has some go and rust aesthetics, but remains a C dialect at the core.\n\n\n```C++\nusing <stdio.h>::{printf}\n\nstruct Random {\n    u32 num;\n}\n\nfn rng(Random *self) u32 {\n    return self->num;\n}\n\nexport fn main() int {\n    let r = Random{\n        num: 42,\n    };\n    \n    printf(\"your lucky number: %u\\n\", r.rng());\n    return 0;\n}\n\n\n```\n\n### the basic ideas\n\n#### plain C ABI\n\nZZ emits plain C and it will always do that. It is one of the main reasons it exists.\nIt will always emit C into a C compiler which will then emit the binary.\n\nmost modern languages have their own ABI, deviating from C, so you have to use glue tools to play nice with others.\nwith ZZ being emitted as C, all you do is include the header.\n\nThere is no stack unwinding (C++, rust), and no coroutines (go), so all code emits to plain ansi C\nwith no requirements towards compiler features.\n\nZZ works nicely with vendor provided closed source compiler for obscure systems.\nLike arduino, esp32, propriatary firmware compilers, and integrates nicely into existing industry standard microkernels like zephyr, freertos, etc.\n\n\n\n#### safety and correctness with symbolic execution\n\nUnlike other modern languages, ZZ has raw unchecked pointers as default. Nothing prevents you from doing crazy things,\nas long as you have mathematical proof that what you're doing is defined behaviour according to the C standard.\n\nChecking is done by executing your code in SSA form at compile time within a virtual machine in an SMT prover.\nNone of the checks are emitted into runtime code.\n\nThe standard library is fully stack based and heap allocation is strongly discouraged.\nZZ has convenience tools to deal with the lack of flexibility that comes with that, such as checked tail pointers.\n\n#### namespaces, autogenerated headers and declaration ordering\n\nNo modern language has headers or semantically relevant declaration order and neither does ZZ.\nbut since it interacts with raw C nicely, it also emits headers, and orders declarations so a c compiler likes them.\n\nZZ puts module namespaces into the C symbol using underscores instead of mangling.\nso my::lib::hello becomes my_lib_hello, which is C convention.\n\n### language reference\n\n\n\n#### mutability: const, mut\n\nby default, everything is const. this is the opposite of C. the mut keyword is used to make a global variable, or function argument mutable.\n\n\n\n#### polymorphism\n\n\nZZ follows the C model of polymorphism: any struct can be cast to the same type as its first member.\nIn ZZ the cast is implicit because it is always safe.\n\n\n```C++\nstruct Vehicle {\n    int wheels;\n}\n\nstruct Car {\n    Vehicle base;\n}\n\nfn allowed_entry(Vehicle *self) bool {\n    return self->wheels <= 2;\n}\n\n\nfn main() {\n    Car c{\n        base: Vehicle {\n            wheels: 4,\n        }\n    };\n    assert(!c.allowed_entry());\n}\n\n\n\n\n\n```\n\n\n#### where and model\n\nZZ requires that all memory access is mathematically proven to be defined.\nDefined as in the opposite of \"undefined behaviour\" in the C specification.\nIn other words, undefined behaviour is not allowed in ZZ.\n\nYou will quite often be told that by the compiler that something is not provable,\nlike indexing into an array.\n\n\nthis is not ok:\n\n```C\nfn bla(int * a) {\n    a[2];\n}\n```\n\nyou must tell the compiler that accessing the array at position 2 is defined. quick fix for this one:\n\n```C\nfn bla(int * a)\n    where len(a) == 3\n{\n    a[2];\n}\n```\n\nthis will compile. its not a very useful function tho, because trying to use it in any context where the array is not len 3 will not be allowed.\nhere's a better example:\n\n```C\nfn bla(int * a, int l)\n    where len(a) >= l\n{\n    if l >= 3 {\n        a[2];\n    }\n}\n```\n\n\nthanks to the underlying SMT solver, the ZZ symbolic executor will know that `a[2]` is only executed in the case where `len(a) >= l >= 3`, so it is defined.\n\nThe where keyword requires behaviour in the callsite, and the model keyword declares how the function itself will behave.\n\n```C\nfn bla(int a) int\n    model return == 2 * a\n{\n    return a * a;\n}\n```\n\nIn this simple example, we can declare that a function returns 2 times its input.\nBut it actually does not, so this won't compile.\n\n\n### theory\n\nwe can use annotations to define states for types, which neatly lets you define which calls are legal on which\ntype at a given time in the program without ANY runtime code.\n\n\n\n```C++\n\ntheory is_open(int*) bool;\n\nfn open(int mut* a)\n    model is_open(a)\n{\n    static_attest(is_open(a));\n    *a = 1;\n}\n\nfn read(int require<open> mut* a)\n    where is_open(a)\n    model is_open(a)\n{\n    return *a;\n}\n\nfn close(int mut* a)\n{\n    *a = 0;\n}\n```\n\nthe above example defines a type state transition that is legal: open -> read -> close\nany other combination will lead to a compile error, such as read before open.\n\n\n\n#### storage: const, static, atomic and thread_local\n\nconst and static work exactly like in rust, but with C syntax.\n\n```C\nexport const uint32_t foo = 3;\nstatic mutable float blarg = 2.0/0.3;\nthread_local mutable bool bob = true;\natomic mutable int marvin = 0;\n```\n\nconst is inlined in each module and therefore points to different memory in each module.\nstatic has a global storage location, but is private to the current module.\n\nin effect, there is no way to declare a shared global writable variable.\nZZ has no borrowchecker, and the restriction has nothing to do with preventing multithread races.\nInstead the declarations are selected so that the resulting exported binary interface can be mapped to any other language.\n\nif you need to export a global writeable memory location (which is still a bad idea, because threads),\nyou can define a function that returns a pointer to the local static.\n\nthread_local and atomic are mapped directly to the C11 keywords.\nZZ can use nicer keywords because there are no user defined names at the top level.\n\n#### visibility: pub, export\n\nby default all declarations are private to a module\n\n\"export\" can be used to make sure the declaration ends in the final result. that is in the binary and the export header.\n\n\"pub\" marks a declaration as local to the project. it is usable in other zz modules, but not exported into the resulting binary\n#### struct initialization\n\nTo prepare for type elision, all expressions have to have a known type.\n\n```C\nstruct A {\n    int a;\n    int b;\n}\n\nfn main() {\n    A a = A{\n        a : 2,\n    };\n}\n```\n\n#### conditional compilation / preprocessor\n\nLike in rust, the prepro is not a string processor, but rather executed on the AST **after** parsing.\nThis makes it behave very different than C, even if the syntax is the same as C.\n\nThe right hand side of #if is evaluated immediately and can only access preprocessor scope.\n\n```C\nstruct A {\n    int a;\n#if def(\"TEST\")\n    uint proc;\n#elif def(\"MAYBE\")\n    int proc;\n#else\n    void* proc;\n#endif\n}\n```\n\nEvery branch of an #if / #else must contain a completed statement,\nand can only appear where a statement would be valid,\nso this is not possible:\n\n```C\npub fn foo(\n#if os(\"unix\")\n)\n#endif\n```\n\nnote that even code that is disabled by conditions must still be valid syntax. It can however not be type checked,\n\n#### a note on west-const vs east-const\n\nZZ enforces east-const. C is not a formally correct language, so in order to make ZZ formally correct, we have to make some syntax illegal.\nIn this case we sacrifice west-const, which is incosistent and difficult to comprehend anyway.\n\nwest-const with left aligned star reads as if the pointer is part of the type, and mutability is a property of the pointer (which it is).\n\n```C++\n    int mut* foo;\n    foo = 0; // compile error\n    *foo = 0 // valid\n```\n\nunless you want to apply mutability to the local storage named foo\n\n```C++\n    void * mut foo;\n    foo = 0; // valid\n    *foo = 0 // compile error\n```\n\nCoincidentally this is roughly equivalent to Rust, so Rust devs should feel right at home.\nEven if not, you will quickly learn how pointer tags works by following the compiler errors.\n\n#### closures\n\nfunction pointers are difficult to do nicely but also make them emit to all languages well, so they don't really exist in ZZ.\ninstead you declare closures, which are automatically casted from and to functions\n\n```C++\nclosure rand_t() int;\n\nfn secure_random() int {\n    return 42;\n}\n\nfn main() {\n    rand_t rand = secure_random;\n}\n\n```\n\n#### metaprogramming or templates: tail variants\n\n\ntechnically zz does not have metaprogramming. template functions blow up code size and are difficult to export as plain C types.\ninstead zz makes code reusable by allowing allocations of structs to be larger than their member sizes.\n\nWe call this the \"tail\". And it can be used to make functions on fixed size arrays reusable for other sizes.\n\nhere's the String type:\n\n```C++\nexport struct String+ {\n    usize   len;\n    char    mem[];\n}\n```\n\nA + sign behind the name indicates this type has a tail.\nThe tail here is mem, which is specified as array with no size.\n\na length function could be implemented with this signature:\n\n```C++\nfn len(String+t mut * self) {\n    return t;\n}\n```\n\nagain, the + indicates a tail. in this case, the tail size is bound to a local variable named t,\nwhich can be used in the function body.\n\nwhen allocating a new stack variable of type String, you also allocate a tail on the same stack\n\n```C++\n    String+100 s = {0};\n    string::append(&s, \"hello\");\n    string::append(&s, \"world\");\n    printf(\"%.*s\", s.len, s.mem);\n```\n\nagain, + means tail, but here we specify an integer value of exact numbers of char we would like to add.\nthe tail is measured in number of elements of whatever is the last unsized element in the struct, not in bytes.\n\nString can dynamically expand within the tail memory. in this case, we append some stuff to the string, without ever allocating any heap.\nsimply returning from the current function will clear up any memory used, without the need for destructor ordering or signal safety.\n\n#### symbols\n\nSymbols are a big global enum that lets you create unique values from anywhere in your code.\n\n```C++\n    using symbols;\n\n    symbol Car;\n    symbol Bike;\n\n    fn drive_this(usize sym)\n        where symbol(sym)\n    {\n        if sym == Car {\n            printf(\"bzzzz\\n\");\n        } else {\n            printf(\"what do i do with a %s?\\n\", symbols::nameof(sym));\n        }\n    }\n```\n\nnote that you cannot make assumptions about the integer value of a symbol,\nas it depends on compilation and loading order\n\n#### new constructors\n\nZZ autogenerates bindings to more languages than C, and some languages are not fully compatible with C abi.\nSpecifically they don't allow returning structs from functions, a standard way to create \"constructor\" functions in C.\n\nintstead you should be using a function that takes a mut pointer as its first argument, and call it on a zero initialized stack variable.\nzz has syntactic sugar for this with the 'new' keyword.\n\n```C++\n    struct A {\n        int a;\n        int b;\n    }\n\n    fn empty(A mut new * self, int a)\n    {\n        self->a = a;\n    }\n\n    fn main() {\n        new a = empty(3);\n        assert(a.a == 3)\n        assert(a.b == 0)\n    }\n```\n\nnew creates a new local variable with the correct size and passes it as self argument to the constructor\n\nto create a local with a tail, use new like this:\n\n```C++\n    new+100 foo = string::empty();\n```\n\n#### procedural macros\n\nmacros in zz are fully compiled and executed at compile time for each call.\nthis allows constructing arbitrary complex macros using regular zz code.\n\nunlike C prepro macros, macros must emit complete expressions.\nfor example you cannot emit an open brace without a closing brace.\n\na macro is compiled to a standalone executable, automatically including all dependencies.\nthe call arguments and derive context is passed as json to stdin,\nand the macro is expected to print zz code to stdout.\n\n```C++\n/! creates literal string with arg0 repeated arg1 times\nexport macro repeat()  {\n\n    new+1000 a = ast::from_macro();\n    err::assert2(a.args[0].t == ast::Expression::LiteralString, \"expected arg0: string\");\n    err::assert2(a.args[1].t == ast::Expression::Literal,       \"expected arg1: number\");\n    let num = (int)atoi(a.args[1].v.string);\n\n    printf(\"\\\"\");\n    for int mut i = 0; i < num; i++ {\n        printf(\"%s\", a.args[0].v.string);\n    }\n    printf(\"\\\"\");\n}\n\nexport fn main() int {\n    printf(\"hello %s\\n\", repeat(\"world \", 32));\n    return 0;\n}\n```\n\n\n#### inline included C source\n\nZZ supports importing C source with the `using` keyword. Imported C\nsource can be inlined at the call site by using the `inline` keyword. In certain\ncases the imported C source may depend on symbols defined in a ZZ\nmodule. ZZ symbols can be given to an imported C file with the `needs`\nkeyword.\n\nIn the example below the `native.h` header file depends on the\n`example_Container` type to be defined. The `lib.zz` file imports the\nheader file in line and exposes the `Container` type to the header file\nby specifying it with the `needs` keyword. The `Container` type is made\navailable as `example_Container` because the project name is\n`example` and the type is `Container`.\n\n```c\n// native.h\n#include <stdio.h>\nvoid print(example_Container *self) {\n  printf(\"%s\\n\", (char *) self->value);\n}\n\nvoid init(example_Container *self, void const *value) {\n  self->value = value;\n}\n```\n\n```c++\n// lib.zz\ninline using (needs Container) \"native.h\" as native\n\nexport struct Container {\n  void *value;\n}\n\nexport fn create_container(Container new mut *self, void *value) {\n  native::init(self, value);\n}\n\npub fn print(Container *self) {\n  native::print(self);\n}\n```\n\n```C++\nusing example\n\nfn main() int {\n  new container = example::create_container(\"hello\");\n  container.print();\n  return 0;\n}\n```\n\n#### packed structs and unions\n\nZZ supports packed structs and unions with the `packed` modifier. This\nmodifier, when used with `struct` or `union`, omits alignment padding.\nThis is typically used for architecture independant serialization at the\ncost of causing alingment faults\n\nBelow is an example of a packed and unpacked struct and their static\nsizes printed to stdout.\n\n```C++\nusing <stdio.h>::{ printf }\n\nstruct Packed packed {\n  u8 a;\n  u8 b;\n  int b;\n}\n\nstruct Unpacked {\n  u8 a;\n  u8 b;\n  int b;\n}\n\nfn main() int {\n  printf(\"sizeof(Packed) == lu\\n\", sizeof(Packed)); // 6\n  printf(\"sizeof(Unpacked) == lu\\n\", sizeof(Unpacked)); // 8\n  return 0;\n}\n```\n\n#### environment variables\n\n##### `ZZ_MODULE_PATHS`\n\nWhen ZZ imports other ZZ modules it will look in a projects `modules/`\ndirectory by default. The search path can be extended by defining the\n`ZZ_MODULE_PATHS` environment variable much like\n[`PATH`](https://en.wikipedia.org/wiki/PATH_(variable)) environment\nvariable where multiple paths can be defined separated by a colon (`:`)\non POSIX systems and a semi-coloon (`;`) on Windows.\n\n```sh\nZZ_MODULE_PATHS=\"$PWD/path/to/modules:/usr/share/zz/modules\" zz build\n```\n\n\n[gcc-attributes]: https://gcc.gnu.org/onlinedocs/gcc-4.0.2/gcc/Type-Attributes.html\n"
        },
        {
          "name": "askama.toml",
          "type": "blob",
          "size": 0.0322265625,
          "content": "[general]\ndirs = [\"templates\"]\n\n\n"
        },
        {
          "name": "ci.sh",
          "type": "blob",
          "size": 0.4755859375,
          "content": "#!/bin/sh\n\nset -ex\n\nTHIS=$PWD\ncargo build --release\n\ncd $THIS/tests\n./ci.sh\n\nfor i in $THIS/examples/*\ndo\n    echo \"=================\"\n    cd $i\n    ../../target/release/zz --smt-timeout=200000 clean\n    ../../target/release/zz --smt-timeout=200000 run\n    ../../target/release/zz --smt-timeout=200000 test\ndone\n\nfor i in $THIS/modules/*\ndo\n    cd $i\n    ../../target/release/zz --smt-timeout=200000 clean\n    ../../target/release/zz --smt-timeout=200000 test\ndone\n\necho\necho all passed\n"
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "logo2.png",
          "type": "blob",
          "size": 39.29296875,
          "content": null
        },
        {
          "name": "modules",
          "type": "tree",
          "content": null
        },
        {
          "name": "solvecomp.sh",
          "type": "blob",
          "size": 0.447265625,
          "content": "#!/bin/zsh\necho \"z3 , yices2, fn\"\nfor i in *.smt2\ndo\n\n\nTIME_Z3=$(\n    (time z3 $i  >/dev/null)  2>&1  | rev | cut -d ' ' -f 2 | rev | tr -d '.'\n)\nTIME_YI=$(\n    (time yices_smt2  --incremental $i  >/dev/null)  2>&1  | rev | cut -d ' ' -f 2 | rev | tr -d '.'\n)\n\n    if [ $TIME_Z3 -gt $TIME_YI ]\n    then\n        echo -e \"\\e[31m$TIME_Z3\\e[39m , \\e[32m$TIME_YI\\e[39m , $i\"\n    else\n        echo -e \"\\e[32m$TIME_Z3\\e[39m , \\e[31m$TIME_YI\\e[39m , $i\"\n    fi\ndone\n"
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "templates",
          "type": "tree",
          "content": null
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        },
        {
          "name": "zz.vim",
          "type": "commit",
          "content": null
        }
      ]
    }
  ]
}