{
  "metadata": {
    "timestamp": 1736709130518,
    "page": 318,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjMyMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "mozilla/cbindgen",
      "stars": 2492,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".clippy.toml",
          "type": "blob",
          "size": 0.0576171875,
          "content": "# Specify the minimum supported Rust version\nmsrv = \"1.70\"\n"
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.1630859375,
          "content": "# Running test suite will update test expectations to use LF line endings,\n# so they need to be checked out using LF as well.\n* text=auto eol=lf\nlinestyle_crlf* -text\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.0205078125,
          "content": "target\n.idea\n.vscode\n"
        },
        {
          "name": "CHANGES",
          "type": "blob",
          "size": 13.4423828125,
          "content": "# unreleased\n\n# 0.27.0\n\n      * Revert: The `Config` struct now has a private member.\n      * Allow users to specify a crate version for bindings generation (#901).\n      * Update MSRV to 1.74 (#912, #987).\n      * Support #[deprecated] on enum variants (#933).\n      * Support integrating the package_version information in a header file comment (#939).\n      * Add a language backend (#942).\n      * Support generics with defaulted args (#959).\n      * Add `VaList` compatibility (#970).\n\n# 0.26.0\n\n      * Fix swapping of `>>=` and `<<=` in constants.\n      * Add support for #[deprecated] (#860).\n      * Built-in support for bitflags 2.0.\n      * Support for \"C-unwind\" ABI.\n      * Generate bindings for non-public extern items if they are #[no_mangle].\n\n## 0.25.0\n\n      * Re-release of yanked 0.24.6 as a major release\n      * Update MSRV to 1.57\n      * Support variadic arguments (`...`) (#805)\n      * Add --depfile option (#820)\n      * Breaking changes: The `Config` struct now has a private member.\n\n## 0.24.6 (YANKED: depfile option was breaking, see #841)\n\n      * Update MSRV to 1.57\n      * Support variadic arguments (`...`) (#805)\n      * Add --depfile option (#820)\n\n## 0.24.5\n\n      * Don't enforce tempfile version.\n\n## 0.24.4\n\n      * Move expand infinite recursion fix (#799)\n      * Add with_cpp_compat to the builder (#796)\n      * Handle never type in return position consistently (#780)\n      * Fix warnings (#816, #819)\n      * Updated documentation (#788, #791, #792, #810, #823)\n\n## 0.24.3\n\n      * Make struct expressions correctly generated through typedefs (#768).\n\n## 0.24.2\n\n      * Make bitfield operators use explicit constructors.\n\n## 0.24.1\n\n      * Add support for unary negation (#765).\n      * Make more bitfield operators constexpr (#765).\n\n## 0.24.0\n\n      * Basic const generic support (#759, #760 #762).\n      * Suffixes on integer literals are now honored to avoid narrowing (#764).\n\n## 0.23.0\n\n      * Better support for constexpr. (#756)\n      * constexpr is now enabled by default in C++ mode. You can use const.allow_constexpr=false to revert to previous behavior. (#756)\n      * Minimum syn version no longer parses old rust code. (#754)\n\n## 0.22.0\n\n      * Support rename rule for union body members (#751).\n      * constant: Add support for associated constant expressions (#752).\n      * Fix regression in CamelCase rename rule (should be lowerCamelCase) (#750).\n      * enumeration: simplify standard types in variants (#749).\n      * Avoid generating and writing bindings when called recursively (#747).\n      * Cython: Omit per-variant tags in unions generated for Rust enums (#748).\n      * Update various dependencies.\n\n## 0.21.0\n\n      * Update MSRV to 1.54.0\n      * Update clap to 3.1.\n      * Update heck to 0.4.0\n      * unraw identifiers\n      * Honor documentation_length in Cython.\n      * Add documentation_style to with short and full options\n      * Map RawFd to Int\n      * Respect remove_underscores config when prefixing name to enum\n\n## 0.20.0\n\n     * Add Builder::with_using_namespaces. (#688)\n     * Ignore PhantomPinned. (#695)\n     * Simplify Pin<T> to T. (#697)\n     * Update --pretty=expanded to -Zunpretty=expanded. (#706)\n\n## 0.19.0\n\n     * Simplify types in generics (#663)\n     * Use --profile=check for macro expansion (#671)\n     * Use exported name to prefix enum variants (#672)\n     * Fix path attribute handling in inline submodules (#679)\n     * Fix a stack overflow with some recursive typedefs (#680)\n\n## 0.18.0\n\n     * Simplify types in nested types such as pointed-to types and function signatures (#661)\n\n## 0.17.0\n\n     * Add with_parse_extra_bindings to builder. (#645)\n     * Support NonZero and fix incorrect simplification of Option<ptr> into ptr. (#647)\n     * Deal with name conflicts correctly in declaration type resolution. (#651)\n     * Support pointers to ZSTs. (#656)\n\n## 0.16.0\n\n     * Remove artificial restriction on lifetime parameters on enums (#604)\n     * Add an option for converting usize/isize into size_t/ptrdiff_t. (#606)\n     * Allow controlling the cargo profile used for expansion. (#607)\n     * Support wider range of expressions in enum discriminants (#614)\n     * Support generation of Cython bindings (#590)\n     * Fixed some issues with style=tag and recursive structs (#615)\n     * Default C style to Both (as specified in docs) (#615)\n     * Fix resolution of path dependencies from certain modules. (#629)\n     * Support inlined definitions for tuple variants with a single field in C (#631)\n\nThanks to all the awesome contributors that contributed to this release.\n\n## 0.15.0\n\n     * Allow customizing mangling of generic parameters in C (#575)\n     * Box<T> simplifies to T* in C (4ce324c)\n     * ManuallyDrop<T> and MaybeUninit<T> simplify to T in C, and are opaque in C++ (0076a17)\n     * C++ supports a derive-ostream annotation to derive serialization of structs, unions and enums (#582)\n     * Large character constants have been fixed on Windows (#586)\n     * Constants are now generated for typedefs, etc (#589)\n     * The `sort_by` configuration option has been made to work for constants (#587)\n     * Default sort order is source order now (sort_by = \"None\"), and can be changed by the above option (#587)\n\n## 0.14.6\n\n     * Fixed the builds with older versions of rustc.\n\n## 0.14.5\n\n     * Add support to specify line ending style (#568)\n     * Add cbindgen:ptrs-as-arrays annotation to allow making function\n       arguments C/C++ arrays.\n\n## 0.14.4\n\n     * Allow to override the mangling separator (#502)\n\n     * cbindgen now handles better having ZSTs in template parameters, and\n       default template parameters (#563).\n\n     * Support for annotating nonnull pointers (#558)\n\n     * Fixed bitflags that overflow a signed integer (#556)\n\n     * Support for wildcard argument names (#550)\n\n     * Support for the never return type, with configurable annotation (#549)\n\n     * Properly reject arrays as function arguments (#540)\n\n## 0.14.3\n\n     * Introduce cbindgen:ignore comment annotation, to allow ignoring items or modules. (#519)\n     * Support for casts in constant expressions. (#526)\n     * Make a non-fatal error a warning message. (#535)\n     * Add a --metadata option to the CLI, to allow passing pre-computed cargo metadata. (#538)\n\n## 0.14.2\n\n     * Fixed minimal dependency versions. (#507)\n     * Add an option to write pragma once. (#511)\n     * Fix submodule scanning for implicit Rust 2018 modules. (#512)\n     * Fix dependency parsing / scanning to handle target-specific versions. (#513)\n     * Use heck for case conversion. (#514)\n     * Add support for verbatim content after includes. (#416)\n     * Allow to add attributes to most generated functions. (#515)\n\n## 0.14.1\n\n     * Handle mangling pointers. (#508)\n     * Unconditionally generate a return statement in partialeq implementations. (#509)\n\n## 0.14.0\n\n     * Minor tweak at how [export.exclude] is handled to allow excluding\n       generic instantiations in C mode. (#501)\n     * Documented cpp_compat option. (#496)\n     * Fixed a panic when parsing associated constants for a built-in type. (#494)\n\n## 0.13.2\n\n     * Constants now have suitable documentation. (#471)\n     * Fixed some C warnings by emitting void when there are no arguments. (#470)\n     * Avoids reading cargo.toml when not needed, which can cause panics in workspace situations.\n     * Only write `default` cases if the switch is not exhaustive. (#475)\n     * Some warnings have been refined. (#477)\n     * Code generation for static arrays has been fixed. (#479)\n     * Opt-in support for constexpr in constants. (#481)\n     * Fix C code generation and some warnings when extremely large constants are used. (#490)\n     * Proper escaping of enum variants and fields. (#483)\n     * Added support for RefCell (as an opaque type) and Cell. (#489)\n\n## 0.13.1\n\n     * Support `#[cfg]` on individual enum variants. (#469)\n\n## 0.13.0\n\n     * Support 'swift_name' attributes on generated functions (#449)\n     * Add [export.pre_body] to config (#452)\n     * Handle new line in doc attribute (#454)\n     * Add support for `Self` in tagged enums, structs and unions (#455, #455, #456)\n     * Make sentinel variant respect regular config (#459)\n     * Fix layout of tagged enums with size under some configurations (#463)\n     * Add an option to allow configuring the order of function names in generated headers (#466)\n\n## 0.12.2\n\n     * Fixed version detection with lockfile v2. https://github.com/mozilla/cbindgen/pull/446\n     * Added support for export_name on functions. https://github.com/mozilla/cbindgen/pull/447\n\n## 0.12.1\n\n     * Added support for #[repr*64)] on enums. https://github.com/mozilla/cbindgen/pull/441\n     * Added support to generate plain enums instead of enum classes for C++. https://github.com/mozilla/cbindgen/pull/443\n     * Fixed dependency resolution with lockfile v2. https://github.com/mozilla/cbindgen/pull/438\n\n## 0.12.0\n\n     * Added support for #[repr(align)] and #[repr(packed)] on structs and unions. https://github.com/mozilla/cbindgen/pull/431\n     * Added support to generate copy-assignment operators for enums. https://github.com/mozilla/cbindgen/pull/434\n\n## 0.11.1\n\n     * More binary operators and expressions are supported. https://github.com/mozilla/cbindgen/pull/425\n     * More built-in bitflags operators. https://github.com/mozilla/cbindgen/pull/426\n\n## 0.11.0\n\n     * Made rust char map to uint32_t. https://github.com/mozilla/cbindgen/pull/424\n\n## 0.10.1\n\n     * Improved error message for missing config file. https://github.com/mozilla/cbindgen/pull/422\n     * Add missing header for char32_t. https://github.com/mozilla/cbindgen/pull/414\n\n## 0.10.0\n\n     * Initialize struct literal with list-initializer for C++11 standard. https://github.com/mozilla/cbindgen/pull/401\n     * Surround namespace with __cplusplus ifdef in cpp_compat mode. https://github.com/mozilla/cbindgen/pull/407\n     * Add support for --quiet flag. https://github.com/mozilla/cbindgen/pull/400\n     * Map char to char32_t. https://github.com/mozilla/cbindgen/pull/396\n     * Improve binding_crate_ref() error message. https://github.com/mozilla/cbindgen/pull/395\n     * avoid prematurely returning during expansion. https://github.com/mozilla/cbindgen/pull/389\n     * Add support for adding \"using namespace\" statements. https://github.com/mozilla/cbindgen/pull/387\n\n## 0.9.1\n\n     * Various improvements to comment output. https://github.com/mozilla/cbindgen/pull/370 / https://github.com/mozilla/cbindgen/pull/375.\n     * Fixed expand when ran from build.rs. https://github.com/mozilla/cbindgen/pull/371\n     * More debugging output for expansion. https://github.com/mozilla/cbindgen/pull/383\n     * New option to add a default private constructor in C++ tagged enums. https://github.com/mozilla/cbindgen/pull/377\n     * Syn and related dependencies updated to 1.0. https://github.com/mozilla/cbindgen/pull/379\n\n## 0.9.0\n\n     * Support to generate C headers with C++ compatibility. https://github.com/mozilla/cbindgen/pull/349\n     * Fix include guard generation when no_includes is set. https://github.com/mozilla/cbindgen/pull/352\n     * Fix crate parsing order so that types from the binding crate are preferred in presence of conflicting names. https://github.com/mozilla/cbindgen/pull/355\n     * Add extra_bindings option to generate bindings for dependencies. https://github.com/mozilla/cbindgen/pull/362\n     * Clap dependency is optional now so it's feasible to avoid building it if cbindgen is used as a library. https://github.com/mozilla/cbindgen/pull/363\n\n## 0.8.7\n\n     * Require C++11 to run the test-suite (#341, test-only)\n     * Improve mangling error message (#340)\n     * Add the ability to automatically derive copy-constructors for tagged enums (#339)\n     * Use placement new for constructing in tagged unions' helper methods (#333)\n\n## 0.8.6\n\n    * Fixed a panic when missing a lock file\n\n## 0.8.5\n\n    * Improved support for Rust 2018 modules\n    * Add possibility to autogenerate tagged union destructors\n\n## 0.8.4\n\n    * Support for package renaming in Cargo.toml\n    * Improved error messages for |cargo metadata| failures\n    * Replaced 'test.py' harness with |cargo test|\n    * Char constants will now be escaped properly\n    * Visibility of constants will now be respected\n    * Added a C99 doc comment style\n\n## 0.8.2\n\n     * Improvements to bitflags parsing\n\n## 0.8.1\n\n     * Support for manual parsing and expanding of bitflags macros\n     * Support for optional tagged enum casts with asserts\n\n## 0.8.0\n\n    * support for 'includes' without default includes\n    * removed dependency on ancient serde_derive!\n\n## 0.7.1\n\n    * Fix for crash when unwrapping unsupported type with associated constants\n\n## 0.7.0\n\n    * support for libc::ssize_t\n    * fixed some warnings on nightly\n    * fix for transparent associated constants\n    * switched more API's to use AsRef<Path>\n    * impl std::error::Error for cbindgen::Error\n    * now support putting user-defined content in item bodies\n\n## 0.6.8\n\n    * ptrdiff_t is now a recognized primitive type\n    * named function type arguments are now propagated\n    * fixes for struct literals in constants\n    * reserved C/C++ keywords are now escaped automatically\n    * negative enum discriminants are now supported\n    * fix for prefixing and formatting variant names\n    * fix for snake_case formatter\n    * syn update\n    * doxygen style comments are now output by default\n    * VaList is now a recognized primitive type\n    * fix for comment processing\n    * constant is propagated into array types\n    * references are now supported in IR, and used for some helper method generation\n    * assignment helper functions will generate array copies if necessary\n"
        },
        {
          "name": "Cargo.lock",
          "type": "blob",
          "size": 14.8203125,
          "content": "# This file is automatically @generated by Cargo.\n# It is not intended for manual editing.\nversion = 3\n\n[[package]]\nname = \"anstream\"\nversion = \"0.6.15\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"64e15c1ab1f89faffbf04a634d5e1962e9074f2741eef6d97f3c4e322426d526\"\ndependencies = [\n \"anstyle\",\n \"anstyle-parse\",\n \"anstyle-query\",\n \"anstyle-wincon\",\n \"colorchoice\",\n \"is_terminal_polyfill\",\n \"utf8parse\",\n]\n\n[[package]]\nname = \"anstyle\"\nversion = \"1.0.8\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1bec1de6f59aedf83baf9ff929c98f2ad654b97c9510f4e70cf6f661d49fd5b1\"\n\n[[package]]\nname = \"anstyle-parse\"\nversion = \"0.2.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"eb47de1e80c2b463c735db5b217a0ddc39d612e7ac9e2e96a5aed1f57616c1cb\"\ndependencies = [\n \"utf8parse\",\n]\n\n[[package]]\nname = \"anstyle-query\"\nversion = \"1.1.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"6d36fc52c7f6c869915e99412912f22093507da8d9e942ceaf66fe4b7c14422a\"\ndependencies = [\n \"windows-sys 0.52.0\",\n]\n\n[[package]]\nname = \"anstyle-wincon\"\nversion = \"3.0.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"5bf74e1b6e971609db8ca7a9ce79fd5768ab6ae46441c572e46cf596f59e57f8\"\ndependencies = [\n \"anstyle\",\n \"windows-sys 0.52.0\",\n]\n\n[[package]]\nname = \"autocfg\"\nversion = \"1.3.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"0c4b4d0bd25bd0b74681c0ad21497610ce1b7c91b1022cd21c80c6fbdd9476b0\"\n\n[[package]]\nname = \"bitflags\"\nversion = \"2.6.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b048fb63fd8b5923fc5aa7b340d8e156aec7ec02f0c78fa8a6ddc2613f6f71de\"\n\n[[package]]\nname = \"cbindgen\"\nversion = \"0.27.0\"\ndependencies = [\n \"clap\",\n \"heck\",\n \"indexmap\",\n \"log\",\n \"pretty_assertions\",\n \"proc-macro2\",\n \"quote\",\n \"serde\",\n \"serde_json\",\n \"serial_test\",\n \"syn\",\n \"tempfile\",\n \"toml\",\n]\n\n[[package]]\nname = \"cfg-if\"\nversion = \"1.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"baf1de4339761588bc0619e3cbc0120ee582ebb74b53b4efbf79117bd2da40fd\"\n\n[[package]]\nname = \"clap\"\nversion = \"4.5.15\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"11d8838454fda655dafd3accb2b6e2bea645b9e4078abe84a22ceb947235c5cc\"\ndependencies = [\n \"clap_builder\",\n]\n\n[[package]]\nname = \"clap_builder\"\nversion = \"4.5.15\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"216aec2b177652e3846684cbfe25c9964d18ec45234f0f5da5157b207ed1aab6\"\ndependencies = [\n \"anstream\",\n \"anstyle\",\n \"clap_lex\",\n \"strsim\",\n]\n\n[[package]]\nname = \"clap_lex\"\nversion = \"0.7.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1462739cb27611015575c0c11df5df7601141071f07518d56fcc1be504cbec97\"\n\n[[package]]\nname = \"colorchoice\"\nversion = \"1.0.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d3fd119d74b830634cea2a0f58bbd0d54540518a14397557951e79340abc28c0\"\n\n[[package]]\nname = \"dashmap\"\nversion = \"5.5.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"978747c1d849a7d2ee5e8adc0159961c48fb7e5db2f06af6723b80123bb53856\"\ndependencies = [\n \"cfg-if\",\n \"hashbrown\",\n \"lock_api\",\n \"once_cell\",\n \"parking_lot_core\",\n]\n\n[[package]]\nname = \"diff\"\nversion = \"0.1.13\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"56254986775e3233ffa9c4d7d3faaf6d36a2c09d30b20687e9f88bc8bafc16c8\"\n\n[[package]]\nname = \"equivalent\"\nversion = \"1.0.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"5443807d6dff69373d433ab9ef5378ad8df50ca6298caf15de6e52e24aaf54d5\"\n\n[[package]]\nname = \"errno\"\nversion = \"0.3.9\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"534c5cf6194dfab3db3242765c03bbe257cf92f22b38f6bc0c58d59108a820ba\"\ndependencies = [\n \"libc\",\n \"windows-sys 0.52.0\",\n]\n\n[[package]]\nname = \"fastrand\"\nversion = \"2.1.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"9fc0510504f03c51ada170672ac806f1f105a88aa97a5281117e1ddc3368e51a\"\n\n[[package]]\nname = \"hashbrown\"\nversion = \"0.14.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e5274423e17b7c9fc20b6e7e208532f9b19825d82dfd615708b70edd83df41f1\"\n\n[[package]]\nname = \"heck\"\nversion = \"0.4.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"95505c38b4572b2d910cecb0281560f54b440a19336cbbcb27bf6ce6adc6f5a8\"\n\n[[package]]\nname = \"indexmap\"\nversion = \"2.3.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"de3fc2e30ba82dd1b3911c8de1ffc143c74a914a14e99514d7637e3099df5ea0\"\ndependencies = [\n \"equivalent\",\n \"hashbrown\",\n]\n\n[[package]]\nname = \"is_terminal_polyfill\"\nversion = \"1.70.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"7943c866cc5cd64cbc25b2e01621d07fa8eb2a1a23160ee81ce38704e97b8ecf\"\n\n[[package]]\nname = \"itoa\"\nversion = \"1.0.11\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"49f1f14873335454500d59611f1cf4a4b0f786f9ac11f4312a78e4cf2566695b\"\n\n[[package]]\nname = \"lazy_static\"\nversion = \"1.5.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"bbd2bcb4c963f2ddae06a2efc7e9f3591312473c50c6685e1f298068316e66fe\"\n\n[[package]]\nname = \"libc\"\nversion = \"0.2.155\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"97b3888a4aecf77e811145cadf6eef5901f4782c53886191b2f693f24761847c\"\n\n[[package]]\nname = \"linux-raw-sys\"\nversion = \"0.4.14\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"78b3ae25bc7c8c38cec158d1f2757ee79e9b3740fbc7ccf0e59e4b08d793fa89\"\n\n[[package]]\nname = \"lock_api\"\nversion = \"0.4.12\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"07af8b9cdd281b7915f413fa73f29ebd5d55d0d3f0155584dade1ff18cea1b17\"\ndependencies = [\n \"autocfg\",\n \"scopeguard\",\n]\n\n[[package]]\nname = \"log\"\nversion = \"0.4.22\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a7a70ba024b9dc04c27ea2f0c0548feb474ec5c54bba33a7f72f873a39d07b24\"\n\n[[package]]\nname = \"memchr\"\nversion = \"2.7.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"78ca9ab1a0babb1e7d5695e3530886289c18cf2f87ec19a575a0abdce112e3a3\"\n\n[[package]]\nname = \"once_cell\"\nversion = \"1.19.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3fdb12b2476b595f9358c5161aa467c2438859caa136dec86c26fdd2efe17b92\"\n\n[[package]]\nname = \"parking_lot\"\nversion = \"0.12.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f1bf18183cf54e8d6059647fc3063646a1801cf30896933ec2311622cc4b9a27\"\ndependencies = [\n \"lock_api\",\n \"parking_lot_core\",\n]\n\n[[package]]\nname = \"parking_lot_core\"\nversion = \"0.9.10\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1e401f977ab385c9e4e3ab30627d6f26d00e2c73eef317493c4ec6d468726cf8\"\ndependencies = [\n \"cfg-if\",\n \"libc\",\n \"redox_syscall\",\n \"smallvec\",\n \"windows-targets\",\n]\n\n[[package]]\nname = \"pretty_assertions\"\nversion = \"1.4.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"af7cee1a6c8a5b9208b3cb1061f10c0cb689087b3d8ce85fb9d2dd7a29b6ba66\"\ndependencies = [\n \"diff\",\n \"yansi\",\n]\n\n[[package]]\nname = \"proc-macro2\"\nversion = \"1.0.86\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"5e719e8df665df0d1c8fbfd238015744736151d4445ec0836b8e628aae103b77\"\ndependencies = [\n \"unicode-ident\",\n]\n\n[[package]]\nname = \"quote\"\nversion = \"1.0.36\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"0fa76aaf39101c457836aec0ce2316dbdc3ab723cdda1c6bd4e6ad4208acaca7\"\ndependencies = [\n \"proc-macro2\",\n]\n\n[[package]]\nname = \"redox_syscall\"\nversion = \"0.5.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"2a908a6e00f1fdd0dfd9c0eb08ce85126f6d8bbda50017e74bc4a4b7d4a926a4\"\ndependencies = [\n \"bitflags\",\n]\n\n[[package]]\nname = \"rustix\"\nversion = \"0.38.34\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"70dc5ec042f7a43c4a73241207cecc9873a06d45debb38b329f8541d85c2730f\"\ndependencies = [\n \"bitflags\",\n \"errno\",\n \"libc\",\n \"linux-raw-sys\",\n \"windows-sys 0.52.0\",\n]\n\n[[package]]\nname = \"ryu\"\nversion = \"1.0.18\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f3cb5ba0dc43242ce17de99c180e96db90b235b8a9fdc9543c96d2209116bd9f\"\n\n[[package]]\nname = \"scopeguard\"\nversion = \"1.2.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"94143f37725109f92c262ed2cf5e59bce7498c01bcc1502d7b9afe439a4e9f49\"\n\n[[package]]\nname = \"serde\"\nversion = \"1.0.205\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e33aedb1a7135da52b7c21791455563facbbcc43d0f0f66165b42c21b3dfb150\"\ndependencies = [\n \"serde_derive\",\n]\n\n[[package]]\nname = \"serde_derive\"\nversion = \"1.0.205\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"692d6f5ac90220161d6774db30c662202721e64aed9058d2c394f451261420c1\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn\",\n]\n\n[[package]]\nname = \"serde_json\"\nversion = \"1.0.122\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"784b6203951c57ff748476b126ccb5e8e2959a5c19e5c617ab1956be3dbc68da\"\ndependencies = [\n \"itoa\",\n \"memchr\",\n \"ryu\",\n \"serde\",\n]\n\n[[package]]\nname = \"serde_spanned\"\nversion = \"0.6.7\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"eb5b1b31579f3811bf615c144393417496f152e12ac8b7663bf664f4a815306d\"\ndependencies = [\n \"serde\",\n]\n\n[[package]]\nname = \"serial_test\"\nversion = \"2.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"0e56dd856803e253c8f298af3f4d7eb0ae5e23a737252cd90bb4f3b435033b2d\"\ndependencies = [\n \"dashmap\",\n \"lazy_static\",\n \"parking_lot\",\n \"serial_test_derive\",\n]\n\n[[package]]\nname = \"serial_test_derive\"\nversion = \"2.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"91d129178576168c589c9ec973feedf7d3126c01ac2bf08795109aa35b69fb8f\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn\",\n]\n\n[[package]]\nname = \"smallvec\"\nversion = \"1.13.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3c5e1a9a646d36c3599cd173a41282daf47c44583ad367b8e6837255952e5c67\"\n\n[[package]]\nname = \"strsim\"\nversion = \"0.11.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"7da8b5736845d9f2fcb837ea5d9e2628564b3b043a70948a3f0b778838c5fb4f\"\n\n[[package]]\nname = \"syn\"\nversion = \"2.0.85\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"5023162dfcd14ef8f32034d8bcd4cc5ddc61ef7a247c024a33e24e1f24d21b56\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"unicode-ident\",\n]\n\n[[package]]\nname = \"tempfile\"\nversion = \"3.12.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"04cbcdd0c794ebb0d4cf35e88edd2f7d2c4c3e9a5a6dab322839b321c6a87a64\"\ndependencies = [\n \"cfg-if\",\n \"fastrand\",\n \"once_cell\",\n \"rustix\",\n \"windows-sys 0.59.0\",\n]\n\n[[package]]\nname = \"toml\"\nversion = \"0.8.19\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a1ed1f98e3fdc28d6d910e6737ae6ab1a93bf1985935a1193e68f93eeb68d24e\"\ndependencies = [\n \"serde\",\n \"serde_spanned\",\n \"toml_datetime\",\n \"toml_edit\",\n]\n\n[[package]]\nname = \"toml_datetime\"\nversion = \"0.6.8\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"0dd7358ecb8fc2f8d014bf86f6f638ce72ba252a2c3a2572f2a795f1d23efb41\"\ndependencies = [\n \"serde\",\n]\n\n[[package]]\nname = \"toml_edit\"\nversion = \"0.22.20\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"583c44c02ad26b0c3f3066fe629275e50627026c51ac2e595cca4c230ce1ce1d\"\ndependencies = [\n \"indexmap\",\n \"serde\",\n \"serde_spanned\",\n \"toml_datetime\",\n \"winnow\",\n]\n\n[[package]]\nname = \"unicode-ident\"\nversion = \"1.0.12\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3354b9ac3fae1ff6755cb6db53683adb661634f67557942dea4facebec0fee4b\"\n\n[[package]]\nname = \"utf8parse\"\nversion = \"0.2.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"06abde3611657adf66d383f00b093d7faecc7fa57071cce2578660c9f1010821\"\n\n[[package]]\nname = \"windows-sys\"\nversion = \"0.52.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"282be5f36a8ce781fad8c8ae18fa3f9beff57ec1b52cb3de0789201425d9a33d\"\ndependencies = [\n \"windows-targets\",\n]\n\n[[package]]\nname = \"windows-sys\"\nversion = \"0.59.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1e38bc4d79ed67fd075bcc251a1c39b32a1776bbe92e5bef1f0bf1f8c531853b\"\ndependencies = [\n \"windows-targets\",\n]\n\n[[package]]\nname = \"windows-targets\"\nversion = \"0.52.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"9b724f72796e036ab90c1021d4780d4d3d648aca59e491e6b98e725b84e99973\"\ndependencies = [\n \"windows_aarch64_gnullvm\",\n \"windows_aarch64_msvc\",\n \"windows_i686_gnu\",\n \"windows_i686_gnullvm\",\n \"windows_i686_msvc\",\n \"windows_x86_64_gnu\",\n \"windows_x86_64_gnullvm\",\n \"windows_x86_64_msvc\",\n]\n\n[[package]]\nname = \"windows_aarch64_gnullvm\"\nversion = \"0.52.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"32a4622180e7a0ec044bb555404c800bc9fd9ec262ec147edd5989ccd0c02cd3\"\n\n[[package]]\nname = \"windows_aarch64_msvc\"\nversion = \"0.52.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"09ec2a7bb152e2252b53fa7803150007879548bc709c039df7627cabbd05d469\"\n\n[[package]]\nname = \"windows_i686_gnu\"\nversion = \"0.52.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8e9b5ad5ab802e97eb8e295ac6720e509ee4c243f69d781394014ebfe8bbfa0b\"\n\n[[package]]\nname = \"windows_i686_gnullvm\"\nversion = \"0.52.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"0eee52d38c090b3caa76c563b86c3a4bd71ef1a819287c19d586d7334ae8ed66\"\n\n[[package]]\nname = \"windows_i686_msvc\"\nversion = \"0.52.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"240948bc05c5e7c6dabba28bf89d89ffce3e303022809e73deaefe4f6ec56c66\"\n\n[[package]]\nname = \"windows_x86_64_gnu\"\nversion = \"0.52.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"147a5c80aabfbf0c7d901cb5895d1de30ef2907eb21fbbab29ca94c5b08b1a78\"\n\n[[package]]\nname = \"windows_x86_64_gnullvm\"\nversion = \"0.52.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"24d5b23dc417412679681396f2b49f3de8c1473deb516bd34410872eff51ed0d\"\n\n[[package]]\nname = \"windows_x86_64_msvc\"\nversion = \"0.52.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"589f6da84c646204747d1270a2a5661ea66ed1cced2631d546fdfb155959f9ec\"\n\n[[package]]\nname = \"winnow\"\nversion = \"0.6.18\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"68a9bda4691f099d435ad181000724da8e5899daa10713c2d432552b9ccd3a6f\"\ndependencies = [\n \"memchr\",\n]\n\n[[package]]\nname = \"yansi\"\nversion = \"0.5.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"09041cd90cf85f7f8b2df60c646f853b7f535ce68f85244eb6731cf89fa498ec\"\n"
        },
        {
          "name": "Cargo.toml",
          "type": "blob",
          "size": 2.232421875,
          "content": "[package]\nname = \"cbindgen\"\nversion = \"0.27.0\"\nauthors = [\n  \"Emilio Cobos Álvarez <emilio@crisal.io>\",\n  \"Jeff Muizelaar <jmuizelaar@mozilla.com>\",\n  \"Kartikaya Gupta <kats@mozilla.com>\",\n  \"Ryan Hunt <rhunt@eqrion.net>\"\n]\nlicense = \"MPL-2.0\"\ndescription = \"A tool for generating C bindings to Rust code.\"\nkeywords = [\"bindings\", \"ffi\", \"code-generation\"]\ncategories = [\"external-ffi-bindings\", \"development-tools::ffi\"]\nrepository = \"https://github.com/mozilla/cbindgen\"\nedition = \"2018\"\nrust-version = \"1.74\"\nexclude = [\n  \"tests/profile.rs\", # Test relies in a sub-crate, see https://github.com/rust-lang/cargo/issues/9017\n]\n\n[dependencies]\nclap = { version = \"4.3\", optional = true }\nindexmap = \"2.1.0\"\nlog = \"0.4\"\nserde = { version = \"1.0.103\", default-features = false, features = [\"derive\"] }\nserde_json = \"1.0\"\ntempfile = \"3\"\ntoml = \"0.8.8\"\nproc-macro2 = \"1.0.60\"\nquote = \"1\"\nheck = \"0.4\"\n\n[dependencies.syn]\nversion = \"2.0.85\"\ndefault-features = false\nfeatures = [\"clone-impls\", \"extra-traits\", \"fold\", \"full\", \"parsing\", \"printing\"]\n\n[dev-dependencies]\nserial_test = { version = \"2.0.0\", default-features = false }\npretty_assertions = \"1.4.0\"\n\n[features]\ndefault =  [\"clap\"]\nunstable_ir = []\n\n[[bin]]\nname = \"cbindgen\"\npath = \"src/main.rs\"\ndoc = false\nrequired-features = [\"clap\"]\n\n[lib]\nname = \"cbindgen\"\npath = \"src/lib.rs\"\n\n[workspace]\nexclude = [\n  \"tests/depfile/single_crate_config\",\n  \"tests/depfile/single_crate_default_config\",\n  \"tests/depfile/single_crate\",\n  \"tests/rust/bitfield\",\n  \"tests/rust/dep_v2\",\n  \"tests/rust/dep_v2/dep\",\n  \"tests/rust/derive_eq\",\n  \"tests/rust/expand_default_features\",\n  \"tests/rust/expand_dep_v2\",\n  \"tests/rust/expand_dep_v2/dep_v2\",\n  \"tests/rust/expand_dep_v2/dep\",\n  \"tests/rust/expand_dep\",\n  \"tests/rust/expand_dep/dep\",\n  \"tests/rust/expand_features\",\n  \"tests/rust/expand_no_default_features\",\n  \"tests/rust/expand\",\n  \"tests/rust/external_workspace_child\",\n  \"tests/rust/literal_target\",\n  \"tests/rust/mod_2015\",\n  \"tests/rust/mod_2018\",\n  \"tests/rust/mod_attr\",\n  \"tests/rust/mod_path\",\n  \"tests/rust/package_version\",\n  \"tests/rust/rename_crate\",\n  \"tests/rust/rename_crate/dependency\",\n  \"tests/rust/rename_crate/no_extern\",\n  \"tests/rust/rename_crate/old_dep\",\n  \"tests/rust/workspace\",\n  \"tests/rust/workspace/dep\",\n]\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 16.3330078125,
          "content": "Mozilla Public License Version 2.0\n==================================\n\n1. Definitions\n--------------\n\n1.1. \"Contributor\"\n    means each individual or legal entity that creates, contributes to\n    the creation of, or owns Covered Software.\n\n1.2. \"Contributor Version\"\n    means the combination of the Contributions of others (if any) used\n    by a Contributor and that particular Contributor's Contribution.\n\n1.3. \"Contribution\"\n    means Covered Software of a particular Contributor.\n\n1.4. \"Covered Software\"\n    means Source Code Form to which the initial Contributor has attached\n    the notice in Exhibit A, the Executable Form of such Source Code\n    Form, and Modifications of such Source Code Form, in each case\n    including portions thereof.\n\n1.5. \"Incompatible With Secondary Licenses\"\n    means\n\n    (a) that the initial Contributor has attached the notice described\n        in Exhibit B to the Covered Software; or\n\n    (b) that the Covered Software was made available under the terms of\n        version 1.1 or earlier of the License, but not also under the\n        terms of a Secondary License.\n\n1.6. \"Executable Form\"\n    means any form of the work other than Source Code Form.\n\n1.7. \"Larger Work\"\n    means a work that combines Covered Software with other material, in\n    a separate file or files, that is not Covered Software.\n\n1.8. \"License\"\n    means this document.\n\n1.9. \"Licensable\"\n    means having the right to grant, to the maximum extent possible,\n    whether at the time of the initial grant or subsequently, any and\n    all of the rights conveyed by this License.\n\n1.10. \"Modifications\"\n    means any of the following:\n\n    (a) any file in Source Code Form that results from an addition to,\n        deletion from, or modification of the contents of Covered\n        Software; or\n\n    (b) any new file in Source Code Form that contains any Covered\n        Software.\n\n1.11. \"Patent Claims\" of a Contributor\n    means any patent claim(s), including without limitation, method,\n    process, and apparatus claims, in any patent Licensable by such\n    Contributor that would be infringed, but for the grant of the\n    License, by the making, using, selling, offering for sale, having\n    made, import, or transfer of either its Contributions or its\n    Contributor Version.\n\n1.12. \"Secondary License\"\n    means either the GNU General Public License, Version 2.0, the GNU\n    Lesser General Public License, Version 2.1, the GNU Affero General\n    Public License, Version 3.0, or any later versions of those\n    licenses.\n\n1.13. \"Source Code Form\"\n    means the form of the work preferred for making modifications.\n\n1.14. \"You\" (or \"Your\")\n    means an individual or a legal entity exercising rights under this\n    License. For legal entities, \"You\" includes any entity that\n    controls, is controlled by, or is under common control with You. For\n    purposes of this definition, \"control\" means (a) the power, direct\n    or indirect, to cause the direction or management of such entity,\n    whether by contract or otherwise, or (b) ownership of more than\n    fifty percent (50%) of the outstanding shares or beneficial\n    ownership of such entity.\n\n2. License Grants and Conditions\n--------------------------------\n\n2.1. Grants\n\nEach Contributor hereby grants You a world-wide, royalty-free,\nnon-exclusive license:\n\n(a) under intellectual property rights (other than patent or trademark)\n    Licensable by such Contributor to use, reproduce, make available,\n    modify, display, perform, distribute, and otherwise exploit its\n    Contributions, either on an unmodified basis, with Modifications, or\n    as part of a Larger Work; and\n\n(b) under Patent Claims of such Contributor to make, use, sell, offer\n    for sale, have made, import, and otherwise transfer either its\n    Contributions or its Contributor Version.\n\n2.2. Effective Date\n\nThe licenses granted in Section 2.1 with respect to any Contribution\nbecome effective for each Contribution on the date the Contributor first\ndistributes such Contribution.\n\n2.3. Limitations on Grant Scope\n\nThe licenses granted in this Section 2 are the only rights granted under\nthis License. No additional rights or licenses will be implied from the\ndistribution or licensing of Covered Software under this License.\nNotwithstanding Section 2.1(b) above, no patent license is granted by a\nContributor:\n\n(a) for any code that a Contributor has removed from Covered Software;\n    or\n\n(b) for infringements caused by: (i) Your and any other third party's\n    modifications of Covered Software, or (ii) the combination of its\n    Contributions with other software (except as part of its Contributor\n    Version); or\n\n(c) under Patent Claims infringed by Covered Software in the absence of\n    its Contributions.\n\nThis License does not grant any rights in the trademarks, service marks,\nor logos of any Contributor (except as may be necessary to comply with\nthe notice requirements in Section 3.4).\n\n2.4. Subsequent Licenses\n\nNo Contributor makes additional grants as a result of Your choice to\ndistribute the Covered Software under a subsequent version of this\nLicense (see Section 10.2) or under the terms of a Secondary License (if\npermitted under the terms of Section 3.3).\n\n2.5. Representation\n\nEach Contributor represents that the Contributor believes its\nContributions are its original creation(s) or it has sufficient rights\nto grant the rights to its Contributions conveyed by this License.\n\n2.6. Fair Use\n\nThis License is not intended to limit any rights You have under\napplicable copyright doctrines of fair use, fair dealing, or other\nequivalents.\n\n2.7. Conditions\n\nSections 3.1, 3.2, 3.3, and 3.4 are conditions of the licenses granted\nin Section 2.1.\n\n3. Responsibilities\n-------------------\n\n3.1. Distribution of Source Form\n\nAll distribution of Covered Software in Source Code Form, including any\nModifications that You create or to which You contribute, must be under\nthe terms of this License. You must inform recipients that the Source\nCode Form of the Covered Software is governed by the terms of this\nLicense, and how they can obtain a copy of this License. You may not\nattempt to alter or restrict the recipients' rights in the Source Code\nForm.\n\n3.2. Distribution of Executable Form\n\nIf You distribute Covered Software in Executable Form then:\n\n(a) such Covered Software must also be made available in Source Code\n    Form, as described in Section 3.1, and You must inform recipients of\n    the Executable Form how they can obtain a copy of such Source Code\n    Form by reasonable means in a timely manner, at a charge no more\n    than the cost of distribution to the recipient; and\n\n(b) You may distribute such Executable Form under the terms of this\n    License, or sublicense it under different terms, provided that the\n    license for the Executable Form does not attempt to limit or alter\n    the recipients' rights in the Source Code Form under this License.\n\n3.3. Distribution of a Larger Work\n\nYou may create and distribute a Larger Work under terms of Your choice,\nprovided that You also comply with the requirements of this License for\nthe Covered Software. If the Larger Work is a combination of Covered\nSoftware with a work governed by one or more Secondary Licenses, and the\nCovered Software is not Incompatible With Secondary Licenses, this\nLicense permits You to additionally distribute such Covered Software\nunder the terms of such Secondary License(s), so that the recipient of\nthe Larger Work may, at their option, further distribute the Covered\nSoftware under the terms of either this License or such Secondary\nLicense(s).\n\n3.4. Notices\n\nYou may not remove or alter the substance of any license notices\n(including copyright notices, patent notices, disclaimers of warranty,\nor limitations of liability) contained within the Source Code Form of\nthe Covered Software, except that You may alter any license notices to\nthe extent required to remedy known factual inaccuracies.\n\n3.5. Application of Additional Terms\n\nYou may choose to offer, and to charge a fee for, warranty, support,\nindemnity or liability obligations to one or more recipients of Covered\nSoftware. However, You may do so only on Your own behalf, and not on\nbehalf of any Contributor. You must make it absolutely clear that any\nsuch warranty, support, indemnity, or liability obligation is offered by\nYou alone, and You hereby agree to indemnify every Contributor for any\nliability incurred by such Contributor as a result of warranty, support,\nindemnity or liability terms You offer. You may include additional\ndisclaimers of warranty and limitations of liability specific to any\njurisdiction.\n\n4. Inability to Comply Due to Statute or Regulation\n---------------------------------------------------\n\nIf it is impossible for You to comply with any of the terms of this\nLicense with respect to some or all of the Covered Software due to\nstatute, judicial order, or regulation then You must: (a) comply with\nthe terms of this License to the maximum extent possible; and (b)\ndescribe the limitations and the code they affect. Such description must\nbe placed in a text file included with all distributions of the Covered\nSoftware under this License. Except to the extent prohibited by statute\nor regulation, such description must be sufficiently detailed for a\nrecipient of ordinary skill to be able to understand it.\n\n5. Termination\n--------------\n\n5.1. The rights granted under this License will terminate automatically\nif You fail to comply with any of its terms. However, if You become\ncompliant, then the rights granted under this License from a particular\nContributor are reinstated (a) provisionally, unless and until such\nContributor explicitly and finally terminates Your grants, and (b) on an\nongoing basis, if such Contributor fails to notify You of the\nnon-compliance by some reasonable means prior to 60 days after You have\ncome back into compliance. Moreover, Your grants from a particular\nContributor are reinstated on an ongoing basis if such Contributor\nnotifies You of the non-compliance by some reasonable means, this is the\nfirst time You have received notice of non-compliance with this License\nfrom such Contributor, and You become compliant prior to 30 days after\nYour receipt of the notice.\n\n5.2. If You initiate litigation against any entity by asserting a patent\ninfringement claim (excluding declaratory judgment actions,\ncounter-claims, and cross-claims) alleging that a Contributor Version\ndirectly or indirectly infringes any patent, then the rights granted to\nYou by any and all Contributors for the Covered Software under Section\n2.1 of this License shall terminate.\n\n5.3. In the event of termination under Sections 5.1 or 5.2 above, all\nend user license agreements (excluding distributors and resellers) which\nhave been validly granted by You or Your distributors under this License\nprior to termination shall survive termination.\n\n************************************************************************\n*                                                                      *\n*  6. Disclaimer of Warranty                                           *\n*  -------------------------                                           *\n*                                                                      *\n*  Covered Software is provided under this License on an \"as is\"       *\n*  basis, without warranty of any kind, either expressed, implied, or  *\n*  statutory, including, without limitation, warranties that the       *\n*  Covered Software is free of defects, merchantable, fit for a        *\n*  particular purpose or non-infringing. The entire risk as to the     *\n*  quality and performance of the Covered Software is with You.        *\n*  Should any Covered Software prove defective in any respect, You     *\n*  (not any Contributor) assume the cost of any necessary servicing,   *\n*  repair, or correction. This disclaimer of warranty constitutes an   *\n*  essential part of this License. No use of any Covered Software is   *\n*  authorized under this License except under this disclaimer.         *\n*                                                                      *\n************************************************************************\n\n************************************************************************\n*                                                                      *\n*  7. Limitation of Liability                                          *\n*  --------------------------                                          *\n*                                                                      *\n*  Under no circumstances and under no legal theory, whether tort      *\n*  (including negligence), contract, or otherwise, shall any           *\n*  Contributor, or anyone who distributes Covered Software as          *\n*  permitted above, be liable to You for any direct, indirect,         *\n*  special, incidental, or consequential damages of any character      *\n*  including, without limitation, damages for lost profits, loss of    *\n*  goodwill, work stoppage, computer failure or malfunction, or any    *\n*  and all other commercial damages or losses, even if such party      *\n*  shall have been informed of the possibility of such damages. This   *\n*  limitation of liability shall not apply to liability for death or   *\n*  personal injury resulting from such party's negligence to the       *\n*  extent applicable law prohibits such limitation. Some               *\n*  jurisdictions do not allow the exclusion or limitation of           *\n*  incidental or consequential damages, so this exclusion and          *\n*  limitation may not apply to You.                                    *\n*                                                                      *\n************************************************************************\n\n8. Litigation\n-------------\n\nAny litigation relating to this License may be brought only in the\ncourts of a jurisdiction where the defendant maintains its principal\nplace of business and such litigation shall be governed by laws of that\njurisdiction, without reference to its conflict-of-law provisions.\nNothing in this Section shall prevent a party's ability to bring\ncross-claims or counter-claims.\n\n9. Miscellaneous\n----------------\n\nThis License represents the complete agreement concerning the subject\nmatter hereof. If any provision of this License is held to be\nunenforceable, such provision shall be reformed only to the extent\nnecessary to make it enforceable. Any law or regulation which provides\nthat the language of a contract shall be construed against the drafter\nshall not be used to construe this License against a Contributor.\n\n10. Versions of the License\n---------------------------\n\n10.1. New Versions\n\nMozilla Foundation is the license steward. Except as provided in Section\n10.3, no one other than the license steward has the right to modify or\npublish new versions of this License. Each version will be given a\ndistinguishing version number.\n\n10.2. Effect of New Versions\n\nYou may distribute the Covered Software under the terms of the version\nof the License under which You originally received the Covered Software,\nor under the terms of any subsequent version published by the license\nsteward.\n\n10.3. Modified Versions\n\nIf you create software not governed by this License, and you want to\ncreate a new license for such software, you may create and use a\nmodified version of this License if you rename the license and remove\nany references to the name of the license steward (except to note that\nsuch modified license differs from this License).\n\n10.4. Distributing Source Code Form that is Incompatible With Secondary\nLicenses\n\nIf You choose to distribute Source Code Form that is Incompatible With\nSecondary Licenses under the terms of this version of the License, the\nnotice described in Exhibit B of this License must be attached.\n\nExhibit A - Source Code Form License Notice\n-------------------------------------------\n\n  This Source Code Form is subject to the terms of the Mozilla Public\n  License, v. 2.0. If a copy of the MPL was not distributed with this\n  file, You can obtain one at http://mozilla.org/MPL/2.0/.\n\nIf it is not possible or desirable to put the notice in a particular\nfile, then You may include the notice in a location (such as a LICENSE\nfile in a relevant directory) where a recipient would be likely to look\nfor such a notice.\n\nYou may add additional accurate notices of copyright ownership.\n\nExhibit B - \"Incompatible With Secondary Licenses\" Notice\n---------------------------------------------------------\n\n  This Source Code Form is \"Incompatible With Secondary Licenses\", as\n  defined by the Mozilla Public License, v. 2.0.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 4.1865234375,
          "content": "# `cbindgen` &emsp; [![Build Status]][actions] [![Latest Version]][crates.io] [![Api Rustdoc]][rustdoc] [![Rust](https://img.shields.io/badge/rust-1.70%2B-blue.svg?maxAge=3600)](https://github.com/mozilla/cbindgen)\n\n[Build Status]: https://github.com/mozilla/cbindgen/workflows/cbindgen/badge.svg\n[actions]: https://github.com/mozilla/cbindgen/actions\n[Latest Version]: https://img.shields.io/crates/v/cbindgen.svg\n[crates.io]: https://crates.io/crates/cbindgen\n[Api Rustdoc]: https://img.shields.io/badge/api-rustdoc-blue.svg\n[rustdoc]: https://docs.rs/cbindgen\n\n[Read the full user docs here!](https://github.com/mozilla/cbindgen/blob/master/docs.md)\n\ncbindgen creates C/C++11 headers for Rust libraries which expose a public C API.\n\nWhile you could do this by hand, it's not a particularly good use of your time.\nIt's also much more likely to be error-prone than machine-generated headers that\nare based on your actual Rust code. The cbindgen developers have also worked\nclosely with the developers of Rust to ensure that the headers we generate\nreflect actual guarantees about Rust's type layout and ABI.\n\nC++ headers are nice because we can use operator overloads, constructors, enum\nclasses, and templates to make the API more ergonomic and Rust-like. C headers\nare nice because you can be more confident that whoever you're interoperating\nwith can handle them. With cbindgen *you don't need to choose*! You can just\ntell it to emit both from the same Rust library.\n\nThere are two ways to use cbindgen: as a standalone program, or as a library\n(presumably in your build.rs). There isn't really much practical difference,\nbecause cbindgen is a simple rust library with no interesting dependencies.\n\nUsing it as a program means people building your software will need it\ninstalled. Using it in your library means people may have to build cbindgen more\nfrequently (e.g. every time they update their rust compiler).\n\nIt's worth noting that the development of cbindgen has been largely adhoc, as\nfeatures have been added to support the usecases of the maintainers. This means\ncbindgen may randomly fail to support some particular situation simply because\nno one has put in the effort to handle it yet. [Please file an issue if you run\ninto such a situation](https://github.com/mozilla/cbindgen/issues/new). Although\nsince we all have other jobs, you might need to do the implementation work too\n:)\n\n# Quick Start\n\nTo install cbindgen, you just need to run\n\n```text\ncargo install --force cbindgen\n```\n\n(--force just makes it update to the latest cbindgen if it's already installed)\n\nOr with Homebrew, run\n\n```text\nbrew install cbindgen\n```\n\nTo use cbindgen you need two things:\n\n* A configuration (cbindgen.toml, which can be empty to start)\n* A Rust crate with a public C API\n\nThen all you need to do is run it:\n\n```text\ncbindgen --config cbindgen.toml --crate my_rust_library --output my_header.h\n```\n\nThis produces a header file for C++.  For C, add the `--lang c` switch.\n\nSee `cbindgen --help` for more options.\n\n[Read the full user docs here!](docs.md)\n\n[Get a template cbindgen.toml here.](template.toml)\n\n# Examples\n\nWe don't currently have a nice tailored example application, but [the\ntests](tests/rust/) contain plenty of interesting examples of our features.\n\nYou may also find it interesting to browse the projects that are using cbindgen\nin production:\n\n* [milksnake](https://github.com/getsentry/milksnake)\n* [webrender](https://searchfox.org/mozilla-central/source/gfx/webrender_bindings) ([generated header](https://searchfox.org/mozilla-central/source/__GENERATED__/gfx/webrender_bindings/webrender_ffi_generated.h))\n* [stylo](https://searchfox.org/mozilla-central/source/layout/style) ([generated header](https://searchfox.org/mozilla-central/source/__GENERATED__/layout/style/ServoStyleConsts.h))\n* [maturin](https://github.com/PyO3/maturin)\n* [tquic](https://github.com/Tencent/tquic) ([generated header](https://github.com/Tencent/tquic/blob/develop/include/tquic.h))\n\nIf you're using `cbindgen` and would like to be added to this list, please open\na pull request!\n\n# Releases\n\ncbindgen doesn't have a fixed release calendar, please file an issue requesting\na release if there's something fixed in trunk that you need released. Ping\n`@emilio` for increased effect.\n"
        },
        {
          "name": "build.rs",
          "type": "blob",
          "size": 2.662109375,
          "content": "fn generate_tests() {\n    use std::env;\n    use std::ffi::OsStr;\n    use std::fs::{self, File};\n    use std::io::Write;\n    use std::path::{Path, PathBuf};\n\n    let out_dir = PathBuf::from(env::var(\"OUT_DIR\").unwrap());\n    let mut dst = File::create(Path::new(&out_dir).join(\"tests.rs\")).unwrap();\n\n    let manifest_dir = PathBuf::from(env::var(\"CARGO_MANIFEST_DIR\").unwrap());\n    let tests_dir = manifest_dir.join(\"tests\").join(\"rust\");\n    let tests = fs::read_dir(&tests_dir).unwrap();\n\n    let entries = tests.map(|t| t.expect(\"Couldn't read test file\"));\n\n    println!(\"cargo:rerun-if-changed={}\", tests_dir.display());\n\n    for entry in entries {\n        let path_segment = if entry.file_type().unwrap().is_file() {\n            match entry.path().extension().and_then(OsStr::to_str) {\n                Some(\"rs\") => {}\n                _ => continue,\n            };\n\n            entry\n                .path()\n                .file_stem()\n                .unwrap()\n                .to_str()\n                .unwrap()\n                .to_owned()\n        } else {\n            entry.file_name().to_str().unwrap().to_owned()\n        };\n\n        let identifier = path_segment\n            .replace(|c| !char::is_alphanumeric(c), \"_\")\n            .replace(\"__\", \"_\");\n\n        writeln!(\n            dst,\n            \"test_file!(test_{}, {:?}, {:?});\",\n            identifier,\n            path_segment,\n            entry.path(),\n        )\n        .unwrap();\n    }\n\n    dst.flush().unwrap();\n}\n\nfn generate_depfile_tests() {\n    use std::env;\n    use std::fs::{self, File};\n    use std::io::Write;\n    use std::path::{Path, PathBuf};\n\n    let out_dir = PathBuf::from(env::var(\"OUT_DIR\").unwrap());\n    let mut dst = File::create(Path::new(&out_dir).join(\"depfile_tests.rs\")).unwrap();\n\n    let manifest_dir = PathBuf::from(env::var(\"CARGO_MANIFEST_DIR\").unwrap());\n    let tests_dir = manifest_dir.join(\"tests\").join(\"depfile\");\n    let tests = fs::read_dir(&tests_dir).unwrap();\n\n    let entries = tests.map(|t| t.expect(\"Couldn't read test file\"));\n\n    println!(\"cargo:rerun-if-changed={}\", tests_dir.display());\n\n    for entry in entries {\n        if entry.file_type().unwrap().is_file() {\n            continue;\n        };\n        let path_segment = entry.file_name().to_str().unwrap().to_owned();\n\n        let identifier = path_segment\n            .replace(|c| !char::is_alphanumeric(c), \"_\")\n            .replace(\"__\", \"_\");\n\n        writeln!(\n            dst,\n            \"test_file!(test_depfile_{}, {:?}, {:?});\",\n            identifier,\n            path_segment,\n            entry.path(),\n        )\n        .unwrap();\n    }\n\n    dst.flush().unwrap();\n}\n\nfn main() {\n    generate_tests();\n    generate_depfile_tests();\n}\n"
        },
        {
          "name": "contributing.md",
          "type": "blob",
          "size": 1.517578125,
          "content": "# Contributing\n\nThanks for wanting to contribute!\n\nIf you want help or mentorship, please file a GitHub issue and I'll be sure to provide guidance to the best of my ability.\n\nOtherwise be sure to check out `internals.md` for an overview on the internals.\n\n## Filing a pull request\n\nCheck out [Servo's GitHub workflow](https://github.com/servo/servo/wiki/Github-workflow) for an overview on creating a pull request.\n\nDon't worry about requesting code review, as there is nothing formally setup for this repository. I try and review each pull request as soon as I can.\n\nThere is continuous integration setup for `cbindgen` using [GitHub Actions](https://github.com/mozilla/cbindgen/actions). It automatically runs `cargo test` which runs `cbindgen` against a series of Rust files from `tests/rust/` and checks that the output compiles using `gcc` or `g++`.\n\nIn addition to a C/C++ compiler `cargo test` requires Python and Cython\n(`python -m pip install Cython`) for checking Cython bindings generated from tests (`.pyx` files).\nNote that the tests will be failed with Cython 3.x or later.\n\nPlease run `cargo test` before filing a pull request to be sure that all tests pass. This will also update the test expectations.\n\nRustfmt is also enforced by GitHub Actions. To format your code install `rustfmt-preview` using `rustup component add rustfmt-preview` and then `cargo fmt`. GitHub Actions runs with Rust nightly, so use `rustup run nightly -- cargo fmt` to guarantee consistent results.\n\nWriting new tests with your pull requests is also appreciated.\n"
        },
        {
          "name": "docs.md",
          "type": "blob",
          "size": 40.9140625,
          "content": "# cbindgen User Guide\n\ncbindgen creates C/C++11 headers for Rust libraries which expose a public C API.\n\nWhile you could do this by hand, it's not a particularly good use of your time. It's also much more likely to be error-prone than machine-generated headers that are based on your actual Rust code. The cbindgen developers have also worked closely with the developers of Rust to ensure that the headers we generate reflect actual guarantees about Rust's type layout and ABI.\n\nC++ headers are nice because we can use operator overloads, constructors, enum classes, and templates to make the API more ergonomic and Rust-like. C headers are nice because you can be more confident that whoever you're interoperating with can handle them. With cbindgen *you don't need to choose*! You can just tell it to emit both from the same Rust library.\n\nThere are two ways to use cbindgen: as a standalone program, or as a library (presumably in your build.rs).\nThere isn't really much practical difference, because cbindgen is a simple rust library with no interesting dependencies. Using it as a program means people building your software will need it installed. Using it in your library means people may have to build cbindgen more frequently (e.g. every time they update their rust compiler).\n\nIt's worth noting that the development of cbindgen has been largely adhoc, as features have been added to support the usecases of the maintainers. This means cbindgen may randomly fail to support some particular situation simply because no one has put in the effort to handle it yet. [Please file an issue if you run into such a situation][file-it]. Although since we all have other jobs, you might need to do the implementation work too :)\n\n\n\n\n\n# Quick Start\n\nTo install cbindgen, you just need to run\n\n```text\ncargo install --force cbindgen\n```\n\n(--force just makes it update to the latest cbindgen if it's already installed)\n\nTo use cbindgen you need two things:\n\n* A configuration (cbindgen.toml, which can be empty to start)\n* A Rust crate with a public C API\n\nThen all you need to do is run it:\n\n```text\ncbindgen --config cbindgen.toml --crate my_rust_library --output my_header.h\n```\n\nThis produces a header file for C++.  For C, add the `--lang c` switch. \\\n`cbindgen` also supports generation of [Cython](https://cython.org) bindings,\nuse `--lang cython` for that.\n\nSee `cbindgen --help` for more options.\n\n[Get a template cbindgen.toml here.](template.toml)\n\n\n\n## build.rs\n\nIf you don't want to use cbindgen as an application, here's an example build.rs script:\n\n```rust\nextern crate cbindgen;\n\nuse std::env;\n\nfn main() {\n    let crate_dir = env::var(\"CARGO_MANIFEST_DIR\").unwrap();\n\n    cbindgen::Builder::new()\n      .with_crate(crate_dir)\n      .generate()\n      .expect(\"Unable to generate bindings\")\n      .write_to_file(\"bindings.h\");\n}\n```\n\nYou can add configuration options using the [`Builder`](https://docs.rs/cbindgen/*/cbindgen/struct.Builder.html#methods) interface.\n\nWhen actively working on code, you likely don't want cbindgen to fail the entire build. Instead of expect-ing the result of the header generation, you could [ignore parse errors](https://github.com/mozilla/cbindgen/issues/472#issuecomment-831439826) and let rustc or your code analysis bring up:\n\n```rust\n    // ...\n    .generate()\n    .map_or_else(\n        |error| match error {\n            cbindgen::Error::ParseSyntaxError { .. } => {}\n            e => panic!(\"{:?}\", e),\n        },\n        |bindings| {\n            bindings.write_to_file(\"target/include/bindings.h\");\n        },\n    );\n}\n```\n\nBe sure to add the following section to your Cargo.toml:\n\n```\n[build-dependencies]\ncbindgen = \"0.24.0\"\n```\n\nIf you'd like to use a `build.rs` script with a `cbindgen.toml`, consider using [`cbindgen::generate()`](https://docs.rs/cbindgen/*/cbindgen/fn.generate.html) instead.\n\n## Internal Representation\n\nSome users may find it useful to access the **unstable** internal representation (IR) that cbindgen uses to parse and generate code. By default, the IR is private, but you can access it by enabling the `\"unstable_ir\"` feature flag like so:\n\n```\n[build-dependencies]\ncbindgen = { version = \"0.27.0\", features = [\"unstable_ir\"] }\n```\n\nThis opens up the `cbindgen::bindgen::ir` module.\n\nPlease remember that the IR is **not stable**, so if you use this feature, you will need to pin cbindgen to avoid breakages.\n\n# Writing Your C API\n\ncbindgen has a simple but effective strategy. It walks through your crate looking for:\n\n* `#[no_mangle] pub extern fn` (\"functions\")\n* `#[no_mangle] pub static` (\"globals\")\n* `pub const` (\"constants\")\n\nand generates a header declaring those items. But to declare those items, it needs to also be able to describe the layout and ABI of the types that appear in their signatures. So it will also spider through your crate (and optionally its dependencies) to try to find the definitions of every type used in your public API.\n\n> 🚨 NOTE: A major limitation of cbindgen is that it does not understand Rust's module system or namespacing. This means that if cbindgen sees that it needs the definition for `MyType` and there exists two things in your project with the type name `MyType`, it won't know what to do. Currently, cbindgen's behaviour is unspecified if this happens. However this may be ok if they have [different cfgs][section-cfgs].\n\nIf a type is determined to have a guaranteed layout, a full definition will be emitted in the header. If the type doesn't have a guaranteed layout, only a forward declaration will be emitted. This may be fine if the type is intended to be passed around opaquely and by reference.\n\n\n\n\n# Examples\n\n🚧 🏗\n\nIt would be really nice to have some curated and clean examples, but we don't have those yet.\n\n[The README has some useful links though](README.md#examples).\n\n\n\n# Supported Types\n\nMost things in Rust don't have a guaranteed layout by default. In most cases this is nice because it enables layout to be optimized in the majority of cases where type layout isn't that interesting. However this is problematic for our purposes. Thankfully Rust lets us opt into guaranteed layouts with the `repr` attribute.\n\nYou can learn about all of the different repr attributes [by reading Rust's reference][reference], but here's a quick summary:\n\n* `#[repr(C)]`: give this struct/union/enum the same layout and ABI C would\n* `#[repr(u8, u16, ... etc)]`: give this enum the same layout and ABI as the given integer type\n* `#[repr(transparent)]`: give this single-field struct the same ABI as its field (useful for newtyping integers but keeping the integer ABI)\n\ncbindgen supports the `#[repr(align(N))]` and `#[repr(packed)]` attributes, but currently does not support `#[repr(packed(N))]`.\n\ncbindgen also supports using `repr(C)`/`repr(u8)` on non-C-like enums (enums with fields). This gives a C-compatible tagged union layout, as [defined by this RFC 2195][really-tagged-unions]. `repr(C)` will give a simpler layout that is perhaps more intuitive, while `repr(u8)` will produce a more compact layout.\n\nIf you ensure everything has a guaranteed repr, then cbindgen will generate definitions for:\n\n* struct (named-style or tuple-style)\n* enum (fieldless or with fields)\n* union\n* type\n* `[T; n]` (arrays always have a guaranteed C-compatible layout)\n* `&T`, `&mut T`, `*const T`, `*mut T`, `Option<&T>`, `Option<&mut T>` (all have the same pointer ABI)\n* `fn()` (as an actual function pointer)\n* `bitflags! { ... }` (if macro_expansion.bitflags is enabled)\n\nstructs, enums, unions, and type aliases may be generic, although certain generic substitutions may fail to resolve under certain configurations. In C mode generics are resolved through monomorphization and mangling, while in C++ mode generics are resolved with templates. cbindgen cannot support generic functions, as they do not actually have a single defined symbol.\n\ncbindgen sadly cannot ever support anonymous tuples `(A, B, ...)`, as there is no way to guarantee their layout. You must use a tuple struct.\n\ncbindgen also cannot support wide pointers like `&dyn Trait` or `&[T]`, as their layout and ABI is not guaranteed. In the case of slices you can at least decompose them into a pointer and length, and reconstruct them with `slice::from_raw_parts`.\n\nIf cbindgen determines that a type is zero-sized, it will erase all references to that type (so fields of that type simply won't be emitted). This won't work if that type appears as a function argument because C, C++, and Rust all have different definitions of what it means for a type to be empty.\n\nDon't use the `[u64; 0]` trick to over-align a struct, we don't support this.\n\ncbindgen contains the following hardcoded mappings (again completely ignoring namespacing, literally just looking at the name of the type):\n\n\n\n\n## std types\n\n* bool => bool\n* char => uint32_t\n* u8 => uint8_t\n* u16 => uint16_t\n* u32 => uint32_t\n* u64 => uint64_t\n* usize => uintptr_t\n* i8 => int8_t\n* i16 => int16_t\n* i32 => int32_t\n* i64 => int64_t\n* isize => intptr_t\n* f32 => float\n* f64 => double\n* VaList => va_list\n* RawFd => int\n* PhantomData => *evaporates*, can only appear as the field of a type\n* PhantomPinned => *evaporates*, can only appear as the field of a type  \n* () => *evaporates*, can only appear as the field of a type\n* MaybeUninit<T>, ManuallyDrop<T>, and Pin<T> => T\n\n\n\n\n## libc types\n\n* c_void => void\n* c_char => char\n* c_schar => signed char\n* c_uchar => unsigned char\n* c_float => float\n* c_double => double\n* c_short => short\n* c_int => int\n* c_long => long\n* c_longlong => long long\n* c_ushort => unsigned short\n* c_uint => unsigned int\n* c_ulong => unsigned long\n* c_ulonglong => unsigned long long\n\n\n\n## stdint types\n\n* uint8_t => uint8_t\n* uint16_t => uint16_t\n* uint32_t => uint32_t\n* uint64_t => uint64_t\n* uintptr_t => uintptr_t\n* size_t => size_t\n* int8_t => int8_t\n* int16_t => int16_t\n* int32_t => int32_t\n* int64_t => int64_t\n* intptr_t => intptr_t\n* ssize_t => ssize_t\n* ptrdiff_t => ptrdiff_t\n\n\n\n\n\n\n# Configuring Your Header\n\ncbindgen supports several different options for configuring the output of your header, including target language, styling, mangling, prefixing, includes, and defines.\n\n\n\n\n\n## Defines and Cfgs\n\nAs cbindgen spiders through your crate, it will make note of all the cfgs it found on the path to every item. If it finds multiple declarations that share a single name but have different cfgs, it will then try to emit every version it found wrapped in defines that correspond to those cfgs. In this way platform-specific APIs or representations can be properly supported.\n\nHowever cbindgen has no way of knowing how you want to map those cfgs to defines. You will need to use the `[defines]` section in your cbindgen.toml to specify all the different mappings. It natively understands concepts like any() and all(), so you only need to tell it how you want to translate base concepts like `target_os = \"freebsd\"` or `feature = \"serde\"`.\n\nNote that because cbindgen just parses the source of your crate, you mostly don't need to worry about what crate features or what platform you're targetting. Every possible configuration should be visible to the parser. Our primitive mappings should also be completely platform agnostic (i32 is int32_t regardless of your target).\n\nWhile modules within a crate form a tree with uniquely defined paths to each item, and therefore uniquely defined cfgs for those items, dependencies do not. If you depend on a crate in multiple ways, and those ways produce different cfgs, one of them will be arbitrarily chosen for any types found in that crate.\n\n\n\n\n## Annotations\n\nWhile output configuration is primarily done through the cbindgen.toml, in some cases you need to manually override your global settings. In those cases you can add inline annotations to your types, which are doc comments that start with `cbindgen:`. Here's an example of using annotations to rename a struct's fields and opt into overloading `operator==`:\n\n```rust\n/// cbindgen:field-names=[x, y]\n/// cbindgen:derive-eq\n#[repr(C)]\npub struct Point(pub f32, pub f32);\n```\n\nAn annotation may be a bool, string (no quotes), or list of strings. If just the annotation's name is provided, `=true` is assumed. The annotation parser is currently fairly naive and lacks any capacity for escaping, so don't try to make any strings with `=`, `,`, `[` or `]`.\n\nMost annotations are just local overrides for identical settings in the cbindgen.toml, but a few are unique because they don't make sense in a global context. The set of supported annotation are as follows:\n\n### Ignore annotation\n\ncbindgen will automatically ignore any `#[test]` or `#[cfg(test)]` item it\nfinds. You can manually ignore other stuff with the `ignore` annotation\nattribute:\n\n```rust\npub mod my_interesting_mod;\n\n/// cbindgen:ignore\npub mod my_uninteresting_mod; // This won't be scanned by cbindgen.\n```\n\n### No export annotation\n\ncbindgen will usually emit all items it finds, as instructed by the parse and export config sections. This annotation will make cbindgen skip this item from the output, while still being aware of it. This is useful for a) suppressing \"Can't find\" errors and b) emitting `struct my_struct` for types in a different header (rather than a bare `my_struct`).\n\nThere is no equivalent config for this annotation - by comparison, the export exclude config will cause cbindgen to not be aware of the item at all.\n\nNote that cbindgen will still traverse `no-export` structs that are `repr(C)` to emit types present in the fields. You will need to manually exclude those types in your config if desired.\n\n```\n/// cbindgen:no-export\n#[repr(C)]\npub struct Foo { .. }; // This won't be emitted by cbindgen in the header\n\n#[repr(C)]\nfn bar() -> Foo { .. } // Will be emitted as `struct foo bar();`\n```\n\n### Struct Annotations\n\n* field-names=\\[field1, field2, ...\\] -- sets the names of all the fields in the output struct. These names will be output verbatim, and are not eligible for renaming.\n\nThe rest are just local overrides for the same options found in the cbindgen.toml:\n\n* rename-all=RenameRule\n* derive-constructor\n* derive-eq\n* derive-neq\n* derive-lt\n* derive-lte\n* derive-gt\n* derive-gte\n* {eq,neq,lt,lte,gt,gte}-attributes: Takes a single identifier which will be\n  emitted before the signature of the auto-generated `operator==` / `operator!=`\n  / etc(if any). The idea is for this to be used to annotate the operator with\n  attributes, for example:\n\n```rust\n/// cbindgen:eq-attributes=MY_ATTRIBUTES\n#[repr(C)]\npub struct Foo { .. }\n```\n\nWill generate something like:\n\n```\n  MY_ATTRIBUTES bool operator==(const Foo& other) const {\n    ...\n  }\n```\n\nCombined with something like:\n\n```\n#define MY_ATTRIBUTES [[nodiscard]]\n```\n\nfor example.\n\n### Enum Annotations\n\n* enum-trailing-values=\\[variant1, variant2, ...\\] -- add the following fieldless enum variants to the end of the enum's definition. These variant names *will* have the enum's renaming rules applied.\n\nWARNING: if any of these values are ever passed into Rust, behaviour will be Undefined. Rust does not know about them, and will assume they cannot happen.\n\nThe rest are just local overrides for the same options found in the cbindgen.toml:\n\n* rename-all=RenameRule\n* add-sentinel\n* derive-helper-methods\n* derive-const-casts\n* derive-mut-casts\n* derive-tagged-enum-destructor\n* derive-tagged-enum-copy-constructor\n* enum-class\n* prefix-with-name\n* private-default-tagged-enum-constructor\n* {destructor,copy-constructor,copy-assignment}-attributes: See the description\n  of the struct attributes, these do the same for the respective generated code.\n\n### Enum variant annotations\n\nThese apply to both tagged and untagged enum _variants_.\n\n* variant-{constructor,const-cast,mut-cast,is}-attributes: See the description\n  of the struct attributes. These do the same for the respective functions.\n\nTODO: We should allow to override the `derive-{const,mut}-casts`, helper methods\net al. with per-variant annotations, probably.\n\n### Union Annotations\n\n* field-names=\\[field1, field2, ...\\] -- sets the names of all the fields in the output union. These names will be output verbatim, and are not eligible for renaming.\n\nThe rest are just local overrides for the same options found in the cbindgen.toml:\n\n* rename-all=RenameRule\n\n\n\n### Function Annotations\n\nAll function attributes are just local overrides for the same options found in the cbindgen.toml:\n\n* rename-all=RenameRule\n* prefix\n* postfix\n* ptrs-as-arrays=\\[[ptr\\_name1; array\\_length1], [ptr\\_name2; array\\_length2], ...\\] -- represents the pointer arguments of a function as arrays. Below how the mappings are performed:\n\n```\narg: *const T --> const T arg[array_length]\narg: *mut T ---> T arg[array_length]\n```\n\nIf `array_length` is not specified:\n\n```\narg: *const T --> const T arg[]\narg: *mut T --> T arg[]\n```\n\n## Generating Swift Bindings\n\nIn addition to parsing function names in C/C++ header files, the Swift compiler can make use of the `swift_name` attribute on functions to generate more idiomatic names for imported functions and methods.\n\nThis attribute is commonly used in Objective-C/C/C++ via the `NS_SWIFT_NAME` and `CF_SWIFT_NAME` macros.\n\nGiven configuration in the cbindgen.toml, `cbindgen` can generate these attributes for you by guessing an appropriate method signature based on the existing function name (and type, if it is a method in an `impl` block).\n\nThis is controlled by the `swift_name_macro` option in the cbindgen.toml.\n\n## cbindgen.toml\n\nMost configuration happens through your cbindgen.toml file. Every value has a default (that is usually reasonable), so you can start with an empty cbindgen.toml and tweak it until you like the output you're getting.\n\nNote that many options defined here only apply for one of C or C++. Usually it's an option specifying whether we should try to make use of a feature in C++'s type system or generate a helper method.\n\n```toml\n# The language to output bindings in\n#\n# possible values: \"C\", \"C++\", \"Cython\"\n#\n# default: \"C++\"\nlanguage = \"C\"\n\n\n\n\n# Options for wrapping the contents of the header:\n\n# An optional string of text to output at the beginning of the generated file\n# default: doesn't emit anything\nheader = \"/* Text to put at the beginning of the generated file. Probably a license. */\"\n\n# An optional string of text to output at the end of the generated file\n# default: doesn't emit anything\ntrailer = \"/* Text to put at the end of the generated file */\"\n\n# An optional name to use as an include guard\n# default: doesn't emit an include guard\ninclude_guard = \"mozilla_wr_bindings_h\"\n\n# Whether to add a `#pragma once` guard\n# default: doesn't emit a `#pragma once`\npragma_once = true\n\n# An optional string of text to output between major sections of the generated\n# file as a warning against manual editing\n#\n# default: doesn't emit anything\nautogen_warning = \"/* Warning, this file is autogenerated by cbindgen. Don't modify this manually. */\"\n\n# Whether to include a comment with the version of cbindgen used to generate the file\n# default: false\ninclude_version = true\n\n# An optional namespace to output around the generated bindings\n# default: doesn't emit a namespace\nnamespace = \"ffi\"\n\n# An optional list of namespaces to output around the generated bindings\n# default: []\nnamespaces = [\"mozilla\", \"wr\"]\n\n# An optional list of namespaces to declare as using with \"using namespace\"\n# default: []\nusing_namespaces = [\"mozilla\", \"wr\"]\n\n# A list of sys headers to #include (with angle brackets)\n# default: []\nsys_includes = [\"stdio\", \"string\"]\n\n# A list of headers to #include (with quotes)\n# default: []\nincludes = [\"my_great_lib.h\"]\n\n# Whether cbindgen's default C/C++ standard imports should be suppressed. These\n# imports are included by default because our generated headers tend to require\n# them (e.g. for uint32_t). Currently, the generated imports are:\n#\n# * for C: <stdarg.h>, <stdbool.h>, <stdint.h>, <stdlib.h>, <uchar.h>\n#\n# * for C++: <cstdarg>, <cstdint>, <cstdlib>, <new>, <cassert> (depending on config)\n#\n# default: false\nno_includes = false\n\n# Whether to make a C header C++ compatible.\n# These will wrap generated functions into a `extern \"C\"` block, e.g.\n#\n# #ifdef __cplusplus\n# extern \"C\" {\n# #endif // __cplusplus\n#\n# // Generated functions.\n#\n# #ifdef __cplusplus\n# } // extern \"C\"\n# #endif // __cplusplus\n#\n# If the language is not C this option won't have any effect.\n#\n# default: false\ncpp_compat = false\n\n# A list of lines to add verbatim after the includes block\nafter_includes = \"#define VERSION 1\"\n\n\n\n# Code Style Options\n\n# The style to use for curly braces\n#\n# possible values: \"SameLine\", \"NextLine\"\n#\n# default: \"SameLine\"\nbraces = \"SameLine\"\n\n# The desired length of a line to use when formatting lines\n# default: 100\nline_length = 80\n\n# The amount of spaces to indent by\n# default: 2\ntab_width = 3\n\n# Include doc comments from Rust as documentation\ndocumentation = true\n\n# How the generated documentation should be commented.\n#\n# possible values:\n# * \"c\": /* like this */\n# * \"c99\": // like this\n# * \"c++\": /// like this\n# * \"doxy\": like C, but with leading *'s on each line\n# * \"auto\": \"c++\" if that's the language, \"doxy\" otherwise\n#\n# default: \"auto\"\ndocumentation_style = \"doxy\"\n\n# How much of the documentation for each item is output.\n#\n# possible values:\n# * \"short\": Only the first line.\n# * \"full\": The full documentation.\n#\n# default: \"full\"\ndocumentation_length = \"short\"\n\n\n\n\n# Codegen Options\n\n# When generating a C header, the kind of declaration style to use for structs\n# or enums.\n#\n# possible values:\n# * \"type\": typedef struct { ... } MyType;\n# * \"tag\": struct MyType { ... };\n# * \"both\": typedef struct MyType { ... } MyType;\n#\n# default: \"both\"\nstyle = \"both\"\n\n# If this option is true `usize` and `isize` will be converted into `size_t` and `ptrdiff_t`\n# instead of `uintptr_t` and `intptr_t` respectively.\nusize_is_size_t = true\n\n# A list of substitutions for converting cfg's to ifdefs. cfgs which aren't\n# defined here will just be discarded.\n#\n# e.g.\n# `#[cfg(target = \"freebsd\")] ...`\n# becomes\n# `#if defined(DEFINE_FREEBSD) ... #endif`\n[defines]\n\"target_os = freebsd\" = \"DEFINE_FREEBSD\"\n\"feature = serde\" = \"DEFINE_SERDE\"\n\n\n\n\n\n[export]\n# A list of additional items to always include in the generated bindings if they're\n# found but otherwise don't appear to be used by the public API.\n#\n# default: []\ninclude = [\"MyOrphanStruct\", \"MyGreatTypeRename\"]\n\n# A list of items to not include in the generated bindings\n# default: []\nexclude = [\"Bad\"]\n\n# A prefix to add before the name of every item\n# default: no prefix is added\nprefix = \"CAPI_\"\n\n# Types of items that we'll generate. If empty, then all types of item are emitted.\n#\n# possible items: (TODO: explain these in detail)\n# * \"constants\":\n# * \"globals\":\n# * \"enums\":\n# * \"structs\":\n# * \"unions\":\n# * \"typedefs\":\n# * \"opaque\":\n# * \"functions\":\n#\n# default: []\nitem_types = [\"enums\", \"structs\", \"opaque\", \"functions\"]\n\n# Whether applying rules in export.rename prevents export.prefix from applying.\n#\n# e.g. given this toml:\n#\n# [export]\n# prefix = \"capi_\"\n# [export.rename]\n# \"MyType\" = \"my_cool_type\"\n#\n# You get the following results:\n#\n# renaming_overrides_prefixing = true:\n# \"MyType\" => \"my_cool_type\"\n#\n# renaming_overrides_prefixing = false:\n# \"MyType => capi_my_cool_type\"\n#\n# default: false\nrenaming_overrides_prefixing = true\n\n# Table of name conversions to apply to item names (lhs becomes rhs)\n[export.rename]\n\"MyType\" = \"my_cool_type\"\n\"my_function\" = \"BetterFunctionName\"\n\n# Table of things to prepend to the body of any struct, union, or enum that has the\n# given name. This can be used to add things like methods which don't change ABI,\n# mark fields private, etc\n[export.pre_body]\n\"MyType\" = \"\"\"\n  MyType() = delete;\nprivate:\n\"\"\"\n\n# Table of things to append to the body of any struct, union, or enum that has the\n# given name. This can be used to add things like methods which don't change ABI.\n[export.body]\n\"MyType\" = \"\"\"\n  void cppMethod() const;\n\"\"\"\n\n# Configuration for name mangling\n[export.mangle]\n# Whether the types should be renamed during mangling, for example\n# c_char -> CChar, etc.\nrename_types = \"PascalCase\"\n# Whether the underscores from the mangled name should be omitted.\nremove_underscores = false\n\n[layout]\n# A string that should come before the name of any type which has been marked\n# as `#[repr(packed)]`. For instance, \"__attribute__((packed))\" would be a\n# reasonable value if targeting gcc/clang. A more portable solution would\n# involve emitting the name of a macro which you define in a platform-specific\n# way. e.g. \"PACKED\"\n#\n# default: `#[repr(packed)]` types will be treated as opaque, since it would\n# be unsafe for C callers to use a incorrectly laid-out union.\npacked = \"PACKED\"\n\n# A string that should come before the name of any type which has been marked\n# as `#[repr(align(n))]`. This string must be a function-like macro which takes\n# a single argument (the requested alignment, `n`). For instance, a macro\n# `#define`d as `ALIGNED(n)` in `header` which translates to\n# `__attribute__((aligned(n)))` would be a reasonable value if targeting\n# gcc/clang.\n#\n# default: `#[repr(align(n))]` types will be treated as opaque, since it\n# could be unsafe for C callers to use a incorrectly-aligned union.\naligned_n = \"ALIGNED\"\n\n\n[fn]\n# An optional prefix to put before every function declaration\n# default: no prefix added\nprefix = \"WR_START_FUNC\"\n\n# An optional postfix to put after any function declaration\n# default: no postix added\npostfix = \"WR_END_FUNC\"\n\n# How to format function arguments\n#\n# possible values:\n# * \"horizontal\": place all arguments on the same line\n# * \"vertical\": place each argument on its own line\n# * \"auto\": only use vertical if horizontal would exceed line_length\n#\n# default: \"auto\"\nargs = \"horizontal\"\n\n# An optional string that should prefix function declarations which have been\n# marked as `#[must_use]`. For instance, \"__attribute__((warn_unused_result))\"\n# would be a reasonable value if targeting gcc/clang. A more portable solution\n# would involve emitting the name of a macro which you define in a\n# platform-specific way. e.g. \"MUST_USE_FUNC\"\n# default: nothing is emitted for must_use functions\nmust_use = \"MUST_USE_FUNC\"\n\n# An optional string that should prefix function declarations which have been\n# marked as `#[deprecated]` without note. For instance, \"__attribute__((deprecated))\"\n# would be a reasonable value if targeting gcc/clang. A more portable solution\n# would involve emitting the name of a macro which you define in a\n# platform-specific way. e.g. \"DEPRECATED_FUNC\"\n# default: nothing is emitted for deprecated functions\ndeprecated = \"DEPRECATED_FUNC\"\n\n# An optional string that should prefix function declarations which have been\n# marked as `#[deprecated(note = \"reason\")]`. `{}` will be replaced with the\n# double-quoted string. For instance, \"__attribute__((deprecated({})))\"\n# would be a reasonable value if targeting gcc/clang. A more portable solution\n# would involve emitting the name of a macro which you define in a\n# platform-specific way. e.g. \"DEPRECATED_FUNC_WITH_NOTE(note)\"\n# default: nothing is emitted for deprecated functions\ndeprecated_with_notes = \"DEPRECATED_FUNC_WITH_NOTE\"\n\n# An optional string that will be used in the attribute position for functions\n# that don't return (that return `!` in Rust).\n#\n# For instance, `__attribute__((noreturn))` would be a reasonable value if\n# targeting gcc/clang.\nno_return = \"NO_RETURN\"\n\n# An optional string that, if present, will be used to generate Swift function\n# and method signatures for generated functions, for example \"CF_SWIFT_NAME\".\n# If no such macro is available in your toolchain, you can define one using the\n# `header` option in cbindgen.toml\n# default: no swift_name function attributes are generated\nswift_name_macro = \"CF_SWIFT_NAME\"\n\n# A rule to use to rename function argument names. The renaming assumes the input\n# is the Rust standard snake_case, however it accepts all the different rename_args\n# inputs. This means many options here are no-ops or redundant.\n#\n# possible values (that actually do something):\n# * \"CamelCase\": my_arg => myArg\n# * \"PascalCase\": my_arg => MyArg\n# * \"GeckoCase\": my_arg => aMyArg\n# * \"ScreamingSnakeCase\": my_arg => MY_ARG\n# * \"None\": apply no renaming\n#\n# technically possible values (that shouldn't have a purpose here):\n# * \"SnakeCase\": apply no renaming\n# * \"LowerCase\": apply no renaming (actually applies to_lowercase, is this bug?)\n# * \"UpperCase\": same as ScreamingSnakeCase in this context\n# * \"QualifiedScreamingSnakeCase\" => same as ScreamingSnakeCase in this context\n#\n# default: \"None\"\nrename_args = \"PascalCase\"\n\n# This rule specifies the order in which functions will be sorted.\n#\n# \"Name\": sort by the name of the function\n# \"None\": keep order in which the functions have been parsed\n#\n# default: \"None\"\nsort_by = \"Name\"\n\n[struct]\n# A rule to use to rename struct field names. The renaming assumes the input is\n# the Rust standard snake_case, however it acccepts all the different rename_args\n# inputs. This means many options here are no-ops or redundant.\n#\n# possible values (that actually do something):\n# * \"CamelCase\": my_arg => myArg\n# * \"PascalCase\": my_arg => MyArg\n# * \"GeckoCase\": my_arg => mMyArg\n# * \"ScreamingSnakeCase\": my_arg => MY_ARG\n# * \"None\": apply no renaming\n#\n# technically possible values (that shouldn't have a purpose here):\n# * \"SnakeCase\": apply no renaming\n# * \"LowerCase\": apply no renaming (actually applies to_lowercase, is this bug?)\n# * \"UpperCase\": same as ScreamingSnakeCase in this context\n# * \"QualifiedScreamingSnakeCase\" => same as ScreamingSnakeCase in this context\n#\n# default: \"None\"\nrename_fields = \"PascalCase\"\n\n# An optional string that should come before the name of any struct which has been\n# marked as `#[must_use]`. For instance, \"__attribute__((warn_unused))\"\n# would be a reasonable value if targeting gcc/clang. A more portable solution\n# would involve emitting the name of a macro which you define in a\n# platform-specific way. e.g. \"MUST_USE_STRUCT\"\n#\n# default: nothing is emitted for must_use structs\nmust_use = \"MUST_USE_STRUCT\"\n\n# An optional string that should come before the name of any struct which has been\n# marked as `#[deprecated]` without note. For instance, \"__attribute__((deprecated))\"\n# would be a reasonable value if targeting gcc/clang. A more portable solution\n# would involve emitting the name of a macro which you define in a\n# platform-specific way. e.g. \"DEPRECATED_STRUCT\"\n# default: nothing is emitted for deprecated structs\ndeprecated = \"DEPRECATED_STRUCT\"\n\n# An optional string that should come before the name of any struct which has been\n# marked as `#[deprecated(note = \"reason\")]`. `{}` will be replaced with the\n# double-quoted string. For instance, \"__attribute__((deprecated({})))\"\n# would be a reasonable value if targeting gcc/clang. A more portable solution\n# would involve emitting the name of a macro which you define in a\n# platform-specific way. e.g. \"DEPRECATED_STRUCT_WITH_NOTE(note)\"\n# default: nothing is emitted for deprecated structs\ndeprecated_with_notes = \"DEPRECATED_STRUCT_WITH_NOTE\"\n\n# Whether a Rust type with associated consts should emit those consts inside the\n# type's body. Otherwise they will be emitted trailing and with the type's name\n# prefixed. This does nothing if the target is C, or if\n# [const]allow_static_const = false\n#\n# default: false\n# associated_constants_in_body: false\n\n# Whether to derive a simple constructor that takes a value for every field.\n# default: false\nderive_constructor = true\n\n# Whether to derive an operator== for all structs\n# default: false\nderive_eq = false\n\n# Whether to derive an operator!= for all structs\n# default: false\nderive_neq = false\n\n# Whether to derive an operator< for all structs\n# default: false\nderive_lt = false\n\n# Whether to derive an operator<= for all structs\n# default: false\nderive_lte = false\n\n# Whether to derive an operator> for all structs\n# default: false\nderive_gt = false\n\n# Whether to derive an operator>= for all structs\n# default: false\nderive_gte = false\n\n\n\n\n\n[enum]\n# A rule to use to rename enum variants, and the names of any fields those\n# variants have. This should probably be split up into two separate options, but\n# for now, they're the same! See the documentation for `[struct]rename_fields`\n# for how this applies to fields. Renaming of the variant assumes that the input\n# is the Rust standard PascalCase. In the case of QualifiedScreamingSnakeCase,\n# it also assumed that the enum's name is PascalCase.\n#\n# possible values (that actually do something):\n# * \"CamelCase\": MyVariant => myVariant\n# * \"SnakeCase\": MyVariant => my_variant\n# * \"ScreamingSnakeCase\": MyVariant => MY_VARIANT\n# * \"QualifiedScreamingSnakeCase\": MyVariant => ENUM_NAME_MY_VARIANT\n# * \"LowerCase\": MyVariant => myvariant\n# * \"UpperCase\": MyVariant => MYVARIANT\n# * \"None\": apply no renaming\n#\n# technically possible values (that shouldn't have a purpose for the variants):\n# * \"PascalCase\": apply no renaming\n# * \"GeckoCase\": apply no renaming\n#\n# default: \"None\"\nrename_variants = \"None\"\n\n# Whether an extra \"sentinel\" enum variant should be added to all generated enums.\n# Firefox uses this for their IPC serialization library.\n#\n# WARNING: if the sentinel is ever passed into Rust, behaviour will be Undefined.\n# Rust does not know about this value, and will assume it cannot happen.\n#\n# default: false\nadd_sentinel = false\n\n# Whether enum variant names should be prefixed with the name of the enum.\n# default: false\nprefix_with_name = false\n\n# Whether to emit enums using \"enum class\" when targeting C++.\n# default: true\nenum_class = true\n\n# Whether to generate static `::MyVariant(..)` constructors and `bool IsMyVariant()`\n# methods for enums with fields.\n#\n# default: false\nderive_helper_methods = false\n\n# Whether to generate `const MyVariant& AsMyVariant() const` methods for enums with fields.\n# default: false\nderive_const_casts = false\n\n# Whether to generate `MyVariant& AsMyVariant()` methods for enums with fields\n# default: false\nderive_mut_casts = false\n\n# The name of the macro/function to use for asserting `IsMyVariant()` in the body of\n# derived `AsMyVariant()` cast methods.\n#\n# default: \"assert\" (but also causes `<cassert>` to be included by default)\ncast_assert_name = \"MOZ_RELEASE_ASSERT\"\n\n# An optional string that should come before the name of any enum which has been\n# marked as `#[must_use]`. For instance, \"__attribute__((warn_unused))\"\n# would be a reasonable value if targeting gcc/clang. A more portable solution\n# would involve emitting the name of a macro which you define in a\n# platform-specific way. e.g. \"MUST_USE_ENUM\"\n#\n# Note that this refers to the *output* type. That means this will not apply to an enum\n# with fields, as it will be emitted as a struct. `[struct]must_use` will apply there.\n#\n# default: nothing is emitted for must_use enums\nmust_use = \"MUST_USE_ENUM\"\n\n# An optional string that should come before the name of any enum which has been\n# marked as `#[deprecated]` without note. For instance, \"__attribute__((deprecated))\"\n# would be a reasonable value if targeting gcc/clang. A more portable solution\n# would involve emitting the name of a macro which you define in a\n# platform-specific way. e.g. \"DEPRECATED_ENUM\"\n# default: nothing is emitted for deprecated enums\ndeprecated = \"DEPRECATED_ENUM\"\n\n# An optional string that should come before the name of any enum which has been\n# marked as `#[deprecated(note = \"reason\")]`. `{}` will be replaced with the\n# double-quoted string. For instance, \"__attribute__((deprecated({})))\"\n# would be a reasonable value if targeting gcc/clang. A more portable solution\n# would involve emitting the name of a macro which you define in a\n# platform-specific way. e.g. \"DEPRECATED_ENUM_WITH_NOTE(note)\"\n# default: nothing is emitted for deprecated enums\ndeprecated_with_notes = \"DEPRECATED_ENUM_WITH_NOTE\"\n\n# An optional string that should come after the name of any enum variant which has been\n# marked as `#[deprecated]` without note. For instance, \"__attribute__((deprecated))\"\n# would be a reasonable value if targeting gcc/clang. A more portable solution would\n# involve emitting the name of a macro which you define in a platform-specific\n# way. e.g. \"DEPRECATED_ENUM_VARIANT\"\n# default: nothing is emitted for deprecated enum variants\ndeprecated_variant = \"DEPRECATED_ENUM_VARIANT\"\n\n# An optional string that should come after the name of any enum variant which has been\n# marked as `#[deprecated(note = \"reason\")]`. `{}` will be replaced with the\n# double-quoted string. For instance, \"__attribute__((deprecated({})))\" would be a\n# reasonable value if targeting gcc/clang. A more portable solution would involve\n# emitting the name of a macro which you define in a platform-specific\n# way. e.g. \"DEPRECATED_ENUM_WITH_NOTE(note)\"\n# default: nothing is emitted for deprecated enum variants\ndeprecated_variant_with_notes = \"DEPRECATED_ENUM_VARIANT_WITH_NOTE({})\"\n\n# Whether enums with fields should generate destructors. This exists so that generic\n# enums can be properly instantiated with payloads that are C++ types with\n# destructors. This isn't necessary for structs because C++ has rules to\n# automatically derive the correct constructors and destructors for those types.\n#\n# Care should be taken with this option, as Rust and C++ cannot\n# properly interoperate with eachother's notions of destructors. Also, this may\n# change the ABI for the type. Either your destructor-full enums must live\n# exclusively within C++, or they must only be passed by-reference between\n# C++ and Rust.\n#\n# default: false\nderive_tagged_enum_destructor = false\n\n# Whether enums with fields should generate copy-constructor. See the discussion on\n# derive_tagged_enum_destructor for why this is both useful and very dangerous.\n#\n# default: false\nderive_tagged_enum_copy_constructor = false\n# Whether enums with fields should generate copy-assignment operators.\n#\n# This depends on also deriving copy-constructors, and it is highly encouraged\n# for this to be set to true.\n#\n# default: false\nderive_tagged_enum_copy_assignment = false\n\n# Whether enums with fields should generate an empty, private destructor.\n# This allows the auto-generated constructor functions to compile, if there are\n# non-trivially constructible members. This falls in the same family of\n# dangerousness as `derive_tagged_enum_copy_constructor` and co.\n#\n# default: false\nprivate_default_tagged_enum_constructor = false\n\n\n\n\n\n[const]\n# Whether a generated constant can be a static const in C++ mode. I have no\n# idea why you would turn this off.\n#\n# default: true\nallow_static_const = true\n\n# Whether a generated constant can be constexpr in C++ mode.\n#\n# default: true\nallow_constexpr = false\n\n# This rule specifies the order in which constants will be sorted.\n#\n# \"Name\": sort by the name of the constant\n# \"None\": keep order in which the constants have been parsed\n#\n# default: \"None\"\nsort_by = \"Name\"\n\n\n\n\n[macro_expansion]\n# Whether bindings should be generated for instances of the bitflags! macro.\n# default: false\nbitflags = true\n\n\n\n\n\n\n# Options for how your Rust library should be parsed\n\n[parse]\n# Whether to parse dependent crates and include their types in the output\n# default: false\nparse_deps = true\n\n# A white list of crate names that are allowed to be parsed. If this is defined,\n# only crates found in this list will ever be parsed.\n#\n# default: there is no whitelist (NOTE: this is the opposite of [])\ninclude = [\"webrender\", \"webrender_traits\"]\n\n# A black list of crate names that are not allowed to be parsed.\n# default: []\nexclude = [\"libc\"]\n\n# Whether to use a new temporary target directory when running `rustc -Zunpretty=expanded`.\n# This may be required for some build processes.\n#\n# default: false\nclean = false\n\n# Which crates other than the top-level binding crate we should generate\n# bindings for.\n#\n# default: []\nextra_bindings = [\"my_awesome_dep\"]\n\n[parse.expand]\n# A list of crate names that should be run through `cargo expand` before\n# parsing to expand any macros. Note that if a crate is named here, it\n# will always be parsed, even if the blacklist/whitelist says it shouldn't be.\n#\n# default: []\ncrates = [\"euclid\"]\n\n# If enabled,  use the `--all-features` option when expanding. Ignored when\n# `features` is set. For backwards-compatibility, this is forced on if\n# `expand = [\"euclid\"]` shorthand is used.\n#\n# default: false\nall_features = false\n\n# When `all_features` is disabled and this is also disabled, use the\n# `--no-default-features` option when expanding.\n#\n# default: true\ndefault_features = true\n\n# A list of feature names that should be used when running `cargo expand`. This\n# combines with `default_features` like in your `Cargo.toml`. Note that the features\n# listed here are features for the current crate being built, *not* the crates\n# being expanded. The crate's `Cargo.toml` must take care of enabling the\n# appropriate features in its dependencies\n#\n# default: []\nfeatures = [\"cbindgen\"]\n\n[ptr]\n# An optional string to decorate all pointers that are\n# required to be non null. Nullability is inferred from the Rust type: `&T`,\n# `&mut T` and `NonNull<T>` all require a valid pointer value.\nnon_null_attribute = \"_Nonnull\"\n\n# Options specific to Cython bindings.\n\n[cython]\n\n# Header specified in the top level `cdef extern from header:` declaration.\n#\n# default: *\nheader = '\"my_header.h\"'\n\n# `from module cimport name1, name2` declarations added in the same place\n# where you'd get includes in C.\n[cython.cimports]\nmodule = [\"name1\", \"name2\"]\n```\n\n\n\n\n\n[reference]: https://doc.rust-lang.org/nightly/reference/type-layout.html#representations\n[really-tagged-unions]: https://github.com/rust-lang/rfcs/blob/master/text/2195-really-tagged-unions.md\n[section-cfgs]: #defines-and-cfgs\n[file-it]: https://github.com/mozilla/cbindgen/issues/new\n"
        },
        {
          "name": "internals.md",
          "type": "blob",
          "size": 2.3037109375,
          "content": "## Overview\n\n`cbindgen` works in four phases:\n\n1. *Parsing* - Crate information is gathered from `cargo`, and `rust` source files are read using `syn`\n1. *Loading* - `syn` AST nodes are converted into an IR of `Item`s that loosely correspond to the C types that will be output\n1. *Transformation* - Several passes are run that transform the IR. Some examples:\n   - Generic `type` aliases are used to specialize the type they refer to\n   - Annotations are transferred from `type` aliases to the item they refer to\n   - `Option<&T>` is converted to `*const T`\n   - `Option<&mut T>` is converted to `*mut T`\n   - Generic paths in struct fields, union variants, and static globals are collected and used to generate monomorphs of the structs or unions they refer to\n   - The items are sorted by dependencies and type and unused items are filtered out\n1. *Writing* - The IR is pretty printed to a file or `stdout`\n\n## Process Flow\n\nThe main interface for `cbindgen` is `bindgen::Builder` which accepts configuration options and either a crate directory to parse or a list of source files.\n\nIf a list of source files is given, then `bindgen::Builder` will parse them using `parser::parse_src` which will use `syn` to parse a specific file. No `extern crate` items will be followed for dependencies, but `mod` items will be attempted to be followed.\n\nIf a crate directory is given, then `bindgen::Builder` will use `cargo::Cargo` to load a dependency graph from `Cargo.toml`, `Cargo.lock`, and `cargo metadata`. Then `parser::parse_lib` will parse each crate, following `extern crate` items when `ParseConfig::parse_deps` is enabled and the crate is not in the whitelist or blacklist of crates. In addition `bindgen::Parser` may use `cargo expand` on a crate to expand macro definitions.\n\nOnce the `syn` nodes are collected by either method, they are given to `bindgen::Parse` which will perform *Loading* by creating a `ir::Item` for each `syn` node as appropriate.\n\n`bindgen::Builder` will then convert the resulting `bindgen::Parse`'s into a `bindgen::Library` which is the driver of all of the *Transformation* passes.\n\n// TODO - Talk more about passes\n\nThen finally the `bindgen::Library` will create a `bindgen::Bindings` which contains the `ir::Item`'s that are ready to be written. The `bindgen::Bindings` can then be written to `stdout` or a specific file.\n"
        },
        {
          "name": "rust-toolchain.toml",
          "type": "blob",
          "size": 0.0302734375,
          "content": "[toolchain]\nchannel = \"nightly\""
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "template.toml",
          "type": "blob",
          "size": 2.9052734375,
          "content": "# This is a template cbindgen.toml file with all of the default values.\n# Some values are commented out because their absence is the real default.\n#\n# See https://github.com/mozilla/cbindgen/blob/master/docs.md#cbindgentoml\n# for detailed documentation of every option here.\n\n\n\nlanguage = \"C++\"\n\n\n\n############## Options for Wrapping the Contents of the Header #################\n\n# header = \"/* Text to put at the beginning of the generated file. Probably a license. */\"\n# trailer = \"/* Text to put at the end of the generated file */\"\n# include_guard = \"my_bindings_h\"\n# pragma_once = true\n# autogen_warning = \"/* Warning, this file is autogenerated by cbindgen. Don't modify this manually. */\"\ninclude_version = false\n# namespace = \"my_namespace\"\nnamespaces = []\nusing_namespaces = []\nsys_includes = []\nincludes = []\nno_includes = false\n# cpp_compat = true\nafter_includes = \"\"\n\n\n\n\n############################ Code Style Options ################################\n\nbraces = \"SameLine\"\nline_length = 100\ntab_width = 2\ndocumentation = true\ndocumentation_style = \"auto\"\ndocumentation_length = \"full\"\nline_endings = \"LF\" # also \"CR\", \"CRLF\", \"Native\"\n\n\n\n\n############################# Codegen Options ##################################\n\nstyle = \"both\"\nsort_by = \"Name\" # default for `fn.sort_by` and `const.sort_by`\nusize_is_size_t = true\n\n\n\n[defines]\n# \"target_os = freebsd\" = \"DEFINE_FREEBSD\"\n# \"feature = serde\" = \"DEFINE_SERDE\"\n\n\n\n[export]\ninclude = []\nexclude = []\n# prefix = \"CAPI_\"\nitem_types = []\nrenaming_overrides_prefixing = false\n\n\n\n[export.rename]\n\n\n\n[export.body]\n\n\n[export.mangle]\n\n\n[fn]\nrename_args = \"None\"\n# must_use = \"MUST_USE_FUNC\"\n# deprecated = \"DEPRECATED_FUNC\"\n# deprecated_with_note = \"DEPRECATED_FUNC_WITH_NOTE\"\n# no_return = \"NO_RETURN\"\n# prefix = \"START_FUNC\"\n# postfix = \"END_FUNC\"\nargs = \"auto\"\nsort_by = \"Name\"\n\n\n\n\n[struct]\nrename_fields = \"None\"\n# must_use = \"MUST_USE_STRUCT\"\n# deprecated = \"DEPRECATED_STRUCT\"\n# deprecated_with_note = \"DEPRECATED_STRUCT_WITH_NOTE\"\nderive_constructor = false\nderive_eq = false\nderive_neq = false\nderive_lt = false\nderive_lte = false\nderive_gt = false\nderive_gte = false\n\n\n\n\n[enum]\nrename_variants = \"None\"\n# must_use = \"MUST_USE_ENUM\"\n# deprecated = \"DEPRECATED_ENUM\"\n# deprecated_with_note = \"DEPRECATED_ENUM_WITH_NOTE\"\nadd_sentinel = false\nprefix_with_name = false\nderive_helper_methods = false\nderive_const_casts = false\nderive_mut_casts = false\n# cast_assert_name = \"ASSERT\"\nderive_tagged_enum_destructor = false\nderive_tagged_enum_copy_constructor = false\nenum_class = true\nprivate_default_tagged_enum_constructor = false\n\n\n\n\n[const]\nallow_static_const = true\nallow_constexpr = false\nsort_by = \"Name\"\n\n\n\n\n[macro_expansion]\nbitflags = false\n\n\n\n\n\n\n############## Options for How Your Rust library Should Be Parsed ##############\n\n[parse]\nparse_deps = false\n# include = []\nexclude = []\nclean = false\nextra_bindings = []\n\n\n\n[parse.expand]\ncrates = []\nall_features = false\ndefault_features = true\nfeatures = []\n"
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}