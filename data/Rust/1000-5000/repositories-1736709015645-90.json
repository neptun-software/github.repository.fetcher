{
  "metadata": {
    "timestamp": 1736709015645,
    "page": 90,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjkw",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "smoltcp-rs/smoltcp",
      "stars": 3872,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.025390625,
          "content": "/target\nCargo.lock\n*.pcap\n"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 28.7275390625,
          "content": "    # Changelog\nAll notable changes to this project will be documented in this file.\n\nThe format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/),\nand this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0.html).\n\n## [Unreleased]\n\nNo unreleased changes yet. Please send PRs!\n\n## [0.12.0] - 2024-11-28\n\nAlmost a year in the making, the highlights of the release are the migration to `core::net` IP types, IPv6 multicast, TCP improvements, and many fixes. Smoltcp now connects your gadgets to the Internet better than ever.\n\n- Minimum Supported Rust Version (MSRV) bumped to 1.80.\n- iface\n    - IPv6 multicast ([#914](https://github.com/smoltcp-rs/smoltcp/pull/914), [#976](https://github.com/smoltcp-rs/smoltcp/pull/976), [#988](https://github.com/smoltcp-rs/smoltcp/pull/988), [#1009](https://github.com/smoltcp-rs/smoltcp/pull/1009), [#1012](https://github.com/smoltcp-rs/smoltcp/pull/1012))\n    - Add `poll_egress()` and `poll_ingress_single()` methods for finer-grained control of what and how many packets are processed. ([#954](https://github.com/smoltcp-rs/smoltcp/pull/954), [#991](https://github.com/smoltcp-rs/smoltcp/pull/991), [#993](https://github.com/smoltcp-rs/smoltcp/pull/993))\n    - Multicast join/leave no longer requires access to device+timestamp. ([#985](https://github.com/smoltcp-rs/smoltcp/pull/985))\n    - Reset expiry of entries in the neighbor cache on packet reception ([#966](https://github.com/smoltcp-rs/smoltcp/pull/966))\n    - Honor `any_ip` for ARP ([#880](https://github.com/smoltcp-rs/smoltcp/pull/880))\n    - Honor `any_ip` for IPv6 ([#900](https://github.com/smoltcp-rs/smoltcp/pull/900))\n    - Use own source address for ARP and NDISC Solicitations ([#984](https://github.com/smoltcp-rs/smoltcp/pull/984))\n    - fix panic when discarding HBH Option with multicast destination address ([#996](https://github.com/smoltcp-rs/smoltcp/pull/996))\n    - fix panic with 6lowpan frag datagram_size < 40 ([#997](https://github.com/smoltcp-rs/smoltcp/pull/997))\n    - fix panic if no suitable IPv6 src_addr is found ([#895](https://github.com/smoltcp-rs/smoltcp/pull/895))\n    - Fix specific length IP packets not being fragmented ([#1008](https://github.com/smoltcp-rs/smoltcp/pull/1008))\n- tcp\n    - Add support for congestion control ([#907](https://github.com/smoltcp-rs/smoltcp/pull/907))\n    - Add support for simultaneous open ([#1001](https://github.com/smoltcp-rs/smoltcp/pull/1001))\n    - Add support for Timestamp option ([#939](https://github.com/smoltcp-rs/smoltcp/pull/939))\n    - Send immediate ACKs after RMSS bytes of data ([#1002](https://github.com/smoltcp-rs/smoltcp/pull/1002))\n    - Do not ignore FIN if segment is partially outside the window. ([#977](https://github.com/smoltcp-rs/smoltcp/pull/977))\n    - Correctly set internal sACK flag for client sockets ([#995](https://github.com/smoltcp-rs/smoltcp/pull/995))\n    - Only reset remote_last_ts if some data is enqueued ([#917](https://github.com/smoltcp-rs/smoltcp/pull/917))\n    - Don't delay ACKs for significant window updates ([#935](https://github.com/smoltcp-rs/smoltcp/pull/935))\n    - Add `listen_endpoint` getter ([#1005](https://github.com/smoltcp-rs/smoltcp/pull/1005))\n- socket\n    - UDP,ICMP,raw: Add `send_queue`/`recv_queue` ([#1003](https://github.com/smoltcp-rs/smoltcp/pull/1003))\n    - ICMP: split ICMPv4/v6 accept and process ([#887](https://github.com/smoltcp-rs/smoltcp/pull/887))\n    - UDP: Store local and use local address in metadata ([#904](https://github.com/smoltcp-rs/smoltcp/pull/904))\n    - DNS: fix panic if server list is too long ([#986](https://github.com/smoltcp-rs/smoltcp/pull/986))\n    - DNS: fix panic if no valid source address is found ([#987](https://github.com/smoltcp-rs/smoltcp/pull/987))\n- phy\n    - Change mutability of `RxToken`'s `consume` argument. ([#924](https://github.com/smoltcp-rs/smoltcp/pull/924))\n    - Add support for NetBSD ([#883](https://github.com/smoltcp-rs/smoltcp/pull/883))\n    - Add minimum support for iOS ([#896](https://github.com/smoltcp-rs/smoltcp/pull/896))\n    - Add BPF support for FreeBSD ([#906](https://github.com/smoltcp-rs/smoltcp/pull/906))\n    - disable checksums on loopback ([#919](https://github.com/smoltcp-rs/smoltcp/pull/919))\n- wire\n    - Use core::net types for IP addresses. ([#937](https://github.com/smoltcp-rs/smoltcp/pull/937), [#994](https://github.com/smoltcp-rs/smoltcp/pull/994))\n    - Add missing exports in wire for DNS ([#891](https://github.com/smoltcp-rs/smoltcp/pull/891))\n    - rename Scope to MulticastScope ([#898](https://github.com/smoltcp-rs/smoltcp/pull/898))\n    - Re-export `dhcpv4::Flags` and `dhcpv4::OpCode` ([#901](https://github.com/smoltcp-rs/smoltcp/pull/901))\n    - Make Address:v6() constructor const ([#975](https://github.com/smoltcp-rs/smoltcp/pull/975))\n    - Ipv6RoutingHeader::clear_reserved: fix offsets for Type 2 routing headers. ([#882](https://github.com/smoltcp-rs/smoltcp/pull/882))\n\n## [0.11.0] - 2023-12-23\n\n### Additions\n\n- wire/ipsec: add basic IPsec parsing/emitting ([#821](https://github.com/smoltcp-rs/smoltcp/pull/821)).\n- phy: add support for `TUNSETIFF` on MIPS, PPC and SPARC ([#839](https://github.com/smoltcp-rs/smoltcp/pull/839)).\n- socket/tcp: accept FIN on zero window ([#845](https://github.com/smoltcp-rs/smoltcp/pull/845)).\n- wire/ipv6: add `is_unique_local()` to IPv6 addresses ([#862](https://github.com/smoltcp-rs/smoltcp/pull/862)).\n- wire/ipv6: add `is_global_unicast()` to IPv6 addresses ([#864](https://github.com/smoltcp-rs/smoltcp/pull/864)).\n- iface/neigh: add `fill_with_expiration` ([#871](https://github.com/smoltcp-rs/smoltcp/pull/871)).\n\n### Fixes\n\n- icmpv6: truncate packet to MTU ([#807](https://github.com/smoltcp-rs/smoltcp/pull/807), [#808](https://github.com/smoltcp-rs/smoltcp/pull/810)).\n- wire/rpl: DAO-ACK DODAG ID was wrongly read ([#824](https://github.com/smoltcp-rs/smoltcp/pull/824)).\n- socket/tcp: don't panic when calling `listen` again on the same local endpoint ([#841](https://github.com/smoltcp-rs/smoltcp/pull/841)).\n- wire/dhcpv4: don't panic when parsing addresses with incorrect amount of bytes ([#843](https://github.com/smoltcp-rs/smoltcp/pull/843)).\n- iface/ndisc: prevent ndisc when the medium is IP ([#865](https://github.com/smoltcp-rs/smoltcp/pull/865)).\n- wire/ieee802154: better parsing of security fields. Correctly parse frame type (3 bits instead of 2 bits) ([#868](https://github.com/smoltcp-rs/smoltcp/pull/864)).\n- wire/ieee802154: better handle address fields for new frame version ([#870](https://github.com/smoltcp-rs/smoltcp/pull/870)).\n- iface/tcp: don't send TCP RST with unspecified addresses ([#867](https://github.com/smoltcp-rs/smoltcp/pull/867)).\n- iface: don't handle empty packets (this would panic when reading the IP version) ([#866](https://github.com/smoltcp-rs/smoltcp/pull/866)).\n- socket/dhcp: Add an upper bound to the renew/rebind timeout in `RetryConfig` ([#835](https://github.com/smoltcp-rs/smoltcp/pull/835)).\n\n### Changes\n\n- iface: rewrite `IpPacket` such that IPv6 packets can contain owned extension headers ([#802](https://github.com/smoltcp-rs/smoltcp/pull/802)).\n- iface: remove generic `T: [u8]` in functions. This reduced the server example by 10KB ([#810](https://github.com/smoltcp-rs/smoltcp/pull/810)).\n- SocketSet: add comment about using static lifetime for SocketSets with owned storage ([#813](https://github.com/smoltcp-rs/smoltcp/pull/813)).\n- phy/RawSocket: open raw socket with `O_NONBLOCK` ([#817](https://github.com/smoltcp-rs/smoltcp/pull/817)).\n- tests/rstest: use rstest for fixture based testing ([#823](https://github.com/smoltcp-rs/smoltcp/pull/823)).\n- docs/readme: update readme about IEEE802.15.4 and 6LoWPAN ([#826](https://github.com/smoltcp-rs/smoltcp/pull/826)).\n- wire/ipv6-hbh: IPv6 HBH has owned options instead of references ([#827](https://github.com/smoltcp-rs/smoltcp/pull/827)).\n- wire/sixlowpan: 6LoWPAN is split into multiple modules ([#828](https://github.com/smoltcp-rs/smoltcp/pull/828)).\n- sockets: match the behaviour of `peek_slice` and `recv_slice` ([#834](https://github.com/smoltcp-rs/smoltcp/pull/834)).\n- dependencies: update to headpless v0.8 ([#853](https://github.com/smoltcp-rs/smoltcp/pull/853)).\n- config: make `config` constants public ([#855](https://github.com/smoltcp-rs/smoltcp/pull/855)).\n- phy/ieee802154: clarify `mtu+=2` for IEEE802.15.4 ([#857](https://github.com/smoltcp-rs/smoltcp/pull/857)).\n- sockets: `recv_slice` returns `RcvError::Truncated` when the length of the slice is smaller than the data received by the socket ([#859](https://github.com/smoltcp-rs/smoltcp/pull/859)).\n- iface/ipv6: `get_source_address` uses [RFC 6724](https://www.rfc-editor.org/rfc/rfc6724) for address selection ([#864](https://github.com/smoltcp-rs/smoltcp/pull/864)).\n- pcap: use IEEE 802.15.4 without FCS for PCAP link types ([#874](https://github.com/smoltcp-rs/smoltcp/pull/874)).\n- iface: rename `IpPacket`/`Ipv4Packet`/`Ipv6Packet` to `Pacet`/`PacketV4`/`PacketV4`. This is to remove the ambiguity with `IpPacket` in `src/wire/` ([#873](https://github.com/smoltcp-rs/smoltcp/pull/873)).\n- wire/ndisc: rewrite parse function (3.1KiB -> 1.9KiB) ([#878](https://github.com/smoltcp-rs/smoltcp/pull/878))\n- iface: Check IPv6 address after processing HBH ([#861](https://github.com/smoltcp-rs/smoltcp/pull/861))\n\n## [0.10.0] - 2023-06-26\n\n- Add optional packet metadata. Allows tracking packets by ID across the whole stack, between the `Device` impl and sockets. One application is timestamping packets with the PHY's collaboration, allowing implementing PTP (#628)\n- Work-in-progress implementation of RPL (Routing Protocol for Low-Power and Lossy Networks), commonly used for IEEE 802.15.4 / 6LoWPAN networks. Wire is mostly complete, full functionality will be in 0.11 hopefully! (#627, #766, #767, #772, #773, #777, #790, #798, #804)\n- dhcp: Add support for rebinding (#744)\n\n- iface:\n    - add support for sending to subnet-local broadcast addrs (like 192.168.1.255). (#801)\n    - Creating an interface requires passing in the time. (#799)\n    - fix wrong payload length of first IPv4 fragment (#791, #792)\n    - Don't discard from unspecified IPv4 src addresses (#787)\n\n- tcp:\n    - do not count window updates as duplicate acks. (#748)\n    - consider segments partially overlapping the window as acceptable (#749)\n    - Perform a reset() after an abort() (#788)\n\n- 6lowpan:\n    - Hop-by-Hop Header compression (#765)\n    - Routing Header compression (#770)\n\n- wire:\n    - reexport DNS opcode, rcode, flag. (#763, #806)\n    - refactor IPv6 Extension Headers to make them more consistent and easier to parse. (#781)\n    - check length field of NDISC redirected head (#784)\n\n- Modify `hardware_addr` and `neighbor_cache` to be not `Option`, add `HardwareAddress::Ip` (#745)\n- Add file descriptor support for tuntap devices, needed for the Android VPN API. (#776)\n- implement Display and Error for error types (#750, #756, #757)\n- Better defmt for Instant, Duration and Ipv6Address (#754, #758)\n- Add Hash trait for enum_with_unknown macro (#755)\n\n## [0.9.1] - 2023-02-08\n\n- iface: make MulticastError public. (#747)\n- Fix parsing of ieee802154 link layer address for NDISC options (#746)\n\n## [0.9.0] - 2023-02-06\n\n- Minimum Supported Rust Version (MSRV) **bumped** from 1.56 to 1.65\n- Added DNS client support.\n    - Add DnsSocket (#465)\n    - Add support for one-shot mDNS resolution (#669)\n- Added support for packet fragmentation and reassembly, both for IPv4 and 6LoWPAN. (#591, #580, #624, #634, #645, #653, #684)\n- Major error handling overhaul.\n    - Previously, _smoltcp_ had a single `Error` enum that all methods returned. Now methods that can fail have their own error enums, with only the actual errors they can return. (#617, #667, #730)\n    - Consuming `phy::Device` tokens is now infallible.\n        - In the case of \"buffer full\", `phy::Device` implementations must return `None` from the `transmit`/`receive` methods. (Previously, they could either do that, or return tokens and then return `Error::Exhausted` when consuming them. The latter wasted computation since it'd make _smoltcp_ pointlessly spend effort preparing the packet, and is now disallowed).\n        - For all other phy errors, `phy::Device` implementations should drop the packet and handle the error themselves. (Either log it and forget it, or buffer/count it and offer methods to let the user retrieve the error queue/counts.) Returning the error to have it bubble up to `Interface::poll()` is no longer supported.\n- phy: the `trait Device` now uses Generic Associated Types (GAT) for the TX and RX tokens. The main impact of this is `Device` impls can now borrow data (because previously, the`for<'a> T: Device<'a>` bounds required to workaround the lack of GATs essentially implied `T: 'static`.) (#572)\n- iface: The `Interface` API has been significantly simplified and cleaned up.\n    - The builder has been removed (#736)\n    - SocketSet and Device are now borrowed in methods that need them, instead of owning them. (#619)\n    - `Interface` now owns the list of addresses (#719), routes, neighbor cache (#722), 6LoWPAN address contexts, and fragmentation buffers (#736) instead of borrowing them with `managed`.\n    - A new compile-time configuration mechanism has been added, to configure the size of the (now owned) buffers (#742)\n- iface: Change neighbor discovery timeout from 3s to 1s, to match Linux's behavior. (#620)\n- iface: Remove implicit sized bound on device generics (#679)\n- iface/6lowpan: Add address context information for resolving 6LoWPAN addresses (#687)\n- iface/6lowpan: fix incorrect SAM value in IPHC when address is not compressed (#630)\n- iface/6lowpan: packet parsing fuzz fixes (#636)\n- socket: Add send_with to udp, raw, and icmp sockets. These methods enable reserving a packet buffer with a greater size than you need, and then shrinking the size once you know it. (#625)\n- socket: Make `trait AnySocket` object-safe (#718)\n- socket/dhcpv4: add waker support (#623)\n- socket/dhcpv4: indicate new config if there's a packet buffer provided (#685)\n- socket/dhcpv4: Use renewal time from DHCP server ACK, if given (#683)\n- socket/dhcpv4: allow for extra configuration\n    - setting arbitrary options in the request. (#650)\n    - retrieving arbitrary options from the response. (#650)\n    - setting custom parameter request list. (#650)\n    - setting custom timing for retries. (#650)\n    - Allow specifying different server/client DHCP ports (#738)\n- socket/raw: Add `peek` and `peek_slice` methods (#734)\n- socket/raw: When sending packets, send the source IP address unmodified (it was previously replaced with the interface's address if it was unspecified). (#616)\n- socket/tcp: Do not reset socket-level settings, such as keepalive, on reset (#603)\n- socket/tcp: ensure we always accept the segment at offset=0 even if the assembler is full. (#735, #452)\n- socket/tcp: Refactored assembler, now more robust and faster (#726, #735)\n- socket/udp: accept packets with checksum field set to `0`, since that means the checksum is not computed (#632)\n- wire: make many functions const (#693)\n- wire/dhcpv4: remove Option enum (#656)\n- wire/dhcpv4: use heapless Vec for DNS server list (#678)\n- wire/icmpv4: add support for TimeExceeded packets (#609)\n- wire/ip: Remove `IpRepr::Unspecified`, `IpVersion::Unspecified`, `IpAddress::Unspecified` (#579, #616)\n- wire/ip: support parsing unspecified IPv6 IpEndpoints from string (like `[::]:12345`) (#732)\n- wire/ipv6: Make Public Ipv6RoutingType (#691)\n- wire/ndisc: do not error on unrecognized options. (#737)\n- Switch to Rust 2021 edition. (#729)\n- Remove obsolete Cargo feature `rust-1_28` (#725)\n\n## [0.8.2] - 2022-11-27\n\n- tcp: Fix return value of nagle_enable ([#642](https://github.com/smoltcp-rs/smoltcp/pull/642))\n- tcp: Only clear retransmit timer when all packets are acked ([#662](https://github.com/smoltcp-rs/smoltcp/pull/662))\n- tcp: Send incomplete fin packets even if nagle enabled ([#665](https://github.com/smoltcp-rs/smoltcp/pull/665))\n- phy: Fix mtu calculation for raw_socket ([#611](https://github.com/smoltcp-rs/smoltcp/pull/611))\n- wire: Fix ipv6 contains_addr function ([#605](https://github.com/smoltcp-rs/smoltcp/pull/605))\n\n## [0.8.1] - 2022-05-12\n\n- Remove unused `rand_core` dep. ([#589](https://github.com/smoltcp-rs/smoltcp/pull/589))\n- Use socklen_t instead of u32 for RawSocket bind() parameter. Fixes build on 32bit Android. ([#593](https://github.com/smoltcp-rs/smoltcp/pull/593))\n- Propagate phy::RawSocket send errors to caller ([#588](https://github.com/smoltcp-rs/smoltcp/pull/588))\n- Fix Interface set_hardware_addr, get_hardware_addr for ieee802154/6lowpan. ([#584](https://github.com/smoltcp-rs/smoltcp/pull/584))\n\n## [0.8.0] - 2021-12-11\n\n- Minimum Supported Rust Version (MSRV) **bumped** from 1.40 to 1.56\n- Add support for IEEE 802.15.4 + 6LoWPAN medium ([#469](https://github.com/smoltcp-rs/smoltcp/pull/469))\n- Add support for IP medium ([#401](https://github.com/smoltcp-rs/smoltcp/pull/401))\n- Add `defmt` logging support ([#455](https://github.com/smoltcp-rs/smoltcp/pull/455))\n- Add RNG infrastructure ([#547](https://github.com/smoltcp-rs/smoltcp/pull/547), [#573](https://github.com/smoltcp-rs/smoltcp/pull/573))\n- Add `Context` struct that must be passed to some socket methods ([#500](https://github.com/smoltcp-rs/smoltcp/pull/500))\n- Remove `SocketSet`, sockets are owned by `Interface` now. ([#557](https://github.com/smoltcp-rs/smoltcp/pull/557), [#571](https://github.com/smoltcp-rs/smoltcp/pull/571))\n- TCP: Add Nagle's Algorithm. ([#500](https://github.com/smoltcp-rs/smoltcp/pull/500))\n- TCP crash and correctness fixes:\n    - Add Nagle's Algorithm. ([#500](https://github.com/smoltcp-rs/smoltcp/pull/500))\n    - Window scaling fixes. ([#500](https://github.com/smoltcp-rs/smoltcp/pull/500))\n    - Fix delayed ack causing ack not to be sent after 3 packets. ([#530](https://github.com/smoltcp-rs/smoltcp/pull/530))\n    - Fix RTT estimation for RTTs longer than 1 second ([#538](https://github.com/smoltcp-rs/smoltcp/pull/538))\n    - Fix infinite loop when remote side sets a MSS of 0 ([#538](https://github.com/smoltcp-rs/smoltcp/pull/538))\n    - Fix infinite loop when retransmit when remote window is 0 ([#538](https://github.com/smoltcp-rs/smoltcp/pull/538))\n    - Fix crash when receiving a FIN in SYN_SENT state ([#538](https://github.com/smoltcp-rs/smoltcp/pull/538))\n    - Fix overflow crash when receiving a wrong ACK seq in SYN_RECEIVED state ([#538](https://github.com/smoltcp-rs/smoltcp/pull/538))\n    - Fix overflow crash when initial sequence number is u32::MAX ([#538](https://github.com/smoltcp-rs/smoltcp/pull/538))\n    - Fix infinite loop on challenge ACKs ([#542](https://github.com/smoltcp-rs/smoltcp/pull/542))\n    - Reply with RST to invalid packets in SynReceived state.  ([#542](https://github.com/smoltcp-rs/smoltcp/pull/542))\n    - Do not abort socket when receiving some invalid packets.  ([#542](https://github.com/smoltcp-rs/smoltcp/pull/542))\n    - Make initial sequence number random.  ([#547](https://github.com/smoltcp-rs/smoltcp/pull/547))\n    - Reply with RST to ACKs with invalid ackno in SYN_SENT. ([#522](https://github.com/smoltcp-rs/smoltcp/pull/522))\n- ARP fixes to deal better with broken networks:\n    - Fill cache only from ARP packets, not any packets. ([#544](https://github.com/smoltcp-rs/smoltcp/pull/544))\n    - Fill cache only from ARP packets directed at us. ([#544](https://github.com/smoltcp-rs/smoltcp/pull/544))\n    - Reject ARP packets with a source address not in the local network. ([#536](https://github.com/smoltcp-rs/smoltcp/pull/536), [#544](https://github.com/smoltcp-rs/smoltcp/pull/544))\n    - Ignore unknown ARP packets. ([#544](https://github.com/smoltcp-rs/smoltcp/pull/544))\n    - Flush neighbor cache on IP change ([#564](https://github.com/smoltcp-rs/smoltcp/pull/564))\n- UDP: Add `close()` method to unbind socket. ([#475](https://github.com/smoltcp-rs/smoltcp/pull/475), [#482](https://github.com/smoltcp-rs/smoltcp/pull/482))\n- DHCP client improvements:\n    - Refactored implementation to improve reliability and RFC compliance ([#459](https://github.com/smoltcp-rs/smoltcp/pull/459))\n    - Convert to socket ([#459](https://github.com/smoltcp-rs/smoltcp/pull/459))\n    - Added `max_lease_duration` option ([#459](https://github.com/smoltcp-rs/smoltcp/pull/459))\n    - Do not set the BROADCAST flag ([#548](https://github.com/smoltcp-rs/smoltcp/pull/548))\n    - Add option to ignore NAKs ([#548](https://github.com/smoltcp-rs/smoltcp/pull/548))\n- DHCP wire:\n    - Fix DhcpRepr::buffer_len not accounting for lease time, router and subnet options ([#478](https://github.com/smoltcp-rs/smoltcp/pull/478))\n    - Emit DNS servers in DhcpRepr ([#510](https://github.com/smoltcp-rs/smoltcp/pull/510))\n    - Fix incorrect bit for BROADCAST flag ([#548](https://github.com/smoltcp-rs/smoltcp/pull/548))\n- Improve resilience against packet ingress processing errors ([#281](https://github.com/smoltcp-rs/smoltcp/pull/281), [#483](https://github.com/smoltcp-rs/smoltcp/pull/483))\n- Implement `std::error::Error` for `smoltcp::Error` ([#485](https://github.com/smoltcp-rs/smoltcp/pull/485))\n- Update `managed` from 0.7 to 0.8 ([442](https://github.com/smoltcp-rs/smoltcp/pull/442))\n- Fix incorrect timestamp in PCAP captures ([#513](https://github.com/smoltcp-rs/smoltcp/pull/513))\n- Use microseconds instead of milliseconds in Instant and Duration ([#514](https://github.com/smoltcp-rs/smoltcp/pull/514))\n- Expose inner `Device` in `PcapWriter` ([#524](https://github.com/smoltcp-rs/smoltcp/pull/524))\n- Fix assert with any_ip + broadcast dst_addr. ([#533](https://github.com/smoltcp-rs/smoltcp/pull/533), [#534](https://github.com/smoltcp-rs/smoltcp/pull/534))\n- Simplify PcapSink trait ([#535](https://github.com/smoltcp-rs/smoltcp/pull/535))\n- Fix wrong operation order in FuzzInjector ([#525](https://github.com/smoltcp-rs/smoltcp/pull/525), [#535](https://github.com/smoltcp-rs/smoltcp/pull/535))\n\n## [0.7.5] - 2021-06-28\n\n- dhcpv4: emit DNS servers in repr ([#505](https://github.com/smoltcp-rs/smoltcp/pull/505))\n\n## [0.7.4] - 2021-06-11\n\n- tcp: fix \"subtract sequence numbers with underflow\" on remote window shrink. ([#490](https://github.com/smoltcp-rs/smoltcp/pull/490))\n- tcp: fix subtract with overflow when receiving a SYNACK with unincremented ACK number. ([#491](https://github.com/smoltcp-rs/smoltcp/pull/491))\n- tcp: use nonzero initial sequence number to workaround misbehaving servers. ([#492](https://github.com/smoltcp-rs/smoltcp/pull/492))\n\n## [0.7.3] - 2021-05-29\n\n- Fix \"unused attribute\" error in recent nightlies.\n\n## [0.7.2] - 2021-05-29\n\n- iface: check for ipv4 subnet broadcast addrs everywhere ([#462](https://github.com/smoltcp-rs/smoltcp/pull/462))\n- dhcp: always send parameter_request_list. ([#456](https://github.com/smoltcp-rs/smoltcp/pull/456))\n- dhcp: Clear expiration time on reset. ([#456](https://github.com/smoltcp-rs/smoltcp/pull/456))\n- phy: fix FaultInjector returning a too big buffer when simulating a drop on tx ([#463](https://github.com/smoltcp-rs/smoltcp/pull/463))\n- tcp rtte: fix \"attempt to multiply with overflow\". ([#476](https://github.com/smoltcp-rs/smoltcp/pull/476))\n- tcp: LastAck should only change to Closed on ack of fin. ([#477](https://github.com/smoltcp-rs/smoltcp/pull/477))\n- wire/dhcpv4: account for lease time, router and subnet options in DhcpRepr::buffer_len ([#478](https://github.com/smoltcp-rs/smoltcp/pull/478))\n\n## [0.7.1] - 2021-03-27\n\n- ndisc: Fix NeighborSolicit incorrectly asking for src addr instead of dst addr ([419](https://github.com/smoltcp-rs/smoltcp/pull/419))\n- dhcpv4: respect lease time from the server instead of renewing every 60 seconds. ([437](https://github.com/smoltcp-rs/smoltcp/pull/437))\n- Fix build errors due to invalid combinations of features ([416](https://github.com/smoltcp-rs/smoltcp/pull/416), [447](https://github.com/smoltcp-rs/smoltcp/pull/447))\n- wire/ipv4: make some functions const ([420](https://github.com/smoltcp-rs/smoltcp/pull/420))\n- phy: fix BPF on OpenBSD ([421](https://github.com/smoltcp-rs/smoltcp/pull/421), [427](https://github.com/smoltcp-rs/smoltcp/pull/427))\n- phy: enable RawSocket, TapInterface on Android ([435](https://github.com/smoltcp-rs/smoltcp/pull/435))\n- phy: fix phy_wait for waits longer than 1 second ([449](https://github.com/smoltcp-rs/smoltcp/pull/449))\n\n## [0.7.0] - 2021-01-20\n\n- Minimum Supported Rust Version (MSRV) **bumped** from 1.36 to 1.40\n\n### New features\n- tcp: Allow distinguishing between graceful (FIN) and ungraceful (RST) close. On graceful close, `recv()` now returns `Error::Finished`. On ungraceful close, `Error::Illegal` is returned, as before. ([351](https://github.com/smoltcp-rs/smoltcp/pull/351))\n- sockets: Add support for attaching async/await Wakers to sockets. Wakers are woken on socket state changes. ([394](https://github.com/smoltcp-rs/smoltcp/pull/394))\n- tcp: Set retransmission timeout based on an RTT estimation, instead of the previously fixed 100ms. This improves performance on high-latency links, such as mobile networks. ([406](https://github.com/smoltcp-rs/smoltcp/pull/406))\n- tcp: add Delayed ACK support. On by default, with a 10ms delay. ([404](https://github.com/smoltcp-rs/smoltcp/pull/404))\n- ip: Process broadcast packets directed to the subnet's broadcast address, such as 192.168.1.255. Previously broadcast packets were\nonly processed when directed to the 255.255.255.255 address. ([377](https://github.com/smoltcp-rs/smoltcp/pull/377))\n\n### Fixes\n- udp,raw,icmp: Fix packet buffer panic caused by large payload ([332](https://github.com/smoltcp-rs/smoltcp/pull/332))\n- dhcpv4: use offered ip in requested ip option ([310](https://github.com/smoltcp-rs/smoltcp/pull/310))\n- dhcpv4: Re-export dhcp::clientv4::Config\n- dhcpv4: Enable `proto-dhcpv4` feature by default. ([327](https://github.com/smoltcp-rs/smoltcp/pull/327))\n- ethernet,arp: Allow for ARP retry during egress ([368](https://github.com/smoltcp-rs/smoltcp/pull/368))\n- ethernet,arp: Only limit the neighbor cache rate after sending a request packet ([369](https://github.com/smoltcp-rs/smoltcp/pull/369))\n- tcp: use provided ip for TcpSocket::connect instead of 0.0.0.0 ([329](https://github.com/smoltcp-rs/smoltcp/pull/329))\n- tcp: Accept data packets in FIN_WAIT_2 state. ([350](https://github.com/smoltcp-rs/smoltcp/pull/350))\n- tcp: Always send updated ack number in `ack_reply()`. ([353](https://github.com/smoltcp-rs/smoltcp/pull/353))\n- tcp: allow sending ACKs in FinWait2 state. ([388](https://github.com/smoltcp-rs/smoltcp/pull/388))\n- tcp: fix racey simultaneous close not sending FIN. ([398](https://github.com/smoltcp-rs/smoltcp/pull/398)) \n- tcp: Do not send window updates in states that shouldn't do so ([360](https://github.com/smoltcp-rs/smoltcp/pull/360))\n- tcp: Return RST to unexpected ACK in SYN-SENT state. ([367](https://github.com/smoltcp-rs/smoltcp/pull/367))\n- tcp: Take MTU into account during TcpSocket dispatch. ([384](https://github.com/smoltcp-rs/smoltcp/pull/384))\n- tcp: don't send data outside the remote window ([387](https://github.com/smoltcp-rs/smoltcp/pull/387))\n- phy: Take Ethernet header into account for MTU of RawSocket and TapInterface. ([393](https://github.com/smoltcp-rs/smoltcp/pull/393))\n- phy: add null terminator to c-string passed to libc API ([372](https://github.com/smoltcp-rs/smoltcp/pull/372))\n\n### Quality of Life&trade; improvements \n- Update to Rust 2018 edition ([396](https://github.com/smoltcp-rs/smoltcp/pull/396))\n- Migrate CI to Github Actions ([390](https://github.com/smoltcp-rs/smoltcp/pull/390))\n- Fix clippy lints, enforce clippy in CI ([395](https://github.com/smoltcp-rs/smoltcp/pull/395), [402](https://github.com/smoltcp-rs/smoltcp/pull/402), [403](https://github.com/smoltcp-rs/smoltcp/pull/403), [405](https://github.com/smoltcp-rs/smoltcp/pull/405), [407](https://github.com/smoltcp-rs/smoltcp/pull/407))\n- Use #[non_exhaustive] for enums and structs ([409](https://github.com/smoltcp-rs/smoltcp/pull/409), [411](https://github.com/smoltcp-rs/smoltcp/pull/411))\n- Simplify lifetime parameters of sockets, SocketSet, EthernetInterface ([410](https://github.com/smoltcp-rs/smoltcp/pull/410), [413](https://github.com/smoltcp-rs/smoltcp/pull/413))\n\n[Unreleased]: https://github.com/smoltcp-rs/smoltcp/compare/v0.12.0...HEAD\n[0.12.0]: https://github.com/smoltcp-rs/smoltcp/compare/v0.11.0...v0.12.0\n[0.11.0]: https://github.com/smoltcp-rs/smoltcp/compare/v0.10.0...v0.11.0\n[0.10.0]: https://github.com/smoltcp-rs/smoltcp/compare/v0.9.1...v0.10.0\n[0.9.1]: https://github.com/smoltcp-rs/smoltcp/compare/v0.9.0...v0.9.1\n[0.9.0]: https://github.com/smoltcp-rs/smoltcp/compare/v0.8.2...v0.9.0\n[0.8.2]: https://github.com/smoltcp-rs/smoltcp/compare/v0.8.1...v0.8.2\n[0.8.1]: https://github.com/smoltcp-rs/smoltcp/compare/v0.8.0...v0.8.1\n[0.8.0]: https://github.com/smoltcp-rs/smoltcp/compare/v0.7.0...v0.8.0\n[0.7.5]: https://github.com/smoltcp-rs/smoltcp/compare/v0.7.4...v0.7.5\n[0.7.4]: https://github.com/smoltcp-rs/smoltcp/compare/v0.7.3...v0.7.4\n[0.7.3]: https://github.com/smoltcp-rs/smoltcp/compare/v0.7.2...v0.7.3\n[0.7.2]: https://github.com/smoltcp-rs/smoltcp/compare/v0.7.1...v0.7.2\n[0.7.1]: https://github.com/smoltcp-rs/smoltcp/compare/v0.7.0...v0.7.1\n[0.7.0]: https://github.com/smoltcp-rs/smoltcp/compare/v0.6.0...v0.7.0\n"
        },
        {
          "name": "Cargo.toml",
          "type": "blob",
          "size": 10.99609375,
          "content": "[package]\nname = \"smoltcp\"\nversion = \"0.12.0\"\nedition = \"2021\"\nrust-version = \"1.80\"\nauthors = [\"whitequark <whitequark@whitequark.org>\"]\ndescription = \"A TCP/IP stack designed for bare-metal, real-time systems without a heap.\"\ndocumentation = \"https://docs.rs/smoltcp/\"\nhomepage = \"https://github.com/smoltcp-rs/smoltcp\"\nrepository = \"https://github.com/smoltcp-rs/smoltcp.git\"\nreadme = \"README.md\"\nkeywords = [\"ip\", \"tcp\", \"udp\", \"ethernet\", \"network\"]\ncategories = [\"embedded\", \"network-programming\"]\nlicense = \"0BSD\"\n# Each example should have an explicit `[[example]]` section here to\n# ensure that the correct features are enabled.\nautoexamples = false\n\n[lints.rust]\nunexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(fuzzing)'] }\n\n[dependencies]\nmanaged = { version = \"0.8\", default-features = false, features = [\"map\"] }\nbyteorder = { version = \"1.0\", default-features = false }\nlog = { version = \"0.4.4\", default-features = false, optional = true }\nlibc = { version = \"0.2.18\", optional = true }\nbitflags = { version = \"1.0\", default-features = false }\ndefmt = { version = \"0.3.8\", optional = true, features = [\"ip_in_core\"] }\ncfg-if = \"1.0.0\"\nheapless = \"0.8\"\n\n[dev-dependencies]\nenv_logger = \"0.10\"\ngetopts = \"0.2\"\nrand = \"0.8\"\nurl = \"2.0\"\nrstest = \"0.17\"\n\n[features]\nstd = [\"managed/std\", \"alloc\"]\nalloc = [\"managed/alloc\", \"defmt?/alloc\"]\nverbose = []\ndefmt = [\"dep:defmt\", \"heapless/defmt-03\"]\n\"medium-ethernet\" = [\"socket\"]\n\"medium-ip\" = [\"socket\"]\n\"medium-ieee802154\" = [\"socket\", \"proto-sixlowpan\"]\n\n\"phy-raw_socket\" = [\"std\", \"libc\"]\n\"phy-tuntap_interface\" = [\"std\", \"libc\", \"medium-ethernet\"]\n\n\"proto-ipv4\" = []\n\"proto-ipv4-fragmentation\" = [\"proto-ipv4\", \"_proto-fragmentation\"]\n\"proto-dhcpv4\" = [\"proto-ipv4\"]\n\"proto-ipv6\" = []\n\"proto-ipv6-hbh\" = [\"proto-ipv6\"]\n\"proto-ipv6-fragmentation\" = [\"proto-ipv6\", \"_proto-fragmentation\"]\n\"proto-ipv6-routing\" = [\"proto-ipv6\"]\n\"proto-rpl\" = [\"proto-ipv6-hbh\", \"proto-ipv6-routing\"]\n\"proto-sixlowpan\" = [\"proto-ipv6\"]\n\"proto-sixlowpan-fragmentation\" = [\"proto-sixlowpan\", \"_proto-fragmentation\"]\n\"proto-dns\" = []\n\"proto-ipsec\" = [\"proto-ipsec-ah\", \"proto-ipsec-esp\"]\n\"proto-ipsec-ah\" = []\n\"proto-ipsec-esp\" = []\n\n\"multicast\" = []\n\n\"socket\" = []\n\"socket-raw\" = [\"socket\"]\n\"socket-udp\" = [\"socket\"]\n\"socket-tcp\" = [\"socket\"]\n\"socket-icmp\" = [\"socket\"]\n\"socket-dhcpv4\" = [\"socket\", \"medium-ethernet\", \"proto-dhcpv4\"]\n\"socket-dns\" = [\"socket\", \"proto-dns\"]\n\"socket-mdns\" = [\"socket-dns\"]\n\n# Enable Cubic TCP congestion control algorithm, and it is used as a default congestion controller.\n#\n# Cubic relies on double precision (`f64`) floating point operations, which may cause issues in some contexts:\n#\n# * Small embedded processors (such as Cortex-M0, Cortex-M1, and Cortex-M3) do not have an FPU,\n#   and floating point operations consume significant amounts of CPU time and Flash space.\n# * Interrupt handlers should almost always avoid floating-point operations.\n# * Kernel-mode code on desktop processors usually avoids FPU operations to reduce the penalty of saving and restoring FPU registers.\n#\n# In all these cases, `CongestionControl::Reno` is a better choice of congestion control algorithm.\n\"socket-tcp-cubic\" = []\n\n# Enable Reno TCP congestion control algorithm, and it is used as a default congestion controller.\n\"socket-tcp-reno\" = []\n\n\"packetmeta-id\" = []\n\n\"async\" = []\n\ndefault = [\n  \"std\", \"log\", # needed for `cargo test --no-default-features --features default` :/\n  \"medium-ethernet\", \"medium-ip\", \"medium-ieee802154\",\n  \"phy-raw_socket\", \"phy-tuntap_interface\",\n  \"proto-ipv4\",  \"proto-dhcpv4\", \"proto-ipv6\", \"proto-dns\",\n  \"proto-ipv4-fragmentation\", \"proto-sixlowpan-fragmentation\",\n  \"socket-raw\", \"socket-icmp\", \"socket-udp\", \"socket-tcp\", \"socket-dhcpv4\", \"socket-dns\", \"socket-mdns\",\n  \"packetmeta-id\", \"async\", \"multicast\"\n]\n\n# Private features\n# Features starting with \"_\" are considered private. They should not be enabled by\n# other crates, and they are not considered semver-stable.\n\n\"_proto-fragmentation\" = []\n\n# BEGIN AUTOGENERATED CONFIG FEATURES\n# Generated by gen_config.py. DO NOT EDIT.\niface-max-addr-count-1 = []\niface-max-addr-count-2 = [] # Default\niface-max-addr-count-3 = []\niface-max-addr-count-4 = []\niface-max-addr-count-5 = []\niface-max-addr-count-6 = []\niface-max-addr-count-7 = []\niface-max-addr-count-8 = []\n\niface-max-multicast-group-count-1 = []\niface-max-multicast-group-count-2 = []\niface-max-multicast-group-count-3 = []\niface-max-multicast-group-count-4 = [] # Default\niface-max-multicast-group-count-5 = []\niface-max-multicast-group-count-6 = []\niface-max-multicast-group-count-7 = []\niface-max-multicast-group-count-8 = []\niface-max-multicast-group-count-16 = []\niface-max-multicast-group-count-32 = []\niface-max-multicast-group-count-64 = []\niface-max-multicast-group-count-128 = []\niface-max-multicast-group-count-256 = []\niface-max-multicast-group-count-512 = []\niface-max-multicast-group-count-1024 = []\n\niface-max-sixlowpan-address-context-count-1 = []\niface-max-sixlowpan-address-context-count-2 = []\niface-max-sixlowpan-address-context-count-3 = []\niface-max-sixlowpan-address-context-count-4 = [] # Default\niface-max-sixlowpan-address-context-count-5 = []\niface-max-sixlowpan-address-context-count-6 = []\niface-max-sixlowpan-address-context-count-7 = []\niface-max-sixlowpan-address-context-count-8 = []\niface-max-sixlowpan-address-context-count-16 = []\niface-max-sixlowpan-address-context-count-32 = []\niface-max-sixlowpan-address-context-count-64 = []\niface-max-sixlowpan-address-context-count-128 = []\niface-max-sixlowpan-address-context-count-256 = []\niface-max-sixlowpan-address-context-count-512 = []\niface-max-sixlowpan-address-context-count-1024 = []\n\niface-neighbor-cache-count-1 = []\niface-neighbor-cache-count-2 = []\niface-neighbor-cache-count-3 = []\niface-neighbor-cache-count-4 = []\niface-neighbor-cache-count-5 = []\niface-neighbor-cache-count-6 = []\niface-neighbor-cache-count-7 = []\niface-neighbor-cache-count-8 = [] # Default\niface-neighbor-cache-count-16 = []\niface-neighbor-cache-count-32 = []\niface-neighbor-cache-count-64 = []\niface-neighbor-cache-count-128 = []\niface-neighbor-cache-count-256 = []\niface-neighbor-cache-count-512 = []\niface-neighbor-cache-count-1024 = []\n\niface-max-route-count-1 = []\niface-max-route-count-2 = [] # Default\niface-max-route-count-3 = []\niface-max-route-count-4 = []\niface-max-route-count-5 = []\niface-max-route-count-6 = []\niface-max-route-count-7 = []\niface-max-route-count-8 = []\niface-max-route-count-16 = []\niface-max-route-count-32 = []\niface-max-route-count-64 = []\niface-max-route-count-128 = []\niface-max-route-count-256 = []\niface-max-route-count-512 = []\niface-max-route-count-1024 = []\n\nfragmentation-buffer-size-256 = []\nfragmentation-buffer-size-512 = []\nfragmentation-buffer-size-1024 = []\nfragmentation-buffer-size-1500 = [] # Default\nfragmentation-buffer-size-2048 = []\nfragmentation-buffer-size-4096 = []\nfragmentation-buffer-size-8192 = []\nfragmentation-buffer-size-16384 = []\nfragmentation-buffer-size-32768 = []\nfragmentation-buffer-size-65536 = []\n\nassembler-max-segment-count-1 = []\nassembler-max-segment-count-2 = []\nassembler-max-segment-count-3 = []\nassembler-max-segment-count-4 = [] # Default\nassembler-max-segment-count-8 = []\nassembler-max-segment-count-16 = []\nassembler-max-segment-count-32 = []\n\nreassembly-buffer-size-256 = []\nreassembly-buffer-size-512 = []\nreassembly-buffer-size-1024 = []\nreassembly-buffer-size-1500 = [] # Default\nreassembly-buffer-size-2048 = []\nreassembly-buffer-size-4096 = []\nreassembly-buffer-size-8192 = []\nreassembly-buffer-size-16384 = []\nreassembly-buffer-size-32768 = []\nreassembly-buffer-size-65536 = []\n\nreassembly-buffer-count-1 = [] # Default\nreassembly-buffer-count-2 = []\nreassembly-buffer-count-3 = []\nreassembly-buffer-count-4 = []\nreassembly-buffer-count-8 = []\nreassembly-buffer-count-16 = []\nreassembly-buffer-count-32 = []\n\nipv6-hbh-max-options-1 = []\nipv6-hbh-max-options-2 = []\nipv6-hbh-max-options-3 = []\nipv6-hbh-max-options-4 = [] # Default\nipv6-hbh-max-options-8 = []\nipv6-hbh-max-options-16 = []\nipv6-hbh-max-options-32 = []\n\ndns-max-result-count-1 = [] # Default\ndns-max-result-count-2 = []\ndns-max-result-count-3 = []\ndns-max-result-count-4 = []\ndns-max-result-count-8 = []\ndns-max-result-count-16 = []\ndns-max-result-count-32 = []\n\ndns-max-server-count-1 = [] # Default\ndns-max-server-count-2 = []\ndns-max-server-count-3 = []\ndns-max-server-count-4 = []\ndns-max-server-count-8 = []\ndns-max-server-count-16 = []\ndns-max-server-count-32 = []\n\ndns-max-name-size-64 = []\ndns-max-name-size-128 = []\ndns-max-name-size-255 = [] # Default\n\nrpl-relations-buffer-count-1 = []\nrpl-relations-buffer-count-2 = []\nrpl-relations-buffer-count-4 = []\nrpl-relations-buffer-count-8 = []\nrpl-relations-buffer-count-16 = [] # Default\nrpl-relations-buffer-count-32 = []\nrpl-relations-buffer-count-64 = []\nrpl-relations-buffer-count-128 = []\n\nrpl-parents-buffer-count-2 = []\nrpl-parents-buffer-count-4 = []\nrpl-parents-buffer-count-8 = [] # Default\nrpl-parents-buffer-count-16 = []\nrpl-parents-buffer-count-32 = []\n\n# END AUTOGENERATED CONFIG FEATURES\n\n[[example]]\nname = \"packet2pcap\"\npath = \"utils/packet2pcap.rs\"\nrequired-features = [\"std\"]\n\n[[example]]\nname = \"tcpdump\"\nrequired-features = [\"std\", \"phy-raw_socket\", \"proto-ipv4\"]\n\n[[example]]\nname = \"httpclient\"\nrequired-features = [\"std\", \"medium-ethernet\", \"medium-ip\", \"phy-tuntap_interface\", \"proto-ipv4\", \"proto-ipv6\", \"socket-tcp\"]\n\n[[example]]\nname = \"ping\"\nrequired-features = [\"std\", \"medium-ethernet\", \"medium-ip\", \"phy-tuntap_interface\", \"proto-ipv4\", \"proto-ipv6\", \"socket-icmp\"]\n\n[[example]]\nname = \"server\"\nrequired-features = [\"std\", \"medium-ethernet\", \"medium-ip\", \"phy-tuntap_interface\", \"proto-ipv4\", \"socket-tcp\", \"socket-udp\"]\n\n[[example]]\nname = \"client\"\nrequired-features = [\"std\", \"medium-ethernet\", \"medium-ip\", \"phy-tuntap_interface\", \"proto-ipv4\", \"socket-tcp\", \"socket-udp\"]\n\n[[example]]\nname = \"loopback\"\nrequired-features = [\"log\", \"medium-ethernet\", \"proto-ipv4\", \"socket-tcp\"]\n\n[[example]]\nname = \"loopback_benchmark\"\nrequired-features = [\"std\", \"log\", \"medium-ethernet\", \"proto-ipv4\", \"socket-tcp\"]\n\n[[example]]\nname = \"multicast\"\nrequired-features = [\"std\", \"medium-ethernet\", \"medium-ip\", \"phy-tuntap_interface\", \"proto-ipv4\", \"multicast\", \"socket-udp\"]\n\n[[example]]\nname = \"multicast6\"\nrequired-features = [\"std\", \"medium-ethernet\", \"medium-ip\", \"phy-tuntap_interface\", \"proto-ipv6\", \"socket-udp\"]\n\n[[example]]\nname = \"benchmark\"\nrequired-features = [\"std\", \"medium-ethernet\", \"medium-ip\", \"phy-tuntap_interface\", \"proto-ipv4\", \"socket-raw\", \"socket-udp\"]\n\n[[example]]\nname = \"dhcp_client\"\nrequired-features = [\"std\", \"medium-ethernet\", \"medium-ip\", \"phy-tuntap_interface\", \"proto-ipv4\", \"proto-dhcpv4\", \"socket-raw\"]\n\n[[example]]\nname = \"sixlowpan\"\nrequired-features = [\"std\", \"medium-ieee802154\", \"phy-raw_socket\", \"proto-sixlowpan\", \"proto-sixlowpan-fragmentation\", \"socket-udp\"]\n\n[[example]]\nname = \"sixlowpan_benchmark\"\nrequired-features = [\"std\", \"medium-ieee802154\", \"phy-raw_socket\", \"proto-sixlowpan\", \"proto-sixlowpan-fragmentation\", \"socket-udp\"]\n\n[[example]]\nname = \"dns\"\nrequired-features = [\"std\", \"medium-ethernet\", \"medium-ip\", \"phy-tuntap_interface\", \"proto-ipv4\", \"socket-dns\"]\n\n[profile.release]\ndebug = 2\n"
        },
        {
          "name": "LICENSE-0BSD.txt",
          "type": "blob",
          "size": 0.62890625,
          "content": "Copyright (C) smoltcp contributors\n\nPermission to use, copy, modify, and/or distribute this software for\nany purpose with or without fee is hereby granted.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES\nWITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF\nMERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR\nANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES\nWHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN\nAN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT\nOF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.\n\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 21.1171875,
          "content": "# smoltcp\n\n[![docs.rs](https://docs.rs/smoltcp/badge.svg)](https://docs.rs/smoltcp)\n[![crates.io](https://img.shields.io/crates/v/smoltcp.svg)](https://crates.io/crates/smoltcp)\n[![crates.io](https://img.shields.io/crates/d/smoltcp.svg)](https://crates.io/crates/smoltcp)\n[![crates.io](https://img.shields.io/matrix/smoltcp:matrix.org)](https://matrix.to/#/#smoltcp:matrix.org)\n[![codecov](https://codecov.io/github/smoltcp-rs/smoltcp/branch/master/graph/badge.svg?token=3KbAR9xH1t)](https://codecov.io/github/smoltcp-rs/smoltcp)\n\n_smoltcp_ is a standalone, event-driven TCP/IP stack that is designed for bare-metal,\nreal-time systems. Its design goals are simplicity and robustness. Its design anti-goals\ninclude complicated compile-time computations, such as macro or type tricks, even\nat cost of performance degradation.\n\n_smoltcp_ does not need heap allocation *at all*, is [extensively documented][docs],\nand compiles on stable Rust 1.80 and later.\n\n_smoltcp_ achieves [~Gbps of throughput](#examplesbenchmarkrs) when tested against\nthe Linux TCP stack in loopback mode.\n\n[docs]: https://docs.rs/smoltcp/\n\n## Features\n\n_smoltcp_ is missing many widely deployed features, usually because no one implemented them yet.\nTo set expectations right, both implemented and omitted features are listed.\n\n### Media layer\n\nThere are 3 supported mediums.\n\n* Ethernet\n  * Regular Ethernet II frames are supported.\n  * Unicast, broadcast and multicast packets are supported.\n  * ARP packets (including gratuitous requests and replies) are supported.\n  * ARP requests are sent at a rate not exceeding one per second.\n  * Cached ARP entries expire after one minute.\n  * 802.3 frames and 802.1Q are **not** supported.\n  * Jumbo frames are **not** supported.\n* IP\n  * Unicast, broadcast and multicast packets are supported.\n* IEEE 802.15.4\n  * Only support for data frames.\n\n### IP layer\n\n#### IPv4\n\n  * IPv4 header checksum is generated and validated.\n  * IPv4 time-to-live value is configurable per socket, set to 64 by default.\n  * IPv4 default gateway is supported.\n  * Routing outgoing IPv4 packets is supported, through a default gateway or a CIDR route table.\n  * IPv4 fragmentation and reassembly is supported.\n  * IPv4 options are **not** supported and are silently ignored.\n\n#### IPv6\n\n  * IPv6 hop-limit value is configurable per socket, set to 64 by default.\n  * Routing outgoing IPv6 packets is supported, through a default gateway or a CIDR route table.\n  * IPv6 hop-by-hop header is supported.\n  * ICMPv6 parameter problem message is generated in response to an unrecognized IPv6 next header.\n  * ICMPv6 parameter problem message is **not** generated in response to an unknown IPv6\n    hop-by-hop option.\n\n#### 6LoWPAN\n\n  * Implementation of [RFC6282](https://tools.ietf.org/rfc/rfc6282.txt).\n  * Fragmentation is supported, as defined in [RFC4944](https://tools.ietf.org/rfc/rfc4944.txt).\n  * UDP header compression/decompression is supported.\n  * Extension header compression/decompression is supported.\n  * Uncompressed IPv6 Extension Headers are **not** supported.\n\n### IP multicast\n\n#### IGMP\n\nThe IGMPv1 and IGMPv2 protocols are supported, and IPv4 multicast is available.\n\n  * Membership reports are sent in response to membership queries at\n    equal intervals equal to the maximum response time divided by the\n    number of groups to be reported.\n\n### ICMP layer\n\n#### ICMPv4\n\nThe ICMPv4 protocol is supported, and ICMP sockets are available.\n\n  * ICMPv4 header checksum is supported.\n  * ICMPv4 echo replies are generated in response to echo requests.\n  * ICMP sockets can listen to ICMPv4 Port Unreachable messages, or any ICMPv4 messages with\n    a given IPv4 identifier field.\n  * ICMPv4 protocol unreachable messages are **not** passed to higher layers when received.\n  * ICMPv4 parameter problem messages are **not** generated.\n\n#### ICMPv6\n\nThe ICMPv6 protocol is supported, and ICMP sockets are available.\n\n  * ICMPv6 header checksum is supported.\n  * ICMPv6 echo replies are generated in response to echo requests.\n  * ICMPv6 protocol unreachable messages are **not** passed to higher layers when received.\n\n#### NDISC\n\n  * Neighbor Advertisement messages are generated in response to Neighbor Solicitations.\n  * Router Advertisement messages are **not** generated or read.\n  * Router Solicitation messages are **not** generated or read.\n  * Redirected Header messages are **not** generated or read.\n\n### UDP layer\n\nThe UDP protocol is supported over IPv4 and IPv6, and UDP sockets are available.\n\n  * Header checksum is always generated and validated.\n  * In response to a packet arriving at a port without a listening socket,\n    an ICMP destination unreachable message is generated.\n\n### TCP layer\n\nThe TCP protocol is supported over IPv4 and IPv6, and server and client TCP sockets are available.\n\n  * Header checksum is generated and validated.\n  * Maximum segment size is negotiated.\n  * Window scaling is negotiated.\n  * Multiple packets are transmitted without waiting for an acknowledgement.\n  * Reassembly of out-of-order segments is supported, with no more than 4 or 32 gaps in sequence space.\n  * Keep-alive packets may be sent at a configurable interval.\n  * Retransmission timeout starts at at an estimate of RTT, and doubles every time.\n  * Time-wait timeout has a fixed interval of 10 s.\n  * User timeout has a configurable interval.\n  * Delayed acknowledgements are supported, with configurable delay.\n  * Nagle's algorithm is implemented.\n  * Selective acknowledgements are **not** implemented.\n  * Silly window syndrome avoidance is **not** implemented.\n  * Congestion control is **not** implemented.\n  * Timestamping is **not** supported.\n  * Urgent pointer is **ignored**.\n  * Probing Zero Windows is **not** implemented.\n  * Packetization Layer Path MTU Discovery [PLPMTU](https://tools.ietf.org/rfc/rfc4821.txt) is **not** implemented.\n\n## Installation\n\nTo use the _smoltcp_ library in your project, add the following to `Cargo.toml`:\n\n```toml\n[dependencies]\nsmoltcp = \"0.10.0\"\n```\n\nThe default configuration assumes a hosted environment, for ease of evaluation.\nYou probably want to disable default features and configure them one by one:\n\n```toml\n[dependencies]\nsmoltcp = { version = \"0.10.0\", default-features = false, features = [\"log\"] }\n```\n\n## Feature flags\n\n### Feature `std`\n\nThe `std` feature enables use of objects and slices owned by the networking stack through a\ndependency on `std::boxed::Box` and `std::vec::Vec`.\n\nThis feature is enabled by default.\n\n### Feature `alloc`\n\nThe `alloc` feature enables use of objects owned by the networking stack through a dependency\non collections from the `alloc` crate. This only works on nightly rustc.\n\nThis feature is disabled by default.\n\n### Feature `log`\n\nThe `log` feature enables logging of events within the networking stack through\nthe [log crate][log]. Normal events (e.g. buffer level or TCP state changes) are emitted with\nthe TRACE log level. Exceptional events (e.g. malformed packets) are emitted with\nthe DEBUG log level.\n\n[log]: https://crates.io/crates/log\n\nThis feature is enabled by default.\n\n### Feature `defmt`\n\nThe `defmt` feature enables logging of events with the [defmt crate][defmt].\n\n[defmt]: https://crates.io/crates/defmt\n\nThis feature is disabled by default, and cannot be used at the same time as `log`.\n\n### Feature `verbose`\n\nThe `verbose` feature enables logging of events where the logging itself may incur very high\noverhead. For example, emitting a log line every time an application reads or writes as little\nas 1 octet from a socket is likely to overwhelm the application logic unless a `BufReader`\nor `BufWriter` is used, which are of course not available on heap-less systems.\n\nThis feature is disabled by default.\n\n### Features `phy-raw_socket` and `phy-tuntap_interface`\n\nEnable `smoltcp::phy::RawSocket` and `smoltcp::phy::TunTapInterface`, respectively.\n\nThese features are enabled by default.\n\n### Features `socket-raw`, `socket-udp`, `socket-tcp`, `socket-icmp`, `socket-dhcpv4`, `socket-dns`\n\nEnable the corresponding socket type.\n\nThese features are enabled by default.\n\n### Features `proto-ipv4`, `proto-ipv6` and `proto-sixlowpan`\n\nEnable [IPv4], [IPv6] and [6LoWPAN] respectively.\n\n[IPv4]: https://tools.ietf.org/rfc/rfc791.txt\n[IPv6]: https://tools.ietf.org/rfc/rfc8200.txt\n[6LoWPAN]: https://tools.ietf.org/rfc/rfc6282.txt\n\n## Configuration\n\n_smoltcp_ has some configuration settings that are set at compile time, affecting sizes\nand counts of buffers.\n\nThey can be set in two ways:\n\n- Via Cargo features: enable a feature like `<name>-<value>`. `name` must be in lowercase and\nuse dashes instead of underscores. For example. `iface-max-addr-count-3`. Only a selection of values\nis available, check `Cargo.toml` for the list.\n- Via environment variables at build time: set the variable named `SMOLTCP_<value>`. For example\n`SMOLTCP_IFACE_MAX_ADDR_COUNT=3 cargo build`. You can also set them in the `[env]` section of `.cargo/config.toml`.\nAny value can be set, unlike with Cargo features.\n\nEnvironment variables take precedence over Cargo features. If two Cargo features are enabled for the same setting\nwith different values, compilation fails.\n\n### `IFACE_MAX_ADDR_COUNT`\n\nMax amount of IP addresses that can be assigned to one interface (counting both IPv4 and IPv6 addresses). Default: 2.\n\n### `IFACE_MAX_MULTICAST_GROUP_COUNT`\n\nMax amount of multicast groups that can be joined by one interface. Default: 4.\n\n### `IFACE_MAX_SIXLOWPAN_ADDRESS_CONTEXT_COUNT`\n\nMax amount of 6LoWPAN address contexts that can be assigned to one interface. Default: 4.\n\n### `IFACE_NEIGHBOR_CACHE_COUNT`\n\nAmount of \"IP address -> hardware address\" entries the neighbor cache (also known as the \"ARP cache\" or the \"ARP table\") holds. Default: 4.\n\n### `IFACE_MAX_ROUTE_COUNT`\n\nMax amount of routes that can be added to one interface. Includes the default route. Includes both IPv4 and IPv6. Default: 2.\n\n### `FRAGMENTATION_BUFFER_SIZE`\n\nSize of the buffer used for fragmenting outgoing packets larger than the MTU. Packets larger than this setting will be dropped instead of fragmented. Default: 1500.\n\n### `ASSEMBLER_MAX_SEGMENT_COUNT`\n\nMaximum number of non-contiguous segments the assembler can hold. Used for both packet reassembly and TCP stream reassembly. Default: 4.\n\n### `REASSEMBLY_BUFFER_SIZE`\n\nSize of the buffer used for reassembling (de-fragmenting) incoming packets. If the reassembled packet is larger than this setting, it will be dropped instead of reassembled. Default: 1500.\n\n### `REASSEMBLY_BUFFER_COUNT`\n\nNumber of reassembly buffers, i.e how many different incoming packets can be reassembled at the same time. Default: 1.\n\n### `DNS_MAX_RESULT_COUNT`\n\nMaximum amount of address results for a given DNS query that will be kept. For example, if this is set to 2 and the queried name has 4 `A` records, only the first 2 will be returned. Default: 1.\n\n### `DNS_MAX_SERVER_COUNT`\n\nMaximum amount of DNS servers that can be configured in one DNS socket. Default: 1.\n\n### `DNS_MAX_NAME_SIZE`\n\nMaximum length of DNS names that can be queried. Default: 255.\n\n### IPV6_HBH_MAX_OPTIONS\n\nThe maximum amount of parsed options the IPv6 Hop-by-Hop header can hold. Default: 4.\n\n## Hosted usage examples\n\n_smoltcp_, being a freestanding networking stack, needs to be able to transmit and receive\nraw frames. For testing purposes, we will use a regular OS, and run _smoltcp_ in\na userspace process. Only Linux is supported (right now).\n\nOn \\*nix OSes, transmitting and receiving raw frames normally requires superuser privileges, but\non Linux it is possible to create a _persistent tap interface_ that can be manipulated by\na specific user:\n\n```sh\nsudo ip tuntap add name tap0 mode tap user $USER\nsudo ip link set tap0 up\nsudo ip addr add 192.168.69.100/24 dev tap0\nsudo ip -6 addr add fe80::100/64 dev tap0\nsudo ip -6 addr add fdaa::100/64 dev tap0\nsudo ip -6 route add fe80::/64 dev tap0\nsudo ip -6 route add fdaa::/64 dev tap0\n```\n\nIt's possible to let _smoltcp_ access Internet by enabling routing for the tap interface:\n\n```sh\nsudo iptables -t nat -A POSTROUTING -s 192.168.69.0/24 -j MASQUERADE\nsudo sysctl net.ipv4.ip_forward=1\nsudo ip6tables -t nat -A POSTROUTING -s fdaa::/64 -j MASQUERADE\nsudo sysctl -w net.ipv6.conf.all.forwarding=1\n\n# Some distros have a default policy of DROP. This allows the traffic.\nsudo iptables -A FORWARD -i tap0 -s 192.168.69.0/24 -j ACCEPT\nsudo iptables -A FORWARD -o tap0 -d 192.168.69.0/24 -j ACCEPT\n```\n\n### Bridged connection\n\nInstead of the routed connection above, you may also set up a bridged (switched)\nconnection. This will make smoltcp speak directly to your LAN, with real ARP, etc.\nIt is needed to run the DHCP example.\n\nNOTE: In this case, the examples' IP configuration must match your LAN's!\n\nNOTE: this ONLY works with actual wired Ethernet connections. It\nwill NOT work on a WiFi connection.\n\n```sh\n# Replace with your wired Ethernet interface name\nETH=enp0s20f0u1u1\n\nsudo modprobe bridge\nsudo modprobe br_netfilter\n\nsudo sysctl -w net.bridge.bridge-nf-call-arptables=0\nsudo sysctl -w net.bridge.bridge-nf-call-ip6tables=0\nsudo sysctl -w net.bridge.bridge-nf-call-iptables=0\n\nsudo ip tuntap add name tap0 mode tap user $USER\nsudo brctl addbr br0\nsudo brctl addif br0 tap0\nsudo brctl addif br0 $ETH\nsudo ip link set tap0 up\nsudo ip link set $ETH up\nsudo ip link set br0 up\n\n# This connects your host system to the internet, so you can use it\n# at the same time you run the examples.\nsudo dhcpcd br0\n```\n\nTo tear down:\n\n```\nsudo killall dhcpcd\nsudo ip link set br0 down\nsudo brctl delbr br0\n```\n\n### Fault injection\n\nIn order to demonstrate the response of _smoltcp_ to adverse network conditions, all examples\nimplement fault injection, available through command-line options:\n\n  * The `--drop-chance` option randomly drops packets, with given probability in percents.\n  * The `--corrupt-chance` option randomly mutates one octet in a packet, with given\n    probability in percents.\n  * The `--size-limit` option drops packets larger than specified size.\n  * The `--tx-rate-limit` and `--rx-rate-limit` options set the amount of tokens for\n    a token bucket rate limiter, in packets per bucket.\n  * The `--shaping-interval` option sets the refill interval of a token bucket rate limiter,\n    in milliseconds.\n\nA good starting value for `--drop-chance` and `--corrupt-chance` is 15%. A good starting\nvalue for `--?x-rate-limit` is 4 and `--shaping-interval` is 50 ms.\n\nNote that packets dropped by the fault injector still get traced;\nthe  `rx: randomly dropping a packet` message indicates that the packet *above* it got dropped,\nand the `tx: randomly dropping a packet` message indicates that the packet *below* it was.\n\n### Packet dumps\n\nAll examples provide a `--pcap` option that writes a [libpcap] file containing a view of every\npacket as it is seen by _smoltcp_.\n\n[libpcap]: https://wiki.wireshark.org/Development/LibpcapFileFormat\n\n### examples/tcpdump.rs\n\n_examples/tcpdump.rs_ is a tiny clone of the _tcpdump_ utility.\n\nUnlike the rest of the examples, it uses raw sockets, and so it can be used on regular interfaces,\ne.g. `eth0` or `wlan0`, as well as the `tap0` interface we've created above.\n\nRead its [source code](/examples/tcpdump.rs), then run it as:\n\n```sh\ncargo build --example tcpdump\nsudo ./target/debug/examples/tcpdump eth0\n```\n\n### examples/httpclient.rs\n\n_examples/httpclient.rs_ emulates a network host that can initiate HTTP requests.\n\nThe host is assigned the hardware address `02-00-00-00-00-02`, IPv4 address `192.168.69.1`, and IPv6 address `fdaa::1`.\n\nRead its [source code](/examples/httpclient.rs), then run it as:\n\n```sh\ncargo run --example httpclient -- --tap tap0 ADDRESS URL\n```\n\nFor example:\n\n```sh\ncargo run --example httpclient -- --tap tap0 93.184.216.34 http://example.org/\n```\n\nor:\n\n```sh\ncargo run --example httpclient -- --tap tap0 2606:2800:220:1:248:1893:25c8:1946 http://example.org/\n```\n\nIt connects to the given address (not a hostname) and URL, and prints any returned response data.\nThe TCP socket buffers are limited to 1024 bytes to make packet traces more interesting.\n\n### examples/ping.rs\n\n_examples/ping.rs_ implements a minimal version of the `ping` utility using raw sockets.\n\nThe host is assigned the hardware address `02-00-00-00-00-02` and IPv4 address `192.168.69.1`.\n\nRead its [source code](/examples/ping.rs), then run it as:\n\n```sh\ncargo run --example ping -- --tap tap0 ADDRESS\n```\n\nIt sends a series of 4 ICMP ECHO\\_REQUEST packets to the given address at one second intervals and\nprints out a status line on each valid ECHO\\_RESPONSE received.\n\nThe first ECHO\\_REQUEST packet is expected to be lost since arp\\_cache is empty after startup;\nthe ECHO\\_REQUEST packet is dropped and an ARP request is sent instead.\n\nCurrently, netmasks are not implemented, and so the only address this example can reach\nis the other endpoint of the tap interface, `192.168.69.100`. It cannot reach itself because\npackets entering a tap interface do not loop back.\n\n### examples/server.rs\n\n_examples/server.rs_ emulates a network host that can respond to basic requests.\n\nThe host is assigned the hardware address `02-00-00-00-00-01` and IPv4 address `192.168.69.1`.\n\nRead its [source code](/examples/server.rs), then run it as:\n\n```sh\ncargo run --example server -- --tap tap0\n```\n\nIt responds to:\n\n  * pings (`ping 192.168.69.1`);\n  * UDP packets on port 6969 (`socat stdio udp4-connect:192.168.69.1:6969 <<<\"abcdefg\"`),\n    where it will respond with reversed chunks of the input indefinitely;\n  * TCP connections on port 6969 (`socat stdio tcp4-connect:192.168.69.1:6969`),\n    where it will respond \"hello\" to any incoming connection and immediately close it;\n  * TCP connections on port 6970 (`socat stdio tcp4-connect:192.168.69.1:6970 <<<\"abcdefg\"`),\n    where it will respond with reversed chunks of the input indefinitely.\n  * TCP connections on port 6971 (`socat stdio tcp4-connect:192.168.69.1:6971 </dev/urandom`),\n    which will sink data. Also, keep-alive packets (every 1 s) and a user timeout (at 2 s)\n    are enabled on this port; try to trigger them using fault injection.\n  * TCP connections on port 6972 (`socat stdio tcp4-connect:192.168.69.1:6972 >/dev/null`),\n    which will source data.\n\nExcept for the socket on port 6971. the buffers are only 64 bytes long, for convenience\nof testing resource exhaustion conditions.\n\n### examples/client.rs\n\n_examples/client.rs_ emulates a network host that can initiate basic requests.\n\nThe host is assigned the hardware address `02-00-00-00-00-02` and IPv4 address `192.168.69.2`.\n\nRead its [source code](/examples/client.rs), then run it as:\n\n```sh\ncargo run --example client -- --tap tap0 ADDRESS PORT\n```\n\nIt connects to the given address (not a hostname) and port (e.g. `socat stdio tcp4-listen:1234`),\nand will respond with reversed chunks of the input indefinitely.\n\n### examples/benchmark.rs\n\n_examples/benchmark.rs_ implements a simple throughput benchmark.\n\nRead its [source code](/examples/benchmark.rs), then run it as:\n\n```sh\ncargo run --release --example benchmark -- --tap tap0 [reader|writer]\n```\n\nIt establishes a connection to itself from a different thread and reads or writes a large amount\nof data in one direction.\n\nA typical result (achieved on a Intel Core i5-13500H CPU and a Linux 6.9.9 x86_64 kernel running\non a LENOVO XiaoXinPro 14 IRH8 laptop) is as follows:\n\n```\n$ cargo run -q --release --example benchmark -- --tap tap0 reader\nthroughput: 3.673 Gbps\n$ cargo run -q --release --example benchmark -- --tap tap0 writer\nthroughput: 7.905 Gbps\n```\n\n## Bare-metal usage examples\n\nExamples that use no services from the host OS are necessarily less illustrative than examples\nthat do. Because of this, only one such example is provided.\n\n### examples/loopback.rs\n\n_examples/loopback.rs_ sets up _smoltcp_ to talk with itself via a loopback interface.\nAlthough it does not require `std`, this example still requires the `alloc` feature to run, as well as `log`, `proto-ipv4` and `socket-tcp`.\n\nRead its [source code](/examples/loopback.rs), then run it without `std`:\n\n```sh\ncargo run --example loopback --no-default-features --features=\"log proto-ipv4 socket-tcp alloc\"\n```\n\n... or with `std` (in this case the features don't have to be explicitly listed):\n\n```sh\ncargo run --example loopback -- --pcap loopback.pcap\n```\n\nIt opens a server and a client TCP socket, and transfers a chunk of data. You can examine\nthe packet exchange by opening `loopback.pcap` in [Wireshark].\n\nIf the `std` feature is enabled, it will print logs and packet dumps, and fault injection\nis possible; otherwise, nothing at all will be displayed and no options are accepted.\n\n[wireshark]: https://wireshark.org\n\n### examples/loopback\\_benchmark.rs\n\n_examples/loopback_benchmark.rs_ is another simple throughput benchmark.\n\nRead its [source code](/examples/loopback_benchmark.rs), then run it as:\n\n```sh\ncargo run --release --example loopback_benchmark\n```\n\nIt establishes a connection to itself via a loopback interface and transfers a large amount\nof data in one direction.\n\nA typical result (achieved on a Intel Core i5-13500H CPU and a Linux 6.9.9 x86_64 kernel running\non a LENOVO XiaoXinPro 14 IRH8 laptop) is as follows:\n\n```\n$ cargo run --release --example loopback_benchmark\ndone in 0.558 s, bandwidth is 15.395083 Gbps\n```\n\nNote: Although the loopback interface can be used in bare-metal environments,\nthis benchmark _does_ rely on `std` to be able to measure the time cost.\n\n## License\n\n_smoltcp_ is distributed under the terms of 0-clause BSD license.\n\nSee [LICENSE-0BSD](LICENSE-0BSD.txt) for details.\n"
        },
        {
          "name": "benches",
          "type": "tree",
          "content": null
        },
        {
          "name": "build.rs",
          "type": "blob",
          "size": 3.171875,
          "content": "use std::collections::HashMap;\nuse std::fmt::Write;\nuse std::path::PathBuf;\nuse std::{env, fs};\n\nstatic CONFIGS: &[(&str, usize)] = &[\n    // BEGIN AUTOGENERATED CONFIG FEATURES\n    // Generated by gen_config.py. DO NOT EDIT.\n    (\"IFACE_MAX_ADDR_COUNT\", 2),\n    (\"IFACE_MAX_MULTICAST_GROUP_COUNT\", 4),\n    (\"IFACE_MAX_SIXLOWPAN_ADDRESS_CONTEXT_COUNT\", 4),\n    (\"IFACE_NEIGHBOR_CACHE_COUNT\", 8),\n    (\"IFACE_MAX_ROUTE_COUNT\", 2),\n    (\"FRAGMENTATION_BUFFER_SIZE\", 1500),\n    (\"ASSEMBLER_MAX_SEGMENT_COUNT\", 4),\n    (\"REASSEMBLY_BUFFER_SIZE\", 1500),\n    (\"REASSEMBLY_BUFFER_COUNT\", 1),\n    (\"IPV6_HBH_MAX_OPTIONS\", 4),\n    (\"DNS_MAX_RESULT_COUNT\", 1),\n    (\"DNS_MAX_SERVER_COUNT\", 1),\n    (\"DNS_MAX_NAME_SIZE\", 255),\n    (\"RPL_RELATIONS_BUFFER_COUNT\", 16),\n    (\"RPL_PARENTS_BUFFER_COUNT\", 8),\n    // END AUTOGENERATED CONFIG FEATURES\n];\n\nstruct ConfigState {\n    value: usize,\n    seen_feature: bool,\n    seen_env: bool,\n}\n\nfn main() {\n    // only rebuild if build.rs changed. Otherwise Cargo will rebuild if any\n    // other file changed.\n    println!(\"cargo:rerun-if-changed=build.rs\");\n\n    // Rebuild if config envvar changed.\n    for (name, _) in CONFIGS {\n        println!(\"cargo:rerun-if-env-changed=SMOLTCP_{name}\");\n    }\n\n    let mut configs = HashMap::new();\n    for (name, default) in CONFIGS {\n        configs.insert(\n            *name,\n            ConfigState {\n                value: *default,\n                seen_env: false,\n                seen_feature: false,\n            },\n        );\n    }\n\n    for (var, value) in env::vars() {\n        if let Some(name) = var.strip_prefix(\"SMOLTCP_\") {\n            let Some(cfg) = configs.get_mut(name) else {\n                panic!(\"Unknown env var {name}\")\n            };\n\n            let Ok(value) = value.parse::<usize>() else {\n                panic!(\"Invalid value for env var {name}: {value}\")\n            };\n\n            cfg.value = value;\n            cfg.seen_env = true;\n        }\n\n        if let Some(feature) = var.strip_prefix(\"CARGO_FEATURE_\") {\n            if let Some(i) = feature.rfind('_') {\n                let name = &feature[..i];\n                let value = &feature[i + 1..];\n                if let Some(cfg) = configs.get_mut(name) {\n                    let Ok(value) = value.parse::<usize>() else {\n                        panic!(\"Invalid value for feature {name}: {value}\")\n                    };\n\n                    // envvars take priority.\n                    if !cfg.seen_env {\n                        if cfg.seen_feature {\n                            panic!(\n                                \"multiple values set for feature {}: {} and {}\",\n                                name, cfg.value, value\n                            );\n                        }\n\n                        cfg.value = value;\n                        cfg.seen_feature = true;\n                    }\n                }\n            }\n        }\n    }\n\n    let mut data = String::new();\n\n    for (name, cfg) in &configs {\n        writeln!(&mut data, \"pub const {}: usize = {};\", name, cfg.value).unwrap();\n    }\n\n    let out_dir = PathBuf::from(env::var_os(\"OUT_DIR\").unwrap());\n    let out_file = out_dir.join(\"config.rs\").to_string_lossy().to_string();\n    fs::write(out_file, data).unwrap();\n}\n"
        },
        {
          "name": "ci.sh",
          "type": "blob",
          "size": 4.181640625,
          "content": "#!/usr/bin/env bash\n\nset -eox pipefail\n\nexport DEFMT_LOG=trace\n\nMSRV=\"1.80.0\"\n\nRUSTC_VERSIONS=(\n    $MSRV\n    \"stable\"\n    \"nightly\"\n)\n\nFEATURES_TEST=(\n    \"default\"\n    \"std,proto-ipv4\"\n    \"std,medium-ethernet,phy-raw_socket,proto-ipv6,socket-udp,socket-dns\"\n    \"std,medium-ethernet,phy-tuntap_interface,proto-ipv6,socket-udp\"\n    \"std,medium-ethernet,proto-ipv4,proto-ipv4-fragmentation,socket-raw,socket-dns\"\n    \"std,medium-ethernet,proto-ipv4,multicast,socket-raw,socket-dns\"\n    \"std,medium-ethernet,proto-ipv4,socket-udp,socket-tcp,socket-dns\"\n    \"std,medium-ethernet,proto-ipv4,proto-dhcpv4,socket-udp\"\n    \"std,medium-ethernet,medium-ip,medium-ieee802154,proto-ipv6,multicast,proto-rpl,socket-udp,socket-dns\"\n    \"std,medium-ethernet,proto-ipv6,socket-tcp\"\n    \"std,medium-ethernet,medium-ip,proto-ipv4,socket-icmp,socket-tcp\"\n    \"std,medium-ip,proto-ipv6,socket-icmp,socket-tcp\"\n    \"std,medium-ieee802154,proto-sixlowpan,socket-udp\"\n    \"std,medium-ieee802154,proto-sixlowpan,proto-sixlowpan-fragmentation,socket-udp\"\n    \"std,medium-ieee802154,proto-rpl,proto-sixlowpan,proto-sixlowpan-fragmentation,socket-udp\"\n    \"std,medium-ip,proto-ipv4,proto-ipv6,socket-tcp,socket-udp\"\n    \"std,medium-ethernet,medium-ip,medium-ieee802154,proto-ipv4,proto-ipv6,multicast,proto-rpl,socket-raw,socket-udp,socket-tcp,socket-icmp,socket-dns,async\"\n    \"std,medium-ieee802154,medium-ip,proto-ipv4,socket-raw\"\n    \"std,medium-ethernet,proto-ipv4,proto-ipsec,socket-raw\"\n)\n\nFEATURES_TEST_NIGHTLY=(\n    \"alloc,medium-ethernet,proto-ipv4,proto-ipv6,socket-raw,socket-udp,socket-tcp,socket-icmp\"\n)\n\nFEATURES_CHECK=(\n    \"medium-ip,medium-ethernet,medium-ieee802154,proto-ipv6,proto-ipv6,multicast,proto-dhcpv4,proto-ipsec,socket-raw,socket-udp,socket-tcp,socket-icmp,socket-dns,async\"\n    \"defmt,medium-ip,medium-ethernet,proto-ipv6,proto-ipv6,multicast,proto-dhcpv4,socket-raw,socket-udp,socket-tcp,socket-icmp,socket-dns,async\"\n    \"defmt,alloc,medium-ip,medium-ethernet,proto-ipv6,proto-ipv6,multicast,proto-dhcpv4,socket-raw,socket-udp,socket-tcp,socket-icmp,socket-dns,async\"\n)\n\ntest() {\n    local version=$1\n    rustup toolchain install $version\n\n    for features in ${FEATURES_TEST[@]}; do\n        cargo +$version test --no-default-features --features \"$features\"\n    done\n\n    if [[ $version == \"nightly\" ]]; then\n        for features in ${FEATURES_TEST_NIGHTLY[@]}; do\n            cargo +$version test --no-default-features --features \"$features\"\n        done\n    fi\n}\n\ncheck() {\n    local version=$1\n    rustup toolchain install $version\n\n    export DEFMT_LOG=\"trace\"\n\n    for features in ${FEATURES_CHECK[@]}; do\n        cargo +$version check --no-default-features --features \"$features\"\n    done\n\n    cargo +$version check --examples\n\n    if [[ $version == \"nightly\" ]]; then\n        cargo +$version check --benches\n    fi\n}\n\nclippy() {\n    rustup toolchain install $MSRV\n    rustup component add clippy --toolchain=$MSRV\n    cargo +$MSRV clippy --tests --examples -- -D warnings\n}\n\nbuild_16bit() {\n    rustup toolchain install nightly\n    rustup +nightly component add rust-src\n\n    TARGET_WITH_16BIT_POINTER=msp430-none-elf\n    for features in ${FEATURES_CHECK[@]}; do\n        cargo +nightly build -Z build-std=core,alloc --target $TARGET_WITH_16BIT_POINTER --no-default-features --features=$features\n    done\n}\n\ncoverage() {\n    for features in ${FEATURES_TEST[@]}; do\n        cargo llvm-cov --no-report --no-default-features --features \"$features\"\n    done\n    cargo llvm-cov report --lcov --output-path lcov.info\n}\n\nif [[ $1 == \"test\" || $1 == \"all\" ]]; then\n    if [[ -n $2 ]]; then\n        if [[ $2 == \"msrv\" ]]; then\n            test $MSRV\n        else\n            test $2\n        fi\n    else\n        for version in ${RUSTC_VERSIONS[@]}; do\n            test $version\n        done\n    fi\nfi\n\nif [[ $1 == \"check\" || $1 == \"all\" ]]; then\n    if [[ -n $2 ]]; then\n        if [[ $2 == \"msrv\" ]]; then\n            check $MSRV\n        else\n            check $2\n        fi\n    else\n        for version in ${RUSTC_VERSIONS[@]}; do\n            check $version\n        done\n    fi\nfi\n\nif [[ $1 == \"clippy\" || $1 == \"all\" ]]; then\n    clippy\nfi\n\nif [[ $1 == \"build_16bit\" || $1 == \"all\" ]]; then\n    build_16bit\nfi\n\nif [[ $1 == \"coverage\" || $1 == \"all\" ]]; then\n    coverage\nfi\n"
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "fuzz",
          "type": "tree",
          "content": null
        },
        {
          "name": "gen_config.py",
          "type": "blob",
          "size": 2.890625,
          "content": "import os\n\nabspath = os.path.abspath(__file__)\ndname = os.path.dirname(abspath)\nos.chdir(dname)\n\nfeatures = []\n\n\ndef feature(name, default, min, max, pow2=None):\n    vals = set()\n    val = min\n    while val <= max:\n        vals.add(val)\n        if pow2 == True or (isinstance(pow2, int) and val >= pow2):\n            val *= 2\n        else:\n            val += 1\n    vals.add(default)\n\n    features.append(\n        {\n            \"name\": name,\n            \"default\": default,\n            \"vals\": sorted(list(vals)),\n        }\n    )\n\n\nfeature(\"iface_max_addr_count\", default=2, min=1, max=8)\nfeature(\"iface_max_multicast_group_count\", default=4, min=1, max=1024, pow2=8)\nfeature(\"iface_max_sixlowpan_address_context_count\", default=4, min=1, max=1024, pow2=8)\nfeature(\"iface_neighbor_cache_count\", default=8, min=1, max=1024, pow2=8)\nfeature(\"iface_max_route_count\", default=2, min=1, max=1024, pow2=8)\nfeature(\"fragmentation_buffer_size\", default=1500, min=256, max=65536, pow2=True)\nfeature(\"assembler_max_segment_count\", default=4, min=1, max=32, pow2=4)\nfeature(\"reassembly_buffer_size\", default=1500, min=256, max=65536, pow2=True)\nfeature(\"reassembly_buffer_count\", default=1, min=1, max=32, pow2=4)\nfeature(\"ipv6_hbh_max_options\", default=4, min=1, max=32, pow2=4)\nfeature(\"dns_max_result_count\", default=1, min=1, max=32, pow2=4)\nfeature(\"dns_max_server_count\", default=1, min=1, max=32, pow2=4)\nfeature(\"dns_max_name_size\", default=255, min=64, max=255, pow2=True)\nfeature(\"rpl_relations_buffer_count\", default=16, min=1, max=128, pow2=True)\nfeature(\"rpl_parents_buffer_count\", default=8, min=2, max=32, pow2=True)\n\n# ========= Update Cargo.toml\n\nthings = \"\"\nfor f in features:\n    name = f[\"name\"].replace(\"_\", \"-\")\n    for val in f[\"vals\"]:\n        things += f\"{name}-{val} = []\"\n        if val == f[\"default\"]:\n            things += \" # Default\"\n        things += \"\\n\"\n    things += \"\\n\"\n\nSEPARATOR_START = \"# BEGIN AUTOGENERATED CONFIG FEATURES\\n\"\nSEPARATOR_END = \"# END AUTOGENERATED CONFIG FEATURES\\n\"\nHELP = \"# Generated by gen_config.py. DO NOT EDIT.\\n\"\nwith open(\"Cargo.toml\", \"r\") as f:\n    data = f.read()\nbefore, data = data.split(SEPARATOR_START, maxsplit=1)\n_, after = data.split(SEPARATOR_END, maxsplit=1)\ndata = before + SEPARATOR_START + HELP + things + SEPARATOR_END + after\nwith open(\"Cargo.toml\", \"w\") as f:\n    f.write(data)\n\n\n# ========= Update build.rs\n\nthings = \"\"\nfor f in features:\n    name = f[\"name\"].upper()\n    things += f'    (\"{name}\", {f[\"default\"]}),\\n'\n\nSEPARATOR_START = \"// BEGIN AUTOGENERATED CONFIG FEATURES\\n\"\nSEPARATOR_END = \"// END AUTOGENERATED CONFIG FEATURES\\n\"\nHELP = \"    // Generated by gen_config.py. DO NOT EDIT.\\n\"\nwith open(\"build.rs\", \"r\") as f:\n    data = f.read()\nbefore, data = data.split(SEPARATOR_START, maxsplit=1)\n_, after = data.split(SEPARATOR_END, maxsplit=1)\ndata = before + SEPARATOR_START + HELP + things + \"    \" + SEPARATOR_END + after\nwith open(\"build.rs\", \"w\") as f:\n    f.write(data)\n"
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "utils",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}