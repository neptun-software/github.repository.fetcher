{
  "metadata": {
    "timestamp": 1736709223504,
    "page": 518,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjUyMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "Peternator7/strum",
      "stars": 1861,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".clippy.toml",
          "type": "blob",
          "size": 0.015625,
          "content": "msrv = \"1.56.1\"\n"
        },
        {
          "name": ".devcontainer",
          "type": "tree",
          "content": null
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.017578125,
          "content": "target\nCargo.lock\n"
        },
        {
          "name": ".travis.yml",
          "type": "blob",
          "size": 0.12890625,
          "content": "language: rust\nrust:\n  - stable\n  - beta\n  - nightly\n  - 1.56.1\nmatrix:\n  allow_failures:\n    - rust: nightly\n\nscript: \"./travis.sh\""
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 18.6337890625,
          "content": "# Changelog\n\n## 0.26.4 (strum_macros)\n\n* [#360](https://github.com/Peternator7/strum/pull/360): Fixes bug introduced with new string interpolation feature where\n  unit structs took an implicit unnecessary dependency on `::core::alloc`.\n\n## 0.26.3 (strum_macros)\n\n* [#344](https://github.com/Peternator7/strum/pull/344): Hide `EnumTable` because it's going to be deprecated in the next\n  version.\n* [#357](https://github.com/Peternator7/strum/pull/357): Fixes an incompatiblity with `itertools` by using the fully\n  qualified name rather than the inherent method.\n* [#345](https://github.com/Peternator7/strum/pull/345): Allows unnamed tuple like variants to use their variants in\n  string interpolation. `#[strum(to_string = \"Field 0: {0}, Field 1: {1})\")]` will now work for tuple variants\n\n## 0.26.2\n\n* [#337](https://github.com/Peternator7/strum/pull/337): Fix missing generic impls for `EnumTryAs`\n* [#334](https://github.com/Peternator7/strum/pull/334): Support prefix in `AsRefStr`. Technically a breaking change,\n  but `prefix` was just added in `0.26.0` so it's a newer feature and it makes the feature more consisent in general.\n\n## 0.26.1\n\n* [#325](https://github.com/Peternator7/strum/pull/325): use `core` instead of `std` in VariantArray.\n\n## 0.26.0\n\n### Breaking Changes\n\n* The `EnumVariantNames` macro has been renamed `VariantNames`. The deprecation warning should steer you in\n  the right direction for fixing the warning.\n* The Iterator struct generated by EnumIter now has new bounds on it. This shouldn't break code unless you manually\n  added the implementation in your code.\n* `Display` now supports format strings using named fields in the enum variant. This should be a no-op for most code.\n  However, if you were outputting a string like `\"Hello {field}\"`, this will now be interpretted as a format string.\n* EnumDiscriminant now inherits the repr and discriminant values from your main enum. This makes the discriminant type\n  closer to a mirror of the original and that's always the goal.\n\n### New features\n\n* The `VariantArray` macro has been added. This macro adds an associated constant `VARIANTS` to your enum. The constant\n  is a `&'static [Self]` slice so that you can access all the variants of your enum. This only works on enums that only\n  have unit variants.\n\n  ```rust\n  use strum::VariantArray;\n\n  #[derive(Debug, VariantArray)]\n  enum Color {\n    Red,\n    Blue,\n    Green,\n  }\n\n  fn main() {\n    println!(\"{:?}\", Color::VARIANTS); // prints: [\"Red\", \"Blue\", \"Green\"]\n  }\n  ```\n\n* The `EnumTable` macro has been *experimentally* added. This macro adds a new type that stores an item for each variant\n  of the enum. This is useful for storing a value for each variant of an enum. This is an experimental feature because\n  I'm not convinced the current api surface area is correct.\n\n  ```rust\n  use strum::EnumTable;\n\n  #[derive(Copy, Clone, Debug, EnumTable)]\n  enum Color {\n    Red,\n    Blue,\n    Green,\n  }\n\n  fn main() {\n    let mut counts = ColorTable::filled(0);\n    for color in &[Color::Red, Color::Red, Color::Green]] {\n      counts[color] += 1;\n    }\n\n    assert_eq!(counts[Color::Red], 2);\n    assert_eq!(counts[Color::Blue], 0);\n    assert_eq!(counts[Color::Green], 1);\n  }\n  ```\n\n* `Display` has 2 new features:\n  * the `strum(prefix = \"some_value\")` attribute on an enum now allows you to prepend a string onto every\n    variant when you serialize it.\n\n  * Custom `to_string` and `serialize` attributes now support string interopolation on serialization.\n\n### PR's Merged\n\n* [#322](https://github.com/Peternator7/strum/pull/322): avoid collisions on `std::fmt::Debug`\n* [#321](https://github.com/Peternator7/strum/pull/321): avoid conflicts with consecutive underscores.\n* [#314](https://github.com/Peternator7/strum/pull/314): add additional bounds to EnumIterator\n* [#311](https://github.com/Peternator7/strum/pull/311): add FusedIterator bounds to EnumIterator\n* [#297](https://github.com/Peternator7/strum/pull/297): New macro, add `VariantArray`\n* [#296](https://github.com/Peternator7/strum/pull/296): adds prefix attribute to To/From String macros.\n* [#294](https://github.com/Peternator7/strum/pull/294): use named enum fields in to_string macro.\n* [#288](https://github.com/Peternator7/strum/pull/288): discriminant enums now inherit the repr from the original enum.\n* [#279](https://github.com/Peternator7/strum/pull/279): Add `EnumTable` macro to generate a mapping between fieldless variants and data.\n\n\n## 0.25.3 (strum_macros)\n\nReceived a number of bug fix PR's.\n\n* [#300](https://github.com/Peternator7/strum/pull/300): Fixes EnumIter for enums named `Option`.\n* [#301](https://github.com/Peternator7/strum/pull/301): Improved doc comments\n* [#304](https://github.com/Peternator7/strum/pull/304): Removed some unused Vec's\n* [#305](https://github.com/Peternator7/strum/pull/305): Added generic support to `EnumIs`\n\n## 0.25.2 (strum_macros)\n\n* [#289](https://github.com/Peternator7/strum/pull/289): Enables a previously disabled rustdoc.\n* [#287](https://github.com/Peternator7/strum/pull/287): Fixes a bug in EnumIter code gen so that we produce `::core` to\n  avoid issues with shadowing modules.\n\n## 0.25.1 (strum_macros)\n\n* [#276](https://github.com/Peternator7/strum/pull/276). Fixes [#275](https://github.com/Peternator7/strum/issues/275) and \n  [#281](https://github.com/Peternator7/strum/issues/281). Not sure exactly why this broke, perhaps incompatibilities between\n  syn 1 and 2. PR fixes the issue by only looking at attributes of the \"list\" type `[attr(item, item)]`. \n\n## 0.25.0\n\n### Breaking Changes\n\n* [#261](https://github.com/Peternator7/strum/pull/261) Upgrade syn dependency to version 2. This bumps the msrv to \n  1.56. It's impractical to maintain a package where a core dependency of the ecosystem has a different msrv than this one.\n\n* [270](https://github.com/Peternator7/strum/pull/270) Change the `to_string` behavior when using `default`. Now, when\n  using `default`, the `display` method will return the display version of the value contained in the enum rather than\n  the name of the variant.\n\n  ```rust\n  #[derive(strum::Display)]\n  enum Color {\n    Red,\n    Blue,\n    Green,\n    #[strum(default)]\n    Other(String)\n  }\n\n  fn main() {\n    // This used to print \"Other\", now it prints \"Purple\"\n    assert_eq!(Color::Other(\"Purple\".to_string()).to_string(), \"Purple\");\n  }\n  ```\n\n  If you want the old behavior, you can use the `to_string` attribute to override this behavior. See the PR for an example.\n\n* [268](https://github.com/Peternator7/strum/pull/268) Update the behavior of `EnumCount` to exclude variants that are\n  `disabled`. This is a breaking change, but the behavior makes it more consistent with other methods.\n\n### New Features\n\n* [#257](https://github.com/Peternator7/strum/pull/257) This PR adds the `EnumIs` macro that automatically implements\n  `is_{variant_name}` methods for each variant. \n\n  ```rust\n  #[derive(EnumIs)]\n  enum Color {\n      Red,\n      Blue,\n      Green,\n  }\n\n  #[test]\n  fn simple_test() {\n      assert!(Color::Red.is_red());\n  }\n  ```\n\n## 0.24.3 (strum_macros)\n\n* [#231](https://github.com/Peternator7/strum/pull/231) Add ignore lints for EnumIter not implementing Copy or Debug\n  on the generated iter struct. Copy should generally not be implemented on Iterators. Its an oversight that Debug isn't\n  implemented, but it will be a breaking change to add that so it'll be added in a future version.\n\n## 0.24.2 (strum_macros)\n\n* [#220](https://github.com/Peternator7/strum/pull/220). Add support for PHF in `EnumString` (opt-in runtime\n  performance improvements for large enums as `#[strum(use_phf)]`, requires `phf` feature and increases MSRV to `1.46`)\n  * [#224](https://github.com/Peternator7/strum/pull/224) tweaked the algorithm.\n\n* Reverted [#217](https://github.com/peternator7/strum/pull/217) because it was disruptive and non-trivial to work around\n  if you hit it.\n\n## ~~0.24.1~~ (Yanked becase #217 was more \"breaking\" than I wanted)\n\n* [#220](https://github.com/Peternator7/strum/pull/220). Add support for PHF in `EnumString` (opt-in runtime\n  performance improvements for large enums as `#[strum(use_phf)]`, requires `phf` feature and increases MSRV to `1.46`)\n  * [#224](https://github.com/Peternator7/strum/pull/224) tweaked the algorithm.\n* [#217](https://github.com/Peternator7/strum/pull/217): Automatically implement `TryFrom` in `FromRepr`. This is \n  technically a breaking change, but the fix is to just remove the manual implementation of TryFrom so it shouldn't \n  be more than a minor inconvenience.\n\n## 0.24.0\n\n* [#212](https://github.com/Peternator7/strum/pull/212). Fix some clippy lints\n\n* [#209](https://github.com/Peternator7/strum/pull/209). Use `core` instead of `std` in a few places.\n\n* [#206](https://github.com/Peternator7/strum/pull/206). Add `get_documentation()` to `EnumMessage`. This provides\n  the ability to get the doc comment for a variant. Currently, very little formatting is done. That is subject to change.\n  Please do not abuse this feature. Rust docs are meant for developer documentation, not long messages for users. However,\n  this may be useful in some situations so we've added support for it.\n\n* [#202](https://github.com/Peternator7/strum/pull/202). Add a missing doc comment\n\n* [#201](https://github.com/Peternator7/strum/pull/201). Upgrade Heck version\n\n## 0.23.1\n\n* [#193](https://github.com/Peternator7/strum/pull/193) Fixes an ambiguity introduced by #186 when your enum has a variant called Error.\n\n* [#192](https://github.com/Peternator7/strum/pull/192) The work done in #189 was lost in other PR's. This re-added the functionality to support no-std.\n\n## 0.23.0\n\n* [#185](https://github.com/Peternator7/strum/pull/185) Adds the `FromRepr` derive that adds a `from_repr(x: usize) -> Option<Self>`\n  method to your enum. This lets you convert integer values to your enum. If you specify a #[repr(..)] attribute on your enum, or use\n  an explicit discriminant, this will be incorporated into the derive.\n  * `from_repr` will be `const` if you use a recent rust version.\n  * This cannot be a trait method currently because only inherent methods support `const`.\n\n* [#186](https://github.com/Peternator7/strum/pull/186) Automatically implement `TryFrom<str>` for enums that implement `EnumString`.\n  This is only enabled for rustc >= 1.34 which is when `TryFrom was stabilized.\n  * This is a small breaking change. If you had manually implemented `TryFrom<str>` for your enum, this will cause a conflict. You\n    can probably remove your manual implementation.\n\n* [#189](https://github.com/Peternator7/strum/pull/189) Use `core::result::Result` instead of `std::result::Result`. This should be\n  more portable in no-std environments.\n\n## 0.22.0\n\n* [#180](https://github.com/Peternator7/strum/pull/180): Deprecates `ToString` derive. You should use `Display`\n  instead.\n\n* [#178](https://github.com/Peternator7/strum/pull/178): Deprecates AsStaticStr. This has been undocumented for a while.\n  The recommended method is to derive `IntoStaticStr` instead.\n\n* [#171](https://github.com/Peternator7/strum/pull/171): Improve `no-std` support. \n\n* [#170](https://github.com/Peternator7/strum/pull/170): enable changing the path to strum traits. This is necessary\n  if you re-export strum as a submodule in another crate.\n\n## 0.21.1\n\n* [#164](https://github.com/Peternator7/strum/pull/164) Improve compatibility with older versions of `syn`.\n\n## 0.21.0\n\n* Replace `std::` with `core::` to support no-std projects. [#145](https://github.com/Peternator7/strum/pull/145)\n\n* **Breaking Changes**\n  * MSRV is updated to 1.32 because `heck` does not work in `1.31.1` anymore. Rust 1.32 came out Jan 2019 so hopefully\n    teams have moved to an equal or newer version.\n  * [#149](https://github.com/Peternator7/strum/pull/149) Remove the \"rename\" feature. In Rust 2018, macros should be\n    imported using a qualified path to avoid collisions. `strum_macros::EnumString` rather than using the \"Rename\"\n    feature to avoid collisions.\n  * [#160](https://github.com/Peternator7/strum/pull/160) enum messages: Make the returned values all 'static\n    * It is unlikely this will break anyone, but the new signature for functions generated by EnumMessage \n      is `fn get_message(&self) -> Option<&'static str>`. \n\n* Added support for ascii_case_insensitive string comparisons. [#157](https://github.com/Peternator7/strum/pull/157)\n  This feature allows `FromString` impls to match strings that differ in case from the expected variant.\n\n## 0.20.0\n\n* Refactors to do better error handling. Thanks @jplatte for these changes\n  * [#133](https://github.com/Peternator7/strum/pull/133)\n  * [#134](https://github.com/Peternator7/strum/pull/134)\n  * [#135](https://github.com/Peternator7/strum/pull/135)\n\n* Adding `vis(scope)` to EnumDiscriminants. [#137](https://github.com/Peternator7/strum/pull/137)\n  * This feature works best with versions of rust >= 1.34 due to a rustc parsing error in\n    earlier versions.\n  * Earlier versions can still use `vis(r#pub)`\n\n* These changes should not be breaking, but the amount of code modified was significant.\n\n* FYI about [#122](https://github.com/Peternator7/strum/issues/122). The macro renames feature\n  will be removed in early 2021. This feature was only necessary in rust 2015 because macros\n  didn't support qualified imports so macro names could collide between crates.\n\n## 0.19.4 / 0.19.5\n\n* Updated docs\n\n## 0.19.3\n\n* Properly error on malformed strum attributes. [#119](https://github.com/Peternator7/strum/pull/119)\n  * These types of inputs have historically been ignore silently. This may break code that is already\n    incorrect.\n* Move docs back to rust docs. [#121](https://github.com/Peternator7/strum/pull/121)\n* Updated the docs a second time to improve discoverability.\n\n## 0.19.2\n\n* Fixes [#104](https://github.com/Peternator7/strum/issues/104). PR [#105](https://github.com/Peternator7/strum/issues/105)\n\n## 0.19.1\n\n* **Breaking Change**: EnumVariantNames now properly adjusts to the `to_string` and `serialize` attributes.\n* There's a regression in this release that may make strum imcompatible with other plugins if those\n  plugins use non-rust syntax in their attributes. [#104](https://github.com/Peternator7/strum/issues/104)\n\n## 0.19.0\n\n* Fixed a regression using `nth_back`. [#85](https://github.com/Peternator7/strum/pull/85)\n* Added repository to Cargo.toml. [#90](https://github.com/Peternator7/strum/pull/90)\n* Correctly handle fill align in `Display` impls. [#95](https://github.com/Peternator7/strum/pull/95)\n* **Breaking Change**: Use Associated Constant for EnumCount instead of const fn and free constant. [#99](https://github.com/Peternator7/strum/pull/99)\n  This behavior is consistent with the other derives.\n* **Breaking Change**. `default` and `disabled` should now be written as markers instead of key value pairs.\n  Here is the old way of adding these attributes to a variant.\n  ```rust\n  // OLD WAY\n  enum Test {\n    #[strum(disabled = \"true\", default = \"true\")]\n    Variant(String)\n  }\n  ```\n\n  Here is the new way. There is less ambiguity in the new syntax.\n\n  ```rust\n  enum Test {\n    #[strum(disabled, default)]\n    Variant(String)\n  }\n  ```\n* **Breaking Change**. Most of the strum plugins will now error more aggresively on invalid options being\n  used. Historically, the plugins have ignore invalid options, but most of these should error now. Silent\n  errors are a rust anti-pattern.\n\n## 0.18.0\n\n* Only copy across `\"doc\", \"cfg\", \"allow\", \"deny\"` attributes from main enum variants to discriminant variants. [#73](https://github.com/Peternator7/strum/issues/73)\n* The formatting of generated serialization variants returned by `get_serializations()` from an\n  enum that derives `EnumMessage` is now affected by the `serialize_all` property on the enum.\n  [#84](https://github.com/Peternator7/strum/pull/84)\n* IntoEnumIterator now has the constraint `IntoEnumIterator::Iterator<Item=Self>` and `Self: Sized`. This makes\n  it much easier to be generic over `IntoEnumIterator` and enum variants must be sized. [#80]\n\n## 0.17.1\n\n* Fixed an issue caused by combining [#60](https://github.com/Peternator7/strum/pull/60) and [#76](https://github.com/Peternator7/strum/pull/76)\n\n## 0.17.0\n\n* **Breaking Change**. Enum variant names now exports an associated constant `VARIANTS` in the\n  `strum::VariantNames` trait instead of adding a `variants` method directly to the enum.\n  The fix is to `use strum::VariantNames` in your module and replace occurrances of `variants()`\n  with `VARIANTS`.\n  * [#74](https://github.com/Peternator7/strum/pull/74)\n  * [#75](https://github.com/Peternator7/strum/pull/75)\n* 🐛 fix - stop incrementing iterator index after we reach the end. [#76](https://github.com/Peternator7/strum/pull/76)\n* Strum iterators now implemented [DoubleEndedIterator](https://doc.rust-lang.org/std/iter/trait.DoubleEndedIterator.html). [#60](https://github.com/Peternator7/strum/pull/60)\n\n## 0.16.0\n\n* Added serialize UPPERCASE\n* Added \"case-styles\" to match the formatting convention they imply such as `kebab-case` and `camelCase`.\n* Added Enum Variant Names to improve compatibility with `structopt` and `clap`. [#56](https://github.com/Peternator7/strum/pull/56)\n* Added derive re-export to `strum` to allow re-exporting macros from main crate. [#57](https://github.com/Peternator7/strum/pull/57)\n* Bumped syn and quote to `1.0`. This raises minimal compatible rust version to `1.31`.\n* Did internal refactoring to improve organization of code. Shouldn't change user-facing api though.\n* Added license file to subdirectories so they are included in crate distros.\n\n## 0.15.0\n\n### Added\n\n* Added Feature flags to rename macros. This is to improve compatibility with older versions of rust. [Wiki](https://github.com/Peternator7/strum/wiki/Macro-Renames)\n\n## 0.14.0\n\n### Added\n\n* Allow Missing Docs on EnumCount. [PR #43](https://github.com/Peternator7/strum/pull/43)\n* Fix serialize_all in `AsRefStr`, `AsStaticStr` and `IntoStaticStr`. [PR #42](https://github.com/Peternator7/strum/pull/42)\n  * This is a bug fix, but it may break code that was relying on the incorrect behavior.\n\n## 0.13.0\n\n### Added\n\n* Added a derive to implement `From<YourEnum>` for `&'static str`. This deprecates `AsStaticStr` since\n  the new solution doesn't require a `strum` specific trait to use.\n\n## 0.12.0\n\n### Added\n\n* Serialization case can be controlled using `#[strum(serialize_all = \"snake_case\")]`. ([#21][#21])\n* `#[derive(EnumDiscriminants)]` generates enum with variants without fields. ([#33][#33])\n\n[#21]: https://github.com/Peternator7/strum/issues/21\n[#33]: https://github.com/Peternator7/strum/issues/33\n\n## 0.10.0\n\n### Added\n\n* Implemented `Clone` for `EnumIter`s. ([#18][#18])\n* Added `AsStaticRef` derive to allow enums to `impl AsStaticRef<str>`. ([#23][#23])\n\n### Fixed\n\n* `#[allow(missing_docs)]` on generated `EnumIter`s. ([#19][#19])\n\n[#18]: https://github.com/Peternator7/strum/pull/18\n[#19]: https://github.com/Peternator7/strum/issues/19\n[#23]: https://github.com/Peternator7/strum/issues/23\n"
        },
        {
          "name": "Cargo.toml",
          "type": "blob",
          "size": 0.1005859375,
          "content": "[workspace]\nmembers = [\n    \"strum\",\n    \"strum_macros\",\n    \"strum_tests\",\n    \"strum_nostd_tests\"\n]\n "
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.046875,
          "content": "MIT License\n\nCopyright (c) 2019 Peter Glotfelty\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 4.6181640625,
          "content": "# Strum\n\n[![Build Status](https://travis-ci.com/Peternator7/strum.svg?branch=master)](https://travis-ci.com/Peternator7/strum)\n[![Build status](https://ci.appveyor.com/api/projects/status/ji4f6n2m5lvu11xt?svg=true)](https://ci.appveyor.com/project/Peternator7/strum)\n[![Latest Version](https://img.shields.io/crates/v/strum.svg)](https://crates.io/crates/strum)\n[![Rust Documentation](https://docs.rs/strum/badge.svg)](https://docs.rs/strum)\n![Crates.io](https://img.shields.io/crates/l/strum)\n![Crates.io](https://img.shields.io/crates/d/strum)\n\nStrum is a set of macros and traits for working with enums and strings easier in Rust.\n\n# Compatibility\n\nStrum is currently compatible with versions of rustc >= 1.66.1. Pull Requests that improve compatibility with older\nversions are welcome. The project goal is to support a rust version for at least 2 years after release \nand even longer is preferred since this project changes slowly.\n\n# Including Strum in Your Project\n\nImport strum and strum_macros into your project by adding the following lines to your\nCargo.toml. Strum_macros contains the macros needed to derive all the traits in Strum.\n\n```toml\n[dependencies]\nstrum = \"0.26\"\nstrum_macros = \"0.26\"\n\n# You can also use the \"derive\" feature, and import the macros directly from \"strum\"\n# strum = { version = \"0.26\", features = [\"derive\"] }\n```\n\n# Strum Macros\n\nStrum has implemented the following macros:\n\n| Macro | Description |\n| --- | ----------- |\n| [EnumString] | Converts strings to enum variants based on their name. |\n| [Display] | Converts enum variants to strings |\n| [FromRepr] | Convert from an integer to an enum. |\n| [AsRefStr] | Implement `AsRef<str>` for `MyEnum` |\n| [IntoStaticStr] | Implements `From<MyEnum> for &'static str` on an enum |\n| [EnumIter] | Creates a new type that iterates of the variants of an enum. |\n| [EnumProperty] | Add custom properties to enum variants. |\n| [EnumMessage] | Add a verbose message to an enum variant. |\n| [EnumDiscriminants] | Generate a new type with only the discriminant names. |\n| [EnumCount] | Add a constant `usize` equal to the number of variants. |\n| [VariantArray] | Adds an associated `VARIANTS` constant which is an array of all enum discriminants |\n| [VariantNames] | Adds an associated `VARIANTS` constant which is an array of discriminant names |\n| [EnumTable] | *Experimental*, creates a new type that stores an item of a specified type for each variant of the enum. |\n\n# Contributing\n\nThanks for your interest in contributing. Bug fixes are always welcome. If you are interested in implementing or\nadding a macro, please open an issue first to discuss the feature. I have limited bandwidth to review new features.\n\nThe project is divided into 3 parts, the traits are in the\n`/strum` folder. The procedural macros are in the `/strum_macros` folder, and the integration tests are\nin `/strum_tests`. If you are adding additional features to `strum` or `strum_macros`, you should make sure\nto run the tests and add new integration tests to make sure the features work as expected.\n\n# Debugging\n\nTo see the generated code, set the STRUM_DEBUG environment variable before compiling your code.\n`STRUM_DEBUG=1` will dump all of the generated code for every type. `STRUM_DEBUG=YourType` will\nonly dump the code generated on a type named `YourType`.\n\n# Name\n\nStrum is short for STRing enUM because it's a library for augmenting enums with additional\ninformation through strings.\n\nStrumming is also a very whimsical motion, much like writing Rust code.\n\n[EnumString]: https://docs.rs/strum_macros/latest/strum_macros/derive.EnumString.html\n[Display]: https://docs.rs/strum_macros/latest/strum_macros/derive.Display.html\n[AsRefStr]: https://docs.rs/strum_macros/latest/strum_macros/derive.AsRefStr.html\n[IntoStaticStr]: https://docs.rs/strum_macros/latest/strum_macros/derive.IntoStaticStr.html\n[EnumIter]: https://docs.rs/strum_macros/latest/strum_macros/derive.EnumIter.html\n[EnumIs]: https://docs.rs/strum_macros/latest/strum_macros/derive.EnumIs.html\n[EnumProperty]: https://docs.rs/strum_macros/latest/strum_macros/derive.EnumProperty.html\n[EnumMessage]: https://docs.rs/strum_macros/latest/strum_macros/derive.EnumMessage.html\n[EnumDiscriminants]: https://docs.rs/strum_macros/latest/strum_macros/derive.EnumDiscriminants.html\n[EnumCount]: https://docs.rs/strum_macros/latest/strum_macros/derive.EnumCount.html\n[FromRepr]: https://docs.rs/strum_macros/latest/strum_macros/derive.FromRepr.html\n[VariantArray]: https://docs.rs/strum_macros/latest/strum_macros/derive.VariantArray.html\n[VariantNames]: https://docs.rs/strum_macros/latest/strum_macros/derive.VariantNames.html\n[EnumTable]: https://docs.rs/strum_macros/latest/strum_macros/derive.EnumTable.html\n"
        },
        {
          "name": "appveyor.yml",
          "type": "blob",
          "size": 4.5634765625,
          "content": "# Appveyor configuration template for Rust using rustup for Rust installation\n# https://github.com/starkat99/appveyor-rust\n\n## Operating System (VM environment) ##\n\n# Rust needs at least Visual Studio 2013 Appveyor OS for MSVC targets.\nos: Visual Studio 2022\n\n## Build Matrix ##\n\n# This configuration will setup a build for each channel & target combination (12 windows\n# combinations in all).\n#\n# There are 3 channels: stable, beta, and nightly.\n#\n# Alternatively, the full version may be specified for the channel to build using that specific\n# version (e.g. channel: 1.5.0)\n#\n# The values for target are the set of windows Rust build targets. Each value is of the form\n#\n# ARCH-pc-windows-TOOLCHAIN\n#\n# Where ARCH is the target architecture, either x86_64 or i686, and TOOLCHAIN is the linker\n# toolchain to use, either msvc or gnu. See https://www.rust-lang.org/downloads.html#win-foot for\n# a description of the toolchain differences.\n# See https://github.com/rust-lang-nursery/rustup.rs/#toolchain-specification for description of\n# toolchains and host triples.\n#\n# Comment out channel/target combos you do not wish to build in CI.\n#\n# You may use the `cargoflags` and `RUSTFLAGS` variables to set additional flags for cargo commands\n# and rustc, respectively. For instance, you can uncomment the cargoflags lines in the nightly\n# channels to enable unstable features when building for nightly. Or you could add additional\n# matrix entries to test different combinations of features.\nenvironment:\n  matrix:\n\n### MSVC Toolchains ###\n\n  # MSRC 64-bit MSVC\n    - channel: 1.66.1\n      target: x86_64-pc-windows-msvc\n  # MSRC 32-bit MSVC\n    - channel: 1.66.1\n      target: i686-pc-windows-msvc\n  # Stable 64-bit MSVC\n    - channel: stable\n      target: x86_64-pc-windows-msvc\n  # Stable 32-bit MSVC\n    - channel: stable\n      target: i686-pc-windows-msvc\n  # Beta 64-bit MSVC\n    - channel: beta\n      target: x86_64-pc-windows-msvc\n  # Beta 32-bit MSVC\n    - channel: beta\n      target: i686-pc-windows-msvc\n  # Nightly 64-bit MSVC\n    - channel: nightly\n      target: x86_64-pc-windows-msvc\n      #cargoflags: --features \"unstable\"\n  # Nightly 32-bit MSVC\n    - channel: nightly\n      target: i686-pc-windows-msvc\n      #cargoflags: --features \"unstable\"\n\n### GNU Toolchains ###\n\n  # MSRC 64-bit GNU\n    - channel: 1.66.1\n      target: x86_64-pc-windows-gnu\n  # MSRC 32-bit GNU\n    - channel: 1.66.1\n      target: i686-pc-windows-gnu\n  # Stable 64-bit GNU\n    - channel: stable\n      target: x86_64-pc-windows-gnu\n  # Stable 32-bit GNU\n    - channel: stable\n      target: i686-pc-windows-gnu\n  # Beta 64-bit GNU\n    - channel: beta\n      target: x86_64-pc-windows-gnu\n  # Beta 32-bit GNU\n    - channel: beta\n      target: i686-pc-windows-gnu\n  # Nightly 64-bit GNU\n    - channel: nightly\n      target: x86_64-pc-windows-gnu\n      #cargoflags: --features \"unstable\"\n  # Nightly 32-bit GNU\n    - channel: nightly\n      target: i686-pc-windows-gnu\n      #cargoflags: --features \"unstable\"\n\n### Allowed failures ###\n\n# See Appveyor documentation for specific details. In short, place any channel or targets you wish\n# to allow build failures on (usually nightly at least is a wise choice). This will prevent a build\n# or test failure in the matching channels/targets from failing the entire build.\nmatrix:\n  allow_failures:\n    - channel: nightly\n\n# If you only care about stable channel build failures, uncomment the following line:\n    #- channel: beta\n\n## Install Script ##\n\n# This is the most important part of the Appveyor configuration. This installs the version of Rust\n# specified by the 'channel' and 'target' environment variables from the build matrix. This uses\n# rustup to install Rust.\n#\n# For simple configurations, instead of using the build matrix, you can simply set the\n# default-toolchain and default-host manually here.\ninstall:\n  - appveyor DownloadFile https://win.rustup.rs/ -FileName rustup-init.exe\n  - rustup-init -yv --default-toolchain %channel% --default-host %target%\n  - set PATH=%PATH%;%USERPROFILE%\\.cargo\\bin\n  - rustc -vV\n  - cargo -vV\n\n## Build Script ##\n\n# 'cargo test' takes care of building for us, so disable Appveyor's build stage. This prevents\n# the \"directory does not contain a project or solution file\" error.\nbuild: false\n\n# Uses 'cargo test' to run tests and build. Alternatively, the project may call compiled programs\n#directly or perform other testing commands. Rust will automatically be placed in the PATH\n# environment variable.\ntest_script:\n  - cargo test --verbose --features strum_tests/test_phf %cargoflags%\n\nfor:\n- matrix:\n    only:\n      - channel: 1.66.1\n\n  test_script:\n  - cargo test --verbose %cargoflags%\n"
        },
        {
          "name": "strum",
          "type": "tree",
          "content": null
        },
        {
          "name": "strum_macros",
          "type": "tree",
          "content": null
        },
        {
          "name": "strum_nostd_tests",
          "type": "tree",
          "content": null
        },
        {
          "name": "strum_tests",
          "type": "tree",
          "content": null
        },
        {
          "name": "travis.sh",
          "type": "blob",
          "size": 0.01953125,
          "content": "cargo test --verbose"
        }
      ]
    }
  ]
}