{
  "metadata": {
    "timestamp": 1736709236191,
    "page": 544,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjU1MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "dgrunwald/rust-cpython",
      "stars": 1813,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.0771484375,
          "content": "/target\n/doc\n/gh-pages\n\n*.so\n*.out\nextensions/stamps/\nextensions/tests/*.dSYM/\n"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 7.921875,
          "content": "# Change Log\n\n## [Unreleased]\n\n[Unreleased]: https://github.com/dgrunwald/rust-cpython/compare/0.7.2...HEAD\n\n## 0.7.2 - 2024-07-02\n\n- [Added support for Python 3.12][295] (PR by [@quark-zju])\n\n[295]: https://github.com/dgrunwald/rust-cpython/pull/295\n\n## 0.7.1 - 2022-10-25\n- Added support for Python 3.11. (based on [PR 279][279] by [@Techcable])\n- [Fix CI with nightly Rust][284] (PR by [@tschorr])\n- [Fix error with Result in py_class! macro][281] (PR by [@dtolnay])\n\n[279]: https://github.com/dgrunwald/rust-cpython/pull/279\n[281]: https://github.com/dgrunwald/rust-cpython/pull/281\n[284]: https://github.com/dgrunwald/rust-cpython/pull/284\n[@tschorr]: https://github.com/tschorr\n[@Techcable]: https://github.com/Techcable\n[@dtolnay]: https://github.com/dtolnay\n\n## 0.7.0 - 2021-10-09\n- Added support for Python 3.10.\n- Removed support for Python 3.3 and 3.4.\n- [Consistently use `__index__` when converting Python values to Rust integers][270]\n  - Breaking change: A function declared with a `i: i32` parameter no longer accepts Python floating-point values.\n- [Rust panic messages now are included in Python exception message][264] (PR by [@SimonSapin])\n- [Allow more arithmetic methods in `py_class!`][272] (PR by [@fsh])\n- [Add `NumberProtocol` trait][267] (PR by [@Techcable])\n- [Add `GILGuard::check`][269] (PR by [@DurhamG])\n\n[270]: https://github.com/dgrunwald/rust-cpython/pull/270\n[264]: https://github.com/dgrunwald/rust-cpython/pull/264\n[272]: https://github.com/dgrunwald/rust-cpython/pull/272\n[267]: https://github.com/dgrunwald/rust-cpython/pull/267\n[269]: https://github.com/dgrunwald/rust-cpython/pull/269\n[@SimonSapin]: https://github.com/SimonSapin\n[@fsh]: https://github.com/fsh\n[@Techcable]: https://github.com/Techcable\n[@DurhamG]: https://github.com/DurhamG\n\n## 0.6.0 - 2021-04-15\n- the minimum supported Rust version is now 1.41.1\n- on Python 3, [strings now directly use the UTF-8 representation stored inside the Python string][247]\n- [visibility keywords are now permitted on classes and functions][250] (PR by [@tdyas])\n- [the `PyNone` type can be used as a marker representing None in Python][253] (PR by [@markbt])\n\n[247]: https://github.com/dgrunwald/rust-cpython/pull/247\n[250]: https://github.com/dgrunwald/rust-cpython/pull/250\n[@tdyas]: https://github.com/tdyas\n[253]: https://github.com/dgrunwald/rust-cpython/pull/253\n\n## 0.5.2 - 2020-12-16\n- [add a way to disable converting `PyString` to unicode on Python 2][240] (PR by [@quark-zju])\n- [initial serde support][241] (PR by [@quark-zju])\n- [avoid abort if the Python function never returns due to thread exit][244] (PR by [@quark-zju])\n- Added [Python 3.9][243] support.\n\n[240]: https://github.com/dgrunwald/rust-cpython/pull/240\n[241]: https://github.com/dgrunwald/rust-cpython/pull/241\n[243]: https://github.com/dgrunwald/rust-cpython/pull/243\n[244]: https://github.com/dgrunwald/rust-cpython/pull/244\n\n## 0.5.1 - 2020-09-08\n- [ignore trailing comma in plist parsing][220] (PR by [@lausek])\n- [make fields of initialization config public and implement Default][219] (PR by [@indygreg])\n- [fix macros without $crate:: access][234] (PR by [@markbt])\n\n[@lausek]: https://github.com/lausek\n[220]: https://github.com/dgrunwald/rust-cpython/pull/220\n[219]: https://github.com/dgrunwald/rust-cpython/pull/219\n[234]: https://github.com/dgrunwald/rust-cpython/pull/234\n\n## 0.5.0 - 2020-04-08\n- [properties (attributes with getter/setters defined in Rust][208] (PR by [@markbt])\n- [adoption of 2018 edition and general code modernization][204] (PR by [@markbt])\n- [reference extraction for slot functions and optional reference extraction][207] (PR by [@markbt])\n- [PEP-587 initialization APIs (python3-sys for Pythonâ‰¥3.8)][211] (PR by [@indygreg])\n- [more import APIs (python3-sys)][210] (PR by [@indygreg])\n\n[208]: https://github.com/dgrunwald/rust-cpython/pull/208\n[204]: https://github.com/dgrunwald/rust-cpython/pull/204\n[207]: https://github.com/dgrunwald/rust-cpython/pull/207\n[211]: https://github.com/dgrunwald/rust-cpython/pull/211\n[210]: https://github.com/dgrunwald/rust-cpython/pull/210\n\n## 0.4.1 - 2020-02-03\n- [link-time inconsistency with build config][135] (original PR by [@svevang] adapted as [202])\n- [missing `pub` classifier][206] in `PySharedRef` example. (PR by [@Alphare])\n- README updates: copyright years, version number in examples\n\n[135]: https://github.com/dgrunwald/rust-cpython/pull/135\n[@svevang]: https://github.com/svevang\n[202]: https://github.com/dgrunwald/rust-cpython/pull/202\n[206]: https://github.com/dgrunwald/rust-cpython/pull/206\n[@Alphare]: https://github.com/Alphare\n\n## 0.4.0 - 2020-01-27\n- The 0.4.x series is planned to be the last that will support Rust 2015.\n- Added [Python 3.8][187] support.\n- [Type errors][199] during downcasts now explain what the expected and actual types are. (PR by [@markbt])\n- Data items can now be shared between Python objects (e.g. for iterators) using [`PySharedRef`][189]. (PR by [@yuja])\n- [`PyList` can now be appended to with `append`][197].  The method for inserting items is renamed to `insert` for consistency.  (PR by [@binh-vu])\n\n[199]: https://github.com/dgrunwald/rust-cpython/pull/199\n[197]: https://github.com/dgrunwald/rust-cpython/pull/197\n[@binh-vu]: https://github.com/binh-vu\n[189]: https://github.com/dgrunwald/rust-cpython/pull/189\n[@yuja]: https://github.com/yuja\n[187]: https://github.com/dgrunwald/rust-cpython/pull/187\n\n## 0.3.0 - 2019-08-01\n- Minumum Rust compiler version is now 1.30.\n- Added [Capsule support][169] (PR by [@gracinet])\n- Added [Rust Docstring support for instance methods][166], [static methods and class methods][179] (PRs by [@quark-zju] and [@AdamRzepka])\n- [Made macros work with Rust 2018][167] (PR by [@derekdreery])\n- [Support Rust raw identifiers for method and keyword names][183] (PR by [@quark-zju])\n- Added `impl RefFromPyObject for [u8]`. This allows using `&[u8]` as parameter type in `py_fn!`.\n  When passing a `bytes` object from Python, this allows accessing the data without a copy.\n  (other mutable Python objects will use a defensive copy)\n\n[166]: https://github.com/dgrunwald/rust-cpython/pull/166\n[183]: https://github.com/dgrunwald/rust-cpython/pull/183\n[@quark-zju]: https://github.com/quark-zju\n[167]: https://github.com/dgrunwald/rust-cpython/pull/167\n[@derekdreery]: https://github.com/derekdreery\n[169]: https://github.com/dgrunwald/rust-cpython/pull/169\n[@gracinet]: https://github.com/gracinet\n[179]: https://github.com/dgrunwald/rust-cpython/pull/179\n[@AdamRzepka]: https://github.com/AdamRzepkaA\n\n## 0.2.1 - 2018-09-28\n- Added Python 3.7 support\n\n## 0.2.0 - 2018-02-27\n- Added `pub` modifier to `py_class!` syntax: `py_class!(pub class ClassName |py| ...)`\n- Changed `obj.extract::<Vec<T>>(py)` to work with any object implementing the sequence protocol; not just lists.\n- Added the `buffer` module, which allows safe access to the [buffer protocol](https://docs.python.org/3/c-api/buffer.html).\n  This allows zero-copy access to numpy arrays.\n- When building with `--feature nightly`, `extract::<Vec<PrimitiveType>>` will try to use the buffer protocol\n  before falling back to the sequence protocol.\n- [Added support for optional parameters][81] to `py_argparse!`, `py_fn!` and `py_class!` macros. (PR by [@Luthaf])\n\n  Example: `py_fn!(py, function(i: i32 = 0))`\n- Made `ObjectProtocol::compare()` available on Python 3.\n- Added `ObjectProtocol::rich_compare()`.\n- Fixed [non-deterministic segfault][115] in extension modules using `py_class!` (PR by [@markbt])\n- Fixed python27-sys [compiler error on ARM][114] (PR by [@ostrosco])\n- [Export path to Python interpreter as Cargo variable][119] (PR by [@indygreg])\n\n[81]: https://github.com/dgrunwald/rust-cpython/pull/81\n[@Luthaf]: https://github.com/Luthaf\n[115]: https://github.com/dgrunwald/rust-cpython/pull/115\n[@markbt]: https://github.com/markbt\n[114]: https://github.com/dgrunwald/rust-cpython/pull/114\n[@ostrosco]: https://github.com/ostrosco\n[119]: https://github.com/dgrunwald/rust-cpython/pull/119\n[@indygreg]: https://github.com/indygreg\n\n## 0.1.0 - 2016-12-17\n- First release that works on stable Rust.\n\n"
        },
        {
          "name": "Cargo.lock",
          "type": "blob",
          "size": 4.330078125,
          "content": "# This file is automatically @generated by Cargo.\n# It is not intended for manual editing.\nversion = 3\n\n[[package]]\nname = \"aho-corasick\"\nversion = \"0.7.18\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1e37cfd5e7657ada45f742d6e99ca5788580b5c529dc78faf11ece6dc702656f\"\ndependencies = [\n \"memchr\",\n]\n\n[[package]]\nname = \"autocfg\"\nversion = \"1.0.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"cdb031dd78e28731d87d56cc8ffef4a8f36ca26c38fe2de700543e627f8a464a\"\n\n[[package]]\nname = \"cpython\"\nversion = \"0.7.2\"\ndependencies = [\n \"libc\",\n \"num-traits\",\n \"paste\",\n \"python27-sys\",\n \"python3-sys\",\n \"rustversion\",\n \"serde\",\n \"serde_bytes\",\n \"serde_cbor\",\n]\n\n[[package]]\nname = \"half\"\nversion = \"1.7.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"62aca2aba2d62b4a7f5b33f3712cb1b0692779a56fb510499d5c0aa594daeaf3\"\n\n[[package]]\nname = \"hello\"\nversion = \"0.7.0\"\ndependencies = [\n \"cpython\",\n]\n\n[[package]]\nname = \"libc\"\nversion = \"0.2.103\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"dd8f7255a17a627354f321ef0055d63b898c6fb27eff628af4d1b66b7331edf6\"\n\n[[package]]\nname = \"memchr\"\nversion = \"2.4.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"308cc39be01b73d0d18f82a0e7b2a3df85245f84af96fdddc5d202d27e47b86a\"\n\n[[package]]\nname = \"num-traits\"\nversion = \"0.2.14\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"9a64b1ec5cda2586e284722486d802acf1f7dbdc623e2bfc57e65ca1cd099290\"\ndependencies = [\n \"autocfg\",\n]\n\n[[package]]\nname = \"paste\"\nversion = \"1.0.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"acbf547ad0c65e31259204bd90935776d1c693cec2f4ff7abb7a1bbbd40dfe58\"\n\n[[package]]\nname = \"proc-macro2\"\nversion = \"1.0.29\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b9f5105d4fdaab20335ca9565e106a5d9b82b6219b5ba735731124ac6711d23d\"\ndependencies = [\n \"unicode-xid\",\n]\n\n[[package]]\nname = \"python27-sys\"\nversion = \"0.7.0\"\ndependencies = [\n \"libc\",\n \"regex\",\n]\n\n[[package]]\nname = \"python3-sys\"\nversion = \"0.7.2\"\ndependencies = [\n \"libc\",\n \"regex\",\n]\n\n[[package]]\nname = \"quote\"\nversion = \"1.0.10\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"38bc8cc6a5f2e3655e0899c1b848643b2562f853f114bfec7be120678e3ace05\"\ndependencies = [\n \"proc-macro2\",\n]\n\n[[package]]\nname = \"regex\"\nversion = \"1.6.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"4c4eb3267174b8c6c2f654116623910a0fef09c4753f8dd83db29c48a0df988b\"\ndependencies = [\n \"aho-corasick\",\n \"memchr\",\n \"regex-syntax\",\n]\n\n[[package]]\nname = \"regex-syntax\"\nversion = \"0.6.27\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a3f87b73ce11b1619a3c6332f45341e0047173771e8b8b73f87bfeefb7b56244\"\n\n[[package]]\nname = \"rustversion\"\nversion = \"1.0.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"61b3909d758bb75c79f23d4736fac9433868679d3ad2ea7a61e3c25cfda9a088\"\n\n[[package]]\nname = \"serde\"\nversion = \"1.0.130\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f12d06de37cf59146fbdecab66aa99f9fe4f78722e3607577a5375d66bd0c913\"\ndependencies = [\n \"serde_derive\",\n]\n\n[[package]]\nname = \"serde_bytes\"\nversion = \"0.11.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"16ae07dd2f88a366f15bd0632ba725227018c69a1c8550a927324f8eb8368bb9\"\ndependencies = [\n \"serde\",\n]\n\n[[package]]\nname = \"serde_cbor\"\nversion = \"0.11.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"2bef2ebfde456fb76bbcf9f59315333decc4fda0b2b44b420243c11e0f5ec1f5\"\ndependencies = [\n \"half\",\n \"serde\",\n]\n\n[[package]]\nname = \"serde_derive\"\nversion = \"1.0.130\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d7bc1a1ab1961464eae040d96713baa5a724a8152c1222492465b54322ec508b\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn\",\n]\n\n[[package]]\nname = \"syn\"\nversion = \"1.0.80\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d010a1623fbd906d51d650a9916aaefc05ffa0e4053ff7fe601167f3e715d194\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"unicode-xid\",\n]\n\n[[package]]\nname = \"unicode-xid\"\nversion = \"0.2.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8ccb82d61f80a663efe1f787a51b16b5a51e3314d6ac365b08639f52387b33f3\"\n"
        },
        {
          "name": "Cargo.toml",
          "type": "blob",
          "size": 3.8134765625,
          "content": "[package]\n\nname = \"cpython\"\nversion = \"0.7.2\"\ndescription = \"Bindings to Python\"\nauthors = [\"Daniel Grunwald <daniel@danielgrunwald.de>\"]\nreadme = \"README.md\"\nkeywords = [\n    \"python\",\n    \"cpython\",\n    \"libpython27\",\n]\nhomepage = \"https://github.com/dgrunwald/rust-cpython\"\nrepository = \"https://github.com/dgrunwald/rust-cpython.git\"\ndocumentation = \"http://dgrunwald.github.io/rust-cpython/doc/cpython/\"\ncategories = [\"api-bindings\", \"development-tools::ffi\"]\nlicense = \"MIT\"\nexclude = [\n    \"/.gitignore\",\n    \"/.travis.yml\",\n    \"/appveyor.yml\",\n    \"/.cargo/config\",\n    \"/python27-sys/**\",\n    \"/python3-sys/**\",\n    \"/extensions/**\",\n    \"/Makefile\"\n]\nbuild = \"build.rs\"\nedition = \"2018\"\n\n[badges]\ntravis-ci = { repository = \"dgrunwald/rust-cpython\" }\nappveyor = { repository = \"dgrunwald/rust-cpython\" }\n\n[dependencies]\nlibc = \"0.2\"\nnum-traits = \"0.2\"\npaste = \"1\"\nserde = { version = \"1\", features = [\"derive\"], optional = true }\n\n[dev-dependencies]\nrustversion = \"1.0\"\nserde_bytes = { version = \"0.11\" }\nserde_cbor = { version = \"0.11\" }\n\n# These features are both optional, but you must pick one to \n# indicate which python ffi you are trying to bind to.\n[dependencies.python27-sys]\noptional = true\npath = \"python27-sys\"\nversion = \"0.7.0\"\n\n[dependencies.python3-sys]\noptional = true\npath = \"python3-sys\"\nversion = \"0.7.2\"\n\n[features]\ndefault = [\"python3-sys\"]\n\n# Enable serde support that converts between a serde type and PyObject.\nserde-convert = [\"serde\"]\n\n# Deprecated: nonnull feature no longer has any effect;\n# std::ptr::NonNull is now used unconditionally.\nnonnull = []\n\n# Enable additional features that require nightly rust\nnightly = []\n\n# Use this feature when building an extension module.\n# It tells the linker to keep the python symbols unresolved,\n# so that the module can also be used with statically linked python interpreters.\nextension-module = [ \"python3-sys/extension-module\" ]\n\n# Unfortunately we can't use the forward the same feature to either python27-sys\n# or python3-sys. (honestly, we should probably merge both crates into 'python-sys')\nextension-module-2-7 = [ \"python27-sys/extension-module\" ]\n\n# Use these features to explicitly control linking for Python 3.\n# (See the documentation in python3-sys/Cargo.toml for more info.)\npy-link-mode-default = [ \"python3-sys/link-mode-default\" ]\npy-link-mode-unresolved-static = [ \"python3-sys/link-mode-unresolved-static\" ]\n\n# Optional features to support explicitly specifying python minor version.\n# If you don't care which minor version, just specify python3-sys as a \n# feature.\npython-3-11 = [\"python3-sys/python-3-11\"]\npython-3-10 = [\"python3-sys/python-3-10\"]\npython-3-9 = [\"python3-sys/python-3-9\"]\npython-3-8 = [\"python3-sys/python-3-8\"]\npython-3-7 = [\"python3-sys/python-3-7\"]\npython-3-6 = [\"python3-sys/python-3-6\"]\npython-3-5 = [\"python3-sys/python-3-5\"]\npython-3-4 = [\"python3-sys/python-3-4\"]\n\n#pep-384 = [\"python3-sys/pep-384\"]\n\n# When set, do not call prepare_freethreaded_python() when calling\n# GILGuard::acquire(). This effectively prevents the crate from automatically\n# calling Py_Initialize() and other functions that attempt to automatically\n# initialize the Python interpreter.\n#\n# This feature can be useful for programs embedding Python, which can guarantee\n# Python interpreter initialization and don't need the automatic-by-default\n# behavior or don't want the behavior coded into this crate.\n#\n# The feature may also be necessary if this crate's code executes as part of\n# Python interpreter initialization, before the Py_Initialize() call completes.\n# This scenario should be rare.\nno-auto-initialize = []\n\n# Only affect Python 2.\n# Once set, `PyString` and `String` converts to only `bytes` (aka. `str` on\n# Python 2). Non-ascii string will no longer be converted to `unicode`.\npy2-no-auto-unicode-promotion = []\n\n[workspace]\nmembers = [\"python27-sys\", \"python3-sys\", \"extensions/hello\"]\n\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.03515625,
          "content": "Copyright (c) 2015 Daniel Grunwald\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this\nsoftware and associated documentation files (the \"Software\"), to deal in the Software\nwithout restriction, including without limitation the rights to use, copy, modify, merge,\npublish, distribute, sublicense, and/or sell copies of the Software, and to permit persons\nto whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or\nsubstantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,\nINCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR\nPURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE\nFOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\nOTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\nDEALINGS IN THE SOFTWARE.\n\n"
        },
        {
          "name": "Makefile",
          "type": "blob",
          "size": 1.7890625,
          "content": ".PHONY: default build test doc extensions clean\n\nifndef PY\nPY := $(word 2, $(subst ., ,$(shell python --version 2>&1)))\nendif\nifndef NIGHTLY\nifeq ($(word 3, $(subst -, ,$(shell rustc --version 2>&1))),nightly)\nNIGHTLY := 1\nelse\nNIGHTLY := 0\nendif\nendif\n\nFEATURES := serde-convert\n\nifeq ($(PY),2)\nFEATURES := $(FEATURES) python27-sys\nendif\nifeq ($(PY),3)\nFEATURES := $(FEATURES) python3-sys\nifdef PEP384\nexport PEP384=1\nFEATURES := $(FEATURES) pep-384\nendif\nendif\nifeq ($(NIGHTLY),1)\nFEATURES := $(FEATURES) nightly\nendif\n\nCARGO_FLAGS := --features \"$(FEATURES)\" --no-default-features\n\ndefault: test extensions\n\nsrc/py_class/py_class_impl2.rs: src/py_class/py_class_impl.py\n\tPY=2 python $< >$@\n\nsrc/py_class/py_class_impl3.rs: src/py_class/py_class_impl.py\n\tPY=3 python $< >$@\n\npython27-sys/build.rs: python3-sys/build.rs\n\t@echo \"// THIS FILE IS GENERATED FROM python3-sys/build.rs\" > $@\n\t@echo \"// DO NOT MODIFY\" >> $@\n\t@echo \"\" >> $@\n\tcat \"$<\" >> \"$@\"\n\nbuild: src/py_class/py_class_impl2.rs src/py_class/py_class_impl3.rs python27-sys/build.rs\n\tcargo build $(CARGO_FLAGS)\n\ntest: build\n\tcargo test $(CARGO_FLAGS)\nifeq ($(NIGHTLY),1)\n# unpretty=ast-tree,expanded output is only supported on nightly\n\tpython$(PY) tests/check_symbols.py\nendif\n\ndoc: build\n\tcargo doc --no-deps $(CARGO_FLAGS)\n\nclippy:\n\tcargo clippy $(CARGO_FLAGS)\n\nextensions: build\n\tmake -C extensions/tests PY=$(PY)\n\nclean:\n\t$(RM) -r target\n\tmake -C extensions/tests clean\n\ngh-pages:\n\tgit clone --branch gh-pages git@github.com:dgrunwald/rust-cpython.git gh-pages\n\n.PHONY: gh-pages-doc\ngh-pages-doc: doc | gh-pages\n\tcd gh-pages && git pull\n\t$(RM) -r gh-pages/doc\n\tcp -r target/doc gh-pages/\n\t$(RM) gh-pages/doc/.lock\n\tcd gh-pages && git add .\n\tcd gh-pages && git commit -m \"Update documentation\"\n\npublish: default gh-pages-doc\n\tcargo publish\n\tcd gh-pages && git push\n\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 3.9814453125,
          "content": "rust-cpython [![Build Status](https://github.com/dgrunwald/rust-cpython/actions/workflows/test.yml/badge.svg)](https://github.com/dgrunwald/rust-cpython/actions/workflows/test.yml)\n====================\n\nWarning: this package is no longer actively maintained.\nPlease switch to [PyO3](https://github.com/PyO3/pyo3) instead.\n\n[Rust](http://www.rust-lang.org/) bindings for the [python](https://www.python.org/) interpreter.\n\n* [Documentation](http://dgrunwald.github.io/rust-cpython/doc/cpython/)\n* Cargo package: [cpython](https://crates.io/crates/cpython)\n\n---\n\nCopyright (c) 2015-2021 Daniel Grunwald.\nRust-cpython is licensed under the [MIT license](http://opensource.org/licenses/MIT).\nPython is licensed under the [Python License](https://docs.python.org/2/license.html).\n\nSupported Python versions:\n* Python 2.7\n* Python 3.7 to 3.12\n\nWarning: this package is no longer actively maintained.\nPlease switch to [PyO3](https://github.com/PyO3/pyo3) instead.\n\nRequires Rust 1.41.1 or later.\n\n# Usage\n\nTo use `cpython`, add this to your `Cargo.toml`:\n\n```toml\n[dependencies]\ncpython = \"0.7\"\n```\n\n#### Example program displaying the value of `sys.version`:\n\n```rust\nuse cpython::{Python, PyDict, PyResult};\n\nfn main() {\n    let gil = Python::acquire_gil();\n    hello(gil.python()).unwrap();\n}\n\nfn hello(py: Python) -> PyResult<()> {\n    let sys = py.import(\"sys\")?;\n    let version: String = sys.get(py, \"version\")?.extract(py)?;\n\n    let locals = PyDict::new(py);\n    locals.set_item(py, \"os\", py.import(\"os\")?)?;\n    let user: String = py.eval(\"os.getenv('USER') or os.getenv('USERNAME')\", None, Some(&locals))?.extract(py)?;\n\n    println!(\"Hello {}, I'm Python {}\", user, version);\n    Ok(())\n}\n```\n\n#### Example library with python bindings:\nThe following two files will build with `cargo build`, and will generate a python-compatible library.\nOn Mac OS, you will need to rename the output from \\*.dylib to \\*.so.\nOn Windows, you will need to rename the output from \\*.dll to \\*.pyd.\n\n###### Note:\nAt build time `python3-sys/build.rs` will look for interpreters in: \n* `PYTHON_SYS_EXECUTABLE`\n* `python`\n* `python3`\n\npicking the first one that works and is compatible with the configured expected version (by default, any Python 3.X interpreter will do). If a specific interpreter is desired, the `PYTHON_SYS_EXECUTABLE` environment variable should point to it.\n\n**`Cargo.toml`:**\n```toml\n[lib]\nname = \"rust2py\"\ncrate-type = [\"cdylib\"]\n\n[dependencies.cpython]\nversion = \"0.7\"\nfeatures = [\"extension-module\"]\n```\n\n**`src/lib.rs`**\n```rust\nuse cpython::{PyResult, Python, py_module_initializer, py_fn};\n\n// add bindings to the generated python module\n// N.B: names: \"rust2py\" must be the name of the `.so` or `.pyd` file\npy_module_initializer!(rust2py, |py, m| {\n    m.add(py, \"__doc__\", \"This module is implemented in Rust.\")?;\n    m.add(py, \"sum_as_string\", py_fn!(py, sum_as_string_py(a: i64, b:i64)))?;\n    Ok(())\n});\n\n// logic implemented as a normal rust function\nfn sum_as_string(a:i64, b:i64) -> String {\n    format!(\"{}\", a + b).to_string()\n}\n\n// rust-cpython aware function. All of our python interface could be\n// declared in a separate module.\n// Note that the py_fn!() macro automatically converts the arguments from\n// Python objects to Rust values; and the Rust return value back into a Python object.\nfn sum_as_string_py(_: Python, a:i64, b:i64) -> PyResult<String> {\n    let out = sum_as_string(a, b);\n    Ok(out)\n}\n```\n\nOn windows and linux, you can build normally with cargo build --release. On Mac Os, you need to set additional linker arguments. The simplest solution is to create a `.cargo/config` with the following content:\n\n```\n[target.x86_64-apple-darwin]\nrustflags = [\n  \"-C\", \"link-arg=-undefined\",\n  \"-C\", \"link-arg=dynamic_lookup\",\n]\n```\n\nFor `setup.py` integration, see https://github.com/PyO3/setuptools-rust\n\n# Development\n\nTo build the crate, run: `make build`\n\nTo test the crate, run: `make test`\n\nNote: This crate has several files that are auto-generated using scripts. Using the Makefile ensures that these\nfiles are re-generated as needed.\n"
        },
        {
          "name": "build.rs",
          "type": "blob",
          "size": 1.88671875,
          "content": "use std::env;\nuse std::ffi::OsString;\n\nconst CFG_KEY: &str = \"py_sys_config\";\n\n#[cfg(feature = \"python27-sys\")]\nconst PYTHONSYS_ENV_VAR: &str = \"DEP_PYTHON27_PYTHON_FLAGS\";\n\n#[cfg(feature = \"python3-sys\")]\nconst PYTHONSYS_ENV_VAR: &str = \"DEP_PYTHON3_PYTHON_FLAGS\";\n\nfn watched_var_os(key: &str) -> Option<OsString> {\n    println!(\"cargo:rerun-if-env-changed={}\", key);\n    env::var_os(key)\n}\n\nfn main() {\n    if cfg!(feature = \"python27-sys\")\n        && (watched_var_os(\"CARGO_FEATURE_PY_LINK_MODE_DEFAULT\").is_some()\n            || watched_var_os(\"CARGO_FEATURE_PY_LINK_MODE_UNRESOLVED_STATIC\").is_some())\n    {\n        eprintln!(\"Cannot use link mode control with Python 2.7\");\n        std::process::exit(1);\n    }\n\n    // python{27,3.x}-sys/build.rs passes python interpreter compile flags via\n    // environment variable (using the 'links' mechanism in the cargo.toml).\n    let flags = match env::var(PYTHONSYS_ENV_VAR) {\n        Ok(flags) => flags,\n        Err(_) => {\n            eprintln!(\n                concat!(\n                    \"Environment variable {} not found - this is supposed to be \",\n                    \"exported from the pythonXX-sys dependency, so the build \",\n                    \"chain is broken\"\n                ),\n                PYTHONSYS_ENV_VAR\n            );\n            std::process::exit(1);\n        }\n    };\n\n    if !flags.is_empty() {\n        for f in flags.split(',') {\n            // write out flags as --cfg so that the same #cfg blocks can be used\n            // in rust-cpython as in the -sys libs\n            let key_and_val: Vec<&str> = f.split('=').collect();\n            let key = key_and_val[0];\n            let val = key_and_val[1];\n            if key.starts_with(\"FLAG\") {\n                println!(\"cargo:rustc-cfg={}=\\\"{}\\\"\", CFG_KEY, &key[5..])\n            } else {\n                println!(\"cargo:rustc-cfg={}=\\\"{}_{}\\\"\", CFG_KEY, &key[4..], val);\n            }\n        }\n    }\n}\n"
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "extensions",
          "type": "tree",
          "content": null
        },
        {
          "name": "python27-sys",
          "type": "tree",
          "content": null
        },
        {
          "name": "python3-sys",
          "type": "tree",
          "content": null
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}