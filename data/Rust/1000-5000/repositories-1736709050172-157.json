{
  "metadata": {
    "timestamp": 1736709050172,
    "page": 157,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjE2MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "awslabs/aws-lambda-rust-runtime",
      "stars": 3388,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.2119140625,
          "content": "target\n/.cargo\nlambda-runtime/libtest.rmeta\nlambda-integration-tests/target\nCargo.lock\n\n# Built AWS Lambda zipfile\nlambda.zip\n\n# output.json from example docs\noutput.json\n\n.aws-sam\nbuild\n.vscode\n\nnode_modules\ncdk.out\n"
        },
        {
          "name": ".rustfmt.toml",
          "type": "blob",
          "size": 0.4697265625,
          "content": "edition = \"2021\"\n\n# https://github.com/rust-lang/rustfmt/blob/master/Configurations.md#max_width\nmax_width = 120\n\n#https://github.com/rust-lang/rustfmt/blob/master/Configurations.md#reorder_imports\nreorder_imports = true\n\n#https://github.com/rust-lang/rustfmt/blob/master/Configurations.md#unstable_features\nunstable_features = true\n\n# imports_granularity is unstable\n# https://github.com/rust-lang/rustfmt/blob/master/Configurations.md#merge_imports\nimports_granularity = \"Crate\"\n"
        },
        {
          "name": "CODE_OF_CONDUCT.md",
          "type": "blob",
          "size": 0.302734375,
          "content": "## Code of Conduct\n\nThis project has adopted the [Amazon Open Source Code of Conduct](https://aws.github.io/code-of-conduct).\nFor more information see the [Code of Conduct FAQ](https://aws.github.io/code-of-conduct-faq) or contact\nopensource-codeofconduct@amazon.com with any additional questions or comments.\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 3.6435546875,
          "content": "# Contributing Guidelines\n\nThank you for your interest in contributing to our project. Whether it's a bug report, new feature, correction, or additional\ndocumentation, we greatly value feedback and contributions from our community.\n\nPlease read through this document before submitting any issues or pull requests to ensure we have all the necessary\ninformation to effectively respond to your bug report or contribution.\n\n## Reporting Bugs/Feature Requests\n\nWe welcome you to use the GitHub issue tracker to report bugs or suggest features.\n\nWhen filing an issue, please check [existing open](https://github.com/awslabs/aws-lambda-rust-runtime/issues), or [recently closed](https://github.com/awslabs/aws-lambda-rust-runtime/issues?utf8=%E2%9C%93&q=is%3Aissue%20is%3Aclosed%20), issues to make sure somebody else hasn't already\nreported the issue. Please try to include as much information as you can. Details like these are incredibly useful:\n\n* A reproducible test case or series of steps\n* The version of our code being used\n* Any modifications you've made relevant to the bug\n* Anything unusual about your environment or deployment\n\n## Contributing via Pull Requests\n\nContributions via pull requests are much appreciated. Before sending us a pull request, please ensure that:\n\n1. You are working against the latest source on the *main* branch.\n2. You check existing open, and recently merged, pull requests to make sure someone else hasn't addressed the problem already.\n3. You open an issue to discuss any significant work - we would hate for your time to be wasted.\n\nTo send us a pull request, please:\n\n1. Fork the repository.\n2. Modify the source; please focus on the specific change you are contributing. If you also reformat all the code, it will be hard for us to focus on your change.\n3. Ensure local tests pass.\n4. Commit to your fork using clear commit messages and ensure any Rust source files have been formatted with the [rustfmt tool](https://github.com/rust-lang/rustfmt#quick-start)\n5. Send us a pull request, answering any default questions in the pull request interface.\n6. Pay attention to any automated CI failures reported in the pull request, and stay involved in the conversation.\n\nGitHub provides additional document on [forking a repository](https://help.github.com/articles/fork-a-repo/) and\n[creating a pull request](https://help.github.com/articles/creating-a-pull-request/).\n\n## Finding contributions to work on\n\nLooking at the existing issues is a great way to find something to contribute on. As our projects, by default, use the default GitHub issue labels (enhancement/bug/duplicate/help wanted/invalid/question/wontfix), looking at any ['help wanted'](https://github.com/awslabs/aws-lambda-rust-runtime/labels/help%20wanted) issues is a great place to start.\n\n## Code of Conduct\n\nThis project has adopted the [Amazon Open Source Code of Conduct](https://aws.github.io/code-of-conduct).\nFor more information see the [Code of Conduct FAQ](https://aws.github.io/code-of-conduct-faq) or contact\nopensource-codeofconduct@amazon.com with any additional questions or comments.\n\n## Security issue notifications\n\nIf you discover a potential security issue in this project we ask that you notify AWS/Amazon Security via our [vulnerability reporting page](http://aws.amazon.com/security/vulnerability-reporting/). Please do **not** create a public github issue.\n\n## Licensing\n\nSee the [LICENSE](https://github.com/awslabs/aws-lambda-rust-runtime/blob/main/LICENSE) file for our project's licensing. We will ask you to confirm the licensing of your contribution.\n\nWe may ask you to sign a [Contributor License Agreement (CLA)](http://en.wikipedia.org/wiki/Contributor_License_Agreement) for larger changes.\n"
        },
        {
          "name": "Cargo.toml",
          "type": "blob",
          "size": 0.6162109375,
          "content": "[workspace]\nresolver = \"2\"\nmembers = [\n    \"lambda-http\",\n    \"lambda-integration-tests\",\n    \"lambda-runtime-api-client\",\n    \"lambda-runtime\",\n    \"lambda-extension\",\n    \"lambda-events\",\n]\n\nexclude = [\"examples\"]\n\n[workspace.dependencies]\nbase64 = \"0.22\"\nbytes = \"1\"\nchrono = { version = \"0.4.35\", default-features = false, features = [\n    \"clock\",\n    \"serde\",\n    \"std\",\n] }\nfutures = \"0.3\"\nfutures-channel = \"0.3\"\nfutures-util = \"0.3\"\nhttp = \"1.0\"\nhttp-body = \"1.0\"\nhttp-body-util = \"0.1\"\nhttp-serde = \"2.0\"\nhyper = \"1.0\"\nhyper-util = \"0.1.1\"\npin-project-lite = \"0.2\"\ntower = \"0.5\"\ntower-layer = \"0.3\"\ntower-service = \"0.3\"\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 11.091796875,
          "content": "\n                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"[]\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright [yyyy] [name of copyright owner]\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n"
        },
        {
          "name": "Makefile",
          "type": "blob",
          "size": 6.0625,
          "content": "INTEG_STACK_NAME ?= rust-lambda-integration-tests\nINTEG_FUNCTIONS_BUILD := runtime-fn runtime-trait http-fn http-trait\nINTEG_FUNCTIONS_INVOKE := RuntimeFn RuntimeFnAl2 RuntimeTrait RuntimeTraitAl2 Python PythonAl2\nINTEG_API_INVOKE := RestApiUrl HttpApiUrl\nINTEG_EXTENSIONS := extension-fn extension-trait logs-trait\n# Using musl to run extensions on both AL1 and AL2\nINTEG_ARCH := x86_64-unknown-linux-musl\n\ndefine uppercase\n$(shell sed -r 's/(^|-)(\\w)/\\U\\2/g' <<< $(1))\nendef\n\npr-check:\n\tcargo +1.54.0 check --all\n\tcargo +stable fmt --all -- --check\n\tcargo +stable clippy\n\tcargo +1.54.0 test\n\tcargo +stable test\n\nintegration-tests:\n# Build Integration functions\n\tcargo zigbuild --release --target $(INTEG_ARCH) -p lambda_integration_tests\n\trm -rf ./build\n\tmkdir -p ./build\n\t${MAKE} ${MAKEOPTS} $(foreach function,${INTEG_FUNCTIONS_BUILD}, build-integration-function-${function})\n\t${MAKE} ${MAKEOPTS} $(foreach extension,${INTEG_EXTENSIONS}, build-integration-extension-${extension})\n# Deploy to AWS\n\tsam deploy \\\n\t\t--template lambda-integration-tests/template.yaml \\\n\t\t--stack-name ${INTEG_STACK_NAME} \\\n\t\t--capabilities CAPABILITY_IAM \\\n\t\t--resolve-s3 \\\n\t\t--no-fail-on-empty-changeset\n# Invoke functions\n\t${MAKE} ${MAKEOPTS} $(foreach function,${INTEG_FUNCTIONS_INVOKE}, invoke-integration-function-${function})\n\t${MAKE} ${MAKEOPTS} $(foreach api,${INTEG_API_INVOKE}, invoke-integration-api-${api})\n\nbuild-integration-function-%:\n\tmkdir -p ./build/$*\n\tcp -v ./target/$(INTEG_ARCH)/release/$* ./build/$*/bootstrap\n\nbuild-integration-extension-%:\n\tmkdir -p ./build/$*/extensions\n\tcp -v ./target/$(INTEG_ARCH)/release/$* ./build/$*/extensions/$(call uppercase,$*)\n\ninvoke-integration-function-%:\n\taws lambda invoke --function-name $$(aws cloudformation describe-stacks --stack-name $(INTEG_STACK_NAME) \\\n\t\t--query 'Stacks[0].Outputs[?OutputKey==`$*`].OutputValue' \\\n\t\t--output text) --payload '{\"command\": \"hello\"}' --cli-binary-format raw-in-base64-out /dev/stdout\n\ninvoke-integration-api-%:\n\t$(eval API_URL := $(shell aws cloudformation describe-stacks --stack-name $(INTEG_STACK_NAME) \\\n\t\t--query 'Stacks[0].Outputs[?OutputKey==`$*`].OutputValue' \\\n\t\t--output text))\n\tcurl $(API_URL)/get\n\tcurl $(API_URL)/trait/get\n\tcurl $(API_URL)/al2/get\n\tcurl $(API_URL)/al2-trait/get\n\tcurl -X POST -d '{\"command\": \"hello\"}' $(API_URL)/post\n\tcurl -X POST -d '{\"command\": \"hello\"}' $(API_URL)/trait/post\n\tcurl -X POST -d '{\"command\": \"hello\"}' $(API_URL)/al2/post\n\tcurl -X POST -d '{\"command\": \"hello\"}' $(API_URL)/al2-trait/post\n\n# Test individual event features to ensure optional dependencies\n# are correctly loaded when all default features are disabled.\ncheck-event-features:\n\tcargo test --package aws_lambda_events --no-default-features --features activemq\n\tcargo test --package aws_lambda_events --no-default-features --features alb\n\tcargo test --package aws_lambda_events --no-default-features --features apigw\n\tcargo test --package aws_lambda_events --no-default-features --features appsync\n\tcargo test --package aws_lambda_events --no-default-features --features autoscaling\n\tcargo test --package aws_lambda_events --no-default-features --features bedrock_agent_runtime\n\tcargo test --package aws_lambda_events --no-default-features --features chime_bot\n\tcargo test --package aws_lambda_events --no-default-features --features clientvpn\n\tcargo test --package aws_lambda_events --no-default-features --features cloudwatch_alarms\n\tcargo test --package aws_lambda_events --no-default-features --features cloudwatch_events\n\tcargo test --package aws_lambda_events --no-default-features --features cloudwatch_logs\n\tcargo test --package aws_lambda_events --no-default-features --features code_commit\n\tcargo test --package aws_lambda_events --no-default-features --features codebuild\n\tcargo test --package aws_lambda_events --no-default-features --features codedeploy\n\tcargo test --package aws_lambda_events --no-default-features --features codepipeline_cloudwatch\n\tcargo test --package aws_lambda_events --no-default-features --features codepipeline_job\n\tcargo test --package aws_lambda_events --no-default-features --features cognito\n\tcargo test --package aws_lambda_events --no-default-features --features config\n\tcargo test --package aws_lambda_events --no-default-features --features connect\n\tcargo test --package aws_lambda_events --no-default-features --features documentdb\n\tcargo test --package aws_lambda_events --no-default-features --features dynamodb\n\tcargo test --package aws_lambda_events --no-default-features --features ecr_scan\n\tcargo test --package aws_lambda_events --no-default-features --features eventbridge\n\tcargo test --package aws_lambda_events --no-default-features --features firehose\n\tcargo test --package aws_lambda_events --no-default-features --features iam\n\tcargo test --package aws_lambda_events --no-default-features --features iot\n\tcargo test --package aws_lambda_events --no-default-features --features iot_1_click\n\tcargo test --package aws_lambda_events --no-default-features --features iot_button\n\tcargo test --package aws_lambda_events --no-default-features --features iot_deprecated\n\tcargo test --package aws_lambda_events --no-default-features --features kafka\n\tcargo test --package aws_lambda_events --no-default-features --features kinesis\n\tcargo test --package aws_lambda_events --no-default-features --features kinesis_analytics\n\tcargo test --package aws_lambda_events --no-default-features --features lambda_function_urls\n\tcargo test --package aws_lambda_events --no-default-features --features lex\n\tcargo test --package aws_lambda_events --no-default-features --features rabbitmq\n\tcargo test --package aws_lambda_events --no-default-features --features s3\n\tcargo test --package aws_lambda_events --no-default-features --features s3_batch_job\n\tcargo test --package aws_lambda_events --no-default-features --features secretsmanager\n\tcargo test --package aws_lambda_events --no-default-features --features ses\n\tcargo test --package aws_lambda_events --no-default-features --features sns\n\tcargo test --package aws_lambda_events --no-default-features --features sqs\n\tcargo test --package aws_lambda_events --no-default-features --features streams\n\nfmt:\n\tcargo +nightly fmt --all"
        },
        {
          "name": "NOTICE",
          "type": "blob",
          "size": 0.0947265625,
          "content": "AWS Lambda Rust Runtime\nCopyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved. \n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 17.51953125,
          "content": "# Rust Runtime for AWS Lambda\n\n[![Build Status](https://github.com/awslabs/aws-lambda-rust-runtime/workflows/Rust/badge.svg)](https://github.com/awslabs/aws-lambda-rust-runtime/actions)\n\nThis package makes it easy to run AWS Lambda Functions written in Rust. This workspace includes multiple crates:\n\n- [![Docs](https://docs.rs/lambda_runtime/badge.svg)](https://docs.rs/lambda_runtime) **`lambda-runtime`** is a library that provides a Lambda runtime for applications written in Rust.\n- [![Docs](https://docs.rs/lambda_http/badge.svg)](https://docs.rs/lambda_http) **`lambda-http`** is a library that makes it easy to write API Gateway proxy event focused Lambda functions in Rust.\n- [![Docs](https://docs.rs/lambda-extension/badge.svg)](https://docs.rs/lambda-extension) **`lambda-extension`** is a library that makes it easy to write Lambda Runtime Extensions in Rust.\n- [![Docs](https://docs.rs/aws_lambda_events/badge.svg)](https://docs.rs/aws_lambda_events) **`lambda-events`** is a library with strongly-typed Lambda event structs in Rust.\n- [![Docs](https://docs.rs/lambda_runtime_api_client/badge.svg)](https://docs.rs/lambda_runtime_api_client) **`lambda-runtime-api-client`** is a shared library between the lambda runtime and lambda extension libraries that includes a common API client to talk with the AWS Lambda Runtime API.\n\nThe Rust runtime client is an experimental package. It is subject to change and intended only for evaluation purposes.\n\n## Getting started\n\nThe easiest way to start writing Lambda functions with Rust is by using [Cargo Lambda](https://www.cargo-lambda.info/), a related project. Cargo Lambda is a Cargo plugin, or subcommand, that provides several commands to help you in your journey with Rust on AWS Lambda.\n\nThe preferred way to install Cargo Lambda is by using a package manager.\n\n1- Use Homebrew on [MacOS](https://brew.sh/):\n\n```bash\nbrew tap cargo-lambda/cargo-lambda\nbrew install cargo-lambda\n```\n\n2- Use [Scoop](https://scoop.sh/) on Windows:\n\n```bash\nscoop bucket add cargo-lambda https://github.com/cargo-lambda/scoop-cargo-lambda\nscoop install cargo-lambda/cargo-lambda\n```\n\nOr PiP on any system with Python 3 installed:\n\n```bash\npip3 install cargo-lambda\n```\n\nSee other installation options in [the Cargo Lambda documentation](https://www.cargo-lambda.info/guide/installation.html).\n\n## Your first function\n\nTo create your first function, run Cargo Lambda with the [subcommand `new`](https://www.cargo-lambda.info/commands/new.html). This command will generate a Rust package with the initial source code for your function:\n\n```bash\ncargo lambda new YOUR_FUNCTION_NAME\n```\n\n### Example function\n\nIf you'd like to manually create your first function, the code below shows you a simple function that receives an event with a `firstName` field and returns a message to the caller.\n\n```rust,no_run\nuse lambda_runtime::{service_fn, LambdaEvent, Error};\nuse serde_json::{json, Value};\n\n#[tokio::main]\nasync fn main() -> Result<(), Error> {\n    let func = service_fn(func);\n    lambda_runtime::run(func).await?;\n    Ok(())\n}\n\nasync fn func(event: LambdaEvent<Value>) -> Result<Value, Error> {\n    let (event, _context) = event.into_parts();\n    let first_name = event[\"firstName\"].as_str().unwrap_or(\"world\");\n\n    Ok(json!({ \"message\": format!(\"Hello, {}!\", first_name) }))\n}\n```\n\n## Understanding Lambda errors\n\nwhen a function invocation fails, AWS Lambda expects you to return an object that can be serialized into JSON structure with the error information. This structure is represented in the following example:\n\n```json\n{\n  \"error_type\": \"the type of error raised\",\n  \"error_message\": \"a string description of the error\"\n}\n```\n\nThe Rust Runtime for Lambda uses a struct called `Diagnostic` to represent function errors internally. The runtime implements the converstion of several general errors types, like `std::error::Error`, into `Diagnostic`. For these general implementations, the `error_type` is the name of the value type returned by your function. For example, if your function returns `lambda_runtime::Error`, the `error_type` will be something like `alloc::boxed::Box<dyn core::error::Error + core::marker::Send + core::marker::Sync>`, which is not very descriptive.\n\n### Implement your own Diagnostic\n\nTo get more descriptive `error_type` fields, you can implement `From` for your error type. That gives you full control on what the `error_type` is:\n\n```rust\nuse lambda_runtime::{Diagnostic, Error, LambdaEvent};\n\n#[derive(Debug)]\nstruct ErrorResponse(&'static str);\n\nimpl From<ErrorResponse> for Diagnostic {\n    fn from(error: ErrorResponse) -> Diagnostic {\n        Diagnostic {\n            error_type: \"MyErrorType\".into(),\n            error_message: error.0.to_string(),\n        }\n    }\n}\n\nasync fn handler(_event: LambdaEvent<()>) -> Result<(), ErrorResponse> {\n  Err(ErrorResponse(\"this is an error response\"))\n}\n```\n\nWe recommend you to use the [thiserror crate](https://crates.io/crates/thiserror) to declare your errors. You can see an example on how to integrate `thiserror` with the Runtime's diagnostics in our [example repository](https://github.com/awslabs/aws-lambda-rust-runtime/tree/main/examples/basic-error-thiserror)\n\n### Anyhow, Eyre, and Miette\n\nPopular error crates like Anyhow, Eyre, and Miette provide their own error types that encapsulate other errors. There is no direct transformation of those errors into `Diagnostic`, but we provide feature flags for each one of those crates to help you integrate them with your Lambda functions.\n\nIf you enable the features `anyhow`, `eyre`, or `miette` in the `lambda_runtime` dependency of your package. The error types provided by those crates can have blanket transformations into `Diagnostic`. These features expose an `From<T> for Diagnostic` implementation that transforms those error types into a `Diagnostic`. This is an example that transforms an `anyhow::Error` into a `Diagnostic`:\n\n```rust\nuse lambda_runtime::{Diagnostic, LambdaEvent};\n\nasync fn handler(_event: LambdaEvent<Request>) -> Result<(), Diagnostic> {\n  Err(anyhow::anyhow!(\"this is an error\").into())\n}\n```\n\nYou can see more examples on how to use these error crates in our [example repository](https://github.com/awslabs/aws-lambda-rust-runtime/tree/main/examples/basic-error-error-crates-integration). \n\n## Building and deploying your Lambda functions\n\nIf you already have Cargo Lambda installed in your machine, run the next command to build your function:\n\n```bash\ncargo lambda build --release\n```\n\nThere are other ways of building your function: manually with the AWS CLI, with [AWS SAM](https://github.com/aws/aws-sam-cli), and with the [Serverless framework](https://serverless.com/framework/).\n\n### 1. Cross-compiling your Lambda functions\n\nBy default, Cargo Lambda builds your functions to run on x86_64 architectures. If you'd like to use a different architecture, use the options described below.\n\n#### 1.1. Build your Lambda functions\n\n__Amazon Linux 2023__\n\nWe recommend you to use the Amazon Linux 2023  (such as `provided.al2023`) because it includes a newer version of GLIBC, which many Rust programs depend on. To build your Lambda functions for Amazon Linux 2023 runtimes, run:\n\n```bash\ncargo lambda build --release --arm64\n```\n\n### 2. Deploying the binary to AWS Lambda\n\nFor [a custom runtime](https://docs.aws.amazon.com/lambda/latest/dg/runtimes-custom.html), AWS Lambda looks for an executable called `bootstrap` in the deployment package zip. Rename the generated executable to `bootstrap` and add it to a zip archive.\n\nYou can find the `bootstrap` binary for your function under the `target/lambda` directory.\n\n#### 2.1. Deploying with Cargo Lambda\n\nOnce you've built your code with one of the options described earlier, use the `deploy` subcommand to upload your function to AWS:\n\n```bash\ncargo lambda deploy\n```\n\n> **Warning**\n> Make sure to replace the execution role with an existing role in your account!\n\nThis command will create a Lambda function with the same name of your rust package. You can change the name\nof the function by adding the argument at the end of the command:\n\n```bash\ncargo lambda deploy my-first-lambda-function\n```\n\n> **Note**\n> See other deployment options in [the Cargo Lambda documentation](https://www.cargo-lambda.info/commands/deploy.html).\n\nYou can test the function with the [invoke subcommand](https://www.cargo-lambda.info/commands/invoke.html):\n\n```bash\ncargo lambda invoke --remote \\\n  --data-ascii '{\"command\": \"hi\"}' \\\n  --output-format json \\\n  my-first-lambda-function\n```\n\n> **Note**\n> CLI commands in the examples use Linux/MacOS syntax. For different shells like Windows CMD or PowerShell, modify syntax when using nested quotation marks like `'{\"command\": \"hi\"}'`. Escaping with a backslash may be necessary. See [AWS CLI Reference](https://docs.amazonaws.cn/en_us/cli/latest/userguide/cli-usage-parameters-quoting-strings.html#cli-usage-parameters-quoting-strings-containing) for more information.\n\n#### 2.2. Deploying with the AWS CLI\n\nYou can also use the AWS CLI to deploy your Rust functions. First, you will need to create a ZIP archive of your  function. Cargo Lambda can do that for you automatically when it builds your binary if you add the `output-format` flag:\n\n```bash\ncargo lambda build --release --arm64 --output-format zip\n```\n\nYou can find the resulting zip file in `target/lambda/YOUR_PACKAGE/bootstrap.zip`. Use that file path to deploy your function with the [AWS CLI](https://aws.amazon.com/cli/):\n\n```bash\n$ aws lambda create-function --function-name rustTest \\\n  --handler bootstrap \\\n  --zip-file fileb://./target/lambda/basic/bootstrap.zip \\\n  --runtime provided.al2023 \\ # Change this to provided.al2 if you would like to use Amazon Linux 2\n  --role arn:aws:iam::XXXXXXXXXXXXX:role/your_lambda_execution_role \\\n  --environment Variables={RUST_BACKTRACE=1} \\\n  --tracing-config Mode=Active\n```\n\n> **Warning**\n> Make sure to replace the execution role with an existing role in your account!\n\nYou can now test the function using the AWS CLI or the AWS Lambda console\n\n```bash\n$ aws lambda invoke\n  --cli-binary-format raw-in-base64-out \\\n  --function-name rustTest \\\n  --payload '{\"command\": \"Say Hi!\"}' \\\n  output.json\n$ cat output.json  # Prints: {\"msg\": \"Command Say Hi! executed.\"}\n```\n\n> **Note** \n> `--cli-binary-format raw-in-base64-out` is a required argument when using the AWS CLI version 2. [More Information](https://docs.aws.amazon.com/cli/latest/userguide/cliv2-migration.html#cliv2-migration-binaryparam)\n\n#### 2.3. AWS Serverless Application Model (SAM)\n\nYou can use Lambda functions built in Rust with the [AWS Serverless Application Model (SAM)](https://aws.amazon.com/serverless/sam/). To do so, you will need to install the [AWS SAM CLI](https://github.com/aws/aws-sam-cli), which will help you package and deploy your Lambda functions in your AWS account.\n\nYou will need to create a `template.yaml` file containing your desired infrastructure in YAML. Here is an example with a single Lambda function:\n\n```yaml\nAWSTemplateFormatVersion: '2010-09-09'\nTransform: AWS::Serverless-2016-10-31\n\nResources:\n  HelloWorldFunction:\n    Type: AWS::Serverless::Function\n    Properties:\n      MemorySize: 128\n      Architectures: [\"arm64\"]\n      Handler: bootstrap\n      Runtime: provided.al2023\n      Timeout: 5\n      CodeUri: target/lambda/basic/\n\nOutputs:\n  FunctionName:\n    Value: !Ref HelloWorldFunction\n    Description: Name of the Lambda function\n```\n\nYou can then deploy your Lambda function using the AWS SAM CLI:\n\n```bash\nsam deploy --guided\n```\n\nAt the end, `sam` will output the actual Lambda function name. You can use this name to invoke your function:\n\n```bash\n$ aws lambda invoke\n  --cli-binary-format raw-in-base64-out \\\n  --function-name HelloWorldFunction-XXXXXXXX \\ # Replace with the actual function name\n  --payload '{\"command\": \"Say Hi!\"}' \\\n  output.json\n$ cat output.json  # Prints: {\"msg\": \"Command Say Hi! executed.\"}\n```\n\n## Local development and testing\n\n### Testing your code with unit and integration tests\n\nAWS Lambda events are plain structures deserialized from JSON objects.\nIf your function handler uses the standard runtime, you can use `serde` to deserialize\nyour text fixtures into the structures, and call your handler directly:\n\n```rust,no_run\n#[test]\nfn test_my_lambda_handler() {\n  let input = serde_json::from_str(\"{\\\"command\\\": \\\"Say Hi!\\\"}\").expect(\"failed to parse event\");\n  let context = lambda_runtime::Context::default();\n\n  let event = lambda_runtime::LambdaEvent::new(input, context);\n\n  my_lambda_handler(event).await.expect(\"failed to handle event\");\n}\n```\n\nIf you're using `lambda_http` to receive HTTP events, you can also create `http_lambda::Request`\nstructures from plain text fixtures:\n\n```rust,no_run\n#[test]\nfn test_my_lambda_handler() {\n  let input = include_str!(\"apigw_proxy_request.json\");\n\n  let request = lambda_http::request::from_str(input)\n    .expect(\"failed to create request\");\n\n  let response = my_lambda_handler(request).await.expect(\"failed to handle request\");\n}\n```\n\n### Local dev server with Cargo Lambda\n\n[Cargo Lambda](https://www.cargo-lambda.info) provides a local server that emulates the AWS Lambda control plane. This server works on Windows, Linux, and MacOS. In the root of your Lambda project. You can run the following subcommand to compile your function(s) and start the server.\n\n```bash\ncargo lambda watch\n```\n\nNow you can use the `cargo lambda invoke` to send requests to your function. For example:\n\n```bash\ncargo lambda invoke <lambda-function-name> --data-ascii '{ \"command\": \"hi\" }'\n```\n\nRunning the command on a HTTP function (Function URL, API Gateway, etc) will require you to use the appropriate scheme. You can find examples of these schemes [here](https://github.com/awslabs/aws-lambda-rust-runtime/tree/main/lambda-http/tests/data). Otherwise, you will be presented with the following error.\n\n```rust,no_run\nError: serde_json::error::Error\n\n  × data did not match any variant of untagged enum LambdaRequest\n```\n\nAn simpler alternative is to cURL the following endpoint based on the address and port you defined. For example:\n\n```bash\ncurl -v -X POST \\\n  'http://127.0.0.1:9000/lambda-url/<lambda-function-name>/' \\\n  -H 'content-type: application/json' \\\n  -d '{ \"command\": \"hi\" }'\n```\n\n> **Warning** \n> Do not remove the `content-type` header. It is necessary to instruct the function how to deserialize the request body.\n\nYou can read more about how [cargo lambda watch](https://www.cargo-lambda.info/commands/watch.html) and [cargo lambda invoke](https://www.cargo-lambda.info/commands/invoke.html) work on the project's [documentation page](https://www.cargo-lambda.info).\n\n### Lambda Debug Proxy\n\nLambdas can be run and debugged locally using a special [Lambda debug proxy](https://github.com/rimutaka/lambda-debug-proxy) (a non-AWS repo maintained by @rimutaka), which is a Lambda function that forwards incoming requests to one AWS SQS queue and reads responses from another queue. A local proxy running on your development computer reads the queue, calls your Lambda locally and sends back the response. This approach allows debugging of Lambda functions locally while being part of your AWS workflow. The Lambda handler code does not need to be modified between the local and AWS versions.\n\n## Tracing and Logging\n\nThe Rust Runtime for Lambda integrates with the [Tracing](https://tracing.rs) libraries to provide tracing and logging.\n\nBy default, the runtime emits `tracing` events that you can collect via `tracing-subscriber`. It also enabled a feature called `tracing` that exposes a default subscriber with sensible options to send logging information to AWS CloudWatch. Follow the next example that shows how to enable the default subscriber:\n\n```rust\nuse lambda_runtime::{run, service_fn, tracing, Error};\n\n#[tokio::main]\nasync fn main() -> Result<(), Error> {\n    tracing::init_default_subscriber();\n    run(service_fn(|event| tracing::info!(?event))).await\n}\n```\n\nThe subscriber uses `RUST_LOG` environment variable to determine the log level for your function. It also uses [Lambda's advanced logging controls](https://aws.amazon.com/blogs/compute/introducing-advanced-logging-controls-for-aws-lambda-functions/), if configured.\n\nBy default, the log level to emit events is `INFO`. Log at `TRACE` level for more detail, including a dump of the raw payload.\n\n## AWS event objects\n\nThis project includes Lambda event struct definitions, [`aws_lambda_events`](https://crates.io/crates/aws_lambda_events). This crate can be leveraged to provide strongly-typed Lambda event structs. You can create your own custom event objects and their corresponding structs as well.\n\n### Custom event objects\n\nTo serialize and deserialize events and responses, we suggest using the [`serde`](https://github.com/serde-rs/serde) library. To receive custom events, annotate your structure with Serde's macros:\n\n```rust,no_run\nuse serde::{Serialize, Deserialize};\nuse serde_json::json;\nuse std::error::Error;\n\n#[derive(Serialize, Deserialize)]\npub struct NewIceCreamEvent {\n  pub flavors: Vec<String>,\n}\n\n#[derive(Serialize, Deserialize)]\npub struct NewIceCreamResponse {\n  pub flavors_added_count: usize,\n}\n\nfn main() -> Result<(), Box<Error>> {\n    let flavors = json!({\n      \"flavors\": [\n        \"Nocciola\",\n        \"抹茶\",\n        \"आम\"\n      ]\n    });\n\n    let event: NewIceCreamEvent = serde_json::from_value(flavors)?;\n    let response = NewIceCreamResponse {\n        flavors_added_count: event.flavors.len(),\n    };\n    serde_json::to_string(&response)?;\n\n    Ok(())\n}\n```\n\n## Supported Rust Versions (MSRV)\n\nThe AWS Lambda Rust Runtime requires a minimum of Rust 1.71.1, and is not guaranteed to build on compiler versions earlier than that.\n\n## Security\n\nSee [CONTRIBUTING](CONTRIBUTING.md#security-issue-notifications) for more information.\n\n## License\n\nThis project is licensed under the Apache-2.0 License.\n"
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "lambda-events",
          "type": "tree",
          "content": null
        },
        {
          "name": "lambda-extension",
          "type": "tree",
          "content": null
        },
        {
          "name": "lambda-http",
          "type": "tree",
          "content": null
        },
        {
          "name": "lambda-integration-tests",
          "type": "tree",
          "content": null
        },
        {
          "name": "lambda-runtime-api-client",
          "type": "tree",
          "content": null
        },
        {
          "name": "lambda-runtime",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}