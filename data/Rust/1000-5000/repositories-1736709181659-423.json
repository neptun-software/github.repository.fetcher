{
  "metadata": {
    "timestamp": 1736709181659,
    "page": 423,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjQzMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "capnproto/capnproto-rust",
      "stars": 2112,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.1005859375,
          "content": "# Compiled files\n*.o\n*.so\n*.rlib\n*.dll\n\n# Executables\n*.exe\n\n# Generated by Cargo\nCargo.lock\n/target/\n\n"
        },
        {
          "name": "Cargo.toml",
          "type": "blob",
          "size": 0.75,
          "content": "[workspace.package]\nrust-version = \"1.65.0\"\n\n[workspace]\n\nresolver = \"2\"\n\nmembers = [\n    # main crates, published on crates.io\n    \"capnp\",\n    \"capnpc\",\n    \"capnp-futures\",\n    \"capnp-rpc\",\n\n    # testing and examples\n    \"async-byte-channel\",\n    \"benchmark\",\n    \"capnpc/test\",\n    \"capnpc/test/external-crate\",\n    \"capnpc/test-edition-2015\",\n    \"capnpc/test-edition-2018\",\n    \"capnpc/test-edition-2021\",\n    \"capnp-futures/test\",\n    \"capnp-rpc/examples/hello-world\",\n    \"capnp-rpc/examples/calculator\",\n    \"capnp-rpc/examples/pubsub\",\n    \"capnp-rpc/examples/streaming\",\n    \"capnp-rpc/test\",\n    \"example/addressbook\",\n    \"example/addressbook_send\",\n    \"example/fill_random_values\",\n]\ndefault-members = [\n    \"capnp\",\n    \"capnpc\",\n]\n\n[workspace.lints]\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.072265625,
          "content": "Copyright (c) 2013-2018 Sandstorm Development Group, Inc. and contributors\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE."
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 4.427734375,
          "content": "# Cap'n Proto for Rust\n\n[![Build Status](https://github.com/capnproto/capnproto-rust/workflows/CI/badge.svg?branch=master&event=push)](https://github.com/capnproto/capnproto-rust/actions?query=workflow%3ACI)\n\n[documentation](https://docs.rs/capnp/)\n\nFor the latest news,\nsee the [capnproto-rust blog](https://dwrensha.github.io/capnproto-rust).\n\n## Introduction\n\n[Cap'n Proto](https://capnproto.org) is a type system for distributed systems.\n\nWith Cap'n Proto, you describe your data and interfaces\nin a [schema file](https://capnproto.org/language.html), like this:\n\n```capnp\n@0x986b3393db1396c9;\n\nstruct Point {\n    x @0 :Float32;\n    y @1 :Float32;\n}\n\ninterface PointTracker {\n    addPoint @0 (p :Point) -> (totalPoints :UInt64);\n}\n```\n\nYou can then use the [capnp tool](https://capnproto.org/capnp-tool.html#compiling-schemas)\nto generate code in a [variety of programming languages](https://capnproto.org/otherlang.html).\nThe generated code lets you produce and consume values of the\ntypes you've defined in your schema.\n\nValues are encoded in [a format](https://capnproto.org/encoding.html) that\nis suitable not only for transmission over a network and persistence to disk,\nbut also for zero-copy in-memory traversal.\nThat is, you can completely skip serialization and deserialization!\nIt's in this sense that Cap'n Proto is\n[\"infinity times faster\"](https://capnproto.org/news/2013-04-01-announcing-capn-proto.html)\nthan alternatives like Protocol Buffers.\n\nIn Rust, the generated code for the example above includes\na `point::Reader<'a>` struct with `get_x()` and `get_y()` methods,\nand a `point::Builder<'a>` struct with `set_x()` and `set_y()` methods.\nThe lifetime parameter `'a` is a formal reminder\nthat `point::Reader<'a>` and `point::Builder<'a>`\ncontain borrowed references to the raw buffers that contain the encoded messages.\nThose underlying buffers are never actually copied into separate data structures.\n\nThe generated code for the example above also includes\na `point_tracker::Server` trait with an `add_point()` method,\nand a `point_tracker::Client` struct with an `add_point_request()` method.\nThe former can be implemented to create a network-accessible object,\nand the latter can be used to invoke a possibly-remote instance of a `PointTracker`.\n\n## Features\n\n- [tagged unions](https://capnproto.org/language.html#unions)\n- [generics](https://capnproto.org/language.html#generic-types)\n- [protocol evolvability](https://capnproto.org/language.html#evolving-your-protocol)\n- [canonicalization](https://capnproto.org/encoding.html#canonicalization)\n- [`Result`-based error handling](https://dwrensha.github.io/capnproto-rust/2015/03/21/error-handling-revisited.html)\n- [`no_std` support](https://dwrensha.github.io/capnproto-rust/2020/06/06/no-std-support.html)\n- [no-alloc support](https://dwrensha.github.io/capnproto-rust/2023/09/04/0.18-release.html)\n- [reflection](https://dwrensha.github.io/capnproto-rust/2023/05/08/run-time-reflection.html)\n\n## Crates\n\n|  |  |  |\n| ----- | ---- | ---- |\n| [capnp](/capnp) | Runtime library for dealing with Cap'n Proto messages. | [![crates.io](https://img.shields.io/crates/v/capnp.svg)](https://crates.io/crates/capnp) |\n| [capnpc](/capnpc) | Rust code generator [plugin](https://capnproto.org/otherlang.html#how-to-write-compiler-plugins), including support for hooking into a `build.rs` file in a `cargo` build. | [![crates.io](https://img.shields.io/crates/v/capnpc.svg)](https://crates.io/crates/capnpc) |\n| [capnp-futures](/capnp-futures) | Support for asynchronous reading and writing of Cap'n Proto messages. | [![crates.io](https://img.shields.io/crates/v/capnp-futures.svg)](https://crates.io/crates/capnp-futures) |\n| [capnp-rpc](/capnp-rpc) | Object-capability remote procedure call system with [\"level 1\"](https://capnproto.org/rpc.html#protocol-features) features. | [![crates.io](https://img.shields.io/crates/v/capnp-rpc.svg)](https://crates.io/crates/capnp-rpc) |\n\n## Examples\n\n[addressbook serialization](/example/addressbook),\n[RPC](/capnp-rpc/examples)\n\n## Who is using capnproto-rust?\n\n- Sandstorm's [raw API example app](https://github.com/dwrensha/sandstorm-rawapi-example-rust) and\n  [collections app](https://github.com/sandstorm-io/collections-app)\n- [juice](https://github.com/spearow/juice)\n- [fractalide](https://github.com/fractalide/fractalide)\n- [combustion-engine](https://github.com/combustion-engine/combustion/tree/master/combustion_protocols)\n\n## Unimplemented / Future Work\n\n- [orphans](https://capnproto.org/cxx.html#orphans)\n\n"
        },
        {
          "name": "async-byte-channel",
          "type": "tree",
          "content": null
        },
        {
          "name": "benchmark",
          "type": "tree",
          "content": null
        },
        {
          "name": "blog",
          "type": "tree",
          "content": null
        },
        {
          "name": "capnp-futures",
          "type": "tree",
          "content": null
        },
        {
          "name": "capnp-rpc",
          "type": "tree",
          "content": null
        },
        {
          "name": "capnp",
          "type": "tree",
          "content": null
        },
        {
          "name": "capnpc",
          "type": "tree",
          "content": null
        },
        {
          "name": "codecov.yml",
          "type": "blob",
          "size": 0.1982421875,
          "content": "coverage:\n  status:\n    project:\n      default:\n        threshold: 5% # don't annoy folks with false positives\n    patch:\n      default:\n        informational: true\nignore:\n  - \"benchmark\"\n  - \"example\"\n"
        },
        {
          "name": "example",
          "type": "tree",
          "content": null
        },
        {
          "name": "regenerate-capnp-schema-code.sh",
          "type": "blob",
          "size": 0.203125,
          "content": "#! /bin/sh\n\nset -e\nset -x\n\ncargo build -p capnpc\ncapnp compile -otarget/debug/capnpc-rust-bootstrap:capnp/src capnp/schema.capnp --src-prefix capnp/ -I. --no-standard-import\nrustfmt capnp/src/schema_capnp.rs\n"
        },
        {
          "name": "regenerate-rpc-schema-code.sh",
          "type": "blob",
          "size": 0.287109375,
          "content": "#! /bin/sh\n\nset -e\nset -x\n\ncargo build -p capnpc\ncapnp compile -otarget/debug/capnpc-rust:capnp-rpc/src capnp-rpc/schema/rpc.capnp capnp-rpc/schema/rpc-twoparty.capnp --src-prefix capnp-rpc/schema/ -I. --no-standard-import\nrustfmt capnp-rpc/src/rpc_capnp.rs capnp-rpc/src/rpc_twoparty_capnp.rs\n"
        }
      ]
    }
  ]
}