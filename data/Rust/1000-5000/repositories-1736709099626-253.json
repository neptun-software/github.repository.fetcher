{
  "metadata": {
    "timestamp": 1736709099626,
    "page": 253,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjI2MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "rust-itertools/itertools",
      "stars": 2816,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".codecov.yml",
          "type": "blob",
          "size": 0.1806640625,
          "content": "coverage:\n  status:\n    project:\n      default:\n        target: auto\n        # Allow a tiny drop of overall project coverage in PR to reduce spurious failures.\n        threshold: 0.25%\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.0185546875,
          "content": "/target\nCargo.lock\n"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 27.6962890625,
          "content": "# Changelog\n\n## 0.14.0\n\n### Breaking\n- Increased MSRV to 1.63.0 (#960)\n- Removed generic parameter from `cons_tuples` (#988)\n\n### Added\n- Added `array_combinations` (#991)\n- Added `k_smallest_relaxed` and variants (#925)\n- Added `next_array` and `collect_array` (#560)\n- Implemented `DoubleEndedIterator` for `FilterOk` (#948)\n- Implemented `DoubleEndedIterator` for `FilterMapOk` (#950)\n\n### Changed\n- Allow `Q: ?Sized` in `Itertools::contains` (#971)\n- Improved hygiene of `chain!` (#943)\n- Improved `into_group_map_by` documentation (#1000)\n- Improved `tree_reduce` documentation (#955)\n- Improved discoverability of `merge_join_by` (#966)\n- Improved discoverability of `take_while_inclusive` (#972)\n- Improved documentation of `find_or_last` and `find_or_first` (#984)\n- Prevented exponentially large type sizes in `tuple_combinations` (#945)\n- Added `track_caller` attr for `asser_equal` (#976)\n\n### Notable Internal Changes\n- Fixed clippy lints (#956, #987, #1008)\n- Addressed warnings within doctests (#964)\n- CI: Run most tests with miri (#961)\n- CI: Speed up \"cargo-semver-checks\" action (#938)\n- Changed an instance of `default_features` in `Cargo.toml` to `default-features` (#985)\n\n## 0.13.0\n\n### Breaking\n- Removed implementation of `DoubleEndedIterator` for `ConsTuples` (#853)\n- Made `MultiProduct` fused and fixed on an empty iterator (#835, #834)\n- Changed `iproduct!` to return tuples for maxi one iterator too (#870)\n- Changed `PutBack::put_back` to return the old value (#880)\n- Removed deprecated `repeat_call, Itertools::{foreach, step, map_results, fold_results}` (#878)\n- Removed `TakeWhileInclusive::new` (#912)\n\n### Added\n- Added `Itertools::{smallest_by, smallest_by_key, largest, largest_by, largest_by_key}` (#654, #885)\n- Added `Itertools::tail` (#899)\n- Implemented `DoubleEndedIterator` for `ProcessResults` (#910)\n- Implemented `Debug` for `FormatWith` (#931)\n- Added `Itertools::get` (#891)\n\n### Changed\n- Deprecated `Itertools::group_by` (renamed `chunk_by`) (#866, #879)\n- Deprecated `unfold` (use `std::iter::from_fn` instead) (#871)\n- Optimized `GroupingMapBy` (#873, #876)\n- Relaxed `Fn` bounds to `FnMut` in `diff_with, Itertools::into_group_map_by` (#886)\n- Relaxed `Debug/Clone` bounds for `MapInto` (#889)\n- Documented the `use_alloc` feature (#887)\n- Optimized `Itertools::set_from` (#888)\n- Removed badges in `README.md` (#890)\n- Added \"no-std\" categories in `Cargo.toml` (#894)\n- Fixed `Itertools::k_smallest` on short unfused iterators (#900)\n- Deprecated `Itertools::tree_fold1` (renamed `tree_reduce`) (#895)\n- Deprecated `GroupingMap::fold_first` (renamed `reduce`) (#902)\n- Fixed `Itertools::k_smallest(0)` to consume the iterator, optimized `Itertools::k_smallest(1)` (#909)\n- Specialized `Combinations::nth` (#914)\n- Specialized `MergeBy::fold` (#920)\n- Specialized `CombinationsWithReplacement::nth` (#923)\n- Specialized `FlattenOk::{fold, rfold}` (#927)\n- Specialized `Powerset::nth` (#924)\n- Documentation fixes (#882, #936)\n- Fixed `assert_equal` for iterators longer than `i32::MAX` (#932)\n- Updated the `must_use` message of non-lazy `KMergeBy` and `TupleCombinations` (#939)\n\n### Notable Internal Changes\n- Tested iterator laziness (#792)\n- Created `CONTRIBUTING.md` (#767)\n\n## 0.12.1\n\n### Added\n- Documented iteration order guarantee for `Itertools::[tuple_]combinations` (#822)\n- Documented possible panic in `iterate` (#842)\n- Implemented `Clone` and `Debug` for `Diff` (#845)\n- Implemented `Debug` for `WithPosition` (#859)\n- Implemented `Eq` for `MinMaxResult` (#838)\n- Implemented `From<EitherOrBoth<A, B>>` for `Option<Either<A, B>>` (#843)\n- Implemented `PeekingNext` for `RepeatN` (#855)\n\n### Changed\n- Made `CoalesceBy` lazy (#801)\n- Optimized `Filter[Map]Ok::next`, `Itertools::partition`, `Unique[By]::next[_back]` (#818)\n- Optimized `Itertools::find_position` (#837)\n- Optimized `Positions::next[_back]` (#816)\n- Optimized `ZipLongest::fold` (#854)\n- Relaxed `Debug` bounds for `GroupingMapBy` (#860)\n- Specialized `ExactlyOneError::fold` (#826)\n- Specialized `Interleave[Shortest]::fold` (#849)\n- Specialized `MultiPeek::fold` (#820)\n- Specialized `PadUsing::[r]fold` (#825)\n- Specialized `PeekNth::fold` (#824)\n- Specialized `Positions::[r]fold` (#813)\n- Specialized `PutBackN::fold` (#823)\n- Specialized `RepeatN::[r]fold` (#821)\n- Specialized `TakeWhileInclusive::fold` (#851)\n- Specialized `ZipLongest::rfold` (#848)\n\n### Notable Internal Changes\n- Added test coverage in CI (#847, #856)\n- Added semver check in CI (#784)\n- Enforced `clippy` in CI (#740)\n- Enforced `rustdoc` in CI (#840)\n- Improved specialization tests (#807)\n- More specialization benchmarks (#806)\n\n## 0.12.0\n\n### Breaking\n- Made `take_while_inclusive` consume iterator by value (#709)\n- Added `Clone` bound to `Unique` (#777)\n\n### Added\n- Added `Itertools::try_len` (#723)\n- Added free function `sort_unstable` (#796)\n- Added `GroupMap::fold_with` (#778, #785)\n- Added `PeekNth::{peek_mut, peek_nth_mut}` (#716)\n- Added `PeekNth::{next_if, next_if_eq}` (#734)\n- Added conversion into `(Option<A>,Option<B>)` to `EitherOrBoth` (#713)\n- Added conversion from `Either<A, B>` to `EitherOrBoth<A, B>` (#715)\n- Implemented `ExactSizeIterator` for `Tuples` (#761)\n- Implemented `ExactSizeIterator` for `(Circular)TupleWindows` (#752)\n- Made `EitherOrBoth<T>` a shorthand for `EitherOrBoth<T, T>` (#719)\n\n### Changed\n- Added missing `#[must_use]` annotations on iterator adaptors (#794)\n- Made `Combinations` lazy (#795)\n- Made `Intersperse(With)` lazy (#797)\n- Made `Permutations` lazy (#793)\n- Made `Product` lazy (#800)\n- Made `TupleWindows` lazy (#602)\n- Specialized `Combinations::{count, size_hint}` (#729)\n- Specialized `CombinationsWithReplacement::{count, size_hint}` (#737)\n- Specialized `Powerset::fold` (#765)\n- Specialized `Powerset::count` (#735)\n- Specialized `TupleCombinations::{count, size_hint}` (#763)\n- Specialized `TupleCombinations::fold` (#775)\n- Specialized `WhileSome::fold` (#780)\n- Specialized `WithPosition::fold` (#772)\n- Specialized `ZipLongest::fold` (#774)\n- Changed `{min, max}_set*` operations require `alloc` feature, instead of `std` (#760)\n- Improved documentation of `tree_fold1` (#787)\n- Improved documentation of `permutations` (#724)\n- Fixed typo in documentation of `multiunzip` (#770)\n\n### Notable Internal Changes\n- Improved specialization tests (#799, #786, #782)\n- Simplified implementation of `Permutations` (#739, #748, #790)\n- Combined `Merge`/`MergeBy`/`MergeJoinBy` implementations (#736)\n- Simplified `Permutations::size_hint` (#739)\n- Fix wrapping arithmetic in benchmarks (#770)\n- Enforced `rustfmt` in CI (#751)\n- Disallowed compile warnings in CI (#720)\n- Used `cargo hack` to check MSRV (#754)\n\n## 0.11.0\n\n### Breaking\n- Make `Itertools::merge_join_by` also accept functions returning bool (#704)\n- Implement `PeekingNext` transitively over mutable references (#643)\n- Change `with_position` to yield `(Position, Item)` instead of `Position<Item>` (#699)\n\n### Added\n- Add `Itertools::take_while_inclusive` (#616)\n- Implement `PeekingNext` for `PeekingTakeWhile` (#644)\n- Add `EitherOrBoth::{just_left, just_right, into_left, into_right, as_deref, as_deref_mut, left_or_insert, right_or_insert, left_or_insert_with, right_or_insert_with, insert_left, insert_right, insert_both}` (#629)\n- Implement `Clone` for `CircularTupleWindows` (#686)\n- Implement `Clone` for `Chunks` (#683)\n- Add `Itertools::process_results` (#680)\n\n### Changed\n- Use `Cell` instead of `RefCell` in `Format` and `FormatWith` (#608)\n- CI tweaks (#674, #675)\n- Document and test the difference between stable and unstable sorts (#653)\n- Fix documentation error on `Itertools::max_set_by_key` (#692)\n- Move MSRV metadata to `Cargo.toml` (#672)\n- Implement `equal` with `Iterator::eq` (#591)\n\n## 0.10.5\n  - Maintenance\n\n## 0.10.4\n  - Add `EitherOrBoth::or` and `EitherOrBoth::or_else` (#593)\n  - Add `min_set`, `max_set` et al. (#613, #323)\n  - Use `either/use_std` (#628)\n  - Documentation fixes (#612, #625, #632, #633, #634, #638)\n  - Code maintenance (#623, #624, #627, #630)\n\n## 0.10.3\n  - Maintenance\n\n## 0.10.2\n  - Add `Itertools::multiunzip` (#362, #565)\n  - Add `intersperse` and `intersperse_with` free functions (#555)\n  - Add `Itertools::sorted_by_cached_key` (#424, #575)\n  - Specialize `ProcessResults::fold` (#563)\n  - Fix subtraction overflow in `DuplicatesBy::size_hint` (#552)\n  - Fix specialization tests (#574)\n  - More `Debug` impls (#573)\n  - Deprecate `fold1` (use `reduce` instead) (#580)\n  - Documentation fixes (`HomogenousTuple`, `into_group_map`, `into_group_map_by`, `MultiPeek::peek`) (#543 et al.)\n\n## 0.10.1\n  - Add `Itertools::contains` (#514)\n  - Add `Itertools::counts_by` (#515)\n  - Add `Itertools::partition_result` (#511)\n  - Add `Itertools::all_unique` (#241)\n  - Add `Itertools::duplicates` and `Itertools::duplicates_by` (#502)\n  - Add `chain!` (#525)\n  - Add `Itertools::at_most_one` (#523)\n  - Add `Itertools::flatten_ok` (#527)\n  - Add `EitherOrBoth::or_default` (#583)\n  - Add `Itertools::find_or_last` and `Itertools::find_or_first` (#535)\n  - Implement `FusedIterator` for `FilterOk`, `FilterMapOk`, `InterleaveShortest`, `KMergeBy`, `MergeBy`, `PadUsing`, `Positions`, `Product` , `RcIter`, `TupleWindows`, `Unique`, `UniqueBy`,  `Update`, `WhileSome`, `Combinations`, `CombinationsWithReplacement`, `Powerset`, `RepeatN`, and `WithPosition` (#550)\n  - Implement `FusedIterator` for `Interleave`, `IntersperseWith`, and `ZipLongest` (#548)\n\n## 0.10.0\n  - **Increase minimum supported Rust version to 1.32.0**\n  - Improve macro hygiene (#507)\n  - Add `Itertools::powerset` (#335)\n  - Add `Itertools::sorted_unstable`, `Itertools::sorted_unstable_by`, and `Itertools::sorted_unstable_by_key` (#494)\n  - Implement `Error` for `ExactlyOneError` (#484)\n  - Undeprecate `Itertools::fold_while` (#476)\n  - Tuple-related adapters work for tuples of arity up to 12 (#475)\n  - `use_alloc` feature for users who have `alloc`, but not `std` (#474)\n  - Add `Itertools::k_smallest` (#473)\n  - Add `Itertools::into_grouping_map` and `GroupingMap` (#465)\n  - Add `Itertools::into_grouping_map_by` and `GroupingMapBy` (#465)\n  - Add `Itertools::counts` (#468)\n  - Add implementation of `DoubleEndedIterator` for `Unique` (#442)\n  - Add implementation of `DoubleEndedIterator` for `UniqueBy` (#442)\n  - Add implementation of `DoubleEndedIterator` for `Zip` (#346)\n  - Add `Itertools::multipeek` (#435)\n  - Add `Itertools::dedup_with_count` and `DedupWithCount` (#423)\n  - Add `Itertools::dedup_by_with_count` and `DedupByWithCount` (#423)\n  - Add `Itertools::intersperse_with` and `IntersperseWith` (#381)\n  - Add `Itertools::filter_ok` and `FilterOk` (#377)\n  - Add `Itertools::filter_map_ok` and `FilterMapOk` (#377)\n  - Deprecate `Itertools::fold_results`, use `Itertools::fold_ok` instead (#377)\n  - Deprecate `Itertools::map_results`, use `Itertools::map_ok` instead (#377)\n  - Deprecate `FoldResults`, use `FoldOk` instead (#377)\n  - Deprecate `MapResults`, use `MapOk` instead (#377)\n  - Add `Itertools::circular_tuple_windows` and `CircularTupleWindows` (#350)\n  - Add `peek_nth` and `PeekNth` (#303)\n\n## 0.9.0\n  - Fix potential overflow in `MergeJoinBy::size_hint` (#385)\n  - Add `derive(Clone)` where possible (#382)\n  - Add `try_collect` method (#394)\n  - Add `HomogeneousTuple` trait (#389)\n  - Fix `combinations(0)` and `combinations_with_replacement(0)` (#383)\n  - Don't require `ParitalEq` to the `Item` of `DedupBy` (#397)\n  - Implement missing specializations on the `PutBack` adaptor and on the `MergeJoinBy` iterator (#372)\n  - Add `position_*` methods (#412)\n  - Derive `Hash` for `EitherOrBoth` (#417)\n  - Increase minimum supported Rust version to 1.32.0\n\n## 0.8.2\n  - Use `slice::iter` instead of `into_iter` to avoid future breakage (#378, by @LukasKalbertodt)\n## 0.8.1\n  - Added a [`.exactly_one()`](https://docs.rs/itertools/0.8.1/itertools/trait.Itertools.html#method.exactly_one) iterator method that, on success, extracts the single value of an iterator ; by @Xaeroxe\n  - Added combinatory iterator adaptors:\n    - [`.permutations(k)`](https://docs.rs/itertools/0.8.1/itertools/trait.Itertools.html#method.permutations):\n\n      `[0, 1, 2].iter().permutations(2)` yields\n\n      ```rust\n      [\n        vec![0, 1],\n        vec![0, 2],\n        vec![1, 0],\n        vec![1, 2],\n        vec![2, 0],\n        vec![2, 1],\n      ]\n      ```\n\n      ; by @tobz1000\n\n    - [`.combinations_with_replacement(k)`](https://docs.rs/itertools/0.8.1/itertools/trait.Itertools.html#method.combinations_with_replacement):\n\n      `[0, 1, 2].iter().combinations_with_replacement(2)` yields\n\n      ```rust\n      [\n        vec![0, 0],\n        vec![0, 1],\n        vec![0, 2],\n        vec![1, 1],\n        vec![1, 2],\n        vec![2, 2],\n      ]\n      ```\n\n      ; by @tommilligan\n\n    - For reference, these methods join the already existing [`.combinations(k)`](https://docs.rs/itertools/0.8.1/itertools/trait.Itertools.html#method.combinations):\n\n      `[0, 1, 2].iter().combinations(2)` yields\n\n      ```rust\n      [\n        vec![0, 1],\n        vec![0, 2],\n        vec![1, 2],\n      ]\n      ```\n\n  - Improved the performance of [`.fold()`](https://docs.rs/itertools/0.8.1/itertools/trait.Itertools.html#method.fold)-based internal iteration for the [`.intersperse()`](https://docs.rs/itertools/0.8.1/itertools/trait.Itertools.html#method.intersperse) iterator ; by @jswrenn\n  - Added [`.dedup_by()`](https://docs.rs/itertools/0.8.1/itertools/trait.Itertools.html#method.dedup_by), [`.merge_by()`](https://docs.rs/itertools/0.8.1/itertools/trait.Itertools.html#method.merge_by) and [`.kmerge_by()`](https://docs.rs/itertools/0.8.1/itertools/trait.Itertools.html#method.kmerge_by) adaptors that work like [`.dedup()`](https://docs.rs/itertools/0.8.1/itertools/trait.Itertools.html#method.dedup), [`.merge()`](https://docs.rs/itertools/0.8.1/itertools/trait.Itertools.html#method.merge) and [`.kmerge()`](https://docs.rs/itertools/0.8.1/itertools/trait.Itertools.html#method.kmerge), but taking an additional custom comparison closure parameter. ; by @phimuemue\n  - Improved the performance of [`.all_equal()`](https://docs.rs/itertools/0.8.1/itertools/trait.Itertools.html#method.all_equal) ; by @fyrchik\n  - Loosened the bounds on [`.partition_map()`](https://docs.rs/itertools/0.8.1/itertools/trait.Itertools.html#method.partition_map) to take just a `FnMut` closure rather than a `Fn` closure, and made its implementation use internal iteration for better performance ; by @danielhenrymantilla\n  - Added convenience methods to [`EitherOrBoth`](https://docs.rs/itertools/0.8.1/itertools/enum.EitherOrBoth.html) elements yielded from the [`.zip_longest()`](https://docs.rs/itertools/0.8.1/itertools/trait.Itertools.html#method.zip_longest) iterator adaptor ; by @Avi-D-coder\n  - Added [`.sum1()`](https://docs.rs/itertools/0.8.1/itertools/trait.Itertools.html#method.sum1) and [`.product1()`](https://docs.rs/itertools/0.8.1/itertools/trait.Itertools.html#method.product1) iterator methods that respectively try to return the sum and the product of the elements of an iterator **when it is not empty**, otherwise they return `None` ; by @Emerentius\n## 0.8.0\n  - Added new adaptor `.map_into()` for conversions using `Into` by @vorner\n  - Improved `Itertools` docs by @JohnHeitmann\n  - The return type of `.sorted_by_by_key()` is now an iterator, not a Vec.\n  - The return type of the `izip!(x, y)` macro with exactly two arguments is now the usual `Iterator::zip`.\n  - Remove `.flatten()` in favour of std's `.flatten()`\n  - Deprecate `.foreach()` in favour of std's `.for_each()`\n  - Deprecate `.step()` in favour of std's `.step_by()`\n  - Deprecate `repeat_call` in favour of std's `repeat_with`\n  - Deprecate `.fold_while()` in favour of std's `.try_fold()`\n  - Require Rust 1.24 as minimal version.\n## 0.7.11\n  - Add convenience methods to `EitherOrBoth`, making it more similar to `Option` and `Either` by @jethrogb\n## 0.7.10\n  - No changes.\n## 0.7.9\n  - New inclusion policy: See the readme about suggesting features for std before accepting them in itertools.\n  - The `FoldWhile` type now implements `Eq` and `PartialEq` by @jturner314\n## 0.7.8\n  - Add new iterator method `.tree_fold1()` which is like `.fold1()` except items are combined in a tree structure (see its docs). By @scottmcm\n  - Add more `Debug` impls by @phimuemue: KMerge, KMergeBy, MergeJoinBy, ConsTuples, Intersperse, ProcessResults, RcIter, Tee, TupleWindows, Tee, ZipLongest, ZipEq, Zip.\n## 0.7.7\n  - Add new iterator method `.into_group_map() -> HashMap<K, Vec<V>>` which turns an iterator of `(K, V)` elements into such a hash table, where values are grouped by key. By @tobz1000\n  - Add new free function `flatten` for the `.flatten()` adaptor. **NOTE:** recent Rust nightlies have `Iterator::flatten` and thus a clash with our flatten adaptor. One workaround is to use the itertools `flatten` free function.\n## 0.7.6\n  - Add new adaptor `.multi_cartesian_product()` which is an n-ary product iterator by @tobz1000\n  - Add new method `.sorted_by_key()` by @Xion\n  - Provide simpler and faster `.count()` for `.unique()` and `.unique_by()`\n## 0.7.5\n  - `.multipeek()` now implements `PeekingNext`, by @nicopap.\n## 0.7.4\n  - Add new adaptor `.update()` by @lucasem; this adaptor is used to modify an element before passing it on in an iterator chain.\n## 0.7.3\n  - Add new method `.collect_tuple()` by @matklad; it makes a tuple out of the iterator's elements if the number of them matches **exactly**.\n  - Implement `fold` and `collect` for `.map_results()` which means it reuses the code of the standard `.map()` for these methods.\n## 0.7.2\n  - Add new adaptor `.merge_join_by` by @srijs; a heterogeneous merge join for two ordered sequences.\n## 0.7.1\n  - Iterator adaptors and iterators in itertools now use the same `must_use` reminder that the standard library adaptors do, by @matematikaedit and @bluss *“iterator adaptors are lazy and do nothing unless consumed”*.\n## 0.7.0\n  - Faster `izip!()` by @krdln\n    - `izip!()` is now a wrapper for repeated regular `.zip()` and a single `.map()`. This means it optimizes as well as the standard library `.zip()` it uses. **Note:** `multizip` and `izip!()` are now different! The former has a named type but the latter optimizes better.\n  - Faster `.unique()`\n  - `no_std` support, which is opt-in!\n    - Many lovable features are still there without std, like `izip!()` or `.format()` or `.merge()`, but not those that use collections.\n  - Trait bounds were required up front instead of just on the type: `group_by`'s `PartialEq` by @Phlosioneer and `repeat_call`'s `FnMut`.\n  - Removed deprecated constructor `Zip::new` — use `izip!()` or `multizip()`\n## 0.6.5\n  - Fix bug in `.cartesian_product()`'s fold (which only was visible for unfused iterators).\n## 0.6.4\n  - Add specific `fold` implementations for `.cartesian_product()` and `cons_tuples()`, which improves their performance in fold, foreach, and iterator consumers derived from them.\n## 0.6.3\n  - Add iterator adaptor `.positions(predicate)` by @tmccombs\n## 0.6.2\n  - Add function `process_results` which can “lift” a function of the regular values of an iterator so that it can process the `Ok` values from an iterator of `Results` instead, by @shepmaster\n  - Add iterator method `.concat()` which combines all iterator elements into a single collection using the `Extend` trait, by @srijs\n## 0.6.1\n  - Better size hint testing and subsequent size hint bugfixes by @rkarp. Fixes bugs in product, `interleave_shortest` size hints.\n  - New iterator method `.all_equal()` by @phimuemue\n## 0.6.0\n  - Deprecated names were removed in favour of their replacements\n  - `.flatten()` does not implement double ended iteration anymore\n  - `.fold_while()` uses `&mut self` and returns `FoldWhile<T>`, for composability #168\n  - `.foreach()` and `.fold1()` use `self`, like `.fold()` does.\n  - `.combinations(0)` now produces a single empty vector. #174\n## 0.5.10\n  - Add itertools method `.kmerge_by()` (and corresponding free function)\n  - Relaxed trait requirement of `.kmerge()` and `.minmax()` to PartialOrd.\n## 0.5.9\n  - Add multipeek method `.reset_peek()`\n  - Add categories\n## 0.5.8\n  - Add iterator adaptor `.peeking_take_while()` and its trait `PeekingNext`.\n## 0.5.7\n  - Add iterator adaptor `.with_position()`\n  - Fix multipeek's performance for long peeks by using `VecDeque`.\n## 0.5.6\n  - Add `.map_results()`\n## 0.5.5\n  - Many more adaptors now implement `Debug`\n  - Add free function constructor `repeat_n`. `RepeatN::new` is now deprecated.\n## 0.5.4\n  - Add infinite generator function `iterate`, that takes a seed and a closure.\n## 0.5.3\n  - Special-cased `.fold()` for flatten and put back. `.foreach()` now uses fold on the iterator, to pick up any iterator specific loop implementation.\n  - `.combinations(n)` asserts up front that `n != 0`, instead of running into an error on the second iterator element.\n## 0.5.2\n  - Add `.tuples::<T>()` that iterates by two, three or four elements at a time (where `T` is a tuple type).\n  - Add `.tuple_windows::<T>()` that iterates using a window of the two, three or four most recent elements.\n  - Add `.next_tuple::<T>()` method, that picks the next two, three or four elements in one go.\n  - `.interleave()` now has an accurate size hint.\n## 0.5.1\n  - Workaround module/function name clash that made racer crash on completing itertools. Only internal changes needed.\n## 0.5.0\n  - [Release announcement](https://bluss.github.io/rust/2016/09/26/itertools-0.5.0/)\n  - Renamed:\n    - `combinations` is now `tuple_combinations`\n    - `combinations_n` to `combinations`\n    - `group_by_lazy`, `chunks_lazy` to `group_by`, `chunks`\n    - `Unfold::new` to `unfold()`\n    - `RepeatCall::new` to `repeat_call()`\n    - `Zip::new` to `multizip`\n    - `PutBack::new`, `PutBackN::new` to `put_back`, `put_back_n`\n    - `PutBack::with_value` is now a builder setter, not a constructor\n    - `MultiPeek::new`, `.multipeek()` to `multipeek()`\n    - `format` to `format_with` and `format_default` to `format`\n    - `.into_rc()` to `rciter`\n    - `Partition` enum is now `Either`\n  - Module reorganization:\n    - All iterator structs are under `itertools::structs` but also reexported to the top level, for backwards compatibility\n    - All free functions are reexported at the root, `itertools::free` will be removed in the next version\n  - Removed:\n    - `ZipSlices`, use `.zip()` instead\n    - `.enumerate_from()`, `ZipTrusted`, due to being unstable\n    - `.mend_slices()`, moved to crate `odds`\n    - Stride, StrideMut, moved to crate `odds`\n    - `linspace()`, moved to crate `itertools-num`\n    - `.sort_by()`, use `.sorted_by()`\n    - `.is_empty_hint()`, use `.size_hint()`\n    - `.dropn()`, use `.dropping()`\n    - `.map_fn()`, use `.map()`\n    - `.slice()`, use `.take()` / `.skip()`\n    - helper traits in `misc`\n    - `new` constructors on iterator structs, use `Itertools` trait or free functions instead\n    - `itertools::size_hint` is now private\n  - Behaviour changes:\n    - `format` and `format_with` helpers now panic if you try to format them more than once.\n    - `repeat_call` is not double ended anymore\n  - New features:\n    - tuple flattening iterator is constructible with `cons_tuples`\n    - itertools reexports `Either` from the `either` crate. `Either<L, R>` is an iterator when `L, R` are.\n    - `MinMaxResult` now implements `Copy` and `Clone`\n    - `tuple_combinations` supports 1-4 tuples of combinations (previously just 2)\n## 0.4.19\n  - Add `.minmax_by()`\n  - Add `itertools::free::cloned`\n  - Add `itertools::free::rciter`\n  - Improve `.step(n)` slightly to take advantage of specialized Fuse better.\n## 0.4.18\n  - Only changes related to the \"unstable\" crate feature. This feature is more or less deprecated.\n    - Use deprecated warnings when unstable is enabled. `.enumerate_from()` will be removed imminently since it's using a deprecated libstd trait.\n## 0.4.17\n  - Fix bug in `.kmerge()` that caused it to often produce the wrong order #134\n## 0.4.16\n  - Improve precision of the `interleave_shortest` adaptor's size hint (it is now computed exactly when possible).\n## 0.4.15\n  - Fixup on top of the workaround in 0.4.14. A function in `itertools::free` was removed by mistake and now it is added back again.\n## 0.4.14\n  - Workaround an upstream regression in a Rust nightly build that broke compilation of of `itertools::free::{interleave, merge}`\n## 0.4.13\n  - Add `.minmax()` and `.minmax_by_key()`, iterator methods for finding both minimum and maximum in one scan.\n  - Add `.format_default()`, a simpler version of `.format()` (lazy formatting for iterators).\n## 0.4.12\n  - Add `.zip_eq()`, an adaptor like `.zip()` except it ensures iterators of inequal length don't pass silently (instead it panics).\n  - Add `.fold_while()`, an iterator method that is a fold that can short-circuit.\n  - Add `.partition_map()`, an iterator method that can separate elements into two collections.\n## 0.4.11\n  - Add `.get()` for `Stride{,Mut}` and `.get_mut()` for `StrideMut`\n## 0.4.10\n  - Improve performance of `.kmerge()`\n## 0.4.9\n  - Add k-ary merge adaptor `.kmerge()`\n  - Fix a bug in `.islice()` with ranges `a..b` where a `> b`.\n## 0.4.8\n  - Implement `Clone`, `Debug` for `Linspace`\n## 0.4.7\n  - Add function `diff_with()` that compares two iterators\n  - Add `.combinations_n()`, an n-ary combinations iterator\n  - Add methods `PutBack::with_value` and `PutBack::into_parts`.\n## 0.4.6\n  - Add method `.sorted()`\n  - Add module `itertools::free` with free function variants of common iterator adaptors and methods. For example `enumerate(iterable)`, `rev(iterable)`, and so on.\n## 0.4.5\n  - Add `.flatten()`\n## 0.4.4\n  - Allow composing `ZipSlices` with itself\n## 0.4.3\n  - Write `iproduct!()` as a single expression; this allows temporary values in its arguments.\n## 0.4.2\n  - Add `.fold_options()`\n  - Require Rust 1.1 or later\n## 0.4.1\n  - Update `.dropping()` to take advantage of `.nth()`\n## 0.4.0\n  - `.merge()`, `.unique()` and `.dedup()` now perform better due to not using function pointers\n  - Add free functions `enumerate()` and `rev()`\n  - Breaking changes:\n    - Return types of `.merge()` and `.merge_by()` renamed and changed\n    - Method `Merge::new` removed\n    - `.merge_by()` now takes a closure that returns bool.\n    - Return type of `.dedup()` changed\n    - Return type of `.mend_slices()` changed\n    - Return type of `.unique()` changed\n    - Removed function `times()`, struct `Times`: use a range instead\n    - Removed deprecated macro `icompr!()`\n    - Removed deprecated `FnMap` and method `.fn_map()`: use `.map_fn()`\n    - `.interleave_shortest()` is no longer guaranteed to act like fused\n## 0.3.25\n  - Rename `.sort_by()` to `.sorted_by()`. Old name is deprecated.\n  - Fix well-formedness warnings from RFC 1214, no user visible impact\n## 0.3.24\n  - Improve performance of `.merge()`'s ordering function slightly\n## 0.3.23\n  - Added `.chunks()`, similar to (and based on) `.group_by_lazy()`.\n  - Tweak linspace to match numpy.linspace and make it double ended.\n## 0.3.22\n  - Added `ZipSlices`, a fast zip for slices\n## 0.3.21\n  - Remove `Debug` impl for `Format`, it will have different use later\n## 0.3.20\n  - Optimize `.group_by_lazy()`\n## 0.3.19\n  - Added `.group_by_lazy()`, a possibly nonallocating group by\n  - Added `.format()`, a nonallocating formatting helper for iterators\n  - Remove uses of `RandomAccessIterator` since it has been deprecated in Rust.\n## 0.3.17\n  - Added (adopted) `Unfold` from Rust\n## 0.3.16\n  - Added adaptors `.unique()`, `.unique_by()`\n## 0.3.15\n  - Added method `.sort_by()`\n## 0.3.14\n  - Added adaptor `.while_some()`\n## 0.3.13\n  - Added adaptor `.interleave_shortest()`\n  - Added adaptor `.pad_using()`\n## 0.3.11\n  - Added `assert_equal` function\n## 0.3.10\n  - Bugfix `.combinations()` `size_hint`.\n## 0.3.8\n  - Added source `RepeatCall`\n## 0.3.7\n  - Added adaptor `PutBackN`\n  - Added adaptor `.combinations()`\n## 0.3.6\n  - Added `itertools::partition`, partition a sequence in place based on a predicate.\n  - Deprecate `icompr!()` with no replacement.\n## 0.3.5\n  - `.map_fn()` replaces deprecated `.fn_map()`.\n## 0.3.4\n  - `.take_while_ref()` *by-ref adaptor*\n  - `.coalesce()` *adaptor*\n  - `.mend_slices()` *adaptor*\n## 0.3.3\n  - `.dropping_back()` *method*\n  - `.fold1()` *method*\n  - `.is_empty_hint()` *method*\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 8.5654296875,
          "content": "# Contributing to itertools\n\nWe use stable Rust only.\nPlease check the minimum version of Rust we use in `Cargo.toml`.\n\n_If you are proposing a major change to CI or a new iterator adaptor for this crate,\nthen **please first file an issue** describing your proposal._\n[Usual concerns about new methods](https://github.com/rust-itertools/itertools/issues/413#issuecomment-657670781).\n\nTo pass CI tests successfully, your code must be free of \"compiler warnings\" and \"clippy warnings\" and be \"rustfmt\" formatted.\n\nNote that small PRs are easier to review and therefore are more easily merged.\n\n## Write a new method/adaptor for `Itertools` trait\nIn general, the code logic should be tested with [quickcheck](https://crates.io/crates/quickcheck) tests in `tests/quick.rs`\nwhich allow us to test properties about the code with randomly generated inputs.\n\n### Behind `use_std`/`use_alloc` feature?\nIf it needs the \"std\" (such as using hashes) then it should be behind the `use_std` feature,\nor if it requires heap allocation (such as using vectors) then it should be behind the `use_alloc` feature.\nOtherwise it should be able to run in `no_std` context.\n\nThis mostly applies to your new module, each import from it, and to your new `Itertools` method.\n\n### Pick the right receiver\n`self`, `&mut self` or `&self`? From [#710](https://github.com/rust-itertools/itertools/pull/710):\n\n- Take by value when:\n    - It transfers ownership to another iterator type, such as `filter`, `map`...\n    - It consumes the iterator completely, such as `count`, `last`, `max`...\n- Mutably borrow when it consumes only part of the iterator, such as `find`, `all`, `try_collect`...\n- Immutably borrow when there is no change, such as `size_hint`.\n\n### Laziness\nIterators are [lazy](https://doc.rust-lang.org/std/iter/index.html#laziness):\n\n- structs of iterator adaptors should have `#[must_use = \"iterator adaptors are lazy and do nothing unless consumed\"]` ;\n- structs of iterators should have `#[must_use = \"iterators are lazy and do nothing unless consumed\"]`.\n\nThose behaviors are **tested** in `tests/laziness.rs`.\n\n## Specialize `Iterator` methods\nIt might be more performant to specialize some methods.\nHowever, each specialization should be thoroughly tested.\n\nCorrectly specializing methods can be difficult, and _we do not require that you do it on your initial PR_.\n\nMost of the time, we want specializations of:\n\n- [`size_hint`](https://doc.rust-lang.org/std/iter/trait.Iterator.html#method.size_hint):\n  It mostly allows allocation optimizations.\n  When always exact, it also enables to implement `ExactSizeIterator`.\n  See our private module `src/size_hint.rs` for helpers.\n- [`fold`](https://doc.rust-lang.org/std/iter/trait.Iterator.html#method.fold)\n  might make iteration faster than calling `next` repeatedly.\n- [`count`](https://doc.rust-lang.org/std/iter/trait.Iterator.html#method.count),\n  [`last`](https://doc.rust-lang.org/std/iter/trait.Iterator.html#method.last),\n  [`nth`](https://doc.rust-lang.org/std/iter/trait.Iterator.html#method.nth)\n  as we might be able to avoid iterating on every item with `next`.\n\nAdditionally,\n\n- `for_each`, `reduce`, `max/min[_by[_key]]` and `partition` all rely on `fold` so you should specialize it instead.\n- `all`, `any`, `find`, `find_map`, `cmp`, `partial_cmp`, `eq`, `ne`, `lt`, `le`, `gt`, `ge` and `position` all rely (by default) on `try_fold`\n  which we can not specialize on stable rust, so you might want to wait it stabilizes\n  or specialize each of them.\n- `DoubleEndedIterator::{nth_back, rfold, rfind}`: similar reasoning.\n\nAn adaptor might use the inner iterator specializations for its own specializations.\n\nThey are **tested** in `tests/specializations.rs` and **benchmarked** in `benches/specializations.rs`\n(build those benchmarks is slow so you might want to temporarily remove the ones you do not want to measure).\n\n## Additional implementations\n### The [`Debug`](https://doc.rust-lang.org/std/fmt/trait.Debug.html) implementation\nAll our iterators should implement `Debug`.\n\nWhen one of the field is not debuggable (such as _functions_), you must not derive `Debug`.\nInstead, manually implement it and _ignore this field_ in our helper macro `debug_fmt_fields`.\n\n<details>\n<summary>4 examples (click to expand)</summary>\n\n```rust\nuse std::fmt;\n\n/* ===== Simple derive. ===== */\n#[derive(Debug)]\nstruct Name1<I> {\n    iter: I,\n}\n\n/* ===== With an unclonable field. ===== */\nstruct Name2<I, F> {\n    iter: I,\n    func: F,\n}\n\n// No `F: Debug` bound and the field `func` is ignored.\nimpl<I: fmt::Debug, F> fmt::Debug for Name2<I, F> {\n    // it defines the `fmt` function from a struct name and the fields you want to debug.\n    debug_fmt_fields!(Name2, iter);\n}\n\n/* ===== With an unclonable field, but another bound to add. ===== */\nstruct Name3<I: Iterator, F> {\n    iter: I,\n    item: Option<I::Item>,\n    func: F,\n}\n\n// Same about `F` and `func`, similar about `I` but we must add the `I::Item: Debug` bound.\nimpl<I: Iterator + fmt::Debug, F> fmt::Debug for Name3<I, F>\nwhere\n    I::Item: fmt::Debug,\n{\n    debug_fmt_fields!(Name3, iter, item);\n}\n\n/* ===== With an unclonable field for which we can provide some information. ===== */\nstruct Name4<I, F> {\n    iter: I,\n    func: Option<F>,\n}\n\n// If ignore a field is not good enough, implement Debug fully manually.\nimpl<I: fmt::Debug, F> fmt::Debug for Name4<I, F> {\n    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n        let func = if self.func.is_some() { \"Some(_)\" } else { \"None\" };\n        f.debug_struct(\"Name4\")\n            .field(\"iter\", &self.iter)\n            .field(\"func\", &func)\n            .finish()\n    }\n}\n```\n</details>\n\n### When/How to implement [`Clone`](https://doc.rust-lang.org/std/clone/trait.Clone.html)\nAll our iterators should implement `Clone` when possible.\n\nNote that a mutable reference is never clonable so `struct Name<'a, I: 'a> { iter: &'a mut I }` can not implement `Clone`.\n\nDerive `Clone` on a generic struct adds the bound `Clone` on each generic parameter.\nIt might be an issue in which case you should manually implement it with our helper macro `clone_fields` (it defines the `clone` function calling `clone` on each field) and be careful about the bounds.\n\n### When to implement [`std::iter::FusedIterator`](https://doc.rust-lang.org/std/iter/trait.FusedIterator.html)\nThis trait should be implemented _by all iterators that always return `None` after returning `None` once_, because it allows to optimize `Iterator::fuse()`.\n\nThe conditions on which it should be implemented are usually the ones from the `Iterator` implementation, eventually refined to ensure it behaves in a fused way.\n\n### When to implement [`ExactSizeIterator`](https://doc.rust-lang.org/std/iter/trait.ExactSizeIterator.html)\n_When we are always able to return an exact non-overflowing length._\n\nTherefore, we do not implement it on adaptors that makes the iterator longer as the resulting length could overflow.\n\nOne should not override `ExactSizeIterator::len` method but rely on an exact `Iterator::size_hint` implementation, meaning it returns `(length, Some(length))` (unless you could make `len` more performant than the default).\n\nThe conditions on which it should be implemented are usually the ones from the `Iterator` implementation, probably refined to ensure the size hint is exact.\n\n### When to implement [`DoubleEndedIterator`](https://doc.rust-lang.org/std/iter/trait.DoubleEndedIterator.html)\nWhen the iterator structure allows to handle _iterating on both fronts simultaneously_.\nThe iteration might stop in the middle when both fronts meet.\n\nThe conditions on which it should be implemented are usually the ones from the `Iterator` implementation, probably refined to ensure we can iterate on both fronts simultaneously.\n\n### When to implement [`itertools::PeekingNext`](https://docs.rs/itertools/latest/itertools/trait.PeekingNext.html)\nTODO\n\nThis is currently **tested** in `tests/test_std.rs`.\n\n## About lending iterators\nTODO\n\n\n## Other notes\nNo guideline about using `#[inline]` yet.\n\n### `.fold` / `.for_each` / `.try_fold` / `.try_for_each`\nIn the Rust standard library, it's quite common for `fold` to be implemented in terms of `try_fold`. But it's not something we do yet because we can not specialize `try_fold` methods yet (it uses the unstable `Try`).\n\nFrom [#781](https://github.com/rust-itertools/itertools/pull/781), the general rule to follow is something like this:\n\n- If you need to completely consume an iterator:\n  - Use `fold` if you need an _owned_ access to an accumulator.\n  - Use `for_each` otherwise.\n- If you need to partly consume an iterator, the same applies with `try_` versions:\n  - Use `try_fold` if you need an _owned_ access to an accumulator.\n  - Use `try_for_each` otherwise.\n"
        },
        {
          "name": "Cargo.toml",
          "type": "blob",
          "size": 1.5166015625,
          "content": "[package]\nname = \"itertools\"\nversion = \"0.14.0\"\n\nlicense = \"MIT OR Apache-2.0\"\nrepository = \"https://github.com/rust-itertools/itertools\"\ndocumentation = \"https://docs.rs/itertools/\"\nauthors = [\"bluss\"]\nreadme = \"README.md\"\n\ndescription = \"Extra iterator adaptors, iterator methods, free functions, and macros.\"\n\nkeywords = [\"iterator\", \"data-structure\", \"zip\", \"product\"]\ncategories = [\"algorithms\", \"rust-patterns\", \"no-std\", \"no-std::no-alloc\"]\n\nedition = \"2018\"\n\n# When bumping, please resolve all `#[allow(clippy::*)]` that are newly resolvable.\nrust-version = \"1.63.0\"\n\n[lib]\nbench = false\ntest = false\n\n[dependencies]\neither = { version = \"1.0\", default-features = false }\n\n[dev-dependencies]\nrand = \"0.7\"\ncriterion = { version = \"0.4.0\", features = [\"html_reports\"] }\npaste = \"1.0.0\"  # Used in test_std to instantiate generic tests\npermutohedron = \"0.2\"\nquickcheck = { version = \"0.9\", default-features = false }\n\n[features]\ndefault = [\"use_std\"]\nuse_std = [\"use_alloc\", \"either/use_std\"]\nuse_alloc = []\n\n[profile]\nbench = { debug = true }\n\n[[bench]]\nname = \"tuple_combinations\"\nharness = false\n\n[[bench]]\nname = \"tuples\"\nharness = false\n\n[[bench]]\nname = \"fold_specialization\"\nharness = false\n\n[[bench]]\nname = \"combinations_with_replacement\"\nharness = false\n\n[[bench]]\nname = \"tree_reduce\"\nharness = false\n\n[[bench]]\nname = \"bench1\"\nharness = false\n\n[[bench]]\nname = \"combinations\"\nharness = false\n\n[[bench]]\nname = \"powerset\"\nharness = false\n\n[[bench]]\nname = \"specializations\"\nharness = false\n\n[[bench]]\nname = \"k_smallest\"\nharness = false\n"
        },
        {
          "name": "LICENSE-APACHE",
          "type": "blob",
          "size": 10.5927734375,
          "content": "                              Apache License\n                        Version 2.0, January 2004\n                     http://www.apache.org/licenses/\n\nTERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n1. Definitions.\n\n   \"License\" shall mean the terms and conditions for use, reproduction,\n   and distribution as defined by Sections 1 through 9 of this document.\n\n   \"Licensor\" shall mean the copyright owner or entity authorized by\n   the copyright owner that is granting the License.\n\n   \"Legal Entity\" shall mean the union of the acting entity and all\n   other entities that control, are controlled by, or are under common\n   control with that entity. For the purposes of this definition,\n   \"control\" means (i) the power, direct or indirect, to cause the\n   direction or management of such entity, whether by contract or\n   otherwise, or (ii) ownership of fifty percent (50%) or more of the\n   outstanding shares, or (iii) beneficial ownership of such entity.\n\n   \"You\" (or \"Your\") shall mean an individual or Legal Entity\n   exercising permissions granted by this License.\n\n   \"Source\" form shall mean the preferred form for making modifications,\n   including but not limited to software source code, documentation\n   source, and configuration files.\n\n   \"Object\" form shall mean any form resulting from mechanical\n   transformation or translation of a Source form, including but\n   not limited to compiled object code, generated documentation,\n   and conversions to other media types.\n\n   \"Work\" shall mean the work of authorship, whether in Source or\n   Object form, made available under the License, as indicated by a\n   copyright notice that is included in or attached to the work\n   (an example is provided in the Appendix below).\n\n   \"Derivative Works\" shall mean any work, whether in Source or Object\n   form, that is based on (or derived from) the Work and for which the\n   editorial revisions, annotations, elaborations, or other modifications\n   represent, as a whole, an original work of authorship. For the purposes\n   of this License, Derivative Works shall not include works that remain\n   separable from, or merely link (or bind by name) to the interfaces of,\n   the Work and Derivative Works thereof.\n\n   \"Contribution\" shall mean any work of authorship, including\n   the original version of the Work and any modifications or additions\n   to that Work or Derivative Works thereof, that is intentionally\n   submitted to Licensor for inclusion in the Work by the copyright owner\n   or by an individual or Legal Entity authorized to submit on behalf of\n   the copyright owner. For the purposes of this definition, \"submitted\"\n   means any form of electronic, verbal, or written communication sent\n   to the Licensor or its representatives, including but not limited to\n   communication on electronic mailing lists, source code control systems,\n   and issue tracking systems that are managed by, or on behalf of, the\n   Licensor for the purpose of discussing and improving the Work, but\n   excluding communication that is conspicuously marked or otherwise\n   designated in writing by the copyright owner as \"Not a Contribution.\"\n\n   \"Contributor\" shall mean Licensor and any individual or Legal Entity\n   on behalf of whom a Contribution has been received by Licensor and\n   subsequently incorporated within the Work.\n\n2. Grant of Copyright License. Subject to the terms and conditions of\n   this License, each Contributor hereby grants to You a perpetual,\n   worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n   copyright license to reproduce, prepare Derivative Works of,\n   publicly display, publicly perform, sublicense, and distribute the\n   Work and such Derivative Works in Source or Object form.\n\n3. Grant of Patent License. Subject to the terms and conditions of\n   this License, each Contributor hereby grants to You a perpetual,\n   worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n   (except as stated in this section) patent license to make, have made,\n   use, offer to sell, sell, import, and otherwise transfer the Work,\n   where such license applies only to those patent claims licensable\n   by such Contributor that are necessarily infringed by their\n   Contribution(s) alone or by combination of their Contribution(s)\n   with the Work to which such Contribution(s) was submitted. If You\n   institute patent litigation against any entity (including a\n   cross-claim or counterclaim in a lawsuit) alleging that the Work\n   or a Contribution incorporated within the Work constitutes direct\n   or contributory patent infringement, then any patent licenses\n   granted to You under this License for that Work shall terminate\n   as of the date such litigation is filed.\n\n4. Redistribution. You may reproduce and distribute copies of the\n   Work or Derivative Works thereof in any medium, with or without\n   modifications, and in Source or Object form, provided that You\n   meet the following conditions:\n\n   (a) You must give any other recipients of the Work or\n       Derivative Works a copy of this License; and\n\n   (b) You must cause any modified files to carry prominent notices\n       stating that You changed the files; and\n\n   (c) You must retain, in the Source form of any Derivative Works\n       that You distribute, all copyright, patent, trademark, and\n       attribution notices from the Source form of the Work,\n       excluding those notices that do not pertain to any part of\n       the Derivative Works; and\n\n   (d) If the Work includes a \"NOTICE\" text file as part of its\n       distribution, then any Derivative Works that You distribute must\n       include a readable copy of the attribution notices contained\n       within such NOTICE file, excluding those notices that do not\n       pertain to any part of the Derivative Works, in at least one\n       of the following places: within a NOTICE text file distributed\n       as part of the Derivative Works; within the Source form or\n       documentation, if provided along with the Derivative Works; or,\n       within a display generated by the Derivative Works, if and\n       wherever such third-party notices normally appear. The contents\n       of the NOTICE file are for informational purposes only and\n       do not modify the License. You may add Your own attribution\n       notices within Derivative Works that You distribute, alongside\n       or as an addendum to the NOTICE text from the Work, provided\n       that such additional attribution notices cannot be construed\n       as modifying the License.\n\n   You may add Your own copyright statement to Your modifications and\n   may provide additional or different license terms and conditions\n   for use, reproduction, or distribution of Your modifications, or\n   for any such Derivative Works as a whole, provided Your use,\n   reproduction, and distribution of the Work otherwise complies with\n   the conditions stated in this License.\n\n5. Submission of Contributions. Unless You explicitly state otherwise,\n   any Contribution intentionally submitted for inclusion in the Work\n   by You to the Licensor shall be under the terms and conditions of\n   this License, without any additional terms or conditions.\n   Notwithstanding the above, nothing herein shall supersede or modify\n   the terms of any separate license agreement you may have executed\n   with Licensor regarding such Contributions.\n\n6. Trademarks. This License does not grant permission to use the trade\n   names, trademarks, service marks, or product names of the Licensor,\n   except as required for reasonable and customary use in describing the\n   origin of the Work and reproducing the content of the NOTICE file.\n\n7. Disclaimer of Warranty. Unless required by applicable law or\n   agreed to in writing, Licensor provides the Work (and each\n   Contributor provides its Contributions) on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n   implied, including, without limitation, any warranties or conditions\n   of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n   PARTICULAR PURPOSE. You are solely responsible for determining the\n   appropriateness of using or redistributing the Work and assume any\n   risks associated with Your exercise of permissions under this License.\n\n8. Limitation of Liability. In no event and under no legal theory,\n   whether in tort (including negligence), contract, or otherwise,\n   unless required by applicable law (such as deliberate and grossly\n   negligent acts) or agreed to in writing, shall any Contributor be\n   liable to You for damages, including any direct, indirect, special,\n   incidental, or consequential damages of any character arising as a\n   result of this License or out of the use or inability to use the\n   Work (including but not limited to damages for loss of goodwill,\n   work stoppage, computer failure or malfunction, or any and all\n   other commercial damages or losses), even if such Contributor\n   has been advised of the possibility of such damages.\n\n9. Accepting Warranty or Additional Liability. While redistributing\n   the Work or Derivative Works thereof, You may choose to offer,\n   and charge a fee for, acceptance of support, warranty, indemnity,\n   or other liability obligations and/or rights consistent with this\n   License. However, in accepting such obligations, You may act only\n   on Your own behalf and on Your sole responsibility, not on behalf\n   of any other Contributor, and only if You agree to indemnify,\n   defend, and hold each Contributor harmless for any liability\n   incurred by, or claims asserted against, such Contributor by reason\n   of your accepting any such warranty or additional liability.\n\nEND OF TERMS AND CONDITIONS\n\nAPPENDIX: How to apply the Apache License to your work.\n\n   To apply the Apache License to your work, attach the following\n   boilerplate notice, with the fields enclosed by brackets \"[]\"\n   replaced with your own identifying information. (Don't include\n   the brackets!)  The text should be enclosed in the appropriate\n   comment syntax for the file format. We also recommend that a\n   file or class name and description of purpose be included on the\n   same \"printed page\" as the copyright notice for easier\n   identification within third-party archives.\n\nCopyright [yyyy] [name of copyright owner]\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n\thttp://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n"
        },
        {
          "name": "LICENSE-MIT",
          "type": "blob",
          "size": 1.0185546875,
          "content": "Copyright (c) 2015\n\nPermission is hereby granted, free of charge, to any\nperson obtaining a copy of this software and associated\ndocumentation files (the \"Software\"), to deal in the\nSoftware without restriction, including without\nlimitation the rights to use, copy, modify, merge,\npublish, distribute, sublicense, and/or sell copies of\nthe Software, and to permit persons to whom the Software\nis furnished to do so, subject to the following\nconditions:\n\nThe above copyright notice and this permission notice\nshall be included in all copies or substantial portions\nof the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF\nANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED\nTO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A\nPARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT\nSHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\nOF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR\nIN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\nDEALINGS IN THE SOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 0.8857421875,
          "content": "# Itertools\n\nExtra iterator adaptors, functions and macros.\n\nPlease read the [API documentation here](https://docs.rs/itertools/).\n\nHow to use with Cargo:\n\n```toml\n[dependencies]\nitertools = \"0.14.0\"\n```\n\nHow to use in your crate:\n\n```rust\nuse itertools::Itertools;\n```\n\n## How to contribute\nIf you're not sure what to work on, try checking the [help wanted](https://github.com/rust-itertools/itertools/issues?q=is%3Aopen+is%3Aissue+label%3A%22help+wanted%22) label.\n\nSee our [CONTRIBUTING.md](https://github.com/rust-itertools/itertools/blob/master/CONTRIBUTING.md) for a detailed guide.\n\n## License\n\nDual-licensed to be compatible with the Rust project.\n\nLicensed under the Apache License, Version 2.0\nhttps://www.apache.org/licenses/LICENSE-2.0 or the MIT license\nhttps://opensource.org/licenses/MIT, at your\noption. This file may not be copied, modified, or distributed\nexcept according to those terms.\n"
        },
        {
          "name": "benches",
          "type": "tree",
          "content": null
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}