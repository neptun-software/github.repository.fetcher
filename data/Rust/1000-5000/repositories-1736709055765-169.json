{
  "metadata": {
    "timestamp": 1736709055765,
    "page": 169,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjE3MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "rusqlite/rusqlite",
      "stars": 3329,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.1376953125,
          "content": "libsqlite3-sys/sqlite3/* linguist-vendored\nlibsqlite3-sys/sqlcipher/* linguist-vendored\nlibsqlite3-sys/bindgen-bindings/* linguist-generated\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.025390625,
          "content": "/target/\n/doc/\nCargo.lock\n"
        },
        {
          "name": "Cargo.toml",
          "type": "blob",
          "size": 4.7109375,
          "content": "[package]\nname = \"rusqlite\"\n# Note: Update version in README.md when you change this.\nversion = \"0.32.1\"\nauthors = [\"The rusqlite developers\"]\nedition = \"2021\"\ndescription = \"Ergonomic wrapper for SQLite\"\nrepository = \"https://github.com/rusqlite/rusqlite\"\ndocumentation = \"https://docs.rs/rusqlite/\"\nreadme = \"README.md\"\nkeywords = [\"sqlite\", \"database\", \"ffi\"]\nlicense = \"MIT\"\ncategories = [\"database\"]\n\nexclude = [\n    \"/.github/*\",\n    \"/.gitattributes\",\n    \"/appveyor.yml\",\n    \"/Changelog.md\",\n    \"/clippy.toml\",\n    \"/codecov.yml\",\n]\n\n[badges]\nappveyor = { repository = \"rusqlite/rusqlite\" }\ncodecov = { repository = \"rusqlite/rusqlite\" }\nmaintenance = { status = \"actively-developed\" }\n\n[lib]\nname = \"rusqlite\"\n\n[workspace]\nmembers = [\"libsqlite3-sys\"]\n\n[features]\nload_extension = []\n# hot-backup interface: 3.6.11 (2009-02-18)\nbackup = []\n# sqlite3_blob_reopen: 3.7.4\nblob = []\ncollation = []\n# sqlite3_create_function_v2: 3.7.3 (2010-10-08)\nfunctions = []\n# sqlite3_log: 3.6.23 (2010-03-09)\ntrace = []\nbundled = [\"libsqlite3-sys/bundled\", \"modern_sqlite\"]\nbundled-sqlcipher = [\"libsqlite3-sys/bundled-sqlcipher\", \"bundled\"]\nbundled-sqlcipher-vendored-openssl = [\n    \"libsqlite3-sys/bundled-sqlcipher-vendored-openssl\",\n    \"bundled-sqlcipher\",\n]\nbuildtime_bindgen = [\"libsqlite3-sys/buildtime_bindgen\"]\nlimits = []\nloadable_extension = [\"libsqlite3-sys/loadable_extension\"]\nhooks = []\npreupdate_hook = [\"libsqlite3-sys/preupdate_hook\", \"hooks\"]\ni128_blob = []\nsqlcipher = [\"libsqlite3-sys/sqlcipher\"]\nunlock_notify = [\"libsqlite3-sys/unlock_notify\"]\n# xSavepoint, xRelease and xRollbackTo: 3.7.7 (2011-06-23)\nvtab = []\ncsvtab = [\"csv\", \"vtab\"]\n# pointer passing interfaces: 3.20.0\narray = [\"vtab\"]\n# session extension: 3.13.0\nsession = [\"libsqlite3-sys/session\", \"hooks\"]\n# window functions: 3.25.0\nwindow = [\"functions\"]\n# 3.9.0\nseries = [\"vtab\"]\n# check for invalid query.\nextra_check = []\n# ]3.14.0, last]\nmodern_sqlite = [\"libsqlite3-sys/bundled_bindings\"]\nin_gecko = [\"modern_sqlite\", \"libsqlite3-sys/in_gecko\"]\nbundled-windows = [\"libsqlite3-sys/bundled-windows\"]\n# Build bundled sqlite with -fsanitize=address\nwith-asan = [\"libsqlite3-sys/with-asan\"]\ncolumn_decltype = []\nwasm32-wasi-vfs = [\"libsqlite3-sys/wasm32-wasi-vfs\"]\n# 3.23.0\nserialize = [\"modern_sqlite\"]\n\n# Helper feature for enabling most non-build-related optional features\n# or dependencies (except `session`). This is useful for running tests / clippy\n# / etc. New features and optional dependencies that don't conflict with anything\n# else should be added here.\nmodern-full = [\n    \"array\",\n    \"backup\",\n    \"blob\",\n    \"modern_sqlite\",\n    \"chrono\",\n    \"collation\",\n    \"column_decltype\",\n    \"csvtab\",\n    \"extra_check\",\n    \"functions\",\n    \"hooks\",\n    \"i128_blob\",\n    \"jiff\",\n    \"limits\",\n    \"load_extension\",\n    \"serde_json\",\n    \"serialize\",\n    \"series\",\n    \"time\",\n    \"trace\",\n    \"unlock_notify\",\n    \"url\",\n    \"uuid\",\n    \"vtab\",\n    \"window\",\n]\n\nbundled-full = [\"modern-full\", \"bundled\"]\n\n[dependencies]\njiff = { version = \"0.1\", optional = true, default-features = false, features = [\n    \"std\",\n] }\ntime = { version = \"0.3.36\", features = [\n    \"formatting\",\n    \"macros\",\n    \"parsing\",\n], optional = true }\nbitflags = \"2.6.0\"\nhashlink = \"0.10\"\nchrono = { version = \"0.4.38\", optional = true, default-features = false, features = [\n    \"clock\",\n] }\nserde_json = { version = \"1.0\", optional = true }\ncsv = { version = \"1.1\", optional = true }\nurl = { version = \"2.1\", optional = true }\nfallible-iterator = \"0.3\"\nfallible-streaming-iterator = \"0.1\"\nuuid = { version = \"1.0\", optional = true }\nsmallvec = \"1.6.1\"\nrusqlite-macros = { path = \"rusqlite-macros\", version = \"0.3.0\", optional = true }\n\n[dev-dependencies]\ndoc-comment = \"0.3\"\ntempfile = \"3.1.0\"\nregex = \"1.5.5\"\nuuid = { version = \"1.0\", features = [\"v4\"] }\nunicase = \"2.6.0\"\nouroboros = \"0.18\"\nself_cell = \"1.1.0\"\n# Use `bencher` over criterion because it builds much faster,\n# and we don't have many benchmarks\nbencher = \"0.1\"\n\n[dependencies.libsqlite3-sys]\npath = \"libsqlite3-sys\"\nversion = \"0.30.1\"\n\n[[test]]\nname = \"auto_ext\"\n\n[[test]]\nname = \"config_log\"\nharness = false\n\n[[test]]\nname = \"deny_single_threaded_sqlite_config\"\n\n[[test]]\nname = \"vtab\"\n\n[[bench]]\nname = \"cache\"\nharness = false\n\n[[bench]]\nname = \"exec\"\nharness = false\n\n[[example]]\nname = \"loadable_extension\"\ncrate-type = [\"cdylib\"]\nrequired-features = [\"loadable_extension\", \"functions\", \"trace\"]\n\n[[example]]\nname = \"load_extension\"\nrequired-features = [\"load_extension\", \"bundled\", \"functions\", \"trace\"]\n\n[package.metadata.docs.rs]\nfeatures = [\"modern-full\", \"rusqlite-macros\"]\nall-features = false\nno-default-features = true\ndefault-target = \"x86_64-unknown-linux-gnu\"\nrustdoc-args = [\"--cfg\", \"docsrs\"]\n\n[package.metadata.playground]\nfeatures = [\"bundled-full\"]\nall-features = false\n"
        },
        {
          "name": "Changelog.md",
          "type": "blob",
          "size": 15.708984375,
          "content": "For version 0.15.0 and above, see [Releases](https://github.com/rusqlite/rusqlite/releases) page.\n\n# Version 0.14.0 (2018-08-17)\n\n* BREAKING CHANGE: `ToSql` implementation for `time::Timespec` uses RFC 3339 (%Y-%m-%dT%H:%M:%S.%fZ).\n  Previous format was %Y-%m-%d %H:%M:%S:%f %Z.\n* BREAKING CHANGE: Remove potentially conflicting impl of ToSqlOutput (#313).\n* BREAKING CHANGE: Replace column index/count type (i32) with usize.\n* BREAKING CHANGE: Replace parameter index/count type (i32) with usize.\n* BREAKING CHANGE: Replace row changes/count type (i32) with usize.\n* BREAKING CHANGE: Scalar functions must be `Send`able and `'static`.\n* Bugfix: Commit failure unhandled, database left in unusable state (#366).\n* Bugfix: `free_boxed_hook` does not work for `fn`.\n* Update the bundled SQLite version to 3.24.0 (#326).\n* Add DropBehavior::Panic to enforce intentional commit or rollback.\n* Implement `sqlite3_update_hook` (#260, #328), `sqlite3_commit_hook` and `sqlite3_rollback_hook`.\n* Add support to unlock notification behind `unlock_notify` feature (#294, #331).\n* Make `Statement::column_index` case-insensitive (#330).\n* Add comment to justify `&mut Connection` in `Transaction`.\n* Fix `tyvar_behind_raw_pointer` warnings.\n* Fix handful of clippy warnings.\n* Fix `Connection::open` documentation (#332)\n* Add binding to `sqlite3_get_autocommit` and `sqlite3_stmt_busy`.\n* Add binding to `sqlite3_busy_timeout` and `sqlite3_busy_handler`.\n* Add binding to `sqlite3_expanded_sql`.\n* Use `rerun-if-env-changed` in libsqlite3-sys (#329).\n* Return an `InvalidQuery` error when SQL is not read only.\n\n# Version 0.13.0 (2017-11-13)\n\n* Added ToSqlConversionFailure case to Error enum.\n* Now depends on chrono 0.4, bitflags 1.0, and (optionally) cc 1.0 / bindgen 0.31.\n* The ToSql/FromSql implementations for time::Timespec now include\n  and expect fractional seconds and timezone in the serialized string.\n* The RowIndex type used in Row::get is now publicly exported.\n* New `sqlcipher` feature allows linking against SQLCipher instead of SQLite.\n* Doc link in README now point to docs.rs.\n\n# Version 0.12.0 (2017-05-29)\n\n* Defines HAVE\\_USLEEP when building with a bundled SQLite (#263).\n* Updates dependencies to their latest versions, particularly serde to 1.0.\n* Adds support for vcpkg on Windows.\n* Adds `ToSql` impls for `str` and `[u8]`.\n\n# Version 0.11.0 (2017-04-06)\n\n* Avoid publicly exporting SQLite constants multiple times from libsqlite3-sys.\n* Adds `FromSql` and `ToSql` impls for `isize`. Documents why `usize` and `u64` are not included.\n\n# Version 0.10.1 (2017-03-03)\n\n* Updates the `bundled` SQLite version to 3.17.0.\n* Changes the build process to no longer require `bindgen`. This should improve\n  build times and no longer require a new-ish Clang. See the README for more\n  details.\n\n# Version 0.10.0 (2017-02-28)\n\n* Re-export the `ErrorCode` enum from `libsqlite3-sys`.\n* Adds `version()` and `version_number()` functions for querying the version of SQLite in use.\n* Adds the `limits` feature, exposing `limit()` and `set_limit()` methods on `Connection`.\n* Updates to `libsqlite3-sys` 0.7.0, which runs rust-bindgen at build-time instead of assuming the\n  presence of all expected SQLite constants and functions.\n* Clarifies supported SQLite versions. Running with SQLite older than 3.6.8 now panics, and\n  some features will not compile unless a sufficiently-recent SQLite version is used. See\n  the README for requirements of particular features.\n* When running with SQLite 3.6.x, rusqlite attempts to perform SQLite initialization. If it fails,\n  rusqlite will panic since it cannot ensure the threading mode for SQLite. This check can be\n  skipped by calling the unsafe function `rusqlite::bypass_sqlite_initialization()`. This is\n  technically a breaking change but is unlikely to affect anyone in practice, since prior to this\n  version the check that rusqlite was using would cause a segfault if linked against a SQLite\n  older than 3.7.0.\n* rusqlite now performs a one-time check (prior to the first connection attempt) that the runtime\n  SQLite version is at least as new as the SQLite version found at buildtime. This check can be\n  skipped by calling the unsafe function `rusqlite::bypass_sqlite_version_check()`.\n* Removes the `libc` dependency in favor of using `std::os::raw`\n\n# Version 0.9.5 (2017-01-26)\n\n* Add impls of `Clone`, `Debug`, and `PartialEq` to `ToSqlOutput`.\n\n# Version 0.9.4 (2017-01-25)\n\n* Update dependencies.\n\n# Version 0.9.3 (2017-01-23)\n\n* Make `ToSqlOutput` itself implement `ToSql`.\n\n# Version 0.9.2 (2017-01-22)\n\n* Bugfix: The `FromSql` impl for `i32` now returns an error instead of\n  truncating if the underlying SQLite value is out of `i32`'s range.\n* Added `FromSql` and `ToSql` impls for `i8`, `i16`, `u8`, `u16`, and `u32`.\n  `i32` and `i64` already had impls. `u64` is omitted because their range\n  cannot be represented by `i64`, which is the type we use to communicate with\n  SQLite.\n\n# Version 0.9.1 (2017-01-20)\n\n* BREAKING CHANGE: `Connection::close()` now returns a `Result<(), (Connection, Error)>` instead\n  of a `Result<(), Error>` so callers get the still-open connection back on failure.\n\n# Version 0.8.0 (2016-12-31)\n\n* BREAKING CHANGE: The `FromSql` trait has been redesigned. It now requires a single, safe\n  method instead of the previous definition which required implementing one or two unsafe\n  methods.\n* BREAKING CHANGE: The `ToSql` trait has been redesigned. It can now be implemented without\n  `unsafe`, and implementors can choose to return either borrowed or owned results.\n* BREAKING CHANGE: The closure passed to `query_row`, `query_row_and_then`, `query_row_safe`,\n  and `query_row_named` now expects a `&Row` instead of a `Row`. The vast majority of calls\n  to these functions will probably not need to change; see\n  https://github.com/jgallagher/rusqlite/pull/184.\n* BREAKING CHANGE: A few cases of the `Error` enum have sprouted additional information\n  (e.g., `FromSqlConversionFailure` now also includes the column index and the type returned\n  by SQLite).\n* Added `#[deprecated(since = \"...\", note = \"...\")]` flags (new in Rust 1.9 for libraries) to\n  all deprecated APIs.\n* Added `query_row` convenience function to `Statement`.\n* Added `bundled` feature which will build SQLite from source instead of attempting to link\n  against a SQLite that already exists on the system.\n* Fixed a bug where using cached prepared statements resulted in attempting to close a connection\n  failing with `DatabaseBusy`; see https://github.com/jgallagher/rusqlite/issues/186.\n\n# Version 0.7.3 (2016-06-01)\n\n* Fixes an incorrect failure from the `insert()` convenience function when back-to-back inserts to\n  different tables both returned the same row ID\n  ([#171](https://github.com/jgallagher/rusqlite/issues/171)).\n\n# Version 0.7.2 (2016-05-19)\n\n* BREAKING CHANGE: `Rows` no longer implements `Iterator`. It still has a `next()` method, but\n  the lifetime of the returned `Row` is now tied to the lifetime of the vending `Rows` object.\n  This behavior is more correct. Previously there were runtime checks to prevent misuse, but\n  other changes in this release to reset statements as soon as possible introduced yet another\n  hazard related to the lack of these lifetime connections. We were already recommending the\n  use of `query_map` and `query_and_then` over raw `query`; both of those still return handles\n  that implement `Iterator`.\n* BREAKING CHANGE: `Transaction::savepoint()` now returns a `Savepoint` instead of another\n  `Transaction`. Unlike `Transaction`, `Savepoint`s can be rolled back while keeping the current\n  savepoint active.\n* BREAKING CHANGE: Creating transactions from a `Connection` or savepoints from a `Transaction`\n  now take `&mut self` instead of `&self` to correctly represent that transactions within a\n  connection are inherently nested. While a transaction is alive, the parent connection or\n  transaction is unusable, so `Transaction` now implements `Deref<Target=Connection>`, giving\n  access to `Connection`'s methods via the `Transaction` itself.\n* BREAKING CHANGE: `Transaction::set_commit` and `Transaction::set_rollback` have been replaced\n  by `Transaction::set_drop_behavior`.\n* Adds `Connection::prepare_cached`. `Connection` now keeps an internal cache of any statements\n  prepared via this method. The size of this cache defaults to 16 (`prepare_cached` will always\n  work but may re-prepare statements if more are prepared than the cache holds), and can be\n  controlled via `Connection::set_prepared_statement_cache_capacity`.\n* Adds `query_map_named` and `query_and_then_named` to `Statement`.\n* Adds `insert` convenience method to `Statement` which returns the row ID of an inserted row.\n* Adds `exists` convenience method returning whether a query finds one or more rows.\n* Adds support for serializing types from the `serde_json` crate. Requires the `serde_json` feature.\n* Adds support for serializing types from the `chrono` crate. Requires the `chrono` feature.\n* Removes `load_extension` feature from `libsqlite3-sys`. `load_extension` is still available\n  on rusqlite itself.\n* Fixes crash on nightly Rust when using the `trace` feature.\n* Adds optional `clippy` feature and addresses issues it found.\n* Adds `column_count()` method to `Statement` and `Row`.\n* Adds `types::Value` for dynamic column types.\n* Adds support for user-defined aggregate functions (behind the existing `functions` Cargo feature).\n* Introduces a `RowIndex` trait allowing columns to be fetched via index (as before) or name (new).\n* Introduces `ZeroBlob` type under the `blob` module/feature exposing SQLite's zeroblob API.\n* Adds CI testing for Windows via AppVeyor.\n* Fixes a warning building libsqlite3-sys under Rust 1.6.\n* Adds an unsafe `handle()` method to `Connection`. Please file an issue if you actually use it.\n\n# Version 0.6.0 (2015-12-17)\n\n* BREAKING CHANGE: `SqliteError` is now an enum instead of a struct. Previously, we were (ab)using\n  the error code and message to send back both underlying SQLite errors and errors that occurred\n  at the Rust level. Now those have been separated out; SQLite errors are returned as \n  `SqliteFailure` cases (which still include the error code but also include a Rust-friendlier\n  enum as well), and rusqlite-level errors are captured in other cases. Because of this change,\n  `SqliteError` no longer implements `PartialEq`.\n* BREAKING CHANGE: When opening a new detection, rusqlite now detects if SQLite was compiled or\n  configured for single-threaded use only; if it was, connection attempts will fail. If this\n  affects you, please open an issue.\n* BREAKING CHANGE: `SqliteTransactionDeferred`, `SqliteTransactionImmediate`, and\n  `SqliteTransactionExclusive` are no longer exported. Instead, use\n  `TransactionBehavior::Deferred`, `TransactionBehavior::Immediate`, and\n  `TransactionBehavior::Exclusive`.\n* Removed `Sqlite` prefix on many types:\n    * `SqliteConnection` is now `Connection`\n    * `SqliteError` is now `Error`\n    * `SqliteResult` is now `Result`\n    * `SqliteStatement` is now `Statement`\n    * `SqliteRows` is now `Rows`\n    * `SqliteRow` is now `Row`\n    * `SqliteOpenFlags` is now `OpenFlags`\n    * `SqliteTransaction` is now `Transaction`.\n    * `SqliteTransactionBehavior` is now `TransactionBehavior`.\n    * `SqliteLoadExtensionGuard` is now `LoadExtensionGuard`.\n  The old, prefixed names are still exported but are deprecated.\n* Adds a variety of `..._named` methods for executing queries using named placeholder parameters.\n* Adds `backup` feature that exposes SQLite's online backup API.\n* Adds `blob` feature that exposes SQLite's Incremental I/O for BLOB API.\n* Adds `functions` feature that allows user-defined scalar functions to be added to\n  open `SqliteConnection`s.\n\n# Version 0.5.0 (2015-12-08)\n\n* Adds `trace` feature that allows the use of SQLite's logging, tracing, and profiling hooks.\n* Slight change to the closure types passed to `query_map` and `query_and_then`:\n    * Remove the `'static` requirement on the closure's output type.\n    * Give the closure a `&SqliteRow` instead of a `SqliteRow`.\n* When building, the environment variable `SQLITE3_LIB_DIR` now takes precedence over pkg-config.\n* If `pkg-config` is not available, we will try to find `libsqlite3` in `/usr/lib`.\n* Add more documentation for failure modes of functions that return `SqliteResult`s.\n* Updates `libc` dependency to 0.2, fixing builds on ARM for Rust 1.6 or newer.\n\n# Version 0.4.0 (2015-11-03)\n\n* Adds `Sized` bound to `FromSql` trait as required by RFC 1214.\n\n# Version 0.3.1 (2015-09-22)\n\n* Reset underlying SQLite statements as soon as possible after executing, as recommended by\n  http://www.sqlite.org/cvstrac/wiki?p=ScrollingCursor.\n\n# Version 0.3.0 (2015-09-21)\n\n* Removes `get_opt`. Use `get_checked` instead.\n* Add `query_row_and_then` and `query_and_then` convenience functions. These are analogous to\n  `query_row` and `query_map` but allow functions that can fail by returning `Result`s.\n* Relax uses of `P: AsRef<...>` from `&P` to `P`.\n* Add additional error check for calling `execute` when `query` was intended.\n* Improve debug formatting of `SqliteStatement` and `SqliteConnection`.\n* Changes documentation of `get_checked` to correctly indicate that it returns errors (not panics)\n  when given invalid types or column indices.\n\n# Version 0.2.0 (2015-07-26)\n\n* Add `column_names()` to `SqliteStatement`.\n* By default, include `SQLITE_OPEN_NO_MUTEX` and `SQLITE_OPEN_URI` flags when opening a\n  new connection.\n* Fix generated bindings (e.g., `sqlite3_exec` was wrong).\n* Use now-generated `sqlite3_destructor_type` to define `SQLITE_STATIC` and `SQLITE_TRANSIENT`.\n\n# Version 0.1.0 (2015-05-11)\n\n* [breaking-change] Modify `query_row` to return a `Result` instead of unwrapping.\n* Deprecate `query_row_safe` (use `query_row` instead).\n* Add `query_map`.\n* Add `get_checked`, which asks SQLite to do some basic type-checking of columns.\n\n# Version 0.0.17 (2015-04-03)\n\n* Publish version that builds on stable rust (beta). This version lives on the\n  `stable` branch. Development continues on `master` and still requires a nightly\n  version of Rust.\n\n# Version 0.0.16\n\n* Updates to track rustc nightly.\n\n# Version 0.0.15\n\n* Make SqliteConnection `Send`.\n\n# Version 0.0.14\n\n* Remove unneeded features (also involves switching to `libc` crate).\n\n# Version 0.0.13 (2015-03-26)\n\n* Updates to track rustc nightly.\n\n# Version 0.0.12 (2015-03-24)\n\n* Updates to track rustc stabilization.\n\n# Version 0.0.11 (2015-03-12)\n\n* Reexport `sqlite3_stmt` from `libsqlite3-sys` for easier `impl`-ing of `ToSql` and `FromSql`.\n* Updates to track latest rustc changes.\n* Update dependency versions.\n\n# Version 0.0.10 (2015-02-23)\n\n* BREAKING CHANGE: `open` now expects a `Path` rather than a `str`. There is a separate\n  `open_in_memory` constructor for opening in-memory databases.\n* Added the ability to load SQLite extensions. This is behind the `load_extension` Cargo feature,\n  because not all builds of sqlite3 include this ability. Notably the default libsqlite3 that\n\tships with OS X 10.10 does not support extensions.\n\n# Version 0.0.9 (2015-02-13)\n\n* Updates to track latest rustc changes.\n* Implement standard `Error` trait for `SqliteError`.\n\n# Version 0.0.8 (2015-02-04)\n\n* Updates to track latest rustc changes.\n\n# Version 0.0.7 (2015-01-20)\n\n* Use external bitflags from crates.io.\n\n# Version 0.0.6 (2015-01-10)\n\n* Updates to track latest rustc changes (1.0.0-alpha).\n* Add `query_row_safe`, a `SqliteResult`-returning variant of `query_row`.\n\n# Version 0.0.5 (2015-01-07)\n\n* Updates to track latest rustc changes (closure syntax).\n* Updates to track latest rust stdlib changes (`std::c_str` -> `std::ffi`).\n\n# Version 0.0.4 (2015-01-05)\n\n* Updates to track latest rustc changes.\n\n# Version 0.0.3 (2014-12-23)\n\n* Updates to track latest rustc changes.\n* Add call to `sqlite3_busy_timeout`.\n\n# Version 0.0.2 (2014-12-04)\n\n* Remove use of now-deprecated `std::vec::raw::from_buf`.\n* Update to latest version of `time` crate.\n\n# Version 0.0.1 (2014-11-21)\n\n* Initial release\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.046875,
          "content": "Copyright (c) 2014-2021 The rusqlite developers\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 14.904296875,
          "content": "# Rusqlite\n\n[![Latest Version](https://img.shields.io/crates/v/rusqlite.svg)](https://crates.io/crates/rusqlite)\n[![Documentation](https://docs.rs/rusqlite/badge.svg)](https://docs.rs/rusqlite)\n[![Build Status (GitHub)](https://github.com/rusqlite/rusqlite/workflows/CI/badge.svg)](https://github.com/rusqlite/rusqlite/actions)\n[![Build Status (AppVeyor)](https://ci.appveyor.com/api/projects/status/github/rusqlite/rusqlite?branch=master&svg=true)](https://ci.appveyor.com/project/rusqlite/rusqlite)\n[![Code Coverage](https://codecov.io/gh/rusqlite/rusqlite/branch/master/graph/badge.svg)](https://codecov.io/gh/rusqlite/rusqlite)\n[![Dependency Status](https://deps.rs/repo/github/rusqlite/rusqlite/status.svg)](https://deps.rs/repo/github/rusqlite/rusqlite)\n[![Discord Chat](https://img.shields.io/discord/927966344266256434.svg?logo=discord)](https://discord.gg/nFYfGPB8g4)\n\nRusqlite is an ergonomic wrapper for using SQLite from Rust.\n\nHistorically, the API was based on the one from [`rust-postgres`](https://github.com/sfackler/rust-postgres). However, the two have diverged in many ways, and no compatibility between the two is intended.\n\n## Usage\n\nIn your Cargo.toml:\n\n```toml\n[dependencies]\n# `bundled` causes us to automatically compile and link in an up to date\n# version of SQLite for you. This avoids many common build issues, and\n# avoids depending on the version of SQLite on the users system (or your\n# system), which may be old or missing. It's the right choice for most\n# programs that control their own SQLite databases.\n#\n# That said, it's not ideal for all scenarios and in particular, generic\n# libraries built around `rusqlite` should probably not enable it, which\n# is why it is not a default feature -- it could become hard to disable.\nrusqlite = { version = \"0.32.0\", features = [\"bundled\"] }\n```\n\nSimple example usage:\n\n```rust\nuse rusqlite::{Connection, Result};\n\n#[derive(Debug)]\nstruct Person {\n    id: i32,\n    name: String,\n    data: Option<Vec<u8>>,\n}\n\nfn main() -> Result<()> {\n    let conn = Connection::open_in_memory()?;\n\n    conn.execute(\n        \"CREATE TABLE person (\n            id    INTEGER PRIMARY KEY,\n            name  TEXT NOT NULL,\n            data  BLOB\n        )\",\n        (), // empty list of parameters.\n    )?;\n    let me = Person {\n        id: 0,\n        name: \"Steven\".to_string(),\n        data: None,\n    };\n    conn.execute(\n        \"INSERT INTO person (name, data) VALUES (?1, ?2)\",\n        (&me.name, &me.data),\n    )?;\n\n    let mut stmt = conn.prepare(\"SELECT id, name, data FROM person\")?;\n    let person_iter = stmt.query_map([], |row| {\n        Ok(Person {\n            id: row.get(0)?,\n            name: row.get(1)?,\n            data: row.get(2)?,\n        })\n    })?;\n\n    for person in person_iter {\n        println!(\"Found person {:?}\", person.unwrap());\n    }\n    Ok(())\n}\n```\n\n### Supported SQLite Versions\n\nThe base `rusqlite` package supports SQLite version 3.14.0 or newer. If you need\nsupport for older versions, please file an issue. Some cargo features require a\nnewer SQLite version; see details below.\n\n### Optional Features\n\nRusqlite provides several features that are behind [Cargo\nfeatures](https://doc.rust-lang.org/cargo/reference/manifest.html#the-features-section). They are:\n\n* [`load_extension`](https://docs.rs/rusqlite/~0/rusqlite/struct.LoadExtensionGuard.html)\n  allows loading dynamic library-based SQLite extensions.\n* `loadable_extension` to program [loadable extension](https://sqlite.org/loadext.html) in Rust.\n* [`backup`](https://docs.rs/rusqlite/~0/rusqlite/backup/index.html)\n  allows use of SQLite's online backup API.\n* [`functions`](https://docs.rs/rusqlite/~0/rusqlite/functions/index.html)\n  allows you to load Rust closures into SQLite connections for use in queries.\n* `window` for [window function](https://www.sqlite.org/windowfunctions.html) support (`fun(...) OVER ...`). (Implies `functions`.)\n* [`trace`](https://docs.rs/rusqlite/~0/rusqlite/trace/index.html)\n  allows hooks into SQLite's tracing and profiling APIs.\n* [`blob`](https://docs.rs/rusqlite/~0/rusqlite/blob/index.html)\n  gives `std::io::{Read, Write, Seek}` access to SQL BLOBs.\n* [`limits`](https://docs.rs/rusqlite/~0/rusqlite/struct.Connection.html#method.limit)\n  allows you to set and retrieve SQLite's per connection limits.\n* `chrono` implements [`FromSql`](https://docs.rs/rusqlite/~0/rusqlite/types/trait.FromSql.html)\n  and [`ToSql`](https://docs.rs/rusqlite/~0/rusqlite/types/trait.ToSql.html) for various\n  types from the [`chrono` crate](https://crates.io/crates/chrono).\n* `serde_json` implements [`FromSql`](https://docs.rs/rusqlite/~0/rusqlite/types/trait.FromSql.html)\n  and [`ToSql`](https://docs.rs/rusqlite/~0/rusqlite/types/trait.ToSql.html) for the\n  `Value` type from the [`serde_json` crate](https://crates.io/crates/serde_json).\n* `time` implements [`FromSql`](https://docs.rs/rusqlite/~0/rusqlite/types/trait.FromSql.html)\n  and [`ToSql`](https://docs.rs/rusqlite/~0/rusqlite/types/trait.ToSql.html) for various\n  types from the [`time` crate](https://crates.io/crates/time).\n* `url` implements [`FromSql`](https://docs.rs/rusqlite/~0/rusqlite/types/trait.FromSql.html)\n  and [`ToSql`](https://docs.rs/rusqlite/~0/rusqlite/types/trait.ToSql.html) for the\n  `Url` type from the [`url` crate](https://crates.io/crates/url).\n* `bundled` uses a bundled version of SQLite.  This is a good option for cases where linking to SQLite is complicated, such as Windows.\n* `sqlcipher` looks for the SQLCipher library to link against instead of SQLite. This feature overrides `bundled`.\n* `bundled-sqlcipher` uses a bundled version of SQLCipher. This searches for and links against a system-installed crypto library to provide the crypto implementation.\n* `bundled-sqlcipher-vendored-openssl` allows using bundled-sqlcipher with a vendored version of OpenSSL (via the `openssl-sys` crate) as the crypto provider.\n  - As the name implies this depends on the `bundled-sqlcipher` feature, and automatically turns it on.\n  - If turned on, this uses the [`openssl-sys`](https://crates.io/crates/openssl-sys) crate, with the `vendored` feature enabled in order to build and bundle the OpenSSL crypto library.\n* `hooks` for [Commit, Rollback](http://sqlite.org/c3ref/commit_hook.html) and [Data Change](http://sqlite.org/c3ref/update_hook.html) notification callbacks.\n* `preupdate_hook` for [preupdate](https://sqlite.org/c3ref/preupdate_count.html) notification callbacks. (Implies `hooks`.)\n* `unlock_notify` for [Unlock](https://sqlite.org/unlock_notify.html) notification.\n* `vtab` for [virtual table](https://sqlite.org/vtab.html) support (allows you to write virtual table implementations in Rust). Currently, only read-only virtual tables are supported.\n* `series` exposes [`generate_series(...)`](https://www.sqlite.org/series.html) Table-Valued Function. (Implies `vtab`.)\n* [`csvtab`](https://sqlite.org/csv.html), CSV virtual table written in Rust. (Implies `vtab`.)\n* [`array`](https://sqlite.org/carray.html), The `rarray()` Table-Valued Function. (Implies `vtab`.)\n* `i128_blob` allows storing values of type `i128` type in SQLite databases. Internally, the data is stored as a 16 byte big-endian blob, with the most significant bit flipped, which allows ordering and comparison between different blobs storing i128s to work as expected.\n* `uuid` allows storing and retrieving `Uuid` values from the [`uuid`](https://docs.rs/uuid/) crate using blobs.\n* [`session`](https://sqlite.org/sessionintro.html), Session module extension. Requires `buildtime_bindgen` feature. (Implies `hooks`.)\n* `extra_check` fail when a query passed to execute is readonly or has a column count > 0.\n* `column_decltype` provides `columns()` method for Statements and Rows; omit if linking to a version of SQLite/SQLCipher compiled with `-DSQLITE_OMIT_DECLTYPE`.\n* `collation` exposes [`sqlite3_create_collation_v2`](https://sqlite.org/c3ref/create_collation.html).\n* `serialize` exposes [`sqlite3_serialize`](http://sqlite.org/c3ref/serialize.html) (3.23.0).\n\n## Notes on building rusqlite and libsqlite3-sys\n\n`libsqlite3-sys` is a separate crate from `rusqlite` that provides the Rust\ndeclarations for SQLite's C API. By default, `libsqlite3-sys` attempts to find a SQLite library that already exists on your system using pkg-config, or a\n[Vcpkg](https://github.com/Microsoft/vcpkg) installation for MSVC ABI builds.\n\nYou can adjust this behavior in a number of ways:\n\n* If you use the `bundled`, `bundled-sqlcipher`, or `bundled-sqlcipher-vendored-openssl` features, `libsqlite3-sys` will use the\n  [cc](https://crates.io/crates/cc) crate to compile SQLite or SQLCipher from source and\n  link against that. This source is embedded in the `libsqlite3-sys` crate and\n  is currently SQLite 3.46.0 (as of `rusqlite` 0.32.0 / `libsqlite3-sys`\n  0.30.0).  This is probably the simplest solution to any build problems. You can enable this by adding the following in your `Cargo.toml` file:\n  ```toml\n  [dependencies.rusqlite]\n  version = \"0.32.0\"\n  features = [\"bundled\"]\n  ```\n* When using any of the `bundled` features, the build script will honor `SQLITE_MAX_VARIABLE_NUMBER` and `SQLITE_MAX_EXPR_DEPTH` variables. It will also honor a `LIBSQLITE3_FLAGS` variable, which can have a format like `\"-USQLITE_ALPHA -DSQLITE_BETA SQLITE_GAMMA ...\"`. That would disable the `SQLITE_ALPHA` flag, and set the `SQLITE_BETA` and `SQLITE_GAMMA` flags. (The initial `-D` can be omitted, as on the last one.)\n* When using `bundled-sqlcipher` (and not also using `bundled-sqlcipher-vendored-openssl`), `libsqlite3-sys` will need to\n  link against crypto libraries on the system. If the build script can find a `libcrypto` from OpenSSL or LibreSSL (it will consult `OPENSSL_LIB_DIR`/`OPENSSL_INCLUDE_DIR` and `OPENSSL_DIR` environment variables), it will use that. If building on and for Macs, and none of those variables are set, it will use the system's SecurityFramework instead.\n\n* When linking against a SQLite (or SQLCipher) library already on the system (so *not* using any of the `bundled` features), you can set the `SQLITE3_LIB_DIR` (or `SQLCIPHER_LIB_DIR`) environment variable to point to a directory containing the library. You can also set the `SQLITE3_INCLUDE_DIR` (or `SQLCIPHER_INCLUDE_DIR`) variable to point to the directory containing `sqlite3.h`.\n* Installing the sqlite3 development packages will usually be all that is required, but\n  the build helpers for [pkg-config](https://github.com/alexcrichton/pkg-config-rs)\n  and [vcpkg](https://github.com/mcgoo/vcpkg-rs) have some additional configuration\n  options. The default when using vcpkg is to dynamically link,\n  which must be enabled by setting `VCPKGRS_DYNAMIC=1` environment variable before build.\n  `vcpkg install sqlite3:x64-windows` will install the required library.\n* When linking against a SQLite (or SQLCipher) library already on the system, you can set the `SQLITE3_STATIC` (or `SQLCIPHER_STATIC`) environment variable to 1 to request that the library be statically instead of dynamically linked.\n\n\n### Binding generation\n\nWe use [bindgen](https://crates.io/crates/bindgen) to generate the Rust\ndeclarations from SQLite's C header file. `bindgen`\n[recommends](https://github.com/servo/rust-bindgen#library-usage-with-buildrs)\nrunning this as part of the build process of libraries that used this. We tried\nthis briefly (`rusqlite` 0.10.0, specifically), but it had some annoyances:\n\n* The build time for `libsqlite3-sys` (and therefore `rusqlite`) increased\n  dramatically.\n* Running `bindgen` requires a relatively-recent version of Clang, which many\n  systems do not have installed by default.\n* Running `bindgen` also requires the SQLite header file to be present.\n\nAs of `rusqlite` 0.10.1, we avoid running `bindgen` at build-time by shipping\npregenerated bindings for several versions of SQLite. When compiling\n`rusqlite`, we use your selected Cargo features to pick the bindings for the\nminimum SQLite version that supports your chosen features. If you are using\n`libsqlite3-sys` directly, you can use the same features to choose which\npregenerated bindings are chosen:\n\n* `min_sqlite_version_3_14_0` - SQLite 3.14.0 bindings (this is the default)\n\nIf you use any of the `bundled` features, you will get pregenerated bindings for the\nbundled version of SQLite/SQLCipher. If you need other specific pregenerated binding\nversions, please file an issue. If you want to run `bindgen` at buildtime to\nproduce your own bindings, use the `buildtime_bindgen` Cargo feature.\n\nIf you enable the `modern_sqlite` feature, we'll use the bindings we would have\nincluded with the bundled build. You generally should have `buildtime_bindgen`\nenabled if you turn this on, as otherwise you'll need to keep the version of\nSQLite you link with in sync with what rusqlite would have bundled, (usually the\nmost recent release of SQLite). Failing to do this will cause a runtime error.\n\n## Contributing\n\nRusqlite has many features, and many of them impact the build configuration in\nincompatible ways. This is unfortunate, and makes testing changes hard.\n\nTo help here: you generally should ensure that you run tests/lint for\n`--features bundled`, and `--features \"bundled-full session buildtime_bindgen\"`.\n\nIf running bindgen is problematic for you, `--features bundled-full` enables\nbundled and all features which don't require binding generation, and can be used\ninstead.\n\n### Checklist\n\n- Run `cargo fmt` to ensure your Rust code is correctly formatted.\n- Ensure `cargo clippy --workspace --features bundled` passes without warnings.\n- Ensure `cargo clippy --workspace --features \"bundled-full session buildtime_bindgen\"` passes without warnings.\n- Ensure `cargo test --workspace --features bundled` reports no failures.\n- Ensure `cargo test --workspace --features \"bundled-full session buildtime_bindgen\"` reports no failures.\n\n## Author\n\nRusqlite is the product of hard work by a number of people. A list is available\nhere: https://github.com/rusqlite/rusqlite/graphs/contributors\n\n## Community\n\nFeel free to join the [Rusqlite Discord Server](https://discord.gg/nFYfGPB8g4) to discuss or get help with `rusqlite` or `libsqlite3-sys`.\n\n## License\n\nRusqlite and libsqlite3-sys are available under the MIT license. See the LICENSE file for more info.\n\n### Licenses of Bundled Software\n\nDepending on the set of enabled cargo `features`, rusqlite and libsqlite3-sys will also bundle other libraries, which have their own licensing terms:\n\n- If `--features=bundled-sqlcipher` is enabled, the vendored source of [SQLcipher](https://github.com/sqlcipher/sqlcipher) will be compiled and statically linked in. SQLcipher is distributed under a BSD-style license, as described [here](libsqlite3-sys/sqlcipher/LICENSE).\n\n- If `--features=bundled` is enabled, the vendored source of SQLite will be compiled and linked in. SQLite is in the public domain, as described [here](https://www.sqlite.org/copyright.html).\n\nBoth of these are quite permissive, have no bearing on the license of the code in `rusqlite` or `libsqlite3-sys` themselves, and can be entirely ignored if you do not use the feature in question.\n\n## Minimum supported Rust version (MSRV)\n\nLatest stable Rust version at the time of release. It might compile with older versions.\n\n"
        },
        {
          "name": "appveyor.yml",
          "type": "blob",
          "size": 2.263671875,
          "content": "environment:\n  matrix:\n  - TARGET: x86_64-pc-windows-gnu\n    MSYS2_BITS: 64\n#  - TARGET: x86_64-pc-windows-msvc\n#    VCPKG_DEFAULT_TRIPLET: x64-windows\n#    VCPKGRS_DYNAMIC: 1\n#  - TARGET: x86_64-pc-windows-msvc\n#    VCPKG_DEFAULT_TRIPLET: x64-windows-static\n#    RUSTFLAGS: -Ctarget-feature=+crt-static\ninstall:\n  - appveyor-retry appveyor DownloadFile https://win.rustup.rs/ -FileName rustup-init.exe\n  - rustup-init.exe -y --default-host %TARGET%\n  - set PATH=%PATH%;C:\\Users\\appveyor\\.cargo\\bin\n  - if defined MSYS2_BITS set PATH=%PATH%;C:\\msys64\\mingw%MSYS2_BITS%\\bin\n  - rustc -V\n  - cargo -V\n  # download SQLite dll (useful only when the `bundled` feature is not set)\n  - appveyor-retry appveyor DownloadFile https://sqlite.org/2018/sqlite-dll-win64-x64-3250200.zip -FileName sqlite-dll-win64-x64.zip\n  - if not defined VCPKG_DEFAULT_TRIPLET 7z e sqlite-dll-win64-x64.zip -y > nul\n  # download SQLite headers (useful only when the `bundled` feature is not set)\n  - appveyor-retry appveyor DownloadFile https://sqlite.org/2018/sqlite-amalgamation-3250200.zip -FileName sqlite-amalgamation.zip\n  - if not defined VCPKG_DEFAULT_TRIPLET 7z e sqlite-amalgamation.zip -y > nul\n  # specify where the SQLite dll has been downloaded (useful only when the `bundled` feature is not set)\n  - if not defined VCPKG_DEFAULT_TRIPLET SET SQLITE3_LIB_DIR=%APPVEYOR_BUILD_FOLDER%\n  # specify where the SQLite headers have been downloaded (useful only when the `bundled` feature is not set)\n  - if not defined VCPKG_DEFAULT_TRIPLET SET SQLITE3_INCLUDE_DIR=%APPVEYOR_BUILD_FOLDER%\n  # install sqlite3 package\n  - if defined VCPKG_DEFAULT_TRIPLET vcpkg install sqlite3\n\nbuild: false\n\ntest_script:\n  - cargo test --lib --verbose\n  - cargo test --lib --verbose --features bundled\n  - cargo test --lib --features \"backup blob chrono collation functions hooks limits load_extension serde_json trace\"\n  - cargo test --lib --features \"backup blob chrono functions hooks limits load_extension serde_json trace buildtime_bindgen\"\n  - cargo test --lib --features \"backup blob chrono csvtab functions hooks limits load_extension serde_json trace vtab bundled\"\n  - cargo test --lib --features \"backup blob chrono csvtab functions hooks limits load_extension serde_json trace vtab bundled buildtime_bindgen\"\n\ncache:\n  - C:\\Users\\appveyor\\.cargo\n"
        },
        {
          "name": "benches",
          "type": "tree",
          "content": null
        },
        {
          "name": "clippy.toml",
          "type": "blob",
          "size": 0.048828125,
          "content": "doc-valid-idents = [\"SQLite\", \"lang_transaction\"]\n"
        },
        {
          "name": "codecov.yml",
          "type": "blob",
          "size": 0.21484375,
          "content": "ignore:\n  - \"examples\"\n  - \"libsqlite3-sys/bindgen-bindings\"\n  - \"libsqlite3-sys/sqlite3\"\ncoverage:\n  status:\n    project:\n      default:\n        informational: true\n    patch:\n      default:\n        informational: true\n"
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "libsqlite3-sys",
          "type": "tree",
          "content": null
        },
        {
          "name": "rusqlite-macros",
          "type": "tree",
          "content": null
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "test.csv",
          "type": "blob",
          "size": 0.0703125,
          "content": "\"colA\",\"colB\",\"colC\"\n1,2,3\na,b,c\na,\"b\",c\n\"a\",\"b\",\"c .. z\"\n\"a\",\"b\",\"c,d\"\n"
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}