{
  "metadata": {
    "timestamp": 1736709167048,
    "page": 396,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjQwMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "tokio-rs/loom",
      "stars": 2198,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.017578125,
          "content": "target\nCargo.lock\n"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 7.7080078125,
          "content": "# 0.7.2\n\nThis release bumps the MSRV to 1.65. (#332)\n\n### Added\n\n - Add `Cell::into_inner` (#341)\n\n### Changed\n\n - Update generator to 0.8.1 (#338)\n\n### Fixed\n\n - Disable default features of tracing (#343)\n - Fix typo (#344)\n - Use `core::` instead of `std::` in `lazy_static!` macro (#340)\n - Allow Mutex to work with `?Sized` types (#339)\n\n# 0.7.1 (October 2, 2023)\n\n### Added\n\n- Add `Atomic*::into_inner` (#327)\n- Add `get_mut` to `Mutex` and `RwLock` (#322)\n- Implement `AsRef` and `Borrow` for `Arc` (#325)\n\n# 0.7.0 (August 4, 2023)\n\n### Added\n\n- `explore()`, `stop_exploring()`, `skip_branch()` enable reducing the\n  concurrent state exploration (#323).\n\n# 0.6.1 (July 21, 2023)\n\n### Fixed\n\n- Avoid cancelling generators as it is not a thread-safe operation (#318)\n\n# 0.6.0 (June 17, 2023)\n\n### Changed\n\n- Increase max threads to 5 (#314)\n\n### Added\n\n- Support setting model thread stack size (#311)\n\n### Fixed\n\n- Fix corner case in `RwLock` (#300).\n\n# 0.5.6 (May 19, 2022)\n\n### Added\n\n- cell: add `UnsafeCell::into_inner` for parity with `std` (#272)\n- sync: re-enable `Arc::strong_count` (#172)\n- sync: implement `Arc::try_unwrap` (#262)\n- sync: add `mpsc::Receiver::try_recv` (#262)\n\n### Documented\n\n- show feature flags in docs (#151)\n- fix broken RustDoc links (#273)\n\n# 0.5.5 (May 10, 2022)\n\n### Added\n\n- sync: Add `Arc::from_std` without `T: Sized` bound (#226)\n- sync: Implement `Debug` for `AtomicPtr` for all `T` (#255)\n- logs: Add location tracking for threads and atomic operations (#258)\n- logs: Add additional location tracking to `Arc`, `alloc`, and `mpsc` (#265)\n- logs: Improve `tracing` configuration for `LOOM_LOG` (#266)\n- logs: Add a span for the current model's iteration (#267)\n\n### Documented\n\n- Add note about in-memory representation of atomic types (#253)\n- Document `LOOM_LOG` syntax (#257)\n\n### Fixed\n\n- Fix double panic when exceeding the branch limit in `Drop` (#245)\n- cell: Allow using `{Mut,Const}Ptr::{deref,with}` when the pointee is `!Sized`\n  (#247)\n- thread: Fix semantics of `thread::park` after `Thread::unpark` (#250)\n\n# 0.5.4 (December 3, 2021)\n\n### Added\n\n- cell: Add `ConstPtr` and `MutPtr` RAII guards to `UnsafeCell` (#219)\n\n### Changed\n\n- Improve error message when execution state is unavailable (such as when\n  running outside of `loom::model`) (#242)\n\n# 0.5.3 (November 23, 2021)\n\n### Added\n\n- thread: Add mock versions of `thread::park` and `Thread::unpark` (#240)\n\n### Changed\n\n- Don't attempt to clean up Mutex when threads are deadlocked (#236)\n- Update tracing-subscriber to 0.3 (#238)\n\n# 0.5.2 (October 7, 2021)\n\n### Added\n\n- Add a loom::cell::Cell, which provides a basic wrapper of the loom UnsafeCell (#196)\n- Arc counter manipulations (#225)\n- Implement `Mutex::into_inner` and `RwLock::into_inner` (#215)\n- Implement `Release`, `AcqRel`, and `SeqCst` fences (#220)\n- `Arc::as_ptr` added (#230)\n- `Arc::pin` added (#224)\n\n### Changed\n\n- Remove implicit `T: Sized` requirement from `UnsafeCell` (#222)\n- Update tracing (#227)\n\n# 0.5.1 (July 2, 2021)\n\n### Added\n\n- Add several methods to atomic integer types (#217)\n\n# 0.5.0 (April 12, 2021)\n\n### Breaking\n\n- Bump MSRV to 1.51 (#205)\n\n### Added\n\n- Add `From` implementation to `Mutex` (#131)\n- Add `From` implementation to `RwLock` (#209)\n- Add `From` implementation to atomic types (#210)\n- Add `fetch_update` to atomics (#212)\n\n### Changed\n\n- Move `futures-util` to `dev-dependencies` (#208)\n- Update `generator` to 0.7 (#203)\n\n# 0.4.1 (April 1, 2021)\n\n### Added\n\n- Add a `loom::hint` module containing mocked versions of `spin_loop` and `unreachable_unchecked`. (#197)\n\n### Changed\n\n- Switch to non-deprecated `compare_exchange` (#201)\n\n# 0.4.0 (December 3, 2020)\n\n### Added\n- `AtomicI8`, `AtomicI16`, `AtomicI32`, `AtomicI64`, and `AtomicIsize` (#189)\n\n### Breaking\n- Bump MSRV to `1.45` (#183)\n\n# 0.3.6 (October 8, 2020)\n\n### Added\n- `thread::Thread` and `thread::ThreadId` (#175)\n\n# 0.3.5 (July 26, 2020)\n\n### Fixed\n- An example in the README failing to compile (#132)\n\n### Changed\n- Updated `scoped-tls` to 1.0.0 (#153)\n\n### Added\n- `Send` and `Sync` impls for `JoinHandle` (#145)\n- `Default` impls for `Mutex`, `RwLock`, and `Condvar` (#138)\n\n# 0.3.4 (May 2, 2020)\n\n### Fixed\n- `RwLock` bug with activating threads (#140)\n\n# 0.3.3 (April 28, 2020)\n\n### Fixes\n- `RwLock` bug with two writers (#135).\n\n# 0.3.2 (April 13, 2020)\n\n### Fixed\n- incorrect location tracking for some atomic types (#122).\n\n### Added\n- `lazy_static` support (#125 + #128)\n- `mpsc` channel support (#118)\n\n# 0.3.1 (April 8, 2020)\n\n### Fixed\n- `UnsafeCell` false negative under some scenarios (#119).\n\n### Added\n- `RwLock` support (#88)\n- location tracking to atomic types (#114).\n\n# 0.3.0 (March 24, 2020)\n\n### Breaking\n- `CausalCell` is renamed `UnsafeCell`\n- `Atomic*::get_mut()` is removed in favor of `with` and `with_mut` fns.\n- The max threads setting is removed.\n\n### Fixed\n- Atomic coherence checking better matches the spec.\n\n### Added\n- Models execute much faster\n- Loom types are able to perform location tracking for improved error output.\n\n# 0.2.15 (February 25, 2020)\n\n### Fixed\n- avoid global happens-before with `SeqCst` ordering (#108).\n\n# 0.2.14 (November 19, 2019)\n\n### Fixed\n- internal `async/await` Waker leak (#102).\n\n### Changed\n- speed up model runs (#98, #94)\n\n### Added\n- `Send` impl for `AtomicWaker`, `Atomic*`\n- `AtomicWaker::take_waker` (#103).\n\n# 0.2.13 (November 6, 2019)\n\n### Changed\n- update `futures` to 0.3.0 final release (#96).\n\n# 0.2.12 (October 29, 2019)\n\n### Fixed\n- thread-local bug when using loom with `--release` (#89).\n- omitted state explorations when using SeqCst atomic values (#90).\n\n# 0.2.11 (October 24, 2019)\n\n### Added\n- `Mutex::try_lock` (#83).\n- stubbed `Condvar::wait_timeout` (#86).\n\n# 0.2.10 (October 15, 2019)\n\n### Added\n- `alloc_zeroed` (#77).\n- `AtomicPtr::get_mut` (#80).\n\n# 0.2.9 (October 9, 2019)\n\n### Fixed\n- `thread_local` initialization & dropping with loom primitives (#74).\n\n### Added\n- Basic leak checking (#73).\n- `Arc::get_mut` (#74).\n- mocked `thread::Builder` (#74).\n\n# 0.2.8 (September 30, 2019)\n\n### Chore\n- Update futures-util dependency version (#70).\n\n# 0.2.7 (September 26, 2019)\n\n### Fixed\n- `CausalCell` state was updated even when a deferred check was abandoned (#65).\n- Add `yield_now` in `AtomicWaker` when entering a potential spin lock due to\n  task yielding (#66).\n\n# 0.2.6 (September 25, 2019)\n\n### Changed\n- `futures::block_on` polls spuriously (#59).\n- mocked types match `std` for `Send` and `Sync` (#61).\n\n### Added\n- `fetch_xor` for atomic numbers (#54).\n- initial `atomic::fence` support (#57).\n- `Notify` primitive for writing external mocked types (#60).\n- `thread_local!` macro that works with loom threads (#62).\n- API for deferring `CausalCell` causality checks (#62).\n\n# 0.2.5 (September 4, 2019)\n\n### Added\n- implement `Default` for atomic types (#48).\n\n# 0.2.4 (August 20, 2019)\n\n### Fixed\n- only unblock future thread when notified using waker (#44).\n\n# 0.2.3 (August 17, 2019)\n\n### Fixed\n- `CausalCell` failed to detect concurrent immutable/mutable access (#42).\n\n# 0.2.2 (August 14, 2019)\n\n### Fixed\n- incorrect causality comparison (#38).\n- detect race with CausalCell accessed immediately post spawn (#38).\n\n### Added\n- implementation of all atomic numeric types (#30).\n- `AtomicBool` (#39).\n- `Condvar::notify_all` (#40).\n\n# 0.2.1 (August 10, 2019)\n\n### Chore\n- Update futures-util dependency version (#35).\n\n### Added\n- `sync::Arc` implementation (#9).\n\n# 0.2.0 (August 7, 2019)\n\n### Added\n- `sync::Arc` mock implementation (#14).\n- `AtomicU32` (#24).\n- `Atomic::unsync_load` - load from an atomic without synchronization (#26).\n- thread preemption bounding.\n\n### Changed\n- remove scheduler implementation choices -- generator only (#23).\n- use `std::future` (#20).\n\n# 0.1.1 (February 19, 2019)\n\n### Added\n- `sync::Arc` implementation (#9).\n\n# 0.1.0 (January 8, 2019)\n\n* Initial release\n"
        },
        {
          "name": "Cargo.toml",
          "type": "blob",
          "size": 1.1279296875,
          "content": "[package]\nname = \"loom\"\n# When releasing to crates.io:\n# - Update version number\n#   - README.md\n#   - src/lib.rs\n# - Update CHANGELOG.md\n# - Create git tag\nversion = \"0.7.2\"\nedition = \"2021\"\nlicense = \"MIT\"\nauthors = [\"Carl Lerche <me@carllerche.com>\"]\ndescription = \"Permutation testing for concurrent code\"\nhomepage = \"https://github.com/tokio-rs/loom\"\nrepository = \"https://github.com/tokio-rs/loom\"\nreadme = \"README.md\"\nkeywords = [\"atomic\", \"lock-free\"]\ncategories = [\"concurrency\", \"data-structures\"]\nrust-version = \"1.73\"\n\n[features]\ndefault = []\ncheckpoint = [\"serde\", \"serde_json\"]\nfutures = []\n\n[dependencies]\ncfg-if = \"1.0.0\"\nscoped-tls = \"1.0.0\"\n\n# Provides a generator based runtime\ngenerator = \"0.8.1\"\n\n# Requires for \"checkpoint\" feature\nserde = { version = \"1.0.113\", features = [\"derive\"], optional = true }\nserde_json = { version = \"1.0.33\", optional = true }\n\ntracing = { version = \"0.1.27\", default-features = false, features = [\"std\"] }\ntracing-subscriber = { version = \"0.3.8\", features = [\"env-filter\"] }\n\n[dev-dependencies]\nfutures-util = \"0.3.0\"\n\n[package.metadata.docs.rs]\nall-features = true\nrustdoc-args = [\"--cfg\", \"docsrs\"]\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.0302734375,
          "content": "Copyright (c) 2019 Carl Lerche\n\nPermission is hereby granted, free of charge, to any\nperson obtaining a copy of this software and associated\ndocumentation files (the \"Software\"), to deal in the\nSoftware without restriction, including without\nlimitation the rights to use, copy, modify, merge,\npublish, distribute, sublicense, and/or sell copies of\nthe Software, and to permit persons to whom the Software\nis furnished to do so, subject to the following\nconditions:\n\nThe above copyright notice and this permission notice\nshall be included in all copies or substantial portions\nof the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF\nANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED\nTO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A\nPARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT\nSHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\nOF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR\nIN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\nDEALINGS IN THE SOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 2.86328125,
          "content": "# Loom\n\nLoom is a testing tool for concurrent Rust code. It runs a test many\ntimes, permuting the possible concurrent executions of that test under\nthe [C11 memory model][spec]. It uses [state reduction\ntechniques][cdschecker] to avoid combinatorial explosion.\n\n[![Crates.io](https://img.shields.io/crates/v/loom.svg)](https://crates.io/crates/loom)\n[![Documentation](https://docs.rs/loom/badge.svg)][docs]\n[![Build Status](https://github.com/tokio-rs/loom/actions/workflows/ci.yml/badge.svg)](https://github.com/tokio-rs/loom/actions)\n[![Discord chat](https://img.shields.io/discord/500028886025895936.svg?logo=discord&style=flat-square)](https://discord.com/channels/500028886025895936/628283088555737089)\n\n[docs]: https://docs.rs/loom\n[spec]: https://en.cppreference.com/w/cpp/atomic/memory_order\n[cdschecker]: http://plrg.eecs.uci.edu/publications/toplas16.pdf\n\n## Quickstart\n\nThe [loom documentation][docs] has significantly more documentation on\nhow to use loom. But if you just want a jump-start, first add this to\nyour `Cargo.toml`.\n\n```toml\n[target.'cfg(loom)'.dependencies]\nloom = \"0.7\"\n```\n\nNext, create a test file and add a test:\n\n```rust\nuse loom::sync::Arc;\nuse loom::sync::atomic::AtomicUsize;\nuse loom::sync::atomic::Ordering::{Acquire, Release, Relaxed};\nuse loom::thread;\n\n#[test]\n#[should_panic]\nfn buggy_concurrent_inc() {\n    loom::model(|| {\n        let num = Arc::new(AtomicUsize::new(0));\n\n        let ths: Vec<_> = (0..2)\n            .map(|_| {\n                let num = num.clone();\n                thread::spawn(move || {\n                    let curr = num.load(Acquire);\n                    num.store(curr + 1, Release);\n                })\n            })\n            .collect();\n\n        for th in ths {\n            th.join().unwrap();\n        }\n\n        assert_eq!(2, num.load(Relaxed));\n    });\n}\n```\n\nThen, run the test with\n\n```console\nRUSTFLAGS=\"--cfg loom\" cargo test --test buggy_concurrent_inc --release\n```\n\n## Unsupported features\nLoom currently does not implement the full C11 memory model.\nHere is the (incomplete) list of unsupported features.\n* `SeqCst` accesses (e.g. `load`, `store`, ..):\n  They are regarded as `AcqRel`. That is, they impose weaker\n  synchronization, causing Loom to generate false alarms (not complete). See\n  [#180](https://github.com/tokio-rs/loom/issues/180) for example. On the other\n  hand, `fence(SeqCst)` is supported.\n* Load buffering behavior:\n  Loom does not explore some executions that are possible in the C11 memory\n  model. That is, there can be a bug in the checked code even if Loom says\n  there is no bug (not sound).  See the `load_buffering` test case in\n  `tests/litmus.rs`.\n\n## License\n\nThis project is licensed under the [MIT license](LICENSE).\n\n### Contribution\n\nUnless you explicitly state otherwise, any contribution intentionally\nsubmitted for inclusion in `loom` by you, shall be licensed as MIT,\nwithout any additional terms or conditions.\n"
        },
        {
          "name": "ci",
          "type": "tree",
          "content": null
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}