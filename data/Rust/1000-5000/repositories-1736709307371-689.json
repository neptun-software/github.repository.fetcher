{
  "metadata": {
    "timestamp": 1736709307371,
    "page": 689,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjY5MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "bitshifter/glam-rs",
      "stars": 1585,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.0322265625,
          "content": "*.rs.tera linguist-language=Rust\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.083984375,
          "content": "**/target\n*.json\n*.swp\n**/*.rs.bk\nCargo.lock\nSession.vim\n.cargo-ok\ncargo-timing*.html\n"
        },
        {
          "name": ".tarpaulin.toml",
          "type": "blob",
          "size": 1.0419921875,
          "content": "[sse2_math]\nfeatures = \"approx bytemuck mint rand rkyv serde debug-glam-assert\"\nexclude-files = [\n    \"codegen/*\",\n    \"src/neon.rs\",\n    \"src/bool/neon/*\",\n    \"src/f32/neon/*\",\n    \"src/swizzles/neon/*\",\n    \"src/wasm32.rs\",\n    \"src/bool/wasm32/*\",\n    \"src/f32/wasm32/*\",\n    \"src/swizzles/wasm32/*\",\n    \"benches/*\",\n    \"tests/support.rs\"\n]\n\n[scalar_math]\nfeatures = \"scalar-math approx bytemuck mint rand rkyv serde debug-glam-assert\"\nexclude-files = [\n    \"codegen/*\",\n    \"src/neon.rs\",\n    \"src/bool/neon/*\",\n    \"src/f32/neon/*\",\n    \"src/swizzles/neon/*\",\n    \"src/wasm32.rs\",\n    \"src/bool/wasm32/*\",\n    \"src/f32/wasm32/*\",\n    \"src/swizzles/wasm32/*\",\n    \"benches/*\",\n    \"tests/support.rs\"\n]\n\n[core_simd]\nfeatures = \"core-simd approx bytemuck mint rand rkyv serde debug-glam-assert\"\nexclude-files = [\n    \"codegen/*\",\n    \"src/neon.rs\",\n    \"src/bool/neon/*\",\n    \"src/f32/neon/*\",\n    \"src/swizzles/neon/*\",\n    \"src/wasm32.rs\",\n    \"src/bool/wasm32/*\",\n    \"src/f32/wasm32/*\",\n    \"src/swizzles/wasm32/*\",\n    \"benches/*\",\n    \"tests/support.rs\"\n]\n"
        },
        {
          "name": "ARCHITECTURE.md",
          "type": "blob",
          "size": 3.7744140625,
          "content": "# Architecture\n\nThis document describes the high-level architecture of `glam`. While `glam` is\nnot a large library there are some complexities to its implementation. The\nrational and explanation of these follows.\n\n## Design goals\n\nThere overarching design goals of glam are:\n\n* Good out of the box performance using SIMD when available\n* Has a simple public interface\n* Is fast to compile\n* Follow Rust [standard library] conventions and [API guidelines] where possible\n* High quality [rustdoc] generated document\n\n[standard library]: https://doc.rust-lang.org/std/index.html\n[API guidelines]: https://rust-lang.github.io/api-guidelines\n[rustdoc]: https://doc.rust-lang.org/rustdoc/index.html\n\n### SIMD\n\nOne of the core premises of `glam` was that using SSE2 instructions on `x86` and\n`x86_64` architectures gave better performance than using Rust's built in `f32`\ntype. For more on this finding see [Optimising path tracing with SIMD].\n\nI also wanted to have a `f32` fallback when SIMD was not available.\n\n[Optimising path tracing with SIMD]: https://bitshifter.github.io/2018/06/04/simd-path-tracing/#converting-vec3-to-sse2.\n\n### No generics\n\nBecause internally storage could be a SIMD vector intrinsic like `__m128` on\n`x86` or say an array of `f32` if SSE2 was not available, a simple generic\nparameter like `Vec4<T>` could not be used. The `T` would specify the public\nfacing type, but not storage. Perhaps this could be achieved with a second\ngeneric parameter for storage, e.g. `Vec4<f32, __m128>` or `Vec4<f32, [f32; 4]>`\nbut I felt that such a design would introduce a lot of complexity that end users\nwould ultimately be burdened with, so it's not something that was pursued.\n\nGenerics can also increase compile time and code size which is something glam\nwants to avoid.\n\n### No traits\n\n`glam` also mostly avoids using traits in the public interface. Primarily\nbecause there wasn't a good reason to. A `Vec3` is not an interface, it is a\nconcrete type. The secondary reason is traits fragment documentation. If the\nfunctionality of a `Vec3` is implemented across a number of different traits\nthen the documentation of all of the `Vec3` methods will be on the individual\ntraits, not the `Vec3` itself. This makes it harder for users to find what\nmethods a struct actually implements as the documentation is not in one place.\n\nConversely `glam` does use traits for swizzle methods so that the documentation\nfor these methods is on the trait and not the `Vec2`, `Vec3`, `Vec4` and so on\nstructs. There are many swizzle methods which would clutter the documentation,\nmaking them a trait means they won't pollute documentation.\n\n### Support common primitives\n\nInitially `glam` only supported `f32` which kept the internal implementation\nrelatively simple. However users also wanted support for other primitives types\nlike `f64`, `i32` and `u32`. Because `glam` avoids using `generics` adding\nsupport for other primitive types without a lot of code duplication required\nsome additional complexity in implementation.\n\n## High level structure\n\n`glam` supports a number of permutations of vector, quaternion and matrix types\nfor `f32`, `f64`, `i32` and `u32` primitives, with SSE2 or wasm32 for some `f32`\ntypes and scalar fallbacks if SIMD is not available.\n\n### Component access via Deref\n\nThe `Deref` trait is used to provide direct access to SIMD vector components\nlike `.x`, `.y` and so on.  The `Deref` implementation will return `XYZ<T>`\nstructure on which the vector components are accessible. Unfortunately if users\ndereference the public types they will see confusing errors messages about\n`XYZ` types but this on balance seemed preferable to needing to setter and\ngetting methods to read and write component values.\n\n## Code generation\n\nSee the [codegen README] for information on `glam`'s code generation process.\n\n[codegen README]: codegen/README.md\n"
        },
        {
          "name": "ATTRIBUTION.md",
          "type": "blob",
          "size": 3.630859375,
          "content": "# Attribution\n\n`glam` contains code ported from the following C++ libraries.\n\n## [DirectXMath]\n\n[DirectXMath]: https://docs.microsoft.com/en-us/windows/win32/dxmath/directxmath-portal\n\n[The MIT License (MIT)](https://github.com/microsoft/DirectXMath/blob/master/LICENSE)\n\nCopyright (c) 2011-2020 Microsoft Corp\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this\nsoftware and associated documentation files (the \"Software\"), to deal in the Software\nwithout restriction, including without limitation the rights to use, copy, modify,\nmerge, publish, distribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to the following\nconditions:\n\nThe above copyright notice and this permission notice shall be included in all copies\nor substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,\nINCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A\nPARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\nHOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF\nCONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE\nOR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n## [Realtime Math]\n\n[Realtime Math]: https://github.com/nfrechette/rtm\n\n[MIT License](https://github.com/nfrechette/rtm/blob/develop/LICENSE)\n\nCopyright (c) 2018 Nicholas Frechette\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n## [GLM]\n\n[GLM]: https://glm.g-truc.net\n\n[The MIT License](https://github.com/g-truc/glm/blob/master/copying.txt)\n\nCopyright (c) 2005 - G-Truc Creation\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 39.216796875,
          "content": "# Changelog\n\nAll notable changes to this project will be documented in this file.\n\nThe format is based on [Keep a Changelog], and this project adheres to\n[Semantic Versioning].\n\n## [0.29.2] - 2024-11-05\n\n### Fixed\n\n* Fix regression in vector `write_to_slice` methods where the destination had to\n  be the same size as the input, but it should support writing to a slice that\n  is the same size or larger than the input.\n\n## [0.29.1] - 2024-10-30\n\n### Added\n\n* Added `i8` and `u8` vector types, `I8Vec2`, `I8Vec3`, `I8Vec4`,\n  `U8Vec2`, `U8Vec3` and `U8Vec4`.\n\n* Added `Mat4::project_point3a(Vec3A)` method transforming points by\n  perspective projections.\n\n### Changed\n\n* Removed normalized assertions from quaternion multiplies as sometimes this is\n  valid.\n\n* Include `Debug` and `Display` implementations on `spirv` targets.\n\n* Optimized vector `from_slice` and `write_to_slice` methods.\n\n* Improved serde error messages.\n\n## [0.29.0] - 2024-08-20\n\n### Breaking changes\n\n* `EulerRot` has been reimplemented and now has support for 24 different\n  rotation order enum values.\n\n### Fixed\n\n* Reduced the dot threshold at which quaternion slerp uses lerp to improve\n  accuracy.\n\n### Added\n\n* Added 3x3 matrix `from_mat4_minor()` and 2x2 matrix `from_mat3_minor()`\n  methods.\n\n* Added `bvec2`, `bvec3`, `bvec3a`, `bvec4` and `bvec4a` vector mask creation\n  functions.\n\n* Added all 24 possible intrinsic and extrinsic Euler angle rotation\n  combinations to `EulerRot` enum.\n\n* Added `is_finite_mask` method to vector types which returns a vector mask.\n\n* Added `reflect` and `refract` methods to vector types.\n\n* Added `to_euler` methods to matrix types which extracts Euler angles from a\n  rotation matrix for a given `EulerRot`.\n\n* Added generic `map` method to vector types which applies a functor to all\n  vector elements.\n\n* Vector arithmetic ops are now implemented on references.\n\n### Changed\n\n* Vector and quaternion lerp now uses a precise lerp algorithm.\n\n## [0.28.0] - 2024-06-10\n\n### Breaking changes\n\n* Removed derives from `glam::deref` types used by `Deref` on SIMD vector\n  types.  These unintentionally added support for traits like `PartialOrd` to\n  SIMD vector types. This may break existing code that was depending on this.\n  Please use `cmple().all()` etc. instead of `PartialOrd` methods.\n\n* Removed `impl From<Vec4> for Vec3A` as this violated the `From` trait\n  contract that conversions should be lossless. Please use the explicit\n  `Vec3A::from_vec4` method instead.\n\n* Renamed 2D vector `angle_between` to `angle_to` to differentiate from the 3D\n  `angle_between` which has different semantics to the 2D version.\n\n### Added\n\n* Added aarch64 neon support.\n\n* Added `rotate_towards` methods for 2D vectors and quaternions.\n\n* Added `Vec3A::from_vec4` method which can perform a no-op conversion when\n  SIMD is used. This replaces the `impl From<Vec4> for Vec3A` implementation.\n\n## [0.27.0] - 2024-03-23\n\n### Breaking changes\n\n* Changed implementation of vector `fract` method to match the Rust\n  implementation instead of the GLSL implementation, that is `self -\n  self.trunc()` instead of `self - self.floor()`.\n\n### Added\n\n* Added vector `fract_gl` which uses the GLSL specification of fract,\n `self - self.floor()`.\n\n## [0.26.0] - 2024-03-18\n\n### Breaking changes\n\n* Minimum Supported Rust Version bumped to 1.68.2 for\n `impl From<bool> for {f32,f64}` support.\n\n### Fixed\n\n* Respect precision format specifier in Display implementations. Previously it\n  was ignored.\n\n* Corrected precision documentation for vector `is_normalized` methods and\n  changed the internal check to use `2e-4` to better match the documented\n  precision value of `1e-4`.\n\n### Added\n\n * Added `with_x`, `with_y`, etc. to vector types which returns a copy of\n   the vector with the new component value.\n\n * Added `midpoint` method to vector types that returns the point between two\n   points.\n\n * Added `move_towards` for float vector types.\n\n * Added saturating add and sub methods for signed and unsigned integer vector\n   types.\n\n * Added element wise sum and product methods for vector types.\n\n * Added element wise absolute values method for matrix types.\n\n * Added `from_array` method for boolean vector types.\n\n * Added `normalize_or` method to vector types that returns the specified value\n   if normalization failed.\n\n * Added `From<BVecN>` support for all vector types.\n\n * Added `Div` and `DivAssign` by scalar implementations to matrix types.\n\n## [0.25.0] - 2023-12-19\n\n### Breaking changes\n\n* Changed `Vec4` to always used `BVec4A` as a mask type, regardless if the\n  target architecture has SIMD support in glam. Previously this was inconsistent\n  on different hardware like ARM. This will have a slight performance cost when\n  SIMD is not available. `Vec4` will continue to use `BVec4` as a mask type when\n  the `scalar-math` feature is used.\n\n### Fixed\n\n* Made `Affine2` implement the `bytemuck::AnyBitPattern` trait instead of\n  `bytemuck::Pod` as it contains internal padding due to `Mat2` being 16 byte\n  aligned.\n\n* Updated the `core-simd` implementation to build on latest nightly.\n\n### Added\n\n* Added `to_angle` method to 2D vectors.\n\n* Added `FloatExt` trait which adds `lerp`, `inverse_lerp` and `remap` methods\n  to `f32` and `f64` types.\n\n* Added `i16` and `u16` vector types, `I16Vec2`, `I16Vec3`, `I16Vec4`,\n  `U16Vec2`, `U16Vec3` and `U16Vec4`.\n\n### Changed\n\n* Renamed `Quat::as_f64()` to `Quat::as_dquat()` and `DQuat::as_f32()` to\n  `DQuat::as_quat()` to be consistent with other types. The old methods have\n  been deprecated.\n\n* Added the `#[must_use]` attribute to all pure functions following the\n  guidelines for the Rust standard library.\n\n## [0.24.2] - 2023-09-23\n\n### Fixed\n\n* Fixed singularities in `Quat::to_euler`.\n\n### Added\n\n* Added `div_euclid` and `rem_euclid` to integer vector types.\n\n* Added wrapping and saturating arithmetic operations to integer vector types.\n\n* Added `to_scale_angle_translation` to 2D affine types.\n\n* Added `mul_assign` ops to affine types.\n\n### Changed\n\n* Disable default features on optional `rkyv` dependency.\n\n## [0.24.1] - 2023-06-24\n\n### Added\n\n* Implemented missing `bytemuck`, `mint`, `rand`, `rkyv` and `serde` traits for\n  `i64` and `u64` types.\n\n* Added missing safe `From` conversions from `f32` vectors to `f64` vectors.\n\n* Added `TryFrom` implementations between different vector types.\n\n* Added `test` and `set` methods to `bool` vector types for testing and setting\n  individual mask elements.\n\n* Added `MIN`, `MAX`, `INFINITY` and `NEG_INFINITY` vector constants.\n\n## [0.24.0] - 2023-04-24\n\n### Breaking changes\n\n* Enabling `libm` in a `std` build now overrides the `std` math functions. This\n  is unlikely to break anything but it is a change in behavior.\n\n### Added\n\n* Added `i64` and `u64` vector types; `I64Vec2`, `I64Vec3`, `I64Vec4`,\n  `U64Vec2`, `U64Vec3` and `U64Vec4`.\n\n* Added `length_squared` method on signed and unsigned integer vector types.\n\n* Added `distance_squared` method on signed integer vector types.\n\n* Implemented the `bytemuck` `AnyBitPattern` trait on `Vec3A`, `Mat3A` and\n  `Affine3A`.\n\n### Changed\n\n* Changed quaternion `to_axis_angle` for improved numerical stability.\n\n### Removed\n\n* Removed dependency on `serde_derive` for improved compile times when using\n  `serde`.\n\n## [0.23.0] - 2023-02-22\n\n### Breaking changes\n\n* When the `scalar-math` feature is enabled the vector mask type for `Vec3A` was\n  changed from `BVec3` to `BVec3A`.\n\n### Added\n\n* Added `copysign` method to signed vector types.\n\n## [0.22.0] - 2022-10-24\n\n### Breaking changes\n\n* Added `u32` implementation of `BVec3A` and `BVec4` when SIMD is not available.\n  These are used instead of aliasing to the `bool` implementations.\n\n* Removed `Add`, `Sub`, and scalar `Mul` implementations from affine types as\n  they didn't make sense on these types.\n\n* Removed deprecated `const_*` macros. These have been replaced by `const fn`\n  methods.\n\n### Fixed\n\n* Fixed `neg` and `signum` to consistently handle negative zero across multiple\n  platforms.\n\n* Removed `register_attr` feature usage for SPIR-V targets.\n\n### Added\n\n* Added missing `Serialize`, `Deserialize` and `PartialEq` implementations.\n\n* Added `Sum<Self>` and `Product<Self>` implementations for all vector, matrix\n  and quaternion types.\n\n* Added 4x4 matrix methods `look_to_lh` and `look_to_rh`. These were previously\n  private.\n\n* Added `dot_into_vec` methods to vector which returns the result of the dot\n  product splatted to all vector lanes.\n\n* Added `is_negative_bitmask` to vector types which returns a `u32` of bits for\n  each negative vector lane.\n\n* Added `splat` method and `TRUE` and `FALSE` constants to all `BVec` types.\n\n* Added `from_mat3a` methods to `Affine2`, `Mat2`, `Mat4` and `Quat` types.\n\n### Changed\n\n* Disable `serde` default features.\n\n* Made `to_cols_array`, `to_cols_array_2d`, and `from_diagonal` methods\n `const fn`.\n\n## [0.21.3] - 2022-08-02\n\n### Fixed\n\n* Fixed `glam_assert` being too restrictive in matrix transform point and\n  transform vector methods.\n\n### Added\n\n* Added experimental `core-simd` feature which enables SIMD support via the\n  unstable `core::simd` module.\n\n### Changed\n\n* Derive from `PartialEq` and `Eq` instead of providing a trait implementation\n  for all non SIMD types.\n\n## [0.21.2] - 2022-06-25\n\n### Fixed\n\n* Restore missing `$crate::` prefix in deprecated `const_*` macros.\n\n* Fixed some performance regressions in affine and matrix determinant and\n  inverses due to lack of inlining.\n\n* Fixed some performance regressions in the SSE2 `Vec3A` to `Vec3` from\n  conversion.\n\n### Added\n\n* Implemented `BitXor` and `BitXorAssign` traits for `bool` vectors.\n\n## [0.21.1] - 2022-06-22\n\n### Fixed\n\n* Fix compilation when FMA support is enabled.\n\n## [0.21.0] - 2022-06-22\n\n### Breaking changes\n\n* Minimum Supported Version of Rust bumped to 1.58.1 to allow `const` pointer\n  dereferences in constant evaluation.\n\n* The `abs_diff_eq` method on `Mat2` and `DMat2` now takes `other` by value\n  instead of reference. This is consistent with the other matrix types.\n\n* The `AsMut` and `Deref` trait implementations on `Quat` and `DQuat` was\n  removed. Quaternion fields are now public.\n\n* The `AsRef` trait implementations were removed from `BVec2`, `BVec3`,\n  `BVec3A`, `BVec4` and `BVec4A`.\n\n### Added\n\n* `NEG_ONE` constant was added to all signed vector types.\n\n* `NEG_X`, `NEG_Y`, `NEG_Z` and `NEG_W` negative axis vectors were added to\n  signed vector types.\n\n* The `rotate` and `from_angle` methods were added to `Vec2` and `DVec2`.\n  `from_angle` returns a 2D vector containing `[angle.cos(), angle.sin()]` that\n  can be used to `rotate` another 2D vector.\n\n* The `from_array` `const` function was added to all vector types.\n\n### Changed\n\n* Source code is now largely generated. This removes most usage of macros\n  internally to improve readability. There should be no change in API or\n  behavior other than what is documented here.\n\n* Many methods have been made `const fn`:\n  * `new`, `splat`, `from_slice`, `to_array` and `extend` on vector types\n  * `from_cols`, `from_cols_array`, `from_cols_array_2d`, `from_cols_slice` on\n    matrix types\n  * `from_xyzw` and `from_array` on quaternion types\n  * `from_cols` on affine types\n\n* The `const` new macros where deprecated.\n\n### Removed\n\n* Deleted deprecated `TransformRT` and `TransformSRT` types.\n\n## [0.20.5] - 2022-04-12\n\n### Fixed\n\n* Fixed a bug in the scalar implementation of 4D vector `max_element` method\n  where the `w` element check was incorrect.\n\n## [0.20.4] - 2022-04-11\n\n### Fixed\n\n* Fixed a bug with quaternion `slerp` with a rotation of tau.\n\n## [0.20.3] - 2022-03-28\n\n### Added\n\n* Added `to_array()` to `Quat` and `DQuat`.\n* Added `mul_add` method to all vector types - note that this will be slower\n  without hardware support enabled.\n* Added the `fast-math` flag which will sacrifice some float determinism for\n  speed.\n\n### Fixed\n\n* Fixed a bug in the `sse2` and `wasm32` implementations of\n  `Mat4::determinant()`.\n\n## [0.20.2] - 2021-12-20\n\n### Fixed\n\n* Fixed SPIR-V build which was broken due to a typo.\n\n## [0.20.1] - 2021-11-23\n\n### Added\n\n* Added the `from_rotation_arc_2d()` method to `Quat` and `DQuat` which will\n  return a rotation between two 2D vectors around the z axis.\n* Added impl of `Neg` operator for matrix types.\n* Added `cuda` feature which forces `glam` types to match cuda's alignment\n  requirements.\n\n### Changed\n\n* The `Quat` and `DQuat` methods `from_rotation_arc()` and\n  `from_rotation_arc_colinear()` are now available in `no_std`.\n* The `Vec3` and `DVec3` methods `any_orthogonal_vector()`,\n  `any_orthonormal_vector()` and `any_orthonormal_pair()` are now available in\n  `no_std`.\n* Added `repr(C)` attribute to affine types.\n\n### Removed\n\n* Removed deprecated `as_f32()`, `as_f64()`, `as_i32()` and `as_u32()` methods.\n\n## [0.20.0] - 2021-11-01\n\n### Breaking changes\n\n* Minimum Supported Version of Rust bumped to 1.52.1 for an update to the `mint`\n  crate.\n\n### Added\n\n* Added implementations for new `IntoMint` trait from the `mint` crate.\n* Added `mint` conversions for `Mat3A`.\n* Added `as_vec3a` cast methods to vector types.\n\n## [0.19.0] - 2021-10-05\n\n### Breaking changes\n\n* Removed truncating vector `From` implementations. Use `.truncate()` or swizzle\n  methods instead.\n\n### Added\n\n* Added `Not`, `Shl`, `Shr`, `BitAnd`, `BitOr` and `BitXor` implementations for\n  all `IVec` and `UVec` vector types.\n* Added `NAN` constant for all types.\n* Documented `glam`'s [architecture](ARCHITECTURE.md).\n\n### Changed\n\n* `Sum` and `Product` traits are now implemented in `no_std` builds.\n\n## [0.18.0] - 2021-08-26\n\n### Breaking changes\n\n* Minimum Supported Version of Rust bumped to 1.51.0 for `wasm-bindgen-test`\n  and `rustdoc` `alias` support.\n\n### Added\n\n* Added `wasm32` SIMD intrinsics support.\n* Added optional support for the `rkyv` serialization crate.\n* Added `Rem` and `RemAssign` implementations for all vector types.\n* Added quaternion `xyz()` method for returning the vector part of the\n  quaternion.\n* Added `From((Scalar, Vector3))` for 4D vector types.\n\n### Changed\n\n* Deprecated `as_f32()`, `as_f64()`, `as_i32()` and `as_u32()` methods in favor\n  of more specific methods such as `as_vec2()`, `as_dvec2()`, `as_ivec2()` and\n  `as_uvec2()` and so on.\n\n## [0.17.3] - 2021-07-18\n\n### Fixed\n\n* Fix alignment unit tests on non x86 platforms.\n\n## [0.17.2] - 2021-07-15\n\n### Fixed\n\n* Fix alignment unit tests on i686 and S390x.\n\n## [0.17.1] - 2021-06-29\n\n### Added\n\n* Added `serde` support for `Affine2`, `DAffine2`, `Affine3A` and `DAffine3`.\n\n## [0.17.0] - 2021-06-26\n\n### Breaking changes\n\n* The addition of `Add` and `Sub` implementations of scalar values for vector\n  types may create ambiguities with existing calls to `add` and `sub`.\n* Removed `From<Mat3>` implementation for `Mat2` and `From<DMat3>` for `DMat2`.\n  These have been replaced by `Mat2::from_mat3()` and `DMat2::from_mat3()`.\n* Removed `From<Mat4>` implementation for `Mat3` and `From<DMat4>` for `DMat3`.\n  These have been replaced by `Mat3::from_mat4()` and `DMat3::from_mat4()`.\n* Removed deprecated `from_slice_unaligned()`, `write_to_slice_unaligned()`,\n  `from_rotation_mat4` and `from_rotation_ypr()` methods.\n\n### Added\n\n* Added `col_mut()` method which returns a mutable reference to a matrix column\n  to all matrix types.\n* Added `AddAssign`, `MulAssign` and `SubAssign` implementations for all matrix\n  types.\n* Added `Add` and `Sub` implementations of scalar values for vector types.\n* Added more `glam_assert!` checks and documented methods where they are used.\n* Added vector projection and rejection methods `project_onto()`,\n  `project_onto_normalized()`, `reject_from()` and `reject_from_normalized()`.\n* Added `Mat2::from_mat3()`, `DMat2::from_mat3()`, `Mat3::from_mat4()`,\n  `DMat3::from_mat4()` which create a smaller matrix from a larger one,\n  discarding a final row and column of the input matrix.\n* Added `Mat3::from_mat2()`, `DMat3::from_mat2()`, `Mat4::from_mat3()` and\n  `DMat4::from_mat3()` which create an affine transform from a smaller linear\n  transform matrix.\n\n### Changed\n\n* Don't support `AsRef` and `AsMut` on SPIR-V targets. Also removed SPIR-V\n  support for some methods that used `as_ref()`, including `hash()`. Not a\n  breaking change as these methods would not have worked anyway.\n\n### Fixed\n\n* Fixed compile time alignment checks failing on i686 targets.\n\n## [0.16.0] - 2021-06-06\n\n### Breaking changes\n\n* `sprirv-std` dependency was removed, rust-gpu depends on glam internally\n  again for now.\n* Added `must_use` attribute to all `inverse()`, `normalize()`,\n  `try_normalize()`, `transpose()` and `conjugate()` methods.\n\n### Added\n\n* Added `fract()` method to float vector types which return a vector containing\n  `self - self.floor()`.\n* Added optional support for the `approx` crate. Note that all glam types\n  implement their own `abs_diff_eq()` method without requiring the `approx`\n  dependency.\n\n## [0.15.2] - 2021-05-20\n\n### Added\n\n* Added `from_cols()` methods to affine types.\n* Added methods for reading and writing affine types from and to arrays and\n  slices, including `from_cols_array()`, `to_cols_array()`,\n  `from_cols_array_2d()`, `to_cols_array_2d()`, `from_cols_slice()` and\n  `write_cols_to_slice()`.\n* Added `core::fmt::Display` trait implementations for affine types.\n* Added `core::ops::Add`, `core::ops::Mul` scalar and `core::ops::Sub` trait\n  implementations for affine types.\n* Added `from_array()` methods to quaternion types.\n\n### Changed\n\n* Renamed vector and quaternion `from_slice_unaligned()` and\n  `write_to_slice_unaligned()` methods to `from_slice()` and\n  `write_to_slice()`.\n* Removed usage of `_mm_rcp_ps` from SSE2 implementation of `Quat::slerp` as\n  this instruction is not deterministic between Intel and AMD chips.\n\n## [0.15.1] - 2021-05-14\n\n### Changed\n\n* Disable `const_assert_eq!` size and alignment checks for SPIR-V targets.\n\n## [0.15.0] - 2021-05-14\n\n### Breaking changes\n\n* Removed `PartialOrd` and `Ord` trait implementations for all `glam` types.\n* Removed deprecated `zero()`, `one()`, `unit_x()`, `unit_y()`, `unit_z()`,\n  `unit_w()`, `identity()` and `Mat2::scale()` methods.\n* Remove problematic `Quat` `From` trait conversions which would allow creating\n  a non-uniform quaternion without necessarily realizing, including from\n  `Vec4`, `(x, y, z, w)` and `[f32; 4]`.\n\n### Added\n\n* Added `EulerRot` enum for specifying Euler rotation order and\n  `Quat::from_euler()`, `Mat3::from_euler()` and `Mat4::from_euler()` which\n  support specifying a rotation order and angles of rotation.\n* Added `Quat::to_euler()` method for extracting Euler angles.\n* Added `Quat::from_vec4()` which is an explicit method for creating a\n  quaternion from a 4D vector. The method does not normalize the resulting\n  quaternion.\n* Added `Mat3A` type which uses `Vec3A` columns. It is 16 byte aligned and\n  contains internal padding but it generally faster than `Mat3` for most\n  operations if SIMD is available.\n* Added 3D affine transform types `Affine3A` and `DAffine3`. These are more\n  efficient than using `Mat4` and `DMat4` respectively when working with 3D\n  affine transforms.\n* Added 2D affine transform types `Affine2` and `DAffine2`. These are more\n  efficient than using `Mat3` and `DMat3` respectively when working with 2D\n  affine transforms.\n* Added `Quat::from_affine3()` to create a quaternion from an affine transform\n  rotation.\n* Added explicit `to_array()` method to vector types to better match the matrix\n  methods.\n\n### Changed\n\n* Deprecated `Quat::from_rotation_ypr()`, `Mat3::from_rotation_ypr()` and\n  `Mat4::from_rotation_ypr()` in favor of new `from_euler()` methods.\n* Deprecated `Quat::from_rotation_mat3()` and `Quat::from_rotation_mat4()` in\n  favor of new `from_mat3` and `from_mat4` methods.\n* Deprecated `TransformSRT` and `TransformRT` which are under the\n  `transform-types` feature. These will be moved to a separate experimental\n  crate.\n* Updated `spirv-std` dependency version to `0.4.0-alpha7`.\n\n## [0.14.0] - 2021-04-09\n\n### Breaking changes\n\n* Minimum Supported Version of Rust bumped to 1.45.0 for the `spirv-std`\n  dependency.\n\n### Added\n\n* Added `AXES[]` constants to all vector types. These are arrays containing the\n  unit vector for each axis.\n* Added quaternion `from_scaled_axis` and `to_scaled_axis` methods.\n\n### Changed\n\n* Updated dependency versions of `bytemuck` to `1.5`, `rand` to `0.8`,\n  `rand_xoshiro` to `0.6` and `spirv-std` to `0.4.0-alpha4`.\n\n## [0.13.1] - 2021-03-24\n\n### Added\n\n* Added vector `clamp()` functions.\n* Added matrix column and row accessor methods, `col()` and `row()`.\n* Added SPIR-V module and dependency on `spirv-std` for the SPIR-V target.\n* Added matrix truncation from 4x4 to 3x3 and 3x3 to 2x2 via `From` impls.\n\n### Changed\n\n* Documentation corrections and improvements.\n\n## [0.13.0] - 2021-03-04\n\n### Breaking Changes\n\n* The behavior of the 4x4 matrix method `transform_point3()` was changed to not\n  perform the perspective divide. This is an optimization for use with affine\n  transforms where perspective correction is not required. The\n  `project_point3()` method was added for transforming points by perspective\n  projections.\n* The 3x3 matrix `from_scale()` method was changed to\n  create a affine transform containing a 2-dimensional non-uniform scale to be\n  consistent with the 4x4 matrix version. The\n  `from_diagonal()` method can be used to create a 3x3 scale matrix.\n* The 3x3 matrix methods `transform_point2_as_vec3a`,\n  `transform_vector2_as_vec3a` and `mul_vec3_as_vec3a` were unintentionally\n  `pub` and are no longer publicly accessible.\n\n### Added\n\n* Added `Vec2::X`, `Vec4::W` etc constants as a shorter versions of `unit_x()`\n  and friends.\n* Added `ONE` constants for vectors.\n* Added `IDENTITY` constants for `Mat2`, `Mat3`, `Mat4` and `Quat`.\n* Added `ZERO` constant for vectors and matrices.\n* Added `clamp_length()`, `clamp_length_max()`, and `clamp_length_min` methods\n  for `f32` and `f64` vector types.\n* Added `try_normalize()` and `normalize_or_zero()` for all real vector types.\n* Added `from_diagonal()` methods to all matrix types for creating diagonal\n  matrices from a vector.\n* Added `angle_between()`, `from_rotation_arc()` and\n  `from_rotation_arc_colinear()` to quaternion types.\n* Added quaternion `inverse()` which assumes the quaternion is already\n  normalized and returns the conjugate.\n* Added `from_translation()` and `from_angle()` methods to 3x3 matrix types.\n* Added `project_point3()` method to 4x4 matrix types. This method is for\n  transforming 3D vectors by perspective projection transforms.\n* Added `Eq` and `Hash` impls for integer vector types.\n\n### Changed\n\n* Deprecated `::unit_x/y/z()`, `::zero()`, `::one()`, `::identity()` functions\n  in favor of constants.\n\n## [0.12.0] - 2021-01-15\n\n### Breaking Changes\n\n* `Vec2Mask`, `Vec3Mask` and `Vec4Mask` have been replaced by `BVec2`, `BVec3`,\n  `BVec3A`, `BVec4` and `BVec4A`. These types are used by some vector methods\n  and are not typically referenced directly.\n\n### Added\n\n* Added `f64` primitive type support\n  * vectors: `DVec2`, `DVec3` and `DVec4`\n  * square matrices: `DMat2`, `DMat3` and `DMat4`\n  * a quaternion type: `DQuat`\n* Added `i32` primitive type support\n  * vectors: `IVec2`, `IVec3` and `IVec4`\n* Added `u32` primitive type support\n  * vectors: `UVec2`, `UVec3` and `UVec4`\n* Added `bool` primitive type support\n  * vectors: `BVec2`, `BVec3` and `BVec4`\n\n### Removed\n\n* `build.rs` has been removed.\n\n## [0.11.3] - 2020-12-29\n\n### Changed\n\n* Made `Vec3` `repr(simd)` for `spirv` targets.\n\n### Added\n\n* Added `From<(Vec2, f32)>` for `Vec3` and `From<(Vec3, f32)` for `Vec4`.\n\n## [0.11.2] - 2020-12-04\n\n### Changed\n\n* Compilation fixes for Rust 1.36.0.\n\n## [0.11.1] - 2020-12-03\n\n### Added\n\n* Added support for the [Rust GPU](https://github.com/EmbarkStudios/rust-gpu)\n  SPIR-V target architecture.\n\n## [0.11.0] - 2020-11-26\n\n### Added\n\n* Added `is_finite` method to all types which returns `true` if, and only if,\n  all contained elements are finite.\n* Added `exp` and `powf` methods for all vector types.\n\n### Changed\n\n* The `is_nan` method now returns a `bool` to match the new `is_finite` method\n  and to be consistent with the same methods on the `f32` and `f64` primitive\n  types.\n* Renamed `is_nan` which returns a vector mask to `is_nan_mask`.\n* Don't use the `cfg` definitions added by `build.rs` for defining structs as\n  `rust-analyzer` is not aware of them.\n\n### Removed\n\n* Removed deprecated accessor methods.\n\n## [0.10.2] - 2020-11-17\n\n### Changed\n\n* Deprecated element accessor members `.x()`, `.x_mut()`, `.set_x()`, etc. on\n  vector and quaternion types.\n* Deprecated column accessor members `.x_axis()`, `.x_axis_mut()`,\n  `.set_x_axis()`, etc. on matrix types.\n\n## [0.10.1] - 2020-11-15\n\n### Added\n\n* Added the `Vec2::perp` method which returns a `Vec2` perpendicular to `self`.\n\n### Changed\n\n* `Vec2` and `Vec3` types were changed to use public named fields for `.x`,\n  `.y`, and `.z` instead of accessors.\n* `Quat`, `Vec3A` and `Vec4` implement `Deref` and `DerefMut` for the new `XYZ`\n  and `XYZW` structs to emulate public named field access.\n* `Mat3` and `Mat4` had their axis members made public instead of needing\n  accessors.\n* `Mat2` implements `Deref` and `DerefMut` for the new `XYAxes` struct to\n  emulate public named field access.\n\n### Removed\n\n* Removed deprecated `length_reciprocal` and `sign` methods.\n\n### Fixed\n\n* Adding `glam` as a `no_std` dependency should now work as expected.\n\n## [0.10.0] - 2020-10-31\n\n### Breaking Changes\n\n* Changed the return type of `Vec4::truncate` from `Vec3A` to `Vec3`.\n\n### Added\n\n* Added `From` implementations to truncate to narrower vector types, e.g.\n  `Vec4` to `Vec3A`, `Vec3` and `Vec2` and from `Vec3A` and `Vec3` to `Vec2`.\n* Added swizzles for `Vec4`, `Vec3A`, `Vec3` and `Vec2`. These can be used to\n  reorder elements in the same type and also to create larger or smaller\n  vectors from the given vectors elements.\n* Added `Quat` operators `Add<Quat>`, `Sub<Quat>`, `Mul<f32>` and `Div<f32`.\n  These are used by other crates for interpolation quaternions along splines.\n  Note that these operations will not return unit length quaternions, thus the\n  results must be normalized before performing other `Quat` operations.\n* Added `Mat4::transform_point3a` and `Mat4::transform_vector3a`.\n* Added `AsRef<[f32; 9]>` and `AsMut<[f32; 9]>` trait implementations to `Mat3`.\n* Added optional `bytemuck` support primarily for casting types to `&[u8]`.\n* Added support for compiling with `no_std` by disabling the default `std`\n  feature and adding the `libm` feature.\n* Added `distance` and `distance_squared` methods to `Vec2`, `Vec3`, `Vec3A`\n  and `Vec4`.\n\n## [0.9.5] - 2020-10-10\n\n### Added\n\n* `glam` uses SSE2 for some types which prevents constructor functions can not\n  be made `const fn`. To work around this limitation the following macro\n  functions have been added to support creating `const` values of `glam` types:\n  `const_mat2`, `const_mat3`, `const_mat4`, `const_quat`, `const_vec2`,\n  `const_vec3`, `const_vec3a` and `const_vec4`.\n* Added `is_nan` methods to `Vec2`, `Vec3`, `Vec3A` and `Vec4` which return a\n  mask.\n\n## Changed\n\n* Renamed the vector `reciprocal` and `length_reciprocal` methods to `recip`\n  and `length_recip` to match the Rust standard library naming. The old methods\n  have been deprecated.\n* Renamed the vector `sign` methods to `signum` match the Rust standard library\n  naming. The new methods now check for `NAN`. The old methods have been\n  deprecated.\n* Added SSE2 optimized implementations of `Mat4::determinant` and\n  `Mat4::inverse`.\n\n### Removed\n\n* Removed deprecated function `Mat4::perspective_glu_rh`.\n\n## [0.9.4] - 2020-08-31\n\n### Fixed\n\n* Fixed `Mat4::transform_point3` to account for homogeneous w coordinate.\n  Previously this would have been incorrect when the resulting homogeneous\n  coordinate was not 1.0, e.g. when transforming by a perspective projection.\n* Fixed `Mat3::transform_point2` to account for homogeneous z coordinate.\n\n## [0.9.3] - 2020-08-11\n\n### Added\n\n* Added `Mat4::perspective_rh`.\n\n## [0.9.2] - 2020-07-09\n\n### Added\n\n* Added `Mat3::mul_vec3a` and `Quat::mul_vec3a`.\n\n### Changed\n\n* Changed `Quat::mul_vec3` to accept and return `Vec3` instead of `Vec3A`.\n\n## [0.9.1] - 2020-07-01\n\n### Added\n\n* Added `Mat3 * Vec3A` implementation.\n* Added `Vec3A` benches.\n\n### Changed\n\n* Some documentation improvements around the new `Vec3A` type.\n\n## [0.9.0] - 2020-06-28\n\n### Added\n\n* `Vec3` has been split into scalar `Vec3` and 16 byte aligned `Vec3A` types.\n  Only the `Vec3A` type currently uses SIMD optimizations.\n* `Vec3Mask` has been split into scalar `Vec3Mask` and 16 byte aligned\n  `Vec3AMask` types.\n* Added `mut` column accessors to all matrix types, e.g. `Mat2::x_axis_mut()`.\n* Added `From` trait implementations for `Vec3AMask` and `Vec4Mask` to `__m128`.\n\n### Changed\n\n* The `Mat3` type is using the scalar `Vec3` type for storage.\n* Simplified `Debug` trait output for `Quat`, `Vec4` and `Vec3A`.\n\n## Removed\n\n* Removed the `packed-vec3` feature flag as it is now redundant.\n\n## [0.8.7] - 2020-04-28\n\n### Added\n\n* Added `Quat::slerp` - note that this uses a `sin` approximation.\n* Added `angle_between` method for `Vec2` and `Vec3`.\n* Implemented `Debug`, `Display`, `PartialEq`, `Eq`, `PartialOrd`, `Ord`,\n  `Hash`, and `AsRef` traits for `Vec2Mask`, `Vec3Mask` and `Vec4Mask`.\n* Added conversion functions from `Vec2Mask`, `Vec3Mask` and `Vec4Mask` to an\n  array of `[u32]`.\n* Added `build.rs` to simplify conditional feature compilation.\n\n### Changed\n\n* Increased test coverage.\n\n### Removed\n\n* Removed `cfg-if` dependency.\n\n## [0.8.6] - 2020-02-18\n\n### Added\n\n* Added the `packed-vec3` feature flag to disable using SIMD types for `Vec3`\n  and `Mat3` types. This avoids wasting some space due to 16 byte alignment at\n  the cost of some performance.\n* Added `x_mut`, `y_mut`, `z_mut`, `w_mut` where appropriate to `Vec2`, `Vec3`\n  and `Vec4`.\n* Added implementation of `core::ops::Index` and `core::ops::IndexMut` for\n  `Vec2`, `Vec3` and `Vec4`.\n\n### Changed\n\n* Merged SSE2 and scalar `Vec3` and `Vec4` implementations into single files\n  using the `cfg-if` crate.\n\n## [0.8.5] - 2020-01-02\n\n### Added\n\n* Added projection functions `Mat4::perspective_lh`,\n  `Mat4::perspective_infinite_lh`, `Mat4::perspective_infinite_reverse_lh`,\n  `Mat4::orthgraphic_lh` and `Mat4::orthographic_rh`.\n* Added `round`, `ceil` and `floor` methods to `Vec2`, `Vec3` and `Vec4`.\n\n## [0.8.4] - 2019-12-17\n\n### Added\n\n* Added `Mat4::to_scale_rotation_translation` for extracting scale, rotation and\n  translation from a 4x4 homogeneous transformation matrix.\n* Added `cargo-deny` GitHub Action.\n\n### Changed\n\n* Renamed `Quat::new` to `Quat::from_xyzw`.\n\n## [0.8.3] - 2019-11-27\n\n### Added\n\n* Added `Mat4::orthographic_rh_gl`.\n\n### Changed\n\n* Renamed `Mat4::perspective_glu_rh` to `Mat4::perspective_rh_gl`.\n* SSE2 optimizations for `Mat2::determinant`, `Mat2::inverse`,\n  `Mat2::transpose`, `Mat3::transpose`, `Quat::conjugate`, `Quat::lerp`,\n  `Quat::mul_vec3`, `Quat::mul_quat` and `Quat::from_rotation_ypr`.\n* Disabled optimizations to `Mat4::transform_point3` and\n  `Mat4::transform_vector3` as they are probably incorrect and need\n  investigating.\n* Added missing `#[repr(C)]` to `Mat2`, `Mat3` and `Mat4`.\n* Benchmarks now store output of functions to better estimate the cost of a\n  function call.\n\n### Removed\n\n* Removed deprecated functions `Mat2::new`, `Mat3::new` and `Mat4::new`.\n\n## [0.8.2] - 2019-11-06\n\n### Changed\n\n* `glam_assert!` is no longer enabled by default in debug builds, it can be\n  enabled in any configuration using the `glam-assert` feature or in debug\n  builds only using the `debug-glam-assert` feature.\n\n### Removed\n\n* `glam_assert!`'s checking `lerp` is bounded between 0.0 and 1.0 and that\n  matrix scales are non-zero have been removed.\n\n## [0.8.1] - 2019-11-03\n\n### Added\n\n* Added `Display` trait implementations for `Mat2`, `Mat3` and `Mat4`.\n\n### Changed\n\n* Disabled `glam`'s SSE2 `sin_cos` implementation - it became less precise for\n  large angle values.\n* Reduced the default epsilon used by the `is_normalized!` macro from\n  `std::f32::EPSILON` to `1e-6`.\n\n## [0.8.0] - 2019-10-14\n\n### Removed\n\n* Removed the `approx` crate dependency. Each `glam` type has an `abs_diff_eq`\n  method added which is used by unit tests for approximate floating point\n  comparisons.\n* Removed the `Angle` type. All angles are now `f32` and are expected to\n  be in radians.\n* Removed the deprecated `Vec2b`, `Vec3b` and `Vec4b` types and the `mask`\n  methods on `Vec2Mask`, `Vec3Mask` and `Vec4Mask`.\n\n### Changed\n\n* The `rand` crate dependency has been removed from default features. This was\n  required for benchmarking but a simple random number generator has been added\n  to the benches `support` module instead.\n* The `From` trait implementation converting between 1D and 2D `f32` arrays and\n  matrix types have been removed. It was ambiguous how array data would map to\n  matrix columns so these have been replaced with explicit methods\n  `from_cols_array` and `from_cols_array_2d`.\n* Matrix `new` methods have been renamed to `from_cols` to be consistent with\n  the other methods that create matrices from data.\n* Renamed `Mat4::perspective_glu` to `Mat4::perspective_glu_rh`.\n\n## [0.7.2] - 2019-09-22\n\n### Fixed\n\n* Fixed incorrect projection matrix methods `Mat4::look_at_lh`\n  and `Mat4::look_at_rh`.\n\n### Added\n\n* Added support for building infinite projection matrices, including both\n  standard and reverse depth `Mat4::perspective_infinite_rh` and\n  `Mat4::perspective_infinite_rh`.\n* Added `Vec2Mask::new`, `Vec3Mask::new` and `Vec4Mask::new` methods.\n* Implemented `std::ops` `BitAnd`, `BitAndAssign`, `BitOr`, `BitOrAssign`\n  and `Not` traits for `Vec2Mask`, `Vec3Mask` and `Vec4Mask`.\n* Added method documentation for `Vec4` and `Vec4Mask` types.\n* Added missing `serde` implementations for `Mat2`, `Mat3` and `Mat4`.\n* Updated `rand` and `criterion` versions.\n\n## [0.7.1] - 2019-07-08\n\n### Fixed\n\n* The SSE2 implementation of `Vec4` `dot` was missing a shuffle, meaning the\n  `dot`, `length`, `length_squared`, `length_reciprocal` and `normalize`\n  methods were sometimes incorrect.\n\n### Added\n\n* Added the `glam_assert` macro which behaves like Rust's `debug_assert` but\n  can be enabled separately to `debug_assert`. This is used to perform\n  asserts on correctness.\n* Added `is_normalized` method to `Vec2`, `Vec3` and `Vec4`.\n\n### Changed\n\n* Replaced usage of `std::mem::uninitialized` with `std::mem::MaybeUninit`. This\n  change requires stable Rust 1.36.\n* Renamed `Vec2b` to `Vec2Mask`, `Vec3b` to `Vec3Mask` and `Vec4b` to\n  `Vec4Mask`. Old names are aliased to the new name and deprecated.\n* Deprecate `VecNMask` `mask` method, use new `bitmask` method instead\n* Made fallback version of `VecNMask` types the same size and alignment as the\n  SIMD versions.\n* Added `Default` support to `VecNMask` types, will add more common traits in\n  the future.\n* Added `#[inline]` to `mat2`, `mat3` and `mat4` functions.\n\n## [0.7.0] - 2019-06-28\n\n### Added\n\n* Added `Mat2` into `[f32; 4]`, `Mat3` into `[f32; 9]` and `Mat4` into\n  `[f32; 16]`.\n\n### Removed\n\n* Removed `impl Mul<&Vec2> for Mat2` and `impl Mul<&Vec3> for Vec3` as these\n  don't exist for any other types.\n\n## [0.6.1] - 2019-06-22\n\n### Changed\n\n* `Mat2` now uses a `Vec4` internally which gives it some performance\n   improvements when SSE2 is available.\n\n## 0.6.0 - 2019-06-13\n\n### Changed\n\n* Switched from row vectors to column vectors\n* Vectors are now on the right of multiplications with matrices and quaternions.\n\n[Keep a Changelog]: https://keepachangelog.com/\n[Semantic Versioning]: https://semver.org/spec/v2.0.0.html\n[Unreleased]: https://github.com/bitshifter/glam-rs/compare/0.29.2...HEAD\n[0.29.2]: https://github.com/bitshifter/glam-rs/compare/0.29.1...0.29.2\n[0.29.1]: https://github.com/bitshifter/glam-rs/compare/0.29.0...0.29.1\n[0.29.0]: https://github.com/bitshifter/glam-rs/compare/0.28.0...0.29.0\n[0.28.0]: https://github.com/bitshifter/glam-rs/compare/0.27.0...0.28.0\n[0.27.0]: https://github.com/bitshifter/glam-rs/compare/0.26.0...0.27.0\n[0.26.0]: https://github.com/bitshifter/glam-rs/compare/0.25.0...0.26.0\n[0.25.0]: https://github.com/bitshifter/glam-rs/compare/0.24.2...0.25.0\n[0.24.2]: https://github.com/bitshifter/glam-rs/compare/0.24.1...0.24.2\n[0.24.1]: https://github.com/bitshifter/glam-rs/compare/0.24.0...0.24.1\n[0.24.0]: https://github.com/bitshifter/glam-rs/compare/0.23.0...0.24.0\n[0.23.0]: https://github.com/bitshifter/glam-rs/compare/0.22.0...0.23.0\n[0.22.0]: https://github.com/bitshifter/glam-rs/compare/0.21.3...0.22.0\n[0.21.3]: https://github.com/bitshifter/glam-rs/compare/0.21.2...0.21.3\n[0.21.2]: https://github.com/bitshifter/glam-rs/compare/0.21.1...0.21.2\n[0.21.1]: https://github.com/bitshifter/glam-rs/compare/0.21.0...0.21.1\n[0.21.0]: https://github.com/bitshifter/glam-rs/compare/0.20.5...0.21.0\n[0.20.5]: https://github.com/bitshifter/glam-rs/compare/0.20.4...0.20.5\n[0.20.4]: https://github.com/bitshifter/glam-rs/compare/0.20.3...0.20.4\n[0.20.3]: https://github.com/bitshifter/glam-rs/compare/0.20.2...0.20.3\n[0.20.2]: https://github.com/bitshifter/glam-rs/compare/0.20.1...0.20.2\n[0.20.1]: https://github.com/bitshifter/glam-rs/compare/0.20.0...0.20.1\n[0.20.0]: https://github.com/bitshifter/glam-rs/compare/0.19.0...0.20.0\n[0.19.0]: https://github.com/bitshifter/glam-rs/compare/0.18.0...0.19.0\n[0.18.0]: https://github.com/bitshifter/glam-rs/compare/0.17.3...0.18.0\n[0.17.3]: https://github.com/bitshifter/glam-rs/compare/0.17.2...0.17.3\n[0.17.2]: https://github.com/bitshifter/glam-rs/compare/0.17.1...0.17.2\n[0.17.1]: https://github.com/bitshifter/glam-rs/compare/0.17.0...0.17.1\n[0.17.0]: https://github.com/bitshifter/glam-rs/compare/0.16.0...0.17.0\n[0.16.0]: https://github.com/bitshifter/glam-rs/compare/0.15.2...0.16.0\n[0.15.2]: https://github.com/bitshifter/glam-rs/compare/0.15.1...0.15.2\n[0.15.1]: https://github.com/bitshifter/glam-rs/compare/0.15.0...0.15.1\n[0.15.0]: https://github.com/bitshifter/glam-rs/compare/0.14.0...0.15.0\n[0.14.0]: https://github.com/bitshifter/glam-rs/compare/0.13.1...0.14.0\n[0.13.1]: https://github.com/bitshifter/glam-rs/compare/0.13.0...0.13.1\n[0.13.0]: https://github.com/bitshifter/glam-rs/compare/0.12.0...0.13.0\n[0.12.0]: https://github.com/bitshifter/glam-rs/compare/0.11.3...0.12.0\n[0.11.3]: https://github.com/bitshifter/glam-rs/compare/0.11.2...0.11.3\n[0.11.2]: https://github.com/bitshifter/glam-rs/compare/0.11.1...0.11.2\n[0.11.1]: https://github.com/bitshifter/glam-rs/compare/0.11.0...0.11.1\n[0.11.0]: https://github.com/bitshifter/glam-rs/compare/0.10.2...0.11.0\n[0.10.2]: https://github.com/bitshifter/glam-rs/compare/0.10.1...0.10.2\n[0.10.1]: https://github.com/bitshifter/glam-rs/compare/0.10.0...0.10.1\n[0.10.0]: https://github.com/bitshifter/glam-rs/compare/0.9.5...0.10.0\n[0.9.5]: https://github.com/bitshifter/glam-rs/compare/0.9.4...0.9.5\n[0.9.4]: https://github.com/bitshifter/glam-rs/compare/0.9.3...0.9.4\n[0.9.3]: https://github.com/bitshifter/glam-rs/compare/0.9.2...0.9.3\n[0.9.2]: https://github.com/bitshifter/glam-rs/compare/0.9.1...0.9.2\n[0.9.1]: https://github.com/bitshifter/glam-rs/compare/0.9.0...0.9.1\n[0.9.0]: https://github.com/bitshifter/glam-rs/compare/0.8.7...0.9.0\n[0.8.7]: https://github.com/bitshifter/glam-rs/compare/0.8.6...0.8.7\n[0.8.6]: https://github.com/bitshifter/glam-rs/compare/0.8.5...0.8.6\n[0.8.5]: https://github.com/bitshifter/glam-rs/compare/0.8.4...0.8.5\n[0.8.4]: https://github.com/bitshifter/glam-rs/compare/0.8.3...0.8.4\n[0.8.3]: https://github.com/bitshifter/glam-rs/compare/0.8.2...0.8.3\n[0.8.2]: https://github.com/bitshifter/glam-rs/compare/0.8.1...0.8.2\n[0.8.1]: https://github.com/bitshifter/glam-rs/compare/0.8.0...0.8.1\n[0.8.0]: https://github.com/bitshifter/glam-rs/compare/0.7.2...0.8.0\n[0.7.2]: https://github.com/bitshifter/glam-rs/compare/0.7.1...0.7.2\n[0.7.1]: https://github.com/bitshifter/glam-rs/compare/0.7.0...0.7.1\n[0.7.0]: https://github.com/bitshifter/glam-rs/compare/0.6.1...0.7.0\n[0.6.1]: https://github.com/bitshifter/glam-rs/compare/0.6.0...0.6.1\n"
        },
        {
          "name": "CODE_OF_CONDUCT.md",
          "type": "blob",
          "size": 5.080078125,
          "content": "# Contributor Covenant Code of Conduct\n\n## Our Pledge\n\nWe as members, contributors, and leaders pledge to make participation in our\ncommunity a harassment-free experience for everyone, regardless of age, body\nsize, visible or invisible disability, ethnicity, sex characteristics, gender\nidentity and expression, level of experience, education, socio-economic status,\nnationality, personal appearance, race, religion, or sexual identity\nand orientation.\n\nWe pledge to act and interact in ways that contribute to an open, welcoming,\ndiverse, inclusive, and healthy community.\n\n## Our Standards\n\nExamples of behavior that contributes to a positive environment for our\ncommunity include:\n\n* Demonstrating empathy and kindness toward other people\n* Being respectful of differing opinions, viewpoints, and experiences\n* Giving and gracefully accepting constructive feedback\n* Accepting responsibility and apologizing to those affected by our mistakes,\n  and learning from the experience\n* Focusing on what is best not just for us as individuals, but for the\n  overall community\n\nExamples of unacceptable behavior include:\n\n* The use of sexualized language or imagery, and sexual attention or\n  advances of any kind\n* Trolling, insulting or derogatory comments, and personal or political attacks\n* Public or private harassment\n* Publishing others' private information, such as a physical or email\n  address, without their explicit permission\n* Other conduct which could reasonably be considered inappropriate in a\n  professional setting\n\n## Enforcement Responsibilities\n\nCommunity leaders are responsible for clarifying and enforcing our standards of\nacceptable behavior and will take appropriate and fair corrective action in\nresponse to any behavior that they deem inappropriate, threatening, offensive,\nor harmful.\n\nCommunity leaders have the right and responsibility to remove, edit, or reject\ncomments, commits, code, wiki edits, issues, and other contributions that are\nnot aligned to this Code of Conduct, and will communicate reasons for moderation\ndecisions when appropriate.\n\n## Scope\n\nThis Code of Conduct applies within all community spaces, and also applies when\nan individual is officially representing the community in public spaces.\nExamples of representing our community include using an official e-mail address,\nposting via an official social media account, or acting as an appointed\nrepresentative at an online or offline event.\n\n## Enforcement\n\nInstances of abusive, harassing, or otherwise unacceptable behavior may be\nreported to the community leaders responsible for enforcement at\n.\nAll complaints will be reviewed and investigated promptly and fairly.\n\nAll community leaders are obligated to respect the privacy and security of the\nreporter of any incident.\n\n## Enforcement Guidelines\n\nCommunity leaders will follow these Community Impact Guidelines in determining\nthe consequences for any action they deem in violation of this Code of Conduct:\n\n### 1. Correction\n\n**Community Impact**: Use of inappropriate language or other behavior deemed\nunprofessional or unwelcome in the community.\n\n**Consequence**: A private, written warning from community leaders, providing\nclarity around the nature of the violation and an explanation of why the\nbehavior was inappropriate. A public apology may be requested.\n\n### 2. Warning\n\n**Community Impact**: A violation through a single incident or series\nof actions.\n\n**Consequence**: A warning with consequences for continued behavior. No\ninteraction with the people involved, including unsolicited interaction with\nthose enforcing the Code of Conduct, for a specified period of time. This\nincludes avoiding interactions in community spaces as well as external channels\nlike social media. Violating these terms may lead to a temporary or\npermanent ban.\n\n### 3. Temporary Ban\n\n**Community Impact**: A serious violation of community standards, including\nsustained inappropriate behavior.\n\n**Consequence**: A temporary ban from any sort of interaction or public\ncommunication with the community for a specified period of time. No public or\nprivate interaction with the people involved, including unsolicited interaction\nwith those enforcing the Code of Conduct, is allowed during this period.\nViolating these terms may lead to a permanent ban.\n\n### 4. Permanent Ban\n\n**Community Impact**: Demonstrating a pattern of violation of community\nstandards, including sustained inappropriate behavior,  harassment of an\nindividual, or aggression toward or disparagement of classes of individuals.\n\n**Consequence**: A permanent ban from any sort of public interaction within\nthe community.\n\n## Attribution\n\nThis Code of Conduct is adapted from the [Contributor Covenant][homepage],\nversion 2.0, available at\nhttps://www.contributor-covenant.org/version/2/0/code_of_conduct.html.\n\nCommunity Impact Guidelines were inspired by [Mozilla's code of conduct\nenforcement ladder](https://github.com/mozilla/diversity).\n\n[homepage]: https://www.contributor-covenant.org\n\nFor answers to common questions about this code of conduct, see the FAQ at\nhttps://www.contributor-covenant.org/faq. Translations are available at\nhttps://www.contributor-covenant.org/translations.\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 2.244140625,
          "content": "# Contributing to glam\n\nThanks for contributing to `glam`! These guidelines will try to make the\nprocess painless and efficient.\n\nThe short guide to contributing is [start a discussion] on GitHub.  Pull\nrequests are welcome for bug fixes, documentation improvements and\noptimizations. For anything else it would be best to discuss it first.\n\n## Questions\n\nIf you have a question about the usage of this library please [ask a question]\nwith GitHub Discussions. That's the easiest way to get support right now.\n\n## Bugs\n\nIf you find a bug please [open an issue] on GitHub or submit a pull request. A\nunit test for any bug that slipped through existing coverage would also be\ngreatly appreciated.\n\n## New functions and methods\n\nIf `glam` is missing functionality on existing types, [suggest a new feature]\nwith GitHub Discussions describing what feature you would like added and\nideally what your use case is for it just so I have a better understanding of\nthe feature. I'd like to keep `glam` reasonably light functionality wise\ninitially but commonly used functionality that is missing is very welcome. If\nyou do submit a pull request please ensure any new functionality also has a\ntest.\n\n## Optimizations\n\nIf you feel some functionality could be optimized please [open an issue] on\nGitHub or submit a pull request. Any optimization pull request should include a\nbenchmark if there isn't one already, so I can confirm the performance\nimprovement.\n\n## Documentation\n\nIf you feel any documentation could be added or improved please\n[open a GitHub issue] or submit a pull request.\n\n## Code contributions\n\nMost of `glam`'s source code is generated. See the [codegen README] on how\nto modify the code templates and generate new source code.\n\nYou can run some of `glam`'s test suite locally by running the\n`build_and_test_features.sh` script. It's worth running that before creating a\nPR.\n\nAlso run `cargo fmt` and `cargo clippy` on any new code.\n\n[start a discussion]: https://github.com/bitshifter/glam-rs/discussions/new\n[open an issue]: https://GitHub.com/bitshifter/glam-rs/issues/new\n[ask a question]: https://github.com/bitshifter/glam-rs/discussions/new?category=q-a\n[suggest a new feature]: https://github.com/bitshifter/glam-rs/discussions/new?category=ideas\n[codegen README]: codegen/README.md\n"
        },
        {
          "name": "Cargo.toml",
          "type": "blob",
          "size": 3.0498046875,
          "content": "[package]\nname = \"glam\"\nversion = \"0.29.2\" # remember to update html_root_url\nedition = \"2021\"\nauthors = [\"Cameron Hart <cameron.hart@gmail.com>\"]\ndescription = \"A simple and fast 3D math library for games and graphics\"\nrepository = \"https://github.com/bitshifter/glam-rs\"\nreadme = \"README.md\"\nlicense = \"MIT OR Apache-2.0\"\nkeywords = [\"gamedev\", \"math\", \"matrix\", \"vector\", \"quaternion\"]\ncategories = [\"game-engines\", \"no-std\"]\nrust-version = \"1.68.2\"\n\n[badges]\nmaintenance = { status = \"actively-developed\" }\n\n[features]\ndefault = [\"std\"]\n\n# enable support for the standard library\nstd = []\n\n# enable additional glam checks if debug assertions are enabled\ndebug-glam-assert = []\n# always enable additional glam checks\nglam-assert = []\n\n# this is primarily for testing the fallback implementation\nscalar-math = []\n\n# align types to match CUDA requirements\ncuda = []\n\n# Enables platform specific optimizations that might speed-up certain operations.\n# This will cause APIs to output different results depending on the platform used\n# and will likely break cross-platform determinism.\n# This should NOT be enabled by intermediate libraries, deferring the decision to\n# the end binary build instead.\nfast-math = []\n\n# experimental nightly portable-simd support\ncore-simd = []\n\n[dependencies]\napprox = { version = \"0.5\", optional = true, default-features = false }\nbytemuck = { version = \"1.9\", optional = true, default-features = false }\nmint = { version = \"0.5.8\", optional = true, default-features = false }\nrand = { version = \"0.8\", optional = true, default-features = false }\nserde = { version = \"1.0\", optional = true, default-features = false }\nrkyv = { version = \"0.7\", optional = true, default-features = false }\nbytecheck = { version = \"0.7\", optional = true, default-features = false }\nlibm = { version = \"0.2\", optional = true, default-features = false}\n\n[dev-dependencies]\n# rand_xoshiro is required for tests if rand is enabled\nrand_xoshiro = \"0.6\"\n# Set a size_xx feature so that this crate compiles properly with --all-targets --all-features\nrkyv = { version = \"0.7\", default-features = false, features = [\"size_32\"] }\nserde_json = \"1.0\"\n\n[target.'cfg(not(target_arch = \"wasm32\"))'.dev-dependencies]\ncriterion = { version = \"0.5\", features = [\"html_reports\"] }\niai-callgrind = \"0.14\"\n\n[target.'cfg(target_arch = \"wasm32\")'.dev-dependencies]\nwasm-bindgen-test = \"0.3\"\n\n[lib]\nbench = false\n\n[[bench]]\nname = \"mat2\"\nharness = false\n\n[[bench]]\nname = \"mat3\"\nharness = false\n\n[[bench]]\nname = \"mat3a\"\nharness = false\n\n[[bench]]\nname = \"affine2\"\nharness = false\n\n[[bench]]\nname = \"affine3\"\nharness = false\n\n[[bench]]\nname = \"mat4\"\nharness = false\n\n[[bench]]\nname = \"quat\"\nharness = false\n\n[[bench]]\nname = \"support\"\nbench = false\n\n[[bench]]\nname = \"vec2\"\nharness = false\n\n[[bench]]\nname = \"vec3\"\nharness = false\n\n[[bench]]\nname = \"vec3a\"\nharness = false\n\n[[bench]]\nname = \"vec4\"\nharness = false\n\n[[bench]]\nname = \"iai\"\nharness = false\n\n[workspace]\nmembers = [\n    \"codegen\",\n    \"swizzlegen\",\n    \"test_no_std\",\n]\n\n[lints.rust]\nunexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(target_arch, values(\"spirv\"))'] }\n"
        },
        {
          "name": "LICENSE-APACHE",
          "type": "blob",
          "size": 10.580078125,
          "content": "                              Apache License\n                        Version 2.0, January 2004\n                     http://www.apache.org/licenses/\n\nTERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n1. Definitions.\n\n   \"License\" shall mean the terms and conditions for use, reproduction,\n   and distribution as defined by Sections 1 through 9 of this document.\n\n   \"Licensor\" shall mean the copyright owner or entity authorized by\n   the copyright owner that is granting the License.\n\n   \"Legal Entity\" shall mean the union of the acting entity and all\n   other entities that control, are controlled by, or are under common\n   control with that entity. For the purposes of this definition,\n   \"control\" means (i) the power, direct or indirect, to cause the\n   direction or management of such entity, whether by contract or\n   otherwise, or (ii) ownership of fifty percent (50%) or more of the\n   outstanding shares, or (iii) beneficial ownership of such entity.\n\n   \"You\" (or \"Your\") shall mean an individual or Legal Entity\n   exercising permissions granted by this License.\n\n   \"Source\" form shall mean the preferred form for making modifications,\n   including but not limited to software source code, documentation\n   source, and configuration files.\n\n   \"Object\" form shall mean any form resulting from mechanical\n   transformation or translation of a Source form, including but\n   not limited to compiled object code, generated documentation,\n   and conversions to other media types.\n\n   \"Work\" shall mean the work of authorship, whether in Source or\n   Object form, made available under the License, as indicated by a\n   copyright notice that is included in or attached to the work\n   (an example is provided in the Appendix below).\n\n   \"Derivative Works\" shall mean any work, whether in Source or Object\n   form, that is based on (or derived from) the Work and for which the\n   editorial revisions, annotations, elaborations, or other modifications\n   represent, as a whole, an original work of authorship. For the purposes\n   of this License, Derivative Works shall not include works that remain\n   separable from, or merely link (or bind by name) to the interfaces of,\n   the Work and Derivative Works thereof.\n\n   \"Contribution\" shall mean any work of authorship, including\n   the original version of the Work and any modifications or additions\n   to that Work or Derivative Works thereof, that is intentionally\n   submitted to Licensor for inclusion in the Work by the copyright owner\n   or by an individual or Legal Entity authorized to submit on behalf of\n   the copyright owner. For the purposes of this definition, \"submitted\"\n   means any form of electronic, verbal, or written communication sent\n   to the Licensor or its representatives, including but not limited to\n   communication on electronic mailing lists, source code control systems,\n   and issue tracking systems that are managed by, or on behalf of, the\n   Licensor for the purpose of discussing and improving the Work, but\n   excluding communication that is conspicuously marked or otherwise\n   designated in writing by the copyright owner as \"Not a Contribution.\"\n\n   \"Contributor\" shall mean Licensor and any individual or Legal Entity\n   on behalf of whom a Contribution has been received by Licensor and\n   subsequently incorporated within the Work.\n\n2. Grant of Copyright License. Subject to the terms and conditions of\n   this License, each Contributor hereby grants to You a perpetual,\n   worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n   copyright license to reproduce, prepare Derivative Works of,\n   publicly display, publicly perform, sublicense, and distribute the\n   Work and such Derivative Works in Source or Object form.\n\n3. Grant of Patent License. Subject to the terms and conditions of\n   this License, each Contributor hereby grants to You a perpetual,\n   worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n   (except as stated in this section) patent license to make, have made,\n   use, offer to sell, sell, import, and otherwise transfer the Work,\n   where such license applies only to those patent claims licensable\n   by such Contributor that are necessarily infringed by their\n   Contribution(s) alone or by combination of their Contribution(s)\n   with the Work to which such Contribution(s) was submitted. If You\n   institute patent litigation against any entity (including a\n   cross-claim or counterclaim in a lawsuit) alleging that the Work\n   or a Contribution incorporated within the Work constitutes direct\n   or contributory patent infringement, then any patent licenses\n   granted to You under this License for that Work shall terminate\n   as of the date such litigation is filed.\n\n4. Redistribution. You may reproduce and distribute copies of the\n   Work or Derivative Works thereof in any medium, with or without\n   modifications, and in Source or Object form, provided that You\n   meet the following conditions:\n\n   (a) You must give any other recipients of the Work or\n       Derivative Works a copy of this License; and\n\n   (b) You must cause any modified files to carry prominent notices\n       stating that You changed the files; and\n\n   (c) You must retain, in the Source form of any Derivative Works\n       that You distribute, all copyright, patent, trademark, and\n       attribution notices from the Source form of the Work,\n       excluding those notices that do not pertain to any part of\n       the Derivative Works; and\n\n   (d) If the Work includes a \"NOTICE\" text file as part of its\n       distribution, then any Derivative Works that You distribute must\n       include a readable copy of the attribution notices contained\n       within such NOTICE file, excluding those notices that do not\n       pertain to any part of the Derivative Works, in at least one\n       of the following places: within a NOTICE text file distributed\n       as part of the Derivative Works; within the Source form or\n       documentation, if provided along with the Derivative Works; or,\n       within a display generated by the Derivative Works, if and\n       wherever such third-party notices normally appear. The contents\n       of the NOTICE file are for informational purposes only and\n       do not modify the License. You may add Your own attribution\n       notices within Derivative Works that You distribute, alongside\n       or as an addendum to the NOTICE text from the Work, provided\n       that such additional attribution notices cannot be construed\n       as modifying the License.\n\n   You may add Your own copyright statement to Your modifications and\n   may provide additional or different license terms and conditions\n   for use, reproduction, or distribution of Your modifications, or\n   for any such Derivative Works as a whole, provided Your use,\n   reproduction, and distribution of the Work otherwise complies with\n   the conditions stated in this License.\n\n5. Submission of Contributions. Unless You explicitly state otherwise,\n   any Contribution intentionally submitted for inclusion in the Work\n   by You to the Licensor shall be under the terms and conditions of\n   this License, without any additional terms or conditions.\n   Notwithstanding the above, nothing herein shall supersede or modify\n   the terms of any separate license agreement you may have executed\n   with Licensor regarding such Contributions.\n\n6. Trademarks. This License does not grant permission to use the trade\n   names, trademarks, service marks, or product names of the Licensor,\n   except as required for reasonable and customary use in describing the\n   origin of the Work and reproducing the content of the NOTICE file.\n\n7. Disclaimer of Warranty. Unless required by applicable law or\n   agreed to in writing, Licensor provides the Work (and each\n   Contributor provides its Contributions) on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n   implied, including, without limitation, any warranties or conditions\n   of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n   PARTICULAR PURPOSE. You are solely responsible for determining the\n   appropriateness of using or redistributing the Work and assume any\n   risks associated with Your exercise of permissions under this License.\n\n8. Limitation of Liability. In no event and under no legal theory,\n   whether in tort (including negligence), contract, or otherwise,\n   unless required by applicable law (such as deliberate and grossly\n   negligent acts) or agreed to in writing, shall any Contributor be\n   liable to You for damages, including any direct, indirect, special,\n   incidental, or consequential damages of any character arising as a\n   result of this License or out of the use or inability to use the\n   Work (including but not limited to damages for loss of goodwill,\n   work stoppage, computer failure or malfunction, or any and all\n   other commercial damages or losses), even if such Contributor\n   has been advised of the possibility of such damages.\n\n9. Accepting Warranty or Additional Liability. While redistributing\n   the Work or Derivative Works thereof, You may choose to offer,\n   and charge a fee for, acceptance of support, warranty, indemnity,\n   or other liability obligations and/or rights consistent with this\n   License. However, in accepting such obligations, You may act only\n   on Your own behalf and on Your sole responsibility, not on behalf\n   of any other Contributor, and only if You agree to indemnify,\n   defend, and hold each Contributor harmless for any liability\n   incurred by, or claims asserted against, such Contributor by reason\n   of your accepting any such warranty or additional liability.\n\nEND OF TERMS AND CONDITIONS\n\nAPPENDIX: How to apply the Apache License to your work.\n\n   To apply the Apache License to your work, attach the following\n   boilerplate notice, with the fields enclosed by brackets \"[]\"\n   replaced with your own identifying information. (Don't include\n   the brackets!)  The text should be enclosed in the appropriate\n   comment syntax for the file format. We also recommend that a\n   file or class name and description of purpose be included on the\n   same \"printed page\" as the copyright notice for easier\n   identification within third-party archives.\n\nCopyright 2020 Cameron Hart\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n   http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n"
        },
        {
          "name": "LICENSE-MIT",
          "type": "blob",
          "size": 0.9990234375,
          "content": "Permission is hereby granted, free of charge, to any\nperson obtaining a copy of this software and associated\ndocumentation files (the \"Software\"), to deal in the\nSoftware without restriction, including without\nlimitation the rights to use, copy, modify, merge,\npublish, distribute, sublicense, and/or sell copies of\nthe Software, and to permit persons to whom the Software\nis furnished to do so, subject to the following\nconditions:\n\nThe above copyright notice and this permission notice\nshall be included in all copies or substantial portions\nof the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF\nANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED\nTO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A\nPARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT\nSHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\nOF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR\nIN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\nDEALINGS IN THE SOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 9.888671875,
          "content": "# glam\n\n[![Build Status]][github-ci] [![Coverage Status]][coveralls.io]\n[![Latest Version]][crates.io] [![docs]][docs.rs]\n[![Minimum Supported Rust Version]][Rust 1.68.2]\n\nA simple and fast 3D math library for games and graphics.\n\n## Development status\n\n`glam` is in beta stage. Base functionality has been implemented and the look\nand feel of the API has solidified.\n\n## Features\n\n* `f32` types\n  * vectors: `Vec2`, `Vec3`, `Vec3A` and `Vec4`\n  * square matrices: `Mat2`, `Mat3`, `Mat3A` and `Mat4`\n  * a quaternion type: `Quat`\n  * affine transformation types: `Affine2` and `Affine3A`\n* `f64` types\n  * vectors: `DVec2`, `DVec3` and `DVec4`\n  * square matrices: `DMat2`, `DMat3` and `DMat4`\n  * a quaternion type: `DQuat`\n  * affine transformation types: `DAffine2` and `DAffine3`\n* `i8` types\n  * vectors: `I8Vec2`, `I8Vec3` and `I8Vec4`\n* `u8` types\n  * vectors: `U16Vec2`, `U16Vec3` and `U16Vec4`\n* `i16` types\n  * vectors: `I16Vec2`, `I16Vec3` and `I16Vec4`\n* `u16` types\n  * vectors: `U16Vec2`, `U16Vec3` and `U16Vec4`\n* `i32` types\n  * vectors: `IVec2`, `IVec3` and `IVec4`\n* `u32` types\n  * vectors: `UVec2`, `UVec3` and `UVec4`\n* `i64` types\n  * vectors: `I64Vec2`, `I64Vec3` and `I64Vec4`\n* `u64` types\n  * vectors: `U64Vec2`, `U64Vec3` and `U64Vec4`\n* `bool` types\n  * vectors: `BVec2`, `BVec3` and `BVec4`\n\n### SIMD\n\nThe `Vec3A`, `Vec4`, `Quat`, `Mat2`, `Mat3A`, `Mat4`, `Affine2` and `Affine3A`\ntypes use 128-bit wide SIMD vector types for storage on `x86`, `x86_64` and\n`wasm32` architectures.  As a result, these types are all 16 byte aligned and\ndepending on the size of the type or the type's members, they may contain\ninternal padding.  This results in some wasted space in the cases of `Vec3A`,\n`Mat3A`, `Affine2` and `Affine3A`.  However, the use of SIMD generally results\nin better performance than scalar math.\n\n`glam` outperforms similar Rust libraries for common operations as tested by the\n[`mathbench`][mathbench] project.\n\n[mathbench]: https://github.com/bitshifter/mathbench-rs\n\n### Enabling SIMD\n\nSIMD is supported on `x86`, `x86_64` and `wasm32` targets.\n\n* `SSE2` is enabled by default on `x86_64` targets.\n* To enable `SSE2` on `x86` targets add `-C target-feature=+sse2` to\n  `RUSTCFLAGS`.\n* `NEON` is enabled by default on `aarch64` targets.\n* To enable `NEON` on `aarch64` targets add `-C target-feature=+neon` to `RUSTFLAGS`.\n* To enable `simd128` on `wasm32` targets add `-C target-feature=+simd128` to\n  `RUSTFLAGS`.\n* Experimental [portable simd] support can be enabled with the `core-simd`\n  feature. This requires the nightly compiler as it is still unstable in Rust.\n\nNote that SIMD on `wasm32` passes tests but has not been benchmarked,\nperformance may or may not be better than scalar math.\n\n[portable simd]: https://doc.rust-lang.org/core/simd/index.html\n\n### `no_std` support\n\n`no_std` support can be enabled by compiling with `--no-default-features` to\ndisable `std` support and `--features libm` for math functions that are only\ndefined in `std`. For example:\n\n```toml\n[dependencies]\nglam = { version = \"0.29.2\", default-features = false, features = [\"libm\"] }\n```\n\nTo support both `std` and `no_std` builds in project, you can use the following\nin your `Cargo.toml`:\n\n```toml\n[features]\ndefault = [\"std\"]\n\nstd = [\"glam/std\"]\nlibm = [\"glam/libm\"]\n\n[dependencies]\nglam = { version = \"0.29.2\", default-features = false }\n```\n\n### Optional features\n\n* [`approx`] - traits and macros for approximate float comparisons\n* [`bytemuck`] - for casting into slices of bytes\n* [`libm`] - uses `libm` math functions instead of `std`, required to compile\n  with `no_std`\n* [`mint`] - for interoperating with other 3D math libraries\n* [`rand`] - implementations of `Distribution` trait for all `glam` types.\n* [`serde`] - implementations of `Serialize` and `Deserialize` for all `glam`\n  types. Note that serialization should work between builds of `glam` with and\n  without SIMD enabled\n* [`rkyv`] - implementations of `Archive`, `Serialize` and `Deserialize` for\n  all `glam` types. Note that serialization is not interoperable with and\n  without the `scalar-math` feature. It should work between all other builds of\n  `glam`.  Endian conversion is currently not supported\n* [`bytecheck`] - to perform archive validation when using the `rkyv` feature\n\n[`approx`]: https://docs.rs/approx\n[`bytemuck`]: https://docs.rs/bytemuck\n[`libm`]: https://github.com/rust-lang/libm\n[`mint`]: https://github.com/kvark/mint\n[`rand`]: https://github.com/rust-random/rand\n[`serde`]: https://serde.rs\n[`rkyv`]: https://github.com/rkyv/rkyv\n[`bytecheck`]: https://github.com/rkyv/bytecheck\n\n### Feature gates\n\n* `scalar-math` - compiles with SIMD support disabled\n* `debug-glam-assert` - adds assertions in debug builds which check the validity\n  of parameters passed to `glam` to help catch runtime errors\n* `glam-assert` - adds validation assertions to all builds\n* `cuda` - forces `glam` types to match expected [cuda alignment]\n* `fast-math` - By default, glam attempts to provide bit-for-bit identical\n  results on all platforms. Using this feature will enable platform specific\n  optimizations that may not be identical to other platforms. **Intermediate\n  libraries should not use this feature and defer the decision to the final\n  binary build**.\n* `core-simd` - enables SIMD support via the [portable simd] module. This is an\n  unstable feature which requires a nightly Rust toolchain and `std` support.\n\n[cuda alignment]: https://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#built-in-vector-types\n\n### Minimum Supported Rust Version (MSRV)\n\nThe minimum supported version of Rust for `glam` is `1.68.2`.\n\n## Conventions\n\n### Column vectors\n\n`glam` interprets vectors as column matrices (also known as \"column vectors\")\nmeaning when transforming a vector with a matrix the matrix goes on the left,\ne.g. `v' = Mv`.  DirectX uses row vectors, OpenGL uses column vectors. There\nare pros and cons to both.\n\n### Column-major order\n\nMatrices are stored in column major format. Each column vector is stored in\ncontiguous memory.\n\n### Co-ordinate system\n\n`glam` is co-ordinate system agnostic and intends to support both right-handed\nand left-handed conventions.\n\n## Design Philosophy\n\nThe design of this library is guided by a desire for simplicity and good\nperformance.\n\n* No generics and minimal traits in the public API for simplicity of usage\n* All dependencies are optional (e.g. `mint`, `rand` and `serde`)\n* Follows the [Rust API Guidelines] where possible\n* Aiming for 100% test [coverage]\n* Common functionality is benchmarked using [Criterion.rs]\n\n[Rust API Guidelines]: https://rust-lang-nursery.github.io/api-guidelines/\n[coverage]: coveralls.io\n[Criterion.rs]: https://bheisler.github.io/criterion.rs/book/index.html\n\n## Architecture\n\nSee [ARCHITECTURE.md] for details on `glam`'s internals.\n\n[ARCHITECTURE.md]: ARCHITECTURE.md\n\n## Inspirations\n\nThere were many inspirations for the interface and internals of glam from the\nRust and C++ worlds. In particular:\n\n* [How to write a maths library in 2016] inspired the initial `Vec3A`\n  implementation\n* [Realtime Math] - header only C++11 with SSE and NEON SIMD intrinsic support\n* [DirectXMath] - header only SIMD C++ linear algebra library for use in games\n  and graphics apps\n* `glam` is a play on the name of the popular C++ library [GLM]\n\n[How to write a maths library in 2016]: http://www.codersnotes.com/notes/maths-lib-2016/\n[Realtime Math]: https://github.com/nfrechette/rtm\n[DirectXMath]: https://docs.microsoft.com/en-us/windows/desktop/dxmath/directxmath-portal\n[GLM]: https://glm.g-truc.net\n\n## License\n\nLicensed under either of\n\n* Apache License, Version 2.0 ([LICENSE-APACHE](LICENSE-APACHE)\n  or http://www.apache.org/licenses/LICENSE-2.0)\n* MIT license ([LICENSE-MIT](LICENSE-MIT)\n  or http://opensource.org/licenses/MIT)\n\nat your option.\n\n## Contribution\n\nContributions in any form (issues, pull requests, etc.) to this project must\nadhere to Rust's [Code of Conduct].\n\nUnless you explicitly state otherwise, any contribution intentionally submitted\nfor inclusion in the work by you, as defined in the Apache-2.0 license, shall be\ndual licensed as above, without any additional terms or conditions.\n\nIf you are interested in contributing or have a request or suggestion\n[start a discussion] on GitHub. See [CONTRIBUTING.md] for more information for\ncontributors.\n\nMost code in `glam` is generated, see the [codegen README] for details.\n\nThank you to all of the `glam` [contributors]!\n\n[Code of Conduct]: https://www.rust-lang.org/en-US/conduct.html\n[start a discussion]: https://github.com/bitshifter/glam-rs/discussions\n[CONTRIBUTING.md]: CONTRIBUTING.md\n[codegen README]: codegen/README.md\n[contributors]: https://github.com/bitshifter/glam-rs/graphs/contributors\n\n## Support\n\nThe [Game Development in Rust Discord] and [Bevy Engine Discord] servers are\nnot official support channels but can be good places to ask for help with\n`glam`.\n\n[Game Development in Rust Discord]: https://discord.gg/yNtPTb2\n[Bevy Engine Discord]: https://discord.gg/gMUk5Ph\n\n## Attribution\n\n`glam` contains code ported from the following C++ libraries:\n\n* [DirectXMath] - MIT License - Copyright (c) 2011-2020 Microsoft Corp\n* [Realtime Math] - MIT License - Copyright (c) 2018 Nicholas Frechette\n* [GLM] - MIT License - Copyright (c) 2005 - G-Truc Creation\n\nSee [ATTRIBUTION.md] for details.\n\n[ATTRIBUTION.md]: ATTRIBUTION.md\n\n[Build Status]: https://github.com/bitshifter/glam-rs/actions/workflows/ci.yml/badge.svg\n[github-ci]: https://github.com/bitshifter/glam-rs/actions/workflows/ci.yml\n[Coverage Status]: https://coveralls.io/repos/github/bitshifter/glam-rs/badge.svg?branch=main\n[coveralls.io]: https://coveralls.io/github/bitshifter/glam-rs?branch=main\n[Latest Version]: https://img.shields.io/crates/v/glam.svg\n[crates.io]: https://crates.io/crates/glam/\n[docs]: https://docs.rs/glam/badge.svg\n[docs.rs]: https://docs.rs/glam/\n[Minimum Supported Rust Version]: https://img.shields.io/badge/Rust-1.68.2-blue?color=fc8d62&logo=rust\n[Rust 1.68.2]: https://github.com/rust-lang/rust/blob/master/RELEASES.md#version-1682-2023-03-28\n"
        },
        {
          "name": "benches",
          "type": "tree",
          "content": null
        },
        {
          "name": "build_all_msrv.sh",
          "type": "blob",
          "size": 0.3115234375,
          "content": "#!/bin/sh\n\nset -e\n\nCARGO='rustup run 1.68.2 cargo'\n$CARGO check --features \"bytemuck mint rand serde debug-glam-assert\" && \\\n$CARGO check --features \"scalar-math bytemuck mint rand serde debug-glam-assert\" && \\\n$CARGO check --no-default-features --features \"libm scalar-math bytemuck mint rand serde debug-glam-assert\"\n"
        },
        {
          "name": "build_and_test_features.sh",
          "type": "blob",
          "size": 0.6376953125,
          "content": "#!/bin/bash\n\nset -ex\n\n# Set of features to build & test.\nFEATURE_SETS=(\n  # std\n  \"std\"\n  \"std approx bytemuck mint rand serde debug-glam-assert\"\n  \"std scalar-math approx bytemuck mint rand serde debug-glam-assert\"\n  \"std cuda\"\n  \"std scalar-math cuda\"\n  \"std libm\"\n  \"std scalar-math libm\"\n  # no_std\n  \"libm\"\n  \"libm scalar-math approx bytemuck mint rand serde debug-glam-assert\"\n)\n\nrustc --version\n\nfor features in \"${FEATURE_SETS[@]}\"\ndo\n  :\n  cargo build --tests --no-default-features --features=\"$features\"\n  cargo test --no-default-features --features=\"$features\"\ndone\n\nRUSTFLAGS='-C target-feature=+fma' cargo check\n\ncargo check -p glam-no_std\n"
        },
        {
          "name": "build_and_test_wasm32_chrome.sh",
          "type": "blob",
          "size": 0.1240234375,
          "content": "#!/bin/sh\n\nset -e\n\nRUSTFLAGS=\"-Ctarget-feature=+simd128\" wasm-pack test --headless --chrome\nwasm-pack test --headless --chrome\n"
        },
        {
          "name": "build_and_test_wasm32_firefox.sh",
          "type": "blob",
          "size": 0.1259765625,
          "content": "#!/bin/sh\n\nset -e\n\nRUSTFLAGS=\"-Ctarget-feature=+simd128\" wasm-pack test --headless --firefox\nwasm-pack test --headless --firefox\n"
        },
        {
          "name": "clippy.toml",
          "type": "blob",
          "size": 0.015625,
          "content": "msrv = \"1.68.2\"\n"
        },
        {
          "name": "codegen",
          "type": "tree",
          "content": null
        },
        {
          "name": "deny.toml",
          "type": "blob",
          "size": 0.2421875,
          "content": "[bans]\nmultiple-versions = \"deny\"\ndeny = []\nskip-tree = [\n    # ignore criterion dev-dependency that often have duplicate dependencies internally\n    { name = \"criterion\" },\n]\n\n[licenses]\nallow = [\n    \"Apache-2.0\",\n    \"MIT\",\n    \"Unicode-3.0\",\n]\n"
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "swizzlegen",
          "type": "tree",
          "content": null
        },
        {
          "name": "test_no_std",
          "type": "tree",
          "content": null
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}