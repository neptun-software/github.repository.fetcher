{
  "metadata": {
    "timestamp": 1736709001677,
    "page": 65,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjcw",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "dimforge/nalgebra",
      "stars": 4118,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.09765625,
          "content": "*.swp\n*.html\ndoc\nlib\nTODO\ntarget/\nCargo.lock\n*.orig\n*.swo\nsite/\n.vscode/\n.idea/\nproptest-regressions"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 49.2255859375,
          "content": "# Change Log\n\nAll notable changes to `nalgebra`, starting with the version 0.6.0 will be\ndocumented here.\n\nThis project adheres to [Semantic Versioning](https://semver.org/).\n\n## [0.33.2] (29 October 2024)\n\n### Added\n\n- Add the `convert-glam029` feature to enable conversion from/to types from `glam` v0.29.\n\n## [0.33.1] (16 October 2024)\n\n### Added\n\n- Add implementations of `bytemuck` traits for isometries and similarities.\n- Implement `AsRef<[T]>` for matrices with contiguous storage.\n- Enable the `num-complex/bytemuck` feature when the `convert-bytemuck` feature is enabled.\n\n## [0.33.0] (23 June 2024)\n\n### Fixed\n\n- Fix a memory leak in `Matrix::generic_resize`.\n- Fix `glm::is_null` to check the vector magnitude instead of individual components.\n- Ensure that inverting a 4x4 matrix leaves it unchanged if the inversion fails.\n\n### Added\n\n- Add the `glam-0.28` feature to enable conversion from/to types from `glam` v0.28.\n- Add a `stack!` macro for concatenating matrices. See [#1375](https://github.com/dimforge/nalgebra/pull/1375).\n\n### Modified\n\n- The `cuda` feature has been removed, as the toolchain it depends on is long abandoned.\n- Update to `simba` 0.9. See the [changelog](https://github.com/dimforge/simba/blob/master/CHANGELOG) of `simba` for\n  details.\n- Update the `nalgebra-macros` crate to `syn` 2.0.\n- Remove the scalar type `T` from the `Allocator` trait parameters. Instead of `Allocator<T, R, C>`, use the simpler\n  `Allocator<R, C>`.\n\n## [0.32.6] (12 June 2024)\n\n### Added\n\n- Add the `glam-0.27` feature to enable conversion from/to types from `glam` v0.27.\n\n## [0.32.5] (28 March 2024)\n\n## Fixed\n\n- Fix numerical issue on SVD with near-identity matrix.\n\n## [0.32.4] (19 Feb 2023)\n\n### Added\n\n- Add the `glam-0.25` feature to enable conversion from/to types from `glam` v0.25.\n\n## [0.32.3] (09 July 2023)\n\n### Modified\n\n- Statically sized matrices are now serialized as tuples to match how serde\n  serialized plain arrays.\n- Don’t require `Scalar` for matrix `PartialEq` and `Eq`.\n\n### Added\n\n- Allow trailing punctuation in macros `vector!`, `matrix!`, `point!`, etc.\n- Add the methods `Matrix1::as_scalar`, `::as_scalar_mut`, `::to_scalar`, `::into_scalar`.\n- Add `Rotation3::euler_angles_ordered`, a generalized euler angles calculation.\n- Add the `glam-0.24` feature to enable conversion from/to types from `glam` v0.24.\n- Add the `glam-0.25` feature to enable conversion from/to types from `glam` v0.25.\n- Add the `lerp` method to points.\n- Implement `Clone` for `MatrixIter`.\n\n### Fixed\n\n- Fixed severe catastrophic cancellation issue in variance calculation.\n\n## [0.32.2] (07 March 2023)\n\n### Added\n\n- Add the `glam-0.23` to enable conversion from/to type from `glam` v0.23.\n\n## [0.32.1] (14 Jan. 2023)\n\n### Modified\n\n- Updated `nalgebra-macros` to use the new `Dyn`, avoiding macro-generated deprecation warnings.\n\n## [0.32.0] (14 Jan. 2023)\n\n### Modified\n\n- Renamed all `MatrixSlice` types to `MatrixView`. In general all occurrences of the world `Slice` or `slice` have been\n  replaced by `View` or `view`.\n- Deprecated all the types involving `Slice` in its name, in favor of the word `View`.\n- Make it so that most `nalgebra` objects archive as themselves (when using `rkyv` for serialization).\n- Renamed `Dynamic` to `Dyn` and make `Dyn` a tuple struct.\n\n### Added\n\n- Add `Cholesky::ln_determinant` to compute the natural logarithm of the determinant of a matrix decomposed\n  with Cholesky. This can be more numerically stable than computing the determinant itself when very small and/or\n  large values are involved.\n- Added new methods `Matrix::as_view` and `Matrix::as_view_mut`, which are very useful when working with view-based\n  APIs.\n- Added parallel column iterator using `rayon`: `Matrix::par_column_iter` and `Matrix::par_column_iter_mut`. The `rayon`\n  feature must be enabled to access these methods.\n- Implement `ReshapableStorage` for matrix slices (only for unit strides at the moment).\n- Add `U0, U1, …` constants alongside the `U0, U1, …` types. This lets us write `U4` instead of `U4::name()` or\n  `Const::<4>` when we need const dimensions.\n\n### Fixed\n\n- Fixed the implementation of `Rotation3::euler_angles` to return the angles in the documented order (roll, pitch, yaw).\n\n## [0.31.4] (13 Nov. 2022)\n\n### Added\n\n- Add a `convert-glam022` feature to enable conversion between `nalgebra` and `glam v0.22`.\n\n## [0.31.3] (30 Oct. 2022)\n\n### Added\n\n- Add `Matrix::try_cast` to attempt casting the inner scalar types when that cast may fail.\n\n### Fixed\n\n- Fixed the usage of `CheckBytes` with `rkyv`.\n\n## [0.31.2] (09 Oct. 2022)\n\n### Modified\n\n- Use `#[inline]` on the `Dim` implementation for `Const` to improve opt-level 1 performance.\n- Make the `Point::new` constructions const-fn.\n\n### Added\n\n- Add `UnitVector::cast` to change the underlying scalar type.\n\n## [0.31.1] (31 July 2022)\n\n### Modified\n\n- Improve performances of multiplication of two sparse matrices.\n\n### Added\n\n- Add `Matrix::from_row_iterator` to build a matrix from an iterator yielding components in row-major order.\n- Add support for conversion from/to types of `glam` 0.21.\n- `nalgebra-sparse`: add support for the matrix-market export of sparse matrices.\n- `nalgebra-lapack`: add a `GE` for solving the generalized eigenvalues problem.\n\n### Fixed\n\n- Fix `Rotation3::from_matrix` and `UnitQuaternion::from_matrix` when the input matrix is already a valid\n  rotation matrix.\n\n## [0.31.0] (30 Apr. 2022)\n\n### Breaking changes\n\n- Switch to `cust` 0.3 (for CUDA support).\n- Switch to `rkyv` 0.7\n- Remove support for serialization based on `abomonation`.\n- Remove support for conversions between `nalgebra` types and `glam` 0.13.\n\n### Modified\n\n- The aliases for `Const` types have been simplified to help `rust-analyzer`.\n\n### Added\n\n- Add `TryFrom` conversion between `UnitVector2/3/4` and `glam`’s `Vec2/3/4`.\n- `nalgebra-sparse`: added support for serialization of sparse matrices with `serde`.\n- `nalgebra-sparse`: add a CSC matrix constructor from unsorted (but valid) data.\n- `nalgebra-lapack`: add generalized eigenvalues/eigenvectors calculation + QZ decomposition.\n\n### Fixed\n\n- Improve stability of SVD.\n- Fix slerp for `UnitComplex`.\n\n## [0.30.1] (09 Jan. 2022)\n\n### Added\n\n- Add conversion from/to types of `glam` 0.19 and 0.20.\n\n## [0.30.0] (02 Jan. 2022)\n\n### Breaking changes\n\n- The `Dim` trait is now marked as unsafe.\n- The `Matrix::pow` and `Matrix::pow_mut` methods only allow positive integer exponents now. To compute negative\n  exponents, the user is free to invert the matrix before calling `pow` with the exponent’s absolute value.\n- Remove the `Bounded` requirement from `RealField`. Replace it by methods returning `Option<Self>` so that they can\n  still be implemented by unbounded types (by returning `None`).\n- The `ComplexField` trait derives from `FromPrimitive` again. We can actually keep this because all its methods\n  return `Option<Self>`, meaning that it could be implemented by any type.\n\n### Modified\n\n- Use more concise debug impls for matrices and geometric transformation types.\n- The singular values computed by the SVD are now sorted in increasing order by default. Use `SVD::new_unordered`\n  instead to reproduce the older behavior without the sorting overhead.\n- The `UnitDualQuaternion::sclerp` method will no longer panic when given two equal rotations.\n- The `Matrix::select_rows` and `Matrix::select_columns` methods no longer require the matrix components to implement\n  the trait `Zero`.\n- The `Matrix::pow` and `Matrix::pow_mut` methods will now also work with integer matrices.\n\n### Added\n\n- Added the conversion trait `From<Vec<T>>` and method `from_vec_storage` for `RowDVector`.\n- Added implementation of `From` and `Into` for converting between `nalgebra` types and types from\n  `glam 0.18`. These can be enabled by enabling the `convert-glam018` cargo features.\n- Added the methods `Matrix::product`, `::row_product`, `::row_product_tr`, and `::column_product` to compute the\n  product of the components, rows, or columns, of a single matrix or vector.\n- The `Default` trait is now implemented for most geometric types: `Point`, `Isometry`, `Rotation`, `Similarity`,\n  `Transform`, `UnitComplex`, and `UnitQuaternion`.\n- Added the `Scale` geometric type for representing non-uniform scaling.\n- Added `Cholesky::new_with_substitute` that will replace diagonal elements by a given constant whenever `Cholesky`\n  meets a non-definite-positiveness.\n- Re-added the conversion from a vector/matrix slice to a static array.\n- Added the `cuda` feature that enables the support of [rust-cuda](https://github.com/Rust-GPU/Rust-CUDA) for using\n  `nalgebra` features with CUDA kernels written in Rust.\n- Added special-cases implementations for the 2x2 and 3x3 SVDs for better accuracy and performances.\n- Added the methods `Matrix::polar`, `Matrix::try_polar`, and `SVD::to_polar` to compute the polar decomposition of\n  a matrix, based on its SVD.\n- `nalgebra-sparse`: provide constructors for unsorted but otherwise valid data using the CSR format.\n- `nalgebra-sparse`: added reading MatrixMarked data files to a sparse `CooMatrix`.\n\n### Fixed\n\n- Fixed a potential unsoundness with `matrix.get(i)` and `matrix.get_mut(i)` where `i`  is an `usize`, and `matrix`\n  is a matrix slice with non-default strides.\n- Fixed potential unsoundness with `vector.perp` where `vector` isn’t actually a 2D vector as expected.\n- Fixed linkage issue with `nalgebra-lapack`: the user of `nalgebra-lapack` no longer have to add\n  `extern crate lapack-src` to their `main.rs`.\n- Fixed the `no-std` build of `nalgebra-glm`.\n- Fix the `pow` and `pow_mut` functions (the result was incorrect for some exponent values).\n\n## [0.29.0]\n\n### Breaking changes\n\n- We updated to the version 0.6 of `simba`. This means that the trait bounds `T: na::RealField`, `na::ComplexField`,\n  `na::SimdRealField`, `na:SimdComplexField` no imply that `T: Copy` (they only imply that `T: Clone`). This may affect\n  generic code.\n- The closure given to `apply`, `zip_apply`, `zip_zip_apply` must now modify the\n  first argument inplace, instead of returning a new value. This makes these\n  methods more versatile, and avoid useless clones when using non-Copy scalar\n  types.\n- The `Allocator` trait signature has been significantly modified in order to handle uninitialized matrices in a sound\n  way.\n\n### Modified\n\n- `Orthographic3::from_matrix_unchecked` is now `const fn`.\n- `Perspective3::from_matrix_unchecked` is now `const fn`.\n- `Rotation::from_matrix_unchecked` is now `const fn`.\n- The `Scalar` is now automatically implemented for most `'static + Clone` types. Type that implement `Clone` but not\n  `Copy` are now much safer to work with thanks to the refactoring of the `Allocator` system.\n\n### Added\n\n- The conversion traits form the `bytemuck` crates are now implemented for the geometric types too.\n- Added operator overloading for `Transform * UnitComplex`, `UnitComplex * Transform`, `Transform ×= UnitComplex`,\n  `Transform ÷= UnitComplex`.\n- Added `Reflection::bias()` to retrieve the bias of the reflection.\n- Added `Reflection1..Reflection6` aliases for 1D to 6D reflections.\n- Added implementation of `From` and `Into` for converting between `nalgebra` types and types from\n  `glam 0.16` and `glam 0.17`. These can be enabled by enabling the `convert-glam016`, and/or `convert-glam017`\n  cargo features.\n\n## [0.28.0]\n\n### Added\n\n- Implement `Hash` for `Transform`.\n- Implement `Borrow` and `BorrowMut` for contiguous slices.\n\n### Modified\n\n- The `OPoint<T, D>` type has been added. It takes the dimension number as a type-level integer (e.g. `Const<3>`)\n  instead\n  of a const-generic. The type `Point<T, const D: usize>` is now an alias for `OPoint`. This changes doesn't affect any\n  of the existing code using `Point`. However, it will allow the use `OPoint` in a generic context where the dimension\n  cannot be easily expressed as a const-generic (because of the current limitation of const-generics in Rust).\n- Several clippy warnings were fixed. This results in some method signature changes (e.g. taking `self` instead\n  of `&self`)\n  but this should not have any practical infulances on existing codebase.\n- The `Point::new` constructors are no longer const-fn. This is due to some limitations in const-fn\n  not allowing custom trait-bounds. Use the `point!` macro instead to build points in const environments.\n- `Dynamic::new` and `Unit::new_unchecked` are now const-fn.\n- Methods returning `Result<(), ()>` now return `bool` instead.\n\n### Fixed\n\n- Fixed a potential unsoundess issue when converting a mutable slice to a `&mut[T]`.\n\n## [0.27.1]\n\n### Fixed\n\n- Fixed a bug in the conversion from `glam::Vec2` or `glam::DVec2` to `Isometry2`.\n\n## [0.27.0]\n\nThis removes the `convert-glam` and `convert-glam-unchecked` optional features.\nInstead, this adds the `convert-glam013`, `convert-glam014`, and `convert-glam015` optional features for\nconversions targeting the versions 0.13, 0.14, and 0.15 of `glam`.\n\n### Added\n\n- Add macros `matrix!`, `dmatrix!`, `vector!`, `dvector!`, `point!` for constructing matrices/vectors/points in a\n  more convenient way. See [#886](https://github.com/dimforge/nalgebra/pull/886)\n  and [#899](https://github.com/dimforge/nalgebra/pull/899).\n- Add `CooMatrix::reserve` to `nalgebra-sparse`.\n- Add basic support for serialization using `rkyv`. Can be enabled with the features `rkyv-serialize` or\n  `rkyv-serialize-no-std`.\n\n### Fixed\n\n- Fixed a potential unsoundness issue after deserializing an invalid `DVector` using `serde`.\n\n## [0.26.2]\n\n### Added\n\n- Conversion from an array `[T; D]` to an isometry `Isometry<T, _, D>` (as a translation).\n- Conversion from a static vector `SVector<T; D>` to an isometry `Isometry<T, _, D>` (as a translation).\n- Conversion from a point `Point<T; D>` to an isometry `Isometry<T, _, D>` (as a translation).\n- Conversion of an array `[T; D]` from/to a translation `Translation<T, D>`.\n- Conversion of a point `Point<T, D>` to a translation `Translation<T, D>`.\n- Conversion of the tuple of glam types `(Vec3, Quat)` from/to an `Isometry2` or `Isometry3`.\n- Conversion of a glam type `Vec2/3/4` from/to a `Translation2/3/4`.\n\n## [0.26.1]\n\nFix a regression introduced in 0.26.0 preventing `DVector` from being serialized with `serde`.\n\n## [0.26.0]\n\nThis release integrates `min-const-generics` to nalgebra. See\n[our blog post](https://www.dimforge.com/blog/2021/04/12/integrating-const-generics-to-nalgebra)\nfor details about this release.\n\n### Added\n\n- Add type aliases for unit vector, e.g., `UnitVector3`.\n- Add a `pow` and `pow_mut` function to square matrices.\n- Add `Cholesky::determinant` to compute the determinant of a matrix decomposed\n  with Cholesky.\n- Add the `serde-serialize-no-std` feature to enable serialization of static matrices/vectors\n  with serde, but without requiring `std`.\n\n### Modified\n\n- The `serde` crate isn't enabled by default now. Enable the `serde-serialize` or the\n  `serde-serialize-no-std` features instead.\n- The `Const<const D: usize>` type has been introduced to represent dimensions known\n  at compile-time. This replaces the type-level integers from `typenum` as well as\n  the `U1, U2, ..., U127` types from `nalgebra`. These `U1, U2, ..., U127` are now\n  just aliases for `Const<D>`, e.g., `type U2 = Const<2>`.\n- The `ArrayStorage` now uses a standard array `[[T; R]; C]` instead of a `GenericArray`.\n- Many trait bounds were changed to accommodate const-generics. Most of these changes\n  should be transparent wrt. non-generic code.\n- The `MatrixMN` alias has been deprecated. Use `OMatrix` or `SMatrix` instead.\n- The `MatrixN<T, D>` alias has been deprecated. Use `OMatrix<T, D, D>` or `SMatrix` instead.\n- The `VectorN<T, D>` alias has been deprecated. Use `OVector` or `SVector` instead.\n- The `Point`, `Translation`, `Isometry`, `Similarity`, and `Transformation` types now take an\n  integer for their dimension (instead of a type-level integer).\n- The type parameter order of `Isometry`, `Similarity`, `Transformation` changed to put\n  the integer dimensions in the last position (this is required by the compiler).\n- The `::new` constructors of translations, points, matrices, and vectors of dimensions `<= 6`\n  are now `const fn`, making them usable to define constant globals. The `Quaternion::new`\n  constructor is also a `const fn` now.\n\n## [0.25.4]\n\n### Fixed\n\n- Fix a compilation error when only the `serde-serialize` feature is enabled.\n\n## [0.25.3]\n\n### Added\n\n- The `Vector::simd_cap_magnitude` method to cap the magnitude of the vector with\n  SIMD components.\n\n## [0.25.2]\n\n### Added\n\n- A `convert-glam` cargo feature to enable implementations of `From` traits to convert\n  between `glam` types and `nalgebra` types.\n- A `convert-glam-unchecked` cargo feature to enable some extra `glam`/`nalgebra` conversions that may\n  lead to unexpected results if used improperly. For example, this enables the conversion from a\n  `glam::Mat4` to a `na::Isometry3`. This conversion will be cheap (without any check) but willlead to\n  unexpected results if the glam matrix contains non-isometric components (like scaling for example).\n- A `cast` method has been added to most types. This can be used to change the\n  type of the components of a given entity. Example: `vector.cast::<f32>()`.\n\n## [0.25.1]\n\nThis release replaces the version 0.25.0 which has been yanked. The 0.25.0 version\nadded significant complication to build `nalgebra` targeting a `#[no-std]` platform\nnot supported by `rand`.\n\nThe `rand` dependency is now optional (and disabled by default). You may enable it with:\n\n- The `rand-no-std` cargo feature when targeting a `#[no-std]` environment.\n- The `rand` cargo feature when targeting a `std` environment.\n\n## [0.25.0] - Yanked\n\nThis updates all the dependencies of nalgebra to their latest version, including:\n\n- rand 0.8\n- proptest 1.0\n- simba 0.4\n\n### New crate: nalgebra-sparse\n\nAlongside this release of `nalgebra`, we are releasing `nalgebra-sparse`: a crate dedicated to sparse matrix\ncomputation with `nalgebra`. The `sparse` module of `nalgebra`itself still exists for backward compatibility,\nbut it will be deprecated soon in favor of the `nalgebra-sparse` crate.\n\n### Added\n\n* Add `UnitDualQuaternion`, a dual-quaternion with unit magnitude which can be used as an isometry transformation.\n* Add `UDU::new()` and `matrix.udu()` to compute the UDU factorization of a matrix.\n* Add `ColPivQR::new()` and `matrix.col_piv_qr()` to compute the QR decomposition with column pivoting of a matrix.\n* Add `from_basis_unchecked` to all the rotation types. This builds a rotation from a set of basis vectors (representing\n  the columns of the corresponding rotation matrix).\n* Add `Matrix::cap_magnitude` to cap the magnitude of a vector.\n* Add `UnitQuaternion::append_axisangle_linearized` to approximately append a rotation represented as an axis-angle to a\n  rotation represented as an unit quaternion.\n* Mark the iterators on matrix components as `DoubleEndedIter`.\n* Re-export `simba::simd::SimdValue` at the root of the `nalgebra` crate.\n\n## [0.24.0]\n\n### Added\n\n* The `DualQuaternion` type. It is still work-in-progress, but the basics are here:\n  creation from its real and dual part, multiplication of two dual quaternions,\n  and normalization.\n\n### Removed\n\n* There is no blanket `impl<T> PartialEq for Unit<T>` anymore. Instead, it is\n  implemented specifically for `UnitComplex`, `UnitQuaternion` and `Unit<Vector>`.\n\n## [0.23.2]\n\nIn this release, we improved the documentation of some of the geometric types\nby applying changes similar to what we did in the version 0.23.1 for matrices.\n\n### Added\n\n* The `Isometry::inv_mul` method which is a more efficient way of doing\n  `isometry1.inverse() * isometry2`.\n\n## [0.23.1]\n\nIn this release we improved the documentation of the matrix and vector types by:\n\n- Grouping `impl` bocks logically, adding a title comment to these impl blocks.\n- Reference these impl blocks docs at the top of the documentation page for `Matrix`.\n- Reduce the depth of type aliasing. Now all vector and matrix types are aliases of `Matrix`\n  directly (instead of being aliases for other aliases).\n\n## [0.23.0]\n\n### Added\n\n* The `.inverse_transform_unit_vector(v)` was added to `Rotation2/3`, `Isometry2/3`, `UnitQuaternion`,\n  and `UnitComplex`.\n  It applies the corresponding rotation to a unit vector `Unit<Vector2/3>`.\n* The `Point.map(f)` and `Point.apply(f)` to apply a function to each component of the point, similarly\n  to `Vector.map(f)`\n  and `Vector.apply(f)`.\n* The `Quaternion::from([N; 4])` conversion to build a quaternion from an array of four elements.\n* The `Isometry::from(Translation)` conversion to build an isometry from a translation.\n* The `Vector::ith_axis(i)` which build a unit vector, e.g., `Unit<Vector3<f32>>` with its i-th component set to 1.0,\n  and the\n  others set to zero.\n* The `Isometry.lerp_slerp` and `Isometry.try_lerp_slerp` methods to interpolate between two isometries using linear\n  interpolation for the translational part, and spherical interpolation for the rotational part.\n* The `Rotation2.slerp`, `Rotation3.slerp`, and `UnitQuaternion.slerp` method for\n  spherical interpolation.\n\n## [0.22.0]\n\nIn this release, we are using the new version 0.2 of simba. One major change of that version is that the\nuse of `libm` is now opt-in when building targeting `no-std` environment. If you are using floating-point\noperations with nalgebra in a `no-std` environment, you will need to enable the new `libm` feature\nof nalgebra for your code to compile again.\n\n### Added\n\n* The `libm` feature that enables `libm` when building for `no-std` environment.\n* The `libm-force` feature that enables `libm` even when building for a not `no-std` environment.\n* `Cholesky::new_unchecked` which build a Cholesky decomposition without checking that its input is\n  positive-definite. It can be used with SIMD types.\n* The `Default` trait is now implemented for matrices, and quaternions. They are all filled with zeros,\n  except for `UnitQuaternion` which is initialized with the identity.\n* Matrix exponential `matrix.exp()`.\n* The `Vector::ith(i, x)` that builds a vector filled with zeros except for the `i`-th component set to `x`.\n\n## [0.21.0]\n\nIn this release, we are no longer relying on traits from the __alga__ crate for our generic code.\nInstead, we use traits from the new [simba](https://crates.io/crates/simba) crate which are both\nsimpler, and allow for significant optimizations like AoSoA SIMD.\n\nRefer to the [monthly dimforge blogpost](https://www.dimforge.org/blog/2020/04/01/this-month-in-dimforge/)\nfor details about this switch and its benefits.\n\n### Added\n\n* It is now possible to use SIMD types like `simba::f32x4` as scalar types for nalgebra's matrices and\n  geometric types.\n\n### Modified\n\n* Use of traits like `alga::general::{RealField, ComplexField}` have now been replaced by\n  `simba::scalar::{RealField, ComplexField}`.\n* The implementation of traits from the __alga__ crate (and well as the dependency to _alga__) are now\n  omitted unless the `alga` cargo feature is activated.\n\n### Removed\n\n* The `Neg` unary operator is no longer implemented for `UnitComplex` and `UnitQuaternion`. This caused\n  hard-to-track errors when we mistakenly write, e.g., `-q * v` instead of `-(q * v)`.\n* The `na::convert_unchecked` is no longer marked as unsafe.\n\n## [0.20.0]\n\n### Added\n\n* `cholesky.rank_one_update(...)` which performs a rank-one update on the cholesky decomposition of a matrix.\n* `From<&Matrix>` is now implemented for matrix slices.\n* `.try_set_magnitude(...)` which sets the magnitude of a vector, while keeping its direction.\n* Implementations of `From` and `Into` for the conversion between matrix slices and standard (`&[N]` `&mut [N]`) slices.\n\n### Modified\n\n* We started some major changes in order to allow non-Copy types to be used as scalar types inside of matrices/vectors.\n\n## [0.19.0]\n\n### Added\n\n* `.remove_rows_at` and `remove_columns_at` which removes a set of rows or columns (specified by indices) from a matrix.\n* Several formatting traits have been implemented for all matrices/vectors: `LowerExp`, `UpperExp`, `Octal`, `LowerHex`,\n  `UpperHex`, `Binary`, `Pointer`.\n* `UnitQuaternion::quaternions_mean(...)` which computes the mean rotation of a set of unit quaternions. This implements\n  the algorithm from _Oshman, Yaakov, and Avishy Carmi, \"Attitude estimation from vector observations using a\n  genetic-algorithm-embedded quaternion particle filter.\"\n\n### Modified\n\n* It is now possible to get the `min/max` element of unsigned integer matrices.\n\n### Added to nalgebra-glm\n\n* Some infinite and reversed perspectives: `::infinite_perspective_rh_no`, `::infinite_perspective_rh_zo`,\n  `::reversed_perspective_rh_zo`, and `::reversed_infinite_perspective_rh_zo`.\n\n## [0.18.0]\n\nThis release adds full complex number support to nalgebra. This includes all common vector/matrix operations as well\nas matrix decomposition. This excludes geometric type (like `Isometry`, `Rotation`, `Translation`, etc.) from the\n`geometry` module.\n\n### Added\n\n#### Quaternion and geometric operations\n\n* Add trigonometric functions for\n  quaternions: `.cos, .sin, .tan, .acos, .asin, .atan, .cosh, .sinh, .tanh, .acosh, .asinh, .atanh`.\n* Add geometric algebra operations for quaternions: `.inner, .outer, .project, .rejection`\n* Add `.left_div, .right_div` for quaternions.\n* Add `.renormalize` to `Unit<...>` and `Rotation3` to correct potential drift due to repeated operations.\n  Those drifts could cause them not to be pure rotations anymore.\n\n#### Convolution\n\n* `.convolve_full(kernel)` returns the convolution of `self` by `kernel`.\n* `.convolve_valid(kernel)` returns the convolution of `self` by `kernel` after removal of all the elements relying on\n  zero-padding.\n* `.convolve_same(kernel)` returns the convolution of `self` by `kernel` with a result of the same size as `self`.\n\n#### Complex number support\n\n* Add the `::from_matrix` constructor too all rotation types to extract a rotation from a raw matrix.\n* Add the `::from_matrix_eps` constructor too all rotation types to extract a rotation from a raw matrix. This takes\n  more argument than `::from_matrix` to control the convergence of the underlying optimization algorithm.\n* Add `.camax()` which returns the matrix component with the greatest L1-norm.\n* Add `.camin()` which returns the matrix component with the smallest L1-norm.\n* Add `.ad_mul(b)` for matrix-multiplication of `self.adjoint() * b`.\n* Add `.ad_mul_to(b)` which is the same as `.ad_mul` but with a provided matrix to be filled with the result of the\n  multiplication.\n* Add BLAS operations involving complex conjugation (following similar names as the original BLAS spec):\n    * `.dotc(rhs)` equal to  `self.adjoint() * rhs`.\n    * `.gerc(alpha, x, y, beta)` equivalent to `self = alpha * x * y.adjoint() + beta * self`\n    * `.hegerc` which is like `gerc` but for Hermitian matrices.\n    * `.syger` which is the new name of `.ger_symm` which is equivalent\n      to `self = alpha * x * y.transpose() + beta * self`.\n    * `.sygemv` which is the new name of `.gemv_symm` which is equivalent to `self = alpha * a * x + beta * self`\n      with `a` symmetric.\n    * `.hegemv(alpha, a, x, beta)` which is like `.sygemv` but with `a` Hermitian.\n    * `.gemv_ad(alpha, a, x, beta)` which is equivalent to `self = alpha * a.adjoint() * x + beta * self`.\n    * `.gemm_ad(alpha, a, b, beta)` which is equivalent to `self = alpha * a.adjoint() * b + beta * self`.\n    * `.icamax()` which returns the index of the complex vector component with the greatest L1-norm.\n\nNote that all the other BLAS operation will continue to work for all fields, including floats and complex numbers.\n\n### Renamed\n\n* `RealSchur` has been renamed `Schur` because it can now work with complex matrices.\n\n## [0.17.0]\n\n### Added\n\n* Add swizzling up to dimension 3 for vectors. For example, you can do `v.zxy()` as an equivalent\n  to `Vector3::new(v.z, v.x, v.y)`.\n* Add swizzling up to dimension 3 for points. For example, you can do `p.zxy()` as an equivalent\n  to `Point3::new(p.z, p.x, p.y)`.\n* Add `.copy_from_slice` to copy matrix components from a slice in column-major order.\n* Add `.dot` to quaternions.\n* Add `.zip_zip_map` for iterating on three matrices simultaneously, and applying a closure to them.\n* Add `.slerp` and `.try_slerp` to unit vectors.\n* Add `.lerp` to vectors.\n* Add `.to_projective` and `.as_projective` to `Perspective3` and `Orthographic3` in order to\n  use them as `Projective3` structures.\n* Add `From/Into` impls to allow the conversion of any transformation type to a matrix.\n* Add `Into` impls to convert a matrix slice into an owned matrix.\n* Add `Point*::from_slice` to create a point from a slice.\n* Add `.map_with_location` to matrices to apply a map which passes the component indices to the user-defined closure\n  alongside\n  the component itself.\n* Add impl `From<Vector>` for `Point`.\n* Add impl `From<Vector4>` for `Quaternion`.\n* Add impl `From<Vector>` for `Translation`.\n* Add the `::from_vec` constructor to construct a matrix from a `Vec` (a `DMatrix` will reuse the original `Vec`\n  as-is for its storage).\n* Add `.to_homogeneous` to square matrices (and with dimensions higher than 1x1). This will increase their number of row\n  and columns by 1. The new column and row are filled with 0, except for the diagonal element which is set to 1.\n* Implement `Extend<Vec>` for matrices with a dynamic storage. The provided `Vec` is assumed to represent a column-major\n  matrix with the same number of rows as the one being extended. This will effectively append new columns on the right\n  of\n  the matrix being extended.\n* Implement `Extend<Vec>` for vectors with a dynamic storage. This will concatenate the vector with the given `Vec`.\n* Implement `Extend<Matrix<...>>` for matrices with dynamic storage. This will concatenate the columns of both matrices.\n* Implement `Into<Vec>` for the `MatrixVec` storage.\n* Implement `Hash` for all matrices.\n* Add a `.len()` method to retrieve the size of a `MatrixVec`.\n\n### Modified\n\n* The orthographic projection no longer require that `bottom < top`, that `left < right`, and that `znear < zfar`. The\n  only restriction now ith that they must not be equal (in which case the projection would be singular).\n* The `Point::from_coordinates` methods is deprecated. Use `Point::from` instead.\n* The `.transform_point` and `.transform_vector` methods are now inherent methods for matrices so that the user does not\n  have to\n  explicitly import the `Transform` trait from the alga crate.\n* Renamed the matrix storage types: `MatrixArray` -> `ArrayStorage` and `MatrixVec` -> `VecStorage`.\n* Renamed `.unwrap()` to `.into_inner()` for geometric types that wrap another type.\n  This is for the case of `Unit`, `Transform`, `Orthographic3`, `Perspective3`, `Rotation`.\n* Deprecate several functions at the root of the crate (replaced by methods).\n\n### Removed\n\n    * Remove the `Deref` impl for `MatrixVec` as it could cause hard-to-understand compilation errors.\n\n### nalgebra-glm\n\n* Add several alternative projection computations, e.g., `ortho_lh`, `ortho_lh_no`, `perspective_lh`, etc.\n* Add features matching those of nalgebra, in particular:`serde-serialize`, `abmonation-serialize`, std` (enabled by\n  default).\n\n## [0.16.0]\n\nAll dependencies have been updated to their latest versions.\n\n## Modified\n\n* Adjust `UnitQuaternion`s, `Rotation3`s, and `Rotation2`s generated from the `Standard` distribution to be uniformly\n  distributed.\n\n### Added\n\n* Add a feature `stdweb` to activate the dependency feature `rand/stdweb`.\n* Add blas-like methods `.imin()` and `.imax()` that return the index of the minimum and maximum entry of a vector.\n* Add construction of a `Point` from an array by implementing the `From` trait.\n* Add support for generating uniformly distributed random unit column vectors using the `Standard` distribution.\n\n## [0.15.0]\n\nThe most notable change of this release is the support for using part of the library without the rust standard\nlibrary (i.e. it supports `#![no_std]`). See the\ncorresponding [documentation](https://nalgebra.org/wasm_and_embedded_programming/).\n\n### Modified\n\n* Rename the `core` module to `base` to avoid conflicts with the `core` crate implicitly imported when\n  `#![no_std]` is enabled.\n* Constructors of the `MatrixSlice*` types have been renamed from `new_*` to `from_slice_*`. This was\n  necessary to avoid the `incoherent_fundamental_impls` lint that is going to become a hard error.\n\n### Added\n\n* Add `UnitQuaternion` constructor `::new_eps(...)` and `::from_scaled_axis_eps(...)` that return the\n  identity if the magnitude of the input axisangle is smaller than the epsilon provided.\n* Add methods `.rotation_between_axis(...)` and `.scaled_rotation_between_axis(...)` to `UnitComplex`\n  to compute the rotation matrix between two 2D **unit** vectors.\n* Add methods `.axis_angle()` to `UnitComplex` and `UnitQuaternion` in order to retrieve both the\n  unit rotation axis, and the rotation angle simultaneously.\n* Add functions to construct a random matrix with a user-defined distribution: `::from_distribution(...)`.\n\n## [0.14.0]\n\n### Modified\n\n* Allow the `Isometry * Unit<Vector>` multiplication.\n\n### Added\n\n* Add blas-like operations: `.quadform(...)` and `.quadform_tr(...)` to compute respectively\n  the quadratic forms `self = alpha * A.transpose() * B * A + beta * self` and\n  `alpha * A * B * A.transpose() + beta * self`. Here, `A, B` are matrices with\n  `B` square, and `alpha, beta` are reals.\n* Add blas-like operations: `.gemv_tr(...)` that behaves like `.gemv` except that the\n  provided matrix is assumed to be transposed.\n* Add blas-like operations: `cmpy, cdpy` for component-wise multiplications and\n  division with scalar factors:\n    - `self <- alpha * self + beta * a * b`\n    - `self <- alpha * self + beta * a / b`\n* `.cross_matrix()` returns the cross-product matrix of a given 3D vector, i.e.,\n  the matrix `M` such that for all vector `v` we have\n  `M * v == self.cross(&v)`.\n* `.iamin()` that returns the index of the vector entry with\n  the smallest absolute value.\n* The `mint` feature that can be enabled in order to allow conversions from\n  and to types of the [mint](https://crates.io/crates/mint) crate.\n* Aliases for matrix and vector slices. Their are named by adding `Slice`\n  before the dimension numbers, i.e., a 3x5 matrix slice with dimensions known\n  at compile-time is called `MatrixSlice3x5`. A vector slice with dimensions\n  unknown at compile-time is called `DVectorSlice`.\n* Add functions for constructing matrix slices from a slice `&[N]`, e.g.,\n  `MatrixSlice2::new(...)` and `MatrixSlice2::new_with_strides(...)`.\n* The `::repeat(...)` constructor that is an alternative name to\n  `::from_element(...)`.\n* `UnitQuaternion::scaled_rotation_between_axis(...)` and\n  `UnitQuaternion::rotation_between_axis(...)` that take Unit vectors instead of\n  Vector as arguments.\n\n## [0.13.0]\n\nThe **nalgebra-lapack** crate has been updated. This now includes a broad range\nmatrix decompositions using LAPACK bindings.\n\nThis adds support for serialization using the\n[abomonation](https://crates.io/crates/abomonation) crate.\n\n### Breaking semantic change\n\n* The implementation of slicing with steps now matches the documentation.\n  Before, step identified the number to add to pass from one column/row index\n  to the next one. This made 0 step invalid. Now (and on the documentation so\n  far), the step is the number of ignored row/columns between each\n  row/column. Thus, a step of 0 means that no row/column is ignored. For\n  example, a step of, say, 3 on previous versions should now bet set to 2.\n\n### Modified\n\n* The trait `Axpy` has been replaced by a method `.axpy`.\n* The alias `MatrixNM` is now deprecated. Use `MatrixMN` instead (we\n  reordered M and N to be in alphabetical order).\n* In-place componentwise multiplication and division\n  `.component_mul_mut(...)` and `.component_div_mut(...)` have been deprecated\n  for a future renaming. Use `.component_mul_assign(...)` and\n  `.component_div_assign(...)` instead.\n\n### Added\n\n* `alga::general::Real` is now re-exported by nalgebra.\n  elements.)\n* `::zeros(...)` that creates a matrix filled with zeroes.\n* `::from_partial_diagonal(...)` that creates a matrix from diagonal elements.\n  The matrix can be rectangular. If not enough elements are provided, the rest\n  of the diagonal is set to 0.\n* `.conjugate_transpose()` computes the transposed conjugate of a\n  complex matrix.\n* `.conjugate_transpose_to(...)` computes the transposed conjugate of a\n  complex matrix. The result written into a user-provided matrix.\n* `.transpose_to(...)` is the same as `.transpose()` but stores the result in\n  the provided matrix.\n* `.conjugate_transpose_to(...)` is the same as `.conjugate_transpose()` but\n  stores the result in the provided matrix.\n* Implements `IntoIterator` for `&Matrix`, `&mut Matrix` and `Matrix`.\n* `.mul_to(...)` multiplies two matrices and stores the result to the given buffer.\n* `.tr_mul_to(...)` left-multiplies `self.transpose()` to another matrix and stores the result to the given buffer.\n* `.add_scalar(...)` that adds a scalar to each component of a matrix.\n* `.add_scalar_mut(...)` that adds in-place a scalar to each component of a matrix.\n* `.kronecker(a, b)` computes the kronecker product (i.e. matrix tensor\n  product) of two matrices.\n* `.apply(f)` replaces each component of a matrix with the results of the\n  closure `f` called on each of them.\n\nPure Rust implementation of some Blas operations:\n\n* `.iamax()` returns the index of the maximum value of a vector.\n* `.axpy(...)` computes `self = a * x + b * self`.\n* `.gemv(...)` computes `self = alpha * a * x + beta * self` with a matrix and vector `a` and `x`.\n* `.ger(...)` computes `self = alpha * x^t * y + beta * self` where `x` and `y` are vectors.\n* `.gemm(...)` computes `self = alpha * a * b + beta * self` where `a` and `b` are matrices.\n* `.gemv_symm(...)` is the same as `.gemv` except that `self` is assumed symmetric.\n* `.ger_symm(...)` is the same as `.ger` except that `self` is assumed symmetric.\n\nNew slicing methods:\n\n* `.rows_range(...)` that retrieves a reference to a range of rows.\n* `.rows_range_mut(...)` that retrieves a mutable reference to a range of rows.\n* `.columns_range(...)` that retrieves a reference to a range of columns.\n* `.columns_range_mut(...)` that retrieves a mutable reference to a range of columns.\n\nMatrix decompositions implemented in pure Rust:\n\n* Cholesky, SVD, LU, QR, Hessenberg, Schur, Symmetric eigendecompositions,\n  Bidiagonal, Symmetric tridiagonal\n* Computation of householder reflectors and givens rotations.\n\nMatrix edition:\n\n* `.upper_triangle()` extracts the upper triangle of a matrix, including the diagonal.\n* `.lower_triangle()` extracts the lower triangle of a matrix, including the diagonal.\n* `.fill(...)` fills the matrix with a single value.\n* `.fill_with_identity(...)` fills the matrix with the identity.\n* `.fill_diagonal(...)` fills the matrix diagonal with a single value.\n* `.fill_row(...)` fills a selected matrix row with a single value.\n* `.fill_column(...)` fills a selected matrix column with a single value.\n* `.set_diagonal(...)` sets the matrix diagonal.\n* `.set_row(...)` sets a selected row.\n* `.set_column(...)` sets a selected column.\n* `.fill_lower_triangle(...)` fills some sub-diagonals below the main diagonal with a value.\n* `.fill_upper_triangle(...)` fills some sub-diagonals above the main diagonal with a value.\n* `.swap_rows(...)` swaps two rows.\n* `.swap_columns(...)` swaps two columns.\n\nColumn removal:\n\n* `.remove_column(...)` removes one column.\n* `.remove_fixed_columns<D>(...)` removes `D` columns.\n* `.remove_columns(...)` removes a number of columns known at run-time.\n\nRow removal:\n\n* `.remove_row(...)` removes one row.\n* `.remove_fixed_rows<D>(...)` removes `D` rows.\n* `.remove_rows(...)` removes a number of rows known at run-time.\n\nColumn insertion:\n\n* `.insert_column(...)` adds one column at the given position.\n* `.insert_fixed_columns<D>(...)` adds `D` columns at the given position.\n* `.insert_columns(...)` adds at the given position a number of columns known at run-time.\n\nRow insertion:\n\n* `.insert_row(...)` adds one row at the given position.\n* `.insert_fixed_rows<D>(...)` adds `D` rows at the given position.\n* `.insert_rows(...)` adds at the given position a number of rows known at run-time.\n\n## [0.12.0]\n\nThe main change of this release is the update of the dependency serde to 1.0.\n\n### Added\n\n* `.trace()` that computes the trace of a matrix (the sum of its diagonal\n  elements.)\n\n## [0.11.0]\n\nThe [website](https://nalgebra.org) has been fully rewritten and gives a good\noverview of all the added/modified features.\n\nThis version is a major rewrite of the library. Major changes are:\n\n* Algebraic traits are now defined by the [alga](https://crates.io/crates/alga) crate.\n  All other mathematical traits, except `Axpy` have been removed from\n  **nalgebra**.\n* Methods are now preferred to free functions because they do not require any\n  trait to be used anymore.\n* Most algebraic entities can be parametrized by type-level integers\n  to specify their dimensions. Using `Dynamic` instead of a type-level\n  integer indicates that the dimension known at run-time only.\n* Statically-sized **rectangular** matrices.\n* More transformation types have been added: unit-sized complex numbers (for\n  2D rotations), affine/projective/general transformations with `Affine2/3`,\n  `Projective2/3`, and `Transform2/3`.\n* Serde serialization is now supported instead of `rustc_serialize`. Enable\n  it with the `serde-serialize` feature.\n* Matrix **slices** are now implemented.\n\n### Added\n\nLots of features including rectangular matrices, slices, and Serde\nserialization. Refer to the brand new [website](https://nalgebra.org) for more\ndetails. The following free-functions have been added as well:\n\n* `::id()` that returns the universal [identity element](https://nalgebra.org/performance_tricks/#the-id-type)\n  of type `Id`.\n* `::inf_sup()` that returns both the infimum and supremum of a value at the\n  same time.\n* `::partial_sort2()` that attempts to sort two values in increasing order.\n* `::wrap()` that moves a value to the given interval by adding or removing\n  the interval width to it.\n\n### Modified\n\n* `::cast`            -> `::convert`\n* `point.as_vector()` -> `point.coords`\n* `na::origin`        -> `P::origin()`\n* `na::is_zero`       -> `.is_zero()` (from num::Zero)\n* `.transform`        -> `.transform_point`/`.transform_vector`\n* `.translate`        -> `.translate_point`\n* `::dimension::<P>`  -> `::dimension::<P::Vector>`\n* `::angle_between`   -> `::angle`\n\nComponentwise multiplication and division has been replaced by methods:\n\n* multiplication -> `.componentwise_mul`, `.componentwise_mul_mut`.\n* division -> `.componentwise_div`, `.componentwise_div_mut`.\n\nThe following free-functions are now replaced by methods (with the same names)\nonly:\n`::cross`, `::cholesky`, `::determinant`, `::diagonal`, `::eigen_qr` (becomes\n`.eig`), `::hessenberg`, `::qr`, `::to_homogeneous`, `::to_rotation_matrix`,\n`::transpose`, `::shape`.\n\nThe following free-functions are now replaced by static methods only:\n\n* `::householder_matrix` under the name `::new_householder_generic`\n* `::identity`\n* `::new_identity` under the name `::identity`\n* `::from_homogeneous`\n* `::repeat` under the name `::from_element`\n\nThe following free-function are now replaced methods accessible through traits\nonly:\n\n* `::transform` -> methods `.transform_point` and `.transform_vector` of the `alga::linear::Transformation` trait.\n* `::inverse_transform` -> methods `.inverse_transform_point` and\n  `.inverse_transform_vector` of the `alga::linear::ProjectiveTransformation`\n  trait.\n* `::translate`, `::inverse_translate`, `::rotate`, `::inverse_rotate` ->\n  methods from the `alga::linear::Similarity` trait instead. Those have the\n  same names but end with `_point` or `_vector`, e.g., `.translate_point` and\n  `.translate_vector`.\n* `::orthonormal_subspace_basis` -> method with the same name from\n  `alga::linear::FiniteDimInnerSpace`.\n* `::canonical_basis_element` and `::canonical_basis` -> methods with the\n  same names from `alga::linear::FiniteDimVectorSpace`.\n* `::rotation_between` -> method with the same name from the\n  `alga::linear::Rotation` trait.\n* `::is_zero` -> method with the same name from `num::Zero`.\n\n### Removed\n\n* The free functions `::prepend_rotation`, `::append_rotation`,\n  `::append_rotation_wrt_center`, `::append_rotation_wrt_point`,\n  `::append_transformation`, and `::append_translation ` have been removed.\n  Instead, create the rotation or translation object explicitly and use\n  multiplication to compose it with anything else.\n\n* The free function `::outer` has been removed. Use column-vector ×\n  row-vector multiplication instead.\n\n* `::approx_eq`, `::approx_eq_eps` have been removed. Use the `relative_eq!`\n  macro from the [approx](https://crates.io/crates/approx) crate instead.\n\n* `::covariance` has been removed. There is no replacement for now.\n* `::mean` has been removed. There is no replacement for now.\n* `::sample_sphere` has been removed. There is no replacement for now.\n* `::cross_matrix` has been removed. There is no replacement for now.\n* `::absolute_rotate` has been removed. There is no replacement for now.\n* `::rotation`, `::transformation`, `::translation`, `::inverse_rotation`,\n  `::inverse_transformation`, `::inverse_translation` have been removed. Use\n  the appropriate methods/field of each transformation type, e.g.,\n  `rotation.angle()` and `rotation.axis()`.\n\n## [0.10.0]\n\n### Added\n\nBinary operations are now allowed between references as well. For example\n`Vector3<f32> + &Vector3<f32>` is now possible.\n\n### Modified\n\nRemoved unused parameters to methods from the `ApproxEq` trait. Those were\nrequired before rust 1.0 to help type inference. They are not needed any more\nsince it now allowed to write for a type `T` that implements `ApproxEq`:\n`<T as ApproxEq>::approx_epsilon()`. This replaces the old form:\n`ApproxEq::approx_epsilon(None::<T>)`.\n\n## [0.9.0]\n\n### Modified\n\n* Renamed:\n    - `::from_col_vector` -> `::from_column_vector`\n    - `::from_col_iter` -> `::from_column_iter`\n    - `.col_slice` -> `.column_slice`\n    - `.set_col` -> `.set_column`\n    - `::canonical_basis_with_dim` -> `::canonical_basis_with_dimension`\n    - `::from_elem` -> `::from_element`\n    - `DiagMut` -> `DiagonalMut`\n    - `UnitQuaternion::new` becomes `UnitQuaternion::from_scaled_axis` or\n      `UnitQuaternion::from_axisangle`. The new `::new` method now requires a\n      not-normalized quaternion.\n\nMethod names starting with `new_with_` now start with `from_`. This is more\nidiomatic in Rust.\n\nThe `Norm` trait now uses an associated type instead of a type parameter.\nOther similar trait changes are to be expected in the future, e.g., for the\n`Diagonal` trait.\n\nMethods marked `unsafe` for reasons unrelated to memory safety are no\nlonger unsafe. Instead, their name end with `_unchecked`. In particular:\n\n* `Rotation3::new_with_matrix` -> `Rotation3::from_matrix_unchecked`\n* `PerspectiveMatrix3::new_with_matrix` -> `PerspectiveMatrix3::from_matrix_unchecked`\n* `OrthographicMatrix3::new_with_matrix` -> `OrthographicMatrix3::from_matrix_unchecked`\n\n### Added\n\n- A `Unit<T>` type that wraps normalized values. In particular,\n  `UnitQuaternion<N>` is now an alias for `Unit<Quaternion<N>>`.\n- `.ln()`, `.exp()` and `.powf(..)` for quaternions and unit quaternions.\n- `::from_parts(...)` to build a quaternion from its scalar and vector\n  parts.\n- The `Norm` trait now has a `try_normalize()` that returns `None` if the\n  norm is too small.\n- The `BaseFloat` and `FloatVector` traits now inherit from `ApproxEq` as\n  well. It is clear that performing computations with floats requires\n  approximate equality.\n\nStill WIP: add implementations of abstract algebra traits from the `algebra`\ncrate for vectors, rotations and points. To enable them, activate the\n`abstract_algebra` feature.\n\n## [0.8.0]\n\n### Modified\n\n* Almost everything (types, methods, and traits) now use fulls names instead\n  of abbreviations (e.g. `Vec3` becomes `Vector3`). Most changes are obvious.\n  Note however that:\n    - `::sqnorm` becomes `::norm_squared`.\n    - `::sqdist` becomes `::distance_squared`.\n    - `::abs`, `::min`, etc. did not change as this is a common name for\n      absolute values on, e.g., the libc.\n    - Dynamically sized structures keep the `D` prefix, e.g., `DMat` becomes\n      `DMatrix`.\n* All files with abbreviated names have been renamed to their full version,\n  e.g., `vec.rs` becomes `vector.rs`.\n\n## [0.7.0]\n\n### Added\n\n* Added implementation of assignment operators (+=, -=, etc.) for\n  everything.\n\n### Modified\n\n* Points and vectors are now linked to each other with associated types\n  (on the PointAsVector trait).\n\n## [0.6.0]\n\n**Announcement:** a users forum has been created for `nalgebra`, `ncollide`, and `nphysics`. See\nyou [there](https://users.nphysics.org)!\n\n### Added\n\n* Added a dependency to [generic-array](https://crates.io/crates/generic-array). Feature-gated:\n  requires `features=\"generic_sizes\"`.\n* Added statically sized vectors with user-defined sizes: `VectorN`. Feature-gated: requires\n  `features=\"generic_sizes\"`.\n* Added similarity transformations (an uniform scale followed by a rotation followed by a\n  translation): `Similarity2`, `Similarity3`.\n\n### Removed\n\n* Removed zero-sized elements `Vector0`, `Point0`.\n* Removed 4-dimensional transformations `Rotation4` and `Isometry4` (which had an implementation too incomplete to be\n  useful).\n\n### Modified\n\n* Vectors are now multipliable with isometries. This will result into a pure rotation (this is how\n  vectors differ from point semantically: they design directions, so they are not translatable).\n* `{Isometry3, Rotation3}::look_at` reimplemented and renamed to `::look_at_rh` and `::look_at_lh` to agree\n  with the computer graphics community (in particular, the GLM library). Use the `::look_at_rh`\n  variant to build a view matrix that\n  may be successfully used with `Persp` and `Ortho`.\n* The old `{Isometry3, Rotation3}::look_at` implementations are now called `::new_observer_frame`.\n* Rename every `fov` on `Persp` to `fovy`.\n* Fixed the perspective and orthographic projection matrices.\n"
        },
        {
          "name": "Cargo.toml",
          "type": "blob",
          "size": 5.470703125,
          "content": "[package]\nname = \"nalgebra\"\nversion = \"0.33.2\"\nauthors = [\"Sébastien Crozet <developer@crozet.re>\"]\n\ndescription = \"General-purpose linear algebra library with transformations and statically-sized or dynamically-sized matrices.\"\ndocumentation = \"https://www.nalgebra.org/docs\"\nhomepage = \"https://nalgebra.org\"\nrepository = \"https://github.com/dimforge/nalgebra\"\nreadme = \"README.md\"\ncategories = [\"science\", \"mathematics\", \"wasm\", \"no-std\"]\nkeywords = [\"linear\", \"algebra\", \"matrix\", \"vector\", \"math\"]\nlicense = \"Apache-2.0\"\nedition = \"2018\"\nexclude = [\"/ci/*\", \"/.travis.yml\", \"/Makefile\"]\n\n[badges]\nmaintenance = { status = \"actively-developed\" }\n\n[lib]\nname = \"nalgebra\"\npath = \"src/lib.rs\"\n\n[features]\ndefault = [\"std\", \"macros\"]\nstd = [\"matrixmultiply\", \"num-traits/std\", \"num-complex/std\", \"num-rational/std\", \"approx/std\", \"simba/std\"]\nsparse = []\ndebug = [\"approx/num-complex\", \"rand\"]\nalloc = []\nio = [\"pest\", \"pest_derive\"]\ncompare = [\"matrixcompare-core\"]\nlibm = [\"simba/libm\"]\nlibm-force = [\"simba/libm_force\"]\nmacros = [\"nalgebra-macros\"]\n\n# Conversion\nconvert-mint = [\"mint\"]\nconvert-bytemuck = [\"bytemuck\", \"num-complex/bytemuck\"]\nconvert-glam014 = [\"glam014\"]\nconvert-glam015 = [\"glam015\"]\nconvert-glam016 = [\"glam016\"]\nconvert-glam017 = [\"glam017\"]\nconvert-glam018 = [\"glam018\"]\nconvert-glam019 = [\"glam019\"]\nconvert-glam020 = [\"glam020\"]\nconvert-glam021 = [\"glam021\"]\nconvert-glam022 = [\"glam022\"]\nconvert-glam023 = [\"glam023\"]\nconvert-glam024 = [\"glam024\"]\nconvert-glam025 = [\"glam025\"]\nconvert-glam027 = [\"glam027\"]\nconvert-glam028 = [\"glam028\"]\nconvert-glam029 = [\"glam029\"]\n\n# Serialization\n## To use serde in a #[no-std] environment, enable the\n## `serde-serialize-no-std` feature instead of `serde-serialize`.\n## Serialization of dynamically-sized matrices/vectors require\n## `serde-serialize`.\nserde-serialize-no-std = [\"serde\", \"num-complex/serde\"]\nserde-serialize = [\"serde-serialize-no-std\", \"serde/std\"]\nrkyv-serialize-no-std = [\"rkyv/size_32\"]\nrkyv-serialize = [\"rkyv-serialize-no-std\", \"rkyv/std\", \"rkyv/validation\"]\n\n# Randomness\n## To use rand in a #[no-std] environment, enable the\n## `rand-no-std` feature instead of `rand`.\nrand-no-std = [\"rand-package\"]\nrand = [\"rand-no-std\", \"rand-package/std\", \"rand-package/std_rng\", \"rand_distr\"]\n\n# Tests\narbitrary = [\"quickcheck\"]\nproptest-support = [\"proptest\"]\nslow-tests = []\nrkyv-safe-deser = [\"rkyv-serialize\", \"rkyv/validation\"]\n\n[dependencies]\nnalgebra-macros = { version = \"0.2.2\", path = \"nalgebra-macros\", optional = true }\ntypenum = \"1.12\"\nrand-package = { package = \"rand\", version = \"0.8\", optional = true, default-features = false }\nnum-traits = { version = \"0.2\", default-features = false }\nnum-complex = { version = \"0.4\", default-features = false }\nnum-rational = { version = \"0.4\", default-features = false }\napprox = { version = \"0.5\", default-features = false }\nsimba = { version = \"0.9\", default-features = false }\nalga = { version = \"0.9\", default-features = false, optional = true }\nrand_distr = { version = \"0.4\", default-features = false, optional = true }\nmatrixmultiply = { version = \"0.3\", optional = true }\nserde = { version = \"1.0\", default-features = false, features = [\"derive\"], optional = true }\nrkyv = { version = \"0.7.41\", default-features = false, optional = true }\nmint = { version = \"0.5\", optional = true }\nquickcheck = { version = \"1\", optional = true }\npest = { version = \"2\", optional = true }\npest_derive = { version = \"2\", optional = true }\nbytemuck = { version = \"1.5\", optional = true }\nmatrixcompare-core = { version = \"0.1\", optional = true }\nproptest = { version = \"1\", optional = true, default-features = false, features = [\"std\"] }\nglam014 = { package = \"glam\", version = \"0.14\", optional = true }\nglam015 = { package = \"glam\", version = \"0.15\", optional = true }\nglam016 = { package = \"glam\", version = \"0.16\", optional = true }\nglam017 = { package = \"glam\", version = \"0.17\", optional = true }\nglam018 = { package = \"glam\", version = \"0.18\", optional = true }\nglam019 = { package = \"glam\", version = \"0.19\", optional = true }\nglam020 = { package = \"glam\", version = \"0.20\", optional = true }\nglam021 = { package = \"glam\", version = \"0.21\", optional = true }\nglam022 = { package = \"glam\", version = \"0.22\", optional = true }\nglam023 = { package = \"glam\", version = \"0.23\", optional = true }\nglam024 = { package = \"glam\", version = \"0.24\", optional = true }\nglam025 = { package = \"glam\", version = \"0.25\", optional = true }\nglam027 = { package = \"glam\", version = \"0.27\", optional = true }\nglam028 = { package = \"glam\", version = \"0.28\", optional = true }\nglam029 = { package = \"glam\", version = \"0.29\", optional = true }\nrayon = { version = \"1.6\", optional = true }\n\n[dev-dependencies]\nserde_json = \"1.0\"\nrand_xorshift = \"0.3\"\nrand_isaac = \"0.3\"\ncriterion = { version = \"0.4\", features = [\"html_reports\"] }\nnalgebra = { path = \".\", features = [\"debug\", \"compare\", \"rand\", \"macros\"] }\n\n# For matrix comparison macro\nmatrixcompare = \"0.3.0\"\nitertools = \"0.13\"\n\n# For macro testing\ntrybuild = \"1.0.90\"\n\ncool_asserts = \"2.0.3\"\n\n[workspace]\nmembers = [\"nalgebra-lapack\", \"nalgebra-glm\", \"nalgebra-sparse\", \"nalgebra-macros\"]\nresolver = \"2\"\n\n[[example]]\nname = \"matrixcompare\"\nrequired-features = [\"compare\"]\n\n[[bench]]\nname = \"nalgebra_bench\"\nharness = false\npath = \"benches/lib.rs\"\nrequired-features = [\"rand\"]\n\n#[profile.bench]\n#opt-level = 0\n#lto = false\n\n[profile.bench]\nlto = true\n\n[package.metadata.docs.rs]\n# Enable all the features when building the docs on docs.rs\nall-features = true\n# define the configuration attribute `docsrs`\nrustdoc-args = [\"--cfg\", \"docsrs\"]\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 11.0810546875,
          "content": "                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"[]\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright 2020 Sébastien Crozet\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 0.849609375,
          "content": "<p align=\"center\">\n  <img src=\"https://nalgebra.org/img/logo_nalgebra.svg\" alt=\"crates.io\">\n</p>\n<p align=\"center\">\n    <a href=\"https://discord.gg/vt9DJSW\">\n        <img src=\"https://img.shields.io/discord/507548572338880513.svg?logo=discord&colorB=7289DA\">\n    </a>\n    <a href=\"https://crates.io/crates/nalgebra\">\n         <img src=\"https://img.shields.io/crates/v/nalgebra.svg?style=flat-square\" alt=\"crates.io\">\n    </a>\n    <a href=\"https://opensource.org/licenses/Apache-2.0\">\n        <img src=\"https://img.shields.io/badge/License-Apache%202.0-blue.svg\">\n    </a>\n</p>\n<p align = \"center\">\n    <strong>\n        <a href=\"https://nalgebra.org\">Users guide</a> | <a href=\"https://docs.rs/nalgebra/latest/nalgebra/\">Documentation</a>\n    </strong>\n</p>\n\n-----\n\n<p align = \"center\">\n<b>Linear algebra library</b>\n<i>for the Rust programming language.</i>\n</p>\n\n-----\n"
        },
        {
          "name": "benches",
          "type": "tree",
          "content": null
        },
        {
          "name": "clippy.toml",
          "type": "blob",
          "size": 0.0634765625,
          "content": "too-many-arguments-threshold = 8\ntype-complexity-threshold = 675\n"
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "nalgebra-glm",
          "type": "tree",
          "content": null
        },
        {
          "name": "nalgebra-lapack",
          "type": "tree",
          "content": null
        },
        {
          "name": "nalgebra-macros",
          "type": "tree",
          "content": null
        },
        {
          "name": "nalgebra-sparse",
          "type": "tree",
          "content": null
        },
        {
          "name": "rustfmt.toml",
          "type": "blob",
          "size": 0.072265625,
          "content": "edition = \"2018\"\nuse_try_shorthand = true\nuse_field_init_shorthand = true\n"
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}