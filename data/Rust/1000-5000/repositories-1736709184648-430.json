{
  "metadata": {
    "timestamp": 1736709184648,
    "page": 430,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjQzMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "zkat/miette",
      "stars": 2087,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 0.142578125,
          "content": "# top-most EditorConfig file\nroot = true\n\n# Unix-style newlines with a newline ending every file\n[*]\nend_of_line = lf\ninsert_final_newline = true\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.421875,
          "content": "/target\n# Generated by Cargo\n# will have compiled files and executables\ndebug/\ntarget/\n\n# Remove Cargo.lock from gitignore if creating an executable, leave it for libraries\n# More information here https://doc.rust-lang.org/cargo/guide/cargo-toml-vs-cargo-lock.html\nCargo.lock\n\n# These are backup files generated by rustfmt\n**/*.rs.bk\n\n# MSVC Windows builds of rustc generate these, which store debugging information\n*.pdb\n\n/.vscode\n"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 55.6708984375,
          "content": "# `miette` Release Changelog\n\n<a name=\"7.4.0\"></a>\n## 7.4.0 (2024-11-27)\n\n### Features\n\n* **graphical:** Inherit source code to causes (#401) ([465e6b6a](https://github.com/zkat/miette/commit/465e6b6ab627f8da34baa5f46441d944fb88186e))\n* **report:** Implement `WrapError` for `Option` (#409) ([7fae60fd](https://github.com/zkat/miette/commit/7fae60fd8462f95cf3140c6a3b9eb06cb7953405))\n\n<a name=\"7.3.0\"></a>\n## 7.3.0 (2024-11-26)\n\n### Features\n\n* **SourceSpan:** add impl From<InclusiveRange> (#385) ([73da45b6](https://github.com/zkat/miette/commit/73da45b65c965777a00ba64aa03a247c0e5241ca))\n* **Report:** add `from_err()` method to `Report` (#403) ([93d3bd11](https://github.com/zkat/miette/commit/93d3bd118a072c35aa761f0ec74317166ec08113))\n* **Diagnostic:** Implement `Diagnostic` for `Infallible` (#402) ([f3fb4c1e](https://github.com/zkat/miette/commit/f3fb4c1ecd196ce389cbd71139bb7e3b35474add))\n\n### Performance\n\n* **handlers:** optimize string-buffer reallocations (#387) ([b8dfcda4](https://github.com/zkat/miette/commit/b8dfcda4a8c10a14116ee275250356ac991dc7be))\n\n### Bug Fixes\n\n* **graphical:** fix nested error wrapping (#358) ([3eabbceb](https://github.com/zkat/miette/commit/3eabbcebf113d1d620a6a3f98e8a455414ed3042))\n* **docs:** updated example image (fixes #111) (#270) ([7b42b12c](https://github.com/zkat/miette/commit/7b42b12c5f6316322ce79c59bcb9e99f5d49edb8))\n* **clippy:** Fix clippy lints in docs (#365) ([ea4296da](https://github.com/zkat/miette/commit/ea4296dacec3b0e4762281d9d115c1bd69ecfac3))\n* **docs:** `alt` attribut for `single-line-example.png` (#372) ([b82cc81b](https://github.com/zkat/miette/commit/b82cc81b8ea32a1cf1b4598ed5832bc8e3b0e161))\n* **color:** setting NO_COLOR should not print ansi codes for non-terminals (#381) ([813232ba](https://github.com/zkat/miette/commit/813232ba7957ae09e4fb9d9416d821f4fd9da66d))\n* **clippy:** fix Rust v1.78.0 clippy warnings (#382) ([e1026f75](https://github.com/zkat/miette/commit/e1026f75e0a5d19bbc8e468cb3f5292074543a97))\n* **perf:** mark error constructors cold (#378) ([9bbcf3c6](https://github.com/zkat/miette/commit/9bbcf3c6017fa3455a7db714879816c1cfc511fd))\n* **handlers:** Disable textwrap::smawk feature (#379) ([edfdcb52](https://github.com/zkat/miette/commit/edfdcb525ee30fc54747460ada621f13f0ed1996))\n* **graphical:** Format entire link instead of just name (#389) ([bf5aa374](https://github.com/zkat/miette/commit/bf5aa3742fd664be3c93160b9c28c145b1ed8bc9))\n* **clippy:** fix `clippy::doc_lazy_continuation` lints (#395) ([15beec43](https://github.com/zkat/miette/commit/15beec43303180b811d4c04d1a78775feb9b0905))\n* **graphical:** Handle invalid UTF-8 in source code (#393) ([d6b45585](https://github.com/zkat/miette/commit/d6b4558502e82fa74e030ccb3c8040656590d7eb))\n* **features:** Use `dep:` syntax for dependencies in features. (#394) ([789a04e3](https://github.com/zkat/miette/commit/789a04e30d041179b373b4eb8b340456534a3f0e))\n* **clippy:** Fix `needless_return` lint. (#405) ([5f441d01](https://github.com/zkat/miette/commit/5f441d011560a091fe5d6a6cdb05f09acf622d36))\n\n### Documentation\n\n* **examples:** add serde_json integration example (#407) ([2902a233](https://github.com/zkat/miette/commit/2902a2337c2e36a5d8e0e54b007d6100cca0c9ff))\n\n<a name=\"7.2.0\"></a>\n## 7.2.0 (2024-03-07)\n\n### Features\n\n* **wasm:** add feature \"fancy-no-syscall\" for wasm targets (#349) ([328bf379](https://github.com/zkat/miette/commit/328bf3792213fc0bed94e72a39acb722b65141dd))\n\n### Bug Fixes\n\n* **label-collections:** Label collection fixes and cleanup (#343) ([75fea093](https://github.com/zkat/miette/commit/75fea0935e495d0215518c80d32dd820910982e3))\n* **invalid span:** skip the snippet when read_span fails (#347) ([7d9dfc6e](https://github.com/zkat/miette/commit/7d9dfc6e8e591f9606c3da55bd8465962358b20f))\n* **redundant-import:** fix a warning and CI failure in nightly (#348) ([6ea86a22](https://github.com/zkat/miette/commit/6ea86a2248854acf88df345814b6c97d31b8b4d9))\n\n<a name=\"7.1.0\"></a>\n## 7.1.0 (2024-02-16)\n\n### Features\n\n* **derive:** enable more boxed types to be #[diagnostic_source] (#338) ([c2f06f6c](https://github.com/zkat/miette/commit/c2f06f6cca15cbdd083dbff3d46b7729056ac6a4))\n* **source:** derive common traits for NamedSource, SourceSpan, and SourceOffset (#340) ([6f09250c](https://github.com/zkat/miette/commit/6f09250cca14561f07fba899a8e6d3c0df14230e))\n* **collection:** add support for collection of labels (#341) ([03060245](https://github.com/zkat/miette/commit/03060245d816a53a33209e6b7e1c3c42948e9962))\n\n### Bug Fixes\n\n* **tests:** revert test-breaking changes of e5c7ae4 (#339) ([6e829f8c](https://github.com/zkat/miette/commit/6e829f8c0ce2fc7bb2fc4041e6a6072f12db1f71))\n\n<a name=\"7.0.0\"></a>\n## 7.0.0 (2024-02-05)\n\nThis is a small breaking release on the heels of 6.0 because I neglected to\nbump owo-colors. I figured it's a good time to do it, before 6.0 gets more\nwidely used.\n\n### Features\n\n* **fancy:** Add option to change the link display text (#335) ([c7144ee5](https://github.com/zkat/miette/commit/c7144ee513bf8f06c5f7d89c45436802994a51fc))\n* **deps:** bump dependencies ([a4011d17](https://github.com/zkat/miette/commit/a4011d174c40acbba5b0176db7cb71ec5ca0cb49))\n    * **BREAKING CHANGE**: This bumps owo-colors to 4.0, which is a breaking change because we expose its styles as part of the graphical renderer API\n\n<a name=\"6.0.1\"></a>\n## 6.0.1 (2024-02-04)\n\n### Bug Fixes\n\n* **graphical:** oops. Fix theme issue ([8b46679c](https://github.com/zkat/miette/commit/8b46679c3647e1455d91b4c68743c619fb3f3eb3))\n* **fmt:** remove nightly-only fmt flags ([1fa7f524](https://github.com/zkat/miette/commit/1fa7f5241fb91d2e5bad9b0e26bcc7cd5f9011f1))\n* **highlighter:** ugh, missed another spot ([ab7c066e](https://github.com/zkat/miette/commit/ab7c066e7675d8c7ecb956000d278fc31f3bc6a1))\n\n<a name=\"6.0.0\"></a>\n## 6.0.0 (2024-02-04)\n\nThe long-awaited 6.0 release of `miette` is here, with TONS of goodies, not\nleast of which is syntax highlighting support!\n\nIt also comes with a few breaking changes so make sure to check below and\nupdate your code as needed!\n\n### Features\n\n* **labels:** Add support for primary label in specifying line/col information (#291) ([db0b7e40](https://github.com/zkat/miette/commit/db0b7e403a5ae52ae360991b6508490d8c579886))\n* **derive:** Allow optional sources in derive (#301) ([88d00e0e](https://github.com/zkat/miette/commit/88d00e0e20bf95e03b8f81dcd5adf38c917e190e))\n* **derive:** Make `miette-derive` be able to be turned off (#304) ([c7ba5b7e](https://github.com/zkat/miette/commit/c7ba5b7e52e05991cecd3ca925c710bbe49850b9))\n* **graphical:** Expose additional `textwrap` options (#321) ([fd77257c](https://github.com/zkat/miette/commit/fd77257cee0f5d03aa7dccb4ba8cbaa40c1a88c6))\n* **graphical:** support rendering labels that contain newlines (#318) ([865d67c8](https://github.com/zkat/miette/commit/865d67c8dda119ddd03ac43be22f4fa272a9f433))\n* **graphical:** Add `wrap_lines: bool` option allowing wrapping be disabled entirely (#328) ([b0744462](https://github.com/zkat/miette/commit/b0744462adbbfbb6d845f382db36be883c7f3c45))\n* **graphical:** render disjoint snippets separately for cleaner output (#324) ([19c22143](https://github.com/zkat/miette/commit/19c22143cb544616046784e35c5e78cc5b881289))\n* **deps:** Bump terminal-size to v0.3.0 (#308) ([c0a298e5](https://github.com/zkat/miette/commit/c0a298e5a8d699acf9fcd61b5d5fa4f6279a47ab))\n    * **BREAKING CHANGE**: This requires an MSRV bump to 1.70.0.\n* **source-code:** Don't override provided source code (#300) ([0d5c2ce7](https://github.com/zkat/miette/commit/0d5c2ce7536b0ea205346595d8a00d00bfb6cbd2))\n    * **BREAKING CHANGE**: Source code is no longer overridden if it was provided by the diagnostic's own `source_code()` impl.\n* **source:** use `usize` for length (#265) ([fad0e76a](https://github.com/zkat/miette/commit/fad0e76ad2e19d5cac13cf8324338aca0d623d93))\n    * **BREAKING CHANGE**: This changes `SourceSpan`'s length type to `usize`.\n* **source:** Allow inner source type of a NamedSource to be borrowed (#254) ([1df3b1a5](https://github.com/zkat/miette/commit/1df3b1a537f2e54cd40ec45f5cd851337a22e95a))\n    * **BREAKING CHANGE**: This makes the `NamedSource` type generic over its `Source` type, instead of boxing it.\n* **highlighting:** add syntax highlighting support with syntect crate (#313) ([e65d0a78](https://github.com/zkat/miette/commit/e65d0a78cc639653f061a45d8ce35b1a3551ade7))\n* **deps:** remove is-terminal dep in favor of `std::io::IsTerminal` ([e5c7ae46](https://github.com/zkat/miette/commit/e5c7ae469e40a8bc102e1fca3b8fd4b2ec137696))\n* **deps:** remove once_cell dep in favor of `std::sync::OnceLock` ([4c48584f](https://github.com/zkat/miette/commit/4c48584f304414c6924bede3308b455cfef60749))\n    * **BREAKING CHANGE**: This requires an MSRV bump to 1.70.0.\n* **deps:** bump some semver-breaking deps to newer versions ([29d000f2](https://github.com/zkat/miette/commit/29d000f201b259a056867a2876384f97653a6e9e))\n* **MSRV:** Actually bump the MSRV to 1.70.0 ([ab59a7bc](https://github.com/zkat/miette/commit/ab59a7bc9bceace5761a862ee2ebff3e5943b12f))\n\n### Bug Fixes\n\n* **misc:** Improve ci and fix clippy (#290) ([cc81382a](https://github.com/zkat/miette/commit/cc81382a6070dd226a20e4a39518d88e957ac0e1))\n* **tests:** Fix `cargo test` with default features. (#294) ([1f448e47](https://github.com/zkat/miette/commit/1f448e47751d0f914134b0e9138fdb1a5a95d55c))\n* **clippy:** Add missing semicolons where nothing is returned. (#293) ([06b34823](https://github.com/zkat/miette/commit/06b348230aaf153b8b050322f05e5d185351d2d1))\n* **graphical:** Extend error text span to whole code points (#312) ([a8b4ae01](https://github.com/zkat/miette/commit/a8b4ae012aa0cf03b53a18f013c2b3f76c5040e7))\n* **formatting:** Fix formatting bug when an empty span is not aligned to a char boundary (#314) ([3d6f903d](https://github.com/zkat/miette/commit/3d6f903df0e7c9d0eb9a1fdbbf0028bab5496429))\n* **docs:** add example to README and docs fixing #96 (#319) ([251d6d59](https://github.com/zkat/miette/commit/251d6d59292397458328ef57fb7957faedafd019))\n* **graphical:** rendering bug on small spans in large spans (#316) ([7ff4f874](https://github.com/zkat/miette/commit/7ff4f874d693a665af4df40f4e94505013e3e262))\n* **graphical:** render cause chains for inner errors (#330) ([cb2ae2e1](https://github.com/zkat/miette/commit/cb2ae2e18b446a5e90885faf8a30b5672c307df8))\n* **handler:** remove the two extra `is_terminal` sys call from `MietteHandlerOpts::build` (#325) ([f1dc89c0](https://github.com/zkat/miette/commit/f1dc89c07640445d224b61ef96c6b25fcdf62dee))\n\n### Documentation\n\n* **README:** Move import of `NamedResult` to where it is used (#309) ([d37ada87](https://github.com/zkat/miette/commit/d37ada876a5831d3f47622274e334c9a24aa5d2b))\n\n<a name=\"5.10.0\"></a>\n## 5.10.0 (2023-07-16)\n\n### Features\n\n* **protocol:** add StdError impl for Box<dyn Diagnostic + Send + Sync> (#273) ([2e3e5c9d](https://github.com/zkat/miette/commit/2e3e5c9d15e234495369e9b47d032644dd5664ad))\n\n<a name=\"5.9.0\"></a>\n## 5.9.0 (2023-05-18)\n\n### Features\n\n* **serde:** Add `serde` support (#264) ([c25676cb](https://github.com/zkat/miette/commit/c25676cb1f4266c2607836e6359f15b9cbd8637e))\n* **const:** Constify various functions (#263) ([46adb3bc](https://github.com/zkat/miette/commit/46adb3bc6aa6518d82a4187b34c56e287922136f))\n* **nested:** Render inner diagnostics (#170) ([aefe3237](https://github.com/zkat/miette/commit/aefe323780bda4e60feb44bb96ee98634ad677ad))\n\n### Bug Fixes\n\n* **misc:** Correct some typos (#255) ([675f3411](https://github.com/zkat/miette/commit/675f3411e33d5fae86d4018c3b72f751a4c4bc2f))\n\n<a name=\"5.8.0\"></a>\n## 5.8.0 (2023-04-18)\n\n### Features\n\n* **source:** Add getter for NamedSource name (#252) ([be3b2547](https://github.com/zkat/miette/commit/be3b25475147e92fae631b510c8de22949eada45))\n\n### Bug Fixes\n\n* **narrated:** put URLs in their own line ([adbff65e](https://github.com/zkat/miette/commit/adbff65e4ed52103569a3a5cd09c1bee79f8e361))\n\n<a name=\"5.7.0\"></a>\n## 5.7.0 (2023-04-01)\n\nWhile this is a semver-minor release, there's potential for it to have\nknock-on effects due to the syn2 upgrade. There's been issues as this new\nversion propagates between syn/thiserror versions (for example, see [a similar\nchange in eyre](https://github.com/yaahc/eyre/pull/92)).\n\nThe other thing of note is that backtrace printing is now **much** better! Try\nthe hook and see for yourself!\n\n### Features\n\n* **deps:** update to syn2 (#247) ([a2157205](https://github.com/zkat/miette/commit/a215720576fbda249138808f3469017d81eda9f0))\n* **panic:** improved backtrace handling ([b0453215](https://github.com/zkat/miette/commit/b0453215f62318bedeb4af1cb00dcefbb739d619))\n\n### Bug Fixes\n\n* **colors:** change unicode to default to ansi (#249) ([159f2b35](https://github.com/zkat/miette/commit/159f2b354b7ea83f842a58be98c45d0175b1faad))\n* **tests:** disable doctest that doesn't work with default feature flags (#248) ([0b445dc2](https://github.com/zkat/miette/commit/0b445dc2b4b30d40f03defc130bfa3e7396b51d4))\n\n<a name=\"5.6.0\"></a>\n## 5.6.0 (2023-03-14)\n\n### Bug Fixes\n\n* **ci:** configure clippy-specific MSRV ([b658fc02](https://github.com/zkat/miette/commit/b658fc020b23b0715339c5c60f7c12c947f9a747))\n* **graphical:** Fix wrong severity of related errors (#234) ([3497508a](https://github.com/zkat/miette/commit/3497508aa9b8d8503d7aae997738a4323408ffa0))\n* **atty:** Switch out `atty` for `is-terminal` (#229) ([443d240f](https://github.com/zkat/miette/commit/443d240f49e9f48756ee88e4cdc377f09d44454e))\n\n### Features\n\n* **protocol:** implement `Ord` for `Severity` (#240) ([ed486c95](https://github.com/zkat/miette/commit/ed486c959d8e8fbd4247af7d47d7e32c8a88321d))\n\n<a name=\"5.5.0\"></a>\n## 5.5.0 (2022-11-24)\n\n### Features\n\n* **SourceCode:** Implement SourceCode for Vec<u8> (#216) ([c857595e](https://github.com/zkat/miette/commit/c857595e1ae689028c5c5b66148e81b175eaa509))\n\n### Bug Fixes\n\n* **derive:** elide lifetimes in derived functions (#226) ([c88f0b5a](https://github.com/zkat/miette/commit/c88f0b5aa0786a0f4bb778686548f91db96ea6af))\n* **graphical:** Fix panic with span extending past end of line (#221) ([8b56d277](https://github.com/zkat/miette/commit/8b56d277ef476438a1c7383c29f6c1a0a1684818))\n* **license:** fix mangled license text to improve recognition ([d5fbb340](https://github.com/zkat/miette/commit/d5fbb3409c7cc950c502eb77578d5f1062384fb5))\n\n<a name=\"5.4.1\"></a>\n## 5.4.1 (2022-10-28)\n\n### Bug Fixes\n\n* **graphical:** Fix panic with zero-width span at end of line (#204) ([b8810ee3](https://github.com/zkat/miette/commit/b8810ee3d8aee7d7723e081616dd4f2fe8748abe))\n\n<a name=\"5.4.0\"></a>\n## 5.4.0 (2022-10-25)\n\n### Features\n\n* **version:** declare minimum supported rust version at 1.56.0 (#209) ([ac02a124](https://github.com/zkat/miette/commit/ac02a1242b1d6452a428846d2a84d2ac164fd914))\n* **report:** `Report::new_boxed` ([0660d2f4](https://github.com/zkat/miette/commit/0660d2f43c0a793b1e289b26bcca73c8733bdcff))\n* **error:** `impl AsRef<dyn StdError> for Report` ([1a27033d](https://github.com/zkat/miette/commit/1a27033d7afd0007907550b1fc9d589d6f658662))\n\n### Bug Fixes\n\n* **wrapper:** complete forwarding `Diagnostic` implementations ([3fc5c04c](https://github.com/zkat/miette/commit/3fc5c04cbbd4b92863290a488a23d5243c16fe60))\n\n<a name=\"5.3.1\"></a>\n## 5.3.1 (2022-09-10)\n\n### Bug Fixes\n\n* **miri:** Resolve Miri's concerns around unsafe code (#197) ([5f3429b0](https://github.com/zkat/miette/commit/5f3429b0626034328a0c2f1317b8a0e712c63775))\n* **graphical:** Align highlights correctly with wide unicode characters and tabs (#202) ([196c09ce](https://github.com/zkat/miette/commit/196c09ce7af9e54b63aaa5dae4cd199f2ecba3fa))\n\n<a name=\"5.3.0\"></a>\n## 5.3.0 (2022-08-10)\n\n### Bug Fixes\n\n* **utils:** Fix off-by-one error in SourceOffset::from_location (#190) ([c3e6c983](https://github.com/zkat/miette/commit/c3e6c983363af7f7a88e52d50d57404defb1bf49))\n\n### Features\n\n* **graphical:** Allow miette users to opt-out of the rendering of the cause chain (#192) ([b9ea5871](https://github.com/zkat/miette/commit/b9ea587159464c0090d9510567e5ea93bb772b49))\n\n<a name=\"5.2.0\"></a>\n## 5.2.0 (2022-07-31)\n\n### Features\n\n* **json:** `causes` support (#188) ([c95f58c8](https://github.com/zkat/miette/commit/c95f58c87a1335e956be23879754ac312a2b0853))\n\n### Bug Fixes\n\n* **docs:** readme was getting cut off during generation ([e286c705](https://github.com/zkat/miette/commit/e286c705fda28c02df67a584c0a013a1bbc38968))\n\n<a name=\"5.1.1\"></a>\n## 5.1.1 (2022-07-09)\n\n### Bug Fixes\n\n* **deps:** bump minimum supports-color version (#182) ([ccf1b8ad](https://github.com/zkat/miette/commit/ccf1b8ade5b631e05fad79d1f9c5d268706d118e))\n* **graphical:** handle an empty source (#183) ([12dc4007](https://github.com/zkat/miette/commit/12dc40070a99ac91b67e23f7c15ce8151965fc81))\n\n<a name=\"5.1.0\"></a>\n## 5.1.0 (2022-06-25)\n\n### Features\n\n* **protocol:** Implement SourceCode for Arc<str> (and similar types) (#181) ([85da6a84](https://github.com/zkat/miette/commit/85da6a8407ef727b8f77184b8a61f5b9a7d3ccef))\n\n<a name=\"5.0.0\"></a>\n## 5.0.0 (2022-06-24)\n\n### Breaking Changes\n\n* **theme:** restructure automatic color selection (#177) ([1816b06a](https://github.com/zkat/miette/commit/1816b06a2efcd5705dfe91147ab5651fe0b517d6))\n    * The default theme now prefers ANSI colors, even if RGB is supported\n    * `MietteHandlerOpts::ansi_colors` is removed\n    * `MietteHandlerOpts::rgb_color` now takes an enum that controls the color\n      format used when color support is enabled, and has no effect otherwise.\n\n### Bug Fixes\n\n* **json:** Don't escape single-quotes, that's not valid json (#180) ([b193d3c0](https://github.com/zkat/miette/commit/b193d3c002be8a42fd199911cef3465e2e0cb593))\n\n<a name=\"4.7.1\"></a>\n## 4.7.1 (2022-05-13)\n\n### Bug Fixes\n\n* **tests:** add Display impl to diagnostic_source example ([0a4cf4ad](https://github.com/zkat/miette/commit/0a4cf4ad24eb668d6668400b9ab3e8c896b33e3a))\n\n<a name=\"4.7.0\"></a>\n## 4.7.0 (2022-05-05)\n\n### Features\n\n* **diagnostic_source:** add protocol method for Diagnostic-aware source chaining (#165) ([bc449c84](https://github.com/zkat/miette/commit/bc449c842662909d93d3a6b7e117fdbde77544e7))\n\n### Documentation\n\n* **IntoDiagnostic:** Warn of potential data loss (#161) ([2451ad6a](https://github.com/zkat/miette/commit/2451ad6a963c222831977e89542a7349b66f11cf))\n\n<a name=\"4.6.0\"></a>\n## 4.6.0 (2022-04-23)\n\n### Features\n\n* **spans:** add From shorthand for zero-length SourceSpans ([1e1d6152](https://github.com/zkat/miette/commit/1e1d61525381a6699deba103a3829874676eee9c))\n* **related:** print related prefixes according to severity (#158) ([084ed138](https://github.com/zkat/miette/commit/084ed138b7598d549f38fe873a758d0ed03ef2b1))\n\n### Bug Fixes\n\n* **graphical:** fix issue with duplicate labels when span len is 0 (#159) ([1a36fa7e](https://github.com/zkat/miette/commit/1a36fa7ec80de77e910e04cdb902270970611b39))\n\n<a name=\"v4.5.0\"></a>\n## 4.5.0 (2022-04-18)\n\n### Features\n\n* **spans:** make SourceSpan implement Copy (#151) ([5e54b29a](https://github.com/zkat/miette/commit/5e54b29acf87eacf0a0255a9d3db8966de697fcf))\n* **help:** update macro to allow optional help text (#152) ([45093c2f](https://github.com/zkat/miette/commit/45093c2f587a281a37e80141d126d87944ca75b5))\n* **labels:** allow optional labels in derive macro (#153) ([23ee3642](https://github.com/zkat/miette/commit/23ee3642d198ff4f78af9729d7a5223b0c676d1f))\n* **help:** allow non-option values in #[help] fields ([ea55f458](https://github.com/zkat/miette/commit/ea55f458fa8acabc1c7e001c405f90025d6dbafc))\n* **label:** use macro magic instead of optional flag for optional labels ([9da62cd0](https://github.com/zkat/miette/commit/9da62cd05d777f8bd962f1fe94a75c47b11ee07e))\n\n### Bug Fixes\n\n* **theme:** set correct field in MietteHandlerOpts::ansi_colors (#150) ([97197601](https://github.com/zkat/miette/commit/97197601ee8f36fedb559c9c8b2d73ce5b0ca0ee))\n\n<a name=\"v4.4.0\"></a>\n## 4.4.0 (2022-04-04)\n\n### Features\n\n* **report:** Add conversion from Report to Box<dyn Error> (#149) ([b4a9d4cd](https://github.com/zkat/miette/commit/b4a9d4cd9bc43720613b7d2bb6b521d51922c6b8))\n\n### Bug Fixes\n\n* **docsrs:** use proper module names for docsrs URLs ([a0b972f8](https://github.com/zkat/miette/commit/a0b972f8765040fdbb08fdbe006ceb4dbc9c31f2))\n* **clippy:** misc clippy fixes ([b98b0982](https://github.com/zkat/miette/commit/b98b09828215ffc623aa17aa0bc8a6f45173a3f0))\n* **fmt:** cargo fmt ([37cda4a3](https://github.com/zkat/miette/commit/37cda4a3a456060050e42a199a68ab86ee679f79))\n\n<a name=\"v4.3.0\"></a>\n## 4.3.0 (2022-03-27)\n\n### Features\n\n* **reporter:** Allow GraphicalReportHandler to disable url display (#137) ([b6a6cc9e](https://github.com/zkat/miette/commit/b6a6cc9e75198e53f1413c88694d950006833e05))\n\n### Bug Fixes\n\n* **colors:** handler_opts.color(false) should disable color (#133) ([209275d4](https://github.com/zkat/miette/commit/209275d4377fcaf397bde931f2972a1b7d8ce55c))\n* **handler:** Apply MietteHandlerOpts::graphical_theme (#138) ([70e84f9a](https://github.com/zkat/miette/commit/70e84f9a019008a38ed22416f1fc399d32f50db4))\n\n### Documentation\n\n* **readme:** Fix a couple links (#141) ([126ffc58](https://github.com/zkat/miette/commit/126ffc5834683726fc8efff6604735f8cc806f9b))\n\n### Miscellaneous Tasks\n\n* **deps:** Update textwrap to 0.15.0 (#143) ([2d0054b3](https://github.com/zkat/miette/commit/2d0054b3c9bf1f6bdbea624ba65593ca41f03999))\n\n<a name=\"v4.2.1\"></a>\n## 4.2.1 (2022-02-25)\n\n### Bug Fixes\n\n* **handlers:** source code propagation for JSON handler (#122) ([50bcec90](https://github.com/zkat/miette/commit/50bcec909aa60c20d4981484195130fbb9f3cacb))\n* **clippy:** 1.59.0 clippy fix ([fa5b5fee](https://github.com/zkat/miette/commit/fa5b5fee549e53e9cf0c1d946bef242eebee6c48))\n* **docs:** Docs overhaul (#124) ([5d23c0d6](https://github.com/zkat/miette/commit/5d23c0d61d0c7e778579d4d290b1f6e2c53fba31))\n\n<a name=\"v4.2.0\"></a>\n## 4.2.0 (2022-02-22)\n\n### Features\n\n* **derive:** allow `Report` in `related` (#121) ([75d4505e](https://github.com/zkat/miette/commit/75d4505e7d55e816cac071eb126213b72bf48982))\n\n<a name=\"v4.1.0\"></a>\n## 4.1.0 (2022-02-20)\n\n`.with_source_code()` is here!!\n\n### Features\n\n* **report:** add `with_source_code` ([50519264](https://github.com/zkat/miette/commit/50519264d47d35ecbbe4846cf7d64139854adf6c))\n* **handlers:** propagate source code to related errors ([3a17fcea](https://github.com/zkat/miette/commit/3a17fceabb0641c3d44f73a62b8116cc87d3c6bb))\n\n### Bug Fixes\n\n* **derive:** absolute path references to Diagnostic (#118) ([6eb3d2d8](https://github.com/zkat/miette/commit/6eb3d2d8a63bc38a53a472932a476b78c4fdb34c))\n\n<a name=\"v4.0.1\"></a>\n## 4.0.1 (2022-02-18)\n\n### Bug Fixes\n\n* **graphical:** boolean was messing up graphical display ([5c085b39](https://github.com/zkat/miette/commit/5c085b39e28ad87777135bcca30d2ac99039de39))\n\n<a name=\"v4.0.0\"></a>\n## 4.0.0 (2022-02-18)\n\n### Breaking Changes\n\n* **colors:** treat no-color mode as no-color instead of narratable (#94) ([9dcce5f1](https://github.com/zkat/miette/commit/9dcce5f1bdd76e7564d604ab8b87bbc7caad310a))\n    * **BREAKING CHANGE**: NO_COLOR no longer triggers the narrated handler. Use\nNO_GRAPHICS instead.\n* **derive:** Make derive macro `diagnostic` attribute more flexible. (#115) ([5b8b5478](https://github.com/zkat/miette/commit/5b8b5478b63e91a51fadec87c6fed3e60d192b60))\n    * **BREAKING CHANGE**: `diagnostic` attribute duplication will now error.\n\n### Features\n\n* **Report:** adds `.context()` method to the `Report` (#109) ([2649fd27](https://github.com/zkat/miette/commit/2649fd27c47893dc3ba2445a9932600d1b3d3e63))\n\n### Bug Fixes\n\n* **handlers:** Fix label position (#107) ([f158f4e3](https://github.com/zkat/miette/commit/f158f4e370bd25d589136a69058a6dff5e8aa468))\n\n\n<a name=\"v3.3.0\"></a>\n## 3.3.0 (2022-01-08)\n\n### Features\n\n* **deps:** Bump owo-colors to 3.0.0 ([fe77d8c7](https://github.com/zkat/miette/commit/fe77d8c75478e9915a61613ec94b3de0a70e5e26))\n* **handlers:** Add JSON handler (#90) ([53b24682](https://github.com/zkat/miette/commit/53b246829a2cf6317fe1ac0cf7603e37ffde349f))\n\n### Bug Fixes\n\n* **chain:** correct `Chain` structure exported (#102) ([52e5ec80](https://github.com/zkat/miette/commit/52e5ec806457c2784d85dc4e4a332c07e6eea818))\n* **json:** proper escapes for JSON strings (#101) ([645ef6a1](https://github.com/zkat/miette/commit/645ef6a1b66a9a05f97883535f162cab4d0483f5))\n* **deps:** switch to terminal_size ([51146535](https://github.com/zkat/miette/commit/51146535f5ea9eeaff1163d99d8b89a2567e93dd))\n\n<a name=\"v3.2.0\"></a>\n## 3.2.0 (2021-10-06)\n\n### Features\n\n* **tabs:** Add replace tabs with spaces option (#82) ([1f70140c](https://github.com/zkat/miette/commit/1f70140c2e6a57237de78dab022e29440f98ae33))\n\n### Bug Fixes\n\n* **read_span** prevent multiline MietteSpanContents from skipping lines (#81) ([cb5a919d](https://github.com/zkat/miette/commit/cb5a919deb87f8fba748bed73b6f22ebe4e3390f))\n\n<a name=\"v3.1.0\"></a>\n## 3.1.0 (2021-10-01)\n\n### Features\n\n* **SourceSpan:** add impl From<Range> (#78) ([0169fe20](https://github.com/zkat/miette/commit/0169fe20e7868cfee594b26b063267d17be0a84e))\n\n<a name=\"v3.0.1\"></a>\n## 3.0.1 (2021-09-26)\n\nNo code changes this release. Just improved documentation and related tests.\n\n<a name=\"v3.0.0\"></a>\n## 3.0.0 (2021-09-22)\n\nIt's here! Have fun!\n\nIt's a pretty significant change, so if you were using `miette`'s snippet\nsupport previously, you'll need to update your code.\n\n### Bug Fixes\n\n* **report:** miscellaneous, hacky tweaks to graphical rendering ([80036781](https://github.com/zkat/miette/commit/80036781cda11de071187d59127c6d1c7cafa879))\n* **protocol:** implement source/cause for Box<dyn Diagnostic> ([c3505fac](https://github.com/zkat/miette/commit/c3505fac269aebadc0fd62f9ee4e04bd00970dae))\n* **derive:** Code is no longer required ([92a31509](https://github.com/zkat/miette/commit/92a3150921d366e2850249be14259a550fcee3bb))\n* **graphical:** stop rendering red vbars before the last item ([e2e4027f](https://github.com/zkat/miette/commit/e2e4027fda55415ac07590e2d33e1f6d762df439))\n* **graphical:** fix coalescing adjacent things when they cross boundaries ([18e0ed77](https://github.com/zkat/miette/commit/18e0ed7749d33c5030a5fa2f8eabdc50a717573b))\n* **context:** get labels/snippets working when using .context() ([41cb710a](https://github.com/zkat/miette/commit/41cb710a7dff59a9bde126556be7f5a877c1dafd))\n* **api:** put panic handler properly behind a flag ([55ca8e0b](https://github.com/zkat/miette/commit/55ca8e0b7ff60cef8a7f75c29fa78edbb8114043))\n* **deps:** We do not use ci_info directly anymore ([8d1170e2](https://github.com/zkat/miette/commit/8d1170e2decee290f1679b823eb0f7ea04f3fb39))\n* **graphical:** Fix off-by-one span_applies calculation (#70) ([a6902042](https://github.com/zkat/miette/commit/a69020422e546efbe9256e30d9da10ad67f5ce03))\n* **theme:** remove code styling ([ce0dea54](https://github.com/zkat/miette/commit/ce0dea541a60f274bd97d3a1cfdaa9d217b632e2))\n* **graphical:** render URLs even without a code ([77c5899b](https://github.com/zkat/miette/commit/77c5899bbd7c46733ea208a7506c1d07b773bc2c))\n* **deps:** remove dep on itertools ([612967d3](https://github.com/zkat/miette/commit/612967d381f05e2e5a27e39a7a66942c7ec396f3))\n\n### Features\n\n* **report:** make a single big MietteHandler that can switch modes ([4c2463f9](https://github.com/zkat/miette/commit/4c2463f9aeaef43f69cac3abae059973f430bfa8))\n    * **BREAKING CHANGE**: linkification option method on GraphicalReportHandler has been changed to .with_links(bool)\n* **deps:** move fancy reporter (and its deps) to a feature ([247e8f8b](https://github.com/zkat/miette/commit/247e8f8b39271ffa7fd2c461e8ed769bebcbc589))\n    * **BREAKING CHANGE**: The default fancy reporter is no longer available unless you enable the \"fancy\" feature. This also means you will not be pulling in a bunch of deps if you are using miette for a library\n* **footer:** add footer support to graphical and narrated ([93374173](https://github.com/zkat/miette/commit/93374173e30c5d4ccdd0aa16557d68d54aaf3e59))\n* **theme:** rename some theme items for clarity ([c5c0576e](https://github.com/zkat/miette/commit/c5c0576ec69d5ccc3700dd6fc411d071bb0114a7))\n    * **BREAKING CHANGE**: These were part of the public API, so if you were using theming, this might have broken for you\n* **theme:** more styling changes ([2c437403](https://github.com/zkat/miette/commit/2c43740346da954fd71653a079c53a1e9612c06f))\n* **report:** add debug report as default, instead of narrated one ([9841d6fd](https://github.com/zkat/miette/commit/9841d6fd77ce665acb40f7459f410e83cdc131c0))\n* **labels:** replace snippet stuff with simpler labels (#62) ([f87b158b](https://github.com/zkat/miette/commit/f87b158b22f6f943cd7e52ca186b5f3c542194fd))\n* **protocol:** Make SourceCode Send+Sync ([9aa8ff0d](https://github.com/zkat/miette/commit/9aa8ff0d3190e0fb1ee5ad48cb540b961fc46366))\n* **handlers:** Update graphical handler to use new label protocol (#66) ([4bb9d121](https://github.com/zkat/miette/commit/4bb9d12102c1e24b6f063e43bd87e894f16683e8))\n* **report:** nicer, non-overlapping same-line highlights ([1a0f359e](https://github.com/zkat/miette/commit/1a0f359e3cd386f2738052d68790a3b54e64055b))\n* **panic:** Add basic panic handler and installation function ([c6daee7b](https://github.com/zkat/miette/commit/c6daee7b930ff7b76ce6ab394460c7659124f2d6))\n* **panic:** add backtrace support to panic handler and move set_panic_hook into fancy features ([858ac169](https://github.com/zkat/miette/commit/858ac169353e653ed0795fb1962f4ddde8fc3d06))\n* **graphical:** simplify graphical header and remove a dep ([6c648463](https://github.com/zkat/miette/commit/6c6484633ed1580047fb3dc820486f3264fb6a19))\n* **related:** Add related diagnostics (#68) ([8e11baab](https://github.com/zkat/miette/commit/8e11baab7b7b57d6220cf31a82715ac9b8b76f2f))\n* **graphical:** compact graphical display a bit ([db637a36](https://github.com/zkat/miette/commit/db637a366b1bcf54ff761a43ddb2cdfaaac0e481))\n* **graphical:** compact even more ([72c0bb9e](https://github.com/zkat/miette/commit/72c0bb9e65fa2fc7e8a1cf61ab1fe636ec063d2e))\n* **graphical:** add theming customization for linums ([717f8e3d](https://github.com/zkat/miette/commit/717f8e3d8837e14d76825603c0cbdcabb66950ff))\n* **handler:** context lines config support ([b33084bd](https://github.com/zkat/miette/commit/b33084bdbfeec90208f9dacd1976c8bde31642f3))\n* **narrated:** updated narrated handler ([fbf6664e](https://github.com/zkat/miette/commit/fbf6664ef5582c9a15bba881a6ee1ca058102d7f))\n* **narrated:** global footer and related diagnostics support ([3213fa61](https://github.com/zkat/miette/commit/3213fa610a17e3f52ece8c069eb123b2a38f1266))\n\n<a name=\"3.0.0-beta.0\"></a>\n## 3.0.0-beta.0 (2021-09-22)\n\nTime to get ready for release!\n\n### Bug Fixes\n\n* **graphical:** stop rendering red vbars before the last item ([dc2635e1](https://github.com/zkat/miette/commit/dc2635e15154ab33506bdeae46f34c99b403fff2))\n* **graphical:** fix coalescing adjacent things when they cross boundaries ([491ce7c0](https://github.com/zkat/miette/commit/491ce7c0ce1f04c9b6fc09c250f188c1ec77df53))\n* **context:** get labels/snippets working when using .context() ([e0296578](https://github.com/zkat/miette/commit/e02965787b5e6206dad46556a50edae578449789))\n\n### Features\n\n* **report:** nicer, non-overlapping same-line highlights ([338c885a](https://github.com/zkat/miette/commit/338c885a305035fc21f63e3566131af5befa14b3))\n* **panic:** Add basic panic handler and installation function ([11a708a2](https://github.com/zkat/miette/commit/11a708a2244f1838351b2b59bfc407febe3c2a0e))\n* **panic:** add backtrace support to panic handler and move set_panic_hook into fancy features ([183ecb9b](https://github.com/zkat/miette/commit/183ecb9b78a1c22d832e979db5054dcac36d8b7a))\n* **graphical:** simplify graphical header and remove a dep ([9f36a4c2](https://github.com/zkat/miette/commit/9f36a4c25362486dfcf9ad2bd66c45e47d6fa4d2))\n* **related:** Add related diagnostics (#68) ([25e434a2](https://github.com/zkat/miette/commit/25e434a2cec93e41f020372dedcf395adb2564de))\n* **graphical:** compact graphical display a bit ([9d07dc5a](https://github.com/zkat/miette/commit/9d07dc5a1c190b6d52770e4f3c4a1dabd53e0fd5))\n* **graphical:** compact even more ([712e75fd](https://github.com/zkat/miette/commit/712e75fd8c25c6309a49c7f81f83d5b6f855594c))\n\n<a name=\"3.0.0-alpha.0\"></a>\n## 3.0.0-alpha.0 (2021-09-20)\n\nThis is the first WIP alpha release of miette 3.0!\n\nIt's a MAJOR rewrite of the entire snippet definition and rendering system,\nand you can expect even more changes before 3.0 goes live.\n\nIn the meantime, there's this. :)\n\n### Bug Fixes\n\n* **report:** miscellaneous, hacky tweaks to graphical rendering ([8029f9c6](https://github.com/zkat/miette/commit/8029f9c6c39d9d9592a2183380e83add8f9938e1))\n* **protocol:** implement source/cause for Box<dyn Diagnostic> ([3e8a27e2](https://github.com/zkat/miette/commit/3e8a27e263d6b22c1f2a9b192b2d305c2f0aa367))\n* **derive:** Code is no longer required ([8a0f71e6](https://github.com/zkat/miette/commit/8a0f71e6d11cd6f89fbad67cce46e34aa75f3b39))\n\n### Features\n\n* **report:** make a single big MietteHandler that can switch modes ([3d74a500](https://github.com/zkat/miette/commit/3d74a500c3193fb1dff26591191a67eaab079671))\n    * **BREAKING CHANGE**: linkification option method on GraphicalReportHandler has been changed to .with_links(bool)\n* **deps:** move fancy reporter (and its deps) to a feature ([bc495e6e](https://github.com/zkat/miette/commit/bc495e6ed49f227895260d8877685e267c0d5814))\n    * **BREAKING CHANGE**: The default fancy reporter is no longer available unless you enable the \"fancy\" feature. This also means you will not be pulling in a bunch of deps if you are using miette for a library\n* **footer:** add footer support to graphical and narrated ([412436cd](https://github.com/zkat/miette/commit/412436cd689ac55e9ec8172f772c321288629553))\n* **theme:** rename some theme items for clarity ([12a9235b](https://github.com/zkat/miette/commit/12a9235bec53d6dbd347f43dfaef167696a381e1))\n    * **BREAKING CHANGE**: These were part of the public API, so if you were using theming, this might have broken for you\n* **theme:** more styling changes ([9901030e](https://github.com/zkat/miette/commit/9901030eb160e72bc64144c44b8bf48cce8dfe48))\n* **report:** add debug report as default, instead of narrated one ([eb1b7222](https://github.com/zkat/miette/commit/eb1b7222fc5b73b6fb8fee90b1de27e0b8d6d588))\n* **labels:** replace snippet stuff with simpler labels (#62) ([0ef2853f](https://github.com/zkat/miette/commit/0ef2853f27ea84407789cbd0680956f9e3ee9168))\n* **protocol:** Make SourceCode Send+Sync ([eb485658](https://github.com/zkat/miette/commit/eb485658cc5a0df894c59d6ad29f945fff2839a5))\n* **handlers:** Update graphical handler to use new label protocol (#66) ([6cd44a86](https://github.com/zkat/miette/commit/6cd44a86c6e6f1d9c79006d4cfa89220dbd3a7b4))\n\n\n<a name=\"2.2.0\"></a>\n## 2.2.0 (2021-09-14)\n\nSo it turns out [`3.0.0` is already under way](https://github.com/zkat/miette/issues/45), if you didn't already hear!\n\nIt's going to be an exciting release, but we'll still be putting out bugfixes\nand (backwards-compatible) features in the `2.x` line until that's ready.\n\nAnd there's definitely stuff in this one to be excited about! Not least of all\nthe ability to _forward_ diagnostic metadata when wrapping other\n`Diagnostic`s. Huge thanks to [@cormacrelf](https://github.com/cormacrelf) for\nthat one!\n\nWe've also got some nice improvements to reporter formatting that should make\noutput look at least a little nicer--most notably, we now wrap messages and\nfooters along the appropriate column so formatting keeps looking good even\nwhen you use newlines!\n\nFinally, huge thanks to [@icewind1991](https://github.com/icewind1991) for\nfixing a [really weird-looking bug](https://github.com/zkat/miette/pull/52)\ncaused by an off-by-one error. Oopsies 😅\n\n### Features\n\n* **report:** wrap multiline messages to keep formatting ([f482dcec](https://github.com/zkat/miette/commit/f482dcec6a4e981c256854f73506ed01abaa65f9))\n* **report:** take terminal width into account for wrapping text ([bc725324](https://github.com/zkat/miette/commit/bc72532465bde00e11d83ff4a9f767051ee6771d))\n* **report:** make header line as wide as terminal ([eaebde92](https://github.com/zkat/miette/commit/eaebde92cf528d50d799dd60acd98b16978e8681))\n* **derive:** Add `#[diagnostic(forward(field_name), code(...))]` (#41) ([2fa5551c](https://github.com/zkat/miette/commit/2fa5551c81831734fd9a162463a4a939dff9dfba))\n\n### Bug Fixes\n\n* **report:** get rid of the weird arrow thing. it does not look good ([1ba3f2f5](https://github.com/zkat/miette/commit/1ba3f2f5d292419571302477195836f89d9c7cb5))\n* **report:** fix wrapping for header and add wrapping for footer ([eb07d5bd](https://github.com/zkat/miette/commit/eb07d5bd66928457b4f3affe96aa6a0d39f642f7))\n* **report:** Fix end of previous line wrongly being included in highlight (#52) ([d994add9](https://github.com/zkat/miette/commit/d994add912700873de3ebdb8d14d81516955c901))\n\n<a name=\"2.1.2\"></a>\n## 2.1.2 (2021-09-10)\n\nSo it turns out I forgot to make snippets and other stuff forward through when\nyou use `.context()` &co. This should be fixed now 😅\n\n### Bug Fixes\n\n* **context:** pass on diagnostic metadata when wrapping with `Report` ([e4fdac38](https://github.com/zkat/miette/commit/e4fdac38ea8c295468ed0fce563a2df29241986a))\n\n<a name=\"2.1.1\"></a>\n## 2.1.1 (2021-09-09)\n\nThis is a small, but visually-noticeable bug fix. I spent some time playing\nwith colors and styling and made some fixes that will improve where people's\neyes are drawn to, and also take into account color visibility issues a bit\nmore.\n\n### Bug Fixes\n\n* **report:** don't color error message text to draw eyes back to it ([6422f821](https://github.com/zkat/miette/commit/6422f8217495aeef38af4eb00feeb73ced36f7bf))\n* **reporter:** improve color situation and style things a little nicer ([533ff5f3](https://github.com/zkat/miette/commit/533ff5f348324132044bd2782a17fd6c81c08259))\n\n<a name=\"2.1.0\"></a>\n## 2.1.0 (2021-09-08)\n\nThis is a small release with a handful of quality of life improvements (and a small bugfix).\n\n### Features\n\n* **printer:** use uparrow for empty highlights and fix 0-offset display bug ([824cd8be](https://github.com/zkat/miette/commit/824cd8bebea2ae43a29d9d744d0386d00cc943e0))\n* **derive:** make #[diagnostic] optional for enums, too ([ffe1b558](https://github.com/zkat/miette/commit/ffe1b558d0d7284e39fcb38c4f410cddb4cdb4bd))\n\n<a name=\"2.0.0\"></a>\n## 2.0.0 (2021-09-05)\n\nThis release overhauls the toplevel/main experience for `miette`. It adds a\nnew `Report` type based on `eyre::Report` and overhauls various types to fit\ninto this model, as well as prepare for some [future changes in\nRust](https://github.com/nrc/rfcs/pull/1) that will make it possible to\nintegrate `miette` directly with crates like `eyre` instead of having to use\nthis specific `Report`.\n\nOn top of that, it includes a couple of nice new features, such as\n`#[diagnostic(transparent)]`, which should be super useful when wrapping other\ndiagnostics with your own types!\n\n### Breaking Changes\n\n* **report:** anyhow-ify DiagnosticReport (#35) ([3f9da04b](https://github.com/zkat/miette/commit/3f9da04b866f3fd90f88e7e60f9fb7a322aef568))\n    * `DiagnosticReport` is now just `Report`, and is a different, `eyre::Report`-like type.\n    * `DiagnosticResult` is now just `Result`.\n    * `.into_diagnostic()` now just transforms the error into a `Report`.\n    * `DiagnosticReportPrinter` has been replaced with `ReportHandler`\n    * `set_printer` has been replaced by `set_hook`\n    * `code` is now optional.\n    * `.into_diagnostic()` no longer takes a `code` argument.\n    * `#[diagnostic]` is now optional when deriving `Diagnostic`.\n\n### Features\n\n* **derive:** Add `#[diagnostic(transparent,forward)]` (#36) ([53f5d6d1](https://github.com/zkat/miette/commit/53f5d6d1d62845b52e590fed5ce91a643b6e11f3))\n* **Source:** impl Source for str, &str (make &'static str usable for testing) (#40) ([50c7a883](https://github.com/zkat/miette/commit/50c7a88360dc7cef815af2dbb9dc18ede0d1fdb4))\n* **source:** Remove bound `T: Clone` from `Source` implementation for `Cow`. (#42) ([0427c9f9](https://github.com/zkat/miette/commit/0427c9f9666222084cb4494aabbd3e7dc5cdb789))\n\n### Bug Fixes\n\n* **reporter:** Only inc the line count if we haven't already done so with '\\n' or '\\r\\n' (#37) ([5a474370](https://github.com/zkat/miette/commit/5a474370ddda92a3a92b6b84cd561ecaf4d6d858))\n* **printer:** Show snippet message for unnamed sources (#39) ([84219f6c](https://github.com/zkat/miette/commit/84219f6c80c2c432fbeb4c40a591380285de8767))\n\n<a name=\"1.1.0\"></a>\n## 1.1.0 (2021-08-29)\n\nThis is a small release of patches entirely not my own!\n\nThe exciting new feature is the ability to do `thiserror`-style\n`#[diagnostic(transparent)]` when using the derive macro, which will defer\ndiagnostics to a Diagnostic referred to by the struct/enum!\n\nBig thanks to [@cormacrelf](https://github.com/cormacrelf) and\n[@felipesere](https://github.com/felipesere) for your contributions!\n\n### Features\n\n* **derive:** Add `#[diagnostic(transparent,forward)]` (#36) ([53f5d6d1](https://github.com/zkat/miette/commit/53f5d6d1d62845b52e590fed5ce91a643b6e11f3))\n\n### Bug Fixes\n\n* **reporter:** Only inc the line count if we haven't already done so with '\\n' or '\\r\\n' (#37) ([5a474370](https://github.com/zkat/miette/commit/5a474370ddda92a3a92b6b84cd561ecaf4d6d858))\n\n<a name=\"1.0.1\"></a>\n## 1.0.1 (2021-08-23)\n\nThis is a (literally) small release. I noticed that the crate's size had\nincreased significantly before I realized cargo was including the `images/`\nfolder. This is not needed, as these images are just hosted on GitHub.\n\n`miette` should be smaller now, I hope :)\n\n#### Bug Fixes\n\n* **crate:**  reduce crate size by removing images ([5f74da67](https://github.com/zkat/miette/commit/5f74da671f2444efc4840c11492773a46cecf7e9))\n\n\n<a name=\"1.0.0\"></a>\n## 1.0.0 (2021-08-23)\n\n...you know what? I'm just gonna tag 1.0.0, because I don't want sub-1.0\nversions anymore, but the Cargo ecosystem buries pre-releases pretty\nthoroughly. Integers are cheap!\n\nSo here we are! We made it to 1.0, and with some _really_ nice goodies to boot.\n\nMost fun is the fact that the default printer now has *clickabble url linking*\nsupport. A new `Diagnostic::url()` method has been added to the protocol that,\nis used to figure out what URL to send folks to! This should work on most\n\"modern\" terminals, but more thorough support checking will be done in the\nfuture. And of course, the narrated reporter prints them out too.\n\nI also took the time to completely redo how messages, labels, and filenames\nare handled in the system, and this is a pretty big change you might run into.\nGodspeed!\n\nLast but not least, we got our first external contribution! Thank you to\n[@martica](https://github.com/martica) for the bug fix!\n\nAnyway, here's to 1.0, and to many more after that. Enjoy! :)\n\n#### Breaking Changes\n\n* **snippets:**  Overhauled how snippets handle labels, sources, and messages, including the derive macro ([61283e9e](https://github.com/zkat/miette/commit/61283e9efe2825425c41027b3dbb5f4f9c9d83fb)\n\n#### Features\n\n* **links:**  added URL linking support and automatic docs.rs link generation ([7e76e2de](https://github.com/zkat/miette/commit/7e76e2dea4adf0e4a1349e049495c1f5a0bdab87))\n* **theme:**  Add an initial `rgb` style with nicer colors ([3546dcec](https://github.com/zkat/miette/commit/3546dcec988ea40cc6aa8dd94c29432830cef662)) - [@martica](https://github.com/martica)\n\n#### Bug Fixes\n\n* **printer:**  clamp highlight length to at least 1 (#32) ([9d601599](https://github.com/zkat/miette/commit/9d6015996bf3010b573b9bb5d0e48cb85f290460))\n\n\n<a name=\"1.0.0-beta.1\"></a>\n## 1.0.0-beta.1 (2021-08-22)\n\nIt's happening, folks! `miette` is now working towards stability and is now in\nbeta! We'll keep it like this for a little while until a few more people have\ntried it out and given feedback. New features may still be added, and breaking\nchanges may still happen, but `miette` is now considered \"good enough to use\",\nand breaking changes are expected to be more rare.\n\nOh, and as part of this release, the docs were overhauled, particularly the\nREADME, so you might want to take a gander at them!\n\n#### Breaking Changes\n\n* **printer:**  rename default printer and consistify some naming conventions with printing ([aafa4a3d](https://github.com/zkat/miette/commit/aafa4a3de1298dd8e7625138d09a408ff3579d3f), breaks [#](https://github.com/zkat/miette/issues/))\n* **into_diagnostic:**  .into_diagnostic() is now generic across any impl fmt::Display instead of expecting a `dyn` ([c1da4a0d](https://github.com/zkat/miette/commit/c1da4a0d2744e94e409cabeafe911e99598d4ee3))\n\n#### Features\n\n* **error:**  diagnostic-ify MietteError ([e980b723](https://github.com/zkat/miette/commit/e980b7237334b56f7b8c092956d35cd2bbadac41))\n\n#### Bug Fixes\n\n* **derive:**  #[diagnosic(severity)] works for named and unnamed variants/structs now ([adf0bc93](https://github.com/zkat/miette/commit/adf0bc933f62852514067ade96e07362c889f012))\n* **protocol:**  oops, missed a spot after a rename ([5c077d30](https://github.com/zkat/miette/commit/5c077d30a4aca71f71e61b2561081575c04a4d64))\n\n\n<a name=\"0.13.0\"></a>\n## 0.13.0 (2021-08-21)\n\nThis release includes some accessibility improvements: miette now includes a \"narratable\" printer that formats diagnostics like this:\n\n```\nError: Received some bad JSON from the source. Unable to parse.\n    Caused by: missing field `foo` at line 1 column 1700\n\nBegin snippet for https://api.nuget.org/v3/registration5-gz-semver2/json.net/index.json starting\nat line 1, column 1659\n\nsnippet line 1: gs\":[\"json\"],\"title\":\"\",\"version\":\"1.0.0\"},\"packageContent\":\"https://api.nuget.o\n    highlight starting at line 1, column 1699: last parsing location\n\ndiagnostic help: This is a bug. It might be in ruget, or it might be in the source you're using,\nbut it's definitely a bug and should be reported.\ndiagnostic error code: ruget::api::bad_json\n```\n\nThis style is the default in a number of situations:\n\n1. The `NO_COLOR` env var is present and set, and not `0`.\n2. The `CLICOLOR` env var is present and not set to `1`.\n3. `stdout` or `stderr` are not TTYs.\n4. A CI environment is detected.\n\nYou can override and customize this behavior any way you want by using the\n`miette::set_reporter()` function at the toplevel of your application, but we\nencourage you to at least make the narratable printer an option for your\nusers, since miette's default printer is exceptionally bad for screen\nreaders.\n\nOur hope is that this release is only the starting point towards making\nmiette's error reporting not just really fancy and cool, but friendly and\naccessible to everyone.\n\n#### Features\n\n* **printer:**  added (and hooked up) an accessible report printer ([5369a942](https://github.com/zkat/miette/commit/5369a9424e7ed2c66b193b85422fe8b98bc37b6c))\n\n\n<a name=\"0.12.0\"></a>\n## 0.12.0 (2021-08-21)\n\nThis is a SUPER EXCITING release! With this, miette now has a full-featured\npretty-printer that can handle cause chains, snippets, help text, and lots\nmore!\n\nCheck out [the serde_json\nexample](https://github.com/zkat/miette/blob/5fd2765bf05edf25251ce199994b8815524fd47d/images/serde_json.png)\nto see a \"real-world\" case!\n\nThis release also adds support for full `thiserror`-style format strings to\nthe `help()` diagnostic derive attribute!\n\nWe're rapidly approaching a 1.0-beta release. One more extra-fun treat left\nand we can start stabilizing!\n\n#### Features\n\n* **derive:**  format string support for help() ([8fbad1b1](https://github.com/zkat/miette/commit/8fbad1b1cd173ce3c0b803f8b2db013e278c63a6))\n* **printer:**  lots of small improvements to printer ([5fbcd530](https://github.com/zkat/miette/commit/5fbcd53026c131ceafe2a66bebbc20de570363c9))\n* **reporter:**  fancy new reporter with unicode, colors, and multiline (#23) ([d675334e](https://github.com/zkat/miette/commit/d675334e48ddc188a34e166ad040eaceda117d0a))\n\n\n<a name=\"0.11.0\"></a>\n## 0.11.0 (2021-08-18)\n\nBIG changes this time. The whole end-to-end experience for tossing around\nDiagnostics in your code has been overhauled, printing reports is easier than\never, and we even have an `eyre::Report`-style wrapper you can pass around in\napp-internal returns!\n\n#### Features\n\n* **reporter:**  Overhauled return type/main/DiagnosticReport experience. ([29c1403e](https://github.com/zkat/miette/commit/29c1403efdd7fd218f240ac458fd19bba17e9551))\n\n\n<a name=\"0.10.0\"></a>\n## 0.10.0 (2021-08-17)\n\nLots of goodies in this release! I'm working hard on the [1.0.0\nRoadmap](https://github.com/zkat/miette/issues/10), so things are changing\npretty quick, and I thought it would be nice to release this checkpoint.\n#### Bug Fixes\n\n* **protocol:**  keep the owned spans ([49151bb0](https://github.com/zkat/miette/commit/49151bb0950c0db9d2743c8fb78dcacfc27bc750))\n\n#### Features/Breaking Changes\n\n* **derive:**  Allow anything Clone + Into<SourceSpan> to be used as a Span ([385171eb](https://github.com/zkat/miette/commit/385171eb8178ce2e7d6d2d2849b78e0f09feb721))\n* **offsets:**\n  *  nice utility function to get an offset from a Rust callsite ([26f409c5](https://github.com/zkat/miette/commit/26f409c5252c3fda5ead140eb4d5ec282f47f0f7))\n  *  utility function for converting from line/col to offset ([75c23127](https://github.com/zkat/miette/commit/75c2312755bf714c112badf6310b2bff1633f6bc))\n  *  more utility From impls for SourceSpan ([95200366](https://github.com/zkat/miette/commit/95200366a1639b0b729db460ae1e50cce6fee9de))\n* **protocol:**\n  *  add Source impls for Cow and Arc ([53074d34](https://github.com/zkat/miette/commit/53074d3488e1404331fc1ca3c5e068ac57e9a852))\n  *  reference-based DiagnosticReport! ([f390520b](https://github.com/zkat/miette/commit/f390520b45823d65055f9f872016e4ee27c0c20a))\n\n\n\n<a name=\"0.9.0\"></a>\n## 0.9.0 (2021-08-17)\n\nYay new version already! A pretty significant API change, too! ��\n\n#### Breaking Changes\n\n`SourceSpan`s have changed a bit: for one, they're based on offset/length now,\ninstead of start/end. For two, they have a new `Option<String>` field,\n`label`, which is meant to be used by reporters in different contexts. For\nexample, highlight snippets will use them as the labels for underlined\nsections of code, while the snippet context will use the label as the \"file\nname\" for the Source they point to.\n\n  * **protocol:** new SourceSpans with labels ([acfeb9c5](https://github.com/zkat/miette/commit/acfeb9c5b0e390c924194ee0363fc49fa8defbac))\n\n#### Bug Fixes\n\n* **derive:**  allow unused variables for the snippets method ([f704d6a9](https://github.com/zkat/miette/commit/f704d6a9ae971dfe61fe9a0e0b4a1a7f98fd37bc))\n\n#### Features\n\n* **protocol:** implement From<(usize, usize)> for SourceSpan ([36b86df9](https://github.com/zkat/miette/commit/36b86df9f51984405efa6f38be8bbb984d605207))\n\n\n\n<a name=\"0.8.1\"></a>\n## 0.8.1 (2021-08-17)\n\nJust a small bump to update the readme (and docs.rs in the process) with the\nnew snippet derive stuff. No notable changes.\n\n<a name=\"0.8.0\"></a>\n## 0.8.0 (2021-08-17)\n\nYou can full-on use `#[derive(Diagnostic)]` to define snippets now. That's a\nbig deal.\n\n#### Features\n\n* **derive:**  Support for deriving snippet method (#18) ([f6e6acf2](https://github.com/zkat/miette/commit/f6e6acf2d2c301fd411c7c9c4b63a2b19aa69242))\n\n<a name=\"0.7.0\"></a>\n## 0.7.0 (2021-08-16)\n\nWelp. `0.6.0` was basically completely broken, so I tore out the\n`darling`-based derive macros and rewrote the whole thing using `syn`, and\nthings are much better now!\n\nThere's still a few bits and bobs to add, like snippets (oof. big.), and full\nhelp format string support (they don't quite work in enums right now), but\notherwise, this is pretty usable~\n\n#### Features\n\n* **derive:**  improved derive support, including partial help format string support! ([9ef0dd26](https://github.com/zkat/miette/commit/9ef0dd261fa537b280f32ea6f149785a69e33938))\n\n#### Bug Fixes\n\n* **derive:**  move to plain syn to fix darling issues ([9a78a943](https://github.com/zkat/miette/commit/9a78a943950078c879a1eb06baf819348139e1de))\n\n\n<a name=\"0.6.0\"></a>\n## 0.6.0 (2021-08-15)\n\nWe haz a basic derive macro now!\n\n#### Features\n\n* **derive:**  added basic derive macro ([0e770270](https://github.com/zkat/miette/commit/0e7702700de8a4cd9022d660aaf363b735943d55))\n\n\n<a name=\"0.5.0\"></a>\n## 0.5.0 (2021-08-14)\n\nI decided to yank some handy (optional) utilities from a project I'm using\n`miette` in. These should make using it more ergonomic.\n\n#### Features\n\n* **utils:**  various convenience utilities for creating and working with Diagnostics ([a9601368](https://github.com/zkat/miette/commit/a960136802834bd3741ef637d91f73287870b1ad))\n\n\n<a name=\"0.4.0\"></a>\n## 0.4.0 (2021-08-11)\n\nTime for another (still experimental!) change to `Diagnostic`. It will\nprobably continue to change as miette gets experimented with, until 1.0.0\nstabilizes it. But for now, expect semi-regular breaking changes of this kind.\n\nOh and I tracked down a rogue `\\n` that was messing with the default reporter\nand managed to get out of it with at least some of my sanity.\n\n#### Breaking Changes\n\n* **protocol:**  Simplify protocol return values further ([02dd1f84](https://github.com/zkat/miette/commit/02dd1f84d45c01fb4de2d31c158a7b6e08455f72), breaks [#](https://github.com/zkat/miette/issues/))\n\n#### Bug Fixes\n\n* **reporter:**\n  *  fix reporter and tests... again ([d201dde4](https://github.com/zkat/miette/commit/d201dde4b559a2baa4259a0845582a5d14453c5a))\n  *  fix extra newline after header ([0d2e3312](https://github.com/zkat/miette/commit/0d2e3312a4a262e99a131bc893097d295e59e8ca))\n\n\n<a name=\"0.3.1\"></a>\n## 0.3.1 (2021-08-11)\n\nThis is a tiny release to fix a reporter rendering bug.\n\n#### Bug Fixes\n\n* **reporter:**  fix missing newline before help text ([9d430b6f](https://github.com/zkat/miette/commit/9d430b6f477fd8991ce217dffdbce8fbd28dcd7e))\n\n\n\n<a name=\"0.3.0\"></a>\n## 0.3.0 (2021-08-08)\n\nThis version is the result of a lot of experimentation with getting the\n`Diagnostic` API right, particularly `Diagnostic::snippets()`, which is\nsomething that should be writable in several different ways. As such, it\nincludes some breaking changes, but they shouldn't be too hard to figure out.\n\n#### Breaking Changes\n\n* **protocol:**\n  *  improvements to snippets API ([3584dc60](https://github.com/zkat/miette/commit/3584dc600c2b8b0f84a2a0c59856da9a9dc7fbab))\n  *  help is a single Display ref now. ([80e7dabb](https://github.com/zkat/miette/commit/80e7dabbe450d4a78ed18174e2a383a6a1ed0557))\n\n#### Bug Fixes\n\n* **tests:**  updating tests ([60bdf47e](https://github.com/zkat/miette/commit/60bdf47e297999b48345b39ba1a3aacbbf79e6fc))\n\n<a name=\"0.2.1\"></a>\n## 0.2.1 (2021-08-05)\n\nI think this is the right thing to do re: From!\n\n#### Bug Fixes\n\n* **protocol:**  fix the default From<:T Diagnostic> implementation to cover more cases. ([781a51f0](https://github.com/zkat/miette/commit/781a51f03765c7351a95b34e8391f6a0cf5fc37c))\n\n<a name=\"0.2.0\"></a>\n## 0.2.0 (2021-08-05)\n\nStarting to get some good feedback on the protocol and APIs, so some improvements were made.\n\n#### Breaking changes\n\nYou might need to add `+ Send + Sync + 'static` to your `Box<dyn Diagnostic>`\nusages now, since `Diagnostic` no longer constrains on any of them.\n\nAdditionally, `Diagnostic::help()`, `Diagnostic::code()`, and `SpanContents`\nhave had signature changes that you'll need to adapt to.\n\n* **protocol:**  protocol improvements after getting feedback ([e955321c](https://github.com/zkat/miette/commit/e955321cbd67372dfebb71a829ddb89baf9b169a))\n* **protocol:**  Make use of ? and return types with Diagnostics more ergonomic ([50238d75](https://github.com/zkat/miette/commit/50238d75a2db2dccbe2ae2cba78d0dd6eac4ef2a))\n\n<a name=\"0.1.0\"></a>\n## 0.1.0 (2021-08-05)\n\nI'm really excited to put out this first release of `miette`! This version\ndefines the current protocol and includes a basic snippet reporter. It's fully\ndocumented and ready to be used!\n\n_Disclaimer_: This library is still under pretty heavy development, and you should only use this if you're interested in using something experimental. Any and all design comments and ideas are welcome over on [GitHub](https://github.com/zkat/miettee)\n\n#### Bug Fixes\n\n* **api:**  stop re-exporting random things wtf??? ([2fb9f93c](https://github.com/zkat/miette/commit/2fb9f93cbf02c4d41a5538e98c8bea72f40c5430))\n* **protocol:**  use references for all return values in Diagnostic ([c3f41b97](https://github.com/zkat/miette/commit/c3f41b972da0e89220e7d9de08f420912ec8973a))\n\n#### Features\n\n* **protocol:**  sketched out a basic protocol ([e2387ce2](https://github.com/zkat/miette/commit/e2387ce2edd4165d04f47a084f3f1492a5de8d9d))\n* **reporter:**  dummy reporter implementation + tests ([a437f445](https://github.com/zkat/miette/commit/a437f44511768e52cfedd856b5b1432c0716f378))\n* **span:**  make span end optional ([1cb0ad38](https://github.com/zkat/miette/commit/1cb0ad38524696a733f6134092ffd998f76fb142))\n\n\n\n<a name=\"0.0.0\"></a>\n## 0.0.0 (2021-08-03)\n\nDon't mind me, just parking this crate name.\n\n\n"
        },
        {
          "name": "CODE_OF_CONDUCT.md",
          "type": "blob",
          "size": 9.65234375,
          "content": "# Code of Conduct\n\n## When Something Happens\n\nIf you see a Code of Conduct violation, follow these steps:\n\n1. Let the person know that what they did is not appropriate and ask them to stop and/or edit their message(s) or commits.\n2. That person should immediately stop the behavior and correct the issue.\n3. If this doesn’t happen, or if you're uncomfortable speaking up, [contact the maintainers](#contacting-maintainers).\n4. As soon as available, a maintainer will look into the issue, and take [further action (see below)](#further-enforcement), starting with a warning, then temporary block, then long-term repo or organization ban.\n\nWhen reporting, please include any relevant details, links, screenshots, context, or other information that may be used to better understand and resolve the situation.\n\n**The maintainer team will prioritize the well-being and comfort of the recipients of the violation over the comfort of the violator.** See [some examples below](#enforcement-examples).\n\n## Our Pledge\n\nIn the interest of fostering an open and welcoming environment, we as contributors and maintainers of this project pledge to making participation in our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, gender identity and expression, level of experience, technical preferences, nationality, personal appearance, race, religion, or sexual identity and orientation.\n\n## Our Standards\n\nExamples of behavior that contributes to creating a positive environment include:\n\n  * Using welcoming and inclusive language.\n  * Being respectful of differing viewpoints and experiences.\n  * Gracefully accepting constructive feedback.\n  * Focusing on what is best for the community.\n  * Showing empathy and kindness towards other community members.\n  * Encouraging and raising up your peers in the project so you can all bask in hacks and glory.\n\nExamples of unacceptable behavior by participants include:\n\n  * The use of sexualized language or imagery and unwelcome sexual attention or advances, including when simulated online. The only exception to sexual topics is channels/spaces specifically for topics of sexual identity.\n  * Casual mention of slavery or indentured servitude and/or false comparisons of one's occupation or situation to slavery. Please consider using or asking about alternate terminology when referring to such metaphors in technology.\n  * Making light of/making mocking comments about trigger warnings and content warnings.\n  * Trolling, insulting/derogatory comments, and personal or political attacks.\n  * Public or private harassment, deliberate intimidation, or threats.\n  * Publishing others' private information, such as a physical or electronic address, without explicit permission. This includes any sort of \"outing\" of any aspect of someone's identity without their consent.\n  * Publishing private screenshots or quotes of interactions in the context of this project without all quoted users' *explicit* consent.\n  * Publishing of private communication that doesn't have to do with reporting harassment.\n  * Any of the above even when [presented as \"ironic\" or \"joking\"](https://en.wikipedia.org/wiki/Hipster_racism).\n  * Any attempt to present \"reverse-ism\" versions of the above as violations. Examples of reverse-isms are \"reverse racism\", \"reverse sexism\", \"heterophobia\", and \"cisphobia\".\n  * Unsolicited explanations under the assumption that someone doesn't already know it. Ask before you teach! Don't assume what people's knowledge gaps are.\n  * [Feigning or exaggerating surprise](https://www.recurse.com/manual#no-feigned-surprise) when someone admits to not knowing something.\n  * \"[Well-actuallies](https://www.recurse.com/manual#no-well-actuallys)\"\n  * Other conduct which could reasonably be considered inappropriate in a professional or community setting.\n\n## Scope\n\nThis Code of Conduct applies both within spaces involving this project and in other spaces involving community members. This includes the repository, its Pull Requests and Issue tracker, its Twitter community, private email communications in the context of the project, and any events where members of the project are participating, as well as adjacent communities and venues affecting the project's members.\n\nDepending on the violation, the maintainers may decide that violations of this code of conduct that have happened outside of the scope of the community may deem an individual unwelcome, and take appropriate action to maintain the comfort and safety of its members.\n\n### Other Community Standards\n\nAs a project on GitHub, this project is additionally covered by the [GitHub Community Guidelines](https://help.github.com/articles/github-community-guidelines/).\n\nEnforcement of those guidelines after violations overlapping with the above are the responsibility of the entities, and enforcement may happen in any or all of the services/communities.\n\n## Maintainer Enforcement Process\n\nOnce the maintainers get involved, they will follow a documented series of steps and do their best to preserve the well-being of project members. This section covers actual concrete steps.\n\n### Contacting Maintainers\n\nYou may get in touch with the maintainer team through any of the following methods:\n\n  * Through email:\n    * [coc@zkat.tech](mailto:coc@zkat.tech) (Kat Marchán)\n\n  * Through Twitter:\n    * [@zkat__](https://twitter.com/zkat__) (Kat Marchán)\n\n### Further Enforcement\n\nIf you've already followed the [initial enforcement steps](#enforcement), these are the steps maintainers will take for further enforcement, as needed:\n\n  1. Repeat the request to stop.\n  2. If the person doubles down, they will have offending messages removed or edited by a maintainers given an official warning. The PR or Issue may be locked.\n  3. If the behavior continues or is repeated later, the person will be blocked from participating for 24 hours.\n  4. If the behavior continues or is repeated after the temporary block, a long-term (6-12mo) ban will be used.\n\nOn top of this, maintainers may remove any offending messages, images, contributions, etc, as they deem necessary.\n\nMaintainers reserve full rights to skip any of these steps, at their discretion, if the violation is considered to be a serious and/or immediate threat to the health and well-being of members of the community. These include any threats, serious physical or verbal attacks, and other such behavior that would be completely unacceptable in any social setting that puts our members at risk.\n\nMembers expelled from events or venues with any sort of paid attendance will not be refunded.\n\n### Who Watches the Watchers?\n\nMaintainers and other leaders who do not follow or enforce the Code of Conduct in good faith may face temporary or permanent repercussions as determined by other members of the project's leadership. These may include anything from removal from the maintainer team to a permanent ban from the community.\n\nAdditionally, as a project hosted on GitHub, [its own Codes of Conducts may be applied against maintainers of this project](#other-community-standards), externally of this project's procedures.\n\n### Enforcement Examples\n\n#### The Best Case\n\nThe vast majority of situations work out like this. This interaction is common, and generally positive.\n\n> Alex: \"Yeah I used X and it was really crazy!\"\n\n> Patt (not a maintainer): \"Hey, could you not use that word? What about 'ridiculous' instead?\"\n\n> Alex: \"oh sorry, sure.\" -> edits old comment to say \"it was really confusing!\"\n\n#### The Maintainer Case\n\nSometimes, though, you need to get maintainers involved. Maintainers will do their best to resolve conflicts, but people who were harmed by something **will take priority**.\n\n> Patt: \"Honestly, sometimes I just really hate using $library and anyone who uses it probably sucks at their job.\"\n\n> Alex: \"Whoa there, could you dial it back a bit? There's a CoC thing about attacking folks' tech use like that.\"\n\n> Patt: \"I'm not attacking anyone, what's your problem?\"\n\n> Alex: \"@maintainers hey uh. Can someone look at this issue? Patt is getting a bit aggro. I tried to nudge them about it, but nope.\"\n\n> KeeperOfCommitBits: (on issue) \"Hey Patt, maintainer here. Could you tone it down? This sort of attack is really not okay in this space.\"\n\n> Patt: \"Leave me alone I haven't said anything bad wtf is wrong with you.\"\n\n> KeeperOfCommitBits: (deletes user's comment), \"@patt I mean it. Please refer to the CoC over at (URL to this CoC) if you have questions, but you can consider this an actual warning. I'd appreciate it if you reworded your messages in this thread, since they made folks there uncomfortable. Let's try and be kind, yeah?\"\n\n> Patt: \"@keeperofbits Okay sorry. I'm just frustrated and I'm kinda burnt out and I guess I got carried away. I'll DM Alex a note apologizing and edit my messages. Sorry for the trouble.\"\n\n> KeeperOfCommitBits: \"@patt Thanks for that. I hear you on the stress. Burnout sucks :/.  Have a good one!\"\n\n#### The Nope Case\n\n> PepeTheFrog🐸: \"Hi, I am a literal actual nazi and I think white supremacists are quite fashionable.\"\n\n> Patt: \"NOOOOPE. OH NOPE NOPE.\"\n\n> Alex: \"JFC NO. NOPE. @keeperofbits NOPE NOPE LOOK HERE\"\n\n> KeeperOfCommitBits: \"👀 Nope. NOPE NOPE NOPE. 🔥\"\n\n> PepeTheFrog🐸 has been banned from all organization or user repositories belonging to KeeperOfCommitBits.\n\n## Attribution\n\nThis Code of Conduct was generated using [WeAllJS Code of Conduct Generator](https://npm.im/weallbehave), which is based on the [WeAllJS Code of\nConduct](https://wealljs.org/code-of-conduct), which is itself based on\n[Contributor Covenant](http://contributor-covenant.org), version 1.4, available\nat\n[http://contributor-covenant.org/version/1/4](http://contributor-covenant.org/version/1/4),\nand the LGBTQ in Technology Slack [Code of\nConduct](http://lgbtq.technology/coc.html).\n\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 20.759765625,
          "content": "# Contributing\n\n## How do I... <a name=\"toc\"></a>\n\n* [Use This Guide](#introduction)?\n* Ask or Say Something? 🤔🐛😱\n  * [Request Support](#request-support)\n  * [Report an Error or Bug](#report-an-error-or-bug)\n  * [Request a Feature](#request-a-feature)\n* Make Something? 🤓👩🏽‍💻📜🍳\n  * [Project Setup](#project-setup)\n  * [Contribute Documentation](#contribute-documentation)\n  * [Contribute Code](#contribute-code)\n* Manage Something ✅🙆🏼💃👔\n  * [Provide Support on Issues](#provide-support-on-issues)\n  * [Label Issues](#label-issues)\n  * [Clean Up Issues and PRs](#clean-up-issues-and-prs)\n  * [Review Pull Requests](#review-pull-requests)\n  * [Merge Pull Requests](#merge-pull-requests)\n  * [Tag a Release](#tag-a-release)\n  * [Join the Project Team](#join-the-project-team)\n* Add a Guide Like This One [To My Project](#attribution)? 🤖😻👻\n\n## Introduction\n\nThank you so much for your interest in contributing! All types of contributions are encouraged and valued. See the [table of contents](#toc) for different ways to help and details about how this project handles them!📝\n\nPlease make sure to read the relevant section before making your contribution! It will make it a lot easier for us maintainers to make the most of it and smooth out the experience for all involved. 💚\n\nThe [Project Team](#join-the-project-team) looks forward to your contributions. 🙌🏾✨\n\n## Request Support\n\nIf you have a question about this project, how to use it, or just need clarification about something:\n\n* Open an Issue at https://github.com/zkat/miette/issues\n* Provide as much context as you can about what you're running into.\n* Provide project and platform versions, depending on what seems relevant. If not, please be ready to provide that information if maintainers ask for it.\n\nOnce it's filed:\n\n* The project team will [label the issue](#label-issues).\n* Someone will try to have a response soon.\n* If you or the maintainers don't respond to an issue for 30 days, the [issue will be closed](#clean-up-issues-and-prs). If you want to come back to it, reply (once, please), and we'll reopen the existing issue. Please avoid filing new issues as extensions of one you already made.\n\n## Report an Error or Bug\n\nIf you run into an error or bug with the project:\n\n* Open an Issue at https://github.com/zkat/miette/issues\n* Include *reproduction steps* that someone else can follow to recreate the bug or error on their own.\n* Provide project and platform versions, depending on what seems relevant. If not, please be ready to provide that information if maintainers ask for it.\n\nOnce it's filed:\n\n* The project team will [label the issue](#label-issues).\n* A team member will try to reproduce the issue with your provided steps. If there are no repro steps or no obvious way to reproduce the issue, the team will ask you for those steps and mark the issue as `needs-repro`. Bugs with the `needs-repro` tag will not be addressed until they are reproduced.\n* If the team is able to reproduce the issue, it will be marked `needs-fix`, as well as possibly other tags (such as `critical`), and the issue will be left to be [implemented by someone](#contribute-code).\n* If you or the maintainers don't respond to an issue for 30 days, the [issue will be closed](#clean-up-issues-and-prs). If you want to come back to it, reply (once, please), and we'll reopen the existing issue. Please avoid filing new issues as extensions of one you already made.\n* `critical` issues may be left open, depending on perceived immediacy and severity, even past the 30 day deadline.\n\n## Request a Feature\n\nIf the project doesn't do something you need or want it to do:\n\n* Open an Issue at https://github.com/zkat/miette/issues\n* Provide as much context as you can about what you're running into.\n* Please try and be clear about why existing features and alternatives would not work for you.\n\nOnce it's filed:\n\n* The project team will [label the issue](#label-issues).\n* The project team will evaluate the feature request, possibly asking you more questions to understand its purpose and any relevant requirements. If the issue is closed, the team will convey their reasoning and suggest an alternative path forward.\n* If the feature request is accepted, it will be marked for implementation with `feature-accepted`, which can then be done by either by a core team member or by anyone in the community who wants to [contribute code](#contribute-code).\n\nNote: The team is unlikely to be able to accept every single feature request that is filed. Please understand if they need to say no.\n\n## Project Setup\n\nSo you wanna contribute some code! That's great! This project uses GitHub Pull Requests to manage contributions, so [read up on how to fork a GitHub project and file a PR](https://guides.github.com/activities/forking) if you've never done it before.\n\nIf this seems like a lot or you aren't able to do all this setup, you might also be able to [edit the files directly](https://help.github.com/articles/editing-files-in-another-user-s-repository/) without having to do any of this setup. Yes, [even code](#contribute-code).\n\nIf you want to go the usual route and run the project locally, though:\n\n* [Install Rust](https://www.rust-lang.org/learn/get-started)\n* [Fork the project](https://guides.github.com/activities/forking/#fork)\n\nThen in your terminal:\n* `cd path/to/your/clone`\n* `cargo test --features fancy`\n\nAnd you should be ready to go!\n\n**Note:** If you don't include the \"fancy\" feature, one of the doc-tests will fail.\n\n## Contribute Documentation\n\nDocumentation is a super important, critical part of this project. Docs are how we keep track of what we're doing, how, and why. It's how we stay on the same page about our policies. And it's how we tell others everything they need in order to be able to use this project -- or contribute to it. So thank you in advance.\n\nDocumentation contributions of any size are welcome! Feel free to file a PR even if you're just rewording a sentence to be more clear, or fixing a spelling mistake!\n\nTo contribute documentation:\n\n* [Set up the project](#project-setup).\n* Edit or add any relevant documentation.\n* Make sure your changes are formatted correctly and consistently with the rest of the documentation.\n* Re-read what you wrote, and run a spellchecker on it to make sure you didn't miss anything.\n* Write clear, concise commit message(s) using [conventional-changelog format](https://github.com/conventional-changelog/conventional-changelog-angular/blob/master/convention.md). Documentation commits should use `docs(<component>): <message>`.\n* Go to https://github.com/zkat/miette/pulls and open a new pull request with your changes.\n* If your PR is connected to an open issue, add a line in your PR's description that says `Fixes: #123`, where `#123` is the number of the issue you're fixing.\n\nOnce you've filed the PR:\n\n* One or more maintainers will use GitHub's review feature to review your PR.\n* If the maintainer asks for any changes, edit your changes, push, and ask for another review.\n* If the maintainer decides to pass on your PR, they will thank you for the contribution and explain why they won't be accepting the changes. That's ok! We still really appreciate you taking the time to do it, and we don't take that lightly. 💚\n* If your PR gets accepted, it will be marked as such, and merged into the `latest` branch soon after. Your contribution will be distributed to the masses next time the maintainers [tag a release](#tag-a-release)\n\n## Contribute Code\n\nWe like code commits a lot! They're super handy, and they keep the project going and doing the work it needs to do to be useful to others.\n\nCode contributions of just about any size are acceptable!\n\nThe main difference between code contributions and documentation contributions is that contributing code requires inclusion of relevant tests for the code being added or changed. Contributions without accompanying tests will be held off until a test is added, unless the maintainers consider the specific tests to be either impossible, or way too much of a burden for such a contribution.\n\nTo contribute code:\n\n* [Set up the project](#project-setup).\n* Make any necessary changes to the source code.\n* Include any [additional documentation](#contribute-documentation) the changes might need.\n* Write tests that verify that your contribution works as expected.\n* Write clear, concise commit message(s) using [conventional-changelog format](https://github.com/conventional-changelog/conventional-changelog-angular/blob/master/convention.md).\n* Dependency updates, additions, or removals must be in individual commits, and the message must use the format: `<prefix>(deps): PKG@VERSION`, where `<prefix>` is any of the usual `conventional-changelog` prefixes, at your discretion.\n* Go to https://github.com/zkat/miette/pulls and open a new pull request with your changes.\n* If your PR is connected to an open issue, add a line in your PR's description that says `Fixes: #123`, where `#123` is the number of the issue you're fixing.\n\nOnce you've filed the PR:\n\n* Barring special circumstances, maintainers will not review PRs until all checks pass (Travis, AppVeyor, etc).\n* One or more maintainers will use GitHub's review feature to review your PR.\n* If the maintainer asks for any changes, edit your changes, push, and ask for another review. Additional tags (such as `needs-tests`) will be added depending on the review.\n* If the maintainer decides to pass on your PR, they will thank you for the contribution and explain why they won't be accepting the changes. That's ok! We still really appreciate you taking the time to do it, and we don't take that lightly. 💚\n* If your PR gets accepted, it will be marked as such, and merged into the `latest` branch soon after. Your contribution will be distributed to the masses next time the maintainers [tag a release](#tag-a-release)\n\n## Provide Support on Issues\n\n[Needs Collaborator](#join-the-project-team): none\n\nHelping out other users with their questions is a really awesome way of contributing to any community. It's not uncommon for most of the issues on an open source projects being support-related questions by users trying to understand something they ran into, or find their way around a known bug.\n\nSometimes, the `support` label will be added to things that turn out to actually be other things, like bugs or feature requests. In that case, suss out the details with the person who filed the original issue, add a comment explaining what the bug is, and change the label from `support` to `bug` or `feature`. If you can't do this yourself, @mention a maintainer so they can do it.\n\nIn order to help other folks out with their questions:\n\n* Go to the issue tracker and [filter open issues by the `support` label](https://github.com/zkat/miette/issues?q=is%3Aopen+is%3Aissue+label%3Asupport).\n* Read through the list until you find something that you're familiar enough with to give an answer to.\n* Respond to the issue with whatever details are needed to clarify the question, or get more details about what's going on.\n* Once the discussion wraps up and things are clarified, either close the issue, or ask the original issue filer (or a maintainer) to close it for you.\n\nSome notes on picking up support issues:\n\n* Avoid responding to issues you don't know you can answer accurately.\n* As much as possible, try to refer to past issues with accepted answers. Link to them from your replies with the `#123` format.\n* Be kind and patient with users -- often, folks who have run into confusing things might be upset or impatient. This is ok. Try to understand where they're coming from, and if you're too uncomfortable with the tone, feel free to stay away or withdraw from the issue. (note: if the user is outright hostile or is violating the CoC, [refer to the Code of Conduct](CODE_OF_CONDUCT.md) to resolve the conflict).\n\n## Label Issues\n\n[Needs Collaborator](#join-the-project-team): Issue Tracker\n\nOne of the most important tasks in handling issues is labeling them usefully and accurately. All other tasks involving issues ultimately rely on the issue being classified in such a way that relevant parties looking to do their own tasks can find them quickly and easily.\n\nIn order to label issues, [open up the list of unlabeled issues](https://github.com/zkat/miette/issues?q=is%3Aopen+is%3Aissue+no%3Alabel) and, **from newest to oldest**, read through each one and apply issue labels according to the table below. If you're unsure about what label to apply, skip the issue and try the next one: don't feel obligated to label each and every issue yourself!\n\nLabel | Apply When | Notes\n--- | --- | ---\n`bug` | Cases where the code (or documentation) is behaving in a way it wasn't intended to. | If something is happening that surprises the *user* but does not go against the way the code is designed, it should use the `enhancement` label.\n`critical` | Added to `bug` issues if the problem described makes the code completely unusable in a common situation. |\n`documentation` | Added to issues or pull requests that affect any of the documentation for the project. | Can be combined with other labels, such as `bug` or `enhancement`.\n`duplicate` | Added to issues or PRs that refer to the exact same issue as another one that's been previously labeled. | Duplicate issues should be marked and closed right away, with a message referencing the issue it's a duplicate of (with `#123`)\n`enhancement` | Added to [feature requests](#request-a-feature), PRs, or documentation issues that are purely additive: the code or docs currently work as expected, but a change is being requested or suggested. |\n`help wanted` | Applied by [Committers](#join-the-project-team) to issues and PRs that they would like to get outside help for. Generally, this means it's lower priority for the maintainer team to itself implement, but that the community is encouraged to pick up if they so desire | Never applied on first-pass labeling.\n`in-progress` | Applied by [Committers](#join-the-project-team) to PRs that are pending some work before they're ready for review. | The original PR submitter should @mention the team member that applied the label once the PR is complete.\n`performance` | This issue or PR is directly related to improving performance. |\n`refactor` | Added to issues or PRs that deal with cleaning up or modifying the project for the betterment of it. |\n`starter` | Applied by [Committers](#join-the-project-team) to issues that they consider good introductions to the project for people who have not contributed before. These are not necessarily \"easy\", but rather focused around how much context is necessary in order to understand what needs to be done for this project in particular. | Existing project members are expected to stay away from these unless they increase in priority.\n`support` | This issue is either asking a question about how to use the project, clarifying the reason for unexpected behavior, or possibly reporting a `bug` but does not have enough detail yet to determine whether it would count as such. | The label should be switched to `bug` if reliable reproduction steps are provided. Issues primarily with unintended configurations of a user's environment are not considered bugs, even if they cause crashes.\n`tests` | This issue or PR either requests or adds primarily tests to the project. | If a PR is pending tests, that will be handled through the [PR review process](#review-pull-requests)\n`wontfix` | Labelers may apply this label to issues that clearly have nothing at all to do with the project or are otherwise entirely outside of its scope/sphere of influence. [Committers](#join-the-project-team) may apply this label and close an issue or PR if they decide to pass on an otherwise relevant issue. | The issue or PR should be closed as soon as the label is applied, and a clear explanation provided of why the label was used. Contributors are free to contest the labeling, but the decision ultimately falls on committers as to whether to accept something or not.\n\n## Clean Up Issues and PRs\n\n[Needs Collaborator](#join-the-project-team): Issue Tracker\n\nIssues and PRs can go stale after a while. Maybe they're abandoned. Maybe the team will just plain not have time to address them any time soon.\n\nIn these cases, they should be closed until they're brought up again or the interaction starts over.\n\nTo clean up issues and PRs:\n\n* Search the issue tracker for issues or PRs, and add the term `updated:<=YYYY-MM-DD`, where the date is 30 days before today.\n* Go through each issue *from oldest to newest*, and close them if **all of the following are true**:\n  * not opened by a maintainer\n  * not marked as `critical`\n  * not marked as `starter` or `help wanted` (these might stick around for a while, in general, as they're intended to be available)\n  * no explicit messages in the comments asking for it to be left open\n  * does not belong to a milestone\n* Leave a message when closing saying \"Cleaning up stale issue. Please reopen or ping us if and when you're ready to resume this. See https://github.com/zkat/miette/blob/latest/CONTRIBUTING.md#clean-up-issues-and-prs for more details.\"\n\n## Review Pull Requests\n\n[Needs Collaborator](#join-the-project-team): Issue Tracker\n\nWhile anyone can comment on a PR, add feedback, etc, PRs are only *approved* by team members with Issue Tracker or higher permissions.\n\nPR reviews use [GitHub's own review feature](https://help.github.com/articles/about-pull-request-reviews/), which manages comments, approval, and review iteration.\n\nSome notes:\n\n* You may ask for minor changes (\"nitpicks\"), but consider whether they are really blockers to merging: try to err on the side of \"approve, with comments\".\n* *ALL PULL REQUESTS* should be covered by a test: either by a previously-failing test, an existing test that covers the entire functionality of the submitted code, or new tests to verify any new/changed behavior. All tests must also pass and follow established conventions. Test coverage should not drop, unless the specific case is considered reasonable by maintainers.\n* Please make sure you're familiar with the code or documentation being updated, unless it's a minor change (spellchecking, minor formatting, etc). You may @mention another project member who you think is better suited for the review, but still provide a non-approving review of your own.\n* Be extra kind: people who submit code/doc contributions are putting themselves in a pretty vulnerable position, and have put time and care into what they've done (even if that's not obvious to you!) -- always respond with respect, be understanding, but don't feel like you need to sacrifice your standards for their sake, either. Just don't be a jerk about it?\n\n## Merge Pull Requests\n\n[Needs Collaborator](#join-the-project-team): Committer\n\nTBD - need to hash out a bit more of this process.\n\n## Tag A Release\n\n[Needs Collaborator](#join-the-project-team): Committer\n\nTBD - need to hash out a bit more of this process. The most important bit here is probably that all tests must pass, and tags must use [semver](https://semver.org).\n\n## Join the Project Team\n\n### Ways to Join\n\nThere are many ways to contribute! Most of them don't require any official status unless otherwise noted. That said, there's a couple of positions that grant special repository abilities, and this section describes how they're granted and what they do.\n\nAll of the below positions are granted based on the project team's needs, as well as their consensus opinion about whether they would like to work with the person and think that they would fit well into that position. The process is relatively informal, and it's likely that people who express interest in participating can just be granted the permissions they'd like.\n\nYou can spot a collaborator on the repo by looking for the `[Collaborator]` or `[Owner]` tags next to their names.\n\nPermission | Description\n--- | ---\nIssue Tracker | Granted to contributors who express a strong interest in spending time on the project's issue tracker. These tasks are mainly [labeling issues](#label-issues), [cleaning up old ones](#clean-up-issues-and-prs), and [reviewing pull requests](#review-pull-requests), as well as all the usual things non-team-member contributors can do. Issue handlers should not merge pull requests, tag releases, or directly commit code themselves: that should still be done through the usual pull request process. Becoming an Issue Handler means the project team trusts you to understand enough of the team's process and context to implement it on the issue tracker.\nCommitter | Granted to contributors who want to handle the actual pull request merges, tagging new versions, etc. Committers should have a good level of familiarity with the codebase, and enough context to understand the implications of various changes, as well as a good sense of the will and expectations of the project team.\nAdmin/Owner | Granted to people ultimately responsible for the project, its community, etc.\n\n## Attribution\n\nThis guide was generated using the WeAllJS `CONTRIBUTING.md` generator. [Make your own](https://npm.im/weallcontribute)!\n\n"
        },
        {
          "name": "Cargo.toml",
          "type": "blob",
          "size": 2.220703125,
          "content": "[package]\nname = \"miette\"\nversion = \"7.4.0\"\nauthors = [\"Kat Marchán <kzm@zkat.tech>\"]\ndescription = \"Fancy diagnostic reporting library and protocol for us mere mortals who aren't compiler hackers.\"\ncategories = [\"rust-patterns\"]\nrepository = \"https://github.com/zkat/miette\"\ndocumentation = \"https://docs.rs/miette\"\nlicense = \"Apache-2.0\"\nreadme = \"README.md\"\nedition = \"2018\"\nrust-version = \"1.70.0\"\nexclude = [\"images/\", \"tests/\", \"miette-derive/\"]\n\n[dependencies]\nthiserror = \"1.0.56\"\nmiette-derive = { path = \"miette-derive\", version = \"=7.4.0\", optional = true }\nunicode-width = \"0.1.11\"\ncfg-if = \"1.0.0\"\n\nowo-colors = { version = \"4.0.0\", optional = true }\ntextwrap = { version = \"0.16.0\", default-features = false, features = [\"unicode-linebreak\", \"unicode-width\"], optional = true }\nsupports-hyperlinks = { version = \"3.0.0\", optional = true }\nsupports-color = { version = \"3.0.0\", optional = true }\nsupports-unicode = { version = \"3.0.0\", optional = true }\nbacktrace = { version = \"0.3.69\", optional = true }\nterminal_size = { version = \"0.4.0\", optional = true }\nbacktrace-ext = { version = \"0.2.1\", optional = true }\nserde = { version = \"1.0.196\", features = [\"derive\"], optional = true }\nsyntect = { version = \"5.1.0\", optional = true }\n\n[dev-dependencies]\nsemver = \"1.0.21\"\n\n# Eyre devdeps\nfutures = { version = \"0.3\", default-features = false }\nindenter = \"0.3.3\"\nrustversion = \"1.0\"\ntrybuild = { version = \"1.0.89\", features = [\"diff\"] }\nsyn = { version = \"2.0.48\", features = [\"full\"] }\nregex = \"1.10\"\nlazy_static = \"1.4\"\n\nserde = { version = \"1.0.196\", features = [\"derive\"] }\nserde_json = \"1.0.113\"\nstrip-ansi-escapes = \"0.2.0\"\n\n[features]\ndefault = [\"derive\"]\nderive = [\"dep:miette-derive\"]\nno-format-args-capture = []\nfancy-base = [\n    \"dep:owo-colors\",\n    \"dep:textwrap\",\n]\nfancy-no-syscall = [\n    \"fancy-base\",\n]\nfancy-no-backtrace = [\n    \"fancy-base\",\n    \"dep:terminal_size\",\n    \"dep:supports-hyperlinks\",\n    \"dep:supports-color\",\n    \"dep:supports-unicode\",\n]\nfancy = [\"fancy-no-backtrace\", \"dep:backtrace\", \"dep:backtrace-ext\"]\nsyntect-highlighter = [\"fancy-no-backtrace\", \"dep:syntect\"]\n\n[workspace]\nmembers = [\"miette-derive\"]\n\n[package.metadata.docs.rs]\nall-features = true\n\n[[example]]\nname = \"serde_json\"\nrequired-features = [\"fancy\"]\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 11.091796875,
          "content": "\n                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"[]\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright [yyyy] [name of copyright owner]\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n"
        },
        {
          "name": "Makefile.toml",
          "type": "blob",
          "size": 0.3720703125,
          "content": "[tasks.changelog]\nworkspace=false\ninstall_crate=\"git-cliff\"\ncommand = \"git-cliff\"\nargs = [\"--prepend\", \"CHANGELOG.md\", \"-u\", \"--tag\", \"${@}\"]\n\n[tasks.release]\nworkspace=false\ninstall_crate=\"cargo-release\"\ncommand = \"cargo\"\nargs = [\"release\", \"--workspace\", \"${@}\"]\n\n[tasks.readme]\nworkspace=false\ninstall_crate=\"cargo-readme\"\ncommand = \"cargo\"\nargs = [\"readme\", \"-o\", \"README.md\"]\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 23.6552734375,
          "content": "\n# `miette`\n\nYou run miette? You run her code like the software? Oh. Oh! Error code for\ncoder! Error code for One Thousand Lines!\n\n### About\n\n`miette` is a diagnostic library for Rust. It includes a series of\ntraits/protocols that allow you to hook into its error reporting facilities,\nand even write your own error reports! It lets you define error types that\ncan print out like this (or in any format you like!):\n\n<img src=\"https://raw.githubusercontent.com/zkat/miette/main/images/serde_json.png\" alt=\"Hi! miette also includes a screen-reader-oriented diagnostic printer that's enabled in various situations, such as when you use NO_COLOR or CLICOLOR settings, or on CI. This behavior is also fully configurable and customizable. For example, this is what this particular diagnostic will look like when the narrated printer is enabled:\n\\\nError: Received some bad JSON from the source. Unable to parse.\n    Caused by: missing field `foo` at line 1 column 1700\n\\\nBegin snippet for https://api.nuget.org/v3/registration5-gz-semver2/json.net/index.json starting\nat line 1, column 1659\n\\\nsnippet line 1: gs&quot;:[&quot;json&quot;],&quot;title&quot;:&quot;&quot;,&quot;version&quot;:&quot;1.0.0&quot;},&quot;packageContent&quot;:&quot;https://api.nuget.o\n    highlight starting at line 1, column 1699: last parsing location\n\\\ndiagnostic help: This is a bug. It might be in ruget, or it might be in the\nsource you're using, but it's definitely a bug and should be reported.\ndiagnostic error code: ruget::api::bad_json\n\" />\n\n> **NOTE: You must enable the `\"fancy\"` crate feature to get fancy report\n> output like in the screenshots above.** You should only do this in your\n> toplevel crate, as the fancy feature pulls in a number of dependencies that\n> libraries and such might not want.\n\n### Table of Contents <!-- omit in toc -->\n\n- [About](#about)\n- [Features](#features)\n- [Installing](#installing)\n- [Example](#example)\n- [Using](#using)\n  - [... in libraries](#-in-libraries)\n  - [... in application code](#-in-application-code)\n  - [... in `main()`](#-in-main)\n  - [... diagnostic code URLs](#-diagnostic-code-urls)\n  - [... snippets](#-snippets)\n  - [... help text](#-help-text)\n  - [... severity level](#-severity-level)\n  - [... multiple related errors](#-multiple-related-errors)\n  - [... delayed source code](#-delayed-source-code)\n  - [... handler options](#-handler-options)\n  - [... dynamic diagnostics](#-dynamic-diagnostics)\n  - [... syntax highlighting](#-syntax-highlighting)\n  - [... collection of labels](#-collection-of-labels)\n- [Acknowledgements](#acknowledgements)\n- [License](#license)\n\n### Features\n\n- Generic [`Diagnostic`] protocol, compatible (and dependent on)\n  [`std::error::Error`].\n- Unique error codes on every [`Diagnostic`].\n- Custom links to get more details on error codes.\n- Super handy derive macro for defining diagnostic metadata.\n- Replacements for [`anyhow`](https://docs.rs/anyhow)/[`eyre`](https://docs.rs/eyre)\n  types [`Result`], [`Report`] and the [`miette!`] macro for the\n  `anyhow!`/`eyre!` macros.\n- Generic support for arbitrary [`SourceCode`]s for snippet data, with\n  default support for `String`s included.\n\nThe `miette` crate also comes bundled with a default [`ReportHandler`] with\nthe following features:\n\n- Fancy graphical [diagnostic output](#about), using ANSI/Unicode text\n- single- and multi-line highlighting support\n- Screen reader/braille support, gated on [`NO_COLOR`](http://no-color.org/),\n  and other heuristics.\n- Fully customizable graphical theming (or overriding the printers\n  entirely).\n- Cause chain printing\n- Turns diagnostic codes into links in [supported terminals](https://gist.github.com/egmontkob/eb114294efbcd5adb1944c9f3cb5feda).\n\n### Installing\n\n```sh\n$ cargo add miette\n```\n\nIf you want to use the fancy printer in all these screenshots:\n\n```sh\n$ cargo add miette --features fancy\n```\n\n### Example\n\n```rust\n/*\nYou can derive a `Diagnostic` from any `std::error::Error` type.\n\n`thiserror` is a great way to define them, and plays nicely with `miette`!\n*/\nuse miette::{Diagnostic, NamedSource, SourceSpan};\nuse thiserror::Error;\n\n#[derive(Error, Debug, Diagnostic)]\n#[error(\"oops!\")]\n#[diagnostic(\n    code(oops::my::bad),\n    url(docsrs),\n    help(\"try doing it better next time?\")\n)]\nstruct MyBad {\n    // The Source that we're gonna be printing snippets out of.\n    // This can be a String if you don't have or care about file names.\n    #[source_code]\n    src: NamedSource<String>,\n    // Snippets and highlights can be included in the diagnostic!\n    #[label(\"This bit here\")]\n    bad_bit: SourceSpan,\n}\n\n/*\nNow let's define a function!\n\nUse this `Result` type (or its expanded version) as the return type\nthroughout your app (but NOT your libraries! Those should always return\nconcrete types!).\n*/\nuse miette::Result;\nfn this_fails() -> Result<()> {\n    // You can use plain strings as a `Source`, or anything that implements\n    // the one-method `Source` trait.\n    let src = \"source\\n  text\\n    here\".to_string();\n\n    Err(MyBad {\n        src: NamedSource::new(\"bad_file.rs\", src),\n        bad_bit: (9, 4).into(),\n    })?;\n\n    Ok(())\n}\n\n/*\nNow to get everything printed nicely, just return a `Result<()>`\nand you're all set!\n\nNote: You can swap out the default reporter for a custom one using\n`miette::set_hook()`\n*/\nfn pretend_this_is_main() -> Result<()> {\n    // kaboom~\n    this_fails()?;\n\n    Ok(())\n}\n```\n\nAnd this is the output you'll get if you run this program:\n\n<img src=\"https://raw.githubusercontent.com/zkat/miette/main/images/single-line-example.png\" alt=\"\nNarratable printout:\n\\\ndiagnostic error code: oops::my::bad (link)\nError: oops!\n\\\nBegin snippet for bad_file.rs starting\nat line 2, column 3\n\\\nsnippet line 1: source\n\\\nsnippet line 2:  text\n    highlight starting at line 1, column 3: This bit here\n\\\nsnippet line 3: here\n\\\ndiagnostic help: try doing it better next time?\">\n\n### Using\n\n#### ... in libraries\n\n`miette` is _fully compatible_ with library usage. Consumers who don't know\nabout, or don't want, `miette` features can safely use its error types as\nregular [`std::error::Error`].\n\nWe highly recommend using something like [`thiserror`](https://docs.rs/thiserror)\nto define unique error types and error wrappers for your library.\n\nWhile `miette` integrates smoothly with `thiserror`, it is _not required_.\nIf you don't want to use the [`Diagnostic`] derive macro, you can implement\nthe trait directly, just like with `std::error::Error`.\n\n```rust\n// lib/error.rs\nuse miette::{Diagnostic, SourceSpan};\nuse thiserror::Error;\n\n#[derive(Error, Diagnostic, Debug)]\npub enum MyLibError {\n    #[error(transparent)]\n    #[diagnostic(code(my_lib::io_error))]\n    IoError(#[from] std::io::Error),\n\n    #[error(\"Oops it blew up\")]\n    #[diagnostic(code(my_lib::bad_code))]\n    BadThingHappened,\n\n    #[error(transparent)]\n    // Use `#[diagnostic(transparent)]` to wrap another [`Diagnostic`]. You won't see labels otherwise\n    #[diagnostic(transparent)]\n    AnotherError(#[from] AnotherError),\n}\n\n#[derive(Error, Diagnostic, Debug)]\n#[error(\"another error\")]\npub struct AnotherError {\n   #[label(\"here\")]\n   pub at: SourceSpan\n}\n```\n\nThen, return this error type from all your fallible public APIs. It's a best\npractice to wrap any \"external\" error types in your error `enum` instead of\nusing something like [`Report`] in a library.\n\n#### ... in application code\n\nApplication code tends to work a little differently than libraries. You\ndon't always need or care to define dedicated error wrappers for errors\ncoming from external libraries and tools.\n\nFor this situation, `miette` includes two tools: [`Report`] and\n[`IntoDiagnostic`]. They work in tandem to make it easy to convert regular\n`std::error::Error`s into [`Diagnostic`]s. Additionally, there's a\n[`Result`] type alias that you can use to be more terse.\n\nWhen dealing with non-`Diagnostic` types, you'll want to\n`.into_diagnostic()` them:\n\n```rust\n// my_app/lib/my_internal_file.rs\nuse miette::{IntoDiagnostic, Result};\nuse semver::Version;\n\npub fn some_tool() -> Result<Version> {\n    \"1.2.x\".parse().into_diagnostic()\n}\n```\n\n`miette` also includes an `anyhow`/`eyre`-style `Context`/`WrapErr` traits\nthat you can import to add ad-hoc context messages to your `Diagnostic`s, as\nwell, though you'll still need to use `.into_diagnostic()` to make use of\nit:\n\n```rust\n// my_app/lib/my_internal_file.rs\nuse miette::{IntoDiagnostic, Result, WrapErr};\nuse semver::Version;\n\npub fn some_tool() -> Result<Version> {\n    \"1.2.x\"\n        .parse()\n        .into_diagnostic()\n        .wrap_err(\"Parsing this tool's semver version failed.\")\n}\n```\n\nTo construct your own simple adhoc error use the [`miette!`] macro:\n```rust\n// my_app/lib/my_internal_file.rs\nuse miette::{miette, Result};\nuse semver::Version;\n\npub fn some_tool() -> Result<Version> {\n    let version = \"1.2.x\";\n    version\n        .parse()\n        .map_err(|_| miette!(\"Invalid version {}\", version))\n}\n```\nThere are also similar [bail!] and [ensure!] macros.\n\n#### ... in `main()`\n\n`main()` is just like any other part of your application-internal code. Use\n`Result` as your return value, and it will pretty-print your diagnostics\nautomatically.\n\n> **NOTE:** You must enable the `\"fancy\"` crate feature to get fancy report\n> output like in the screenshots here.** You should only do this in your\n> toplevel crate, as the fancy feature pulls in a number of dependencies that\n> libraries and such might not want.\n\n```rust\nuse miette::{IntoDiagnostic, Result};\nuse semver::Version;\n\nfn pretend_this_is_main() -> Result<()> {\n    let version: Version = \"1.2.x\".parse().into_diagnostic()?;\n    println!(\"{}\", version);\n    Ok(())\n}\n```\n\nPlease note: in order to get fancy diagnostic rendering with all the pretty\ncolors and arrows, you should install `miette` with the `fancy` feature\nenabled:\n\n```toml\nmiette = { version = \"X.Y.Z\", features = [\"fancy\"] }\n```\n\nAnother way to display a diagnostic is by printing them using the debug formatter.\nThis is, in fact, what returning diagnostics from main ends up doing.\nTo do it yourself, you can write the following:\n\n```rust\nuse miette::{IntoDiagnostic, Result};\nuse semver::Version;\n\nfn just_a_random_function() {\n    let version_result: Result<Version> = \"1.2.x\".parse().into_diagnostic();\n    match version_result {\n        Err(e) => println!(\"{:?}\", e),\n        Ok(version) => println!(\"{}\", version),\n    }\n}\n```\n\n#### ... diagnostic code URLs\n\n`miette` supports providing a URL for individual diagnostics. This URL will\nbe displayed as an actual link in supported terminals, like so:\n\n<img\nsrc=\"https://raw.githubusercontent.com/zkat/miette/main/images/code_linking.png\"\nalt=\" Example showing the graphical report printer for miette\npretty-printing an error code. The code is underlined and followed by text\nsaying to 'click here'. A hover tooltip shows a full-fledged URL that can be\nCtrl+Clicked to open in a browser.\n\\\nThis feature is also available in the narratable printer. It will add a line\nafter printing the error code showing a plain URL that you can visit.\n\">\n\nTo use this, you can add a `url()` sub-param to your `#[diagnostic]`\nattribute:\n\n```rust\nuse miette::Diagnostic;\nuse thiserror::Error;\n\n#[derive(Error, Diagnostic, Debug)]\n#[error(\"kaboom\")]\n#[diagnostic(\n    code(my_app::my_error),\n    // You can do formatting!\n    url(\"https://my_website.com/error_codes#{}\", self.code().unwrap())\n)]\nstruct MyErr;\n```\n\nAdditionally, if you're developing a library and your error type is exported\nfrom your crate's top level, you can use a special `url(docsrs)` option\ninstead of manually constructing the URL. This will automatically create a\nlink to this diagnostic on `docs.rs`, so folks can just go straight to your\n(very high quality and detailed!) documentation on this diagnostic:\n\n```rust\nuse miette::Diagnostic;\nuse thiserror::Error;\n\n#[derive(Error, Diagnostic, Debug)]\n#[diagnostic(\n    code(my_app::my_error),\n    // Will link users to https://docs.rs/my_crate/0.0.0/my_crate/struct.MyErr.html\n    url(docsrs)\n)]\n#[error(\"kaboom\")]\nstruct MyErr;\n```\n\n#### ... snippets\n\nAlong with its general error handling and reporting features, `miette` also\nincludes facilities for adding error spans/annotations/labels to your\noutput. This can be very useful when an error is syntax-related, but you can\neven use it to print out sections of your own source code!\n\nTo achieve this, `miette` defines its own lightweight [`SourceSpan`] type.\nThis is a basic byte-offset and length into an associated [`SourceCode`]\nand, along with the latter, gives `miette` all the information it needs to\npretty-print some snippets! You can also use your own `Into<SourceSpan>`\ntypes as label spans.\n\nThe easiest way to define errors like this is to use the\n`derive(Diagnostic)` macro:\n\n```rust\nuse miette::{Diagnostic, SourceSpan};\nuse thiserror::Error;\n\n#[derive(Diagnostic, Debug, Error)]\n#[error(\"oops\")]\n#[diagnostic(code(my_lib::random_error))]\npub struct MyErrorType {\n    // The `Source` that miette will use.\n    #[source_code]\n    src: String,\n\n    // This will underline/mark the specific code inside the larger\n    // snippet context.\n    #[label = \"This is the highlight\"]\n    err_span: SourceSpan,\n\n    // You can add as many labels as you want.\n    // They'll be rendered sequentially.\n    #[label(\"This is bad\")]\n    snip2: (usize, usize), // `(usize, usize)` is `Into<SourceSpan>`!\n\n    // Snippets can be optional, by using Option:\n    #[label(\"some text\")]\n    snip3: Option<SourceSpan>,\n\n    // with or without label text\n    #[label]\n    snip4: Option<SourceSpan>,\n}\n```\n\n#### ... help text\n`miette` provides two facilities for supplying help text for your errors:\n\nThe first is the `#[help()]` format attribute that applies to structs or\nenum variants:\n\n```rust\nuse miette::Diagnostic;\nuse thiserror::Error;\n\n#[derive(Debug, Diagnostic, Error)]\n#[error(\"welp\")]\n#[diagnostic(help(\"try doing this instead\"))]\nstruct Foo;\n```\n\nThe other is by programmatically supplying the help text as a field to\nyour diagnostic:\n\n```rust\nuse miette::Diagnostic;\nuse thiserror::Error;\n\n#[derive(Debug, Diagnostic, Error)]\n#[error(\"welp\")]\n#[diagnostic()]\nstruct Foo {\n    #[help]\n    advice: Option<String>, // Can also just be `String`\n}\n\nlet err = Foo {\n    advice: Some(\"try doing this instead\".to_string()),\n};\n```\n\n#### ... severity level\n`miette` provides a way to set the severity level of a diagnostic.\n\n```rust\nuse miette::Diagnostic;\nuse thiserror::Error;\n\n#[derive(Debug, Diagnostic, Error)]\n#[error(\"welp\")]\n#[diagnostic(severity(Warning))]\nstruct Foo;\n```\n\n#### ... multiple related errors\n\n`miette` supports collecting multiple errors into a single diagnostic, and\nprinting them all together nicely.\n\nTo do so, use the `#[related]` tag on any `IntoIter` field in your\n`Diagnostic` type:\n\n```rust\nuse miette::Diagnostic;\nuse thiserror::Error;\n\n#[derive(Debug, Error, Diagnostic)]\n#[error(\"oops\")]\nstruct MyError {\n    #[related]\n    others: Vec<MyError>,\n}\n```\n\n#### ... delayed source code\n\nSometimes it makes sense to add source code to the error message later.\nOne option is to use [`with_source_code()`](Report::with_source_code)\nmethod for that:\n\n```rust\nuse miette::{Diagnostic, SourceSpan};\nuse thiserror::Error;\n\n#[derive(Diagnostic, Debug, Error)]\n#[error(\"oops\")]\n#[diagnostic()]\npub struct MyErrorType {\n    // Note: label but no source code\n    #[label]\n    err_span: SourceSpan,\n}\n\nfn do_something() -> miette::Result<()> {\n    // This function emits actual error with label\n    return Err(MyErrorType {\n        err_span: (7..11).into(),\n    })?;\n}\n\nfn main() -> miette::Result<()> {\n    do_something().map_err(|error| {\n        // And this code provides the source code for inner error\n        error.with_source_code(String::from(\"source code\"))\n    })\n}\n```\n\nAlso source code can be provided by a wrapper type. This is especially\nuseful in combination with `related`, when multiple errors should be\nemitted at the same time:\n\n```rust\nuse miette::{Diagnostic, Report, SourceSpan};\nuse thiserror::Error;\n\n#[derive(Diagnostic, Debug, Error)]\n#[error(\"oops\")]\n#[diagnostic()]\npub struct InnerError {\n    // Note: label but no source code\n    #[label]\n    err_span: SourceSpan,\n}\n\n#[derive(Diagnostic, Debug, Error)]\n#[error(\"oops: multiple errors\")]\n#[diagnostic()]\npub struct MultiError {\n    // Note source code by no labels\n    #[source_code]\n    source_code: String,\n    // The source code above is used for these errors\n    #[related]\n    related: Vec<InnerError>,\n}\n\nfn do_something() -> Result<(), Vec<InnerError>> {\n    Err(vec![\n        InnerError {\n            err_span: (0..6).into(),\n        },\n        InnerError {\n            err_span: (7..11).into(),\n        },\n    ])\n}\n\nfn main() -> miette::Result<()> {\n    do_something().map_err(|err_list| MultiError {\n        source_code: \"source code\".into(),\n        related: err_list,\n    })?;\n    Ok(())\n}\n```\n\n#### ... Diagnostic-based error sources.\n\nWhen one uses the `#[source]` attribute on a field, that usually comes\nfrom `thiserror`, and implements a method for\n[`std::error::Error::source`]. This works in many cases, but it's lossy:\nif the source of the diagnostic is a diagnostic itself, the source will\nsimply be treated as an `std::error::Error`.\n\nWhile this has no effect on the existing _reporters_, since they don't use\nthat information right now, APIs who might want this information will have\nno access to it.\n\nIf it's important for you for this information to be available to users,\nyou can use `#[diagnostic_source]` alongside `#[source]`. Not that you\nwill likely want to use _both_:\n\n```rust\nuse miette::Diagnostic;\nuse thiserror::Error;\n\n#[derive(Debug, Diagnostic, Error)]\n#[error(\"MyError\")]\nstruct MyError {\n    #[source]\n    #[diagnostic_source]\n    the_cause: OtherError,\n}\n\n#[derive(Debug, Diagnostic, Error)]\n#[error(\"OtherError\")]\nstruct OtherError;\n```\n\n#### ... handler options\n\n[`MietteHandler`] is the default handler, and is very customizable. In\nmost cases, you can simply use [`MietteHandlerOpts`] to tweak its behavior\ninstead of falling back to your own custom handler.\n\nUsage is like so:\n\n```rust\nmiette::set_hook(Box::new(|_| {\n    Box::new(\n        miette::MietteHandlerOpts::new()\n            .terminal_links(true)\n            .unicode(false)\n            .context_lines(3)\n            .tab_width(4)\n            .break_words(true)\n            .build(),\n    )\n}))\n\n```\n\nSee the docs for [`MietteHandlerOpts`] for more details on what you can\ncustomize!\n\n#### ... dynamic diagnostics\n\nIf you...\n- ...don't know all the possible errors upfront\n- ...need to serialize/deserialize errors\n  then you may want to use [`miette!`], [`diagnostic!`] macros or\n  [`MietteDiagnostic`] directly to create diagnostic on the fly.\n\n```rust\n\nlet source = \"2 + 2 * 2 = 8\".to_string();\nlet report = miette!(\n  labels = vec![\n      LabeledSpan::at(12..13, \"this should be 6\"),\n  ],\n  help = \"'*' has greater precedence than '+'\",\n  \"Wrong answer\"\n).with_source_code(source);\nprintln!(\"{:?}\", report)\n```\n\n#### ... syntax highlighting\n\n`miette` can be configured to highlight syntax in source code snippets.\n\n<!-- TODO: screenshot goes here once default Theme is decided -->\n\nTo use the built-in highlighting functionality, you must enable the\n`syntect-highlighter` crate feature. When this feature is enabled, `miette` will\nautomatically use the [`syntect`] crate to highlight the `#[source_code]`\nfield of your [`Diagnostic`].\n\nSyntax detection with [`syntect`] is handled by checking 2 methods on the [`SpanContents`] trait, in order:\n* [`language()`](SpanContents::language) - Provides the name of the language\n  as a string. For example `\"Rust\"` will indicate Rust syntax highlighting.\n  You can set the language of the [`SpanContents`] produced by a\n  [`NamedSource`] via the [`with_language`](NamedSource::with_language)\n  method.\n* [`name()`](SpanContents::name) - In the absence of an explicitly set\n  language, the name is assumed to contain a file name or file path.\n  The highlighter will check for a file extension at the end of the name and\n  try to guess the syntax from that.\n\nIf you want to use a custom highlighter, you can provide a custom\nimplementation of the [`Highlighter`](highlighters::Highlighter)\ntrait to [`MietteHandlerOpts`] by calling the\n[`with_syntax_highlighting`](MietteHandlerOpts::with_syntax_highlighting)\nmethod. See the [`highlighters`] module docs for more details.\n\n#### ... collection of labels\n\nWhen the number of labels is unknown, you can use a collection of `SourceSpan`\n(or any type convertible into `SourceSpan`). For this, add the `collection`\nparameter to `label` and use any type than can be iterated over for the field.\n\n```rust\n#[derive(Debug, Diagnostic, Error)]\n#[error(\"oops!\")]\nstruct MyError {\n    #[label(\"main issue\")]\n    primary_span: SourceSpan,\n\n    #[label(collection, \"related to this\")]\n    other_spans: Vec<Range<usize>>,\n}\n\nlet report: miette::Report = MyError {\n    primary_span: (6, 9).into(),\n    other_spans: vec![19..26, 30..41],\n}.into();\n\nprintln!(\"{:?}\", report.with_source_code(\"About something or another or yet another ...\".to_string()));\n```\n\nA collection can also be of `LabeledSpan` if you want to have different text\nfor different labels. Labels with no text will use the one from the `label`\nattribute\n\n```rust\n#[derive(Debug, Diagnostic, Error)]\n#[error(\"oops!\")]\nstruct MyError {\n    #[label(\"main issue\")]\n    primary_span: SourceSpan,\n\n    #[label(collection, \"related to this\")]\n    other_spans: Vec<LabeledSpan>, // LabeledSpan\n}\n\nlet report: miette::Report = MyError {\n    primary_span: (6, 9).into(),\n    other_spans: vec![\n        LabeledSpan::new(None, 19, 7), // Use default text `related to this`\n        LabeledSpan::new(Some(\"and also this\".to_string()), 30, 11), // Use specific text\n    ],\n}.into();\n\nprintln!(\"{:?}\", report.with_source_code(\"About something or another or yet another ...\".to_string()));\n```\n\n### MSRV\n\nThis crate requires rustc 1.70.0 or later.\n\n### Acknowledgements\n\n`miette` was not developed in a void. It owes enormous credit to various\nother projects and their authors:\n\n- [`anyhow`](http://crates.io/crates/anyhow) and [`color-eyre`](https://crates.io/crates/color-eyre):\n  these two enormously influential error handling libraries have pushed\n  forward the experience of application-level error handling and error\n  reporting. `miette`'s `Report` type is an attempt at a very very rough\n  version of their `Report` types.\n- [`thiserror`](https://crates.io/crates/thiserror) for setting the standard\n  for library-level error definitions, and for being the inspiration behind\n  `miette`'s derive macro.\n- `rustc` and [@estebank](https://github.com/estebank) for their\n  state-of-the-art work in compiler diagnostics.\n- [`ariadne`](https://crates.io/crates/ariadne) for pushing forward how\n  _pretty_ these diagnostics can really look!\n\n### License\n\n`miette` is released to the Rust community under the [Apache license\n2.0](./LICENSE).\n\nIt also includes code taken from [`eyre`](https://github.com/yaahc/eyre),\nand some from [`thiserror`](https://github.com/dtolnay/thiserror), also\nunder the Apache License. Some code is taken from\n[`ariadne`](https://github.com/zesterer/ariadne), which is MIT licensed.\n\n[`miette!`]: https://docs.rs/miette/latest/miette/macro.miette.html\n[`diagnostic!`]: https://docs.rs/miette/latest/miette/macro.diagnostic.html\n[`std::error::Error`]: https://doc.rust-lang.org/nightly/std/error/trait.Error.html\n[`Diagnostic`]: https://docs.rs/miette/latest/miette/trait.Diagnostic.html\n[`IntoDiagnostic`]: https://docs.rs/miette/latest/miette/trait.IntoDiagnostic.html\n[`MietteHandlerOpts`]: https://docs.rs/miette/latest/miette/struct.MietteHandlerOpts.html\n[`MietteHandler`]: https://docs.rs/miette/latest/miette/struct.MietteHandler.html\n[`MietteDiagnostic`]: https://docs.rs/miette/latest/miette/struct.MietteDiagnostic.html\n[`Report`]: https://docs.rs/miette/latest/miette/struct.Report.html\n[`ReportHandler`]: https://docs.rs/miette/latest/miette/trait.ReportHandler.html\n[`Result`]: https://docs.rs/miette/latest/miette/type.Result.html\n[`SourceCode`]: https://docs.rs/miette/latest/miette/trait.SourceCode.html\n[`SourceSpan`]: https://docs.rs/miette/latest/miette/struct.SourceSpan.html\n"
        },
        {
          "name": "README.tpl",
          "type": "blob",
          "size": 1.015625,
          "content": "\n# `{{crate}}`\n\n{{readme}}\n\n[`miette!`]: https://docs.rs/miette/latest/miette/macro.miette.html\n[`diagnostic!`]: https://docs.rs/miette/latest/miette/macro.diagnostic.html\n[`std::error::Error`]: https://doc.rust-lang.org/nightly/std/error/trait.Error.html\n[`Diagnostic`]: https://docs.rs/miette/latest/miette/trait.Diagnostic.html\n[`IntoDiagnostic`]: https://docs.rs/miette/latest/miette/trait.IntoDiagnostic.html\n[`MietteHandlerOpts`]: https://docs.rs/miette/latest/miette/struct.MietteHandlerOpts.html\n[`MietteHandler`]: https://docs.rs/miette/latest/miette/struct.MietteHandler.html\n[`MietteDiagnostic`]: https://docs.rs/miette/latest/miette/struct.MietteDiagnostic.html\n[`Report`]: https://docs.rs/miette/latest/miette/struct.Report.html\n[`ReportHandler`]: https://docs.rs/miette/latest/miette/trait.ReportHandler.html\n[`Result`]: https://docs.rs/miette/latest/miette/type.Result.html\n[`SourceCode`]: https://docs.rs/miette/latest/miette/trait.SourceCode.html\n[`SourceSpan`]: https://docs.rs/miette/latest/miette/struct.SourceSpan.html\n"
        },
        {
          "name": "cliff.toml",
          "type": "blob",
          "size": 1.853515625,
          "content": "# configuration file for git-cliff (0.1.0)\n\n[changelog]\n# changelog header\nheader = \"\"\"\n# `miette` Release Changelog\n\n\"\"\"\n\n# template for the changelog body\n# https://tera.netlify.app/docs/#introduction\nbody = \"\"\"\n{% if version %}\\\n<a name=\"{{ version }}\"></a>\n## {{ version | replace(from=\"v\", to=\"\") }} ({{ timestamp | date(format=\"%Y-%m-%d\") }})\n{% else %}\\\n## Unreleased\n{% endif %}\\\n{% for group, commits in commits | filter(attribute=\"scope\") | group_by(attribute=\"group\") %}\n### {{ group | upper_first }}\n{% for commit in commits %}\n{% if commit.scope %}\\\n* **{{ commit.scope }}:** {{ commit.message }} ([{{ commit.id | truncate(length=8, end=\"\") }}](https://github.com/zkat/miette/commit/{{ commit.id }}))\n{%- if commit.breaking %}\n    * **BREAKING CHANGE**: {{ commit.breaking_description }}\n{%- endif %}\\\n{% endif %}\\\n{% endfor %}\n{% endfor %}\n\"\"\"\n\n# remove the leading and trailing whitespace from the template\ntrim = false\n\n# changelog footer\n# footer = \"\"\"\n# <!-- generated by git-cliff -->\n# \"\"\"\n\n[git]\n# allow only conventional commits\n# https://www.conventionalcommits.org\nconventional_commits = true\n# regex for parsing and grouping commits\ncommit_parsers = [\n    { message = \"^feat*\", group = \"Features\"},\n    { message = \"^fix*\", group = \"Bug Fixes\"},\n    { message = \"^doc*\", group = \"Documentation\"},\n    { message = \"^perf*\", group = \"Performance\"},\n    { message = \"^refactor*\", group = \"Refactor\"},\n    { message = \"^style*\", group = \"Styling\"},\n    { message = \"^test*\", group = \"Testing\"},\n    { message = \"^chore\\\\(release\\\\): prepare for*\", skip = true},\n    { message = \"^chore*\", group = \"Miscellaneous Tasks\"},\n    { body = \".*security\", group = \"Security\"},\n]\n# filter out the commits that are not matched by commit parsers\nfilter_commits = true\n# glob pattern for matching git tags\n# tag_pattern = \"v?[0-9]*\"\n# regex for skipping tags\n# skip_tags = \"v0.1.0-beta.1\"\n"
        },
        {
          "name": "clippy.toml",
          "type": "blob",
          "size": 0.015625,
          "content": "msrv = \"1.70.0\"\n"
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "images",
          "type": "tree",
          "content": null
        },
        {
          "name": "miette-derive",
          "type": "tree",
          "content": null
        },
        {
          "name": "rustfmt.toml",
          "type": "blob",
          "size": 0.0166015625,
          "content": "edition = \"2021\"\n"
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}