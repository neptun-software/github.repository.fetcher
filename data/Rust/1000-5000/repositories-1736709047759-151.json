{
  "metadata": {
    "timestamp": 1736709047759,
    "page": 151,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjE2MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "denoland/rusty_v8",
      "stars": 3476,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".cargo",
          "type": "tree",
          "content": null
        },
        {
          "name": ".clang-format",
          "type": "blob",
          "size": 0.0205078125,
          "content": "BasedOnStyle: google\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.1591796875,
          "content": "**/*.rs.bk\n**/*.orig\n\n.envrc\n\n/.vscode/\n/.idea/\n/target/\n/.cipd/\n\nthird_party/android_ndk\nthird_party/android_platform\nthird_party/catapult\nthird_party/llvm-build\n"
        },
        {
          "name": ".gitmodules",
          "type": "blob",
          "size": 1.6640625,
          "content": "[submodule \"v8\"]\n\tpath = v8\n\turl = https://github.com/denoland/v8.git\n[submodule \"build\"]\n\tpath = build\n\turl = https://github.com/denoland/chromium_build.git\n[submodule \"tools/clang\"]\n\tpath = tools/clang\n\turl = https://chromium.googlesource.com/chromium/src/tools/clang.git\n[submodule \"third_party/jinja2\"]\n\tpath = third_party/jinja2\n\turl = https://chromium.googlesource.com/chromium/src/third_party/jinja2.git\n[submodule \"third_party/markupsafe\"]\n\tpath = third_party/markupsafe\n\turl = https://chromium.googlesource.com/chromium/src/third_party/markupsafe.git\n[submodule \"buildtools\"]\n\tpath = buildtools\n\turl = https://chromium.googlesource.com/chromium/src/buildtools.git\n[submodule \"third_party/icu\"]\n\tpath = third_party/icu\n\turl = https://chromium.googlesource.com/chromium/deps/icu.git\n[submodule \"third_party/abseil-cpp\"]\n\tpath = third_party/abseil-cpp\n\turl = https://chromium.googlesource.com/chromium/src/third_party/abseil-cpp.git\n[submodule \"third_party/fp16/src\"]\n\tpath = third_party/fp16/src\n\turl = https://github.com/Maratyszcza/FP16.git\n[submodule \"third_party/libc++/src\"]\n\tpath = third_party/libc++/src\n\turl = https://chromium.googlesource.com/external/github.com/llvm/llvm-project/libcxx.git\n[submodule \"third_party/libc++abi/src\"]\n\tpath = third_party/libc++abi/src\n\turl = https://chromium.googlesource.com/external/github.com/llvm/llvm-project/libcxxabi.git\n[submodule \"third_party/libunwind/src\"]\n\tpath = third_party/libunwind/src\n\turl = https://chromium.googlesource.com/external/github.com/llvm/llvm-project/libunwind.git\n[submodule \"third_party/fast_float/src\"]\n\tpath = third_party/fast_float/src\n\turl = https://chromium.googlesource.com/external/github.com/fastfloat/fast_float.git\n"
        },
        {
          "name": ".gn",
          "type": "blob",
          "size": 3.552734375,
          "content": "# This file is used by the GN meta build system to find the root of the source\n# tree and to set startup options. For documentation on the values set in this\n# file, run \"gn help dotfile\" at the command line.\n\n# The location of the build configuration file.\nbuildconfig = \"//build/config/BUILDCONFIG.gn\"\n\n# These are the targets to check headers for by default. The files in targets\n# matching these patterns (see \"gn help label_pattern\" for format) will have\n# their includes checked for proper dependencies when you run either\n# \"gn check\" or \"gn gen --check\".\ncheck_targets = []\n\n# The secondary source root is a parallel directory tree where\n# GN build files are placed when they can not be placed directly\n# in the source tree, e.g. for third party source trees.\nsecondary_source = \"//v8/\"\n\ndefault_args = {\n  clang_use_chrome_plugins = false\n  is_component_build = false\n  linux_use_bundled_binutils = false\n  use_dummy_lastchange = true\n  use_sysroot = false\n  simple_template_names = false\n\n  # Minimize size of debuginfo in distributed static library.\n  line_tables_only = true\n  no_inline_line_tables = true\n  symbol_level = 1\n  use_debug_fission = false\n\n  v8_embedder_string = \"-rusty\"\n\n  v8_enable_sandbox = false\n  v8_enable_javascript_promise_hooks = true\n  v8_promise_internal_field_count = 1\n  v8_use_external_startup_data = false\n  v8_use_snapshot = true\n\n  v8_enable_pointer_compression = false\n\n  v8_imminent_deprecation_warnings = false\n\n  # This flag speeds up the performance of fork/execve on Linux systems for\n  # embedders which use it (like Node.js). It works by marking the pages that\n  # V8 allocates as MADV_DONTFORK. Without MADV_DONTFORK, the Linux kernel\n  # spends a long time manipulating page mappings on fork and exec which the\n  # child process doesn't generally need to access.\n  v8_enable_private_mapping_fork_optimization = true\n\n  # We prefer embedders to bring their own compression\n  v8_use_zlib = false\n  v8_enable_snapshot_compression = false\n\n  # Disable handle zapping for performance\n  v8_enable_handle_zapping = false\n  # Ensure allocation of typed arrays and arraybuffers always goes through\n  # the embedder's ArrayBufferAllocator, otherwise small buffers get moved\n  # around by the garbage collector but embedders normally want them to have\n  # fixed addresses.\n  v8_typed_array_max_size_in_heap = 0\n\n  # Historically these always had 2 slots. Keep for compat.\n  v8_array_buffer_internal_field_count = 2\n  v8_array_buffer_view_internal_field_count = 2\n\n  # Enabling the shared read-only heap comes with a restriction that all\n  # isolates running at the same time must be created from the same snapshot.\n  # This is problematic for Deno, which has separate \"runtime\" and \"typescript\n  # compiler\" snapshots, and sometimes uses them both at the same time.\n  v8_enable_shared_ro_heap = false\n\n  # V8 11.6 hardcoded an assumption in `mksnapshot` that shared RO heap\n  # is enabled. In our case it's disabled so without this flag we can't\n  # compile.\n  v8_enable_verify_heap = false\n\n  # Enable V8 object print for debugging.\n  # v8_enable_object_print = true\n\n  # V8 12.3 added google/fuzztest as a third party dependency.\n  # https://chromium.googlesource.com/v8/v8.git/+/d5acece0c9b89b18716c177d1fcc8f734191e1e2%5E%21/#F4\n  #\n  # This flag disables it.\n  v8_enable_fuzztest = false\n\n  # Disable v8::HandleScope LIFO checks.\n  # https://chromium-review.googlesource.com/c/v8/v8/+/5110566\n  #\n  # rusty_v8 scopes are not on the stack.\n  v8_enable_v8_checks = false\n\n  use_relative_vtables_abi = false\n\n  v8_depend_on_icu_data_file = false\n  icu_copy_icudata_to_root_build_dir = false\n}\n"
        },
        {
          "name": ".prettierrc.json",
          "type": "blob",
          "size": 0.02734375,
          "content": "{\n  \"proseWrap\": \"always\"\n}\n"
        },
        {
          "name": ".rustfmt.toml",
          "type": "blob",
          "size": 0.1015625,
          "content": "# Copyright 2018-2019 the Deno authors. All rights reserved. MIT license.\nmax_width = 80\ntab_spaces = 2\n"
        },
        {
          "name": "BUILD.gn",
          "type": "blob",
          "size": 1.1015625,
          "content": "# Copyright 2018-2019 the Deno authors. All rights reserved. MIT license.\nimport(\"//build/config/host_byteorder.gni\")\n\nstatic_library(\"rusty_v8\") {\n  complete_static_lib = true\n  sources = [ \"src/binding.cc\" ]\n  deps = [\n    \"//build/config:shared_library_deps\",\n    \"//v8:v8\",\n    \"//v8:v8_libbase\",\n    \"//v8:v8_libplatform\",\n  ]\n  configs -= [\n    \"//build/config/compiler:default_init_stack_vars\",\n    \"//build/config/compiler:thin_archive\",\n  ]\n  configs += [ \":rusty_v8_config\" ]\n}\n\nconfig(\"rusty_v8_config\") {\n  configs = [\n    \"//v8:external_config\",\n    \"//v8:toolchain\",\n    \"//v8:features\",\n  ]\n  cflags = []\n  if (is_win) {\n    # The `/Zl` (\"omit default library name\") flag makes the compiler produce\n    # object files that can link with both the static and dynamic CRT.\n    cflags += [ \"/Zl\" ]\n  }\n\n  # We need these directories in the search path to be able to include some\n  # internal V8 headers.\n  include_dirs = [\n    \"v8\",\n    \"$target_gen_dir/v8\",\n  ]\n\n  if (is_debug) {\n    defines = [ \"DEBUG\" ]\n  }\n\n  if (is_clang) {\n    cflags += [\n      \"-fcolor-diagnostics\",\n      \"-fansi-escape-codes\",\n    ]\n  }\n}\n"
        },
        {
          "name": "Cargo.lock",
          "type": "blob",
          "size": 50.0185546875,
          "content": "# This file is automatically @generated by Cargo.\n# It is not intended for manual editing.\nversion = 3\n\n[[package]]\nname = \"adler\"\nversion = \"1.0.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f26201604c87b1e01bd3d98f8d5d9a8fcbb815e8cedb41ffccbeb4bf593a35fe\"\n\n[[package]]\nname = \"ahash\"\nversion = \"0.8.11\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e89da841a80418a9b391ebaea17f5c112ffaaa96f621d2c285b5174da76b9011\"\ndependencies = [\n \"cfg-if 1.0.0\",\n \"once_cell\",\n \"version_check\",\n \"zerocopy\",\n]\n\n[[package]]\nname = \"aho-corasick\"\nversion = \"1.1.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8e60d3430d3a69478ad0993f19238d2df97c507009a52b3c10addcd7f6bcb916\"\ndependencies = [\n \"memchr\",\n]\n\n[[package]]\nname = \"align-data\"\nversion = \"0.1.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1926655ba000b19e21f0402be09a1d52d318c8a8a68622870bfb7af2a71315cd\"\n\n[[package]]\nname = \"allocator-api2\"\nversion = \"0.2.18\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"5c6cb57a04249c6480766f7f7cef5467412af1490f8d1e243141daddada3264f\"\n\n[[package]]\nname = \"android_log-sys\"\nversion = \"0.2.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"85965b6739a430150bdd138e2374a98af0c3ee0d030b3bb7fc3bddff58d0102e\"\n\n[[package]]\nname = \"android_logger\"\nversion = \"0.10.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d9ed09b18365ed295d722d0b5ed59c01b79a826ff2d2a8f73d5ecca8e6fb2f66\"\ndependencies = [\n \"android_log-sys\",\n \"env_logger\",\n \"lazy_static\",\n \"log\",\n]\n\n[[package]]\nname = \"arrayvec\"\nversion = \"0.7.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"96d30a06541fbafbc7f82ed10c06164cfbd2c401138f6addd8404629c4b16711\"\n\n[[package]]\nname = \"ash\"\nversion = \"0.33.3+1.2.191\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"cc4f1d82f164f838ae413296d1131aa6fa79b917d25bebaa7033d25620c09219\"\ndependencies = [\n \"libloading 0.7.4\",\n]\n\n[[package]]\nname = \"autocfg\"\nversion = \"1.2.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f1fdabc7756949593fe60f30ec81974b613357de856987752631dea1e3394c80\"\n\n[[package]]\nname = \"bindgen\"\nversion = \"0.70.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f49d8fed880d473ea71efb9bf597651e77201bdd4893efe54c9e5d65ae04ce6f\"\ndependencies = [\n \"bitflags 2.5.0\",\n \"cexpr\",\n \"clang-sys\",\n \"itertools\",\n \"log\",\n \"prettyplease\",\n \"proc-macro2\",\n \"quote\",\n \"regex\",\n \"rustc-hash\",\n \"shlex\",\n \"syn 2.0.60\",\n]\n\n[[package]]\nname = \"bit-set\"\nversion = \"0.5.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"0700ddab506f33b20a03b13996eccd309a48e5ff77d0d95926aa0210fb4e95f1\"\ndependencies = [\n \"bit-vec\",\n]\n\n[[package]]\nname = \"bit-vec\"\nversion = \"0.6.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"349f9b6a179ed607305526ca489b34ad0a41aed5f7980fa90eb03160b69598fb\"\n\n[[package]]\nname = \"bitflags\"\nversion = \"1.3.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"bef38d45163c2f1dde094a7dfd33ccf595c92905c8f8f4fdc18d06fb1037718a\"\n\n[[package]]\nname = \"bitflags\"\nversion = \"2.5.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"cf4b9d6a944f767f8e5e0db018570623c85f3d925ac718db4e06d0187adb21c1\"\n\n[[package]]\nname = \"block\"\nversion = \"0.1.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"0d8c1fef690941d3e7788d328517591fecc684c084084702d6ff1641e993699a\"\n\n[[package]]\nname = \"bumpalo\"\nversion = \"3.16.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"79296716171880943b8470b5f8d03aa55eb2e645a4874bdbb28adb49162e012c\"\n\n[[package]]\nname = \"bytemuck\"\nversion = \"1.15.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"5d6d68c57235a3a081186990eca2867354726650f42f7516ca50c28d6281fd15\"\n\n[[package]]\nname = \"byteorder\"\nversion = \"1.5.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1fd0f2584146f6f2ef48085050886acf353beff7305ebd1ae69500e27c67f64b\"\n\n[[package]]\nname = \"bytes\"\nversion = \"1.6.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"514de17de45fdb8dc022b1a7975556c53c86f9f0aa5f534b98977b171857c2c9\"\n\n[[package]]\nname = \"calloop\"\nversion = \"0.9.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"bf2eec61efe56aa1e813f5126959296933cf0700030e4314786c48779a66ab82\"\ndependencies = [\n \"log\",\n \"nix 0.22.3\",\n]\n\n[[package]]\nname = \"cc\"\nversion = \"1.0.95\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d32a725bc159af97c3e629873bb9f88fb8cf8a4867175f76dc987815ea07c83b\"\n\n[[package]]\nname = \"cexpr\"\nversion = \"0.6.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"6fac387a98bb7c37292057cffc56d62ecb629900026402633ae9160df93a8766\"\ndependencies = [\n \"nom\",\n]\n\n[[package]]\nname = \"cfg-if\"\nversion = \"0.1.10\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"4785bdd1c96b2a846b2bd7cc02e86b6b3dbf14e7e53446c4f54c92a361040822\"\n\n[[package]]\nname = \"cfg-if\"\nversion = \"1.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"baf1de4339761588bc0619e3cbc0120ee582ebb74b53b4efbf79117bd2da40fd\"\n\n[[package]]\nname = \"cfg_aliases\"\nversion = \"0.1.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"fd16c4719339c4530435d38e511904438d07cce7950afa3718a84ac36c10e89e\"\n\n[[package]]\nname = \"clang-sys\"\nversion = \"1.8.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"0b023947811758c97c59bf9d1c188fd619ad4718dcaa767947df1cadb14f39f4\"\ndependencies = [\n \"glob\",\n \"libc\",\n \"libloading 0.8.3\",\n]\n\n[[package]]\nname = \"cocoa\"\nversion = \"0.24.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f425db7937052c684daec3bd6375c8abe2d146dca4b8b143d6db777c39138f3a\"\ndependencies = [\n \"bitflags 1.3.2\",\n \"block\",\n \"cocoa-foundation\",\n \"core-foundation 0.9.4\",\n \"core-graphics 0.22.3\",\n \"foreign-types\",\n \"libc\",\n \"objc\",\n]\n\n[[package]]\nname = \"cocoa-foundation\"\nversion = \"0.1.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8c6234cbb2e4c785b456c0644748b1ac416dd045799740356f8363dfe00c93f7\"\ndependencies = [\n \"bitflags 1.3.2\",\n \"block\",\n \"core-foundation 0.9.4\",\n \"core-graphics-types\",\n \"libc\",\n \"objc\",\n]\n\n[[package]]\nname = \"codespan-reporting\"\nversion = \"0.11.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3538270d33cc669650c4b093848450d380def10c331d38c768e34cac80576e6e\"\ndependencies = [\n \"termcolor\",\n \"unicode-width\",\n]\n\n[[package]]\nname = \"copyless\"\nversion = \"0.1.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a2df960f5d869b2dd8532793fde43eb5427cceb126c929747a26823ab0eeb536\"\n\n[[package]]\nname = \"core-foundation\"\nversion = \"0.7.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"57d24c7a13c43e870e37c1556b74555437870a04514f7685f5b354e090567171\"\ndependencies = [\n \"core-foundation-sys 0.7.0\",\n \"libc\",\n]\n\n[[package]]\nname = \"core-foundation\"\nversion = \"0.9.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"91e195e091a93c46f7102ec7818a2aa394e1e1771c3ab4825963fa03e45afb8f\"\ndependencies = [\n \"core-foundation-sys 0.8.6\",\n \"libc\",\n]\n\n[[package]]\nname = \"core-foundation-sys\"\nversion = \"0.7.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b3a71ab494c0b5b860bdc8407ae08978052417070c2ced38573a9157ad75b8ac\"\n\n[[package]]\nname = \"core-foundation-sys\"\nversion = \"0.8.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"06ea2b9bc92be3c2baa9334a323ebca2d6f074ff852cd1d7b11064035cd3868f\"\n\n[[package]]\nname = \"core-graphics\"\nversion = \"0.19.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b3889374e6ea6ab25dba90bb5d96202f61108058361f6dc72e8b03e6f8bbe923\"\ndependencies = [\n \"bitflags 1.3.2\",\n \"core-foundation 0.7.0\",\n \"foreign-types\",\n \"libc\",\n]\n\n[[package]]\nname = \"core-graphics\"\nversion = \"0.22.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"2581bbab3b8ffc6fcbd550bf46c355135d16e9ff2a6ea032ad6b9bf1d7efe4fb\"\ndependencies = [\n \"bitflags 1.3.2\",\n \"core-foundation 0.9.4\",\n \"core-graphics-types\",\n \"foreign-types\",\n \"libc\",\n]\n\n[[package]]\nname = \"core-graphics-types\"\nversion = \"0.1.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"45390e6114f68f718cc7a830514a96f903cccd70d02a8f6d9f643ac4ba45afaf\"\ndependencies = [\n \"bitflags 1.3.2\",\n \"core-foundation 0.9.4\",\n \"libc\",\n]\n\n[[package]]\nname = \"core-video-sys\"\nversion = \"0.1.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"34ecad23610ad9757664d644e369246edde1803fcb43ed72876565098a5d3828\"\ndependencies = [\n \"cfg-if 0.1.10\",\n \"core-foundation-sys 0.7.0\",\n \"core-graphics 0.19.2\",\n \"libc\",\n \"objc\",\n]\n\n[[package]]\nname = \"crc32fast\"\nversion = \"1.4.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b3855a8a784b474f333699ef2bbca9db2c4a1f6d9088a90a2d25b1eb53111eaa\"\ndependencies = [\n \"cfg-if 1.0.0\",\n]\n\n[[package]]\nname = \"cty\"\nversion = \"0.2.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b365fabc795046672053e29c954733ec3b05e4be654ab130fe8f1f94d7051f35\"\n\n[[package]]\nname = \"d3d12\"\nversion = \"0.4.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"2daefd788d1e96e0a9d66dee4b828b883509bc3ea9ce30665f04c3246372690c\"\ndependencies = [\n \"bitflags 1.3.2\",\n \"libloading 0.7.4\",\n \"winapi\",\n]\n\n[[package]]\nname = \"darling\"\nversion = \"0.13.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a01d95850c592940db9b8194bc39f4bc0e89dee5c4265e4b1807c34a9aba453c\"\ndependencies = [\n \"darling_core\",\n \"darling_macro\",\n]\n\n[[package]]\nname = \"darling_core\"\nversion = \"0.13.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"859d65a907b6852c9361e3185c862aae7fafd2887876799fa55f5f99dc40d610\"\ndependencies = [\n \"fnv\",\n \"ident_case\",\n \"proc-macro2\",\n \"quote\",\n \"strsim\",\n \"syn 1.0.109\",\n]\n\n[[package]]\nname = \"darling_macro\"\nversion = \"0.13.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"9c972679f83bdf9c42bd905396b6c3588a843a17f0f16dfcfa3e2c5d57441835\"\ndependencies = [\n \"darling_core\",\n \"quote\",\n \"syn 1.0.109\",\n]\n\n[[package]]\nname = \"dispatch\"\nversion = \"0.2.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"bd0c93bb4b0c6d9b77f4435b0ae98c24d17f1c45b2ff844c6151a07256ca923b\"\n\n[[package]]\nname = \"dlib\"\nversion = \"0.5.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"330c60081dcc4c72131f8eb70510f1ac07223e5d4163db481a04a0befcffa412\"\ndependencies = [\n \"libloading 0.7.4\",\n]\n\n[[package]]\nname = \"downcast-rs\"\nversion = \"1.2.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"75b325c5dbd37f80359721ad39aca5a29fb04c89279657cffdda8736d0c0b9d2\"\n\n[[package]]\nname = \"either\"\nversion = \"1.11.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a47c1c47d2f5964e29c61246e81db715514cd532db6b5116a25ea3c03d6780a2\"\n\n[[package]]\nname = \"env_logger\"\nversion = \"0.8.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a19187fea3ac7e84da7dacf48de0c45d63c6a76f9490dae389aead16c243fce3\"\ndependencies = [\n \"log\",\n \"regex\",\n]\n\n[[package]]\nname = \"equivalent\"\nversion = \"1.0.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"5443807d6dff69373d433ab9ef5378ad8df50ca6298caf15de6e52e24aaf54d5\"\n\n[[package]]\nname = \"errno\"\nversion = \"0.3.8\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a258e46cdc063eb8519c00b9fc845fc47bcfca4130e2f08e88665ceda8474245\"\ndependencies = [\n \"libc\",\n \"windows-sys 0.52.0\",\n]\n\n[[package]]\nname = \"fnv\"\nversion = \"1.0.7\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3f9eec918d3f24069decb9af1554cad7c880e2da24a9afd88aca000531ab82c1\"\n\n[[package]]\nname = \"foreign-types\"\nversion = \"0.3.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f6f339eb8adc052cd2ca78910fda869aefa38d22d5cb648e6485e4d3fc06f3b1\"\ndependencies = [\n \"foreign-types-shared\",\n]\n\n[[package]]\nname = \"foreign-types-shared\"\nversion = \"0.1.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"00b0228411908ca8685dba7fc2cdd70ec9990a6e753e89b6ac91a84c40fbaf4b\"\n\n[[package]]\nname = \"fractal\"\nversion = \"0.0.0\"\ndependencies = [\n \"ndk 0.3.0\",\n \"ndk-glue\",\n \"pixels\",\n \"v8\",\n \"winit\",\n]\n\n[[package]]\nname = \"fslock\"\nversion = \"0.2.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"04412b8935272e3a9bae6f48c7bfff74c2911f60525404edfdd28e49884c3bfb\"\ndependencies = [\n \"libc\",\n \"winapi\",\n]\n\n[[package]]\nname = \"fxhash\"\nversion = \"0.2.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"c31b6d751ae2c7f11320402d34e41349dd1016f8d5d45e48c4312bc8625af50c\"\ndependencies = [\n \"byteorder\",\n]\n\n[[package]]\nname = \"glob\"\nversion = \"0.3.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d2fabcfbdc87f4758337ca535fb41a6d701b65693ce38287d856d1674551ec9b\"\n\n[[package]]\nname = \"glow\"\nversion = \"0.11.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d8bd5877156a19b8ac83a29b2306fe20537429d318f3ff0a1a2119f8d9c61919\"\ndependencies = [\n \"js-sys\",\n \"slotmap\",\n \"wasm-bindgen\",\n \"web-sys\",\n]\n\n[[package]]\nname = \"gpu-alloc\"\nversion = \"0.5.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"22beaafc29b38204457ea030f6fb7a84c9e4dd1b86e311ba0542533453d87f62\"\ndependencies = [\n \"bitflags 1.3.2\",\n \"gpu-alloc-types\",\n]\n\n[[package]]\nname = \"gpu-alloc-types\"\nversion = \"0.2.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"54804d0d6bc9d7f26db4eaec1ad10def69b599315f487d32c334a80d1efe67a5\"\ndependencies = [\n \"bitflags 1.3.2\",\n]\n\n[[package]]\nname = \"gpu-descriptor\"\nversion = \"0.2.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"cc11df1ace8e7e564511f53af41f3e42ddc95b56fd07b3f4445d2a6048bc682c\"\ndependencies = [\n \"bitflags 2.5.0\",\n \"gpu-descriptor-types\",\n \"hashbrown 0.14.3\",\n]\n\n[[package]]\nname = \"gpu-descriptor-types\"\nversion = \"0.1.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"6bf0b36e6f090b7e1d8a4b49c0cb81c1f8376f72198c65dd3ad9ff3556b8b78c\"\ndependencies = [\n \"bitflags 2.5.0\",\n]\n\n[[package]]\nname = \"gzip-header\"\nversion = \"1.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"95cc527b92e6029a62960ad99aa8a6660faa4555fe5f731aab13aa6a921795a2\"\ndependencies = [\n \"crc32fast\",\n]\n\n[[package]]\nname = \"hashbrown\"\nversion = \"0.12.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8a9ee70c43aaf417c914396645a0fa852624801b24ebb7ae78fe8272889ac888\"\n\n[[package]]\nname = \"hashbrown\"\nversion = \"0.14.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"290f1a1d9242c78d09ce40a5e87e7554ee637af1351968159f4952f028f75604\"\ndependencies = [\n \"ahash\",\n \"allocator-api2\",\n]\n\n[[package]]\nname = \"hexf-parse\"\nversion = \"0.2.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"dfa686283ad6dd069f105e5ab091b04c62850d3e4cf5d67debad1933f55023df\"\n\n[[package]]\nname = \"home\"\nversion = \"0.5.9\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e3d1354bf6b7235cb4a0576c2619fd4ed18183f689b12b006a0ee7329eeff9a5\"\ndependencies = [\n \"windows-sys 0.52.0\",\n]\n\n[[package]]\nname = \"ident_case\"\nversion = \"1.0.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b9e0384b61958566e926dc50660321d12159025e767c18e043daf26b70104c39\"\n\n[[package]]\nname = \"indexmap\"\nversion = \"1.9.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"bd070e393353796e801d209ad339e89596eb4c8d430d18ede6a1cced8fafbd99\"\ndependencies = [\n \"autocfg\",\n \"hashbrown 0.12.3\",\n]\n\n[[package]]\nname = \"indexmap\"\nversion = \"2.2.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"168fb715dda47215e360912c096649d23d58bf392ac62f73919e831745e40f26\"\ndependencies = [\n \"equivalent\",\n \"hashbrown 0.14.3\",\n]\n\n[[package]]\nname = \"inplace_it\"\nversion = \"0.3.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e567468c50f3d4bc7397702e09b380139f9b9288b4e909b070571007f8b5bf78\"\n\n[[package]]\nname = \"instant\"\nversion = \"0.1.12\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"7a5bbe824c507c5da5956355e86a746d82e0e1464f65d862cc5e71da70e94b2c\"\ndependencies = [\n \"cfg-if 1.0.0\",\n \"js-sys\",\n \"wasm-bindgen\",\n \"web-sys\",\n]\n\n[[package]]\nname = \"itertools\"\nversion = \"0.12.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ba291022dbbd398a455acf126c1e341954079855bc60dfdda641363bd6922569\"\ndependencies = [\n \"either\",\n]\n\n[[package]]\nname = \"itoa\"\nversion = \"1.0.11\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"49f1f14873335454500d59611f1cf4a4b0f786f9ac11f4312a78e4cf2566695b\"\n\n[[package]]\nname = \"jni-sys\"\nversion = \"0.3.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8eaf4bc02d17cbdd7ff4c7438cafcdf7fb9a4613313ad11b4f8fefe7d3fa0130\"\n\n[[package]]\nname = \"js-sys\"\nversion = \"0.3.69\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"29c15563dc2726973df627357ce0c9ddddbea194836909d655df6a75d2cf296d\"\ndependencies = [\n \"wasm-bindgen\",\n]\n\n[[package]]\nname = \"khronos-egl\"\nversion = \"4.1.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8c2352bd1d0bceb871cb9d40f24360c8133c11d7486b68b5381c1dd1a32015e3\"\ndependencies = [\n \"libc\",\n \"libloading 0.7.4\",\n]\n\n[[package]]\nname = \"lazy_static\"\nversion = \"1.4.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e2abad23fbc42b3700f2f279844dc832adb2b2eb069b2df918f455c4e18cc646\"\n\n[[package]]\nname = \"libc\"\nversion = \"0.2.153\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"9c198f91728a82281a64e1f4f9eeb25d82cb32a5de251c6bd1b5154d63a8e7bd\"\n\n[[package]]\nname = \"libloading\"\nversion = \"0.7.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b67380fd3b2fbe7527a606e18729d21c6f3951633d0500574c4dc22d2d638b9f\"\ndependencies = [\n \"cfg-if 1.0.0\",\n \"winapi\",\n]\n\n[[package]]\nname = \"libloading\"\nversion = \"0.8.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"0c2a198fb6b0eada2a8df47933734e6d35d350665a33a3593d7164fa52c75c19\"\ndependencies = [\n \"cfg-if 1.0.0\",\n \"windows-targets 0.48.5\",\n]\n\n[[package]]\nname = \"linux-raw-sys\"\nversion = \"0.4.13\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"01cda141df6706de531b6c46c3a33ecca755538219bd484262fa09410c13539c\"\n\n[[package]]\nname = \"lock_api\"\nversion = \"0.4.11\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3c168f8615b12bc01f9c17e2eb0cc07dcae1940121185446edc3744920e8ef45\"\ndependencies = [\n \"autocfg\",\n \"scopeguard\",\n]\n\n[[package]]\nname = \"log\"\nversion = \"0.4.21\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"90ed8c1e510134f979dbc4f070f87d4313098b704861a105fe34231c70a3901c\"\n\n[[package]]\nname = \"malloc_buf\"\nversion = \"0.0.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"62bb907fe88d54d8d9ce32a3cceab4218ed2f6b7d35617cafe9adf84e43919cb\"\ndependencies = [\n \"libc\",\n]\n\n[[package]]\nname = \"memchr\"\nversion = \"2.7.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"6c8640c5d730cb13ebd907d8d04b52f55ac9a2eec55b440c8892f40d56c76c1d\"\n\n[[package]]\nname = \"memmap2\"\nversion = \"0.3.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"00b6c2ebff6180198788f5db08d7ce3bc1d0b617176678831a7510825973e357\"\ndependencies = [\n \"libc\",\n]\n\n[[package]]\nname = \"memoffset\"\nversion = \"0.6.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"5aa361d4faea93603064a027415f07bd8e1d5c88c9fbf68bf56a285428fd79ce\"\ndependencies = [\n \"autocfg\",\n]\n\n[[package]]\nname = \"metal\"\nversion = \"0.23.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e0514f491f4cc03632ab399ee01e2c1c1b12d3e1cf2d667c1ff5f87d6dcd2084\"\ndependencies = [\n \"bitflags 1.3.2\",\n \"block\",\n \"core-graphics-types\",\n \"foreign-types\",\n \"log\",\n \"objc\",\n]\n\n[[package]]\nname = \"minimal-lexical\"\nversion = \"0.2.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"68354c5c6bd36d73ff3feceb05efa59b6acb7626617f4962be322a825e61f79a\"\n\n[[package]]\nname = \"miniz_oxide\"\nversion = \"0.7.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"87dfd01fe195c66b572b37921ad8803d010623c0aca821bea2302239d155cdae\"\ndependencies = [\n \"adler\",\n]\n\n[[package]]\nname = \"mio\"\nversion = \"0.8.11\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a4a650543ca06a924e8b371db273b2756685faae30f8487da1b56505a8f78b0c\"\ndependencies = [\n \"libc\",\n \"log\",\n \"wasi\",\n \"windows-sys 0.48.0\",\n]\n\n[[package]]\nname = \"naga\"\nversion = \"0.7.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"806f448a7ce662ca79ef5484ef8f451a9b7c51b8166c95f5a667228b3825a6ca\"\ndependencies = [\n \"bit-set\",\n \"bitflags 1.3.2\",\n \"codespan-reporting\",\n \"fxhash\",\n \"hexf-parse\",\n \"indexmap 1.9.3\",\n \"log\",\n \"num-traits\",\n \"spirv\",\n \"thiserror\",\n]\n\n[[package]]\nname = \"ndk\"\nversion = \"0.3.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8794322172319b972f528bf90c6b467be0079f1fa82780ffb431088e741a73ab\"\ndependencies = [\n \"jni-sys\",\n \"ndk-sys\",\n \"num_enum\",\n \"thiserror\",\n]\n\n[[package]]\nname = \"ndk\"\nversion = \"0.5.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"96d868f654c72e75f8687572699cdabe755f03effbb62542768e995d5b8d699d\"\ndependencies = [\n \"bitflags 1.3.2\",\n \"jni-sys\",\n \"ndk-sys\",\n \"num_enum\",\n \"thiserror\",\n]\n\n[[package]]\nname = \"ndk-context\"\nversion = \"0.1.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"27b02d87554356db9e9a873add8782d4ea6e3e58ea071a9adb9a2e8ddb884a8b\"\n\n[[package]]\nname = \"ndk-glue\"\nversion = \"0.5.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"c71bee8ea72d685477e28bd004cfe1bf99c754d688cd78cad139eae4089484d4\"\ndependencies = [\n \"android_logger\",\n \"lazy_static\",\n \"libc\",\n \"log\",\n \"ndk 0.5.0\",\n \"ndk-context\",\n \"ndk-macro\",\n \"ndk-sys\",\n]\n\n[[package]]\nname = \"ndk-macro\"\nversion = \"0.3.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"0df7ac00c4672f9d5aece54ee3347520b7e20f158656c7db2e6de01902eb7a6c\"\ndependencies = [\n \"darling\",\n \"proc-macro-crate\",\n \"proc-macro2\",\n \"quote\",\n \"syn 1.0.109\",\n]\n\n[[package]]\nname = \"ndk-sys\"\nversion = \"0.2.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e1bcdd74c20ad5d95aacd60ef9ba40fdf77f767051040541df557b7a9b2a2121\"\n\n[[package]]\nname = \"nix\"\nversion = \"0.22.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e4916f159ed8e5de0082076562152a76b7a1f64a01fd9d1e0fea002c37624faf\"\ndependencies = [\n \"bitflags 1.3.2\",\n \"cc\",\n \"cfg-if 1.0.0\",\n \"libc\",\n \"memoffset\",\n]\n\n[[package]]\nname = \"nix\"\nversion = \"0.24.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"fa52e972a9a719cecb6864fb88568781eb706bac2cd1d4f04a648542dbf78069\"\ndependencies = [\n \"bitflags 1.3.2\",\n \"cfg-if 1.0.0\",\n \"libc\",\n \"memoffset\",\n]\n\n[[package]]\nname = \"nom\"\nversion = \"7.1.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d273983c5a657a70a3e8f2a01329822f3b8c8172b73826411a55751e404a0a4a\"\ndependencies = [\n \"memchr\",\n \"minimal-lexical\",\n]\n\n[[package]]\nname = \"num-traits\"\nversion = \"0.2.18\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"da0df0e5185db44f69b44f26786fe401b6c293d1907744beaa7fa62b2e5a517a\"\ndependencies = [\n \"autocfg\",\n]\n\n[[package]]\nname = \"num_enum\"\nversion = \"0.5.11\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1f646caf906c20226733ed5b1374287eb97e3c2a5c227ce668c1f2ce20ae57c9\"\ndependencies = [\n \"num_enum_derive\",\n]\n\n[[package]]\nname = \"num_enum_derive\"\nversion = \"0.5.11\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"dcbff9bc912032c62bf65ef1d5aea88983b420f4f839db1e9b0c281a25c9c799\"\ndependencies = [\n \"proc-macro-crate\",\n \"proc-macro2\",\n \"quote\",\n \"syn 1.0.109\",\n]\n\n[[package]]\nname = \"objc\"\nversion = \"0.2.7\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"915b1b472bc21c53464d6c8461c9d3af805ba1ef837e1cac254428f4a77177b1\"\ndependencies = [\n \"malloc_buf\",\n \"objc_exception\",\n]\n\n[[package]]\nname = \"objc_exception\"\nversion = \"0.1.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ad970fb455818ad6cba4c122ad012fae53ae8b4795f86378bce65e4f6bab2ca4\"\ndependencies = [\n \"cc\",\n]\n\n[[package]]\nname = \"once_cell\"\nversion = \"1.19.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3fdb12b2476b595f9358c5161aa467c2438859caa136dec86c26fdd2efe17b92\"\n\n[[package]]\nname = \"parking_lot\"\nversion = \"0.11.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"7d17b78036a60663b797adeaee46f5c9dfebb86948d1255007a1d6be0271ff99\"\ndependencies = [\n \"instant\",\n \"lock_api\",\n \"parking_lot_core\",\n]\n\n[[package]]\nname = \"parking_lot_core\"\nversion = \"0.8.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"60a2cfe6f0ad2bfc16aefa463b497d5c7a5ecd44a23efa72aa342d90177356dc\"\ndependencies = [\n \"cfg-if 1.0.0\",\n \"instant\",\n \"libc\",\n \"redox_syscall\",\n \"smallvec\",\n \"winapi\",\n]\n\n[[package]]\nname = \"paste\"\nversion = \"1.0.15\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"57c0d7b74b563b49d38dae00a0c37d4d6de9b432382b2892f0574ddcae73fd0a\"\n\n[[package]]\nname = \"percent-encoding\"\nversion = \"2.3.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e3148f5046208a5d56bcfc03053e3ca6334e51da8dfb19b6cdc8b306fae3283e\"\n\n[[package]]\nname = \"pixels\"\nversion = \"0.8.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"0b64b547ca2cfd27fb550a98f9ede4a4058d947bc9ac3d708894c891cff6a429\"\ndependencies = [\n \"bytemuck\",\n \"pollster\",\n \"raw-window-handle 0.3.4\",\n \"thiserror\",\n \"ultraviolet\",\n \"wgpu\",\n]\n\n[[package]]\nname = \"pkg-config\"\nversion = \"0.3.30\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d231b230927b5e4ad203db57bbcbee2802f6bce620b1e4a9024a07d94e2907ec\"\n\n[[package]]\nname = \"pollster\"\nversion = \"0.2.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"5da3b0203fd7ee5720aa0b5e790b591aa5d3f41c3ed2c34a3a393382198af2f7\"\n\n[[package]]\nname = \"prettyplease\"\nversion = \"0.2.20\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"5f12335488a2f3b0a83b14edad48dca9879ce89b2edd10e80237e4e852dd645e\"\ndependencies = [\n \"proc-macro2\",\n \"syn 2.0.60\",\n]\n\n[[package]]\nname = \"proc-macro-crate\"\nversion = \"1.3.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"7f4c021e1093a56626774e81216a4ce732a735e5bad4868a03f3ed65ca0c3919\"\ndependencies = [\n \"once_cell\",\n \"toml_edit 0.19.15\",\n]\n\n[[package]]\nname = \"proc-macro2\"\nversion = \"1.0.81\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3d1597b0c024618f09a9c3b8655b7e430397a36d23fdafec26d6965e9eec3eba\"\ndependencies = [\n \"unicode-ident\",\n]\n\n[[package]]\nname = \"profiling\"\nversion = \"1.0.15\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"43d84d1d7a6ac92673717f9f6d1518374ef257669c24ebc5ac25d5033828be58\"\n\n[[package]]\nname = \"quote\"\nversion = \"1.0.36\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"0fa76aaf39101c457836aec0ce2316dbdc3ab723cdda1c6bd4e6ad4208acaca7\"\ndependencies = [\n \"proc-macro2\",\n]\n\n[[package]]\nname = \"range-alloc\"\nversion = \"0.1.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"9c8a99fddc9f0ba0a85884b8d14e3592853e787d581ca1816c91349b10e4eeab\"\n\n[[package]]\nname = \"raw-window-handle\"\nversion = \"0.3.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e28f55143d0548dad60bb4fbdc835a3d7ac6acc3324506450c5fdd6e42903a76\"\ndependencies = [\n \"libc\",\n \"raw-window-handle 0.4.3\",\n]\n\n[[package]]\nname = \"raw-window-handle\"\nversion = \"0.4.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b800beb9b6e7d2df1fe337c9e3d04e3af22a124460fb4c30fcc22c9117cefb41\"\ndependencies = [\n \"cty\",\n]\n\n[[package]]\nname = \"redox_syscall\"\nversion = \"0.2.16\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"fb5a58c1855b4b6819d59012155603f0b22ad30cad752600aadfcb695265519a\"\ndependencies = [\n \"bitflags 1.3.2\",\n]\n\n[[package]]\nname = \"regex\"\nversion = \"1.10.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"c117dbdfde9c8308975b6a18d71f3f385c89461f7b3fb054288ecf2a2058ba4c\"\ndependencies = [\n \"aho-corasick\",\n \"memchr\",\n \"regex-automata\",\n \"regex-syntax\",\n]\n\n[[package]]\nname = \"regex-automata\"\nversion = \"0.4.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"86b83b8b9847f9bf95ef68afb0b8e6cdb80f498442f5179a29fad448fcc1eaea\"\ndependencies = [\n \"aho-corasick\",\n \"memchr\",\n \"regex-syntax\",\n]\n\n[[package]]\nname = \"regex-syntax\"\nversion = \"0.8.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"adad44e29e4c806119491a7f06f03de4d1af22c3a680dd47f1e6e179439d1f56\"\n\n[[package]]\nname = \"renderdoc-sys\"\nversion = \"0.7.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f1382d1f0a252c4bf97dc20d979a2fdd05b024acd7c2ed0f7595d7817666a157\"\n\n[[package]]\nname = \"rustc-hash\"\nversion = \"1.1.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"08d43f7aa6b08d49f382cde6a7982047c3426db949b1424bc4b7ec9ae12c6ce2\"\n\n[[package]]\nname = \"rustix\"\nversion = \"0.38.33\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e3cc72858054fcff6d7dea32df2aeaee6a7c24227366d7ea429aada2f26b16ad\"\ndependencies = [\n \"bitflags 2.5.0\",\n \"errno\",\n \"libc\",\n \"linux-raw-sys\",\n \"windows-sys 0.52.0\",\n]\n\n[[package]]\nname = \"rustversion\"\nversion = \"1.0.15\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"80af6f9131f277a45a3fba6ce8e2258037bb0477a67e610d3c1fe046ab31de47\"\n\n[[package]]\nname = \"ryu\"\nversion = \"1.0.17\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e86697c916019a8588c99b5fac3cead74ec0b4b819707a682fd4d23fa0ce1ba1\"\n\n[[package]]\nname = \"safe_arch\"\nversion = \"0.5.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"c1ff3d6d9696af502cc3110dacce942840fb06ff4514cad92236ecc455f2ce05\"\ndependencies = [\n \"bytemuck\",\n]\n\n[[package]]\nname = \"scoped-tls\"\nversion = \"1.0.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e1cf6437eb19a8f4a6cc0f7dca544973b0b78843adbfeb3683d1a94a0024a294\"\n\n[[package]]\nname = \"scopeguard\"\nversion = \"1.2.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"94143f37725109f92c262ed2cf5e59bce7498c01bcc1502d7b9afe439a4e9f49\"\n\n[[package]]\nname = \"serde\"\nversion = \"1.0.198\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"9846a40c979031340571da2545a4e5b7c4163bdae79b301d5f86d03979451fcc\"\ndependencies = [\n \"serde_derive\",\n]\n\n[[package]]\nname = \"serde_derive\"\nversion = \"1.0.198\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e88edab869b01783ba905e7d0153f9fc1a6505a96e4ad3018011eedb838566d9\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.60\",\n]\n\n[[package]]\nname = \"serde_json\"\nversion = \"1.0.116\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3e17db7126d17feb94eb3fad46bf1a96b034e8aacbc2e775fe81505f8b0b2813\"\ndependencies = [\n \"itoa\",\n \"ryu\",\n \"serde\",\n]\n\n[[package]]\nname = \"serde_spanned\"\nversion = \"0.6.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"eb3622f419d1296904700073ea6cc23ad690adbd66f13ea683df73298736f0c1\"\ndependencies = [\n \"serde\",\n]\n\n[[package]]\nname = \"shlex\"\nversion = \"1.3.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"0fda2ff0d084019ba4d7c6f371c95d8fd75ce3524c3cb8fb653a3023f6323e64\"\n\n[[package]]\nname = \"slotmap\"\nversion = \"1.0.7\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"dbff4acf519f630b3a3ddcfaea6c06b42174d9a44bc70c620e9ed1649d58b82a\"\ndependencies = [\n \"version_check\",\n]\n\n[[package]]\nname = \"smallvec\"\nversion = \"1.13.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3c5e1a9a646d36c3599cd173a41282daf47c44583ad367b8e6837255952e5c67\"\n\n[[package]]\nname = \"smithay-client-toolkit\"\nversion = \"0.15.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8a28f16a97fa0e8ce563b2774d1e732dd5d4025d2772c5dba0a41a0f90a29da3\"\ndependencies = [\n \"bitflags 1.3.2\",\n \"calloop\",\n \"dlib\",\n \"lazy_static\",\n \"log\",\n \"memmap2\",\n \"nix 0.22.3\",\n \"pkg-config\",\n \"wayland-client\",\n \"wayland-cursor\",\n \"wayland-protocols\",\n]\n\n[[package]]\nname = \"spirv\"\nversion = \"0.2.0+1.5.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"246bfa38fe3db3f1dfc8ca5a2cdeb7348c78be2112740cc0ec8ef18b6d94f830\"\ndependencies = [\n \"bitflags 1.3.2\",\n \"num-traits\",\n]\n\n[[package]]\nname = \"strsim\"\nversion = \"0.10.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"73473c0e59e6d5812c5dfe2a064a6444949f089e20eec9a2e5506596494e4623\"\n\n[[package]]\nname = \"syn\"\nversion = \"1.0.109\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"72b64191b275b66ffe2469e8af2c1cfe3bafa67b529ead792a6d0160888b4237\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"unicode-ident\",\n]\n\n[[package]]\nname = \"syn\"\nversion = \"2.0.60\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"909518bc7b1c9b779f1bbf07f2929d35af9f0f37e47c6e9ef7f9dddc1e1821f3\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"unicode-ident\",\n]\n\n[[package]]\nname = \"termcolor\"\nversion = \"1.4.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"06794f8f6c5c898b3275aebefa6b8a1cb24cd2c6c79397ab15774837a0bc5755\"\ndependencies = [\n \"winapi-util\",\n]\n\n[[package]]\nname = \"thiserror\"\nversion = \"1.0.59\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f0126ad08bff79f29fc3ae6a55cc72352056dfff61e3ff8bb7129476d44b23aa\"\ndependencies = [\n \"thiserror-impl\",\n]\n\n[[package]]\nname = \"thiserror-impl\"\nversion = \"1.0.59\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d1cd413b5d558b4c5bf3680e324a6fa5014e7b7c067a51e69dbdf47eb7148b66\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.60\",\n]\n\n[[package]]\nname = \"toml\"\nversion = \"0.8.12\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e9dd1545e8208b4a5af1aa9bbd0b4cf7e9ea08fabc5d0a5c67fcaafa17433aa3\"\ndependencies = [\n \"serde\",\n \"serde_spanned\",\n \"toml_datetime\",\n \"toml_edit 0.22.12\",\n]\n\n[[package]]\nname = \"toml_datetime\"\nversion = \"0.6.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3550f4e9685620ac18a50ed434eb3aec30db8ba93b0287467bca5826ea25baf1\"\ndependencies = [\n \"serde\",\n]\n\n[[package]]\nname = \"toml_edit\"\nversion = \"0.19.15\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1b5bb770da30e5cbfde35a2d7b9b8a2c4b8ef89548a7a6aeab5c9a576e3e7421\"\ndependencies = [\n \"indexmap 2.2.6\",\n \"toml_datetime\",\n \"winnow 0.5.40\",\n]\n\n[[package]]\nname = \"toml_edit\"\nversion = \"0.22.12\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d3328d4f68a705b2a4498da1d580585d39a6510f98318a2cec3018a7ec61ddef\"\ndependencies = [\n \"indexmap 2.2.6\",\n \"serde\",\n \"serde_spanned\",\n \"toml_datetime\",\n \"winnow 0.6.6\",\n]\n\n[[package]]\nname = \"trybuild\"\nversion = \"1.0.96\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"33a5f13f11071020bb12de7a16b925d2d58636175c20c11dc5f96cb64bb6c9b3\"\ndependencies = [\n \"glob\",\n \"serde\",\n \"serde_derive\",\n \"serde_json\",\n \"termcolor\",\n \"toml\",\n]\n\n[[package]]\nname = \"ultraviolet\"\nversion = \"0.8.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"16b9e3507eba17043af05c8a72fce3ec2c24b58945f45732e71dbc6646d904a7\"\ndependencies = [\n \"wide\",\n]\n\n[[package]]\nname = \"unicode-ident\"\nversion = \"1.0.12\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3354b9ac3fae1ff6755cb6db53683adb661634f67557942dea4facebec0fee4b\"\n\n[[package]]\nname = \"unicode-width\"\nversion = \"0.1.11\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e51733f11c9c4f72aa0c160008246859e340b00807569a0da0e7a1079b27ba85\"\n\n[[package]]\nname = \"v8\"\nversion = \"130.0.7\"\ndependencies = [\n \"align-data\",\n \"bindgen\",\n \"bitflags 2.5.0\",\n \"bytes\",\n \"fslock\",\n \"gzip-header\",\n \"home\",\n \"miniz_oxide\",\n \"once_cell\",\n \"paste\",\n \"rustversion\",\n \"trybuild\",\n \"which\",\n]\n\n[[package]]\nname = \"version_check\"\nversion = \"0.9.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"49874b5167b65d7193b8aba1567f5c7d93d001cafc34600cee003eda787e483f\"\n\n[[package]]\nname = \"wasi\"\nversion = \"0.11.0+wasi-snapshot-preview1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"9c8d87e72b64a3b4db28d11ce29237c246188f4f51057d65a7eab63b7987e423\"\n\n[[package]]\nname = \"wasm-bindgen\"\nversion = \"0.2.92\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"4be2531df63900aeb2bca0daaaddec08491ee64ceecbee5076636a3b026795a8\"\ndependencies = [\n \"cfg-if 1.0.0\",\n \"wasm-bindgen-macro\",\n]\n\n[[package]]\nname = \"wasm-bindgen-backend\"\nversion = \"0.2.92\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"614d787b966d3989fa7bb98a654e369c762374fd3213d212cfc0251257e747da\"\ndependencies = [\n \"bumpalo\",\n \"log\",\n \"once_cell\",\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.60\",\n \"wasm-bindgen-shared\",\n]\n\n[[package]]\nname = \"wasm-bindgen-futures\"\nversion = \"0.4.42\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"76bc14366121efc8dbb487ab05bcc9d346b3b5ec0eaa76e46594cabbe51762c0\"\ndependencies = [\n \"cfg-if 1.0.0\",\n \"js-sys\",\n \"wasm-bindgen\",\n \"web-sys\",\n]\n\n[[package]]\nname = \"wasm-bindgen-macro\"\nversion = \"0.2.92\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a1f8823de937b71b9460c0c34e25f3da88250760bec0ebac694b49997550d726\"\ndependencies = [\n \"quote\",\n \"wasm-bindgen-macro-support\",\n]\n\n[[package]]\nname = \"wasm-bindgen-macro-support\"\nversion = \"0.2.92\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e94f17b526d0a461a191c78ea52bbce64071ed5c04c9ffe424dcb38f74171bb7\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.60\",\n \"wasm-bindgen-backend\",\n \"wasm-bindgen-shared\",\n]\n\n[[package]]\nname = \"wasm-bindgen-shared\"\nversion = \"0.2.92\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"af190c94f2773fdb3729c55b007a722abb5384da03bc0986df4c289bf5567e96\"\n\n[[package]]\nname = \"wayland-client\"\nversion = \"0.29.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3f3b068c05a039c9f755f881dc50f01732214f5685e379829759088967c46715\"\ndependencies = [\n \"bitflags 1.3.2\",\n \"downcast-rs\",\n \"libc\",\n \"nix 0.24.3\",\n \"scoped-tls\",\n \"wayland-commons\",\n \"wayland-scanner\",\n \"wayland-sys\",\n]\n\n[[package]]\nname = \"wayland-commons\"\nversion = \"0.29.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8691f134d584a33a6606d9d717b95c4fa20065605f798a3f350d78dced02a902\"\ndependencies = [\n \"nix 0.24.3\",\n \"once_cell\",\n \"smallvec\",\n \"wayland-sys\",\n]\n\n[[package]]\nname = \"wayland-cursor\"\nversion = \"0.29.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"6865c6b66f13d6257bef1cd40cbfe8ef2f150fb8ebbdb1e8e873455931377661\"\ndependencies = [\n \"nix 0.24.3\",\n \"wayland-client\",\n \"xcursor\",\n]\n\n[[package]]\nname = \"wayland-protocols\"\nversion = \"0.29.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b950621f9354b322ee817a23474e479b34be96c2e909c14f7bc0100e9a970bc6\"\ndependencies = [\n \"bitflags 1.3.2\",\n \"wayland-client\",\n \"wayland-commons\",\n \"wayland-scanner\",\n]\n\n[[package]]\nname = \"wayland-scanner\"\nversion = \"0.29.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8f4303d8fa22ab852f789e75a967f0a2cdc430a607751c0499bada3e451cbd53\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"xml-rs\",\n]\n\n[[package]]\nname = \"wayland-sys\"\nversion = \"0.29.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"be12ce1a3c39ec7dba25594b97b42cb3195d54953ddb9d3d95a7c3902bc6e9d4\"\ndependencies = [\n \"dlib\",\n \"lazy_static\",\n \"pkg-config\",\n]\n\n[[package]]\nname = \"web-sys\"\nversion = \"0.3.57\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"7b17e741662c70c8bd24ac5c5b18de314a2c26c32bf8346ee1e6f53de919c283\"\ndependencies = [\n \"js-sys\",\n \"wasm-bindgen\",\n]\n\n[[package]]\nname = \"wgpu\"\nversion = \"0.11.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"eae7181fe6ba5f4b632a9079cc9e922a64555156c87def72c063f94b180c7d68\"\ndependencies = [\n \"arrayvec\",\n \"js-sys\",\n \"log\",\n \"parking_lot\",\n \"raw-window-handle 0.3.4\",\n \"smallvec\",\n \"wasm-bindgen\",\n \"wasm-bindgen-futures\",\n \"web-sys\",\n \"wgpu-core\",\n \"wgpu-hal\",\n \"wgpu-types\",\n]\n\n[[package]]\nname = \"wgpu-core\"\nversion = \"0.11.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"35600627b6c718ad0e23ed75fb6140bfe32cdf21c8f539ce3c9ab8180e2cb38e\"\ndependencies = [\n \"arrayvec\",\n \"bitflags 1.3.2\",\n \"cfg_aliases\",\n \"copyless\",\n \"fxhash\",\n \"log\",\n \"naga\",\n \"parking_lot\",\n \"profiling\",\n \"raw-window-handle 0.3.4\",\n \"smallvec\",\n \"thiserror\",\n \"wgpu-hal\",\n \"wgpu-types\",\n]\n\n[[package]]\nname = \"wgpu-hal\"\nversion = \"0.11.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"af28b29ef0b44cd22dd9895d4349b9d5a687df42f58da234871198637eabe328\"\ndependencies = [\n \"arrayvec\",\n \"ash\",\n \"bit-set\",\n \"bitflags 1.3.2\",\n \"block\",\n \"core-graphics-types\",\n \"d3d12\",\n \"foreign-types\",\n \"fxhash\",\n \"glow\",\n \"gpu-alloc\",\n \"gpu-descriptor\",\n \"inplace_it\",\n \"js-sys\",\n \"khronos-egl\",\n \"libloading 0.7.4\",\n \"log\",\n \"metal\",\n \"naga\",\n \"objc\",\n \"parking_lot\",\n \"profiling\",\n \"range-alloc\",\n \"raw-window-handle 0.3.4\",\n \"renderdoc-sys\",\n \"thiserror\",\n \"wasm-bindgen\",\n \"web-sys\",\n \"wgpu-types\",\n \"winapi\",\n]\n\n[[package]]\nname = \"wgpu-types\"\nversion = \"0.11.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e15e44ba88ec415466e18e91881319e7c9e96cb905dc623305168aea65b85ccc\"\ndependencies = [\n \"bitflags 1.3.2\",\n]\n\n[[package]]\nname = \"which\"\nversion = \"6.0.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8211e4f58a2b2805adfbefbc07bab82958fc91e3836339b1ab7ae32465dce0d7\"\ndependencies = [\n \"either\",\n \"home\",\n \"rustix\",\n \"winsafe\",\n]\n\n[[package]]\nname = \"wide\"\nversion = \"0.6.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"46bbe7c604a27ca0b05c5503221e76da628225b568e6f1280b42dbad3b72d89b\"\ndependencies = [\n \"bytemuck\",\n \"safe_arch\",\n]\n\n[[package]]\nname = \"winapi\"\nversion = \"0.3.9\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"5c839a674fcd7a98952e593242ea400abe93992746761e38641405d28b00f419\"\ndependencies = [\n \"winapi-i686-pc-windows-gnu\",\n \"winapi-x86_64-pc-windows-gnu\",\n]\n\n[[package]]\nname = \"winapi-i686-pc-windows-gnu\"\nversion = \"0.4.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ac3b87c63620426dd9b991e5ce0329eff545bccbbb34f3be09ff6fb6ab51b7b6\"\n\n[[package]]\nname = \"winapi-util\"\nversion = \"0.1.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f29e6f9198ba0d26b4c9f07dbe6f9ed633e1f3d5b8b414090084349e46a52596\"\ndependencies = [\n \"winapi\",\n]\n\n[[package]]\nname = \"winapi-x86_64-pc-windows-gnu\"\nversion = \"0.4.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"712e227841d057c1ee1cd2fb22fa7e5a5461ae8e48fa2ca79ec42cfc1931183f\"\n\n[[package]]\nname = \"windows-sys\"\nversion = \"0.48.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"677d2418bec65e3338edb076e806bc1ec15693c5d0104683f2efe857f61056a9\"\ndependencies = [\n \"windows-targets 0.48.5\",\n]\n\n[[package]]\nname = \"windows-sys\"\nversion = \"0.52.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"282be5f36a8ce781fad8c8ae18fa3f9beff57ec1b52cb3de0789201425d9a33d\"\ndependencies = [\n \"windows-targets 0.52.5\",\n]\n\n[[package]]\nname = \"windows-targets\"\nversion = \"0.48.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"9a2fa6e2155d7247be68c096456083145c183cbbbc2764150dda45a87197940c\"\ndependencies = [\n \"windows_aarch64_gnullvm 0.48.5\",\n \"windows_aarch64_msvc 0.48.5\",\n \"windows_i686_gnu 0.48.5\",\n \"windows_i686_msvc 0.48.5\",\n \"windows_x86_64_gnu 0.48.5\",\n \"windows_x86_64_gnullvm 0.48.5\",\n \"windows_x86_64_msvc 0.48.5\",\n]\n\n[[package]]\nname = \"windows-targets\"\nversion = \"0.52.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"6f0713a46559409d202e70e28227288446bf7841d3211583a4b53e3f6d96e7eb\"\ndependencies = [\n \"windows_aarch64_gnullvm 0.52.5\",\n \"windows_aarch64_msvc 0.52.5\",\n \"windows_i686_gnu 0.52.5\",\n \"windows_i686_gnullvm\",\n \"windows_i686_msvc 0.52.5\",\n \"windows_x86_64_gnu 0.52.5\",\n \"windows_x86_64_gnullvm 0.52.5\",\n \"windows_x86_64_msvc 0.52.5\",\n]\n\n[[package]]\nname = \"windows_aarch64_gnullvm\"\nversion = \"0.48.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"2b38e32f0abccf9987a4e3079dfb67dcd799fb61361e53e2882c3cbaf0d905d8\"\n\n[[package]]\nname = \"windows_aarch64_gnullvm\"\nversion = \"0.52.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"7088eed71e8b8dda258ecc8bac5fb1153c5cffaf2578fc8ff5d61e23578d3263\"\n\n[[package]]\nname = \"windows_aarch64_msvc\"\nversion = \"0.48.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"dc35310971f3b2dbbf3f0690a219f40e2d9afcf64f9ab7cc1be722937c26b4bc\"\n\n[[package]]\nname = \"windows_aarch64_msvc\"\nversion = \"0.52.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"9985fd1504e250c615ca5f281c3f7a6da76213ebd5ccc9561496568a2752afb6\"\n\n[[package]]\nname = \"windows_i686_gnu\"\nversion = \"0.48.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a75915e7def60c94dcef72200b9a8e58e5091744960da64ec734a6c6e9b3743e\"\n\n[[package]]\nname = \"windows_i686_gnu\"\nversion = \"0.52.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"88ba073cf16d5372720ec942a8ccbf61626074c6d4dd2e745299726ce8b89670\"\n\n[[package]]\nname = \"windows_i686_gnullvm\"\nversion = \"0.52.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"87f4261229030a858f36b459e748ae97545d6f1ec60e5e0d6a3d32e0dc232ee9\"\n\n[[package]]\nname = \"windows_i686_msvc\"\nversion = \"0.48.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8f55c233f70c4b27f66c523580f78f1004e8b5a8b659e05a4eb49d4166cca406\"\n\n[[package]]\nname = \"windows_i686_msvc\"\nversion = \"0.52.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"db3c2bf3d13d5b658be73463284eaf12830ac9a26a90c717b7f771dfe97487bf\"\n\n[[package]]\nname = \"windows_x86_64_gnu\"\nversion = \"0.48.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"53d40abd2583d23e4718fddf1ebec84dbff8381c07cae67ff7768bbf19c6718e\"\n\n[[package]]\nname = \"windows_x86_64_gnu\"\nversion = \"0.52.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"4e4246f76bdeff09eb48875a0fd3e2af6aada79d409d33011886d3e1581517d9\"\n\n[[package]]\nname = \"windows_x86_64_gnullvm\"\nversion = \"0.48.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"0b7b52767868a23d5bab768e390dc5f5c55825b6d30b86c844ff2dc7414044cc\"\n\n[[package]]\nname = \"windows_x86_64_gnullvm\"\nversion = \"0.52.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"852298e482cd67c356ddd9570386e2862b5673c85bd5f88df9ab6802b334c596\"\n\n[[package]]\nname = \"windows_x86_64_msvc\"\nversion = \"0.48.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ed94fce61571a4006852b7389a063ab983c02eb1bb37b47f8272ce92d06d9538\"\n\n[[package]]\nname = \"windows_x86_64_msvc\"\nversion = \"0.52.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"bec47e5bfd1bff0eeaf6d8b485cc1074891a197ab4225d504cb7a1ab88b02bf0\"\n\n[[package]]\nname = \"winit\"\nversion = \"0.26.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"9b43cc931d58b99461188607efd7acb2a093e65fc621f54cad78517a6063e73a\"\ndependencies = [\n \"bitflags 1.3.2\",\n \"cocoa\",\n \"core-foundation 0.9.4\",\n \"core-graphics 0.22.3\",\n \"core-video-sys\",\n \"dispatch\",\n \"instant\",\n \"lazy_static\",\n \"libc\",\n \"log\",\n \"mio\",\n \"ndk 0.5.0\",\n \"ndk-glue\",\n \"ndk-sys\",\n \"objc\",\n \"parking_lot\",\n \"percent-encoding\",\n \"raw-window-handle 0.4.3\",\n \"smithay-client-toolkit\",\n \"wasm-bindgen\",\n \"wayland-client\",\n \"wayland-protocols\",\n \"web-sys\",\n \"winapi\",\n \"x11-dl\",\n]\n\n[[package]]\nname = \"winnow\"\nversion = \"0.5.40\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f593a95398737aeed53e489c785df13f3618e41dbcd6718c6addbf1395aa6876\"\ndependencies = [\n \"memchr\",\n]\n\n[[package]]\nname = \"winnow\"\nversion = \"0.6.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f0c976aaaa0e1f90dbb21e9587cdaf1d9679a1cde8875c0d6bd83ab96a208352\"\ndependencies = [\n \"memchr\",\n]\n\n[[package]]\nname = \"winsafe\"\nversion = \"0.0.19\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d135d17ab770252ad95e9a872d365cf3090e3be864a34ab46f48555993efc904\"\n\n[[package]]\nname = \"x11-dl\"\nversion = \"2.21.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"38735924fedd5314a6e548792904ed8c6de6636285cb9fec04d5b1db85c1516f\"\ndependencies = [\n \"libc\",\n \"once_cell\",\n \"pkg-config\",\n]\n\n[[package]]\nname = \"xcursor\"\nversion = \"0.3.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"6a0ccd7b4a5345edfcd0c3535718a4e9ff7798ffc536bb5b5a0e26ff84732911\"\n\n[[package]]\nname = \"xml-rs\"\nversion = \"0.8.20\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"791978798f0597cfc70478424c2b4fdc2b7a8024aaff78497ef00f24ef674193\"\n\n[[package]]\nname = \"zerocopy\"\nversion = \"0.7.32\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"74d4d3961e53fa4c9a25a8637fc2bfaf2595b3d3ae34875568a5cf64787716be\"\ndependencies = [\n \"zerocopy-derive\",\n]\n\n[[package]]\nname = \"zerocopy-derive\"\nversion = \"0.7.32\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"9ce1b18ccd8e73a9321186f97e46f9f04b778851177567b1975109d26a08d2a6\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.60\",\n]\n"
        },
        {
          "name": "Cargo.toml",
          "type": "blob",
          "size": 2.8544921875,
          "content": "[package]\nname = \"v8\"\nversion = \"130.0.7\"\ndescription = \"Rust bindings to V8\"\nreadme = \"README.md\"\nauthors = [\"the Deno authors\"]\nlicense = \"MIT\"\nedition = \"2021\"\nrepository = \"https://github.com/denoland/rusty_v8\"\nexclude = [\n  # To keep the package under the 10mb limit imposed by crates.io we exclude\n  # a lot of files that are not needed for the build.\n  \"*.css\",\n  \"*.gyp\",\n  \"*.gypi\",\n  \"*.html\",\n  \"*.m4\",\n  \"*.md\",\n  \"*.settings\",\n  \"*.txt\",\n  \"*OWNERS*\",\n  \".*\",\n  \"AUTHORS\",\n  \"Doxyfile*\",\n  \"LICENSE*\",\n  \"Makefile*\",\n  \"README*\",\n  \"build/android/\",\n  \"build/chromeos/\",\n  \"build/fuchsia/\",\n  \"buildtools/checkdeps/\",\n  \"buildtools/clang_format/\",\n  \"third_party/libc++/src/benchmarks/\",\n  \"third_party/libc++/src/docs/\",\n  \"third_party/libc++/src/lib/\",\n  \"third_party/libc++/src/test/\",\n  \"third_party/libc++/src/utils/\",\n  \"third_party/libc++/src/www/\",\n  \"third_party/libc++abi/src/test/\",\n  \"third_party/icu/android/\",\n  \"third_party/icu/android_small/\",\n  \"third_party/icu/cast/\",\n  \"third_party/icu/chromeos/\",\n  \"third_party/icu/common/icudtl.dat\",\n  \"third_party/icu/common/icudtb.dat\",\n  \"third_party/icu/flutter/\",\n  \"third_party/icu/ios/\",\n  \"third_party/icu/patches/\",\n  \"third_party/icu/source/config/\",\n  \"third_party/icu/source/data/\",\n  \"third_party/icu/source/extra/\",\n  \"third_party/icu/source/io/\",\n  \"third_party/icu/source/python/\",\n  \"third_party/icu/source/samples/\",\n  \"third_party/icu/source/test/\",\n  \"third_party/icu/source/tools/\",\n  \"third_party/icu/tzres/\",\n  \"third_party/abseil-cpp/*.def\",\n  \"tools/clang\",\n  \"v8/ChangeLog\",\n  \"v8/benchmarks/\",\n  \"v8/docs/\",\n  \"v8/samples/\",\n  \"v8/test/\",\n  \"v8/tools/\",\n  # These files are required for the build.\n  \"!.gn\",\n  \"!BUILD.gn\",\n  \"!tools/clang/scripts/update.py\",\n  \"!v8/test/torque/test-torque.tq\",\n  \"!v8/tools/gen-postmortem-metadata.py\",\n  \"!v8/tools/gen-v8-gn.py\",\n  \"!v8/tools/js2c.py\",\n  \"!v8/tools/run.py\",\n  \"!v8/tools/snapshot/asm_to_inline_asm.py\",\n  \"!v8/tools/testrunner/utils/dump_build_config.py\",\n]\n\n[profile.dev]\n# rusty_v8 may miscompile at opt-level=0.\n# https://github.com/rust-lang/rust/issues/87215\n# https://github.com/rust-lang/rust/issues/75839\n# https://github.com/rust-lang/rust/issues/121028\nopt-level = 1\n\n[features]\ndefault = [\"use_custom_libcxx\"]\nuse_custom_libcxx = []\n\n[dependencies]\nbitflags = \"2.5\"\nonce_cell = \"1.19\"\npaste = \"1.0\"\n\n[build-dependencies]\nminiz_oxide = \"0.7.2\"\ngzip-header = \"1.0.0\"\nfslock = \"0.2\"\nwhich = \"6\"\nhome = \"0\"\nbindgen = \"0.70\"\n\n[dev-dependencies]\nminiz_oxide = \"0.7.3\"\ngzip-header = \"1.0.0\"\nbytes = \"1\"\nalign-data = \"0.1.0\"\nfslock = \"0.2\"\ntrybuild = \"1.0.96\"\nwhich = \"6\"\nhome = \"0\"\nrustversion = \"1\"\nbindgen = \"0.70\"\n\n[[example]]\nname = \"hello_world\"\n\n[[example]]\nname = \"shell\"\n\n[[example]]\nname = \"process\"\n\n[[test]]\nname = \"build\"\npath = \"build.rs\"\n\n[[bench]]\nname = \"function\"\npath = \"benches/function.rs\"\nharness = false\n\n[workspace]\nmembers = [\"examples/android\"]\n"
        },
        {
          "name": "Cross.toml",
          "type": "blob",
          "size": 0.6826171875,
          "content": "[build.env]\npassthrough = [\n    \"V8_FROM_SOURCE\",\n    \"SCCACHE_ERROR_LOG\",\n    \"SCCACHE_LOG\",\n    \"SCCACHE_DIR\",\n    \"SCCACHE_IDLE_TIMEOUT\"\n]\n\n[target.aarch64-linux-android]\nimage = \"cross-rusty_v8:aarch64-linux-android\"\n\n[target.aarch64-linux-android.env]\npassthrough = [\n    \"CARGO_TARGET_AARCH64_LINUX_ANDROID_LINKER=./third_party/android_ndk/toolchains/llvm/prebuilt/linux-x86_64/bin/aarch64-linux-android24-clang++\"\n]\n\n[target.x86_64-linux-android]\nimage = \"cross-rusty_v8:x86_64-linux-android\"\n\n[target.x86_64-linux-android.env]\npassthrough = [\n    \"CARGO_TARGET_X86_64_LINUX_ANDROID_LINKER=./third_party/android_ndk/toolchains/llvm/prebuilt/linux-x86_64/bin/x86_64-linux-android24-clang++\"\n]\n"
        },
        {
          "name": "Dockerfile",
          "type": "blob",
          "size": 0.9521484375,
          "content": "ARG CROSS_BASE_IMAGE\nFROM $CROSS_BASE_IMAGE\n\nRUN apt update && \\\n    apt install -y curl && \\\n    curl -L https://github.com/mozilla/sccache/releases/download/v0.7.7/sccache-v0.7.7-x86_64-unknown-linux-musl.tar.gz | tar xzf -\n\nENV TZ=Etc/UTC\nCOPY ./build/*.sh /chromium_build/\nCOPY ./build/install-build-deps.py /chromium_build/\nRUN \\\n\tDEBIAN_FRONTEND=noninteractive \\\n\techo 'debconf debconf/frontend select Noninteractive' | debconf-set-selections \\\n\t&& ln -snf /usr/share/zoneinfo/$TZ /etc/localtime && echo $TZ > /etc/timezone \\\n\t&& apt-get update && apt-get install -y lsb-release sudo \\\n\t&& sed -i 's/snapcraft/snapcraftnoinstall/g' /chromium_build/install-build-deps.sh \\\n\t&& /chromium_build/install-build-deps.sh --no-prompt --no-chromeos-fonts \\\n\t&& rm -rf /chromium_build \\\n\t&& rm -rf /var/lib/apt/lists/*\n\nRUN chmod +x /sccache-v0.7.7-x86_64-unknown-linux-musl/sccache\n\nENV SCCACHE=/sccache-v0.7.7-x86_64-unknown-linux-musl/sccache\nENV SCCACHE_DIR=./target/sccache\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.052734375,
          "content": "MIT License\n\nCopyright (c) 2018-2019 the Deno authors\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 9.4189453125,
          "content": "# Rusty V8 Binding\n\nV8 Version: 13.0.245.12\n\n[![ci](https://github.com/denoland/rusty_v8/workflows/ci/badge.svg?branch=main)](https://github.com/denoland/rusty_v8/actions)\n[![crates](https://img.shields.io/crates/v/v8.svg)](https://crates.io/crates/v8)\n[![docs](https://docs.rs/v8/badge.svg)](https://docs.rs/v8)\n\n## Goals\n\n1. Provide high quality Rust bindings to\n   [V8's C++ API](https://cs.chromium.org/chromium/src/v8/include/v8.h). The API\n   should match the original API as closely as possible.\n\n2. Do not introduce additional call overhead. (For example, previous attempts at\n   Rust V8 bindings forced the use of Persistent handles.)\n\n3. Do not rely on a binary `libv8.a` built outside of cargo. V8 is a very large\n   project (over 600,000 lines of C++) which often takes 30 minutes to compile.\n   Furthermore, V8 relies on Chromium's bespoke build system (gn + ninja) which\n   is not easy to use outside of Chromium. For this reason many attempts to bind\n   to V8 rely on pre-built binaries that are built separately from the binding\n   itself. While this is simple, it makes upgrading V8 difficult, it makes CI\n   difficult, it makes producing builds with different configurations difficult,\n   and it is a security concern since binary blobs can hide malicious code. For\n   this reason we believe it is imperative to build V8 from source code during\n   \"cargo build\".\n\n4. Publish the crate on crates.io and allow docs.rs to generate documentation.\n   Due to the complexity and size of V8's build, this is nontrivial. For example\n   the crate size must be kept under 10 MiB in order to publish.\n\n## Versioning\n\nRusty V8's major version aligns with Chrome's major version, which corresponds\nto a specific V8 release. For example, Rusty V8 `129.0.0` maps to Chrome\n`129.x.y.z`, which uses V8 `12.9.a.b`. While the minor and patch numbers between\nChrome and V8 may differ, Rusty V8 will follow Chrome's release schedule, with a\nnew major version every 4 weeks.\n\nAs a Rust crate, Rusty V8 follows semantic versioning (semver) and will not\nintroduce breaking changes within a major version. However, major version bumps\nwill occur regularly to stay in sync with Chrome's release cycle.\n\n## Binary Build\n\nV8 is very large and takes a long time to compile. Many users will prefer to use\na prebuilt version of V8. We publish static libs for every version of rusty v8\non [Github](https://github.com/denoland/rusty_v8/releases).\n\nBinaries builds are turned on by default: `cargo build` will initiate a download\nfrom github to get the static lib. To disable this build using the\n`V8_FROM_SOURCE` environmental variable.\n\nWhen making changes to rusty_v8 itself, it should be tested by build from\nsource. The CI always builds from source.\n\n## The `V8_FORCE_DEBUG` environment variable\n\nBy default `rusty_v8` will link against release builds of `v8`, if you want to\nuse a debug build of `v8` set `V8_FORCE_DEBUG=true`.\n\nWe default to release builds of `v8` due to performance & CI reasons in `deno`.\n\n## The `RUSTY_V8_MIRROR` environment variable\n\nTells the build script where to get binary builds from. Understands `http://`\nand `https://` URLs, and file paths. The default is\nhttps://github.com/denoland/rusty_v8/releases.\n\nFile-based mirrors are good for using cached downloads. First, point the\nenvironment variable to a suitable location:\n\n    # you might want to add this to your .bashrc\n    $ export RUSTY_V8_MIRROR=$HOME/.cache/rusty_v8\n\nThen populate the cache:\n\n```bash\n#!/bin/bash\n\n# see https://github.com/denoland/rusty_v8/releases\n\nfor REL in v0.13.0 v0.12.0; do\n  mkdir -p $RUSTY_V8_MIRROR/$REL\n  for FILE in \\\n    librusty_v8_debug_x86_64-unknown-linux-gnu.a \\\n    librusty_v8_release_x86_64-unknown-linux-gnu.a \\\n  ; do\n    if [ ! -f $RUSTY_V8_MIRROR/$REL/$FILE ]; then\n      wget -O $RUSTY_V8_MIRROR/$REL/$FILE \\\n        https://github.com/denoland/rusty_v8/releases/download/$REL/$FILE\n    fi\n  done\ndone\n```\n\n## The `RUSTY_V8_ARCHIVE` environment variable\n\nTell the build script to use a specific v8 library. This can be an URL or a\npath. This is useful when you have a prebuilt archive somewhere:\n\n```bash\nexport RUSTY_V8_ARCHIVE=/path/to/custom_archive.a\ncargo build\n```\n\n## Build V8 from Source\n\nUse `V8_FROM_SOURCE=1 cargo build -vv` to build the crate completely from\nsource.\n\nThe build scripts require Python 3 to be available as `python3` in your `PATH`.\nIf you want to specify the exact binary of Python to use, you should use the\n`PYTHON` environment variable.\n\nThe build also requires `curl` to be installed on your system.\n\nFor linux builds: glib-2.0 development files need to be installed such that\npkg-config can find them. On Ubuntu, run `sudo apt install libglib2.0-dev` to\ninstall them.\n\nFor Windows builds: the 64-bit toolchain needs to be used. 32-bit targets are\nnot supported.\n\nFor Mac builds: You'll need Xcode and Xcode CLT installed. Recent macOS versions\nwill also require you to pass PYTHON=python3 because macOS no longer ships with\n`python` simlinked to Python 3.\n\nFor Android builds: You'll need to cross compile from a x86_64 host to the\naarch64 or x64 android. You can use the following commands:\n\n```bash\nrustup target add aarch64-linux-android  # or x86_64-linux-android\nV8_FROM_SOURCE=1 cargo build -vv --target aarch64-linux-android\n# or with cross\ndocker build --build-arg CROSS_BASE_IMAGE=ghcr.io/cross-rs/aarch64-linux-android:0.2.5 -t cross-rusty_v8:aarch64-linux-android .\nV8_FROM_SOURCE=1 cross build -vv --target aarch64-linux-android\n```\n\nThe build depends on several binary tools: `gn`, `ninja` and `clang`. The tools\nwill automatically be downloaded, if they are not detected in the environment.\n\nSpecifying the `$GN` and `$NINJA` environmental variables can be used to skip\nthe download of gn and ninja. The clang download can be skipped by setting\n`$CLANG_BASE_PATH` to the directory containing a `llvm`/`clang` installation. V8\nis known to rely on bleeding edge features, so LLVM v8.0+ or Apple clang 11.0+\nis recommended.\n\nArguments can be passed to `gn` by setting the `$GN_ARGS` environmental\nvariable.\n\nEnv vars used in when building from source: `SCCACHE`, `CCACHE`, `GN`, `NINJA`,\n`CLANG_BASE_PATH`, `GN_ARGS`\n\n## FAQ\n\n**Building V8 takes over 30 minutes, this is too slow for me to use this crate.\nWhat should I do?**\n\nInstall [sccache](https://github.com/mozilla/sccache) or\n[ccache](https://ccache.dev/). Our build scripts will detect and use them. Set\nthe `$SCCACHE` or `$CCACHE` environmental variable if it's not in your path.\n\n**What are all these random directories for like `build` and `buildtools` are\nthese really necessary?**\n\nIn order to build V8 from source code, we must provide a certain directory\nstructure with some git submodules from Chromium. We welcome any simplifications\nto the code base, but this is a structure we have found after many failed\nattempts that carefully balances the requirements of cargo crates and GN/Ninja.\n\n**V8 has a very large API with hundreds of methods. Why don't you automate the\ngeneration of this binding code?**\n\nWe have actually started down this route several times, however due to many\neccentric features of the V8 API, this has not proven successful. Therefore we\nare proceeding in a brute-force fashion for now, focusing on solving our stated\ngoals first. We hope to auto-generate bindings in the future.\n\n**Why are you building this?**\n\nThis is to support [the Deno project](https://deno.land/). We previously have\ngotten away with a simpler high-level Rust binding to V8 called\n[libdeno](https://github.com/denoland/deno/tree/32937251315493ef2c3b42dd29340e8a34501aa4/core/libdeno).\nBut as Deno has matured we've found ourselves continually needing access to an\nincreasing amount of V8's API in Rust.\n\n**When building I get unknown argument: '-gno-inline-line-tables'**\n\nUse `export GN_ARGS=\"no_inline_line_tables=false\"` during build.\n\n**My program crashes when initializing on non-main thread**\n\nInitializing V8 on a non-main thread with the CPUs PKU feature enabled might\nlead to crashes. You can work around this problem by using\n`v8::new_unprotected_default_platform`.\n\nSee https://github.com/denoland/rusty_v8/issues/1381\n\n## Download cache\n\nThe v8 archives used for linking in prebuilt mode can be cached to avoid\nre-downloading archives when switching between branches that otherwise change\nthe current rusty_v8 version.\n\nTo populate the cache by hand, you'll need to place the files in the appropriate\nlocation in your `.cargo` folder. Running `cargo build -v -v` will print two\nlines that you can use to determine the correct file and cache location:\n\n```\n[v8 0.87.0] static lib URL: https://github.com/denoland/rusty_v8/releases/download/v0.87.0/librusty_v8_release_aarch64-apple-darwin.a.gz\n[v8 0.87.0] Looking for download in '\"/Users/<name>/.cargo/.rusty_v8/https___github_com_denoland_rusty_v8_releases_download_v0_87_0_librusty_v8_release_aarch64_apple_darwin_a_gz\"'\n```\n\nGiven the above log output, use `curl` to download the file like so:\n\n```\ncurl -L https://github.com/denoland/rusty_v8/releases/download/v0.87.0/librusty_v8_release_aarch64-apple-darwin.a.gz >\n  /Users/<name>/.cargo/.rusty_v8/https___github_com_denoland_rusty_v8_releases_download_v0_87_0_librusty_v8_release_aarch64_apple_darwin_a_gz\n```\n\n## For maintainers\n\n**Cut a release**\n\nCreate a PR to bump the release version (e.g.\nhttps://github.com/denoland/rusty_v8/pull/1415).\n\nCreate a new release/tag after the bump PR is landed. CI will publish the crate\nand upload release binaries. You will need to manually upload binary archives\nfor M1 build.\n\n```\n$ V8_FROM_SOURCE=1 cargo build\n$ V8_FROM_SOURCE=1 cargo build --release\n```\n"
        },
        {
          "name": "benches",
          "type": "tree",
          "content": null
        },
        {
          "name": "build",
          "type": "commit",
          "content": null
        },
        {
          "name": "build.rs",
          "type": "blob",
          "size": 32.171875,
          "content": "// Copyright 2018-2019 the Deno authors. All rights reserved. MIT license.\nuse fslock::LockFile;\nuse miniz_oxide::inflate::stream::inflate;\nuse miniz_oxide::inflate::stream::InflateState;\nuse miniz_oxide::MZFlush;\nuse miniz_oxide::MZResult;\nuse miniz_oxide::MZStatus;\nuse miniz_oxide::StreamResult;\nuse std::collections::HashSet;\nuse std::env;\nuse std::fs;\nuse std::io;\nuse std::io::Read;\nuse std::io::Seek;\nuse std::io::Write;\nuse std::path::Path;\nuse std::path::PathBuf;\nuse std::process::Command;\nuse std::process::Stdio;\nuse which::which;\n\nfn main() {\n  println!(\"cargo:rerun-if-changed=.gn\");\n  println!(\"cargo:rerun-if-changed=BUILD.gn\");\n  println!(\"cargo:rerun-if-changed=src/binding.cc\");\n\n  // These are all the environment variables that we check. This is\n  // probably more than what is needed, but missing an important\n  // variable can lead to broken links when switching rusty_v8\n  // versions.\n  let envs = vec![\n    \"CCACHE\",\n    \"CLANG_BASE_PATH\",\n    \"CXXSTDLIB\",\n    \"DENO_TRYBUILD\",\n    \"DOCS_RS\",\n    \"GN\",\n    \"GN_ARGS\",\n    \"HOST\",\n    \"NINJA\",\n    \"OUT_DIR\",\n    \"RUSTY_V8_ARCHIVE\",\n    \"RUSTY_V8_MIRROR\",\n    \"RUSTY_V8_SRC_BINDING_PATH\",\n    \"SCCACHE\",\n    \"V8_FORCE_DEBUG\",\n    \"V8_FROM_SOURCE\",\n    \"PYTHON\",\n    \"DISABLE_CLANG\",\n    \"EXTRA_GN_ARGS\",\n    \"PRINT_GN_ARGS\",\n    \"CARGO_ENCODED_RUSTFLAGS\",\n  ];\n  for env in envs {\n    println!(\"cargo:rerun-if-env-changed={}\", env);\n  }\n\n  // Detect if trybuild tests are being compiled.\n  let is_trybuild = env::var_os(\"DENO_TRYBUILD\").is_some();\n\n  // Don't build V8 if \"cargo doc\" is being run. This is to support docs.rs.\n  let is_cargo_doc = env::var_os(\"DOCS_RS\").is_some();\n\n  // Don't build V8 if the rust language server (RLS) is running.\n  let is_rls = env::var_os(\"CARGO\")\n    .map(PathBuf::from)\n    .as_ref()\n    .and_then(|p| p.file_stem())\n    .and_then(|f| f.to_str())\n    .map(|s| s.starts_with(\"rls\"))\n    .unwrap_or(false);\n\n  // Early exit\n  if is_cargo_doc || is_rls {\n    print_prebuilt_src_binding_path();\n    return;\n  }\n\n  print_link_flags();\n\n  // Don't attempt rebuild but link\n  if is_trybuild {\n    println!(\n      \"cargo:rustc-env=RUSTY_V8_SRC_BINDING_PATH={}\",\n      env::var(\"RUSTY_V8_SRC_BINDING_PATH\").unwrap()\n    );\n    return;\n  }\n\n  let is_asan = if let Some(rustflags) = env::var_os(\"CARGO_ENCODED_RUSTFLAGS\")\n  {\n    let rustflags = rustflags.to_string_lossy();\n    rustflags.find(\"-Z sanitizer=address\").is_some()\n      || rustflags.find(\"-Zsanitizer=address\").is_some()\n  } else {\n    false\n  };\n\n  // Cargo likes to run multiple build scripts at once sometimes.\n  // Nothing that follows is safe to run multiple times at once,\n  // because we store everything in a parent directory of OUT_DIR.\n  let _lockfile = acquire_lock();\n\n  // Build from source\n  if env_bool(\"V8_FROM_SOURCE\") {\n    if is_asan && std::env::var_os(\"OPT_LEVEL\").unwrap_or_default() == \"0\" {\n      panic!(\"v8 crate cannot be compiled with OPT_LEVEL=0 and ASAN.\\nTry `[profile.dev.package.v8] opt-level = 1`.\\nAborting before miscompilations cause issues.\");\n    }\n\n    // cargo publish doesn't like pyc files.\n    env::set_var(\"PYTHONDONTWRITEBYTECODE\", \"1\");\n\n    build_v8(is_asan);\n    build_binding();\n\n    return;\n  }\n\n  print_prebuilt_src_binding_path();\n\n  download_static_lib_binaries();\n}\n\nfn acquire_lock() -> LockFile {\n  let root = env::current_dir().unwrap();\n  let out_dir = env::var_os(\"OUT_DIR\").unwrap();\n  let lockfilepath = root\n    .join(out_dir)\n    .parent()\n    .unwrap()\n    .parent()\n    .unwrap()\n    .join(\"v8.fslock\");\n  let mut lockfile = LockFile::open(&lockfilepath)\n    .expect(\"Couldn't open lib download lockfile.\");\n  lockfile.lock_with_pid().expect(\"Couldn't get lock\");\n  println!(\"lockfile: {:?}\", &lockfilepath);\n  lockfile\n}\n\nfn build_binding() {\n  let output = Command::new(python())\n    .arg(\"./tools/get_bindgen_args.py\")\n    .arg(\"--gn-out\")\n    .arg(build_dir().join(\"gn_out\"))\n    .output()\n    .unwrap();\n  let args = String::from_utf8(output.stdout).unwrap();\n  let args = args.split('\\0').collect::<Vec<_>>();\n\n  let bindings = bindgen::Builder::default()\n    .header(\"src/binding.hpp\")\n    .parse_callbacks(Box::new(bindgen::CargoCallbacks::new()))\n    .clang_args([\"-x\", \"c++\", \"-std=c++20\", \"-Iv8/include\", \"-I.\"])\n    .clang_args(args)\n    .generate_cstr(true)\n    .rustified_enum(\".*UseCounterFeature\")\n    .allowlist_item(\"v8__.*\")\n    .allowlist_item(\"cppgc__.*\")\n    .allowlist_item(\"RustObj\")\n    .generate()\n    .expect(\"Unable to generate bindings\");\n\n  let out_path = build_dir().join(\"gn_out\").join(\"src_binding.rs\");\n  println!(\n    \"cargo:rustc-env=RUSTY_V8_SRC_BINDING_PATH={}\",\n    out_path.display()\n  );\n  bindings\n    .write_to_file(out_path)\n    .expect(\"Couldn't write bindings!\");\n}\n\nfn build_v8(is_asan: bool) {\n  env::set_var(\"DEPOT_TOOLS_WIN_TOOLCHAIN\", \"0\");\n\n  if need_gn_ninja_download() {\n    download_ninja_gn_binaries();\n  }\n  // `#[cfg(...)]` attributes don't work as expected from build.rs -- they refer to the configuration\n  // of the host system which the build.rs script will be running on. In short, `cfg!(target_<os/arch>)`\n  // is actually the host os/arch instead of target os/arch while cross compiling. Instead, Environment variables\n  // are the officially approach to get the target os/arch in build.rs.\n  let target_os = env::var(\"CARGO_CFG_TARGET_OS\").unwrap();\n  let target_arch = env::var(\"CARGO_CFG_TARGET_ARCH\").unwrap();\n  // On windows, rustc cannot link with a V8 debug build.\n  let mut gn_args = if is_debug() && target_os != \"windows\" {\n    // Note: When building for Android aarch64-qemu, use release instead of debug.\n    vec![\"is_debug=true\".to_string()]\n  } else {\n    vec![\"is_debug=false\".to_string()]\n  };\n  if is_asan {\n    gn_args.push(\"is_asan=true\".to_string());\n  }\n  if env::var(\"CARGO_FEATURE_USE_CUSTOM_LIBCXX\").is_err() {\n    gn_args.push(\"use_custom_libcxx=false\".to_string());\n  }\n\n  // Fix GN's host_cpu detection when using x86_64 bins on Apple Silicon\n  if cfg!(target_os = \"macos\") && cfg!(target_arch = \"aarch64\") {\n    gn_args.push(\"host_cpu=\\\"arm64\\\"\".to_string())\n  }\n\n  if env::var_os(\"DISABLE_CLANG\").is_some() {\n    gn_args.push(\"is_clang=false\".into());\n    // -gline-tables-only is Clang-only\n    gn_args.push(\"line_tables_only=false\".into());\n  } else if let Some(clang_base_path) = find_compatible_system_clang() {\n    println!(\"clang_base_path (system): {}\", clang_base_path.display());\n    gn_args.push(format!(\"clang_base_path={:?}\", clang_base_path));\n    gn_args.push(\"treat_warnings_as_errors=false\".to_string());\n  } else {\n    println!(\"using Chromium's clang\");\n    let clang_base_path = clang_download();\n    gn_args.push(format!(\"clang_base_path={:?}\", clang_base_path));\n\n    if target_os == \"android\" && target_arch == \"aarch64\" {\n      gn_args.push(\"treat_warnings_as_errors=false\".to_string());\n    }\n  }\n\n  if let Some(p) = env::var_os(\"SCCACHE\") {\n    cc_wrapper(&mut gn_args, Path::new(&p));\n  } else if let Ok(p) = which(\"sccache\") {\n    cc_wrapper(&mut gn_args, &p);\n  } else if let Some(p) = env::var_os(\"CCACHE\") {\n    cc_wrapper(&mut gn_args, Path::new(&p));\n  } else if let Ok(p) = which(\"ccache\") {\n    cc_wrapper(&mut gn_args, &p);\n  } else {\n    println!(\"cargo:warning=Not using sccache or ccache\");\n  }\n\n  if let Ok(args) = env::var(\"GN_ARGS\") {\n    for arg in args.split_whitespace() {\n      gn_args.push(arg.to_string());\n    }\n  }\n  // cross-compilation setup\n  if target_arch == \"aarch64\" {\n    gn_args.push(r#\"target_cpu=\"arm64\"\"#.to_string());\n    gn_args.push(\"use_sysroot=true\".to_string());\n    maybe_install_sysroot(\"arm64\");\n    maybe_install_sysroot(\"amd64\");\n  }\n  if target_arch == \"arm\" {\n    gn_args.push(r#\"target_cpu=\"arm\"\"#.to_string());\n    gn_args.push(r#\"v8_target_cpu=\"arm\"\"#.to_string());\n    gn_args.push(\"use_sysroot=true\".to_string());\n    maybe_install_sysroot(\"i386\");\n    maybe_install_sysroot(\"arm\");\n  }\n\n  let target_triple = env::var(\"TARGET\").unwrap();\n  // check if the target triple describes a non-native environment\n  if target_triple != env::var(\"HOST\").unwrap() && target_os == \"android\" {\n    let arch = if target_arch == \"x86_64\" {\n      \"x64\"\n    } else if target_arch == \"aarch64\" {\n      \"arm64\"\n    } else {\n      \"unknown\"\n    };\n    if target_arch == \"x86_64\" {\n      maybe_install_sysroot(\"amd64\");\n    }\n    gn_args.push(format!(r#\"v8_target_cpu=\"{}\"\"#, arch).to_string());\n    gn_args.push(format!(r#\"target_cpu=\"{}\"\"#, arch).to_string());\n    gn_args.push(r#\"target_os=\"android\"\"#.to_string());\n    gn_args.push(\"treat_warnings_as_errors=false\".to_string());\n    gn_args.push(\"use_sysroot=true\".to_string());\n\n    // NDK 23 and above removes libgcc entirely.\n    // https://github.com/rust-lang/rust/pull/85806\n    if !Path::new(\"./third_party/android_ndk/toolchains/llvm/prebuilt/linux-x86_64/bin/aarch64-linux-android24-clang++\").exists() {\n        assert!(Command::new(\"curl\")\n        .arg(\"-L\")\n        .arg(\"-o\").arg(\"./third_party/android-ndk-r26c-linux.zip\")\n        .arg(\"https://dl.google.com/android/repository/android-ndk-r26c-linux.zip\")\n        .status()\n        .unwrap()\n        .success());\n\n        assert!(Command::new(\"unzip\")\n        .arg(\"-d\").arg(\"./third_party/\")\n        .arg(\"-o\")\n        .arg(\"-q\")\n        .arg(\"./third_party/android-ndk-r26c-linux.zip\")\n        .status()\n        .unwrap()\n        .success());\n\n        fs::rename(\"./third_party/android-ndk-r26c\", \"./third_party/android_ndk\").unwrap();\n        fs::remove_file(\"./third_party/android-ndk-r26c-linux.zip\").unwrap();\n      }\n    static CHROMIUM_URI: &str = \"https://chromium.googlesource.com\";\n    maybe_clone_repo(\n      \"./third_party/android_platform\",\n      &format!(\n        \"{}/chromium/src/third_party/android_platform.git\",\n        CHROMIUM_URI\n      ),\n    );\n    maybe_clone_repo(\n      \"./third_party/catapult\",\n      &format!(\"{}/catapult.git\", CHROMIUM_URI),\n    );\n  }\n\n  if target_triple.starts_with(\"i686-\") {\n    gn_args.push(r#\"target_cpu=\"x86\"\"#.to_string());\n  }\n\n  let gn_out = maybe_gen(gn_args);\n  assert!(gn_out.exists());\n  assert!(gn_out.join(\"args.gn\").exists());\n  if env_bool(\"PRINT_GN_ARGS\") {\n    print_gn_args(&gn_out);\n  }\n  build(\"rusty_v8\", None);\n}\n\nfn print_gn_args(gn_out_dir: &Path) {\n  assert!(Command::new(gn())\n    .arg(format!(\"--script-executable={}\", python()))\n    .arg(\"args\")\n    .arg(gn_out_dir)\n    .arg(\"--list\")\n    .status()\n    .unwrap()\n    .success());\n}\n\nfn maybe_clone_repo(dest: &str, repo: &str) {\n  if !Path::new(&dest).exists() {\n    assert!(Command::new(\"git\")\n      .arg(\"clone\")\n      .arg(\"--depth=1\")\n      .arg(repo)\n      .arg(dest)\n      .status()\n      .unwrap()\n      .success());\n  }\n}\n\nfn maybe_install_sysroot(arch: &str) {\n  let sysroot_path = format!(\"build/linux/debian_sid_{}-sysroot\", arch);\n  if !PathBuf::from(sysroot_path).is_dir() {\n    assert!(Command::new(python())\n      .arg(\"./build/linux/sysroot_scripts/install-sysroot.py\")\n      .arg(format!(\"--arch={}\", arch))\n      .status()\n      .unwrap()\n      .success());\n  }\n}\n\nfn download_ninja_gn_binaries() {\n  let target_dir = build_dir().join(\"ninja_gn_binaries\");\n\n  let gn = target_dir.join(\"gn\").join(\"gn\");\n  let ninja = target_dir.join(\"ninja\").join(\"ninja\");\n  #[cfg(windows)]\n  let gn = gn.with_extension(\"exe\");\n  #[cfg(windows)]\n  let ninja = ninja.with_extension(\"exe\");\n\n  if !gn.exists() || !ninja.exists() {\n    assert!(Command::new(python())\n      .arg(\"./tools/ninja_gn_binaries.py\")\n      .arg(\"--dir\")\n      .arg(&target_dir)\n      .status()\n      .unwrap()\n      .success());\n  }\n  assert!(gn.exists());\n  assert!(ninja.exists());\n  env::set_var(\"GN\", gn);\n  if env::var(\"NINJA\").is_err() {\n    env::set_var(\"NINJA\", ninja);\n  }\n}\n\nfn prebuilt_profile() -> &'static str {\n  let target_os = env::var(\"CARGO_CFG_TARGET_OS\").unwrap();\n  // Note: we always use the release build on windows.\n  if target_os == \"windows\" {\n    return \"release\";\n  }\n  // Use v8 in release mode unless $V8_FORCE_DEBUG=true\n  match env_bool(\"V8_FORCE_DEBUG\") {\n    true => \"debug\",\n    _ => \"release\",\n  }\n}\n\nfn static_lib_name(suffix: &str) -> String {\n  let target_os = env::var(\"CARGO_CFG_TARGET_OS\").unwrap();\n  if target_os == \"windows\" {\n    format!(\"rusty_v8{suffix}.lib\")\n  } else {\n    format!(\"librusty_v8{suffix}.a\")\n  }\n}\n\nfn static_lib_url() -> String {\n  if let Ok(custom_archive) = env::var(\"RUSTY_V8_ARCHIVE\") {\n    return custom_archive;\n  }\n  let default_base = \"https://github.com/denoland/rusty_v8/releases/download\";\n  let base =\n    env::var(\"RUSTY_V8_MIRROR\").unwrap_or_else(|_| default_base.into());\n  let version = env::var(\"CARGO_PKG_VERSION\").unwrap();\n  let target = env::var(\"TARGET\").unwrap();\n  let profile = prebuilt_profile();\n  format!(\n    \"{}/v{}/{}.gz\",\n    base,\n    version,\n    static_lib_name(&format!(\"_{}_{}\", profile, target)),\n  )\n}\n\nfn static_lib_path() -> PathBuf {\n  static_lib_dir().join(static_lib_name(\"\"))\n}\n\nfn static_checksum_path(path: &Path) -> PathBuf {\n  let mut path = path.to_path_buf();\n  path.set_extension(\"sum\");\n  path\n}\n\nfn static_lib_dir() -> PathBuf {\n  build_dir().join(\"gn_out\").join(\"obj\")\n}\n\nfn build_dir() -> PathBuf {\n  let cwd = env::current_dir().unwrap();\n\n  // target/debug//build/rusty_v8-d9e5a424d4f96994/out/\n  let out_dir = env::var_os(\"OUT_DIR\").expect(\n    \"The 'OUT_DIR' environment is not set (it should be something like \\\n     'target/debug/rusty_v8-{hash}').\",\n  );\n  let out_dir_abs = cwd.join(out_dir);\n\n  // This would be target/debug or target/release\n  out_dir_abs\n    .parent()\n    .unwrap()\n    .parent()\n    .unwrap()\n    .parent()\n    .unwrap()\n    .to_path_buf()\n}\n\nfn replace_non_alphanumeric(url: &str) -> String {\n  url\n    .chars()\n    .map(|c| if c.is_ascii_alphanumeric() { c } else { '_' })\n    .collect()\n}\n\nfn download_file(url: String, filename: PathBuf) {\n  if !url.starts_with(\"http:\") && !url.starts_with(\"https:\") {\n    copy_archive(&url, &filename);\n    return;\n  }\n\n  // Checksum (i.e: url) to avoid redownloads\n  match std::fs::read_to_string(static_checksum_path(&filename)) {\n    Ok(c) if c == static_lib_url() => return,\n    _ => {}\n  };\n\n  // If there is a `.cargo/.rusty_v8/<escaped URL>` file, use that instead\n  // of downloading.\n  if let Ok(mut path) = home::cargo_home() {\n    path = path.join(\".rusty_v8\").join(replace_non_alphanumeric(&url));\n    println!(\"Looking for download in '{path:?}'\");\n    if path.exists() {\n      copy_archive(&path.to_string_lossy(), &filename);\n      return;\n    }\n  }\n\n  // tmp file to download to so we don't clobber the existing one\n  let tmpfile = {\n    let mut t = filename.clone();\n    t.set_extension(\"tmp\");\n    t\n  };\n  if tmpfile.exists() {\n    println!(\"Deleting old tmpfile {}\", tmpfile.display());\n    std::fs::remove_file(&tmpfile).unwrap();\n  }\n\n  // Try downloading with python first. Python is a V8 build dependency,\n  // so this saves us from adding a Rust HTTP client dependency.\n  println!(\"Downloading (using Python) {}\", url);\n  let status = Command::new(python())\n    .arg(\"./tools/download_file.py\")\n    .arg(\"--url\")\n    .arg(&url)\n    .arg(\"--filename\")\n    .arg(&tmpfile)\n    .status();\n\n  // Python is only a required dependency for `V8_FROM_SOURCE` builds.\n  // If python is not available, try falling back to curl.\n  let status = match status {\n    Ok(status) if status.success() => status,\n    _ => {\n      println!(\"Python downloader failed, trying with curl.\");\n      Command::new(\"curl\")\n        .arg(\"-L\")\n        .arg(\"-f\")\n        .arg(\"-s\")\n        .arg(\"-o\")\n        .arg(&tmpfile)\n        .arg(&url)\n        .status()\n        .unwrap()\n    }\n  };\n\n  // Assert DL was successful\n  assert!(status.success());\n  assert!(tmpfile.exists());\n\n  // Write checksum (i.e url) & move file\n  std::fs::write(static_checksum_path(&filename), url).unwrap();\n  copy_archive(&tmpfile.to_string_lossy(), &filename);\n  std::fs::remove_file(&tmpfile).unwrap();\n\n  assert!(filename.exists());\n  assert!(static_checksum_path(&filename).exists());\n  assert!(!tmpfile.exists());\n}\n\nfn download_static_lib_binaries() {\n  let url = static_lib_url();\n  println!(\"static lib URL: {}\", url);\n\n  let dir = static_lib_dir();\n  std::fs::create_dir_all(&dir).unwrap();\n  println!(\"cargo:rustc-link-search={}\", dir.display());\n\n  download_file(url, static_lib_path());\n}\n\nfn decompress_to_writer<R, W>(input: &mut R, output: &mut W) -> io::Result<()>\nwhere\n  R: Read,\n  W: Write,\n{\n  let mut inflate_state = InflateState::default();\n  let mut input_buffer = [0; 16 * 1024];\n  let mut output_buffer = [0; 16 * 1024];\n  let mut input_offset = 0;\n\n  // Skip the gzip header\n  gzip_header::read_gz_header(input).unwrap();\n\n  loop {\n    let bytes_read = input.read(&mut input_buffer[input_offset..])?;\n    let bytes_avail = input_offset + bytes_read;\n\n    let StreamResult {\n      bytes_consumed,\n      bytes_written,\n      status,\n    } = inflate(\n      &mut inflate_state,\n      &input_buffer[..bytes_avail],\n      &mut output_buffer,\n      MZFlush::None,\n    );\n\n    if status != MZResult::Ok(MZStatus::Ok)\n      && status != MZResult::Ok(MZStatus::StreamEnd)\n    {\n      return Err(io::Error::new(\n        io::ErrorKind::Other,\n        format!(\"Decompression error {status:?}\"),\n      ));\n    }\n\n    output.write_all(&output_buffer[..bytes_written])?;\n\n    // Move remaining bytes to the beginning of the buffer\n    input_buffer.copy_within(bytes_consumed..bytes_avail, 0);\n    input_offset = bytes_avail - bytes_consumed;\n\n    if status == MZResult::Ok(MZStatus::StreamEnd) {\n      break; // End of decompression\n    }\n  }\n\n  Ok(())\n}\n\n/// Copy the V8 archive at `url` to `filename`.\n///\n/// This function doesn't use `std::fs::copy` because that would\n/// preveserve the file attributes such as ownership and mode flags.\n/// Instead, it copies the file contents to a new file.\n/// This is necessary because the V8 archive could live inside a read-only\n/// filesystem, and subsequent builds would fail to overwrite it.\nfn copy_archive(url: &str, filename: &Path) {\n  println!(\"Copying {url} to {filename:?}\");\n  let mut src = fs::File::open(url).unwrap();\n  let mut dst = fs::File::create(filename).unwrap();\n\n  // Allow both GZIP and non-GZIP downloads\n  let mut header = [0; 2];\n  src.read_exact(&mut header).unwrap();\n  src.seek(io::SeekFrom::Start(0)).unwrap();\n  if header == [0x1f, 0x8b] {\n    println!(\"Detected GZIP archive: {url}\");\n    decompress_to_writer(&mut src, &mut dst).unwrap();\n  } else {\n    println!(\"Not a GZIP archive: {url}\");\n    io::copy(&mut src, &mut dst).unwrap();\n  }\n}\n\nfn print_link_flags() {\n  println!(\"cargo:rustc-link-lib=static=rusty_v8\");\n  let should_dyn_link_libcxx = env::var(\"CARGO_FEATURE_USE_CUSTOM_LIBCXX\")\n    .is_err()\n    || env::var(\"GN_ARGS\").map_or(false, |gn_args| {\n      gn_args\n        .split_whitespace()\n        .any(|ba| ba == \"use_custom_libcxx=false\")\n    });\n\n  if should_dyn_link_libcxx {\n    // Based on https://github.com/alexcrichton/cc-rs/blob/fba7feded71ee4f63cfe885673ead6d7b4f2f454/src/lib.rs#L2462\n    if let Ok(stdlib) = env::var(\"CXXSTDLIB\") {\n      if !stdlib.is_empty() {\n        println!(\"cargo:rustc-link-lib=dylib={}\", stdlib);\n      }\n    } else {\n      let target = env::var(\"TARGET\").unwrap();\n      if target.contains(\"msvc\") {\n        // nothing to link to\n      } else if target.contains(\"apple\")\n        || target.contains(\"freebsd\")\n        || target.contains(\"openbsd\")\n      {\n        println!(\"cargo:rustc-link-lib=dylib=c++\");\n      } else if target.contains(\"android\") {\n        println!(\"cargo:rustc-link-lib=dylib=c++_shared\");\n      } else {\n        println!(\"cargo:rustc-link-lib=dylib=stdc++\");\n      }\n    }\n  }\n  let target_os = env::var(\"CARGO_CFG_TARGET_OS\").unwrap();\n  let target_env = env::var(\"CARGO_CFG_TARGET_ENV\").unwrap();\n\n  if target_os == \"windows\" {\n    println!(\"cargo:rustc-link-lib=dylib=winmm\");\n    println!(\"cargo:rustc-link-lib=dylib=dbghelp\");\n  }\n\n  if target_env == \"msvc\" {\n    // On Windows, including libcpmt[d]/msvcprt[d] explicitly links the C++\n    // standard library, which libc++ needs for exception_ptr internals.\n    if env::var(\"CARGO_FEATURE_CRT_STATIC\").is_ok() {\n      println!(\"cargo:rustc-link-lib=libcpmt\");\n    } else {\n      println!(\"cargo:rustc-link-lib=dylib=msvcprt\");\n    }\n  }\n}\n\nfn print_prebuilt_src_binding_path() {\n  if let Ok(binding) = env::var(\"RUSTY_V8_SRC_BINDING_PATH\") {\n    println!(\"cargo:rustc-env=RUSTY_V8_SRC_BINDING_PATH={}\", binding);\n    return;\n  }\n\n  let target = env::var(\"TARGET\").unwrap();\n  let profile = prebuilt_profile();\n  let name = format!(\"src_binding_{}_{}.rs\", profile, target);\n\n  let src_binding_path = get_dirs().root.join(\"gen\").join(name.clone());\n\n  if let Ok(base) = env::var(\"RUSTY_V8_MIRROR\") {\n    let version = env::var(\"CARGO_PKG_VERSION\").unwrap();\n    let url = format!(\"{}/v{}/{}\", base, version, name);\n    download_file(url, src_binding_path.clone());\n  }\n\n  println!(\n    \"cargo:rustc-env=RUSTY_V8_SRC_BINDING_PATH={}\",\n    src_binding_path.display()\n  );\n}\n\n// Chromium depot_tools contains helpers\n// which delegate to the \"relevant\" `buildtools`\n// directory when invoked, so they don't count.\nfn not_in_depot_tools(p: PathBuf) -> bool {\n  !p.as_path().to_str().unwrap().contains(\"depot_tools\")\n}\n\nfn need_gn_ninja_download() -> bool {\n  let has_ninja = which(\"ninja\").map_or(false, not_in_depot_tools)\n    || env::var_os(\"NINJA\").is_some();\n  let has_gn = which(\"gn\").map_or(false, not_in_depot_tools)\n    || env::var_os(\"GN\").is_some();\n\n  !has_ninja || !has_gn\n}\n\n// Chromiums gn arg clang_base_path is currently compatible with:\n// * Apples clang and clang from homebrew's llvm@x packages\n// * the official binaries from releases.llvm.org\n// * unversioned (Linux) packages of clang (if recent enough)\n// but unfortunately it doesn't work with version-suffixed packages commonly\n// found in Linux packet managers\nfn is_compatible_clang_version(clang_path: &Path) -> bool {\n  if let Ok(o) = Command::new(clang_path).arg(\"--version\").output() {\n    let _output = String::from_utf8(o.stdout).unwrap();\n    // TODO check version output to make sure it's supported.\n    const _MIN_APPLE_CLANG_VER: f32 = 11.0;\n    const _MIN_LLVM_CLANG_VER: f32 = 8.0;\n    return true;\n  }\n  false\n}\n\nfn find_compatible_system_clang() -> Option<PathBuf> {\n  if let Ok(p) = env::var(\"CLANG_BASE_PATH\") {\n    let base_path = Path::new(&p);\n    let clang_path = base_path.join(\"bin\").join(\"clang\");\n    if is_compatible_clang_version(&clang_path) {\n      return Some(base_path.to_path_buf());\n    }\n  }\n\n  None\n}\n\n// Download chromium's clang into OUT_DIR because Cargo will not allow us to\n// modify the source directory.\nfn clang_download() -> PathBuf {\n  let clang_base_path = build_dir().join(\"clang\");\n  println!(\"clang_base_path (downloaded) {}\", clang_base_path.display());\n  assert!(Command::new(python())\n    .arg(\"./tools/clang/scripts/update.py\")\n    .arg(\"--output-dir\")\n    .arg(&clang_base_path)\n    .status()\n    .unwrap()\n    .success());\n  assert!(clang_base_path.exists());\n  clang_base_path\n}\n\nfn cc_wrapper(gn_args: &mut Vec<String>, sccache_path: &Path) {\n  gn_args.push(format!(\"cc_wrapper={:?}\", sccache_path));\n}\n\nstruct Dirs {\n  pub out: PathBuf,\n  pub root: PathBuf,\n}\n\nfn get_dirs() -> Dirs {\n  // The OUT_DIR is going to be a crate-specific directory like\n  // \"target/debug/build/cargo_gn_example-eee5160084460b2c\"\n  // But we want to share the GN build amongst all crates\n  // and return the path \"target/debug\". So to find it, we walk up three\n  // directories.\n  // TODO(ry) This is quite brittle - if Cargo changes the directory structure\n  // this could break.\n  let out = env::var(\"OUT_DIR\").map(PathBuf::from).unwrap();\n  let out = out\n    .parent()\n    .unwrap()\n    .parent()\n    .unwrap()\n    .parent()\n    .unwrap()\n    .to_owned();\n\n  let root = env::var(\"CARGO_MANIFEST_DIR\").map(PathBuf::from).unwrap();\n  let mut dirs = Dirs { out, root };\n  maybe_symlink_root_dir(&mut dirs);\n  dirs\n}\n\n#[cfg(not(target_os = \"windows\"))]\nfn maybe_symlink_root_dir(_: &mut Dirs) {}\n\n#[cfg(target_os = \"windows\")]\nfn maybe_symlink_root_dir(dirs: &mut Dirs) {\n  // GN produces invalid paths if the source (a.k.a. root) directory is on a\n  // different drive than the output. If this is the case we'll create a\n  // symlink called 'gn_root' in the out directory, next to 'gn_out', so it\n  // appears as if they're both on the same drive.\n  use std::fs::remove_dir_all;\n  use std::fs::remove_file;\n  use std::os::windows::fs::symlink_dir;\n\n  let get_prefix = |p: &Path| {\n    p.components()\n      .find_map(|c| match c {\n        std::path::Component::Prefix(p) => Some(p),\n        _ => None,\n      })\n      .map(|p| p.as_os_str().to_owned())\n  };\n\n  let Dirs { out, root } = dirs;\n  if get_prefix(out) != get_prefix(root) {\n    let symlink = &*out.join(\"gn_root\");\n    let target = &*root.canonicalize().unwrap();\n\n    println!(\"Creating symlink {:?} to {:?}\", &symlink, &root);\n\n    let mut retries = 0;\n    loop {\n      match symlink.canonicalize() {\n        Ok(existing) if existing == target => break,\n        Ok(_) => remove_dir_all(symlink).expect(\"remove_dir_all failed\"),\n        Err(err) => {\n          println!(\"symlink.canonicalize failed: {:?}\", err);\n          // we're having very strange issues on GHA when the cache\n          // is restored, so trying this out temporarily\n          if let Err(err) = remove_dir_all(symlink) {\n            eprintln!(\"remove_dir_all failed: {:?}\", err);\n            if let Err(err) = remove_file(symlink) {\n              eprintln!(\"remove_file failed: {:?}\", err);\n            }\n          }\n          match symlink_dir(target, symlink) {\n            Ok(_) => break,\n            Err(err) => {\n              println!(\"symlink_dir failed: {:?}\", err);\n              retries += 1;\n              std::thread::sleep(std::time::Duration::from_millis(\n                50 * retries,\n              ));\n              if retries > 4 {\n                panic!(\"Failed to create symlink\");\n              }\n            }\n          }\n        }\n      }\n    }\n\n    dirs.root = symlink.to_path_buf();\n  }\n}\n\npub fn is_debug() -> bool {\n  // Cargo sets PROFILE to either \"debug\" or \"release\", which conveniently\n  // matches the build modes we support.\n  let m = env::var(\"PROFILE\").unwrap();\n  if m == \"release\" {\n    false\n  } else if m == \"debug\" {\n    true\n  } else {\n    panic!(\"unhandled PROFILE value {}\", m)\n  }\n}\n\nfn gn() -> String {\n  env::var(\"GN\").unwrap_or_else(|_| \"gn\".to_owned())\n}\n\n/*\n * Get the system's python binary - specified via the PYTHON environment\n * variable or defaulting to `python3`.\n */\nfn python() -> String {\n  env::var(\"PYTHON\").unwrap_or_else(|_| \"python3\".to_owned())\n}\n\ntype NinjaEnv = Vec<(String, String)>;\n\nfn ninja(gn_out_dir: &Path, maybe_env: Option<NinjaEnv>) -> Command {\n  let cmd_string = env::var(\"NINJA\").unwrap_or_else(|_| \"ninja\".to_owned());\n  let mut cmd = Command::new(&cmd_string);\n  cmd.arg(\"-C\");\n  cmd.arg(gn_out_dir);\n  if !cmd_string.ends_with(\"autoninja\") {\n    if let Ok(jobs) = env::var(\"NUM_JOBS\") {\n      cmd.arg(\"-j\");\n      cmd.arg(jobs);\n    }\n  }\n  if let Some(env) = maybe_env {\n    for item in env {\n      cmd.env(item.0, item.1);\n    }\n  }\n  cmd\n}\n\npub type GnArgs = Vec<String>;\n\npub fn maybe_gen(gn_args: GnArgs) -> PathBuf {\n  let dirs = get_dirs();\n  let gn_out_dir = dirs.out.join(\"gn_out\");\n\n  if !gn_out_dir.exists() || !gn_out_dir.join(\"build.ninja\").exists() {\n    let args = if let Ok(extra_args) = env::var(\"EXTRA_GN_ARGS\") {\n      format!(\"{} {}\", gn_args.join(\" \"), extra_args)\n    } else {\n      gn_args.join(\" \")\n    };\n\n    let path = env::current_dir().unwrap();\n    println!(\"The current directory is {}\", path.display());\n    println!(\n      \"gn gen --root={} {}\",\n      dirs.root.display(),\n      gn_out_dir.display()\n    );\n    assert!(Command::new(gn())\n      .arg(format!(\"--root={}\", dirs.root.display()))\n      .arg(format!(\"--script-executable={}\", python()))\n      .arg(\"gen\")\n      .arg(&gn_out_dir)\n      .arg(\"--ide=json\")\n      .arg(\"--args=\".to_owned() + &args)\n      .stdout(Stdio::inherit())\n      .stderr(Stdio::inherit())\n      .envs(env::vars())\n      .status()\n      .expect(\"Could not run `gn`\")\n      .success());\n  }\n  gn_out_dir\n}\n\npub fn build(target: &str, maybe_env: Option<NinjaEnv>) {\n  let gn_out_dir = get_dirs().out.join(\"gn_out\");\n\n  rerun_if_changed(&gn_out_dir, maybe_env.clone(), target);\n\n  // This helps Rust source files locate the snapshot, source map etc.\n  println!(\"cargo:rustc-env=GN_OUT_DIR={}\", gn_out_dir.display());\n\n  assert!(ninja(&gn_out_dir, maybe_env)\n    .arg(target)\n    .status()\n    .unwrap()\n    .success());\n\n  // TODO This is not sufficent. We need to use \"gn desc\" to query the target\n  // and figure out what else we need to add to the link.\n  println!(\n    \"cargo:rustc-link-search=native={}/obj/\",\n    gn_out_dir.display()\n  );\n}\n\n/// build.rs does not get re-run unless we tell cargo about what files we\n/// depend on. This outputs a bunch of rerun-if-changed lines to stdout.\nfn rerun_if_changed(out_dir: &Path, maybe_env: Option<NinjaEnv>, target: &str) {\n  let deps = ninja_get_deps(out_dir, maybe_env, target);\n  for d in deps {\n    if let Ok(p) = out_dir.join(d).canonicalize() {\n      println!(\"cargo:rerun-if-changed={}\", p.display());\n    }\n  }\n}\n\nfn ninja_get_deps(\n  out_dir: &Path,\n  maybe_env: Option<NinjaEnv>,\n  target: &str,\n) -> HashSet<String> {\n  let mut cmd = ninja(out_dir, maybe_env.clone());\n  cmd.arg(\"-t\");\n  cmd.arg(\"graph\");\n  cmd.arg(target);\n  let output = cmd.output().expect(\"ninja -t graph failed\");\n  let stdout = String::from_utf8(output.stdout).unwrap();\n  let graph_files = parse_ninja_graph(&stdout);\n\n  let mut cmd = ninja(out_dir, maybe_env);\n  cmd.arg(target);\n  cmd.arg(\"-t\");\n  cmd.arg(\"deps\");\n  let output = cmd.output().expect(\"ninja -t deps failed\");\n  let stdout = String::from_utf8(output.stdout).unwrap();\n  let deps_files = parse_ninja_deps(&stdout);\n\n  graph_files.union(&deps_files).map(String::from).collect()\n}\n\npub fn parse_ninja_deps(s: &str) -> HashSet<String> {\n  let mut out = HashSet::new();\n  for line in s.lines() {\n    if line.starts_with(\"  \") {\n      let filename = line.trim().to_string();\n      out.insert(filename);\n    }\n  }\n  out\n}\n\n/// A parser for the output of \"ninja -t graph\". It returns all of the input\n/// files.\npub fn parse_ninja_graph(s: &str) -> HashSet<String> {\n  let mut out = HashSet::new();\n  // This is extremely hacky and likely to break.\n  for line in s.lines() {\n    if line.starts_with('\\\"')\n      && line.contains(\"label=\")\n      && !line.contains(\"shape=\")\n      && !line.contains(\" -> \")\n    {\n      let filename = line.split('\\\"').nth(3).unwrap();\n      if !filename.starts_with(\"..\") {\n        continue;\n      }\n      out.insert(filename.to_string());\n    }\n  }\n  out\n}\n\nfn env_bool(key: &str) -> bool {\n  matches!(\n    env::var(key).unwrap_or_default().as_str(),\n    \"true\" | \"1\" | \"yes\"\n  )\n}\n\n#[cfg(test)]\nmod test {\n  use super::*;\n\n  const MOCK_GRAPH: &str = r#\"\ndigraph ninja {\nrankdir=\"LR\"\nnode [fontsize=10, shape=box, height=0.25]\nedge [fontsize=10]\n\"0x7fc3c040c210\" [label=\"default\"]\n\"0x7fc3c040a7f0\" -> \"0x7fc3c040c210\" [label=\" phony\"]\n\"0x7fc3c040a7f0\" [label=\"obj/default.stamp\"]\n\"0x7fc3c040a790\" [label=\"stamp\", shape=ellipse]\n\"0x7fc3c040a790\" -> \"0x7fc3c040a7f0\"\n\"0x7fc3c040a6c0\" -> \"0x7fc3c040a790\" [arrowhead=none]\n\"0x7fc3c040a8a0\" -> \"0x7fc3c040a790\" [arrowhead=none]\n\"0x7fc3c040a920\" -> \"0x7fc3c040a790\" [arrowhead=none]\n\"0x7fc3c040a6c0\" [label=\"obj/count_bytes.stamp\"]\n\"0x7fc3c040a4d0\" -> \"0x7fc3c040a6c0\" [label=\" stamp\"]\n\"0x7fc3c040a4d0\" [label=\"gen/output.txt\"]\n\"0x7fc3c040a400\" [label=\"___count_bytes___build_toolchain_mac_clang_x64__rule\", shape=ellipse]\n\"0x7fc3c040a400\" -> \"0x7fc3c040a4d0\"\n\"0x7fc3c040a580\" -> \"0x7fc3c040a400\" [arrowhead=none]\n\"0x7fc3c040a620\" -> \"0x7fc3c040a400\" [arrowhead=none]\n\"0x7fc3c040a580\" [label=\"../../../example/src/count_bytes.py\"]\n\"0x7fc3c040a620\" [label=\"../../../example/src/input.txt\"]\n\"0x7fc3c040a8a0\" [label=\"foo\"]\n\"0x7fc3c040b5e0\" [label=\"link\", shape=ellipse]\n\"0x7fc3c040b5e0\" -> \"0x7fc3c040a8a0\"\n\"0x7fc3c040b5e0\" -> \"0x7fc3c040b6d0\"\n\"0x7fc3c040b5e0\" -> \"0x7fc3c040b780\"\n\"0x7fc3c040b5e0\" -> \"0x7fc3c040b820\"\n\"0x7fc3c040b020\" -> \"0x7fc3c040b5e0\" [arrowhead=none]\n\"0x7fc3c040a920\" -> \"0x7fc3c040b5e0\" [arrowhead=none]\n\"0x7fc3c040b020\" [label=\"obj/foo/foo.o\"]\n\"0x7fc3c040b0d0\" -> \"0x7fc3c040b020\" [label=\" cxx\"]\n\"0x7fc3c040b0d0\" [label=\"../../../example/src/foo.cc\"]\n\"0x7fc3c040a920\" [label=\"obj/libhello.a\"]\n\"0x7fc3c040be00\" -> \"0x7fc3c040a920\" [label=\" alink\"]\n\"0x7fc3c040be00\" [label=\"obj/hello/hello.o\"]\n\"0x7fc3c040beb0\" -> \"0x7fc3c040be00\" [label=\" cxx\"]\n\"0x7fc3c040beb0\" [label=\"../../../example/src/hello.cc\"]\n}\n  \"#;\n\n  #[test]\n  fn test_parse_ninja_graph() {\n    let files = parse_ninja_graph(MOCK_GRAPH);\n    assert!(files.contains(\"../../../example/src/input.txt\"));\n    assert!(files.contains(\"../../../example/src/count_bytes.py\"));\n    assert!(!files.contains(\"obj/hello/hello.o\"));\n  }\n}\n"
        },
        {
          "name": "buildtools",
          "type": "commit",
          "content": null
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "gen",
          "type": "tree",
          "content": null
        },
        {
          "name": "rust-toolchain.toml",
          "type": "blob",
          "size": 0.2802734375,
          "content": "[toolchain]\nchannel = \"1.82.0\"\ncomponents = [\"rustfmt\", \"clippy\"]\ntargets = [\n    \"x86_64-apple-darwin\",\n    \"aarch64-apple-darwin\",\n    \"x86_64-unknown-linux-gnu\",\n    \"aarch64-unknown-linux-gnu\",\n    \"x86_64-pc-windows-msvc\",\n    \"aarch64-linux-android\",\n    \"x86_64-linux-android\",\n]\n"
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        },
        {
          "name": "third_party",
          "type": "tree",
          "content": null
        },
        {
          "name": "tools",
          "type": "tree",
          "content": null
        },
        {
          "name": "v8",
          "type": "commit",
          "content": null
        }
      ]
    }
  ]
}