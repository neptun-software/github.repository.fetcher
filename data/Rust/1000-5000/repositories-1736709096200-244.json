{
  "metadata": {
    "timestamp": 1736709096200,
    "page": 244,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjI1MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "flox/flox",
      "stars": 2848,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 1.828125,
          "content": "# ============================================================================ #\n#\n# @file .editorconfig\n#\n# @brief Sets `shfmt' rules.\n#\n# See all properties at\n# [EditorConfig Properties](https://github.com/editorconfig/editorconfig/wiki/EditorConfig-Properties).\n#\n# They only allow a single newline separator.\n# [Fork or PR upstream](https://github.com/patrickvane/shfmt/blob/master/syntax/printer.go#L464)\n#\n#\n# ---------------------------------------------------------------------------- #\n\n# All files\n# ---------\n\n[*]\n# use \"line feed\" with no \"carriage return\" as EOL\nend_of_line              = lf\ntrim_trailing_whitespace = true\n\n# ---------------------------------------------------------------------------- #\n\n# Shell files\n# -----------\n\n[{*.{sh,bash,bats,zsh},activate}]\nindent_style       = space  # Use spaces not tabs\nindent_size        = 2      # 2 space width\nbinary_next_line   = true   # Pipes go at beginning of newline, not end.\nswitch_case_indent = true   # Indent cases and bodies\nspace_redirects    = true   # Spaces between `>& FILE'\nkeep_padding       = false   # avoids realigning tokens by column\nfunction_next_line = false  # `foo() {' brace is on same line\nnever_split        = true  # Use `;'\n\n[*.sh]\nshell_variant = bash\n\n[*.bats]\nshell_variant = bats\n\n[*.bash]\nshell_variant = bash\n\n[*.zsh]\nshell_variant = zsh\n\n# ---------------------------------------------------------------------------- #\n\n# C/C++\n# -----\n[*.{c,cc,cxx,cpp,ipp,h,hh,hxx,hpp}]\nindent_style = space\nindent_size  = 2\n\n# ---------------------------------------------------------------------------- #\n\n# [Auto]Makefiles\n# ---------------\n[{Makefile,*.mk,*.am}{,.in}]\nindent_style = tab\nindent_size  = 2\n\n# ---------------------------------------------------------------------------- #\n#\n#\n#\n# ============================================================================ #\n"
        },
        {
          "name": ".envrc",
          "type": "blob",
          "size": 0.009765625,
          "content": "use flake\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.1533203125,
          "content": "*.log\n*.swp\n*~\n.ccls\n.ccls-cache\n.env.*\n.pre-commit-config.yaml\n/.direnv/\n/.flox\n/autom4te.cache/\n/cli/target\n/build/*\ncompile_commands.json\nresult\nresult-*\n"
        },
        {
          "name": ".helix",
          "type": "tree",
          "content": null
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 12.9794921875,
          "content": "# Flox CLI and Library\n\n## Quick Start\n```console\n$ cd git clone git@github.com/flox/flox.git;\n$ cd flox;\n# Enter Dev Shell\n$ nix develop;\n# Build `flox' and its subsystems\n$ just build;\n# Run the build\n$ ./cli/target/debug/flox --help;\n# Run the test suite\n$ just test-all;\n```\n\n## PR Guidelines\n\n### CLA\n\n- [ ] All commits in a Pull Request are\n      [signed](https://docs.github.com/en/authentication/managing-commit-signature-verification/signing-commits)\n      and Verified by GitHub or via GPG.\n- [ ] As an outside contributor you need to accept the flox\n      [Contributor License Agreement](.github/CLA.md) by adding your Git/GitHub\n      details in a row at the end of the\n      [`CONTRIBUTORS.csv`](.github/CONTRIBUTORS.csv) file by way of the same\n      pull request or one done previously.\n\n### CI\n\nCI can only be run against the flox/flox repository - it can't be run on forks.\nTo run CI on external contributions, a maintainer will have to fetch the branch\nfor a PR and push it to a branch in the flox/flox repo.\nThe maintainer reviewing a PR will run CI after approving the PR.\nIf you ever need a run triggered, feel free to ping your reviewer!\n\n### Commits\n\nThis project follows (tries to),\n[conventional commits](https://www.conventionalcommits.org/en/v1.0.0/).\n\nWe employ [commitizen](https://commitizen-tools.github.io/commitizen/)\nto help to enforce those rules.\n\n**Commit messages that explain the content of the commit are appreciated**\n\n-----\n\nFor starters: commit messages should follow the pattern:\n\n```\n<type>[optional scope]: <description>\n\n[optional body]\n\n[optional footer(s)]\n```\n\nThe commit contains the following structural elements,\nto communicate the intent of the change:\n\n1. **fix**: a commit of the type `fix` patches a bug in the codebase\n   (this correlates with PATCH in Semantic Versioning).\n2. **feat**: a commit of the type feat introduces a new feature to the codebase\n   (this correlates with MINOR in Semantic Versioning).\n3. **BREAKING CHANGE**: a commit that has a footer BREAKING CHANGE:,\n   or appends a ! after the type/scope, introduces a breaking API change\n   (correlating with MAJOR in Semantic Versioning).\n   A BREAKING CHANGE can be part of commits of any type.\n4. types other than fix: and feat: are allowed,\n   for example @commitlint/config-conventional (based on the Angular convention)\n   recommends `build`, `chore`, `ci`, `docs`, `style`, `refactor`, `perf`,\n   `test`, and others.\n5. footers other than BREAKING CHANGE: <description> may be provided\n   and follow a convention similar to git trailer format.\n\nAdditional types are not mandated by the Conventional Commits specification,\nand have no implicit effect in Semantic Versioning\n(unless they include a BREAKING CHANGE).\n\nA scope may be provided to a commit’s type,\nto provide additional contextual information\nand is contained within parenthesis, e.g., feat(parser): add ability to parse\narrays.\n\n-----\n\nA pre-commit hook will ensure only correctly formatted commit messages are\ncommitted.\n\nYou can also run\n\n```console\n$ cz c\n```\n\nor\n\n```console\n$ cz commit\n```\n\nto make conforming commits interactively.\n\n## Development\n\n```console\n$ nix develop;\n```\n\nThis sets up an environment with dependencies, rust toolchain, variable\nand `pre-commit-hooks`.\n\nIn the environment, use [`cargo`](https://doc.rust-lang.org/cargo/)\nto build the rust based CLI.\n\n**Note:**\n\ncargo based builds should only be used locally.\nFlox must be buildable using `flox` or `nix`.\n\n### Build and Run `flox`\n\n- build and run flox\n   ```console\n   $ pushd cli;\n   $ cargo run -- <args>;\n   ```\n- build a debug build of flox\n   ```console\n   $ just build;\n   # builds to ./cli/target/debug/flox\n   ```\n- run flox unit tests\n   ```console\n   $ pushd cli;\n   $ cargo test [<args>]\n   # or enable impure and other long running tests with\n   $ cargo -F extra-tests [<args>]\n   ```\n- build an optimized release build of flox\n   ```console\n   $ make -C pkgdb -j RELEASE=1;\n   $ ( pushd cli||return; cargo build --release; )\n   # builds to ./cli/target/release/flox\n   ```\n\n### Lint and Format `flox`\n\n- format rust code:\n  ```console\n  $ pushd cli;\n  $ cargo fmt\n  $ cargo fmt --check # just check\n  ```\n  The project is formatted using rustfmt and applies custom rules through\n  `.rustfmt.toml`.\n  A pre-commit hook is set up to check rust file formatting.\n- format nix code\n  ```console\n  $ treefmt -f nix .\n  $ treefmt -f nix . --fail-on-change # just check\n  ```\n  A pre-commit hook is set up to check nix file formatting.\n- lint rust\n  ```console\n  $ pushd cli;\n  $ cargo clippy --all\n  ```\n- lint all files (including for formatting):\n  ```console\n  $ pre-commit run -a\n  ```\n\n### Setting up C/C++ IDE support\n\nFor VSCode, it's suggested to use the *C/C++* plugin from *Microsoft*.  This\nsection refers to settings from that plugin.\n\n- Set your environment to use `c17` and `c++20` standards.\n  - For VSCode, this is available under *C++ Configuration*\n- *Compile commands* are built with `just build-cdb` and will be placed in the\n  root folder as `compile_commands.json`.\n  - For VSCode, this is available under the *Advanced* drop down under\n  *C++ Configuration* and can be set to `${workspaceFolder}/compile_commands.json`.\n\n\n### Setting up rust IDE support\n\n- Install the `rust-analyzer` plugin for your editor\n   - See the [official installation instruction](https://rust-analyzer.github.io/manual.html#installation)\n     (in the `nix develop` subshell the toolchain will already be provided, you\n      can skip right to your editor of choice)\n- If you prefer to open your editor at the project root, you'll need to help\n  `rust-analyzer` find the rust workspace by configuring the`linkedProjects`\n  for `rust-analyzer`.\n  In VS Code you can add this: to you `.vscode/settings.json`:\n  ```json\n  \"rust-analyzer.linkedProjects\": [\n     \"${workspaceFolder}/cli/Cargo.toml\"\n  ]\n  ```\n- If you want to be able to run and get analytics on impure tests, you need to\n  activate the `extra-tests` feature\n  In VS Code you can add this: to you `.vscode/settings.json`:\n  ```json\n  \"rust-analyzer.cargo.features\": [\n     \"extra-tests\"\n  ]\n  ```\n- If you use `foxundermoon.shell-format` on VS Code make sure to configure editor config support for it:\n  ```\n   \"shellformat.useEditorConfig\": true,\n  ```\n\n### Activation scripts\n\nFlox activations invoke a series of scripts\nwhich begins with the `activate` script\nas maintained in the `assets/activation-scripts` subdirectory.\nThe process of developing these scripts is highly iterative,\nand it can be challenging to follow the sequence of scripts\nas invoked in different contexts.\n\nTo make debugging easier\nwe have added invocations of a \"tracer\" script\nto the top and bottom of each file to be sourced.\nThis script then prints to STDERR\nthe full path of the file and one of \"START\" or \"END\"\ndepending on its position in the file.\nWe invoke the \"tracer\" script in this way\nso as to remain compatible with all shells.\n\nThe default \"tracer\" script is \"true\",\nwhich under normal circumstances will do nothing,\nbut it can be set to a Flox or user-provided script\nby way of the following:\n\n1. set `FLOX_ACTIVATE_TRACE` to a non-empty value\n\n    If `FLOX_ACTIVATE_TRACE` is defined\n    but does _not_ refer to the path of an executable file\n    then tracing will be performed using the standard\n    `activate.d/trace` script included in the Flox environment.\n\n1. set `FLOX_ACTIVATE_TRACE` to the path of a program of your choosing\n\n    Otherwise, if `FLOX_ACTIVATE_TRACE` contains the path of an executable file\n    then that will be the program invoked\n    at the start and end of each activation script.\n    This is useful when studying the effects of activation scripts\n    on certain environment variables and shell settings.\n\nTo use the tracing facility when testing changes to the activation scripts,\nthe canonical/authoritative method is to build and activate the full `flox` package:\n```\nnix build\nFLOX_ACTIVATE_TRACE=1 result/bin/flox activate [args]\n```\n\n## Testing\n\n### Unit tests\n\nMost changes should be unit tested.\nIf it's possible to test logic with a unit test, a unit test is preferred to any\nother kind of test.\nUnit tests should be added throughout the Rust code in `./cli`.\n\nUnit tests can be run with `just`:\n\n```console\n$ nix develop\n$ just impure-tests\n$ just impure-tests models::environment::test\n```\n\n### Integration tests\n\nIntegration tests are written with `bats`.\n`expect` can be used for `activate` tests that require testing an interactive\nshell,\nbut in general `expect` should be avoided.\nIntegration tests are located in the `./cli/tests` folder.\n\nIntegration tests currently test:\n- CLI flags\n- A lot of things that should be unit tests\n- Integration (no way!?) with:\n  - The nix-daemon\n  - The shell\n  - github:NixOS/nixpkgs\n  - cache.nixos.org\n  - external Flox services like FloxHub\n  - language ecosystems\n\nIntegration tests can be run with `just`:\n\n```console\n$ nix develop\n$ just integ-tests\n```\n\n#### Mock catalog responses\n\nMock catalog responses for use with integration tests are generated by:\n\n- [`test_data/`](test_data/)\n- [`cli/mk_data/`](cli/mk_data/)\n\n#### Continuous testing\nWhen working on the test you would probably want to run them continuously on\nevery change. In that case run the following:\n\n```console\n$ just integ-tests --watch\n```\n\n#### `bats` arguments\nYou can pass arbitrary flags through to `bats` using a `--` separator.\n\n```console\n$ just integ-tests -- -j 4\n```\nThis example tells `bats` to run 4 jobs in parallel.\n\n#### Running subsets of tests\nYou can specify which tests to run by passing arguments.\n\n##### Running a specific file\nIn order to run a specific test file, pass the filename relative to the tests directory:\n```console\n$ just integ-tests usage.bats\n```\nThis example will only run tests in the `cli/tests/usage.bats` file.\n\n\n##### Running tagged tests\nWhen writing integration tests it's important to add tags to each test to\nidentify which subsystems the integration test is using.\nThis makes it easier to target a test run at the subsystem you're working on.\n\nYou add tags to a test with a special comment:\n```\n# bats test_tags=foo,bar,baz\n@test \"this is the name of my test\" {\n   run \"$FLOX_BIN\" --help;\n   assert_success;\n}\n```\n\nYou can apply a tag to tests in a file with another special comment, which\napplies the tags to all of the tests that come after the comment:\n```\n# bats file_tags=foo\n\n@test \"this is the name of my test\" {\n   run \"$FLOX_BIN\" --help;\n   assert_success;\n}\n\n\n@test \"this is the name of my test\" {\n   run \"$FLOX_BIN\" --help;\n   assert_success;\n}\n```\n\nTags cannot contain whitespace, but may contain `-`, `_`, and `:`, where `:` is\nused for namespacing.\n\nThe list of tags to use for integration tests is as follows:\n- `init`\n- `build_env`\n- `install`\n- `uninstall`\n- `activate`\n- `push`\n- `pull`\n- `search`\n- `edit`\n- `list`\n- `delete`\n- `upgrade`\n- `project_env`\n- `managed_env`\n- `remote_env`\n- `python`, `node`, `go`, `ruby`, etc (anything language specific)\n\nSome of these tags will overlap. For example, the `build_env` tag should be used\nany time an environment is built, so there is overlap with `install`,\n`activate`, etc.\n\nIn order to run tests with a specific tag, you'll pass the `--filter-tags`\noption to `bats`:\n```console\n$ just integ-tests -- --filter-tags activate\n```\nThis example will only run tests tagged with `activate`.\nYou can use boolean logic and specify the flag multiple times to run specific\nsubsets of tests.\nSee the [bats usage documentation](https://bats-core.readthedocs.io/en/stable/usage.html)\nfor details.\n\n##### Running tests in a Linux container\n\nIt's possible to shorten the feedback loop when developing Linux dependent\nfeatures on a macOS system by running the tests from a container.\n\nStart a container with the code mounted in so that you can continue to use your normal editor:\n\n    docker run \\\n        --rm --interactive --tty \\\n        --volume $(pwd):/mnt --workdir /mnt \\\n        --name flox-dev \\\n        nixos/nix\n\nWithin the container:\n\n    echo 'experimental-features = nix-command flakes' >> /etc/nix/nix.conf\n    nix develop\n\nOutside the container, snapshot the store so that you don't have to download the world next time:\n\n    docker commit flox-dev flox:dev\n\nWithin the container, remove any existing MacOS binaries and rebuild for Linux:\n\n    just clean\n    just build\n\nWithin the container, to avoid `variable $src or $srcs should point to the source` errors per [NixOS/nix#8355](https://github.com/NixOS/nix/issues/8355):\n\n    unset TMPDIR\n\n## Man Pages\n\nUnreleased changes to `man` pages are available from the `nix develop` shell but\nyou will need to restart the shell or call `direnv reload` to pick up new\nchanges.\n\n## Rust Style Guidelines\n\n- In general, structs should derive `Clone` and `Debug`.\n\n## Merges\n\nChanges should be **squashed and merged** into `main`.\n\nDevelopment is done on branches and merged back to `main`.  Keep your branch\nupdated by rebasing and resolving conflicts regularly to avoid messy merges.\nMerges to `main` should be squashed and *ff-only* back to `main` using GitHub\nPRs.  Or, if they represent multiple bigger changes, squashed into multiple\ndistinct change sets.  Also be sure to run all tests before creating a mergeable\nPR (See [above](#testing)).\n"
        },
        {
          "name": "Justfile",
          "type": "blob",
          "size": 6.548828125,
          "content": "# ============================================================================ #\n#\n# Think of this as a `Makefile' except you run `just <TARGET>' instead\n# of `make <TARGET>'.\n#\n# The difference between `just' and `make' is that `just' does not check\n# timestamps to determine if files are stale; so in that sense you can imagine\n# it as `make' except \"all targets are `.PHONY' targets\".\n#\n#\n# ---------------------------------------------------------------------------- #\n\nnix_options := \"--extra-experimental-features nix-command \\\n                --extra-experimental-features flakes\"\nINPUT_DATA := \"${PWD}/test_data/input_data\"\ncargo_test_invocation := \"cargo nextest run --manifest-path ${PWD}/cli/Cargo.toml --workspace\"\n\n\n# ---------------------------------------------------------------------------- #\n\n@_default:\n    just --list --unsorted\n\n\n# ---------------------------------------------------------------------------- #\n\n# Print the paths of all of the binaries\n@bins:\n    echo \"$FLOX_BIN\"\n\n# ---------------------------------------------------------------------------- #\n\n\n# Build only nix-plugins\n@build-nix-plugins:\n    meson compile -C nix-plugins/builddir; \\\n    meson install -C nix-plugins/builddir\n\n# Clean th e nix-plugins build cache\n@clean-nix-plugins:\n   meson compile -C nix-plugins/builddir --clean\n\n# ---------------------------------------------------------------------------- #\n# Nix built subsystems\n\n# Build the flox manpages\n@build-manpages:\n    nix {{nix_options}} build .#flox-manpages -o build/flox-manpages\n\n# Build the activation scripts\n# `pure-eval` is disabled because `FLOX_ACTIVATIONS_BIN`\n# is read from the environment.\n@build-activation-scripts: build-activations\n    nix {{nix_options}} build \\\n        --option pure-eval false \\\n        '.#floxDevelopmentPackages.flox-activation-scripts^*' \\\n        -o $FLOX_INTERPRETER\n\n# Build the flox package builder\n@build-package-builder:\n    nix {{nix_options}} build \\\n        \".#floxDevelopmentPackages.flox-package-builder\" \\\n        -o \"$FLOX_PACKAGE_BUILDER\"\n\n# Build the flox buildenv\n# `pure-eval` is disabled because `FLOX_INTERPRETER`\n# is read from the environment.\n@build-buildenv:\n    nix {{nix_options}} build \\\n        --option pure-eval false \\\n        \".#floxDevelopmentPackages.flox-buildenv\" \\\n        -o \"$FLOX_BUILDENV\"\n\n# ---------------------------------------------------------------------------- #\n# Cargo built subsystems\n\n# Build the flox activations binary\n@build-activations:\n    pushd cli; cargo build -p flox-activations\n\n# Build the flox watchdog binary\n@build-watchdog:\n    pushd cli; cargo build -p flox-watchdog\n\n\n# ---------------------------------------------------------------------------- #\n# Build the flox binary\n\n@build-cli: build-nix-plugins build-package-builder build-activation-scripts build-watchdog build-buildenv\n    pushd cli; cargo build -p flox\n\n\n\n# Build the binaries\nbuild: build-cli\n\nclean-builds:\n    git checkout -- build/\n\n# ---------------------------------------------------------------------------- #\n# Build just the data generator\n@build-data-gen:\n    pushd cli; cargo build -p mk_data; popd\n\n# Generate test data\n@gen-data +mk_data_args=\"\": build-data-gen build-cli\n    mkdata=\"$PWD/cli/target/debug/mk_data\"; pushd test_data; \"$mkdata\" {{mk_data_args}} config.toml; popd\n\n# ---------------------------------------------------------------------------- #\n\n# Run the nix-plugins tests\n@test-nix-plugins: build-nix-plugins\n    meson test -C nix-plugins/builddir\n\n# Run the CLI integration test suite\n@integ-tests +bats_args=\"\": build\n    flox-cli-tests \\\n        --nix-plugins \"$NIX_PLUGINS\" \\\n        --flox \"$FLOX_BIN\" \\\n        --watchdog \"$WATCHDOG_BIN\" \\\n        --input-data \"{{INPUT_DATA}}\" \\\n        --generated-data \"$GENERATED_DATA\" \\\n        {{bats_args}}\n\n# Run the CLI integration test suite using Nix-built binaries\n@nix-integ-tests:\n    nix run \\\n        --accept-flake-config \\\n        --extra-experimental-features 'nix-command flakes' \\\n        .#flox-cli-tests\n\n# Run the CLI unit tests\n@unit-tests regex=\"\": build\n     {{cargo_test_invocation}} {{regex}}\n\n# Run the CLI unit tests, including impure tests\n@impure-tests regex=\"\": build\n     {{cargo_test_invocation}} {{regex}} --features \"extra-tests\"\n\n# Run the entire CLI test suite\ntest-cli: impure-tests integ-tests\n\n# Run the test suite except for nix-plugins\n@test-rust: impure-tests integ-tests nix-integ-tests\n\n# Run the entire test suite, including impure unit tests\ntest-all: test-nix-plugins impure-tests integ-tests nix-integ-tests\n\n\n# ---------------------------------------------------------------------------- #\n\n# Enters the Rust development environment\n@work:\n    # Note that this command is only really useful if you have\n    # `just` installed outside of the `flox` environment already\n    nix {{nix_options}} develop\n\n\n# ---------------------------------------------------------------------------- #\n\n# Bump all flake dependencies and commit with a descriptive message\n@bump-all:\n    nix {{nix_options}} flake update --commit-lock-file  \\\n         --commit-lockfile-summary \"chore: flake bump\";\n\n# Bump a specific flake input and commit with a descriptive message\n@bump input:\n    nix {{nix_options}} flake lock --update-input {{input}}  \\\n         --commit-lock-file --commit-lockfile-summary         \\\n         \"chore: bump '{{input}}' flake input\";\n\n\n# ---------------------------------------------------------------------------- #\n\n# Output licenses of all dependency crates\n@license:\n    pushd cli;                                     \\\n     cargo metadata --format-version 1              \\\n       |jq -r '.packages[]|[.name,.license]|@csv';\n\n\n# ---------------------------------------------------------------------------- #\n\n# Run a `flox` command\n@flox +args=\"\": build\n    cli/target/debug/flox {{args}}\n\n# Run a `flox` command using the catalog\n@catalog-flox +args=\"\": build\n    echo \"just: DEPRECATED TARGET: Use 'flox' instead\" >&2;\n    cli/target/debug/flox {{args}}\n\n\n# ---------------------------------------------------------------------------- #\n\n# Clean ( remove ) built artifacts\n@clean: clean-nix-plugins\n    pushd cli; cargo clean; popd\n\n# ---------------------------------------------------------------------------- #\n\n@format-cli:\n    pushd cli; cargo fmt; popd\n\n@format-nix-plugins:\n    clang-format -i nix-plugins/src/**/*.cc; \\\n    clang-format -i nix-plugins/include/**/*.hh\n\n\n@format-nix:\n    treefmt\n\n# Format all the code\nformat: format-cli format-nix-plugins format-nix\n\n# ---------------------------------------------------------------------------- #\n#\n#\n#\n# ============================================================================ #\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 17.66796875,
          "content": "                    GNU GENERAL PUBLIC LICENSE\n                       Version 2, June 1991\n\n Copyright (C) 1989, 1991 Free Software Foundation, Inc.,\n 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA\n Everyone is permitted to copy and distribute verbatim copies\n of this license document, but changing it is not allowed.\n\n                            Preamble\n\n  The licenses for most software are designed to take away your\nfreedom to share and change it.  By contrast, the GNU General Public\nLicense is intended to guarantee your freedom to share and change free\nsoftware--to make sure the software is free for all its users.  This\nGeneral Public License applies to most of the Free Software\nFoundation's software and to any other program whose authors commit to\nusing it.  (Some other Free Software Foundation software is covered by\nthe GNU Lesser General Public License instead.)  You can apply it to\nyour programs, too.\n\n  When we speak of free software, we are referring to freedom, not\nprice.  Our General Public Licenses are designed to make sure that you\nhave the freedom to distribute copies of free software (and charge for\nthis service if you wish), that you receive source code or can get it\nif you want it, that you can change the software or use pieces of it\nin new free programs; and that you know you can do these things.\n\n  To protect your rights, we need to make restrictions that forbid\nanyone to deny you these rights or to ask you to surrender the rights.\nThese restrictions translate to certain responsibilities for you if you\ndistribute copies of the software, or if you modify it.\n\n  For example, if you distribute copies of such a program, whether\ngratis or for a fee, you must give the recipients all the rights that\nyou have.  You must make sure that they, too, receive or can get the\nsource code.  And you must show them these terms so they know their\nrights.\n\n  We protect your rights with two steps: (1) copyright the software, and\n(2) offer you this license which gives you legal permission to copy,\ndistribute and/or modify the software.\n\n  Also, for each author's protection and ours, we want to make certain\nthat everyone understands that there is no warranty for this free\nsoftware.  If the software is modified by someone else and passed on, we\nwant its recipients to know that what they have is not the original, so\nthat any problems introduced by others will not reflect on the original\nauthors' reputations.\n\n  Finally, any free program is threatened constantly by software\npatents.  We wish to avoid the danger that redistributors of a free\nprogram will individually obtain patent licenses, in effect making the\nprogram proprietary.  To prevent this, we have made it clear that any\npatent must be licensed for everyone's free use or not licensed at all.\n\n  The precise terms and conditions for copying, distribution and\nmodification follow.\n\n                    GNU GENERAL PUBLIC LICENSE\n   TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION\n\n  0. This License applies to any program or other work which contains\na notice placed by the copyright holder saying it may be distributed\nunder the terms of this General Public License.  The \"Program\", below,\nrefers to any such program or work, and a \"work based on the Program\"\nmeans either the Program or any derivative work under copyright law:\nthat is to say, a work containing the Program or a portion of it,\neither verbatim or with modifications and/or translated into another\nlanguage.  (Hereinafter, translation is included without limitation in\nthe term \"modification\".)  Each licensee is addressed as \"you\".\n\nActivities other than copying, distribution and modification are not\ncovered by this License; they are outside its scope.  The act of\nrunning the Program is not restricted, and the output from the Program\nis covered only if its contents constitute a work based on the\nProgram (independent of having been made by running the Program).\nWhether that is true depends on what the Program does.\n\n  1. You may copy and distribute verbatim copies of the Program's\nsource code as you receive it, in any medium, provided that you\nconspicuously and appropriately publish on each copy an appropriate\ncopyright notice and disclaimer of warranty; keep intact all the\nnotices that refer to this License and to the absence of any warranty;\nand give any other recipients of the Program a copy of this License\nalong with the Program.\n\nYou may charge a fee for the physical act of transferring a copy, and\nyou may at your option offer warranty protection in exchange for a fee.\n\n  2. You may modify your copy or copies of the Program or any portion\nof it, thus forming a work based on the Program, and copy and\ndistribute such modifications or work under the terms of Section 1\nabove, provided that you also meet all of these conditions:\n\n    a) You must cause the modified files to carry prominent notices\n    stating that you changed the files and the date of any change.\n\n    b) You must cause any work that you distribute or publish, that in\n    whole or in part contains or is derived from the Program or any\n    part thereof, to be licensed as a whole at no charge to all third\n    parties under the terms of this License.\n\n    c) If the modified program normally reads commands interactively\n    when run, you must cause it, when started running for such\n    interactive use in the most ordinary way, to print or display an\n    announcement including an appropriate copyright notice and a\n    notice that there is no warranty (or else, saying that you provide\n    a warranty) and that users may redistribute the program under\n    these conditions, and telling the user how to view a copy of this\n    License.  (Exception: if the Program itself is interactive but\n    does not normally print such an announcement, your work based on\n    the Program is not required to print an announcement.)\n\nThese requirements apply to the modified work as a whole.  If\nidentifiable sections of that work are not derived from the Program,\nand can be reasonably considered independent and separate works in\nthemselves, then this License, and its terms, do not apply to those\nsections when you distribute them as separate works.  But when you\ndistribute the same sections as part of a whole which is a work based\non the Program, the distribution of the whole must be on the terms of\nthis License, whose permissions for other licensees extend to the\nentire whole, and thus to each and every part regardless of who wrote it.\n\nThus, it is not the intent of this section to claim rights or contest\nyour rights to work written entirely by you; rather, the intent is to\nexercise the right to control the distribution of derivative or\ncollective works based on the Program.\n\nIn addition, mere aggregation of another work not based on the Program\nwith the Program (or with a work based on the Program) on a volume of\na storage or distribution medium does not bring the other work under\nthe scope of this License.\n\n  3. You may copy and distribute the Program (or a work based on it,\nunder Section 2) in object code or executable form under the terms of\nSections 1 and 2 above provided that you also do one of the following:\n\n    a) Accompany it with the complete corresponding machine-readable\n    source code, which must be distributed under the terms of Sections\n    1 and 2 above on a medium customarily used for software interchange; or,\n\n    b) Accompany it with a written offer, valid for at least three\n    years, to give any third party, for a charge no more than your\n    cost of physically performing source distribution, a complete\n    machine-readable copy of the corresponding source code, to be\n    distributed under the terms of Sections 1 and 2 above on a medium\n    customarily used for software interchange; or,\n\n    c) Accompany it with the information you received as to the offer\n    to distribute corresponding source code.  (This alternative is\n    allowed only for noncommercial distribution and only if you\n    received the program in object code or executable form with such\n    an offer, in accord with Subsection b above.)\n\nThe source code for a work means the preferred form of the work for\nmaking modifications to it.  For an executable work, complete source\ncode means all the source code for all modules it contains, plus any\nassociated interface definition files, plus the scripts used to\ncontrol compilation and installation of the executable.  However, as a\nspecial exception, the source code distributed need not include\nanything that is normally distributed (in either source or binary\nform) with the major components (compiler, kernel, and so on) of the\noperating system on which the executable runs, unless that component\nitself accompanies the executable.\n\nIf distribution of executable or object code is made by offering\naccess to copy from a designated place, then offering equivalent\naccess to copy the source code from the same place counts as\ndistribution of the source code, even though third parties are not\ncompelled to copy the source along with the object code.\n\n  4. You may not copy, modify, sublicense, or distribute the Program\nexcept as expressly provided under this License.  Any attempt\notherwise to copy, modify, sublicense or distribute the Program is\nvoid, and will automatically terminate your rights under this License.\nHowever, parties who have received copies, or rights, from you under\nthis License will not have their licenses terminated so long as such\nparties remain in full compliance.\n\n  5. You are not required to accept this License, since you have not\nsigned it.  However, nothing else grants you permission to modify or\ndistribute the Program or its derivative works.  These actions are\nprohibited by law if you do not accept this License.  Therefore, by\nmodifying or distributing the Program (or any work based on the\nProgram), you indicate your acceptance of this License to do so, and\nall its terms and conditions for copying, distributing or modifying\nthe Program or works based on it.\n\n  6. Each time you redistribute the Program (or any work based on the\nProgram), the recipient automatically receives a license from the\noriginal licensor to copy, distribute or modify the Program subject to\nthese terms and conditions.  You may not impose any further\nrestrictions on the recipients' exercise of the rights granted herein.\nYou are not responsible for enforcing compliance by third parties to\nthis License.\n\n  7. If, as a consequence of a court judgment or allegation of patent\ninfringement or for any other reason (not limited to patent issues),\nconditions are imposed on you (whether by court order, agreement or\notherwise) that contradict the conditions of this License, they do not\nexcuse you from the conditions of this License.  If you cannot\ndistribute so as to satisfy simultaneously your obligations under this\nLicense and any other pertinent obligations, then as a consequence you\nmay not distribute the Program at all.  For example, if a patent\nlicense would not permit royalty-free redistribution of the Program by\nall those who receive copies directly or indirectly through you, then\nthe only way you could satisfy both it and this License would be to\nrefrain entirely from distribution of the Program.\n\nIf any portion of this section is held invalid or unenforceable under\nany particular circumstance, the balance of the section is intended to\napply and the section as a whole is intended to apply in other\ncircumstances.\n\nIt is not the purpose of this section to induce you to infringe any\npatents or other property right claims or to contest validity of any\nsuch claims; this section has the sole purpose of protecting the\nintegrity of the free software distribution system, which is\nimplemented by public license practices.  Many people have made\ngenerous contributions to the wide range of software distributed\nthrough that system in reliance on consistent application of that\nsystem; it is up to the author/donor to decide if he or she is willing\nto distribute software through any other system and a licensee cannot\nimpose that choice.\n\nThis section is intended to make thoroughly clear what is believed to\nbe a consequence of the rest of this License.\n\n  8. If the distribution and/or use of the Program is restricted in\ncertain countries either by patents or by copyrighted interfaces, the\noriginal copyright holder who places the Program under this License\nmay add an explicit geographical distribution limitation excluding\nthose countries, so that distribution is permitted only in or among\ncountries not thus excluded.  In such case, this License incorporates\nthe limitation as if written in the body of this License.\n\n  9. The Free Software Foundation may publish revised and/or new versions\nof the General Public License from time to time.  Such new versions will\nbe similar in spirit to the present version, but may differ in detail to\naddress new problems or concerns.\n\nEach version is given a distinguishing version number.  If the Program\nspecifies a version number of this License which applies to it and \"any\nlater version\", you have the option of following the terms and conditions\neither of that version or of any later version published by the Free\nSoftware Foundation.  If the Program does not specify a version number of\nthis License, you may choose any version ever published by the Free Software\nFoundation.\n\n  10. If you wish to incorporate parts of the Program into other free\nprograms whose distribution conditions are different, write to the author\nto ask for permission.  For software which is copyrighted by the Free\nSoftware Foundation, write to the Free Software Foundation; we sometimes\nmake exceptions for this.  Our decision will be guided by the two goals\nof preserving the free status of all derivatives of our free software and\nof promoting the sharing and reuse of software generally.\n\n                            NO WARRANTY\n\n  11. BECAUSE THE PROGRAM IS LICENSED FREE OF CHARGE, THERE IS NO WARRANTY\nFOR THE PROGRAM, TO THE EXTENT PERMITTED BY APPLICABLE LAW.  EXCEPT WHEN\nOTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER PARTIES\nPROVIDE THE PROGRAM \"AS IS\" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED\nOR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF\nMERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  THE ENTIRE RISK AS\nTO THE QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH YOU.  SHOULD THE\nPROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY SERVICING,\nREPAIR OR CORRECTION.\n\n  12. IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING\nWILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MAY MODIFY AND/OR\nREDISTRIBUTE THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES,\nINCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING\nOUT OF THE USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED\nTO LOSS OF DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY\nYOU OR THIRD PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER\nPROGRAMS), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE\nPOSSIBILITY OF SUCH DAMAGES.\n\n                     END OF TERMS AND CONDITIONS\n\n            How to Apply These Terms to Your New Programs\n\n  If you develop a new program, and you want it to be of the greatest\npossible use to the public, the best way to achieve this is to make it\nfree software which everyone can redistribute and change under these terms.\n\n  To do so, attach the following notices to the program.  It is safest\nto attach them to the start of each source file to most effectively\nconvey the exclusion of warranty; and each file should have at least\nthe \"copyright\" line and a pointer to where the full notice is found.\n\n    <one line to give the program's name and a brief idea of what it does.>\n    Copyright (C) <year>  <name of author>\n\n    This program is free software; you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation; either version 2 of the License, or\n    (at your option) any later version.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details.\n\n    You should have received a copy of the GNU General Public License along\n    with this program; if not, write to the Free Software Foundation, Inc.,\n    51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.\n\nAlso add information on how to contact you by electronic and paper mail.\n\nIf the program is interactive, make it output a short notice like this\nwhen it starts in an interactive mode:\n\n    Gnomovision version 69, Copyright (C) year name of author\n    Gnomovision comes with ABSOLUTELY NO WARRANTY; for details type `show w'.\n    This is free software, and you are welcome to redistribute it\n    under certain conditions; type `show c' for details.\n\nThe hypothetical commands `show w' and `show c' should show the appropriate\nparts of the General Public License.  Of course, the commands you use may\nbe called something other than `show w' and `show c'; they could even be\nmouse-clicks or menu items--whatever suits your program.\n\nYou should also get your employer (if you work as a programmer) or your\nschool, if any, to sign a \"copyright disclaimer\" for the program, if\nnecessary.  Here is a sample; alter the names:\n\n  Yoyodyne, Inc., hereby disclaims all copyright interest in the program\n  `Gnomovision' (which makes passes at compilers) written by James Hacker.\n\n  <signature of Ty Coon>, 1 April 1989\n  Ty Coon, President of Vice\n\nThis General Public License does not permit incorporating your program into\nproprietary programs.  If your program is a subroutine library, you may\nconsider it more useful to permit linking proprietary applications with the\nlibrary.  If this is what you want to do, use the GNU Lesser General\nPublic License instead of this License.\n"
        },
        {
          "name": "Procfile",
          "type": "blob",
          "size": 0.046875,
          "content": "all-tests: cargo watch -x 'test -F extra-tests'\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 5.119140625,
          "content": "<h1 align=\"center\">\n  <a href=\"https://flox.dev\" target=\"_blank\">\n    <picture>\n      <source media=\"(prefers-color-scheme: dark)\"  srcset=\"img/flox-logo-white-on-black.png\" />\n      <source media=\"(prefers-color-scheme: light)\" srcset=\"img/flox-logo-black-on-white.png\" />\n      <img src=\"img/flox-logo-black-on-white.png\" alt=\"flox logo\" />\n    </picture>\n  </a>\n</h1>\n\n<h2 align=\"center\">\n  Developer environments you can take with you\n</h2>\n\n<!-- TODO: here comes the graphic\n show immediate value proposition\n a short demo of basics would be good for now\n a bold statement: Free yourself from container walls.\n-->\n\n<h3 align=\"center\">\n   &emsp;\n   <a href=\"https://discourse.flox.dev\"><b>Discourse</b></a>\n   &emsp; | &emsp; \n   <a href=\"https://flox.dev/docs\"><b>Documentation</b></a>\n   &emsp; | &emsp; \n   <a href=\"https://flox.dev/blog\"><b>Blog</b></a>\n   &emsp; | &emsp;  \n   <a href=\"https://twitter.com/floxdevelopment\"><b>Twitter</b></a>\n   &emsp; | &emsp; \n   <a href=\"https://go.flox.dev/slack\"><b>Slack</b></a>\n   &emsp;\n</h3>\n\n<p align=\"center\">\n  <a href=\"https://github.com/flox/flox/blob/main/LICENSE\"> \n    <img alt=\"GitHub\" src=\"https://img.shields.io/github/license/flox/flox?style=flat-square\">\n  </a>\n  <a href=\"https://github.com/flox/flox/blob/main/CONTRIBUTING.md\">\n    <img alt=\"PRs Welcome\" src=\"https://img.shields.io/badge/PRs-welcome-brightgreen.svg?style=flat-square\"/>\n  </a>\n  <a href=\"https://github.com/flox/flox/releases\">\n    <img alt=\"flox version\" src=\"https://img.shields.io/github/v/release/flox/flox?style=flat-square\"/>\n    <!-- <img alt=\"GitHub tag (latest by date)\" src=\"https://img.shields.io/github/v/tag/flox/flox?label=Version&style=flat-square\"> -->\n  </a>\n</p>\n\n[Flox][website] is a virtual environment and package manager all in one. With Flox you \ncreate environments that layer and replace dependencies just where\nit matters, making them portable across the full software lifecycle.\n\nInstall packages from [the biggest open source repository\n(nixpkgs)][post-nixpkgs] that contains **more than 80.000 packages**.\n\nWith `flox` you can:<br/>\n&rarr; [Create environments](https://flox.dev/docs/tutorials/creating-environments)<br/>\n&rarr; [Share your environments with others](https://flox.dev/docs/tutorials/sharing-environments)<br/>\n&rarr; [Build container images](https://flox.dev/docs/tutorials/sharing-environments/#sharing-with-containers)<br/>\n&rarr; [... and much more][docs]<br/>\n\n<div align=\"center\">\n  <a href=\"https://flox.dev/docs/install-flox\">\n    <img alt=\"install flox\" src=\"https://img.shields.io/badge/Install-flox-brightgreen?style=for-the-badge\"/>\n  </a>\n</div>\n\n<!-- TODO: Compare with others\n- [Flox vs Docker]\n- [Flox vs Homebrew]\n- [Flox vs Bazel]\n- .. more (point to the website)\n-->\n\n## ⚡️ Quick start\n\n``` text\n$ flox init           # <- Create an environment in current directory ✨.\n\n$ flox search hello   # <- Search for a package 🚀.\n\n$ flox install hello  # <- Install packages into current directory's environment 🔨.\n\n$ flox activate       # <- Enter the current directory's environment 🎆.\n\nflox [my-project] $ hello   # <- Have fun 🎉.\nHello world!\n\nflox [my-project] $ exit    # <- Exit environment 💃.\n```\n\n## ❓ Why\n\nWe all build software on top of a dynamic set of tools,\nframeworks and packages, allowing us to move quickly and only\nbuild what’s necessary. However, each new wave of dev tooling\ninnovation results in an entirely new set of dependencies that\nneed to be managed. What starts as a simple app or microservice\nquickly grows complex, and\nturns into an expanding and fragmented supply\nchain. Flox brings reproducibility and consistency to complex\nsoftware development life-cycles.\n\n## 📘 Origins\n\nFlox began its life during the deployment of Nix at\nthe D. E. Shaw group, where it quickly proved invaluable\nby making Nix easier for newcomers and offering centralized\ncontrol over packages. As a result, their successful project\nbecame one of the largest, most impactful enterprise deployments\nof Nix.\n\n## 📫 Have a question? Want to chat? Ran into a problem?\n\nWe are happy to welcome you to our [Discourse forum][discourse] and answer your\nquestions! You can always reach out to us directly via the [Flox twitter\naccount][twitter] or chat with us directly on [Slack][slack].\n\n## 🤝 Found a bug? Missing a specific feature?\n\nFeel free to [file a new issue][new-issue] with a respective title and\ndescription on the `flox/flox` repository. If you already found a solution\nto your problem, we would love to review your pull request!\n\n## ⭐️ Contribute\n\nWe welcome contributions to this project. Please read the [Contributor\nguide](./CONTRIBUTING.md) first.\n\n## 🪪 License\n\nThe Flox CLI is licensed under the GPLv2. See [LICENSE](./LICENSE).\n\n\n[website]: https://flox.dev\n[discourse]: https://discourse.flox.dev\n[nix]: https://nixos.org\n[basics]:https://flox.dev/docs\n[share-envs]: https://flox.dev/docs/share-environments\n[images]: docs/tutorials/sharing-environments/#sharing-with-containers\n[docs]: https://flox.dev/docs\n[twitter]: https://twitter.com/floxdevelopment\n[slack]: https://go.flox.dev/slack\n[new-issue]: https://github.com/flox/flox/issues/new/choose\n[post-nixpkgs]: https://flox.dev/blog/nixpkgs\n"
        },
        {
          "name": "VERSION",
          "type": "blob",
          "size": 0.0068359375,
          "content": "1.3.10\n"
        },
        {
          "name": "assets",
          "type": "tree",
          "content": null
        },
        {
          "name": "buildenv",
          "type": "tree",
          "content": null
        },
        {
          "name": "cli",
          "type": "tree",
          "content": null
        },
        {
          "name": "flake.lock",
          "type": "blob",
          "size": 4.4794921875,
          "content": "{\n  \"nodes\": {\n    \"crane\": {\n      \"locked\": {\n        \"lastModified\": 1730652660,\n        \"narHash\": \"sha256-+XVYfmVXAiYA0FZT7ijHf555dxCe+AoAT5A6RU+6vSo=\",\n        \"owner\": \"ipetkov\",\n        \"repo\": \"crane\",\n        \"rev\": \"a4ca93905455c07cb7e3aca95d4faf7601cba458\",\n        \"type\": \"github\"\n      },\n      \"original\": {\n        \"owner\": \"ipetkov\",\n        \"repo\": \"crane\",\n        \"type\": \"github\"\n      }\n    },\n    \"fenix\": {\n      \"inputs\": {\n        \"nixpkgs\": [\n          \"nixpkgs\"\n        ],\n        \"rust-analyzer-src\": \"rust-analyzer-src\"\n      },\n      \"locked\": {\n        \"lastModified\": 1730702146,\n        \"narHash\": \"sha256-a657FU8MS5m0Y4pQvcmQPfvXYOPpxih7u2hU57Bn2i4=\",\n        \"owner\": \"nix-community\",\n        \"repo\": \"fenix\",\n        \"rev\": \"fa3610f841725c8e20fc0fab070ee60609fdd5ee\",\n        \"type\": \"github\"\n      },\n      \"original\": {\n        \"owner\": \"nix-community\",\n        \"repo\": \"fenix\",\n        \"type\": \"github\"\n      }\n    },\n    \"flake-compat\": {\n      \"flake\": false,\n      \"locked\": {\n        \"lastModified\": 1696426674,\n        \"narHash\": \"sha256-kvjfFW7WAETZlt09AgDn1MrtKzP7t90Vf7vypd3OL1U=\",\n        \"owner\": \"edolstra\",\n        \"repo\": \"flake-compat\",\n        \"rev\": \"0f9255e01c2351cc7d116c072cb317785dd33b33\",\n        \"type\": \"github\"\n      },\n      \"original\": {\n        \"owner\": \"edolstra\",\n        \"repo\": \"flake-compat\",\n        \"type\": \"github\"\n      }\n    },\n    \"gitignore\": {\n      \"inputs\": {\n        \"nixpkgs\": [\n          \"pre-commit-hooks\",\n          \"nixpkgs\"\n        ]\n      },\n      \"locked\": {\n        \"lastModified\": 1709087332,\n        \"narHash\": \"sha256-HG2cCnktfHsKV0s4XW83gU3F57gaTljL9KNSuG6bnQs=\",\n        \"owner\": \"hercules-ci\",\n        \"repo\": \"gitignore.nix\",\n        \"rev\": \"637db329424fd7e46cf4185293b9cc8c88c95394\",\n        \"type\": \"github\"\n      },\n      \"original\": {\n        \"owner\": \"hercules-ci\",\n        \"repo\": \"gitignore.nix\",\n        \"type\": \"github\"\n      }\n    },\n    \"nixpkgs\": {\n      \"locked\": {\n        \"lastModified\": 1729665710,\n        \"narHash\": \"sha256-AlcmCXJZPIlO5dmFzV3V2XF6x/OpNWUV8Y/FMPGd8Z4=\",\n        \"owner\": \"flox\",\n        \"repo\": \"nixpkgs\",\n        \"rev\": \"2768c7d042a37de65bb1b5b3268fc987e534c49d\",\n        \"type\": \"github\"\n      },\n      \"original\": {\n        \"owner\": \"flox\",\n        \"ref\": \"stable\",\n        \"repo\": \"nixpkgs\",\n        \"type\": \"github\"\n      }\n    },\n    \"nixpkgs-stable\": {\n      \"locked\": {\n        \"lastModified\": 1730741070,\n        \"narHash\": \"sha256-edm8WG19kWozJ/GqyYx2VjW99EdhjKwbY3ZwdlPAAlo=\",\n        \"owner\": \"NixOS\",\n        \"repo\": \"nixpkgs\",\n        \"rev\": \"d063c1dd113c91ab27959ba540c0d9753409edf3\",\n        \"type\": \"github\"\n      },\n      \"original\": {\n        \"owner\": \"NixOS\",\n        \"ref\": \"nixos-24.05\",\n        \"repo\": \"nixpkgs\",\n        \"type\": \"github\"\n      }\n    },\n    \"pre-commit-hooks\": {\n      \"inputs\": {\n        \"flake-compat\": \"flake-compat\",\n        \"gitignore\": \"gitignore\",\n        \"nixpkgs\": [\n          \"nixpkgs\"\n        ],\n        \"nixpkgs-stable\": \"nixpkgs-stable\"\n      },\n      \"locked\": {\n        \"lastModified\": 1732021966,\n        \"narHash\": \"sha256-mnTbjpdqF0luOkou8ZFi2asa1N3AA2CchR/RqCNmsGE=\",\n        \"owner\": \"cachix\",\n        \"repo\": \"pre-commit-hooks.nix\",\n        \"rev\": \"3308484d1a443fc5bc92012435d79e80458fe43c\",\n        \"type\": \"github\"\n      },\n      \"original\": {\n        \"owner\": \"cachix\",\n        \"repo\": \"pre-commit-hooks.nix\",\n        \"type\": \"github\"\n      }\n    },\n    \"root\": {\n      \"inputs\": {\n        \"crane\": \"crane\",\n        \"fenix\": \"fenix\",\n        \"nixpkgs\": \"nixpkgs\",\n        \"pre-commit-hooks\": \"pre-commit-hooks\",\n        \"t3-src\": \"t3-src\"\n      }\n    },\n    \"rust-analyzer-src\": {\n      \"flake\": false,\n      \"locked\": {\n        \"lastModified\": 1730645367,\n        \"narHash\": \"sha256-RnmBO+9zmZ3NpU6+NfYUDRg31dsPZ17xUqXVw/ZOKZ8=\",\n        \"owner\": \"rust-lang\",\n        \"repo\": \"rust-analyzer\",\n        \"rev\": \"e44691a60443f1246a077df659607ca89f2ddc58\",\n        \"type\": \"github\"\n      },\n      \"original\": {\n        \"owner\": \"rust-lang\",\n        \"ref\": \"nightly\",\n        \"repo\": \"rust-analyzer\",\n        \"type\": \"github\"\n      }\n    },\n    \"t3-src\": {\n      \"flake\": false,\n      \"locked\": {\n        \"lastModified\": 1734542708,\n        \"narHash\": \"sha256-D0igUpqO2Es9QyhcJtPUc1rInSVC96lrx4z+takOwWg=\",\n        \"owner\": \"flox\",\n        \"repo\": \"t3\",\n        \"rev\": \"813ed220eab7f678a1bfbf70e4145d9de738d562\",\n        \"type\": \"github\"\n      },\n      \"original\": {\n        \"owner\": \"flox\",\n        \"repo\": \"t3\",\n        \"type\": \"github\"\n      }\n    }\n  },\n  \"root\": \"root\",\n  \"version\": 7\n}\n"
        },
        {
          "name": "flake.nix",
          "type": "blob",
          "size": 7.7607421875,
          "content": "# ============================================================================ #\n#\n# A cross-platform environment manager with sharing as a service.\n#\n# ---------------------------------------------------------------------------- #\n{\n  description = \"flox - Harness the power of Nix\";\n\n  nixConfig.extra-substituters = [ \"https://cache.flox.dev\" ];\n  nixConfig.extra-trusted-public-keys = [\n    \"flox-cache-public-1:7F4OyH7ZCnFhcze3fJdfyXYLQw/aV7GEed86nQ7IsOs=\"\n  ];\n\n  # Roll forward monthly as **our** stable branch advances. Note that we also\n  # build against the staging branch in CI to detect regressions before they\n  # reach stable.\n  inputs.nixpkgs.url = \"github:flox/nixpkgs/stable\";\n\n  inputs.pre-commit-hooks.url = \"github:cachix/pre-commit-hooks.nix\";\n  inputs.pre-commit-hooks.inputs.nixpkgs.follows = \"nixpkgs\";\n\n  inputs.crane.url = \"github:ipetkov/crane\";\n\n  inputs.fenix.url = \"github:nix-community/fenix\";\n  inputs.fenix.inputs.nixpkgs.follows = \"nixpkgs\";\n\n  inputs.t3-src.url = \"github:flox/t3\";\n  inputs.t3-src.flake = false;\n\n  # -------------------------------------------------------------------------- #\n\n  outputs =\n    inputs:\n    let\n      # ------------------------------------------------------------------------ #\n      nixpkgs.legacyPackages = {\n        inherit (inputs.nixpkgs.legacyPackages)\n          x86_64-linux\n          x86_64-darwin\n          aarch64-linux\n          aarch64-darwin\n          ;\n      };\n      nixpkgs.lib = inputs.nixpkgs.lib;\n    in\n    rec {\n      # Overlays\n      # --------\n      overlays.deps = nixpkgs.lib.composeManyExtensions [\n        (final: prev: {\n          # Add IWYU pragmas to `nlohmann_json'\n          # ( _include what you use_ extensions to headers for static analysis )\n          nlohmann_json = final.callPackage ./pkgs/nlohmann_json { inherit (prev) nlohmann_json; };\n\n          # Uncomment to compile Nix with debug symbols on Linux\n          # nix = final.enableDebugging (final.callPackage ./pkgs/nix {});\n          nix = final.callPackage ./pkgs/nix { };\n\n          cpp-semver = final.callPackage ./pkgs/cpp-semver { };\n          t3 = final.callPackage ./pkgs/t3 { inherit (inputs) t3-src; };\n        })\n        inputs.fenix.overlays.default\n      ];\n\n      # Packages defined in this repository.\n      overlays.flox =\n        final: prev:\n        let\n          callPackage = final.lib.callPackageWith (\n            final\n            // {\n              inherit inputs; # passing in inputs... beware\n              inherit (inputs) self;\n              pkgsFor = final;\n            }\n          );\n        in\n        {\n          # Generates a `.git/hooks/pre-commit' script.\n          pre-commit-check = callPackage ./pkgs/pre-commit-check { inherit (inputs) pre-commit-hooks; };\n\n          GENERATED_DATA = ./test_data/generated;\n          MANUALLY_GENERATED = ./test_data/manually_generated;\n\n          # We depend on several nightly features of rustfmt,\n          # so pick the current nightly version.\n          # We're using `default.withComponents`\n          # which _should_ only pull the nightly rustfmt component.\n          # Alternatively, we could use nixpkgs.rustfmt,\n          # and rebuild with a (stable) fenix toolchain and `asNightly = true`,\n          # which would avoid the need to pull another channel altogether.\n          rustfmt = final.fenix.default.withComponents [ \"rustfmt\" ];\n          rust-toolchain = final.fenix.stable;\n\n          rust-external-deps = callPackage ./pkgs/rust-external-deps { };\n          rust-internal-deps = callPackage ./pkgs/rust-internal-deps { };\n\n          # (Linux-only) LD_AUDIT library for using dynamic libraries in Flox envs.\n          ld-floxlib = callPackage ./pkgs/ld-floxlib { };\n          flox-src = callPackage ./pkgs/flox-src { };\n          flox-activation-scripts = callPackage ./pkgs/flox-activation-scripts { };\n          flox-package-builder = callPackage ./pkgs/flox-package-builder { };\n\n          # Package Database Utilities: scrape, search, and resolve.\n          flox-nix-plugins = callPackage ./pkgs/flox-nix-plugins { };\n          flox-buildenv = callPackage ./pkgs/flox-buildenv { };\n          flox-watchdog = callPackage ./pkgs/flox-watchdog { }; # Flox Command Line Interface ( development build ).\n          flox-activations = callPackage ./pkgs/flox-activations { };\n          flox-cli = callPackage ./pkgs/flox-cli { };\n          flox-manpages = callPackage ./pkgs/flox-manpages { }; # Flox Command Line Interface Manpages\n          flox = callPackage ./pkgs/flox { }; # Flox Command Line Interface ( production build ).\n\n          # Wrapper scripts for running test suites.\n          flox-cli-tests = callPackage ./pkgs/flox-cli-tests { };\n        };\n\n      overlays.development = final: prev: {\n        floxDevelopmentPackages = prev.lib.makeScope prev.newScope (self: {\n          rust-internal-deps = prev.rust-internal-deps.override {\n            flox-buildenv = null;\n            flox-package-builder = null;\n            flox-nix-plugins = null;\n            flox-mk-container = null;\n          };\n\n          flox-cli = prev.flox-cli.override {\n            flox-activation-scripts = null;\n            flox-watchdog = null;\n            rust-internal-deps = self.rust-internal-deps;\n          };\n          flox-watchdog = prev.flox-watchdog.override {\n            rust-internal-deps = self.rust-internal-deps;\n          };\n          flox-activations = prev.flox-activations.override { };\n          flox-activation-scripts = prev.flox-activation-scripts.override {\n            flox-activations = null;\n          };\n          flox-package-builder = prev.flox-package-builder.override { };\n          flox-buildenv = prev.flox-buildenv.override {\n            flox-activation-scripts = null;\n          };\n          checksFor = checks.${prev.system};\n\n          flox-cli-tests = prev.flox-cli-tests.override {\n            PROJECT_TESTS_DIR = \"/cli/tests\";\n            NIX_PLUGINS = null;\n            FLOX_BIN = null;\n            WATCHDOG_BIN = null;\n            FLOX_ACTIVATIONS_BIN = null;\n            BUILDENV_BIN = null;\n            flox-activation-scripts = null;\n          };\n        });\n      };\n      # Composes dependency overlays and the overlay defined here.\n      overlays.default = nixpkgs.lib.composeManyExtensions [\n        overlays.deps\n        overlays.flox\n        overlays.development\n      ];\n\n      # ------------------------------------------------------------------------ #\n\n      # Apply overlays to the `nixpkgs` _base_ set.\n      # This is exposed as an output later; but we don't use the name\n      # `legacyPackages' to avoid checking the full closure with\n      # `nix flake check' and `nix search'.\n      pkgsContext = builtins.mapAttrs (system: pkgs: pkgs.extend overlays.default) nixpkgs.legacyPackages;\n\n      # ------------------------------------------------------------------------ #\n\n      checks = builtins.mapAttrs (system: pkgs: { inherit (pkgs) pre-commit-check; }) pkgsContext;\n\n      # ------------------------------------------------------------------------ #\n\n      packages = builtins.mapAttrs (system: pkgs: {\n        inherit (pkgs)\n          flox-activation-scripts\n          flox-nix-plugins\n          flox-buildenv\n          flox-package-builder\n          flox-watchdog\n          flox-activations\n          flox-cli\n          flox-cli-tests\n          flox-manpages\n          flox\n          ld-floxlib\n          pre-commit-check\n          rust-external-deps\n          rust-internal-deps\n          floxDevelopmentPackages\n          ;\n\n        default = pkgs.flox;\n      }) pkgsContext;\n\n      # ------------------------------------------------------------------------ #\n      devShells = builtins.mapAttrs (system: pkgsBase: {\n        default = pkgsBase.floxDevelopmentPackages.callPackage ./shells/default { };\n      }) pkgsContext;\n    }; # End `outputs'\n\n  # -------------------------------------------------------------------------- #\n}\n"
        },
        {
          "name": "img",
          "type": "tree",
          "content": null
        },
        {
          "name": "ld-floxlib",
          "type": "tree",
          "content": null
        },
        {
          "name": "mkContainer",
          "type": "tree",
          "content": null
        },
        {
          "name": "nix-plugins",
          "type": "tree",
          "content": null
        },
        {
          "name": "package-builder",
          "type": "tree",
          "content": null
        },
        {
          "name": "pkgs",
          "type": "tree",
          "content": null
        },
        {
          "name": "resolver",
          "type": "tree",
          "content": null
        },
        {
          "name": "shells",
          "type": "tree",
          "content": null
        },
        {
          "name": "test_data",
          "type": "tree",
          "content": null
        },
        {
          "name": "treefmt.toml",
          "type": "blob",
          "size": 0.2861328125,
          "content": "# One CLI to format the code tree - https://git.numtide.com/numtide/treefmt\n\n[formatter.nix]\n# Formatter to run\ncommand = \"nixfmt\"\n# Command-line arguments for the command\noptions = []\n# Glob pattern of files to include\nincludes = [ \"*.nix\" ]\n# Glob patterns of files to exclude\nexcludes = []\n"
        }
      ]
    }
  ]
}