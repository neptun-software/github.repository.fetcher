{
  "metadata": {
    "timestamp": 1736709110196,
    "page": 275,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjI4MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "nix-rust/nix",
      "stars": 2716,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".cirrus.yml",
          "type": "blob",
          "size": 2.90234375,
          "content": "cargo_cache:\n  folder: $CARGO_HOME/registry\n  fingerprint_script: cat Cargo.lock || echo \"\"\n\nenv:\n  # Build by default; don't just check\n  BUILD: build\n  CLIPPYFLAGS: -D warnings -A unknown-lints\n  RUSTFLAGS: -D warnings\n  RUSTDOCFLAGS: -D warnings\n  TOOL: cargo\n  MSRV: 1.69.0\n  ZFLAGS:\n\n# Tests that don't require executing the build binaries\nbuild: &BUILD\n  build_script:\n    - . $HOME/.cargo/env || true\n    - $TOOL -Vv\n    - rustc -Vv\n    - $TOOL $BUILD $ZFLAGS --target $TARGET --all-targets --all-features\n    - $TOOL doc $ZFLAGS --no-deps --target $TARGET --all-features\n    - $TOOL clippy $ZFLAGS --target $TARGET --all-targets --all-features -- $CLIPPYFLAGS\n    - if [ -z \"$NOHACK\" ]; then mkdir -p $HOME/.cargo/bin; export PATH=$HOME/.cargo/bin:$PATH; fi\n    - if [ -z \"$NOHACK\" ]; then curl -LsSf https://github.com/taiki-e/cargo-hack/releases/latest/download/cargo-hack-${HOST:-$TARGET}.tar.gz | tar xzf - -C ~/.cargo/bin; fi\n    - if [ -z \"$NOHACK\" ]; then $TOOL hack $ZFLAGS check --target $TARGET --each-feature; fi\n\n# Tests that do require executing the binaries\ntest: &TEST\n  << : *BUILD\n  test_script:\n    - . $HOME/.cargo/env || true\n    - $TOOL test --target $TARGET\n\n# Test FreeBSD in a full VM.  Test the i686 target too, in the\n# same VM.  The binary will be built in 32-bit mode, but will execute on a\n# 64-bit kernel and in a 64-bit environment.  Our tests don't execute any of\n# the system's binaries, so the environment shouldn't matter.\ntask:\n  env:\n    TARGET: x86_64-unknown-freebsd\n  matrix:\n    - name: FreeBSD 14 amd64 & i686\n      freebsd_instance:\n        image: freebsd-14-1-release-amd64-ufs\n        cpu: 1\n      # Enable tests that would fail on FreeBSD 12\n      RUSTFLAGS: --cfg fbsd14 -D warnings\n      RUSTDOCFLAGS: --cfg fbsd14\n  setup_script:\n    - kldload mqueuefs\n    - fetch https://sh.rustup.rs -o rustup.sh\n    - sh rustup.sh -y --profile=minimal --default-toolchain $MSRV\n    - . $HOME/.cargo/env\n    - rustup target add i686-unknown-freebsd\n    - rustup component add clippy\n  << : *TEST\n  i386_test_script:\n    - . $HOME/.cargo/env\n    - cargo build --target i686-unknown-freebsd --all-features\n    - cargo doc --no-deps --target i686-unknown-freebsd --all-features\n    - cargo test --target i686-unknown-freebsd\n  i386_feature_script:\n    - . $HOME/.cargo/env\n    - if [ -z \"$NOHACK\" ]; then cargo hack check --each-feature --target i686-unknown-freebsd; fi\n  before_cache_script: rm -rf $CARGO_HOME/registry/index\n\n# Tasks for Linux aarch64 native builds \ntask:\n  matrix:\n    - name: Linux aarch64 gnu\n      arm_container:\n        image: rust:1.69.0\n        cpu: 1\n      env:\n        TARGET: aarch64-unknown-linux-gnu\n    - name: Linux aarch64 musl\n      arm_container:\n        image: rust:1.69.0\n        cpu: 1\n      env:\n        TARGET: aarch64-unknown-linux-musl\n  setup_script:\n    - rustup target add $TARGET\n    - rustup component add clippy\n  << : *TEST\n  before_cache_script: rm -rf $CARGO_HOME/registry/index\n"
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.025390625,
          "content": "/CHANGELOG.md merge=union\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.080078125,
          "content": "syntax: glob\nCargo.lock\ntarget\n.idea\n*.diff\n*.rej\n*.orig\n.*.swn\n.*.swo\n.*.swp\n*.a\n"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 93.080078125,
          "content": "All notable changes to this project will be documented in this file.\nThis project adheres to [Semantic Versioning](https://semver.org/).\n\n# Change Log\n\n## [0.29.0] - 2024-05-24\n\n\n### Added\n\n- Add `getregset()/setregset()` for Linux/glibc/x86/x86_64/aarch64/riscv64 and\n  `getregs()/setregs()` for Linux/glibc/aarch64/riscv64\n  ([#2044](https://github.com/nix-rust/nix/pull/2044))\n- Add socket option Ipv6Ttl for apple targets.\n  ([#2287](https://github.com/nix-rust/nix/pull/2287))\n- Add socket option UtunIfname.\n  ([#2325](https://github.com/nix-rust/nix/pull/2325))\n- make SigAction repr(transparent) & can be converted to the libc raw type\n  ([#2326](https://github.com/nix-rust/nix/pull/2326))\n- Add `From` trait implementation for conversions between `sockaddr_in` and\n  `SockaddrIn`, `sockaddr_in6` and `SockaddrIn6`\n  ([#2328](https://github.com/nix-rust/nix/pull/2328))\n- Add socket option ReusePortLb for FreeBSD.\n  ([#2332](https://github.com/nix-rust/nix/pull/2332))\n- Added support for openat2 on linux.\n  ([#2339](https://github.com/nix-rust/nix/pull/2339))\n- Add if_indextoname function.\n  ([#2340](https://github.com/nix-rust/nix/pull/2340))\n- Add `mount` and `unmount` API for apple targets.\n  ([#2347](https://github.com/nix-rust/nix/pull/2347))\n- Added `_PC_MIN_HOLE_SIZE` for `pathconf` and `fpathconf`.\n  ([#2349](https://github.com/nix-rust/nix/pull/2349))\n- Added `impl AsFd for pty::PtyMaster`\n  ([#2355](https://github.com/nix-rust/nix/pull/2355))\n- Add `open` flag `O_SEARCH` to AIX, Empscripten, FreeBSD, Fuchsia, solarish,\n  WASI ([#2374](https://github.com/nix-rust/nix/pull/2374))\n- Add prctl function `prctl_set_vma_anon_name` for Linux/Android.\n  ([#2378](https://github.com/nix-rust/nix/pull/2378))\n- Add `sync(2)` for `apple_targets/solarish/haiku/aix/hurd`, `syncfs(2)` for\n  `hurd` and `fdatasync(2)` for `aix/hurd`\n  ([#2379](https://github.com/nix-rust/nix/pull/2379))\n- Add fdatasync support for Apple targets.\n  ([#2380](https://github.com/nix-rust/nix/pull/2380))\n- Add `fcntl::OFlag::O_PATH` for FreeBSD and Fuchsia\n  ([#2382](https://github.com/nix-rust/nix/pull/2382))\n- Added `PathconfVar::MIN_HOLE_SIZE` for apple_targets.\n  ([#2388](https://github.com/nix-rust/nix/pull/2388))\n- Add `open` flag `O_SEARCH` to apple_targets\n  ([#2391](https://github.com/nix-rust/nix/pull/2391))\n- `O_DSYNC` may now be used with `aio_fsync` and `fcntl` on FreeBSD.\n  ([#2404](https://github.com/nix-rust/nix/pull/2404))\n- Added `Flock::relock` for upgrading and downgrading locks.\n  ([#2407](https://github.com/nix-rust/nix/pull/2407))\n\n### Changed\n\n- Change the `ForkptyResult` type to the following repr so that the\n  uninitialized\n  `master` field won't be accessed in the child process:\n\n  ```rs\n  pub enum ForkptyResult {\n      Parent {\n          child: Pid,\n          master: OwnedFd,\n      },\n      Child,\n  }\n  ``` ([#2315](https://github.com/nix-rust/nix/pull/2315))\n- Updated `cfg_aliases` dependency from version 0.1 to 0.2\n  ([#2322](https://github.com/nix-rust/nix/pull/2322))\n- Change the signature of `ptrace::write` and `ptrace::write_user` to make them\n  safe ([#2324](https://github.com/nix-rust/nix/pull/2324))\n- Allow use of `SignalFd` through shared reference\n\n  Like with many other file descriptors, concurrent use of signalfds is safe.\n  Changing the signal mask of and reading signals from a signalfd can now be\n  done\n  with the `SignalFd` API even if other references to it exist.\n  ([#2367](https://github.com/nix-rust/nix/pull/2367))\n- Changed tee, splice and vmsplice RawFd arguments to AsFd.\n  ([#2387](https://github.com/nix-rust/nix/pull/2387))\n- Added I/O safety to the sys/aio module.  Most functions that previously\n  accepted a `AsRawFd` argument now accept an `AsFd` instead.\n  ([#2401](https://github.com/nix-rust/nix/pull/2401))\n- `RecvMsg::cmsgs()` now returns a `Result`, and checks that cmsgs were not\n  truncated. ([#2413](https://github.com/nix-rust/nix/pull/2413))\n\n### Fixed\n\n- No longer panics when the `fanotify` queue overflows.\n  ([#2399](https://github.com/nix-rust/nix/pull/2399))\n- Fixed ControlMessageOwned::UdpGroSegments wrapped type from u16 to i32 to\n  reflect the used kernel's one.\n  ([#2406](https://github.com/nix-rust/nix/pull/2406))\n\n\n## [0.28.0] - 2024-02-24\n\n\n### Added\n\n- Added `mkdtemp` wrapper ([#1297](https://github.com/nix-rust/nix/pull/1297))\n- Add associated constants `UTIME_OMIT` `UTIME_NOW` for `TimeSpec`\n  ([#1879](https://github.com/nix-rust/nix/pull/1879))\n- Added `EventFd` type. ([#1945](https://github.com/nix-rust/nix/pull/1945))\n- - Added `impl From<Signal> for SigSet`.\n  - Added `impl std::ops::BitOr for SigSet`.\n  - Added `impl std::ops::BitOr for Signal`.\n  - Added `impl std::ops::BitOr<Signal> for SigSet`\n\n  ([#1959](https://github.com/nix-rust/nix/pull/1959))\n- Added `TlsGetRecordType` control message type and corresponding enum for\n  linux ([#2065](https://github.com/nix-rust/nix/pull/2065))\n- Added `Ipv6HopLimit` to `::nix::sys::socket::ControlMessage` for Linux,\n  MacOS, FreeBSD, DragonflyBSD, Android, iOS and Haiku.\n  ([#2074](https://github.com/nix-rust/nix/pull/2074))\n- Added `Icmp` and `IcmpV6` to `SockProtocol`\n  ([#2103](https://github.com/nix-rust/nix/pull/2103))\n- Added rfork support for FreeBSD in `unistd`\n  ([#2121](https://github.com/nix-rust/nix/pull/2121))\n- Added `MapFlags::map_hugetlb_with_size_log2` method for Linux targets\n  ([#2125](https://github.com/nix-rust/nix/pull/2125))\n- Added `mmap_anonymous` function\n  ([#2127](https://github.com/nix-rust/nix/pull/2127))\n- Added `mips32r6` and `mips64r6` support for signal, ioctl and ptrace\n  ([#2138](https://github.com/nix-rust/nix/pull/2138))\n- Added `F_GETPATH` FcntlFlags entry on Apple/NetBSD/DragonflyBSD for\n  `::nix::fcntl`. ([#2142](https://github.com/nix-rust/nix/pull/2142))\n- Added `F_KINFO` FcntlFlags entry on FreeBSD for `::nix::fcntl`.\n  ([#2152](https://github.com/nix-rust/nix/pull/2152))\n- Added `F_GETPATH_NOFIRMLINK` and `F_BARRIERFSYNC` FcntlFlags entry\n  on Apple for `::nix::fcntl`.\n  ([#2155](https://github.com/nix-rust/nix/pull/2155))\n- Added newtype `Flock` to automatically unlock a held flock upon drop.\n  Added `Flockable` trait to represent valid types for `Flock`.\n  ([#2170](https://github.com/nix-rust/nix/pull/2170))\n- Added `SetSockOpt` impls to enable Linux Kernel TLS on a TCP socket and to\n  import TLS parameters. ([#2175](https://github.com/nix-rust/nix/pull/2175))\n- - Added the `::nix::sys::socket::SocketTimestamp` enum for configuring the\n  `TsClock` (a.k.a `SO_TS_CLOCK`) sockopt\n  - Added FreeBSD's `ScmRealtime` and `ScmMonotonic` as new options in\n  `::nix::sys::socket::ControlMessageOwned`\n\n  ([#2187](https://github.com/nix-rust/nix/pull/2187))\n- Added new fanotify API: wrappers for `fanotify_init` and `fanotify_mark`\n  ([#2194](https://github.com/nix-rust/nix/pull/2194))\n- Added `SpecialCharacterindices` support for haiku.\n  ([#2195](https://github.com/nix-rust/nix/pull/2195))\n- Added `sys::sendfile` support for solaris/illumos.\n  ([#2198](https://github.com/nix-rust/nix/pull/2198))\n- impl Display for InterfaceFlags\n  ([#2206](https://github.com/nix-rust/nix/pull/2206))\n- Added `sendfilev` in sys::sendfile for solarish\n  ([#2207](https://github.com/nix-rust/nix/pull/2207))\n- Added `fctrl::SealFlag::F_SEAL_FUTURE_WRITE`\n  ([#2213](https://github.com/nix-rust/nix/pull/2213))\n- Added `Ipv6MulticastHops` as socket option to set and read.\n  ([#2234](https://github.com/nix-rust/nix/pull/2234))\n- Enable `ControlMessageOwned::Ipv4RecvIf` and\n  `ControlMessageOwned::Ipv4RecvDstAddr` for DragonFlyBSD\n  ([#2240](https://github.com/nix-rust/nix/pull/2240))\n- `ClockId::set_time()` and `time::clock_settime()` are now enabled on macOS\n  ([#2241](https://github.com/nix-rust/nix/pull/2241))\n- Added `IpBindAddressNoPort` sockopt to support `IP_BIND_ADDRESS_NO_PORT`\n  available on linux. ([#2244](https://github.com/nix-rust/nix/pull/2244))\n- Enable `MapFlags::map_hugetlb_with_size_log2` method for Android/Fuchsia\n  ([#2245](https://github.com/nix-rust/nix/pull/2245))\n- Added `TcpFastOpenConnect` sockopt to support `TCP_FASTOPEN_CONNECT`\n  available on linux. ([#2247](https://github.com/nix-rust/nix/pull/2247))\n- Add `reboot(2)` for OpenBSD/NetBSD\n  ([#2251](https://github.com/nix-rust/nix/pull/2251))\n- Added new `MemFdCreateFlag` constants to `sys::memfd` on Linux and Android\n  related to hugetlbfs support.\n  ([#2252](https://github.com/nix-rust/nix/pull/2252))\n- Expose the inner fd of `Kqueue` through:\n\n  * impl AsFd for Kqueue\n  * impl From\\<Kqueue\\> for OwnedFd\n\n  ([#2258](https://github.com/nix-rust/nix/pull/2258))\n- Added `sys::eventfd` support on FreeBSD\n  ([#2259](https://github.com/nix-rust/nix/pull/2259))\n- Added `MmapFlags::MAP_FIXED` constant in `sys::mman` for netbsd and openbsd\n  ([#2260](https://github.com/nix-rust/nix/pull/2260))\n- Added the `SO_LISTENQLIMIT` sockopt.\n  ([#2263](https://github.com/nix-rust/nix/pull/2263))\n- Enable the `AT_EMPTY_PATH` flag for the `fchownat()` function\n  ([#2267](https://github.com/nix-rust/nix/pull/2267))\n- Add `AtFlags::AT_EMPTY_PATH` for FreeBSD and Hurd\n  ([#2270](https://github.com/nix-rust/nix/pull/2270))\n- Enable `OFlag::O_DIRECTORY for Solarish\n  ([#2275](https://github.com/nix-rust/nix/pull/2275))\n- Added the `Backlog` wrapper type for the `listen` call.\n  ([#2276](https://github.com/nix-rust/nix/pull/2276))\n- Add `clock_nanosleep()` ([#2277](https://github.com/nix-rust/nix/pull/2277))\n- Enabled `O_DIRECT` in `fcntl::OFlags` for solarish\n  ([#2278](https://github.com/nix-rust/nix/pull/2278))\n- Added a new API sigsuspend.\n  ([#2279](https://github.com/nix-rust/nix/pull/2279))\n- - Added `errno::Errno::set` function\n  - Added `errno::Errno::set_raw` function\n  - Added `errno::Errno::last_raw` function\n  - Added `errno::Errno::from_raw` function\n\n  ([#2283](https://github.com/nix-rust/nix/pull/2283))\n- Enable the `AT_EMPTY_PATH` flag for the `linkat()` function\n  ([#2284](https://github.com/nix-rust/nix/pull/2284))\n- Enable unistd::{sync, syncfs} for Android\n  ([#2296](https://github.com/nix-rust/nix/pull/2296))\n\n### Changed\n\n- `poll` now takes `PollTimeout` replacing `libc::c_int`.\n  ([#1876](https://github.com/nix-rust/nix/pull/1876))\n- Deprecated `sys::eventfd::eventfd`.\n  ([#1945](https://github.com/nix-rust/nix/pull/1945))\n- `mmap`, `mmap_anonymous`, `munmap`, `mremap`, `madvise`, `msync`, `mprotect`,\n  `munlock` and `mlock` updated to use `NonNull`.\n  ([#2000](https://github.com/nix-rust/nix/pull/2000))\n- `mmap` function now accepts `F` instead of `Option<F>`\n  ([#2127](https://github.com/nix-rust/nix/pull/2127))\n- `PollFd::new` now takes a `BorrowedFd` argument, with relaxed lifetime\n    requirements relative to the previous version.\n  ([#2134](https://github.com/nix-rust/nix/pull/2134))\n- `FdSet::{insert, remove, contains}` now take `BorrowedFd` arguments, and have\n  relaxed lifetime requirements relative to 0.27.1.\n  ([#2136](https://github.com/nix-rust/nix/pull/2136))\n- The following APIs now take an implementation of `AsFd` rather than a\n    `RawFd`:\n\n    - `unistd::tcgetpgrp`\n    - `unistd::tcsetpgrp`\n    - `unistd::fpathconf`\n    - `unistd::ttyname`\n    - `unistd::getpeereid` ([#2137](https://github.com/nix-rust/nix/pull/2137))\n- Changed `openat()` and `Dir::openat()`, now take optional `dirfd`s\n  ([#2139](https://github.com/nix-rust/nix/pull/2139))\n- The MSRV is now 1.69 ([#2144](https://github.com/nix-rust/nix/pull/2144))\n- Changed function `SockaddrIn::ip()` to return `net::Ipv4Addr` and refactored\n  `SocketAddrV6::ip()` to be `const`\n  ([#2151](https://github.com/nix-rust/nix/pull/2151))\n- The following APIs now take optional `dirfd`s:\n\n  - `readlinkat()`\n  - `fstatat()`\n  - `mknodat()`\n  - `mkdirat()`\n  - `execveat()`\n\n  ([#2157](https://github.com/nix-rust/nix/pull/2157))\n- `Epoll::wait` now takes `EpollTimeout` replacing `isize`.\n  ([#2202](https://github.com/nix-rust/nix/pull/2202))\n- - Deprecated `errno::errno()` function (use `Errno::last_raw()`)\n  - Deprecated `errno::from_i32()` function (use `Errno::from_raw()`)\n  - Deprecated `errno::Errno::from_i32()` function (use `Errno::from_raw()`)\n\n  ([#2283](https://github.com/nix-rust/nix/pull/2283))\n\n### Fixed\n\n- Fix `SigSet` incorrect implementation of `Eq`, `PartialEq` and `Hash`\n  ([#1946](https://github.com/nix-rust/nix/pull/1946))\n- Fixed `::sys::socket::sockopt::IpMulticastTtl` by fixing the value of optlen\n  passed to `libc::setsockopt` and added tests.\n  ([#2072](https://github.com/nix-rust/nix/pull/2072))\n- Fixed the function signature of `recvmmsg`, potentially causing UB\n  ([#2119](https://github.com/nix-rust/nix/pull/2119))\n- Fix `SignalFd::set_mask`.  In 0.27.0 it would actually close the file\n  descriptor. ([#2141](https://github.com/nix-rust/nix/pull/2141))\n- Fixed UnixAddr::new for haiku, it did not record the `sun_len` value as\n  needed.\n  Fixed `sys::socket::addr::from_raw_parts` and\n  `sys::socket::Sockaddrlike::len` build for solaris.\n  ([#2242](https://github.com/nix-rust/nix/pull/2242))\n- Fixed solaris build globally.\n  ([#2248](https://github.com/nix-rust/nix/pull/2248))\n- Changed the `dup3` wrapper to perform a real call to `dup3` instead of\n  emulating it via `dup2` and `fcntl` to get rid of race condition\n  ([#2268](https://github.com/nix-rust/nix/pull/2268))\n- Fixed `::unistd::Group::members` using read_unaligned to avoid crash on\n  misaligned pointers ([#2311](https://github.com/nix-rust/nix/pull/2311))\n\n### Removed\n\n- The `FchownatFlags` type has been deprecated, please use `AtFlags` instead.\n  ([#2267](https://github.com/nix-rust/nix/pull/2267))\n- Removed the `dup3` wrapper on macOS, which was emulated via `dup2` and\n  `fcntl` and could cause a race condition. The `dup3` system call is not\n  supported on macOS. ([#2268](https://github.com/nix-rust/nix/pull/2268))\n- The `LinkatFlags` type has been deprecated, please use `AtFlags` instead.\n  ([#2284](https://github.com/nix-rust/nix/pull/2284))\n\n\n## [0.27.1] - 2023-08-28\n\n### Fixed\n\n- Fixed generating the documentation on docs.rs.\n  ([#2111](https://github.com/nix-rust/nix/pull/2111))\n\n## [0.27.0] - 2023-08-28\n### Added\n- Added `AT_EACCESS` to `AtFlags` on all platforms but android\n  ([#1995](https://github.com/nix-rust/nix/pull/1995))\n- Add `PF_ROUTE` to `SockType` on macOS, iOS, all of the BSDs, Fuchsia, Haiku, Illumos.\n  ([#1867](https://github.com/nix-rust/nix/pull/1867))\n- Added `nix::ucontext` module on `aarch64-unknown-linux-gnu`.\n  (#[1662](https://github.com/nix-rust/nix/pull/1662))\n- Added `CanRaw` to `SockProtocol` and `CanBcm` as a separate `SocProtocol` constant.\n  ([#1912](https://github.com/nix-rust/nix/pull/1912))\n- Added `Generic` and `NFLOG` to `SockProtocol`.\n  ([#2092](https://github.com/nix-rust/nix/pull/2092))\n- Added `mq_timedreceive` to `::nix::mqueue`.\n  ([#1966])(https://github.com/nix-rust/nix/pull/1966)\n- Added `LocalPeerPid` to `nix::sys::socket::sockopt` for macOS. ([#1967](https://github.com/nix-rust/nix/pull/1967))\n- Added `TFD_TIMER_CANCEL_ON_SET` to `::nix::sys::time::TimerSetTimeFlags` on Linux and Android.\n  ([#2040](https://github.com/nix-rust/nix/pull/2040))\n- Added `SOF_TIMESTAMPING_OPT_ID` and `SOF_TIMESTAMPING_OPT_TSONLY` to `nix::sys::socket::TimestampingFlag`.\n  ([#2048](https://github.com/nix-rust/nix/pull/2048))\n- Enabled socket timestamping options on Android. ([#2077](https://github.com/nix-rust/nix/pull/2077))\n- Added vsock support for macOS ([#2056](https://github.com/nix-rust/nix/pull/2056))\n- Added `SO_SETFIB` and `SO_USER_COOKIE` to `nix::sys::socket::sockopt` for FreeBSD.\n  ([#2085](https://github.com/nix-rust/nix/pull/2085))\n- Added `SO_RTABLE` for OpenBSD and `SO_ACCEPTFILTER` for FreeBSD/NetBSD to `nix::sys::socket::sockopt`.\n  ([#2085](https://github.com/nix-rust/nix/pull/2085))\n- Added `MSG_WAITFORONE` to `MsgFlags` on Android, Fuchsia, Linux, NetBSD,\n  FreeBSD, OpenBSD, and Solaris.\n  ([#2014](https://github.com/nix-rust/nix/pull/2014))\n- Added `SO_TS_CLOCK` for FreeBSD to `nix::sys::socket::sockopt`.\n  ([#2093](https://github.com/nix-rust/nix/pull/2093))\n- Added support for prctl in Linux.\n  (#[1550](https://github.com/nix-rust/nix/pull/1550))\n- `nix::socket` and `nix::select` are now available on Redox.\n  ([#2012](https://github.com/nix-rust/nix/pull/2012))\n- Implemented AsFd, AsRawFd, FromRawFd, and IntoRawFd for `mqueue::MqdT`.\n  ([#2097](https://github.com/nix-rust/nix/pull/2097))\n- Add the ability to set `kevent_flags` on `SigEvent`.\n  ([#1731](https://github.com/nix-rust/nix/pull/1731))\n\n### Changed\n\n- All Cargo features have been removed from the default set. Users will need to\n  specify which features they depend on in their Cargo.toml.\n  ([#2091](https://github.com/nix-rust/nix/pull/2091))\n- Implemented I/O safety for many, but not all, of Nix's APIs.  Many public\n  functions argument and return types have changed:\n  | Original Type | New Type              |\n  | ------------- | --------------------- |\n  | AsRawFd       | AsFd                  |\n  | RawFd         | BorrowedFd or OwnedFd |\n\n  (#[1906](https://github.com/nix-rust/nix/pull/1906))\n- Use I/O safety with `copy_file_range`, and expose it on FreeBSD.\n  (#[1906](https://github.com/nix-rust/nix/pull/1906))\n- The MSRV is now 1.65\n  ([#1862](https://github.com/nix-rust/nix/pull/1862))\n  ([#2104](https://github.com/nix-rust/nix/pull/2104))\n- The epoll interface now uses a type.\n  ([#1882](https://github.com/nix-rust/nix/pull/1882))\n- With I/O-safe type applied in `pty::OpenptyResult` and `pty::ForkptyResult`,\n  users no longer need to manually close the file descriptors in these types.\n  ([#1921](https://github.com/nix-rust/nix/pull/1921))\n- Refactored `name` parameter of `mq_open` and `mq_unlink` to be generic over\n   `NixPath`.\n  ([#2102](https://github.com/nix-rust/nix/pull/2102)).\n- Made `clone` unsafe, like `fork`.\n  ([#1993](https://github.com/nix-rust/nix/pull/1993))\n\n### Removed\n\n- `sys::event::{kevent, kevent_ts}` are deprecated in favor of\n  `sys::kevent::Kqueue::kevent`, and `sys::event::kqueue` is deprecated in\n  favor of `sys::kevent::Kqueue::new`.\n  ([#1943](https://github.com/nix-rust/nix/pull/1943))\n- Removed deprecated IoVec API.\n  ([#1855](https://github.com/nix-rust/nix/pull/1855))\n- Removed deprecated net APIs.\n  ([#1861](https://github.com/nix-rust/nix/pull/1861))\n- `nix::sys::signalfd::signalfd` is deprecated.  Use\n  `nix::sys::signalfd::SignalFd` instead.\n  ([#1938](https://github.com/nix-rust/nix/pull/1938))\n- Removed `SigEvent` support on Fuchsia, where it was unsound.\n  ([#2079](https://github.com/nix-rust/nix/pull/2079))\n- Removed `flock` from `::nix::fcntl` on Solaris.\n  ([#2082](https://github.com/nix-rust/nix/pull/2082))\n\n## [0.26.3] - 2023-08-27\n\n### Fixed\n- Fix: send `ETH_P_ALL` in htons format\n  ([#1925](https://github.com/nix-rust/nix/pull/1925))\n- Fix: `recvmsg` now sets the length of the received `sockaddr_un` field\n  correctly on Linux platforms. ([#2041](https://github.com/nix-rust/nix/pull/2041))\n- Fix potentially invalid conversions in\n  `SockaddrIn::from<std::net::SocketAddrV4>`,\n  `SockaddrIn6::from<std::net::SockaddrV6>`, `IpMembershipRequest::new`, and\n  `Ipv6MembershipRequest::new` with future Rust versions.\n  ([#2061](https://github.com/nix-rust/nix/pull/2061))\n- Fixed an incorrect lifetime returned from `recvmsg`.\n  ([#2095](https://github.com/nix-rust/nix/pull/2095))\n\n## [0.26.2] - 2023-01-18\n\n### Fixed\n\n- Fix `SockaddrIn6` bug that was swapping `flowinfo` and `scope_id` byte\n  ordering.\n  ([#1964](https://github.com/nix-rust/nix/pull/1964))\n\n## [0.26.1] - 2022-11-29\n### Fixed\n- Fix UB with `sys::socket::sockopt::SockType` using `SOCK_PACKET`.\n  ([#1821](https://github.com/nix-rust/nix/pull/1821))\n\n## [0.26.0] - 2022-11-29\n### Added\n\n- Added `SockaddrStorage::{as_unix_addr, as_unix_addr_mut}`\n  ([#1871](https://github.com/nix-rust/nix/pull/1871))\n- Added `MntFlags` and `unmount` on all of the BSDs.\n- Added `any()` and `all()` to `poll::PollFd`.\n  ([#1877](https://github.com/nix-rust/nix/pull/1877))\n- Add `MntFlags` and `unmount` on all of the BSDs.\n  ([#1849](https://github.com/nix-rust/nix/pull/1849))\n- Added a `Statfs::flags` method.\n  ([#1849](https://github.com/nix-rust/nix/pull/1849))\n- Added `NSFS_MAGIC` FsType on Linux and Android.\n  ([#1829](https://github.com/nix-rust/nix/pull/1829))\n- Added `sched_getcpu` on platforms that support it.\n  ([#1825](https://github.com/nix-rust/nix/pull/1825))\n- Added `sched_getaffinity` and `sched_setaffinity` on FreeBSD.\n  ([#1804](https://github.com/nix-rust/nix/pull/1804))\n- Added `line_discipline` field to `Termios` on Linux, Android and Haiku\n  ([#1805](https://github.com/nix-rust/nix/pull/1805))\n- Expose the memfd module on FreeBSD (memfd was added in FreeBSD 13)\n  ([#1808](https://github.com/nix-rust/nix/pull/1808))\n- Added `domainname` field of `UtsName` on Android and Linux\n  ([#1817](https://github.com/nix-rust/nix/pull/1817))\n- Re-export `RLIM_INFINITY` from `libc`\n  ([#1831](https://github.com/nix-rust/nix/pull/1831))\n- Added `syncfs(2)` on Linux\n  ([#1833](https://github.com/nix-rust/nix/pull/1833))\n- Added `faccessat(2)` on illumos\n  ([#1841](https://github.com/nix-rust/nix/pull/1841))\n- Added `eaccess()` on FreeBSD, DragonFly and Linux (glibc and musl).\n  ([#1842](https://github.com/nix-rust/nix/pull/1842))\n- Added `IP_TOS` `SO_PRIORITY` and `IPV6_TCLASS` sockopts for Linux\n  ([#1853](https://github.com/nix-rust/nix/pull/1853))\n- Added `new_unnamed` and `is_unnamed` for `UnixAddr` on Linux and Android.\n  ([#1857](https://github.com/nix-rust/nix/pull/1857))\n- Added `SockProtocol::Raw` for raw sockets\n  ([#1848](https://github.com/nix-rust/nix/pull/1848))\n- added `IP_MTU` (`IpMtu`) `IPPROTO_IP` sockopt on Linux and Android.\n  ([#1865](https://github.com/nix-rust/nix/pull/1865))\n\n### Changed\n\n- The MSRV is now 1.56.1\n  ([#1792](https://github.com/nix-rust/nix/pull/1792))\n- The `addr` argument of `sys::mman::mmap` is now of type `Option<NonZeroUsize>`.\n  ([#1870](https://github.com/nix-rust/nix/pull/1870))\n- The `length` argument of `sys::mman::mmap` is now of type `NonZeroUsize`.\n  ([#1873](https://github.com/nix-rust/nix/pull/1873))\n\n### Fixed\n\n- Fixed using `SockaddrStorage` to store a Unix-domain socket address on Linux.\n  ([#1871](https://github.com/nix-rust/nix/pull/1871))\n- Fix microsecond calculation for `TimeSpec`.\n  ([#1801](https://github.com/nix-rust/nix/pull/1801))\n- Fix `User::from_name` and `Group::from_name` panicking\n  when given a name containing a nul.\n  ([#1815](https://github.com/nix-rust/nix/pull/1815))\n- Fix `User::from_uid` and `User::from_name` crash on Android platform.\n  ([#1824](https://github.com/nix-rust/nix/pull/1824))\n- Workaround XNU bug causing netmasks returned by `getifaddrs` to misbehave.\n  ([#1788](https://github.com/nix-rust/nix/pull/1788))\n\n### Removed\n\n- Removed deprecated error constants and conversions.\n  ([#1860](https://github.com/nix-rust/nix/pull/1860))\n\n## [0.25.0] - 2022-08-13\n### Added\n\n- Added `faccessat`\n  ([#1780](https://github.com/nix-rust/nix/pull/1780))\n- Added `memfd` on Android.\n  (#[1773](https://github.com/nix-rust/nix/pull/1773))\n- Added `ETH_P_ALL` to `SockProtocol` enum\n  (#[1768](https://github.com/nix-rust/nix/pull/1768))\n- Added four non-standard Linux `SysconfVar` variants\n  (#[1761](https://github.com/nix-rust/nix/pull/1761))\n- Added const constructors for `TimeSpec` and `TimeVal`\n  (#[1760](https://github.com/nix-rust/nix/pull/1760))\n- Added `chflags`.\n  (#[1758](https://github.com/nix-rust/nix/pull/1758))\n- Added `aio_writev` and `aio_readv`.\n  (#[1713](https://github.com/nix-rust/nix/pull/1713))\n- impl `From<uid_t>` for `Uid` and `From<gid_t>` for `Gid`\n  (#[1727](https://github.com/nix-rust/nix/pull/1727))\n- impl `From<SockaddrIn>` for `std::net::SocketAddrV4` and\n  impl `From<SockaddrIn6>` for `std::net::SocketAddrV6`.\n  (#[1711](https://github.com/nix-rust/nix/pull/1711))\n- Added support for the `x86_64-unknown-haiku` target.\n  (#[1703](https://github.com/nix-rust/nix/pull/1703))\n- Added `ptrace::read_user` and `ptrace::write_user` for Linux.\n  (#[1697](https://github.com/nix-rust/nix/pull/1697))\n- Added `getrusage` and helper types `UsageWho` and `Usage`\n  (#[1747](https://github.com/nix-rust/nix/pull/1747))\n- Added the `DontRoute` SockOpt\n  (#[1752](https://github.com/nix-rust/nix/pull/1752))\n- Added `signal::SigSet::from_sigset_t_unchecked()`.\n  (#[1741](https://github.com/nix-rust/nix/pull/1741))\n- Added the `Ipv4OrigDstAddr` sockopt and control message.\n  (#[1772](https://github.com/nix-rust/nix/pull/1772))\n- Added the `Ipv6OrigDstAddr` sockopt and control message.\n  (#[1772](https://github.com/nix-rust/nix/pull/1772))\n- Added the `Ipv4SendSrcAddr` control message.\n  (#[1776](https://github.com/nix-rust/nix/pull/1776))\n\n### Changed\n\n- Reimplemented sendmmsg/recvmmsg to avoid allocations and with better API\n  (#[1744](https://github.com/nix-rust/nix/pull/1744))\n\n- Rewrote the aio module.  The new module:\n  * Does more type checking at compile time rather than runtime.\n  * Gives the caller control over whether and when to `Box` an aio operation.\n  * Changes the type of the `priority` arguments to `i32`.\n  * Changes the return type of `aio_return` to `usize`.\n  (#[1713](https://github.com/nix-rust/nix/pull/1713))\n- `nix::poll::ppoll`: `sigmask` parameter is now optional.\n  (#[1739](https://github.com/nix-rust/nix/pull/1739))\n- Changed `gethostname` to return an owned `OsString`.\n  (#[1745](https://github.com/nix-rust/nix/pull/1745))\n- `signal:SigSet` is now marked as `repr(transparent)`.\n  (#[1741](https://github.com/nix-rust/nix/pull/1741))\n\n### Removed\n\n- Removed support for resubmitting partially complete `lio_listio` operations.\n  It was too complicated, and didn't fit Nix's theme of zero-cost abstractions.\n  Instead, it can be reimplemented downstream.\n  (#[1713](https://github.com/nix-rust/nix/pull/1713))\n\n## [0.24.2] - 2022-07-17\n### Fixed\n\n- Fixed buffer overflow in `nix::sys::socket::recvfrom`.\n  (#[1763](https://github.com/nix-rust/nix/pull/1763))\n- Enabled `SockaddrStorage::{as_link_addr, as_link_addr_mut}` for Linux-like\n  operating systems.\n  (#[1729](https://github.com/nix-rust/nix/pull/1729))\n- Fixed `SockaddrLike::from_raw` implementations for `VsockAddr` and\n  `SysControlAddr`.\n  (#[1736](https://github.com/nix-rust/nix/pull/1736))\n\n## [0.24.1] - 2022-04-22\n### Fixed\n\n- Fixed `UnixAddr::size` on Linux-based OSes.\n  (#[1702](https://github.com/nix-rust/nix/pull/1702))\n\n## [0.24.0] - 2022-04-21\n### Added\n\n- Added fine-grained features flags.  Most Nix functionality can now be\n  conditionally enabled.  By default, all features are enabled.\n  (#[1611](https://github.com/nix-rust/nix/pull/1611))\n- Added statfs FS type magic constants for `target_os = \"android\"`\n  and synced constants with libc v0.2.121.\n  (#[1690](https://github.com/nix-rust/nix/pull/1690))\n- Added `fexecve` on DragonFly.\n  (#[1577](https://github.com/nix-rust/nix/pull/1577))\n- `sys::uio::IoVec` is now `Send` and `Sync`\n  (#[1582](https://github.com/nix-rust/nix/pull/1582))\n- Added `EPOLLEXCLUSIVE` on Android.\n  (#[1567](https://github.com/nix-rust/nix/pull/1567))\n- Added `fdatasync` for FreeBSD, Fuchsia, NetBSD, and OpenBSD.\n  (#[1581](https://github.com/nix-rust/nix/pull/1581))\n- Added `sched_setaffinity` and `sched_getaffinity` on DragonFly.\n  (#[1537](https://github.com/nix-rust/nix/pull/1537))\n- Added `posix_fallocate` on DragonFly.\n  (#[1621](https://github.com/nix-rust/nix/pull/1621))\n- Added `SO_TIMESTAMPING` support\n  (#[1547](https://github.com/nix-rust/nix/pull/1547))\n- Added getter methods to `MqAttr` struct\n  (#[1619](https://github.com/nix-rust/nix/pull/1619))\n- Added the `TxTime` sockopt and control message.\n  (#[1564](https://github.com/nix-rust/nix/pull/1564))\n- Added POSIX per-process timer support\n  (#[1622](https://github.com/nix-rust/nix/pull/1622))\n- Added `sendfile` on DragonFly.\n  (#[1615](https://github.com/nix-rust/nix/pull/1615))\n- Added `UMOUNT_NOFOLLOW`, `FUSE_SUPER_MAGIC` on Linux.\n  (#[1634](https://github.com/nix-rust/nix/pull/1634))\n- Added `getresuid`, `setresuid`, `getresgid`, and `setresgid` on DragonFly, FreeBSD, and OpenBSD.\n  (#[1628](https://github.com/nix-rust/nix/pull/1628))\n- Added `MAP_FIXED_NOREPLACE` on Linux.\n  (#[1636](https://github.com/nix-rust/nix/pull/1636))\n- Added `fspacectl` on FreeBSD\n  (#[1640](https://github.com/nix-rust/nix/pull/1640))\n- Added `accept4` on DragonFly, Emscripten, Fuchsia, Illumos, and NetBSD.\n  (#[1654](https://github.com/nix-rust/nix/pull/1654))\n- Added `AsRawFd` implementation on `OwningIter`.\n  (#[1563](https://github.com/nix-rust/nix/pull/1563))\n- Added `process_vm_readv` and `process_vm_writev` on Android.\n  (#[1557](https://github.com/nix-rust/nix/pull/1557))\n- Added `nix::ucontext` module on s390x.\n  (#[1662](https://github.com/nix-rust/nix/pull/1662))\n- Implemented `Extend`, `FromIterator`, and `IntoIterator` for `SigSet` and\n  added `SigSet::iter` and `SigSetIter`.\n  (#[1553](https://github.com/nix-rust/nix/pull/1553))\n- Added `ENOTRECOVERABLE` and `EOWNERDEAD` error codes on DragonFly.\n  (#[1665](https://github.com/nix-rust/nix/pull/1665))\n- Implemented `Read` and `Write` for `&PtyMaster`\n  (#[1664](https://github.com/nix-rust/nix/pull/1664))\n- Added `MSG_NOSIGNAL` for Android, Dragonfly, FreeBSD, Fuchsia, Haiku, Illumos, Linux, NetBSD, OpenBSD and Solaris.\n  (#[1670](https://github.com/nix-rust/nix/pull/1670))\n- Added `waitid`.\n  (#[1584](https://github.com/nix-rust/nix/pull/1584))\n- Added `Ipv6DontFrag` for android, iOS, linux and macOS.\n- Added `IpDontFrag` for iOS, macOS.\n  (#[1692](https://github.com/nix-rust/nix/pull/1692))\n\n### Changed\n\n- `mqueue` functions now operate on a distinct type, `nix::mqueue::MqdT`.\n  Accessors take this type by reference, not by value.\n  (#[1639](https://github.com/nix-rust/nix/pull/1639))\n- Removed `SigSet::extend` in favor of `<SigSet as Extend<Signal>>::extend`.\n  Because of this change, you now need `use std::iter::Extend` to call `extend`\n  on a `SigSet`.\n  (#[1553](https://github.com/nix-rust/nix/pull/1553))\n- Removed the the `PATH_MAX` restriction from APIs accepting paths. Paths\n  will now be allocated on the heap if they are too long. In addition, large\n  instruction count improvements (~30x) were made to path handling.\n  (#[1656](https://github.com/nix-rust/nix/pull/1656))\n- Changed `getrlimit` and `setrlimit` to use `rlim_t` directly\n  instead of `Option<rlim_t>`.\n  (#[1668](https://github.com/nix-rust/nix/pull/1668))\n- Deprecated `InetAddr` and `SockAddr` in favor of `SockaddrIn`, `SockaddrIn6`,\n  and `SockaddrStorage`.\n  (#[1684](https://github.com/nix-rust/nix/pull/1684))\n- Deprecated `IpAddr`, `Ipv4Addr`, and `Ipv6Addr` in favor of their equivalents\n  from the standard library.\n  (#[1685](https://github.com/nix-rust/nix/pull/1685))\n- `uname` now returns a `Result<UtsName>` instead of just a `UtsName` and\n  ignoring failures from libc.  And getters on the `UtsName` struct now return\n  an `&OsStr` instead of `&str`.\n  (#[1672](https://github.com/nix-rust/nix/pull/1672))\n- Replaced `IoVec` with `IoSlice` and `IoSliceMut`, and replaced `IoVec::from_slice` with\n  `IoSlice::new`. (#[1643](https://github.com/nix-rust/nix/pull/1643))\n\n### Fixed\n\n- `InetAddr::from_std` now sets the `sin_len`/`sin6_len` fields on the BSDs.\n  (#[1642](https://github.com/nix-rust/nix/pull/1642))\n- Fixed a panic in `LinkAddr::addr`.  That function now returns an `Option`.\n  (#[1675](https://github.com/nix-rust/nix/pull/1675))\n  (#[1677](https://github.com/nix-rust/nix/pull/1677))\n\n### Removed\n\n- Removed public access to the inner fields of `NetlinkAddr`, `AlgAddr`,\n  `SysControlAddr`, `LinkAddr`, and `VsockAddr`.\n  (#[1614](https://github.com/nix-rust/nix/pull/1614))\n- Removed `EventFlag::EV_SYSFLAG`.\n  (#[1635](https://github.com/nix-rust/nix/pull/1635))\n\n## [0.23.1] - 2021-12-16\n\n### Changed\n\n- Relaxed the bitflags requirement from 1.3.1 to 1.1.  This partially reverts\n  #1492.  From now on, the MSRV is not guaranteed to work with all versions of\n  all dependencies, just with some version of all dependencies.\n  (#[1607](https://github.com/nix-rust/nix/pull/1607))\n\n### Fixed\n\n- Fixed soundness issues in `FdSet::insert`, `FdSet::remove`, and\n  `FdSet::contains` involving file descriptors outside of the range\n  `0..FD_SETSIZE`.\n  (#[1575](https://github.com/nix-rust/nix/pull/1575))\n\n## [0.23.0] - 2021-09-28\n### Added\n\n- Added the `LocalPeerCred` sockopt.\n  (#[1482](https://github.com/nix-rust/nix/pull/1482))\n- Added `TimeSpec::from_duration` and `TimeSpec::from_timespec`\n  (#[1465](https://github.com/nix-rust/nix/pull/1465))\n- Added `IPV6_V6ONLY` sockopt.\n  (#[1470](https://github.com/nix-rust/nix/pull/1470))\n- Added `impl From<User> for libc::passwd` trait implementation to convert a `User`\n  into a `libc::passwd`. Consumes the `User` struct to give ownership over\n  the member pointers.\n  (#[1471](https://github.com/nix-rust/nix/pull/1471))\n- Added `pthread_kill`.\n  (#[1472](https://github.com/nix-rust/nix/pull/1472))\n- Added `mknodat`.\n  (#[1473](https://github.com/nix-rust/nix/pull/1473))\n- Added `setrlimit` and `getrlimit`.\n  (#[1302](https://github.com/nix-rust/nix/pull/1302))\n- Added `ptrace::interrupt` method for platforms that support `PTRACE_INTERRUPT`\n  (#[1422](https://github.com/nix-rust/nix/pull/1422))\n- Added `IP6T_SO_ORIGINAL_DST` sockopt.\n  (#[1490](https://github.com/nix-rust/nix/pull/1490))\n- Added the `PTRACE_EVENT_STOP` variant to the `sys::ptrace::Event` enum\n  (#[1335](https://github.com/nix-rust/nix/pull/1335))\n- Exposed `SockAddr::from_raw_sockaddr`\n  (#[1447](https://github.com/nix-rust/nix/pull/1447))\n- Added `TcpRepair`\n  (#[1503](https://github.com/nix-rust/nix/pull/1503))\n- Enabled `pwritev` and `preadv` for more operating systems.\n  (#[1511](https://github.com/nix-rust/nix/pull/1511))\n- Added support for `TCP_MAXSEG` TCP Maximum Segment Size socket options\n  (#[1292](https://github.com/nix-rust/nix/pull/1292))\n- Added `Ipv4RecvErr` and `Ipv6RecvErr` sockopts and associated control messages.\n  (#[1514](https://github.com/nix-rust/nix/pull/1514))\n- Added `AsRawFd` implementation on `PollFd`.\n  (#[1516](https://github.com/nix-rust/nix/pull/1516))\n- Added `Ipv4Ttl` and `Ipv6Ttl` sockopts.\n  (#[1515](https://github.com/nix-rust/nix/pull/1515))\n- Added `MAP_EXCL`, `MAP_ALIGNED_SUPER`, and `MAP_CONCEAL` mmap flags, and\n  exposed `MAP_ANONYMOUS` for all operating systems.\n  (#[1522](https://github.com/nix-rust/nix/pull/1522))\n  (#[1525](https://github.com/nix-rust/nix/pull/1525))\n  (#[1531](https://github.com/nix-rust/nix/pull/1531))\n  (#[1534](https://github.com/nix-rust/nix/pull/1534))\n- Added read/write accessors for 'events' on `PollFd`.\n  (#[1517](https://github.com/nix-rust/nix/pull/1517))\n\n### Changed\n\n- `FdSet::{contains, highest, fds}` no longer require a mutable reference.\n  (#[1464](https://github.com/nix-rust/nix/pull/1464))\n- `User::gecos` and corresponding `libc::passwd::pw_gecos` are supported on\n  64-bit Android, change conditional compilation to include the field in\n  64-bit Android builds\n  (#[1471](https://github.com/nix-rust/nix/pull/1471))\n- `eventfd`s are supported on Android, change conditional compilation to\n  include `sys::eventfd::eventfd` and `sys::eventfd::EfdFlags`for Android\n  builds.\n  (#[1481](https://github.com/nix-rust/nix/pull/1481))\n- Most enums that come from C, for example `Errno`, are now marked as\n  `#[non_exhaustive]`.\n  (#[1474](https://github.com/nix-rust/nix/pull/1474))\n- Many more functions, mostly contructors, are now `const`.\n  (#[1476](https://github.com/nix-rust/nix/pull/1476))\n  (#[1492](https://github.com/nix-rust/nix/pull/1492))\n- `sys::event::KEvent::filter` now returns a `Result` instead of being\n  infalliable.  The only cases where it will now return an error are cases\n  where it previously would've had undefined behavior.\n  (#[1484](https://github.com/nix-rust/nix/pull/1484))\n- Minimum supported Rust version is now 1.46.0.\n  ([#1492](https://github.com/nix-rust/nix/pull/1492))\n- Rework `UnixAddr` to encapsulate internals better in order to fix soundness\n  issues. No longer allows creating a `UnixAddr` from a raw `sockaddr_un`.\n  ([#1496](https://github.com/nix-rust/nix/pull/1496))\n- Raised bitflags to 1.3.0 and the MSRV to 1.46.0.\n  ([#1492](https://github.com/nix-rust/nix/pull/1492))\n\n### Fixed\n\n- `posix_fadvise` now returns errors in the conventional way, rather than as a\n  non-zero value in `Ok()`.\n  (#[1538](https://github.com/nix-rust/nix/pull/1538))\n- Added more errno definitions for better backwards compatibility with\n  Nix 0.21.0.\n  (#[1467](https://github.com/nix-rust/nix/pull/1467))\n- Fixed potential undefined behavior in `Signal::try_from` on some platforms.\n  (#[1484](https://github.com/nix-rust/nix/pull/1484))\n- Fixed buffer overflow in `unistd::getgrouplist`.\n  (#[1545](https://github.com/nix-rust/nix/pull/1545))\n\n\n### Removed\n\n- Removed a couple of termios constants on redox that were never actually\n  supported.\n  (#[1483](https://github.com/nix-rust/nix/pull/1483))\n- Removed `nix::sys::signal::NSIG`.  It was of dubious utility, and not correct\n  for all platforms.\n  (#[1484](https://github.com/nix-rust/nix/pull/1484))\n- Removed support for 32-bit Apple targets, since they've been dropped by both\n  Rustc and Xcode.\n  (#[1492](https://github.com/nix-rust/nix/pull/1492))\n- Deprecated `SockAddr/InetAddr::to_str` in favor of `ToString::to_string`\n  (#[1495](https://github.com/nix-rust/nix/pull/1495))\n- Removed `SigevNotify` on OpenBSD and Redox.\n  (#[1511](https://github.com/nix-rust/nix/pull/1511))\n\n## [0.22.3] - 22 January 2022\n### Changed\n- Relaxed the bitflags requirement from 1.3.1 to 1.1.  This partially reverts\n  #1492.  From now on, the MSRV is not guaranteed to work with all versions of\n  all dependencies, just with some version of all dependencies.\n  (#[1607](https://github.com/nix-rust/nix/pull/1607))\n\n## [0.22.2] - 28 September 2021\n### Fixed\n- Fixed buffer overflow in `unistd::getgrouplist`.\n  (#[1545](https://github.com/nix-rust/nix/pull/1545))\n- Added more errno definitions for better backwards compatibility with\n  Nix 0.21.0.\n  (#[1467](https://github.com/nix-rust/nix/pull/1467))\n\n## [0.22.1] - 13 August 2021\n### Fixed\n- Locked bitflags to < 1.3.0 to fix the build with rust < 1.46.0.\n\n### Removed\n- Removed a couple of termios constants on redox that were never actually\n  supported.\n  (#[1483](https://github.com/nix-rust/nix/pull/1483))\n\n## [0.22.0] - 9 July 2021\n### Added\n- Added `if_nameindex` (#[1445](https://github.com/nix-rust/nix/pull/1445))\n- Added `nmount` for FreeBSD.\n  (#[1453](https://github.com/nix-rust/nix/pull/1453))\n- Added `IpFreebind` socket option (sockopt) on Linux, Fuchsia and Android.\n  (#[1456](https://github.com/nix-rust/nix/pull/1456))\n- Added `TcpUserTimeout` socket option (sockopt) on Linux and Fuchsia.\n  (#[1457](https://github.com/nix-rust/nix/pull/1457))\n- Added `renameat2` for Linux\n  (#[1458](https://github.com/nix-rust/nix/pull/1458))\n- Added `RxqOvfl` support on Linux, Fuchsia and Android.\n  (#[1455](https://github.com/nix-rust/nix/pull/1455))\n\n### Changed\n- `ptsname_r` now returns a lossily-converted string in the event of bad UTF,\n  just like `ptsname`.\n  ([#1446](https://github.com/nix-rust/nix/pull/1446))\n- Nix's error type is now a simple wrapper around the platform's Errno.  This\n  means it is now `Into<std::io::Error>`.  It's also `Clone`, `Copy`, `Eq`, and\n  has a small fixed size.  It also requires less typing.  For example, the old\n  enum variant `nix::Error::Sys(nix::errno::Errno::EINVAL)` is now simply\n  `nix::Error::EINVAL`.\n  ([#1446](https://github.com/nix-rust/nix/pull/1446))\n\n## [0.21.2] - 29 September 2021\n### Fixed\n- Fixed buffer overflow in `unistd::getgrouplist`.\n  (#[1545](https://github.com/nix-rust/nix/pull/1545))\n\n## [0.21.1] - 13 August 2021\n### Fixed\n- Locked bitflags to < 1.3.0 to fix the build with rust < 1.46.0.\n\n### Removed\n- Removed a couple of termios constants on redox that were never actually\n  supported.\n  (#[1483](https://github.com/nix-rust/nix/pull/1483))\n\n## [0.21.0] - 31 May 2021\n### Added\n- Added `getresuid` and `getresgid`\n  (#[1430](https://github.com/nix-rust/nix/pull/1430))\n- Added TIMESTAMPNS support for linux\n  (#[1402](https://github.com/nix-rust/nix/pull/1402))\n- Added `sendfile64` (#[1439](https://github.com/nix-rust/nix/pull/1439))\n- Added `MS_LAZYTIME` to `MsFlags`\n  (#[1437](https://github.com/nix-rust/nix/pull/1437))\n\n### Changed\n- Made `forkpty` unsafe, like `fork`\n  (#[1390](https://github.com/nix-rust/nix/pull/1390))\n- Made `Uid`, `Gid` and `Pid` methods `from_raw` and `as_raw` a `const fn`\n  (#[1429](https://github.com/nix-rust/nix/pull/1429))\n- Made `Uid::is_root` a `const fn`\n  (#[1429](https://github.com/nix-rust/nix/pull/1429))\n- `AioCb` is now always pinned.  Once a `libc::aiocb` gets sent to the kernel,\n  its address in memory must not change.  Nix now enforces that by using\n  `std::pin`.  Most users won't need to change anything, except when using\n  `aio_suspend`.  See that method's documentation for the new usage.\n  (#[1440](https://github.com/nix-rust/nix/pull/1440))\n- `LioCb` is now constructed using a distinct `LioCbBuilder` struct.  This\n  avoids a soundness issue with the old `LioCb`.  Usage is similar but\n  construction now uses the builder pattern.  See the documentation for\n  details.\n  (#[1440](https://github.com/nix-rust/nix/pull/1440))\n- Minimum supported Rust version is now 1.41.0.\n  ([#1440](https://github.com/nix-rust/nix/pull/1440))\n- Errno aliases are now associated consts on `Errno`, instead of consts in the\n  `errno` module.\n  (#[1452](https://github.com/nix-rust/nix/pull/1452))\n\n### Fixed\n- Allow `sockaddr_ll` size, as reported by the Linux kernel, to be smaller then it's definition\n  (#[1395](https://github.com/nix-rust/nix/pull/1395))\n- Fix spurious errors using `sendmmsg` with multiple cmsgs\n  (#[1414](https://github.com/nix-rust/nix/pull/1414))\n- Added `Errno::EOPNOTSUPP` to FreeBSD, where it was missing.\n  (#[1452](https://github.com/nix-rust/nix/pull/1452))\n\n### Removed\n\n- Removed `sys::socket::accept4` from Android arm because libc removed it in\n  version 0.2.87.\n  ([#1399](https://github.com/nix-rust/nix/pull/1399))\n- `AioCb::from_boxed_slice` and `AioCb::from_boxed_mut_slice` have been\n  removed.  They were useful with earlier versions of Rust, but should no\n  longer be needed now that async/await are available.  `AioCb`s now work\n  exclusively with borrowed buffers, not owned ones.\n  (#[1440](https://github.com/nix-rust/nix/pull/1440))\n- Removed some Errno values from platforms where they aren't actually defined.\n  (#[1452](https://github.com/nix-rust/nix/pull/1452))\n\n## [0.20.2] - 28 September 2021\n### Fixed\n- Fixed buffer overflow in `unistd::getgrouplist`.\n  (#[1545](https://github.com/nix-rust/nix/pull/1545))\n\n## [0.20.1] - 13 August 2021\n### Fixed\n- Locked bitflags to < 1.3.0 to fix the build with rust < 1.46.0.\n\n### Removed\n- Removed a couple of termios constants on redox that were never actually\n  supported.\n  (#[1483](https://github.com/nix-rust/nix/pull/1483))\n\n## [0.20.0] - 20 February 2021\n### Added\n\n- Added a `passwd` field to `Group` (#[1338](https://github.com/nix-rust/nix/pull/1338))\n- Added `mremap` (#[1306](https://github.com/nix-rust/nix/pull/1306))\n- Added `personality` (#[1331](https://github.com/nix-rust/nix/pull/1331))\n- Added limited Fuchsia support (#[1285](https://github.com/nix-rust/nix/pull/1285))\n- Added `getpeereid` (#[1342](https://github.com/nix-rust/nix/pull/1342))\n- Implemented `IntoIterator` for `Dir`\n  (#[1333](https://github.com/nix-rust/nix/pull/1333)).\n\n### Changed\n\n- Minimum supported Rust version is now 1.40.0.\n  ([#1356](https://github.com/nix-rust/nix/pull/1356))\n- i686-apple-darwin has been demoted to Tier 2 support, because it's deprecated\n  by Xcode.\n  (#[1350](https://github.com/nix-rust/nix/pull/1350))\n- Fixed calling `recvfrom` on an `AddrFamily::Packet` socket\n  (#[1344](https://github.com/nix-rust/nix/pull/1344))\n\n### Fixed\n- `TimerFd` now closes the underlying fd on drop.\n  ([#1381](https://github.com/nix-rust/nix/pull/1381))\n- Define `*_MAGIC` filesystem constants on Linux s390x\n  (#[1372](https://github.com/nix-rust/nix/pull/1372))\n- mqueue, sysinfo, timespec, statfs, test_ptrace_syscall() on x32\n  (#[1366](https://github.com/nix-rust/nix/pull/1366))\n\n### Removed\n\n- `Dir`, `SignalFd`, and `PtyMaster` are no longer `Clone`.\n  (#[1382](https://github.com/nix-rust/nix/pull/1382))\n- Removed `SockLevel`, which hasn't been used for a few years\n  (#[1362](https://github.com/nix-rust/nix/pull/1362))\n- Removed both `Copy` and `Clone` from `TimerFd`.\n  ([#1381](https://github.com/nix-rust/nix/pull/1381))\n\n## [0.19.1] - 28 November 2020\n### Fixed\n- Fixed bugs in `recvmmsg`.\n  (#[1341](https://github.com/nix-rust/nix/pull/1341))\n\n## [0.19.0] - 6 October 2020\n### Added\n- Added Netlink protocol families to the `SockProtocol` enum\n  (#[1289](https://github.com/nix-rust/nix/pull/1289))\n- Added `clock_gettime`, `clock_settime`, `clock_getres`,\n  `clock_getcpuclockid` functions and `ClockId` struct.\n  (#[1281](https://github.com/nix-rust/nix/pull/1281))\n- Added wrapper functions for `PTRACE_SYSEMU` and `PTRACE_SYSEMU_SINGLESTEP`.\n  (#[1300](https://github.com/nix-rust/nix/pull/1300))\n- Add support for Vsock on Android rather than just Linux.\n  (#[1301](https://github.com/nix-rust/nix/pull/1301))\n- Added `TCP_KEEPCNT` and `TCP_KEEPINTVL` TCP keepalive options.\n  (#[1283](https://github.com/nix-rust/nix/pull/1283))\n### Changed\n- Expose `SeekData` and `SeekHole` on all Linux targets\n  (#[1284](https://github.com/nix-rust/nix/pull/1284))\n- Changed unistd::{execv,execve,execvp,execvpe,fexecve,execveat} to take both `&[&CStr]` and `&[CString]` as its list argument(s).\n  (#[1278](https://github.com/nix-rust/nix/pull/1278))\n- Made `unistd::fork` an unsafe funtion, bringing it in line with [libstd's decision](https://github.com/rust-lang/rust/pull/58059).\n  (#[1293](https://github.com/nix-rust/nix/pull/1293))\n\n## [0.18.0] - 26 July 2020\n### Added\n- Added `fchown(2)` wrapper.\n  (#[1257](https://github.com/nix-rust/nix/pull/1257))\n- Added support on linux systems for `MAP_HUGE_`_`SIZE`_ family of flags.\n  (#[1211](https://github.com/nix-rust/nix/pull/1211))\n- Added support for `F_OFD_*` `fcntl` commands on Linux and Android.\n  (#[1195](https://github.com/nix-rust/nix/pull/1195))\n- Added `env::clearenv()`: calls `libc::clearenv` on platforms\n  where it's available, and clears the environment of all variables\n  via `std::env::vars` and `std::env::remove_var` on others.\n  (#[1185](https://github.com/nix-rust/nix/pull/1185))\n- `FsType` inner value made public.\n  (#[1187](https://github.com/nix-rust/nix/pull/1187))\n- Added `unistd::setfsuid` and `unistd::setfsgid` to set the user or group\n  identity for filesystem checks per-thread.\n  (#[1163](https://github.com/nix-rust/nix/pull/1163))\n- Derived `Ord`, `PartialOrd` for `unistd::Pid` (#[1189](https://github.com/nix-rust/nix/pull/1189))\n- Added `select::FdSet::fds` method to iterate over file descriptors in a set.\n  ([#1207](https://github.com/nix-rust/nix/pull/1207))\n- Added support for UDP generic segmentation offload (GSO) and generic\n  receive offload (GRO) ([#1209](https://github.com/nix-rust/nix/pull/1209))\n- Added support for `sendmmsg` and `recvmmsg` calls\n  (#[1208](https://github.com/nix-rust/nix/pull/1208))\n- Added support for `SCM_CREDS` messages (`UnixCredentials`) on FreeBSD/DragonFly\n  (#[1216](https://github.com/nix-rust/nix/pull/1216))\n- Added `BindToDevice` socket option (sockopt) on Linux\n  (#[1233](https://github.com/nix-rust/nix/pull/1233))\n- Added `EventFilter` bitflags for `EV_DISPATCH` and `EV_RECEIPT` on OpenBSD.\n  (#[1252](https://github.com/nix-rust/nix/pull/1252))\n- Added support for `Ipv4PacketInfo` and `Ipv6PacketInfo` to `ControlMessage`.\n  (#[1222](https://github.com/nix-rust/nix/pull/1222))\n- `CpuSet` and `UnixCredentials` now implement `Default`.\n  (#[1244](https://github.com/nix-rust/nix/pull/1244))\n- Added `unistd::ttyname`\n  (#[1259](https://github.com/nix-rust/nix/pull/1259))\n- Added support for `Ipv4PacketInfo` and `Ipv6PacketInfo` to `ControlMessage` for iOS and Android.\n  (#[1265](https://github.com/nix-rust/nix/pull/1265))\n- Added support for `TimerFd`.\n  (#[1261](https://github.com/nix-rust/nix/pull/1261))\n\n### Changed\n- Changed `fallocate` return type from `c_int` to `()` (#[1201](https://github.com/nix-rust/nix/pull/1201))\n- Enabled `sys::ptrace::setregs` and `sys::ptrace::getregs` on x86_64-unknown-linux-musl target\n  (#[1198](https://github.com/nix-rust/nix/pull/1198))\n- On Linux, `ptrace::write` is now an `unsafe` function. Caveat programmer.\n  (#[1245](https://github.com/nix-rust/nix/pull/1245))\n- `execv`, `execve`, `execvp` and `execveat` in `::nix::unistd` and `reboot` in\n  `::nix::sys::reboot` now return `Result<Infallible>` instead of `Result<Void>` (#[1239](https://github.com/nix-rust/nix/pull/1239))\n- `sys::socket::sockaddr_storage_to_addr` is no longer `unsafe`.  So is\n  `offset_of!`.\n- `sys::socket::sockaddr_storage_to_addr`, `offset_of!`, and `Errno::clear` are\n  no longer `unsafe`.\n- `SockAddr::as_ffi_pair`,`sys::socket::sockaddr_storage_to_addr`, `offset_of!`,\n  and `Errno::clear` are no longer `unsafe`.\n  (#[1244](https://github.com/nix-rust/nix/pull/1244))\n- Several `Inotify` methods now take `self` by value instead of by reference\n  (#[1244](https://github.com/nix-rust/nix/pull/1244))\n- `nix::poll::ppoll`: `timeout` parameter is now optional, None is equivalent for infinite timeout.\n\n### Fixed\n\n- Fixed `getsockopt`.  The old code produced UB which triggers a panic with\n  Rust 1.44.0.\n  (#[1214](https://github.com/nix-rust/nix/pull/1214))\n\n- Fixed a bug in nix::unistd that would result in an infinite loop\n  when a group or user lookup required a buffer larger than\n  16KB. (#[1198](https://github.com/nix-rust/nix/pull/1198))\n- Fixed unaligned casting of `cmsg_data` to `af_alg_iv` (#[1206](https://github.com/nix-rust/nix/pull/1206))\n- Fixed `readlink`/`readlinkat` when reading symlinks longer than `PATH_MAX` (#[1231](https://github.com/nix-rust/nix/pull/1231))\n- `PollFd`, `EpollEvent`, `IpMembershipRequest`, `Ipv6MembershipRequest`,\n  `TimeVal`, and `IoVec` are now `repr(transparent)`.  This is required for\n  correctness's sake across all architectures and compilers, though now bugs\n  have been reported so far.\n  (#[1243](https://github.com/nix-rust/nix/pull/1243))\n- Fixed unaligned pointer read in `Inotify::read_events`.\n  (#[1244](https://github.com/nix-rust/nix/pull/1244))\n\n### Removed\n\n- Removed `sys::socket::addr::from_libc_sockaddr` from the public API.\n  (#[1215](https://github.com/nix-rust/nix/pull/1215))\n- Removed `sys::termios::{get_libc_termios, get_libc_termios_mut, update_wrapper`\n  from the public API. These were previously hidden in the docs but still usable\n  by downstream.\n  (#[1235](https://github.com/nix-rust/nix/pull/1235))\n\n- Nix no longer implements `NixPath` for `Option<P> where P: NixPath`.  Most\n  Nix functions that accept `NixPath` arguments can't do anything useful with\n  `None`.  The exceptions (`mount` and `quotactl_sync`) already take explicitly\n  optional arguments.\n  (#[1242](https://github.com/nix-rust/nix/pull/1242))\n\n- Removed `unistd::daemon` and `unistd::pipe2` on OSX and ios\n  (#[1255](https://github.com/nix-rust/nix/pull/1255))\n\n- Removed `sys::event::FilterFlag::NOTE_EXIT_REPARENTED` and\n  `sys::event::FilterFlag::NOTE_REAP` on OSX and ios.\n  (#[1255](https://github.com/nix-rust/nix/pull/1255))\n\n- Removed `sys::ptrace::ptrace` on Android and Linux.\n  (#[1255](https://github.com/nix-rust/nix/pull/1255))\n\n- Dropped support for powerpc64-unknown-linux-gnu\n  (#[1266](https://github.com/nix-rust/nix/pull/1268))\n\n## [0.17.0] - 3 February 2020\n### Added\n- Add `CLK_TCK` to `SysconfVar`\n  (#[1177](https://github.com/nix-rust/nix/pull/1177))\n### Removed\n- Removed deprecated Error::description from error types\n  (#[1175](https://github.com/nix-rust/nix/pull/1175))\n\n## [0.16.1] - 23 December 2019\n### Fixed\n\n- Fixed the build for OpenBSD\n  (#[1168](https://github.com/nix-rust/nix/pull/1168))\n\n## [0.16.0] - 1 December 2019\n### Added\n- Added `ptrace::seize()`: similar to `attach()` on Linux\n  but with better-defined semantics.\n  (#[1154](https://github.com/nix-rust/nix/pull/1154))\n\n- Added `Signal::as_str()`: returns signal name as `&'static str`\n  (#[1138](https://github.com/nix-rust/nix/pull/1138))\n\n- Added `posix_fallocate`.\n  ([#1105](https://github.com/nix-rust/nix/pull/1105))\n\n- Implemented `Default` for `FdSet`\n  ([#1107](https://github.com/nix-rust/nix/pull/1107))\n\n- Added `NixPath::is_empty`.\n  ([#1107](https://github.com/nix-rust/nix/pull/1107))\n\n- Added `mkfifoat`\n  ([#1133](https://github.com/nix-rust/nix/pull/1133))\n\n- Added `User::from_uid`, `User::from_name`, `User::from_gid` and\n  `Group::from_name`,\n  ([#1139](https://github.com/nix-rust/nix/pull/1139))\n\n- Added `linkat`\n  ([#1101](https://github.com/nix-rust/nix/pull/1101))\n\n- Added `sched_getaffinity`.\n  ([#1148](https://github.com/nix-rust/nix/pull/1148))\n\n- Added optional `Signal` argument to `ptrace::{detach, syscall}` for signal\n  injection. ([#1083](https://github.com/nix-rust/nix/pull/1083))\n\n### Changed\n- `sys::termios::BaudRate` now implements `TryFrom<speed_t>` instead of\n  `From<speed_t>`.  The old `From` implementation would panic on failure.\n  ([#1159](https://github.com/nix-rust/nix/pull/1159))\n\n- `sys::socket::ControlMessage::ScmCredentials` and\n  `sys::socket::ControlMessageOwned::ScmCredentials` now wrap `UnixCredentials`\n  rather than `libc::ucred`.\n  ([#1160](https://github.com/nix-rust/nix/pull/1160))\n\n- `sys::socket::recvmsg` now takes a plain `Vec` instead of a `CmsgBuffer`\n  implementor.  If you were already using `cmsg_space!`, then you needn't worry.\n  ([#1156](https://github.com/nix-rust/nix/pull/1156))\n\n- `sys::socket::recvfrom` now returns\n  `Result<(usize, Option<SockAddr>)>` instead of `Result<(usize, SockAddr)>`.\n  ([#1145](https://github.com/nix-rust/nix/pull/1145))\n\n- `Signal::from_c_int` has been replaced by `Signal::try_from`\n  ([#1113](https://github.com/nix-rust/nix/pull/1113))\n\n- Changed `readlink` and `readlinkat` to return `OsString`\n  ([#1109](https://github.com/nix-rust/nix/pull/1109))\n\n  ```rust\n  # use nix::fcntl::{readlink, readlinkat};\n  // the buffer argument of `readlink` and `readlinkat` has been removed,\n  // and the return value is now an owned type (`OsString`).\n  // Existing code can be updated by removing the buffer argument\n  // and removing any clone or similar operation on the output\n\n  // old code `readlink(&path, &mut buf)` can be replaced with the following\n  let _: OsString = readlink(&path);\n\n  // old code `readlinkat(dirfd, &path, &mut buf)` can be replaced with the following\n  let _: OsString = readlinkat(dirfd, &path);\n  ```\n\n- Minimum supported Rust version is now 1.36.0.\n  ([#1108](https://github.com/nix-rust/nix/pull/1108))\n\n- `Ipv4Addr::octets`, `Ipv4Addr::to_std`, `Error::as_errno`,\n  `ForkResult::is_child`, `ForkResult::is_parent`, `Gid::as_raw`,\n  `Uid::is_root`, `Uid::as_raw`, `Pid::as_raw`, and `PollFd::revents` now take\n  `self` by value.\n  ([#1107](https://github.com/nix-rust/nix/pull/1107))\n\n- Type `&CString` for parameters of `exec(v|ve|vp|vpe|veat)` are changed to `&CStr`.\n  ([#1121](https://github.com/nix-rust/nix/pull/1121))\n\n### Fixed\n- Fix length of abstract socket addresses\n  ([#1120](https://github.com/nix-rust/nix/pull/1120))\n\n- Fix initialization of msghdr in recvmsg/sendmsg when built with musl\n  ([#1136](https://github.com/nix-rust/nix/pull/1136))\n\n### Removed\n- Remove the deprecated `CmsgSpace`.\n  ([#1156](https://github.com/nix-rust/nix/pull/1156))\n\n## [0.15.0] - 10 August 2019\n### Added\n- Added `MSG_WAITALL` to `MsgFlags` in `sys::socket`.\n  ([#1079](https://github.com/nix-rust/nix/pull/1079))\n- Implemented `Clone`, `Copy`, `Debug`, `Eq`, `Hash`, and `PartialEq` for most\n  types that support them. ([#1035](https://github.com/nix-rust/nix/pull/1035))\n- Added `copy_file_range` wrapper\n  ([#1069](https://github.com/nix-rust/nix/pull/1069))\n- Add `mkdirat`.\n  ([#1084](https://github.com/nix-rust/nix/pull/1084))\n- Add `posix_fadvise`.\n  ([#1089](https://github.com/nix-rust/nix/pull/1089))\n- Added `AF_VSOCK` to `AddressFamily`.\n  ([#1091](https://github.com/nix-rust/nix/pull/1091))\n- Add `unlinkat`\n  ([#1058](https://github.com/nix-rust/nix/pull/1058))\n- Add `renameat`.\n  ([#1097](https://github.com/nix-rust/nix/pull/1097))\n\n### Changed\n- Support for `ifaddrs` now present when building for Android.\n  ([#1077](https://github.com/nix-rust/nix/pull/1077))\n- Minimum supported Rust version is now 1.31.0\n  ([#1035](https://github.com/nix-rust/nix/pull/1035))\n  ([#1095](https://github.com/nix-rust/nix/pull/1095))\n- Now functions `statfs()` and `fstatfs()` return result with `Statfs` wrapper\n  ([#928](https://github.com/nix-rust/nix/pull/928))\n\n### Fixed\n- Enabled `sched_yield` for all nix hosts.\n  ([#1090](https://github.com/nix-rust/nix/pull/1090))\n\n## [0.14.1] - 2019-06-06\n### Added\n- Macros exported by `nix` may now be imported via `use` on the Rust 2018\n  edition without importing helper macros on Linux targets.\n  ([#1066](https://github.com/nix-rust/nix/pull/1066))\n\n  For example, in Rust 2018, the `ioctl_read_bad!` macro can now be imported\n  without importing the `convert_ioctl_res!` macro.\n\n  ```rust\n  use nix::ioctl_read_bad;\n\n  ioctl_read_bad!(tcgets, libc::TCGETS, libc::termios);\n  ```\n\n### Changed\n- Changed some public types from reexports of libc types like `uint32_t` to the\n  native equivalents like `u32.`\n  ([#1072](https://github.com/nix-rust/nix/pull/1072/commits))\n\n### Fixed\n- Fix the build on Android and Linux/mips with recent versions of libc.\n  ([#1072](https://github.com/nix-rust/nix/pull/1072/commits))\n\n## [0.14.0] - 2019-05-21\n### Added\n- Add IP_RECVIF & IP_RECVDSTADDR. Enable IP_PKTINFO and IP6_PKTINFO on netbsd/openbsd.\n  ([#1002](https://github.com/nix-rust/nix/pull/1002))\n- Added `inotify_init1`, `inotify_add_watch` and `inotify_rm_watch` wrappers for\n  Android and Linux. ([#1016](https://github.com/nix-rust/nix/pull/1016))\n- Add `ALG_SET_IV`, `ALG_SET_OP` and `ALG_SET_AEAD_ASSOCLEN` control messages and `AF_ALG`\n  socket types on Linux and Android ([#1031](https://github.com/nix-rust/nix/pull/1031))\n- Add killpg\n  ([#1034](https://github.com/nix-rust/nix/pull/1034))\n- Added ENOTSUP errno support for Linux and Android.\n  ([#969](https://github.com/nix-rust/nix/pull/969))\n- Add several errno constants from OpenBSD 6.2\n  ([#1036](https://github.com/nix-rust/nix/pull/1036))\n- Added `from_std` and `to_std` methods for `sys::socket::IpAddr`\n  ([#1043](https://github.com/nix-rust/nix/pull/1043))\n- Added `nix::unistd:seteuid` and `nix::unistd::setegid` for those platforms that do\n  not support `setresuid` nor `setresgid` respectively.\n  ([#1044](https://github.com/nix-rust/nix/pull/1044))\n- Added a `access` wrapper\n  ([#1045](https://github.com/nix-rust/nix/pull/1045))\n- Add `forkpty`\n  ([#1042](https://github.com/nix-rust/nix/pull/1042))\n- Add `sched_yield`\n  ([#1050](https://github.com/nix-rust/nix/pull/1050))\n\n### Changed\n- `PollFd` event flags renamed to `PollFlags` ([#1024](https://github.com/nix-rust/nix/pull/1024/))\n- `recvmsg` now returns an Iterator over `ControlMessageOwned` objects rather\n  than `ControlMessage` objects.  This is sadly not backwards-compatible.  Fix\n  code like this:\n  ```rust\n  if let ControlMessage::ScmRights(&fds) = cmsg {\n  ```\n\n  By replacing it with code like this:\n  ```rust\n  if let ControlMessageOwned::ScmRights(fds) = cmsg {\n  ```\n  ([#1020](https://github.com/nix-rust/nix/pull/1020))\n- Replaced `CmsgSpace` with the `cmsg_space` macro.\n  ([#1020](https://github.com/nix-rust/nix/pull/1020))\n\n### Fixed\n- Fixed multiple bugs when using `sendmsg` and `recvmsg` with ancillary control messages\n  ([#1020](https://github.com/nix-rust/nix/pull/1020))\n- Macros exported by `nix` may now be imported via `use` on the Rust 2018\n  edition without importing helper macros for BSD targets.\n  ([#1041](https://github.com/nix-rust/nix/pull/1041))\n\n  For example, in Rust 2018, the `ioctl_read_bad!` macro can now be imported\n  without importing the `convert_ioctl_res!` macro.\n\n  ```rust\n  use nix::ioctl_read_bad;\n\n  ioctl_read_bad!(tcgets, libc::TCGETS, libc::termios);\n  ```\n\n### Removed\n- `Daemon`, `NOTE_REAP`, and `NOTE_EXIT_REPARENTED` are now deprecated on OSX\n  and iOS.\n  ([#1033](https://github.com/nix-rust/nix/pull/1033))\n- `PTRACE_GETREGS`, `PTRACE_SETREGS`, `PTRACE_GETFPREGS`, and\n  `PTRACE_SETFPREGS` have been removed from some platforms where they never\n  should've been defined in the first place.\n  ([#1055](https://github.com/nix-rust/nix/pull/1055))\n\n## [0.13.1] - 2019-06-10\n### Changed\n- Changed some public types from reexports of libc types like `uint32_t` to the\n  native equivalents like `u32.`\n  ([#1072](https://github.com/nix-rust/nix/pull/1072/commits))\n\n### Fixed\n- Fix the build on Android and Linux/mips with recent versions of libc.\n  ([#1072](https://github.com/nix-rust/nix/pull/1072/commits))\n- Fixed build on Linux/arm and Linux/s390x with the latest Rust libc\n  ([52102cb](https://github.com/nix-rust/nix/commit/52102cb76398c4dfb9ea141b98c5b01a2e050973))\n\n### Removed\n- `Daemon`, `NOTE_REAP`, and `NOTE_EXIT_REPARENTED` are now deprecated on OSX\n  and iOS.\n  ([#1033](https://github.com/nix-rust/nix/pull/1033))\n\n## [0.13.0] - 2019-01-15\n### Added\n- Added PKTINFO(V4) & V6PKTINFO cmsg support - Android/FreeBSD/iOS/Linux/MacOS.\n  ([#990](https://github.com/nix-rust/nix/pull/990))\n- Added support of CString type in `setsockopt`.\n  ([#972](https://github.com/nix-rust/nix/pull/972))\n- Added option `TCP_CONGESTION` in `setsockopt`.\n  ([#972](https://github.com/nix-rust/nix/pull/972))\n- Added `symlinkat` wrapper.\n  ([#997](https://github.com/nix-rust/nix/pull/997))\n- Added `ptrace::{getregs, setregs}`.\n  ([#1010](https://github.com/nix-rust/nix/pull/1010))\n- Added `nix::sys::signal::signal`.\n  ([#817](https://github.com/nix-rust/nix/pull/817))\n- Added an `mprotect` wrapper.\n  ([#991](https://github.com/nix-rust/nix/pull/991))\n\n### Fixed\n- `lutimes` never worked on OpenBSD as it is not implemented on OpenBSD. It has\n  been removed. ([#1000](https://github.com/nix-rust/nix/pull/1000))\n- `fexecve` never worked on NetBSD or on OpenBSD as it is not implemented on\n  either OS. It has been removed. ([#1000](https://github.com/nix-rust/nix/pull/1000))\n\n## [0.12.1] 2019-06-08\n### Changed\n- Changed some public types from reexports of libc types like `uint32_t` to the\n  native equivalents like `u32.`\n  ([#1072](https://github.com/nix-rust/nix/pull/1072/commits))\n\n### Fixed\n- Fix the build on Android and Linux/mips with recent versions of libc.\n  ([#1072](https://github.com/nix-rust/nix/pull/1072/commits))\n- Fixed build on Linux/arm and Linux/s390x with the latest Rust libc\n  ([52102cb](https://github.com/nix-rust/nix/commit/52102cb76398c4dfb9ea141b98c5b01a2e050973))\n\n### Removed\n- `fexecve` never worked on NetBSD or on OpenBSD as it is not implemented on\n  either OS. It has been removed. ([#1000](https://github.com/nix-rust/nix/pull/1000))\n- `Daemon`, `NOTE_REAP`, and `NOTE_EXIT_REPARENTED` are now deprecated on OSX\n  and iOS.\n  ([#1033](https://github.com/nix-rust/nix/pull/1033))\n\n## [0.12.0] 2018-11-28\n\n### Added\n- Added `FromStr` and `Display` impls for `nix::sys::Signal`\n  ([#884](https://github.com/nix-rust/nix/pull/884))\n- Added a `sync` wrapper.\n  ([#961](https://github.com/nix-rust/nix/pull/961))\n- Added a `sysinfo` wrapper.\n  ([#922](https://github.com/nix-rust/nix/pull/922))\n- Support the `SO_PEERCRED` socket option and the `UnixCredentials` type on all Linux and Android targets.\n  ([#921](https://github.com/nix-rust/nix/pull/921))\n- Added support for `SCM_CREDENTIALS`, allowing to send process credentials over Unix sockets.\n  ([#923](https://github.com/nix-rust/nix/pull/923))\n- Added a `dir` module for reading directories (wraps `fdopendir`, `readdir`, and `rewinddir`).\n  ([#916](https://github.com/nix-rust/nix/pull/916))\n- Added `kmod` module that allows loading and unloading kernel modules on Linux.\n  ([#930](https://github.com/nix-rust/nix/pull/930))\n- Added `futimens` and `utimesat` wrappers ([#944](https://github.com/nix-rust/nix/pull/944)),\n  an `lutimes` wrapper ([#967](https://github.com/nix-rust/nix/pull/967)),\n  and a `utimes` wrapper ([#946](https://github.com/nix-rust/nix/pull/946)).\n- Added `AF_UNSPEC` wrapper to `AddressFamily` ([#948](https://github.com/nix-rust/nix/pull/948))\n- Added the `mode_t` public alias within `sys::stat`.\n  ([#954](https://github.com/nix-rust/nix/pull/954))\n- Added a `truncate` wrapper.\n  ([#956](https://github.com/nix-rust/nix/pull/956))\n- Added a `fchownat` wrapper.\n  ([#955](https://github.com/nix-rust/nix/pull/955))\n- Added support for `ptrace` on BSD operating systems ([#949](https://github.com/nix-rust/nix/pull/949))\n- Added `ptrace` functions for reads and writes to tracee memory and ptrace kill\n  ([#949](https://github.com/nix-rust/nix/pull/949)) ([#958](https://github.com/nix-rust/nix/pull/958))\n- Added a `acct` wrapper module for enabling and disabling process accounting\n  ([#952](https://github.com/nix-rust/nix/pull/952))\n- Added the `time_t` and `suseconds_t` public aliases within `sys::time`.\n  ([#968](https://github.com/nix-rust/nix/pull/968))\n- Added `unistd::execvpe` for Haiku, Linux and OpenBSD\n  ([#975](https://github.com/nix-rust/nix/pull/975))\n- Added `Error::as_errno`.\n  ([#977](https://github.com/nix-rust/nix/pull/977))\n\n### Changed\n- Increased required Rust version to 1.24.1\n  ([#900](https://github.com/nix-rust/nix/pull/900))\n  ([#966](https://github.com/nix-rust/nix/pull/966))\n\n### Fixed\n- Made `preadv` take immutable slice of IoVec.\n  ([#914](https://github.com/nix-rust/nix/pull/914))\n- Fixed passing multiple file descriptors over Unix Sockets.\n  ([#918](https://github.com/nix-rust/nix/pull/918))\n\n## [0.11.1] 2019-06-06\n### Changed\n- Changed some public types from reexports of libc types like `uint32_t` to the\n  native equivalents like `u32.`\n  ([#1072](https://github.com/nix-rust/nix/pull/1072/commits))\n\n### Fixed\n- Fix the build on Android and Linux/mips with recent versions of libc.\n  ([#1072](https://github.com/nix-rust/nix/pull/1072/commits))\n- Fixed build on Linux/arm and Linux/s390x with the latest Rust libc\n  ([52102cb](https://github.com/nix-rust/nix/commit/52102cb76398c4dfb9ea141b98c5b01a2e050973))\n\n### Removed\n- `fexecve` never worked on NetBSD or on OpenBSD as it is not implemented on\n  either OS. It has been removed. ([#1000](https://github.com/nix-rust/nix/pull/1000))\n- `Daemon`, `NOTE_REAP`, and `NOTE_EXIT_REPARENTED` are now deprecated on OSX\n  and iOS.\n  ([#1033](https://github.com/nix-rust/nix/pull/1033))\n\n## [0.11.0] 2018-06-01\n\n### Added\n- Added `sendfile` on FreeBSD and Darwin.\n  ([#901](https://github.com/nix-rust/nix/pull/901))\n- Added `pselect`\n  ([#894](https://github.com/nix-rust/nix/pull/894))\n- Exposed `preadv` and `pwritev` on the BSDs.\n  ([#883](https://github.com/nix-rust/nix/pull/883))\n- Added `mlockall` and `munlockall`\n  ([#876](https://github.com/nix-rust/nix/pull/876))\n- Added `SO_MARK` on Linux.\n  ([#873](https://github.com/nix-rust/nix/pull/873))\n- Added safe support for nearly any buffer type in the `sys::aio` module.\n  ([#872](https://github.com/nix-rust/nix/pull/872))\n- Added `sys::aio::LioCb` as a wrapper for `libc::lio_listio`.\n  ([#872](https://github.com/nix-rust/nix/pull/872))\n- Added `unistd::getsid`\n  ([#850](https://github.com/nix-rust/nix/pull/850))\n- Added `alarm`. ([#830](https://github.com/nix-rust/nix/pull/830))\n- Added interface flags `IFF_NO_PI, IFF_TUN, IFF_TAP` on linux-like systems.\n  ([#853](https://github.com/nix-rust/nix/pull/853))\n- Added `statvfs` module to all MacOS and Linux architectures.\n  ([#832](https://github.com/nix-rust/nix/pull/832))\n- Added `EVFILT_EMPTY`, `EVFILT_PROCDESC`, and `EVFILT_SENDFILE` on FreeBSD.\n  ([#825](https://github.com/nix-rust/nix/pull/825))\n- Exposed `termios::cfmakesane` on FreeBSD.\n  ([#825](https://github.com/nix-rust/nix/pull/825))\n- Exposed `MSG_CMSG_CLOEXEC` on *BSD.\n  ([#825](https://github.com/nix-rust/nix/pull/825))\n- Added `fchmod`, `fchmodat`.\n  ([#857](https://github.com/nix-rust/nix/pull/857))\n- Added `request_code_write_int!` on FreeBSD/DragonFlyBSD\n  ([#833](https://github.com/nix-rust/nix/pull/833))\n\n### Changed\n- `Display` and `Debug` for `SysControlAddr` now includes all fields.\n  ([#837](https://github.com/nix-rust/nix/pull/837))\n- `ioctl!` has been replaced with a family of `ioctl_*!` macros.\n  ([#833](https://github.com/nix-rust/nix/pull/833))\n- `io!`, `ior!`, `iow!`, and `iorw!` has been renamed to `request_code_none!`, `request_code_read!`,\n  `request_code_write!`, and `request_code_readwrite!` respectively. These have also now been exposed\n  in the documentation.\n  ([#833](https://github.com/nix-rust/nix/pull/833))\n- Enabled more `ptrace::Request` definitions for uncommon Linux platforms\n  ([#892](https://github.com/nix-rust/nix/pull/892))\n- Emulation of `FD_CLOEXEC` and `O_NONBLOCK` was removed from `socket()`, `accept4()`, and\n  `socketpair()`.\n  ([#907](https://github.com/nix-rust/nix/pull/907))\n\n### Fixed\n- Fixed possible panics when using `SigAction::flags` on Linux\n  ([#869](https://github.com/nix-rust/nix/pull/869))\n- Properly exposed 460800 and 921600 baud rates on NetBSD\n  ([#837](https://github.com/nix-rust/nix/pull/837))\n- Fixed `ioctl_write_int!` on FreeBSD/DragonFlyBSD\n  ([#833](https://github.com/nix-rust/nix/pull/833))\n- `ioctl_write_int!` now properly supports passing a `c_ulong` as the parameter on Linux non-musl targets\n  ([#833](https://github.com/nix-rust/nix/pull/833))\n\n### Removed\n- Removed explicit support for the `bytes` crate from the `sys::aio` module.\n  See `sys::aio::AioCb::from_boxed_slice` examples for alternatives.\n  ([#872](https://github.com/nix-rust/nix/pull/872))\n- Removed `sys::aio::lio_listio`.  Use `sys::aio::LioCb::listio` instead.\n  ([#872](https://github.com/nix-rust/nix/pull/872))\n- Removed emulated `accept4()` from macos, ios, and netbsd targets\n  ([#907](https://github.com/nix-rust/nix/pull/907))\n- Removed `IFF_NOTRAILERS` on OpenBSD, as it has been removed in OpenBSD 6.3\n  ([#893](https://github.com/nix-rust/nix/pull/893))\n\n## [0.10.0] 2018-01-26\n\n### Added\n- Added specialized wrapper: `sys::ptrace::step`\n  ([#852](https://github.com/nix-rust/nix/pull/852))\n- Added `AioCb::from_ptr` and `AioCb::from_mut_ptr`\n  ([#820](https://github.com/nix-rust/nix/pull/820))\n- Added specialized wrappers: `sys::ptrace::{traceme, syscall, cont, attach}`. Using the matching routines\n  with `sys::ptrace::ptrace` is now deprecated.\n- Added `nix::poll` module for all platforms\n  ([#672](https://github.com/nix-rust/nix/pull/672))\n- Added `nix::ppoll` function for FreeBSD and DragonFly\n  ([#672](https://github.com/nix-rust/nix/pull/672))\n- Added protocol families in `AddressFamily` enum.\n  ([#647](https://github.com/nix-rust/nix/pull/647))\n- Added the `pid()` method to `WaitStatus` for extracting the PID.\n  ([#722](https://github.com/nix-rust/nix/pull/722))\n- Added `nix::unistd:fexecve`.\n  ([#727](https://github.com/nix-rust/nix/pull/727))\n- Expose `uname()` on all platforms.\n  ([#739](https://github.com/nix-rust/nix/pull/739))\n- Expose `signalfd` module on Android as well.\n  ([#739](https://github.com/nix-rust/nix/pull/739))\n- Added `nix::sys::ptrace::detach`.\n  ([#749](https://github.com/nix-rust/nix/pull/749))\n- Added timestamp socket control message variant:\n  `nix::sys::socket::ControlMessage::ScmTimestamp`\n  ([#663](https://github.com/nix-rust/nix/pull/663))\n- Added socket option variant that enables the timestamp socket\n  control message: `nix::sys::socket::sockopt::ReceiveTimestamp`\n  ([#663](https://github.com/nix-rust/nix/pull/663))\n- Added more accessor methods for `AioCb`\n  ([#773](https://github.com/nix-rust/nix/pull/773))\n- Add `nix::sys::fallocate`\n  ([#768](https:://github.com/nix-rust/nix/pull/768))\n- Added `nix::unistd::mkfifo`.\n  ([#602](https://github.com/nix-rust/nix/pull/774))\n- Added `ptrace::Options::PTRACE_O_EXITKILL` on Linux and Android.\n  ([#771](https://github.com/nix-rust/nix/pull/771))\n- Added `nix::sys::uio::{process_vm_readv, process_vm_writev}` on Linux\n  ([#568](https://github.com/nix-rust/nix/pull/568))\n- Added `nix::unistd::{getgroups, setgroups, getgrouplist, initgroups}`. ([#733](https://github.com/nix-rust/nix/pull/733))\n- Added `nix::sys::socket::UnixAddr::as_abstract` on Linux and Android.\n  ([#785](https://github.com/nix-rust/nix/pull/785))\n- Added `nix::unistd::execveat` on Linux and Android.\n  ([#800](https://github.com/nix-rust/nix/pull/800))\n- Added the `from_raw()` method to `WaitStatus` for converting raw status values\n  to `WaitStatus` independent of syscalls.\n  ([#741](https://github.com/nix-rust/nix/pull/741))\n- Added more standard trait implementations for various types.\n  ([#814](https://github.com/nix-rust/nix/pull/814))\n- Added `sigprocmask` to the signal module.\n  ([#826](https://github.com/nix-rust/nix/pull/826))\n- Added `nix::sys::socket::LinkAddr` on Linux and all bsdlike system.\n  ([#813](https://github.com/nix-rust/nix/pull/813))\n- Add socket options for `IP_TRANSPARENT` / `BIND_ANY`.\n  ([#835](https://github.com/nix-rust/nix/pull/835))\n\n### Changed\n- Exposed the `mqueue` module for all supported operating systems.\n  ([#834](https://github.com/nix-rust/nix/pull/834))\n- Use native `pipe2` on all BSD targets.  Users should notice no difference.\n  ([#777](https://github.com/nix-rust/nix/pull/777))\n- Renamed existing `ptrace` wrappers to encourage namespacing ([#692](https://github.com/nix-rust/nix/pull/692))\n- Marked `sys::ptrace::ptrace` as `unsafe`.\n- Changed function signature of `socket()` and `socketpair()`. The `protocol` argument\n  has changed type from `c_int` to `SockProtocol`.\n  It accepts a `None` value for default protocol that was specified with zero using `c_int`.\n  ([#647](https://github.com/nix-rust/nix/pull/647))\n- Made `select` easier to use, adding the ability to automatically calculate the `nfds` parameter using the new\n  `FdSet::highest` ([#701](https://github.com/nix-rust/nix/pull/701))\n- Exposed `unistd::setresuid` and `unistd::setresgid` on FreeBSD and OpenBSD\n  ([#721](https://github.com/nix-rust/nix/pull/721))\n- Refactored the `statvfs` module removing extraneous API functions and the\n  `statvfs::vfs` module. Additionally  `(f)statvfs()` now return the struct\n  directly. And the returned `Statvfs` struct now exposes its data through\n  accessor methods. ([#729](https://github.com/nix-rust/nix/pull/729))\n- The `addr` argument to `madvise` and `msync` is now `*mut` to better match the\n  libc API. ([#731](https://github.com/nix-rust/nix/pull/731))\n- `shm_open` and `shm_unlink` are no longer exposed on Android targets, where\n  they are not officially supported. ([#731](https://github.com/nix-rust/nix/pull/731))\n- `MapFlags`, `MmapAdvise`, and `MsFlags` expose some more variants and only\n  officially-supported variants are provided for each target.\n  ([#731](https://github.com/nix-rust/nix/pull/731))\n- Marked `pty::ptsname` function as `unsafe`\n  ([#744](https://github.com/nix-rust/nix/pull/744))\n- Moved constants ptrace request, event and options to enums and updated ptrace functions and argument types accordingly.\n  ([#749](https://github.com/nix-rust/nix/pull/749))\n- `AioCb::Drop` will now panic if the `AioCb` is still in-progress ([#715](https://github.com/nix-rust/nix/pull/715))\n- Restricted `nix::sys::socket::UnixAddr::new_abstract` to Linux and Android only.\n  ([#785](https://github.com/nix-rust/nix/pull/785))\n- The `ucred` struct has been removed in favor of a `UserCredentials` struct that\n  contains only getters for its fields.\n  ([#814](https://github.com/nix-rust/nix/pull/814))\n- Both `ip_mreq` and `ipv6_mreq` have been replaced with `IpMembershipRequest` and\n  `Ipv6MembershipRequest`.\n  ([#814](https://github.com/nix-rust/nix/pull/814))\n- Removed return type from `pause`.\n  ([#829](https://github.com/nix-rust/nix/pull/829))\n- Changed the termios APIs to allow for using a `u32` instead of the `BaudRate`\n  enum on BSD platforms to support arbitrary baud rates. See the module docs for\n  `nix::sys::termios` for more details.\n  ([#843](https://github.com/nix-rust/nix/pull/843))\n\n### Fixed\n- Fix compilation and tests for OpenBSD targets\n  ([#688](https://github.com/nix-rust/nix/pull/688))\n- Fixed error handling in `AioCb::fsync`, `AioCb::read`, and `AioCb::write`.\n  It is no longer an error to drop an `AioCb` that failed to enqueue in the OS.\n  ([#715](https://github.com/nix-rust/nix/pull/715))\n- Fix potential memory corruption on non-Linux platforms when using\n  `sendmsg`/`recvmsg`, caused by mismatched `msghdr` definition.\n  ([#648](https://github.com/nix-rust/nix/pull/648))\n\n### Removed\n- `AioCb::from_boxed_slice` has been removed.  It was never actually safe.  Use\n  `from_bytes` or `from_bytes_mut` instead.\n  ([#820](https://github.com/nix-rust/nix/pull/820))\n- The syscall module has been removed. This only exposed enough functionality for\n  `memfd_create()` and `pivot_root()`, which are still exposed as separate functions.\n  ([#747](https://github.com/nix-rust/nix/pull/747))\n- The `Errno` variants are no longer reexported from the `errno` module. `Errno` itself is no longer reexported from the\n  crate root and instead must be accessed using the `errno` module. ([#696](https://github.com/nix-rust/nix/pull/696))\n- Removed `MS_VERBOSE`, `MS_NOSEC`, and `MS_BORN` from `MsFlags`. These\n  are internal kernel flags and should never have been exposed.\n  ([#814](https://github.com/nix-rust/nix/pull/814))\n\n\n## [0.9.0] 2017-07-23\n\n### Added\n- Added `sysconf`, `pathconf`, and `fpathconf`\n  ([#630](https://github.com/nix-rust/nix/pull/630)\n- Added `sys::signal::SigAction::{ flags, mask, handler}`\n  ([#611](https://github.com/nix-rust/nix/pull/609)\n- Added `nix::sys::pthread::pthread_self`\n  ([#591](https://github.com/nix-rust/nix/pull/591)\n- Added `AioCb::from_boxed_slice`\n  ([#582](https://github.com/nix-rust/nix/pull/582)\n- Added `nix::unistd::{openat, fstatat, readlink, readlinkat}`\n  ([#551](https://github.com/nix-rust/nix/pull/551))\n- Added `nix::pty::{grantpt, posix_openpt, ptsname/ptsname_r, unlockpt}`\n  ([#556](https://github.com/nix-rust/nix/pull/556)\n- Added `nix::ptr::openpty`\n  ([#456](https://github.com/nix-rust/nix/pull/456))\n- Added `nix::ptrace::{ptrace_get_data, ptrace_getsiginfo, ptrace_setsiginfo\n  and nix::Error::UnsupportedOperation}`\n  ([#614](https://github.com/nix-rust/nix/pull/614))\n- Added `cfmakeraw`, `cfsetspeed`, and `tcgetsid`. ([#527](https://github.com/nix-rust/nix/pull/527))\n- Added \"bad none\", \"bad write_ptr\", \"bad write_int\", and \"bad readwrite\" variants to the `ioctl!`\n  macro. ([#670](https://github.com/nix-rust/nix/pull/670))\n- On Linux and Android, added support for receiving `PTRACE_O_TRACESYSGOOD`\n  events from `wait` and `waitpid` using `WaitStatus::PtraceSyscall`\n  ([#566](https://github.com/nix-rust/nix/pull/566)).\n\n### Changed\n- The `ioctl!` macro and its variants now allow the generated functions to have\n  doccomments. ([#661](https://github.com/nix-rust/nix/pull/661))\n- Changed `ioctl!(write ...)` into `ioctl!(write_ptr ...)` and `ioctl!(write_int ..)` variants\n  to more clearly separate those use cases. ([#670](https://github.com/nix-rust/nix/pull/670))\n- Marked `sys::mman::{ mmap, munmap, madvise, munlock, msync }` as unsafe.\n  ([#559](https://github.com/nix-rust/nix/pull/559))\n- Minimum supported Rust version is now 1.13.\n- Removed `revents` argument from `PollFd::new()` as it's an output argument and\n  will be overwritten regardless of value.\n  ([#542](https://github.com/nix-rust/nix/pull/542))\n- Changed type signature of `sys::select::FdSet::contains` to make `self`\n  immutable ([#564](https://github.com/nix-rust/nix/pull/564))\n- Introduced wrapper types for `gid_t`, `pid_t`, and `uid_t` as `Gid`, `Pid`, and `Uid`\n  respectively. Various functions have been changed to use these new types as\n  arguments. ([#629](https://github.com/nix-rust/nix/pull/629))\n- Fixed compilation on all Android and iOS targets ([#527](https://github.com/nix-rust/nix/pull/527))\n  and promoted them to Tier 2 support.\n- `nix::sys::statfs::{statfs,fstatfs}` uses statfs definition from `libc::statfs` instead of own linux specific type `nix::sys::Statfs`.\n  Also file system type constants like `nix::sys::statfs::ADFS_SUPER_MAGIC` were removed in favor of the libc equivalent.\n  ([#561](https://github.com/nix-rust/nix/pull/561))\n- Revised the termios API including additional tests and documentation and exposed it on iOS. ([#527](https://github.com/nix-rust/nix/pull/527))\n- `eventfd`, `signalfd`, and `pwritev`/`preadv` functionality is now included by default for all\n  supported platforms. ([#681](https://github.com/nix-rust/nix/pull/561))\n- The `ioctl!` macro's plain variants has been replaced with \"bad read\" to be consistent with\n  other variants. The generated functions also have more strict types for their arguments. The\n  \"*_buf\" variants also now calculate total array size and take slice references for improved type\n  safety. The documentation has also been dramatically improved.\n  ([#670](https://github.com/nix-rust/nix/pull/670))\n\n### Removed\n- Removed `io::Error` from `nix::Error` and the conversion from `nix::Error` to `Errno`\n  ([#614](https://github.com/nix-rust/nix/pull/614))\n- All feature flags have been removed in favor of conditional compilation on supported platforms.\n  `execvpe` is no longer supported, but this was already broken and will be added back in the next\n  release. ([#681](https://github.com/nix-rust/nix/pull/561))\n- Removed `ioc_*` functions and many helper constants and macros within the `ioctl` module. These\n  should always have been private and only the `ioctl!` should be used in public code.\n  ([#670](https://github.com/nix-rust/nix/pull/670))\n\n### Fixed\n- Fixed multiple issues compiling under different archetectures and OSes.\n  Now compiles on Linux/MIPS ([#538](https://github.com/nix-rust/nix/pull/538)),\n  `Linux/PPC` ([#553](https://github.com/nix-rust/nix/pull/553)),\n  `MacOS/x86_64,i686` ([#553](https://github.com/nix-rust/nix/pull/553)),\n  `NetBSD/x64_64` ([#538](https://github.com/nix-rust/nix/pull/538)),\n  `FreeBSD/x86_64,i686` ([#536](https://github.com/nix-rust/nix/pull/536)), and\n  `Android` ([#631](https://github.com/nix-rust/nix/pull/631)).\n- `bind` and `errno_location` now work correctly on `Android`\n  ([#631](https://github.com/nix-rust/nix/pull/631))\n- Added `nix::ptrace` on all Linux-kernel-based platforms\n  [#624](https://github.com/nix-rust/nix/pull/624). Previously it was\n  only available on x86, x86-64, and ARM, and also not on Android.\n- Fixed `sys::socket::sendmsg` with zero entry `cmsgs` parameter.\n  ([#623](https://github.com/nix-rust/nix/pull/623))\n- Multiple constants related to the termios API have now been properly defined for\n  all supported platforms. ([#527](https://github.com/nix-rust/nix/pull/527))\n- `ioctl!` macro now supports working with non-int datatypes and properly supports all platforms.\n  ([#670](https://github.com/nix-rust/nix/pull/670))\n\n## [0.8.1] 2017-04-16\n\n### Fixed\n- Fixed build on FreeBSD. (Cherry-picked\n  [a859ee3c](https://github.com/nix-rust/nix/commit/a859ee3c9396dfdb118fcc2c8ecc697e2d303467))\n\n## [0.8.0] 2017-03-02\n\n### Added\n- Added `::nix::sys::termios::BaudRate` enum to provide portable baudrate\n  values. ([#518](https://github.com/nix-rust/nix/pull/518))\n- Added a new `WaitStatus::PtraceEvent` to support ptrace events on Linux\n  and Android ([#438](https://github.com/nix-rust/nix/pull/438))\n- Added support for POSIX AIO\n  ([#483](https://github.com/nix-rust/nix/pull/483))\n  ([#506](https://github.com/nix-rust/nix/pull/506))\n- Added support for XNU system control sockets\n  ([#478](https://github.com/nix-rust/nix/pull/478))\n- Added support for `ioctl` calls on BSD platforms\n  ([#478](https://github.com/nix-rust/nix/pull/478))\n- Added struct `TimeSpec`\n  ([#475](https://github.com/nix-rust/nix/pull/475))\n  ([#483](https://github.com/nix-rust/nix/pull/483))\n- Added complete definitions for all kqueue-related constants on all supported\n  OSes\n  ([#415](https://github.com/nix-rust/nix/pull/415))\n- Added function `epoll_create1` and bitflags `EpollCreateFlags` in\n  `::nix::sys::epoll` in order to support `::libc::epoll_create1`.\n  ([#410](https://github.com/nix-rust/nix/pull/410))\n- Added `setresuid` and `setresgid` for Linux in `::nix::unistd`\n  ([#448](https://github.com/nix-rust/nix/pull/448))\n- Added `getpgid` in `::nix::unistd`\n  ([#433](https://github.com/nix-rust/nix/pull/433))\n- Added `tcgetpgrp` and `tcsetpgrp` in `::nix::unistd`\n  ([#451](https://github.com/nix-rust/nix/pull/451))\n- Added `CLONE_NEWCGROUP` in `::nix::sched`\n  ([#457](https://github.com/nix-rust/nix/pull/457))\n- Added `getpgrp` in `::nix::unistd`\n  ([#491](https://github.com/nix-rust/nix/pull/491))\n- Added `fchdir` in `::nix::unistd`\n  ([#497](https://github.com/nix-rust/nix/pull/497))\n- Added `major` and `minor` in `::nix::sys::stat` for decomposing `dev_t`\n  ([#508](https://github.com/nix-rust/nix/pull/508))\n- Fixed the style of many bitflags and use `libc` in more places.\n  ([#503](https://github.com/nix-rust/nix/pull/503))\n- Added `ppoll` in `::nix::poll`\n  ([#520](https://github.com/nix-rust/nix/pull/520))\n- Added support for getting and setting pipe size with fcntl(2) on Linux\n  ([#540](https://github.com/nix-rust/nix/pull/540))\n\n### Changed\n- `::nix::sys::termios::{cfgetispeed, cfsetispeed, cfgetospeed, cfsetospeed}`\n  switched  to use `BaudRate` enum from `speed_t`.\n  ([#518](https://github.com/nix-rust/nix/pull/518))\n- `epoll_ctl` now could accept None as argument `event`\n  when op is `EpollOp::EpollCtlDel`.\n  ([#480](https://github.com/nix-rust/nix/pull/480))\n- Removed the `bad` keyword from the `ioctl!` macro\n  ([#478](https://github.com/nix-rust/nix/pull/478))\n- Changed `TimeVal` into an opaque Newtype\n  ([#475](https://github.com/nix-rust/nix/pull/475))\n- `kill`'s signature, defined in `::nix::sys::signal`, changed, so that the\n  signal parameter has type `T: Into<Option<Signal>>`. `None` as an argument\n  for that parameter will result in a 0 passed to libc's `kill`, while a\n  `Some`-argument will result in the previous behavior for the contained\n  `Signal`.\n  ([#445](https://github.com/nix-rust/nix/pull/445))\n- The minimum supported version of rustc is now 1.7.0.\n  ([#444](https://github.com/nix-rust/nix/pull/444))\n- Changed `KEvent` to an opaque structure that may only be modified by its\n  constructor and the `ev_set` method.\n  ([#415](https://github.com/nix-rust/nix/pull/415))\n  ([#442](https://github.com/nix-rust/nix/pull/442))\n  ([#463](https://github.com/nix-rust/nix/pull/463))\n- `pipe2` now calls `libc::pipe2` where available. Previously it was emulated\n  using `pipe`, which meant that setting `O_CLOEXEC` was not atomic.\n  ([#427](https://github.com/nix-rust/nix/pull/427))\n- Renamed `EpollEventKind` to `EpollFlags` in `::nix::sys::epoll` in order for\n  it to conform with our conventions.\n  ([#410](https://github.com/nix-rust/nix/pull/410))\n- `EpollEvent` in `::nix::sys::epoll` is now an opaque proxy for\n  `::libc::epoll_event`. The formerly public field `events` is now be read-only\n  accessible with the new method `events()` of `EpollEvent`. Instances of\n  `EpollEvent` can be constructed using the new method `new()` of EpollEvent.\n  ([#410](https://github.com/nix-rust/nix/pull/410))\n- `SigFlags` in `::nix::sys::signal` has be renamed to `SigmaskHow` and its type\n  has changed from `bitflags` to `enum` in order to conform to our conventions.\n  ([#460](https://github.com/nix-rust/nix/pull/460))\n- `sethostname` now takes a `&str` instead of a `&[u8]` as this provides an API\n  that makes more sense in normal, correct usage of the API.\n- `gethostname` previously did not expose the actual length of the hostname\n  written from the underlying system call at all.  This has been updated to\n  return a `&CStr` within the provided buffer that is always properly\n  NUL-terminated (this is not guaranteed by the call with all platforms/libc\n  implementations).\n- Exposed all fcntl(2) operations at the module level, so they can be\n  imported direclty instead of via `FcntlArg` enum.\n  ([#541](https://github.com/nix-rust/nix/pull/541))\n\n### Fixed\n- Fixed multiple issues with Unix domain sockets on non-Linux OSes\n  ([#474](https://github.com/nix-rust/nix/pull/415))\n- Fixed using kqueue with `EVFILT_USER` on FreeBSD\n  ([#415](https://github.com/nix-rust/nix/pull/415))\n- Fixed the build on FreeBSD, and fixed the getsockopt, sendmsg, and recvmsg\n  functions on that same OS.\n  ([#397](https://github.com/nix-rust/nix/pull/397))\n- Fixed an off-by-one bug in `UnixAddr::new_abstract` in `::nix::sys::socket`.\n  ([#429](https://github.com/nix-rust/nix/pull/429))\n- Fixed clone passing a potentially unaligned stack.\n  ([#490](https://github.com/nix-rust/nix/pull/490))\n- Fixed mkdev not creating a `dev_t` the same way as libc.\n  ([#508](https://github.com/nix-rust/nix/pull/508))\n\n## [0.7.0] 2016-09-09\n\n### Added\n- Added `lseek` and `lseek64` in `::nix::unistd`\n  ([#377](https://github.com/nix-rust/nix/pull/377))\n- Added `mkdir` and `getcwd` in `::nix::unistd`\n  ([#416](https://github.com/nix-rust/nix/pull/416))\n- Added accessors `sigmask_mut` and `sigmask` to `UContext` in\n  `::nix::ucontext`.\n  ([#370](https://github.com/nix-rust/nix/pull/370))\n- Added `WUNTRACED` to `WaitPidFlag` in `::nix::sys::wait` for non-_linux_\n  targets.\n  ([#379](https://github.com/nix-rust/nix/pull/379))\n- Added new module `::nix::sys::reboot` with enumeration `RebootMode` and\n  functions `reboot` and `set_cad_enabled`. Currently for _linux_ only.\n  ([#386](https://github.com/nix-rust/nix/pull/386))\n- `FdSet` in `::nix::sys::select` now also implements `Clone`.\n  ([#405](https://github.com/nix-rust/nix/pull/405))\n- Added `F_FULLFSYNC` to `FcntlArg` in `::nix::fcntl` for _apple_ targets.\n  ([#407](https://github.com/nix-rust/nix/pull/407))\n- Added `CpuSet::unset` in `::nix::sched`.\n  ([#402](https://github.com/nix-rust/nix/pull/402))\n- Added constructor method `new()` to `PollFd` in `::nix::poll`, in order to\n  allow creation of objects, after removing public access to members.\n  ([#399](https://github.com/nix-rust/nix/pull/399))\n- Added method `revents()` to `PollFd` in `::nix::poll`, in order to provide\n  read access to formerly public member `revents`.\n  ([#399](https://github.com/nix-rust/nix/pull/399))\n- Added `MSG_CMSG_CLOEXEC` to `MsgFlags` in `::nix::sys::socket` for _linux_ only.\n  ([#422](https://github.com/nix-rust/nix/pull/422))\n\n### Changed\n- Replaced the reexported integer constants for signals by the enumeration\n  `Signal` in `::nix::sys::signal`.\n  ([#362](https://github.com/nix-rust/nix/pull/362))\n- Renamed `EventFdFlag` to `EfdFlags` in `::nix::sys::eventfd`.\n  ([#383](https://github.com/nix-rust/nix/pull/383))\n- Changed the result types of `CpuSet::is_set` and `CpuSet::set` in\n  `::nix::sched` to `Result<bool>` and `Result<()>`, respectively. They now\n  return `EINVAL`, if an invalid argument for the `field` parameter is passed.\n  ([#402](https://github.com/nix-rust/nix/pull/402))\n- `MqAttr` in `::nix::mqueue` is now an opaque proxy for `::libc::mq_attr`,\n  which has the same structure as the old `MqAttr`. The field `mq_flags` of\n  `::libc::mq_attr` is readable using the new method `flags()` of `MqAttr`.\n  `MqAttr` also no longer implements `Debug`.\n  ([#392](https://github.com/nix-rust/nix/pull/392))\n- The parameter `msq_prio` of `mq_receive` with type `u32` in `::nix::mqueue`\n  was replaced by a parameter named `msg_prio` with type `&mut u32`, so that\n  the message priority can be obtained by the caller.\n  ([#392](https://github.com/nix-rust/nix/pull/392))\n- The type alias `MQd` in `::nix::queue` was replaced by the type alias\n  `libc::mqd_t`, both of which are aliases for the same type.\n  ([#392](https://github.com/nix-rust/nix/pull/392))\n\n### Removed\n- Type alias `SigNum` from `::nix::sys::signal`.\n  ([#362](https://github.com/nix-rust/nix/pull/362))\n- Type alias `CpuMask` from `::nix::shed`.\n  ([#402](https://github.com/nix-rust/nix/pull/402))\n- Removed public fields from `PollFd` in `::nix::poll`. (See also added method\n  `revents()`.\n  ([#399](https://github.com/nix-rust/nix/pull/399))\n\n### Fixed\n- Fixed the build problem for NetBSD (Note, that we currently do not support\n  it, so it might already be broken again).\n  ([#389](https://github.com/nix-rust/nix/pull/389))\n- Fixed the build on FreeBSD, and fixed the getsockopt, sendmsg, and recvmsg\n  functions on that same OS.\n  ([#397](https://github.com/nix-rust/nix/pull/397))\n\n## [0.6.0] 2016-06-10\n\n### Added\n- Added `gettid` in `::nix::unistd` for _linux_ and _android_.\n  ([#293](https://github.com/nix-rust/nix/pull/293))\n- Some _mips_ support in `::nix::sched` and `::nix::sys::syscall`.\n  ([#301](https://github.com/nix-rust/nix/pull/301))\n- Added `SIGNALFD_SIGINFO_SIZE` in `::nix::sys::signalfd`.\n  ([#309](https://github.com/nix-rust/nix/pull/309))\n- Added new module `::nix::ucontext` with struct `UContext`. Currently for\n  _linux_ only.\n  ([#311](https://github.com/nix-rust/nix/pull/311))\n- Added `EPOLLEXCLUSIVE` to `EpollEventKind` in `::nix::sys::epoll`.\n  ([#330](https://github.com/nix-rust/nix/pull/330))\n- Added `pause` to `::nix::unistd`.\n  ([#336](https://github.com/nix-rust/nix/pull/336))\n- Added `sleep` to `::nix::unistd`.\n  ([#351](https://github.com/nix-rust/nix/pull/351))\n- Added `S_IFDIR`, `S_IFLNK`, `S_IFMT` to `SFlag` in `::nix::sys::stat`.\n  ([#359](https://github.com/nix-rust/nix/pull/359))\n- Added `clear` and `extend` functions to `SigSet`'s implementation in\n  `::nix::sys::signal`.\n  ([#347](https://github.com/nix-rust/nix/pull/347))\n- `sockaddr_storage_to_addr` in `::nix::sys::socket` now supports `sockaddr_nl`\n  on _linux_ and _android_.\n  ([#366](https://github.com/nix-rust/nix/pull/366))\n- Added support for `SO_ORIGINAL_DST` in `::nix::sys::socket` on _linux_.\n  ([#367](https://github.com/nix-rust/nix/pull/367))\n- Added `SIGINFO` in `::nix::sys::signal` for the _macos_ target as well as\n  `SIGPWR` and `SIGSTKFLT` in `::nix::sys::signal` for non-_macos_ targets.\n  ([#361](https://github.com/nix-rust/nix/pull/361))\n\n### Changed\n- Changed the structure `IoVec` in `::nix::sys::uio`.\n  ([#304](https://github.com/nix-rust/nix/pull/304))\n- Replaced `CREATE_NEW_FD` by `SIGNALFD_NEW` in `::nix::sys::signalfd`.\n  ([#309](https://github.com/nix-rust/nix/pull/309))\n- Renamed `SaFlag` to `SaFlags` and `SigFlag` to `SigFlags` in\n  `::nix::sys::signal`.\n  ([#314](https://github.com/nix-rust/nix/pull/314))\n- Renamed `Fork` to `ForkResult` and changed its fields in `::nix::unistd`.\n  ([#332](https://github.com/nix-rust/nix/pull/332))\n- Added the `signal` parameter to `clone`'s signature in `::nix::sched`.\n  ([#344](https://github.com/nix-rust/nix/pull/344))\n- `execv`, `execve`, and `execvp` now return `Result<Void>` instead of\n  `Result<()>` in `::nix::unistd`.\n  ([#357](https://github.com/nix-rust/nix/pull/357))\n\n### Fixed\n- Improved the conversion from `std::net::SocketAddr` to `InetAddr` in\n  `::nix::sys::socket::addr`.\n  ([#335](https://github.com/nix-rust/nix/pull/335))\n\n## [0.5.0] 2016-03-01\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 4.0947265625,
          "content": "# Contributing to nix\n\nWe're really glad you're interested in contributing to nix! This\ndocument has a few pointers and guidelines to help get you started.\n\nTo have a welcoming and inclusive project, nix uses the Rust project's\n[Code of Conduct][conduct]. All contributors are expected to follow it.\n\n[conduct]: https://www.rust-lang.org/conduct.html\n\n\n# Issues\n\nWe use GitHub's [issue tracker][issues].\n\n[issues]: https://github.com/nix-rust/nix/issues\n\n\n## Bug reports\n\nBefore submitting a new bug report, please [search existing\nissues][issue-search] to see if there's something related. If not, just\n[open a new issue][new-issue]!\n\nAs a reminder, the more information you can give in your issue, the\neasier it is to figure out how to fix it. For nix, this will likely\ninclude the OS and version, and the architecture.\n\n[issue-search]: https://github.com/nix-rust/nix/search?utf8=%E2%9C%93&q=is%3Aissue&type=Issues\n[new-issue]: https://github.com/nix-rust/nix/issues/new\n\n\n## Feature / API requests\n\nIf you'd like a new API or feature added, please [open a new\nissue][new-issue] requesting it. As with reporting a bug, the more\ninformation you can provide, the better.\n\n\n## Labels\n\nWe use labels to help manage issues. The structure is modeled after\n[Rust's issue labeling scheme][rust-labels]:\n- **A-** prefixed labels state which area of the project the issue\n  relates to\n- **E-** prefixed labels explain the level of experience necessary to fix the\n  issue\n- **O-** prefixed labels specify the OS for issues that are OS-specific\n- **R-** prefixed labels specify the architecture for issues that are\n  architecture-specific\n\n[rust-labels]: https://github.com/rust-lang/rust/blob/master/CONTRIBUTING.md#issue-triage\n\n\n# Pull requests\n\nGitHub pull requests are the primary mechanism we use to change nix. GitHub itself has\nsome [great documentation][pr-docs] on using the Pull Request feature. We use the 'fork and\npull' model described there.\n\nPlease make pull requests against the `master` branch.\n\nIf you change the API by way of adding, removing or changing something or if\nyou fix a bug, please add an appropriate note, every note should be a new markdown \nfile under the [changelog directory][cl] stating the change made by your pull request, \nthe filename should be in the following format:\n\n```\n<PULL_REQUEST_ID>.<TYPE>.md\n```\n\nThese are 4 `TYPE`s available:\n\n1. `added`\n2. `changed`\n3. `fixed`\n4. `removed`\n\nLet's say you have added a new API to nix, then a change log like this should\nbe added (assume it is PR #0)\n\n```md\n# file: 0.added.md\nAdded a new API xxx\n```\n\nAnd having multiple change logs for one PR is allowed.\n\n[cl]: https://github.com/nix-rust/nix/tree/master/changelog\n[pr-docs]: https://help.github.com/articles/using-pull-requests/\n\n## Testing\n\nnix has a test suite that you can run with `cargo test`. Ideally, we'd like pull\nrequests to include tests where they make sense. For example, when fixing a bug,\nadd a test that would have failed without the fix.\n\nAfter you've made your change, make sure the tests pass in your development\nenvironment. We also have continuous integration set up on [Cirrus-CI][cirrus-ci]\nand GitHub Action, which might find some issues on other platforms. The CI will\nrun once you open a pull request.\n\n[cirrus-ci]: https://cirrus-ci.com/github/nix-rust/nix\n\n### Disabling a test in the CI environment\n\nSometimes there are features that cannot be tested in the CI environment. To\nstop a test from running under CI, add `skip_if_cirrus!()` to it. Please\ndescribe the reason it shouldn't run under CI, and a link to an issue if\npossible! Other tests cannot be run under QEMU, which is used for some\narchitectures. To skip them, add a `#[cfg_attr(qemu, ignore)]` attribute to\nthe test.\n\n## GitHub Merge Queues\n\nWe use GitHub merge queues to ensure that subtle merge conflicts won't result\nin failing code. If you add or remove a CI job, remember to adjust the\nrequired status checks in the repository's branch protection rules!\n\n## API conventions\n\nIf you're adding a new API, we have a [document with\nconventions][conventions] to use throughout the nix project.\n\n[conventions]: https://github.com/nix-rust/nix/blob/master/CONVENTIONS.md\n"
        },
        {
          "name": "CONVENTIONS.md",
          "type": "blob",
          "size": 5.3046875,
          "content": "# Conventions\n\nIn order to achieve our goal of wrapping [libc][libc] code in idiomatic rust\nconstructs with minimal performance overhead, we follow the following\nconventions.\n\nNote that, thus far, not all the code follows these conventions and not all\nconventions we try to follow have been documented here. If you find an instance\nof either, feel free to remedy the flaw by opening a pull request with\nappropriate changes or additions.\n\n## Change Log\n\nWe follow the conventions laid out in [Keep A CHANGELOG][kacl].\n\n[kacl]: https://github.com/olivierlacan/keep-a-changelog/tree/18adb5f5be7a898d046f6a4acb93e39dcf40c4ad\n\n## libc constants, functions and structs\n\nWe do not define ffi functions or their associated constants and types ourselves,\nbut use or reexport them from the [libc crate][libc], if your PR uses something \nthat does not exist in the libc crate, you should add it to libc first. Once \nyour libc PR gets merged, you can adjust our `libc` dependency to include that \nlibc change. Use a git dependency if necessary.\n\n```toml\nlibc = { git = \"https://github.com/rust-lang/libc\", rev = \"the commit includes your libc PR\", ... }\n```\n\nWe use the functions exported from [libc][libc] instead of writing our own\n`extern` declarations.\n\nWe use the `struct` definitions from [libc][libc] internally instead of writing\nour own. If we want to add methods to a libc type, we use the newtype pattern.\nFor example,\n\n```rust\npub struct SigSet(libc::sigset_t);\n\nimpl SigSet {\n    ...\n}\n```\n\nWhen creating newtypes, we use Rust's `CamelCase` type naming convention.\n\n## cfg gates\n\nWhen creating operating-system-specific functionality, we gate it by\n`#[cfg(target_os = ...)]`. If **MORE THAN ONE operating system** is affected, we\nprefer to use the cfg aliases defined in build.rs, like `#[cfg(bsd)]`.\n\nPlease **DO NOT** use cfg aliases for **ONLY ONE** system as [they are bad][mismatched_target_os].\n\n[mismatched_target_os]: https://rust-lang.github.io/rust-clippy/master/index.html#/mismatched_target_os\n\n## Bitflags\n\nMany C functions have flags parameters that are combined from constants using\nbitwise operations. We represent the types of these parameters by types defined\nusing our `libc_bitflags!` macro, which is a convenience wrapper around the\n`bitflags!` macro from the [bitflags crate][bitflags] that brings in the\nconstant value from `libc`.\n\nWe name the type for a set of constants whose element's names start with `FOO_`\n`FooFlags`.\n\nFor example,\n\n```rust\nlibc_bitflags!{\n    pub struct ProtFlags: libc::c_int {\n        PROT_NONE;\n        PROT_READ;\n        PROT_WRITE;\n        PROT_EXEC;\n        #[cfg(linux_android)]\n        PROT_GROWSDOWN;\n        #[cfg(linux_android)]\n        PROT_GROWSUP;\n    }\n}\n```\n\n\n## Enumerations\n\nWe represent sets of constants that are intended as mutually exclusive arguments\nto parameters of functions by [enumerations][enum].\n\n\n## Structures Initialized by libc Functions\n\nWhenever we need to use a [libc][libc] function to properly initialize a\nvariable and said function allows us to use uninitialized memory, we use\n[`std::mem::MaybeUninit`][std_MaybeUninit] when defining the variable. This\nallows us to avoid the overhead incurred by zeroing or otherwise initializing\nthe variable.\n\n[bitflags]: https://crates.io/crates/bitflags/\n[enum]: https://doc.rust-lang.org/reference.html#enumerations\n[libc]: https://crates.io/crates/libc/\n[std_MaybeUninit]: https://doc.rust-lang.org/stable/std/mem/union.MaybeUninit.html\n\n## Pointer type casting\n\nWe prefer [`cast()`], [`cast_mut()`] and [`cast_const()`] to cast pointer types\nover the `as` keyword because it is much more difficult to accidentally change\ntype or mutability that way.\n\n[`cast()`]: https://doc.rust-lang.org/std/primitive.pointer.html#method.cast\n[`cast_mut()`]: https://doc.rust-lang.org/std/primitive.pointer.html#method.cast_mut\n[`cast_const()`]: https://doc.rust-lang.org/std/primitive.pointer.html#method.cast_const\n\n## Remove/deprecate an interface\n\nIn Nix, if we want to remove something, we don't do it immediately, instead, we\ndeprecate it for at least one release before removing it.\n\nTo deprecate an interface, put the following attribute on the top of it:\n\n```\n#[deprecated(since = \"<Version>\", note = \"<Note to our user>\")]\n```\n\n`<Version>` is the version where this interface will be deprecated, in most \ncases, it will be the version of the next release. And a user-friendly note \nshould be added. Normally, there should be a new interface that will replace\nthe old one, so a note should be something like: \"`<New Interface>` should be \nused instead\".\n\n## Where to put a test\n\nIf you want to add a test for a feature that is in `xxx.rs`, then the test should\nbe put in the corresponding `test_xxx.rs` file unless you cannot do this, e.g.,\nthe test involves private stuff and thus cannot be added outside of Nix, then\nit is allowed to leave the test in `xxx.rs`.\n\n## Syscall/libc function error handling\n\nMost syscall and libc functions return an [`ErrnoSentinel`][trait] value on error,\nwe has a nice utility function [`Errno::result()`][util] to convert it to the \nRusty `Result<T, Errno>` type, e.g., here is how `dup(2)` uses it:\n\n```rs\npub fn dup(oldfd: RawFd) -> Result<RawFd> {\n    let res = unsafe { libc::dup(oldfd) };\n\n    Errno::result(res)\n}\n```\n\n[trait]: https://docs.rs/nix/latest/nix/errno/trait.ErrnoSentinel.html\n[util]: https://docs.rs/nix/latest/nix/errno/enum.Errno.html#method.result\n"
        },
        {
          "name": "Cargo.toml",
          "type": "blob",
          "size": 2.373046875,
          "content": "[package]\nname        = \"nix\"\ndescription = \"Rust friendly bindings to *nix APIs\"\nedition     = \"2021\"\nversion     = \"0.29.0\"\nrust-version = \"1.69\"\nauthors     = [\"The nix-rust Project Developers\"]\nrepository  = \"https://github.com/nix-rust/nix\"\nlicense     = \"MIT\"\ncategories  = [\"os::unix-apis\"]\ninclude = [\"build.rs\", \"src/**/*\", \"test/**/*\", \"LICENSE\", \"README.md\", \"CHANGELOG.md\"]\n\n[package.metadata.docs.rs]\nall-features = true\nrustdoc-args = [\"--cfg\", \"docsrs\"]\ntargets = [\n  \"x86_64-unknown-linux-gnu\",\n  \"aarch64-linux-android\",\n  \"x86_64-apple-darwin\",\n  \"aarch64-apple-ios\",\n  \"x86_64-unknown-freebsd\",\n  \"x86_64-unknown-openbsd\",\n  \"x86_64-unknown-netbsd\",\n  \"x86_64-unknown-dragonfly\",\n  \"x86_64-fuchsia\",\n  \"x86_64-unknown-redox\",\n  \"x86_64-unknown-illumos\"\n]\n\n[dependencies]\nlibc = { version = \"0.2.166\", features = [\"extra_traits\"] }\nbitflags = \"2.3.3\"\ncfg-if = \"1.0\"\npin-utils = { version = \"0.1.0\", optional = true }\nmemoffset = { version = \"0.9\", optional = true }\n\n[features]\ndefault = []\n\nacct = []\naio = [\"pin-utils\"]\ndir = [\"fs\"]\nenv = []\nevent = []\nfanotify = []\nfeature = []\nfs = []\nhostname = []\ninotify = []\nioctl = []\nkmod = []\nmman = []\nmount = [\"uio\"]\nmqueue = [\"fs\"]\nnet = [\"socket\"]\npersonality = []\npoll = []\npthread = []\nptrace = [\"process\"]\nquota = []\nprocess = []\nreboot = []\nresource = []\nsched = [\"process\"]\nsignal = [\"process\"]\nsocket = [\"memoffset\"]\nsyslog = []\nterm = []\ntime = []\nucontext = [\"signal\"]\nuio = []\nuser = [\"feature\"]\nzerocopy = [\"fs\", \"uio\"]\n\n[dev-dependencies]\nassert-impl = \"0.1\"\nparking_lot = \"0.12\"\nrand = \"0.8\"\ntempfile = \"3.7.1\"\nsemver = \"1.0.7\"\nnix = { path = \".\", features = [\"acct\", \"aio\", \"dir\", \"env\", \"event\", \"fanotify\",\n    \"feature\", \"fs\", \"hostname\", \"inotify\", \"ioctl\", \"kmod\", \"mman\", \"mount\", \"mqueue\",\n    \"net\", \"personality\", \"poll\", \"pthread\", \"ptrace\", \"quota\", \"process\", \"reboot\",\n    \"resource\", \"sched\", \"signal\", \"socket\", \"syslog\", \"term\", \"time\", \"ucontext\", \"uio\",\n    \"user\", \"zerocopy\"] }\n\n[target.'cfg(any(target_os = \"android\", target_os = \"linux\"))'.dev-dependencies]\ncaps = \"0.5.3\"\n\n[target.'cfg(target_os = \"freebsd\")'.dev-dependencies]\nsysctl = \"0.4\"\n\n[build-dependencies]\ncfg_aliases = \"0.2.1\"\n\n[[test]]\nname = \"test\"\npath = \"test/test.rs\"\n\n[[test]]\nname = \"test-aio-drop\"\npath = \"test/sys/test_aio_drop.rs\"\n\n[[test]]\nname = \"test-clearenv\"\npath = \"test/test_clearenv.rs\"\n\n[[test]]\nname = \"test-prctl\"\npath = \"test/sys/test_prctl.rs\"\n"
        },
        {
          "name": "Cross.toml",
          "type": "blob",
          "size": 0.1630859375,
          "content": "[build.env]\npassthrough = [\n\t\"RUSTFLAGS\",\n\t\"RUST_TEST_THREADS\"\n]\n\n[target.loongarch64-unknown-linux-gnu]\nimage = \"ghcr.io/cross-rs/loongarch64-unknown-linux-gnu:edge\"\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.0712890625,
          "content": "The MIT License (MIT)\n\nCopyright (c) 2015 Carl Lerche + nix-rust Authors\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 4.421875,
          "content": "# Rust bindings to *nix APIs\n\n[![Cirrus Build Status](https://api.cirrus-ci.com/github/nix-rust/nix.svg)](https://cirrus-ci.com/github/nix-rust/nix)\n[![crates.io](https://img.shields.io/crates/v/nix.svg)](https://crates.io/crates/nix)\n[![docs.rs](https://img.shields.io/badge/docs.rs-nix-blue?style=flat-square&logo=docs.rs)](https://docs.rs/nix)\n![maintenance-status](https://img.shields.io/badge/maintenance-actively--developed-brightgreen.svg)\n[![msrv](https://img.shields.io/badge/msrv-1.69-blue?style=flat-square&logo=rust)](https://www.rust-lang.org)\n\nNix seeks to provide friendly bindings to various *nix platform APIs (Linux, Darwin,\n...). The goal is to not provide a 100% unified interface, but to unify\nwhat can be while still providing platform specific APIs.\n\nFor many system APIs, Nix provides a safe alternative to the unsafe APIs\nexposed by the [libc crate](https://github.com/rust-lang/libc).  This is done by\nwrapping the libc functionality with types/abstractions that enforce legal/safe\nusage.\n\n\nAs an example of what Nix provides, examine the differences between what is\nexposed by libc and nix for the\n[gethostname](https://man7.org/linux/man-pages/man2/gethostname.2.html) system\ncall:\n\n```rust,ignore\n// libc api (unsafe, requires handling return code/errno)\npub unsafe extern fn gethostname(name: *mut c_char, len: size_t) -> c_int;\n\n// nix api (returns a nix::Result<OsString>)\npub fn gethostname() -> Result<OsString>;\n```\n\n## Supported Platforms\n\nnix target support consists of three tiers. While nix attempts to support all\nplatforms supported by [libc](https://github.com/rust-lang/libc), only some\nplatforms are actively supported due to either technical or manpower\nlimitations. Support for platforms is split into three tiers:\n\n  * Tier 1 - Builds and tests for this target are run in CI. Failures of either\n             block the inclusion of new code.\n  * Tier 2 - Builds for this target are run in CI. Failures during the build\n             blocks the inclusion of new code. Tests may be run, but failures\n             in tests don't block the inclusion of new code.\n  * Tier 3 - Builds for this target are run in CI. Failures during the build\n             *do not* necessarily block the inclusion of new code.  That is, at\n             our discretion a Tier 3 target may be dropped at any time, if it\n             would otherwise block development.\n\nPlatforms not listed are supported on a best-effort basis, relying on our users\nto report any problems.\n\nThe following targets are supported by `nix`:\n\n<table>\n <tr>\n  <th>Tier 1</th>\n  <th>Tier 2</th>\n  <th>Tier 3</th>\n </tr>\n <tr>\n  <td>\n   <ul>\n    <li>aarch64-apple-darwin</li>\n    <li>aarch64-unknown-linux-gnu</li>\n    <li>arm-unknown-linux-gnueabi</li>\n    <li>armv7-unknown-linux-gnueabihf</li>\n    <li>i686-unknown-freebsd</li>\n    <li>i686-unknown-linux-gnu</li>\n    <li>i686-unknown-linux-musl</li>\n    <li>mips-unknown-linux-gnu</li>\n    <li>mips64-unknown-linux-gnuabi64</li>\n    <li>mips64el-unknown-linux-gnuabi64</li>\n    <li>mipsel-unknown-linux-gnu</li>\n    <li>powerpc64le-unknown-linux-gnu</li>\n    <li>x86_64-unknown-freebsd</li>\n    <li>x86_64-unknown-linux-gnu</li>\n    <li>x86_64-unknown-linux-musl</li>\n   </ul>\n  </td>\n  <td>\n   <ul>\n    <li>aarch64-apple-ios</li>\n    <li>aarch64-linux-android</li>\n    <li>arm-linux-androideabi</li>\n    <li>arm-unknown-linux-musleabi</li>\n    <li>armv7-linux-androideabi</li>\n    <li>i686-linux-android</li>\n    <li>loongarch64-unknown-linux-gnu</li>\n    <li>s390x-unknown-linux-gnu</li>\n    <li>x86_64-linux-android</li>\n    <li>x86_64-unknown-illumos</li>\n    <li>x86_64-unknown-netbsd</li>\n   </td>\n   <td>\n    <li>armv7-unknown-linux-uclibceabihf</li>\n    <li>powerpc64-unknown-linux-gnu</li>\n    <li>x86_64-fuchsia</li>\n    <li>x86_64-unknown-dragonfly</li>\n    <li>x86_64-unknown-haiku</li>\n    <li>x86_64-unknown-linux-gnux32</li>\n    <li>x86_64-unknown-openbsd</li>\n    <li>x86_64-unknown-redox</li>\n    <li>i686-unknown-hurd-gnu</li>\n   </td>\n  </tr>\n</table>\n\n## Minimum Supported Rust Version (MSRV)\n\nnix is supported on Rust 1.69 and higher.  Its MSRV will not be\nchanged in the future without bumping the major or minor version.\n\n## Contributing\n\nContributions are very welcome.  Please See [CONTRIBUTING](CONTRIBUTING.md) for\nadditional details.\n\nFeel free to join us in [the nix-rust/nix](https://gitter.im/nix-rust/nix) channel on Gitter to\ndiscuss `nix` development.\n\n## License\n\nNix is licensed under the MIT license.  See [LICENSE](LICENSE) for more details.\n"
        },
        {
          "name": "RELEASE_PROCEDURE.md",
          "type": "blob",
          "size": 1.9658203125,
          "content": "This document lists the steps that lead to a successful release of the Nix\nlibrary.\n\n# Before Release\n\nNix uses [cargo release](https://github.com/crate-ci/cargo-release) to automate\nthe release process. Based on changes since the last release, pick a new\nversion number following semver conventions. For Nix, a change that drops\nsupport for some Rust versions counts as a breaking change, and requires a\nmajor bump.\n\nThe release is prepared as follows:\n\n> NOTE: the following procedure should be done directly against the master \n> branch of the repo.\n\n- Clone the `nix-rust/nix` repository with your preferred way, and `cd` to it:\n\n  ```sh\n  $ git clone https://github.com/nix-rust/nix.git\n  $ cd nix\n  ```\n\n- If we are using `libc` from git, replace it with a usable release from crates.io.\n \n  ```diff\n  [dependencies]\n  -libc = { git = \"https://github.com/rust-lang/libc\", rev = \"<Revision>\", features = [\"extra_traits\"] }\n  +libc = { version = \"<Version>\", features = [\"extra_traits\"] }\n  ```\n  \n- Update the version number in `Cargo.toml`\n- Generate `CHANGELOG.md` for this release by \n\n  ```sh\n  $ towncrier build --version=<VERSION> --yes\n  Loading template...\n  Finding news fragments...\n  Rendering news fragments...\n  Writing to newsfile...\n  Staging newsfile...\n  Removing the following files:\n  nix/changelog/xxxx.xxxx.md\n  nix/changelog/xxxx.xxxx.md\n  ...\n  nix/changelog/xxxx.xxxx.md\n  Removing news fragments...\n  Done!\n  ``` \n\n- Push the changes made by the above steps to the master branch\n\n- Ensure you have a crates.io token \n  1. With the `publish-update` scope\n  2. Can be used for crate `nix`\n  3. It is set via `cargo login`\n\n  If not, create a new token [here](https://crates.io/settings/tokens), and set\n  it. \n\n- Confirm that everything's ready for a release by running\n  `cargo release <VERSION>`\n- Create the release with `cargo release -x <VERSION>`, this step will publish\n  the version to crates.io and push the new version tag to GitHub.\n\n- Congratulations on a new Nix release!\n"
        },
        {
          "name": "build.rs",
          "type": "blob",
          "size": 1.2080078125,
          "content": "use cfg_aliases::cfg_aliases;\n\nfn main() {\n    cfg_aliases! {\n        android: { target_os = \"android\" },\n        dragonfly: { target_os = \"dragonfly\" },\n        ios: { target_os = \"ios\" },\n        freebsd: { target_os = \"freebsd\" },\n        illumos: { target_os = \"illumos\" },\n        linux: { target_os = \"linux\" },\n        macos: { target_os = \"macos\" },\n        netbsd: { target_os = \"netbsd\" },\n        openbsd: { target_os = \"openbsd\" },\n        solaris: { target_os = \"solaris\" },\n        watchos: { target_os = \"watchos\" },\n        tvos: { target_os = \"tvos\" },\n        visionos: { target_os = \"visionos\" },\n\n\n        // cfg aliases we would like to use\n        apple_targets: { any(ios, macos, watchos, tvos, visionos) },\n        bsd: { any(freebsd, dragonfly, netbsd, openbsd, apple_targets) },\n        bsd_without_apple: { any(freebsd, dragonfly, netbsd, openbsd) },\n        linux_android: { any(android, linux) },\n        freebsdlike: { any(dragonfly, freebsd) },\n        netbsdlike: { any(netbsd, openbsd) },\n        solarish: { any(illumos, solaris) },\n    }\n\n    // Below are custom cfg values set during some CI steps.\n    println!(\"cargo:rustc-check-cfg=cfg(fbsd14)\");\n    println!(\"cargo:rustc-check-cfg=cfg(qemu)\");\n}\n"
        },
        {
          "name": "changelog",
          "type": "tree",
          "content": null
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "justfile",
          "type": "blob",
          "size": 0.2060546875,
          "content": "# If no sub-command is given, simply list all the available options\n_default:\n    just --list\n\n# Build the doc\ndoc *args='':\n    RUSTDOCFLAGS='--cfg docsrs' cargo +nightly doc --all-features --no-deps {{args}}\n\n"
        },
        {
          "name": "rustfmt.toml",
          "type": "blob",
          "size": 0.013671875,
          "content": "max_width = 80"
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "test",
          "type": "tree",
          "content": null
        },
        {
          "name": "towncrier.toml",
          "type": "blob",
          "size": 1.0849609375,
          "content": "# towncrier configuration document: \n# https://towncrier.readthedocs.io/en/stable/configuration.html\n\n[tool.towncrier]\n# Read news fragments from this directory\ndirectory = \"changelog\"\n# Concatenate fragments, and prepend to this file\nfilename = \"CHANGELOG.md\"\ntitle_format = \"## [{version}] - {project_date}\"\n# Used to disable towncrier's \"=====\" title header\nunderlines = [\"\", \"\", \"\"]\n# Wrap news fragments to a line length of 79\nwrap = true\n# Every news fragement under the `changelog` directory is named \"<id>.<type>.md\",\n# this `id` field, is called issue/ticket number in towncrier's term\n# `issue_format` controls how this will be rendered in the final CHANGELOG\n# We use this for Pull Request even though it is called \"issue\"\nissue_format = \"[#{issue}](https://github.com/nix-rust/nix/pull/{issue})\"\n# Ask towncrier to add new notes after this\nstart_string = \"# Change Log\\n\"\n\n# nix's change log typs (in alphabetical order)\n# These types will be capitalized by default.\n[tool.towncrier.fragment.added]\n[tool.towncrier.fragment.changed]\n[tool.towncrier.fragment.fixed]\n[tool.towncrier.fragment.removed]\n"
        }
      ]
    }
  ]
}