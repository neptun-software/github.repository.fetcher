{
  "metadata": {
    "timestamp": 1736709008957,
    "page": 78,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjgw",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "plotters-rs/plotters",
      "stars": 3985,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.0654296875,
          "content": "/target\n.*.sw*\n**/target\n.vscode/*\nCargo.lock\n.idea\nplotters/*.svg\n"
        },
        {
          "name": ".gitmodules",
          "type": "blob",
          "size": 0.111328125,
          "content": "[submodule \"plotters-doc-data\"]\n\tpath = plotters/plotters-doc-data\n\turl = https://github.com/38/plotters-doc-data\n"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 12.205078125,
          "content": "# Changelog\n\n## Plotters 0.3.6 (2024-05-20)\n\n### Added\n\n- Add Clone and PartialEq traits to SeriesLabelPosition and ShapeStyle\n- Add function to draw and save an evcxr figure\n- Add dotted line style\n\n### Fixed\n\n- Fix bug with infinite size for collinear line segments as coordinates\n- Fix overflow in blit_bitmap\n- Fix dashed line algorithm\n\n## Plotters 0.3.5 (2023-06-16)\n\n### Added \n\n- Add ab_glyph font backend\n- Color maps\n\n### Fixed\n\n- Fix broken unaligned read in unsafe code\n- A lot of broken links and typos\n\n## Plotters 0.3.4 (2022-09-08)\n\n### Fixed\n\n- EvcxR feature compiling issue without bitmap backend enabled\n\n### Improved\n\n- Color types manipulations\n\n\n## Plotters 0.3.3 (2022-08-19)\n\n### Improved\n\n- The EvcxR integration now supports bitmap output. (Thanks to @lisanhu)\n\n### Fixed\n\n- Fix the plotters crate's edition requirement\n\n## Plotters 0.3.2 (2022-07-05)\n\n### Added\n\n- Pie element (by @hhamana)\n\n### Improved\n\n- Improved documentation for predefined colors. (Thanks to @siefkenj)\n- Introduce the full Material Design 2014 Color Palette. (Thanks to @siefkenj)\n- Massive documentation improvements (Thanks to @facorread and many others)\n\n### Fixed\n\n- More float point axis key point algorithm fixes (@38)\n- Default rasterizer fixes (@shinmili and @38)\n\n## Plotters 0.3.1 (2021-05-21)\n\n### Improved\n\n- Surface series now supports more customizations\n- Z-orde support for 3D plots\n- Allow passing colors by value and reference (thanks to chrisduerr)\n\n### Fixed\n\n- Infinite loop / panic when the axis range is zero\n- UB in minifb example (thanks to TheEdward162)\n- Examples that uses old APIs (thanks to chrisduerr)\n\n## Plotters 0.3.0 (2020-09-03)\n\nThis is the next major release of Plotters, see [release notes](./RELEASE-NOTES.md) for more details.\n\n### Added\n\n- The plotters backend API crate is introduced which allows third-party backend.\n- Allow slice used as a coordinate if the item type implements `PartialOrd`.\n- Linspace coordinate type, which allows define a discrete coordinate on continuous value types (such as f32, DateTime, etc) with a step specification\n- Nested coordinate type, now we support define pair of category and nested values as nested coordinate.\n- Introduce backend crates: plotters-bitmap, plotters-svg, plotters-cairo, plotters-canvas, plotters-console\n- 3D Plotting features\n\n### Fixed\n\n- Adjust Canvas backend size with DPR (Thanks to Marius-Mueller)\n\n### Improvement\n\n- Enhanced key point algorithms: New key point hint trait are used for key point algorithms && many improvement on key point algorithms for different types\n- Renamed `MeshStyle::line\\_style\\_1` and `MeshStyle::line\\_style\\_2` to `bold\\_line\\_style` and `light\\_line\\_style`\n- Reorganize the \"plotters::coord\" namespace\n- Improved discrete coordinate trait\n- Split backend code into isolated crates and can be maintained indepdendenly\n- Category coordinate is now replaced by slice coordinate\n- Removing the requirement for `Debug` trait for chart coordinate, allows ranged coordinate define its own formatting function.\n\n### Removed\n\n- The `Path` name alias for `PathElement`\n- Most code `plotters::drawing::backend\\_impl::\\*` (expect `MockedBackend` for testing purpose) is removed due to crate split. \n- Piston backend due to the Piston project seems not actively developing\n\n## Plotters 0.2.15 (2020-05-26)\n\n### Fixed\n\n- Division by zero with logarithmic coord (issue #143)\n- Update dependencies\n\n## Plotters 0.2.14 (2020-05-05)\n\n### Fixed\n\n- Compile error with older rustc which causing breaks\n\n## Plotters 0.2.13 (2020-05-04)\n### Added\n\n- Line width is supported for SVG \n\n### Fixed\n\n- Updated dependencies\n- Default rasterizer causing bitmap backend draw out-of-range pixels\n- Depdendicy fix\n\n## Plotters 0.2.12 (2019-12-06)\n### Added\n\n- BitMapBackend now is able to support different pixel format natively. Check our new minifb demo for details.\n- Incremental Rendering by saving the previous chart context into a state and restore it on a different drawing area.\n- BoxPlot support (See boxplot example for more details) (Thanks to @nuald)\n- Category coordinate spec which allows use a list of given values as coordinate (Thanks to @nuald)\n- New text positioning model which allows develvoper specify the anchor point. This is critical for layouting SVG correctly. See `plotters::style::text::text_anchor` for details. (Thanks to @nuald)\n\n### Improved\n\n- Faster bitmap blending algorithm, which is 5x faster than the original one.\n- Text alignment improvement, now we can suggest the invariant point by giving `TextAlignment` to the text style (Thanks to @nauld)\n- More controls on features, allows opt in and out series types\n- Remove dependency to svg crate, since it doesn't provide more feature than a plain string.\n\n## Plotters 0.2.11 (2019-10-27)\n\n### Added\n\n- Add font style support, now we are able to set font variations: normal, oblique, italic or bold.\n\n### Improved \n\n- Font description is greatly improved, general font family is supported: `serif`, `serif-sans`, `monospace` (Thanks to @Tatrix)\n- Tested the font loading on Linux, OSX and Windowns. Make font loading more reliable.\n- `BitMapBackend` isn't depends on `image` crate now. Only the image encoding part relies on the `image` crate\n- Refactored WASM demo use ES6 and `wasm-pack` (Thanks to @Tatrix)\n- Label style for X axis and Y axis can be set separately now using `x\\_label\\_style` and `y\\_label\\_style`. (Thanks to @zhiburt)\n\n## Plotters 0.2.10 (2019-10-23)\n\n### Improved\n\n- Refactored and simplified TTF font cache, use RwLock instead of mutex which may benefit for parallel rendering. (Thanks to @Tatrix)\n\n### Bug Fix\n\n- The fast bitmap filling algorithm may overflow the framebuffer and cause segfault\n\n## Plotters 0.2.9 (2019-10-21)\n\n### Improvement\n\n- Avoid copying image buffer when manipulate the image. (Thanks to @ralfbiedert)\n- Bitmap element which allows blit the image to another drawing area.\n- Performance improvement: now the bitmap backend is 8 times faster\n- Added benchmarks to monitor the performance change\n\n### Bug Fix\n\n- Performance fix: '?' operator is very slow\n- Dynamic Element lifetime bound: Fix a bug that prevents area series draws on non-static lifetime backend\n\n## Plotters 0.2.8 (2019-10-12)\n\n### Added\n\n- Cairo backend, which supports using Plotters draw a GTK surface.\n- Allow secondary axis to be configured with different label style.\n- Relative Sizing, now font and size can use relative scale: `(10).percent\\_height()` means we want the size is 10% of parent's height. \n- Allow the axis overlapping with the plotting area with `ChartBuilder::set\\_\\label\\_area\\_overlap`.\n- Allow label area is on the top of the drawing area by setting the label area size to negative (Thanks to @serzhiio).\n- Allow configure the tick mark size, when the tick mark size is negative the axis becomes inward (Thanks to @serzhiio).\n\n### Bug Fix\n\n- `FontError` from rusttype isn't `Sync` and `Send`. We don't have trait bound to ensure this.  (Thanks to @dalance)\n\n### Improvement\n\n- New convenient functions: `disable_mesh` and `disable_axes`\n\n## Plotters 0.2.7 (2019-10-1)\n\n### Added\n\n- GIF Support, now bitmap backend is able to render gif animation\n\n### Bug Fix\n\n- Fixed several polygon filling bugs.\n- Completely DateTime coordinate system support\n\n## Plotters 0.2.6 (2019-09-19)\n\n### Added\n\n- Allowing axis be placed on top or right by setting `right_y_label_area` and `top_x_label_area`\n- Dual-coord system chart support: Now we are able to attach a secondary coord system to the chart using `ChartContext::set_secondary_coord`. And `draw_secondary_axes` to configure the style of secondary axes. Use `draw_secondary axis` to draw series under the secondary coordinate system.\n- Add support for `y_label_offset`. Previously only X axis label supports offset attribute. \n- New label area size API `set_label_area_size` can be used for all 4 label area\n- Added new error bar element\n- New axis specification type `PartialAxis` which allows the partially rendered axis. For example, we can define the chart's axis range as `0..1`, but only `0.3..0.7` is rendered on axis. This can be done by `(0.0..1.0).partial_axis(0.3..0.7)`\n- Drawing backend now support fill polygon and introduce polygon element\n- Area Chart Support\n\n### Improvement\n\n- More examples are included\n- Date coordinate now support using monthly or yearly axis. This is useful when plotting some data in monthly or yearly basis.\n- Make margin on different side of a chart can be configured separately.\n- Better test coverage\n\n## Plotters 0.2.5 (2019-09-07)\n\n### Bug Fix\n\n- Key points algorithm for numeric coordinate might not respect the constraint\n\n## Plotters 0.2.4 (2019-09-05)\n\n### Improvement\n\n- Add `i128` and `u128` as coordinate type (Credit to @Geemili)\n\n### Bug Fix\n\n- Date coordinate is working for a long time span now\n\n## Plotters 0.2.3 (2019-08-19)\n\n### Improvement\n\n- Color system now is based on `palette` crate (Credit to @Veykril)\n\n## Plotters 0.2.2 (2019-06-25)\n\n### Added\n\n- More documentation: a Jupyter interactive notebook of Plotters tutorial \n- Add more quadrants to the `SeriesLabelPosition` (Credit to @wolfjagger).\n\n### Improvement\n\n- Histogram improvements, horizontal bar is supported, new creation API which compiler can infer the type\n- Supporting split the drawing area with a list of breakpoints using `DrawingArea::split_by_breakpoints`\n- Enable SVG support for WASM\n- Make the `BitMapBackend` takes an in memory mutable buffer\n\n### Fix\n\n- Rectangle drawing bug when the axis is reversed\n\n## Plotters 0.2.1 (2019-06-10)\n\n### Improvement\n\n- Move the sample images and other documentation data out of this repository.\n\n### Fix\n- Make drawing errors shareable across threads. Otherwise, it causes compile error in some cases. (Thanks to @rkarp)\n\n## Plotters 0.2.0 (2019-06-08)\n\n### Added\n- Add relative sizing by added function `DrawingArea::relative_to_height` and `DrawingArea::relative_to_width`.\n- Added piston backend, now we can render plot on a window and dynamically render the plot\n\n### Improved\n- Creating drawing area with `&Rc<RefCell<DrawingBackend>>`. Previously, the drawing area creation requires take over the drawing backend ownership. But sometimes the drawing backend may have additional options. With new API, this can be done by putting the backend drawing area into smart pointers, thus, the drawing backend is accessible after creates the root drawing area.\n\n## Plotters 0.1.14 (2019-06-06)\n\n### Added\n- Font is now support rotation transformation. Use `FontDesc::transform` to apply an rotation to transformation. For example, `font.transform(FontTransform::Rotate90)`.\n- ChartContext now support drawing axis description. Use `MeshStyle::x_desc` and `MeshStyle::y_desc` to specify the axis description text.\n- Add series label support. `ChartContext::draw_series` now returns a struct `SeriesAnno` that collects the additional information for series labeling. `ChartContext::draw_series_labels` are used to actually draw the series label. (See `examples/chart.rs` for detailed examples)\n- Mocking drawing backend.\n- evcxr Support\n\n### Improvement\n- Unify `OwnedText` and `Text` into `Text`. Previously, `OwnedText` and `Text` are two separate types, one holds a `String` another holds a `&str`. Now `OwnedText` is removed.\nuse `Text::new(\"text\".to_string(),...)` for owned text element and `Text::new(\"text\", ...)` for borrowed text.\n- Refactor the color representation code, since previously it's heavily relies on the trait object and hard to use\n- More test cases\n\n## Plotters 0.1.13 (2019-05-31)\n\n### Added\n- New abstraction of backend style with `BackendStyle` trait which should be able to extend easier in the future\n- Backend support features, now feature options can be used to control which backend should be supported\n- Add new trait `IntoDrawingArea`, now we can use `backend.into_drawing_area()` to convert the backend into a raw drawing area\n- Now elements support dynamic dispatch, use `element.into_dyn()` to convert the element into a runtime dispatching element\n\n### Improvement\n- Improved the overall code quality\n- Documentation polish\n- Stabilized APIs\n- New conversion traits implementations\n- Now transparent color is ignored by SVG, bitmap and HTML Canvas backend\n\n### Fix\n- Changed the open-close pattern to a `present` function which indicates the end of drawing one frame\n- Fix the but that `ChartBuilder::title` and `ChartBuilder::margin` cannot be called at the same time && `build_ranged` now returning a result.\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 5.271484375,
          "content": "Thanks for contributing to `Plotters`! \n\nHere's the useful information about contributing to Plotters.\n\n# License\n\nThe `Plotters` project is under MIT license.\nYou may interested in reading [the full text of the license](https://github.com/plotters-rs/plotters/blob/master/LICENSE).\nIf you have any questions or concerns please contact us at <haohou302@gmail.com>.\n\n# Contributing to Plotters codebase\n\nYou are warmly welcomed to contribute code and make Plotters better. Here's a few things that may be helpful to you.\n\n## How to make sure my code works\n\n*Help wanted:* You may realize that `Plotters` doesn't have a high testing coverage, but we are trying hard to improve. It would be nice if you add more test cases for newly added code, or contribute new test cases directly.\n\nBefore you finalize your PR, please check the following thing:\n\n- Please make sure all test case passes. If any case fails, we need to dig into that. For more details about testing, please read the [Testing notes](#testing-notes).\n\n- Please run the benchmark to check if the performance changed compare to the master branch.\n\n- Please run the following command to check if the example output changes. (There shouldn't be any change if you are not modifying the layout)\n\n  ```bash\n  cd plotters\n  cargo test --doc\n  cargo build --release --examples\n  for i in examples/*.rs\n  do\n  ../target/release/examples/$(basename $i .rs)\n  done\n  cd plotters-doc-data\n  git status\n  ```\n\n- Please make sure the WASM target works as well. The easiest way to do that is try to run our WASM demo under [`plotters/examples/wasm-demo`](https://github.com/plotters-rs/plotters/tree/master/plotters/examples/wasm-demo) directory and follow the instruction in the [`README.md`](./plotters/examples/wasm-demo/README.md) file under that directory.\n\n## Does my code meet the styling guidelines\n\nAlthough there's no strictly enforced rules for the style, but please read the following recommendations before you start work.\n\n- In general, the only guide line is we need to make sure `cargo fmt` doesn't change anything. So it's recommended use `cargo fmt` to fix the code styling issues before you wrap up the work. (Such as submit a PR)\n- For naming, acronyms or initials aren't normally used in the code base. Descriptive identifier is highly recommended.\n- Documentation is highly recommended. (But there are still a lot of undocumented code unfortunately).\n- For API documentation, we normally follows Doxygen's style, which looks like\n\n```rust\n/// Some description to this API\n/// - `param_1`: What param_1 do\n/// - `param_2`: What param_2 do\n/// - **returns**: The return value description\nfn foo(param_1: u32, param_2: u32) -> u32{ 0 }\n```\n\n## Top Level Documentation and Readme\n\nPlease notice we put almost same content for top level `rustdoc` and `README.md`. Thus the both part are generated by script.\nIf you need to modify the readme and documentation, please change the template at [`plotters/doc-template/readme.template.md`](https://github.com/plotters-rs/plotters/blob/master/doc-template/readme.template.md) and \nuse the following command to synchronize the doc to both `src/lib.rs` and `README.md`.\n\n```bash\nbash doc-template/update_readme.sh\n```\n\n## Testing Notes\n\nAs the project is intended to work in various environments, it's important to test its all features and different feature combinations. The notes below may help you with that task.\n\n### Native\n\nTesting all features:\n\n```bash\ncargo test --all-features\n```\n\nTesting no features at all:\n\n```bash\ncargo test --no-default-features --lib\n```\n\nSince all examples and most doc-test requires `bitmap` features, so we don't test examples and doc test in this case.\n\n### WebAssembly\n\nWasm target is not tested by default, and you may want to use [wasm-bindgen](https://rustwasm.github.io/docs/wasm-bindgen/wasm-bindgen-test/usage.html) CLI tool.\n\nInstallation:\n\n```bash\nrustup target add wasm32-unknown-unknown\ncargo install wasm-bindgen-cli\n```\n\nAdditionally, the web browser and its driver should be available, please see [Configuring Which Browser is Used](https://rustwasm.github.io/wasm-bindgen/wasm-bindgen-test/browsers.html#configuring-which-browser-is-used-1). For example, to use Firefox, its binary (`firefox`) and [geckodriver](https://github.com/mozilla/geckodriver/releases) must be on your `$PATH`.\n\nUsage (only library tests are supported for now):\n\n```bash\ncargo test --lib --target wasm32-unknown-unknown\n```\n\nFor the debugging you could set the `NO_HEADLESS=1` environment variable to run the tests using the local server instead of the headless browser.\n\n### Minimal Supported Compiler Version\n\nCurrently we should make sure Plotters is compatible with rustc 1.36.0.\nBefore making a PR, please check if the code compile with 1.36.0 (with default features).\n\n### Code Coverage\n\nFor for the code coverage information you may want to use [cargo-tarpaulin](https://crates.io/crates/cargo-tarpaulin). Please note that it works with x86_64 GNU/Linux only, and the doc tests coverage require nightly Rust.\n\nInstallation ([pycobertura](https://pypi.python.org/pypi/pycobertura) is used to get the detailed report about the coverage):\n\n```bash\ncargo install cargo-tarpaulin\npip install pycobertura\n```\n\nUsage:\n\n```bash\ncargo tarpaulin --all-features --run-types Tests Doctests -o Xml --output-dir target/test\npycobertura show target/test/cobertura.xml\n```\n"
        },
        {
          "name": "Cargo.toml",
          "type": "blob",
          "size": 0.1181640625,
          "content": "[workspace]\nmembers = [\"plotters\", \"plotters-backend\", \"plotters-bitmap\", \"plotters-svg\"]\ndefault-members = [\"plotters\"]\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.0654296875,
          "content": "MIT License\n\nCopyright (c) 2019-2021 Hao Hou <haohou302@gmail.com>\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 27.0068359375,
          "content": "# Plotters - A Rust drawing library focusing on data plotting for both WASM and native applications 🦀📈🚀\n\n<a href=\"https://crates.io/crates/plotters\">\n    <img style=\"display: inline!important\" src=\"https://img.shields.io/crates/v/plotters.svg\"></img>\n</a>\n<a href=\"https://docs.rs/plotters\">\n    <img style=\"display: inline!important\" src=\"https://docs.rs/plotters/badge.svg\"></img>\n</a>\n<a href=\"https://docs.rs/plotters\">\n    <img style=\"display: inline!important\" src=\"https://img.shields.io/crates/d/plotters\"></img>\n</a>\n<a href=\"https://plotters-rs.github.io/rustdoc/plotters/\">\n\t<img style=\"display: inline! important\" src=\"https://img.shields.io/badge/docs-development-lightgrey.svg\"></img>\n</a>\n\nPlotters is a drawing library designed for rendering figures, plots, and charts, in pure Rust. Plotters supports various types of back-ends, \nincluding bitmap, vector graph, piston window, GTK/Cairo and WebAssembly. \n\n- A new Plotters Developer's Guide is a work in progress. The preview version is available [here](https://plotters-rs.github.io/book).\n- Try Plotters with an interactive Jupyter notebook, or view [here](https://plotters-rs.github.io/plotters-doc-data/evcxr-jupyter-integration.html) for the static HTML version.\n- To view the WASM example, go to this [link](https://plotters-rs.github.io/wasm-demo/www/index.html)\n- Currently we have all the internal code ready for console plotting, but a console based backend is still not ready. See [this example](https://github.com/plotters-rs/plotters/blob/master/plotters/examples/console.rs) for how to plot on console with a customized backend.\n- Plotters has moved some backend code to separate repositories, check [FAQ list](#faq-list) for details\n- Some interesting [demo projects](#demo-projects) are available, feel free to try them out.\n\n## Gallery\n\nTo view the source code for each example, please click on the example image.\n\n<a href=\"https://github.com/plotters-rs/plotters/blob/master/plotters/examples/chart.rs\">\n    <img src=\"https://plotters-rs.github.io/plotters-doc-data/sample.png\" class=\"galleryItem\" width=200px></img>\n</a>\n\n<a href=\"https://github.com/plotters-rs/plotters/blob/master/plotters/examples/stock.rs\">\n    <img src=\"https://plotters-rs.github.io/plotters-doc-data/stock.png\" class=\"galleryItem\" width=200px></img>\n</a>\n\n<a href=\"https://github.com/plotters-rs/plotters/blob/master/plotters/examples/histogram.rs\">\n    <img src=\"https://plotters-rs.github.io/plotters-doc-data/histogram.png\" class=\"galleryItem\" width=200px></img>\n</a>\n\n<a href=\"https://github.com/plotters-rs/plotters#quick-start\">\n    <img src=\"https://plotters-rs.github.io/plotters-doc-data/0.png\" class=\"galleryItem\" width=200px></img>\n</a>\n\n<a href=\"#\">\n\t<img src=\"https://plotters-rs.github.io/plotters-doc-data/console-2.png\" class=\"galleryItem\" width=200px></img>\n</a>\n\n<a href=\"https://github.com/plotters-rs/plotters/blob/master/plotters/examples/mandelbrot.rs\">\n    <img src=\"https://plotters-rs.github.io/plotters-doc-data/mandelbrot.png\" class=\"galleryItem\" width=200px></img>\n</a>\n\n<a href=\"https://github.com/plotters-rs/plotters#trying-with-jupyter-evcxr-kernel-interactively\">\n    <img src=\"https://plotters-rs.github.io/plotters-doc-data/evcxr_animation.gif\" class=\"galleryItem\" width=200px></img>\n</a>\n\n\n<a href=\"https://github.com/plotters-rs/plotters-piston/blob/master/examples/cpustat.rs\">\n    <img src=\"https://plotters-rs.github.io/plotters-doc-data/plotters-piston.gif\" class=\"galleryItem\" width=200px></img>\n</a>\n\n<a href=\"https://github.com/plotters-rs/plotters/blob/master/plotters/examples/normal-dist.rs\">\n    <img src=\"https://plotters-rs.github.io/plotters-doc-data/normal-dist.png\" class=\"galleryItem\" width=200px></img>\n</a>\n\n<a href=\"https://github.com/plotters-rs/plotters/blob/master/plotters/examples/two-scales.rs\">\n    <img src=\"https://plotters-rs.github.io/plotters-doc-data/twoscale.png\" class=\"galleryItem\" width=200px></img>\n</a>\n\n<a href=\"https://github.com/plotters-rs/plotters/blob/master/plotters/examples/matshow.rs\">\n    <img src=\"https://plotters-rs.github.io/plotters-doc-data/matshow.png\" class=\"galleryItem\" width=200px></img>\n</a>\n\n<a href=\"https://github.com/plotters-rs/plotters/blob/master/plotters/examples/sierpinski.rs\">\n\t<img src=\"https://plotters-rs.github.io/plotters-doc-data/sierpinski.png\" class=\"galleryItem\" width=200px></img>\n</a>\n\n<a href=\"https://github.com/plotters-rs/plotters/blob/master/plotters/examples/normal-dist2.rs\">\n\t<img src=\"https://plotters-rs.github.io/plotters-doc-data/normal-dist2.png\" class=\"galleryItem\" width=200px></img>\n</a>\n\n<a href=\"https://github.com/plotters-rs/plotters/blob/master/plotters/examples/errorbar.rs\">\n\t<img src=\"https://plotters-rs.github.io/plotters-doc-data/errorbar.png\" class=\"galleryItem\" width=200px></img>\n</a>\n\n<a href=\"https://github.com/plotters-rs/plotters/blob/master/plotters/examples/slc-temp.rs\">\n\t<img src=\"https://plotters-rs.github.io/plotters-doc-data/slc-temp.png\" class=\"galleryItem\" width=200px></img>\n</a>\n\n<a href=\"https://github.com/plotters-rs/plotters/blob/master/plotters/examples/area-chart.rs\">\n\t<img src=\"https://plotters-rs.github.io/plotters-doc-data/area-chart.png\" class=\"galleryItem\" width=200px></img>\n</a>\n\n<a href=\"https://github.com/plotters-rs/plotters/blob/master/plotters/examples/snowflake.rs\">\n\t<img src=\"https://plotters-rs.github.io/plotters-doc-data/snowflake.png\" class=\"galleryItem\" width=200px></img>\n</a>\n\n<a href=\"https://github.com/plotters-rs/plotters/blob/master/plotters/examples/animation.rs\">\n\t<img src=\"https://plotters-rs.github.io/plotters-doc-data/animation.gif\" class=\"galleryItem\" width=200px></img>\n</a>\n\n<a href=\"https://github.com/plotters-rs/plotters/blob/master/plotters/examples/console.rs\">\n\t<img src=\"https://plotters-rs.github.io/plotters-doc-data/console-example.png\" class=\"galleryItem\" width=200px></img>\n</a>\n\n<a href=\"https://github.com/plotters-rs/plotters/blob/master/plotters/examples/console.rs\">\n\t<img src=\"https://plotters-rs.github.io/plotters-doc-data/console.png\" class=\"galleryItem\" width=200px></img>\n</a>\n\n<a href=\"https://github.com/plotters-rs/plotters/blob/master/plotters/examples/blit-bitmap.rs\">\n\t<img src=\"https://plotters-rs.github.io/plotters-doc-data/blit-bitmap.png\" class=\"galleryItem\" width=200px></img>\n</a>\n\n<a href=\"https://github.com/plotters-rs/plotters/blob/master/plotters/examples/boxplot.rs\">\n\t<img src=\"https://plotters-rs.github.io/plotters-doc-data/boxplot.svg\" class=\"galleryItem\" width=200px></img>\n</a>\n\n<a href=\"https://github.com/plotters-rs/plotters/blob/master/plotters/examples/3d-plot.rs\">\n\t<img src=\"https://plotters-rs.github.io/plotters-doc-data/3d-plot.svg\" class=\"galleryItem\" width=200px></img>\n</a>\n\n<a href=\"https://github.com/plotters-rs/plotters/blob/master/plotters/examples/3d-plot2.rs\">\n\t<img src=\"https://plotters-rs.github.io/plotters-doc-data/3d-plot2.gif\" class=\"galleryItem\" width=200px></img>\n</a>\n\n<a href=\"https://github.com/plotters-rs/plotters/blob/master/plotters/examples/tick_control.rs\">\n\t<img src=\"https://plotters-rs.github.io/plotters-doc-data/tick_control.svg\" class=\"galleryItem\" width=200px></img>\n</a>\n\n\n## Table of Contents\n  * [Gallery](#gallery)\n  * [Dependencies](#dependencies)\n    + [Ubuntu Linux](#ubuntu-linux)\n  * [Quick Start](#quick-start)\n  * [Demo Projects](#demo-projects)\n  * [Trying with Jupyter evcxr Kernel Interactively](#trying-with-jupyter-evcxr-kernel-interactively)\n  * [Interactive Tutorial with Jupyter Notebook](#interactive-tutorial-with-jupyter-notebook)\n  * [Plotting in Rust](#plotting-in-rust)\n  * [Plotting on HTML5 canvas with WASM Backend](#plotting-on-html5-canvas-with-wasm-backend)\n  * [What types of figure are supported?](#what-types-of-figure-are-supported)\n  * [Concepts by example](#concepts-by-example)\n    + [Drawing Backends](#drawing-backends)\n    + [Drawing Area](#drawing-area)\n    + [Elements](#elements)\n    + [Composable Elements](#composable-elements)\n    + [Chart Context](#chart-context)\n  * [Misc](#misc)\n    + [Development Version](#development-version)\n    + [Reducing Depending Libraries && Turning Off Backends](#reducing-depending-libraries--turning-off-backends)\n    + [List of Features](#list-of-features)\n  * [FAQ List](#faq-list)\n\n## Dependencies\n\n### Ubuntu Linux\n\n ```sudo apt install pkg-config libfreetype6-dev libfontconfig1-dev```\n\n### Fedora Linux\n\n ```sudo dnf install pkgconf freetype-devel fontconfig-devel```\n\n## Quick Start\n\nTo use Plotters, you can simply add Plotters into your `Cargo.toml`\n```toml\n[dependencies]\nplotters = \"0.3.3\"\n```\nCreate the subdirectory `<Cargo project dir>/plotters-doc-data`\n\nAnd the following code draws a quadratic function. `src/main.rs` writes the chart to `plotters-doc-data/0.png`\n\n```rust\nuse plotters::prelude::*;\nfn main() -> Result<(), Box<dyn std::error::Error>> {\n    let root = BitMapBackend::new(\"plotters-doc-data/0.png\", (640, 480)).into_drawing_area();\n    root.fill(&WHITE)?;\n    let mut chart = ChartBuilder::on(&root)\n        .caption(\"y=x^2\", (\"sans-serif\", 50).into_font())\n        .margin(5)\n        .x_label_area_size(30)\n        .y_label_area_size(30)\n        .build_cartesian_2d(-1f32..1f32, -0.1f32..1f32)?;\n\n    chart.configure_mesh().draw()?;\n\n    chart\n        .draw_series(LineSeries::new(\n            (-50..=50).map(|x| x as f32 / 50.0).map(|x| (x, x * x)),\n            &RED,\n        ))?\n        .label(\"y = x^2\")\n        .legend(|(x, y)| PathElement::new(vec![(x, y), (x + 20, y)], &RED));\n\n    chart\n        .configure_series_labels()\n        .background_style(&WHITE.mix(0.8))\n        .border_style(&BLACK)\n        .draw()?;\n\n    root.present()?;\n\n    Ok(())\n}\n```\n\n![](https://plotters-rs.github.io/plotters-doc-data/0.png)\n\n## Demo Projects\n\nTo learn how to use Plotters in different scenarios, check out the following demo projects:\n\n- WebAssembly + Plotters: [plotters-wasm-demo](https://github.com/plotters-rs/plotters-wasm-demo)\n- minifb + Plotters: [plotters-minifb-demo](https://github.com/plotters-rs/plotters-minifb-demo)\n- GTK + Plotters: [plotters-gtk-demo](https://github.com/plotters-rs/plotters-gtk-demo) \n\n\n## Trying with Jupyter evcxr Kernel Interactively\n\nPlotters now supports integration with `evcxr` and is able to interactively draw plots in Jupyter Notebook.\nThe feature `evcxr` should be enabled when including Plotters to Jupyter Notebook.\n\nThe following code shows a minimal example of this.\n\n```text\n:dep plotters = { version = \"^0.3.6\", default-features = false, features = [\"evcxr\", \"all_series\", \"all_elements\"] }\nextern crate plotters;\nuse plotters::prelude::*;\n\nlet figure = evcxr_figure((640, 480), |root| {\n    root.fill(&WHITE)?;\n    let mut chart = ChartBuilder::on(&root)\n        .caption(\"y=x^2\", (\"Arial\", 50).into_font())\n        .margin(5)\n        .x_label_area_size(30)\n        .y_label_area_size(30)\n        .build_cartesian_2d(-1f32..1f32, -0.1f32..1f32)?;\n\n    chart.configure_mesh().draw()?;\n\n    chart.draw_series(LineSeries::new(\n        (-50..=50).map(|x| x as f32 / 50.0).map(|x| (x, x * x)),\n        &RED,\n    )).unwrap()\n        .label(\"y = x^2\")\n        .legend(|(x,y)| PathElement::new(vec![(x,y), (x + 20,y)], &RED));\n\n    chart.configure_series_labels()\n        .background_style(&WHITE.mix(0.8))\n        .border_style(&BLACK)\n        .draw()?;\n    Ok(())\n});\nfigure\n```\n\n<img src=\"https://plotters-rs.github.io/plotters-doc-data/evcxr_animation.gif\" width=\"450px\"></img>\n\n## Interactive Tutorial with Jupyter Notebook\n\n*This tutorial is a work in progress and isn't complete*\n\nThanks to the evcxr, now we have an interactive tutorial for Plotters!\nTo use the interactive notebook, you must have Jupyter and evcxr installed on your computer. \nFollow the instruction on [this page](https://github.com/google/evcxr/tree/master/evcxr_jupyter) below to install it.\n\nAfter that, you should be able to start your Jupyter server locally and load the tutorial!\n\n```bash\ngit clone https://github.com/38/plotters-doc-data\ncd plotters-doc-data\njupyter notebook\n```\n\nAnd select the notebook called `evcxr-jupyter-integration.ipynb`.\n\nAlso, there's a static HTML version of this notebook available at [this location](https://plotters-rs.github.io/plotters-doc-data/evcxr-jupyter-integration.html)\n\n## Plotting in Rust\n\nRust is a perfect language for data visualization. Although there are many mature visualization libraries in many different languages, Rust is one of the best languages that fits the need.\n\n* **Easy to use** Rust has a very good iterator system built into the standard library. With the help of iterators,\nplotting in Rust can be as easy as most of the high-level programming languages. The Rust based plotting library\ncan be very easy to use.\n\n* **Fast** If you need to render a figure with trillions of data points, \nRust is a good choice. Rust's performance allows you to combine the data processing step \nand rendering step into a single application. When plotting in high-level programming languages,\ne.g. Javascript or Python, data points must be down-sampled before feeding into the plotting \nprogram because of the performance considerations. Rust is fast enough to do the data processing and visualization \nwithin a single program. You can also integrate the \nfigure rendering code into your application to handle a huge amount of data and visualize it in real-time.\n\n* **WebAssembly Support** Rust is one of the languages with the best WASM support. Plotting in Rust could be \nvery useful for visualization on a web page and would have a huge performance improvement comparing to Javascript.\n\n## Plotting on HTML5 canvas with WASM Backend\n\nPlotters currently supports a backend that uses the HTML5 canvas. To use WASM, you can simply use \n`CanvasBackend` instead of other backend and all other API remains the same!\n\nThere's a small demo for Plotters + WASM available at [here](https://github.com/plotters-rs/plotters-wasm-demo). \nTo play with the deployed version, follow this [link](https://plotters-rs.github.io/wasm-demo/www/index.html).\n\n## What types of figure are supported?\n\nPlotters is not limited to any specific type of figure.\nYou can create your own types of figures easily with the Plotters API.\n\nPlotters does provide some built-in figure types for convenience.\nCurrently, we support line series, point series, candlestick series, and histogram.\nAnd the library is designed to be able to render multiple figure into a single image.\nBut Plotter is aimed to be a platform that is fully extendable to support any other types of figure.\n\n## Concepts by example\n\n### Drawing Backends\nPlotters can use different drawing backends, including SVG, BitMap, and even real-time rendering. For example, a bitmap drawing backend.\n\n```rust\nuse plotters::prelude::*;\nfn main() -> Result<(), Box<dyn std::error::Error>> {\n    // Create a 800*600 bitmap and start drawing\n    let mut backend = BitMapBackend::new(\"plotters-doc-data/1.png\", (300, 200));\n    // And if we want SVG backend\n    // let mut backend = SVGBackend::new(\"output.svg\", (800, 600));\n    backend.draw_rect((50, 50), (200, 150), &RED, true)?;\n    backend.present()?;\n    Ok(())\n}\n```\n\n![](https://plotters-rs.github.io/plotters-doc-data/1.png)\n\n### Drawing Area\nPlotters uses a concept called drawing area for layout purpose.\nPlotters supports integrating multiple figures into a single image.\nThis is done by creating sub-drawing-areas.\n\nBesides that, the drawing area also allows for a customized coordinate system, by doing so, the coordinate mapping is done by the drawing area automatically.\n\n```rust\nuse plotters::prelude::*;\nfn main() -> Result<(), Box<dyn std::error::Error>> {\n    let root_drawing_area =\n        BitMapBackend::new(\"plotters-doc-data/2.png\", (300, 200)).into_drawing_area();\n    // And we can split the drawing area into 3x3 grid\n    let child_drawing_areas = root_drawing_area.split_evenly((3, 3));\n    // Then we fill the drawing area with different color\n    for (area, color) in child_drawing_areas.into_iter().zip(0..) {\n        area.fill(&Palette99::pick(color))?;\n    }\n    root_drawing_area.present()?;\n    Ok(())\n}\n```\n\n![](https://plotters-rs.github.io/plotters-doc-data/2.png)\n\n### Elements\n\nIn Plotters, elements are the building blocks of figures. All elements are able to be drawn on a drawing area.\nThere are different types of built-in elements, like lines, texts, circles, etc.\nYou can also define your own element in the application code.\n\nYou may also combine existing elements to build a complex element.\n\nTo learn more about the element system, please read the [element module documentation](./element/index.html).\n\n```rust\nuse plotters::prelude::*;\nfn main() -> Result<(), Box<dyn std::error::Error>> {\n    let root = BitMapBackend::new(\"plotters-doc-data/3.png\", (300, 200)).into_drawing_area();\n    root.fill(&WHITE)?;\n    // Draw an circle on the drawing area\n    root.draw(&Circle::new(\n        (100, 100),\n        50,\n        Into::<ShapeStyle>::into(&GREEN).filled(),\n    ))?;\n    root.present()?;\n    Ok(())\n}\n```\n\n![](https://plotters-rs.github.io/plotters-doc-data/3.png)\n\n### Composable Elements\n\nBesides the built-in elements, elements can be composed into a logical group we called composed elements.\nWhen composing new elements, the upper-left corner is given in the target coordinate, and a new pixel-based \ncoordinate which has the upper-left corner defined as `(0,0)` is used for further element composition.\n\nFor example, we can have an element which includes a dot and its coordinate.\n\n```rust\nuse plotters::prelude::*;\nuse plotters::coord::types::RangedCoordf32;\n\nfn main() -> Result<(), Box<dyn std::error::Error>> {\n    let root = BitMapBackend::new(\"plotters-doc-data/4.png\", (640, 480)).into_drawing_area();\n\n    root.fill(&RGBColor(240, 200, 200))?;\n\n    let root = root.apply_coord_spec(Cartesian2d::<RangedCoordf32, RangedCoordf32>::new(\n        0f32..1f32,\n        0f32..1f32,\n        (0..640, 0..480),\n    ));\n\n    let dot_and_label = |x: f32, y: f32| {\n        return EmptyElement::at((x, y))\n            + Circle::new((0, 0), 3, ShapeStyle::from(&BLACK).filled())\n            + Text::new(\n                format!(\"({:.2},{:.2})\", x, y),\n                (10, 0),\n                (\"sans-serif\", 15.0).into_font(),\n            );\n    };\n\n    root.draw(&dot_and_label(0.5, 0.6))?;\n    root.draw(&dot_and_label(0.25, 0.33))?;\n    root.draw(&dot_and_label(0.8, 0.8))?;\n    root.present()?;\n    Ok(())\n}\n```\n\n![](https://plotters-rs.github.io/plotters-doc-data/4.png)\n\n### Chart Context\n\nIn order to draw a chart, Plotters needs a data object built on top of the drawing area called `ChartContext`.\nThe chart context defines even higher level constructs compare to the drawing area.\nFor example, you can define the label areas, meshes, and put a data series onto the drawing area with the help\nof the chart context object.\n\n```rust\nuse plotters::prelude::*;\nfn main() -> Result<(), Box<dyn std::error::Error>> {\n    let root = BitMapBackend::new(\"plotters-doc-data/5.png\", (640, 480)).into_drawing_area();\n    root.fill(&WHITE);\n    let root = root.margin(10, 10, 10, 10);\n    // After this point, we should be able to construct a chart context\n    let mut chart = ChartBuilder::on(&root)\n        // Set the caption of the chart\n        .caption(\"This is our first plot\", (\"sans-serif\", 40).into_font())\n        // Set the size of the label region\n        .x_label_area_size(20)\n        .y_label_area_size(40)\n        // Finally attach a coordinate on the drawing area and make a chart context\n        .build_cartesian_2d(0f32..10f32, 0f32..10f32)?;\n\n    // Then we can draw a mesh\n    chart\n        .configure_mesh()\n        // We can customize the maximum number of labels allowed for each axis\n        .x_labels(5)\n        .y_labels(5)\n        // We can also change the format of the label text\n        .y_label_formatter(&|x| format!(\"{:.3}\", x))\n        .draw()?;\n\n    // And we can draw something in the drawing area\n    chart.draw_series(LineSeries::new(\n        vec![(0.0, 0.0), (5.0, 5.0), (8.0, 7.0)],\n        &RED,\n    ))?;\n    // Similarly, we can draw point series\n    chart.draw_series(PointSeries::of_element(\n        vec![(0.0, 0.0), (5.0, 5.0), (8.0, 7.0)],\n        5,\n        &RED,\n        &|c, s, st| {\n            return EmptyElement::at(c)    // We want to construct a composed element on-the-fly\n            + Circle::new((0,0),s,st.filled()) // At this point, the new pixel coordinate is established\n            + Text::new(format!(\"{:?}\", c), (10, 0), (\"sans-serif\", 10).into_font());\n        },\n    ))?;\n    root.present()?;\n    Ok(())\n}\n```\n\n![](https://plotters-rs.github.io/plotters-doc-data/5.png)\n\n## Misc\n\n### Development Version\n\nFind the latest development version of Plotters on [GitHub](https://github.com/plotters-rs/plotters.git).\nClone the repository and learn more about the Plotters API and ways to contribute. Your help is needed!\n\nIf you want to add the development version of Plotters to your project, add the following to your `Cargo.toml`:\n\n```toml\n[dependencies]\nplotters = { git = \"https://github.com/plotters-rs/plotters.git\" }\n```\n\n### Reducing Depending Libraries && Turning Off Backends\nPlotters now supports use features to control the backend dependencies. By default, `BitMapBackend` and `SVGBackend` are supported,\nuse `default-features = false` in the dependency description in `Cargo.toml` and you can cherry-pick the backend implementations.\n\n- `svg` Enable the `SVGBackend`\n- `bitmap` Enable the `BitMapBackend`\n\nFor example, the following dependency description would avoid compiling with bitmap support:\n\n```toml\n[dependencies]\nplotters = { git = \"https://github.com/plotters-rs/plotters.git\", default-features = false, features = [\"svg\"] }\n```\n\nThe library also allows consumers to make use of the [`Palette`](https://crates.io/crates/palette/) crate's color types by default.\nThis behavior can also be turned off by setting `default-features = false`.\n\n### List of Features\n\nThis is the full list of features that is defined by `Plotters` crate. \nUse `default-features = false` to disable those default enabled features,\nand then you should be able to cherry-pick what features you want to include into `Plotters` crate. \nBy doing so, you can minimize the number of dependencies down to only `itertools` and compile time is less than 6s.\n\nThe following list is a complete list of features that can be opted in or out.\n\n- Tier 1 drawing backends\n\n| Name    |  Description | Additional Dependency |Default?|\n|---------|--------------|--------|------------|\n| bitmap\\_encoder  | Allow `BitMapBackend` to save the result to bitmap files | image, rusttype, font-kit | Yes |\n| svg\\_backend     | Enable `SVGBackend` Support | None | Yes |\n| bitmap\\_gif| Opt-in GIF animation Rendering support for `BitMapBackend`, implies `bitmap` enabled | gif | Yes |\n\n- Font manipulation features\n\n| Name     | Description                              | Additional Dependency | Default? |\n|----------|------------------------------------------|-----------------------|----------|\n| ttf      | Allows TrueType font support             | font-kit              | Yes      |\n| ab_glyph | Skips loading system fonts, unlike `ttf` | ab_glyph              | No       |\n\n`ab_glyph` supports TrueType and OpenType fonts, but does not attempt to\nload fonts provided by the system on which it is running.\nIt is pure Rust, and easier to cross compile.\nTo use this, you *must* call `plotters::style::register_font` before\nusing any `plotters` functions which require the ability to render text.\nThis function only exists when the `ab_glyph` feature is enabled.\n```rust,ignore\n/// Register a font in the fonts table.\n///\n/// The `name` parameter gives the name this font shall be referred to\n/// in the other APIs, like `\"sans-serif\"`.\n///\n/// Unprovided font styles for a given name will fallback to `FontStyle::Normal`\n/// if that is available for that name, when other functions lookup fonts which\n/// are registered with this function.\n///\n/// The `bytes` parameter should be the complete contents\n/// of an OpenType font file, like:\n/// ```ignore\n/// include_bytes!(\"FiraGO-Regular.otf\")\n/// ```\npub fn register_font(\n    name: &str,\n    style: FontStyle,\n    bytes: &'static [u8],\n) -> Result<(), InvalidFont>\n```\n\n- (De)serialization features\n\n| Name          | Description                              | Additional Dependency | Default? |\n|---------------|------------------------------------------|-----------------------|----------|\n| serialization | Enables serde (de)serialization support  | serde                 | No       |\n\n`serialization` enables support for serializing and deserializing using the serde crate.\nEnable the feature via Cargo.toml then use it like the following:\n```rust,ignore\n#[cfg(feature = \"serialization\")]\nuse serde::{Deserialize, Serialize};\n\n#[cfg_attr(feature = \"serialization\", derive(Serialize, Deserialize))]\npub struct RGBAColor(pub u8, pub u8, pub u8, pub f64);\n```\n\n- Coordinate features\n\n| Name    |  Description | Additional Dependency |Default?|\n|---------|--------------|--------|------------|\n| datetime | Enable the date and time coordinate support | chrono | Yes |\n\n- Element, series and util functions\n\n| Name    |  Description | Additional Dependency |Default?|\n|---------|--------------|--------|------------|\n| errorbar | The errorbar element support | None | Yes |\n| candlestick | The candlestick element support | None | Yes |\n| boxplot | The boxplot element support | None | Yes |\n| area\\_series | The area series support | None | Yes |\n| line\\_series | The line series support | None | Yes |\n| histogram | The histogram series support | None | Yes |\n| point\\_series| The point series support | None | Yes |\n\n- Misc\n\n| Name    |  Description | Additional Dependency |Default?|\n|---------|--------------|--------|------------|\n| deprecated\\_items | This feature allows use of deprecated items which is going to be removed in the future | None | Yes |\n| debug | Enable the code used for debugging | None | No |\n\n\n## FAQ List\n\n* Why does the WASM example break on my machine ?\n\n\tThe WASM example requires using `wasm32` target to build. Using `cargo build` is likely to use the default target\n\twhich in most of the case is any of the x86 target. Thus you need add `--target=wasm32-unknown-unknown` in the cargo\n\tparameter list  to build it. \n\n* How to draw text/circle/point/rectangle/... on the top of chart ?\n\t\n\tAs you may have realized, Plotters is a drawing library rather than a traditional data plotting library, \n\tyou have the freedom to draw anything you want on the drawing area.\n\tUse `DrawingArea::draw` to draw any element on the drawing area. \n\n* Where can I find the backend code ?\n\t\n\tSince Plotters 0.3, all drawing backends are independent crate from the main Plotters crate.\n\tUse the following link to find the backend code:\n\n\t- [Bitmap Backend](./plotters-bitmap/) (current repository)\n\t- [SVG Backend](./plotters-svg/) (current repository)\n\t- [HTML5 Canvas Backend](https://github.com/plotters-rs/plotters-canvas.git)\n\t- [GTK/Cairo Backend](https://github.com/plotters-rs/plotters-cairo.git)\n\n* How to check if a backend writes to a file successfully ?\n\n\tThe behavior of Plotters backend is consistent with the standard library. \n    When the backend instance is dropped, [`crate::drawing::DrawingArea::present()`] or `Backend::present()` is called automatically \n    whenever is needed. When the `present()` method is called from `drop`, any error will be silently ignored.\n\n    In the case that error handling is important, you need manually call the `present()` method before the backend gets dropped.\n\tFor more information, please see the examples.\n\n\n"
        },
        {
          "name": "RELEASE-NOTES.md",
          "type": "blob",
          "size": 3.2265625,
          "content": "# Plotters Release Notes \n\nThis documents contains the release notes for every major release since v0.3.\n\n## Plotters v0.3\n\nPlotters v0.3 is shipped with multiple major improvements.\n\n## Plug-and-play backend importing\n\n### Introduction \n\nPreviously, Plotters implements all supported backend in the core crate. As the project is becoming bigger and bigger and\nmore and more backend is supported, those backend implementation cause a huge mantainance burden. \n\nFor example, when `cairo-rs` crate is updated, plotters should release a new version with updated `cairo-rs` dependency for \nour cairo backend. However, most of the users doesn't actually use this backend and pushing new version for updating cairo backend\nseems to be annoying for most of the people. As more and more backend is added, the dependency is out of control.\n\n### Details\n\nTo address this, we are now move all backend implementation code out of the plotters crate. To use a specific backend, you need to\nexplicitly add backend crate to your dependency. For example, to use bitmap backend for v0.2.x, we can do this\n\n```rust\nuse plotters::prelude::*;\nfn main() {\n\tlet backend = BitMapBackend::new(...)\n}\n```\n\nAfter this update, you should do the following code instead:\n\n```rust\nuse plotters::prelude::*;\nuse plotter_bitmap::BitMapBackend; // <= This extra import is used to plug the backend to Plotters\n\nfn main() {\n\tlet backend = BitMapBackend::new(...)\n}\n\n```\n\n### Backward compatibility\n\nPlotters 0.3 has introduced concept of tier 1 backends, which is the most supported. \nAll tier 1 backends could be imported automatically with the core crate (But can be opt-out as well). \nCurrently we have two tier 1 backends: `plotters-bitmap` and `plotters-svg`. \nThese are used by most of the people. \n\nTo ease the upgrade for tier 1 backends, we still keep feature options in the core crate that can opt in those crates. And this is enabled by default.\n\nThus, if plotters is imported with default feature set, there would require no change. If the default feature set is opt out, then the following change\nshould be make with your `Crates.toml`: \n\n```toml\nplotters = {version = \"0.3\", default-features = false, features = [\"bitmap_backend\", \"svg_backend\"]} # Instead of using feature \"bitmap\" and \"svg\"\n```\n\nFor non tier 1 backends, manmually import is required (Please note tier on backends can be imported in same way). For example:\n\n```toml\nplotters = {version = \"0.3\", default-features = false} # Instead of having features = [\"cairo\"] at this point\nplotters-cairo = \"0.3\" # We should import the cairo backend in this way.\n```\n\nAnd in your code, instead of import `plotters::prelude::CairoBackend`, you should import `plotters_cairo::CairoBackend`\n\n## Enhanced Coordinate System Abstraction\n\n### Details\n\nPlotters 0.3 ships with tons of improvement made in the coordinate abstraction and support much more kinds of coordinate. \n\n* `chrono::NaiveDate` and `chrono::NaiveDateTime` are now supported \n* Better abstraction of discrete coordinates \n* Linspace coordinate, which can be used converting a continuous coorindate into a discrete buckets\n* Nested coordinate\n* Slices can now be used as cooradnite specification, which allows people define an axis of category.\n* 3D Coordinate is now supported\n\n## Fix bugs and improve testing\n"
        },
        {
          "name": "doc-template",
          "type": "tree",
          "content": null
        },
        {
          "name": "plotters-backend",
          "type": "tree",
          "content": null
        },
        {
          "name": "plotters-bitmap",
          "type": "tree",
          "content": null
        },
        {
          "name": "plotters-svg",
          "type": "tree",
          "content": null
        },
        {
          "name": "plotters",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}