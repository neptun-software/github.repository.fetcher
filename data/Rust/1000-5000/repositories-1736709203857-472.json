{
  "metadata": {
    "timestamp": 1736709203857,
    "page": 472,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjQ4MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "CleanCut/ultimate_rust_crash_course",
      "stars": 1962,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 0.048828125,
          "content": "root = true\n\nindent_style = space\nindent_size = 4\n"
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.4130859375,
          "content": "# Generated by Cargo\n# will have compiled files and executables\n**/target/\n\n# Remove Cargo.lock from gitignore if creating an executable, leave it for libraries\n# More information here https://doc.rust-lang.org/cargo/guide/cargo-toml-vs-cargo-lock.html\n**/Cargo.lock\n\n# These are backup files generated by rustfmt\n**/*.rs.bk\n\n# Generated by VS Code\n**/.vscode\n\n# Generated by IntelliJ\n**/.idea\n# Files from macOS\n.DS_Store\n"
        },
        {
          "name": ".vscode",
          "type": "tree",
          "content": null
        },
        {
          "name": "HowToLearnRust.md",
          "type": "blob",
          "size": 7.0771484375,
          "content": "# How To Learn Rust\n\nPerhaps more important than a crash course tutorial in Rust is **learning how to learn Rust**.  Learning how to learn\nRust will put you on a path that will lead to mastering the subject.\n\n### IDE / Editor\n\nThough not always as light and nimble as a dedicated editor, an IDE can be really helpful in learning Rust.  IDE support is part of the core Rust project, and it works well.  Much more than just syntax highlighting, an IDE like [VS Code] or [IntelliJ] will integrate with the compiler and offer type hints, display errors, link to documentation, offer code completion, and much more.\n\n- Google the terms: `rust (name of the IDE or Editor you use)`\n  - Need a suggestion? [Visual Studio Code] and [IntelliJ] are both great choices (and there are many more...)\n  - Find the correct way to install Rust support for your IDE or Editor (it's often a plugin)\n  - Install TOML support, which is usually separate from Rust support ([TOML](https://github.com/toml-lang/toml)\n    is the config file format that Rust uses)\n  - ...wait for it...\n  - Be amazed at all the helpful auto-complete, etc. that turns on.  Yay!\n  - Customize your editor to your liking.\n\n[VS Code]: https://code.visualstudio.com/\n[Visual Studio Code]: https://code.visualstudio.com/\n[IntelliJ]: https://www.jetbrains.com/idea/\n\n\n### Find Answers\n\nYou are always going to have questions.  Here is how you find the answers.\n\n- If it is about something the standard library, then Google: `rust std (thing you want to find)`\n  - For example, can't quite remember what that method on `Vec` was? Google `rust std Vec`\n- There is a very welcoming [Rust Community](https://www.rust-lang.org/community) out there that you can\n  communicate with.  See the link above for:\n  - Forums\n  - IRC channels\n  - StackOverflow topics\n  - News (The [weekly newsletter](https://this-week-in-rust.org/) is seriously fantastic), and I'm also quite partial\n    to [Rust GameDev news](https://rust-gamedev.github.io/)\n  - YouTube channel\n  - User Groups and Meetups\n  - Where to find and communicate with all the core Rust Teams\n\n### Play Around\n\nCode something.  Don't just sit and watch the course.  Try stuff out!\n\n- Do the [exercises](https://github.com/CleanCut/ultimate_rust_crash_course#exercises)!\n- Don't be afraid to just `cargo new blah` and write a 5-line throwaway program to try something out.\n- Start an interesting little project\n  - If you get stuck, or the project gets boring...no worries! Just start another interesting little project...\n- Find an existing project that looks interesting\n  - Try it out\n  - Try to contribute a bug fix or feature\n- Rewrite some existing little project in Rust (in a new project)\n  - Compare the results\n  - What did you like better about Rust?\n  - What did you like better about the other language?\n  - Compare binary size, memory usage, speed, etc.\n- Write a blog post about your experience!\n\n\n### Tools\n\nThere are tools that help you learn as well.\n\n- [Clippy](https://github.com/rust-lang/rust-clippy) is a super-amazing linter.  It will tell you how to change\n  working code into _idiomatic_ and _high-performing_ code.\n- [rustfmt](https://github.com/rust-lang/rustfmt) will format your code according to Rust style guidelines.\n  There's only one set of Rust style guidelines...so there's nothing to argue about!  Unfortunately, the project is \n  right in the middle of a major overhaul...so it pretty much only works if you're using the nightly compiler (sigh).\n\n### Reading\n\nLong-format reading is really interesting and informative. You will learn some things plowing through a comprehensive\nbook that you would never have encountered during years of reading random bits of the standard library reference.  I \nfound these books _especially_ useful and high quality:\n\n**Books**\n\n- [Programming Rust, 2nd Edition](https://amzn.to/3i0NySP) - The (second edition of the) O'Reilly book by Jim Blandy, Jason Orendorff, and Leanora Tindall.  Fantastic book\n  focused on using the Rust language. This is the book _I_ used to learn Rust.\n- [The Rust Programming Language](https://doc.rust-lang.org/book/), aka \"The Book\" - the official free online book \n  about the language, though you can [purchase a physical copy](https://amzn.to/2Vq0giK) if you prefer.\n- [Rust for Rustaceans](https://amzn.to/3Iavf8b) - A short, but incredibly action-packed book diving into some advanced topics. I loved this book. Read it after you have a solid grasp of Rust and want to go deeper.\n- [The Rustnomicon](https://doc.rust-lang.org/nomicon/) - The ultimate (unfinished, evolving) book about the deepest mysteries of Rust. Strap in!\n\n**Informational**\n\n- [Entering the Quantum Era—How Firefox got fast again and where it’s going to get faster](https://hacks.mozilla.org/2017/11/entering-the-quantum-era-how-firefox-got-fast-again-and-where-its-going-to-get-faster/)\n\n**Things we mentioned but didn't cover in depth**\n- [TOML Format](https://github.com/toml-lang/toml) - the config file format Rust uses\n- [Semantic Versioning](https://semver.org/) and [Cargo's Version Field Rules](https://doc.rust-lang.org/cargo/reference/manifest.html#the-version-field)\n- [The Edition Guide](https://doc.rust-lang.org/nightly/edition-guide/introduction.html) - Differences between Rust 2015 and Rust 2018\n- [String Formatting](https://doc.rust-lang.org/std/fmt/index.html) - `print!()`, `println!()`, `format!()`, etc. and\n  how to deal with the format string.\n- [Firefox has over 3 million lines of Rust Code](https://www.openhub.net/p/firefox/analyses/latest/languages_summary)\n  \n**More information about things we learned**\n- [Cargo](https://doc.rust-lang.org/book/ch01-03-hello-cargo.html) and\n  [dependencies](https://doc.rust-lang.org/book/ch02-00-guessing-game-tutorial.html#using-a-crate-to-get-more-functionality)\n- [Variables, Mutability, and Shadowing](https://doc.rust-lang.org/book/ch03-01-variables-and-mutability.html)\n- [Functions](https://doc.rust-lang.org/book/ch03-03-how-functions-work.html) - fn\n- [Modules](https://doc.rust-lang.org/book/ch07-02-defining-modules-to-control-scope-and-privacy.html)\n  and [pub](https://doc.rust-lang.org/book/ch07-03-paths-for-referring-to-an-item-in-the-module-tree.html#exposing-paths-with-the-pub-keyword)\n  and [use](https://doc.rust-lang.org/book/ch07-04-bringing-paths-into-scope-with-the-use-keyword.html)\n- [Scalar Types](https://doc.rust-lang.org/book/ch03-02-data-types.html#scalar-types) - \n  Integers, Floating-point, Boolean, Characters.\n- [Compound Types](https://doc.rust-lang.org/book/ch03-02-data-types.html#compound-types) - \n  Tuples, Arrays.\n- [Control Flow](https://doc.rust-lang.org/book/ch03-05-control-flow.html) - if, while, for\n- [Threads](https://doc.rust-lang.org/book/ch16-01-threads.html)\n  and [closures](https://doc.rust-lang.org/book/ch13-01-closures.html)\n- [Ownership and Scope](https://doc.rust-lang.org/book/ch04-01-what-is-ownership.html)\n- [References & Borrowing](https://doc.rust-lang.org/book/ch04-02-references-and-borrowing.html)\n- Common Collections: [Vectors](https://doc.rust-lang.org/book/ch08-01-vectors.html),\n  [Strings](https://doc.rust-lang.org/book/ch08-02-strings.html),\n  and [Hash Maps](https://doc.rust-lang.org/book/ch08-03-hash-maps.html)\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.044921875,
          "content": "MIT License\n\nCopyright (c) 2018 Nathan Stocks\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 5.638671875,
          "content": "# Ultimate Rust Crash Course\n\nThis is the companion repository for the [Ultimate Rust Crash Course] published online, presented\nlive at O'Reilly virtual events, or in person.  You will get the most out of this training \nexperience by trying to accomplish the [exercises] in this repository and watching (or attending)\nthe instructor-led training.\n\nIn other words, this repository is for you hands-on-learners!\n\nI use macOS, and that is what I developed this course on.  Everything _ought_ to work similarly on\nmajor Linux distributions and Windows. Please [contact me](mailto:nathan@agileperception.com) ASAP\nif you have trouble with anything on this page.\n\n_Did you like this course? Check out the next one: [Ultimate Rust 2: Intermediate Concepts]_\n\n## Install Rust\n\nRust is required for this course!  The latest stable version is always recommended.\n\n- Go to [rust-lang.org](https://rust-lang.org) and click on the `Get Started`\n   button and follow the instructions to install Rust for your operating system.\n   - Please DO NOT install rust via some other package manager.  It will probably be a version that is _really old_.\n\nYou should get somewhat similar output if you run commands like the ones below (newer versions are okay).  If you \nalready have an old version of Rust installed, then run `rustup update` to install a newer version.\n\n```shell\n$ rustc --version\nrustc 1.54.0 (a178d0322 2021-07-26)\n$ cargo --version\ncargo 1.54.0 (5ae8d74b3 2021-06-22)\n```\n\n- Clone or download this repository to your computer.\n\n## Prepare Your Development Environment\n\nPlease do the following (see the [How To Learn Rust](https://github.com/CleanCut/ultimate_rust_crash_course/blob/master/HowToLearnRust.md)\npage for details on all of these)\n- [ ] Choose an IDE (or Editor) and configure it with Rust support and customize it to your liking\n  - **VS Code users**: Please use the [`rust-analyzer`] extension. **_If you have the `rust` extension installed, please uninstall it!_**\n  - **IntelliJ users**: Please use the [`intellij-rust`] extension.\n- [ ] Choose one place to \"find answers\" and either introduce yourself (if it's a forum, IRC, etc.) or find the answer\n      to one question you have.\n- [ ] Try doing something in Rust!  If you don't have a better idea, then just do this:\n  - `cargo new message`\n  - `cd message`\n  - `cargo run`\n  - Edit `src/main.rs` and change the message.\n  - `cargo run` again to see your new message.\n- [ ] Check out the descriptions of the tools and books.\n\n# Training!\n\nNow you are ready for the training!  Go watch the [Ultimate Rust Crash Course] (or attend the live\nsession) and come back here for the [exercises].\n\n# Resources\n\n- Training by the instructor (Nathan Stocks) in the form of the [Ultimate Rust Crash Course] or a\n  live session.\n- This Repository :tada:\n- [How To Learn Rust](https://github.com/CleanCut/ultimate_rust_crash_course/blob/master/HowToLearnRust.md)\n- [The Rust Standard Library](https://doc.rust-lang.org/std/)\n\n# Exercises\n\nPlease clone this repository! These exercises are designed as Rust projects for you to edit on your\nown computer, with the exception of Exercise A (which is just a `README.md` file).\n\nThe exercises are separate Rust projects inside the `exercises/` subdirectory.  For each exercise,\nyou should:\n- Open the corresponding`exercise/EXERCISE_NAME` directory in your IDE/Editor\n  - Seriously, just open the _individual exercise directory_ in your IDE. If you open the entire repository, your IDE will probably complain that it sees multiple Rust projects.\n- Navigate to the same directory with your Terminal application (so you can run `cargo run`, etc.)\n- Open up the `src/main.rs` file.\n- Follow the numbered exercise instructions in the code comments.\n\nIf you encounter any problems with the exercises, please feel free to use the online course\ncommunication tools to contact me, or [open an discussion]. Either way. 😄\n\nFor your convenience, here is a list of all the exercises, with links to view the code on GitHub.\n\n- [Exercise A - Variables & Scope](https://github.com/CleanCut/ultimate_rust_crash_course/tree/master/exercise/a_variables)\n- [Exercise B - Functions](https://github.com/CleanCut/ultimate_rust_crash_course/tree/master/exercise/b_functions)\n- [Exercise C - Simple Types](https://github.com/CleanCut/ultimate_rust_crash_course/tree/master/exercise/c_simple_types)\n- [Exercise D - Control Flow & Strings](https://github.com/CleanCut/ultimate_rust_crash_course/tree/master/exercise/d_control_flow_strings)\n- [Exercise E - Ownership & References](https://github.com/CleanCut/ultimate_rust_crash_course/tree/master/exercise/e_ownership_references)\n- [Exercise F - Structs & Traits](https://github.com/CleanCut/ultimate_rust_crash_course/tree/master/exercise/f_structs_traits)\n- [Exercise G - Collections & Enums](https://github.com/CleanCut/ultimate_rust_crash_course/tree/master/exercise/g_collections_enums)\n- [Exercise H - Closures & Threads](https://github.com/CleanCut/ultimate_rust_crash_course/tree/master/exercise/h_closures_threads)\n- [Exercise Z - Final Project](https://github.com/CleanCut/ultimate_rust_crash_course/tree/master/exercise/z_final_project)\n\n# Projects\n\n- [Invaders](https://github.com/CleanCut/invaders) - A terminal-based Space Invaders arcade game clone.\n\n\n[exercises]: https://github.com/CleanCut/ultimate_rust_crash_course#exercises\n[open an discussion]: https://github.com/CleanCut/ultimate_rust_crash_course/discussions/new\n[Ultimate Rust Crash Course]: https://agileperception.com/ultimate_rust_crash_course\n[Ultimate Rust 2: Intermediate Concepts]: https://github.com/CleanCut/ultimate_rust2\n[`rust-analyzer`]: https://marketplace.visualstudio.com/items?itemName=matklad.rust-analyzer\n[`intellij-rust`]: https://intellij-rust.github.io/\n"
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "exercise",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}