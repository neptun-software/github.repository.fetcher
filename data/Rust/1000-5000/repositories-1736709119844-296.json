{
  "metadata": {
    "timestamp": 1736709119844,
    "page": 296,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjMwMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "hora-search/hora",
      "stars": 2609,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.4912109375,
          "content": "# Generated by Cargo\n# will have compiled files and executables\n/target/\n\n# Remove Cargo.lock from gitignore if creating an executable, leave it for libraries\n# More information here https://doc.rust-lang.org/cargo/guide/cargo-toml-vs-cargo-lock.html\nCargo.lock\n\n# These are backup files generated by rustfmt\n**/*.rs.bk\n\n\n# Added by cargo\n#\n# already existing elements were commented out\n\n/target\n#Cargo.lock\nexamples/Cargo.lock\nexamples/target\nexamples/target/\n*.so\n.DS_STORE\nbuild/\nexamples/src/*.hdf5"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 0.1103515625,
          "content": "# ChangeLog\n\n## v0.1.1\n\n* add `no_thread` feature to disable multithread;\n* support `WebAssmebly` + `Javascrpt`\n\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 0.50390625,
          "content": "# Contribute\n\nWe are glad to have you participate. Any contributions are welcome, including documentations and tests.\nYou can create a `Pull Request` or `Issue` on GitHub, and we will review it as soon as possible.\n\nWe use GitHub issues for tracking suggestions and bugs.\n\nTo install for development:\n\n#### Clone the repo\n\n```bash\ngit clone https://github.com/hora-search/hora\n```\n\n#### Build\n\n```bash\ncargo build\n```\n\n#### Test\n\n```bash\ncargo test --lib\n```\n\n#### Try the changes\n\n```bash\ncd examples\ncargo run\n```\n"
        },
        {
          "name": "Cargo.toml",
          "type": "blob",
          "size": 1.22265625,
          "content": "[package]\nauthors = [\"aljun <gagasalamer@outlook.com>\", \"moonlight\"]\nedition = \"2018\"\nlicense = \"Apache-2.0\"\nname = \"hora\"\nversion = \"0.1.1\"\n\ndescription = \"Hora Search Everywhere\"\nhomepage = \"https://horasearch.com\"\nreadme = \"README.md\"\nrepository = \"https://github.com/hora-search/hora\"\n\ncategories = [\"algorithms\", \"data-structures\"]\nkeywords = [\"intelligence\", \"neighbor\", \"SIMD\", \"search\", \"distance\"]\n\n[package.metadata.docs.rs]\nall-features = true\n\n[profile.dev]\ncodegen-units = 4\ndebug = 1\ndebug-assertions = true\nincremental = true\nlto = false\nopt-level = 0\noverflow-checks = false\npanic = 'unwind'\nrpath = false\n\n[profile.release]\ncodegen-units = 1\ndebug = false\ndebug-assertions = false\nincremental = false\nlto = \"fat\"\nopt-level = 3\noverflow-checks = false\npanic = 'unwind'\nrpath = false\n\n[features]\nno_std = [\"hashbrown\"]\nno_thread = []\nsimd = [\"packed_simd\"]\n\n[dependencies]\nbincode = \"^1.3\"\nfixedbitset = \"0.4.0\"\nhashbrown = {version = \"0.11.2\", optional = true}\nlog = \"^0.4\"\nnum = \"0.4.0\"\npacked_simd = {version = \"0.3.6\", package = \"packed_simd_2\", optional = true}\nrand = \"0.8.4\"\nrayon = \"^1.5\"\nserde = {version = \"^1.0\", features = [\"derive\"]}\n\n[dev-dependencies]\ncriterion = \"0.3.4\"\n\n[[bench]]\nharness = false\nname = \"bench_metrics\"\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 11.0908203125,
          "content": "                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"[]\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright [yyyy] [name of copyright owner]\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 10.3212890625,
          "content": "<div align=\"center\">\n  <img src=\"asset/logo.svg\" width=\"70%\"/>\n</div>\n\n<div align=\"center\">\n  <h3>  English | <a href=\"https://github.com/hora-search/hora/blob/main/README_FR.md\"> Français </a> | <a href=\"https://github.com/hora-search/hora/blob/main/README_JP.md\"> 日本語 </a> | <a href=\"https://github.com/hora-search/hora/blob/main/README_KR.md\">한국어</a> | <a href=\"https://github.com/hora-search/hora/blob/main/README_RU.md\">Русский</a> | <a href=\"https://github.com/hora-search/hora/blob/main/README_CN.md\">中文</a> </h3>\n</div>\n\n# Hora\n\n**[[Homepage](http://horasearch.com/)]** **[[Document](https://horasearch.com/doc)]** **[[Examples](https://horasearch.com/doc/example.html)]**\n\n**_Hora Search Everywhere!_**\n\nHora is an **approximate nearest neighbor search algorithm** ([wiki](https://en.wikipedia.org/wiki/Nearest_neighbor_search)) library. We implement all code in `Rust🦀` for reliability, high level abstraction and high speeds comparable to `C++`.\n\nHora, **`「ほら」`** in Japanese, sounds like `[hōlə]`, and means `Wow`, `You see!` or `Look at that!`. The name is inspired by a famous Japanese song **`「小さな恋のうた」`**.\n\n# Demos\n\n**👩 Face-Match [[online demo](https://horasearch.com/#Demos)], have a try!**\n\n<div align=\"center\">\n  <img src=\"asset/demo3.gif\" width=\"100%\"/>\n</div>\n\n**🍷 Dream wine comments search [[online demo](https://horasearch.com/#Demos)], have a try!**\n\n<div align=\"center\">\n  <img src=\"asset/demo2.gif\" width=\"100%\"/>\n</div>\n\n# Features\n\n- **Performant** ⚡️\n\n  - **SIMD-Accelerated ([packed_simd](https://github.com/rust-lang/packed_simd))**\n  - **Stable algorithm implementation**\n  - **Multiple threads design**\n\n- **Supports Multiple Languages** ☄️\n\n  - `Python`\n  - `Javascript`\n  - `Java`\n  - `Go` (WIP)\n  - `Ruby` (WIP)\n  - `Swift` (WIP)\n  - `R` (WIP)\n  - `Julia` (WIP)\n  - **Can also be used as a service**\n\n- **Supports Multiple Indexes** 🚀\n\n  - `Hierarchical Navigable Small World Graph Index (HNSWIndex)` ([details](https://arxiv.org/abs/1603.09320))\n  - `Satellite System Graph (SSGIndex)` ([details](https://arxiv.org/abs/1907.06146))\n  - `Product Quantization Inverted File(PQIVFIndex)` ([details](https://lear.inrialpes.fr/pubs/2011/JDS11/jegou_searching_with_quantization.pdf))\n  - `Random Projection Tree(RPTIndex)` (LSH, WIP)\n  - `BruteForce (BruteForceIndex)` (naive implementation with SIMD)\n\n- **Portable** 💼\n\n  - Supports `WebAssembly`\n  - Supports `Windows`, `Linux` and `OS X`\n  - Supports `IOS` and `Android` (WIP)\n  - Supports `no_std` (WIP, partial)\n  - **No** heavy dependencies, such as `BLAS`\n\n- **Reliability** 🔒\n\n  - `Rust` compiler secures all code\n  - Memory managed by `Rust` for all language libraries such as `Python's`\n  - Broad testing coverage\n\n- **Supports Multiple Distances** 🧮\n\n  - `Dot Product Distance`\n    - ![equation](https://latex.codecogs.com/gif.latex?D%28x%2Cy%29%20%3D%20%5Csum%7B%28x*y%29%7D)\n  - `Euclidean Distance`\n    - ![equation](https://latex.codecogs.com/gif.latex?D%28x%2Cy%29%20%3D%20%5Csqrt%7B%5Csum%7B%28x-y%29%5E2%7D%7D)\n  - `Manhattan Distance`\n    - ![equation](https://latex.codecogs.com/gif.latex?D%28x%2Cy%29%20%3D%20%5Csum%7B%7C%28x-y%29%7C%7D)\n  - `Cosine Similarity`\n    - ![equation](https://latex.codecogs.com/gif.latex?D%28x%2Cy%29%20%3D%20%5Cfrac%7Bx%20*y%7D%7B%7C%7Cx%7C%7C*%7C%7Cy%7C%7C%7D)\n\n- **Productive** ⭐\n  - Well documented\n  - Elegant, simple and easy to learn API\n\n# Installation\n\n**`Rust`**\n\nin `Cargo.toml`\n\n```toml\n[dependencies]\nhora = \"0.1.1\"\n```\n\n**`Python`**\n\n```Bash\n$ pip install horapy\n```\n\n**`Javascript (WebAssembly)`**\n\n```Bash\n$ npm i horajs\n```\n\n**`Building from source`**\n\n```bash\n$ git clone https://github.com/hora-search/hora\n$ cargo build\n```\n\n# Benchmarks\n\n<img src=\"asset/fashion-mnist-784-euclidean_10_euclidean.png\"/>\n\nby `aws t2.medium (CPU: Intel(R) Xeon(R) CPU E5-2686 v4 @ 2.30GHz)` [more information](https://github.com/hora-search/ann-benchmarks)\n\n# Examples\n\n**`Rust` example** [[more info](https://github.com/hora-search/hora/tree/main/examples)]\n\n```Rust\nuse hora::core::ann_index::ANNIndex;\nuse rand::{thread_rng, Rng};\nuse rand_distr::{Distribution, Normal};\n\npub fn demo() {\n    let n = 1000;\n    let dimension = 64;\n\n    // make sample points\n    let mut samples = Vec::with_capacity(n);\n    let normal = Normal::new(0.0, 10.0).unwrap();\n    for _i in 0..n {\n        let mut sample = Vec::with_capacity(dimension);\n        for _j in 0..dimension {\n            sample.push(normal.sample(&mut rand::thread_rng()));\n        }\n        samples.push(sample);\n    }\n\n    // init index\n    let mut index = hora::index::hnsw_idx::HNSWIndex::<f32, usize>::new(\n        dimension,\n        &hora::index::hnsw_params::HNSWParams::<f32>::default(),\n    );\n    for (i, sample) in samples.iter().enumerate().take(n) {\n        // add point\n        index.add(sample, i).unwrap();\n    }\n    index.build(hora::core::metrics::Metric::Euclidean).unwrap();\n\n    let mut rng = thread_rng();\n    let target: usize = rng.gen_range(0..n);\n    // 523 has neighbors: [523, 762, 364, 268, 561, 231, 380, 817, 331, 246]\n    println!(\n        \"{:?} has neighbors: {:?}\",\n        target,\n        index.search(&samples[target], 10) // search for k nearest neighbors\n    );\n}\n```\n\nthank @vaaaaanquish for this complete pure `Rust 🦀` image search [example](https://github.com/vaaaaanquish/rust-ann-search-example), For more information about this example, you can click [Pure Rust な近似最近傍探索ライブラリ hora を用いた画像検索を実装する](https://vaaaaaanquish.hatenablog.com/entry/2021/08/10/065117)\n\n**`Python` example** [[more info](https://github.com/hora-search/horapy)]\n\n```Python\nimport numpy as np\nfrom horapy import HNSWIndex\n\ndimension = 50\nn = 1000\n\n# init index instance\nindex = HNSWIndex(dimension, \"usize\")\n\nsamples = np.float32(np.random.rand(n, dimension))\nfor i in range(0, len(samples)):\n    # add node\n    index.add(np.float32(samples[i]), i)\n\nindex.build(\"euclidean\")  # build index\n\ntarget = np.random.randint(0, n)\n# 410 in Hora ANNIndex <HNSWIndexUsize> (dimension: 50, dtype: usize, max_item: 1000000, n_neigh: 32, n_neigh0: 64, ef_build: 20, ef_search: 500, has_deletion: False)\n# has neighbors: [410, 736, 65, 36, 631, 83, 111, 254, 990, 161]\nprint(\"{} in {} \\nhas neighbors: {}\".format(\n    target, index, index.search(samples[target], 10)))  # search\n\n```\n\n**`JavaScript` example** [[more info](https://github.com/hora-search/hora-wasm)]\n\n```JavaScript\nimport * as horajs from \"horajs\";\n\nconst demo = () => {\n    const dimension = 50;\n    var bf_idx = horajs.BruteForceIndexUsize.new(dimension);\n    // var hnsw_idx = horajs.HNSWIndexUsize.new(dimension, 1000000, 32, 64, 20, 500, 16, false);\n    for (var i = 0; i < 1000; i++) {\n        var feature = [];\n        for (var j = 0; j < dimension; j++) {\n            feature.push(Math.random());\n        }\n        bf_idx.add(feature, i); // add point\n    }\n    bf_idx.build(\"euclidean\"); // build index\n    var feature = [];\n    for (var j = 0; j < dimension; j++) {\n        feature.push(Math.random());\n    }\n    console.log(\"bf result\", bf_idx.search(feature, 10)); //bf result Uint32Array(10) [704, 113, 358, 835, 408, 379, 117, 414, 808, 826]\n}\n\n(async () => {\n    await horajs.default();\n    await horajs.init_env();\n    demo();\n})();\n```\n\n**`Java` example** [[more info](https://github.com/hora-search/hora-java)]\n\n```Java\npublic void demo() {\n    final int dimension = 2;\n    final float variance = 2.0f;\n    Random fRandom = new Random();\n\n    BruteForceIndex bruteforce_idx = new BruteForceIndex(dimension); // init index instance\n\n    List<float[]> tmp = new ArrayList<>();\n    for (int i = 0; i < 5; i++) {\n        for (int p = 0; p < 10; p++) {\n            float[] features = new float[dimension];\n            for (int j = 0; j < dimension; j++) {\n                features[j] = getGaussian(fRandom, (float) (i * 10), variance);\n            }\n            bruteforce_idx.add(\"bf\", features, i * 10 + p); // add point\n            tmp.add(features);\n          }\n    }\n    bruteforce_idx.build(\"bf\", \"euclidean\"); // build index\n\n    int search_index = fRandom.nextInt(tmp.size());\n    // nearest neighbor search\n    int[] result = bruteforce_idx.search(\"bf\", 10, tmp.get(search_index));\n    // [main] INFO com.hora.app.ANNIndexTest  - demo bruteforce_idx[7, 8, 0, 5, 3, 9, 1, 6, 4, 2]\n    log.info(\"demo bruteforce_idx\" + Arrays.toString(result));\n}\n\nprivate static float getGaussian(Random fRandom, float aMean, float variance) {\n    float r = (float) fRandom.nextGaussian();\n    return aMean + r * variance;\n}\n```\n\n# Roadmap\n\n- [ ] Full test coverage\n- [ ] Implement [EFANNA](http://arxiv.org/abs/1609.07228) algorithm to achieve faster KNN graph building\n- [ ] Swift support and iOS/macOS deployment example\n- [ ] Support `R`\n- [ ] support `mmap`\n\n# Related Projects and Comparison\n\n- [Faiss](https://github.com/facebookresearch/faiss), [Annoy](https://github.com/spotify/annoy), [ScaNN](https://github.com/google-research/google-research/tree/master/scann):\n\n  - **`Hora`'s implementation is strongly inspired by these libraries.**\n  - `Faiss` focuses more on the GPU scenerio, and `Hora` is lighter than Faiss (**no heavy dependencies)**.\n  - `Hora` expects to support more languages, and everything related to performance will be implemented by Rust🦀.\n  - `Annoy` only supports the `LSH (Random Projection)` algorithm.\n  - `ScaNN` and `Faiss` are less user-friendly, (e.g. lack of documentation).\n  - Hora is **ALL IN RUST** 🦀.\n\n- [Milvus](https://github.com/milvus-io/milvus), [Vald](https://github.com/vdaas/vald), [Jina AI](https://github.com/jina-ai/jina)\n  - `Milvus` and `Vald` also support multiple languages, but serve as a service instead of a library\n  - `Milvus` is built upon some libraries such as `Faiss`, while `Hora` is a library with all the algorithms implemented itself\n\n# Contribute\n\n**We appreciate your participation!**\n\nWe are glad to have you participate, any contributions are welcome, including documentations and tests.\nYou can create a `Pull Request` or `Issue` on GitHub, and we will review it as soon as possible.\n\nWe use GitHub issues for tracking suggestions and bugs.\n\n#### Clone the repo\n\n```bash\ngit clone https://github.com/hora-search/hora\n```\n\n#### Build\n\n```bash\ncargo build\n```\n\n#### Test\n\n```bash\ncargo test --lib\n```\n\n#### Try the changes\n\n```bash\ncd examples\ncargo run\n```\n\n# License\n\nThe entire repository is licensed under the [Apache License](https://github.com/hora-search/hora/blob/main/LICENSE).\n"
        },
        {
          "name": "README_CN.md",
          "type": "blob",
          "size": 9.7216796875,
          "content": "<div align=\"center\">\n  <img src=\"asset/logo.svg\" width=\"70%\"/>\n</div>\n\n# Hora\n\n**[[Homepage](http://horasearch.com/)]** **[[Document](https://horasearch.com/doc)]** **[[Examples](https://horasearch.com/doc/example.html)]**\n\n**_Hora Search Everywhere!_**\n\n**Hora** 完全基于 **Rust🦀** 实现，事实证明，**Rust** 确实非常非常快，完全可以媲美 **C++** ，且`Hora`使用 **SIMD**进行了加速，速度非常快⚡️⚡️⚡️，具体速度可以参考下面的 benchmark.\n\n**Hora**, 日语为 **「ほら」**，读法像 **[hōlə]** ，意思是 **Wow**, **You see!** , **Look at that!** 。 这个名字的灵感来自日本著名歌曲 **[「小さな恋のうた」]( https://www.youtube.com/watch?v=u8EkSB9zSpE)** 。\n\n# Demos\n\n**👩 Face-Match [[online demo](https://horasearch.com/#Demos)], have a try!**\n\n<div align=\"center\">\n  <img src=\"asset/demo3.gif\" width=\"100%\"/>\n</div>\n\n**🍷 Dream wine comments search [[online demo](https://horasearch.com/#Demos)], have a try!**\n\n<div align=\"center\">\n  <img src=\"asset/demo2.gif\" width=\"100%\"/>\n</div>\n\n# Features\n\n- **Performant** ⚡️\n\n  - **SIMD-Accelerated ([packed_simd](https://github.com/rust-lang/packed_simd))**\n  - **Stable algorithm implementation**\n  - **Multiple threads design**\n\n- **Supports Multiple Languages** ☄️\n\n  - `Python`\n  - `Javascript`\n  - `Java`\n  - `Go` (WIP)\n  - `Ruby` (WIP)\n  - `Swift` (WIP)\n  - `R` (WIP)\n  - `Julia` (WIP)\n  - **Can also be used as a service**\n\n- **Supports Multiple Indexes** 🚀\n\n  - `Hierarchical Navigable Small World Graph Index (HNSWIndex)` ([details](https://arxiv.org/abs/1603.09320))\n  - `Satellite System Graph (SSGIndex)` ([details](https://arxiv.org/abs/1907.06146))\n  - `Product Quantization Inverted File(PQIVFIndex)` ([details](https://lear.inrialpes.fr/pubs/2011/JDS11/jegou_searching_with_quantization.pdf))\n  - `Random Projection Tree(RPTIndex)` (LSH, WIP)\n  - `BruteForce (BruteForceIndex)` (naive implementation with SIMD)\n\n- **Portable** 💼\n  - Supports `WebAssembly`\n  - Supports `Windows`, `Linux` and `OS X`\n  - Supports `IOS` and `Android` (WIP)\n  - Supports `no_std` (WIP, partial)\n  - **No** heavy dependencies, such as `BLAS`\n\n- **Reliability** 🔒\n\n  - `Rust` compiler secures all code\n  - Memory managed by `Rust` for all language libraries such as `Python's`\n  - Broad testing coverage\n\n- **Supports Multiple Distances** 🧮\n\n  - `Dot Product Distance`\n    - ![equation](https://latex.codecogs.com/gif.latex?D%28x%2Cy%29%20%3D%20%5Csum%7B%28x*y%29%7D)\n  - `Euclidean Distance`\n    - ![equation](https://latex.codecogs.com/gif.latex?D%28x%2Cy%29%20%3D%20%5Csqrt%7B%5Csum%7B%28x-y%29%5E2%7D%7D)\n  - `Manhattan Distance`\n    - ![equation](https://latex.codecogs.com/gif.latex?D%28x%2Cy%29%20%3D%20%5Csum%7B%7C%28x-y%29%7C%7D)\n  - `Cosine Similarity`\n    - ![equation](https://latex.codecogs.com/gif.latex?D%28x%2Cy%29%20%3D%20%5Cfrac%7Bx%20*y%7D%7B%7C%7Cx%7C%7C*%7C%7Cy%7C%7C%7D)\n\n- **Productive** ⭐\n  - Well documented\n  - Elegant, simple and easy to learn API\n\n# Installation\n\n**`Rust`**\n\nin `Cargo.toml`\n\n```toml\n[dependencies]\nhora = \"0.1.1\"\n```\n\n**`Python`**\n\n```Bash\n$ pip install horapy\n```\n\n**`Javascript (WebAssembly)`**\n\n```Bash\n$ npm i horajs\n```\n\n**`Building from source`**\n\n```bash\n$ git clone https://github.com/hora-search/hora\n$ cargo build\n```\n\n# Benchmarks\n\n<img src=\"asset/fashion-mnist-784-euclidean_10_euclidean.png\"/>\n\nby `aws t2.medium (CPU: Intel(R) Xeon(R) CPU E5-2686 v4 @ 2.30GHz)` [more information](https://github.com/hora-search/ann-benchmarks)\n\n# Examples\n\n**`Rust` example** [[more info](https://github.com/hora-search/hora/tree/main/examples)]\n\n```Rust\nuse hora::core::ann_index::ANNIndex;\nuse rand::{thread_rng, Rng};\nuse rand_distr::{Distribution, Normal};\n\npub fn demo() {\n    let n = 1000;\n    let dimension = 64;\n\n    // make sample points\n    let mut samples = Vec::with_capacity(n);\n    let normal = Normal::new(0.0, 10.0).unwrap();\n    for _i in 0..n {\n        let mut sample = Vec::with_capacity(dimension);\n        for _j in 0..dimension {\n            sample.push(normal.sample(&mut rand::thread_rng()));\n        }\n        samples.push(sample);\n    }\n\n    // init index\n    let mut index = hora::index::hnsw_idx::HNSWIndex::<f32, usize>::new(\n        dimension,\n        &hora::index::hnsw_params::HNSWParams::<f32>::default(),\n    );\n    for (i, sample) in samples.iter().enumerate().take(n) {\n        // add point\n        index.add(sample, i).unwrap();\n    }\n    index.build(hora::core::metrics::Metric::Euclidean).unwrap();\n\n    let mut rng = thread_rng();\n    let target: usize = rng.gen_range(0..n);\n    // 523 has neighbors: [523, 762, 364, 268, 561, 231, 380, 817, 331, 246]\n    println!(\n        \"{:?} has neighbors: {:?}\",\n        target,\n        index.search(&samples[target], 10) // search for k nearest neighbors\n    );\n}\n```\n\n感谢 @vaaaaanquish 这个完整的纯 `Rust 🦀` 图片检索 [example](https://github.com/vaaaaanquish/rust-ann-search-example), 想了解更多可以点击 [Pure Rustな近似最近傍探索ライブラリhoraを用いた画像検索を実装する](https://vaaaaaanquish.hatenablog.com/entry/2021/08/10/065117)\n\n**`Python` example** [[more info](https://github.com/hora-search/horapy)]\n\n```Python\nimport numpy as np\nfrom horapy import HNSWIndex\n\ndimension = 50\nn = 1000\n\n# init index instance\nindex = HNSWIndex(dimension, \"usize\")\n\nsamples = np.float32(np.random.rand(n, dimension))\nfor i in range(0, len(samples)):\n    # add node\n    index.add(np.float32(samples[i]), i)\n\nindex.build(\"euclidean\")  # build index\n\ntarget = np.random.randint(0, n)\n# 410 in Hora ANNIndex <HNSWIndexUsize> (dimension: 50, dtype: usize, max_item: 1000000, n_neigh: 32, n_neigh0: 64, ef_build: 20, ef_search: 500, has_deletion: False)\n# has neighbors: [410, 736, 65, 36, 631, 83, 111, 254, 990, 161]\nprint(\"{} in {} \\nhas neighbors: {}\".format(\n    target, index, index.search(samples[target], 10)))  # search\n\n```\n\n**`JavaScript` example** [[more info](https://github.com/hora-search/hora-wasm)]\n\n```JavaScript\nimport * as horajs from \"horajs\";\n\nconst demo = () => {\n    const dimension = 50;\n    var bf_idx = horajs.BruteForceIndexUsize.new(dimension);\n    // var hnsw_idx = horajs.HNSWIndexUsize.new(dimension, 1000000, 32, 64, 20, 500, 16, false);\n    for (var i = 0; i < 1000; i++) {\n        var feature = [];\n        for (var j = 0; j < dimension; j++) {\n            feature.push(Math.random());\n        }\n        bf_idx.add(feature, i); // add point \n    }\n    bf_idx.build(\"euclidean\"); // build index\n    var feature = [];\n    for (var j = 0; j < dimension; j++) {\n        feature.push(Math.random());\n    }\n    console.log(\"bf result\", bf_idx.search(feature, 10)); //bf result Uint32Array(10) [704, 113, 358, 835, 408, 379, 117, 414, 808, 826]\n}\n\n(async () => {\n    await horajs.default();\n    await horajs.init_env();\n    demo();\n})();\n```\n\n**`Java` example** [[more info](https://github.com/hora-search/hora-java)]\n\n```Java\npublic void demo() {\n    final int dimension = 2;\n    final float variance = 2.0f;\n    Random fRandom = new Random();\n\n    BruteForceIndex bruteforce_idx = new BruteForceIndex(dimension); // init index instance\n\n    List<float[]> tmp = new ArrayList<>();\n    for (int i = 0; i < 5; i++) {\n        for (int p = 0; p < 10; p++) {\n            float[] features = new float[dimension];\n            for (int j = 0; j < dimension; j++) {\n                features[j] = getGaussian(fRandom, (float) (i * 10), variance);\n            }\n            bruteforce_idx.add(\"bf\", features, i * 10 + p); // add point\n            tmp.add(features);\n          }\n    }\n    bruteforce_idx.build(\"bf\", \"euclidean\"); // build index\n\n    int search_index = fRandom.nextInt(tmp.size());\n    // nearest neighbor search\n    int[] result = bruteforce_idx.search(\"bf\", 10, tmp.get(search_index));\n    // [main] INFO com.hora.app.ANNIndexTest  - demo bruteforce_idx[7, 8, 0, 5, 3, 9, 1, 6, 4, 2]\n    log.info(\"demo bruteforce_idx\" + Arrays.toString(result));\n}\n\nprivate static float getGaussian(Random fRandom, float aMean, float variance) {\n    float r = (float) fRandom.nextGaussian();\n    return aMean + r * variance;\n}\n```\n\n# Roadmap\n\n- [ ] Full test coverage\n- [ ] Implement [EFANNA](http://arxiv.org/abs/1609.07228) algorithm to achieve faster KNN graph building\n- [ ] Swift support and iOS/macOS deployment example\n- [ ] Support `R`\n- [ ] support `mmap`\n\n# Related Projects and Comparison\n\n- [Faiss](https://github.com/facebookresearch/faiss), [Annoy](https://github.com/spotify/annoy), [ScaNN](https://github.com/google-research/google-research/tree/master/scann):\n  - **`Hora` 的实现受到这些库的强烈启发。**\n  - `Faiss` 更侧重于 GPU 场景，`Hora` 比 Faiss 更轻（**无重度依赖）**。\n  - `Hora` 期待支持更多的语言，与性能相关的一切都会由 Rust🦀 实现。\n  - `Annoy` 只支持 `LSH (Random Projection)` 算法。\n  - `ScaNN` 和 `Faiss` 不太用户友好，（例如缺乏文档）。\n  - Hora is **ALL IN RUST** 🦀.\n\n- [Milvus](https://github.com/milvus-io/milvus), [Vald](https://github.com/vdaas/vald), [Jina AI](https://github.com/jina-ai/jina)\n  - `Milvus` 和 `Vald` 也支持多种语言，但作为服务而不是库\n  - `Milvus` 是建立在一些库上的，比如 `Faiss`，而 `Hora` 是一个库，所有算法都是自己实现的\n\n# Contribute\n\n**We appreciate your help!**\n\n我们很高兴您的参与，欢迎任何贡献，包括文档和测试。\n您可以在 GitHub 上创建 `Pull Request` 或 `Issue`，我们会尽快审核。\n\n我们使用 GitHub 问题来跟踪建议和错误。\n\n#### Clone the repo\n\n```bash\ngit clone https://github.com/hora-search/hora\n```\n\n#### Build\n\n```bash\ncargo build\n```\n\n#### Test\n\n```bash\ncargo test --lib\n```\n\n#### Try the changes\n\n```bash\ncd examples\ncargo run\n```\n\n# License\n\nThe entire repository is licensed under the [Apache License](https://github.com/hora-search/hora/blob/main/LICENSE).\n"
        },
        {
          "name": "README_FR.md",
          "type": "blob",
          "size": 10.28125,
          "content": "<div align=\"center\">\n  <img src=\"asset/logo.svg\" width=\"70%\"/>\n</div>\n\n# Hora\n\n**[[Homepage](http://horasearch.com/)]** **[[Document](https://horasearch.com/doc)]** **[[Examples](https://horasearch.com/doc/example.html)]**\n\n**_Hora Search Everywhere!_**\n\nHora est un **algorithme de recherche du voisin le plus proche approximatif** ([wiki](https://en.wikipedia.org/wiki/Nearest_neighbor_search)). Nous implémentons tout le code dans `Rust🦀` pour une fiabilité, une abstraction de haut niveau et des vitesses élevées comparables à `C++`.\n\nHora, **`「ほら」`** en japonais, sonne comme `[hōlə]`, et signifie `Wow`, `Vous voyez !` ou ` Regardez ça ! `. Le nom est inspiré d'une célèbre chanson japonaise **`「小さな恋のうた」`**.\n\n# Démos\n\n**👩 Face-Match [[online demo](https://horasearch.com/#Demos)], Essaye!**\n\n<div align=\"center\">\n  <img src=\"asset/demo3.gif\" width=\"100%\"/>\n</div>\n\n**🍷 Recherche de commentaires sur le vin de rêve [[online demo](https://horasearch.com/#Demos)], Essaye!**\n\n<div align=\"center\">\n  <img src=\"asset/demo2.gif\" width=\"100%\"/>\n</div>\n\n# Principales caractéristiques\n\n- **Performant** ⚡️\n\n  - **SIMD-Accelerated ([packed_simd](https://github.com/rust-lang/packed_simd))**\n  - **Implémentation d'algorithme stable**\n  - **Multiple threads design**\n\n- **Prend en charge plusieurs langages de programmation Lib** ☄️\n\n  - `Python`\n  - `Javascript`\n  - `Java`\n  - `Go` (WIP)\n  - `Ruby` (WIP)\n  - `Swift` (WIP)\n  - `R` (WIP)\n  - `Julia` (WIP)\n  - **Peut également être utilisé comme un service**\n\n- **Prend en charge plusieurs index** 🚀\n\n  - `Hierarchical Navigable Small World Graph Index (HNSWIndex)` ([details](https://arxiv.org/abs/1603.09320))\n  - `Satellite System Graph (SSGIndex)` ([details](https://arxiv.org/abs/1907.06146))\n  - `Product Quantization Inverted File(PQIVFIndex)` ([details](https://lear.inrialpes.fr/pubs/2011/JDS11/jegou_searching_with_quantization.pdf))\n  - `Random Projection Tree(RPTIndex)` (LSH, WIP)\n  - `BruteForce (BruteForceIndex)` (naive implementation with SIMD)\n\n- **Portable** 💼\n\n  - Supports `WebAssembly`\n  - Supports `Windows`, `Linux` and `OS X`\n  - Supports `IOS` and `Android` (WIP)\n  - Supports `no_std` (WIP, partial)\n  - Pas de dépendances lourdes, telles que `BLAS`\n\n- **Fiabilité** 🔒\n\n  - Le compilateur `Rust` sécurise tout le code\n  - Mémoire gérée par `Rust` pour toutes les bibliothèques de langage telles que `Python's`\n  - Large couverture de test\n\n- **Prend en charge plusieurs distances** 🧮\n\n  - `Distance du produit de point`\n    - ![equation](https://latex.codecogs.com/gif.latex?D%28x%2Cy%29%20%3D%20%5Csum%7B%28x*y%29%7D)\n  - `Distance euclidienne`\n    - ![equation](https://latex.codecogs.com/gif.latex?D%28x%2Cy%29%20%3D%20%5Csqrt%7B%5Csum%7B%28x-y%29%5E2%7D%7D)\n  - `Distance de Manhattan`\n    - ![equation](https://latex.codecogs.com/gif.latex?D%28x%2Cy%29%20%3D%20%5Csum%7B%7C%28x-y%29%7C%7D)\n  - `Similitude de cosinus`\n    - ![equation](https://latex.codecogs.com/gif.latex?D%28x%2Cy%29%20%3D%20%5Cfrac%7Bx%20*y%7D%7B%7C%7Cx%7C%7C*%7C%7Cy%7C%7C%7D)\n\n- **Productive** ⭐\n  - Bien documenté\n  - API élégante, simple et facile à apprendre\n\n# Installation\n\n**`Rust`**\n\nin `Cargo.toml`\n\n```toml\n[dependencies]\nhora = \"0.1.1\"\n```\n\n**`Python`**\n\n```Bash\n$ pip install horapy\n```\n\n**`Javascript (WebAssembly)`**\n\n```Bash\n$ npm i horajs\n```\n\n**`Building from source`**\n\n```bash\n$ git clone https://github.com/hora-search/hora\n$ cargo build\n```\n\n# Repères\n\n<img src=\"asset/fashion-mnist-784-euclidean_10_euclidean.png\"/>\n\nby `aws t2.medium (CPU: Intel(R) Xeon(R) CPU E5-2686 v4 @ 2.30GHz)` [more information](https://github.com/hora-search/ann-benchmarks)\n\n# Exemples\n\n**`Rust` exemple** [[more info](https://github.com/hora-search/hora/tree/main/examples)]\n\n```Rust\nuse hora::core::ann_index::ANNIndex;\nuse rand::{thread_rng, Rng};\nuse rand_distr::{Distribution, Normal};\n\npub fn demo() {\n    let n = 1000;\n    let dimension = 64;\n\n    // make sample points\n    let mut samples = Vec::with_capacity(n);\n    let normal = Normal::new(0.0, 10.0).unwrap();\n    for _i in 0..n {\n        let mut sample = Vec::with_capacity(dimension);\n        for _j in 0..dimension {\n            sample.push(normal.sample(&mut rand::thread_rng()));\n        }\n        samples.push(sample);\n    }\n\n    // init index\n    let mut index = hora::index::hnsw_idx::HNSWIndex::<f32, usize>::new(\n        dimension,\n        &hora::index::hnsw_params::HNSWParams::<f32>::default(),\n    );\n    for (i, sample) in samples.iter().enumerate().take(n) {\n        // add point\n        index.add(sample, i).unwrap();\n    }\n    index.build(hora::core::metrics::Metric::Euclidean).unwrap();\n\n    let mut rng = thread_rng();\n    let target: usize = rng.gen_range(0..n);\n    // 523 has neighbors: [523, 762, 364, 268, 561, 231, 380, 817, 331, 246]\n    println!(\n        \"{:?} has neighbors: {:?}\",\n        target,\n        index.search(&samples[target], 10) // search for k nearest neighbors\n    );\n}\n```\n\nmerci @vaaaaanquish pour cette recherche complète d'images de rouille pure [exemple] (https://github.com/vaaaaanquish/rust-ann-search-example), Pour plus d'informations sur cet exemple, veuillez cliquer sur [Pure Rustな近似最近傍 horaを用いた画像検索を実装する](https://vaaaaaanquish.hatenablog.com/entry/2021/08/10/065117)\n\n**`Python` exemple** [[more info](https://github.com/hora-search/horapy)]\n\n```Python\nimport numpy as np\nfrom horapy import HNSWIndex\n\ndimension = 50\nn = 1000\n\n# init index instance\nindex = HNSWIndex(dimension, \"usize\")\n\nsamples = np.float32(np.random.rand(n, dimension))\nfor i in range(0, len(samples)):\n    # add node\n    index.add(np.float32(samples[i]), i)\n\nindex.build(\"euclidean\")  # build index\n\ntarget = np.random.randint(0, n)\n# 410 in Hora ANNIndex <HNSWIndexUsize> (dimension: 50, dtype: usize, max_item: 1000000, n_neigh: 32, n_neigh0: 64, ef_build: 20, ef_search: 500, has_deletion: False)\n# has neighbors: [410, 736, 65, 36, 631, 83, 111, 254, 990, 161]\nprint(\"{} in {} \\nhas neighbors: {}\".format(\n    target, index, index.search(samples[target], 10)))  # search\n\n```\n\n**`JavaScript` exemple** [[more info](https://github.com/hora-search/hora-wasm)]\n\n```JavaScript\nimport * as horajs from \"horajs\";\n\nconst demo = () => {\n    const dimension = 50;\n    var bf_idx = horajs.BruteForceIndexUsize.new(dimension);\n    // var hnsw_idx = horajs.HNSWIndexUsize.new(dimension, 1000000, 32, 64, 20, 500, 16, false);\n    for (var i = 0; i < 1000; i++) {\n        var feature = [];\n        for (var j = 0; j < dimension; j++) {\n            feature.push(Math.random());\n        }\n        bf_idx.add(feature, i); // add point\n    }\n    bf_idx.build(\"euclidean\"); // build index\n    var feature = [];\n    for (var j = 0; j < dimension; j++) {\n        feature.push(Math.random());\n    }\n    console.log(\"bf result\", bf_idx.search(feature, 10)); //bf result Uint32Array(10) [704, 113, 358, 835, 408, 379, 117, 414, 808, 826]\n}\n\n(async () => {\n    await horajs.default();\n    await horajs.init_env();\n    demo();\n})();\n```\n\n**`Java` exemple** [[more info](https://github.com/hora-search/hora-java)]\n\n```Java\npublic void demo() {\n    final int dimension = 2;\n    final float variance = 2.0f;\n    Random fRandom = new Random();\n\n    BruteForceIndex bruteforce_idx = new BruteForceIndex(dimension); // init index instance\n\n    List<float[]> tmp = new ArrayList<>();\n    for (int i = 0; i < 5; i++) {\n        for (int p = 0; p < 10; p++) {\n            float[] features = new float[dimension];\n            for (int j = 0; j < dimension; j++) {\n                features[j] = getGaussian(fRandom, (float) (i * 10), variance);\n            }\n            bruteforce_idx.add(\"bf\", features, i * 10 + p); // add point\n            tmp.add(features);\n          }\n    }\n    bruteforce_idx.build(\"bf\", \"euclidean\"); // build index\n\n    int search_index = fRandom.nextInt(tmp.size());\n    // nearest neighbor search\n    int[] result = bruteforce_idx.search(\"bf\", 10, tmp.get(search_index));\n    // [main] INFO com.hora.app.ANNIndexTest  - demo bruteforce_idx[7, 8, 0, 5, 3, 9, 1, 6, 4, 2]\n    log.info(\"demo bruteforce_idx\" + Arrays.toString(result));\n}\n\nprivate static float getGaussian(Random fRandom, float aMean, float variance) {\n    float r = (float) fRandom.nextGaussian();\n    return aMean + r * variance;\n}\n```\n\n# Feuille de route\n\n- [ ] Couverture complète des tests\n- [ ] Implémentez l'algorithme [EFANNA](http://arxiv.org/abs/1609.07228) pour obtenir une création de graphes KNN plus rapide\n- [ ] Prise en charge Swift et exemple de déploiement iOS/macOS\n- [ ] Support `R`\n- [ ] support `mmap`\n\n# Projets connexes et comparaison\n\n- [Faiss](https://github.com/facebookresearch/faiss), [Annoy](https://github.com/spotify/annoy), [ScaNN](https://github.com/google-research/google-research/tree/master/scann):\n\n  - **L'implémentation de `Hora` est fortement inspirée de ces bibliothèques.**\n  - `Faiss` se concentre davantage sur la scène GPU, et `Hora` est plus léger que Faiss (**pas de dépendances lourdes)**.\n  - `Hora` s'attend à prendre en charge plus de langues, et tout ce qui concerne les performances sera implémenté par Rust🦀.\n  - `Annoy` ne prend en charge que l'algorithme `LSH (Random Projection)`.\n  - `ScaNN` et `Faiss` sont moins conviviaux (par exemple, manque de documentation).\n  - Hora is **ALL IN RUST** 🦀.\n\n- [Milvus](https://github.com/milvus-io/milvus), [Vald](https://github.com/vdaas/vald), [Jina AI](https://github.com/jina-ai/jina)\n  - `Milvus` et `Vald` prennent également en charge plusieurs langues, mais servent de service au lieu d'une bibliothèque\n  - `Milvus` est construit sur certaines bibliothèques telles que `Faiss`, tandis que `Hora` est une bibliothèque avec tous les algorithmes implémentés elle-même\n\n# Contribute\n\n**Nous apprécions votre aide!**\n\nNous sommes ravis de votre participation, toutes les contributions sont les bienvenues, y compris les documentations et les tests.\nVous pouvez créer une `Pull Request` ou un `Issue` sur GitHub, et nous l'examinerons dès que possible.\n\nNous utilisons les problèmes GitHub pour suivre les suggestions et les bogues.\n\n#### Clone the repo\n\n```bash\ngit clone https://github.com/hora-search/hora\n```\n\n#### Build\n\n```bash\ncargo build\n```\n\n#### Test\n\n```bash\ncargo test --lib\n```\n\n#### Try the changes\n\n```bash\ncd examples\ncargo run\n```\n\n# License\n\nThe entire repository is licensed under the [Apache License](https://github.com/hora-search/hora/blob/main/LICENSE).\n"
        },
        {
          "name": "README_JP.md",
          "type": "blob",
          "size": 10.6650390625,
          "content": "<div align=\"center\">\n  <img src=\"asset/logo.svg\" width=\"70%\"/>\n</div>\n\n# Hora\n\n**[[Homepage](http://horasearch.com/)]** **[[Document](https://horasearch.com/doc)]** **[[Examples](https://horasearch.com/doc/example.html)]**\n\n**_Hora Search Everywhere!_**\n\nHoraは**近似最近傍探索アルゴリズムライブラリ** [[Wikipedia](https://ja.wikipedia.org/wiki/%E6%9C%80%E8%BF%91%E5%82%8D%E6%8E%A2%E7%B4%A2)]です。 信頼性、高レベルの抽象化、および `C++`に匹敵する高速性を達成するために、すべてのコードを`Rust🦀`で実装しています。\n\n日本語で「ほら」は、`[hōlə]`のように聞こえます。この名前は、日本の歌「小さな恋のうた」の有名な歌詞「ほら あなたにとって大事な人ほど すぐそばにいるの」にちなんで付けられました。\n\n# デモ\n\n**👩 Face-Match [[online demo](https://horasearch.com/#Demos)]**\n\n<div align=\"center\">\n  <img src=\"asset/demo3.gif\" width=\"100%\"/>\n</div>\n\n**🍷 Dream wine comments search [[online demo](https://horasearch.com/#Demos)]**\n\n<div align=\"center\">\n  <img src=\"asset/demo2.gif\" width=\"100%\"/>\n</div>\n\n# 特徴\n\n- **性能** ⚡️\n\n  - **SIMD アクセラレーション ([packed_simd](https://github.com/rust-lang/packed_simd))**\n  - **安定したアルゴリズムの実装**\n  - **マルチスレッドデザイン**\n\n- **複数のプログラミング言語をサポート** ☄️\n\n  - `Python`\n  - `Javascript`\n  - `Java`\n  - `Go` (WIP)\n  - `Ruby` (WIP)\n  - `Swift` (WIP)\n  - `R` (WIP)\n  - `Julia` (WIP)\n  - **サービスとしても使用可能**\n\n- **複数のインデックスをサポート** 🚀\n\n  - `Hierarchical Navigable Small World Graph Index (HNSWIndex)` ([details](https://arxiv.org/abs/1603.09320))\n  - `Satellite System Graph (SSGIndex)` ([details](https://arxiv.org/abs/1907.06146))\n  - `Product Quantization Inverted File(PQIVFIndex)` ([details](https://lear.inrialpes.fr/pubs/2011/JDS11/jegou_searching_with_quantization.pdf))\n  - `Random Projection Tree(RPTIndex)` (LSH, WIP)\n  - `BruteForce (BruteForceIndex)` (SIMDを使った素朴な実装)\n\n- **移植性** 💼\n\n  - `WebAssembly`対応\n  - `Windows`、`Linux`および`OS X`に対応\n  - `iOS`および`Android`対応 (WIP)\n  - `no_std`対応 (WIP, partial)\n  - `BLAS`などの大きな依存関係は**ありません**\n\n- **信頼性** 🔒\n\n  - `Rust`コンパイラはすべてのコードを保護します\n  - `Python`などの全ての言語向けのライブラリで`Rust`によるメモリ管理\n  - 幅広いテスト範囲\n\n- **複数の距離をサポート** 🧮\n\n  - `Dot Product Distance`\n    - ![equation](https://latex.codecogs.com/gif.latex?D%28x%2Cy%29%20%3D%20%5Csum%7B%28x*y%29%7D)\n  - `Euclidean Distance`\n    - ![equation](https://latex.codecogs.com/gif.latex?D%28x%2Cy%29%20%3D%20%5Csqrt%7B%5Csum%7B%28x-y%29%5E2%7D%7D)\n  - `Manhattan Distance`\n    - ![equation](https://latex.codecogs.com/gif.latex?D%28x%2Cy%29%20%3D%20%5Csum%7B%7C%28x-y%29%7C%7D)\n  - `Cosine Similarity`\n    - ![equation](https://latex.codecogs.com/gif.latex?D%28x%2Cy%29%20%3D%20%5Cfrac%7Bx%20*y%7D%7B%7C%7Cx%7C%7C*%7C%7Cy%7C%7C%7D)\n\n- **生産性** ⭐\n  - 整備されたドキュメント\n  - エレガントかつシンプル、そして習得しやすいAPI\n\n# インストール\n\n`Cargo.toml`で\n\n```toml\n[dependencies]\nhora = \"0.1.1\"\n```\n\n**`Python`**\n\n```Bash\n$ pip install horapy\n```\n\n**`Javascript (WebAssembly)`**\n\n```Bash\n$ npm i horajs\n```\n\n**`ソースコードからビルド`**\n\n```bash\n$ git clone https://github.com/hora-search/hora\n$ cargo build\n```\n\n# ベンチマーク\n\n<img src=\"asset/fashion-mnist-784-euclidean_10_euclidean.png\"/>\n\nby `aws t2.medium (CPU: Intel(R) Xeon(R) CPU E5-2686 v4 @ 2.30GHz)` [more information](https://github.com/hora-search/ann-benchmarks)\n\n# Examples\n\n**`Rust`** [[詳細](https://github.com/hora-search/hora/tree/main/examples)]\n\n```Rust\nuse hora::core::ann_index::ANNIndex;\nuse rand::{thread_rng, Rng};\nuse rand_distr::{Distribution, Normal};\n\npub fn demo() {\n    let n = 1000;\n    let dimension = 64;\n\n    // make sample points\n    let mut samples = Vec::with_capacity(n);\n    let normal = Normal::new(0.0, 10.0).unwrap();\n    for _i in 0..n {\n        let mut sample = Vec::with_capacity(dimension);\n        for _j in 0..dimension {\n            sample.push(normal.sample(&mut rand::thread_rng()));\n        }\n        samples.push(sample);\n    }\n\n    // init index\n    let mut index = hora::index::hnsw_idx::HNSWIndex::<f32, usize>::new(\n        dimension,\n        &hora::index::hnsw_params::HNSWParams::<f32>::default(),\n    );\n    for (i, sample) in samples.iter().enumerate().take(n) {\n        // add point\n        index.add(sample, i).unwrap();\n    }\n    index.build(hora::core::metrics::Metric::Euclidean).unwrap();\n\n    let mut rng = thread_rng();\n    let target: usize = rng.gen_range(0..n);\n    // 523 has neighbors: [523, 762, 364, 268, 561, 231, 380, 817, 331, 246]\n    println!(\n        \"{:?} has neighbors: {:?}\",\n        target,\n        index.search(&samples[target], 10) // search for k nearest neighbors\n    );\n}\n```\n\nこの完全な純粋な錆画像検索の[コード例](https://github.com/vaaaaanquish/rust-ann-search-example)を公開して下さった@vaaaaanquish様に感謝申し上げます。この例の詳細については、[Pure Rustな近似最近傍探索ライブラリhoraを用いた画像検索を実装する](https://vaaaaaanquish.hatenablog.com/entry/2021/08/10/065117)をご覧ください。\n\n**`Python`** [[詳細](https://github.com/hora-search/horapy)]\n\n```Python\nimport numpy as np\nfrom horapy import HNSWIndex\n\ndimension = 50\nn = 1000\n\n# init index instance\nindex = HNSWIndex(dimension, \"usize\")\n\nsamples = np.float32(np.random.rand(n, dimension))\nfor i in range(0, len(samples)):\n    # add node\n    index.add(np.float32(samples[i]), i)\n\nindex.build(\"euclidean\")  # build index\n\ntarget = np.random.randint(0, n)\n# 410 in Hora ANNIndex <HNSWIndexUsize> (dimension: 50, dtype: usize, max_item: 1000000, n_neigh: 32, n_neigh0: 64, ef_build: 20, ef_search: 500, has_deletion: False)\n# has neighbors: [410, 736, 65, 36, 631, 83, 111, 254, 990, 161]\nprint(\"{} in {} \\nhas neighbors: {}\".format(\n    target, index, index.search(samples[target], 10)))  # search\n\n```\n\n**`JavaScript`** [[詳細](https://github.com/hora-search/hora-wasm)]\n\n```JavaScript\nimport * as horajs from \"horajs\";\n\nconst demo = () => {\n    const dimension = 50;\n    var bf_idx = horajs.BruteForceIndexUsize.new(dimension);\n    // var hnsw_idx = horajs.HNSWIndexUsize.new(dimension, 1000000, 32, 64, 20, 500, 16, false);\n    for (var i = 0; i < 1000; i++) {\n        var feature = [];\n        for (var j = 0; j < dimension; j++) {\n            feature.push(Math.random());\n        }\n        bf_idx.add(feature, i); // add point\n    }\n    bf_idx.build(\"euclidean\"); // build index\n    var feature = [];\n    for (var j = 0; j < dimension; j++) {\n        feature.push(Math.random());\n    }\n    console.log(\"bf result\", bf_idx.search(feature, 10)); //bf result Uint32Array(10) [704, 113, 358, 835, 408, 379, 117, 414, 808, 826]\n}\n\n(async () => {\n    await horajs.default();\n    await horajs.init_env();\n    demo();\n})();\n```\n\n**`Java`** [[詳細](https://github.com/hora-search/hora-java)]\n\n```Java\npublic void demo() {\n    final int dimension = 2;\n    final float variance = 2.0f;\n    Random fRandom = new Random();\n\n    BruteForceIndex bruteforce_idx = new BruteForceIndex(dimension); // init index instance\n\n    List<float[]> tmp = new ArrayList<>();\n    for (int i = 0; i < 5; i++) {\n        for (int p = 0; p < 10; p++) {\n            float[] features = new float[dimension];\n            for (int j = 0; j < dimension; j++) {\n                features[j] = getGaussian(fRandom, (float) (i * 10), variance);\n            }\n            bruteforce_idx.add(\"bf\", features, i * 10 + p); // add point\n            tmp.add(features);\n          }\n    }\n    bruteforce_idx.build(\"bf\", \"euclidean\"); // build index\n\n    int search_index = fRandom.nextInt(tmp.size());\n    // nearest neighbor search\n    int[] result = bruteforce_idx.search(\"bf\", 10, tmp.get(search_index));\n    // [main] INFO com.hora.app.ANNIndexTest  - demo bruteforce_idx[7, 8, 0, 5, 3, 9, 1, 6, 4, 2]\n    log.info(\"demo bruteforce_idx\" + Arrays.toString(result));\n}\n\nprivate static float getGaussian(Random fRandom, float aMean, float variance) {\n    float r = (float) fRandom.nextGaussian();\n    return aMean + r * variance;\n}\n```\n\n# ロードマップ\n\n- [ ] 完全なテストカバレッジ\n- [ ] [EFANNA](http://arxiv.org/abs/1609.07228)アルゴリズムを実装して、より高速なKNNグラフ構築を実現する\n- [ ] SwiftのサポートとiOS/macOSのデプロイ例\n- [ ] `R`のサポート\n- [ ] `mmap`のサポート\n\n# 関連プロジェクトと比較\n\n- [Faiss](https://github.com/facebookresearch/faiss), [Annoy](https://github.com/spotify/annoy), [ScaNN](https://github.com/google-research/google-research/tree/master/scann):\n\n  - **Hora の実装は、これらのライブラリに強く影響を受けています。**\n  - `Faiss`はGPUの使用に重点を置いており、`Hora`はFaissよりも軽量です **(大きな依存関係はありません)**。\n  - `Hora`はより多くの言語をサポートすることを期待しており、パフォーマンスに関連する部分は全てRustで実装しています🦀\n  - `Annoy`は`LSH(Random Projection)`アルゴリズムのみをサポートします。\n  - `ScaN`と`Fats`はドキュメントなどの面においてユーザーフレンドリーではありません\n  - Hora is **ALL IN RUST** 🦀 (Horaは**全てRustで実装しています**🦀)\n\n- [Milvus](https://github.com/milvus-io/milvus), [Vald](https://github.com/vdaas/vald), [Jina AI](https://github.com/jina-ai/jina)\n  - `Milvus`と` Vald`も複数の言語をサポートしていますが、ライブラリではなくサービスとして機能します\n  - `Milvus`は`Faiss`などのいくつかのライブラリにの上に成り立っていますが、 `Hora`ではすべてのアルゴリズムが実装されています。\n\n# 貢献に参加する\n\n**We appreciate your participation!**\n\n皆様のご参加をお待ちしております。ドキュメントやテストなど、あらゆる貢献を歓迎します。\nGitHub でPull RequestsまたはIssuesを作成できます。できるだけ早く確認します。\n\n提案やバグを管理するためにGitHubのIssuesを使用します。\n\n#### リポジトリのclone\n\n```bash\ngit clone https://github.com/hora-search/hora\n```\n\n#### ビルド\n\n```bash\ncargo build\n```\n\n#### テスト\n\n```bash\ncargo test --lib\n```\n\n#### 変更の確認\n\n```bash\ncd examples\ncargo run\n```\n\n# ライセンス\n\nこのリポジトリは[Apache License](https://github.com/hora-search/hora/blob/main/LICENSE)でライセンスされています。\n"
        },
        {
          "name": "README_KR.md",
          "type": "blob",
          "size": 10.03515625,
          "content": "<div align=\"center\">\n  <img src=\"asset/logo.svg\" width=\"70%\"/>\n</div>\n\n# Hora\n\n**[[Homepage](http://horasearch.com/)]** **[[Document](https://horasearch.com/doc)]** **[[Examples](https://horasearch.com/doc/example.html)]**\n\n**_Hora Search Everywhere!_**\n\nHora는 **근접 이웃 검색 알고리즘**([wiki](https://en.wikipedia.org/wiki/Nearest_neighbor_search)) 라이브러리입니다. 우리는 `C++` 에 필적하는 신뢰성, 높은 수준의 추상화 및 고속을 위해 `Rust🦀 `에서 모든 코드를 구현합니다.\n\nHora, `「ほら」`는 일본어로 `[hōlə]`처럼 들리며 `와우`, `알겠습니다!` 또는 `저걸 봐!`를 의미합니다. 이름은 유명한 일본 노래 `「小さな恋のうた」`에서 영감을 받았습니다.\n\n# Demos\n\n**👩 Face-Match [[online demo](https://horasearch.com/#Demos)], have a try!**\n\n<div align=\"center\">\n  <img src=\"asset/demo3.gif\" width=\"100%\"/>\n</div>\n\n**🍷 Dream wine comments search [[online demo](https://horasearch.com/#Demos)], have a try!**\n\n<div align=\"center\">\n  <img src=\"asset/demo2.gif\" width=\"100%\"/>\n</div>\n\n# Features\n\n- **Performant** ⚡️\n\n  - **SIMD-Accelerated ([packed_simd](https://github.com/rust-lang/packed_simd))**\n  - **Stable algorithm implementation**\n  - **Multiple threads design**\n\n- **Supports Multiple Languages** ☄️\n\n  - `Python`\n  - `Javascript`\n  - `Java`\n  - `Go` (WIP)\n  - `Ruby` (WIP)\n  - `Swift` (WIP)\n  - `R` (WIP)\n  - `Julia` (WIP)\n  - **Can also be used as a service**\n\n- **Supports Multiple Indexes** 🚀\n\n  - `Hierarchical Navigable Small World Graph Index (HNSWIndex)` ([details](https://arxiv.org/abs/1603.09320))\n  - `Satellite System Graph (SSGIndex)` ([details](https://arxiv.org/abs/1907.06146))\n  - `Product Quantization Inverted File(PQIVFIndex)` ([details](https://lear.inrialpes.fr/pubs/2011/JDS11/jegou_searching_with_quantization.pdf))\n  - `Random Projection Tree(RPTIndex)` (LSH, WIP)\n  - `BruteForce (BruteForceIndex)` (naive implementation with SIMD)\n\n- **Portable** 💼\n  - Supports `WebAssembly`\n  - Supports `Windows`, `Linux` and `OS X`\n  - Supports `IOS` and `Android` (WIP)\n  - Supports `no_std` (WIP, partial)\n  - **No** heavy dependencies, such as `BLAS`\n\n- **Reliability** 🔒\n\n  - `Rust` compiler secures all code\n  - Memory managed by `Rust` for all language libraries such as `Python's`\n  - Broad testing coverage\n\n- **Supports Multiple Distances** 🧮\n\n  - `Dot Product Distance`\n    - ![equation](https://latex.codecogs.com/gif.latex?D%28x%2Cy%29%20%3D%20%5Csum%7B%28x*y%29%7D)\n  - `Euclidean Distance`\n    - ![equation](https://latex.codecogs.com/gif.latex?D%28x%2Cy%29%20%3D%20%5Csqrt%7B%5Csum%7B%28x-y%29%5E2%7D%7D)\n  - `Manhattan Distance`\n    - ![equation](https://latex.codecogs.com/gif.latex?D%28x%2Cy%29%20%3D%20%5Csum%7B%7C%28x-y%29%7C%7D)\n  - `Cosine Similarity`\n    - ![equation](https://latex.codecogs.com/gif.latex?D%28x%2Cy%29%20%3D%20%5Cfrac%7Bx%20*y%7D%7B%7C%7Cx%7C%7C*%7C%7Cy%7C%7C%7D)\n\n- **Productive** ⭐\n  - Well documented\n  - Elegant, simple and easy to learn API\n\n# Installation\n\n**`Rust`**\n\nin `Cargo.toml`\n\n```toml\n[dependencies]\nhora = \"0.1.1\"\n```\n\n**`Python`**\n\n```Bash\n$ pip install horapy\n```\n\n**`Javascript (WebAssembly)`**\n\n```Bash\n$ npm i horajs\n```\n\n**`Building from source`**\n\n```bash\n$ git clone https://github.com/hora-search/hora\n$ cargo build\n```\n\n# Benchmarks\n\n<img src=\"asset/fashion-mnist-784-euclidean_10_euclidean.png\"/>\n\nby `aws t2.medium (CPU: Intel(R) Xeon(R) CPU E5-2686 v4 @ 2.30GHz)` [more information](https://github.com/hora-search/ann-benchmarks)\n\n# Examples\n\n**`Rust` example** [[more info](https://github.com/hora-search/hora/tree/main/examples)]\n\n```Rust\nuse hora::core::ann_index::ANNIndex;\nuse rand::{thread_rng, Rng};\nuse rand_distr::{Distribution, Normal};\n\npub fn demo() {\n    let n = 1000;\n    let dimension = 64;\n\n    // make sample points\n    let mut samples = Vec::with_capacity(n);\n    let normal = Normal::new(0.0, 10.0).unwrap();\n    for _i in 0..n {\n        let mut sample = Vec::with_capacity(dimension);\n        for _j in 0..dimension {\n            sample.push(normal.sample(&mut rand::thread_rng()));\n        }\n        samples.push(sample);\n    }\n\n    // init index\n    let mut index = hora::index::hnsw_idx::HNSWIndex::<f32, usize>::new(\n        dimension,\n        &hora::index::hnsw_params::HNSWParams::<f32>::default(),\n    );\n    for (i, sample) in samples.iter().enumerate().take(n) {\n        // add point\n        index.add(sample, i).unwrap();\n    }\n    index.build(hora::core::metrics::Metric::Euclidean).unwrap();\n\n    let mut rng = thread_rng();\n    let target: usize = rng.gen_range(0..n);\n    // 523 has neighbors: [523, 762, 364, 268, 561, 231, 380, 817, 331, 246]\n    println!(\n        \"{:?} has neighbors: {:?}\",\n        target,\n        index.search(&samples[target], 10) // search for k nearest neighbors\n    );\n}\n```\n\nthank @vaaaaanquish for this complete pure rust image search [example](https://github.com/vaaaaanquish/rust-ann-search-example), For more information about this example, please can click [Pure Rustな近似最近傍探索ライブラリhoraを用いた画像検索を実装する](https://vaaaaaanquish.hatenablog.com/entry/2021/08/10/065117)\n\n**`Python` example** [[more info](https://github.com/hora-search/horapy)]\n\n```Python\nimport numpy as np\nfrom horapy import HNSWIndex\n\ndimension = 50\nn = 1000\n\n# init index instance\nindex = HNSWIndex(dimension, \"usize\")\n\nsamples = np.float32(np.random.rand(n, dimension))\nfor i in range(0, len(samples)):\n    # add node\n    index.add(np.float32(samples[i]), i)\n\nindex.build(\"euclidean\")  # build index\n\ntarget = np.random.randint(0, n)\n# 410 in Hora ANNIndex <HNSWIndexUsize> (dimension: 50, dtype: usize, max_item: 1000000, n_neigh: 32, n_neigh0: 64, ef_build: 20, ef_search: 500, has_deletion: False)\n# has neighbors: [410, 736, 65, 36, 631, 83, 111, 254, 990, 161]\nprint(\"{} in {} \\nhas neighbors: {}\".format(\n    target, index, index.search(samples[target], 10)))  # search\n\n```\n\n**`JavaScript` example** [[more info](https://github.com/hora-search/hora-wasm)]\n\n```JavaScript\nimport * as horajs from \"horajs\";\n\nconst demo = () => {\n    const dimension = 50;\n    var bf_idx = horajs.BruteForceIndexUsize.new(dimension);\n    // var hnsw_idx = horajs.HNSWIndexUsize.new(dimension, 1000000, 32, 64, 20, 500, 16, false);\n    for (var i = 0; i < 1000; i++) {\n        var feature = [];\n        for (var j = 0; j < dimension; j++) {\n            feature.push(Math.random());\n        }\n        bf_idx.add(feature, i); // add point \n    }\n    bf_idx.build(\"euclidean\"); // build index\n    var feature = [];\n    for (var j = 0; j < dimension; j++) {\n        feature.push(Math.random());\n    }\n    console.log(\"bf result\", bf_idx.search(feature, 10)); //bf result Uint32Array(10) [704, 113, 358, 835, 408, 379, 117, 414, 808, 826]\n}\n\n(async () => {\n    await horajs.default();\n    await horajs.init_env();\n    demo();\n})();\n```\n\n**`Java` example** [[more info](https://github.com/hora-search/hora-java)]\n\n```Java\npublic void demo() {\n    final int dimension = 2;\n    final float variance = 2.0f;\n    Random fRandom = new Random();\n\n    BruteForceIndex bruteforce_idx = new BruteForceIndex(dimension); // init index instance\n\n    List<float[]> tmp = new ArrayList<>();\n    for (int i = 0; i < 5; i++) {\n        for (int p = 0; p < 10; p++) {\n            float[] features = new float[dimension];\n            for (int j = 0; j < dimension; j++) {\n                features[j] = getGaussian(fRandom, (float) (i * 10), variance);\n            }\n            bruteforce_idx.add(\"bf\", features, i * 10 + p); // add point\n            tmp.add(features);\n          }\n    }\n    bruteforce_idx.build(\"bf\", \"euclidean\"); // build index\n\n    int search_index = fRandom.nextInt(tmp.size());\n    // nearest neighbor search\n    int[] result = bruteforce_idx.search(\"bf\", 10, tmp.get(search_index));\n    // [main] INFO com.hora.app.ANNIndexTest  - demo bruteforce_idx[7, 8, 0, 5, 3, 9, 1, 6, 4, 2]\n    log.info(\"demo bruteforce_idx\" + Arrays.toString(result));\n}\n\nprivate static float getGaussian(Random fRandom, float aMean, float variance) {\n    float r = (float) fRandom.nextGaussian();\n    return aMean + r * variance;\n}\n```\n\n# Roadmap\n\n- [ ] 전체 테스트 범위\n- [ ] 더 빠른 KNN 그래프 구축을 달성하기 위해 [EFANNA](http://arxiv.org/abs/1609.07228) 알고리즘 구현\n- [ ] Swift 지원 및 `iOS`/`macOS` 배포 예시\n- [ ] 지원 `R`\n- [ ] `mmap` 지원\n\n# Related Projects and Comparison\n\n- [Faiss](https://github.com/facebookresearch/faiss), [Annoy](https://github.com/spotify/annoy), [ScaNN](https://github.com/google-research/google-research/tree/master/scann):\n\n  - **`Hora`의 구현은 이러한 라이브러리에서 크게 영감을 받았습니다.**\n  - `Faiss`는 GPU 장면에 더 중점을 두고 `Hora`는 Faiss보다 가볍습니다(**중대한 종속성 없음)**.\n  - `Hora`는 더 많은 언어를 지원할 예정이며 성능과 관련된 모든 것은 Rust🦀에서 구현됩니다.\n  - `Annoy`는 ``LSH (Random Projection)` 알고리즘만 지원합니다.\n  - `ScaNN` 및 `Faiss`는 사용자 친화적이지 않습니다(예: 문서 부족).\n  - Hora is **ALL IN RUST** 🦀.\n\n- [Milvus](https://github.com/milvus-io/milvus), [Vald](https://github.com/vdaas/vald), [Jina AI](https://github.com/jina-ai/jina)\n  - 'Milvus'와 'Vald'도 여러 언어를 지원하지만 라이브러리 대신 서비스 역할을 합니다.\n  - 'Milvus'는 'Faiss'와 같은 일부 라이브러리를 기반으로 하는 반면, 'Hora'는 모든 알고리즘이 자체적으로 구현된 라이브러리입니다.\n\n# Contribute\n\n**We appreciate your help!**\n\n문서 및 테스트를 포함하여 모든 기여를 환영합니다.\nGitHub에서 `Pull Request` 또는 `Issue` 를 생성할 수 있으며 최대한 빨리 검토하겠습니다.\n\n제안 및 버그를 추적하기 위해 GitHub 문제를 사용합니다.\n\n#### Clone the repo\n\n```bash\ngit clone https://github.com/hora-search/hora\n```\n\n#### Build\n\n```bash\ncargo build\n```\n\n#### Test\n\n```bash\ncargo test --lib\n```\n\n#### Try the changes\n\n```bash\ncd examples\ncargo run\n```\n\n# License\n\nThe entire repository is licensed under the [Apache License](https://github.com/hora-search/hora/blob/main/LICENSE).\n"
        },
        {
          "name": "README_RU.md",
          "type": "blob",
          "size": 11.12890625,
          "content": "<div align=\"center\">\n  <img src=\"asset/logo.svg\" width=\"70%\"/>\n</div>\n\n# Hora\n\n**[[Homepage](http://horasearch.com/)]** **[[Document](https://horasearch.com/doc)]** **[[Examples](https://horasearch.com/doc/example.html)]**\n\n**_Hora Search Everywhere!_**\n\nHora - это **приблизительный алгоритм поиска ближайшего соседа** ([wiki](https://en.wikipedia.org/wiki/Nearest_neighbor_search)) библиотека. Мы реализуем весь код на `Rust🦀 ` для надежности, высокого уровня абстракции и высокой скорости, сравнимой с `C++`.\n\nHora, **`「ほら」`** на японском языке, звучит как `[hōlə]` и означает `Вау`,`Ты видишь!`Или`Посмотри на это!`. Название навеяно известной японской песней **`「小さな恋のうた」`**.\n\n# Демо\n\n**👩 Face-Match [[online demo](https://horasearch.com/#Demos)], попробуй!**\n\n<div align=\"center\">\n  <img src=\"asset/demo3.gif\" width=\"100%\"/>\n</div>\n\n**🍷 Dream wine comments search [[online demo](https://horasearch.com/#Demos)], попробуй!**\n\n<div align=\"center\">\n  <img src=\"asset/demo2.gif\" width=\"100%\"/>\n</div>\n\n# ключевая особенность\n\n- **Исполнитель** ⚡️\n\n  - **SIMD-Accelerated ([packed_simd](https://github.com/rust-lang/packed_simd))**\n  - **Быстрая реализация алгоритма**\n  - **Многопоточная конструкция**\n\n- **Поддерживает несколько языков программирования** ☄️\n\n  - `Python`\n  - `Javascript`\n  - `Java`\n  - `Go` (WIP)\n  - `Ruby` (WIP)\n  - `Swift` (WIP)\n  - `R` (WIP)\n  - `Julia` (WIP)\n  - **Также может использоваться как услуга**\n\n- **Поддерживает несколько индексов** 🚀\n\n  - `Hierarchical Navigable Small World Graph Index (HNSWIndex)` ([details](https://arxiv.org/abs/1603.09320))\n  - `Satellite System Graph (SSGIndex)` ([details](https://arxiv.org/abs/1907.06146))\n  - `Product Quantization Inverted File(PQIVFIndex)` ([details](https://lear.inrialpes.fr/pubs/2011/JDS11/jegou_searching_with_quantization.pdf))\n  - `Random Projection Tree(RPTIndex)` (LSH, WIP)\n  - `BruteForce (BruteForceIndex)` (naive implementation with SIMD)\n\n- **Портативный** 💼\n\n  - Supports `WebAssembly`\n  - Supports `Windows`, `Linux` and `OS X`\n  - Supports `IOS` and `Android` (WIP)\n  - Supports `no_std` (WIP, partial)\n  - Никаких тяжелых зависимостей, таких как `BLAS`\n\n- **Надежность** 🔒\n\n  - Компилятор `Rust` защищает весь код\n  - Память, управляемая `Rust` для всех языковых библиотек, таких как `Python`\n  - Broad testing coverage\n\n- **Широкий охват тестирования** 🧮\n\n  - `Расстояние точечного продукта`\n    - ![equation](https://latex.codecogs.com/gif.latex?D%28x%2Cy%29%20%3D%20%5Csum%7B%28x*y%29%7D)\n  - `Евклидово расстояние`\n    - ![equation](https://latex.codecogs.com/gif.latex?D%28x%2Cy%29%20%3D%20%5Csqrt%7B%5Csum%7B%28x-y%29%5E2%7D%7D)\n  - `Манхэттен Расстояние`\n    - ![equation](https://latex.codecogs.com/gif.latex?D%28x%2Cy%29%20%3D%20%5Csum%7B%7C%28x-y%29%7C%7D)\n  - `Косинусное подобие`\n    - ![equation](https://latex.codecogs.com/gif.latex?D%28x%2Cy%29%20%3D%20%5Cfrac%7Bx%20*y%7D%7B%7C%7Cx%7C%7C*%7C%7Cy%7C%7C%7D)\n\n- **Продуктивный** ⭐\n  - Хорошо задокументированы\n  - Элегантный, простой и легкий в освоении API\n\n# Монтаж\n\n**`Rust`**\n\nin `Cargo.toml`\n\n```toml\n[dependencies]\nhora = \"0.1.1\"\n```\n\n**`Python`**\n\n```Bash\n$ pip install horapy\n```\n\n**`Javascript (WebAssembly)`**\n\n```Bash\n$ npm i horajs\n```\n\n**`Building from source`**\n\n```bash\n$ git clone https://github.com/hora-search/hora\n$ cargo build\n```\n\n# Контрольный показатель\n\n<img src=\"asset/fashion-mnist-784-euclidean_10_euclidean.png\"/>\n\nby `aws t2.medium (CPU: Intel(R) Xeon(R) CPU E5-2686 v4 @ 2.30GHz)` [more information](https://github.com/hora-search/ann-benchmarks)\n\n# Примеры\n\n**`Rust` Примеры** [[more info](https://github.com/hora-search/hora/tree/main/examples)]\n\n```Rust\nuse hora::core::ann_index::ANNIndex;\nuse rand::{thread_rng, Rng};\nuse rand_distr::{Distribution, Normal};\n\npub fn demo() {\n    let n = 1000;\n    let dimension = 64;\n\n    // make sample points\n    let mut samples = Vec::with_capacity(n);\n    let normal = Normal::new(0.0, 10.0).unwrap();\n    for _i in 0..n {\n        let mut sample = Vec::with_capacity(dimension);\n        for _j in 0..dimension {\n            sample.push(normal.sample(&mut rand::thread_rng()));\n        }\n        samples.push(sample);\n    }\n\n    // init index\n    let mut index = hora::index::hnsw_idx::HNSWIndex::<f32, usize>::new(\n        dimension,\n        &hora::index::hnsw_params::HNSWParams::<f32>::default(),\n    );\n    for (i, sample) in samples.iter().enumerate().take(n) {\n        // add point\n        index.add(sample, i).unwrap();\n    }\n    index.build(hora::core::metrics::Metric::Euclidean).unwrap();\n\n    let mut rng = thread_rng();\n    let target: usize = rng.gen_range(0..n);\n    // 523 has neighbors: [523, 762, 364, 268, 561, 231, 380, 817, 331, 246]\n    println!(\n        \"{:?} has neighbors: {:?}\",\n        target,\n        index.search(&samples[target], 10) // search for k nearest neighbors\n    );\n}\n```\n\n**`Python` Примеры** [[more info](https://github.com/hora-search/horapy)]\n\n```Python\nimport numpy as np\nfrom horapy import HNSWIndex\n\ndimension = 50\nn = 1000\n\n# init index instance\nindex = HNSWIndex(dimension, \"usize\")\n\nsamples = np.float32(np.random.rand(n, dimension))\nfor i in range(0, len(samples)):\n    # add node\n    index.add(np.float32(samples[i]), i)\n\nindex.build(\"euclidean\")  # build index\n\ntarget = np.random.randint(0, n)\n# 410 in Hora ANNIndex <HNSWIndexUsize> (dimension: 50, dtype: usize, max_item: 1000000, n_neigh: 32, n_neigh0: 64, ef_build: 20, ef_search: 500, has_deletion: False)\n# has neighbors: [410, 736, 65, 36, 631, 83, 111, 254, 990, 161]\nprint(\"{} in {} \\nhas neighbors: {}\".format(\n    target, index, index.search(samples[target], 10)))  # search\n\n```\n\n**`JavaScript` Примеры** [[more info](https://github.com/hora-search/hora-wasm)]\n\n```JavaScript\nimport * as horajs from \"horajs\";\n\nconst demo = () => {\n    const dimension = 50;\n    var bf_idx = horajs.BruteForceIndexUsize.new(dimension);\n    // var hnsw_idx = horajs.HNSWIndexUsize.new(dimension, 1000000, 32, 64, 20, 500, 16, false);\n    for (var i = 0; i < 1000; i++) {\n        var feature = [];\n        for (var j = 0; j < dimension; j++) {\n            feature.push(Math.random());\n        }\n        bf_idx.add(feature, i); // add point\n    }\n    bf_idx.build(\"euclidean\"); // build index\n    var feature = [];\n    for (var j = 0; j < dimension; j++) {\n        feature.push(Math.random());\n    }\n    console.log(\"bf result\", bf_idx.search(feature, 10)); //bf result Uint32Array(10) [704, 113, 358, 835, 408, 379, 117, 414, 808, 826]\n}\n\n(async () => {\n    await horajs.default();\n    await horajs.init_env();\n    demo();\n})();\n```\n\n**`Java` Примеры** [[more info](https://github.com/hora-search/hora-java)]\n\n```Java\npublic void demo() {\n    final int dimension = 2;\n    final float variance = 2.0f;\n    Random fRandom = new Random();\n\n    BruteForceIndex bruteforce_idx = new BruteForceIndex(dimension); // init index instance\n\n    List<float[]> tmp = new ArrayList<>();\n    for (int i = 0; i < 5; i++) {\n        for (int p = 0; p < 10; p++) {\n            float[] features = new float[dimension];\n            for (int j = 0; j < dimension; j++) {\n                features[j] = getGaussian(fRandom, (float) (i * 10), variance);\n            }\n            bruteforce_idx.add(\"bf\", features, i * 10 + p); // add point\n            tmp.add(features);\n          }\n    }\n    bruteforce_idx.build(\"bf\", \"euclidean\"); // build index\n\n    int search_index = fRandom.nextInt(tmp.size());\n    // nearest neighbor search\n    int[] result = bruteforce_idx.search(\"bf\", 10, tmp.get(search_index));\n    // [main] INFO com.hora.app.ANNIndexTest  - demo bruteforce_idx[7, 8, 0, 5, 3, 9, 1, 6, 4, 2]\n    log.info(\"demo bruteforce_idx\" + Arrays.toString(result));\n}\n\nprivate static float getGaussian(Random fRandom, float aMean, float variance) {\n    float r = (float) fRandom.nextGaussian();\n    return aMean + r * variance;\n}\n```\n\n# Дорожная карта\n\n- [ ] Полное тестовое покрытие\n- [ ] Внедрить алгоритм [EFANNA](http://arxiv.org/abs/1609.07228) для более быстрого построения графа KNN.\n- [ ] Поддержка`Swift` и пример развертывания `iOS` / `macOS`\n- [ ] Поддержка `R`\n- [ ] поддержка `mmap`\n\n# Связанные проекты и сравнение\n\n- [Faiss](https://github.com/facebookresearch/faiss), [Annoy](https://github.com/spotify/annoy), [ScaNN](https://github.com/google-research/google-research/tree/master/scann):\n\n  - **Реализация `Hora` сильно вдохновлена этими библиотеками.**\n  - `Faiss` больше ориентирован на сценарий GPU, а `Hora` легче, чем `Faiss`.\n  - `Hora` рассчитывает поддерживать больше языков, и все, что связано с производительностью, будет реализовано Rust🦀.\n  - `Annoy` поддерживает только алгоритм `LSH (Random Projection)`.\n  - `ScaNN` и `Faiss` менее удобны для пользователя (например, отсутствие документации).\n  - Hora is **ALL IN RUST** 🦀.\n\n- [Milvus](https://github.com/milvus-io/milvus), [Vald](https://github.com/vdaas/vald), [Jina AI](https://github.com/jina-ai/jina)\n  - `Milvus` и `Vald` также поддерживают несколько языков, но служат в качестве службы, а не библиотеки.\n  - `Milvus` построен на некоторых библиотеках, таких как `Faiss`, а `Hora` - это библиотека со всеми реализованными алгоритмами.\n\n# Способствовать\n\n**We appreciate your help!**\n\nМы рады, что вы участвуете, приветствуются любые взносы, включая документацию и тесты.\nВы можете создать `Pull Request` или `Issue` на GitHub, и мы рассмотрим его как можно скорее.\n\nМы используем проблемы GitHub для отслеживания предложений и ошибок.\n\n#### Clone the repo\n\n```bash\ngit clone https://github.com/hora-search/hora\n```\n\n#### Build\n\n```bash\ncargo build\n```\n\n#### Test\n\n```bash\ncargo test --lib\n```\n\n#### Try the changes\n\n```bash\ncd examples\ncargo run\n```\n\n# License\n\nThe entire repository is licensed under the [Apache License](https://github.com/hora-search/hora/blob/main/LICENSE).\n"
        },
        {
          "name": "asset",
          "type": "tree",
          "content": null
        },
        {
          "name": "benches",
          "type": "tree",
          "content": null
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}