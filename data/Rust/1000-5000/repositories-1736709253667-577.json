{
  "metadata": {
    "timestamp": 1736709253667,
    "page": 577,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjU4MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "Keats/jsonwebtoken",
      "stars": 1746,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 0.18359375,
          "content": "root = true\n\n[*]\nend_of_line = lf\ncharset = utf-8\ntrim_trailing_whitespace = true\ninsert_final_newline = true\nindent_style = space\nindent_size = 4\n\n[*.md]\ntrim_trailing_whitespace = false\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.0322265625,
          "content": "target\nCargo.lock\n.idea/\n.vscode\n"
        },
        {
          "name": ".travis.yml",
          "type": "blob",
          "size": 0.0947265625,
          "content": "language: rust\nrust:\n  - stable\n  - beta\n  - nightly\n\nsudo: false\n\nnotifications:\n  email: false\n"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 4.20703125,
          "content": "# Changelog\n\n## 9.3.0 (2024-03-12)\n\n- Add `Validation.reject_tokens_expiring_in_less_than`, the opposite of leeway\n\n## 9.2.0 (2023-12-01)\n\n- Add an option to not validate `aud` in the Validation struct\n- Get the current timestamp in wasm without using std\n- Update ring to 0.17\n\n## 9.1.0 (2023-10-21)\n\n- Supports deserialization of unsupported algorithms for JWKs\n\n\n## 9.0.0 (2023-10-16)\n\n- Update ring\n- Rejects JWTs containing audiences when the Validation doesn't contain any\n\n## 8.3.0 (2023-03-15)\n\n- Update base64\n- Implement Clone for TokenData<T> if T impls Clone\n\n\n## 8.2.0 (2022-12-03)\n\n- Add DecodingKey::from_jwk\n- Can now use PEM certificates if you have the `use_pem` feature enabled\n\n\n## 8.1.1 (2022-06-17)\n\n- Fix invalid field name on OctetKeyParameters\n\n## 8.1.0 (2022-04-12)\n\n- Make optional fields in the spec really optional\n- Implements `Hash` for `Header`\n\n## 8.0.1 (2022-02-03)\n\n- Fix documentation of leeway\n\n\n## 8.0.0 (2022-02-02)\n \n- Add EdDSA algorithm\n- `sign`/`verify` now takes a `&[u8]` instead of `&str` to be more flexible\n- `DecodingKey` now own its data\n- Remove deprecated `dangerous_unsafe_decode`\n- `Validation::iss` is now a `HashSet` instead of a single value\n- `decode` will now error if `Validation::algorithms` is empty\n- Add JWKs types for easy interop with various Oauth provider, see `examples/auth0.rs` for an example\n- Removed `decode_*` functions in favour of using the `Validation` struct\n- Allow float values for `exp` and `nbf`, yes it's in the spec... floats will be rounded and converted to u64\n- Error now implements Clone/Eq\n- Change default leeway from 0s to 60s\n- Add `Validation::require_spec_claims` to validate presence of the spec claims\n- Add default feature for pem decoding named `use_pem` that can be disabled to avoid 2 dependencies\n\n## 7.2.0 (2020-06-30)\n\n- Add `dangerous_insecure_decode` to replace `dangerous_unsafe_decode`, which is now deprecated\n- Add `dangerous_insecure_decode_with_validation`\n\n## 7.1.2 (2020-06-16)\n\n- Derive `Hash` for `Header` and `Algorithm`\n\n## 7.1.1 (2020-06-09)\n\n- Update dependencies\n\n## 7.1.0 (2020-03-01)\n\n- Add `into_static` to `DecodingKey` for easier re-use\n\n# 7.0.0 (2020-01-28)\n\n- Add support for PS256, PS384 and PS512\n- Add support for verifying with modulus/exponent components for RSA\n- Update to 2018 edition\n- Changed aud field type in Validation to `Option<HashSet<String>>`.  Audience \n  validation now tests for \"any-of-these\" audience membership.\n- Add support for keys in PEM format\n- Add EncodingKey/DecodingKey API to improve performance and UX\n\n## 6.0.1 (2019-05-10)\n\n- Fix Algorithm mapping in FromStr for RSA\n\n## 6.0.0 (2019-04-21)\n\n- Update Ring to 0.14\n- Remove `iat` check to match the JWT spec\n- Add ES256 and ES384 signing decoding\n\n## 5.0.1 (2018-09-10)\n\n- Add implementation of FromStr for Algorithm\n\n## 5.0.0 (2018-08-13)\n\n- Update ring\n- Change error handling to be based on simple struct/enum rather than error-chain\n- Fix validations not being called properly in some cases\n- Default validation is not checking `iat` and `nbf` anymore\n\n## 4.0.1 (2018-03-19)\n\n- Add method to decode a token without signature verification\n\n## 4.0.0 (2017-11-22)\n\n### Breaking changes\n\n- Make it mandatory to specify the algorithm in `decode`\n\n## 3.0.0 (2017-09-08)\n\n### Breaking changes\n- Remove `validate_signature` from `Validation`, use `decode_header` instead if you don't know the alg used\n- Make `typ` optional in header, some providers apparently don't use it\n\n### Others\n\n- Update ring & error-chain\n- Fix documentation about `leeway` being in seconds and not milliseconds\n- Add `decode_header` to only decode the header: replaces the use case of `validate_signature`\n\n## 2.0.3 (2017-07-18)\n\n- Make `TokenData` public\n\n## 2.0.2 (2017-06-24)\n\n- Update ring & chrono\n\n## 2.0.1 (2017-05-09)\n\n- Update ring\n\n## 2.0.0 (2017-04-23)\n\n- Use Serde instead of rustc_serialize\n- Add RSA support\n- API overhaul, see README for new usage\n- Add validation\n- Update all dependencies\n\n## Previous\n\n- 1.1.7: update ring\n- 1.1.6: update ring\n- 1.1.5: update ring version\n- 1.1.4: use ring instead of rust-crypto\n- 1.1.3: Make sign and verify public\n- 1.1.2: Update rust-crypto to 0.2.35\n- 1.1.1: Don't serialize empty fields in header\n- 1.1.0: Impl Error for jsonwebtoken errors\n- 1.0: Initial release\n"
        },
        {
          "name": "Cargo.toml",
          "type": "blob",
          "size": 1.609375,
          "content": "[package]\nname = \"jsonwebtoken\"\nversion = \"9.3.0\"\nauthors = [\"Vincent Prouillet <hello@vincentprouillet.com>\"]\nlicense = \"MIT\"\nreadme = \"README.md\"\ndescription = \"Create and decode JWTs in a strongly typed way.\"\nhomepage = \"https://github.com/Keats/jsonwebtoken\"\nrepository = \"https://github.com/Keats/jsonwebtoken\"\nkeywords = [\"jwt\", \"api\", \"token\", \"jwk\"]\nedition = \"2021\"\ninclude = [\n    \"src/**/*\",\n    \"benches/**/*\",\n    \"tests/**/*\",\n    \"LICENSE\",\n    \"README.md\",\n    \"CHANGELOG.md\",\n]\nrust-version = \"1.73.0\"\n\n[dependencies]\nserde_json = \"1.0\"\nserde = { version = \"1.0\", features = [\"derive\"] }\nbase64 = \"0.22\"\n# For PEM decoding\npem = { version = \"3\", optional = true }\nsimple_asn1 = { version = \"0.6\", optional = true }\n\n[target.'cfg(not(target_arch = \"wasm32\"))'.dependencies]\nring = { version = \"0.17.4\", features = [\"std\"] }\n\n[target.'cfg(target_arch = \"wasm32\")'.dependencies]\njs-sys = \"0.3\"\nring = { version = \"0.17.4\", features = [\"std\", \"wasm32_unknown_unknown_js\"] }\n\n[dev-dependencies]\nwasm-bindgen-test = \"0.3.1\"\n\n[target.'cfg(not(all(target_arch = \"wasm32\", not(any(target_os = \"emscripten\", target_os = \"wasi\")))))'.dev-dependencies]\n# For the custom time example\ntime = \"0.3\"\ncriterion = \"0.4\"\n\n[target.'cfg(all(target_arch = \"wasm32\", not(any(target_os = \"emscripten\", target_os = \"wasi\"))))'.dev-dependencies]\n# For the custom time example\ntime = { version = \"0.3\", features = [\"wasm-bindgen\"] }\ncriterion = { version = \"0.4\", default-features = false }\n\n[features]\ndefault = [\"use_pem\"]\nuse_pem = [\"pem\", \"simple_asn1\"]\n\n[[bench]]\nname = \"jwt\"\nharness = false\n\n[badges]\nmaintenance = { status = \"passively-maintained\" }\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.05859375,
          "content": "The MIT License (MIT)\n\nCopyright (c) 2015 Vincent Prouillet\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 6.2802734375,
          "content": "# jsonwebtoken\n\n[API documentation on docs.rs](https://docs.rs/jsonwebtoken/)\n\nSee [JSON Web Tokens](https://en.wikipedia.org/wiki/JSON_Web_Token) for more information on what JSON Web Tokens are.\n\n## Installation\nAdd the following to Cargo.toml:\n\n```toml\njsonwebtoken = \"9\"\n# If you do not need pem decoding, you can disable the default feature `use_pem` that way:\n# jsonwebtoken = {version = \"9\", default-features = false }\nserde = {version = \"1.0\", features = [\"derive\"] }\n```\n\nThe minimum required Rust version (MSRV) is specified in the `rust-version` field in this project's [Cargo.toml](Cargo.toml).\n\n## Algorithms\nThis library currently supports the following:\n\n- HS256\n- HS384\n- HS512\n- RS256\n- RS384\n- RS512\n- PS256\n- PS384\n- PS512\n- ES256\n- ES384\n- EdDSA\n\n\n## How to use\nComplete examples are available in the examples directory: a basic one and one with a custom header.\n\nIn terms of imports and structs:\n```rust\nuse serde::{Serialize, Deserialize};\nuse jsonwebtoken::{encode, decode, Header, Algorithm, Validation, EncodingKey, DecodingKey};\n\n/// Our claims struct, it needs to derive `Serialize` and/or `Deserialize`\n#[derive(Debug, Serialize, Deserialize)]\nstruct Claims {\n    sub: String,\n    company: String,\n    exp: usize,\n}\n```\n\n### Claims\nThe claims fields which can be validated. (see [validation](#validation))\n\n```rust\n#[derive(Debug, Serialize, Deserialize)]\nstruct Claims {\n    aud: String,         // Optional. Audience\n    exp: usize,          // Required (validate_exp defaults to true in validation). Expiration time (as UTC timestamp)\n    iat: usize,          // Optional. Issued at (as UTC timestamp)\n    iss: String,         // Optional. Issuer\n    nbf: usize,          // Optional. Not Before (as UTC timestamp)\n    sub: String,         // Optional. Subject (whom token refers to)\n}\n```\n\n### Header\nThe default algorithm is HS256, which uses a shared secret.\n\n```rust\nlet token = encode(&Header::default(), &my_claims, &EncodingKey::from_secret(\"secret\".as_ref()))?;\n```\n\n#### Custom headers & changing algorithm\nAll the parameters from the RFC are supported but the default header only has `typ` and `alg` set.\nIf you want to set the `kid` parameter or change the algorithm for example:\n\n```rust\nlet mut header = Header::new(Algorithm::HS512);\nheader.kid = Some(\"blabla\".to_owned());\nlet token = encode(&header, &my_claims, &EncodingKey::from_secret(\"secret\".as_ref()))?;\n```\nLook at `examples/custom_header.rs` for a full working example.\n\n### Encoding\n\n```rust\n// HS256\nlet token = encode(&Header::default(), &my_claims, &EncodingKey::from_secret(\"secret\".as_ref()))?;\n// RSA\nlet token = encode(&Header::new(Algorithm::RS256), &my_claims, &EncodingKey::from_rsa_pem(include_bytes!(\"privkey.pem\"))?)?;\n```\nEncoding a JWT takes 3 parameters:\n\n- a header: the `Header` struct\n- some claims: your own struct\n- a key/secret\n\nWhen using HS256, HS384, or HS512, the key is always a shared secret like in the example above. When using\nRSA/EC, the key should always be the content of the private key in PEM or DER format.\n\nIf your key is in PEM format, it is better performance wise to generate the `EncodingKey` once in a `lazy_static` or\nsomething similar and reuse it.\n\n### Decoding\n\n```rust\n// `token` is a struct with 2 fields: `header` and `claims` where `claims` is your own struct.\nlet token = decode::<Claims>(&token, &DecodingKey::from_secret(\"secret\".as_ref()), &Validation::default())?;\n```\n`decode` can result in errors for a variety of reasons:\n\n- the token or its signature is invalid\n- the token had invalid base64\n- validation of at least one reserved claim failed\n\nAs with encoding, when using HS256, HS384, or HS512, the key is always a shared secret like in the example above. When using\nRSA/EC, the key should always be the content of the public key in PEM (or certificate in this case) or DER format.\n\nIn some cases, for example if you don't know the algorithm used or need to grab the `kid`, you can choose to decode only the header:\n\n```rust\nlet header = decode_header(&token)?;\n```\n\nThis does not perform any signature verification or validate the token claims.\n\nYou can also decode a token using the public key components of a RSA key in base64 format.\nThe main use-case is for JWK where your public key is in a JSON format like so:\n\n```json\n{\n   \"kty\":\"RSA\",\n   \"e\":\"AQAB\",\n   \"kid\":\"6a7a119f-0876-4f7e-8d0f-bf3ea1391dd8\",\n   \"n\":\"yRE6rHuNR0QbHO3H3Kt2pOKGVhQqGZXInOduQNxXzuKlvQTLUTv4l4sggh5_CYYi_cvI-SXVT9kPWSKXxJXBXd_4LkvcPuUakBoAkfh-eiFVMh2VrUyWyj3MFl0HTVF9KwRXLAcwkREiS3npThHRyIxuy0ZMeZfxVL5arMhw1SRELB8HoGfG_AtH89BIE9jDBHZ9dLelK9a184zAf8LwoPLxvJb3Il5nncqPcSfKDDodMFBIMc4lQzDKL5gvmiXLXB1AGLm8KBjfE8s3L5xqi-yUod-j8MtvIj812dkS4QMiRVN_by2h3ZY8LYVGrqZXZTcgn2ujn8uKjXLZVD5TdQ\"\n}\n```\n\n```rust\n// `token` is a struct with 2 fields: `header` and `claims` where `claims` is your own struct.\nlet token = decode::<Claims>(&token, &DecodingKey::from_rsa_components(jwk[\"n\"], jwk[\"e\"]), &Validation::new(Algorithm::RS256))?;\n```\n\nIf your key is in PEM format, it is better performance wise to generate the `DecodingKey` once in a `lazy_static` or\nsomething similar and reuse it.\n\n### Convert SEC1 private key to PKCS8\n`jsonwebtoken` currently only supports PKCS8 format for private EC keys. If your key has `BEGIN EC PRIVATE KEY` at the top,\nthis is a SEC1 type and can be converted to PKCS8 like so:\n\n```bash\nopenssl pkcs8 -topk8 -nocrypt -in sec1.pem -out pkcs8.pem\n```\n\n\n## Validation\nThis library automatically validates the `exp` claim, and `nbf` is validated if present. You can also validate the `sub`, `iss`, and `aud` but\nthose require setting the expected values in the `Validation` struct. In the case of `aud`, if there is a value set in the token but\nnot in the `Validation`, the token will be rejected.\n\nValidation is only made on present fields in the claims. It is possible to define the required claims, hence verifying that a JWT has a value for each of these claims before it is considered for validation. The required claims can be set in the `Validation` struct. The default option requires the `exp` claim to be present.\n\nSince validating time fields is always a bit tricky due to clock skew,\nyou can add some leeway to the `iat`, `exp`, and `nbf` validation by setting the `leeway` field.\n\nLast but not least, you will need to set the algorithm(s) allowed for this token if you are not using `HS256`.\n\nLook at `examples/validation.rs` for a full working example.\n"
        },
        {
          "name": "benches",
          "type": "tree",
          "content": null
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "rustfmt.toml",
          "type": "blob",
          "size": 0.0283203125,
          "content": "use_small_heuristics = \"max\"\n"
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}