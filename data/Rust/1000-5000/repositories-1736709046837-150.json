{
  "metadata": {
    "timestamp": 1736709046837,
    "page": 150,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjE1MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "cberner/redb",
      "stars": 3479,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".cargo",
          "type": "tree",
          "content": null
        },
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 0.1650390625,
          "content": "root = true\n\n[*]\ncharset = utf-8\nend_of_line = lf\nindent_size = 4\nindent_style = space\ninsert_final_newline = true\nmax_line_length = 100\ntrim_trailing_whitespace = true\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.447265625,
          "content": "# Generated by Cargo\n# will have compiled files and executables\n/target/\n\n# Remove Cargo.lock from gitignore if creating an executable, leave it for libraries\n# More information here https://doc.rust-lang.org/cargo/guide/cargo-toml-vs-cargo-lock.html\nCargo.lock\n\n# These are backup files generated by rustfmt\n**/*.rs.bk\n\n# IntelliJ\n.idea/\n**/*.iml\n\n\n**/__pycache__\n**/*.pyc\n\n# Profiling\nperf.data*\nflamegraph.svg\n\n# benchmark and test temporary files\n/.tmp*\n"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 18.6611328125,
          "content": "# redb - Changelog\n\n## 2.4.0 - 2024-12-30\n* Add `Database::cache_stats()`\n* Fix `open()` and `create()` to return `InvalidData` when they are called on a database file\n  that is not a valid redb database\n* Significantly speed up `restore_savepoint()`. The time is takes now scales with the change delta\n  since the savepoint was captured, rather than the size of the database file\n* `DatabaseStats::fragmented_bytes()` is now more accurate\n\n## 2.3.0 - 2024-12-10\n* Add `WriteTransaction::set_two_phase_commit()`\n* Add `WriteTransaction::set_quick_repair()` which enables a faster repair mechanism at the cost of\n  slower transaction commits\n* `Durability::Paranoid` is now deprecated. Use `set_two_phase_commit(true)` instead\n* Fix various bugs when repairing the database after an unclean shutdown. These could result in\n  panics, leaked space in the database file, or database corruption\n\n## 2.2.0 - 2024-10-27\n* Implement `TableHandle` for `ReadOnlyTable`\n* Fix bug in write cache, which caused pages to be evicted randomly. Pages are now evicted based on\n  how recently they have been accessed\n\n## 2.1.4 - 2024-10-10\n* Optimize `first()` and `last()` to be almost 2x faster\n* Improve in-memory cache algorithm to resolve edge cases where certain pages could become\n  uncacheable under cache pressure\n* Fix bug in read cache where the read cache could become disabled. This was likely to occur in\n  multithreaded workloads when the read cache was smaller than the database file. This bug lead to\n  5-10x performance degradations for some workloads\n\n## 2.1.3 - 2024-09-14\n* Significant performance optimizations to `compact()`\n* Fix some additional cases where `compact()` did not fully compact the database\n* Fix a panic that could occur in `commit()` or `abort()` after an IO error. `StorageError::PreviousIo` is now returned\n* Fix a potential panic that could occur when repairing the database after a crash\n\n## 2.1.2 - 2024-08-25\n### Major fixes:\n* Fix leak of database space that could occur when calling `restore_savepoint()`\n* Fix leak of database space when calling `delete_multimap_table()`\n* Fix database corruption which could occur when restoring a savepoint. This edge case is rare,\n  and could only occur if the database was less than approximately 4TiB when the savepoint was\n  created, and greater than 4TiB when the savepoint was restored\n* Fix edge case where a transient I/O error that occurred during transaction commit, but then did\n  not reoccur when the `Database` was dropped, could cause database corruption\n\n**Important: If your application has called `restore_savepoint()`, `delete_multimap_table()`,\nor you suspect it may have experienced a transient I/O error during transaction commit.\nIt is recommended that you run `check_integrity()` after upgrading to this version.\nThis will both detect corruption and clean up any leaked space.**\n\n### Other changes and fixes:\n* Optimize page freeing to reduce the size of the database file\n* Fix several cases where `check_integrity()` would return `Ok(false)` instead of `Ok(true)`\n* Fix some cases where `compact()` did not fully compact the database\n* Make the metadata overhead returned by `WriteTransaction::stats()` more accurate\n* Return `StorageError::ValueTooLarge` when a key-value pair exceeds a total of 3.75GiB.\n  Previously, a panic would occur for key-value pairs that were approximately 4GiB.\n* Downgrade several `info!` log messages to `debug!`\n* Improve documentation\n\n## 2.1.1 - 2024-06-09\n* Fix panic that occurred when calling `compact()` when a read transaction was in progress\n* Fix `ReadTransaction::close()` to return `Ok` when it succeeds\n* Performance optimizations\n\n## 2.1.0 - 2024-04-20\n* Implement `Key` and `Value` for `String`\n* Allow users to implement `ReadableTableMetadata`, `ReadableTable`, and `ReadableMultimapTable`\n\n## 2.0.0 - 2024-03-22\n\n### Major file format change\n2.0.0 uses a new file format that optimizes `len()` to be constant time. This means that it is not\nbackwards compatible with 1.x. To upgrade, consider using a pattern like that shown in the\n[upgrade_v1_to_v2](https://github.com/cberner/redb/blob/222a37f4600588261b0983eebcd074bb69d6e5a0/tests/backward_compatibility.rs#L282-L299) test.\n\n### Other changes\n* `check_integrity()` now returns a `DatabaseError` instead of a `StorageError`\n* Table metadata methods have moved to a new `ReadableTableMetadata` trait\n* Rename `RedbKey` to `Key`\n* Rename `RedbValue` to `Value`\n* Remove lifetimes from read-only tables\n* Remove lifetime from `WriteTransaction` and `ReadTransaction`\n* Remove `drain()` and `drain_filter()` from `Table`. Use `retain`, `retain_in`, `extract_if` or `extract_from_if` instead\n* impl `Clone` for `Range`\n* Add support for `[T;N]` as a `Value` or `Key` as appropriate for the type `T`\n* Add `len()` and `is_empty()` to `MultimapValue`\n* Add `retain()` and `retain_in()` to `Table`\n* Add `extract_if()` and `extract_from_if()` to `Table`\n* Add `range()` returning a `Range` with the `'static` lifetime to read-only tables\n* Add `get()` returning a range with the `'static` lifetime to read-only tables\n* Add `close()` method to `ReadTransaction`\n\n## 1.5.1 - 2024-03-16\n* Fix `check_integrity()` so that it returns `Ok(true)` when no repairs were preformed. Previously,\n  it returned `Ok(false)`\n\n## 1.5.0 - 2024-01-15\n* Export `TableStats` type\n* Export `MutInPlaceValue` which allows custom types to support `insert_reserve()`\n* Add untyped table API which allows metadata, such as table stats, to be retrieved for at table\n  without knowing its type at compile time\n* Fix compilation on uncommon platforms (those other than Unix and Windows)\n\n## 1.4.0 - 2023-11-21\n* Add `Builder::set_repair_callback()` which can be used to set a callback function that will be invoked if the database needs repair while opening it.\n* Add support for custom storage backends. This is done by implementing the `StorageBackend` trait and\n  using the `Builder::create_with_backend` function. This allows the database to be stored in a location other\n  than the filesystem\n* Implement `RedbKey` and `RedbValue` for `char`\n* Implement `RedbKey` and `RedbValue` for `bool`\n* Implement `TableHandle` for `Table`\n* Implement `MultimapTableHandle` for `MultimapTable`\n* Fix panic that could occur when inserting a large number of fixed width values into a table within a single transaction\n* Fix panic when calling `delete_table()` on a table that is already open\n* Improve performance for fixed width types\n* Support additional platforms\n\n## 1.3.0 - 2023-10-22\n* Implement `RedbKey` for `Option<T>`\n* Implement `RedbValue` for `Vec<T>`\n* Implement `Debug` for tables\n* Add `ReadableTable::first()` and `last()` which retrieve the first and last key-value pairs, respectively`\n* Reduce lock contention for mixed read-write workloads\n* Documentation improvements\n\n## 1.2.0 - 2023-09-24\n* Add `Builder::create_file()` which does the same thing as `create()` but\n  takes a `File` instead of a path\n* Add `stats()` to tables which provides informational statistics on the table's storage\n* Fix `WriteTransaction::stats()` to correctly count the storage used by multi-map tables\n* Fix panics that could occur when operating on savepoints concurrently from multiple threads\n  on the same `WriteTransaction`\n* Implement `Send` for `WriteTransaction`\n* Change MSRV to 1.66\n* Performance optimizations\n\n## 1.1.0 - 2023-08-20\n* Fix panic when calling `compact()` on certain databases\n* Fix panic when calling `compact()` when an ephemeral `Savepoint` existed\n* Improve performance of `compact()`\n* Relax lifetime requirements on arguments to `insert()`\n\n## 1.0.5 - 2023-07-16\n* Fix a rare panic when recovering a database file after a crash\n* Minor performance improvement to write heavy workloads\n\n## 1.0.4 - 2023-07-01\n* Fix serious data corruption issue when calling `drain()` or `drain_filter()` on a `Table` that had\n  uncommitted data\n\n## 1.0.3 - 2023-06-30\n* Fix panic when re-opening databases of certain, small, sizes\n\n## 1.0.2 - 2023-06-29\n* Fix panic when recovering some databases after a forceful shutdown\n* Fix panic when recovering databases with multimaps that have fixed width values after a forceful shutdown\n\n## 1.0.1 - 2023-06-26\n* Fix panic that could occur after an IO error when reopening a database\n* Fix panic that could occur after an IO error when opening a table\n* Improve error message when opening a table twice to include a more meaningful line number\n* Performance improvements\n\n## 1.0.0 - 2023-06-16\n### Announcement\nredb has reached its first stable release! The file format is now gauranteed to be backward compatible,\nand the API is stable. I've run pretty extensive fuzz testing, but please report any bugs you encounter.\n\nThe following features are complete:\n* MVCC with a single `WriteTransaction` and multiple `ReadTransaction`s\n* Zero-copy reads\n* ACID semantics, including non-durable transactions which only sacrifice Durability\n* Savepoints which allow the state of the database to be captured and restored later\n\n#### Changes from 0.22.0:\n* Stabilize file format\n* Improve performance of `restore_savepoint()`\n\n## 0.22.0 - 2023-06-12\n* Fix panic while repairing a database file after crash\n* Fix rare panic in `restore_savepoint()`\n\n## 0.21.0 - 2023-06-09\n* Improve cache heuristic. This asymptotically improves performance on large databases. Benchmarks show 30% to 5x+\n* Fix rare crash that could occur under certain conditions when inserting values > 2GiB\n* Fix crash when growing database beyond 4TiB\n* Fix panic when repairing a database containing a multimap table with fixed width values\n* Performance optimizations\n* File format simplifications\n\n## 0.20.0 - 2023-05-30\n* Export `TransactionError` and `CommitError`. These were unintentionally private\n* Implement `std::error::Error` for all error enums\n\n## 0.19.0 - 2023-05-29\n* Remove `Clone` bound from range argument type on `drain()` and `drain_filter()`\n* File format changes to improve future extensibility\n\n## 0.18.0 - 2023-05-28\n* Improve errors to be more granular. `Error` has been split into multiple different `enum`s, which\n  can all be implicitly converted back to `Error` for convenience\n* Rename `savepoint()` to `ephemeral_savepoint()`\n* Add support for persistent savepoints. These persist across database restarts and must be explicitly\n  released\n* Optimize `restore_savepoint()` to be ~30x faster\n* Add experimental support for WASI. This requires nightly\n* Implement `RedbKey` for `()`\n* Fix some rare crash and data corruption bugs\n\n## 0.17.0 - 2023-05-09\n* Enforce a limit of 3GiB on keys & values\n* Fix database corruption bug that could occur if a `Durability::None` commit was made,\n  followed by a durable commit and the durable commit crashed or encountered an I/O error during `commit()`\n* Fix panic when re-openning a database file, when the process that last had it open had crashed\n* Fix several bugs where an I/O error during `commit()` could cause a panic instead of returning an `Err`\n* Change `length` argument to `insert_reserve()` to `u32`\n* Change `Table::len()` to return `u64`\n* Change width of most fields in `DatabaseStats` to `u64`\n* Remove `K` type parameter from `AccessGuardMut`\n* Add `Database::compact()` which compacts the database file\n* Performance optimizations\n\n## 0.16.0 - 2023-04-28\n* Combine `Builder::set_read_cache_size()` and `Builder::set_write_cache_size()` into a single,\n  `Builder::set_cache_size()` setting\n* Relax lifetime constraints on read methods on tables\n* Optimizations to `Savepoint`\n\n## 0.15.0 - 2023-04-09\n* Add `Database::check_integrity()` to explicitly run repair process (it is still always run if needed on db open)\n* Change `list_tables()` to return a `TableHandle`\n* Change `delete_table()` to take a `TableHandle`\n* Make `insert_reserve()` API signature type safe\n* Change all iterators to return `Result` and propagate I/O errors\n* Replace `WriteStrategy` with `Durability::Paranoid`\n* Remove `Builder::set_initial_size()`\n* Enable db file shrinking on Windows\n* Performance optimizations\n\n## 0.14.0 - 2023-03-26\n* Remove `Builder::create_mmapped()` and `Builder::open_mmapped()`. The mmap backend has been removed\n  because it was infeasible to prove that it was sound. This makes the redb API entirely safe,\n  and the remaining `File` based backed is within a factor of ~2x on all workloads that I've benchmarked\n* Make `Table` implement `Send`. It is now possible to insert into multiple `Table`s concurrently\n* Expose `AccessGuardMut`, `Drain` and `DrainFilter` in the public API\n* Rename `RangeIter` to `Range`\n* Rename`MultimapRangeIter` to `MultimapRange`\n* Rename `MultimapValueIter` to `MultimapValue`\n* Performance optimizations\n\n## 0.13.0 - 2023-02-05\n* Fix a major data corruption issue that was introduced in version 0.12.0. It caused databases\n  greater than ~4GB to become irrecoverably corrupted due to an integer overflow in `PageNumber::address_range`\n  that was introduced by commit `b2c44a824d1ba69f526a1a75c56ae8484bae7248`\n* Add `drain_filter()` to `Table`\n* Make key and value type bounds more clear for tables\n\n## 0.12.1 - 2023-01-22\n* Fix `open()` on platforms with OS page size != 4KiB\n* Relax lifetime requirements on argument to `range()` and `drain()`\n\n## 0.12.0 - 2023-01-21\n* Add `pop_first()` and `pop_last()` to `Table`\n* Add `drain()` to `Table`\n* Add support for `Option<T>` as a value type\n* Add support for user defined key and value types. Users must implement `RedbKey` and/or `RedbValue`\n* Change `get()`, `insert()`, `remove()`...etc to take arguments of type `impl Borrow<SelfType>`\n* Return `Error::UpgradeRequired` when opening a file with an outdated file format\n* Improve support for 32bit platforms\n* Performance optimizations\n\n## 0.11.0 - 2022-12-26\n* Remove `[u8]` and `str` type support. Use `&[u8]` and `&str` instead.\n* Change `get()`, `range()` and several other methods to return `AccessGuard`.\n* Rename `AccessGuard::to_value()` to `value()`\n* Add a non-mmap based backend which is now the default. This makes `Database::create()` and\n  `Database::open()` safe, but has worse performance in some cases. The mmap backend is available\n  via `create_mmapped()`/`open_mmapped()`. There is no difference in the file format, so applications\n  can switch from one backend to the other.\n* Better handling of fsync failures\n\n## 0.10.0 - 2022-11-23\n* Remove maximum database size argument from `create()`. Databases are now unbounded in size\n* Reduce address space usage on Windows\n* Remove `set_dynamic_growth()`\n* Add `set_initial_size()` to `Builder`\n* Optimize cleanup of deleted pages. This resolves a performance issue where openning a Database\n  or performing a small transaction, could be slow if the last committed transaction deleted a large\n  number of pages\n* Remove `set_page_size()`. 4kB pages are always used now\n* Add `iter()` method to `Table` and `MultimapTable`\n* Fix various lifetime issues with type that had a lifetime, such as `&str` and `(&[u8], u64)`\n\n## 0.9.0 - 2022-11-05\n* Add support for dynamic file growth on Windows\n* Add support for tuple types as keys and values\n* Remove `Builder::set_region_size`\n* Save lifetime from `Savepoint`\n* Fix crash when using `create()` to open an existing database created with `WriteStrategy::TwoPhase`\n* Fix rare crash when writing a mix of small and very large values into the same table\n* Performance optimizations\n\n## 0.8.0 - 2022-10-18\n* Performance improvements for database files that are too large to fit in RAM\n* Fix deadlock in concurrent calls to `savepoint()` and `restore_savepoint()`\n* Fix crash if `restore_savepoint()` failed\n* Move `savepoint()` and `restore_savepoint()` methods to `WriteTransaction`\n* Implement `Iterator` for the types returned from `range()` and `remove_all()`\n\n## 0.7.0 - 2022-09-25\n* Add support for Windows\n* Add `Database::set_write_strategy` which allows the `WriteStrategy` of the database to be changed after creation\n* Make `Database::begin_write` block, instead of panic'ing, if there is another write already in progress\n* Add `Database::savepoint` and `Database::restore_savepoint` which can be used to snapshot and rollback the database\n* Rename `DatabaseBuilder` to `Builder`\n* Performance optimizations for large databases\n\n## 0.6.1 - 2022-09-11\n* Fix crash when `Database::open()` was called on a database that had been created with `WriteStrategy::TwoPhase`\n* Change default region size on 32bit platforms to 4GiB\n\n## 0.6.0 - 2022-09-10\n* Return `Err` instead of panic'ing when opening a database file with an incompatible file format version\n* Many optimizations to the file format, and progress toward stabilizing it\n* Fix race between read & write transactions, which could cause reads to return corrupted data\n* Better document the different `WriteStrategy`s\n* Fix panic when recovering a database that was uncleanly shutdown, which had been created with `WriteStrategy::Checksum` (which is the default)\n* Fix panic when using `insert_reserve()` in certain cases\n\n## 0.5.0 - 2022-08-06\n* Optimize `MultimapTable` storage format to use `O(k * log(n_k) + v * log(n_v / n_k))` space instead of `O(k * log(n_k + n_v) + v * log(n_k + n_v))` space,\n  where k is the size of the stored keys, v is the size of the stored values, n_k is the number of stored keys,\n  n_v is the number of stored values\n* Fix compilation errors for 32bit x86 targets\n* Add support for the unit type, `()`, as a value\n* Return an error when attempting to open the same database file for writing in multiple locations, concurrently\n* More robust handling of fsync failures\n* Change `MultimapTable::range` to return an iterator of key-value-collection pairs, instead of key-value pairs\n* Automatically abort `WriteTransaction` on drop\n\n## 0.4.0 - 2022-07-26\n* Add single phase with checksum commit strategy. This is now the default and reduces commit latency by ~2x. For more details,\n  see the [design doc](docs/design.md#1-phase--checksum-durable-commits) and\n  [blog post](https://www.redb.org/post/2022/07/26/faster-commits-with-1pcc-instead-of-2pc/). The previous behavior is available\n  via `WriteStrategy::Throughput`, and can have better performance when writing a large number of bytes per transaction.\n\n## 0.3.1 - 2022-07-20\n* Fix a bug where re-opening a `Table` during a `WriteTransaction` lead to stale results being read\n\n## 0.3.0 - 2022-07-19\n* Fix a serious data corruption issue that caused many write operations to corrupt the database\n* Make redb region size configurable\n* Implement garbage collection of empty regions\n* Fixes and optimizations to make the file format more efficient\n\n## 0.2.0 - 2022-06-10\n* Add information log messages which can be enabled with the `logging` feature\n* Add support for `[u8; N]` type\n* Optimize storage of fixed width types. The value length is no longer stored, which reduces storage space by ~50% for `u64`,\n  2x for `u32`, and also improves performance.\n\n## 0.1.2 - 2022-05-08\n* Change `insert()` to return an `Option<V>` with the previous value, instead of `()`\n\n## 0.1.1 - 2022-04-24\n* Improved documentation\n\n## 0.1.0 - 2022-04-23\n* Initial beta release\n"
        },
        {
          "name": "Cargo.toml",
          "type": "blob",
          "size": 2.091796875,
          "content": "[package]\nname = \"redb\"\ndescription = \"Rust Embedded DataBase\"\nhomepage = \"https://www.redb.org\"\nrepository = \"https://github.com/cberner/redb\"\nreadme = \"README.md\"\nlicense = \"MIT OR Apache-2.0\"\nversion = \"2.4.0\"\nedition = \"2021\"\nrust-version = \"1.81\"\nauthors = [\"Christopher Berner <me@cberner.com>\"]\nexclude = [\"fuzz/\"]\n\n[lib]\ncrate-type = [\"cdylib\", \"rlib\"]\n\n[build-dependencies]\npyo3-build-config = { version = \"0.22.0\", optional = true }\n\n[dependencies]\nlog = { version = \"0.4.17\", optional = true }\npyo3 = { version = \"0.22.0\", features=[\"extension-module\", \"abi3-py37\"], optional = true }\n\n[target.'cfg(unix)'.dependencies]\nlibc = \"0.2.104\"\n\n# Common test/bench dependencies\n[dev-dependencies]\nrand = \"0.8\"\ntempfile = \"3.5.0\"\n# for backwards compatibility testing - pin at 1.0.0\nredb1 = { version = \"=1.0.0\", package = \"redb\" }\n# for backwards compatibility testing - pin at 2.0.0\nredb2 = { version = \"=2.0.0\", package = \"redb\" }\nserde = { version = \"1.0\", features = [\"derive\"] }\nbincode = \"1.3.3\"\nwalkdir = \"2.5.0\"\nbyte-unit = \"=5.0.4\"\nfastrand = \"2.0.0\"\nsled = \"0.34.7\"\nlibc = \"0.2.99\"\n\n# Just benchmarking dependencies, which don't build on wasi\n[target.'cfg(not(target_os = \"wasi\"))'.dev-dependencies]\n# Pinned to compatibility with MSRV\nctrlc = \"=3.2.3\"\nheed = \"0.20\"\nsanakirja = \"=1.4.1\"\nsanakirja-core = \"=1.4.1\"\nrocksdb = \"0.22.0\"\ncomfy-table = \"7.0.1\"\n\n[target.'cfg(target_os = \"linux\")'.dev-dependencies]\nio-uring = \"0.6.2\"\n\n[features]\n# This feature is still experimental, and is not considered stable\npython = [\"dep:pyo3\", \"dep:pyo3-build-config\"]\n# Enables log messages\nlogging = [\"dep:log\"]\n# Enable cache hit metrics\ncache_metrics = []\n\n[profile.bench]\ndebug = true\n\n[[bench]]\nname = \"atomics_benchmark\"\nharness = false\n\n[[bench]]\nname = \"multithreaded_insert_benchmark\"\nharness = false\n\n[[bench]]\nname = \"userspace_cache_benchmark\"\nharness = false\n\n[[bench]]\nname = \"savepoint_benchmark\"\nharness = false\n\n[[bench]]\nname = \"lmdb_benchmark\"\nharness = false\n\n[[bench]]\nname = \"large_values_benchmark\"\nharness = false\n\n[[bench]]\nname = \"int_benchmark\"\nharness = false\n\n[[bench]]\nname = \"syscall_benchmark\"\nharness = false\n"
        },
        {
          "name": "LICENSE-APACHE",
          "type": "blob",
          "size": 11.0908203125,
          "content": "                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"[]\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright [yyyy] [name of copyright owner]\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n"
        },
        {
          "name": "LICENSE-MIT",
          "type": "blob",
          "size": 1.0361328125,
          "content": "Copyright (c) 2021 Christopher Berner\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE."
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 4.103515625,
          "content": "# redb\n\n![CI](https://github.com/cberner/redb/actions/workflows/ci.yml/badge.svg)\n[![Crates.io](https://img.shields.io/crates/v/redb.svg)](https://crates.io/crates/redb)\n[![Documentation](https://docs.rs/redb/badge.svg)](https://docs.rs/redb)\n[![License](https://img.shields.io/crates/l/redb)](https://crates.io/crates/redb)\n[![dependency status](https://deps.rs/repo/github/cberner/redb/status.svg)](https://deps.rs/repo/github/cberner/redb)\n\nA simple, portable, high-performance, ACID, embedded key-value store.\n\nredb is written in pure Rust and is loosely inspired by [lmdb](http://www.lmdb.tech/doc/). Data is stored in a collection\nof copy-on-write B-trees. For more details, see the [design doc](docs/design.md)\n\n```rust\nuse redb::{Database, Error, ReadableTable, TableDefinition};\n\nconst TABLE: TableDefinition<&str, u64> = TableDefinition::new(\"my_data\");\n\nfn main() -> Result<(), Error> {\n    let db = Database::create(\"my_db.redb\")?;\n    let write_txn = db.begin_write()?;\n    {\n        let mut table = write_txn.open_table(TABLE)?;\n        table.insert(\"my_key\", &123)?;\n    }\n    write_txn.commit()?;\n\n    let read_txn = db.begin_read()?;\n    let table = read_txn.open_table(TABLE)?;\n    assert_eq!(table.get(\"my_key\")?.unwrap().value(), 123);\n\n    Ok(())\n}\n```\n\n## Status\nredb is undergoing active development, and should be considered beta quality. The file format is stable,\nbut redb has not been widely deployed in production systems (at least to my knowledge).\n\n## Features\n* Zero-copy, thread-safe, `BTreeMap` based API\n* Fully ACID-compliant transactions\n* MVCC support for concurrent readers & writer, without blocking\n* Crash-safe by default\n* Savepoints and rollbacks\n\n## Development\nTo run all the tests and benchmarks a few extra dependencies are required:\n* `cargo install cargo-deny --locked`\n* `cargo install cargo-fuzz --locked`\n* `apt install libclang-dev`\n\n## Benchmarks\nredb has similar performance to other top embedded key-value stores such as lmdb and rocksdb\n\n|                           | redb       | lmdb       | rocksdb        | sled       | sanakirja   |\n|---------------------------|------------|------------|----------------|------------|-------------|\n| bulk load                 | 2689ms     | 1247ms     | 5330ms         | 5892ms     | **1187ms**  |\n| individual writes         | **226ms**  | 419ms      | 703ms          | 816ms      | 398ms       |\n| batch writes              | 2522ms     | 2070ms     | **1047ms**     | 1867ms     | 2776ms      |\n| len()                     | **0ms**    | **0ms**    | 304ms          | 444ms      | 64ms        |\n| random reads              | 860ms      | **624ms**  | 2432ms         | 1596ms     | 875ms       |\n| random reads              | 866ms      | **624ms**  | 2464ms         | 1588ms     | 842ms       |\n| random range reads        | 2347ms     | **1179ms** | 4436ms         | 4907ms     | 1367ms      |\n| random range reads        | 2322ms     | **1207ms** | 4465ms         | 4732ms     | 1373ms      |\n| random reads (4 threads)  | 337ms      | **158ms**  | 732ms          | 488ms      | 349ms       |\n| random reads (8 threads)  | 185ms      | **81ms**   | 433ms          | 259ms      | 277ms       |\n| random reads (16 threads) | 116ms      | **49ms**   | 238ms          | 165ms      | 1708ms      |\n| random reads (32 threads) | 100ms      | **44ms**   | 203ms          | 142ms      | 4714ms      |\n| removals                  | 1889ms     | **803ms**  | 2038ms         | 2371ms     | 1170ms      |\n| uncompacted size          | 1.00 GiB   | 582.22 MiB | **206.38 MiB** | 457.01 MiB | 4.00 GiB    |\n| compacted size            | 311.23 MiB | 284.46 MiB | **106.26 MiB** | N/A        | N/A         |\n\nSource code for benchmark [here](./benches/lmdb_benchmark.rs). Results collected on a Ryzen 5900X with Samsung 980 PRO NVMe.\n\n## License\n\nLicensed under either of\n\n* [Apache License, Version 2.0](LICENSE-APACHE)\n* [MIT License](LICENSE-MIT)\n\nat your option.\n\n### Contribution\n\nUnless you explicitly state otherwise, any contribution intentionally\nsubmitted for inclusion in the work by you, as defined in the Apache-2.0\nlicense, shall be dual licensed as above, without any additional terms or\nconditions.\n"
        },
        {
          "name": "benches",
          "type": "tree",
          "content": null
        },
        {
          "name": "build.rs",
          "type": "blob",
          "size": 0.40625,
          "content": "fn main() {\n    println!(\"cargo:rustc-check-cfg=cfg(fuzzing)\");\n\n    if std::env::var(\"CARGO_CFG_FUZZING\").is_ok()\n        && std::env::var(\"CARGO_CFG_TARGET_OS\").as_deref() == Ok(\"macos\")\n    {\n        println!(\"cargo:rustc-cdylib-link-arg=-undefined\");\n        println!(\"cargo:rustc-cdylib-link-arg=dynamic_lookup\");\n    }\n\n    #[cfg(feature = \"python\")]\n    pyo3_build_config::add_extension_module_link_args();\n}\n"
        },
        {
          "name": "clippy.toml",
          "type": "blob",
          "size": 0.0498046875,
          "content": "disallowed-methods = [\n    \"usize::to_le_bytes\",\n]\n"
        },
        {
          "name": "deny.toml",
          "type": "blob",
          "size": 6.197265625,
          "content": "# This template contains all of the possible sections and their default values\n\n# Note that all fields that take a lint level have these possible values:\n# * deny - An error will be produced and the check will fail\n# * warn - A warning will be produced, but the check will not fail\n# * allow - No warning or error will be produced, though in some cases a note\n# will be\n\n# The values provided in this template are the default values that will be used\n# when any section or field is not specified in your own configuration\n\n# This section is considered when running `cargo deny check advisories`\n# More documentation for the advisories section can be found here:\n# https://embarkstudios.github.io/cargo-deny/checks/advisories/cfg.html\n[advisories]\n# The path where the advisory database is cloned/fetched into\ndb-path = \"~/.cargo/advisory-db\"\n# The url of the advisory database to use\ndb-urls = [\"https://github.com/rustsec/advisory-db\"]\n# The lint level for crates that have been yanked from their source registry\nyanked = \"warn\"\n# A list of advisory IDs to ignore. Note that ignored advisories will still\n# output a note when they are encountered.\nignore = [\n    #\"RUSTSEC-0000-0000\",\n]\n# Threshold for security vulnerabilities, any vulnerability with a CVSS score\n# lower than the range specified will be ignored. Note that ignored advisories\n# will still output a note when they are encountered.\n# * None - CVSS Score 0.0\n# * Low - CVSS Score 0.1 - 3.9\n# * Medium - CVSS Score 4.0 - 6.9\n# * High - CVSS Score 7.0 - 8.9\n# * Critical - CVSS Score 9.0 - 10.0\n#severity-threshold =\n\n# This section is considered when running `cargo deny check licenses`\n# More documentation for the licenses section can be found here:\n# https://embarkstudios.github.io/cargo-deny/checks/licenses/cfg.html\n[licenses]\n# List of explictly allowed licenses\n# See https://spdx.org/licenses/ for list of possible licenses\n# [possible values: any SPDX 3.7 short identifier (+ optional exception)].\nallow = [\n    \"MIT\",\n#    \"BSD-2-Clause\",\n#    \"BSD-3-Clause\",\n    \"Apache-2.0\",\n    \"Apache-2.0 WITH LLVM-exception\",\n]\n# The confidence threshold for detecting a license from license text.\n# The higher the value, the more closely the license text must be to the\n# canonical license text of a valid SPDX license file.\n# [possible values: any between 0.0 and 1.0].\nconfidence-threshold = 0.8\n# Allow 1 or more licenses on a per-crate basis, so that particular licenses\n# aren't accepted for every possible crate as with the normal allow list\nexceptions = [\n    # Each entry is the crate and version constraint, and its specific allow\n    # list\n    { allow = [\"Unicode-3.0\"], name = \"unicode-ident\", version = \"*\" }, # Used only by comfy-table in the benchmarks\n#    { allow = [\"ISC\"], name = \"libloading\", version = \"*\" }, # Used only by rocksdb in the benchmarks\n]\n\n# Some crates don't have (easily) machine readable licensing information,\n# adding a clarification entry for it allows you to manually specify the\n# licensing information\n#[[licenses.clarify]]\n# The name of the crate the clarification applies to\n#name = \"ring\"\n# THe optional version constraint for the crate\n#version = \"*\"\n# The SPDX expression for the license requirements of the crate\n#expression = \"MIT AND ISC AND OpenSSL\"\n# One or more files in the crate's source used as the \"source of truth\" for\n# the license expression. If the contents match, the clarification will be used\n# when running the license check, otherwise the clarification will be ignored\n# and the crate will be checked normally, which may produce warnings or errors\n# depending on the rest of your configuration\n#license-files = [\n    # Each entry is a crate relative path, and the (opaque) hash of its contents\n    #{ path = \"LICENSE\", hash = 0xbd0eed23 }\n#]\n\n[licenses.private]\n# If true, ignores workspace crates that aren't published, or are only\n# published to private registries\nignore = false\n# One or more private registries that you might publish crates to, if a crate\n# is only published to private registries, and ignore is true, the crate will\n# not have its license(s) checked\nregistries = [\n    #\"https://sekretz.com/registry\n]\n\n# This section is considered when running `cargo deny check bans`.\n# More documentation about the 'bans' section can be found here:\n# https://embarkstudios.github.io/cargo-deny/checks/bans/cfg.html\n[bans]\n# Lint level for when multiple versions of the same crate are detected\nmultiple-versions = \"warn\"\n# The graph highlighting used when creating dotgraphs for crates\n# with multiple versions\n# * lowest-version - The path to the lowest versioned duplicate is highlighted\n# * simplest-path - The path to the version with the fewest edges is highlighted\n# * all - Both lowest-version and simplest-path are used\nhighlight = \"all\"\n# List of crates that are allowed. Use with care!\nallow = [\n    #{ name = \"ansi_term\", version = \"=0.11.0\" },\n]\n# List of crates to deny\ndeny = [\n    # Each entry the name of a crate and a version range. If version is\n    # not specified, all versions will be matched.\n    #{ name = \"ansi_term\", version = \"=0.11.0\" },\n]\n# Certain crates/versions that will be skipped when doing duplicate detection.\nskip = [\n    #{ name = \"ansi_term\", version = \"=0.11.0\" },\n]\n# Similarly to `skip` allows you to skip certain crates during duplicate\n# detection. Unlike skip, it also includes the entire tree of transitive\n# dependencies starting at the specified crate, up to a certain depth, which is\n# by default infinite\nskip-tree = [\n    #{ name = \"ansi_term\", version = \"=0.11.0\", depth = 20 },\n]\n\n# This section is considered when running `cargo deny check sources`.\n# More documentation about the 'sources' section can be found here:\n# https://embarkstudios.github.io/cargo-deny/checks/sources/cfg.html\n[sources]\n# Lint level for what to happen when a crate from a crate registry that is not\n# in the allow list is encountered\nunknown-registry = \"warn\"\n# Lint level for what to happen when a crate from a git repository that is not\n# in the allow list is encountered\nunknown-git = \"warn\"\n# List of URLs for allowed crate registries. Defaults to the crates.io index\n# if not specified. If it is specified but empty, no registries are allowed.\nallow-registry = [\"https://github.com/rust-lang/crates.io-index\"]\n# List of URLs for allowed Git repositories\nallow-git = []\n"
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "fuzz",
          "type": "tree",
          "content": null
        },
        {
          "name": "justfile",
          "type": "blob",
          "size": 1.8681640625,
          "content": "build: pre\n    cargo build --all-targets\n    cargo doc\n\npre:\n    cargo deny --all-features check licenses\n    cargo fmt --all -- --check\n    cargo clippy --all --all-targets\n\nrelease: pre\n    cargo build --release\n\nflamegraph:\n    cargo flamegraph --bench lmdb_benchmark\n    firefox ./flamegraph.svg\n\npublish_py: test_py\n    docker pull quay.io/pypa/manylinux2014_x86_64\n    MATURIN_PYPI_TOKEN=$(cat ~/.pypi/redb_token) docker run -it --rm -e \"MATURIN_PYPI_TOKEN\" -v `pwd`:/redb-ro:ro quay.io/pypa/manylinux2014_x86_64 /redb-ro/publish_py.sh\n\ntest_py: install_py\n    python3 -m unittest discover\n\ninstall_py: pre\n    maturin develop\n\ntest: pre\n    RUST_BACKTRACE=1 cargo test\n\ntest_wasi:\n    cargo +nightly test --target=wasm32-wasip1 -- --nocapture\n\nbench bench='lmdb_benchmark': pre\n    cargo bench --bench {{bench}}\n\nwatch +args='test':\n    cargo watch --clear --exec \"{{args}}\"\n\nfuzz: pre\n    cargo fuzz run --sanitizer=none fuzz_redb -- -max_len=10000\n\nfuzz_cmin:\n    cargo fuzz cmin --sanitizer=none fuzz_redb -- -max_len=10000\n\nfuzz_ci: pre\n    cargo fuzz run --sanitizer=none fuzz_redb -- -max_len=10000 -max_total_time=60\n\nfuzz_coverage: pre\n    #!/usr/bin/env bash\n    set -euxo pipefail\n    RUST_SYSROOT=`cargo rustc -- --print sysroot 2>/dev/null`\n    LLVM_COV=`find $RUST_SYSROOT -name llvm-cov`\n    echo $LLVM_COV\n    rustup component add llvm-tools-preview\n    cargo fuzz coverage --sanitizer=none fuzz_redb\n    $LLVM_COV show fuzz/target/*/release/fuzz_redb --format html \\\n          -instr-profile=fuzz/coverage/fuzz_redb/coverage.profdata \\\n          -ignore-filename-regex='.*(cargo/registry|redb/fuzz|rustc).*' > fuzz/coverage/coverage_report.html\n    $LLVM_COV report fuzz/target/*/release/fuzz_redb \\\n          -instr-profile=fuzz/coverage/fuzz_redb/coverage.profdata \\\n          -ignore-filename-regex='.*(cargo/registry|redb/fuzz|rustc).*'\n    firefox ./fuzz/coverage/coverage_report.html\n"
        },
        {
          "name": "py_publish.sh",
          "type": "blob",
          "size": 0.3681640625,
          "content": "#!/bin/bash\n\nPYTHON3=/opt/python/cp311-cp311/bin/python3\n\ncp -r /redb-ro /redb\ncd /redb\ncurl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y --default-toolchain=1.61.0\nsource $HOME/.cargo/env\n\ncd /tmp\n$PYTHON3 -m venv venv\ncd /redb\nsource /tmp/venv/bin/activate\npython3 -m pip install --upgrade pip\npython3 -m pip install maturin\n\npython3 -m maturin publish\n"
        },
        {
          "name": "pyproject.toml",
          "type": "blob",
          "size": 0.5244140625,
          "content": "[project]\nname = \"redb\"\nrequires-python = \">=3.7\"\ndynamic = [\"version\"]\nclassifier = [\"Development Status :: 4 - Beta\",\n    \"License :: OSI Approved :: MIT License\",\n    \"License :: OSI Approved :: Apache Software License\",\n    \"Programming Language :: Python\",\n    \"Programming Language :: Python :: 3\",\n    \"Programming Language :: Python :: 3 :: Only\",\n    \"Programming Language :: Rust\"]\n\n[build-system]\nrequires = [\"maturin>=1.0,<2.0\"]\nbuild-backend = \"maturin\"\n\n[tool.maturin]\ncompatibility = \"manylinux2014\"\nfeatures = [\"python\"]\n"
        },
        {
          "name": "rust-toolchain",
          "type": "blob",
          "size": 0.0048828125,
          "content": "1.81\n"
        },
        {
          "name": "rustfmt.toml",
          "type": "blob",
          "size": 0.015625,
          "content": "max_width = 100\n"
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "test",
          "type": "tree",
          "content": null
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}