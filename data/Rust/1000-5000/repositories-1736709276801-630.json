{
  "metadata": {
    "timestamp": 1736709276801,
    "page": 630,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjYzMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "google/zerocopy",
      "stars": 1671,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.4404296875,
          "content": "# Copyright 2022 The Fuchsia Authors\n#\n# Licensed under the 2-Clause BSD License <LICENSE-BSD or\n# https://opensource.org/license/bsd-2-clause>, Apache License, Version 2.0\n# <LICENSE-APACHE or https://www.apache.org/licenses/LICENSE-2.0>, or the MIT\n# license <LICENSE-MIT or https://opensource.org/licenses/MIT>, at your option.\n# This file may not be copied, modified, or distributed except according to\n# those terms.\n\ntarget\nCargo.lock\nlcov.info\n"
        },
        {
          "name": ".vscode",
          "type": "tree",
          "content": null
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 1.7353515625,
          "content": "<!-- Copyright 2023 The Fuchsia Authors\n\nLicensed under a BSD-style license <LICENSE-BSD>, Apache License, Version 2.0\n<LICENSE-APACHE or https://www.apache.org/licenses/LICENSE-2.0>, or the MIT\nlicense <LICENSE-MIT or https://opensource.org/licenses/MIT>, at your option.\nThis file may not be copied, modified, or distributed except according to\nthose terms. -->\n\n# Changelog\n\n## Releases\n\nWe track releases and release notes using [GitHub\nReleases](https://github.com/google/zerocopy/releases).\n\n## Yanks and Regressions\n\n### 0.2.2 through 0.2.8, 0.3.0 through 0.3.1, 0.4.0, 0.5.0, 0.6.0 through 0.6.5, 0.7.0 through 0.7.30\n\n*Security advisories for this bug have been published as\n[RUSTSEC-2023-0074][rustsec-advisory] and [GHSA-3mv5-343c-w2qg][github-advisory].*\n\nIn these versions, the `Ref` methods `into_ref`, `into_mut`, `into_slice`, and\n`into_mut_slice` were permitted in combination with the standard library\n`cell::Ref` and `cell::RefMut` types for `Ref<B, T>`'s `B` type parameter. These\ncombinations are unsound, and may permit safe code to exhibit undefined\nbehavior. Fixes have been published to each affected minor version which do not\npermit this code to compile.\n\nSee [#716][issue-716] for more details.\n\n[rustsec-advisory]: https://rustsec.org/advisories/RUSTSEC-2023-0074.html\n[github-advisory]: https://github.com/google/zerocopy/security/advisories/GHSA-3mv5-343c-w2qg\n[issue-716]: https://github.com/google/zerocopy/issues/716\n\n### 0.7.27, 0.7.28\n\nThese versions were briefly yanked due to a non-soundness regression reported in\n[#672][pull-672]. After reconsidering our yanking policy in [#679][issue-679],\nwe un-yanked these versions.\n\n[pull-672]: https://github.com/google/zerocopy/pull/672\n[issue-679]: https://github.com/google/zerocopy/issues/679\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 0.4580078125,
          "content": "<!-- Copyright 2022 The Fuchsia Authors\n\nLicensed under a BSD-style license <LICENSE-BSD>, Apache License, Version 2.0\n<LICENSE-APACHE or https://www.apache.org/licenses/LICENSE-2.0>, or the MIT\nlicense <LICENSE-MIT or https://opensource.org/licenses/MIT>, at your option.\nThis file may not be copied, modified, or distributed except according to\nthose terms. -->\n\n# How to Contribute\n\nSee our [Contributing Guide](https://github.com/google/zerocopy/discussions/1318).\n"
        },
        {
          "name": "Cargo.toml",
          "type": "blob",
          "size": 3.662109375,
          "content": "# Copyright 2018 The Fuchsia Authors\n#\n# Licensed under a BSD-style license <LICENSE-BSD>, Apache License, Version 2.0\n# <LICENSE-APACHE or https://www.apache.org/licenses/LICENSE-2.0>, or the MIT\n# license <LICENSE-MIT or https://opensource.org/licenses/MIT>, at your option.\n# This file may not be copied, modified, or distributed except according to\n# those terms.\n\n# Put both crates in a single workspace so that `trybuild` compiler errors have\n# paths that are stable regardless of the path to the repository root. This\n# avoids issues like:\n# https://github.com/dtolnay/trybuild/issues/207#issuecomment-131227.594\n[workspace]\n\nmembers = [\"unsafe-fields\", \"zerocopy-derive\"]\n\n[workspace.package]\n# Inherited by zerocopy and unsafe-fields.\nrust-version = \"1.65.0\"\n\n[package]\nedition = \"2021\"\nname = \"zerocopy\"\nversion = \"0.9.0-alpha.0\"\nauthors = [\"Joshua Liebow-Feeser <joshlf@google.com>\"]\ndescription = \"Zerocopy makes zero-cost memory manipulation effortless. We write \\\"unsafe\\\" so you don't have to.\"\ncategories = [\"embedded\", \"encoding\", \"no-std::no-alloc\", \"parsing\", \"rust-patterns\"]\nkeywords = [\"cast\", \"convert\", \"transmute\", \"transmutation\", \"type-punning\"]\nlicense = \"BSD-2-Clause OR Apache-2.0 OR MIT\"\nrepository = \"https://github.com/google/zerocopy\"\nrust-version = { workspace = true }\n\nexclude = [\".*\"]\n\n[package.metadata.build-rs]\n# These key/value pairs are parsed by `build.rs`. Each entry names a `--cfg`\n# which will be emitted if zerocopy is built with a toolchain version at least\n# as high as the specified version. In the emitted `--cfg`, dashes are replaced\n# by underscores.\n\n# From 1.81.0, Rust supports the `core::error::Error` trait.\nzerocopy-core-error = \"1.81.0\"\n\n# From 1.78.0, Rust supports the `#[diagnostic::on_unimplemented]` attribute.\nzerocopy-diagnostic-on-unimplemented = \"1.78.0\"\n\n[package.metadata.ci]\n# The versions of the stable and nightly compiler toolchains to use in CI.\npinned-stable = \"1.83.0\"\npinned-nightly = \"nightly-2024-11-06\"\n\n[package.metadata.docs.rs]\nall-features = true\nrustdoc-args = [\"--cfg\", \"doc_cfg\", \"--generate-link-to-definition\"]\n\n[package.metadata.playground]\nfeatures = [\"__internal_use_only_features_that_work_on_stable\"]\n\n[features]\nalloc = []\nderive = [\"zerocopy-derive\"]\nsimd = []\nsimd-nightly = [\"simd\"]\nfloat-nightly = []\nstd = [\"alloc\"]\n# This feature depends on all other features that work on the stable compiler.\n# We make no stability guarantees about this feature; it may be modified or\n# removed at any time.\n__internal_use_only_features_that_work_on_stable = [\"alloc\", \"derive\", \"simd\", \"std\"]\n\n[dependencies]\nzerocopy-derive = { version = \"=0.9.0-alpha.0\", path = \"zerocopy-derive\", optional = true }\n\n# The \"associated proc macro pattern\" ensures that the versions of zerocopy and\n# zerocopy-derive remain equal, even if the 'derive' feature isn't used.\n# See: https://github.com/matklad/macro-dep-test\n[target.'cfg(any())'.dependencies]\nzerocopy-derive = { version = \"=0.9.0-alpha.0\", path = \"zerocopy-derive\" }\n\n[dev-dependencies]\nitertools = \"0.13.0\"\nrand = { version = \"0.8.5\", default-features = false, features = [\"small_rng\"] }\nrustversion = \"1.0.17\"\nstatic_assertions = \"1.1.0\"\ntestutil = { path = \"testutil\" }\n# Pinned to a specific version so that the version used for local development\n# and the version used in CI are guaranteed to be the same. Future versions\n# sometimes change the output format slightly, so a version mismatch can cause\n# CI test failures.\ntrybuild = { version = \"=1.0.90\", features = [\"diff\"] }\n# In tests, unlike in production, zerocopy-derive is not optional\nzerocopy-derive = { version = \"=0.9.0-alpha.0\", path = \"zerocopy-derive\" }\n# TODO(#381) Remove this dependency once we have our own layout gadgets.\nelain = \"0.3.0\"\n"
        },
        {
          "name": "LICENSE-APACHE",
          "type": "blob",
          "size": 11.083984375,
          "content": "                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"[]\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright 2023 The Fuchsia Authors\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n\n"
        },
        {
          "name": "LICENSE-BSD",
          "type": "blob",
          "size": 1.2451171875,
          "content": "Copyright 2019 The Fuchsia Authors.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are\nmet:\n\n   * Redistributions of source code must retain the above copyright\nnotice, this list of conditions and the following disclaimer.\n   * Redistributions in binary form must reproduce the above\ncopyright notice, this list of conditions and the following disclaimer\nin the documentation and/or other materials provided with the\ndistribution.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n\"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\nLIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\nA PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\nOWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\nSPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\nLIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\nDATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\nTHEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\nOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n"
        },
        {
          "name": "LICENSE-MIT",
          "type": "blob",
          "size": 1.03515625,
          "content": "Copyright 2023 The Fuchsia Authors\n\nPermission is hereby granted, free of charge, to any\nperson obtaining a copy of this software and associated\ndocumentation files (the \"Software\"), to deal in the\nSoftware without restriction, including without\nlimitation the rights to use, copy, modify, merge,\npublish, distribute, sublicense, and/or sell copies of\nthe Software, and to permit persons to whom the Software\nis furnished to do so, subject to the following\nconditions:\n\nThe above copyright notice and this permission notice\nshall be included in all copies or substantial portions\nof the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF\nANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED\nTO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A\nPARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT\nSHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\nOF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR\nIN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\nDEALINGS IN THE SOFTWARE.\n\n"
        },
        {
          "name": "POLICIES.md",
          "type": "blob",
          "size": 6.0439453125,
          "content": "<!-- Copyright 2023 The Fuchsia Authors\n\nLicensed under a BSD-style license <LICENSE-BSD>, Apache License, Version 2.0\n<LICENSE-APACHE or https://www.apache.org/licenses/LICENSE-2.0>, or the MIT\nlicense <LICENSE-MIT or https://opensource.org/licenses/MIT>, at your option.\nThis file may not be copied, modified, or distributed except according to\nthose terms. -->\n\n# Zerocopy's Policies\n\n## Soundness\n\nZerocopy is expressly designed for use in security-critical contexts. It is used\nin hardware security firmware, cryptographic implementations, hypervisors, and\nmore. We understand that software in these contexts has a very high bar for\ncorrectness, and we take our responsibility to meet that bar very seriously.\n\nThis section describes policies which are designed to ensure the correctness and\nsoundness of our code and prevent regressions.\n\n### Forwards-compatibility\n\nRust does not currently have a formal memory model. As such, while Rust provides\nguarantees about the semantics of some operations, the semantics of many\noperations is up in the air and subject to change.\n\nZerocopy strives to ensure that our code - and code emitted by our custom\nderives - is sound under any version of Rust as early as our MSRV, and will\ncontinue to be sound under any future version of Rust. The policies in this\nsection are designed to help ensure that we live up to this goal.\n\n### Safety comments\n\nEach non-test `unsafe` block must be annotated with a \"safety comment\" which\nprovides a rationale for its soundness. In order to ensure that our soundness is\nforwards-compatible, safety comments must satisfy the following criteria:\n- Safety comments must constitute a (possibly informal) proof that all of Rust's\n  soundness rules are upheld.\n- Safety comments must only rely for their correctness on statements which\n  appear in the stable versions of the [Rust Reference] or standard library\n  documentation (ie, the docs for [core], [alloc], and [std]); arguments which\n  rely on text from the beta or nightly versions of these documents are not\n  considered complete.\n- All statements from the Reference or standard library documentation which are\n  relied upon for soundness must be quoted in the safety comment. This ensures\n  that there is no ambiguity as to what aspect of the text is being cited. This\n  is especially important in cases where the text of these documents changes in\n  the future. Such changes are of course required to be backwards-compatible,\n  but may change the manner in which a particular guarantee is explained.\n\nWe use the [`clippy::undocumented_unsafe_blocks`] lint to ensure that `unsafe`\nblocks cannot be added without a safety comment. Note that there are a few\noutstanding uncommented `unsafe` blocks which are tracked in [#429]. Our goal is\nto reach 100% safety comment coverage and not regress once we've reached it.\n\n[Rust Reference]: https://doc.rust-lang.org/reference/\n[core]: https://doc.rust-lang.org/stable/core/\n[alloc]: https://doc.rust-lang.org/stable/alloc/\n[std]: https://doc.rust-lang.org/stable/std/\n[`clippy::undocumented_unsafe_blocks`]: https://rust-lang.github.io/rust-clippy/master/index.html#/undocumented_unsafe_blocks\n[#429]: https://github.com/google/zerocopy/issues/429\n\n#### Exceptions to our safety comment policy\n\nIn rare circumstances, the soundness of an `unsafe` block may depend upon\nsemantics which are widely agreed upon but not formally guaranteed. In order to\navoid slowing down zerocopy's development to an unreasonable degree, a safety\ncomment may violate our safety comment policy so long as all of the following\nhold:\n- The safety comment's correctness may rely on semantics which are not\n  guaranteed in official Rust documentation *so long as* a member of the Rust\n  team has articulated in an official communication (e.g. a comment on a Rust\n  GitHub repo) that Rust intends to guarantee particular semantics.\n- There exists an active effort to formalize the guarantee in Rust's official\n  documentation.\n\n### Target architecture support\n\nZerocopy bases its soundness on guarantees made about the semantics of Rust\nwhich appear in the Rust Reference or standard library documentation; zerocopy\nis sound so long as these guarantees hold. There are known cases in which these\nguarantees do not hold on certain target architectures (see\n[rust-lang/unsafe-code-guidelines#461]); on such target architectures, zerocopy\nmay be unsound. We consider it outside of zerocopy's scope to reason about these\ncases. Zerocopy makes no effort maintain soundness in cases where Rust's\ndocumented guarantees do not hold.\n\n[rust-lang/unsafe-code-guidelines#461]: https://github.com/rust-lang/unsafe-code-guidelines/issues/461\n\n## MSRV\n\n<!-- Our policy used to be simply that MSRV was a breaking change in all\ncircumstances. This implicitly relied on syn having the same MSRV policy, which\nit does not. See #1085 and #1088. -->\n\nWithout the `derive` feature enabled, zerocopy's minimum supported Rust version\n(MSRV) is encoded the `package.rust-version` field in its `Cargo.toml` file. For\nzerocopy, we consider an increase in MSRV to be a semver-breaking change, and\nwill only increase our MSRV during semver-breaking version changes (e.g., 0.1 ->\n0.2, 1.0 -> 2.0, etc).\n\nFor zerocopy with the `derive` feature enabled, and for the zerocopy-derive\ncrate, we inherit the maximum MSRV any of our dependencies. As of this writing\n(2024-10-03), at least one dependency (syn) does *not* consider MSRV increases\nto be semver-breaking changes. Thus, using the `derive` feature may result in\nthe effective MSRV increasing within a semver version train.\n\n## Yanking\n\nWhenever a bug or regression is identified, we will yank any affected versions\nwhich are part of the current version train. For example, if the most recent\nversion is 0.10.20 and a bug is uncovered, we will release a fix in 0.10.21 and\nyank all 0.10.X versions which are affected. We *may* also yank versions in\nprevious version trains on a case-by-case basis, but we don't guarantee it.\n\nFor information about a particular yanked or un-yanked version, see our [yank\nlog][yank-log].\n\n[yank-log]: https://github.com/google/zerocopy/blob/main/CHANGELOG.md#yanks-and-regressions\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 8.744140625,
          "content": "<!-- Copyright 2024 The Fuchsia Authors\n\nLicensed under a BSD-style license <LICENSE-BSD>, Apache License, Version 2.0\n<LICENSE-APACHE or https://www.apache.org/licenses/LICENSE-2.0>, or the MIT\nlicense <LICENSE-MIT or https://opensource.org/licenses/MIT>, at your option.\nThis file may not be copied, modified, or distributed except according to\nthose terms.\n\nWARNING: DO NOT EDIT THIS FILE. It is generated automatically. Edits should be\nmade in the doc comment on `src/lib.rs` or in `tools/generate-readme`.\n-->\n\n# zerocopy\n\n*<span style=\"font-size: 100%; color:grey;\">Need more out of zerocopy?\nSubmit a [customer request issue][customer-request-issue]!</span>*\n\n***<span style=\"font-size: 140%\">Fast, safe, <span\nstyle=\"color:red;\">compile error</span>. Pick two.</span>***\n\nZerocopy makes zero-cost memory manipulation effortless. We write `unsafe`\nso you don't have to.\n\n*Thanks for using zerocopy 0.8! For an overview of what changes from 0.7,\ncheck out our [release notes][release-notes], which include a step-by-step\nguide for upgrading from 0.7.*\n\n*Have questions? Need help? Ask the maintainers on [GitHub][github-q-a] or\non [Discord][discord]!*\n\n[customer-request-issue]: https://github.com/google/zerocopy/issues/new/choose\n[release-notes]: https://github.com/google/zerocopy/discussions/1680\n[github-q-a]: https://github.com/google/zerocopy/discussions/categories/q-a\n[discord]: https://discord.gg/MAvWH2R6zk\n\n## Overview\n\n###### Conversion Traits\n\nZerocopy provides four derivable traits for zero-cost conversions:\n- `TryFromBytes` indicates that a type may safely be converted from\n  certain byte sequences (conditional on runtime checks)\n- `FromZeros` indicates that a sequence of zero bytes represents a valid\n  instance of a type\n- `FromBytes` indicates that a type may safely be converted from an\n  arbitrary byte sequence\n- `IntoBytes` indicates that a type may safely be converted *to* a byte\n  sequence\n\nThese traits support sized types, slices, and [slice DSTs][slice-dsts].\n\n[slice-dsts]: KnownLayout#dynamically-sized-types\n\n###### Marker Traits\n\nZerocopy provides three derivable marker traits that do not provide any\nfunctionality themselves, but are required to call certain methods provided\nby the conversion traits:\n- `KnownLayout` indicates that zerocopy can reason about certain layout\n  qualities of a type\n- `Immutable` indicates that a type is free from interior mutability,\n  except by ownership or an exclusive (`&mut`) borrow\n- `Unaligned` indicates that a type's alignment requirement is 1\n\nYou should generally derive these marker traits whenever possible.\n\n###### Conversion Macros\n\nZerocopy provides six macros for safe casting between types:\n\n- (`try_`[try_transmute])`transmute` (conditionally) converts a value of\n  one type to a value of another type of the same size\n- (`try_`[try_transmute_mut])`transmute_mut` (conditionally) converts a\n  mutable reference of one type to a mutable reference of another type of\n  the same size\n- (`try_`[try_transmute_ref])`transmute_ref` (conditionally) converts a\n  mutable or immutable reference of one type to an immutable reference of\n  another type of the same size\n\nThese macros perform *compile-time* size and alignment checks, meaning that\nunconditional casts have zero cost at runtime. Conditional casts do not need\nto validate size or alignment runtime, but do need to validate contents.\n\nThese macros cannot be used in generic contexts. For generic conversions,\nuse the methods defined by the [conversion traits](#conversion-traits).\n\n###### Byteorder-Aware Numerics\n\nZerocopy provides byte-order aware integer types that support these\nconversions; see the `byteorder` module. These types are especially useful\nfor network parsing.\n\n## Cargo Features\n\n- **`alloc`**\n  By default, `zerocopy` is `no_std`. When the `alloc` feature is enabled,\n  the `alloc` crate is added as a dependency, and some allocation-related\n  functionality is added.\n\n- **`std`**\n  By default, `zerocopy` is `no_std`. When the `std` feature is enabled, the\n  `std` crate is added as a dependency (ie, `no_std` is disabled), and\n  support for some `std` types is added. `std` implies `alloc`.\n\n- **`derive`**\n  Provides derives for the core marker traits via the `zerocopy-derive`\n  crate. These derives are re-exported from `zerocopy`, so it is not\n  necessary to depend on `zerocopy-derive` directly.\n\n  However, you may experience better compile times if you instead directly\n  depend on both `zerocopy` and `zerocopy-derive` in your `Cargo.toml`,\n  since doing so will allow Rust to compile these crates in parallel. To do\n  so, do *not* enable the `derive` feature, and list both dependencies in\n  your `Cargo.toml` with the same leading non-zero version number; e.g:\n\n  ```toml\n  [dependencies]\n  zerocopy = \"0.X\"\n  zerocopy-derive = \"0.X\"\n  ```\n\n  To avoid the risk of [duplicate import errors][duplicate-import-errors] if\n  one of your dependencies enables zerocopy's `derive` feature, import\n  derives as `use zerocopy_derive::*` rather than by name (e.g., `use\n  zerocopy_derive::FromBytes`).\n\n- **`simd`**\n  When the `simd` feature is enabled, `FromZeros`, `FromBytes`, and\n  `IntoBytes` impls are emitted for all stable SIMD types which exist on the\n  target platform. Note that the layout of SIMD types is not yet stabilized,\n  so these impls may be removed in the future if layout changes make them\n  invalid. For more information, see the Unsafe Code Guidelines Reference\n  page on the [layout of packed SIMD vectors][simd-layout].\n\n- **`simd-nightly`**\n  Enables the `simd` feature and adds support for SIMD types which are only\n  available on nightly. Since these types are unstable, support for any type\n  may be removed at any point in the future.\n\n- **`float-nightly`**\n  Adds support for the unstable `f16` and `f128` types. These types are\n  not yet fully implemented and may not be supported on all platforms.\n\n[duplicate-import-errors]: https://github.com/google/zerocopy/issues/1587\n[simd-layout]: https://rust-lang.github.io/unsafe-code-guidelines/layout/packed-simd-vectors.html\n\n## Security Ethos\n\nZerocopy is expressly designed for use in security-critical contexts. We\nstrive to ensure that that zerocopy code is sound under Rust's current\nmemory model, and *any future memory model*. We ensure this by:\n- **...not 'guessing' about Rust's semantics.**\n  We annotate `unsafe` code with a precise rationale for its soundness that\n  cites a relevant section of Rust's official documentation. When Rust's\n  documented semantics are unclear, we work with the Rust Operational\n  Semantics Team to clarify Rust's documentation.\n- **...rigorously testing our implementation.**\n  We run tests using [Miri], ensuring that zerocopy is sound across a wide\n  array of supported target platforms of varying endianness and pointer\n  width, and across both current and experimental memory models of Rust.\n- **...formally proving the correctness of our implementation.**\n  We apply formal verification tools like [Kani][kani] to prove zerocopy's\n  correctness.\n\nFor more information, see our full [soundness policy].\n\n[Miri]: https://github.com/rust-lang/miri\n[Kani]: https://github.com/model-checking/kani\n[soundness policy]: https://github.com/google/zerocopy/blob/main/POLICIES.md#soundness\n\n## Relationship to Project Safe Transmute\n\n[Project Safe Transmute] is an official initiative of the Rust Project to\ndevelop language-level support for safer transmutation. The Project consults\nwith crates like zerocopy to identify aspects of safer transmutation that\nwould benefit from compiler support, and has developed an [experimental,\ncompiler-supported analysis][mcp-transmutability] which determines whether,\nfor a given type, any value of that type may be soundly transmuted into\nanother type. Once this functionality is sufficiently mature, zerocopy\nintends to replace its internal transmutability analysis (implemented by our\ncustom derives) with the compiler-supported one. This change will likely be\nan implementation detail that is invisible to zerocopy's users.\n\nProject Safe Transmute will not replace the need for most of zerocopy's\nhigher-level abstractions. The experimental compiler analysis is a tool for\nchecking the soundness of `unsafe` code, not a tool to avoid writing\n`unsafe` code altogether. For the foreseeable future, crates like zerocopy\nwill still be required in order to provide higher-level abstractions on top\nof the building block provided by Project Safe Transmute.\n\n[Project Safe Transmute]: https://rust-lang.github.io/rfcs/2835-project-safe-transmute.html\n[mcp-transmutability]: https://github.com/rust-lang/compiler-team/issues/411\n\n## MSRV\n\nSee our [MSRV policy].\n\n[MSRV policy]: https://github.com/google/zerocopy/blob/main/POLICIES.md#msrv\n\n## Changelog\n\nZerocopy uses [GitHub Releases].\n\n[GitHub Releases]: https://github.com/google/zerocopy/releases\n\n## Disclaimer\n\nDisclaimer: This is not an officially supported Google product.\n"
        },
        {
          "name": "build.rs",
          "type": "blob",
          "size": 9.21875,
          "content": "// Copyright 2024 The Fuchsia Authors\n//\n// Licensed under the 2-Clause BSD License <LICENSE-BSD or\n// https://opensource.org/license/bsd-2-clause>, Apache License, Version 2.0\n// <LICENSE-APACHE or https://www.apache.org/licenses/LICENSE-2.0>, or the MIT\n// license <LICENSE-MIT or https://opensource.org/licenses/MIT>, at your option.\n// This file may not be copied, modified, or distributed except according to\n// those terms.\n\n// Sometimes we want to use lints which were added after our MSRV.\n// `unknown_lints` is `warn` by default and we deny warnings in CI, so without\n// this attribute, any unknown lint would cause a CI failure when testing with\n// our MSRV.\n#![allow(unknown_lints)]\n#![deny(renamed_and_removed_lints)]\n#![deny(\n    anonymous_parameters,\n    deprecated_in_future,\n    late_bound_lifetime_arguments,\n    missing_copy_implementations,\n    missing_debug_implementations,\n    path_statements,\n    patterns_in_fns_without_body,\n    rust_2018_idioms,\n    trivial_numeric_casts,\n    unreachable_pub,\n    unsafe_op_in_unsafe_fn,\n    unused_extern_crates,\n    variant_size_differences\n)]\n#![deny(\n    clippy::all,\n    clippy::alloc_instead_of_core,\n    clippy::arithmetic_side_effects,\n    clippy::as_underscore,\n    clippy::assertions_on_result_states,\n    clippy::as_conversions,\n    clippy::correctness,\n    clippy::dbg_macro,\n    clippy::decimal_literal_representation,\n    clippy::get_unwrap,\n    clippy::indexing_slicing,\n    clippy::missing_inline_in_public_items,\n    clippy::missing_safety_doc,\n    clippy::obfuscated_if_else,\n    clippy::perf,\n    clippy::print_stdout,\n    clippy::style,\n    clippy::suspicious,\n    clippy::todo,\n    clippy::undocumented_unsafe_blocks,\n    clippy::unimplemented,\n    clippy::unnested_or_patterns,\n    clippy::unwrap_used,\n    clippy::use_debug\n)]\n\nuse std::{env, fs, process::Command, str};\n\nfn main() {\n    // Avoid unnecessary re-building.\n    println!(\"cargo:rerun-if-changed=build.rs\");\n    // This is necessary because changes to the list of detected Rust toolchain\n    // versions will affect what `--cfg`s this script emits. Without this,\n    // changes to that list have no effect on the build without running `cargo\n    // clean` or similar.\n    println!(\"cargo:rerun-if-changed=Cargo.toml\");\n\n    let version_cfgs = parse_version_cfgs_from_cargo_toml();\n    let rustc_version = rustc_version();\n\n    if rustc_version >= (Version { major: 1, minor: 77, patch: 0 }) {\n        // This tells the `unexpected_cfgs` lint to expect to see all of these\n        // `cfg`s. The `cargo::` syntax was only added in 1.77, so we don't emit\n        // these on earlier toolchain versions.\n        for version_cfg in &version_cfgs {\n            println!(\"cargo:rustc-check-cfg=cfg({})\", version_cfg.cfg_name);\n        }\n        // TODO(https://github.com/rust-lang/rust/issues/124816): Remove these\n        // once they're no longer needed.\n        println!(\"cargo:rustc-check-cfg=cfg(doc_cfg)\");\n        println!(\"cargo:rustc-check-cfg=cfg(kani)\");\n        println!(\n            \"cargo:rustc-check-cfg=cfg(__ZEROCOPY_INTERNAL_USE_ONLY_NIGHTLY_FEATURES_IN_TESTS)\"\n        );\n        println!(\"cargo:rustc-check-cfg=cfg(coverage_nightly)\");\n    }\n\n    for version_cfg in version_cfgs {\n        if rustc_version >= version_cfg.version {\n            println!(\"cargo:rustc-cfg={}\", version_cfg.cfg_name);\n        }\n    }\n}\n\n#[derive(Debug, Ord, PartialEq, PartialOrd, Eq)]\nstruct Version {\n    major: usize,\n    minor: usize,\n    patch: usize,\n}\n\n#[derive(Debug)]\nstruct VersionCfg {\n    version: Version,\n    cfg_name: String,\n}\n\nconst ITER_FIRST_NEXT_EXPECT_MSG: &str = \"unreachable: a string split cannot produce 0 items\";\n\nfn parse_version_cfgs_from_cargo_toml() -> Vec<VersionCfg> {\n    let cargo_toml = fs::read_to_string(\"Cargo.toml\").expect(\"failed to read Cargo.toml\");\n\n    // Expect a Cargo.toml with the following format:\n    //\n    //   ...\n    //\n    //   [package.metadata.build-rs]\n    //   # Comments...\n    //   zerocopy-panic-in-const-fn = \"1.57.0\"\n    //\n    //   ...\n    //\n    //   [...]\n    //\n    // In other words, the following sections, in order:\n    // - Arbitrary content\n    // - The literal header `[package.metadata.build-rs]`\n    // - Any number of:\n    //   - Comments\n    //   - Key/value pairs\n    // - A TOML table, indicating the end of the section we care about\n\n    const TABLE_HEADER: &str = \"[package.metadata.build-rs]\";\n\n    if !cargo_toml.contains(TABLE_HEADER) {\n        panic!(\"{}\", format!(\"Cargo.toml does not contain `{}`\", TABLE_HEADER));\n    }\n\n    // Now that we know there's at least one instance of `TABLE_HEADER`, we\n    // consume the iterator until we find the text following that first\n    // instance. This isn't terribly bullet-proof, but we also authored\n    // `Cargo.toml`, and we'd have to mess up pretty badly to accidentally put\n    // two copies of the same table header in that file.\n    let mut iter = cargo_toml.split(TABLE_HEADER);\n    let _prefix = iter.next().expect(ITER_FIRST_NEXT_EXPECT_MSG);\n    let rest = iter.next().expect(\"unreachable: we already confirmed that there's a table header\");\n\n    // Scan until we find the next table section, which should start with a `[`\n    // character at the beginning of a line.\n    let mut iter = rest.split(\"\\n[\");\n    let section = iter.next().expect(\"unreachable: a string split cannot produce 0 items\");\n\n    section\n        .lines()\n        .filter_map(|line| {\n            // Parse lines of one of the following forms:\n            //\n            //   # Comment\n            //\n            //   name-of-key = \"1.2.3\" # Comment\n            //\n            // Comments on their own line are ignored, and comments after a\n            // key/value pair will be stripped before further processing.\n\n            // We don't need to handle the case where the `#` character isn't a\n            // comment (which can happen if it's inside a string) since we authored\n            // `Cargo.toml` and, in this section, we only put Rust version numbers\n            // in strings.\n            let before_comment = line.split('#').next().expect(ITER_FIRST_NEXT_EXPECT_MSG);\n            let before_comment_without_whitespace = before_comment.trim_start();\n            if before_comment_without_whitespace.is_empty() {\n                return None;\n            }\n\n            // At this point, assuming Cargo.toml is correctly formatted according\n            // to the format expected by this function, we know that\n            // `before_comment_without_whitespace` is of the form:\n            //\n            //   name-of-key = \"1.2.3\" # Comment\n            //\n            // ...with no leading whitespace, and where the trailing comment is\n            // optional.\n\n            let mut iter = before_comment_without_whitespace.split_whitespace();\n            let name = iter.next().expect(ITER_FIRST_NEXT_EXPECT_MSG);\n            const EXPECT_MSG: &str =\n                \"expected lines of the format `name-of-key = \\\"1.2.3\\\" # Comment`\";\n            let equals_sign = iter.next().expect(EXPECT_MSG);\n            let value = iter.next().expect(EXPECT_MSG);\n\n            assert_eq!(equals_sign, \"=\", \"{}\", EXPECT_MSG);\n\n            // Replace dashes with underscores.\n            let name = name.replace('-', \"_\");\n\n            // Strip the quotation marks.\n            let value = value.trim_start_matches('\"').trim_end_matches('\"');\n\n            let mut iter = value.split('.');\n            let major = iter.next().expect(ITER_FIRST_NEXT_EXPECT_MSG);\n            let minor = iter.next().expect(EXPECT_MSG);\n            let patch = iter.next().expect(EXPECT_MSG);\n\n            assert_eq!(iter.next(), None, \"{}\", EXPECT_MSG);\n\n            let major: usize = major.parse().expect(EXPECT_MSG);\n            let minor: usize = minor.parse().expect(EXPECT_MSG);\n            let patch: usize = patch.parse().expect(EXPECT_MSG);\n\n            Some(VersionCfg { version: Version { major, minor, patch }, cfg_name: name })\n        })\n        .collect()\n}\n\nfn rustc_version() -> Version {\n    let rustc_cmd_name = env::var_os(\"RUSTC\").expect(\"could not get rustc command name\");\n    let version =\n        Command::new(rustc_cmd_name).arg(\"--version\").output().expect(\"could not invoke rustc\");\n    if !version.status.success() {\n        panic!(\n            \"rustc failed with status: {}\\nrustc output: {}\",\n            version.status,\n            String::from_utf8_lossy(version.stderr.as_slice())\n        );\n    }\n\n    const RUSTC_EXPECT_MSG: &str = \"could not parse rustc version output\";\n    let version = str::from_utf8(version.stdout.as_slice()).expect(RUSTC_EXPECT_MSG);\n    let version = version.trim_start_matches(\"rustc \");\n    // The version string is sometimes followed by other information such as the\n    // string `-nightly` or other build information. We don't care about any of\n    // that.\n    let version = version\n        .split(|c: char| c != '.' && !c.is_ascii_digit())\n        .next()\n        .expect(ITER_FIRST_NEXT_EXPECT_MSG);\n    let mut iter = version.split('.');\n    let major = iter.next().expect(ITER_FIRST_NEXT_EXPECT_MSG);\n    let minor = iter.next().expect(RUSTC_EXPECT_MSG);\n    let patch = iter.next().expect(RUSTC_EXPECT_MSG);\n\n    let major: usize = major.parse().expect(RUSTC_EXPECT_MSG);\n    let minor: usize = minor.parse().expect(RUSTC_EXPECT_MSG);\n    let patch: usize = patch.parse().expect(RUSTC_EXPECT_MSG);\n\n    Version { major, minor, patch }\n}\n"
        },
        {
          "name": "cargo.sh",
          "type": "blob",
          "size": 0.6474609375,
          "content": "# Copyright 2024 The Fuchsia Authors\n#\n# Licensed under a BSD-style license <LICENSE-BSD>, Apache License, Version 2.0\n# <LICENSE-APACHE or https://www.apache.org/licenses/LICENSE-2.0>, or the MIT\n# license <LICENSE-MIT or https://opensource.org/licenses/MIT>, at your option.\n# This file may not be copied, modified, or distributed except according to\n# those terms.\n\nset -eo pipefail\n\n# Build `cargo-zerocopy` without any RUSTFLAGS set in the environment\nenv -u RUSTFLAGS cargo +stable build --manifest-path tools/Cargo.toml -p cargo-zerocopy -q\n# Thin wrapper around the `cargo-zerocopy` binary in `tools/cargo-zerocopy`\n./tools/target/debug/cargo-zerocopy $@\n"
        },
        {
          "name": "ci",
          "type": "tree",
          "content": null
        },
        {
          "name": "clippy.toml",
          "type": "blob",
          "size": 0.435546875,
          "content": "# Copyright 2023 The Fuchsia Authors\n#\n# Licensed under a BSD-style license <LICENSE-BSD>, Apache License, Version 2.0\n# <LICENSE-APACHE or https://www.apache.org/licenses/LICENSE-2.0>, or the MIT\n# license <LICENSE-MIT or https://opensource.org/licenses/MIT>, at your option.\n# This file may not be copied, modified, or distributed except according to\n# those terms.\n\naccept-comment-above-statement = true\naccept-comment-above-attributes = true\n"
        },
        {
          "name": "githooks",
          "type": "tree",
          "content": null
        },
        {
          "name": "rustfmt.toml",
          "type": "blob",
          "size": 0.7158203125,
          "content": "# Copyright 2022 The Fuchsia Authors\n#\n# Licensed under a BSD-style license <LICENSE-BSD>, Apache License, Version 2.0\n# <LICENSE-APACHE or https://www.apache.org/licenses/LICENSE-2.0>, or the MIT\n# license <LICENSE-MIT or https://opensource.org/licenses/MIT>, at your option.\n# This file may not be copied, modified, or distributed except according to\n# those terms.\n\nedition = \"2021\"\n\n# The \"Default\" setting has a heuristic which splits lines too aggresively.\n# We are willing to revisit this setting in future versions of rustfmt.\n# Bugs:\n#   * https://github.com/rust-lang/rustfmt/issues/3119\n#   * https://github.com/rust-lang/rustfmt/issues/3120\nuse_small_heuristics = \"Max\"\n\n# Prevent carriage returns\nnewline_style = \"Unix\"\n"
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "testdata",
          "type": "tree",
          "content": null
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        },
        {
          "name": "testutil",
          "type": "tree",
          "content": null
        },
        {
          "name": "tools",
          "type": "tree",
          "content": null
        },
        {
          "name": "unsafe-fields",
          "type": "tree",
          "content": null
        },
        {
          "name": "win-cargo.bat",
          "type": "blob",
          "size": 0.75,
          "content": "@rem Copyright 2024 The Fuchsia Authors\r\n\r\n@rem Licensed under a BSD-style license <LICENSE-BSD>, Apache License, Version 2.0\r\n@rem <LICENSE-APACHE or https://www.apache.org/licenses/LICENSE-2.0>, or the MIT\r\n@rem license <LICENSE-MIT or https://opensource.org/licenses/MIT>, at your option.\r\n@rem This file may not be copied, modified, or distributed except according to\r\n@rem those terms.\r\n\r\n@rem Build `cargo-zerocopy` without any RUSTFLAGS set in the environment\r\n@set TEMP_RUSTFLAGS=%RUSTFLAGS%\r\n@set RUSTFLAGS=\r\n@cargo +stable build --manifest-path tools/Cargo.toml -p cargo-zerocopy -q\r\n@set RUSTFLAGS=%TEMP_RUSTFLAGS%\r\n@set TEMP_RUSTFLAGS=\r\n@rem Thin wrapper around the `cargo-zerocopy` binary in `tools/cargo-zerocopy`\r\n@tools\\target\\debug\\cargo-zerocopy %*\r\n"
        },
        {
          "name": "zerocopy-derive",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}