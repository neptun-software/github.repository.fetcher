{
  "metadata": {
    "timestamp": 1736709021832,
    "page": 103,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjExMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "redox-os/orbtk",
      "stars": 3789,
      "defaultBranch": "develop",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.2421875,
          "content": "# Compiled files\n*.o\n*.so\n*.rlib\n*.dll\n\n# Executables\n*.exe\n\n# Generated by Cargo\nCargo.lock\n/target/\n/crates/*/target/\n\n.idea/\n*.iml\n#.vscode\n\n# Brainstorming files\nbrain_*.rs\n\n.DS_Store\nThumbs.db\n\n# Generated by cargo node\nstatic/\n\nbook\norbclient"
        },
        {
          "name": ".vscode",
          "type": "tree",
          "content": null
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 4.9990234375,
          "content": "# Changelog\nAll notable changes to this project will be documented in this file.\n\nThe format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/),\nand this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0.html).\n\n## 0.3.1 (OrbTk next) wip\n\n### 0.3.1-alpha5 (wip)\n\n* Enable usage of rust editon = 2021\n\n### 0.3.1-alpha4\n\n* Switch structure to `Workspace` organized crates:\n  - removed crates dir\n  - moved localization code to orbtk_core crate\n  - moved theming code to orbtk_core crate\n  - renamed orbtk_api to orbtk_core\n  - renamed render crate to orbtk_tinyskia\n  - renamed shell crate to orbtk_orbclient\n  - created toplevel workspace Crago.toml\n* `tiny-skia` is integrated as 2D render engine\n* New `PasswordBox` widget\n* New `Pager`navigation widget\n* New `Clipboard` service\n* New `MasterDetail` navigation widget\n* Improved `TextBehavior` event handling\n  - Copy Ctrl+C, Paste Ctrl+V, Cut Ctrl+X\n* Remove `glupath` backend\n* Refactor `on_changed` callback, add key parameter\n* Access RawWindowHandle from Context\n* Adopt Themes `colors selection` via CSS-like functions\n* Create `Color` from HSV and HSL values\n* Create a `Color` by its CSS name\n* Gradient coordinates become relative to the path\n* Add `gradients` defined by angle\n* Introduce optional `gradients` selection in themes\n* Improve `KeyboardHandler` to mark text\n  - Shift + Left | Shift + Right\n* Improve `MouseHandler` to select text via mouse (experimental)\n* Select all character on text input by mouse double click\n* Replace String16 with std::string::String\n* Raise `on_changed` callback also on shared widgets\n* Introduce Localization\n* Custom theme names for types\n  - Brush, String, Thickness, f32, f64\n* Add `focus_state` property to Window\n* Add `theme` property to Window\n* Rename `lost_focus_on_activation` to `lose_focus_on_activation`\n* Fix `Grid layout` for \"auto\" width\n* Add thread safe `EventAdapter`\n* Add thread safe `MessageAdapter` and `MessageReader`\n* Add `load_async` and `save_async` to `Settings` service\n* Add `TextInputEvent`\n* Add `EnterEvent` and `LeaveEvent`\n* Add `hover` property and selector state to all widgets\n* Add `on_enter` and `on_leave` callback to `MouseHandler`\n* Refactor theming (cleanup default theme, introduce state order)\n* Fix theming related bugs\n* Register fonts on `Theme` struct\n* Update OrbTks default themes\n* Add redox theme\n* Add `Brush` handling gradients (respecting angles, directions, color codes)\n* Add fluent design inspired theme (dark and light)\n* Add fonts and icon sets specific to fluent design (Microsoft Segoe look)\n* Add `message` example\n* Remove widgets example\n* Replaces Columns and Rows structs with Blocks\n* Set grid columns and rows also as string\n* Refactor grid layout code\n* Add `message-handler` example\n* Support features flag in `showcase` example\n* Add new popup code (version 2: new placement and offset properties)\n* Add `bundled` feature\n* Rename `resizeable` to `resizable`\n* Fix thumb position not updating when window is resized\n\n### 0.3.1-alpha3\n\n* Dynamic theme switch\n* Add all material font icons as resource\n* Replaces css-engine with custom Rust/Ron based theming\n* Add widget access helpers for states\n* API update check deprecated methods an replace to new ones\n* Performance improvements\n* Change state update order from tree order to incoming changes order\n* NumericBox widget\n* Update caret position on TextBox by mouse click\n* Text input support for ', /, \\, [, ], {, }\n* Multiple window support (experimental)\n* Pathfinder / Glutin backend (experimental)\n* ProgressBar widget\n* Measure distance between two Points\n* Improve: Mouse event arguments\n* Fix: Crash when a child widget is removed\n* New `TabWidget` widget\n* Add `on_changed` property change callback to all widgets\n* Linking to OrbTk book\n\n### 0.3.1-alpha2\n\n* ComboBox / ComboboxItem widget\n* Slider widget\n* Popup widget\n* Overlay layer\n* Service registry for states\n* Settings service (serialize / deserialize data)\n* Direct access of states in callbacks\n* Impl RawWindowHandle for Context (wip)\n* Sent requests to window shell\n* Layout fixes and stack layout example\n* Many web fixes\n* State cleanup method\n* Refactor setting of styling selectors\n* TextBox select all (Ctrl + a)\n* Text input support for !, @, #\n* Borderless window\n\n### 0.3.1-alpha1\n\n* api crate: base api elements of OrbTk e.g. widget and application parts\n* css-engine crate: parse and read values from a css file\n* proc_macros crate: procedural helper macros\n* render crate: cross platform 2D/3D render library\n* shell crate: cross platform window and event handling\n* theme crate: OrbTks default theme (light and dark)\n* tree crate: tree structure based on DCES\n* utils crate: helper structs and traits\n* widgets crate: base widget library\n* Button widget\n* Canvas widget\n* CheckBox widget\n* Container widget\n* Cursor widget\n* FontIconBlock widget\n* Image widget\n* Items widget\n* ListView widget\n* ScrollBar widget\n* ScrollIndicator widget\n* ScrollViewer widget\n* Stack widget\n* Switch widget\n* TextBlock widget\n* TextBox widget\n* ToggleButton widget\n* Window widget\n"
        },
        {
          "name": "Cargo.toml",
          "type": "blob",
          "size": 0.1787109375,
          "content": "[profile.dev]\nopt-level = 1\n\n[workspace]\nmembers = [\n    \"orbtk\",\n    \"orbtk_core\",\n    \"orbtk_widgets\",\n    \"orbtk_orbclient\",\n    \"orbtk_tinyskia\",\n    \"proc_macros\",\n    \"utils\",\n]"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.0556640625,
          "content": "The MIT License (MIT)\n\nCopyright (c) 2015 Jeremy Soller\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n"
        },
        {
          "name": "Node.toml",
          "type": "blob",
          "size": 0.8857421875,
          "content": "[[apps]]\nname = \"showcase\"\nwidth = 468\nheight = 730\nassets = \"assets/showcase\"\n    [[apps.fonts]]\n    font_family = \"MaterialIcons-Regular\"\n    src = \"crates/theme_default/assets/fonts/MaterialIcons.ttf\"\n    [[apps.fonts]]\n    font_family = \"Roboto-Regular\"\n    src = \"crates/theme_default/assets/fonts/Roboto-Regular.ttf\"\n    [[apps.fonts]]\n    font_family = \"Roboto-Medium\"\n    src = \"crates/theme_default/assets/fonts/Roboto-Medium.ttf\"\n\n[[apps]]\nname = \"calculator\"\nwidth = 212\nheight = 360\n\n[[apps]]\nname = \"canvas\"\nwidth = 468\nheight = 730\n    [[apps.fonts]]\n    font_family = \"MaterialIcons-Regular\"\n    src = \"crates/theme_default/assets/fonts/MaterialIcons.ttf\"\n    [[apps.fonts]]\n    font_family = \"Roboto-Regular\"\n    src = \"crates/theme_default/assets/fonts/Roboto-Regular.ttf\"\n    [[apps.fonts]]\n    font_family = \"Roboto-Medium\"\n    src = \"crates/theme_default/assets/fonts/Roboto-Medium.ttf\"\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 16.646484375,
          "content": "## OrbTk is Sunsetting\n\nIt is with great sadness that I announce that OrbTk is sunsetting. In the many years since I first made OrbTk, the Rust GUI ecosystem has grown at an amazing rate. Toolkits with more features have developed, and which are more actively maintained. I first created this project to bootstrap UI development on Redox OS. Many of the applications on Redox use OrbTk. [@FloVanGH](https://github.com/FloVanGH) stepped in to do large refactoring between the 0.2 and 0.3 release, which modernized the OrbTk API. [@rzerres](https://github.com/rzerres) stepped in to add many features and maintain OrbTk since the 0.3 release.\n\nI have since moved on to working with [iced](https://iced.rs/). [@FloVanGH](https://github.com/FloVanGH) has taken a job working on [slint](https://slint-ui.com/). And [@rzerres](https://github.com/rzerres) has expressed interest in using [slint](https://slint-ui.com/) for their projects. Both [iced](https://iced.rs/) and [slint](https://slint-ui.com/) provide renderer agnostic toolkits that will be compatible with Redox OS, but they also support more features than OrbTk. So, I have decided, with agreement from [@rzerres](https://github.com/rzerres), that OrbTk is to stop being actively maintained, in favor of these other Rust native toolkits.\n\n-- [Jeremy Soller](https://github.com/jackpot51/)\n\n## Original README\n\n<img alt=\"OrbTk\" width=\"380\" src=\"https://raw.githubusercontent.com/redox-os/orbtk/develop/orbtk/images/orbtk_logo_dark.png\">\n\n[![Build and test](https://github.com/redox-os/orbtk/workflows/CI/badge.svg)](https://github.com/redox-os/orbtk/actions)\n[![MIT licensed](https://img.shields.io/badge/license-MIT-blue.svg)](./LICENSE)\n[![crates.io](https://img.shields.io/badge/crates.io-0.3.1alpha4-orange.svg)](https://crates.io/crates/orbtk/0.3.1-alpha4)\n[![docs.rs](https://img.shields.io/badge/docs-0.3.1alpha4-blue.svg)](https://docs.rs/crate/orbtk/0.3.1-alpha4)\n\nThe Orbital Widget Toolkit is a cross-platform (G)UI toolkit for building scalable user interfaces with the programming language Rust. It's based\non the [Entity Component System Pattern](https://en.wikipedia.org/wiki/Entity_component_system) and provides a [functional Reactive](https://en.wikipedia.org/wiki/Functional_reactive_programming)-like API.\n\nThe main goals of OrbTk are speed, ease of use, and cross-platform compatibility.\n\n## Screenshots\n\nThe next images are taken from example applications, that have been compiled for MacOS / OS-X.\n\n* The `showcase` example\n\n<img alt=\"showcase\" src=\"https://raw.githubusercontent.com/redox-os/orbtk/develop/orbtk/screenshots/showcase_button_macos.png\">\n\n* Themed `calculator` examples\n\n<p float=\"left\">\n<img alt=\"calculator_dark_macos\" height=\"300\" src=\"https://raw.githubusercontent.com/redox-os/orbtk/develop/orbtk/screenshots/calculator_dark_macos.png\">\n<img alt=\"calculator_light_macos\" height=\"300\" src=\"https://raw.githubusercontent.com/redox-os/orbtk/develop/orbtk/screenshots/calculator_light_macos.png\">\n<img alt=\"calculator_redox\" height=\"300\" src=\"https://raw.githubusercontent.com/redox-os/orbtk/develop/orbtk/screenshots/calculator_redox.png\">\n</p>\n\nOther screenshots have been rendered from [examples code](https://github.com/redox-os/orbtk/blob/develop/orbtk/examples/README.md), that is stored\ninside the `orbtk` crate.\n\n## Features:\n\n* Modern lightweight API\n* Cross platform\n* Modular crates\n* Based on Entity Component System library [DCES](https://gitlab.redox-os.org/redox-os/dces-rust)\n* Flexible event system\n* Integrated widget library\n* Custom widgets\n* Custom theming engine\n* Dynamic theme switching\n* Integrated debugging tools\n* Localization\n\n## Platforms\n\n* Redox OS\n* Linux\n* macOS\n* Windows\n* openBSD (not tested, but should work)\n* Web (broken, will be fixed soon)\n* Android (wip, will be released soon)\n* iOS (wip, will be released soon)\n* Ubuntu Touch (on hold)\n\n## Planned features\n\n* Conformable use of async\n* More default widgets\n* Book\n* Animations\n* Split application in modules\n* 3D context\n* More integrated debugging tools\n\n## Documentation\n\n### Build and open documentation\n\nYou can build and view the latest documentation by executing the following command:\n\n```text\ncargo doc --no-deps --open\n```\n\n### OrbTk book\n\nThe OrbTk book is written from a developers perspective. It aims to\nintroduce the basic concept, beside a bird's eye view of the toolkit\nstructure. An in depth discussion of the provided crates is followed\nby example listings. This section collects example code with annotated\nblocks. The annotations are targeting best practice usage of available\nwidgets, their interaction with other modules coupled with a\ndescriptive text where reasonable.\n\nA precompiled version is available for [online](https://github.com/redox-os/orbtk-book/wiki) reading.\nYou are invited to checkout its repository at [OrbTk book](https://github.com/redox-os/orbtk-book).\n\nPlease do **not** expect at finalized version. It is not complete at\nall. The given statis is `marked as work in progress` (WIP). Any help to\nimprove the chapters and/or translations are quite welcome.\n\n## Usage\n\nTo include OrbTk as an external dependency into your project, add this\nline to its `Cargo.toml` file:\n\n```text\n...\n[dependencies]\n...\norbtk = \"0.3.1-alpha4\"\n...\n```\n\nTo use the latest development version of OrbTk as an external\ndependency, add this line into its `Cargo.toml` file:\n\n```text\n...\n[dependencies]\n...\norbtk = { git = \"https://github.com/redox-os/orbtk.git\", branch = \"develop\" }\n...\n```\n\nYou can also check out the OrbTk template project to start a new\nproject: https://github.com/redox-os/orbtk-template\n\n## Minimal Example\n\n```rust\nuse orbtk::prelude::*;\n\nfn main() {\n\t  Application::new()\n\t\t.window(|ctx| {\n\t\t\tWindow::new()\n\t\t\t\t.title(\"OrbTk - minimal example\")\n\t\t\t\t.position((100.0, 100.0))\n\t\t\t\t.size(420.0, 730.0)\n\t\t\t\t.child(TextBlock::new().text(\"OrbTk\").build(ctx))\n\t\t\t\t.build(ctx)\n\t\t})\n\t\t.run();\n}\n```\n\n## Base concepts\n\n### Widget\n\nWidgets are the building blocks of user interfaces in OrbTk. They are\nthings like Buttons, TextBoxes, ListViews, Views (Screens) and\nGrid(Layout)s. Each widget implements the [Widget\ntrait](https://github.com/redox-os/orbtk/blob/develop/orbtk_core/src/widget_base/mod.rs)\nand is generated by the [widget!\nmacro](https://github.com/redox-os/orbtk/blob/develop/orbtk_core/src/macros.rs). A\nwidget consists of a name like `Button` and a list of its properties\nlike `text: String`, `background: Brush` or `count: u32`. After the\n`build` method of a widget is called it's added to the Entity\nComponent System where it exists as an `Entity` (index) with\n`Components`. The struct of a widget serves as a builder using the\n[builder\npattern](https://doc.rust-lang.org/1.0.0/style/ownership/builders.html).\n\nBasic usage of the widget! macro:\n\n```rust\nwidget!(\n\tMyWidget {\n\t  background: Brush,\n\t  count: u32,\n\t  text: String,\n\t  ...\n\t}\n);\n```\n\n### Widget Templates\n\nEach widget has to implement the [Template\ntrait](https://github.com/redox-os/orbtk/blob/develop/orbtk_core/src/widget_base/template.rs).\nThe template defines the structure and the default values that the\nwidget will store in its properties. For example: You can define your\nhand-crafted `Button` widget (lets call it `MyButton`). `MyButton` is\nrepresented as a tree of three child widgets: A top level\n`Container` widget that will hand over to its child, the `StackPanel`\nwidget, which in turn will hand over to its child, the `TextBlock`\nwidget.\n\nThe next code snippet prints out the source code of this basic Template trait:\n\n```rust\nimpl Template for MyButton {\n\tfn template(self, id: Entity, ctx: &mut BuildContext) -> Self {\n\t\t self.name(\"MyButton\")\n\t\t\t.style(\"my_button_style\")\n\t\t\t.background(\"#000000\")\n\t\t\t.count(0)\n\t\t\t.text(\"Initial text\")\n\t\t\t.child(Container::new()\n\t\t\t\t\t// Container references the same background as MyButton\n\t\t\t\t\t.background(id)\n\t\t\t\t\t.child(TextBlock::new()\n\t\t\t\t\t\t\t// TextBlock references the same text as MyButton\n\t\t\t\t\t\t\t.text(id)\n\t\t\t\t\t\t\t.build(ctx)\n\t\t\t\t\t)\n\t\t\t\t\t.build(ctx)\n\t\t\t)\n\t}\n}\n```\n\n### Widget State\n\nAny changes that are triggered via user interaction or via events are\nhandled inside the state of a widget. If generated, they are processed\nto manipulate the inner state. Each state must implement the [State\ntrait](https://github.com/redox-os/orbtk/blob/develop/orbtk_core/src/widget_base/state.rs).\nThe inner state of a widget is represented by the current values of\nits properties.\n\nHave a look at this code snippet to make up a state trait:\n\n```rust\n#[derive(Default, AsAny)]\nstruct MyState {\n\t...\n}\n\nimpl State for MyState {\n\tfn update(&mut self, _: &mut Registry, ctx: &mut Context) {\n\t\t// update the widget\n\t\t...\n\t}\n}\n\nwidget!(\n\t// Add MyState as state of MyWidget\n\tMyWidget<MyState> {\n\t\t...\n\t}\n);\n```\n\nThe update method requires a [`Context`\nparameter](https://github.com/redox-os/orbtk/blob/develop/orbtk_core/src/widget_base/context.rs).\nThis structure provides access to the state's widget itself (the `entity`)\nand its components (the `properties`). It also provides methods (the `associated functions`) to access\nthe children of the widget, this it is able to manipulate the widget tree.\n\n### Styling widgets and define themes\n\nOrbTk provides a `theme engine` base on\n[RON](https://github.com/ron-rs/ron). The engine provides the\nfollowing features:\n\n* Split theme in different files\n* Reference resources values in the theme files (colors, font stuff)\n* Derive styles\n* Dynamic theme switching\n* State styling (pressed | selected | focused | disabled)\n\nHave a look at this short style definition:\n\n```ron\nTheme (\n\tstyles: {\n\t\t\"base\": (\n\t\t\tproperties: {\n\t\t\t\t\"font_size\": \"$FONT_SIZE_12\",\n\t\t\t\t\"font_family\": \"$MEDIUM_FONT\",\n\t\t\t}\n\t\t),\n\t\t\"button\": (\n\t\t\tbase: \"base\",\n\t\t\tproperties: {\n\t\t\t\t\"background\": \"$BLACK\",\n\t\t\t},\n\t\t\tstates: [\n\t\t\t\t(\n\t\t\t\t\tkey: \"pressed\",\n\t\t\t\t\tproperties: {\n\t\t\t\t\t\t\"background\": \"$WHITE\",\n\t\t\t\t\t}\n\t\t\t\t)\n\t\t\t]\n\t\t)\n\t},\n\tresource: {\n\t\t\"BLACK\": \"#000000\",\n\t\t\"WHITE\": \"#ffffff\",\n\t\t\"MEDIUM_FONT\": \"Roboto-Medium\",\n\t\t\"FONT_SIZE_12\": 12,\n\t\t\"FONT_SIZE_16\": 16,\n\t}\n)\n```\n\nBut you are not requested to reference a theme engine. OrbTk\nenables as well the declaraton of property values inside the source\ncode (`inlined theming`).\n\n### Localization\n\nOrbTk supports the functionality to register an application wide\nlocalization service. A localization service has to implement the\n[Localization](https://github.com/redox-os/orbtk/blob/develop/orbtk_core/src/localization/mod.rs)\ntrait.\n\n*Example*\n\n```rust\npub struct MyLocalization {\n\t...\n}\n\nimpl Localization for MyLocalization {\n\t/// Gets the current language by language key e.g. `en_US` or `de_DE`.\n\tfn language(&self) -> &String {\n\t\t...\n\t}\n\n\t/// Sets the current language by key e.g. `en_US` or `de_DE`.\n\tfn set_language(&mut self, key: &str) {\n\t\t...\n\t}\n\n\t/// Gets the translated text for the given key. If there is no given translation the `key` will be returned as result.\n\tfn text(&self, key: String) -> String {\n\t\t...\n\t}\n}\n```\n\nIt is possible to register a localization service for an\napplication. Simply make use of the\n[RonLocalization](https://github.com/redox-os/orbtk/blob/develop/orbtk_core/src/localization/ron_localization/mod.rs),\nthat can read localization dictionaries coded in the\n[RON](https://github.com/ron-rs/ron) format.\n\n*Example*\n\n```rust\nlet de_de = r#\"\n\tDictionary(\n\t\twords: {\n\t\t\t\"hello\": \"Hallo\",\n\t\t\t\"world\": \"Welt\",\n\t\t}\n\t)\n\t\"#;\n\nApplication::new()\n\t.localization(\n\t\tRonLocalization::create()\n\t\t\t// sets the initial language\n\t\t\t.language(\"en_US\")\n\t\t\t// adds an language dictionary to the localization service.\n\t\t\t.dictionary(\"de_DE\", de_de)\n\t\t\t.build()\n\t)\n\t.window(|ctx| {\n\t\tWindow::new()\n\t\t\t.title(\"OrbTk - showcase example\")\n\t\t\t.position((100, 100))\n\t\t\t.size(600, 730)\n\t\t\t.resizable(true)\n\t\t\t.child(TextBlock::new().text(\"hello\").build(ctx))\n\t\t\t.build(ctx)\n\t})\n\t.run();\n```\n\nInside this example code the `text` property (value **hello**) is used\nas the `key`. This key is matched to the correponding `value` inside the\ndictionary of the corresponding localization service. If you haven't defined a\ndictionary for the current language, OrbTk will simply take the value of the property itself.\nYou are free to start development without and any localization, but add it afterwards.\n\nYou may switch the language at runtime. Inside the state widget you simply consume the `set_language` method, that is accessible via the\n[Context](https://github.com/redox-os/orbtk/blob/develop/orbtk_core/src/widget_base/context.rs)\nstructure.\n\n## Run Examples\n\n### Build with sdl2 installation\n\nIf your target Operating-System is `Linux`, `macOS` or `Windows`, a\n`sdl2` installation is required. Please check the documentation that\nis provieded for th [`rust-sdk2` crate](\nhttps://github.com/Rust-SDL2/rust-sdl2).\n\n### Build with sdl2 from source\n\nAs an alternative, you may build `OrbTk` while bundling `sdl2`. To activate the `bundled` feature go ahead like this:\n\n```shell\ncargo run --example showcase --features bundled\n```\n\nPlease asure, that you `toolchain` will provide a *working* C compiler (e.g. `gcc`, `clang`, or MS's compiler).\n\nTo target `linux`, you also need to provide `cmake`:\n\n```shell\nsudo apt install cmake\n```\n\nIf you have trouble build the provided OrbTk examples or simply don't want to\nuse a C compiler, please check the backend section. It contains\nalternatives.\n\nAll example source-code resides inside the [`examples` subdirectory](./orbtk/examples) of the orbtk subcrate.\n\nCompile, start and play around with the `showcase` example while executing the following command:\n\n```text\ncargo run --example showcase --release\n```\n\nOrbTk has an integrated `debug` tools. It will oultline the bounds of\nall managed widgets inside the widget tree. This will include\ninvisible ones.  You may also want to print out the tree structure of your app.\nThis is activated, via feature flags like this:\n\n```text\ncargo run --example showcase --release --features \"debug, log\"\n```\n\n## Run Examples with cargo-node\n\nTo run the examples as a browser, electron or cordova app you have to install cargo-node:\n\n```text\ncargo install -f cargo-node\n```\n\n`cargo-node` itself relies on `npm` version 6.9.0, which is included with `Node.js` version 10.16.3. You can download it\nfrom  its [homepage](https://nodejs.org/dist/v10.16.3/).\n\nRust's `cargo` is also required. All cargo-node's dependencies are installed automatically.\n\n### Start examples\n\nTo start the `showcase` example as a node binary, executing one of the following commands:\n\n* Run as browser app:\n\n```text\ncargo node run --target browser --example showcase\n```\n\n* Run as electron app:\n\n```text\ncargo node run --target electron --example showcase\n```\n\n* Run as cordova app on android:\n\n```text\ncargo node run --target android --example showcase\n```\n\n## crates structure\n\n* orbtk: sub-crate, that provides all needed components to build an OrbTk `cross platform UI`.\n* orbtk_core: sub-crate, that provides the `core components` of Orbtk (widget basics, tree handling, theming)\n* orbtk_orbclient: sub-crate, that handles cross platform aware `window and event management`. It is based on **OrbClient**.\n* orbtk_tinyskia: Wrapper methods that consumes the **tiny-skia** `2D rendering engine`.\n* orbtk_widgets: sub-crate providing the standard OrbTk `widget library` and and `theming support`.\n\n## Inspirations\n\n* [Flutter](https://flutter.io/)\n* [React](https://reactjs.org/)\n* [Yew](https://github.com/DenisKolodin/yew)\n\n## Showcases\n\n* [Plural Planner](https://codeberg.org/flovanco/Plural): Task app\n* [Space Editor](https://codeberg.org/flovanco/space-editor): 2D Tile Map Editor compatible with OrbGame\n* [twin-commander](https://github.com/kivimango/twin-commander): A twin-panel file manager specifically for the Redox OS\n\n## Contribution\n\nIf you want to help and improve OrbTk submit your feedback via the\n[issue tracker](https://github.com/redox-os/orbtk/issues). All pull\nrequests are welcome and will be reviewed. You can also discuss with\nother OrbTk developers via the [Redox chat\ninterface](https://redox-os.org/community/). Please join the **orbtk**\nchannel.\n\n#### Contribution check list\n\n* Please document for all your `pub` structs, traits and functions.\n* Please add suitable tests methods.\n* Use static &str for widget ids and new style definitions.\n* For widget development check ProgressBar or Slider as an example.\n* Add your changes inside  CHANGELOG.md\n* Extend the example section to show consumption of your code.\n* Always run `cargo fmt` before uploading.\n* Please run `cargo cippy` before uploading.\n* Create the PR using our template.\n\n## License\n\n<!-- License source -->\n[Logo-CC_BY]: https://i.creativecommons.org/l/by/4.0/88x31.png \"Creative Common Logo\"\n[License-CC_BY]: https://creativecommons.org/licenses/by/4.0/legalcode \"Creative Common License\"\n\nSource-Code is licensed under MIT license ([LICENSE](LICENSE)).\n\n© 2017-2022 Jeremy Soller<br>\n© 2018-2022 Florian Blasius\n\nThis documentation work is licensed under a [Creative Common License 4.0][License-CC_BY]\n\n![Creative Common Logo][Logo-CC_BY]\n\n© 2020-2022 Ralf Zerres\n"
        },
        {
          "name": "clippy.toml",
          "type": "blob",
          "size": 0.0634765625,
          "content": "too-many-arguments-threshold = 10\ntype-complexity-threshold = 400"
        },
        {
          "name": "orbtk",
          "type": "tree",
          "content": null
        },
        {
          "name": "orbtk_core",
          "type": "tree",
          "content": null
        },
        {
          "name": "orbtk_orbclient",
          "type": "tree",
          "content": null
        },
        {
          "name": "orbtk_tinyskia",
          "type": "tree",
          "content": null
        },
        {
          "name": "orbtk_widgets",
          "type": "tree",
          "content": null
        },
        {
          "name": "policies",
          "type": "tree",
          "content": null
        },
        {
          "name": "proc_macros",
          "type": "tree",
          "content": null
        },
        {
          "name": "utils",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}