{
  "metadata": {
    "timestamp": 1736709035623,
    "page": 129,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjEzMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "GetFirefly/firefly",
      "stars": 3601,
      "defaultBranch": "develop",
      "files": [
        {
          "name": ".cargo",
          "type": "tree",
          "content": null
        },
        {
          "name": ".dockerignore",
          "type": "blob",
          "size": 0.013671875,
          "content": "/target\n/.git\n"
        },
        {
          "name": ".envrc",
          "type": "blob",
          "size": 0.111328125,
          "content": "export LLVM_PREFIX=${XDG_DATA_HOME}/llvm/firefly\nexport FIREFLY_BUILD_TYPE=static\nexport LLVM_LINK_LLVM_DYLIB=OFF\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.1767578125,
          "content": "/target\n!/.vscode/settings.json\n!/.vscode/tasks.json\n!/.vscode/launch.json\n/.vscode/*\n/_build\n/bin/firefly\n/bin/firefly-make\n\n/*.beam\n\n.ccls-cache\n\ntest/*\n!test/lit/\n!test/samples/\n"
        },
        {
          "name": ".rustfmt.toml",
          "type": "blob",
          "size": 1.6357421875,
          "content": "edition = \"2021\"\n\n# General Settings\n\nversion = \"One\"\nemit_mode = \"Files\"\nmake_backup = false\nignore = []\nskip_children = false\nhide_parse_errors = false\nerror_on_line_overflow = false\nerror_on_unformatted = false\nuse_small_heuristics = \"Default\"\ncolor = \"Auto\"\nunstable_features = true\ndisable_all_formatting = false\n\n# Spacing and Line\n\nmax_width = 100\nhard_tabs = false\ntab_spaces = 4\nnewline_style = \"Unix\"\nindent_style = \"Block\"\nspace_before_colon = false\nspace_after_colon = true\nspaces_around_ranges = false\nempty_item_single_line = true\nstruct_lit_single_line = true\nfn_single_line = false\n\n# Comments\n\ncomment_width = 100\nwrap_comments = true\nnormalize_comments = false\nnormalize_doc_attributes = false\n\n# Strings\n\nformat_strings = false\n\n# Macros\n\nformat_macro_matchers = false\nformat_macro_bodies = true\n\n# Imports\n\nimports_indent = \"Block\"\nimports_layout = \"Mixed\"\nreorder_imports = true\nreorder_modules = true\n\n# Traits\n\nreorder_impl_items = false\nwhere_single_line = false\n\n# Match\n\nmatch_arm_blocks = true\n\n# Blocks\n\nforce_multiline_blocks = false\nblank_lines_upper_bound = 1\nblank_lines_lower_bound = 0\n\n# Braces\n\nbrace_style = \"SameLineWhere\"\ncontrol_brace_style = \"AlwaysSameLine\"\n\n# Trailing Separators\n\ntrailing_semicolon = true\ntrailing_comma = \"Vertical\"\nmatch_block_trailing_comma = false\n\n# Misc.\n\nmerge_derives = true\nuse_try_shorthand = true\nuse_field_init_shorthand = true\ntype_punctuation_density = \"Wide\"\nbinop_separator = \"Front\"\nremove_nested_parens = true\ncombine_control_expr = true\noverflow_delimited_expr = false\nstruct_field_align_threshold = 0\nenum_discrim_align_threshold = 0\nforce_explicit_abi = true\ncondense_wildcard_suffixes = false\n"
        },
        {
          "name": ".vscode",
          "type": "tree",
          "content": null
        },
        {
          "name": "Cargo.lock",
          "type": "blob",
          "size": 49.5185546875,
          "content": "# This file is automatically @generated by Cargo.\n# It is not intended for manual editing.\nversion = 3\n\n[[package]]\nname = \"Inflector\"\nversion = \"0.11.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"fe438c63458706e03479442743baae6c88256498e6431708f6dfc520a26515d3\"\ndependencies = [\n \"lazy_static\",\n \"regex\",\n]\n\n[[package]]\nname = \"addr2line\"\nversion = \"0.19.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a76fd60b23679b7d19bd066031410fb7e458ccc5e958eb5c325888ce4baedc97\"\ndependencies = [\n \"gimli\",\n]\n\n[[package]]\nname = \"adler\"\nversion = \"1.0.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f26201604c87b1e01bd3d98f8d5d9a8fcbb815e8cedb41ffccbeb4bf593a35fe\"\n\n[[package]]\nname = \"adler32\"\nversion = \"1.2.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"aae1277d39aeec15cb388266ecc24b11c80469deae6067e17a1a7aa9e5c1f234\"\n\n[[package]]\nname = \"ahash\"\nversion = \"0.7.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"fcb51a0695d8f838b1ee009b3fbf66bda078cd64590202a864a8f3e8c4315c47\"\ndependencies = [\n \"getrandom\",\n \"once_cell\",\n \"version_check\",\n]\n\n[[package]]\nname = \"aho-corasick\"\nversion = \"0.7.20\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"cc936419f96fa211c1b9166887b38e5e40b19958e5b895be7c1f93adec7071ac\"\ndependencies = [\n \"memchr\",\n]\n\n[[package]]\nname = \"ansi_term\"\nversion = \"0.12.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d52a9bb7ec0cf484c551830a7ce27bd20d67eac647e1befb56b0be4ee39a55d2\"\ndependencies = [\n \"winapi\",\n]\n\n[[package]]\nname = \"anyhow\"\nversion = \"1.0.69\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"224afbd727c3d6e4b90103ece64b8d1b67fbb1973b1046c2281eed3f3803f800\"\n\n[[package]]\nname = \"archery\"\nversion = \"0.4.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"0a8da9bc4c4053ee067669762bcaeea6e241841295a2b6c948312dad6ef4cc02\"\ndependencies = [\n \"static_assertions\",\n]\n\n[[package]]\nname = \"ascii-canvas\"\nversion = \"3.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8824ecca2e851cec16968d54a01dd372ef8f95b244fb84b84e70128be347c3c6\"\ndependencies = [\n \"term\",\n]\n\n[[package]]\nname = \"atomig\"\nversion = \"0.4.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"fcecf20a3720c354e7648983ee8046436dea13caf0fe8f84a791c7fba456cf0f\"\n\n[[package]]\nname = \"atty\"\nversion = \"0.2.14\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d9b39be18770d11421cdb1b9947a45dd3f37e93092cbf377614828a319d5fee8\"\ndependencies = [\n \"hermit-abi 0.1.19\",\n \"libc\",\n \"winapi\",\n]\n\n[[package]]\nname = \"autocfg\"\nversion = \"1.1.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d468802bab17cbc0cc575e9b053f41e72aa36bfa6b7f55e3529ffa43161b97fa\"\n\n[[package]]\nname = \"backtrace\"\nversion = \"0.3.67\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"233d376d6d185f2a3093e58f283f60f880315b6c60075b01f36b3b85154564ca\"\ndependencies = [\n \"addr2line\",\n \"cc\",\n \"cfg-if\",\n \"libc\",\n \"miniz_oxide\",\n \"object\",\n \"rustc-demangle\",\n]\n\n[[package]]\nname = \"beef\"\nversion = \"0.5.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3a8241f3ebb85c056b509d4327ad0358fbbba6ffb340bf388f26350aeda225b1\"\n\n[[package]]\nname = \"bit-set\"\nversion = \"0.5.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"0700ddab506f33b20a03b13996eccd309a48e5ff77d0d95926aa0210fb4e95f1\"\ndependencies = [\n \"bit-vec\",\n]\n\n[[package]]\nname = \"bit-vec\"\nversion = \"0.6.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"349f9b6a179ed607305526ca489b34ad0a41aed5f7980fa90eb03160b69598fb\"\n\n[[package]]\nname = \"bitflags\"\nversion = \"1.3.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"bef38d45163c2f1dde094a7dfd33ccf595c92905c8f8f4fdc18d06fb1037718a\"\n\n[[package]]\nname = \"bumpalo\"\nversion = \"3.12.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"0d261e256854913907f67ed06efbc3338dfe6179796deefc1ff763fc1aee5535\"\n\n[[package]]\nname = \"byteorder\"\nversion = \"1.4.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"14c189c53d098945499cdfa7ecc63567cf3886b3332b312a5b4585d8d3a6a610\"\n\n[[package]]\nname = \"bytes\"\nversion = \"1.4.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"89b2fd2a0dcf38d7971e2194b6b6eebab45ae01067456a7fd93d5547a61b70be\"\n\n[[package]]\nname = \"cc\"\nversion = \"1.0.79\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"50d30906286121d95be3d479533b458f87493b30a4b5f79a607db8f5d11aa91f\"\n\n[[package]]\nname = \"cfg-if\"\nversion = \"1.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"baf1de4339761588bc0619e3cbc0120ee582ebb74b53b4efbf79117bd2da40fd\"\n\n[[package]]\nname = \"clap\"\nversion = \"2.34.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a0610544180c38b88101fecf2dd634b174a62eef6946f84dfc6a7127512b381c\"\ndependencies = [\n \"ansi_term\",\n \"atty\",\n \"bitflags\",\n \"strsim 0.8.0\",\n \"textwrap\",\n \"unicode-width\",\n \"vec_map\",\n]\n\n[[package]]\nname = \"cmake\"\nversion = \"0.1.49\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"db34956e100b30725f2eb215f90d4871051239535632f84fea3bc92722c66b7c\"\ndependencies = [\n \"cc\",\n]\n\n[[package]]\nname = \"codespan\"\nversion = \"0.11.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3362992a0d9f1dd7c3d0e89e0ab2bb540b7a95fea8cd798090e758fda2899b5e\"\ndependencies = [\n \"codespan-reporting\",\n]\n\n[[package]]\nname = \"codespan-reporting\"\nversion = \"0.11.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3538270d33cc669650c4b093848450d380def10c331d38c768e34cac80576e6e\"\ndependencies = [\n \"termcolor\",\n \"unicode-width\",\n]\n\n[[package]]\nname = \"concolor\"\nversion = \"0.0.11\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"318d6c16e73b3a900eb212ad6a82fc7d298c5ab8184c7a9998646455bc474a16\"\ndependencies = [\n \"bitflags\",\n \"concolor-query\",\n \"is-terminal\",\n]\n\n[[package]]\nname = \"concolor-query\"\nversion = \"0.1.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"82a90734b3d5dcf656e7624cca6bce9c3a90ee11f900e80141a7427ccfb3d317\"\n\n[[package]]\nname = \"cranelift-entity\"\nversion = \"0.81.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d84f8e8a408071d67f479a00c6d3da965b1f9b4b240b7e7e27edb1a34401b3cd\"\n\n[[package]]\nname = \"crc32fast\"\nversion = \"1.3.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b540bd8bc810d3885c6ea91e2018302f68baba2129ab3e88f32389ee9370880d\"\ndependencies = [\n \"cfg-if\",\n]\n\n[[package]]\nname = \"crossbeam\"\nversion = \"0.8.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"2801af0d36612ae591caa9568261fddce32ce6e08a7275ea334a06a4ad021a2c\"\ndependencies = [\n \"cfg-if\",\n \"crossbeam-channel\",\n \"crossbeam-deque\",\n \"crossbeam-epoch\",\n \"crossbeam-queue\",\n \"crossbeam-utils\",\n]\n\n[[package]]\nname = \"crossbeam-channel\"\nversion = \"0.5.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"c2dd04ddaf88237dc3b8d8f9a3c1004b506b54b3313403944054d23c0870c521\"\ndependencies = [\n \"cfg-if\",\n \"crossbeam-utils\",\n]\n\n[[package]]\nname = \"crossbeam-deque\"\nversion = \"0.8.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"715e8152b692bba2d374b53d4875445368fdf21a94751410af607a5ac677d1fc\"\ndependencies = [\n \"cfg-if\",\n \"crossbeam-epoch\",\n \"crossbeam-utils\",\n]\n\n[[package]]\nname = \"crossbeam-epoch\"\nversion = \"0.9.13\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"01a9af1f4c2ef74bb8aa1f7e19706bc72d03598c8a570bb5de72243c7a9d9d5a\"\ndependencies = [\n \"autocfg\",\n \"cfg-if\",\n \"crossbeam-utils\",\n \"memoffset 0.7.1\",\n \"scopeguard\",\n]\n\n[[package]]\nname = \"crossbeam-queue\"\nversion = \"0.3.8\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d1cfb3ea8a53f37c40dea2c7bedcbd88bdfae54f5e2175d6ecaff1c988353add\"\ndependencies = [\n \"cfg-if\",\n \"crossbeam-utils\",\n]\n\n[[package]]\nname = \"crossbeam-skiplist\"\nversion = \"0.1.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"883a5821d7d079fcf34ac55f27a833ee61678110f6b97637cc74513c0d0b42fc\"\ndependencies = [\n \"cfg-if\",\n \"crossbeam-epoch\",\n \"crossbeam-utils\",\n \"scopeguard\",\n]\n\n[[package]]\nname = \"crossbeam-utils\"\nversion = \"0.8.14\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"4fb766fa798726286dbbb842f174001dab8abc7b627a1dd86e0b7222a95d929f\"\ndependencies = [\n \"cfg-if\",\n]\n\n[[package]]\nname = \"crunchy\"\nversion = \"0.2.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"7a81dae078cea95a014a339291cec439d2f232ebe854a9d672b796c6afafa9b7\"\n\n[[package]]\nname = \"ctor\"\nversion = \"0.1.26\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"6d2301688392eb071b0bf1a37be05c469d3cc4dbbd95df672fe28ab021e6a096\"\ndependencies = [\n \"quote\",\n \"syn\",\n]\n\n[[package]]\nname = \"dashmap\"\nversion = \"4.0.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e77a43b28d0668df09411cb0bc9a8c2adc40f9a048afe863e05fd43251e8e39c\"\ndependencies = [\n \"cfg-if\",\n \"num_cpus\",\n]\n\n[[package]]\nname = \"diff\"\nversion = \"0.1.13\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"56254986775e3233ffa9c4d7d3faaf6d36a2c09d30b20687e9f88bc8bafc16c8\"\n\n[[package]]\nname = \"dirs\"\nversion = \"4.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ca3aa72a6f96ea37bbc5aa912f6788242832f75369bdfdadcb0e38423f100059\"\ndependencies = [\n \"dirs-sys\",\n]\n\n[[package]]\nname = \"dirs-next\"\nversion = \"2.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b98cf8ebf19c3d1b223e151f99a4f9f0690dca41414773390fc824184ac833e1\"\ndependencies = [\n \"cfg-if\",\n \"dirs-sys-next\",\n]\n\n[[package]]\nname = \"dirs-sys\"\nversion = \"0.3.7\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1b1d1d91c932ef41c0f2663aa8b0ca0342d444d842c06914aa0a7e352d0bada6\"\ndependencies = [\n \"libc\",\n \"redox_users\",\n \"winapi\",\n]\n\n[[package]]\nname = \"dirs-sys-next\"\nversion = \"0.1.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"4ebda144c4fe02d1f7ea1a7d9641b6fc6b580adcfa024ae48797ecdeb6825b4d\"\ndependencies = [\n \"libc\",\n \"redox_users\",\n \"winapi\",\n]\n\n[[package]]\nname = \"either\"\nversion = \"1.8.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"7fcaabb2fef8c910e7f4c7ce9f67a1283a1715879a7c230ca9d6d1ae31f16d91\"\n\n[[package]]\nname = \"ena\"\nversion = \"0.14.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b2e5d13ca2353ab7d0230988629def93914a8c4015f621f9b13ed2955614731d\"\ndependencies = [\n \"log\",\n]\n\n[[package]]\nname = \"env_logger\"\nversion = \"0.9.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a12e6657c4c97ebab115a42dcee77225f7f482cdd841cf7088c657a42e9e00e7\"\ndependencies = [\n \"atty\",\n \"humantime\",\n \"log\",\n \"regex\",\n \"termcolor\",\n]\n\n[[package]]\nname = \"errno\"\nversion = \"0.2.8\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f639046355ee4f37944e44f60642c6f3a7efa3cf6b78c78a0d989a8ce6c396a1\"\ndependencies = [\n \"errno-dragonfly\",\n \"libc\",\n \"winapi\",\n]\n\n[[package]]\nname = \"errno-dragonfly\"\nversion = \"0.1.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"aa68f1b12764fab894d2755d2518754e71b4fd80ecfb822714a1206c2aab39bf\"\ndependencies = [\n \"cc\",\n \"libc\",\n]\n\n[[package]]\nname = \"fastrand\"\nversion = \"1.9.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e51093e27b0797c359783294ca4f0a911c270184cb10f85783b118614a1501be\"\ndependencies = [\n \"instant\",\n]\n\n[[package]]\nname = \"firefly\"\nversion = \"0.1.0\"\ndependencies = [\n \"anyhow\",\n \"clap\",\n \"env_logger\",\n \"firefly_compiler\",\n \"firefly_crt\",\n \"firefly_emulator\",\n \"firefly_session\",\n \"firefly_util\",\n \"human-panic\",\n \"log\",\n]\n\n[[package]]\nname = \"firefly_alloc\"\nversion = \"0.1.0\"\ndependencies = [\n \"firefly_system\",\n \"intrusive-collections\",\n]\n\n[[package]]\nname = \"firefly_arena\"\nversion = \"0.1.0\"\n\n[[package]]\nname = \"firefly_beam\"\nversion = \"0.1.0\"\ndependencies = [\n \"anyhow\",\n \"byteorder\",\n \"firefly_intern\",\n \"firefly_number\",\n \"libflate\",\n \"thiserror\",\n]\n\n[[package]]\nname = \"firefly_binary\"\nversion = \"0.1.0\"\ndependencies = [\n \"anyhow\",\n \"half\",\n \"num-bigint\",\n \"num-traits\",\n \"paste\",\n \"static_assertions\",\n]\n\n[[package]]\nname = \"firefly_bytecode\"\nversion = \"0.1.0\"\ndependencies = [\n \"bitflags\",\n \"cfg-if\",\n \"firefly_arena\",\n \"firefly_binary\",\n \"firefly_number\",\n \"hashbrown\",\n \"rustc-hash\",\n \"smallvec\",\n]\n\n[[package]]\nname = \"firefly_compiler\"\nversion = \"0.1.0\"\ndependencies = [\n \"anyhow\",\n \"clap\",\n \"firefly_arena\",\n \"firefly_beam\",\n \"firefly_binary\",\n \"firefly_bytecode\",\n \"firefly_diagnostics\",\n \"firefly_intern\",\n \"firefly_linker\",\n \"firefly_llvm\",\n \"firefly_mlir\",\n \"firefly_number\",\n \"firefly_parser\",\n \"firefly_pass\",\n \"firefly_session\",\n \"firefly_syntax_base\",\n \"firefly_syntax_core\",\n \"firefly_syntax_erl\",\n \"firefly_syntax_kernel\",\n \"firefly_syntax_pp\",\n \"firefly_syntax_ssa\",\n \"firefly_target\",\n \"firefly_util\",\n \"lazy_static\",\n \"log\",\n \"num_cpus\",\n \"parking_lot\",\n \"rayon\",\n \"rustc-hash\",\n \"smallvec\",\n \"thiserror\",\n \"walkdir\",\n \"which\",\n]\n\n[[package]]\nname = \"firefly_compiler_macros\"\nversion = \"0.1.0\"\ndependencies = [\n \"Inflector\",\n \"proc-macro2\",\n \"quote\",\n \"syn\",\n]\n\n[[package]]\nname = \"firefly_crt\"\nversion = \"0.1.0\"\ndependencies = [\n \"firefly_rt\",\n]\n\n[[package]]\nname = \"firefly_diagnostics\"\nversion = \"0.1.0\"\ndependencies = [\n \"codespan\",\n \"codespan-reporting\",\n \"dashmap\",\n \"firefly_diagnostics_macros\",\n \"pretty_assertions\",\n \"unicode-width\",\n]\n\n[[package]]\nname = \"firefly_diagnostics_macros\"\nversion = \"0.1.0\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn\",\n]\n\n[[package]]\nname = \"firefly_emulator\"\nversion = \"0.1.0\"\ndependencies = [\n \"crossbeam\",\n \"dirs\",\n \"env_logger\",\n \"firefly_alloc\",\n \"firefly_arena\",\n \"firefly_binary\",\n \"firefly_bytecode\",\n \"firefly_crt\",\n \"firefly_number\",\n \"firefly_rt\",\n \"firefly_system\",\n \"intrusive-collections\",\n \"libc\",\n \"log\",\n \"rustc-hash\",\n \"signal-hook\",\n \"smallvec\",\n \"tokio\",\n]\n\n[[package]]\nname = \"firefly_intern\"\nversion = \"0.1.0\"\ndependencies = [\n \"Inflector\",\n \"firefly_diagnostics\",\n \"firefly_diagnostics_macros\",\n \"firefly_system\",\n \"smallstr\",\n \"smallvec\",\n \"toml\",\n]\n\n[[package]]\nname = \"firefly_linker\"\nversion = \"0.1.0\"\ndependencies = [\n \"anyhow\",\n \"cc\",\n \"firefly_diagnostics\",\n \"firefly_intern\",\n \"firefly_llvm\",\n \"firefly_session\",\n \"firefly_target\",\n \"firefly_util\",\n \"libc\",\n \"log\",\n \"tempfile\",\n \"thiserror\",\n]\n\n[[package]]\nname = \"firefly_llvm\"\nversion = \"0.1.0\"\ndependencies = [\n \"anyhow\",\n \"bitflags\",\n \"cc\",\n \"firefly_compiler_macros\",\n \"firefly_intern\",\n \"firefly_pass\",\n \"firefly_profiling\",\n \"firefly_session\",\n \"firefly_target\",\n \"firefly_util\",\n \"fxhash\",\n \"paste\",\n \"thiserror\",\n \"which\",\n]\n\n[[package]]\nname = \"firefly_macros_seq\"\nversion = \"0.3.1\"\n\n[[package]]\nname = \"firefly_mlir\"\nversion = \"0.1.0\"\ndependencies = [\n \"anyhow\",\n \"cc\",\n \"cmake\",\n \"firefly_binary\",\n \"firefly_compiler_macros\",\n \"firefly_diagnostics\",\n \"firefly_intern\",\n \"firefly_llvm\",\n \"firefly_number\",\n \"firefly_pass\",\n \"firefly_session\",\n \"firefly_target\",\n \"firefly_util\",\n \"paste\",\n \"rand\",\n \"thiserror\",\n \"which\",\n]\n\n[[package]]\nname = \"firefly_number\"\nversion = \"0.1.0\"\ndependencies = [\n \"half\",\n \"num-bigint\",\n \"num-integer\",\n \"num-traits\",\n]\n\n[[package]]\nname = \"firefly_parser\"\nversion = \"0.1.0\"\ndependencies = [\n \"firefly_util\",\n \"pretty_assertions\",\n \"thiserror\",\n]\n\n[[package]]\nname = \"firefly_pass\"\nversion = \"0.1.0\"\ndependencies = [\n \"anyhow\",\n]\n\n[[package]]\nname = \"firefly_profiling\"\nversion = \"0.1.0\"\ndependencies = [\n \"anyhow\",\n \"bitflags\",\n \"byteorder\",\n \"cfg-if\",\n \"fxhash\",\n \"log\",\n \"memmap\",\n \"parking_lot\",\n]\n\n[[package]]\nname = \"firefly_rt\"\nversion = \"0.1.0\"\ndependencies = [\n \"Inflector\",\n \"anyhow\",\n \"backtrace\",\n \"bitflags\",\n \"cfg-if\",\n \"crossbeam\",\n \"crossbeam-skiplist\",\n \"firefly_alloc\",\n \"firefly_arena\",\n \"firefly_binary\",\n \"firefly_bytecode\",\n \"firefly_macros_seq\",\n \"firefly_number\",\n \"firefly_system\",\n \"flurry\",\n \"glidesort\",\n \"hashbrown\",\n \"intrusive-collections\",\n \"libloading\",\n \"log\",\n \"paste\",\n \"rustc-demangle\",\n \"rustc-hash\",\n \"smallvec\",\n \"static_assertions\",\n \"termcolor\",\n \"toml\",\n]\n\n[[package]]\nname = \"firefly_session\"\nversion = \"0.1.0\"\ndependencies = [\n \"anyhow\",\n \"clap\",\n \"firefly_compiler_macros\",\n \"firefly_diagnostics\",\n \"firefly_intern\",\n \"firefly_parser\",\n \"firefly_syntax_pp\",\n \"firefly_target\",\n \"firefly_util\",\n \"log\",\n \"thiserror\",\n]\n\n[[package]]\nname = \"firefly_syntax_base\"\nversion = \"0.1.0\"\ndependencies = [\n \"bitflags\",\n \"firefly_binary\",\n \"firefly_compiler_macros\",\n \"firefly_diagnostics\",\n \"firefly_intern\",\n \"firefly_number\",\n \"lazy_static\",\n \"logos\",\n \"rpds\",\n \"thiserror\",\n]\n\n[[package]]\nname = \"firefly_syntax_core\"\nversion = \"0.1.0\"\ndependencies = [\n \"anyhow\",\n \"firefly_binary\",\n \"firefly_diagnostics\",\n \"firefly_intern\",\n \"firefly_pass\",\n \"firefly_syntax_base\",\n \"firefly_util\",\n \"rpds\",\n]\n\n[[package]]\nname = \"firefly_syntax_erl\"\nversion = \"0.1.0\"\ndependencies = [\n \"anyhow\",\n \"either\",\n \"firefly_beam\",\n \"firefly_binary\",\n \"firefly_diagnostics\",\n \"firefly_intern\",\n \"firefly_number\",\n \"firefly_parser\",\n \"firefly_pass\",\n \"firefly_syntax_base\",\n \"firefly_syntax_core\",\n \"firefly_syntax_pp\",\n \"firefly_util\",\n \"itertools\",\n \"lalrpop\",\n \"lalrpop-util\",\n \"lazy_static\",\n \"log\",\n \"paste\",\n \"pretty_assertions\",\n \"smallvec\",\n \"strsim 0.10.0\",\n \"thiserror\",\n]\n\n[[package]]\nname = \"firefly_syntax_kernel\"\nversion = \"0.1.0\"\ndependencies = [\n \"anyhow\",\n \"cranelift-entity\",\n \"firefly_binary\",\n \"firefly_diagnostics\",\n \"firefly_intern\",\n \"firefly_number\",\n \"firefly_pass\",\n \"firefly_syntax_base\",\n \"firefly_syntax_core\",\n \"firefly_syntax_ssa\",\n \"firefly_util\",\n \"log\",\n \"rpds\",\n \"smallvec\",\n \"thiserror\",\n]\n\n[[package]]\nname = \"firefly_syntax_pp\"\nversion = \"0.1.0\"\ndependencies = [\n \"anyhow\",\n \"firefly_beam\",\n \"firefly_diagnostics\",\n \"firefly_intern\",\n \"firefly_number\",\n \"firefly_parser\",\n \"firefly_util\",\n \"lalrpop\",\n \"lalrpop-util\",\n \"thiserror\",\n]\n\n[[package]]\nname = \"firefly_syntax_ssa\"\nversion = \"0.1.0\"\ndependencies = [\n \"anyhow\",\n \"cranelift-entity\",\n \"firefly_arena\",\n \"firefly_binary\",\n \"firefly_diagnostics\",\n \"firefly_intern\",\n \"firefly_number\",\n \"firefly_syntax_base\",\n \"firefly_util\",\n \"intrusive-collections\",\n \"paste\",\n]\n\n[[package]]\nname = \"firefly_system\"\nversion = \"0.1.0\"\ndependencies = [\n \"atomig\",\n \"cfg-if\",\n \"js-sys\",\n \"libc\",\n \"parking_lot\",\n \"parking_lot_core\",\n \"web-sys\",\n \"winapi\",\n]\n\n[[package]]\nname = \"firefly_target\"\nversion = \"0.1.0\"\ndependencies = [\n \"thiserror\",\n]\n\n[[package]]\nname = \"firefly_util\"\nversion = \"0.1.0\"\ndependencies = [\n \"anyhow\",\n \"atty\",\n \"cfg-if\",\n \"firefly_diagnostics\",\n \"glob\",\n \"libc\",\n \"parking_lot\",\n \"thiserror\",\n]\n\n[[package]]\nname = \"fixedbitset\"\nversion = \"0.4.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"0ce7134b9999ecaf8bcd65542e436736ef32ddca1b3e06094cb6ec5755203b80\"\n\n[[package]]\nname = \"flurry\"\nversion = \"0.4.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3e0afc943ef18eebf6bc3335daeb8d338202093d18444a1784ea7f57fe7680f8\"\ndependencies = [\n \"ahash\",\n \"num_cpus\",\n \"parking_lot\",\n \"seize\",\n]\n\n[[package]]\nname = \"fnv\"\nversion = \"1.0.7\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3f9eec918d3f24069decb9af1554cad7c880e2da24a9afd88aca000531ab82c1\"\n\n[[package]]\nname = \"fxhash\"\nversion = \"0.2.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"c31b6d751ae2c7f11320402d34e41349dd1016f8d5d45e48c4312bc8625af50c\"\ndependencies = [\n \"byteorder\",\n]\n\n[[package]]\nname = \"getrandom\"\nversion = \"0.2.8\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"c05aeb6a22b8f62540c194aac980f2115af067bfe15a0734d7277a768d396b31\"\ndependencies = [\n \"cfg-if\",\n \"libc\",\n \"wasi\",\n]\n\n[[package]]\nname = \"gimli\"\nversion = \"0.27.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ad0a93d233ebf96623465aad4046a8d3aa4da22d4f4beba5388838c8a434bbb4\"\n\n[[package]]\nname = \"glidesort\"\nversion = \"0.1.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f2e102e6eb644d3e0b186fc161e4460417880a0a0b87d235f2e5b8fb30f2e9e0\"\n\n[[package]]\nname = \"glob\"\nversion = \"0.3.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d2fabcfbdc87f4758337ca535fb41a6d701b65693ce38287d856d1674551ec9b\"\n\n[[package]]\nname = \"half\"\nversion = \"2.2.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"02b4af3693f1b705df946e9fe5631932443781d0aabb423b62fcd4d73f6d2fd0\"\ndependencies = [\n \"crunchy\",\n \"num-traits\",\n]\n\n[[package]]\nname = \"hashbrown\"\nversion = \"0.12.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8a9ee70c43aaf417c914396645a0fa852624801b24ebb7ae78fe8272889ac888\"\ndependencies = [\n \"ahash\",\n]\n\n[[package]]\nname = \"hermit-abi\"\nversion = \"0.1.19\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"62b467343b94ba476dcb2500d242dadbb39557df889310ac77c5d99100aaac33\"\ndependencies = [\n \"libc\",\n]\n\n[[package]]\nname = \"hermit-abi\"\nversion = \"0.2.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ee512640fe35acbfb4bb779db6f0d80704c2cacfa2e39b601ef3e3f47d1ae4c7\"\ndependencies = [\n \"libc\",\n]\n\n[[package]]\nname = \"hermit-abi\"\nversion = \"0.3.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"fed44880c466736ef9a5c5b5facefb5ed0785676d0c02d612db14e54f0d84286\"\n\n[[package]]\nname = \"human-panic\"\nversion = \"1.1.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"87eb03e654582b31967d414b86711a7bbd7c6b28a6b7d32857b7d1d45c0926f9\"\ndependencies = [\n \"backtrace\",\n \"concolor\",\n \"os_info\",\n \"serde\",\n \"serde_derive\",\n \"termcolor\",\n \"toml\",\n \"uuid\",\n]\n\n[[package]]\nname = \"humantime\"\nversion = \"2.1.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"9a3a5bfb195931eeb336b2a7b4d761daec841b97f947d34394601737a7bba5e4\"\n\n[[package]]\nname = \"indexmap\"\nversion = \"1.9.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1885e79c1fc4b10f0e172c475f458b7f7b93061064d98c3293e98c5ba0c8b399\"\ndependencies = [\n \"autocfg\",\n \"hashbrown\",\n]\n\n[[package]]\nname = \"instant\"\nversion = \"0.1.12\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"7a5bbe824c507c5da5956355e86a746d82e0e1464f65d862cc5e71da70e94b2c\"\ndependencies = [\n \"cfg-if\",\n]\n\n[[package]]\nname = \"intrusive-collections\"\nversion = \"0.9.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3f4f90afb01281fdeffb0f8e082d230cbe4f888f837cc90759696b858db1a700\"\ndependencies = [\n \"memoffset 0.8.0\",\n]\n\n[[package]]\nname = \"io-lifetimes\"\nversion = \"1.0.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1abeb7a0dd0f8181267ff8adc397075586500b81b28a73e8a0208b00fc170fb3\"\ndependencies = [\n \"libc\",\n \"windows-sys 0.45.0\",\n]\n\n[[package]]\nname = \"is-terminal\"\nversion = \"0.4.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"21b6b32576413a8e69b90e952e4a026476040d81017b80445deda5f2d3921857\"\ndependencies = [\n \"hermit-abi 0.3.1\",\n \"io-lifetimes\",\n \"rustix\",\n \"windows-sys 0.45.0\",\n]\n\n[[package]]\nname = \"itertools\"\nversion = \"0.10.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b0fd2260e829bddf4cb6ea802289de2f86d6a7a690192fbe91b3f46e0f2c8473\"\ndependencies = [\n \"either\",\n]\n\n[[package]]\nname = \"js-sys\"\nversion = \"0.3.61\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"445dde2150c55e483f3d8416706b97ec8e8237c307e5b7b4b8dd15e6af2a0730\"\ndependencies = [\n \"wasm-bindgen\",\n]\n\n[[package]]\nname = \"lalrpop\"\nversion = \"0.19.8\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b30455341b0e18f276fa64540aff54deafb54c589de6aca68659c63dd2d5d823\"\ndependencies = [\n \"ascii-canvas\",\n \"atty\",\n \"bit-set\",\n \"diff\",\n \"ena\",\n \"itertools\",\n \"lalrpop-util\",\n \"petgraph\",\n \"pico-args\",\n \"regex\",\n \"regex-syntax\",\n \"string_cache\",\n \"term\",\n \"tiny-keccak\",\n \"unicode-xid\",\n]\n\n[[package]]\nname = \"lalrpop-util\"\nversion = \"0.19.8\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"bcf796c978e9b4d983414f4caedc9273aa33ee214c5b887bd55fde84c85d2dc4\"\ndependencies = [\n \"regex\",\n]\n\n[[package]]\nname = \"lazy_static\"\nversion = \"1.4.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e2abad23fbc42b3700f2f279844dc832adb2b2eb069b2df918f455c4e18cc646\"\n\n[[package]]\nname = \"libc\"\nversion = \"0.2.139\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"201de327520df007757c1f0adce6e827fe8562fbc28bfd9c15571c66ca1f5f79\"\n\n[[package]]\nname = \"libflate\"\nversion = \"0.1.27\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d9135df43b1f5d0e333385cb6e7897ecd1a43d7d11b91ac003f4d2c2d2401fdd\"\ndependencies = [\n \"adler32\",\n \"crc32fast\",\n \"rle-decode-fast\",\n \"take_mut\",\n]\n\n[[package]]\nname = \"libloading\"\nversion = \"0.7.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b67380fd3b2fbe7527a606e18729d21c6f3951633d0500574c4dc22d2d638b9f\"\ndependencies = [\n \"cfg-if\",\n \"winapi\",\n]\n\n[[package]]\nname = \"libm\"\nversion = \"0.2.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"348108ab3fba42ec82ff6e9564fc4ca0247bdccdc68dd8af9764bbc79c3c8ffb\"\n\n[[package]]\nname = \"linux-raw-sys\"\nversion = \"0.1.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f051f77a7c8e6957c0696eac88f26b0117e54f52d3fc682ab19397a8812846a4\"\n\n[[package]]\nname = \"lock_api\"\nversion = \"0.4.9\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"435011366fe56583b16cf956f9df0095b405b82d76425bc8981c0e22e60ec4df\"\ndependencies = [\n \"autocfg\",\n \"scopeguard\",\n]\n\n[[package]]\nname = \"log\"\nversion = \"0.4.17\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"abb12e687cfb44aa40f41fc3978ef76448f9b6038cad6aef4259d3c095a2382e\"\ndependencies = [\n \"cfg-if\",\n]\n\n[[package]]\nname = \"logos\"\nversion = \"0.12.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"bf8b031682c67a8e3d5446840f9573eb7fe26efe7ec8d195c9ac4c0647c502f1\"\ndependencies = [\n \"logos-derive\",\n]\n\n[[package]]\nname = \"logos-derive\"\nversion = \"0.12.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a1d849148dbaf9661a6151d1ca82b13bb4c4c128146a88d05253b38d4e2f496c\"\ndependencies = [\n \"beef\",\n \"fnv\",\n \"proc-macro2\",\n \"quote\",\n \"regex-syntax\",\n \"syn\",\n]\n\n[[package]]\nname = \"memchr\"\nversion = \"2.5.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"2dffe52ecf27772e601905b7522cb4ef790d2cc203488bbd0e2fe85fcb74566d\"\n\n[[package]]\nname = \"memmap\"\nversion = \"0.7.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"6585fd95e7bb50d6cc31e20d4cf9afb4e2ba16c5846fc76793f11218da9c475b\"\ndependencies = [\n \"libc\",\n \"winapi\",\n]\n\n[[package]]\nname = \"memoffset\"\nversion = \"0.7.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"5de893c32cde5f383baa4c04c5d6dbdd735cfd4a794b0debdb2bb1b421da5ff4\"\ndependencies = [\n \"autocfg\",\n]\n\n[[package]]\nname = \"memoffset\"\nversion = \"0.8.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d61c719bcfbcf5d62b3a09efa6088de8c54bc0bfcd3ea7ae39fcc186108b8de1\"\ndependencies = [\n \"autocfg\",\n]\n\n[[package]]\nname = \"miniz_oxide\"\nversion = \"0.6.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b275950c28b37e794e8c55d88aeb5e139d0ce23fdbbeda68f8d7174abdf9e8fa\"\ndependencies = [\n \"adler\",\n]\n\n[[package]]\nname = \"mio\"\nversion = \"0.8.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"5b9d9a46eff5b4ff64b45a9e316a6d1e0bc719ef429cbec4dc630684212bfdf9\"\ndependencies = [\n \"libc\",\n \"log\",\n \"wasi\",\n \"windows-sys 0.45.0\",\n]\n\n[[package]]\nname = \"new_debug_unreachable\"\nversion = \"1.0.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e4a24736216ec316047a1fc4252e27dabb04218aa4a3f37c6e7ddbf1f9782b54\"\n\n[[package]]\nname = \"num-bigint\"\nversion = \"0.4.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f93ab6289c7b344a8a9f60f88d80aa20032336fe78da341afc91c8a2341fc75f\"\ndependencies = [\n \"autocfg\",\n \"num-integer\",\n \"num-traits\",\n]\n\n[[package]]\nname = \"num-integer\"\nversion = \"0.1.45\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"225d3389fb3509a24c93f5c29eb6bde2586b98d9f016636dff58d7c6f7569cd9\"\ndependencies = [\n \"autocfg\",\n \"num-traits\",\n]\n\n[[package]]\nname = \"num-traits\"\nversion = \"0.2.15\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"578ede34cf02f8924ab9447f50c28075b4d3e5b269972345e7e0372b38c6cdcd\"\ndependencies = [\n \"autocfg\",\n \"libm\",\n]\n\n[[package]]\nname = \"num_cpus\"\nversion = \"1.15.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"0fac9e2da13b5eb447a6ce3d392f23a29d8694bff781bf03a16cd9ac8697593b\"\ndependencies = [\n \"hermit-abi 0.2.6\",\n \"libc\",\n]\n\n[[package]]\nname = \"object\"\nversion = \"0.30.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ea86265d3d3dcb6a27fc51bd29a4bf387fae9d2986b823079d4986af253eb439\"\ndependencies = [\n \"memchr\",\n]\n\n[[package]]\nname = \"once_cell\"\nversion = \"1.17.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b7e5500299e16ebb147ae15a00a942af264cf3688f47923b8fc2cd5858f23ad3\"\n\n[[package]]\nname = \"os_info\"\nversion = \"2.0.8\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d2cc1b4330bb29087e791ae2a5cf56be64fb8946a4ff5aec2ba11c6ca51f5d60\"\ndependencies = [\n \"log\",\n \"serde\",\n \"winapi\",\n]\n\n[[package]]\nname = \"output_vt100\"\nversion = \"0.1.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"628223faebab4e3e40667ee0b2336d34a5b960ff60ea743ddfdbcf7770bcfb66\"\ndependencies = [\n \"winapi\",\n]\n\n[[package]]\nname = \"panic\"\nversion = \"0.1.0\"\ndependencies = [\n \"cfg-if\",\n \"libc\",\n \"unwind\",\n]\n\n[[package]]\nname = \"parking_lot\"\nversion = \"0.12.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3742b2c103b9f06bc9fff0a37ff4912935851bee6d36f3c02bcc755bcfec228f\"\ndependencies = [\n \"lock_api\",\n \"parking_lot_core\",\n]\n\n[[package]]\nname = \"parking_lot_core\"\nversion = \"0.9.7\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"9069cbb9f99e3a5083476ccb29ceb1de18b9118cafa53e90c9551235de2b9521\"\ndependencies = [\n \"cfg-if\",\n \"libc\",\n \"redox_syscall\",\n \"smallvec\",\n \"windows-sys 0.45.0\",\n]\n\n[[package]]\nname = \"paste\"\nversion = \"1.0.11\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d01a5bd0424d00070b0098dd17ebca6f961a959dead1dbcbbbc1d1cd8d3deeba\"\n\n[[package]]\nname = \"petgraph\"\nversion = \"0.6.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"4dd7d28ee937e54fe3080c91faa1c3a46c06de6252988a7f4592ba2310ef22a4\"\ndependencies = [\n \"fixedbitset\",\n \"indexmap\",\n]\n\n[[package]]\nname = \"phf_shared\"\nversion = \"0.10.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b6796ad771acdc0123d2a88dc428b5e38ef24456743ddb1744ed628f9815c096\"\ndependencies = [\n \"siphasher\",\n]\n\n[[package]]\nname = \"pico-args\"\nversion = \"0.4.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"db8bcd96cb740d03149cbad5518db9fd87126a10ab519c011893b1754134c468\"\n\n[[package]]\nname = \"pin-project-lite\"\nversion = \"0.2.9\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e0a7ae3ac2f1173085d398531c705756c94a4c56843785df85a60c1a0afac116\"\n\n[[package]]\nname = \"ppv-lite86\"\nversion = \"0.2.17\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"5b40af805b3121feab8a3c29f04d8ad262fa8e0561883e7653e024ae4479e6de\"\n\n[[package]]\nname = \"precomputed-hash\"\nversion = \"0.1.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"925383efa346730478fb4838dbe9137d2a47675ad789c546d150a6e1dd4ab31c\"\n\n[[package]]\nname = \"pretty_assertions\"\nversion = \"1.3.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a25e9bcb20aa780fd0bb16b72403a9064d6b3f22f026946029acb941a50af755\"\ndependencies = [\n \"ctor\",\n \"diff\",\n \"output_vt100\",\n \"yansi\",\n]\n\n[[package]]\nname = \"proc-macro2\"\nversion = \"1.0.51\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"5d727cae5b39d21da60fa540906919ad737832fe0b1c165da3a34d6548c849d6\"\ndependencies = [\n \"unicode-ident\",\n]\n\n[[package]]\nname = \"quote\"\nversion = \"1.0.23\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8856d8364d252a14d474036ea1358d63c9e6965c8e5c1885c18f73d70bff9c7b\"\ndependencies = [\n \"proc-macro2\",\n]\n\n[[package]]\nname = \"rand\"\nversion = \"0.8.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"34af8d1a0e25924bc5b7c43c079c942339d8f0a8b57c39049bef581b46327404\"\ndependencies = [\n \"libc\",\n \"rand_chacha\",\n \"rand_core\",\n]\n\n[[package]]\nname = \"rand_chacha\"\nversion = \"0.3.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e6c10a63a0fa32252be49d21e7709d4d4baf8d231c2dbce1eaa8141b9b127d88\"\ndependencies = [\n \"ppv-lite86\",\n \"rand_core\",\n]\n\n[[package]]\nname = \"rand_core\"\nversion = \"0.6.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ec0be4795e2f6a28069bec0b5ff3e2ac9bafc99e6a9a7dc3547996c5c816922c\"\ndependencies = [\n \"getrandom\",\n]\n\n[[package]]\nname = \"rayon\"\nversion = \"1.6.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"6db3a213adf02b3bcfd2d3846bb41cb22857d131789e01df434fb7e7bc0759b7\"\ndependencies = [\n \"either\",\n \"rayon-core\",\n]\n\n[[package]]\nname = \"rayon-core\"\nversion = \"1.10.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"356a0625f1954f730c0201cdab48611198dc6ce21f4acff55089b5a78e6e835b\"\ndependencies = [\n \"crossbeam-channel\",\n \"crossbeam-deque\",\n \"crossbeam-utils\",\n \"num_cpus\",\n]\n\n[[package]]\nname = \"redox_syscall\"\nversion = \"0.2.16\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"fb5a58c1855b4b6819d59012155603f0b22ad30cad752600aadfcb695265519a\"\ndependencies = [\n \"bitflags\",\n]\n\n[[package]]\nname = \"redox_users\"\nversion = \"0.4.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b033d837a7cf162d7993aded9304e30a83213c648b6e389db233191f891e5c2b\"\ndependencies = [\n \"getrandom\",\n \"redox_syscall\",\n \"thiserror\",\n]\n\n[[package]]\nname = \"regex\"\nversion = \"1.7.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"48aaa5748ba571fb95cd2c85c09f629215d3a6ece942baa100950af03a34f733\"\ndependencies = [\n \"aho-corasick\",\n \"memchr\",\n \"regex-syntax\",\n]\n\n[[package]]\nname = \"regex-syntax\"\nversion = \"0.6.28\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"456c603be3e8d448b072f410900c09faf164fbce2d480456f50eea6e25f9c848\"\n\n[[package]]\nname = \"rle-decode-fast\"\nversion = \"1.0.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3582f63211428f83597b51b2ddb88e2a91a9d52d12831f9d08f5e624e8977422\"\n\n[[package]]\nname = \"rpds\"\nversion = \"0.11.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b4ef5140bcb576bfd6d56cd2de709a7d17851ac1f3805e67fe9d99e42a11821f\"\ndependencies = [\n \"archery\",\n]\n\n[[package]]\nname = \"rustc-demangle\"\nversion = \"0.1.21\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"7ef03e0a2b150c7a90d01faf6254c9c48a41e95fb2a8c2ac1c6f0d2b9aefc342\"\n\n[[package]]\nname = \"rustc-hash\"\nversion = \"1.1.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"08d43f7aa6b08d49f382cde6a7982047c3426db949b1424bc4b7ec9ae12c6ce2\"\n\n[[package]]\nname = \"rustix\"\nversion = \"0.36.8\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f43abb88211988493c1abb44a70efa56ff0ce98f233b7b276146f1f3f7ba9644\"\ndependencies = [\n \"bitflags\",\n \"errno\",\n \"io-lifetimes\",\n \"libc\",\n \"linux-raw-sys\",\n \"windows-sys 0.45.0\",\n]\n\n[[package]]\nname = \"rustversion\"\nversion = \"1.0.11\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"5583e89e108996506031660fe09baa5011b9dd0341b89029313006d1fb508d70\"\n\n[[package]]\nname = \"same-file\"\nversion = \"1.0.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"93fc1dc3aaa9bfed95e02e6eadabb4baf7e3078b0bd1b4d7b6b0b68378900502\"\ndependencies = [\n \"winapi-util\",\n]\n\n[[package]]\nname = \"scopeguard\"\nversion = \"1.1.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d29ab0c6d3fc0ee92fe66e2d99f700eab17a8d57d1c1d3b748380fb20baa78cd\"\n\n[[package]]\nname = \"seize\"\nversion = \"0.2.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"0e5739de653b129b0a59da381599cf17caf24bc586f6a797c52d3d6147c5b85a\"\ndependencies = [\n \"num_cpus\",\n \"once_cell\",\n]\n\n[[package]]\nname = \"serde\"\nversion = \"1.0.152\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"bb7d1f0d3021d347a83e556fc4683dea2ea09d87bccdf88ff5c12545d89d5efb\"\ndependencies = [\n \"serde_derive\",\n]\n\n[[package]]\nname = \"serde_derive\"\nversion = \"1.0.152\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"af487d118eecd09402d70a5d72551860e788df87b464af30e5ea6a38c75c541e\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn\",\n]\n\n[[package]]\nname = \"signal-hook\"\nversion = \"0.3.15\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"732768f1176d21d09e076c23a93123d40bba92d50c4058da34d45c8de8e682b9\"\ndependencies = [\n \"libc\",\n \"signal-hook-registry\",\n]\n\n[[package]]\nname = \"signal-hook-registry\"\nversion = \"1.4.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d8229b473baa5980ac72ef434c4415e70c4b5e71b423043adb4ba059f89c99a1\"\ndependencies = [\n \"libc\",\n]\n\n[[package]]\nname = \"siphasher\"\nversion = \"0.3.10\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"7bd3e3206899af3f8b12af284fafc038cc1dc2b41d1b89dd17297221c5d225de\"\n\n[[package]]\nname = \"smallstr\"\nversion = \"0.3.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"63b1aefdf380735ff8ded0b15f31aab05daf1f70216c01c02a12926badd1df9d\"\ndependencies = [\n \"serde\",\n \"smallvec\",\n]\n\n[[package]]\nname = \"smallvec\"\nversion = \"1.10.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a507befe795404456341dfab10cef66ead4c041f62b8b11bbb92bffe5d0953e0\"\n\n[[package]]\nname = \"socket2\"\nversion = \"0.4.7\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"02e2d2db9033d13a1567121ddd7a095ee144db4e1ca1b1bda3419bc0da294ebd\"\ndependencies = [\n \"libc\",\n \"winapi\",\n]\n\n[[package]]\nname = \"stackmaps\"\nversion = \"0.1.0\"\ndependencies = [\n \"cfg-if\",\n \"hashbrown\",\n \"lazy_static\",\n]\n\n[[package]]\nname = \"static_assertions\"\nversion = \"1.1.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a2eb9349b6444b326872e140eb1cf5e7c522154d69e7a0ffb0fb81c06b37543f\"\n\n[[package]]\nname = \"string_cache\"\nversion = \"0.8.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"213494b7a2b503146286049378ce02b482200519accc31872ee8be91fa820a08\"\ndependencies = [\n \"new_debug_unreachable\",\n \"once_cell\",\n \"parking_lot\",\n \"phf_shared\",\n \"precomputed-hash\",\n]\n\n[[package]]\nname = \"strsim\"\nversion = \"0.8.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8ea5119cdb4c55b55d432abb513a0429384878c15dde60cc77b1c99de1a95a6a\"\n\n[[package]]\nname = \"strsim\"\nversion = \"0.10.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"73473c0e59e6d5812c5dfe2a064a6444949f089e20eec9a2e5506596494e4623\"\n\n[[package]]\nname = \"syn\"\nversion = \"1.0.109\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"72b64191b275b66ffe2469e8af2c1cfe3bafa67b529ead792a6d0160888b4237\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"unicode-ident\",\n]\n\n[[package]]\nname = \"take_mut\"\nversion = \"0.2.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f764005d11ee5f36500a149ace24e00e3da98b0158b3e2d53a7495660d3f4d60\"\n\n[[package]]\nname = \"tempfile\"\nversion = \"3.4.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"af18f7ae1acd354b992402e9ec5864359d693cd8a79dcbef59f76891701c1e95\"\ndependencies = [\n \"cfg-if\",\n \"fastrand\",\n \"redox_syscall\",\n \"rustix\",\n \"windows-sys 0.42.0\",\n]\n\n[[package]]\nname = \"term\"\nversion = \"0.7.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"c59df8ac95d96ff9bede18eb7300b0fda5e5d8d90960e76f8e14ae765eedbf1f\"\ndependencies = [\n \"dirs-next\",\n \"rustversion\",\n \"winapi\",\n]\n\n[[package]]\nname = \"termcolor\"\nversion = \"1.2.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"be55cf8942feac5c765c2c993422806843c9a9a45d4d5c407ad6dd2ea95eb9b6\"\ndependencies = [\n \"winapi-util\",\n]\n\n[[package]]\nname = \"textwrap\"\nversion = \"0.11.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d326610f408c7a4eb6f51c37c330e496b08506c9457c9d34287ecc38809fb060\"\ndependencies = [\n \"unicode-width\",\n]\n\n[[package]]\nname = \"thiserror\"\nversion = \"1.0.38\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"6a9cd18aa97d5c45c6603caea1da6628790b37f7a34b6ca89522331c5180fed0\"\ndependencies = [\n \"thiserror-impl\",\n]\n\n[[package]]\nname = \"thiserror-impl\"\nversion = \"1.0.38\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1fb327af4685e4d03fa8cbcf1716380da910eeb2bb8be417e7f9fd3fb164f36f\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn\",\n]\n\n[[package]]\nname = \"tiny-keccak\"\nversion = \"2.0.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"2c9d3793400a45f954c52e73d068316d76b6f4e36977e3fcebb13a2721e80237\"\ndependencies = [\n \"crunchy\",\n]\n\n[[package]]\nname = \"tokio\"\nversion = \"1.25.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"c8e00990ebabbe4c14c08aca901caed183ecd5c09562a12c824bb53d3c3fd3af\"\ndependencies = [\n \"autocfg\",\n \"bytes\",\n \"libc\",\n \"memchr\",\n \"mio\",\n \"num_cpus\",\n \"parking_lot\",\n \"pin-project-lite\",\n \"signal-hook-registry\",\n \"socket2\",\n \"tokio-macros\",\n \"tracing\",\n \"windows-sys 0.42.0\",\n]\n\n[[package]]\nname = \"tokio-macros\"\nversion = \"1.8.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d266c00fde287f55d3f1c3e96c500c362a2b8c695076ec180f27918820bc6df8\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn\",\n]\n\n[[package]]\nname = \"toml\"\nversion = \"0.5.11\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f4f7f0dd8d50a853a531c426359045b1998f04219d88799810762cd4ad314234\"\ndependencies = [\n \"indexmap\",\n \"serde\",\n]\n\n[[package]]\nname = \"tracing\"\nversion = \"0.1.37\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8ce8c33a8d48bd45d624a6e523445fd21ec13d3653cd51f681abf67418f54eb8\"\ndependencies = [\n \"cfg-if\",\n \"pin-project-lite\",\n \"tracing-core\",\n]\n\n[[package]]\nname = \"tracing-core\"\nversion = \"0.1.30\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"24eb03ba0eab1fd845050058ce5e616558e8f8d8fca633e6b163fe25c797213a\"\ndependencies = [\n \"once_cell\",\n]\n\n[[package]]\nname = \"unicode-ident\"\nversion = \"1.0.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"84a22b9f218b40614adcb3f4ff08b703773ad44fa9423e4e0d346d5db86e4ebc\"\n\n[[package]]\nname = \"unicode-width\"\nversion = \"0.1.10\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"c0edd1e5b14653f783770bce4a4dabb4a5108a5370a5f5d8cfe8710c361f6c8b\"\n\n[[package]]\nname = \"unicode-xid\"\nversion = \"0.2.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f962df74c8c05a667b5ee8bcf162993134c104e96440b663c8daa176dc772d8c\"\n\n[[package]]\nname = \"unwind\"\nversion = \"0.1.0\"\ndependencies = [\n \"cc\",\n \"cfg-if\",\n \"libc\",\n]\n\n[[package]]\nname = \"uuid\"\nversion = \"0.8.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"bc5cf98d8186244414c848017f0e2676b3fcb46807f6668a97dfe67359a3c4b7\"\ndependencies = [\n \"getrandom\",\n]\n\n[[package]]\nname = \"vec_map\"\nversion = \"0.8.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f1bddf1187be692e79c5ffeab891132dfb0f236ed36a43c7ed39f1165ee20191\"\n\n[[package]]\nname = \"version_check\"\nversion = \"0.9.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"49874b5167b65d7193b8aba1567f5c7d93d001cafc34600cee003eda787e483f\"\n\n[[package]]\nname = \"walkdir\"\nversion = \"2.3.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"808cf2735cd4b6866113f648b791c6adc5714537bc222d9347bb203386ffda56\"\ndependencies = [\n \"same-file\",\n \"winapi\",\n \"winapi-util\",\n]\n\n[[package]]\nname = \"wasi\"\nversion = \"0.11.0+wasi-snapshot-preview1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"9c8d87e72b64a3b4db28d11ce29237c246188f4f51057d65a7eab63b7987e423\"\n\n[[package]]\nname = \"wasm-bindgen\"\nversion = \"0.2.84\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"31f8dcbc21f30d9b8f2ea926ecb58f6b91192c17e9d33594b3df58b2007ca53b\"\ndependencies = [\n \"cfg-if\",\n \"wasm-bindgen-macro\",\n]\n\n[[package]]\nname = \"wasm-bindgen-backend\"\nversion = \"0.2.84\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"95ce90fd5bcc06af55a641a86428ee4229e44e07033963a2290a8e241607ccb9\"\ndependencies = [\n \"bumpalo\",\n \"log\",\n \"once_cell\",\n \"proc-macro2\",\n \"quote\",\n \"syn\",\n \"wasm-bindgen-shared\",\n]\n\n[[package]]\nname = \"wasm-bindgen-macro\"\nversion = \"0.2.84\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"4c21f77c0bedc37fd5dc21f897894a5ca01e7bb159884559461862ae90c0b4c5\"\ndependencies = [\n \"quote\",\n \"wasm-bindgen-macro-support\",\n]\n\n[[package]]\nname = \"wasm-bindgen-macro-support\"\nversion = \"0.2.84\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"2aff81306fcac3c7515ad4e177f521b5c9a15f2b08f4e32d823066102f35a5f6\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn\",\n \"wasm-bindgen-backend\",\n \"wasm-bindgen-shared\",\n]\n\n[[package]]\nname = \"wasm-bindgen-shared\"\nversion = \"0.2.84\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"0046fef7e28c3804e5e38bfa31ea2a0f73905319b677e57ebe37e49358989b5d\"\n\n[[package]]\nname = \"web-sys\"\nversion = \"0.3.61\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e33b99f4b23ba3eec1a53ac264e35a755f00e966e0065077d6027c0f575b0b97\"\ndependencies = [\n \"js-sys\",\n \"wasm-bindgen\",\n]\n\n[[package]]\nname = \"which\"\nversion = \"4.4.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"2441c784c52b289a054b7201fc93253e288f094e2f4be9058343127c4226a269\"\ndependencies = [\n \"either\",\n \"libc\",\n \"once_cell\",\n]\n\n[[package]]\nname = \"winapi\"\nversion = \"0.3.9\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"5c839a674fcd7a98952e593242ea400abe93992746761e38641405d28b00f419\"\ndependencies = [\n \"winapi-i686-pc-windows-gnu\",\n \"winapi-x86_64-pc-windows-gnu\",\n]\n\n[[package]]\nname = \"winapi-i686-pc-windows-gnu\"\nversion = \"0.4.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ac3b87c63620426dd9b991e5ce0329eff545bccbbb34f3be09ff6fb6ab51b7b6\"\n\n[[package]]\nname = \"winapi-util\"\nversion = \"0.1.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"70ec6ce85bb158151cae5e5c87f95a8e97d2c0c4b001223f33a334e3ce5de178\"\ndependencies = [\n \"winapi\",\n]\n\n[[package]]\nname = \"winapi-x86_64-pc-windows-gnu\"\nversion = \"0.4.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"712e227841d057c1ee1cd2fb22fa7e5a5461ae8e48fa2ca79ec42cfc1931183f\"\n\n[[package]]\nname = \"windows-sys\"\nversion = \"0.42.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"5a3e1820f08b8513f676f7ab6c1f99ff312fb97b553d30ff4dd86f9f15728aa7\"\ndependencies = [\n \"windows_aarch64_gnullvm\",\n \"windows_aarch64_msvc\",\n \"windows_i686_gnu\",\n \"windows_i686_msvc\",\n \"windows_x86_64_gnu\",\n \"windows_x86_64_gnullvm\",\n \"windows_x86_64_msvc\",\n]\n\n[[package]]\nname = \"windows-sys\"\nversion = \"0.45.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"75283be5efb2831d37ea142365f009c02ec203cd29a3ebecbc093d52315b66d0\"\ndependencies = [\n \"windows-targets\",\n]\n\n[[package]]\nname = \"windows-targets\"\nversion = \"0.42.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8e2522491fbfcd58cc84d47aeb2958948c4b8982e9a2d8a2a35bbaed431390e7\"\ndependencies = [\n \"windows_aarch64_gnullvm\",\n \"windows_aarch64_msvc\",\n \"windows_i686_gnu\",\n \"windows_i686_msvc\",\n \"windows_x86_64_gnu\",\n \"windows_x86_64_gnullvm\",\n \"windows_x86_64_msvc\",\n]\n\n[[package]]\nname = \"windows_aarch64_gnullvm\"\nversion = \"0.42.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8c9864e83243fdec7fc9c5444389dcbbfd258f745e7853198f365e3c4968a608\"\n\n[[package]]\nname = \"windows_aarch64_msvc\"\nversion = \"0.42.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"4c8b1b673ffc16c47a9ff48570a9d85e25d265735c503681332589af6253c6c7\"\n\n[[package]]\nname = \"windows_i686_gnu\"\nversion = \"0.42.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"de3887528ad530ba7bdbb1faa8275ec7a1155a45ffa57c37993960277145d640\"\n\n[[package]]\nname = \"windows_i686_msvc\"\nversion = \"0.42.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"bf4d1122317eddd6ff351aa852118a2418ad4214e6613a50e0191f7004372605\"\n\n[[package]]\nname = \"windows_x86_64_gnu\"\nversion = \"0.42.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"c1040f221285e17ebccbc2591ffdc2d44ee1f9186324dd3e84e99ac68d699c45\"\n\n[[package]]\nname = \"windows_x86_64_gnullvm\"\nversion = \"0.42.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"628bfdf232daa22b0d64fdb62b09fcc36bb01f05a3939e20ab73aaf9470d0463\"\n\n[[package]]\nname = \"windows_x86_64_msvc\"\nversion = \"0.42.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"447660ad36a13288b1db4d4248e857b510e8c3a225c822ba4fb748c0aafecffd\"\n\n[[package]]\nname = \"yansi\"\nversion = \"0.5.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"09041cd90cf85f7f8b2df60c646f853b7f535ce68f85244eb6731cf89fa498ec\"\n"
        },
        {
          "name": "Cargo.toml",
          "type": "blob",
          "size": 2.451171875,
          "content": "[workspace]\n\nmembers = [\n  \"compiler/*\", \n  \"firefly\", \n  \"library/*\",\n  \"macros/*\",\n  \"runtimes/*\",\n]\n\ndefault-members = [ \n  \"firefly\" \n]\n\nexclude = [\n  \"native_implemented/*\",\n  \"examples\",\n  \"tools\"\n]\n\n[workspace.package]\nversion = \"0.1.0\"\nrust-version = \"1.66\"\nauthors = [\"Paul Schoenfelder <paulschoenfelder@gmail.com>\", \"Elle Imhoff <Kronic.Deth@gmail.com>\"]\ndescription = \"An alternative compiler and runtime for Erlang/OTP, with support for WebAssembly\"\nrepository = \"https://github.com/getfirefly/firefly\"\nhomepage = \"https://getfirefly.org\"\ndocumentation = \"https://github.com/getfirefly/firefly\"\ncategories = [\"Compilers\", \"WebAssembly\"]\nkeywords = [\"erlang\", \"otp\", \"beam\", \"elixir\", \"compiler\"]\nlicense = \"Apache-2.0 OR MIT\"\nreadme = \"README.md\"\nedition = \"2021\"\npublish = false\n\n[workspace.dependencies]\nanyhow = { version = \"1.0\", default-features = false }\nbacktrace = { version = \"0.3\", default-features = false }\nbitflags = \"1.3\"\nbyteorder = \"1.2\"\ncc = \"1.0\"\ncfg-if = \"1.0\"\nclap = \"2.34\"\ncranelift-entity = \"0.81\"\ndashmap = \"4.0\"\neither = \"1.8\"\nenv_logger = \"0.9\"\nfxhash = \"0.2\"\nhalf = { version = \"2.0\", default-features = false, features = [\"alloc\", \"num-traits\", \"use-intrinsics\"] }\nhashbrown = { version = \"0.12\", features = [\"nightly\"] }\nInflector = \"0.11\"\nintrusive-collections = { version = \"0.9\", features = [\"nightly\"] }\nitertools = \"0.10\"\nlazy_static = { version = \"1.4\", default-features = false }\nlalrpop = \"0.19\"\nlalrpop-util = \"0.19\"\nlibc = { version = \"0.2\", default-features = false }\nlog = \"0.4\"\nnum-traits = { version = \"0.2\", default-features = false, features = [\"i128\"] }\nnum-bigint = { version = \"0.4\", default-features = false }\nnum-integer = { version = \"0.1\", default-features = false, features = [\"i128\"] }\nparking_lot = \"0.12\"\nparking_lot_core = \"0.9\"\npaste = \"1.0\"\npretty_assertions = \"1.0\"\nrand = \"0.8\"\nrpds = { version = \"0.11\", default-features = false }\nrustc-hash = \"1.1\"\nsmallvec = { version = \"1.9\", features = [\"union\", \"const_generics\", \"const_new\", \"specialization\"] }\nsmallstr = { version = \"0.3\", features = [\"union\"] }\nstatic_assertions = \"1.1\"\nthiserror = \"1.0\"\ntoml = { version = \"0.5\", features = [\"preserve_order\"] }\nwhich = \"4.0\"\n\n# Use for workspace-level metadata useable from tools\n# [workspace.metadata.foo]\n# key = value\n\n[profile.release]\n# Experimentally determined to give the smallest size out of all `opt-level`s (0-3,'s','z') and\n# `lto`s (true and false) for `examples/spawn-chain/pkg/spawn_chaing_bg.wasm`\nopt-level = 2\nlto = false\n"
        },
        {
          "name": "LICENSE.md",
          "type": "blob",
          "size": 11.0810546875,
          "content": "                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"{}\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright 2018 Paul Schoenfelder\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n"
        },
        {
          "name": "Makefile.toml",
          "type": "blob",
          "size": 16.7802734375,
          "content": "env_scripts = [\n'''\n#!@duckscript\n\nllvm_prefix = get_env LLVM_PREFIX\nif is_empty \"${llvm_prefix}\"\n   data_home = get_env XDG_DATA_HOME\n   if is_empty \"${data_home}\"\n      home = get_env HOME\n      llvm_prefix = set \"${home}/.local/share/llvm/firefly\"\n   else\n      llvm_prefix = set \"${data_home}/llvm/firefly\"\n   end\nend\n\nif is_directory ${llvm_prefix}\n   set_env LLVM_PREFIX \"${llvm_prefix}\"\nelse\n   trigger_error \"Unable to locate LLVM. Export LLVM_PREFIX and try again\"\n   exit 1\nend\n\nset_env BUILD_FIREFLY false\n\ntask_name = get_env CARGO_MAKE_TASK\nif eq \"${task_name}\" firefly\n   set_env BUILD_FIREFLY true\n   set_env CARGO_MAKE_CARGO_PACKAGE firefly\n   exit 0\nelseif eq \"${task_name}\" default\n   set_env BUILD_FIREFLY true\n   set_env CARGO_MAKE_CARGO_PACKAGE firefly\n   exit 0\nend\n\ntask_args = get_env CARGO_MAKE_TASK_ARGS\nargv = split task_args \";\"\nargc = array_length ${argv}\nindices = range 0 ${argc}\npackage = set \"\"\nfor i in ${indices}\n    item = array_get ${argv} ${i}\n    if eq \"${item}\" \"-p\"\n      j = calc ${i} + 1\n      package = array_get ${argv} ${j}\n    elseif eq \"${item}\" \"--package\"\n      j = calc ${i} + 1\n      package = array_get ${argv} ${j}\n    end\n    if \"${package}\"\n      set_env CARGO_MAKE_CARGO_PACKAGE \"${package}\"\n      if eq \"${package}\" firefly\n        set_env BUILD_FIREFLY true\n      end\n      exit 0\n    end\nend\n'''\n]\n\n[config]\ndefault_to_workspace = false\nskip_core_tasks = true\nskip_git_env_info = true\nmodify_core_tasks = { private = true, namespace = \"default\" }\ninit_task = \"init\"\n\n[env]\nCARGO_MAKE_EXTEND_WORKSPACE_MAKEFILE = true\nCARGO_MAKE_CARGO_VERBOSE_FLAGS = { source = \"${CARGO_MAKE_CI}\", default_value = \"\", mapping = { \"true\" = \"--verbose\" } }\nCARGO_MAKE_RUST_SCRIPT_PROVIDER = \"rust-script\"\nCARGO_MAKE_USE_WORKSPACE_PROFILE = true\nCARGO_MAKE_CARGO_BUILD_TEST_FLAGS = \"--no-fail-fast\"\nCARGO_TARGET_DIR = { value = \"${CARGO_MAKE_WORKSPACE_WORKING_DIRECTORY}/target\", condition = { env_not_set = [\"CARGO_TARGET_DIR\"] } }\nCARGO_MAKE_TOOLCHAIN_DEFAULT = { source = \"${CARGO_MAKE_CI}\", default_value = \"nightly\", mapping = { \"true\" = \"nightly-2022-11-02\", \"false\" = \"nightly\" } }\nCARGO_MAKE_TOOLCHAIN = { value = \"${CARGO_MAKE_TOOLCHAIN_DEFAULT}\", condition = { env_not_set = [\"CARGO_MAKE_TOOLCHAIN\"] } }\nBACKTRACE_DEFAULT = { source = \"${CARGO_MAKE_CI}\", mapping = { \"true\" = \"1\", \"false\" = \"0\" } }\nRUST_BACKTRACE = { value = \"${BACKTRACE_DEFAULT}\", condition = { env_not_set = [\"RUST_BACKTRACE\"] } }\nGECKODRIVER_VERSION = \"0.27.0\"\nCHROMEDRIVER_VERSION = \"85.0.4183.87\"\nFIREFLY_BUILD_PROFILE = { source = \"${CARGO_MAKE_PROFILE}\", default_value = \"dev\", mapping = { \"development\" = \"dev\", \"production\" = \"release\" } }\nFIREFLY_BUILD_TYPE = { value = \"static\", condition = { env_not_set = [\"FIREFLY_BUILD_TYPE\"] } }\nFIREFLY_BUILD_LTO = { source = \"${FIREFLY_BUILD_PROFILE}\", default_value = \"false\", mapping = { \"dev\" = \"false\", \"release\" = \"true\" } }\nFIREFLY_LLVM_LTO = { source = \"${FIREFLY_BUILD_LTO}\", default_value = \"OFF\", mapping = { \"false\" = \"OFF\", \"true\" = \"ON\" } }\nFIREFLY_BIN_DIR = \"${CARGO_MAKE_WORKSPACE_WORKING_DIRECTORY}/bin\"\nFIREFLY_INSTALL_DIR = \"${FIREFLY_BIN_DIR}/${CARGO_MAKE_RUST_TARGET_TRIPLE}\"\nLLVM_BUILD_STATIC = { source = \"${FIREFLY_BUILD_TYPE}\", default_value = \"ON\", mapping = { \"dynamic\" = \"OFF\", \"static\" = \"ON\" } }\nLLVM_USE_LIBCXX = { source = \"${CARGO_MAKE_RUST_TARGET_VENDOR}\", default_value = \"OFF\", mapping = { \"apple\" = \"ON\" } }\nLLVM_LINK_LLVM_DYLIB = { source = \"${FIREFLY_BUILD_TYPE}\", default_value = \"OFF\", mapping = { \"dynamic\" = \"ON\", \"static\" = \"OFF\" } }\nLLVM_USE_SANITIZER = { source = \"${SANITIZER}\", default_value = \"\", mapping = { \"address\" = \"Address\", \"memory\" = \"Memory\" }, condition = { env_set = [\"SANITIZER\"] } }\n\n[tasks.init]\nrun_task = \"print-env\"\n\n[tasks.default]\ncategory = \"Build\"\ndescription = \"Default task builds the compiler\"\nalias = \"firefly\"\n\n[tasks.print-env]\ncategory = \"Tools\"\nrun_task = [{ name = [\"print-build-env\", \"print-ci-env\", \"print-rust-env\", \"print-cargo-env\"] }]\n\n[tasks.print-build-env]\nprivate = true\nscript = [\n'''\n#!@duckscript\necho \"*************************************\"\necho \"Build Environment:\"\necho \"    Task: ${CARGO_MAKE_TASK}\"\necho \"    Task Arguments: ${CARGO_MAKE_TASK_ARGS}\"\necho \"    Command: ${CARGO_MAKE_COMMAND}\"\necho \"    Working Directory: ${CARGO_MAKE_WORKING_DIRECTORY}\"\necho \"    Target Directory: ${CARGO_TARGET_DIR}\"\necho \"    Profile: ${FIREFLY_BUILD_PROFILE}\"\necho \"    Build Type: ${FIREFLY_BUILD_TYPE}\"\necho \"    LTO Enabled: ${FIREFLY_BUILD_LTO}\"\necho \"    Bin Directory: ${FIREFLY_BIN_DIR}\"\necho \"    Install Directory: ${FIREFLY_INSTALL_DIR}\"\necho \"    Target Triple: ${CARGO_MAKE_RUST_TARGET_TRIPLE}\"\necho \"\"\necho \"    RUST_BACKTRACE: ${RUST_BACKTRACE}\"\necho \"    GECKODRIVER_VERSION: ${GECKODRIVER_VERSION}\"\necho \"    CHROMEDRIVER_VERSION: ${CHROMEDRIVER_VERSION}\"\necho \"    FIREFLY_LLVM_LTO: ${FIREFLY_LLVM_LTO}\"\necho \"    LLVM_BUILD_STATIC: ${LLVM_BUILD_STATIC}\"\necho \"    LLVM_USE_LIBCXX: ${LLVM_USE_LIBCXX}\"\necho \"    LLVM_LINK_LLVM_DYLIB: ${LLVM_LINK_LLVM_DYLIB}\"\necho \"    SANITIZER: ${SANITIZER}\"\necho \"    LLVM_USE_SANITIZER: ${LLVM_USE_SANITIZER}\"\necho \"*************************************\"\n'''\n]\n\n[tasks.print-ci-env]\nprivate = true\ncondition = { env = { \"CARGO_MAKE_CI\" = \"true\" } }\nscript = [\n'''\n#!@duckscript\necho \"*************************************\"\necho \"CI:\"\necho \"    CI: ${CARGO_MAKE_CI}\"\necho \"    PR: ${CARGO_MAKE_PR}\"\necho \"    Branch Name: ${CARGO_MAKE_CI_BRANCH_NAME}\"\necho \"    CI Vendor: ${CARGO_MAKE_CI_VENDOR}\"\necho \"*************************************\"\n'''\n]\n\n[tasks.print-rust-env]\ncategory = \"Tools\"\ncondition = { env_set = [ \"CARGO_MAKE_RUST_CHANNEL\" ] }\nscript = [\n'''\n#!@duckscript\necho \"*************************************\"\necho \"Rust:\"\necho \"    Version: ${CARGO_MAKE_RUST_VERSION}\"\necho \"    Channel: ${CARGO_MAKE_RUST_CHANNEL}\"\necho \"    Toolchain: ${CARGO_MAKE_TOOLCHAIN}\"\necho \"    Target Arch: ${CARGO_MAKE_RUST_TARGET_ARCH}\"\necho \"    Target Env: ${CARGO_MAKE_RUST_TARGET_ENV}\"\necho \"    Target OS: ${CARGO_MAKE_RUST_TARGET_OS}\"\necho \"    Pointer Width: ${CARGO_MAKE_RUST_TARGET_POINTER_WIDTH}\"\necho \"    Target Triple: ${CARGO_MAKE_RUST_TARGET_TRIPLE}\"\necho \"*************************************\"\n'''\n]\n\n[tasks.print-cargo-env]\ncategory = \"Tools\"\ncondition = { env_set = [ \"CARGO_MAKE_CARGO_HOME\" ] }\nscript = [\n'''\n#!@duckscript\necho \"*************************************\"\necho \"Cargo:\"\necho \"    Home: ${CARGO_MAKE_CARGO_HOME}\"\necho \"    Profile: ${CARGO_MAKE_CARGO_PROFILE}\"\necho \"*************************************\"\n'''\n]\n\n[tasks.format]\ncategory = \"Development\"\ndependencies = [\"format-rust\", \"format-cpp\"]\n\n[tasks.check-format]\ndescription = \"Runs cargo fmt to check appropriate code format.\"\ncategory = \"Test\"\ncommand = \"cargo\"\nargs = [\"fmt\", \"--\", \"--check\"]\ndependencies = [\"install-rustfmt\"]\n\n[tasks.format-rust]\ncategory = \"Development\"\ndescription = \"Formats source code (Rust)\"\ncommand = \"cargo\"\nargs = [\"fmt\"]\ndependencies = [\"install-rustfmt\"]\n\n[tasks.format-cpp]\ncategory = \"Development\"\ndescription = \"Formats source code (C/C++)\"\nscript = ['''\n#!@duckscript\n\nresult = which clang-format\nif is_empty \"${result}\"\n  exit 1\nend\n\ncpp_files = glob_array \"${CARGO_MAKE_WORKSPACE_WORKING_DIRECTORY}/compiler/codegen_llvm/**/*.cpp\"\nh_files = glob_array \"${CARGO_MAKE_WORKSPACE_WORKING_DIRECTORY}/compiler/codegen_llvm/**/*.h\"\nfiles = array_concat ${cpp_files} ${h_files}\nfor file in ${files}\n    is_cached = contains \"${file}\" \".ccls-cache\"\n    if not ${is_cached}\n       result = exec clang-format -i --style=file --verbose \"${file}\"\n       if ${result.code}\n          echo \"${result.stderr}\"\n          exit ${result.code}\n       end\n    end\nend\n''']\n\n[tasks.install-rustfmt]\ncategory = \"Development\"\ndescription = \"Installs cargo rustfmt plugin.\"\nenv.CFG_RELEASE = { value = \"${CARGO_MAKE_RUST_VERSION}\", condition = { env_not_set = [\"CFG_RELEASE\"] } }\nenv.CFG_RELEASE_CHANNEL = { value = \"${CARGO_MAKE_RUST_CHANNEL}\", condition = { env_not_set = [\"CFG_RELEASE_CHANNEL\"] } }\ninstall_crate = { crate_name = \"rustfmt-nightly\", rustup_component_name = \"rustfmt\", binary = \"rustfmt\", test_arg = \"--help\" }\n\n[tasks.bloat]\ncategory = \"Development\"\ndescription = \"Run cargo-bloat\"\ncommand = \"cargo\"\nargs = [\"bloat\", \"${@}\"]\n\n[tasks.clean]\ncategory = \"Build\"\ndescription = \"Clean build artifacts\"\ncommand = \"cargo\"\nargs = [\"clean\"]\n\n[tasks.test]\ncategory = \"Test\"\ndescription = \"Runs all tests\"\ndependencies = [\"test-rust\", \"test-lit\", \"test-cleanup\"]\n\n[tasks.test-rust]\ncategory = \"Test\"\ndescription = \"Runs tests written in Rust\"\nenv = { RUSTFLAGS = \"-C link-args=-Wl,-rpath,${LLVM_PREFIX}/lib\" }\ncommand = \"rustup\"\nargs = [\"run\", \"${CARGO_MAKE_TOOLCHAIN}\", \"cargo\", \"-Z\", \"extra-link-arg\", \"test\", \"@@remove-empty(CARGO_MAKE_CARGO_VERBOSE_FLAGS)\", \"@@split(CARGO_MAKE_CARGO_BUILD_TEST_FLAGS, )\", \"${@}\"]\ndependencies = [\n  \"require-ninja\",\n  \"require-cmake\",\n]\n\n[tasks.test-lit]\ncategory = \"Test\"\ndescription = \"Runs file-based checks using lit\"\nenv = { RUSTFLAGS = \"-Z unstable-options -C link-args=-Wl,-rpath,${LLVM_PREFIX}/lib\" }\ncommand = \"bin/firefly-make\"\nargs = [\"lit\", \"-t\", \"erl\", \"-t\", \"P\", \"${CARGO_MAKE_WORKSPACE_WORKING_DIRECTORY}/test/lit\"]\ndependencies = [\n  \"firefly\",\n]\n\n[tasks.lit]\ncategory = \"Test\"\ndescription = \"Invokes lit with the given arguments\"\nenv = { RUSTFLAGS = \"-Z unstable-options -C link-args=-Wl,-rpath,${LLVM_PREFIX}/lib\" }\ncommand = \"bin/firefly-make\"\nargs = [\"lit\", \"${@}\"]\ndependencies = [\n  \"firefly\",\n]\n\n[tasks.test-cleanup]\nprivate = true\n#condition = { env = { CARGO_MAKE_CI = \"true\" } }\nscript = ['''\n#!@duckscript\n\nrm -r ${CARGO_MAKE_WORKSPACE_WORKING_DIRECTORY}/native_implemented/otp/tests/_build\n''']\n\n[tasks.rebuild]\ncommand = \"cargo\"\ncategory = \"Build\"\ndescription = \"Perform a clean build\"\ndependencies = [\"clean\", \"build\"]\n\n[tasks.check-build]\ncategory = \"Build\"\ndescription = \"Ensures code is formatted, builds firefly, and runs tests\"\nrun_task = { name = [\"check-format\", \"firefly\", \"test\"] }\n\n[tasks.check]\ncategory = \"Build\"\ndescription = \"Runs cargo check\"\ncondition = { env = {\"BUILD_FIREFLY\" = \"false\" } }\nenv = { RUSTFLAGS = \"-C link-args=-Wl,-rpath,${LLVM_PREFIX}/lib\" }\ncommand = \"rustup\"\nargs = [\"run\", \"${CARGO_MAKE_TOOLCHAIN}\", \"cargo\", \"-Z\", \"extra-link-arg\", \"check\", \"${@}\"]\ndependencies = [\n  \"require-ninja\",\n  \"require-cmake\",\n]\n\n[tasks.build]\ncategory = \"Build\"\ndescription = \"Build a package\"\ncondition = { env_set = [\"CARGO_MAKE_CARGO_PACKAGE\", \"BUILD_FIREFLY\"] }\nrun_task = [\n  { name = \"build-package\", condition = { env = { \"BUILD_FIREFLY\" = \"false\" } } },\n  { name = \"firefly\", condition = { env = { \"BUILD_FIREFLY\" = \"true\" } } }\n]\n\n[tasks.build-package]\nprivate = true\ndescription = \"Runs cargo build\"\ncategory = \"Build\"\ncommand = \"rustup\"\nenv = { RUSTFLAGS = \"-C link-args=-Wl,-rpath,${LLVM_PREFIX}/lib\" }\nargs = [\"run\", \"${CARGO_MAKE_TOOLCHAIN}\", \"cargo\", \"-Z\", \"extra-link-arg\", \"build\", \"--\", \"@@remove-empty(CARGO_MAKE_CARGO_VERBOSE_FLAGS)\", \"${@}\"]\ndependencies = [\n  \"require-ninja\",\n  \"require-cmake\",\n]\n\n[tasks.firefly]\ncategory = \"Build\"\ndescription = \"Builds the Firefly compiler\"\ncondition = { env = { \"BUILD_FIREFLY\" = \"true\" } }\nenv = { RUSTFLAGS = \"-Z unstable-options -C link-args=-Wl,-rpath,${LLVM_PREFIX}/lib\", CARGO_TARGET_DIR = \"${CARGO_MAKE_WORKSPACE_WORKING_DIRECTORY}/target\" }\ncommand = \"bin/firefly-make\"\nargs = [\"build\", \"@@remove-empty(CARGO_MAKE_CARGO_VERBOSE_FLAGS)\"]\ndependencies = [\n  \"require-ninja\",\n  \"require-cmake\",\n  \"firefly-make\",\n  \"firefly-lld\",\n]\n\n[tasks.firefly-make]\ncategory = \"Build\"\ndescription = \"Builds the firefly-make helper\"\ncommand = \"rustup\"\nenv = { CARGO_TARGET_DIR = \"${CARGO_MAKE_WORKSPACE_WORKING_DIRECTORY}/tools/firefly-make/target\" }\nargs = [\"run\", \"${CARGO_MAKE_TOOLCHAIN}\", \"cargo\", \"-Z\", \"unstable-options\", \"build\", \"--manifest-path\", \"tools/firefly-make/Cargo.toml\", \"--release\", \"--out-dir\", \"${CARGO_MAKE_WORKSPACE_WORKING_DIRECTORY}/bin\"]\n\n[tasks.firefly-lld]\ncategory = \"Tools\"\ndescription = \"Builds the firefly-lld wrapper\"\ncommand = \"rustup\"\nenv = { CARGO_TARGET_DIR = \"${CARGO_MAKE_WORKSPACE_WORKING_DIRECTORY}/tools/firefly-make/target\" }\nargs = [\"run\", \"${CARGO_MAKE_TOOLCHAIN}\", \"cargo\", \"-Z\", \"unstable-options\", \"build\", \"--manifest-path\", \"tools/firefly-lld/Cargo.toml\", \"--release\", \"--out-dir\", \"${CARGO_MAKE_WORKSPACE_WORKING_DIRECTORY}/target\"]\n\n[tasks.release]\ncategory = \"Release\"\ndescription = \"Packages a distribution of the Firefly compiler\"\ncommand = \"bin/firefly-make\"\nargs = [\"dist\", \"@@remove-empty(CARGO_MAKE_CARGO_VERBOSE_FLAGS)\"]\ndependencies = [\n  \"firefly\"\n]\n\n[tasks.require-ninja]\nprivate = true\nscript = ['''\n#!@duckscript\nresult = which ninja\nif is_empty ${result}\n  trigger_error \"Unable to locate ninja executable!\"\n  exit 1\nelse\n  exit 0\nend\n''']\n\n[tasks.require-cmake]\nprivate = true\nscript = ['''\n#!@duckscript\nresult = which cmake\nif is_empty ${result}\n  trigger_error \"Unable to locate cmake executable!\"\n  exit 1\nelse\n  exit 0\nend\n''']\n\n[tasks.install-wasm-target]\ncategory = \"Web\"\ndescription = \"Install wasm32-unknown-unknown target\"\ncommand = \"rustup\"\nargs = [\"target\", \"add\", \"--toolchain\", \"${CARGO_MAKE_TOOLCHAIN}\", \"wasm32-unknown-unknown\"]\ncondition_script = ['''\nresult = exec rustup target list --toolchain ${CARGO_MAKE_TOOLCHAIN} --installed\nif ${result.code}\n  exit ${result.code}\nend\nif contains ${result.stdout} \"wasm32-unknown-unknown\"\n  exit 0\nelse\n  exit 1\nend\n''']\n\n[tasks.docker]\ncategory = \"Tools\"\ndescription = \"Build the Firefly development Docker image\"\ncwd = \"${CARGO_MAKE_WORKSPACE_WORKING_DIRECTORY}/.github/workflows\"\ncommand = \"docker\"\nargs = [\"build\", \"--squash\", \"--force-rm\", \"-t\", \"kronicdeth/lumen-development:latest\", \"-f\", \"Dockerfile\", \".\"]\n\n[tasks.docker-release]\ncategory = \"Tools\"\ndescription = \"Publish the latest version of the Docker image\"\ncommand = \"docker\"\nargs = [\"push\", \"kronicdeth/lumen-development:latest\"]\n\n[tasks.linux-shell]\ncategory = \"Tools\"\ndescription = \"Starts a shell in the kronicdeth/lumen-development:latest Docker image\"\ncommand = \"docker\"\nargs = [\n    \"run\",\n    \"--privileged\",\n    \"--rm\",\n    \"-v\",\n    \"${CARGO_MAKE_WORKSPACE_WORKING_DIRECTORY}:/opt/firefly\",\n    \"-v\",\n    \"${CARGO_MAKE_WORKSPACE_WORKING_DIRECTORY}../llvm-project:/tmp/sources\",\n    \"-e\",\n    \"CARGO_TARGET_DIR=/var/firefly\",\n    \"-it\",\n    \"kronicdeth/lumen-development:latest\",\n    \"bash\",\n    \"-c\",\n    \"cd /opt/firefly; exec bash\"\n]\ndependencies = [\"prepare-docker-target-dir\"]\n\n[tasks.prepare-docker-target-dir]\nprivate = true\ncondition = { files_not_exist = [\"${CARGO_TARGET_DIR}/docker/target\"] }\nscript_runner = \"@duckscript\"\nscript = [\"mkdir ${CARGO_TARGET_DIR}/docker/target\"]\n\n[tasks.install-wasm-bindgen-cli]\ncategory = \"Web\"\ndescription = \"Install wasm-bindgen\"\ninstall_crate = { crate_name = \"wasm-bindgen-cli\", binary = \"wasm-bindgen\", test_arg = [\"--version\"] }\n\n[tasks.install-wasm-pack]\ncategory = \"Web\"\ndescription = \"Install wasm-pack\"\ninstall_crate = { crate_name = \"wasm-pack\", binary = \"wasm-pack\", test_arg = [\"-V\"] }\n\n[tasks.install-wasm-pack.linux]\ninstall_script = [\"curl https://rustwasm.github.io/wasm-pack/installer/init.sh -sSf | sh\"]\n\n[tasks.install-wasm-pack.mac]\ninstall_script = [\"curl https://rustwasm.github.io/wasm-pack/installer/init.sh -sSf | sh\"]\n\n[tasks.install-chrome-driver]\ncategory = \"Web\"\ndescription = \"Installs the Chrome test driver\"\ncondition_script = ['''\nresult = which chromedriver\nif is_empty ${result}\n  exit 1\nelse\n  exit 0\n''']\n\n[tasks.install-chrome-driver.mac]\ninstall_script = ['''\n#!@duckscript\npath = temp_file .zip\nresult = wget -O ${path} \"https://chromedriver.storage.googleapis.com/${CHROMEDRIVER_VERSION}/chromedriver_mac64.zip\"\nif not ${result}\n    trigger_error \"Failed to download chromedriver!\"\n    exit 1\nend\n\noutput = exec unzip ${path} \"chromedriver\" -d \"${CARGO_MAKE_CARGO_HOME}\"\nif ${output.code}\n  echo ${output.stderr}\n  exit ${output.code}\nend\n\nexec --fail-with-error chromedriver --version\n''']\n\n[tasks.install-gecko-driver]\ncategory = \"Web\"\ndescription = \"Installs the Firefox (Gecko) test driver\"\ncondition_script = ['''\nresult = which geckodriver\nif is_empty ${result}\n  exit 1\nelse\n  exit 0\n''']\n\n[tasks.install-gecko-driver.mac]\ninstall_script = ['''\n#!@duckscript\npath = temp_file .tar.gz\nresult = wget -O ${path} \"https://github.com/mozilla/geckodriver/releases/download/v${GECKODRIVER_VERSION}/geckodriver-v${GECKODRIVER_VERSION}-macos.tar.gz\"\nif not ${result}\n    trigger_error \"Failed to download geckodriver!\"\n    exit 1\nend\n\nresult = exec tar -xzvf ${path} -C \"${CARGO_MAKE_CARGO_HOME}/bin\"\nif ${result.code}\n  echo ${result.stderr}\n  exit ${result.code}\nend\n\nresult = which geckodriver\nif is_empty ${result}\n  exit 1\nelse\n  exit 0\nend\n''']\n\n[tasks.enable-safari-driver]\ncategory = \"Web\"\ndescription = \"Enables the Safari test driver\"\ncondition = { platforms = [\"mac\"] }\ncommand = \"sudo\"\nargs = [\"safaridriver\", \"--enable\"]\n\n[tasks.wasm-toolchain]\ncategory = \"Web\"\ndescription = \"Sets up the WebAssembly toolchain for development\"\nrun_task = { name = [\n    \"install-wasm-target\",\n    \"install-wasm-bindgen-cli\",\n    \"install-wasm-pack\",\n    \"install-gecko-driver\",\n    \"install-chrome-driver\",\n    \"enable-safari-driver\",\n  ], parallel = true }\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 25.736328125,
          "content": "# Firefly - A new compiler and runtime for BEAM languages\n\n[![x86_64-apple-darwin](https://github.com/GetFirefly/firefly/workflows/x86_64-apple-darwin%20compiler/badge.svg?branch=develop)](https://github.com/GetFirefly/firefly/actions?query=workflow%3A%22x86_64-apple-darwin+compiler%22+branch%3Adevelop)\n[![x86_64-unknown-linux-gnu](https://github.com/GetFirefly/firefly/workflows/x86_64-unknown-linux-gnu%20compiler/badge.svg?branch=develop)](https://github.com/GetFirefly/firefly/actions?query=workflow%3A%22x86_64-unknown-linux-gnu+compiler%22+branch%3Adevelop)\n\n* [Getting Started](#getting-started)\n  * [Installation](#install)\n  * [Usage](#usage)\n* [Contributing](#contributing)\n  * [Tools](#contrib-tools)\n  * [Building Firefly](#contrib-building-firefly)\n  * [Project Structure](#contrib-project)\n  * [Making Changes](#contrib-changes)\n* [About Firefly](#about)\n* [Goals](#goals)\n* [Non-Goals](#non-goals)\n* [Architecture](#architecture)\n\n<a name=\"getting-started\"/>\n\n## Getting Started\n\n<a name=\"install\"/>\n\n### Installation\n\n**NOTE: This section is a placeholder for the moment until we get our toolchain packaging implemented**\n\nTo use Firefly, you'll need to download our toolchain [here](https://github.com/GetFirefly/firefly/releases/), and install it like so:\n\n    > tar -xzf firefly.tar.gz /usr/local/\n\nThis will install the `firefly` executable to `/usr/local/bin/firefly` and various supporting files to appropriate locations under `/usr/local`.\nIf you install to a different target directory, make sure you add the `bin` folder to your PATH, for example:\n\n    > tar -xzf firefly.tar.gz $HOME/.local/share/firefly\n    > export PATH=$HOME/.local/share/firefly/bin:$PATH\n\n<a name=\"usage\"/>\n\n### Usage\n\n**NOTE:** This section reflects the way Firefly is supposed to work, but the current implementation may \nlack functionality described here. However, if you encounter something broken, feel free to open an issue\nif there isn't one already, and we'll ensure it gets tracked as we continue to improve the project.\n\nYou should now be able to run `firefly`, start by reviewing the output of the `help` command:\n\n    > firefly help\n\nThis will print out the various ways you can use the Firefly compiler. Obviously, the most interesting is the ability\nto compile some code, so let's see how that works.\n\nFirefly can compile executables or static/dynamic libraries. By default an executable is produced\nwhich acts very similar to an OTP release, but this behavior can be customized depending on how\nyou want the executable to be used. For example, when compiling an executable that you wish to use\nas a CLI tool, you might want a specific module/function to always be called with the arguments passed \nto the program when the system has booted. There are options to the `compile` command that allow you to\ndo this, and much more. It is even possible to provide your own init, and handle everything manually,\nincluding management of the core supervision tree.\n\n**NOTE:** Firefly does not do any dependency management itself, and we have not yet provided Rebar/Mix \nshims to integrate Firefly as a compiler with those tools, so compiling an application and all of its \ndependencies is still somewhat of a manual process. This will be addressed in the near future.\n\nFirefly allows you to compile Erlang sources a couple of ways, let's take a look at each:\n\n#### Compiling Files/Directories\n\n**NOTE:** Since Firefly is not compiling for a virtual machine, it does not produce BEAM bytecode like `erlc`\ndoes. Instead, it produces either an executable or a static/dynamic library depending on the type of \napplication being compiled, unless otherwise overridden by compiler options. By default, for\nOTP applications (i.e. apps which define the `mod` key in their application manifest), Firefly will produce \nan executable that runs that application much like an OTP release would. For library applications (i.e. apps \nthat do not define the `mod` key in their manifest), Firefly will produce a static library which can be linked \ninto an executable at another time. You may specify `--bin` to force production of an executable, or `--lib` to \nforce production of a library. If you want to compile a shared library, pass `--lib --dynamic`.\n\nYou can compile one or more Erlang source files by specifying their paths like so:\n\n    > firefly compile src/foo.erl src/bar.erl\n    \n**NOTE:** Since there is no application manifest available, these sources will be treated as modules of an anonymous \nlibrary application with the same name as the current working directory. As such, the output of the above\ncommand will be a static library.\n\nAlternatively, you can compile all the files found in one or more directories, by specifying their path:\n\n    > firefly compile app1/ app2/\n    \nIn this case, each directory will be treated as an application; if no `.app` or `.app.src` manifest is found in\na directory, then a new anonymous library application with the same name as the directory will be used as the\ncontainer for the sources in that directory. Since no root application manifest was provided, an anonymous library\napplication with the same name as the current working directory will be used as the \"root\" of the dependency tree.\nIn other words, if the name of our current directory is `myapp`, then in the example above, `app1` and `app2` will\nbe treated as dependencies of the `myapp` application, and will result in a static library being produced containing\nall three applications.\n\nWhen specifying files individually on the command line, you can control the default app properties using compiler flags,\nand use that to manage what type of output gets produced. For example:\n\n    > firefly compile --app-name myapp --app-module foo src/foo.erl src/bar.erl\n    \nThis is equivalent to:\n\n    > firefly compile --app src/myapp.app src/foo.erl src/bar.erl\n    \nWhere `src/myapp.app` looks like:\n\n    {application, myapp, [{mod, {foo, []}}]}.\n    \nIn both cases, the result is an executable containing the `myapp` application, which consists of two modules: `foo` and `bar`.\n\nLet's assume that `src/foo.erl` contains the following:\n\n    -module(foo).\n    -behaviour(application).\n    -export([start/2]).\n    \n    start(_, _) ->\n        erlang:display(\"hello\"),\n        bar:start_link().\n        \n    stop(_) -> ok.\n   \nThen we should see the following when we run our compiled executable:\n\n    > _build/firefly/arm64-apple-macosx11.0.0/myapp\n    \"hello\"\n\n**NOTE:** The directory under `_build/firefly` contains the target triple the executable was compiled for, and\nsince this example was compiled on an M1, the triple reflects that.\n\n#### Compiling Projects\n\nFirefly also recognizes the conventional Erlang project structure. For example, let's say you have an application called `hello`:\n\n    hello/\n    |-include/\n    |-src/\n      |-hello.app.src\n      |-hello.erl\n      |-hello_sup.erl\n\nWhere `hello.app` contains:\n\n    {application, hello, [{vsn, \"1.0\"}, {mod, {hello, []}}]}.\n\nand `hello.erl` contains:\n\n    -module(hello).\n    -behaviour(application).\n    -export([start/2]).\n\n    start(_, _) ->\n      erlang:display(<<\"hello world!\">>),\n      hello_sup:start_link().\n\nFrom the root of the `hello/` directory, you can compile this to an executable like so:\n\n    > firefly compile\n\nIf we run it, it should print our greeting:\n\n    > _build/firefly/arm64-apple-macosx11.0.0/hello\n    <<\"hello world!\">>\n\n**NOTE:** The directory under `_build/firefly` contains the target triple the executable was compiled for, and\nsince this example was compiled on an M1, the triple reflects that.\n\nIf you instead wish to compile `hello` as a library, you can compile with:\n\n    > firefly compile --lib\n\nThis will produce the static archive `_build/firefly/<target>/hello.a`.\n\nIf you want to compile an application and link in a previously-compiled library, you can do that like so:\n\n    # Assume we previously compiled an app called `foo` as a static archive and moved it to `_build/firefly/<target>/foo.a`\n    > firefly compile -L _build/firefly/<target>/ -lfoo\n    \nThis tells the compiler to use `_build/firefly/<target>/` as a search path for the linker, and to link the library named `foo`.\n\n#### Replacing Erlc\n\nNow that you've learned how to use Firefly to compile Erlang sources, what's the best approach for compiling a real world Erlang\nproject?\n\nLet's assume you are in a directory containing a standard Erlang project called `myapp`, and all of your dependencies are located \nin the `_build/default/lib` (the default for rebar3), then the following will compile your application and all its declared dependencies \n(based on the app manifest) into an executable:\n\n    > firefly compile --bin\n    \nThis works because Firefly has an application manifest to work from, and can infer the location of the sources for the dependencies.\n\nHowever, if your project is less conventional, then you might want to follow a different approach instead, by compiling\neach application to a library, and then compiling the root application as an executable while linking in all of the dependencies:\n\n    > firefly compile --lib -o foo.a deps/foo\n    > firefly compile --lib -o bar.a deps/bar\n    > firefly compile --bin -L. -lfoo -lbar src/\n    \nThe above assumes that `deps/foo` and `deps/bar` are directories containing application manifests, and compiles both to static libraries\nin the current working directory. The last line will create an executable containing the `foo` and `bar` applications, as well as the application\ncontained in `src`.\n\nThis method is more manual, but provides a lot of flexibility for those who need it.\n\n#### Barebones\n\n**NOTE:** This is primarily for experimentation and development work, but might be of interest to\nthose interested in implementing inits, or even alternative Erlang standard libraries.\n\nTo compile an executable which simply invokes `init:boot/1` and leaves the definition of that function\nup to you, you can use the following:\n\n    > firefly compile -C no_default_init --bin init.erl\n\nThe resulting executable performs none of the default initialization work that the standard runtime normally\ndoes, i.e. there is no init, so no application master/controller, and as a result, none of the normal OTP \nstartup sequence occurs. This does however provide you an opportunity to handle this yourself, however you like;\nalbeit with the major caveat that using any standard library modules without doing the proper initialization\nor providing the things needed by those modules will almost certainly fail. Erlang without the default\ninit is a very interesting environment to play in!\n\nAs an example, consider if `init.erl` above is defined as the following:\n\n```erlang\n-module(init).\n-exports([boot/1]).\n\nboot(Args) ->\n    erlang:display(Args).\n```\n\nRunning the resulting executable will print the default arguments the runtime provides to the init\nand then exit.\n\n<a name=\"contributing\"/>\n\n## Contributing\n\nIn order to build Firefly, or make changes to it, you'll need the following installed:\n\n<a name=\"contrib-tools\"/>\n\n### Tools\n\nFirst, you will need to install [rustup](https://rustup.rs/). Follow the instructions at that link.\n\nOnce you have installed `rustup`, you will need to install the nightly version\nof Rust (currently our CI builds against the 2022-08-08 nightly, specifically). We require\nnightly due to a large number of nightly features we use, as well as some\ndependencies for the WebAssembly targets that we make use of.\n\n    # to use the latest nightly\n    rustup default nightly\n\n    # or, in case of issues, install the specific nightly to match our CI\n    rustup default nightly-2022-11-02\n    export CARGO_MAKE_TOOLCHAIN=nightly-2022-11-02\n\nIn order to run various build tasks in the project, you'll need the [cargo-make](https://github.com/sagiegurari/cargo-make) plugin for Cargo. You can install it with:\n\n    cargo install cargo-make\n\nYou can see what tasks are available with `cargo make --print-steps`.\n\nYou may also want to install the following tools for editor support (`rustfmt` will be required on\nall pull requests!):\n\n    rustup component add rustfmt clippy\n\nNext, for wasm32 support, you will need to install the `wasm32` targets for the Rust toolchain:\n\n    rustup target add wasm32-unknown-unknown --toolchain <name of nightly you chose in the previous step>\n\n#### LLVM\n\nLLVM is used internally for the final code generation stage. In order to build the compiler, \nyou must have our expected version of LLVM (currently LLVM 15) installed somewhere locally.\n\nLLVM releases are posted [here](https://releases.llvm.org).\n\n###### Linux (x86_64)\n\nFollow the install instructions [here](https://apt.llvm.org) for Debian or Ubuntu.\nFor other distros, you are going to have to check whether our required LLVM version is\navailable via your package manager, and either use that, or build LLVM from source. Ideally\nyou won't need to do the latter, but you can also try slightly newer LLVM releases as well,\nif they are available, which may also work, but is not a supported configuration.\n\nOnce installed, make sure you export `LLVM_PREFIX` in your environment when working in the\nFirefly repo, e.g. building the compiler.\n\n###### macOS (arm64 and x86_64)\n\nGo to the releases page mentioned above, and follow the download link to the GitHub releases page.\nFrom here, you'll want to select the `clang+llvm` package which matches your platform, then follow\nthe instructions below. NOTE: The following instructions use the arm64 release for the example:\n\n    mkdir -p $XDG_DATA_HOME/llvm/\n    cd $XDG_DATA_HOME/llvm/\n    wget 'https://github.com/llvm/llvm-project/releases/download/llvmorg-15.0.7/clang+llvm-15.0.7-arm64-apple-darwin22.0.tar.xz'\n    tar -xzf clang+llvm-15.0.7-arm64-apple-darwin22.0.tar.xz\n    mv clang+llvm-15.0.7-arm64-apple-darwin22.0.tar.xz firefly\n    rm clang+llvm-15.0.7-arm64-apple-darwin22.0.tar.gz\n    cd -\n    export LLVM_PREFIX=\"${XDG_DATA_HOME}/llvm/firefly\"\n\n<a name=\"contrib-building-firefly\"/>\n\n### Building Firefly\n\nOnce LLVM is installed, you can build the `firefly` executable!\n\nNOTE: Firefly has components that need to be compiled with clang; On Linux, the default compiler is generally gcc. \nYou'll need to make sure to use `clang` instead. The LLVM toolchain should include clang, but you may\nneed to install it separately from your package manager. Then, export the following environment variables\nwhen building Firefly:\n\n    export CC=$XDG_DATA_HOME/llvm/firefly/bin/clang\n    export CXX=$XDG_DATA_HOME/llvm/firefly/bin/clang++\n\nTo build Firefly, run the following:\n\n    LLVM_PREFIX=$XDG_DATA_HOME/llvm/firefly cargo make firefly\n\nNOTE: If you have .direnv installed, run `direnv allow` in the project root, and you can omit all\nof the above environment variables, and instead modify the `.envrc` file if needed.\n\nThis will create the compiler executable and associated toolchain for the host\nmachine under `bin` in the root of the project. You can invoke `firefly` via the\nsymlink `bin/firefly`, e.g.:\n\n    bin/firefly --help\n\nYou can compile an Erlang file to an executable (currently only on x86_64/AArch64):\n\n    bin/firefly compile [<path/to/file_or_directory>..]\n\nThis will produce an executable with the same name as the source file in the\ncurrent working directory with no extension (except on Windows, where it will\nhave the `.exe` extension).\n\n**NOTE:** Firefly is still in a very experimental stage of development, so stability is not guaranteed.\n\n<a name=\"contrib-project\"/>\n\n### Project Structure\n\nFirefly is currently divided into three major components:\n\n#### Compiler\n\nThe Firefly compiler is composed of many small components, but the few most interesting are:\n\n- `firefly` is the crate for the `firefly` executable itself, but it is largely empty, \nmost of the meat is in other crates\n- `compiler/driver`, handles driving the compiler, i.e. parsing arguments, handling commands, \nand orchestrating tasks; it also defines the compiler pipeline. It currently also contains the\npasses which perform code generation.\n- `compiler/syntax_base`, contains common types and metadata used in many places across the compiler\n- `compiler/syntax_*`, these crates implement the frontend and middle-tier of the compiler.\nEach one provides an intermediate representation, semantic analysis, transforms to other representations,\noutput to a textual format, and in some cases, parsing. \n  * `syntax_erl` is the primary frontend of the compiler, which handles Erlang sources\n  * `syntax_pp`, is a frontend for Abstract Erlang Format, and converts to the AST from `syntax_erl`\n  * `syntax_core` is a high-level intermediate representation to which the AST is lowered after some initial\n  semantic analysis. Core is an extended form of lambda calculus, so is highly normalized, and is where we do\n  the remaining semantic analysis tasks. Core is also where comprehension and receive expressions are transformed\n  into their lower level representations. Core is logically split into two forms, \"internal\" and regular. The\n  internal form is used during initial lowering, before certain transformations have been applied. The regular form\n  of Core has certain properties which must be upheld, and the internal form does not enforce them.\n  * `syntax_kernel` is a specialized intermediate representation to which Core is lowered. It is completely flat,\n  i.e. no nested scopes, variables are unique, all function calls are resolved, dynamic apply is converted\n  to a call to `erlang:apply/2,3`, and all closures have been lifted. During the lowering from Core, pattern matching \n  compilation is performed, and some liveness analysis is performed.\n  * `syntax_ssa` is a low-level SSA IR to which Kernel is lowered. While Kernel is flat, it is still expression based,\n  SSA breaks things down further into blocks, jumps, and instructions for a register-based machine.\n  From here, we can perform code generation either to native code, or bytecode.\n- `compiler/linker`, performs all the work needed to link generated code into objects/libraries/executables.\n\nThe remaining crates under `compiler/` are support crates of some kind.\n\n#### Libraries\n\nThere are a number of core libraries that are used by the runtime, but are also in some cases shared\nwith the compiler. These are designed to either be optional components, or part of a tiered system of \ncrates that build up functionality for the various runtime crates.\n\n- `library/system`, provides abstractions over platform-specific implementation details that most of the runtime\ncode doesn't need to know about. This primarily handles unifying low-level platform APIs.\n- `library/alloc`, provides abstractions for memory management\n- `library/arena`, this is a helper crate that provides an implementation of both typed and untyped arenas\n- `library/rt`, this is the primary core runtime library, hence the name, and provides the implementations of all the\nterm types and their native APIs, as well as establishing things like the calling convention for Erlang functions,\nexceptions and backtraces, and other universal runtime concerns that cannot be delegated to a higher-level runtime crate.\n- `library/binary`, this crate provides all the pieces for implementing binaries/bitstrings, including pattern matching\nprimitives and constructors.\n- `library/number`, this crate provides the internal implementation of numeric types for both the compiler and runtime\n- `library/beam`, this crate provides native APIs for working with BEAM files\n- `library/bytecode`, this crate defines the opcodes for the bytecode emulator, as well as support for the binary bytecode format\n\n#### Runtimes\n\nThe runtime is intended to be pluggable, so it consists of a \"wrapper\" crate that provides the entry point\nfor executables, and a specific runtime implementation. Currently there is only one of the latter.\n\n- `runtimes/crt`, plays the role of crt0 in our system, i.e. it provides the entry point, initializes\nthe function and atom tables, and invokes the `main` function of the linked-in runtime.\n- `runtimes/emulator`, provides a runtime which operates on the output of the bytecode compiler\n\n<a name=\"contrib-changes\"/>\n\n### Making Changes\n\nAt this stage of the project, it is important that any changes you wish to contribute are communicated\nwith us first, as there is a good chance we are working on those areas of the code, or have plans around\nthem that will impact your implementation. Please open an issue tagged appropriately based on the part of\nthe project you are contributing to, with an explanation of the issue/change and how you'd like to approach\nimplementation. If there are no conflicts/everything looks good, we'll make sure to avoid stepping on your\ntoes and provide any help you need.\n\nFor smaller changes/bug fixes, feel free to open an issue first if you are new to the project and\nwant some guidance on working through the fix. Otherwise, it is acceptable to just open a PR\ndirectly with your fix, and let the review happen there.\n\nAlways feel free to open issues for bugs, and even perceived issues or questions, as they can be a\nuseful resource for others; but please do make sure to use the search function to avoid\nduplication!\n\nIf you plan to participate in discussions, or contribute to the project, be aware that this project\nwill not tolerate abuse of any kind against other members of the community; if you feel that someone\nis being abusive or inappropriate, please contact one of the core team members directly (or all of\nus). We want to foster an environment where people both new and experienced feel welcomed, can have\ntheir questions answered, and hopefully work together to make this project better!\n\n<a name=\"about\"/>\n\n## About Firefly\n\nFirefly is not only a compiler, but a runtime as well. It consists of two parts:\n\n* A compiler for Erlang to native code for a given target (x86, ARM, WebAssembly)\n* An Erlang runtime, implemented in Rust, which provides the core functionality\n  needed to implement OTP\n\nThe primary motivator for Firefly's development was the ability to compile Elixir\napplications that could target WebAssembly, enabling use of Elixir as a language\nfor frontend development. It is also possible to use Firefly to target other\nplatforms as well, by producing self-contained executables on platforms such as x86.\n\nFirefly is different than BEAM in the following ways:\n\n* It supports compilation to standalone executables\n* It is designed to support targeting WebAssembly, as well as many other types of targets.\n* It is designed to support both ahead-of-time compilation to machine code, and compilation to bytecode\n* It sacrifices some features to enable additional optimizations, in particular we don't\nhave plans currently to support hot code reloading.\n* It is written as a way to better understand the BEAM itself, and one of its goals\nis to provide a more accessible means of learning how the BEAM works internally, to\nthe degree that we provide the same functionality as the BEAM. By implementing it in\nRust, we also hope to learn how implementing something like the BEAM in a much more restrictive,\nbut safe language impacts its development.\n\n<a name=\"goals\"/>\n\n## Goals\n\n- Support WebAssembly/embedded systems as a first-class platforms\n- Produce easy-to-deploy static executables as build artifacts\n- Integrate with tooling provided by BEAM languages\n- Feature parity with mainline OTP (with exception of the non-goals listed below)\n\n<a name=\"non-goals\"/>\n\n## Non-Goals\n\n- Support for hot upgrades/downgrades\n- Support for dynamic code loading\n\nFirefly _is_ an alternative implementation of Erlang/OTP, so as a result it is not as battle tested, or necessarily\nas performant as the BEAM itself. Until we have a chance to run some benchmarks, it is hard to know\nwhat the difference between the two in terms of performance actually is.\n\nFirefly is _not_ intended to replace BEAM at this point in time. At a minimum, the stated non-goals\nof this project mean that for at least some percentage of projects, some required functionality would\nbe missing. However, it is meant to be a drop-in replacement for applications which are better served\nby its feature set.\n\n<a name=\"architecture\"/>\n\n## Architecture\n\n### Compiler\n\nThe compiler frontend accepts Erlang source files. This is parsed into an\nabstract syntax tree, then lowered through a set of intermediate representations\nwhere different types of analysis, transformation, or optimization are performed:\n\n- Core IR (similar to Core Erlang)\n- Kernel IR (similar to Kernel Erlang)\n- SSA IR (a low-level representation used to prepare for code generation)\n- Bytecode/MLIR (where final optimizations and code generation are performed)\n\nThe final stage of the compiler depends on whether compiling to bytecode or native\ncode, but in both cases the output produces LLVM IR that is then compiled to one\nor more object files, and linked via our linker into an executable.\n\n### Runtime\n\nThe runtime design is mostly the same as OTP, but varies a bit on what type of codegen backend was used.\nIn general though:\n\n- The entry point sets up the environment, and starts the scheduler\n- The scheduler is composed of one scheduler per thread\n- Each scheduler can steal work from other schedulers if it is short on work\n- Processes are spawned on the same scheduler as the process they are spawned from,\n  but a scheduler is able to steal them away to load balance\n- I/O is asynchronous, and integrates with the signal management performed by the schedulers\n\nThe initial version is quite spartan, but should be easy to grow now that we have some of the\nfundamentals built out.\n\n### NIFs\n\nCurrently it is straightforward to extend the runtime with native functions implemented in Rust,\nwithout all of the extra stuff that goes into port drivers and `erl_nif`. Currently we have some\nof the baseline infrastructure in place to support port drivers, but none of the necessary pieces\nto support `erl_nif` as of yet. We'll need to start adding some of that in short order however, so\nit is on our roadmap to support NIFs to at least a minimum degree needed for things required by\nthe standard library.\n\n## History\n\nFirefly previously had the name \"Lumen\". This was intended to be a temporary name and it was\nchanged in 2022, partly due to there being numerous other projects also named Lumen.\n\n## License\n\nApache 2.0\n"
        },
        {
          "name": "bin",
          "type": "tree",
          "content": null
        },
        {
          "name": "compiler",
          "type": "tree",
          "content": null
        },
        {
          "name": "firefly",
          "type": "tree",
          "content": null
        },
        {
          "name": "init",
          "type": "tree",
          "content": null
        },
        {
          "name": "library",
          "type": "tree",
          "content": null
        },
        {
          "name": "macros",
          "type": "tree",
          "content": null
        },
        {
          "name": "native_implemented",
          "type": "tree",
          "content": null
        },
        {
          "name": "runtimes",
          "type": "tree",
          "content": null
        },
        {
          "name": "test",
          "type": "tree",
          "content": null
        },
        {
          "name": "tools",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}