{
  "metadata": {
    "timestamp": 1736709284556,
    "page": 645,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjY1MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "ufoscout/docker-compose-wait",
      "stars": 1635,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.046875,
          "content": "**/.idea\n**/out/\n**/target/\n**/*.rs.bk\n**/*.iml\n"
        },
        {
          "name": "Cargo.lock",
          "type": "blob",
          "size": 4.91796875,
          "content": "# This file is automatically @generated by Cargo.\n# It is not intended for manual editing.\nversion = 3\n\n[[package]]\nname = \"atomic-counter\"\nversion = \"1.0.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"62f447d68cfa5a9ab0c1c862a703da2a65b5ed1b7ce1153c9eb0169506d56019\"\n\n[[package]]\nname = \"cc\"\nversion = \"1.1.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"2aba8f4e9906c7ce3c73463f62a7f0c65183ada1a2d47e397cc8810827f9694f\"\n\n[[package]]\nname = \"cfg-if\"\nversion = \"1.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"baf1de4339761588bc0619e3cbc0120ee582ebb74b53b4efbf79117bd2da40fd\"\n\n[[package]]\nname = \"env_filter\"\nversion = \"0.1.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"4f2c92ceda6ceec50f43169f9ee8424fe2db276791afde7b2cd8bc084cb376ab\"\ndependencies = [\n \"log\",\n]\n\n[[package]]\nname = \"env_logger\"\nversion = \"0.11.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e13fa619b91fb2381732789fc5de83b45675e882f66623b7d8cb4f643017018d\"\ndependencies = [\n \"env_filter\",\n \"log\",\n]\n\n[[package]]\nname = \"errno\"\nversion = \"0.2.8\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f639046355ee4f37944e44f60642c6f3a7efa3cf6b78c78a0d989a8ce6c396a1\"\ndependencies = [\n \"errno-dragonfly\",\n \"libc\",\n \"winapi\",\n]\n\n[[package]]\nname = \"errno-dragonfly\"\nversion = \"0.1.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"aa68f1b12764fab894d2755d2518754e71b4fd80ecfb822714a1206c2aab39bf\"\ndependencies = [\n \"cc\",\n \"libc\",\n]\n\n[[package]]\nname = \"exec\"\nversion = \"0.3.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"886b70328cba8871bfc025858e1de4be16b1d5088f2ba50b57816f4210672615\"\ndependencies = [\n \"errno\",\n \"libc\",\n]\n\n[[package]]\nname = \"getrandom\"\nversion = \"0.2.15\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"c4567c8db10ae91089c99af84c68c38da3ec2f087c3f82960bcdbf3656b6f4d7\"\ndependencies = [\n \"cfg-if\",\n \"libc\",\n \"wasi\",\n]\n\n[[package]]\nname = \"lazy_static\"\nversion = \"1.5.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"bbd2bcb4c963f2ddae06a2efc7e9f3591312473c50c6685e1f298068316e66fe\"\n\n[[package]]\nname = \"libc\"\nversion = \"0.2.155\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"97b3888a4aecf77e811145cadf6eef5901f4782c53886191b2f693f24761847c\"\n\n[[package]]\nname = \"log\"\nversion = \"0.4.22\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a7a70ba024b9dc04c27ea2f0c0548feb474ec5c54bba33a7f72f873a39d07b24\"\n\n[[package]]\nname = \"port_check\"\nversion = \"0.2.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"2110609fb863cdb367d4e69d6c43c81ba6a8c7d18e80082fe9f3ef16b23afeed\"\n\n[[package]]\nname = \"ppv-lite86\"\nversion = \"0.2.17\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"5b40af805b3121feab8a3c29f04d8ad262fa8e0561883e7653e024ae4479e6de\"\n\n[[package]]\nname = \"rand\"\nversion = \"0.8.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"34af8d1a0e25924bc5b7c43c079c942339d8f0a8b57c39049bef581b46327404\"\ndependencies = [\n \"libc\",\n \"rand_chacha\",\n \"rand_core\",\n]\n\n[[package]]\nname = \"rand_chacha\"\nversion = \"0.3.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e6c10a63a0fa32252be49d21e7709d4d4baf8d231c2dbce1eaa8141b9b127d88\"\ndependencies = [\n \"ppv-lite86\",\n \"rand_core\",\n]\n\n[[package]]\nname = \"rand_core\"\nversion = \"0.6.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ec0be4795e2f6a28069bec0b5ff3e2ac9bafc99e6a9a7dc3547996c5c816922c\"\ndependencies = [\n \"getrandom\",\n]\n\n[[package]]\nname = \"shell-words\"\nversion = \"1.1.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"24188a676b6ae68c3b2cb3a01be17fbf7240ce009799bb56d5b1409051e78fde\"\n\n[[package]]\nname = \"wait\"\nversion = \"2.12.1\"\ndependencies = [\n \"atomic-counter\",\n \"env_logger\",\n \"exec\",\n \"lazy_static\",\n \"log\",\n \"port_check\",\n \"rand\",\n \"shell-words\",\n]\n\n[[package]]\nname = \"wasi\"\nversion = \"0.11.0+wasi-snapshot-preview1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"9c8d87e72b64a3b4db28d11ce29237c246188f4f51057d65a7eab63b7987e423\"\n\n[[package]]\nname = \"winapi\"\nversion = \"0.3.9\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"5c839a674fcd7a98952e593242ea400abe93992746761e38641405d28b00f419\"\ndependencies = [\n \"winapi-i686-pc-windows-gnu\",\n \"winapi-x86_64-pc-windows-gnu\",\n]\n\n[[package]]\nname = \"winapi-i686-pc-windows-gnu\"\nversion = \"0.4.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ac3b87c63620426dd9b991e5ce0329eff545bccbbb34f3be09ff6fb6ab51b7b6\"\n\n[[package]]\nname = \"winapi-x86_64-pc-windows-gnu\"\nversion = \"0.4.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"712e227841d057c1ee1cd2fb22fa7e5a5461ae8e48fa2ca79ec42cfc1931183f\"\n"
        },
        {
          "name": "Cargo.toml",
          "type": "blob",
          "size": 0.5458984375,
          "content": "[package]\nname = \"wait\"\nversion = \"2.12.1\"\nauthors = [\"ufoscout <ufoscout@gmail.com>\"]\nedition = \"2021\"\n\n[dependencies]\nport_check = \"0.2\"\nlog = { version = \"0.4\", default-features = false }\nenv_logger = { version = \"0.11\", default-features = false }\nexec = { version = \"0.3.1\", default-features = false }\nshell-words = { version = \"1.1.0\", default-features = false }\n\n[dev-dependencies]\natomic-counter = \"1.0\"\nlazy_static = \"1.4\"\nrand = \"0.8\"\n\n[profile.release]\nopt-level = 'z'  # Optimize for size.\nlto = true\ncodegen-units = 1\npanic = 'abort'\nstrip = true\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 11.0908203125,
          "content": "                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"{}\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright {yyyy} {name of copyright owner}\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 7.240234375,
          "content": "# docker-compose-wait\n\n![Build Status](https://github.com/ufoscout/docker-compose-wait/actions/workflows/build_and_test.yml/badge.svg)\n[![codecov](https://codecov.io/gh/ufoscout/docker-compose-wait/branch/master/graph/badge.svg)](https://codecov.io/gh/ufoscout/docker-compose-wait)\n\nA small command-line utility to wait for other docker images to be started while using docker-compose (or Kubernetes or docker stack or whatever).\n\nIt permits waiting for:\n- a fixed amount of seconds\n- until a TCP port is open on a target image\n- until a file or directory is present on the local filesystem\n\n## Usage\n\nThis utility should be used in the docker build process and launched before your application starts.\n\nFor example, your application \"MySuperApp\" uses MongoDB, Postgres and MySql (wow!) and you want to be sure that, when it starts, all other systems are available, then simply customize your dockerfile this way:\n\n```dockerfile\n## Use whatever base image\nFROM alpine\n\n## Add the wait script to the image\nCOPY --from=ghcr.io/ufoscout/docker-compose-wait:latest /wait /wait\n\n## Otherwise you can directly download the executable from github releases. E.g.:\n#  ADD https://github.com/ufoscout/docker-compose-wait/releases/download/2.11.0/wait /wait\n#  RUN chmod +x /wait\n\n## Add your application to the docker image\nADD MySuperApp.sh /MySuperApp.sh\n\n## Launch the wait tool and then your application\nCMD /wait && /MySuperApp.sh\n```\n\nDone! the image is ready.\n\nNow let's modify the docker-compose.yml file:\n\n```yml\nversion: \"3\"\n\nservices:\n  mongo:\n    image: mongo:3.4\n    hostname: mongo\n    ports:\n      - \"27017:27017\"\n\n  postgres:\n    image: \"postgres:9.4\"\n    hostname: postgres\n    ports:\n      - \"5432:5432\"\n\n  mysql:\n    image: \"mysql:5.7\"\n    hostname: mysql\n    ports:\n      - \"3306:3306\"\n\n  mySuperApp:\n    image: \"mySuperApp:latest\"\n    hostname: mySuperApp\n    environment:\n      WAIT_HOSTS: postgres:5432, mysql:3306, mongo:27017\n```\n\nWhen docker-compose is started (or Kubernetes or docker stack or whatever), your application will be started only when all the pairs host:port in the WAIT_HOSTS variable are available.\nThe WAIT_HOSTS environment variable is not mandatory, if not declared, the script executes without waiting.\n\nIf you want to use the script directly in docker-compose.yml instead of the Dockerfile, please note that the `command:` configuration option is limited to a single command so you should wrap in a `sh` call. For example:\n\n```bash\ncommand: sh -c \"/wait && /MySuperApp.sh\"\n```\n\nThis is discussed further [here](https://stackoverflow.com/questions/30063907/using-docker-compose-how-to-execute-multiple-commands) and [here](https://github.com/docker/compose/issues/2033).\n\n## Usage in images that do not have a shell\n\nWhen using [distroless](https://github.com/GoogleContainerTools/distroless) or building images [`FROM scratch`](https://docs.docker.com/develop/develop-images/baseimages/#create-a-simple-parent-image-using-scratch), it is common to not have `sh` available. In this case, it is necessary to [specify the command for wait to run explicitly](#additional-configuration-options). The invoked command will be invoked with any arguments configured for it and will completely replace the `wait` process in your container via a syscall to [`exec`](https://man7.org/linux/man-pages/man3/exec.3.html). Because there is no shell to expand arguments in this case, `wait` must be the `ENTRYPOINT` for the container and has to be specified in [the exec form](https://docs.docker.com/engine/reference/builder/#exec-form-entrypoint-example). Note that because there is no shell to perform expansion, arguments like `*` must be interpreted by the program that receives them.\n\n```dockerfile\nFROM golang\n\nCOPY myApp /app\nWORKDIR /app\nRUN go build -o /myApp -ldflags '-s -w -extldflags -static' ./...\n\n## ----------------\n\nFROM scratch\n\nCOPY --from=ghcr.io/ufoscout/docker-compose-wait:latest /wait /wait\n\nCOPY --from=0 /myApp /myApp\nENV WAIT_COMMAND=\"/myApp arg1 argN...\"\nENTRYPOINT [\"/wait\"]\n```\n\n## Additional configuration options\n\nThe behaviour of the wait utility can be configured with the following environment variables:\n\n- _WAIT_LOGGER_LEVEL_ : the output logger level. Valid values are: _debug_, _info_, _error_, _off_. the default is _debug_. \n- _WAIT_HOSTS_: comma-separated list of pairs host:port for which you want to wait.\n- _WAIT_PATHS_: comma-separated list of paths (i.e. files or directories) on the local filesystem for which you want to wait until they exist.\n- _WAIT_COMMAND_: command and arguments to run once waiting completes. The invoked command will completely replace the `wait` process. The default is none.\n- _WAIT_TIMEOUT_: max number of seconds to wait for all the hosts/paths to be available before failure. The default is 30 seconds.\n- _WAIT_HOST_CONNECT_TIMEOUT_: The timeout of a single TCP connection to a remote host before attempting a new connection. The default is 5 seconds.\n- _WAIT_BEFORE_: number of seconds to wait (sleep) before start checking for the hosts/paths availability\n- _WAIT_AFTER_: number of seconds to wait (sleep) once all the hosts/paths are available\n- _WAIT_SLEEP_INTERVAL_: number of seconds to sleep between retries. The default is 1 second.\n\n\n## Supported architectures\n\nFrom release 2.11.0, the following executables are available for download:\n- _wait_: This is the executable intended for Linux x64 systems\n- *wait_x86_64*: This is the very same executable than _wait_\n- *wait_aarch64*: This is the executable to be used for aarch64 architectures\n- *wait_arm7*: This is the executable to be used for arm7 architectures\n\nAll executables are built with [MUSL](https://www.musl-libc.org/) for maximum portability.\n\nTo use any of these executables, simply replace the executable name in the download link:\nhttps://github.com/ufoscout/docker-compose-wait/releases/download/{{VERSION}}/{{executable_name}}\n\n\n## Docker images\n\nOfficial docker images based on `scratch` can be found here:\nhttps://github.com/users/ufoscout/packages/container/package/docker-compose-wait\n\n\n## Using on other systems\n\nThe simplest way of getting the _wait_ executable is to download it from\n\n[https://github.com/ufoscout/docker-compose-wait/releases/download/{{VERSION}}/wait](https://github.com/ufoscout/docker-compose-wait/releases/download/{{VERSION}}/wait)\n\nor to use one of the pre-built docker images.\n\nIf you need it for an architecture for which a pre-built file is not available, you should clone this repository and build it for your target.\n\nAs it has no external dependencies, an being written in the mighty [rust](https://www.rust-lang.org)\nprogramming language, the build process is just a simple `cargo build --release`\n(well... of course you need to install the rust compiler before...)\n\nFor everything involving cross-compilation, you should take a look at [Cross](https://github.com/rust-embedded/cross).\n\nFor example, to build for a **raspberry pi**, everything you have to do is:\n\n1. Install the latest stable rust toolchain using rustup\n2. Correctly configure Docker on your machine\n3. Open a terminal and type:\n\n```bash\ncargo install cross\ncross build --target=armv7-unknown-linux-musleabihf --release\n```\n\nUse your shiny new executable on your raspberry device!\n\n## Notes\n\nThis utility was explicitly written to be used with docker-compose; however, it can be used everywhere since it has no dependencies on docker.\n"
        },
        {
          "name": "release.sh",
          "type": "blob",
          "size": 0.080078125,
          "content": "#!/bin/bash\n\ncargo test\n\ncargo build --release --target=x86_64-unknown-linux-musl\n"
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "test.Dockerfile",
          "type": "blob",
          "size": 0.390625,
          "content": "FROM alpine:3.16\nWORKDIR /tmp\nRUN apk add build-base\nRUN printf '#include <stdio.h>' > /tmp/hello.c \\\n    && printf 'int main() { printf(\"Hello World\"); return 0; }' > /tmp/hello.c \\\n    && gcc -w -static -o /hello /tmp/hello.c\n\nFROM scratch\nCOPY --from=0 /hello /hello\nCOPY ./target/x86_64-unknown-linux-musl/release/wait /wait\nENV WAIT_LOGGER_LEVEL=off\nENV WAIT_COMMAND=/hello\nENTRYPOINT [\"/wait\"]\n"
        },
        {
          "name": "test.sh",
          "type": "blob",
          "size": 0.4296875,
          "content": "#!/bin/bash\n\ndocker build -t wait:test -f test.Dockerfile . && docker run --rm wait:test\n\n#export WAIT_HOSTS=localhost:4748\n#export WAIT_PATHS=./target/one\nexport WAIT_TIMEOUT=10\nexport WAIT_BEFORE=1\nexport WAIT_AFTER=2\n\n./target/x86_64-unknown-linux-musl/release/wait && echo 'DOOOOOOONEEEEEE'\n\nexport WAIT_COMMAND=\"echo 'DOOOOOOONEEEEEE WITH WAIT_COMMAND (i.e. does not requrie a shell)'\"\n\n./target/x86_64-unknown-linux-musl/release/wait\n"
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}