{
  "metadata": {
    "timestamp": 1736709204829,
    "page": 475,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjQ4MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "tokio-rs/bytes",
      "stars": 1958,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.01953125,
          "content": "/target\n/Cargo.lock\n"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 10.751953125,
          "content": "# 1.9.0 (November 27, 2024)\n\n### Added\n\n- Add `Bytes::from_owner` to enable externally-allocated memory (#742)\n\n### Documented\n\n- Fix typo in Buf::chunk() comment (#744)\n\n### Internal changes\n\n- Replace BufMut::put with BufMut::put_slice in Writer impl (#745)\n- Rename hex_impl! to fmt_impl! and reuse it for fmt::Debug (#743)\n\n# 1.8.0 (October 21, 2024)\n\n- Guarantee address in `split_off`/`split_to` for empty slices (#740)\n\n# 1.7.2 (September 17, 2024)\n\n### Fixed\n\n- Fix default impl of `Buf::{get_int, get_int_le}` (#732)\n\n### Documented\n\n- Fix double spaces in comments and doc comments (#731)\n\n### Internal changes\n\n- Ensure BytesMut::advance reduces capacity (#728)\n\n# 1.7.1 (August 1, 2024)\n\nThis release reverts the following change due to a regression:\n\n- Reuse capacity when possible in `<BytesMut as Buf>::advance` impl (#698)\n\nThe revert can be found at #726.\n\n# 1.7.0 (July 31, 2024)\n\n### Added\n\n- Add conversion from `Bytes` to `BytesMut` (#695, #710)\n- Add reclaim method without additional allocation (#686)\n\n### Documented\n\n- Clarify how `BytesMut::zeroed` works (#714)\n- Clarify the behavior of `Buf::chunk` (#717)\n\n### Changed\n\n- Change length condition of `BytesMut::truncate`\n- Reuse capacity when possible in `<BytesMut as Buf>::advance` impl (#698)\n- Improve `must_use` suggestion of `BytesMut::split` (#699)\n\n### Internal changes\n\n- Use `ManuallyDrop` instead of `mem::forget` (#678)\n- Don't set `len` in `BytesMut::reserve` (#682)\n- Optimize `Bytes::copy_to_bytes` (#688)\n- Refactor `BytesMut::truncate` (#694)\n- Refactor `BytesMut::resize` (#696)\n- Reorder assertion in `Bytes::split_to`, `Bytes::split_off` (#689, #693)\n- Use `offset_from` in more places (#705)\n- Correct the wrong usage of `IntoIter` (#707)\n\n# 1.6.1 (July 13, 2024)\n\nThis release fixes a bug where `Bytes::is_unique` returns incorrect values when\nthe `Bytes` originates from a shared `BytesMut`. (#718)\n\n# 1.6.0 (March 22, 2024)\n\n### Added\n\n- Add `Bytes::is_unique` (#643)\n\n### Documented\n\n- Fix changelog typo (#628)\n- Fix some spelling mistakes (#633)\n- Typo fix (#637)\n- Fix broken links (#639)\n- Add security policy (#649)\n\n### Internal changes\n\n- Move comment to correct constant (#629)\n- Various cleanup (#635)\n- Simplify `UninitSlice::as_uninit_slice_mut()` logic (#644)\n- Use `self.` instead of `Self::` (#642)\n- `BytesMut`: Assert alignment of `Shared` (#652)\n- Remove unnecessary namespace qualifier (#660)\n- Remove an unnecessary else branch (#662)\n- Remove unreachable else branch (#661)\n- make parameter mut in `From<Vec>` (#667)\n- Restore commented tests (#665)\n- Use `sub` instead of `offset` (#668)\n- Calculate original capacity only if necessary (#666)\n- `set_vec_pos` does not need a second parameter (#672)\n- `get_vec_pos`: use `&self` instead of `&mut self` (#670)\n- Refactor `split_at`/`split_to` (#663)\n- Use `Iterator` from the prelude (#673)\n- `copy_to_bytes`: Add panic section to docs (#676)\n- Remove redundant reserve call (#674)\n- Use `ManuallyDrop` instead of `mem::forget` (#675)\n\n\n# 1.5.0 (September 7, 2023)\n\n### Added\n\n- Add `UninitSlice::{new,uninit}` (#598, #599)\n- Implement `BufMut` for `&mut [MaybeUninit<u8>]` (#597)\n\n### Changed\n\n- Mark `BytesMut::extend_from_slice` as inline (#595)\n\n# 1.4.0 (January 31, 2023)\n\n### Added\n\n- Make `IntoIter` constructor public (#581)\n\n### Fixed\n\n- Avoid large reallocations when freezing `BytesMut` (#592)\n\n### Documented\n\n- Document which functions require `std` (#591)\n- Fix duplicate \"the the\" typos (#585)\n\n# 1.3.0 (November 20, 2022)\n\n### Added\n\n- Rename and expose `BytesMut::spare_capacity_mut` (#572)\n- Implement native-endian get and put functions for `Buf` and `BufMut` (#576)\n\n### Fixed\n\n- Don't have important data in unused capacity when calling reserve (#563)\n\n### Documented\n\n- `Bytes::new` etc should return `Self` not `Bytes` (#568)\n\n# 1.2.1 (July 30, 2022)\n\n### Fixed\n\n- Fix unbounded memory growth when using `reserve` (#560)\n\n# 1.2.0 (July 19, 2022)\n\n### Added\n\n- Add `BytesMut::zeroed` (#517)\n- Implement `Extend<Bytes>` for `BytesMut` (#527)\n- Add conversion from `BytesMut` to `Vec<u8>` (#543, #554)\n- Add conversion from `Bytes` to `Vec<u8>` (#547)\n- Add `UninitSlice::as_uninit_slice_mut()` (#548)\n- Add const to `Bytes::{len,is_empty}` (#514)\n\n### Changed\n\n- Reuse vector in `BytesMut::reserve` (#539, #544)\n\n### Fixed\n\n- Make miri happy (#515, #523, #542, #545, #553)\n- Make tsan happy (#541)\n- Fix `remaining_mut()` on chain (#488)\n- Fix amortized asymptotics of `BytesMut` (#555)\n\n### Documented\n\n- Redraw layout diagram with box drawing characters (#539)\n- Clarify `BytesMut::unsplit` docs (#535)\n\n# 1.1.0 (August 25, 2021)\n\n### Added\n\n- `BufMut::put_bytes(self, val, cnt)` (#487)\n- Implement `From<Box<[u8]>>` for `Bytes` (#504)\n\n### Changed\n\n- Override `put_slice` for `&mut [u8]` (#483)\n- Panic on integer overflow in `Chain::remaining` (#482)\n- Add inline tags to `UninitSlice` methods (#443)\n- Override `copy_to_bytes` for Chain and Take (#481)\n- Keep capacity when unsplit on empty other buf (#502)\n\n### Documented\n\n- Clarify `BufMut` allocation guarantees (#501)\n- Clarify `BufMut::put_int` behavior (#486)\n- Clarify actions of `clear` and `truncate`. (#508)\n\n# 1.0.1 (January 11, 2021)\n\n### Changed\n- mark `Vec::put_slice` with `#[inline]` (#459)\n\n### Fixed\n- Fix deprecation warning (#457)\n- use `Box::into_raw` instead of `mem::forget`-in-disguise (#458)\n\n# 1.0.0 (December 22, 2020)\n\n### Changed\n- Rename `Buf`/`BufMut` methods `bytes()` and `bytes_mut()` to `chunk()` and `chunk_mut()` (#450)\n\n### Removed\n- remove unused Buf implementation. (#449)\n\n# 0.6.0 (October 21, 2020)\n\nAPI polish in preparation for a 1.0 release.\n\n### Changed\n- `BufMut` is now an `unsafe` trait (#432).\n- `BufMut::bytes_mut()` returns `&mut UninitSlice`, a type owned by `bytes` to\n  avoid undefined behavior (#433).\n- `Buf::copy_to_bytes(len)` replaces `Buf::into_bytes()` (#439).\n- `Buf`/`BufMut` utility methods are moved onto the trait and `*Ext` traits are\n  removed (#431).\n\n### Removed\n- `BufMut::bytes_vectored_mut()` (#430).\n- `new` methods on combinator types (#434).\n\n# 0.5.6 (July 13, 2020)\n\n- Improve `BytesMut` to reuse buffer when fully `advance`d.\n- Mark `BytesMut::{as_mut, set_len}` with `#[inline]`.\n- Relax synchronization when cloning in shared vtable of `Bytes`.\n- Move `loom` to `dev-dependencies`.\n\n# 0.5.5 (June 18, 2020)\n\n### Added\n- Allow using the `serde` feature in `no_std` environments (#385).\n\n### Fix\n- Fix `BufMut::advance_mut` to panic if advanced passed the capacity (#354)..\n- Fix `BytesMut::freeze` ignoring amount previously `advance`d (#352).\n\n# 0.5.4 (January 23, 2020)\n\n### Added\n- Make `Bytes::new` a `const fn`.\n- Add `From<BytesMut>` for `Bytes`.\n\n### Fix\n- Fix reversed arguments in `PartialOrd` for `Bytes`.\n- Fix `Bytes::truncate` losing original capacity when repr is an unshared `Vec`.\n- Fix `Bytes::from(Vec)` when allocator gave `Vec` a pointer with LSB set.\n- Fix panic in `Bytes::slice_ref` if argument is an empty slice.\n\n# 0.5.3 (December 12, 2019)\n\n### Added\n- `must_use` attributes to `split`, `split_off`, and `split_to` methods (#337).\n\n### Fix\n- Potential freeing of a null pointer in `Bytes` when constructed with an empty `Vec<u8>` (#341, #342).\n- Calling `Bytes::truncate` with a size large than the length will no longer clear the `Bytes` (#333).\n\n# 0.5.2 (November 27, 2019)\n\n### Added\n- `Limit` methods `into_inner`, `get_ref`, `get_mut`, `limit`, and `set_limit` (#325).\n\n# 0.5.1 (November 25, 2019)\n\n### Fix\n- Growth documentation for `BytesMut` (#321)\n\n# 0.5.0 (November 25, 2019)\n\n### Fix\n- Potential overflow in `copy_to_slice`\n\n### Changed\n- Increased minimum supported Rust version to 1.39.\n- `Bytes` is now a \"trait object\", allowing for custom allocation strategies (#298)\n- `BytesMut` implicitly grows internal storage. `remaining_mut()` returns\n  `usize::MAX` (#316).\n- `BufMut::bytes_mut` returns `&mut [MaybeUninit<u8>]` to reflect the unknown\n  initialization state (#305).\n- `Buf` / `BufMut` implementations for `&[u8]` and `&mut [u8]`\n  respectively (#261).\n- Move `Buf` / `BufMut` \"extra\" functions to an extension trait (#306).\n- `BufMutExt::limit` (#309).\n- `Bytes::slice` takes a `RangeBounds` argument (#265).\n- `Bytes::from_static` is now a `const fn` (#311).\n- A multitude of smaller performance optimizations.\n\n### Added\n- `no_std` support (#281).\n- `get_*`, `put_*`, `get_*_le`, and `put_*le` accessors for handling byte order.\n- `BorrowMut` implementation for `BytesMut` (#185).\n\n### Removed\n- `IntoBuf` (#288).\n- `Buf` implementation for `&str` (#301).\n- `byteorder` dependency (#280).\n- `iovec` dependency, use `std::IoSlice` instead (#263).\n- optional `either` dependency (#315).\n- optional `i128` feature -- now available on stable. (#276).\n\n# 0.4.12 (March 6, 2019)\n\n### Added\n- Implement `FromIterator<&'a u8>` for `BytesMut`/`Bytes` (#244).\n- Implement `Buf` for `VecDeque` (#249).\n\n# 0.4.11 (November 17, 2018)\n\n* Use raw pointers for potentially racy loads (#233).\n* Implement `BufRead` for `buf::Reader` (#232).\n* Documentation tweaks (#234).\n\n# 0.4.10 (September 4, 2018)\n\n* impl `Buf` and `BufMut` for `Either` (#225).\n* Add `Bytes::slice_ref` (#208).\n\n# 0.4.9 (July 12, 2018)\n\n* Add 128 bit number support behind a feature flag (#209).\n* Implement `IntoBuf` for `&mut [u8]`\n\n# 0.4.8 (May 25, 2018)\n\n* Fix panic in `BytesMut` `FromIterator` implementation.\n* Bytes: Recycle space when reserving space in vec mode (#197).\n* Bytes: Add resize fn (#203).\n\n# 0.4.7 (April 27, 2018)\n\n* Make `Buf` and `BufMut` usable as trait objects (#186).\n* impl BorrowMut for BytesMut (#185).\n* Improve accessor performance (#195).\n\n# 0.4.6 (Janary 8, 2018)\n\n* Implement FromIterator for Bytes/BytesMut (#148).\n* Add `advance` fn to Bytes/BytesMut (#166).\n* Add `unsplit` fn to `BytesMut` (#162, #173).\n* Improvements to Bytes split fns (#92).\n\n# 0.4.5 (August 12, 2017)\n\n* Fix range bug in `Take::bytes`\n* Misc performance improvements\n* Add extra `PartialEq` implementations.\n* Add `Bytes::with_capacity`\n* Implement `AsMut[u8]` for `BytesMut`\n\n# 0.4.4 (May 26, 2017)\n\n* Add serde support behind feature flag\n* Add `extend_from_slice` on `Bytes` and `BytesMut`\n* Add `truncate` and `clear` on `Bytes`\n* Misc additional std trait implementations\n* Misc performance improvements\n\n# 0.4.3 (April 30, 2017)\n\n* Fix Vec::advance_mut bug\n* Bump minimum Rust version to 1.15\n* Misc performance tweaks\n\n# 0.4.2 (April 5, 2017)\n\n* Misc performance tweaks\n* Improved `Debug` implementation for `Bytes`\n* Avoid some incorrect assert panics\n\n# 0.4.1 (March 15, 2017)\n\n* Expose `buf` module and have most types available from there vs. root.\n* Implement `IntoBuf` for `T: Buf`.\n* Add `FromBuf` and `Buf::collect`.\n* Add iterator adapter for `Buf`.\n* Add scatter/gather support to `Buf` and `BufMut`.\n* Add `Buf::chain`.\n* Reduce allocations on repeated calls to `BytesMut::reserve`.\n* Implement `Debug` for more types.\n* Remove `Source` in favor of `IntoBuf`.\n* Implement `Extend` for `BytesMut`.\n\n\n# 0.4.0 (February 24, 2017)\n\n* Initial release\n"
        },
        {
          "name": "Cargo.toml",
          "type": "blob",
          "size": 0.791015625,
          "content": "[package]\n\nname = \"bytes\"\n# When releasing to crates.io:\n# - Update CHANGELOG.md.\n# - Create \"v1.x.y\" git tag.\nversion = \"1.9.0\"\nedition = \"2018\"\nrust-version = \"1.39\"\nlicense = \"MIT\"\nauthors = [\n    \"Carl Lerche <me@carllerche.com>\",\n    \"Sean McArthur <sean@seanmonstar.com>\",\n]\ndescription = \"Types and traits for working with bytes\"\nrepository = \"https://github.com/tokio-rs/bytes\"\nreadme = \"README.md\"\nkeywords = [\"buffers\", \"zero-copy\", \"io\"]\ncategories = [\"network-programming\", \"data-structures\"]\n\n[features]\ndefault = [\"std\"]\nstd = []\n\n[dependencies]\nserde = { version = \"1.0.60\", optional = true, default-features = false, features = [\"alloc\"] }\n\n[dev-dependencies]\nserde_test = \"1.0\"\n\n[target.'cfg(loom)'.dev-dependencies]\nloom = \"0.7\"\n\n[package.metadata.docs.rs]\nrustdoc-args = [\"--cfg\", \"docsrs\"]\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.0302734375,
          "content": "Copyright (c) 2018 Carl Lerche\n\nPermission is hereby granted, free of charge, to any\nperson obtaining a copy of this software and associated\ndocumentation files (the \"Software\"), to deal in the\nSoftware without restriction, including without\nlimitation the rights to use, copy, modify, merge,\npublish, distribute, sublicense, and/or sell copies of\nthe Software, and to permit persons to whom the Software\nis furnished to do so, subject to the following\nconditions:\n\nThe above copyright notice and this permission notice\nshall be included in all copies or substantial portions\nof the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF\nANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED\nTO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A\nPARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT\nSHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\nOF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR\nIN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\nDEALINGS IN THE SOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 1.248046875,
          "content": "# Bytes\n\nA utility library for working with bytes.\n\n[![Crates.io][crates-badge]][crates-url]\n[![Build Status][ci-badge]][ci-url]\n\n[crates-badge]: https://img.shields.io/crates/v/bytes.svg\n[crates-url]: https://crates.io/crates/bytes\n[ci-badge]: https://github.com/tokio-rs/bytes/workflows/CI/badge.svg\n[ci-url]: https://github.com/tokio-rs/bytes/actions\n\n[Documentation](https://docs.rs/bytes)\n\n## Usage\n\nTo use `bytes`, first add this to your `Cargo.toml`:\n\n```toml\n[dependencies]\nbytes = \"1\"\n```\n\nNext, add this to your crate:\n\n```rust\nuse bytes::{Bytes, BytesMut, Buf, BufMut};\n```\n\n## Serde support\n\nSerde support is optional and disabled by default. To enable use the feature `serde`.\n\n```toml\n[dependencies]\nbytes = { version = \"1\", features = [\"serde\"] }\n```\n\n## Building documentation\n\nWhen building the `bytes` documentation the `docsrs` option should be used, otherwise\nfeature gates will not be shown. This requires a nightly toolchain:\n\n```\nRUSTDOCFLAGS=\"--cfg docsrs\" cargo +nightly doc\n```\n\n## License\n\nThis project is licensed under the [MIT license](LICENSE).\n\n### Contribution\n\nUnless you explicitly state otherwise, any contribution intentionally submitted\nfor inclusion in `bytes` by you, shall be licensed as MIT, without any additional\nterms or conditions.\n"
        },
        {
          "name": "SECURITY.md",
          "type": "blob",
          "size": 0.33984375,
          "content": "# Security Policy\n\nBytes is part of the Tokio project and uses the same security policy as [Tokio][tokio-security].\n\n## Report a security issue\n\nThe process for reporting an issue is the same as for [Tokio][tokio-security]. This includes private reporting via security@tokio.rs.\n\n[tokio-security]: https://github.com/tokio-rs/tokio/security/policy\n"
        },
        {
          "name": "benches",
          "type": "tree",
          "content": null
        },
        {
          "name": "ci",
          "type": "tree",
          "content": null
        },
        {
          "name": "clippy.toml",
          "type": "blob",
          "size": 0.013671875,
          "content": "msrv = \"1.39\"\n"
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}