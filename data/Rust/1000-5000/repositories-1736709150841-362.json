{
  "metadata": {
    "timestamp": 1736709150841,
    "page": 362,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjM3MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "rbatis/rbatis",
      "stars": 2332,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.4375,
          "content": "# Generated by Cargo\n# will have compiled files and executables\n/target/\n\n# idea\n/.idea/\n/.idea\n.idea/\n'.idea'\n# vscode\n/.vscode/\n.vscode/\n/.vscode\n'.vscode'\n/.github\n\n\n\n# Remove Cargo.lock from gitignore if creating an executable, leave it for libraries\n# More information here https://doc.rust-lang.org/cargo/guide/cargo-toml-vs-cargo-lock.html\nCargo.lock\n\n# These are backup files generated by rustfmt\n**/*.rs.bk\n\n\n#log\n*.log\n\n#mac\n*.DS_Store\n\n\n"
        },
        {
          "name": "Cargo.toml",
          "type": "blob",
          "size": 1.712890625,
          "content": "[workspace]\nmembers = [\n    \"rbs\",\n    \"rbatis-codegen\",\n    \"rbatis-macro-driver\",\n    \"example\"\n]\n\n[package]\nname = \"rbatis\"\nversion = \"4.5.49\"\ndescription = \"The Rust SQL Toolkit and ORM Library. An async, pure Rust SQL crate featuring compile-time Dynamic SQL\"\nreadme = \"Readme.md\"\nauthors = [\"ce <zhuxiujia@qq.com>\"]\nedition = \"2021\"\nlicense = \"Apache-2.0\"\ncategories = [\"database\"]\nkeywords = [\"database\", \"orm\", \"mysql\", \"postgres\", \"sqlite\"]\ndocumentation = \"https://docs.rs/rbatis/latest\"\nrepository = \"https://github.com/rbatis/rbatis\"\nhomepage = \"https://rbatis.github.io/rbatis.io\"\n\n[features]\ndefault = [\"rbatis-macro-driver/default\"]\n#debug_mode feature will show decode json data\ndebug_mode = [\"rbatis-macro-driver/debug_mode\", \"rbs/debug_mode\"]\n#support upper case sql keyword\nupper_case_sql_keyword = []\n\n[dependencies]\nrbatis-codegen = { version = \"4.5\", path = \"rbatis-codegen\" }\nrbatis-macro-driver = { version = \"4.5\", path = \"rbatis-macro-driver\", default-features = false, optional = true }\nserde = \"1\"\n#log\nlog = \"0.4\"\nfutures-core = { version = \"0.3\" }\nfutures = { version = \"0.3\" }\n#object_id\nhex = \"0.4\"\nrand = \"0.8\"\nrbs = { version = \"4.5\"}\nrbdc = { version = \"4.5\", default-features = false }\ndark-std = \"0.2\"\nasync-trait = \"0.1.68\"\n\nrbdc-pool-fast = { version = \"4.5\" }\nparking_lot = \"0.12.3\"\nsql-parser = \"0.1.0\"\n\n[dev-dependencies]\nrbatis = { version = \"4.5\", path = \".\", features = [\"debug_mode\"] }\nserde_json = \"1\"\ntokio = { version = \"1\", features = [\"sync\", \"fs\", \"net\", \"rt\", \"rt-multi-thread\", \"time\", \"io-util\", \"macros\"] }\nrbdc-mysql = { version = \"4.5\" }\nrbdc-pg = { version = \"4.5\" }\nrbdc-sqlite = { version = \"4.5\" }\nrbdc-mssql = { version = \"4.5\" }\n[profile.release]\nlto = true\nopt-level = 3\ncodegen-units = 1\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 11.0908203125,
          "content": "                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"[]\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright [yyyy] [name of copyright owner]\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n"
        },
        {
          "name": "Readme.md",
          "type": "blob",
          "size": 17.61328125,
          "content": "[WebSite](https://rbatis.github.io/rbatis.io) | [Showcase](https://github.com/rbatis/rbatis/network/dependents) | [Example](https://github.com/rbatis/rbatis/tree/master/example)\n\n[![Build Status](https://github.com/rbatis/rbatis/workflows/ci/badge.svg)](https://github.com/zhuxiujia/rbatis/actions)\n[![doc.rs](https://docs.rs/rbatis/badge.svg)](https://docs.rs/rbatis/)\n[![](https://img.shields.io/crates/d/rbatis)](https://crates.io/crates/rbatis)\n[![unsafe forbidden](https://img.shields.io/badge/unsafe-forbidden-success.svg)](https://github.com/rust-secure-code/safety-dance/)\n[![codecov](https://codecov.io/gh/rbatis/rbatis/graph/badge.svg?token=VAVPXSHoff)](https://codecov.io/gh/rbatis/rbatis)\n[![GitHub release](https://img.shields.io/github/v/release/rbatis/rbatis)](https://github.com/rbatis/rbatis/releases)\n[![discussions](https://img.shields.io/github/discussions/rbatis/rbatis)](https://github.com/rbatis/rbatis/discussions)\n\n<img style=\"width: 200px;height: 190px;\" width=\"200\" height=\"190\" src=\"logo.png\" />\n\n#### a compile-time code generation ORM that balances ease of writing with performance and robustness\n\nIt is an ORM, a small compiler, a dynamic SQL languages\n\n* High-performance: Compile time [Dynamic SQL](dyn_sql.md),Based on Future/Tokio, Connection Pool\n* Reliability:  Rust Safe Code,precompile: `#{arg}`, Direct replacement:`${arg}`, unify `?` placeholders(support all driver)\n* Productivity: Powerful [Interceptor interface](https://rbatis.github.io/rbatis.io/#/v4/?id=plugin-intercept), [curd](https://rbatis.github.io/rbatis.io/#/v4/?id=tabledefine), [py_sql](https://rbatis.github.io/rbatis.io/#/v4/?id=pysql) ,  [html_sql](https://rbatis.github.io/rbatis.io/#/v4/?id=htmlsql),[Table synchronize plugin](https://rbatis.github.io/rbatis.io/#/v4/?id=plugin-table-sync),[abs_admin](https://github.com/rbatis/abs_admin),[rbdc-drivers](https://github.com/rbatis/rbatis#supported-database-driver)\n* maintainability: The RBDC driver supports custom drivers, custom connection pool,support third-party driver package\n\n###### Thanks to ```SQLX, deadpool,mobc, Tiberius, MyBatis, xorm``` and so on reference design or code implementation. Release of V4 is Inspired and supported by these frameworks.**\n\n\n\n### Performance\n\n* this bench test is MockTable,MockDriver,MockConnection to Assume that the network I/O time is 0\n* run code ```rbatis.query_decode::<Vec<i32>>(\"\", vec![]).await;``` on benches bench_raw()\n* run code ```MockTable::insert(&rbatis,&t).await;``` on benches bench_insert()\n* run code ```MockTable::select_all(&rbatis).await.unwrap();``` on benches bench_select()\n* see bench [code](https://github.com/rbatis/rbatis/blob/master/benches/raw_performance.rs)\n```\n---- bench_raw stdout ----(windows/SingleThread)\nTime: 52.4187ms ,each:524 ns/op\nQPS: 1906435 QPS/s\n\n---- bench_select stdout ----(macos-M1Cpu/SingleThread)\nTime: 112.927916ms ,each:1129 ns/op\nQPS: 885486 QPS/s\n\n---- bench_insert stdout ----(macos-M1Cpu/SingleThread)\nTime: 346.576666ms ,each:3465 ns/op\nQPS: 288531 QPS/s\n```\n\n### Supported OS/Platforms by [Workflows CI](https://github.com/rbatis/rbatis/actions)\n\n* Rust compiler version v1.75+ later\n\n| platform                | is supported |\n|-------------------------|--------------|\n| Linux(unbutu laster***) | √            | \n| Apple/MacOS(laster)     | √            |  \n| Windows(latest)         | √            |\n\n\n### Supported data structures\n\n| data structure                                                           | is supported |\n|--------------------------------------------------------------------------|--------------|\n| `Option`                                                                 | √            | \n| `Vec`                                                                    | √            |  \n| `HashMap`                                                                | √            |\n| `i32,i64,f32,f64,bool,String`...more rust base type                      | √            |  \n| `rbatis::rbdc::types::{Bytes,Date,DateTime,Time,Timestamp,Decimal,Json}` | √            |\n| `rbatis::plugin::page::{Page, PageRequest}`                              | √            |\n| `rbs::Value`                                                             | √            |\n| `serde_json::Value` ...more serde type                                   | √            |\n| `rdbc-mysql::types::*`                                                   | √            |\n| `rdbc-pg::types::*`                                                      | √            |\n| `rdbc-sqlite::types::*`                                                  | √            |\n| `rdbc-mssql::types::*`                                                   | √            |\n\n### Supported database driver\n\n| database(crates.io)                                 | github_link                                                                    |\n|-----------------------------------------------------|--------------------------------------------------------------------------------|\n| [Mysql](https://crates.io/crates/rbdc-mysql)        | [rbatis/rbdc-mysql](https://github.com/rbatis/rbdc/tree/master/rbdc-mysql)   |\n| [Postgres](https://crates.io/crates/rbdc-pg)        | [rbatis/rbdc-pg](https://github.com/rbatis/rbdc/tree/master/rbdc-pg)         |\n| [Sqlite](https://crates.io/crates/rbdc-sqlite)      | [rbatis/rbdc-sqlite](https://github.com/rbatis/rbdc/tree/master/rbdc-sqlite) |\n| [Mssql](https://crates.io/crates/rbdc-mssql)        | [rbatis/rbdc-mssql](https://github.com/rbatis/rbdc/tree/master/rbdc-mssql)   |\n| [MariaDB](https://crates.io/crates/rbdc-mysql)      | [rbatis/rbdc-mysql](https://github.com/rbatis/rbdc/tree/master/rbdc-mysql)   |\n| [TiDB](https://crates.io/crates/rbdc-mysql)         | [rbatis/rbdc-mysql](https://github.com/rbatis/rbdc/tree/master/rbdc-mysql)   |\n| [CockroachDB](https://crates.io/crates/rbdc-pg)     | [rbatis/rbdc-pg](https://github.com/rbatis/rbdc/tree/master/rbdc-pg)         |\n| [Oracle](https://crates.io/crates/rbdc-oracle)      | [chenpengfan/rbdc-oracle](https://github.com/chenpengfan/rbdc-oracle)          |\n| [TDengine](https://crates.io/crates/rbdc-tdengine)  | [tdcare/rbdc-tdengine](https://github.com/tdcare/rbdc-tdengine)                |\n\n\n> how to write my DataBase Driver for RBatis?\n* first. define your driver project ,add Cargo.toml deps\n```toml\n[features]\ndefault = [\"tls-rustls\"]\ntls-rustls=[\"rbdc/tls-rustls\"]\ntls-native-tls=[\"rbdc/tls-native-tls\"]\n[dependencies]\nrbs = { version = \"4.5\"}\nrbdc = { version = \"4.5\", default-features = false,  optional = true }\nfastdate = { version = \"0.3\" }\ntokio = { version = \"1\", features = [\"full\"] }\n```\n* then. you should impl `rbdc::db::{ConnectOptions, Connection, ExecResult, MetaData, Placeholder, Row}` trait\n* finish. your driver is finish (you just need call RB.init() methods). it's support RBatis Connection Pool/tls(native,rustls)\n```rust\n#[tokio::main]\nasync fn main(){\n  let rb = rbatis::RBatis::new();\n  rb.init(YourDriver {}, \"YourDriver://****\").unwrap();\n}\n```\n\n### Supported Connection Pools\n\n| database(crates.io)                                         | github_link                                                                             |\n|-------------------------------------------------------------|-----------------------------------------------------------------------------------------|\n| [FastPool-default](https://crates.io/crates/rbdc-pool-fast) | [rbatis/fast_pool](https://github.com/rbatis/rbatis/tree/master/rbdc-pool-fast)         |\n| [Deadpool](https://crates.io/crates/rbdc-pool-deadpool)     | [Deadpool](https://github.com/rbatis/rbdc-pool-deadpool)                                |\n| [MobcPool](https://crates.io/crates/rbdc-pool-mobc)         | [MobcPool](https://github.com/rbatis/rbdc-pool-mobc)                                    |\n\n### Supported Web Frameworks\n\n* any web Frameworks just like ntex, actix-web, axum, hyper, rocket, tide, warp, salvo and more.\n\n##### Quick example: QueryWrapper and common usages (see example/crud_test.rs for details)\n\n* Cargo.toml\n\n#### default\n```toml\n#rbatis deps\nrbs = { version = \"4.5\"}\nrbatis = { version = \"4.5\"}\nrbdc-sqlite = { version = \"4.5\" }\n#rbdc-mysql={version=\"4.5\"}\n#rbdc-pg={version=\"4.5\"}\n#rbdc-mssql={version=\"4.5\"}\n\n#other deps\nserde = { version = \"1\", features = [\"derive\"] }\ntokio = { version = \"1\", features = [\"full\"] }\nlog = \"0.4\"\nfast_log = \"1.6\"\n```\n#### (option) 'native-tls'\n```toml\nrbs = { version = \"4.5\" }\nrbatis = { version = \"4.5\"}\nrbdc-sqlite = { version = \"4.5\", default-features = false, features = [\"tls-native-tls\"] }\n#rbdc-mysql={version=\"4.5\", default-features = false, features = [\"tls-native-tls\"]}\n#rbdc-pg={version=\"4.5\", default-features = false, features = [\"tls-native-tls\"]}\n#rbdc-mssql={version=\"4.5\", default-features = false, features = [\"tls-native-tls\"]}\n\n#other deps\nserde = { version = \"1\", features = [\"derive\"] }\ntokio = { version = \"1\", features = [\"full\"] }\nlog = \"0.4\"\nfast_log = \"1.6\"\n```\n\n#### default use\n```rust\n//#[macro_use] define in 'root crate' or 'mod.rs' or 'main.rs'\n\nuse rbatis::rbdc::datetime::DateTime;\n\n#[derive(Clone, Debug, Serialize, Deserialize)]\npub struct BizActivity {\n    pub id: Option<String>,\n    pub name: Option<String>,\n    pub pc_link: Option<String>,\n    pub h5_link: Option<String>,\n    pub pc_banner_img: Option<String>,\n    pub h5_banner_img: Option<String>,\n    pub sort: Option<String>,\n    pub status: Option<i32>,\n    pub remark: Option<String>,\n    pub create_time: Option<DateTime>,\n    pub version: Option<i64>,\n    pub delete_flag: Option<i32>,\n}\ncrud!(BizActivity{});//crud = insert+select_by_column+update_by_column+delete_by_column\n\nimpl_select!(BizActivity{select_all_by_id(id:&str,name:&str) => \"`where id = #{id} and name = #{name}`\"});\nimpl_select!(BizActivity{select_by_id(id:String) -> Option => \"`where id = #{id} limit 1`\"});\nimpl_update!(BizActivity{update_by_name(name:&str) => \"`where id = 1`\"});\nimpl_delete!(BizActivity {delete_by_name(name:&str) => \"`where name= '2'`\"});\nimpl_select_page!(BizActivity{select_page(name:&str) => \"`where name != #{name}`\"});\n\n#[tokio::main]\nasync fn main() {\n    /// enable log crate to show sql logs\n    fast_log::init(fast_log::Config::new().console()).expect(\"rbatis init fail\");\n    /// initialize rbatis. also you can call rb.clone(). this is  an Arc point\n    let rb = RBatis::new();\n    /// connect to database  \n    // sqlite \n    rb.init(SqliteDriver {}, \"sqlite://target/sqlite.db\").unwrap();\n    // mysql \n    // rb.init(MysqlDriver{},\"mysql://root:123456@localhost:3306/test\").unwrap();\n    // postgresql \n    // rb.init(PgDriver{},\"postgres://postgres:123456@localhost:5432/postgres\").unwrap();\n    // mssql/sqlserver\n    // rb.init(MssqlDriver{},\"jdbc:sqlserver://localhost:1433;User=SA;Password={TestPass!123456};Database=test\").unwrap();\n\n    let activity = BizActivity {\n        id: Some(\"2\".into()),\n        name: Some(\"2\".into()),\n        pc_link: Some(\"2\".into()),\n        h5_link: Some(\"2\".into()),\n        pc_banner_img: None,\n        h5_banner_img: None,\n        sort: None,\n        status: Some(2),\n        remark: Some(\"2\".into()),\n        create_time: Some(DateTime::now()),\n        version: Some(1),\n        delete_flag: Some(1),\n    };\n    let data = BizActivity::insert(&rb, &activity).await;\n    println!(\"insert = {:?}\", data);\n\n    let data = BizActivity::select_all_by_id(&rb, \"1\", \"1\").await;\n    println!(\"select_all_by_id = {:?}\", data);\n\n    let data = BizActivity::select_by_id(&rb, \"1\".to_string()).await;\n    println!(\"select_by_id = {:?}\", data);\n\n    let data = BizActivity::update_by_column(&rb, &activity, \"id\").await;\n    println!(\"update_by_column = {:?}\", data);\n\n    let data = BizActivity::update_by_name(&rb, &activity, \"test\").await;\n    println!(\"update_by_name = {:?}\", data);\n\n    let data = BizActivity::delete_by_column(&rb, \"id\", &\"2\".into()).await;\n    println!(\"delete_by_column = {:?}\", data);\n\n    let data = BizActivity::delete_by_name(&rb, \"2\").await;\n    println!(\"delete_by_column = {:?}\", data);\n\n    let data = BizActivity::select_page(&rb, &PageRequest::new(1, 10), \"2\").await;\n    println!(\"select_page = {:?}\", data);\n}\n///...more usage,see crud.rs\n```\n\n* raw-sql\n```rust\n#[tokio::main]\npub async fn main() {\n    use rbatis::RBatis;\n    use rbdc_sqlite::driver::SqliteDriver;\n    #[derive(Clone, Debug, serde::Serialize, serde::Deserialize)]\n    pub struct BizActivity {\n        pub id: Option<String>,\n        pub name: Option<String>,\n    }\n    fast_log::init(fast_log::Config::new().console()).expect(\"rbatis init fail\");\n    let rb = RBatis::new();\n    rb.init(SqliteDriver {}, \"sqlite://target/sqlite.db\").unwrap();\n    let table: Option<BizActivity> = rb\n        .query_decode(\"select * from biz_activity limit ?\", vec![rbs::to_value!(1)])\n        .await\n        .unwrap();\n    let count: u64 = rb\n        .query_decode(\"select count(1) as count from biz_activity\", vec![])\n        .await\n        .unwrap();\n    println!(\">>>>> table={:?}\", table);\n    println!(\">>>>> count={}\", count);\n}\n```\n\n#### macros\n\n* Important update (pysql removes runtime, directly compiles to static rust code)    This means that the performance of\n  SQL generated using py_sql,html_sql is roughly similar to that of handwritten code.\n\n> Because of the compile time, the annotations need to declare the database type to be used.\n\n```rust\n    #[py_sql(\"select * from biz_activity where delete_flag = 0\n                  if name != '':\n                    `and name=#{name}`\")]\nasync fn py_sql_tx(rb: &RBatis, tx_id: &String, name: &str) -> Vec<BizActivity> { impled!() }\n```\n\n* Added html_sql support, a form of organization similar to MyBatis, to facilitate migration of Java systems to Rust(\n  Note that it is also compiled as Rust code at build time and performs close to handwritten code)  this is very faster\n\n> Because of the compile time, the annotations need to declare the database type to be used\n\n```html\n<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.1//EN\"\n        \"https://raw.githubusercontent.com/rbatis/rbatis/master/rbatis-codegen/mybatis-3-mapper.dtd\">\n<mapper>\n    <select id=\"select_by_condition\">\n        `select * from biz_activity where `\n        <if test=\"name != ''\">\n            name like #{name}\n        </if>\n    </select>\n</mapper>\n```\n\n```rust\n    ///select page must have  '?:&PageRequest' arg and return 'Page<?>'\n#[html_sql(\"example/example.html\")]\nasync fn select_by_condition(rb: &dyn Executor, page_req: &PageRequest, name: &str) -> Page<BizActivity> { impled!() }\n```\n\n```rust\nuse once_cell::sync::Lazy;\n\npub static RB: Lazy<RBatis> = Lazy::new(|| RBatis::new());\n\n/// Macro generates execution logic based on method definition, similar to @select dynamic SQL of Java/Mybatis\n/// RB is the name referenced locally by RBatis, for example DAO ::RB, com:: XXX ::RB... Can be\n/// The second parameter is the standard driver SQL. Note that the corresponding database parameter mysql is? , pg is $1...\n/// macro auto edit method to  'pub async fn select(name: &str) -> rbatis::core::Result<BizActivity> {}'\n///\n#[sql(\"select * from biz_activity where id = ?\")]\npub async fn select(rb: &RBatis, name: &str) -> BizActivity {}\n//or： pub async fn select(name: &str) -> rbatis::core::Result<BizActivity> {}\n\n#[tokio::test]\npub async fn test_macro() {\n    fast_log::init(fast_log::Config::new().console()).expect(\"rbatis init fail\");\n    RB.link(\"mysql://root:123456@localhost:3306/test\").await.unwrap();\n    let a = select(&RB, \"1\").await.unwrap();\n    println!(\"{:?}\", a);\n}\n```\n\n# How it works\n\nRely on rbatis-codegen to create the source code of the corresponding structure from the html file at compile time (with debug_mode(Cargo.toml- ``` rbatis = { features = [\"debug_mode\"]} ```) enabled, you can observe the code-generated function), and call the generated method directly at run time.\nWe know that compilation is generally divided into three steps, lexes, syntactic analysis, semantic analysis, and intermediate code generation. In rbatis,\nLexical analysis is handled by the dependent func.rs in `rbatis-codegen`, which relies on syn and quote.\nParsing is done by parser_html and parser_pysql in `rbatis-codegen`\nThe generated syntax tree is a structure defined in the syntax_tree package in `rbatis-codegen`\nIntermediate code generation has func.rs generation function, all supported functions are defined in `rbatis-codegen`\n\nWhat is described above occurs during the cargo build phase, which is the compilation phase of the rust procedural macro, where the code generated by `rbatis-codegen` is handed back to the rust compiler for LLVM compilation to produce pure machine code\n\n\nSo I think rbatis is Truly zero overhead dynamic SQL compile-time ORM.\n\n# Submit PR(Pull Requests)\n\nYou are welcome to submit the merge, and make sure that any functionality you add has the appropriate mock unit test function added under the test package.\n\n\n# [Changelog](https://github.com/rbatis/rbatis/releases/)\n\n# Roadmap\n\n- [x] table sync plugin,auto create table/column (sqlite/mysql/mssql/postgres)\n- [x] customize connection pooling,connection pool add more dynamically configured parameters\n- [ ] V5 version\n\n# Ask AI For Help(AI帮助)\n\n<a href=\"https://chatglm.cn/main/gdetail/6604ffe818d17f1aaa8d9cf8\">\n<img style=\"width: 200px;height: 290px;\" width=\"200\" height=\"290\" src=\"ai.jpg\" alt=\"\" />\n</a>\n\n\n* [![discussions](https://img.shields.io/github/discussions/rbatis/rbatis)](https://github.com/rbatis/rbatis/discussions)\n\n# 联系方式/捐赠,或 [rb](https://github.com/rbatis/rbatis) 点star\n\n> 捐赠\n\n<img style=\"width: 200px;height: 300px;\" width=\"200\" height=\"300\" src=\"https://raw.githubusercontent.com/rbatis/rbatis.io/master/docs/_media/wx_account.png\" alt=\"zxj347284221\" />\n\n> 联系方式(添加好友请备注'rbatis') 微信群：先加微信，然后拉进群\n\n<img style=\"width: 200px;height: 250px;\" width=\"200\" height=\"250\" src=\"https://raw.githubusercontent.com/rbatis/rbatis.io/master/docs/_media/wechat.jpg\" alt=\"zxj347284221\" />\n\n\n"
        },
        {
          "name": "ai.jpg",
          "type": "blob",
          "size": 147.8603515625,
          "content": null
        },
        {
          "name": "benches",
          "type": "tree",
          "content": null
        },
        {
          "name": "check.sh",
          "type": "blob",
          "size": 0.041015625,
          "content": "cargo build --verbose\ncargo test --verbose"
        },
        {
          "name": "dyn_sql.md",
          "type": "blob",
          "size": 2.9443359375,
          "content": "<main id=\"bodyColumn\" class=\"span10\">\n<h1>RBatis Dynamic SQL</h1>\n<p>This library is a framework for generating dynamic SQL statements.  Think of it as a typesafe SQL templating library, with additional support for RBatis and rbaits_sql.</p>\n<p>The library will generate full DELETE, INSERT, SELECT, and UPDATE statements formatted for use by RBatis or any http library. The most common use case is to generate statements, and a matching set of parameters, that can be directly used by RBatis.  The library will also generate statements and parameter objects that are compatible with rbaits_sql.</p>\n<p>The library works by implementing an SQL-like DSL that creates an object containing a full SQL statement and any parameters required for that statement.  The SQL statement object can be used directly by RBatis as a parameter to a mapper method.</p>\n<p>The library will generate these types of SQL statements:</p>\n<ul>\n\n<li>COUNT statements - specialized SELECT statements that return a i64/u64 value</li>\n<li>DELETE statements with flexible WHERE clauses</li>\n<li>INSERT statements of several types:\n<ul>\n\n<li>A statement that inserts a single row with values supplied from a corresponding Object</li>\n<li>A statement that inserts a single row with values supplied directly in the statement</li>\n<li>A statement that inserts multiple rows using multiple VALUES clauses</li>\n<li>A statement that inserts multiple rows using a rbaits_sql batch</li>\n<li>A statement that inserts into a table using the results of a SELECT statement</li>\n</ul>\n</li>\n<li>SELECT statements with a flexible column list, a flexible WHERE clause, and support for distinct, “group by”, joins, unions, “order by”, etc.</li>\n<li>UPDATE statements with a flexible WHERE clause, and flexible SET clauses</li>\n</ul>\n<p>The primary goals of the library are:</p>\n<ol style=\"list-style-type: decimal\">\n\n<li>Typesafe - to the extent possible, the library will ensure that parameter types match the database column types</li>\n<li>Expressive - statements are built in a way that clearly communicates their meaning (thanks to Hamcrest for some inspiration)</li>\n<li>Flexible - where clauses can be built using any combination of and, or, and nested conditions</li>\n<li>Extensible - the library will render statements for RBatis, rbaits_sql or plain sql. It can be extended to  generate clauses for other frameworks as well.  Custom where conditions can be added easily if none of the built in conditions are sufficient for your needs.</li>\n<li>Small - the library is a small dependency to add.  It has no transitive dependencies.</li>\n</ol>\n<p>This library is design for Zero cost Dynamic SQL, implemented using (proc-macro,compile-time,Cow(Reduce unnecessary cloning)) techniques。 \nDynamic SQL is first compiled into RUST code, machine code which is eventually generated by the RUST compiler 。\ndon't need ONGL engine(mybatis)</p>\n<a href=\"https://rbatis.github.io/rbatis.io?id=htmlsql_langmybatis3-xml-compatibility\">doc link</a>\n</main>"
        },
        {
          "name": "example",
          "type": "tree",
          "content": null
        },
        {
          "name": "logo.png",
          "type": "blob",
          "size": 308.91796875,
          "content": null
        },
        {
          "name": "rbatis-codegen",
          "type": "tree",
          "content": null
        },
        {
          "name": "rbatis-macro-driver",
          "type": "tree",
          "content": null
        },
        {
          "name": "rbs",
          "type": "tree",
          "content": null
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "test.cmd",
          "type": "blob",
          "size": 0.021484375,
          "content": "cargo test --workspace"
        },
        {
          "name": "test.sh",
          "type": "blob",
          "size": 0.021484375,
          "content": "cargo test --workspace"
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}