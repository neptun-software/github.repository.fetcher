{
  "metadata": {
    "timestamp": 1736709049695,
    "page": 156,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjE2MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "chronotope/chrono",
      "stars": 3400,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".git-ignore-revs",
          "type": "blob",
          "size": 0.052734375,
          "content": "febb8dc168325ac471b54591c925c48b6a485962  # cargo fmt\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.0615234375,
          "content": "target\nCargo.lock\n.tool-versions\n\n# for jetbrains users\n.idea/\n"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 23.41015625,
          "content": "ChangeLog for Chrono\n====================\n\nThis documents notable changes to [Chrono](https://github.com/chronotope/chrono)\nup to and including version 0.4.19. For later releases, please review the\nrelease notes on [GitHub](https://github.com/chronotope/chrono/releases).\n\n## 0.4.19\n\n* Correct build on solaris/illumos\n\n## 0.4.18\n\n* Restore support for x86_64-fortanix-unknown-sgx\n\n## 0.4.17\n\n* Fix a name resolution error in wasm-bindgen code introduced by removing the dependency on time\n  v0.1\n\n## 0.4.16\n\n### Features\n\n* Add %Z specifier to the `FromStr`, similar to the glibc strptime\n  (does not set the offset from the timezone name)\n\n* Drop the dependency on time v0.1, which is deprecated, unless the `oldtime`\n  feature is active. This feature is active by default in v0.4.16 for backwards\n  compatibility, but will likely be removed in v0.5. Code that imports\n  `time::Duration` should be switched to import `chrono::Duration` instead to\n  avoid breakage.\n\n## 0.4.15\n\n### Fixes\n\n* Correct usage of vec in specific feature combinations (@quodlibetor)\n\n## 0.4.14 **YANKED**\n\n### Features\n\n* Add day and week iterators for `NaiveDate` (@gnzlbg & @robyoung)\n* Add a `Month` enum (@hhamana)\n* Add `locales`. All format functions can now use locales, see the documentation for the\n  `unstable-locales` feature.\n* Fix `Local.from_local_datetime` method for wasm\n\n### Improvements\n\n* Added MIN and MAX values for `NaiveTime`, `NaiveDateTime` and `DateTime<Utc>`.\n\n## 0.4.13\n\n### Features\n\n* Add `DurationRound` trait that allows rounding and truncating by `Duration` (@robyoung)\n\n### Internal Improvements\n\n* Code improvements to impl `From` for `js_sys` in wasm to reuse code (@schrieveslaach)\n\n## 0.4.12\n\n### New Methods and impls\n\n* `Duration::abs` to ensure that a duration is just a magnitude (#418 @abreis).\n\n### Compatibility improvements\n\n* impl `From` for `js_sys` in wasm (#424 @schrieveslaach)\n* Bump required version of `time` for redox support.\n\n### Bugfixes\n\n* serde modules do a better job with `Option` types (#417 @mwkroening and #429\n  @fx-kirin)\n* Use js runtime when using wasmbind to get the local offset (#412\n  @quodlibetor)\n\n### Internal Improvements\n\n* Migrate to github actions from travis-ci, make the overall CI experience more comprehensible,\n  significantly faster and more correct (#439 @quodlibetor)\n\n## 0.4.11\n\n### Improvements\n\n* Support a space or `T` in `FromStr` for `DateTime<Tz>`, meaning that e.g.\n  `dt.to_string().parse::<DateTime<Utc>>()` now correctly works on round-trip.\n  (@quodlibetor in #378)\n* Support \"negative UTC\" in `parse_from_rfc2822` (@quodlibetor #368 reported in\n  #102)\n* Support comparisons of DateTimes with different timezones (@dlalic in #375)\n* Many documentation improvements\n\n### Bitrot and external integration fixes\n\n* Don't use wasmbind on wasi (@coolreader18 #365)\n* Avoid deprecation warnings for `Error::description` (@AnderEnder and\n  @quodlibetor #376)\n\n### Internal improvements\n\n* Use Criterion for benchmarks (@quodlibetor)\n\n## 0.4.10\n\n### Compatibility notes\n\n* Putting some functionality behind an `alloc` feature to improve no-std\n  support (in #341) means that if you were relying on chrono with\n  `no-default-features` *and* using any of the functions that require alloc\n  support (i.e. any of the string-generating functions like `to_rfc3339`) you\n  will need to add the `alloc` feature in your Cargo.toml.\n\n### Improvements\n\n* `DateTime::parse_from_str` is more than 2x faster in some cases. (@michalsrb\n  #358)\n* Significant improvements to no-std and alloc support (This should also make\n  many format/serialization operations induce zero unnecessary allocations)\n  (@CryZe #341)\n\n### Features\n\n* Functions that were accepting `Iterator` of `Item`s (for example\n  `format_with_items`) now accept `Iterator` of `Borrow<Item>`, so one can\n  use values or references. (@michalsrb #358)\n* Add built-in support for structs with nested `Option<Datetime>` etc fields\n  (@manifest #302)\n\n### Internal/doc improvements\n\n* Use markdown footnotes on the `strftime` docs page (@qudlibetor #359)\n* Migrate from `try!` -> `?` (question mark) because it is now emitting\n  deprecation warnings and has been stable since rustc 1.13.0\n* Deny dead code\n\n## 0.4.9\n\n### Fixes\n\n* Make Datetime arithmetic adjust their offsets after discovering their new\n  timestamps (@quodlibetor #337)\n* Put wasm-bindgen related code and dependencies behind a `wasmbind` feature\n  gate. (@quodlibetor #335)\n\n## 0.4.8\n\n### Fixes\n\n* Add '0' to single-digit days in rfc2822 date format (@wyhaya #323)\n* Correctly pad DelayedFormat (@SamokhinIlya #320)\n\n### Features\n\n* Support `wasm-unknown-unknown` via wasm-bindgen (in addition to\n  emscripten/`wasm-unknown-emscripten`). (finished by @evq in #331, initial\n  work by @jjpe #287)\n\n## 0.4.7\n\n### Fixes\n\n* Disable libc default features so that CI continues to work on rust 1.13\n* Fix panic on negative inputs to timestamp_millis (@cmars #292)\n* Make `LocalResult` `Copy/Eq/Hash`\n\n### Features\n\n* Add `std::convert::From` conversions between the different timezone formats\n  (@mqudsi #271)\n* Add `timestamp_nanos` methods (@jean-airoldie #308)\n* Documentation improvements\n\n## 0.4.6\n\n### Maintenance\n\n* Doc improvements -- improve README CI verification, external links\n* winapi upgrade to 0.3\n\n## Unreleased\n\n### Features\n\n* Added `NaiveDate::from_weekday_of_month{,_opt}` for getting eg. the 2nd Friday of March 2017.\n\n## 0.4.5\n\n### Features\n\n* Added several more serde deserialization helpers (@novacrazy #258)\n* Enabled all features on the playground (@davidtwco #267)\n* Derive `Hash` on `FixedOffset` (@LuoZijun #254)\n* Improved docs (@storyfeet #261, @quodlibetor #252)\n\n## 0.4.4\n\n### Features\n\n* Added support for parsing nanoseconds without the leading dot (@emschwartz #251)\n\n## 0.4.3\n\n### Features\n\n* Added methods to DateTime/NaiveDateTime to present the stored value as a number\n  of nanoseconds since the UNIX epoch (@harkonenbade #247)\n* Added a serde serialise/deserialise module for nanosecond timestamps. (@harkonenbade #247)\n* Added \"Permissive\" timezone parsing which allows a numeric timezone to\n  be specified without minutes. (@quodlibetor #242)\n\n## 0.4.2\n\n### Deprecations\n\n* More strongly deprecate RustcSerialize: remove it from documentation unless\n  the feature is enabled, issue a deprecation warning if the rustc-serialize\n  feature is enabled (@quodlibetor #174)\n\n### Features\n\n* Move all uses of the system clock behind a `clock` feature, for use in\n  environments where we don't have access to the current time. (@jethrogb #236)\n* Implement subtraction of two `Date`s, `Time`s, or `DateTime`s, returning a\n  `Duration` (@tobz1000 #237)\n\n## 0.4.1\n\n### Bug Fixes\n\n* Allow parsing timestamps with subsecond precision (@jonasbb)\n* RFC2822 allows times to not include the second (@upsuper)\n\n### Features\n\n* New `timestamp_millis` method on `DateTime` and `NaiveDateTime` that returns\n  number of milliseconds since the epoch. (@quodlibetor)\n* Support exact decimal width on subsecond display for RFC3339 via a new\n  `to_rfc3339_opts` method on `DateTime` (@dekellum)\n* Use no_std-compatible num dependencies (@cuviper)\n* Add `SubsecRound` trait that allows rounding to the nearest second\n  (@dekellum)\n\n### Code Hygiene and Docs\n\n* Docs! (@alatiera @kosta @quodlibetor @kennytm)\n* Run clippy and various fixes (@quodlibetor)\n\n## 0.4.0 (2017-06-22)\n\nThis was originally planned as a minor release but was pushed to a major\nrelease due to the compatibility concern raised.\n\n### Added\n\n- `IsoWeek` has been added for the ISO week without time zone.\n\n- The `+=` and `-=` operators against `time::Duration` are now supported for\n  `NaiveDate`, `NaiveTime` and `NaiveDateTime`. (#99)\n\n  (Note that this does not invalidate the eventual deprecation of `time::Duration`.)\n\n- `SystemTime` and `DateTime<Tz>` types can be now converted to each other via `From`.\n  Due to the obvious lack of time zone information in `SystemTime`,\n  the forward direction is limited to `DateTime<Utc>` and `DateTime<Local>` only.\n\n### Changed\n\n- Intermediate implementation modules have been flattened (#161),\n  and `UTC` has been renamed to `Utc` in accordance with the current convention (#148).\n\n  The full list of changes is as follows:\n\n  Before                                   | After\n  ---------------------------------------- | ----------------------------\n  `chrono::date::Date`                     | `chrono::Date`\n  `chrono::date::MIN`                      | `chrono::MIN_DATE`\n  `chrono::date::MAX`                      | `chrono::MAX_DATE`\n  `chrono::datetime::DateTime`             | `chrono::DateTime`\n  `chrono::naive::time::NaiveTime`         | `chrono::naive::NaiveTime`\n  `chrono::naive::date::NaiveDate`         | `chrono::naive::NaiveDate`\n  `chrono::naive::date::MIN`               | `chrono::naive::MIN_DATE`\n  `chrono::naive::date::MAX`               | `chrono::naive::MAX_DATE`\n  `chrono::naive::datetime::NaiveDateTime` | `chrono::naive::NaiveDateTime`\n  `chrono::offset::utc::UTC`               | `chrono::offset::Utc`\n  `chrono::offset::fixed::FixedOffset`     | `chrono::offset::FixedOffset`\n  `chrono::offset::local::Local`           | `chrono::offset::Local`\n  `chrono::format::parsed::Parsed`         | `chrono::format::Parsed`\n\n  With an exception of `Utc`, this change does not affect any direct usage of\n  `chrono::*` or `chrono::prelude::*` types.\n\n- `Datelike::isoweekdate` is replaced by `Datelike::iso_week` which only returns the ISO week.\n\n  The original method used to return a tuple of year number, week number and day of the week,\n  but this duplicated the `Datelike::weekday` method and it had been hard to deal with\n  the raw year and week number for the ISO week date.\n  This change isolates any logic and API for the week date into a separate type.\n\n- `NaiveDateTime` and `DateTime` can now be deserialized from an integral UNIX timestamp. (#125)\n\n  This turns out to be very common input for web-related usages.\n  The existing string representation is still supported as well.\n\n- `chrono::serde` and `chrono::naive::serde` modules have been added\n  for the serialization utilities. (#125)\n\n  Currently they contain the `ts_seconds` modules that can be used to\n  serialize `NaiveDateTime` and `DateTime` values into an integral UNIX timestamp.\n  This can be combined with Serde's `[de]serialize_with` attributes\n  to fully support the (de)serialization to/from the timestamp.\n\n  For rustc-serialize, there are separate `chrono::TsSeconds` and `chrono::naive::TsSeconds` types\n  that are newtype wrappers implementing different (de)serialization logics.\n  This is a suboptimal API, however, and it is strongly recommended to migrate to Serde.\n\n### Fixed\n\n- The major version was made to fix the broken Serde dependency issues. (#146, #156, #158, #159)\n\n  The original intention to technically break the dependency was\n  to facilitate the use of Serde 1.0 at the expense of temporary breakage.\n  Whether this was appropriate or not is quite debatable,\n  but it became clear that there are several high-profile crates requiring Serde 0.9\n  and it is not feasible to force them to use Serde 1.0 anyway.\n\n  To the end, the new major release was made with some known lower-priority breaking changes.\n  0.3.1 is now yanked and any remaining 0.3 users can safely roll back to 0.3.0.\n\n- Various documentation fixes and goodies. (#92, #131, #136)\n\n## 0.3.1 (2017-05-02)\n\n### Added\n\n- `Weekday` now implements `FromStr`, `Serialize` and `Deserialize`. (#113)\n\n  The syntax is identical to `%A`, i.e. either the shortest or the longest form of English names.\n\n### Changed\n\n- Serde 1.0 is now supported. (#142)\n\n  This is technically a breaking change because Serde 0.9 and 1.0 are not compatible,\n  but this time we decided not to issue a minor version because\n  we have already seen Serde 0.8 and 0.9 compatibility problems even after 0.3.0 and\n  a new minor version turned out to be not very helpful for this kind of issues.\n\n### Fixed\n\n- Fixed a bug that the leap second can be mapped wrongly in the local time zone.\n  Only occurs when the local time zone is behind UTC. (#130)\n\n## 0.3.0 (2017-02-07)\n\nThe project has moved to the [Chronotope](https://github.com/chronotope/) organization.\n\n### Added\n\n- `chrono::prelude` module has been added. All other glob imports are now discouraged.\n\n- `FixedOffset` can be added to or subtracted from any timelike types.\n\n    - `FixedOffset::local_minus_utc` and `FixedOffset::utc_minus_local` methods have been added.\n      Note that the old `Offset::local_minus_utc` method is gone; see below.\n\n- Serde support for non-self-describing formats like Bincode is added. (#89)\n\n- Added `Item::Owned{Literal,Space}` variants for owned formatting items. (#76)\n\n- Formatting items and the `Parsed` type have been slightly adjusted so that\n  they can be internally extended without breaking any compatibility.\n\n- `Weekday` is now `Hash`able. (#109)\n\n- `ParseError` now implements `Eq` as well as `PartialEq`. (#114)\n\n- More documentation improvements. (#101, #108, #112)\n\n### Changed\n\n- Chrono now only supports Rust 1.13.0 or later (previously: Rust 1.8.0 or later).\n\n- Serde 0.9 is now supported.\n  Due to the API difference, support for 0.8 or older is discontinued. (#122)\n\n- Rustc-serialize implementations are now on par with corresponding Serde implementations.\n  They both standardize on the `std::fmt::Debug` textual output.\n\n  **This is a silent breaking change (hopefully the last though).**\n  You should be prepared for the format change if you depended on rustc-serialize.\n\n- `Offset::local_minus_utc` is now `Offset::fix`, and returns `FixedOffset` instead of a duration.\n\n  This makes every time zone operation operate within a bias less than one day,\n  and vastly simplifies many logics.\n\n- `chrono::format::format` now receives `FixedOffset` instead of `time::Duration`.\n\n- The following methods and implementations have been renamed and older names have been *removed*.\n  The older names will be reused for the same methods with `std::time::Duration` in the future.\n\n    - `checked_*` → `checked_*_signed` in `Date`, `DateTime`, `NaiveDate` and `NaiveDateTime` types\n\n    - `overflowing_*` → `overflowing_*_signed` in the `NaiveTime` type\n\n    - All subtraction implementations between two time instants have been moved to\n      `signed_duration_since`, following the naming in `std::time`.\n\n### Fixed\n\n- Fixed a panic when the `Local` offset receives a leap second. (#123)\n\n### Removed\n\n- Rustc-serialize support for `Date<Tz>` types and all offset types has been dropped.\n\n  These implementations were automatically derived and never had been in a good shape.\n  Moreover there are no corresponding Serde implementations, limiting their usefulness.\n  In the future they may be revived with more complete implementations.\n\n- The following method aliases deprecated in the 0.2 branch have been removed.\n\n    - `DateTime::num_seconds_from_unix_epoch` (→ `DateTime::timestamp`)\n    - `NaiveDateTime::from_num_seconds_from_unix_epoch` (→ `NaiveDateTime::from_timestamp`)\n    - `NaiveDateTime::from_num_seconds_from_unix_epoch_opt` (→ `NaiveDateTime::from_timestamp_opt`)\n    - `NaiveDateTime::num_seconds_unix_epoch` (→ `NaiveDateTime::timestamp`)\n\n- Formatting items are no longer `Copy`, except for `chrono::format::Pad`.\n\n- `chrono::offset::add_with_leapsecond` has been removed.\n  Use a direct addition with `FixedOffset` instead.\n\n## 0.2.25 (2016-08-04)\n\nThis is the last version officially supports Rust 1.12.0 or older.\n\n(0.2.24 was accidentally uploaded without a proper check for warnings in the default state,\nand replaced by 0.2.25 very shortly. Duh.)\n\n### Added\n\n- Serde 0.8 is now supported. 0.7 also remains supported. (#86)\n\n### Fixed\n\n- The deserialization implementation for rustc-serialize now properly verifies the input.\n  All serialization codes are also now thoroughly tested. (#42)\n\n## 0.2.23 (2016-08-03)\n\n### Added\n\n- The documentation was greatly improved for several types,\n  and tons of cross-references have been added. (#77, #78, #80, #82)\n\n- `DateTime::timestamp_subsec_{millis,micros,nanos}` methods have been added. (#81)\n\n### Fixed\n\n- When the system time records a leap second,\n  the nanosecond component was mistakenly reset to zero. (#84)\n\n- `Local` offset misbehaves in Windows for August and later,\n  due to the long-standing libtime bug (dates back to mid-2015).\n  Workaround has been implemented. (#85)\n\n## 0.2.22 (2016-04-22)\n\n### Fixed\n\n- `%.6f` and `%.9f` used to print only three digits when the nanosecond part is zero. (#71)\n- The documentation for `%+` has been updated to reflect the current status. (#71)\n\n## 0.2.21 (2016-03-29)\n\n### Fixed\n\n- `Fixed::LongWeekdayName` was unable to recognize `\"sunday\"` (whoops). (#66)\n\n## 0.2.20 (2016-03-06)\n\n### Changed\n\n- `serde` dependency has been updated to 0.7. (#63, #64)\n\n## 0.2.19 (2016-02-05)\n\n### Added\n\n- The documentation for `Date` is made clear about its ambiguity and guarantees.\n\n### Fixed\n\n- `DateTime::date` had been wrong when the local date and the UTC date is in disagreement. (#61)\n\n## 0.2.18 (2016-01-23)\n\n### Fixed\n\n- Chrono no longer pulls a superfluous `rand` dependency. (#57)\n\n## 0.2.17 (2015-11-22)\n\n### Added\n\n- Naive date and time types and `DateTime` now have a `serde` support.\n  They serialize as an ISO 8601 / RFC 3339 string just like `Debug`. (#51)\n\n## 0.2.16 (2015-09-06)\n\n### Added\n\n- Added `%.3f`, `%.6f` and `%.9f` specifier for formatting fractional seconds\n  up to 3, 6 or 9 decimal digits. This is a natural extension to the existing `%f`.\n  Note that this is (not yet) generic, no other value of precision is supported. (#45)\n\n### Changed\n\n- Forbade unsized types from implementing `Datelike` and `Timelike`.\n  This does not make a big harm as any type implementing them should be already sized\n  to be practical, but this change still can break highly generic codes. (#46)\n\n### Fixed\n\n- Fixed a broken link in the `README.md`. (#41)\n\n## 0.2.15 (2015-07-05)\n\n### Added\n\n- Padding modifiers `%_?`, `%-?` and `%0?` are implemented.\n  They are glibc extensions which seem to be reasonably widespread (e.g. Ruby).\n\n- Added `%:z` specifier and corresponding formatting items\n  which is essentially the same as `%z` but with a colon.\n\n- Added a new specifier `%.f` which precision adapts from the input.\n  This was added as a response to the UX problems in the original nanosecond specifier `%f`.\n\n### Fixed\n\n- `Numeric::Timestamp` specifier (`%s`) was ignoring the time zone offset when provided.\n\n- Improved the documentation and associated tests for `strftime`.\n\n## 0.2.14 (2015-05-15)\n\n### Fixed\n\n- `NaiveDateTime +/- Duration` or `NaiveTime +/- Duration` could have gone wrong\n  when the `Duration` to be added is negative and has a fractional second part.\n  This was caused by an underflow in the conversion from `Duration` to the parts;\n  the lack of tests for this case allowed a bug. (#37)\n\n## 0.2.13 (2015-04-29)\n\n### Added\n\n- The optional dependency on `rustc_serialize` and\n  relevant `Rustc{En,De}codable` implementations for supported types has been added.\n  This is enabled by the `rustc-serialize` Cargo feature. (#34)\n\n### Changed\n\n- `chrono::Duration` reexport is changed to that of crates.io `time` crate.\n  This enables Rust 1.0 beta compatibility.\n\n## 0.2.4 (2015-03-03)\n\n### Fixed\n\n- Clarified the meaning of `Date<Tz>` and fixed unwanted conversion problem\n  that only occurs with positive UTC offsets. (#27)\n\n## 0.2.3 (2015-02-27)\n\n### Added\n\n- `DateTime<Tz>` and `Date<Tz>` is now `Copy`/`Send` when `Tz::Offset` is `Copy`/`Send`.\n  The implementations for them were mistakenly omitted. (#25)\n\n### Fixed\n\n- `Local::from_utc_datetime` didn't set a correct offset. (#26)\n\n## 0.2.1 (2015-02-21)\n\n### Changed\n\n- `DelayedFormat` no longer conveys a redundant lifetime.\n\n## 0.2.0 (2015-02-19)\n\n### Added\n\n- `Offset` is split into `TimeZone` (constructor) and `Offset` (storage) types.\n  You would normally see only the former, as the latter is mostly an implementation detail.\n  Most importantly, `Local` now can be used to directly construct timezone-aware values.\n\n  Some types (currently, `UTC` and `FixedOffset`) are both `TimeZone` and `Offset`,\n  but others aren't (e.g. `Local` is not what is being stored to each `DateTime` values).\n\n- `LocalResult::map` convenience method has been added.\n\n- `TimeZone` now allows a construction of `DateTime` values from UNIX timestamp,\n  via `timestamp` and `timestamp_opt` methods.\n\n- `TimeZone` now also has a method for parsing `DateTime`, namely `datetime_from_str`.\n\n- The following methods have been added to all date and time types:\n\n    - `checked_add`\n    - `checked_sub`\n    - `format_with_items`\n\n- The following methods have been added to all timezone-aware types:\n\n    - `timezone`\n    - `with_timezone`\n    - `naive_utc`\n    - `naive_local`\n\n- `parse_from_str` method has been added to all naive types and `DateTime<FixedOffset>`.\n\n- All naive types and instances of `DateTime` with time zones `UTC`, `Local` and `FixedOffset`\n  implement the `FromStr` trait. They parse what `std::fmt::Debug` would print.\n\n- `chrono::format` has been greatly rewritten.\n\n    - The formatting syntax parser is modular now, available at `chrono::format::strftime`.\n\n    - The parser and resolution algorithm is also modular, the former is available at\n      `chrono::format::parse` while the latter is available at `chrono::format::parsed`.\n\n    - Explicit support for RFC 2822 and 3339 syntaxes is landed.\n\n    - There is a minor formatting difference with atypical values,\n      e.g. for years not between 1 BCE and 9999 CE.\n\n### Changed\n\n- Most uses of `Offset` are converted to `TimeZone`.\n  In fact, *all* user-facing code is expected to be `Offset`-free.\n\n- `[Naive]DateTime::*num_seconds_from_unix_epoch*` methods have been renamed to\n  simply `timestamp` or `from_timestamp*`. The original names have been deprecated.\n\n### Removed\n\n- `Time` has been removed. This also prompts a related set of methods in `TimeZone`.\n\n  This is in principle possible, but in practice has seen a little use\n  because it can only be meaningfully constructed via an existing `DateTime` value.\n  This made many operations to `Time` unintuitive or ambiguous,\n  so we simply let it go.\n\n  In the case that `Time` is really required, one can use a simpler `NaiveTime`.\n  `NaiveTime` and `NaiveDate` can be freely combined and split,\n  and `TimeZone::from_{local,utc}_datetime` can be used to convert from/to the local time.\n\n- `with_offset` method has been removed. Use `with_timezone` method instead.\n  (This is not deprecated since it is an integral part of offset reform.)\n\n## 0.1.14 (2015-01-10)\n\n### Added\n\n- Added a missing `std::fmt::String` impl for `Local`.\n\n## 0.1.13 (2015-01-10)\n\n### Changed\n\n- Most types now implement both `std::fmt::Show` and `std::fmt::String`,\n  with the former used for the stricter output and the latter used for more casual output.\n\n### Removed\n\n- `Offset::name` has been replaced by a `std::fmt::String` implementation to `Offset`.\n\n## 0.1.12 (2015-01-08)\n\n### Removed\n\n- `Duration + T` no longer works due to the updated impl reachability rules.\n  Use `T + Duration` as a workaround.\n\n## 0.1.4 (2014-12-13)\n\n### Fixed\n\n- Fixed a bug that `Date::and_*` methods with an offset that can change the date are\n  off by one day.\n\n## 0.1.3 (2014-11-28)\n\n### Added\n\n- `{Date,Time,DateTime}::with_offset` methods have been added.\n\n- `LocalResult` now implements a common set of traits.\n\n- `LocalResult::and_*` methods have been added.\n  They are useful for safely chaining `LocalResult<Date<Off>>` methods\n  to make `LocalResult<DateTime<Off>>`.\n\n### Changed\n\n- `Offset::name` now returns `SendStr`.\n\n- `{Date,Time} - Duration` overloadings are now allowed.\n\n## 0.1.2 (2014-11-24)\n\n### Added\n\n- `Duration + Date` overloading is now allowed.\n\n### Changed\n\n- Chrono no longer needs `num` dependency.\n\n## 0.1.0 (2014-11-20)\n\nThe initial version that was available to `crates.io`.\n"
        },
        {
          "name": "CITATION.cff",
          "type": "blob",
          "size": 0.75,
          "content": "# Parser settings.\ncff-version: 1.2.0\nmessage: Please cite this crate using these information.\n\n# Version information.\ndate-released: 2024-04-15\nversion: 0.4.38\n\n# Project information.\nabstract: Date and time library for Rust\nauthors:\n  - alias: quodlibetor\n    family-names: Maister\n    given-names: Brandon W.\n  - alias: djc\n    family-names: Ochtman\n    given-names: Dirkjan\n  - alias: lifthrasiir\n    family-names: Seonghoon\n    given-names: Kang\n  - alias: esheppa\n    family-names: Sheppard\n    given-names: Eric\n  - alias: pitdicker\n    family-names: Dicker\n    given-names: Paul\nlicense:\n  - Apache-2.0\n  - MIT\nrepository-artifact: https://crates.io/crates/chrono\nrepository-code: https://github.com/chronotope/chrono\ntitle: chrono\nurl: https://docs.rs/chrono\n"
        },
        {
          "name": "Cargo.toml",
          "type": "blob",
          "size": 2.646484375,
          "content": "[package]\nname = \"chrono\"\nversion = \"0.4.39\"\ndescription = \"Date and time library for Rust\"\nhomepage = \"https://github.com/chronotope/chrono\"\ndocumentation = \"https://docs.rs/chrono/\"\nrepository = \"https://github.com/chronotope/chrono\"\nkeywords = [\"date\", \"time\", \"calendar\"]\ncategories = [\"date-and-time\"]\nreadme = \"README.md\"\nlicense = \"MIT OR Apache-2.0\"\ninclude = [\"src/*\", \"tests/*.rs\", \"LICENSE.txt\", \"CITATION.cff\"]\nedition = \"2021\"\nrust-version = \"1.61.0\"\n\n[lib]\nname = \"chrono\"\n\n[features]\n# Don't forget to adjust `ALL_NON_EXCLUSIVE_FEATURES` in CI scripts when adding a feature or an optional dependency.\ndefault = [\"clock\", \"std\", \"oldtime\", \"wasmbind\"]\nalloc = []\nlibc = []\nwinapi = [\"windows-targets\"]\nstd = [\"alloc\"]\nclock = [\"winapi\", \"iana-time-zone\", \"android-tzdata\", \"now\"]\nnow = [\"std\"]\noldtime = []\nwasmbind = [\"wasm-bindgen\", \"js-sys\"]\nunstable-locales = [\"pure-rust-locales\"]\n# Note that rkyv-16, rkyv-32, and rkyv-64 are mutually exclusive.\nrkyv = [\"dep:rkyv\", \"rkyv/size_32\"]\nrkyv-16 = [\"dep:rkyv\", \"rkyv?/size_16\"]\nrkyv-32 = [\"dep:rkyv\", \"rkyv?/size_32\"]\nrkyv-64 = [\"dep:rkyv\", \"rkyv?/size_64\"]\nrkyv-validation = [\"rkyv?/validation\"]\n# Features for internal use only:\n__internal_bench = []\n\n[dependencies]\nnum-traits = { version = \"0.2\", default-features = false }\nserde = { version = \"1.0.99\", default-features = false, optional = true }\npure-rust-locales = { version = \"0.8\", optional = true }\nrkyv = { version = \"0.7.43\", optional = true, default-features = false }\narbitrary = { version = \"1.0.0\", features = [\"derive\"], optional = true }\n\n[target.'cfg(all(target_arch = \"wasm32\", not(any(target_os = \"emscripten\", target_os = \"wasi\"))))'.dependencies]\nwasm-bindgen = { version = \"0.2\", optional = true }\njs-sys = { version = \"0.3\", optional = true }       # contains FFI bindings for the JS Date API\n\n[target.'cfg(windows)'.dependencies]\nwindows-targets = { version = \"0.53\", optional = true }\n\n[target.'cfg(windows)'.dev-dependencies]\nwindows-bindgen = { version = \"0.59\" } # MSRV is 1.74\n\n[target.'cfg(unix)'.dependencies]\niana-time-zone = { version = \"0.1.45\", optional = true, features = [\"fallback\"] }\n\n[target.'cfg(target_os = \"android\")'.dependencies]\nandroid-tzdata = { version = \"0.1.1\", optional = true }\n\n[dev-dependencies]\nserde_json = { version = \"1\" }\nserde_derive = { version = \"1\", default-features = false }\nbincode = { version = \"1.3.0\" }\n\n[target.'cfg(all(target_arch = \"wasm32\", not(any(target_os = \"emscripten\", target_os = \"wasi\"))))'.dev-dependencies]\nwasm-bindgen-test = \"0.3\"\n\n[package.metadata.docs.rs]\nfeatures = [\"arbitrary\", \"rkyv\", \"serde\", \"unstable-locales\"]\nrustdoc-args = [\"--cfg\", \"docsrs\"]\n\n[package.metadata.playground]\nfeatures = [\"serde\"]\n"
        },
        {
          "name": "LICENSE.txt",
          "type": "blob",
          "size": 12.0185546875,
          "content": "Rust-chrono is dual-licensed under The MIT License [1] and\nApache 2.0 License [2]. Copyright (c) 2014--2017, Kang Seonghoon and\ncontributors.\n\nNota Bene: This is same as the Rust Project's own license.\n\n\n[1]: <http://opensource.org/licenses/MIT>, which is reproduced below:\n\n~~~~\nThe MIT License (MIT)\n\nCopyright (c) 2014, Kang Seonghoon.\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n~~~~\n\n\n[2]: <http://www.apache.org/licenses/LICENSE-2.0>, which is reproduced below:\n\n~~~~\n                              Apache License\n                        Version 2.0, January 2004\n                     http://www.apache.org/licenses/\n\nTERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n1. Definitions.\n\n   \"License\" shall mean the terms and conditions for use, reproduction,\n   and distribution as defined by Sections 1 through 9 of this document.\n\n   \"Licensor\" shall mean the copyright owner or entity authorized by\n   the copyright owner that is granting the License.\n\n   \"Legal Entity\" shall mean the union of the acting entity and all\n   other entities that control, are controlled by, or are under common\n   control with that entity. For the purposes of this definition,\n   \"control\" means (i) the power, direct or indirect, to cause the\n   direction or management of such entity, whether by contract or\n   otherwise, or (ii) ownership of fifty percent (50%) or more of the\n   outstanding shares, or (iii) beneficial ownership of such entity.\n\n   \"You\" (or \"Your\") shall mean an individual or Legal Entity\n   exercising permissions granted by this License.\n\n   \"Source\" form shall mean the preferred form for making modifications,\n   including but not limited to software source code, documentation\n   source, and configuration files.\n\n   \"Object\" form shall mean any form resulting from mechanical\n   transformation or translation of a Source form, including but\n   not limited to compiled object code, generated documentation,\n   and conversions to other media types.\n\n   \"Work\" shall mean the work of authorship, whether in Source or\n   Object form, made available under the License, as indicated by a\n   copyright notice that is included in or attached to the work\n   (an example is provided in the Appendix below).\n\n   \"Derivative Works\" shall mean any work, whether in Source or Object\n   form, that is based on (or derived from) the Work and for which the\n   editorial revisions, annotations, elaborations, or other modifications\n   represent, as a whole, an original work of authorship. For the purposes\n   of this License, Derivative Works shall not include works that remain\n   separable from, or merely link (or bind by name) to the interfaces of,\n   the Work and Derivative Works thereof.\n\n   \"Contribution\" shall mean any work of authorship, including\n   the original version of the Work and any modifications or additions\n   to that Work or Derivative Works thereof, that is intentionally\n   submitted to Licensor for inclusion in the Work by the copyright owner\n   or by an individual or Legal Entity authorized to submit on behalf of\n   the copyright owner. For the purposes of this definition, \"submitted\"\n   means any form of electronic, verbal, or written communication sent\n   to the Licensor or its representatives, including but not limited to\n   communication on electronic mailing lists, source code control systems,\n   and issue tracking systems that are managed by, or on behalf of, the\n   Licensor for the purpose of discussing and improving the Work, but\n   excluding communication that is conspicuously marked or otherwise\n   designated in writing by the copyright owner as \"Not a Contribution.\"\n\n   \"Contributor\" shall mean Licensor and any individual or Legal Entity\n   on behalf of whom a Contribution has been received by Licensor and\n   subsequently incorporated within the Work.\n\n2. Grant of Copyright License. Subject to the terms and conditions of\n   this License, each Contributor hereby grants to You a perpetual,\n   worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n   copyright license to reproduce, prepare Derivative Works of,\n   publicly display, publicly perform, sublicense, and distribute the\n   Work and such Derivative Works in Source or Object form.\n\n3. Grant of Patent License. Subject to the terms and conditions of\n   this License, each Contributor hereby grants to You a perpetual,\n   worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n   (except as stated in this section) patent license to make, have made,\n   use, offer to sell, sell, import, and otherwise transfer the Work,\n   where such license applies only to those patent claims licensable\n   by such Contributor that are necessarily infringed by their\n   Contribution(s) alone or by combination of their Contribution(s)\n   with the Work to which such Contribution(s) was submitted. If You\n   institute patent litigation against any entity (including a\n   cross-claim or counterclaim in a lawsuit) alleging that the Work\n   or a Contribution incorporated within the Work constitutes direct\n   or contributory patent infringement, then any patent licenses\n   granted to You under this License for that Work shall terminate\n   as of the date such litigation is filed.\n\n4. Redistribution. You may reproduce and distribute copies of the\n   Work or Derivative Works thereof in any medium, with or without\n   modifications, and in Source or Object form, provided that You\n   meet the following conditions:\n\n   (a) You must give any other recipients of the Work or\n       Derivative Works a copy of this License; and\n\n   (b) You must cause any modified files to carry prominent notices\n       stating that You changed the files; and\n\n   (c) You must retain, in the Source form of any Derivative Works\n       that You distribute, all copyright, patent, trademark, and\n       attribution notices from the Source form of the Work,\n       excluding those notices that do not pertain to any part of\n       the Derivative Works; and\n\n   (d) If the Work includes a \"NOTICE\" text file as part of its\n       distribution, then any Derivative Works that You distribute must\n       include a readable copy of the attribution notices contained\n       within such NOTICE file, excluding those notices that do not\n       pertain to any part of the Derivative Works, in at least one\n       of the following places: within a NOTICE text file distributed\n       as part of the Derivative Works; within the Source form or\n       documentation, if provided along with the Derivative Works; or,\n       within a display generated by the Derivative Works, if and\n       wherever such third-party notices normally appear. The contents\n       of the NOTICE file are for informational purposes only and\n       do not modify the License. You may add Your own attribution\n       notices within Derivative Works that You distribute, alongside\n       or as an addendum to the NOTICE text from the Work, provided\n       that such additional attribution notices cannot be construed\n       as modifying the License.\n\n   You may add Your own copyright statement to Your modifications and\n   may provide additional or different license terms and conditions\n   for use, reproduction, or distribution of Your modifications, or\n   for any such Derivative Works as a whole, provided Your use,\n   reproduction, and distribution of the Work otherwise complies with\n   the conditions stated in this License.\n\n5. Submission of Contributions. Unless You explicitly state otherwise,\n   any Contribution intentionally submitted for inclusion in the Work\n   by You to the Licensor shall be under the terms and conditions of\n   this License, without any additional terms or conditions.\n   Notwithstanding the above, nothing herein shall supersede or modify\n   the terms of any separate license agreement you may have executed\n   with Licensor regarding such Contributions.\n\n6. Trademarks. This License does not grant permission to use the trade\n   names, trademarks, service marks, or product names of the Licensor,\n   except as required for reasonable and customary use in describing the\n   origin of the Work and reproducing the content of the NOTICE file.\n\n7. Disclaimer of Warranty. Unless required by applicable law or\n   agreed to in writing, Licensor provides the Work (and each\n   Contributor provides its Contributions) on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n   implied, including, without limitation, any warranties or conditions\n   of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n   PARTICULAR PURPOSE. You are solely responsible for determining the\n   appropriateness of using or redistributing the Work and assume any\n   risks associated with Your exercise of permissions under this License.\n\n8. Limitation of Liability. In no event and under no legal theory,\n   whether in tort (including negligence), contract, or otherwise,\n   unless required by applicable law (such as deliberate and grossly\n   negligent acts) or agreed to in writing, shall any Contributor be\n   liable to You for damages, including any direct, indirect, special,\n   incidental, or consequential damages of any character arising as a\n   result of this License or out of the use or inability to use the\n   Work (including but not limited to damages for loss of goodwill,\n   work stoppage, computer failure or malfunction, or any and all\n   other commercial damages or losses), even if such Contributor\n   has been advised of the possibility of such damages.\n\n9. Accepting Warranty or Additional Liability. While redistributing\n   the Work or Derivative Works thereof, You may choose to offer,\n   and charge a fee for, acceptance of support, warranty, indemnity,\n   or other liability obligations and/or rights consistent with this\n   License. However, in accepting such obligations, You may act only\n   on Your own behalf and on Your sole responsibility, not on behalf\n   of any other Contributor, and only if You agree to indemnify,\n   defend, and hold each Contributor harmless for any liability\n   incurred by, or claims asserted against, such Contributor by reason\n   of your accepting any such warranty or additional liability.\n\nEND OF TERMS AND CONDITIONS\n\nAPPENDIX: How to apply the Apache License to your work.\n\n   To apply the Apache License to your work, attach the following\n   boilerplate notice, with the fields enclosed by brackets \"[]\"\n   replaced with your own identifying information. (Don't include\n   the brackets!)  The text should be enclosed in the appropriate\n   comment syntax for the file format. We also recommend that a\n   file or class name and description of purpose be included on the\n   same \"printed page\" as the copyright notice for easier\n   identification within third-party archives.\n\nCopyright [yyyy] [name of copyright owner]\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n\thttp://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n~~~~\n\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 4.3984375,
          "content": "[Chrono][docsrs]: Timezone-aware date and time handling\n========================================\n\n[![Chrono GitHub Actions][gh-image]][gh-checks]\n[![Chrono on crates.io][cratesio-image]][cratesio]\n[![Chrono on docs.rs][docsrs-image]][docsrs]\n[![Chat][discord-image]][discord]\n[![codecov.io][codecov-img]][codecov-link]\n\n[gh-image]: https://github.com/chronotope/chrono/actions/workflows/test.yml/badge.svg?branch=main\n[gh-checks]: https://github.com/chronotope/chrono/actions/workflows/test.yml?query=branch%3Amain\n[cratesio-image]: https://img.shields.io/crates/v/chrono.svg\n[cratesio]: https://crates.io/crates/chrono\n[docsrs-image]: https://docs.rs/chrono/badge.svg\n[docsrs]: https://docs.rs/chrono\n[discord-image]: https://img.shields.io/discord/976380008299917365?logo=discord\n[discord]: https://discord.gg/sXpav4PS7M\n[codecov-img]: https://img.shields.io/codecov/c/github/chronotope/chrono?logo=codecov\n[codecov-link]: https://codecov.io/gh/chronotope/chrono\n\nChrono aims to provide all functionality needed to do correct operations on dates and times in the\n[proleptic Gregorian calendar](https://en.wikipedia.org/wiki/Proleptic_Gregorian_calendar):\n\n* The [`DateTime`](https://docs.rs/chrono/latest/chrono/struct.DateTime.html) type is timezone-aware\n  by default, with separate timezone-naive types.\n* Operations that may produce an invalid or ambiguous date and time return `Option` or\n  [`MappedLocalTime`](https://docs.rs/chrono/latest/chrono/offset/enum.MappedLocalTime.html).\n* Configurable parsing and formatting with an `strftime` inspired date and time formatting syntax.\n* The [`Local`](https://docs.rs/chrono/latest/chrono/offset/struct.Local.html) timezone works with\n  the current timezone of the OS.\n* Types and operations are implemented to be reasonably efficient.\n\nTimezone data is not shipped with chrono by default to limit binary sizes. Use the companion crate\n[Chrono-TZ](https://crates.io/crates/chrono-tz) or [`tzfile`](https://crates.io/crates/tzfile) for\nfull timezone support.\n\n## Documentation\n\nSee [docs.rs](https://docs.rs/chrono/latest/chrono/) for the API reference.\n\n## Limitations\n\n* Only the proleptic Gregorian calendar (i.e. extended to support older dates) is supported.\n* Date types are limited to about +/- 262,000 years from the common epoch.\n* Time types are limited to nanosecond accuracy.\n* Leap seconds can be represented, but Chrono does not fully support them.\n  See [Leap Second Handling](https://docs.rs/chrono/latest/chrono/naive/struct.NaiveTime.html#leap-second-handling).\n\n## Crate features\n\nDefault features:\n\n* `alloc`: Enable features that depend on allocation (primarily string formatting).\n* `std`: Enables functionality that depends on the standard library. This is a superset of `alloc`\n  and adds interoperation with standard library types and traits.\n* `clock`: Enables reading the local timezone (`Local`). This is a superset of `now`.\n* `now`: Enables reading the system time (`now`).\n* `wasmbind`: Interface with the JS Date API for the `wasm32` target.\n\nOptional features:\n\n* `serde`: Enable serialization/deserialization via [serde].\n* `rkyv`: Deprecated, use the `rkyv-*` features.\n* `rkyv-16`: Enable serialization/deserialization via [rkyv], using 16-bit integers for integral `*size` types.\n* `rkyv-32`: Enable serialization/deserialization via [rkyv], using 32-bit integers for integral `*size` types.\n* `rkyv-64`: Enable serialization/deserialization via [rkyv], using 64-bit integers for integral `*size` types.\n* `rkyv-validation`: Enable rkyv validation support using `bytecheck`.\n* `arbitrary`: Construct arbitrary instances of a type with the Arbitrary crate.\n* `unstable-locales`: Enable localization. This adds various methods with a `_localized` suffix.\n  The implementation and API may change or even be removed in a patch release. Feedback welcome.\n* `oldtime`: This feature no longer has any effect; it used to offer compatibility with the `time` 0.1 crate.\n\nNote: The `rkyv{,-16,-32,-64}` features are mutually exclusive.\n\n[serde]: https://github.com/serde-rs/serde\n[rkyv]: https://github.com/rkyv/rkyv\n\n## Rust version requirements\n\nThe Minimum Supported Rust Version (MSRV) is currently **Rust 1.61.0**.\n\nThe MSRV is explicitly tested in CI. It may be bumped in minor releases, but this is not done\nlightly.\n\n## License\n\nThis project is licensed under either of\n\n* [Apache License, Version 2.0](https://www.apache.org/licenses/LICENSE-2.0)\n* [MIT License](https://opensource.org/licenses/MIT)\n\nat your option.\n"
        },
        {
          "name": "bench",
          "type": "tree",
          "content": null
        },
        {
          "name": "ci",
          "type": "tree",
          "content": null
        },
        {
          "name": "deny.toml",
          "type": "blob",
          "size": 0.111328125,
          "content": "[licenses]\nallow = [\"Apache-2.0\", \"MIT\", \"Unicode-3.0\"]\nprivate = { ignore = true }\n\n[advisories]\nyanked = \"deny\"\n"
        },
        {
          "name": "fuzz",
          "type": "tree",
          "content": null
        },
        {
          "name": "rustfmt.toml",
          "type": "blob",
          "size": 0.0283203125,
          "content": "use_small_heuristics = \"Max\"\n"
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "taplo.toml",
          "type": "blob",
          "size": 0.0810546875,
          "content": "include = [\"deny.toml\", \"**/Cargo.toml\"]\n\n[formatting]\ninline_table_expand = false\n"
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}