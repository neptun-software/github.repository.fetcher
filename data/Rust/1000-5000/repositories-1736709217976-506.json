{
  "metadata": {
    "timestamp": 1736709217976,
    "page": 506,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjUxMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "dtolnay/async-trait",
      "stars": 1884,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.029296875,
          "content": "/target\n**/*.rs.bk\nCargo.lock\n"
        },
        {
          "name": "Cargo.toml",
          "type": "blob",
          "size": 0.8857421875,
          "content": "[package]\nname = \"async-trait\"\nversion = \"0.1.85\"\nauthors = [\"David Tolnay <dtolnay@gmail.com>\"]\ncategories = [\"asynchronous\", \"no-std\"]\ndescription = \"Type erasure for async trait methods\"\ndocumentation = \"https://docs.rs/async-trait\"\nedition = \"2021\"\nexclude = [\"build.rs\"]\nkeywords = [\"async\"]\nlicense = \"MIT OR Apache-2.0\"\nrepository = \"https://github.com/dtolnay/async-trait\"\nrust-version = \"1.56\"\n\n[lib]\nproc-macro = true\n\n[dependencies]\nproc-macro2 = \"1.0.74\"\nquote = \"1.0.35\"\nsyn = { version = \"2.0.46\", default-features = false, features = [\"clone-impls\", \"full\", \"parsing\", \"printing\", \"proc-macro\", \"visit-mut\"] }\n\n[dev-dependencies]\nfutures = \"0.3.30\"\nrustversion = \"1.0.13\"\ntracing = \"0.1.40\"\ntracing-attributes = \"0.1.27\"\ntrybuild = { version = \"1.0.81\", features = [\"diff\"] }\n\n[package.metadata.docs.rs]\ntargets = [\"x86_64-unknown-linux-gnu\"]\nrustdoc-args = [\"--generate-link-to-definition\"]\n"
        },
        {
          "name": "LICENSE-APACHE",
          "type": "blob",
          "size": 9.4951171875,
          "content": "                              Apache License\n                        Version 2.0, January 2004\n                     http://www.apache.org/licenses/\n\nTERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n1. Definitions.\n\n   \"License\" shall mean the terms and conditions for use, reproduction,\n   and distribution as defined by Sections 1 through 9 of this document.\n\n   \"Licensor\" shall mean the copyright owner or entity authorized by\n   the copyright owner that is granting the License.\n\n   \"Legal Entity\" shall mean the union of the acting entity and all\n   other entities that control, are controlled by, or are under common\n   control with that entity. For the purposes of this definition,\n   \"control\" means (i) the power, direct or indirect, to cause the\n   direction or management of such entity, whether by contract or\n   otherwise, or (ii) ownership of fifty percent (50%) or more of the\n   outstanding shares, or (iii) beneficial ownership of such entity.\n\n   \"You\" (or \"Your\") shall mean an individual or Legal Entity\n   exercising permissions granted by this License.\n\n   \"Source\" form shall mean the preferred form for making modifications,\n   including but not limited to software source code, documentation\n   source, and configuration files.\n\n   \"Object\" form shall mean any form resulting from mechanical\n   transformation or translation of a Source form, including but\n   not limited to compiled object code, generated documentation,\n   and conversions to other media types.\n\n   \"Work\" shall mean the work of authorship, whether in Source or\n   Object form, made available under the License, as indicated by a\n   copyright notice that is included in or attached to the work\n   (an example is provided in the Appendix below).\n\n   \"Derivative Works\" shall mean any work, whether in Source or Object\n   form, that is based on (or derived from) the Work and for which the\n   editorial revisions, annotations, elaborations, or other modifications\n   represent, as a whole, an original work of authorship. For the purposes\n   of this License, Derivative Works shall not include works that remain\n   separable from, or merely link (or bind by name) to the interfaces of,\n   the Work and Derivative Works thereof.\n\n   \"Contribution\" shall mean any work of authorship, including\n   the original version of the Work and any modifications or additions\n   to that Work or Derivative Works thereof, that is intentionally\n   submitted to Licensor for inclusion in the Work by the copyright owner\n   or by an individual or Legal Entity authorized to submit on behalf of\n   the copyright owner. For the purposes of this definition, \"submitted\"\n   means any form of electronic, verbal, or written communication sent\n   to the Licensor or its representatives, including but not limited to\n   communication on electronic mailing lists, source code control systems,\n   and issue tracking systems that are managed by, or on behalf of, the\n   Licensor for the purpose of discussing and improving the Work, but\n   excluding communication that is conspicuously marked or otherwise\n   designated in writing by the copyright owner as \"Not a Contribution.\"\n\n   \"Contributor\" shall mean Licensor and any individual or Legal Entity\n   on behalf of whom a Contribution has been received by Licensor and\n   subsequently incorporated within the Work.\n\n2. Grant of Copyright License. Subject to the terms and conditions of\n   this License, each Contributor hereby grants to You a perpetual,\n   worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n   copyright license to reproduce, prepare Derivative Works of,\n   publicly display, publicly perform, sublicense, and distribute the\n   Work and such Derivative Works in Source or Object form.\n\n3. Grant of Patent License. Subject to the terms and conditions of\n   this License, each Contributor hereby grants to You a perpetual,\n   worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n   (except as stated in this section) patent license to make, have made,\n   use, offer to sell, sell, import, and otherwise transfer the Work,\n   where such license applies only to those patent claims licensable\n   by such Contributor that are necessarily infringed by their\n   Contribution(s) alone or by combination of their Contribution(s)\n   with the Work to which such Contribution(s) was submitted. If You\n   institute patent litigation against any entity (including a\n   cross-claim or counterclaim in a lawsuit) alleging that the Work\n   or a Contribution incorporated within the Work constitutes direct\n   or contributory patent infringement, then any patent licenses\n   granted to You under this License for that Work shall terminate\n   as of the date such litigation is filed.\n\n4. Redistribution. You may reproduce and distribute copies of the\n   Work or Derivative Works thereof in any medium, with or without\n   modifications, and in Source or Object form, provided that You\n   meet the following conditions:\n\n   (a) You must give any other recipients of the Work or\n       Derivative Works a copy of this License; and\n\n   (b) You must cause any modified files to carry prominent notices\n       stating that You changed the files; and\n\n   (c) You must retain, in the Source form of any Derivative Works\n       that You distribute, all copyright, patent, trademark, and\n       attribution notices from the Source form of the Work,\n       excluding those notices that do not pertain to any part of\n       the Derivative Works; and\n\n   (d) If the Work includes a \"NOTICE\" text file as part of its\n       distribution, then any Derivative Works that You distribute must\n       include a readable copy of the attribution notices contained\n       within such NOTICE file, excluding those notices that do not\n       pertain to any part of the Derivative Works, in at least one\n       of the following places: within a NOTICE text file distributed\n       as part of the Derivative Works; within the Source form or\n       documentation, if provided along with the Derivative Works; or,\n       within a display generated by the Derivative Works, if and\n       wherever such third-party notices normally appear. The contents\n       of the NOTICE file are for informational purposes only and\n       do not modify the License. You may add Your own attribution\n       notices within Derivative Works that You distribute, alongside\n       or as an addendum to the NOTICE text from the Work, provided\n       that such additional attribution notices cannot be construed\n       as modifying the License.\n\n   You may add Your own copyright statement to Your modifications and\n   may provide additional or different license terms and conditions\n   for use, reproduction, or distribution of Your modifications, or\n   for any such Derivative Works as a whole, provided Your use,\n   reproduction, and distribution of the Work otherwise complies with\n   the conditions stated in this License.\n\n5. Submission of Contributions. Unless You explicitly state otherwise,\n   any Contribution intentionally submitted for inclusion in the Work\n   by You to the Licensor shall be under the terms and conditions of\n   this License, without any additional terms or conditions.\n   Notwithstanding the above, nothing herein shall supersede or modify\n   the terms of any separate license agreement you may have executed\n   with Licensor regarding such Contributions.\n\n6. Trademarks. This License does not grant permission to use the trade\n   names, trademarks, service marks, or product names of the Licensor,\n   except as required for reasonable and customary use in describing the\n   origin of the Work and reproducing the content of the NOTICE file.\n\n7. Disclaimer of Warranty. Unless required by applicable law or\n   agreed to in writing, Licensor provides the Work (and each\n   Contributor provides its Contributions) on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n   implied, including, without limitation, any warranties or conditions\n   of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n   PARTICULAR PURPOSE. You are solely responsible for determining the\n   appropriateness of using or redistributing the Work and assume any\n   risks associated with Your exercise of permissions under this License.\n\n8. Limitation of Liability. In no event and under no legal theory,\n   whether in tort (including negligence), contract, or otherwise,\n   unless required by applicable law (such as deliberate and grossly\n   negligent acts) or agreed to in writing, shall any Contributor be\n   liable to You for damages, including any direct, indirect, special,\n   incidental, or consequential damages of any character arising as a\n   result of this License or out of the use or inability to use the\n   Work (including but not limited to damages for loss of goodwill,\n   work stoppage, computer failure or malfunction, or any and all\n   other commercial damages or losses), even if such Contributor\n   has been advised of the possibility of such damages.\n\n9. Accepting Warranty or Additional Liability. While redistributing\n   the Work or Derivative Works thereof, You may choose to offer,\n   and charge a fee for, acceptance of support, warranty, indemnity,\n   or other liability obligations and/or rights consistent with this\n   License. However, in accepting such obligations, You may act only\n   on Your own behalf and on Your sole responsibility, not on behalf\n   of any other Contributor, and only if You agree to indemnify,\n   defend, and hold each Contributor harmless for any liability\n   incurred by, or claims asserted against, such Contributor by reason\n   of your accepting any such warranty or additional liability.\n\nEND OF TERMS AND CONDITIONS\n"
        },
        {
          "name": "LICENSE-MIT",
          "type": "blob",
          "size": 0.9990234375,
          "content": "Permission is hereby granted, free of charge, to any\nperson obtaining a copy of this software and associated\ndocumentation files (the \"Software\"), to deal in the\nSoftware without restriction, including without\nlimitation the rights to use, copy, modify, merge,\npublish, distribute, sublicense, and/or sell copies of\nthe Software, and to permit persons to whom the Software\nis furnished to do so, subject to the following\nconditions:\n\nThe above copyright notice and this permission notice\nshall be included in all copies or substantial portions\nof the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF\nANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED\nTO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A\nPARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT\nSHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\nOF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR\nIN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\nDEALINGS IN THE SOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 8.0732421875,
          "content": "Async trait methods\n===================\n\n[<img alt=\"github\" src=\"https://img.shields.io/badge/github-dtolnay/async--trait-8da0cb?style=for-the-badge&labelColor=555555&logo=github\" height=\"20\">](https://github.com/dtolnay/async-trait)\n[<img alt=\"crates.io\" src=\"https://img.shields.io/crates/v/async-trait.svg?style=for-the-badge&color=fc8d62&logo=rust\" height=\"20\">](https://crates.io/crates/async-trait)\n[<img alt=\"docs.rs\" src=\"https://img.shields.io/badge/docs.rs-async--trait-66c2a5?style=for-the-badge&labelColor=555555&logo=docs.rs\" height=\"20\">](https://docs.rs/async-trait)\n[<img alt=\"build status\" src=\"https://img.shields.io/github/actions/workflow/status/dtolnay/async-trait/ci.yml?branch=master&style=for-the-badge\" height=\"20\">](https://github.com/dtolnay/async-trait/actions?query=branch%3Amaster)\n\nThe stabilization of async functions in traits in Rust 1.75 did not include\nsupport for using traits containing async functions as `dyn Trait`. Trying to\nuse dyn with an async trait produces the following error:\n\n```rust\npub trait Trait {\n    async fn f(&self);\n}\n\npub fn make() -> Box<dyn Trait> {\n    unimplemented!()\n}\n```\n\n```console\nerror[E0038]: the trait `Trait` cannot be made into an object\n --> src/main.rs:5:22\n  |\n5 | pub fn make() -> Box<dyn Trait> {\n  |                      ^^^^^^^^^ `Trait` cannot be made into an object\n  |\nnote: for a trait to be \"object safe\" it needs to allow building a vtable to allow the call to be resolvable dynamically; for more information visit <https://doc.rust-lang.org/reference/items/traits.html#object-safety>\n --> src/main.rs:2:14\n  |\n1 | pub trait Trait {\n  |           ----- this trait cannot be made into an object...\n2 |     async fn f(&self);\n  |              ^ ...because method `f` is `async`\n  = help: consider moving `f` to another trait\n```\n\nThis crate provides an attribute macro to make async fn in traits work with dyn\ntraits.\n\nPlease refer to [*why async fn in traits are hard*][hard] for a deeper analysis\nof how this implementation differs from what the compiler and language deliver\nnatively.\n\n[hard]: https://smallcultfollowing.com/babysteps/blog/2019/10/26/async-fn-in-traits-are-hard/\n\n<br>\n\n## Example\n\nThis example implements the core of a highly effective advertising platform\nusing async fn in a trait.\n\nThe only thing to notice here is that we write an `#[async_trait]` macro on top\nof traits and trait impls that contain async fn, and then they work. We get to\nhave `Vec<Box<dyn Advertisement + Sync>>` or `&[&dyn Advertisement]`, for\nexample.\n\n```rust\nuse async_trait::async_trait;\n\n#[async_trait]\ntrait Advertisement {\n    async fn run(&self);\n}\n\nstruct Modal;\n\n#[async_trait]\nimpl Advertisement for Modal {\n    async fn run(&self) {\n        self.render_fullscreen().await;\n        for _ in 0..4u16 {\n            remind_user_to_join_mailing_list().await;\n        }\n        self.hide_for_now().await;\n    }\n}\n\nstruct AutoplayingVideo {\n    media_url: String,\n}\n\n#[async_trait]\nimpl Advertisement for AutoplayingVideo {\n    async fn run(&self) {\n        let stream = connect(&self.media_url).await;\n        stream.play().await;\n\n        // Video probably persuaded user to join our mailing list!\n        Modal.run().await;\n    }\n}\n```\n\n<br>\n\n## Supported features\n\nIt is the intention that all features of Rust traits should work nicely with\n\\#\\[async_trait\\], but the edge cases are numerous. *Please file an issue if you\nsee unexpected borrow checker errors, type errors, or warnings.* There is no use\nof `unsafe` in the expanded code, so rest assured that if your code compiles it\ncan't be that badly broken.\n\n- &#128077;&ensp;Self by value, by reference, by mut reference, or no self;\n- &#128077;&ensp;Any number of arguments, any return value;\n- &#128077;&ensp;Generic type parameters and lifetime parameters;\n- &#128077;&ensp;Associated types;\n- &#128077;&ensp;Having async and non-async functions in the same trait;\n- &#128077;&ensp;Default implementations provided by the trait;\n- &#128077;&ensp;Elided lifetimes.\n\n<br>\n\n## Explanation\n\nAsync fns get transformed into methods that return `Pin<Box<dyn Future + Send +\n'async_trait>>` and delegate to an async block.\n\nFor example the `impl Advertisement for AutoplayingVideo` above would be\nexpanded as:\n\n```rust\nimpl Advertisement for AutoplayingVideo {\n    fn run<'async_trait>(\n        &'async_trait self,\n    ) -> Pin<Box<dyn std::future::Future<Output = ()> + Send + 'async_trait>>\n    where\n        Self: Sync + 'async_trait,\n    {\n        Box::pin(async move {\n            /* the original method body */\n        })\n    }\n}\n```\n\n<br>\n\n## Non-threadsafe futures\n\nNot all async traits need futures that are `dyn Future + Send`. To avoid having\nSend and Sync bounds placed on the async trait methods, invoke the async trait\nmacro as `#[async_trait(?Send)]` on both the trait and the impl blocks.\n\n<br>\n\n## Elided lifetimes\n\nBe aware that async fn syntax does not allow lifetime elision outside of `&` and\n`&mut` references. (This is true even when not using #\\[async_trait\\].)\nLifetimes must be named or marked by the placeholder `'_`.\n\nFortunately the compiler is able to diagnose missing lifetimes with a good error\nmessage.\n\n```rust\ntype Elided<'a> = &'a usize;\n\n#[async_trait]\ntrait Test {\n    async fn test(not_okay: Elided, okay: &usize) {}\n}\n```\n\n```console\nerror[E0726]: implicit elided lifetime not allowed here\n --> src/main.rs:9:29\n  |\n9 |     async fn test(not_okay: Elided, okay: &usize) {}\n  |                             ^^^^^^- help: indicate the anonymous lifetime: `<'_>`\n```\n\nThe fix is to name the lifetime or use `'_`.\n\n```rust\n#[async_trait]\ntrait Test {\n    // either\n    async fn test<'e>(elided: Elided<'e>) {}\n    // or\n    async fn test(elided: Elided<'_>) {}\n}\n```\n\n<br>\n\n## Dyn traits\n\nTraits with async methods can be used as trait objects as long as they meet the\nusual requirements for dyn -- no methods with type parameters, no self by value,\nno associated types, etc.\n\n```rust\n#[async_trait]\npub trait ObjectSafe {\n    async fn f(&self);\n    async fn g(&mut self);\n}\n\nimpl ObjectSafe for MyType {...}\n\nlet value: MyType = ...;\nlet object = &value as &dyn ObjectSafe;  // make trait object\n```\n\nThe one wrinkle is in traits that provide default implementations of async\nmethods. In order for the default implementation to produce a future that is\nSend, the async\\_trait macro must emit a bound of `Self: Sync` on trait methods\nthat take `&self` and a bound `Self: Send` on trait methods that take `&mut\nself`. An example of the former is visible in the expanded code in the\nexplanation section above.\n\nIf you make a trait with async methods that have default implementations,\neverything will work except that the trait cannot be used as a trait object.\nCreating a value of type `&dyn Trait` will produce an error that looks like\nthis:\n\n```console\nerror: the trait `Test` cannot be made into an object\n --> src/main.rs:8:5\n  |\n8 |     async fn cannot_dyn(&self) {}\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n```\n\nFor traits that need to be object safe and need to have default implementations\nfor some async methods, there are two resolutions. Either you can add Send\nand/or Sync as supertraits (Send if there are `&mut self` methods with default\nimplementations, Sync if there are `&self` methods with default implementations)\nto constrain all implementors of the trait such that the default implementations\nare applicable to them:\n\n```rust\n#[async_trait]\npub trait ObjectSafe: Sync {  // added supertrait\n    async fn can_dyn(&self) {}\n}\n\nlet object = &value as &dyn ObjectSafe;\n```\n\nor you can strike the problematic methods from your trait object by bounding\nthem with `Self: Sized`:\n\n```rust\n#[async_trait]\npub trait ObjectSafe {\n    async fn cannot_dyn(&self) where Self: Sized {}\n\n    // presumably other methods\n}\n\nlet object = &value as &dyn ObjectSafe;\n```\n\n<br>\n\n#### License\n\n<sup>\nLicensed under either of <a href=\"LICENSE-APACHE\">Apache License, Version\n2.0</a> or <a href=\"LICENSE-MIT\">MIT license</a> at your option.\n</sup>\n\n<br>\n\n<sub>\nUnless you explicitly state otherwise, any contribution intentionally submitted\nfor inclusion in this crate by you, as defined in the Apache-2.0 license, shall\nbe dual licensed as above, without any additional terms or conditions.\n</sub>\n"
        },
        {
          "name": "build.rs",
          "type": "blob",
          "size": 0.1875,
          "content": "fn main() {\n    // Warning: build.rs is not published to crates.io.\n\n    println!(\"cargo:rerun-if-changed=build.rs\");\n    println!(\"cargo:rustc-check-cfg=cfg(async_trait_nightly_testing)\");\n}\n"
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}