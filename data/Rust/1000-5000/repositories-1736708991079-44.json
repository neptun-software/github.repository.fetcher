{
  "metadata": {
    "timestamp": 1736708991079,
    "page": 44,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjUw",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "gyscos/cursive",
      "stars": 4387,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.064453125,
          "content": "target\n*.swp\nCargo.lock\ntags\n.ctags\n*.bk\nTODO.txt\n*.rustfmt\n.idea\n"
        },
        {
          "name": ".travis.yml",
          "type": "blob",
          "size": 0.314453125,
          "content": "language: rust\ncache: cargo\nrust:\n    - stable\n    - nightly\nscript:\n    - cd cursive\n    - cargo check --all-features\n    - cargo build --verbose --features \"markdown pancurses-backend termion-backend crossterm-backend\"\n    - cargo test --verbose --features \"markdown pancurses-backend termion-backend crossterm-backend\"\n"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 22.1123046875,
          "content": "# Changelog\n\n## cursive-core 0.4.6\n\n- Remove serde_yaml dependency (moved to dev-dependency)\n\n## cursive-core 0.4.5\n\n- Implement Resolvable for more types in the style module\n\n## cursive-core 0.4.4\n\n- Implement more standalone blueprints\n- Panel and PaddedView blueprints now use `view` instead of `child`\n- Implement Debug for `builder::Context`\n\n## cursive-core 0.4.3\n\n- Implement `Resolvable` for more types.\n- Relax `Sync` bound on FnMut and FnOnce callbacks.\n\n## cursive-core 0.4.2\n\n- Raise `enumset` version in dependency to make sure `EnumSet::empty()` is const fn.\n\n## cursive-core 0.4.1\n\n- Add missing `Sync` bound on `View`\n- Doc fixes\n\n## cursive 0.21\n\n### Breaking Changes\n\n- Defaults to crossterm backend (instead of ncurses)\n- Updates termion to 4.0\n- Updates crossterm to 0.28.1\n- Updates cursive-core to 0.4.0\n- Updates ncurses to 6.0.1\n\n### Improvements\n\n- Removed unused (and unmaintainted) `term_size` dependency.\n- Added a `status_bar` example.\n\n### Bugfixes\n\n- Crossterm backend: properly reset the color when de-initializing.\n\n## cursive-core 0.4.0\n\n### Breaking Changes\n\n- The `View` now requires `Send + Sync`, to allow accessing or moving views between threads.\n  This prevents using `Rc`/`RefCell`, and may require using `Arc`/`Mutex` instead.\n  This should eventually open the way for more multi-threaded processing of the view tree.\n- `theme::Style::effects` is now a map from `Effect` to `EffectStatus`.\n- The `Backend` trait was changed:\n    - `print_at` was split into `move_to` and `print`.\n    - `print_at_rep` was removed.\n- Some dependencies were updated:\n    - toml was bumped from 0.5 to 0.8\n\n### API updates\n\n- The new experimental `builder` module (enabled via the `builder` feature) enables config-based view instanciation.\n  View trees can be described in config files (yaml/json/...), and resolved, using parameters for interpolation.\n- Added the `EditableText` family of palette styles.\n- Added `Cursive::clear_all_global_callbacks()`.\n- Improved `CursiveLogger`\n- Added `Event::char(&self) -> Option<char>`\n- Some functions are now callable in const context.\n- Most of `cursive::theme` has moved to a new `cursive::style` module, with a re-export from `cursive::theme` for backward compatibility.\n- Added `cursive::style::{Rgb, gradient}` for better gradient support.\n- Added `GradientView`.\n- Added `cursive::utils::markup::cursup` for a simple cursive-focused markup parser.\n- Added `cursive::utils::markup::gradient` to decorate text with gradients.\n- Made `cursive::theme::Theme::load_toml` public.\n- `SelectView` can now use different decorators instead of `< >`.\n\n## Bugfixes\n\n- Fix shift+tab handling on termion.\n- Fix possible panics with empty `MenuPopup`.\n\n## Improvements\n\n- The menubar now properly supports styled entries.\n- The output to the backend is now buffered and delta-patched, resulting in improved performance for most backends.\n- `owning_ref` was replaced with `parking_lot`\n- `pulldown_cmark` was updated to 0.10\n- `ansi-parser` was updated to 0.9\n- Scrollable pages now scroll an entire page on left/right key presses.\n- Fixed example links in Readme.md.\n\n## cursive-core 0.3.7\n\n### API updates\n\n- Added \"inactive highlight\" property to SelectView.\n- Added `{Theme, Palette}::{retro, terminal_default}()`.\n- Added convenient method to create `Style`, similar to `ColorStyle`.\n- Added `{ColorStyle, Style}::view()` with Primary/View colors.\n- Added methods to create `RadioButton` using a key `&str`,\n  rather than relying on shared `RadioGroup`.\n- Many views now support using `StyledString` instead of just plain `String`.\n    - Menu entries\n    - Buttons\n    - Dialog titles and buttons\n    - Panel title\n    - Radio button labels\n\n### Bugfixes\n\n- Fixed a focus update in `SelectView` that could result in no entry being selected.\n- Fixed endless loop in `MenuPopup` (from the menubar for example) when all entries are disabled.\n\n### Other Changes\n\n- `Style::{highlight, highlight_inactive}` now rely on `Effect::Reverse`.\n- Most styles have been changed to use `InheritParent` for their background.\n    - `Layer` now explicitly uses `PaletteColor::View`.\n- `Printer::print_styled` now takes `S: Into<SpannedStr>` rather than a `SpannedStr` directly.\n  This lets it directly takes `&StyledString` as input.\n\n## cursive-core 0.3.6\n\n### API updates\n\n- Add `ColorStyle::{map, zip_map}`\n- Add `ColorStyle::invert`\n- Add `impl From<BaseColor> for ColorType`\n\n### Improvements\n\n- Added more doc and doc tests to `ColorStyle`.\n- Add a Minimum Supported Rust Version to Cargo.toml for a better error\n  message on old toolchains.\n\n### Bugfixes\n\n- Fix the `immut3!` macro.\n- Reset the running state when using non-default runners.\n- Fix `ListView` behaviour with delimiters.\n- Reset focus field when clearing `LinearLayout`.\n- Fix scroll operation using outdated size if the child view was modified.\n\n## cursive 0.20.0\n\n### Breaking Changes\n\n- Updates crossterm to 0.25.0\n\n## cursive-syntect 0.1.0\n\n- First release\n\n## cursive-core 0.3.5\n\n### Bugfixes\n\n- Termion backend: properly revert terminal to blocking when exiting\n  application.\n\n### Improvements\n\n- Added an ANSI color code parser\n- Added some examples:\n    - `advanced_user_data`\n    - `ansi`\n    - `theme_editor`\n- Improved documentation for Printer\n\n## cursive 0.19.0\n\n### Breaking Changes\n\n- Updates crossterm to 0.24.0\n\n## cursive-core 0.3.4\n\n### Improvements\n\n- SelectView now caches its required size for improved performance.\n\n### Bugfixes\n\n- Fix focused state in `FixedLayoutView`.\n\n## cursive-core 0.3.3\n\n### Bugfixes\n\n- Fix layout size inside `ScrollView`.\n\n## cursive 0.18.0\n\n### Breaking Changes\n\n- Updated crossterm to 0.23.0\n\n## cursive-core 0.3.2\n\n### Bugfixes\n\n- Fix focus for `SelectView::insert_item`.\n- Fix scroll offset before the first layout call.\n- Fix ResizedView to never give a larger size than available.\n\n## cursive-core 0.3.1\n\n### Bugfixes\n\n- Fix title layout for Panel when the space is limited\n\n## cursive-core 0.3.0, cursive 0.17.0\n\n### API updates\n\n- Add getters & other utility methods to Dialog\n- Add enabled state to menu items\n- Add a `reexports` module with re-exports of crates used in public API\n- Add `ThemedView`\n- Replace `Rect: From<T: Into<Vec2>>` with `Rect::from_point`\n- Add `HideableView::visible`\n- Add more control to focus changes, including `Event::FocusLost`\n- Add `EventResult::with_cb_once`\n- Add `Effect::Dim` (supported on some backends)\n- Add `LinearLayout::clear`\n- Add `backends::try_default`\n- Add `StackView::layer_offset` and deprecate `StackView::offset`\n- Add `Cursive::set_window_title` to change the terminal window title\n\n### Breaking Changes\n\n- Dependencies update:\n    - Replaced `wasmer_enumset` with `enumset`\n    - Replaced `chrono` with `time` for logger\n- Removed a bunch of deprecated methods and types:\n    - All `_id` methods that were replaced with `_name` equivalent\n    - `BoxView`, `ViewBox`, `SizedView`, `Identifiable`, `Boxable`, `IdView`, `Selector::Id`\n- Added `set_title` to the `Backend` trait\n- Update dependencies:\n    - crossterm to 0.22.1\n    - pancurses to 0.17.0\n\n### Bugfixes\n\n- Fix an issue with focus for Dialog\n- Fix `important_area` for ListView\n- Do not shrink panels under the size required for the title\n- Include wheel down event on legacy pancurses systems\n- Use non-blocking IO on termion backend\n- Fix `Align::bot_right`\n- Fix delimiter handling in `ListView`\n- Fix input handling in crossterm backend\n- Fix focus issue with SelectView when in popup mode\n- Updated internal dependencies:\n    - enum-map to 2.0\n    - pulldown-cmark to 0.9\n\n## cursive 0.16.3\n\n### API updates\n\n- Implement `Borrow<Cursive>` for `CursiveRunnable`\n\n## cursive-core 0.2.2, cursive 0.16.2\n\n### API updates\n\n- Add methods to turn a CursiveRunnable into a CursiveRunner.\n\n## cursive 0.16.1\n\n### Bugfixes\n\n- Fix mouse input with crossterm backend.\n\n## cursive-core 0.2.1\n\n### Bugfixes\n\n- Fix colors in menubar.\n\n## cursive-core 0.2.0, cursive 0.16\n\n### Breaking Changes\n\n- Backends are now initialized when starting the event loop rather than when creating Cursive.\n    - As a result initialization and runner functions have changed.\n- `ColorStyle::color` is no longer an optional. Use `ColorType::InheritParent` if needed.\n- Replaced `()` error types with some custom zero-sized types.\n\n### API updates\n\n- Add `ProgressBar::set_{min,max,range,counter,label}` for non-chained API.\n- Derive Clone, Copy, Debug, PartialEq, Hash for more types.\n- Add backend initializers using other files than /dev/tty for ncurses and termion.\n- Add `CursiveRunner` to handle an event loop.\n- `XY<T>` now implements `Default` for `T: Default`.\n- `Style` now implements `FromIterator<&Style>` to merge multiple styles.\n- `XY::stack_{horizontal,vertical}` are now `must_use`.\n- `SpannedString` now implements `FromIterator<SpannedString>`.\n- `view::ScrollBase` is now deprecated in favor of the `view::scroll` module.\n- Add `Finder::call_on_all` and `Cursive::call_on_all_named` to call the same closure of\n  several views with the same type and name.\n- Add `SpannedString::remove_spans` to remove spans from a StyledString.\n- Add `SpannedString::compact` to compact the source to only include span content.\n- Add `SpannedString::trim(_{start, end})` to remove the unused prefix, suffix or both of the source.\n- Add `SpannedString::spans(_raw)_attr_mut` to give mutable access to the attribute of the spans.\n- Add `TextContent::with_content` to give mutable access to the `StyledString` of a `TextView`.\n- Add `ColotyType::InheritParent` to carry over the front or back color from the parent.\n- Add `Effect::Blink`.\n- Add `Margins::zeros()`.\n- Add `TextView::set_style`.\n- Add `SpannedString`-shrinking methods.\n\n### Improvements\n\n- `ListView` now supports children taller than 1 row.\n- Added an `autocomplete` example.\n- Added a `stopwatch` example.\n- `SpannedString` iterators are now double-ended and exact-sized.\n\n### Bugfixes\n\n- Fix scroll module when inner view size is close to available size.\n- Fix text alignment for wrapped lines.\n- Fix focus change with ScrollView.\n- Fix possible crash with the BearLibTerminal backend.\n- Dispatch `call_on_*` methods to all screens.\n- Fix potential issue with `setlocale` in ncurses backend on BSD.\n- Fix handling of multi-bytes newlines characters.\n\n### Doc\n\n- Improve documentation for themes.\n\n## cursive-core 0.1.1\n\n### API updates\n\n- Add `Dialog::into_content`.\n- Add `Callback::from_fn_once` and `once1!` macro to wrap a `FnOnce` in a `FnMut`.\n- Add `FixedLayoutView` with manual placement of child views.\n- Add `OnLayoutView` to override `View::Layout`\n- Add `Cursive::{dump, restore}` to save and load the global state.\n- Add `NamedView::{name, set_name}` to retrieve or replace the given name.\n- Add `LinearLayout::find_child_with_name`.\n- Add `ScrollView::on_scroll` callback.\n- Add `once1!` macro to turn a `FnOnce` into `FnMut`.\n- Implement `Default` for some wrapper views where the child is `Default`.\n\n### Bugfixes\n\n- More hygienic `wrap_impl!` macro using fully-qualified paths.\n- Fixed `LinearLayout` giving children incorrect sizes.\n- More accurate \"important area\" for `ShadowView` and `PaddedView`.\n- Fix potential panic when calling `TextArea::set_cursor` before its first layout phase.\n- Disabled views no longer accept input if they are still in focus.\n\n## 0.15.0\n\n### Breaking changes\n\n- Split library into a backend-agnostic `cursive-core` and a user-facing `cursive`.\n- `Cursive::default` now needs the `cursive::CursiveExt` trait to be in scope.\n- Update dependencies:\n    - crossterm to 0.17.\n    - enumset to 1.0\n    - ahash to 0.3\n    - pulldown-cmark to 0.7\n- Add `PaletteColor::HighlightText`\n- `AnyCb` now takes a `&mut dyn View` rather than a `&mut dyn Any`.\n\n### API updates\n\n- Added `cursive::{default,ncurses,pancurses,termion,crossterm,blt,dummy}` functions.\n- Add `Cursive::debug_name`\n- Add `ScreensView` to move some code away from the `Cursive` root\n    - Reworked global callbacks configuration\n    - Ctrl-C can be rewired to no longer exit the application\n- Add `SelectView::(try_)iter_mut()`\n- `Dialog::{test, info}` now accept `StyledString` as input\n- Add missing functions to Checkbox re: enabled state\n\n### Bugfixes\n\n- Fix Ctrl-Z binding for ncurses\n- Fix potential crash with empty `SelectView`\n- Add `toml` and `markdown` features to docs.rs\n\n## 0.14.0\n\n### Breaking changes\n\n- `cursive::event::AnyCb` changed from `Box<...>` to `&mut ...`, so users of\n  `View::call_on_any` no longer need to box their closures.\n- Remove `BoxView::squishable`.\n- Update crossterm to 0.14.\n- Removed `From` implementations for `Margins`. Use `Margins::lrtb` and the like instead.\n    - Or `Dialog::padding_lrtb`.\n- Renamed multiple types (old names are still re-exported, but deprecated):\n    - `BoxView` -> `ResizedView`\n    - `ViewBox` -> `BoxedView`\n    - `SizedView` -> `LastSizeView`\n    - `Identifiable` -> `Nameable`\n    - `Boxable` -> `Resizable`\n    - `IdView` -> `NamedView`\n    - `Selector::Id` -> `Selector::Name`\n    - `with_id` -> `with_name`\n    - `call_on_id` -> `call_on_name`\n    - `find_id` -> `find_name`\n    - `focus_id` -> `focus_name`\n\n### API updates\n\n- `SelectView::{item, with_all}` now accept `S: Into<StyledString>` for colored labels.\n- Add `ScrollView::scroll_to_important_area`.\n- Add `LinearLayout::set_focus_index`.\n- Add `XY::{sum, product}`.\n- `view::scroll` is now a public module.\n- Add `Cursive::process_events` and `Cursive::post_events`.\n    - This gives users finer control than `Cursive::step`.\n- `Layer` now has a `color` option.\n- `LinearLayout` can now directly add boxed views without re-boxing.\n- Add inner getters to `EnableableView`.\n- Add `PaddedView::get_inner(_mut)`.\n- Add a bunch of constructors for `Margins`.\n- Add `Dialog::padding_lrtb`\n- Add `Dialog::set_padding*`\n- Add `PaddedView::lrtb`\n\n### Improvements\n\n- Changed the default color for `TitleSecondary` from yellow to light blue.\n- Changed the default color for `Tertiary` from grey to white.\n- Reduced dependencies (`toml` is now optional, removed `hashbrown`).\n- `Cursive::default()` now fallbacks do dummy backend if no other is available.\n\n### Bugfixes\n\n- Fixed `ScrollView::show_scrollbars()`.\n- Correctly update the offset for `ScrollView` after focus change.\n- Fixed layout for `BoxView` with some size constraints.\n- On Windows, do not print unix-specific character during initialization.\n- Fix out-of-bounds access for some mouse events in `MenuPopup`\n\n## 0.13.0\n\n### Breaking changes\n\n- Update `enum-map` from 0.5 to 0.6\n\n### API updates\n\n- Add `Effect::Strikethrough` (not supported on ncurses)\n- Add `ListView::remove_child`\n- Replace `xursive::CbFunc` with `Box<FnOnce>`\n- Add `ScrollView::{inner_size, is_as_{bottom, top, left, right} }`\n- Add getters for current value in `SliderView`\n- More fields made public in `cursive::logger`\n- Add a \"puppet\" backend for testing and instrumentation\n\n### Improvements\n\n- Performance improvements for the crossterm backend\n\n### Bugfixes\n\n- Fix a possible panic when a TextView is updated asynchronously while it's\n  being laid out.\n- Fixed weird behaviour of `SizeConstraint::Full` with `ScrollView`.\n\n## 0.12.0\n\n### Breaking changes\n\n- Updated `enumset` from 0.3 to 0.4\n\n### API updates\n\n- Add `Cursive::take_user_data`, replaces the current user data with `()`.\n- Add `SliderView::{get_value, get_max_value}`.\n\n### Improvements\n\n- `DebugConsole` now has horizontal scrolling enabled.\n- `pancurses` backend now correctly recognizes the \"Enter\" key from the numpad\n  as \"Enter\".\n\n## 0.11.2\n\n### API updates\n\n- Bring back `Cursive::set_fps` for <30Hz refresh rates.\n- Add `Cursive::backend_name` to get the name of the current backend.\n- Add a new backend based on the crossterm library.\n- Add direct downcast methods to `dyn AnyView`\n- Add sort methods to `SelectView`\n\n### Improvements\n\n- Improved printer performance with styled spans.\n\n## 0.11.1\n\n### API updates\n\n- Added manual scrolling methods to `view::scroll::Core`:\n    - `keep_in_view`, `scroll_to`, `scroll_to_x`, `scroll_to_y`\n    Note: the `view::scroll` module is hidden behind an experimental\n    feature `unstable_scroll`.\n\n### Improvements\n\n- Improved printer performance (thanks to @chrisvest).\n\n### Bugfixes\n\n- Fixed `MenuPopup` borders near delimiters.\n\n## 0.11.0\n\n### Breaking changes\n\n- `Cursive::{ncurses, pancurses, termion}` now return\n  `io::Result<Self>` instead of panicking. `Cursive::default()` still unwraps.\n  - Also added `Cursive::try_new` for failible backends.\n- Replaced `set_fps(i32)` with `set_autorefresh(bool)`\n- `Finder::find_id()` is renamed to `call_on_id()`, and a proper\n  `find_id()` was added instead.\n- Updated the Backend trait for a simpler input system\n- Updated to Rust 2018 edition (now requires rustc > 1.31)\n- `Cursive::clear()` now takes `&mut self`\n\n### API updates\n\n- Add a logging implementation (`logger::init()`) and a `DebugConsole`\n  (`cursive::toggle_debug_console()`)\n- Add user-data to Cursive.\n    - `Cursive::set_user_data()` can store some user-defined data structure.\n    - `Cursive::user_data()` and `Cursive::with_user_data()` can be used to\n      access the data.\n- Add `StackView::remove_layer()`\n- Add `CircularFocus` view (and bring proper circular focus to dialogs)\n- Add `HideableView::is_visible()`\n- Add `type CbSink = Sender<Box<CbFunc>>` as an alias for the return type of\n  `Cursive::cb_sink()`\n- Add `LinearLayout::{insert_child, swap_children, set_weight}` for more\n  in-place modifications.\n- Add `Printer::{cropped_centered,shrinked_centered}`\n\n### Improvements\n\n- Updated termion backend to use direct /dev/tty access for improved performance.\n- Enabled raw mode for ncurses and pancurses. Among other improvements, this\n  lets applications receive Ctrl+S and Ctrl+Q events.\n\n### Bugfixes\n\n- Fixed overflow check for titles in `Dialog` and `Panel`\n\n## 0.10.0\n\n### New features\n\n- Add `EventTrigger` and update `OnEventView` to use it.\n    - Breaking change: \"inner\" callbacks for OnEventView now take the event as\n      extra argument.\n- Add `Printer::enabled` and `EnableableView` to disable whole subtrees.\n- Add `RadioGroup::on_change` to set a callback on selection change.\n- `SelectView` now uses `StyledString` to display colored text.\n- Add `PaddedView` to add padding to any view.\n- Update dependencies\n    - Breaking change: crossbeam-channel was updated, and using `send()` now\n      returns a `Result`.\n\n### Bugfixes\n\n- Fix mouse events on Ubuntu\n\n### Doc\n\n- Added examples to most utility types (`XY`, `Vec2`, ...)\n\n## 0.9.2\n\n### New features\n\n- Add an optional title to `Panel`\n- Add `immut1!`, `immut2!` and `immut3!` macros to wrap a `FnMut` in `Fn`\n- SelectView: autojump is now opt-in (jump to an element after a letter is pressed)\n\n### Bugfixes\n\n- Fix possible crash with `ListView` and `SelectView` in very small spaces\n- Fix termion backend compilation on non-unix platforms\n\n## 0.9.1\n\n### New features\n\n- Add `Cursive::on_event` to send simulated events.\n- Add `EventResult::and` to combine callbacks.\n- Allow custom color in `ProgressBar`.\n\n### Bugfixes\n\n- LinearLayout:\n    - Better geometry computation with constrained size\n    - Fixed cache invalidation\n    - Fix possible panic when removing children\n- ScrollView:\n    - Fix possible panic with full-height scrollbar\n    - Fix possible panic with empty content\n    - Fix cache\n- Fix menubar focus after action\n\n## Doc\n\n- Fix Readme and examples with `Cursive::default()`\n\n## 0.9.0\n\n### New features\n\n- Cursive now supports third-party backends\n- Add generic `ScrollView` wrapper. Removes internal scrolling behaviour from\n  `TextView`.\n- Callbacks sent through `Cursive::cb_sink()` are now processed instantly,\n  without the need for `set_fps`.\n- Make backend a dynamic choice\n    - User must select a backend in `Cursive::new`\n    - 3rd party libraries do not need to play with backend features anymore\n- Move from `chan` and `chan-signals` to `crossbeam-channel` and `signal-hook`\n- Batch-process events for higher performance\n- Add `StackView::find_layer_from_id`\n- Add `SelectView::insert_item`\n- Add `TextArea::{enable, disable}`\n- Reworked `AnyView`\n- `SelectView`: Fix mouse events\n- Return callbacks from manual control methods\n    - `SelectView::{set_selection, select_up, select_down, remove_item}`\n    - `EditView::{set_content, insert, remove}`\n- Add `rect::Rect`\n- Add `HideableView`\n\n### Changes\n\n- Replaced `Cursive::new()` with `Cursive::default()`\n- Renamed `Vec4` to `Margins`\n- `Callbacks` cannot be created from functions that return a value\n    - The returned value used to be completely ignored\n- `AnyView` does not extend `View` anymore (instead, `View` extends `AnyView`)\n    - If you were using `AnyView` before, you probably need to replace it with `View`\n- Scrolling is now added to a view with `.scrollable()`\n- `cb_sink` is now a `crossbeam_channel::Sender` instead of `chan::Sender`\n- `SelectView::selection` now returns an `Option<Rc<T>>` instead of just `Rc<T>`.\n   It will return `None` if the `SelectView` is empty.\n\n\n## 0.8.1\n\n### New features\n\n- Add `Cursive::clear_global_callbacks`\n\n### Bugfixes\n\n- Fix non-ASCII input with pancurses backend\n- Fix `StackView::move_layer`\n- Fix layout computation for `SelectView`\n- Remove unused `maplit` dependency for termion and blt backends\n\n## 0.8.0\n\n### New features\n\n- Style (breaking change):\n    - Added support for bold/italic/underlined text\n    - Added `StyledString` for markup text\n    - Refactored line-break module\n- Colors (breaking change):\n    - Added ColorStyle and PaletteColor for more flexible colored text\n- Buttons:\n    - Added `Dialog::buttons` to iterate on buttons\n    - Added `Button::set_label` and `Button::label`\n- TextView:\n    - Added TextContent, a way to separate model and view for TextView\n    - Added manual scrolling methods\n- Allow multiple global callbacks per event\n- Allow buttons and delimiters in top-level menubar\n- StackView:\n    - Added `StackView::move_layer` to re-order layers\n    - `StackView::pop_layer` now returns the pop'ed view\n    - Added `StackView::reposition_layer` to move a layer around\n- Dialog: added `Dialog::focus(&self)`\n- SelectView: added `SelectView::selected`\n- `Cursive::cb_sink` now accepts `FnOnce` (previously `Fn` only)\n\n### Bugfixes\n\n- Fix a bug in `TextArea::set_content`\n- Fix `Color::from_256colors` for grayscale colors\n- Fix resize detection on windows\n- Fix possible panic with weird input on pancurses\n- Fix possible panic in ListView layout\n\n### Doc\n\n- Add per-distributions instructions to install ncurses\n- Improved comments in examples\n- Improve doc for `Cursive::find_id`\n- Improve doc for `Identifiable::with_id`\n- Include Changelog\n"
        },
        {
          "name": "CODE_OF_CONDUCT.md",
          "type": "blob",
          "size": 3.40625,
          "content": "# Contributor Covenant Code of Conduct\n\n*TLDR*: Don't be a dick. Do we really need to be told that?\n\n## Our Pledge\n\nIn the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to making participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, gender identity and expression, level of experience, nationality, personal appearance, race, religion, or sexual identity and orientation.\n\n## Our Standards\n\nExamples of behavior that contributes to creating a positive environment include:\n\n* Being yay!\n* Using welcoming and inclusive language\n* Being respectful of differing viewpoints and experiences\n* Gracefully accepting constructive criticism\n* Focusing on what is best for the community\n* Showing empathy towards other community members\n\nExamples of unacceptable behavior by participants include:\n\n* Being boooh :(\n* The use of sexualized language or imagery and unwelcome sexual attention or advances\n* Trolling, insulting/derogatory comments, and personal or political attacks\n* Public or private harassment\n* Publishing others' private information, such as a physical or electronic address, without explicit permission\n* Other conduct which could reasonably be considered inappropriate in a professional setting\n\n## Our Responsibilities\n\nProject maintainers are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response to any instances of unacceptable behavior.\n\nProject maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful.\n\n## Scope\n\nThis Code of Conduct applies both within project spaces and in public spaces when an individual is representing the project or its community. Examples of representing a project or community include using an official project e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event. Representation of a project may be further defined and clarified by project maintainers.\n\n## Enforcement\n\nInstances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting the project team at alexandre.bury@gmail.com. The project team will review and investigate all complaints, and will respond in a way that it deems appropriate to the circumstances. The project team is obligated to maintain confidentiality with regard to the reporter of an incident. Further details of specific enforcement policies may be posted separately.\n\nProject maintainers who do not follow or enforce the Code of Conduct in good faith may face temporary or permanent repercussions as determined by other members of the project's leadership.\n\n## Attribution\n\nThis Code of Conduct is adapted from the [Contributor Covenant][homepage], version 1.4, available at [http://contributor-covenant.org/version/1/4][version]. \n\nIt is a completely generic piece of text that should surprise no-one and may only remind people what it means to be a human being. But it ticks a box on github's TODO list.\n\n[homepage]: http://contributor-covenant.org\n[version]: http://contributor-covenant.org/version/1/4/\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 1.26953125,
          "content": "Thank you so much for helping on cursive!\n\nHere are a few guidelines to help make sure your contribution goes as smoothly as possible.\n\n## You found a bug\n\nThis is still a young library, and bugs are sure to be hiding everywhere. If you found one, great!\n\n* Mention the operating system you are using. If you are manually selecting a backend (for instance termion), please mention this as well.\n* Try to provide \"simple\" (if possible) code to reproduce the bug. If you can't simplify your code, a complete code is better than a simple, but incomplete one.\n* If relevant, you can post a screenshot describing the problem.\n\n## Improvement idea\n\nIf you have an idea you think would make this library better, we're all ears!\n\n* Describe your use-case: what do you want to achieve with this improvement?\n\n## Pull requests\n\nIf you feel like digging in the code, thank you again! We're very grateful for your work.\n\n* Format your code with rustfmt.\n* Make sure all tests are passing - it's very easy to forget a backend! If you start a Pull Request, travis will check all backends for you.\n* Only use stable rust features. This library should compile on rust stable.\n* Do one thing at a time. Split a large change into a series of smaller, standalone changes. Don't start a refactor while adding a feature.\n"
        },
        {
          "name": "Cargo.toml",
          "type": "blob",
          "size": 0.1357421875,
          "content": "[workspace]\n\nmembers = [\"cursive\", \"cursive-core\", \"cursive-syntect\", \"cursive-macros\"]\nresolver = \"2\"\n\n[profile.dev]\nincremental = false\n\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.033203125,
          "content": "Copyright (c) 2015 Alexandre Bury\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 8.62109375,
          "content": "# Cursive\n\n[![crates.io](https://img.shields.io/crates/v/cursive.svg)](https://crates.io/crates/cursive)\n[![Rust](https://github.com/gyscos/cursive/actions/workflows/rust.yml/badge.svg?branch=main)](https://github.com/gyscos/cursive/actions/workflows/rust.yml)\n[![MIT licensed](https://img.shields.io/badge/license-MIT-blue.svg)](./LICENSE)\n[![Gitter chat](https://badges.gitter.im/gyscos/cursive.png)](https://gitter.im/cursive-rs/cursive)\n\n\nCursive is a TUI (Text User Interface) library for rust. It uses the [`crossterm`] backend by default, but [other backends are available](https://github.com/gyscos/cursive/wiki/Backends).\n\nIt allows you to build rich user interfaces for terminal applications.\n\n[`crossterm`]: https://github.com/crossterm-rs/crossterm\n\n# [Documentation](http://docs.rs/cursive)\n\nIt is designed to be safe and easy to use:\n\n```toml\n[dependencies]\ncursive = \"0.21\"\n```\n\nOr to use the latest git version:\n\n```toml\n[dependencies]\ncursive = { git = \"https://github.com/gyscos/cursive\" }\n```\n\n```rust,no_run\nuse cursive::views::{Dialog, TextView};\n\nfn main() {\n    // Creates the cursive root - required for every application.\n    let mut siv = cursive::default();\n\n    // Creates a dialog with a single \"Quit\" button\n    siv.add_layer(Dialog::around(TextView::new(\"Hello Dialog!\"))\n                         .title(\"Cursive\")\n                         .button(\"Quit\", |s| s.quit()));\n\n    // Starts the event loop.\n    siv.run();\n}\n```\n\n[![Cursive dialog example](https://raw.githubusercontent.com/gyscos/cursive/main/doc/cursive_example.png)](https://github.com/gyscos/cursive/tree/main/cursive/examples/dialog.rs)\n\nCheck out the other [examples](https://github.com/gyscos/cursive/tree/main/cursive/examples) to get these results, and more:\n\n<div>\n<a href=\"https://github.com/gyscos/cursive/blob/main/cursive/examples/lorem.rs\"><img src=\"https://imgur.com/hW9M9MV.png\" alt=\"lorem.rs example\", width=\"48%\" /></a>\n<a href=\"https://github.com/gyscos/cursive/blob/main/cursive/examples/menubar.rs\"><img src=\"https://imgur.com/xx3lZPz.png\" alt=\"menubar.rs example\", width=\"48%\" /></a>\n<a href=\"https://github.com/gyscos/cursive/blob/main/cursive/examples/select.rs\"><img src=\"https://imgur.com/couty0n.png\" alt=\"select.rs example\", width=\"48%\" /></a>\n<a href=\"https://github.com/gyscos/cursive/blob/main/cursive/examples/mines/\"><img src=\"https://imgur.com/vNteYyy.png\" alt=\"mines example\", width=\"48%\" /></a>\n<a href=\"https://github.com/gyscos/cursive/blob/main/cursive/examples/theme_manual.rs\"><img src=\"https://i.imgur.com/I9V5KRi.png\" alt=\"theme_manual.rs example\", width=\"48%\" /></a>\n<a href=\"https://github.com/gyscos/cursive/blob/main/cursive-syntect/examples/parse.rs\"><img src=\"https://i.imgur.com/a8bfe5s.png\" alt=\"syntect example\" width=\"48%\" /></a>\n</div>\n\n_(Colors may depend on your terminal configuration.)_\n\n## Tutorials\n\nThese tutorials may help you get started with cursive:\n\n* [Starting with cursive: (1/3)](https://github.com/gyscos/cursive/tree/main/doc/tutorial_1.md)\n* [Starting with cursive: (2/3)](https://github.com/gyscos/cursive/tree/main/doc/tutorial_2.md)\n* [Starting with cursive: (3/3)](https://github.com/gyscos/cursive/tree/main/doc/tutorial_3.md)\n\n## Third-party views\n\nHere are a few crates implementing new views for you to use:\n\n* [cursive-aligned-view](https://github.com/deinstapel/cursive-aligned-view): A view wrapper for gyscos/cursive views which aligns child views.\n* [cursive-async-view](https://github.com/deinstapel/cursive-async-view): A loading-screen wrapper.\n* [cursive-flexi-logger-view](https://github.com/deinstapel/cursive-flexi-logger-view): An alternative debug view using `emabee/flexi_logger`.\n* [cursive-markup](https://sr.ht/~ireas/cursive-markup-rs): A view that renders HTML or other markup.\n* [cursive-multiplex](https://github.com/deinstapel/cursive-multiplex): A tmux like multiplexer.\n* [cursive-spinner-view](https://github.com/otov4its/cursive-spinner-view): A spinner view.\n* [cursive-tabs](https://github.com/deinstapel/cursive-tabs): Tabs.\n* [cursive_calendar_view](https://github.com/BonsaiDen/cursive_calendar_view): A basic calendar view implementation.\n* [cursive_hexview](https://github.com/hellow554/cursive_hexview): A simple hexview.\n* [cursive_table_view](https://github.com/BonsaiDen/cursive_table_view): A basic table view component.\n* [cursive_tree_view](https://github.com/BonsaiDen/cursive_tree_view): A tree view implementation.\n* [cursive-hjkl](https://github.com/gamma-delta/cursive-hjkl): Wraps any view to use Vim-like `hjkl` controls.\n\n## Showcases\n\nHere are some cool applications using cursive:\n\n* [RustyChat](https://github.com/SambaDialloB/RustyChat): Chat client made using Rust and Cursive.\n* [checkline](https://github.com/sixarm/checkline-rust-crate): Checkbox line picker from stdin to stdout.\n* [clock-cli](https://github.com/TianyiShi2001/clock-cli-rs): A clock with stopwatch and countdown timer functionalities.\n* [fui](https://github.com/xliiv/fui): Add CLI & form interface to your program.\n* [game2048-rs](https://github.com/genieCS/game2048-rs): a tui game2048 using Rust and cursive.\n* [git-branchless](https://github.com/arxanas/git-branchless): Branchless workflow for Git.\n* [grin-tui](https://github.com/mimblewimble/grin): Minimal implementation of the MimbleWimble protocol.\n* [kakikun](https://github.com/file-acomplaint/kakikun): A paint and ASCII art application for the terminal.\n* [launchk](https://github.com/mach-kernel/launchk): Manage launchd agents and daemons on macOS.\n* [markline](https://github.com/sixarm/markline): Marker-based line picker from stdin to stdout.\n* [mythra](https://github.com/deven96/mythra): CLI to search for music.\n* [ncspot](https://github.com/hrkfdn/ncspot): Cross-platform ncurses Spotify client.\n* [rbmenu-tui](https://github.com/DevHyperCoder/rbmenu-tui): A TUI for bookmark management.\n* [retris](https://github.com/genieCS/retris): A simple implementation of the classic tetris game.\n* [ripasso](https://github.com/cortex/ripasso): A simple password manager written in Rust.\n* [rusty-man](https://sr.ht/~ireas/rusty-man): Browse rustdoc documentation.\n* [saci-rs](https://gitlab.com/ihercowitz/saci-rs): Simple API Client Interface.\n* [so](https://github.com/samtay/so): A terminal interface for Stack Overflow.\n* [sudoku-tui](https://github.com/TianyiShi2001/sudoku-tui): Play sudoku on the command line.\n* [tap](https://github.com/timdubbins/tap): An audio player for the terminal with fuzzy finder.\n* [ttyloop](https://github.com/gamma-delta/ttyloop): Clone of the mobile game Loop.\n* [wiki-tui](https://github.com/Builditluc/wiki-tui): A simple and easy to use Wikipedia Text User Interface\n* [glues](https://github.com/gluesql/glues): A simple note-taking app with Git, CSV, and JSON support\n\n## Goals\n\n* **Ease of use.** Simple apps should be simple. Complex apps should be manageable.\n* **Linux TTY Compatibility.** Colors may suffer, and UTF-8 may be too much, but most features *must* work properly on a Linux TTY.\n* **Flexibility.** This library should be able to handle simple UI scripts, complex real-time applications, or even games.\n    * In particular, it tries to have enough features to recreate these kind of tools:\n        * [menuconfig](http://en.wikipedia.org/wiki/Menuconfig#/media/File:Linux_x86_3.10.0-rc2_Kernel_Configuration.png)\n        * [nmtui](https://access.redhat.com/documentation/en-US/Red_Hat_Enterprise_Linux/7/html/Networking_Guide/sec-Configure_a_Network_Team_Using_the_Text_User_Interface_nmtui.html)\n\n## Compatibility\n\nFirst off, terminals are messy. A small set of features is standard, but beyond that, almost every terminal has its own implementation.\n\n### Output\n\n* **Colors**: the basic 8-colors palette should be broadly supported. User-defined colors is not supported in the raw linux TTY, but should work in most terminals, although it's still kinda experimental.\n* **UTF-8**: Currently Cursive really expects a UTF-8 locale. It may eventually get patched to support window borders on other locales, but it's not a priority.\nThere is initial support for [wide characters](https://en.wikipedia.org/wiki/CJK_characters). [RTL](https://en.wikipedia.org/wiki/Right-to-left) support [is planned](https://github.com/gyscos/cursive/issues/31), but still very early.\n\n### Input\n\n* The `key_codes` example can be a useful tool to see how the library reacts to various key presses.\n* Keep in mind that if the terminal has shortcuts registered, they probably won't be transmitted to the app.\n* UTF-8 input should work fine in a unicode-enabled terminal emulator, but raw linux TTY may be more capricious.\n\n## [Contributing](CONTRIBUTING.md)\n## Alternatives\n\nSee also [ratatui](https://github.com/ratatui-org/ratatui) - and a small [comparison page](https://github.com/gyscos/cursive/wiki/Cursive-vs-tui%E2%80%90rs).\n"
        },
        {
          "name": "cursive-core",
          "type": "tree",
          "content": null
        },
        {
          "name": "cursive-macros",
          "type": "tree",
          "content": null
        },
        {
          "name": "cursive-syntect",
          "type": "tree",
          "content": null
        },
        {
          "name": "cursive",
          "type": "tree",
          "content": null
        },
        {
          "name": "doc",
          "type": "tree",
          "content": null
        },
        {
          "name": "examples",
          "type": "blob",
          "size": 0.015625,
          "content": "cursive/examples"
        },
        {
          "name": "rust-analyzer.json",
          "type": "blob",
          "size": 0.1337890625,
          "content": "{\n  \"rust-analyzer.cargo.features\": \"all\",\n  \"rust-analyzer.cargo.buildScripts.enable\": true,\n  \"rust-analyzer.procMacro.enable\": true\n}\n"
        },
        {
          "name": "rustfmt.toml",
          "type": "blob",
          "size": 0.212890625,
          "content": "edition = \"2021\"\nfn_params_layout = \"Tall\"\nformat_code_in_doc_comments = true\nmax_width = 100\nmerge_derives = true\nreorder_imports = true\nreorder_modules = true\nuse_field_init_shorthand = true\nuse_try_shorthand = true\n"
        },
        {
          "name": "shell.nix",
          "type": "blob",
          "size": 0.1513671875,
          "content": "{ pkgs ? import <nixpkgs> {} }:\n\npkgs.stdenv.mkDerivation {\n  name = \"cursive-env\";\n  buildInputs = with pkgs; [\n    ncurses\n  ];\n\n  RUST_BACKTRACE = 1;\n}\n"
        }
      ]
    }
  ]
}