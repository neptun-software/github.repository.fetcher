{
  "metadata": {
    "timestamp": 1736709246564,
    "page": 566,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjU3MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "EmbarkStudios/texture-synthesis",
      "stars": 1767,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".ci",
          "type": "tree",
          "content": null
        },
        {
          "name": ".githooks",
          "type": "tree",
          "content": null
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.044921875,
          "content": "/target\ncli/target\nlib/target\n**/*.rs.bk\n/out\n"
        },
        {
          "name": ".mergify.yml",
          "type": "blob",
          "size": 0.421875,
          "content": "pull_request_rules:\n  - name: automatic merge when CI passes and 1 reviews\n    conditions:\n      - \"#approved-reviews-by>=1\"\n      - \"#review-requested=0\"\n      - \"#changes-requested-reviews-by=0\"\n      - \"#commented-reviews-by=0\"\n      - base=main\n      - label!=work-in-progress\n    actions:\n      merge:\n        method: squash\n  - name: delete head branch after merge\n    conditions: []\n    actions:\n      delete_head_branch: {}\n"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 9.83203125,
          "content": "<!-- markdownlint-disable blanks-around-headings blanks-around-lists no-duplicate-heading -->\n\n# Changelog\nAll notable changes to this project will be documented in this file.\n\nThe format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/),\nand this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0.html).\n\n## [Unreleased]\n### Changed\n- Both the lib and CLI have been marked as `looking-for-maintainer` as we have not been actively maintaining these crates for a while, and would be open to transferring this repo to someone else.\n\n## [0.8.2] - 2021-03-26\n### Changed\n- Updated dependencies\n\n## [0.8.1] - 2020-11-17\n### Added\n- [PR#154](https://github.com/EmbarkStudios/texture-synthesis/pull/154) added progress notification is now supported when compiling for `wasm32`, thanks [@bnjbvr](https://github.com/bnjbvr)!\n\n## [0.8.0] - 2020-02-26\n### Added\n- Added the [09_sample_masks](lib/examples/09_sample_masks.rs) example\n- CLI: Resolved [#38](https://github.com/EmbarkStudios/texture-synthesis/issues/38) by adding the `repeat` subcommand, which can be used to repeat transforms with different input images\n- [PR#91](https://github.com/EmbarkStudios/texture-synthesis/pull/91) Added support for compiling and running texture-synthesis as WASM.\n\n### Fixed\n- [PR#69](https://github.com/EmbarkStudios/texture-synthesis/pull/69) Improved performance by 1x-2x, especially for smaller inputs. Thanks [@Mr4k](https://github.com/Mr4k)!\n- [PR#70](https://github.com/EmbarkStudios/texture-synthesis/pull/70) Improved performance by **another** 1x-2.7x, especially for larger numbers of threads. Thanks (again!) [@Mr4k](https://github.com/Mr4k)!\n- CLI: [PR#71](https://github.com/EmbarkStudios/texture-synthesis/pull/71) The prebuilt binary for Windows is now packaged in a zip file instead of a gzipped tarball to improve end user experience. Thanks [@moppius](https://github.com/moppius)!\n- [PR#98](https://github.com/EmbarkStudios/texture-synthesis/pull/98) fixed [#85](https://github.com/EmbarkStudios/texture-synthesis/issues/85), sample masks could hang image generation. Thanks [@Mr4k](https://github.com/Mr4k)!\n\n## [0.7.1] - 2019-11-19\n### Fixed\n- Update to fix broken CI script\n\n## [0.7.0] - 2019-11-19\n### Added\n- [PR#57](https://github.com/EmbarkStudios/texture-synthesis/pull/57) CLI: Added the `flip-and-rotate` subcommand which applies flip and rotation transforms to each example input and adds them as additional examples. Thanks [@JD557](https://github.com/JD557)!\n- [PR#60](https://github.com/EmbarkStudios/texture-synthesis/pull/60) added the ability to specify a channel to use as the inpaint mask instead of a separate image. Thanks [@khskarl](https://github.com/khskarl)!\n- Added `SessionBuilder::inpaint_example_channel`\n- CLI: Added `--inpaint-channel <r|g|b|a>`\n\n### Changed\n- Replace [`failure`](https://crates.io/crates/failure) crate for error handling with just `std::error::Error`\n\n### Fixed\n- Validate that the `--m-rand` / `random_sample_locations` parameter is > 0. [#45](https://github.com/EmbarkStudios/texture-synthesis/issues/45)\n\n## [0.6.0] - 2019-09-23\n### Added\n- Added support for the alpha channel during generation, which was previously ignored\n\n### Changed\n- `SessionBuilder::inpaint_example` now requires a size be provided by which all inputs will be resized, as well setting the output image size. Previously, you had to manually specify matching `output_size` and `resize_input` otherwise you would get a parameter validation error.\n- All public methods/functions that took a size either as 2 u32's, or a tuple of them, now use a simple `Dims` struct for clarity.\n\n### Fixed\n- [PR#36](https://github.com/EmbarkStudios/texture-synthesis/pull/36) Fixed undefined behavior in `Generator::update`. Thanks for reporting, [@ralfbiedert](https://github.com/ralfbiedert)!\n\n## [0.5.0] - 2019-09-13\n### Added\n- You can now specify the maximum number of threads that can be used at any one time via `SessionBuilder::max_thread_count`\n- CLI: You can now specify the maximum thread count via `-t | --threads`\n- Added `From<image::DynamicImage>` for `ImageSource`\n- Added integrations tests for different examples, to catch regressions in generation\n- Added criterion benchmarks for the different examples, to catch performance regressions\n\n### Changed\n- `SampleMethod::From<AsRef<Path>>` is now `SampleMethod::From<Into<ImageSource>>`\n- `Example::From<AsRef<Path>>` is now `Example::From<Into<ImageSource>>`\n- CLI: Renamed the `--out-fmt` arg to `--stdout-fmt` to indicate it only works when using stdout via `--out -`\n\n### Fixed\n- [PR#14](https://github.com/EmbarkStudios/texture-synthesis/pull/14) Vastly improve performance, all benchmarks are sped up from between **1.03** to **1.96**, almost twice as fast! Thanks [@austinjones](https://github.com/austinjones)!\n- Disabled unused `rand` default features (OS random number generator)\n\n## [0.4.2] - 2019-09-05\n### Added\n- Added `Error::UnsupportedOutputFormat`\n\n### Changed\n- CLI: `--out` is now required. `-` can still be passed to write to stdout instead of a file.\n- CLI: The file extension for the `--out` path is now checked to see if it a supported format.\n\n### Removed\n- Removed tga feature in image since it wasn't used\n\n## [0.4.1] - 2019-09-04\n### Fixed\n- Removed unused `lodepng` dependency\n\n## [0.4.0] - 2019-09-04\n### Changed\n- Use [`failure`](https://crates.io/crates/failure) for errors\n- CLI: Replaced piston_window with [`minifb`](https://crates.io/crates/minifb)\n- CLI: Due to how minifb works via X11, the progress window is now an optional feature not enabled when building for musl\n\n### Removed\n- Removed several codec features from `image`, only `png`, `jpeg`, `bmp`, and `tga` are supported now\n\n## [0.3.0] - 2019-09-03\n### Added\n- Added [`Example`](https://github.com/EmbarkStudios/texture-synthesis/blob/7e65b8abb9508841e7acf758cb79dd3f49aac28e/lib/src/lib.rs#L247) and [`ExampleBuilder`](https://github.com/EmbarkStudios/texture-synthesis/blob/7e65b8abb9508841e7acf758cb79dd3f49aac28e/lib/src/lib.rs#L208) which can be used to manipulate an indidivual\nexample input before being added to a [`SessionBuilder`](https://github.com/EmbarkStudios/texture-synthesis/blob/7e65b8abb9508841e7acf758cb79dd3f49aac28e/lib/src/lib.rs#L342)\n- Added [`SampleMethod`](https://github.com/EmbarkStudios/texture-synthesis/blob/7e65b8abb9508841e7acf758cb79dd3f49aac28e/lib/src/lib.rs#L158) used to specify how a particular example is sampled during generation\n- Added [`ImageSource`](https://github.com/EmbarkStudios/texture-synthesis/blob/7e65b8abb9508841e7acf758cb79dd3f49aac28e/lib/src/utils.rs#L6) which is a small enum that means image data for examples, guides,\nmasks, etc, can be specified either as paths, raw byte slices, or already loaded `image::DynamicImage`\n- Added [`GeneratedImage`](https://github.com/EmbarkStudios/texture-synthesis/blob/7e65b8abb9508841e7acf758cb79dd3f49aac28e/lib/src/lib.rs#L103) which allows saving, streaming, and inspection of the image\ngenerated by [`Session::run()`](https://github.com/EmbarkStudios/texture-synthesis/blob/7e65b8abb9508841e7acf758cb79dd3f49aac28e/lib/src/lib.rs#L736)\n\n### Changed\n- All usage of `&str` paths to load images from disk have been replaced with `ImageSource`\n- Moved all of the building functionality in `Session` into `SessionBuilder`\n- [`SessionBuilder::inpaint_example`](https://github.com/EmbarkStudios/texture-synthesis/blob/7e65b8abb9508841e7acf758cb79dd3f49aac28e/lib/src/lib.rs#L410) now specifies an ImageSource for the inpaint mask, along with an `Example` to be paired with, rather than the previous use of an index that the user had to keep track of\n- [`GeneratorProgress`](https://github.com/EmbarkStudios/texture-synthesis/blob/7e65b8abb9508841e7acf758cb79dd3f49aac28e/lib/src/lib.rs#L789) now gets the total progress and stage progress in addition to the current image\n- `Session::run()` can no longer fail, and consumes the `Session`\n- `Session::run()` now returns a `GeneratedImage` which can be used to get, save, or stream the generated image (and maybe the debug ones)\n- The CLI default values for the various available parameters now match the defaults in the `SessionBuilder`, which means the examples provided in the README.md match\n\n### Removed\n- Replaced `load_examples`, `load_example`, `load_example_guides`, and `load_sampling_masks` with\n[`add_example`](https://github.com/EmbarkStudios/texture-synthesis/blob/7e65b8abb9508841e7acf758cb79dd3f49aac28e/lib/src/lib.rs#L366) and [`add_examples`](https://github.com/EmbarkStudios/texture-synthesis/blob/7e65b8abb9508841e7acf758cb79dd3f49aac28e/lib/src/lib.rs#L382) which work with `Example`(s)\n\n### Fixed\n- The top-level README.md is now deployed with both `texture-synthesis` and `texture-synthesis-cli` on crates.io\n\n## [0.2.0] - 2019-08-27\n### Added\n- Split lib and cli into separate crates so CLI specific dependencies weren't pulled in\n- Add `GeneratorProgress` to allow progress of image generation to be reported to external callers\n\n## [0.1.0] - 2019-08-27\n### Added\n- Initial add of `texture-synthesis`\n\n[Unreleased]: https://github.com/EmbarkStudios/texture-synthesis/compare/0.8.0...HEAD\n[0.8.0]: https://github.com/EmbarkStudios/texture-synthesis/compare/0.7.0...0.7.1\n[0.7.1]: https://github.com/EmbarkStudios/texture-synthesis/compare/0.7.0...0.7.1\n[0.7.0]: https://github.com/EmbarkStudios/texture-synthesis/compare/0.6.0...0.7.0\n[0.6.0]: https://github.com/EmbarkStudios/texture-synthesis/compare/0.5.0...0.6.0\n[0.5.0]: https://github.com/EmbarkStudios/texture-synthesis/compare/0.4.2...0.5.0\n[0.4.2]: https://github.com/EmbarkStudios/texture-synthesis/compare/0.4.1...0.4.2\n[0.4.1]: https://github.com/EmbarkStudios/texture-synthesis/compare/0.4.0...0.4.1\n[0.4.0]: https://github.com/EmbarkStudios/texture-synthesis/compare/0.3.0...0.4.0\n[0.3.0]: https://github.com/EmbarkStudios/texture-synthesis/compare/0.2.0...0.3.0\n[0.2.0]: https://github.com/EmbarkStudios/texture-synthesis/compare/0.1.0...0.2.0\n[0.1.0]: https://github.com/EmbarkStudios/texture-synthesis/releases/tag/0.1.0\n"
        },
        {
          "name": "CODE_OF_CONDUCT.md",
          "type": "blob",
          "size": 5.3544921875,
          "content": "# Contributor Covenant Code of Conduct\n\n## Our Pledge\n\nWe as members, contributors, and leaders pledge to make participation in our\ncommunity a harassment-free experience for everyone, regardless of age, body\nsize, visible or invisible disability, ethnicity, sex characteristics, gender\nidentity and expression, level of experience, education, socio-economic status,\nnationality, personal appearance, race, religion, or sexual identity\nand orientation.\n\nWe pledge to act and interact in ways that contribute to an open, welcoming,\ndiverse, inclusive, and healthy community.\n\n## Our Standards\n\nExamples of behavior that contributes to a positive environment for our\ncommunity include:\n\n* Demonstrating empathy and kindness toward other people\n* Being respectful of differing opinions, viewpoints, and experiences\n* Giving and gracefully accepting constructive feedback\n* Accepting responsibility and apologizing to those affected by our mistakes,\n  and learning from the experience\n* Focusing on what is best not just for us as individuals, but for the\n  overall community\n\nExamples of unacceptable behavior include:\n\n* The use of sexualized language or imagery, and sexual attention or\n  advances of any kind\n* Trolling, insulting or derogatory comments, and personal or political attacks\n* Public or private harassment\n* Publishing others' private information, such as a physical or email\n  address, without their explicit permission\n* Other conduct which could reasonably be considered inappropriate in a\n  professional setting\n\n## Enforcement Responsibilities\n\nCommunity leaders are responsible for clarifying and enforcing our standards of\nacceptable behavior and will take appropriate and fair corrective action in\nresponse to any behavior that they deem inappropriate, threatening, offensive,\nor harmful.\n\nCommunity leaders have the right and responsibility to remove, edit, or reject\ncomments, commits, code, wiki edits, issues, and other contributions that are\nnot aligned to this Code of Conduct, and will communicate reasons for moderation\ndecisions when appropriate.\n\n## Scope\n\nThis Code of Conduct applies within all community spaces, and also applies when\nan individual is officially representing the community in public spaces.\nExamples of representing our community include using an official e-mail address,\nposting via an official social media account, or acting as an appointed\nrepresentative at an online or offline event.\n\n## Enforcement\n\nInstances of abusive, harassing, or otherwise unacceptable behavior may be\nreported to the community leaders responsible for enforcement at\nopensource@embark-studios.com.\nAll complaints will be reviewed and investigated promptly and fairly.\n\nAll community leaders are obligated to respect the privacy and security of the\nreporter of any incident.\n\n## Enforcement Guidelines\n\nCommunity leaders will follow these Community Impact Guidelines in determining\nthe consequences for any action they deem in violation of this Code of Conduct:\n\n### 1. Correction\n\n**Community Impact**: Use of inappropriate language or other behavior deemed\nunprofessional or unwelcome in the community.\n\n**Consequence**: A private, written warning from community leaders, providing\nclarity around the nature of the violation and an explanation of why the\nbehavior was inappropriate. A public apology may be requested.\n\n### 2. Warning\n\n**Community Impact**: A violation through a single incident or series\nof actions.\n\n**Consequence**: A warning with consequences for continued behavior. No\ninteraction with the people involved, including unsolicited interaction with\nthose enforcing the Code of Conduct, for a specified period of time. This\nincludes avoiding interactions in community spaces as well as external channels\nlike social media. Violating these terms may lead to a temporary or\npermanent ban.\n\n### 3. Temporary Ban\n\n**Community Impact**: A serious violation of community standards, including\nsustained inappropriate behavior.\n\n**Consequence**: A temporary ban from any sort of interaction or public\ncommunication with the community for a specified period of time. No public or\nprivate interaction with the people involved, including unsolicited interaction\nwith those enforcing the Code of Conduct, is allowed during this period.\nViolating these terms may lead to a permanent ban.\n\n### 4. Permanent Ban\n\n**Community Impact**: Demonstrating a pattern of violation of community\nstandards, including sustained inappropriate behavior,  harassment of an\nindividual, or aggression toward or disparagement of classes of individuals.\n\n**Consequence**: A permanent ban from any sort of public interaction within\nthe community.\n\n## Attribution\n\nThis Code of Conduct is adapted from the [Contributor Covenant][homepage],\nversion 2.0, available at\n[https://www.contributor-covenant.org/version/2/0/code_of_conduct.html][v2.0].\n\nCommunity Impact Guidelines were inspired by \n[Mozilla's code of conduct enforcement ladder][Mozilla CoC].\n\nFor answers to common questions about this code of conduct, see the FAQ at\n[https://www.contributor-covenant.org/faq][FAQ]. Translations are available \nat [https://www.contributor-covenant.org/translations][translations].\n\n[homepage]: https://www.contributor-covenant.org\n[v2.0]: https://www.contributor-covenant.org/version/2/0/code_of_conduct.html\n[Mozilla CoC]: https://github.com/mozilla/diversity\n[FAQ]: https://www.contributor-covenant.org/faq\n[translations]: https://www.contributor-covenant.org/translations\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 3.3046875,
          "content": "# Embark Contributor Guidelines\n\nWelcome! This project is created by the team at [Embark Studios](https://embark.games). We're glad you're interested in contributing! We welcome contributions from people of all backgrounds who are interested in making great software with us.\n\nAt Embark, we aspire to empower everyone to create interactive experiences. To do this, we're exploring and pushing the boundaries of new technologies, and sharing our learnings with the open source community.\n\nIf you have any difficulties getting involved or finding answers to your questions, please don't hesitate to ask your questions in our [Discord server](https://discord.com/invite/8TW9nfF).\n\nIf you have ideas for collaboration, email us at opensource@embark-studios.com.\n\nWe're also hiring full-time engineers to work with us in Stockholm! Check out our current job postings [here](https://www.embark-studios.com/jobs).\n\n## Issues\n\n### Feature Requests\n\nIf you have ideas or how to improve our projects, you can suggest features by opening a GitHub issue. Make sure to include details about the feature or change, and describe any uses cases it would enable.\n\nFeature requests will be tagged as `enhancement` and their status will be updated in the comments of the issue.\n\n### Bugs\n\nWhen reporting a bug or unexpected behaviour in a project, make sure your issue descibes steps to reproduce the behaviour, including the platform you were using, what steps you took, and any error messages.\n\nReproducible bugs will be tagged as `bug` and their status will be updated in the comments of the issue.\n\n### Wontfix\n\nIssues will be closed and tagged as `wontfix` if we decide that we do not wish to implement it, usually due to being misaligned with the project vision or out of scope. We will comment on the issue with more detailed reasoning.\n\n## Contribution Workflow\n\n### Open Issues\n\nIf you're ready to contribute, start by looking at our open issues tagged as [`help wanted`](../../issues?q=is%3Aopen+is%3Aissue+label%3A\"help+wanted\") or [`good first issue`](../../issues?q=is%3Aopen+is%3Aissue+label%3A\"good+first+issue\").\n\nYou can comment on the issue to let others know you're interested in working on it or to ask questions.\n\n### Making Changes\n\n1. Fork the repository.\n\n2. Create a new feature branch.\n\n3. Make your changes. Ensure that there are no build errors by running the project with your changes locally.\n\n4. Open a pull request with a name and description of what you did. You can read more about working with pull requests on GitHub [here](https://help.github.com/en/articles/creating-a-pull-request-from-a-fork).\n\n5. A maintainer will review your pull request and may ask you to make changes.\n\n## Code Guidelines\n\nYou can read about our standards and recommendations for working with Rust [here](https://github.com/EmbarkStudios/rust-ecosystem/blob/main/guidelines.md).\n\n## Licensing\n\nUnless otherwise specified, all Embark open source projects are licensed under a dual MIT OR Apache-2.0 license, allowing licensees to chose either at their option. You can read more in each project's respective README.\n\n## Code of Conduct\n\nPlease note that our projects are released with a [Contributor Code of Conduct](CODE_OF_CONDUCT.md) to ensure that they are welcoming places for everyone to contribute. By participating in any Embark open source project, you agree to abide by these terms.\n"
        },
        {
          "name": "Cargo.lock",
          "type": "blob",
          "size": 30.46875,
          "content": "# This file is automatically @generated by Cargo.\n# It is not intended for manual editing.\nversion = 3\n\n[[package]]\nname = \"adler32\"\nversion = \"1.2.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"aae1277d39aeec15cb388266ecc24b11c80469deae6067e17a1a7aa9e5c1f234\"\n\n[[package]]\nname = \"aho-corasick\"\nversion = \"0.7.18\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1e37cfd5e7657ada45f742d6e99ca5788580b5c529dc78faf11ece6dc702656f\"\ndependencies = [\n \"memchr\",\n]\n\n[[package]]\nname = \"ansi_term\"\nversion = \"0.12.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d52a9bb7ec0cf484c551830a7ce27bd20d67eac647e1befb56b0be4ee39a55d2\"\ndependencies = [\n \"winapi\",\n]\n\n[[package]]\nname = \"atty\"\nversion = \"0.2.14\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d9b39be18770d11421cdb1b9947a45dd3f37e93092cbf377614828a319d5fee8\"\ndependencies = [\n \"hermit-abi\",\n \"libc\",\n \"winapi\",\n]\n\n[[package]]\nname = \"autocfg\"\nversion = \"1.1.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d468802bab17cbc0cc575e9b053f41e72aa36bfa6b7f55e3529ffa43161b97fa\"\n\n[[package]]\nname = \"bindgen\"\nversion = \"0.56.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"2da379dbebc0b76ef63ca68d8fc6e71c0f13e59432e0987e508c1820e6ab5239\"\ndependencies = [\n \"bitflags\",\n \"cexpr\",\n \"clang-sys\",\n \"clap\",\n \"env_logger\",\n \"lazy_static\",\n \"lazycell\",\n \"log\",\n \"peeking_take_while\",\n \"proc-macro2\",\n \"quote\",\n \"regex\",\n \"rustc-hash\",\n \"shlex\",\n \"which\",\n]\n\n[[package]]\nname = \"bit-vec\"\nversion = \"0.6.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"349f9b6a179ed607305526ca489b34ad0a41aed5f7980fa90eb03160b69598fb\"\n\n[[package]]\nname = \"bitflags\"\nversion = \"1.3.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"bef38d45163c2f1dde094a7dfd33ccf595c92905c8f8f4fdc18d06fb1037718a\"\n\n[[package]]\nname = \"bstr\"\nversion = \"0.2.17\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ba3569f383e8f1598449f1a423e72e99569137b47740b1da11ef19af3d5c3223\"\ndependencies = [\n \"lazy_static\",\n \"memchr\",\n \"regex-automata\",\n \"serde\",\n]\n\n[[package]]\nname = \"bumpalo\"\nversion = \"3.12.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"0d261e256854913907f67ed06efbc3338dfe6179796deefc1ff763fc1aee5535\"\n\n[[package]]\nname = \"bytemuck\"\nversion = \"1.7.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"439989e6b8c38d1b6570a384ef1e49c8848128f5a97f3914baef02920842712f\"\n\n[[package]]\nname = \"byteorder\"\nversion = \"1.4.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"14c189c53d098945499cdfa7ecc63567cf3886b3332b312a5b4585d8d3a6a610\"\n\n[[package]]\nname = \"cast\"\nversion = \"0.2.7\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"4c24dab4283a142afa2fdca129b80ad2c6284e073930f964c3a1293c225ee39a\"\ndependencies = [\n \"rustc_version\",\n]\n\n[[package]]\nname = \"cc\"\nversion = \"1.0.73\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"2fff2a6927b3bb87f9595d67196a70493f627687a71d87a0d692242c33f58c11\"\n\n[[package]]\nname = \"cexpr\"\nversion = \"0.4.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f4aedb84272dbe89af497cf81375129abda4fc0a9e7c5d317498c15cc30c0d27\"\ndependencies = [\n \"nom\",\n]\n\n[[package]]\nname = \"cfg-if\"\nversion = \"1.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"baf1de4339761588bc0619e3cbc0120ee582ebb74b53b4efbf79117bd2da40fd\"\n\n[[package]]\nname = \"clang-sys\"\nversion = \"1.3.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"4cc00842eed744b858222c4c9faf7243aafc6d33f92f96935263ef4d8a41ce21\"\ndependencies = [\n \"glob\",\n \"libc\",\n \"libloading\",\n]\n\n[[package]]\nname = \"clap\"\nversion = \"2.34.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a0610544180c38b88101fecf2dd634b174a62eef6946f84dfc6a7127512b381c\"\ndependencies = [\n \"ansi_term\",\n \"atty\",\n \"bitflags\",\n \"strsim\",\n \"textwrap\",\n \"unicode-width\",\n \"vec_map\",\n]\n\n[[package]]\nname = \"cmake\"\nversion = \"0.1.48\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e8ad8cef104ac57b68b89df3208164d228503abbdce70f6880ffa3d970e7443a\"\ndependencies = [\n \"cc\",\n]\n\n[[package]]\nname = \"color_quant\"\nversion = \"1.1.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3d7b894f5411737b7867f4827955924d7c254fc9f4d91a6aad6b097804b1018b\"\n\n[[package]]\nname = \"console\"\nversion = \"0.15.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a28b32d32ca44b70c3e4acd7db1babf555fa026e385fb95f18028f88848b3c31\"\ndependencies = [\n \"encode_unicode\",\n \"libc\",\n \"once_cell\",\n \"terminal_size\",\n \"winapi\",\n]\n\n[[package]]\nname = \"crc32fast\"\nversion = \"1.3.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b540bd8bc810d3885c6ea91e2018302f68baba2129ab3e88f32389ee9370880d\"\ndependencies = [\n \"cfg-if\",\n]\n\n[[package]]\nname = \"criterion\"\nversion = \"0.3.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1604dafd25fba2fe2d5895a9da139f8dc9b319a5fe5354ca137cbbce4e178d10\"\ndependencies = [\n \"atty\",\n \"cast\",\n \"clap\",\n \"criterion-plot\",\n \"csv\",\n \"itertools\",\n \"lazy_static\",\n \"num-traits\",\n \"oorandom\",\n \"plotters\",\n \"rayon\",\n \"regex\",\n \"serde\",\n \"serde_cbor\",\n \"serde_derive\",\n \"serde_json\",\n \"tinytemplate\",\n \"walkdir\",\n]\n\n[[package]]\nname = \"criterion-plot\"\nversion = \"0.4.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d00996de9f2f7559f7f4dc286073197f83e92256a59ed395f9aac01fe717da57\"\ndependencies = [\n \"cast\",\n \"itertools\",\n]\n\n[[package]]\nname = \"crossbeam-channel\"\nversion = \"0.5.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e54ea8bc3fb1ee042f5aace6e3c6e025d3874866da222930f70ce62aceba0bfa\"\ndependencies = [\n \"cfg-if\",\n \"crossbeam-utils\",\n]\n\n[[package]]\nname = \"crossbeam-deque\"\nversion = \"0.8.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"6455c0ca19f0d2fbf751b908d5c55c1f5cbc65e03c4225427254b46890bdde1e\"\ndependencies = [\n \"cfg-if\",\n \"crossbeam-epoch\",\n \"crossbeam-utils\",\n]\n\n[[package]]\nname = \"crossbeam-epoch\"\nversion = \"0.9.7\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"c00d6d2ea26e8b151d99093005cb442fb9a37aeaca582a03ec70946f49ab5ed9\"\ndependencies = [\n \"cfg-if\",\n \"crossbeam-utils\",\n \"lazy_static\",\n \"memoffset\",\n \"scopeguard\",\n]\n\n[[package]]\nname = \"crossbeam-utils\"\nversion = \"0.8.7\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b5e5bed1f1c269533fa816a0a5492b3545209a205ca1a54842be180eb63a16a6\"\ndependencies = [\n \"cfg-if\",\n \"lazy_static\",\n]\n\n[[package]]\nname = \"csv\"\nversion = \"1.1.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"22813a6dc45b335f9bade10bf7271dc477e81113e89eb251a0bc2a8a81c536e1\"\ndependencies = [\n \"bstr\",\n \"csv-core\",\n \"itoa 0.4.8\",\n \"ryu\",\n \"serde\",\n]\n\n[[package]]\nname = \"csv-core\"\nversion = \"0.1.10\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"2b2466559f260f48ad25fe6317b3c8dac77b5bdb5763ac7d9d6103530663bc90\"\ndependencies = [\n \"memchr\",\n]\n\n[[package]]\nname = \"cty\"\nversion = \"0.2.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b365fabc795046672053e29c954733ec3b05e4be654ab130fe8f1f94d7051f35\"\n\n[[package]]\nname = \"deflate\"\nversion = \"0.8.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"73770f8e1fe7d64df17ca66ad28994a0a623ea497fa69486e14984e715c5d174\"\ndependencies = [\n \"adler32\",\n \"byteorder\",\n]\n\n[[package]]\nname = \"either\"\nversion = \"1.6.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e78d4f1cc4ae33bbfc157ed5d5a5ef3bc29227303d595861deb238fcec4e9457\"\n\n[[package]]\nname = \"encode_unicode\"\nversion = \"0.3.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a357d28ed41a50f9c765dbfe56cbc04a64e53e5fc58ba79fbc34c10ef3df831f\"\n\n[[package]]\nname = \"env_logger\"\nversion = \"0.8.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a19187fea3ac7e84da7dacf48de0c45d63c6a76f9490dae389aead16c243fce3\"\ndependencies = [\n \"atty\",\n \"humantime\",\n \"log\",\n \"regex\",\n \"termcolor\",\n]\n\n[[package]]\nname = \"glob\"\nversion = \"0.3.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"9b919933a397b79c37e33b77bb2aa3dc8eb6e165ad809e58ff75bc7db2e34574\"\n\n[[package]]\nname = \"half\"\nversion = \"1.8.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"eabb4a44450da02c90444cf74558da904edde8fb4e9035a9a6a4e15445af0bd7\"\n\n[[package]]\nname = \"heck\"\nversion = \"0.3.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"6d621efb26863f0e9924c6ac577e8275e5e6b77455db64ffa6c65c904e9e132c\"\ndependencies = [\n \"unicode-segmentation\",\n]\n\n[[package]]\nname = \"hermit-abi\"\nversion = \"0.1.19\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"62b467343b94ba476dcb2500d242dadbb39557df889310ac77c5d99100aaac33\"\ndependencies = [\n \"libc\",\n]\n\n[[package]]\nname = \"humantime\"\nversion = \"2.1.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"9a3a5bfb195931eeb336b2a7b4d761daec841b97f947d34394601737a7bba5e4\"\n\n[[package]]\nname = \"image\"\nversion = \"0.23.12\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"7ce04077ead78e39ae8610ad26216aed811996b043d47beed5090db674f9e9b5\"\ndependencies = [\n \"bytemuck\",\n \"byteorder\",\n \"color_quant\",\n \"jpeg-decoder\",\n \"num-iter\",\n \"num-rational\",\n \"num-traits\",\n \"png\",\n]\n\n[[package]]\nname = \"img_hash\"\nversion = \"2.1.0\"\nsource = \"git+https://github.com/EmbarkStudios/img_hash.git?rev=c40da78#c40da78946840c810543e6ec53967afb7adafd74\"\ndependencies = [\n \"bit-vec\",\n \"rustc-serialize\",\n]\n\n[[package]]\nname = \"indicatif\"\nversion = \"0.16.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"2d207dc617c7a380ab07ff572a6e52fa202a2a8f355860ac9c38e23f8196be1b\"\ndependencies = [\n \"console\",\n \"lazy_static\",\n \"number_prefix\",\n \"regex\",\n]\n\n[[package]]\nname = \"itertools\"\nversion = \"0.10.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a9a9d19fa1e79b6215ff29b9d6880b706147f16e9b1dbb1e4e5947b5b02bc5e3\"\ndependencies = [\n \"either\",\n]\n\n[[package]]\nname = \"itoa\"\nversion = \"0.4.8\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b71991ff56294aa922b450139ee08b3bfc70982c6b2c7562771375cf73542dd4\"\n\n[[package]]\nname = \"itoa\"\nversion = \"1.0.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1aab8fc367588b89dcee83ab0fd66b72b50b72fa1904d7095045ace2b0c81c35\"\n\n[[package]]\nname = \"jpeg-decoder\"\nversion = \"0.1.22\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"229d53d58899083193af11e15917b5640cd40b29ff475a1fe4ef725deb02d0f2\"\n\n[[package]]\nname = \"js-sys\"\nversion = \"0.3.56\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a38fc24e30fd564ce974c02bf1d337caddff65be6cc4735a1f7eab22a7440f04\"\ndependencies = [\n \"wasm-bindgen\",\n]\n\n[[package]]\nname = \"lazy_static\"\nversion = \"1.4.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e2abad23fbc42b3700f2f279844dc832adb2b2eb069b2df918f455c4e18cc646\"\n\n[[package]]\nname = \"lazycell\"\nversion = \"1.3.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"830d08ce1d1d941e6b30645f1a0eb5643013d835ce3779a5fc208261dbe10f55\"\n\n[[package]]\nname = \"libc\"\nversion = \"0.2.119\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1bf2e165bb3457c8e098ea76f3e3bc9db55f87aa90d52d0e6be741470916aaa4\"\n\n[[package]]\nname = \"libloading\"\nversion = \"0.7.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"efbc0f03f9a775e9f6aed295c6a1ba2253c5757a9e03d55c6caa46a681abcddd\"\ndependencies = [\n \"cfg-if\",\n \"winapi\",\n]\n\n[[package]]\nname = \"log\"\nversion = \"0.4.14\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"51b9bbe6c47d51fc3e1a9b945965946b4c44142ab8792c50835a980d362c2710\"\ndependencies = [\n \"cfg-if\",\n]\n\n[[package]]\nname = \"memchr\"\nversion = \"2.4.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"308cc39be01b73d0d18f82a0e7b2a3df85245f84af96fdddc5d202d27e47b86a\"\n\n[[package]]\nname = \"memoffset\"\nversion = \"0.6.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"5aa361d4faea93603064a027415f07bd8e1d5c88c9fbf68bf56a285428fd79ce\"\ndependencies = [\n \"autocfg\",\n]\n\n[[package]]\nname = \"minifb\"\nversion = \"0.19.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"7b6e41119d1667465608d36488fa5dcd228057a26c156e25f17f492f38435124\"\ndependencies = [\n \"cc\",\n \"orbclient\",\n \"raw-window-handle 0.3.4\",\n \"winapi\",\n \"x11-dl\",\n \"xkb\",\n]\n\n[[package]]\nname = \"miniz_oxide\"\nversion = \"0.3.7\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"791daaae1ed6889560f8c4359194f56648355540573244a5448a83ba1ecc7435\"\ndependencies = [\n \"adler32\",\n]\n\n[[package]]\nname = \"nom\"\nversion = \"5.1.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ffb4262d26ed83a1c0a33a38fe2bb15797329c85770da05e6b828ddb782627af\"\ndependencies = [\n \"memchr\",\n \"version_check\",\n]\n\n[[package]]\nname = \"num-integer\"\nversion = \"0.1.44\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d2cc698a63b549a70bc047073d2949cce27cd1c7b0a4a862d08a8031bc2801db\"\ndependencies = [\n \"autocfg\",\n \"num-traits\",\n]\n\n[[package]]\nname = \"num-iter\"\nversion = \"0.1.42\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b2021c8337a54d21aca0d59a92577a029af9431cb59b909b03252b9c164fad59\"\ndependencies = [\n \"autocfg\",\n \"num-integer\",\n \"num-traits\",\n]\n\n[[package]]\nname = \"num-rational\"\nversion = \"0.3.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"12ac428b1cb17fce6f731001d307d351ec70a6d202fc2e60f7d4c5e42d8f4f07\"\ndependencies = [\n \"autocfg\",\n \"num-integer\",\n \"num-traits\",\n]\n\n[[package]]\nname = \"num-traits\"\nversion = \"0.2.14\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"9a64b1ec5cda2586e284722486d802acf1f7dbdc623e2bfc57e65ca1cd099290\"\ndependencies = [\n \"autocfg\",\n]\n\n[[package]]\nname = \"num_cpus\"\nversion = \"1.13.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"19e64526ebdee182341572e50e9ad03965aa510cd94427a4549448f285e957a1\"\ndependencies = [\n \"hermit-abi\",\n \"libc\",\n]\n\n[[package]]\nname = \"number_prefix\"\nversion = \"0.4.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"830b246a0e5f20af87141b25c173cd1b609bd7779a4617d6ec582abaf90870f3\"\n\n[[package]]\nname = \"once_cell\"\nversion = \"1.9.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"da32515d9f6e6e489d7bc9d84c71b060db7247dc035bbe44eac88cf87486d8d5\"\n\n[[package]]\nname = \"oorandom\"\nversion = \"11.1.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"0ab1bc2a289d34bd04a330323ac98a1b4bc82c9d9fcb1e66b63caa84da26b575\"\n\n[[package]]\nname = \"orbclient\"\nversion = \"0.3.32\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"2d3aa1482d3a9cb7547932f54a20910090073e81b3b7b236277c91698a10f83e\"\ndependencies = [\n \"libc\",\n \"raw-window-handle 0.3.4\",\n \"redox_syscall\",\n \"sdl2\",\n \"sdl2-sys\",\n \"wasm-bindgen\",\n \"web-sys\",\n]\n\n[[package]]\nname = \"pdqselect\"\nversion = \"0.1.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"7778906d9321dd56cde1d1ffa69a73e59dcf5fda6d366f62727adf2bd4193aee\"\n\n[[package]]\nname = \"peeking_take_while\"\nversion = \"0.1.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"19b17cddbe7ec3f8bc800887bab5e717348c95ea2ca0b1bf0837fb964dc67099\"\n\n[[package]]\nname = \"pkg-config\"\nversion = \"0.3.24\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"58893f751c9b0412871a09abd62ecd2a00298c6c83befa223ef98c52aef40cbe\"\n\n[[package]]\nname = \"plotters\"\nversion = \"0.3.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"32a3fd9ec30b9749ce28cd91f255d569591cdf937fe280c312143e3c4bad6f2a\"\ndependencies = [\n \"num-traits\",\n \"plotters-backend\",\n \"plotters-svg\",\n \"wasm-bindgen\",\n \"web-sys\",\n]\n\n[[package]]\nname = \"plotters-backend\"\nversion = \"0.3.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d88417318da0eaf0fdcdb51a0ee6c3bed624333bff8f946733049380be67ac1c\"\n\n[[package]]\nname = \"plotters-svg\"\nversion = \"0.3.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"521fa9638fa597e1dc53e9412a4f9cefb01187ee1f7413076f9e6749e2885ba9\"\ndependencies = [\n \"plotters-backend\",\n]\n\n[[package]]\nname = \"png\"\nversion = \"0.16.8\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3c3287920cb847dee3de33d301c463fba14dda99db24214ddf93f83d3021f4c6\"\ndependencies = [\n \"bitflags\",\n \"crc32fast\",\n \"deflate\",\n \"miniz_oxide\",\n]\n\n[[package]]\nname = \"proc-macro-error\"\nversion = \"1.0.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"da25490ff9892aab3fcf7c36f08cfb902dd3e71ca0f9f9517bea02a73a5ce38c\"\ndependencies = [\n \"proc-macro-error-attr\",\n \"proc-macro2\",\n \"quote\",\n \"syn\",\n \"version_check\",\n]\n\n[[package]]\nname = \"proc-macro-error-attr\"\nversion = \"1.0.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a1be40180e52ecc98ad80b184934baf3d0d29f979574e439af5a55274b35f869\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"version_check\",\n]\n\n[[package]]\nname = \"proc-macro2\"\nversion = \"1.0.36\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"c7342d5883fbccae1cc37a2353b09c87c9b0f3afd73f5fb9bba687a1f733b029\"\ndependencies = [\n \"unicode-xid\",\n]\n\n[[package]]\nname = \"quote\"\nversion = \"1.0.15\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"864d3e96a899863136fc6e99f3d7cae289dafe43bf2c5ac19b70df7210c0a145\"\ndependencies = [\n \"proc-macro2\",\n]\n\n[[package]]\nname = \"rand\"\nversion = \"0.8.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"34af8d1a0e25924bc5b7c43c079c942339d8f0a8b57c39049bef581b46327404\"\ndependencies = [\n \"rand_core\",\n]\n\n[[package]]\nname = \"rand_core\"\nversion = \"0.6.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d34f1408f55294453790c48b2f1ebbb1c5b4b7563eb1f418bcfcfdbb06ebb4e7\"\n\n[[package]]\nname = \"rand_pcg\"\nversion = \"0.3.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"59cad018caf63deb318e5a4586d99a24424a364f40f1e5778c29aca23f4fc73e\"\ndependencies = [\n \"rand_core\",\n]\n\n[[package]]\nname = \"raw-window-handle\"\nversion = \"0.3.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e28f55143d0548dad60bb4fbdc835a3d7ac6acc3324506450c5fdd6e42903a76\"\ndependencies = [\n \"libc\",\n \"raw-window-handle 0.4.2\",\n]\n\n[[package]]\nname = \"raw-window-handle\"\nversion = \"0.4.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"fba75eee94a9d5273a68c9e1e105d9cffe1ef700532325788389e5a83e2522b7\"\ndependencies = [\n \"cty\",\n]\n\n[[package]]\nname = \"rayon\"\nversion = \"1.5.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"c06aca804d41dbc8ba42dfd964f0d01334eceb64314b9ecf7c5fad5188a06d90\"\ndependencies = [\n \"autocfg\",\n \"crossbeam-deque\",\n \"either\",\n \"rayon-core\",\n]\n\n[[package]]\nname = \"rayon-core\"\nversion = \"1.9.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d78120e2c850279833f1dd3582f730c4ab53ed95aeaaaa862a2a5c71b1656d8e\"\ndependencies = [\n \"crossbeam-channel\",\n \"crossbeam-deque\",\n \"crossbeam-utils\",\n \"lazy_static\",\n \"num_cpus\",\n]\n\n[[package]]\nname = \"redox_syscall\"\nversion = \"0.2.10\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8383f39639269cde97d255a32bdb68c047337295414940c68bdd30c2e13203ff\"\ndependencies = [\n \"bitflags\",\n]\n\n[[package]]\nname = \"regex\"\nversion = \"1.5.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d83f127d94bdbcda4c8cc2e50f6f84f4b611f69c902699ca385a39c3a75f9ff1\"\ndependencies = [\n \"aho-corasick\",\n \"memchr\",\n \"regex-syntax\",\n]\n\n[[package]]\nname = \"regex-automata\"\nversion = \"0.1.10\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"6c230d73fb8d8c1b9c0b3135c5142a8acee3a0558fb8db5cf1cb65f8d7862132\"\n\n[[package]]\nname = \"regex-syntax\"\nversion = \"0.6.26\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"49b3de9ec5dc0a3417da371aab17d729997c15010e7fd24ff707773a33bddb64\"\n\n[[package]]\nname = \"rstar\"\nversion = \"0.7.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"0650eaaa56cbd1726fd671150fce8ac6ed9d9a25d1624430d7ee9d196052f6b6\"\ndependencies = [\n \"num-traits\",\n \"pdqselect\",\n]\n\n[[package]]\nname = \"rustc-hash\"\nversion = \"1.1.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"08d43f7aa6b08d49f382cde6a7982047c3426db949b1424bc4b7ec9ae12c6ce2\"\n\n[[package]]\nname = \"rustc-serialize\"\nversion = \"0.3.24\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"dcf128d1287d2ea9d80910b5f1120d0b8eede3fbf1abe91c40d39ea7d51e6fda\"\n\n[[package]]\nname = \"rustc_version\"\nversion = \"0.4.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"bfa0f585226d2e68097d4f95d113b15b83a82e819ab25717ec0590d9584ef366\"\ndependencies = [\n \"semver\",\n]\n\n[[package]]\nname = \"ryu\"\nversion = \"1.0.9\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"73b4b750c782965c211b42f022f59af1fbceabdd026623714f104152f1ec149f\"\n\n[[package]]\nname = \"same-file\"\nversion = \"1.0.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"93fc1dc3aaa9bfed95e02e6eadabb4baf7e3078b0bd1b4d7b6b0b68378900502\"\ndependencies = [\n \"winapi-util\",\n]\n\n[[package]]\nname = \"scopeguard\"\nversion = \"1.1.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d29ab0c6d3fc0ee92fe66e2d99f700eab17a8d57d1c1d3b748380fb20baa78cd\"\n\n[[package]]\nname = \"sdl2\"\nversion = \"0.35.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f7959277b623f1fb9e04aea73686c3ca52f01b2145f8ea16f4ff30d8b7623b1a\"\ndependencies = [\n \"bitflags\",\n \"lazy_static\",\n \"libc\",\n \"raw-window-handle 0.4.2\",\n \"sdl2-sys\",\n]\n\n[[package]]\nname = \"sdl2-sys\"\nversion = \"0.35.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e3586be2cf6c0a8099a79a12b4084357aa9b3e0b0d7980e3b67aaf7a9d55f9f0\"\ndependencies = [\n \"cfg-if\",\n \"cmake\",\n \"libc\",\n \"version-compare\",\n]\n\n[[package]]\nname = \"semver\"\nversion = \"1.0.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a4a3381e03edd24287172047536f20cabde766e2cd3e65e6b00fb3af51c4f38d\"\n\n[[package]]\nname = \"serde\"\nversion = \"1.0.136\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ce31e24b01e1e524df96f1c2fdd054405f8d7376249a5110886fb4b658484789\"\n\n[[package]]\nname = \"serde_cbor\"\nversion = \"0.11.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"2bef2ebfde456fb76bbcf9f59315333decc4fda0b2b44b420243c11e0f5ec1f5\"\ndependencies = [\n \"half\",\n \"serde\",\n]\n\n[[package]]\nname = \"serde_derive\"\nversion = \"1.0.136\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"08597e7152fcd306f41838ed3e37be9eaeed2b61c42e2117266a554fab4662f9\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn\",\n]\n\n[[package]]\nname = \"serde_json\"\nversion = \"1.0.79\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8e8d9fa5c3b304765ce1fd9c4c8a3de2c8db365a5b91be52f186efc675681d95\"\ndependencies = [\n \"itoa 1.0.1\",\n \"ryu\",\n \"serde\",\n]\n\n[[package]]\nname = \"shlex\"\nversion = \"0.1.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"7fdf1b9db47230893d76faad238fd6097fd6d6a9245cd7a4d90dbd639536bbd2\"\n\n[[package]]\nname = \"strsim\"\nversion = \"0.8.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8ea5119cdb4c55b55d432abb513a0429384878c15dde60cc77b1c99de1a95a6a\"\n\n[[package]]\nname = \"structopt\"\nversion = \"0.3.26\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"0c6b5c64445ba8094a6ab0c3cd2ad323e07171012d9c98b0b15651daf1787a10\"\ndependencies = [\n \"clap\",\n \"lazy_static\",\n \"structopt-derive\",\n]\n\n[[package]]\nname = \"structopt-derive\"\nversion = \"0.4.18\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"dcb5ae327f9cc13b68763b5749770cb9e048a99bd9dfdfa58d0cf05d5f64afe0\"\ndependencies = [\n \"heck\",\n \"proc-macro-error\",\n \"proc-macro2\",\n \"quote\",\n \"syn\",\n]\n\n[[package]]\nname = \"syn\"\nversion = \"1.0.86\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8a65b3f4ffa0092e9887669db0eae07941f023991ab58ea44da8fe8e2d511c6b\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"unicode-xid\",\n]\n\n[[package]]\nname = \"termcolor\"\nversion = \"1.1.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"2dfed899f0eb03f32ee8c6a0aabdb8a7949659e3466561fc0adf54e26d88c5f4\"\ndependencies = [\n \"winapi-util\",\n]\n\n[[package]]\nname = \"terminal_size\"\nversion = \"0.1.17\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"633c1a546cee861a1a6d0dc69ebeca693bf4296661ba7852b9d21d159e0506df\"\ndependencies = [\n \"libc\",\n \"winapi\",\n]\n\n[[package]]\nname = \"texture-synthesis\"\nversion = \"0.8.2\"\ndependencies = [\n \"criterion\",\n \"crossbeam-utils\",\n \"image\",\n \"img_hash\",\n \"num_cpus\",\n \"rand\",\n \"rand_pcg\",\n \"rstar\",\n]\n\n[[package]]\nname = \"texture-synthesis-cli\"\nversion = \"0.8.3\"\ndependencies = [\n \"atty\",\n \"indicatif\",\n \"minifb\",\n \"structopt\",\n \"texture-synthesis\",\n]\n\n[[package]]\nname = \"textwrap\"\nversion = \"0.11.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d326610f408c7a4eb6f51c37c330e496b08506c9457c9d34287ecc38809fb060\"\ndependencies = [\n \"unicode-width\",\n]\n\n[[package]]\nname = \"tinytemplate\"\nversion = \"1.2.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"be4d6b5f19ff7664e8c98d03e2139cb510db9b0a60b55f8e8709b689d939b6bc\"\ndependencies = [\n \"serde\",\n \"serde_json\",\n]\n\n[[package]]\nname = \"unicode-segmentation\"\nversion = \"1.9.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"7e8820f5d777f6224dc4be3632222971ac30164d4a258d595640799554ebfd99\"\n\n[[package]]\nname = \"unicode-width\"\nversion = \"0.1.9\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3ed742d4ea2bd1176e236172c8429aaf54486e7ac098db29ffe6529e0ce50973\"\n\n[[package]]\nname = \"unicode-xid\"\nversion = \"0.2.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8ccb82d61f80a663efe1f787a51b16b5a51e3314d6ac365b08639f52387b33f3\"\n\n[[package]]\nname = \"vec_map\"\nversion = \"0.8.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f1bddf1187be692e79c5ffeab891132dfb0f236ed36a43c7ed39f1165ee20191\"\n\n[[package]]\nname = \"version-compare\"\nversion = \"0.1.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"fe88247b92c1df6b6de80ddc290f3976dbdf2f5f5d3fd049a9fb598c6dd5ca73\"\n\n[[package]]\nname = \"version_check\"\nversion = \"0.9.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"49874b5167b65d7193b8aba1567f5c7d93d001cafc34600cee003eda787e483f\"\n\n[[package]]\nname = \"walkdir\"\nversion = \"2.3.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"808cf2735cd4b6866113f648b791c6adc5714537bc222d9347bb203386ffda56\"\ndependencies = [\n \"same-file\",\n \"winapi\",\n \"winapi-util\",\n]\n\n[[package]]\nname = \"wasm-bindgen\"\nversion = \"0.2.79\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"25f1af7423d8588a3d840681122e72e6a24ddbcb3f0ec385cac0d12d24256c06\"\ndependencies = [\n \"cfg-if\",\n \"wasm-bindgen-macro\",\n]\n\n[[package]]\nname = \"wasm-bindgen-backend\"\nversion = \"0.2.79\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8b21c0df030f5a177f3cba22e9bc4322695ec43e7257d865302900290bcdedca\"\ndependencies = [\n \"bumpalo\",\n \"lazy_static\",\n \"log\",\n \"proc-macro2\",\n \"quote\",\n \"syn\",\n \"wasm-bindgen-shared\",\n]\n\n[[package]]\nname = \"wasm-bindgen-macro\"\nversion = \"0.2.79\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"2f4203d69e40a52ee523b2529a773d5ffc1dc0071801c87b3d270b471b80ed01\"\ndependencies = [\n \"quote\",\n \"wasm-bindgen-macro-support\",\n]\n\n[[package]]\nname = \"wasm-bindgen-macro-support\"\nversion = \"0.2.79\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"bfa8a30d46208db204854cadbb5d4baf5fcf8071ba5bf48190c3e59937962ebc\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn\",\n \"wasm-bindgen-backend\",\n \"wasm-bindgen-shared\",\n]\n\n[[package]]\nname = \"wasm-bindgen-shared\"\nversion = \"0.2.79\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3d958d035c4438e28c70e4321a2911302f10135ce78a9c7834c0cab4123d06a2\"\n\n[[package]]\nname = \"web-sys\"\nversion = \"0.3.56\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"c060b319f29dd25724f09a2ba1418f142f539b2be99fbf4d2d5a8f7330afb8eb\"\ndependencies = [\n \"js-sys\",\n \"wasm-bindgen\",\n]\n\n[[package]]\nname = \"which\"\nversion = \"3.1.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d011071ae14a2f6671d0b74080ae0cd8ebf3a6f8c9589a2cd45f23126fe29724\"\ndependencies = [\n \"libc\",\n]\n\n[[package]]\nname = \"winapi\"\nversion = \"0.3.9\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"5c839a674fcd7a98952e593242ea400abe93992746761e38641405d28b00f419\"\ndependencies = [\n \"winapi-i686-pc-windows-gnu\",\n \"winapi-x86_64-pc-windows-gnu\",\n]\n\n[[package]]\nname = \"winapi-i686-pc-windows-gnu\"\nversion = \"0.4.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ac3b87c63620426dd9b991e5ce0329eff545bccbbb34f3be09ff6fb6ab51b7b6\"\n\n[[package]]\nname = \"winapi-util\"\nversion = \"0.1.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"70ec6ce85bb158151cae5e5c87f95a8e97d2c0c4b001223f33a334e3ce5de178\"\ndependencies = [\n \"winapi\",\n]\n\n[[package]]\nname = \"winapi-x86_64-pc-windows-gnu\"\nversion = \"0.4.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"712e227841d057c1ee1cd2fb22fa7e5a5461ae8e48fa2ca79ec42cfc1931183f\"\n\n[[package]]\nname = \"x11-dl\"\nversion = \"2.19.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ea26926b4ce81a6f5d9d0f3a0bc401e5a37c6ae14a1bfaa8ff6099ca80038c59\"\ndependencies = [\n \"lazy_static\",\n \"libc\",\n \"pkg-config\",\n]\n\n[[package]]\nname = \"xkb\"\nversion = \"0.2.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"aec02bc5de902aa579f3d2f2c522edaf40fa42963cbaffe645b058ddcc68fdb2\"\ndependencies = [\n \"bitflags\",\n \"libc\",\n \"xkbcommon-sys\",\n]\n\n[[package]]\nname = \"xkbcommon-sys\"\nversion = \"0.7.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"59a001b79d45b0b4541c228a501177f2b35db976bf7ee3f7fce8fa2381554ab5\"\ndependencies = [\n \"bindgen\",\n \"libc\",\n \"pkg-config\",\n]\n"
        },
        {
          "name": "Cargo.toml",
          "type": "blob",
          "size": 0.2607421875,
          "content": "[workspace]\nmembers = [\n    \"lib\",\n    \"cli\",\n]\n\n[patch.crates-io]\n# https://github.com/abonander/img_hash/pull/30\n# * Updates to use image 0.22\n# * Fixes a bug with to/from_base64\nimg_hash = { git = \"https://github.com/EmbarkStudios/img_hash.git\", rev = \"c40da78\" }\n"
        },
        {
          "name": "LICENSE-APACHE",
          "type": "blob",
          "size": 10.595703125,
          "content": "                              Apache License\n                        Version 2.0, January 2004\n                     http://www.apache.org/licenses/\n\nTERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n1. Definitions.\n\n   \"License\" shall mean the terms and conditions for use, reproduction,\n   and distribution as defined by Sections 1 through 9 of this document.\n\n   \"Licensor\" shall mean the copyright owner or entity authorized by\n   the copyright owner that is granting the License.\n\n   \"Legal Entity\" shall mean the union of the acting entity and all\n   other entities that control, are controlled by, or are under common\n   control with that entity. For the purposes of this definition,\n   \"control\" means (i) the power, direct or indirect, to cause the\n   direction or management of such entity, whether by contract or\n   otherwise, or (ii) ownership of fifty percent (50%) or more of the\n   outstanding shares, or (iii) beneficial ownership of such entity.\n\n   \"You\" (or \"Your\") shall mean an individual or Legal Entity\n   exercising permissions granted by this License.\n\n   \"Source\" form shall mean the preferred form for making modifications,\n   including but not limited to software source code, documentation\n   source, and configuration files.\n\n   \"Object\" form shall mean any form resulting from mechanical\n   transformation or translation of a Source form, including but\n   not limited to compiled object code, generated documentation,\n   and conversions to other media types.\n\n   \"Work\" shall mean the work of authorship, whether in Source or\n   Object form, made available under the License, as indicated by a\n   copyright notice that is included in or attached to the work\n   (an example is provided in the Appendix below).\n\n   \"Derivative Works\" shall mean any work, whether in Source or Object\n   form, that is based on (or derived from) the Work and for which the\n   editorial revisions, annotations, elaborations, or other modifications\n   represent, as a whole, an original work of authorship. For the purposes\n   of this License, Derivative Works shall not include works that remain\n   separable from, or merely link (or bind by name) to the interfaces of,\n   the Work and Derivative Works thereof.\n\n   \"Contribution\" shall mean any work of authorship, including\n   the original version of the Work and any modifications or additions\n   to that Work or Derivative Works thereof, that is intentionally\n   submitted to Licensor for inclusion in the Work by the copyright owner\n   or by an individual or Legal Entity authorized to submit on behalf of\n   the copyright owner. For the purposes of this definition, \"submitted\"\n   means any form of electronic, verbal, or written communication sent\n   to the Licensor or its representatives, including but not limited to\n   communication on electronic mailing lists, source code control systems,\n   and issue tracking systems that are managed by, or on behalf of, the\n   Licensor for the purpose of discussing and improving the Work, but\n   excluding communication that is conspicuously marked or otherwise\n   designated in writing by the copyright owner as \"Not a Contribution.\"\n\n   \"Contributor\" shall mean Licensor and any individual or Legal Entity\n   on behalf of whom a Contribution has been received by Licensor and\n   subsequently incorporated within the Work.\n\n2. Grant of Copyright License. Subject to the terms and conditions of\n   this License, each Contributor hereby grants to You a perpetual,\n   worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n   copyright license to reproduce, prepare Derivative Works of,\n   publicly display, publicly perform, sublicense, and distribute the\n   Work and such Derivative Works in Source or Object form.\n\n3. Grant of Patent License. Subject to the terms and conditions of\n   this License, each Contributor hereby grants to You a perpetual,\n   worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n   (except as stated in this section) patent license to make, have made,\n   use, offer to sell, sell, import, and otherwise transfer the Work,\n   where such license applies only to those patent claims licensable\n   by such Contributor that are necessarily infringed by their\n   Contribution(s) alone or by combination of their Contribution(s)\n   with the Work to which such Contribution(s) was submitted. If You\n   institute patent litigation against any entity (including a\n   cross-claim or counterclaim in a lawsuit) alleging that the Work\n   or a Contribution incorporated within the Work constitutes direct\n   or contributory patent infringement, then any patent licenses\n   granted to You under this License for that Work shall terminate\n   as of the date such litigation is filed.\n\n4. Redistribution. You may reproduce and distribute copies of the\n   Work or Derivative Works thereof in any medium, with or without\n   modifications, and in Source or Object form, provided that You\n   meet the following conditions:\n\n   (a) You must give any other recipients of the Work or\n       Derivative Works a copy of this License; and\n\n   (b) You must cause any modified files to carry prominent notices\n       stating that You changed the files; and\n\n   (c) You must retain, in the Source form of any Derivative Works\n       that You distribute, all copyright, patent, trademark, and\n       attribution notices from the Source form of the Work,\n       excluding those notices that do not pertain to any part of\n       the Derivative Works; and\n\n   (d) If the Work includes a \"NOTICE\" text file as part of its\n       distribution, then any Derivative Works that You distribute must\n       include a readable copy of the attribution notices contained\n       within such NOTICE file, excluding those notices that do not\n       pertain to any part of the Derivative Works, in at least one\n       of the following places: within a NOTICE text file distributed\n       as part of the Derivative Works; within the Source form or\n       documentation, if provided along with the Derivative Works; or,\n       within a display generated by the Derivative Works, if and\n       wherever such third-party notices normally appear. The contents\n       of the NOTICE file are for informational purposes only and\n       do not modify the License. You may add Your own attribution\n       notices within Derivative Works that You distribute, alongside\n       or as an addendum to the NOTICE text from the Work, provided\n       that such additional attribution notices cannot be construed\n       as modifying the License.\n\n   You may add Your own copyright statement to Your modifications and\n   may provide additional or different license terms and conditions\n   for use, reproduction, or distribution of Your modifications, or\n   for any such Derivative Works as a whole, provided Your use,\n   reproduction, and distribution of the Work otherwise complies with\n   the conditions stated in this License.\n\n5. Submission of Contributions. Unless You explicitly state otherwise,\n   any Contribution intentionally submitted for inclusion in the Work\n   by You to the Licensor shall be under the terms and conditions of\n   this License, without any additional terms or conditions.\n   Notwithstanding the above, nothing herein shall supersede or modify\n   the terms of any separate license agreement you may have executed\n   with Licensor regarding such Contributions.\n\n6. Trademarks. This License does not grant permission to use the trade\n   names, trademarks, service marks, or product names of the Licensor,\n   except as required for reasonable and customary use in describing the\n   origin of the Work and reproducing the content of the NOTICE file.\n\n7. Disclaimer of Warranty. Unless required by applicable law or\n   agreed to in writing, Licensor provides the Work (and each\n   Contributor provides its Contributions) on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n   implied, including, without limitation, any warranties or conditions\n   of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n   PARTICULAR PURPOSE. You are solely responsible for determining the\n   appropriateness of using or redistributing the Work and assume any\n   risks associated with Your exercise of permissions under this License.\n\n8. Limitation of Liability. In no event and under no legal theory,\n   whether in tort (including negligence), contract, or otherwise,\n   unless required by applicable law (such as deliberate and grossly\n   negligent acts) or agreed to in writing, shall any Contributor be\n   liable to You for damages, including any direct, indirect, special,\n   incidental, or consequential damages of any character arising as a\n   result of this License or out of the use or inability to use the\n   Work (including but not limited to damages for loss of goodwill,\n   work stoppage, computer failure or malfunction, or any and all\n   other commercial damages or losses), even if such Contributor\n   has been advised of the possibility of such damages.\n\n9. Accepting Warranty or Additional Liability. While redistributing\n   the Work or Derivative Works thereof, You may choose to offer,\n   and charge a fee for, acceptance of support, warranty, indemnity,\n   or other liability obligations and/or rights consistent with this\n   License. However, in accepting such obligations, You may act only\n   on Your own behalf and on Your sole responsibility, not on behalf\n   of any other Contributor, and only if You agree to indemnify,\n   defend, and hold each Contributor harmless for any liability\n   incurred by, or claims asserted against, such Contributor by reason\n   of your accepting any such warranty or additional liability.\n\nEND OF TERMS AND CONDITIONS\n\nAPPENDIX: How to apply the Apache License to your work.\n\n   To apply the Apache License to your work, attach the following\n   boilerplate notice, with the fields enclosed by brackets \"[]\"\n   replaced with your own identifying information. (Don't include\n   the brackets!)  The text should be enclosed in the appropriate\n   comment syntax for the file format. We also recommend that a\n   file or class name and description of purpose be included on the\n   same \"printed page\" as the copyright notice for easier\n   identification within third-party archives.\n\nCopyright [yyyy] [name of copyright owner]\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n"
        },
        {
          "name": "LICENSE-MIT",
          "type": "blob",
          "size": 1.033203125,
          "content": "Copyright (c) 2019 Embark Studios\n\nPermission is hereby granted, free of charge, to any\nperson obtaining a copy of this software and associated\ndocumentation files (the \"Software\"), to deal in the\nSoftware without restriction, including without\nlimitation the rights to use, copy, modify, merge,\npublish, distribute, sublicense, and/or sell copies of\nthe Software, and to permit persons to whom the Software\nis furnished to do so, subject to the following\nconditions:\n\nThe above copyright notice and this permission notice\nshall be included in all copies or substantial portions\nof the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF\nANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED\nTO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A\nPARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT\nSHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\nOF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR\nIN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\nDEALINGS IN THE SOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 18.51171875,
          "content": "<div align=\"center\">\n\n# `🎨 texture-synthesis`\n\n[![Embark](https://img.shields.io/badge/embark-open%20source-blueviolet.svg)](http://embark.games)\n[![Embark](https://img.shields.io/badge/discord-ark-%237289da.svg?logo=discord)](https://discord.gg/dAuKfZS)\n[![Crates.io](https://img.shields.io/crates/v/texture-synthesis.svg)](https://crates.io/crates/texture-synthesis)\n[![Docs](https://docs.rs/texture-synthesis/badge.svg)](https://docs.rs/texture-synthesis)\n[![dependency status](https://deps.rs/repo/github/EmbarkStudios/texture-synthesis/status.svg)](https://deps.rs/repo/github/EmbarkStudios/texture-synthesis)\n[![Build Status](https://github.com/EmbarkStudios/texture-synthesis/workflows/CI/badge.svg)](https://github.com/EmbarkStudios/texture-synthesis/actions?workflow=CI)\n\nA light Rust API for _Multiresolution Stochastic Texture Synthesis_ [1], a non-parametric example-based algorithm for image generation.\n\nThe repo also includes multiple code examples to get you started (along with test images), and you can find a compiled binary with a command line interface under the release tab.\n\nAlso see our talk [_More Like This, Please! Texture Synthesis and Remixing from a Single Example_](https://youtu.be/fMbK7PYQux4) which explains this technique and the background more in-depth:\n\n[![Video thumbnail](imgs/docs/video-thumbnail.jpg)](https://www.youtube.com/watch?v=fMbK7PYQux4&t=6m57s)\n\n</div>\n\n## Maintenance note\n\nWe at Embark are not actively using or developing these crates and would be open to transferring them to a maintainer or maintainers that would be more active. See [#166](https://github.com/EmbarkStudios/texture-synthesis/issues/166).\n\n## Features and examples\n\n### 1. Single example generation\n\n![Imgur](https://i.imgur.com/CsZoSPS.jpg)\n\nGenerate similar-looking images from a single example.\n\n#### API - [01_single_example_synthesis](lib/examples/01_single_example_synthesis.rs)\n\n```rust\nuse texture_synthesis as ts;\n\nfn main() -> Result<(), ts::Error> {\n    //create a new session\n    let texsynth = ts::Session::builder()\n        //load a single example image\n        .add_example(&\"imgs/1.jpg\")\n        .build()?;\n\n    //generate an image\n    let generated = texsynth.run(None);\n\n    //save the image to the disk\n    generated.save(\"out/01.jpg\")\n}\n```\n\n#### CLI\n\n`cargo run --release -- --out out/01.jpg generate imgs/1.jpg`\n\nYou should get the following result with the images provided in this repo:\n\n<img src=\"https://i.imgur.com/8p6nVYl.jpg\" width=\"600\" height=\"364\">\n\n### 2. Multi example generation\n\n![Imgur](https://i.imgur.com/rYaae2w.jpg)\n\nWe can also provide multiple example images and the algorithm will \"remix\" them into a new image.\n\n#### API - [02_multi_example_synthesis](lib/examples/02_multi_example_synthesis.rs)\n\n```rust\nuse texture_synthesis as ts;\n\nfn main() -> Result<(), ts::Error> {\n    // create a new session\n    let texsynth = ts::Session::builder()\n        // load multiple example image\n        .add_examples(&[\n            &\"imgs/multiexample/1.jpg\",\n            &\"imgs/multiexample/2.jpg\",\n            &\"imgs/multiexample/3.jpg\",\n            &\"imgs/multiexample/4.jpg\",\n        ])\n        // we can ensure all of them come with same size\n        // that is however optional, the generator doesnt care whether all images are same sizes\n        // however, if you have guides or other additional maps, those have to be same size(s) as corresponding example(s)\n        .resize_input(ts::Dims {\n            width: 300,\n            height: 300,\n        })\n        // randomly initialize first 10 pixels\n        .random_init(10)\n        .seed(211)\n        .build()?;\n\n    // generate an image\n    let generated = texsynth.run(None);\n\n    // save the image to the disk\n    generated.save(\"out/02.jpg\")?;\n\n    //save debug information to see \"remixing\" borders of different examples in map_id.jpg\n    //different colors represent information coming from different maps\n    generated.save_debug(\"out/\")\n}\n```\n\n#### CLI\n\n`cargo run --release -- --rand-init 10 --seed 211 --in-size 300x300 -o out/02.png --debug-out-dir out generate imgs/multiexample/1.jpg imgs/multiexample/2.jpg imgs/multiexample/3.jpg imgs/multiexample/4.jpg`\n\nYou should get the following result with the images provided in this repo:\n\n<img src=\"https://i.imgur.com/tbz5d57.jpg\" width=\"600\" height=\"364\">\n\n### 3. Guided Synthesis\n\n![Imgur](https://i.imgur.com/eAiNZBg.jpg)\n\nWe can also guide the generation by providing a transformation \"FROM\"-\"TO\" in a form of guide maps\n\n#### API - [03_guided_synthesis](lib/examples/03_guided_synthesis.rs)\n\n```rust\nuse texture_synthesis as ts;\n\nfn main() -> Result<(), ts::Error> {\n    let texsynth = ts::Session::builder()\n        // NOTE: it is important that example(s) and their corresponding guides have same size(s)\n        // you can ensure that by overwriting the input images sizes with .resize_input()\n        .add_example(ts::Example::builder(&\"imgs/2.jpg\").with_guide(&\"imgs/masks/2_example.jpg\"))\n        // load target \"heart\" shape that we would like the generated image to look like\n        // now the generator will take our target guide into account during synthesis\n        .load_target_guide(&\"imgs/masks/2_target.jpg\")\n        .build()?;\n\n    let generated = texsynth.run(None);\n\n    // save the image to the disk\n    generated.save(\"out/03.jpg\")\n}\n```\n\n#### CLI\n\n`cargo run --release -- -o out/03.png generate --target-guide imgs/masks/2_target.jpg --guides imgs/masks/2_example.jpg -- imgs/2.jpg`\n\n**NOTE:** Note the use of `--` to delimit the path to the example `imgs/2.jpg`, if you don't specify `--`, the path\nto the example will be used as another guide path and there won't be any examples.\n\nYou should get the following result with the images provided in this repo:\n\n<img src=\"https://i.imgur.com/arTCi2f.jpg\" width=\"600\" height=\"364\">\n\n### 4. Style Transfer\n\n![Imgur](https://i.imgur.com/o9UxFGO.jpg)\n\nTexture synthesis API supports auto-generation of example guide maps, which produces a style transfer-like effect.\n\n#### API - [04_style_transfer](lib/examples/04_style_transfer.rs)\n\n```rust\nuse texture_synthesis as ts;\n\nfn main() -> Result<(), ts::Error> {\n    let texsynth = ts::Session::builder()\n        // load example which will serve as our style, note you can have more than 1!\n        .add_examples(&[&\"imgs/multiexample/4.jpg\"])\n        // load target which will be the content\n        // with style transfer, we do not need to provide example guides\n        // they will be auto-generated if none were provided\n        .load_target_guide(&\"imgs/tom.jpg\")\n        .guide_alpha(0.8)\n        .build()?;\n\n    // generate an image that applies 'style' to \"tom.jpg\"\n    let generated = texsynth.run(None);\n\n    // save the result to the disk\n    generated.save(\"out/04.jpg\")\n}\n```\n\n#### CLI\n\n`cargo run --release -- --alpha 0.8 -o out/04.png transfer-style --style imgs/multiexample/4.jpg --guide imgs/tom.jpg`\n\nYou should get the following result with the images provided in this repo:\n\n<img src=\"https://i.imgur.com/1E7eDAb.jpg\" width=\"600\" height=\"364\">\n\n### 5. Inpaint\n\n![Imgur](https://i.imgur.com/FqvV651.jpg)\n\nWe can also fill-in missing information with inpaint. By changing the seed, we will get different version of the 'fillment'.\n\n#### API - [05_inpaint](lib/examples/05_inpaint.rs)\n\n```rust\nuse texture_synthesis as ts;\n\nfn main() -> Result<(), ts::Error> {\n    let texsynth = ts::Session::builder()\n        // let the generator know which part we would like to fill in\n        // if we had more examples, they would be additional information\n        // the generator could use to inpaint\n        .inpaint_example(\n            &\"imgs/masks/3_inpaint.jpg\",\n            // load a \"corrupted\" example with missing red information we would like to fill in\n            ts::Example::builder(&\"imgs/3.jpg\")\n                // we would also like to prevent sampling from \"corrupted\" red areas\n                // otherwise, generator will treat that those as valid areas it can copy from in the example,\n                // we could also use SampleMethod::Ignore to ignore the example altogether, but we\n                // would then need at least 1 other example image to actually source from\n                // example.set_sample_method(ts::SampleMethod::Ignore);\n                .set_sample_method(&\"imgs/masks/3_inpaint.jpg\"),\n            // Inpaint requires that inputs and outputs be the same size, so it's a required\n            // parameter that overrides both `resize_input` and `output_size`\n            ts::Dims::square(400),\n        )\n        // Ignored\n        .resize_input(ts::Dims::square(200))\n        // Ignored\n        .output_size(ts::Dims::square(100))\n        .build()?;\n\n    let generated = texsynth.run(None);\n\n    //save the result to the disk\n    generated.save(\"out/05.jpg\")\n}\n```\n\n#### CLI\n\nNote that the `--out-size` parameter determines the size for all inputs and outputs when using inpaint!\n\n`cargo run --release -- --out-size 400 --inpaint imgs/masks/3_inpaint.jpg -o out/05.png generate imgs/3.jpg`\n\nYou should get the following result with the images provided in this repo:\n\n<img src=\"https://i.imgur.com/WZm2HHL.jpg\" width=\"600\" height=\"364\">\n\n### 6. Inpaint Channel\n\n![bricks](imgs/bricks.png)\n\nInstead of using a separate image for our inpaint mask, we can instead obtain the information from a specific\nchannel. In this example, the alpha channel is a circle directly in the middle of the image.\n\n#### API - [06_inpaint_channel](lib/examples/06_inpaint_channel.rs)\n\n```rust\nuse texture_synthesis as ts;\n\nfn main() -> Result<(), ts::Error> {\n    let texsynth = ts::Session::builder()\n        // Let the generator know that it is using \n        .inpaint_example_channel(\n            ts::ChannelMask::A,\n            &\"imgs/bricks.png\",\n            ts::Dims::square(400),\n        )\n        .build()?;\n\n    let generated = texsynth.run(None);\n\n    //save the result to the disk\n    generated.save(\"out/06.jpg\")\n}\n```\n\n#### CLI\n\n`cargo run --release -- --inpaint-channel a -o out/06.png generate imgs/bricks.jpg`\n\nYou should get the following result with the images provided in this repo:\n\n<img src=\"https://imgur.com/7IuVN5K.jpg\" width=\"350\" height=\"350\">\n\n### 7. Tiling texture\n\n![](https://i.imgur.com/nFpCFzy.jpg)\n\nWe can make the generated image tile (meaning it will not have seams if you put multiple images together side-by-side). By invoking inpaint mode together with tiling, we can make an existing image tile.\n\n#### API - [07_tiling_texture](lib/examples/07_tiling_texture.rs)\n\n```rust\nuse texture_synthesis as ts;\n\nfn main() -> Result<(), ts::Error> {\n    // Let's start layering some of the \"verbs\" of texture synthesis\n    // if we just run tiling_mode(true) we will generate a completely new image from scratch (try it!)\n    // but what if we want to tile an existing image?\n    // we can use inpaint!\n\n    let texsynth = ts::Session::builder()\n        // load a mask that specifies borders of the image we can modify to make it tiling\n        .inpaint_example(\n            &\"imgs/masks/1_tile.jpg\",\n            ts::Example::new(&\"imgs/1.jpg\"),\n            ts::Dims::square(400),\n        )\n        //turn on tiling mode!\n        .tiling_mode(true)\n        .build()?;\n\n    let generated = texsynth.run(None);\n\n    generated.save(\"out/07.jpg\")\n}\n```\n\n#### CLI\n\n`cargo run --release -- --inpaint imgs/masks/1_tile.jpg --out-size 400 --tiling -o out/07.bmp generate imgs/1.jpg`\n\nYou should get the following result with the images provided in this repo:\n\n<img src=\"https://i.imgur.com/foSlREz.jpg\" width=\"600\" height=\"364\">\n\n### 8. Repeat texture synthesis transform on a new image\n\n![](https://i.imgur.com/WEf6iir.jpg)\n\nWe can re-apply the coordinate transformation performed by texture synthesis onto a new image.\n\n#### API - [08_repeat_transform](lib/examples/08_repeat_transform.rs)\n\n```rust\nuse texture_synthesis as ts;\n\nfn main() -> Result<(), ts::Error> {\n    // create a new session\n    let texsynth = ts::Session::builder()\n        //load a single example image\n        .add_example(&\"imgs/1.jpg\")\n        .build()?;\n\n    // generate an image\n    let generated = texsynth.run(None);\n\n    // now we can apply the same transformation of the generated image\n    // onto a new image (which can be used to ensure 1-1 mapping between multiple images)\n    // NOTE: it is important to provide same number of input images as the \n    // otherwise, there will be coordinates mismatch\n    let repeat_transform_img = generated\n        .get_coordinate_transform()\n        .apply(&[\"imgs/1_bw.jpg\"])?;\n\n    // save the image to the disk\n    // 08 and 08_repeated images should match perfectly\n    repeat_transform_img.save(\"out/08_repeated.jpg\").unwrap();\n    generated.save(\"out/08.jpg\")\n}\n```\n\n#### CLI\n\n1. First, we need to create a transform that can be reused\n\nThe notable bit here is the `--save-transform out/multi.xform` which creates the\nfile that can be used to generate new outputs with.\n\n`cargo run --release -- --rand-init 10 --seed 211 --in-size 300x300 -o\nout/02.png generate --save-transform out/multi.xform imgs/multiexample/1.jpg imgs/multiexample/2.jpg imgs/multiexample/3.jpg\nimgs/multiexample/4.jpg`\n\n2. Next, we use the `repeat` subcommand to repeat transform with different\ninputs\n\nThe important bits here are the use of the `repeat` subcommand instead of\n`generate`, and `--transform out/multi.xform` which tells what transform to\napply to the inputs. The only restriction is that the number of images you\nspecify must match the original number of examples **exactly**. If the input\nimages have different dimensions than the example images, they will be\nautomatically resized for you.\n\n`cargo run --release -- -o out/02-repeated.png repeat --transform\nout/multi.xform imgs/multiexample/1.jpg imgs/multiexample/2.jpg\nimgs/multiexample/4.jpg imgs/multiexample/3.jpg`\n\nAlso note that the normal parameters that are used with `generate` don't apply\nto the `repeat` subcommand and will be ignored.\n\n### 9. Sample masks\n\nSample masks allow you to specify how an example image is sampled during generation.\n\n#### API - [09_sample_masks](lib/examples/09_sample_masks.rs)\n\n```rust\nuse texture_synthesis as ts;\n\nfn main() -> Result<(), ts::Error> {\n    let session = ts::Session::builder()\n        .add_example(\n            ts::Example::builder(&\"imgs/4.png\").set_sample_method(ts::SampleMethod::Ignore),\n        )\n        .add_example(ts::Example::builder(&\"imgs/5.png\").set_sample_method(ts::SampleMethod::All))\n        .seed(211)\n        .output_size(ts::Dims::square(200))\n        .build()?;\n\n    // generate an image\n    let generated = session.run(None);\n\n    // save the image to the disk\n    generated.save(\"out/09.png\")\n}\n```\n\n#### CLI\n\n`cargo run --release -- --seed 211 --out-size 200 --sample-masks IGNORE ALL --out 09_sample_masks.png generate imgs/4.png imgs/5.png`\n\nYou should get the following result with the images provided in this repo:\n\n<img src=\"https://imgur.com/EqW3rkN.png\" width=\"200\" height=\"200\">\n\n### 10. Combining texture synthesis 'verbs'\n\nWe can also combine multiple modes together. For example, multi-example guided synthesis:\n\n![](https://i.imgur.com/By64UXG.jpg)\n\nOr chaining multiple stages of generation together:\n\n![](https://i.imgur.com/FzZW3sl.jpg)\n\nFor more use cases and examples, please refer to the presentation [\"More Like This, Please! Texture Synthesis and Remixing from a Single Example\"](https://youtu.be/fMbK7PYQux4)\n\n### Additional CLI functionality\n\nSome functionality is only exposed through the CLI and not built into the library.\n\n#### `flip-and-rotate`\n\nThis subcommand takes each example and performs flip and rotation transformations to it to generate additional example inputs for generation. This subcommand doesn't support target or example guides.\n\nExample: `cargo run --release -- -o out/output.png flip-and-rotate imgs/1.jpg`\n\n## Command line binary\n\n* [Download the binary](https://github.com/EmbarkStudios/texture-synthesis/releases) for your OS.\n* **Or** Install it from source.\n  * [Install Rust](https://www.rust-lang.org/tools/install) - The minimum required version is `1.37.0`\n  * [Clone this repo](https://help.github.com/en/articles/cloning-a-repository)\n  * In a terminal `cd` to the directory you cloned this repository into\n  * Run `cargo install --path=cli`\n  * **Or** if you wish to see the texture as it is being synthesized `cargo install --path=cli --features=\"progress\"`\n* Open a terminal\n* Navigate to the directory where you downloaded the binary, if you didn't just `cargo install` it\n* Run `texture_synthesis --help` to get a list of all of the options and commands you can run\n* Refer to the examples section in this readme for examples of running the binary\n\n## Notes\n\n* By default, generating output will use all of your logical cores\n* When using multiple threads for generation, the output image is not guaranteed to be deterministic with the same inputs. To have 100% determinism, you must use a thread count of one, which can by done via\n  * CLI - `texture-synthesis --threads 1`\n  * API - `SessionBuilder::max_thread_count(1)`\n\n## Limitations\n\n* Struggles with complex semantics beyond pixel color (unless you guide it)\n* Not great with regular textures (seams can become obvious)\n* Cannot infer new information from existing information (only operates on what’s already there)\n* Designed for single exemplars or very small datasets (unlike Deep Learning based approaches)\n\n## Additional Dependencies\n\nIf you're compiling for Linux, you'll need to have `libxkbcommon` development libraries installed. For ubuntu this is `libxkbcommon-x11-dev`.\n\n## Links/references\n\n[1] [Opara & Stachowiak] [\"More Like This, Please! Texture Synthesis and Remixing from a Single Example\"](https://youtu.be/fMbK7PYQux4)\n\n[2] [Harrison] Image Texture Tools\n\n[3] [Ashikhmin] Synthesizing Natural Textures\n\n[4] [Efros & Leung] Texture Synthesis by Non-parametric Sampling\n\n[5] [Wey & Levoy] Fast Texture Synthesis using Tree-structured Vector Quantization\n\n[6] [De Bonet] Multiresolution Sampling Procedure for Analysis and Synthesis of Texture Images\n\n[7] All the test images in this repo are from [Unsplash](https://unsplash.com/)\n\n## Contributing\n\n[![Contributor Covenant](https://img.shields.io/badge/contributor%20covenant-v1.4-ff69b4.svg)](../CODE_OF_CONDUCT.md)\n\nWe welcome community contributions to this project.\n\nPlease read our [Contributor Guide](CONTRIBUTING.md) for more information on how to get started.\n\n## License\n\nLicensed under either of\n\n* Apache License, Version 2.0, ([LICENSE-APACHE](LICENSE-APACHE) or <http://www.apache.org/licenses/LICENSE-2.0>)\n* MIT license ([LICENSE-MIT](LICENSE-MIT) or <http://opensource.org/licenses/MIT>)\n\nat your option.\n\n### Contribution\n\nUnless you explicitly state otherwise, any contribution intentionally submitted for inclusion in the work by you, as defined in the Apache-2.0 license, shall be dual licensed as above, without any additional terms or conditions.\n"
        },
        {
          "name": "about.toml",
          "type": "blob",
          "size": 0.119140625,
          "content": "accepted = [\n    \"Apache-2.0\",\n    \"BSD-2-Clause\",\n    \"BSD-3-Clause\",\n    \"CC0-1.0\",\n    \"ISC\",\n    \"MIT\",\n    \"Zlib\",\n]\n"
        },
        {
          "name": "cli",
          "type": "tree",
          "content": null
        },
        {
          "name": "deny.toml",
          "type": "blob",
          "size": 1.2978515625,
          "content": "targets = [\n    { triple = \"x86_64-unknown-linux-gnu\" },\n    { triple = \"x86_64-unknown-linux-musl\" },\n    { triple = \"x86_64-apple-darwin\" },\n    { triple = \"x86_64-pc-windows-msvc\" },\n]\n\n[advisories]\nunmaintained = \"deny\"\nignore = [\n    \"RUSTSEC-2022-0004\",\n    \"RUSTSEC-2021-0127\",\n]\n\n[bans]\nmultiple-versions = \"allow\"\ndeny = [\n    # color-backtrace is nice but brings in too many dependencies and that are often outdated, so not worth it for us.\n    { name = \"color-backtrace\" },\n\n    # dirs crate has a lot of dependencies and there are better alternatives\n    { name = \"dirs\" },\n    { name = \"dirs-sys\" },\n\n    # deprecated\n    { name = \"quickersort\" },\n\n    # term is not fully maintained, and termcolor is replacing it\n    { name = \"term\" },\n]\nskip = [\n]\n\n[licenses]\nunlicensed = \"deny\"\n# We want really high confidence when inferring licenses from text\nconfidence-threshold = 0.92\nallow = [\n    \"Apache-2.0\",\n    \"MIT\",\n]\nexceptions = [\n    { allow = [\"BSD-3-Clause\"], name = \"bindgen\" },\n    { allow = [\"ISC\"], name = \"libloading\" },\n    { allow = [\"Zlib\"], name = \"adler32\" },\n    { allow = [\"Zlib\"], name = \"bytemuck\" },\n    { allow = [\"WTFPL\"], name = \"xkbcommon-sys\" },\n    { allow = [\"WTFPL\"], name = \"xkb\" },\n]\n\n[sources]\nunknown-git = \"deny\"\nallow-git = [\n    \"https://github.com/EmbarkStudios/img_hash.git\",\n]\n"
        },
        {
          "name": "imgs",
          "type": "tree",
          "content": null
        },
        {
          "name": "lib",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}