{
  "metadata": {
    "timestamp": 1736709045237,
    "page": 147,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjE1MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "misprit7/computerraria",
      "stars": 3488,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.056640625,
          "content": ". !text !filter !merge !diff\n* !text !filter !merge !diff\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 2.7919921875,
          "content": "# Terraria world backups\n*.twld.bak\n*.wld.bak\n*.wld.bak2\n\n# Me being dumb\n--to\n\n# Docker secrets\ndocker/.env\n\n# Docker build artifact\ndocker/riscv_sim_RV32\n\n# Byte-compiled / optimized / DLL files\n__pycache__/\n*.py[cod]\n*$py.class\n\n# C extensions\n*.so\n\n# Distribution / packaging\n.Python\nbuild/\ndevelop-eggs/\ndist/\ndownloads/\neggs/\n.eggs/\nlib/\nlib64/\nparts/\nsdist/\nvar/\nwheels/\nshare/python-wheels/\n*.egg-info/\n.installed.cfg\n*.egg\nMANIFEST\n\n# PyInstaller\n#  Usually these files are written by a python script from a template\n#  before PyInstaller builds the exe, so as to inject date/other infos into it.\n*.manifest\n*.spec\n\n# Installer logs\npip-log.txt\npip-delete-this-directory.txt\n\n# Unit test / coverage reports\nhtmlcov/\n.tox/\n.nox/\n.coverage\n.coverage.*\n.cache\nnosetests.xml\ncoverage.xml\n*.cover\n*.py,cover\n.hypothesis/\n.pytest_cache/\ncover/\n\n# Translations\n*.mo\n*.pot\n\n# Django stuff:\n*.log\nlocal_settings.py\ndb.sqlite3\ndb.sqlite3-journal\n\n# Flask stuff:\ninstance/\n.webassets-cache\n\n# Scrapy stuff:\n.scrapy\n\n# Sphinx documentation\ndocs/_build/\n\n# PyBuilder\n.pybuilder/\ntarget/\n\n# Jupyter Notebook\n.ipynb_checkpoints\n\n# IPython\nprofile_default/\nipython_config.py\n\n# pyenv\n#   For a library or package, you might want to ignore these files since the code is\n#   intended to run in multiple environments; otherwise, check them in:\n# .python-version\n\n# pipenv\n#   According to pypa/pipenv#598, it is recommended to include Pipfile.lock in version control.\n#   However, in case of collaboration, if having platform-specific dependencies or dependencies\n#   having no cross-platform support, pipenv may install dependencies that don't work, or not\n#   install all needed dependencies.\n#Pipfile.lock\n\n# poetry\n#   Similar to Pipfile.lock, it is generally recommended to include poetry.lock in version control.\n#   This is especially recommended for binary packages to ensure reproducibility, and is more\n#   commonly ignored for libraries.\n#   https://python-poetry.org/docs/basic-usage/#commit-your-poetrylock-file-to-version-control\n#poetry.lock\n\n# pdm\n#   Similar to Pipfile.lock, it is generally recommended to include pdm.lock in version control.\n#pdm.lock\n#   pdm stores project-wide configurations in .pdm.toml, but it is recommended to not include it\n#   in version control.\n#   https://pdm.fming.dev/#use-with-ide\n.pdm.toml\n\n# PEP 582; used by e.g. github.com/David-OConnor/pyflow and github.com/pdm-project/pdm\n__pypackages__/\n\n# Celery stuff\ncelerybeat-schedule\ncelerybeat.pid\n\n# SageMath parsed files\n*.sage.py\n\n# Environments\n.env\n.venv\n# env/\nvenv/\nENV/\nenv.bak/\nvenv.bak/\n\n# Spyder project settings\n.spyderproject\n.spyproject\n\n# Rope project settings\n.ropeproject\n\n# mkdocs documentation\n/site\n\n# mypy\n.mypy_cache/\n.dmypy.json\ndmypy.json\n\n# Pyre type checker\n.pyre/\n\n# pytype static type analyzer\n.pytype/\n\n# Cython debug symbols\ncython_debug/\n\n"
        },
        {
          "name": ".gitmodules",
          "type": "blob",
          "size": 0.1240234375,
          "content": "[submodule \"test/riscv-arch-test\"]\n\tpath = test/riscv-arch-test\n\turl = https://github.com/misprit7/riscv-arch-test-low-mem.git\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.046875,
          "content": "MIT License\n\nCopyright (c) 2023 Xander Naumenko\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 7.1796875,
          "content": "<h1 align=\"center\">\n  <picture><img src=\"./doc/img/logo.png\" height=\"400\"/></picture>\n  <br />\n  Computerraria\n</h1>\n<h2 align=\"center\">\n  A fully compliant RISC-V computer inside Terraria\n</h2>\n<h2 align=\"center\">\n  Video explanation: https://youtu.be/zXPiqk0-zDY\n</h2>\n\n<div align=\"center\">\n  <a href=https://github.com/misprit7/computerraria/actions/workflows/in-game-tests.yml>\n    <img src=https://github.com/misprit7/computerraria/actions/workflows/in-game-tests.yml/badge.svg/>\n  </a>\n  <a href=https://github.com/misprit7/computerraria/actions/workflows/rust-tests.yml>\n    <img src=https://github.com/misprit7/computerraria/actions/workflows/rust-tests.yml/badge.svg/>\n  </a>\n</div>\n\n# Pitch\n\nThere are two fundamentally competing forces when it comes to computer speed. The first, and most famous, is Moore's law, where physical transistor densities scale exponentially. The second is the inevitable growth of software bloat that runs on top of increasingly modern processors. There's a kind of equilibrium between these two competing beasts, ensuring that a user always manages to get at least a split second of mindfulness while staring at a frozen screen whenever attempting to open the latest app. \n\nThis project is an attempt to score a decisive rout in this ongoing battle in favor of the *programmer*. By emulating a complete rv32i instruction set inside the wiring system of [Terraria](https://www.terraria.org/), we push back speeds to the early 70s era, tossing the ball firmly back into the court of the silicon engineer without losing any software functionality. \n\n# Overview\n\n<div align=\"center\">\n  <a href=https://easyzoom.com/image/412333>\n    <img src=\"doc/img/poster-small.png\"/>\n    Click to see navigable image\n  </a>\n</div>\n\nDespite what the pitch may lead one to believe the goal of this project is to maximize the compliance and processing ability of the in game cpu. This is only possible with the help of an accelerator mod, which maintains full compatibility with the vanilla wiring system but reimplements it in a much more efficient manner:\n\n[WireHead](https://github.com/misprit7/WireHead) - A wiring accelerator and headless control mod\n\nWith this installed, the current specs of the computer are as follows: \n\n- Clock speed: ~5kHz\n- Ram: 96kb\n- Instruction set: rv32i\n\nAs an example of what it can do, here is Pong, running purely on the in-game cpu (see [app/pong/src/main.rs](app/pong/src/main.rs) for implementation):\n\nhttps://user-images.githubusercontent.com/33139843/229342342-de4708e1-7467-4f99-834b-3d0fb28d0858.mp4\n\n# Setup\n\nNote that currently only Linux is fully supported, and only parts of this have been tested on Windows. However I've left some steps for anyone who wants to try getting Windows working, in theory using wsl it should be fairly straightforward and things should be identical.\n\n## Prerequisites\n\nFor a comprehensive list of everything that is needed to run all aspects of this project, see the [Dockerfile](docker/Dockerfile). However, to develop and run applications for the computer all you really need is a working Cargo/rustc installation, install it [here](https://www.rust-lang.org/tools/install) or through your package manager.\n\n## Setup Process\n\nNavigate to where you want to keep this project and clone it. Copy computer.wld to your tModLoader world path. Depending on your platform, this is:\n```\nWindows: Documents\\My Games\\Terraria\\ModLoader\\Worlds\nLinux: ~/.local/share/Terraria/tModLoader/Worlds\n```\nOn Linux you can automate copying back and forth like this with the `copy-world.sh` script with either the `--to` (copy to world folder) or `--from` (copy from world folder) flags.\n\nNext, navigate to the mod sources folder and clone [WireHead](https://github.com/misprit7/WireHead):\n```\n#Windows\ncd \"%userprofile%\\Documents\\My Games\\Terraria\\ModLoader\\ModSources\" && git clone https://github.com/misprit7/WireHead.git\n\n#Linux\ncd \"~/.local/share/Terraria/tModLoader/ModSources\" && git clone https://github.com/misprit7/WireHead.git\n```\n\nPrepare the binary you wish to run. For example for pong compile the rust app and copy the binary to a more convenient path:\n\n```\ncd <path to computerraria>/app/pong\ncargo rb\n./copy-bin.sh /tmp/pong.txt\n```\n\nStart [tModLoader](https://store.steampowered.com/app/1281930/tModLoader/), and from the main menu go to Workshop->Develop and click on the Build button next to WireHead. For convenience I'd also recommend installing Cheat Sheet and HERO's Mod from the Download Mods section of the workshop if you haven't already. Then open the new world you copied earlier in game. In game type:\n```\n/bin write /tmp/pong.txt\n```\n\nCurrently the NPCs that run the CPU clock are too far away to spawn immediately, this is a bug and should be fixed soon. As a workaround, go through the blue teleporter shown below, fly upwards a bit, come back down and go back through the same teleporter.\n\n![Control Panel](doc/img/control-panel.png)\n\nAfter this workaround is done, press the first two of the three levers on the far right to start the program. Go through the orange teleporter to arrive at the screen area. Pong should be running and is controllable by the controller beneath the screen (use HERO's Mod's camera lock to see the screen and controls at the same time).\n\n![Pong](doc/img/pong-still.png)\n\n## Docker\n\nFor advanced CI/headless usage you can use the docker image:\n\n[Docker Image](https://hub.docker.com/r/misprit7/computerraria)\n\nIf you already have docker installed this can be pulled with\n\n```bash\ndocker pull misprit7/computerraria\n```\n\nYou can then start the container with\n\n```bash\ndocker run -it misprit7/computerraria\n```\n\nThis image already has all tooling installed so you should be able to build everything. \n\n# File Structure\n\nThe major relevant parts of the project are as follows:\n\n```\n.\n├── app/\n│   ├── tdriver/\n│   └── template/\n├── computer.wld\n├── doc/\n├── docker/\n├── test/\n└── tinterface/\n    ├── bin/\n    └── tinterface/\n```\n\n`app/`\n\nHigher level applications to be run on the computer, not including compliance tests. Currently all in rust but could also easily be in C. \n\n`app/tdriver/`\n\nDriver API for interacting cpu from rust, mostly extremely low level startup code and graphics drivers.\n\n`app/template/`\n\nTemplate for new rust projects that implements minimal tdriver\n\n`computer.wld`\n\nThe actual world file. This is technically a binary file, but given the context of the project it acts much more like source code given that it is edited manually and compresses extremely well. This generally isn't edited in place, it's copied back and forth to the user installation with [copy-world.sh](copy-world.sh). \n\n`doc/`\n\nDocumentation/notes for the project\n\n`docker/`\n\nFiles required to build docker image for CI. \n\n`test/`\n\nAll automated tests written for the CPU. These are mostly handled through [riscof](https://github.com/riscv-software-src/riscof). This consists of both the computerraria plugin as well as a reference plugin ([sail_cSim](test/sail_cSim/)) to compare the results to. \n\n`tinterface/`\n\nInterfaces programmatically with running Terraria instance. This consists of both a python module as well as a command line wrapper to upload binaries, start execution and manipulate other fine grain controls without needing a GUI. \n\n\n"
        },
        {
          "name": "app",
          "type": "tree",
          "content": null
        },
        {
          "name": "computer.wld",
          "type": "blob",
          "size": 64755.0615234375,
          "content": ""
        },
        {
          "name": "computerraria.twld",
          "type": "blob",
          "size": 417.7041015625,
          "content": null
        },
        {
          "name": "computerraria.wld",
          "type": "blob",
          "size": 77083.5068359375,
          "content": ""
        },
        {
          "name": "copy-world.sh",
          "type": "blob",
          "size": 1.0693359375,
          "content": "#!/bin/sh\n\n#################################################\n# Copies world to/from game files\n#################################################\n\nTARGET_DIR=\"$HOME/.local/share/Terraria/tModLoader/Worlds\"\nTO_FLAG=0\nFROM_FLAG=0\nMNT_FLAG=0\n\nfor arg in \"$@\"\ndo\n    case $arg in\n        -t|--to)\n            TO_FLAG=1\n            ;;\n        -f|--from)\n            FROM_FLAG=1\n            ;;\n        --mnt)\n            MNT_FLAG=1\n            ;;\n        *)\n            echo \"Invalid option: $arg\"\n            echo \"Supply either --to or --from and optionally --mnt to specify directory\"\n            exit 1\n            ;;\n    esac\ndone\n\nif [ \"$MNT_FLAG\" -eq 1 ]; then\n    TARGET_DIR=\"/mnt/d/computerraria\"\nfi\n\nif [ \"$TO_FLAG\" -eq 1 ]; then\n    cp $(dirname \"$0\")/computerraria.wld $TARGET_DIR\n    cp $(dirname \"$0\")/computerraria.twld $TARGET_DIR\nelif [ \"$FROM_FLAG\" -eq 1 ]; then\n    cp \"$TARGET_DIR/computerraria.wld\" $(dirname \"$0\")\n    cp \"$TARGET_DIR/computerraria.twld\" $(dirname \"$0\")\nelse\n    echo \"Supply either --to or --from to copy either to or from the Terraria world files\"\n    exit 1\nfi\n"
        },
        {
          "name": "doc",
          "type": "tree",
          "content": null
        },
        {
          "name": "docker",
          "type": "tree",
          "content": null
        },
        {
          "name": "run-tests.sh",
          "type": "blob",
          "size": 0.3642578125,
          "content": "#!/bin/sh\n\n#################################################\n# Runs all riscof tests\n#################################################\n\ncd test\n# Why all this junk isn't specified in the config is weird, hate having to make little wrapper scripts like this\nriscof run --config=config.ini --suite=riscv-arch-test/riscv-test-suite/ --env=riscv-arch-test/riscv-test-suite/env\n"
        },
        {
          "name": "test",
          "type": "tree",
          "content": null
        },
        {
          "name": "tinterface",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}