{
  "metadata": {
    "timestamp": 1736709195397,
    "page": 454,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjQ2MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "ivanceras/sauron",
      "stars": 2000,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.025390625,
          "content": "target/\n**/*.rs.bk\n*.lock\n"
        },
        {
          "name": ".gitlab-ci.yml",
          "type": "blob",
          "size": 0.9072265625,
          "content": "stages:\n  - build\n\nrust-nightly:\n  stage: build\n  image: rustlang/rust:nightly\n  before_script:\n      - apt update\n      - apt install -y firefox-esr\n      - curl --retry 5 -LO https://github.com/mozilla/geckodriver/releases/download/v0.24.0/geckodriver-v0.24.0-linux64.tar.gz\n      - tar xf geckodriver-v0.24.0-linux64.tar.gz\n      - cargo install wasm-pack\n  script:\n    - cargo build --all\n    - cargo test --all  --all-features\n    - GECKODRIVER=$(pwd)/geckodriver ./test.sh\n\nrust-stable:\n  stage: build\n  image: rust:latest\n  before_script:\n      - apt update\n      - apt install -y firefox-esr\n      - curl --retry 5 -LO https://github.com/mozilla/geckodriver/releases/download/v0.24.0/geckodriver-v0.24.0-linux64.tar.gz\n      - tar xf geckodriver-v0.24.0-linux64.tar.gz\n      - cargo install wasm-pack\n  script:\n    - cargo build --all\n    - cargo test --all  --all-features\n    - GECKODRIVER=$(pwd)/geckodriver ./test.sh\n"
        },
        {
          "name": ".travis.yml",
          "type": "blob",
          "size": 1.302734375,
          "content": "\nlanguage: rust\n\naddons:\n  firefox: latest\n  chrome: stable\n  firefox-geckodriver: latest\n\nrust:\n    # Use nightly for now since wasm-bindgen is still only compiling in nightly\n    - stable\n    - beta\n    - nightly\n\n\nintstall:\n    # Install chromedriver.\n    - curl --retry 5 -LO https://chromedriver.storage.googleapis.com/2.41/chromedriver_linux64.zip\n    - unzip chromedriver_linux64.zip\n    # Install geckodriver\n    - curl --retry 5 -LO https://github.com/mozilla/geckodriver/releases/download/v0.27.0/geckodriver-v0.27.0-linux64.tar.gz\n    - tar xf geckodriver-v0.27.0-linux64.tar.gz\n    - cargo install wasm-pack\n\nscript:\n    - GECKODRIVER=$(pwd)/geckodriver ./test.sh\n    - CHROMEDRIVER=$(pwd)/chromedriver ./test.sh\n\nafter_success: |\n    wget https://github.com/SimonKagstrom/kcov/archive/master.tar.gz &&\n    tar xzf master.tar.gz &&\n    cd kcov-master &&\n    mkdir build &&\n    cd build &&\n    cmake .. &&\n    make &&\n    make install DESTDIR=../../kcov-build &&\n    cd ../.. &&\n    rm -rf kcov-master &&\n    for file in target/debug/sauron-*; do [ -x \"${file}\" ] || continue; mkdir -p \"target/cov/$(basename $file)\"; ./kcov-build/usr/local/bin/kcov --exclude-pattern=/.cargo,/usr/lib --verify \"target/cov/$(basename $file)\" \"$file\"; done &&\n    bash <(curl -s https://codecov.io/bash) &&\n    echo \"Uploaded code coverage\"\n"
        },
        {
          "name": "Cargo.toml",
          "type": "blob",
          "size": 2.7734375,
          "content": "[package]\nname = \"sauron\"\nversion = \"0.61.9\"\nauthors = [ \"Jovansonlee Cesar <ivanceras@gmail.com>\" ]\nlicense = \"MIT\"\ndescription = \"A versatile web framework and library for building client-side and/or server-side web applications\"\nrepository = \"https://github.com/ivanceras/sauron\"\ndocumentation = \"https://docs.rs/sauron\"\nreadme = \"README.md\"\nkeywords = [\"html\", \"dom\", \"web\"]\nedition = \"2021\"\n\n[badges]\nmaintenance = { status = \"actively-developed\" }\n\n[dependencies]\nsauron-core = { version = \"0.61\", path = \"crates/core\" }\nsauron-macro = { version = \"0.61\", path = \"crates/macro\", optional = true }\nsauron-html-parser = { version = \"0.61\", path = \"crates/html-parser\", optional = true }\n\n[features]\ndefault = [\"with-dom\", \"with-node-macro\", \"with-interning\", \"with-jss\"]\nwith-dom = [\"sauron-core/with-dom\"]\nwith-lookup = [\"sauron-core/with-lookup\"]\nwith-ric = [\"sauron-core/with-ric\"]\nwith-raf = [\"sauron-core/with-raf\"]\nwith-interning = [\"sauron-core/with-interning\"]\nwith-jss = [\"sauron-macro\", \"with-lookup\"] #enable use of jss (css style in json format)\n\n# shows telemetry such as duration it took to update the dom\nwith-measure = [\"sauron-core/with-measure\"]\n# log debug patches\nwith-debug = [\"sauron-core/with-debug\"]\nlog-patches = [\"with-debug\", \"sauron-core/log-patches\"]\ntest-fixtures = [\"sauron-core/test-fixtures\"] #include the test-fixtures for updating the program with the supplied vdom\nwith-trace = [\"sauron-core/with-trace\"]\n\n# lets you use node! macro to write html like code in the view\nwith-node-macro = [\"sauron-macro\"]\nhtml-parser = [\"sauron-html-parser\"]\nuse-skipdiff = [\"sauron-core/use-skipdiff\"]\n\n\n[dev-dependencies]\nconsole_error_panic_hook = \"0.1.7\"\nconsole_log = \"1.0\"\nlog = \"0.4\"\nwasm-bindgen-test = \"0.3\"\nwasm-bindgen-futures = \"0.4.31\"\nregex = \"1\"\nsauron-html-parser = { path = \"crates/html-parser\" }\nsauron = { path = \".\", features = [\"test-fixtures\", \"html-parser\", \"log-patches\"] }\ndoc-comment = \"0.3.3\"\n\n[dev-dependencies.web-sys]\nversion = \"0.3\"\nfeatures = [\n    \"DomTokenList\",\n    \"HtmlInputElement\",\n    \"Event\",\n    \"MouseEvent\",\n    \"InputEvent\",\n    \"console\",\n    \"Performance\",\n]\n\n\n[workspace]\nmembers = [\n    \"crates/*\",\n    \"examples/*\",\n]\n\n# progressive-rendering example has its own workspace\nexclude = [\n    \"examples/custom-element\",\n    \"examples/progressive-rendering\",\n]\n\n\n\n[patch.crates-io]\n#mt-dom = { git = \"https://github.com/ivanceras/mt-dom.git\", branch = \"master\" }\n#mt-dom = { path = \"../mt-dom\" }\n#jss = { git = \"https://github.com/ivanceras/jss.git\", branch = \"master\" }\n#jss = { path = \"../jss\" }\n\n[dev-dependencies.criterion]\nversion = \"0.5.1\"\ndefault-features = false\n\n[package.metadata.docs.rs]\nall-features = true\ndefault-target = \"wasm32-unknown-unknown\"\n\n\n[[bench]]\nname = \"nodes_benchmark\"\nharness = false\n\n[[bench]]\nname = \"bench_view_performance\"\nharness = false\n"
        },
        {
          "name": "Changelog.md",
          "type": "blob",
          "size": 49.9208984375,
          "content": "# Changelog\n\n## 0.61.8\n- Fix: setting values in common html attributes should be enable by default\n\n## 0.61.7\n- remove support for `custom_element` as its functionality is superseeded with `stateful_component`\n- remove parent in DomNode as to simplify code\n\n## 0.61.6\n- remove template and use-template feature gate as it is not adding performance enhancements\n\n## 0.61.5\n- rename `safe_html` to `raw_html`\n    - decode html entities before parsing and converting into node\n- optimize dispatching of mount event only to element that has attached event listener to on_mount\n- make `stateful_component` patches work on its own dom tree\n\n## 0.61.4\n- make `use-template` and `use-skipdiff` fail safe if the template and skipdiff is not used in the view\n- feat: feature gate `with-trace` for determining how much time is spent in section of making stateful component\n\n## 0.61.3 \n- more clippy lint fixes\n- improvements on the examples\n\n## 0.61.2\n- use `with-lookup` feature by default\n\n## 0.61.0\n- add template system, skip_diff\n- web_sys::Node is now wrapped with DomNode, the event listeners\n  is now managed from its containing DomNode, instead of from the Program.\n  when a DomNode is removed and goes out of scope, so does its associated event closures are dropped\n- `Cmd<Msg>` can now be mapped into `Effects<Msg,..>` and vice versa\n- The `mt-dom` crate is now part of `core` in the `vdom` module. This change is necessary\n   to improve code coherence and simplicity, lesser number of generic types has to be passed arround.\n- remove `inner_html` as a function to set html via html attributes.\n    - This cause breakage in tracking the DOMTree as new nodes could be inserted dynamically without the runtime knowing it.\n- Rename `safe_html` to `symbol` as its usage is intended for html entities such as `&nbsp;` `&quote;` etc.\n- A `safe_html` function is added and use `html-parser` to parse dynamic html and convert it into a safe dom-tree.\n\n\n## 0.60.7\n- feat: add selectionchange event and document_event_listener\n\n## 0.60.6\n- feat: Add a new crate html-parser for dynamically parsing html content\n\n## 0.60.5\n-  feat: add rgba css function\n\n## 0.60.4\n- fix: check only for non-matching property when the property name is not quoted.\n  - quoted property name in `style!` macro will be an escape hatch for few cases such as the use of prefixes, ie: \"-webkit, -ms, -moz\"\n- add `Program::clear_mount` as alias to `clear_append_to_mount`, add `clear_mount_to_body`\n\n## 0.60.3\n- return `Option` for style property lookup instead of panicking.\n- Make `style!` provides a helpful error when property names used is not found in the lookup.\n\n## 0.60.2\n- improve the Input event\n    - InputEvent now call on `value()` to get the value\n- update to mt-dom 0.59.1 to force crate user to use this version, since it has a fix of critical bug\n- feat: allow annotation to style properties\n    - add test for annotated styles\n\n## 0.60.1\n- feat: add lazy_view_if function to lazily evaluate the node function only when the flag is true\n- fix: web_component, use Program clone for attribute_change\n- fix: Program has to be wrap with ManuallyDrop so as not to drop it at the start function\n- feat: **breaking** all references to Program is now Weak and will go out of scope, and so an AppLoader is needed\n    - Fixed with using `ManuallyDrop`.\n- fix: test, use update_dom_with_vdom instead of just setting the current vdom using set_current_dom function\n- fix: remove set_current_dom function which has a different functionality with app_context.set_current_dom\n- use mutable methods in app_context\n- docs: add a Note on why the function update_dom_with_vdom is not unified into update_dom\n- refactor: use mutable function when applicable\n- fix: progressive rendering example\n- refactor: make dispatching messages and updating dom mutable\n- feat: include strong_count and weak_count to the measurements\n- add a test-case for issue#75\n\n## 0.60.0\n- fix: remove the auto-implementation fo `Container+WebComponent` as it conflicts with other usage\n- feat: add utility method to the component to create a consistent namespace class names and selector for building view and css nicely\n- remove the style attribute function, since it conflicts with the name of the style! macro which is more useful than the removed one\n- fix: comparison of Value for string variants to compare stringly types\n- feat: make use of `classes_flag` in `todomvc` for more pleasant syntax\n- feat: **breaking** migrated `jss` from independent `jss` crate back to sauron\n- feat: improvement on the ergonomics of writing web_components\n- feat: improvement on registration of web component, as this eliminates the need to attaching component to the Window object\n\n## 0.59.2\n- refactor: remove the `use-snippets` feature, since we are  using `js_sys::Function`\n\n## 0.59.1\n- feat: add `as_str` method for returning the str value of an attribute\n\n## 0.59.0\n- refactor: **breaking** change the methods which extracts inner values to not panic but instead return `Option`\n    - `unwrap_text` -> `as_text`\n    - `unwrap_safe_html` -> `as_safe_html`\n- refactor: remove the use of unnecessary map_callback, since it can be done using map_msg since Fn pointer can just be clone\n- refactor: use the clear_children function\n- patching a document fragment other than in root node should not happen\n- refactor: convert the shell scripts to justfile\n- refactor: use raf for doing patches, use ric for anything else\n- feat: add a request_idle_callback to make ric work in safari\n- feat: expose a reference to the underlying field in Program's app_context\n- fix: move `data` attribute out of the commons, since it is commonly used in local variables\n- fix: `web_component` init method\n- feat: add a conversion from Task to Effects\n- fix: to the new version of sauron, improve code for interactive example\n- feat: **breaking** `Effects` now wraps `Task` which could now accept ready MSG or an Future MSG\n    - **breaking** change Component signature which returns Effects on the init function\n    - **breaking** change Application signature which returns Cmd on the init function, to match that of  the Component\n- fix clippy, no need to collect iterators\n- fix: add `'static` constraint to `XMSG` in components\n- refactor: such that borrows end at line, which open for a more flexible data structure for the `AppContext`\n- refactor: rename `dispatch_multiple` to `push_msgs` in `AppContext`\n- refactor: use update_app as function name for updating the app\n- refactor: simplify the batching of `pending_cmds` code\n- inject the css before mounting the App to the dom\n- feat: create `AppContext` module which moves app, current_vdom,  pending_msgs, pending_cmds, which pertains to the state to the Application's model\n\n## 0.58.0\n- use the latest published version of mt-dom\n- refactor: move `fragment` into `mt-dom,` so it can be diff there, therefore will still be performant when in used in Application view\n- fix: **breaking** expose `delay` function, in replacement to `async_delay`\n- fix: issue with `fragment` node and `node_list` when used in the top-level view of the app\n- refactor: **breaking** swap names for `custom_element` and `web_component` since it is more concise to swap the two\n\n## 0.57.5\n- update to `mt-dom` `0.57.0`\n- feat: add method as_text to NodeTrait for extracting optional str from a leaf text node\n- remove too many logging in `define_custom_element`\n- `custom_element` should include the `web_component` macro\n- don't lock third-party dependencies to latest version, otherwise, it will disallow other dependent crate to use older version of the mentioned third-party dep causing failure to select version of dependencies\n- chore: remove unnecessary logging\n- fix: `custom_element` Modifier arg\n- feat: improvement on `Modifier` and `Measurement` to contain the name as tag\n- refactor: improvement on the data structure of `ActiveClosure`\n- improve code for attaching `node_closures`\n\n## 0.57.4\n\n- make `init` and `stylsheet` an optional method for `Application` and `Component` trait.\n- update mt-dom version to 0.56.1\n\n## 0.57.3\n- update to mt-dom `0.56.0`, which contains bug fixes when swapping rows with keyed elements\n- new PatchVariant in `mt-dom` which has `MoveBeforeNode` and `MoveAfterNode` for moving existing keyed elements\n\n## 0.57.2\n- allow users to surround braces on closure in html events. ie: `on_click={|_|..}`\n\n## 0.57.1\n- update dependencies\n\n## 0.57.0\n - docs: add warnings on the usage of Fragment\n - docs: put quote on words that has underscore on it\n - refactor: migrate to `rstml` since `syn-rsx` is not maintained anymore\n    - also migrate to `syn` `2.0`.\n - feat: **breaking** change the data type for the old_value and new_value in the attribute_changed function, since everything is a string in the attribute value\n - feat: include the `custom_tag` in the `web_component` macro\n - refactor: restructure the declaration of html and svg tag such that the module is wrapping the declaration instead of inside the macro code\n\n## 0.56.0\n- fix: changes in `mt-dom` 0.55.0 where the method names are shorter and concise\n- feat: **breaking** add a new static method for Application, and Components: `stylesheet` which returns a static stylesheet, make `style` optional\n- feat: linking of `define_custom_element` behind `use-snippets` module\n- feat: add an alternative way of making registration of custom element work in sauron using wasm_bindgen and it's limitations\n- feat: put the `custom_element` functionality behind `custom_element` feature gate\n- feat: put `regsiter_custom_element` behind a feature gate\n- refactor: simplify the resize task to not use Rc and RefCell\n- restructure exports and prelude\n- fix: refine and sanitize the export of modules in sauron\n- refactor: improve and unify `add_event_listener`\n- fix: remove use of `HtmlMenuItemElement` since it is already deprecated\n- call `update_dom` after calling on the program `connected_callback`\n- refactor: improve the function signature for `attribute_changed`\n- refactor: **breaking** use snake_case for svg tags and attributes to fit rust conventions\n- fix: use a different generic type to the external in `Effect::localize` function, this way, the user don't have to unzip the Msg\n- fix: remove the use of wee_alloc\n- refactor: move some `window` functions into `util` module\n- refactor: remove the use `Closure::forget` in adding event listeners, and store the closures into the Program as `node_closures`\n- refactor: put the creating of closure in place rather than calling create_closure_wrap\n- use `Closure::new` instead of `Closure::wrap` since they have the same effect, only thinner and less complex\n- refactor: modularize rif,raf,and timeout into their corresponding modules, now returns the Handle which contains the closure\n- refactor: rename active_closures to node_closures since it is only storing the closures used in node elements\n- rename `created_node` to `dom_node` module\n- refactor: remove unnecessary wrapper `CreatedNode`\n- move `apply_dom_patch` to `dom_patch` module, but still under `Program` implementation\n- append the `active_closures` directly to the `Program` instead of storing it in `CreatedNode`\n- join styles with blank instead of new_line since the new version of jss has added the necessary lines\n- style now returns `Vec<String>` to make it ergonomic when dealing with Component that has multiple styles\n- feature: add a conversion of `Window::on_resize` to , a variant which returns a `Task<MSG>`, instead of `Cmd`\n- **breaking** change the return type of init in `Application` to `Vec<Cmd>`\n- feature: add utility function to inject style to document head\n- feature: add `Task`\n\n## 0.55.1\n- fix: call `dispatch_mount_event` to other patching variants, other than just the `Append` variant\n\n## 0.55.0\n- **breaking** rename crate `sauron-node-macro` into `sauron-macro`, since it contains some other macro other than `node!` ie: `#[web_component]`\n- organized the with-dom feature\n- remove `Dispatch` trait, and just pass the `Program` around, since `Program` is the only implementation of `Dispatch` trait.\n- use a more concise method names in `Http` module\n- refactor: put allow(unused) directive to some feature gated function\n- remove focused_node, to slim down and simplify the framework code\n- remove on_enter event since it can easily be done in the user application\n- feature: add a new attribute macro: #[web_component] to easily derive a WebComponent\n- add getting InputEvent from HtmlElement which is used in CustomElement\n- add `Widget` trait, which is a simpler version of `Component`.\n- move `CustomElement` to `custom_element` module\n- add `map_external` method to Effects\n- remove unused trait method `attributes_for_mount` in `CustomElement` trait\n\n## 0.54.1\n- bump up version such that `sauron-node-macro` is using `sauron-core` v0.54.1 as well.\n\n## 0.54.0\n- fix: make clippy happy, use bump up version of mt-dom\n- fix to suit changes in mt-dom where replacement uses multiple nodes, fix tests\n- add composed to InputEvent, modify the custom_element example to demonstrate input event\n- call on `set_attribute`, in order to trigger attribute_change value for special attributes such as `value`, `checked`, `open`, `disabled`  etc\n- fix: put debug logging behind feature patches\n- add improvement to MountEvent dispatching it as a native web event\n- refine the appending of child nodes and combine them into a function that calls the dispatch_mount event together upon appending\n- simplify the `register_custom_element` function, to just accept the 2 args instead of 3.\n    - add custom_tag function to CustomElement trait\n    - This includes the custom-tag and the CustomElement wrapper, and removes the never changing HTML as base class\n    - add improvements on custom_elements, auto-registering when used in function call to form a widget, attributes should also be a function inside the module\n    - move the register function as a static member of the WidgetCustomElement\n- add more util functions for asynchronous execution\n- use edition 2021 for the example projects\n\n## 0.53.0\n- **breaking**: fix glob imports conflict, remove prelude.\n    - the html tags and attributes should be explicity imported as well\n    - this is necessary since rust version 1.70 don't allow importing names that conflicts other names in the same glob, in the case of html and svg attributes, there are conflicting names such as: title, slot, data, style\n        old\n        ```rust\n        use sauron::prelude::*,\n        ```\n        new\n        ```rust\n        use sauron::{*, html::*, html::attributes::*, html::events::*}\n        ```\n        this is neccessary, since a lot of tags and attributes could be comming from html or svg, if you are working with svg elements\n        ```rust\n        use sauron::{*, svg::*, svg::attributes::*, html::events::*}\n        ```\n        if you are using both html and svg in the same module, you can glob imports the html, and explcitly specify the svg attribtues.\n        ```rust\n        use sauron::{*, html::*, html::attributes::*, html::events::*, svg::attributes::{xmlns, cx, cy, r, points, d}}\n        ```\n- fix: put the logging of dispatch time in measure and debug feature flag\n- feat: enable scroll related objects from web_sys\n- feat: convert on_focus and on_blur to use FocusEvent\n- refactor: make the request_animation_callback, request_idle_callback and async_delay more readable by unifying the code that was scattered into small little functions\n- feat: make the cache_elements readonly, not using refcell as there is no need to add the other elements\n- feat: add caching of created element for faster creation using clone_node\n- feat: add with-interning feature to make transfering faster from rust to js\n- cargo fmt using stable features with default values\n\n## 0.52.0\n- refactor: make visibility private on fields of program that is not needed to be accessible outside of the module\n- refactor: use `target_element` instead of `target_node` in `DomPatch`\n- refactor: make `DomPatch` use less repeated fields in all variants by making it use struct with `PatchVariant` as the enum\n- feat: Program api such as `replace_mount` and `append_to_mount` is now clearly defined with explcity use of enum for `MountAction` and `MounTarget`, rather than just boolean for `is_shadow` or `is_replace`.\n- fix: improve the lifecycle logic of custom elements\n- refactor: organize code in updating of dom\n- feat: expose `with-raf` as feature in sauron, which the dispatch function cal use `requestAnimationFrame` callback\n- feat: add support for `touch_event` in events module\n- feat: export `wasm_bindgen_futures` from sauron\n- fix: add optional deadline to applying of msgs and patches functions\n- fix: add code for ensuring the state of the Program is correct\n- refactor: make `dispatch_dom_changes` a sync function since it does not need to be async, add feature gates to function calls\n- refactor: make `pending_cmd` as state in the program, which can be handled later on\n- refactor: create a `request_idle_callback_with_deadline` in dom util, rename some functions, add early return when there is no pending patches, pending msgs\n- refactor: use `BTreeMap` and `BTreeSet` as alternative to `HashMap` and `HashSet` which seems to work faster than the later\n- fix: remove the Already borrowed error when setting the root_node, refactor the DomPatch apply method into the Program\n- refactor: make conversion of attribute value from various types idiomatic\n- feat: expose the `with-ric` (requestIdleCallback) feature in sauron\n- refactor: merge DomUpdater into Program to simplify and unify all the central logic of the APP lifecycle in one place\n- refactor: remove apply_patches and distribute the functions into CreatedNode and DomUpdater\n- fix: polish the open attribute and the toggle event used in `<details>` element\n- feat: improvement to the processing of `pending_patches`, remove the throttling feature\n- feat: add DomPatch as an intermediate Patch with no lifetime reference for processing the patches in a controlled way to minimize sluggishness of the app\n- refactor: mutate the active_closures in place rather than re-assigning it.\n- fix: remove commented out examples\n- feat: split the `dispatch_inner` method into 2 stages methods: the app updates and the dom updates\n- feat: add `skip_criteria`, an improvement on the skip attribute\n- refactor: make `batch_msg` method accepts IntoIterator rathern than vec\n\n## 0.51.0\n - breaking: remove the use of sauron-component-macro\n - fix: use mt-dom 0.21.0\n - feat: add a function to check whether a tag is a custom-element, add append_child to Container trait\n - feat: improve the implementation for macro for implementing components\n - fix: remove #[wasm_bindgen] anotation for register, since it will conflict with other functions for wasm\n - feat: expose jss_ns_pretty\n - feat: add node_list\n - feature: add Cmd::async function to create cmd from Future types\n - refactor: more simplification to Http module by using async/await with JsFutures from wasm-bindgen-futures\n - refactor: use wasm-bindgen-future, async and await instead of Closures\n\n## 0.50.6\n- feat: add utility function `async_delay` for putting delay inside of async functions\n\n## 0.50.5\n- feat: remove the feature `with-request-animation-frame` as it is now always used by default\n\n## 0.50.4\n- fix: the passed root_node must point to the original root_node, as there is a possibility that the top level node will be replaced with a new top-level view node\n- refactor: reuse the call to other function in creating request animation call\n\n## 0.50.3\n- Add `key!` macro which combines `key` and `format!` macro to easily format key attribute value.\n\n## 0.50.2\n- Add `Progam::dispatch_with_delay` to dispatch an MSG at a later time.\n\n## 0.50.1\n- bump `mt-dom` to 0.20.0\n\n## 0.50.0\n- **BREAKING** make the `Cmd::append` accept `&mut self` and modify it rather then return a Self\n- Add support for defining custom elements a.k.a web components\n    - [DateTime widget example](https://github.com/ivanceras/sauron/tree/master/examples/custom-element)\n- Add support for creating fragment in a node\nThe `node!` macro can now be used to return a view which uses multiple top level tags.\nExample:\n```rust\nnode!{\n    <h1>\"Header\"</h1>\n    <main>\"The content goes here\"</main>\n}\n```\n\n## 0.49.3\n- support setting the attribute value for;\n    - HtmlLiElement\n    - HtmlMeterElement\n    - HtmlMenuItemElement\n    - HtmlProgressElement\n    - HtmlParamElement\n    - HtmlOutputElement\n    - HtmlDataElement\n\n## 0.49.2\n- fix: a bug, closures for the elements created in InsertBeforeNode and InsertAfterNode variant for Patch is not added to the active closures\n\n## 0.49.1\n- Fix the ordering of inserting nodes when applying patch InsertAfterNode.\n\n## 0.49.0\n- fix assertion in apply_patch for InsertNode variants\n\n## 0.48.0\n- Remove the branch for patching the variant of Patch ReplaceLeaf since it is superseeded by ReplaceNode variant.\n- Fix all the test including the wasm test this time\n\n## 0.47.0\n- Use TreePath for finding and traversing nodes.\n\n## 0.46.1\n- bump minor last release was using sauron-core 0.45 for sauron-node-macro\n\n## 0.46.0\n- change in mt-dom TreePath where root node is now at [], while first element in the dom is at [0].\n\n## 0.45.2\n- change in Patch variants InsertNode -> InsertBeforeNode, added InsertAfterNode.\n\n## 0.45.1\n- limit the export for `units` so as not to conflict with html tags and attributes\n\n## 0.45.0\n- The Leaf node of vdom formerly integerated in mt-dom::Node is now defined in the crate.\n- `Value` and `units` is now from `jss` crate.\n    - `Value` enum don't have bytes anymore since it is not useful in dom context\n\n## 0.44.0\n- Refactor on apply_patches due to changes in mt-dom (collapsing the Patch struct)\n\n## 0.43.11\n-  Correctly set value on HtmlSelectElement and HtmlOptionElement\n\n## 0.43.10\n- Add `unzip` and `extend` method to `Effects`\n\n## 0.43.9\n- Add support for `<select>` element in converting to event into `InputEvent`.\n- Add example using `custom-elements`.\n\n## 0.43.8\n - Add support for `disabled` attribute to be explicitly called on their corresponding DOM html element functions to explicitly set the boolean value.\n     - This allows the users to use `disabled=true` when using the `node!` macro with the intuitive expected result as opposed to the default value in html which only checks\n        for the presence of the attribute.\n - Improve the `Render::render_to_string` function to skip attributes: `open`, `checked`, `disabled` when the value evaluates to false as the mere presence of this attribute alone will\n    make the attribute the same as evaluated to true. We mitigate this counter-intuitive behavior of the browser such that we use the 2 states of the boolean value, where `true` will\n    make the attribute be in effect, while `false` skip the attribute and/or render the element attribute in the opposite state.\n - Improve `Cmd` accumulation in dispatch inner using functional code\n\n## 0.43.7\n- Add support for details/disclosure element and its open attribute\n- Add toggle event.\n\n## 0.43.6\n - Add `Dispatch::dispatch_multiple` to dispatch multiple MSG at once, which add performance benefit of not having the compute the view in between updates,\n    but only when all of the MSG has been dispatched\n\n## 0.43.5\n- Change `Cmd` such that it uses `FnOnce`, which doesn't require `MSG` to be a `Clone`.\n\n## 0.43.4\n- Remove `log::trace` on `with-measure` feature flag, it is not needed anymore since the details is already passed in the Measurements object\n\n## 0.43.3\n- Call only measurements only when `with-measure` feature flag is enabled.\n- Use of `IntoIterator` for attributes and children of the html nodes, which allow the usage of either array or vec for a more cleaner view\n    - Improve readability on examples to array of attributes and children nodes for better readability\n- Move effects to be under `dom` module instead of under `component` module\n- increase the sleep timer to give time for crates to reflect the dep\n\n\n## 0.43.2\n- Use comment for the `view_if` instead of a blank span\n- Improve code for handling TextNodes, hacks to create comment as separator is now removed\n- Use thread_local for caching Window, Document and NodeId counter\n- Add modifier for Effects\n- Make the `on_scroll` work for window as well\n- Rename Generics PMSG (Parent Msg) to XMSG (External Msg)\n\n## 0.43.1\n- Fix handling of units with multiple value\n\n## 0.43.0\n- Add `Effects::append_local` to easily chain local Msg into existing effects.\n- Remove anything that has to do with `node_idx` since `mt-dom` don't use it anymore\n    - We are now using `TreePath` which provides a better way to traverse the DOM tree.\n- Include the total number of patches applied on the `Measurements`.\n- Cleanup `Cmd` by moving the accessory fields into a `Modifier` struct\n- Update to jss 0.4\n- **breaking** Rename `Effects{follow_ups, effects}` to a more descriptive name `Effects{local, external}`\n- **breaking** Remove `Cmd::map_msg` and `from_effects` as their functionality is moved into `Effects`.\n- **breaking** Rename `Effects::follow_through` to `Effects::localize` since it maps the `external` fields into msg that is compatible with local messages and merge them.\n- Change the `node_to_find` function to use `BTreeMap` so that their arrangement will be ordered/consistent, hence easier to debug\n- Improve debugging InsertNode where it can NOT find the parent node\n- Modify the `style` method in `Application` such that it returns a `String` rather than `Vec<String>`.\n       `Component`, `Container` and `View` can now have `style` method\n- Add `maybe_attr` utility helper function in attributes\n- Add `Cmd::append` method to easily add more cmd to existing cmd\n\n## 0.42.0\n- shorten the `data-vdom-id` that we used as marker in the DOM element\n- Improve calling on emit, The input don't need to implement Into, so we can call it right away\n- Use Callback in Cmd\n    - Repurpose the old Callback for Listener so it can contain additional fields such as TypeId of the arguments and return type of the Fn it contains,\n        A new generic Callback with only Fn as the content has now a new place in dom::callback::Callback module, this would be used for lightweight operations such as callbacks in the components\n    - Rename the type alias of Callback<Event,MSG> to Listener<MSG>\n    - Rename generics in Callback<EVENT,MSG> to Callback<IN,OUT> for a more generic application\n    - Wire the Callback into the parent Component Msg\n    - Remove unused function Cmd::from_msg\n    - Add method in Cmd to accept Msg and Vec<Msg> intended to be used for deriving an Application Cmd from Component Msg\n    - Add implementation to convert Cmd from Effects, rename Cmd::map_effects to Cmd::map_follow_ups\n    - Add batch_map function to Cmd to simultaneously map Msg list and create a Cmd\n- Rename Effects::map_follow_ups to Effects::map_msg and Cmd::map_follow_ups to Cmd::map_msg, we already know that it is mapping the follow_up and the effects is already in the same type as the component that is containing it\n    - Use effects in window-tab-rows example\n    - Use effects in custom_widget example\n    - Move effects out into its own module, Add functions for mapping effects easily\n    - Add Effects struct to contain follow_up msg and effect Msg intended for the parent component\n    - Component is just a widget which returns Effects with follow_ups, but no effects\n- Improve the `Component` system, Add 2 new types of `Components`: `Container`, and `View`\n    - Component and Widget are merged using Component as the final name, Component can now return both effects and followups\n    - map follow_up updates from components inside a component\n- **breaking** Modify and expose `request_animation_frame` to execute a rust closure,\n    and create the `request_animation_frame_for_closure` which accepts `wasm_bindgen::Closure` used internally in `Program`\n    - **breaking** Remove unused function `execute_in_request_in_animation_frame`\n- Modify `Application::init` such that program is not included in the arg, to simplfiy and make it cleaner\n- Remove `node_idx` in render, it was for debugging only\n- Add a way to convert mouse_event into Event\n- Remove outdated comment\n- Simplify the batching the follow up Msg\n\n## 0.41.1\n- Add utility functions in html attributes which manipulates classes with namespace\n\n## 0.41.0\n- **breaking** Move out `jss` module into a new crate and [repository](https://github.com/ivanceras/jss), as it has gotten bigger.\n    - This also make sauron stays slim to prevent it from collapsing from its own weight.\n- **breaking** Move `sauron-markdown` out to a new [repository](https://github.com/ivanceras/sauron-markdown), as it has gotten bigger.\n- Move `futuristi-ui` out of the examples and into a new [repository](https://github.com/ivanceras/futuristic-ui).\n- Add `init_with_program` function in `Component` for allowing components to have a way access to it's own executor.\n    - This is for enabling components have access to the program\n- Remove dependency `lazy_static` in favor of `once_cell`\n- **breaking** Move `sauron-parse` out of the repository to keep sauron being lean to prevent it from collapsing on its own weight.\n- **breaking** Rename `Component` to `Application`, use `Component` for actual components that can use subsequent updates.\n- Remove internal `style` macro in favor of `jss` crate\n- Modify the `Callback` such that there is lesser chance that node with different event will be recycled\n    - type_id of input arguments and output arguments of function is stored for future comparison on the diffing algorithm.\n    - Add a test to show node-recylcing bug\n- Move out `futuristic-ui` out of the examples, since it is a lot bigger to fit as an example. New [repo](https://github.com/ivanceras/futuristic-ui)\n- **breaking** `init` in `Application` not uses `&mut self` and has access to `Program`.\n    This allows the application to update its state upon initialization.\n\n## 0.40.0\n - Improve `sauron-node-macro` performance by resolving the values of `namespace` and `self_closing` tags at compile time, rather than at runtime.\n - Add plugin capability of `sauron-markdown` to easily hook user define functions such as code-highlighting.\n - Modify `Window::scroll_to_top` to return it as wrapped in `Cmd` to be used after an `update` call in a `Component`\n - Add `popstate` to `events` module.\n - Make `sauron::jss!` macro to create the css without the use of indents and new lines by default.\n    - This makes it easier to setup test as we don't have to deal with whitespace anymore.\n    - Added `sauron::jss_pretty!` variant to use nice indents and space on the generated css.\n - **breaking** Improve the ergonomic to `Http` api. It is now easier to receive and deserialize text response.\n - Add a code fence processor plugin for `sauron-markdown`. Developers can hook code to create a custom element out of code blocks in markdown parser.\n - Rename `Program::new_replace_mount` to `Program::replace_mount`.\n    - Rename `Program::new_append_to_mount` to `Program::append_to_mount`.\n    - `Program` is not optional anymore when passed to functions in modules such as `apply_patches`, `dom_updater` and `created_node`\n - Added `safe_html` to `Text` node, this indicated whether to render as text node or as `innerHTML` of its parent element.\n     - `ammonia` crate is used to sanitize the html text.\n - **breaking** Program agument is not optional anymore in module `apply_patches`, `dom_updater` and `created_node`.\n - Improve rustdoc on prominent functions and modules.\n - Add measurements function to Component for letting components know how much time is spent in each of major steps in dispatching and updating the DOM.\n    - Add a field `log_measurement` to `Cmd` which tells the `Program` wheter to log and call measurements.\n - Add performance optimization for `sauron-parse` crate lookup on `tag_namespace` and `self_closing_tags` by putting it in a once_cell Lazy HashSet\n - **breaking** Rename `html_element_sc` to `html_element_self_closing`.\n - **breaking** Remove the use of underscore_ to html/svg tags such as `type_`,etc and attributes which are also rust identifier to use the raw r#ident.\n    - This includes `type` `for` `async`.\n\n## 0.39.0\n- Modify `apply_patches` to use only `TreePath` where `PatchPath` is already removed in `mt-dom`\n\n## 0.38.0\n- Modify `apply_patches` to make use of `PatchPatch` and `TreePath` from `mt-dom` to efficiently\n    traverse and find the target element to be patched.\n\n## 0.37.0\n- Move Callback from `mt-dom` crate to here, since it is more relevant to `sauron` than `mt-dom`.\n    `map_callback` and `map_msg` is done using `trait` implementation to `mt-dom's` `Node`, `Element`, `Attribute`, and `AttValue`.\n- No longer `lib.rs` will be used to generate the readme. Make a separate document for each\n\n## 0.36.0\n- simplify the construction of attribute in node-macro by using `attr`\n- Revamp `Cmd` to contain flag `should_update_view` which instruct the `Program` to skip\n    updating the view.\n\n## 0.35.0\n- Fix svg not appearing in the client when used in node macro syntax\n- Expose `sauron-parse::parser` module in `sauron::parser`\n\n## 0.34.0\n- **breaking** unify the fail and success decoder into just text_reponse_decoder, it receives the status code together with the text body and header\n\n## 0.33.0\n- **breaking** overhaul on the `Http` api to allow users to manipulate response headers, and assign callback functions to errored request.\n- fix too aggressive assertion in `apply_patches` checking for matching tags.\n- implement `set_location_hash` to `Browser` api.\n- **breaking** dissolve `Browser` api functionalities into  `Window` api.\n- Fix behavior of checkboxes, it must be explicitly set_checked to false when checked attribute is removed\n\n## 0.32.6\n - implement `on_mount` event where virtual node (sauron::Node) can listen to when the element is materialized into an actual dom element.\n    The `MountEvent` that is passed on the argument function contains the `target_node` which is the equivalent created DOM node.\n - restructure the interactive examples\n## 0.32.5\n - improve implementation of markdown-parser\n    - Use `<p>` to wrap multiple top-level elements instead of `<div>` in sauron-markdown.\n    - use the semantic equivalent html tag, such as `<em>` and `<strong>`, instead of just `<span>` with a `class` attribute\n - fix parsing of self-closing tag for in `sauron-parse` crate.\n - Add special handling of `on_enter` event, input elements can now use `on_enter` event to listen to when the user presses the `Enter` key\n\n## 0.32.4\n - minor: put behind a feature-flag some trace/debugging code.\n\n## 0.32.3\n- put behind a feature flag functionalities which deals with `node_idx_lookup`\n\n## 0.32.2\n- Add `on_copy` and `on_paste` event.\n- modify `execute_in_request_animation_frame` to return the handle ( can be used for cancelling the execution )\n- Add special attributes `focus`, `skip` and `replace`\n    - If an element has a `focus(true)` attribute, it will always have a focus on each update.\n    - If an element has a `skip(true)` attribute, it will skip diffing of that node and assume no changes\n    - If an element has a `replace(true)` attribute, it will return a `ReplaceNode` patch replacing the matching old node skipping the diffing.\n        This will be useful, for parts in the view code where it always changes at every update, for diffing would just become an uncessary overhead.\n\n## 0.32.1\n- Fix `apply_text_patch` to include RemoveNode\n\n## 0.32.0\n- Added improvements on `node!` macro, now allowing you to use the exact attribute names for rust keywords.\n    before:\n    ```rust\n    node!(\n        <main>\n            <label for_=\"input1\">Input:</label>\n            <input id=\"input1\" type_=\"text\" />\n        </main>\n    )\n    ```\n    now:\n    ```rust\n    node!(\n        <main>\n            <label for=\"input1\">Input:</label>\n            <input id=\"input1\" type=\"text\" />\n        </main>\n    )\n    ```\n- simplify the algorithmn for `find_node_recursive`\n- Fix server side rendering of self closing tags html, such as `input`, `br`, `hr`\n- unify attribute manipulation in render and in dom_updater, the common code is in html::attributes module\n- Add node_idx attribute in render if `with-nodeidx` feature is enabled\n- Reexport `serde_json` in order for `jss` macro be able to use reexported `serde_json` from sauron crate\n- fix example: remove the use of workaround on attributes that are keywords in rust\n- Add `#[allow(unused_braces)]` inside node macro to prevent the compiler from making expressions in braces in html as unncessary\n\n## 0.31.2\n- Fix the `render` function where attributes of the same name not merged.\n- use the exported Style struct from html::attributes, to avoid namespace collision with 'style' attribute\n- Add Minimal SSR example\n- expose a `lite-markdown` feature from `sauron` which exclude the `sauron-parse` crate to minimize binary size\n- expose `empty_attr` in `html::attributes`\n    - this allows you to add a conditional attribute in building the view.\n    Example:\n      ```rust\n            img(vec![\n                    src(\"img/image.jpg\"),\n                    if let Some(img_title) = self.img_title {\n                       title(img_title.to_string())\n                    } else {\n                       empty_attr()\n                    }\n                ],\n                vec![]\n            )\n      ```\n- add `jss` module and utility functions which utilizes json to preprocess css styles.\n    - `jss_ns` allows you to add style to your components while prefixing the classnames with a namespace to prevent clashing\n        with classes from other components.\n        Check out the `futuristic-ui` [example](https://github.com/ivanceras/sauron/tree/master/examples/futuristic-ui/) for complete usage.\n\n## 0.31.0\n- (**breaking**) Improved `style!` macro by using json as the syntax\n- Added `jss!` macro which parses `json` and convert them to `css`\n- Invocation  the `init` method of `Component` will be done\n    after the `Component` has been mounted into the DOM.\n- Unified base code of `append_to_mount` and `replace_mount` in `DomUpdater`\n- Added `map_msg` function for mapping `DomUpdater` to a different `MSG`\n- Fix all the example project's start scripts and `index.html` load script to get rid of errors from webkit based browser\n    -  Modified scripts to use `--target web` and import module to fix problems in safari\n- Get rid of test_fixtures and move it to the test directory\n- use `span(vec![],vec![])` instead of `text(\"\")` in `view_if(bool,..)` when the\n    flag evaluates to false\n- Add support for `transitionend` and `animationend` event\n- Add initial support for `style` in `Component`\n- Remove the deprecated svg tag macro that should have been removed together with the html tag macro\n\n## 0.30.0\n- refactor `Cmd` to not use the `Callback`.\n    - remove the need for `MSG` and `PhantomData` in Cmd.\n- change the `no_request_animation_frame`feature flag to `with-request-animation-frame` to be additive and is enabled by default\n- change the `measure` feature flag to `with-measure`.\n- Introduce a `node!` macro syntax which allows users to write view code which resembles html syntax.\n- Restructure the project to have the code code of sauron in a crate `sauron-core`.\n    This paves a way to introduce modules which depends on the core functionality of sauron and then will be re-exported as part of the sauron package.\n    Example: `sauron-markdown`\n- Reexport `sauron_markdown` in `sauron`. can be used as `sauron::markdown`\n- dom internal: Remove only the event listener which match the event_name from the ActiveClosure\n\n## 0.29.0\n- Fix the todomvc with a new rewrite and storage support\n- Update the todomvc app using keyed elements\n- Fix set_checked when setting attributes for checkboxes, radio buttons\n- Implement code for InsertChildren patches since Patch is changed in `mt-dom`\n- Use the keyed-elements diffing in mt-dom, this will ensure that the elements with the callback will be matched with the same callback\n- TruncateChildren is replaced with RemoveChildren in mt-dom, this provide a more flexible patches\n- Add an example of server-side rendering using warp\n\n## 0.28.2\n- merge attributes of the same name first, before applying the attributes to the DOM element\n\n## 0.28.1\n- Adjusted for changes in mt-dom with performance improvements\n- remove merge_attribute functionality in Element.\n- MSG doesn't need to be clone, just use get_attributes instead of merge_attributes\n- A lot of performance improvement due to changes in mt-dom crate\n\n## 0.28.0\n- adjust sauron for changes in mt-dom where there are multiple values in one attribute\n\n## 0.27.0\n- change syntax of attribute events which uses `_` after the `on` ie: `on_click` instead of `onclick`\n- Make a special case for style than just a plain attribute\n- Use `mt-dom` crate as replacement to sauron_vdom. `mt-dom` is a very generic virtual-dom crate which doesn't put too much constraints\n     on the types of the member fields\n\n## 0.26.0\n- Change `to_pretty_string` to `render` with focus on writing to the common buffer.\n    - This is a performance improvement\n\n## 0.25.0\n- Add a function `Node.text` to return the string of the text element\n- Add a function `Node.eldest_child_text` to return the string of the only child of this element\n- Add a function `Node.get_children` to return children of a node\n- Add a utility function `mousemove` and `release` for MouseEvent\n- Remove the call to `stop_propagation` in the add_event_listener processor, since this is handled by the event_mapper.\n\n## 0.24.0\n- **Breaking** Add the tag in patches, to give clue to backend on how to handle special tags\n\t- This is used in gtk, since widgets in gtk doesn't follow a proper tree nesting as with html\n- **Breaking** Detach `markdown` module into a high-level crate (sauron-md)\n    - Detach `to_syntax` module into a high-level crate (sauron-syntax)\n    - Create `sauron-parse` crate which `sauron-md` and `sauron-syntax` depends on.\n- Add functionality for inner_html which optimizes the performance of client side apps\n- Add a functionality to hook url hashchange event in the browser\n\n## 0.23.0\n- move Cmd and Dispatch from sauron_vdom to sauron\n- Simplify the use Dispatch without the need for Rc\n\n\n## 0.22.2\n- Export `sauron_vdom::diff::diff_with_key`\n- Add function `take_callback` to consume attribute and get the callback\n\n## 0.22.1\n- Only expose html::events in prelude when 'with-dom' feature is enabled\n\n## 0.22.0\n- Make use of prelude to simpilfy imports in sauron\n- Add feature to parse html and convert it into sauron view syntax code.\n- Add link to [html2sauron](https://ivanceras.github.io/html2sauron/) tool in the docs\n- Refactor Attribute key to use generic type, Attribute key was previously using `&'static str`, It got changed to a generic type, which allows us to create attribute with key other than `&'static str` such as `String` or strongly typed `enums`.\n- Simplify the indent utility function\n- Improve the svg_clock example to make the subsecond update to the subsecond by ticking at every 20ms\n- Add cargo deny configuration\n\n## 0.21.1\n - Add a help function classes which joins an array of string into a space class\n - Use criterion in benchmarks\n - Add data-viewer as an example\n\n## 0.21.0\n - add Window as a global object to let components easily attached events to the window\n - add style! macro for a nicer html style attribute syntax\n - **Breaking Change** remove tag style from the macro export, as it conflicts with the style attribute macro, which is more common\n - include mousemove in the supported event type\n - implement creating an attribute that has namespace, such as xlink:href in embededd svg image\n - fix error in svg_graph example\n\n## 0.20.3\n - expose `onclick_with`, `onclick_stop_propagation`, `onclick_prevent_default`, `onclick_prevent_all` which allows developers\n   control on the behavior of the event of a DOM element.\n\n## 0.20.2\n - Enable doubleclick event\n - improve and modularize shell scripts\n - Fix errors in the todomvc benchmark\n - Explicitly set the value of element by calling the set_value function since just setting the attribute value is not enough\n - Enable calling to event.prevent_default() to allow both oninput and keypress event play nicely together, as used in the todomvc example\n - Add svg_graph example\n\n## 0.20.1\n - bumped up to see logo in docs.rs\n\n## 0.20.0\n - Add macro based syntax to provide a cleaner syntax in writing the view:\n    ## Old syntax:\n    ```rust\n    fn view(&self) -> Node<Msg> {\n        div(\n            vec![class(\"some-class\"), id(\"some-id\"), attr(\"data-id\", 1)],\n            vec![\n                input(\n                    vec![\n                        class(\"client\"),\n                        r#type(\"button\"),\n                        value(\"Click me!\"),\n                        onclick(|_| {\n                            trace!(\"Button is clicked\");\n                            Msg::Click\n                        }),\n                    ],\n                    vec![],\n                ),\n                text(format!(\"Clicked: {}\", self.click_count)),\n            ],\n        )\n    }\n    ```\n\n    ## New syntax:\n    ```rust\n    fn view(&self) -> Node<Msg> {\n        div!(\n            [class(\"some-class\"), id(\"some-id\"), attr(\"data-id\", 1)],\n            [\n                input!(\n                    [\n                        class(\"client\"),\n                        type_(\"button\"),\n                        value(\"Click me!\"),\n                        onclick(|_| {\n                            trace!(\"Button is clicked\");\n                            Msg::Click\n                        }),\n                    ],\n                    [],\n                ),\n                text!(\"Clicked: {}\", self.click_count),\n            ],\n        )\n    }\n    ```\n\n - Move DomEvent in dom module\n - nicer name for `dumb_patch` -> `apply_dumb_patch`\n - Refactor `dom_updater` and `created_node` out of the dom module\n - Add macro syntax, which provides a cleaner code by eliminating the `vec![]` syntax on the components view functions\n - Enable github actions\n - Reorganize dom specific module to get rid of multiple cfg feature code in the library\n - Reorganize `html::tags` and `svg::tags`\n - Remove the html_array syntax\n - Fix unused warning errors when no feature is enabled\n - Use the proper logging by using `log` and `console_log crate`\n - Completely remove the with-serde feature\n - Add feature gate 'with-dom' for browser specific functionality, such that sauron can be efficiently used for server-side rendering\n - Constraint the generic Type: `F` to be 'static in Callback, instead of the return generic type\n - Fix attributes helper functions: (`styles`, `styles_flag`, `classes`, `classes_flag`, `attrs_flag`) should not require MSG to be clone\n\n## 0.11.1\n - attributes helper functions such as (styles, classes, etc) should not require MSG to be Clone.\n\n## 0.11.0\n - Add underscores on html tags and attribtues(`type`,`for`, `async`, `loop`) that are also special keywords in rust.\n    Now, you can use `type_(\"text\")` as an alternative to `r#type(\"text\")`\n - rename as_element -> as_element_mut,  children -> add_children\n - Add `dumb_patch` for patching the dom without involving the callbacks.\n - Expose to `html::tag` module for the uncommon html tags which conflicts with common html attributes such as `style`, `title`.\n\n## 0.10.1\n - implemented removing the associated closures of elements that has been removed from the DOM including the removed element descendants.\n\n\n## 0.10.0\n - performance improvement on node tree building\n - using vec![] as the argumemts for attributes and children, this changes the syntax a lot\n    - The original array based syntax is still preserved by using the `html_array` module. This however has performance penalty\n - events and attributes are now unified in one field: `attrs`\n - `map` function mapping Msg from in between component is now `map_msg` to avoid confusion with the rust std common maps such `Iterator.map`\n - add units utility functions\n - Remove requirement for Msg to have any Clone,Debug,PartialEq\n\n## 0.7.1\n - Add initial implementation for markdown handling\n - Add history function get history object\n - events now prevents defaults and stop propagation\n\n## 0.7.0\n- Added an initial implementation for Http for fetching data which returns a Cmd\n- Added Examples usage of Http fetch\n- Added Browser for listening to browser resize event which returns a Cmd\n- Added Cmd module for abstracting calls such as Http requests\n- Added an optional `init` function in Component which allows apps execute Cmd Task such as fetching data at the start of the app\n- Change the update method in Component to return Cmd<Self,Msg> in update method\n\n\n## 0.6.0\n- Refactor sauron_vdom::Event to cater general usecase for mouse, keyboard and input event\n- Events such as onclick, onkeypress, and oninput are now supplied with: MouseEvent, KeyEvent, and InputEvent\n    accordingly, therefore no additional matching/unwrapping code is neccessary on the users code.\n    Before:\n    ```rust\n       onclick(|event: Event| {\n            if let Event::MouseEvent(mouse) = event{\n                sauron::log!(\"clicked at ({},{})\", mouse.x(), mouse.y())\n            }else{\n                panic!(\"This should not happen\")\n            }\n       })\n    ```\n    Now:\n    ```rust\n        onclick(|mouse: MouseEvent| {\n            sauron::log!(\"clicked at ({},{})\", mouse.x(), mouse.y())\n        })\n    ```\n - Move to svg_extra the following tags and attributes: style, width, height, id, font_size, font_family,\n     since these conflicts with the commonly used tags and attributes in html. Attributes that are defined in html attributes\n     could also be used in svg attributes. What's not possible is using tags declared in html module in svg elements,\n     since svg elements needs to be created with svg namespace in the DOM.\n\n\n## 0.5.0\n- Use &'static str type for Node's attribute name, event name and namespace.\n- Add helper function `styles` which allows users to write style properties easily.\n- Add helper function `styles_flag` which allows users to write even more granular style properties.\n- Elements attributes are now appended to the existing attributes ones,\n    this is needed when there is multiple calls assigning on the same attributes on the same element\n- Put back `Callback<Event,MSG>` as the value of node.events.\n- Add `map` functionality which lets user embed subcomponents view into the parent component by mapping the callbacks\n    with a wrapped MSG variant from the parent.\n\n## 0.4.0\n- Added the complete list of svg/html attributes.\n- Separate the uncommon html tags into html_extract module. These includes `style`, which conflicts with the\ncommonly used `style` attributes.\n- Separate the uncommon attributes such as `span`, `label` which conflicts with the\ncommonly used `span` and `label` html tags.\n- Use snake_case for non-ident tags and attributes.\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.05859375,
          "content": "Copyright (c) 2019 Jovansonlee Cesar and other contributors\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n"
        },
        {
          "name": "Notes.md",
          "type": "blob",
          "size": 0.337890625,
          "content": "# Notes\n\n## Publishing to crates.io\n\nPublish the crates in the following order:\n 1. sauron-core\n 2. sauron-node-macro\n 3. sauron\n\nAll of the crates must bump to the version number whenever any of the crate changed.\n\n\n## Limitations of wasm_bindgen macro.\n - Does not support generics yet.\n - methods can not be simultaneously a getter and static\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 4.96484375,
          "content": "![Maintenance](https://img.shields.io/badge/maintenance-activly--developed-brightgreen.svg)\n\n# sauron\n\n\n[![Latest Version](https://img.shields.io/crates/v/sauron.svg)](https://crates.io/crates/sauron)\n[![Build Status](https://img.shields.io/github/workflow/status/ivanceras/sauron/Rust)](https://github.com/ivanceras/sauron/actions/workflows/rust.yml)\n[![MIT licensed](https://img.shields.io/badge/license-MIT-blue.svg)](./LICENSE)\n\n![sauron](https://raw.githubusercontent.com/ivanceras/sauron/master/assets/sauron.png)\n\n**Sauron** is a versatile web framework and library for building client-side and/or server-side web applications\nwith strong focus on ergonomics, simplicity and elegance.\nThis allows you to write least amount of code possible, and focus more on the business logic rather than the inner details of the framework.\n\nSauron is inspired by elm-lang and is following The Elm Architecture.\n\n#### Features\n- server-side rendering\n- static site generation\n- progressive rendering\n- web components / custom-element\n- html syntax for writing views\n- elegant macro to write styles\n- batteries included\n\n### Devoid of unnecessary framework complexities\n- **no** framework specific cli needed\n- **no** template specific language as everything is in rust.\n    - Model and update function is all in rust.\n    - view? in rust\n    - events handling? rust\n    - styling? believe it or not: rust\n\nIn a sauron application, there is only the model, view and update.\nThe model is your application state.\nThe view describes how to present the model to the user.\nThe update function describes how to update the model, this uses message which contains the data needed for updating the model.\n\n\n#### Counter example\nIn your `src/lib.rs`\n```rust\nuse sauron::{\n    html::text, html::units::px, jss, node, wasm_bindgen, Application, Cmd, Node, Program,\n};\n\nenum Msg {\n    Increment,\n    Decrement,\n    Reset,\n}\n\nstruct App {\n    count: i32,\n}\n\nimpl App {\n    fn new() -> Self {\n        App { count: 0 }\n    }\n}\n\nimpl Application for App {\n\n    type MSG = Msg;\n\n    fn view(&self) -> Node<Msg> {\n        node! {\n            <main>\n                <input type=\"button\"\n                    value=\"+\"\n                    on_click=|_| {\n                        Msg::Increment\n                    }\n                />\n                <button class=\"count\" on_click=|_|{Msg::Reset} >{text(self.count)}</button>\n                <input type=\"button\"\n                    value=\"-\"\n                    on_click=|_| {\n                        Msg::Decrement\n                    }\n                />\n            </main>\n        }\n    }\n\n    fn update(&mut self, msg: Msg) -> Cmd<Msg> {\n        match msg {\n            Msg::Increment => self.count += 1,\n            Msg::Decrement => self.count -= 1,\n            Msg::Reset => self.count = 0,\n        }\n        Cmd::none()\n    }\n\n    fn stylesheet() -> Vec<String> {\n        vec![jss! {\n            \"body\":{\n                font_family: \"verdana, arial, monospace\",\n            },\n\n            \"main\":{\n                width: px(30),\n                height: px(100),\n                margin: \"auto\",\n                text_align: \"center\",\n            },\n\n            \"input, .count\":{\n                font_size: px(40),\n                padding: px(30),\n                margin: px(30),\n            }\n        }]\n    }\n}\n\n#[wasm_bindgen(start)]\npub fn start() {\n    Program::mount_to_body(App::new());\n}\n```\n\n`index.html`\n\n```html\n<!doctype html>\n<html>\n  <head>\n    <meta content=\"text/html;charset=utf-8\" http-equiv=\"Content-Type\"/>\n    <title>Counter</title>\n    <script type=module>\n        import init from './pkg/counter.js';\n        await init().catch(console.error);\n    </script>\n  </head>\n  <body>\n  </body>\n</html>\n```\nIn `Cargo.toml`, specify the crate-type to be `cdylib`\n\n```toml\n[package]\nname = \"counter\"\nversion = \"0.1.0\"\nedition = \"2021\"\n\n[lib]\ncrate-type = [\"cdylib\"]\n\n[dependencies]\nsauron = \"0.61.0\"\n```\n\n#### Prerequisite:\n\n```sh\ncargo install wasm-pack\ncargo install basic-http-server\n```\n\n\nBuild using\n```sh\nwasm-pack build --target web --release\n```\nServe using\n```sh\nbasic-http-server -a 0.0.0.0:4000\n```\nThen navigate to http://localhost:4000\n\nHead over to the [`getting-started.md`](docs/getting-started.md) for the full tutorial.\n\nFor more details on the commands to build and serve, look on [examples](https://github.com/ivanceras/sauron/tree/master/examples) on this repo, each\nhas scripts on how to build and run them.\n\n\n#### Demo examples\n- [todomvc](https://ivanceras.github.io/todomvc/) The todomvc example\n- [data-viewer](https://ivanceras.github.io/data-viewer/) - A resizable spreadsheet CSV data viewer\n- [svg-clock](https://ivanceras.github.io/svg-clock/) - A clock drawn using SVG and window tick event.\n- [ultron code-editor](https://ivanceras.github.io/ultron/) - A web-base text-editor with syntax highlighting\n- [hackernews-sauron](https://github.com/ivanceras/hackernews-sauron) - A hackernews clone showcasing the feature of sauron to write web applications that can work with or without javascript.\n\n\n\nLicense: MIT\n"
        },
        {
          "name": "TODO.md",
          "type": "blob",
          "size": 27.611328125,
          "content": "## General\n\n - [X] Add a prelude to import all html tags, svg tags, html attributes, svg attributes that doesn't conflicts\n - [X] Make a module that isolate the `with-dom` features.\n - [X] Rework the dumb patch taking the advantage of feature gating the dom capability.\n - [ ] Add documentation to functions\n     - Add examples to usage of methods in `Program`.\n - [ ] Loosen the lifetime requirement of the `Fn` inside `Callback` from `'static` to a generic one eg: `'c`\n     - [X] Done in `mt-dom` branch: non-static-lifetime\n - [X] Deprecate the tag macro since it complicates the conflict in reexporting the functions\n     - ie: `style!` as a tag, `style!` macro for attributes, `style` as attribute call.\n - [X] Change the README example to use the node macro syntax\n     - rename the old `minimal` to `minimal-alt` and use the `node-macro-syntax` in `minimal` example\n - [X] Move `sauron-syntax` into `html2sauron` project\n - ~~[ ] Expose Cmd,Component outside of `with-dom` feature gate~~\n     - This would allow a total isomorphic app reusing the components\n     - ~~[ ] Make an equivalent for Program(client-side updater) for use in server-side~~\n       ~~ - ie: ServerRender, where Msg could be passed as a data to hydrate the view (template) before sending to the client~~\n     - We don't need to use the update function in server-side rendering. We set the state of the app by instatiating the app with appropriate data.\n - [X] Fix the render function where attributes of the same name not merged\n - [X] Change type of tag, attribute_name, style keys from `&'static str` to `&'a str`\n     - This will remove the need for hardcode HTML_STYLES lookup, which could be a performance penalty\n - [ ] Add the RealWorld example\n     - Use the elm base code https://github.com/rtfeldman/elm-spa-example\n ~~- [ ] **breaking** ~put back `style` as a normal attribute~, to avoid possible confusion to new users.\n     - Cancelled, since style is treated differently in attributes.\n     ~~\n - [X] **breaking** merge `Browser` to `Window`.\n - [ ] Add `and_then`, `sequence` to `Cmd` to perform a task after the preceding Cmd succeeds.\n - [ ] Create a document on why it is needed for events such as `on_click` to have a copy of the variables outside of its environment.\n - [X] Rethink on the naming of Component, SimpleComponent, SubComponent.\n     - Component is actually Application since it the app that is manipulated by the program(executor).\n     - Other names: ~~Root~~ Application, Component, ~~Control,~~ Widget\n - [X] Merge `init` and `init_with_program`\n    - It make sense to make `init` mutable so the developer can manipulate the component at initialization stage.\n    - [X] Make call to `init` right after the Application is mounted into the `DOM`, rather than before.\n    - [X] Simplify `Application::init` to not have access to `Program` since it can return a `Cmd`. It can however, modify itself.\n - [X] Rename the type alias `Callback` into `EventCallback` or `Listener`.\n      This way, we can use the more generic `Callback` in Components and in `Cmd`.\n      - [X] Recreate Callback from a clean state, with no TypeId and used it in `Cmd`.\n      - [X] Listener will have it's own dedidate struct with the TypeId.\n      - [X] Use `Callback` in `Cmd`\n - [ ] Component system declared in view.\n    - The current system needs to store all state of the Application and its member sub components, regardless if they are specific to the Aplication or not.\n    - Some component will have properties that the App don't need to store.\n    - To do this, we need to create higher level macro and function which includes Component to be a node variant.\n        ```rust\n        enum Msg{\n            FuiButtonMsg(fui_button::Msg),\n        }\n\n        fn view(&self) -> Node<Widget>{\n            <div class=\"wrapper\">\n                <FuiButton on_click=|_|Msg::BtnClicked style=\"full\"/>\n            </div>\n        }\n        ```\n\n        leaf.rs\n        ```rust\n        pub enum Leaf<MSG>{\n            Text(String),\n            <...>\n            Component(Box<dyn Component>),\n            <...>\n        }\n        ```\n\n        attribute_value.rs\n        ```rust\n        pub enum AttributeValue<MSG>{\n            Simple(Value),\n            CompProperties(<ComponentProperties>),\n        }\n        ```\n    - The `Application` don't have to store the state of `FuiButton` component, it will be stored into the `Program` object.\n        - Issue how will be map the Msg of the sub component to convert it into the Msg of the main `Application`?\n    - [X] Merge the Container and Component which the view is now requires to have children components\n    - [X] Add a CustomElement trait which facilitates the component to be a custom element\n    - [X] Rethink of the sauron-component-macro\n        - [X] Redo it, maybe we don't need it and then manually implement all the Components\n        - ~~[ ] Make Application trait for internal usage only~~\n- [ ] Make Http api pass a decoder function\n- [ ] Additional to the dispatching of mount event.\n    - [X] on_mount\n         - on_will_mount\n    - [ ] on_dismount\n         - on_will_dismount\n- [X] Make the mount event be wrap as a real event, this way we can dispatch it in the real dom instead of from the virtual node\n    ```javascript\n        let mount_event = new Event(\"mount\");\n        elm.dispatchEvent(mount_event);\n    ```\n- [X] Call set_attribute in addition to setting the special attributes such as `value`, `checked`, this should trigger the `attribute_changed` callback in web components\n- [ ] The attribute_changed method in CustomElement should return an `MSG` which will be dispatched in the WebComponent struct.\n- [X] There is conflict with the use of `style`\n    - `style!` macro\n    - `style` attribute function\n    - `style` method in Application, Component, Container\n    - `style` html tag\n    Maybe use `css` or `stylesheet` as the method name.\n    ```rust\n    fn css(&self) -> Vec<String>{\n    }\n    fn stylesheet(&self) -> Vec<String>{\n    }\n    ```\n- [ ] Make the compilation error in `jss!`, `style!`, more informative\n- [ ] Optimize handling of style by diffing each style properties\n    - Update only specific stype instead of setting the whole style attributes\n\n\n## Internal\n- ~~[ ] Find a way to map `Cmd<APP,MSG>` to `Cmd<APP2, MSG2>`~~\n        ~~ie: `Cmd<ChildApp, ChildMsg>` to `Cmd<App, Msg>`\n        This is needed since `Cmd` from `update` function of sub components\n        are not dispatched in the program. Only the top level\n        component `Cmd` can be dispatched~~\n    - ~~[ ] Find a way to map `Program<APP,MSG>` to `Program<APP2,MSG2>`~~\n        - ~~[X] map `DomUpdater<MSG>` to `DomUpdater<MSG2>`~~\n        -  ~~Issue mapping fields of Program that are in `Rc<RefCell>` seems not that simple~~\n           ~~ as the Rc value of dom_updater is to be borrowed and will have a borrow checker issue~~\n- [X] Merge `Program` and `DomUpdater`\n    - Issue: DomUpdater has multiple fields, which would then be wrap with `Rc<RefCell>` individually\n- ~~[ ] Change the `'static` of trait implementation by specifying the lifetime\n        - ref: https://stackoverflow.com/questions/52187644/lifetime-must-be-valid-for-the-static-lifetime-so-that-the-types-are-compatible~~\n- [X] Get rid of test_fixtures and move it to test directory\n- [ ] Make each component have a reference to the root dom where it is mounted.\n    - This will make local state changes to the component easier to do, as opposed to diffing the whole DOM tree.\n- [X] Unify the code of Program replace_mount, append_mount\n- ~~[ ] replace the request_animation_frame with the code from `execute_request_animation` frame~~\n- [ ] Create a function to derive Component name from the struct name of the Component\n    and preprocess the jss with it before injecting it to the main program\n- [X] Clean up `CreateNode`\n    - no need to wrap `Node` and `Element` instead just return them as created with their `closures`\n- [X] Cmd should include a `should_update: bool` field which indicates if the update should be made or not\n        - Cmd{ commands:Vec<..>,should_update }\n        - Cmd::noop() // no update operation\n        - Fixed in `0.36.0`\n- [X] Remove the Dispatch trait and pass Program as it is in `dom_updater` and `apply_patches` module\n    - There is only one implementation of `Dispatch` trait anyway, that is `Program`\n    - Dispatch serve its purpose to make the code less clutter, by passing arguments around with less generics.\n- [X] ISSUE: sauron `node!` macro doesn't work on svg tags since it is using only `html_element` function which `namespace` is not supplied.\n    - Fixed in `0.35.0` by checking whether a tag has a namespace.\n- [X] Change `program: Option<&DSP>` to just `program: &DSP` since there program is needed everywhere.\n- [X] Improve `sauron-node-macro` to call on the equivalent html function instead of `elment_ns`.\n    - This would improve performance since the function already has the information whether or not it has namespace or not.\n    - Mitigated with the use of `Lazy` `HashSet` look up in `sauron-parse` for faster lookup.\n    - Further improved using `sauron-parse` by resolving the value of `self-closing` and `namespace` at compile time in the `node` macro.\n- [X] Create a hashed collections in `sauron-parse` to optimize lookup of tags for namespace or self-closing\n    - Created a fast lookup for `is_self_closing(tag)` amd `tag_namespace`.\n- [ ] old elements that has an event attached has no way of knowing the equivalent new element has the same event attached as their callbacks are clone of closures inside of Rc\n    and no 2 closures are the same even if the have the same code.\n- ~~[ ] add a conditional function for event attribute that if any of the other attribute is changed the event will have to be remove and re-attach.\n    - This is to mitigate the aggressive recycling of nodes which we skipp diffing for event listeners for performance reasons, as it is impractical to\n        reattach event listener at every render cycle.~~\n    - This has been solved by using the `TypeId` of the closure of the callback.\n- [X] Remove NodeIdx traversal and also remove NodeIdx in `mt-dom` TreePath, as traversal path prove to be correct.\n- [X] Maybe Remove the style functionality as Components and Applications can manipulate the style in the document directly\n    - [X] Change style that it returns only a `String` instead of `Vec<String>`.\n    - [X] The injected style shall have a class name equal to the the type_id of the `APP`.\n- [X] Add `maybe_attr(name: &str, value: Option<Value>)` to set the attribute if there is a value. empty otherwise.\n- [X] Centralize the handling of attributes tha has a state such as `value`, `checked`,.\n- [X] Issue with not finding the nodes to be patched\n    - This issue manifested in `performance-test-sauron` repo\n    - Suspecting it has to do with `mount_node` and `root_node` as replace and append could have a different behavior in the 2.\n    - Solved by: using mutable reference to the `root_node` rather than a mutable reference to a clond one.\n- [X] Rethink about the `replace_mount` in Program\n    - It is useful for replacing the preload spinner when the application is finished loading\n    - [X] Have an enum for mount action\n        ```rust\n            enum MountAction{\n                /// append as child to the target mount\n                Append,\n                /// clear any child to the target mount then append\n                ClearAppend,\n                /// replace the target mount with the root node\n                Replace\n            }\n        ```\n    - [X] Mount event should have a reference to the `host_node` and the `root_node`\n            - host_node is the node where the view is mounted, usually the parent\n            - in case of replace host_node is the same as the root_node.\n- [X] Maybe we don't need the `async` in update.\n- ~[ ] Refactor Program that will have to use less of `Rc<RefCell<>>`, by having an inner structure which is wrapped into `Rc<RefCell<>>`~\n    - this is not possible because we need to update each field separately, and borrowing the inner program state will disallow borrowing other fields.\n- [X] BUG: if the `dispatch_inner` is not called in a callback which is `request_animation_frame` or `request_idle_callback`\n    - This will cause the `dispatch_mount` event to dispatch before the `root_node` is set in the program when the program is to be mounted\n    - Note the `dispatch_mount` is triggered when the view has `on_mount` event.\n    - [X] mitigation: make the `dispatch_inner` spawn in a thead either via callback, or `spawn_local` from `wasm_bindgen_futures`.\n- [X] Tighten visibility of objects that are not meant to be `pub`\n    - [X] some fields in `Program`\n    - [X] struct types that are not meant to be public\n- [X] Use the deadline object in `request_idle_callback_with_deadline`, instead of just `f64`, which calculates the remaining time manually\n- [X] Migrate to rstml, since syn-rsx is unmaintained.\n- [X] Remove `Dispatch` and just pass `Program` around\n- [X] Make an alternative to `Effects` and `Cmd` that can be used in `Component`.\n    - call it `Task` a wrapper to a future, will resolve into MSG which will then be dispatched into the program\n    - does not have access to program for dispatching\n- [X] Remove the use of `Closure::forget()`\n- [X] Refactor `ActiveClosure` to use\n      - add a field `dom_closures` in `Program` which stores all closure for a certain Element\n      - all other closures is stored in `active_closure`\n      ```rust\n      closure_id_counter: usize,\n      type ActiveClosure: BTreeMap<usize, Closure>;\n      ```\n- [X] unify the `Program::add_event_listener` which attach the event to window\n    and the `dom_node::add_event_listener_callback` usage used in `set_element_attributes`\n\n    ```rust\n        Program::add_event_listener(&self, target_element: EventTarget, event_listeners).\n    ```\n- [X] Make the svg attributes follow `snake_case` convention\n    - `viewBox` -> `view_box`\n    - `preserveAspectRatio` -> `preserve_aspect_ratio`\n- [X] As an alternative to Task where `Component` can not use `Cmd`, due to it referencing Program,\n    we can instead return listeners.\n    - window listeners\n    - document listener\n    ```rust\n    struct GlobalListener{\n        window_listeners: Vec<Attribute<MSG>>;\n        document_listeners: Vec<Attribute<MSG>>;\n    }\n    ```\n    add these events:\n    - `on_interval(|i32|{})` for attaching interval in the Window\n    Http can be done with task\n- [X] Make Http functions return a Task\n- [X] Make `Sub` as counterpart to `Cmd`\n    - We can use `Sub` in the `Component`\n    ```rust\n     fn on_resize(&self) -> Sub<Msg>{\n     }\n    ```\n- [X] Bring back CreatedNode maybe with a different name: `DomNode` which wraps the `Node` or `Element` along with it's closures from event listener\n    - These are then saved into the `Program` where when removed or dropped, it will also drop the associated closures with them, thereby simplifying the code.\n    - Right now, we are attaching a `vdom-data` attribute for nodes that have listeners\n- [X] Make use of `Arc<RwLock>` to check if can solve copying the `APP` via `transmute_copy`. ~~it didn't solve it~~\n    - See if there are performance penalty\n- [X] Make template node for when app view is first created\n    - [X] The template is then patched when the app is mounted.\n    - [X] Templates will have to be saved in the global context, so it can be used accross multiple programs\n    - [ ] Using the template was slow, Find out which part is the program spending much time. check the time in the diffing\n        - Most of the time is spent on applying the patches\n    - [X] Make use of prediff to shorten diffing on nodes that are full static\n    - [X] unify the code where template is patched and converted\n- [X] Create a `view!` macro which generated the view function + template + prediff functions\n- [X] Make a variant of `Node` leaf to be `Component`, component can contain attributes and optionally children components + elements\n    - [X] This requires moving the mt-dom types into sauron-core so as to make a specific diff function for component\n- [X] put back map_msg module where it contains map_msg functions for Node, Element, Attributes\n    - this way, it will be easier to see the flow of map_msg method\n- [X] remove `is_static` methods as they are not useful to template patches anymore\n- [ ] process the patches in the component when attributes and children are removed or added.\n- [ ] Make an additional diffing algorithm for the template blocks\n    - This is anchored as next to the last sibling\n    - This can not just be backtrack to the parent, as it defeats the purpose of\n      doing as little diff as possible.\n- [X] Make a TemplateView struct and a variant of Leaf\n    ```rust\n    struct TemplatedView<MSG>{\n        template: Box<dyn Fn() -> Node<MSG>>,\n        skip_diff: Box<dyn Fn() -> SkipDiff>,\n        view: Node<MSG> ,\n    }\n    ```\n- [X] remove `SafeHtml` variant in leaf, instead provide a safe_html which is parsed and converted into node\n    - using safe html alters the dom tree\n- [X] add `symbol_html` for html entities such as `&nbsp;` `&gt`, `&lt` etc.\n    - this should be safe to be inserted\n- [X] remove `innerHTML` func in AttributeValue as it could alter the DOM node tree\n- [X] Keep track of which attributes to be skipped in `SkipDiff{shall:false}`\n    ```rust\n    enum SkipStrat{\n        SkipAll,\n        SkippIndex(Vec<usize>),\n    }\n    ```\n- [X] Maybe disable the template usage for now\n- [X] Make `Cmd` to be used internally as it needs reference to the `Program<APP>`\n    - [X] Use `Task` for returning from `Application` init and `update`.\n    - The `Recurring Task` is actually just a Sub in elm\n        - Issue with recurring task, how to store the closures which has different multiple types for the in arguments\n        - Store the closures with `Closure<dyn Fn(IN)->MSG>`\n        - Then task becomes `Task<IN,MSG>`\n    - The `SingleTask` is a Cmd in sauron\n    - Rename `Cmd` to `Command` alternative: `Action`, `Operation`, `Instruction`, `Effects`, `Dispatch`\n        - This is effects in elm\n    - [X] Rename `Cmd` to `Dispatch`\n    - [X] Rename `SingleTask` to `Action`\n    - [X] Rename `RecurringTask` to `Sub`\n    - [X] enum Command{Cmd,Sub} into one unified type.\n    - [X] Cmd is a vec of Command\n    - Sauron just consolidate them into one enum struct for simplicity\n- [X] Remove `Modifier` and `measurements`\n- [ ] Unify `vdom::Node` and `dom::DomNode`\n    - pro: This way stateful component can also be rendered server-side\n    - pro: The node can be patch in the server-side\n    - con: usage of `Rc` and `RefCell` on the components\n        - Need to have a reference to Parent to apply `replace_node`\n        - The Patch patch can get a reference to the parent via backtrack()\n- [ ] Issue with attribute in stateful component\n    - `attribute_changed` method is not changing the view as it has no access to the program\n        to dispatch some commands.\n    - Maybe stateful_component need to have access to its program\n    - Maybe Application will also need to have access to its program\n        create its own program and mount itself with `App::new().mount_to_body()`\n- [ ] Remove `use-teamplate` as the `DomNode` is now a wrapper, this defeats\n    the purpose of making a faster dom via template as deep clone has to also wrap the children nodes\n\n## Features\n- [X] Storage service (May not be needed since the user can directly use web-sys)\n    - [X] using wasm-bindgen directly will remove the need for Storage service wrapper\n- [X] Fetch service\n- [X] Url change service\n    - using wasm-bindgen directly eliminates the need for Url change service wrapper\n- [X] re-think about the `sauron-core` features:\n    - [X] `with-dom` when used in client-side, default\n    - ~~[]`with-ssr` when used in server-side rendering, mutually exlusive to `with-dom`~~\n        - Server-side rendering is implicit when target is not wasm.\n    - [X] `no_request_animation_frame` this should be additive\n        -  crate is now using `with-request-animation` feature\n- [X] `with-markdown`\n    - [X] Add sanitation to markdown parser, use `ammonia` crate\n    - [X] expose the `sauron-md` as `sauron::markdown` module, behind a feature flag\n- [X] Add example using markdown\n- [X] Make use of `serde_json` to parse `style` into components\n- [X] Add an example where a program is a custom html element, that way sauron could be used as a way to migrate parts of an existing html/js code base.\n    - [X] Custom element which is defiend as a web component where it can be used by some other Application.\n    - [ ] The App should be serializable and each of the fields will become an html attribute which\n    - [X] There is an issue with the patch not being able to find the element to be patch when using custom element\n        due to the reason that the root_node stored in the dom updater is not the first element of the view, but rather\n        the root_node in the dom updater is the first element of the view.\n        The old technique was the replace the root node with the created first element but this is not ideal when used for custom_element since we need to get the attributes from the custom element\n        Possible solution:\n            - Add a mount_node to the dom_updater alongside with the root_node\n    - [X] custom element would be appended to the `shadowRoot`\n        - [X] Usage of custom element inside another sauron component should skip the custom-element internal DOM elements\n    - [ ] custom element should also need access to the `textContent` of the tag for further processing\n- [X] Properly trigger the MountEvent at the appending of the component to the DOM\n    - Right now, it is triggered when the virtual Node is created into a real Node.\n- [X] Maybe rename `#[web_component]` macro to `#[custom_element]`\n    - Also `WebComponent` to `CustomElementWrapper`\n- [X] Implement the `StatefulComponent`\n    - [X] attributes and attribute value (key)\n    - [X] removing children and setting attributes\n- [X] Make the fancy-ui example work\n    - ~~[X] Change Patch to use PatchTarget, where TargetNode \n        will be specified for StatefulComponents~~\n        - ~~This is necessary since StatefulComponents child container is\n        not necessarily the root node.~~\n        - Alternative way is to convert child_container to TreePath by searching\n        for it from the root node\n- [ ] Rename local variables to their descriptive name\n    - batch_pending_cmds -> batch_pending_dispatch\n    - init_cmd -> init_dispatch;\n- [ ] dispatch `attribute_change` for all attributes in stateful component\n\n## Performance\n- [X] Fix the reported issues with benchmarks\n    - fixed by setting the target to web when building the wasm\n- [X] Create a new benchmark for the js-comprehensive-benchmark suite\n    - [link](https://github.com/krausest/js-framework-benchmark)\n    - Initial attempt https://github.com/ivanceras/performance-test-sauron\n- [X] Use Weak pointer for program instead of Rc where strong reference is not needed.\n       - Program stays as long as the user is using the app.\n- [X] Add `Program::batch_dispatch(&self, msgs: Vec<MSG>)` to call update on each of the messages before\n    calling on the view, this would improve performance when there are multiple messages to be dispatched to the application\n    - [X] implemented with `dispatch_multiple`\n- [X] Make a benchmark for building views with more than 2000 nodes, like a text-editor.\n    - There is a huge performance regression in between 0.40 and 0.42\n    - [X] It was cause by jss `style!` macro where the lookup for style name is recreated everytime,\n          due to the use of `const` instead of `static` in a `once_cell::Lazy` declaration. This is fixed in `jss 0.3.3`\n- [ ] Create the dom nodes in depth-first-traversal\n- [X] Make a pending patches in the DomUpdater which stops applying remaining patches when the time remaining for the deadline is up.\n    - There is a problem with storing the patch in a struct which will need to have explicit lifetime\n    - This can not also be stored in a global variable since there is a generic MSG\n    - Solution:\n        - Make an owned Patch which has no reference to the node\n          ```rust\n            struct OwnedPatch{\n                tag: Option<TAG>,\n                node: Node<'a,...>,\n            }\n          ```\n        - Store the patches as Closures, so as to get away with the generics\n            - but then there will be error can be shared between threads because closure is not Send\n        - [X] Make a DomPatch which a DOM version of the patch with the target node and created node\n- [ ] Find a way to break up building the view into multiple frames, since view can take a long time to build\n- [ ] Find a way to break up diffing the current vdom and the new vdom as they can also take a bit of long time as well.\n- [ ] Add benchmark function for using CACHE_ELEMENT and not\n- [ ] Make dispatch pending patches break when the animation frame timeouts, same way as dispatching pending msgs\n- [X] Check the last time the dom is updated, if it is less than 17ms, delay the dom update until 17ms has elapsed since the last update.\n- [ ] Make use of [talc](https://github.com/SFBdragon/talc) allocator for faster and leaner memory\n\n## Maintenance\n- [X] Move `sauron-markdown` into it's own repo, for keeping sauron slim.\n- [X] Move `jss` into a new crate `sauron-jss` for keeping sauron slim.\n    - [x] Use [json](https://github.com/maciejhirsz/json-rust) crate for `jss`.\n        - The quote on keys are optional, so this is good for use in writing css.\n- [X] Enumerate the exported modules and structs in prelude instead of just using glob(ie: *).\n- [X] Fix the data-viewer example to use Components on the views rather than Application\n- [X] Revisit and use style_name identifier in usage of jss in examples\n- [X] Move `html::units` to `jss` crate\n- [X] Rename `DomUpdater` to `DomPatcher`.\n    - [X] move apply_patches into `DomPatcher`.\n- [X] Rename `CreatedNode` to `DomNode`.\n    - [X] Maybe completely remove CreatedNode\n- [X] Move fields from `DomUpdater` into `Program` such as\n     - [X] current_vdom\n     - [X] root_node,\n     - [X] active_closures,\n     - [X] pending_patches\n- [X] Remove the use of `wee_alloc` crate\n- [X] sauron-core and jss should have a different version of Value, where jss value can be converted into.\n    - `Value` struct needs to reside here, since it is a corner-stone data structure and used eveywhere.\n    - Maybe `Value` should be in a very common crate. Say `sauron-common`.\n- [ ] Use `xtask` for scripting: building, checking, publishing, running the examples\n- [ ] Use `{ workspace = true }` to common dependencies for easieir maintenance work.\n\n## Bug\n- [X] When 2 nodes with multiple similar keys, multiple replace node patch is generated. But it couldn't seem to find the correct target element.\n     or the target element has no parent, therefore can not replace/insert the node.\n     - This is solved by getting the type_id of the closure.\n- [X] Add more test for recycled nodes with keys\n- [X] When 2 text are next to each other, the second text will become a comment\n- [X] Runtime errors when using fragments\n- [X] usage of `classes_flag` seems to be broken with complext trait requirement.\n    - [X] This should work very simply `classes_flag([(\"todo\", true), (\"editor\", is_editing)])`\n- [ ] Organize the generated docs, such that the most commonly used structs and enums are displayed on the first page of docs.rs/sauron instead of under prelude module\n\n## Limitations\n- ~~In rust, no two closures, even if identical, have the same type. Therefore closure can not be check for equality.~~ Solved by using the original type_id of the function callback\n    - In sauron node are matched and reused aggressively, except when the keys are different then the node is discarded.\n    - If we don't reuse nodes with event listeners aggressively, then we would have a performance penalty, since every recreation of the node with event listener will have to discard and create a new one for it, even if it is matching itself.\n    - Adding `key` attribute provides a good trade off.\n"
        },
        {
          "name": "assets",
          "type": "tree",
          "content": null
        },
        {
          "name": "benches",
          "type": "tree",
          "content": null
        },
        {
          "name": "codecov.yml",
          "type": "blob",
          "size": 0.3447265625,
          "content": "codecov:\n  notify:\n    require_ci_to_pass: yes\n\ncoverage:\n  precision: 2\n  round: down\n  range: \"70...100\"\n\n  status:\n    project: yes\n    patch: yes\n    changes: no\n\nparsers:\n  gcov:\n    branch_detection:\n      conditional: yes\n      loop: yes\n      method: no\n      macro: no\n\ncomment:\n  layout: \"header, diff\"\n  behavior: default\nrequire_changes: no\n"
        },
        {
          "name": "crates",
          "type": "tree",
          "content": null
        },
        {
          "name": "deny.toml",
          "type": "blob",
          "size": 8.4658203125,
          "content": "# This template contains all of the possible sections and their default values\n\n# Note that all fields that take a lint level have these possible values:\n# * deny - An error will be produced and the check will fail\n# * warn - A warning will be produced, but the check will not fail\n# * allow - No warning or error will be produced, though in some cases a note\n# will be\n\n# The values provided in this template are the default values that will be used\n# when any section or field is not specified in your own configuration\n\n# If 1 or more target triples (and optionally, target_features) are specified,\n# only the specified targets will be checked when running `cargo deny check`.\n# This means, if a particular package is only ever used as a target specific\n# dependency, such as, for example, the `nix` crate only being used via the\n# `target_family = \"unix\"` configuration, that only having windows targets in\n# this list would mean the nix crate, as well as any of its exclusive\n# dependencies not shared by any other crates, would be ignored, as the target\n# list here is effectively saying which targets you are building for.\ntargets = [\n    # The triple can be any string, but only the target triples built in to\n    # rustc (as of 1.40) can be checked against actual config expressions\n    #{ triple = \"x86_64-unknown-linux-musl\" },\n    # You can also specify which target_features you promise are enabled for a\n    # particular target. target_features are currently not validated against\n    # the actual valid features supported by the target architecture.\n    #{ triple = \"wasm32-unknown-unknown\", features = [\"atomics\"] },\n]\n\n# This section is considered when running `cargo deny check advisories`\n# More documentation for the advisories section can be found here:\n# https://embarkstudios.github.io/cargo-deny/checks/advisories/cfg.html\n[advisories]\n# The path where the advisory database is cloned/fetched into\ndb-path = \"~/.cargo/advisory-db\"\n# The url of the advisory database to use\ndb-url = \"https://github.com/rustsec/advisory-db\"\n# The lint level for security vulnerabilities\nvulnerability = \"deny\"\n# The lint level for unmaintained crates\nunmaintained = \"warn\"\n# The lint level for crates that have been yanked from their source registry\nyanked = \"warn\"\n# The lint level for crates with security notices. Note that as of\n# 2019-12-17 there are no security notice advisories in\n# https://github.com/rustsec/advisory-db\nnotice = \"warn\"\n# A list of advisory IDs to ignore. Note that ignored advisories will still\n# output a note when they are encountered.\nignore = [\n    #\"RUSTSEC-0000-0000\",\n]\n# Threshold for security vulnerabilities, any vulnerability with a CVSS score\n# lower than the range specified will be ignored. Note that ignored advisories\n# will still output a note when they are encountered.\n# * None - CVSS Score 0.0\n# * Low - CVSS Score 0.1 - 3.9\n# * Medium - CVSS Score 4.0 - 6.9\n# * High - CVSS Score 7.0 - 8.9\n# * Critical - CVSS Score 9.0 - 10.0\n#severity-threshold =\n\n# This section is considered when running `cargo deny check licenses`\n# More documentation for the licenses section can be found here:\n# https://embarkstudios.github.io/cargo-deny/checks/licenses/cfg.html\n[licenses]\n# The lint level for crates which do not have a detectable license\nunlicensed = \"deny\"\n# List of explictly allowed licenses\n# See https://spdx.org/licenses/ for list of possible licenses\n# [possible values: any SPDX 3.7 short identifier (+ optional exception)].\nallow = [\n    \"MIT\",\n    \"Apache-2.0\",\n    \"BSD-2-Clause\",\n    \"BSD-3-Clause\",\n    \"ISC\"\n    #\"Apache-2.0 WITH LLVM-exception\",\n]\n# List of explictly disallowed licenses\n# See https://spdx.org/licenses/ for list of possible licenses\n# [possible values: any SPDX 3.7 short identifier (+ optional exception)].\ndeny = [\n    #\"Nokia\",\n]\n# Lint level for licenses considered copyleft\ncopyleft = \"warn\"\n# Blanket approval or denial for OSI-approved or FSF Free/Libre licenses\n# * both - The license will be approved if it is both OSI-approved *AND* FSF\n# * either - The license will be approved if it is either OSI-approved *OR* FSF\n# * osi-only - The license will be approved if is OSI-approved *AND NOT* FSF\n# * fsf-only - The license will be approved if is FSF *AND NOT* OSI-approved\n# * neither - This predicate is ignored and the default lint level is used\nallow-osi-fsf-free = \"neither\"\n# Lint level used when no other predicates are matched\n# 1. License isn't in the allow or deny lists\n# 2. License isn't copyleft\n# 3. License isn't OSI/FSF, or allow-osi-fsf-free = \"neither\"\ndefault = \"deny\"\n# The confidence threshold for detecting a license from license text.\n# The higher the value, the more closely the license text must be to the\n# canonical license text of a valid SPDX license file.\n# [possible values: any between 0.0 and 1.0].\nconfidence-threshold = 0.8\n# Allow 1 or more licenses on a per-crate basis, so that particular licenses\n# aren't accepted for every possible crate as with the normal allow list\nexceptions = [\n    # Each entry is the crate and version constraint, and its specific allow\n    # list\n    #{ allow = [\"Zlib\"], name = \"adler32\", version = \"*\" },\n]\n\n# Some crates don't have (easily) machine readable licensing information,\n# adding a clarification entry for it allows you to manually specify the\n# licensing information\n#[[licenses.clarify]]\n# The name of the crate the clarification applies to\n#name = \"ring\"\n# THe optional version constraint for the crate\n#version = \"*\"\n# The SPDX expression for the license requirements of the crate\n#expression = \"MIT AND ISC AND OpenSSL\"\n# One or more files in the crate's source used as the \"source of truth\" for\n# the license expression. If the contents match, the clarification will be used\n# when running the license check, otherwise the clarification will be ignored\n# and the crate will be checked normally, which may produce warnings or errors\n# depending on the rest of your configuration\n#license-files = [\n    # Each entry is a crate relative path, and the (opaque) hash of its contents\n    #{ path = \"LICENSE\", hash = 0xbd0eed23 }\n#]\n\n[licenses.private]\n# If true, ignores workspace crates that aren't published, or are only\n# published to private registries\nignore = false\n# One or more private registries that you might publish crates to, if a crate\n# is only published to private registries, and ignore is true, the crate will\n# not have its license(s) checked\nregistries = [\n    #\"https://sekretz.com/registry\n]\n\n# This section is considered when running `cargo deny check bans`.\n# More documentation about the 'bans' section can be found here:\n# https://embarkstudios.github.io/cargo-deny/checks/bans/cfg.html\n[bans]\n# Lint level for when multiple versions of the same crate are detected\nmultiple-versions = \"warn\"\n# The graph highlighting used when creating dotgraphs for crates\n# with multiple versions\n# * lowest-version - The path to the lowest versioned duplicate is highlighted\n# * simplest-path - The path to the version with the fewest edges is highlighted\n# * all - Both lowest-version and simplest-path are used\nhighlight = \"all\"\n# List of crates that are allowed. Use with care!\nallow = [\n    #{ name = \"ansi_term\", version = \"=0.11.0\" },\n]\n# List of crates to deny\ndeny = [\n    # Each entry the name of a crate and a version range. If version is\n    # not specified, all versions will be matched.\n    #{ name = \"ansi_term\", version = \"=0.11.0\" },\n]\n# Certain crates/versions that will be skipped when doing duplicate detection.\nskip = [\n    #{ name = \"ansi_term\", version = \"=0.11.0\" },\n]\n# Similarly to `skip` allows you to skip certain crates during duplicate\n# detection. Unlike skip, it also includes the entire tree of transitive\n# dependencies starting at the specified crate, up to a certain depth, which is\n# by default infinite\nskip-tree = [\n    #{ name = \"ansi_term\", version = \"=0.11.0\", depth = 20 },\n]\n\n# This section is considered when running `cargo deny check sources`.\n# More documentation about the 'sources' section can be found here:\n# https://embarkstudios.github.io/cargo-deny/checks/sources/cfg.html\n[sources]\n# Lint level for what to happen when a crate from a crate registry that is not\n# in the allow list is encountered\nunknown-registry = \"warn\"\n# Lint level for what to happen when a crate from a git repository that is not\n# in the allow list is encountered\nunknown-git = \"warn\"\n# List of URLs for allowed crate registries. Defaults to the crates.io index\n# if not specified. If it is specified but empty, no registries are allowed.\nallow-registry = [\"https://github.com/rust-lang/crates.io-index\"]\n# List of URLs for allowed Git repositories\nallow-git = []\n"
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "justfile",
          "type": "blob",
          "size": 0.775390625,
          "content": "\ntest:\n    cargo test --all --no-fail-fast\n    cargo test --all --all-features\ncheck:\n    cargo check --all\n\ntest-no-features:\n    cargo test --all --no-default-features  --no-fail-fast\n\ntest-with-dom:\n    cargo test --all --features \"with-dom\"  --no-fail-fast\n\n\nwasm-test:\n   RUSTFLAGS=--cfg=web_sys_unstable_apis wasm-pack test --firefox --headless\n\nwasm-test-with-features:\n   RUSTFLAGS=--cfg=web_sys_unstable_apis wasm-pack test --firefox --headless -- --no-default-features --features \"with-dom with-node-macro custom_element\"\n\n\ntest-all: test wasm-test\n\npublish-core:\n    cargo publish -p sauron-core\n\npublish-html-parser:\n    cargo publish -p sauron-html-parser\n\npublish-macro:\n    cargo publish -p sauron-macro\n\npublish: publish-core publish-html-parser publish-macro\n    cargo publish\n"
        },
        {
          "name": "rustfmt.toml",
          "type": "blob",
          "size": 0.4990234375,
          "content": "## Use unstable features\n#unstable_features = true\n#\n#max_width = 80\n#\n### Visually align, useful in writing the view\n#indent_style = \"Block\"\n#imports_indent = \"Block\"\n#reorder_imports = true\n#reorder_impl_items = true\n#\n#imports_granularity=\"Crate\"\n### I want to be able to delete unused imports easily\n#imports_layout = \"Vertical\"\n### Default value is false, yet clipy keeps nagging on this\n#use_field_init_shorthand = true\n#\n### also format macro\n#format_macro_matchers = true\n#force_multiline_blocks = true\n"
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}