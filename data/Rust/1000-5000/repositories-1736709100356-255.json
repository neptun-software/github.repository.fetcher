{
  "metadata": {
    "timestamp": 1736709100356,
    "page": 255,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjI2MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "mufeedvh/code2prompt",
      "stars": 2801,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".assets",
          "type": "tree",
          "content": null
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.404296875,
          "content": "# Generated by Cargo\n# will have compiled files and executables\ndebug/\ntarget/\n\n# Remove Cargo.lock from gitignore if creating an executable, leave it for libraries\n# More information here https://doc.rust-lang.org/cargo/guide/cargo-toml-vs-cargo-lock.html\nCargo.lock\n\n# These are backup files generated by rustfmt\n**/*.rs.bk\n\n# MSVC Windows builds of rustc generate these, which store debugging information\n*.pdb\n"
        },
        {
          "name": "Cargo.toml",
          "type": "blob",
          "size": 1.4189453125,
          "content": "[package]\nname = \"code2prompt\"\nversion = \"2.0.0\"\nauthors = [\"Mufeed VH <mufeed@lyminal.space>\",\"Olivier D'Ancona <olivier.dancona@master.hes-so.ch>\"]\ndescription = \"A command-line (CLI) tool to generate an LLM prompt from codebases of any size, fast.\"\nkeywords = [\"code\", \"prompt\", \"llm\", \"gpt\", \"ai\"]\ncategories = [\"command-line-utilities\", \"development-tools\"]\nhomepage = \"https://github.com/mufeedvh/code2prompt\"\ndocumentation = \"https://github.com/mufeedvh/code2prompt\"\nrepository = \"https://github.com/mufeedvh/code2prompt\"\nlicense = \"MIT\"\nreadme = \"README.md\"\nexclude = [\".github/*\", \".assets/*\"]\nedition = \"2021\"\n\n[[bin]]\nname = \"code2prompt\"\ntest = false\nbench = false\npath = \"src/main.rs\"\n\n[dependencies]\nclap = { version = \"4.0\", features = [\"derive\"] }\nhandlebars = \"4.3\"\njwalk = \"0.8\"\ntermtree = \"0.4\"\nserde_json = \"1.0.114\"\nindicatif = \"0.17.8\"\ncolored = \"2.1.0\"\ntiktoken-rs = \"0.6.0\"\nignore = \"0.4.22\"\nanyhow = \"1.0.80\"\ninquire = \"0.7.1\"\nregex = \"1.10.3\"\ngit2 = { version = \"0.18.2\", default-features = false, features = [ \"https\", \"vendored-libgit2\", \"vendored-openssl\" ] }\nglob = \"0.3.1\"\nonce_cell = \"1.19.0\"\nlog = \"0.4\"\nenv_logger = \"0.11.3\"\narboard = \"3.4.0\"\n\n[profile.release]\nlto = \"thin\"\npanic = 'abort'\ncodegen-units = 1\n\n[package.metadata.deb]\nsection = \"utility\"\nassets = [\n    [\"target/release/code2prompt\", \"/usr/bin/\", \"755\"],\n]\n\n[dev-dependencies]\ntempfile = \"3.3\"\nassert_cmd = \"2.0\"\npredicates = \"2.0\"\nenv_logger = \"0.11.3\"\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.041015625,
          "content": "MIT License\n\nCopyright (c) 2024 Mufeed VH\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 10.1396484375,
          "content": "# code2prompt\n\n[![crates.io](https://img.shields.io/crates/v/code2prompt.svg)](https://crates.io/crates/code2prompt)\n[![LICENSE](https://img.shields.io/github/license/mufeedvh/code2prompt.svg#cache1)](https://github.com/mufeedvh/code2prompt/blob/master/LICENSE)\n\n<h1 align=\"center\">\n  <a href=\"https://github.com/mufeedvh/code2prompt\"><img src=\".assets/code2prompt-screenshot.png\" alt=\"code2prompt\"></a>\n</h1>\n\n`code2prompt` is a command-line tool (CLI) that converts your codebase into a single LLM prompt with a source tree, prompt templating, and token counting.\n\n## Table of Contents\n\n- [Features](#features)\n- [Installation](#installation)\n- [Usage](#usage)\n- [Templates](#templates)\n- [User Defined Variables](#user-defined-variables)\n- [Tokenizers](#tokenizers)\n- [Contribution](#contribution)\n- [License](#license)\n- [Support The Author](#support-the-author)\n\n## Features\n\nYou can run this tool on the entire directory and it would generate a well-formatted Markdown prompt detailing the source tree structure, and all the code. You can then upload this document to either GPT or Claude models with higher context windows and ask it to:\n\n- Quickly generate LLM prompts from codebases of any size.\n- Customize prompt generation with Handlebars templates. (See the [default template](src/default_template.hbs))\n- Respects `.gitignore`.\n- Filter and exclude files using glob patterns.\n- Display the token count of the generated prompt. (See [Tokenizers](#tokenizers) for more details)\n- Optionally include Git diff output (staged files) in the generated prompt.\n- Automatically copy the generated prompt to the clipboard.\n- Save the generated prompt to an output file.\n- Exclude files and folders by name or path.\n- Add line numbers to source code blocks.\n\nYou can customize the prompt template to achieve any of the desired use cases. It essentially traverses a codebase and creates a prompt with all source files combined. In short, it automates copy-pasting multiple source files into your prompt and formatting them along with letting you know how many tokens your code consumes.\n\n## Installation\n\n### Binary releases\n\nDownload the latest binary for your OS from [Releases](https://github.com/mufeedvh/code2prompt/releases). \n\n### Source build\nRequires:\n\n- [Git](https://git-scm.org/downloads), [Rust](https://rust-lang.org/tools/install) and Cargo.\n\n```sh\ngit clone https://github.com/mufeedvh/code2prompt.git\ncd code2prompt/\ncargo build --release\n```\n\n## cargo\ninstalls from the [`crates.io`](https://crates.io) registry. \n\n```sh\ncargo install code2prompt\n```\n\nFor unpublished builds:\n\n```sh\ncargo install --git https://github.com/mufeedvh/code2prompt\n```\n\n### AUR\n`code2prompt` is available in the [`AUR`](https://aur.archlinux.org/packages?O=0&K=code2prompt). Install it via any AUR helpers.\n\n```sh\nparu/yay -S code2prompt\n```\n\n### Nix\nIf you are on nix, You can use `nix-env` or `profile` to install. \n\n```sh\n# without flakes:\nnix-env -iA nixpkgs.code2prompt\n# with flakes:\nnix profile install nixpkgs#code2prompt\n```\n\n## Usage\n\nGenerate a prompt from a codebase directory:\n\n```sh\ncode2prompt path/to/codebase\n```\n\nUse a custom Handlebars template file:\n\n```sh\ncode2prompt path/to/codebase -t path/to/template.hbs\n```\n\nFilter files using glob patterns:\n\n```sh\ncode2prompt path/to/codebase --include=\"*.rs,*.toml\"\n```\n\nExclude files using glob patterns:\n\n```sh\ncode2prompt path/to/codebase --exclude=\"*.txt,*.md\"\n```\n\nExclude files/folders from the source tree based on exclude patterns:\n\n```sh\ncode2prompt path/to/codebase --exclude=\"*.npy,*.wav\" --exclude-from-tree\n```\n\nDisplay the token count of the generated prompt:\n\n```sh\ncode2prompt path/to/codebase --tokens\n```\n\nSpecify a tokenizer for token count:\n\n```sh\ncode2prompt path/to/codebase --tokens --encoding=p50k\n```\n\nSupported tokenizers: `cl100k`, `p50k`, `p50k_edit`, `r50k_bas`.\n> [!NOTE]  \n> See [Tokenizers](#tokenizers) for more details.\n\nSave the generated prompt to an output file:\n\n```sh\ncode2prompt path/to/codebase --output=output.txt\n```\n\nPrint output as JSON:\n\n```sh\ncode2prompt path/to/codebase --json\n```\n\nThe JSON output will have the following structure:\n\n```json\n{\n  \"prompt\": \"<Generated Prompt>\", \n  \"directory_name\": \"codebase\",\n  \"token_count\": 1234,\n  \"model_info\": \"ChatGPT models, text-embedding-ada-002\",\n  \"files\": []\n}\n```\n\nGenerate a Git commit message (for staged files):\n\n```sh\ncode2prompt path/to/codebase --diff -t templates/write-git-commit.hbs\n```\n\nGenerate a Pull Request with branch comparing (for staged files):\n\n```sh\ncode2prompt path/to/codebase --git-diff-branch 'main, development' --git-log-branch 'main, development' -t templates/write-github-pull-request.hbs\n```\n\nAdd line numbers to source code blocks:\n\n```sh\ncode2prompt path/to/codebase --line-number\n```\n\nDisable wrapping code inside markdown code blocks:\n\n```sh\ncode2prompt path/to/codebase --no-codeblock\n```\n\n- Rewrite the code to another language.\n- Find bugs/security vulnerabilities.\n- Document the code.\n- Implement new features.\n\n> I initially wrote this for personal use to utilize Claude 3.0's 200K context window and it has proven to be pretty useful so I decided to open-source it!\n\n## Templates\n\n`code2prompt` comes with a set of built-in templates for common use cases. You can find them in the [`templates`](templates) directory.\n\n### [`document-the-code.hbs`](templates/document-the-code.hbs)\n\nUse this template to generate prompts for documenting the code. It will add documentation comments to all public functions, methods, classes and modules in the codebase.\n\n### [`find-security-vulnerabilities.hbs`](templates/find-security-vulnerabilities.hbs)\n\nUse this template to generate prompts for finding potential security vulnerabilities in the codebase. It will look for common security issues and provide recommendations on how to fix or mitigate them.\n\n### [`clean-up-code.hbs`](templates/clean-up-code.hbs)\n\nUse this template to generate prompts for cleaning up and improving the code quality. It will look for opportunities to improve readability, adherence to best practices, efficiency, error handling, and more.\n\n### [`fix-bugs.hbs`](templates/fix-bugs.hbs)\n\nUse this template to generate prompts for fixing bugs in the codebase. It will help diagnose issues, provide fix suggestions, and update the code with proposed fixes.\n\n### [`write-github-pull-request.hbs`](templates/write-github-pull-request.hbs)\n\nUse this template to create GitHub pull request description in markdown by comparing the git diff and git log of two branches.\n\n### [`write-github-readme.hbs`](templates/write-github-readme.hbs)\n\nUse this template to generate a high-quality README file for the project, suitable for hosting on GitHub. It will analyze the codebase to understand its purpose and functionality, and generate the README content in Markdown format.\n\n### [`write-git-commit.hbs`](templates/write-git-commit.hbs)\n\nUse this template to generate git commits from the staged files in your git directory. It will analyze the codebase to understand its purpose and functionality, and generate the git commit message content in Markdown format.\n\n### [`improve-performance.hbs`](templates/improve-performance.hbs)\n\nUse this template to generate prompts for improving the performance of the codebase. It will look for optimization opportunities, provide specific suggestions, and update the code with the changes.\n\nYou can use these templates by passing the `-t` flag followed by the path to the template file. For example:\n\n```sh\ncode2prompt path/to/codebase -t templates/document-the-code.hbs\n```\n\n## User Defined Variables\n\n`code2prompt` supports the use of user defined variables in the Handlebars templates. Any variables in the template that are not part of the default context (`absolute_code_path`, `source_tree`, `files`) will be treated as user defined variables.\n\nDuring prompt generation, `code2prompt` will prompt the user to enter values for these user defined variables. This allows for further customization of the generated prompts based on user input.\n\nFor example, if your template includes `{{challenge_name}}` and `{{challenge_description}}`, you will be prompted to enter values for these variables when running `code2prompt`.\n\nThis feature enables creating reusable templates that can be adapted to different scenarios based on user provided information.\n\n## Tokenizers\n\nTokenization is implemented using [`tiktoken-rs`](https://github.com/zurawiki/tiktoken-rs). `tiktoken` supports these encodings used by OpenAI models:\n\n| Encoding name           | OpenAI models                                                             |\n| ----------------------- | ------------------------------------------------------------------------- |\n| `cl100k_base`           | ChatGPT models, `text-embedding-ada-002`                                  |\n| `p50k_base`             | Code models, `text-davinci-002`, `text-davinci-003`                       |\n| `p50k_edit`             | Use for edit models like `text-davinci-edit-001`, `code-davinci-edit-001` |\n| `r50k_base` (or `gpt2`) | GPT-3 models like `davinci`                                               |\n| `o200k_base`            | GPT-4o models                                                             |\n\nFor more context on the different tokenizers, see the [OpenAI Cookbook](https://github.com/openai/openai-cookbook/blob/66b988407d8d13cad5060a881dc8c892141f2d5c/examples/How_to_count_tokens_with_tiktoken.ipynb)\n\n## How is it useful?\n\n`code2prompt` makes it easy to generate prompts for LLMs from your codebase. It traverses the directory, builds a tree structure, and collects information about each file. You can customize the prompt generation using Handlebars templates. The generated prompt is automatically copied to your clipboard and can also be saved to an output file. `code2prompt` helps streamline the process of creating LLM prompts for code analysis, generation, and other tasks.\n\n## Contribution\n\nWays to contribute:\n\n- Suggest a feature\n- Report a bug  \n- Fix something and open a pull request\n- Help me document the code\n- Spread the word\n\n## License\n\nLicensed under the MIT License, see <a href=\"https://github.com/mufeedvh/code2prompt/blob/master/LICENSE\">LICENSE</a> for more information.\n\n## Liked the project?\n\nIf you liked the project and found it useful, please give it a :star: and consider supporting the authors!\n"
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "templates",
          "type": "tree",
          "content": null
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}