{
  "metadata": {
    "timestamp": 1736709032517,
    "page": 122,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjEzMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "facebook/buck2",
      "stars": 3657,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".buckconfig",
          "type": "blob",
          "size": 0.16015625,
          "content": "[cells]\ngh_facebook_buck2 = .\ngh_facebook_buck2_shims_meta = shim\n\n[cell_aliases]\nroot = gh_facebook_buck2\n\n[oss]\ninternal_cell = fbcode\nstripped_root_dirs = buck2\n"
        },
        {
          "name": ".buckconfig.d",
          "type": "tree",
          "content": null
        },
        {
          "name": ".cargo",
          "type": "tree",
          "content": null
        },
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 0.291015625,
          "content": "[*]\ncharset = utf-8\nend_of_line = lf\nindent_style = space\ninsert_final_newline = true\ntrim_trailing_whitespace = true\nmax_line_length = 100\nindent_size = 4\ntab_width = 4\n\n[*.md]\nmax_line_length = 72\n\n[.patternlint/config.json]\nindent_size = 2\ntab_width = 2\n\n[*.proto]\nindent_size = 2\ntab_width = 2\n"
        },
        {
          "name": ".envrc",
          "type": "blob",
          "size": 0.21484375,
          "content": "if ! has nix_direnv_version || ! nix_direnv_version 3.0.5; then\n  source_url \"https://raw.githubusercontent.com/nix-community/nix-direnv/3.0.5/direnvrc\" \"sha256-RuwIS+QKFj/T9M2TFXScjBsLR6V3A17YVoEW/Q6AZ1w=\"\nfi\nuse flake\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.2265625,
          "content": "/target/\nCargo.lock\nbuck-out\n/.direnv\n\n# symlinks\n/examples/with_prelude/prelude\n/examples/with_prelude/third-party/ocaml/opam\n/examples/with_prelude/third-party/haskell/ghc\n/examples/with_prelude/third-party/ocaml/standard_library\n"
        },
        {
          "name": ".taplo.toml",
          "type": "blob",
          "size": 0.2880859375,
          "content": "include = [\n    \"*.toml\",\n]\n\n[formatting]\nalign_comments = false\narray_auto_collapse = false\narray_auto_expand = false\nindent_string = \"    \"\nreorder_arrays = false\nreorder_keys = true\n\n[[rule]]\nkeys = [\n    \"dependencies\",\n    \"target.*.dependencies\",\n]\n[rule.formatting]\nreorder_arrays = true\n"
        },
        {
          "name": ".vscode",
          "type": "tree",
          "content": null
        },
        {
          "name": ".watchmanconfig",
          "type": "blob",
          "size": 0.0498046875,
          "content": "{\n    \"ignore_dirs\": [\"buck-out\", \".git\", \".sl\"]\n}\n"
        },
        {
          "name": "BUCK",
          "type": "blob",
          "size": 0.619140625,
          "content": "load(\"@fbcode_macros//build_defs:native_rules.bzl\", \"alias\")\nload(\"@fbsource//tools/target_determinator/macros:ci.bzl\", \"ci\")\nload(\":defs.bzl\", \"buck2_bundle\")\n\noncall(\"build_infra\")\n\nalias(\n    name = \"buck2\",\n    actual = \"//buck2/app/buck2:buck2-bin\",\n    labels = [ci.aarch64(ci.skip_test())],\n)\n\nbuck2_bundle(\n    name = \"buck2_bundle\",\n    buck2 = \"//buck2:buck2\",\n    buck2_client = \"//buck2/app/buck2:buck2_client-bin\",\n    tpx = \"//buck2/buck2_tpx_cli:buck2_tpx_cli\",\n    visibility = [\"PUBLIC\"],\n)\n\n# For backcompat with bash aliases and so forth\nalias(\n    name = \"symlinked_buck2_and_tpx\",\n    actual = \":buck2_bundle\",\n)\n"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 0.02734375,
          "content": "# Buck2\n\n- Initial version.\n"
        },
        {
          "name": "CODE_OF_CONDUCT.md",
          "type": "blob",
          "size": 3.16015625,
          "content": "# Open Source Code of Conduct\n\n## Our Pledge\n\nIn the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to make participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, sex characteristics, gender identity and expression, level of experience, education, socio-economic status, nationality, personal appearance, race, religion, or sexual identity and orientation.\n\n## Our Standards\n\nExamples of behavior that contributes to creating a positive environment include:\n\nUsing welcoming and inclusive language\nBeing respectful of differing viewpoints and experiences\nGracefully accepting constructive criticism\nFocusing on what is best for the community\nShowing empathy towards other community members\nExamples of unacceptable behavior by participants include:\n\nThe use of sexualized language or imagery and unwelcome sexual attention or advances\nTrolling, insulting/derogatory comments, and personal or political attacks\nPublic or private harassment\nPublishing others’ private information, such as a physical or electronic address, without explicit permission\nOther conduct which could reasonably be considered inappropriate in a professional setting\n\n## Our Responsibilities\n\nProject maintainers are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response to any instances of unacceptable behavior.\n\nProject maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful.\n\n## Scope\n\nThis Code of Conduct applies within all project spaces, and it also applies when an individual is representing the project or its community in public spaces. Examples of representing a project or community include using an official project e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event. Representation of a project may be further defined and clarified by project maintainers.\n\n## Enforcement\n\nInstances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting the project team at opensource-conduct@fb.com. All complaints will be reviewed and investigated and will result in a response that is deemed necessary and appropriate to the circumstances. The project team is obligated to maintain confidentiality with regard to the reporter of an incident. Further details of specific enforcement policies may be posted separately.\n\nProject maintainers who do not follow or enforce the Code of Conduct in good faith may face temporary or permanent repercussions as determined by other members of the project’s leadership.\n\n## Attribution\n\nThis Code of Conduct is adapted from the [Contributor Covenant][homepage], version 1.4,\navailable at https://www.contributor-covenant.org/version/1/4/code-of-conduct.html\n\n[homepage]: https://www.contributor-covenant.org\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 2.0712890625,
          "content": "# Contributing to Buck2\n\nWe want to make contributing to this project as easy and transparent as\npossible.\n\n## Our Development Process\n\nBuck2 is currently developed in Meta's internal repositories. Code that is\ndeveloped internally gets reviewed, sent through CI, committed, and then\nautomatically mirrored out to GitHub every 15 minutes. Code that arrives through\na PR is reviewed by a Meta developer on GitHub, then once accepted, moved into\nour internal workflow where it is reviewed, sent through CI, committed and added\nto the repo. We maintain both external CI (the results of which are visible on\nGitHub) and a more thorough internal CI (building internal projects etc). Alas,\nour full test suite is not yet mirrored to the open source repo, but we hope to\nfix that in due course.\n\n## Pull Requests\n\nWe actively welcome your pull requests.\n\n1. Fork the repo and create your branch from `main`.\n2. If you've added code that should be tested, add tests.\n3. If you've changed APIs, update the documentation.\n4. Ensure the test suite passes.\n5. Make sure your code passes any lints.\n6. If you haven't already, complete the Contributor License Agreement (\"CLA\").\n\n## Contributor License Agreement (\"CLA\")\n\nIn order to accept your pull request, we need you to submit a CLA. You only need\nto do this once to work on any of Meta's open source projects.\n\nComplete your CLA here: <https://code.facebook.com/cla>\n\n## Issues\n\nWe use GitHub issues to track public bugs. Please ensure your description is\nclear and has sufficient instructions to be able to reproduce the issue.\n\nMeta has a [bounty program](https://www.facebook.com/whitehat/) for the safe\ndisclosure of security bugs. In those cases, please go through the process\noutlined on that page and do not file a public issue.\n\n## Coding Style, Compiling, and Hacking Pro-tips\n\nSee [HACKING.md](./HACKING.md) for the nitty gritty on how to contribute.\n\n## License\n\nBy contributing to Buck2, you agree that your contributions will be licensed\nunder both the [LICENSE-MIT](LICENSE-MIT) and [LICENSE-APACHE](LICENSE-APACHE)\nfiles in the root directory of this source tree.\n"
        },
        {
          "name": "Cargo.toml",
          "type": "blob",
          "size": 15.7509765625,
          "content": "[workspace]\nmembers = [\n    \"allocative/allocative\",\n    \"allocative/allocative_derive\",\n    # @oss-disable: \"attic/uniplate\",\n    # @oss-disable: \"attic/uniplate_derive\",\n    \"app/buck2\",\n    \"app/buck2_action_impl\",\n    \"app/buck2_action_impl_tests\",\n    \"app/buck2_action_metadata_proto\",\n    \"app/buck2_analysis\",\n    \"app/buck2_anon_target\",\n    \"app/buck2_audit\",\n    \"app/buck2_audit_server\",\n    \"app/buck2_bxl\",\n    \"app/buck2_build_info\",\n    \"app/buck2_certs\",\n    \"app/buck2_cfg_constructor\",\n    \"app/buck2_client\",\n    \"app/buck2_client_ctx\",\n    \"app/buck2_cmd_completion_client\",\n    \"app/buck2_cmd_docs\",\n    \"app/buck2_cmd_docs_server\",\n    \"app/buck2_common\",\n    \"app/buck2_configured\",\n    \"app/buck2_core\",\n    \"app/buck2_cli_proto\",\n    \"app/buck2_daemon\",\n    \"app/buck2_directory\",\n    \"app/buck2_downward_api\",\n    \"app/buck2_downward_api_proto\",\n    \"app/buck2_error\",\n    \"app/buck2_error_derive\",\n    \"app/buck2_error_tests\",\n    \"app/buck2_event_observer\",\n    \"app/buck2_events\",\n    \"app/buck2_event_log\",\n    \"app/buck2_execute\",\n    \"app/buck2_execute_impl\",\n    \"app/buck2_external_cells\",\n    \"app/buck2_external_cells_bundled\",\n    \"app/buck2_grpc\",\n    \"app/buck2_http\",\n    \"app/buck2_install_proto\",\n    \"app/buck2_interpreter\",\n    \"app/buck2_interpreter_for_build\",\n    \"app/buck2_interpreter_for_build_tests\",\n    \"app/buck2_miniperf\",\n    \"app/buck2_miniperf_proto\",\n    \"app/buck2_node\",\n    \"app/buck2_node_tests\",\n    \"app/buck2_offline_archive\",\n    \"app/buck2_artifact\",\n    \"app/buck2_cmd_starlark_client\",\n    \"app/buck2_cmd_starlark_server\",\n    \"app/buck2_test\",\n    \"app/buck2_test_api\",\n    \"app/buck2_test_proto\",\n    \"app/buck2_test_runner\",\n    \"app/buck2_forkserver\",\n    \"app/buck2_forkserver_proto\",\n    \"app/buck2_futures\",\n    \"app/buck2_profile\",\n    \"app/buck2_protoc_dev\",\n    \"app/buck2_query\",\n    \"app/buck2_query_impls\",\n    \"app/buck2_query_parser\",\n    \"app/buck2_query_derive\",\n    \"app/buck2_re_configuration\",\n    \"app/buck2_server\",\n    \"app/buck2_server_commands\",\n    \"app/buck2_server_ctx\",\n    \"app/buck2_server_starlark_debug\",\n    \"app/buck2_transition\",\n    \"app/buck2_util\",\n    \"app/buck2_data\",\n    \"app/buck2_worker_proto\",\n    \"app/buck2_wrapper_common\",\n    \"app/buck2_build_api\",\n    \"app/buck2_build_api_derive\",\n    \"app/buck2_build_api_tests\",\n    \"app/buck2_subscription_proto\",\n    \"app/buck2_critical_path\",\n    \"app/buck2_build_signals\",\n    \"app/buck2_build_signals_impl\",\n    \"app/buck2_eden\",\n    \"app/buck2_validation\",\n    \"dice/dice\",\n    \"dice/dice_error\",\n    \"dice/dice_examples\",\n    \"dice/dice_tests\",\n    # @oss-disable: \"dice/fuzzy_dice\",\n    \"dice/read_dump\",\n    # @oss-disable: \"host_sharing\",\n    \"gazebo/display_container\",\n    \"gazebo/cmp_any\",\n    \"gazebo/gazebo\",\n    \"gazebo/gazebo_derive\",\n    \"integrations/resources/rust\",\n    \"integrations/rust-project\",\n    \"remote_execution/oss/re_grpc\",\n    \"remote_execution/oss/re_grpc_proto\",\n    \"starlark-rust/starlark\",\n    \"starlark-rust/starlark_bin\",\n    \"starlark-rust/starlark_derive\",\n    \"starlark-rust/starlark_lsp\",\n    \"starlark-rust/starlark_map\",\n    \"starlark-rust/starlark_syntax\",\n    \"shed/static_interner\",\n    \"shed/lock_free_hashtable\",\n    \"shed/lock_free_vec\",\n    \"shed/provider\",\n    \"shed/three_billion_instructions\",\n    \"superconsole\",\n]\nresolver = \"2\"\n\n[workspace.package]\nlicense = \"MIT OR Apache-2.0\"\nrepository = \"https://github.com/facebook/buck2\"\n\n[workspace.dependencies]\nanyhow = \"1.0.65\"\nanymap = \"1.0.0-beta.2\"\narc-swap = \"1.6.0\"\nargfile = \"0.1.0\"\nassert_matches = \"1.5\"\nasync-compression = { version = \"0.4.1\", features = [\"tokio\", \"gzip\", \"zstd\"] }\nasync-condvar-fair = { version = \"1.0\", features = [\"parking_lot_0_11\", \"tokio\"] }\nasync-recursion = \"1.0\"\nasync-scoped = { version = \"0.9\", features = [\"use-tokio\"] }\nasync-trait = \"0.1.24\"\natomic = \"0.5.1\"\nbacktrace = \"0.3.51\"\nbase64 = \"0.21.7\"\nbincode = \"1.3.3\"\nblake3 = { version = \"1.3.1\", features = [\"default\", \"digest\", \"rayon\", \"std\", \"traits-preview\"] }\nbumpalo = \"3.11.1\"\nbyteorder = \"1.4.3\"\nbytes = \"1.0\"\nbytesize = \"1.1.0\"\nchrono = \"0.4.38\"\nclap = { version = \"4.5.6\", features = [\"derive\", \"env\", \"string\"] }\nclap_complete = \"4.5.5\"\ncommon-path = \"1.0.0\"\ncompact_str = \"0.8\"\nconst_format = \"0.2.32\"\nconstant_time_eq = \"0.2.4\"\nconvert_case = \"0.4.0\"\ncriterion = { version = \"0.3.1\", features = [] }\ncrossbeam = \"0.8\"\ncrossbeam-channel = \"0.5.8\"\ncrossbeam-epoch = \"0.9.7\"\ncrossterm = \"0.27\"\ncsv = \"1.1\"\nctor = \"0.1.16\"\ndashmap = \"5.5.3\"\ndebugserver-types = \"0.5.0\"\nderivative = \"2.2\"\nderive_more = { version = \"1.0.0\", features = [\"full\"] }\ndigest = \"0.10\"\ndirs = \"3.0.1\"\ndunce = \"1.0.2\"\neither = \"1.8\"\nenum-iterator = \"1.4.1\"\nenum-map = \"0.6.3\"\nenv_logger = \"0.9.0\"\nequivalent = \"1.0.0\"\nerased-serde = \"0.3.20\"\nfaccess = \"0.2.3\"\nfancy-regex = \"0.14.0\"\nflate2 = \"1.0.22\"\nfs4 = { version = \"0.6\", features = [\"sync\"] }\nfutures = { version = \"0.3.28\", features = [\"async-await\", \"compat\"] }\nfutures-intrusive = \"0.4\"\nfxhash = \"0.2.1\"\nglob = \"0.3.0\"\nglobset = \"0.4.10\"\nhashbrown = { version = \"0.14.3\", features = [\"raw\"] }\nhex = \"0.4.3\"\nhostname = \"0.3.1\"\nhttp = \"0.2\"\nhttparse = \"1.7.1\"\nhttptest = \"0.15\"\nhumantime = \"2.0.1\"\nhyper = { version = \"0.14.26\", features = [\"client\", \"http1\", \"http2\"] }\nhyper-proxy = { git = \"https://github.com/get9/hyper-proxy\", rev = \"205e9fee42d469444d654d9fa207897f4a77d5b6\", features = [\"rustls\"], default-features = false } # branch = tokio-rustls-0.23 Many PRs to bump versions (#28, #30, #31) are several years old, possibly abandoned crate. This fork contains changes from #28 + changes to upgrade rustls to 0.21.\nhyper-rustls = { version = \"0.24.0\", features = [\"http2\"] }\nhyper-timeout = \"0.4\"\nhyper-unix-connector = \"0.2\"\nindent_write = \"2.2.0\"\nindenter = \"0.3.3\"\nindexmap = { version = \"2.2.6\", features = [\"serde\"] }\nindoc = \"2.0.2\"\ninferno = { version = \"0.11.19\", default-features = false }\ninternment = { version = \"0.8\", features = [\"arc\"] }\ninventory = \"0.3.8\"\nipnetwork = \"0.20.0\"\nis_proc_translated = \"0.1.1\"\nitertools = \"0.13.0\"\njemallocator = { version = \"0.5.0\", features = [\"profiling\"] }\nlalrpop = { version = \"0.19.7\", artifact = \"bin\" }\nlalrpop-util = \"0.19.7\"\nlibc = \"0.2.158\"\nlinked-hash-map = { version = \"0.5\", features = [\"serde_impl\"] }\nlinkme = { version = \"0.3.17\", features = [\"used_linker\"] }\nlog = \"0.4\"\nlogos = \"0.12\"\nlru = \"0.12.3\"\nlsp-server = \"0.7.2\"\nlsp-types = \"0.94.1\"\nmaplit = \"1.0.2\"\nmappable-rc = { version = \"0.1.1\", features = [\"std\"] }\nmemchr = \"2.4.1\"\nmemmap2 = \"0.5.0\"\nmemoffset = \"0.6.4\"\nmultimap = \"0.8.2\"\nnix = \"0.22\"\nnom = \"7.1.3\"\nnotify = \"=5.0.0\"\nnum-bigint = \"0.4.3\"\nnum-traits = \"0.2\"\nnum_cpus = \"1.11\"\nnum_enum = \"0.5\"\nobject = \"0.29.0\"\nonce_cell = \"1.8\"\nos_str_bytes = { version = \"6.6.0\", features = [\"conversions\"] }\nparking_lot = { version = \"0.11.2\", features = [\"send_guard\"] }\npaste = \"1.0\"\npathdiff = \"0.2\"\nperf-event = \"0.4\"\nperf-event-open-sys = \"4.0\"\npin-project = \"0.4.29\"\nplist = \"1.4.3\"\npretty_assertions = \"1.2.1\"\nproc-macro2 = \"1.0\"\nprost = \"0.11.9\"\nprost-build = \"0.11.9\"\nprost-derive = \"0.11.9\"\nprost-types = \"0.11.9\"\nprotoc-bin-vendored = \"3.0.0\"\npsutil = \"3.2\"\nquote = \"1.0.3\"\nrand = { version = \"0.8.4\", features = [\"small_rng\"] }\nrand_chacha = \"0.3\"\nrand_distr = \"0.4\"\nref-cast = \"1.0.0\"\nregex = \"1.5.4\"\nrelative-path = { version = \"1.7.0\", features = [\"serde\"] }\nrusqlite = { version = \"0.29.0\", features = [\"bundled\"] }\nrustc-hash = { version = \"1.1\" }\nrustls = \"0.21.5\"\nrustls-native-certs = { package = \"rustls-native-certs\", version = \"0.6.2\" }\nrustls-pemfile = { package = \"rustls-pemfile\", version = \"1.0.0\" }\nrustyline = \"14.0\"\nscopeguard = \"1.0.0\"\nsequence_trie = \"0.3.6\"\nserde = { version = \"1.0\", features = [\"derive\", \"rc\"] }\nserde_json = { version = \"1.0.48\", features = [\"raw_value\"] }\nsha1 = \"0.10\"\nsha2 = \"0.10\"\nshlex = \"1.3\"\nsiphasher = \"0.3.3\"\nslab = \"0.4.7\"\nslog = \"2.7.0\"\nsmallvec = { version = \"1.10\", features = [\"const_generics\", \"const_new\", \"serde\", \"specialization\", \"union\", \"write\"] }\nstatic_assertions = \"1.1.0\"\nstrsim = \"0.10.0\"\nstructopt = \"0.3.23\"\nstrum = { version = \"0.26.2\", features = [\"derive\", \"strum_macros\"] }\nsyn = { version = \"2\", features = [\"extra-traits\", \"full\", \"visit\"] }\nsync_wrapper = \"0.1.0\"\nsys-info = \"0.9.1\"\nsysinfo = \"0.30.11\"\ntake_mut = \"0.2.2\"\ntar = \"0.4.38\"\ntempfile = \"3.1.0\"\ntermimad = \"0.30\"\ntermios = \"0.3\"\ntermwiz = \"0.18\"\ntest-case = \"3.1.0\"\ntextwrap = { version = \"0.11\", features = [\"term_size\"] }\nthiserror = \"1.0.36\"\nthreadpool = \"1.8.1\"\ntokio = { version = \"1.25.0\", features = [\"full\", \"test-util\", \"tracing\"] }\ntokio-rustls = { package = \"tokio-rustls\", version = \"0.24.0\", features = [\"dangerous_configuration\"] }\ntokio-stream = { version = \"0.1.14\", features = [\"fs\", \"io-util\", \"net\", \"sync\", \"time\", \"signal\"] }\ntokio-util = { version = \"0.6\", features = [\"full\"] }\ntoml = \"0.5\"\ntonic = { version = \"0.9.2\", features = [\"tls\", \"tls-webpki-roots\"] }\ntonic-build = { version = \"0.9.2\", features = [\"prost\", \"cleanup-markdown\"] }\ntower = \"0.4\"\ntower-layer = \"0.3.1\"\ntower-service = \"0.3.2\"\ntracing = \"0.1.22\"\ntracing-subscriber = { version = \"0.3\", features = [\"env-filter\", \"json\"] }\ntriomphe = \"0.1.11\"\ntrybuild = \"1.0.56\"\ntwox-hash = \"1.6.1\"\ntyped-arena = \"2.0\"\nunicode-segmentation = \"1.7\"\nuuid = { version = \"1.2\", features = [\"v4\"] }\nwalkdir = \"2.3.2\"\nwhich = \"4.3.0\"\nwinapi = { version = \"0.3\", features = [\"everything\", \"std\"] }\nx509-parser = \"0.14.0\"\nxattr = \"0.2.2\"\nzip = \"0.5\"\nzstd = \"0.13.0\"\n\n# @oss-disable: fbinit.path = \"../common/rust/shed/fbinit\"\nfbinit.version = \"0.2\"\n# @oss-disable: sorted_vector_map.path = \"../common/rust/shed/sorted_vector_map\"\nsorted_vector_map.version = \"0.2\"\n\nallocative.features = [\"anyhow\", \"bumpalo\", \"dashmap\", \"either\", \"futures\", \"hashbrown\", \"indexmap\", \"num-bigint\", \"once_cell\", \"parking_lot\", \"prost-types\", \"relative-path\", \"serde_json\", \"slab\", \"smallvec\", \"compact_str\", \"sorted_vector_map\", \"tokio\", \"triomphe\"]\nallocative.path = \"allocative/allocative\"\nallocative.version = \"0.3.1\"\ncmp_any = { path = \"gazebo/cmp_any\" }\ndice = { path = \"dice/dice\" }\ndice_error = { path = \"dice/dice_error\" }\ndisplay_container = { path = \"gazebo/display_container\" }\ndupe.path = \"gazebo/dupe\"\ndupe.version = \"0.9.0\"\ngazebo.features = [\"str_pattern_extensions\"]\ngazebo.path = \"gazebo/gazebo\"\ngazebo.version = \"0.8.1\"\nhost_sharing = { path = \"host_sharing\" }\nlock_free_hashtable = { version = \"0.1.0\", path = \"shed/lock_free_hashtable\" }\nlock_free_vec = { path = \"shed/lock_free_vec\" }\nprovider = { path = \"shed/provider\" }\nremote_execution = { path = \"remote_execution/oss/re_grpc\" }\nstarlark = { version = \"0.13.0\", path = \"starlark-rust/starlark\" }\nstarlark_lsp = { version = \"0.13.0\", path = \"starlark-rust/starlark_lsp\" }\nstarlark_map = { version = \"0.13.0\", path = \"starlark-rust/starlark_map\" }\nstarlark_syntax = { version = \"0.13.0\", path = \"starlark-rust/starlark_syntax\" }\nstatic_interner = { path = \"shed/static_interner\" }\nthree_billion_instructions = { path = \"shed/three_billion_instructions\" }\n\nbuck2_action_impl = { path = \"app/buck2_action_impl\" }\nbuck2_action_metadata_proto = { path = \"app/buck2_action_metadata_proto\" }\nbuck2_analysis = { path = \"app/buck2_analysis\" }\nbuck2_anon_target = { path = \"app/buck2_anon_target\" }\nbuck2_artifact = { path = \"app/buck2_artifact\" }\nbuck2_audit = { path = \"app/buck2_audit\" }\nbuck2_audit_server = { path = \"app/buck2_audit_server\" }\nbuck2_build_api = { path = \"app/buck2_build_api\" }\nbuck2_build_api_derive = { path = \"app/buck2_build_api_derive\" }\nbuck2_build_info = { path = \"app/buck2_build_info\" }\nbuck2_build_signals = { path = \"app/buck2_build_signals\" }\nbuck2_build_signals_impl = { path = \"app/buck2_build_signals_impl\" }\nbuck2_bxl = { path = \"app/buck2_bxl\" }\nbuck2_certs = { path = \"app/buck2_certs\" }\nbuck2_cfg_constructor = { path = \"app/buck2_cfg_constructor\" }\nbuck2_cli_proto = { path = \"app/buck2_cli_proto\" }\nbuck2_client = { path = \"app/buck2_client\" }\nbuck2_client_ctx = { path = \"app/buck2_client_ctx\" }\nbuck2_cmd_completion_client = { path = \"app/buck2_cmd_completion_client\" }\nbuck2_cmd_docs = { path = \"app/buck2_cmd_docs\" }\nbuck2_cmd_docs_server = { path = \"app/buck2_cmd_docs_server\" }\nbuck2_cmd_starlark_client = { path = \"app/buck2_cmd_starlark_client\" }\nbuck2_cmd_starlark_server = { path = \"app/buck2_cmd_starlark_server\" }\nbuck2_common = { path = \"app/buck2_common\" }\nbuck2_configured = { path = \"app/buck2_configured\" }\nbuck2_core = { path = \"app/buck2_core\" }\nbuck2_critical_path = { path = \"app/buck2_critical_path\" }\nbuck2_daemon = { path = \"app/buck2_daemon\" }\nbuck2_data = { path = \"app/buck2_data\" }\nbuck2_directory = { path = \"app/buck2_directory\" }\nbuck2_downward_api = { path = \"app/buck2_downward_api\" }\nbuck2_downward_api_proto = { path = \"app/buck2_downward_api_proto\" }\nbuck2_eden = { path = \"app/buck2_eden\" }\nbuck2_error = { path = \"app/buck2_error\" }\nbuck2_error_derive = { path = \"app/buck2_error_derive\" }\nbuck2_event_log = { path = \"app/buck2_event_log\" }\nbuck2_event_observer = { path = \"app/buck2_event_observer\" }\nbuck2_events = { path = \"app/buck2_events\" }\nbuck2_execute = { path = \"app/buck2_execute\" }\nbuck2_execute_impl = { path = \"app/buck2_execute_impl\" }\nbuck2_external_cells = { path = \"app/buck2_external_cells\" }\nbuck2_external_cells_bundled = { path = \"app/buck2_external_cells_bundled\" }\nbuck2_file_watcher = { path = \"app/buck2_file_watcher\" }\nbuck2_forkserver = { path = \"app/buck2_forkserver\" }\nbuck2_forkserver_proto = { path = \"app/buck2_forkserver_proto\" }\nbuck2_futures = { path = \"app/buck2_futures\" }\nbuck2_grpc = { path = \"app/buck2_grpc\" }\nbuck2_http = { path = \"app/buck2_http\" }\nbuck2_install_proto = { path = \"app/buck2_install_proto\" }\nbuck2_interpreter = { path = \"app/buck2_interpreter\" }\nbuck2_interpreter_for_build = { path = \"app/buck2_interpreter_for_build\" }\nbuck2_interpreter_for_build_tests = { path = \"app/buck2_interpreter_for_build_tests\" }\nbuck2_miniperf = { path = \"app/buck2_miniperf\" }\nbuck2_miniperf_proto = { path = \"app/buck2_miniperf_proto\" }\nbuck2_node = { path = \"app/buck2_node\" }\nbuck2_offline_archive = { path = \"app/buck2_offline_archive\" }\nbuck2_profile = { path = \"app/buck2_profile\" }\nbuck2_protoc_dev = { path = \"app/buck2_protoc_dev\" }\nbuck2_query = { path = \"app/buck2_query\" }\nbuck2_query_derive = { path = \"app/buck2_query_derive\" }\nbuck2_query_impls = { path = \"app/buck2_query_impls\" }\nbuck2_query_parser = { path = \"app/buck2_query_parser\" }\nbuck2_re_configuration = { path = \"app/buck2_re_configuration\" }\nbuck2_server = { path = \"app/buck2_server\" }\nbuck2_server_commands = { path = \"app/buck2_server_commands\" }\nbuck2_server_ctx = { path = \"app/buck2_server_ctx\" }\nbuck2_server_starlark_debug = { path = \"app/buck2_server_starlark_debug\" }\nbuck2_subscription_proto = { path = \"app/buck2_subscription_proto\" }\nbuck2_test = { path = \"app/buck2_test\" }\nbuck2_test_api = { path = \"app/buck2_test_api\" }\nbuck2_test_proto = { path = \"app/buck2_test_proto\" }\nbuck2_test_runner = { path = \"app/buck2_test_runner\" }\nbuck2_transition = { path = \"app/buck2_transition\" }\nbuck2_util = { path = \"app/buck2_util\" }\nbuck2_validation = { path = \"app/buck2_validation\" }\nbuck2_worker_proto = { path = \"app/buck2_worker_proto\" }\nbuck2_wrapper_common = { path = \"app/buck2_wrapper_common\" }\n\n[profile.release]\nincremental = true\npanic = \"abort\"\n# The line below increases build times from 50s to 84s, with no observed impact on runtime speed.\n# But maybe for some benchmarks it will show more noticeable variation.\n# lto = \"thin\"\n\n# Use with: --profile=release-symbols -Z unstable-options\n[profile.release-symbols]\ndebug = true\nincremental = true\ninherits = \"release\"\n\n[profile.dev]\ndebug = true\nincremental = true\nlto = \"off\"\nopt-level = 1\npanic = \"abort\"\n\n[profile.test]\nincremental = true\n\n[profile.bench]\nincremental = true\n\n[patch.crates-io]\n# For https://github.com/jimblandy/perf-event/pull/29\nperf-event = { git = \"https://github.com/krallin/perf-event.git\", rev = \"86224a9bc025d5d19f719542f27c8c629a08b167\", version = \"0.4\" }\nperf-event-open-sys = { git = \"https://github.com/krallin/perf-event.git\", rev = \"86224a9bc025d5d19f719542f27c8c629a08b167\", version = \"4.0\" }\n"
        },
        {
          "name": "Cross.toml",
          "type": "blob",
          "size": 0.0546875,
          "content": "[build.env]\npassthrough = [\"JEMALLOC_SYS_WITH_LG_PAGE\"]\n"
        },
        {
          "name": "HACKING.md",
          "type": "blob",
          "size": 5.2919921875,
          "content": "# Tips and tricks for hacking on Buck2\n\nYou might have been lead here by reading [CONTRIBUTING.md](/CONTRIBUTING.md). If\nnot, please read that as well! That will give you the high level overview; this\ndocument is all about the needed elbow grease you'll have to apply.\n\n## Building the code\n\nBuck2 is written in Rust, and **currently requires a nightly toolchain**. You\nneed **[rustup](https://rustup.rs)** installed to provision the necessary\nversion of `rustc` and `cargo` as a result.\n\nYou can either build `buck2` from a clone of the Buck2 repo (this will cause\nrustup/cargo to install the right nightly version of `rustc`):\n\n```sh\ngit clone https://github.com/facebook/buck2.git\ncd buck2/\ncargo install --path=app/buck2\n```\n\nOr, alternatively, install it directly from GitHub:\n\n```sh\nrustup install nightly-2024-10-13\ncargo +nightly-2024-10-13 install --git https://github.com/facebook/buck2.git buck2\n```\n\n### Side note: using [Nix] to compile the source\n\n> **NOTE**: You shouldn't need to do this if you already have a tool such as\n> `rustup` installed. The following instructions are for Nix and NixOS users\n> specifically.\n\nMost [Nix] users provision tools directly with Nix itself, rather than rustup;\nthe Buck2 source code includes a `flake.nix` file, which can be used to compile\nBuck2 itself via `cargo`:\n\n```sh\ngit clone https://github.com/facebook/buck2.git\ncd buck2/\nnix develop . # add 'rustc' and 'cargo' to $PATH\ncargo build --release --bin=buck2\n```\n\nA Nix package (e.g. `nix build .#buck2`) does not yet exist.\n\n[Nix]: https://nixos.org/nix\n\n### Side note: `protoc` binaries and alternative operating systems\n\n> **NOTE**: You can probably skip this if you're on a typical \"Tier 1\" operating\n> system like aarch64/x86_64 Linux, Windows, or macOS.\n\nBuck2 uses Protocol Buffers quite extensively in its internals, and also for\ncommunication with remote systems for tasks like Remote Execution. Therefore\nthere are `.proto` files in the codebase that need to be compiled to Rust code.\nDue to the architecture of how Protocol Buffers works, you'll need the `protoc`\ncompiler available in order to do this.\n\nFor the 3 major operating systems &mdash; Linux, Windows, and macOS &mdash; the\n`cargo` build uses prebuilt `protoc` binaries from\n[protoc-bin-vendored](https://crates.io/crates/protoc-bin-vendored) crate to\naccomplish this. So everything should transparently work with no intervention\nneeded and just running `cargo build` is enough.\n\nBut there are non-Tier-1 operating systems where Buck2 might be used, and the\nabove crate won't work, and you'll need to override it. You will need to install\n`protoc` from some other source. Doing that is out of scope for this document.\nBut once you've done so, you can use the following two environment variables\n**before running `cargo build`** to override the crate:\n\n- `BUCK2_BUILD_PROTOC`, the path to the `protoc` binary\n- `BUCK2_BUILD_PROTOC_INCLUDE`, the path to the protocol buffers header file\n  directory\n\nAssuming you have your protocol buffers installation located in `/opt/protobuf`,\nyou can do the following:\n\n```bash\nexport BUCK2_BUILD_PROTOC=/opt/protobuf/bin/protoc\nexport BUCK2_BUILD_PROTOC_INCLUDE=/opt/protobuf/include\n```\n\nBuck2 should then build with `cargo` using the steps above.\n\n## Coding conventions\n\nBeyond the obvious (well-tested, easy to read) we prefer guidelines that are\nautomatically enforced, e.g. through Rustfmt, Clippy or the custom linter we\nhave written. Some rules:\n\n- Follow standard `rustfmt` conventions.\n- Use the utilities from Gazebo where they are useful, in particular, `dupe`.\n- Prefer `to_owned` to convert `&str` to `String`.\n- Qualify `anyhow::Result` rather than `use anyhow::Result`.\n- Most errors should be returned as `anyhow::Result`. Inspecting errors outside\n  tests and the top-level error handler is strongly discouraged.\n- Most errors should be constructed with `thiserror` deriving `enum` values, not\n  raw `anyhow!`.\n- We use the `derivative` library to derive the `PartialEq` and `Hash` traits\n  when some fields should be ignored.\n- Prefer `use crate::foo::bar` over `use super::bar` or `use crate::foo::*`,\n  apart from test modules which often have `use super::*` at the top.\n- Modules should either have submodules or types/functions/constants, but not\n  both.\n- Prefer `anyhow::Error` for checking internal invariants that are maintained\n  between multiple files, while `panic!`/`unreachable!` are reasonable if the\n  invariant is file-local.\n\n### Error messages\n\n- Names (of variables, targets, files, etc) should be quoted with backticks,\n  e.g. `` Variable `x` not defined ``.\n- Lists should use square brackets, e.g. `` Available targets: [`aa`, `bb`] ``.\n- Error messages should start with an upper case letter. Error messages should\n  not end with a period.\n\n## Open-source differences\n\nMost code is shared as-is between open source and the internal Meta version of\nBuck2. However, there are some exceptions:\n\n- The open-source remote execution client is different, because our internal one\n  works with custom servers/infrastructure that is not publicly available.\n- There are places controlled with `is_open_source()` which change configuration\n  between the internal and open source versions.\n- Some places use `@oss-enable` or `@oss-disable` to comment/uncomment lines of\n  code. The internal code is visible, but the comment markers are moved during\n  export/import of code.\n"
        },
        {
          "name": "LICENSE-APACHE",
          "type": "blob",
          "size": 11.05859375,
          "content": "Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"[]\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright [yyyy] [name of copyright owner]\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n"
        },
        {
          "name": "LICENSE-MIT",
          "type": "blob",
          "size": 1.0625,
          "content": "MIT License\n\nCopyright (c) Meta Platforms, Inc. and affiliates.\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "NOTICE",
          "type": "blob",
          "size": 0.2216796875,
          "content": "The code in `app/buck2_error_derive` is adapted from thiserror (https://github.com/dtolnay/thiserror).\n\nThe code in `shed/completion_verify/src/runtime` is adapted from `complete_pty`\n(https://crates.io/crates/completest_pty).\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 7.0302734375,
          "content": "<div class=\"title-block\" style=\"text-align: center;\" align=\"center\">\n\n# Buck2: fast multi-language build system\n\n![Version] ![License] [![Build Status]][CI]\n\n[Version]:\n  https://img.shields.io/badge/release-unstable,%20\"Developer%20Edition\"-orange.svg\n[License]:\n  https://img.shields.io/badge/license-MIT%20OR%20Apache--2.0-blueviolet.svg\n[Build Status]:\n  https://github.com/facebook/buck2/actions/workflows/build-and-test.yml/badge.svg\n[CI]: https://github.com/facebook/buck2/actions/workflows/build-and-test.yml\n\n<strong>\n  <a href=\"https://buck2.build\">Homepage</a>&nbsp;&nbsp;&bull;&nbsp;&nbsp;<a href=\"https://buck2.build/docs/about/getting_started/\">Getting Started</a>&nbsp;&nbsp;&bull;&nbsp;&nbsp;<a href=\"./CONTRIBUTING.md\">Contributing</a>\n</strong>\n\n---\n\n</div>\n\nBuck2 is a fast, hermetic, multi-language build system, and a direct successor\nto the original [Buck build system](https://buck.build) (\"Buck1\") &mdash; both\ndesigned by Meta.\n\nBut what do those words really mean for a build system &mdash; and why might\nthey interest you? \"But why Buck2?\" you might ask, when so many build systems\nalready exist?\n\n- **Fast**. It doesn't matter whether a single build command takes 60 seconds to\n  complete, or 0.1 seconds: when you have to build things, Buck2 doesn't waste\n  time &mdash; it calculates the critical path and gets out of the way, with\n  minimal overhead. It's not just the core design, but also careful attention to\n  detail that makes Buck2 so snappy. Buck2 is up to 2x faster than Buck1 _in\n  practice_[^perf-note]. So you spend more time iterating, and less time\n  waiting.\n- **Hermetic**. When using Remote Execution[^hermetic-re-only], Buck2 becomes\n  _hermetic_: it is required for a build rule to correctly declare all of its\n  inputs; if they aren't specified correctly (e.g. a `.c` file needs a `.h` file\n  that isn't correctly specified), the build will fail. This enforced\n  correctness helps avoids entire classes of errors that most build systems\n  allow, and helps ensure builds work everywhere for all users. And Buck2\n  correctly tracks dependencies with far better accuracy than Buck1, in more\n  languages, across more scenarios. That means \"it compiles on my machine\" can\n  become a thing of the past.\n- **Multi-language**. Many teams have to deal with multiple programming\n  languages that have complex inter-dependencies, and struggle to express that.\n  Most people settle with `make` and tie together `dune` to `pip` and `cargo`.\n  But then how do you run test suites, code coverage, or query code databases?\n  Buck2 is designed to support multiple languages from the start, with\n  abstractions for interoperation. And because it's completely scriptable, and\n  _users_ can implement language support &mdash; it's incredibly flexible. Now\n  your Python library can depend on an OCaml library, and your OCaml library can\n  depend on a Rust crate &mdash; and with a single build tool, you have a\n  consistent UX to build and test and integrate all of these components.\n\n[^perf-note]:\n    This number comes from internal usage of Buck1 versus Buck2 at Meta. Please\n    note that _appropriate_ comparisons with systems like Bazel have yet to be\n    performed; Buck1 is the baseline because it's simply what existed and what\n    had to be replaced. Please benchmark Buck2 against your favorite tools and\n    let us know how it goes!\n\n[^hermetic-re-only]:\n    Buck2 currently does not sandbox _local-only_ build steps; in contrast,\n    Buck2 using Remote Execution is _always_ hermetic by design. The vast\n    majority of build rules are remote compatible, as well. Despite that, we\n    hope to lift this restriction in the (hopefully short-term) future so that\n    local-only builds are hermetic as well.\n\nIf you're familiar with systems like Buck1, [Bazel](https://bazel.build/), or\n[Pants](https://www.pantsbuild.org/) &mdash; then Buck2 will feel warm and cozy,\nand these ideas will be familiar. But then why create Buck2 if those already\nexist? Because that isn't all &mdash; the page\n_[\"Why Buck2?\"](https://buck2.build/docs/about/why/)_ on our website goes into\nmore detail on several other important design critera that separate Buck2 from\nthe rest of the pack, including:\n\n- Support for ultra-large repositories, through filesystem virtualization and\n  watching for changes to the filesystem.\n- Totally language-agnostic core executable, with a small API &mdash; even C/C++\n  support is written as a library. You can write everything from scratch, if you\n  wanted.\n- \"Buck Extension Language\" (BXL) can be used for self-introspection of the\n  build system, allowing automation tools to inspect and run actions in the\n  build graph. This allows you to more cleanly support features that need graph\n  introspection, like LSPs or compilation databases.\n- Support for distributed compilation, using the same Remote Execution API that\n  is supported by Bazel. Existing solutions like BuildBarn, BuildBuddy, EngFlow,\n  and NativeLink all work today.\n- An efficient, robust, and sound design &mdash; inspired by modern theory of\n  build systems and incremental computation.\n- And more!\n\nIf these headline features make you interested &mdash; check out the\n[Getting Started](https://buck2.build/docs/getting_started/) guide!\n\n## 🚧🚧🚧 **Warning** 🚧🚧🚧 &mdash; rough terrain lies ahead\n\nBuck2 was released recently and currently **does not have a stable release tag\nat this time**. Pre-release tags/binaries, and stable tags/binaries, will come\nat later dates. Despite that, it is used extensively inside of Meta on vast\namounts of code every day, and [buck2-prelude](/prelude/) is the same code used\ninternally for all these builds, as well.\n\nMeta just uses the latest committed `HEAD` version of Buck2 at all times. Your\nmileage may vary &mdash; but at the moment, tracking `HEAD` is ideal for\nsubmitting bug reports and catching regressions.\n\nThe short of this is that you should consider this project and its code to be\nbattle-tested and working, but outside consumers will encounter quite a lot of\nrough edges right now &mdash; several features are missing or in progress, some\ntoolchains from Buck1 are missing, and you'll probably have to fiddle with\nthings more than necessary to get it nice and polished.\n\nPlease provide feedback by submitting\n[issues and questions!](https://github.com/facebook/buck2/issues)\n\n## Installing Buck2\n\nYou can get started by downloading the\n[latest buck2 binary](https://github.com/facebook/buck2/releases/tag/latest) for\nyour platform. The `latest` tag always refers to a recent commit; it is updated\non every single push to the GitHub repository, so it will always be a recent\nversion.\n\nYou can also compile Buck2 from source, if a binary isn't immediately available\nfor your use; check out the [HACKING.md](./HACKING.md) file for information.\n\n## Terminology conventions\n\nFrequently used terms and their definitions can be found on the\n[glossary page](https://buck2.build/docs/concepts/glossary/).\n\n## License\n\nBuck2 is licensed under both the MIT license and Apache-2.0 license; the exact\nterms can be found in the [LICENSE-MIT](LICENSE-MIT) and\n[LICENSE-APACHE](LICENSE-APACHE) files, respectively.\n"
        },
        {
          "name": "action_error_handler",
          "type": "tree",
          "content": null
        },
        {
          "name": "allocative",
          "type": "tree",
          "content": null
        },
        {
          "name": "app",
          "type": "tree",
          "content": null
        },
        {
          "name": "app_dep_graph_rules",
          "type": "tree",
          "content": null
        },
        {
          "name": "buck2.bat",
          "type": "blob",
          "size": 0.3515625,
          "content": "@REM Copyright (c) Meta Platforms, Inc. and affiliates.\n@REM\n@REM This source code is licensed under both the MIT license found in the\n@REM LICENSE-MIT file in the root directory of this source tree and the Apache\n@REM License, Version 2.0 found in the LICENSE-APACHE file in the root directory\n@REM of this source tree.\n\n@echo off\nfbpython \"%~dp0buck2.py\" %*\n"
        },
        {
          "name": "buck2.py",
          "type": "blob",
          "size": 2.0439453125,
          "content": "#!/usr/bin/env python3\n# Copyright (c) Meta Platforms, Inc. and affiliates.\n#\n# This source code is licensed under both the MIT license found in the\n# LICENSE-MIT file in the root directory of this source tree and the Apache\n# License, Version 2.0 found in the LICENSE-APACHE file in the root directory\n# of this source tree.\n\nimport argparse\nimport platform\nimport subprocess\nfrom typing import List, Tuple\n\n\ndef parse_arguments() -> Tuple[argparse.Namespace, List[str]]:\n    parser = argparse.ArgumentParser(\n        description=\"Builds buck2 locally and then runs it.\",\n        formatter_class=argparse.RawTextHelpFormatter,\n    )\n    parser.add_argument(\n        \"--run-isolation-dir\",\n        type=str,\n        default=\"\",\n        help=\"Isolation dir for the inner command\",\n    )\n    parser.add_argument(\n        \"--echo-run-cmd\",\n        action=\"store_true\",\n        help=\"Echo the run command before executing\",\n    )\n    return parser.parse_known_args()\n\n\ndef get_extra_build_params(args: argparse.Namespace) -> List[str]:\n    system_platform = platform.system()\n    if system_platform == \"Windows\":\n        return [\"@fbcode//mode/opt-win\"]\n\n    params = [\"-m\", \"opt\"]\n\n    arch_platform = platform.machine()\n    if arch_platform == \"x86_64\":\n        params.extend([\"-m\", \"x86_64\"])\n    elif arch_platform == \"arm64\":\n        params.extend([\"-m\", \"arm64\"])\n\n    return params\n\n\ndef build_command(args: argparse.Namespace, extra_args: List[str]) -> List[str]:\n    cmd = [\"buck2\", \"run\", \"fbcode//buck2:buck2\"]\n    inner_buck_isolation_dir = (\n        args.run_isolation_dir if args.run_isolation_dir else \"v2.self\"\n    )\n    inner_buck_isolation_dir_arg = [f\"--isolation-dir={inner_buck_isolation_dir}\"]\n\n    cmd.extend(get_extra_build_params(args))\n\n    cmd.append(\"--\")\n    cmd.extend(inner_buck_isolation_dir_arg)\n    cmd.extend(extra_args)\n\n    if args.echo_run_cmd:\n        print(\" \".join(cmd))\n\n    return cmd\n\n\ndef main() -> None:\n    args, extra_args = parse_arguments()\n    cmd = build_command(args, extra_args)\n    subprocess.run(cmd)\n\n\nif __name__ == \"__main__\":\n    main()\n"
        },
        {
          "name": "buck_rust_binary.bzl",
          "type": "blob",
          "size": 1.443359375,
          "content": "# Copyright (c) Meta Platforms, Inc. and affiliates.\n#\n# This source code is licensed under both the MIT license found in the\n# LICENSE-MIT file in the root directory of this source tree and the Apache\n# License, Version 2.0 found in the LICENSE-APACHE file in the root directory\n# of this source tree.\n\nload(\"@fbcode_macros//build_defs:rust_binary.bzl\", \"rust_binary\")\nload(\"@fbcode_macros//build_defs/lib:link_styles.bzl\", \"link_styles\")\n\ndef buck_rust_binary(**kwargs):\n    kwargs.setdefault(\"edition\", \"2021\")\n    if kwargs.get(\"link_style\") == None:\n        link_style = link_styles.default()\n        kwargs[\"link_style\"] = select({\n            \"DEFAULT\": link_style,\n            \"ovr_config//os:macos\": \"static\",\n        })\n\n    # Link group is currently used automatically for rust in dev mode. Unfortunately, it builds\n    # a binary that is not relocatable and it checks for dev mode by reading the build mode buckconfig.\n    # If we don't disable link groups, we will also end up building a non-relocatable binary when\n    # using opt modifier because opt modifier does not change build mode buckconfig. Work around this\n    # by disabling link groups for now.\n    # TODO(scottcao): Delete this line once link group macros are properly selectified.\n    kwargs[\"link_group_map\"] = []\n\n    # JEMalloc is not (yet!) the default on MacOS so add the allocator\n    # explicitly on all platforms here.\n    kwargs.setdefault(\"allocator\", \"jemalloc\")\n    rust_binary(**kwargs)\n"
        },
        {
          "name": "build",
          "type": "tree",
          "content": null
        },
        {
          "name": "cfg",
          "type": "tree",
          "content": null
        },
        {
          "name": "ci.bzl",
          "type": "blob",
          "size": 0.5791015625,
          "content": "# Copyright (c) Meta Platforms, Inc. and affiliates.\n#\n# This source code is licensed under both the MIT license found in the\n# LICENSE-MIT file in the root directory of this source tree and the Apache\n# License, Version 2.0 found in the LICENSE-APACHE file in the root directory\n# of this source tree.\n\nload(\"@fbsource//tools/target_determinator/macros:ci.bzl\", \"ci\")\n\n# We want to test most things on all platforms we support, but for various reasons,\n# this PACKAGE should be treated as Linux-only.\ndef ci_linux_only():\n    ci.package(\n        [ci.linux()],\n        overwrite = True,\n    )\n"
        },
        {
          "name": "defs.bzl",
          "type": "blob",
          "size": 2.2080078125,
          "content": "# Copyright (c) Meta Platforms, Inc. and affiliates.\n#\n# This source code is licensed under both the MIT license found in the\n# LICENSE-MIT file in the root directory of this source tree and the Apache\n# License, Version 2.0 found in the LICENSE-APACHE file in the root directory\n# of this source tree.\n\nload(\"@fbcode_macros//build_defs:platform_utils.bzl\", \"platform_utils\")\nload(\"@prelude//decls:common.bzl\", \"buck\")\nload(\"@prelude//os_lookup:defs.bzl\", \"OsLookup\")\n\ndef _buck2_bundle_impl(ctx: AnalysisContext) -> list[Provider]:\n    \"\"\"\n    Produce a directory layout that is similar to the one our release binary\n    uses, this allows setting a path for Tpx relative to BUCK2_BINARY_DIR.\n    \"\"\"\n    target_is_windows = ctx.attrs._target_os_type[OsLookup].platform == \"windows\"\n\n    materialisations = []\n\n    buck2 = ctx.attrs.buck2[DefaultInfo].default_outputs[0]\n    materialisations.extend(ctx.attrs.buck2[DefaultInfo].other_outputs)\n\n    buck2_client = ctx.attrs.buck2_client[DefaultInfo].default_outputs[0]\n    materialisations.extend(ctx.attrs.buck2_client[DefaultInfo].other_outputs)\n\n    tpx = ctx.attrs.tpx[DefaultInfo].default_outputs[0]\n    materialisations.extend(ctx.attrs.tpx[DefaultInfo].other_outputs)\n\n    binary_extension = \".exe\" if target_is_windows else \"\"\n    buck2_binary = \"buck2\" + binary_extension\n    buck2_tpx_binary = \"buck2-tpx\" + binary_extension\n    buck2_daemon_binary = \"buck2-daemon\" + binary_extension\n    out = ctx.actions.copied_dir(\"out\", {buck2_binary: buck2_client, buck2_tpx_binary: ctx.actions.symlink_file(buck2_tpx_binary, tpx), buck2_daemon_binary: buck2})\n\n    return [DefaultInfo(out, other_outputs = materialisations), RunInfo(cmd_args(out.project(\"buck2\" + binary_extension), hidden = materialisations))]\n\n_buck2_bundle = rule(\n    impl = _buck2_bundle_impl,\n    attrs = {\n        \"buck2\": attrs.dep(),\n        \"buck2_client\": attrs.dep(),\n        \"labels\": attrs.list(attrs.string(), default = []),\n        \"tpx\": attrs.dep(),\n        \"_target_os_type\": buck.target_os_type_arg(),\n    },\n)\n\ndef buck2_bundle(**kwargs):\n    cxx_platform = platform_utils.get_cxx_platform_for_base_path(native.package_name())\n    kwargs[\"default_target_platform\"] = cxx_platform.target_platform\n    _buck2_bundle(**kwargs)\n"
        },
        {
          "name": "dice",
          "type": "tree",
          "content": null
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "explorer",
          "type": "tree",
          "content": null
        },
        {
          "name": "flake.lock",
          "type": "blob",
          "size": 1.9921875,
          "content": "{\n  \"nodes\": {\n    \"flake-utils\": {\n      \"inputs\": {\n        \"systems\": \"systems\"\n      },\n      \"locked\": {\n        \"lastModified\": 1726560853,\n        \"narHash\": \"sha256-X6rJYSESBVr3hBoH0WbKE5KvhPU5bloyZ2L4K60/fPQ=\",\n        \"owner\": \"numtide\",\n        \"repo\": \"flake-utils\",\n        \"rev\": \"c1dfcf08411b08f6b8615f7d8971a2bfa81d5e8a\",\n        \"type\": \"github\"\n      },\n      \"original\": {\n        \"owner\": \"numtide\",\n        \"repo\": \"flake-utils\",\n        \"type\": \"github\"\n      }\n    },\n    \"nixpkgs\": {\n      \"locked\": {\n        \"lastModified\": 1728979988,\n        \"narHash\": \"sha256-GBJRnbFLDg0y7ridWJHAP4Nn7oss50/VNgqoXaf/RVk=\",\n        \"owner\": \"nixos\",\n        \"repo\": \"nixpkgs\",\n        \"rev\": \"7881fbfd2e3ed1dfa315fca889b2cfd94be39337\",\n        \"type\": \"github\"\n      },\n      \"original\": {\n        \"owner\": \"nixos\",\n        \"ref\": \"nixpkgs-unstable\",\n        \"repo\": \"nixpkgs\",\n        \"type\": \"github\"\n      }\n    },\n    \"root\": {\n      \"inputs\": {\n        \"flake-utils\": \"flake-utils\",\n        \"nixpkgs\": \"nixpkgs\",\n        \"rust-overlay\": \"rust-overlay\"\n      }\n    },\n    \"rust-overlay\": {\n      \"inputs\": {\n        \"nixpkgs\": [\n          \"nixpkgs\"\n        ]\n      },\n      \"locked\": {\n        \"lastModified\": 1729184663,\n        \"narHash\": \"sha256-uNyi5vQrzaLkt4jj6ZEOs4+4UqOAwP6jFG2s7LIDwIk=\",\n        \"owner\": \"oxalica\",\n        \"repo\": \"rust-overlay\",\n        \"rev\": \"16fb78d443c1970dda9a0bbb93070c9d8598a925\",\n        \"type\": \"github\"\n      },\n      \"original\": {\n        \"owner\": \"oxalica\",\n        \"repo\": \"rust-overlay\",\n        \"type\": \"github\"\n      }\n    },\n    \"systems\": {\n      \"locked\": {\n        \"lastModified\": 1681028828,\n        \"narHash\": \"sha256-Vy1rq5AaRuLzOxct8nz4T6wlgyUR7zLU309k9mBC768=\",\n        \"owner\": \"nix-systems\",\n        \"repo\": \"default\",\n        \"rev\": \"da67096a3b9bf56a91d16901293e51ba5b49a27e\",\n        \"type\": \"github\"\n      },\n      \"original\": {\n        \"owner\": \"nix-systems\",\n        \"repo\": \"default\",\n        \"type\": \"github\"\n      }\n    }\n  },\n  \"root\": \"root\",\n  \"version\": 7\n}\n"
        },
        {
          "name": "flake.nix",
          "type": "blob",
          "size": 1.7734375,
          "content": "# Copyright (c) Meta Platforms, Inc. and affiliates.\n#\n# This source code is licensed under both the MIT license found in the\n# LICENSE-MIT file in the root directory of this source tree and the Apache\n# License, Version 2.0 found in the LICENSE-APACHE file in the root directory\n# of this source tree.\n{\n  description = \"A flake for hacking on and building buck2\";\n  inputs = {\n    nixpkgs.url = \"github:nixos/nixpkgs/nixpkgs-unstable\";\n    flake-utils.url = \"github:numtide/flake-utils\";\n    rust-overlay = {\n      url = \"github:oxalica/rust-overlay\";\n      inputs = {\n        nixpkgs.follows = \"nixpkgs\";\n      };\n    };\n  };\n\n  outputs = { self, nixpkgs, flake-utils, rust-overlay }:\n    flake-utils.lib.eachDefaultSystem (system: let\n      pkgs = import nixpkgs {\n        inherit system;\n        overlays = [ (import rust-overlay) ];\n      };\n\n    rust-version = pkgs.rust-bin.fromRustupToolchainFile ./rust-toolchain;\n    my-rust-bin = rust-version.override {\n      extensions = [ \"rust-analyzer\" \"rust-src\" ];\n    };\n\n    in {\n      devShells.default = pkgs.mkShell {\n        buildInputs = pkgs.lib.optionals pkgs.stdenv.isDarwin (with pkgs.darwin.apple_sdk.frameworks; [\n          CoreFoundation\n          CoreServices\n          IOKit\n          Security\n        ]);\n        packages = [ pkgs.cargo-bloat my-rust-bin pkgs.mold-wrapped pkgs.reindeer pkgs.lld_16 pkgs.clang_16 ];\n        shellHook = \n          ''\n            export BUCK2_BUILD_PROTOC=${pkgs.protobuf}/bin/protoc\n            export BUCK2_BUILD_PROTOC_INCLUDE=${pkgs.protobuf}/include\n          ''\n          # enable mold for linux users, for more tolerable link times\n          + pkgs.lib.optionalString pkgs.stdenv.isLinux ''\n            export RUSTFLAGS=\"-C linker=clang -C link-arg=-fuse-ld=mold $RUSTFLAGS\"\n          '';\n      };\n    });\n}\n"
        },
        {
          "name": "gazebo",
          "type": "tree",
          "content": null
        },
        {
          "name": "host_sharing",
          "type": "tree",
          "content": null
        },
        {
          "name": "integrations",
          "type": "tree",
          "content": null
        },
        {
          "name": "lint_levels.bzl",
          "type": "blob",
          "size": 6.1201171875,
          "content": "# Copyright (c) Meta Platforms, Inc. and affiliates.\n#\n# This source code is licensed under both the MIT license found in the\n# LICENSE-MIT file in the root directory of this source tree and the Apache\n# License, Version 2.0 found in the LICENSE-APACHE file in the root directory\n# of this source tree.\n\n# buildifier: keep sorted\nCLIPPY_ALLOW = [\n    \"clippy::arc-with-non-send-sync\",  # Needs triage, see 'dashmap_directory_interner.rs:39:20' (`DashMap` is not `Send` or `Sync`)\n    \"clippy::assigning-clones\",  # FIXME new in Rust 1.78.0\n    \"clippy::await_holding_lock\",  # FIXME new in Rust 1.74\n    \"clippy::blocks-in-conditions\",  # FIXME new in Rust 1.77.1\n    \"clippy::bool-assert-comparison\",  # Sometimes more clear to write it this way\n    \"clippy::bool-to-int-with-if\",  # Using if branches to return 1 or 0 is valid, but this complains that we should use `int::from`, which is arguably less clear\n    \"clippy::cognitive_complexity\",  # This is an arbitrary linter\n    \"clippy::collapsible-else-if\",  # Sometimes nesting better expresses intent\n    \"clippy::collapsible-if\",  # Sometimes nesting better expresses intent\n    \"clippy::comparison_chain\",  # Generates worse code and harder to read\n    \"clippy::comparison_to_empty\",  # x == \"\" is clearer than x.is_empty()\n    \"clippy::derive_partial_eq_without_eq\",  # In generated protobuf code\n    \"clippy::disallowed_names\",  # Not using foo, bar, baz in test data is silly\n    \"clippy::enum-variant-names\",  # Sometimes you do want the same prefixes\n    \"clippy::from_iter_instead_of_collect\",  # https://fb.workplace.com/groups/buck2core/posts/835300915330313\n    \"clippy::implicit-hasher\",  # Makes code more complex for little benefit\n    \"clippy::len-without-is-empty\",  # len() == 0 is perfectly clear\n    \"clippy::manual-range-contains\",  # a <= b && b <= c is way clearer than (a..=c).contains(&b)\n    \"clippy::many_single_char_names\",  # match(a,b,c,d,e) sometimes makes sense\n    \"clippy::match-like-matches-macro\",  # Using matches! is sometimes clearer, sometimes not\n    \"clippy::match-wild-err-arm\",  # Seems reasonable to panic on Err(_)\n    \"clippy::missing-safety-doc\",  # Documentation should be tailored to the reader, not the linter\n    \"clippy::module_inception\",  # Unnecessary restriction.\n    \"clippy::multiple-bound-locations\",  # FIXME New in 1.78.0\n    \"clippy::mut_from_ref\",  # Tries to check soundness, which Rust already does\n    \"clippy::mutable_key_type\",  # FIXME new in Rust 1.80\n    \"clippy::naive-bytecount\",  # Requires an extra dependency for marginal gains.\n    \"clippy::needless_borrows_for_generic_args\",  # FIXME new in Rust 1.74\n    \"clippy::needless_collect\",  # False positives: doesn't understand lifetimes, or e.g. DoubleEndedIterator.\n    \"clippy::needless_lifetimes\",  # This is throwing false positives\n    \"clippy::needless_pass_by_ref_mut\",  # Mostly identifies cases where we are accepting `&mut T` because we logically accept a mut reference but don't technically require it (i.e. we want the api to enforce the caller has a mut ref, but we don't technically need it).\n    \"clippy::needless_raw_string_hashes\",  # False positives\n    \"clippy::needless_update\",  # Our RE structs have slightly different definitions in internal and OSS.\n    \"clippy::new_without_default\",  # Default is not always useful\n    \"clippy::non_canonical_partial_ord_impl\",  # Almost exclusively identifies cases where a type delegates ord/partial ord to something else (including Derivative-derived PartialOrd) and in that case being explicit about that delegation is better than following some canonical partialord impl.\n    \"clippy::question_mark\",\n    \"clippy::single_match\",  # Sometimes a single match looks good\n    \"clippy::too_long_first_doc_paragraph\",  # FIXME new in Rust 1.82.0\n    \"clippy::too_many_arguments\",  # This is an arbitrary limit set on number of arguments and not always useful\n    \"clippy::type_complexity\",  # This is an arbitrary limit set on number of type parameterizations and not always useful\n    \"clippy::unconditional_recursion\",  # FIXME new in Rust 1.77.1\n    \"clippy::unnecessary-wraps\",  # Sometimes unnecessary wraps provide the right API\n    \"clippy::unwrap-or-default\",  # Defaults aren't always more clear as it removes the type information when reading code\n    \"clippy::useless_conversion\",  # Removed all obvious but there are some reports I'm unclear how to fix\n    \"clippy::wrong_self_convention\",  # These rules are useless pedantry\n]\n\n# buildifier: keep sorted\nCLIPPY_DENY = [\n    \"clippy::all\",\n    \"clippy::await_holding_lock\",\n    \"clippy::await_holding_refcell_ref\",\n    \"clippy::dbg_macro\",\n    \"clippy::debug_assert_with_mut_call\",\n    \"clippy::empty_enum\",\n    \"clippy::filter_map_next\",\n    \"clippy::flat_map_option\",\n    \"clippy::large_stack_arrays\",\n    \"clippy::linkedlist\",\n    \"clippy::macro_use_imports\",\n    \"clippy::maybe_infinite_iter\",\n    \"clippy::mut_mut\",\n    \"clippy::needless_borrow\",\n    \"clippy::needless_continue\",\n    \"clippy::needless_range_loop\",\n    \"clippy::nonstandard_macro_braces\",\n    \"clippy::rc_mutex\",\n    \"clippy::ref_option_ref\",\n    \"clippy::rest_pat_in_fully_bound_structs\",\n    \"clippy::same_functions_in_if_condition\",\n    \"clippy::str_to_string\",\n    \"clippy::string_to_string\",\n    \"clippy::todo\",\n    \"clippy::trivially_copy_pass_by_ref\",\n    \"clippy::tuple_array_conversions\",\n    \"clippy::unnecessary-literal-unwrap\",  # TBD if this should be CLIPPY_ALLOW\n    \"clippy::useless-vec\",  # TBD if this should be CLIPPY_ALLOW\n    \"clippy::useless_transmute\",\n    \"clippy::verbose_file_reads\",\n    \"dead_code\",\n    \"let_underscore_drop\",\n    \"unexpected_cfgs\",\n    \"unused_extern_crates\",\n    \"unused_imports\",\n    \"unused_macros\",\n    \"unused_variables\",\n]\n\n# buildifier: keep sorted\nCLIPPY_AUTOFIX = [\n    # Only add machine-fixable warnings in this list, or we'll see them all\n    # the time in CI.\n    \"clippy::cloned_instead_of_copied\",\n    \"clippy::inconsistent_struct_constructor\",\n    \"clippy::inefficient_to_string\",\n    \"clippy::let_unit_value\",\n    \"clippy::map_flatten\",\n    \"clippy::map_unwrap_or\",\n    \"clippy::needless_bitwise_bool\",\n    \"clippy::needless_borrow\",\n    \"clippy::range_minus_one\",\n    \"clippy::unwrap_or_default\",\n    \"clippy::useless-conversion\",\n]\n"
        },
        {
          "name": "prelude",
          "type": "tree",
          "content": null
        },
        {
          "name": "proto_defs.bzl",
          "type": "blob",
          "size": 2.2236328125,
          "content": "# Copyright (c) Meta Platforms, Inc. and affiliates.\n#\n# This source code is licensed under both the MIT license found in the\n# LICENSE-MIT file in the root directory of this source tree and the Apache\n# License, Version 2.0 found in the LICENSE-APACHE file in the root directory\n# of this source tree.\n\nload(\"@fbcode//buck2:buck_rust_binary.bzl\", \"buck_rust_binary\")\nload(\"@fbcode_macros//build_defs:native_rules.bzl\", \"buck_genrule\")\nload(\"@fbcode_macros//build_defs:rust_library.bzl\", \"rust_library\")\n\ndef rust_protobuf_library(\n        name,\n        srcs,\n        build_script,\n        protos,\n        build_env = None,\n        deps = None,\n        test_deps = None,\n        doctests = True):\n    build_name = name + \"-build\"\n    proto_name = name + \"-proto\"\n\n    buck_rust_binary(\n        name = build_name,\n        srcs = [build_script],\n        crate_root = build_script,\n        deps = [\n            \"fbcode//buck2/app/buck2_protoc_dev:buck2_protoc_dev\",\n        ],\n    )\n\n    build_env = build_env or {}\n    build_env.update(\n        {\n            \"PROTOC\": \"$(exe fbsource//third-party/protobuf:protoc)\",\n            \"PROTOC_INCLUDE\": \"$(location fbsource//third-party/protobuf:google.protobuf)\",\n        },\n    )\n\n    buck_genrule(\n        name = proto_name,\n        srcs = protos,\n        # The binary doesn't look at the command line, but with Buck1, if we don't have $OUT\n        # on the command line, it doesn't set the environment variable, so put it on.\n        cmd = \"$(exe :{}) --required-for-buck1=$OUT\".format(build_name),\n        env = build_env,\n        out = \".\",\n    )\n\n    rust_library(\n        name = name,\n        srcs = srcs,\n        doctests = doctests,\n        env = {\n            # This is where prost looks for generated .rs files\n            \"OUT_DIR\": \"$(location :{})\".format(proto_name),\n        },\n        named_deps = {\n            # \"prost\" is https://github.com/tokio-rs/prost, which is used\n            # to generate Rust code from protobuf definitions.\n            \"generated_prost_target\": \":{}\".format(proto_name),\n        },\n        labels = [\n            \"generated_protobuf_library_rust\",\n        ],\n        deps = [\n            \"fbsource//third-party/rust:prost\",\n        ] + (deps or []),\n        test_deps = test_deps,\n    )\n"
        },
        {
          "name": "remote_execution",
          "type": "tree",
          "content": null
        },
        {
          "name": "rust-project.sh",
          "type": "blob",
          "size": 0.7841796875,
          "content": "#!/usr/bin/env bash\n# Copyright (c) Meta Platforms, Inc. and affiliates.\n#\n# This source code is licensed under both the MIT license found in the\n# LICENSE-MIT file in the root directory of this source tree and the Apache\n# License, Version 2.0 found in the LICENSE-APACHE file in the root directory\n# of this source tree.\n\n# This script is used to generate rust-project.json when using internal rust-analyzer\n# on internal VSCode on devserver/OD.\n# If this is not working, make sure your VSCode's root workspace is open at fbsource.\n# Check out the full wiki guide at https://www.internalfb.com/intern/wiki/Rust-at-meta/rust-project/\n\n# Fail if we have any errors\nset -e\n\n# Change to this directory\ncd -- \"$(dirname -- \"$0\")\"\n\narc rust-project develop fbcode//buck2:buck2 --out ../../rust-project.json\n"
        },
        {
          "name": "rust-toolchain",
          "type": "blob",
          "size": 0.7109375,
          "content": "[toolchain]\n# When you update `channel` below you must:\n#\n# * Update the `rustc_version` directive (read by `app/buck2_core/build.rs`).\n# * Update `HACKING.md` (two instances).\n# * Update `docs/about/getting_started.md` (two instances).\n# * Update `../common/rust/tools/reindeer/rust-toolchain` (one instance)\n# * Update `../target_determinator/oss/rust-toolchain` (one instance)\n# * Update `../common/ocaml/interop/rust-toolchain` (one instance)\n#   * NOTE: You may have to change this ocaml file in a follow up commit as ocamlrep\n#     has a dependency on buck2 git trunk.\n\n# @rustc_version: rustc 1.83.0-nightly (6b9676b45 2024-10-12)\nchannel = \"nightly-2024-10-13\"\ncomponents = [\"llvm-tools-preview\",\"rustc-dev\",\"rust-src\"]\n"
        },
        {
          "name": "rustfmt.toml",
          "type": "blob",
          "size": 0.2392578125,
          "content": "# Get help on options with `rustfmt --help=config`\n# Please keep these in alphabetical order.\nedition = \"2021\"\ngroup_imports = \"StdExternalCrate\"\nimports_granularity = \"Item\"\nmerge_derives = false\nuse_field_init_shorthand = true\nversion = \"Two\"\n"
        },
        {
          "name": "shed",
          "type": "tree",
          "content": null
        },
        {
          "name": "shim",
          "type": "tree",
          "content": null
        },
        {
          "name": "starlark-rust",
          "type": "tree",
          "content": null
        },
        {
          "name": "superconsole",
          "type": "tree",
          "content": null
        },
        {
          "name": "test.py",
          "type": "blob",
          "size": 14.869140625,
          "content": "#!/usr/bin/env python3\n# Copyright (c) Meta Platforms, Inc. and affiliates.\n#\n# This source code is licensed under both the MIT license found in the\n# LICENSE-MIT file in the root directory of this source tree and the Apache\n# License, Version 2.0 found in the LICENSE-APACHE file in the root directory\n# of this source tree.\n\n\"\"\"\nFake script that acts as a test\n\"\"\"\n\nimport argparse\nimport importlib.machinery\nimport json\nimport os\nimport signal\nimport subprocess\nimport sys\nimport tempfile\nimport time\nfrom contextlib import contextmanager\nfrom enum import Enum\nfrom pathlib import Path\nfrom typing import Dict, Generator, Iterable, List, Optional\n\n# To prevent the next line from creating a pycache dir\nsys.dont_write_bytecode = True\nlint_levels = importlib.machinery.SourceFileLoader(\n    \"lint_levels\", str(Path(__file__).parent / \"lint_levels.bzl\")\n).load_module()\n\n\ndef is_opensource() -> bool:\n    # @oss-disable: return False \n    return True # @oss-enable\n\n\ndef is_macos() -> bool:\n    return sys.platform == \"darwin\"\n\n\ndef is_windows() -> bool:\n    return sys.platform == \"win32\"\n\n\nclass Colors(Enum):\n    # Copied from https://stackoverflow.com/questions/287871/how-to-print-colored-text-to-the-terminal\n    HEADER = \"\\033[95m\"\n    OKBLUE = \"\\033[94m\"\n    OKCYAN = \"\\033[96m\"\n    OKGREEN = \"\\033[92m\"\n    WARNING = \"\\033[93m\"\n    FAIL = \"\\033[91m\"\n    ENDC = \"\\033[0m\"\n    BOLD = \"\\033[1m\"\n    UNDERLINE = \"\\033[4m\"\n\n\ndef print_running(msg: str) -> None:\n    print(Colors.OKGREEN.value + \"Running \" + msg + Colors.ENDC.value)\n\n\ndef print_error(msg: str) -> None:\n    print(\n        Colors.FAIL.value + Colors.BOLD.value + \"ERROR: \" + msg + Colors.ENDC.value,\n        file=sys.stderr,\n    )\n\n\ndef print_warn(msg: str) -> None:\n    print(\n        Colors.WARNING.value\n        + Colors.BOLD.value\n        + \"WARNING: \"\n        + msg\n        + Colors.ENDC.value,\n        file=sys.stderr,\n    )\n\n\n@contextmanager\ndef timing() -> Generator:\n    start = time.time()\n    yield\n    duration = time.time() - start\n    print(f\"Finished in {duration:.2f} seconds.\")\n\n\ndef run(\n    args: Iterable[str],\n    capture_output: bool = False,\n    env: Optional[Dict[str, str]] = None,\n    timeout: Optional[int] = None,\n) -> subprocess.CompletedProcess:\n    \"\"\"\n    Runs a command (args) in a new process.\n    If the command fails, raise CalledProcessError.\n    If the command passes, return CompletedProcess.\n    If capture_output is False, print to the console, otherwise record it as CompletedProcess.stdout/stderr.\n    If error is specified, print error on stderr when there is a CalledProcessError.\n    \"\"\"\n    # On Ci stderr gets out of order with stdout. To avoid this, we need to flush stdout/stderr first.\n    sys.stdout.flush()\n    sys.stderr.flush()\n    try:\n        result = subprocess.run(\n            tuple(args),\n            # We'd like to use the capture_output argument,\n            # but that isn't available in Python 3.6 which we use on Windows\n            stdout=subprocess.PIPE if capture_output else sys.stdout,\n            stderr=sys.stderr,\n            check=True,\n            encoding=\"utf-8\",\n            env=env or os.environ.copy(),\n            timeout=timeout,\n        )\n        return result\n    except subprocess.CalledProcessError as e:\n        # Print the console info if we were capturing it\n        if capture_output:\n            print(e.stdout, file=sys.stdout)\n        sys.exit(1)\n\n\ndef check_no_changes(git: bool):\n    status_cmd = []\n    diff_cmd = []\n    if git:\n        status_cmd = [\"git\", \"status\", \"--porcelain\"]\n        diff_cmd = [\"git\", \"diff\"]\n\n    else:\n        status_cmd = [\"hg\", \"status\", \"-mard\"]\n        diff_cmd = [\"hg\", \"diff\", \"--pager=none\"]\n\n    status = run(status_cmd, capture_output=True)\n    if status.stdout.strip():\n        run(status_cmd)\n        run(diff_cmd)\n        print_error(\n            \"File changes! Caused either by formatting or by tests creating stray files.\"\n        )\n        sys.exit(1)\n\n\ndef list_starlark_files(git: bool):\n    cmd = None\n    includes = [\n        \"**.bxl\",\n        \"**.bzl\",\n        \"**/TARGETS\",\n        \"**/TARGETS.v2\",\n    ]\n    excludes = [\n        \"starlark-rust/starlark/testcases/\",\n        \"tests/core/**/test_*_data/**\",\n        \"tests/e2e/**/test_*_data/**\",\n        \"**.rs\",\n        \"**.fixture\",\n        \"**.buckconfig\",\n        \"**.bcfg\",\n        \"**/targets/**\",  # TODO(lmvasquezg) Exclude only non-starlark files here\n        \"**/BUCK\",  # TODO(lmvasquezg)  fix starlark linter to accept these\n        \"**/BUCK.v2\",\n    ]\n\n    if git:\n        excludes = [f\":!:{s}\" for s in excludes]\n        cmd = [\"git\", \"ls-files\", \"--\"] + includes + excludes\n    else:\n        includes = [f\"--include={s}\" for s in includes]\n        excludes = [f\"--exclude={s}\" for s in excludes]\n        cmd = (\n            [\n                \"hg\",\n                \"files\",\n                \".\",\n            ]\n            + includes\n            + excludes\n        )\n\n    starlark_files = (\n        run(\n            cmd,\n            capture_output=True,\n        )\n        .stdout.strip()\n        .splitlines()\n    )\n    return starlark_files\n\n\ndef rustfmt(buck2_dir: Path, ci: bool, git: bool) -> None:\n    \"\"\"\n    Make the formatting consistent, using the custom rustfmt,\n    which is a pre-release of rustfmt 2.0.\n    We do that by putting rustfmt on the PATH, but that PATH\n    also has a copy of rustup tools, so use our rustup captured before.\n    Mixing and matching cargo-fmt and rust-fmt doesn't work on Windows,\n    so skip formatting for now.\n    \"\"\"\n    # @oss-disable: internal = True \n    internal = False # @oss-enable\n    if not internal:\n        return\n\n    print_running(\"rustfmt\")\n    cargo_fmt = run(\n        [\"rustup\", \"which\", \"cargo-fmt\"], capture_output=True\n    ).stdout.strip()\n    env = os.environ.copy()\n    env[\"RUSTFMT\"] = str(\n        buck2_dir.parent.parent / \"tools\" / \"third-party\" / \"rustfmt\" / \"rustfmt\"\n    )\n\n    if run([cargo_fmt, \"--\"], env=env).returncode != 0:\n        sys.exit(1)\n\n    # On CI, fail if any committed files have changed,\n    # mainly because of cargo fmt changing a source file\n    if ci:\n        check_no_changes(git)\n\n\nRUSTC_ALLOW = {\n    # These are not in the shared-with-buck2 lists because they only appear in third-party deps.\n    # Normally cargo would suppress those, but we do vendored builds and so it doesn't.\n    \"unfulfilled-lint-expectations\",\n    \"unknown-lints\",\n    # This is not *actually* a  warning but rather a warning level.\n    \"warnings\",\n}\n\n\ndef _get_default_rustc_warnings() -> List[str]:\n    \"\"\"\n    We want to error on all Rustc default warnings. The very natural way to do\n    this would be to simply enable -Dwarnings, which would enable the\n    `warnings` lint group from rustc like `clippy::all` does.\n\n    Unfortunately, that's not at all what -Dwarnings does! `warnings` is not a\n    lint group, it's a special magical keyword that turns all `warnings` into\n    errors and is completely incompatible with tweaking lint levels (so e.g. if\n    you `--allow` a warning, but have `-Dwarnings` , that will error out).\n\n    So, we have to ask rustc to list all the default warnings for us, and error\n    out on them here.\n    \"\"\"\n    rustc = run([\"rustup\", \"which\", \"rustc\"], capture_output=True).stdout.strip()\n    out = run([rustc, \"-Whelp\"], capture_output=True).stdout.strip()\n\n    # This is some parsing that wants to be a little robust to changes in the\n    # output we're reading we're parsing help here.\n    lints = []\n\n    for line in out.split(\"\\n\"):\n        maybe_a_lint = line.split(None, 2)\n        if len(maybe_a_lint) == 3 and maybe_a_lint[1] == \"warn\":\n            lint = maybe_a_lint[0]\n            if lint not in RUSTC_ALLOW:\n                lints.append(lint)\n\n    return lints\n\n\ndef clippy(package_args: List[str], fix: bool) -> None:\n    \"\"\"\n    Run cargo clippy.\n    Also fails on any rustc warnings or build errors.\n    We'd really like a quiet option (at least for CI), but it doesn't exist\n    \"\"\"\n\n    print_running(\"clippy\")\n\n    rustc_default_warnings = _get_default_rustc_warnings()\n\n    clippy_fix_args = [\"--fix\"] if fix else []\n\n    clippy_deny_lints = [*lint_levels.CLIPPY_DENY, *rustc_default_warnings]\n    clippy_allow_lints = lint_levels.CLIPPY_ALLOW\n    if fix:\n        clippy_deny_lints.extend(lint_levels.CLIPPY_AUTOFIX)\n    else:\n        clippy_allow_lints.extend(lint_levels.CLIPPY_AUTOFIX)\n\n    clippy_deny_args = [f\"--deny={c}\" for c in clippy_deny_lints]\n    clippy_allow_args = [f\"--allow={c}\" for c in clippy_allow_lints]\n\n    run(\n        [\n            \"cargo\",\n            \"clippy\",\n            *package_args,\n            *clippy_fix_args,\n            \"-Z=unstable-options\",\n            \"--profile=test\",\n            \"--tests\",\n            \"--benches\",\n            \"--\",\n            *clippy_deny_args,\n            *clippy_allow_args,\n        ]\n    )\n\n\ndef starlark_linter(buck2: str, git: bool) -> None:\n    if git:\n        print_warn(\"Skipping starlark linter on git\")\n        return\n\n    print_running(\"starlark linter\")\n    starlark_files = list_starlark_files(git)\n    with tempfile.NamedTemporaryFile(mode=\"w+t\") as fp:\n        fp.writelines([x + \"\\n\" for x in starlark_files])\n        fp.flush()\n        run(\n            [\n                buck2,\n                \"--isolation-dir=starlark-linter\",\n                \"starlark\",\n                \"lint\",\n                \"--no-buckd\",\n                \"@\" + fp.name,\n            ]\n        )\n\n\ndef _lookup(d, *keys):\n    \"\"\"Nested lookup in a dict\"\"\"\n    for k in keys:\n        if d is None:\n            return None\n        d = d.get(k)\n    return d\n\n\ndef rustdoc(package_args: List[str]) -> None:\n    print_running(\"cargo doc\")\n    # We have to chose between showing the output, or capturing it.\n    # We have to capture it to figure out if there were warnings.\n    # We would strongly like to show it, because it might take a while.\n    # Cheat and do it twice, as we know Rust caches it, so the second time is quick.\n    run([\"cargo\", \"doc\", \"--no-deps\", *package_args])\n    output = run(\n        [\"cargo\", \"doc\", \"--message-format=json\", \"--no-deps\", *package_args],\n        capture_output=True,\n    )\n\n    has_warnings = False\n\n    # We'd really like to turn on warnings-as-errors, but we can't\n    # We'd really like to get this information from the exit code, but we can't\n    # Therefore, look for output that suggests there was a warning produced.\n    # Alas, that's the substring 'warning', since given console output, even 'warning:'\n    # might get an escape code within it.\n    for line in output.stdout.split(\"\\n\"):\n        line = line.strip()\n        if not line:\n            continue\n\n        line = json.loads(line)\n\n        # If it's not a compiler message then ignore it.\n        if line.get(\"reason\") != \"compiler-message\":\n            continue\n\n        # If it's not from buck2 itself (e.g. a dep), ignore.\n        target = line.get(\"target\", {}).get(\"src_path\", \"\")\n        if \"/buck2/\" not in target:\n            continue\n\n        # If it's not a doc warning, ignore it. The `message` field will\n        # contain a `code` field that itself has a `code` field that is machine\n        # readable for we look for this.\n        code = _lookup(line, \"message\", \"code\", \"code\")\n        if code is None or \"rustdoc::\" not in code:\n            continue\n\n        has_warnings = True\n\n        print_error(\"Documentation warning:\")\n        print(line.get(\"message\", {}).get(\"rendered\", \"\"))\n\n    if has_warnings:\n        sys.exit(1)\n\n\ndef test(package_args: List[str]) -> None:\n    print_running(\"cargo test --lib\")\n    extra_args = []\n    # Limit number of parallel jobs to prevent OOMs\n    if is_windows():\n        extra_args = [\"--jobs\", str(os.cpu_count() // 2)]\n    # Hour should be enough for all tests to run\n    timeout_sec = 60 * 60\n    run([\"cargo\", \"test\", \"--lib\", *extra_args, *package_args], timeout=timeout_sec)\n    print_running(\"cargo test --doc\")\n    run([\"cargo\", \"test\", \"--doc\", *extra_args, *package_args], timeout=timeout_sec)\n\n\ndef main() -> None:\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\n        \"--ci\",\n        action=\"store_true\",\n        default=False,\n        help=\"Whether to run CI workflow\",\n    )\n    parser.add_argument(\n        \"--git\",\n        action=\"store_true\",\n        default=False,\n        help=\"Use `git` to check repo state, the script defaults to `hg`\",\n    )\n    parser.add_argument(\n        \"--buck2\",\n        action=\"store\",\n        default=\"buck2\",\n        help=\"Path to a buck2 binary\",\n    )\n    parser.add_argument(\n        \"--lint-only\",\n        action=\"store_true\",\n        default=False,\n        help=\"Perform formatting and lints only. Do not run tests.\",\n    )\n    parser.add_argument(\n        \"--lint-rust-only\",\n        action=\"store_true\",\n        default=False,\n        help=\"Perform rust formatting and lints only. Do not run tests.\",\n    )\n    parser.add_argument(\n        \"--lint-starlark-only\",\n        action=\"store_true\",\n        default=False,\n        help=\"Perform starlark formatting and lints only. Do not run tests.\",\n    )\n    parser.add_argument(\n        \"--rustfmt-only\",\n        action=\"store_true\",\n        default=False,\n        help=\"Perform formatting only. Do not run lints or tests.\",\n    )\n    parser.add_argument(\n        \"--exclude\",\n        action=\"append\",\n        help=\"Packages excluded from linting.\",\n    )\n    parser.add_argument(\n        \"--clippy-fix\",\n        action=\"store_true\",\n        default=False,\n        help=\"Apply Clippy suggestions\",\n    )\n    parser.add_argument(\n        \"packages\",\n        nargs=\"*\",\n        type=str,\n        help=\"The packages to run lint on. If not specified, all packages\",\n    )\n    args = parser.parse_args()\n\n    # Change to buck2 directory\n    buck2_dir = Path(__file__).parent.absolute()\n    os.chdir(str(buck2_dir))\n\n    package_args = [f\"--package={p.rstrip('/')}\" for p in args.packages]\n    if args.exclude:\n        package_args.append(\"--workspace\")\n        package_args.extend([f\"--exclude={p.rstrip('/')}\" for p in args.exclude])\n\n    if package_args == [] and not (args.lint_rust_only or args.rustfmt_only):\n        with timing():\n            starlark_linter(args.buck2, args.git)\n\n    if not (args.rustfmt_only or args.lint_starlark_only):\n        if args.ci and is_opensource() and is_macos():\n            # TODO(nga): re-enable with next rust version bump (current is nightly-2024-02-01)\n            print_error(\"Clippy crashes on macOS; skipping\")\n        else:\n            with timing():\n                clippy(package_args, args.clippy_fix)\n\n    if not args.lint_starlark_only:\n        with timing():\n            rustfmt(buck2_dir, args.ci, args.git)\n\n    if not (\n        args.lint_only\n        or args.lint_rust_only\n        or args.lint_starlark_only\n        or args.rustfmt_only\n    ):\n        with timing():\n            rustdoc(package_args)\n\n        with timing():\n            test(package_args)\n\n    # On CI, check to make sure our test doesn't overwrite existing files\n    if args.ci:\n        check_no_changes(args.git)\n\n\nif __name__ == \"__main__\":\n    try:\n        main()\n    except KeyboardInterrupt:\n        # no stack trace on interrupt\n        sys.exit(signal.SIGINT)\n"
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        },
        {
          "name": "website",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}