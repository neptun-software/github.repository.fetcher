{
  "metadata": {
    "timestamp": 1736709125303,
    "page": 307,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjMxMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "rust-lang/hashbrown",
      "stars": 2524,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.029296875,
          "content": "/target\n**/*.rs.bk\nCargo.lock\n"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 20.236328125,
          "content": "# Change Log\n\nAll notable changes to this project will be documented in this file.\n\nThe format is based on [Keep a Changelog](https://keepachangelog.com/)\nand this project adheres to [Semantic Versioning](https://semver.org/).\n\n## [Unreleased]\n\n## [v0.15.2] - 2024-11-14\n\n### Added\n\n- Marked `const fn` constructors as `rustc_const_stable_indirect` when built as\n  part of the standard library. (#586)\n\n## [v0.15.1] - 2024-11-03\n\nThis release removes the `borsh` feature introduced in 0.15.0 because it was\nfound to be incorrectly implemented. Users should use the `hashbrown` feature of\nthe `borsh` crate instead which provides the same trait implementations.\n\n## ~~[v0.15.0] - 2024-10-01~~\n\nThis release was _yanked_ due to a broken implementation of the `borsh` feature.\n\nThis update contains breaking changes that remove the `raw` API with the hope of\ncentralising on the `HashTable` API in the future. You can follow the discussion\nand progress in #545 to discuss features you think should be added to this API\nthat were previously only possible on the `raw` API.\n\n### Added\n\n- Added `borsh` feature with `BorshSerialize` and `BorshDeserialize` impls. (#525)\n- Added `Assign` impls for `HashSet` operators. (#529)\n- Added `Default` impls for iterator types. (#542)\n- Added `HashTable::iter_hash{,_mut}` methods. (#549)\n- Added `Hash{Table,Map,Set}::allocation_size` methods. (#553)\n- Implemented `Debug` and `FusedIterator` for all `HashTable` iterators. (#561)\n- Specialized `Iterator::fold` for all `HashTable` iterators. (#561)\n\n### Changed\n\n- Changed `hash_set::VacantEntry::insert` to return `OccupiedEntry`. (#495)\n- Improved`hash_set::Difference::size_hint` lower-bound. (#530)\n- Improved `HashSet::is_disjoint` performance. (#531)\n- `equivalent` feature is now enabled by default. (#532)\n- `HashSet` operators now return a set with the same allocator. (#529)\n- Changed the default hasher to foldhash. (#563)\n- `ahash` feature has been renamed to `default-hasher`. (#533)\n- Entry API has been reworked and several methods have been renamed. (#535)\n- `Hash{Map,Set}::insert_unique_unchecked` is now unsafe. (#556)\n- The signature of `get_many_mut` and related methods was changed. (#562)\n\n### Fixed\n\n* Fixed typos, stray backticks in docs. (#558, #560)\n\n### Removed\n\n- Raw entry API is now under `raw-entry` feature, to be eventually removed. (#534, #555)\n- Raw table API has been made private and the `raw` feature is removed;\n  in the future, all code should be using the `HashTable` API instead. (#531, #546)\n- `rykv` feature was removed; this is now provided by the `rykv` crate instead. (#554)\n- `HashSet::get_or_insert_owned` was removed in favor of `get_or_insert_with`. (#555)\n\n## [v0.14.5] - 2024-04-28\n\n### Fixed\n\n- Fixed index calculation in panic guard of `clone_from_impl`. (#511)\n\n## ~~[v0.14.4] - 2024-03-19~~\n\nThis release was _yanked_ due to a breaking change.\n\n## [v0.14.3] - 2023-11-26\n\n### Added\n\n- Specialized `fold` implementation of iterators. (#480)\n\n### Fixed\n\n- Avoid using unstable `ptr::invalid_mut` on nightly. (#481)\n\n## [v0.14.2] - 2023-10-19\n\n### Added\n\n- `HashTable` type which provides a low-level but safe API with explicit hashing. (#466)\n\n### Fixed\n\n- Disabled the use of NEON instructions on big-endian ARM. (#475)\n- Disabled the use of NEON instructions on Miri. (#476)\n\n## [v0.14.1] - 2023-09-28\n\n### Added\n\n- Allow serializing `HashMap`s that use a custom allocator. (#449)\n\n### Changed\n\n- Use the `Equivalent` trait from the `equivalent` crate. (#442)\n- Slightly improved performance of table resizing. (#451)\n- Relaxed MSRV to 1.63.0. (#457)\n- Removed `Clone` requirement from custom allocators. (#468)\n\n### Fixed\n\n- Fixed custom allocators being leaked in some situations. (#439, #465)\n\n## [v0.14.0] - 2023-06-01\n\n### Added\n\n- Support for `allocator-api2` crate\n  for interfacing with custom allocators on stable. (#417)\n- Optimized implementation for ARM using NEON instructions. (#430)\n- Support for rkyv serialization. (#432)\n- `Equivalent` trait to look up values without `Borrow`. (#345)\n- `Hash{Map,Set}::raw_table_mut` is added which returns a mutable reference. (#404)\n- Fast path for `clear` on empty tables. (#428)\n\n### Changed\n\n- Optimized insertion to only perform a single lookup. (#277)\n- `DrainFilter` (`drain_filter`) has been renamed to `ExtractIf` and no longer drops remaining\n  elements when the iterator is dropped. #(374)\n- Bumped MSRV to 1.64.0. (#431)\n- `{Map,Set}::raw_table` now returns an immutable reference. (#404)\n- `VacantEntry` and `OccupiedEntry` now use the default hasher if none is\n  specified in generics. (#389)\n- `RawTable::data_start` now returns a `NonNull` to match `RawTable::data_end`. (#387)\n- `RawIter::{reflect_insert, reflect_remove}` are now unsafe. (#429)\n- `RawTable::find_potential` is renamed to `find_or_find_insert_slot` and returns an `InsertSlot`. (#429)\n- `RawTable::remove` now also returns an `InsertSlot`. (#429)\n- `InsertSlot` can be used to insert an element with `RawTable::insert_in_slot`. (#429)\n- `RawIterHash` no longer has a lifetime tied to that of the `RawTable`. (#427)\n- The trait bounds of `HashSet::raw_table` have been relaxed to not require `Eq + Hash`. (#423)\n- `EntryRef::and_replace_entry_with` and `OccupiedEntryRef::replace_entry_with`\n  were changed to give a `&K` instead of a `&Q` to the closure.\n\n### Removed\n\n- Support for `bumpalo` as an allocator with custom wrapper.\n  Use `allocator-api2` feature in `bumpalo` to use it as an allocator\n  for `hashbrown` collections. (#417)\n\n## [v0.13.2] - 2023-01-12\n\n### Fixed\n\n- Added `#[inline(always)]` to `find_inner`. (#375)\n- Fixed `RawTable::allocation_info` for empty tables. (#376)\n\n## [v0.13.1] - 2022-11-10\n\n### Added\n\n- Added `Equivalent` trait to customize key lookups. (#350)\n- Added support for 16-bit targets. (#368)\n- Added `RawTable::allocation_info` which provides information about the memory\n  usage of a table. (#371)\n\n### Changed\n\n- Bumped MSRV to 1.61.0.\n- Upgraded to `ahash` 0.8. (#357)\n- Make `with_hasher_in` const. (#355)\n- The following methods have been removed from the `RawTable` API in favor of\n  safer alternatives:\n  - `RawTable::erase_no_drop` => Use `RawTable::erase` or `RawTable::remove` instead.\n  - `Bucket::read` => Use `RawTable::remove` instead.\n  - `Bucket::drop` => Use `RawTable::erase` instead.\n  - `Bucket::write` => Use `Bucket::as_mut` instead.\n\n### Fixed\n\n- Ensure that `HashMap` allocations don't exceed `isize::MAX`. (#362)\n- Fixed issue with field retagging in scopeguard. (#359)\n\n## [v0.12.3] - 2022-07-17\n\n### Fixed\n\n- Fixed double-drop in `RawTable::clone_from`. (#348)\n\n## [v0.12.2] - 2022-07-09\n\n### Added\n\n- Added `Entry` API for `HashSet`. (#342)\n- Added `Extend<&'a (K, V)> for HashMap<K, V, S, A>`. (#340)\n- Added length-based short-circuiting for hash table iteration. (#338)\n- Added a function to access the `RawTable` of a `HashMap`. (#335)\n\n### Changed\n\n- Edited `do_alloc` to reduce LLVM IR generated. (#341)\n\n## [v0.12.1] - 2022-05-02\n\n### Fixed\n\n- Fixed underflow in `RawIterRange::size_hint`. (#325)\n- Fixed the implementation of `Debug` for `ValuesMut` and `IntoValues`. (#325)\n\n## [v0.12.0] - 2022-01-17\n\n### Added\n\n- Added `From<[T; N]>` and `From<[(K, V); N]>` for `HashSet` and `HashMap` respectively. (#297)\n- Added an `allocator()` getter to HashMap and HashSet. (#257)\n- Added `insert_unique_unchecked` to `HashMap` and `HashSet`. (#293)\n- Added `into_keys` and `into_values` to HashMap. (#295)\n- Implement `From<array>` on `HashSet` and `HashMap`. (#298)\n- Added `entry_ref` API to `HashMap`. (#201)\n\n### Changed\n\n- Bumped minimum Rust version to 1.56.1 and edition to 2021.\n- Use u64 for the GroupWord on WebAssembly. (#271)\n- Optimized `find`. (#279)\n- Made rehashing and resizing less generic to reduce compilation time. (#282)\n- Inlined small functions. (#283)\n- Use `BuildHasher::hash_one` when `feature = \"nightly\"` is enabled. (#292)\n- Relaxed the bounds on `Debug` for `HashSet`. (#296)\n- Rename `get_each_mut` to `get_many_mut` and align API with the stdlib. (#291)\n- Don't hash the key when searching in an empty table. (#305)\n\n### Fixed\n\n- Guard against allocations exceeding isize::MAX. (#268)\n- Made `RawTable::insert_no_grow` unsafe. (#254)\n- Inline `static_empty`. (#280)\n- Fixed trait bounds on Send/Sync impls. (#303)\n\n## [v0.11.2] - 2021-03-25\n\n### Fixed\n\n- Added missing allocator type parameter to `HashMap`'s and `HashSet`'s `Clone` impls. (#252)\n\n## [v0.11.1] - 2021-03-20\n\n### Fixed\n\n- Added missing `pub` modifier to `BumpWrapper`. (#251)\n\n## [v0.11.0] - 2021-03-14\n\n### Added\n- Added safe `try_insert_no_grow` method to `RawTable`. (#229)\n- Added support for `bumpalo` as an allocator without the `nightly` feature. (#231)\n- Implemented `Default` for `RawTable`. (#237)\n- Added new safe methods `RawTable::get_each_mut`, `HashMap::get_each_mut`, and\n  `HashMap::get_each_key_value_mut`. (#239)\n- Added `From<HashMap<T, ()>>` for `HashSet<T>`. (#235)\n- Added `try_insert` method to `HashMap`. (#247)\n\n### Changed\n- The minimum Rust version has been bumped to 1.49.0. (#230)\n- Significantly improved compilation times by reducing the amount of generated IR. (#205)\n\n### Removed\n- We no longer re-export the unstable allocator items from the standard library, nor the stable shims approximating the same. (#227)\n- Removed hasher specialization support from `aHash`, which was resulting in inconsistent hashes being generated for a key. (#248)\n\n### Fixed\n- Fixed union length comparison. (#228)\n\n## ~~[v0.10.0] - 2021-01-16~~\n\nThis release was _yanked_ due to inconsistent hashes being generated with the `nightly` feature. (#248)\n\n### Changed\n- Parametrized `RawTable`, `HashSet` and `HashMap` over an allocator. (#133)\n- Improved branch prediction hints on stable. (#209)\n- Optimized hashing of primitive types with AHash using specialization. (#207)\n- Only instantiate `RawTable`'s reserve functions once per key-value. (#204)\n\n## [v0.9.1] - 2020-09-28\n\n### Added\n- Added safe methods to `RawTable` (#202):\n  - `get`: `find` and `as_ref`\n  - `get_mut`: `find` and `as_mut`\n  - `insert_entry`: `insert` and `as_mut`\n  - `remove_entry`: `find` and `remove`\n  - `erase_entry`: `find` and `erase`\n\n### Changed\n- Removed `from_key_hashed_nocheck`'s `Q: Hash`. (#200)\n- Made `RawTable::drain` safe. (#201)\n\n## [v0.9.0] - 2020-09-03\n\n### Fixed\n- `drain_filter` now removes and yields items that do match the predicate,\n  rather than items that don't.  This is a **breaking change** to match the\n  behavior of the `drain_filter` methods in `std`. (#187)\n\n### Added\n- Added `replace_entry_with` to `OccupiedEntry`, and `and_replace_entry_with` to `Entry`. (#190)\n- Implemented `FusedIterator` and `size_hint` for `DrainFilter`. (#188)\n\n### Changed\n- The minimum Rust version has been bumped to 1.36 (due to `crossbeam` dependency). (#193)\n- Updated `ahash` dependency to 0.4. (#198)\n- `HashMap::with_hasher` and `HashSet::with_hasher` are now `const fn`. (#195)\n- Removed `T: Hash + Eq` and `S: BuildHasher` bounds on `HashSet::new`,\n  `with_capacity`, `with_hasher`, and `with_capacity_and_hasher`.  (#185)\n\n## [v0.8.2] - 2020-08-08\n\n### Changed\n- Avoid closures to improve compile times. (#183)\n- Do not iterate to drop if empty. (#182)\n\n## [v0.8.1] - 2020-07-16\n\n### Added\n- Added `erase` and `remove` to `RawTable`. (#171)\n- Added `try_with_capacity` to `RawTable`. (#174)\n- Added methods that allow re-using a `RawIter` for `RawDrain`,\n  `RawIntoIter`, and `RawParIter`. (#175)\n- Added `reflect_remove` and `reflect_insert` to `RawIter`. (#175)\n- Added a `drain_filter` function to `HashSet`. (#179)\n\n### Changed\n- Deprecated `RawTable::erase_no_drop` in favor of `erase` and `remove`. (#176)\n- `insert_no_grow` is now exposed under the `\"raw\"` feature. (#180)\n\n## [v0.8.0] - 2020-06-18\n\n### Fixed\n- Marked `RawTable::par_iter` as `unsafe`. (#157)\n\n### Changed\n- Reduced the size of `HashMap`. (#159)\n- No longer create tables with a capacity of 1 element. (#162)\n- Removed `K: Eq + Hash` bounds on `retain`. (#163)\n- Pulled in `HashMap` changes from rust-lang/rust (#164):\n  - `extend_one` support on nightly.\n  - `CollectionAllocErr` renamed to `TryReserveError`.\n  - Added `HashSet::get_or_insert_owned`.\n  - `Default` for `HashSet` no longer requires `T: Eq + Hash` and `S: BuildHasher`.\n\n## [v0.7.2] - 2020-04-27\n\n### Added\n- Added `or_insert_with_key` to `Entry`. (#152)\n\n### Fixed\n- Partially reverted `Clone` optimization which was unsound. (#154)\n\n### Changed\n- Disabled use of `const-random` by default, which prevented reproducible builds. (#155)\n- Optimized `repeat` function. (#150)\n- Use `NonNull` for buckets, which improves codegen for iterators. (#148)\n\n## [v0.7.1] - 2020-03-16\n\n### Added\n- Added `HashMap::get_key_value_mut`. (#145)\n\n### Changed\n- Optimized `Clone` implementation. (#146)\n\n## [v0.7.0] - 2020-01-31\n\n### Added\n- Added a `drain_filter` function to `HashMap`. (#135)\n\n### Changed\n- Updated `ahash` dependency to 0.3. (#141)\n- Optimized set union and intersection. (#130)\n- `raw_entry` can now be used without requiring `S: BuildHasher`. (#123)\n- `RawTable::bucket_index` can now be used under the `raw` feature. (#128)\n\n## [v0.6.3] - 2019-10-31\n\n### Added\n- Added an `ahash-compile-time-rng` feature (enabled by default) which allows disabling the\n  `compile-time-rng` feature in `ahash` to work around a Cargo bug. (#125)\n\n## [v0.6.2] - 2019-10-23\n\n### Added\n- Added an `inline-more` feature (enabled by default) which allows choosing a tradeoff between\n  runtime performance and compilation time. (#119)\n\n## [v0.6.1] - 2019-10-04\n\n### Added\n- Added `Entry::insert` and `RawEntryMut::insert`. (#118)\n\n### Changed\n- `Group::static_empty` was changed from a `const` to a `static` (#116).\n\n## [v0.6.0] - 2019-08-13\n\n### Fixed\n- Fixed AHash accidentally depending on `std`. (#110)\n\n### Changed\n- The minimum Rust version has been bumped to 1.32 (due to `rand` dependency).\n\n## ~~[v0.5.1] - 2019-08-04~~\n\nThis release was _yanked_ due to a breaking change for users of `no-default-features`.\n\n### Added\n- The experimental and unsafe `RawTable` API is available under the \"raw\" feature. (#108)\n- Added entry-like methods for `HashSet`. (#98)\n\n### Changed\n- Changed the default hasher from FxHash to AHash. (#97)\n- `hashbrown` is now fully `no_std` on recent Rust versions (1.36+). (#96)\n\n### Fixed\n- We now avoid growing the table during insertions when it wasn't necessary. (#106)\n- `RawOccupiedEntryMut` now properly implements `Send` and `Sync`. (#100)\n- Relaxed `lazy_static` version. (#92)\n\n## [v0.5.0] - 2019-06-12\n\n### Fixed\n- Resize with a more conservative amount of space after deletions. (#86)\n\n### Changed\n- Exposed the Layout of the failed allocation in CollectionAllocErr::AllocErr. (#89)\n\n## [v0.4.0] - 2019-05-30\n\n### Fixed\n- Fixed `Send` trait bounds on `IterMut` not matching the libstd one. (#82)\n\n## [v0.3.1] - 2019-05-30\n\n### Fixed\n- Fixed incorrect use of slice in unsafe code. (#80)\n\n## [v0.3.0] - 2019-04-23\n\n### Changed\n- Changed shrink_to to not panic if min_capacity < capacity. (#67)\n\n### Fixed\n- Worked around emscripten bug emscripten-core/emscripten-fastcomp#258. (#66)\n\n## [v0.2.2] - 2019-04-16\n\n### Fixed\n- Inlined non-nightly lowest_set_bit_nonzero. (#64)\n- Fixed build on latest nightly. (#65)\n\n## [v0.2.1] - 2019-04-14\n\n### Changed\n- Use for_each in map Extend and FromIterator. (#58)\n- Improved worst-case performance of HashSet.is_subset. (#61)\n\n### Fixed\n- Removed incorrect debug_assert. (#60)\n\n## [v0.2.0] - 2019-03-31\n\n### Changed\n- The code has been updated to Rust 2018 edition. This means that the minimum\n  Rust version has been bumped to 1.31 (2018 edition).\n\n### Added\n- Added `insert_with_hasher` to the raw_entry API to allow `K: !(Hash + Eq)`. (#54)\n- Added support for using hashbrown as the hash table implementation in libstd. (#46)\n\n### Fixed\n- Fixed cargo build with minimal-versions. (#45)\n- Fixed `#[may_dangle]` attributes to match the libstd `HashMap`. (#46)\n- ZST keys and values are now handled properly. (#46)\n\n## [v0.1.8] - 2019-01-14\n\n### Added\n- Rayon parallel iterator support (#37)\n- `raw_entry` support (#31)\n- `#[may_dangle]` on nightly (#31)\n- `try_reserve` support (#31)\n\n### Fixed\n- Fixed variance on `IterMut`. (#31)\n\n## [v0.1.7] - 2018-12-05\n\n### Fixed\n- Fixed non-SSE version of convert_special_to_empty_and_full_to_deleted. (#32)\n- Fixed overflow in rehash_in_place. (#33)\n\n## [v0.1.6] - 2018-11-17\n\n### Fixed\n- Fixed compile error on nightly. (#29)\n\n## [v0.1.5] - 2018-11-08\n\n### Fixed\n- Fixed subtraction overflow in generic::Group::match_byte. (#28)\n\n## [v0.1.4] - 2018-11-04\n\n### Fixed\n- Fixed a bug in the `erase_no_drop` implementation. (#26)\n\n## [v0.1.3] - 2018-11-01\n\n### Added\n- Serde support. (#14)\n\n### Fixed\n- Make the compiler inline functions more aggressively. (#20)\n\n## [v0.1.2] - 2018-10-31\n\n### Fixed\n- `clear` segfaults when called on an empty table. (#13)\n\n## [v0.1.1] - 2018-10-30\n\n### Fixed\n- `erase_no_drop` optimization not triggering in the SSE2 implementation. (#3)\n- Missing `Send` and `Sync` for hash map and iterator types. (#7)\n- Bug when inserting into a table smaller than the group width. (#5)\n\n## v0.1.0 - 2018-10-29\n\n- Initial release\n\n[Unreleased]: https://github.com/rust-lang/hashbrown/compare/v0.15.2...HEAD\n[v0.15.2]: https://github.com/rust-lang/hashbrown/compare/v0.15.1...v0.15.2\n[v0.15.1]: https://github.com/rust-lang/hashbrown/compare/v0.15.0...v0.15.1\n[v0.15.0]: https://github.com/rust-lang/hashbrown/compare/v0.14.5...v0.15.0\n[v0.14.5]: https://github.com/rust-lang/hashbrown/compare/v0.14.4...v0.14.5\n[v0.14.4]: https://github.com/rust-lang/hashbrown/compare/v0.14.3...v0.14.4\n[v0.14.3]: https://github.com/rust-lang/hashbrown/compare/v0.14.2...v0.14.3\n[v0.14.2]: https://github.com/rust-lang/hashbrown/compare/v0.14.1...v0.14.2\n[v0.14.1]: https://github.com/rust-lang/hashbrown/compare/v0.14.0...v0.14.1\n[v0.14.0]: https://github.com/rust-lang/hashbrown/compare/v0.13.2...v0.14.0\n[v0.13.2]: https://github.com/rust-lang/hashbrown/compare/v0.13.1...v0.13.2\n[v0.13.1]: https://github.com/rust-lang/hashbrown/compare/v0.12.3...v0.13.1\n[v0.12.3]: https://github.com/rust-lang/hashbrown/compare/v0.12.2...v0.12.3\n[v0.12.2]: https://github.com/rust-lang/hashbrown/compare/v0.12.1...v0.12.2\n[v0.12.1]: https://github.com/rust-lang/hashbrown/compare/v0.12.0...v0.12.1\n[v0.12.0]: https://github.com/rust-lang/hashbrown/compare/v0.11.2...v0.12.0\n[v0.11.2]: https://github.com/rust-lang/hashbrown/compare/v0.11.1...v0.11.2\n[v0.11.1]: https://github.com/rust-lang/hashbrown/compare/v0.11.0...v0.11.1\n[v0.11.0]: https://github.com/rust-lang/hashbrown/compare/v0.10.0...v0.11.0\n[v0.10.0]: https://github.com/rust-lang/hashbrown/compare/v0.9.1...v0.10.0\n[v0.9.1]: https://github.com/rust-lang/hashbrown/compare/v0.9.0...v0.9.1\n[v0.9.0]: https://github.com/rust-lang/hashbrown/compare/v0.8.2...v0.9.0\n[v0.8.2]: https://github.com/rust-lang/hashbrown/compare/v0.8.1...v0.8.2\n[v0.8.1]: https://github.com/rust-lang/hashbrown/compare/v0.8.0...v0.8.1\n[v0.8.0]: https://github.com/rust-lang/hashbrown/compare/v0.7.2...v0.8.0\n[v0.7.2]: https://github.com/rust-lang/hashbrown/compare/v0.7.1...v0.7.2\n[v0.7.1]: https://github.com/rust-lang/hashbrown/compare/v0.7.0...v0.7.1\n[v0.7.0]: https://github.com/rust-lang/hashbrown/compare/v0.6.3...v0.7.0\n[v0.6.3]: https://github.com/rust-lang/hashbrown/compare/v0.6.2...v0.6.3\n[v0.6.2]: https://github.com/rust-lang/hashbrown/compare/v0.6.1...v0.6.2\n[v0.6.1]: https://github.com/rust-lang/hashbrown/compare/v0.6.0...v0.6.1\n[v0.6.0]: https://github.com/rust-lang/hashbrown/compare/v0.5.1...v0.6.0\n[v0.5.1]: https://github.com/rust-lang/hashbrown/compare/v0.5.0...v0.5.1\n[v0.5.0]: https://github.com/rust-lang/hashbrown/compare/v0.4.0...v0.5.0\n[v0.4.0]: https://github.com/rust-lang/hashbrown/compare/v0.3.1...v0.4.0\n[v0.3.1]: https://github.com/rust-lang/hashbrown/compare/v0.3.0...v0.3.1\n[v0.3.0]: https://github.com/rust-lang/hashbrown/compare/v0.2.2...v0.3.0\n[v0.2.2]: https://github.com/rust-lang/hashbrown/compare/v0.2.1...v0.2.2\n[v0.2.1]: https://github.com/rust-lang/hashbrown/compare/v0.2.0...v0.2.1\n[v0.2.0]: https://github.com/rust-lang/hashbrown/compare/v0.1.8...v0.2.0\n[v0.1.8]: https://github.com/rust-lang/hashbrown/compare/v0.1.7...v0.1.8\n[v0.1.7]: https://github.com/rust-lang/hashbrown/compare/v0.1.6...v0.1.7\n[v0.1.6]: https://github.com/rust-lang/hashbrown/compare/v0.1.5...v0.1.6\n[v0.1.5]: https://github.com/rust-lang/hashbrown/compare/v0.1.4...v0.1.5\n[v0.1.4]: https://github.com/rust-lang/hashbrown/compare/v0.1.3...v0.1.4\n[v0.1.3]: https://github.com/rust-lang/hashbrown/compare/v0.1.2...v0.1.3\n[v0.1.2]: https://github.com/rust-lang/hashbrown/compare/v0.1.1...v0.1.2\n[v0.1.1]: https://github.com/rust-lang/hashbrown/compare/v0.1.0...v0.1.1\n"
        },
        {
          "name": "Cargo.toml",
          "type": "blob",
          "size": 2.6396484375,
          "content": "[package]\nname = \"hashbrown\"\nversion = \"0.15.2\"\nauthors = [\"Amanieu d'Antras <amanieu@gmail.com>\"]\ndescription = \"A Rust port of Google's SwissTable hash map\"\nlicense = \"MIT OR Apache-2.0\"\nrepository = \"https://github.com/rust-lang/hashbrown\"\nreadme = \"README.md\"\nkeywords = [\"hash\", \"no_std\", \"hashmap\", \"swisstable\"]\ncategories = [\"data-structures\", \"no-std\"]\nexclude = [\".github\", \"/ci/*\"]\nedition = \"2021\"\nrust-version = \"1.65.0\"\n\n[dependencies]\n# For the default hasher\nfoldhash = { version = \"0.1.2\", default-features = false, optional = true }\n\n# For external trait impls\nrayon = { version = \"1.2\", optional = true }\nserde = { version = \"1.0.25\", default-features = false, optional = true }\n\n# When built as part of libstd\ncore = { version = \"1.0.0\", optional = true, package = \"rustc-std-workspace-core\" }\ncompiler_builtins = { version = \"0.1.2\", optional = true }\nalloc = { version = \"1.0.0\", optional = true, package = \"rustc-std-workspace-alloc\" }\n\n# Support for allocators that use allocator-api2\nallocator-api2 = { version = \"0.2.9\", optional = true, default-features = false, features = [\n    \"alloc\",\n] }\n\n# Equivalent trait which can be shared with other hash table implementations.\nequivalent = { version = \"1.0\", optional = true, default-features = false }\n\n[dev-dependencies]\nlazy_static = \"1.4\"\nrand = { version = \"0.8.3\", features = [\"small_rng\"] }\nrayon = \"1.2\"\nfnv = \"1.0.7\"\nserde_test = \"1.0\"\ndoc-comment = \"0.3.1\"\nbumpalo = { version = \"3.13.0\", features = [\"allocator-api2\"] }\n\n[features]\ndefault = [\"default-hasher\", \"inline-more\", \"allocator-api2\", \"equivalent\", \"raw-entry\"]\n\n# Enables use of nightly features. This is only guaranteed to work on the latest\n# version of nightly Rust.\nnightly = [\"allocator-api2?/nightly\", \"bumpalo/allocator_api\"]\n\n# Enables the RustcEntry API used to provide the standard library's Entry API.\nrustc-internal-api = []\n\n# Internal feature used when building as part of the standard library.\nrustc-dep-of-std = [\n    \"nightly\",\n    \"core\",\n    \"compiler_builtins\",\n    \"alloc\",\n    \"rustc-internal-api\",\n    \"raw-entry\",\n]\n\n# Enables the deprecated RawEntry API.\nraw-entry = []\n\n# Provides a default hasher. Currently this is foldhash but this is subject to\n# change in the future. Note that the default hasher does *not* provide HashDoS\n# resistance, unlike the one in the standard library.\ndefault-hasher = [\"dep:foldhash\"]\n\n# Enables usage of `#[inline]` on far more functions than by default in this\n# crate. This may lead to a performance increase but often comes at a compile\n# time cost.\ninline-more = []\n\n[package.metadata.docs.rs]\nfeatures = [\"nightly\", \"rayon\", \"serde\", \"raw-entry\"]\nrustdoc-args = [\"--generate-link-to-definition\"]\n"
        },
        {
          "name": "Cross.toml",
          "type": "blob",
          "size": 0.177734375,
          "content": "# FIXME: Drop this config when cross is updated to support loongarch64-linux-gnu\n[target.loongarch64-unknown-linux-gnu]\nimage = \"ghcr.io/cross-rs/loongarch64-unknown-linux-gnu:edge\"\n"
        },
        {
          "name": "LICENSE-APACHE",
          "type": "blob",
          "size": 10.5927734375,
          "content": "                              Apache License\n                        Version 2.0, January 2004\n                     http://www.apache.org/licenses/\n\nTERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n1. Definitions.\n\n   \"License\" shall mean the terms and conditions for use, reproduction,\n   and distribution as defined by Sections 1 through 9 of this document.\n\n   \"Licensor\" shall mean the copyright owner or entity authorized by\n   the copyright owner that is granting the License.\n\n   \"Legal Entity\" shall mean the union of the acting entity and all\n   other entities that control, are controlled by, or are under common\n   control with that entity. For the purposes of this definition,\n   \"control\" means (i) the power, direct or indirect, to cause the\n   direction or management of such entity, whether by contract or\n   otherwise, or (ii) ownership of fifty percent (50%) or more of the\n   outstanding shares, or (iii) beneficial ownership of such entity.\n\n   \"You\" (or \"Your\") shall mean an individual or Legal Entity\n   exercising permissions granted by this License.\n\n   \"Source\" form shall mean the preferred form for making modifications,\n   including but not limited to software source code, documentation\n   source, and configuration files.\n\n   \"Object\" form shall mean any form resulting from mechanical\n   transformation or translation of a Source form, including but\n   not limited to compiled object code, generated documentation,\n   and conversions to other media types.\n\n   \"Work\" shall mean the work of authorship, whether in Source or\n   Object form, made available under the License, as indicated by a\n   copyright notice that is included in or attached to the work\n   (an example is provided in the Appendix below).\n\n   \"Derivative Works\" shall mean any work, whether in Source or Object\n   form, that is based on (or derived from) the Work and for which the\n   editorial revisions, annotations, elaborations, or other modifications\n   represent, as a whole, an original work of authorship. For the purposes\n   of this License, Derivative Works shall not include works that remain\n   separable from, or merely link (or bind by name) to the interfaces of,\n   the Work and Derivative Works thereof.\n\n   \"Contribution\" shall mean any work of authorship, including\n   the original version of the Work and any modifications or additions\n   to that Work or Derivative Works thereof, that is intentionally\n   submitted to Licensor for inclusion in the Work by the copyright owner\n   or by an individual or Legal Entity authorized to submit on behalf of\n   the copyright owner. For the purposes of this definition, \"submitted\"\n   means any form of electronic, verbal, or written communication sent\n   to the Licensor or its representatives, including but not limited to\n   communication on electronic mailing lists, source code control systems,\n   and issue tracking systems that are managed by, or on behalf of, the\n   Licensor for the purpose of discussing and improving the Work, but\n   excluding communication that is conspicuously marked or otherwise\n   designated in writing by the copyright owner as \"Not a Contribution.\"\n\n   \"Contributor\" shall mean Licensor and any individual or Legal Entity\n   on behalf of whom a Contribution has been received by Licensor and\n   subsequently incorporated within the Work.\n\n2. Grant of Copyright License. Subject to the terms and conditions of\n   this License, each Contributor hereby grants to You a perpetual,\n   worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n   copyright license to reproduce, prepare Derivative Works of,\n   publicly display, publicly perform, sublicense, and distribute the\n   Work and such Derivative Works in Source or Object form.\n\n3. Grant of Patent License. Subject to the terms and conditions of\n   this License, each Contributor hereby grants to You a perpetual,\n   worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n   (except as stated in this section) patent license to make, have made,\n   use, offer to sell, sell, import, and otherwise transfer the Work,\n   where such license applies only to those patent claims licensable\n   by such Contributor that are necessarily infringed by their\n   Contribution(s) alone or by combination of their Contribution(s)\n   with the Work to which such Contribution(s) was submitted. If You\n   institute patent litigation against any entity (including a\n   cross-claim or counterclaim in a lawsuit) alleging that the Work\n   or a Contribution incorporated within the Work constitutes direct\n   or contributory patent infringement, then any patent licenses\n   granted to You under this License for that Work shall terminate\n   as of the date such litigation is filed.\n\n4. Redistribution. You may reproduce and distribute copies of the\n   Work or Derivative Works thereof in any medium, with or without\n   modifications, and in Source or Object form, provided that You\n   meet the following conditions:\n\n   (a) You must give any other recipients of the Work or\n       Derivative Works a copy of this License; and\n\n   (b) You must cause any modified files to carry prominent notices\n       stating that You changed the files; and\n\n   (c) You must retain, in the Source form of any Derivative Works\n       that You distribute, all copyright, patent, trademark, and\n       attribution notices from the Source form of the Work,\n       excluding those notices that do not pertain to any part of\n       the Derivative Works; and\n\n   (d) If the Work includes a \"NOTICE\" text file as part of its\n       distribution, then any Derivative Works that You distribute must\n       include a readable copy of the attribution notices contained\n       within such NOTICE file, excluding those notices that do not\n       pertain to any part of the Derivative Works, in at least one\n       of the following places: within a NOTICE text file distributed\n       as part of the Derivative Works; within the Source form or\n       documentation, if provided along with the Derivative Works; or,\n       within a display generated by the Derivative Works, if and\n       wherever such third-party notices normally appear. The contents\n       of the NOTICE file are for informational purposes only and\n       do not modify the License. You may add Your own attribution\n       notices within Derivative Works that You distribute, alongside\n       or as an addendum to the NOTICE text from the Work, provided\n       that such additional attribution notices cannot be construed\n       as modifying the License.\n\n   You may add Your own copyright statement to Your modifications and\n   may provide additional or different license terms and conditions\n   for use, reproduction, or distribution of Your modifications, or\n   for any such Derivative Works as a whole, provided Your use,\n   reproduction, and distribution of the Work otherwise complies with\n   the conditions stated in this License.\n\n5. Submission of Contributions. Unless You explicitly state otherwise,\n   any Contribution intentionally submitted for inclusion in the Work\n   by You to the Licensor shall be under the terms and conditions of\n   this License, without any additional terms or conditions.\n   Notwithstanding the above, nothing herein shall supersede or modify\n   the terms of any separate license agreement you may have executed\n   with Licensor regarding such Contributions.\n\n6. Trademarks. This License does not grant permission to use the trade\n   names, trademarks, service marks, or product names of the Licensor,\n   except as required for reasonable and customary use in describing the\n   origin of the Work and reproducing the content of the NOTICE file.\n\n7. Disclaimer of Warranty. Unless required by applicable law or\n   agreed to in writing, Licensor provides the Work (and each\n   Contributor provides its Contributions) on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n   implied, including, without limitation, any warranties or conditions\n   of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n   PARTICULAR PURPOSE. You are solely responsible for determining the\n   appropriateness of using or redistributing the Work and assume any\n   risks associated with Your exercise of permissions under this License.\n\n8. Limitation of Liability. In no event and under no legal theory,\n   whether in tort (including negligence), contract, or otherwise,\n   unless required by applicable law (such as deliberate and grossly\n   negligent acts) or agreed to in writing, shall any Contributor be\n   liable to You for damages, including any direct, indirect, special,\n   incidental, or consequential damages of any character arising as a\n   result of this License or out of the use or inability to use the\n   Work (including but not limited to damages for loss of goodwill,\n   work stoppage, computer failure or malfunction, or any and all\n   other commercial damages or losses), even if such Contributor\n   has been advised of the possibility of such damages.\n\n9. Accepting Warranty or Additional Liability. While redistributing\n   the Work or Derivative Works thereof, You may choose to offer,\n   and charge a fee for, acceptance of support, warranty, indemnity,\n   or other liability obligations and/or rights consistent with this\n   License. However, in accepting such obligations, You may act only\n   on Your own behalf and on Your sole responsibility, not on behalf\n   of any other Contributor, and only if You agree to indemnify,\n   defend, and hold each Contributor harmless for any liability\n   incurred by, or claims asserted against, such Contributor by reason\n   of your accepting any such warranty or additional liability.\n\nEND OF TERMS AND CONDITIONS\n\nAPPENDIX: How to apply the Apache License to your work.\n\n   To apply the Apache License to your work, attach the following\n   boilerplate notice, with the fields enclosed by brackets \"[]\"\n   replaced with your own identifying information. (Don't include\n   the brackets!)  The text should be enclosed in the appropriate\n   comment syntax for the file format. We also recommend that a\n   file or class name and description of purpose be included on the\n   same \"printed page\" as the copyright notice for easier\n   identification within third-party archives.\n\nCopyright [yyyy] [name of copyright owner]\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n\thttp://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n"
        },
        {
          "name": "LICENSE-MIT",
          "type": "blob",
          "size": 1.03515625,
          "content": "Copyright (c) 2016 Amanieu d'Antras\n\nPermission is hereby granted, free of charge, to any\nperson obtaining a copy of this software and associated\ndocumentation files (the \"Software\"), to deal in the\nSoftware without restriction, including without\nlimitation the rights to use, copy, modify, merge,\npublish, distribute, sublicense, and/or sell copies of\nthe Software, and to permit persons to whom the Software\nis furnished to do so, subject to the following\nconditions:\n\nThe above copyright notice and this permission notice\nshall be included in all copies or substantial portions\nof the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF\nANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED\nTO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A\nPARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT\nSHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\nOF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR\nIN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\nDEALINGS IN THE SOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 3.2646484375,
          "content": "hashbrown\n=========\n\n[![Build Status](https://github.com/rust-lang/hashbrown/actions/workflows/rust.yml/badge.svg)](https://github.com/rust-lang/hashbrown/actions)\n[![Crates.io](https://img.shields.io/crates/v/hashbrown.svg)](https://crates.io/crates/hashbrown)\n[![Documentation](https://docs.rs/hashbrown/badge.svg)](https://docs.rs/hashbrown)\n[![Rust](https://img.shields.io/badge/rust-1.65.0%2B-blue.svg?maxAge=3600)](https://github.com/rust-lang/hashbrown)\n\nThis crate is a Rust port of Google's high-performance [SwissTable] hash\nmap, adapted to make it a drop-in replacement for Rust's standard `HashMap`\nand `HashSet` types.\n\nThe original C++ version of SwissTable can be found [here], and this\n[CppCon talk] gives an overview of how the algorithm works.\n\nSince Rust 1.36, this is now the `HashMap` implementation for the Rust standard\nlibrary. However you may still want to use this crate instead since it works\nin environments without `std`, such as embedded systems and kernels.\n\n[SwissTable]: https://abseil.io/blog/20180927-swisstables\n[here]: https://github.com/abseil/abseil-cpp/blob/master/absl/container/internal/raw_hash_set.h\n[CppCon talk]: https://www.youtube.com/watch?v=ncHmEUmJZf4\n\n## [Change log](CHANGELOG.md)\n\n## Features\n\n- Drop-in replacement for the standard library `HashMap` and `HashSet` types.\n- Uses [foldhash](https://github.com/orlp/foldhash) as the default hasher, which is much faster than SipHash.\n  However, foldhash does *not provide the same level of HashDoS resistance* as SipHash, so if that is important to you, you might want to consider using a different hasher.\n- Around 2x faster than the previous standard library `HashMap`.\n- Lower memory usage: only 1 byte of overhead per entry instead of 8.\n- Compatible with `#[no_std]` (but requires a global allocator with the `alloc` crate).\n- Empty hash maps do not allocate any memory.\n- SIMD lookups to scan multiple hash entries in parallel.\n\n## Usage\n\nAdd this to your `Cargo.toml`:\n\n```toml\n[dependencies]\nhashbrown = \"0.15\"\n```\n\nThen:\n\n```rust\nuse hashbrown::HashMap;\n\nlet mut map = HashMap::new();\nmap.insert(1, \"one\");\n```\n## Flags\nThis crate has the following Cargo features:\n\n- `nightly`: Enables nightly-only features including: `#[may_dangle]`.\n- `serde`: Enables serde serialization support.\n- `rayon`: Enables rayon parallel iterator support.\n- `equivalent`: Allows comparisons to be customized with the `Equivalent` trait. (enabled by default)\n- `raw-entry`: Enables access to the deprecated `RawEntry` API.\n- `inline-more`: Adds inline hints to most functions, improving run-time performance at the cost\n  of compilation time. (enabled by default)\n- `default-hasher`: Compiles with foldhash as default hasher. (enabled by default)\n- `allocator-api2`: Enables support for allocators that support `allocator-api2`. (enabled by default)\n\n## License\n\nLicensed under either of:\n\n * Apache License, Version 2.0, ([LICENSE-APACHE](LICENSE-APACHE) or https://www.apache.org/licenses/LICENSE-2.0)\n * MIT license ([LICENSE-MIT](LICENSE-MIT) or https://opensource.org/licenses/MIT)\n\nat your option.\n\n### Contribution\n\nUnless you explicitly state otherwise, any contribution intentionally submitted\nfor inclusion in the work by you, as defined in the Apache-2.0 license, shall be dual licensed as above, without any\nadditional terms or conditions.\n"
        },
        {
          "name": "benches",
          "type": "tree",
          "content": null
        },
        {
          "name": "ci",
          "type": "tree",
          "content": null
        },
        {
          "name": "clippy.toml",
          "type": "blob",
          "size": 0.06640625,
          "content": "doc-valid-idents = [ \"CppCon\", \"SwissTable\", \"SipHash\", \"HashDoS\" ]\n"
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}