{
  "metadata": {
    "timestamp": 1736709330052,
    "page": 739,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjc0MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "rp-rs/rp-hal",
      "stars": 1505,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.0390625,
          "content": ".idea/\ntarget\nCargo.lock\n.vscode\n*.orig\n"
        },
        {
          "name": "CODE_OF_CONDUCT.md",
          "type": "blob",
          "size": 4.4169921875,
          "content": "# The Rust Code of Conduct\n\n## Conduct\n\n**Contact**: [rp-rs team][team]\n\n* We are committed to providing a friendly, safe and welcoming environment for all, regardless of level of experience, gender identity and expression, sexual orientation, disability, personal appearance, body size, race, ethnicity, age, religion, nationality, or other similar characteristic.\n* On IRC, please avoid using overtly sexual nicknames or other nicknames that might detract from a friendly, safe and welcoming environment for all.\n* Please be kind and courteous. There's no need to be mean or rude.\n* Respect that people have differences of opinion and that every design or implementation choice carries a trade-off and numerous costs. There is seldom a right answer.\n* Please keep unstructured critique to a minimum. If you have solid ideas you want to experiment with, make a fork and see how it works.\n* We will exclude you from interaction if you insult, demean or harass anyone. That is not welcome behavior. We interpret the term \"harassment\" as including the definition in the [Citizen Code of Conduct](http://citizencodeofconduct.org/); if you have any lack of clarity about what might be included in that concept, please read their definition. In particular, we don't tolerate behavior that excludes people in socially marginalized groups.\n* Private harassment is also unacceptable. No matter who you are, if you feel you have been or are being harassed or made uncomfortable by a community member, please contact one of the channel ops or any of the [rp-rs team][team] immediately. Whether you're a regular contributor or a newcomer, we care about making this community a safe place for you and we've got your back.\n* Likewise any spamming, trolling, flaming, baiting or other attention-stealing behavior is not welcome.\n\n## Moderation\n\nThese are the policies for upholding our community's standards of conduct.\n\n1. Remarks that violate the Rust standards of conduct, including hateful, hurtful, oppressive, or exclusionary remarks, are not allowed. (Cursing is allowed, but never targeting another user, and never in a hateful manner.)\n2. Remarks that moderators find inappropriate, whether listed in the code of conduct or not, are also not allowed.\n3. Moderators will first respond to such remarks with a warning.\n4. If the warning is unheeded, the user will be \"kicked,\" i.e., kicked out of the communication channel to cool off.\n5. If the user comes back and continues to make trouble, they will be banned, i.e., indefinitely excluded.\n6. Moderators may choose at their discretion to un-ban the user if it was a first offense and they offer the offended party a genuine apology.\n7. If a moderator bans someone and you think it was unjustified, please take it up with that moderator, or with a different moderator, **in private**. Complaints about bans in-channel are not allowed.\n8. Moderators are held to a higher standard than other community members. If a moderator creates an inappropriate situation, they should expect less leeway than others.\n\nIn the Rust community we strive to go the extra step to look out for each other. Don't just aim to be technically unimpeachable, try to be your best self. In particular, avoid flirting with offensive or sensitive issues, particularly if they're off-topic; this all too often leads to unnecessary fights, hurt feelings, and damaged trust; worse, it can drive people away from the community entirely.\n\nAnd if someone takes issue with something you said or did, resist the urge to be defensive. Just stop doing what it was they complained about and apologize. Even if you feel you were misinterpreted or unfairly accused, chances are good there was something you could've communicated better â€” remember that it's your responsibility to make your fellow Rustaceans comfortable. Everyone wants to get along and we are all here first and foremost because we want to talk about cool technology. You will find that people will be eager to assume good intent and forgive as long as you earn their trust.\n\nThe enforcement policies listed above apply to all official embedded rp-rs venues; including official Matrix channels (##rp-rs) and GitHub repositories under rp-rs.\n\n*Adapted from the [Node.js Policy on Trolling](http://blog.izs.me/post/30036893703/policy-on-trolling) as well as the [Contributor Covenant v1.3.0](https://www.contributor-covenant.org/version/1/3/0/).*\n\n*Text kindly borrowed from the Rust Embedded Working Group*\n\n[team]: https://github.com/orgs/rp-rs/people\n"
        },
        {
          "name": "LICENSE-APACHE",
          "type": "blob",
          "size": 11.091796875,
          "content": "\n                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"[]\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright [yyyy] [name of copyright owner]\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n"
        },
        {
          "name": "LICENSE-MIT",
          "type": "blob",
          "size": 1.0439453125,
          "content": "Copyright (c) 2021-2024 The rp-rs Developers\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "NOTICE",
          "type": "blob",
          "size": 0.099609375,
          "content": "Copyright (c) 2021-2024 The rp-rs Developers\n\nOriginally published at https://github.com/rp-rs/rp-hal\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 11.880859375,
          "content": "<!-- PROJECT LOGO -->\n<br />\n<p align=\"center\">\n  <a href=\"https://github.com/rp-rs/rp-hal\">\n    <img src=\"https://www.svgrepo.com/show/281119/microchip.svg\" alt=\"Logo\" width=\"140\" height=\"140\">\n  </a>\n\n   <h3 align=\"center\">rp-hal</h3>\n\n  <p align=\"center\">\n    Rust support for the \"Raspberry Silicon\" family of microcontrollers\n    <br />\n    <a href=\"https://docs.rs/rp2040-hal\"><strong>Explore the API docs Â»</strong></a>\n    <br />\n    <br />\n    <a href=\"https://github.com/rp-rs/rp-hal-boards/tree/main/boards/rp-pico/examples\">View Demos</a>\n    Â·\n    <a href=\"https://github.com/rp-rs/rp-hal/issues\">Report a Bug</a>\n    Â·\n    <a href=\"https://matrix.to/#/#rp-rs:matrix.org\">Chat on Matrix</a>\n  </p>\n</p>\n\n\n<!-- TABLE OF CONTENTS -->\n<details open=\"open\">\n  <summary><h2 style=\"display: inline-block\">Table of Contents</h2></summary>\n  <ol>\n    <li><a href=\"#getting-started\">Getting Started</a></li>\n    <li><a href=\"#programming\">Programming</a></li>\n    <li><a href=\"#roadmap\">Roadmap</a></li>\n    <li><a href=\"#contributing\">Contributing</a></li>\n    <li><a href=\"#license\">License</a></li>\n    <li><a href=\"#contact\">Contact</a></li>\n    <li><a href=\"#acknowledgements\">Acknowledgements</a></li>\n  </ol>\n</details>\n\n<!-- GETTING STARTED -->\n\n## Getting Started\n\nSo, you want to program your new Raspberry Silicon microcontroller, using the\nRust programming language. You've come to the right place!\n\nThis repository is `rp-hal` - a collection of high-level drivers for the\nRaspberry Silicon RP2040 microcontroller and various associated boards, like\nthe Raspberry Pi Pico and the Adafruit Feather RP2040.\n\nIf you want to write an application for Raspberry Silicon, check out our\n[RP2040 Project Template](https://github.com/rp-rs/rp2040-project-template).\n\nIf you want to write code that uses the Raspberry Silicon PIO State Machines,\ncheck out [pio-rs](https://github.com/rp-rs/pio-rs). You can even compile PIO\nprograms at run-time, on the RP2040 itself!\n\nIf you want to try out some examples on one of our supported boards, check out\nthe list of [*Board Support Packages*][BSPs], and click through to see the various\nexamples for each board.\n\nBefore trying any of the examples, please ensure you have the latest stable\nversion of Rust installed, along with the right target support:\n\n```sh\nrustup self update\nrustup update stable\nrustup target add thumbv6m-none-eabi\n```\n\nYou may also want to install these helpful tools:\n\n```sh\n# Useful to creating UF2 images for the RP2040 USB Bootloader\ncargo install elf2uf2-rs --locked\n# Useful for flashing over the SWD pins using a supported JTAG probe\ncargo install --locked probe-rs-tools\n```\n\n## Packages\n\nThere is a _Hardware Abstraction Layer_ (or HAL) crate for the RP2040 chip,\nand _Board Support Package_ crates for a number of RP2040 based PCBs. If you\nare writing code that should run on any microcontroller, consider using the\ngeneric Rust Embedded Working Group's [Embedded HAL].\n\nIf you are writing code that should work on any RP2040 device, use the _HAL_\ncrate. If you are running code on a specific board, use the appropriate _BSP_\ncrate (which will include the _HAL_ crate for you). Please note, you cannot\ndepend on multiple _BSP_ crates; you have to pick one, or use [Cargo Features]\nto select one at build time.\n\nEach BSP includes some examples to show off the features of that particular board.\n\n[Cargo Workspace]: https://doc.rust-lang.org/cargo/reference/workspaces.html\n[Embedded HAL]: https://github.com/rust-embedded/embedded-hal\n[Cargo Features]: https://doc.rust-lang.org/cargo/reference/features.html\n\n### [rp2040-hal] - The HAL for the [Raspberry Silicon RP2040]\n\nYou should include this crate in your project if you want to write a driver or\nlibrary that runs on the [Raspberry Silicon RP2040], or if you are writing a Board\nSupport Package (see later on).\n\nThe crate provides high-level drivers for the RP2040's internal peripherals,\nsuch as the SPI Controller and the IÂ²C Controller. It doesn't know anything\nabout how your particular board is wired up (such as what each IO pin of the\nRP2040 is connected to).\n\nThere are examples in this crate to show how to use various peripherals\n(GPIO, IÂ²C, SPI, UART, etc) but note that the pin-outs may not match any\nparticular board.\n\n### [BSPs] - Board support packages\n\nThere are BSPs for various boards based on the RP2040 available in\na [separate repository][BSPs].\n\n[rp2040-hal]: https://github.com/rp-rs/rp-hal/tree/main/rp2040-hal\n[Raspberry Silicon RP2040]: https://www.raspberrypi.org/products/rp2040/\n[BSPs]: https://github.com/rp-rs/rp-hal-boards/\n\n<!-- PROGRAMMING -->\n## Programming\n\nRust generates standard Arm ELF files, which you can load onto your Raspberry Pi\nSilicon device with your favourite Arm flashing/debugging tool. In addition, the\nRP2040 contains a ROM bootloader which appears as a Mass Storage Device over USB\nthat accepts UF2 format images. You can use the `elf2uf2-rs` package to convert\nthe Arm ELF file to a UF2 format image.\n\nFor boards with USB Device support like the Raspberry Pi Pico, we recommend you\nuse the UF2 process.\n\nThe RP2040 contains two Cortex-M0+ processors, which execute Thumb-2 encoded\nARMv6-M instructions. There are no operating-specific features in the binaries\nproduced - they are for 'bare-metal' systems. For compatibility with other Arm\ncode (e.g. as produced by GCC), Rust uses the *Arm Embedded-Application Binary\nInterface* standard or EABI. Therefore, any Rust code for the RP2040 should be\ncompiled with the target *`thumbv6m-none-eabi`*.\n\nMore details can be found in the [Project Template].\n\n### Linker flags\n\nBesides the correct target, which mainly defines the instruction set,\nit's also necessary to use a certain memory layout compatible with\nthe rp2040. To achieve that, rustc must be called with appropriate\nlinker flags. In the [Project Template], those flags are defined in\n[`.cargo/config.toml`](https://github.com/rp-rs/rp2040-project-template/blob/main/.cargo/config.toml).\nAnother necessary file is\n[`memory.x`](https://github.com/rp-rs/rp2040-project-template/blob/main/memory.x).\n\nMore detailed information on how the linker flags work can be found in\n[the cortex_m_rt docs](https://docs.rs/cortex-m-rt/latest/cortex_m_rt/).\n\nIn most cases, it should be sufficient to use the example files from the\n[Project Template].\n\n### Loading a UF2 over USB\n\n*Step 1* - Install [`elf2uf2-rs`](https://github.com/JoNil/elf2uf2-rs):\n\n```console\n$ cargo install elf2uf2-rs --locked\n```\n\n*Step 2* - Make sure your .cargo/config contains the following (it should by\ndefault if you are working in this repository):\n\n```toml\n[target.thumbv6m-none-eabi]\nrunner = \"elf2uf2-rs -d\"\n```\n\nThe `thumbv6m-none-eabi` target may be replaced by the all-Arm wildcard\n`'cfg(all(target_arch = \"arm\", target_os = \"none\"))'`.\n\n*Step 3* - Boot your RP2040 into \"USB Bootloader mode\", typically by rebooting\nwhilst holding some kind of \"Boot Select\" button. On Linux, you will also need\nto 'mount' the device, like you would a USB Thumb Drive.\n\n*Step 4* - Use `cargo run`, which will compile the code and started the\nspecified 'runner'. As the 'runner' is the elf2uf2-rs tool, it will build a UF2\nfile and copy it to your RP2040.\n\n```console\n$ cargo run --release --features \"critical-section-impl,rt,defmt\" --example pwm_blink\n```\n\n(The `pwm_blink` example doesn't need all these feature flags. They are listed here\nso you can use the same command for all examples.)\n\n### Loading with probe-rs\n[probe-rs](https://github.com/probe-rs/probe-rs) is a library and a\ncommand-line tool which can flash a wide variety of microcontrollers\nusing a wide variety of debug/JTAG probes. Unlike using, say, OpenOCD,\nprobe-rs can autodetect your debug probe, which can make it easier to use.\n\n*Step 1* - Install `probe-rs`:\n\n```console\n$ cargo install --locked probe-rs-tools\n```\n\nAlternatively, follow the installation instructions on https://probe.rs/.\n\n*Step 2* - Make sure your .cargo/config contains the following:\n\n```toml\n[target.thumbv6m-none-eabi]\nrunner = \"probe-rs run --chip RP2040\"\n```\n\n*Step 3* - Connect your USB JTAG/debug probe (such as a Raspberry Pi Pico\nrunning [this firmware](https://github.com/majbthrd/DapperMime)) to the SWD\nprogramming pins on your RP2040 board. Check the probe has been found by\nrunning:\n\n```console\n$ probe-rs list\nThe following debug probes were found:\n[0]: J-Link (J-Link) (VID: 1366, PID: 0101, Serial: 000099999999, JLink)\n```\n\nThere is a SEGGER J-Link connected in the example above - the message you see\nwill reflect the probe you have connected.\n\n*Step 4* - Use `cargo run`, which will compile the code and start the specified\n'runner'. As the 'runner' is the `probe-rs` tool, it will connect to the\nRP2040 via the first probe it finds, and install your firmware into the Flash\nconnected to the RP2040.\n\n```console\n$ cargo run --release --example pwm_blink\n```\n\n### Loading with picotool\n\nAs ELF files produced by compiling Rust code are completely compatible with ELF\nfiles produced by compiling C or C++ code, you can also use the Raspberry Pi\ntool [picotool](https://github.com/raspberrypi/picotool). The only thing to be\naware of is that picotool expects your ELF files to have a `.elf` extension, and\nby default Rust does not give the ELF files any extension. You can fix this by\nsimply renaming the file.\n\nAlso of note is that the special\n[pico-sdk](https://github.com/raspberrypi/pico-sdk) macros which hide\ninformation in the ELF file in a way that `picotool info` can read it out, are\nnot supported in Rust. An alternative is TBC.\n\n[Project Template]: https://github.com/rp-rs/rp2040-project-template\n\n<!-- ROADMAP -->\n## Roadmap\n\nNOTE These packages are under active development. As such, it is likely to\nremain volatile until a 1.0.0 release.\n\nSee the [open issues](https://github.com/rp-rs/rp-hal/issues) for a list of\nproposed features (and known issues).\n\n<!-- CONTRIBUTING -->\n## Contributing\n\nContributions are what make the open source community such an amazing place to be learn, inspire, and create. Any contributions you make are **greatly appreciated**.\n\nThe steps are:\n\n1. Fork the Project by clicking the 'Fork' button at the top of the page.\n2. Create your Feature Branch (`git checkout -b feature/AmazingFeature`)\n3. Make some changes to the code or documentation.\n4. Commit your Changes (`git commit -m 'Add some AmazingFeature'`)\n5. Push to the Feature Branch (`git push origin feature/AmazingFeature`)\n6. Create a [New Pull Request](https://github.com/rp-rs/rp-hal/pulls)\n7. An admin will review the Pull Request and discuss any changes that may be required.\n8. Once everyone is happy, the Pull Request can be merged by an admin, and your work is part of our project!\n\n<!-- CODE OF CONDUCT -->\n## Code of Conduct\n\nContribution to this crate is organized under the terms of the [Rust Code of\nConduct][CoC], and the maintainer of this crate, the [rp-rs team], promises\nto intervene to uphold that code of conduct.\n\n[CoC]: CODE_OF_CONDUCT.md\n[rp-rs team]: https://github.com/orgs/rp-rs/people\n\n<!-- LICENSE -->\n## License\n\nThe contents of this repository are dual-licensed under the _MIT OR Apache 2.0_\nLicense. That means you can choose either the MIT license or the Apache 2.0\nlicense when you re-use this code. See [`LICENSE-MIT`](./LICENSE-MIT) or\n[`LICENSE-APACHE`](./LICENSE-APACHE) for more information on each specific\nlicense. Our Apache 2.0 notices can be found in [`NOTICE`](./NOTICE).\n\nUnless you explicitly state otherwise, any contribution intentionally submitted\nfor inclusion in the work by you, as defined in the Apache-2.0 license, shall be\ndual licensed as above, without any additional terms or conditions.\n\n<!-- CONTACT -->\n## Contact\n\nRaise an issue: [https://github.com/rp-rs/rp-hal/issues](https://github.com/rp-rs/rp-hal/issues)\nChat to us on Matrix: [#rp-rs:matrix.org](https://matrix.to/#/#rp-rs:matrix.org)\n\n<!-- ACKNOWLEDGEMENTS -->\n## Acknowledgements\n\n* [Othneil Drew's README template](https://github.com/othneildrew)\n* [Rust Embedded Working Group](https://github.com/rust-embedded)\n* [Raspberry Pi](https://raspberrypi.org) and the [Pico SDK](https://github.com/raspberrypi/pico-sdk)\n"
        },
        {
          "name": "clippy.toml",
          "type": "blob",
          "size": 0.03515625,
          "content": "avoid-breaking-exported-api = false\n"
        },
        {
          "name": "format.bat",
          "type": "blob",
          "size": 0.4521484375,
          "content": "rem Formats all the files in the repo\n\ncargo fmt --manifest-path rp2040-hal\\Cargo.toml\ncargo fmt --manifest-path rp2040-hal-macros\\Cargo.toml\ncargo fmt --manifest-path rp2040-hal-examples\\Cargo.toml\ncargo fmt --manifest-path on-target-tests\\Cargo.toml\ncargo fmt --manifest-path rp235x-hal\\Cargo.toml\ncargo fmt --manifest-path rp235x-hal-macros\\Cargo.toml\ncargo fmt --manifest-path rp235x-hal-examples\\Cargo.toml\ncargo fmt --manifest-path rp-hal-common\\Cargo.toml\n"
        },
        {
          "name": "format.sh",
          "type": "blob",
          "size": 0.4609375,
          "content": "#!/bin/sh\n\n# Formats all the files in the repo\n\ncargo fmt --manifest-path rp2040-hal/Cargo.toml\ncargo fmt --manifest-path rp2040-hal-macros/Cargo.toml\ncargo fmt --manifest-path rp2040-hal-examples/Cargo.toml\ncargo fmt --manifest-path on-target-tests/Cargo.toml\ncargo fmt --manifest-path rp235x-hal/Cargo.toml\ncargo fmt --manifest-path rp235x-hal-macros/Cargo.toml\ncargo fmt --manifest-path rp235x-hal-examples/Cargo.toml\ncargo fmt --manifest-path rp-hal-common/Cargo.toml\n"
        },
        {
          "name": "on-target-tests",
          "type": "tree",
          "content": null
        },
        {
          "name": "rp-binary-info",
          "type": "tree",
          "content": null
        },
        {
          "name": "rp-hal-common",
          "type": "tree",
          "content": null
        },
        {
          "name": "rp2040-hal-examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "rp2040-hal-macros",
          "type": "tree",
          "content": null
        },
        {
          "name": "rp2040-hal",
          "type": "tree",
          "content": null
        },
        {
          "name": "rp235x-hal-examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "rp235x-hal-macros",
          "type": "tree",
          "content": null
        },
        {
          "name": "rp235x-hal",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}