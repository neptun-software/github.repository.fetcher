{
  "metadata": {
    "timestamp": 1736709328292,
    "page": 734,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjc0MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "o8vm/octox",
      "stars": 1512,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".cargo",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.0546875,
          "content": "/target\r\nCargo.lock\r\n/src/user/usys.rs\r\n/src/user/lib/_*"
        },
        {
          "name": ".projectile",
          "type": "blob",
          "size": 0,
          "content": ""
        },
        {
          "name": "Cargo.toml",
          "type": "blob",
          "size": 0.6748046875,
          "content": "cargo-features = [\"per-package-target\"]\n\n[package]\nname = \"octox\"\ndescription = \"Unix like Operating System\"\nauthors = [\"Hayato Ohhashi <o8@vmm.dev>\"]\nedition = \"2021\"\nlicense.workspace = true\nversion.workspace = true\nrepository.workspace = true\nforced-target = \"riscv64gc-unknown-none-elf\"\n\n[workspace.package]\nversion = \"0.1.0\"\nlicense = \"MIT/Apache-2.0\"\nrepository = \"https://github.com/o8vm/octox\"\n\n[[bin]]\nname = \"octox\"\npath = \"src/kernel/main.rs\"\n\n[workspace]\nmembers = [\n    \"src/kernel\",\n    \"src/mkfs\",\n    \"src/user\",\n]\n\n[workspace.dependencies]\nlibkernel = { path = \"src/kernel\", default-features = false }\n\n[dependencies]\nlibkernel = { workspace = true, features = [\"kernel\"] }\n"
        },
        {
          "name": "LICENSE-APACHE",
          "type": "blob",
          "size": 9.4951171875,
          "content": "                              Apache License\n                        Version 2.0, January 2004\n                     http://www.apache.org/licenses/\n\nTERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n1. Definitions.\n\n   \"License\" shall mean the terms and conditions for use, reproduction,\n   and distribution as defined by Sections 1 through 9 of this document.\n\n   \"Licensor\" shall mean the copyright owner or entity authorized by\n   the copyright owner that is granting the License.\n\n   \"Legal Entity\" shall mean the union of the acting entity and all\n   other entities that control, are controlled by, or are under common\n   control with that entity. For the purposes of this definition,\n   \"control\" means (i) the power, direct or indirect, to cause the\n   direction or management of such entity, whether by contract or\n   otherwise, or (ii) ownership of fifty percent (50%) or more of the\n   outstanding shares, or (iii) beneficial ownership of such entity.\n\n   \"You\" (or \"Your\") shall mean an individual or Legal Entity\n   exercising permissions granted by this License.\n\n   \"Source\" form shall mean the preferred form for making modifications,\n   including but not limited to software source code, documentation\n   source, and configuration files.\n\n   \"Object\" form shall mean any form resulting from mechanical\n   transformation or translation of a Source form, including but\n   not limited to compiled object code, generated documentation,\n   and conversions to other media types.\n\n   \"Work\" shall mean the work of authorship, whether in Source or\n   Object form, made available under the License, as indicated by a\n   copyright notice that is included in or attached to the work\n   (an example is provided in the Appendix below).\n\n   \"Derivative Works\" shall mean any work, whether in Source or Object\n   form, that is based on (or derived from) the Work and for which the\n   editorial revisions, annotations, elaborations, or other modifications\n   represent, as a whole, an original work of authorship. For the purposes\n   of this License, Derivative Works shall not include works that remain\n   separable from, or merely link (or bind by name) to the interfaces of,\n   the Work and Derivative Works thereof.\n\n   \"Contribution\" shall mean any work of authorship, including\n   the original version of the Work and any modifications or additions\n   to that Work or Derivative Works thereof, that is intentionally\n   submitted to Licensor for inclusion in the Work by the copyright owner\n   or by an individual or Legal Entity authorized to submit on behalf of\n   the copyright owner. For the purposes of this definition, \"submitted\"\n   means any form of electronic, verbal, or written communication sent\n   to the Licensor or its representatives, including but not limited to\n   communication on electronic mailing lists, source code control systems,\n   and issue tracking systems that are managed by, or on behalf of, the\n   Licensor for the purpose of discussing and improving the Work, but\n   excluding communication that is conspicuously marked or otherwise\n   designated in writing by the copyright owner as \"Not a Contribution.\"\n\n   \"Contributor\" shall mean Licensor and any individual or Legal Entity\n   on behalf of whom a Contribution has been received by Licensor and\n   subsequently incorporated within the Work.\n\n2. Grant of Copyright License. Subject to the terms and conditions of\n   this License, each Contributor hereby grants to You a perpetual,\n   worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n   copyright license to reproduce, prepare Derivative Works of,\n   publicly display, publicly perform, sublicense, and distribute the\n   Work and such Derivative Works in Source or Object form.\n\n3. Grant of Patent License. Subject to the terms and conditions of\n   this License, each Contributor hereby grants to You a perpetual,\n   worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n   (except as stated in this section) patent license to make, have made,\n   use, offer to sell, sell, import, and otherwise transfer the Work,\n   where such license applies only to those patent claims licensable\n   by such Contributor that are necessarily infringed by their\n   Contribution(s) alone or by combination of their Contribution(s)\n   with the Work to which such Contribution(s) was submitted. If You\n   institute patent litigation against any entity (including a\n   cross-claim or counterclaim in a lawsuit) alleging that the Work\n   or a Contribution incorporated within the Work constitutes direct\n   or contributory patent infringement, then any patent licenses\n   granted to You under this License for that Work shall terminate\n   as of the date such litigation is filed.\n\n4. Redistribution. You may reproduce and distribute copies of the\n   Work or Derivative Works thereof in any medium, with or without\n   modifications, and in Source or Object form, provided that You\n   meet the following conditions:\n\n   (a) You must give any other recipients of the Work or\n       Derivative Works a copy of this License; and\n\n   (b) You must cause any modified files to carry prominent notices\n       stating that You changed the files; and\n\n   (c) You must retain, in the Source form of any Derivative Works\n       that You distribute, all copyright, patent, trademark, and\n       attribution notices from the Source form of the Work,\n       excluding those notices that do not pertain to any part of\n       the Derivative Works; and\n\n   (d) If the Work includes a \"NOTICE\" text file as part of its\n       distribution, then any Derivative Works that You distribute must\n       include a readable copy of the attribution notices contained\n       within such NOTICE file, excluding those notices that do not\n       pertain to any part of the Derivative Works, in at least one\n       of the following places: within a NOTICE text file distributed\n       as part of the Derivative Works; within the Source form or\n       documentation, if provided along with the Derivative Works; or,\n       within a display generated by the Derivative Works, if and\n       wherever such third-party notices normally appear. The contents\n       of the NOTICE file are for informational purposes only and\n       do not modify the License. You may add Your own attribution\n       notices within Derivative Works that You distribute, alongside\n       or as an addendum to the NOTICE text from the Work, provided\n       that such additional attribution notices cannot be construed\n       as modifying the License.\n\n   You may add Your own copyright statement to Your modifications and\n   may provide additional or different license terms and conditions\n   for use, reproduction, or distribution of Your modifications, or\n   for any such Derivative Works as a whole, provided Your use,\n   reproduction, and distribution of the Work otherwise complies with\n   the conditions stated in this License.\n\n5. Submission of Contributions. Unless You explicitly state otherwise,\n   any Contribution intentionally submitted for inclusion in the Work\n   by You to the Licensor shall be under the terms and conditions of\n   this License, without any additional terms or conditions.\n   Notwithstanding the above, nothing herein shall supersede or modify\n   the terms of any separate license agreement you may have executed\n   with Licensor regarding such Contributions.\n\n6. Trademarks. This License does not grant permission to use the trade\n   names, trademarks, service marks, or product names of the Licensor,\n   except as required for reasonable and customary use in describing the\n   origin of the Work and reproducing the content of the NOTICE file.\n\n7. Disclaimer of Warranty. Unless required by applicable law or\n   agreed to in writing, Licensor provides the Work (and each\n   Contributor provides its Contributions) on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n   implied, including, without limitation, any warranties or conditions\n   of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n   PARTICULAR PURPOSE. You are solely responsible for determining the\n   appropriateness of using or redistributing the Work and assume any\n   risks associated with Your exercise of permissions under this License.\n\n8. Limitation of Liability. In no event and under no legal theory,\n   whether in tort (including negligence), contract, or otherwise,\n   unless required by applicable law (such as deliberate and grossly\n   negligent acts) or agreed to in writing, shall any Contributor be\n   liable to You for damages, including any direct, indirect, special,\n   incidental, or consequential damages of any character arising as a\n   result of this License or out of the use or inability to use the\n   Work (including but not limited to damages for loss of goodwill,\n   work stoppage, computer failure or malfunction, or any and all\n   other commercial damages or losses), even if such Contributor\n   has been advised of the possibility of such damages.\n\n9. Accepting Warranty or Additional Liability. While redistributing\n   the Work or Derivative Works thereof, You may choose to offer,\n   and charge a fee for, acceptance of support, warranty, indemnity,\n   or other liability obligations and/or rights consistent with this\n   License. However, in accepting such obligations, You may act only\n   on Your own behalf and on Your sole responsibility, not on behalf\n   of any other Contributor, and only if You agree to indemnify,\n   defend, and hold each Contributor harmless for any liability\n   incurred by, or claims asserted against, such Contributor by reason\n   of your accepting any such warranty or additional liability.\n\nEND OF TERMS AND CONDITIONS\n"
        },
        {
          "name": "LICENSE-MIT",
          "type": "blob",
          "size": 1.05859375,
          "content": "MIT License\n\nCopyright (c) 2023 Hayato Ohhashi <o8@vmm.dev>\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "README.org",
          "type": "blob",
          "size": 5.130859375,
          "content": "#+title: octox\n#+author: Hayato Ohhashi\n#+email: o8@vmm.dev\n\noctox is a Unix-like operating system inspired by xv6-riscv. octox loosely\nfollows the structure and style of xv6, but is implemented in pure Rust.\n\n[[https://vhs.charm.sh/vhs-6MQBIyAo3DpBrARBxHxL35.gif]]\n\n- Everything from kernel, userland, mkfs, to build system is written in safe\n  Rust as much as possible.\n- There are no dependencies on external crates.\n- The userland has a library similar to Rust’s std with K&R malloc.\n- Multi-core support, buddy allocator as kernel-side memory allocator, file\n  system with logging support, etc.\n\n* Getting Started\n\n** Requirements\n\n- Install the rust toolchain to have cargo installed by following\n  [[https://www.rust-lang.org/tools/install][this]] guide.\n- Install ~qemu-system-riscv~\n- (option) Install ~gdb-multiarch~\n\n** Build and Run\n\n- Clone this project & enter: ~git clone ... && cd octox~\n- Build: ~cargo build --target riscv64gc-unknown-none-elf~.\n- Run: ~cargo run --target riscv64gc-unknown-none-elf~, then qemu will boot\n  octox. To exit, press ~Ctrl+a~ and ~x~.\n\n** Play with the Shell\n\nA very simple shell is implemented.\nIn addition to executing commands, you can only do the following things.\n\n- Pipe: ~cat file | head | grep test~\n- Dump processes: ~Ctrl + P~\n- End of line: ~Ctrl + D~\n- Redirect output: ~>~, ~>>~\n\n* Development\n\n** Userland Application\n\nThe userland comes with a user library called ulib (located at src/user/lib)\nthat is similar to Rust’s std, so you can use it to develop your favorite \ncommands. If you create a bin crate named ~_command~ in src/user/bin, the \nbuild.rs and mkfs.rs will place a file named ~command~ in the file system \nand make it available for use.\n\n- In src/user/Cargo.toml, define a bin crate with the name of the command you\n  want to create with a ~_~ prefix\n  #+begin_src toml\n    [[bin]]\n    name = \"_rm\"\n    path = \"bin/rm.rs\"\n  #+end_src\n- userland is also no_std, so don’t forget to add ~#[no_std]~. Use ulib to\n  develop any command you like. Here is an example of the rm command.\n  #+begin_src rust\n    #![no_std]\n    use ulib::{env, fs};\n\n    fn main() {\n        let mut args = env::args().skip(1).peekable();\n\n        if args.peek().is_none() {\n            panic!(\"Usage: rm files...\")\n        }\n        for arg in args {\n            fs::remove_file(arg).unwrap()\n        }\n    }\n  #+end_src\n- Then, ~cargo run --target riscv64gc-unknown-none-elf~ in the root of octox.\n- To use ~Vec~ and ~String~, etc, do the following:\n  #+begin_src rust\n    extern crate alloc;\n    use alloc::{string::String, vec::Vec};\n  #+end_src\n\n** Kernel\n\nDeveloping in src/kernel. Here is an example of adding a system call. If you\nwant to add a new system call, you only need to add a definition to the system\ncall table in libkernel, and the userland library will be automatically\ngenerated by build.rs.\n\n- Add a variant and Syscall Number to ~enum SysCalls~ in src/kernel/syscall.rs.\n  Here is ~Dup2~ as an example:\n  #+begin_src rust\n    pub enum SysCalls {\n        Fork = 1,\n        ...,\n        Dup2 = 23,\n        Invalid = 0,\n    }\n  #+end_src\n- Define the function signature of the system call in the ~TABLE~ of\n  ~SysCalls~. Use the enum type ~Fn~ to describe the return type(~U~ (Unit),\n  ~I~ (Integer), ~N~ (never)) and use ~&str~ to represent arguments. then,\n  define kernel-side implementation as a method on ~SysCalls~. ~cfg~ flag is\n  used to control the compilation target for kernel and the rest. Here is an\n  example of ~dup2~:\n  #+begin_src rust\n    impl SysCalls {\n        pub const TABLE: [(fn, &'static str); variant_count::<Self>()] = [\n            (Fn::N(Self::Invalid), \"\"),\n            (Fn::I(Self::fork), \"()\"),\n            (Fn::N(Self::exit), \"(xstatus: i32)\"),\n            ...,\n            (Fn::I(Self::dup2), \"(src: usize, dst: usize)\"),\n        ];\n        pub fn dup2() -> Result<usize> {\n            #[cfg(not(all(target_os = \"none\", feature = \"kernel\")))]\n            return Ok(0);\n            #[cfg(all(target_os = \"none\", feature = \"kernel\"))]\n            {\n                let p = Cpus::myproc().unwrap().data_mut();\n                let src_fd = argraw(0); let dst_fd = argraw(1);\n                if src_fd != dst_fd {\n                    let mut src = p.ofile.get_mut(src_fd).unwrap()\n                        .take().unwrap();\n                    src.clear_cloexec();\n                    p.ofile.get_mut(dst_fd)\n                        .ok_or(FileDescriptorTooLarge)?.replace(src);\n                }\n                Ok(dst_fd)\n            }\n        }\n  #+end_src\n- With just these steps, the dup2 system call is implemented in both kernel and\n  userland.\n\n* License\n\nLicensed under either of\n\n- [[http://www.apache.org/licenses/LICENSE-2.0][Apache License, Version 2.0]]\n- [[http://opensource.org/licenses/MIT][MIT license]]\n\nat your option.\n\n* Acknowledgments\n\noctox is inspired by [[https://github.com/mit-pdos/xv6-riscv][xv6-riscv]].\n\nI'm also grateful for the bug reports and discussion about the implementation\ncontributed by Takahiro Itazuri and Kuniyuki Iwashima.\n\n* Contribution\n\nThis is a learning project for me, and I will not be accepting pull requests\nuntil I consider the implementation complete. However, discussions and advice\nare welcome.\n"
        },
        {
          "name": "build.rs",
          "type": "blob",
          "size": 3.80859375,
          "content": "use std::{\n    fs, io::Result, path::{Path, PathBuf}, process::Command\n};\n\nfn main() {\n    let out_dir = PathBuf::from(std::env::var(\"OUT_DIR\").unwrap());\n\n    // build user programs\n    let (uprogs_src_path, uprogs) = build_uprogs(&out_dir);\n\n    // build mkfs\n    let mkfs_path = build_mkfs(&out_dir);\n\n    // build fs.img\n    let fs_img = PathBuf::from(std::env::var(\"CARGO_MANIFEST_DIR\").unwrap())\n        .join(\"target\")\n        .join(\"fs.img\");\n    println!(\"cargo:rerun-if-changed={}\", mkfs_path.display());\n    println!(\"cargo:rerun-if-changed={}\", uprogs_src_path.display());\n    let readme = Path::new(env!(\"CARGO_MANIFEST_DIR\")).join(\"README.org\");\n    assert!(readme.exists(), \"README.org not found\");\n    let mut mkfs_cmd = Command::new(&mkfs_path);\n    mkfs_cmd.current_dir(&out_dir);\n    mkfs_cmd.arg(fs_img).arg(&readme).args(uprogs);\n    mkfs_cmd.status().expect(\"mkfs fs.img failed\");\n\n    // linker script for octox kernel\n    println!(\"cargo:rustc-link-arg-bin=octox=--script=src/kernel/kernel.ld\");\n}\n\nfn build_uprogs(out_dir: &Path) -> (PathBuf, Vec<PathBuf>) {\n    let cargo = std::env::var(\"CARGO\").unwrap_or_else(|_| \"cargo\".into());\n    let mut cmd = Command::new(cargo);\n    cmd.arg(\"install\").arg(\"uprogs\");\n    let local_path = Path::new(env!(\"CARGO_MANIFEST_DIR\"))\n        .join(\"src\")\n        .join(\"user\");\n    if local_path.exists() {\n        // local build\n        cmd.arg(\"--path\").arg(&local_path);\n        println!(\"cargo:rerun-if-changed={}\", local_path.display());\n    }\n    cmd.arg(\"--root\").arg(out_dir);\n    cmd.arg(\"-vv\");\n    cmd.env(\"ROOT_OUT_DIR\", out_dir.to_str().unwrap()); // for libs and etc config\n    cmd.env_remove(\"RUSTFLAGS\");\n    cmd.env_remove(\"CARGO_ENCODED_RUSTFLAGS\");\n    cmd.env_remove(\"RUSTC_WORKSPACE_WRAPPER\");\n    let status = cmd\n        .status()\n        .expect(\"failed to run cargo install for uprogs\");\n    if status.success() {\n        let mut ufiles: Vec<PathBuf> = Vec::new();\n        let mut collet_files = |dir: &Path, prefix: Option<&str>| {\n            for entry in fs::read_dir(dir).unwrap().filter_map(Result::ok) {\n                let path = entry.path();\n                if path.is_file() {\n                    let should_push = match (prefix, path.file_name().and_then(|s| s.to_str())) {\n                        (Some(prefix), Some(name)) if name.starts_with(prefix) => true,\n                        (None, Some(_)) => true,\n                        _ => false,\n                    };\n                    if should_push {\n                        ufiles.push(path);\n                    }\n                }\n            }\n        };\n        let dirs = [\"bin\", \"etc\", \"lib\"];\n        for dir_ent in dirs {\n            let path = out_dir.join(dir_ent);\n            collet_files(&path, Some(\"_\"));\n        }\n        (local_path, ufiles)\n    } else {\n        panic!(\"failed to build user programs\");\n    }\n}\n\nfn build_mkfs(out_dir: &Path) -> PathBuf {\n    let cargo = std::env::var(\"CARGO\").unwrap_or_else(|_| \"cargo\".into());\n    let mut cmd = Command::new(cargo);\n    cmd.arg(\"install\").arg(\"mkfs\");\n    let local_path = Path::new(env!(\"CARGO_MANIFEST_DIR\"))\n        .join(\"src\")\n        .join(\"mkfs\");\n    if local_path.exists() {\n        // local build\n        cmd.arg(\"--path\").arg(&local_path);\n        println!(\"cargo:rerun-if-changed={}\", local_path.display());\n    }\n    cmd.arg(\"--root\").arg(out_dir);\n    cmd.arg(\"-vv\");\n    cmd.env_remove(\"RUSTFLAGS\");\n    cmd.env_remove(\"CARGO_ENCODED_RUSTFLAGS\");\n    cmd.env_remove(\"RUSTC_WORKSPACE_WRAPPER\");\n    let status = cmd.status().expect(\"failed to run cargo install for mkfs\");\n    if status.success() {\n        let mut path = out_dir.join(\"bin\").join(\"mkfs\");\n        path.set_extension(std::env::consts::EXE_EXTENSION);\n        assert!(path.exists(), \"mkfs does not exist after building\");\n        path\n    } else {\n        panic!(\"failed to build mkfs\");\n    }\n}\n"
        },
        {
          "name": "rust-toolchain.toml",
          "type": "blob",
          "size": 0.0703125,
          "content": "[toolchain]\nchannel = \"nightly\"\ntargets = [\"riscv64gc-unknown-none-elf\"]"
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}