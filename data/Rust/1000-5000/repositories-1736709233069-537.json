{
  "metadata": {
    "timestamp": 1736709233069,
    "page": 537,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjU0MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "indexmap-rs/indexmap",
      "stars": 1823,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.017578125,
          "content": "target\nCargo.lock\n"
        },
        {
          "name": ".rustfmt.toml",
          "type": "blob",
          "size": 0.0166015625,
          "content": "edition = \"2021\"\n"
        },
        {
          "name": "Cargo.toml",
          "type": "blob",
          "size": 1.6591796875,
          "content": "[package]\nname = \"indexmap\"\nedition = \"2021\"\nversion = \"2.7.0\"\ndocumentation = \"https://docs.rs/indexmap/\"\nrepository = \"https://github.com/indexmap-rs/indexmap\"\nlicense = \"Apache-2.0 OR MIT\"\ndescription = \"A hash table with consistent order and fast iteration.\"\nkeywords = [\"hashmap\", \"no_std\"]\ncategories = [\"data-structures\", \"no-std\"]\nrust-version = \"1.63\"\n\n[lib]\nbench = false\n\n[dependencies]\nequivalent = { version = \"1.0\", default-features = false }\n\narbitrary = { version = \"1.0\", optional = true, default-features = false }\nquickcheck = { version = \"1.0\", optional = true, default-features = false }\nserde = { version = \"1.0\", optional = true, default-features = false }\nborsh = { version = \"1.2\", optional = true, default-features = false }\nrayon = { version = \"1.9\", optional = true }\n\n# Internal feature, only used when building as part of rustc,\n# not part of the stable interface of this crate.\nrustc-rayon = { package = \"rustc-rayon\", version = \"0.5\", optional = true }\n\n[dependencies.hashbrown]\nversion = \"0.15.0\"\ndefault-features = false\n\n[dev-dependencies]\nitertools = \"0.13\"\nrand = {version = \"0.8\", features = [\"small_rng\"] }\nquickcheck = { version = \"1.0\", default-features = false }\nfnv = \"1.0\"\nlazy_static = \"1.3\"\nfxhash = \"0.2.1\"\nserde_derive = \"1.0\"\n\n[features]\ndefault = [\"std\"]\nstd = []\n\n# for testing only, of course\ntest_debug = []\n\n[profile.bench]\ndebug = true\n\n[package.metadata.release]\nallow-branch = [\"master\"]\nsign-tag = true\ntag-name = \"{{version}}\"\n\n[package.metadata.docs.rs]\nfeatures = [\"arbitrary\", \"quickcheck\", \"serde\", \"borsh\", \"rayon\"]\nrustdoc-args = [\"--cfg\", \"docsrs\"]\n\n[workspace]\nmembers = [\"test-nostd\", \"test-serde\"]\n\n[lints.clippy]\nstyle = \"allow\"\n"
        },
        {
          "name": "LICENSE-APACHE",
          "type": "blob",
          "size": 10.5927734375,
          "content": "                              Apache License\n                        Version 2.0, January 2004\n                     http://www.apache.org/licenses/\n\nTERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n1. Definitions.\n\n   \"License\" shall mean the terms and conditions for use, reproduction,\n   and distribution as defined by Sections 1 through 9 of this document.\n\n   \"Licensor\" shall mean the copyright owner or entity authorized by\n   the copyright owner that is granting the License.\n\n   \"Legal Entity\" shall mean the union of the acting entity and all\n   other entities that control, are controlled by, or are under common\n   control with that entity. For the purposes of this definition,\n   \"control\" means (i) the power, direct or indirect, to cause the\n   direction or management of such entity, whether by contract or\n   otherwise, or (ii) ownership of fifty percent (50%) or more of the\n   outstanding shares, or (iii) beneficial ownership of such entity.\n\n   \"You\" (or \"Your\") shall mean an individual or Legal Entity\n   exercising permissions granted by this License.\n\n   \"Source\" form shall mean the preferred form for making modifications,\n   including but not limited to software source code, documentation\n   source, and configuration files.\n\n   \"Object\" form shall mean any form resulting from mechanical\n   transformation or translation of a Source form, including but\n   not limited to compiled object code, generated documentation,\n   and conversions to other media types.\n\n   \"Work\" shall mean the work of authorship, whether in Source or\n   Object form, made available under the License, as indicated by a\n   copyright notice that is included in or attached to the work\n   (an example is provided in the Appendix below).\n\n   \"Derivative Works\" shall mean any work, whether in Source or Object\n   form, that is based on (or derived from) the Work and for which the\n   editorial revisions, annotations, elaborations, or other modifications\n   represent, as a whole, an original work of authorship. For the purposes\n   of this License, Derivative Works shall not include works that remain\n   separable from, or merely link (or bind by name) to the interfaces of,\n   the Work and Derivative Works thereof.\n\n   \"Contribution\" shall mean any work of authorship, including\n   the original version of the Work and any modifications or additions\n   to that Work or Derivative Works thereof, that is intentionally\n   submitted to Licensor for inclusion in the Work by the copyright owner\n   or by an individual or Legal Entity authorized to submit on behalf of\n   the copyright owner. For the purposes of this definition, \"submitted\"\n   means any form of electronic, verbal, or written communication sent\n   to the Licensor or its representatives, including but not limited to\n   communication on electronic mailing lists, source code control systems,\n   and issue tracking systems that are managed by, or on behalf of, the\n   Licensor for the purpose of discussing and improving the Work, but\n   excluding communication that is conspicuously marked or otherwise\n   designated in writing by the copyright owner as \"Not a Contribution.\"\n\n   \"Contributor\" shall mean Licensor and any individual or Legal Entity\n   on behalf of whom a Contribution has been received by Licensor and\n   subsequently incorporated within the Work.\n\n2. Grant of Copyright License. Subject to the terms and conditions of\n   this License, each Contributor hereby grants to You a perpetual,\n   worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n   copyright license to reproduce, prepare Derivative Works of,\n   publicly display, publicly perform, sublicense, and distribute the\n   Work and such Derivative Works in Source or Object form.\n\n3. Grant of Patent License. Subject to the terms and conditions of\n   this License, each Contributor hereby grants to You a perpetual,\n   worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n   (except as stated in this section) patent license to make, have made,\n   use, offer to sell, sell, import, and otherwise transfer the Work,\n   where such license applies only to those patent claims licensable\n   by such Contributor that are necessarily infringed by their\n   Contribution(s) alone or by combination of their Contribution(s)\n   with the Work to which such Contribution(s) was submitted. If You\n   institute patent litigation against any entity (including a\n   cross-claim or counterclaim in a lawsuit) alleging that the Work\n   or a Contribution incorporated within the Work constitutes direct\n   or contributory patent infringement, then any patent licenses\n   granted to You under this License for that Work shall terminate\n   as of the date such litigation is filed.\n\n4. Redistribution. You may reproduce and distribute copies of the\n   Work or Derivative Works thereof in any medium, with or without\n   modifications, and in Source or Object form, provided that You\n   meet the following conditions:\n\n   (a) You must give any other recipients of the Work or\n       Derivative Works a copy of this License; and\n\n   (b) You must cause any modified files to carry prominent notices\n       stating that You changed the files; and\n\n   (c) You must retain, in the Source form of any Derivative Works\n       that You distribute, all copyright, patent, trademark, and\n       attribution notices from the Source form of the Work,\n       excluding those notices that do not pertain to any part of\n       the Derivative Works; and\n\n   (d) If the Work includes a \"NOTICE\" text file as part of its\n       distribution, then any Derivative Works that You distribute must\n       include a readable copy of the attribution notices contained\n       within such NOTICE file, excluding those notices that do not\n       pertain to any part of the Derivative Works, in at least one\n       of the following places: within a NOTICE text file distributed\n       as part of the Derivative Works; within the Source form or\n       documentation, if provided along with the Derivative Works; or,\n       within a display generated by the Derivative Works, if and\n       wherever such third-party notices normally appear. The contents\n       of the NOTICE file are for informational purposes only and\n       do not modify the License. You may add Your own attribution\n       notices within Derivative Works that You distribute, alongside\n       or as an addendum to the NOTICE text from the Work, provided\n       that such additional attribution notices cannot be construed\n       as modifying the License.\n\n   You may add Your own copyright statement to Your modifications and\n   may provide additional or different license terms and conditions\n   for use, reproduction, or distribution of Your modifications, or\n   for any such Derivative Works as a whole, provided Your use,\n   reproduction, and distribution of the Work otherwise complies with\n   the conditions stated in this License.\n\n5. Submission of Contributions. Unless You explicitly state otherwise,\n   any Contribution intentionally submitted for inclusion in the Work\n   by You to the Licensor shall be under the terms and conditions of\n   this License, without any additional terms or conditions.\n   Notwithstanding the above, nothing herein shall supersede or modify\n   the terms of any separate license agreement you may have executed\n   with Licensor regarding such Contributions.\n\n6. Trademarks. This License does not grant permission to use the trade\n   names, trademarks, service marks, or product names of the Licensor,\n   except as required for reasonable and customary use in describing the\n   origin of the Work and reproducing the content of the NOTICE file.\n\n7. Disclaimer of Warranty. Unless required by applicable law or\n   agreed to in writing, Licensor provides the Work (and each\n   Contributor provides its Contributions) on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n   implied, including, without limitation, any warranties or conditions\n   of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n   PARTICULAR PURPOSE. You are solely responsible for determining the\n   appropriateness of using or redistributing the Work and assume any\n   risks associated with Your exercise of permissions under this License.\n\n8. Limitation of Liability. In no event and under no legal theory,\n   whether in tort (including negligence), contract, or otherwise,\n   unless required by applicable law (such as deliberate and grossly\n   negligent acts) or agreed to in writing, shall any Contributor be\n   liable to You for damages, including any direct, indirect, special,\n   incidental, or consequential damages of any character arising as a\n   result of this License or out of the use or inability to use the\n   Work (including but not limited to damages for loss of goodwill,\n   work stoppage, computer failure or malfunction, or any and all\n   other commercial damages or losses), even if such Contributor\n   has been advised of the possibility of such damages.\n\n9. Accepting Warranty or Additional Liability. While redistributing\n   the Work or Derivative Works thereof, You may choose to offer,\n   and charge a fee for, acceptance of support, warranty, indemnity,\n   or other liability obligations and/or rights consistent with this\n   License. However, in accepting such obligations, You may act only\n   on Your own behalf and on Your sole responsibility, not on behalf\n   of any other Contributor, and only if You agree to indemnify,\n   defend, and hold each Contributor harmless for any liability\n   incurred by, or claims asserted against, such Contributor by reason\n   of your accepting any such warranty or additional liability.\n\nEND OF TERMS AND CONDITIONS\n\nAPPENDIX: How to apply the Apache License to your work.\n\n   To apply the Apache License to your work, attach the following\n   boilerplate notice, with the fields enclosed by brackets \"[]\"\n   replaced with your own identifying information. (Don't include\n   the brackets!)  The text should be enclosed in the appropriate\n   comment syntax for the file format. We also recommend that a\n   file or class name and description of purpose be included on the\n   same \"printed page\" as the copyright notice for easier\n   identification within third-party archives.\n\nCopyright [yyyy] [name of copyright owner]\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n\thttp://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n"
        },
        {
          "name": "LICENSE-MIT",
          "type": "blob",
          "size": 1.0244140625,
          "content": "Copyright (c) 2016--2017\n\nPermission is hereby granted, free of charge, to any\nperson obtaining a copy of this software and associated\ndocumentation files (the \"Software\"), to deal in the\nSoftware without restriction, including without\nlimitation the rights to use, copy, modify, merge,\npublish, distribute, sublicense, and/or sell copies of\nthe Software, and to permit persons to whom the Software\nis furnished to do so, subject to the following\nconditions:\n\nThe above copyright notice and this permission notice\nshall be included in all copies or substantial portions\nof the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF\nANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED\nTO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A\nPARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT\nSHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\nOF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR\nIN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\nDEALINGS IN THE SOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 2.755859375,
          "content": "# indexmap\n\n[![build status](https://github.com/indexmap-rs/indexmap/actions/workflows/ci.yml/badge.svg?branch=master)](https://github.com/indexmap-rs/indexmap/actions)\n[![crates.io](https://img.shields.io/crates/v/indexmap.svg)](https://crates.io/crates/indexmap)\n[![docs](https://docs.rs/indexmap/badge.svg)](https://docs.rs/indexmap)\n[![rustc](https://img.shields.io/badge/rust-1.63%2B-orange.svg)](https://img.shields.io/badge/rust-1.63%2B-orange.svg)\n\nA pure-Rust hash table which preserves (in a limited sense) insertion order.\n\nThis crate implements compact map and set data-structures,\nwhere the iteration order of the keys is independent from their hash or\nvalue. It preserves insertion order (except after removals), and it\nallows lookup of entries by either hash table key or numerical index.\n\nNote: this crate was originally released under the name `ordermap`,\nbut it was renamed to `indexmap` to better reflect its features.\nThe [`ordermap`](https://crates.io/crates/ordermap) crate now exists\nas a wrapper over `indexmap` with stronger ordering properties.\n\n# Background\n\nThis was inspired by Python 3.6's new dict implementation (which remembers\nthe insertion order and is fast to iterate, and is compact in memory).\n\nSome of those features were translated to Rust, and some were not. The result\nwas indexmap, a hash table that has following properties:\n\n- Order is **independent of hash function** and hash values of keys.\n- Fast to iterate.\n- Indexed in compact space.\n- Preserves insertion order **as long** as you don't call `.remove()`,\n  `.swap_remove()`, or other methods that explicitly change order.\n  The alternate `.shift_remove()` does preserve relative order.\n- Uses hashbrown for the inner table, just like Rust's libstd `HashMap` does.\n\n## Performance\n\n`IndexMap` derives a couple of performance facts directly from how it is constructed,\nwhich is roughly:\n\n> A raw hash table of key-value indices, and a vector of key-value pairs.\n\n- Iteration is very fast since it is on the dense key-values.\n- Removal is fast since it moves memory areas only in the table,\n  and uses a single swap in the vector.\n- Lookup is fast-ish because the initial 7-bit hash lookup uses SIMD, and indices are\n  densely stored. Lookup also is slow-ish since the actual key-value pairs are stored\n  separately. (Visible when cpu caches size is limiting.)\n\n- In practice, `IndexMap` has been tested out as the hashmap in rustc in [PR45282] and\n  the performance was roughly on par across the whole workload.\n- If you want the properties of `IndexMap`, or its strongest performance points\n  fits your workload, it might be the best hash table implementation.\n\n[PR45282]: https://github.com/rust-lang/rust/pull/45282\n\n# Recent Changes\n\nSee [RELEASES.md](https://github.com/indexmap-rs/indexmap/blob/master/RELEASES.md).\n"
        },
        {
          "name": "RELEASES.md",
          "type": "blob",
          "size": 18.685546875,
          "content": "# Releases\n\n## 2.7.0 (2024-11-30)\n\n- Added methods `Entry::insert_entry` and `VacantEntry::insert_entry`, returning\n  an `OccupiedEntry` after insertion.\n\n## 2.6.0 (2024-10-01)\n\n- Implemented `Clone` for `map::IntoIter` and `set::IntoIter`.\n- Updated the `hashbrown` dependency to version 0.15.\n\n## 2.5.0 (2024-08-30)\n\n- Added an `insert_before` method to `IndexMap` and `IndexSet`, as an\n  alternative to `shift_insert` with different behavior on existing entries.\n- Added `first_entry` and `last_entry` methods to `IndexMap`.\n- Added `From` implementations between `IndexedEntry` and `OccupiedEntry`.\n\n## 2.4.0 (2024-08-13)\n\n- Added methods `IndexMap::append` and `IndexSet::append`, moving all items from\n  one map or set into another, and leaving the original capacity for reuse.\n\n## 2.3.0 (2024-07-31)\n\n- Added trait `MutableEntryKey` for opt-in mutable access to map entry keys.\n- Added method `MutableKeys::iter_mut2` for opt-in mutable iteration of map\n  keys and values.\n\n## 2.2.6 (2024-03-22)\n\n- Added trait `MutableValues` for opt-in mutable access to set values.\n\n## 2.2.5 (2024-02-29)\n\n- Added optional `borsh` serialization support.\n\n## 2.2.4 (2024-02-28)\n\n- Added an `insert_sorted` method on `IndexMap`, `IndexSet`, and `VacantEntry`.\n- Avoid hashing for lookups in single-entry maps.\n- Limit preallocated memory in `serde` deserializers.\n\n## 2.2.3 (2024-02-11)\n\n- Added `move_index` and `swap_indices` methods to `IndexedEntry`,\n  `OccupiedEntry`, and `RawOccupiedEntryMut`, functioning like the existing\n  methods on `IndexMap`.\n- Added `shift_insert` methods on `VacantEntry` and `RawVacantEntryMut`, as\n  well as `shift_insert_hashed_nocheck` on the latter, to insert the new entry\n  at a particular index.\n- Added `shift_insert` methods on `IndexMap` and `IndexSet` to insert a new\n  entry at a particular index, or else move an existing entry there.\n\n## 2.2.2 (2024-01-31)\n\n- Added indexing methods to raw entries: `RawEntryBuilder::from_hash_full`,\n  `RawEntryBuilder::index_from_hash`, and `RawEntryMut::index`.\n\n## 2.2.1 (2024-01-28)\n\n- Corrected the signature of `RawOccupiedEntryMut::into_key(self) -> &'a mut K`,\n  This a breaking change from 2.2.0, but that version was published for less\n  than a day and has now been yanked.\n\n## 2.2.0 (2024-01-28)\n\n- The new `IndexMap::get_index_entry` method finds an entry by its index for\n  in-place manipulation.\n\n- The `Keys` iterator now implements `Index<usize>` for quick access to the\n  entry's key, compared to indexing the map to get the value.\n\n- The new `IndexMap::splice` and `IndexSet::splice` methods will drain the\n  given range as an iterator, and then replace that range with entries from\n  an input iterator.\n\n- The new trait `RawEntryApiV1` offers opt-in access to a raw entry API for\n  `IndexMap`, corresponding to the unstable API on `HashSet` as of Rust 1.75.\n\n- Many `IndexMap` and `IndexSet` methods have relaxed their type constraints,\n  e.g. removing `K: Hash` on methods that don't actually need to hash.\n\n- Removal methods `remove`, `remove_entry`, and `take` are now deprecated\n  in favor of their `shift_` or `swap_` prefixed variants, which are more\n  explicit about their effect on the index and order of remaining items.\n  The deprecated methods will remain to guide drop-in replacements from\n  `HashMap` and `HashSet` toward the prefixed methods.\n\n## 2.1.0 (2023-10-31)\n\n- Empty slices can now be created with `map::Slice::{new, new_mut}` and\n  `set::Slice::new`. In addition, `Slice::new`, `len`, and `is_empty` are\n  now `const` functions on both types.\n\n- `IndexMap`, `IndexSet`, and their respective `Slice`s all have binary\n  search methods for sorted data: map `binary_search_keys` and set\n  `binary_search` for plain comparison, `binary_search_by` for custom\n  comparators, `binary_search_by_key` for key extraction, and\n  `partition_point` for boolean conditions.\n\n## 2.0.2 (2023-09-29)\n\n- The `hashbrown` dependency has been updated to version 0.14.1 to\n  complete the support for Rust 1.63.\n\n## 2.0.1 (2023-09-27)\n\n- **MSRV**: Rust 1.63.0 is now supported as well, pending publication of\n  `hashbrown`'s relaxed MSRV (or use cargo `--ignore-rust-version`).\n\n## 2.0.0 (2023-06-23)\n\n- **MSRV**: Rust 1.64.0 or later is now required.\n\n- The `\"std\"` feature is no longer auto-detected. It is included in the\n  default feature set, or else can be enabled like any other Cargo feature.\n\n- The `\"serde-1\"` feature has been removed, leaving just the optional\n  `\"serde\"` dependency to be enabled like a feature itself.\n\n- `IndexMap::get_index_mut` now returns `Option<(&K, &mut V)>`, changing\n  the key part from `&mut K` to `&K`. There is also a new alternative\n  `MutableKeys::get_index_mut2` to access the former behavior.\n\n- The new `map::Slice<K, V>` and `set::Slice<T>` offer a linear view of maps\n  and sets, behaving a lot like normal `[(K, V)]` and `[T]` slices. Notably,\n  comparison traits like `Eq` only consider items in order, rather than hash\n  lookups, and slices even implement `Hash`.\n\n- `IndexMap` and `IndexSet` now have `sort_by_cached_key` and\n  `par_sort_by_cached_key` methods which perform stable sorts in place\n  using a key extraction function.\n\n- `IndexMap` and `IndexSet` now have `reserve_exact`, `try_reserve`, and\n  `try_reserve_exact` methods that correspond to the same methods on `Vec`.\n  However, exactness only applies to the direct capacity for items, while the\n  raw hash table still follows its own rules for capacity and load factor.\n\n- The `Equivalent` trait is now re-exported from the `equivalent` crate,\n  intended as a common base to allow types to work with multiple map types.\n\n- The `hashbrown` dependency has been updated to version 0.14.\n\n- The `serde_seq` module has been moved from the crate root to below the\n  `map` module.\n\n## 1.9.3 (2023-03-24)\n\n- Bump the `rustc-rayon` dependency, for compiler use only.\n\n## 1.9.2 (2022-11-17)\n\n- `IndexMap` and `IndexSet` both implement `arbitrary::Arbitrary<'_>` and\n  `quickcheck::Arbitrary` if those optional dependency features are enabled.\n\n## 1.9.1 (2022-06-21)\n\n- The MSRV now allows Rust 1.56.0 as well. However, currently `hashbrown`\n  0.12.1 requires 1.56.1, so users on 1.56.0 should downgrade that to 0.12.0\n  until there is a later published version relaxing its requirement.\n\n## 1.9.0 (2022-06-16)\n\n- **MSRV**: Rust 1.56.1 or later is now required.\n\n- The `hashbrown` dependency has been updated to version 0.12.\n\n- `IterMut` and `ValuesMut` now implement `Debug`.\n\n- The new `IndexMap::shrink_to` and `IndexSet::shrink_to` methods shrink\n  the capacity with a lower bound.\n\n- The new `IndexMap::move_index` and `IndexSet::move_index` methods change\n  the position of an item from one index to another, shifting the items\n  between to accommodate the move.\n\n## 1.8.2 (2022-05-27)\n\n- Bump the `rustc-rayon` dependency, for compiler use only.\n\n## 1.8.1 (2022-03-29)\n\n- The new `IndexSet::replace_full` will return the index of the item along\n  with the replaced value, if any, by @zakcutner in PR [222].\n\n[222]: https://github.com/indexmap-rs/indexmap/pull/222\n\n## 1.8.0 (2022-01-07)\n\n- The new `IndexMap::into_keys` and `IndexMap::into_values` will consume\n  the map into keys or values, respectively, matching Rust 1.54's `HashMap`\n  methods, by @taiki-e in PR [195].\n\n- More of the iterator types implement `Debug`, `ExactSizeIterator`, and\n  `FusedIterator`, by @cuviper in PR [196].\n\n- `IndexMap` and `IndexSet` now implement rayon's `ParallelDrainRange`,\n  by @cuviper in PR [197].\n\n- `IndexMap::with_hasher` and `IndexSet::with_hasher` are now `const`\n  functions, allowing static maps and sets, by @mwillsey in PR [203].\n\n- `IndexMap` and `IndexSet` now implement `From` for arrays, matching\n  Rust 1.56's implementation for `HashMap`, by @rouge8 in PR [205].\n\n- `IndexMap` and `IndexSet` now have methods `sort_unstable_keys`,\n  `sort_unstable_by`, `sorted_unstable_by`, and `par_*` equivalents,\n  which sort in-place without preserving the order of equal items, by\n  @bhgomes in PR [211].\n\n[195]: https://github.com/indexmap-rs/indexmap/pull/195\n[196]: https://github.com/indexmap-rs/indexmap/pull/196\n[197]: https://github.com/indexmap-rs/indexmap/pull/197\n[203]: https://github.com/indexmap-rs/indexmap/pull/203\n[205]: https://github.com/indexmap-rs/indexmap/pull/205\n[211]: https://github.com/indexmap-rs/indexmap/pull/211\n\n## 1.7.0 (2021-06-29)\n\n- **MSRV**: Rust 1.49 or later is now required.\n\n- The `hashbrown` dependency has been updated to version 0.11.\n\n## 1.6.2 (2021-03-05)\n\n- Fixed to match `std` behavior, `OccupiedEntry::key` now references the\n  existing key in the map instead of the lookup key, by @cuviper in PR [170].\n\n- The new `Entry::or_insert_with_key` matches Rust 1.50's `Entry` method,\n  passing `&K` to the callback to create a value, by @cuviper in PR [175].\n\n[170]: https://github.com/indexmap-rs/indexmap/pull/170\n[175]: https://github.com/indexmap-rs/indexmap/pull/175\n\n## 1.6.1 (2020-12-14)\n\n- The new `serde_seq` module implements `IndexMap` serialization as a\n  sequence to ensure order is preserved, by @cuviper in PR [158].\n\n- New methods on maps and sets work like the `Vec`/slice methods by the same name:\n  `truncate`, `split_off`, `first`, `first_mut`, `last`, `last_mut`, and\n  `swap_indices`, by @cuviper in PR [160].\n\n[158]: https://github.com/indexmap-rs/indexmap/pull/158\n[160]: https://github.com/indexmap-rs/indexmap/pull/160\n\n## 1.6.0 (2020-09-05)\n\n- **MSRV**: Rust 1.36 or later is now required.\n\n- The `hashbrown` dependency has been updated to version 0.9.\n\n## 1.5.2 (2020-09-01)\n\n- The new \"std\" feature will force the use of `std` for users that explicitly\n  want the default `S = RandomState`, bypassing the autodetection added in 1.3.0,\n  by @cuviper in PR [145].\n\n[145]: https://github.com/indexmap-rs/indexmap/pull/145\n\n## 1.5.1 (2020-08-07)\n\n- Values can now be indexed by their `usize` position by @cuviper in PR [132].\n\n- Some of the generic bounds have been relaxed to match `std` by @cuviper in PR [141].\n\n- `drain` now accepts any `R: RangeBounds<usize>` by @cuviper in PR [142].\n\n[132]: https://github.com/indexmap-rs/indexmap/pull/132\n[141]: https://github.com/indexmap-rs/indexmap/pull/141\n[142]: https://github.com/indexmap-rs/indexmap/pull/142\n\n## 1.5.0 (2020-07-17)\n\n- **MSRV**: Rust 1.32 or later is now required.\n\n- The inner hash table is now based on `hashbrown` by @cuviper in PR [131].\n  This also completes the method `reserve` and adds `shrink_to_fit`.\n\n- Add new methods `get_key_value`, `remove_entry`, `swap_remove_entry`,\n  and `shift_remove_entry`, by @cuviper in PR [136]\n\n- `Clone::clone_from` reuses allocations by @cuviper in PR [125]\n\n- Add new method `reverse` by @linclelinkpart5 in PR [128]\n\n[125]: https://github.com/indexmap-rs/indexmap/pull/125\n[128]: https://github.com/indexmap-rs/indexmap/pull/128\n[131]: https://github.com/indexmap-rs/indexmap/pull/131\n[136]: https://github.com/indexmap-rs/indexmap/pull/136\n\n## 1.4.0 (2020-06-01)\n\n- Add new method `get_index_of` by @Thermatrix in PR [115] and [120]\n\n- Fix build script rebuild-if-changed configuration to use \"build.rs\";\n  fixes issue [123]. Fix by @cuviper.\n\n- Dev-dependencies (rand and quickcheck) have been updated. The crate's tests\n  now run using Rust 1.32 or later (MSRV for building the crate has not changed).\n  by @kjeremy and @bluss\n\n[123]: https://github.com/indexmap-rs/indexmap/issues/123\n[115]: https://github.com/indexmap-rs/indexmap/pull/115\n[120]: https://github.com/indexmap-rs/indexmap/pull/120\n\n## 1.3.2 (2020-02-05)\n\n- Maintenance update to regenerate the published `Cargo.toml`.\n\n## 1.3.1 (2020-01-15)\n\n- Maintenance update for formatting and `autocfg` 1.0.\n\n## 1.3.0 (2019-10-18)\n\n- The deprecation messages in the previous version have been removed.\n  (The methods have not otherwise changed.) Docs for removal methods have been\n  improved.\n- From Rust 1.36, this crate supports being built **without std**, requiring\n  `alloc` instead. This is enabled automatically when it is detected that\n  `std` is not available. There is no crate feature to enable/disable to\n  trigger this. The new build-dep `autocfg` enables this.\n\n## 1.2.0 (2019-09-08)\n\n- Plain `.remove()` now has a deprecation message, it informs the user\n  about picking one of the removal functions `swap_remove` and `shift_remove`\n  which have different performance and order semantics.\n  Plain `.remove()` will not be removed, the warning message and method\n  will remain until further.\n\n- Add new method `shift_remove` for order preserving removal on the map,\n  and `shift_take` for the corresponding operation on the set.\n\n- Add methods `swap_remove`, `swap_remove_entry` to `Entry`.\n\n- Fix indexset/indexmap to support full paths, like `indexmap::indexmap!()`\n\n- Internal improvements: fix warnings, deprecations and style lints\n\n## 1.1.0 (2019-08-20)\n\n- Added optional feature `\"rayon\"` that adds parallel iterator support\n  to `IndexMap` and `IndexSet` using Rayon. This includes all the regular\n  iterators in parallel versions, and parallel sort.\n\n- Implemented `Clone` for `map::{Iter, Keys, Values}` and\n  `set::{Difference, Intersection, Iter, SymmetricDifference, Union}`\n\n- Implemented `Debug` for `map::{Entry, IntoIter, Iter, Keys, Values}` and\n  `set::{Difference, Intersection, IntoIter, Iter, SymmetricDifference, Union}`\n\n- Serde trait `IntoDeserializer` are implemented for `IndexMap` and `IndexSet`.\n\n- Minimum Rust version requirement increased to Rust 1.30 for development builds.\n\n## 1.0.2 (2018-10-22)\n\n- The new methods `IndexMap::insert_full` and `IndexSet::insert_full` are\n  both like `insert` with the index included in the return value.\n\n- The new method `Entry::and_modify` can be used to modify occupied\n  entries, matching the new methods of `std` maps in Rust 1.26.\n\n- The new method `Entry::or_default` inserts a default value in unoccupied\n  entries, matching the new methods of `std` maps in Rust 1.28.\n\n## 1.0.1 (2018-03-24)\n\n- Document Rust version policy for the crate (see rustdoc)\n\n## 1.0.0 (2018-03-11)\n\n- This is the 1.0 release for `indexmap`! (the crate and datastructure\n  formerly known as “ordermap”)\n- `OccupiedEntry::insert` changed its signature, to use `&mut self` for\n  the method receiver, matching the equivalent method for a standard\n  `HashMap`.  Thanks to @dtolnay for finding this bug.\n- The deprecated old names from ordermap were removed: `OrderMap`,\n  `OrderSet`, `ordermap!{}`, `orderset!{}`. Use the new `IndexMap`\n  etc names instead.\n\n## 0.4.1 (2018-02-14)\n\n- Renamed crate to `indexmap`; the `ordermap` crate is now deprecated\n  and the types `OrderMap/Set` now have a deprecation notice.\n\n## 0.4.0 (2018-02-02)\n\n- This is the last release series for this `ordermap` under that name,\n  because the crate is **going to be renamed** to `indexmap` (with types\n  `IndexMap`, `IndexSet`) and no change in functionality!\n- The map and its associated structs moved into the `map` submodule of the\n  crate, so that the map and set are symmetric\n\n    + The iterators, `Entry` and other structs are now under `ordermap::map::`\n\n- Internally refactored `OrderMap<K, V, S>` so that all the main algorithms\n  (insertion, lookup, removal etc) that don't use the `S` parameter (the\n  hasher) are compiled without depending on `S`, which reduces generics bloat.\n\n- `Entry<K, V>` no longer has a type parameter `S`, which is just like\n  the standard `HashMap`'s entry.\n\n- Minimum Rust version requirement increased to Rust 1.18\n\n## 0.3.5 (2018-01-14)\n\n- Documentation improvements\n\n## 0.3.4 (2018-01-04)\n\n- The `.retain()` methods for `OrderMap` and `OrderSet` now\n  traverse the elements in order, and the retained elements **keep their order**\n- Added new methods `.sort_by()`, `.sort_keys()` to `OrderMap` and\n  `.sort_by()`, `.sort()` to `OrderSet`. These methods allow you to\n  sort the maps in place efficiently.\n\n## 0.3.3 (2017-12-28)\n\n- Document insertion behaviour better by @lucab\n- Updated dependences (no feature changes) by @ignatenkobrain\n\n## 0.3.2 (2017-11-25)\n\n- Add `OrderSet` by @cuviper!\n- `OrderMap::drain` is now (too) a double ended iterator.\n\n## 0.3.1 (2017-11-19)\n\n- In all ordermap iterators, forward the `collect` method to the underlying\n  iterator as well.\n- Add crates.io categories.\n\n## 0.3.0 (2017-10-07)\n\n- The methods `get_pair`, `get_pair_index` were both replaced by\n  `get_full` (and the same for the mutable case).\n- Method `swap_remove_pair` replaced by `swap_remove_full`.\n- Add trait `MutableKeys` for opt-in mutable key access. Mutable key access\n  is only possible through the methods of this extension trait.\n- Add new trait `Equivalent` for key equivalence. This extends the\n  `Borrow` trait mechanism for `OrderMap::get` in a backwards compatible\n  way, just some minor type inference related issues may become apparent.\n  See [#10] for more information.\n- Implement `Extend<(&K, &V)>` by @xfix.\n\n[#10]: https://github.com/indexmap-rs/indexmap/pull/10\n\n## 0.2.13 (2017-09-30)\n\n- Fix deserialization to support custom hashers by @Techcable.\n- Add methods `.index()` on the entry types by @garro95.\n\n## 0.2.12 (2017-09-11)\n\n- Add methods `.with_hasher()`, `.hasher()`.\n\n## 0.2.11 (2017-08-29)\n\n- Support `ExactSizeIterator` for the iterators. By @Binero.\n- Use `Box<[Pos]>` internally, saving a word in the `OrderMap` struct.\n- Serde support, with crate feature `\"serde-1\"`. By @xfix.\n\n## 0.2.10 (2017-04-29)\n\n- Add iterator `.drain(..)` by @stevej.\n\n## 0.2.9 (2017-03-26)\n\n- Add method `.is_empty()` by @overvenus.\n- Implement `PartialEq, Eq` by @overvenus.\n- Add method `.sorted_by()`.\n\n## 0.2.8 (2017-03-01)\n\n- Add iterators `.values()` and `.values_mut()`.\n- Fix compatibility with 32-bit platforms.\n\n## 0.2.7 (2016-11-02)\n\n- Add `.retain()`.\n\n## 0.2.6 (2016-11-02)\n\n- Add `OccupiedEntry::remove_entry` and other minor entry methods,\n  so that it now has all the features of `HashMap`'s entries.\n\n## 0.2.5 (2016-10-31)\n\n- Improved `.pop()` slightly.\n\n## 0.2.4 (2016-10-22)\n\n- Improved performance of `.insert()` ([#3]) by @pczarn.\n\n[#3]: https://github.com/indexmap-rs/indexmap/pull/3\n\n## 0.2.3 (2016-10-11)\n\n- Generalize `Entry` for now, so that it works on hashmaps with non-default\n  hasher. However, there's a lingering compat issue since libstd `HashMap`\n  does not parameterize its entries by the hasher (`S` typarm).\n- Special case some iterator methods like `.nth()`.\n\n## 0.2.2 (2016-10-02)\n\n- Disable the verbose `Debug` impl by default.\n\n## 0.2.1 (2016-10-02)\n\n- Fix doc links and clarify docs.\n\n## 0.2.0 (2016-10-01)\n\n- Add more `HashMap` methods & compat with its API.\n- Experimental support for `.entry()` (the simplest parts of the API).\n- Add `.reserve()` (placeholder impl).\n- Add `.remove()` as synonym for `.swap_remove()`.\n- Changed `.insert()` to swap value if the entry already exists, and\n  return `Option`.\n- Experimental support as an *indexed* hash map! Added methods\n  `.get_index()`, `.get_index_mut()`, `.swap_remove_index()`,\n  `.get_pair_index()`, `.get_pair_index_mut()`.\n\n## 0.1.2 (2016-09-19)\n\n- Implement the 32/32 split idea for `Pos` which improves cache utilization\n  and lookup performance.\n\n## 0.1.1 (2016-09-16)\n\n- Initial release.\n"
        },
        {
          "name": "benches",
          "type": "tree",
          "content": null
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "test-nostd",
          "type": "tree",
          "content": null
        },
        {
          "name": "test-serde",
          "type": "tree",
          "content": null
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}