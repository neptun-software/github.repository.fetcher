{
  "metadata": {
    "timestamp": 1736709406889,
    "page": 1,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjEw",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "rwf2/Rocket",
      "stars": 24790,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.1328125,
          "content": "* text eol=lf\n\n# Denote all files that are truly binary and should not be modified.\n*.png binary\n*.jpg binary\n*.gif binary\n*.svg binary\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.5185546875,
          "content": "# Compiled files\n*.o\n*.so\n*.rlib\n*.dll\n\n# Executables\n*.exe\n\n# Generated by Cargo\ntarget\n\n# Generated databases\ndb.sqlite\ndb.sqlite-shm\ndb.sqlite-wal\n\n# Remove Cargo.lock from gitignore if creating an executable, leave it for libraries\n# More information here https://doc.rust-lang.org/cargo/guide/cargo-toml-vs-cargo-lock.html\nCargo.lock\n\n# Cargo config directory\n.cargo/\n\n# The upload script, for now.\nscripts/upload-docs.sh\nscripts/redirect.html\n\n# Backup files.\n*.bak\n\n# Uploads in pastebin example.\nexamples/pastebin/upload/*\n"
        },
        {
          "name": ".rustfmt.toml",
          "type": "blob",
          "size": 0.029296875,
          "content": "disable_all_formatting = true\n"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 107.0439453125,
          "content": "# Version 0.5.1 (May 22, 2024)\n\nThis release contains the following crate updates:\n\n  - `rocket` `0.5.1`\n  - `rocket_db_pools` `0.2.0`\n  - `rocket_dyn_templates` `0.2.0`\n  - `rocket_ws` `0.1.1`\n\n## [`rocket`](https://api.rocket.rs/v0.5/rocket/) `0.5.1`\n\n  * The following `char` and `std::ops::Range` types now implement `FromForm`:\n\n    - `char`\n    - `Range<T: FromForm>` with `start` and `end` fields\n    - `RangeFrom<T: FromForm>` with `start` field\n    - `RangeTo<T: FromForm>` with `end` field\n    - `RangeToInclusive<T: FromForm>` with `end` field\n\n  * `[T; N]`, `Vec<T>`, and `[u8]` can now be passed to `uri!`.\n\n  * The guide now includes a [deploying section].\n\n  * The `FromForm` derive now properly records errors involving entire forms.\n\n  * `FromForm` derive can now be used in code emitted by `macro_rules!` macros.\n\n  * **(fix [#2668] via [52de9a])** [`TempFile`] now ensures it flushes before\n    being persisted.\n\n## [`rocket_db_pools`](https://api.rocket.rs/v0.5/rocket_db_pools/) `0.2.0`\n\n  * SQLite extensions are now supported in `sqlx_sqlite`.\n\n    Use a database configuration option of `extensions` to specify extensions:\n\n    ```toml\n    [default.databases.db_name]\n    url = \"db.sqlite\"\n    # This option is only supported by the `sqlx_sqlite` driver.\n    extensions = [\"memvfs\", \"rot13\"]\n    ```\n\n  * (**breaking**) `deadpool` was updated to `0.13`.\n\n  * (**breaking**) The [`Config`](https://api.rocket.rs/v0.5/rocket_db_pools/struct.Config)\n    structure has a new `extensions` field.\n\n## [`rocket_dyn_templates`](https://api.rocket.rs/v0.5/rocket_dyn_templates/) `0.2.0`\n\n  * Support for `minijinja` `2.0` templates was introduced.\n\n    Templates with an extension of `.j2` are recognized and rendered with\n    Minijinja.\n\n  * **(breaking)** `handlebars` was updated to `5.1`.\n\n## [`rocket_ws`](https://api.rocket.rs/v0.5/rocket_ws/) `0.1.1`\n\n  * Introduced [`WebSocket::accept_key()`] method.\n\n  * `tungstenite` was updated to `0.21`.\n\n## General Changes\n\n  * The `rust-version` for all crates was updated to `1.64`.\n\n    This reflects the correct MSRV required to build `rocket` `0.5.0`.\n\n  * License files are now present in all published crates.\n\n[52de9a]: https://github.com/rwf2/Rocket/commit/52de9a\n[#2668]: https://github.com/rwf2/Rocket/pull/2668\n[deploying section]: https://rocket.rs/guide/v0.5/deploying/\n[`WebSocket::accept_key()`]: https://api.rocket.rs/v0.5/rocket_ws/struct.WebSocket#method.accept_key\n\n# Version 0.5.0 (Nov 17, 2023)\n\n## Major Features and Improvements\n\nThis release introduces the following major features and improvements:\n\n  * Support for [compilation on Rust's stable] release channel.\n  * A rewritten, fully asynchronous core with support for [`async`/`await`].\n  * WebSocket support via [`rocket_ws`].\n  * [Feature-complete forms support] including multipart, collections, [ad-hoc validation], and\n    [context](https://rocket.rs/v0.5/guide/requests/#context).\n  * [Sentinels]: automatic verification of application state at start-up to prevent runtime errors.\n  * [Graceful shutdown] with configurable signaling, grace periods, [notification], and\n    [shutdown fairings].\n  * An entirely new, flexible and robust [configuration system] based on [Figment].\n  * Typed [asynchronous streams] and [Server-Sent Events] with generator syntax.\n  * Asynchronous database pooling support via [`rocket_db_pools`].\n  * Support for [mutual TLS] and client [`Certificate`]s.\n  * Automatic support for HTTP/2 including `h2` ALPN.\n  * Graduation of `json`, `msgpack`, and `uuid` `rocket_contrib` [features into core].\n  * An automatically enabled [`Shield`]: security and privacy headers for all responses.\n  * Type-system enforced [incoming data limits] to mitigate memory-based DoS attacks.\n  * Compile-time URI literals via a fully revamped [`uri!`] macro.\n  * [Request connection upgrade APIs] with support for raw I/O with the client.\n  * Full support for [UTF-8 characters] in routes and catchers.\n  * Precise detection of missing managed state, databases, and templating with [sentinels].\n  * Typed [build phases] with strict application-level guarantees.\n  * [Ignorable segments]: wildcard route matching with no typing restrictions.\n  * First-class [support for `serde`] for built-in guards and types.\n  * New application launch attributes:\n    [`#[launch]`](https://api.rocket.rs/v0.5/rocket/attr.launch.html) and\n    [`#[rocket::main]`](https://api.rocket.rs/v0.5/rocket/attr.main.html).\n  * [Default catchers] via `#[catch(default)]`, which handle _any_ status code.\n  * [Catcher scoping] to narrow the scope of a catcher to a URI prefix.\n  * Built-in libraries and support for [asynchronous testing].\n  * A [`TempFile`] data and form guard for automatic uploading to a temporary file.\n  * A [`Capped<T>`] data and form guard which enables detecting truncation due to data limits.\n  * Support for dynamic and static prefixing and suffixing of route URIs in [`uri!`].\n  * Support for custom config profiles and [automatic typed config extraction].\n  * Rewritten, zero-copy, RFC compliant URI parsers with support for URI-[`Reference`]s.\n  * Multi-segment parameters (`<param..>`) which match _zero_ segments.\n  * A [`local_cache!`] macro for request-local storage of non-uniquely typed values.\n  * A [`CookieJar`] without \"one-at-a-time\" limitations.\n  * [Singleton fairings] with replacement and guaranteed uniqueness.\n  * [Data limit declaration in SI units]: \"2 MiB\", `2.mebibytes()`.\n  * Optimistic responding even when data is left unread or limits are exceeded.\n  * Fully decoded borrowed strings as dynamic parameters, form and data guards.\n  * Borrowed byte slices as data and form guards.\n  * Fail-fast behavior for [misconfigured secrets], file serving paths.\n  * Support for generics and custom generic bounds in\n    [`#[derive(Responder)]`](https://api.rocket.rs/v0.5/rocket/derive.Responder.html).\n  * [Default ranking colors], which prevent more routing collisions automatically.\n  * Improved error logging with suggestions when common errors are detected.\n  * Completely rewritten examples including a new real-time [`chat`] application.\n\n## Support for Rust Stable\n\nAs a result of support for Rust stable (Rust 2021 Edition and beyond),\n`#![feature(..)]` crate attributes are no longer required to use Rocket. The\ncomplete canonical example with a single `hello` route becomes:\n\n```rust\n#[macro_use] extern crate rocket;\n\n#[get(\"/<name>/<age>\")]\nfn hello(name: &str, age: u8) -> String {\n    format!(\"Hello, {} year old named {}!\", age, name)\n}\n\n#[launch]\nfn rocket() -> _ {\n    rocket::build().mount(\"/hello\", routes![hello])\n}\n```\n\n<details>\n  <summary>See a <code>diff</code> of the changes from v0.4.</summary>\n\n```diff\n- #![feature(proc_macro_hygiene, decl_macro)]\n-\n #[macro_use] extern crate rocket;\n\n #[get(\"/<name>/<age>\")]\n- fn hello(name: String, age: u8) -> String {\n+ fn hello(name: &str, age: u8) -> String {\n     format!(\"Hello, {} year old named {}!\", age, name)\n}\n\n- fn main() {\n-     rocket::ignite().mount(\"/hello\", routes![hello]).launch();\n- }\n+ #[launch]\n+ fn rocket() -> _ {\n+     rocket::build().mount(\"/hello\", routes![hello])\n+ }\n```\n\n</details>\n\n## Breaking Changes\n\nThis release includes many breaking changes. For a walkthrough guide on handling these changes, see\nthe [v0.4 to v0.5 migration guide]. The most significant changes are listed below.\n\n### Silent Changes\n\nThese changes are invisible to the compiler and will _not_ yield errors or warnings at compile-time.\nWe **strongly** advise all application authors to review this list carefully.\n\n  * Blocking I/O (long running compute, synchronous `sleep()`, `Mutex`, `RwLock`, etc.) may prevent\n    the server from making progress and should be avoided, replaced with an `async` variant, or\n    performed in a worker thread. This is a consequence of Rust's cooperative `async` multitasking.\n    For details, see the new [multitasking] section of the guide.\n  * `ROCKET_ENV` is now `ROCKET_PROFILE`. A warning is emitted a launch time if the former is set.\n  * The default profile for debug builds is now `debug`, not `dev`.\n  * The default profile for release builds is now `release`, not `prod`.\n  * `ROCKET_LOG` is now `ROCKET_LOG_LEVEL`. A warning is emitted a launch time if the former is set.\n  * `ROCKET_ADDRESS` accepts only IP addresses, no longer resolves hostnames like `localhost`.\n  * `ROCKET_CLI_COLORS` accepts booleans `true`, `false` in place of strings `\"on\"`, `\"off\"`.\n  * It is a launch-time error if `secrets` is enabled in non-`debug` profiles without a configured\n    `secret_key`.\n  * A misconfigured `template_dir` is reported as an error at launch time.\n  * [`FileServer::new()`] fails immediately if the provided directory does not exist.\n  * Catcher collisions result in a launch failure as opposed to a warning.\n  * Default ranks now range from `-12` to `-1`. There is no breaking change if only code generated\n    routes are used. Manually configured routes with negative ranks may collide or be considered in\n    a different order than before.\n  * The order of execution of path and query guards relative to each other is now unspecified.\n  * URIs beginning with `:` are properly recognized as invalid and rejected.\n  * URI normalization now normalizes the query part as well.\n  * The `Segments` iterator now returns percent-decoded `&str`s.\n  * Forms are now parsed leniently by the [`Form` guard]. Use [`Strict`] for the previous behavior.\n  * The `Option<T>` form guard defaults to `None` instead of the default value for `T`.\n  * When data limits are exceeded, a `413 Payload Too Large` status is returned to the client.\n  * The default catcher now returns JSON when the client indicates preference via the `Accept`\n    header.\n  * Empty boolean form values parse as `true`: the query string `?f` is the same as `?f=true`.\n  * [`Created<R>`] does not automatically send an `ETag` header if `R: Hash`. Use\n    [`Created::tagged_body`] instead.\n  * `FileServer` now forwards when a file is not found instead of failing with `404 Not Found`.\n  * [`Shield`] is enabled by default. You may need to disable or change policies if your application\n    depends on typically insecure browser features or if you wish to opt-in to different policies\n    than the defaults.\n  * [`CookieJar`] `get()`s do not return cookies added during request handling. See\n    [`CookieJar`#pending].\n  * `Hash` `impl`s for `MediaType` and `ContentType` no longer consider media type parameters.\n  * When requested, the `FromForm` implementations of `Vec` and `Map`s are now properly lenient.\n  * To agree with browsers, the `[` and `]` characters are now accepted in URI paths.\n  * The `[` and `]` characters are no longer encoded by [`uri!`].\n  * The `Secure` cookie flag is set by default for all cookies when serving over TLS.\n  * Removal cookies have `SameSite` set to `Lax` by default.\n  * [`MediaType::JavaScript`] is now `text/javascript`.\n\n### Contrib Graduation\n\nThe `rocket_contrib` crate is deprecated and the functionality moved to other `rocket` crates. The\n[contrib deprecation upgrade guide] provides a walkthrough on migrating. The relevant changes are:\n\n  * Several features previously in `rocket_contrib` were merged into `rocket` itself:\n    - `json`, `msgpack`, and `uuid` are now [features of `rocket`].\n    - Moved `rocket_contrib::json` to [`rocket::serde::json`].\n    - Moved `rocket_contrib::msgpack` to [`rocket::serde::msgpack`].\n    - Moved `rocket_contrib::uuid` to [`rocket::serde::uuid`].\n    - Moved `rocket_contrib::helmet` to [`rocket::shield`]. [`Shield`] is enabled by default.\n    - Moved `rocket_contrib::serve` to [`rocket::fs`], `StaticFiles` to [`rocket::fs::FileServer`].\n    - Removed the now unnecessary `Uuid` and `JsonValue` wrapper types.\n    - Removed headers in `Shield` that are no longer respected by browsers.\n  * The remaining features from `rocket_contrib` are now provided by separate crates:\n    - Replaced `rocket_contrib::templates` with [`rocket_dyn_templates`].\n    - Replaced `rocket_contrib::databases` with [`rocket_sync_db_pools`] and [`rocket_db_pools`].\n    - These crates are versioned and released independently of `rocket`.\n    - `rocket_contrib::databases::DbError` is now `rocket_sync_db_pools::Error`.\n    - Removed `redis`, `mongodb`, and `mysql` integrations which have upstream `async` drivers.\n    - The [`#[database]`](https://api.rocket.rs/v0.5/rocket_sync_db_pools/attr.database.html)\n      attribute generates an [`async run()`] method instead of `Deref` implementations.\n\n### General\n\nThe following breaking changes apply broadly and are likely to cause compile-time errors.\n\n  * [`Rocket`] is now generic over a [phase] marker:\n    - APIs operate on `Rocket<Build>`, `Rocket<Ignite>`, `Rocket<Orbit>`, or `Rocket<P: Phase>` as\n      needed.\n    - The phase marker statically enforces state transitions in `Build`, `Ignite`, `Orbit` order.\n    - `rocket::ignite()` is now [`rocket::build()`] and returns a `Rocket<Build>`.\n    - [`Rocket::ignite()`] transitions to the `Ignite` phase. This is run automatically on launch as\n      needed.\n    - Ignition finalizes configuration, runs `ignite` fairings, and verifies [sentinels].\n    - [`Rocket::launch()`] transitions into the `Orbit` phase and starts the server.\n    - Methods like [`Request::rocket()`] that refer to a live Rocket instance return an\n      `&Rocket<Orbit>`.\n  * [Fairings] have been reorganized and restructured for `async`:\n    - Replaced `attach` fairings with `ignite` fairings. Unlike `attach` fairings, which ran\n      immediately at the time of attachment, `ignite` fairings are run when transitioning into the\n      `Ignite` phase.\n    - Replaced `launch` fairings with `liftoff` fairings. `liftoff` fairings are always run, even in\n      local clients, after the server begins listening and the concrete port is known.\n  * Introduced a new [configuration system] based on [Figment]:\n    - The concept of \"environments\" is replaced with \"profiles\".\n    - `ROCKET_ENV` is superseded by `ROCKET_PROFILE`.\n    - `ROCKET_LOG` is superseded by `ROCKET_LOG_LEVEL`.\n    - Profile names can now be arbitrarily chosen. The `dev`, `stage`, and `prod` profiles carry no\n      special meaning.\n    - The `debug` and `release` profiles are the default profiles for the debug and release\n      compilation profiles.\n    - A new specially recognized `default` profile specifies defaults for all profiles.\n    - The `global` profile has highest precedence, followed by the selected profile, followed by\n      `default`.\n    - Added support for limits specified in SI units: \"1 MiB\".\n    - Renamed `LoggingLevel` to [`LogLevel`].\n    - Inlined error variants into the [`Error`] structure.\n    - Changed the type of `workers` to `usize` from `u16`.\n    - Changed accepted values for `keep_alive`: it is disabled with `0`, not `false` or `off`.\n    - Disabled the `secrets` feature (for private cookies) by default.\n    - Removed APIs related to \"extras\". Typed values can be extracted from the configured `Figment`.\n    - Removed `ConfigBuilder`: all fields of [`Config`] are public with constructors for each field\n      type.\n  * Many functions, traits, and trait bounds have been modified for `async`:\n    - [`FromRequest`], [`Fairing`], [`catcher::Handler`], [`route::Handler`], and [`FromData`] use\n      `#[async_trait]`.\n    - [`NamedFile::open`] is now an `async` function.\n    - Added [`Request::local_cache_async()`] for use in async request guards.\n    - Unsized `Response` bodies must be [`AsyncRead`] instead of `Read`.\n    - Automatically sized `Response` bodies must be [`AsyncSeek`] instead of `Seek`.\n    - The `local` module is split into two: [`rocket::local::asynchronous`] and\n      [`rocket::local::blocking`].\n  * Functionality and features requiring Rust nightly were removed:\n    - Removed the `Try` implementation on [`Outcome`] which allowed using `?` with `Outcome`s. The\n      recommended replacement is the [`rocket::outcome::try_outcome!`] macro or the various\n      combinator functions on `Outcome`.\n    - [`Result<T, E>` implements `Responder`] only when both `T` and `E` implement `Responder`. The\n      new [`Debug`] wrapping responder replaces `Result<T: Responder, E: Debug>`.\n    - APIs which used the `!` type to now use [`std::convert::Infallible`].\n  * [`IntoOutcome`] was overhauled to supplant methods now removed in `Outcome`.\n    - `IntoOutcome::into_outcome()` is now `or_error()`.\n    - `IntoOutcome` is implemented for all `Outcome` type aliases.\n    - `Outcome::forward()` requires specifying a status code.\n    - `Outcome::from()` and `Outcome::from_or_forward()` were removed.\n  * [`Rocket::register()`] now takes a base path to scope catchers under as its first argument.\n  * `ErrorKind::Collision` has been renamed to [`ErrorKind::Collisions`].\n  * TLS config values are only available when the `tls` feature is enabled.\n  * [`MediaType::with_params()`] and [`ContentType::with_params()`] are now builder methods.\n  * Content-Type [`content`] responder type names are now prefixed with `Raw`.\n  * The `content::Plain` responder is now called `content::RawText`.\n  * The `content::Custom<T>` responder was removed in favor of [`(ContentType, T)`].\n  * Removed `CookieJar::get_private_pending()` in favor of [`CookieJar::get_pending()`].\n  * The [`local_cache!`] macro accepts fewer types. Use [`local_cache_once!`] as appropriate.\n  * [`Rocket::launch()`] allows `Rocket` recovery by returning the instance after shutdown.\n  * `ErrorKind::Runtime` was removed; [`ErrorKind::Shutdown`] was added.\n  * `Outcome::Failure` was renamed to [`Outcome::Error`].\n\n### Routing and URIs\n\n  * In `#[route(GET, path = \"...\")]`, `path` is now `uri`: `#[route(GET, uri = \"...\")]`.\n  * Multi-segment paths (`/<p..>`) now match _zero_ or more segments.\n  * Codegen improvements preclude identically named routes and modules in the same namespace.\n  * A route URI like (`/<a>/<p..>`) now collides with (`/<a>`), requires a `rank` to resolve.\n  * All catcher related types and traits moved to [`rocket::catcher`].\n  * All route related types and traits moved to [`rocket::route`].\n  * URI formatting types and traits moved to [`rocket::http::uri::fmt`].\n  * `T` no longer converts to `Option<T>` or `Result<T, _>` for [`uri!`] query parameters.\n  * For optional query parameters, [`uri!`] requires using a wrapped value or `_`.\n  * `&RawStr` no longer implements `FromParam`: use `&str` instead.\n  * Percent-decoding is performed before calling `FromParam` implementations.\n  * `RawStr::url_decode()` and `RawStr::url_decode_lossy()` allocate as necessary, return `Cow`.\n  * `RawStr::from_str()` was replaced with `RawStr::new()`.\n  * `Origin::segments()` was replaced with `Origin.path().segments()`.\n  * `Origin::path()` and `Origin::query()` return `&RawStr` instead of `&str`.\n  * The type of `Route::name` is now `Option<Cow<'static, str>>`.\n  * `Route::set_uri` was replaced with [`Route::map_base()`].\n  * The `Route::uri` field is now of type [`RouteUri`].\n  * `Route::base` was removed in favor of `Route.uri().base()`.\n  * [Route `Forward` outcomes] are now associated with a `Status`.\n  * The status codes used when built-in guards forward were changed:\n    - Route parameter `FromParam` errors now forward as 422.\n    - Query parameter errors now forward as 422.\n    - Incorrect form content-type errors forwards as 413.\n    - `&Host`, `&Accept`, `&ContentType`, `IpAddr`, and `SocketAddr` all forward\n      with a 500.\n\n### Data and Forms\n\n  * `Data` now has a lifetime generic: `Data<'r>`.\n  * [`Data::open()`] indelibly requires a data limit.\n  * Removed `FromDataSimple`. Use [`FromData`] and [`local_cache!`] or [`local_cache_once!`].\n  * All [`DataStream`] APIs require limits and return [`Capped<T>`] types.\n  * Form types and traits were moved from `rocket::request` to [`rocket::form`].\n  * Removed `FromQuery`. Dynamic query parameters (`#[get(\"/?<param>\")]`) use [`FromForm`] instead.\n  * Replaced `FromFormValue` with [`FromFormField`]. All `T: FromFormField` implement `FromForm`.\n  * Form field values are percent-decoded before calling [`FromFormField`] implementations.\n  * Renamed the `#[form(field = ...)]` attribute to `#[field(name = ...)]`.\n  * [Custom form errors] must now specify an associated `Status`.\n\n### Request Guards\n\n  * Renamed `Cookies` to [`CookieJar`]. Its methods take `&self`.\n  * Renamed `Flash.name` to `Flash.kind`, `Flash.msg` to `Flash.message`.\n  * Replaced `Request::get_param()` with `Request::param()`.\n  * Replaced `Request::get_segments()` to `Request::segments()`.\n  * Replaced `Request::get_query_value()` with `Request::query_value()`.\n  * Replaced `Segments::into_path_buf()` with `Segments::to_path_buf()`.\n  * Replaced `Segments` and `QuerySegments` with [`Segments<Path>` and `Segments<Query>`].\n  * [`Flash`] constructors now take `Into<String>` instead of `AsRef<str>`.\n  * The `State<'_, T>` request guard is now `&State<T>`.\n  * Removed a lifetime from [`FromRequest`]: `FromRequest<'r>`.\n  * Removed a lifetime from [`FlashMessage`]: `FlashMessage<'_>`.\n  * Removed all `State` reexports except [`rocket::State`].\n\n### Responders\n\n  * Moved `NamedFile` to `rocket::fs::NamedFile`\n  * Replaced `Content` with `content::Custom`.\n  * `Response::body` and `Response::body_mut` are now infallible methods.\n  * Renamed `ResponseBuilder` to `Builder`.\n  * Removed direct `Response` body reading methods. Use methods on `r.body_mut()` instead.\n  * Removed inaccurate \"chunked body\" types and variants.\n  * Removed `Responder` `impl` for `Response`. Prefer custom responders with `#[derive(Responder)]`.\n  * Removed the unused reason phrase from `Status`.\n  * The types of responders in [`response::status`] were unified to all be of\n    the form `Status<R>(R)`.\n\n## General Improvements\n\nIn addition to new features and changes, Rocket saw the following improvements:\n\n### General\n\n  * Added support for [raw identifiers] in the `FromForm` derive, `#[route]` macros, and `uri!`.\n  * Added support for uncased derived form fields: `#[field(name = uncased(...))]`.\n  * Added support for [default form field values]: `#[field(default = expr())]`.\n  * Added support for multiple `#[field]` attributes on struct fields.\n  * Added support for base16-encoded (a.k.a. hex-encoded) secret keys.\n  * Added [`Config::ident`] for configuring or removing the global `Server` header.\n  * Added [`Rocket::figment()`] and [`Rocket::catchers()`].\n  * Added [`LocalRequest::json()`] and [`LocalResponse::json()`].\n  * Added [`LocalRequest::msgpack()`] and [`LocalResponse::msgpack()`].\n  * Added support for `use m::route; routes![route]` instead of needing `routes![m::route]`.\n  * Added support for [hierarchical data limits]: a limit of `a/b/c` falls back to `a/b` then `a`.\n  * Added [`LocalRequest::inner_mut()`]. `LocalRequest` implements `DerefMut` to `Request`.\n  * Added support for ECDSA and EdDSA TLS keys.\n  * Added associated constants in `Config` for all config parameter names.\n  * Added `ErrorKind::Config` to represent errors in configuration at runtime.\n  * Added `rocket::fairing::Result` type alias, returned by `Fairing::on_ignite()`.\n  * All guard failures are logged at runtime.\n  * `Rocket::mount()` now accepts a base value of any type that implements `TryInto<Origin<'_>>`.\n  * The default error catcher's HTML has been compacted.\n  * The default error catcher returns JSON if requested by the client.\n  * Panics in routes or catchers are caught and forwarded to `500` error catcher.\n  * A detailed warning is emitted if a route or catcher panics.\n  * Emoji characters are no longer output on Windows.\n  * Fixed [`Error`] to not panic if a panic is already in progress.\n  * Introduced [`Reference`] and [`Asterisk`] URI types.\n  * Added support to [`UriDisplayQuery`] for C-like enums.\n  * The [`UriDisplayQuery`] derive now recognizes the `#[field]` attribute for field renaming.\n  * `Client` method builders accept `TryInto<Origin>` allowing a `uri!()` to be used directly.\n  * [`Rocket`] is now `#[must_use]`.\n  * Support for HTTP/2 can be disabled by disabling the default `http2` crate feature.\n  * Added [`rocket::execute()`] for executing Rocket's `launch()` future.\n  * Added the [`context!`] macro to [`rocket_dyn_templates`] for ad-hoc template contexts.\n  * The `time` crate is re-exported from the crate root.\n  * The `FromForm`, `Responder`, and `UriDisplay` derives now fully support generics.\n  * Added helper functions to `serde` submodules.\n  * The [`Shield`] HSTS preload header now includes `includeSubdomains`.\n  * Logging ignores `write!` errors if `stdout` disappears, preventing panics.\n  * Added [`Client::terminate()`] to run graceful shutdown in testing.\n  * Shutdown now terminates the `async` runtime, never the process.\n  * Added a [`local_cache_once!`] macro for request-local storage.\n  * Final launch messages are now _always_ logged, irrespective of profile.\n  * Only functions that return `Rocket<Build>` are now `#[must_use]`, not all `Rocket<P>`.\n  * Fixed mismatched form field names in errors under certain conditions in [`FromForm`] derive.\n  * The [`FromForm`] derive now collects _all_ errors that occur.\n  * Data pools are now gracefully shutdown in [`rocket_sync_db_pools`].\n  * Added [`Metadata::render()`] in [`rocket_dyn_templates`] for direct template rendering.\n  * Rocket salvages more information from malformed requests for error catchers.\n  * The `cookie` `secure` feature is now properly conditionally enabled.\n  * Data before encapsulation boundaries in TLS keys is allowed and ignored.\n  * Support for TLS keys in SEC1 format was added.\n  * Rocket now warns when a known secret key is configured.\n  * A panic that could occur on shutdown in `rocket_sync_db_pools` was fixed.\n  * Added a [`max_blocking`] configuration parameter to control number of blocking threads.\n  * Added an [`ip_header`] \"real IP\" header configuration parameter.\n  * A [`pool()`] method is emitted by [`rocket_sync_db_pools`] for code-generated pools.\n  * Data guards are now eligible [sentinels].\n  * Raw binary form field data can be retrieved using the `&[u8]` form guard.\n  * Added [`TempFile::open()`] to stream `TempFile` data.\n  * mTLS certificates can be set on local requests with [`LocalRequest::identity()`].\n  * Added [`Error::pretty_print()`] for pretty-printing errors like Rocket.\n  * Warnings are logged when data limits are reached.\n  * A warning is emitted when `String` is used as a route parameter.\n  * Configuration provenance information is logged under the `debug` log level.\n  * Logging of `Outcome`s now includes the relevant status code.\n  * `Span::mixed_site()` is used in codegen to reduce errant `clippy` warnings.\n\n### HTTP\n\n  * Added support for HTTP/2, enabled by default via the `http2` crate feature.\n  * Added a `const` constructor for `MediaType`.\n  * Introduced [`RawStrBuf`], an owned `RawStr`.\n  * Added many new \"pattern\" methods to [`RawStr`].\n  * Added [`RawStr::percent_encode()`] and [`RawStr::strip()`].\n  * Added support for unencoded query characters in URIs that are frequently sent by browsers.\n  * Introduced [`Host`] and [`&Host`] request guards.\n  * Added [`RawStr::percent_encode_bytes()`].\n  * `NODELAY` is now enabled on all connections by default.\n  * The TLS implementation handles handshakes off the main task, improving DoS resistance.\n\n### Known Media Types\n\n  * Added AVIF: `image/avif`.\n  * Added `EventStream`: `text/event-stream`.\n  * Added `Markdown`: `text/markdown`.\n  * Added `MP3`: `audio/mpeg`.\n  * Added `CBZ`: `application/vnd.comicbook+zip`, extension `.cbz`.\n  * Added `CBR`: `application/vnd.comicbook-rar`, extension `.cbr`.\n  * Added `RAR`: `application/vnd.rar`, extension `.rar`.\n  * Added `EPUB`: `application/epub+zip`, extension `.epub`.\n  * Added `OPF`: `application/oebps-package+xml`, extension `.opf`.\n  * Added `XHTML`: `application/xhtml+xml`, extension `.xhtml`.\n  * Added `Text` as an alias for the `Plain` media type.\n  * Added `Bytes` as an alias for the `Binary` media type.\n  * Added `.mjs` as known JavaScript extension.\n  * Added '.exe', '.iso', '.dmg' as known extensions.\n\n### Request\n\n  * Added support for all UTF-8 characters in route paths.\n  * Added support for percent-encoded `:` in socket or IP address values in [`FromFormValue`].\n  * Added [`Request::rocket()`] to access the active `Rocket` instance.\n  * `Request::uri()` now returns an `&Origin<'r>` instead of `&Origin<'_>`.\n  * `Request::accept()`, `Request::content_type()` reflect changes to `Accept`, `Content-Type`.\n  * `Json<T>`, `MsgPack<T>` accept `T: Deserialize`, not only `T: DeserializeOwned`.\n  * Diesel SQLite connections in `rocket_sync_db_pools` use better defaults.\n  * The default number of workers for synchronous database pools is now `workers * 4`.\n  * Added [`Request::host()`] to retrieve the client-requested host.\n\n### Response\n\n  * Added [`Template::try_custom()`] for fallible template engine customization.\n  * Manually registered templates can now be rendered with `Template::render()`.\n  * Added support for the `X-DNS-Prefetch-Control` header to `Shield`.\n  * Added support for manually-set `expires` values for private cookies.\n  * Added support for type generics and custom generic bounds to\n    [`#[derive(Responder)]`](https://api.rocket.rs/v0.5/rocket/derive.Responder.html).\n  * The `Server` header is only set if one isn't already set.\n  * Accurate `Content-Length` headers are sent even for partially read `Body`s.\n  * [`Redirect`] now accepts a `TryFrom<Reference>`, allowing fragment parts.\n\n### Trait Implementations\n\n  * Implemented `Clone` for `State`.\n  * Implemented `Copy` and `Clone` for `fairing::Info`.\n  * Implemented `Debug` for `Rocket` and `Client`.\n  * Implemented `Default` for `Status` (returns `Status::Ok`).\n  * Implemented `PartialEq`, `Eq`, `Hash`, `PartialOrd`, and `Ord` for `Status`.\n  * Implemented `Eq`, `Hash`, and `PartialEq<&str>` for `Origin`.\n  * Implemented `PartialEq<Cow<'_, RawStr>>>` for `RawStr`.\n  * Implemented `std::error::Error` for `Error`.\n  * Implemented `Deref` and `DerefMut` for `LocalRequest` (to `Request`).\n  * Implemented `DerefMut` for `Form`, `LenientForm`.\n  * Implemented `From<T>` for `Json<T>`, `MsgPack<T>`.\n  * Implemented `TryFrom<String>` and `TryFrom<&str>` for `Origin`.\n  * Implemented `TryFrom<Uri>` for each of the specific URI variants.\n  * Implemented `FromRequest` for `&Config`.\n  * Implemented `FromRequest` for `IpAddr`.\n  * Implemented `FromParam` for `PathBuf`\n  * Implemented `FromParam`, `FromData`, and `FromForm` for `&str`.\n  * Implemented `FromForm` for `Json<T>`, `MsgPack<T>`.\n  * Implemented `FromFormField` for `Cow` and `Capped<Cow>>`\n  * Implemented `Responder` for `tokio::fs::File`.\n  * Implemented `Responder` for `(ContentType, R) where R: Responder`.\n  * Implemented `Responder` for `(Status, R) where R: Responder` which overrides `R`'s status.\n  * Implemented `Responder` for `std::io::Error` (behaves as `Debug<std::io::Error>`).\n  * Implemented `Responder` for `Either<T, E>`, equivalently to `Result<T, E>`.\n  * Implemented `Serialize` for `Flash`.\n  * Implemented `Serialize`, `Deserialize`, `UriDisplay` and `FromUriParam` for `uuid::Uuid`\n  * Implemented `Serialize`, `Deserialize` for `RawStr`.\n  * Implemented `Serialize`, `Deserialize` for all URI types.\n  * Implemented `Responder` for `Arc<T>`, `Box<T>` where `T: Responder`.\n  * Implemented `Serialize` and `Deserialize` for [`Method`].\n  * Implemented `Eq` for [`MediaType`] and [`ContentType`].\n  * Implemented `Responder` for `Box<T: Responder + Sized>`.\n  * Implemented `FromForm` for `Arc<T>`.\n  * Implemented `Fairing` for `Arc<dyn Fairing>`.\n  * Implemented `Serialize` and `Deserialize` for `Status`.\n\n### Dependency Changes\n\n  * `serde` was introduced (`1.0`).\n  * `futures` was introduced (`0.3`).\n  * `binascii` was introduced (`0.1`).\n  * `ref-cast` was introduced (`1.0`).\n  * `atomic` was introduced (`0.5`).\n  * `parking_lot` was introduced (`0.11`).\n  * `ubtye` was introduced (`0.10`).\n  * `figment` was introduced (`0.10`).\n  * `rand` was introduced (`0.8`).\n  * `either` was introduced (`1.0`).\n  * `pin-project-lite` was introduced (`0.2`).\n  * `indexmap` was introduced (`2.0`).\n  * `tempfile` was introduced (`3.0`).\n  * `async-trait` was introduced (`0.1`).\n  * `async-stream` was introduced (`0.3`).\n  * `multer` was introduced (`2.0`).\n  * `tokio` was introduced (`1.6.1`).\n  * `tokio-util` was introduced (`0.6`).\n  * `tokio-stream` was introduced (`0.1.6`).\n  * `bytes` was introduced (`1.0`).\n  * `normpath` was introduced (`1`).\n  * `state` was updated to `0.6`.\n  * `rmp-serde` was updated to `0.15`.\n  * `uuid` was updated to `0.8`.\n  * `tera` was updated to `1.10`.\n  * `postgres` was updated to `0.19`.\n  * `rusqlite` was updated to `0.25`.\n  * `r2d2_sqlite` was updated to `0.18`.\n  * `time` was updated to `0.3`.\n  * `handlebars` was updated to `4.0`.\n  * `memcache` was updated to `0.16`.\n  * `rustls` was updated to `0.21`.\n  * `tokio-rustls` was updated to `0.24`.\n  * `syn` was updated to `2`.\n  * `diesel` was updated to `2.0`.\n  * `sqlx` was updated to `0.7`.\n  * `notify` was updated to `6`.\n  * `criterion` was updated to `0.4`.\n  * `cookie` was updated to `0.18`.\n  * `yansi` was updated to `1.0`.\n  * `atty` was removed.\n\n## Infrastructure\n\nThe following changes were made to the project's infrastructure:\n\n  * Rocket now uses the 2021 edition of Rust.\n  * Added a [v0.4 to v0.5 migration guide] and [FAQ] to Rocket's website.\n  * Added visible `use` statements to examples in the guide.\n  * Split examples into a separate workspace for easier testing.\n  * Updated documentation for all changes.\n  * Fixed many typos, errors, and broken links throughout documentation and examples.\n  * Improved the general robustness of macros, and the quality and frequency of error messages.\n  * Benchmarks now use `criterion` and datasets extracted from real-world projects.\n  * Fixed the SPDX license expressions in `Cargo.toml` files.\n  * Added support to `test.sh` for a `+` flag (e.g. `+stable`) to pass to `cargo`.\n  * Added support to `test.sh` for extra flags to be passed on to `cargo`.\n  * UI tests are now allowed to fail by the CI to avoid false negatives.\n  * The GitHub CI workflow was updated to use maintained actions.\n  * The CI now frees disk space before proceeding to avoid out-of-disk errors.\n  * All workspaces now use `resolver = 2`.\n\n[phase]: https://api.rocket.rs/v0.5/rocket/struct.Rocket.html#phases\n[`async`/`await`]: https://rocket.rs/v0.5/guide/overview/#async-routes\n[compilation on Rust's stable]: https://rocket.rs/v0.5/guide/getting-started/#installing-rust\n[Feature-complete forms support]: https://rocket.rs/v0.5/guide/requests/#forms\n[configuration system]: https://rocket.rs/v0.5/guide/configuration/#configuration\n[graceful shutdown]: https://api.rocket.rs/v0.5/rocket/config/struct.Shutdown.html#summary\n[asynchronous testing]: https://rocket.rs/v0.5/guide/testing/#asynchronous-testing\n[UTF-8 characters]: https://rocket.rs/v0.5/guide/requests/#static-parameters\n[ignorable segments]: https://rocket.rs/v0.5/guide/requests/#ignored-segments\n[Catcher scoping]: https://rocket.rs/v0.5/guide/requests/#scoping\n[ad-hoc validation]: https://rocket.rs/v0.5/guide/requests#ad-hoc-validation\n[incoming data limits]: https://rocket.rs/v0.5/guide/requests/#streaming\n[build phases]: https://api.rocket.rs/v0.5/rocket/struct.Rocket.html#phases\n[Singleton fairings]: https://api.rocket.rs/v0.5/rocket/fairing/trait.Fairing.html#singletons\n[features into core]: https://api.rocket.rs/v0.5/rocket/index.html#features\n[features of `rocket`]: https://api.rocket.rs/v0.5/rocket/index.html#features\n[Data limit declaration in SI units]: https://api.rocket.rs/v0.5/rocket/data/struct.ByteUnit.html\n[support for `serde`]: https://api.rocket.rs/v0.5/rocket/serde/index.html\n[automatic typed config extraction]: https://api.rocket.rs/v0.5/rocket/fairing/struct.AdHoc.html#method.config\n[misconfigured secrets]: https://api.rocket.rs/v0.5/rocket/config/struct.SecretKey.html\n[default ranking colors]: https://rocket.rs/v0.5/guide/requests/#default-ranking\n[`chat`]: https://github.com/rwf2/Rocket/tree/v0.5/examples/chat\n[`Form` guard]: https://api.rocket.rs/v0.5/rocket/form/struct.Form.html\n[`Strict`]: https://api.rocket.rs/v0.5/rocket/form/struct.Strict.html\n[`CookieJar`#pending]: https://api.rocket.rs/v0.5/rocket/http/struct.CookieJar.html#pending\n[`rocket::serde::json`]: https://api.rocket.rs/v0.5/rocket/serde/json/index.html\n[`rocket::serde::msgpack`]: https://api.rocket.rs/v0.5/rocket/serde/msgpack/index.html\n[`rocket::serde::uuid`]: https://api.rocket.rs/v0.5/rocket/serde/uuid/index.html\n[`rocket::shield`]: https://api.rocket.rs/v0.5/rocket/shield/index.html\n[`rocket::fs`]: https://api.rocket.rs/v0.5/rocket/fs/index.html\n[`async run()`]: https://api.rocket.rs/v0.5/rocket_sync_db_pools/index.html#handlers\n[`LocalRequest::json()`]: https://api.rocket.rs/v0.5/rocket/local/blocking/struct.LocalRequest.html#method.json\n[`LocalRequest::msgpack()`]: https://api.rocket.rs/v0.5/rocket/local/blocking/struct.LocalRequest.html#method.msgpack\n[`LocalResponse::json()`]: https://api.rocket.rs/v0.5/rocket/local/blocking/struct.LocalResponse.html#method.json\n[`LocalResponse::msgpack()`]: https://api.rocket.rs/v0.5/rocket/local/blocking/struct.LocalResponse.html#method.msgpack\n[hierarchical data limits]: https://api.rocket.rs/v0.5/rocket/data/struct.Limits.html#hierarchy\n[default form field values]: https://rocket.rs/v0.5/guide/requests/#defaults\n[`Config::ident`]: https://api.rocket.rs/rocket/struct.Config.html#structfield.ident\n[`tokio`]: https://tokio.rs/\n[Figment]: https://docs.rs/figment/0.10/figment/\n[`TempFile`]: https://api.rocket.rs/v0.5/rocket/fs/enum.TempFile.html\n[`Contextual`]: https://rocket.rs/v0.5/guide/requests/#context\n[`Capped<T>`]: https://api.rocket.rs/v0.5/rocket/data/struct.Capped.html\n[default catchers]: https://rocket.rs/v0.5/guide/requests/#default-catchers\n[URI types]: https://api.rocket.rs/v0.5/rocket/http/uri/index.html\n[`uri!`]: https://api.rocket.rs/v0.5/rocket/macro.uri.html\n[`Reference`]: https://api.rocket.rs/v0.5/rocket/http/uri/struct.Reference.html\n[`Asterisk`]: https://api.rocket.rs/v0.5/rocket/http/uri/struct.Asterisk.html\n[`Redirect`]: https://api.rocket.rs/v0.5/rocket/response/struct.Redirect.html\n[`UriDisplayQuery`]: https://api.rocket.rs/v0.5/rocket/derive.UriDisplayQuery.html\n[`Shield`]: https://api.rocket.rs/v0.5/rocket/shield/struct.Shield.html\n[Sentinels]: https://api.rocket.rs/v0.5/rocket/trait.Sentinel.html\n[`local_cache!`]: https://api.rocket.rs/v0.5/rocket/request/macro.local_cache.html\n[`local_cache_once!`]: https://api.rocket.rs/v0.5/rocket/request/macro.local_cache_once.html\n[`CookieJar`]: https://api.rocket.rs/v0.5/rocket/http/struct.CookieJar.html\n[asynchronous streams]: https://rocket.rs/v0.5/guide/responses/#async-streams\n[Server-Sent Events]: https://api.rocket.rs/v0.5/rocket/response/stream/struct.EventStream.html\n[`fs::relative!`]: https://api.rocket.rs/v0.5/rocket/fs/macro.relative.html\n[notification]: https://api.rocket.rs/v0.5/rocket/struct.Shutdown.html\n[`Rocket`]: https://api.rocket.rs/v0.5/rocket/struct.Rocket.html\n[`rocket::build()`]: https://api.rocket.rs/v0.5/rocket/struct.Rocket.html#method.build\n[`Rocket::ignite()`]: https://api.rocket.rs/v0.5/rocket/struct.Rocket.html#method.ignite\n[`Rocket::launch()`]: https://api.rocket.rs/v0.5/rocket/struct.Rocket.html#method.launch\n[`Request::rocket()`]: https://api.rocket.rs/v0.5/rocket/request/struct.Request.html#method.rocket\n[Fairings]: https://rocket.rs/v0.5/guide/fairings/\n[configuration system]: https://rocket.rs/v0.5/guide/configuration/\n[`Poolable`]: https://api.rocket.rs/v0.5/rocket_sync_db_pools/trait.Poolable.html\n[`Config`]: https://api.rocket.rs/v0.5/rocket/struct.Config.html\n[`Error`]: https://api.rocket.rs/v0.5/rocket/struct.Error.html\n[`LogLevel`]: https://api.rocket.rs/v0.5/rocket/config/enum.LogLevel.html\n[`Rocket::register()`]: https://api.rocket.rs/v0.5/rocket/struct.Rocket.html#method.register\n[`NamedFile::open`]: https://api.rocket.rs/v0.5/rocket/fs/struct.NamedFile.html#method.open\n[`Request::local_cache_async()`]: https://api.rocket.rs/v0.5/rocket/request/struct.Request.html#method.local_cache_async\n[`FromRequest`]: https://api.rocket.rs/v0.5/rocket/request/trait.FromRequest.html\n[`Fairing`]: https://api.rocket.rs/v0.5/rocket/fairing/trait.Fairing.html\n[`catcher::Handler`]: https://api.rocket.rs/v0.5/rocket/catcher/trait.Handler.html\n[`route::Handler`]: https://api.rocket.rs/v0.5/rocket/route/trait.Handler.html\n[`FromData`]: https://api.rocket.rs/v0.5/rocket/data/trait.FromData.html\n[`AsyncRead`]: https://docs.rs/tokio/1/tokio/io/trait.AsyncRead.html\n[`AsyncSeek`]: https://docs.rs/tokio/1/tokio/io/trait.AsyncSeek.html\n[`rocket::local::asynchronous`]: https://api.rocket.rs/v0.5/rocket/local/asynchronous/index.html\n[`rocket::local::blocking`]: https://api.rocket.rs/v0.5/rocket/local/blocking/index.html\n[`Outcome`]: https://api.rocket.rs/v0.5/rocket/outcome/enum.Outcome.html\n[`rocket::outcome::try_outcome!`]: https://api.rocket.rs/v0.5/rocket/outcome/macro.try_outcome.html\n[`Result<T, E>` implements `Responder`]: https://api.rocket.rs/v0.5/rocket/response/trait.Responder.html#provided-implementations\n[`Debug`]: https://api.rocket.rs/v0.5/rocket/response/struct.Debug.html\n[`std::convert::Infallible`]: https://doc.rust-lang.org/stable/std/convert/enum.Infallible.html\n[`ErrorKind::Collisions`]: https://api.rocket.rs/v0.5/rocket/error/enum.ErrorKind.html#variant.Collisions\n[`rocket::http::uri::fmt`]: https://api.rocket.rs/v0.5/rocket/http/uri/fmt/index.html\n[`Data::open()`]: https://api.rocket.rs/v0.5/rocket/data/struct.Data.html#method.open\n[`DataStream`]: https://api.rocket.rs/v0.5/rocket/data/struct.DataStream.html\n[`rocket::form`]: https://api.rocket.rs/v0.5/rocket/form/index.html\n[`FromFormField`]: https://api.rocket.rs/v0.5/rocket/form/trait.FromFormField.html\n[`FromForm`]: https://api.rocket.rs/v0.5/rocket/form/trait.FromForm.html\n[`FlashMessage`]: https://api.rocket.rs/v0.5/rocket/request/type.FlashMessage.html\n[`Flash`]: https://api.rocket.rs/v0.5/rocket/response/struct.Flash.html\n[`rocket::State`]: https://api.rocket.rs/v0.5/rocket/struct.State.html\n[`Segments<Path>` and `Segments<Query>`]: https://api.rocket.rs/v0.5/rocket/http/uri/struct.Segments.html\n[`Route::map_base()`]: https://api.rocket.rs/v0.5/rocket/route/struct.Route.html#method.map_base\n[`uuid` support]: https://api.rocket.rs/v0.5/rocket/serde/uuid/index.html\n[`json`]: https://api.rocket.rs/v0.5/rocket/serde/json/index.html\n[`msgpack`]: https://api.rocket.rs/v0.5/rocket/serde/msgpack/index.html\n[`rocket::serde::json::json!`]: https://api.rocket.rs/v0.5/rocket/serde/json/macro.json.html\n[`rocket::shield::Shield`]: https://api.rocket.rs/v0.5/rocket/shield/struct.Shield.html\n[`rocket::fs::FileServer`]: https://api.rocket.rs/v0.5/rocket/fs/struct.FileServer.html\n[`rocket_dyn_templates`]: https://api.rocket.rs/v0.5/rocket_dyn_templates/index.html\n[`rocket_sync_db_pools`]: https://api.rocket.rs/v0.5/rocket_sync_db_pools/index.html\n[multitasking]: https://rocket.rs/v0.5/guide/overview/#multitasking\n[`Created<R>`]: https://api.rocket.rs/v0.5/rocket/response/status/struct.Created.html\n[`Created::tagged_body`]: https://api.rocket.rs/v0.5/rocket/response/status/struct.Created.html#method.tagged_body\n[raw identifiers]: https://doc.rust-lang.org/1.51.0/book/appendix-01-keywords.html#raw-identifiers\n[`Rocket::config()`]: https://api.rocket.rs/v0.5/rocket/struct.Rocket.html#method.config\n[`Rocket::figment()`]: https://api.rocket.rs/v0.5/rocket/struct.Rocket.html#method.figment\n[`Rocket::state()`]: https://api.rocket.rs/v0.5/rocket/struct.Rocket.html#method.state\n[`Rocket::catchers()`]: https://api.rocket.rs/v0.5/rocket/struct.Rocket.html#method.catchers\n[`LocalRequest::inner_mut()`]: https://api.rocket.rs/v0.5/rocket/local/blocking/struct.LocalRequest.html#method.inner_mut\n[`RawStrBuf`]: https://api.rocket.rs/v0.5/rocket/http/struct.RawStrBuf.html\n[`RawStr`]: https://api.rocket.rs/v0.5/rocket/http/struct.RawStr.html\n[`RawStr::percent_encode()`]: https://api.rocket.rs/v0.5/rocket/http/struct.RawStr.html#method.percent_encode\n[`RawStr::percent_encode_bytes()`]: https://api.rocket.rs/v0.5/rocket/http/struct.RawStr.html#method.percent_encode_bytes\n[`RawStr::strip()`]: https://api.rocket.rs/v0.5/rocket/http/struct.RawStr.html#method.strip_prefix\n[`rocket::catcher`]: https://api.rocket.rs/v0.5/rocket/catcher/index.html\n[`rocket::route`]: https://api.rocket.rs/v0.5/rocket/route/index.html\n[`Segments::prefix_of()`]: https://api.rocket.rs/v0.5/rocket/http/uri/struct.Segments.html#method.prefix_of\n[`Template::try_custom()`]: https://api.rocket.rs/v0.5/rocket_dyn_templates/struct.Template.html#method.try_custom\n[`Template::custom`]: https://api.rocket.rs/v0.5/rocket_dyn_templates/struct.Template.html#method.custom\n[`FileServer::new()`]: https://api.rocket.rs/v0.5/rocket/fs/struct.FileServer.html#method.new\n[`content`]: https://api.rocket.rs/v0.5/rocket/response/content/index.html\n[`rocket_db_pools`]: https://api.rocket.rs/v0.5/rocket_db_pools/index.html\n[mutual TLS]: https://rocket.rs/v0.5/guide/configuration/#mutual-tls\n[`Certificate`]: https://api.rocket.rs/v0.5/rocket/mtls/struct.Certificate.html\n[`MediaType::with_params()`]: https://api.rocket.rs/v0.5/rocket/http/struct.MediaType.html#method.with_params\n[`ContentType::with_params()`]: https://api.rocket.rs/v0.5/rocket/http/struct.ContentType.html#method.with_params\n[`Host`]: https://api.rocket.rs/v0.5/rocket/http/uri/struct.Host.html\n[`&Host`]: https://api.rocket.rs/v0.5/rocket/http/uri/struct.Host.html\n[`Request::host()`]: https://api.rocket.rs/v0.5/rocket/request/struct.Request.html#method.host\n[`context!`]: https://api.rocket.rs/v0.5/rocket_dyn_templates/macro.context.html\n[`MediaType`]: https://api.rocket.rs/v0.5/rocket/http/struct.MediaType.html\n[`ContentType`]: https://api.rocket.rs/v0.5/rocket/http/struct.ContentType.html\n[`Method`]: https://api.rocket.rs/v0.5/rocket/http/enum.Method.html\n[`(ContentType, T)`]: https://api.rocket.rs/v0.5/rocket/response/content/index.html#usage\n[v0.4 to v0.5 migration guide]: https://rocket.rs/v0.5/guide/upgrading/\n[contrib deprecation upgrade guide]: https://rocket.rs/v0.5/guide/upgrading/#contrib-deprecation\n[FAQ]: https://rocket.rs/v0.5/guide/faq/\n[`Rocket::launch()`]: https://api.rocket.rs/v0.5/rocket/struct.Rocket.html#method.launch\n[`ErrorKind::Shutdown`]: https://api.rocket.rs/v0.5/rocket/error/enum.ErrorKind.html#variant.Shutdown\n[shutdown fairings]: https://api.rocket.rs/v0.5/rocket/fairing/trait.Fairing.html#shutdown\n[`Client::terminate()`]: https://api.rocket.rs/v0.5/rocket/local/blocking/struct.Client.html#method.terminate\n[`rocket::execute()`]: https://api.rocket.rs/v0.5/rocket/fn.execute.html\n[`CookieJar::get_pending()`]: https://api.rocket.rs/v0.5/rocket/http/struct.CookieJar.html#method.get_pending\n[`Metadata::render()`]: https://api.rocket.rs/v0.5/rocket_dyn_templates/struct.Metadata.html#method.render\n[`pool()`]: https://api.rocket.rs/v0.5/rocket_sync_db_pools/example/struct.ExampleDb.html#method.pool\n[`Request::client_ip()`]: https://api.rocket.rs/v0.5/rocket/request/struct.Request.html#method.client_ip\n[`max_blocking`]: https://api.rocket.rs/v0.5/rocket/struct.Config.html#structfield.max_blocking\n[`ip_header`]: https://api.rocket.rs/v0.5/rocket/struct.Config.html#structfield.ip_header\n[`LocalRequest::identity()`]: https://api.rocket.rs/v0.5/rocket/local/blocking/struct.LocalRequest.html#method.identity\n[`TempFile::open()`]: https://api.rocket.rs/v0.5/rocket/fs/enum.TempFile.html#method.open\n[`Error::pretty_print()`]: https://api.rocket.rs/v0.5/rocket/struct.Error.html#method.pretty_print\n[Request connection upgrade APIs]: https://api.rocket.rs/v0.5/rocket/struct.Response.html#upgrading\n[`rocket_ws`]: https://api.rocket.rs/v0.5/rocket_ws/\n[registering]: https://api.rocket.rs/v0.5/rocket/response/struct.Response.html#method.add_upgrade\n[`IoHandler`]: https://api.rocket.rs/v0.5/rocket/data/trait.IoHandler.html\n[`response::status`]: https://api.rocket.rs/v0.5/rocket/response/status/index.html\n[Custom form errors]: https://api.rocket.rs/v0.5/rocket/form/error/enum.ErrorKind.html#variant.Custom\n[`request::Outcome`]: https://api.rocket.rs/v0.5/rocket/request/type.Outcome.html#variant.Forward\n[Route `Forward` outcomes]: https://api.rocket.rs/v0.5/rocket/request/type.Outcome.html#variant.Forward\n[`Outcome::Error`]: https://api.rocket.rs/v0.5/rocket/outcome/enum.Outcome.html#variant.Error\n[`IntoOutcome`]: https://api.rocket.rs/v0.5/rocket/outcome/trait.IntoOutcome.html\n[`MediaType::JavaScript`]: https://api.rocket.rs/v0.5/rocket/http/struct.MediaType.html#associatedconstant.JavaScript\n[`TempFile::open()`]: https://api.rocket.rs/v0.5/rocket/fs/enum.TempFile.html#method.open\n[`Error::pretty_print()`]: https://api.rocket.rs/v0.5/rocket/struct.Error.html#method.pretty_print\n[`RouteUri`]: https://api.rocket.rs/v0.5/rocket/route/struct.RouteUri.html\n\n# Version 0.4.10 (May 21, 2021)\n\n## Core\n\n  * [[`3276b8`]] Removed `unsafe` in `Origin::parse_owned()`, fixing a soundness\n    issue.\n\n[`3276b8`]: https://github.com/rwf2/Rocket/commit/3276b8\n\n# Version 0.4.9 (May 19, 2021)\n\n## Core\n\n  * [[`#1645`], [`f2a56f`]] Fixed `Try` `impl FromResidual<Result> for Outcome`.\n\n[`#1645`]: https://github.com/rwf2/Rocket/issues/1645\n[`f2a56f`]: https://github.com/rwf2/Rocket/commit/f2a56f\n\n# Version 0.4.8 (May 18, 2021)\n\n## Core\n\n  * [[`#1548`], [`93e88b0`]] Fixed an issue that prevented compilation under\n    Windows Subsystem for Linux v1.\n  * Updated `Outcome` `Try` implementation to v2 in latest nightly.\n  * Minimum required `rustc` is `1.54.0-nightly (2021-05-18)`.\n\n## Internal\n\n  * Updated `base64` dependency to `0.13`.\n\n[`#1548`]: https://github.com/rwf2/Rocket/issues/1548\n[`93e88b0`]: https://github.com/rwf2/Rocket/commit/93e88b0\n\n# Version 0.4.7 (Feb 09, 2021)\n\n## Core\n\n  * [[#1534], [`2059a6`]] Fixed a low-severity, minimal impact soundness issue\n    in `uri::Formatter`.\n\n[#1534]: https://github.com/rwf2/Rocket/issues/1534\n[`2059a6`]: https://github.com/rwf2/Rocket/commit/2059a6\n\n# Version 0.4.6 (Nov 09, 2020)\n\n## Core\n\n  * [[`86bd7c`]] Added default and configurable read/write timeouts:\n    `read_timeout` and `write_timeout`.\n  * [[`c24a96`]] Added the `sse` feature, which [enables flushing] by returning\n    `io::ErrorKind::WouldBlock`.\n\n## Docs\n\n  * Fixed broken doc links in `contrib`.\n  * Fixed database library versions in `contrib` docs.\n\n## Internal\n\n  * Updated source code for Rust 2018.\n  * UI tests now use `trybuild` instead of `compiletest-rs`.\n\n[`86bd7c`]: https://github.com/rwf2/Rocket/commit/86bd7c\n[`c24a96`]: https://github.com/rwf2/Rocket/commit/c24a96\n[enables flushing]: https://api.rocket.rs/v0.4/rocket/response/struct.Stream.html#buffering-and-blocking\n\n# Version 0.4.5 (May 30, 2020)\n\n## Core\n\n  * [[#1312], [`89150f`]] Fixed a low-severity, minimal impact soundness issue in\n    `LocalRequest::clone()`.\n  * [[#1263], [`376f74`]] Fixed a cookie serialization issue that led to\n    incorrect cookie deserialization in certain cases.\n  * Removed dependency on `ring` for private cookies and thus Rocket, by\n    default.\n  * Added [`Origin::map_path()`] for manipulating `Origin` paths.\n  * Added [`handler::Outcome::from_or_forward()`].\n  * Added [`Options::NormalizeDirs`] option to `StaticFiles`.\n  * Improved accessibility of default error HTML.\n\n## Docs\n\n  * Fixed various typos.\n\n[#1312]: https://github.com/rwf2/Rocket/issues/1312\n[`89150f`]: https://github.com/rwf2/Rocket/commit/89150f\n[#1263]: https://github.com/rwf2/Rocket/issues/1263\n[`376f74`]: https://github.com/rwf2/Rocket/commit/376f74\n[`Origin::map_path()`]: https://api.rocket.rs/v0.4/rocket/http/uri/struct.Origin.html#method.map_path\n[`handler::Outcome::from_or_forward()`]: https://api.rocket.rs/v0.4/rocket/handler/type.Outcome.html#method.from_or_forward\n[`Options::NormalizeDirs`]: https://api.rocket.rs/v0.4/rocket_contrib/serve/struct.Options.html#associatedconstant.NormalizeDirs\n\n# Version 0.4.4 (Mar 09, 2020)\n\n## Core\n\n  * Removed use of unsupported `cfg(debug_assertions)` in `Cargo.toml`, allowing\n    for builds on latest nightlies.\n\n## Docs\n\n  * Fixed various broken links.\n\n# Version 0.4.3 (Feb 29, 2020)\n\n## Core\n\n  * Added a new [`Debug`] `500` `Responder` that `Debug`-prints its contents on\n    response.\n  * Specialization on `Result` was deprecated. [`Debug`] can be used in place of\n    non-`Responder` errors.\n  * Fixed an issue that resulted in cookies not being set on error responses.\n  * Various `Debug` implementations on Rocket types now respect formatting\n    options.\n  * Added `Responder`s for various HTTP status codes: [`NoContent`],\n    [`Unauthorized`], [`Forbidden`], and [`Conflict`].\n  * `FromParam` is implemented for `NonZero` core types.\n\n## Codegen\n\n  * Docs for Rocket-generated macros are now hidden.\n  * Generated code now works even when prelude imports like `Some`, `Ok`, and\n    `Err` are shadowed.\n  * Error messages referring to responder types in routes now point to the type\n    correctly.\n\n## Docs\n\n  * All code examples in the guide are now tested and guaranteed to compile.\n  * All macros are documented in the `core` crate; `rocket_codegen` makes no\n    appearances.\n\n## Infrastructure\n\n  * CI was moved from Travis to Azure Pipelines; Windows support is tested.\n  * Rocket's chat moved to [Matrix] and [Freenode].\n\n[`Debug`]: https://api.rocket.rs/v0.4/rocket/response/struct.Debug.html\n[`NoContent`]: https://api.rocket.rs/v0.4/rocket/response/status/struct.NoContent.html\n[`Unauthorized`]: https://api.rocket.rs/v0.4/rocket/response/status/struct.Unauthorized.html\n[`Forbidden`]: https://api.rocket.rs/v0.4/rocket/response/status/struct.Forbidden.html\n[`Conflict`]: https://api.rocket.rs/v0.4/rocket/response/status/struct.Conflict.html\n[Matrix]: https://chat.mozilla.org/#/room/#rocket:mozilla.org\n[Freenode]: https://kiwiirc.com/client/chat.freenode.net/#rocket\n\n# Version 0.4.2 (Jun 28, 2019)\n\n## Core\n\n  * Replaced use of `FnBox` with `Box<dyn FnOnce>`.\n  * Removed the stable feature gates `try_from` and `transpose_result`.\n  * Derive macros are reexported alongside their respective traits.\n  * Minimum required `rustc` is `1.35.0-nightly (2019-04-05)`.\n\n## Codegen\n\n  * `JsonValue` now implements `FromIterator`.\n  * `non_snake_case` errors are silenced in generated code.\n  * Minimum required `rustc` is `1.33.0-nightly (2019-01-03)`.\n\n## Contrib\n\n  * Allow setting custom ranks on `StaticFiles` via [`StaticFiles::rank()`].\n  * `MsgPack` correctly sets a MessagePack Content-Type on responses.\n\n## Docs\n\n  * Fixed typos across rustdocs and guide.\n  * Documented library versions in contrib database documentation.\n\n## Infrastructure\n\n  * Updated internal dependencies to their latest versions.\n\n[`StaticFiles::rank()`]: https://api.rocket.rs/v0.4/rocket_contrib/serve/struct.StaticFiles.html#method.rank\n\n# Version 0.4.1 (May 11, 2019)\n\n## Core\n\n  * Rocket's default `Server` HTTP header no longer overrides a user-set header.\n  * Fixed encoding and decoding of certain URI characters.\n\n## Codegen\n\n  * Compiler diagnostic information is more reliably produced.\n\n## Contrib\n\n  * Database pool types now implement `DerefMut`.\n  * Added support for memcache connection pools.\n  * Stopped depending on default features from core.\n\n## Docs\n\n  * Fixed many typos across the rustdocs and guide.\n  * Added guide documentation on mounting more than one route at once.\n\n## Infrastructure\n\n  * Testing no longer requires \"bootstrapping\".\n  * Removed deprecated `isatty` dependency in favor of `atty`.\n\n# Version 0.4.0 (Dec 06, 2018)\n\n## New Features\n\nThis release includes the following new features:\n\n  * Introduced [Typed URIs].\n  * Introduced [ORM agnostic database support].\n  * Introduced [Request-Local State].\n  * Introduced mountable static-file serving via [`StaticFiles`].\n  * Introduced automatic [live template reloading].\n  * Introduced custom stateful handlers via [`Handler`].\n  * Introduced [transforming] data guards via [`FromData::transform()`].\n  * Introduced revamped [query string handling].\n  * Introduced the [`SpaceHelmet`] security and privacy headers fairing.\n  * Private cookies are gated behind a `private-cookies` default feature.\n  * Added [derive for `FromFormValue`].\n  * Added [derive for `Responder`].\n  * Added [`Template::custom()`] for customizing templating engines including\n    registering filters and helpers.\n  * Cookies are automatically tracked and propagated by [`Client`].\n  * Private cookies can be added to local requests with\n    [`LocalRequest::private_cookie()`].\n  * Release builds default to the `production` environment.\n  * Keep-alive can be configured via the `keep_alive` configuration parameter.\n  * Allow CLI colors and emoji to be disabled with `ROCKET_CLI_COLORS=off`.\n  * Route `format` accepts [shorthands] such as `json` and `html`.\n  * Implemented [`Responder` for `Status`].\n  * Added [`Response::cookies()`] for retrieving response cookies.\n  * All logging is disabled when `log` is set to `off`.\n  * Added [`Metadata`] guard for retrieving templating information.\n  * The [`Uri`] type parses URIs according to RFC 7230 into one of [`Origin`],\n    [`Absolute`], or [`Authority`].\n  * Added [`Outcome::and_then()`], [`Outcome::failure_then()`], and\n    [`Outcome::forward_then()`].\n  * Implemented `Responder` for `&[u8]`.\n  * Any `T: Into<Vec<Route>>` can be [`mount()`]ed.\n  * [Default rankings] range from -6 to -1, differentiating on static query\n    strings.\n  * Added [`Request::get_query_value()`] for retrieving a query value by key.\n  * Applications can launch without a working directory.\n  * Added [`State::from()`] for constructing `State` values.\n\n[`SpaceHelmet`]: https://api.rocket.rs/v0.4/rocket_contrib/helmet/index.html\n[`State::from()`]: https://api.rocket.rs/v0.4/rocket/struct.State.html#method.from\n[Typed URIs]: https://rocket.rs/v0.4/guide/responses/#typed-uris\n[ORM agnostic database support]: https://rocket.rs/v0.4/guide/state/#databases\n[`Template::custom()`]: https://api.rocket.rs/v0.4/rocket_contrib/templates/struct.Template.html#method.custom\n[`LocalRequest::private_cookie()`]: https://api.rocket.rs/v0.4/rocket/local/struct.LocalRequest.html#method.private_cookie\n[`LocalRequest`]: https://api.rocket.rs/v0.4/rocket/local/struct.LocalRequest.html\n[shorthands]: https://api.rocket.rs/v0.4/rocket/http/struct.ContentType.html#method.parse_flexible\n[derive for `FromFormValue`]: https://api.rocket.rs/v0.4/rocket_codegen/derive.FromFormValue.html\n[derive for `Responder`]: https://api.rocket.rs/v0.4/rocket_codegen/derive.Responder.html\n[`Response::cookies()`]: https://api.rocket.rs/v0.4/rocket/struct.Response.html#method.cookies\n[`Client`]: https://api.rocket.rs/v0.4/rocket/local/struct.Client.html\n[Request-Local State]: https://rocket.rs/v0.4/guide/state/#request-local-state\n[`Metadata`]: https://api.rocket.rs/v0.4/rocket_contrib/templates/struct.Metadata.html\n[`Uri`]: https://api.rocket.rs/v0.4/rocket/http/uri/enum.Uri.html\n[`Origin`]: https://api.rocket.rs/v0.4/rocket/http/uri/struct.Origin.html\n[`Absolute`]: https://api.rocket.rs/v0.4/rocket/http/uri/struct.Absolute.html\n[`Authority`]: https://api.rocket.rs/v0.4/rocket/http/uri/struct.Authority.html\n[`Outcome::and_then()`]: https://api.rocket.rs/v0.4/rocket/enum.Outcome.html#method.and_then\n[`Outcome::forward_then()`]: https://api.rocket.rs/v0.4/rocket/enum.Outcome.html#method.forward_then\n[`Outcome::failure_then()`]: https://api.rocket.rs/v0.4/rocket/enum.Outcome.html#method.failure_then\n[`StaticFiles`]: https://api.rocket.rs/v0.4/rocket_contrib/serve/struct.StaticFiles.html\n[live template reloading]: https://rocket.rs/v0.4/guide/responses/#live-reloading\n[`Handler`]: https://api.rocket.rs/v0.4/rocket/trait.Handler.html\n[`mount()`]: https://api.rocket.rs/v0.4/rocket/struct.Rocket.html#method.mount\n[`FromData::transform()`]: https://api.rocket.rs/v0.4/rocket/data/trait.FromData.html#tymethod.transform\n[transforming]: https://api.rocket.rs/v0.4/rocket/data/trait.FromData.html#transforming\n[query string handling]: https://rocket.rs/v0.4/guide/requests/#query-strings\n[Default rankings]: https://rocket.rs/v0.4/guide/requests/#default-ranking\n[`Request::get_query_value()`]: https://api.rocket.rs/v0.4/rocket/struct.Request.html#method.get_query_value\n[`Responder` for `Status`]: https://rocket.rs/v0.4/guide/responses/#status\n\n## Codegen Rewrite\n\nThe [`rocket_codegen`] crate has been entirely rewritten using to-be-stable\nprocedural macro APIs. We expect nightly breakages to drop dramatically, likely\nto zero, as a result. The new prelude import for Rocket applications is:\n\n```diff\n- #![feature(plugin)]\n- #![plugin(rocket_codegen)]\n+ #![feature(proc_macro_hygiene, decl_macro)]\n\n- extern crate rocket;\n+ #[macro_use] extern crate rocket;\n```\n\nThe [`rocket_codegen`] crate should **_not_** be a direct dependency. Remove it\nfrom your `Cargo.toml`:\n\n```diff\n[dependencies]\n- rocket = \"0.3\"\n+ rocket = \"0.4\"\n- rocket_codegen = \"0.3\"\n```\n\n[`rocket_codegen`]: https://api.rocket.rs/v0.4/rocket_codegen/index.html\n\n## Breaking Changes\n\nThis release includes many breaking changes. These changes are listed below\nalong with a short note about how to handle the breaking change in existing\napplications when applicable.\n\n  * **Route and catcher attributes respect function privacy.**\n\n    To mount a route or register a catcher outside of the module it is declared,\n    ensure that the handler function is marked `pub` or `crate`.\n\n  * **Query handling syntax has been completely revamped.**\n\n    A query parameter of `<param>` is now `<param..>`. Consider whether your\n    application benefits from the revamped [query string handling].\n\n  * **The `#[error]` attribute and `errors!` macro were removed.**\n\n    Use `#[catch]` and `catchers!` instead.\n\n  * **`Rocket::catch()` was renamed to [`Rocket::register()`].**\n\n    Change calls of the form `.catch(errors![..])` to\n    `.register(catchers![..])`.\n\n  * **The `#[catch]` attribute only accepts functions with 0 or 1 argument.**\n\n    Ensure the argument to the catcher, if any, is of type `&Request`.\n\n  * **[`json!`] returns a [`JsonValue`], no longer needs wrapping.**\n\n    Change instances of `Json(json!(..))` to `json!` and change the\n    corresponding type to `JsonValue`.\n\n  * **All environments default to port 8000.**\n\n    Manually configure a port of `80` for the `stage` and `production`\n    environments for the previous behavior.\n\n  * **Release builds default to the production environment.**\n\n    Manually set the environment to `debug` with `ROCKET_ENV=debug` for the\n    previous behavior.\n\n  * **[`Form`] and [`LenientForm`] lost a lifetime parameter, `get()` method.**\n\n    Change a type of `Form<'a, T<'a>>` to `Form<T>` or `Form<T<'a>>`. `Form<T>`\n    and `LenientForm<T>` now implement `Deref<Target = T>`, allowing for calls\n    to `.get()` to be removed.\n\n  * **[`ring`] was updated to 0.13.**\n\n    Ensure all transitive dependencies to `ring` refer to version `0.13`.\n\n  * **`Uri` was largely replaced by [`Origin`].**\n\n    In general, replace the type `Uri` with `Origin`. The `base` and `uri`\n    fields of [`Route`] are now of type [`Origin`]. The `&Uri` guard is now\n    `&Origin`. [`Request::uri()`] now returns an [`Origin`].\n\n  * **All items in [`rocket_contrib`] are namespaced behind modules.**\n\n    * `Json` is now `json::Json`\n    * `MsgPack` is now `msgpack::MsgPack`\n    * `MsgPackError` is now `msgpack::Error`\n    * `Template` is now `templates::Template`\n    * `UUID` is now `uuid::Uuid`\n    * `Value` is replaced by `json::JsonValue`\n\n  * **TLS certificates require the `subjectAltName` extension.**\n\n    Ensure that your TLS certificates contain the `subjectAltName` extension\n    with a value set to your domain.\n\n  * **Route paths, mount points, and [`LocalRequest`] URIs are strictly\n    checked.**\n\n    Ensure your mount points are absolute paths with no parameters, ensure your\n    route paths are absolute paths with proper parameter syntax, and ensure that\n    paths passed to `LocalRequest` are valid.\n\n  * **[`Template::show()`] takes an `&Rocket`, doesn't accept a `root`.**\n\n    Use [`client.rocket()`] to get a reference to an instance of `Rocket` when\n    testing. Use [`Template::render()`] in routes.\n\n  * **[`Request::remote()`] returns the _actual_ remote IP, doesn't rewrite.**\n\n    Use [`Request::real_ip()`] or [`Request::client_ip()`] to retrieve the IP\n    address from the \"X-Real-IP\" header if it is present.\n\n  * **[`Bind`] variant was added to [`LaunchErrorKind`].**\n\n    Ensure matches on `LaunchErrorKind` include or ignore the `Bind` variant.\n\n  * **Cookies are automatically tracked and propagated by [`Client`].**\n\n    For the previous behavior, construct a `Client` with\n    [`Client::untracked()`].\n\n  * **`UUID` was renamed to [`Uuid`].**\n\n    Use `Uuid` instead of `UUID`.\n\n  * **`LocalRequest::cloned_dispatch()` was removed.**\n\n    Chain calls to `.clone().dispatch()` for the previous behavior.\n\n  * **[`Redirect`] constructors take a generic type of `T:\n    TryInto<Uri<'static>>`.**\n\n    A call to a `Redirect` constructor with a non-`'static` `&str`  of the form\n    `Redirect::to(string)` should become `Redirect::to(string.to_string())`,\n    heap-allocating the string before being passed to the constructor.\n\n  * **The [`FromData`] impl for [`Form`] and [`LenientForm`] now return an error\n    of type [`FormDataError`].**\n\n    On non-I/O errors, the form string is stored in the variant as an `&'f str`.\n\n  * **[`Missing`] variant was added to [`ConfigError`].**\n\n    Ensure matches on `ConfigError` include or ignore the `Missing` variant.\n\n  * **The [`FromData`] impl for [`Json`] now returns an error of type\n    [`JsonError`].**\n\n    The previous `SerdeError` is now the `.1` member of the `JsonError` `enum`.\n    Match and destruct the variant for the previous behavior.\n\n  * **[`FromData`] is now emulated by [`FromDataSimple`].**\n\n    Change _implementations_, not uses, of `FromData` to `FromDataSimple`.\n    Consider whether your implementation could benefit from [transformations].\n\n  * **[`FormItems`] iterates over values of type [`FormItem`].**\n\n    Map using `.map(|item| item.key_value())` for the previous behavior.\n\n  * **[`LaunchErrorKind::Collision`] contains a vector of the colliding routes.**\n\n    Destruct using `LaunchErrorKind::Collision(..)` to ignore the vector.\n\n  * **[`Request::get_param()`] and [`Request::get_segments()`] are indexed by\n    _segment_, not dynamic parameter.**\n\n    Modify the `n` argument in calls to these functions appropriately.\n\n  * **Method-based route attributes no longer accept a keyed `path` parameter.**\n\n    Change an attribute of the form `#[get(path = \"..\")]` to `#[get(\"..\")]`.\n\n  * **[`Json`] and [`MsgPack`] data guards no longer reject requests with an\n    unexpected Content-Type**\n\n    To approximate the previous behavior, add a `format = \"json\"` route\n    parameter when using `Json` or `format = \"msgpack\"` when using `MsgPack`.\n\n  * **Implemented [`Responder` for `Status`]. Removed `Failure`,\n    `status::NoContent`, and `status::Reset` responders.**\n\n    Replace uses of `Failure(status)` with `status` directly. Replace\n    `status::NoContent` with `Status::NoContent`. Replace `status::Reset` with\n    `Status::ResetContent`.\n\n  * **[`Config::root()`] returns an `Option<&Path>` instead of an `&Path`.**\n\n    For the previous behavior, use `config.root().unwrap()`.\n\n  * **[`Status::new()`] is no longer `const`.**\n\n    Construct a `Status` directly.\n\n  * **[`Config`] constructors return a `Config` instead of a `Result<Config>`.**\n\n  * **`ConfigError::BadCWD`, `Config.config_path` were removed.**\n\n  * **[`Json`] no longer has a default value for its type parameter.**\n\n  * **Using `data` on a non-payload method route is a warning instead of error.**\n\n  * **The `raw_form_string` method of [`Form`] and [`LenientForm`] was\n    removed.**\n\n  * **Various impossible `Error` associated types are now set to `!`.**\n\n  * **All [`AdHoc`] constructors require a name as the first parameter.**\n\n  * **The top-level `Error` type was removed.**\n\n[`LaunchErrorKind::Collision`]: https://api.rocket.rs/v0.4/rocket/error/enum.LaunchErrorKind.html#variant.Collision\n[`json!`]: https://api.rocket.rs/v0.4/rocket_contrib/macro.json.html\n[`JsonValue`]: https://api.rocket.rs/v0.4/rocket_contrib/json/struct.JsonValue.html\n[`Json`]: https://api.rocket.rs/v0.4/rocket_contrib/json/struct.Json.html\n[`ring`]: https://crates.io/crates/ring\n[`Template::show()`]: https://api.rocket.rs/v0.4/rocket_contrib/templates/struct.Template.html#method.show\n[`Template::render()`]: https://api.rocket.rs/v0.4/rocket_contrib/templates/struct.Template.html#method.render\n[`client.rocket()`]: https://api.rocket.rs/v0.4/rocket/local/struct.Client.html#method.rocket\n[`Request::remote()`]: https://api.rocket.rs/v0.4/rocket/struct.Request.html#method.remote\n[`Request::real_ip()`]: https://api.rocket.rs/v0.4/rocket/struct.Request.html#method.real_ip\n[`Request::client_ip()`]: https://api.rocket.rs/v0.4/rocket/struct.Request.html#method.client_ip\n[`Bind`]: https://api.rocket.rs/v0.4/rocket/error/enum.LaunchErrorKind.html#variant.Bind\n[`LaunchErrorKind`]: https://api.rocket.rs/v0.4/rocket/error/enum.LaunchErrorKind.html\n[`Client::untracked()`]: https://api.rocket.rs/v0.4/rocket/local/struct.Client.html#method.untracked\n[`Uuid`]: https://api.rocket.rs/v0.4/rocket_contrib/uuid/struct.Uuid.html\n[`Route`]: https://api.rocket.rs/v0.4/rocket/struct.Route.html\n[`Redirect`]: https://api.rocket.rs/v0.4/rocket/response/struct.Redirect.html\n[`Request::uri()`]: https://api.rocket.rs/v0.4/rocket/struct.Request.html#method.uri\n[`FormDataError`]: https://api.rocket.rs/v0.4/rocket/request/enum.FormDataError.html\n[`FromData`]: https://api.rocket.rs/v0.4/rocket/data/trait.FromData.html\n[`Form`]: https://api.rocket.rs/v0.4/rocket/request/struct.Form.html\n[`LenientForm`]: https://api.rocket.rs/v0.4/rocket/request/struct.LenientForm.html\n[`AdHoc`]: https://api.rocket.rs/v0.4/rocket/fairing/struct.AdHoc.html\n[`Missing`]: https://api.rocket.rs/v0.4/rocket/config/enum.ConfigError.html#variant.Missing\n[`ConfigError`]: https://api.rocket.rs/v0.4/rocket/config/enum.ConfigError.html\n[`Rocket::register()`]: https://api.rocket.rs/v0.4/rocket/struct.Rocket.html#method.register\n[`JsonError`]: https://api.rocket.rs/v0.4/rocket_contrib/json/enum.JsonError.html\n[transformations]: https://api.rocket.rs/v0.4/rocket/data/trait.FromData.html#transforming\n[`FromDataSimple`]: https://api.rocket.rs/v0.4/rocket/data/trait.FromDataSimple.html\n[`Request::get_param()`]: https://api.rocket.rs/v0.4/rocket/struct.Request.html#method.get_param\n[`Request::get_segments()`]: https://api.rocket.rs/v0.4/rocket/struct.Request.html#method.get_segments\n[`FormItem`]: https://api.rocket.rs/v0.4/rocket/request/struct.FormItem.html\n[`rocket_contrib`]: https://api.rocket.rs/v0.4/rocket_contrib/index.html\n[`MsgPack`]: https://api.rocket.rs/v0.4/rocket_contrib/msgpack/struct.MsgPack.html\n[`Status::new()`]: https://api.rocket.rs/v0.4/rocket/http/struct.Status.html#method.new\n[`Config`]: https://api.rocket.rs/v0.4/rocket/struct.Config.html\n[`Config::root()`]: https://api.rocket.rs/v0.4/rocket/struct.Config.html#method.root\n\n## General Improvements\n\nIn addition to new features, Rocket saw the following improvements:\n\n  * Log messages now refer to routes by name.\n  * Collision errors on launch name the colliding routes.\n  * Launch fairing failures refer to the failing fairing by name.\n  * The default `403` catcher now references authorization, not authentication.\n  * Private cookies are set to `HttpOnly` and are given an expiration date of 1\n    week by default.\n  * A [Tera templates example] was added.\n  * All macros, derives, and attributes are individually documented in\n    [`rocket_codegen`].\n  * Invalid client requests receive a response of `400` instead of `500`.\n  * Response bodies are reliably stripped on `HEAD` requests.\n  * Added a default catcher for `504: Gateway Timeout`.\n  * Configuration information is logged in all environments.\n  * Use of `unsafe` was reduced from 9 to 2 in core library.\n  * [`FormItems`] now parses empty keys and values as well as keys without\n    values.\n  * Added [`Config::active()`] as a shorthand for\n    `Config::new(Environment::active()?)`.\n  * Address/port binding errors at launch are detected and explicitly emitted.\n  * [`Flash`] cookies are cleared only after they are inspected.\n  * `Sync` bound on [`AdHoc::on_attach()`], [`AdHoc::on_launch()`] was removed.\n  * [`AdHoc::on_attach()`], [`AdHoc::on_launch()`] accept an `FnOnce`.\n  * Added [`Config::root_relative()`] for retrieving paths relative to the\n    configuration file.\n  * Added [`Config::tls_enabled()`] for determining whether TLS is actively\n    enabled.\n  * ASCII color codes are not emitted on versions of Windows that do not support\n    them.\n  * Added FLAC (`audio/flac`), Icon (`image/x-icon`), WEBA (`audio/webm`), TIFF\n    (`image/tiff`), AAC (`audio/aac`), Calendar (`text/calendar`), MPEG\n    (`video/mpeg`), TAR (`application/x-tar`), GZIP (`application/gzip`), MOV\n    (`video/quicktime`), MP4 (`video/mp4`), ZIP (`application/zip`) as known\n    media types.\n  * Added `.weba` (`WEBA`), `.ogv` (`OGG`), `.mp4` (`MP4`), `.mpeg4` (`MP4`),\n    `.aac` (`AAC`), `.ics` (`Calendar`), `.bin` (`Binary`), `.mpg` (`MPEG`),\n    `.mpeg` (`MPEG`), `.tar` (`TAR`), `.gz` (`GZIP`), `.tif` (`TIFF`), `.tiff`\n    (`TIFF`), `.mov` (`MOV`) as known extensions.\n  * Interaction between route attributes and declarative macros has been\n    improved.\n  * Generated code now logs through logging infrastructures as opposed to using\n    `println!`.\n  * Routing has been optimized by caching routing metadata.\n  * [`Form`] and [`LenientForm`] can be publicly constructed.\n  * Console coloring uses default terminal colors instead of white.\n  * Console coloring is consistent across all messages.\n  * `i128` and `u128` now implement [`FromParam`], [`FromFormValue`].\n  * The `base64` dependency was updated to `0.10`.\n  * The `log` dependency was updated to `0.4`.\n  * The `handlebars` dependency was updated to `1.0`.\n  * The `tera` dependency was updated to `0.11`.\n  * The `uuid` dependency was updated to `0.7`.\n  * The `rustls` dependency was updated to `0.14`.\n  * The `cookie` dependency was updated to `0.11`.\n\n[Tera templates example]: https://github.com/rwf2/Rocket/tree/v0.4/examples/tera_templates\n[`FormItems`]: https://api.rocket.rs/v0.4/rocket/request/enum.FormItems.html\n[`Config::active()`]: https://api.rocket.rs/v0.4/rocket/config/struct.Config.html#method.active\n[`Flash`]: https://api.rocket.rs/v0.4/rocket/response/struct.Flash.html\n[`AdHoc::on_attach()`]: https://api.rocket.rs/v0.4/rocket/fairing/struct.AdHoc.html#method.on_attach\n[`AdHoc::on_launch()`]: https://api.rocket.rs/v0.4/rocket/fairing/struct.AdHoc.html#method.on_launch\n[`Config::root_relative()`]: https://api.rocket.rs/v0.4/rocket/struct.Config.html#method.root_relative\n[`Config::tls_enabled()`]: https://api.rocket.rs/v0.4/rocket/struct.Config.html#method.tls_enabled\n[`rocket_codegen`]: https://api.rocket.rs/v0.4/rocket_codegen/index.html\n[`FromParam`]: https://api.rocket.rs/v0.4/rocket/request/trait.FromParam.html\n[`FromFormValue`]: https://api.rocket.rs/v0.4/rocket/request/trait.FromFormValue.html\n[`Data`]: https://api.rocket.rs/v0.4/rocket/struct.Data.html\n\n## Infrastructure\n\n  * All documentation is versioned.\n  * Previous, current, and development versions of all documentation are hosted.\n  * The repository was reorganized with top-level directories of `core` and\n    `contrib`.\n  * The `http` module was split into its own `rocket_http` crate. This is an\n    internal change only.\n  * All uses of `unsafe` are documented with informal proofs of correctness.\n\n# Version 0.3.16 (Aug 24, 2018)\n\n## Codegen\n\n  * Codegen was updated for `2018-08-23` nightly.\n  * Minimum required `rustc` is `1.30.0-nightly 2018-08-23`.\n\n## Core\n\n  * Force close only the read end of connections. This allows responses to be\n    sent even when the client transmits more data than expected.\n\n## Docs\n\n  * Add details on retrieving configuration extras to guide.\n\n# Version 0.3.15 (Jul 16, 2018)\n\n## Codegen\n\n  * The `#[catch]` decorator and `catchers!` macro were introduced, replacing\n    `#[error]` and `errors!`.\n  * The `#[error]` decorator and `errors!` macro were deprecated.\n  * Codegen was updated for `2018-07-15` nightly.\n  * Minimum required `rustc` is `1.29.0-nightly 2018-07-15`.\n\n# Version 0.3.14 (Jun 22, 2018)\n\n## Codegen\n\n  * Codegen was updated for `2018-06-22` nightly.\n  * Minimum required `rustc` is `1.28.0-nightly 2018-06-22`.\n\n# Version 0.3.13 (Jun 16, 2018)\n\n## Codegen\n\n  * Codegen was updated for `2018-06-12` nightly.\n  * Minimum required `rustc` is `1.28.0-nightly 2018-06-12`.\n\n# Version 0.3.12 (May 31, 2018)\n\n## Codegen\n\n  * Codegen was updated for `2018-05-30` nightly.\n  * Minimum required `rustc` is `1.28.0-nightly 2018-05-30`.\n\n# Version 0.3.11 (May 19, 2018)\n\n## Core\n\n  * Core was updated for `2018-05-18` nightly.\n\n## Infrastructure\n\n  * Fixed injection of dependencies for codegen compile-fail tests.\n\n# Version 0.3.10 (May 05, 2018)\n\n## Core\n\n  * Fixed parsing of nested TOML structures in config environment variables.\n\n## Codegen\n\n  * Codegen was updated for `2018-05-03` nightly.\n  * Minimum required `rustc` is `1.27.0-nightly 2018-05-04`.\n\n## Contrib\n\n  * Contrib was updated for `2018-05-03` nightly.\n\n## Docs\n\n  * Fixed database pool type in state guide.\n\n# Version 0.3.9 (Apr 26, 2018)\n\n## Core\n\n  * Core was updated for `2018-04-26` nightly.\n  * Minimum required `rustc` is `1.27.0-nightly 2018-04-26`.\n  * Managed state retrieval cost was reduced to an unsynchronized `HashMap`\n    lookup.\n\n## Codegen\n\n  * Codegen was updated for `2018-04-26` nightly.\n  * Minimum required `rustc` is `1.27.0-nightly 2018-04-26`.\n\n## Contrib\n\n  * A 512-byte buffer is preallocated when deserializing JSON, improving\n    performance.\n\n## Docs\n\n  * Fixed various typos in rustdocs and guide.\n\n# Version 0.3.8 (Apr 07, 2018)\n\n## Codegen\n\n  * Codegen was updated for `2018-04-06` nightly.\n  * Minimum required `rustc` is `1.27.0-nightly 2018-04-06`.\n\n# Version 0.3.7 (Apr 03, 2018)\n\n## Core\n\n  * Fixed a bug where incoming request URIs would match routes with the same\n    path prefix and suffix and ignore the rest.\n  * Added known media types for WASM, WEBM, OGG, and WAV.\n  * Fixed fragment URI parsing.\n\n## Codegen\n\n  * Codegen was updated for `2018-04-03` nightly.\n  * Minimum required `rustc` is `1.27.0-nightly 2018-04-03`.\n\n## Contrib\n\n  * JSON data is read eagerly, improving deserialization performance.\n\n## Docs\n\n  * Database example and docs were updated for Diesel 1.1.\n  * Removed outdated README performance section.\n  * Fixed various typos in rustdocs and guide.\n\n## Infrastructure\n\n  * Removed gates for stabilized features: `iterator_for_each`, `i128_type`,\n    `conservative_impl_trait`, `never_type`.\n  * Travis now tests in both debug and release mode.\n\n# Version 0.3.6 (Jan 12, 2018)\n\n## Core\n\n  * `Rocket.state()` method was added to retrieve managed state from `Rocket`\n    instances.\n  * Nested calls to `Rocket.attach()` are now handled correctly.\n  * JSON API (`application/vnd.api+json`) is now a known media type.\n  * Uncached markers for `ContentType` and `Accept` headers are properly\n    preserved on `Request.clone()`.\n  * Minimum required `rustc` is `1.25.0-nightly 2018-01-12`.\n\n## Codegen\n\n  * Codegen was updated for `2017-12-22` nightly.\n  * Minimum required `rustc` is `1.24.0-nightly 2017-12-22`.\n\n## Docs\n\n  * Fixed typo in state guide: ~~simple~~ simply.\n  * Database example and docs were updated for Diesel 1.0.\n\n## Infrastructure\n\n  * Shell scripts now use `git grep` instead of `egrep` for faster searching.\n\n# Version 0.3.5 (Dec 18, 2017)\n\n## Codegen\n\n  * Codegen was updated for `2017-12-17` nightly.\n  * Minimum required `rustc` is `1.24.0-nightly 2017-12-17`.\n\n# Version 0.3.4 (Dec 14, 2017)\n\n## Core\n\n  * `NamedFile`'s `Responder` implementation now uses a sized body when the\n    file's length is known.\n  * `#[repr(C)]` is used on `str` wrappers to guarantee correct structure layout\n    across platforms.\n  * A `status::BadRequest` `Responder` was added.\n\n## Codegen\n\n  * Codegen was updated for `2017-12-13` nightly.\n  * Minimum required `rustc` is `1.24.0-nightly 2017-12-13`.\n\n## Docs\n\n  * The rustdoc `html_root_url` now points to the correct address.\n  * Fixed typo in fairings guide: ~~event~~ events.\n  * Fixed typo in `Outcome` docs: ~~users~~ Users.\n\n# Version 0.3.3 (Sep 25, 2017)\n\n## Core\n\n  * `Config`'s `Debug` implementation now respects formatting options.\n  * `Cow<str>` now implements `FromParam`.\n  * `Vec<u8>` now implements `Responder`.\n  * Added a `Binary` media type for `application/octet-stream`.\n  * Empty fairing collections are no longer logged.\n  * Emojis are no longer emitted to non-terminals.\n  * Minimum required `rustc` is `1.22.0-nightly 2017-09-13`.\n\n## Codegen\n\n  * Improved \"missing argument in handler\" compile-time error message.\n  * Codegen was updated for `2017-09-25` nightly.\n  * Minimum required `rustc` is `1.22.0-nightly 2017-09-25`.\n\n## Docs\n\n  * Fixed typos in site overview: ~~by~~ be, ~~`Reponder`~~ `Responder`.\n  * Markdown indenting was adjusted for CommonMark.\n\n## Infrastructure\n\n  * Shell scripts handle paths with spaces.\n\n# Version 0.3.2 (Aug 15, 2017)\n\n## Core\n\n  * Added conversion methods from and to `Box<UncasedStr>`.\n\n## Codegen\n\n  * Lints were removed due to compiler instability. Lints will likely return as\n    a separate `rocket_lints` crate.\n\n# Version 0.3.1 (Aug 11, 2017)\n\n## Core\n\n  * Added support for ASCII colors on modern Windows consoles.\n  * Form field renames can now include _any_ valid characters, not just idents.\n\n## Codegen\n\n  * Ignored named route parameters are now allowed (`_ident`).\n  * Fixed issue where certain paths would cause a lint `assert!` to fail\n    ([#367](https://github.com/rwf2/Rocket/issues/367)).\n  * Lints were updated for `2017-08-10` nightly.\n  * Minimum required `rustc` is `1.21.0-nightly (2017-08-10)`.\n\n## Contrib\n\n  * Tera errors that were previously skipped internally are now emitted.\n\n## Documentation\n\n  * Typos were fixed across the board.\n\n# Version 0.3.0 (Jul 14, 2017)\n\n## New Features\n\nThis release includes the following new features:\n\n  * [Fairings], Rocket's structure middleware, were introduced.\n  * [Native TLS support] was introduced.\n  * [Private cookies] were introduced.\n  * A [`MsgPack`] type has been added to [`contrib`] for simple consumption and\n    returning of MessagePack data.\n  * Launch failures ([`LaunchError`]) from [`Rocket::launch()`] are now returned\n    for inspection without panicking.\n  * Routes without query parameters now match requests with or without query\n    parameters.\n  * [Default rankings] range from -4 to -1, preferring static paths and routes\n    with query string matches.\n  * A native [`Accept`] header structure was added.\n  * The [`Accept`] request header can be retrieved via [`Request::accept()`].\n  * Incoming form fields [can be renamed] via a new `#[form(field = \"name\")]`\n    structure field attribute.\n  * All active routes can be retrieved via [`Rocket::routes()`].\n  * [`Response::body_string()`] was added to retrieve the response body as a\n    `String`.\n  * [`Response::body_bytes()`] was added to retrieve the response body as a\n    `Vec<u8>`.\n  * [`Response::content_type()`] was added to easily retrieve the Content-Type\n    header of a response.\n  * Size limits on incoming data are [now\n    configurable](https://rocket.rs/v0.3/guide/configuration/#data-limits).\n  * [`Request::limits()`] was added to retrieve incoming data limits.\n  * Responders may dynamically adjust their response based on the incoming\n    request.\n  * [`Request::guard()`] was added for simple retrieval of request guards.\n  * [`Request::route()`] was added to retrieve the active route, if any.\n  * `&Route` is now a request guard.\n  * The base mount path of a [`Route`] can be retrieved via `Route::base` or\n    `Route::base()`.\n  * [`Cookies`] supports _private_ (authenticated encryption) cookies, encrypted\n    with the `secret_key` config key.\n  * `Config::{development, staging, production}` constructors were added for\n    [`Config`].\n  * [`Config::get_datetime()`] was added to retrieve an extra as a `Datetime`.\n  * Forms can be now parsed _leniently_ via the new [`LenientForm`] data guard.\n  * The `?` operator can now be used with `Outcome`.\n  * Quoted string, array, and table  based [configuration parameters] can be set\n    via environment variables.\n  * Log coloring is disabled when `stdout` is not a TTY.\n  * [`FromForm`] is implemented for `Option<T: FromForm>`, `Result<T: FromForm,\n    T::Error>`.\n  * The [`NotFound`] responder was added for simple **404** response\n    construction.\n\n[Fairings]: https://rocket.rs/v0.3/guide/fairings/\n[Native TLS support]: https://rocket.rs/v0.3/guide/configuration/#configuring-tls\n[Private cookies]: https://rocket.rs/v0.3/guide/requests/#private-cookies\n[can be renamed]: https://rocket.rs/v0.3/guide/requests/#field-renaming\n[`MsgPack`]: https://api.rocket.rs/v0.3/rocket_contrib/struct.MsgPack.html\n[`Rocket::launch()`]: https://api.rocket.rs/v0.3/rocket/struct.Rocket.html#method.launch\n[`LaunchError`]: https://api.rocket.rs/v0.3/rocket/error/struct.LaunchError.html\n[Default rankings]: https://api.rocket.rs/v0.3/rocket/struct.Route.html\n[`Route`]: https://api.rocket.rs/v0.3/rocket/struct.Route.html\n[`Accept`]: https://api.rocket.rs/v0.3/rocket/http/struct.Accept.html\n[`Request::accept()`]: https://api.rocket.rs/v0.3/rocket/struct.Request.html#method.accept\n[`contrib`]: https://api.rocket.rs/v0.3/rocket_contrib/\n[`Rocket::routes()`]: https://api.rocket.rs/v0.3/rocket/struct.Rocket.html#method.routes\n[`Response::body_string()`]: https://api.rocket.rs/v0.3/rocket/struct.Response.html#method.body_string\n[`Response::body_bytes()`]: https://api.rocket.rs/v0.3/rocket/struct.Response.html#method.body_bytes\n[`Response::content_type()`]: https://api.rocket.rs/v0.3/rocket/struct.Response.html#method.content_type\n[`Request::guard()`]: https://api.rocket.rs/v0.3/rocket/struct.Request.html#method.guard\n[`Request::limits()`]: https://api.rocket.rs/v0.3/rocket/struct.Request.html#method.limits\n[`Request::route()`]: https://api.rocket.rs/v0.3/rocket/struct.Request.html#method.route\n[`Config`]: https://api.rocket.rs/v0.3/rocket/struct.Config.html\n[`Cookies`]: https://api.rocket.rs/v0.3/rocket/http/enum.Cookies.html\n[`Config::get_datetime()`]: https://api.rocket.rs/v0.3/rocket/struct.Config.html#method.get_datetime\n[`LenientForm`]: https://api.rocket.rs/v0.3/rocket/request/struct.LenientForm.html\n[configuration parameters]: https://api.rocket.rs/v0.3/rocket/config/index.html#environment-variables\n[`NotFound`]: https://api.rocket.rs/v0.3/rocket/response/status/struct.NotFound.html\n\n## Breaking Changes\n\nThis release includes many breaking changes. These changes are listed below\nalong with a short note about how to handle the breaking change in existing\napplications.\n\n  * **`session_key` was renamed to `secret_key`, requires a 256-bit base64 key**\n\n    It's unlikely that `session_key` was previously used. If it was, rename\n    `session_key` to `secret_key`. Generate a random 256-bit base64 key using a\n    tool like openssl: `openssl rand -base64 32`.\n\n  * **The `&Cookies` request guard has been removed in favor of `Cookies`**\n\n    Change `&Cookies` in a request guard position to `Cookies`.\n\n  * **`Rocket::launch()` now returns a `LaunchError`, doesn't panic.**\n\n    For the old behavior, suffix a call to `.launch()` with a semicolon:\n    `.launch();`.\n\n  * **Routes without query parameters match requests with or without query\n    parameters.**\n\n    There is no workaround, but this change may allow manual ranks from routes\n    to be removed.\n\n  * **The `format` route attribute on non-payload requests matches against the\n    Accept header.**\n\n    Excepting a custom request guard, there is no workaround. Previously,\n    `format` always matched against the Content-Type header, regardless of\n    whether the request method indicated a payload or not.\n\n  * **A type of `&str` can no longer be used in form structures or parameters.**\n\n    Use the new [`&RawStr`] type instead.\n\n  * **`ContentType` is no longer a request guard.**\n\n    Use `&ContentType` instead.\n\n  * **`Request::content_type()` returns `&ContentType` instead of\n    `ContentType`.**\n\n    Use `.clone()` on `&ContentType` if a type of `ContentType` is required.\n\n  * **`Response::header_values()` was removed. `Response::headers()` now returns\n    an `&HeaderMap`.**\n\n    A call to `Response::headers()` can be replaced with\n    `Response::headers().iter()`. A call to `Response::header_values(name)` can\n    be replaced with `Response::headers().get(name)`.\n\n  * **Route collisions result in a hard error and panic.**\n\n    There is no workaround. Previously, route collisions were a warning.\n\n  * **The [`IntoOutcome`] trait has been expanded and made more flexible.**\n\n    There is no workaround. `IntoOutcome::into_outcome()` now takes a `Failure`\n    value to use. `IntoOutcome::or_forward()` was added to return a `Forward`\n    outcome if `self` indicates an error.\n\n  * **The 'testing' feature was removed.**\n\n    Remove `features = [\"testing\"]` from `Cargo.toml`. Use the new [`local`]\n    module for testing.\n\n  * **`serde` was updated to 1.0.**\n\n    There is no workaround. Ensure all dependencies rely on `serde` `1.0`.\n\n  * **`config::active()` was removed.**\n\n    Use [`Rocket::config()`] to retrieve the configuration before launch. If\n    needed, use [managed state] to store config information for later use.\n\n  * **The [`Responder`] trait has changed.**\n\n    `Responder::respond(self)` was removed in favor of\n    `Responder::respond_to(self, &Request)`. Responders may dynamically adjust\n    their response based on the incoming request.\n\n  * **`Outcome::of(Responder)` was removed while `Outcome::from(&Request,\n    Responder)` was added.**\n\n    Use `Outcome::from(..)` instead of `Outcome::of(..)`.\n\n  * **Usage of templates requires `Template::fairing()` to be attached.**\n\n    Call `.attach(Template::fairing())` on the application's Rocket instance\n    before launching.\n\n  * **The `Display` implementation of `Template` was removed.**\n\n    Use [`Template::show()`] to render a template directly.\n\n  * **`Request::new()` is no longer exported.**\n\n    There is no workaround.\n\n  * **The [`FromForm`] trait has changed.**\n\n    `Responder::from_form_items(&mut FormItems)` was removed in favor of\n    `Responder::from_form(&mut FormItems, bool)`. The second parameter indicates\n    whether parsing should be strict (if `true`) or lenient (if `false`).\n\n  * **`LoggingLevel` was removed as a root reexport.**\n\n    It can now be imported from `rocket::config::LoggingLevel`.\n\n  * **An `Io` variant was added to [`ConfigError`].**\n\n    Ensure `match`es on `ConfigError` include an `Io` variant.\n\n  * **[`ContentType::from_extension()`] returns an `Option<ContentType>`.**\n\n    For the old behavior, use `.unwrap_or(ContentType::Any)`.\n\n  * **The `IntoValue` config trait was removed in favor of `Into<Value>`.**\n\n    There is no workaround. Use `Into<Value>` as necessary.\n\n  * **The `rocket_contrib::JSON` type has been renamed to\n    [`rocket_contrib::Json`].**\n\n    Use `Json` instead of `JSON`.\n\n  * **All structs in the [`content`] module use TitleCase names.**\n\n    Use `Json`, `Xml`, `Html`, and `Css` instead of `JSON`, `XML`, `HTML`, and\n    `CSS`, respectively.\n\n[`&RawStr`]: https://api.rocket.rs/v0.3/rocket/http/struct.RawStr.html\n[`IntoOutcome`]: https://api.rocket.rs/v0.3/rocket/outcome/trait.IntoOutcome.html\n[`local`]: https://api.rocket.rs/v0.3/rocket/local/index.html\n[`Rocket::config()`]: https://api.rocket.rs/v0.3/rocket/struct.Rocket.html#method.config\n[managed state]: https://rocket.rs/v0.3/guide/state/\n[`Responder`]: https://api.rocket.rs/v0.3/rocket/response/trait.Responder.html\n[`Template::show()`]: https://api.rocket.rs/v0.3/rocket_contrib/struct.Template.html#method.show\n[`FromForm`]: https://api.rocket.rs/v0.3/rocket/request/trait.FromForm.html\n[`ConfigError`]: https://api.rocket.rs/v0.3/rocket/config/enum.ConfigError.html\n[`ContentType::from_extension()`]: https://api.rocket.rs/v0.3/rocket/http/struct.ContentType.html#method.from_extension\n[`rocket_contrib::Json`]: https://api.rocket.rs/v0.3/rocket_contrib/struct.Json.html\n[`content`]: https://api.rocket.rs/v0.3/rocket/response/content/index.html\n\n## General Improvements\n\nIn addition to new features, Rocket saw the following improvements:\n\n  * \"Rocket\" is now capitalized in the `Server` HTTP header.\n  * The generic parameter of `rocket_contrib::Json` defaults to `json::Value`.\n  * The trailing '...' in the launch message was removed.\n  * The launch message prints regardless of the config environment.\n  * For debugging, `FromData` is implemented for `Vec<u8>` and `String`.\n  * The port displayed on launch is the port resolved, not the one configured.\n  * The `uuid` dependency was updated to `0.5`.\n  * The `base64` dependency was updated to `0.6`.\n  * The `toml` dependency was updated to `0.4`.\n  * The `handlebars` dependency was updated to `0.27`.\n  * The `tera` dependency was updated to `0.10`.\n  * [`yansi`] is now used for all terminal coloring.\n  * The `dev` `rustc` release channel is supported during builds.\n  * [`Config`] is now exported from the root.\n  * [`Request`] implements `Clone` and `Debug`.\n  * The `workers` config parameter now defaults to `num_cpus * 2`.\n  * Console logging for table-based config values is improved.\n  * `PartialOrd`, `Ord`, and `Hash` are now implemented for [`State`].\n  * The format of a request is always logged when available.\n  * Route matching on `format` now functions as documented.\n\n[`yansi`]: https://crates.io/crates/yansi\n[`Request`]: https://api.rocket.rs/v0.3/rocket/struct.Request.html\n[`State`]: https://api.rocket.rs/v0.3/rocket/struct.State.html\n\n## Infrastructure\n\n  * All examples include a test suite.\n  * The `master` branch now uses a `-dev` version number.\n\n# Version 0.2.8 (Jun 01, 2017)\n\n## Codegen\n\n  * Lints were updated for `2017-06-01` nightly.\n  * Minimum required `rustc` is `1.19.0-nightly (2017-06-01)`.\n\n# Version 0.2.7 (May 26, 2017)\n\n## Codegen\n\n  * Codegen was updated for `2017-05-26` nightly.\n\n# Version 0.2.6 (Apr 17, 2017)\n\n## Codegen\n\n  * Allow `k` and `v` to be used as fields in `FromForm` structures by avoiding\n    identifier collisions ([#265]).\n\n[#265]: https://github.com/rwf2/Rocket/issues/265\n\n# Version 0.2.5 (Apr 16, 2017)\n\n## Codegen\n\n  * Lints were updated for `2017-04-15` nightly.\n  * Minimum required `rustc` is `1.18.0-nightly (2017-04-15)`.\n\n# Version 0.2.4 (Mar 30, 2017)\n\n## Codegen\n\n  * Codegen was updated for `2017-03-30` nightly.\n  * Minimum required `rustc` is `1.18.0-nightly (2017-03-30)`.\n\n# Version 0.2.3 (Mar 22, 2017)\n\n## Fixes\n\n  * Multiple header values for the same header name are now properly preserved\n    (#223).\n\n## Core\n\n  * The `get_slice` and `get_table` methods were added to `Config`.\n  * The `pub_restricted` feature has been stabilized!\n\n## Codegen\n\n  * Lints were updated for `2017-03-20` nightly.\n  * Minimum required `rustc` is `1.17.0-nightly (2017-03-22)`.\n\n## Infrastructure\n\n  * The test script now denies trailing whitespace.\n\n# Version 0.2.2 (Feb 26, 2017)\n\n## Codegen\n\n  * Lints were updated for `2017-02-25`  and `2017-02-26` nightlies.\n  * Minimum required `rustc` is `1.17.0-nightly (2017-02-26)`.\n\n# Version 0.2.1 (Feb 24, 2017)\n\n## Core Fixes\n\n  * `Flash` cookie deletion functions as expected regardless of the path.\n  * `config` properly accepts IPv6 addresses.\n  * Multiple `Set-Cookie` headers are properly set.\n\n## Core Improvements\n\n  * `Display` and `Error` were implemented for `ConfigError`.\n  * `webp`, `ttf`, `otf`, `woff`, and `woff2` were added as known content types.\n  * Routes are presorted for faster routing.\n  * `into_bytes` and `into_inner` methods were added to `Body`.\n\n## Codegen\n\n  * Fixed `unmanaged_state` lint so that it works with prefilled type aliases.\n\n## Contrib\n\n  * Better errors are emitted on Tera template parse errors.\n\n## Documentation\n\n  * Fixed typos in `manage` and `JSON` docs.\n\n## Infrastructure\n\n  * Updated doctests for latest Cargo nightly.\n\n# Version 0.2.0 (Feb 06, 2017)\n\nDetailed release notes for v0.2 can also be found on\n[rocket.rs](https://rocket.rs/v0.3/news/2017-02-06-version-0.2/).\n\n## New Features\n\nThis release includes the following new features:\n\n  * Introduced managed state.\n  * Added lints that warn on unmanaged state and unmounted routes.\n  * Added the ability to set configuration parameters via environment variables.\n  * `Config` structures can be built via `ConfigBuilder`, which follows the\n    builder pattern.\n  * Logging can be enabled or disabled on custom configuration via a second\n    parameter to the `Rocket::custom` method.\n  * `name` and `value` methods were added to `Header` to retrieve the name and\n    value of a header.\n  * A new configuration parameter, `workers`, can be used to set the number of\n    threads Rocket uses.\n  * The address of the remote connection is available via `Request.remote()`.\n    Request preprocessing overrides remote IP with value from the `X-Real-IP`\n    header, if present.\n  * During testing, the remote address can be set via `MockRequest.remote()`.\n  * The `SocketAddr` request guard retrieves the remote address.\n  * A `UUID` type has been added to `contrib`.\n  * `rocket` and `rocket_codegen` will refuse to build with an incompatible\n    nightly version and emit nice error messages.\n  * Major performance and usability improvements were upstreamed to the `cookie`\n    crate, including the addition of a `CookieBuilder`.\n  * When a checkbox isn't present in a form, `bool` types in a `FromForm`\n    structure will parse as `false`.\n  * The `FormItems` iterator can be queried for a complete parse via `completed`\n    and `exhausted`.\n  * Routes for `OPTIONS` requests can be declared via the `options` decorator.\n  * Strings can be percent-encoded via `URI::percent_encode()`.\n\n## Breaking Changes\n\nThis release includes several breaking changes. These changes are listed below\nalong with a short note about how to handle the breaking change in existing\napplications.\n\n  * **`Rocket::custom` takes two parameters, the first being `Config` by\n    value.**\n\n    A call in v0.1 of the form `Rocket::custom(&config)` is now\n    `Rocket::custom(config, false)`.\n\n  * **Tera templates are named without their extension.**\n\n    A templated named `name.html.tera` is now simply `name`.\n\n  * **`JSON` `unwrap` method has been renamed to `into_inner`.**\n\n    A call to `.unwrap()` should be changed to `.into_inner()`.\n\n  * **The `map!` macro was removed in favor of the `json!` macro.**\n\n    A call of the form `map!{ \"a\" => b }` can be written as: `json!({ \"a\": b\n    })`.\n\n  * **The `hyper::SetCookie` header is no longer exported.**\n\n    Use the `Cookie` type as an `Into<Header>` type directly.\n\n  * **The `Content-Type` for `String` is now `text/plain`.**\n\n    Use `content::HTML<String>` for HTML-based `String` responses.\n\n  * **`Request.content_type()` returns an `Option<ContentType>`.**\n\n    Use `.unwrap_or(ContentType::Any)` to get the old behavior.\n\n  * **The `ContentType` request guard forwards when the request has no\n    `Content-Type` header.**\n\n    Use an `Option<ContentType>` and `.unwrap_or(ContentType::Any)` for the old\n    behavior.\n\n  * **A `Rocket` instance must be declared _before_ a `MockRequest`.**\n\n    Change the order of the `rocket::ignite()` and `MockRequest::new()` calls.\n\n  * **A route with `format` specified only matches requests with the same\n    format.**\n\n    Previously, a route with a `format` would match requests without a format\n    specified. There is no workaround to this change; simply specify formats\n    when required.\n\n  * **`FormItems` can no longer be constructed directly.**\n\n    Instead of constructing as `FormItems(string)`, construct as\n    `FormItems::from(string)`.\n\n  * **`from_from_string(&str)` in `FromForm` removed in favor of\n    `from_form_items(&mut FormItems)`.**\n\n    Most implementation should be using `FormItems` internally; simply use the\n    passed in `FormItems`. In other cases, the form string can be retrieved via\n    the `inner_str` method of `FormItems`.\n\n  * **`Config::{set, default_for}` are deprecated.**\n\n    Use the `set_{param}` methods instead of `set`, and `new` or `build` in\n    place of `default_for`.\n\n  * **Route paths must be absolute.**\n\n    Prepend a `/` to convert a relative path into an absolute one.\n\n  * **Route paths cannot contain empty segments.**\n\n    Remove any empty segments, including trailing ones, from a route path.\n\n## Bug Fixes\n\nA couple of bugs were fixed in this release:\n\n  * Handlebars partials were not properly registered\n    ([#122](https://github.com/rwf2/Rocket/issues/122)).\n  * `Rocket::custom` did not set the custom configuration as the `active`\n    configuration.\n  * Route path segments containing more than one dynamic parameter were\n    allowed.\n\n## General Improvements\n\nIn addition to new features, Rocket saw the following smaller improvements:\n\n  * Rocket no longer overwrites a catcher's response status.\n  * The `port` `Config` type is now a proper `u16`.\n  * Clippy issues injected by codegen are resolved.\n  * Handlebars was updated to `0.25`.\n  * The `PartialEq` implementation of `Config` doesn't consider the path or\n    secret key.\n  * Hyper dependency updated to `0.10`.\n  * The `Error` type for `JSON as FromData` has been exposed as `SerdeError`.\n  * SVG was added as a known Content-Type.\n  * Serde was updated to `0.9`.\n  * Form parse failure now results in a **422** error code.\n  * Tera has been updated to `0.7`.\n  * `pub(crate)` is used throughout to enforce visibility rules.\n  * Query parameters in routes (`/path?<param>`) are now logged.\n  * Routes with and without query parameters no longer _collide_.\n\n## Infrastructure\n\n  * Testing was parallelized, resulting in 3x faster Travis builds.\n\n# Version 0.1.6 (Jan 26, 2017)\n\n## Infrastructure\n\n  * Hyper version pinned to 0.9.14 due to upstream non-semver breaking change.\n\n# Version 0.1.5 (Jan 14, 2017)\n\n## Core\n\n  * Fixed security checks in `FromSegments` implementation for `PathBuf`.\n\n## Infrastructure\n\n  * `proc_macro` feature removed from examples due to stability.\n\n# Version 0.1.4 (Jan 4, 2017)\n\n## Core\n\n  * Header names are treated as case-preserving.\n\n## Codegen\n\n  * Minimum supported nightly is `2017-01-03`.\n\n# Version 0.1.3 (Dec 31, 2016)\n\n## Core\n\n  * Typo in `Outcome` formatting fixed (Succcess -> Success).\n  * Added `ContentType::CSV`.\n  * Dynamic segments parameters are properly resolved, even when mounted.\n  * Request methods are only overridden via `_method` field on POST.\n  * Form value `String`s are properly decoded.\n\n## Codegen\n\n  * The `_method` field is now properly ignored in `FromForm` derivation.\n  * Unknown Content-Types in `format` no longer result in an error.\n  * Deriving `FromForm` no longer results in a deprecation warning.\n  * Codegen will refuse to build with incompatible rustc, presenting error\n    message and suggestion.\n  * Added `head` as a valid decorator for `HEAD` requests.\n  * Added `route(OPTIONS)` as a valid decorator for `OPTIONS` requests.\n\n## Contrib\n\n  * Templates with the `.tera` extension are properly autoescaped.\n  * Nested template names are properly resolved on Windows.\n  * Template implements `Display`.\n  * Tera dependency updated to version 0.6.\n\n## Docs\n\n  * Todo example requirements clarified in its `README`.\n\n## Testing\n\n  * Tests added for `config`, `optional_result`, `optional_redirect`, and\n    `query_params` examples.\n  * Testing script checks for and disallows tab characters.\n\n## Infrastructure\n\n  * New script (`bump_version.sh`) automates version bumps.\n  * Config script emits error when readlink/readpath support is bad.\n  * Travis badge points to public builds.\n\n# Version 0.1.2 (Dec 24, 2016)\n\n## Codegen\n\n  * Fix `get_raw_segments` index argument in route codegen\n    ([#41](https://github.com/rwf2/Rocket/issues/41)).\n  * Segments params (`<param..>`) respect prefixes.\n\n## Contrib\n\n  * Fix nested template name resolution\n    ([#42](https://github.com/rwf2/Rocket/issues/42)).\n\n## Infrastructure\n\n  * New script (`publish.sh`) automates publishing to crates.io.\n  * New script (`bump_version.sh`) automates version bumps.\n\n# Version 0.1.1 (Dec 23, 2016)\n\n## Core\n\n  * `NamedFile` `Responder` lost its body in the shuffle; it's back!\n\n# Version 0.1.0 (Dec 23, 2016)\n\nThis is the first public release of Rocket!\n\n## Breaking\n\nAll of the mentions to `hyper` types in core Rocket types are no more. Rocket\nnow implements its own `Request` and `Response` types.\n\n  * `ContentType` uses associated constants instead of static methods.\n  * `StatusCode` removed in favor of new `Status` type.\n  * `Response` type alias superseded by `Response` type.\n  * `Responder::respond` no longer takes in hyper type.\n  * `Responder::respond` returns `Response`, takes `self` by move.\n  * `Handler` returns `Outcome` instead of `Response` type alias.\n  * `ErrorHandler` returns `Result`.\n  * All `Hyper*` types were moved to unprefixed versions in `hyper::`.\n  * `MockRequest::dispatch` now returns a `Response` type.\n  * `URIBuf` removed in favor of unified `URI`.\n  * Rocket panics when an illegal, dynamic mount point is used.\n\n## Core\n\n  * Rocket handles `HEAD` requests automatically.\n  * New `Response` and `ResponseBuilder` types.\n  * New `Request`, `Header`, `Status`, and `ContentType` types.\n\n## Testing\n\n  * `MockRequest` allows any type of header.\n  * `MockRequest` allows cookies.\n\n## Codegen\n\n  * Debug output disabled by default.\n  * The `ROCKET_CODEGEN_DEBUG` environment variables enables codegen logging.\n\n# Version 0.0.11 (Dec 11, 2016)\n\n## Streaming Requests\n\nAll incoming request data is now streamed. This resulted in a major change to\nthe Rocket APIs. They are summarized through the following API changes:\n\n  * The `form` route parameter has been removed.\n  * The `data` route parameter has been introduced.\n  * Forms are now handled via the `data` parameter and `Form` type.\n  * Removed the `data` parameter from `Request`.\n  * Added `FromData` conversion trait and default implementation.\n  * `FromData` is used to automatically derive the `data` parameter.\n  * `Responder`s are now final: they cannot forward to other requests.\n  * `Responder`s may only forward to catchers.\n\n## Breaking\n\n  * Request `uri` parameter is private. Use `uri()` method instead.\n  * `form` module moved under `request` module.\n  * `response::data` was renamed to `response::content`.\n  * Introduced `Outcome` with `Success`, `Failure`, and `Forward` variants.\n  * `outcome` module moved to top-level.\n  * `Response` is now a type alias to `Outcome`.\n  * `Empty` `Responder` was removed.\n  * `StatusResponder` removed in favor of `response::status` module.\n\n## Codegen\n\n  * Error handlers can now take 0, 1, or 2 parameters.\n  * `FromForm` derive now works on empty structs.\n  * Lifetimes are now properly stripped in code generation.\n  * Any valid ident is now allowed in single-parameter route parameters.\n\n## Core\n\n  * Route is now cloneable.\n  * `Request` no longer has any lifetime parameters.\n  * `Handler` type now includes a `Data` parameter.\n  * `http` module is public.\n  * `Responder` implemented for `()` type as an empty response.\n  * Add `config::get()` for global config access.\n  * Introduced `testing` module.\n  * `Rocket.toml` allows global configuration via `[global]` table.\n\n## Docs\n\n  * Added a `raw_upload` example.\n  * Added a `pastebin` example.\n  * Documented all public APIs.\n\n## Testing\n\n  * Now building and running tests with `--all-features` flag.\n  * Added appveyor config for Windows CI testing.\n\n# Version 0.0.10 (Oct 03, 2016)\n\n## Breaking\n\n  * Remove `Rocket::new` in favor of `ignite` method.\n  * Remove `Rocket::mount_and_launch` in favor of chaining `mount(..).launch()`.\n  * `mount` and `catch` take `Rocket` type by value.\n  * All types related to HTTP have been moved into `http` module.\n  * `Template::render` in `contrib` now takes context by reference.\n\n## Core\n\n  * Rocket now parses option `Rocket.toml` for configuration, defaulting to sane\n    values.\n  * `ROCKET_ENV` environment variable can be used to specify running environment.\n\n## Docs\n\n  * Document `ContentType`.\n  * Document `Request`.\n  * Add script that builds docs.\n\n## Testing\n\n  * Scripts can now be run from any directory.\n  * Cache Cargo directories in Travis for faster testing.\n  * Check that library version numbers match in testing script.\n\n# Version 0.0.9 (Sep 29, 2016)\n\n## Breaking\n\n  * Rename `response::data_type` to `response::data`.\n\n## Core\n\n  * Rocket interprets `_method` field in forms as the incoming request's method.\n  * Add `Outcome::Bad` to signify responses that failed internally.\n  * Add a `NamedFile` `Responder` type that uses a file's extension for the\n    response's content type.\n  * Add a `Stream` `Responder` for streaming responses.\n\n## Contrib\n\n  * Introduce the `contrib` crate.\n  * Add JSON support via `JSON`, which implements `FromRequest` and `Responder`.\n  * Add templating support via `Template` which implements `Responder`.\n\n## Docs\n\n  * Initial guide-like documentation.\n  * Add documentation, testing, and contributing sections to README.\n\n## Testing\n\n  * Add a significant number of codegen tests.\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 19.0576171875,
          "content": "# Contributing to Rocket\n\n**Please read this document before contributing!**\n\nThank you for contributing! We welcome your contributions in whichever form they\nmay come.\n\nThis document provides guidelines and resources to help you successfully\ncontribute to the project. Rocket is a tool designed to push the envelope of\nusability, security, _and_ performance in web frameworks, and accordingly, our\nquality standards are high. To make the best use of everyone's time and avoid\nwasted efforts, take a moment to understand our expectations and conventions\noutlined here.\n\n## Submitting Pull Requests\n\nBefore creating a new pull request:\n\n  * Read and understand [Code Style Conventions], [Commit Message Guidelines],\n    and [Testing].\n  * If you're resolving an open issue, follow [Resolving an Open Issue].\n  * If you're implementing new functionality, check whether the functionality\n    you're implementing has been proposed before, either as an [issue] or [pull\n    request]. Ensure your PR resolves any previously raised concerns. Then,\n    follow [Implementing an Unproposed Feature].\n  * For everything else, see [Other Common Contributions].\n\nWe aim to keep Rocket's code quality at the highest level. This means that any\ncode you contribute must be:\n\n  * **Commented:** Complex or subtle functionality must be properly commented.\n  * **Documented:** Public items must have doc comments with examples.\n  * **Styled:** Your code must folow the [Code Style Conventions].\n  * **Simple:** Your code should accomplish its task as simply and\n    idiomatically as possible.\n  * **Tested:** You must write (and pass) convincing [tests](#testing) for all\n    new or changed functionality.\n  * **Focused:** Your code should do what it's supposed to and nothing more.\n\n### Resolving an Open Issue\n[Resolving an Open Issue]: #resolving-an-open-issue\n\nIf you spot an open issue that you'd like to resolve:\n\n  1. **First identify if there's a proposed solution to the problem.**\n\n     If there is, proceed to step 2. If there isn't, your first course of\n     action, before writing any code, is to propose a solution. To do so, leave\n     a comment describing your solution in the relevant issue. It's especially\n     useful to see test cases and hypothetical examples. This step is critical:\n     it allows us to identify and resolve concerns with a proposed solution\n     before anyone spends time writing code. It may also allow us to point you\n     in more efficient implementation directions.\n\n  2. **Write a failing test case you expect to pass after resolving the issue.**\n\n     If you can write proper tests cases that fail, do so (see [Testing]). If\n     you cannot, for instance because you're introducing new APIs which can't be\n     used until they exist, write a test case that mocks usage of those APIs. In\n     either case, allow the tests and mock examples to guide your progress.\n\n  3. **Write basic functionality, pass tests, and submit a PR.**\n\n     Think about edge cases to the problem and ensure you have tests for those\n     edge cases. Once your implementation is functionally complete, submit a PR.\n     Don't spend time writing or changing a bunch of documentation just yet.\n\n  4. **Wait for a review, iterate, and polish.**\n\n     If a review doesn't come in a few days, feel free to ping a maintainer.\n     Once somene reviews your PR, integrate their feedback. If the PR solves the\n     issue (which it should because you have passing tests) and fits the project\n     (which it should since you sought feedback _before_ submitting), it will be\n     _conditionally_ approved pending final polish: documentation (rustdocs,\n     guide docs), style improvements, and testing. Your PR will then be merged.\n\n### Implementing an Unproposed Feature\n[Implementing an Unproposed Feature]: #implementing-an-unproposed-feature\n\nFirst and foremost, **please do not submit a PR that implements a new feature\nwithout first proposing a design and seeking feedback.** We take the addition of\nnew features _very_ seriously because they directly impact usability.\n\nTo propose a new feature, create a [new feature request issue] and follow the\ntemplate. Note that certain classes of features require particularly compelling\njustification to be taken into consideration. These include features that:\n\n  * Can be implemented outside of Rocket.\n  * Introduce new dependencies, especially heavier ones.\n  * Only exist to add support for an external crate.\n  * Are too specific to one use-case.\n  * Are overtly complex _and_ have \"simple\" workarounds.\n  * Only partially solve a bigger deficiency.\n\nOnce your feature request is accepted, follow [Resolving an Open Issue].\n\n[new feature request issue]: https://github.com/rwf2/Rocket/issues/new?assignees=&labels=request&projects=&template=feature-request.yml\n\n### Other Common Contributions\n[Other Common Contributions]: #other-common-contributions\n\n  * **Doc fixes, typos, wording improvements.**\n\n    We encourage any of these! Just a submit a PR with your changes. Please\n    preserve the surrounding markdown formatting as much as possible. This\n    typically means keeping lines under 80 characters, keeping table delimiters\n    aligned, and preserving indentation accordingly.\n\n    The guide's source files are at [docs/guide]. Note the following special\n    syntax available in guide markdown:\n\n    - **Cross-linking** pages is accomplished via relative links. Outside\n      of the index, this is: `../{page}#anchor`. For instance, to link to\n      **Quickstart > Running Examples**, use `../quickstart#running-examples`.\n    - **Aliases** are shorthand URLs that start with `@` (e.g, `@api`). They are\n      used throughout the guide to simplify creating versioned URLs. They are\n      replaced at build time with the appropriate versioned instance.\n\n  * **New examples or changes to existing ones.**\n\n    Please follow the [Implementing an Unproposed Feature] process.\n\n  * **Formatting or other purely cosmetic changes.**\n\n    We generally do not accept purely cosmetic changes to the codebase such as\n    style or formatting changes. All PRs must add something substantial to\n    Rocket's functionality, coherence, testing, performance, usability, bug\n    fixes, security, documentation, or overall maintainability.\n\n  * **Advertisements of any nature.**\n\n    We do not accept any contributions that resemble advertisements or\n    promotional content. If you are interested in supporting Rocket, we\n    encourage you to [sponsor the project].\n\n## Testing\n[Testing]: #testing\n\nAll testing happens through [test.sh]. Before submitting a PR, run the script\nand fix any issues. The default mode (passing no arguments or `--default`) will\nusually suffice, but you may also wish to execute additional tests. In\nparticular:\n\n  * If you make changes to `contrib`: `test.sh --contrib`\n  * If you make user-facing API changes or update deps: `test.sh --examples`\n  * If you add or modify feature flags: `test.sh --core`\n  * If you modify codegen: see [UI Tests].\n\nRun `test.sh --help` to get an overview of how to execute the script:\n\n```sh\nUSAGE:\n  ./scripts/test.sh [+<TOOLCHAIN>] [--help|-h] [--<TEST>]\n\nOPTIONS:\n  +<TOOLCHAIN>   Forwarded to Cargo to select toolchain.\n  --help, -h     Print this help message and exit.\n  --<TEST>       Run the specified test suite.\n                 (Run without --<TEST> to run default tests.)\n\nAVAILABLE <TEST> OPTIONS:\n  default\n  all\n  core\n  contrib\n  examples\n  benchmarks\n  testbench\n  ui\n\nEXAMPLES:\n  ./scripts/test.sh                     # Run default tests on current toolchain.\n  ./scripts/test.sh +stable --all       # Run all tests on stable toolchain.\n  ./scripts/test.sh --ui                # Run UI tests on current toolchain.\n```\n\n### Writing Tests\n\nRocket is tested in a variety of ways. This includes via Rust's regular testing\nfacilities such as doctests, unit tests, and integration tests, as well Rocket's\nexamples, testbench, and [UI Tests]:\n\n  - **Examples**: The [`examples`](examples/) directory contains applications\n    that make use of many of Rocket's features. Each example is integration\n    tested using Rocket's built-in [local testing]. This both ensures that\n    typical Rocket code continues to work as expected and serves as a way to\n    detect and resolve user-facing breaking changes.\n\n  - **Testbench**: Rocket's [testbench](testbench/) tests end-to-end server or\n    protocol properties by starting up full Rocket servers to which it\n    dispatches real HTTP requests. Each server is independently written in\n    [testbench/src/servers/](testbench/src/servers/). You're unlikely to need to\n    write a testbench test unless you're modifying low-level details.\n\n  - **UI Tests**: UI tests ensure Rocket's codegen produces meaningful compiler\n    diagnostics. They compile Rocket applications and compare the compiler's\n    output to expected results. If you're changing codegen, you'll need to\n    update or create UI tests. See [UI Tests] for details.\n\nFor any change that affects functionality, we ask that you write a test that\nverifies that functionality. Minimally, this means a unit test, doctest,\nintegration test, or some combination of these. For small changes, unit tests\nwill likely suffice. If the change affects the user in any way, then doctests\nshould be added or modified. And if the change requires using unrelated APIs to\ntest, then an integration test should be added.\n\nAdditionally, the following scenarios require special attention:\n\n  - **Improved Features**\n\n    Modifying an existing example is a great place to write tests for improved\n    features. If you do modify an example, make sure you modify the README in\n    the example directory, too.\n\n  - **New Features**\n\n    For major features, introducing a new example that showcases idiomatic use\n    of the feature can be useful. Make sure you modify the README in the\n    `examples` directory if you do. In addition, all newly introduced public\n    APIs should be fully documented and include doctests as well as unit and\n    integration tests.\n\n  - **Fixing a Bug**\n\n    To avoid regressions, _always_ introduce or modify an integration or\n    testbench test for a bugfix. Integration tests should live in the usual\n    `tests/` directory and be named `short-issue-description-NNNN.rs`, where\n    `NNNN` is the GitHub issue number for the bug. For example,\n    `forward-includes-status-1560.rs`.\n\n[local testing]: https://api.rocket.rs/master/rocket/local/\n\n### UI Tests\n[UI Tests]: #ui-tests\n\nChanges to codegen (i.e, `rocket_codegen` and other `_codegen` crates)\nnecessitate adding and running UI tests, which capture compiler output and\ncompare it against some expected output. UI tests use [`trybuild`].\n\nTests can be found in the `codegen/tests/ui-fail` directories of respective\n`codegen` crates. Each test is symlinked into sibling `ui-fail-stable` and\n`ui-fail-nightly` directories, which also contain the expected error output for\nstable and nightly compilers, respectively. For example:\n\n```\n./core/codegen/tests\n├── ui-fail\n│   ├── async-entry.rs\n│   ├── ...\n│   └── uri_display_type_errors.rs\n├── ui-fail-nightly\n│   ├── async-entry.rs -> ../ui-fail/async-entry.rs\n│   ├── async-entry.stderr\n│   ├── ...\n│   ├── uri_display_type_errors.rs -> ../ui-fail/uri_display_type_errors.rs\n│   └── uri_display_type_errors.stderr\n└── ui-fail-stable\n    ├── async-entry.rs -> ../ui-fail/async-entry.rs\n    ├── async-entry.stderr\n    ├── ...\n    ├── uri_display_type_errors.rs -> ../ui-fail/uri_display_type_errors.rs\n    └── uri_display_type_errors.stderr\n```\n\nIf you make changes to codegen, run the UI tests for stable and nightly with\n`test.sh +stable --ui` and `test.sh +nightly --ui`. If there are failures,\nupdate the outputs with `TRYBUILD=overwrite test.sh +nightly --ui` and\n`TRYBUILD=overwrite test.sh +stable --ui`. Look at the diff to see what's\nchanged. Ensure that error messages properly attribute (i.e., visually underline\nor point to) the source of the error. For example, if a type need to implement a\ntrait, then that type should be underlined. We strive to emit the most helpful\nand descriptive error messages possible.\n\n### API Docs\n\nIf you make changes to documentation, you should build the API docs and verify\nthat your changes look as you expect. API documentation is built with\n[mk-docs.sh] and output to the usual `target/docs` directory. By default, the\nscript will `clean` any existing docs to avoid potential caching issues. To\noverride this behavior, use `mk-docs.sh -d`.\n\n## Code Style Conventions\n[Code Style Conventions]: #code-style-conventions\n\nWe _do not_ use `rustfmt` or `cargo fmt` due to bugs and missing functionality.\nInstead, we ask that you follow the [Rust Style Guide] with the following\nchanges:\n\n**Always separate items with one blank line.**\n\n<table>\n<thead>\n <tr>\n  <th width=\"350px\"><b>✅ Yes</b></th>\n  <th width=\"350px\"><b>No 🚫</b></th>\n </tr>\n</thead>\n<tbody>\n <tr>\n    <td>\n\n```rust\nfn foo() {\n    // ..\n}\n\nfn bar() {\n    // ..\n}\n```\n\n</td>\n<td>\n\n```rust\nfn foo() {\n    // ..\n}\nfn bar() {\n    // ..\n}\n```\n\n</td>\n</tr>\n</tbody>\n</table>\n\n**Prefer a where-clause over block-indented generics.**\n\n<table>\n<thead>\n <tr>\n  <th width=\"350px\"><b>✅ Yes</b></th>\n  <th width=\"350px\"><b>No 🚫</b></th>\n </tr>\n</thead>\n<tbody>\n <tr>\n    <td>\n\n```rust\nfn foo<T, U>(x: Vec<T>, y: Vec<U>)\n    where T: Display, U: Debug\n{\n    // ..\n}\n```\n\n</td>\n<td>\n\n```rust\nfn foo<\n    T: Display,\n    U: Debug,\n>(x: Vec<T>, y: Vec<U>) {\n    // ..\n}\n```\n\n</td>\n</tr>\n</tbody>\n</table>\n\n**For \"short\" where-clauses, follow Rust guidelines. For \"long\" where-clauses,\nblock-indent `where`, place the first bound on the same line as `where`, and\nblock-align the remaining bounds.**\n\n<table>\n<thead>\n <tr>\n  <th width=\"350px\"><b>✅ Yes</b></th>\n  <th width=\"350px\"><b>No 🚫</b></th>\n </tr>\n</thead>\n<tbody>\n <tr>\n    <td>\n\n```rust\nfn foo<T, F, Item, G>(v: Foo<T, F, Item>) -> G\n    where T: for<'x> SomeTrait<'x>\n          F: Fn(Item) -> G,\n          Item: Display + Debug,\n          G: Error,\n{\n    // ..\n}\n```\n\n</td>\n<td>\n\n```rust\nfn foo<T, F, Item, G>(v: Foo<T, F, Item>) -> G\n    where\n        T: for<'x> SomeTrait<'x>\n        F: Fn(Item) -> G,\n        Item: Display + Debug,\n        G: Error,\n{\n    // ..\n}\n```\n\n</td>\n</tr>\n</tbody>\n</table>\n\n**Do not use multi-line imports. Use multiple lines grouped by import kind if\npossible.**\n\n<table>\n<thead>\n <tr>\n  <th width=\"350px\"><b>✅ Yes</b></th>\n  <th width=\"350px\"><b>No 🚫</b></th>\n </tr>\n</thead>\n<tbody>\n <tr>\n    <td>\n\n```rust\nuse foo::{Long, List, Of, Type, Imports};\nuse foo::{some_macro, imports};\n```\n\n</td>\n<td>\n\n```rust\nuse foo::{\n    Long, List, Of, Type, Imports,\n    some_macro, imports,\n};\n```\n\n</td>\n</tr>\n</tbody>\n</table>\n\n**Order imports in order of decreasing \"distance\" to the current module: `std`,\n`core`, and `alloc`, external crates, then current crate. Prefer using `crate`\nrelative imports to `super`. Separate each category with one blank line.**\n\n<table>\n<thead>\n <tr>\n  <th width=\"350px\"><b>✅ Yes</b></th>\n  <th width=\"350px\"><b>No 🚫</b></th>\n </tr>\n</thead>\n<tbody>\n <tr>\n    <td>\n\n```rust\nuse std::{foo, bar};\nuse alloc::{bar, baz};\n\nuse either::Either;\nuse futures::{SomeItem, OtherItem};\n\nuse crate::{item1, item2};\nuse crate::module::item3;\nuse crate::module2::item4;\n```\n\n</td>\n<td>\n\n```rust\nuse crate::{item1, item2};\nuse std::{foo, bar};\nuse either::Either;\nuse alloc::{bar, baz};\nuse futures::{SomeItem, OtherItem};\n\nuse super::{item3, item4};\nuse super::item4;\n```\n\n</td>\n</tr>\n</tbody>\n</table>\n\n## Commit Message Guidelines\n[Commit Message Guidelines]: #commit-message-guidelines\n\nGit commit messages should start with a single-line _header_ of at most 50\ncharacters followed by a body with any number of descriptive paragraphs, with\nlines not to exceed 72 characters, and a footer.\n\nThe **header** must be an imperative statement that precisely describes the\nprimary change made by the commit. The goal is to give the reader a good\nunderstanding of what the commit does via only the header. It should not require\ncontext to understand. It should not include references to git commits or\nissues. Avoid using Markdown in the header if possible.\n\nTypically, the first word in the header will be one of the following:\n\n  * **Fix** - to fix a functional or doc bug\n    - Example: `Fix 'TcpListener': allow 'udp://' prefix.`\n  * **Improve** - for minor feature or doc improvements\n    - Example: `Improve 'FromParam' derive error messages.`\n  * **Introduce** - for major feature introductions\n    - Example: `Introduce WebSocket support.`\n  * **Add**, **Remove** - for changes\n    - Example: `Add 'Foo::new()' constructor.`\n    - Example: `Remove 'Foo::new()'; add 'Foo::build()'.`\n  * **Update** - for crate updates\n    - Example: `Update 'base64' to 0.12.`\n  * **Impl** or **Implement** - for trait implementations\n    - Example: `Implement 'FromForm' for 'ThisNewType'.`\n\nNote how generic words like \"change\" are avoided, and how the headers are\nspecific about the changes they made. You need not limit yourself to this\nvocabulary. When in doubt, consult the `git log` for examples.\n\n| **✅ Yes**                                       | **No 🚫**                                  |\n|--------------------------------------------------|--------------------------------------------|\n| Fix 'FromForm' derive docs typo: 'yis' -> 'yes'. | ~~Change word in docs~~                    |\n| Default 'MsgPack<T>' to named variant.           | ~~Change default to more likely variant.~~ |\n| Fix 'Compact' advice in 'MsgPack' docs.          | ~~Update docs to make sense~~              |\n| Improve 'Sentinel' docs: explain 'Sentry'.       | ~~Add missing doc details.~~               |\n| Fix CI: pin macOS CI 'mysql-client' to '8.4'.    | ~~Fix CI~~                                 |\n| Fix link to 'rocket::build()' in config guide.   | ~~Fix wrong URL in guide (configuration~~) |\n\nThe **body** should describe what the commit does. For example, if the commit\nintroduces a new feature it should describe what the feature enables and how it\nenables it. A body may be unnecessary if the header sufficiently describes the\ncommit. Avoid referencing issues in the body as well: we'll do that in the\nfooter. If you reference a commit, reference it by shorthash only. Feel free to\nuse markdown including lists and code.\n\nFinally, the **footer** is where references to issues should be made. See the\nGitHub's [linked issues] documentation.\n\n[linked issues]: https://docs.github.com/en/issues/tracking-your-work-with-issues/linking-a-pull-request-to-an-issue\n[Rust Style Guide]: https://doc.rust-lang.org/nightly/style-guide/\n[issue]: https://github.com/rwf2/Rocket/issues\n[pull request]: https://github.com/rwf2/Rocket/pulls\n[test.sh]: scripts/test.sh\n[mk-docs.sh]: scripts/mk-docs.sh\n[`trybuild`]: https://docs.rs/trybuild\n[sponsor the project]: https://github.com/sponsors/rwf2\n[docs/guide]: docs/guide\n\n## Licensing\n\nUnless you explicitly state otherwise, any contribution intentionally submitted\nfor inclusion in Rocket by you shall be dual licensed under the MIT License and\nApache License, Version 2.0, without any additional terms or conditions.\n\nThe Rocket website docs are licensed under [separate terms](docs/LICENSE). Any\ncontribution intentionally submitted for inclusion in the Rocket website docs by\nyou shall be licensed under those terms.\n"
        },
        {
          "name": "Cargo.toml",
          "type": "blob",
          "size": 0.666015625,
          "content": "[workspace]\nresolver = \"2\"\nmembers = [\n  \"core/lib/\",\n  \"core/codegen/\",\n  \"core/http/\",\n  \"contrib/db_pools/codegen/\",\n  \"contrib/db_pools/lib/\",\n  \"contrib/sync_db_pools/codegen/\",\n  \"contrib/sync_db_pools/lib/\",\n  \"contrib/dyn_templates/\",\n  \"contrib/ws/\",\n  \"docs/tests\",\n]\n\n[workspace.lints.rust]\nunexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(nightly)'] }\nrust_2018_idioms = \"warn\"\nasync_fn_in_trait = \"allow\"\nrefining_impl_trait = \"allow\"\n# unreachable_pub = \"warn\"\n# single_use_lifetimes = \"warn\"\n# missing_docs = \"warn\"\n\n[workspace.lints.clippy]\ntype_complexity = \"allow\"\nmodule_inception = \"allow\"\nmultiple_bound_locations = \"allow\"\nmanual_range_contains = \"allow\"\n"
        },
        {
          "name": "LICENSE-APACHE",
          "type": "blob",
          "size": 10.580078125,
          "content": "                              Apache License\n                        Version 2.0, January 2004\n                     http://www.apache.org/licenses/\n\nTERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n1. Definitions.\n\n   \"License\" shall mean the terms and conditions for use, reproduction,\n   and distribution as defined by Sections 1 through 9 of this document.\n\n   \"Licensor\" shall mean the copyright owner or entity authorized by\n   the copyright owner that is granting the License.\n\n   \"Legal Entity\" shall mean the union of the acting entity and all\n   other entities that control, are controlled by, or are under common\n   control with that entity. For the purposes of this definition,\n   \"control\" means (i) the power, direct or indirect, to cause the\n   direction or management of such entity, whether by contract or\n   otherwise, or (ii) ownership of fifty percent (50%) or more of the\n   outstanding shares, or (iii) beneficial ownership of such entity.\n\n   \"You\" (or \"Your\") shall mean an individual or Legal Entity\n   exercising permissions granted by this License.\n\n   \"Source\" form shall mean the preferred form for making modifications,\n   including but not limited to software source code, documentation\n   source, and configuration files.\n\n   \"Object\" form shall mean any form resulting from mechanical\n   transformation or translation of a Source form, including but\n   not limited to compiled object code, generated documentation,\n   and conversions to other media types.\n\n   \"Work\" shall mean the work of authorship, whether in Source or\n   Object form, made available under the License, as indicated by a\n   copyright notice that is included in or attached to the work\n   (an example is provided in the Appendix below).\n\n   \"Derivative Works\" shall mean any work, whether in Source or Object\n   form, that is based on (or derived from) the Work and for which the\n   editorial revisions, annotations, elaborations, or other modifications\n   represent, as a whole, an original work of authorship. For the purposes\n   of this License, Derivative Works shall not include works that remain\n   separable from, or merely link (or bind by name) to the interfaces of,\n   the Work and Derivative Works thereof.\n\n   \"Contribution\" shall mean any work of authorship, including\n   the original version of the Work and any modifications or additions\n   to that Work or Derivative Works thereof, that is intentionally\n   submitted to Licensor for inclusion in the Work by the copyright owner\n   or by an individual or Legal Entity authorized to submit on behalf of\n   the copyright owner. For the purposes of this definition, \"submitted\"\n   means any form of electronic, verbal, or written communication sent\n   to the Licensor or its representatives, including but not limited to\n   communication on electronic mailing lists, source code control systems,\n   and issue tracking systems that are managed by, or on behalf of, the\n   Licensor for the purpose of discussing and improving the Work, but\n   excluding communication that is conspicuously marked or otherwise\n   designated in writing by the copyright owner as \"Not a Contribution.\"\n\n   \"Contributor\" shall mean Licensor and any individual or Legal Entity\n   on behalf of whom a Contribution has been received by Licensor and\n   subsequently incorporated within the Work.\n\n2. Grant of Copyright License. Subject to the terms and conditions of\n   this License, each Contributor hereby grants to You a perpetual,\n   worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n   copyright license to reproduce, prepare Derivative Works of,\n   publicly display, publicly perform, sublicense, and distribute the\n   Work and such Derivative Works in Source or Object form.\n\n3. Grant of Patent License. Subject to the terms and conditions of\n   this License, each Contributor hereby grants to You a perpetual,\n   worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n   (except as stated in this section) patent license to make, have made,\n   use, offer to sell, sell, import, and otherwise transfer the Work,\n   where such license applies only to those patent claims licensable\n   by such Contributor that are necessarily infringed by their\n   Contribution(s) alone or by combination of their Contribution(s)\n   with the Work to which such Contribution(s) was submitted. If You\n   institute patent litigation against any entity (including a\n   cross-claim or counterclaim in a lawsuit) alleging that the Work\n   or a Contribution incorporated within the Work constitutes direct\n   or contributory patent infringement, then any patent licenses\n   granted to You under this License for that Work shall terminate\n   as of the date such litigation is filed.\n\n4. Redistribution. You may reproduce and distribute copies of the\n   Work or Derivative Works thereof in any medium, with or without\n   modifications, and in Source or Object form, provided that You\n   meet the following conditions:\n\n   (a) You must give any other recipients of the Work or\n       Derivative Works a copy of this License; and\n\n   (b) You must cause any modified files to carry prominent notices\n       stating that You changed the files; and\n\n   (c) You must retain, in the Source form of any Derivative Works\n       that You distribute, all copyright, patent, trademark, and\n       attribution notices from the Source form of the Work,\n       excluding those notices that do not pertain to any part of\n       the Derivative Works; and\n\n   (d) If the Work includes a \"NOTICE\" text file as part of its\n       distribution, then any Derivative Works that You distribute must\n       include a readable copy of the attribution notices contained\n       within such NOTICE file, excluding those notices that do not\n       pertain to any part of the Derivative Works, in at least one\n       of the following places: within a NOTICE text file distributed\n       as part of the Derivative Works; within the Source form or\n       documentation, if provided along with the Derivative Works; or,\n       within a display generated by the Derivative Works, if and\n       wherever such third-party notices normally appear. The contents\n       of the NOTICE file are for informational purposes only and\n       do not modify the License. You may add Your own attribution\n       notices within Derivative Works that You distribute, alongside\n       or as an addendum to the NOTICE text from the Work, provided\n       that such additional attribution notices cannot be construed\n       as modifying the License.\n\n   You may add Your own copyright statement to Your modifications and\n   may provide additional or different license terms and conditions\n   for use, reproduction, or distribution of Your modifications, or\n   for any such Derivative Works as a whole, provided Your use,\n   reproduction, and distribution of the Work otherwise complies with\n   the conditions stated in this License.\n\n5. Submission of Contributions. Unless You explicitly state otherwise,\n   any Contribution intentionally submitted for inclusion in the Work\n   by You to the Licensor shall be under the terms and conditions of\n   this License, without any additional terms or conditions.\n   Notwithstanding the above, nothing herein shall supersede or modify\n   the terms of any separate license agreement you may have executed\n   with Licensor regarding such Contributions.\n\n6. Trademarks. This License does not grant permission to use the trade\n   names, trademarks, service marks, or product names of the Licensor,\n   except as required for reasonable and customary use in describing the\n   origin of the Work and reproducing the content of the NOTICE file.\n\n7. Disclaimer of Warranty. Unless required by applicable law or\n   agreed to in writing, Licensor provides the Work (and each\n   Contributor provides its Contributions) on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n   implied, including, without limitation, any warranties or conditions\n   of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n   PARTICULAR PURPOSE. You are solely responsible for determining the\n   appropriateness of using or redistributing the Work and assume any\n   risks associated with Your exercise of permissions under this License.\n\n8. Limitation of Liability. In no event and under no legal theory,\n   whether in tort (including negligence), contract, or otherwise,\n   unless required by applicable law (such as deliberate and grossly\n   negligent acts) or agreed to in writing, shall any Contributor be\n   liable to You for damages, including any direct, indirect, special,\n   incidental, or consequential damages of any character arising as a\n   result of this License or out of the use or inability to use the\n   Work (including but not limited to damages for loss of goodwill,\n   work stoppage, computer failure or malfunction, or any and all\n   other commercial damages or losses), even if such Contributor\n   has been advised of the possibility of such damages.\n\n9. Accepting Warranty or Additional Liability. While redistributing\n   the Work or Derivative Works thereof, You may choose to offer,\n   and charge a fee for, acceptance of support, warranty, indemnity,\n   or other liability obligations and/or rights consistent with this\n   License. However, in accepting such obligations, You may act only\n   on Your own behalf and on Your sole responsibility, not on behalf\n   of any other Contributor, and only if You agree to indemnify,\n   defend, and hold each Contributor harmless for any liability\n   incurred by, or claims asserted against, such Contributor by reason\n   of your accepting any such warranty or additional liability.\n\nEND OF TERMS AND CONDITIONS\n\nAPPENDIX: How to apply the Apache License to your work.\n\n   To apply the Apache License to your work, attach the following\n   boilerplate notice, with the fields enclosed by brackets \"[]\"\n   replaced with your own identifying information. (Don't include\n   the brackets!)  The text should be enclosed in the appropriate\n   comment syntax for the file format. We also recommend that a\n   file or class name and description of purpose be included on the\n   same \"printed page\" as the copyright notice for easier\n   identification within third-party archives.\n\nCopyright 2016 Sergio Benitez\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n\thttp://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n"
        },
        {
          "name": "LICENSE-MIT",
          "type": "blob",
          "size": 1.0546875,
          "content": "The MIT License (MIT)\nCopyright (c) 2016 Sergio Benitez\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of\nthis software and associated documentation files (the \"Software\"), to deal in\nthe Software without restriction, including without limitation the rights to\nuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of\nthe Software, and to permit persons to whom the Software is furnished to do so,\nsubject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\nFOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\nCOPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\nIN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\nCONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 4.5048828125,
          "content": "# Rocket\n\n[![Build Status](https://github.com/rwf2/Rocket/workflows/CI/badge.svg)](https://github.com/rwf2/Rocket/actions)\n[![Rocket Homepage](https://img.shields.io/badge/web-rocket.rs-red.svg?style=flat&label=https&colorB=d33847)](https://rocket.rs)\n[![Current Crates.io Version](https://img.shields.io/crates/v/rocket.svg)](https://crates.io/crates/rocket)\n[![Matrix: #rocket:mozilla.org](https://img.shields.io/badge/style-%23rocket:mozilla.org-blue.svg?style=flat&label=[m])](https://chat.mozilla.org/#/room/#rocket:mozilla.org)\n\nRocket is an async web framework for Rust with a focus on usability, security,\nextensibility, and speed.\n\n```rust\n#[macro_use] extern crate rocket;\n\n#[get(\"/<name>/<age>\")]\nfn hello(name: &str, age: u8) -> String {\n    format!(\"Hello, {} year old named {}!\", age, name)\n}\n\n#[launch]\nfn rocket() -> _ {\n    rocket::build().mount(\"/hello\", routes![hello])\n}\n```\n\nVisiting `localhost:8000/hello/John/58`, for example, will trigger the `hello`\nroute resulting in the string `Hello, 58 year old named John!` being sent to the\nbrowser. If an `<age>` string was passed in that can't be parsed as a `u8`, the\nroute won't get called, resulting in a 404 error.\n\n## Documentation\n\nRocket is extensively documented:\n\n  * [Overview]: A brief look at what makes Rocket special.\n  * [Quickstart]: How to get started as quickly as possible.\n  * [Getting Started]: How to start your first Rocket project.\n  * [Guide]: A detailed guide and reference to Rocket.\n  * [API Documentation]: The \"rustdocs\".\n\n[Quickstart]: https://rocket.rs/guide/quickstart\n[Getting Started]: https://rocket.rs/guide/getting-started\n[Overview]: https://rocket.rs/overview/\n[Guide]: https://rocket.rs/guide/\n[API Documentation]: https://api.rocket.rs\n\nDocumentation for the `master` branch is available at https://rocket.rs/master\nand https://api.rocket.rs/master.\n\nDocumentation for major release version `${x}` is available at\n`https://[api.]rocket.rs/v${x}`. For example, the v0.4 docs are available at\nhttps://rocket.rs/v0.4 and https://api.rocket.rs/v0.4.\n\nFinally, API docs for active git branches are available at\n`https://api.rocket.rs/${branch}`. For example, API docs for the `master` branch\nare available at https://api.rocket.rs/master. Branch rustdocs are built and\ndeployed on every commit.\n\n## Examples\n\nThe [examples](examples#readme) directory contains complete crates that showcase\nRocket's features and usage. Each example can be compiled and run with Cargo.\nFor instance, the following sequence of commands builds and runs the `hello`\nexample:\n\n```sh\ncd examples/hello\ncargo run\n```\n\n## Getting Help\n\nIf you find yourself needing help outside of the documentation, you may:\n\n  * Ask questions via [GitHub discussions questions].\n  * Chat with us at [`#rocket:mozilla.org`] on Matrix (join [via Element]).\n\n[`#rocket:mozilla.org`]: https://chat.mozilla.org/#/room/#rocket:mozilla.org\n[via Element]: https://chat.mozilla.org/#/room/#rocket:mozilla.org\n[GitHub discussions questions]: https://github.com/rwf2/Rocket/discussions/categories/questions\n\n## Contributing\n\nContributions are absolutely, positively welcomed and encouraged! If you're\ninterested in contributing code, please first read [CONTRIBUTING] for complete\nguidelines. Additionally, you could:\n\n  1. Submit a feature request or bug report as an [issue].\n  2. Ask for improved documentation as an [issue].\n  3. Comment on [issues that require feedback].\n  4. Answers questions in [GitHub discussions questions].\n  5. Share a project in [GitHub discussions show & tell].\n\n[issue]: https://github.com/rwf2/Rocket/issues\n[issues that require feedback]: https://github.com/rwf2/Rocket/issues?q=is%3Aissue+is%3Aopen+label%3A%22feedback+wanted%22\n[pull requests]: https://github.com/rwf2/Rocket/pulls\n[CONTRIBUTING]: CONTRIBUTING.md\n[GitHub discussions show & tell]: https://github.com/rwf2/Rocket/discussions/categories/show-tell\n\n## License\n\nRocket is licensed under either of the following, at your option:\n\n * Apache License, Version 2.0, ([LICENSE-APACHE](LICENSE-APACHE) or https://www.apache.org/licenses/LICENSE-2.0)\n * MIT License ([LICENSE-MIT](LICENSE-MIT) or https://opensource.org/licenses/MIT)\n\nUnless you explicitly state otherwise, any contribution intentionally submitted\nfor inclusion in Rocket by you shall be dual licensed under the MIT License and\nApache License, Version 2.0, without any additional terms or conditions.\n\nThe Rocket website docs are licensed under [separate terms](docs/LICENSE). Any\ncontribution intentionally submitted for inclusion in the Rocket website docs by\nyou shall be licensed under those terms.\n"
        },
        {
          "name": "benchmarks",
          "type": "tree",
          "content": null
        },
        {
          "name": "contrib",
          "type": "tree",
          "content": null
        },
        {
          "name": "core",
          "type": "tree",
          "content": null
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "scripts",
          "type": "tree",
          "content": null
        },
        {
          "name": "testbench",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}