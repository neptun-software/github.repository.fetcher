{
  "metadata": {
    "timestamp": 1736709443988,
    "page": 63,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjcw",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "rust-embedded/rust-raspberrypi-OS-tutorials",
      "stars": 13867,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 0.4189453125,
          "content": "# editorconfig.org\n\nroot = true\n\n[*]\ncharset = utf-8\nend_of_line = lf\ninsert_final_newline = true\nindent_style = space\ntrim_trailing_whitespace = true\nmax_line_length = 100\n\n[Dockerfile]\nindent_size = 4\n\n[{Makefile,*.mk}]\nindent_style = tab\nindent_size = 8\n\n[*.rb]\nindent_size = 4\n\n[*.rs]\nindent_size = 4\n\n[*.s]\nindent_style = tab\nindent_size = 8\n\n[*.sh]\nindent_size = 4\n\n[*.toml]\nindent_size = 4\n\n[*.{yml,yaml}]\nindent_size = 2\n"
        },
        {
          "name": ".githooks",
          "type": "tree",
          "content": null
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.0986328125,
          "content": "**/target/*\n**/.gdb_history\n**/kernel8.img\n\nnode_modules\n.bundle\n.vendor\n\nGemfile.lock\npackage*.json\n"
        },
        {
          "name": ".prettierignore",
          "type": "blob",
          "size": 0.0615234375,
          "content": "**/*\n!**/*/\n\n**/target/\nnode_modules/\n.vendor/\n\n!*.json\n!*.yml\n"
        },
        {
          "name": ".prettierrc.json",
          "type": "blob",
          "size": 0.919921875,
          "content": "{\n    \"printWidth\": 100,\n    \"tabWidth\": 4,\n    \"useTabs\": false,\n    \"semi\": true,\n    \"singleQuote\": false,\n    \"trailingComma\": \"es5\",\n    \"bracketSpacing\": true,\n    \"jsxBracketSameLine\": false,\n    \"arrowParens\": \"always\",\n    \"requirePragma\": false,\n    \"insertPragma\": false,\n    \"proseWrap\": \"preserve\",\n    \"endOfLine\": \"auto\",\n    \"overrides\": [\n        {\n            \"files\": \"*.rs\",\n            \"options\": {\n                \"printWidth\": 100,\n                \"tabWidth\": 4,\n                \"useTabs\": false,\n                \"semi\": true,\n                \"singleQuote\": false,\n                \"trailingComma\": \"es5\",\n                \"bracketSpacing\": true,\n                \"jsxBracketSameLine\": false,\n                \"arrowParens\": \"always\",\n                \"requirePragma\": false,\n                \"insertPragma\": false,\n                \"proseWrap\": \"preserve\",\n                \"endOfLine\": \"auto\"\n            }\n        }\n    ]\n}\n"
        },
        {
          "name": ".rubocop.yml",
          "type": "blob",
          "size": 0.8056640625,
          "content": "# The behavior of RuboCop can be controlled via the .rubocop.yml\n# configuration file. It makes it possible to enable/disable\n# certain cops (checks) and to alter their behavior if they accept\n# any parameters. The file can be placed either in your home\n# directory or in some project directory.\n#\n# RuboCop will start looking for the configuration file in the directory\n# where the inspected file is and continue its way up to the root directory.\n#\n# See https://github.com/rubocop-hq/rubocop/blob/master/manual/configuration.md\n\nLayout/IndentationWidth:\n    Width: 4\n    AllowedPatterns: ['^\\s*module']\n\nLayout/LineLength:\n    Max: 100\n\nLint/UnusedMethodArgument:\n    AutoCorrect: False\n\nMetrics/AbcSize:\n    Max: 25\n\nMetrics/ClassLength:\n    Enabled: false\n\nMetrics/MethodLength:\n    Max: 20\n\nAllCops:\n    NewCops: enable\n"
        },
        {
          "name": ".ruby-version",
          "type": "blob",
          "size": 0.005859375,
          "content": "3.0.2\n"
        },
        {
          "name": ".rustfmt.toml",
          "type": "blob",
          "size": 0.16796875,
          "content": "newline_style = \"Unix\"\nedition = \"2021\"\nimports_granularity = \"Crate\"\nformat_code_in_doc_comments = true\nnormalize_comments = true\nwrap_comments = true\ncomment_width = 100\n"
        },
        {
          "name": ".vscode",
          "type": "tree",
          "content": null
        },
        {
          "name": "00_before_we_start",
          "type": "tree",
          "content": null
        },
        {
          "name": "01_wait_forever",
          "type": "tree",
          "content": null
        },
        {
          "name": "02_runtime_init",
          "type": "tree",
          "content": null
        },
        {
          "name": "03_hacky_hello_world",
          "type": "tree",
          "content": null
        },
        {
          "name": "04_safe_globals",
          "type": "tree",
          "content": null
        },
        {
          "name": "05_drivers_gpio_uart",
          "type": "tree",
          "content": null
        },
        {
          "name": "06_uart_chainloader",
          "type": "tree",
          "content": null
        },
        {
          "name": "07_timestamps",
          "type": "tree",
          "content": null
        },
        {
          "name": "08_hw_debug_JTAG",
          "type": "tree",
          "content": null
        },
        {
          "name": "09_privilege_level",
          "type": "tree",
          "content": null
        },
        {
          "name": "10_virtual_mem_part1_identity_mapping",
          "type": "tree",
          "content": null
        },
        {
          "name": "11_exceptions_part1_groundwork",
          "type": "tree",
          "content": null
        },
        {
          "name": "12_integrated_testing",
          "type": "tree",
          "content": null
        },
        {
          "name": "13_exceptions_part2_peripheral_IRQs",
          "type": "tree",
          "content": null
        },
        {
          "name": "14_virtual_mem_part2_mmio_remap",
          "type": "tree",
          "content": null
        },
        {
          "name": "15_virtual_mem_part3_precomputed_tables",
          "type": "tree",
          "content": null
        },
        {
          "name": "16_virtual_mem_part4_higher_half_kernel",
          "type": "tree",
          "content": null
        },
        {
          "name": "17_kernel_symbols",
          "type": "tree",
          "content": null
        },
        {
          "name": "18_backtrace",
          "type": "tree",
          "content": null
        },
        {
          "name": "19_kernel_heap",
          "type": "tree",
          "content": null
        },
        {
          "name": "20_timer_callbacks",
          "type": "tree",
          "content": null
        },
        {
          "name": "Gemfile",
          "type": "blob",
          "size": 0.228515625,
          "content": "# frozen_string_literal: true\n\nsource 'https://rubygems.org'\n\ngem 'colorize'\ngem 'elftools'\n\ngroup :uart do\n    gem 'ruby-progressbar'\n    gem 'serialport'\nend\n\ngroup :development do\n    gem 'rubocop', '>= 1.38.0', require: false\nend\n"
        },
        {
          "name": "LICENSE-APACHE",
          "type": "blob",
          "size": 10.5927734375,
          "content": "                              Apache License\n                        Version 2.0, January 2004\n                     http://www.apache.org/licenses/\n\nTERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n1. Definitions.\n\n   \"License\" shall mean the terms and conditions for use, reproduction,\n   and distribution as defined by Sections 1 through 9 of this document.\n\n   \"Licensor\" shall mean the copyright owner or entity authorized by\n   the copyright owner that is granting the License.\n\n   \"Legal Entity\" shall mean the union of the acting entity and all\n   other entities that control, are controlled by, or are under common\n   control with that entity. For the purposes of this definition,\n   \"control\" means (i) the power, direct or indirect, to cause the\n   direction or management of such entity, whether by contract or\n   otherwise, or (ii) ownership of fifty percent (50%) or more of the\n   outstanding shares, or (iii) beneficial ownership of such entity.\n\n   \"You\" (or \"Your\") shall mean an individual or Legal Entity\n   exercising permissions granted by this License.\n\n   \"Source\" form shall mean the preferred form for making modifications,\n   including but not limited to software source code, documentation\n   source, and configuration files.\n\n   \"Object\" form shall mean any form resulting from mechanical\n   transformation or translation of a Source form, including but\n   not limited to compiled object code, generated documentation,\n   and conversions to other media types.\n\n   \"Work\" shall mean the work of authorship, whether in Source or\n   Object form, made available under the License, as indicated by a\n   copyright notice that is included in or attached to the work\n   (an example is provided in the Appendix below).\n\n   \"Derivative Works\" shall mean any work, whether in Source or Object\n   form, that is based on (or derived from) the Work and for which the\n   editorial revisions, annotations, elaborations, or other modifications\n   represent, as a whole, an original work of authorship. For the purposes\n   of this License, Derivative Works shall not include works that remain\n   separable from, or merely link (or bind by name) to the interfaces of,\n   the Work and Derivative Works thereof.\n\n   \"Contribution\" shall mean any work of authorship, including\n   the original version of the Work and any modifications or additions\n   to that Work or Derivative Works thereof, that is intentionally\n   submitted to Licensor for inclusion in the Work by the copyright owner\n   or by an individual or Legal Entity authorized to submit on behalf of\n   the copyright owner. For the purposes of this definition, \"submitted\"\n   means any form of electronic, verbal, or written communication sent\n   to the Licensor or its representatives, including but not limited to\n   communication on electronic mailing lists, source code control systems,\n   and issue tracking systems that are managed by, or on behalf of, the\n   Licensor for the purpose of discussing and improving the Work, but\n   excluding communication that is conspicuously marked or otherwise\n   designated in writing by the copyright owner as \"Not a Contribution.\"\n\n   \"Contributor\" shall mean Licensor and any individual or Legal Entity\n   on behalf of whom a Contribution has been received by Licensor and\n   subsequently incorporated within the Work.\n\n2. Grant of Copyright License. Subject to the terms and conditions of\n   this License, each Contributor hereby grants to You a perpetual,\n   worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n   copyright license to reproduce, prepare Derivative Works of,\n   publicly display, publicly perform, sublicense, and distribute the\n   Work and such Derivative Works in Source or Object form.\n\n3. Grant of Patent License. Subject to the terms and conditions of\n   this License, each Contributor hereby grants to You a perpetual,\n   worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n   (except as stated in this section) patent license to make, have made,\n   use, offer to sell, sell, import, and otherwise transfer the Work,\n   where such license applies only to those patent claims licensable\n   by such Contributor that are necessarily infringed by their\n   Contribution(s) alone or by combination of their Contribution(s)\n   with the Work to which such Contribution(s) was submitted. If You\n   institute patent litigation against any entity (including a\n   cross-claim or counterclaim in a lawsuit) alleging that the Work\n   or a Contribution incorporated within the Work constitutes direct\n   or contributory patent infringement, then any patent licenses\n   granted to You under this License for that Work shall terminate\n   as of the date such litigation is filed.\n\n4. Redistribution. You may reproduce and distribute copies of the\n   Work or Derivative Works thereof in any medium, with or without\n   modifications, and in Source or Object form, provided that You\n   meet the following conditions:\n\n   (a) You must give any other recipients of the Work or\n       Derivative Works a copy of this License; and\n\n   (b) You must cause any modified files to carry prominent notices\n       stating that You changed the files; and\n\n   (c) You must retain, in the Source form of any Derivative Works\n       that You distribute, all copyright, patent, trademark, and\n       attribution notices from the Source form of the Work,\n       excluding those notices that do not pertain to any part of\n       the Derivative Works; and\n\n   (d) If the Work includes a \"NOTICE\" text file as part of its\n       distribution, then any Derivative Works that You distribute must\n       include a readable copy of the attribution notices contained\n       within such NOTICE file, excluding those notices that do not\n       pertain to any part of the Derivative Works, in at least one\n       of the following places: within a NOTICE text file distributed\n       as part of the Derivative Works; within the Source form or\n       documentation, if provided along with the Derivative Works; or,\n       within a display generated by the Derivative Works, if and\n       wherever such third-party notices normally appear. The contents\n       of the NOTICE file are for informational purposes only and\n       do not modify the License. You may add Your own attribution\n       notices within Derivative Works that You distribute, alongside\n       or as an addendum to the NOTICE text from the Work, provided\n       that such additional attribution notices cannot be construed\n       as modifying the License.\n\n   You may add Your own copyright statement to Your modifications and\n   may provide additional or different license terms and conditions\n   for use, reproduction, or distribution of Your modifications, or\n   for any such Derivative Works as a whole, provided Your use,\n   reproduction, and distribution of the Work otherwise complies with\n   the conditions stated in this License.\n\n5. Submission of Contributions. Unless You explicitly state otherwise,\n   any Contribution intentionally submitted for inclusion in the Work\n   by You to the Licensor shall be under the terms and conditions of\n   this License, without any additional terms or conditions.\n   Notwithstanding the above, nothing herein shall supersede or modify\n   the terms of any separate license agreement you may have executed\n   with Licensor regarding such Contributions.\n\n6. Trademarks. This License does not grant permission to use the trade\n   names, trademarks, service marks, or product names of the Licensor,\n   except as required for reasonable and customary use in describing the\n   origin of the Work and reproducing the content of the NOTICE file.\n\n7. Disclaimer of Warranty. Unless required by applicable law or\n   agreed to in writing, Licensor provides the Work (and each\n   Contributor provides its Contributions) on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n   implied, including, without limitation, any warranties or conditions\n   of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n   PARTICULAR PURPOSE. You are solely responsible for determining the\n   appropriateness of using or redistributing the Work and assume any\n   risks associated with Your exercise of permissions under this License.\n\n8. Limitation of Liability. In no event and under no legal theory,\n   whether in tort (including negligence), contract, or otherwise,\n   unless required by applicable law (such as deliberate and grossly\n   negligent acts) or agreed to in writing, shall any Contributor be\n   liable to You for damages, including any direct, indirect, special,\n   incidental, or consequential damages of any character arising as a\n   result of this License or out of the use or inability to use the\n   Work (including but not limited to damages for loss of goodwill,\n   work stoppage, computer failure or malfunction, or any and all\n   other commercial damages or losses), even if such Contributor\n   has been advised of the possibility of such damages.\n\n9. Accepting Warranty or Additional Liability. While redistributing\n   the Work or Derivative Works thereof, You may choose to offer,\n   and charge a fee for, acceptance of support, warranty, indemnity,\n   or other liability obligations and/or rights consistent with this\n   License. However, in accepting such obligations, You may act only\n   on Your own behalf and on Your sole responsibility, not on behalf\n   of any other Contributor, and only if You agree to indemnify,\n   defend, and hold each Contributor harmless for any liability\n   incurred by, or claims asserted against, such Contributor by reason\n   of your accepting any such warranty or additional liability.\n\nEND OF TERMS AND CONDITIONS\n\nAPPENDIX: How to apply the Apache License to your work.\n\n   To apply the Apache License to your work, attach the following\n   boilerplate notice, with the fields enclosed by brackets \"[]\"\n   replaced with your own identifying information. (Don't include\n   the brackets!)  The text should be enclosed in the appropriate\n   comment syntax for the file format. We also recommend that a\n   file or class name and description of purpose be included on the\n   same \"printed page\" as the copyright notice for easier\n   identification within third-party archives.\n\nCopyright [yyyy] [name of copyright owner]\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n\thttp://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n"
        },
        {
          "name": "LICENSE-MIT",
          "type": "blob",
          "size": 1.0615234375,
          "content": "MIT License\n\nCopyright (C) 2018-2023 by the respective authors\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "README.CN.md",
          "type": "blob",
          "size": 7.4453125,
          "content": "# Rust 开发树莓派操作系统教程\n\n![](https://github.com/rust-embedded/rust-raspberrypi-OS-tutorials/workflows/BSP-RPi3/badge.svg) ![](https://github.com/rust-embedded/rust-raspberrypi-OS-tutorials/workflows/BSP-RPi4/badge.svg) ![](https://github.com/rust-embedded/rust-raspberrypi-OS-tutorials/workflows/Unit-Tests/badge.svg) ![](https://github.com/rust-embedded/rust-raspberrypi-OS-tutorials/workflows/Integration-Tests/badge.svg) ![](https://img.shields.io/badge/License-MIT%20OR%20Apache--2.0-blue)\n\n<br/>\n\n<img src=\"doc/header.jpg\" height=\"379\"> <img src=\"doc/minipush_demo_frontpage.gif\" height=\"379\">\n\n## ℹ️ 介绍\n\n该系列教程适用于 ARM64 位[ARMv8-A 架构]的业余操作系统开发者。该教程会从零开始，一步步地指导你如何开发一个[功能健全的]\n嵌入式操作系统的内核。包含了实现一般操作系统的任务，例如开发串口控制台，设置虚拟内存和处理硬件异常。\n同时利用 Rust 的特性来提供系统的安全和速度。\n\n祝你玩得开心！\n\n_带上我最诚挚的问候,<br>Andre ([@andre-richter])_\n\n[armv8-a 架构]: https://developer.arm.com/products/architecture/cpu-architecture/a-profile/docs\n[功能健全的]: https://en.wikipedia.org/wiki/Monolithic_kernel\n[@andre-richter]: https://github.com/andre-richter\n\n## 📑 教程结构\n\n- 每篇教程都包含一个独立可引导的二进制内核文件。\n- 每篇新的教程都在之前的基础上扩展。\n- 每篇教程的指南里面都有一个简短的章节来总结新增的代码和功能，也会展示源代码的区别，方便检查和同步。\n- 部分教程中有除了`tl;dr`章节外还有非常详细、具体的介绍。长期计划是所有的教程都会有详细的文字说明。但是目前只有那些我认为教程的`tl;dr`和`diff`还不够详细的章节会详细说明。\n- 教程中所用的代码可以在**树莓派 3 和 4**上运行。\n  - 教程的第一到五章是基础内容，只能运行在`QEMU`上。\n  - 到了[第六章]时(06_drivers_gpio_uart)，你可以在树莓派上加载和运行内核并通过`UART`来观察输出结果。\n- 虽然这些教程是以树莓派 3 和 4 为试验对象，但代码是模块化的，所以应该容易移植到其他 CPU 架构的开发板上。\n  - 我希望会有人有机会去实现**RISC-V**架构的代码。\n- 我推荐使用[Visual Studio Code],配置[Rust Analyzer]插件开发代码。\n- 除了文本教程之外，也可以用`make doc`命令利用网页的优势来浏览代码。\n\n### `make doc` 的输出\n\n![make doc](doc/make_doc.png)\n\n[Visual Studio Code]: https://code.visualstudio.com\n[Rust Analyzer]: https://rust-analyzer.github.io\n\n## 🛠 系统要求\n\n本教程主要是面向**Linux**发行版的。理论上，文中大部分内容在其他类Unix系统诸如**macOS**也能正常工作，但请注意，只是理论上。\n\n### 🚀 tl;dr 版本\n\n1. [安装 Docker][install_docker]。\n2. **(仅限Linux)** 确保您的用户帐户在 [docker group] 中。\n3. 准备Rust工具链。其中大部分将在首次使用时通过[rust-toolchain.toml](rust-toolchain.toml)文件进行处理。我们要做的是：\n   1. 如果你已经安装了一个版本的Rust:\n      ```bash\n      cargo install cargo-binutils rustfilt\n      ```\n\n   1. 如果你想要全新安装:\n      ```bash\n      curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh\n\n      source $HOME/.cargo/env\n      cargo install cargo-binutils rustfilt\n      ```\n\n4. 如果你使用 `Visual Studio Code`，我强烈推荐你安装[Rust Analyzer 扩展]。\n5. **(仅限macOS)** 安装一些`Ruby` gems。\n\n这是作者最后一次在`macOS Monterey`上用`Ruby 3.0.2`版本进行测试。如果您正在使用`rbenv`，那么相应的`.ruby-version`文件已经就位。\n如果你从未听说过`rbenv`，请尝试使用[这个指南](https://stackoverflow.com/a/68118750)。\n\n在存储库根文件夹中运行此操作：\n\n```bash\nbundle config set --local path '.vendor/bundle'\nbundle config set --local without 'development'\nbundle install\n```\n\n[docker group]: https://docs.docker.com/engine/install/linux-postinstall/\n[Rust Analyzer 扩展]: https://marketplace.visualstudio.com/items?itemName=matklad.rust-analyzer\n\n\n## 🧰 长期版本: 消除工具链烦恼\n\n这个系列的教程会着重关注用户体验的友好性。因此，我尽量消除嵌入式开发中的最大痛点：`Toolchain hassle`。\n\nRust内置的交叉编译支持在这方面帮了我们大忙。我们只需要使用`rustup`安装目标工具链就可以在`x86`宿主机上交叉编译支持树莓派的目标文件。然而，除了Rust编译器，我们还需要更多的工具。例如：\nRust本身在这方面已经起到了很大的作用，因为它内置了对交叉编译的支持。从`x86`宿主机到树莓派的`AArch64`架构的交叉编译所需的一切都将由`rustup`自动安装。然而，除了Rust编译器，我们还将使用更多的工具。例如：\n\n- 用于在我们的宿主系统上模拟我们内核运行环境的`QEMU`。\n- 一个叫`Minipush`的自制工具，可以通过`UART`将内核加载到树莓派上。\n- 用于调式目标文件的`OpenOCD`和`GDB`。\n\n在你的宿主机上安装/编译正确版本的上述工具很可能会遇到很多麻烦。举个例子，你的发行版也许并不会提供我们需要的最新版本的软件包。又或者你在编译这些工具时会遇到一些很难处理的依赖问题。\n\n这也是为什么我们要尽可能使用[Docker][install_docker]的原因。我们提供了一个已经预装了所有需要的工具及依赖的容器，当需要的时候它就会被自动拉取。如果你想要了解更多有关Docker和这个容器的细节，请查看本仓库下的[docker](docker) 文件夹。\n\n[install_docker]: https://docs.docker.com/get-docker/\n\n## 📟 USB 串行输出\n\n由于教程中开发的内核是在真实的硬件上运行的，因此强烈建议您使用 USB 串行调试线来进行试验。连接调试线后，树莓派需要通过额外电源供电。\n\n- 您可以在[\\[1\\]] [\\[2\\]]中或者[淘宝]上找到USB转串口线，但许多其他线材也可以工作。理想情况下，您的线材应基于`CP2102`芯片。\n- 您将其连接到`GND`和GPIO引脚`14/15`，如下所示。\n- [教程5](05_drivers_gpio_uart/README.CN.md)是这个设备第一次需要使用的地方。查看它了解如何准备SD卡以从中启动自制内核的说明。\n- 从[教程6](06_uart_chainloader/README.CN.md)开始，在树莓派上启动内核变得非常舒适。在本教程中开发了一个所谓的`chainloader`，。\n  这将是您暂时需要在SD卡上手动复制的最后一个文件。这将使您能够在通过`UART`按需引导期间加载教程内核。\n\n![UART wiring diagram](doc/wiring.png)\n\n[\\[1\\]]: https://www.amazon.de/dp/B0757FQ5CX/ref=cm_sw_r_tw_dp_U_x_ozGRDbVTJAG4Q\n[\\[2\\]]: https://www.adafruit.com/product/954\n[淘宝]: https://www.taobao.com/\n\n## 🙌 致谢\n\n这个教程最初是由[Zoltan Baldaszti](https://github.com/bztsrc)的[项目](https://github.com/bztsrc/raspi3-tutorial)衍生出来的，感谢它给我开了一个头。\n\n## License\n\nLicensed under either of\n\n- Apache License, Version 2.0, ([LICENSE-APACHE](LICENSE-APACHE) or http://www.apache.org/licenses/LICENSE-2.0)\n- MIT license ([LICENSE-MIT](LICENSE-MIT) or http://opensource.org/licenses/MIT)\n\nat your option.\n\n### 贡献\n\n除非您明确声明，否则有意提交给您的任何贡献（包括 Apache-2.0 许可中定义的）均应按上述双重许可，且无任何附加条款或条件。\n"
        },
        {
          "name": "README.ES.md",
          "type": "blob",
          "size": 9.197265625,
          "content": "# Tutoriales de desarrollo de Sistemas Operativos en Rust con la Raspberry Pi\n\n![](https://github.com/rust-embedded/rust-raspberrypi-OS-tutorials/workflows/BSP-RPi3/badge.svg) ![](https://github.com/rust-embedded/rust-raspberrypi-OS-tutorials/workflows/BSP-RPi4/badge.svg) ![](https://github.com/rust-embedded/rust-raspberrypi-OS-tutorials/workflows/Unit-Tests/badge.svg) ![](https://github.com/rust-embedded/rust-raspberrypi-OS-tutorials/workflows/Integration-Tests/badge.svg) ![](https://img.shields.io/badge/License-MIT%20OR%20Apache--2.0-blue)\n\n<br/>\n\n<img src=\"doc/header.jpg\" height=\"372\"> <img src=\"doc/minipush_demo_frontpage.gif\" height=\"372\">\n\n## ℹ️ Introducción\n\nEsto es una serie de tutoriales para los desarrolladores aficionados a los Sistemas Operativos (OS) \nque se están adentrando a la nueva arquitectura ARM de 64 bits [ARMv8-A\narchitecture]. Los tutoriales darán una guía paso a paso en cómo escribir un Sistema Operativo \n[monolítico] desde cero.\nEstos tutoriales cubren la implementación común de diferentes tareas de Sistemas Operativos, como \nescribir en una terminal serie, configurar la memoria virtual y manejar excepciones de hardware (HW). \nTodo mientras usamos la seguridad y velocidad que `Rust` nos proporciona.\n\n¡Divértanse!\n\n_Atentamente, <br>Andre ([@andre-richter])_\n\nP.S.: Para otros lenguajes, por favor busquen los diferentes archivos README. Por ejemplo, [`README.CN.md`](README.CN.md) o [`README.ES.md`](README.ES.md). Muchas gracias a nuestros\n[traductores](#traducciones-de-este-repositorio) 🙌.\n\n[ARMv8-A architecture]: https://developer.arm.com/products/architecture/cpu-architecture/a-profile/docs\n[monolítico]: https://en.wikipedia.org/wiki/Monolithic_kernel\n[@andre-richter]: https://github.com/andre-richter\n\n## 📑 Estructura\n\n- Cada tutorial contiene un solo binario arrancable correspondiente al núcleo.\n- Cada tutorial nuevo extiende el tutorial anterior.\n- Cada tutorial tendrá un `README` y cada `README` tendrá un pequeña sección de [`tl;dr`](https://es.wikipedia.org/wiki/TL;DR) en donde se dará una pequeña perspectiva general de los cambios y se mostrará el código fuente `diff` del tutorial anterior para que se puedan inspeccionar los cambios/adiciones que han ocurrido.\n  - Algunos tutoriales además de tener un `tl;dr` también tendrán una sección en la que se dará una explicación con todo lujo de detalle.\n     El plan a largo plazo es que cada tutorial tenga una buena explicación además del `tl;dr` y el `diff`; pero por el momento los únicos tutoriales\n    que gozan de una son los tutoriales en los que creo que el `tl;dr` y el `diff` no son suficientes para comprender lo que está pasando.\n- El código que se escribió en este tutorial soporta y corre en la **Raspberry Pi 3** y en la **Raspberry 4**\n  - Del tutorial 1 hasta el 5 son tutoriales \"preparatorios\", por lo que este código solo tendrá sentido ejecutarlo en [`QEMU`](https://www.qemu.org/).\n  - Cuando llegues al [tutorial 5](05_drivers_gpio_uart) podrás comenzar a cargar y a ejecutar el núcleo en una\n    Raspeberry de verdad, y observar la salida serie (`UART`).\n- Aunque la Raspberry Pi 3 y 4 son las principales placas este código está escrito en un estilo modular,\n  lo que permite una fácil portabilidad a otras arquitecturas de CPU o/y placas.\n  - Me encantaría si alguien intentase adaptar este código en una arquitectura **RISC-V**.\n- Para la edición recomiendo [Visual Studio Code] con [Rust Analyzer].\n- En adición al texto que aparece en los tutoriales también sería recomendable revisar \n  el comando `make doc` en cada tutorial. Este comando te deja navegar el código documentado de una manera cómoda.\n\n### Salida del comando `make doc`\n\n![make doc](doc/make_doc.png)\n\n[Visual Studio Code]: https://code.visualstudio.com\n[Rust Analyzer]: https://rust-analyzer.github.io\n\n## 🛠 Requisitos del sistema\n\nEstos tutoriales están dirigidos principalmente a distribuciones de **Linux**. \nMuchas de las cosas vistas aquí también funcionan en **macOS**, pero esto solo es _experimental_.\n\n### 🚀 La versión tl;dr\n\n1. [Instala Docker Desktop][install_docker].\n\n2. (**Solo para Linux**) Asegúrate de que la cuenta de tu usuario está en el [grupo `docker`][docker group].\n\n3. Prepara la `Rust` toolchain. La mayor parte se hará automáticamente durante el primer uso del archivo [rust-toolchain.toml](rust-toolchain.toml). \n   Todo lo que nos queda hacer a nosotros es: \n   \n   i. Si ya tienes una versión de Rust instalada:\n   \n   ```bash\n   cargo install cargo-binutils rustfilt\n   ```\n   \n   ii. Si necesitas instalar Rust desde cero:\n   \n   ```bash\n   curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh\n   \n   source $HOME/.cargo/env\n   cargo install cargo-binutils rustfilt\n   ```\n\n4. En caso de que uses `Visual Studio Code`, recomiendo que instales la extensión [Rust Analyzer extension].\n\n5. (**Solo para macOS**) Instala algunas `Ruby` gems.\n   \n   Ejecuta esto en la carpeta root del repositorio:\n   \n   ```bash\n   bundle install --path .vendor/bundle --without development\n   ```\n\n[docker group]: https://docs.docker.com/engine/install/linux-postinstall/\n[Rust Analyzer extension]: https://marketplace.visualstudio.com/items?itemName=matklad.rust-analyzer\n\n### 🧰 Más detalles: Eliminando Lios con Toolchains\n\nEsta serie trata de enfocarse lo máximo posible en tener una experiencia agradable para el usuario.\nPor lo tanto, se han dirigido muchos esfuerzos a eliminar la parte más difícil del desarrollo de\nlos sistemas incorporados (embedded) tanto como se pudo.\n\nRust por sí mismo ya ayuda mucho, porque tiene integrado el soporte para compilación cruzada.\nTodo lo que necesitamos para compilar desde una máquina con una arquitectura `x86` a una Raspberry Pi\ncon arquitectura `AArch64` será automáticamente instalado por `rustup`. Sin embargo, además de usar\nel compilador de Rust, también usaremos algunas otras herramientas, entre las cuales están:\n\n- `QEMU` para emular nuestro núcleo en nuestra máquina principal.\n- Una herramienta llamada `Minipush` para cargar el núcleo en una Raspberry Pi cuando queramos usando `UART`.\n- `OpenOCD` y `GDB` para hacer depuración (\"debugging\") en la máquina a instalar.\n\nHay muchas cosas que pueden salir mal mientras instalamos y/o compilamos las versiones correctas de cada\nherramienta en tu máquina. Por ejemplo, tu distribución de Linux tal vez podría no proporcionar las versiones más\nrecientes de paquetes que se necesiten. O tal vez te falten algunas dependencias para la compilar estas herramientas.\n\nEsta es la razón por la cual usaremos [Docker][install_docker] mientras sea posible. Te\nestamos proporcionando un contenedor que tiene todas las herramientas o dependencias preinstaladas.\nSi quieres saber más acerca de Docker y revisar el contenedor proporcionado, por favor revisa la carpeta\n[docker](docker) del repositorio.\n\n[install_docker]: https://docs.docker.com/get-docker/\n\n## 📟 Puerto Serie USB\n\nYa que el núcleo desarrollado en este tutorial se ejecuta en hardware real, se recomienda que tengas un adaptador de puerto serie USB cable para sentir la experiencia completa.\n\n- Puedes encontrar estos cables que deberían funcionar sin ningún problema en [\\[1\\]] [\\[2\\]], pero\n  hay muchos otros que pueden funcionar. Idealmente, tu cable estaría basado en el chip `CP2102`.\n- Lo conectas a los pines `GND` y `GPIO` `14/15` como se muestra en la parte inferior.  \n- [Tutorial 5](05_drivers_gpio_uart) es la primera vez en la que lo vas usar. Revisa las instrucciones\n  sobre cómo preparar una tarjeta SD para arrancar en tu núcleo desde ahí.\n- Empezando con el [tutorial 6](06_uart_chainloader), arrancar núcleos en tu Raspberry Pi comienza a ser\n  más fácil. En este tutorial se desarrolla un `chainloader`, que será el último archivo que necesitarás\n  copiar de manera manual a la tarjeta SD por el momento. Esto te permitirá cargar los núcleos de los tutoriales\n  durante el arranque usando `UART`.\n\n![UART wiring diagram](doc/wiring.png)\n\n[\\[1\\]]: https://www.amazon.de/dp/B0757FQ5CX/ref=cm_sw_r_tw_dp_U_x_ozGRDbVTJAG4Q\n[\\[2\\]]: https://www.adafruit.com/product/954\n\n## 🙌 Agradecimientos\n\nLa versión original de estos tutoriales empezó como un fork de los increíbles \n[tutoriales de programación en hardware en la RPi3](https://github.com/bztsrc/raspi3-tutorial) en `C`\nde [Zoltan Baldaszti](https://github.com/bztsrc). ¡Gracias por darme un punto de partida!\n\n### Traducciones de este repositorio\n\n- **Chino:**\n  - [@colachg] y [@readlnh].\n  - Necesitan actualizaciones.\n- **Español:**\n  - [@zanezhub].\n  - En el futuro habrán tutoriales traducidos al español. \n\n[@colachg]: https://github.com/colachg\n[@readlnh]: https://github.com/readlnh\n[@zanezhub]: https://github.com/zanezhub\n\n## Licencia\n\nEste proyecto está licenciado por cualquiera de las siguientes licencias como alguna de tus dos opciones\n\n- Apache License, Version 2.0, ([LICENSE-APACHE](LICENSE-APACHE) o http://www.apache.org/licenses/LICENSE-2.0)\n- MIT license ([LICENSE-MIT](LICENSE-MIT) o http://opensource.org/licenses/MIT)\n\n### Contribución\n\nA menos de que lo menciones, cualquier contribución enviada por ti para su inclusión en este trabajo,\ntal como se define en la licencia Apache-2.0, deberá tener doble licencia como se muestra en la parte superior, sin ningún\ncambio de términos o condiciones.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 8.400390625,
          "content": "# Operating System development tutorials in Rust on the Raspberry Pi\n\n![](https://github.com/rust-embedded/rust-raspberrypi-OS-tutorials/workflows/BSP-RPi3/badge.svg) ![](https://github.com/rust-embedded/rust-raspberrypi-OS-tutorials/workflows/BSP-RPi4/badge.svg) ![](https://github.com/rust-embedded/rust-raspberrypi-OS-tutorials/workflows/Unit-Tests/badge.svg) ![](https://github.com/rust-embedded/rust-raspberrypi-OS-tutorials/workflows/Integration-Tests/badge.svg) ![](https://img.shields.io/badge/License-MIT%20OR%20Apache--2.0-blue)\n\n<br/>\n\n<img src=\"doc/header.jpg\" height=\"372\"> <img src=\"doc/minipush_demo_frontpage.gif\" height=\"372\">\n\n## ℹ️ Introduction\n\nThis is a tutorial series for hobby OS developers who are new to ARM's 64 bit [ARMv8-A\narchitecture]. The tutorials will give a guided, step-by-step tour of how to write a [monolithic]\nOperating System `kernel` for an `embedded system` from scratch. They cover implementation of common\nOperating Systems tasks, like writing to the serial console, setting up virtual memory and handling\nHW exceptions. All while leveraging `Rust`'s unique features to provide for safety and speed.\n\nHave fun!\n\n_Best regards,<br>Andre ([@andre-richter])_\n\nP.S.: For other languages, please look out for alternative README files. For example,\n[`README.CN.md`](README.CN.md) or [`README.ES.md`](README.ES.md). Many thanks to our\n[translators](#translations-of-this-repository) 🙌.\n\n[ARMv8-A architecture]: https://developer.arm.com/products/architecture/cpu-architecture/a-profile/docs\n[monolithic]: https://en.wikipedia.org/wiki/Monolithic_kernel\n[@andre-richter]: https://github.com/andre-richter\n\n## 📑 Organization\n\n- Each tutorial contains a stand-alone, bootable `kernel` binary.\n- Each new tutorial extends the previous one.\n- Each tutorial `README` will have a short `tl;dr` section giving a brief overview of the additions,\n  and show the source code `diff` to the previous tutorial, so that you can conveniently inspect the\n  changes/additions.\n    - Some tutorials have a full-fledged, detailed text in addition to the `tl;dr` section. The\n      long-term plan is that all tutorials get a full text, but for now this is exclusive to\n      tutorials where I think that `tl;dr` and `diff` are not enough to get the idea.\n- The code written in these tutorials supports and runs on the **Raspberry Pi 3** and the\n  **Raspberry Pi 4**.\n  - Tutorials 1 till 5 are groundwork code which only makes sense to run in `QEMU`.\n  - Starting with [tutorial 5](05_drivers_gpio_uart), you can load and run the kernel on the real\n    Raspberrys and observe output over `UART`.\n- Although the Raspberry Pi 3 and 4 are the main target boards, the code is written in a modular\n  fashion which allows for easy porting to other CPU architectures and/or boards.\n  - I would really love if someone takes a shot at a **RISC-V** implementation!\n- For editing, I recommend [Visual Studio Code] with [Rust Analyzer].\n- In addition to the tutorial text, also check out the `make doc` command in each tutorial. It lets\n  you browse the extensively documented code in a convenient way.\n\n### Output of `make doc`\n\n![make doc](doc/make_doc.png)\n\n[Visual Studio Code]: https://code.visualstudio.com\n[Rust Analyzer]: https://rust-analyzer.github.io\n\n## 🛠 System Requirements\n\nThe tutorials are primarily targeted at **Linux**-based distributions. Most stuff will also work on **macOS**, but this is only _experimental_.\n\n### 🚀 The tl;dr Version\n\n1. [Install Docker Engine][install_docker].\n1. (**Linux only**) Ensure your user account is in the [docker group].\n1. Prepare the `Rust` toolchain. Most of it will be handled on first use through the\n   [rust-toolchain.toml](rust-toolchain.toml) file. What's left for us to do is:\n   1. If you already have a version of Rust installed:\n      ```bash\n      cargo install cargo-binutils rustfilt\n      ```\n\n   1. If you need to install Rust from scratch:\n      ```bash\n      curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh\n\n      source $HOME/.cargo/env\n      cargo install cargo-binutils rustfilt\n      ```\n\n1. In case you use `Visual Studio Code`, I strongly recommend installing the [Rust Analyzer extension].\n1. (**macOS only**) Install a few `Ruby` gems.\n\n  This was last tested by the author with Ruby version `3.0.2` on `macOS Monterey`. If you are using\n  `rbenv`, the respective `.ruby-version` file is already in place. If you never heard of `rbenv`,\n  try using [this little guide](https://stackoverflow.com/a/68118750).\n\n   Run this in the repository root folder:\n\n   ```bash\n   bundle config set --local path '.vendor/bundle'\n   bundle config set --local without 'development'\n   bundle install\n   ```\n\n[docker group]: https://docs.docker.com/engine/install/linux-postinstall/\n[Rust Analyzer extension]: https://marketplace.visualstudio.com/items?itemName=matklad.rust-analyzer\n\n### 🧰 More Details: Eliminating Toolchain Hassle\n\nThis series tries to put a strong focus on user friendliness. Therefore, efforts were made to\neliminate the biggest painpoint in embedded development as much as possible: `Toolchain hassle`.\n\nRust itself is already helping a lot in that regard, because it has built-in support for\ncross-compilation. All that we need for cross-compiling from an `x86` host to the Raspberry Pi's\n`AArch64` architecture will be automatically installed by `rustup`. However, besides the Rust\ncompiler, we will use some more tools. Among others:\n\n- `QEMU` to emulate our kernel on the host system.\n- A self-made tool called `Minipush` to load a kernel onto the Raspberry Pi on-demand over `UART`.\n- `OpenOCD` and `GDB` for debugging on the target.\n\nThere is a lot that can go wrong while installing and/or compiling the correct version of each tool\non your host machine. For example, your distribution might not provide the latest version that is\nneeded. Or you are missing some hard-to-get dependencies for the compilation of one of these tools.\n\nThis is why we will make use of [Docker][install_docker] whenever possible. We are providing an\naccompanying container that has all the needed tools or dependencies pre-installed, and it gets\npulled in automagically once it is needed. If you want to know more about Docker and peek at the\nprovided container, please refer to the repository's [docker](docker) folder.\n\n[install_docker]: https://docs.docker.com/engine/install/#server\n\n## 📟 USB Serial Output\n\nSince the kernel developed in the tutorials runs on the real hardware, it is highly recommended to\nget a USB serial cable to get the full experience.\n\n- You can find USB-to-serial cables that should work right away at [\\[1\\]] [\\[2\\]], but many others\n  will work too. Ideally, your cable is based on the `CP2102` chip.\n- You connect it to `GND` and GPIO pins `14/15` as shown below.\n- [Tutorial 5](05_drivers_gpio_uart) is the first where you can use it. Check it out for\n  instructions on how to prepare the SD card to boot your self-made kernel from it.\n- Starting with [tutorial 6](06_uart_chainloader), booting kernels on your Raspberry is getting\n  _really_ comfortable. In this tutorial, a so-called `chainloader` is developed, which will be the\n  last file you need to manually copy on the SD card for a while. It will enable you to load the\n  tutorial kernels during boot on demand over `UART`.\n\n![UART wiring diagram](doc/wiring.png)\n\n[\\[1\\]]: https://www.amazon.de/dp/B0757FQ5CX/ref=cm_sw_r_tw_dp_U_x_ozGRDbVTJAG4Q\n[\\[2\\]]: https://www.adafruit.com/product/954\n\n## 🙌 Acknowledgements\n\nThe original version of the tutorials started out as a fork of [Zoltan\nBaldaszti](https://github.com/bztsrc)'s awesome [tutorials on bare metal programming on\nRPi3](https://github.com/bztsrc/raspi3-tutorial) in `C`. Thanks for giving me a head start!\n\n### Translations of this repository\n\n - **Chinese**\n   - [@colachg] and [@readlnh].\n   - Need updating.\n - **Spanish**\n   -  [@zanezhub].\n   -  In the future there'll be tutorials translated to spanish.\n\n[@colachg]: https://github.com/colachg\n[@readlnh]: https://github.com/readlnh\n[@zanezhub]: https://github.com/zanezhub\n\n## License\n\nLicensed under either of\n\n- Apache License, Version 2.0, ([LICENSE-APACHE](LICENSE-APACHE) or <https://www.apache.org/licenses/LICENSE-2.0>)\n- MIT license ([LICENSE-MIT](LICENSE-MIT) or <https://opensource.org/licenses/MIT>)\n\nat your option.\n\n### Contribution\n\nUnless you explicitly state otherwise, any contribution intentionally submitted for inclusion in the\nwork by you, as defined in the Apache-2.0 license, shall be dual licensed as above, without any\nadditional terms or conditions.\n"
        },
        {
          "name": "SPONSORING.md",
          "type": "blob",
          "size": 0.7421875,
          "content": "# 💖 Sponsoring the Developers\n\nThis repository is the result of the combined efforts of a large number of developers - in terms of\nwriting the source code, but also in performing code reviews, writing documentation, and handling\nissues and PRs. Some of these developers received a salary or other payment from a third-party for\ntheir contributions. Others receive no payment of any kind, and simply hope that others find their\ncontributions useful.\n\nIf you would like to support any of the developers, please take a moment to [click through to their\nprofiles] to see if they accept sponsorship and/or charitable gifts made in their name.\n\n[click through to their profiles]: https://github.com/rust-embedded/rust-raspberrypi-OS-tutorials/graphs/contributors\n"
        },
        {
          "name": "X1_JTAG_boot",
          "type": "tree",
          "content": null
        },
        {
          "name": "common",
          "type": "tree",
          "content": null
        },
        {
          "name": "contributor_setup.sh",
          "type": "blob",
          "size": 0.708984375,
          "content": "#!/usr/bin/env bash\n\ngit config core.hooksPath .githooks\n\n#\n# Ruby and Bundler\n#\nif ! command -v bundle &> /dev/null\nthen\n    echo \"'bundle' could not be found. Please install Ruby and Bundler.\"\n    exit\nfi\nbundle config set --local path '.vendor/bundle'\nbundle install\n\n#\n# NPM\n#\nif ! command -v npm &> /dev/null\nthen\n    echo \"'npm' could not be found. Please install it.\"\n    exit\nfi\nnpm install --save-dev --save-exact prettier\n\n#\n# Misspell\n#\nif ! command -v curl &> /dev/null\nthen\n    echo \"'curl' could not be found. Please install it.\"\n    exit\nfi\ncurl -L -o ./install-misspell.sh https://raw.githubusercontent.com/client9/misspell/master/install-misspell.sh\nsh ./install-misspell.sh -b .vendor\nrm install-misspell.sh\n"
        },
        {
          "name": "devtool",
          "type": "blob",
          "size": 0.015625,
          "content": "utils/devtool.rb"
        },
        {
          "name": "devtool_completion.bash",
          "type": "blob",
          "size": 0.21484375,
          "content": "#!/usr/bin/env bash\n\ncomplete -W \"clean clippy copyright diff fmt fmt_check make make_xtra misspell ready_for_publish ready_for_publish_no_rust rubocop test test_boot test_integration test_unit test_xtra update\" devtool\n"
        },
        {
          "name": "doc",
          "type": "tree",
          "content": null
        },
        {
          "name": "docker",
          "type": "tree",
          "content": null
        },
        {
          "name": "rust-toolchain.toml",
          "type": "blob",
          "size": 0.1435546875,
          "content": "[toolchain]\nchannel = \"nightly-2022-10-13\"\ncomponents = [\"rust-src\", \"llvm-tools-preview\", \"rustfmt\"]\ntargets = [\"aarch64-unknown-none-softfloat\"]\n"
        },
        {
          "name": "utils",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}