{
  "metadata": {
    "timestamp": 1736709460632,
    "page": 92,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjEwMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "fdehau/tui-rs",
      "stars": 10839,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.0556640625,
          "content": "target\nCargo.lock\n*.log\n*.rs.rustfmt\n.gdb_history\n.idea/\n"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 22.4873046875,
          "content": "# Changelog\n\n## To be released\n\n## v0.19.0 - 2022-08-14\n\n### Features\n\n* Bump `crossterm` to `0.25`\n\n## v0.18.0 - 2022-04-24\n\n### Features\n\n* Update `crossterm` to `0.23`\n\n## v0.17.0 - 2022-01-22\n\n### Features\n\n* Add option to `widgets::List` to repeat the hightlight symbol for each line of multi-line items (#533).\n* Add option to control the alignment of `Axis` labels in the `Chart` widget (#568).\n\n### Breaking changes\n\n* The minimum supported rust version is now `1.56.1`.\n\n#### New default backend and consolidated backend options (#553)\n\n* `crossterm` is now the default backend.\nIf you are already using the `crossterm` backend, you can simplify your dependency specification in `Cargo.toml`:\n```diff\n- tui = { version = \"0.16\", default-features = false, features = [\"crossterm\"] }\n+ tui = \"0.17\"\n```\nIf you are using the `termion` backend, your `Cargo` is now a bit more verbose:\n```diff\n- tui = \"0.16\"\n+ tui = { version = \"0.17\", default-features = false, features = [\"termion\"] }\n```\n\n`crossterm` has also been bumped to version `0.22`.\n\nBecause of their apparent low usage, `curses` and `rustbox` backends have been removed.\nIf you are using one of them, you can import their last implementation in your own project:\n* [curses](https://github.com/fdehau/tui-rs/blob/v0.16.0/src/backend/curses.rs)\n* [rustbox](https://github.com/fdehau/tui-rs/blob/v0.16.0/src/backend/rustbox.rs)\n\n#### Canvas labels (#543)\n\n* Labels of the `Canvas` widget are now `text::Spans`.\nThe signature of `widgets::canvas::Context::print` has thus been updated:\n```diff\n- ctx.print(x, y, \"Some text\", Color::Yellow);\n+ ctx.print(x, y, Span::styled(\"Some text\", Style::default().fg(Color::Yellow)))\n```\n\n## v0.16.0 - 2021-08-01\n\n### Features\n\n* Update `crossterm` to `0.20`.\n* Add `From<Cow<str>>` implementation for `text::Text` (#471).\n* Add option to right or center align the title of a `widgets::Block` (#462).\n\n### Fixes\n\n* Apply label style in `widgets::Gauge` and avoid panics because of overflows with long labels (#494).\n* Avoid panics because of overflows with long axis labels in `widgets::Chart` (#512).\n* Fix computation of column widths in `widgets::Table` (#514).\n* Fix panics because of invalid offset when input changes between two frames in `widgets::List` and\n  `widgets::Chart` (#516).\n\n## v0.15.0 - 2021-05-02\n\n### Features\n\n* Update `crossterm` to `0.19`.\n* Update `rand` to `0.8`.\n* Add a read-only view of the terminal state after the draw call (#440).\n\n### Fixes\n\n* Remove compile warning in `TestBackend::assert_buffer` (#466).\n\n## v0.14.0 - 2021-01-01\n\n### Breaking changes\n\n#### New API for the Table widget\n\nThe `Table` widget got a lot of improvements that should make it easier to work with:\n* It should not longer panic when rendered on small areas.\n* `Row`s are now a collection of `Cell`s, themselves wrapping a `Text`. This means you can style\nthe entire `Table`, an entire `Row`, an entire `Cell` and rely on the styling capabilities of\n`Text` to get full control over the look of your `Table`.\n* `Row`s can have multiple lines.\n* The header is now optional and is just another `Row` always visible at the top.\n* `Row`s can have a bottom margin.\n* The header alignment is no longer off when an item is selected.\n\nTaking the example of the code in `examples/demo/ui.rs`, this is what you may have to change:\n```diff\n     let failure_style = Style::default()\n         .fg(Color::Red)\n         .add_modifier(Modifier::RAPID_BLINK | Modifier::CROSSED_OUT);\n-    let header = [\"Server\", \"Location\", \"Status\"];\n     let rows = app.servers.iter().map(|s| {\n         let style = if s.status == \"Up\" {\n             up_style\n         } else {\n             failure_style\n         };\n-        Row::StyledData(vec![s.name, s.location, s.status].into_iter(), style)\n+        Row::new(vec![s.name, s.location, s.status]).style(style)\n     });\n-    let table = Table::new(header.iter(), rows)\n+    let table = Table::new(rows)\n+        .header(\n+            Row::new(vec![\"Server\", \"Location\", \"Status\"])\n+                .style(Style::default().fg(Color::Yellow))\n+                .bottom_margin(1),\n+        )\n         .block(Block::default().title(\"Servers\").borders(Borders::ALL))\n-        .header_style(Style::default().fg(Color::Yellow))\n         .widths(&[\n             Constraint::Length(15),\n             Constraint::Length(15),\n```\nHere, we had to:\n- Change the way we construct [`Row`](https://docs.rs/tui/*/tui/widgets/struct.Row.html) which is no\nlonger an `enum` but a `struct`. It accepts anything that can be converted to an iterator of things\nthat can be converted to a [`Cell`](https://docs.rs/tui/*/tui/widgets/struct.Cell.html)\n- The header is no longer a required parameter so we use\n[`Table::header`](https://docs.rs/tui/*/tui/widgets/struct.Table.html#method.header) to set it.\n`Table::header_style` has been removed since the style can be directly set using\n[`Row::style`](https://docs.rs/tui/*/tui/widgets/struct.Row.html#method.style). In addition, we want\nto preserve the old margin between the header and the rest of the rows so we add a bottom margin to\nthe header using\n[`Row::bottom_margin`](https://docs.rs/tui/*/tui/widgets/struct.Row.html#method.bottom_margin).\n\nYou may want to look at the documentation of the different types to get a better understanding:\n- [`Table`](https://docs.rs/tui/*/tui/widgets/struct.Table.html)\n- [`Row`](https://docs.rs/tui/*/tui/widgets/struct.Row.html)\n- [`Cell`](https://docs.rs/tui/*/tui/widgets/struct.Cell.html)\n\n### Fixes\n\n- Fix handling of Non Breaking Space (NBSP) in wrapped text in `Paragraph` widget.\n\n### Features\n\n- Add `Style::reset` to create a `Style` resetting all styling properties when applied.\n- Add an option to render the `Gauge` widget with unicode blocks.\n- Manage common project tasks with `cargo-make` rather than `make` for easier on-boarding.\n\n## v0.13.0 - 2020-11-14\n\n### Features\n\n* Add `LineGauge` widget which is a more compact variant of the existing `Gauge`.\n* Bump `crossterm` to 0.18\n\n### Fixes\n\n* Take into account the borders of the `Table` widget when the widths of columns is controlled by\n`Percentage` and `Ratio` constraints.\n\n## v0.12.0 - 2020-09-27\n\n### Features\n\n* Make it easier to work with string with multiple lines in `Text` (#361).\n\n### Fixes\n\n* Fix a style leak in `Graph` so components drawn on top of the plotted data (i.e legend and axis\ntitles) are not affected by the style of the `Dataset`s (#388).\n* Make sure `BarChart` shows bars with the max height only when the plotted data is actually equal\nto the max (#383).\n\n## v0.11.0 - 2020-09-20\n\n### Features\n\n* Add the dot character as a new type of canvas marker (#350).\n* Support more style modifiers on Windows (#368).\n\n### Fixes\n\n* Clearing the terminal through `Terminal::clear` will cause the whole UI to be redrawn (#380).\n* Fix incorrect output when the first diff to draw is on the second cell of the terminal (#347).\n\n## v0.10.0 - 2020-07-17\n\n### Breaking changes\n\n#### Easier cursor management\n\nA new method has been added to `Frame` called `set_cursor`. It lets you specify where the cursor\nshould be placed after the draw call. Furthermore like any other widgets, if you do not set a cursor\nposition during a draw call, the cursor is automatically hidden.\n\nFor example:\n\n```rust\nfn draw_input(f: &mut Frame, app: &App) {\n  if app.editing {\n    let input_width = app.input.width() as u16;\n    // The cursor will be placed just after the last character of the input\n    f.set_cursor((input_width + 1, 0));\n  } else {\n    // We are no longer editing, the cursor does not have to be shown, set_cursor is not called and\n    // thus automatically hidden.\n  }\n}\n```\n\nIn order to make this possible, the draw closure takes in input `&mut Frame` instead of `mut Frame`.\n\n#### Advanced text styling\n\nIt has been reported several times that the text styling capabilities were somewhat limited in many\nplaces of the crate. To solve the issue, this release includes a new set of text primitives that are\nnow used by a majority of widgets to provide flexible text styling.\n\n`Text` is replaced by the following types:\n- `Span`: a string with a unique style.\n- `Spans`: a string with multiple styles.\n- `Text`: a multi-lines string with multiple styles.\n\nHowever, you do not always need this complexity so the crate provides `From` implementations to\nlet you use simple strings as a default and switch to the previous primitives when you need\nadditional styling capabilities.\n\nFor example, the title of a `Block` can be set in the following ways:\n\n```rust\n// A title with no styling\nBlock::default().title(\"My title\");\n// A yellow title\nBlock::default().title(Span::styled(\"My title\", Style::default().fg(Color::Yellow)));\n// A title where \"My\" is bold and \"title\" is a simple string\nBlock::default().title(vec![\n    Span::styled(\"My\", Style::default().add_modifier(Modifier::BOLD)),\n    Span::from(\"title\")\n]);\n```\n\n- `Buffer::set_spans` and `Buffer::set_span` were added.\n- `Paragraph::new` expects an input that can be converted to a `Text`.\n- `Block::title_style` is deprecated.\n- `Block::title` expects a `Spans`.\n- `Tabs` expects a list of `Spans`.\n- `Gauge` custom label is now a `Span`.\n- `Axis` title and labels are `Spans` (as a consequence `Chart` no longer has generic bounds).\n\n#### Incremental styling\n\nPreviously `Style` was used to represent an exhaustive set of style rules to be applied to an UI\nelement. It implied that whenever you wanted to change even only one property you had to provide the\ncomplete style. For example, if you had a `Block` where you wanted to have a green background and\na title in bold, you had to do the following:\n\n```rust\nlet style = Style::default().bg(Color::Green);\nBlock::default()\n  .style(style)\n  .title(\"My title\")\n  // Here we reused the style otherwise the background color would have been reset\n  .title_style(style.modifier(Modifier::BOLD));\n```\n\nIn this new release, you may now write this as:\n\n```rust\nBlock::default()\n    .style(Style::default().bg(Color::Green))\n    // The style is not overidden anymore, we simply add new style rule for the title.\n    .title(Span::styled(\"My title\", Style::default().add_modifier(Modifier::BOLD)))\n```\n\nIn addition, the crate now provides a method `patch` to combine two styles into a new set of style\nrules:\n\n```rust\nlet style = Style::default().modifer(Modifier::BOLD);\nlet style = style.patch(Style::default().add_modifier(Modifier::ITALIC));\n// style.modifer == Modifier::BOLD | Modifier::ITALIC, the modifier has been enriched not overidden\n```\n\n- `Style::modifier` has been removed in favor of `Style::add_modifier` and `Style::remove_modifier`.\n- `Buffer::set_style` has been added. `Buffer::set_background` is deprecated.\n- `BarChart::style` no longer set the style of the bars. Use `BarChart::bar_style` in replacement.\n- `Gauge::style` no longer set the style of the gauge. Use `Gauge::gauge_style` in replacement.\n\n#### List with item on multiple lines\n\nThe `List` widget has been refactored once again to support items with variable heights and complex\nstyling.\n\n- `List::new` expects an input that can be converted to a `Vec<ListItem>` where `ListItem` is a\nwrapper around the item content to provide additional styling capabilities. `ListItem` contains a\n`Text`.\n- `List::items` has been removed.\n\n```rust\n// Before\nlet items = vec![\n  \"Item1\",\n  \"Item2\",\n  \"Item3\"\n];\nList::default().items(items.iters());\n\n// After\nlet items = vec![\n  ListItem::new(\"Item1\"),\n  ListItem::new(\"Item2\"),\n  ListItem::new(\"Item3\"),\n];\nList::new(items);\n```\n\nSee the examples for more advanced usages.\n\n#### More wrapping options\n\n`Paragraph::wrap` expects `Wrap` instead of `bool` to let users decided whether they want to trim\nwhitespaces when the text is wrapped.\n\n```rust\n// before\nParagraph::new(text).wrap(true)\n// after\nParagraph::new(text).wrap(Wrap { trim: true }) // to have the same behavior\nParagraph::new(text).wrap(Wrap { trim: false }) // to use the new behavior\n```\n\n#### Horizontal scrolling in paragraph\n\nYou can now scroll horizontally in `Paragraph`. The argument of `Paragraph::scroll` has thus be\nchanged from `u16` to `(u16, u16)`.\n\n### Features\n\n#### Serialization of style\n\nYou can now serialize and de-serialize `Style` using the optional `serde` feature.\n\n## v0.9.5 - 2020-05-21\n\n### Bug Fixes\n\n* Fix out of bounds panic in `widgets::Tabs` when the widget is rendered on\nsmall areas.\n\n## v0.9.4 - 2020-05-12\n\n### Bug Fixes\n\n* Ignore zero-width graphemes in `Buffer::set_stringn`.\n\n## v0.9.3 - 2020-05-11\n\n### Bug Fixes\n\n* Fix usize overflows in `widgets::Chart` when a dataset is empty.\n\n## v0.9.2 - 2020-05-10\n\n### Bug Fixes\n\n* Fix usize overflows in `widgets::canvas::Line` drawing algorithm.\n\n## v0.9.1 - 2020-04-16\n\n### Bug Fixes\n\n* The `List` widget now takes into account the width of the `highlight_symbol`\nwhen calculating the total width of its items. It prevents items to overflow\noutside of the widget area.\n\n## v0.9.0 - 2020-04-14\n\n### Features\n\n* Introduce stateful widgets, i.e widgets that can take advantage of keeping\nsome state around between two draw calls (#210 goes a bit more into the\ndetails).\n* Allow a `Table` row to be selected.\n```rust\n// State initialization\nlet mut state = TableState::default();\n\n// In the terminal.draw closure\nlet header = [\"Col1\", \"Col2\", \"Col\"];\nlet rows = [\n  Row::Data([\"Row11\", \"Row12\", \"Row13\"].into_iter())\n];\nlet table = Table::new(header.into_iter(), rows.into_iter());\nf.render_stateful_widget(table, area, &mut state);\n\n// In response to some event:\nstate.select(Some(1));\n```\n* Add a way to choose the type of border used to draw a block. You can now\nchoose from plain, rounded, double and thick lines.\n* Add a `graph_type` property on the `Dataset` of a `Chart` widget. By\ndefault it will be `Scatter` where the points are drawn as is. An other\noption is `Line` where a line will be draw between each consecutive points\nof the dataset.\n* Style methods are now const, allowing you to initialize const `Style`\nobjects.\n* Improve control over whether the legend in the `Chart` widget is shown or\nnot. You can now set custom constraints using\n`Chart::hidden_legend_constraints`.\n* Add `Table::header_gap` to add some space between the header and the first\nrow.\n* Remove `log` from the dependencies\n* Add a way to use a restricted set of unicode symbols in several widgets to\nimprove portability in exchange of a degraded output. (see `BarChart::bar_set`,\n`Sparkline::bar_set` and `Canvas::marker`). You can check how the\n`--enhanced-graphics` flag is used in the demos.\n\n### Breaking Changes\n\n* `Widget::render` has been deleted. You should now use `Frame::render_widget`\nto render a widget on the corresponding `Frame`. This makes the `Widget`\nimplementation totally decoupled from the `Frame`.\n```rust\n// Before\nBlock::default().render(&mut f, size);\n\n// After\nlet block = Block::default();\nf.render_widget(block, size);\n```\n* `Widget::draw` has been renamed to `Widget::render` and the signature has\nbeen updated to reflect that widgets are consumable objects. Thus the method\ntakes `self` instead of `&mut self`.\n```rust\n// Before\nimpl Widget for MyWidget {\n  fn draw(&mut self, area: Rect, buf: &mut Buffer) {\n  }\n}\n\n/// After\nimpl Widget for MyWidget {\n  fn render(self, arera: Rect, buf: &mut Buffer) {\n  }\n}\n```\n* `Widget::background` has been replaced by `Buffer::set_background`\n```rust\n// Before\nimpl Widget for MyWidget {\n  fn render(self, arera: Rect, buf: &mut Buffer) {\n    self.background(area, buf, self.style.bg);\n  }\n}\n\n// After\nimpl Widget for MyWidget {\n  fn render(self, arera: Rect, buf: &mut Buffer) {\n    buf.set_background(area, self.style.bg);\n  }\n}\n```\n* Update the `Shape` trait for objects that can be draw on a `Canvas` widgets.\nInstead of returning an iterator over its points, a `Shape` is given a\n`Painter` object that provides a `paint` as well as a `get_point` method. This\ngives the `Shape` more information about the surface it will be drawn to. In\nparticular, this change allows the `Line` shape to use a more precise and\nefficient drawing algorithm (Bresenham's line algorithm).\n* `SelectableList` has been deleted. You can now take advantage of the\nassociated `ListState` of the `List` widget to select an item.\n```rust\n// Before\nList::new(&[\"Item1\", \"Item2\", \"Item3\"])\n  .select(Some(1))\n  .render(&mut f, area);\n\n// After\n\n// State initialization\nlet mut state = ListState::default();\n\n// In the terminal.draw closure\nlet list = List::new(&[\"Item1\", \"Item2\", \"Item3\"]);\nf.render_stateful_widget(list, area, &mut state);\n\n// In response to some events\nstate.select(Some(1));\n```\n* `widgets::Marker` has been moved to `symbols::Marker`\n\n## v0.8.0 - 2019-12-15\n\n### Breaking Changes\n\n* Bump crossterm to 0.14.\n* Add cross symbol to the symbols list.\n\n### Bug Fixes\n\n* Use the value of `title_style` to style the title of `Axis`.\n\n## v0.7.0 - 2019-11-29\n\n### Breaking Changes\n\n* Use `Constraint` instead of integers to specify the widths of the `Table`\nwidget's columns. This will allow more responsive tables.\n\n```rust\nTable::new(header, row)\n  .widths(&[15, 15, 10])\n  .render(f, chunk);\n```\n\nbecomes:\n\n```rust\nTable::new(header, row)\n  .widths(&[\n    Constraint::Length(15),\n    Constraint::Length(15),\n    Constraint::Length(10),\n  ])\n  .render(f, chunk);\n```\n\n* Bump crossterm to 0.13.\n* Use Github Actions for CI (Travis and Azure Pipelines integrations have been deleted).\n\n### Features\n\n* Add support for horizontal and vertical margins in `Layout`.\n\n## v0.6.2 - 2019-07-16\n\n### Features\n\n* `Text` implements PartialEq\n\n### Bug Fixes\n\n* Avoid overflow errors in canvas\n\n## v0.6.1 - 2019-06-16\n\n### Bug Fixes\n\n* Avoid a division by zero when all values in a barchart are equal to 0.\n* Fix the inverted cursor position in the curses backend.\n* Ensure that the correct terminal size is returned when using the crossterm\nbackend.\n* Avoid highlighting the separator after the selected item in the Tabs widget.\n\n## v0.6.0 - 2019-05-18\n\n### Breaking Changes\n\n* Update crossterm backend\n\n## v0.5.1 - 2019-04-14\n\n### Bug Fixes\n\n* Fix a panic in the Sparkline widget\n\n## v0.5.0 - 2019-03-10\n\n### Features\n\n* Add a new curses backend (with Windows support thanks to `pancurses`).\n* Add `Backend::get_cursor` and `Backend::set_cursor` methods to query and\nset the position of the cursor.\n* Add more constructors to the `Crossterm` backend.\n* Add a demo for all backends using a shared UI and application state.\n* Add `Ratio` as a new variant of layout `Constraint`. It can be used to define\nexact ratios constraints.\n\n### Breaking Changes\n\n* Add support for multiple modifiers on the same `Style` by changing `Modifier`\nfrom an enum to a bitflags struct.\n\nSo instead of writing:\n\n```rust\nlet style = Style::default().add_modifier(Modifier::Italic);\n```\n\none should use:\n\n```rust\nlet style = Style::default().add_modifier(Modifier::ITALIC);\n// or\nlet style = Style::default().add_modifier(Modifier::ITALIC | Modifier::BOLD);\n```\n\n### Bug Fixes\n\n* Ensure correct behavoir of the alternate screens with the `Crossterm` backend.\n* Fix out of bounds panic when two `Buffer` are merged.\n\n## v0.4.0 - 2019-02-03\n\n### Features\n\n* Add a new canvas shape: `Rectangle`.\n* Official support of `Crossterm` backend.\n* Make it possible to choose the divider between `Tabs`.\n* Add word wrapping on Paragraph.\n* The gauge widget accepts a ratio (f64 between 0 and 1) in addition of a\npercentage.\n\n### Breaking Changes\n\n* Upgrade to Rust 2018 edition.\n\n### Bug Fixes\n\n* Fix rendering of double-width characters.\n* Fix race condition on the size of the terminal and expose a size that is\nsafe to use when drawing through `Frame::size`.\n* Prevent unsigned int overflow on large screens.\n\n## v0.3.0 - 2018-11-04\n\n### Features\n\n* Add experimental test backend\n\n## v0.3.0-beta.3 - 2018-09-24\n\n### Features\n\n* `show_cursor` is called when `Terminal` is dropped if the cursor is hidden.\n\n## v0.3.0-beta.2 - 2018-09-23\n\n### Breaking Changes\n\n* Remove custom `termion` backends. This is motivated by the fact that\n`termion` structs are meant to be combined/wrapped to provide additional\nfunctionalities to the terminal (e.g AlternateScreen, Mouse support, ...).\nThus providing exclusive types do not make a lot of sense and give a false\nhint that additional features cannot be used together. The recommended\napproach is now to create your own version of `stdout`:\n\n```rust\nlet stdout = io::stdout().into_raw_mode()?;\nlet stdout = MouseTerminal::from(stdout);\nlet stdout = AlternateScreen::from(stdout);\n```\n\nand then to create the corresponding `termion` backend:\n\n```rust\nlet backend = TermionBackend::new(stdout);\n```\n\nThe resulting code is more verbose but it works with all combinations of\nadditional `termion` features.\n\n## v0.3.0-beta.1 - 2018-09-08\n\n### Breaking Changes\n\n* Replace `Item` by a generic and flexible `Text` that can be used in both\n`Paragraph` and `List` widgets.\n* Remove unecessary borrows on `Style`.\n\n## v0.3.0-beta.0 - 2018-09-04\n\n### Features\n\n* Add a basic `Crossterm` backend\n\n### Breaking Changes\n\n* Remove `Group` and introduce `Layout` in its place\n  - `Terminal` is no longer required to compute a layout\n  - `Size` has been renamed `Constraint`\n* Widgets are rendered on a `Frame` instead of a `Terminal` in order to\navoid mixing `draw` and `render` calls\n* `draw` on `Terminal` expects a closure where the UI is built by rendering\nwidgets on the given `Frame`\n* Update `Widget` trait\n  - `draw` takes area by value\n  - `render` takes a `Frame` instead of a `Terminal`\n* All widgets use the consumable builder pattern\n* `SelectableList` can have no selected item and the highlight symbol is hidden\nin this case\n* Remove markup langage inside `Paragraph`. `Paragraph` now expects an iterator\nof `Text` items\n\n## v0.2.3 - 2018-06-09\n\n### Features\n\n* Add `start_corner` option for `List`\n* Add more text aligment options for `Paragraph`\n\n## v0.2.2 - 2018-05-06\n\n### Features\n\n* `Terminal` implements `Debug`\n\n### Breaking Changes\n\n* Use `FnOnce` instead of `FnMut` in Group::render\n\n## v0.2.1 - 2018-04-01\n\n### Features\n\n* Add `AlternateScreenBackend` in `termion` backend\n* Add `TermionBackend::with_stdout` in order to let an user of the library\nprovides its own termion struct\n* Add tests and documentation for `Buffer::pos_of`\n* Remove leading whitespaces when wrapping text\n\n### Bug Fixes\n\n* Fix `debug_assert` in `Buffer::pos_of`\n* Pass the style of `SelectableList` to the underlying `List`\n* Fix missing character when wrapping text\n* Fix panic when specifying layout constraints\n\n## v0.2.0 - 2017-12-26\n\n### Features\n\n* Add `MouseBackend` in `termion` backend to handle scroll and mouse events\n* Add generic `Item` for items in a `List`\n* Drop `log4rs` as a dev-dependencies in favor of `stderrlog`\n\n### Breaking Changes\n\n* Rename `TermionBackend` to `RawBackend` (to distinguish it from the `MouseBackend`)\n* Generic parameters for `List` to allow passing iterators as items\n* Generic parameters for `Table` to allow using iterators as rows and header\n* Generic parameters for `Tabs`\n* Rename `border` bitflags to `Borders`\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 1.6943359375,
          "content": "# Contributing\n\n## Building\n\n[cargo-make]: https://github.com/sagiegurari/cargo-make \"cargo-make\"\n\n`tui` is an ordinary Rust project where common tasks are managed with [cargo-make].\nIt wraps common `cargo` commands with sane defaults depending on your platform of choice.\nBuilding the project should be as easy as running `cargo make build`.\n\n## :hammer_and_wrench: Pull requests\n\nAll contributions are obviously welcome.\nPlease include as many details as possible in your PR description to help the reviewer (follow the provided template).\nMake sure to highlight changes which may need additional attention or you are uncertain about.\nAny idea with a large scale impact on the crate or its users should ideally be discussed in a \"Feature Request\" issue beforehand.\n\n## Continuous Integration\n\nWe use Github Actions for the CI where we perform the following checks:\n- The code should compile on `stable` and the Minimum Supported Rust Version (MSRV).\n- The tests (docs, lib, tests and examples) should pass.\n- The code should conform to the default format enforced by `rustfmt`.\n- The code should not contain common style issues `clippy`.\n\nYou can also check most of those things yourself locally using `cargo make ci` which will offer you a shorter feedback loop.\n\n## Tests\n\nThe test coverage of the crate is far from being ideal but we already have a fair amount of tests in place.\nBeside the usual doc and unit tests, one of the most valuable test you can write for `tui` is a test again the `TestBackend`.\nIt allows you to assert the content of the output buffer that would have been flushed to the terminal after a given draw call.\nSee `widgets_block_renders` in [tests/widgets_block.rs](./tests/widget_block.rs) for an example.\n"
        },
        {
          "name": "Cargo.toml",
          "type": "blob",
          "size": 1.767578125,
          "content": "[package]\nname = \"tui\"\nversion = \"0.19.0\"\nauthors = [\"Florian Dehau <work@fdehau.com>\"]\ndescription = \"\"\"\nA library to build rich terminal user interfaces or dashboards\n\"\"\"\ndocumentation = \"https://docs.rs/tui/0.19.0/tui/\"\nkeywords = [\"tui\", \"terminal\", \"dashboard\"]\nrepository = \"https://github.com/fdehau/tui-rs\"\nreadme = \"README.md\"\nlicense = \"MIT\"\nexclude = [\"assets/*\", \".github\", \"Makefile.toml\", \"CONTRIBUTING.md\", \"*.log\", \"tags\"]\nautoexamples = true\nedition = \"2021\"\nrust-version = \"1.56.1\"\n\n[badges]\n\n[features]\ndefault = [\"crossterm\"]\n\n[dependencies]\nbitflags = \"1.3\"\ncassowary = \"0.3\"\nunicode-segmentation = \"1.2\"\nunicode-width = \"0.1\"\ntermion = { version = \"1.5\", optional = true }\ncrossterm = { version = \"0.25\", optional = true }\nserde = { version = \"1\", optional = true, features = [\"derive\"]}\n\n[dev-dependencies]\nrand = \"0.8\"\nargh = \"0.1\"\n\n[[example]]\nname = \"barchart\"\nrequired-features = [\"crossterm\"]\n\n[[example]]\nname = \"block\"\nrequired-features = [\"crossterm\"]\n\n[[example]]\nname = \"canvas\"\nrequired-features = [\"crossterm\"]\n\n[[example]]\nname = \"chart\"\nrequired-features = [\"crossterm\"]\n\n[[example]]\nname = \"custom_widget\"\nrequired-features = [\"crossterm\"]\n\n[[example]]\nname = \"gauge\"\nrequired-features = [\"crossterm\"]\n\n[[example]]\nname = \"layout\"\nrequired-features = [\"crossterm\"]\n\n[[example]]\nname = \"list\"\nrequired-features = [\"crossterm\"]\n\n[[example]]\nname = \"panic\"\nrequired-features = [\"crossterm\"]\n\n[[example]]\nname = \"paragraph\"\nrequired-features = [\"crossterm\"]\n\n[[example]]\nname = \"popup\"\nrequired-features = [\"crossterm\"]\n\n[[example]]\nname = \"sparkline\"\nrequired-features = [\"crossterm\"]\n\n[[example]]\nname = \"table\"\nrequired-features = [\"crossterm\"]\n\n[[example]]\nname = \"tabs\"\nrequired-features = [\"crossterm\"]\n\n[[example]]\nname = \"user_input\"\nrequired-features = [\"crossterm\"]\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.0546875,
          "content": "The MIT License (MIT)\n\nCopyright (c) 2016 Florian Dehau\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "Makefile.toml",
          "type": "blob",
          "size": 2.650390625,
          "content": "[config]\nskip_core_tasks = true\n\n[tasks.ci]\nrun_task = [\n    { name = \"ci-unix\", condition = { platforms = [\"linux\", \"mac\"] } },\n    { name = \"ci-windows\", condition = { platforms = [\"windows\"] } },\n]\n\n[tasks.ci-unix]\nprivate = true\ndependencies = [\n    \"fmt\",\n    \"check-crossterm\",\n    \"check-termion\",\n    \"test-crossterm\",\n    \"test-termion\",\n    \"clippy-crossterm\",\n    \"clippy-termion\",\n    \"test-doc\",\n]\n\n[tasks.ci-windows]\nprivate = true\ndependencies = [\n    \"fmt\",\n    \"check-crossterm\",\n    \"test-crossterm\",\n    \"clippy-crossterm\",\n    \"test-doc\",\n]\n\n[tasks.fmt]\ncommand = \"cargo\"\nargs = [\n  \"fmt\",\n  \"--all\",\n  \"--\",\n  \"--check\",\n]\n\n[tasks.check-crossterm]\nenv = { TUI_FEATURES = \"serde,crossterm\" }\nrun_task = \"check\"\n\n[tasks.check-termion]\nenv = { TUI_FEATURES = \"serde,termion\" }\nrun_task = \"check\"\n\n[tasks.check]\ncommand = \"cargo\"\ncondition = { env_set = [\"TUI_FEATURES\"] }\nargs = [\n  \"check\",\n  \"--no-default-features\",\n  \"--features\",\n  \"${TUI_FEATURES}\",\n  \"--all-targets\",\n]\n\n[tasks.build-crossterm]\nenv = { TUI_FEATURES = \"serde,crossterm\" }\nrun_task = \"build\"\n\n[tasks.build-termion]\nenv = { TUI_FEATURES = \"serde,termion\" }\nrun_task = \"build\"\n\n[tasks.build]\ncommand = \"cargo\"\ncondition = { env_set = [\"TUI_FEATURES\"] }\nargs = [\n  \"build\",\n  \"--no-default-features\",\n  \"--features\",\n  \"${TUI_FEATURES}\",\n  \"--all-targets\",\n]\n\n[tasks.clippy-crossterm]\nenv = { TUI_FEATURES = \"serde,crossterm\" }\nrun_task = \"clippy\"\n\n[tasks.clippy-termion]\nenv = { TUI_FEATURES = \"serde,termion\" }\nrun_task = \"clippy\"\n\n[tasks.clippy]\ncommand = \"cargo\"\ncondition = { env_set = [\"TUI_FEATURES\"] }\nargs = [\n  \"clippy\",\n  \"--all-targets\",\n  \"--no-default-features\",\n  \"--features\",\n  \"${TUI_FEATURES}\",\n  \"--\",\n  \"-D\",\n  \"warnings\",\n]\n\n[tasks.test-crossterm]\nenv = { TUI_FEATURES = \"serde,crossterm\" }\nrun_task = \"test\"\n\n[tasks.test-termion]\nenv = { TUI_FEATURES = \"serde,termion\" }\nrun_task = \"test\"\n\n[tasks.test]\ncommand = \"cargo\"\ncondition = { env_set = [\"TUI_FEATURES\"] }\nargs = [\n  \"test\",\n  \"--no-default-features\",\n  \"--features\",\n  \"${TUI_FEATURES}\",\n  \"--lib\",\n  \"--tests\",\n  \"--examples\",\n]\n\n[tasks.test-doc]\ncommand = \"cargo\"\nargs = [\n  \"test\",\n  \"--doc\",\n]\n\n[tasks.run-example]\nprivate = true\ncondition = { env_set = [\"TUI_EXAMPLE_NAME\"] }\ncommand = \"cargo\"\nargs = [\n    \"run\",\n    \"--release\",\n    \"--example\",\n    \"${TUI_EXAMPLE_NAME}\"\n]\n\n[tasks.build-examples]\ncommand = \"cargo\"\nargs = [\n    \"build\",\n    \"--examples\",\n    \"--release\"\n]\n\n[tasks.run-examples]\ndependencies = [\"build-examples\"]\nscript = '''\n#!@duckscript\nfiles = glob_array ./examples/*.rs\nfor file in ${files}\n  name = basename ${file}\n  name = substring ${name} -3\n  set_env TUI_EXAMPLE_NAME ${name}\n  cm_run_task run-example\nend\n'''\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 6.8544921875,
          "content": "# tui-rs\n\n⚠️ **August 2023: This crate is no longer maintained. See https://github.com/ratatui-org/ratatui for an actively maintained fork.** ⚠️\n\n[![Build Status](https://github.com/fdehau/tui-rs/workflows/CI/badge.svg)](https://github.com/fdehau/tui-rs/actions?query=workflow%3ACI+)\n[![Crate Status](https://img.shields.io/crates/v/tui.svg)](https://crates.io/crates/tui)\n[![Docs Status](https://docs.rs/tui/badge.svg)](https://docs.rs/crate/tui/)\n\n<img src=\"./assets/demo.gif\" alt=\"Demo cast under Linux Termite with Inconsolata font 12pt\">\n\n`tui-rs` is a [Rust](https://www.rust-lang.org) library to build rich terminal\nuser interfaces and dashboards. It is heavily inspired by the `Javascript`\nlibrary [blessed-contrib](https://github.com/yaronn/blessed-contrib) and the\n`Go` library [termui](https://github.com/gizak/termui).\n\nThe library supports multiple backends:\n  - [crossterm](https://github.com/crossterm-rs/crossterm) [default]\n  - [termion](https://github.com/ticki/termion)\n\nThe library is based on the principle of immediate rendering with intermediate\nbuffers. This means that at each new frame you should build all widgets that are\nsupposed to be part of the UI. While providing a great flexibility for rich and\ninteractive UI, this may introduce overhead for highly dynamic content. So, the\nimplementation try to minimize the number of ansi escapes sequences generated to\ndraw the updated UI. In practice, given the speed of `Rust` the overhead rather\ncomes from the terminal emulator than the library itself.\n\nMoreover, the library does not provide any input handling nor any event system and\nyou may rely on the previously cited libraries to achieve such features.\n\n**I'm actively looking for help maintaining this crate. See [this issue](https://github.com/fdehau/tui-rs/issues/654)**\n\n### Rust version requirements\n\nSince version 0.17.0, `tui` requires **rustc version 1.56.1 or greater**.\n\n### [Documentation](https://docs.rs/tui)\n\n### Demo\n\nThe demo shown in the gif can be run with all available backends.\n\n```\n# crossterm\ncargo run --example demo --release -- --tick-rate 200\n# termion\ncargo run --example demo --no-default-features --features=termion --release -- --tick-rate 200\n```\n\nwhere `tick-rate` is the UI refresh rate in ms.\n\nThe UI code is in [examples/demo/ui.rs](https://github.com/fdehau/tui-rs/blob/v0.19.0/examples/demo/ui.rs) while the\napplication state is in [examples/demo/app.rs](https://github.com/fdehau/tui-rs/blob/v0.19.0/examples/demo/app.rs).\n\nIf the user interface contains glyphs that are not displayed correctly by your terminal, you may want to run\nthe demo without those symbols:\n\n```\ncargo run --example demo --release -- --tick-rate 200 --enhanced-graphics false\n```\n\n### Widgets\n\nThe library comes with the following list of widgets:\n\n  * [Block](https://github.com/fdehau/tui-rs/blob/v0.19.0/examples/block.rs)\n  * [Gauge](https://github.com/fdehau/tui-rs/blob/v0.19.0/examples/gauge.rs)\n  * [Sparkline](https://github.com/fdehau/tui-rs/blob/v0.19.0/examples/sparkline.rs)\n  * [Chart](https://github.com/fdehau/tui-rs/blob/v0.19.0/examples/chart.rs)\n  * [BarChart](https://github.com/fdehau/tui-rs/blob/v0.19.0/examples/barchart.rs)\n  * [List](https://github.com/fdehau/tui-rs/blob/v0.19.0/examples/list.rs)\n  * [Table](https://github.com/fdehau/tui-rs/blob/v0.19.0/examples/table.rs)\n  * [Paragraph](https://github.com/fdehau/tui-rs/blob/v0.19.0/examples/paragraph.rs)\n  * [Canvas (with line, point cloud, map)](https://github.com/fdehau/tui-rs/blob/v0.19.0/examples/canvas.rs)\n  * [Tabs](https://github.com/fdehau/tui-rs/blob/v0.19.0/examples/tabs.rs)\n\nClick on each item to see the source of the example. Run the examples with with \ncargo (e.g. to run the gauge example `cargo run --example gauge`), and quit by pressing `q`.\n\nYou can run all examples by running `cargo make run-examples` (require\n`cargo-make` that can be installed with `cargo install cargo-make`).\n\n### Third-party widgets\n\n* [tui-logger](https://github.com/gin66/tui-logger)\n* [tui-textarea](https://github.com/rhysd/tui-textarea): simple yet powerful multi-line text editor widget supporting several key shortcuts, undo/redo, text search, etc.\n* [tui-rs-tree-widgets](https://github.com/EdJoPaTo/tui-rs-tree-widget): widget for tree data structures.\n\n### Apps using tui\n\n* [spotify-tui](https://github.com/Rigellute/spotify-tui)\n* [bandwhich](https://github.com/imsnif/bandwhich)\n* [kmon](https://github.com/orhun/kmon)\n* [gpg-tui](https://github.com/orhun/gpg-tui)\n* [ytop](https://github.com/cjbassi/ytop)\n* [zenith](https://github.com/bvaisvil/zenith)\n* [bottom](https://github.com/ClementTsang/bottom)\n* [oha](https://github.com/hatoo/oha)\n* [gitui](https://github.com/extrawurst/gitui)\n* [rust-sadari-cli](https://github.com/24seconds/rust-sadari-cli)\n* [desed](https://github.com/SoptikHa2/desed)\n* [diskonaut](https://github.com/imsnif/diskonaut)\n* [tickrs](https://github.com/tarkah/tickrs)\n* [rusty-krab-manager](https://github.com/aryakaul/rusty-krab-manager)\n* [termchat](https://github.com/lemunozm/termchat)\n* [taskwarrior-tui](https://github.com/kdheepak/taskwarrior-tui)\n* [gping](https://github.com/orf/gping/)\n* [Vector](https://vector.dev)\n* [KDash](https://github.com/kdash-rs/kdash)\n* [xplr](https://github.com/sayanarijit/xplr)\n* [minesweep](https://github.com/cpcloud/minesweep-rs)\n* [Battleship.rs](https://github.com/deepu105/battleship-rs)\n* [termscp](https://github.com/veeso/termscp)\n* [joshuto](https://github.com/kamiyaa/joshuto)\n* [adsb_deku/radar](https://github.com/wcampbell0x2a/adsb_deku#radar-tui)\n* [hoard](https://github.com/Hyde46/hoard)\n* [tokio-console](https://github.com/tokio-rs/console): a diagnostics and debugging tool for asynchronous Rust programs.\n* [hwatch](https://github.com/blacknon/hwatch): a alternative watch command that records the result of command execution and can display its history and diffs.\n* [ytui-music](https://github.com/sudipghimire533/ytui-music): listen to music from youtube inside your terminal.\n* [mqttui](https://github.com/EdJoPaTo/mqttui): subscribe or publish to a MQTT Topic quickly from the terminal.\n* [meteo-tui](https://github.com/16arpi/meteo-tui): french weather via the command line.\n* [picterm](https://github.com/ksk001100/picterm): preview images in your terminal.\n* [gobang](https://github.com/TaKO8Ki/gobang): a cross-platform TUI database management tool.\n* [oxker](https://github.com/mrjackwills/oxker): a simple tui to view & control docker containers.\n* [trippy](https://github.com/fujiapple852/trippy): a network diagnostic tool.\n* [cotp](https://github.com/replydev/cotp): a trustworthy, encrypted, command-line TOTP/HOTP authenticator app with import functionality.\n* [hg-tui](https://github.com/kaixinbaba/hg-tui): view [hellogithub.com](https://hellogithub.com/) website on the terminal.\n\n### Alternatives\n\nYou might want to checkout [Cursive](https://github.com/gyscos/Cursive) for an\nalternative solution to build text user interfaces in Rust.\n\n## License\n\n[MIT](LICENSE)\n"
        },
        {
          "name": "assets",
          "type": "tree",
          "content": null
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}