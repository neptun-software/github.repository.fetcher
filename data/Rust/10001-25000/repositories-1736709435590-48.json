{
  "metadata": {
    "timestamp": 1736709435590,
    "page": 48,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjUw",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "kitao/pyxel",
      "stars": 15662,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.033203125,
          "content": "* text=auto\n*.whl binary diff=zip\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.02734375,
          "content": "dist/\nvenv/\n*.pyc\n.DS_Store\n"
        },
        {
          "name": ".nojekyll",
          "type": "blob",
          "size": 0,
          "content": ""
        },
        {
          "name": ".vscode",
          "type": "tree",
          "content": null
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 37.625,
          "content": "# Change Log\n\n## 2.3.0\n\n- Updated to upload-artifact@v4 with unique artifact names\n- Fixed types in the pyi file\n\n## 2.2.10\n\n- Updated the pyo3 crate to version 2.3\n- Reduced the sound clock rate from 120MHz to 2.048MHz\n\n## 2.2.9\n\n- Fixed to include the LICENSE file in the Python package\n- Excluded the pycache directory from the copy_examples command\n- Updated the message image for the READMEs\n- Fixed clippy warnings\n\n## 2.2.8\n\n- Modified a shortcut description in the READMEs\n- Renamed (tile_x, tile_y) to (image_tx, image_ty) in the READMEs\n- Replaced the usage of a deprecated API\n- Changed the tilemap editor to load Layer 0 when a TMX file is dropped onto it\n- Updated Maturin to the latest version\n- Updated Pyodide to version 0.26.4\n- Updated the indexmap crate to version 2.7\n- Updated the once_cell crate to version 1.20\n- Updated the zip crate to version 2.2\n- Updated the sysinfo crate to version 0.33\n- Updated the glow crate to version 0.16\n- Updated the bindgen crate to version 0.71\n- Raised the minimum supported macOS to version 13\n- Fixed a bug in the mouse cursor position\n\n## 2.2.7\n\n- Updated Pyodide to version 0.26.3\n- Added the perf_monitor function\n- Added the integer_scale function\n- Renamed the argument of the fullscreen function\n- Added the integer-scale toggle feature with Alt(Option)+8\n- Added the gamepad shortcuts using A+B+X+Y+DL/DR/DU/DD\n- Changed the default scaling from integer to maximum\n\n## 2.2.6\n\n- Renamed WORKING_DIR to BASE_DIR\n- Added the user_data_dir function\n- Switched from the platform-dir crate to the directories crate\n- Update the glow crate to version 0.15\n- Fully revised the translations of all README files\n\n## 2.2.5\n\n- Fixed the displayed color issue caused by the sRGB setting\n- Added a note regarding the usage of the run command on the web\n\n## 2.2.4\n\n- Fixed a bug when playing a pyxapp with the same process ID\n- Updated the sysinfo crate to version 0.25\n- Updated the license description in the READMEs\n- Updated the instructions for using the Web version of Pyxel\n- Updated the Q&A\n\n## 2.2.3\n\n- Updated the description of Pyxel's features in the READMEs\n- Ensured that the metadata is in UTF-8 format\n- Added the pyxel.cli.get_pyxel_app_metadata function\n- Added the pyxel.cli.print_pyxel_app_metadata function\n- Fixed a warning on macOS Sonoma\n- Fixed new clippy warnings\n\n## 2.2.2\n\n- Fixed the mypy errors\n- Changed an image layout in the READMEs\n- Updated Python in GitHub Actions to version 3.12\n- Enabled adding metadata to a Pyxel application file\n- Added metadata to the bundled Pyxel application files\n\n## 2.2.1\n\n- Added the pyxel watch command description to the READMEs\n- Removed an unnecessary line in Example 14\n- Added the Font class\n- Added a font option to the text function\n- Changed Example 14 to use the native font rendering\n\n## 2.2.0\n\n- Removed the keyword-only arguments\n- Added the rotate and scale options to the blt and bltm functions\n- specified Maturin to version 1.7.0 to prevent linking errors\n- Modified the API notation in Example 4\n- Added Example 16 for rotation and scaling\n\n## 2.1.10\n\n- Fixed a color rendering issue on Windows\n- Replaced links to Twitter with X in the READMEs\n- Updated the bindgen crate to version 0.70\n\n## 2.1.9\n\n- Updated the required Python to version 3.8 or higher\n- Changed to avoid using the gil-refs feature in the pyo3 crate\n- Changed to prevent key state changes during special inputs\n\n## 2.1.8\n\n- Updated Emscripten to version 3.1.61\n- Updated SDL2 to version 2.28.4\n- Updated the pyo3 crate to version 0.22\n- Fixed keyword-only arguments functionality\n\n## 2.1.7\n\n- Modified a help messages in Pyxel Editor\n- Changed the return value type of the sgn function to integer\n- Fixed the push back process in Example 10 and 15\n- Fixed being able to edit during playback in Pyxel Editor\n- Fixed incorrect array references during playback in Pyxel Editor\n- Updated the sysinfo crate to version 0.31\n\n## 2.1.6\n\n- Updated the message image for the READMEs\n- Added Turkish and Ukrainian READMEs\n- Fixed a warning on macOS Sonoma\n- Updated Pyodide to version 0.26.2\n- Updated the glow crate to version 0.14\n\n## 2.1.5\n\n- Updated the description of the set_effects method in the READMEs\n- Added a value change shortcut to the Sound and the music editors\n- Changed the initial value for the noise sound register\n- Suppressed the outdated resource file version warning\n- Changed the mutex control for sound playback\n\n## 2.1.4\n\n- Added a bank copy feature to Pyxel Editor\n- Fixed the version check for the resource file\n\n## 2.1.3\n\n- Incremented the resource format version\n\n## 2.1.2\n\n- Updated the descriptions of the pget and pget functions\n- Added the Half-FadeOut and Quarter-FadeOut effects to the Sound class\n- Fixed the warp_mouse function\n\n## 2.1.1\n\n- Fixed the resume option of the play function\n- Removed the non-functional CTRL+Drop feature from Pyxel Editor\n- Updated the zip crate version\n\n## 2.1.0\n\n- Fixed a help message in Pyxel Editor\n- Added a resume option to the play function\n- Changed the API notation in Example 4\n- Changed Example 9 to use the resume option for SFX playback\n- Added the descriptions of the resume option to the READMEs\n- Updated Pyodide to version 0.26.1\n\n## 2.0.14\n\n- Fixed the bltm referencing out of range\n\n## 2.0.13\n\n- Updated the make update command\n- Fixed the app2exe and app2html commands\n\n## 2.0.12\n\n- Fixed installation instructions for Mac in the READMEs\n- Modified build instructions in Makefile\n- Updated Pyodide to version 0.25.1\n- Updated Emscripten to version 3.1.53\n\n## 2.0.11\n\n- Added error messages for the pyxel command\n- Updated crate versions\n\n## 2.0.10\n\n- Changed the location of pyproject.toml and requirements.txt\n- Fixed the sqrt function\n- Fixed a non pixel perfect bug for OpenGL ES\n- Added support for encodings other than UTF-8 in the app2exe command\n\n## 2.0.9\n\n- Fixed the timing to disable the slide effect\n- Fixed the release script\n\n## 2.0.8\n\n- Changed the directory structure of the project\n- Organized project metadata for Rust and Python\n- Disabled the slide effect on the first note of a sound\n- Fixed clippy warnings\n\n## 2.0.7\n\n- Turned off the high DPI mode for performance perspective\n- Added a shortcut to output the current color palette\n- Added load_tmx and load method to the Tilemap class\n- Enabled importing a TMX file via drag and drop in the tilemap editor\n- Changed destination for image drag-and-drop in the image editor\n- Refined the code for Example 9 and Example 10\n- Added a incl_colors option to the from_image method of the Image class\n- Added a incl_colors option to the load method of the Image class\n- Added Example 15\n- Refined Example 10\n- Fixed a color count change bug on OpenGL ES\n\n## 2.0.6\n\n- Added support for high DPI mode\n- Changed the way to determine whether to use OpenGL or OpenGL ES\n\n## 2.0.5\n\n- Restored the publish of the crate to the release script\n- Fixed a bug in Pyxel Editor when creating new resource files\n\n## 2.0.4\n\n- Fixed a mouse wheel bug\n- Added a shortcut to output an image bank\n\n## 2.0.3\n\n- Increased the audio clock rate to 120MHz\n- Changed the mouse cursor position when focus is lost\n\n## 2.0.2\n\n- Changed the order of declarations in the pyi file\n- Changed Music.set to not require specifying all channels\n- Changed to use Ruff for lint and format of Python code\n- Added Example 14\n\n## 2.0.1\n\n- Removed the publish of the crate to the release script\n- Changed the type of tile coordinates from u16 back to u8\n- Removed source code path from the binary\n- Renamed Waveform and waveforms to Tone and tones\n- Updated the resource file format for the tones\n- Changed CDN links to use the latest Pyxel explicitly\n- Changed Sound.set_tones to accept digits\n- Added Example 14 (still under development)\n\n## 2.0.0\n\n- Changed to use the C version of SDL2\n- Changed to allow resizing of the colors list\n- Changed to use GLSL for rendering the screen\n- Updated Pyodide to version 0.24.1\n- Updated Emscripten to version 3.1.45\n- Updated SDL2 to 2.24.2\n- Added the screen_mode function to change screen rendering type\n- Added a shortcut to change the screen mode with Alt(Option)+9\n- Added support for the third and fourth gamepads\n- Added the dither function to set dithering type\n- Added images, tilemaps as system lists\n- Marked the image and tilemap functions as deprecated functions\n- Added channels, sounds, and musics as system lists\n- Marked the channel, sounds, adn musics function as deprecated functions\n- Renamed the reset_capture function to reset_screencast\n- Renamed the set_mouse_pos function to warp_mouse\n- Renamed the drop_files variable to dropped_files\n- Removed the is_fullscreen variable\n- Removed the input_keys variable\n- Removed the set_btn and set_btnv functions\n- Integrated the image and refimg of Tilemap into imgsrc\n- Marked the image and refimg of Tilemap as deprecated fields\n- Renamed snds_list of Music to seqs\n- Marked the snds_list of Music as a deprecated field\n- Changed to a new resource format based on TOML\n- Changed arguments to the load and save functions\n- Added Waveform class for waveform editing\n- Added waveforms as a system list\n- Added a detune field to Channel\n- Updated 8bit BGM generator to the latest version\n\n## 1.9.18\n\n- Added the windowed and icon options to PyInstaller\n\n## 1.9.17\n\n- Replaced an image in the READMEs\n- Fixed the app2exe command to include modules correctly\n- Added support for Raspberry Pi (ARMv7)\n- Updated Emscripten to version 3.1.42\n- Updated Pyodide to version 0.23.3\n- Updated crate versions\n\n## 1.9.16\n\n- Disabled quit by ESC key in Pyxel Editor\n- Fixed the nseed function\n- Bundled 8bit BGM generator by frenchbread\n- Added BGMs by 8bit BGM generator to Example 9\n\n## 1.9.15\n\n- Changed the platform specification method in Rust for FreeBSD\n- Changed to use the official Pyodide instead of the customized version\n- Updated Emscripten to version 3.1.36\n- Expanded the supported macOS 10.12+ (Intel), 11.0+ (Apple Silicon)\n\n## 1.9.14\n\n- Modified the layout of Example 13\n- Fixed bounding box handling for BDF font rendering\n\n## 1.9.13\n\n- Added URL generator to Pyxel Web Launcher\n- Added a data_ptr method to the Image and Tilemap class\n- Updated Emscripten to version 3.1.34\n- Added Example 13\n\n## 1.9.12\n\n- Added support for environments without game controllers\n- Adjusted the initial gain of the sound\n- Updated Emscripten to version 3.1.31\n\n## 1.9.11\n\n- Changed Makefile to lint Emscripten code\n- Fixed clippy warnings\n- Modified the instruction for Pyxel.colors list\n- Added error messages for Pyxel command\n- Fixed the default filename of Pyxel Editor for web\n\n## 1.9.10\n\n- Changed to use the clear function of SDL2\n- Fixed virtual and real gamepads working at the same time\n\n## 1.9.9\n\n- Changed to not use array macro\n- Fixed clippy warnings\n- Updated Emscripten to version 3.1.29\n- Updated Pyodide to version 0.22.0\n- Fixed gamepad input bug\n- Enabled dynamic addition of gamepads\n- Changed a help message for the tilemap editor\n\n## 1.9.8\n\n- Modified description for Example 13\n- Added system palette colors besides normal palette colors\n- Changed to keep the default palette color in Pyxel Editor\n- Updated Emscripten to version 3.1.28\n- Updated the source of Pyodide-SDL2\n\n## 1.9.7\n\n- Simplified utility scripts\n- Added show command description to the READMEs\n- Restored the flip function for non-web only\n- Added Example 99 (for non-web only)\n- Added Pyxel palette file (.pyxpal) support\n\n## 1.9.6\n\n- Added a link to the code to the examples list\n- Changed the save location of the watch command information\n- Added instructions on how to install Pyxel on Mac\n- Adjusted window resizing timing of the watch command\n\n## 1.9.5\n\n- Fixed to work without body tag in Pyxel Web\n- Added the app2html command to create an HTML page\n\n## 1.9.4\n\n- Fixed error handling of the pyxel command\n- Added the app2exe command to create an executable\n\n## 1.9.3\n\n- Limited depth to be checked to 3 for the watch command\n- Fixed the package command to accept various file specifications\n- Removed extra files from sample Pyxel application files\n- Added running message to the watch command\n\n## 1.9.2\n\n- Fixed the watch command to work on Windows\n\n## 1.9.1\n\n- Added the watch command for live coding\n- Renamed PYXEL_VERSION to VERSION\n- Renamed PYXEL_WORKING_DIR to WORKING_DIR\n- Added the WATCH_INFO_FILE constant\n- Fixed filename for downloads in Pyxel Web\n- Changed the way to specify a file in the package command\n- Fixed some statements in the READMEs\n\n## 1.9.0\n\n- Added a video and a message to users to the READMEs\n- Updated Pyodide\n- Updated Emscripten to version 3.1.24\n\n## 1.8.22\n\n- Added file save function for the web\n- Changed to prevent web browser ctrl+s action in Pyxel Editor\n\n## 1.8.21\n\n- Changed to use CSS variables for the web\n- Removed unnecessary sleep for the web\n\n## 1.8.20\n\n- Changed to not set the position style for the screen div\n- Added a packages attribute to the script_test example\n\n## 1.8.19\n\n- Fixed URLs in the launcher page\n- Fixed resizing of screen elements correctly\n- Suppressed screen flickering at startup for the web\n\n## 1.8.18\n\n- Fixed the name of the startup script to be main\n- Changed file structure and launcher URL\n\n## 1.8.17\n\n- Limited control restriction for the web\n- Separated the color scheme for the web\n\n## 1.8.16\n\n- Added access analytics code for the web pages\n- Enabled to launch Pyxel Web from JavaScript\n- Enabled to change a screen div\n- Fixed the bltm figure for the READMEs\n- Fixed to display message when screenshot failed\n\n## 1.8.15\n\n- Changed the splash image size for the web\n- Suppressed position shift at startup in Mobile Chrome\n\n## 1.8.14\n\n- Added the link to Web examples in the READMEs\n- Added the packages attribute to HTML custom elements\n- Updated Pyodide-SDL2 to support additional packages\n\n## 1.8.13\n\n- Changed to specify Pyxel version in CDN links\n- Fixed link to the examples\n- Added the starting editor parameter to Pyxel Editor\n\n## 1.8.12\n\n- Changed to auto load files without the pyxel-asset element\n\n## 1.8.11\n\n- Changed to use the latest CDN\n- Changed to cancel frame skip when elapsed time is large\n- Fixed the version number check\n\n## 1.8.10\n\n- Added Pyxel Web Launcher\n- Changed to show an error message from Python on the web\n\n## 1.8.9\n\n- Changed the color scheme for the web\n- Added virtual gamepad support for the web\n- Added gamepad support to examples\n- Added the gamepad attribute to HTML custom elements\n- Modified key assigns for Pyxel application files\n\n## 1.8.8\n\n- Changed to wait for user input on the PC web\n- Changed the server script to detect Windows\n\n## 1.8.7\n\n- Fixed file existence check in Pyxel Editor\n- Fixed to play sounds for the web on mobile devices\n- Removed the onstart attribute from the custom elements\n- Changed to display Pyxel logo while loading\n- Added \"tap to start\" menu for the web on mobile devices\n\n## 1.8.6\n\n- Changed to not the sdist wheel\n- Refined the show API\n- Changed to use emscripten_force_exit for quit\n- Surppressed an exception error message on the web\n- Fixed a flip bug in Pyxel Editor\n- Added directory existence check to Pyxel Editor\n\n## 1.8.5\n\n- Fixed the links to the examples in the READMEs\n- Added utility functions to the script for the web\n- Added custom elements for the web\n\n## 1.8.4\n\n- Modified the background color\n- Made the Pyxel on WASM page compatible with dark mode\n- Fixed the canvas height on iOS\n- Separated Pyodide-SDL2 into a separate repository\n- Changed to use Pyodide-SDL2 via CDN\n- Added instructions for Web platform to the READMEs\n\n## 1.8.3\n\n- Added a script to build and copy Pyodide\n- Changed the audio buffer size for WASM\n- Added a utility module for WASM\n- Removed the module_search_path option from CLI\n- Changed functions for CLI to public\n- Fixed to stop playing music on quit on WASM\n- Removed the flip function for WASM support\n- Fixed the mouse coordinates in WASM\n- Changed to release the sdist wheel as well\n- Change the background color to brighter\n- Added links for Pyxel on WASM to the READEMEs\n\n## 1.8.2\n\n- Fixed to release crates correctly\n- Added 32-bit Linux support\n- Added a README-abspath\n\n## 1.8.1\n\n- Added 32-bit Windows support\n- Added ARM64 Linux support\n- Changed to use manylinux to build Linux wheels\n- Fixed links in the READMEs\n\n## 1.8.0\n\n- Changed to include the blip-buf module\n- Renamed inner SDL2 module to PlatformSdl2\n- Added fall death to Example 10\n- Fixed Example 12 to not capture the screen\n- Consolidated tool settings into pyproject.toml\n- Fixed to work without audio\n- Changed to build wheels for each platform\n- Added experimental web browser support\n\n## 1.7.2\n\n- Fixed function names in the READMEs\n- Added a configuration for isort\n- Added flip functions to Pyxel Editor\n- Fixed clippy warnings\n\n## 1.7.1\n\n- Fixed the description for Tilemap.set in the READMEs\n- Fixed the link to Example 12 in the READMEs\n- Fixed the examples layout in the READMEs\n- Updated links for Discord Servers in the READMEs\n- Changed the way to set crate versions\n- Added a display_scale option to the init function\n- Changed the default window size slightly smaller\n\n## 1.7.0\n\n- Fixed type hint definitions\n- Changed the location of working directory\n- Added Ctrl+A and Ctrl+X shortcuts for the image/tilemap editor\n- Added copy and paste feature for the sound/music editor\n- Renamed the sequences property of the Music class to snds_list\n- Added Example 12\n- Updated external library versions\n- Fixed a parameter name of the btnp function\n\n## 1.6.9\n\n- Fixed the select tool of Pyxel Editor\n- Refactored the drawing functions\n- Added utility functions for math\n- Fixed the play command bug on Windows\n\n## 1.6.8\n\n- Fixed to receive mouse input when window is activated\n- Fixed the window to be active when a file is dropped\n- Added the elli and ellib functions\n- Added the fill function\n- Fixed to work even when audio is not installed\n- Updated the READMEs\n\n## 1.6.7\n\n- Fixed a file drop bug\n- Changed to pause only when minimized\n\n## 1.6.6\n\n- Integrated the release and public actions\n- Added the PYXEL_WORKING_DIR constant\n- Added a mechanism to check the latest version\n- Fixed a bug of the play_pos function\n- Added a tick option to the play and playm functions\n- Added a partial playback feature to Pyxel Editor\n- Fixed a mouse click handling in the sound editor\n- Updated the READMEs\n\n## 1.6.5\n\n- Fixed the GitHub Actions workflow to publish\n\n## 1.6.2\n\n- Fixed the play command to remove working directories\n- Fixed the key repeat bug\n- Added the GitHub Actions workflow to build\n- Removed the cli function\n- Updated the READMEs\n\n## 1.6.1\n\n- Fixed the pyxel play command on Windows\n- Updated the READMEs\n\n## 1.6.0\n\n- Fixed the pip command option in the READMEs\n- Fixed to ensure that key inputs are detected\n- Removed the unused click event from the Widget class\n- Bundled the arcade ball physics game by Adam\n\n## 1.5.8\n\n- Fixed a pyxapp to be included in Python wheel\n- Fixed clippy warnings\n\n## 1.5.7\n\n- Fixed Example 11 images\n- Added the module search path option to the pyxel command\n- Changed the default install directory on Windows\n- Added tests for the package and play options\n- Renamed setbtn, setbtnv, and setmpos\n- Changed fullscreen to take an argument\n- Added the is_fullscreen variable\n- Registered Pyxel to GitHub Sponsors\n- Bundled the 1st Pyxel Jam winning game by Adam\n- Updated the READMEs\n\n## 1.5.6\n\n- Fixed the categories of the Pyxel crates\n- Fixed the key input bug of flip\n- Added shortcuts for the tilemap editor\n- Added Example 11\n- Changed the Makefile to be usable in MinGW shell\n- Updated the READMEs\n\n## 1.5.5\n\n- Fixed to record the screen video with collect interval\n- Renamed the input setters to setbtn, setbtnv and setmpos\n- Changed the input setters to get floating numbers\n- Changed the key definitions to SDL2 Keycode base\n- Updated the example videos\n- Updated Pyxel Editor videos\n- Modified the melody of Example 10\n\n## 1.5.4\n\n- Added the file operation error messages\n- Refined the python code\n- Updated the README in Korean\n- Updated the README in Portuguese\n- Changed to stop updating when the window is inactive\n- Changed to the quit to end the application immediately\n- Fixed the animated GIF recorder\n- Modified the vibrato depth parameter\n- Added the SFX and BGM to Example 10\n- Fixed the play button bug in the sound editor\n- Fixed the editing method for the piano roll\n- Added the capture_scale option to the init\n- Added the scale option to the screenshot and screencast\n- Improved the sound playback response\n- Added the screen video of Example 10\n\n## 1.5.3\n\n- Fixed the tilemap editor\n- Replaced the asset for Example 10\n- Fixed the typo in the READMEs\n\n## 1.5.2\n\n- Added the camera function\n- Changed the arguments of the bltm function\n- Added support for crates.io\n- Updated the README in Portuguese\n- Added the script to update the version number\n- Fixed the type hints for the optional arguments\n- Fixed the Makefile for ARM Linux\n- Added support for GLIBC 2.27\n\n## 1.5.1\n\n- Updated the README in German\n- Updated the README in Chinese\n- Updated the README in Korean\n- Updated the README in Spanish\n- Updated the README in French\n- Fixed file permission error when running pyxapp\n- Fixed an argument name of the blt function\n- Fixed a bug when self-copying with the blt function\n- Changed the release build method for Makefile\n- Restored Pyxel Editor to quit with Esc key\n- Fixed a bug of the scrolling area of Pyxel Editor\n- Supported the Universal Binary for M1 Mac\n- Reduced the git repository size\n\n## 1.5.0\n\n- Re-implemented the core engine in Rust\n- Changed to statically link SDL2 libraries for Mac\n- Renamed the key constants to the same as SDL2\n- Added the pyxel command to work standalone without Python\n- Added the cli function to launch command line interface\n- Added support for Pyxel application file (.pyxapp)\n- Added the installer for Windows\n- Simplified the init function arguments\n- Removed maximum screen size limit\n- Enabled to change maximum capture time to reduce reserved memory\n- Added support loading various image formats other than PNG\n- Optimized GIF animation compression\n- Enabled to add the image banks and tilemap banks dynamically\n- Added drawing methods to the Image and Tilemap class\n- Changed the tile format of tilemap to tuple of (image_tx, image_ty)\n- Renamed the properties of the Sound and Music class\n- Changed the play_pos function to return a tuple of sound and note\n- Supported dynamic palette change with the colors list\n- Added the input_keys and input_text variables to obtain the entered key\n- Added the drop_files variable to obtain the dropped files\n- Added the icon function to set the application icon\n- Added the title function to set the application title\n- Added the fullscreen function to toggle fullscreen manually\n- Added the Channel class which can control the channel volume\n- Added the functions to overwrite key inputs and mouse position\n- Added the functions to capture screen manually\n- Added Example 10\n- Fixed setup.py so that images are referenced correctly on PyPI page\n- Added the pyi file for type hinting\n\n## 1.4.4\n\n- Added the README in French\n\n## 1.4.3\n\n- Added the README in Italian\n- Added the README in Russian\n- Fixed a crush bug when playing sound\n\n## 1.4.2\n\n- Updated the installation instructions in the READMEs\n- Changed gcc version for Mac\n- Added Example 9\n- Added the Noguchi's tilemap for reference\n- Added figures for the API reference in the READMEs\n\n## 1.4.1\n\n- Changed to use gcc compiler on Mac\n- Fixed the icon to not get affected by palette changes\n\n## 1.4.0\n\n- Changed the required version of Python\n- Changed the way to quit the Pyxel application\n\n## 1.3.9\n\n- Updated the compiler version to C++17\n- Added support for multi-byte character paths\n\n## 1.3.8\n\n- Modified .gitignore for Windows\n- Changed the installation of Py installer to optional\n- Changed the way to set the path on Windows\n- Updated the pipfile\n\n## 1.3.7\n\n- Updated the library download script\n- Updated SDL2 version for Windows\n- Improved the animated GIF making method\n\n## 1.3.6\n\n- Add the quit key to Example 8\n- Fixed the key input detection at the first frame\n- Fixed the way to quit the Pyxel application\n\n## 1.3.5\n\n- Changed the way to quit the Pyxel application\n\n## 1.3.4\n\n- Updated the README in Korean\n- Updated the installation instructions in the READMEs\n- Changed color names along the new palette\n- Changed to optimize an animated GIF with Gifsicle\n\n## 1.3.3\n\n- Fixed the way to quit the Pyxel application\n- Fixed Python version check\n\n## 1.3.2\n\n- Updated the installation instructions of the READMEs\n- Added the link to the Discord server to the READMEs\n- Added variable frame rate support for animated GIF\n- Added the mouse_wheel variable\n- Added the fullscreen option to the init API\n- Changed the way to quit the Pyxel application\n- Removed the border options of the init API\n- Changed the required version of Python\n\n## 1.3.1\n\n- Improved the animated GIF making method\n- Added the README in Portuguese\n- Fixed to work with Python 3.7 on Windows\n- Changed the color change shortcuts to ignore the alt keys\n\n## 1.3.0\n\n- Fixed the version check of the resource file\n- Fixed the typo of the PURPLE variables\n- Added the uninitialized error\n- Added support for command key shortcuts in Pyxel Editor\n- Fixed undo and redo of the sound/music editor\n- Changed color comparison method when importing images\n- Updated the SDL to 2.0.10\n- Updated the SDL_image to 2.0.5\n- Changed dll search method for Python 3.8\n- Updated the READMEs\n- Added KEY_NONE constant to ignore key input\n- Added pget API and renamed pix to pset\n- Changed the palette colors\n- Added new Pyxel palette file\n- Changed the animated GIF making method\n\n## 1.2.10\n\n- Added the tri and trib APIs\n- Modified the install option in the READMEs\n- Added the quit_key option to the init API\n- Added the target options to the load APIs\n- Added the partial load function to Pyxel Editor\n- Added Example 8\n- Modified Example 5\n\n## 1.2.9\n\n- Added the Korean version of the README\n\n## 1.2.8\n\n- Fixed the Pyxel Packager\n\n## 1.2.7\n\n- Added the Chinese version of the README\n- Added the icon option to the Pyxel Packager command\n- Fixed the the copy method of the Tilemap class\n\n## 1.2.6\n\n- Updated the instruction for installation in the READMEs\n- Removed dependency on NumPy\n- Changed the search path of the asset folder in the Pyxel Packager\n- Fixed the undo/redo for copy and paste in Pyxel Editor\n\n## 1.2.5\n\n- Fixed the pitch of the sound being off\n\n## 1.2.4\n\n- Fixed to keep the mouse cursor speed on Linux\n- Added Python version check\n\n## 1.2.3\n\n- Fixed an error of tone playback in the sound editor\n- Fixed to keep the image index of tilemaps in Pyxel Editor\n\n## 1.2.2\n\n- Updated the requirements.txt and Pipfile\n- Fixed the Pyxel Packager for Windows\n\n## 1.2.1\n\n- Changed to use SDK_Keycode instead of SDL_Scancode\n- Fixed to use the correct separator in the Pyxel Packager\n\n## 1.2.0\n\n- Removed support for loading old format\n- Added the build method to the READMEs\n- Added the usage of the show and flip APIs to the READMEs\n- Added the Pyxel Packager command\n\n## 1.1.8\n\n- Added Example 7\n- Fixed the set method of the Music class\n- Added the list of the examples to the READMEs\n- Added the show API\n\n## 1.1.7\n\n- Fixed to stop with ctrl-c\n- Updated the classifiers of setup.py\n- Added the description of APIs to the READMEs\n- Added the constants for the default colors\n- Fixed to stop the application with Python exception\n\n## 1.1.6\n\n- Changed the way to make module properties\n- Added public constants for fonts and banks\n- Removed the screen size limit\n- Added the description of a shortcut\n\n## 1.1.5\n\n- Optimized the sound and music APIs\n- Added the color class for the default palette\n- Added the shortcut to select a color to the image editor\n- Fixed the sound preview bug of the sound editor\n- Enabled to quit from anywhere\n- Added the flip API\n\n## 1.1.4\n\n- Fixed the index check of the playm API\n- Enabled to access the screen as the image bank #4\n- Changed the area to display the mouse cursor\n- Optimized the image and tilemap APIs\n- Updated the READMEs\n\n## 1.1.3\n\n- Fixed how to handle missing files in Pyxel Editor\n- Fixed how to quit the application\n\n## 1.1.2\n\n- Fixed the way to decide the automatic screen size\n- Fixed the API description in the READMEs\n- Changed the way to handle runtime errors\n- Changed save and load APIs to no return bool\n- Specified the version of Python in the READMEs\n- Added the play_pos API to Example 4\n- Added the description of the included libraries to the READMEs\n- Updated the screenshots of Example 3 and #4\n- Fixed game controller input\n- Improved the performance of the tilemap editor\n\n## 1.1.1\n\n- fixed the install_pyxel_examples script to include .pyxres file\n\n## 1.1.0\n\n- Modified .gitignore to ignore .vscode files\n- Changed to use SDL2 instead of GLFW\n- Removed the refimg argument from the Tilemap methods\n- Changed the save and load method to return bool value\n- Removed the run_with_profiler API\n- Changed the max screen size to 256\n- Added the play_pos API\n- Changed arguments of the clip API\n- Changed arguments of the rect and rectb APIs\n- Modified the examples according to the API changes\n- Renamed the resource file extension to .pyxres\n- Added the drop_file property\n- Added the caption API\n- Changed the way to detect the caller script\n\n## 1.0.1\n\n- Simplified comparisons\n- Removed a deprecated function\n- Applied static decorator to functions do not use self\n- Fixed to keep the previous frame when cls is not called\n- Changed frame_count to start from 0\n- Fixed the gamepad constants\n\n## 1.0.0\n\n- Added the supplement of installation method to the manuals\n- Added the type hints for Python\n\n## 0.9.10\n\n- Added the way to import images on Pyxel Editor to the manuals\n- Fixed the type hints\n- Added GLFW dll for Windows\n\n## 0.9.9\n\n- Added the type hints for Python\n- Added the description of run_with_profiler function to the manuals\n\n## 0.9.8\n\n- Enabled to run Pyxel Editor without filename\n\n## 0.9.7\n\n- Confirmed operation on Debian and Fedora\n- Updated the instruction of installation on Linux\n\n## 0.9.6\n\n- Updated the instruction of installation on Linux\n- Fixed a warning in setup.py\n\n## 0.9.5\n\n- Added issue templates\n- Added the description of issue templates in the manuals\n- Fixed the clipping bug of drawing primitives\n\n## 0.9.4\n\n- Fixed the crush bug when entering the fullscreen mode\n- Updated the description for Linux in the manuals\n- Reverted to check the version number of glfw strictly\n- Increased the sound buffer size\n- Fixed the range of the sound picker in the sound editor\n\n## 0.9.3\n\n- Enabled to open a resource file by drop in Pyxel Editor\n- Renamed the constants for the mouse buttons\n- Added gamepad support\n- Changed gamepad available for Example 2\n- Fixed the crash bug when the window is minimized\n- Modified the code of Example 6\n- Added the refimg property to the Tilemap class\n- Removed the img argument from the bltm API\n- Updated the screenshot of Example 3\n\n## 0.9.2\n\n- Enabled to import png by drop in the image editor\n- Fixed the crash bug caused by unsupported keys\n- Enabled to play the piano with mouse in the sound editor\n- Enabled to repeat undo/redo shortcuts\n\n## 0.9.1\n\n- Fixed the color pick bug of the image editor\n- Changed the focus UI of the image editor\n\n## 0.9.0\n\n- Fixed the bug where Pyxel Editor cursor malfunctions\n- Added new API descriptions to Example 3\n- Updated the screenshot of Example 3\n- Change to not add unnecessary undo history of the editors\n- Added the setting files for Pipenv\n- Modified the cursor design of the image/tilemap editor\n- Enabled to change the focus size of the tilemap editor\n- Added the link to the subreddit in the manuals\n- Changed to exports all constants for keys before init is called\n- Added the contribution section to the manuals\n\n## 0.8.9\n\n- Fixed the tilemap to allow the tiles of 256 or higher\n- Updated the screenshots of Pyxel Editor\n- Fixed the cursor movement of the sound/music editor\n- Changed the caption of Example 2\n- Renamed Example 6\n- Fixed the error when saving long animated GIF\n\n## 0.8.8\n\n- Added the .pyxel file to the install example script\n\n## 0.8.7\n\n- Fixed the piano keyboard bug when only enter was pressed\n- Fixed the piano keyboard highlights correctly\n- Changed the default sound volume to 7\n- Changed the default sound speed to 30\n- Fixed the sound button bug of the sound editor\n\n## 0.8.6\n\n- Changed the operation method of the sound editor\n- Changed to allow sound of length 0\n- Implemented the music editor\n- Changed Example 2 to use resource file\n\n## 0.8.5\n\n- Implemented the undo function of the sound editor\n- Changed the click tolerance time\n- Removed the length limitation of the sound\n- Added the music and playm APIs\n- Changed Example 2 to use the music and playm APIs\n\n## 0.8.4\n\n- Changed to follow the mouse position outside the window\n- Changed to draw the self mouse cursor\n- Added the mouse API\n- Renamed arguments of the blt and bltm APIs\n- Reduced the size of PNG and animated GIF\n- Changed the max length of the sound to 48\n- Added the system option to the sound API\n- Refined the help message of Pyxel Editor\n- Added the ToggleButton and ImageToggleButton\n- Implemented the sound editor except the undo function\n\n## 0.8.3\n\n- Fixed the right click bug in the tilemap editor\n- Fixed the key callback bug\n- Added the get method to the Image class\n- Changed the set method of the Image class to accept a number as data\n- Added the get and set methods to the Tilemap class\n- Added the bltm test to Example 3\n- Updated the descriptions of the READMEs\n\n## 0.8.2\n\n- Fixed the set, load, and copy methods of the image class\n- Fixed the starting directory of the save and load APIs\n- Modified the usage of Pyxel Editor\n\n## 0.8.1\n\n- Added the run_with_profiler API\n- Added the Tilemap class\n- Added the bltm API\n- Implemented the tilemap editor\n- Added the standard widgets\n- Changed the usage of Pyxel Editor\n- Added the help messages to Pyxel Editor\n- Added the description of Pyxel Editor to the READMEs\n\n## 0.8.0\n\n- Changed the formatter from yapf to black\n- Added the UI module\n- Added the save and load APIs\n- Added the image editor as a part of Pyxel Editor\n- Removed the dirname option of the save and load APIs\n\n## 0.7.12\n\n- Added new key definitions which integrates keys on both sides\n- Changed the description of the project\n- Changed the max screen size to 255\n- Fixed the key hold time of the btnp API\n- Fixed to work the btnp API correctly in the slow frame rate condition\n- Changed the screen size of Example 5 and Example 6\n- Updated the screenshot of Example 5\n\n## 0.7.11\n\n- Changed the Japanese link name in the READMEs\n- Implemented the widget class for Pyxel Editor\n- Added Example 6 by ttrkaya\n- Renamed the constant variable for the max screen size\n- Changed to set the default scale automatically\n\n## 0.7.10\n\n- Added screen size error\n- Added the link to the Pyxel wiki to the READMEs\n- Moved the README in Portuguese to the Pyxel wiki\n\n## 0.7.9\n\n- Changed the color of the system font texture to white\n- Fixed a typo in the README.md\n- Renamed the modules to use snake case\n- Added glfw version check\n\n## 0.7.8\n\n- Added the system option to the image API\n- Fixed the color bug of the shader for some environments\n- Added the dirname option to the load method of the image class\n- Updated the description of the init API of the READMEs\n\n## 0.7.7\n\n- Added the description of the screen size limitation to the READMEs\n- Added the Fedora Linux installation to the READMEs\n- Added another fallback to get the desktop folder name\n- Changed the number of the image banks to 3\n- Added some image assets for Pyxel Editor (WIP)\n\n## 0.7.6\n\n- Specify the version of GLFW in the READMEs\n- Limited the window size to 256 because of OpenGL Point Sprite limitation\n- Fixed the element border lacks bug\n- Added Example 5\n\n## 0.7.5\n\n- Fixed typos in the READMEs\n- Updated the Arch Linux installation in the READMEs\n- Updated the Debian Linux installation in the READMEs\n- Updated the way to capture screen on Linux\n- Fixed a shader compile error occurs in some environment\n\n## 0.7.4\n\n- Fixed to run without an audio card\n- Refactored import order of all files with isort\n- Fixed the way to capture screen on Linux\n\n## 0.7.3\n\n- Fixed the btnr API\n- Fixed a typo in the README.md\n- Added the title logo to the READMEs\n- Added the Portuguese version of the README.md\n\n## 0.7.2\n\n- Changed to not include the screenshots in the PyPI package\n- Removed unnecessary semicolons in the shader to avoid compile errors\n- Changed the project description for PyPI\n- Added the description of installation on Linux to the READMEs\n- Refactored the way to make a captured image and animation\n- Updated the screenshots of Example 3 and Example 4\n\n## 0.7.1\n\n- Modified the bgm of Example 2\n- Renamed the argument 'no' of the image-related methods to 'img'\n- Renamed the argument 'no' of the sound-related methods to 'snd'\n- Fixed to include the assets and screenshots in the PyPI package\n\n## 0.7.0\n\n- Modified Example 1 to use the App class\n- Renamed and modified Example 2\n- Remove the logo API and added the logo image\n- Improved the performance of the text API\n- Updated the README.md and README.ja.md\n- Replaced Example 2\n- Removed the resize method of the Image class\n- Changed the size of the Image to 256x256\n- Fixed the copy method of the Image class\n\n## 0.6.0\n\n- Changed the properties of the Sound class to public\n- Added offset arguments to the Image load method\n- Added the copy method to the Image class\n- Renamed arguments of the image and sound API\n- Added the window icon\n- Added the logo API\n- Added the resize method to the Image class\n- Refined Example 1-4\n\n## 0.5.0\n\n- Added the version number constant\n- Renamed the examples copy script to install_pyxel_examples\n- Removed unnecessary scripts\n- Separated the constant definitions\n- Added the image API and renamed related APIs\n- Added the sound API and renamed related APIs\n\n## 0.4.0\n\n- Changed the key assigns of the special inputs\n- Added the screen capture functions (still image and video)\n- Included the examples in the package and added the copy script\n- Added the fromstring method to the Image class\n- Added the fromstring method to the Sound class\n\n## 0.3.0\n\n- Added the '-'(flat) syntax to the Sound class\n- Added the set method to the Image class again\n- Renamed the track to channel\n- Changed the play API to enable to play a sound list\n\n## 0.2.0\n\n- Added the audio playback function\n- Removed the set method of the Image class\n\n## 0.1.0\n\n- First alpha release\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.1123046875,
          "content": "MIT License\n\nCopyright (c) 2018-2024 Takashi Kitao\n\nThis license applies to Pyxel - https://github.com/kitao/pyxel\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "Makefile",
          "type": "blob",
          "size": 4.43359375,
          "content": "#\n# [How to build]\n#\n# Required Tools:\n#\t- git\n#\t- make\n#\t- cmake\n#\t- rustup\n#\t- python 3.8+\n#\n#\t[Windows]\n#\t- Git Bash\n#\n#\t[Linux]\n#\t- python3-pip\n#\t- python3-venv\n#\t- libsdl2-dev 2.28.4\n#\n#\t[Web]\n#\t- Emscripten 3.1.61 (does not work with 3.1.62+)\n#\n# Advance Preparation:\n#\trustup install nightly\n#\tgit clone --depth=1 https://github.com/kitao/pyxel\n#\tcd pyxel\n#\t(Create and activate a venv if you prefer)\n#\tpip3 install -r python/requirements.txt\n#\n# Build for Current Environment:\n#\tmake clean build\n#\t(Generates Python wheel in dist/ directory)\n#\n# Build for Specified Target:\n#\tmake clean build TARGET=target_triple\n#\n# Build for Specified Target:\n#\tmake clean build TARGET=target_triple\n#\n# Build and Install in Current Python:\n#\tmake clean install\n#\n# Build, Install, and Test in Current Python:\n#\tmake clean test\n#\n# Build for Web:\n#\tmake clean-wasm build-wasm\n#\n# Test for Web:\n#\tmake clean-wasm test-wasm\n#\t(Open localhost:8000/wasm/ in a web browser)\n#\n\nROOT_DIR = .\nDIST_DIR = $(ROOT_DIR)/dist\nRUST_DIR = $(ROOT_DIR)/rust\nPYTHON_DIR = $(ROOT_DIR)/python\nEXAMPLES_DIR = $(PYTHON_DIR)/pyxel/examples\nSCRIPTS_DIR = $(ROOT_DIR)/scripts\nWASM_DIR = $(ROOT_DIR)/wasm\nWASM_ENV = RUSTUP_TOOLCHAIN=nightly\nWASM_TARGET = wasm32-unknown-emscripten\n\nifeq ($(TARGET),)\nENSURE_TARGET =\nBUILD_OPTS = --release\nelse\nENSURE_TARGET = rustup target add $(TARGET)\nBUILD_OPTS = --release --target $(TARGET)\nendif\n\n.PHONY: \\\n\tall clean distclean lint update format build install test \\\n\tclean-wasm build-wasm fetch-remote-wasm start-test-server test-wasm test-remote-wasm\n\nall: build\n\nclean:\n\t@cd $(RUST_DIR); cargo clean $(BUILD_OPTS)\n\ndistclean:\n\t@rm -rf $(DIST_DIR)\n\t@rm -rf $(RUST_DIR)/target\n\nlint:\n\t@cd $(RUST_DIR); cargo +nightly clippy -q --all-targets --all-features -- --no-deps\n\t@cd $(RUST_DIR); cargo +nightly clippy --target $(WASM_TARGET) -q --all-targets --all-features -- --no-deps\n\t@ruff check $(ROOT_DIR)\n\nupdate:\n\t@rustup -q update\n\t@cargo -q install cargo-outdated\n\t@cd $(RUST_DIR); cargo -q update\n\t@cd $(RUST_DIR); cargo -q outdated --root-deps-only\n\t@pip3 -q install -U -r $(PYTHON_DIR)/requirements.txt\n\nformat:\n\t@cd $(RUST_DIR); cargo +nightly fmt -- --emit=files\n\t@ruff format $(ROOT_DIR)\n\nbuild: format\n\t@$(ENSURE_TARGET)\n\t@$(SCRIPTS_DIR)/make_abspath_readme\n\t@cp LICENSE $(PYTHON_DIR)/pyxel\n\t@cd $(PYTHON_DIR); maturin build -o ../$(DIST_DIR) $(BUILD_OPTS) --manylinux 2014 --auditwheel skip\n\ninstall: build\n\t@pip3 install --force-reinstall `ls -rt $(DIST_DIR)/*.whl | tail -n 1`\n\ntest: install\n\t#@cd $(RUST_DIR); cargo test $(BUILD_OPTS)\n\t@python3 -m unittest discover $(RUST_DIR)/pyxel-wrapper/tests\n\t@pyxel run $(EXAMPLES_DIR)/01_hello_pyxel.py\n\t@pyxel run $(EXAMPLES_DIR)/02_jump_game.py\n\t@pyxel run $(EXAMPLES_DIR)/03_draw_api.py\n\t@pyxel run $(EXAMPLES_DIR)/04_sound_api.py\n\t@pyxel run $(EXAMPLES_DIR)/05_color_palette.py\n\t@pyxel run $(EXAMPLES_DIR)/06_click_game.py\n\t@pyxel run $(EXAMPLES_DIR)/07_snake.py\n\t@pyxel run $(EXAMPLES_DIR)/08_triangle_api.py\n\t@pyxel run $(EXAMPLES_DIR)/09_shooter.py\n\t@pyxel run $(EXAMPLES_DIR)/10_platformer.py\n\t@pyxel run $(EXAMPLES_DIR)/11_offscreen.py\n\t@pyxel run $(EXAMPLES_DIR)/12_perlin_noise.py\n\t@pyxel run $(EXAMPLES_DIR)/13_bitmap_font.py\n\t@pyxel run $(EXAMPLES_DIR)/14_synthesizer.py\n\t@pyxel run $(EXAMPLES_DIR)/15_tiled_map_file.py\n\t@pyxel run $(EXAMPLES_DIR)/16_transform.py\n\t@pyxel run $(EXAMPLES_DIR)/99_flip_animation.py\n\t@pyxel play $(EXAMPLES_DIR)/30sec_of_daylight.pyxapp\n\t@pyxel play $(EXAMPLES_DIR)/megaball.pyxapp\n\t@pyxel play $(EXAMPLES_DIR)/8bit-bgm-gen.pyxapp\n\t@pyxel edit $(EXAMPLES_DIR)/assets/sample.pyxres\n\t@rm -rf testapp testapp.pyxapp\n\t@mkdir -p testapp/assets\n\t@cp $(EXAMPLES_DIR)/10_platformer.py testapp\n\t@cp $(EXAMPLES_DIR)/assets/platformer.pyxres testapp/assets\n\t@pyxel package testapp testapp/10_platformer.py\n\t@pyxel play testapp.pyxapp\n\t@rm -rf testapp testapp.pyxapp\n\t@pyxel watch $(EXAMPLES_DIR) $(EXAMPLES_DIR)/01_hello_pyxel.py\n\nclean-wasm:\n\t@$(WASM_ENV) make clean TARGET=$(WASM_TARGET)\n\nbuild-wasm:\n\t@embuilder build sdl2 --pic\n\t@rm -f $(DIST_DIR)/*-emscripten_*.whl\n\t@$(WASM_ENV) make build TARGET=$(WASM_TARGET)\n\t@$(SCRIPTS_DIR)/install_wasm_wheel\n\nfetch-remote-wasm:\n\t@rm -f $(DIST_DIR)/*-emscripten_*.whl\n\t@$(SCRIPTS_DIR)/download_wasm_wheel\n\t@$(SCRIPTS_DIR)/install_wasm_wheel\n\nstart-test-server:\n\t$(SCRIPTS_DIR)/switch_html_scripts local\n\t@bash -c \"trap '$(SCRIPTS_DIR)/switch_html_scripts cdn' INT TERM; $(SCRIPTS_DIR)/start_test_server\"\n\ntest-wasm: build-wasm start-test-server\n\ntest-remote-wasm: fetch-remote-wasm start-test-server\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 28.638671875,
          "content": "# <img src=\"docs/images/pyxel_logo_152x64.png\">\n\n[![Downloads](https://static.pepy.tech/personalized-badge/pyxel?period=total&units=international_system&left_color=grey&right_color=blue&left_text=PyPI%20downloads)](https://pypi.org/project/pyxel/)\n[![GitHub Repo stars](https://img.shields.io/github/stars/kitao/pyxel?style=social)](https://github.com/kitao/pyxel)\n[![GitHub forks](https://img.shields.io/github/forks/kitao/pyxel?style=social)](https://github.com/kitao/pyxel)\n[![GitHub Sponsors](https://img.shields.io/github/sponsors/kitao?label=Sponsor%20me&logo=github%20sponsors&style=social)](https://github.com/sponsors/kitao)\n\n[![ko-fi](https://ko-fi.com/img/githubbutton_sm.svg)](https://ko-fi.com/H2H27VDKD)\n\n[ [English](README.md) | [中文](docs/README.cn.md) | [Deutsch](docs/README.de.md) | [Español](docs/README.es.md) | [Français](docs/README.fr.md) | [Italiano](docs/README.it.md) | [日本語](docs/README.ja.md) | [한국어](docs/README.ko.md) | [Português](docs/README.pt.md) | [Русский](docs/README.ru.md) | [Türkçe](docs/README.tr.md) | [Українська](docs/README.uk.md) ]\n\n**Pyxel** is a retro game engine for Python.\n\nWith simple specifications inspired by retro gaming consoles, such as displaying only 16 colors and supporting 4 sound channels, you can easily enjoy making pixel-art-style games.\n\n[<img src=\"docs/images/pyxel_message.png\" width=\"460\">](https://github.com/kitao/pyxel/wiki/Pyxel-User-Examples) [<img src=\"docs/images/pyxel_book.png\" width=\"180\">](https://gihyo.jp/book/2025/978-4-297-14657-3)\n\nThe development of Pyxel is driven by user feedback. Please give Pyxel a star on GitHub!\n\n<p>\n<a href=\"https://kitao.github.io/pyxel/wasm/examples/10_platformer.html\">\n<img src=\"docs/images/10_platformer.gif\" width=\"290\">\n</a>\n<a href=\"https://kitao.github.io/pyxel/wasm/examples/30sec_of_daylight.html\">\n<img src=\"docs/images/30sec_of_daylight.gif\" width=\"350\">\n</a>\n<a href=\"https://kitao.github.io/pyxel/wasm/examples/02_jump_game.html\">\n<img src=\"docs/images/02_jump_game.gif\" width=\"330\">\n</a>\n<a href=\"https://kitao.github.io/pyxel/wasm/examples/megaball.html\">\n<img src=\"docs/images/megaball.gif\" width=\"310\">\n</a>\n<a href=\"https://kitao.github.io/pyxel/wasm/examples/image_editor.html\">\n<img src=\"docs/images/image_tilemap_editor.gif\" width=\"320\">\n</a>\n<a href=\"https://kitao.github.io/pyxel/wasm/examples/sound_editor.html\">\n<img src=\"docs/images/sound_music_editor.gif\" width=\"320\">\n</a>\n</p>\n\nPyxel's specifications and APIs are inspired by [PICO-8](https://www.lexaloffle.com/pico-8.php) and [TIC-80](https://tic80.com/).\n\nPyxel is open source under the [MIT License](LICENSE) and free to use. Let's start making retro games with Pyxel!\n\n## Specifications\n\n- Runs on Windows, Mac, Linux, and Web\n- Programming in Python\n- 16-color palette\n- 3 256x256-sized image banks\n- 8 256x256-sized tilemaps\n- 4 channels with 64 definable sounds\n- 8 music tracks combining any sounds\n- Keyboard, mouse, and gamepad inputs\n- Image and sound editing tools\n- User-extensible colors, channels, and banks\n\n### Color Palette\n\n<img src=\"docs/images/05_color_palette.png\">\n\n<img src=\"docs/images/pyxel_palette.png\">\n\n## How to Install\n\n### Windows\n\nAfter installing [Python3](https://www.python.org/) (version 3.8 or higher), run the following command:\n\n```sh\npip install -U pyxel\n```\n\nWhen installing Python using the official installer, make sure to check the `Add Python 3.x to PATH` option to enable the `pyxel` command.\n\n### Mac\n\nAfter installing [Homebrew](https://brew.sh/), run the following commands:\n\n```sh\nbrew install pipx\npipx ensurepath\npipx install pyxel\n```\n\nTo upgrade Pyxel after installation, run `pipx upgrade pyxel`.\n\n### Linux\n\nAfter installing the SDL2 package (`libsdl2-dev` for Ubuntu), [Python3](https://www.python.org/) (version 3.8 or higher), and `python3-pip`, run the following command:\n\n```sh\nsudo pip3 install -U pyxel\n```\n\nIf the previous command fails, consider building Pyxel from source by following the instructions in the [Makefile](Makefile).\n\n### Web\n\nThe web version of Pyxel does not require Python or Pyxel installation and runs on PCs, smartphones, and tablets with supported web browsers.\n\nFor detailed instructions, please refer to [this page](docs/pyxel-web-en.md).\n\n### Try Examples\n\nAfter installing Pyxel, you can copy the examples to the current directory with the following command:\n\n```sh\npyxel copy_examples\n```\n\nThe following examples will be copied to your current directory:\n\n<table>\n<tr>\n<td>01_hello_pyxel.py</td>\n<td>Simplest application</td>\n<td><a href=\"https://kitao.github.io/pyxel/wasm/examples/01_hello_pyxel.html\">Demo</a></td>\n<td><a href=\"https://github.com/kitao/pyxel/blob/main/python/pyxel/examples/01_hello_pyxel.py\">Code</a></td>\n</tr>\n<tr>\n<td>02_jump_game.py</td>\n<td>Jump game with Pyxel resource file</td>\n<td><a href=\"https://kitao.github.io/pyxel/wasm/examples/02_jump_game.html\">Demo</a></td>\n<td><a href=\"https://github.com/kitao/pyxel/blob/main/python/pyxel/examples/02_jump_game.py\">Code</a></td>\n</tr>\n<tr>\n<td>03_draw_api.py</td>\n<td>Demonstration of drawing APIs</td>\n<td><a href=\"https://kitao.github.io/pyxel/wasm/examples/03_draw_api.html\">Demo</a></td>\n<td><a href=\"https://github.com/kitao/pyxel/blob/main/python/pyxel/examples/03_draw_api.py\">Code</a></td>\n</tr>\n<tr>\n<td>04_sound_api.py</td>\n<td>Demonstration of sound APIs</td>\n<td><a href=\"https://kitao.github.io/pyxel/wasm/examples/04_sound_api.html\">Demo</a></td>\n<td><a href=\"https://github.com/kitao/pyxel/blob/main/python/pyxel/examples/04_sound_api.py\">Code</a></td>\n</tr>\n<tr>\n<td>05_color_palette.py</td>\n<td>Color palette list</td>\n<td><a href=\"https://kitao.github.io/pyxel/wasm/examples/05_color_palette.html\">Demo</a></td>\n<td><a href=\"https://github.com/kitao/pyxel/blob/main/python/pyxel/examples/05_color_palette.py\">Code</a></td>\n</tr>\n<tr>\n<td>06_click_game.py</td>\n<td>Mouse click game</td>\n<td><a href=\"https://kitao.github.io/pyxel/wasm/examples/06_click_game.html\">Demo</a></td>\n<td><a href=\"https://github.com/kitao/pyxel/blob/main/python/pyxel/examples/06_click_game.py\">Code</a></td>\n</tr>\n<tr>\n<td>07_snake.py</td>\n<td>Snake game with BGM</td>\n<td><a href=\"https://kitao.github.io/pyxel/wasm/examples/07_snake.html\">Demo</a></td>\n<td><a href=\"https://github.com/kitao/pyxel/blob/main/python/pyxel/examples/07_snake.py\">Code</a></td>\n</tr>\n<tr>\n<td>08_triangle_api.py</td>\n<td>Demonstration of triangle drawing APIs</td>\n<td><a href=\"https://kitao.github.io/pyxel/wasm/examples/08_triangle_api.html\">Demo</a></td>\n<td><a href=\"https://github.com/kitao/pyxel/blob/main/python/pyxel/examples/08_triangle_api.py\">Code</a></td>\n</tr>\n<tr>\n<td>09_shooter.py</td>\n<td>Shoot'em up game with screen transitions</td>\n<td><a href=\"https://kitao.github.io/pyxel/wasm/examples/09_shooter.html\">Demo</a></td>\n<td><a href=\"https://github.com/kitao/pyxel/blob/main/python/pyxel/examples/09_shooter.py\">Code</a></td>\n</tr>\n<tr>\n<td>10_platformer.py</td>\n<td>Side-scrolling platform game with map</td>\n<td><a href=\"https://kitao.github.io/pyxel/wasm/examples/10_platformer.html\">Demo</a></td>\n<td><a href=\"https://github.com/kitao/pyxel/blob/main/python/pyxel/examples/10_platformer.py\">Code</a></td>\n</tr>\n<tr>\n<td>11_offscreen.py</td>\n<td>Offscreen rendering with Image class</td>\n<td><a href=\"https://kitao.github.io/pyxel/wasm/examples/11_offscreen.html\">Demo</a></td>\n<td><a href=\"https://github.com/kitao/pyxel/blob/main/python/pyxel/examples/11_offscreen.py\">Code</a></td>\n</tr>\n<tr>\n<td>12_perlin_noise.py</td>\n<td>Perlin noise animation</td>\n<td><a href=\"https://kitao.github.io/pyxel/wasm/examples/12_perlin_noise.html\">Demo</a></td>\n<td><a href=\"https://github.com/kitao/pyxel/blob/main/python/pyxel/examples/12_perlin_noise.py\">Code</a></td>\n</tr>\n<tr>\n<td>13_bitmap_font.py</td>\n<td>Drawing a bitmap font</td>\n<td><a href=\"https://kitao.github.io/pyxel/wasm/examples/13_bitmap_font.html\">Demo</a></td>\n<td><a href=\"https://github.com/kitao/pyxel/blob/main/python/pyxel/examples/13_bitmap_font.py\">Code</a></td>\n</tr>\n<tr>\n<td>14_synthesizer.py</td>\n<td>Synthesizer using audio expansion features</td>\n<td><a href=\"https://kitao.github.io/pyxel/wasm/examples/14_synthesizer.html\">Demo</a></td>\n<td><a href=\"https://github.com/kitao/pyxel/blob/main/python/pyxel/examples/14_synthesizer.py\">Code</a></td>\n</tr>\n<tr>\n<td>15_tiled_map_file.py</td>\n<td>Loading and drawing a Tile Map File (.tmx)</td>\n<td><a href=\"https://kitao.github.io/pyxel/wasm/examples/15_tiled_map_file.html\">Demo</a></td>\n<td><a href=\"https://github.com/kitao/pyxel/blob/main/python/pyxel/examples/15_tiled_map_file.py\">Code</a></td>\n</tr>\n<tr>\n<td>16_transform.py</td>\n<td>Image rotation and scaling</td>\n<td><a href=\"https://kitao.github.io/pyxel/wasm/examples/16_transform.html\">Demo</a></td>\n<td><a href=\"https://github.com/kitao/pyxel/blob/main/python/pyxel/examples/16_transform.py\">Code</a></td>\n</tr>\n<tr>\n<td>99_flip_animation.py</td>\n<td>Animation with flip function (non-web platforms only)</td>\n<td><a href=\"https://github.com/kitao/pyxel/blob/main/docs/images/99_flip_animation.gif\">Demo</a></td>\n<td><a href=\"https://github.com/kitao/pyxel/blob/main/python/pyxel/examples/99_flip_animation.py\">Code</a></td>\n</tr>\n<tr>\n<td>30sec_of_daylight.pyxapp</td>\n<td>1st Pyxel Jam winning game by <a href=\"https://x.com/helpcomputer0\">Adam</a></td>\n<td><a href=\"https://kitao.github.io/pyxel/wasm/examples/30sec_of_daylight.html\">Demo</a></td>\n<td><a href=\"https://github.com/kitao/30SecondsOfDaylight\">Code</a></td>\n</tr>\n<tr>\n<td>megaball.pyxapp</td>\n<td>Arcade ball physics game by <a href=\"https://x.com/helpcomputer0\">Adam</a></td>\n<td><a href=\"https://kitao.github.io/pyxel/wasm/examples/megaball.html\">Demo</a></td>\n<td><a href=\"https://github.com/kitao/megaball\">Code</a></td>\n</tr>\n<tr>\n<td>8bit-bgm-gen.pyxapp</td>\n<td>Background music generator by <a href=\"https://x.com/frenchbread1222\">frenchbread</a></td>\n<td><a href=\"https://kitao.github.io/pyxel/wasm/examples/8bit-bgm-gen.html\">Demo</a></td>\n<td><a href=\"https://github.com/shiromofufactory/8bit-bgm-generator\">Code</a></td>\n</tr>\n</table>\n\nThe examples can be executed with the following commands:\n\n```sh\ncd pyxel_examples\npyxel run 01_hello_pyxel.py\npyxel play 30sec_of_daylight.pyxapp\n```\n\n## How to Use\n\n### Create Application\n\nIn your Python script, import the Pyxel module, specify the window size with the `init` function, and then start the Pyxel application with the `run` function.\n\n```python\nimport pyxel\n\npyxel.init(160, 120)\n\ndef update():\n    if pyxel.btnp(pyxel.KEY_Q):\n        pyxel.quit()\n\ndef draw():\n    pyxel.cls(0)\n    pyxel.rect(10, 10, 20, 20, 11)\n\npyxel.run(update, draw)\n```\n\nThe arguments of the `run` function are the `update` function, which processes frame updates, and the `draw` function, which handles screen drawing.\n\nIn an actual application, it is recommended to wrap Pyxel code in a class, as shown below:\n\n```python\nimport pyxel\n\nclass App:\n    def __init__(self):\n        pyxel.init(160, 120)\n        self.x = 0\n        pyxel.run(self.update, self.draw)\n\n    def update(self):\n        self.x = (self.x + 1) % pyxel.width\n\n    def draw(self):\n        pyxel.cls(0)\n        pyxel.rect(self.x, 0, 8, 8, 9)\n\nApp()\n```\n\nFor creating simple graphics without animation, you can use the `show` function to simplify your code.\n\n```python\nimport pyxel\n\npyxel.init(120, 120)\npyxel.cls(1)\npyxel.circb(60, 60, 40, 7)\npyxel.show()\n```\n\n### Run Application\n\nA created script can be executed using the `python` command:\n\n```sh\npython PYTHON_SCRIPT_FILE\n```\n\nIt can also be run with the `pyxel run` command:\n\n```sh\npyxel run PYTHON_SCRIPT_FILE\n```\n\nAdditionally, the `pyxel watch` command monitors changes in a specified directory and automatically re-runs the program when changes are detected:\n\n```sh\npyxel watch WATCH_DIR PYTHON_SCRIPT_FILE\n```\n\nDirectory monitoring can be stopped by pressing `Ctrl(Command)+C`.\n\n### Special Key Controls\n\nThe following special key actions are available while a Pyxel application is running:\n\n- `Esc`<br>\n  Quit the application\n- `Alt(Option)+1`<br>\n  Save the screenshot to the desktop\n- `Alt(Option)+2`<br>\n  Reset the recording start time of the screen capture video\n- `Alt(Option)+3`<br>\n  Save a screen capture video to the desktop (up to 10 seconds)\n- `Alt(Option)+8` or `A+B+X+Y+DL` on gamepad<br>\n  Toggles screen scaling between maximum and integer\n- `Alt(Option)+9` or `A+B+X+Y+DR` on gamepad<br>\n  Switch between screen modes (Crisp/Smooth/Retro)\n- `Alt(Option)+0` or `A+B+X+Y+DU` on gamepad<br>\n  Toggle the performance monitor (fps/`update` time/`draw` time)\n- `Alt(Option)+Enter` or `A+B+X+Y+DD` on gamepad<br>\n  Toggle fullscreen\n- `Shift+Alt(Option)+1/2/3`<br>\n  Save image bank 0, 1, or 2 to the desktop\n- `Shift+Alt(Option)+0`<br>\n  Save the current color palette to the desktop\n\n### How to Create Resources\n\nPyxel Editor can create images and sounds used in a Pyxel application.\n\nYou can start Pyxel Editor with the following command:\n\n```sh\npyxel edit PYXEL_RESOURCE_FILE\n```\n\nIf the specified Pyxel resource file (.pyxres) exists, it will be loaded. If it does not exist, a new file with the specified name will be created. If the resource file is omitted, a new file named `my_resource.pyxres` will be created.\n\nAfter starting Pyxel Editor, you can switch to another resource file by dragging and dropping it onto Pyxel Editor.\n\nThe created resource file can be loaded using the `load` function.\n\nPyxel Editor has the following editing modes.\n\n**Image Editor**\n\nThe mode for editing the image in each **image bank**.\n\n<a href=\"https://kitao.github.io/pyxel/wasm/examples/image_editor.html\">\n<img src=\"docs/images/image_editor.gif\">\n</a>\n\nYou can drag and drop an image file (PNG/GIF/JPEG) into the image editor to load the image into the currently selected image bank.\n\n**Tilemap Editor**\n\nThe mode for editing **tilemaps** that arrange images from the image banks in a tile pattern.\n\n<a href=\"https://kitao.github.io/pyxel/wasm/examples/tilemap_editor.html\">\n<img src=\"docs/images/tilemap_editor.gif\">\n</a>\n\nDrag and drop a TMX file (Tiled Map File) onto the tilemap editor to load its layer 0 into the currently selected tilemap.\n\n**Sound Editor**\n\nThe mode for editing **sounds** used for melodies and sound effects.\n\n<a href=\"https://kitao.github.io/pyxel/wasm/examples/sound_editor.html\">\n<img src=\"docs/images/sound_editor.gif\">\n</a>\n\n**Music Editor**\n\nThe mode for editing **musics** in which the sounds are arranged in order of playback.\n\n<a href=\"https://kitao.github.io/pyxel/wasm/examples/music_editor.html\">\n<img src=\"docs/images/music_editor.gif\">\n</a>\n\n### Other Resource Creation Methods\n\nPyxel images and tilemaps can also be created using the following methods:\n\n- Create an image from a list of strings using the `Image.set` function or the `Tilemap.set` function\n- Load an image file (PNG/GIF/JPEG) in Pyxel palette with `Image.load` function\n\nPyxel sounds can also be created using the following method:\n\n- Create a sound from strings with `Sound.set` function or `Music.set` function\n\nRefer to the API reference for the usage of these functions.\n\n### How to Distribute Applications\n\nPyxel supports a dedicated application distribution file format (Pyxel application file) that is cross-platform.\n\nA Pyxel application file (.pyxapp) is created using the `pyxel package` command:\n\n```sh\npyxel package APP_DIR STARTUP_SCRIPT_FILE\n```\n\nIf you need to include resources or additional modules, place them in the application directory.\n\nMetadata can be displayed at runtime by specifying it in the following format within the startup script. Fields other than `title` and `author` are optional.\n\n```python\n# title: Pyxel Platformer\n# author: Takashi Kitao\n# desc: A Pyxel platformer example\n# site: https://github.com/kitao/pyxel\n# license: MIT\n# version: 1.0\n```\n\nThe created application file can be run using the `pyxel play` command:\n\n```sh\npyxel play PYXEL_APP_FILE\n```\n\nA Pyxel application file can also be converted to an executable or an HTML file using the `pyxel app2exe` or `pyxel app2html` commands.\n\n## API Reference\n\n### System\n\n- `width`, `height`<br>\n  The width and height of the screen\n\n- `frame_count`<br>\n  The number of the elapsed frames\n\n- `init(width, height, [title], [fps], [quit_key], [display_scale], [capture_scale], [capture_sec])`<br>\n  Initialize the Pyxel application with the screen size (`width`, `height`). The following options can be specified: the window title with `title`, the frame rate with `fps`, the key to quit the application with `quit_key`, the display scale with `display_scale`, the screen capture scale with `capture_scale`, and the maximum recording time of the screen capture video with `capture_sec`.<br>\n  Example: `pyxel.init(160, 120, title=\"My Pyxel App\", fps=60, quit_key=pyxel.KEY_NONE, capture_scale=3, capture_sec=0)`\n\n- `run(update, draw)`<br>\n  Start the Pyxel application and call the `update` function for frame update and the `draw` function for drawing.\n\n- `show()`<br>\n  Show the screen and wait until the `Esc` key is pressed.\n\n- `flip()`<br>\n  Refresh the screen by one frame. The application exits when the `Esc` key is pressed. This function is not available in the web version.\n\n- `quit()`<br>\n  Quit the Pyxel application.\n\n### Resource\n\n- `load(filename, [excl_images], [excl_tilemaps], [excl_sounds], [excl_musics])`<br>\n  Load the resource file (.pyxres). If an option is set to `True`, the corresponding resource will be excluded from loading. If a palette file (.pyxpal) with the same name exists in the same location as the resource file, the palette display colors will also be updated. The palette file contains hexadecimal entries for the display colors (e.g. `1100FF`), separated by newlines. The palette file can also be used to change the colors displayed in Pyxel Editor.\n\n- `user_data_dir(vendor_name, app_name)`<br>\n  Returns the user data directory created based on `vendor_name` and `app_name`. If the directory does not exist, it will be created automatically. It is used to store high scores, game progress, and similar data.<br>\n  Example: `print(pyxel.user_data_dir(\"Takashi Kitao\", \"Pyxel Shooter\"))`\n\n### Input\n\n- `mouse_x`, `mouse_y`<br>\n  The current position of the mouse cursor\n\n- `mouse_wheel`<br>\n  The current value of the mouse wheel\n\n- `btn(key)`<br>\n  Return `True` if the `key` is pressed, otherwise return `False`. ([Key definition list](python/pyxel/__init__.pyi))\n\n- `btnp(key, [hold], [repeat])`<br>\n  Return `True` if the `key` is pressed in that frame, otherwise return `False`. If `hold` and `repeat` are specified, after the `key` has been held down for `hold` frames or more, `True` is returned every `repeat` frames.\n\n- `btnr(key)`<br>\n  Return `True` if the `key` is released in that frame, otherwise return `False`.\n\n- `mouse(visible)`<br>\n  Show the mouse cursor if `visible` is `True`, and hide it if `visible` is `False`. The cursor's position continues to update even when it is hidden.\n\n### Graphics\n\n- `colors`<br>\n  List of the palette display colors. The display color is specified by a 24-bit numerical value. Use `colors.from_list` and `colors.to_list` to directly assign and retrieve Python lists.<br>\n  Example: `old_colors = pyxel.colors.to_list(); pyxel.colors.from_list([0x111111, 0x222222, 0x333333]); pyxel.colors[15] = 0x112233`\n\n- `images`<br>\n  List of the image banks (instances of the Image class) (0-2)<br>\n  Example: `pyxel.images[0].load(0, 0, \"title.png\")`\n\n- `tilemaps`<br>\n  List of the tilemaps (instances of the Tilemap class) (0-7)\n\n- `clip(x, y, w, h)`<br>\n  Set the drawing area of the screen from (`x`, `y`) with a width of `w` and a height of `h`. Call `clip()` to reset the drawing area to full screen.\n\n- `camera(x, y)`<br>\n  Change the upper-left corner coordinates of the screen to (`x`, `y`). Call `camera()` to reset the upper-left corner coordinates to (`0`, `0`).\n\n- `pal(col1, col2)`<br>\n  Replace color `col1` with `col2` when drawing. Call `pal()` to reset to the initial palette.\n\n- `dither(alpha)`<br>\n  Apply dithering (pseudo-transparency) when drawing. Set `alpha` in the range `0.0`-`1.0`, where `0.0` is transparent and `1.0` is opaque.\n\n- `cls(col)`<br>\n  Clear screen with color `col`.\n\n- `pget(x, y)`<br>\n  Get the color of the pixel at (`x`, `y`).\n\n- `pset(x, y, col)`<br>\n  Draw a pixel of color `col` at (`x`, `y`).\n\n- `line(x1, y1, x2, y2, col)`<br>\n  Draw a line of color `col` from (`x1`, `y1`) to (`x2`, `y2`).\n\n- `rect(x, y, w, h, col)`<br>\n  Draw a rectangle of width `w`, height `h` and color `col` from (`x`, `y`).\n\n- `rectb(x, y, w, h, col)`<br>\n  Draw the outline of a rectangle of width `w`, height `h` and color `col` from (`x`, `y`).\n\n- `circ(x, y, r, col)`<br>\n  Draw a circle of radius `r` and color `col` at (`x`, `y`).\n\n- `circb(x, y, r, col)`<br>\n  Draw the outline of a circle of radius `r` and color `col` at (`x`, `y`).\n\n- `elli(x, y, w, h, col)`<br>\n  Draw an ellipse of width `w`, height `h` and color `col` from (`x`, `y`).\n\n- `ellib(x, y, w, h, col)`<br>\n  Draw the outline of an ellipse of width `w`, height `h` and color `col` from (`x`, `y`).\n\n- `tri(x1, y1, x2, y2, x3, y3, col)`<br>\n  Draw a triangle with vertices (`x1`, `y1`), (`x2`, `y2`), (`x3`, `y3`) and color `col`.\n\n- `trib(x1, y1, x2, y2, x3, y3, col)`<br>\n  Draw the outline of a triangle with vertices (`x1`, `y1`), (`x2`, `y2`), (`x3`, `y3`) and color `col`.\n\n- `fill(x, y, col)`<br>\n  Fill the area connected with the same color as (`x`, `y`) with color `col`.\n\n- `blt(x, y, img, u, v, w, h, [colkey], [rotate], [scale])`<br>\n  Copy the region of size (`w`, `h`) from (`u`, `v`) of the image bank `img`(0-2) to (`x`, `y`). If a negative value is assigned to `w` and/or `h`, the region will be flipped horizontally and/or vertically. If `colkey` is specified, it will be treated as a transparent color. If `rotate`(in degrees), `scale`(1.0 = 100%), or both are specified, the corresponding transformations will be applied.\n\n<img src=\"docs/images/blt_figure.png\">\n\n- `bltm(x, y, tm, u, v, w, h, [colkey], [rotate], [scale])`<br>\n  Copy the region of size (`w`, `h`) from (`u`, `v`) of the tilemap `tm`(0-7) to (`x`, `y`). If a negative value is assigned to `w` and/or `h`, the region will be flipped horizontally and/or vertically. If `colkey` is specified, it will be treated as a transparent color. If `rotate`(in degrees), `scale`(1.0 = 100%), or both are specified, the corresponding transformations will be applied. The size of a tile is 8x8 pixels and is stored in a tilemap as a tuple of `(image_tx, image_ty)`.\n\n<img src=\"docs/images/bltm_figure.png\">\n\n- `text(x, y, s, col)`<br>\n  Draw a string `s` in color `col` at (`x`, `y`).\n\n### Audio\n\n- `sounds`<br>\n  List of the sounds (instances of the Sound class) (0-63)<br>\n  Example: `pyxel.sounds[0].speed = 60`\n\n- `musics`<br>\n  List of the musics (instances of the Music class) (0-7)\n\n- `play(ch, snd, [tick], [loop], [resume])`<br>\n  Play the sound `snd`(0-63) on channel `ch`(0-3). If `snd` is a list, the sounds will be played in sequence. The playback start position can be specified by `tick`(1 tick = 1/120 seconds). If `loop` is set to `True`, loop playback is performed. To resume the previous sound after playback ends, set `resume` to `True`.\n\n- `playm(msc, [tick], [loop])`<br>\n  Play the music `msc`(0-7). The playback start position can be specified by `tick`(1 tick = 1/120 seconds). If `loop` is set to `True`, loop playback is performed.\n\n- `stop([ch])`<br>\n  Stop playback of the specified channel `ch`(0-3). Call `stop()` to stop all channels.\n\n- `play_pos(ch)`<br>\n  Get the sound playback position of channel `ch`(0-3) as a tuple of `(sound_no, note_no)`. Return `None` when playback has stopped.\n\n### Math\n\n- `ceil(x)`<br>\n  Return the smallest integer that is greater than or equal to `x`.\n\n- `floor(x)`<br>\n  Return the largest integer that is less than or equal to `x`.\n\n- `sgn(x)`<br>\n  Return `1` when `x` is positive, `0` when it is `0`, and `-1` when it is negative.\n\n- `sqrt(x)`<br>\n  Return the square root of `x`.\n\n- `sin(deg)`<br>\n  Return the sine of `deg` degrees.\n\n- `cos(deg)`<br>\n  Return the cosine of `deg` degrees.\n\n- `atan2(y, x)`<br>\n  Return the arctangent of `y`/`x` in degrees.\n\n- `rseed(seed)`<br>\n  Sets the seed of the random number generator.\n\n- `rndi(a, b)`<br>\n  Return a random integer greater than or equal to `a` and less than or equal to `b`.\n\n- `rndf(a, b)`<br>\n  Return a random floating-point number greater than or equal to `a` and less than or equal to `b`.\n\n- `nseed(seed)`<br>\n  Set the seed of Perlin noise.\n\n- `noise(x, [y], [z])`<br>\n  Return the Perlin noise value for the specified coordinates.\n\n### Image Class\n\n- `width`, `height`<br>\n  The width and height of the image\n\n- `set(x, y, data)`<br>\n  Set the image at (`x`, `y`) using a list of strings.<br>\n  Example: `pyxel.images[0].set(10, 10, [\"0123\", \"4567\", \"89ab\", \"cdef\"])`\n\n- `load(x, y, filename)`<br>\n  Load an image file (PNG/GIF/JPEG) at (`x`, `y`).\n\n- `pget(x, y)`<br>\n  Get the color of the pixel at (`x`, `y`).\n\n- `pset(x, y, col)`<br>\n  Draw a pixel with the color `col` at (`x`, `y`).\n\n### Tilemap Class\n\n- `width`, `height`<br>\n  The width and height of the tilemap\n\n- `imgsrc`<br>\n  The image bank (0-2) referenced by the tilemap\n\n- `set(x, y, data)`<br>\n  Set the tilemap at (`x`, `y`) using a list of strings.<br>\n  Example: `pyxel.tilemap(0).set(0, 0, [\"0000 0100 a0b0\", \"0001 0101 a1b1\"])`\n\n- `load(x, y, filename, layer)`<br>\n  Load the `layer` (0-) from the TMX file (Tiled Map File) at (`x`, `y`).\n\n- `pget(x, y)`<br>\n  Get the tile at (`x`, `y`). A tile is represented as a tuple of `(image_tx, image_ty)`.\n\n- `pset(x, y, tile)`<br>\n  Draw a `tile` at (`x`, `y`). A tile is represented as a tuple of `(image_tx, image_ty)`.\n\n### Sound Class\n\n- `notes`<br>\n  List of notes (0-127). The higher the number, the higher the pitch. Note `33` corresponds to 'A2'(440Hz). Rest notes are represented by `-1`.\n\n- `tones`<br>\n  List of tones (0:Triangle / 1:Square / 2:Pulse / 3:Noise)\n\n- `volumes`<br>\n  List of volumes (0-7)\n\n- `effects`<br>\n  List of effects (0:None / 1:Slide / 2:Vibrato / 3:FadeOut / 4:Half-FadeOut / 5:Quarter-FadeOut)\n\n- `speed`<br>\n  Playback speed. `1` is the fastest, and the larger the number, the slower the playback speed. At `120`, the length of one note becomes 1 second.\n\n- `set(notes, tones, volumes, effects, speed)`<br>\n  Set notes, tones, volumes, and effects using a string. If the length of tones, volumes, or effects are shorter than the notes, they will be repeated from the beginning.\n\n- `set_notes(notes)`<br>\n  Set the notes using a string made of 'CDEFGAB'+'#-'+'01234' or 'R'. It is case-insensitive, and whitespace is ignored.<br>\n  Example: `pyxel.sounds[0].set_notes(\"G2B-2D3R RF3F3F3\")`\n\n- `set_tones(tones)`<br>\n  Set the tones with a string made of 'TSPN'. Case-insensitive and whitespace is ignored.<br>\n  Example: `pyxel.sounds[0].set_tones(\"TTSS PPPN\")`\n\n- `set_volumes(volumes)`<br>\n  Set the volumes with a string made of '01234567'. Case-insensitive and whitespace is ignored.<br>\n  Example: `pyxel.sounds[0].set_volumes(\"7777 7531\")`\n\n- `set_effects(effects)`<br>\n  Set the effects with a string made of 'NSVFHQ'. Case-insensitive and whitespace is ignored.<br>\n  Example: `pyxel.sounds[0].set_effects(\"NFNF NVVS\")`\n\n### Music Class\n\n- `seqs`<br>\n  A two-dimensional list of sounds (0-63) across multiple channels\n\n- `set(seq0, seq1, seq2, ...)`<br>\n  Set the lists of sound (0-63) for each channel. If an empty list is specified, that channel will not be used for playback.<br>\n  Example: `pyxel.musics[0].set([0, 1], [], [3])`\n\n### Advanced API\n\nPyxel includes an \"Advanced API\" that is not mentioned in this reference, as it may confuse users or require specialized knowledge to use.\n\nIf you are confident in your skills, try creating amazing works using [this](python/pyxel/__init__.pyi) as a guide!\n\n## How to Contribute\n\n### Submitting Issues\n\nUse the [Issue Tracker](https://github.com/kitao/pyxel/issues) to submit bug reports and feature or enhancement requests. Before submitting a new issue, make sure there are no similar open issues.\n\n### Functional Testing\n\nAnyone who manually tests the code and reports bugs or suggestions for enhancements in the [Issue Tracker](https://github.com/kitao/pyxel/issues) is very welcome!\n\n### Submitting Pull Requests\n\nPatches and fixes are accepted in the form of pull requests (PRs). Make sure that the issue the pull request addresses is open in the Issue Tracker.\n\nSubmitting a pull request implies that you agree to license your contribution under the [MIT License](LICENSE).\n\n## Other Information\n\n- [FAQ](docs/faq-en.md)\n- [User Examples](https://github.com/kitao/pyxel/wiki/Pyxel-User-Examples)\n- [Developer X account](https://x.com/kitao)\n\n## License\n\nPyxel is licensed under the [MIT License](LICENSE). It can be reused in proprietary software, provided that all copies of the software or its substantial portions include a copy of the MIT License terms and a copyright notice.\n\n## Recruiting Sponsors\n\nPyxel is looking for sponsors on GitHub Sponsors. Please consider sponsoring Pyxel to support its continued maintenance and feature development. As a benefit, sponsors can consult directly with the Pyxel developer. For more details, please visit [this page](https://github.com/sponsors/kitao).\n"
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "examples",
          "type": "blob",
          "size": 0.0205078125,
          "content": "python/pyxel/examples"
        },
        {
          "name": "python",
          "type": "tree",
          "content": null
        },
        {
          "name": "rust",
          "type": "tree",
          "content": null
        },
        {
          "name": "scripts",
          "type": "tree",
          "content": null
        },
        {
          "name": "wasm",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}