{
  "metadata": {
    "timestamp": 1736709417273,
    "page": 21,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjMw",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "xi-editor/xi-editor",
      "stars": 19812,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".cirrus.yml",
          "type": "blob",
          "size": 1.59765625,
          "content": "env:\n  CARGO_HOME: /tmp/cargo\n\ntask:\n  matrix:\n    - install_cmake_script: apt-get update && apt-get install -y cmake\n      matrix:\n        - name: test (linux)\n          container:\n            image: rust:latest\n            cpu: 4\n            memory: 8G\n          rustfmt_script: rustup component add rustfmt-preview && cd rust && cargo fmt --all -- --check\n          clippy_script: rustup component add clippy-preview && cd rust && cargo clippy --all -- -D warnings\n\n        - name: test (linux nightly)\n          allow_failures: true\n          container:\n            image: rustlang/rust:nightly\n            cpu: 4\n            memory: 8G\n    - osx_instance:\n        image: high-sierra-xcode-9.4.1\n      env:\n        PATH: $PATH:$CARGO_HOME/bin\n      install_cmake_script: brew install cmake || brew upgrade cmake\n      matrix:\n        - name: test (macOS)\n          install_rust_script: curl https://sh.rustup.rs -sSf | sh -s -- -y --default-toolchain stable\n          rustfmt_script: rustup component add rustfmt-preview && cd rust && cargo fmt --all -- --check\n          clippy_script: rustup component add clippy-preview && cd rust && cargo clippy --all -- -D warnings\n        - name: test (macOS nightly)\n          allow_failures: true\n          install_rust_script: curl https://sh.rustup.rs -sSf | sh -s -- -y --default-toolchain nightly\n\n  cargo_cache:\n    folder: $CARGO_HOME/registry\n    fingerprint_script: cat rust/Cargo.lock\n  build_script: cd rust && cargo build --verbose --all --jobs 4\n  test_script:\n      - cd rust\n      - cargo test --verbose --all --jobs 4\n  before_cache_script: rm -rf $CARGO_HOME/registry/index\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.060546875,
          "content": "xcuserdata/\n.DS_Store\nbuild/\n.idea\n\n*.pyc\n__pycache__\n.cache/\n"
        },
        {
          "name": ".gitmodules",
          "type": "blob",
          "size": 0.1484375,
          "content": "[submodule \"rust/syntect-plugin/syntect-resources\"]\n\tpath = rust/syntect-plugin/syntect-resources\n\turl = https://github.com/xi-editor/syntect-resources\n"
        },
        {
          "name": ".travis.yml",
          "type": "blob",
          "size": 1.2763671875,
          "content": "language: rust\nosx_image: xcode9.2\n\nrust:\n  - stable\n  - nightly\n\nos:\n  - linux\n  - osx\n  - windows\n\naddons:\n  apt:\n    packages:\n      - libssl-dev\n\nmatrix:\n  allow_failures:\n    - rust: nightly\n    - os: windows\n\n# on windows, rustup installs the msvc toolchain by default so we need link.exe\nbefore_script:\n  - if [ \"$TRAVIS_OS_NAME\" = 'windows' ]; then choco install windows-sdk-10.0; fi\n  - rustup component add rustfmt-preview\n  - rustup component add clippy-preview\n\nbefore_cache: |\n  if [[ \"$TRAVIS_OS_NAME\" == linux && \"$TRAVIS_RUST_VERSION\" == nightly ]]; then\n    RUSTFLAGS=\"--cfg procmacro2_semver_exempt\" cargo install cargo-tarpaulin -f\n  fi\n\n# windows builds run in git bash so these (should) Just Work\ncache:\n  directories:\n    - $HOME/.cargo\n\nscript:\n  - cd rust\n  - export CARGO_TARGET_DIR=/tmp/target\n  - export RUST_BACKTRACE=1\n  - RUSTFLAGS=\"-D warnings\" cargo check --all || exit\n  - cargo test --all || exit\n  - if [ \"$TRAVIS_RUST_VERSION\" = 'stable' ]; then cargo fmt --all -- --check; fi\n  - if [ \"$TRAVIS_RUST_VERSION\" = 'stable' ]; then cargo clippy --all -- -D warnings; fi\n\nafter_success: |\n  if [[ \"$TRAVIS_OS_NAME\" == linux && \"$TRAVIS_RUST_VERSION\" == nightly ]]; then\n    cd ..\n    cargo tarpaulin -r rust -v --all --out Xml\n    bash <(curl -s https://codecov.io/bash)\n  fi\n"
        },
        {
          "name": "AUTHORS",
          "type": "blob",
          "size": 0.4326171875,
          "content": "# This is the list of xi-editor authors for copyright purposes.\n#\n# This does not necessarily list everyone who has contributed code, since in\n# some cases, their employer may be the copyright holder.  To see the full list\n# of contributors, see the revision history in source control.\nGoogle LLC\nColin Rofls\nTristan Hume\nAnna Scholtz\nDavid Tolnay\nPranjal Paliwal\nAraz Abishov\nLê Viết Hoàng Dũng\nMarkus Ast\nRaph Levien\nHilmar Gústafsson\n"
        },
        {
          "name": "CODE_OF_CONDUCT.md",
          "type": "blob",
          "size": 4.6318359375,
          "content": "# Code of Conduct\n\nThe xi-editor project follows the Rust Code of Conduct, reproduced below.\n\n## Conduct\n\n**Contact**: [mods@xi-editor.io](mailto:mods@xi-editor.io)\n\n* We are committed to providing a friendly, safe and welcoming environment for all, regardless of level of experience, gender identity and expression, sexual orientation, disability, personal appearance, body size, race, ethnicity, age, religion, nationality, or other similar characteristic.\n* On chat platforms (like Zulip and IRC), please avoid using overtly sexual nicknames or other nicknames that might detract from a friendly, safe and welcoming environment for all.\n* Please be kind and courteous. There's no need to be mean or rude.\n* Respect that people have differences of opinion and that every design or implementation choice carries a trade-off and numerous costs. There is seldom a right answer.\n* Please keep unstructured critique to a minimum. If you have solid ideas you want to experiment with, make a fork and see how it works.\n* We will exclude you from interaction if you insult, demean or harass anyone. That is not welcome behavior. We interpret the term \"harassment\" as including the definition in the <a href=\"http://citizencodeofconduct.org/\">Citizen Code of Conduct</a>; if you have any lack of clarity about what might be included in that concept, please read their definition. In particular, we don't tolerate behavior that excludes people in socially marginalized groups.\n* Private harassment is also unacceptable. No matter who you are, if you feel you have been or are being harassed or made uncomfortable by a community member, please contact one of the channel ops or any of the [Rust moderation team][mod_team] immediately. Whether you're a regular contributor or a newcomer, we care about making this community a safe place for you and we've got your back.\n* Likewise any spamming, trolling, flaming, baiting or other attention-stealing behavior is not welcome.\n\n## Moderation\n\n\nThese are the policies for upholding our community's standards of conduct. If\nyou feel that a thread needs moderation, please contact a maintainer on Github.\nTo contact a moderator by email, use\n[mods@xi-editor.io](mailto:mods@xi-editor.io).\n\n1. Remarks that violate the Rust standards of conduct, including hateful, hurtful, oppressive, or exclusionary remarks, are not allowed. (Cursing is allowed, but never targeting another user, and never in a hateful manner.)\n2. Remarks that moderators find inappropriate, whether listed in the code of conduct or not, are also not allowed.\n3. Moderators will first respond to such remarks with a warning.\n4. If the warning is unheeded, the user will be \"kicked,\" i.e., kicked out of the communication channel to cool off.\n5. If the user comes back and continues to make trouble, they will be banned, i.e., indefinitely excluded.\n6. Moderators may choose at their discretion to un-ban the user if it was a first offense and they offer the offended party a genuine apology.\n7. If a moderator bans someone and you think it was unjustified, please take it up with that moderator, or with a different moderator, **in private**. Complaints about bans in-channel are not allowed.\n8. Moderators are held to a higher standard than other community members. If a moderator creates an inappropriate situation, they should expect less leeway than others.\n\nIn the Rust community we strive to go the extra step to look out for each other. Don't just aim to be technically unimpeachable, try to be your best self. In particular, avoid flirting with offensive or sensitive issues, particularly if they're off-topic; this all too often leads to unnecessary fights, hurt feelings, and damaged trust; worse, it can drive people away from the community entirely.\n\nAnd if someone takes issue with something you said or did, resist the urge to be defensive. Just stop doing what it was they complained about and apologize. Even if you feel you were misinterpreted or unfairly accused, chances are good there was something you could've communicated better — remember that it's your responsibility to make your fellow Rustaceans comfortable. Everyone wants to get along and we are all here first and foremost because we want to talk about cool technology. You will find that people will be eager to assume good intent and forgive as long as you earn their trust.\n\nThe enforcement policies listed above apply to all official xi-editor venues, including Zulip, the #xi channel on IRC, and the repositories under the xi-editor organization.\n\n*Adapted from the [Node.js Policy on Trolling](http://blog.izs.me/post/30036893703/policy-on-trolling) as well as the [Contributor Covenant v1.3.0](https://www.contributor-covenant.org/version/1/3/0/).*\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 11.091796875,
          "content": "\n                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"[]\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright [yyyy] [name of copyright owner]\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 6.861328125,
          "content": "# Xi editor\n\n***Maintenance status:*** *The xi-editor project is currently discontinued. Although we will happily accept bug fixes, no new features are currently planned. You may be interested in [the Lapce editor](https://github.com/lapce/lapce), which can be considered a spiritual successor to the xi-editor.\n— The Editors\n\n***Note:*** *This repo contains only the editor core, which is not usable on its own. For editors based on it, check out the list in [Frontends](#frontends).*\n\nThe xi-editor project is an attempt to build a high quality text editor,\nusing modern software engineering techniques. It is initially built for\nmacOS, using Cocoa for the user interface. There are also frontends for\nother operating systems available from third-party developers.\n\nGoals include:\n\n* ***Incredibly high performance***. All editing operations should commit and paint\n  in under 16ms. The editor should never make you wait for anything.\n\n* ***Beauty***. The editor should fit well on a modern desktop, and not look like a\n  throwback from the ’80s or ’90s. Text drawing should be done with the best\n  technology available (Core Text on Mac, DirectWrite on Windows, etc.), and\n  support Unicode fully.\n\n* ***Reliability***. Crashing, hanging, or losing work should never happen.\n\n* ***Developer friendliness***. It should be easy to customize xi editor, whether\n  by adding plug-ins or hacking on the core.\n\n**Learn more** with the creator of Xi, Raph Levien, in this [Recurse Center Localhost talk](https://www.recurse.com/events/localhost-raph-levien\n).\n\nScreenshot:\n\n![xi-mac screenshot](/docs/docs/img/xi-mac-screenshot.png?raw=true)\n\n\n## Getting started\n\nThis repository is the core only. You'll also need a front-end, from the list\nbelow.\n\n\n### Building the core\n\nXi-editor targets 'recent stable Rust'. We recommend installing via [rustup](https://www.rustup.rs).\nThe current minimum supported version is 1.40.\n\nTo build the xi-editor core from the root directory of this repo:\n\n```\n> cd rust\n> cargo build\n```\n\n\n## Frontends\n\nHere are some front-ends in various stages of development:\n\n* [xi-mac](https://github.com/xi-editor/xi-mac), the official macOS front-end.\n\n* [xi-gtk](https://github.com/eyelash/xi-gtk), a GTK+ front-end.\n\n* [xi-term](https://github.com/xi-frontend/xi-term), a text UI.\n\n* [xi-electron](https://github.com/acheronfail/xi-electron), a cross-platform front-end based on web-technologies.\n\n* [Tau](https://gitlab.gnome.org/World/Tau), a GTK+ front-end written in Rust. Forked from https://github.com/bvinc/gxi, which was abandoned.\n\n* [xi-win](https://github.com/xi-editor/xi-win), an experimental Windows front-end written in Rust.\n\n* [kod](https://github.com/linde12/kod), a terminal frontend written in Golang.\n\n* [xi-qt](https://github.com/sw5cc/xi-qt), a Qt front-end.\n\n* [vixi](https://github.com/Peltoche/vixi), a Vim like front-end in Rust.\n\nThe following are currently inactive, based on earlier versions of the front-end\nprotocol, but perhaps could be revitalized:\n\n* [xi_glium](https://github.com/potocpav/xi_glium), an\nexperimental GL-based front-end in Rust.\n\n* [XiEditorVS2015](https://github.com/Sineaggi/XiEditorVS2015), C#.\n\n* [xi-android](https://github.com/adrientetar/xi-android), an Android frontend.\n\nThere are notes (I wouldn’t call it\ndocumentation at this point) on the protocol at\n[frontend.md](https://xi-editor.github.io/xi-editor/docs/frontend-protocol.html). If you're working on a front-end, feel free to\nsend a PR to add it to the above list.\n\n\n## Design decisions\n\nHere are some of the design decisions, and motivation why they should\ncontribute to the above goals:\n\n* ***Separation into front-end and back-end modules***. The front-end is responsible for presenting the user interface and\n  drawing a screen full of text. The back-end (also known as “core”) holds the file buffers and is\n  responsible for all potentially expensive editing operations.\n\n* ***Native UI***. Cross-platform UI toolkits never look and feel quite right. The\n  best technology for building a UI is the native framework of the platform.\n  On Mac, that’s Cocoa.\n\n* ***Rust***. The back-end needs to be extremely performant. In particular, it\n  should use little more memory than the buffers being edited. That level of\n  performance is possible in C++, but Rust offers a much more reliable, and\n  in many ways, higher level programming platform.\n\n* ***A persistent rope data structure***. Persistent ropes are efficient even for\n  very large files. In addition, they present a simple interface to their\n  clients - conceptually, they're a sequence of characters just like a string,\n  and the client need not be aware of any internal structure.\n\n* ***Asynchronous operations***. The editor should never, ever block and prevent the\n  user from getting their work done. For example, autosave will spawn a\n  thread with a snapshot of the current editor buffer (the persistent rope\n  data structure is copy-on-write so this operation is nearly free), which can\n  then proceed to write out to disk at its leisure, while the buffer is still\n  fully editable.\n\n* ***Plug-ins over scripting***. Most text editors have an associated scripting\n  language for extending functionality. However, these languages are usually\n  both more arcane and less powerful than “real” languages. The xi editor will\n  communicate with plugins through pipes, letting them be written in any\n  language, and making it easier to integrate with other systems such as\n  version control, deeper static analyzers of code, etc.\n\n* ***JSON***. The protocol for front-end / back-end communication, as well as\n  between the back-end and plug-ins, is based on simple JSON messages. I\n  considered binary formats, but the actual improvement in performance would\n  be completely in the noise. Using JSON considerably lowers friction for\n  developing plug-ins, as it’s available out of the box for most modern\n  languages, and there are plenty of the libraries available for the other\n  ones.\n\n\n## Current status\n\nThis is still a project in its early stages. The Mac build has basic editing\nfunctionality (it was used to write this README), but looks very spare and\nis still missing essentials such as auto-indent. At the moment, it’s expected\nthat its main community will be developers interested in hacking on a text\neditor.\n\n\n## Authors\n\nThe xi-editor project was started by Raph Levien but has since received\ncontributions from a number of other people. See the [AUTHORS](AUTHORS)\nfile for details.\n\n\n## License\n\nThis project is licensed under the Apache 2 [license](LICENSE).\n\n\n## Contributions\n\nWe gladly accept contributions via GitHub pull requests. Please see\n[CONTRIBUTING.md](.github/CONTRIBUTING.md) for more details.\n\nIf you are interested in contributing but not sure where to start, there is an\nactive Zulip channel at #xi-editor on https://xi.zulipchat.com. There is also\na #xi channel on irc.mozilla.org. Finally, there is a subreddit at\n[/r/xi_editor](https://www.reddit.com/r/xi_editor/).\n"
        },
        {
          "name": "doc",
          "type": "tree",
          "content": null
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "icons",
          "type": "tree",
          "content": null
        },
        {
          "name": "python",
          "type": "tree",
          "content": null
        },
        {
          "name": "rfcs",
          "type": "tree",
          "content": null
        },
        {
          "name": "rust",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}